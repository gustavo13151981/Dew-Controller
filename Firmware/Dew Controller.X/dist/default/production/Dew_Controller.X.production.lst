

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jan 28 19:30:27 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	stringtext40,global,class=STRCODE,delta=2
    47                           	psect	stringtext41,global,class=STRCODE,delta=2
    48                           	psect	stringtext42,global,class=STRCODE,delta=2
    49                           	psect	stringtext43,global,class=STRCODE,delta=2
    50                           	psect	cinit,global,class=CODE,merge=1,delta=2
    51                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    52                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    53                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    54                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    55                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    56                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    57                           	psect	inittext,global,class=CODE,delta=2
    58                           	psect	clrtext,global,class=CODE,delta=2
    59                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    60                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    61                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    62                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    63                           	psect	text1,local,class=CODE,merge=1,delta=2
    64                           	psect	text2,local,class=CODE,merge=1,delta=2
    65                           	psect	text3,local,class=CODE,merge=1,delta=2
    66                           	psect	text4,local,class=CODE,merge=1,delta=2
    67                           	psect	text5,local,class=CODE,merge=1,delta=2
    68                           	psect	text6,local,class=CODE,merge=1,delta=2
    69                           	psect	text7,local,class=CODE,merge=1,delta=2
    70                           	psect	text8,local,class=CODE,merge=1,delta=2
    71                           	psect	text9,local,class=CODE,merge=1,delta=2
    72                           	psect	text10,local,class=CODE,merge=1,delta=2
    73                           	psect	text11,local,class=CODE,merge=1,delta=2
    74                           	psect	text12,local,class=CODE,merge=1,delta=2
    75                           	psect	text13,local,class=CODE,merge=1,delta=2
    76                           	psect	text14,local,class=CODE,merge=1,delta=2
    77                           	psect	text15,local,class=CODE,merge=1,delta=2
    78                           	psect	text16,local,class=CODE,merge=1,delta=2
    79                           	psect	text17,local,class=CODE,merge=1,delta=2
    80                           	psect	text18,local,class=CODE,merge=1,delta=2
    81                           	psect	text19,local,class=CODE,merge=1,delta=2
    82                           	psect	text20,local,class=CODE,merge=1,delta=2
    83                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text22,local,class=CODE,merge=1,delta=2
    85                           	psect	text23,local,class=CODE,merge=1,delta=2
    86                           	psect	text24,local,class=CODE,merge=1,delta=2
    87                           	psect	text25,local,class=CODE,merge=1,delta=2
    88                           	psect	text26,local,class=CODE,merge=1,delta=2
    89                           	psect	text27,local,class=CODE,merge=1,delta=2
    90                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    91                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    92                           	psect	text30,local,class=CODE,merge=1,delta=2
    93                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    94                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    95                           	psect	text33,local,class=CODE,merge=1,delta=2
    96                           	psect	text34,local,class=CODE,merge=1,delta=2
    97                           	psect	text35,local,class=CODE,merge=1,delta=2
    98                           	psect	text36,local,class=CODE,merge=1,delta=2
    99                           	psect	text37,local,class=CODE,merge=1,delta=2
   100                           	psect	text38,local,class=CODE,merge=1,delta=2
   101                           	psect	text39,local,class=CODE,merge=1,delta=2
   102                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
   103                           	psect	text41,local,class=CODE,merge=1,delta=2
   104                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
   105                           	psect	text43,local,class=CODE,merge=1,delta=2
   106                           	psect	text44,local,class=CODE,merge=1,delta=2
   107                           	psect	text45,local,class=CODE,merge=1,delta=2
   108                           	psect	text46,local,class=CODE,merge=1,delta=2
   109                           	psect	text47,local,class=CODE,merge=1,delta=2
   110                           	psect	text48,local,class=CODE,merge=1,delta=2
   111                           	psect	text49,local,class=CODE,merge=1,delta=2
   112                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
   113                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   114                           	psect	text52,local,class=CODE,merge=1,delta=2
   115                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
   116                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   117                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   118                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   119                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
   120                           	psect	text58,local,class=CODE,merge=1,delta=2
   121                           	psect	text59,local,class=CODE,merge=1,delta=2
   122                           	psect	text60,local,class=CODE,merge=1,delta=2
   123                           	psect	text61,local,class=CODE,merge=1,delta=2
   124                           	psect	text62,local,class=CODE,merge=1,delta=2
   125                           	psect	text63,local,class=CODE,merge=1,delta=2
   126                           	psect	text64,local,class=CODE,merge=1,delta=2
   127                           	psect	text65,local,class=CODE,merge=1,delta=2
   128                           	psect	intentry,global,class=CODE,delta=2
   129                           	psect	text67,local,class=CODE,merge=1,delta=2
   130                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
   131                           	psect	text69,local,class=CODE,merge=1,delta=2
   132                           	psect	text70,local,class=CODE,merge=1,delta=2
   133                           	psect	text71,local,class=CODE,merge=1,delta=2
   134                           	psect	text72,local,class=CODE,merge=1,delta=2
   135                           	dabs	1,0xCA0,32
   136                           	dabs	1,0xC20,80
   137                           	dabs	1,0xBB3,61
   138                           	dabs	1,0x2743,0,_data
   139                           	dabs	1,0x7E,2
   140  0000                     
   141                           ; Version 2.10
   142                           ; Generated 31/07/2019 GMT
   143                           ; 
   144                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC16F15356 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0010                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0016                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  0119                     	;# 
   205  0119                     	;# 
   206  0119                     	;# 
   207  011A                     	;# 
   208  011A                     	;# 
   209  011A                     	;# 
   210  011B                     	;# 
   211  011B                     	;# 
   212  011B                     	;# 
   213  011B                     	;# 
   214  011B                     	;# 
   215  011C                     	;# 
   216  011C                     	;# 
   217  011C                     	;# 
   218  011D                     	;# 
   219  011D                     	;# 
   220  011D                     	;# 
   221  011E                     	;# 
   222  011E                     	;# 
   223  011E                     	;# 
   224  011F                     	;# 
   225  011F                     	;# 
   226  011F                     	;# 
   227  011F                     	;# 
   228  011F                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  018E                     	;# 
   232  018F                     	;# 
   233  0190                     	;# 
   234  0191                     	;# 
   235  0192                     	;# 
   236  0196                     	;# 
   237  0197                     	;# 
   238  0198                     	;# 
   239  0199                     	;# 
   240  019A                     	;# 
   241  019B                     	;# 
   242  019C                     	;# 
   243  020C                     	;# 
   244  020C                     	;# 
   245  020D                     	;# 
   246  020E                     	;# 
   247  020F                     	;# 
   248  020F                     	;# 
   249  0210                     	;# 
   250  0210                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  028C                     	;# 
   254  028C                     	;# 
   255  028D                     	;# 
   256  028D                     	;# 
   257  028E                     	;# 
   258  028F                     	;# 
   259  0290                     	;# 
   260  0291                     	;# 
   261  030C                     	;# 
   262  030C                     	;# 
   263  030D                     	;# 
   264  030E                     	;# 
   265  030F                     	;# 
   266  0310                     	;# 
   267  0310                     	;# 
   268  0311                     	;# 
   269  0312                     	;# 
   270  0313                     	;# 
   271  0314                     	;# 
   272  0314                     	;# 
   273  0315                     	;# 
   274  0316                     	;# 
   275  0318                     	;# 
   276  0318                     	;# 
   277  0319                     	;# 
   278  031A                     	;# 
   279  031C                     	;# 
   280  031C                     	;# 
   281  031D                     	;# 
   282  031E                     	;# 
   283  038C                     	;# 
   284  038C                     	;# 
   285  038D                     	;# 
   286  038E                     	;# 
   287  058C                     	;# 
   288  058C                     	;# 
   289  058D                     	;# 
   290  058E                     	;# 
   291  058F                     	;# 
   292  058F                     	;# 
   293  0590                     	;# 
   294  0591                     	;# 
   295  0592                     	;# 
   296  0593                     	;# 
   297  059C                     	;# 
   298  059C                     	;# 
   299  059D                     	;# 
   300  059D                     	;# 
   301  059E                     	;# 
   302  059F                     	;# 
   303  060C                     	;# 
   304  060D                     	;# 
   305  060E                     	;# 
   306  060F                     	;# 
   307  0610                     	;# 
   308  0611                     	;# 
   309  0612                     	;# 
   310  0613                     	;# 
   311  0614                     	;# 
   312  070C                     	;# 
   313  070D                     	;# 
   314  070E                     	;# 
   315  070F                     	;# 
   316  0710                     	;# 
   317  0711                     	;# 
   318  0712                     	;# 
   319  0713                     	;# 
   320  0716                     	;# 
   321  0717                     	;# 
   322  0718                     	;# 
   323  0719                     	;# 
   324  071A                     	;# 
   325  071B                     	;# 
   326  071C                     	;# 
   327  071D                     	;# 
   328  0796                     	;# 
   329  0797                     	;# 
   330  0798                     	;# 
   331  0799                     	;# 
   332  079A                     	;# 
   333  079B                     	;# 
   334  080C                     	;# 
   335  080D                     	;# 
   336  080E                     	;# 
   337  080F                     	;# 
   338  0810                     	;# 
   339  0811                     	;# 
   340  0812                     	;# 
   341  0813                     	;# 
   342  0814                     	;# 
   343  081A                     	;# 
   344  081A                     	;# 
   345  081B                     	;# 
   346  081C                     	;# 
   347  081C                     	;# 
   348  081D                     	;# 
   349  081E                     	;# 
   350  081F                     	;# 
   351  088C                     	;# 
   352  088D                     	;# 
   353  088E                     	;# 
   354  088F                     	;# 
   355  0890                     	;# 
   356  0891                     	;# 
   357  0892                     	;# 
   358  0893                     	;# 
   359  0895                     	;# 
   360  0896                     	;# 
   361  090C                     	;# 
   362  090E                     	;# 
   363  090F                     	;# 
   364  091F                     	;# 
   365  098F                     	;# 
   366  098F                     	;# 
   367  0990                     	;# 
   368  0991                     	;# 
   369  0992                     	;# 
   370  0993                     	;# 
   371  0994                     	;# 
   372  0995                     	;# 
   373  0996                     	;# 
   374  0997                     	;# 
   375  0A19                     	;# 
   376  0A19                     	;# 
   377  0A1A                     	;# 
   378  0A1A                     	;# 
   379  0A1B                     	;# 
   380  0A1B                     	;# 
   381  0A1B                     	;# 
   382  0A1C                     	;# 
   383  0A1C                     	;# 
   384  0A1D                     	;# 
   385  0A1D                     	;# 
   386  0A1E                     	;# 
   387  0A1E                     	;# 
   388  0A1F                     	;# 
   389  0A1F                     	;# 
   390  0A1F                     	;# 
   391  1E0F                     	;# 
   392  1E10                     	;# 
   393  1E11                     	;# 
   394  1E12                     	;# 
   395  1E13                     	;# 
   396  1E14                     	;# 
   397  1E15                     	;# 
   398  1E16                     	;# 
   399  1E17                     	;# 
   400  1E18                     	;# 
   401  1E19                     	;# 
   402  1E1A                     	;# 
   403  1E1B                     	;# 
   404  1E1C                     	;# 
   405  1E1D                     	;# 
   406  1E1E                     	;# 
   407  1E1F                     	;# 
   408  1E20                     	;# 
   409  1E21                     	;# 
   410  1E22                     	;# 
   411  1E23                     	;# 
   412  1E24                     	;# 
   413  1E25                     	;# 
   414  1E26                     	;# 
   415  1E27                     	;# 
   416  1E28                     	;# 
   417  1E29                     	;# 
   418  1E2A                     	;# 
   419  1E2B                     	;# 
   420  1E2C                     	;# 
   421  1E2D                     	;# 
   422  1E2E                     	;# 
   423  1E2F                     	;# 
   424  1E30                     	;# 
   425  1E31                     	;# 
   426  1E32                     	;# 
   427  1E33                     	;# 
   428  1E34                     	;# 
   429  1E35                     	;# 
   430  1E36                     	;# 
   431  1E37                     	;# 
   432  1E8F                     	;# 
   433  1E90                     	;# 
   434  1E91                     	;# 
   435  1E92                     	;# 
   436  1E93                     	;# 
   437  1E9C                     	;# 
   438  1EA1                     	;# 
   439  1EA2                     	;# 
   440  1EB1                     	;# 
   441  1EBB                     	;# 
   442  1EBC                     	;# 
   443  1EBD                     	;# 
   444  1EBE                     	;# 
   445  1EC3                     	;# 
   446  1EC5                     	;# 
   447  1EC6                     	;# 
   448  1EC7                     	;# 
   449  1EC8                     	;# 
   450  1EC9                     	;# 
   451  1ECA                     	;# 
   452  1ECB                     	;# 
   453  1ECC                     	;# 
   454  1ECD                     	;# 
   455  1ECE                     	;# 
   456  1F10                     	;# 
   457  1F11                     	;# 
   458  1F12                     	;# 
   459  1F13                     	;# 
   460  1F14                     	;# 
   461  1F15                     	;# 
   462  1F16                     	;# 
   463  1F17                     	;# 
   464  1F18                     	;# 
   465  1F19                     	;# 
   466  1F1A                     	;# 
   467  1F1B                     	;# 
   468  1F1C                     	;# 
   469  1F1D                     	;# 
   470  1F1E                     	;# 
   471  1F1F                     	;# 
   472  1F20                     	;# 
   473  1F21                     	;# 
   474  1F22                     	;# 
   475  1F23                     	;# 
   476  1F24                     	;# 
   477  1F25                     	;# 
   478  1F26                     	;# 
   479  1F27                     	;# 
   480  1F38                     	;# 
   481  1F39                     	;# 
   482  1F3A                     	;# 
   483  1F3B                     	;# 
   484  1F3C                     	;# 
   485  1F3D                     	;# 
   486  1F3E                     	;# 
   487  1F3F                     	;# 
   488  1F43                     	;# 
   489  1F44                     	;# 
   490  1F45                     	;# 
   491  1F46                     	;# 
   492  1F47                     	;# 
   493  1F48                     	;# 
   494  1F49                     	;# 
   495  1F4A                     	;# 
   496  1F4E                     	;# 
   497  1F4F                     	;# 
   498  1F50                     	;# 
   499  1F51                     	;# 
   500  1F52                     	;# 
   501  1F53                     	;# 
   502  1F54                     	;# 
   503  1F55                     	;# 
   504  1F65                     	;# 
   505  1F68                     	;# 
   506  1F69                     	;# 
   507  1F6A                     	;# 
   508  1F6B                     	;# 
   509  1FE4                     	;# 
   510  1FE5                     	;# 
   511  1FE6                     	;# 
   512  1FE7                     	;# 
   513  1FE8                     	;# 
   514  1FE8                     	;# 
   515  1FE9                     	;# 
   516  1FEA                     	;# 
   517  1FEB                     	;# 
   518  1FED                     	;# 
   519  1FEE                     	;# 
   520  1FEF                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  0010                     	;# 
   537  0012                     	;# 
   538  0013                     	;# 
   539  0014                     	;# 
   540  0016                     	;# 
   541  0018                     	;# 
   542  0019                     	;# 
   543  001A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  009F                     	;# 
   550  0119                     	;# 
   551  0119                     	;# 
   552  0119                     	;# 
   553  011A                     	;# 
   554  011A                     	;# 
   555  011A                     	;# 
   556  011B                     	;# 
   557  011B                     	;# 
   558  011B                     	;# 
   559  011B                     	;# 
   560  011B                     	;# 
   561  011C                     	;# 
   562  011C                     	;# 
   563  011C                     	;# 
   564  011D                     	;# 
   565  011D                     	;# 
   566  011D                     	;# 
   567  011E                     	;# 
   568  011E                     	;# 
   569  011E                     	;# 
   570  011F                     	;# 
   571  011F                     	;# 
   572  011F                     	;# 
   573  011F                     	;# 
   574  011F                     	;# 
   575  018C                     	;# 
   576  018D                     	;# 
   577  018E                     	;# 
   578  018F                     	;# 
   579  0190                     	;# 
   580  0191                     	;# 
   581  0192                     	;# 
   582  0196                     	;# 
   583  0197                     	;# 
   584  0198                     	;# 
   585  0199                     	;# 
   586  019A                     	;# 
   587  019B                     	;# 
   588  019C                     	;# 
   589  020C                     	;# 
   590  020C                     	;# 
   591  020D                     	;# 
   592  020E                     	;# 
   593  020F                     	;# 
   594  020F                     	;# 
   595  0210                     	;# 
   596  0210                     	;# 
   597  0211                     	;# 
   598  0211                     	;# 
   599  028C                     	;# 
   600  028C                     	;# 
   601  028D                     	;# 
   602  028D                     	;# 
   603  028E                     	;# 
   604  028F                     	;# 
   605  0290                     	;# 
   606  0291                     	;# 
   607  030C                     	;# 
   608  030C                     	;# 
   609  030D                     	;# 
   610  030E                     	;# 
   611  030F                     	;# 
   612  0310                     	;# 
   613  0310                     	;# 
   614  0311                     	;# 
   615  0312                     	;# 
   616  0313                     	;# 
   617  0314                     	;# 
   618  0314                     	;# 
   619  0315                     	;# 
   620  0316                     	;# 
   621  0318                     	;# 
   622  0318                     	;# 
   623  0319                     	;# 
   624  031A                     	;# 
   625  031C                     	;# 
   626  031C                     	;# 
   627  031D                     	;# 
   628  031E                     	;# 
   629  038C                     	;# 
   630  038C                     	;# 
   631  038D                     	;# 
   632  038E                     	;# 
   633  058C                     	;# 
   634  058C                     	;# 
   635  058D                     	;# 
   636  058E                     	;# 
   637  058F                     	;# 
   638  058F                     	;# 
   639  0590                     	;# 
   640  0591                     	;# 
   641  0592                     	;# 
   642  0593                     	;# 
   643  059C                     	;# 
   644  059C                     	;# 
   645  059D                     	;# 
   646  059D                     	;# 
   647  059E                     	;# 
   648  059F                     	;# 
   649  060C                     	;# 
   650  060D                     	;# 
   651  060E                     	;# 
   652  060F                     	;# 
   653  0610                     	;# 
   654  0611                     	;# 
   655  0612                     	;# 
   656  0613                     	;# 
   657  0614                     	;# 
   658  070C                     	;# 
   659  070D                     	;# 
   660  070E                     	;# 
   661  070F                     	;# 
   662  0710                     	;# 
   663  0711                     	;# 
   664  0712                     	;# 
   665  0713                     	;# 
   666  0716                     	;# 
   667  0717                     	;# 
   668  0718                     	;# 
   669  0719                     	;# 
   670  071A                     	;# 
   671  071B                     	;# 
   672  071C                     	;# 
   673  071D                     	;# 
   674  0796                     	;# 
   675  0797                     	;# 
   676  0798                     	;# 
   677  0799                     	;# 
   678  079A                     	;# 
   679  079B                     	;# 
   680  080C                     	;# 
   681  080D                     	;# 
   682  080E                     	;# 
   683  080F                     	;# 
   684  0810                     	;# 
   685  0811                     	;# 
   686  0812                     	;# 
   687  0813                     	;# 
   688  0814                     	;# 
   689  081A                     	;# 
   690  081A                     	;# 
   691  081B                     	;# 
   692  081C                     	;# 
   693  081C                     	;# 
   694  081D                     	;# 
   695  081E                     	;# 
   696  081F                     	;# 
   697  088C                     	;# 
   698  088D                     	;# 
   699  088E                     	;# 
   700  088F                     	;# 
   701  0890                     	;# 
   702  0891                     	;# 
   703  0892                     	;# 
   704  0893                     	;# 
   705  0895                     	;# 
   706  0896                     	;# 
   707  090C                     	;# 
   708  090E                     	;# 
   709  090F                     	;# 
   710  091F                     	;# 
   711  098F                     	;# 
   712  098F                     	;# 
   713  0990                     	;# 
   714  0991                     	;# 
   715  0992                     	;# 
   716  0993                     	;# 
   717  0994                     	;# 
   718  0995                     	;# 
   719  0996                     	;# 
   720  0997                     	;# 
   721  0A19                     	;# 
   722  0A19                     	;# 
   723  0A1A                     	;# 
   724  0A1A                     	;# 
   725  0A1B                     	;# 
   726  0A1B                     	;# 
   727  0A1B                     	;# 
   728  0A1C                     	;# 
   729  0A1C                     	;# 
   730  0A1D                     	;# 
   731  0A1D                     	;# 
   732  0A1E                     	;# 
   733  0A1E                     	;# 
   734  0A1F                     	;# 
   735  0A1F                     	;# 
   736  0A1F                     	;# 
   737  1E0F                     	;# 
   738  1E10                     	;# 
   739  1E11                     	;# 
   740  1E12                     	;# 
   741  1E13                     	;# 
   742  1E14                     	;# 
   743  1E15                     	;# 
   744  1E16                     	;# 
   745  1E17                     	;# 
   746  1E18                     	;# 
   747  1E19                     	;# 
   748  1E1A                     	;# 
   749  1E1B                     	;# 
   750  1E1C                     	;# 
   751  1E1D                     	;# 
   752  1E1E                     	;# 
   753  1E1F                     	;# 
   754  1E20                     	;# 
   755  1E21                     	;# 
   756  1E22                     	;# 
   757  1E23                     	;# 
   758  1E24                     	;# 
   759  1E25                     	;# 
   760  1E26                     	;# 
   761  1E27                     	;# 
   762  1E28                     	;# 
   763  1E29                     	;# 
   764  1E2A                     	;# 
   765  1E2B                     	;# 
   766  1E2C                     	;# 
   767  1E2D                     	;# 
   768  1E2E                     	;# 
   769  1E2F                     	;# 
   770  1E30                     	;# 
   771  1E31                     	;# 
   772  1E32                     	;# 
   773  1E33                     	;# 
   774  1E34                     	;# 
   775  1E35                     	;# 
   776  1E36                     	;# 
   777  1E37                     	;# 
   778  1E8F                     	;# 
   779  1E90                     	;# 
   780  1E91                     	;# 
   781  1E92                     	;# 
   782  1E93                     	;# 
   783  1E9C                     	;# 
   784  1EA1                     	;# 
   785  1EA2                     	;# 
   786  1EB1                     	;# 
   787  1EBB                     	;# 
   788  1EBC                     	;# 
   789  1EBD                     	;# 
   790  1EBE                     	;# 
   791  1EC3                     	;# 
   792  1EC5                     	;# 
   793  1EC6                     	;# 
   794  1EC7                     	;# 
   795  1EC8                     	;# 
   796  1EC9                     	;# 
   797  1ECA                     	;# 
   798  1ECB                     	;# 
   799  1ECC                     	;# 
   800  1ECD                     	;# 
   801  1ECE                     	;# 
   802  1F10                     	;# 
   803  1F11                     	;# 
   804  1F12                     	;# 
   805  1F13                     	;# 
   806  1F14                     	;# 
   807  1F15                     	;# 
   808  1F16                     	;# 
   809  1F17                     	;# 
   810  1F18                     	;# 
   811  1F19                     	;# 
   812  1F1A                     	;# 
   813  1F1B                     	;# 
   814  1F1C                     	;# 
   815  1F1D                     	;# 
   816  1F1E                     	;# 
   817  1F1F                     	;# 
   818  1F20                     	;# 
   819  1F21                     	;# 
   820  1F22                     	;# 
   821  1F23                     	;# 
   822  1F24                     	;# 
   823  1F25                     	;# 
   824  1F26                     	;# 
   825  1F27                     	;# 
   826  1F38                     	;# 
   827  1F39                     	;# 
   828  1F3A                     	;# 
   829  1F3B                     	;# 
   830  1F3C                     	;# 
   831  1F3D                     	;# 
   832  1F3E                     	;# 
   833  1F3F                     	;# 
   834  1F43                     	;# 
   835  1F44                     	;# 
   836  1F45                     	;# 
   837  1F46                     	;# 
   838  1F47                     	;# 
   839  1F48                     	;# 
   840  1F49                     	;# 
   841  1F4A                     	;# 
   842  1F4E                     	;# 
   843  1F4F                     	;# 
   844  1F50                     	;# 
   845  1F51                     	;# 
   846  1F52                     	;# 
   847  1F53                     	;# 
   848  1F54                     	;# 
   849  1F55                     	;# 
   850  1F65                     	;# 
   851  1F68                     	;# 
   852  1F69                     	;# 
   853  1F6A                     	;# 
   854  1F6B                     	;# 
   855  1FE4                     	;# 
   856  1FE5                     	;# 
   857  1FE6                     	;# 
   858  1FE7                     	;# 
   859  1FE8                     	;# 
   860  1FE8                     	;# 
   861  1FE9                     	;# 
   862  1FEA                     	;# 
   863  1FEB                     	;# 
   864  1FED                     	;# 
   865  1FEE                     	;# 
   866  1FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000D                     	;# 
   881  000E                     	;# 
   882  0010                     	;# 
   883  0012                     	;# 
   884  0013                     	;# 
   885  0014                     	;# 
   886  0016                     	;# 
   887  0018                     	;# 
   888  0019                     	;# 
   889  001A                     	;# 
   890  009B                     	;# 
   891  009B                     	;# 
   892  009C                     	;# 
   893  009D                     	;# 
   894  009E                     	;# 
   895  009F                     	;# 
   896  0119                     	;# 
   897  0119                     	;# 
   898  0119                     	;# 
   899  011A                     	;# 
   900  011A                     	;# 
   901  011A                     	;# 
   902  011B                     	;# 
   903  011B                     	;# 
   904  011B                     	;# 
   905  011B                     	;# 
   906  011B                     	;# 
   907  011C                     	;# 
   908  011C                     	;# 
   909  011C                     	;# 
   910  011D                     	;# 
   911  011D                     	;# 
   912  011D                     	;# 
   913  011E                     	;# 
   914  011E                     	;# 
   915  011E                     	;# 
   916  011F                     	;# 
   917  011F                     	;# 
   918  011F                     	;# 
   919  011F                     	;# 
   920  011F                     	;# 
   921  018C                     	;# 
   922  018D                     	;# 
   923  018E                     	;# 
   924  018F                     	;# 
   925  0190                     	;# 
   926  0191                     	;# 
   927  0192                     	;# 
   928  0196                     	;# 
   929  0197                     	;# 
   930  0198                     	;# 
   931  0199                     	;# 
   932  019A                     	;# 
   933  019B                     	;# 
   934  019C                     	;# 
   935  020C                     	;# 
   936  020C                     	;# 
   937  020D                     	;# 
   938  020E                     	;# 
   939  020F                     	;# 
   940  020F                     	;# 
   941  0210                     	;# 
   942  0210                     	;# 
   943  0211                     	;# 
   944  0211                     	;# 
   945  028C                     	;# 
   946  028C                     	;# 
   947  028D                     	;# 
   948  028D                     	;# 
   949  028E                     	;# 
   950  028F                     	;# 
   951  0290                     	;# 
   952  0291                     	;# 
   953  030C                     	;# 
   954  030C                     	;# 
   955  030D                     	;# 
   956  030E                     	;# 
   957  030F                     	;# 
   958  0310                     	;# 
   959  0310                     	;# 
   960  0311                     	;# 
   961  0312                     	;# 
   962  0313                     	;# 
   963  0314                     	;# 
   964  0314                     	;# 
   965  0315                     	;# 
   966  0316                     	;# 
   967  0318                     	;# 
   968  0318                     	;# 
   969  0319                     	;# 
   970  031A                     	;# 
   971  031C                     	;# 
   972  031C                     	;# 
   973  031D                     	;# 
   974  031E                     	;# 
   975  038C                     	;# 
   976  038C                     	;# 
   977  038D                     	;# 
   978  038E                     	;# 
   979  058C                     	;# 
   980  058C                     	;# 
   981  058D                     	;# 
   982  058E                     	;# 
   983  058F                     	;# 
   984  058F                     	;# 
   985  0590                     	;# 
   986  0591                     	;# 
   987  0592                     	;# 
   988  0593                     	;# 
   989  059C                     	;# 
   990  059C                     	;# 
   991  059D                     	;# 
   992  059D                     	;# 
   993  059E                     	;# 
   994  059F                     	;# 
   995  060C                     	;# 
   996  060D                     	;# 
   997  060E                     	;# 
   998  060F                     	;# 
   999  0610                     	;# 
  1000  0611                     	;# 
  1001  0612                     	;# 
  1002  0613                     	;# 
  1003  0614                     	;# 
  1004  070C                     	;# 
  1005  070D                     	;# 
  1006  070E                     	;# 
  1007  070F                     	;# 
  1008  0710                     	;# 
  1009  0711                     	;# 
  1010  0712                     	;# 
  1011  0713                     	;# 
  1012  0716                     	;# 
  1013  0717                     	;# 
  1014  0718                     	;# 
  1015  0719                     	;# 
  1016  071A                     	;# 
  1017  071B                     	;# 
  1018  071C                     	;# 
  1019  071D                     	;# 
  1020  0796                     	;# 
  1021  0797                     	;# 
  1022  0798                     	;# 
  1023  0799                     	;# 
  1024  079A                     	;# 
  1025  079B                     	;# 
  1026  080C                     	;# 
  1027  080D                     	;# 
  1028  080E                     	;# 
  1029  080F                     	;# 
  1030  0810                     	;# 
  1031  0811                     	;# 
  1032  0812                     	;# 
  1033  0813                     	;# 
  1034  0814                     	;# 
  1035  081A                     	;# 
  1036  081A                     	;# 
  1037  081B                     	;# 
  1038  081C                     	;# 
  1039  081C                     	;# 
  1040  081D                     	;# 
  1041  081E                     	;# 
  1042  081F                     	;# 
  1043  088C                     	;# 
  1044  088D                     	;# 
  1045  088E                     	;# 
  1046  088F                     	;# 
  1047  0890                     	;# 
  1048  0891                     	;# 
  1049  0892                     	;# 
  1050  0893                     	;# 
  1051  0895                     	;# 
  1052  0896                     	;# 
  1053  090C                     	;# 
  1054  090E                     	;# 
  1055  090F                     	;# 
  1056  091F                     	;# 
  1057  098F                     	;# 
  1058  098F                     	;# 
  1059  0990                     	;# 
  1060  0991                     	;# 
  1061  0992                     	;# 
  1062  0993                     	;# 
  1063  0994                     	;# 
  1064  0995                     	;# 
  1065  0996                     	;# 
  1066  0997                     	;# 
  1067  0A19                     	;# 
  1068  0A19                     	;# 
  1069  0A1A                     	;# 
  1070  0A1A                     	;# 
  1071  0A1B                     	;# 
  1072  0A1B                     	;# 
  1073  0A1B                     	;# 
  1074  0A1C                     	;# 
  1075  0A1C                     	;# 
  1076  0A1D                     	;# 
  1077  0A1D                     	;# 
  1078  0A1E                     	;# 
  1079  0A1E                     	;# 
  1080  0A1F                     	;# 
  1081  0A1F                     	;# 
  1082  0A1F                     	;# 
  1083  1E0F                     	;# 
  1084  1E10                     	;# 
  1085  1E11                     	;# 
  1086  1E12                     	;# 
  1087  1E13                     	;# 
  1088  1E14                     	;# 
  1089  1E15                     	;# 
  1090  1E16                     	;# 
  1091  1E17                     	;# 
  1092  1E18                     	;# 
  1093  1E19                     	;# 
  1094  1E1A                     	;# 
  1095  1E1B                     	;# 
  1096  1E1C                     	;# 
  1097  1E1D                     	;# 
  1098  1E1E                     	;# 
  1099  1E1F                     	;# 
  1100  1E20                     	;# 
  1101  1E21                     	;# 
  1102  1E22                     	;# 
  1103  1E23                     	;# 
  1104  1E24                     	;# 
  1105  1E25                     	;# 
  1106  1E26                     	;# 
  1107  1E27                     	;# 
  1108  1E28                     	;# 
  1109  1E29                     	;# 
  1110  1E2A                     	;# 
  1111  1E2B                     	;# 
  1112  1E2C                     	;# 
  1113  1E2D                     	;# 
  1114  1E2E                     	;# 
  1115  1E2F                     	;# 
  1116  1E30                     	;# 
  1117  1E31                     	;# 
  1118  1E32                     	;# 
  1119  1E33                     	;# 
  1120  1E34                     	;# 
  1121  1E35                     	;# 
  1122  1E36                     	;# 
  1123  1E37                     	;# 
  1124  1E8F                     	;# 
  1125  1E90                     	;# 
  1126  1E91                     	;# 
  1127  1E92                     	;# 
  1128  1E93                     	;# 
  1129  1E9C                     	;# 
  1130  1EA1                     	;# 
  1131  1EA2                     	;# 
  1132  1EB1                     	;# 
  1133  1EBB                     	;# 
  1134  1EBC                     	;# 
  1135  1EBD                     	;# 
  1136  1EBE                     	;# 
  1137  1EC3                     	;# 
  1138  1EC5                     	;# 
  1139  1EC6                     	;# 
  1140  1EC7                     	;# 
  1141  1EC8                     	;# 
  1142  1EC9                     	;# 
  1143  1ECA                     	;# 
  1144  1ECB                     	;# 
  1145  1ECC                     	;# 
  1146  1ECD                     	;# 
  1147  1ECE                     	;# 
  1148  1F10                     	;# 
  1149  1F11                     	;# 
  1150  1F12                     	;# 
  1151  1F13                     	;# 
  1152  1F14                     	;# 
  1153  1F15                     	;# 
  1154  1F16                     	;# 
  1155  1F17                     	;# 
  1156  1F18                     	;# 
  1157  1F19                     	;# 
  1158  1F1A                     	;# 
  1159  1F1B                     	;# 
  1160  1F1C                     	;# 
  1161  1F1D                     	;# 
  1162  1F1E                     	;# 
  1163  1F1F                     	;# 
  1164  1F20                     	;# 
  1165  1F21                     	;# 
  1166  1F22                     	;# 
  1167  1F23                     	;# 
  1168  1F24                     	;# 
  1169  1F25                     	;# 
  1170  1F26                     	;# 
  1171  1F27                     	;# 
  1172  1F38                     	;# 
  1173  1F39                     	;# 
  1174  1F3A                     	;# 
  1175  1F3B                     	;# 
  1176  1F3C                     	;# 
  1177  1F3D                     	;# 
  1178  1F3E                     	;# 
  1179  1F3F                     	;# 
  1180  1F43                     	;# 
  1181  1F44                     	;# 
  1182  1F45                     	;# 
  1183  1F46                     	;# 
  1184  1F47                     	;# 
  1185  1F48                     	;# 
  1186  1F49                     	;# 
  1187  1F4A                     	;# 
  1188  1F4E                     	;# 
  1189  1F4F                     	;# 
  1190  1F50                     	;# 
  1191  1F51                     	;# 
  1192  1F52                     	;# 
  1193  1F53                     	;# 
  1194  1F54                     	;# 
  1195  1F55                     	;# 
  1196  1F65                     	;# 
  1197  1F68                     	;# 
  1198  1F69                     	;# 
  1199  1F6A                     	;# 
  1200  1F6B                     	;# 
  1201  1FE4                     	;# 
  1202  1FE5                     	;# 
  1203  1FE6                     	;# 
  1204  1FE7                     	;# 
  1205  1FE8                     	;# 
  1206  1FE8                     	;# 
  1207  1FE9                     	;# 
  1208  1FEA                     	;# 
  1209  1FEB                     	;# 
  1210  1FED                     	;# 
  1211  1FEE                     	;# 
  1212  1FEF                     	;# 
  1213  0000                     	;# 
  1214  0001                     	;# 
  1215  0002                     	;# 
  1216  0003                     	;# 
  1217  0004                     	;# 
  1218  0005                     	;# 
  1219  0006                     	;# 
  1220  0007                     	;# 
  1221  0008                     	;# 
  1222  0009                     	;# 
  1223  000A                     	;# 
  1224  000B                     	;# 
  1225  000C                     	;# 
  1226  000D                     	;# 
  1227  000E                     	;# 
  1228  0010                     	;# 
  1229  0012                     	;# 
  1230  0013                     	;# 
  1231  0014                     	;# 
  1232  0016                     	;# 
  1233  0018                     	;# 
  1234  0019                     	;# 
  1235  001A                     	;# 
  1236  009B                     	;# 
  1237  009B                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009E                     	;# 
  1241  009F                     	;# 
  1242  0119                     	;# 
  1243  0119                     	;# 
  1244  0119                     	;# 
  1245  011A                     	;# 
  1246  011A                     	;# 
  1247  011A                     	;# 
  1248  011B                     	;# 
  1249  011B                     	;# 
  1250  011B                     	;# 
  1251  011B                     	;# 
  1252  011B                     	;# 
  1253  011C                     	;# 
  1254  011C                     	;# 
  1255  011C                     	;# 
  1256  011D                     	;# 
  1257  011D                     	;# 
  1258  011D                     	;# 
  1259  011E                     	;# 
  1260  011E                     	;# 
  1261  011E                     	;# 
  1262  011F                     	;# 
  1263  011F                     	;# 
  1264  011F                     	;# 
  1265  011F                     	;# 
  1266  011F                     	;# 
  1267  018C                     	;# 
  1268  018D                     	;# 
  1269  018E                     	;# 
  1270  018F                     	;# 
  1271  0190                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0196                     	;# 
  1275  0197                     	;# 
  1276  0198                     	;# 
  1277  0199                     	;# 
  1278  019A                     	;# 
  1279  019B                     	;# 
  1280  019C                     	;# 
  1281  020C                     	;# 
  1282  020C                     	;# 
  1283  020D                     	;# 
  1284  020E                     	;# 
  1285  020F                     	;# 
  1286  020F                     	;# 
  1287  0210                     	;# 
  1288  0210                     	;# 
  1289  0211                     	;# 
  1290  0211                     	;# 
  1291  028C                     	;# 
  1292  028C                     	;# 
  1293  028D                     	;# 
  1294  028D                     	;# 
  1295  028E                     	;# 
  1296  028F                     	;# 
  1297  0290                     	;# 
  1298  0291                     	;# 
  1299  030C                     	;# 
  1300  030C                     	;# 
  1301  030D                     	;# 
  1302  030E                     	;# 
  1303  030F                     	;# 
  1304  0310                     	;# 
  1305  0310                     	;# 
  1306  0311                     	;# 
  1307  0312                     	;# 
  1308  0313                     	;# 
  1309  0314                     	;# 
  1310  0314                     	;# 
  1311  0315                     	;# 
  1312  0316                     	;# 
  1313  0318                     	;# 
  1314  0318                     	;# 
  1315  0319                     	;# 
  1316  031A                     	;# 
  1317  031C                     	;# 
  1318  031C                     	;# 
  1319  031D                     	;# 
  1320  031E                     	;# 
  1321  038C                     	;# 
  1322  038C                     	;# 
  1323  038D                     	;# 
  1324  038E                     	;# 
  1325  058C                     	;# 
  1326  058C                     	;# 
  1327  058D                     	;# 
  1328  058E                     	;# 
  1329  058F                     	;# 
  1330  058F                     	;# 
  1331  0590                     	;# 
  1332  0591                     	;# 
  1333  0592                     	;# 
  1334  0593                     	;# 
  1335  059C                     	;# 
  1336  059C                     	;# 
  1337  059D                     	;# 
  1338  059D                     	;# 
  1339  059E                     	;# 
  1340  059F                     	;# 
  1341  060C                     	;# 
  1342  060D                     	;# 
  1343  060E                     	;# 
  1344  060F                     	;# 
  1345  0610                     	;# 
  1346  0611                     	;# 
  1347  0612                     	;# 
  1348  0613                     	;# 
  1349  0614                     	;# 
  1350  070C                     	;# 
  1351  070D                     	;# 
  1352  070E                     	;# 
  1353  070F                     	;# 
  1354  0710                     	;# 
  1355  0711                     	;# 
  1356  0712                     	;# 
  1357  0713                     	;# 
  1358  0716                     	;# 
  1359  0717                     	;# 
  1360  0718                     	;# 
  1361  0719                     	;# 
  1362  071A                     	;# 
  1363  071B                     	;# 
  1364  071C                     	;# 
  1365  071D                     	;# 
  1366  0796                     	;# 
  1367  0797                     	;# 
  1368  0798                     	;# 
  1369  0799                     	;# 
  1370  079A                     	;# 
  1371  079B                     	;# 
  1372  080C                     	;# 
  1373  080D                     	;# 
  1374  080E                     	;# 
  1375  080F                     	;# 
  1376  0810                     	;# 
  1377  0811                     	;# 
  1378  0812                     	;# 
  1379  0813                     	;# 
  1380  0814                     	;# 
  1381  081A                     	;# 
  1382  081A                     	;# 
  1383  081B                     	;# 
  1384  081C                     	;# 
  1385  081C                     	;# 
  1386  081D                     	;# 
  1387  081E                     	;# 
  1388  081F                     	;# 
  1389  088C                     	;# 
  1390  088D                     	;# 
  1391  088E                     	;# 
  1392  088F                     	;# 
  1393  0890                     	;# 
  1394  0891                     	;# 
  1395  0892                     	;# 
  1396  0893                     	;# 
  1397  0895                     	;# 
  1398  0896                     	;# 
  1399  090C                     	;# 
  1400  090E                     	;# 
  1401  090F                     	;# 
  1402  091F                     	;# 
  1403  098F                     	;# 
  1404  098F                     	;# 
  1405  0990                     	;# 
  1406  0991                     	;# 
  1407  0992                     	;# 
  1408  0993                     	;# 
  1409  0994                     	;# 
  1410  0995                     	;# 
  1411  0996                     	;# 
  1412  0997                     	;# 
  1413  0A19                     	;# 
  1414  0A19                     	;# 
  1415  0A1A                     	;# 
  1416  0A1A                     	;# 
  1417  0A1B                     	;# 
  1418  0A1B                     	;# 
  1419  0A1B                     	;# 
  1420  0A1C                     	;# 
  1421  0A1C                     	;# 
  1422  0A1D                     	;# 
  1423  0A1D                     	;# 
  1424  0A1E                     	;# 
  1425  0A1E                     	;# 
  1426  0A1F                     	;# 
  1427  0A1F                     	;# 
  1428  0A1F                     	;# 
  1429  1E0F                     	;# 
  1430  1E10                     	;# 
  1431  1E11                     	;# 
  1432  1E12                     	;# 
  1433  1E13                     	;# 
  1434  1E14                     	;# 
  1435  1E15                     	;# 
  1436  1E16                     	;# 
  1437  1E17                     	;# 
  1438  1E18                     	;# 
  1439  1E19                     	;# 
  1440  1E1A                     	;# 
  1441  1E1B                     	;# 
  1442  1E1C                     	;# 
  1443  1E1D                     	;# 
  1444  1E1E                     	;# 
  1445  1E1F                     	;# 
  1446  1E20                     	;# 
  1447  1E21                     	;# 
  1448  1E22                     	;# 
  1449  1E23                     	;# 
  1450  1E24                     	;# 
  1451  1E25                     	;# 
  1452  1E26                     	;# 
  1453  1E27                     	;# 
  1454  1E28                     	;# 
  1455  1E29                     	;# 
  1456  1E2A                     	;# 
  1457  1E2B                     	;# 
  1458  1E2C                     	;# 
  1459  1E2D                     	;# 
  1460  1E2E                     	;# 
  1461  1E2F                     	;# 
  1462  1E30                     	;# 
  1463  1E31                     	;# 
  1464  1E32                     	;# 
  1465  1E33                     	;# 
  1466  1E34                     	;# 
  1467  1E35                     	;# 
  1468  1E36                     	;# 
  1469  1E37                     	;# 
  1470  1E8F                     	;# 
  1471  1E90                     	;# 
  1472  1E91                     	;# 
  1473  1E92                     	;# 
  1474  1E93                     	;# 
  1475  1E9C                     	;# 
  1476  1EA1                     	;# 
  1477  1EA2                     	;# 
  1478  1EB1                     	;# 
  1479  1EBB                     	;# 
  1480  1EBC                     	;# 
  1481  1EBD                     	;# 
  1482  1EBE                     	;# 
  1483  1EC3                     	;# 
  1484  1EC5                     	;# 
  1485  1EC6                     	;# 
  1486  1EC7                     	;# 
  1487  1EC8                     	;# 
  1488  1EC9                     	;# 
  1489  1ECA                     	;# 
  1490  1ECB                     	;# 
  1491  1ECC                     	;# 
  1492  1ECD                     	;# 
  1493  1ECE                     	;# 
  1494  1F10                     	;# 
  1495  1F11                     	;# 
  1496  1F12                     	;# 
  1497  1F13                     	;# 
  1498  1F14                     	;# 
  1499  1F15                     	;# 
  1500  1F16                     	;# 
  1501  1F17                     	;# 
  1502  1F18                     	;# 
  1503  1F19                     	;# 
  1504  1F1A                     	;# 
  1505  1F1B                     	;# 
  1506  1F1C                     	;# 
  1507  1F1D                     	;# 
  1508  1F1E                     	;# 
  1509  1F1F                     	;# 
  1510  1F20                     	;# 
  1511  1F21                     	;# 
  1512  1F22                     	;# 
  1513  1F23                     	;# 
  1514  1F24                     	;# 
  1515  1F25                     	;# 
  1516  1F26                     	;# 
  1517  1F27                     	;# 
  1518  1F38                     	;# 
  1519  1F39                     	;# 
  1520  1F3A                     	;# 
  1521  1F3B                     	;# 
  1522  1F3C                     	;# 
  1523  1F3D                     	;# 
  1524  1F3E                     	;# 
  1525  1F3F                     	;# 
  1526  1F43                     	;# 
  1527  1F44                     	;# 
  1528  1F45                     	;# 
  1529  1F46                     	;# 
  1530  1F47                     	;# 
  1531  1F48                     	;# 
  1532  1F49                     	;# 
  1533  1F4A                     	;# 
  1534  1F4E                     	;# 
  1535  1F4F                     	;# 
  1536  1F50                     	;# 
  1537  1F51                     	;# 
  1538  1F52                     	;# 
  1539  1F53                     	;# 
  1540  1F54                     	;# 
  1541  1F55                     	;# 
  1542  1F65                     	;# 
  1543  1F68                     	;# 
  1544  1F69                     	;# 
  1545  1F6A                     	;# 
  1546  1F6B                     	;# 
  1547  1FE4                     	;# 
  1548  1FE5                     	;# 
  1549  1FE6                     	;# 
  1550  1FE7                     	;# 
  1551  1FE8                     	;# 
  1552  1FE8                     	;# 
  1553  1FE9                     	;# 
  1554  1FEA                     	;# 
  1555  1FEB                     	;# 
  1556  1FED                     	;# 
  1557  1FEE                     	;# 
  1558  1FEF                     	;# 
  1559  0000                     	;# 
  1560  0001                     	;# 
  1561  0002                     	;# 
  1562  0003                     	;# 
  1563  0004                     	;# 
  1564  0005                     	;# 
  1565  0006                     	;# 
  1566  0007                     	;# 
  1567  0008                     	;# 
  1568  0009                     	;# 
  1569  000A                     	;# 
  1570  000B                     	;# 
  1571  000C                     	;# 
  1572  000D                     	;# 
  1573  000E                     	;# 
  1574  0010                     	;# 
  1575  0012                     	;# 
  1576  0013                     	;# 
  1577  0014                     	;# 
  1578  0016                     	;# 
  1579  0018                     	;# 
  1580  0019                     	;# 
  1581  001A                     	;# 
  1582  009B                     	;# 
  1583  009B                     	;# 
  1584  009C                     	;# 
  1585  009D                     	;# 
  1586  009E                     	;# 
  1587  009F                     	;# 
  1588  0119                     	;# 
  1589  0119                     	;# 
  1590  0119                     	;# 
  1591  011A                     	;# 
  1592  011A                     	;# 
  1593  011A                     	;# 
  1594  011B                     	;# 
  1595  011B                     	;# 
  1596  011B                     	;# 
  1597  011B                     	;# 
  1598  011B                     	;# 
  1599  011C                     	;# 
  1600  011C                     	;# 
  1601  011C                     	;# 
  1602  011D                     	;# 
  1603  011D                     	;# 
  1604  011D                     	;# 
  1605  011E                     	;# 
  1606  011E                     	;# 
  1607  011E                     	;# 
  1608  011F                     	;# 
  1609  011F                     	;# 
  1610  011F                     	;# 
  1611  011F                     	;# 
  1612  011F                     	;# 
  1613  018C                     	;# 
  1614  018D                     	;# 
  1615  018E                     	;# 
  1616  018F                     	;# 
  1617  0190                     	;# 
  1618  0191                     	;# 
  1619  0192                     	;# 
  1620  0196                     	;# 
  1621  0197                     	;# 
  1622  0198                     	;# 
  1623  0199                     	;# 
  1624  019A                     	;# 
  1625  019B                     	;# 
  1626  019C                     	;# 
  1627  020C                     	;# 
  1628  020C                     	;# 
  1629  020D                     	;# 
  1630  020E                     	;# 
  1631  020F                     	;# 
  1632  020F                     	;# 
  1633  0210                     	;# 
  1634  0210                     	;# 
  1635  0211                     	;# 
  1636  0211                     	;# 
  1637  028C                     	;# 
  1638  028C                     	;# 
  1639  028D                     	;# 
  1640  028D                     	;# 
  1641  028E                     	;# 
  1642  028F                     	;# 
  1643  0290                     	;# 
  1644  0291                     	;# 
  1645  030C                     	;# 
  1646  030C                     	;# 
  1647  030D                     	;# 
  1648  030E                     	;# 
  1649  030F                     	;# 
  1650  0310                     	;# 
  1651  0310                     	;# 
  1652  0311                     	;# 
  1653  0312                     	;# 
  1654  0313                     	;# 
  1655  0314                     	;# 
  1656  0314                     	;# 
  1657  0315                     	;# 
  1658  0316                     	;# 
  1659  0318                     	;# 
  1660  0318                     	;# 
  1661  0319                     	;# 
  1662  031A                     	;# 
  1663  031C                     	;# 
  1664  031C                     	;# 
  1665  031D                     	;# 
  1666  031E                     	;# 
  1667  038C                     	;# 
  1668  038C                     	;# 
  1669  038D                     	;# 
  1670  038E                     	;# 
  1671  058C                     	;# 
  1672  058C                     	;# 
  1673  058D                     	;# 
  1674  058E                     	;# 
  1675  058F                     	;# 
  1676  058F                     	;# 
  1677  0590                     	;# 
  1678  0591                     	;# 
  1679  0592                     	;# 
  1680  0593                     	;# 
  1681  059C                     	;# 
  1682  059C                     	;# 
  1683  059D                     	;# 
  1684  059D                     	;# 
  1685  059E                     	;# 
  1686  059F                     	;# 
  1687  060C                     	;# 
  1688  060D                     	;# 
  1689  060E                     	;# 
  1690  060F                     	;# 
  1691  0610                     	;# 
  1692  0611                     	;# 
  1693  0612                     	;# 
  1694  0613                     	;# 
  1695  0614                     	;# 
  1696  070C                     	;# 
  1697  070D                     	;# 
  1698  070E                     	;# 
  1699  070F                     	;# 
  1700  0710                     	;# 
  1701  0711                     	;# 
  1702  0712                     	;# 
  1703  0713                     	;# 
  1704  0716                     	;# 
  1705  0717                     	;# 
  1706  0718                     	;# 
  1707  0719                     	;# 
  1708  071A                     	;# 
  1709  071B                     	;# 
  1710  071C                     	;# 
  1711  071D                     	;# 
  1712  0796                     	;# 
  1713  0797                     	;# 
  1714  0798                     	;# 
  1715  0799                     	;# 
  1716  079A                     	;# 
  1717  079B                     	;# 
  1718  080C                     	;# 
  1719  080D                     	;# 
  1720  080E                     	;# 
  1721  080F                     	;# 
  1722  0810                     	;# 
  1723  0811                     	;# 
  1724  0812                     	;# 
  1725  0813                     	;# 
  1726  0814                     	;# 
  1727  081A                     	;# 
  1728  081A                     	;# 
  1729  081B                     	;# 
  1730  081C                     	;# 
  1731  081C                     	;# 
  1732  081D                     	;# 
  1733  081E                     	;# 
  1734  081F                     	;# 
  1735  088C                     	;# 
  1736  088D                     	;# 
  1737  088E                     	;# 
  1738  088F                     	;# 
  1739  0890                     	;# 
  1740  0891                     	;# 
  1741  0892                     	;# 
  1742  0893                     	;# 
  1743  0895                     	;# 
  1744  0896                     	;# 
  1745  090C                     	;# 
  1746  090E                     	;# 
  1747  090F                     	;# 
  1748  091F                     	;# 
  1749  098F                     	;# 
  1750  098F                     	;# 
  1751  0990                     	;# 
  1752  0991                     	;# 
  1753  0992                     	;# 
  1754  0993                     	;# 
  1755  0994                     	;# 
  1756  0995                     	;# 
  1757  0996                     	;# 
  1758  0997                     	;# 
  1759  0A19                     	;# 
  1760  0A19                     	;# 
  1761  0A1A                     	;# 
  1762  0A1A                     	;# 
  1763  0A1B                     	;# 
  1764  0A1B                     	;# 
  1765  0A1B                     	;# 
  1766  0A1C                     	;# 
  1767  0A1C                     	;# 
  1768  0A1D                     	;# 
  1769  0A1D                     	;# 
  1770  0A1E                     	;# 
  1771  0A1E                     	;# 
  1772  0A1F                     	;# 
  1773  0A1F                     	;# 
  1774  0A1F                     	;# 
  1775  1E0F                     	;# 
  1776  1E10                     	;# 
  1777  1E11                     	;# 
  1778  1E12                     	;# 
  1779  1E13                     	;# 
  1780  1E14                     	;# 
  1781  1E15                     	;# 
  1782  1E16                     	;# 
  1783  1E17                     	;# 
  1784  1E18                     	;# 
  1785  1E19                     	;# 
  1786  1E1A                     	;# 
  1787  1E1B                     	;# 
  1788  1E1C                     	;# 
  1789  1E1D                     	;# 
  1790  1E1E                     	;# 
  1791  1E1F                     	;# 
  1792  1E20                     	;# 
  1793  1E21                     	;# 
  1794  1E22                     	;# 
  1795  1E23                     	;# 
  1796  1E24                     	;# 
  1797  1E25                     	;# 
  1798  1E26                     	;# 
  1799  1E27                     	;# 
  1800  1E28                     	;# 
  1801  1E29                     	;# 
  1802  1E2A                     	;# 
  1803  1E2B                     	;# 
  1804  1E2C                     	;# 
  1805  1E2D                     	;# 
  1806  1E2E                     	;# 
  1807  1E2F                     	;# 
  1808  1E30                     	;# 
  1809  1E31                     	;# 
  1810  1E32                     	;# 
  1811  1E33                     	;# 
  1812  1E34                     	;# 
  1813  1E35                     	;# 
  1814  1E36                     	;# 
  1815  1E37                     	;# 
  1816  1E8F                     	;# 
  1817  1E90                     	;# 
  1818  1E91                     	;# 
  1819  1E92                     	;# 
  1820  1E93                     	;# 
  1821  1E9C                     	;# 
  1822  1EA1                     	;# 
  1823  1EA2                     	;# 
  1824  1EB1                     	;# 
  1825  1EBB                     	;# 
  1826  1EBC                     	;# 
  1827  1EBD                     	;# 
  1828  1EBE                     	;# 
  1829  1EC3                     	;# 
  1830  1EC5                     	;# 
  1831  1EC6                     	;# 
  1832  1EC7                     	;# 
  1833  1EC8                     	;# 
  1834  1EC9                     	;# 
  1835  1ECA                     	;# 
  1836  1ECB                     	;# 
  1837  1ECC                     	;# 
  1838  1ECD                     	;# 
  1839  1ECE                     	;# 
  1840  1F10                     	;# 
  1841  1F11                     	;# 
  1842  1F12                     	;# 
  1843  1F13                     	;# 
  1844  1F14                     	;# 
  1845  1F15                     	;# 
  1846  1F16                     	;# 
  1847  1F17                     	;# 
  1848  1F18                     	;# 
  1849  1F19                     	;# 
  1850  1F1A                     	;# 
  1851  1F1B                     	;# 
  1852  1F1C                     	;# 
  1853  1F1D                     	;# 
  1854  1F1E                     	;# 
  1855  1F1F                     	;# 
  1856  1F20                     	;# 
  1857  1F21                     	;# 
  1858  1F22                     	;# 
  1859  1F23                     	;# 
  1860  1F24                     	;# 
  1861  1F25                     	;# 
  1862  1F26                     	;# 
  1863  1F27                     	;# 
  1864  1F38                     	;# 
  1865  1F39                     	;# 
  1866  1F3A                     	;# 
  1867  1F3B                     	;# 
  1868  1F3C                     	;# 
  1869  1F3D                     	;# 
  1870  1F3E                     	;# 
  1871  1F3F                     	;# 
  1872  1F43                     	;# 
  1873  1F44                     	;# 
  1874  1F45                     	;# 
  1875  1F46                     	;# 
  1876  1F47                     	;# 
  1877  1F48                     	;# 
  1878  1F49                     	;# 
  1879  1F4A                     	;# 
  1880  1F4E                     	;# 
  1881  1F4F                     	;# 
  1882  1F50                     	;# 
  1883  1F51                     	;# 
  1884  1F52                     	;# 
  1885  1F53                     	;# 
  1886  1F54                     	;# 
  1887  1F55                     	;# 
  1888  1F65                     	;# 
  1889  1F68                     	;# 
  1890  1F69                     	;# 
  1891  1F6A                     	;# 
  1892  1F6B                     	;# 
  1893  1FE4                     	;# 
  1894  1FE5                     	;# 
  1895  1FE6                     	;# 
  1896  1FE7                     	;# 
  1897  1FE8                     	;# 
  1898  1FE8                     	;# 
  1899  1FE9                     	;# 
  1900  1FEA                     	;# 
  1901  1FEB                     	;# 
  1902  1FED                     	;# 
  1903  1FEE                     	;# 
  1904  1FEF                     	;# 
  1905  0000                     	;# 
  1906  0001                     	;# 
  1907  0002                     	;# 
  1908  0003                     	;# 
  1909  0004                     	;# 
  1910  0005                     	;# 
  1911  0006                     	;# 
  1912  0007                     	;# 
  1913  0008                     	;# 
  1914  0009                     	;# 
  1915  000A                     	;# 
  1916  000B                     	;# 
  1917  000C                     	;# 
  1918  000D                     	;# 
  1919  000E                     	;# 
  1920  0010                     	;# 
  1921  0012                     	;# 
  1922  0013                     	;# 
  1923  0014                     	;# 
  1924  0016                     	;# 
  1925  0018                     	;# 
  1926  0019                     	;# 
  1927  001A                     	;# 
  1928  009B                     	;# 
  1929  009B                     	;# 
  1930  009C                     	;# 
  1931  009D                     	;# 
  1932  009E                     	;# 
  1933  009F                     	;# 
  1934  0119                     	;# 
  1935  0119                     	;# 
  1936  0119                     	;# 
  1937  011A                     	;# 
  1938  011A                     	;# 
  1939  011A                     	;# 
  1940  011B                     	;# 
  1941  011B                     	;# 
  1942  011B                     	;# 
  1943  011B                     	;# 
  1944  011B                     	;# 
  1945  011C                     	;# 
  1946  011C                     	;# 
  1947  011C                     	;# 
  1948  011D                     	;# 
  1949  011D                     	;# 
  1950  011D                     	;# 
  1951  011E                     	;# 
  1952  011E                     	;# 
  1953  011E                     	;# 
  1954  011F                     	;# 
  1955  011F                     	;# 
  1956  011F                     	;# 
  1957  011F                     	;# 
  1958  011F                     	;# 
  1959  018C                     	;# 
  1960  018D                     	;# 
  1961  018E                     	;# 
  1962  018F                     	;# 
  1963  0190                     	;# 
  1964  0191                     	;# 
  1965  0192                     	;# 
  1966  0196                     	;# 
  1967  0197                     	;# 
  1968  0198                     	;# 
  1969  0199                     	;# 
  1970  019A                     	;# 
  1971  019B                     	;# 
  1972  019C                     	;# 
  1973  020C                     	;# 
  1974  020C                     	;# 
  1975  020D                     	;# 
  1976  020E                     	;# 
  1977  020F                     	;# 
  1978  020F                     	;# 
  1979  0210                     	;# 
  1980  0210                     	;# 
  1981  0211                     	;# 
  1982  0211                     	;# 
  1983  028C                     	;# 
  1984  028C                     	;# 
  1985  028D                     	;# 
  1986  028D                     	;# 
  1987  028E                     	;# 
  1988  028F                     	;# 
  1989  0290                     	;# 
  1990  0291                     	;# 
  1991  030C                     	;# 
  1992  030C                     	;# 
  1993  030D                     	;# 
  1994  030E                     	;# 
  1995  030F                     	;# 
  1996  0310                     	;# 
  1997  0310                     	;# 
  1998  0311                     	;# 
  1999  0312                     	;# 
  2000  0313                     	;# 
  2001  0314                     	;# 
  2002  0314                     	;# 
  2003  0315                     	;# 
  2004  0316                     	;# 
  2005  0318                     	;# 
  2006  0318                     	;# 
  2007  0319                     	;# 
  2008  031A                     	;# 
  2009  031C                     	;# 
  2010  031C                     	;# 
  2011  031D                     	;# 
  2012  031E                     	;# 
  2013  038C                     	;# 
  2014  038C                     	;# 
  2015  038D                     	;# 
  2016  038E                     	;# 
  2017  058C                     	;# 
  2018  058C                     	;# 
  2019  058D                     	;# 
  2020  058E                     	;# 
  2021  058F                     	;# 
  2022  058F                     	;# 
  2023  0590                     	;# 
  2024  0591                     	;# 
  2025  0592                     	;# 
  2026  0593                     	;# 
  2027  059C                     	;# 
  2028  059C                     	;# 
  2029  059D                     	;# 
  2030  059D                     	;# 
  2031  059E                     	;# 
  2032  059F                     	;# 
  2033  060C                     	;# 
  2034  060D                     	;# 
  2035  060E                     	;# 
  2036  060F                     	;# 
  2037  0610                     	;# 
  2038  0611                     	;# 
  2039  0612                     	;# 
  2040  0613                     	;# 
  2041  0614                     	;# 
  2042  070C                     	;# 
  2043  070D                     	;# 
  2044  070E                     	;# 
  2045  070F                     	;# 
  2046  0710                     	;# 
  2047  0711                     	;# 
  2048  0712                     	;# 
  2049  0713                     	;# 
  2050  0716                     	;# 
  2051  0717                     	;# 
  2052  0718                     	;# 
  2053  0719                     	;# 
  2054  071A                     	;# 
  2055  071B                     	;# 
  2056  071C                     	;# 
  2057  071D                     	;# 
  2058  0796                     	;# 
  2059  0797                     	;# 
  2060  0798                     	;# 
  2061  0799                     	;# 
  2062  079A                     	;# 
  2063  079B                     	;# 
  2064  080C                     	;# 
  2065  080D                     	;# 
  2066  080E                     	;# 
  2067  080F                     	;# 
  2068  0810                     	;# 
  2069  0811                     	;# 
  2070  0812                     	;# 
  2071  0813                     	;# 
  2072  0814                     	;# 
  2073  081A                     	;# 
  2074  081A                     	;# 
  2075  081B                     	;# 
  2076  081C                     	;# 
  2077  081C                     	;# 
  2078  081D                     	;# 
  2079  081E                     	;# 
  2080  081F                     	;# 
  2081  088C                     	;# 
  2082  088D                     	;# 
  2083  088E                     	;# 
  2084  088F                     	;# 
  2085  0890                     	;# 
  2086  0891                     	;# 
  2087  0892                     	;# 
  2088  0893                     	;# 
  2089  0895                     	;# 
  2090  0896                     	;# 
  2091  090C                     	;# 
  2092  090E                     	;# 
  2093  090F                     	;# 
  2094  091F                     	;# 
  2095  098F                     	;# 
  2096  098F                     	;# 
  2097  0990                     	;# 
  2098  0991                     	;# 
  2099  0992                     	;# 
  2100  0993                     	;# 
  2101  0994                     	;# 
  2102  0995                     	;# 
  2103  0996                     	;# 
  2104  0997                     	;# 
  2105  0A19                     	;# 
  2106  0A19                     	;# 
  2107  0A1A                     	;# 
  2108  0A1A                     	;# 
  2109  0A1B                     	;# 
  2110  0A1B                     	;# 
  2111  0A1B                     	;# 
  2112  0A1C                     	;# 
  2113  0A1C                     	;# 
  2114  0A1D                     	;# 
  2115  0A1D                     	;# 
  2116  0A1E                     	;# 
  2117  0A1E                     	;# 
  2118  0A1F                     	;# 
  2119  0A1F                     	;# 
  2120  0A1F                     	;# 
  2121  1E0F                     	;# 
  2122  1E10                     	;# 
  2123  1E11                     	;# 
  2124  1E12                     	;# 
  2125  1E13                     	;# 
  2126  1E14                     	;# 
  2127  1E15                     	;# 
  2128  1E16                     	;# 
  2129  1E17                     	;# 
  2130  1E18                     	;# 
  2131  1E19                     	;# 
  2132  1E1A                     	;# 
  2133  1E1B                     	;# 
  2134  1E1C                     	;# 
  2135  1E1D                     	;# 
  2136  1E1E                     	;# 
  2137  1E1F                     	;# 
  2138  1E20                     	;# 
  2139  1E21                     	;# 
  2140  1E22                     	;# 
  2141  1E23                     	;# 
  2142  1E24                     	;# 
  2143  1E25                     	;# 
  2144  1E26                     	;# 
  2145  1E27                     	;# 
  2146  1E28                     	;# 
  2147  1E29                     	;# 
  2148  1E2A                     	;# 
  2149  1E2B                     	;# 
  2150  1E2C                     	;# 
  2151  1E2D                     	;# 
  2152  1E2E                     	;# 
  2153  1E2F                     	;# 
  2154  1E30                     	;# 
  2155  1E31                     	;# 
  2156  1E32                     	;# 
  2157  1E33                     	;# 
  2158  1E34                     	;# 
  2159  1E35                     	;# 
  2160  1E36                     	;# 
  2161  1E37                     	;# 
  2162  1E8F                     	;# 
  2163  1E90                     	;# 
  2164  1E91                     	;# 
  2165  1E92                     	;# 
  2166  1E93                     	;# 
  2167  1E9C                     	;# 
  2168  1EA1                     	;# 
  2169  1EA2                     	;# 
  2170  1EB1                     	;# 
  2171  1EBB                     	;# 
  2172  1EBC                     	;# 
  2173  1EBD                     	;# 
  2174  1EBE                     	;# 
  2175  1EC3                     	;# 
  2176  1EC5                     	;# 
  2177  1EC6                     	;# 
  2178  1EC7                     	;# 
  2179  1EC8                     	;# 
  2180  1EC9                     	;# 
  2181  1ECA                     	;# 
  2182  1ECB                     	;# 
  2183  1ECC                     	;# 
  2184  1ECD                     	;# 
  2185  1ECE                     	;# 
  2186  1F10                     	;# 
  2187  1F11                     	;# 
  2188  1F12                     	;# 
  2189  1F13                     	;# 
  2190  1F14                     	;# 
  2191  1F15                     	;# 
  2192  1F16                     	;# 
  2193  1F17                     	;# 
  2194  1F18                     	;# 
  2195  1F19                     	;# 
  2196  1F1A                     	;# 
  2197  1F1B                     	;# 
  2198  1F1C                     	;# 
  2199  1F1D                     	;# 
  2200  1F1E                     	;# 
  2201  1F1F                     	;# 
  2202  1F20                     	;# 
  2203  1F21                     	;# 
  2204  1F22                     	;# 
  2205  1F23                     	;# 
  2206  1F24                     	;# 
  2207  1F25                     	;# 
  2208  1F26                     	;# 
  2209  1F27                     	;# 
  2210  1F38                     	;# 
  2211  1F39                     	;# 
  2212  1F3A                     	;# 
  2213  1F3B                     	;# 
  2214  1F3C                     	;# 
  2215  1F3D                     	;# 
  2216  1F3E                     	;# 
  2217  1F3F                     	;# 
  2218  1F43                     	;# 
  2219  1F44                     	;# 
  2220  1F45                     	;# 
  2221  1F46                     	;# 
  2222  1F47                     	;# 
  2223  1F48                     	;# 
  2224  1F49                     	;# 
  2225  1F4A                     	;# 
  2226  1F4E                     	;# 
  2227  1F4F                     	;# 
  2228  1F50                     	;# 
  2229  1F51                     	;# 
  2230  1F52                     	;# 
  2231  1F53                     	;# 
  2232  1F54                     	;# 
  2233  1F55                     	;# 
  2234  1F65                     	;# 
  2235  1F68                     	;# 
  2236  1F69                     	;# 
  2237  1F6A                     	;# 
  2238  1F6B                     	;# 
  2239  1FE4                     	;# 
  2240  1FE5                     	;# 
  2241  1FE6                     	;# 
  2242  1FE7                     	;# 
  2243  1FE8                     	;# 
  2244  1FE8                     	;# 
  2245  1FE9                     	;# 
  2246  1FEA                     	;# 
  2247  1FEB                     	;# 
  2248  1FED                     	;# 
  2249  1FEE                     	;# 
  2250  1FEF                     	;# 
  2251  0000                     	;# 
  2252  0001                     	;# 
  2253  0002                     	;# 
  2254  0003                     	;# 
  2255  0004                     	;# 
  2256  0005                     	;# 
  2257  0006                     	;# 
  2258  0007                     	;# 
  2259  0008                     	;# 
  2260  0009                     	;# 
  2261  000A                     	;# 
  2262  000B                     	;# 
  2263  000C                     	;# 
  2264  000D                     	;# 
  2265  000E                     	;# 
  2266  0010                     	;# 
  2267  0012                     	;# 
  2268  0013                     	;# 
  2269  0014                     	;# 
  2270  0016                     	;# 
  2271  0018                     	;# 
  2272  0019                     	;# 
  2273  001A                     	;# 
  2274  009B                     	;# 
  2275  009B                     	;# 
  2276  009C                     	;# 
  2277  009D                     	;# 
  2278  009E                     	;# 
  2279  009F                     	;# 
  2280  0119                     	;# 
  2281  0119                     	;# 
  2282  0119                     	;# 
  2283  011A                     	;# 
  2284  011A                     	;# 
  2285  011A                     	;# 
  2286  011B                     	;# 
  2287  011B                     	;# 
  2288  011B                     	;# 
  2289  011B                     	;# 
  2290  011B                     	;# 
  2291  011C                     	;# 
  2292  011C                     	;# 
  2293  011C                     	;# 
  2294  011D                     	;# 
  2295  011D                     	;# 
  2296  011D                     	;# 
  2297  011E                     	;# 
  2298  011E                     	;# 
  2299  011E                     	;# 
  2300  011F                     	;# 
  2301  011F                     	;# 
  2302  011F                     	;# 
  2303  011F                     	;# 
  2304  011F                     	;# 
  2305  018C                     	;# 
  2306  018D                     	;# 
  2307  018E                     	;# 
  2308  018F                     	;# 
  2309  0190                     	;# 
  2310  0191                     	;# 
  2311  0192                     	;# 
  2312  0196                     	;# 
  2313  0197                     	;# 
  2314  0198                     	;# 
  2315  0199                     	;# 
  2316  019A                     	;# 
  2317  019B                     	;# 
  2318  019C                     	;# 
  2319  020C                     	;# 
  2320  020C                     	;# 
  2321  020D                     	;# 
  2322  020E                     	;# 
  2323  020F                     	;# 
  2324  020F                     	;# 
  2325  0210                     	;# 
  2326  0210                     	;# 
  2327  0211                     	;# 
  2328  0211                     	;# 
  2329  028C                     	;# 
  2330  028C                     	;# 
  2331  028D                     	;# 
  2332  028D                     	;# 
  2333  028E                     	;# 
  2334  028F                     	;# 
  2335  0290                     	;# 
  2336  0291                     	;# 
  2337  030C                     	;# 
  2338  030C                     	;# 
  2339  030D                     	;# 
  2340  030E                     	;# 
  2341  030F                     	;# 
  2342  0310                     	;# 
  2343  0310                     	;# 
  2344  0311                     	;# 
  2345  0312                     	;# 
  2346  0313                     	;# 
  2347  0314                     	;# 
  2348  0314                     	;# 
  2349  0315                     	;# 
  2350  0316                     	;# 
  2351  0318                     	;# 
  2352  0318                     	;# 
  2353  0319                     	;# 
  2354  031A                     	;# 
  2355  031C                     	;# 
  2356  031C                     	;# 
  2357  031D                     	;# 
  2358  031E                     	;# 
  2359  038C                     	;# 
  2360  038C                     	;# 
  2361  038D                     	;# 
  2362  038E                     	;# 
  2363  058C                     	;# 
  2364  058C                     	;# 
  2365  058D                     	;# 
  2366  058E                     	;# 
  2367  058F                     	;# 
  2368  058F                     	;# 
  2369  0590                     	;# 
  2370  0591                     	;# 
  2371  0592                     	;# 
  2372  0593                     	;# 
  2373  059C                     	;# 
  2374  059C                     	;# 
  2375  059D                     	;# 
  2376  059D                     	;# 
  2377  059E                     	;# 
  2378  059F                     	;# 
  2379  060C                     	;# 
  2380  060D                     	;# 
  2381  060E                     	;# 
  2382  060F                     	;# 
  2383  0610                     	;# 
  2384  0611                     	;# 
  2385  0612                     	;# 
  2386  0613                     	;# 
  2387  0614                     	;# 
  2388  070C                     	;# 
  2389  070D                     	;# 
  2390  070E                     	;# 
  2391  070F                     	;# 
  2392  0710                     	;# 
  2393  0711                     	;# 
  2394  0712                     	;# 
  2395  0713                     	;# 
  2396  0716                     	;# 
  2397  0717                     	;# 
  2398  0718                     	;# 
  2399  0719                     	;# 
  2400  071A                     	;# 
  2401  071B                     	;# 
  2402  071C                     	;# 
  2403  071D                     	;# 
  2404  0796                     	;# 
  2405  0797                     	;# 
  2406  0798                     	;# 
  2407  0799                     	;# 
  2408  079A                     	;# 
  2409  079B                     	;# 
  2410  080C                     	;# 
  2411  080D                     	;# 
  2412  080E                     	;# 
  2413  080F                     	;# 
  2414  0810                     	;# 
  2415  0811                     	;# 
  2416  0812                     	;# 
  2417  0813                     	;# 
  2418  0814                     	;# 
  2419  081A                     	;# 
  2420  081A                     	;# 
  2421  081B                     	;# 
  2422  081C                     	;# 
  2423  081C                     	;# 
  2424  081D                     	;# 
  2425  081E                     	;# 
  2426  081F                     	;# 
  2427  088C                     	;# 
  2428  088D                     	;# 
  2429  088E                     	;# 
  2430  088F                     	;# 
  2431  0890                     	;# 
  2432  0891                     	;# 
  2433  0892                     	;# 
  2434  0893                     	;# 
  2435  0895                     	;# 
  2436  0896                     	;# 
  2437  090C                     	;# 
  2438  090E                     	;# 
  2439  090F                     	;# 
  2440  091F                     	;# 
  2441  098F                     	;# 
  2442  098F                     	;# 
  2443  0990                     	;# 
  2444  0991                     	;# 
  2445  0992                     	;# 
  2446  0993                     	;# 
  2447  0994                     	;# 
  2448  0995                     	;# 
  2449  0996                     	;# 
  2450  0997                     	;# 
  2451  0A19                     	;# 
  2452  0A19                     	;# 
  2453  0A1A                     	;# 
  2454  0A1A                     	;# 
  2455  0A1B                     	;# 
  2456  0A1B                     	;# 
  2457  0A1B                     	;# 
  2458  0A1C                     	;# 
  2459  0A1C                     	;# 
  2460  0A1D                     	;# 
  2461  0A1D                     	;# 
  2462  0A1E                     	;# 
  2463  0A1E                     	;# 
  2464  0A1F                     	;# 
  2465  0A1F                     	;# 
  2466  0A1F                     	;# 
  2467  1E0F                     	;# 
  2468  1E10                     	;# 
  2469  1E11                     	;# 
  2470  1E12                     	;# 
  2471  1E13                     	;# 
  2472  1E14                     	;# 
  2473  1E15                     	;# 
  2474  1E16                     	;# 
  2475  1E17                     	;# 
  2476  1E18                     	;# 
  2477  1E19                     	;# 
  2478  1E1A                     	;# 
  2479  1E1B                     	;# 
  2480  1E1C                     	;# 
  2481  1E1D                     	;# 
  2482  1E1E                     	;# 
  2483  1E1F                     	;# 
  2484  1E20                     	;# 
  2485  1E21                     	;# 
  2486  1E22                     	;# 
  2487  1E23                     	;# 
  2488  1E24                     	;# 
  2489  1E25                     	;# 
  2490  1E26                     	;# 
  2491  1E27                     	;# 
  2492  1E28                     	;# 
  2493  1E29                     	;# 
  2494  1E2A                     	;# 
  2495  1E2B                     	;# 
  2496  1E2C                     	;# 
  2497  1E2D                     	;# 
  2498  1E2E                     	;# 
  2499  1E2F                     	;# 
  2500  1E30                     	;# 
  2501  1E31                     	;# 
  2502  1E32                     	;# 
  2503  1E33                     	;# 
  2504  1E34                     	;# 
  2505  1E35                     	;# 
  2506  1E36                     	;# 
  2507  1E37                     	;# 
  2508  1E8F                     	;# 
  2509  1E90                     	;# 
  2510  1E91                     	;# 
  2511  1E92                     	;# 
  2512  1E93                     	;# 
  2513  1E9C                     	;# 
  2514  1EA1                     	;# 
  2515  1EA2                     	;# 
  2516  1EB1                     	;# 
  2517  1EBB                     	;# 
  2518  1EBC                     	;# 
  2519  1EBD                     	;# 
  2520  1EBE                     	;# 
  2521  1EC3                     	;# 
  2522  1EC5                     	;# 
  2523  1EC6                     	;# 
  2524  1EC7                     	;# 
  2525  1EC8                     	;# 
  2526  1EC9                     	;# 
  2527  1ECA                     	;# 
  2528  1ECB                     	;# 
  2529  1ECC                     	;# 
  2530  1ECD                     	;# 
  2531  1ECE                     	;# 
  2532  1F10                     	;# 
  2533  1F11                     	;# 
  2534  1F12                     	;# 
  2535  1F13                     	;# 
  2536  1F14                     	;# 
  2537  1F15                     	;# 
  2538  1F16                     	;# 
  2539  1F17                     	;# 
  2540  1F18                     	;# 
  2541  1F19                     	;# 
  2542  1F1A                     	;# 
  2543  1F1B                     	;# 
  2544  1F1C                     	;# 
  2545  1F1D                     	;# 
  2546  1F1E                     	;# 
  2547  1F1F                     	;# 
  2548  1F20                     	;# 
  2549  1F21                     	;# 
  2550  1F22                     	;# 
  2551  1F23                     	;# 
  2552  1F24                     	;# 
  2553  1F25                     	;# 
  2554  1F26                     	;# 
  2555  1F27                     	;# 
  2556  1F38                     	;# 
  2557  1F39                     	;# 
  2558  1F3A                     	;# 
  2559  1F3B                     	;# 
  2560  1F3C                     	;# 
  2561  1F3D                     	;# 
  2562  1F3E                     	;# 
  2563  1F3F                     	;# 
  2564  1F43                     	;# 
  2565  1F44                     	;# 
  2566  1F45                     	;# 
  2567  1F46                     	;# 
  2568  1F47                     	;# 
  2569  1F48                     	;# 
  2570  1F49                     	;# 
  2571  1F4A                     	;# 
  2572  1F4E                     	;# 
  2573  1F4F                     	;# 
  2574  1F50                     	;# 
  2575  1F51                     	;# 
  2576  1F52                     	;# 
  2577  1F53                     	;# 
  2578  1F54                     	;# 
  2579  1F55                     	;# 
  2580  1F65                     	;# 
  2581  1F68                     	;# 
  2582  1F69                     	;# 
  2583  1F6A                     	;# 
  2584  1F6B                     	;# 
  2585  1FE4                     	;# 
  2586  1FE5                     	;# 
  2587  1FE6                     	;# 
  2588  1FE7                     	;# 
  2589  1FE8                     	;# 
  2590  1FE8                     	;# 
  2591  1FE9                     	;# 
  2592  1FEA                     	;# 
  2593  1FEB                     	;# 
  2594  1FED                     	;# 
  2595  1FEE                     	;# 
  2596  1FEF                     	;# 
  2597  0000                     	;# 
  2598  0001                     	;# 
  2599  0002                     	;# 
  2600  0003                     	;# 
  2601  0004                     	;# 
  2602  0005                     	;# 
  2603  0006                     	;# 
  2604  0007                     	;# 
  2605  0008                     	;# 
  2606  0009                     	;# 
  2607  000A                     	;# 
  2608  000B                     	;# 
  2609  000C                     	;# 
  2610  000D                     	;# 
  2611  000E                     	;# 
  2612  0010                     	;# 
  2613  0012                     	;# 
  2614  0013                     	;# 
  2615  0014                     	;# 
  2616  0016                     	;# 
  2617  0018                     	;# 
  2618  0019                     	;# 
  2619  001A                     	;# 
  2620  009B                     	;# 
  2621  009B                     	;# 
  2622  009C                     	;# 
  2623  009D                     	;# 
  2624  009E                     	;# 
  2625  009F                     	;# 
  2626  0119                     	;# 
  2627  0119                     	;# 
  2628  0119                     	;# 
  2629  011A                     	;# 
  2630  011A                     	;# 
  2631  011A                     	;# 
  2632  011B                     	;# 
  2633  011B                     	;# 
  2634  011B                     	;# 
  2635  011B                     	;# 
  2636  011B                     	;# 
  2637  011C                     	;# 
  2638  011C                     	;# 
  2639  011C                     	;# 
  2640  011D                     	;# 
  2641  011D                     	;# 
  2642  011D                     	;# 
  2643  011E                     	;# 
  2644  011E                     	;# 
  2645  011E                     	;# 
  2646  011F                     	;# 
  2647  011F                     	;# 
  2648  011F                     	;# 
  2649  011F                     	;# 
  2650  011F                     	;# 
  2651  018C                     	;# 
  2652  018D                     	;# 
  2653  018E                     	;# 
  2654  018F                     	;# 
  2655  0190                     	;# 
  2656  0191                     	;# 
  2657  0192                     	;# 
  2658  0196                     	;# 
  2659  0197                     	;# 
  2660  0198                     	;# 
  2661  0199                     	;# 
  2662  019A                     	;# 
  2663  019B                     	;# 
  2664  019C                     	;# 
  2665  020C                     	;# 
  2666  020C                     	;# 
  2667  020D                     	;# 
  2668  020E                     	;# 
  2669  020F                     	;# 
  2670  020F                     	;# 
  2671  0210                     	;# 
  2672  0210                     	;# 
  2673  0211                     	;# 
  2674  0211                     	;# 
  2675  028C                     	;# 
  2676  028C                     	;# 
  2677  028D                     	;# 
  2678  028D                     	;# 
  2679  028E                     	;# 
  2680  028F                     	;# 
  2681  0290                     	;# 
  2682  0291                     	;# 
  2683  030C                     	;# 
  2684  030C                     	;# 
  2685  030D                     	;# 
  2686  030E                     	;# 
  2687  030F                     	;# 
  2688  0310                     	;# 
  2689  0310                     	;# 
  2690  0311                     	;# 
  2691  0312                     	;# 
  2692  0313                     	;# 
  2693  0314                     	;# 
  2694  0314                     	;# 
  2695  0315                     	;# 
  2696  0316                     	;# 
  2697  0318                     	;# 
  2698  0318                     	;# 
  2699  0319                     	;# 
  2700  031A                     	;# 
  2701  031C                     	;# 
  2702  031C                     	;# 
  2703  031D                     	;# 
  2704  031E                     	;# 
  2705  038C                     	;# 
  2706  038C                     	;# 
  2707  038D                     	;# 
  2708  038E                     	;# 
  2709  058C                     	;# 
  2710  058C                     	;# 
  2711  058D                     	;# 
  2712  058E                     	;# 
  2713  058F                     	;# 
  2714  058F                     	;# 
  2715  0590                     	;# 
  2716  0591                     	;# 
  2717  0592                     	;# 
  2718  0593                     	;# 
  2719  059C                     	;# 
  2720  059C                     	;# 
  2721  059D                     	;# 
  2722  059D                     	;# 
  2723  059E                     	;# 
  2724  059F                     	;# 
  2725  060C                     	;# 
  2726  060D                     	;# 
  2727  060E                     	;# 
  2728  060F                     	;# 
  2729  0610                     	;# 
  2730  0611                     	;# 
  2731  0612                     	;# 
  2732  0613                     	;# 
  2733  0614                     	;# 
  2734  070C                     	;# 
  2735  070D                     	;# 
  2736  070E                     	;# 
  2737  070F                     	;# 
  2738  0710                     	;# 
  2739  0711                     	;# 
  2740  0712                     	;# 
  2741  0713                     	;# 
  2742  0716                     	;# 
  2743  0717                     	;# 
  2744  0718                     	;# 
  2745  0719                     	;# 
  2746  071A                     	;# 
  2747  071B                     	;# 
  2748  071C                     	;# 
  2749  071D                     	;# 
  2750  0796                     	;# 
  2751  0797                     	;# 
  2752  0798                     	;# 
  2753  0799                     	;# 
  2754  079A                     	;# 
  2755  079B                     	;# 
  2756  080C                     	;# 
  2757  080D                     	;# 
  2758  080E                     	;# 
  2759  080F                     	;# 
  2760  0810                     	;# 
  2761  0811                     	;# 
  2762  0812                     	;# 
  2763  0813                     	;# 
  2764  0814                     	;# 
  2765  081A                     	;# 
  2766  081A                     	;# 
  2767  081B                     	;# 
  2768  081C                     	;# 
  2769  081C                     	;# 
  2770  081D                     	;# 
  2771  081E                     	;# 
  2772  081F                     	;# 
  2773  088C                     	;# 
  2774  088D                     	;# 
  2775  088E                     	;# 
  2776  088F                     	;# 
  2777  0890                     	;# 
  2778  0891                     	;# 
  2779  0892                     	;# 
  2780  0893                     	;# 
  2781  0895                     	;# 
  2782  0896                     	;# 
  2783  090C                     	;# 
  2784  090E                     	;# 
  2785  090F                     	;# 
  2786  091F                     	;# 
  2787  098F                     	;# 
  2788  098F                     	;# 
  2789  0990                     	;# 
  2790  0991                     	;# 
  2791  0992                     	;# 
  2792  0993                     	;# 
  2793  0994                     	;# 
  2794  0995                     	;# 
  2795  0996                     	;# 
  2796  0997                     	;# 
  2797  0A19                     	;# 
  2798  0A19                     	;# 
  2799  0A1A                     	;# 
  2800  0A1A                     	;# 
  2801  0A1B                     	;# 
  2802  0A1B                     	;# 
  2803  0A1B                     	;# 
  2804  0A1C                     	;# 
  2805  0A1C                     	;# 
  2806  0A1D                     	;# 
  2807  0A1D                     	;# 
  2808  0A1E                     	;# 
  2809  0A1E                     	;# 
  2810  0A1F                     	;# 
  2811  0A1F                     	;# 
  2812  0A1F                     	;# 
  2813  1E0F                     	;# 
  2814  1E10                     	;# 
  2815  1E11                     	;# 
  2816  1E12                     	;# 
  2817  1E13                     	;# 
  2818  1E14                     	;# 
  2819  1E15                     	;# 
  2820  1E16                     	;# 
  2821  1E17                     	;# 
  2822  1E18                     	;# 
  2823  1E19                     	;# 
  2824  1E1A                     	;# 
  2825  1E1B                     	;# 
  2826  1E1C                     	;# 
  2827  1E1D                     	;# 
  2828  1E1E                     	;# 
  2829  1E1F                     	;# 
  2830  1E20                     	;# 
  2831  1E21                     	;# 
  2832  1E22                     	;# 
  2833  1E23                     	;# 
  2834  1E24                     	;# 
  2835  1E25                     	;# 
  2836  1E26                     	;# 
  2837  1E27                     	;# 
  2838  1E28                     	;# 
  2839  1E29                     	;# 
  2840  1E2A                     	;# 
  2841  1E2B                     	;# 
  2842  1E2C                     	;# 
  2843  1E2D                     	;# 
  2844  1E2E                     	;# 
  2845  1E2F                     	;# 
  2846  1E30                     	;# 
  2847  1E31                     	;# 
  2848  1E32                     	;# 
  2849  1E33                     	;# 
  2850  1E34                     	;# 
  2851  1E35                     	;# 
  2852  1E36                     	;# 
  2853  1E37                     	;# 
  2854  1E8F                     	;# 
  2855  1E90                     	;# 
  2856  1E91                     	;# 
  2857  1E92                     	;# 
  2858  1E93                     	;# 
  2859  1E9C                     	;# 
  2860  1EA1                     	;# 
  2861  1EA2                     	;# 
  2862  1EB1                     	;# 
  2863  1EBB                     	;# 
  2864  1EBC                     	;# 
  2865  1EBD                     	;# 
  2866  1EBE                     	;# 
  2867  1EC3                     	;# 
  2868  1EC5                     	;# 
  2869  1EC6                     	;# 
  2870  1EC7                     	;# 
  2871  1EC8                     	;# 
  2872  1EC9                     	;# 
  2873  1ECA                     	;# 
  2874  1ECB                     	;# 
  2875  1ECC                     	;# 
  2876  1ECD                     	;# 
  2877  1ECE                     	;# 
  2878  1F10                     	;# 
  2879  1F11                     	;# 
  2880  1F12                     	;# 
  2881  1F13                     	;# 
  2882  1F14                     	;# 
  2883  1F15                     	;# 
  2884  1F16                     	;# 
  2885  1F17                     	;# 
  2886  1F18                     	;# 
  2887  1F19                     	;# 
  2888  1F1A                     	;# 
  2889  1F1B                     	;# 
  2890  1F1C                     	;# 
  2891  1F1D                     	;# 
  2892  1F1E                     	;# 
  2893  1F1F                     	;# 
  2894  1F20                     	;# 
  2895  1F21                     	;# 
  2896  1F22                     	;# 
  2897  1F23                     	;# 
  2898  1F24                     	;# 
  2899  1F25                     	;# 
  2900  1F26                     	;# 
  2901  1F27                     	;# 
  2902  1F38                     	;# 
  2903  1F39                     	;# 
  2904  1F3A                     	;# 
  2905  1F3B                     	;# 
  2906  1F3C                     	;# 
  2907  1F3D                     	;# 
  2908  1F3E                     	;# 
  2909  1F3F                     	;# 
  2910  1F43                     	;# 
  2911  1F44                     	;# 
  2912  1F45                     	;# 
  2913  1F46                     	;# 
  2914  1F47                     	;# 
  2915  1F48                     	;# 
  2916  1F49                     	;# 
  2917  1F4A                     	;# 
  2918  1F4E                     	;# 
  2919  1F4F                     	;# 
  2920  1F50                     	;# 
  2921  1F51                     	;# 
  2922  1F52                     	;# 
  2923  1F53                     	;# 
  2924  1F54                     	;# 
  2925  1F55                     	;# 
  2926  1F65                     	;# 
  2927  1F68                     	;# 
  2928  1F69                     	;# 
  2929  1F6A                     	;# 
  2930  1F6B                     	;# 
  2931  1FE4                     	;# 
  2932  1FE5                     	;# 
  2933  1FE6                     	;# 
  2934  1FE7                     	;# 
  2935  1FE8                     	;# 
  2936  1FE8                     	;# 
  2937  1FE9                     	;# 
  2938  1FEA                     	;# 
  2939  1FEB                     	;# 
  2940  1FED                     	;# 
  2941  1FEE                     	;# 
  2942  1FEF                     	;# 
  2943  0000                     	;# 
  2944  0001                     	;# 
  2945  0002                     	;# 
  2946  0003                     	;# 
  2947  0004                     	;# 
  2948  0005                     	;# 
  2949  0006                     	;# 
  2950  0007                     	;# 
  2951  0008                     	;# 
  2952  0009                     	;# 
  2953  000A                     	;# 
  2954  000B                     	;# 
  2955  000C                     	;# 
  2956  000D                     	;# 
  2957  000E                     	;# 
  2958  0010                     	;# 
  2959  0012                     	;# 
  2960  0013                     	;# 
  2961  0014                     	;# 
  2962  0016                     	;# 
  2963  0018                     	;# 
  2964  0019                     	;# 
  2965  001A                     	;# 
  2966  009B                     	;# 
  2967  009B                     	;# 
  2968  009C                     	;# 
  2969  009D                     	;# 
  2970  009E                     	;# 
  2971  009F                     	;# 
  2972  0119                     	;# 
  2973  0119                     	;# 
  2974  0119                     	;# 
  2975  011A                     	;# 
  2976  011A                     	;# 
  2977  011A                     	;# 
  2978  011B                     	;# 
  2979  011B                     	;# 
  2980  011B                     	;# 
  2981  011B                     	;# 
  2982  011B                     	;# 
  2983  011C                     	;# 
  2984  011C                     	;# 
  2985  011C                     	;# 
  2986  011D                     	;# 
  2987  011D                     	;# 
  2988  011D                     	;# 
  2989  011E                     	;# 
  2990  011E                     	;# 
  2991  011E                     	;# 
  2992  011F                     	;# 
  2993  011F                     	;# 
  2994  011F                     	;# 
  2995  011F                     	;# 
  2996  011F                     	;# 
  2997  018C                     	;# 
  2998  018D                     	;# 
  2999  018E                     	;# 
  3000  018F                     	;# 
  3001  0190                     	;# 
  3002  0191                     	;# 
  3003  0192                     	;# 
  3004  0196                     	;# 
  3005  0197                     	;# 
  3006  0198                     	;# 
  3007  0199                     	;# 
  3008  019A                     	;# 
  3009  019B                     	;# 
  3010  019C                     	;# 
  3011  020C                     	;# 
  3012  020C                     	;# 
  3013  020D                     	;# 
  3014  020E                     	;# 
  3015  020F                     	;# 
  3016  020F                     	;# 
  3017  0210                     	;# 
  3018  0210                     	;# 
  3019  0211                     	;# 
  3020  0211                     	;# 
  3021  028C                     	;# 
  3022  028C                     	;# 
  3023  028D                     	;# 
  3024  028D                     	;# 
  3025  028E                     	;# 
  3026  028F                     	;# 
  3027  0290                     	;# 
  3028  0291                     	;# 
  3029  030C                     	;# 
  3030  030C                     	;# 
  3031  030D                     	;# 
  3032  030E                     	;# 
  3033  030F                     	;# 
  3034  0310                     	;# 
  3035  0310                     	;# 
  3036  0311                     	;# 
  3037  0312                     	;# 
  3038  0313                     	;# 
  3039  0314                     	;# 
  3040  0314                     	;# 
  3041  0315                     	;# 
  3042  0316                     	;# 
  3043  0318                     	;# 
  3044  0318                     	;# 
  3045  0319                     	;# 
  3046  031A                     	;# 
  3047  031C                     	;# 
  3048  031C                     	;# 
  3049  031D                     	;# 
  3050  031E                     	;# 
  3051  038C                     	;# 
  3052  038C                     	;# 
  3053  038D                     	;# 
  3054  038E                     	;# 
  3055  058C                     	;# 
  3056  058C                     	;# 
  3057  058D                     	;# 
  3058  058E                     	;# 
  3059  058F                     	;# 
  3060  058F                     	;# 
  3061  0590                     	;# 
  3062  0591                     	;# 
  3063  0592                     	;# 
  3064  0593                     	;# 
  3065  059C                     	;# 
  3066  059C                     	;# 
  3067  059D                     	;# 
  3068  059D                     	;# 
  3069  059E                     	;# 
  3070  059F                     	;# 
  3071  060C                     	;# 
  3072  060D                     	;# 
  3073  060E                     	;# 
  3074  060F                     	;# 
  3075  0610                     	;# 
  3076  0611                     	;# 
  3077  0612                     	;# 
  3078  0613                     	;# 
  3079  0614                     	;# 
  3080  070C                     	;# 
  3081  070D                     	;# 
  3082  070E                     	;# 
  3083  070F                     	;# 
  3084  0710                     	;# 
  3085  0711                     	;# 
  3086  0712                     	;# 
  3087  0713                     	;# 
  3088  0716                     	;# 
  3089  0717                     	;# 
  3090  0718                     	;# 
  3091  0719                     	;# 
  3092  071A                     	;# 
  3093  071B                     	;# 
  3094  071C                     	;# 
  3095  071D                     	;# 
  3096  0796                     	;# 
  3097  0797                     	;# 
  3098  0798                     	;# 
  3099  0799                     	;# 
  3100  079A                     	;# 
  3101  079B                     	;# 
  3102  080C                     	;# 
  3103  080D                     	;# 
  3104  080E                     	;# 
  3105  080F                     	;# 
  3106  0810                     	;# 
  3107  0811                     	;# 
  3108  0812                     	;# 
  3109  0813                     	;# 
  3110  0814                     	;# 
  3111  081A                     	;# 
  3112  081A                     	;# 
  3113  081B                     	;# 
  3114  081C                     	;# 
  3115  081C                     	;# 
  3116  081D                     	;# 
  3117  081E                     	;# 
  3118  081F                     	;# 
  3119  088C                     	;# 
  3120  088D                     	;# 
  3121  088E                     	;# 
  3122  088F                     	;# 
  3123  0890                     	;# 
  3124  0891                     	;# 
  3125  0892                     	;# 
  3126  0893                     	;# 
  3127  0895                     	;# 
  3128  0896                     	;# 
  3129  090C                     	;# 
  3130  090E                     	;# 
  3131  090F                     	;# 
  3132  091F                     	;# 
  3133  098F                     	;# 
  3134  098F                     	;# 
  3135  0990                     	;# 
  3136  0991                     	;# 
  3137  0992                     	;# 
  3138  0993                     	;# 
  3139  0994                     	;# 
  3140  0995                     	;# 
  3141  0996                     	;# 
  3142  0997                     	;# 
  3143  0A19                     	;# 
  3144  0A19                     	;# 
  3145  0A1A                     	;# 
  3146  0A1A                     	;# 
  3147  0A1B                     	;# 
  3148  0A1B                     	;# 
  3149  0A1B                     	;# 
  3150  0A1C                     	;# 
  3151  0A1C                     	;# 
  3152  0A1D                     	;# 
  3153  0A1D                     	;# 
  3154  0A1E                     	;# 
  3155  0A1E                     	;# 
  3156  0A1F                     	;# 
  3157  0A1F                     	;# 
  3158  0A1F                     	;# 
  3159  1E0F                     	;# 
  3160  1E10                     	;# 
  3161  1E11                     	;# 
  3162  1E12                     	;# 
  3163  1E13                     	;# 
  3164  1E14                     	;# 
  3165  1E15                     	;# 
  3166  1E16                     	;# 
  3167  1E17                     	;# 
  3168  1E18                     	;# 
  3169  1E19                     	;# 
  3170  1E1A                     	;# 
  3171  1E1B                     	;# 
  3172  1E1C                     	;# 
  3173  1E1D                     	;# 
  3174  1E1E                     	;# 
  3175  1E1F                     	;# 
  3176  1E20                     	;# 
  3177  1E21                     	;# 
  3178  1E22                     	;# 
  3179  1E23                     	;# 
  3180  1E24                     	;# 
  3181  1E25                     	;# 
  3182  1E26                     	;# 
  3183  1E27                     	;# 
  3184  1E28                     	;# 
  3185  1E29                     	;# 
  3186  1E2A                     	;# 
  3187  1E2B                     	;# 
  3188  1E2C                     	;# 
  3189  1E2D                     	;# 
  3190  1E2E                     	;# 
  3191  1E2F                     	;# 
  3192  1E30                     	;# 
  3193  1E31                     	;# 
  3194  1E32                     	;# 
  3195  1E33                     	;# 
  3196  1E34                     	;# 
  3197  1E35                     	;# 
  3198  1E36                     	;# 
  3199  1E37                     	;# 
  3200  1E8F                     	;# 
  3201  1E90                     	;# 
  3202  1E91                     	;# 
  3203  1E92                     	;# 
  3204  1E93                     	;# 
  3205  1E9C                     	;# 
  3206  1EA1                     	;# 
  3207  1EA2                     	;# 
  3208  1EB1                     	;# 
  3209  1EBB                     	;# 
  3210  1EBC                     	;# 
  3211  1EBD                     	;# 
  3212  1EBE                     	;# 
  3213  1EC3                     	;# 
  3214  1EC5                     	;# 
  3215  1EC6                     	;# 
  3216  1EC7                     	;# 
  3217  1EC8                     	;# 
  3218  1EC9                     	;# 
  3219  1ECA                     	;# 
  3220  1ECB                     	;# 
  3221  1ECC                     	;# 
  3222  1ECD                     	;# 
  3223  1ECE                     	;# 
  3224  1F10                     	;# 
  3225  1F11                     	;# 
  3226  1F12                     	;# 
  3227  1F13                     	;# 
  3228  1F14                     	;# 
  3229  1F15                     	;# 
  3230  1F16                     	;# 
  3231  1F17                     	;# 
  3232  1F18                     	;# 
  3233  1F19                     	;# 
  3234  1F1A                     	;# 
  3235  1F1B                     	;# 
  3236  1F1C                     	;# 
  3237  1F1D                     	;# 
  3238  1F1E                     	;# 
  3239  1F1F                     	;# 
  3240  1F20                     	;# 
  3241  1F21                     	;# 
  3242  1F22                     	;# 
  3243  1F23                     	;# 
  3244  1F24                     	;# 
  3245  1F25                     	;# 
  3246  1F26                     	;# 
  3247  1F27                     	;# 
  3248  1F38                     	;# 
  3249  1F39                     	;# 
  3250  1F3A                     	;# 
  3251  1F3B                     	;# 
  3252  1F3C                     	;# 
  3253  1F3D                     	;# 
  3254  1F3E                     	;# 
  3255  1F3F                     	;# 
  3256  1F43                     	;# 
  3257  1F44                     	;# 
  3258  1F45                     	;# 
  3259  1F46                     	;# 
  3260  1F47                     	;# 
  3261  1F48                     	;# 
  3262  1F49                     	;# 
  3263  1F4A                     	;# 
  3264  1F4E                     	;# 
  3265  1F4F                     	;# 
  3266  1F50                     	;# 
  3267  1F51                     	;# 
  3268  1F52                     	;# 
  3269  1F53                     	;# 
  3270  1F54                     	;# 
  3271  1F55                     	;# 
  3272  1F65                     	;# 
  3273  1F68                     	;# 
  3274  1F69                     	;# 
  3275  1F6A                     	;# 
  3276  1F6B                     	;# 
  3277  1FE4                     	;# 
  3278  1FE5                     	;# 
  3279  1FE6                     	;# 
  3280  1FE7                     	;# 
  3281  1FE8                     	;# 
  3282  1FE8                     	;# 
  3283  1FE9                     	;# 
  3284  1FEA                     	;# 
  3285  1FEB                     	;# 
  3286  1FED                     	;# 
  3287  1FEE                     	;# 
  3288  1FEF                     	;_data
  3289                           
  3290                           	psect	idataBANK1
  3291  0002                     __pidataBANK1:	
  3292                           
  3293                           ;initializer for statusView@prevSensorStat
  3294  0002  3401               	retlw	1
  3295                           
  3296                           ;initializer for _g_updateScreen
  3297  0003  3401               	retlw	1
  3298                           
  3299                           	psect	idataBANK2
  3300  2191                     __pidataBANK2:	
  3301                           
  3302                           ;initializer for OLED_print_xy@F7940
  3303  2191  3400               	retlw	0
  3304  2192  3440               	retlw	64
  3305  2193  3414               	retlw	20
  3306  2194  3454               	retlw	84
  3307                           
  3308                           ;initializer for OLED_setCursor@F7932
  3309  2195  3400               	retlw	0
  3310  2196  3440               	retlw	64
  3311  2197  3414               	retlw	20
  3312  2198  3454               	retlw	84
  3313                           
  3314                           	psect	idataBANK3
  3315  1801                     __pidataBANK3:	
  3316                           
  3317                           ;initializer for OLED_loadSpecialChars@F7945
  3318  1801  3418               	retlw	24
  3319  1802  3418               	retlw	24
  3320  1803  3403               	retlw	3
  3321  1804  3404               	retlw	4
  3322  1805  3404               	retlw	4
  3323  1806  3404               	retlw	4
  3324  1807  3403               	retlw	3
  3325  1808  3400               	retlw	0
  3326  1809  3400               	retlw	0
  3327  180A  3400               	retlw	0
  3328  180B  3400               	retlw	0
  3329  180C  3404               	retlw	4
  3330  180D  3400               	retlw	0
  3331  180E  3400               	retlw	0
  3332  180F  3400               	retlw	0
  3333  1810  3400               	retlw	0
  3334  1811  3401               	retlw	1
  3335  1812  3401               	retlw	1
  3336  1813  3405               	retlw	5
  3337  1814  3409               	retlw	9
  3338  1815  341F               	retlw	31
  3339  1816  3408               	retlw	8
  3340  1817  3404               	retlw	4
  3341  1818  3400               	retlw	0
  3342  1819  3400               	retlw	0
  3343  181A  3410               	retlw	16
  3344  181B  3418               	retlw	24
  3345  181C  341C               	retlw	28
  3346  181D  3418               	retlw	24
  3347  181E  3410               	retlw	16
  3348  181F  3400               	retlw	0
  3349  1820  3400               	retlw	0
  3350                           
  3351                           ;initializer for _p_fct
  3352  1821  34D1               	retlw	low _statusView
  3353  1822  3408               	retlw	high _statusView
  3354  1823  34FD               	retlw	low _channelView
  3355  1824  340D               	retlw	high _channelView
  3356  1825  34D4               	retlw	low _channelSetup
  3357  1826  341E               	retlw	high _channelSetup
  3358  1827  34B3               	retlw	low _setOutputPower
  3359  1828  341D               	retlw	high _setOutputPower
  3360  1829  34F8               	retlw	low _setLensDia
  3361  182A  341A               	retlw	high _setLensDia
  3362  182B  342E               	retlw	low _setup
  3363  182C  3407               	retlw	high _setup
  3364  182D  34A1               	retlw	low _setDPOffset
  3365  182E  3418               	retlw	high _setDPOffset
  3366  182F  3433               	retlw	low _setSkyTemp
  3367  1830  3418               	retlw	high _setSkyTemp
  3368  1831  3410               	retlw	low _setFudgeFactor
  3369  1832  3419               	retlw	high _setFudgeFactor
  3370                           
  3371                           	psect	stringtext1
  3372  284C                     __pstringtext1:	
  3373  284C                     _nextStateTbl:	
  3374  284C  3400               	retlw	0
  3375  284D  34FF               	retlw	255
  3376  284E  3401               	retlw	1
  3377  284F  3405               	retlw	5
  3378  2850  3400               	retlw	0
  3379  2851  3401               	retlw	1
  3380  2852  34FF               	retlw	255
  3381  2853  3400               	retlw	0
  3382  2854  3402               	retlw	2
  3383  2855  3401               	retlw	1
  3384  2856  3402               	retlw	2
  3385  2857  3400               	retlw	0
  3386  2858  3403               	retlw	3
  3387  2859  3401               	retlw	1
  3388  285A  3401               	retlw	1
  3389  285B  3402               	retlw	2
  3390  285C  3401               	retlw	1
  3391  285D  3404               	retlw	4
  3392  285E  3401               	retlw	1
  3393  285F  3401               	retlw	1
  3394  2860  3403               	retlw	3
  3395  2861  3400               	retlw	0
  3396  2862  3402               	retlw	2
  3397  2863  3402               	retlw	2
  3398  2864  3402               	retlw	2
  3399  2865  3404               	retlw	4
  3400  2866  3400               	retlw	0
  3401  2867  3402               	retlw	2
  3402  2868  3402               	retlw	2
  3403  2869  3402               	retlw	2
  3404  286A  3405               	retlw	5
  3405  286B  3400               	retlw	0
  3406  286C  3406               	retlw	6
  3407  286D  3400               	retlw	0
  3408  286E  3400               	retlw	0
  3409  286F  3405               	retlw	5
  3410  2870  3401               	retlw	1
  3411  2871  3407               	retlw	7
  3412  2872  3400               	retlw	0
  3413  2873  3400               	retlw	0
  3414  2874  3405               	retlw	5
  3415  2875  3402               	retlw	2
  3416  2876  3408               	retlw	8
  3417  2877  3400               	retlw	0
  3418  2878  3400               	retlw	0
  3419  2879  3406               	retlw	6
  3420  287A  3400               	retlw	0
  3421  287B  3405               	retlw	5
  3422  287C  3405               	retlw	5
  3423  287D  3405               	retlw	5
  3424  287E  3407               	retlw	7
  3425  287F  3400               	retlw	0
  3426  2880  3405               	retlw	5
  3427  2881  3405               	retlw	5
  3428  2882  3405               	retlw	5
  3429  2883  3408               	retlw	8
  3430  2884  3400               	retlw	0
  3431  2885  3405               	retlw	5
  3432  2886  3405               	retlw	5
  3433  2887  3405               	retlw	5
  3434  2888                     __end_of_nextStateTbl:	
  3435                           
  3436                           	psect	stringtext2
  3437  28AD                     __pstringtext2:	
  3438  28AD                     _transition_table:	
  3439  28AD  3400               	retlw	0
  3440  28AE  3404               	retlw	4
  3441  28AF  3401               	retlw	1
  3442  28B0  3400               	retlw	0
  3443  28B1  3482               	retlw	130
  3444  28B2  3400               	retlw	0
  3445  28B3  3401               	retlw	1
  3446  28B4  3400               	retlw	0
  3447  28B5  3402               	retlw	2
  3448  28B6  3403               	retlw	3
  3449  28B7  3401               	retlw	1
  3450  28B8  3400               	retlw	0
  3451  28B9  3402               	retlw	2
  3452  28BA  3403               	retlw	3
  3453  28BB  3400               	retlw	0
  3454  28BC  3480               	retlw	128
  3455  28BD  3445               	retlw	69
  3456  28BE  3404               	retlw	4
  3457  28BF  3400               	retlw	0
  3458  28C0  3400               	retlw	0
  3459  28C1  3405               	retlw	5
  3460  28C2  3404               	retlw	4
  3461  28C3  3406               	retlw	6
  3462  28C4  3400               	retlw	0
  3463  28C5  3405               	retlw	5
  3464  28C6  3400               	retlw	0
  3465  28C7  3406               	retlw	6
  3466  28C8  3440               	retlw	64
  3467  28C9                     __end_of_transition_table:	
  3468                           
  3469                           	psect	stringtext3
  3470  2800                     __pstringtext3:	
  3471  2800                     _stateFuncTbl:	
  3472  2800  3400               	retlw	0
  3473  2801  34D1               	retlw	low _statusView
  3474  2802  3408               	retlw	high _statusView
  3475  2803  3401               	retlw	1
  3476  2804  34FD               	retlw	low _channelView
  3477  2805  340D               	retlw	high _channelView
  3478  2806  3402               	retlw	2
  3479  2807  34D4               	retlw	low _channelSetup
  3480  2808  341E               	retlw	high _channelSetup
  3481  2809  3403               	retlw	3
  3482  280A  34B3               	retlw	low _setOutputPower
  3483  280B  341D               	retlw	high _setOutputPower
  3484  280C  3404               	retlw	4
  3485  280D  34F8               	retlw	low _setLensDia
  3486  280E  341A               	retlw	high _setLensDia
  3487  280F  3405               	retlw	5
  3488  2810  342E               	retlw	low _setup
  3489  2811  3407               	retlw	high _setup
  3490  2812  3406               	retlw	6
  3491  2813  34A1               	retlw	low _setDPOffset
  3492  2814  3418               	retlw	high _setDPOffset
  3493  2815  3407               	retlw	7
  3494  2816  3433               	retlw	low _setSkyTemp
  3495  2817  3418               	retlw	high _setSkyTemp
  3496  2818  3408               	retlw	8
  3497  2819  3410               	retlw	low _setFudgeFactor
  3498  281A  3419               	retlw	high _setFudgeFactor
  3499  281B                     __end_of_stateFuncTbl:	
  3500  000C                     _PORTAbits	set	12
  3501  000B                     _INTCONbits	set	11
  3502  0014                     _TRISCbits	set	20
  3503  0014                     _TRISC	set	20
  3504  0013                     _TRISB	set	19
  3505  0012                     _TRISA	set	18
  3506  000E                     _PORTCbits	set	14
  3507  000B                     _INTCON	set	11
  3508  0018                     _LATAbits	set	24
  3509  001A                     _LATCbits	set	26
  3510  0019                     _LATBbits	set	25
  3511  009E                     _ADCON1	set	158
  3512  009B                     _ADRESL	set	155
  3513  009C                     _ADRESH	set	156
  3514  009D                     _ADCON0bits	set	157
  3515  0119                     _RC1REG	set	281
  3516  011D                     _RC1STAbits	set	285
  3517  011A                     _TX1REG	set	282
  3518  011E                     _TX1STA	set	286
  3519  011D                     _RC1STA	set	285
  3520  011B                     _SPBRGL	set	283
  3521  011F                     _BAUD1CON	set	287
  3522  020C                     _TMR1	set	524
  3523  0211                     _T1CLK	set	529
  3524  020E                     _T1CON	set	526
  3525  059C                     _TMR0	set	1436
  3526  059F                     _T0CON1	set	1439
  3527  059E                     _T0CON0	set	1438
  3528  070F                     _PIR3bits	set	1807
  3529  0719                     _PIE3bits	set	1817
  3530  0710                     _PIR4bits	set	1808
  3531  071A                     _PIE4bits	set	1818
  3532  070C                     _PIR0bits	set	1804
  3533  0716                     _PIE0bits	set	1814
  3534  071A                     _PIE4	set	1818
  3535  0719                     _PIE3	set	1817
  3536  0716                     _PIE0	set	1814
  3537  088F                     _OSCCON3bits	set	2191
  3538  088D                     _OSCCON1	set	2189
  3539  0893                     _OSCFRQ	set	2195
  3540  1ECB                     _RX1DTPPSbits	set	7883
  3541  1F3F                     _IOCAFbits	set	7999
  3542  1F54                     _IOCCN	set	8020
  3543  1F3E                     _IOCAN	set	7998
  3544  1F3D                     _IOCAP	set	7997
  3545  1F4E                     _ANSELC	set	8014
  3546  1F43                     _ANSELB	set	8003
  3547  1F38                     _ANSELA	set	7992
  3548  1F26                     _RC6PPS	set	7974
  3549  281B                     STR_3:	
  3550  281B  3454               	retlw	84	;'T'
  3551  281C  3465               	retlw	101	;'e'
  3552  281D  346D               	retlw	109	;'m'
  3553  281E  3470               	retlw	112	;'p'
  3554  281F  3465               	retlw	101	;'e'
  3555  2820  3472               	retlw	114	;'r'
  3556  2821  3461               	retlw	97	;'a'
  3557  2822  3474               	retlw	116	;'t'
  3558  2823  3475               	retlw	117	;'u'
  3559  2824  3472               	retlw	114	;'r'
  3560  2825  3465               	retlw	101	;'e'
  3561  2826  3420               	retlw	32	;' '
  3562  2827  3452               	retlw	82	;'R'
  3563  2828  3465               	retlw	101	;'e'
  3564  2829  346C               	retlw	108	;'l'
  3565  282A  342E               	retlw	46	;'.'
  3566  282B  3468               	retlw	104	;'h'
  3567  282C  3475               	retlw	117	;'u'
  3568  282D  346D               	retlw	109	;'m'
  3569  282E  3469               	retlw	105	;'i'
  3570  282F  3464               	retlw	100	;'d'
  3571  2830  3469               	retlw	105	;'i'
  3572  2831  3474               	retlw	116	;'t'
  3573  2832  3479               	retlw	121	;'y'
  3574  2833  3444               	retlw	68	;'D'
  3575  2834  3465               	retlw	101	;'e'
  3576  2835  3477               	retlw	119	;'w'
  3577  2836  3470               	retlw	112	;'p'
  3578  2837  346F               	retlw	111	;'o'
  3579  2838  3469               	retlw	105	;'i'
  3580  2839  346E               	retlw	110	;'n'
  3581  283A  3474               	retlw	116	;'t'
  3582  283B  3420               	retlw	32	;' '
  3583  283C  3420               	retlw	32	;' '
  3584  283D  3420               	retlw	32	;' '
  3585  283E  3420               	retlw	32	;' '
  3586  283F  3442               	retlw	66	;'B'
  3587  2840  3461               	retlw	97	;'a'
  3588  2841  3474               	retlw	116	;'t'
  3589  2842  342E               	retlw	46	;'.'
  3590  2843  3420               	retlw	32	;' '
  3591  2844  3420               	retlw	32	;' '
  3592  2845  3420               	retlw	32	;' '
  3593  2846  3450               	retlw	80	;'P'
  3594  2847  346F               	retlw	111	;'o'
  3595  2848  3477               	retlw	119	;'w'
  3596  2849  3465               	retlw	101	;'e'
  3597  284A  3472               	retlw	114	;'r'
  3598  284B  3400               	retlw	0
  3599                           
  3600                           	psect	stringtext4
  3601  2888                     __pstringtext4:	
  3602  2888                     STR_39:	
  3603  2888  3444               	retlw	68	;'D'
  3604  2889  3450               	retlw	80	;'P'
  3605  288A  3420               	retlw	32	;' '
  3606  288B  346F               	retlw	111	;'o'
  3607  288C  3466               	retlw	102	;'f'
  3608  288D  3466               	retlw	102	;'f'
  3609  288E  3473               	retlw	115	;'s'
  3610  288F  3465               	retlw	101	;'e'
  3611  2890  3474               	retlw	116	;'t'
  3612  2891  3420               	retlw	32	;' '
  3613  2892  3420               	retlw	32	;' '
  3614  2893  3420               	retlw	32	;' '
  3615  2894  3453               	retlw	83	;'S'
  3616  2895  346B               	retlw	107	;'k'
  3617  2896  3479               	retlw	121	;'y'
  3618  2897  3420               	retlw	32	;' '
  3619  2898  3474               	retlw	116	;'t'
  3620  2899  3465               	retlw	101	;'e'
  3621  289A  346D               	retlw	109	;'m'
  3622  289B  3470               	retlw	112	;'p'
  3623  289C  342E               	retlw	46	;'.'
  3624  289D  3420               	retlw	32	;' '
  3625  289E  3420               	retlw	32	;' '
  3626  289F  3420               	retlw	32	;' '
  3627  28A0  3446               	retlw	70	;'F'
  3628  28A1  3475               	retlw	117	;'u'
  3629  28A2  3464               	retlw	100	;'d'
  3630  28A3  3467               	retlw	103	;'g'
  3631  28A4  3465               	retlw	101	;'e'
  3632  28A5  3420               	retlw	32	;' '
  3633  28A6  3466               	retlw	102	;'f'
  3634  28A7  3461               	retlw	97	;'a'
  3635  28A8  3463               	retlw	99	;'c'
  3636  28A9  3474               	retlw	116	;'t'
  3637  28AA  346F               	retlw	111	;'o'
  3638  28AB  3472               	retlw	114	;'r'
  3639  28AC  3400               	retlw	0
  3640                           
  3641                           	psect	stringtext5
  3642  28C9                     __pstringtext5:	
  3643  28C9                     STR_22:	
  3644  28C9  344F               	retlw	79	;'O'
  3645  28CA  3475               	retlw	117	;'u'
  3646  28CB  3474               	retlw	116	;'t'
  3647  28CC  3470               	retlw	112	;'p'
  3648  28CD  3475               	retlw	117	;'u'
  3649  28CE  3474               	retlw	116	;'t'
  3650  28CF  3420               	retlw	32	;' '
  3651  28D0  3470               	retlw	112	;'p'
  3652  28D1  346F               	retlw	111	;'o'
  3653  28D2  3477               	retlw	119	;'w'
  3654  28D3  3465               	retlw	101	;'e'
  3655  28D4  3472               	retlw	114	;'r'
  3656  28D5  344C               	retlw	76	;'L'
  3657  28D6  3465               	retlw	101	;'e'
  3658  28D7  346E               	retlw	110	;'n'
  3659  28D8  3473               	retlw	115	;'s'
  3660  28D9  3420               	retlw	32	;' '
  3661  28DA  3464               	retlw	100	;'d'
  3662  28DB  3469               	retlw	105	;'i'
  3663  28DC  3461               	retlw	97	;'a'
  3664  28DD  346D               	retlw	109	;'m'
  3665  28DE  342E               	retlw	46	;'.'
  3666  28DF  3420               	retlw	32	;' '
  3667  28E0  3420               	retlw	32	;' '
  3668  28E1  3400               	retlw	0
  3669                           
  3670                           	psect	stringtext6
  3671  28E2                     __pstringtext6:	
  3672  28E2                     STR_14:	
  3673  28E2  344F               	retlw	79	;'O'
  3674  28E3  3466               	retlw	102	;'f'
  3675  28E4  3466               	retlw	102	;'f'
  3676  28E5  3420               	retlw	32	;' '
  3677  28E6  3420               	retlw	32	;' '
  3678  28E7  3420               	retlw	32	;' '
  3679  28E8  3420               	retlw	32	;' '
  3680  28E9  3420               	retlw	32	;' '
  3681  28EA  3420               	retlw	32	;' '
  3682  28EB  3420               	retlw	32	;' '
  3683  28EC  3420               	retlw	32	;' '
  3684  28ED  3420               	retlw	32	;' '
  3685  28EE  3400               	retlw	0
  3686                           
  3687                           	psect	stringtext7
  3688  28EF                     __pstringtext7:	
  3689  28EF                     STR_19:	
  3690  28EF  3453               	retlw	83	;'S'
  3691  28F0  3468               	retlw	104	;'h'
  3692  28F1  346F               	retlw	111	;'o'
  3693  28F2  3472               	retlw	114	;'r'
  3694  28F3  3474               	retlw	116	;'t'
  3695  28F4  3465               	retlw	101	;'e'
  3696  28F5  3464               	retlw	100	;'d'
  3697  28F6  3421               	retlw	33	;'!'
  3698  28F7  3420               	retlw	32	;' '
  3699  28F8  3420               	retlw	32	;' '
  3700  28F9  3420               	retlw	32	;' '
  3701  28FA  3420               	retlw	32	;' '
  3702  28FB  3400               	retlw	0
  3703                           
  3704                           	psect	stringtext8
  3705  28FC                     __pstringtext8:	
  3706  28FC                     STR_47:	
  3707  28FC  3453               	retlw	83	;'S'
  3708  28FD  346B               	retlw	107	;'k'
  3709  28FE  3479               	retlw	121	;'y'
  3710  28FF  3420               	retlw	32	;' '
  3711  2900  3474               	retlw	116	;'t'
  3712  2901  3465               	retlw	101	;'e'
  3713  2902  346D               	retlw	109	;'m'
  3714  2903  3470               	retlw	112	;'p'
  3715  2904  342E               	retlw	46	;'.'
  3716  2905  3420               	retlw	32	;' '
  3717  2906  3420               	retlw	32	;' '
  3718  2907  3420               	retlw	32	;' '
  3719  2908  3400               	retlw	0
  3720                           
  3721                           	psect	stringtext9
  3722  2909                     __pstringtext9:	
  3723  2909                     STR_44:	
  3724  2909  3444               	retlw	68	;'D'
  3725  290A  3450               	retlw	80	;'P'
  3726  290B  3420               	retlw	32	;' '
  3727  290C  346F               	retlw	111	;'o'
  3728  290D  3466               	retlw	102	;'f'
  3729  290E  3466               	retlw	102	;'f'
  3730  290F  3473               	retlw	115	;'s'
  3731  2910  3465               	retlw	101	;'e'
  3732  2911  3474               	retlw	116	;'t'
  3733  2912  3420               	retlw	32	;' '
  3734  2913  3420               	retlw	32	;' '
  3735  2914  3420               	retlw	32	;' '
  3736  2915  3400               	retlw	0
  3737                           
  3738                           	psect	stringtext10
  3739  2916                     __pstringtext10:	
  3740  2916                     STR_20:	
  3741  2916  344F               	retlw	79	;'O'
  3742  2917  3476               	retlw	118	;'v'
  3743  2918  3465               	retlw	101	;'e'
  3744  2919  3472               	retlw	114	;'r'
  3745  291A  3463               	retlw	99	;'c'
  3746  291B  3475               	retlw	117	;'u'
  3747  291C  3472               	retlw	114	;'r'
  3748  291D  3472               	retlw	114	;'r'
  3749  291E  3465               	retlw	101	;'e'
  3750  291F  346E               	retlw	110	;'n'
  3751  2920  3474               	retlw	116	;'t'
  3752  2921  3421               	retlw	33	;'!'
  3753  2922  3400               	retlw	0
  3754                           
  3755                           	psect	stringtext11
  3756  2923                     __pstringtext11:	
  3757  2923                     STR_18:	
  3758  2923  3444               	retlw	68	;'D'
  3759  2924  3469               	retlw	105	;'i'
  3760  2925  3473               	retlw	115	;'s'
  3761  2926  3463               	retlw	99	;'c'
  3762  2927  346F               	retlw	111	;'o'
  3763  2928  346E               	retlw	110	;'n'
  3764  2929  346E               	retlw	110	;'n'
  3765  292A  3465               	retlw	101	;'e'
  3766  292B  3463               	retlw	99	;'c'
  3767  292C  3474               	retlw	116	;'t'
  3768  292D  3465               	retlw	101	;'e'
  3769  292E  3464               	retlw	100	;'d'
  3770  292F  3400               	retlw	0
  3771                           
  3772                           	psect	stringtext12
  3773  2930                     __pstringtext12:	
  3774  2930                     STR_21:	
  3775  2930  344F               	retlw	79	;'O'
  3776  2931  346E               	retlw	110	;'n'
  3777  2932  3464               	retlw	100	;'d'
  3778  2933  3472               	retlw	114	;'r'
  3779  2934  3465               	retlw	101	;'e'
  3780  2935  3453               	retlw	83	;'S'
  3781  2936  3470               	retlw	112	;'p'
  3782  2937  3465               	retlw	101	;'e'
  3783  2938  3463               	retlw	99	;'c'
  3784  2939  3469               	retlw	105	;'i'
  3785  293A  3461               	retlw	97	;'a'
  3786  293B  346C               	retlw	108	;'l'
  3787  293C  3400               	retlw	0
  3788                           
  3789                           	psect	stringtext13
  3790  293D                     __pstringtext13:	
  3791  293D                     STR_29:	
  3792  293D  344F               	retlw	79	;'O'
  3793  293E  3475               	retlw	117	;'u'
  3794  293F  3474               	retlw	116	;'t'
  3795  2940  3470               	retlw	112	;'p'
  3796  2941  3475               	retlw	117	;'u'
  3797  2942  3474               	retlw	116	;'t'
  3798  2943  3420               	retlw	32	;' '
  3799  2944  3470               	retlw	112	;'p'
  3800  2945  346F               	retlw	111	;'o'
  3801  2946  3477               	retlw	119	;'w'
  3802  2947  3465               	retlw	101	;'e'
  3803  2948  3472               	retlw	114	;'r'
  3804  2949  3400               	retlw	0
  3805                           
  3806                           	psect	stringtext14
  3807  294A                     __pstringtext14:	
  3808  294A                     STR_1:	
  3809  294A  3454               	retlw	84	;'T'
  3810  294B  3455               	retlw	85	;'U'
  3811  294C  3452               	retlw	82	;'R'
  3812  294D  344E               	retlw	78	;'N'
  3813  294E  3449               	retlw	73	;'I'
  3814  294F  344E               	retlw	78	;'N'
  3815  2950  3447               	retlw	71	;'G'
  3816  2951  3420               	retlw	32	;' '
  3817  2952  344F               	retlw	79	;'O'
  3818  2953  3446               	retlw	70	;'F'
  3819  2954  3446               	retlw	70	;'F'
  3820  2955  3400               	retlw	0
  3821                           
  3822                           	psect	stringtext15
  3823  2956                     __pstringtext15:	
  3824  2956                     STR_53:	
  3825  2956  344D               	retlw	77	;'M'
  3826  2957  3465               	retlw	101	;'e'
  3827  2958  346E               	retlw	110	;'n'
  3828  2959  3475               	retlw	117	;'u'
  3829  295A  3420               	retlw	32	;' '
  3830  295B  3465               	retlw	101	;'e'
  3831  295C  3472               	retlw	114	;'r'
  3832  295D  3472               	retlw	114	;'r'
  3833  295E  346F               	retlw	111	;'o'
  3834  295F  3472               	retlw	114	;'r'
  3835  2960  3400               	retlw	0
  3836                           
  3837                           	psect	stringtext16
  3838  2961                     __pstringtext16:	
  3839  2961                     STR_42:	
  3840  2961  3401               	retlw	1
  3841  2962  3420               	retlw	32	;' '
  3842  2963  3420               	retlw	32	;' '
  3843  2964  3420               	retlw	32	;' '
  3844  2965  3420               	retlw	32	;' '
  3845  2966  3420               	retlw	32	;' '
  3846  2967  3420               	retlw	32	;' '
  3847  2968  3420               	retlw	32	;' '
  3848  2969  3420               	retlw	32	;' '
  3849  296A  3400               	retlw	0
  3850                           
  3851                           	psect	stringtext17
  3852  296B                     __pstringtext17:	
  3853  296B                     STR_49:	
  3854  296B  3401               	retlw	1
  3855  296C  3420               	retlw	32	;' '
  3856  296D  3403               	retlw	3
  3857  296E  3420               	retlw	32	;' '
  3858  296F  3420               	retlw	32	;' '
  3859  2970  3420               	retlw	32	;' '
  3860  2971  3420               	retlw	32	;' '
  3861  2972  3420               	retlw	32	;' '
  3862  2973  3400               	retlw	0
  3863                           
  3864                           	psect	stringtext18
  3865  2974                     __pstringtext18:	
  3866  2974                     STR_52:	
  3867  2974  3420               	retlw	32	;' '
  3868  2975  3403               	retlw	3
  3869  2976  3420               	retlw	32	;' '
  3870  2977  3420               	retlw	32	;' '
  3871  2978  3420               	retlw	32	;' '
  3872  2979  3420               	retlw	32	;' '
  3873  297A  3420               	retlw	32	;' '
  3874  297B  3420               	retlw	32	;' '
  3875  297C  3400               	retlw	0
  3876                           
  3877                           	psect	stringtext19
  3878  297D                     __pstringtext19:	
  3879  297D                     STR_27:	
  3880  297D  3457               	retlw	87	;'W'
  3881  297E  3420               	retlw	32	;' '
  3882  297F  346D               	retlw	109	;'m'
  3883  2980  3461               	retlw	97	;'a'
  3884  2981  346E               	retlw	110	;'n'
  3885  2982  3475               	retlw	117	;'u'
  3886  2983  3461               	retlw	97	;'a'
  3887  2984  346C               	retlw	108	;'l'
  3888  2985  3400               	retlw	0
  3889                           
  3890                           	psect	stringtext20
  3891  2986                     __pstringtext20:	
  3892  2986                     STR_38:	
  3893  2986  3420               	retlw	32	;' '
  3894  2987  3469               	retlw	105	;'i'
  3895  2988  346E               	retlw	110	;'n'
  3896  2989  3463               	retlw	99	;'c'
  3897  298A  3468               	retlw	104	;'h'
  3898  298B  3420               	retlw	32	;' '
  3899  298C  3403               	retlw	3
  3900  298D  3400               	retlw	0
  3901                           
  3902                           	psect	stringtext21
  3903  298E                     __pstringtext21:	
  3904  298E                     STR_35:	
  3905  298E  3457               	retlw	87	;'W'
  3906  298F  3420               	retlw	32	;' '
  3907  2990  346D               	retlw	109	;'m'
  3908  2991  3461               	retlw	97	;'a'
  3909  2992  346E               	retlw	110	;'n'
  3910  2993  342E               	retlw	46	;'.'
  3911  2994  3403               	retlw	3
  3912  2995  3400               	retlw	0
  3913                           
  3914                           	psect	stringtext22
  3915  2996                     __pstringtext22:	
  3916  2996                     STR_6:	
  3917  2996  3401               	retlw	1
  3918  2997  3420               	retlw	32	;' '
  3919  2998  3420               	retlw	32	;' '
  3920  2999  3420               	retlw	32	;' '
  3921  299A  3420               	retlw	32	;' '
  3922  299B  3420               	retlw	32	;' '
  3923  299C  3420               	retlw	32	;' '
  3924  299D  3400               	retlw	0
  3925                           
  3926                           	psect	stringtext23
  3927  299E                     __pstringtext23:	
  3928  299E                     STR_24:	
  3929  299E  3420               	retlw	32	;' '
  3930  299F  346F               	retlw	111	;'o'
  3931  29A0  3466               	retlw	102	;'f'
  3932  29A1  3466               	retlw	102	;'f'
  3933  29A2  3420               	retlw	32	;' '
  3934  29A3  3420               	retlw	32	;' '
  3935  29A4  3420               	retlw	32	;' '
  3936  29A5  3400               	retlw	0
  3937                           
  3938                           	psect	stringtext24
  3939  29A6                     __pstringtext24:	
  3940  29A6                     STR_28:	
  3941  29A6  3420               	retlw	32	;' '
  3942  29A7  3469               	retlw	105	;'i'
  3943  29A8  346E               	retlw	110	;'n'
  3944  29A9  3463               	retlw	99	;'c'
  3945  29AA  3468               	retlw	104	;'h'
  3946  29AB  3420               	retlw	32	;' '
  3947  29AC  3420               	retlw	32	;' '
  3948  29AD  3400               	retlw	0
  3949                           
  3950                           	psect	stringtext25
  3951  29AE                     __pstringtext25:	
  3952  29AE                     STR_26:	
  3953  29AE  3420               	retlw	32	;' '
  3954  29AF  3461               	retlw	97	;'a'
  3955  29B0  3475               	retlw	117	;'u'
  3956  29B1  3474               	retlw	116	;'t'
  3957  29B2  346F               	retlw	111	;'o'
  3958  29B3  3420               	retlw	32	;' '
  3959  29B4  3420               	retlw	32	;' '
  3960  29B5  3400               	retlw	0
  3961                           
  3962                           	psect	stringtext26
  3963  29B6                     __pstringtext26:	
  3964  29B6                     STR_31:	
  3965  29B6  3420               	retlw	32	;' '
  3966  29B7  346F               	retlw	111	;'o'
  3967  29B8  3466               	retlw	102	;'f'
  3968  29B9  3466               	retlw	102	;'f'
  3969  29BA  3420               	retlw	32	;' '
  3970  29BB  3403               	retlw	3
  3971  29BC  3400               	retlw	0
  3972                           
  3973                           	psect	stringtext27
  3974  29BD                     __pstringtext27:	
  3975  29BD                     STR_33:	
  3976  29BD  3420               	retlw	32	;' '
  3977  29BE  3461               	retlw	97	;'a'
  3978  29BF  3475               	retlw	117	;'u'
  3979  29C0  3474               	retlw	116	;'t'
  3980  29C1  346F               	retlw	111	;'o'
  3981  29C2  3403               	retlw	3
  3982  29C3  3400               	retlw	0
  3983                           
  3984                           	psect	stringtext28
  3985  29C4                     __pstringtext28:	
  3986  29C4                     STR_45:	
  3987  29C4  3474               	retlw	116	;'t'
  3988  29C5  3465               	retlw	101	;'e'
  3989  29C6  346D               	retlw	109	;'m'
  3990  29C7  3470               	retlw	112	;'p'
  3991  29C8  342E               	retlw	46	;'.'
  3992  29C9  3404               	retlw	4
  3993  29CA  3400               	retlw	0
  3994                           
  3995                           	psect	stringtext29
  3996  29CB                     __pstringtext29:	
  3997  29CB                     STR_7:	
  3998  29CB  3425               	retlw	37	;'%'
  3999  29CC  3420               	retlw	32	;' '
  4000  29CD  3420               	retlw	32	;' '
  4001  29CE  3420               	retlw	32	;' '
  4002  29CF  3420               	retlw	32	;' '
  4003  29D0  3420               	retlw	32	;' '
  4004  29D1  3400               	retlw	0
  4005                           
  4006                           	psect	stringtext30
  4007  29D2                     __pstringtext30:	
  4008  29D2                     STR_40:	
  4009  29D2  3474               	retlw	116	;'t'
  4010  29D3  3465               	retlw	101	;'e'
  4011  29D4  346D               	retlw	109	;'m'
  4012  29D5  3470               	retlw	112	;'p'
  4013  29D6  342E               	retlw	46	;'.'
  4014  29D7  3420               	retlw	32	;' '
  4015  29D8  3400               	retlw	0
  4016                           
  4017                           	psect	stringtext31
  4018  29D9                     __pstringtext31:	
  4019  29D9                     STR_30:	
  4020  29D9  3404               	retlw	4
  4021  29DA  3443               	retlw	67	;'C'
  4022  29DB  3468               	retlw	104	;'h'
  4023  29DC  342E               	retlw	46	;'.'
  4024  29DD  3420               	retlw	32	;' '
  4025  29DE  3400               	retlw	0
  4026                           
  4027                           	psect	stringtext32
  4028  29DF                     __pstringtext32:	
  4029  29DF                     STR_4:	
  4030  29DF  3401               	retlw	1
  4031  29E0  3420               	retlw	32	;' '
  4032  29E1  3402               	retlw	2
  4033  29E2  3400               	retlw	0
  4034                           
  4035                           	psect	stringtext33
  4036  29E3                     __pstringtext33:	
  4037  29E3                     STR_9:	
  4038  29E3  3456               	retlw	86	;'V'
  4039  29E4  3420               	retlw	32	;' '
  4040  29E5  3420               	retlw	32	;' '
  4041  29E6  3400               	retlw	0
  4042                           
  4043                           	psect	stringtext34
  4044  29E7                     __pstringtext34:	
  4045  29E7                     STR_11:	
  4046  29E7  3443               	retlw	67	;'C'
  4047  29E8  3468               	retlw	104	;'h'
  4048  29E9  3420               	retlw	32	;' '
  4049  29EA  3400               	retlw	0
  4050                           
  4051                           	psect	stringtext35
  4052  29EB                     __pstringtext35:	
  4053  29EB                     STR_2:	
  4054  29EB  3449               	retlw	73	;'I'
  4055  29EC  344E               	retlw	78	;'N'
  4056  29ED  3420               	retlw	32	;' '
  4057  29EE  3400               	retlw	0
  4058                           
  4059                           	psect	stringtext36
  4060  29EF                     __pstringtext36:	
  4061  29EF                     STR_46:	
  4062  29EF  3401               	retlw	1
  4063  29F0  3403               	retlw	3
  4064  29F1  3400               	retlw	0
  4065                           
  4066                           	psect	stringtext37
  4067  29F2                     __pstringtext37:	
  4068  29F2                     STR_41:	
  4069  29F2  3401               	retlw	1
  4070  29F3  3420               	retlw	32	;' '
  4071  29F4  3400               	retlw	0
  4072                           
  4073                           	psect	stringtext38
  4074  29F5                     __pstringtext38:	
  4075  29F5                     STR_13:	
  4076  29F5  3422               	retlw	34	;'"'
  4077  29F6  3420               	retlw	32	;' '
  4078  29F7  3400               	retlw	0
  4079                           
  4080                           	psect	stringtext39
  4081  29F8                     __pstringtext39:	
  4082  29F8                     STR_12:	
  4083  29F8  343A               	retlw	58	;':'
  4084  29F9  3420               	retlw	32	;' '
  4085  29FA  3400               	retlw	0
  4086                           
  4087                           	psect	stringtext40
  4088  29FB                     __pstringtext40:	
  4089  29FB                     STR_15:	
  4090  29FB  3457               	retlw	87	;'W'
  4091  29FC  3420               	retlw	32	;' '
  4092  29FD  3400               	retlw	0
  4093                           
  4094                           	psect	stringtext41
  4095  29FE                     __pstringtext41:	
  4096  29FE                     STR_5:	
  4097  29FE  3401               	retlw	1
  4098  29FF  3400               	retlw	0
  4099                           
  4100                           	psect	stringtext42
  4101  2A00                     __pstringtext42:	
  4102  2A00                     STR_10:	
  4103  2A00  3457               	retlw	87	;'W'
  4104  2A01  3400               	retlw	0
  4105                           
  4106                           	psect	stringtext43
  4107  0000                     __pstringtext43:	
  4108  29C9                     
  4109                           ; #config settings
  4110  0000                     
  4111                           	psect	cinit
  4112  006A                     start_initialization:	
  4113  006A                     __initialization:		;BIGRAM
  4114                           
  4115                           ; Initialize objects allocated to BANK1
  4116  006A  0141               	movlb	1	; select bank1
  4117  006B  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  4118  006E  00EE               	movwf	__pdataBANK1& (0+127)
  4119  006F  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4120  0072  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  4121                           
  4122                           ; Initialize objects allocated to BANK2
  4123  0073  3091               	movlw	low __pidataBANK2
  4124  0074  0084               	movwf	4
  4125  0075  30A1               	movlw	(high __pidataBANK2)| (0+128)
  4126  0076  0085               	movwf	5
  4127  0077  3063               	movlw	low __pdataBANK2
  4128  0078  0086               	movwf	6
  4129  0079  3001               	movlw	high __pdataBANK2
  4130  007A  0087               	movwf	7
  4131  007B  3000               	movlw	0
  4132  007C  00FF               	movwf	btemp+1
  4133  007D  3008               	movlw	8
  4134  007E  31A1  21F8  3180   	fcall	init_ram
  4135                           
  4136                           ; Initialize objects allocated to BANK3
  4137  0081  3001               	movlw	low __pidataBANK3
  4138  0082  0084               	movwf	4
  4139  0083  3098               	movlw	(high __pidataBANK3)| (0+128)
  4140  0084  0085               	movwf	5
  4141  0085  30A0               	movlw	low __pdataBANK3
  4142  0086  0086               	movwf	6
  4143  0087  3001               	movlw	high __pdataBANK3
  4144  0088  0087               	movwf	7
  4145  0089  3000               	movlw	0
  4146  008A  00FF               	movwf	btemp+1
  4147  008B  3032               	movlw	50
  4148  008C  31A1  21F8  3180   	fcall	init_ram
  4149                           
  4150                           ; Clear objects allocated to BIGRAM
  4151  008F  3043               	movlw	low (0+10051)
  4152  0090  0084               	movwf	4
  4153  0091  3027               	movlw	high (0+10051)
  4154  0092  0085               	movwf	5
  4155  0093  30AD               	movlw	173
  4156  0094  00FE               	movwf	btemp
  4157  0095  3000               	movlw	0
  4158  0096  00FF               	movwf	btemp+1
  4159  0097  31A1  21EC  3180   	fcall	clear_ram0
  4160                           
  4161                           ; Clear objects allocated to COMMON
  4162  009A  01FC               	clrf	__pbssCOMMON& (0+127)
  4163  009B  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  4164                           
  4165                           ; Clear objects allocated to BANK1
  4166  009C  30DE               	movlw	low __pbssBANK1
  4167  009D  0084               	movwf	4
  4168  009E  3000               	movlw	high __pbssBANK1
  4169  009F  0085               	movwf	5
  4170  00A0  3010               	movlw	16
  4171  00A1  00FE               	movwf	btemp
  4172  00A2  3000               	movlw	0
  4173  00A3  00FF               	movwf	btemp+1
  4174  00A4  31A1  21EC  3180   	fcall	clear_ram0
  4175                           
  4176                           ; Clear objects allocated to BANK2
  4177  00A7  3020               	movlw	low __pbssBANK2
  4178  00A8  0084               	movwf	4
  4179  00A9  3001               	movlw	high __pbssBANK2
  4180  00AA  0085               	movwf	5
  4181  00AB  3043               	movlw	67
  4182  00AC  00FE               	movwf	btemp
  4183  00AD  3000               	movlw	0
  4184  00AE  00FF               	movwf	btemp+1
  4185  00AF  31A1  21EC         	fcall	clear_ram0
  4186  00B1                     end_of_initialization:	
  4187                           ;End of C runtime variable initialization code
  4188                           
  4189  00B1                     __end_of__initialization:	
  4190  00B1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4191  00B2  0140               	movlb	0
  4192  00B3  319B  2B83         	ljmp	_main	;jump to C main() function
  4193                           
  4194                           	psect	bssCOMMON
  4195  007C                     __pbssCOMMON:	
  4196  007C                     _rxCount:	
  4197  007C                     	ds	1
  4198  007D                     _curRotState:	
  4199  007D                     	ds	1
  4200                           
  4201                           	psect	bssBANK1
  4202  00DE                     __pbssBANK1:	
  4203  00DE                     paging@lastDir:	
  4204  00DE                     	ds	1
  4205  00DF                     menu@state:	
  4206  00DF                     	ds	1
  4207  00E0                     setup@page:	
  4208  00E0                     	ds	1
  4209  00E1                     channelSetup@page:	
  4210  00E1                     	ds	1
  4211  00E2                     channelView@page:	
  4212  00E2                     	ds	1
  4213  00E3                     statusView@page:	
  4214  00E3                     	ds	1
  4215  00E4                     _selectedChannel:	
  4216  00E4                     	ds	1
  4217  00E5                     uartReceiveISR@checksum:	
  4218  00E5                     	ds	1
  4219  00E6                     _dataReadyFlag:	
  4220  00E6                     	ds	1
  4221  00E7                     _pbState:	
  4222  00E7                     	ds	1
  4223  00E8                     _rotDir:	
  4224  00E8                     	ds	1
  4225  00E9                     _tick10ms:	
  4226  00E9                     	ds	1
  4227  00EA                     getAvgChannelCurrents@busy:	
  4228  00EA                     	ds	1
  4229  00EB                     getAvgChannelCurrents@samples:	
  4230  00EB                     	ds	1
  4231  00EC                     getAvgChannelCurrents@channel:	
  4232  00EC                     	ds	1
  4233  00ED                     checkSensor@state:	
  4234  00ED                     	ds	1
  4235                           
  4236                           	psect	dataBANK1
  4237  00EE                     __pdataBANK1:	
  4238  00EE                     statusView@prevSensorStat:	
  4239  00EE                     	ds	1
  4240  00EF                     _g_updateScreen:	
  4241  00EF                     	ds	1
  4242                           
  4243                           	psect	bssBANK2
  4244  0120                     __pbssBANK2:	
  4245  0120                     _tick100ms:	
  4246  0120                     	ds	4
  4247  0124                     checkSensor@sensorTimeout:	
  4248  0124                     	ds	4
  4249  0128                     checkSensor@sensorUpdateInterval:	
  4250  0128                     	ds	4
  4251  012C                     convertAnalogValues@avgI:	
  4252  012C                     	ds	2
  4253  012E                     convertAnalogValues@avgV:	
  4254  012E                     	ds	2
  4255  0130                     convertAnalogValues@avgT:	
  4256  0130                     	ds	2
  4257  0132                     getAvgChannelCurrents@avg:	
  4258  0132                     	ds	2
  4259  0134                     _rxOErrCount:	
  4260  0134                     	ds	1
  4261  0135                     _rxFErrCount:	
  4262  0135                     	ds	1
  4263  0136                     uartReceiveISR@buffer:	
  4264  0136                     	ds	20
  4265  014A                     _dataPacket:	
  4266  014A                     	ds	15
  4267  0159                     _str:	
  4268  0159                     	ds	10
  4269                           
  4270                           	psect	dataBANK2
  4271  0163                     __pdataBANK2:	
  4272  0163                     OLED_print_xy@F7940:	
  4273  0163                     	ds	4
  4274  0167                     OLED_setCursor@F7932:	
  4275  0167                     	ds	4
  4276                           
  4277                           	psect	dataBANK3
  4278  01A0                     __pdataBANK3:	
  4279  01A0                     OLED_loadSpecialChars@F7945:	
  4280  01A0                     	ds	32
  4281  01C0                     _p_fct:	
  4282  01C0                     	ds	18
  4283                           
  4284                           	psect	inittext
  4285  21F8                     init_ram:	
  4286  21F8  00FE               	movwf	126
  4287  21F9                     initloop:	
  4288  21F9  0012               	moviw fsr0++
  4289  21FA  001E               	movwi fsr1++
  4290  21FB  3001               	movlw	1
  4291  21FC  02FE               	subwf	126,f
  4292  21FD  3000               	movlw	0
  4293  21FE  3BFF               	subwfb	127,f
  4294  21FF  087F               	movf	127,w
  4295  2200  047E               	iorwf	126,w
  4296  2201  1903               	btfsc	3,2
  4297  2202  3400               	retlw	0
  4298  2203  29F9               	goto	initloop
  4299                           
  4300                           	psect	clrtext
  4301  21EC                     clear_ram0:	
  4302                           ;	Called with FSR0 containing the base address, and
  4303                           ;	btemp/btemp+1 has the size to clear
  4304                           
  4305  21EC  0064               	clrwdt	;clear the watchdog before getting into this loop
  4306  21ED                     clrloop0:	
  4307  21ED  0180               	clrf	0	;clear RAM location pointed to by FSR
  4308  21EE  3101               	addfsr 0,1
  4309  21EF  3001               	movlw	1
  4310  21F0  02FE               	subwf	126,f
  4311  21F1  3000               	movlw	0
  4312  21F2  3BFF               	subwfb	127,f
  4313  21F3  087F               	movf	127,w
  4314  21F4  047E               	iorwf	126,w
  4315  21F5  1903               	btfsc	3,2
  4316  21F6  3400               	retlw	0	;all done for this memory range, return
  4317  21F7  29ED               	goto	clrloop0	;have we reached the end yet?
  4318                           
  4319                           	psect	cstackBANK1
  4320  00A0                     __pcstackBANK1:	
  4321  00A0                     ?_spinInput:	
  4322  00A0                     ??___fltol:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  00A0                     spinInput@input:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  00A0                     calcRequiredPower@p:	
  4329                           ; 2 bytes @ 0x0
  4330                           
  4331                           
  4332                           ; 4 bytes @ 0x0
  4333  00A0                     	ds	2
  4334  00A2                     spinInput@min:	
  4335                           
  4336                           ; 4 bytes @ 0x2
  4337  00A2                     	ds	2
  4338  00A4                     calcRequiredPower@Rth:	
  4339                           
  4340                           ; 4 bytes @ 0x4
  4341  00A4                     	ds	1
  4342  00A5                     ??_getAvgChannelCurrents:	
  4343  00A5                     ?_itoa:	
  4344                           ; 1 bytes @ 0x5
  4345                           
  4346  00A5                     ?_ftoa:	
  4347                           ; 1 bytes @ 0x5
  4348                           
  4349  00A5                     itoa@str:	
  4350                           ; 1 bytes @ 0x5
  4351                           
  4352  00A5                     ftoa@fValue:	
  4353                           ; 2 bytes @ 0x5
  4354                           
  4355                           
  4356                           ; 4 bytes @ 0x5
  4357  00A5                     	ds	1
  4358  00A6                     spinInput@max:	
  4359                           
  4360                           ; 4 bytes @ 0x6
  4361  00A6                     	ds	1
  4362  00A7                     itoa@value:	
  4363                           
  4364                           ; 1 bytes @ 0x7
  4365  00A7                     	ds	1
  4366  00A8                     itoa@width:	
  4367  00A8                     _calcRequiredPower$2138:	
  4368                           ; 1 bytes @ 0x8
  4369                           
  4370                           
  4371                           ; 4 bytes @ 0x8
  4372  00A8                     	ds	1
  4373  00A9                     ??_itoa:	
  4374  00A9                     ftoa@width:	
  4375                           ; 1 bytes @ 0x9
  4376                           
  4377  00A9                     getAvgChannelCurrents@adc:	
  4378                           ; 1 bytes @ 0x9
  4379                           
  4380                           
  4381                           ; 2 bytes @ 0x9
  4382  00A9                     	ds	1
  4383  00AA                     ftoa@prec:	
  4384  00AA                     spinInput@step:	
  4385                           ; 1 bytes @ 0xA
  4386                           
  4387                           
  4388                           ; 4 bytes @ 0xA
  4389  00AA                     	ds	1
  4390  00AB                     ftoa@len:	
  4391  00AB                     getAvgChannelCurrents@current:	
  4392                           ; 1 bytes @ 0xB
  4393                           
  4394                           
  4395                           ; 4 bytes @ 0xB
  4396  00AB                     	ds	1
  4397  00AC                     ftoa@sign:	
  4398  00AC                     _calcRequiredPower$2139:	
  4399                           ; 1 bytes @ 0xC
  4400                           
  4401                           
  4402                           ; 4 bytes @ 0xC
  4403  00AC                     	ds	1
  4404  00AD                     ftoa@intValue:	
  4405                           
  4406                           ; 1 bytes @ 0xD
  4407  00AD                     	ds	1
  4408  00AE                     ftoa@w:	
  4409                           
  4410                           ; 1 bytes @ 0xE
  4411  00AE                     	ds	1
  4412  00AF                     ftoa@pos:	
  4413  00AF                     getAvgChannelCurrents@chData:	
  4414                           ; 1 bytes @ 0xF
  4415                           
  4416                           
  4417                           ; 2 bytes @ 0xF
  4418  00AF                     	ds	1
  4419  00B0                     ?_systemCheck:	
  4420  00B0                     ftoa@str:	
  4421                           ; 1 bytes @ 0x10
  4422                           
  4423  00B0                     systemCheck@data:	
  4424                           ; 1 bytes @ 0x10
  4425                           
  4426  00B0                     _calcRequiredPower$2140:	
  4427                           ; 2 bytes @ 0x10
  4428                           
  4429                           
  4430                           ; 4 bytes @ 0x10
  4431  00B0                     	ds	1
  4432  00B1                     ?_statusView:	
  4433  00B1                     ?_channelView:	
  4434                           ; 1 bytes @ 0x11
  4435                           
  4436  00B1                     ?_channelSetup:	
  4437                           ; 1 bytes @ 0x11
  4438                           
  4439  00B1                     ?_setOutputPower:	
  4440                           ; 1 bytes @ 0x11
  4441                           
  4442  00B1                     ?_setLensDia:	
  4443                           ; 1 bytes @ 0x11
  4444                           
  4445  00B1                     ?_setup:	
  4446                           ; 1 bytes @ 0x11
  4447                           
  4448  00B1                     ?_setDPOffset:	
  4449                           ; 1 bytes @ 0x11
  4450                           
  4451  00B1                     ?_setSkyTemp:	
  4452                           ; 1 bytes @ 0x11
  4453                           
  4454  00B1                     ?_setFudgeFactor:	
  4455                           ; 1 bytes @ 0x11
  4456                           
  4457  00B1                     statusView@data:	
  4458                           ; 1 bytes @ 0x11
  4459                           
  4460  00B1                     channelView@data:	
  4461                           ; 2 bytes @ 0x11
  4462                           
  4463  00B1                     channelSetup@data:	
  4464                           ; 2 bytes @ 0x11
  4465                           
  4466  00B1                     setOutputPower@data:	
  4467                           ; 2 bytes @ 0x11
  4468                           
  4469  00B1                     setLensDia@data:	
  4470                           ; 2 bytes @ 0x11
  4471                           
  4472  00B1                     setup@data:	
  4473                           ; 2 bytes @ 0x11
  4474                           
  4475  00B1                     setDPOffset@data:	
  4476                           ; 2 bytes @ 0x11
  4477                           
  4478  00B1                     setSkyTemp@data:	
  4479                           ; 2 bytes @ 0x11
  4480                           
  4481  00B1                     setFudgeFactor@data:	
  4482                           ; 2 bytes @ 0x11
  4483                           
  4484                           
  4485                           ; 2 bytes @ 0x11
  4486  00B1                     	ds	1
  4487  00B2                     ??_systemCheck:	
  4488                           
  4489                           ; 1 bytes @ 0x12
  4490  00B2                     	ds	1
  4491  00B3                     ??_statusView:	
  4492  00B3                     ??_channelView:	
  4493                           ; 1 bytes @ 0x13
  4494                           
  4495  00B3                     ??_channelSetup:	
  4496                           ; 1 bytes @ 0x13
  4497                           
  4498  00B3                     ??_setOutputPower:	
  4499                           ; 1 bytes @ 0x13
  4500                           
  4501  00B3                     ??_setLensDia:	
  4502                           ; 1 bytes @ 0x13
  4503                           
  4504  00B3                     ??_setup:	
  4505                           ; 1 bytes @ 0x13
  4506                           
  4507  00B3                     ??_setDPOffset:	
  4508                           ; 1 bytes @ 0x13
  4509                           
  4510  00B3                     ??_setSkyTemp:	
  4511                           ; 1 bytes @ 0x13
  4512                           
  4513  00B3                     ??_setFudgeFactor:	
  4514                           ; 1 bytes @ 0x13
  4515                           
  4516                           
  4517                           ; 1 bytes @ 0x13
  4518  00B3                     	ds	1
  4519  00B4                     systemCheck@str:	
  4520  00B4                     _calcRequiredPower$2141:	
  4521                           ; 3 bytes @ 0x14
  4522                           
  4523                           
  4524                           ; 4 bytes @ 0x14
  4525  00B4                     	ds	3
  4526  00B7                     systemCheck@n:	
  4527  00B7                     channelSetup@chData:	
  4528                           ; 1 bytes @ 0x17
  4529                           
  4530  00B7                     setOutputPower@chData:	
  4531                           ; 2 bytes @ 0x17
  4532                           
  4533                           
  4534                           ; 2 bytes @ 0x17
  4535  00B7                     	ds	1
  4536  00B8                     _calcRequiredPower$2142:	
  4537                           
  4538                           ; 4 bytes @ 0x18
  4539  00B8                     	ds	1
  4540  00B9                     _channelView$1226:	
  4541                           
  4542                           ; 2 bytes @ 0x19
  4543  00B9                     	ds	2
  4544  00BB                     channelView@n:	
  4545                           
  4546                           ; 1 bytes @ 0x1B
  4547  00BB                     	ds	1
  4548  00BC                     ?_menu:	
  4549  00BC                     menu@data:	
  4550                           ; 1 bytes @ 0x1C
  4551                           
  4552  00BC                     _calcRequiredPower$2143:	
  4553                           ; 2 bytes @ 0x1C
  4554                           
  4555                           
  4556                           ; 4 bytes @ 0x1C
  4557  00BC                     	ds	2
  4558  00BE                     ??_menu:	
  4559                           
  4560                           ; 1 bytes @ 0x1E
  4561  00BE                     	ds	2
  4562  00C0                     calcRequiredPower@d:	
  4563                           
  4564                           ; 4 bytes @ 0x20
  4565  00C0                     	ds	2
  4566  00C2                     menu@page:	
  4567                           
  4568                           ; 1 bytes @ 0x22
  4569  00C2                     	ds	1
  4570  00C3                     menu@pb:	
  4571                           
  4572                           ; 1 bytes @ 0x23
  4573  00C3                     	ds	1
  4574  00C4                     menu@func:	
  4575  00C4                     calcRequiredPower@phi:	
  4576                           ; 2 bytes @ 0x24
  4577                           
  4578                           
  4579                           ; 4 bytes @ 0x24
  4580  00C4                     	ds	2
  4581  00C6                     menu@nextState:	
  4582                           
  4583                           ; 1 bytes @ 0x26
  4584  00C6                     	ds	2
  4585  00C8                     calcRequiredPower@A:	
  4586                           
  4587                           ; 4 bytes @ 0x28
  4588  00C8                     	ds	4
  4589  00CC                     _calcRequiredPower$2137:	
  4590                           
  4591                           ; 4 bytes @ 0x2C
  4592  00CC                     	ds	4
  4593  00D0                     calcRequiredPower@T1:	
  4594                           
  4595                           ; 4 bytes @ 0x30
  4596  00D0                     	ds	4
  4597  00D4                     calcRequiredPower@T2:	
  4598                           
  4599                           ; 4 bytes @ 0x34
  4600  00D4                     	ds	4
  4601  00D8                     calcRequiredPower@n:	
  4602                           
  4603                           ; 1 bytes @ 0x38
  4604  00D8                     	ds	1
  4605  00D9                     ??_main:	
  4606                           
  4607                           ; 1 bytes @ 0x39
  4608  00D9                     	ds	1
  4609  00DA                     main@checkInt:	
  4610                           
  4611                           ; 4 bytes @ 0x3A
  4612  00DA                     	ds	4
  4613                           
  4614                           	psect	cstackCOMMON
  4615  0070                     __pcstackCOMMON:	
  4616  0070                     ?_initialize:	
  4617  0070                     ?_OLED_init:	
  4618                           ; 1 bytes @ 0x0
  4619                           
  4620  0070                     ?_OLED_loadSpecialChars:	
  4621                           ; 1 bytes @ 0x0
  4622                           
  4623  0070                     ?_OLED_returnHome:	
  4624                           ; 1 bytes @ 0x0
  4625                           
  4626  0070                     ?_OLED_clearDisplay:	
  4627                           ; 1 bytes @ 0x0
  4628                           
  4629  0070                     ?_error:	
  4630                           ; 1 bytes @ 0x0
  4631                           
  4632  0070                     ?_OLED_Off:	
  4633                           ; 1 bytes @ 0x0
  4634                           
  4635  0070                     ?_uartSendByte:	
  4636                           ; 1 bytes @ 0x0
  4637                           
  4638  0070                     ?_uartReset:	
  4639                           ; 1 bytes @ 0x0
  4640                           
  4641  0070                     ?_uartIsDataReady:	
  4642                           ; 1 bytes @ 0x0
  4643                           
  4644  0070                     ?_getDataPacket:	
  4645                           ; 1 bytes @ 0x0
  4646                           
  4647  0070                     ?_OLED_command:	
  4648                           ; 1 bytes @ 0x0
  4649                           
  4650  0070                     ?_pushButtonISR:	
  4651                           ; 1 bytes @ 0x0
  4652                           
  4653  0070                     ??_pushButtonISR:	
  4654                           ; 1 bytes @ 0x0
  4655                           
  4656  0070                     ?_rotISR:	
  4657                           ; 1 bytes @ 0x0
  4658                           
  4659  0070                     ??_rotISR:	
  4660                           ; 1 bytes @ 0x0
  4661                           
  4662  0070                     ?_uartReceiveISR:	
  4663                           ; 1 bytes @ 0x0
  4664                           
  4665  0070                     ?_strncpy:	
  4666                           ; 1 bytes @ 0x0
  4667                           
  4668  0070                     ?_returnToPage:	
  4669                           ; 1 bytes @ 0x0
  4670                           
  4671  0070                     ?_menuError:	
  4672                           ; 1 bytes @ 0x0
  4673                           
  4674  0070                     ?_main:	
  4675                           ; 1 bytes @ 0x0
  4676                           
  4677  0070                     ?_OLED_pulseEnable:	
  4678                           ; 1 bytes @ 0x0
  4679                           
  4680  0070                     ?_OLED_write4bits:	
  4681                           ; 1 bytes @ 0x0
  4682                           
  4683  0070                     ?_OLED_waitForReady:	
  4684                           ; 1 bytes @ 0x0
  4685                           
  4686  0070                     ?_OLED_write:	
  4687                           ; 1 bytes @ 0x0
  4688                           
  4689  0070                     ?_OLED_scrollDisplayLeft:	
  4690                           ; 1 bytes @ 0x0
  4691                           
  4692  0070                     ?_OLED_scrollDisplayRight:	
  4693                           ; 1 bytes @ 0x0
  4694                           
  4695  0070                     ?_get10msTick:	
  4696                           ; 1 bytes @ 0x0
  4697                           
  4698  0070                     ??_get10msTick:	
  4699                           ; 1 bytes @ 0x0
  4700                           
  4701  0070                     ?_reset10msTick:	
  4702                           ; 1 bytes @ 0x0
  4703                           
  4704  0070                     ??_reset10msTick:	
  4705                           ; 1 bytes @ 0x0
  4706                           
  4707  0070                     ?_ISR:	
  4708                           ; 1 bytes @ 0x0
  4709                           
  4710  0070                     ?_getRotDir:	
  4711                           ; 1 bytes @ 0x0
  4712                           
  4713  0070                     ?_getPB:	
  4714                           ; 1 bytes @ 0x0
  4715                           
  4716  0070                     error@error:	
  4717                           ; 1 bytes @ 0x0
  4718                           
  4719  0070                     strncpy@s:	
  4720                           ; 1 bytes @ 0x0
  4721                           
  4722                           
  4723                           ; 1 bytes @ 0x0
  4724  0070                     	ds	1
  4725  0071                     pushButtonISR@time:	
  4726  0071                     strncpy@n:	
  4727                           ; 1 bytes @ 0x1
  4728                           
  4729                           
  4730                           ; 2 bytes @ 0x1
  4731  0071                     	ds	2
  4732  0073                     ??_strncpy:	
  4733                           
  4734                           ; 1 bytes @ 0x3
  4735  0073                     	ds	1
  4736  0074                     strncpy@d:	
  4737                           
  4738                           ; 1 bytes @ 0x4
  4739  0074                     	ds	1
  4740  0075                     strncpy@cp:	
  4741                           
  4742                           ; 1 bytes @ 0x5
  4743  0075                     	ds	1
  4744  0076                     ??_uartReceiveISR:	
  4745                           
  4746                           ; 1 bytes @ 0x6
  4747  0076                     	ds	1
  4748  0077                     rotISR@input:	
  4749                           
  4750                           ; 1 bytes @ 0x7
  4751  0077                     	ds	1
  4752  0078                     ??_ISR:	
  4753                           
  4754                           ; 1 bytes @ 0x8
  4755  0078                     	ds	4
  4756                           
  4757                           	psect	cstackBANK0
  4758  0020                     __pcstackBANK0:	
  4759  0020                     ?___fleq:	
  4760  0020                     ?___flge:	
  4761                           ; 1 bit 
  4762                           
  4763  0020                     ??_initialize:	
  4764                           ; 1 bit 
  4765                           
  4766  0020                     ?_initGlobalData:	
  4767                           ; 1 bytes @ 0x0
  4768                           
  4769  0020                     ??_error:	
  4770                           ; 1 bytes @ 0x0
  4771                           
  4772  0020                     ??_uartSendByte:	
  4773                           ; 1 bytes @ 0x0
  4774                           
  4775  0020                     ??_uartReset:	
  4776                           ; 1 bytes @ 0x0
  4777                           
  4778  0020                     ??_uartIsDataReady:	
  4779                           ; 1 bytes @ 0x0
  4780                           
  4781  0020                     ??_getDataPacket:	
  4782                           ; 1 bytes @ 0x0
  4783                           
  4784  0020                     ?_setSwitch:	
  4785                           ; 1 bytes @ 0x0
  4786                           
  4787  0020                     ??_OLED_pulseEnable:	
  4788                           ; 1 bytes @ 0x0
  4789                           
  4790  0020                     ??_OLED_write4bits:	
  4791                           ; 1 bytes @ 0x0
  4792                           
  4793  0020                     ??_OLED_waitForReady:	
  4794                           ; 1 bytes @ 0x0
  4795                           
  4796  0020                     ??_getRotDir:	
  4797                           ; 1 bytes @ 0x0
  4798                           
  4799  0020                     ??_getPB:	
  4800                           ; 1 bytes @ 0x0
  4801                           
  4802  0020                     ?___bmul:	
  4803                           ; 1 bytes @ 0x0
  4804                           
  4805  0020                     ?__Umul8_16:	
  4806                           ; 1 bytes @ 0x0
  4807                           
  4808  0020                     ?_adcGetConversion:	
  4809                           ; 2 bytes @ 0x0
  4810                           
  4811  0020                     ?___wmul:	
  4812                           ; 2 bytes @ 0x0
  4813                           
  4814  0020                     ?___awdiv:	
  4815                           ; 2 bytes @ 0x0
  4816                           
  4817  0020                     ?___awmod:	
  4818                           ; 2 bytes @ 0x0
  4819                           
  4820  0020                     ?_timeNow:	
  4821                           ; 2 bytes @ 0x0
  4822                           
  4823  0020                     ?___lmul:	
  4824                           ; 4 bytes @ 0x0
  4825                           
  4826  0020                     setSwitch@state:	
  4827                           ; 4 bytes @ 0x0
  4828                           
  4829  0020                     OLED_waitForReady@busy:	
  4830                           ; 1 bytes @ 0x0
  4831                           
  4832  0020                     uartSendByte@s:	
  4833                           ; 1 bytes @ 0x0
  4834                           
  4835  0020                     ___bmul@multiplicand:	
  4836                           ; 1 bytes @ 0x0
  4837                           
  4838  0020                     __Umul8_16@multiplicand:	
  4839                           ; 1 bytes @ 0x0
  4840                           
  4841  0020                     initGlobalData@data:	
  4842                           ; 1 bytes @ 0x0
  4843                           
  4844  0020                     ___wmul@multiplier:	
  4845                           ; 2 bytes @ 0x0
  4846                           
  4847  0020                     ___awdiv@divisor:	
  4848                           ; 2 bytes @ 0x0
  4849                           
  4850  0020                     ___awmod@divisor:	
  4851                           ; 2 bytes @ 0x0
  4852                           
  4853  0020                     ___lmul@multiplier:	
  4854                           ; 2 bytes @ 0x0
  4855                           
  4856  0020                     ___fleq@ff1:	
  4857                           ; 4 bytes @ 0x0
  4858                           
  4859  0020                     ___flge@ff1:	
  4860                           ; 4 bytes @ 0x0
  4861                           
  4862                           
  4863                           ; 4 bytes @ 0x0
  4864  0020                     	ds	1
  4865  0021                     ??_setSwitch:	
  4866  0021                     ??___bmul:	
  4867                           ; 1 bytes @ 0x1
  4868                           
  4869  0021                     getRotDir@ret:	
  4870                           ; 1 bytes @ 0x1
  4871                           
  4872  0021                     getPB@ret:	
  4873                           ; 1 bytes @ 0x1
  4874                           
  4875  0021                     uartIsDataReady@ret:	
  4876                           ; 1 bytes @ 0x1
  4877                           
  4878                           
  4879                           ; 1 bytes @ 0x1
  4880  0021                     	ds	1
  4881  0022                     ??_initGlobalData:	
  4882  0022                     ??__Umul8_16:	
  4883                           ; 1 bytes @ 0x2
  4884                           
  4885  0022                     ??_adcGetConversion:	
  4886                           ; 1 bytes @ 0x2
  4887                           
  4888  0022                     OLED_write4bits@value:	
  4889                           ; 1 bytes @ 0x2
  4890                           
  4891  0022                     ___bmul@product:	
  4892                           ; 1 bytes @ 0x2
  4893                           
  4894  0022                     ___wmul@multiplicand:	
  4895                           ; 1 bytes @ 0x2
  4896                           
  4897  0022                     ___awdiv@dividend:	
  4898                           ; 2 bytes @ 0x2
  4899                           
  4900  0022                     ___awmod@dividend:	
  4901                           ; 2 bytes @ 0x2
  4902                           
  4903                           
  4904                           ; 2 bytes @ 0x2
  4905  0022                     	ds	1
  4906  0023                     ?_OLED_send:	
  4907  0023                     setSwitch@channel:	
  4908                           ; 1 bytes @ 0x3
  4909                           
  4910  0023                     adcGetConversion@channel:	
  4911                           ; 1 bytes @ 0x3
  4912                           
  4913  0023                     OLED_send@mode:	
  4914                           ; 1 bytes @ 0x3
  4915                           
  4916  0023                     ___bmul@multiplier:	
  4917                           ; 1 bytes @ 0x3
  4918                           
  4919                           
  4920                           ; 1 bytes @ 0x3
  4921  0023                     	ds	1
  4922  0024                     ??_timeNow:	
  4923  0024                     ??_OLED_send:	
  4924                           ; 1 bytes @ 0x4
  4925                           
  4926  0024                     ??___wmul:	
  4927                           ; 1 bytes @ 0x4
  4928                           
  4929  0024                     ??___awdiv:	
  4930                           ; 1 bytes @ 0x4
  4931                           
  4932  0024                     ??___awmod:	
  4933                           ; 1 bytes @ 0x4
  4934                           
  4935  0024                     ?_timeSince:	
  4936                           ; 1 bytes @ 0x4
  4937                           
  4938  0024                     ___wmul@product:	
  4939                           ; 4 bytes @ 0x4
  4940                           
  4941  0024                     __Umul8_16@product:	
  4942                           ; 2 bytes @ 0x4
  4943                           
  4944  0024                     timeSince@since:	
  4945                           ; 2 bytes @ 0x4
  4946                           
  4947  0024                     ___lmul@multiplicand:	
  4948                           ; 4 bytes @ 0x4
  4949                           
  4950  0024                     ___fleq@ff2:	
  4951                           ; 4 bytes @ 0x4
  4952                           
  4953  0024                     ___flge@ff2:	
  4954                           ; 4 bytes @ 0x4
  4955                           
  4956                           
  4957                           ; 4 bytes @ 0x4
  4958  0024                     	ds	1
  4959  0025                     OLED_send@value:	
  4960  0025                     ___awdiv@counter:	
  4961                           ; 1 bytes @ 0x5
  4962                           
  4963  0025                     ___awmod@counter:	
  4964                           ; 1 bytes @ 0x5
  4965                           
  4966                           
  4967                           ; 1 bytes @ 0x5
  4968  0025                     	ds	1
  4969  0026                     ??_OLED_command:	
  4970  0026                     ?_getNextState:	
  4971                           ; 1 bytes @ 0x6
  4972                           
  4973  0026                     ??_OLED_write:	
  4974                           ; 1 bytes @ 0x6
  4975                           
  4976  0026                     ?_getStateFunc:	
  4977                           ; 1 bytes @ 0x6
  4978                           
  4979  0026                     ?___xxtofl:	
  4980                           ; 2 bytes @ 0x6
  4981                           
  4982  0026                     initGlobalData@n:	
  4983                           ; 4 bytes @ 0x6
  4984                           
  4985  0026                     OLED_command@value:	
  4986                           ; 1 bytes @ 0x6
  4987                           
  4988  0026                     OLED_write@value:	
  4989                           ; 1 bytes @ 0x6
  4990                           
  4991  0026                     getNextState@page:	
  4992                           ; 1 bytes @ 0x6
  4993                           
  4994  0026                     ___awdiv@sign:	
  4995                           ; 1 bytes @ 0x6
  4996                           
  4997  0026                     ___awmod@sign:	
  4998                           ; 1 bytes @ 0x6
  4999                           
  5000  0026                     __Umul8_16@word_mpld:	
  5001                           ; 1 bytes @ 0x6
  5002                           
  5003  0026                     ___xxtofl@val:	
  5004                           ; 2 bytes @ 0x6
  5005                           
  5006                           
  5007                           ; 4 bytes @ 0x6
  5008  0026                     	ds	1
  5009  0027                     ??_OLED_init:	
  5010  0027                     ??_OLED_loadSpecialChars:	
  5011                           ; 1 bytes @ 0x7
  5012                           
  5013  0027                     ??_OLED_returnHome:	
  5014                           ; 1 bytes @ 0x7
  5015                           
  5016  0027                     ??_OLED_clearDisplay:	
  5017                           ; 1 bytes @ 0x7
  5018                           
  5019  0027                     ?_OLED_print_xy:	
  5020                           ; 1 bytes @ 0x7
  5021                           
  5022  0027                     ??_OLED_Off:	
  5023                           ; 1 bytes @ 0x7
  5024                           
  5025  0027                     ??_returnToPage:	
  5026                           ; 1 bytes @ 0x7
  5027                           
  5028  0027                     ?_paging:	
  5029                           ; 1 bytes @ 0x7
  5030                           
  5031  0027                     ??_OLED_scrollDisplayLeft:	
  5032                           ; 1 bytes @ 0x7
  5033                           
  5034  0027                     ??_OLED_scrollDisplayRight:	
  5035                           ; 1 bytes @ 0x7
  5036                           
  5037  0027                     OLED_print_xy@row:	
  5038                           ; 1 bytes @ 0x7
  5039                           
  5040  0027                     getNextState@pb:	
  5041                           ; 1 bytes @ 0x7
  5042                           
  5043  0027                     paging@lastPage:	
  5044                           ; 1 bytes @ 0x7
  5045                           
  5046  0027                     initGlobalData@chData:	
  5047                           ; 1 bytes @ 0x7
  5048                           
  5049  0027                     ___awdiv@quotient:	
  5050                           ; 2 bytes @ 0x7
  5051                           
  5052                           
  5053                           ; 2 bytes @ 0x7
  5054  0027                     	ds	1
  5055  0028                     ??_timeSince:	
  5056  0028                     ??_paging:	
  5057                           ; 1 bytes @ 0x8
  5058                           
  5059  0028                     ??_getStateFunc:	
  5060                           ; 1 bytes @ 0x8
  5061                           
  5062  0028                     ??_getNextState:	
  5063                           ; 1 bytes @ 0x8
  5064                           
  5065  0028                     ??___lmul:	
  5066                           ; 1 bytes @ 0x8
  5067                           
  5068  0028                     ??___fleq:	
  5069                           ; 1 bytes @ 0x8
  5070                           
  5071  0028                     ??___flge:	
  5072                           ; 1 bytes @ 0x8
  5073                           
  5074  0028                     __Umul8_16@multiplier:	
  5075                           ; 1 bytes @ 0x8
  5076                           
  5077  0028                     OLED_print_xy@s:	
  5078                           ; 1 bytes @ 0x8
  5079                           
  5080  0028                     ___lmul@product:	
  5081                           ; 2 bytes @ 0x8
  5082                           
  5083  0028                     OLED_loadSpecialChars@special:	
  5084                           ; 4 bytes @ 0x8
  5085                           
  5086                           
  5087                           ; 32 bytes @ 0x8
  5088  0028                     	ds	1
  5089  0029                     returnToPage@page:	
  5090                           
  5091                           ; 1 bytes @ 0x9
  5092  0029                     	ds	1
  5093  002A                     ??_OLED_print_xy:	
  5094  002A                     ??___xxtofl:	
  5095                           ; 1 bytes @ 0xA
  5096                           
  5097  002A                     paging@currentPage:	
  5098                           ; 1 bytes @ 0xA
  5099                           
  5100  002A                     returnToPage@n:	
  5101                           ; 1 bytes @ 0xA
  5102                           
  5103                           
  5104                           ; 1 bytes @ 0xA
  5105  002A                     	ds	1
  5106  002B                     getStateFunc@state:	
  5107  002B                     getNextState@state:	
  5108                           ; 1 bytes @ 0xB
  5109                           
  5110  002B                     paging@dir:	
  5111                           ; 1 bytes @ 0xB
  5112                           
  5113  002B                     OLED_print_xy@row_offsets:	
  5114                           ; 1 bytes @ 0xB
  5115                           
  5116                           
  5117                           ; 4 bytes @ 0xB
  5118  002B                     	ds	1
  5119  002C                     ?_ema:	
  5120  002C                     getStateFunc@n:	
  5121                           ; 2 bytes @ 0xC
  5122                           
  5123  002C                     getNextState@n:	
  5124                           ; 1 bytes @ 0xC
  5125                           
  5126  002C                     paging@n:	
  5127                           ; 1 bytes @ 0xC
  5128                           
  5129  002C                     ema@in:	
  5130                           ; 1 bytes @ 0xC
  5131                           
  5132                           
  5133                           ; 2 bytes @ 0xC
  5134  002C                     	ds	2
  5135  002E                     ___xxtofl@sign:	
  5136  002E                     ema@average:	
  5137                           ; 1 bytes @ 0xE
  5138                           
  5139                           
  5140                           ; 2 bytes @ 0xE
  5141  002E                     	ds	1
  5142  002F                     OLED_print_xy@col:	
  5143  002F                     ___xxtofl@exp:	
  5144                           ; 1 bytes @ 0xF
  5145                           
  5146                           
  5147                           ; 1 bytes @ 0xF
  5148  002F                     	ds	1
  5149  0030                     ??_menuError:	
  5150  0030                     timeSince@now:	
  5151                           ; 1 bytes @ 0x10
  5152                           
  5153  0030                     ema@alpha:	
  5154                           ; 4 bytes @ 0x10
  5155                           
  5156  0030                     ___xxtofl@arg:	
  5157                           ; 4 bytes @ 0x10
  5158                           
  5159                           
  5160                           ; 4 bytes @ 0x10
  5161  0030                     	ds	4
  5162  0034                     ?_checkSensor:	
  5163  0034                     ??_ema:	
  5164                           ; 1 bytes @ 0x14
  5165                           
  5166  0034                     ?___flmul:	
  5167                           ; 1 bytes @ 0x14
  5168                           
  5169  0034                     checkSensor@data:	
  5170                           ; 4 bytes @ 0x14
  5171                           
  5172  0034                     ___flmul@b:	
  5173                           ; 2 bytes @ 0x14
  5174                           
  5175                           
  5176                           ; 4 bytes @ 0x14
  5177  0034                     	ds	2
  5178  0036                     ??_checkSensor:	
  5179                           
  5180                           ; 1 bytes @ 0x16
  5181  0036                     	ds	2
  5182  0038                     ___flmul@a:	
  5183                           
  5184                           ; 4 bytes @ 0x18
  5185  0038                     	ds	2
  5186  003A                     checkSensor@dp:	
  5187                           
  5188                           ; 1 bytes @ 0x1A
  5189  003A                     	ds	2
  5190  003C                     ??___flmul:	
  5191  003C                     ema@tmp0:	
  5192                           ; 1 bytes @ 0x1C
  5193                           
  5194                           
  5195                           ; 4 bytes @ 0x1C
  5196  003C                     	ds	5
  5197  0041                     ___flmul@sign:	
  5198                           
  5199                           ; 1 bytes @ 0x21
  5200  0041                     	ds	1
  5201  0042                     ___flmul@grs:	
  5202                           
  5203                           ; 4 bytes @ 0x22
  5204  0042                     	ds	4
  5205  0046                     ___flmul@aexp:	
  5206                           
  5207                           ; 1 bytes @ 0x26
  5208  0046                     	ds	1
  5209  0047                     ___flmul@bexp:	
  5210                           
  5211                           ; 1 bytes @ 0x27
  5212  0047                     	ds	1
  5213  0048                     OLED_loadSpecialChars@n:	
  5214  0048                     ___flmul@prod:	
  5215                           ; 1 bytes @ 0x28
  5216                           
  5217                           
  5218                           ; 4 bytes @ 0x28
  5219  0048                     	ds	4
  5220  004C                     ___flmul@temp:	
  5221                           
  5222                           ; 2 bytes @ 0x2C
  5223  004C                     	ds	2
  5224  004E                     ?___fladd:	
  5225  004E                     ?___fldiv:	
  5226                           ; 4 bytes @ 0x2E
  5227                           
  5228  004E                     ___fladd@b:	
  5229                           ; 4 bytes @ 0x2E
  5230                           
  5231  004E                     ___fldiv@a:	
  5232                           ; 4 bytes @ 0x2E
  5233                           
  5234                           
  5235                           ; 4 bytes @ 0x2E
  5236  004E                     	ds	4
  5237  0052                     ___fladd@a:	
  5238  0052                     ___fldiv@b:	
  5239                           ; 4 bytes @ 0x32
  5240                           
  5241                           
  5242                           ; 4 bytes @ 0x32
  5243  0052                     	ds	4
  5244  0056                     ??___fladd:	
  5245  0056                     ??___fldiv:	
  5246                           ; 1 bytes @ 0x36
  5247                           
  5248                           
  5249                           ; 1 bytes @ 0x36
  5250  0056                     	ds	5
  5251  005B                     ___fldiv@rem:	
  5252                           
  5253                           ; 4 bytes @ 0x3B
  5254  005B                     	ds	3
  5255  005E                     ___fladd@signs:	
  5256                           
  5257                           ; 1 bytes @ 0x3E
  5258  005E                     	ds	1
  5259  005F                     ___fladd@aexp:	
  5260  005F                     ___fldiv@sign:	
  5261                           ; 1 bytes @ 0x3F
  5262                           
  5263                           
  5264                           ; 1 bytes @ 0x3F
  5265  005F                     	ds	1
  5266  0060                     ___fladd@bexp:	
  5267  0060                     ___fldiv@new_exp:	
  5268                           ; 1 bytes @ 0x40
  5269                           
  5270                           
  5271                           ; 2 bytes @ 0x40
  5272  0060                     	ds	1
  5273  0061                     ___fladd@grs:	
  5274                           
  5275                           ; 1 bytes @ 0x41
  5276  0061                     	ds	1
  5277  0062                     ?___flsub:	
  5278  0062                     ___flsub@a:	
  5279                           ; 4 bytes @ 0x42
  5280                           
  5281  0062                     ___fldiv@grs:	
  5282                           ; 4 bytes @ 0x42
  5283                           
  5284                           
  5285                           ; 4 bytes @ 0x42
  5286  0062                     	ds	4
  5287  0066                     ___fldiv@bexp:	
  5288  0066                     ___flsub@b:	
  5289                           ; 1 bytes @ 0x46
  5290                           
  5291                           
  5292                           ; 4 bytes @ 0x46
  5293  0066                     	ds	1
  5294  0067                     ___fldiv@aexp:	
  5295                           
  5296                           ; 1 bytes @ 0x47
  5297  0067                     	ds	1
  5298  0068                     ?_convertAnalogValues:	
  5299  0068                     ?___fltol:	
  5300                           ; 1 bytes @ 0x48
  5301                           
  5302  0068                     convertAnalogValues@data:	
  5303                           ; 4 bytes @ 0x48
  5304                           
  5305  0068                     ___fltol@f1:	
  5306                           ; 2 bytes @ 0x48
  5307                           
  5308                           
  5309                           ; 4 bytes @ 0x48
  5310  0068                     	ds	2
  5311  006A                     ??_convertAnalogValues:	
  5312  006A                     ?_calcRequiredPower:	
  5313                           ; 1 bytes @ 0x4A
  5314                           
  5315  006A                     ??_spinInput:	
  5316                           ; 1 bytes @ 0x4A
  5317                           
  5318  006A                     ??___flsub:	
  5319                           ; 1 bytes @ 0x4A
  5320                           
  5321  006A                     calcRequiredPower@data:	
  5322                           ; 1 bytes @ 0x4A
  5323                           
  5324  006A                     _convertAnalogValues$2144:	
  5325                           ; 2 bytes @ 0x4A
  5326                           
  5327                           
  5328                           ; 4 bytes @ 0x4A
  5329  006A                     	ds	1
  5330  006B                     spinInput@dir:	
  5331                           
  5332                           ; 1 bytes @ 0x4B
  5333  006B                     	ds	1
  5334  006C                     ??_calcRequiredPower:	
  5335  006C                     ___fltol@sign1:	
  5336                           ; 1 bytes @ 0x4C
  5337                           
  5338                           
  5339                           ; 1 bytes @ 0x4C
  5340  006C                     	ds	1
  5341  006D                     ___fltol@exp1:	
  5342                           
  5343                           ; 1 bytes @ 0x4D
  5344  006D                     	ds	1
  5345  006E                     ?_getAvgChannelCurrents:	
  5346  006E                     ??_ftoa:	
  5347                           ; 1 bytes @ 0x4E
  5348                           
  5349  006E                     getAvgChannelCurrents@data:	
  5350                           ; 1 bytes @ 0x4E
  5351                           
  5352  006E                     convertAnalogValues@adc:	
  5353                           ; 2 bytes @ 0x4E
  5354                           
  5355                           
  5356                           ; 2 bytes @ 0x4E
  5357  006E                     	ds	2
  5358                           
  5359                           	psect	maintext
  5360  1B83                     __pmaintext:	
  5361 ;;
  5362 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  5363 ;;
  5364 ;; *************** function _main *****************
  5365 ;; Defined at:
  5366 ;;		line 59 in file "main.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;  checkInt        4   58[BANK1 ] unsigned long 
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  1    wreg      void 
  5373 ;; Registers used:
  5374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : B3F/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5381 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5382 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5383 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5384 ;;Total ram usage:        5 bytes
  5385 ;; Hardware stack levels required when called:   11
  5386 ;; This function calls:
  5387 ;;		_OLED_clearDisplay
  5388 ;;		_OLED_init
  5389 ;;		_OLED_loadSpecialChars
  5390 ;;		_OLED_returnHome
  5391 ;;		_calcRequiredPower
  5392 ;;		_checkSensor
  5393 ;;		_convertAnalogValues
  5394 ;;		_getAvgChannelCurrents
  5395 ;;		_initGlobalData
  5396 ;;		_initialize
  5397 ;;		_menu
  5398 ;;		_systemCheck
  5399 ;;		_timeNow
  5400 ;;		_timeSince
  5401 ;; This function is called by:
  5402 ;;		Startup code after reset
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _main
  5408  1B83                     _main:	
  5409                           
  5410                           ;main.c: 61:  uint32_t checkInt = 0;
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5414  1B83  3000               	movlw	0
  5415  1B84  0141               	movlb	1	; select bank1
  5416  1B85  00DD               	movwf	(main@checkInt+3)^(0+128)
  5417  1B86  3000               	movlw	0
  5418  1B87  00DC               	movwf	(main@checkInt+2)^(0+128)
  5419  1B88  3000               	movlw	0
  5420  1B89  00DB               	movwf	(main@checkInt+1)^(0+128)
  5421  1B8A  3000               	movlw	0
  5422  1B8B  00DA               	movwf	main@checkInt^(0+128)
  5423                           
  5424                           ;main.c: 63:  initialize();
  5425  1B8C  31A5  2532  319B   	fcall	_initialize
  5426                           
  5427                           ;main.c: 64:  LATBbits.LATB5 = 1;
  5428  1B8F  0140               	movlb	0	; select bank0
  5429  1B90  1699               	bsf	25,5	;volatile
  5430                           
  5431                           ;main.c: 65:  OLED_init();
  5432  1B91  319A  226D  319B   	fcall	_OLED_init
  5433                           
  5434                           ;main.c: 66:  OLED_loadSpecialChars();
  5435  1B94  31A2  22A0  319B   	fcall	_OLED_loadSpecialChars
  5436                           
  5437                           ;main.c: 67:  OLED_returnHome();
  5438  1B97  31A1  2185  319B   	fcall	_OLED_returnHome
  5439                           
  5440                           ;main.c: 68:  OLED_clearDisplay();
  5441  1B9A  31A1  2181  319B   	fcall	_OLED_clearDisplay
  5442                           
  5443                           ;main.c: 69:  initGlobalData(&data);
  5444  1B9D  3043               	movlw	67
  5445  1B9E  0140               	movlb	0	; select bank0
  5446  1B9F  00A0               	movwf	initGlobalData@data
  5447  1BA0  3027               	movlw	39
  5448  1BA1  00A1               	movwf	initGlobalData@data+1
  5449  1BA2  319C  24AB  319B   	fcall	_initGlobalData
  5450                           
  5451                           ;main.c: 71:  LATCbits.LATC3 = 1;
  5452  1BA5  0140               	movlb	0	; select bank0
  5453  1BA6  159A               	bsf	26,3	;volatile
  5454                           
  5455                           ;main.c: 72:  LATAbits.LATA0 = 1;
  5456  1BA7  1418               	bsf	24,0	;volatile
  5457  1BA8                     l129:	
  5458                           ;main.c: 74:  while (1) {
  5459                           
  5460  1BA8  0064               	clrwdt	;# 
  5461                           
  5462                           ;main.c: 76:   convertAnalogValues(&data);
  5463  1BA9  3043               	movlw	67
  5464  1BAA  0140               	movlb	0	; select bank0
  5465  1BAB  00E8               	movwf	convertAnalogValues@data
  5466  1BAC  3027               	movlw	39
  5467  1BAD  00E9               	movwf	convertAnalogValues@data+1
  5468  1BAE  3196  2674  319B   	fcall	_convertAnalogValues
  5469                           
  5470                           ;main.c: 77:   checkSensor(&data);
  5471  1BB1  3043               	movlw	67
  5472  1BB2  0140               	movlb	0	; select bank0
  5473  1BB3  00B4               	movwf	checkSensor@data
  5474  1BB4  3027               	movlw	39
  5475  1BB5  00B5               	movwf	checkSensor@data+1
  5476  1BB6  3192  2208  319B   	fcall	_checkSensor
  5477                           
  5478                           ;main.c: 78:   if (timeSince(checkInt) > 10) {
  5479  1BB9  0141               	movlb	1	; select bank1
  5480  1BBA  085D               	movf	(main@checkInt+3)^(0+128),w
  5481  1BBB  0140               	movlb	0	; select bank0
  5482  1BBC  00A7               	movwf	timeSince@since+3
  5483  1BBD  0141               	movlb	1	; select bank1
  5484  1BBE  085C               	movf	(main@checkInt+2)^(0+128),w
  5485  1BBF  0140               	movlb	0	; select bank0
  5486  1BC0  00A6               	movwf	timeSince@since+2
  5487  1BC1  0141               	movlb	1	; select bank1
  5488  1BC2  085B               	movf	(main@checkInt+1)^(0+128),w
  5489  1BC3  0140               	movlb	0	; select bank0
  5490  1BC4  00A5               	movwf	timeSince@since+1
  5491  1BC5  0141               	movlb	1	; select bank1
  5492  1BC6  085A               	movf	main@checkInt^(0+128),w
  5493  1BC7  0140               	movlb	0	; select bank0
  5494  1BC8  00A4               	movwf	timeSince@since
  5495  1BC9  31A6  2615  319B   	fcall	_timeSince
  5496  1BCC  0140               	movlb	0	; select bank0
  5497  1BCD  0827               	movf	?_timeSince+3,w
  5498  1BCE  1D03               	btfss	3,2
  5499  1BCF  2BDA               	goto	l5551
  5500  1BD0  0826               	movf	?_timeSince+2,w
  5501  1BD1  1D03               	btfss	3,2
  5502  1BD2  2BDA               	goto	l5551
  5503  1BD3  0825               	movf	?_timeSince+1,w
  5504  1BD4  1D03               	btfss	3,2
  5505  1BD5  2BDA               	goto	l5551
  5506  1BD6  300B               	movlw	11
  5507  1BD7  0224               	subwf	?_timeSince,w
  5508  1BD8  1C03               	btfss	3,0
  5509  1BD9  2BFC               	goto	l5557
  5510  1BDA                     l5551:	
  5511                           
  5512                           ;main.c: 79:    checkInt = timeNow();
  5513  1BDA  31A2  2204  319B   	fcall	_timeNow
  5514  1BDD  0140               	movlb	0	; select bank0
  5515  1BDE  0823               	movf	?_timeNow+3,w
  5516  1BDF  0141               	movlb	1	; select bank1
  5517  1BE0  00DD               	movwf	(main@checkInt+3)^(0+128)
  5518  1BE1  0140               	movlb	0	; select bank0
  5519  1BE2  0822               	movf	?_timeNow+2,w
  5520  1BE3  0141               	movlb	1	; select bank1
  5521  1BE4  00DC               	movwf	(main@checkInt+2)^(0+128)
  5522  1BE5  0140               	movlb	0	; select bank0
  5523  1BE6  0821               	movf	?_timeNow+1,w
  5524  1BE7  0141               	movlb	1	; select bank1
  5525  1BE8  00DB               	movwf	(main@checkInt+1)^(0+128)
  5526  1BE9  0140               	movlb	0	; select bank0
  5527  1BEA  0820               	movf	?_timeNow,w
  5528  1BEB  0141               	movlb	1	; select bank1
  5529  1BEC  00DA               	movwf	main@checkInt^(0+128)
  5530                           
  5531                           ;main.c: 80:    systemCheck(&data);
  5532  1BED  3043               	movlw	67
  5533  1BEE  00B0               	movwf	systemCheck@data^(0+128)
  5534  1BEF  3027               	movlw	39
  5535  1BF0  00B1               	movwf	(systemCheck@data^(0+128)+1)
  5536  1BF1  3190  20AB  319B   	fcall	_systemCheck
  5537                           
  5538                           ;main.c: 81:    calcRequiredPower(&data);
  5539  1BF4  3043               	movlw	67
  5540  1BF5  0140               	movlb	0	; select bank0
  5541  1BF6  00EA               	movwf	calcRequiredPower@data
  5542  1BF7  3027               	movlw	39
  5543  1BF8  00EB               	movwf	calcRequiredPower@data+1
  5544  1BF9  3180  20B5  319B   	fcall	_calcRequiredPower
  5545  1BFC                     l5557:	
  5546                           
  5547                           ;main.c: 85:    getAvgChannelCurrents(&data);
  5548  1BFC  3043               	movlw	67
  5549  1BFD  0140               	movlb	0	; select bank0
  5550  1BFE  00EE               	movwf	getAvgChannelCurrents@data
  5551  1BFF  3027               	movlw	39
  5552  1C00  00EF               	movwf	getAvgChannelCurrents@data+1
  5553  1C01  318A  2265  319B   	fcall	_getAvgChannelCurrents
  5554                           
  5555                           ;main.c: 86:   menu(&data);
  5556  1C04  3043               	movlw	67
  5557  1C05  0141               	movlb	1	; select bank1
  5558  1C06  00BC               	movwf	menu@data^(0+128)
  5559  1C07  3027               	movlw	39
  5560  1C08  00BD               	movwf	(menu@data^(0+128)+1)
  5561  1C09  31A6  266B  319B   	fcall	_menu
  5562                           
  5563                           ;main.c: 87:   _delay((unsigned long)((10)*(4000000/4000.0)));
  5564  1C0C  300D               	movlw	13
  5565  1C0D  0141               	movlb	1	; select bank1
  5566  1C0E  00D9               	movwf	??_main^(0+128)
  5567  1C0F  30FB               	movlw	251
  5568  1C10                     u6317:	
  5569  1C10  0B89               	decfsz	9,f
  5570  1C11  2C10               	goto	u6317
  5571  1C12  0BD9               	decfsz	??_main^(0+128),f
  5572  1C13  2C10               	goto	u6317
  5573  1C14  3200               	nop2
  5574  1C15  2BA8               	goto	l129
  5575  1C16                     __end_of_main:	
  5576                           
  5577                           	psect	text1
  5578  10AB                     __ptext1:	
  5579 ;; *************** function _systemCheck *****************
  5580 ;; Defined at:
  5581 ;;		line 120 in file "main.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;  data            2   16[BANK1 ] PTR struct .
  5584 ;;		 -> data(173), 
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;  str             3   20[BANK1 ] unsigned char [3]
  5587 ;;  n               1   23[BANK1 ] unsigned char 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5597 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5598 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5599 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5600 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5601 ;;Total ram usage:        8 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    8
  5604 ;; This function calls:
  5605 ;;		_OLED_Off
  5606 ;;		_OLED_clearDisplay
  5607 ;;		_OLED_print_xy
  5608 ;;		_OLED_returnHome
  5609 ;;		___flge
  5610 ;;		_convertAnalogValues
  5611 ;;		_error
  5612 ;;		_itoa
  5613 ;; This function is called by:
  5614 ;;		_main
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _systemCheck
  5620  10AB                     _systemCheck:	
  5621                           
  5622                           ;main.c: 120: void systemCheck(t_globalData *data);main.c: 121: {;main.c: 122:  uint8_t 
      +                          n;;main.c: 123:  char str[3];;main.c: 125:  if (data->current > 3.0) {
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5626  10AB  3040               	movlw	64
  5627  10AC  0140               	movlb	0	; select bank0
  5628  10AD  00A3               	movwf	___flge@ff1+3
  5629  10AE  3040               	movlw	64
  5630  10AF  00A2               	movwf	___flge@ff1+2
  5631  10B0  3000               	movlw	0
  5632  10B1  00A1               	movwf	___flge@ff1+1
  5633  10B2  3000               	movlw	0
  5634  10B3  00A0               	movwf	___flge@ff1
  5635  10B4  0141               	movlb	1	; select bank1
  5636  10B5  0830               	movf	systemCheck@data^(0+128),w
  5637  10B6  0086               	movwf	6
  5638  10B7  0831               	movf	(systemCheck@data+1)^(0+128),w
  5639  10B8  0087               	movwf	7
  5640  10B9  3158               	addfsr 1,24
  5641  10BA  3F40               	moviw [0]fsr1
  5642  10BB  0140               	movlb	0	; select bank0
  5643  10BC  00A4               	movwf	___flge@ff2
  5644  10BD  3F41               	moviw [1]fsr1
  5645  10BE  00A5               	movwf	___flge@ff2+1
  5646  10BF  3F42               	moviw [2]fsr1
  5647  10C0  00A6               	movwf	___flge@ff2+2
  5648  10C1  3F43               	moviw [3]fsr1
  5649  10C2  00A7               	movwf	___flge@ff2+3
  5650  10C3  3199  21F1  3190   	fcall	___flge
  5651  10C6  1803               	btfsc	3,0
  5652  10C7  28FC               	goto	l5451
  5653                           
  5654                           ;main.c: 126:   LATAbits.LATA0 = 0;
  5655  10C8  0140               	movlb	0	; select bank0
  5656  10C9  1018               	bcf	24,0	;volatile
  5657                           
  5658                           ;main.c: 127:   LATAbits.LATA1 = 0;
  5659  10CA  1098               	bcf	24,1	;volatile
  5660                           
  5661                           ;main.c: 128:   LATAbits.LATA2 = 0;
  5662  10CB  1118               	bcf	24,2	;volatile
  5663                           
  5664                           ;main.c: 129:   LATAbits.LATA3 = 0;
  5665  10CC  1198               	bcf	24,3	;volatile
  5666                           
  5667                           ;main.c: 130:   LATCbits.LATC3 = 0;
  5668  10CD  119A               	bcf	26,3	;volatile
  5669                           
  5670                           ;main.c: 131:   convertAnalogValues(data);
  5671  10CE  0141               	movlb	1	; select bank1
  5672  10CF  0831               	movf	(systemCheck@data+1)^(0+128),w
  5673  10D0  0140               	movlb	0	; select bank0
  5674  10D1  00E9               	movwf	convertAnalogValues@data+1
  5675  10D2  0141               	movlb	1	; select bank1
  5676  10D3  0830               	movf	systemCheck@data^(0+128),w
  5677  10D4  0140               	movlb	0	; select bank0
  5678  10D5  00E8               	movwf	convertAnalogValues@data
  5679  10D6  3196  2674  3190   	fcall	_convertAnalogValues
  5680                           
  5681                           ;main.c: 132:   if (data->current > 3.0) {
  5682  10D9  3040               	movlw	64
  5683  10DA  0140               	movlb	0	; select bank0
  5684  10DB  00A3               	movwf	___flge@ff1+3
  5685  10DC  3040               	movlw	64
  5686  10DD  00A2               	movwf	___flge@ff1+2
  5687  10DE  3000               	movlw	0
  5688  10DF  00A1               	movwf	___flge@ff1+1
  5689  10E0  3000               	movlw	0
  5690  10E1  00A0               	movwf	___flge@ff1
  5691  10E2  0141               	movlb	1	; select bank1
  5692  10E3  0830               	movf	systemCheck@data^(0+128),w
  5693  10E4  0086               	movwf	6
  5694  10E5  0831               	movf	(systemCheck@data+1)^(0+128),w
  5695  10E6  0087               	movwf	7
  5696  10E7  3158               	addfsr 1,24
  5697  10E8  3F40               	moviw [0]fsr1
  5698  10E9  0140               	movlb	0	; select bank0
  5699  10EA  00A4               	movwf	___flge@ff2
  5700  10EB  3F41               	moviw [1]fsr1
  5701  10EC  00A5               	movwf	___flge@ff2+1
  5702  10ED  3F42               	moviw [2]fsr1
  5703  10EE  00A6               	movwf	___flge@ff2+2
  5704  10EF  3F43               	moviw [3]fsr1
  5705  10F0  00A7               	movwf	___flge@ff2+3
  5706  10F1  3199  21F1  3190   	fcall	___flge
  5707  10F4  1803               	btfsc	3,0
  5708  10F5  28F8               	goto	l5449
  5709                           
  5710                           ;main.c: 134:    error(ERR_NUKED);
  5711  10F6  3004               	movlw	4
  5712  10F7  28F9               	goto	L1
  5713  10F8                     l5449:	
  5714                           ;main.c: 135:   } else {
  5715                           
  5716                           
  5717                           ;main.c: 136:    error(ERR_OVERCURRENT);
  5718  10F8  3005               	movlw	5
  5719  10F9                     L1:	
  5720  10F9  3187  27FF  3190   	fcall	_error
  5721  10FC                     l5451:	
  5722                           
  5723                           ;main.c: 140:  if ((data->voltage > 13.8) || (data->voltage <= 11.0)) {
  5724  10FC  3041               	movlw	65
  5725  10FD  0140               	movlb	0	; select bank0
  5726  10FE  00A3               	movwf	___flge@ff1+3
  5727  10FF  305C               	movlw	92
  5728  1100  00A2               	movwf	___flge@ff1+2
  5729  1101  30CC               	movlw	204
  5730  1102  00A1               	movwf	___flge@ff1+1
  5731  1103  30CD               	movlw	205
  5732  1104  00A0               	movwf	___flge@ff1
  5733  1105  0141               	movlb	1	; select bank1
  5734  1106  0830               	movf	systemCheck@data^(0+128),w
  5735  1107  0086               	movwf	6
  5736  1108  0831               	movf	(systemCheck@data+1)^(0+128),w
  5737  1109  0087               	movwf	7
  5738  110A  3154               	addfsr 1,20
  5739  110B  3F40               	moviw [0]fsr1
  5740  110C  0140               	movlb	0	; select bank0
  5741  110D  00A4               	movwf	___flge@ff2
  5742  110E  3F41               	moviw [1]fsr1
  5743  110F  00A5               	movwf	___flge@ff2+1
  5744  1110  3F42               	moviw [2]fsr1
  5745  1111  00A6               	movwf	___flge@ff2+2
  5746  1112  3F43               	moviw [3]fsr1
  5747  1113  00A7               	movwf	___flge@ff2+3
  5748  1114  3199  21F1  3190   	fcall	___flge
  5749  1117  1C03               	btfss	3,0
  5750  1118  2936               	goto	l5455
  5751  1119  3041               	movlw	65
  5752  111A  0140               	movlb	0	; select bank0
  5753  111B  00A3               	movwf	___flge@ff1+3
  5754  111C  3030               	movlw	48
  5755  111D  00A2               	movwf	___flge@ff1+2
  5756  111E  3000               	movlw	0
  5757  111F  00A1               	movwf	___flge@ff1+1
  5758  1120  3000               	movlw	0
  5759  1121  00A0               	movwf	___flge@ff1
  5760  1122  0141               	movlb	1	; select bank1
  5761  1123  0830               	movf	systemCheck@data^(0+128),w
  5762  1124  0086               	movwf	6
  5763  1125  0831               	movf	(systemCheck@data+1)^(0+128),w
  5764  1126  0087               	movwf	7
  5765  1127  3154               	addfsr 1,20
  5766  1128  3F40               	moviw [0]fsr1
  5767  1129  0140               	movlb	0	; select bank0
  5768  112A  00A4               	movwf	___flge@ff2
  5769  112B  3F41               	moviw [1]fsr1
  5770  112C  00A5               	movwf	___flge@ff2+1
  5771  112D  3F42               	moviw [2]fsr1
  5772  112E  00A6               	movwf	___flge@ff2+2
  5773  112F  3F43               	moviw [3]fsr1
  5774  1130  00A7               	movwf	___flge@ff2+3
  5775  1131  3199  21F1  3190   	fcall	___flge
  5776  1134  1C03               	btfss	3,0
  5777  1135  298C               	goto	l5491
  5778  1136                     l5455:	
  5779                           
  5780                           ;main.c: 141:   OLED_clearDisplay();
  5781  1136  31A1  2181  3190   	fcall	_OLED_clearDisplay
  5782                           
  5783                           ;main.c: 142:   OLED_returnHome();
  5784  1139  31A1  2185  3190   	fcall	_OLED_returnHome
  5785                           
  5786                           ;main.c: 143:   OLED_print_xy(0, 0, "TURNING OFF");
  5787  113C  0140               	movlb	0	; select bank0
  5788  113D  01A7               	clrf	OLED_print_xy@row
  5789  113E  304A               	movlw	low (STR_1| (0+32768))
  5790  113F  00A8               	movwf	OLED_print_xy@s
  5791  1140  30A9               	movlw	high (STR_1| (0+32768))
  5792  1141  00A9               	movwf	OLED_print_xy@s+1
  5793  1142  3000               	movlw	0
  5794  1143  31A3  2388  3190   	fcall	_OLED_print_xy
  5795                           
  5796                           ;main.c: 144:   LATAbits.LATA0 = 0;
  5797  1146  0140               	movlb	0	; select bank0
  5798  1147  1018               	bcf	24,0	;volatile
  5799                           
  5800                           ;main.c: 145:   LATAbits.LATA1 = 0;
  5801  1148  1098               	bcf	24,1	;volatile
  5802                           
  5803                           ;main.c: 146:   LATAbits.LATA2 = 0;
  5804  1149  1118               	bcf	24,2	;volatile
  5805                           
  5806                           ;main.c: 147:   LATAbits.LATA3 = 0;
  5807  114A  1198               	bcf	24,3	;volatile
  5808                           
  5809                           ;main.c: 148:   LATCbits.LATC3 = 0;
  5810  114B  119A               	bcf	26,3	;volatile
  5811                           
  5812                           ;main.c: 149:   INTCON = 0;
  5813  114C  018B               	clrf	11	;volatile
  5814                           
  5815                           ;main.c: 150:   for(n = 5; n > 0; n--) {
  5816  114D  3005               	movlw	5
  5817  114E  0141               	movlb	1	; select bank1
  5818  114F  00B2               	movwf	??_systemCheck^(0+128)
  5819  1150  0832               	movf	??_systemCheck^(0+128),w
  5820  1151  00B7               	movwf	systemCheck@n^(0+128)
  5821  1152                     l5477:	
  5822                           
  5823                           ;main.c: 151:    itoa(str, n, 1);
  5824  1152  30B4               	movlw	low systemCheck@str
  5825  1153  00A5               	movwf	itoa@str^(0+128)
  5826  1154  3000               	movlw	high systemCheck@str
  5827  1155  00A6               	movwf	(itoa@str+1)^(0+128)
  5828  1156  0837               	movf	systemCheck@n^(0+128),w
  5829  1157  00B2               	movwf	??_systemCheck^(0+128)
  5830  1158  0832               	movf	??_systemCheck^(0+128),w
  5831  1159  00A7               	movwf	itoa@value^(0+128)
  5832  115A  01A8               	clrf	itoa@width^(0+128)
  5833  115B  0AA8               	incf	itoa@width^(0+128),f
  5834  115C  31A7  272C  3190   	fcall	_itoa
  5835                           
  5836                           ;main.c: 152:    OLED_print_xy(0, 1, "IN ");
  5837  115F  0140               	movlb	0	; select bank0
  5838  1160  01A7               	clrf	OLED_print_xy@row
  5839  1161  0AA7               	incf	OLED_print_xy@row,f
  5840  1162  30EB               	movlw	low (STR_2| (0+32768))
  5841  1163  00A8               	movwf	OLED_print_xy@s
  5842  1164  30A9               	movlw	high (STR_2| (0+32768))
  5843  1165  00A9               	movwf	OLED_print_xy@s+1
  5844  1166  3000               	movlw	0
  5845  1167  31A3  2388  3190   	fcall	_OLED_print_xy
  5846                           
  5847                           ;main.c: 153:    OLED_print_xy(3, 1, str);
  5848  116A  0140               	movlb	0	; select bank0
  5849  116B  01A7               	clrf	OLED_print_xy@row
  5850  116C  0AA7               	incf	OLED_print_xy@row,f
  5851  116D  30B4               	movlw	low systemCheck@str
  5852  116E  00A8               	movwf	OLED_print_xy@s
  5853  116F  3000               	movlw	high systemCheck@str
  5854  1170  00A9               	movwf	OLED_print_xy@s+1
  5855  1171  3003               	movlw	3
  5856  1172  31A3  2388  3190   	fcall	_OLED_print_xy
  5857                           
  5858                           ;main.c: 154:    _delay((unsigned long)((1000)*(4000000/4000.0)));
  5859  1175  3006               	movlw	6
  5860  1176  0141               	movlb	1	; select bank1
  5861  1177  00B3               	movwf	(??_systemCheck^(0+128)+1)
  5862  1178  3013               	movlw	19
  5863  1179  00B2               	movwf	??_systemCheck^(0+128)
  5864  117A  30AD               	movlw	173
  5865  117B                     u6327:	
  5866  117B  0B89               	decfsz	9,f
  5867  117C  297B               	goto	u6327
  5868  117D  0BB2               	decfsz	??_systemCheck^(0+128),f
  5869  117E  297B               	goto	u6327
  5870  117F  0BB3               	decfsz	(??_systemCheck^(0+128)+1),f
  5871  1180  297B               	goto	u6327
  5872  1181  3200               	nop2
  5873                           
  5874                           ;main.c: 155:   }
  5875  1182  3001               	movlw	1
  5876  1183  0141               	movlb	1	; select bank1
  5877  1184  02B7               	subwf	systemCheck@n^(0+128),f
  5878  1185  0837               	movf	systemCheck@n^(0+128),w
  5879  1186  1D03               	btfss	3,2
  5880  1187  2952               	goto	l5477
  5881                           
  5882                           ;main.c: 156:   OLED_Off();
  5883  1188  31A1  21B6  3190   	fcall	_OLED_Off
  5884  118B                     l149:	
  5885                           ;main.c: 157:   while(1);
  5886                           
  5887  118B  298B               	goto	l149
  5888  118C                     l5491:	
  5889  118C  3041               	movlw	65
  5890  118D  0140               	movlb	0	; select bank0
  5891  118E  00A3               	movwf	___flge@ff1+3
  5892  118F  3050               	movlw	80
  5893  1190  00A2               	movwf	___flge@ff1+2
  5894  1191  3000               	movlw	0
  5895  1192  00A1               	movwf	___flge@ff1+1
  5896  1193  3000               	movlw	0
  5897  1194  00A0               	movwf	___flge@ff1
  5898  1195  0141               	movlb	1	; select bank1
  5899  1196  0830               	movf	systemCheck@data^(0+128),w
  5900  1197  0086               	movwf	6
  5901  1198  0831               	movf	(systemCheck@data+1)^(0+128),w
  5902  1199  0087               	movwf	7
  5903  119A  3154               	addfsr 1,20
  5904  119B  3F40               	moviw [0]fsr1
  5905  119C  0140               	movlb	0	; select bank0
  5906  119D  00A4               	movwf	___flge@ff2
  5907  119E  3F41               	moviw [1]fsr1
  5908  119F  00A5               	movwf	___flge@ff2+1
  5909  11A0  3F42               	moviw [2]fsr1
  5910  11A1  00A6               	movwf	___flge@ff2+2
  5911  11A2  3F43               	moviw [3]fsr1
  5912  11A3  00A7               	movwf	___flge@ff2+3
  5913  11A4  3199  21F1  3190   	fcall	___flge
  5914  11A7  1803               	btfsc	3,0
  5915  11A8  29CA               	goto	l5497
  5916  11A9  3041               	movlw	65
  5917  11AA  0140               	movlb	0	; select bank0
  5918  11AB  00A3               	movwf	___flge@ff1+3
  5919  11AC  305C               	movlw	92
  5920  11AD  00A2               	movwf	___flge@ff1+2
  5921  11AE  30CC               	movlw	204
  5922  11AF  00A1               	movwf	___flge@ff1+1
  5923  11B0  30CD               	movlw	205
  5924  11B1  00A0               	movwf	___flge@ff1
  5925  11B2  0141               	movlb	1	; select bank1
  5926  11B3  0830               	movf	systemCheck@data^(0+128),w
  5927  11B4  0086               	movwf	6
  5928  11B5  0831               	movf	(systemCheck@data+1)^(0+128),w
  5929  11B6  0087               	movwf	7
  5930  11B7  3154               	addfsr 1,20
  5931  11B8  3F40               	moviw [0]fsr1
  5932  11B9  0140               	movlb	0	; select bank0
  5933  11BA  00A4               	movwf	___flge@ff2
  5934  11BB  3F41               	moviw [1]fsr1
  5935  11BC  00A5               	movwf	___flge@ff2+1
  5936  11BD  3F42               	moviw [2]fsr1
  5937  11BE  00A6               	movwf	___flge@ff2+2
  5938  11BF  3F43               	moviw [3]fsr1
  5939  11C0  00A7               	movwf	___flge@ff2+3
  5940  11C1  3199  21F1  3190   	fcall	___flge
  5941  11C4  1C03               	btfss	3,0
  5942  11C5  29CA               	goto	l5497
  5943                           
  5944                           ;main.c: 160:   error(WARN_VOLT_HIGH);
  5945  11C6  3002               	movlw	2
  5946  11C7  3187  27FF         	fcall	_error
  5947                           
  5948                           ;main.c: 161:  } else if ((data->voltage > 11.0) && (data->voltage <= 11.4)) {
  5949  11C9  0008               	return
  5950  11CA                     l5497:	
  5951  11CA  3041               	movlw	65
  5952  11CB  0140               	movlb	0	; select bank0
  5953  11CC  00A3               	movwf	___flge@ff1+3
  5954  11CD  3030               	movlw	48
  5955  11CE  00A2               	movwf	___flge@ff1+2
  5956  11CF  3000               	movlw	0
  5957  11D0  00A1               	movwf	___flge@ff1+1
  5958  11D1  3000               	movlw	0
  5959  11D2  00A0               	movwf	___flge@ff1
  5960  11D3  0141               	movlb	1	; select bank1
  5961  11D4  0830               	movf	systemCheck@data^(0+128),w
  5962  11D5  0086               	movwf	6
  5963  11D6  0831               	movf	(systemCheck@data+1)^(0+128),w
  5964  11D7  0087               	movwf	7
  5965  11D8  3154               	addfsr 1,20
  5966  11D9  3F40               	moviw [0]fsr1
  5967  11DA  0140               	movlb	0	; select bank0
  5968  11DB  00A4               	movwf	___flge@ff2
  5969  11DC  3F41               	moviw [1]fsr1
  5970  11DD  00A5               	movwf	___flge@ff2+1
  5971  11DE  3F42               	moviw [2]fsr1
  5972  11DF  00A6               	movwf	___flge@ff2+2
  5973  11E0  3F43               	moviw [3]fsr1
  5974  11E1  00A7               	movwf	___flge@ff2+3
  5975  11E2  3199  21F1  3190   	fcall	___flge
  5976  11E5  1803               	btfsc	3,0
  5977  11E6  0008               	return
  5978  11E7  3041               	movlw	65
  5979  11E8  0140               	movlb	0	; select bank0
  5980  11E9  00A3               	movwf	___flge@ff1+3
  5981  11EA  3036               	movlw	54
  5982  11EB  00A2               	movwf	___flge@ff1+2
  5983  11EC  3066               	movlw	102
  5984  11ED  00A1               	movwf	___flge@ff1+1
  5985  11EE  3066               	movlw	102
  5986  11EF  00A0               	movwf	___flge@ff1
  5987  11F0  0141               	movlb	1	; select bank1
  5988  11F1  0830               	movf	systemCheck@data^(0+128),w
  5989  11F2  0086               	movwf	6
  5990  11F3  0831               	movf	(systemCheck@data+1)^(0+128),w
  5991  11F4  0087               	movwf	7
  5992  11F5  3154               	addfsr 1,20
  5993  11F6  3F40               	moviw [0]fsr1
  5994  11F7  0140               	movlb	0	; select bank0
  5995  11F8  00A4               	movwf	___flge@ff2
  5996  11F9  3F41               	moviw [1]fsr1
  5997  11FA  00A5               	movwf	___flge@ff2+1
  5998  11FB  3F42               	moviw [2]fsr1
  5999  11FC  00A6               	movwf	___flge@ff2+2
  6000  11FD  3F43               	moviw [3]fsr1
  6001  11FE  00A7               	movwf	___flge@ff2+3
  6002  11FF  3199  21F1  3190   	fcall	___flge
  6003  1202  1C03               	btfss	3,0
  6004  1203  0008               	return
  6005                           
  6006                           ;main.c: 162:   error(WARN_VOLT_LOW);
  6007  1204  3003               	movlw	3
  6008  1205  3187  27FF         	fcall	_error
  6009  1207  0008               	return
  6010  1208                     __end_of_systemCheck:	
  6011                           
  6012                           	psect	text2
  6013  1674                     __ptext2:	
  6014 ;; *************** function _convertAnalogValues *****************
  6015 ;; Defined at:
  6016 ;;		line 344 in file "main.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  data            2   72[BANK0 ] PTR struct .
  6019 ;;		 -> data(173), 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  adc             2   78[BANK0 ] unsigned short 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  1    wreg      void 
  6024 ;; Registers used:
  6025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6031 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6032 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6034 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6035 ;;Total ram usage:        8 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:    5
  6038 ;; This function calls:
  6039 ;;		___fladd
  6040 ;;		___fldiv
  6041 ;;		___flmul
  6042 ;;		___xxtofl
  6043 ;;		_adcGetConversion
  6044 ;;		_ema
  6045 ;; This function is called by:
  6046 ;;		_main
  6047 ;;		_systemCheck
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           
  6052                           ;psect for function _convertAnalogValues
  6053  1674                     _convertAnalogValues:	
  6054                           
  6055                           ;main.c: 344: void convertAnalogValues(t_globalData *data);main.c: 345: {;main.c: 346:  
      +                          static uint16_t avgT, avgV, avgI;;main.c: 347:  uint16_t adc;;main.c: 349:  adc = adcGet
      +                          Conversion(0b000110);
  6056                           
  6057                           ;incstack = 0
  6058                           ; Regs used in _convertAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6059  1674  3006               	movlw	6
  6060  1675  3188  2001  3196   	fcall	_adcGetConversion
  6061  1678  0140               	movlb	0	; select bank0
  6062  1679  0821               	movf	?_adcGetConversion+1,w
  6063  167A  00EF               	movwf	convertAnalogValues@adc+1
  6064  167B  0820               	movf	?_adcGetConversion,w
  6065  167C  00EE               	movwf	convertAnalogValues@adc
  6066                           
  6067                           ;main.c: 350:  avgT = ema(adc, avgT, ( (uint32_t)(0.35 * 65535) ));
  6068  167D  086F               	movf	convertAnalogValues@adc+1,w
  6069  167E  00AD               	movwf	ema@in+1
  6070  167F  086E               	movf	convertAnalogValues@adc,w
  6071  1680  00AC               	movwf	ema@in
  6072  1681  0142               	movlb	2	; select bank2
  6073  1682  0831               	movf	(convertAnalogValues@avgT+1)^(0+256),w
  6074  1683  0140               	movlb	0	; select bank0
  6075  1684  00AF               	movwf	ema@average+1
  6076  1685  0142               	movlb	2	; select bank2
  6077  1686  0830               	movf	convertAnalogValues@avgT^(0+256),w
  6078  1687  0140               	movlb	0	; select bank0
  6079  1688  00AE               	movwf	ema@average
  6080  1689  3000               	movlw	0
  6081  168A  00B3               	movwf	ema@alpha+3
  6082  168B  3000               	movlw	0
  6083  168C  00B2               	movwf	ema@alpha+2
  6084  168D  3059               	movlw	89
  6085  168E  00B1               	movwf	ema@alpha+1
  6086  168F  3099               	movlw	153
  6087  1690  00B0               	movwf	ema@alpha
  6088  1691  31A6  26C3  3196   	fcall	_ema
  6089  1694  0140               	movlb	0	; select bank0
  6090  1695  082D               	movf	?_ema+1,w
  6091  1696  0142               	movlb	2	; select bank2
  6092  1697  00B1               	movwf	(convertAnalogValues@avgT+1)^(0+256)
  6093  1698  0140               	movlb	0	; select bank0
  6094  1699  082C               	movf	?_ema,w
  6095  169A  0142               	movlb	2	; select bank2
  6096  169B  00B0               	movwf	convertAnalogValues@avgT^(0+256)
  6097                           
  6098                           ;main.c: 351:  adc = adcGetConversion(0b010000);
  6099  169C  3010               	movlw	16
  6100  169D  3188  2001  3196   	fcall	_adcGetConversion
  6101  16A0  0140               	movlb	0	; select bank0
  6102  16A1  0821               	movf	?_adcGetConversion+1,w
  6103  16A2  00EF               	movwf	convertAnalogValues@adc+1
  6104  16A3  0820               	movf	?_adcGetConversion,w
  6105  16A4  00EE               	movwf	convertAnalogValues@adc
  6106                           
  6107                           ;main.c: 352:  avgV = ema(adc, avgV, ( (uint32_t)(0.35 * 65535) ));
  6108  16A5  086F               	movf	convertAnalogValues@adc+1,w
  6109  16A6  00AD               	movwf	ema@in+1
  6110  16A7  086E               	movf	convertAnalogValues@adc,w
  6111  16A8  00AC               	movwf	ema@in
  6112  16A9  0142               	movlb	2	; select bank2
  6113  16AA  082F               	movf	(convertAnalogValues@avgV+1)^(0+256),w
  6114  16AB  0140               	movlb	0	; select bank0
  6115  16AC  00AF               	movwf	ema@average+1
  6116  16AD  0142               	movlb	2	; select bank2
  6117  16AE  082E               	movf	convertAnalogValues@avgV^(0+256),w
  6118  16AF  0140               	movlb	0	; select bank0
  6119  16B0  00AE               	movwf	ema@average
  6120  16B1  3000               	movlw	0
  6121  16B2  00B3               	movwf	ema@alpha+3
  6122  16B3  3000               	movlw	0
  6123  16B4  00B2               	movwf	ema@alpha+2
  6124  16B5  3059               	movlw	89
  6125  16B6  00B1               	movwf	ema@alpha+1
  6126  16B7  3099               	movlw	153
  6127  16B8  00B0               	movwf	ema@alpha
  6128  16B9  31A6  26C3  3196   	fcall	_ema
  6129  16BC  0140               	movlb	0	; select bank0
  6130  16BD  082D               	movf	?_ema+1,w
  6131  16BE  0142               	movlb	2	; select bank2
  6132  16BF  00AF               	movwf	(convertAnalogValues@avgV+1)^(0+256)
  6133  16C0  0140               	movlb	0	; select bank0
  6134  16C1  082C               	movf	?_ema,w
  6135  16C2  0142               	movlb	2	; select bank2
  6136  16C3  00AE               	movwf	convertAnalogValues@avgV^(0+256)
  6137                           
  6138                           ;main.c: 353:  adc = adcGetConversion(0b010001);
  6139  16C4  3011               	movlw	17
  6140  16C5  3188  2001  3196   	fcall	_adcGetConversion
  6141  16C8  0140               	movlb	0	; select bank0
  6142  16C9  0821               	movf	?_adcGetConversion+1,w
  6143  16CA  00EF               	movwf	convertAnalogValues@adc+1
  6144  16CB  0820               	movf	?_adcGetConversion,w
  6145  16CC  00EE               	movwf	convertAnalogValues@adc
  6146                           
  6147                           ;main.c: 354:  avgI = ema(adc, avgI, ( (uint32_t)(0.35 * 65535) ));
  6148  16CD  086F               	movf	convertAnalogValues@adc+1,w
  6149  16CE  00AD               	movwf	ema@in+1
  6150  16CF  086E               	movf	convertAnalogValues@adc,w
  6151  16D0  00AC               	movwf	ema@in
  6152  16D1  0142               	movlb	2	; select bank2
  6153  16D2  082D               	movf	(convertAnalogValues@avgI+1)^(0+256),w
  6154  16D3  0140               	movlb	0	; select bank0
  6155  16D4  00AF               	movwf	ema@average+1
  6156  16D5  0142               	movlb	2	; select bank2
  6157  16D6  082C               	movf	convertAnalogValues@avgI^(0+256),w
  6158  16D7  0140               	movlb	0	; select bank0
  6159  16D8  00AE               	movwf	ema@average
  6160  16D9  3000               	movlw	0
  6161  16DA  00B3               	movwf	ema@alpha+3
  6162  16DB  3000               	movlw	0
  6163  16DC  00B2               	movwf	ema@alpha+2
  6164  16DD  3059               	movlw	89
  6165  16DE  00B1               	movwf	ema@alpha+1
  6166  16DF  3099               	movlw	153
  6167  16E0  00B0               	movwf	ema@alpha
  6168  16E1  31A6  26C3  3196   	fcall	_ema
  6169  16E4  0140               	movlb	0	; select bank0
  6170  16E5  082D               	movf	?_ema+1,w
  6171  16E6  0142               	movlb	2	; select bank2
  6172  16E7  00AD               	movwf	(convertAnalogValues@avgI+1)^(0+256)
  6173  16E8  0140               	movlb	0	; select bank0
  6174  16E9  082C               	movf	?_ema,w
  6175  16EA  0142               	movlb	2	; select bank2
  6176  16EB  00AC               	movwf	convertAnalogValues@avgI^(0+256)
  6177                           
  6178                           ;main.c: 355:  data->tempAux = (avgT * 0.1191) - 34.512;
  6179  16EC  30C2               	movlw	194
  6180  16ED  0140               	movlb	0	; select bank0
  6181  16EE  00D1               	movwf	___fladd@b+3
  6182  16EF  300A               	movlw	10
  6183  16F0  00D0               	movwf	___fladd@b+2
  6184  16F1  300C               	movlw	12
  6185  16F2  00CF               	movwf	___fladd@b+1
  6186  16F3  304A               	movlw	74
  6187  16F4  00CE               	movwf	___fladd@b
  6188  16F5  303D               	movlw	61
  6189  16F6  00B7               	movwf	___flmul@b+3
  6190  16F7  30F3               	movlw	243
  6191  16F8  00B6               	movwf	___flmul@b+2
  6192  16F9  30EA               	movlw	234
  6193  16FA  00B5               	movwf	___flmul@b+1
  6194  16FB  30B3               	movlw	179
  6195  16FC  00B4               	movwf	___flmul@b
  6196  16FD  0142               	movlb	2	; select bank2
  6197  16FE  0830               	movf	convertAnalogValues@avgT^(0+256),w
  6198  16FF  0140               	movlb	0	; select bank0
  6199  1700  00A6               	movwf	___xxtofl@val
  6200  1701  0142               	movlb	2	; select bank2
  6201  1702  0831               	movf	(convertAnalogValues@avgT+1)^(0+256),w
  6202  1703  0140               	movlb	0	; select bank0
  6203  1704  00A7               	movwf	___xxtofl@val+1
  6204  1705  01A8               	clrf	___xxtofl@val+2
  6205  1706  01A9               	clrf	___xxtofl@val+3
  6206  1707  3000               	movlw	0
  6207  1708  3190  2015  3196   	fcall	___xxtofl
  6208  170B  0140               	movlb	0	; select bank0
  6209  170C  0829               	movf	?___xxtofl+3,w
  6210  170D  00BB               	movwf	___flmul@a+3
  6211  170E  0828               	movf	?___xxtofl+2,w
  6212  170F  00BA               	movwf	___flmul@a+2
  6213  1710  0827               	movf	?___xxtofl+1,w
  6214  1711  00B9               	movwf	___flmul@a+1
  6215  1712  0826               	movf	?___xxtofl,w
  6216  1713  00B8               	movwf	___flmul@a
  6217  1714  3185  2502  3196   	fcall	___flmul
  6218  1717  0140               	movlb	0	; select bank0
  6219  1718  0837               	movf	?___flmul+3,w
  6220  1719  00D5               	movwf	___fladd@a+3
  6221  171A  0836               	movf	?___flmul+2,w
  6222  171B  00D4               	movwf	___fladd@a+2
  6223  171C  0835               	movf	?___flmul+1,w
  6224  171D  00D3               	movwf	___fladd@a+1
  6225  171E  0834               	movf	?___flmul,w
  6226  171F  00D2               	movwf	___fladd@a
  6227  1720  318C  241B  3196   	fcall	___fladd
  6228  1723  0140               	movlb	0	; select bank0
  6229  1724  0868               	movf	convertAnalogValues@data,w
  6230  1725  0086               	movwf	6
  6231  1726  0869               	movf	convertAnalogValues@data+1,w
  6232  1727  0087               	movwf	7
  6233  1728  3150               	addfsr 1,16
  6234  1729  084E               	movf	?___fladd,w
  6235  172A  3FC0               	movwi [0]fsr1
  6236  172B  084F               	movf	?___fladd+1,w
  6237  172C  3FC1               	movwi [1]fsr1
  6238  172D  0850               	movf	?___fladd+2,w
  6239  172E  3FC2               	movwi [2]fsr1
  6240  172F  0851               	movf	?___fladd+3,w
  6241  1730  3FC3               	movwi [3]fsr1
  6242                           
  6243                           ;main.c: 356:  data->voltage = (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
  6244  1731  3040               	movlw	64
  6245  1732  00B7               	movwf	___flmul@b+3
  6246  1733  30A0               	movlw	160
  6247  1734  00B6               	movwf	___flmul@b+2
  6248  1735  3000               	movlw	0
  6249  1736  00B5               	movwf	___flmul@b+1
  6250  1737  3000               	movlw	0
  6251  1738  00B4               	movwf	___flmul@b
  6252  1739  0142               	movlb	2	; select bank2
  6253  173A  082E               	movf	convertAnalogValues@avgV^(0+256),w
  6254  173B  0140               	movlb	0	; select bank0
  6255  173C  00A6               	movwf	___xxtofl@val
  6256  173D  0142               	movlb	2	; select bank2
  6257  173E  082F               	movf	(convertAnalogValues@avgV+1)^(0+256),w
  6258  173F  0140               	movlb	0	; select bank0
  6259  1740  00A7               	movwf	___xxtofl@val+1
  6260  1741  01A8               	clrf	___xxtofl@val+2
  6261  1742  01A9               	clrf	___xxtofl@val+3
  6262  1743  3000               	movlw	0
  6263  1744  3190  2015  3196   	fcall	___xxtofl
  6264  1747  0140               	movlb	0	; select bank0
  6265  1748  0829               	movf	?___xxtofl+3,w
  6266  1749  00BB               	movwf	___flmul@a+3
  6267  174A  0828               	movf	?___xxtofl+2,w
  6268  174B  00BA               	movwf	___flmul@a+2
  6269  174C  0827               	movf	?___xxtofl+1,w
  6270  174D  00B9               	movwf	___flmul@a+1
  6271  174E  0826               	movf	?___xxtofl,w
  6272  174F  00B8               	movwf	___flmul@a
  6273  1750  3185  2502  3196   	fcall	___flmul
  6274  1753  0140               	movlb	0	; select bank0
  6275  1754  0837               	movf	?___flmul+3,w
  6276  1755  00ED               	movwf	_convertAnalogValues$2144+3
  6277  1756  0836               	movf	?___flmul+2,w
  6278  1757  00EC               	movwf	_convertAnalogValues$2144+2
  6279  1758  0835               	movf	?___flmul+1,w
  6280  1759  00EB               	movwf	_convertAnalogValues$2144+1
  6281  175A  0834               	movf	?___flmul,w
  6282  175B  00EA               	movwf	_convertAnalogValues$2144
  6283                           
  6284                           ;main.c: 356:  data->voltage = (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
  6285  175C  3047               	movlw	71
  6286  175D  00D1               	movwf	___fldiv@a+3
  6287  175E  303B               	movlw	59
  6288  175F  00D0               	movwf	___fldiv@a+2
  6289  1760  30D1               	movlw	209
  6290  1761  00CF               	movwf	___fldiv@a+1
  6291  1762  3000               	movlw	0
  6292  1763  00CE               	movwf	___fldiv@a
  6293  1764  3043               	movlw	67
  6294  1765  00B7               	movwf	___flmul@b+3
  6295  1766  3045               	movlw	69
  6296  1767  00B6               	movwf	___flmul@b+2
  6297  1768  3000               	movlw	0
  6298  1769  00B5               	movwf	___flmul@b+1
  6299  176A  3000               	movlw	0
  6300  176B  00B4               	movwf	___flmul@b
  6301  176C  086D               	movf	_convertAnalogValues$2144+3,w
  6302  176D  00BB               	movwf	___flmul@a+3
  6303  176E  086C               	movf	_convertAnalogValues$2144+2,w
  6304  176F  00BA               	movwf	___flmul@a+2
  6305  1770  086B               	movf	_convertAnalogValues$2144+1,w
  6306  1771  00B9               	movwf	___flmul@a+1
  6307  1772  086A               	movf	_convertAnalogValues$2144,w
  6308  1773  00B8               	movwf	___flmul@a
  6309  1774  3185  2502  3196   	fcall	___flmul
  6310  1777  0140               	movlb	0	; select bank0
  6311  1778  0837               	movf	?___flmul+3,w
  6312  1779  00D5               	movwf	___fldiv@b+3
  6313  177A  0836               	movf	?___flmul+2,w
  6314  177B  00D4               	movwf	___fldiv@b+2
  6315  177C  0835               	movf	?___flmul+1,w
  6316  177D  00D3               	movwf	___fldiv@b+1
  6317  177E  0834               	movf	?___flmul,w
  6318  177F  00D2               	movwf	___fldiv@b
  6319  1780  3193  2374  3196   	fcall	___fldiv
  6320  1783  0140               	movlb	0	; select bank0
  6321  1784  0868               	movf	convertAnalogValues@data,w
  6322  1785  0086               	movwf	6
  6323  1786  0869               	movf	convertAnalogValues@data+1,w
  6324  1787  0087               	movwf	7
  6325  1788  3154               	addfsr 1,20
  6326  1789  084E               	movf	?___fldiv,w
  6327  178A  3FC0               	movwi [0]fsr1
  6328  178B  084F               	movf	?___fldiv+1,w
  6329  178C  3FC1               	movwi [1]fsr1
  6330  178D  0850               	movf	?___fldiv+2,w
  6331  178E  3FC2               	movwi [2]fsr1
  6332  178F  0851               	movf	?___fldiv+3,w
  6333  1790  3FC3               	movwi [3]fsr1
  6334                           
  6335                           ;main.c: 357:  data->current = (avgI * 5.0) / (1023.0 * 0.05 * 50.0);
  6336  1791  3045               	movlw	69
  6337  1792  00D1               	movwf	___fldiv@a+3
  6338  1793  301F               	movlw	31
  6339  1794  00D0               	movwf	___fldiv@a+2
  6340  1795  30D8               	movlw	216
  6341  1796  00CF               	movwf	___fldiv@a+1
  6342  1797  3000               	movlw	0
  6343  1798  00CE               	movwf	___fldiv@a
  6344  1799  3040               	movlw	64
  6345  179A  00B7               	movwf	___flmul@b+3
  6346  179B  30A0               	movlw	160
  6347  179C  00B6               	movwf	___flmul@b+2
  6348  179D  3000               	movlw	0
  6349  179E  00B5               	movwf	___flmul@b+1
  6350  179F  3000               	movlw	0
  6351  17A0  00B4               	movwf	___flmul@b
  6352  17A1  0142               	movlb	2	; select bank2
  6353  17A2  082C               	movf	convertAnalogValues@avgI^(0+256),w
  6354  17A3  0140               	movlb	0	; select bank0
  6355  17A4  00A6               	movwf	___xxtofl@val
  6356  17A5  0142               	movlb	2	; select bank2
  6357  17A6  082D               	movf	(convertAnalogValues@avgI+1)^(0+256),w
  6358  17A7  0140               	movlb	0	; select bank0
  6359  17A8  00A7               	movwf	___xxtofl@val+1
  6360  17A9  01A8               	clrf	___xxtofl@val+2
  6361  17AA  01A9               	clrf	___xxtofl@val+3
  6362  17AB  3000               	movlw	0
  6363  17AC  3190  2015  3196   	fcall	___xxtofl
  6364  17AF  0140               	movlb	0	; select bank0
  6365  17B0  0829               	movf	?___xxtofl+3,w
  6366  17B1  00BB               	movwf	___flmul@a+3
  6367  17B2  0828               	movf	?___xxtofl+2,w
  6368  17B3  00BA               	movwf	___flmul@a+2
  6369  17B4  0827               	movf	?___xxtofl+1,w
  6370  17B5  00B9               	movwf	___flmul@a+1
  6371  17B6  0826               	movf	?___xxtofl,w
  6372  17B7  00B8               	movwf	___flmul@a
  6373  17B8  3185  2502  3196   	fcall	___flmul
  6374  17BB  0140               	movlb	0	; select bank0
  6375  17BC  0837               	movf	?___flmul+3,w
  6376  17BD  00D5               	movwf	___fldiv@b+3
  6377  17BE  0836               	movf	?___flmul+2,w
  6378  17BF  00D4               	movwf	___fldiv@b+2
  6379  17C0  0835               	movf	?___flmul+1,w
  6380  17C1  00D3               	movwf	___fldiv@b+1
  6381  17C2  0834               	movf	?___flmul,w
  6382  17C3  00D2               	movwf	___fldiv@b
  6383  17C4  3193  2374  3196   	fcall	___fldiv
  6384  17C7  0140               	movlb	0	; select bank0
  6385  17C8  0868               	movf	convertAnalogValues@data,w
  6386  17C9  0086               	movwf	6
  6387  17CA  0869               	movf	convertAnalogValues@data+1,w
  6388  17CB  0087               	movwf	7
  6389  17CC  3158               	addfsr 1,24
  6390  17CD  084E               	movf	?___fldiv,w
  6391  17CE  3FC0               	movwi [0]fsr1
  6392  17CF  084F               	movf	?___fldiv+1,w
  6393  17D0  3FC1               	movwi [1]fsr1
  6394  17D1  0850               	movf	?___fldiv+2,w
  6395  17D2  3FC2               	movwi [2]fsr1
  6396  17D3  0851               	movf	?___fldiv+3,w
  6397  17D4  3FC3               	movwi [3]fsr1
  6398                           
  6399                           ;main.c: 358:  data->power = data->voltage * data->current;
  6400  17D5  0868               	movf	convertAnalogValues@data,w
  6401  17D6  0086               	movwf	6
  6402  17D7  0869               	movf	convertAnalogValues@data+1,w
  6403  17D8  0087               	movwf	7
  6404  17D9  3158               	addfsr 1,24
  6405  17DA  3F40               	moviw [0]fsr1
  6406  17DB  00B4               	movwf	___flmul@b
  6407  17DC  3F41               	moviw [1]fsr1
  6408  17DD  00B5               	movwf	___flmul@b+1
  6409  17DE  3F42               	moviw [2]fsr1
  6410  17DF  00B6               	movwf	___flmul@b+2
  6411  17E0  3F43               	moviw [3]fsr1
  6412  17E1  00B7               	movwf	___flmul@b+3
  6413  17E2  0868               	movf	convertAnalogValues@data,w
  6414  17E3  0086               	movwf	6
  6415  17E4  0869               	movf	convertAnalogValues@data+1,w
  6416  17E5  0087               	movwf	7
  6417  17E6  3154               	addfsr 1,20
  6418  17E7  3F40               	moviw [0]fsr1
  6419  17E8  00B8               	movwf	___flmul@a
  6420  17E9  3F41               	moviw [1]fsr1
  6421  17EA  00B9               	movwf	___flmul@a+1
  6422  17EB  3F42               	moviw [2]fsr1
  6423  17EC  00BA               	movwf	___flmul@a+2
  6424  17ED  3F43               	moviw [3]fsr1
  6425  17EE  00BB               	movwf	___flmul@a+3
  6426  17EF  3185  2502         	fcall	___flmul
  6427  17F1  0140               	movlb	0	; select bank0
  6428  17F2  0868               	movf	convertAnalogValues@data,w
  6429  17F3  0086               	movwf	6
  6430  17F4  0869               	movf	convertAnalogValues@data+1,w
  6431  17F5  0087               	movwf	7
  6432  17F6  315C               	addfsr 1,28
  6433  17F7  0834               	movf	?___flmul,w
  6434  17F8  3FC0               	movwi [0]fsr1
  6435  17F9  0835               	movf	?___flmul+1,w
  6436  17FA  3FC1               	movwi [1]fsr1
  6437  17FB  0836               	movf	?___flmul+2,w
  6438  17FC  3FC2               	movwi [2]fsr1
  6439  17FD  0837               	movf	?___flmul+3,w
  6440  17FE  3FC3               	movwi [3]fsr1
  6441  17FF  0008               	return
  6442  1800                     __end_of_convertAnalogValues:	
  6443                           
  6444                           	psect	text3
  6445  21B6                     __ptext3:	
  6446 ;; *************** function _OLED_Off *****************
  6447 ;; Defined at:
  6448 ;;		line 12 in file "oled.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;		None
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;		None
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  1    wreg      void 
  6455 ;; Registers used:
  6456 ;;		wreg, status,2, status,0, pclath, cstack
  6457 ;; Tracked objects:
  6458 ;;		On entry : 0/0
  6459 ;;		On exit  : 0/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6466 ;;Total ram usage:        0 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:    7
  6469 ;; This function calls:
  6470 ;;		_OLED_command
  6471 ;; This function is called by:
  6472 ;;		_systemCheck
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476                           
  6477                           ;psect for function _OLED_Off
  6478  21B6                     _OLED_Off:	
  6479                           
  6480                           ;oled.c: 14:  OLED_command(0x08);
  6481                           
  6482                           ;incstack = 0
  6483                           ; Regs used in _OLED_Off: [wreg+status,2+status,0+pclath+cstack]
  6484  21B6  3008               	movlw	8
  6485  21B7  31A1  21A2  31A1   	fcall	_OLED_command
  6486                           
  6487                           ;oled.c: 15:  OLED_command(0x13);
  6488  21BA  3013               	movlw	19
  6489  21BB  31A1  21A2         	fcall	_OLED_command
  6490                           
  6491                           ;oled.c: 16:  LATBbits.LATB5 = 1;
  6492  21BD  0140               	movlb	0	; select bank0
  6493  21BE  1699               	bsf	25,5	;volatile
  6494  21BF  0008               	return
  6495  21C0                     __end_of_OLED_Off:	
  6496                           
  6497                           	psect	text4
  6498  266B                     __ptext4:	
  6499 ;; *************** function _menu *****************
  6500 ;; Defined at:
  6501 ;;		line 93 in file "menuhelper.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  data            2   28[BANK1 ] PTR struct .
  6504 ;;		 -> data(173), 
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;  func            2   36[BANK1 ] PTR FTN(PTR struct .,)un
  6507 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  6508 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  6509 ;;		 -> statusView(1), NULL(0), 
  6510 ;;  nextState       1   38[BANK1 ] char 
  6511 ;;  pb              1   35[BANK1 ] enum E7943
  6512 ;;  page            1   34[BANK1 ] char 
  6513 ;; Return value:  Size  Location     Type
  6514 ;;                  1    wreg      void 
  6515 ;; Registers used:
  6516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6522 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6523 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6524 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6525 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6526 ;;Total ram usage:       11 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:   10
  6529 ;; This function calls:
  6530 ;;		_channelSetup
  6531 ;;		_channelView
  6532 ;;		_getNextState
  6533 ;;		_getPB
  6534 ;;		_getStateFunc
  6535 ;;		_menuError
  6536 ;;		_setDPOffset
  6537 ;;		_setFudgeFactor
  6538 ;;		_setLensDia
  6539 ;;		_setOutputPower
  6540 ;;		_setSkyTemp
  6541 ;;		_setup
  6542 ;;		_statusView
  6543 ;; This function is called by:
  6544 ;;		_main
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           
  6549                           ;psect for function _menu
  6550  266B                     _menu:	
  6551                           
  6552                           ;menuhelper.c: 93: void menu(t_globalData *data);menuhelper.c: 94: {;menuhelper.c: 95:  
      +                          static uint8_t state = ST_STATUS_VIEW;;menuhelper.c: 96:  int8_t page, nextState;;menuhe
      +                          lper.c: 97:  enum e_buttonPress pb;;menuhelper.c: 98:  t_stateFuncPtr func;;menuhelper.c
      +                          : 101:  func = getStateFunc(state);
  6553                           
  6554                           ;incstack = 0
  6555                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6556  266B  0141               	movlb	1	; select bank1
  6557  266C  085F               	movf	menu@state^(0+128),w
  6558  266D  31A4  2463  31A6   	fcall	_getStateFunc
  6559  2670  0140               	movlb	0	; select bank0
  6560  2671  0827               	movf	?_getStateFunc+1,w
  6561  2672  0141               	movlb	1	; select bank1
  6562  2673  00C5               	movwf	(menu@func+1)^(0+128)
  6563  2674  0140               	movlb	0	; select bank0
  6564  2675  0826               	movf	?_getStateFunc,w
  6565  2676  0141               	movlb	1	; select bank1
  6566  2677  00C4               	movwf	menu@func^(0+128)
  6567                           
  6568                           ;menuhelper.c: 102:  if (func)
  6569  2678  0844               	movf	menu@func^(0+128),w
  6570  2679  0445               	iorwf	(menu@func+1)^(0+128),w
  6571  267A  1903               	btfsc	3,2
  6572  267B  2E8A               	goto	l5509
  6573                           
  6574                           ;menuhelper.c: 103:   page = (*func)(data);
  6575  267C  083D               	movf	(menu@data+1)^(0+128),w
  6576  267D  00B2               	movwf	(setFudgeFactor@data+1)^(0+128)
  6577  267E  083C               	movf	menu@data^(0+128),w
  6578  267F  00B1               	movwf	setFudgeFactor@data^(0+128)
  6579  2680  0845               	movf	(menu@func+1)^(0+128),w
  6580  2681  008A               	movwf	10
  6581  2682  0844               	movf	menu@func^(0+128),w
  6582  2683  000A               	callw
  6583  2684  31A6               	pagesel	$
  6584  2685  0141               	movlb	1	; select bank1
  6585  2686  00BE               	movwf	??_menu^(0+128)
  6586  2687  083E               	movf	??_menu^(0+128),w
  6587  2688  00C2               	movwf	menu@page^(0+128)
  6588  2689  2E8D               	goto	l5511
  6589  268A                     l5509:	
  6590                           
  6591                           ;menuhelper.c: 105:   menuError();
  6592  268A  31A2  2215  31A6   	fcall	_menuError
  6593  268D                     l5511:	
  6594                           
  6595                           ;menuhelper.c: 107:  g_updateScreen = 0;
  6596  268D  0141               	movlb	1	; select bank1
  6597  268E  01EF               	clrf	_g_updateScreen^(0+128)
  6598                           
  6599                           ;menuhelper.c: 108:  pb = getPB();
  6600  268F  31A1  21E1  31A6   	fcall	_getPB
  6601  2692  0141               	movlb	1	; select bank1
  6602  2693  00BE               	movwf	??_menu^(0+128)
  6603  2694  083E               	movf	??_menu^(0+128),w
  6604  2695  00C3               	movwf	menu@pb^(0+128)
  6605                           
  6606                           ;menuhelper.c: 110:  nextState = getNextState(state, page, pb);
  6607  2696  0842               	movf	menu@page^(0+128),w
  6608  2697  00BE               	movwf	??_menu^(0+128)
  6609  2698  083E               	movf	??_menu^(0+128),w
  6610  2699  0140               	movlb	0	; select bank0
  6611  269A  00A6               	movwf	getNextState@page
  6612  269B  0141               	movlb	1	; select bank1
  6613  269C  0843               	movf	menu@pb^(0+128),w
  6614  269D  00BF               	movwf	(??_menu+1)^(0+128)
  6615  269E  083F               	movf	(??_menu+1)^(0+128),w
  6616  269F  0140               	movlb	0	; select bank0
  6617  26A0  00A7               	movwf	getNextState@pb
  6618  26A1  0141               	movlb	1	; select bank1
  6619  26A2  085F               	movf	menu@state^(0+128),w
  6620  26A3  319C  2416  31A6   	fcall	_getNextState
  6621  26A6  0141               	movlb	1	; select bank1
  6622  26A7  00C0               	movwf	(??_menu+2)^(0+128)
  6623  26A8  0840               	movf	(??_menu+2)^(0+128),w
  6624  26A9  00C6               	movwf	menu@nextState^(0+128)
  6625                           
  6626                           ;menuhelper.c: 112:  if (nextState > -1) {
  6627  26AA  1BC6               	btfsc	menu@nextState^(0+128),7
  6628  26AB  0008               	return
  6629                           
  6630                           ;menuhelper.c: 114:   if (state != nextState) {
  6631  26AC  0846               	movf	menu@nextState^(0+128),w
  6632  26AD  00BE               	movwf	??_menu^(0+128)
  6633  26AE  01BF               	clrf	(??_menu^(0+128)+1)
  6634  26AF  1BBE               	btfsc	??_menu^(0+128),7
  6635  26B0  03BF               	decf	(??_menu^(0+128)+1),f
  6636  26B1  085F               	movf	menu@state^(0+128),w
  6637  26B2  00C0               	movwf	(??_menu+2)^(0+128)
  6638  26B3  01C1               	clrf	((??_menu+2)^(0+128)+1)
  6639  26B4  083F               	movf	(??_menu+1)^(0+128),w
  6640  26B5  0641               	xorwf	(??_menu+3)^(0+128),w
  6641  26B6  1D03               	skipz
  6642  26B7  2EBA               	goto	u6295
  6643  26B8  083E               	movf	??_menu^(0+128),w
  6644  26B9  0640               	xorwf	(??_menu+2)^(0+128),w
  6645  26BA                     u6295:	
  6646  26BA  1903               	skipnz
  6647  26BB  0008               	return
  6648                           
  6649                           ;menuhelper.c: 115:    g_updateScreen = 1;
  6650  26BC  01EF               	clrf	_g_updateScreen^(0+128)
  6651  26BD  0AEF               	incf	_g_updateScreen^(0+128),f
  6652                           
  6653                           ;menuhelper.c: 116:    state = nextState;
  6654  26BE  0846               	movf	menu@nextState^(0+128),w
  6655  26BF  00BE               	movwf	??_menu^(0+128)
  6656  26C0  083E               	movf	??_menu^(0+128),w
  6657  26C1  00DF               	movwf	menu@state^(0+128)
  6658  26C2  0008               	return
  6659  26C3                     __end_of_menu:	
  6660                           
  6661                           	psect	text5
  6662  1910                     __ptext5:	
  6663 ;; *************** function _setFudgeFactor *****************
  6664 ;; Defined at:
  6665 ;;		line 260 in file "menu.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;  data            2   17[BANK1 ] PTR struct .
  6668 ;;		 -> data(173), 
  6669 ;; Auto vars:     Size  Location     Type
  6670 ;;		None
  6671 ;; Return value:  Size  Location     Type
  6672 ;;                  1    wreg      unsigned char 
  6673 ;; Registers used:
  6674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6675 ;; Tracked objects:
  6676 ;;		On entry : 0/0
  6677 ;;		On exit  : 0/0
  6678 ;;		Unchanged: 0/0
  6679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6680 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6682 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6683 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6684 ;;Total ram usage:        3 bytes
  6685 ;; Hardware stack levels used:    1
  6686 ;; Hardware stack levels required when called:    8
  6687 ;; This function calls:
  6688 ;;		_OLED_print_xy
  6689 ;;		_ftoa
  6690 ;;		_returnToPage
  6691 ;;		_spinInput
  6692 ;; This function is called by:
  6693 ;;		_menu
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           
  6698                           ;psect for function _setFudgeFactor
  6699  1910                     _setFudgeFactor:	
  6700                           
  6701                           ;menu.c: 260: uint8_t setFudgeFactor(t_globalData *data);menu.c: 261: {;menu.c: 262:  re
      +                          turnToPage(0);
  6702                           
  6703                           ;incstack = 0
  6704                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6705  1910  3000               	movlw	0
  6706  1911  31A3  23BA  3199   	fcall	_returnToPage
  6707                           
  6708                           ;menu.c: 263:  if (g_updateScreen)
  6709  1914  0141               	movlb	1	; select bank1
  6710  1915  086F               	movf	_g_updateScreen^(0+128),w
  6711  1916  1903               	btfsc	3,2
  6712  1917  2922               	goto	l4599
  6713                           
  6714                           ;menu.c: 264:   OLED_print_xy(0, 0, "Fudge factor");
  6715  1918  0140               	movlb	0	; select bank0
  6716  1919  01A7               	clrf	OLED_print_xy@row
  6717  191A  30A0               	movlw	low ((STR_39+24)| (0+32768))
  6718  191B  00A8               	movwf	OLED_print_xy@s
  6719  191C  30A8               	movlw	high ((STR_39+24)| (0+32768))
  6720  191D  00A9               	movwf	OLED_print_xy@s+1
  6721  191E  3000               	movlw	0
  6722  191F  31A3  2388  3199   	fcall	_OLED_print_xy
  6723  1922                     l4599:	
  6724                           
  6725                           ;menu.c: 265:  spinInput(&data->fudgeFactor, 0.1, 5.0, 0.1);
  6726  1922  0141               	movlb	1	; select bank1
  6727  1923  0831               	movf	setFudgeFactor@data^(0+128),w
  6728  1924  3E28               	addlw	40
  6729  1925  00A0               	movwf	spinInput@input^(0+128)
  6730  1926  3000               	movlw	0
  6731  1927  3D32               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  6732  1928  00A1               	movwf	(spinInput@input+1)^(0+128)
  6733  1929  303D               	movlw	61
  6734  192A  00A5               	movwf	(spinInput@min+3)^(0+128)
  6735  192B  30CC               	movlw	204
  6736  192C  00A4               	movwf	(spinInput@min+2)^(0+128)
  6737  192D  30CC               	movlw	204
  6738  192E  00A3               	movwf	(spinInput@min+1)^(0+128)
  6739  192F  30CD               	movlw	205
  6740  1930  00A2               	movwf	spinInput@min^(0+128)
  6741  1931  3040               	movlw	64
  6742  1932  00A9               	movwf	(spinInput@max+3)^(0+128)
  6743  1933  30A0               	movlw	160
  6744  1934  00A8               	movwf	(spinInput@max+2)^(0+128)
  6745  1935  3000               	movlw	0
  6746  1936  00A7               	movwf	(spinInput@max+1)^(0+128)
  6747  1937  3000               	movlw	0
  6748  1938  00A6               	movwf	spinInput@max^(0+128)
  6749  1939  303D               	movlw	61
  6750  193A  00AD               	movwf	(spinInput@step+3)^(0+128)
  6751  193B  30CC               	movlw	204
  6752  193C  00AC               	movwf	(spinInput@step+2)^(0+128)
  6753  193D  30CC               	movlw	204
  6754  193E  00AB               	movwf	(spinInput@step+1)^(0+128)
  6755  193F  30CD               	movlw	205
  6756  1940  00AA               	movwf	spinInput@step^(0+128)
  6757  1941  3188  201E  3199   	fcall	_spinInput
  6758                           
  6759                           ;menu.c: 266:  ftoa(str, data->fudgeFactor, 3, 1);
  6760  1944  0141               	movlb	1	; select bank1
  6761  1945  0831               	movf	setFudgeFactor@data^(0+128),w
  6762  1946  3E28               	addlw	40
  6763  1947  0086               	movwf	6
  6764  1948  3000               	movlw	0
  6765  1949  3D32               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  6766  194A  0087               	movwf	7
  6767  194B  3F40               	moviw [0]fsr1
  6768  194C  00A5               	movwf	ftoa@fValue^(0+128)
  6769  194D  3F41               	moviw [1]fsr1
  6770  194E  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  6771  194F  3F42               	moviw [2]fsr1
  6772  1950  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  6773  1951  3F43               	moviw [3]fsr1
  6774  1952  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  6775  1953  3003               	movlw	3
  6776  1954  00B3               	movwf	??_setFudgeFactor^(0+128)
  6777  1955  0833               	movf	??_setFudgeFactor^(0+128),w
  6778  1956  00A9               	movwf	ftoa@width^(0+128)
  6779  1957  01AA               	clrf	ftoa@prec^(0+128)
  6780  1958  0AAA               	incf	ftoa@prec^(0+128),f
  6781  1959  3059               	movlw	(low (_str| (0+256)))& (0+255)
  6782  195A  3194  24EE  3199   	fcall	_ftoa
  6783                           
  6784                           ;menu.c: 267:  OLED_print_xy(0, 1, "\004");
  6785  195D  0140               	movlb	0	; select bank0
  6786  195E  01A7               	clrf	OLED_print_xy@row
  6787  195F  0AA7               	incf	OLED_print_xy@row,f
  6788  1960  30C9               	movlw	low ((STR_45+5)| (0+32768))
  6789  1961  00A8               	movwf	OLED_print_xy@s
  6790  1962  30A9               	movlw	high ((STR_45+5)| (0+32768))
  6791  1963  00A9               	movwf	OLED_print_xy@s+1
  6792  1964  3000               	movlw	0
  6793  1965  31A3  2388  3199   	fcall	_OLED_print_xy
  6794                           
  6795                           ;menu.c: 268:  OLED_print_xy(1, 1, str);
  6796  1968  0140               	movlb	0	; select bank0
  6797  1969  01A7               	clrf	OLED_print_xy@row
  6798  196A  0AA7               	incf	OLED_print_xy@row,f
  6799  196B  3059               	movlw	low _str
  6800  196C  00A8               	movwf	OLED_print_xy@s
  6801  196D  3001               	movlw	high _str
  6802  196E  00A9               	movwf	OLED_print_xy@s+1
  6803  196F  3001               	movlw	1
  6804  1970  31A3  2388  3199   	fcall	_OLED_print_xy
  6805                           
  6806                           ;menu.c: 269:  OLED_print_xy(4, 1, " \003      ");
  6807  1973  0140               	movlb	0	; select bank0
  6808  1974  01A7               	clrf	OLED_print_xy@row
  6809  1975  0AA7               	incf	OLED_print_xy@row,f
  6810  1976  3074               	movlw	low (STR_52| (0+32768))
  6811  1977  00A8               	movwf	OLED_print_xy@s
  6812  1978  30A9               	movlw	high (STR_52| (0+32768))
  6813  1979  00A9               	movwf	OLED_print_xy@s+1
  6814  197A  3004               	movlw	4
  6815  197B  31A3  2388         	fcall	_OLED_print_xy
  6816                           
  6817                           ;menu.c: 270:  return 0;
  6818  197D  3000               	movlw	0
  6819  197E  0008               	return
  6820  197F                     __end_of_setFudgeFactor:	
  6821                           
  6822                           	psect	text6
  6823  1833                     __ptext6:	
  6824 ;; *************** function _setSkyTemp *****************
  6825 ;; Defined at:
  6826 ;;		line 243 in file "menu.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;  data            2   17[BANK1 ] PTR struct .
  6829 ;;		 -> data(173), 
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;		None
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      unsigned char 
  6834 ;; Registers used:
  6835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6841 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6843 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6844 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6845 ;;Total ram usage:        3 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    8
  6848 ;; This function calls:
  6849 ;;		_OLED_print_xy
  6850 ;;		_ftoa
  6851 ;;		_returnToPage
  6852 ;;		_spinInput
  6853 ;; This function is called by:
  6854 ;;		_menu
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           
  6859                           ;psect for function _setSkyTemp
  6860  1833                     _setSkyTemp:	
  6861                           
  6862                           ;menu.c: 243: uint8_t setSkyTemp(t_globalData *data);menu.c: 244: {;menu.c: 245:  return
      +                          ToPage(0);
  6863                           
  6864                           ;incstack = 0
  6865                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6866  1833  3000               	movlw	0
  6867  1834  31A3  23BA  3198   	fcall	_returnToPage
  6868                           
  6869                           ;menu.c: 246:  if (g_updateScreen)
  6870  1837  0141               	movlb	1	; select bank1
  6871  1838  086F               	movf	_g_updateScreen^(0+128),w
  6872  1839  1903               	btfsc	3,2
  6873  183A  2845               	goto	l4585
  6874                           
  6875                           ;menu.c: 247:   OLED_print_xy(0, 0, "Sky temp.   ");
  6876  183B  0140               	movlb	0	; select bank0
  6877  183C  01A7               	clrf	OLED_print_xy@row
  6878  183D  30FC               	movlw	low (STR_47| (0+32768))
  6879  183E  00A8               	movwf	OLED_print_xy@s
  6880  183F  30A8               	movlw	high (STR_47| (0+32768))
  6881  1840  00A9               	movwf	OLED_print_xy@s+1
  6882  1841  3000               	movlw	0
  6883  1842  31A3  2388  3198   	fcall	_OLED_print_xy
  6884  1845                     l4585:	
  6885                           
  6886                           ;menu.c: 248:  spinInput(&data->skyTemp, -50, -20, 1);
  6887  1845  0141               	movlb	1	; select bank1
  6888  1846  0831               	movf	setSkyTemp@data^(0+128),w
  6889  1847  3E24               	addlw	36
  6890  1848  00A0               	movwf	spinInput@input^(0+128)
  6891  1849  3000               	movlw	0
  6892  184A  3D32               	addwfc	(setSkyTemp@data+1)^(0+128),w
  6893  184B  00A1               	movwf	(spinInput@input+1)^(0+128)
  6894  184C  30C2               	movlw	194
  6895  184D  00A5               	movwf	(spinInput@min+3)^(0+128)
  6896  184E  3048               	movlw	72
  6897  184F  00A4               	movwf	(spinInput@min+2)^(0+128)
  6898  1850  3000               	movlw	0
  6899  1851  00A3               	movwf	(spinInput@min+1)^(0+128)
  6900  1852  3000               	movlw	0
  6901  1853  00A2               	movwf	spinInput@min^(0+128)
  6902  1854  30C1               	movlw	193
  6903  1855  00A9               	movwf	(spinInput@max+3)^(0+128)
  6904  1856  30A0               	movlw	160
  6905  1857  00A8               	movwf	(spinInput@max+2)^(0+128)
  6906  1858  3000               	movlw	0
  6907  1859  00A7               	movwf	(spinInput@max+1)^(0+128)
  6908  185A  3000               	movlw	0
  6909  185B  00A6               	movwf	spinInput@max^(0+128)
  6910  185C  303F               	movlw	63
  6911  185D  00AD               	movwf	(spinInput@step+3)^(0+128)
  6912  185E  3080               	movlw	128
  6913  185F  00AC               	movwf	(spinInput@step+2)^(0+128)
  6914  1860  3000               	movlw	0
  6915  1861  00AB               	movwf	(spinInput@step+1)^(0+128)
  6916  1862  3000               	movlw	0
  6917  1863  00AA               	movwf	spinInput@step^(0+128)
  6918  1864  3188  201E  3198   	fcall	_spinInput
  6919                           
  6920                           ;menu.c: 249:  ftoa(str, data->skyTemp, 3, 0);
  6921  1867  0141               	movlb	1	; select bank1
  6922  1868  0831               	movf	setSkyTemp@data^(0+128),w
  6923  1869  3E24               	addlw	36
  6924  186A  0086               	movwf	6
  6925  186B  3000               	movlw	0
  6926  186C  3D32               	addwfc	(setSkyTemp@data+1)^(0+128),w
  6927  186D  0087               	movwf	7
  6928  186E  3F40               	moviw [0]fsr1
  6929  186F  00A5               	movwf	ftoa@fValue^(0+128)
  6930  1870  3F41               	moviw [1]fsr1
  6931  1871  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  6932  1872  3F42               	moviw [2]fsr1
  6933  1873  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  6934  1874  3F43               	moviw [3]fsr1
  6935  1875  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  6936  1876  3003               	movlw	3
  6937  1877  00B3               	movwf	??_setSkyTemp^(0+128)
  6938  1878  0833               	movf	??_setSkyTemp^(0+128),w
  6939  1879  00A9               	movwf	ftoa@width^(0+128)
  6940  187A  01AA               	clrf	ftoa@prec^(0+128)
  6941  187B  3059               	movlw	(low (_str| (0+256)))& (0+255)
  6942  187C  3194  24EE  3198   	fcall	_ftoa
  6943                           
  6944                           ;menu.c: 250:  OLED_print_xy(0, 1, "\004");
  6945  187F  0140               	movlb	0	; select bank0
  6946  1880  01A7               	clrf	OLED_print_xy@row
  6947  1881  0AA7               	incf	OLED_print_xy@row,f
  6948  1882  30C9               	movlw	low ((STR_45+5)| (0+32768))
  6949  1883  00A8               	movwf	OLED_print_xy@s
  6950  1884  30A9               	movlw	high ((STR_45+5)| (0+32768))
  6951  1885  00A9               	movwf	OLED_print_xy@s+1
  6952  1886  3000               	movlw	0
  6953  1887  31A3  2388  3198   	fcall	_OLED_print_xy
  6954                           
  6955                           ;menu.c: 251:  OLED_print_xy(1, 1, str);
  6956  188A  0140               	movlb	0	; select bank0
  6957  188B  01A7               	clrf	OLED_print_xy@row
  6958  188C  0AA7               	incf	OLED_print_xy@row,f
  6959  188D  3059               	movlw	low _str
  6960  188E  00A8               	movwf	OLED_print_xy@s
  6961  188F  3001               	movlw	high _str
  6962  1890  00A9               	movwf	OLED_print_xy@s+1
  6963  1891  3001               	movlw	1
  6964  1892  31A3  2388  3198   	fcall	_OLED_print_xy
  6965                           
  6966                           ;menu.c: 252:  OLED_print_xy(4, 1, "\001 \003     ");
  6967  1895  0140               	movlb	0	; select bank0
  6968  1896  01A7               	clrf	OLED_print_xy@row
  6969  1897  0AA7               	incf	OLED_print_xy@row,f
  6970  1898  306B               	movlw	low (STR_49| (0+32768))
  6971  1899  00A8               	movwf	OLED_print_xy@s
  6972  189A  30A9               	movlw	high (STR_49| (0+32768))
  6973  189B  00A9               	movwf	OLED_print_xy@s+1
  6974  189C  3004               	movlw	4
  6975  189D  31A3  2388         	fcall	_OLED_print_xy
  6976                           
  6977                           ;menu.c: 253:  return 0;
  6978  189F  3000               	movlw	0
  6979  18A0  0008               	return
  6980  18A1                     __end_of_setSkyTemp:	
  6981                           
  6982                           	psect	text7
  6983  18A1                     __ptext7:	
  6984 ;; *************** function _setDPOffset *****************
  6985 ;; Defined at:
  6986 ;;		line 226 in file "menu.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  data            2   17[BANK1 ] PTR struct .
  6989 ;;		 -> data(173), 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      unsigned char 
  6994 ;; Registers used:
  6995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7001 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7004 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7005 ;;Total ram usage:        3 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    8
  7008 ;; This function calls:
  7009 ;;		_OLED_print_xy
  7010 ;;		_ftoa
  7011 ;;		_returnToPage
  7012 ;;		_spinInput
  7013 ;; This function is called by:
  7014 ;;		_menu
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           
  7019                           ;psect for function _setDPOffset
  7020  18A1                     _setDPOffset:	
  7021                           
  7022                           ;menu.c: 226: uint8_t setDPOffset(t_globalData *data);menu.c: 227: {;menu.c: 228:  retur
      +                          nToPage(0);
  7023                           
  7024                           ;incstack = 0
  7025                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7026  18A1  3000               	movlw	0
  7027  18A2  31A3  23BA  3198   	fcall	_returnToPage
  7028                           
  7029                           ;menu.c: 229:  if (g_updateScreen)
  7030  18A5  0141               	movlb	1	; select bank1
  7031  18A6  086F               	movf	_g_updateScreen^(0+128),w
  7032  18A7  1903               	btfsc	3,2
  7033  18A8  28B3               	goto	l4571
  7034                           
  7035                           ;menu.c: 230:   OLED_print_xy(0, 0, "DP offset   ");
  7036  18A9  0140               	movlb	0	; select bank0
  7037  18AA  01A7               	clrf	OLED_print_xy@row
  7038  18AB  3009               	movlw	low (STR_44| (0+32768))
  7039  18AC  00A8               	movwf	OLED_print_xy@s
  7040  18AD  30A9               	movlw	high (STR_44| (0+32768))
  7041  18AE  00A9               	movwf	OLED_print_xy@s+1
  7042  18AF  3000               	movlw	0
  7043  18B0  31A3  2388  3198   	fcall	_OLED_print_xy
  7044  18B3                     l4571:	
  7045                           
  7046                           ;menu.c: 231:  spinInput(&data->dpOffset, 0, 10, 0.5);
  7047  18B3  0141               	movlb	1	; select bank1
  7048  18B4  0831               	movf	setDPOffset@data^(0+128),w
  7049  18B5  3E20               	addlw	32
  7050  18B6  00A0               	movwf	spinInput@input^(0+128)
  7051  18B7  3000               	movlw	0
  7052  18B8  3D32               	addwfc	(setDPOffset@data+1)^(0+128),w
  7053  18B9  00A1               	movwf	(spinInput@input+1)^(0+128)
  7054  18BA  3000               	movlw	0
  7055  18BB  00A5               	movwf	(spinInput@min+3)^(0+128)
  7056  18BC  3000               	movlw	0
  7057  18BD  00A4               	movwf	(spinInput@min+2)^(0+128)
  7058  18BE  3000               	movlw	0
  7059  18BF  00A3               	movwf	(spinInput@min+1)^(0+128)
  7060  18C0  3000               	movlw	0
  7061  18C1  00A2               	movwf	spinInput@min^(0+128)
  7062  18C2  3041               	movlw	65
  7063  18C3  00A9               	movwf	(spinInput@max+3)^(0+128)
  7064  18C4  3020               	movlw	32
  7065  18C5  00A8               	movwf	(spinInput@max+2)^(0+128)
  7066  18C6  3000               	movlw	0
  7067  18C7  00A7               	movwf	(spinInput@max+1)^(0+128)
  7068  18C8  3000               	movlw	0
  7069  18C9  00A6               	movwf	spinInput@max^(0+128)
  7070  18CA  303F               	movlw	63
  7071  18CB  00AD               	movwf	(spinInput@step+3)^(0+128)
  7072  18CC  3000               	movlw	0
  7073  18CD  00AC               	movwf	(spinInput@step+2)^(0+128)
  7074  18CE  3000               	movlw	0
  7075  18CF  00AB               	movwf	(spinInput@step+1)^(0+128)
  7076  18D0  3000               	movlw	0
  7077  18D1  00AA               	movwf	spinInput@step^(0+128)
  7078  18D2  3188  201E  3198   	fcall	_spinInput
  7079                           
  7080                           ;menu.c: 232:  ftoa(str, data->dpOffset, 4, 1);
  7081  18D5  0141               	movlb	1	; select bank1
  7082  18D6  0831               	movf	setDPOffset@data^(0+128),w
  7083  18D7  3E20               	addlw	32
  7084  18D8  0086               	movwf	6
  7085  18D9  3000               	movlw	0
  7086  18DA  3D32               	addwfc	(setDPOffset@data+1)^(0+128),w
  7087  18DB  0087               	movwf	7
  7088  18DC  3F40               	moviw [0]fsr1
  7089  18DD  00A5               	movwf	ftoa@fValue^(0+128)
  7090  18DE  3F41               	moviw [1]fsr1
  7091  18DF  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7092  18E0  3F42               	moviw [2]fsr1
  7093  18E1  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7094  18E2  3F43               	moviw [3]fsr1
  7095  18E3  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7096  18E4  3004               	movlw	4
  7097  18E5  00B3               	movwf	??_setDPOffset^(0+128)
  7098  18E6  0833               	movf	??_setDPOffset^(0+128),w
  7099  18E7  00A9               	movwf	ftoa@width^(0+128)
  7100  18E8  01AA               	clrf	ftoa@prec^(0+128)
  7101  18E9  0AAA               	incf	ftoa@prec^(0+128),f
  7102  18EA  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7103  18EB  3194  24EE  3198   	fcall	_ftoa
  7104                           
  7105                           ;menu.c: 233:  OLED_print_xy(0, 1, "temp.\004");
  7106  18EE  0140               	movlb	0	; select bank0
  7107  18EF  01A7               	clrf	OLED_print_xy@row
  7108  18F0  0AA7               	incf	OLED_print_xy@row,f
  7109  18F1  30C4               	movlw	low (STR_45| (0+32768))
  7110  18F2  00A8               	movwf	OLED_print_xy@s
  7111  18F3  30A9               	movlw	high (STR_45| (0+32768))
  7112  18F4  00A9               	movwf	OLED_print_xy@s+1
  7113  18F5  3000               	movlw	0
  7114  18F6  31A3  2388  3198   	fcall	_OLED_print_xy
  7115                           
  7116                           ;menu.c: 234:  OLED_print_xy(6, 1, str);
  7117  18F9  0140               	movlb	0	; select bank0
  7118  18FA  01A7               	clrf	OLED_print_xy@row
  7119  18FB  0AA7               	incf	OLED_print_xy@row,f
  7120  18FC  3059               	movlw	low _str
  7121  18FD  00A8               	movwf	OLED_print_xy@s
  7122  18FE  3001               	movlw	high _str
  7123  18FF  00A9               	movwf	OLED_print_xy@s+1
  7124  1900  3006               	movlw	6
  7125  1901  31A3  2388  3198   	fcall	_OLED_print_xy
  7126                           
  7127                           ;menu.c: 235:  OLED_print_xy(10, 1, "\001\003");
  7128  1904  0140               	movlb	0	; select bank0
  7129  1905  01A7               	clrf	OLED_print_xy@row
  7130  1906  0AA7               	incf	OLED_print_xy@row,f
  7131  1907  30EF               	movlw	low (STR_46| (0+32768))
  7132  1908  00A8               	movwf	OLED_print_xy@s
  7133  1909  30A9               	movlw	high (STR_46| (0+32768))
  7134  190A  00A9               	movwf	OLED_print_xy@s+1
  7135  190B  300A               	movlw	10
  7136  190C  31A3  2388         	fcall	_OLED_print_xy
  7137                           
  7138                           ;menu.c: 236:  return 0;
  7139  190E  3000               	movlw	0
  7140  190F  0008               	return
  7141  1910                     __end_of_setDPOffset:	
  7142                           
  7143                           	psect	text8
  7144  072E                     __ptext8:	
  7145 ;; *************** function _setup *****************
  7146 ;; Defined at:
  7147 ;;		line 202 in file "menu.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  data            2   17[BANK1 ] PTR struct .
  7150 ;;		 -> data(173), 
  7151 ;; Auto vars:     Size  Location     Type
  7152 ;;		None
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      unsigned char 
  7155 ;; Registers used:
  7156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7162 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7164 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7165 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7166 ;;Total ram usage:        4 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    9
  7169 ;; This function calls:
  7170 ;;		_OLED_print_xy
  7171 ;;		_ftoa
  7172 ;;		_paging
  7173 ;;		_returnToPage
  7174 ;; This function is called by:
  7175 ;;		_menu
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           
  7180                           ;psect for function _setup
  7181  072E                     _setup:	
  7182                           
  7183                           ;menu.c: 202: uint8_t setup(t_globalData *data);menu.c: 203: {;menu.c: 204:  static uint
      +                          8_t page = 0;;menu.c: 206:  returnToPage(page);
  7184                           
  7185                           ;incstack = 0
  7186                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7187  072E  0141               	movlb	1	; select bank1
  7188  072F  0860               	movf	setup@page^(0+128),w
  7189  0730  31A3  23BA  3187   	fcall	_returnToPage
  7190                           
  7191                           ;menu.c: 207:  if (g_updateScreen) {
  7192  0733  0141               	movlb	1	; select bank1
  7193  0734  086F               	movf	_g_updateScreen^(0+128),w
  7194  0735  1903               	btfsc	3,2
  7195  0736  2FD8               	goto	l4559
  7196                           
  7197                           ;menu.c: 208:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  7198  0737  0140               	movlb	0	; select bank0
  7199  0738  01A7               	clrf	OLED_print_xy@row
  7200  0739  3088               	movlw	low (STR_39| (0+32768))
  7201  073A  00A8               	movwf	OLED_print_xy@s
  7202  073B  30A8               	movlw	high (STR_39| (0+32768))
  7203  073C  00A9               	movwf	OLED_print_xy@s+1
  7204  073D  3000               	movlw	0
  7205  073E  31A3  2388  3187   	fcall	_OLED_print_xy
  7206                           
  7207                           ;menu.c: 209:   OLED_print_xy(0, 1, "temp. ");
  7208  0741  0140               	movlb	0	; select bank0
  7209  0742  01A7               	clrf	OLED_print_xy@row
  7210  0743  0AA7               	incf	OLED_print_xy@row,f
  7211  0744  30D2               	movlw	low (STR_40| (0+32768))
  7212  0745  00A8               	movwf	OLED_print_xy@s
  7213  0746  30A9               	movlw	high (STR_40| (0+32768))
  7214  0747  00A9               	movwf	OLED_print_xy@s+1
  7215  0748  3000               	movlw	0
  7216  0749  31A3  2388  3187   	fcall	_OLED_print_xy
  7217                           
  7218                           ;menu.c: 210:   ftoa(str, data->dpOffset, 4, 1);
  7219  074C  0141               	movlb	1	; select bank1
  7220  074D  0831               	movf	setup@data^(0+128),w
  7221  074E  3E20               	addlw	32
  7222  074F  0086               	movwf	6
  7223  0750  3000               	movlw	0
  7224  0751  3D32               	addwfc	(setup@data+1)^(0+128),w
  7225  0752  0087               	movwf	7
  7226  0753  3F40               	moviw [0]fsr1
  7227  0754  00A5               	movwf	ftoa@fValue^(0+128)
  7228  0755  3F41               	moviw [1]fsr1
  7229  0756  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7230  0757  3F42               	moviw [2]fsr1
  7231  0758  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7232  0759  3F43               	moviw [3]fsr1
  7233  075A  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7234  075B  3004               	movlw	4
  7235  075C  00B3               	movwf	??_setup^(0+128)
  7236  075D  0833               	movf	??_setup^(0+128),w
  7237  075E  00A9               	movwf	ftoa@width^(0+128)
  7238  075F  01AA               	clrf	ftoa@prec^(0+128)
  7239  0760  0AAA               	incf	ftoa@prec^(0+128),f
  7240  0761  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7241  0762  3194  24EE  3187   	fcall	_ftoa
  7242                           
  7243                           ;menu.c: 211:   OLED_print_xy(6, 1, str);
  7244  0765  0140               	movlb	0	; select bank0
  7245  0766  01A7               	clrf	OLED_print_xy@row
  7246  0767  0AA7               	incf	OLED_print_xy@row,f
  7247  0768  3059               	movlw	low _str
  7248  0769  00A8               	movwf	OLED_print_xy@s
  7249  076A  3001               	movlw	high _str
  7250  076B  00A9               	movwf	OLED_print_xy@s+1
  7251  076C  3006               	movlw	6
  7252  076D  31A3  2388  3187   	fcall	_OLED_print_xy
  7253                           
  7254                           ;menu.c: 212:   OLED_print_xy(10, 1, "\001 ");
  7255  0770  0140               	movlb	0	; select bank0
  7256  0771  01A7               	clrf	OLED_print_xy@row
  7257  0772  0AA7               	incf	OLED_print_xy@row,f
  7258  0773  30F2               	movlw	low (STR_41| (0+32768))
  7259  0774  00A8               	movwf	OLED_print_xy@s
  7260  0775  30A9               	movlw	high (STR_41| (0+32768))
  7261  0776  00A9               	movwf	OLED_print_xy@s+1
  7262  0777  300A               	movlw	10
  7263  0778  31A3  2388  3187   	fcall	_OLED_print_xy
  7264                           
  7265                           ;menu.c: 213:   ftoa(str, data->skyTemp, 3, 0);
  7266  077B  0141               	movlb	1	; select bank1
  7267  077C  0831               	movf	setup@data^(0+128),w
  7268  077D  3E24               	addlw	36
  7269  077E  0086               	movwf	6
  7270  077F  3000               	movlw	0
  7271  0780  3D32               	addwfc	(setup@data+1)^(0+128),w
  7272  0781  0087               	movwf	7
  7273  0782  3F40               	moviw [0]fsr1
  7274  0783  00A5               	movwf	ftoa@fValue^(0+128)
  7275  0784  3F41               	moviw [1]fsr1
  7276  0785  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7277  0786  3F42               	moviw [2]fsr1
  7278  0787  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7279  0788  3F43               	moviw [3]fsr1
  7280  0789  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7281  078A  3003               	movlw	3
  7282  078B  00B3               	movwf	??_setup^(0+128)
  7283  078C  0833               	movf	??_setup^(0+128),w
  7284  078D  00A9               	movwf	ftoa@width^(0+128)
  7285  078E  01AA               	clrf	ftoa@prec^(0+128)
  7286  078F  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7287  0790  3194  24EE  3187   	fcall	_ftoa
  7288                           
  7289                           ;menu.c: 214:   OLED_print_xy(12 + 0, 1, str);
  7290  0793  0140               	movlb	0	; select bank0
  7291  0794  01A7               	clrf	OLED_print_xy@row
  7292  0795  0AA7               	incf	OLED_print_xy@row,f
  7293  0796  3059               	movlw	low _str
  7294  0797  00A8               	movwf	OLED_print_xy@s
  7295  0798  3001               	movlw	high _str
  7296  0799  00A9               	movwf	OLED_print_xy@s+1
  7297  079A  300C               	movlw	12
  7298  079B  31A3  2388  3187   	fcall	_OLED_print_xy
  7299                           
  7300                           ;menu.c: 215:   OLED_print_xy(12 + 3, 1, "\001        ");
  7301  079E  0140               	movlb	0	; select bank0
  7302  079F  01A7               	clrf	OLED_print_xy@row
  7303  07A0  0AA7               	incf	OLED_print_xy@row,f
  7304  07A1  3061               	movlw	low (STR_42| (0+32768))
  7305  07A2  00A8               	movwf	OLED_print_xy@s
  7306  07A3  30A9               	movlw	high (STR_42| (0+32768))
  7307  07A4  00A9               	movwf	OLED_print_xy@s+1
  7308  07A5  300F               	movlw	15
  7309  07A6  31A3  2388  3187   	fcall	_OLED_print_xy
  7310                           
  7311                           ;menu.c: 216:   ftoa(str, data->fudgeFactor, 3, 1);
  7312  07A9  0141               	movlb	1	; select bank1
  7313  07AA  0831               	movf	setup@data^(0+128),w
  7314  07AB  3E28               	addlw	40
  7315  07AC  0086               	movwf	6
  7316  07AD  3000               	movlw	0
  7317  07AE  3D32               	addwfc	(setup@data+1)^(0+128),w
  7318  07AF  0087               	movwf	7
  7319  07B0  3F40               	moviw [0]fsr1
  7320  07B1  00A5               	movwf	ftoa@fValue^(0+128)
  7321  07B2  3F41               	moviw [1]fsr1
  7322  07B3  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7323  07B4  3F42               	moviw [2]fsr1
  7324  07B5  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7325  07B6  3F43               	moviw [3]fsr1
  7326  07B7  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7327  07B8  3003               	movlw	3
  7328  07B9  00B3               	movwf	??_setup^(0+128)
  7329  07BA  0833               	movf	??_setup^(0+128),w
  7330  07BB  00A9               	movwf	ftoa@width^(0+128)
  7331  07BC  01AA               	clrf	ftoa@prec^(0+128)
  7332  07BD  0AAA               	incf	ftoa@prec^(0+128),f
  7333  07BE  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7334  07BF  3194  24EE  3187   	fcall	_ftoa
  7335                           
  7336                           ;menu.c: 217:   OLED_print_xy(2 * 12 + 0, 1, str);
  7337  07C2  0140               	movlb	0	; select bank0
  7338  07C3  01A7               	clrf	OLED_print_xy@row
  7339  07C4  0AA7               	incf	OLED_print_xy@row,f
  7340  07C5  3059               	movlw	low _str
  7341  07C6  00A8               	movwf	OLED_print_xy@s
  7342  07C7  3001               	movlw	high _str
  7343  07C8  00A9               	movwf	OLED_print_xy@s+1
  7344  07C9  3018               	movlw	24
  7345  07CA  31A3  2388  3187   	fcall	_OLED_print_xy
  7346                           
  7347                           ;menu.c: 218:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  7348  07CD  0140               	movlb	0	; select bank0
  7349  07CE  01A7               	clrf	OLED_print_xy@row
  7350  07CF  0AA7               	incf	OLED_print_xy@row,f
  7351  07D0  30E5               	movlw	low ((STR_14+3)| (0+32768))
  7352  07D1  00A8               	movwf	OLED_print_xy@s
  7353  07D2  30A8               	movlw	high ((STR_14+3)| (0+32768))
  7354  07D3  00A9               	movwf	OLED_print_xy@s+1
  7355  07D4  301C               	movlw	28
  7356  07D5  31A3  2388  3187   	fcall	_OLED_print_xy
  7357  07D8                     l4559:	
  7358                           
  7359                           ;menu.c: 220:  page = paging(page, 3);
  7360  07D8  3003               	movlw	3
  7361  07D9  0141               	movlb	1	; select bank1
  7362  07DA  00B3               	movwf	??_setup^(0+128)
  7363  07DB  0833               	movf	??_setup^(0+128),w
  7364  07DC  0140               	movlb	0	; select bank0
  7365  07DD  00A7               	movwf	paging@lastPage
  7366  07DE  0141               	movlb	1	; select bank1
  7367  07DF  0860               	movf	setup@page^(0+128),w
  7368  07E0  31A7  2795         	fcall	_paging
  7369  07E2  0141               	movlb	1	; select bank1
  7370  07E3  00B4               	movwf	(??_setup+1)^(0+128)
  7371  07E4  0834               	movf	(??_setup+1)^(0+128),w
  7372  07E5  00E0               	movwf	setup@page^(0+128)
  7373                           
  7374                           ;menu.c: 221:  return page;
  7375  07E6  0860               	movf	setup@page^(0+128),w
  7376  07E7  0008               	return
  7377  07E8                     __end_of_setup:	
  7378                           
  7379                           	psect	text9
  7380  1AF8                     __ptext9:	
  7381 ;; *************** function _setLensDia *****************
  7382 ;; Defined at:
  7383 ;;		line 186 in file "menu.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  data            2   17[BANK1 ] PTR struct .
  7386 ;;		 -> data(173), 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;		None
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  1    wreg      unsigned char 
  7391 ;; Registers used:
  7392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7398 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7400 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7401 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7402 ;;Total ram usage:        7 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    8
  7405 ;; This function calls:
  7406 ;;		_OLED_print_xy
  7407 ;;		_ftoa
  7408 ;;		_returnToPage
  7409 ;;		_spinInput
  7410 ;; This function is called by:
  7411 ;;		_menu
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           
  7416                           ;psect for function _setLensDia
  7417  1AF8                     _setLensDia:	
  7418                           
  7419                           ;menu.c: 186: uint8_t setLensDia(t_globalData *data);menu.c: 187: {;menu.c: 188:  return
      +                          ToPage(0);
  7420                           
  7421                           ;incstack = 0
  7422                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7423  1AF8  3000               	movlw	0
  7424  1AF9  31A3  23BA  319A   	fcall	_returnToPage
  7425                           
  7426                           ;menu.c: 189:  if (g_updateScreen)
  7427  1AFC  0141               	movlb	1	; select bank1
  7428  1AFD  086F               	movf	_g_updateScreen^(0+128),w
  7429  1AFE  1903               	btfsc	3,2
  7430  1AFF  2B0A               	goto	l4531
  7431                           
  7432                           ;menu.c: 190:   OLED_print_xy(0, 0, "Lens diam.  ");
  7433  1B00  0140               	movlb	0	; select bank0
  7434  1B01  01A7               	clrf	OLED_print_xy@row
  7435  1B02  30D5               	movlw	low ((STR_22+12)| (0+32768))
  7436  1B03  00A8               	movwf	OLED_print_xy@s
  7437  1B04  30A8               	movlw	high ((STR_22+12)| (0+32768))
  7438  1B05  00A9               	movwf	OLED_print_xy@s+1
  7439  1B06  3000               	movlw	0
  7440  1B07  31A3  2388  319A   	fcall	_OLED_print_xy
  7441  1B0A                     l4531:	
  7442                           
  7443                           ;menu.c: 191:  spinInput(&data->chData[selectedChannel].lensDia, 1, 16, 0.5);
  7444  1B0A  0141               	movlb	1	; select bank1
  7445  1B0B  0864               	movf	_selectedChannel^(0+128),w
  7446  1B0C  00B3               	movwf	??_setLensDia^(0+128)
  7447  1B0D  01B4               	clrf	(??_setLensDia^(0+128)+1)
  7448  1B0E  3005               	movlw	5
  7449  1B0F                     u5215:	
  7450  1B0F  35B3               	lslf	??_setLensDia^(0+128),f
  7451  1B10  0DB4               	rlf	(??_setLensDia^(0+128)+1),f
  7452  1B11  0B89               	decfsz	9,f
  7453  1B12  2B0F               	goto	u5215
  7454  1B13  0833               	movf	??_setLensDia^(0+128),w
  7455  1B14  0731               	addwf	setLensDia@data^(0+128),w
  7456  1B15  00B5               	movwf	(??_setLensDia+2)^(0+128)
  7457  1B16  0834               	movf	(??_setLensDia+1)^(0+128),w
  7458  1B17  3D32               	addwfc	(setLensDia@data+1)^(0+128),w
  7459  1B18  00B6               	movwf	(??_setLensDia+3)^(0+128)
  7460  1B19  0835               	movf	(??_setLensDia+2)^(0+128),w
  7461  1B1A  3E43               	addlw	67
  7462  1B1B  00A0               	movwf	spinInput@input^(0+128)
  7463  1B1C  3000               	movlw	0
  7464  1B1D  3D36               	addwfc	(??_setLensDia+3)^(0+128),w
  7465  1B1E  00A1               	movwf	(spinInput@input+1)^(0+128)
  7466  1B1F  303F               	movlw	63
  7467  1B20  00A5               	movwf	(spinInput@min+3)^(0+128)
  7468  1B21  3080               	movlw	128
  7469  1B22  00A4               	movwf	(spinInput@min+2)^(0+128)
  7470  1B23  3000               	movlw	0
  7471  1B24  00A3               	movwf	(spinInput@min+1)^(0+128)
  7472  1B25  3000               	movlw	0
  7473  1B26  00A2               	movwf	spinInput@min^(0+128)
  7474  1B27  3041               	movlw	65
  7475  1B28  00A9               	movwf	(spinInput@max+3)^(0+128)
  7476  1B29  3080               	movlw	128
  7477  1B2A  00A8               	movwf	(spinInput@max+2)^(0+128)
  7478  1B2B  3000               	movlw	0
  7479  1B2C  00A7               	movwf	(spinInput@max+1)^(0+128)
  7480  1B2D  3000               	movlw	0
  7481  1B2E  00A6               	movwf	spinInput@max^(0+128)
  7482  1B2F  303F               	movlw	63
  7483  1B30  00AD               	movwf	(spinInput@step+3)^(0+128)
  7484  1B31  3000               	movlw	0
  7485  1B32  00AC               	movwf	(spinInput@step+2)^(0+128)
  7486  1B33  3000               	movlw	0
  7487  1B34  00AB               	movwf	(spinInput@step+1)^(0+128)
  7488  1B35  3000               	movlw	0
  7489  1B36  00AA               	movwf	spinInput@step^(0+128)
  7490  1B37  3188  201E  319A   	fcall	_spinInput
  7491                           
  7492                           ;menu.c: 192:  ftoa(str, data->chData[selectedChannel].lensDia, 4, 1);
  7493  1B3A  0141               	movlb	1	; select bank1
  7494  1B3B  0864               	movf	_selectedChannel^(0+128),w
  7495  1B3C  00B3               	movwf	??_setLensDia^(0+128)
  7496  1B3D  01B4               	clrf	(??_setLensDia^(0+128)+1)
  7497  1B3E  3005               	movlw	5
  7498  1B3F                     u5225:	
  7499  1B3F  35B3               	lslf	??_setLensDia^(0+128),f
  7500  1B40  0DB4               	rlf	(??_setLensDia^(0+128)+1),f
  7501  1B41  0B89               	decfsz	9,f
  7502  1B42  2B3F               	goto	u5225
  7503  1B43  0833               	movf	??_setLensDia^(0+128),w
  7504  1B44  0731               	addwf	setLensDia@data^(0+128),w
  7505  1B45  00B5               	movwf	(??_setLensDia+2)^(0+128)
  7506  1B46  0834               	movf	(??_setLensDia+1)^(0+128),w
  7507  1B47  3D32               	addwfc	(setLensDia@data+1)^(0+128),w
  7508  1B48  00B6               	movwf	(??_setLensDia+3)^(0+128)
  7509  1B49  0835               	movf	(??_setLensDia+2)^(0+128),w
  7510  1B4A  3E43               	addlw	67
  7511  1B4B  0086               	movwf	6
  7512  1B4C  3000               	movlw	0
  7513  1B4D  3D36               	addwfc	(??_setLensDia+3)^(0+128),w
  7514  1B4E  0087               	movwf	7
  7515  1B4F  3F40               	moviw [0]fsr1
  7516  1B50  00A5               	movwf	ftoa@fValue^(0+128)
  7517  1B51  3F41               	moviw [1]fsr1
  7518  1B52  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7519  1B53  3F42               	moviw [2]fsr1
  7520  1B54  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7521  1B55  3F43               	moviw [3]fsr1
  7522  1B56  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7523  1B57  3004               	movlw	4
  7524  1B58  00B7               	movwf	(??_setLensDia+4)^(0+128)
  7525  1B59  0837               	movf	(??_setLensDia+4)^(0+128),w
  7526  1B5A  00A9               	movwf	ftoa@width^(0+128)
  7527  1B5B  01AA               	clrf	ftoa@prec^(0+128)
  7528  1B5C  0AAA               	incf	ftoa@prec^(0+128),f
  7529  1B5D  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7530  1B5E  3194  24EE  319A   	fcall	_ftoa
  7531                           
  7532                           ;menu.c: 193:  OLED_print_xy(0, 1, "\004");
  7533  1B61  0140               	movlb	0	; select bank0
  7534  1B62  01A7               	clrf	OLED_print_xy@row
  7535  1B63  0AA7               	incf	OLED_print_xy@row,f
  7536  1B64  30C9               	movlw	low ((STR_45+5)| (0+32768))
  7537  1B65  00A8               	movwf	OLED_print_xy@s
  7538  1B66  30A9               	movlw	high ((STR_45+5)| (0+32768))
  7539  1B67  00A9               	movwf	OLED_print_xy@s+1
  7540  1B68  3000               	movlw	0
  7541  1B69  31A3  2388  319A   	fcall	_OLED_print_xy
  7542                           
  7543                           ;menu.c: 194:  OLED_print_xy(1, 1, str);
  7544  1B6C  0140               	movlb	0	; select bank0
  7545  1B6D  01A7               	clrf	OLED_print_xy@row
  7546  1B6E  0AA7               	incf	OLED_print_xy@row,f
  7547  1B6F  3059               	movlw	low _str
  7548  1B70  00A8               	movwf	OLED_print_xy@s
  7549  1B71  3001               	movlw	high _str
  7550  1B72  00A9               	movwf	OLED_print_xy@s+1
  7551  1B73  3001               	movlw	1
  7552  1B74  31A3  2388  319A   	fcall	_OLED_print_xy
  7553                           
  7554                           ;menu.c: 195:  OLED_print_xy(5, 1, " inch \003");
  7555  1B77  0140               	movlb	0	; select bank0
  7556  1B78  01A7               	clrf	OLED_print_xy@row
  7557  1B79  0AA7               	incf	OLED_print_xy@row,f
  7558  1B7A  3086               	movlw	low (STR_38| (0+32768))
  7559  1B7B  00A8               	movwf	OLED_print_xy@s
  7560  1B7C  30A9               	movlw	high (STR_38| (0+32768))
  7561  1B7D  00A9               	movwf	OLED_print_xy@s+1
  7562  1B7E  3005               	movlw	5
  7563  1B7F  31A3  2388         	fcall	_OLED_print_xy
  7564                           
  7565                           ;menu.c: 196:  return 0;
  7566  1B81  3000               	movlw	0
  7567  1B82  0008               	return
  7568  1B83                     __end_of_setLensDia:	
  7569                           
  7570                           	psect	text10
  7571  1DB3                     __ptext10:	
  7572 ;; *************** function _setOutputPower *****************
  7573 ;; Defined at:
  7574 ;;		line 157 in file "menu.c"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;  data            2   17[BANK1 ] PTR struct .
  7577 ;;		 -> data(173), 
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;  chData          2   23[BANK1 ] PTR struct .
  7580 ;;		 -> data.chData(128), data(173), 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      unsigned char 
  7583 ;; Registers used:
  7584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7590 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7591 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7592 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7593 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7594 ;;Total ram usage:        8 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    8
  7597 ;; This function calls:
  7598 ;;		_OLED_print_xy
  7599 ;;		___fleq
  7600 ;;		___flge
  7601 ;;		_ftoa
  7602 ;;		_itoa
  7603 ;;		_returnToPage
  7604 ;;		_spinInput
  7605 ;; This function is called by:
  7606 ;;		_menu
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           
  7611                           ;psect for function _setOutputPower
  7612  1DB3                     _setOutputPower:	
  7613                           
  7614                           ;menu.c: 157: uint8_t setOutputPower(t_globalData *data);menu.c: 158: {;menu.c: 159:  t_
      +                          channelData *chData = &data->chData[selectedChannel];
  7615                           
  7616                           ;incstack = 0
  7617                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7618  1DB3  0141               	movlb	1	; select bank1
  7619  1DB4  0864               	movf	_selectedChannel^(0+128),w
  7620  1DB5  00B3               	movwf	??_setOutputPower^(0+128)
  7621  1DB6  01B4               	clrf	(??_setOutputPower^(0+128)+1)
  7622  1DB7  3005               	movlw	5
  7623  1DB8                     u6145:	
  7624  1DB8  35B3               	lslf	??_setOutputPower^(0+128),f
  7625  1DB9  0DB4               	rlf	(??_setOutputPower^(0+128)+1),f
  7626  1DBA  0B89               	decfsz	9,f
  7627  1DBB  2DB8               	goto	u6145
  7628  1DBC  0833               	movf	??_setOutputPower^(0+128),w
  7629  1DBD  0731               	addwf	setOutputPower@data^(0+128),w
  7630  1DBE  00B5               	movwf	(??_setOutputPower+2)^(0+128)
  7631  1DBF  0834               	movf	(??_setOutputPower+1)^(0+128),w
  7632  1DC0  3D32               	addwfc	(setOutputPower@data+1)^(0+128),w
  7633  1DC1  00B6               	movwf	(??_setOutputPower+3)^(0+128)
  7634  1DC2  0835               	movf	(??_setOutputPower+2)^(0+128),w
  7635  1DC3  3E2D               	addlw	45
  7636  1DC4  00B7               	movwf	setOutputPower@chData^(0+128)
  7637  1DC5  3000               	movlw	0
  7638  1DC6  3D36               	addwfc	(??_setOutputPower+3)^(0+128),w
  7639  1DC7  00B8               	movwf	(setOutputPower@chData+1)^(0+128)
  7640                           
  7641                           ;menu.c: 161:  returnToPage(0);
  7642  1DC8  3000               	movlw	0
  7643  1DC9  31A3  23BA  319D   	fcall	_returnToPage
  7644                           
  7645                           ;menu.c: 162:  if (g_updateScreen)
  7646  1DCC  0141               	movlb	1	; select bank1
  7647  1DCD  086F               	movf	_g_updateScreen^(0+128),w
  7648  1DCE  1903               	btfsc	3,2
  7649  1DCF  2DDA               	goto	l5407
  7650                           
  7651                           ;menu.c: 163:   OLED_print_xy(0, 0, "Output power");
  7652  1DD0  0140               	movlb	0	; select bank0
  7653  1DD1  01A7               	clrf	OLED_print_xy@row
  7654  1DD2  303D               	movlw	low (STR_29| (0+32768))
  7655  1DD3  00A8               	movwf	OLED_print_xy@s
  7656  1DD4  30A9               	movlw	high (STR_29| (0+32768))
  7657  1DD5  00A9               	movwf	OLED_print_xy@s+1
  7658  1DD6  3000               	movlw	0
  7659  1DD7  31A3  2388  319D   	fcall	_OLED_print_xy
  7660  1DDA                     l5407:	
  7661                           
  7662                           ;menu.c: 164:  spinInput(&chData->Pset, 0, chData->Pmax, 0.25);
  7663  1DDA  0141               	movlb	1	; select bank1
  7664  1DDB  0837               	movf	setOutputPower@chData^(0+128),w
  7665  1DDC  3E10               	addlw	16
  7666  1DDD  00A0               	movwf	spinInput@input^(0+128)
  7667  1DDE  3000               	movlw	0
  7668  1DDF  3D38               	addwfc	(setOutputPower@chData+1)^(0+128),w
  7669  1DE0  00A1               	movwf	(spinInput@input+1)^(0+128)
  7670  1DE1  3000               	movlw	0
  7671  1DE2  00A5               	movwf	(spinInput@min+3)^(0+128)
  7672  1DE3  3000               	movlw	0
  7673  1DE4  00A4               	movwf	(spinInput@min+2)^(0+128)
  7674  1DE5  3000               	movlw	0
  7675  1DE6  00A3               	movwf	(spinInput@min+1)^(0+128)
  7676  1DE7  3000               	movlw	0
  7677  1DE8  00A2               	movwf	spinInput@min^(0+128)
  7678  1DE9  0837               	movf	setOutputPower@chData^(0+128),w
  7679  1DEA  0086               	movwf	6
  7680  1DEB  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7681  1DEC  0087               	movwf	7
  7682  1DED  3144               	addfsr 1,4
  7683  1DEE  3F40               	moviw [0]fsr1
  7684  1DEF  00A6               	movwf	spinInput@max^(0+128)
  7685  1DF0  3F41               	moviw [1]fsr1
  7686  1DF1  00A7               	movwf	(spinInput@max+1)^(0+128)
  7687  1DF2  3F42               	moviw [2]fsr1
  7688  1DF3  00A8               	movwf	(spinInput@max+2)^(0+128)
  7689  1DF4  3F43               	moviw [3]fsr1
  7690  1DF5  00A9               	movwf	(spinInput@max+3)^(0+128)
  7691  1DF6  303E               	movlw	62
  7692  1DF7  00AD               	movwf	(spinInput@step+3)^(0+128)
  7693  1DF8  3080               	movlw	128
  7694  1DF9  00AC               	movwf	(spinInput@step+2)^(0+128)
  7695  1DFA  3000               	movlw	0
  7696  1DFB  00AB               	movwf	(spinInput@step+1)^(0+128)
  7697  1DFC  3000               	movlw	0
  7698  1DFD  00AA               	movwf	spinInput@step^(0+128)
  7699  1DFE  3188  201E  319D   	fcall	_spinInput
  7700                           
  7701                           ;menu.c: 165:  if (chData->Pset == 0) {
  7702  1E01  0141               	movlb	1	; select bank1
  7703  1E02  0837               	movf	setOutputPower@chData^(0+128),w
  7704  1E03  0086               	movwf	6
  7705  1E04  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7706  1E05  0087               	movwf	7
  7707  1E06  3150               	addfsr 1,16
  7708  1E07  3F40               	moviw [0]fsr1
  7709  1E08  0140               	movlb	0	; select bank0
  7710  1E09  00A0               	movwf	___fleq@ff1
  7711  1E0A  3F41               	moviw [1]fsr1
  7712  1E0B  00A1               	movwf	___fleq@ff1+1
  7713  1E0C  3F42               	moviw [2]fsr1
  7714  1E0D  00A2               	movwf	___fleq@ff1+2
  7715  1E0E  3F43               	moviw [3]fsr1
  7716  1E0F  00A3               	movwf	___fleq@ff1+3
  7717  1E10  3000               	movlw	0
  7718  1E11  00A7               	movwf	___fleq@ff2+3
  7719  1E12  3000               	movlw	0
  7720  1E13  00A6               	movwf	___fleq@ff2+2
  7721  1E14  3000               	movlw	0
  7722  1E15  00A5               	movwf	___fleq@ff2+1
  7723  1E16  3000               	movlw	0
  7724  1E17  00A4               	movwf	___fleq@ff2
  7725  1E18  31A5  257A  319D   	fcall	___fleq
  7726  1E1B  1C03               	btfss	3,0
  7727  1E1C  2E49               	goto	l5419
  7728                           
  7729                           ;menu.c: 166:   itoa(str, selectedChannel + 1, 1);
  7730  1E1D  3059               	movlw	low _str
  7731  1E1E  0141               	movlb	1	; select bank1
  7732  1E1F  00A5               	movwf	itoa@str^(0+128)
  7733  1E20  3001               	movlw	high _str
  7734  1E21  00A6               	movwf	(itoa@str+1)^(0+128)
  7735  1E22  0864               	movf	_selectedChannel^(0+128),w
  7736  1E23  3E01               	addlw	1
  7737  1E24  00B3               	movwf	??_setOutputPower^(0+128)
  7738  1E25  0833               	movf	??_setOutputPower^(0+128),w
  7739  1E26  00A7               	movwf	itoa@value^(0+128)
  7740  1E27  01A8               	clrf	itoa@width^(0+128)
  7741  1E28  0AA8               	incf	itoa@width^(0+128),f
  7742  1E29  31A7  272C  319D   	fcall	_itoa
  7743                           
  7744                           ;menu.c: 167:   OLED_print_xy(0, 1, "\004Ch. ");
  7745  1E2C  0140               	movlb	0	; select bank0
  7746  1E2D  01A7               	clrf	OLED_print_xy@row
  7747  1E2E  0AA7               	incf	OLED_print_xy@row,f
  7748  1E2F  30D9               	movlw	low (STR_30| (0+32768))
  7749  1E30  00A8               	movwf	OLED_print_xy@s
  7750  1E31  30A9               	movlw	high (STR_30| (0+32768))
  7751  1E32  00A9               	movwf	OLED_print_xy@s+1
  7752  1E33  3000               	movlw	0
  7753  1E34  31A3  2388  319D   	fcall	_OLED_print_xy
  7754                           
  7755                           ;menu.c: 168:   OLED_print_xy(5, 1, str);
  7756  1E37  0140               	movlb	0	; select bank0
  7757  1E38  01A7               	clrf	OLED_print_xy@row
  7758  1E39  0AA7               	incf	OLED_print_xy@row,f
  7759  1E3A  3059               	movlw	low _str
  7760  1E3B  00A8               	movwf	OLED_print_xy@s
  7761  1E3C  3001               	movlw	high _str
  7762  1E3D  00A9               	movwf	OLED_print_xy@s+1
  7763  1E3E  3005               	movlw	5
  7764  1E3F  31A3  2388  319D   	fcall	_OLED_print_xy
  7765                           
  7766                           ;menu.c: 169:   OLED_print_xy(6, 1, " off \003");
  7767  1E42  0140               	movlb	0	; select bank0
  7768  1E43  01A7               	clrf	OLED_print_xy@row
  7769  1E44  0AA7               	incf	OLED_print_xy@row,f
  7770  1E45  30B6               	movlw	low (STR_31| (0+32768))
  7771  1E46  00A8               	movwf	OLED_print_xy@s
  7772  1E47  30A9               	movlw	high (STR_31| (0+32768))
  7773  1E48  2E97               	goto	L3
  7774  1E49                     l5419:	
  7775                           ;menu.c: 170:  } else if (chData->Pset >= chData->Pmax) {
  7776                           
  7777  1E49  0141               	movlb	1	; select bank1
  7778  1E4A  0837               	movf	setOutputPower@chData^(0+128),w
  7779  1E4B  0086               	movwf	6
  7780  1E4C  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7781  1E4D  0087               	movwf	7
  7782  1E4E  3150               	addfsr 1,16
  7783  1E4F  3F40               	moviw [0]fsr1
  7784  1E50  0140               	movlb	0	; select bank0
  7785  1E51  00A0               	movwf	___flge@ff1
  7786  1E52  3F41               	moviw [1]fsr1
  7787  1E53  00A1               	movwf	___flge@ff1+1
  7788  1E54  3F42               	moviw [2]fsr1
  7789  1E55  00A2               	movwf	___flge@ff1+2
  7790  1E56  3F43               	moviw [3]fsr1
  7791  1E57  00A3               	movwf	___flge@ff1+3
  7792  1E58  0141               	movlb	1	; select bank1
  7793  1E59  0837               	movf	setOutputPower@chData^(0+128),w
  7794  1E5A  0086               	movwf	6
  7795  1E5B  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7796  1E5C  0087               	movwf	7
  7797  1E5D  3144               	addfsr 1,4
  7798  1E5E  3F40               	moviw [0]fsr1
  7799  1E5F  0140               	movlb	0	; select bank0
  7800  1E60  00A4               	movwf	___flge@ff2
  7801  1E61  3F41               	moviw [1]fsr1
  7802  1E62  00A5               	movwf	___flge@ff2+1
  7803  1E63  3F42               	moviw [2]fsr1
  7804  1E64  00A6               	movwf	___flge@ff2+2
  7805  1E65  3F43               	moviw [3]fsr1
  7806  1E66  00A7               	movwf	___flge@ff2+3
  7807  1E67  3199  21F1  319D   	fcall	___flge
  7808  1E6A  1C03               	btfss	3,0
  7809  1E6B  2E9A               	goto	l5429
  7810                           
  7811                           ;menu.c: 171:   itoa(str, selectedChannel + 1, 1);
  7812  1E6C  3059               	movlw	low _str
  7813  1E6D  0141               	movlb	1	; select bank1
  7814  1E6E  00A5               	movwf	itoa@str^(0+128)
  7815  1E6F  3001               	movlw	high _str
  7816  1E70  00A6               	movwf	(itoa@str+1)^(0+128)
  7817  1E71  0864               	movf	_selectedChannel^(0+128),w
  7818  1E72  3E01               	addlw	1
  7819  1E73  00B3               	movwf	??_setOutputPower^(0+128)
  7820  1E74  0833               	movf	??_setOutputPower^(0+128),w
  7821  1E75  00A7               	movwf	itoa@value^(0+128)
  7822  1E76  01A8               	clrf	itoa@width^(0+128)
  7823  1E77  0AA8               	incf	itoa@width^(0+128),f
  7824  1E78  31A7  272C  319D   	fcall	_itoa
  7825                           
  7826                           ;menu.c: 172:   OLED_print_xy(0, 1, "\004Ch. ");
  7827  1E7B  0140               	movlb	0	; select bank0
  7828  1E7C  01A7               	clrf	OLED_print_xy@row
  7829  1E7D  0AA7               	incf	OLED_print_xy@row,f
  7830  1E7E  30D9               	movlw	low (STR_30| (0+32768))
  7831  1E7F  00A8               	movwf	OLED_print_xy@s
  7832  1E80  30A9               	movlw	high (STR_30| (0+32768))
  7833  1E81  00A9               	movwf	OLED_print_xy@s+1
  7834  1E82  3000               	movlw	0
  7835  1E83  31A3  2388  319D   	fcall	_OLED_print_xy
  7836                           
  7837                           ;menu.c: 173:   OLED_print_xy(5, 1, str);
  7838  1E86  0140               	movlb	0	; select bank0
  7839  1E87  01A7               	clrf	OLED_print_xy@row
  7840  1E88  0AA7               	incf	OLED_print_xy@row,f
  7841  1E89  3059               	movlw	low _str
  7842  1E8A  00A8               	movwf	OLED_print_xy@s
  7843  1E8B  3001               	movlw	high _str
  7844  1E8C  00A9               	movwf	OLED_print_xy@s+1
  7845  1E8D  3005               	movlw	5
  7846  1E8E  31A3  2388  319D   	fcall	_OLED_print_xy
  7847                           
  7848                           ;menu.c: 174:   OLED_print_xy(6, 1, " auto\003");
  7849  1E91  0140               	movlb	0	; select bank0
  7850  1E92  01A7               	clrf	OLED_print_xy@row
  7851  1E93  0AA7               	incf	OLED_print_xy@row,f
  7852  1E94  30BD               	movlw	low (STR_33| (0+32768))
  7853  1E95  00A8               	movwf	OLED_print_xy@s
  7854  1E96  30A9               	movlw	high (STR_33| (0+32768))
  7855  1E97                     L3:	
  7856  1E97  00A9               	movwf	OLED_print_xy@s+1
  7857  1E98  3006               	movlw	6
  7858  1E99  2ED0               	goto	L2
  7859  1E9A                     l5429:	
  7860                           ;menu.c: 175:  } else {
  7861                           
  7862                           
  7863                           ;menu.c: 176:   OLED_print_xy(0, 1, "\004");
  7864  1E9A  0140               	movlb	0	; select bank0
  7865  1E9B  01A7               	clrf	OLED_print_xy@row
  7866  1E9C  0AA7               	incf	OLED_print_xy@row,f
  7867  1E9D  30C9               	movlw	low ((STR_45+5)| (0+32768))
  7868  1E9E  00A8               	movwf	OLED_print_xy@s
  7869  1E9F  30A9               	movlw	high ((STR_45+5)| (0+32768))
  7870  1EA0  00A9               	movwf	OLED_print_xy@s+1
  7871  1EA1  3000               	movlw	0
  7872  1EA2  31A3  2388  319D   	fcall	_OLED_print_xy
  7873                           
  7874                           ;menu.c: 177:   ftoa(str, chData->Pset, 4, 1);
  7875  1EA5  0141               	movlb	1	; select bank1
  7876  1EA6  0837               	movf	setOutputPower@chData^(0+128),w
  7877  1EA7  0086               	movwf	6
  7878  1EA8  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7879  1EA9  0087               	movwf	7
  7880  1EAA  3150               	addfsr 1,16
  7881  1EAB  3F40               	moviw [0]fsr1
  7882  1EAC  00A5               	movwf	ftoa@fValue^(0+128)
  7883  1EAD  3F41               	moviw [1]fsr1
  7884  1EAE  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7885  1EAF  3F42               	moviw [2]fsr1
  7886  1EB0  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7887  1EB1  3F43               	moviw [3]fsr1
  7888  1EB2  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7889  1EB3  3004               	movlw	4
  7890  1EB4  00B3               	movwf	??_setOutputPower^(0+128)
  7891  1EB5  0833               	movf	??_setOutputPower^(0+128),w
  7892  1EB6  00A9               	movwf	ftoa@width^(0+128)
  7893  1EB7  01AA               	clrf	ftoa@prec^(0+128)
  7894  1EB8  0AAA               	incf	ftoa@prec^(0+128),f
  7895  1EB9  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7896  1EBA  3194  24EE  319D   	fcall	_ftoa
  7897                           
  7898                           ;menu.c: 178:   OLED_print_xy(1, 1, str);
  7899  1EBD  0140               	movlb	0	; select bank0
  7900  1EBE  01A7               	clrf	OLED_print_xy@row
  7901  1EBF  0AA7               	incf	OLED_print_xy@row,f
  7902  1EC0  3059               	movlw	low _str
  7903  1EC1  00A8               	movwf	OLED_print_xy@s
  7904  1EC2  3001               	movlw	high _str
  7905  1EC3  00A9               	movwf	OLED_print_xy@s+1
  7906  1EC4  3001               	movlw	1
  7907  1EC5  31A3  2388  319D   	fcall	_OLED_print_xy
  7908                           
  7909                           ;menu.c: 179:   OLED_print_xy(5, 1, "W man.\003");
  7910  1EC8  0140               	movlb	0	; select bank0
  7911  1EC9  01A7               	clrf	OLED_print_xy@row
  7912  1ECA  0AA7               	incf	OLED_print_xy@row,f
  7913  1ECB  308E               	movlw	low (STR_35| (0+32768))
  7914  1ECC  00A8               	movwf	OLED_print_xy@s
  7915  1ECD  30A9               	movlw	high (STR_35| (0+32768))
  7916  1ECE  00A9               	movwf	OLED_print_xy@s+1
  7917  1ECF  3005               	movlw	5
  7918  1ED0                     L2:	
  7919  1ED0  31A3  2388         	fcall	_OLED_print_xy
  7920                           
  7921                           ;menu.c: 181:  return 0;
  7922  1ED2  3000               	movlw	0
  7923  1ED3  0008               	return
  7924  1ED4                     __end_of_setOutputPower:	
  7925                           
  7926                           	psect	text11
  7927  1ED4                     __ptext11:	
  7928 ;; *************** function _channelSetup *****************
  7929 ;; Defined at:
  7930 ;;		line 121 in file "menu.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  data            2   17[BANK1 ] PTR struct .
  7933 ;;		 -> data(173), 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  chData          2   23[BANK1 ] PTR struct .
  7936 ;;		 -> data.chData(128), data(173), 
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  1    wreg      unsigned char 
  7939 ;; Registers used:
  7940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7946 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7947 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7948 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7949 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7950 ;;Total ram usage:        8 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    9
  7953 ;; This function calls:
  7954 ;;		_OLED_print_xy
  7955 ;;		___fleq
  7956 ;;		___flge
  7957 ;;		_ftoa
  7958 ;;		_itoa
  7959 ;;		_paging
  7960 ;;		_returnToPage
  7961 ;; This function is called by:
  7962 ;;		_menu
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           
  7967                           ;psect for function _channelSetup
  7968  1ED4                     _channelSetup:	
  7969                           
  7970                           ;menu.c: 121: uint8_t channelSetup(t_globalData *data);menu.c: 122: {;menu.c: 123:  stat
      +                          ic uint8_t page = 0;;menu.c: 124:  t_channelData *chData = &data->chData[selectedChannel
      +                          ];
  7971                           
  7972                           ;incstack = 0
  7973                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7974  1ED4  0141               	movlb	1	; select bank1
  7975  1ED5  0864               	movf	_selectedChannel^(0+128),w
  7976  1ED6  00B3               	movwf	??_channelSetup^(0+128)
  7977  1ED7  01B4               	clrf	(??_channelSetup^(0+128)+1)
  7978  1ED8  3005               	movlw	5
  7979  1ED9                     u6105:	
  7980  1ED9  35B3               	lslf	??_channelSetup^(0+128),f
  7981  1EDA  0DB4               	rlf	(??_channelSetup^(0+128)+1),f
  7982  1EDB  0B89               	decfsz	9,f
  7983  1EDC  2ED9               	goto	u6105
  7984  1EDD  0833               	movf	??_channelSetup^(0+128),w
  7985  1EDE  0731               	addwf	channelSetup@data^(0+128),w
  7986  1EDF  00B5               	movwf	(??_channelSetup+2)^(0+128)
  7987  1EE0  0834               	movf	(??_channelSetup+1)^(0+128),w
  7988  1EE1  3D32               	addwfc	(channelSetup@data+1)^(0+128),w
  7989  1EE2  00B6               	movwf	(??_channelSetup+3)^(0+128)
  7990  1EE3  0835               	movf	(??_channelSetup+2)^(0+128),w
  7991  1EE4  3E2D               	addlw	45
  7992  1EE5  00B7               	movwf	channelSetup@chData^(0+128)
  7993  1EE6  3000               	movlw	0
  7994  1EE7  3D36               	addwfc	(??_channelSetup+3)^(0+128),w
  7995  1EE8  00B8               	movwf	(channelSetup@chData+1)^(0+128)
  7996                           
  7997                           ;menu.c: 126:  returnToPage(page);
  7998  1EE9  0861               	movf	channelSetup@page^(0+128),w
  7999  1EEA  31A3  23BA  319E   	fcall	_returnToPage
  8000                           
  8001                           ;menu.c: 127:  if (g_updateScreen) {
  8002  1EED  0141               	movlb	1	; select bank1
  8003  1EEE  086F               	movf	_g_updateScreen^(0+128),w
  8004  1EEF  1903               	btfsc	3,2
  8005  1EF0  2FF0               	goto	l5393
  8006                           
  8007                           ;menu.c: 128:   OLED_print_xy(0, 0, "Output powerLens diam.  ");
  8008  1EF1  0140               	movlb	0	; select bank0
  8009  1EF2  01A7               	clrf	OLED_print_xy@row
  8010  1EF3  30C9               	movlw	low (STR_22| (0+32768))
  8011  1EF4  00A8               	movwf	OLED_print_xy@s
  8012  1EF5  30A8               	movlw	high (STR_22| (0+32768))
  8013  1EF6  00A9               	movwf	OLED_print_xy@s+1
  8014  1EF7  3000               	movlw	0
  8015  1EF8  31A3  2388  319E   	fcall	_OLED_print_xy
  8016                           
  8017                           ;menu.c: 130:   if (chData->Pset == 0) {
  8018  1EFB  0141               	movlb	1	; select bank1
  8019  1EFC  0837               	movf	channelSetup@chData^(0+128),w
  8020  1EFD  0086               	movwf	6
  8021  1EFE  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8022  1EFF  0087               	movwf	7
  8023  1F00  3150               	addfsr 1,16
  8024  1F01  3F40               	moviw [0]fsr1
  8025  1F02  0140               	movlb	0	; select bank0
  8026  1F03  00A0               	movwf	___fleq@ff1
  8027  1F04  3F41               	moviw [1]fsr1
  8028  1F05  00A1               	movwf	___fleq@ff1+1
  8029  1F06  3F42               	moviw [2]fsr1
  8030  1F07  00A2               	movwf	___fleq@ff1+2
  8031  1F08  3F43               	moviw [3]fsr1
  8032  1F09  00A3               	movwf	___fleq@ff1+3
  8033  1F0A  3000               	movlw	0
  8034  1F0B  00A7               	movwf	___fleq@ff2+3
  8035  1F0C  3000               	movlw	0
  8036  1F0D  00A6               	movwf	___fleq@ff2+2
  8037  1F0E  3000               	movlw	0
  8038  1F0F  00A5               	movwf	___fleq@ff2+1
  8039  1F10  3000               	movlw	0
  8040  1F11  00A4               	movwf	___fleq@ff2
  8041  1F12  31A5  257A  319E   	fcall	___fleq
  8042  1F15  1C03               	btfss	3,0
  8043  1F16  2F43               	goto	l5373
  8044                           
  8045                           ;menu.c: 131:    OLED_print_xy(0, 1, "Ch. ");
  8046  1F17  0140               	movlb	0	; select bank0
  8047  1F18  01A7               	clrf	OLED_print_xy@row
  8048  1F19  0AA7               	incf	OLED_print_xy@row,f
  8049  1F1A  30DA               	movlw	low ((STR_30+1)| (0+32768))
  8050  1F1B  00A8               	movwf	OLED_print_xy@s
  8051  1F1C  30A9               	movlw	high ((STR_30+1)| (0+32768))
  8052  1F1D  00A9               	movwf	OLED_print_xy@s+1
  8053  1F1E  3000               	movlw	0
  8054  1F1F  31A3  2388  319E   	fcall	_OLED_print_xy
  8055                           
  8056                           ;menu.c: 132:    itoa(str, selectedChannel + 1, 1);
  8057  1F22  3059               	movlw	low _str
  8058  1F23  0141               	movlb	1	; select bank1
  8059  1F24  00A5               	movwf	itoa@str^(0+128)
  8060  1F25  3001               	movlw	high _str
  8061  1F26  00A6               	movwf	(itoa@str+1)^(0+128)
  8062  1F27  0864               	movf	_selectedChannel^(0+128),w
  8063  1F28  3E01               	addlw	1
  8064  1F29  00B3               	movwf	??_channelSetup^(0+128)
  8065  1F2A  0833               	movf	??_channelSetup^(0+128),w
  8066  1F2B  00A7               	movwf	itoa@value^(0+128)
  8067  1F2C  01A8               	clrf	itoa@width^(0+128)
  8068  1F2D  0AA8               	incf	itoa@width^(0+128),f
  8069  1F2E  31A7  272C  319E   	fcall	_itoa
  8070                           
  8071                           ;menu.c: 133:    OLED_print_xy(4, 1, str);
  8072  1F31  0140               	movlb	0	; select bank0
  8073  1F32  01A7               	clrf	OLED_print_xy@row
  8074  1F33  0AA7               	incf	OLED_print_xy@row,f
  8075  1F34  3059               	movlw	low _str
  8076  1F35  00A8               	movwf	OLED_print_xy@s
  8077  1F36  3001               	movlw	high _str
  8078  1F37  00A9               	movwf	OLED_print_xy@s+1
  8079  1F38  3004               	movlw	4
  8080  1F39  31A3  2388  319E   	fcall	_OLED_print_xy
  8081                           
  8082                           ;menu.c: 134:    OLED_print_xy(5, 1, " off   ");
  8083  1F3C  0140               	movlb	0	; select bank0
  8084  1F3D  01A7               	clrf	OLED_print_xy@row
  8085  1F3E  0AA7               	incf	OLED_print_xy@row,f
  8086  1F3F  309E               	movlw	low (STR_24| (0+32768))
  8087  1F40  00A8               	movwf	OLED_print_xy@s
  8088  1F41  30A9               	movlw	high (STR_24| (0+32768))
  8089  1F42  2F91               	goto	L5
  8090  1F43                     l5373:	
  8091                           ;menu.c: 135:   } else if (chData->Pset >= chData->Pmax) {
  8092                           
  8093  1F43  0141               	movlb	1	; select bank1
  8094  1F44  0837               	movf	channelSetup@chData^(0+128),w
  8095  1F45  0086               	movwf	6
  8096  1F46  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8097  1F47  0087               	movwf	7
  8098  1F48  3150               	addfsr 1,16
  8099  1F49  3F40               	moviw [0]fsr1
  8100  1F4A  0140               	movlb	0	; select bank0
  8101  1F4B  00A0               	movwf	___flge@ff1
  8102  1F4C  3F41               	moviw [1]fsr1
  8103  1F4D  00A1               	movwf	___flge@ff1+1
  8104  1F4E  3F42               	moviw [2]fsr1
  8105  1F4F  00A2               	movwf	___flge@ff1+2
  8106  1F50  3F43               	moviw [3]fsr1
  8107  1F51  00A3               	movwf	___flge@ff1+3
  8108  1F52  0141               	movlb	1	; select bank1
  8109  1F53  0837               	movf	channelSetup@chData^(0+128),w
  8110  1F54  0086               	movwf	6
  8111  1F55  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8112  1F56  0087               	movwf	7
  8113  1F57  3144               	addfsr 1,4
  8114  1F58  3F40               	moviw [0]fsr1
  8115  1F59  0140               	movlb	0	; select bank0
  8116  1F5A  00A4               	movwf	___flge@ff2
  8117  1F5B  3F41               	moviw [1]fsr1
  8118  1F5C  00A5               	movwf	___flge@ff2+1
  8119  1F5D  3F42               	moviw [2]fsr1
  8120  1F5E  00A6               	movwf	___flge@ff2+2
  8121  1F5F  3F43               	moviw [3]fsr1
  8122  1F60  00A7               	movwf	___flge@ff2+3
  8123  1F61  3199  21F1  319E   	fcall	___flge
  8124  1F64  1C03               	btfss	3,0
  8125  1F65  2F94               	goto	l5383
  8126                           
  8127                           ;menu.c: 136:    OLED_print_xy(0, 1, "Ch. ");
  8128  1F66  0140               	movlb	0	; select bank0
  8129  1F67  01A7               	clrf	OLED_print_xy@row
  8130  1F68  0AA7               	incf	OLED_print_xy@row,f
  8131  1F69  30DA               	movlw	low ((STR_30+1)| (0+32768))
  8132  1F6A  00A8               	movwf	OLED_print_xy@s
  8133  1F6B  30A9               	movlw	high ((STR_30+1)| (0+32768))
  8134  1F6C  00A9               	movwf	OLED_print_xy@s+1
  8135  1F6D  3000               	movlw	0
  8136  1F6E  31A3  2388  319E   	fcall	_OLED_print_xy
  8137                           
  8138                           ;menu.c: 137:    itoa(str, selectedChannel + 1, 1);
  8139  1F71  3059               	movlw	low _str
  8140  1F72  0141               	movlb	1	; select bank1
  8141  1F73  00A5               	movwf	itoa@str^(0+128)
  8142  1F74  3001               	movlw	high _str
  8143  1F75  00A6               	movwf	(itoa@str+1)^(0+128)
  8144  1F76  0864               	movf	_selectedChannel^(0+128),w
  8145  1F77  3E01               	addlw	1
  8146  1F78  00B3               	movwf	??_channelSetup^(0+128)
  8147  1F79  0833               	movf	??_channelSetup^(0+128),w
  8148  1F7A  00A7               	movwf	itoa@value^(0+128)
  8149  1F7B  01A8               	clrf	itoa@width^(0+128)
  8150  1F7C  0AA8               	incf	itoa@width^(0+128),f
  8151  1F7D  31A7  272C  319E   	fcall	_itoa
  8152                           
  8153                           ;menu.c: 138:    OLED_print_xy(4, 1, str);
  8154  1F80  0140               	movlb	0	; select bank0
  8155  1F81  01A7               	clrf	OLED_print_xy@row
  8156  1F82  0AA7               	incf	OLED_print_xy@row,f
  8157  1F83  3059               	movlw	low _str
  8158  1F84  00A8               	movwf	OLED_print_xy@s
  8159  1F85  3001               	movlw	high _str
  8160  1F86  00A9               	movwf	OLED_print_xy@s+1
  8161  1F87  3004               	movlw	4
  8162  1F88  31A3  2388  319E   	fcall	_OLED_print_xy
  8163                           
  8164                           ;menu.c: 139:    OLED_print_xy(5, 1, " auto  ");
  8165  1F8B  0140               	movlb	0	; select bank0
  8166  1F8C  01A7               	clrf	OLED_print_xy@row
  8167  1F8D  0AA7               	incf	OLED_print_xy@row,f
  8168  1F8E  30AE               	movlw	low (STR_26| (0+32768))
  8169  1F8F  00A8               	movwf	OLED_print_xy@s
  8170  1F90  30A9               	movlw	high (STR_26| (0+32768))
  8171  1F91                     L5:	
  8172  1F91  00A9               	movwf	OLED_print_xy@s+1
  8173  1F92  3005               	movlw	5
  8174  1F93  2FBF               	goto	L4
  8175  1F94                     l5383:	
  8176                           ;menu.c: 140:   } else {
  8177                           
  8178                           
  8179                           ;menu.c: 141:    ftoa(str, chData->Pset, 4, 1);
  8180  1F94  0141               	movlb	1	; select bank1
  8181  1F95  0837               	movf	channelSetup@chData^(0+128),w
  8182  1F96  0086               	movwf	6
  8183  1F97  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8184  1F98  0087               	movwf	7
  8185  1F99  3150               	addfsr 1,16
  8186  1F9A  3F40               	moviw [0]fsr1
  8187  1F9B  00A5               	movwf	ftoa@fValue^(0+128)
  8188  1F9C  3F41               	moviw [1]fsr1
  8189  1F9D  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8190  1F9E  3F42               	moviw [2]fsr1
  8191  1F9F  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8192  1FA0  3F43               	moviw [3]fsr1
  8193  1FA1  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8194  1FA2  3004               	movlw	4
  8195  1FA3  00B3               	movwf	??_channelSetup^(0+128)
  8196  1FA4  0833               	movf	??_channelSetup^(0+128),w
  8197  1FA5  00A9               	movwf	ftoa@width^(0+128)
  8198  1FA6  01AA               	clrf	ftoa@prec^(0+128)
  8199  1FA7  0AAA               	incf	ftoa@prec^(0+128),f
  8200  1FA8  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8201  1FA9  3194  24EE  319E   	fcall	_ftoa
  8202                           
  8203                           ;menu.c: 142:    OLED_print_xy(0, 1, str);
  8204  1FAC  0140               	movlb	0	; select bank0
  8205  1FAD  01A7               	clrf	OLED_print_xy@row
  8206  1FAE  0AA7               	incf	OLED_print_xy@row,f
  8207  1FAF  3059               	movlw	low _str
  8208  1FB0  00A8               	movwf	OLED_print_xy@s
  8209  1FB1  3001               	movlw	high _str
  8210  1FB2  00A9               	movwf	OLED_print_xy@s+1
  8211  1FB3  3000               	movlw	0
  8212  1FB4  31A3  2388  319E   	fcall	_OLED_print_xy
  8213                           
  8214                           ;menu.c: 143:    OLED_print_xy(4, 1, "W manual");
  8215  1FB7  0140               	movlb	0	; select bank0
  8216  1FB8  01A7               	clrf	OLED_print_xy@row
  8217  1FB9  0AA7               	incf	OLED_print_xy@row,f
  8218  1FBA  307D               	movlw	low (STR_27| (0+32768))
  8219  1FBB  00A8               	movwf	OLED_print_xy@s
  8220  1FBC  30A9               	movlw	high (STR_27| (0+32768))
  8221  1FBD  00A9               	movwf	OLED_print_xy@s+1
  8222  1FBE  3004               	movlw	4
  8223  1FBF                     L4:	
  8224  1FBF  31A3  2388  319E   	fcall	_OLED_print_xy
  8225                           
  8226                           ;menu.c: 145:   ftoa(str, chData->lensDia, 4, 1);
  8227  1FC2  0141               	movlb	1	; select bank1
  8228  1FC3  0837               	movf	channelSetup@chData^(0+128),w
  8229  1FC4  0086               	movwf	6
  8230  1FC5  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8231  1FC6  0087               	movwf	7
  8232  1FC7  3156               	addfsr 1,22
  8233  1FC8  3F40               	moviw [0]fsr1
  8234  1FC9  00A5               	movwf	ftoa@fValue^(0+128)
  8235  1FCA  3F41               	moviw [1]fsr1
  8236  1FCB  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8237  1FCC  3F42               	moviw [2]fsr1
  8238  1FCD  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8239  1FCE  3F43               	moviw [3]fsr1
  8240  1FCF  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8241  1FD0  3004               	movlw	4
  8242  1FD1  00B3               	movwf	??_channelSetup^(0+128)
  8243  1FD2  0833               	movf	??_channelSetup^(0+128),w
  8244  1FD3  00A9               	movwf	ftoa@width^(0+128)
  8245  1FD4  01AA               	clrf	ftoa@prec^(0+128)
  8246  1FD5  0AAA               	incf	ftoa@prec^(0+128),f
  8247  1FD6  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8248  1FD7  3194  24EE  319E   	fcall	_ftoa
  8249                           
  8250                           ;menu.c: 146:   OLED_print_xy(12 + 0, 1, str);
  8251  1FDA  0140               	movlb	0	; select bank0
  8252  1FDB  01A7               	clrf	OLED_print_xy@row
  8253  1FDC  0AA7               	incf	OLED_print_xy@row,f
  8254  1FDD  3059               	movlw	low _str
  8255  1FDE  00A8               	movwf	OLED_print_xy@s
  8256  1FDF  3001               	movlw	high _str
  8257  1FE0  00A9               	movwf	OLED_print_xy@s+1
  8258  1FE1  300C               	movlw	12
  8259  1FE2  31A3  2388  319E   	fcall	_OLED_print_xy
  8260                           
  8261                           ;menu.c: 147:   OLED_print_xy(12 + 5, 1, " inch  ");
  8262  1FE5  0140               	movlb	0	; select bank0
  8263  1FE6  01A7               	clrf	OLED_print_xy@row
  8264  1FE7  0AA7               	incf	OLED_print_xy@row,f
  8265  1FE8  30A6               	movlw	low (STR_28| (0+32768))
  8266  1FE9  00A8               	movwf	OLED_print_xy@s
  8267  1FEA  30A9               	movlw	high (STR_28| (0+32768))
  8268  1FEB  00A9               	movwf	OLED_print_xy@s+1
  8269  1FEC  3011               	movlw	17
  8270  1FED  31A3  2388  319E   	fcall	_OLED_print_xy
  8271  1FF0                     l5393:	
  8272                           
  8273                           ;menu.c: 150:  page = paging(page, 2);
  8274  1FF0  3002               	movlw	2
  8275  1FF1  0141               	movlb	1	; select bank1
  8276  1FF2  00B3               	movwf	??_channelSetup^(0+128)
  8277  1FF3  0833               	movf	??_channelSetup^(0+128),w
  8278  1FF4  0140               	movlb	0	; select bank0
  8279  1FF5  00A7               	movwf	paging@lastPage
  8280  1FF6  0141               	movlb	1	; select bank1
  8281  1FF7  0861               	movf	channelSetup@page^(0+128),w
  8282  1FF8  31A7  2795         	fcall	_paging
  8283  1FFA  0141               	movlb	1	; select bank1
  8284  1FFB  00B4               	movwf	(??_channelSetup+1)^(0+128)
  8285  1FFC  0834               	movf	(??_channelSetup+1)^(0+128),w
  8286  1FFD  00E1               	movwf	channelSetup@page^(0+128)
  8287                           
  8288                           ;menu.c: 151:  return page;
  8289  1FFE  0861               	movf	channelSetup@page^(0+128),w
  8290  1FFF  0008               	return
  8291  2000                     __end_of_channelSetup:	
  8292                           
  8293                           	psect	text12
  8294  0DFD                     __ptext12:	
  8295 ;; *************** function _channelView *****************
  8296 ;; Defined at:
  8297 ;;		line 69 in file "menu.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  data            2   17[BANK1 ] PTR struct .
  8300 ;;		 -> data(173), 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  n               1   27[BANK1 ] unsigned char 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      unsigned char 
  8305 ;; Registers used:
  8306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8312 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8313 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8314 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8315 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8316 ;;Total ram usage:       11 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    9
  8319 ;; This function calls:
  8320 ;;		_OLED_print_xy
  8321 ;;		___bmul
  8322 ;;		___fltol
  8323 ;;		_ftoa
  8324 ;;		_itoa
  8325 ;;		_paging
  8326 ;;		_returnToPage
  8327 ;; This function is called by:
  8328 ;;		_menu
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           
  8333                           ;psect for function _channelView
  8334  0DFD                     _channelView:	
  8335                           
  8336                           ;menu.c: 69: uint8_t channelView(t_globalData *data);menu.c: 70: {;menu.c: 71:  static u
      +                          int8_t page = 0;;menu.c: 72:  uint8_t n;;menu.c: 74:  returnToPage(page);
  8337                           
  8338                           ;incstack = 0
  8339                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8340  0DFD  0141               	movlb	1	; select bank1
  8341  0DFE  0862               	movf	channelView@page^(0+128),w
  8342  0DFF  31A3  23BA  318D   	fcall	_returnToPage
  8343                           
  8344                           ;menu.c: 75:  if (g_updateScreen) {
  8345  0E02  0141               	movlb	1	; select bank1
  8346  0E03  086F               	movf	_g_updateScreen^(0+128),w
  8347  0E04  1903               	btfsc	3,2
  8348  0E05  2EBA               	goto	l5303
  8349                           
  8350                           ;menu.c: 76:   for (n = 0; n < 4; n++) {
  8351  0E06  01BB               	clrf	channelView@n^(0+128)
  8352  0E07                     l5285:	
  8353  0E07  3004               	movlw	4
  8354  0E08  023B               	subwf	channelView@n^(0+128),w
  8355  0E09  1803               	btfsc	3,0
  8356  0E0A  2EBA               	goto	l5303
  8357                           
  8358                           ;menu.c: 77:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
  8359  0E0B  0140               	movlb	0	; select bank0
  8360  0E0C  01A7               	clrf	OLED_print_xy@row
  8361  0E0D  30E7               	movlw	low (STR_11| (0+32768))
  8362  0E0E  00A8               	movwf	OLED_print_xy@s
  8363  0E0F  30A9               	movlw	high (STR_11| (0+32768))
  8364  0E10  00A9               	movwf	OLED_print_xy@s+1
  8365  0E11  300C               	movlw	12
  8366  0E12  0141               	movlb	1	; select bank1
  8367  0E13  00B3               	movwf	??_channelView^(0+128)
  8368  0E14  0833               	movf	??_channelView^(0+128),w
  8369  0E15  0140               	movlb	0	; select bank0
  8370  0E16  00A0               	movwf	___bmul@multiplicand
  8371  0E17  0141               	movlb	1	; select bank1
  8372  0E18  083B               	movf	channelView@n^(0+128),w
  8373  0E19  3190  2003  318D   	fcall	___bmul
  8374  0E1C  31A3  2388  318D   	fcall	_OLED_print_xy
  8375                           
  8376                           ;menu.c: 78:    itoa(str, n + 1, 1);
  8377  0E1F  3059               	movlw	low _str
  8378  0E20  0141               	movlb	1	; select bank1
  8379  0E21  00A5               	movwf	itoa@str^(0+128)
  8380  0E22  3001               	movlw	high _str
  8381  0E23  00A6               	movwf	(itoa@str+1)^(0+128)
  8382  0E24  083B               	movf	channelView@n^(0+128),w
  8383  0E25  3E01               	addlw	1
  8384  0E26  00B3               	movwf	??_channelView^(0+128)
  8385  0E27  0833               	movf	??_channelView^(0+128),w
  8386  0E28  00A7               	movwf	itoa@value^(0+128)
  8387  0E29  01A8               	clrf	itoa@width^(0+128)
  8388  0E2A  0AA8               	incf	itoa@width^(0+128),f
  8389  0E2B  31A7  272C  318D   	fcall	_itoa
  8390                           
  8391                           ;menu.c: 79:    OLED_print_xy(n * 12 + 3, 0, str);
  8392  0E2E  0140               	movlb	0	; select bank0
  8393  0E2F  01A7               	clrf	OLED_print_xy@row
  8394  0E30  3059               	movlw	low _str
  8395  0E31  00A8               	movwf	OLED_print_xy@s
  8396  0E32  3001               	movlw	high _str
  8397  0E33  00A9               	movwf	OLED_print_xy@s+1
  8398  0E34  300C               	movlw	12
  8399  0E35  0141               	movlb	1	; select bank1
  8400  0E36  00B3               	movwf	??_channelView^(0+128)
  8401  0E37  0833               	movf	??_channelView^(0+128),w
  8402  0E38  0140               	movlb	0	; select bank0
  8403  0E39  00A0               	movwf	___bmul@multiplicand
  8404  0E3A  0141               	movlb	1	; select bank1
  8405  0E3B  083B               	movf	channelView@n^(0+128),w
  8406  0E3C  3190  2003  318D   	fcall	___bmul
  8407  0E3F  3E03               	addlw	3
  8408  0E40  31A3  2388  318D   	fcall	_OLED_print_xy
  8409                           
  8410                           ;menu.c: 80:    OLED_print_xy(n * 12 + 4, 0, ": ");
  8411  0E43  0140               	movlb	0	; select bank0
  8412  0E44  01A7               	clrf	OLED_print_xy@row
  8413  0E45  30F8               	movlw	low (STR_12| (0+32768))
  8414  0E46  00A8               	movwf	OLED_print_xy@s
  8415  0E47  30A9               	movlw	high (STR_12| (0+32768))
  8416  0E48  00A9               	movwf	OLED_print_xy@s+1
  8417  0E49  300C               	movlw	12
  8418  0E4A  0141               	movlb	1	; select bank1
  8419  0E4B  00B3               	movwf	??_channelView^(0+128)
  8420  0E4C  0833               	movf	??_channelView^(0+128),w
  8421  0E4D  0140               	movlb	0	; select bank0
  8422  0E4E  00A0               	movwf	___bmul@multiplicand
  8423  0E4F  0141               	movlb	1	; select bank1
  8424  0E50  083B               	movf	channelView@n^(0+128),w
  8425  0E51  3190  2003  318D   	fcall	___bmul
  8426  0E54  3E04               	addlw	4
  8427  0E55  31A3  2388  318D   	fcall	_OLED_print_xy
  8428                           
  8429                           ;menu.c: 81:    itoa(str, data->chData[n].lensDia, 2);
  8430  0E58  3059               	movlw	low _str
  8431  0E59  0141               	movlb	1	; select bank1
  8432  0E5A  00A5               	movwf	itoa@str^(0+128)
  8433  0E5B  3001               	movlw	high _str
  8434  0E5C  00A6               	movwf	(itoa@str+1)^(0+128)
  8435  0E5D  083B               	movf	channelView@n^(0+128),w
  8436  0E5E  00B3               	movwf	??_channelView^(0+128)
  8437  0E5F  01B4               	clrf	(??_channelView^(0+128)+1)
  8438  0E60  3005               	movlw	5
  8439  0E61                     u6045:	
  8440  0E61  35B3               	lslf	??_channelView^(0+128),f
  8441  0E62  0DB4               	rlf	(??_channelView^(0+128)+1),f
  8442  0E63  0B89               	decfsz	9,f
  8443  0E64  2E61               	goto	u6045
  8444  0E65  0833               	movf	??_channelView^(0+128),w
  8445  0E66  0731               	addwf	channelView@data^(0+128),w
  8446  0E67  00B5               	movwf	(??_channelView+2)^(0+128)
  8447  0E68  0834               	movf	(??_channelView+1)^(0+128),w
  8448  0E69  3D32               	addwfc	(channelView@data+1)^(0+128),w
  8449  0E6A  00B6               	movwf	(??_channelView+3)^(0+128)
  8450  0E6B  0835               	movf	(??_channelView+2)^(0+128),w
  8451  0E6C  3E43               	addlw	67
  8452  0E6D  0086               	movwf	6
  8453  0E6E  3000               	movlw	0
  8454  0E6F  3D36               	addwfc	(??_channelView+3)^(0+128),w
  8455  0E70  0087               	movwf	7
  8456  0E71  3F40               	moviw [0]fsr1
  8457  0E72  0140               	movlb	0	; select bank0
  8458  0E73  00E8               	movwf	___fltol@f1
  8459  0E74  3F41               	moviw [1]fsr1
  8460  0E75  00E9               	movwf	___fltol@f1+1
  8461  0E76  3F42               	moviw [2]fsr1
  8462  0E77  00EA               	movwf	___fltol@f1+2
  8463  0E78  3F43               	moviw [3]fsr1
  8464  0E79  00EB               	movwf	___fltol@f1+3
  8465  0E7A  3199  217F  318D   	fcall	___fltol
  8466  0E7D  0140               	movlb	0	; select bank0
  8467  0E7E  0868               	movf	?___fltol,w
  8468  0E7F  0141               	movlb	1	; select bank1
  8469  0E80  00B7               	movwf	(??_channelView+4)^(0+128)
  8470  0E81  0837               	movf	(??_channelView+4)^(0+128),w
  8471  0E82  00A7               	movwf	itoa@value^(0+128)
  8472  0E83  3002               	movlw	2
  8473  0E84  00B8               	movwf	(??_channelView+5)^(0+128)
  8474  0E85  0838               	movf	(??_channelView+5)^(0+128),w
  8475  0E86  00A8               	movwf	itoa@width^(0+128)
  8476  0E87  31A7  272C  318D   	fcall	_itoa
  8477                           
  8478                           ;menu.c: 82:    OLED_print_xy(n * 12 + 6, 0, str);
  8479  0E8A  0140               	movlb	0	; select bank0
  8480  0E8B  01A7               	clrf	OLED_print_xy@row
  8481  0E8C  3059               	movlw	low _str
  8482  0E8D  00A8               	movwf	OLED_print_xy@s
  8483  0E8E  3001               	movlw	high _str
  8484  0E8F  00A9               	movwf	OLED_print_xy@s+1
  8485  0E90  300C               	movlw	12
  8486  0E91  0141               	movlb	1	; select bank1
  8487  0E92  00B3               	movwf	??_channelView^(0+128)
  8488  0E93  0833               	movf	??_channelView^(0+128),w
  8489  0E94  0140               	movlb	0	; select bank0
  8490  0E95  00A0               	movwf	___bmul@multiplicand
  8491  0E96  0141               	movlb	1	; select bank1
  8492  0E97  083B               	movf	channelView@n^(0+128),w
  8493  0E98  3190  2003  318D   	fcall	___bmul
  8494  0E9B  3E06               	addlw	6
  8495  0E9C  31A3  2388  318D   	fcall	_OLED_print_xy
  8496                           
  8497                           ;menu.c: 83:    OLED_print_xy(n * 12 + 8, 0, "\" ");
  8498  0E9F  0140               	movlb	0	; select bank0
  8499  0EA0  01A7               	clrf	OLED_print_xy@row
  8500  0EA1  30F5               	movlw	low (STR_13| (0+32768))
  8501  0EA2  00A8               	movwf	OLED_print_xy@s
  8502  0EA3  30A9               	movlw	high (STR_13| (0+32768))
  8503  0EA4  00A9               	movwf	OLED_print_xy@s+1
  8504  0EA5  300C               	movlw	12
  8505  0EA6  0141               	movlb	1	; select bank1
  8506  0EA7  00B3               	movwf	??_channelView^(0+128)
  8507  0EA8  0833               	movf	??_channelView^(0+128),w
  8508  0EA9  0140               	movlb	0	; select bank0
  8509  0EAA  00A0               	movwf	___bmul@multiplicand
  8510  0EAB  0141               	movlb	1	; select bank1
  8511  0EAC  083B               	movf	channelView@n^(0+128),w
  8512  0EAD  3190  2003  318D   	fcall	___bmul
  8513  0EB0  3E08               	addlw	8
  8514  0EB1  31A3  2388  318D   	fcall	_OLED_print_xy
  8515                           
  8516                           ;menu.c: 84:   }
  8517  0EB4  3001               	movlw	1
  8518  0EB5  0141               	movlb	1	; select bank1
  8519  0EB6  00B3               	movwf	??_channelView^(0+128)
  8520  0EB7  0833               	movf	??_channelView^(0+128),w
  8521  0EB8  07BB               	addwf	channelView@n^(0+128),f
  8522  0EB9  2E07               	goto	l5285
  8523  0EBA                     l5303:	
  8524                           
  8525                           ;menu.c: 87:  for (n = 0; n < 4; n++) {
  8526  0EBA  01BB               	clrf	channelView@n^(0+128)
  8527  0EBB                     l5305:	
  8528  0EBB  3004               	movlw	4
  8529  0EBC  023B               	subwf	channelView@n^(0+128),w
  8530  0EBD  1803               	btfsc	3,0
  8531  0EBE  2FED               	goto	l5341
  8532  0EBF  2FBA               	goto	l5335
  8533  0EC0                     l5309:	
  8534                           
  8535                           ;menu.c: 90:    OLED_print_xy(n * 12 + 0, 1, "Off         ");
  8536  0EC0  0140               	movlb	0	; select bank0
  8537  0EC1  01A7               	clrf	OLED_print_xy@row
  8538  0EC2  0AA7               	incf	OLED_print_xy@row,f
  8539  0EC3  30E2               	movlw	low (STR_14| (0+32768))
  8540  0EC4  00A8               	movwf	OLED_print_xy@s
  8541  0EC5  30A8               	movlw	high (STR_14| (0+32768))
  8542  0EC6  00A9               	movwf	OLED_print_xy@s+1
  8543  0EC7  300C               	movlw	12
  8544  0EC8  0141               	movlb	1	; select bank1
  8545  0EC9  00B3               	movwf	??_channelView^(0+128)
  8546  0ECA  0833               	movf	??_channelView^(0+128),w
  8547  0ECB  0140               	movlb	0	; select bank0
  8548  0ECC  00A0               	movwf	___bmul@multiplicand
  8549  0ECD  0141               	movlb	1	; select bank1
  8550  0ECE  083B               	movf	channelView@n^(0+128),w
  8551  0ECF  3190  2003  318D   	fcall	___bmul
  8552  0ED2  31A3  2388  318D   	fcall	_OLED_print_xy
  8553                           
  8554                           ;menu.c: 91:    break;
  8555  0ED5  2FE7               	goto	l5337
  8556  0ED6                     l5311:	
  8557                           
  8558                           ;menu.c: 93:    ftoa(str, data->chData[n].Patt, 4, 1);
  8559  0ED6  083B               	movf	channelView@n^(0+128),w
  8560  0ED7  00B3               	movwf	??_channelView^(0+128)
  8561  0ED8  01B4               	clrf	(??_channelView^(0+128)+1)
  8562  0ED9  3005               	movlw	5
  8563  0EDA                     u6065:	
  8564  0EDA  35B3               	lslf	??_channelView^(0+128),f
  8565  0EDB  0DB4               	rlf	(??_channelView^(0+128)+1),f
  8566  0EDC  0B89               	decfsz	9,f
  8567  0EDD  2EDA               	goto	u6065
  8568  0EDE  0833               	movf	??_channelView^(0+128),w
  8569  0EDF  0731               	addwf	channelView@data^(0+128),w
  8570  0EE0  00B5               	movwf	(??_channelView+2)^(0+128)
  8571  0EE1  0834               	movf	(??_channelView+1)^(0+128),w
  8572  0EE2  3D32               	addwfc	(channelView@data+1)^(0+128),w
  8573  0EE3  00B6               	movwf	(??_channelView+3)^(0+128)
  8574  0EE4  0835               	movf	(??_channelView+2)^(0+128),w
  8575  0EE5  3E39               	addlw	57
  8576  0EE6  0086               	movwf	6
  8577  0EE7  3000               	movlw	0
  8578  0EE8  3D36               	addwfc	(??_channelView+3)^(0+128),w
  8579  0EE9  0087               	movwf	7
  8580  0EEA  3F40               	moviw [0]fsr1
  8581  0EEB  00A5               	movwf	ftoa@fValue^(0+128)
  8582  0EEC  3F41               	moviw [1]fsr1
  8583  0EED  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8584  0EEE  3F42               	moviw [2]fsr1
  8585  0EEF  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8586  0EF0  3F43               	moviw [3]fsr1
  8587  0EF1  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8588  0EF2  3004               	movlw	4
  8589  0EF3  00B7               	movwf	(??_channelView+4)^(0+128)
  8590  0EF4  0837               	movf	(??_channelView+4)^(0+128),w
  8591  0EF5  00A9               	movwf	ftoa@width^(0+128)
  8592  0EF6  01AA               	clrf	ftoa@prec^(0+128)
  8593  0EF7  0AAA               	incf	ftoa@prec^(0+128),f
  8594  0EF8  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8595  0EF9  3194  24EE  318D   	fcall	_ftoa
  8596                           
  8597                           ;menu.c: 94:    OLED_print_xy(n * 12 + 0, 1, str);
  8598  0EFC  0140               	movlb	0	; select bank0
  8599  0EFD  01A7               	clrf	OLED_print_xy@row
  8600  0EFE  0AA7               	incf	OLED_print_xy@row,f
  8601  0EFF  3059               	movlw	low _str
  8602  0F00  00A8               	movwf	OLED_print_xy@s
  8603  0F01  3001               	movlw	high _str
  8604  0F02  00A9               	movwf	OLED_print_xy@s+1
  8605  0F03  300C               	movlw	12
  8606  0F04  0141               	movlb	1	; select bank1
  8607  0F05  00B3               	movwf	??_channelView^(0+128)
  8608  0F06  0833               	movf	??_channelView^(0+128),w
  8609  0F07  0140               	movlb	0	; select bank0
  8610  0F08  00A0               	movwf	___bmul@multiplicand
  8611  0F09  0141               	movlb	1	; select bank1
  8612  0F0A  083B               	movf	channelView@n^(0+128),w
  8613  0F0B  3190  2003  318D   	fcall	___bmul
  8614  0F0E  31A3  2388  318D   	fcall	_OLED_print_xy
  8615                           
  8616                           ;menu.c: 95:    OLED_print_xy(n * 12 + 4, 1, "W ");
  8617  0F11  0140               	movlb	0	; select bank0
  8618  0F12  01A7               	clrf	OLED_print_xy@row
  8619  0F13  0AA7               	incf	OLED_print_xy@row,f
  8620  0F14  30FB               	movlw	low (STR_15| (0+32768))
  8621  0F15  00A8               	movwf	OLED_print_xy@s
  8622  0F16  30A9               	movlw	high (STR_15| (0+32768))
  8623  0F17  00A9               	movwf	OLED_print_xy@s+1
  8624  0F18  300C               	movlw	12
  8625  0F19  0141               	movlb	1	; select bank1
  8626  0F1A  00B3               	movwf	??_channelView^(0+128)
  8627  0F1B  0833               	movf	??_channelView^(0+128),w
  8628  0F1C  0140               	movlb	0	; select bank0
  8629  0F1D  00A0               	movwf	___bmul@multiplicand
  8630  0F1E  0141               	movlb	1	; select bank1
  8631  0F1F  083B               	movf	channelView@n^(0+128),w
  8632  0F20  3190  2003  318D   	fcall	___bmul
  8633  0F23  3E04               	addlw	4
  8634  0F24  31A3  2388  318D   	fcall	_OLED_print_xy
  8635                           
  8636                           ;menu.c: 96:    OLED_print_xy(n * 12 + 6, 1, (data->chData[n].mode == MODE_AUTO ? "auto 
      +                           " : "manual"));
  8637  0F27  0141               	movlb	1	; select bank1
  8638  0F28  083B               	movf	channelView@n^(0+128),w
  8639  0F29  00B3               	movwf	??_channelView^(0+128)
  8640  0F2A  01B4               	clrf	(??_channelView^(0+128)+1)
  8641  0F2B  3005               	movlw	5
  8642  0F2C                     u6075:	
  8643  0F2C  35B3               	lslf	??_channelView^(0+128),f
  8644  0F2D  0DB4               	rlf	(??_channelView^(0+128)+1),f
  8645  0F2E  0B89               	decfsz	9,f
  8646  0F2F  2F2C               	goto	u6075
  8647  0F30  0833               	movf	??_channelView^(0+128),w
  8648  0F31  0731               	addwf	channelView@data^(0+128),w
  8649  0F32  00B5               	movwf	(??_channelView+2)^(0+128)
  8650  0F33  0834               	movf	(??_channelView+1)^(0+128),w
  8651  0F34  3D32               	addwfc	(channelView@data+1)^(0+128),w
  8652  0F35  00B6               	movwf	(??_channelView+3)^(0+128)
  8653  0F36  0835               	movf	(??_channelView+2)^(0+128),w
  8654  0F37  3E4B               	addlw	75
  8655  0F38  0086               	movwf	6
  8656  0F39  3000               	movlw	0
  8657  0F3A  3D36               	addwfc	(??_channelView+3)^(0+128),w
  8658  0F3B  0087               	movwf	7
  8659  0F3C  0301               	decf	1,w
  8660  0F3D  1903               	btfsc	3,2
  8661  0F3E  2F43               	goto	l5321
  8662  0F3F  307F               	movlw	low ((STR_27+2)| (0+32768))
  8663  0F40  00B9               	movwf	_channelView$1226^(0+128)
  8664  0F41  30A9               	movlw	high ((STR_27+2)| (0+32768))
  8665  0F42  2F46               	goto	L6
  8666  0F43                     l5321:	
  8667  0F43  30AF               	movlw	low ((STR_26+1)| (0+32768))
  8668  0F44  00B9               	movwf	_channelView$1226^(0+128)
  8669  0F45  30A9               	movlw	high ((STR_26+1)| (0+32768))
  8670  0F46                     L6:	
  8671  0F46  00BA               	movwf	(_channelView$1226^(0+128)+1)
  8672  0F47  0140               	movlb	0	; select bank0
  8673  0F48  01A7               	clrf	OLED_print_xy@row
  8674  0F49  0AA7               	incf	OLED_print_xy@row,f
  8675  0F4A  0141               	movlb	1	; select bank1
  8676  0F4B  083A               	movf	(_channelView$1226+1)^(0+128),w
  8677  0F4C  0140               	movlb	0	; select bank0
  8678  0F4D  00A9               	movwf	OLED_print_xy@s+1
  8679  0F4E  0141               	movlb	1	; select bank1
  8680  0F4F  0839               	movf	_channelView$1226^(0+128),w
  8681  0F50  0140               	movlb	0	; select bank0
  8682  0F51  00A8               	movwf	OLED_print_xy@s
  8683  0F52  300C               	movlw	12
  8684  0F53  0141               	movlb	1	; select bank1
  8685  0F54  00B3               	movwf	??_channelView^(0+128)
  8686  0F55  0833               	movf	??_channelView^(0+128),w
  8687  0F56  0140               	movlb	0	; select bank0
  8688  0F57  00A0               	movwf	___bmul@multiplicand
  8689  0F58  0141               	movlb	1	; select bank1
  8690  0F59  083B               	movf	channelView@n^(0+128),w
  8691  0F5A  3190  2003  318D   	fcall	___bmul
  8692  0F5D  3E06               	addlw	6
  8693  0F5E  31A3  2388  318D   	fcall	_OLED_print_xy
  8694                           
  8695                           ;menu.c: 97:    break;
  8696  0F61  2FE7               	goto	l5337
  8697  0F62                     l5325:	
  8698                           
  8699                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
  8700  0F62  0140               	movlb	0	; select bank0
  8701  0F63  01A7               	clrf	OLED_print_xy@row
  8702  0F64  0AA7               	incf	OLED_print_xy@row,f
  8703  0F65  3023               	movlw	low (STR_18| (0+32768))
  8704  0F66  00A8               	movwf	OLED_print_xy@s
  8705  0F67  30A9               	movlw	high (STR_18| (0+32768))
  8706  0F68  00A9               	movwf	OLED_print_xy@s+1
  8707  0F69  300C               	movlw	12
  8708  0F6A  0141               	movlb	1	; select bank1
  8709  0F6B  00B3               	movwf	??_channelView^(0+128)
  8710  0F6C  0833               	movf	??_channelView^(0+128),w
  8711  0F6D  0140               	movlb	0	; select bank0
  8712  0F6E  00A0               	movwf	___bmul@multiplicand
  8713  0F6F  0141               	movlb	1	; select bank1
  8714  0F70  083B               	movf	channelView@n^(0+128),w
  8715  0F71  3190  2003  318D   	fcall	___bmul
  8716  0F74  31A3  2388  318D   	fcall	_OLED_print_xy
  8717                           
  8718                           ;menu.c: 100:    break;
  8719  0F77  2FE7               	goto	l5337
  8720  0F78                     l5327:	
  8721                           
  8722                           ;menu.c: 102:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
  8723  0F78  0140               	movlb	0	; select bank0
  8724  0F79  01A7               	clrf	OLED_print_xy@row
  8725  0F7A  0AA7               	incf	OLED_print_xy@row,f
  8726  0F7B  30EF               	movlw	low (STR_19| (0+32768))
  8727  0F7C  00A8               	movwf	OLED_print_xy@s
  8728  0F7D  30A8               	movlw	high (STR_19| (0+32768))
  8729  0F7E  00A9               	movwf	OLED_print_xy@s+1
  8730  0F7F  300C               	movlw	12
  8731  0F80  0141               	movlb	1	; select bank1
  8732  0F81  00B3               	movwf	??_channelView^(0+128)
  8733  0F82  0833               	movf	??_channelView^(0+128),w
  8734  0F83  0140               	movlb	0	; select bank0
  8735  0F84  00A0               	movwf	___bmul@multiplicand
  8736  0F85  0141               	movlb	1	; select bank1
  8737  0F86  083B               	movf	channelView@n^(0+128),w
  8738  0F87  3190  2003  318D   	fcall	___bmul
  8739  0F8A  31A3  2388  318D   	fcall	_OLED_print_xy
  8740                           
  8741                           ;menu.c: 103:    break;
  8742  0F8D  2FE7               	goto	l5337
  8743  0F8E                     l5329:	
  8744                           
  8745                           ;menu.c: 105:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
  8746  0F8E  0140               	movlb	0	; select bank0
  8747  0F8F  01A7               	clrf	OLED_print_xy@row
  8748  0F90  0AA7               	incf	OLED_print_xy@row,f
  8749  0F91  3016               	movlw	low (STR_20| (0+32768))
  8750  0F92  00A8               	movwf	OLED_print_xy@s
  8751  0F93  30A9               	movlw	high (STR_20| (0+32768))
  8752  0F94  00A9               	movwf	OLED_print_xy@s+1
  8753  0F95  300C               	movlw	12
  8754  0F96  0141               	movlb	1	; select bank1
  8755  0F97  00B3               	movwf	??_channelView^(0+128)
  8756  0F98  0833               	movf	??_channelView^(0+128),w
  8757  0F99  0140               	movlb	0	; select bank0
  8758  0F9A  00A0               	movwf	___bmul@multiplicand
  8759  0F9B  0141               	movlb	1	; select bank1
  8760  0F9C  083B               	movf	channelView@n^(0+128),w
  8761  0F9D  3190  2003  318D   	fcall	___bmul
  8762  0FA0  31A3  2388  318D   	fcall	_OLED_print_xy
  8763                           
  8764                           ;menu.c: 106:    break;
  8765  0FA3  2FE7               	goto	l5337
  8766  0FA4                     l5331:	
  8767                           
  8768                           ;menu.c: 108:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
  8769  0FA4  0140               	movlb	0	; select bank0
  8770  0FA5  01A7               	clrf	OLED_print_xy@row
  8771  0FA6  0AA7               	incf	OLED_print_xy@row,f
  8772  0FA7  3030               	movlw	low (STR_21| (0+32768))
  8773  0FA8  00A8               	movwf	OLED_print_xy@s
  8774  0FA9  30A9               	movlw	high (STR_21| (0+32768))
  8775  0FAA  00A9               	movwf	OLED_print_xy@s+1
  8776  0FAB  300C               	movlw	12
  8777  0FAC  0141               	movlb	1	; select bank1
  8778  0FAD  00B3               	movwf	??_channelView^(0+128)
  8779  0FAE  0833               	movf	??_channelView^(0+128),w
  8780  0FAF  0140               	movlb	0	; select bank0
  8781  0FB0  00A0               	movwf	___bmul@multiplicand
  8782  0FB1  0141               	movlb	1	; select bank1
  8783  0FB2  083B               	movf	channelView@n^(0+128),w
  8784  0FB3  3190  2003  318D   	fcall	___bmul
  8785  0FB6  31A3  2388  318D   	fcall	_OLED_print_xy
  8786                           
  8787                           ;menu.c: 109:    break;
  8788  0FB9  2FE7               	goto	l5337
  8789  0FBA                     l5335:	
  8790  0FBA  083B               	movf	channelView@n^(0+128),w
  8791  0FBB  00B3               	movwf	??_channelView^(0+128)
  8792  0FBC  01B4               	clrf	(??_channelView^(0+128)+1)
  8793  0FBD  3005               	movlw	5
  8794  0FBE                     u6095:	
  8795  0FBE  35B3               	lslf	??_channelView^(0+128),f
  8796  0FBF  0DB4               	rlf	(??_channelView^(0+128)+1),f
  8797  0FC0  0B89               	decfsz	9,f
  8798  0FC1  2FBE               	goto	u6095
  8799  0FC2  0833               	movf	??_channelView^(0+128),w
  8800  0FC3  0731               	addwf	channelView@data^(0+128),w
  8801  0FC4  00B5               	movwf	(??_channelView+2)^(0+128)
  8802  0FC5  0834               	movf	(??_channelView+1)^(0+128),w
  8803  0FC6  3D32               	addwfc	(channelView@data+1)^(0+128),w
  8804  0FC7  00B6               	movwf	(??_channelView+3)^(0+128)
  8805  0FC8  0835               	movf	(??_channelView+2)^(0+128),w
  8806  0FC9  3E4C               	addlw	76
  8807  0FCA  0086               	movwf	6
  8808  0FCB  3000               	movlw	0
  8809  0FCC  3D36               	addwfc	(??_channelView+3)^(0+128),w
  8810  0FCD  0087               	movwf	7
  8811  0FCE  0801               	movf	1,w
  8812  0FCF  00B7               	movwf	(??_channelView+4)^(0+128)
  8813  0FD0  01B8               	clrf	((??_channelView+4)^(0+128)+1)
  8814                           
  8815                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8816                           ; Switch size 1, requested type "simple"
  8817                           ; Number of cases is 1, Range of values is 0 to 0
  8818                           ; switch strategies available:
  8819                           ; Name         Instructions Cycles
  8820                           ; simple_byte            4     3 (average)
  8821                           ; direct_byte            8     6 (fixed)
  8822                           ; jumptable            260     6 (fixed)
  8823                           ;	Chosen strategy is simple_byte
  8824  0FD1  0838               	movf	(??_channelView+5)^(0+128),w
  8825  0FD2  3A00               	xorlw	0	; case 0
  8826  0FD3  1903               	skipnz
  8827  0FD4  2FD6               	goto	l5643
  8828  0FD5  2FA4               	goto	l5331
  8829  0FD6                     l5643:	
  8830                           
  8831                           ; Switch size 1, requested type "simple"
  8832                           ; Number of cases is 5, Range of values is 0 to 4
  8833                           ; switch strategies available:
  8834                           ; Name         Instructions Cycles
  8835                           ; direct_byte           16     6 (fixed)
  8836                           ; simple_byte           16     9 (average)
  8837                           ; jumptable            260     6 (fixed)
  8838                           ;	Chosen strategy is simple_byte
  8839  0FD6  0837               	movf	(??_channelView+4)^(0+128),w
  8840  0FD7  3A00               	xorlw	0	; case 0
  8841  0FD8  1903               	skipnz
  8842  0FD9  2EC0               	goto	l5309
  8843  0FDA  3A01               	xorlw	1	; case 1
  8844  0FDB  1903               	skipnz
  8845  0FDC  2ED6               	goto	l5311
  8846  0FDD  3A03               	xorlw	3	; case 2
  8847  0FDE  1903               	skipnz
  8848  0FDF  2F62               	goto	l5325
  8849  0FE0  3A01               	xorlw	1	; case 3
  8850  0FE1  1903               	skipnz
  8851  0FE2  2F78               	goto	l5327
  8852  0FE3  3A07               	xorlw	7	; case 4
  8853  0FE4  1903               	skipnz
  8854  0FE5  2F8E               	goto	l5329
  8855  0FE6  2FA4               	goto	l5331
  8856  0FE7                     l5337:	
  8857                           
  8858                           ;menu.c: 111:  }
  8859  0FE7  3001               	movlw	1
  8860  0FE8  0141               	movlb	1	; select bank1
  8861  0FE9  00B3               	movwf	??_channelView^(0+128)
  8862  0FEA  0833               	movf	??_channelView^(0+128),w
  8863  0FEB  07BB               	addwf	channelView@n^(0+128),f
  8864  0FEC  2EBB               	goto	l5305
  8865  0FED                     l5341:	
  8866                           
  8867                           ;menu.c: 112:  page = paging(page, 4);
  8868  0FED  3004               	movlw	4
  8869  0FEE  00B3               	movwf	??_channelView^(0+128)
  8870  0FEF  0833               	movf	??_channelView^(0+128),w
  8871  0FF0  0140               	movlb	0	; select bank0
  8872  0FF1  00A7               	movwf	paging@lastPage
  8873  0FF2  0141               	movlb	1	; select bank1
  8874  0FF3  0862               	movf	channelView@page^(0+128),w
  8875  0FF4  31A7  2795         	fcall	_paging
  8876  0FF6  0141               	movlb	1	; select bank1
  8877  0FF7  00B4               	movwf	(??_channelView+1)^(0+128)
  8878  0FF8  0834               	movf	(??_channelView+1)^(0+128),w
  8879  0FF9  00E2               	movwf	channelView@page^(0+128)
  8880                           
  8881                           ;menu.c: 113:  selectedChannel = page;
  8882  0FFA  0862               	movf	channelView@page^(0+128),w
  8883  0FFB  00B3               	movwf	??_channelView^(0+128)
  8884  0FFC  0833               	movf	??_channelView^(0+128),w
  8885  0FFD  00E4               	movwf	_selectedChannel^(0+128)
  8886                           
  8887                           ;menu.c: 115:  return page;
  8888  0FFE  0862               	movf	channelView@page^(0+128),w
  8889  0FFF  0008               	return
  8890  1000                     __end_of_channelView:	
  8891                           
  8892                           	psect	text13
  8893  08D1                     __ptext13:	
  8894 ;; *************** function _statusView *****************
  8895 ;; Defined at:
  8896 ;;		line 18 in file "menu.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  data            2   17[BANK1 ] PTR struct .
  8899 ;;		 -> data(173), 
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;		None
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      unsigned char 
  8904 ;; Registers used:
  8905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8911 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8913 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8914 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8915 ;;Total ram usage:        4 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    9
  8918 ;; This function calls:
  8919 ;;		_OLED_print_xy
  8920 ;;		_ftoa
  8921 ;;		_paging
  8922 ;;		_returnToPage
  8923 ;; This function is called by:
  8924 ;;		_menu
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           
  8929                           ;psect for function _statusView
  8930  08D1                     _statusView:	
  8931                           
  8932                           ;menu.c: 18: uint8_t statusView(t_globalData *data);menu.c: 19: {;menu.c: 20:  static ui
      +                          nt8_t page = 0;;menu.c: 21:  static uint8_t prevSensorStat = 1;;menu.c: 24:  if (prevSen
      +                          sorStat != data->status.SENSOR_OK) {
  8933                           
  8934                           ;incstack = 0
  8935                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8936  08D1  0141               	movlb	1	; select bank1
  8937  08D2  0831               	movf	statusView@data^(0+128),w
  8938  08D3  3E2C               	addlw	44
  8939  08D4  0086               	movwf	6
  8940  08D5  3000               	movlw	0
  8941  08D6  3D32               	addwfc	(statusView@data+1)^(0+128),w
  8942  08D7  0087               	movwf	7
  8943  08D8  0C01               	rrf	1,w
  8944  08D9  3901               	andlw	1
  8945  08DA  066E               	xorwf	statusView@prevSensorStat^(0+128),w
  8946  08DB  1903               	skipnz
  8947  08DC  28F7               	goto	l4315
  8948                           
  8949                           ;menu.c: 25:   prevSensorStat = data->status.SENSOR_OK;
  8950  08DD  0831               	movf	statusView@data^(0+128),w
  8951  08DE  3E2C               	addlw	44
  8952  08DF  0086               	movwf	6
  8953  08E0  3000               	movlw	0
  8954  08E1  3D32               	addwfc	(statusView@data+1)^(0+128),w
  8955  08E2  0087               	movwf	7
  8956  08E3  3000               	movlw	0
  8957  08E4  1881               	btfsc	1,1
  8958  08E5  3001               	movlw	1
  8959  08E6  00EE               	movwf	statusView@prevSensorStat^(0+128)
  8960                           
  8961                           ;menu.c: 27:   if (data->status.SENSOR_OK)
  8962  08E7  0831               	movf	statusView@data^(0+128),w
  8963  08E8  3E2C               	addlw	44
  8964  08E9  0086               	movwf	6
  8965  08EA  3000               	movlw	0
  8966  08EB  3D32               	addwfc	(statusView@data+1)^(0+128),w
  8967  08EC  0087               	movwf	7
  8968  08ED  1C81               	btfss	1,1
  8969  08EE  28F1               	goto	l4311
  8970                           
  8971                           ;menu.c: 28:    page = 0;
  8972  08EF  01E3               	clrf	statusView@page^(0+128)
  8973  08F0  28F5               	goto	l4313
  8974  08F1                     l4311:	
  8975                           
  8976                           ;menu.c: 30:    page = 3;
  8977  08F1  3003               	movlw	3
  8978  08F2  00B3               	movwf	??_statusView^(0+128)
  8979  08F3  0833               	movf	??_statusView^(0+128),w
  8980  08F4  00E3               	movwf	statusView@page^(0+128)
  8981  08F5                     l4313:	
  8982                           
  8983                           ;menu.c: 31:   g_updateScreen = 1;
  8984  08F5  01EF               	clrf	_g_updateScreen^(0+128)
  8985  08F6  0AEF               	incf	_g_updateScreen^(0+128),f
  8986  08F7                     l4315:	
  8987                           
  8988                           ;menu.c: 34:  returnToPage(page);
  8989  08F7  0863               	movf	statusView@page^(0+128),w
  8990  08F8  31A3  23BA  3188   	fcall	_returnToPage
  8991                           
  8992                           ;menu.c: 35:  if (g_updateScreen)
  8993  08FB  0141               	movlb	1	; select bank1
  8994  08FC  086F               	movf	_g_updateScreen^(0+128),w
  8995  08FD  1903               	btfsc	3,2
  8996  08FE  2909               	goto	l4321
  8997                           
  8998                           ;menu.c: 36:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   Power");
  8999  08FF  0140               	movlb	0	; select bank0
  9000  0900  01A7               	clrf	OLED_print_xy@row
  9001  0901  301B               	movlw	low (STR_3| (0+32768))
  9002  0902  00A8               	movwf	OLED_print_xy@s
  9003  0903  30A8               	movlw	high (STR_3| (0+32768))
  9004  0904  00A9               	movwf	OLED_print_xy@s+1
  9005  0905  3000               	movlw	0
  9006  0906  31A3  2388  3188   	fcall	_OLED_print_xy
  9007  0909                     l4321:	
  9008                           
  9009                           ;menu.c: 37:  if (data->status.AUX_SENSOR_OK) {
  9010  0909  0141               	movlb	1	; select bank1
  9011  090A  0831               	movf	statusView@data^(0+128),w
  9012  090B  3E2C               	addlw	44
  9013  090C  0086               	movwf	6
  9014  090D  3000               	movlw	0
  9015  090E  3D32               	addwfc	(statusView@data+1)^(0+128),w
  9016  090F  0087               	movwf	7
  9017  0910  1D01               	btfss	1,2
  9018  0911  2969               	goto	l4333
  9019                           
  9020                           ;menu.c: 38:   ftoa(str, data->tempC, 5, 1);
  9021  0912  0831               	movf	statusView@data^(0+128),w
  9022  0913  0086               	movwf	6
  9023  0914  0832               	movf	(statusView@data+1)^(0+128),w
  9024  0915  0087               	movwf	7
  9025  0916  3F40               	moviw [0]fsr1
  9026  0917  00A5               	movwf	ftoa@fValue^(0+128)
  9027  0918  3F41               	moviw [1]fsr1
  9028  0919  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9029  091A  3F42               	moviw [2]fsr1
  9030  091B  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9031  091C  3F43               	moviw [3]fsr1
  9032  091D  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9033  091E  3005               	movlw	5
  9034  091F  00B3               	movwf	??_statusView^(0+128)
  9035  0920  0833               	movf	??_statusView^(0+128),w
  9036  0921  00A9               	movwf	ftoa@width^(0+128)
  9037  0922  01AA               	clrf	ftoa@prec^(0+128)
  9038  0923  0AAA               	incf	ftoa@prec^(0+128),f
  9039  0924  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9040  0925  3194  24EE  3188   	fcall	_ftoa
  9041                           
  9042                           ;menu.c: 39:   OLED_print_xy(0, 1, str);
  9043  0928  0140               	movlb	0	; select bank0
  9044  0929  01A7               	clrf	OLED_print_xy@row
  9045  092A  0AA7               	incf	OLED_print_xy@row,f
  9046  092B  3059               	movlw	low _str
  9047  092C  00A8               	movwf	OLED_print_xy@s
  9048  092D  3001               	movlw	high _str
  9049  092E  00A9               	movwf	OLED_print_xy@s+1
  9050  092F  3000               	movlw	0
  9051  0930  31A3  2388  3188   	fcall	_OLED_print_xy
  9052                           
  9053                           ;menu.c: 40:   OLED_print_xy(5, 1, "\001 \002");
  9054  0933  0140               	movlb	0	; select bank0
  9055  0934  01A7               	clrf	OLED_print_xy@row
  9056  0935  0AA7               	incf	OLED_print_xy@row,f
  9057  0936  30DF               	movlw	low (STR_4| (0+32768))
  9058  0937  00A8               	movwf	OLED_print_xy@s
  9059  0938  30A9               	movlw	high (STR_4| (0+32768))
  9060  0939  00A9               	movwf	OLED_print_xy@s+1
  9061  093A  3005               	movlw	5
  9062  093B  31A3  2388  3188   	fcall	_OLED_print_xy
  9063                           
  9064                           ;menu.c: 41:   ftoa(str, data->tempAux, 3, 0);
  9065  093E  0141               	movlb	1	; select bank1
  9066  093F  0831               	movf	statusView@data^(0+128),w
  9067  0940  0086               	movwf	6
  9068  0941  0832               	movf	(statusView@data+1)^(0+128),w
  9069  0942  0087               	movwf	7
  9070  0943  3150               	addfsr 1,16
  9071  0944  3F40               	moviw [0]fsr1
  9072  0945  00A5               	movwf	ftoa@fValue^(0+128)
  9073  0946  3F41               	moviw [1]fsr1
  9074  0947  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9075  0948  3F42               	moviw [2]fsr1
  9076  0949  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9077  094A  3F43               	moviw [3]fsr1
  9078  094B  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9079  094C  3003               	movlw	3
  9080  094D  00B3               	movwf	??_statusView^(0+128)
  9081  094E  0833               	movf	??_statusView^(0+128),w
  9082  094F  00A9               	movwf	ftoa@width^(0+128)
  9083  0950  01AA               	clrf	ftoa@prec^(0+128)
  9084  0951  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9085  0952  3194  24EE  3188   	fcall	_ftoa
  9086                           
  9087                           ;menu.c: 42:   OLED_print_xy(8, 1, str);
  9088  0955  0140               	movlb	0	; select bank0
  9089  0956  01A7               	clrf	OLED_print_xy@row
  9090  0957  0AA7               	incf	OLED_print_xy@row,f
  9091  0958  3059               	movlw	low _str
  9092  0959  00A8               	movwf	OLED_print_xy@s
  9093  095A  3001               	movlw	high _str
  9094  095B  00A9               	movwf	OLED_print_xy@s+1
  9095  095C  3008               	movlw	8
  9096  095D  31A3  2388  3188   	fcall	_OLED_print_xy
  9097                           
  9098                           ;menu.c: 43:   OLED_print_xy(11, 1, "\001");
  9099  0960  0140               	movlb	0	; select bank0
  9100  0961  01A7               	clrf	OLED_print_xy@row
  9101  0962  0AA7               	incf	OLED_print_xy@row,f
  9102  0963  30FE               	movlw	low (STR_5| (0+32768))
  9103  0964  00A8               	movwf	OLED_print_xy@s
  9104  0965  30A9               	movlw	high (STR_5| (0+32768))
  9105  0966  00A9               	movwf	OLED_print_xy@s+1
  9106  0967  300B               	movlw	11
  9107  0968  2992               	goto	L7
  9108  0969                     l4333:	
  9109                           ;menu.c: 44:  } else {
  9110                           
  9111                           
  9112                           ;menu.c: 45:   ftoa(str, data->tempC, 5, 1);
  9113  0969  0831               	movf	statusView@data^(0+128),w
  9114  096A  0086               	movwf	6
  9115  096B  0832               	movf	(statusView@data+1)^(0+128),w
  9116  096C  0087               	movwf	7
  9117  096D  3F40               	moviw [0]fsr1
  9118  096E  00A5               	movwf	ftoa@fValue^(0+128)
  9119  096F  3F41               	moviw [1]fsr1
  9120  0970  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9121  0971  3F42               	moviw [2]fsr1
  9122  0972  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9123  0973  3F43               	moviw [3]fsr1
  9124  0974  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9125  0975  3005               	movlw	5
  9126  0976  00B3               	movwf	??_statusView^(0+128)
  9127  0977  0833               	movf	??_statusView^(0+128),w
  9128  0978  00A9               	movwf	ftoa@width^(0+128)
  9129  0979  01AA               	clrf	ftoa@prec^(0+128)
  9130  097A  0AAA               	incf	ftoa@prec^(0+128),f
  9131  097B  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9132  097C  3194  24EE  3188   	fcall	_ftoa
  9133                           
  9134                           ;menu.c: 46:   OLED_print_xy(0, 1, str);
  9135  097F  0140               	movlb	0	; select bank0
  9136  0980  01A7               	clrf	OLED_print_xy@row
  9137  0981  0AA7               	incf	OLED_print_xy@row,f
  9138  0982  3059               	movlw	low _str
  9139  0983  00A8               	movwf	OLED_print_xy@s
  9140  0984  3001               	movlw	high _str
  9141  0985  00A9               	movwf	OLED_print_xy@s+1
  9142  0986  3000               	movlw	0
  9143  0987  31A3  2388  3188   	fcall	_OLED_print_xy
  9144                           
  9145                           ;menu.c: 47:   OLED_print_xy(5, 1, "\001      ");
  9146  098A  0140               	movlb	0	; select bank0
  9147  098B  01A7               	clrf	OLED_print_xy@row
  9148  098C  0AA7               	incf	OLED_print_xy@row,f
  9149  098D  3096               	movlw	low (STR_6| (0+32768))
  9150  098E  00A8               	movwf	OLED_print_xy@s
  9151  098F  30A9               	movlw	high (STR_6| (0+32768))
  9152  0990  00A9               	movwf	OLED_print_xy@s+1
  9153  0991  3005               	movlw	5
  9154  0992                     L7:	
  9155  0992  31A3  2388  3188   	fcall	_OLED_print_xy
  9156                           
  9157                           ;menu.c: 49:  ftoa(str, data->relHum, 5, 1);
  9158                           
  9159                           ;menu.c: 48:  }
  9160  0995  0141               	movlb	1	; select bank1
  9161  0996  0831               	movf	statusView@data^(0+128),w
  9162  0997  0086               	movwf	6
  9163  0998  0832               	movf	(statusView@data+1)^(0+128),w
  9164  0999  0087               	movwf	7
  9165  099A  3144               	addfsr 1,4
  9166  099B  3F40               	moviw [0]fsr1
  9167  099C  00A5               	movwf	ftoa@fValue^(0+128)
  9168  099D  3F41               	moviw [1]fsr1
  9169  099E  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9170  099F  3F42               	moviw [2]fsr1
  9171  09A0  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9172  09A1  3F43               	moviw [3]fsr1
  9173  09A2  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9174  09A3  3005               	movlw	5
  9175  09A4  00B3               	movwf	??_statusView^(0+128)
  9176  09A5  0833               	movf	??_statusView^(0+128),w
  9177  09A6  00A9               	movwf	ftoa@width^(0+128)
  9178  09A7  01AA               	clrf	ftoa@prec^(0+128)
  9179  09A8  0AAA               	incf	ftoa@prec^(0+128),f
  9180  09A9  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9181  09AA  3194  24EE  3188   	fcall	_ftoa
  9182                           
  9183                           ;menu.c: 50:  OLED_print_xy(12, 1, str);
  9184  09AD  0140               	movlb	0	; select bank0
  9185  09AE  01A7               	clrf	OLED_print_xy@row
  9186  09AF  0AA7               	incf	OLED_print_xy@row,f
  9187  09B0  3059               	movlw	low _str
  9188  09B1  00A8               	movwf	OLED_print_xy@s
  9189  09B2  3001               	movlw	high _str
  9190  09B3  00A9               	movwf	OLED_print_xy@s+1
  9191  09B4  300C               	movlw	12
  9192  09B5  31A3  2388  3188   	fcall	_OLED_print_xy
  9193                           
  9194                           ;menu.c: 51:  OLED_print_xy(12 + 5, 1, "%     ");
  9195  09B8  0140               	movlb	0	; select bank0
  9196  09B9  01A7               	clrf	OLED_print_xy@row
  9197  09BA  0AA7               	incf	OLED_print_xy@row,f
  9198  09BB  30CB               	movlw	low (STR_7| (0+32768))
  9199  09BC  00A8               	movwf	OLED_print_xy@s
  9200  09BD  30A9               	movlw	high (STR_7| (0+32768))
  9201  09BE  00A9               	movwf	OLED_print_xy@s+1
  9202  09BF  3011               	movlw	17
  9203  09C0  31A3  2388  3188   	fcall	_OLED_print_xy
  9204                           
  9205                           ;menu.c: 52:  ftoa(str, data->dewPointC, 5, 1);
  9206  09C3  0141               	movlb	1	; select bank1
  9207  09C4  0831               	movf	statusView@data^(0+128),w
  9208  09C5  0086               	movwf	6
  9209  09C6  0832               	movf	(statusView@data+1)^(0+128),w
  9210  09C7  0087               	movwf	7
  9211  09C8  3148               	addfsr 1,8
  9212  09C9  3F40               	moviw [0]fsr1
  9213  09CA  00A5               	movwf	ftoa@fValue^(0+128)
  9214  09CB  3F41               	moviw [1]fsr1
  9215  09CC  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9216  09CD  3F42               	moviw [2]fsr1
  9217  09CE  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9218  09CF  3F43               	moviw [3]fsr1
  9219  09D0  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9220  09D1  3005               	movlw	5
  9221  09D2  00B3               	movwf	??_statusView^(0+128)
  9222  09D3  0833               	movf	??_statusView^(0+128),w
  9223  09D4  00A9               	movwf	ftoa@width^(0+128)
  9224  09D5  01AA               	clrf	ftoa@prec^(0+128)
  9225  09D6  0AAA               	incf	ftoa@prec^(0+128),f
  9226  09D7  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9227  09D8  3194  24EE  3188   	fcall	_ftoa
  9228                           
  9229                           ;menu.c: 53:  OLED_print_xy(2 * 12, 1, str);
  9230  09DB  0140               	movlb	0	; select bank0
  9231  09DC  01A7               	clrf	OLED_print_xy@row
  9232  09DD  0AA7               	incf	OLED_print_xy@row,f
  9233  09DE  3059               	movlw	low _str
  9234  09DF  00A8               	movwf	OLED_print_xy@s
  9235  09E0  3001               	movlw	high _str
  9236  09E1  00A9               	movwf	OLED_print_xy@s+1
  9237  09E2  3018               	movlw	24
  9238  09E3  31A3  2388  3188   	fcall	_OLED_print_xy
  9239                           
  9240                           ;menu.c: 54:  OLED_print_xy(2 * 12 +5, 1, "\001      ");
  9241  09E6  0140               	movlb	0	; select bank0
  9242  09E7  01A7               	clrf	OLED_print_xy@row
  9243  09E8  0AA7               	incf	OLED_print_xy@row,f
  9244  09E9  3096               	movlw	low (STR_6| (0+32768))
  9245  09EA  00A8               	movwf	OLED_print_xy@s
  9246  09EB  30A9               	movlw	high (STR_6| (0+32768))
  9247  09EC  00A9               	movwf	OLED_print_xy@s+1
  9248  09ED  301D               	movlw	29
  9249  09EE  31A3  2388  3188   	fcall	_OLED_print_xy
  9250                           
  9251                           ;menu.c: 55:  ftoa(str, data->voltage, 4, 1);
  9252  09F1  0141               	movlb	1	; select bank1
  9253  09F2  0831               	movf	statusView@data^(0+128),w
  9254  09F3  0086               	movwf	6
  9255  09F4  0832               	movf	(statusView@data+1)^(0+128),w
  9256  09F5  0087               	movwf	7
  9257  09F6  3154               	addfsr 1,20
  9258  09F7  3F40               	moviw [0]fsr1
  9259  09F8  00A5               	movwf	ftoa@fValue^(0+128)
  9260  09F9  3F41               	moviw [1]fsr1
  9261  09FA  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9262  09FB  3F42               	moviw [2]fsr1
  9263  09FC  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9264  09FD  3F43               	moviw [3]fsr1
  9265  09FE  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9266  09FF  3004               	movlw	4
  9267  0A00  00B3               	movwf	??_statusView^(0+128)
  9268  0A01  0833               	movf	??_statusView^(0+128),w
  9269  0A02  00A9               	movwf	ftoa@width^(0+128)
  9270  0A03  01AA               	clrf	ftoa@prec^(0+128)
  9271  0A04  0AAA               	incf	ftoa@prec^(0+128),f
  9272  0A05  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9273  0A06  3194  24EE  3188   	fcall	_ftoa
  9274                           
  9275                           ;menu.c: 56:  OLED_print_xy(3 * 12, 1, str);
  9276  0A09  0140               	movlb	0	; select bank0
  9277  0A0A  01A7               	clrf	OLED_print_xy@row
  9278  0A0B  0AA7               	incf	OLED_print_xy@row,f
  9279  0A0C  3059               	movlw	low _str
  9280  0A0D  00A8               	movwf	OLED_print_xy@s
  9281  0A0E  3001               	movlw	high _str
  9282  0A0F  00A9               	movwf	OLED_print_xy@s+1
  9283  0A10  3024               	movlw	36
  9284  0A11  31A3  2388  3188   	fcall	_OLED_print_xy
  9285                           
  9286                           ;menu.c: 57:  OLED_print_xy(3 * 12 +4, 1, "V  ");
  9287  0A14  0140               	movlb	0	; select bank0
  9288  0A15  01A7               	clrf	OLED_print_xy@row
  9289  0A16  0AA7               	incf	OLED_print_xy@row,f
  9290  0A17  30E3               	movlw	low (STR_9| (0+32768))
  9291  0A18  00A8               	movwf	OLED_print_xy@s
  9292  0A19  30A9               	movlw	high (STR_9| (0+32768))
  9293  0A1A  00A9               	movwf	OLED_print_xy@s+1
  9294  0A1B  3028               	movlw	40
  9295  0A1C  31A3  2388  3188   	fcall	_OLED_print_xy
  9296                           
  9297                           ;menu.c: 58:  ftoa(str, data->power, 4, 1);
  9298  0A1F  0141               	movlb	1	; select bank1
  9299  0A20  0831               	movf	statusView@data^(0+128),w
  9300  0A21  0086               	movwf	6
  9301  0A22  0832               	movf	(statusView@data+1)^(0+128),w
  9302  0A23  0087               	movwf	7
  9303  0A24  315C               	addfsr 1,28
  9304  0A25  3F40               	moviw [0]fsr1
  9305  0A26  00A5               	movwf	ftoa@fValue^(0+128)
  9306  0A27  3F41               	moviw [1]fsr1
  9307  0A28  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9308  0A29  3F42               	moviw [2]fsr1
  9309  0A2A  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9310  0A2B  3F43               	moviw [3]fsr1
  9311  0A2C  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9312  0A2D  3004               	movlw	4
  9313  0A2E  00B3               	movwf	??_statusView^(0+128)
  9314  0A2F  0833               	movf	??_statusView^(0+128),w
  9315  0A30  00A9               	movwf	ftoa@width^(0+128)
  9316  0A31  01AA               	clrf	ftoa@prec^(0+128)
  9317  0A32  0AAA               	incf	ftoa@prec^(0+128),f
  9318  0A33  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9319  0A34  3194  24EE  3188   	fcall	_ftoa
  9320                           
  9321                           ;menu.c: 59:  OLED_print_xy(3 * 12 +7, 1, str);
  9322  0A37  0140               	movlb	0	; select bank0
  9323  0A38  01A7               	clrf	OLED_print_xy@row
  9324  0A39  0AA7               	incf	OLED_print_xy@row,f
  9325  0A3A  3059               	movlw	low _str
  9326  0A3B  00A8               	movwf	OLED_print_xy@s
  9327  0A3C  3001               	movlw	high _str
  9328  0A3D  00A9               	movwf	OLED_print_xy@s+1
  9329  0A3E  302B               	movlw	43
  9330  0A3F  31A3  2388  3188   	fcall	_OLED_print_xy
  9331                           
  9332                           ;menu.c: 60:  OLED_print_xy(3 * 12 +11, 1, "W");
  9333  0A42  0140               	movlb	0	; select bank0
  9334  0A43  01A7               	clrf	OLED_print_xy@row
  9335  0A44  0AA7               	incf	OLED_print_xy@row,f
  9336  0A45  3000               	movlw	low (STR_10| (0+32768))
  9337  0A46  00A8               	movwf	OLED_print_xy@s
  9338  0A47  30AA               	movlw	high (STR_10| (0+32768))
  9339  0A48  00A9               	movwf	OLED_print_xy@s+1
  9340  0A49  302F               	movlw	47
  9341  0A4A  31A3  2388  3188   	fcall	_OLED_print_xy
  9342                           
  9343                           ;menu.c: 61:  if (data->status.SENSOR_OK)
  9344  0A4D  0141               	movlb	1	; select bank1
  9345  0A4E  0831               	movf	statusView@data^(0+128),w
  9346  0A4F  3E2C               	addlw	44
  9347  0A50  0086               	movwf	6
  9348  0A51  3000               	movlw	0
  9349  0A52  3D32               	addwfc	(statusView@data+1)^(0+128),w
  9350  0A53  0087               	movwf	7
  9351  0A54  1C81               	btfss	1,1
  9352  0A55  2A63               	goto	l4359
  9353                           
  9354                           ;menu.c: 62:   page = paging(page, 4);
  9355  0A56  3004               	movlw	4
  9356  0A57  00B3               	movwf	??_statusView^(0+128)
  9357  0A58  0833               	movf	??_statusView^(0+128),w
  9358  0A59  0140               	movlb	0	; select bank0
  9359  0A5A  00A7               	movwf	paging@lastPage
  9360  0A5B  0141               	movlb	1	; select bank1
  9361  0A5C  0863               	movf	statusView@page^(0+128),w
  9362  0A5D  31A7  2795         	fcall	_paging
  9363  0A5F  0141               	movlb	1	; select bank1
  9364  0A60  00B4               	movwf	(??_statusView+1)^(0+128)
  9365  0A61  0834               	movf	(??_statusView+1)^(0+128),w
  9366  0A62  00E3               	movwf	statusView@page^(0+128)
  9367  0A63                     l4359:	
  9368                           
  9369                           ;menu.c: 63:  return page;
  9370  0A63  0863               	movf	statusView@page^(0+128),w
  9371  0A64  0008               	return
  9372  0A65                     __end_of_statusView:	
  9373                           
  9374                           	psect	text14
  9375  081E                     __ptext14:	
  9376 ;; *************** function _spinInput *****************
  9377 ;; Defined at:
  9378 ;;		line 96 in file "inputs.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;  input           2    0[BANK1 ] PTR float 
  9381 ;;		 -> data.chData(128), data(173), 
  9382 ;;  min             4    2[BANK1 ] float 
  9383 ;;  max             4    6[BANK1 ] float 
  9384 ;;  step            4   10[BANK1 ] float 
  9385 ;; Auto vars:     Size  Location     Type
  9386 ;;  dir             1   75[BANK0 ] enum E7886
  9387 ;; Return value:  Size  Location     Type
  9388 ;;                  1    wreg      void 
  9389 ;; Registers used:
  9390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9391 ;; Tracked objects:
  9392 ;;		On entry : 0/0
  9393 ;;		On exit  : 0/0
  9394 ;;		Unchanged: 0/0
  9395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9396 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9397 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9399 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9400 ;;Total ram usage:       16 bytes
  9401 ;; Hardware stack levels used:    1
  9402 ;; Hardware stack levels required when called:    5
  9403 ;; This function calls:
  9404 ;;		___fladd
  9405 ;;		___flge
  9406 ;;		___flsub
  9407 ;;		_getRotDir
  9408 ;; This function is called by:
  9409 ;;		_setOutputPower
  9410 ;;		_setLensDia
  9411 ;;		_setDPOffset
  9412 ;;		_setSkyTemp
  9413 ;;		_setFudgeFactor
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           
  9418                           ;psect for function _spinInput
  9419  081E                     _spinInput:	
  9420                           
  9421                           ;inputs.c: 96: void spinInput(float *input, float min, float max, float step);inputs.c: 
      +                          97: {;inputs.c: 98:  enum e_direction dir = getRotDir();
  9422                           
  9423                           ;incstack = 0
  9424                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9425  081E  31A1  21D6  3188   	fcall	_getRotDir
  9426  0821  0140               	movlb	0	; select bank0
  9427  0822  00EA               	movwf	??_spinInput
  9428  0823  086A               	movf	??_spinInput,w
  9429  0824  00EB               	movwf	spinInput@dir
  9430                           
  9431                           ;inputs.c: 100:  if ((dir == ROT_CCW) && (*input > min))
  9432  0825  3002               	movlw	2
  9433  0826  066B               	xorwf	spinInput@dir,w
  9434  0827  1D03               	btfss	3,2
  9435  0828  287B               	goto	l4047
  9436  0829  0141               	movlb	1	; select bank1
  9437  082A  0825               	movf	(spinInput@min+3)^(0+128),w
  9438  082B  0140               	movlb	0	; select bank0
  9439  082C  00A3               	movwf	___flge@ff1+3
  9440  082D  0141               	movlb	1	; select bank1
  9441  082E  0824               	movf	(spinInput@min+2)^(0+128),w
  9442  082F  0140               	movlb	0	; select bank0
  9443  0830  00A2               	movwf	___flge@ff1+2
  9444  0831  0141               	movlb	1	; select bank1
  9445  0832  0823               	movf	(spinInput@min+1)^(0+128),w
  9446  0833  0140               	movlb	0	; select bank0
  9447  0834  00A1               	movwf	___flge@ff1+1
  9448  0835  0141               	movlb	1	; select bank1
  9449  0836  0822               	movf	spinInput@min^(0+128),w
  9450  0837  0140               	movlb	0	; select bank0
  9451  0838  00A0               	movwf	___flge@ff1
  9452  0839  0141               	movlb	1	; select bank1
  9453  083A  0820               	movf	spinInput@input^(0+128),w
  9454  083B  0086               	movwf	6
  9455  083C  0821               	movf	(spinInput@input+1)^(0+128),w
  9456  083D  0087               	movwf	7
  9457  083E  3F40               	moviw [0]fsr1
  9458  083F  0140               	movlb	0	; select bank0
  9459  0840  00A4               	movwf	___flge@ff2
  9460  0841  3F41               	moviw [1]fsr1
  9461  0842  00A5               	movwf	___flge@ff2+1
  9462  0843  3F42               	moviw [2]fsr1
  9463  0844  00A6               	movwf	___flge@ff2+2
  9464  0845  3F43               	moviw [3]fsr1
  9465  0846  00A7               	movwf	___flge@ff2+3
  9466  0847  3199  21F1  3188   	fcall	___flge
  9467  084A  1803               	btfsc	3,0
  9468  084B  287B               	goto	l4047
  9469                           
  9470                           ;inputs.c: 101:   *input -= step;
  9471  084C  0141               	movlb	1	; select bank1
  9472  084D  082D               	movf	(spinInput@step+3)^(0+128),w
  9473  084E  0140               	movlb	0	; select bank0
  9474  084F  00E5               	movwf	___flsub@a+3
  9475  0850  0141               	movlb	1	; select bank1
  9476  0851  082C               	movf	(spinInput@step+2)^(0+128),w
  9477  0852  0140               	movlb	0	; select bank0
  9478  0853  00E4               	movwf	___flsub@a+2
  9479  0854  0141               	movlb	1	; select bank1
  9480  0855  082B               	movf	(spinInput@step+1)^(0+128),w
  9481  0856  0140               	movlb	0	; select bank0
  9482  0857  00E3               	movwf	___flsub@a+1
  9483  0858  0141               	movlb	1	; select bank1
  9484  0859  082A               	movf	spinInput@step^(0+128),w
  9485  085A  0140               	movlb	0	; select bank0
  9486  085B  00E2               	movwf	___flsub@a
  9487  085C  0141               	movlb	1	; select bank1
  9488  085D  0820               	movf	spinInput@input^(0+128),w
  9489  085E  0086               	movwf	6
  9490  085F  0821               	movf	(spinInput@input+1)^(0+128),w
  9491  0860  0087               	movwf	7
  9492  0861  3F40               	moviw [0]fsr1
  9493  0862  0140               	movlb	0	; select bank0
  9494  0863  00E6               	movwf	___flsub@b
  9495  0864  3F41               	moviw [1]fsr1
  9496  0865  00E7               	movwf	___flsub@b+1
  9497  0866  3F42               	moviw [2]fsr1
  9498  0867  00E8               	movwf	___flsub@b+2
  9499  0868  3F43               	moviw [3]fsr1
  9500  0869  00E9               	movwf	___flsub@b+3
  9501  086A  31A2  2261         	fcall	___flsub
  9502  086C  0141               	movlb	1	; select bank1
  9503  086D  0820               	movf	spinInput@input^(0+128),w
  9504  086E  0086               	movwf	6
  9505  086F  0821               	movf	(spinInput@input+1)^(0+128),w
  9506  0870  0087               	movwf	7
  9507  0871  0140               	movlb	0	; select bank0
  9508  0872  0862               	movf	?___flsub,w
  9509  0873  3FC0               	movwi [0]fsr1
  9510  0874  0863               	movf	?___flsub+1,w
  9511  0875  3FC1               	movwi [1]fsr1
  9512  0876  0864               	movf	?___flsub+2,w
  9513  0877  3FC2               	movwi [2]fsr1
  9514  0878  0865               	movf	?___flsub+3,w
  9515  0879  3FC3               	movwi [3]fsr1
  9516  087A  0008               	return
  9517  087B                     l4047:	
  9518  087B  0140               	movlb	0	; select bank0
  9519  087C  036B               	decf	spinInput@dir,w
  9520  087D  1D03               	btfss	3,2
  9521  087E  0008               	return
  9522  087F  0141               	movlb	1	; select bank1
  9523  0880  0820               	movf	spinInput@input^(0+128),w
  9524  0881  0086               	movwf	6
  9525  0882  0821               	movf	(spinInput@input+1)^(0+128),w
  9526  0883  0087               	movwf	7
  9527  0884  3F40               	moviw [0]fsr1
  9528  0885  0140               	movlb	0	; select bank0
  9529  0886  00A0               	movwf	___flge@ff1
  9530  0887  3F41               	moviw [1]fsr1
  9531  0888  00A1               	movwf	___flge@ff1+1
  9532  0889  3F42               	moviw [2]fsr1
  9533  088A  00A2               	movwf	___flge@ff1+2
  9534  088B  3F43               	moviw [3]fsr1
  9535  088C  00A3               	movwf	___flge@ff1+3
  9536  088D  0141               	movlb	1	; select bank1
  9537  088E  0829               	movf	(spinInput@max+3)^(0+128),w
  9538  088F  0140               	movlb	0	; select bank0
  9539  0890  00A7               	movwf	___flge@ff2+3
  9540  0891  0141               	movlb	1	; select bank1
  9541  0892  0828               	movf	(spinInput@max+2)^(0+128),w
  9542  0893  0140               	movlb	0	; select bank0
  9543  0894  00A6               	movwf	___flge@ff2+2
  9544  0895  0141               	movlb	1	; select bank1
  9545  0896  0827               	movf	(spinInput@max+1)^(0+128),w
  9546  0897  0140               	movlb	0	; select bank0
  9547  0898  00A5               	movwf	___flge@ff2+1
  9548  0899  0141               	movlb	1	; select bank1
  9549  089A  0826               	movf	spinInput@max^(0+128),w
  9550  089B  0140               	movlb	0	; select bank0
  9551  089C  00A4               	movwf	___flge@ff2
  9552  089D  3199  21F1  3188   	fcall	___flge
  9553  08A0  1803               	btfsc	3,0
  9554  08A1  0008               	return
  9555                           
  9556                           ;inputs.c: 103:   *input += step;
  9557  08A2  0141               	movlb	1	; select bank1
  9558  08A3  082D               	movf	(spinInput@step+3)^(0+128),w
  9559  08A4  0140               	movlb	0	; select bank0
  9560  08A5  00D1               	movwf	___fladd@b+3
  9561  08A6  0141               	movlb	1	; select bank1
  9562  08A7  082C               	movf	(spinInput@step+2)^(0+128),w
  9563  08A8  0140               	movlb	0	; select bank0
  9564  08A9  00D0               	movwf	___fladd@b+2
  9565  08AA  0141               	movlb	1	; select bank1
  9566  08AB  082B               	movf	(spinInput@step+1)^(0+128),w
  9567  08AC  0140               	movlb	0	; select bank0
  9568  08AD  00CF               	movwf	___fladd@b+1
  9569  08AE  0141               	movlb	1	; select bank1
  9570  08AF  082A               	movf	spinInput@step^(0+128),w
  9571  08B0  0140               	movlb	0	; select bank0
  9572  08B1  00CE               	movwf	___fladd@b
  9573  08B2  0141               	movlb	1	; select bank1
  9574  08B3  0820               	movf	spinInput@input^(0+128),w
  9575  08B4  0086               	movwf	6
  9576  08B5  0821               	movf	(spinInput@input+1)^(0+128),w
  9577  08B6  0087               	movwf	7
  9578  08B7  3F40               	moviw [0]fsr1
  9579  08B8  0140               	movlb	0	; select bank0
  9580  08B9  00D2               	movwf	___fladd@a
  9581  08BA  3F41               	moviw [1]fsr1
  9582  08BB  00D3               	movwf	___fladd@a+1
  9583  08BC  3F42               	moviw [2]fsr1
  9584  08BD  00D4               	movwf	___fladd@a+2
  9585  08BE  3F43               	moviw [3]fsr1
  9586  08BF  00D5               	movwf	___fladd@a+3
  9587  08C0  318C  241B         	fcall	___fladd
  9588  08C2  0141               	movlb	1	; select bank1
  9589  08C3  0820               	movf	spinInput@input^(0+128),w
  9590  08C4  0086               	movwf	6
  9591  08C5  0821               	movf	(spinInput@input+1)^(0+128),w
  9592  08C6  0087               	movwf	7
  9593  08C7  0140               	movlb	0	; select bank0
  9594  08C8  084E               	movf	?___fladd,w
  9595  08C9  3FC0               	movwi [0]fsr1
  9596  08CA  084F               	movf	?___fladd+1,w
  9597  08CB  3FC1               	movwi [1]fsr1
  9598  08CC  0850               	movf	?___fladd+2,w
  9599  08CD  3FC2               	movwi [2]fsr1
  9600  08CE  0851               	movf	?___fladd+3,w
  9601  08CF  3FC3               	movwi [3]fsr1
  9602  08D0  0008               	return
  9603  08D1                     __end_of_spinInput:	
  9604                           
  9605                           	psect	text15
  9606  2215                     __ptext15:	
  9607 ;; *************** function _menuError *****************
  9608 ;; Defined at:
  9609 ;;		line 126 in file "menuhelper.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;		None
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  1    wreg      void 
  9616 ;; Registers used:
  9617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9627 ;;Total ram usage:        0 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    8
  9630 ;; This function calls:
  9631 ;;		_OLED_clearDisplay
  9632 ;;		_OLED_print_xy
  9633 ;;		_OLED_returnHome
  9634 ;; This function is called by:
  9635 ;;		_menu
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           
  9640                           ;psect for function _menuError
  9641  2215                     _menuError:	
  9642                           
  9643                           ;menuhelper.c: 128:  OLED_returnHome();
  9644                           
  9645                           ;incstack = 0
  9646                           ; Regs used in _menuError: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9647  2215  31A1  2185  31A2   	fcall	_OLED_returnHome
  9648                           
  9649                           ;menuhelper.c: 129:  OLED_clearDisplay();
  9650  2218  31A1  2181  31A2   	fcall	_OLED_clearDisplay
  9651                           
  9652                           ;menuhelper.c: 130:  OLED_print_xy(0, 0, "Menu error");
  9653  221B  0140               	movlb	0	; select bank0
  9654  221C  01A7               	clrf	OLED_print_xy@row
  9655  221D  3056               	movlw	low (STR_53| (0+32768))
  9656  221E  00A8               	movwf	OLED_print_xy@s
  9657  221F  30A9               	movlw	high (STR_53| (0+32768))
  9658  2220  00A9               	movwf	OLED_print_xy@s+1
  9659  2221  3000               	movlw	0
  9660  2222  31A3  2388  31A2   	fcall	_OLED_print_xy
  9661  2225                     l626:	
  9662                           ;menuhelper.c: 131:  while(1);
  9663                           
  9664  2225  2A25               	goto	l626
  9665  2226                     __end_of_menuError:	
  9666                           
  9667                           	psect	text16
  9668  2185                     __ptext16:	
  9669 ;; *************** function _OLED_returnHome *****************
  9670 ;; Defined at:
  9671 ;;		line 167 in file "oled.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;		None
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;		None
  9676 ;; Return value:  Size  Location     Type
  9677 ;;                  1    wreg      void 
  9678 ;; Registers used:
  9679 ;;		wreg, status,2, status,0, pclath, cstack
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9689 ;;Total ram usage:        0 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    7
  9692 ;; This function calls:
  9693 ;;		_OLED_command
  9694 ;; This function is called by:
  9695 ;;		_main
  9696 ;;		_systemCheck
  9697 ;;		_menuError
  9698 ;; This function uses a non-reentrant model
  9699 ;;
  9700                           
  9701                           
  9702                           ;psect for function _OLED_returnHome
  9703  2185                     _OLED_returnHome:	
  9704                           
  9705                           ;oled.c: 169:  OLED_command(0x02);
  9706                           
  9707                           ;incstack = 0
  9708                           ; Regs used in _OLED_returnHome: [wreg+status,2+status,0+pclath+cstack]
  9709  2185  3002               	movlw	2
  9710  2186  31A1  21A2         	fcall	_OLED_command
  9711  2188  0008               	return
  9712  2189                     __end_of_OLED_returnHome:	
  9713                           
  9714                           	psect	text17
  9715  2181                     __ptext17:	
  9716 ;; *************** function _OLED_clearDisplay *****************
  9717 ;; Defined at:
  9718 ;;		line 172 in file "oled.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;		None
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;		None
  9723 ;; Return value:  Size  Location     Type
  9724 ;;                  1    wreg      void 
  9725 ;; Registers used:
  9726 ;;		wreg, status,2, status,0, pclath, cstack
  9727 ;; Tracked objects:
  9728 ;;		On entry : 0/0
  9729 ;;		On exit  : 0/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9736 ;;Total ram usage:        0 bytes
  9737 ;; Hardware stack levels used:    1
  9738 ;; Hardware stack levels required when called:    7
  9739 ;; This function calls:
  9740 ;;		_OLED_command
  9741 ;; This function is called by:
  9742 ;;		_main
  9743 ;;		_systemCheck
  9744 ;;		_menuError
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           
  9749                           ;psect for function _OLED_clearDisplay
  9750  2181                     _OLED_clearDisplay:	
  9751                           
  9752                           ;oled.c: 174:  OLED_command(0x01);
  9753                           
  9754                           ;incstack = 0
  9755                           ; Regs used in _OLED_clearDisplay: [wreg+status,2+status,0+pclath+cstack]
  9756  2181  3001               	movlw	1
  9757  2182  31A1  21A2         	fcall	_OLED_command
  9758  2184  0008               	return
  9759  2185                     __end_of_OLED_clearDisplay:	
  9760                           
  9761                           	psect	text18
  9762  2463                     __ptext18:	
  9763 ;; *************** function _getStateFunc *****************
  9764 ;; Defined at:
  9765 ;;		line 137 in file "menuhelper.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  state           1    wreg     enum E7957
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;  state           1   11[BANK0 ] enum E7957
  9770 ;;  n               1   12[BANK0 ] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  2    6[BANK0 ] PTR FTN(PTR struct .,)un
  9773 ;; Registers used:
  9774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9780 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9781 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9782 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9783 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9784 ;;Total ram usage:        7 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    4
  9787 ;; This function calls:
  9788 ;;		___wmul
  9789 ;; This function is called by:
  9790 ;;		_menu
  9791 ;; This function uses a non-reentrant model
  9792 ;;
  9793                           
  9794                           
  9795                           ;psect for function _getStateFunc
  9796  2463                     _getStateFunc:	
  9797                           
  9798                           ;incstack = 0
  9799                           ; Regs used in _getStateFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9800                           ;getStateFunc@state stored from wreg
  9801  2463  0140               	movlb	0	; select bank0
  9802  2464  00AB               	movwf	getStateFunc@state
  9803                           
  9804                           ;menuhelper.c: 137: t_stateFuncPtr getStateFunc(enum e_menuStates state);menuhelper.c: 1
      +                          38: {;menuhelper.c: 139:  uint8_t n;;menuhelper.c: 142:  for(n = 0; n < sizeof(stateFunc
      +                          Tbl)/sizeof(stateFuncTbl[0]); n++) {
  9805  2465  01AC               	clrf	getStateFunc@n
  9806  2466                     l4613:	
  9807                           
  9808                           ;menuhelper.c: 143:   if ((stateFuncTbl[n].state == state))
  9809  2466  082C               	movf	getStateFunc@n,w
  9810  2467  00A8               	movwf	??_getStateFunc
  9811  2468  01A9               	clrf	??_getStateFunc+1
  9812  2469  0828               	movf	??_getStateFunc,w
  9813  246A  00A0               	movwf	___wmul@multiplier
  9814  246B  0829               	movf	??_getStateFunc+1,w
  9815  246C  00A1               	movwf	___wmul@multiplier+1
  9816  246D  3003               	movlw	3
  9817  246E  00A2               	movwf	___wmul@multiplicand
  9818  246F  3000               	movlw	0
  9819  2470  00A3               	movwf	___wmul@multiplicand+1
  9820  2471  31A2  2226  31A4   	fcall	___wmul
  9821  2474  0140               	movlb	0	; select bank0
  9822  2475  0821               	movf	?___wmul+1,w
  9823  2476  0085               	movwf	5
  9824  2477  0820               	movf	?___wmul,w
  9825  2478  0084               	movwf	4
  9826  2479  3000               	movlw	low (_stateFuncTbl| (0+32768))
  9827  247A  0784               	addwf	4,f
  9828  247B  30A8               	movlw	high (_stateFuncTbl| (0+32768))
  9829  247C  3D85               	addwfc	5,f
  9830  247D  0800               	movf	0,w	;code access
  9831  247E  062B               	xorwf	getStateFunc@state,w
  9832  247F  1D03               	skipz
  9833  2480  2C9C               	goto	l4619
  9834                           
  9835                           ;menuhelper.c: 144:    return stateFuncTbl[n].func;
  9836  2481  082C               	movf	getStateFunc@n,w
  9837  2482  00A8               	movwf	??_getStateFunc
  9838  2483  01A9               	clrf	??_getStateFunc+1
  9839  2484  0828               	movf	??_getStateFunc,w
  9840  2485  00A0               	movwf	___wmul@multiplier
  9841  2486  0829               	movf	??_getStateFunc+1,w
  9842  2487  00A1               	movwf	___wmul@multiplier+1
  9843  2488  3003               	movlw	3
  9844  2489  00A2               	movwf	___wmul@multiplicand
  9845  248A  3000               	movlw	0
  9846  248B  00A3               	movwf	___wmul@multiplicand+1
  9847  248C  31A2  2226         	fcall	___wmul
  9848  248E  0140               	movlb	0	; select bank0
  9849  248F  0821               	movf	?___wmul+1,w
  9850  2490  0085               	movwf	5
  9851  2491  0820               	movf	?___wmul,w
  9852  2492  0084               	movwf	4
  9853  2493  3001               	movlw	low ((_stateFuncTbl+1)| (0+32768))
  9854  2494  0784               	addwf	4,f
  9855  2495  30A8               	movlw	high ((_stateFuncTbl+1)| (0+32768))
  9856  2496  3D85               	addwfc	5,f
  9857  2497  3F00               	moviw [0]fsr0
  9858  2498  00A6               	movwf	?_getStateFunc
  9859  2499  3F01               	moviw [1]fsr0
  9860  249A  00A7               	movwf	?_getStateFunc+1
  9861  249B  0008               	return
  9862  249C                     l4619:	
  9863                           
  9864                           ;menuhelper.c: 145:  }
  9865  249C  3001               	movlw	1
  9866  249D  00A8               	movwf	??_getStateFunc
  9867  249E  0828               	movf	??_getStateFunc,w
  9868  249F  07AC               	addwf	getStateFunc@n,f
  9869  24A0  3009               	movlw	9
  9870  24A1  022C               	subwf	getStateFunc@n,w
  9871  24A2  1C03               	skipc
  9872  24A3  2C66               	goto	l4613
  9873                           
  9874                           ;menuhelper.c: 146:  return (t_stateFuncPtr)((void*)0);
  9875  24A4  01A6               	clrf	?_getStateFunc
  9876  24A5  01A7               	clrf	?_getStateFunc+1
  9877  24A6  0008               	return
  9878  24A7                     __end_of_getStateFunc:	
  9879                           
  9880                           	psect	text19
  9881  21E1                     __ptext19:	
  9882 ;; *************** function _getPB *****************
  9883 ;; Defined at:
  9884 ;;		line 86 in file "inputs.c"
  9885 ;; Parameters:    Size  Location     Type
  9886 ;;		None
  9887 ;; Auto vars:     Size  Location     Type
  9888 ;;  ret             1    1[BANK0 ] enum E7890
  9889 ;; Return value:  Size  Location     Type
  9890 ;;                  1    wreg      enum E7890
  9891 ;; Registers used:
  9892 ;;		wreg, status,2
  9893 ;; Tracked objects:
  9894 ;;		On entry : 0/0
  9895 ;;		On exit  : 0/0
  9896 ;;		Unchanged: 0/0
  9897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9901 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9902 ;;Total ram usage:        2 bytes
  9903 ;; Hardware stack levels used:    1
  9904 ;; Hardware stack levels required when called:    3
  9905 ;; This function calls:
  9906 ;;		Nothing
  9907 ;; This function is called by:
  9908 ;;		_menu
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           
  9913                           ;psect for function _getPB
  9914  21E1                     _getPB:	
  9915                           
  9916                           ;inputs.c: 88:  enum e_buttonPress ret = pbState;
  9917                           
  9918                           ;incstack = 0
  9919                           ; Regs used in _getPB: [wreg+status,2]
  9920  21E1  0141               	movlb	1	; select bank1
  9921  21E2  0867               	movf	_pbState^(0+128),w	;volatile
  9922  21E3  0140               	movlb	0	; select bank0
  9923  21E4  00A0               	movwf	??_getPB
  9924  21E5  0820               	movf	??_getPB,w
  9925  21E6  00A1               	movwf	getPB@ret
  9926                           
  9927                           ;inputs.c: 89:  pbState = PB_NONE;
  9928  21E7  0141               	movlb	1	; select bank1
  9929  21E8  01E7               	clrf	_pbState^(0+128)	;volatile
  9930                           
  9931                           ;inputs.c: 90:  return ret;
  9932  21E9  0140               	movlb	0	; select bank0
  9933  21EA  0821               	movf	getPB@ret,w
  9934  21EB  0008               	return
  9935  21EC                     __end_of_getPB:	
  9936                           
  9937                           	psect	text20
  9938  1C16                     __ptext20:	
  9939 ;; *************** function _getNextState *****************
  9940 ;; Defined at:
  9941 ;;		line 152 in file "menuhelper.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;  state           1    wreg     enum E7957
  9944 ;;  page            1    6[BANK0 ] unsigned char 
  9945 ;;  pb              1    7[BANK0 ] enum E7943
  9946 ;; Auto vars:     Size  Location     Type
  9947 ;;  state           1   11[BANK0 ] enum E7957
  9948 ;;  n               1   12[BANK0 ] unsigned char 
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  1    wreg      char 
  9951 ;; Registers used:
  9952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9953 ;; Tracked objects:
  9954 ;;		On entry : 0/0
  9955 ;;		On exit  : 0/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9958 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9959 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9960 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9961 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9962 ;;Total ram usage:        7 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    4
  9965 ;; This function calls:
  9966 ;;		___wmul
  9967 ;; This function is called by:
  9968 ;;		_menu
  9969 ;; This function uses a non-reentrant model
  9970 ;;
  9971                           
  9972                           
  9973                           ;psect for function _getNextState
  9974  1C16                     _getNextState:	
  9975                           
  9976                           ;incstack = 0
  9977                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9978                           ;getNextState@state stored from wreg
  9979  1C16  0140               	movlb	0	; select bank0
  9980  1C17  00AB               	movwf	getNextState@state
  9981                           
  9982                           ;menuhelper.c: 152: int8_t getNextState(enum e_menuStates state, uint8_t page, enum e_bu
      +                          ttonPress pb);menuhelper.c: 153: {;menuhelper.c: 154:  uint8_t n;;menuhelper.c: 157:  fo
      +                          r(n = 0; n < sizeof(nextStateTbl)/sizeof(nextStateTbl[0]); n++) {
  9983  1C18  01AC               	clrf	getNextState@n
  9984  1C19                     l4637:	
  9985                           
  9986                           ;menuhelper.c: 158:   if ((nextStateTbl[n].state == state)) {
  9987  1C19  082C               	movf	getNextState@n,w
  9988  1C1A  00A8               	movwf	??_getNextState
  9989  1C1B  01A9               	clrf	??_getNextState+1
  9990  1C1C  0828               	movf	??_getNextState,w
  9991  1C1D  00A0               	movwf	___wmul@multiplier
  9992  1C1E  0829               	movf	??_getNextState+1,w
  9993  1C1F  00A1               	movwf	___wmul@multiplier+1
  9994  1C20  3005               	movlw	5
  9995  1C21  00A2               	movwf	___wmul@multiplicand
  9996  1C22  3000               	movlw	0
  9997  1C23  00A3               	movwf	___wmul@multiplicand+1
  9998  1C24  31A2  2226  319C   	fcall	___wmul
  9999  1C27  0140               	movlb	0	; select bank0
 10000  1C28  0821               	movf	?___wmul+1,w
 10001  1C29  0085               	movwf	5
 10002  1C2A  0820               	movf	?___wmul,w
 10003  1C2B  0084               	movwf	4
 10004  1C2C  304C               	movlw	low (_nextStateTbl| (0+32768))
 10005  1C2D  0784               	addwf	4,f
 10006  1C2E  30A8               	movlw	high (_nextStateTbl| (0+32768))
 10007  1C2F  3D85               	addwfc	5,f
 10008  1C30  0800               	movf	0,w	;code access
 10009  1C31  062B               	xorwf	getNextState@state,w
 10010  1C32  1D03               	skipz
 10011  1C33  2CA1               	goto	l4657
 10012                           
 10013                           ;menuhelper.c: 160:    if ((nextStateTbl[n].page == page) ||
 10014  1C34  082C               	movf	getNextState@n,w
 10015  1C35  00A8               	movwf	??_getNextState
 10016  1C36  01A9               	clrf	??_getNextState+1
 10017  1C37  0828               	movf	??_getNextState,w
 10018  1C38  00A0               	movwf	___wmul@multiplier
 10019  1C39  0829               	movf	??_getNextState+1,w
 10020  1C3A  00A1               	movwf	___wmul@multiplier+1
 10021  1C3B  3005               	movlw	5
 10022  1C3C  00A2               	movwf	___wmul@multiplicand
 10023  1C3D  3000               	movlw	0
 10024  1C3E  00A3               	movwf	___wmul@multiplicand+1
 10025  1C3F  31A2  2226  319C   	fcall	___wmul
 10026  1C42  0140               	movlb	0	; select bank0
 10027  1C43  0821               	movf	?___wmul+1,w
 10028  1C44  0085               	movwf	5
 10029  1C45  0820               	movf	?___wmul,w
 10030  1C46  0084               	movwf	4
 10031  1C47  304D               	movlw	low ((_nextStateTbl+1)| (0+32768))
 10032  1C48  0784               	addwf	4,f
 10033  1C49  30A8               	movlw	high ((_nextStateTbl+1)| (0+32768))
 10034  1C4A  3D85               	addwfc	5,f
 10035  1C4B  0800               	movf	0,w	;code access
 10036  1C4C  0626               	xorwf	getNextState@page,w
 10037  1C4D  1903               	skipnz
 10038  1C4E  2C6A               	goto	l4643
 10039  1C4F  082C               	movf	getNextState@n,w
 10040  1C50  00A8               	movwf	??_getNextState
 10041  1C51  01A9               	clrf	??_getNextState+1
 10042  1C52  0828               	movf	??_getNextState,w
 10043  1C53  00A0               	movwf	___wmul@multiplier
 10044  1C54  0829               	movf	??_getNextState+1,w
 10045  1C55  00A1               	movwf	___wmul@multiplier+1
 10046  1C56  3005               	movlw	5
 10047  1C57  00A2               	movwf	___wmul@multiplicand
 10048  1C58  3000               	movlw	0
 10049  1C59  00A3               	movwf	___wmul@multiplicand+1
 10050  1C5A  31A2  2226  319C   	fcall	___wmul
 10051  1C5D  0140               	movlb	0	; select bank0
 10052  1C5E  0821               	movf	?___wmul+1,w
 10053  1C5F  0085               	movwf	5
 10054  1C60  0820               	movf	?___wmul,w
 10055  1C61  0084               	movwf	4
 10056  1C62  304D               	movlw	low ((_nextStateTbl+1)| (0+32768))
 10057  1C63  0784               	addwf	4,f
 10058  1C64  30A8               	movlw	high ((_nextStateTbl+1)| (0+32768))
 10059  1C65  3D85               	addwfc	5,f
 10060  1C66  0012               	moviw fsr0++
 10061  1C67  3AFF               	xorlw	255
 10062  1C68  1D03               	btfss	3,2
 10063  1C69  2CA1               	goto	l4657
 10064  1C6A                     l4643:	
 10065                           
 10066                           ;menuhelper.c: 161:     (nextStateTbl[n].page == 255)) {;menuhelper.c: 163:     if (pb =
      +                          = PB_SHORT)
 10067  1C6A  0327               	decf	getNextState@pb,w
 10068  1C6B  1D03               	btfss	3,2
 10069  1C6C  2C85               	goto	l4651
 10070                           
 10071                           ;menuhelper.c: 164:      return nextStateTbl[n].pbShort;
 10072  1C6D  082C               	movf	getNextState@n,w
 10073  1C6E  00A8               	movwf	??_getNextState
 10074  1C6F  01A9               	clrf	??_getNextState+1
 10075  1C70  0828               	movf	??_getNextState,w
 10076  1C71  00A0               	movwf	___wmul@multiplier
 10077  1C72  0829               	movf	??_getNextState+1,w
 10078  1C73  00A1               	movwf	___wmul@multiplier+1
 10079  1C74  3005               	movlw	5
 10080  1C75  00A2               	movwf	___wmul@multiplicand
 10081  1C76  3000               	movlw	0
 10082  1C77  00A3               	movwf	___wmul@multiplicand+1
 10083  1C78  31A2  2226         	fcall	___wmul
 10084  1C7A  0140               	movlb	0	; select bank0
 10085  1C7B  0821               	movf	?___wmul+1,w
 10086  1C7C  0085               	movwf	5
 10087  1C7D  0820               	movf	?___wmul,w
 10088  1C7E  0084               	movwf	4
 10089  1C7F  304E               	movlw	low ((_nextStateTbl+2)| (0+32768))
 10090  1C80  0784               	addwf	4,f
 10091  1C81  30A8               	movlw	high ((_nextStateTbl+2)| (0+32768))
 10092  1C82  3D85               	addwfc	5,f
 10093  1C83  0800               	movf	0,w	;code access
 10094  1C84  0008               	return
 10095  1C85                     l4651:	
 10096  1C85  3002               	movlw	2
 10097  1C86  0627               	xorwf	getNextState@pb,w
 10098  1C87  1D03               	btfss	3,2
 10099  1C88  2CA1               	goto	l4657
 10100                           
 10101                           ;menuhelper.c: 166:      return nextStateTbl[n].pbLong;
 10102  1C89  082C               	movf	getNextState@n,w
 10103  1C8A  00A8               	movwf	??_getNextState
 10104  1C8B  01A9               	clrf	??_getNextState+1
 10105  1C8C  0828               	movf	??_getNextState,w
 10106  1C8D  00A0               	movwf	___wmul@multiplier
 10107  1C8E  0829               	movf	??_getNextState+1,w
 10108  1C8F  00A1               	movwf	___wmul@multiplier+1
 10109  1C90  3005               	movlw	5
 10110  1C91  00A2               	movwf	___wmul@multiplicand
 10111  1C92  3000               	movlw	0
 10112  1C93  00A3               	movwf	___wmul@multiplicand+1
 10113  1C94  31A2  2226         	fcall	___wmul
 10114  1C96  0140               	movlb	0	; select bank0
 10115  1C97  0821               	movf	?___wmul+1,w
 10116  1C98  0085               	movwf	5
 10117  1C99  0820               	movf	?___wmul,w
 10118  1C9A  0084               	movwf	4
 10119  1C9B  304F               	movlw	low ((_nextStateTbl+3)| (0+32768))
 10120  1C9C  0784               	addwf	4,f
 10121  1C9D  30A8               	movlw	high ((_nextStateTbl+3)| (0+32768))
 10122  1C9E  3D85               	addwfc	5,f
 10123  1C9F  0800               	movf	0,w	;code access
 10124  1CA0  0008               	return
 10125  1CA1                     l4657:	
 10126                           ;menuhelper.c: 167:    }
 10127                           
 10128                           
 10129                           ;menuhelper.c: 169:  }
 10130  1CA1  3001               	movlw	1
 10131  1CA2  00A8               	movwf	??_getNextState
 10132  1CA3  0828               	movf	??_getNextState,w
 10133  1CA4  07AC               	addwf	getNextState@n,f
 10134  1CA5  300C               	movlw	12
 10135  1CA6  022C               	subwf	getNextState@n,w
 10136  1CA7  1C03               	skipc
 10137  1CA8  2C19               	goto	l4637
 10138                           
 10139                           ;menuhelper.c: 170:  return -1;
 10140  1CA9  30FF               	movlw	255
 10141  1CAA  0008               	return
 10142  1CAB                     __end_of_getNextState:	
 10143                           
 10144                           	psect	text21
 10145  1003                     __ptext21:	
 10146 ;; *************** function ___bmul *****************
 10147 ;; Defined at:
 10148 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;  multiplier      1    wreg     unsigned char 
 10151 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;  multiplier      1    3[BANK0 ] unsigned char 
 10154 ;;  product         1    2[BANK0 ] unsigned char 
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  1    wreg      unsigned char 
 10157 ;; Registers used:
 10158 ;;		wreg, status,2, status,0
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10164 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10167 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10168 ;;Total ram usage:        4 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    3
 10171 ;; This function calls:
 10172 ;;		Nothing
 10173 ;; This function is called by:
 10174 ;;		_channelView
 10175 ;; This function uses a non-reentrant model
 10176 ;;
 10177                           
 10178                           
 10179                           ;psect for function ___bmul
 10180  1003                     ___bmul:	
 10181                           
 10182                           ;incstack = 0
 10183                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10184                           ;___bmul@multiplier stored from wreg
 10185  1003  0140               	movlb	0	; select bank0
 10186  1004  00A3               	movwf	___bmul@multiplier
 10187  1005  01A2               	clrf	___bmul@product
 10188  1006                     l4179:	
 10189  1006  1C23               	btfss	___bmul@multiplier,0
 10190  1007  280C               	goto	l4183
 10191  1008  0820               	movf	___bmul@multiplicand,w
 10192  1009  00A1               	movwf	??___bmul
 10193  100A  0821               	movf	??___bmul,w
 10194  100B  07A2               	addwf	___bmul@product,f
 10195  100C                     l4183:	
 10196  100C  1003               	clrc
 10197  100D  0DA0               	rlf	___bmul@multiplicand,f
 10198  100E  1003               	clrc
 10199  100F  0CA3               	rrf	___bmul@multiplier,f
 10200  1010  0823               	movf	___bmul@multiplier,w
 10201  1011  1D03               	btfss	3,2
 10202  1012  2806               	goto	l4179
 10203  1013  0822               	movf	___bmul@product,w
 10204  1014  0008               	return
 10205  1015                     __end_of___bmul:	
 10206                           
 10207                           	psect	text22
 10208  23BA                     __ptext22:	
 10209 ;; *************** function _returnToPage *****************
 10210 ;; Defined at:
 10211 ;;		line 218 in file "menuhelper.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;  page            1    wreg     unsigned char 
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;  page            1    9[BANK0 ] unsigned char 
 10216 ;;  n               1   10[BANK0 ] unsigned char 
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  1    wreg      void 
 10219 ;; Registers used:
 10220 ;;		wreg, status,2, status,0, pclath, cstack
 10221 ;; Tracked objects:
 10222 ;;		On entry : 0/0
 10223 ;;		On exit  : 0/0
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10227 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10228 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10229 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10230 ;;Total ram usage:        4 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; Hardware stack levels required when called:    7
 10233 ;; This function calls:
 10234 ;;		_OLED_command
 10235 ;;		___wmul
 10236 ;; This function is called by:
 10237 ;;		_statusView
 10238 ;;		_channelView
 10239 ;;		_channelSetup
 10240 ;;		_setOutputPower
 10241 ;;		_setLensDia
 10242 ;;		_setup
 10243 ;;		_setDPOffset
 10244 ;;		_setSkyTemp
 10245 ;;		_setFudgeFactor
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           
 10250                           ;psect for function _returnToPage
 10251  23BA                     _returnToPage:	
 10252                           
 10253                           ;incstack = 0
 10254                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 10255                           ;returnToPage@page stored from wreg
 10256  23BA  0140               	movlb	0	; select bank0
 10257  23BB  00A9               	movwf	returnToPage@page
 10258                           
 10259                           ;menuhelper.c: 218: void returnToPage(uint8_t page);menuhelper.c: 219: {;menuhelper.c: 2
      +                          20:  uint8_t n;;menuhelper.c: 222:  if (! g_updateScreen)
 10260  23BC  0141               	movlb	1	; select bank1
 10261  23BD  086F               	movf	_g_updateScreen^(0+128),w
 10262  23BE  1903               	btfsc	3,2
 10263  23BF  0008               	return
 10264                           
 10265                           ;menuhelper.c: 224:  OLED_command(0x01);
 10266  23C0  3001               	movlw	1
 10267  23C1  31A1  21A2  31A3   	fcall	_OLED_command
 10268                           
 10269                           ;menuhelper.c: 225:  OLED_command(0x02);
 10270  23C4  3002               	movlw	2
 10271  23C5  31A1  21A2  31A3   	fcall	_OLED_command
 10272                           
 10273                           ;menuhelper.c: 226:  for(n = 0; n < 12 * page; n++) {
 10274  23C8  0140               	movlb	0	; select bank0
 10275  23C9  01AA               	clrf	returnToPage@n
 10276  23CA                     l4065:	
 10277  23CA  0829               	movf	returnToPage@page,w
 10278  23CB  00A7               	movwf	??_returnToPage
 10279  23CC  01A8               	clrf	??_returnToPage+1
 10280  23CD  0827               	movf	??_returnToPage,w
 10281  23CE  00A0               	movwf	___wmul@multiplier
 10282  23CF  0828               	movf	??_returnToPage+1,w
 10283  23D0  00A1               	movwf	___wmul@multiplier+1
 10284  23D1  300C               	movlw	12
 10285  23D2  00A2               	movwf	___wmul@multiplicand
 10286  23D3  3000               	movlw	0
 10287  23D4  00A3               	movwf	___wmul@multiplicand+1
 10288  23D5  31A2  2226  31A3   	fcall	___wmul
 10289  23D8  0140               	movlb	0	; select bank0
 10290  23D9  0821               	movf	?___wmul+1,w
 10291  23DA  3A80               	xorlw	128
 10292  23DB  3C80               	sublw	128
 10293  23DC  1D03               	skipz
 10294  23DD  2BE0               	goto	u4735
 10295  23DE  0820               	movf	?___wmul,w
 10296  23DF  022A               	subwf	returnToPage@n,w
 10297  23E0                     u4735:	
 10298  23E0  1803               	btfsc	3,0
 10299  23E1  0008               	return
 10300                           
 10301                           ;menuhelper.c: 227:   OLED_command(0x10 | 0x08 | 0x00);
 10302  23E2  3018               	movlw	24
 10303  23E3  31A1  21A2  31A3   	fcall	_OLED_command
 10304                           
 10305                           ;menuhelper.c: 228:  }
 10306  23E6  3001               	movlw	1
 10307  23E7  0140               	movlb	0	; select bank0
 10308  23E8  00A7               	movwf	??_returnToPage
 10309  23E9  0827               	movf	??_returnToPage,w
 10310  23EA  07AA               	addwf	returnToPage@n,f
 10311  23EB  2BCA               	goto	l4065
 10312  23EC                     __end_of_returnToPage:	
 10313                           
 10314                           	psect	text23
 10315  2795                     __ptext23:	
 10316 ;; *************** function _paging *****************
 10317 ;; Defined at:
 10318 ;;		line 177 in file "menuhelper.c"
 10319 ;; Parameters:    Size  Location     Type
 10320 ;;  currentPage     1    wreg     unsigned char 
 10321 ;;  lastPage        1    7[BANK0 ] const unsigned char 
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;  currentPage     1   10[BANK0 ] unsigned char 
 10324 ;;  n               1   12[BANK0 ] unsigned char 
 10325 ;;  dir             1   11[BANK0 ] enum E7939
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      unsigned char 
 10328 ;; Registers used:
 10329 ;;		wreg, status,2, status,0, pclath, cstack
 10330 ;; Tracked objects:
 10331 ;;		On entry : 0/0
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10335 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10336 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10337 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10338 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10339 ;;Total ram usage:        6 bytes
 10340 ;; Hardware stack levels used:    1
 10341 ;; Hardware stack levels required when called:    8
 10342 ;; This function calls:
 10343 ;;		_OLED_scrollDisplayLeft
 10344 ;;		_OLED_scrollDisplayRight
 10345 ;;		_getRotDir
 10346 ;; This function is called by:
 10347 ;;		_statusView
 10348 ;;		_channelView
 10349 ;;		_channelSetup
 10350 ;;		_setup
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _paging
 10356  2795                     _paging:	
 10357                           
 10358                           ;incstack = 0
 10359                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 10360                           ;paging@currentPage stored from wreg
 10361  2795  0140               	movlb	0	; select bank0
 10362  2796  00AA               	movwf	paging@currentPage
 10363                           
 10364                           ;menuhelper.c: 177: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 178: {;menuhelper.c: 179:  uint8_t n;;menuhelper.c: 180:  enum e_direction dir;;me
      +                          nuhelper.c: 181:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 184:  PIE0bi
      +                          ts.IOCIE = 0;
 10365  2797  014E               	movlb	14	; select bank14
 10366  2798  1216               	bcf	22,4	;volatile
 10367                           
 10368                           ;menuhelper.c: 186:  dir = getRotDir();
 10369  2799  31A1  21D6  31A7   	fcall	_getRotDir
 10370  279C  0140               	movlb	0	; select bank0
 10371  279D  00A8               	movwf	??_paging
 10372  279E  0828               	movf	??_paging,w
 10373  279F  00AB               	movwf	paging@dir
 10374                           
 10375                           ;menuhelper.c: 189:  if (dir == lastDir) {
 10376  27A0  082B               	movf	paging@dir,w
 10377  27A1  0141               	movlb	1	; select bank1
 10378  27A2  065E               	xorwf	paging@lastDir^(0+128),w
 10379  27A3  1D03               	skipz
 10380  27A4  2FF5               	goto	l4171
 10381                           
 10382                           ;menuhelper.c: 191:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 10383  27A5  0140               	movlb	0	; select bank0
 10384  27A6  032B               	decf	paging@dir,w
 10385  27A7  1D03               	btfss	3,2
 10386  27A8  2FD5               	goto	l4151
 10387  27A9  0827               	movf	paging@lastPage,w
 10388  27AA  3EFF               	addlw	255
 10389  27AB  00A8               	movwf	??_paging
 10390  27AC  30FF               	movlw	255
 10391  27AD  1803               	skipnc
 10392  27AE  3000               	movlw	0
 10393  27AF  00A9               	movwf	??_paging+1
 10394  27B0  0829               	movf	??_paging+1,w
 10395  27B1  3A80               	xorlw	128
 10396  27B2  3C80               	sublw	128
 10397  27B3  1D03               	skipz
 10398  27B4  2FB7               	goto	u4845
 10399  27B5  0828               	movf	??_paging,w
 10400  27B6  022A               	subwf	paging@currentPage,w
 10401  27B7                     u4845:	
 10402  27B7  1803               	skipnc
 10403  27B8  2FD5               	goto	l4151
 10404                           
 10405                           ;menuhelper.c: 192:    currentPage++;
 10406  27B9  3001               	movlw	1
 10407  27BA  0140               	movlb	0	; select bank0
 10408  27BB  00A8               	movwf	??_paging
 10409  27BC  0828               	movf	??_paging,w
 10410  27BD  07AA               	addwf	paging@currentPage,f
 10411                           
 10412                           ;menuhelper.c: 193:    for(n = 0; n < 12; n++) {
 10413  27BE  01AC               	clrf	paging@n
 10414  27BF                     l4143:	
 10415                           
 10416                           ;menuhelper.c: 194:     OLED_scrollDisplayLeft();
 10417  27BF  31A1  2179  31A7   	fcall	_OLED_scrollDisplayLeft
 10418                           
 10419                           ;menuhelper.c: 195:     _delay((unsigned long)((20)*(4000000/4000.0)));
 10420  27C2  301A               	movlw	26
 10421  27C3  0140               	movlb	0	; select bank0
 10422  27C4  00A8               	movwf	??_paging
 10423  27C5  30F8               	movlw	248
 10424  27C6                     u6337:	
 10425  27C6  0B89               	decfsz	9,f
 10426  27C7  2FC6               	goto	u6337
 10427  27C8  0BA8               	decfsz	??_paging,f
 10428  27C9  2FC6               	goto	u6337
 10429  27CA  0000               	nop
 10430                           
 10431                           ;menuhelper.c: 196:    }
 10432  27CB  3001               	movlw	1
 10433  27CC  0140               	movlb	0	; select bank0
 10434  27CD  00A8               	movwf	??_paging
 10435  27CE  0828               	movf	??_paging,w
 10436  27CF  07AC               	addwf	paging@n,f
 10437  27D0  300C               	movlw	12
 10438  27D1  022C               	subwf	paging@n,w
 10439  27D2  1803               	btfsc	3,0
 10440  27D3  2FF5               	goto	l4171
 10441  27D4  2FBF               	goto	l4143
 10442  27D5                     l4151:	
 10443  27D5  3002               	movlw	2
 10444  27D6  0140               	movlb	0	; select bank0
 10445  27D7  062B               	xorwf	paging@dir,w
 10446  27D8  1D03               	btfss	3,2
 10447  27D9  2FF5               	goto	l4171
 10448  27DA  082A               	movf	paging@currentPage,w
 10449  27DB  1903               	btfsc	3,2
 10450  27DC  2FF5               	goto	l4171
 10451                           
 10452                           ;menuhelper.c: 200:    currentPage--;
 10453  27DD  3001               	movlw	1
 10454  27DE  02AA               	subwf	paging@currentPage,f
 10455                           
 10456                           ;menuhelper.c: 201:    for(n = 0; n < 12; n++) {
 10457  27DF  01AC               	clrf	paging@n
 10458  27E0                     l4163:	
 10459                           
 10460                           ;menuhelper.c: 202:     OLED_scrollDisplayRight();
 10461  27E0  31A1  217D  31A7   	fcall	_OLED_scrollDisplayRight
 10462                           
 10463                           ;menuhelper.c: 203:     _delay((unsigned long)((20)*(4000000/4000.0)));
 10464  27E3  301A               	movlw	26
 10465  27E4  0140               	movlb	0	; select bank0
 10466  27E5  00A8               	movwf	??_paging
 10467  27E6  30F8               	movlw	248
 10468  27E7                     u6347:	
 10469  27E7  0B89               	decfsz	9,f
 10470  27E8  2FE7               	goto	u6347
 10471  27E9  0BA8               	decfsz	??_paging,f
 10472  27EA  2FE7               	goto	u6347
 10473  27EB  0000               	nop
 10474                           
 10475                           ;menuhelper.c: 204:    }
 10476  27EC  3001               	movlw	1
 10477  27ED  0140               	movlb	0	; select bank0
 10478  27EE  00A8               	movwf	??_paging
 10479  27EF  0828               	movf	??_paging,w
 10480  27F0  07AC               	addwf	paging@n,f
 10481  27F1  300C               	movlw	12
 10482  27F2  022C               	subwf	paging@n,w
 10483  27F3  1C03               	skipc
 10484  27F4  2FE0               	goto	l4163
 10485  27F5                     l4171:	
 10486                           
 10487                           ;menuhelper.c: 208:  lastDir = dir;
 10488  27F5  0140               	movlb	0	; select bank0
 10489  27F6  082B               	movf	paging@dir,w
 10490  27F7  00A8               	movwf	??_paging
 10491  27F8  0828               	movf	??_paging,w
 10492  27F9  0141               	movlb	1	; select bank1
 10493  27FA  00DE               	movwf	paging@lastDir^(0+128)
 10494                           
 10495                           ;menuhelper.c: 209:  PIE0bits.IOCIE = 1;
 10496  27FB  014E               	movlb	14	; select bank14
 10497  27FC  1616               	bsf	22,4	;volatile
 10498                           
 10499                           ;menuhelper.c: 211:  return currentPage;
 10500  27FD  0140               	movlb	0	; select bank0
 10501  27FE  082A               	movf	paging@currentPage,w
 10502  27FF  0008               	return
 10503  2800                     __end_of_paging:	
 10504                           
 10505                           	psect	text24
 10506  21D6                     __ptext24:	
 10507 ;; *************** function _getRotDir *****************
 10508 ;; Defined at:
 10509 ;;		line 76 in file "inputs.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;		None
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;  ret             1    1[BANK0 ] enum E7886
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      enum E7886
 10516 ;; Registers used:
 10517 ;;		wreg, status,2
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10527 ;;Total ram usage:        2 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    3
 10530 ;; This function calls:
 10531 ;;		Nothing
 10532 ;; This function is called by:
 10533 ;;		_spinInput
 10534 ;;		_paging
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           
 10539                           ;psect for function _getRotDir
 10540  21D6                     _getRotDir:	
 10541                           
 10542                           ;inputs.c: 78:  enum e_direction ret = rotDir;
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in _getRotDir: [wreg+status,2]
 10546  21D6  0141               	movlb	1	; select bank1
 10547  21D7  0868               	movf	_rotDir^(0+128),w	;volatile
 10548  21D8  0140               	movlb	0	; select bank0
 10549  21D9  00A0               	movwf	??_getRotDir
 10550  21DA  0820               	movf	??_getRotDir,w
 10551  21DB  00A1               	movwf	getRotDir@ret
 10552                           
 10553                           ;inputs.c: 79:  rotDir = ROT_STOP;
 10554  21DC  0141               	movlb	1	; select bank1
 10555  21DD  01E8               	clrf	_rotDir^(0+128)	;volatile
 10556                           
 10557                           ;inputs.c: 80:  return ret;
 10558  21DE  0140               	movlb	0	; select bank0
 10559  21DF  0821               	movf	getRotDir@ret,w
 10560  21E0  0008               	return
 10561  21E1                     __end_of_getRotDir:	
 10562                           
 10563                           	psect	text25
 10564  217D                     __ptext25:	
 10565 ;; *************** function _OLED_scrollDisplayRight *****************
 10566 ;; Defined at:
 10567 ;;		line 138 in file "oled.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;		None
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;		None
 10572 ;; Return value:  Size  Location     Type
 10573 ;;                  1    wreg      void 
 10574 ;; Registers used:
 10575 ;;		wreg, status,2, status,0, pclath, cstack
 10576 ;; Tracked objects:
 10577 ;;		On entry : 0/0
 10578 ;;		On exit  : 0/0
 10579 ;;		Unchanged: 0/0
 10580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10585 ;;Total ram usage:        0 bytes
 10586 ;; Hardware stack levels used:    1
 10587 ;; Hardware stack levels required when called:    7
 10588 ;; This function calls:
 10589 ;;		_OLED_command
 10590 ;; This function is called by:
 10591 ;;		_paging
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           
 10596                           ;psect for function _OLED_scrollDisplayRight
 10597  217D                     _OLED_scrollDisplayRight:	
 10598                           
 10599                           ;oled.c: 140:  OLED_command(0x10 | 0x08 | 0x04);
 10600                           
 10601                           ;incstack = 0
 10602                           ; Regs used in _OLED_scrollDisplayRight: [wreg+status,2+status,0+pclath+cstack]
 10603  217D  301C               	movlw	28
 10604  217E  31A1  21A2         	fcall	_OLED_command
 10605  2180  0008               	return
 10606  2181                     __end_of_OLED_scrollDisplayRight:	
 10607                           
 10608                           	psect	text26
 10609  2179                     __ptext26:	
 10610 ;; *************** function _OLED_scrollDisplayLeft *****************
 10611 ;; Defined at:
 10612 ;;		line 133 in file "oled.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;		None
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, status,2, status,0, pclath, cstack
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10630 ;;Total ram usage:        0 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    7
 10633 ;; This function calls:
 10634 ;;		_OLED_command
 10635 ;; This function is called by:
 10636 ;;		_paging
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function _OLED_scrollDisplayLeft
 10642  2179                     _OLED_scrollDisplayLeft:	
 10643                           
 10644                           ;oled.c: 135:  OLED_command(0x10 | 0x08 | 0x00);
 10645                           
 10646                           ;incstack = 0
 10647                           ; Regs used in _OLED_scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
 10648  2179  3018               	movlw	24
 10649  217A  31A1  21A2         	fcall	_OLED_command
 10650  217C  0008               	return
 10651  217D                     __end_of_OLED_scrollDisplayLeft:	
 10652                           
 10653                           	psect	text27
 10654  272C                     __ptext27:	
 10655 ;; *************** function _itoa *****************
 10656 ;; Defined at:
 10657 ;;		line 38 in file "common.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;  str             2    5[BANK1 ] PTR unsigned char 
 10660 ;;		 -> str(10), systemCheck@str(3), 
 10661 ;;  value           1    7[BANK1 ] unsigned char 
 10662 ;;  width           1    8[BANK1 ] unsigned char 
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;		None
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10674 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10676 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10677 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10678 ;;Total ram usage:       11 bytes
 10679 ;; Hardware stack levels used:    1
 10680 ;; Hardware stack levels required when called:    4
 10681 ;; This function calls:
 10682 ;;		___awdiv
 10683 ;;		___awmod
 10684 ;; This function is called by:
 10685 ;;		_systemCheck
 10686 ;;		_channelView
 10687 ;;		_channelSetup
 10688 ;;		_setOutputPower
 10689 ;; This function uses a non-reentrant model
 10690 ;;
 10691                           
 10692                           
 10693                           ;psect for function _itoa
 10694  272C                     _itoa:	
 10695                           
 10696                           ;common.c: 38: void itoa(char *str, uint8_t value, uint8_t width);common.c: 39: {;common
      +                          .c: 40:  str[width] = '\0';
 10697                           
 10698                           ;incstack = 0
 10699                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10700  272C  0141               	movlb	1	; select bank1
 10701  272D  0828               	movf	itoa@width^(0+128),w
 10702  272E  00A9               	movwf	??_itoa^(0+128)
 10703  272F  01AA               	clrf	(??_itoa^(0+128)+1)
 10704  2730  0829               	movf	??_itoa^(0+128),w
 10705  2731  0725               	addwf	itoa@str^(0+128),w
 10706  2732  0086               	movwf	6
 10707  2733  082A               	movf	(??_itoa+1)^(0+128),w
 10708  2734  3D26               	addwfc	(itoa@str+1)^(0+128),w
 10709  2735  0087               	movwf	7
 10710  2736  0181               	clrf	1
 10711  2737                     l5271:	
 10712                           ;common.c: 41:  while (value && width > 0) {
 10713                           
 10714                           
 10715                           ;common.c: 41:  while (value && width > 0) {
 10716  2737  0827               	movf	itoa@value^(0+128),w
 10717  2738  1903               	btfsc	3,2
 10718  2739  2F91               	goto	l5277
 10719  273A  0828               	movf	itoa@width^(0+128),w
 10720  273B  1903               	btfsc	3,2
 10721  273C  2F91               	goto	l5277
 10722                           
 10723                           ;common.c: 42:   str[--width] = (value % 10) + '0';
 10724  273D  300A               	movlw	10
 10725  273E  0140               	movlb	0	; select bank0
 10726  273F  00A0               	movwf	___awmod@divisor
 10727  2740  3000               	movlw	0
 10728  2741  00A1               	movwf	___awmod@divisor+1
 10729  2742  0141               	movlb	1	; select bank1
 10730  2743  0827               	movf	itoa@value^(0+128),w
 10731  2744  00A9               	movwf	??_itoa^(0+128)
 10732  2745  01AA               	clrf	(??_itoa^(0+128)+1)
 10733  2746  0829               	movf	??_itoa^(0+128),w
 10734  2747  0140               	movlb	0	; select bank0
 10735  2748  00A2               	movwf	___awmod@dividend
 10736  2749  0141               	movlb	1	; select bank1
 10737  274A  082A               	movf	(??_itoa+1)^(0+128),w
 10738  274B  0140               	movlb	0	; select bank0
 10739  274C  00A3               	movwf	___awmod@dividend+1
 10740  274D  31A4  24EC  31A7   	fcall	___awmod
 10741  2750  0140               	movlb	0	; select bank0
 10742  2751  0820               	movf	?___awmod,w
 10743  2752  3E30               	addlw	48
 10744  2753  0141               	movlb	1	; select bank1
 10745  2754  00AB               	movwf	(??_itoa+2)^(0+128)
 10746  2755  3001               	movlw	1
 10747  2756  02A8               	subwf	itoa@width^(0+128),f
 10748  2757  0828               	movf	itoa@width^(0+128),w
 10749  2758  00AC               	movwf	(??_itoa+3)^(0+128)
 10750  2759  01AD               	clrf	((??_itoa+3)^(0+128)+1)
 10751  275A  082C               	movf	(??_itoa+3)^(0+128),w
 10752  275B  0725               	addwf	itoa@str^(0+128),w
 10753  275C  00AE               	movwf	(??_itoa+5)^(0+128)
 10754  275D  082D               	movf	(??_itoa+4)^(0+128),w
 10755  275E  3D26               	addwfc	(itoa@str+1)^(0+128),w
 10756  275F  00AF               	movwf	(??_itoa+6)^(0+128)
 10757  2760  082E               	movf	(??_itoa+5)^(0+128),w
 10758  2761  0086               	movwf	6
 10759  2762  082F               	movf	(??_itoa+6)^(0+128),w
 10760  2763  0087               	movwf	7
 10761  2764  082B               	movf	(??_itoa+2)^(0+128),w
 10762  2765  0081               	movwf	1
 10763                           
 10764                           ;common.c: 43:   value = value / 10;
 10765  2766  300A               	movlw	10
 10766  2767  0140               	movlb	0	; select bank0
 10767  2768  00A0               	movwf	___awdiv@divisor
 10768  2769  3000               	movlw	0
 10769  276A  00A1               	movwf	___awdiv@divisor+1
 10770  276B  0141               	movlb	1	; select bank1
 10771  276C  0827               	movf	itoa@value^(0+128),w
 10772  276D  00A9               	movwf	??_itoa^(0+128)
 10773  276E  01AA               	clrf	(??_itoa^(0+128)+1)
 10774  276F  0829               	movf	??_itoa^(0+128),w
 10775  2770  0140               	movlb	0	; select bank0
 10776  2771  00A2               	movwf	___awdiv@dividend
 10777  2772  0141               	movlb	1	; select bank1
 10778  2773  082A               	movf	(??_itoa+1)^(0+128),w
 10779  2774  0140               	movlb	0	; select bank0
 10780  2775  00A3               	movwf	___awdiv@dividend+1
 10781  2776  31A5  25C3  31A7   	fcall	___awdiv
 10782  2779  0140               	movlb	0	; select bank0
 10783  277A  0820               	movf	?___awdiv,w
 10784  277B  0141               	movlb	1	; select bank1
 10785  277C  00AB               	movwf	(??_itoa+2)^(0+128)
 10786  277D  082B               	movf	(??_itoa+2)^(0+128),w
 10787  277E  00A7               	movwf	itoa@value^(0+128)
 10788  277F  2F37               	goto	l5271
 10789  2780                     l5275:	
 10790                           
 10791                           ;common.c: 46:   str[--width] = ' ';
 10792  2780  3001               	movlw	1
 10793  2781  02A8               	subwf	itoa@width^(0+128),f
 10794  2782  0828               	movf	itoa@width^(0+128),w
 10795  2783  00A9               	movwf	??_itoa^(0+128)
 10796  2784  01AA               	clrf	(??_itoa^(0+128)+1)
 10797  2785  0829               	movf	??_itoa^(0+128),w
 10798  2786  0725               	addwf	itoa@str^(0+128),w
 10799  2787  00AB               	movwf	(??_itoa+2)^(0+128)
 10800  2788  082A               	movf	(??_itoa+1)^(0+128),w
 10801  2789  3D26               	addwfc	(itoa@str+1)^(0+128),w
 10802  278A  00AC               	movwf	(??_itoa+3)^(0+128)
 10803  278B  082B               	movf	(??_itoa+2)^(0+128),w
 10804  278C  0086               	movwf	6
 10805  278D  082C               	movf	(??_itoa+3)^(0+128),w
 10806  278E  0087               	movwf	7
 10807  278F  3020               	movlw	32
 10808  2790  0081               	movwf	1
 10809  2791                     l5277:	
 10810                           
 10811                           ;common.c: 45:  while(width)
 10812  2791  0828               	movf	itoa@width^(0+128),w
 10813  2792  1903               	btfsc	3,2
 10814  2793  0008               	return
 10815  2794  2F80               	goto	l5275
 10816  2795                     __end_of_itoa:	
 10817                           
 10818                           	psect	text28
 10819  24EC                     __ptext28:	
 10820 ;; *************** function ___awmod *****************
 10821 ;; Defined at:
 10822 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;  divisor         2    0[BANK0 ] int 
 10825 ;;  dividend        2    2[BANK0 ] int 
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;  sign            1    6[BANK0 ] unsigned char 
 10828 ;;  counter         1    5[BANK0 ] unsigned char 
 10829 ;; Return value:  Size  Location     Type
 10830 ;;                  2    0[BANK0 ] int 
 10831 ;; Registers used:
 10832 ;;		wreg, status,2, status,0
 10833 ;; Tracked objects:
 10834 ;;		On entry : 0/0
 10835 ;;		On exit  : 0/0
 10836 ;;		Unchanged: 0/0
 10837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10838 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10841 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10842 ;;Total ram usage:        7 bytes
 10843 ;; Hardware stack levels used:    1
 10844 ;; Hardware stack levels required when called:    3
 10845 ;; This function calls:
 10846 ;;		Nothing
 10847 ;; This function is called by:
 10848 ;;		_itoa
 10849 ;; This function uses a non-reentrant model
 10850 ;;
 10851                           
 10852                           
 10853                           ;psect for function ___awmod
 10854  24EC                     ___awmod:	
 10855                           
 10856                           ;incstack = 0
 10857                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10858  24EC  0140               	movlb	0	; select bank0
 10859  24ED  01A6               	clrf	___awmod@sign
 10860  24EE  1FA3               	btfss	___awmod@dividend+1,7
 10861  24EF  2CF7               	goto	l3575
 10862  24F0  09A2               	comf	___awmod@dividend,f
 10863  24F1  09A3               	comf	___awmod@dividend+1,f
 10864  24F2  0AA2               	incf	___awmod@dividend,f
 10865  24F3  1903               	skipnz
 10866  24F4  0AA3               	incf	___awmod@dividend+1,f
 10867  24F5  01A6               	clrf	___awmod@sign
 10868  24F6  0AA6               	incf	___awmod@sign,f
 10869  24F7                     l3575:	
 10870  24F7  1FA1               	btfss	___awmod@divisor+1,7
 10871  24F8  2CFE               	goto	l3579
 10872  24F9  09A0               	comf	___awmod@divisor,f
 10873  24FA  09A1               	comf	___awmod@divisor+1,f
 10874  24FB  0AA0               	incf	___awmod@divisor,f
 10875  24FC  1903               	skipnz
 10876  24FD  0AA1               	incf	___awmod@divisor+1,f
 10877  24FE                     l3579:	
 10878  24FE  0820               	movf	___awmod@divisor,w
 10879  24FF  0421               	iorwf	___awmod@divisor+1,w
 10880  2500  1903               	btfsc	3,2
 10881  2501  2D25               	goto	l3597
 10882  2502  01A5               	clrf	___awmod@counter
 10883  2503  0AA5               	incf	___awmod@counter,f
 10884  2504                     l3587:	
 10885  2504  1BA1               	btfsc	___awmod@divisor+1,7
 10886  2505  2D10               	goto	l3589
 10887  2506  3001               	movlw	1
 10888  2507                     u3725:	
 10889  2507  35A0               	lslf	___awmod@divisor,f
 10890  2508  0DA1               	rlf	___awmod@divisor+1,f
 10891  2509  0B89               	decfsz	9,f
 10892  250A  2D07               	goto	u3725
 10893  250B  3001               	movlw	1
 10894  250C  00A4               	movwf	??___awmod
 10895  250D  0824               	movf	??___awmod,w
 10896  250E  07A5               	addwf	___awmod@counter,f
 10897  250F  2D04               	goto	l3587
 10898  2510                     l3589:	
 10899  2510  0821               	movf	___awmod@divisor+1,w
 10900  2511  0223               	subwf	___awmod@dividend+1,w
 10901  2512  1D03               	skipz
 10902  2513  2D16               	goto	u3745
 10903  2514  0820               	movf	___awmod@divisor,w
 10904  2515  0222               	subwf	___awmod@dividend,w
 10905  2516                     u3745:	
 10906  2516  1C03               	skipc
 10907  2517  2D1C               	goto	l3593
 10908  2518  0820               	movf	___awmod@divisor,w
 10909  2519  02A2               	subwf	___awmod@dividend,f
 10910  251A  0821               	movf	___awmod@divisor+1,w
 10911  251B  3BA3               	subwfb	___awmod@dividend+1,f
 10912  251C                     l3593:	
 10913  251C  3001               	movlw	1
 10914  251D                     u3755:	
 10915  251D  36A1               	lsrf	___awmod@divisor+1,f
 10916  251E  0CA0               	rrf	___awmod@divisor,f
 10917  251F  0B89               	decfsz	9,f
 10918  2520  2D1D               	goto	u3755
 10919  2521  3001               	movlw	1
 10920  2522  02A5               	subwf	___awmod@counter,f
 10921  2523  1D03               	btfss	3,2
 10922  2524  2D10               	goto	l3589
 10923  2525                     l3597:	
 10924  2525  0826               	movf	___awmod@sign,w
 10925  2526  1903               	btfsc	3,2
 10926  2527  2D2D               	goto	l3601
 10927  2528  09A2               	comf	___awmod@dividend,f
 10928  2529  09A3               	comf	___awmod@dividend+1,f
 10929  252A  0AA2               	incf	___awmod@dividend,f
 10930  252B  1903               	skipnz
 10931  252C  0AA3               	incf	___awmod@dividend+1,f
 10932  252D                     l3601:	
 10933  252D  0823               	movf	___awmod@dividend+1,w
 10934  252E  00A1               	movwf	?___awmod+1
 10935  252F  0822               	movf	___awmod@dividend,w
 10936  2530  00A0               	movwf	?___awmod
 10937  2531  0008               	return
 10938  2532                     __end_of___awmod:	
 10939                           
 10940                           	psect	text29
 10941  25C3                     __ptext29:	
 10942 ;; *************** function ___awdiv *****************
 10943 ;; Defined at:
 10944 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  divisor         2    0[BANK0 ] int 
 10947 ;;  dividend        2    2[BANK0 ] int 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  quotient        2    7[BANK0 ] int 
 10950 ;;  sign            1    6[BANK0 ] unsigned char 
 10951 ;;  counter         1    5[BANK0 ] unsigned char 
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  2    0[BANK0 ] int 
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10961 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10962 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10964 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10965 ;;Total ram usage:        9 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    3
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_itoa
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           
 10976                           ;psect for function ___awdiv
 10977  25C3                     ___awdiv:	
 10978                           
 10979                           ;incstack = 0
 10980                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10981  25C3  0140               	movlb	0	; select bank0
 10982  25C4  01A6               	clrf	___awdiv@sign
 10983  25C5  1FA1               	btfss	___awdiv@divisor+1,7
 10984  25C6  2DCE               	goto	l3531
 10985  25C7  09A0               	comf	___awdiv@divisor,f
 10986  25C8  09A1               	comf	___awdiv@divisor+1,f
 10987  25C9  0AA0               	incf	___awdiv@divisor,f
 10988  25CA  1903               	skipnz
 10989  25CB  0AA1               	incf	___awdiv@divisor+1,f
 10990  25CC  01A6               	clrf	___awdiv@sign
 10991  25CD  0AA6               	incf	___awdiv@sign,f
 10992  25CE                     l3531:	
 10993  25CE  1FA3               	btfss	___awdiv@dividend+1,7
 10994  25CF  2DD9               	goto	l3537
 10995  25D0  09A2               	comf	___awdiv@dividend,f
 10996  25D1  09A3               	comf	___awdiv@dividend+1,f
 10997  25D2  0AA2               	incf	___awdiv@dividend,f
 10998  25D3  1903               	skipnz
 10999  25D4  0AA3               	incf	___awdiv@dividend+1,f
 11000  25D5  3001               	movlw	1
 11001  25D6  00A4               	movwf	??___awdiv
 11002  25D7  0824               	movf	??___awdiv,w
 11003  25D8  06A6               	xorwf	___awdiv@sign,f
 11004  25D9                     l3537:	
 11005  25D9  01A7               	clrf	___awdiv@quotient
 11006  25DA  01A8               	clrf	___awdiv@quotient+1
 11007  25DB  0820               	movf	___awdiv@divisor,w
 11008  25DC  0421               	iorwf	___awdiv@divisor+1,w
 11009  25DD  1903               	btfsc	3,2
 11010  25DE  2E08               	goto	l3559
 11011  25DF  01A5               	clrf	___awdiv@counter
 11012  25E0  0AA5               	incf	___awdiv@counter,f
 11013  25E1                     l3547:	
 11014  25E1  1BA1               	btfsc	___awdiv@divisor+1,7
 11015  25E2  2DED               	goto	l3549
 11016  25E3  3001               	movlw	1
 11017  25E4                     u3625:	
 11018  25E4  35A0               	lslf	___awdiv@divisor,f
 11019  25E5  0DA1               	rlf	___awdiv@divisor+1,f
 11020  25E6  0B89               	decfsz	9,f
 11021  25E7  2DE4               	goto	u3625
 11022  25E8  3001               	movlw	1
 11023  25E9  00A4               	movwf	??___awdiv
 11024  25EA  0824               	movf	??___awdiv,w
 11025  25EB  07A5               	addwf	___awdiv@counter,f
 11026  25EC  2DE1               	goto	l3547
 11027  25ED                     l3549:	
 11028  25ED  3001               	movlw	1
 11029  25EE                     u3645:	
 11030  25EE  35A7               	lslf	___awdiv@quotient,f
 11031  25EF  0DA8               	rlf	___awdiv@quotient+1,f
 11032  25F0  0B89               	decfsz	9,f
 11033  25F1  2DEE               	goto	u3645
 11034  25F2  0821               	movf	___awdiv@divisor+1,w
 11035  25F3  0223               	subwf	___awdiv@dividend+1,w
 11036  25F4  1D03               	skipz
 11037  25F5  2DF8               	goto	u3655
 11038  25F6  0820               	movf	___awdiv@divisor,w
 11039  25F7  0222               	subwf	___awdiv@dividend,w
 11040  25F8                     u3655:	
 11041  25F8  1C03               	skipc
 11042  25F9  2DFF               	goto	l3555
 11043  25FA  0820               	movf	___awdiv@divisor,w
 11044  25FB  02A2               	subwf	___awdiv@dividend,f
 11045  25FC  0821               	movf	___awdiv@divisor+1,w
 11046  25FD  3BA3               	subwfb	___awdiv@dividend+1,f
 11047  25FE  1427               	bsf	___awdiv@quotient,0
 11048  25FF                     l3555:	
 11049  25FF  3001               	movlw	1
 11050  2600                     u3665:	
 11051  2600  36A1               	lsrf	___awdiv@divisor+1,f
 11052  2601  0CA0               	rrf	___awdiv@divisor,f
 11053  2602  0B89               	decfsz	9,f
 11054  2603  2E00               	goto	u3665
 11055  2604  3001               	movlw	1
 11056  2605  02A5               	subwf	___awdiv@counter,f
 11057  2606  1D03               	btfss	3,2
 11058  2607  2DED               	goto	l3549
 11059  2608                     l3559:	
 11060  2608  0826               	movf	___awdiv@sign,w
 11061  2609  1903               	btfsc	3,2
 11062  260A  2E10               	goto	l3563
 11063  260B  09A7               	comf	___awdiv@quotient,f
 11064  260C  09A8               	comf	___awdiv@quotient+1,f
 11065  260D  0AA7               	incf	___awdiv@quotient,f
 11066  260E  1903               	skipnz
 11067  260F  0AA8               	incf	___awdiv@quotient+1,f
 11068  2610                     l3563:	
 11069  2610  0828               	movf	___awdiv@quotient+1,w
 11070  2611  00A1               	movwf	?___awdiv+1
 11071  2612  0827               	movf	___awdiv@quotient,w
 11072  2613  00A0               	movwf	?___awdiv
 11073  2614  0008               	return
 11074  2615                     __end_of___awdiv:	
 11075                           
 11076                           	psect	text30
 11077  14EE                     __ptext30:	
 11078 ;; *************** function _ftoa *****************
 11079 ;; Defined at:
 11080 ;;		line 3 in file "common.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;  str             1    wreg     PTR unsigned char 
 11083 ;;		 -> str(10), 
 11084 ;;  fValue          4    5[BANK1 ] float 
 11085 ;;  width           1    9[BANK1 ] unsigned char 
 11086 ;;  prec            1   10[BANK1 ] unsigned char 
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;  str             1   16[BANK1 ] PTR unsigned char 
 11089 ;;		 -> str(10), 
 11090 ;;  pos             1   15[BANK1 ] unsigned char 
 11091 ;;  w               1   14[BANK1 ] unsigned char 
 11092 ;;  intValue        1   13[BANK1 ] unsigned char 
 11093 ;;  sign            1   12[BANK1 ] unsigned char 
 11094 ;;  len             1   11[BANK1 ] unsigned char 
 11095 ;; Return value:  Size  Location     Type
 11096 ;;                  1    wreg      void 
 11097 ;; Registers used:
 11098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11099 ;; Tracked objects:
 11100 ;;		On entry : 0/0
 11101 ;;		On exit  : 0/0
 11102 ;;		Unchanged: 0/0
 11103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11104 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11105 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11107 ;;      Totals:         0       2      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11108 ;;Total ram usage:       14 bytes
 11109 ;; Hardware stack levels used:    1
 11110 ;; Hardware stack levels required when called:    5
 11111 ;; This function calls:
 11112 ;;		___fldiv
 11113 ;;		___flge
 11114 ;;		___flmul
 11115 ;;		___flsub
 11116 ;;		___fltol
 11117 ;;		___wmul
 11118 ;;		___xxtofl
 11119 ;; This function is called by:
 11120 ;;		_statusView
 11121 ;;		_channelView
 11122 ;;		_channelSetup
 11123 ;;		_setOutputPower
 11124 ;;		_setLensDia
 11125 ;;		_setup
 11126 ;;		_setDPOffset
 11127 ;;		_setSkyTemp
 11128 ;;		_setFudgeFactor
 11129 ;; This function uses a non-reentrant model
 11130 ;;
 11131                           
 11132                           
 11133                           ;psect for function _ftoa
 11134  14EE                     _ftoa:	
 11135                           
 11136                           ;incstack = 0
 11137                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11138                           ;ftoa@str stored from wreg
 11139  14EE  0141               	movlb	1	; select bank1
 11140  14EF  00B0               	movwf	ftoa@str^(0+128)
 11141                           
 11142                           ;common.c: 3: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          4: {;common.c: 5:  uint8_t len = 1;
 11143  14F0  01AB               	clrf	ftoa@len^(0+128)
 11144  14F1  0AAB               	incf	ftoa@len^(0+128),f
 11145                           
 11146                           ;common.c: 7:  uint8_t pos = 0;
 11147  14F2  01AF               	clrf	ftoa@pos^(0+128)
 11148                           
 11149                           ;common.c: 9:  uint8_t sign = 0;
 11150  14F3  01AC               	clrf	ftoa@sign^(0+128)
 11151                           
 11152                           ;common.c: 11:  if (fValue < 0) {
 11153  14F4  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11154  14F5  0140               	movlb	0	; select bank0
 11155  14F6  00A3               	movwf	___flge@ff1+3
 11156  14F7  0141               	movlb	1	; select bank1
 11157  14F8  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11158  14F9  0140               	movlb	0	; select bank0
 11159  14FA  00A2               	movwf	___flge@ff1+2
 11160  14FB  0141               	movlb	1	; select bank1
 11161  14FC  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11162  14FD  0140               	movlb	0	; select bank0
 11163  14FE  00A1               	movwf	___flge@ff1+1
 11164  14FF  0141               	movlb	1	; select bank1
 11165  1500  0825               	movf	ftoa@fValue^(0+128),w
 11166  1501  0140               	movlb	0	; select bank0
 11167  1502  00A0               	movwf	___flge@ff1
 11168  1503  3000               	movlw	0
 11169  1504  00A7               	movwf	___flge@ff2+3
 11170  1505  3000               	movlw	0
 11171  1506  00A6               	movwf	___flge@ff2+2
 11172  1507  3000               	movlw	0
 11173  1508  00A5               	movwf	___flge@ff2+1
 11174  1509  3000               	movlw	0
 11175  150A  00A4               	movwf	___flge@ff2
 11176  150B  3199  21F1  3194   	fcall	___flge
 11177  150E  1803               	btfsc	3,0
 11178  150F  2D40               	goto	l4089
 11179                           
 11180                           ;common.c: 12:   fValue *= -1;
 11181  1510  30BF               	movlw	191
 11182  1511  0140               	movlb	0	; select bank0
 11183  1512  00B7               	movwf	___flmul@b+3
 11184  1513  3080               	movlw	128
 11185  1514  00B6               	movwf	___flmul@b+2
 11186  1515  3000               	movlw	0
 11187  1516  00B5               	movwf	___flmul@b+1
 11188  1517  3000               	movlw	0
 11189  1518  00B4               	movwf	___flmul@b
 11190  1519  0141               	movlb	1	; select bank1
 11191  151A  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11192  151B  0140               	movlb	0	; select bank0
 11193  151C  00BB               	movwf	___flmul@a+3
 11194  151D  0141               	movlb	1	; select bank1
 11195  151E  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11196  151F  0140               	movlb	0	; select bank0
 11197  1520  00BA               	movwf	___flmul@a+2
 11198  1521  0141               	movlb	1	; select bank1
 11199  1522  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11200  1523  0140               	movlb	0	; select bank0
 11201  1524  00B9               	movwf	___flmul@a+1
 11202  1525  0141               	movlb	1	; select bank1
 11203  1526  0825               	movf	ftoa@fValue^(0+128),w
 11204  1527  0140               	movlb	0	; select bank0
 11205  1528  00B8               	movwf	___flmul@a
 11206  1529  3185  2502  3194   	fcall	___flmul
 11207  152C  0140               	movlb	0	; select bank0
 11208  152D  0837               	movf	?___flmul+3,w
 11209  152E  0141               	movlb	1	; select bank1
 11210  152F  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 11211  1530  0140               	movlb	0	; select bank0
 11212  1531  0836               	movf	?___flmul+2,w
 11213  1532  0141               	movlb	1	; select bank1
 11214  1533  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 11215  1534  0140               	movlb	0	; select bank0
 11216  1535  0835               	movf	?___flmul+1,w
 11217  1536  0141               	movlb	1	; select bank1
 11218  1537  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 11219  1538  0140               	movlb	0	; select bank0
 11220  1539  0834               	movf	?___flmul,w
 11221  153A  0141               	movlb	1	; select bank1
 11222  153B  00A5               	movwf	ftoa@fValue^(0+128)
 11223                           
 11224                           ;common.c: 13:   sign = 1;
 11225  153C  01AC               	clrf	ftoa@sign^(0+128)
 11226  153D  0AAC               	incf	ftoa@sign^(0+128),f
 11227                           
 11228                           ;common.c: 14:   width--;
 11229  153E  3001               	movlw	1
 11230  153F  02A9               	subwf	ftoa@width^(0+128),f
 11231  1540                     l4089:	
 11232                           
 11233                           ;common.c: 16:  while(fValue >= 10.0) {
 11234  1540  0141               	movlb	1	; select bank1
 11235  1541  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11236  1542  0140               	movlb	0	; select bank0
 11237  1543  00A3               	movwf	___flge@ff1+3
 11238  1544  0141               	movlb	1	; select bank1
 11239  1545  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11240  1546  0140               	movlb	0	; select bank0
 11241  1547  00A2               	movwf	___flge@ff1+2
 11242  1548  0141               	movlb	1	; select bank1
 11243  1549  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11244  154A  0140               	movlb	0	; select bank0
 11245  154B  00A1               	movwf	___flge@ff1+1
 11246  154C  0141               	movlb	1	; select bank1
 11247  154D  0825               	movf	ftoa@fValue^(0+128),w
 11248  154E  0140               	movlb	0	; select bank0
 11249  154F  00A0               	movwf	___flge@ff1
 11250  1550  3041               	movlw	65
 11251  1551  00A7               	movwf	___flge@ff2+3
 11252  1552  3020               	movlw	32
 11253  1553  00A6               	movwf	___flge@ff2+2
 11254  1554  3000               	movlw	0
 11255  1555  00A5               	movwf	___flge@ff2+1
 11256  1556  3000               	movlw	0
 11257  1557  00A4               	movwf	___flge@ff2
 11258  1558  3199  21F1  3194   	fcall	___flge
 11259  155B  1C03               	btfss	3,0
 11260  155C  2D90               	goto	l4091
 11261                           
 11262                           ;common.c: 17:   fValue /= 10;
 11263  155D  3041               	movlw	65
 11264  155E  0140               	movlb	0	; select bank0
 11265  155F  00D1               	movwf	___fldiv@a+3
 11266  1560  3020               	movlw	32
 11267  1561  00D0               	movwf	___fldiv@a+2
 11268  1562  3000               	movlw	0
 11269  1563  00CF               	movwf	___fldiv@a+1
 11270  1564  3000               	movlw	0
 11271  1565  00CE               	movwf	___fldiv@a
 11272  1566  0141               	movlb	1	; select bank1
 11273  1567  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11274  1568  0140               	movlb	0	; select bank0
 11275  1569  00D5               	movwf	___fldiv@b+3
 11276  156A  0141               	movlb	1	; select bank1
 11277  156B  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11278  156C  0140               	movlb	0	; select bank0
 11279  156D  00D4               	movwf	___fldiv@b+2
 11280  156E  0141               	movlb	1	; select bank1
 11281  156F  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11282  1570  0140               	movlb	0	; select bank0
 11283  1571  00D3               	movwf	___fldiv@b+1
 11284  1572  0141               	movlb	1	; select bank1
 11285  1573  0825               	movf	ftoa@fValue^(0+128),w
 11286  1574  0140               	movlb	0	; select bank0
 11287  1575  00D2               	movwf	___fldiv@b
 11288  1576  3193  2374  3194   	fcall	___fldiv
 11289  1579  0140               	movlb	0	; select bank0
 11290  157A  0851               	movf	?___fldiv+3,w
 11291  157B  0141               	movlb	1	; select bank1
 11292  157C  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 11293  157D  0140               	movlb	0	; select bank0
 11294  157E  0850               	movf	?___fldiv+2,w
 11295  157F  0141               	movlb	1	; select bank1
 11296  1580  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 11297  1581  0140               	movlb	0	; select bank0
 11298  1582  084F               	movf	?___fldiv+1,w
 11299  1583  0141               	movlb	1	; select bank1
 11300  1584  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 11301  1585  0140               	movlb	0	; select bank0
 11302  1586  084E               	movf	?___fldiv,w
 11303  1587  0141               	movlb	1	; select bank1
 11304  1588  00A5               	movwf	ftoa@fValue^(0+128)
 11305                           
 11306                           ;common.c: 18:   len++;
 11307  1589  3001               	movlw	1
 11308  158A  0140               	movlb	0	; select bank0
 11309  158B  00EE               	movwf	??_ftoa
 11310  158C  086E               	movf	??_ftoa,w
 11311  158D  0141               	movlb	1	; select bank1
 11312  158E  07AB               	addwf	ftoa@len^(0+128),f
 11313  158F  2D40               	goto	l4089
 11314  1590                     l4091:	
 11315                           
 11316                           ;common.c: 20:  w = len + prec;
 11317  1590  0141               	movlb	1	; select bank1
 11318  1591  082B               	movf	ftoa@len^(0+128),w
 11319  1592  072A               	addwf	ftoa@prec^(0+128),w
 11320  1593  0140               	movlb	0	; select bank0
 11321  1594  00EE               	movwf	??_ftoa
 11322  1595  086E               	movf	??_ftoa,w
 11323  1596  0141               	movlb	1	; select bank1
 11324  1597  00AE               	movwf	ftoa@w^(0+128)
 11325                           
 11326                           ;common.c: 21:  if (prec == 0)
 11327  1598  082A               	movf	ftoa@prec^(0+128),w
 11328  1599  1D03               	btfss	3,2
 11329  159A  2DA1               	goto	l4099
 11330                           
 11331                           ;common.c: 22:   width++;
 11332  159B  3001               	movlw	1
 11333  159C  0140               	movlb	0	; select bank0
 11334  159D  00EE               	movwf	??_ftoa
 11335  159E  086E               	movf	??_ftoa,w
 11336  159F  0141               	movlb	1	; select bank1
 11337  15A0  07A9               	addwf	ftoa@width^(0+128),f
 11338  15A1                     l4099:	
 11339                           
 11340                           ;common.c: 23:  while(--width > w)
 11341  15A1  3001               	movlw	1
 11342  15A2  02A9               	subwf	ftoa@width^(0+128),f
 11343  15A3  0829               	movf	ftoa@width^(0+128),w
 11344  15A4  022E               	subwf	ftoa@w^(0+128),w
 11345  15A5  1803               	btfsc	3,0
 11346  15A6  2DBB               	goto	l4101
 11347                           
 11348                           ;common.c: 24:   str[pos++] = ' ';
 11349  15A7  3020               	movlw	32
 11350  15A8  0140               	movlb	0	; select bank0
 11351  15A9  00EE               	movwf	??_ftoa
 11352  15AA  0141               	movlb	1	; select bank1
 11353  15AB  082F               	movf	ftoa@pos^(0+128),w
 11354  15AC  0730               	addwf	ftoa@str^(0+128),w
 11355  15AD  0140               	movlb	0	; select bank0
 11356  15AE  00EF               	movwf	??_ftoa+1
 11357  15AF  086F               	movf	??_ftoa+1,w
 11358  15B0  0086               	movwf	6
 11359  15B1  3001               	movlw	1	; select bank2/3
 11360  15B2  0087               	movwf	7
 11361  15B3  086E               	movf	??_ftoa,w
 11362  15B4  0081               	movwf	1
 11363  15B5  3001               	movlw	1
 11364  15B6  00EE               	movwf	??_ftoa
 11365  15B7  086E               	movf	??_ftoa,w
 11366  15B8  0141               	movlb	1	; select bank1
 11367  15B9  07AF               	addwf	ftoa@pos^(0+128),f
 11368  15BA  2DA1               	goto	l4099
 11369  15BB                     l4101:	
 11370                           
 11371                           ;common.c: 25:  if (sign)
 11372  15BB  082C               	movf	ftoa@sign^(0+128),w
 11373  15BC  1903               	btfsc	3,2
 11374  15BD  2DD1               	goto	l4121
 11375                           
 11376                           ;common.c: 26:   str[pos++] = '-';
 11377  15BE  302D               	movlw	45
 11378  15BF                     L8:	
 11379  15BF  0140               	movlb	0	; select bank0
 11380  15C0  00EE               	movwf	??_ftoa
 11381  15C1  0141               	movlb	1	; select bank1
 11382  15C2  082F               	movf	ftoa@pos^(0+128),w
 11383  15C3  0730               	addwf	ftoa@str^(0+128),w
 11384  15C4  0140               	movlb	0	; select bank0
 11385  15C5  00EF               	movwf	??_ftoa+1
 11386  15C6  086F               	movf	??_ftoa+1,w
 11387  15C7  0086               	movwf	6
 11388  15C8  3001               	movlw	1	; select bank2/3
 11389  15C9  0087               	movwf	7
 11390  15CA  086E               	movf	??_ftoa,w
 11391  15CB  0081               	movwf	1
 11392  15CC  3001               	movlw	1
 11393  15CD  00EE               	movwf	??_ftoa
 11394  15CE  086E               	movf	??_ftoa,w
 11395  15CF  0141               	movlb	1	; select bank1
 11396  15D0  07AF               	addwf	ftoa@pos^(0+128),f
 11397  15D1                     l4121:	
 11398                           
 11399                           ;common.c: 27:  while(w--) {
 11400  15D1  3001               	movlw	1
 11401  15D2  02AE               	subwf	ftoa@w^(0+128),f
 11402  15D3  0A2E               	incf	ftoa@w^(0+128),w
 11403  15D4  1903               	btfsc	3,2
 11404  15D5  2E6A               	goto	l4123
 11405                           
 11406                           ;common.c: 28:   intValue = fValue;
 11407  15D6  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11408  15D7  0140               	movlb	0	; select bank0
 11409  15D8  00EB               	movwf	___fltol@f1+3
 11410  15D9  0141               	movlb	1	; select bank1
 11411  15DA  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11412  15DB  0140               	movlb	0	; select bank0
 11413  15DC  00EA               	movwf	___fltol@f1+2
 11414  15DD  0141               	movlb	1	; select bank1
 11415  15DE  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11416  15DF  0140               	movlb	0	; select bank0
 11417  15E0  00E9               	movwf	___fltol@f1+1
 11418  15E1  0141               	movlb	1	; select bank1
 11419  15E2  0825               	movf	ftoa@fValue^(0+128),w
 11420  15E3  0140               	movlb	0	; select bank0
 11421  15E4  00E8               	movwf	___fltol@f1
 11422  15E5  3199  217F  3194   	fcall	___fltol
 11423  15E8  0140               	movlb	0	; select bank0
 11424  15E9  0868               	movf	?___fltol,w
 11425  15EA  00EE               	movwf	??_ftoa
 11426  15EB  086E               	movf	??_ftoa,w
 11427  15EC  0141               	movlb	1	; select bank1
 11428  15ED  00AD               	movwf	ftoa@intValue^(0+128)
 11429                           
 11430                           ;common.c: 29:   fValue = fValue * 10 - (10 * intValue);
 11431  15EE  300A               	movlw	10
 11432  15EF  0140               	movlb	0	; select bank0
 11433  15F0  00A2               	movwf	___wmul@multiplicand
 11434  15F1  3000               	movlw	0
 11435  15F2  00A3               	movwf	___wmul@multiplicand+1
 11436  15F3  0141               	movlb	1	; select bank1
 11437  15F4  082D               	movf	ftoa@intValue^(0+128),w
 11438  15F5  0140               	movlb	0	; select bank0
 11439  15F6  00EE               	movwf	??_ftoa
 11440  15F7  01EF               	clrf	??_ftoa+1
 11441  15F8  086E               	movf	??_ftoa,w
 11442  15F9  00A0               	movwf	___wmul@multiplier
 11443  15FA  086F               	movf	??_ftoa+1,w
 11444  15FB  00A1               	movwf	___wmul@multiplier+1
 11445  15FC  31A2  2226  3194   	fcall	___wmul
 11446  15FF  0140               	movlb	0	; select bank0
 11447  1600  0820               	movf	?___wmul,w
 11448  1601  00A6               	movwf	___xxtofl@val
 11449  1602  0821               	movf	?___wmul+1,w
 11450  1603  00A7               	movwf	___xxtofl@val+1
 11451  1604  0D89               	rlf	9,f
 11452  1605  3B89               	subwfb	9,f
 11453  1606  0989               	comf	9,f
 11454  1607  00A8               	movwf	___xxtofl@val+2
 11455  1608  00A9               	movwf	___xxtofl@val+3
 11456  1609  3001               	movlw	1
 11457  160A  3190  2015  3194   	fcall	___xxtofl
 11458  160D  0140               	movlb	0	; select bank0
 11459  160E  0829               	movf	?___xxtofl+3,w
 11460  160F  00E5               	movwf	___flsub@a+3
 11461  1610  0828               	movf	?___xxtofl+2,w
 11462  1611  00E4               	movwf	___flsub@a+2
 11463  1612  0827               	movf	?___xxtofl+1,w
 11464  1613  00E3               	movwf	___flsub@a+1
 11465  1614  0826               	movf	?___xxtofl,w
 11466  1615  00E2               	movwf	___flsub@a
 11467  1616  3041               	movlw	65
 11468  1617  00B7               	movwf	___flmul@b+3
 11469  1618  3020               	movlw	32
 11470  1619  00B6               	movwf	___flmul@b+2
 11471  161A  3000               	movlw	0
 11472  161B  00B5               	movwf	___flmul@b+1
 11473  161C  3000               	movlw	0
 11474  161D  00B4               	movwf	___flmul@b
 11475  161E  0141               	movlb	1	; select bank1
 11476  161F  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11477  1620  0140               	movlb	0	; select bank0
 11478  1621  00BB               	movwf	___flmul@a+3
 11479  1622  0141               	movlb	1	; select bank1
 11480  1623  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11481  1624  0140               	movlb	0	; select bank0
 11482  1625  00BA               	movwf	___flmul@a+2
 11483  1626  0141               	movlb	1	; select bank1
 11484  1627  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11485  1628  0140               	movlb	0	; select bank0
 11486  1629  00B9               	movwf	___flmul@a+1
 11487  162A  0141               	movlb	1	; select bank1
 11488  162B  0825               	movf	ftoa@fValue^(0+128),w
 11489  162C  0140               	movlb	0	; select bank0
 11490  162D  00B8               	movwf	___flmul@a
 11491  162E  3185  2502  3194   	fcall	___flmul
 11492  1631  0140               	movlb	0	; select bank0
 11493  1632  0837               	movf	?___flmul+3,w
 11494  1633  00E9               	movwf	___flsub@b+3
 11495  1634  0836               	movf	?___flmul+2,w
 11496  1635  00E8               	movwf	___flsub@b+2
 11497  1636  0835               	movf	?___flmul+1,w
 11498  1637  00E7               	movwf	___flsub@b+1
 11499  1638  0834               	movf	?___flmul,w
 11500  1639  00E6               	movwf	___flsub@b
 11501  163A  31A2  2261  3194   	fcall	___flsub
 11502  163D  0140               	movlb	0	; select bank0
 11503  163E  0865               	movf	?___flsub+3,w
 11504  163F  0141               	movlb	1	; select bank1
 11505  1640  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 11506  1641  0140               	movlb	0	; select bank0
 11507  1642  0864               	movf	?___flsub+2,w
 11508  1643  0141               	movlb	1	; select bank1
 11509  1644  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 11510  1645  0140               	movlb	0	; select bank0
 11511  1646  0863               	movf	?___flsub+1,w
 11512  1647  0141               	movlb	1	; select bank1
 11513  1648  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 11514  1649  0140               	movlb	0	; select bank0
 11515  164A  0862               	movf	?___flsub,w
 11516  164B  0141               	movlb	1	; select bank1
 11517  164C  00A5               	movwf	ftoa@fValue^(0+128)
 11518                           
 11519                           ;common.c: 30:   str[pos++] = intValue + '0';
 11520  164D  082D               	movf	ftoa@intValue^(0+128),w
 11521  164E  3E30               	addlw	48
 11522  164F  0140               	movlb	0	; select bank0
 11523  1650  00EE               	movwf	??_ftoa
 11524  1651  0141               	movlb	1	; select bank1
 11525  1652  082F               	movf	ftoa@pos^(0+128),w
 11526  1653  0730               	addwf	ftoa@str^(0+128),w
 11527  1654  0140               	movlb	0	; select bank0
 11528  1655  00EF               	movwf	??_ftoa+1
 11529  1656  086F               	movf	??_ftoa+1,w
 11530  1657  0086               	movwf	6
 11531  1658  3001               	movlw	1	; select bank2/3
 11532  1659  0087               	movwf	7
 11533  165A  086E               	movf	??_ftoa,w
 11534  165B  0081               	movwf	1
 11535  165C  3001               	movlw	1
 11536  165D  00EE               	movwf	??_ftoa
 11537  165E  086E               	movf	??_ftoa,w
 11538  165F  0141               	movlb	1	; select bank1
 11539  1660  07AF               	addwf	ftoa@pos^(0+128),f
 11540                           
 11541                           ;common.c: 31:   if (w && (w == prec))
 11542  1661  082E               	movf	ftoa@w^(0+128),w
 11543  1662  1903               	btfsc	3,2
 11544  1663  2DD1               	goto	l4121
 11545  1664  082E               	movf	ftoa@w^(0+128),w
 11546  1665  062A               	xorwf	ftoa@prec^(0+128),w
 11547  1666  1D03               	skipz
 11548  1667  2DD1               	goto	l4121
 11549                           
 11550                           ;common.c: 32:    str[pos++] = '.';
 11551  1668  302E               	movlw	46
 11552  1669  2DBF               	goto	L8
 11553  166A                     l4123:	
 11554                           
 11555                           ;common.c: 35:  str[pos] = '\0';
 11556  166A  082F               	movf	ftoa@pos^(0+128),w
 11557  166B  0730               	addwf	ftoa@str^(0+128),w
 11558  166C  0140               	movlb	0	; select bank0
 11559  166D  00EE               	movwf	??_ftoa
 11560  166E  086E               	movf	??_ftoa,w
 11561  166F  0086               	movwf	6
 11562  1670  3001               	movlw	1	; select bank2/3
 11563  1671  0087               	movwf	7
 11564  1672  0181               	clrf	1
 11565  1673  0008               	return
 11566  1674                     __end_of_ftoa:	
 11567                           
 11568                           	psect	text31
 11569  2226                     __ptext31:	
 11570 ;; *************** function ___wmul *****************
 11571 ;; Defined at:
 11572 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 11573 ;; Parameters:    Size  Location     Type
 11574 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11575 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;  product         2    4[BANK0 ] unsigned int 
 11578 ;; Return value:  Size  Location     Type
 11579 ;;                  2    0[BANK0 ] unsigned int 
 11580 ;; Registers used:
 11581 ;;		wreg, status,2, status,0
 11582 ;; Tracked objects:
 11583 ;;		On entry : 0/0
 11584 ;;		On exit  : 0/0
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11587 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11590 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11591 ;;Total ram usage:        6 bytes
 11592 ;; Hardware stack levels used:    1
 11593 ;; Hardware stack levels required when called:    3
 11594 ;; This function calls:
 11595 ;;		Nothing
 11596 ;; This function is called by:
 11597 ;;		_getStateFunc
 11598 ;;		_getNextState
 11599 ;;		_returnToPage
 11600 ;;		_ftoa
 11601 ;; This function uses a non-reentrant model
 11602 ;;
 11603                           
 11604                           
 11605                           ;psect for function ___wmul
 11606  2226                     ___wmul:	
 11607                           
 11608                           ;incstack = 0
 11609                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11610  2226  0140               	movlb	0	; select bank0
 11611  2227  01A4               	clrf	___wmul@product
 11612  2228  01A5               	clrf	___wmul@product+1
 11613  2229                     l3497:	
 11614  2229  1C20               	btfss	___wmul@multiplier,0
 11615  222A  2A2F               	goto	l765
 11616  222B  0822               	movf	___wmul@multiplicand,w
 11617  222C  07A4               	addwf	___wmul@product,f
 11618  222D  0823               	movf	___wmul@multiplicand+1,w
 11619  222E  3DA5               	addwfc	___wmul@product+1,f
 11620  222F                     l765:	
 11621  222F  3001               	movlw	1
 11622  2230                     u3525:	
 11623  2230  35A2               	lslf	___wmul@multiplicand,f
 11624  2231  0DA3               	rlf	___wmul@multiplicand+1,f
 11625  2232  0B89               	decfsz	9,f
 11626  2233  2A30               	goto	u3525
 11627  2234  3001               	movlw	1
 11628  2235                     u3535:	
 11629  2235  36A1               	lsrf	___wmul@multiplier+1,f
 11630  2236  0CA0               	rrf	___wmul@multiplier,f
 11631  2237  0B89               	decfsz	9,f
 11632  2238  2A35               	goto	u3535
 11633  2239  0820               	movf	___wmul@multiplier,w
 11634  223A  0421               	iorwf	___wmul@multiplier+1,w
 11635  223B  1D03               	btfss	3,2
 11636  223C  2A29               	goto	l3497
 11637  223D  0825               	movf	___wmul@product+1,w
 11638  223E  00A1               	movwf	?___wmul+1
 11639  223F  0824               	movf	___wmul@product,w
 11640  2240  00A0               	movwf	?___wmul
 11641  2241  0008               	return
 11642  2242                     __end_of___wmul:	
 11643                           
 11644                           	psect	text32
 11645  257A                     __ptext32:	
 11646 ;; *************** function ___fleq *****************
 11647 ;; Defined at:
 11648 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 11649 ;; Parameters:    Size  Location     Type
 11650 ;;  ff1             4    0[BANK0 ] unsigned int 
 11651 ;;  ff2             4    4[BANK0 ] unsigned int 
 11652 ;; Auto vars:     Size  Location     Type
 11653 ;;		None
 11654 ;; Return value:  Size  Location     Type
 11655 ;;		None               void
 11656 ;; Registers used:
 11657 ;;		wreg, status,2, status,0
 11658 ;; Tracked objects:
 11659 ;;		On entry : 0/0
 11660 ;;		On exit  : 0/0
 11661 ;;		Unchanged: 0/0
 11662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11663 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11665 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11666 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11667 ;;Total ram usage:       12 bytes
 11668 ;; Hardware stack levels used:    1
 11669 ;; Hardware stack levels required when called:    3
 11670 ;; This function calls:
 11671 ;;		Nothing
 11672 ;; This function is called by:
 11673 ;;		_channelSetup
 11674 ;;		_setOutputPower
 11675 ;; This function uses a non-reentrant model
 11676 ;;
 11677                           
 11678                           
 11679                           ;psect for function ___fleq
 11680  257A                     ___fleq:	
 11681                           
 11682                           ;incstack = 0
 11683                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 11684  257A  3000               	movlw	0
 11685  257B  0140               	movlb	0	; select bank0
 11686  257C  0520               	andwf	___fleq@ff1,w
 11687  257D  00A8               	movwf	??___fleq
 11688  257E  3000               	movlw	0
 11689  257F  0521               	andwf	___fleq@ff1+1,w
 11690  2580  00A9               	movwf	??___fleq+1
 11691  2581  3080               	movlw	128
 11692  2582  0522               	andwf	___fleq@ff1+2,w
 11693  2583  00AA               	movwf	??___fleq+2
 11694  2584  307F               	movlw	127
 11695  2585  0523               	andwf	___fleq@ff1+3,w
 11696  2586  00AB               	movwf	??___fleq+3
 11697  2587  082B               	movf	??___fleq+3,w
 11698  2588  042A               	iorwf	??___fleq+2,w
 11699  2589  0429               	iorwf	??___fleq+1,w
 11700  258A  0428               	iorwf	??___fleq,w
 11701  258B  1D03               	skipz
 11702  258C  2D95               	goto	l934
 11703  258D  3000               	movlw	0
 11704  258E  00A3               	movwf	___fleq@ff1+3
 11705  258F  3000               	movlw	0
 11706  2590  00A2               	movwf	___fleq@ff1+2
 11707  2591  3000               	movlw	0
 11708  2592  00A1               	movwf	___fleq@ff1+1
 11709  2593  3000               	movlw	0
 11710  2594  00A0               	movwf	___fleq@ff1
 11711  2595                     l934:	
 11712  2595  3000               	movlw	0
 11713  2596  0524               	andwf	___fleq@ff2,w
 11714  2597  00A8               	movwf	??___fleq
 11715  2598  3000               	movlw	0
 11716  2599  0525               	andwf	___fleq@ff2+1,w
 11717  259A  00A9               	movwf	??___fleq+1
 11718  259B  3080               	movlw	128
 11719  259C  0526               	andwf	___fleq@ff2+2,w
 11720  259D  00AA               	movwf	??___fleq+2
 11721  259E  307F               	movlw	127
 11722  259F  0527               	andwf	___fleq@ff2+3,w
 11723  25A0  00AB               	movwf	??___fleq+3
 11724  25A1  082B               	movf	??___fleq+3,w
 11725  25A2  042A               	iorwf	??___fleq+2,w
 11726  25A3  0429               	iorwf	??___fleq+1,w
 11727  25A4  0428               	iorwf	??___fleq,w
 11728  25A5  1D03               	skipz
 11729  25A6  2DAF               	goto	l935
 11730  25A7  3000               	movlw	0
 11731  25A8  00A7               	movwf	___fleq@ff2+3
 11732  25A9  3000               	movlw	0
 11733  25AA  00A6               	movwf	___fleq@ff2+2
 11734  25AB  3000               	movlw	0
 11735  25AC  00A5               	movwf	___fleq@ff2+1
 11736  25AD  3000               	movlw	0
 11737  25AE  00A4               	movwf	___fleq@ff2
 11738  25AF                     l935:	
 11739  25AF  0827               	movf	___fleq@ff2+3,w
 11740  25B0  0623               	xorwf	___fleq@ff1+3,w
 11741  25B1  1D03               	skipz
 11742  25B2  2DBD               	goto	u4935
 11743  25B3  0826               	movf	___fleq@ff2+2,w
 11744  25B4  0622               	xorwf	___fleq@ff1+2,w
 11745  25B5  1D03               	skipz
 11746  25B6  2DBD               	goto	u4935
 11747  25B7  0825               	movf	___fleq@ff2+1,w
 11748  25B8  0621               	xorwf	___fleq@ff1+1,w
 11749  25B9  1D03               	skipz
 11750  25BA  2DBD               	goto	u4935
 11751  25BB  0824               	movf	___fleq@ff2,w
 11752  25BC  0620               	xorwf	___fleq@ff1,w
 11753  25BD                     u4935:	
 11754  25BD  1903               	skipnz
 11755  25BE  2DC1               	goto	l4199
 11756  25BF  1003               	clrc
 11757  25C0  0008               	return
 11758  25C1                     l4199:	
 11759  25C1  1403               	setc
 11760  25C2  0008               	return
 11761  25C3                     __end_of___fleq:	
 11762                           
 11763                           	psect	text33
 11764  2388                     __ptext33:	
 11765 ;; *************** function _OLED_print_xy *****************
 11766 ;; Defined at:
 11767 ;;		line 157 in file "oled.c"
 11768 ;; Parameters:    Size  Location     Type
 11769 ;;  col             1    wreg     unsigned char 
 11770 ;;  row             1    7[BANK0 ] unsigned char 
 11771 ;;  s               2    8[BANK0 ] PTR unsigned char 
 11772 ;;		 -> STR_53(11), STR_52(9), STR_51(2), STR_50(13), 
 11773 ;;		 -> STR_49(9), STR_48(2), STR_47(13), STR_46(3), 
 11774 ;;		 -> STR_45(7), STR_44(13), STR_43(10), STR_42(10), 
 11775 ;;		 -> STR_41(3), STR_40(7), STR_39(37), STR_38(8), 
 11776 ;;		 -> STR_37(2), STR_36(13), STR_35(8), STR_34(2), 
 11777 ;;		 -> STR_33(7), STR_32(6), STR_31(7), STR_30(6), 
 11778 ;;		 -> STR_29(13), STR_28(8), STR_27(9), STR_26(8), 
 11779 ;;		 -> STR_25(5), STR_24(8), STR_23(5), STR_22(25), 
 11780 ;;		 -> STR_21(13), STR_20(13), STR_19(13), STR_18(13), 
 11781 ;;		 -> STR_17(7), STR_16(7), STR_15(3), STR_14(13), 
 11782 ;;		 -> STR_13(3), STR_12(3), STR_11(4), STR_10(2), 
 11783 ;;		 -> STR_9(4), STR_8(8), STR_7(7), STR_6(8), 
 11784 ;;		 -> STR_5(2), STR_4(4), str(10), STR_3(49), 
 11785 ;;		 -> STR_2(4), systemCheck@str(3), STR_1(12), 
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;  col             1   15[BANK0 ] unsigned char 
 11788 ;;  row_offsets     4   11[BANK0 ] unsigned char [4]
 11789 ;; Return value:  Size  Location     Type
 11790 ;;                  1    wreg      void 
 11791 ;; Registers used:
 11792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11793 ;; Tracked objects:
 11794 ;;		On entry : 0/0
 11795 ;;		On exit  : 0/0
 11796 ;;		Unchanged: 0/0
 11797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11798 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11799 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11801 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11802 ;;Total ram usage:        9 bytes
 11803 ;; Hardware stack levels used:    1
 11804 ;; Hardware stack levels required when called:    7
 11805 ;; This function calls:
 11806 ;;		_OLED_command
 11807 ;;		_OLED_write
 11808 ;; This function is called by:
 11809 ;;		_systemCheck
 11810 ;;		_statusView
 11811 ;;		_channelView
 11812 ;;		_channelSetup
 11813 ;;		_setOutputPower
 11814 ;;		_setLensDia
 11815 ;;		_setup
 11816 ;;		_setDPOffset
 11817 ;;		_setSkyTemp
 11818 ;;		_setFudgeFactor
 11819 ;;		_menuError
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           
 11824                           ;psect for function _OLED_print_xy
 11825  2388                     _OLED_print_xy:	
 11826                           
 11827                           ;incstack = 0
 11828                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11829                           ;OLED_print_xy@col stored from wreg
 11830  2388  0140               	movlb	0	; select bank0
 11831  2389  00AF               	movwf	OLED_print_xy@col
 11832                           
 11833                           ;oled.c: 157: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 158: {;oled.
      +                          c: 159:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 11834  238A  0142               	movlb	2	; select bank2
 11835  238B  0866               	movf	(OLED_print_xy@F7940+3)^(0+256),w
 11836  238C  0140               	movlb	0	; select bank0
 11837  238D  00AE               	movwf	OLED_print_xy@row_offsets+3
 11838  238E  0142               	movlb	2	; select bank2
 11839  238F  0865               	movf	(OLED_print_xy@F7940+2)^(0+256),w
 11840  2390  0140               	movlb	0	; select bank0
 11841  2391  00AD               	movwf	OLED_print_xy@row_offsets+2
 11842  2392  0142               	movlb	2	; select bank2
 11843  2393  0864               	movf	(OLED_print_xy@F7940+1)^(0+256),w
 11844  2394  0140               	movlb	0	; select bank0
 11845  2395  00AC               	movwf	OLED_print_xy@row_offsets+1
 11846  2396  0142               	movlb	2	; select bank2
 11847  2397  0863               	movf	OLED_print_xy@F7940^(0+256),w
 11848  2398  0140               	movlb	0	; select bank0
 11849  2399  00AB               	movwf	OLED_print_xy@row_offsets
 11850                           
 11851                           ;oled.c: 161:  OLED_command(0x80 | (col + row_offsets[row]));
 11852  239A  0827               	movf	OLED_print_xy@row,w
 11853  239B  3E2B               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 11854  239C  0086               	movwf	6
 11855  239D  0187               	clrf	7
 11856  239E  0801               	movf	1,w
 11857  239F  072F               	addwf	OLED_print_xy@col,w
 11858  23A0  3880               	iorlw	128
 11859  23A1  31A1  21A2  31A3   	fcall	_OLED_command
 11860  23A4                     l4007:	
 11861                           ;oled.c: 162:  while (*s != (char) ((void*)0)) {
 11862                           
 11863                           
 11864                           ;oled.c: 162:  while (*s != (char) ((void*)0)) {
 11865  23A4  0140               	movlb	0	; select bank0
 11866  23A5  0828               	movf	OLED_print_xy@s,w
 11867  23A6  0084               	movwf	4
 11868  23A7  0829               	movf	OLED_print_xy@s+1,w
 11869  23A8  0085               	movwf	5
 11870  23A9  0012               	moviw fsr0++
 11871  23AA  1903               	btfsc	3,2
 11872  23AB  0008               	return
 11873                           
 11874                           ;oled.c: 163:   OLED_write(*s++);
 11875  23AC  0828               	movf	OLED_print_xy@s,w
 11876  23AD  0084               	movwf	4
 11877  23AE  0829               	movf	OLED_print_xy@s+1,w
 11878  23AF  0085               	movwf	5
 11879  23B0  0800               	movf	0,w	;code access
 11880  23B1  31A1  21C0  31A3   	fcall	_OLED_write
 11881  23B4  3001               	movlw	1
 11882  23B5  0140               	movlb	0	; select bank0
 11883  23B6  07A8               	addwf	OLED_print_xy@s,f
 11884  23B7  3000               	movlw	0
 11885  23B8  3DA9               	addwfc	OLED_print_xy@s+1,f
 11886  23B9  2BA4               	goto	l4007
 11887  23BA                     __end_of_OLED_print_xy:	
 11888                           
 11889                           	psect	text34
 11890  2532                     __ptext34:	
 11891 ;; *************** function _initialize *****************
 11892 ;; Defined at:
 11893 ;;		line 365 in file "main.c"
 11894 ;; Parameters:    Size  Location     Type
 11895 ;;		None
 11896 ;; Auto vars:     Size  Location     Type
 11897 ;;		None
 11898 ;; Return value:  Size  Location     Type
 11899 ;;                  1    wreg      void 
 11900 ;; Registers used:
 11901 ;;		wreg, status,2, status,0
 11902 ;; Tracked objects:
 11903 ;;		On entry : 0/0
 11904 ;;		On exit  : 0/0
 11905 ;;		Unchanged: 0/0
 11906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11911 ;;Total ram usage:        0 bytes
 11912 ;; Hardware stack levels used:    1
 11913 ;; Hardware stack levels required when called:    3
 11914 ;; This function calls:
 11915 ;;		Nothing
 11916 ;; This function is called by:
 11917 ;;		_main
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           
 11922                           ;psect for function _initialize
 11923  2532                     _initialize:	
 11924                           
 11925                           ;main.c: 367:  OSCFRQ = 0b00000010;
 11926                           
 11927                           ;incstack = 0
 11928                           ; Regs used in _initialize: [wreg+status,2+status,0]
 11929  2532  3002               	movlw	2
 11930  2533  0151               	movlb	17	; select bank17
 11931  2534  0093               	movwf	19	;volatile
 11932                           
 11933                           ;main.c: 368:  OSCCON1 = 0b01100000;
 11934  2535  3060               	movlw	96
 11935  2536  008D               	movwf	13	;volatile
 11936  2537                     l236:	
 11937                           ;main.c: 369:  while (!OSCCON3bits.ORDY);
 11938                           
 11939  2537  1E0F               	btfss	15,4	;volatile
 11940  2538  2D37               	goto	l236
 11941                           
 11942                           ;main.c: 372:  RX1DTPPSbits.RX1DTPPS = 0x17;
 11943  2539  017D               	movlb	61	; select bank61
 11944  253A  084B               	movf	75,w	;volatile
 11945  253B  39C0               	andlw	-64
 11946  253C  3817               	iorlw	23
 11947  253D  00CB               	movwf	75	;volatile
 11948                           
 11949                           ;main.c: 373:  RC6PPS = 0x0F;
 11950  253E  300F               	movlw	15
 11951  253F  017E               	movlb	62	; select bank62
 11952  2540  00A6               	movwf	38	;volatile
 11953                           
 11954                           ;main.c: 376:  ANSELA = 0b01000000;
 11955  2541  3040               	movlw	64
 11956  2542  00B8               	movwf	56	;volatile
 11957                           
 11958                           ;main.c: 377:  ANSELB = 0b00000000;
 11959  2543  01C3               	clrf	67	;volatile
 11960                           
 11961                           ;main.c: 378:  ANSELC = 0b00000011;
 11962  2544  3003               	movlw	3
 11963  2545  00CE               	movwf	78	;volatile
 11964                           
 11965                           ;main.c: 381:  TRISA = 0b11110000;
 11966  2546  30F0               	movlw	240
 11967  2547  0140               	movlb	0	; select bank0
 11968  2548  0092               	movwf	18	;volatile
 11969                           
 11970                           ;main.c: 382:  TRISB = 0b00000000;
 11971  2549  0193               	clrf	19	;volatile
 11972                           
 11973                           ;main.c: 383:  TRISC = 0b10000111;
 11974  254A  3087               	movlw	135
 11975  254B  0094               	movwf	20	;volatile
 11976                           
 11977                           ;main.c: 386:  ADCON0bits.ADON = 1;
 11978  254C  0141               	movlb	1	; select bank1
 11979  254D  141D               	bsf	29,0	;volatile
 11980                           
 11981                           ;main.c: 387:  ADCON1 = 0b11100000;
 11982  254E  30E0               	movlw	224
 11983  254F  009E               	movwf	30	;volatile
 11984                           
 11985                           ;main.c: 390:  T0CON0 = 0b10000000;
 11986  2550  3080               	movlw	128
 11987  2551  014B               	movlb	11	; select bank11
 11988  2552  009E               	movwf	30	;volatile
 11989                           
 11990                           ;main.c: 391:  T0CON1 = 0b01000111;
 11991  2553  3047               	movlw	71
 11992  2554  009F               	movwf	31	;volatile
 11993                           
 11994                           ;main.c: 392:  TMR0 = 178;
 11995  2555  30B2               	movlw	178
 11996  2556  009C               	movwf	28	;volatile
 11997                           
 11998                           ;main.c: 395:  T1CON = 0b00110011;
 11999  2557  3033               	movlw	51
 12000  2558  0144               	movlb	4	; select bank4
 12001  2559  008E               	movwf	14	;volatile
 12002                           
 12003                           ;main.c: 396:  T1CLK = 0b00000001;
 12004  255A  3001               	movlw	1
 12005  255B  0091               	movwf	17	;volatile
 12006                           
 12007                           ;main.c: 397:  TMR1 = 53035;
 12008  255C  30CF               	movlw	207
 12009  255D  008D               	movwf	13	;volatile
 12010  255E  302B               	movlw	43
 12011  255F  008C               	movwf	12	;volatile
 12012                           
 12013                           ;main.c: 400:  PIE0 = 0b00110000;
 12014  2560  3030               	movlw	48
 12015  2561  014E               	movlb	14	; select bank14
 12016  2562  0096               	movwf	22	;volatile
 12017                           
 12018                           ;main.c: 401:  PIE3 = 0b00100000;
 12019  2563  3020               	movlw	32
 12020  2564  0099               	movwf	25	;volatile
 12021                           
 12022                           ;main.c: 402:  PIE4 = 0b00000001;
 12023  2565  3001               	movlw	1
 12024  2566  009A               	movwf	26	;volatile
 12025                           
 12026                           ;main.c: 403:  INTCON = 0b11000000;
 12027  2567  30C0               	movlw	192
 12028  2568  008B               	movwf	11	;volatile
 12029                           
 12030                           ;main.c: 406:  IOCAP = 0b10110000;
 12031  2569  30B0               	movlw	176
 12032  256A  017E               	movlb	62	; select bank62
 12033  256B  00BD               	movwf	61	;volatile
 12034                           
 12035                           ;main.c: 407:  IOCAN = 0b10110000;
 12036  256C  30B0               	movlw	176
 12037  256D  00BE               	movwf	62	;volatile
 12038                           
 12039                           ;main.c: 408:  IOCCN = 0b00000100;
 12040  256E  3004               	movlw	4
 12041  256F  00D4               	movwf	84	;volatile
 12042                           
 12043                           ;main.c: 412:  BAUD1CON = 0b00001000;
 12044  2570  3008               	movlw	8
 12045  2571  0142               	movlb	2	; select bank2
 12046  2572  009F               	movwf	31	;volatile
 12047                           
 12048                           ;main.c: 413:  SPBRGL = 25;
 12049  2573  3019               	movlw	25
 12050  2574  009B               	movwf	27	;volatile
 12051                           
 12052                           ;main.c: 414:  RC1STA = 0b10010000;
 12053  2575  3090               	movlw	144
 12054  2576  009D               	movwf	29	;volatile
 12055                           
 12056                           ;main.c: 415:  TX1STA = 0b00100000;
 12057  2577  3020               	movlw	32
 12058  2578  009E               	movwf	30	;volatile
 12059  2579  0008               	return
 12060  257A                     __end_of_initialize:	
 12061                           
 12062                           	psect	text35
 12063  1CAB                     __ptext35:	
 12064 ;; *************** function _initGlobalData *****************
 12065 ;; Defined at:
 12066 ;;		line 91 in file "main.c"
 12067 ;; Parameters:    Size  Location     Type
 12068 ;;  data            2    0[BANK0 ] PTR struct .
 12069 ;;		 -> data(173), 
 12070 ;; Auto vars:     Size  Location     Type
 12071 ;;  chData          2    7[BANK0 ] PTR struct .
 12072 ;;		 -> data.chData(128), data(173), 
 12073 ;;  n               1    6[BANK0 ] unsigned char 
 12074 ;; Return value:  Size  Location     Type
 12075 ;;                  1    wreg      void 
 12076 ;; Registers used:
 12077 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12078 ;; Tracked objects:
 12079 ;;		On entry : 0/0
 12080 ;;		On exit  : 0/0
 12081 ;;		Unchanged: 0/0
 12082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12083 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12084 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12085 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12086 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12087 ;;Total ram usage:        9 bytes
 12088 ;; Hardware stack levels used:    1
 12089 ;; Hardware stack levels required when called:    3
 12090 ;; This function calls:
 12091 ;;		Nothing
 12092 ;; This function is called by:
 12093 ;;		_main
 12094 ;; This function uses a non-reentrant model
 12095 ;;
 12096                           
 12097                           
 12098                           ;psect for function _initGlobalData
 12099  1CAB                     _initGlobalData:	
 12100                           
 12101                           ;main.c: 91: void initGlobalData(t_globalData *data);main.c: 92: {;main.c: 93:  uint8_t 
      +                          n;;main.c: 94:  t_channelData *chData;;main.c: 96:  data->tempC = 0;
 12102                           
 12103                           ;incstack = 0
 12104                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0]
 12105  1CAB  0140               	movlb	0	; select bank0
 12106  1CAC  0820               	movf	initGlobalData@data,w
 12107  1CAD  0086               	movwf	6
 12108  1CAE  0821               	movf	initGlobalData@data+1,w
 12109  1CAF  0087               	movwf	7
 12110  1CB0  3000               	movlw	0
 12111  1CB1  3FC0               	movwi [0]fsr1
 12112  1CB2  3000               	movlw	0
 12113  1CB3  3FC1               	movwi [1]fsr1
 12114  1CB4  3000               	movlw	0
 12115  1CB5  3FC2               	movwi [2]fsr1
 12116  1CB6  3000               	movlw	0
 12117  1CB7  3FC3               	movwi [3]fsr1
 12118                           
 12119                           ;main.c: 97:  data->relHum = 0;
 12120  1CB8  0820               	movf	initGlobalData@data,w
 12121  1CB9  0086               	movwf	6
 12122  1CBA  0821               	movf	initGlobalData@data+1,w
 12123  1CBB  0087               	movwf	7
 12124  1CBC  3144               	addfsr 1,4
 12125  1CBD  3000               	movlw	0
 12126  1CBE  3FC0               	movwi [0]fsr1
 12127  1CBF  3000               	movlw	0
 12128  1CC0  3FC1               	movwi [1]fsr1
 12129  1CC1  3000               	movlw	0
 12130  1CC2  3FC2               	movwi [2]fsr1
 12131  1CC3  3000               	movlw	0
 12132  1CC4  3FC3               	movwi [3]fsr1
 12133                           
 12134                           ;main.c: 98:  data->dewPointC = 0;
 12135  1CC5  0820               	movf	initGlobalData@data,w
 12136  1CC6  0086               	movwf	6
 12137  1CC7  0821               	movf	initGlobalData@data+1,w
 12138  1CC8  0087               	movwf	7
 12139  1CC9  3148               	addfsr 1,8
 12140  1CCA  3000               	movlw	0
 12141  1CCB  3FC0               	movwi [0]fsr1
 12142  1CCC  3000               	movlw	0
 12143  1CCD  3FC1               	movwi [1]fsr1
 12144  1CCE  3000               	movlw	0
 12145  1CCF  3FC2               	movwi [2]fsr1
 12146  1CD0  3000               	movlw	0
 12147  1CD1  3FC3               	movwi [3]fsr1
 12148                           
 12149                           ;main.c: 99:  data->sensorVersion = 0;
 12150  1CD2  0820               	movf	initGlobalData@data,w
 12151  1CD3  0086               	movwf	6
 12152  1CD4  0821               	movf	initGlobalData@data+1,w
 12153  1CD5  0087               	movwf	7
 12154  1CD6  314C               	addfsr 1,12
 12155  1CD7  3000               	movlw	0
 12156  1CD8  3FC0               	movwi [0]fsr1
 12157  1CD9  3000               	movlw	0
 12158  1CDA  3FC1               	movwi [1]fsr1
 12159  1CDB  3000               	movlw	0
 12160  1CDC  3FC2               	movwi [2]fsr1
 12161  1CDD  3000               	movlw	0
 12162  1CDE  3FC3               	movwi [3]fsr1
 12163                           
 12164                           ;main.c: 100:  data->tempAux = 0;
 12165  1CDF  0820               	movf	initGlobalData@data,w
 12166  1CE0  0086               	movwf	6
 12167  1CE1  0821               	movf	initGlobalData@data+1,w
 12168  1CE2  0087               	movwf	7
 12169  1CE3  3150               	addfsr 1,16
 12170  1CE4  3000               	movlw	0
 12171  1CE5  3FC0               	movwi [0]fsr1
 12172  1CE6  3000               	movlw	0
 12173  1CE7  3FC1               	movwi [1]fsr1
 12174  1CE8  3000               	movlw	0
 12175  1CE9  3FC2               	movwi [2]fsr1
 12176  1CEA  3000               	movlw	0
 12177  1CEB  3FC3               	movwi [3]fsr1
 12178                           
 12179                           ;main.c: 101:  data->voltage = 0;
 12180  1CEC  0820               	movf	initGlobalData@data,w
 12181  1CED  0086               	movwf	6
 12182  1CEE  0821               	movf	initGlobalData@data+1,w
 12183  1CEF  0087               	movwf	7
 12184  1CF0  3154               	addfsr 1,20
 12185  1CF1  3000               	movlw	0
 12186  1CF2  3FC0               	movwi [0]fsr1
 12187  1CF3  3000               	movlw	0
 12188  1CF4  3FC1               	movwi [1]fsr1
 12189  1CF5  3000               	movlw	0
 12190  1CF6  3FC2               	movwi [2]fsr1
 12191  1CF7  3000               	movlw	0
 12192  1CF8  3FC3               	movwi [3]fsr1
 12193                           
 12194                           ;main.c: 102:  data->current = 0;
 12195  1CF9  0820               	movf	initGlobalData@data,w
 12196  1CFA  0086               	movwf	6
 12197  1CFB  0821               	movf	initGlobalData@data+1,w
 12198  1CFC  0087               	movwf	7
 12199  1CFD  3158               	addfsr 1,24
 12200  1CFE  3000               	movlw	0
 12201  1CFF  3FC0               	movwi [0]fsr1
 12202  1D00  3000               	movlw	0
 12203  1D01  3FC1               	movwi [1]fsr1
 12204  1D02  3000               	movlw	0
 12205  1D03  3FC2               	movwi [2]fsr1
 12206  1D04  3000               	movlw	0
 12207  1D05  3FC3               	movwi [3]fsr1
 12208                           
 12209                           ;main.c: 103:  data->power = 0;
 12210  1D06  0820               	movf	initGlobalData@data,w
 12211  1D07  0086               	movwf	6
 12212  1D08  0821               	movf	initGlobalData@data+1,w
 12213  1D09  0087               	movwf	7
 12214  1D0A  315C               	addfsr 1,28
 12215  1D0B  3000               	movlw	0
 12216  1D0C  3FC0               	movwi [0]fsr1
 12217  1D0D  3000               	movlw	0
 12218  1D0E  3FC1               	movwi [1]fsr1
 12219  1D0F  3000               	movlw	0
 12220  1D10  3FC2               	movwi [2]fsr1
 12221  1D11  3000               	movlw	0
 12222  1D12  3FC3               	movwi [3]fsr1
 12223                           
 12224                           ;main.c: 104:  data->dpOffset = 3.0;
 12225  1D13  0820               	movf	initGlobalData@data,w
 12226  1D14  3E20               	addlw	32
 12227  1D15  0086               	movwf	6
 12228  1D16  3000               	movlw	0
 12229  1D17  3D21               	addwfc	initGlobalData@data+1,w
 12230  1D18  0087               	movwf	7
 12231  1D19  3000               	movlw	0
 12232  1D1A  3FC0               	movwi [0]fsr1
 12233  1D1B  3000               	movlw	0
 12234  1D1C  3FC1               	movwi [1]fsr1
 12235  1D1D  3040               	movlw	64
 12236  1D1E  3FC2               	movwi [2]fsr1
 12237  1D1F  3040               	movlw	64
 12238  1D20  3FC3               	movwi [3]fsr1
 12239                           
 12240                           ;main.c: 105:  data->skyTemp = -40;
 12241  1D21  0820               	movf	initGlobalData@data,w
 12242  1D22  3E24               	addlw	36
 12243  1D23  0086               	movwf	6
 12244  1D24  3000               	movlw	0
 12245  1D25  3D21               	addwfc	initGlobalData@data+1,w
 12246  1D26  0087               	movwf	7
 12247  1D27  3000               	movlw	0
 12248  1D28  3FC0               	movwi [0]fsr1
 12249  1D29  3000               	movlw	0
 12250  1D2A  3FC1               	movwi [1]fsr1
 12251  1D2B  3020               	movlw	32
 12252  1D2C  3FC2               	movwi [2]fsr1
 12253  1D2D  30C2               	movlw	194
 12254  1D2E  3FC3               	movwi [3]fsr1
 12255                           
 12256                           ;main.c: 106:  data->fudgeFactor = 1.0;
 12257  1D2F  0820               	movf	initGlobalData@data,w
 12258  1D30  3E28               	addlw	40
 12259  1D31  0086               	movwf	6
 12260  1D32  3000               	movlw	0
 12261  1D33  3D21               	addwfc	initGlobalData@data+1,w
 12262  1D34  0087               	movwf	7
 12263  1D35  3000               	movlw	0
 12264  1D36  3FC0               	movwi [0]fsr1
 12265  1D37  3000               	movlw	0
 12266  1D38  3FC1               	movwi [1]fsr1
 12267  1D39  3080               	movlw	128
 12268  1D3A  3FC2               	movwi [2]fsr1
 12269  1D3B  303F               	movlw	63
 12270  1D3C  3FC3               	movwi [3]fsr1
 12271                           
 12272                           ;main.c: 108:  for (n = 0; n < 4; n++) {
 12273  1D3D  01A6               	clrf	initGlobalData@n
 12274  1D3E                     l4785:	
 12275                           
 12276                           ;main.c: 109:   chData = &data->chData[n];
 12277  1D3E  0826               	movf	initGlobalData@n,w
 12278  1D3F  00A2               	movwf	??_initGlobalData
 12279  1D40  01A3               	clrf	??_initGlobalData+1
 12280  1D41  3005               	movlw	5
 12281  1D42                     u5385:	
 12282  1D42  35A2               	lslf	??_initGlobalData,f
 12283  1D43  0DA3               	rlf	??_initGlobalData+1,f
 12284  1D44  0B89               	decfsz	9,f
 12285  1D45  2D42               	goto	u5385
 12286  1D46  0822               	movf	??_initGlobalData,w
 12287  1D47  0720               	addwf	initGlobalData@data,w
 12288  1D48  00A4               	movwf	??_initGlobalData+2
 12289  1D49  0823               	movf	??_initGlobalData+1,w
 12290  1D4A  3D21               	addwfc	initGlobalData@data+1,w
 12291  1D4B  00A5               	movwf	??_initGlobalData+3
 12292  1D4C  0824               	movf	??_initGlobalData+2,w
 12293  1D4D  3E2D               	addlw	45
 12294  1D4E  00A7               	movwf	initGlobalData@chData
 12295  1D4F  3000               	movlw	0
 12296  1D50  3D25               	addwfc	??_initGlobalData+3,w
 12297  1D51  00A8               	movwf	initGlobalData@chData+1
 12298                           
 12299                           ;main.c: 110:   chData->lensDia = 4;
 12300  1D52  0827               	movf	initGlobalData@chData,w
 12301  1D53  0086               	movwf	6
 12302  1D54  0828               	movf	initGlobalData@chData+1,w
 12303  1D55  0087               	movwf	7
 12304  1D56  3156               	addfsr 1,22
 12305  1D57  3000               	movlw	0
 12306  1D58  3FC0               	movwi [0]fsr1
 12307  1D59  3000               	movlw	0
 12308  1D5A  3FC1               	movwi [1]fsr1
 12309  1D5B  3080               	movlw	128
 12310  1D5C  3FC2               	movwi [2]fsr1
 12311  1D5D  3040               	movlw	64
 12312  1D5E  3FC3               	movwi [3]fsr1
 12313                           
 12314                           ;main.c: 111:   chData->status = CH_ENABLED;
 12315  1D5F  0827               	movf	initGlobalData@chData,w
 12316  1D60  3E1F               	addlw	31
 12317  1D61  00A2               	movwf	??_initGlobalData
 12318  1D62  3000               	movlw	0
 12319  1D63  3D28               	addwfc	initGlobalData@chData+1,w
 12320  1D64  00A3               	movwf	??_initGlobalData+1
 12321  1D65  0822               	movf	??_initGlobalData,w
 12322  1D66  0086               	movwf	6
 12323  1D67  0823               	movf	??_initGlobalData+1,w
 12324  1D68  0087               	movwf	7
 12325  1D69  3001               	movlw	1
 12326  1D6A  0081               	movwf	1
 12327                           
 12328                           ;main.c: 112:   chData->mode = MODE_AUTO;
 12329  1D6B  0827               	movf	initGlobalData@chData,w
 12330  1D6C  3E1E               	addlw	30
 12331  1D6D  00A2               	movwf	??_initGlobalData
 12332  1D6E  3000               	movlw	0
 12333  1D6F  3D28               	addwfc	initGlobalData@chData+1,w
 12334  1D70  00A3               	movwf	??_initGlobalData+1
 12335  1D71  0822               	movf	??_initGlobalData,w
 12336  1D72  0086               	movwf	6
 12337  1D73  0823               	movf	??_initGlobalData+1,w
 12338  1D74  0087               	movwf	7
 12339  1D75  3001               	movlw	1
 12340  1D76  0081               	movwf	1
 12341                           
 12342                           ;main.c: 113:   chData->Pmax = 0;
 12343  1D77  0827               	movf	initGlobalData@chData,w
 12344  1D78  0086               	movwf	6
 12345  1D79  0828               	movf	initGlobalData@chData+1,w
 12346  1D7A  0087               	movwf	7
 12347  1D7B  3144               	addfsr 1,4
 12348  1D7C  3000               	movlw	0
 12349  1D7D  3FC0               	movwi [0]fsr1
 12350  1D7E  3000               	movlw	0
 12351  1D7F  3FC1               	movwi [1]fsr1
 12352  1D80  3000               	movlw	0
 12353  1D81  3FC2               	movwi [2]fsr1
 12354  1D82  3000               	movlw	0
 12355  1D83  3FC3               	movwi [3]fsr1
 12356                           
 12357                           ;main.c: 114:   chData->Preq = 0;
 12358  1D84  0827               	movf	initGlobalData@chData,w
 12359  1D85  0086               	movwf	6
 12360  1D86  0828               	movf	initGlobalData@chData+1,w
 12361  1D87  0087               	movwf	7
 12362  1D88  3148               	addfsr 1,8
 12363  1D89  3000               	movlw	0
 12364  1D8A  3FC0               	movwi [0]fsr1
 12365  1D8B  3000               	movlw	0
 12366  1D8C  3FC1               	movwi [1]fsr1
 12367  1D8D  3000               	movlw	0
 12368  1D8E  3FC2               	movwi [2]fsr1
 12369  1D8F  3000               	movlw	0
 12370  1D90  3FC3               	movwi [3]fsr1
 12371                           
 12372                           ;main.c: 115:   chData->Patt = 0;
 12373  1D91  0827               	movf	initGlobalData@chData,w
 12374  1D92  0086               	movwf	6
 12375  1D93  0828               	movf	initGlobalData@chData+1,w
 12376  1D94  0087               	movwf	7
 12377  1D95  314C               	addfsr 1,12
 12378  1D96  3000               	movlw	0
 12379  1D97  3FC0               	movwi [0]fsr1
 12380  1D98  3000               	movlw	0
 12381  1D99  3FC1               	movwi [1]fsr1
 12382  1D9A  3000               	movlw	0
 12383  1D9B  3FC2               	movwi [2]fsr1
 12384  1D9C  3000               	movlw	0
 12385  1D9D  3FC3               	movwi [3]fsr1
 12386                           
 12387                           ;main.c: 116:   chData->current = 0;
 12388  1D9E  0827               	movf	initGlobalData@chData,w
 12389  1D9F  0086               	movwf	6
 12390  1DA0  0828               	movf	initGlobalData@chData+1,w
 12391  1DA1  0087               	movwf	7
 12392  1DA2  3000               	movlw	0
 12393  1DA3  3FC0               	movwi [0]fsr1
 12394  1DA4  3000               	movlw	0
 12395  1DA5  3FC1               	movwi [1]fsr1
 12396  1DA6  3000               	movlw	0
 12397  1DA7  3FC2               	movwi [2]fsr1
 12398  1DA8  3000               	movlw	0
 12399  1DA9  3FC3               	movwi [3]fsr1
 12400                           
 12401                           ;main.c: 117:  }
 12402  1DAA  3001               	movlw	1
 12403  1DAB  00A2               	movwf	??_initGlobalData
 12404  1DAC  0822               	movf	??_initGlobalData,w
 12405  1DAD  07A6               	addwf	initGlobalData@n,f
 12406  1DAE  3004               	movlw	4
 12407  1DAF  0226               	subwf	initGlobalData@n,w
 12408  1DB0  1803               	btfsc	3,0
 12409  1DB1  0008               	return
 12410  1DB2  2D3E               	goto	l4785
 12411  1DB3                     __end_of_initGlobalData:	
 12412                           
 12413                           	psect	text36
 12414  0A65                     __ptext36:	
 12415 ;; *************** function _getAvgChannelCurrents *****************
 12416 ;; Defined at:
 12417 ;;		line 280 in file "main.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;  data            2   78[BANK0 ] PTR struct .
 12420 ;;		 -> data(173), 
 12421 ;; Auto vars:     Size  Location     Type
 12422 ;;  current         4   11[BANK1 ] float 
 12423 ;;  chData          2   15[BANK1 ] PTR struct .
 12424 ;;		 -> data.chData(128), data(173), 
 12425 ;;  adc             2    9[BANK1 ] unsigned short 
 12426 ;; Return value:  Size  Location     Type
 12427 ;;                  1    wreg      unsigned char 
 12428 ;; Registers used:
 12429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12430 ;; Tracked objects:
 12431 ;;		On entry : 0/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12436 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12437 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12438 ;;      Totals:         0       2      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12439 ;;Total ram usage:       14 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    5
 12442 ;; This function calls:
 12443 ;;		___fldiv
 12444 ;;		___flge
 12445 ;;		___flmul
 12446 ;;		___fltol
 12447 ;;		___xxtofl
 12448 ;;		_adcGetConversion
 12449 ;;		_ema
 12450 ;;		_error
 12451 ;;		_setSwitch
 12452 ;; This function is called by:
 12453 ;;		_main
 12454 ;; This function uses a non-reentrant model
 12455 ;;
 12456                           
 12457                           
 12458                           ;psect for function _getAvgChannelCurrents
 12459  0A65                     _getAvgChannelCurrents:	
 12460                           
 12461                           ;main.c: 280: uint8_t getAvgChannelCurrents(t_globalData *data);main.c: 281: {;main.c: 2
      +                          82:  uint16_t adc;;main.c: 283:  static uint16_t avg;;main.c: 284:  static uint8_t chann
      +                          el = 0;;main.c: 285:  static uint8_t samples = 0;;main.c: 286:  static uint8_t busy = 0;
      +                          ;main.c: 287:  float current;;main.c: 288:  t_channelData *chData;;main.c: 290:  chData 
      +                          = &data->chData[channel];
 12462                           
 12463                           ;incstack = 0
 12464                           ; Regs used in _getAvgChannelCurrents: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12465  0A65  0141               	movlb	1	; select bank1
 12466  0A66  086C               	movf	getAvgChannelCurrents@channel^(0+128),w
 12467  0A67  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12468  0A68  01A6               	clrf	(??_getAvgChannelCurrents^(0+128)+1)
 12469  0A69  3005               	movlw	5
 12470  0A6A                     u5625:	
 12471  0A6A  35A5               	lslf	??_getAvgChannelCurrents^(0+128),f
 12472  0A6B  0DA6               	rlf	(??_getAvgChannelCurrents^(0+128)+1),f
 12473  0A6C  0B89               	decfsz	9,f
 12474  0A6D  2A6A               	goto	u5625
 12475  0A6E  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12476  0A6F  0140               	movlb	0	; select bank0
 12477  0A70  076E               	addwf	getAvgChannelCurrents@data,w
 12478  0A71  0141               	movlb	1	; select bank1
 12479  0A72  00A7               	movwf	(??_getAvgChannelCurrents+2)^(0+128)
 12480  0A73  0826               	movf	(??_getAvgChannelCurrents+1)^(0+128),w
 12481  0A74  0140               	movlb	0	; select bank0
 12482  0A75  3D6F               	addwfc	getAvgChannelCurrents@data+1,w
 12483  0A76  0141               	movlb	1	; select bank1
 12484  0A77  00A8               	movwf	(??_getAvgChannelCurrents+3)^(0+128)
 12485  0A78  0827               	movf	(??_getAvgChannelCurrents+2)^(0+128),w
 12486  0A79  3E2D               	addlw	45
 12487  0A7A  00AF               	movwf	getAvgChannelCurrents@chData^(0+128)
 12488  0A7B  3000               	movlw	0
 12489  0A7C  3D28               	addwfc	(??_getAvgChannelCurrents+3)^(0+128),w
 12490  0A7D  00B0               	movwf	(getAvgChannelCurrents@chData+1)^(0+128)
 12491                           
 12492                           ;main.c: 291:  if (!busy) {
 12493  0A7E  086A               	movf	getAvgChannelCurrents@busy^(0+128),w
 12494  0A7F  1D03               	btfss	3,2
 12495  0A80  2A8F               	goto	l4955
 12496                           
 12497                           ;main.c: 292:   busy = 1;
 12498  0A81  01EA               	clrf	getAvgChannelCurrents@busy^(0+128)
 12499  0A82  0AEA               	incf	getAvgChannelCurrents@busy^(0+128),f
 12500                           
 12501                           ;main.c: 293:   samples = 0;
 12502  0A83  01EB               	clrf	getAvgChannelCurrents@samples^(0+128)
 12503                           
 12504                           ;main.c: 294:   channel = 0;
 12505  0A84  01EC               	clrf	getAvgChannelCurrents@channel^(0+128)
 12506                           
 12507                           ;main.c: 295:   avg = 0;
 12508  0A85  0142               	movlb	2	; select bank2
 12509  0A86  01B2               	clrf	getAvgChannelCurrents@avg^(0+256)
 12510  0A87  01B3               	clrf	(getAvgChannelCurrents@avg+1)^(0+256)
 12511                           
 12512                           ;main.c: 296:   setSwitch(channel, 1);
 12513  0A88  0140               	movlb	0	; select bank0
 12514  0A89  01A0               	clrf	setSwitch@state
 12515  0A8A  0AA0               	incf	setSwitch@state,f
 12516  0A8B  3000               	movlw	0
 12517  0A8C  31A3  2356         	fcall	_setSwitch
 12518                           
 12519                           ;main.c: 297:  } else {
 12520  0A8E  0008               	return
 12521  0A8F                     l4955:	
 12522                           
 12523                           ;main.c: 298:   if (samples++ < 20) {
 12524  0A8F  086B               	movf	getAvgChannelCurrents@samples^(0+128),w
 12525  0A90  0AEB               	incf	getAvgChannelCurrents@samples^(0+128),f
 12526  0A91  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12527  0A92  3014               	movlw	20
 12528  0A93  0225               	subwf	??_getAvgChannelCurrents^(0+128),w
 12529  0A94  1803               	skipnc
 12530  0A95  2AC4               	goto	l4959
 12531                           
 12532                           ;main.c: 299:    adc = adcGetConversion(0b010001);
 12533  0A96  3011               	movlw	17
 12534  0A97  3188  2001  318A   	fcall	_adcGetConversion
 12535  0A9A  0140               	movlb	0	; select bank0
 12536  0A9B  0821               	movf	?_adcGetConversion+1,w
 12537  0A9C  0141               	movlb	1	; select bank1
 12538  0A9D  00AA               	movwf	(getAvgChannelCurrents@adc+1)^(0+128)
 12539  0A9E  0140               	movlb	0	; select bank0
 12540  0A9F  0820               	movf	?_adcGetConversion,w
 12541  0AA0  0141               	movlb	1	; select bank1
 12542  0AA1  00A9               	movwf	getAvgChannelCurrents@adc^(0+128)
 12543                           
 12544                           ;main.c: 300:    avg = ema(adc, avg, ( (uint32_t)(0.65 * 65535) ));
 12545  0AA2  082A               	movf	(getAvgChannelCurrents@adc+1)^(0+128),w
 12546  0AA3  0140               	movlb	0	; select bank0
 12547  0AA4  00AD               	movwf	ema@in+1
 12548  0AA5  0141               	movlb	1	; select bank1
 12549  0AA6  0829               	movf	getAvgChannelCurrents@adc^(0+128),w
 12550  0AA7  0140               	movlb	0	; select bank0
 12551  0AA8  00AC               	movwf	ema@in
 12552  0AA9  0142               	movlb	2	; select bank2
 12553  0AAA  0833               	movf	(getAvgChannelCurrents@avg+1)^(0+256),w
 12554  0AAB  0140               	movlb	0	; select bank0
 12555  0AAC  00AF               	movwf	ema@average+1
 12556  0AAD  0142               	movlb	2	; select bank2
 12557  0AAE  0832               	movf	getAvgChannelCurrents@avg^(0+256),w
 12558  0AAF  0140               	movlb	0	; select bank0
 12559  0AB0  00AE               	movwf	ema@average
 12560  0AB1  3000               	movlw	0
 12561  0AB2  00B3               	movwf	ema@alpha+3
 12562  0AB3  3000               	movlw	0
 12563  0AB4  00B2               	movwf	ema@alpha+2
 12564  0AB5  30A6               	movlw	166
 12565  0AB6  00B1               	movwf	ema@alpha+1
 12566  0AB7  3065               	movlw	101
 12567  0AB8  00B0               	movwf	ema@alpha
 12568  0AB9  31A6  26C3         	fcall	_ema
 12569  0ABB  0140               	movlb	0	; select bank0
 12570  0ABC  082D               	movf	?_ema+1,w
 12571  0ABD  0142               	movlb	2	; select bank2
 12572  0ABE  00B3               	movwf	(getAvgChannelCurrents@avg+1)^(0+256)
 12573  0ABF  0140               	movlb	0	; select bank0
 12574  0AC0  082C               	movf	?_ema,w
 12575  0AC1  0142               	movlb	2	; select bank2
 12576  0AC2  00B2               	movwf	getAvgChannelCurrents@avg^(0+256)
 12577                           
 12578                           ;main.c: 301:   } else {
 12579  0AC3  0008               	return
 12580  0AC4                     l4959:	
 12581                           
 12582                           ;main.c: 302:    setSwitch(channel, 0);
 12583  0AC4  0140               	movlb	0	; select bank0
 12584  0AC5  01A0               	clrf	setSwitch@state
 12585  0AC6  0141               	movlb	1	; select bank1
 12586  0AC7  086C               	movf	getAvgChannelCurrents@channel^(0+128),w
 12587  0AC8  31A3  2356  318A   	fcall	_setSwitch
 12588                           
 12589                           ;main.c: 303:    current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 12590  0ACB  3045               	movlw	69
 12591  0ACC  0140               	movlb	0	; select bank0
 12592  0ACD  00D1               	movwf	___fldiv@a+3
 12593  0ACE  301F               	movlw	31
 12594  0ACF  00D0               	movwf	___fldiv@a+2
 12595  0AD0  30D8               	movlw	216
 12596  0AD1  00CF               	movwf	___fldiv@a+1
 12597  0AD2  3000               	movlw	0
 12598  0AD3  00CE               	movwf	___fldiv@a
 12599  0AD4  3040               	movlw	64
 12600  0AD5  00B7               	movwf	___flmul@b+3
 12601  0AD6  30A0               	movlw	160
 12602  0AD7  00B6               	movwf	___flmul@b+2
 12603  0AD8  3000               	movlw	0
 12604  0AD9  00B5               	movwf	___flmul@b+1
 12605  0ADA  3000               	movlw	0
 12606  0ADB  00B4               	movwf	___flmul@b
 12607  0ADC  0142               	movlb	2	; select bank2
 12608  0ADD  0832               	movf	getAvgChannelCurrents@avg^(0+256),w
 12609  0ADE  0140               	movlb	0	; select bank0
 12610  0ADF  00A6               	movwf	___xxtofl@val
 12611  0AE0  0142               	movlb	2	; select bank2
 12612  0AE1  0833               	movf	(getAvgChannelCurrents@avg+1)^(0+256),w
 12613  0AE2  0140               	movlb	0	; select bank0
 12614  0AE3  00A7               	movwf	___xxtofl@val+1
 12615  0AE4  01A8               	clrf	___xxtofl@val+2
 12616  0AE5  01A9               	clrf	___xxtofl@val+3
 12617  0AE6  3000               	movlw	0
 12618  0AE7  3190  2015  318A   	fcall	___xxtofl
 12619  0AEA  0140               	movlb	0	; select bank0
 12620  0AEB  0829               	movf	?___xxtofl+3,w
 12621  0AEC  00BB               	movwf	___flmul@a+3
 12622  0AED  0828               	movf	?___xxtofl+2,w
 12623  0AEE  00BA               	movwf	___flmul@a+2
 12624  0AEF  0827               	movf	?___xxtofl+1,w
 12625  0AF0  00B9               	movwf	___flmul@a+1
 12626  0AF1  0826               	movf	?___xxtofl,w
 12627  0AF2  00B8               	movwf	___flmul@a
 12628  0AF3  3185  2502  318A   	fcall	___flmul
 12629  0AF6  0140               	movlb	0	; select bank0
 12630  0AF7  0837               	movf	?___flmul+3,w
 12631  0AF8  00D5               	movwf	___fldiv@b+3
 12632  0AF9  0836               	movf	?___flmul+2,w
 12633  0AFA  00D4               	movwf	___fldiv@b+2
 12634  0AFB  0835               	movf	?___flmul+1,w
 12635  0AFC  00D3               	movwf	___fldiv@b+1
 12636  0AFD  0834               	movf	?___flmul,w
 12637  0AFE  00D2               	movwf	___fldiv@b
 12638  0AFF  3193  2374  318A   	fcall	___fldiv
 12639  0B02  0140               	movlb	0	; select bank0
 12640  0B03  0851               	movf	?___fldiv+3,w
 12641  0B04  0141               	movlb	1	; select bank1
 12642  0B05  00AE               	movwf	(getAvgChannelCurrents@current+3)^(0+128)
 12643  0B06  0140               	movlb	0	; select bank0
 12644  0B07  0850               	movf	?___fldiv+2,w
 12645  0B08  0141               	movlb	1	; select bank1
 12646  0B09  00AD               	movwf	(getAvgChannelCurrents@current+2)^(0+128)
 12647  0B0A  0140               	movlb	0	; select bank0
 12648  0B0B  084F               	movf	?___fldiv+1,w
 12649  0B0C  0141               	movlb	1	; select bank1
 12650  0B0D  00AC               	movwf	(getAvgChannelCurrents@current+1)^(0+128)
 12651  0B0E  0140               	movlb	0	; select bank0
 12652  0B0F  084E               	movf	?___fldiv,w
 12653  0B10  0141               	movlb	1	; select bank1
 12654  0B11  00AB               	movwf	getAvgChannelCurrents@current^(0+128)
 12655                           
 12656                           ;main.c: 306:    if (current < 0.05) {
 12657  0B12  082E               	movf	(getAvgChannelCurrents@current+3)^(0+128),w
 12658  0B13  0140               	movlb	0	; select bank0
 12659  0B14  00A3               	movwf	___flge@ff1+3
 12660  0B15  0141               	movlb	1	; select bank1
 12661  0B16  082D               	movf	(getAvgChannelCurrents@current+2)^(0+128),w
 12662  0B17  0140               	movlb	0	; select bank0
 12663  0B18  00A2               	movwf	___flge@ff1+2
 12664  0B19  0141               	movlb	1	; select bank1
 12665  0B1A  082C               	movf	(getAvgChannelCurrents@current+1)^(0+128),w
 12666  0B1B  0140               	movlb	0	; select bank0
 12667  0B1C  00A1               	movwf	___flge@ff1+1
 12668  0B1D  0141               	movlb	1	; select bank1
 12669  0B1E  082B               	movf	getAvgChannelCurrents@current^(0+128),w
 12670  0B1F  0140               	movlb	0	; select bank0
 12671  0B20  00A0               	movwf	___flge@ff1
 12672  0B21  303D               	movlw	61
 12673  0B22  00A7               	movwf	___flge@ff2+3
 12674  0B23  304C               	movlw	76
 12675  0B24  00A6               	movwf	___flge@ff2+2
 12676  0B25  30CC               	movlw	204
 12677  0B26  00A5               	movwf	___flge@ff2+1
 12678  0B27  30CD               	movlw	205
 12679  0B28  00A4               	movwf	___flge@ff2
 12680  0B29  3199  21F1  318A   	fcall	___flge
 12681  0B2C  1803               	btfsc	3,0
 12682  0B2D  2B49               	goto	l4971
 12683                           
 12684                           ;main.c: 307:     if (chData->status != CH_OPEN) {
 12685  0B2E  0141               	movlb	1	; select bank1
 12686  0B2F  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12687  0B30  0086               	movwf	6
 12688  0B31  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12689  0B32  0087               	movwf	7
 12690  0B33  315F               	addfsr 1,31
 12691  0B34  3002               	movlw	2
 12692  0B35  0601               	xorwf	1,w
 12693  0B36  1903               	btfsc	3,2
 12694  0B37  2C05               	goto	l4991
 12695                           
 12696                           ;main.c: 308:      error(WARN_REMOVED);
 12697  0B38  3000               	movlw	0
 12698  0B39  3187  27FF  318A   	fcall	_error
 12699                           
 12700                           ;main.c: 309:      chData->status = CH_OPEN;
 12701  0B3C  0141               	movlb	1	; select bank1
 12702  0B3D  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12703  0B3E  3E1F               	addlw	31
 12704  0B3F  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12705  0B40  3000               	movlw	0
 12706  0B41  3D30               	addwfc	(getAvgChannelCurrents@chData+1)^(0+128),w
 12707  0B42  00A6               	movwf	(??_getAvgChannelCurrents+1)^(0+128)
 12708  0B43  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12709  0B44  0086               	movwf	6
 12710  0B45  0826               	movf	(??_getAvgChannelCurrents+1)^(0+128),w
 12711  0B46  0087               	movwf	7
 12712  0B47  3002               	movlw	2
 12713  0B48  2C04               	goto	L9
 12714  0B49                     l4971:	
 12715  0B49  3040               	movlw	64
 12716  0B4A  0140               	movlb	0	; select bank0
 12717  0B4B  00A3               	movwf	___flge@ff1+3
 12718  0B4C  3040               	movlw	64
 12719  0B4D  00A2               	movwf	___flge@ff1+2
 12720  0B4E  3000               	movlw	0
 12721  0B4F  00A1               	movwf	___flge@ff1+1
 12722  0B50  3000               	movlw	0
 12723  0B51  00A0               	movwf	___flge@ff1
 12724  0B52  0141               	movlb	1	; select bank1
 12725  0B53  082E               	movf	(getAvgChannelCurrents@current+3)^(0+128),w
 12726  0B54  0140               	movlb	0	; select bank0
 12727  0B55  00A7               	movwf	___flge@ff2+3
 12728  0B56  0141               	movlb	1	; select bank1
 12729  0B57  082D               	movf	(getAvgChannelCurrents@current+2)^(0+128),w
 12730  0B58  0140               	movlb	0	; select bank0
 12731  0B59  00A6               	movwf	___flge@ff2+2
 12732  0B5A  0141               	movlb	1	; select bank1
 12733  0B5B  082C               	movf	(getAvgChannelCurrents@current+1)^(0+128),w
 12734  0B5C  0140               	movlb	0	; select bank0
 12735  0B5D  00A5               	movwf	___flge@ff2+1
 12736  0B5E  0141               	movlb	1	; select bank1
 12737  0B5F  082B               	movf	getAvgChannelCurrents@current^(0+128),w
 12738  0B60  0140               	movlb	0	; select bank0
 12739  0B61  00A4               	movwf	___flge@ff2
 12740  0B62  3199  21F1  318A   	fcall	___flge
 12741  0B65  1803               	btfsc	3,0
 12742  0B66  2B81               	goto	l4985
 12743                           
 12744                           ;main.c: 312:     error(WARN_SHORT);
 12745  0B67  3001               	movlw	1
 12746  0B68  3187  27FF  318A   	fcall	_error
 12747                           
 12748                           ;main.c: 313:     chData->status = CH_DISABLED;
 12749  0B6B  0141               	movlb	1	; select bank1
 12750  0B6C  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12751  0B6D  0086               	movwf	6
 12752  0B6E  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12753  0B6F  0087               	movwf	7
 12754  0B70  315F               	addfsr 1,31
 12755  0B71  0181               	clrf	1
 12756                           
 12757                           ;main.c: 314:     if (!PORTCbits.RC2) {
 12758  0B72  0140               	movlb	0	; select bank0
 12759  0B73  190E               	btfsc	14,2	;volatile
 12760  0B74  2C05               	goto	l4991
 12761                           
 12762                           ;main.c: 315:      LATCbits.LATC3 = 0;
 12763  0B75  119A               	bcf	26,3	;volatile
 12764                           
 12765                           ;main.c: 316:      _delay((unsigned long)((5)*(4000000/4000.0)));
 12766  0B76  3007               	movlw	7
 12767  0B77  0141               	movlb	1	; select bank1
 12768  0B78  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12769  0B79  307D               	movlw	125
 12770  0B7A                     u6357:	
 12771  0B7A  0B89               	decfsz	9,f
 12772  0B7B  2B7A               	goto	u6357
 12773  0B7C  0BA5               	decfsz	??_getAvgChannelCurrents^(0+128),f
 12774  0B7D  2B7A               	goto	u6357
 12775                           
 12776                           ;main.c: 317:      LATCbits.LATC3 = 1;
 12777  0B7E  0140               	movlb	0	; select bank0
 12778  0B7F  159A               	bsf	26,3	;volatile
 12779  0B80  2C05               	goto	l4991
 12780  0B81                     l4985:	
 12781                           
 12782                           ;main.c: 320:     chData->status = CH_ENABLED;
 12783  0B81  0141               	movlb	1	; select bank1
 12784  0B82  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12785  0B83  3E1F               	addlw	31
 12786  0B84  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12787  0B85  3000               	movlw	0
 12788  0B86  3D30               	addwfc	(getAvgChannelCurrents@chData+1)^(0+128),w
 12789  0B87  00A6               	movwf	(??_getAvgChannelCurrents+1)^(0+128)
 12790  0B88  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12791  0B89  0086               	movwf	6
 12792  0B8A  0826               	movf	(??_getAvgChannelCurrents+1)^(0+128),w
 12793  0B8B  0087               	movwf	7
 12794  0B8C  3001               	movlw	1
 12795  0B8D  0081               	movwf	1
 12796                           
 12797                           ;main.c: 321:     chData->current = current;
 12798  0B8E  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12799  0B8F  0086               	movwf	6
 12800  0B90  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12801  0B91  0087               	movwf	7
 12802  0B92  082B               	movf	getAvgChannelCurrents@current^(0+128),w
 12803  0B93  3FC0               	movwi [0]fsr1
 12804  0B94  082C               	movf	(getAvgChannelCurrents@current+1)^(0+128),w
 12805  0B95  3FC1               	movwi [1]fsr1
 12806  0B96  082D               	movf	(getAvgChannelCurrents@current+2)^(0+128),w
 12807  0B97  3FC2               	movwi [2]fsr1
 12808  0B98  082E               	movf	(getAvgChannelCurrents@current+3)^(0+128),w
 12809  0B99  3FC3               	movwi [3]fsr1
 12810                           
 12811                           ;main.c: 322:     chData->Pmax = data->voltage * current;
 12812  0B9A  082E               	movf	(getAvgChannelCurrents@current+3)^(0+128),w
 12813  0B9B  0140               	movlb	0	; select bank0
 12814  0B9C  00B7               	movwf	___flmul@b+3
 12815  0B9D  0141               	movlb	1	; select bank1
 12816  0B9E  082D               	movf	(getAvgChannelCurrents@current+2)^(0+128),w
 12817  0B9F  0140               	movlb	0	; select bank0
 12818  0BA0  00B6               	movwf	___flmul@b+2
 12819  0BA1  0141               	movlb	1	; select bank1
 12820  0BA2  082C               	movf	(getAvgChannelCurrents@current+1)^(0+128),w
 12821  0BA3  0140               	movlb	0	; select bank0
 12822  0BA4  00B5               	movwf	___flmul@b+1
 12823  0BA5  0141               	movlb	1	; select bank1
 12824  0BA6  082B               	movf	getAvgChannelCurrents@current^(0+128),w
 12825  0BA7  0140               	movlb	0	; select bank0
 12826  0BA8  00B4               	movwf	___flmul@b
 12827  0BA9  086E               	movf	getAvgChannelCurrents@data,w
 12828  0BAA  0086               	movwf	6
 12829  0BAB  086F               	movf	getAvgChannelCurrents@data+1,w
 12830  0BAC  0087               	movwf	7
 12831  0BAD  3154               	addfsr 1,20
 12832  0BAE  3F40               	moviw [0]fsr1
 12833  0BAF  00B8               	movwf	___flmul@a
 12834  0BB0  3F41               	moviw [1]fsr1
 12835  0BB1  00B9               	movwf	___flmul@a+1
 12836  0BB2  3F42               	moviw [2]fsr1
 12837  0BB3  00BA               	movwf	___flmul@a+2
 12838  0BB4  3F43               	moviw [3]fsr1
 12839  0BB5  00BB               	movwf	___flmul@a+3
 12840  0BB6  3185  2502  318A   	fcall	___flmul
 12841  0BB9  0141               	movlb	1	; select bank1
 12842  0BBA  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12843  0BBB  0086               	movwf	6
 12844  0BBC  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12845  0BBD  0087               	movwf	7
 12846  0BBE  3144               	addfsr 1,4
 12847  0BBF  0140               	movlb	0	; select bank0
 12848  0BC0  0834               	movf	?___flmul,w
 12849  0BC1  3FC0               	movwi [0]fsr1
 12850  0BC2  0835               	movf	?___flmul+1,w
 12851  0BC3  3FC1               	movwi [1]fsr1
 12852  0BC4  0836               	movf	?___flmul+2,w
 12853  0BC5  3FC2               	movwi [2]fsr1
 12854  0BC6  0837               	movf	?___flmul+3,w
 12855  0BC7  3FC3               	movwi [3]fsr1
 12856                           
 12857                           ;main.c: 323:     chData->DCreq = chData->Pmax / chData->Preq;
 12858  0BC8  0141               	movlb	1	; select bank1
 12859  0BC9  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12860  0BCA  0086               	movwf	6
 12861  0BCB  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12862  0BCC  0087               	movwf	7
 12863  0BCD  3144               	addfsr 1,4
 12864  0BCE  3F40               	moviw [0]fsr1
 12865  0BCF  0140               	movlb	0	; select bank0
 12866  0BD0  00D2               	movwf	___fldiv@b
 12867  0BD1  3F41               	moviw [1]fsr1
 12868  0BD2  00D3               	movwf	___fldiv@b+1
 12869  0BD3  3F42               	moviw [2]fsr1
 12870  0BD4  00D4               	movwf	___fldiv@b+2
 12871  0BD5  3F43               	moviw [3]fsr1
 12872  0BD6  00D5               	movwf	___fldiv@b+3
 12873  0BD7  0141               	movlb	1	; select bank1
 12874  0BD8  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12875  0BD9  0086               	movwf	6
 12876  0BDA  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12877  0BDB  0087               	movwf	7
 12878  0BDC  3148               	addfsr 1,8
 12879  0BDD  3F40               	moviw [0]fsr1
 12880  0BDE  0140               	movlb	0	; select bank0
 12881  0BDF  00CE               	movwf	___fldiv@a
 12882  0BE0  3F41               	moviw [1]fsr1
 12883  0BE1  00CF               	movwf	___fldiv@a+1
 12884  0BE2  3F42               	moviw [2]fsr1
 12885  0BE3  00D0               	movwf	___fldiv@a+2
 12886  0BE4  3F43               	moviw [3]fsr1
 12887  0BE5  00D1               	movwf	___fldiv@a+3
 12888  0BE6  3193  2374  318A   	fcall	___fldiv
 12889  0BE9  0140               	movlb	0	; select bank0
 12890  0BEA  0851               	movf	?___fldiv+3,w
 12891  0BEB  00EB               	movwf	___fltol@f1+3
 12892  0BEC  0850               	movf	?___fldiv+2,w
 12893  0BED  00EA               	movwf	___fltol@f1+2
 12894  0BEE  084F               	movf	?___fldiv+1,w
 12895  0BEF  00E9               	movwf	___fltol@f1+1
 12896  0BF0  084E               	movf	?___fldiv,w
 12897  0BF1  00E8               	movwf	___fltol@f1
 12898  0BF2  3199  217F  318A   	fcall	___fltol
 12899  0BF5  0140               	movlb	0	; select bank0
 12900  0BF6  0868               	movf	?___fltol,w
 12901  0BF7  0141               	movlb	1	; select bank1
 12902  0BF8  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12903  0BF9  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12904  0BFA  3E14               	addlw	20
 12905  0BFB  00A6               	movwf	(??_getAvgChannelCurrents+1)^(0+128)
 12906  0BFC  3000               	movlw	0
 12907  0BFD  3D30               	addwfc	(getAvgChannelCurrents@chData+1)^(0+128),w
 12908  0BFE  00A7               	movwf	(??_getAvgChannelCurrents+2)^(0+128)
 12909  0BFF  0826               	movf	(??_getAvgChannelCurrents+1)^(0+128),w
 12910  0C00  0086               	movwf	6
 12911  0C01  0827               	movf	(??_getAvgChannelCurrents+2)^(0+128),w
 12912  0C02  0087               	movwf	7
 12913  0C03  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12914  0C04                     L9:	
 12915  0C04  0081               	movwf	1
 12916  0C05                     l4991:	
 12917                           
 12918                           ;main.c: 327:    if (channel < 4 - 1) {
 12919  0C05  3003               	movlw	3
 12920  0C06  0141               	movlb	1	; select bank1
 12921  0C07  026C               	subwf	getAvgChannelCurrents@channel^(0+128),w
 12922  0C08  1803               	skipnc
 12923  0C09  2C19               	goto	l4999
 12924                           
 12925                           ;main.c: 328:     channel++;
 12926  0C0A  3001               	movlw	1
 12927  0C0B  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12928  0C0C  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12929  0C0D  07EC               	addwf	getAvgChannelCurrents@channel^(0+128),f
 12930                           
 12931                           ;main.c: 329:     avg = 0;
 12932  0C0E  0142               	movlb	2	; select bank2
 12933  0C0F  01B2               	clrf	getAvgChannelCurrents@avg^(0+256)
 12934  0C10  01B3               	clrf	(getAvgChannelCurrents@avg+1)^(0+256)
 12935                           
 12936                           ;main.c: 330:     setSwitch(channel, 1);
 12937  0C11  0140               	movlb	0	; select bank0
 12938  0C12  01A0               	clrf	setSwitch@state
 12939  0C13  0AA0               	incf	setSwitch@state,f
 12940  0C14  0141               	movlb	1	; select bank1
 12941  0C15  086C               	movf	getAvgChannelCurrents@channel^(0+128),w
 12942  0C16  31A3  2356         	fcall	_setSwitch
 12943                           
 12944                           ;main.c: 331:    } else {
 12945  0C18  0008               	return
 12946  0C19                     l4999:	
 12947                           
 12948                           ;main.c: 332:     busy = 0;
 12949  0C19  01EA               	clrf	getAvgChannelCurrents@busy^(0+128)
 12950  0C1A  0008               	return
 12951  0C1B                     __end_of_getAvgChannelCurrents:	
 12952                           
 12953                           	psect	text37
 12954  2356                     __ptext37:	
 12955 ;; *************** function _setSwitch *****************
 12956 ;; Defined at:
 12957 ;;		line 194 in file "main.c"
 12958 ;; Parameters:    Size  Location     Type
 12959 ;;  channel         1    wreg     unsigned char 
 12960 ;;  state           1    0[BANK0 ] unsigned char 
 12961 ;; Auto vars:     Size  Location     Type
 12962 ;;  channel         1    3[BANK0 ] unsigned char 
 12963 ;; Return value:  Size  Location     Type
 12964 ;;                  1    wreg      void 
 12965 ;; Registers used:
 12966 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12967 ;; Tracked objects:
 12968 ;;		On entry : 0/0
 12969 ;;		On exit  : 0/0
 12970 ;;		Unchanged: 0/0
 12971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12972 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12976 ;;Total ram usage:        4 bytes
 12977 ;; Hardware stack levels used:    1
 12978 ;; Hardware stack levels required when called:    3
 12979 ;; This function calls:
 12980 ;;		Nothing
 12981 ;; This function is called by:
 12982 ;;		_getAvgChannelCurrents
 12983 ;; This function uses a non-reentrant model
 12984 ;;
 12985                           
 12986                           
 12987                           ;psect for function _setSwitch
 12988  2356                     _setSwitch:	
 12989                           
 12990                           ;incstack = 0
 12991                           ; Regs used in _setSwitch: [wreg-fsr0h+status,2+status,0]
 12992                           ;setSwitch@channel stored from wreg
 12993  2356  0140               	movlb	0	; select bank0
 12994  2357  00A3               	movwf	setSwitch@channel
 12995                           
 12996                           ;main.c: 194: void setSwitch(uint8_t channel, uint8_t state);main.c: 195: {;main.c: 196:
      +                            switch (channel) {
 12997  2358  2B71               	goto	l4239
 12998  2359                     l4229:	
 12999                           
 13000                           ;main.c: 198:   LATAbits.LATA0 = state;
 13001  2359  0C20               	rrf	setSwitch@state,w
 13002  235A  1C03               	skipc
 13003  235B  1018               	bcf	24,0	;volatile
 13004  235C  1803               	skipnc
 13005  235D  1418               	bsf	24,0	;volatile
 13006                           
 13007                           ;main.c: 199:   break;
 13008  235E  0008               	return
 13009  235F                     l4231:	
 13010                           
 13011                           ;main.c: 201:   LATAbits.LATA1 = state;
 13012  235F  0C20               	rrf	setSwitch@state,w
 13013  2360  1C03               	skipc
 13014  2361  1098               	bcf	24,1	;volatile
 13015  2362  1803               	skipnc
 13016  2363  1498               	bsf	24,1	;volatile
 13017                           
 13018                           ;main.c: 202:   break;
 13019  2364  0008               	return
 13020  2365                     l4233:	
 13021                           
 13022                           ;main.c: 204:   LATAbits.LATA2 = state;
 13023  2365  0C20               	rrf	setSwitch@state,w
 13024  2366  1C03               	skipc
 13025  2367  1118               	bcf	24,2	;volatile
 13026  2368  1803               	skipnc
 13027  2369  1518               	bsf	24,2	;volatile
 13028                           
 13029                           ;main.c: 205:   break;
 13030  236A  0008               	return
 13031  236B                     l4235:	
 13032                           
 13033                           ;main.c: 207:   LATAbits.LATA3 = state;
 13034  236B  0C20               	rrf	setSwitch@state,w
 13035  236C  1C03               	skipc
 13036  236D  1198               	bcf	24,3	;volatile
 13037  236E  1803               	skipnc
 13038  236F  1598               	bsf	24,3	;volatile
 13039                           
 13040                           ;main.c: 208:   break;
 13041  2370  0008               	return
 13042  2371                     l4239:	
 13043  2371  0823               	movf	setSwitch@channel,w
 13044  2372  00A1               	movwf	??_setSwitch
 13045  2373  01A2               	clrf	??_setSwitch+1
 13046                           
 13047                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13048                           ; Switch size 1, requested type "simple"
 13049                           ; Number of cases is 1, Range of values is 0 to 0
 13050                           ; switch strategies available:
 13051                           ; Name         Instructions Cycles
 13052                           ; simple_byte            4     3 (average)
 13053                           ; direct_byte            8     6 (fixed)
 13054                           ; jumptable            260     6 (fixed)
 13055                           ;	Chosen strategy is simple_byte
 13056  2374  0822               	movf	??_setSwitch+1,w
 13057  2375  3A00               	xorlw	0	; case 0
 13058  2376  1903               	skipnz
 13059  2377  2B79               	goto	l5645
 13060  2378  2B87               	goto	l171
 13061  2379                     l5645:	
 13062                           
 13063                           ; Switch size 1, requested type "simple"
 13064                           ; Number of cases is 4, Range of values is 0 to 3
 13065                           ; switch strategies available:
 13066                           ; Name         Instructions Cycles
 13067                           ; simple_byte           13     7 (average)
 13068                           ; direct_byte           14     6 (fixed)
 13069                           ; jumptable            260     6 (fixed)
 13070                           ;	Chosen strategy is simple_byte
 13071  2379  0821               	movf	??_setSwitch,w
 13072  237A  3A00               	xorlw	0	; case 0
 13073  237B  1903               	skipnz
 13074  237C  2B59               	goto	l4229
 13075  237D  3A01               	xorlw	1	; case 1
 13076  237E  1903               	skipnz
 13077  237F  2B5F               	goto	l4231
 13078  2380  3A03               	xorlw	3	; case 2
 13079  2381  1903               	skipnz
 13080  2382  2B65               	goto	l4233
 13081  2383  3A01               	xorlw	1	; case 3
 13082  2384  1903               	skipnz
 13083  2385  2B6B               	goto	l4235
 13084  2386  2B87               	goto	l171
 13085  2387                     l171:	
 13086  2387  0008               	return
 13087  2388                     __end_of_setSwitch:	
 13088                           
 13089                           	psect	text38
 13090  07FF                     __ptext38:	
 13091 ;; *************** function _error *****************
 13092 ;; Defined at:
 13093 ;;		line 4 in file "error.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;  error           1    wreg     enum E7821
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;  error           1    0[COMMON] enum E7821
 13098 ;; Return value:  Size  Location     Type
 13099 ;;                  1    wreg      void 
 13100 ;; Registers used:
 13101 ;;		wreg
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/0
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13111 ;;Total ram usage:        0 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:    3
 13114 ;; This function calls:
 13115 ;;		Nothing
 13116 ;; This function is called by:
 13117 ;;		_systemCheck
 13118 ;;		_getAvgChannelCurrents
 13119 ;; This function uses a non-reentrant model
 13120 ;;
 13121                           
 13122                           
 13123                           ;psect for function _error
 13124  07FF                     _error:	
 13125                           
 13126                           ;error.c: 4: void error(enum e_errorcode error);error.c: 5: {;error.c: 6:  return;
 13127                           
 13128                           ;incstack = 0
 13129                           ; Regs used in _error: [wreg]
 13130  07FF  0008               	return
 13131  0800                     __end_of_error:	
 13132                           
 13133                           	psect	text39
 13134  26C3                     __ptext39:	
 13135 ;; *************** function _ema *****************
 13136 ;; Defined at:
 13137 ;;		line 55 in file "common.c"
 13138 ;; Parameters:    Size  Location     Type
 13139 ;;  in              2   12[BANK0 ] unsigned short 
 13140 ;;  average         2   14[BANK0 ] unsigned short 
 13141 ;;  alpha           4   16[BANK0 ] unsigned long 
 13142 ;; Auto vars:     Size  Location     Type
 13143 ;;  tmp0            4   28[BANK0 ] unsigned long 
 13144 ;; Return value:  Size  Location     Type
 13145 ;;                  2   12[BANK0 ] unsigned short 
 13146 ;; Registers used:
 13147 ;;		wreg, status,2, status,0, pclath, cstack
 13148 ;; Tracked objects:
 13149 ;;		On entry : 0/0
 13150 ;;		On exit  : 0/0
 13151 ;;		Unchanged: 0/0
 13152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13153 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13154 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13155 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13156 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13157 ;;Total ram usage:       20 bytes
 13158 ;; Hardware stack levels used:    1
 13159 ;; Hardware stack levels required when called:    4
 13160 ;; This function calls:
 13161 ;;		___lmul
 13162 ;; This function is called by:
 13163 ;;		_getAvgChannelCurrents
 13164 ;;		_convertAnalogValues
 13165 ;; This function uses a non-reentrant model
 13166 ;;
 13167                           
 13168                           
 13169                           ;psect for function _ema
 13170  26C3                     _ema:	
 13171                           
 13172                           ;common.c: 55: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 56:
      +                           {;common.c: 57:  uint32_t tmp0;;common.c: 58:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 13173                           
 13174                           ;incstack = 0
 13175                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 13176  26C3  0140               	movlb	0	; select bank0
 13177  26C4  082E               	movf	ema@average,w
 13178  26C5  00A0               	movwf	___lmul@multiplier
 13179  26C6  082F               	movf	ema@average+1,w
 13180  26C7  00A1               	movwf	___lmul@multiplier+1
 13181  26C8  01A2               	clrf	___lmul@multiplier+2
 13182  26C9  01A3               	clrf	___lmul@multiplier+3
 13183  26CA  3000               	movlw	0
 13184  26CB  00B4               	movwf	??_ema
 13185  26CC  3000               	movlw	0
 13186  26CD  00B5               	movwf	??_ema+1
 13187  26CE  3001               	movlw	1
 13188  26CF  00B6               	movwf	??_ema+2
 13189  26D0  3000               	movlw	0
 13190  26D1  00B7               	movwf	??_ema+3
 13191  26D2  0830               	movf	ema@alpha,w
 13192  26D3  02B4               	subwf	??_ema,f
 13193  26D4  0831               	movf	ema@alpha+1,w
 13194  26D5  3BB5               	subwfb	??_ema+1,f
 13195  26D6  0832               	movf	ema@alpha+2,w
 13196  26D7  3BB6               	subwfb	??_ema+2,f
 13197  26D8  0833               	movf	ema@alpha+3,w
 13198  26D9  3BB7               	subwfb	??_ema+3,f
 13199  26DA  0837               	movf	??_ema+3,w
 13200  26DB  00A7               	movwf	___lmul@multiplicand+3
 13201  26DC  0836               	movf	??_ema+2,w
 13202  26DD  00A6               	movwf	___lmul@multiplicand+2
 13203  26DE  0835               	movf	??_ema+1,w
 13204  26DF  00A5               	movwf	___lmul@multiplicand+1
 13205  26E0  0834               	movf	??_ema,w
 13206  26E1  00A4               	movwf	___lmul@multiplicand
 13207  26E2  31A2  22F5  31A6   	fcall	___lmul
 13208  26E5  0140               	movlb	0	; select bank0
 13209  26E6  0820               	movf	?___lmul,w
 13210  26E7  00B8               	movwf	??_ema+4
 13211  26E8  0821               	movf	?___lmul+1,w
 13212  26E9  00B9               	movwf	??_ema+5
 13213  26EA  0822               	movf	?___lmul+2,w
 13214  26EB  00BA               	movwf	??_ema+6
 13215  26EC  0823               	movf	?___lmul+3,w
 13216  26ED  00BB               	movwf	??_ema+7
 13217  26EE  082C               	movf	ema@in,w
 13218  26EF  00A0               	movwf	___lmul@multiplier
 13219  26F0  082D               	movf	ema@in+1,w
 13220  26F1  00A1               	movwf	___lmul@multiplier+1
 13221  26F2  01A2               	clrf	___lmul@multiplier+2
 13222  26F3  01A3               	clrf	___lmul@multiplier+3
 13223  26F4  0833               	movf	ema@alpha+3,w
 13224  26F5  00A7               	movwf	___lmul@multiplicand+3
 13225  26F6  0832               	movf	ema@alpha+2,w
 13226  26F7  00A6               	movwf	___lmul@multiplicand+2
 13227  26F8  0831               	movf	ema@alpha+1,w
 13228  26F9  00A5               	movwf	___lmul@multiplicand+1
 13229  26FA  0830               	movf	ema@alpha,w
 13230  26FB  00A4               	movwf	___lmul@multiplicand
 13231  26FC  31A2  22F5  31A6   	fcall	___lmul
 13232  26FF  0140               	movlb	0	; select bank0
 13233  2700  0820               	movf	?___lmul,w
 13234  2701  07B8               	addwf	??_ema+4,f
 13235  2702  0821               	movf	?___lmul+1,w
 13236  2703  3DB9               	addwfc	??_ema+5,f
 13237  2704  0822               	movf	?___lmul+2,w
 13238  2705  3DBA               	addwfc	??_ema+6,f
 13239  2706  0823               	movf	?___lmul+3,w
 13240  2707  3DBB               	addwfc	??_ema+7,f
 13241  2708  083B               	movf	??_ema+7,w
 13242  2709  00BF               	movwf	ema@tmp0+3
 13243  270A  083A               	movf	??_ema+6,w
 13244  270B  00BE               	movwf	ema@tmp0+2
 13245  270C  0839               	movf	??_ema+5,w
 13246  270D  00BD               	movwf	ema@tmp0+1
 13247  270E  0838               	movf	??_ema+4,w
 13248  270F  00BC               	movwf	ema@tmp0
 13249                           
 13250                           ;common.c: 59:  return(tmp0 + 32768) / 65536;
 13251  2710  3000               	movlw	0
 13252  2711  00B4               	movwf	??_ema
 13253  2712  3080               	movlw	128
 13254  2713  00B5               	movwf	??_ema+1
 13255  2714  3000               	movlw	0
 13256  2715  00B6               	movwf	??_ema+2
 13257  2716  3000               	movlw	0
 13258  2717  00B7               	movwf	??_ema+3
 13259  2718  083C               	movf	ema@tmp0,w
 13260  2719  07B4               	addwf	??_ema,f
 13261  271A  083D               	movf	ema@tmp0+1,w
 13262  271B  3DB5               	addwfc	??_ema+1,f
 13263  271C  083E               	movf	ema@tmp0+2,w
 13264  271D  3DB6               	addwfc	??_ema+2,f
 13265  271E  083F               	movf	ema@tmp0+3,w
 13266  271F  3DB7               	addwfc	??_ema+3,f
 13267  2720  3010               	movlw	16
 13268  2721                     u4675:	
 13269  2721  36B7               	lsrf	??_ema+3,f
 13270  2722  0CB6               	rrf	??_ema+2,f
 13271  2723  0CB5               	rrf	??_ema+1,f
 13272  2724  0CB4               	rrf	??_ema,f
 13273  2725  0B89               	decfsz	9,f
 13274  2726  2F21               	goto	u4675
 13275  2727  0835               	movf	??_ema+1,w
 13276  2728  00AD               	movwf	?_ema+1
 13277  2729  0834               	movf	??_ema,w
 13278  272A  00AC               	movwf	?_ema
 13279  272B  0008               	return
 13280  272C                     __end_of_ema:	
 13281                           
 13282                           	psect	text40
 13283  22F5                     __ptext40:	
 13284 ;; *************** function ___lmul *****************
 13285 ;; Defined at:
 13286 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 13287 ;; Parameters:    Size  Location     Type
 13288 ;;  multiplier      4    0[BANK0 ] unsigned long 
 13289 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 13290 ;; Auto vars:     Size  Location     Type
 13291 ;;  product         4    8[BANK0 ] unsigned long 
 13292 ;; Return value:  Size  Location     Type
 13293 ;;                  4    0[BANK0 ] unsigned long 
 13294 ;; Registers used:
 13295 ;;		wreg, status,2, status,0
 13296 ;; Tracked objects:
 13297 ;;		On entry : 0/0
 13298 ;;		On exit  : 0/0
 13299 ;;		Unchanged: 0/0
 13300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13301 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13302 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13304 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13305 ;;Total ram usage:       12 bytes
 13306 ;; Hardware stack levels used:    1
 13307 ;; Hardware stack levels required when called:    3
 13308 ;; This function calls:
 13309 ;;		Nothing
 13310 ;; This function is called by:
 13311 ;;		_ema
 13312 ;; This function uses a non-reentrant model
 13313 ;;
 13314                           
 13315                           
 13316                           ;psect for function ___lmul
 13317  22F5                     ___lmul:	
 13318                           
 13319                           ;incstack = 0
 13320                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13321  22F5  3000               	movlw	0
 13322  22F6  0140               	movlb	0	; select bank0
 13323  22F7  00AB               	movwf	___lmul@product+3
 13324  22F8  3000               	movlw	0
 13325  22F9  00AA               	movwf	___lmul@product+2
 13326  22FA  3000               	movlw	0
 13327  22FB  00A9               	movwf	___lmul@product+1
 13328  22FC  3000               	movlw	0
 13329  22FD  00A8               	movwf	___lmul@product
 13330  22FE                     l3511:	
 13331  22FE  1C20               	btfss	___lmul@multiplier,0
 13332  22FF  2B08               	goto	l3515
 13333  2300  0824               	movf	___lmul@multiplicand,w
 13334  2301  07A8               	addwf	___lmul@product,f
 13335  2302  0825               	movf	___lmul@multiplicand+1,w
 13336  2303  3DA9               	addwfc	___lmul@product+1,f
 13337  2304  0826               	movf	___lmul@multiplicand+2,w
 13338  2305  3DAA               	addwfc	___lmul@product+2,f
 13339  2306  0827               	movf	___lmul@multiplicand+3,w
 13340  2307  3DAB               	addwfc	___lmul@product+3,f
 13341  2308                     l3515:	
 13342  2308  3001               	movlw	1
 13343  2309                     u3565:	
 13344  2309  35A4               	lslf	___lmul@multiplicand,f
 13345  230A  0DA5               	rlf	___lmul@multiplicand+1,f
 13346  230B  0DA6               	rlf	___lmul@multiplicand+2,f
 13347  230C  0DA7               	rlf	___lmul@multiplicand+3,f
 13348  230D  0B89               	decfsz	9,f
 13349  230E  2B09               	goto	u3565
 13350  230F  3001               	movlw	1
 13351  2310                     u3575:	
 13352  2310  36A3               	lsrf	___lmul@multiplier+3,f
 13353  2311  0CA2               	rrf	___lmul@multiplier+2,f
 13354  2312  0CA1               	rrf	___lmul@multiplier+1,f
 13355  2313  0CA0               	rrf	___lmul@multiplier,f
 13356  2314  0B89               	decfsz	9,f
 13357  2315  2B10               	goto	u3575
 13358  2316  0823               	movf	___lmul@multiplier+3,w
 13359  2317  0422               	iorwf	___lmul@multiplier+2,w
 13360  2318  0421               	iorwf	___lmul@multiplier+1,w
 13361  2319  0420               	iorwf	___lmul@multiplier,w
 13362  231A  1D03               	skipz
 13363  231B  2AFE               	goto	l3511
 13364  231C  082B               	movf	___lmul@product+3,w
 13365  231D  00A3               	movwf	?___lmul+3
 13366  231E  082A               	movf	___lmul@product+2,w
 13367  231F  00A2               	movwf	?___lmul+2
 13368  2320  0829               	movf	___lmul@product+1,w
 13369  2321  00A1               	movwf	?___lmul+1
 13370  2322  0828               	movf	___lmul@product,w
 13371  2323  00A0               	movwf	?___lmul
 13372  2324  0008               	return
 13373  2325                     __end_of___lmul:	
 13374                           
 13375                           	psect	text41
 13376  0801                     __ptext41:	
 13377 ;; *************** function _adcGetConversion *****************
 13378 ;; Defined at:
 13379 ;;		line 271 in file "main.c"
 13380 ;; Parameters:    Size  Location     Type
 13381 ;;  channel         1    wreg     unsigned char 
 13382 ;; Auto vars:     Size  Location     Type
 13383 ;;  channel         1    3[BANK0 ] unsigned char 
 13384 ;; Return value:  Size  Location     Type
 13385 ;;                  2    0[BANK0 ] unsigned short 
 13386 ;; Registers used:
 13387 ;;		wreg, status,2, status,0
 13388 ;; Tracked objects:
 13389 ;;		On entry : 0/0
 13390 ;;		On exit  : 0/0
 13391 ;;		Unchanged: 0/0
 13392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13393 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13396 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13397 ;;Total ram usage:        4 bytes
 13398 ;; Hardware stack levels used:    1
 13399 ;; Hardware stack levels required when called:    3
 13400 ;; This function calls:
 13401 ;;		Nothing
 13402 ;; This function is called by:
 13403 ;;		_getAvgChannelCurrents
 13404 ;;		_convertAnalogValues
 13405 ;; This function uses a non-reentrant model
 13406 ;;
 13407                           
 13408                           
 13409                           ;psect for function _adcGetConversion
 13410  0801                     _adcGetConversion:	
 13411                           
 13412                           ;incstack = 0
 13413                           ; Regs used in _adcGetConversion: [wreg+status,2+status,0]
 13414                           ;adcGetConversion@channel stored from wreg
 13415  0801  0140               	movlb	0	; select bank0
 13416  0802  00A3               	movwf	adcGetConversion@channel
 13417                           
 13418                           ;main.c: 271: uint16_t adcGetConversion(uint8_t channel);main.c: 272: {;main.c: 273:  AD
      +                          CON0bits.CHS = channel;
 13419  0803  0823               	movf	adcGetConversion@channel,w
 13420  0804  00A2               	movwf	??_adcGetConversion
 13421  0805  0DA2               	rlf	??_adcGetConversion,f
 13422  0806  0DA2               	rlf	??_adcGetConversion,f
 13423  0807  0141               	movlb	1	; select bank1
 13424  0808  081D               	movf	29,w	;volatile
 13425  0809  0140               	movlb	0	; select bank0
 13426  080A  0622               	xorwf	??_adcGetConversion,w
 13427  080B  3903               	andlw	-253
 13428  080C  0622               	xorwf	??_adcGetConversion,w
 13429  080D  0141               	movlb	1	; select bank1
 13430  080E  009D               	movwf	29	;volatile
 13431                           
 13432                           ;main.c: 274:  _delay((unsigned long)((5)*(4000000/4000000.0)));
 13433  080F  3200               	nop2	;2 cycle nop
 13434  0810  3200               	nop2	;2 cycle nop
 13435  0811  0000               	nop
 13436                           
 13437                           ;main.c: 275:  ADCON0bits.GO = 1;
 13438  0812  0141               	movlb	1	; select bank1
 13439  0813  149D               	bsf	29,1	;volatile
 13440  0814                     l198:	
 13441                           ;main.c: 276:  while (ADCON0bits.GO);
 13442                           
 13443  0814  189D               	btfsc	29,1	;volatile
 13444  0815  2814               	goto	l198
 13445                           
 13446                           ;main.c: 277:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 13447  0816  081C               	movf	28,w	;volatile
 13448  0817  0140               	movlb	0	; select bank0
 13449  0818  00A1               	movwf	?_adcGetConversion+1
 13450  0819  0141               	movlb	1	; select bank1
 13451  081A  081B               	movf	27,w	;volatile
 13452  081B  0140               	movlb	0	; select bank0
 13453  081C  00A0               	movwf	?_adcGetConversion
 13454  081D  0008               	return
 13455  081E                     __end_of_adcGetConversion:	
 13456                           
 13457                           	psect	text42
 13458  197F                     __ptext42:	
 13459 ;; *************** function ___fltol *****************
 13460 ;; Defined at:
 13461 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;  f1              4   72[BANK0 ] unsigned short 
 13464 ;; Auto vars:     Size  Location     Type
 13465 ;;  exp1            1   77[BANK0 ] unsigned char 
 13466 ;;  sign1           1   76[BANK0 ] unsigned char 
 13467 ;; Return value:  Size  Location     Type
 13468 ;;                  4   72[BANK0 ] long 
 13469 ;; Registers used:
 13470 ;;		wreg, status,2, status,0
 13471 ;; Tracked objects:
 13472 ;;		On entry : 0/0
 13473 ;;		On exit  : 0/0
 13474 ;;		Unchanged: 0/0
 13475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13477 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13478 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13479 ;;      Totals:         0       6       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13480 ;;Total ram usage:       11 bytes
 13481 ;; Hardware stack levels used:    1
 13482 ;; Hardware stack levels required when called:    3
 13483 ;; This function calls:
 13484 ;;		Nothing
 13485 ;; This function is called by:
 13486 ;;		_getAvgChannelCurrents
 13487 ;;		_channelView
 13488 ;;		_ftoa
 13489 ;; This function uses a non-reentrant model
 13490 ;;
 13491                           
 13492                           
 13493                           ;psect for function ___fltol
 13494  197F                     ___fltol:	
 13495                           
 13496                           ;incstack = 0
 13497                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 13498  197F  1003               	clrc
 13499  1980  0140               	movlb	0	; select bank0
 13500  1981  0D6A               	rlf	___fltol@f1+2,w
 13501  1982  0D6B               	rlf	___fltol@f1+3,w
 13502  1983  0141               	movlb	1	; select bank1
 13503  1984  00A0               	movwf	??___fltol^(0+128)
 13504  1985  0820               	movf	??___fltol^(0+128),w
 13505  1986  0140               	movlb	0	; select bank0
 13506  1987  00ED               	movwf	___fltol@exp1
 13507  1988  086D               	movf	___fltol@exp1,w
 13508  1989  1D03               	btfss	3,2
 13509  198A  2994               	goto	l3631
 13510  198B                     l3627:	
 13511  198B  3000               	movlw	0
 13512  198C  00EB               	movwf	?___fltol+3
 13513  198D  3000               	movlw	0
 13514  198E  00EA               	movwf	?___fltol+2
 13515  198F  3000               	movlw	0
 13516  1990  00E9               	movwf	?___fltol+1
 13517  1991  3000               	movlw	0
 13518  1992  00E8               	movwf	?___fltol
 13519  1993  0008               	return
 13520  1994                     l3631:	
 13521  1994  0868               	movf	___fltol@f1,w
 13522  1995  0141               	movlb	1	; select bank1
 13523  1996  00A0               	movwf	??___fltol^(0+128)
 13524  1997  0140               	movlb	0	; select bank0
 13525  1998  0869               	movf	___fltol@f1+1,w
 13526  1999  0141               	movlb	1	; select bank1
 13527  199A  00A1               	movwf	(??___fltol^(0+128)+1)
 13528  199B  0140               	movlb	0	; select bank0
 13529  199C  086A               	movf	___fltol@f1+2,w
 13530  199D  0141               	movlb	1	; select bank1
 13531  199E  00A2               	movwf	(??___fltol^(0+128)+2)
 13532  199F  0140               	movlb	0	; select bank0
 13533  19A0  086B               	movf	___fltol@f1+3,w
 13534  19A1  0141               	movlb	1	; select bank1
 13535  19A2  00A3               	movwf	(??___fltol^(0+128)+3)
 13536  19A3  301F               	movlw	31
 13537  19A4                     u3845:	
 13538  19A4  36A3               	lsrf	(??___fltol^(0+128)+3),f
 13539  19A5  0CA2               	rrf	(??___fltol^(0+128)+2),f
 13540  19A6  0CA1               	rrf	(??___fltol^(0+128)+1),f
 13541  19A7  0CA0               	rrf	??___fltol^(0+128),f
 13542  19A8  0B89               	decfsz	9,f
 13543  19A9  29A4               	goto	u3845
 13544  19AA  0820               	movf	??___fltol^(0+128),w
 13545  19AB  00A4               	movwf	(??___fltol+4)^(0+128)
 13546  19AC  0824               	movf	(??___fltol+4)^(0+128),w
 13547  19AD  0140               	movlb	0	; select bank0
 13548  19AE  00EC               	movwf	___fltol@sign1
 13549  19AF  17EA               	bsf	___fltol@f1+2,7
 13550  19B0  30FF               	movlw	255
 13551  19B1  05E8               	andwf	___fltol@f1,f
 13552  19B2  30FF               	movlw	255
 13553  19B3  05E9               	andwf	___fltol@f1+1,f
 13554  19B4  30FF               	movlw	255
 13555  19B5  05EA               	andwf	___fltol@f1+2,f
 13556  19B6  3000               	movlw	0
 13557  19B7  05EB               	andwf	___fltol@f1+3,f
 13558  19B8  3096               	movlw	150
 13559  19B9  02ED               	subwf	___fltol@exp1,f
 13560  19BA  1FED               	btfss	___fltol@exp1,7
 13561  19BB  29D1               	goto	l3649
 13562  19BC  086D               	movf	___fltol@exp1,w
 13563  19BD  3A80               	xorlw	128
 13564  19BE  3E97               	addlw	151
 13565  19BF  1C03               	btfss	3,0
 13566  19C0  298B               	goto	l3627
 13567  19C1                     l3647:	
 13568  19C1  3001               	movlw	1
 13569  19C2                     u3875:	
 13570  19C2  36EB               	lsrf	___fltol@f1+3,f
 13571  19C3  0CEA               	rrf	___fltol@f1+2,f
 13572  19C4  0CE9               	rrf	___fltol@f1+1,f
 13573  19C5  0CE8               	rrf	___fltol@f1,f
 13574  19C6  0B89               	decfsz	9,f
 13575  19C7  29C2               	goto	u3875
 13576  19C8  3001               	movlw	1
 13577  19C9  0141               	movlb	1	; select bank1
 13578  19CA  00A0               	movwf	??___fltol^(0+128)
 13579  19CB  0820               	movf	??___fltol^(0+128),w
 13580  19CC  0140               	movlb	0	; select bank0
 13581  19CD  07ED               	addwf	___fltol@exp1,f
 13582  19CE  1903               	btfsc	3,2
 13583  19CF  29E2               	goto	l3657
 13584  19D0  29C1               	goto	l3647
 13585  19D1                     l3649:	
 13586  19D1  3020               	movlw	32
 13587  19D2  026D               	subwf	___fltol@exp1,w
 13588  19D3  1803               	btfsc	3,0
 13589  19D4  298B               	goto	l3627
 13590  19D5                     l966:	
 13591  19D5  086D               	movf	___fltol@exp1,w
 13592  19D6  1903               	btfsc	3,2
 13593  19D7  29E2               	goto	l3657
 13594  19D8  3001               	movlw	1
 13595  19D9                     u3905:	
 13596  19D9  35E8               	lslf	___fltol@f1,f
 13597  19DA  0DE9               	rlf	___fltol@f1+1,f
 13598  19DB  0DEA               	rlf	___fltol@f1+2,f
 13599  19DC  0DEB               	rlf	___fltol@f1+3,f
 13600  19DD  0B89               	decfsz	9,f
 13601  19DE  29D9               	goto	u3905
 13602  19DF  3001               	movlw	1
 13603  19E0  02ED               	subwf	___fltol@exp1,f
 13604  19E1  29D5               	goto	l966
 13605  19E2                     l3657:	
 13606  19E2  086C               	movf	___fltol@sign1,w
 13607  19E3  1903               	btfsc	3,2
 13608  19E4  0008               	return
 13609  19E5  09E8               	comf	___fltol@f1,f
 13610  19E6  09E9               	comf	___fltol@f1+1,f
 13611  19E7  09EA               	comf	___fltol@f1+2,f
 13612  19E8  09EB               	comf	___fltol@f1+3,f
 13613  19E9  0AE8               	incf	___fltol@f1,f
 13614  19EA  1903               	skipnz
 13615  19EB  0AE9               	incf	___fltol@f1+1,f
 13616  19EC  1903               	skipnz
 13617  19ED  0AEA               	incf	___fltol@f1+2,f
 13618  19EE  1903               	skipnz
 13619  19EF  0AEB               	incf	___fltol@f1+3,f
 13620  19F0  0008               	return
 13621  19F1                     __end_of___fltol:	
 13622                           
 13623                           	psect	text43
 13624  1208                     __ptext43:	
 13625 ;; *************** function _checkSensor *****************
 13626 ;; Defined at:
 13627 ;;		line 218 in file "main.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;  data            2   20[BANK0 ] PTR struct .
 13630 ;;		 -> data(173), 
 13631 ;; Auto vars:     Size  Location     Type
 13632 ;;  dp              1   26[BANK0 ] PTR struct .
 13633 ;;		 -> dataPacket(15), 
 13634 ;; Return value:  Size  Location     Type
 13635 ;;                  1    wreg      void 
 13636 ;; Registers used:
 13637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13638 ;; Tracked objects:
 13639 ;;		On entry : 0/0
 13640 ;;		On exit  : 0/0
 13641 ;;		Unchanged: 0/0
 13642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13643 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13645 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13646 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13647 ;;Total ram usage:        7 bytes
 13648 ;; Hardware stack levels used:    1
 13649 ;; Hardware stack levels required when called:    5
 13650 ;; This function calls:
 13651 ;;		___flge
 13652 ;;		___xxtofl
 13653 ;;		_getDataPacket
 13654 ;;		_timeNow
 13655 ;;		_timeSince
 13656 ;;		_uartIsDataReady
 13657 ;;		_uartReset
 13658 ;;		_uartSendByte
 13659 ;; This function is called by:
 13660 ;;		_main
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           
 13665                           ;psect for function _checkSensor
 13666  1208                     _checkSensor:	
 13667                           
 13668                           ;main.c: 218: void checkSensor(t_globalData *data);main.c: 219: {;main.c: 220:  t_dataPa
      +                          cket *dp;;main.c: 221:  static uint32_t sensorUpdateInterval = 0;;main.c: 222:  static u
      +                          int32_t sensorTimeout = 0;;main.c: 223:  static uint8_t state = 0;;main.c: 226:  if ((da
      +                          ta->tempAux < -30) || (data->tempAux > 100)) {
 13669                           
 13670                           ;incstack = 0
 13671                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13672  1208  0140               	movlb	0	; select bank0
 13673  1209  0834               	movf	checkSensor@data,w
 13674  120A  0086               	movwf	6
 13675  120B  0835               	movf	checkSensor@data+1,w
 13676  120C  0087               	movwf	7
 13677  120D  3150               	addfsr 1,16
 13678  120E  3F40               	moviw [0]fsr1
 13679  120F  00A0               	movwf	___flge@ff1
 13680  1210  3F41               	moviw [1]fsr1
 13681  1211  00A1               	movwf	___flge@ff1+1
 13682  1212  3F42               	moviw [2]fsr1
 13683  1213  00A2               	movwf	___flge@ff1+2
 13684  1214  3F43               	moviw [3]fsr1
 13685  1215  00A3               	movwf	___flge@ff1+3
 13686  1216  30C1               	movlw	193
 13687  1217  00A7               	movwf	___flge@ff2+3
 13688  1218  30F0               	movlw	240
 13689  1219  00A6               	movwf	___flge@ff2+2
 13690  121A  3000               	movlw	0
 13691  121B  00A5               	movwf	___flge@ff2+1
 13692  121C  3000               	movlw	0
 13693  121D  00A4               	movwf	___flge@ff2
 13694  121E  3199  21F1  3192   	fcall	___flge
 13695  1221  1C03               	btfss	3,0
 13696  1222  2A3E               	goto	l4809
 13697  1223  3042               	movlw	66
 13698  1224  0140               	movlb	0	; select bank0
 13699  1225  00A3               	movwf	___flge@ff1+3
 13700  1226  30C8               	movlw	200
 13701  1227  00A2               	movwf	___flge@ff1+2
 13702  1228  3000               	movlw	0
 13703  1229  00A1               	movwf	___flge@ff1+1
 13704  122A  3000               	movlw	0
 13705  122B  00A0               	movwf	___flge@ff1
 13706  122C  0834               	movf	checkSensor@data,w
 13707  122D  0086               	movwf	6
 13708  122E  0835               	movf	checkSensor@data+1,w
 13709  122F  0087               	movwf	7
 13710  1230  3150               	addfsr 1,16
 13711  1231  3F40               	moviw [0]fsr1
 13712  1232  00A4               	movwf	___flge@ff2
 13713  1233  3F41               	moviw [1]fsr1
 13714  1234  00A5               	movwf	___flge@ff2+1
 13715  1235  3F42               	moviw [2]fsr1
 13716  1236  00A6               	movwf	___flge@ff2+2
 13717  1237  3F43               	moviw [3]fsr1
 13718  1238  00A7               	movwf	___flge@ff2+3
 13719  1239  3199  21F1  3192   	fcall	___flge
 13720  123C  1803               	btfsc	3,0
 13721  123D  2A47               	goto	l4811
 13722  123E                     l4809:	
 13723                           
 13724                           ;main.c: 227:   data->status.AUX_SENSOR_OK = 0;
 13725  123E  0140               	movlb	0	; select bank0
 13726  123F  0834               	movf	checkSensor@data,w
 13727  1240  3E2C               	addlw	44
 13728  1241  0086               	movwf	6
 13729  1242  3000               	movlw	0
 13730  1243  3D35               	addwfc	checkSensor@data+1,w
 13731  1244  0087               	movwf	7
 13732  1245  1101               	bcf	1,2
 13733                           
 13734                           ;main.c: 228:  } else
 13735  1246  2B61               	goto	l4851
 13736  1247                     l4811:	
 13737                           
 13738                           ;main.c: 229:   data->status.AUX_SENSOR_OK = 1;
 13739  1247  0140               	movlb	0	; select bank0
 13740  1248  0834               	movf	checkSensor@data,w
 13741  1249  3E2C               	addlw	44
 13742  124A  0086               	movwf	6
 13743  124B  3000               	movlw	0
 13744  124C  3D35               	addwfc	checkSensor@data+1,w
 13745  124D  0087               	movwf	7
 13746  124E  1501               	bsf	1,2
 13747  124F  2B61               	goto	l4851
 13748  1250                     l4813:	
 13749                           
 13750                           ;main.c: 234:   if (timeSince(sensorUpdateInterval) >= 50) {
 13751  1250  0142               	movlb	2	; select bank2
 13752  1251  082B               	movf	(checkSensor@sensorUpdateInterval+3)^(0+256),w
 13753  1252  0140               	movlb	0	; select bank0
 13754  1253  00A7               	movwf	timeSince@since+3
 13755  1254  0142               	movlb	2	; select bank2
 13756  1255  082A               	movf	(checkSensor@sensorUpdateInterval+2)^(0+256),w
 13757  1256  0140               	movlb	0	; select bank0
 13758  1257  00A6               	movwf	timeSince@since+2
 13759  1258  0142               	movlb	2	; select bank2
 13760  1259  0829               	movf	(checkSensor@sensorUpdateInterval+1)^(0+256),w
 13761  125A  0140               	movlb	0	; select bank0
 13762  125B  00A5               	movwf	timeSince@since+1
 13763  125C  0142               	movlb	2	; select bank2
 13764  125D  0828               	movf	checkSensor@sensorUpdateInterval^(0+256),w
 13765  125E  0140               	movlb	0	; select bank0
 13766  125F  00A4               	movwf	timeSince@since
 13767  1260  31A6  2615  3192   	fcall	_timeSince
 13768  1263  0140               	movlb	0	; select bank0
 13769  1264  0827               	movf	?_timeSince+3,w
 13770  1265  1D03               	btfss	3,2
 13771  1266  2A71               	goto	l4815
 13772  1267  0826               	movf	?_timeSince+2,w
 13773  1268  1D03               	btfss	3,2
 13774  1269  2A71               	goto	l4815
 13775  126A  0825               	movf	?_timeSince+1,w
 13776  126B  1D03               	btfss	3,2
 13777  126C  2A71               	goto	l4815
 13778  126D  3032               	movlw	50
 13779  126E  0224               	subwf	?_timeSince,w
 13780  126F  1C03               	btfss	3,0
 13781  1270  0008               	return
 13782  1271                     l4815:	
 13783                           
 13784                           ;main.c: 235:    sensorUpdateInterval = sensorTimeout = timeNow();
 13785  1271  31A2  2204  3192   	fcall	_timeNow
 13786  1274  0140               	movlb	0	; select bank0
 13787  1275  0823               	movf	?_timeNow+3,w
 13788  1276  0142               	movlb	2	; select bank2
 13789  1277  00A7               	movwf	(checkSensor@sensorTimeout+3)^(0+256)
 13790  1278  0140               	movlb	0	; select bank0
 13791  1279  0822               	movf	?_timeNow+2,w
 13792  127A  0142               	movlb	2	; select bank2
 13793  127B  00A6               	movwf	(checkSensor@sensorTimeout+2)^(0+256)
 13794  127C  0140               	movlb	0	; select bank0
 13795  127D  0821               	movf	?_timeNow+1,w
 13796  127E  0142               	movlb	2	; select bank2
 13797  127F  00A5               	movwf	(checkSensor@sensorTimeout+1)^(0+256)
 13798  1280  0140               	movlb	0	; select bank0
 13799  1281  0820               	movf	?_timeNow,w
 13800  1282  0142               	movlb	2	; select bank2
 13801  1283  00A4               	movwf	checkSensor@sensorTimeout^(0+256)
 13802  1284  0827               	movf	(checkSensor@sensorTimeout+3)^(0+256),w
 13803  1285  00AB               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+256)
 13804  1286  0826               	movf	(checkSensor@sensorTimeout+2)^(0+256),w
 13805  1287  00AA               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+256)
 13806  1288  0825               	movf	(checkSensor@sensorTimeout+1)^(0+256),w
 13807  1289  00A9               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+256)
 13808  128A  0824               	movf	checkSensor@sensorTimeout^(0+256),w
 13809  128B  00A8               	movwf	checkSensor@sensorUpdateInterval^(0+256)
 13810                           
 13811                           ;main.c: 236:    uartSendByte('?');
 13812  128C  303F               	movlw	63
 13813  128D  31A1  21AC         	fcall	_uartSendByte
 13814                           
 13815                           ;main.c: 237:    state = 1;
 13816  128F  0141               	movlb	1	; select bank1
 13817  1290  01ED               	clrf	checkSensor@state^(0+128)
 13818  1291  0AED               	incf	checkSensor@state^(0+128),f
 13819  1292  0008               	return
 13820  1293                     l4821:	
 13821                           
 13822                           ;main.c: 242:   if (timeSince(sensorTimeout) > 20) {
 13823  1293  0142               	movlb	2	; select bank2
 13824  1294  0827               	movf	(checkSensor@sensorTimeout+3)^(0+256),w
 13825  1295  0140               	movlb	0	; select bank0
 13826  1296  00A7               	movwf	timeSince@since+3
 13827  1297  0142               	movlb	2	; select bank2
 13828  1298  0826               	movf	(checkSensor@sensorTimeout+2)^(0+256),w
 13829  1299  0140               	movlb	0	; select bank0
 13830  129A  00A6               	movwf	timeSince@since+2
 13831  129B  0142               	movlb	2	; select bank2
 13832  129C  0825               	movf	(checkSensor@sensorTimeout+1)^(0+256),w
 13833  129D  0140               	movlb	0	; select bank0
 13834  129E  00A5               	movwf	timeSince@since+1
 13835  129F  0142               	movlb	2	; select bank2
 13836  12A0  0824               	movf	checkSensor@sensorTimeout^(0+256),w
 13837  12A1  0140               	movlb	0	; select bank0
 13838  12A2  00A4               	movwf	timeSince@since
 13839  12A3  31A6  2615  3192   	fcall	_timeSince
 13840  12A6  0140               	movlb	0	; select bank0
 13841  12A7  0827               	movf	?_timeSince+3,w
 13842  12A8  1D03               	btfss	3,2
 13843  12A9  2AB4               	goto	l4823
 13844  12AA  0826               	movf	?_timeSince+2,w
 13845  12AB  1D03               	btfss	3,2
 13846  12AC  2AB4               	goto	l4823
 13847  12AD  0825               	movf	?_timeSince+1,w
 13848  12AE  1D03               	btfss	3,2
 13849  12AF  2AB4               	goto	l4823
 13850  12B0  3015               	movlw	21
 13851  12B1  0224               	subwf	?_timeSince,w
 13852  12B2  1C03               	btfss	3,0
 13853  12B3  2AC0               	goto	l4829
 13854  12B4                     l4823:	
 13855                           
 13856                           ;main.c: 243:    data->status.SENSOR_OK = 0;
 13857  12B4  0834               	movf	checkSensor@data,w
 13858  12B5  3E2C               	addlw	44
 13859  12B6  0086               	movwf	6
 13860  12B7  3000               	movlw	0
 13861  12B8  3D35               	addwfc	checkSensor@data+1,w
 13862  12B9  0087               	movwf	7
 13863  12BA  1081               	bcf	1,1
 13864                           
 13865                           ;main.c: 244:    state = 0;
 13866  12BB  0141               	movlb	1	; select bank1
 13867  12BC  01ED               	clrf	checkSensor@state^(0+128)
 13868                           
 13869                           ;main.c: 245:    uartReset();
 13870  12BD  31A1  2189         	fcall	_uartReset
 13871                           
 13872                           ;main.c: 246:   } else if (uartIsDataReady()) {
 13873  12BF  0008               	return
 13874  12C0                     l4829:	
 13875  12C0  31A1  21CB  3192   	fcall	_uartIsDataReady
 13876  12C3  3A00               	xorlw	0
 13877  12C4  1903               	skipnz
 13878  12C5  0008               	return
 13879                           
 13880                           ;main.c: 247:    dp = getDataPacket();
 13881  12C6  31A1  2174  3192   	fcall	_getDataPacket
 13882  12C9  0140               	movlb	0	; select bank0
 13883  12CA  00B6               	movwf	??_checkSensor
 13884  12CB  0836               	movf	??_checkSensor,w
 13885  12CC  00BA               	movwf	checkSensor@dp
 13886                           
 13887                           ;main.c: 248:    if ((dp->header == 0xAA) && (dp->status == 1)) {
 13888  12CD  083A               	movf	checkSensor@dp,w
 13889  12CE  0086               	movwf	6
 13890  12CF  3001               	movlw	1	; select bank2/3
 13891  12D0  0087               	movwf	7
 13892  12D1  30AA               	movlw	170
 13893  12D2  0601               	xorwf	1,w
 13894  12D3  1D03               	btfss	3,2
 13895  12D4  2B55               	goto	l4843
 13896  12D5  083A               	movf	checkSensor@dp,w
 13897  12D6  3E02               	addlw	2
 13898  12D7  0086               	movwf	6
 13899  12D8  3001               	movlw	1	; select bank2/3
 13900  12D9  0087               	movwf	7
 13901  12DA  0301               	decf	1,w
 13902  12DB  1D03               	btfss	3,2
 13903  12DC  2B55               	goto	l4843
 13904                           
 13905                           ;main.c: 249:     data->tempC = dp->tempC;
 13906  12DD  083A               	movf	checkSensor@dp,w
 13907  12DE  3E03               	addlw	3
 13908  12DF  0086               	movwf	6
 13909  12E0  3001               	movlw	1	; select bank2/3
 13910  12E1  0087               	movwf	7
 13911  12E2  3F40               	moviw [0]fsr1
 13912  12E3  00B6               	movwf	??_checkSensor
 13913  12E4  3F41               	moviw [1]fsr1
 13914  12E5  00B7               	movwf	??_checkSensor+1
 13915  12E6  3F42               	moviw [2]fsr1
 13916  12E7  00B8               	movwf	??_checkSensor+2
 13917  12E8  3F43               	moviw [3]fsr1
 13918  12E9  00B9               	movwf	??_checkSensor+3
 13919  12EA  0834               	movf	checkSensor@data,w
 13920  12EB  0086               	movwf	6
 13921  12EC  0835               	movf	checkSensor@data+1,w
 13922  12ED  0087               	movwf	7
 13923  12EE  0836               	movf	??_checkSensor,w
 13924  12EF  3FC0               	movwi [0]fsr1
 13925  12F0  0837               	movf	??_checkSensor+1,w
 13926  12F1  3FC1               	movwi [1]fsr1
 13927  12F2  0838               	movf	??_checkSensor+2,w
 13928  12F3  3FC2               	movwi [2]fsr1
 13929  12F4  0839               	movf	??_checkSensor+3,w
 13930  12F5  3FC3               	movwi [3]fsr1
 13931                           
 13932                           ;main.c: 250:     data->relHum = dp->relHum;
 13933  12F6  083A               	movf	checkSensor@dp,w
 13934  12F7  3E07               	addlw	7
 13935  12F8  0086               	movwf	6
 13936  12F9  3001               	movlw	1	; select bank2/3
 13937  12FA  0087               	movwf	7
 13938  12FB  3F40               	moviw [0]fsr1
 13939  12FC  00B6               	movwf	??_checkSensor
 13940  12FD  3F41               	moviw [1]fsr1
 13941  12FE  00B7               	movwf	??_checkSensor+1
 13942  12FF  3F42               	moviw [2]fsr1
 13943  1300  00B8               	movwf	??_checkSensor+2
 13944  1301  3F43               	moviw [3]fsr1
 13945  1302  00B9               	movwf	??_checkSensor+3
 13946  1303  0834               	movf	checkSensor@data,w
 13947  1304  0086               	movwf	6
 13948  1305  0835               	movf	checkSensor@data+1,w
 13949  1306  0087               	movwf	7
 13950  1307  3144               	addfsr 1,4
 13951  1308  0836               	movf	??_checkSensor,w
 13952  1309  3FC0               	movwi [0]fsr1
 13953  130A  0837               	movf	??_checkSensor+1,w
 13954  130B  3FC1               	movwi [1]fsr1
 13955  130C  0838               	movf	??_checkSensor+2,w
 13956  130D  3FC2               	movwi [2]fsr1
 13957  130E  0839               	movf	??_checkSensor+3,w
 13958  130F  3FC3               	movwi [3]fsr1
 13959                           
 13960                           ;main.c: 251:     data->dewPointC = dp->dewPointC;
 13961  1310  083A               	movf	checkSensor@dp,w
 13962  1311  3E0B               	addlw	11
 13963  1312  0086               	movwf	6
 13964  1313  3001               	movlw	1	; select bank2/3
 13965  1314  0087               	movwf	7
 13966  1315  3F40               	moviw [0]fsr1
 13967  1316  00B6               	movwf	??_checkSensor
 13968  1317  3F41               	moviw [1]fsr1
 13969  1318  00B7               	movwf	??_checkSensor+1
 13970  1319  3F42               	moviw [2]fsr1
 13971  131A  00B8               	movwf	??_checkSensor+2
 13972  131B  3F43               	moviw [3]fsr1
 13973  131C  00B9               	movwf	??_checkSensor+3
 13974  131D  0834               	movf	checkSensor@data,w
 13975  131E  0086               	movwf	6
 13976  131F  0835               	movf	checkSensor@data+1,w
 13977  1320  0087               	movwf	7
 13978  1321  3148               	addfsr 1,8
 13979  1322  0836               	movf	??_checkSensor,w
 13980  1323  3FC0               	movwi [0]fsr1
 13981  1324  0837               	movf	??_checkSensor+1,w
 13982  1325  3FC1               	movwi [1]fsr1
 13983  1326  0838               	movf	??_checkSensor+2,w
 13984  1327  3FC2               	movwi [2]fsr1
 13985  1328  0839               	movf	??_checkSensor+3,w
 13986  1329  3FC3               	movwi [3]fsr1
 13987                           
 13988                           ;main.c: 252:     data->sensorVersion = dp->version;
 13989  132A  0A3A               	incf	checkSensor@dp,w
 13990  132B  0086               	movwf	6
 13991  132C  3001               	movlw	1	; select bank2/3
 13992  132D  0087               	movwf	7
 13993  132E  0801               	movf	1,w
 13994  132F  00B6               	movwf	??_checkSensor
 13995  1330  01B7               	clrf	??_checkSensor+1
 13996  1331  01B8               	clrf	??_checkSensor+2
 13997  1332  01B9               	clrf	??_checkSensor+3
 13998  1333  0839               	movf	??_checkSensor+3,w
 13999  1334  00A9               	movwf	___xxtofl@val+3
 14000  1335  0838               	movf	??_checkSensor+2,w
 14001  1336  00A8               	movwf	___xxtofl@val+2
 14002  1337  0837               	movf	??_checkSensor+1,w
 14003  1338  00A7               	movwf	___xxtofl@val+1
 14004  1339  0836               	movf	??_checkSensor,w
 14005  133A  00A6               	movwf	___xxtofl@val
 14006  133B  3000               	movlw	0
 14007  133C  3190  2015  3192   	fcall	___xxtofl
 14008  133F  0140               	movlb	0	; select bank0
 14009  1340  0834               	movf	checkSensor@data,w
 14010  1341  0086               	movwf	6
 14011  1342  0835               	movf	checkSensor@data+1,w
 14012  1343  0087               	movwf	7
 14013  1344  314C               	addfsr 1,12
 14014  1345  0826               	movf	?___xxtofl,w
 14015  1346  3FC0               	movwi [0]fsr1
 14016  1347  0827               	movf	?___xxtofl+1,w
 14017  1348  3FC1               	movwi [1]fsr1
 14018  1349  0828               	movf	?___xxtofl+2,w
 14019  134A  3FC2               	movwi [2]fsr1
 14020  134B  0829               	movf	?___xxtofl+3,w
 14021  134C  3FC3               	movwi [3]fsr1
 14022                           
 14023                           ;main.c: 253:     data->status.SENSOR_OK = 1;
 14024  134D  0834               	movf	checkSensor@data,w
 14025  134E  3E2C               	addlw	44
 14026  134F  0086               	movwf	6
 14027  1350  3000               	movlw	0
 14028  1351  3D35               	addwfc	checkSensor@data+1,w
 14029  1352  0087               	movwf	7
 14030  1353  1481               	bsf	1,1
 14031                           
 14032                           ;main.c: 254:    } else {
 14033  1354  2B5E               	goto	l4847
 14034  1355                     l4843:	
 14035                           
 14036                           ;main.c: 256:     data->status.SENSOR_OK = 0;
 14037  1355  0834               	movf	checkSensor@data,w
 14038  1356  3E2C               	addlw	44
 14039  1357  0086               	movwf	6
 14040  1358  3000               	movlw	0
 14041  1359  3D35               	addwfc	checkSensor@data+1,w
 14042  135A  0087               	movwf	7
 14043  135B  1081               	bcf	1,1
 14044                           
 14045                           ;main.c: 257:     uartReset();
 14046  135C  31A1  2189         	fcall	_uartReset
 14047  135E                     l4847:	
 14048                           
 14049                           ;main.c: 259:    state = 0;
 14050  135E  0141               	movlb	1	; select bank1
 14051  135F  01ED               	clrf	checkSensor@state^(0+128)
 14052  1360  0008               	return
 14053  1361                     l4851:	
 14054  1361  0141               	movlb	1	; select bank1
 14055  1362  086D               	movf	checkSensor@state^(0+128),w
 14056  1363  0140               	movlb	0	; select bank0
 14057  1364  00B6               	movwf	??_checkSensor
 14058  1365  01B7               	clrf	??_checkSensor+1
 14059                           
 14060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14061                           ; Switch size 1, requested type "simple"
 14062                           ; Number of cases is 1, Range of values is 0 to 0
 14063                           ; switch strategies available:
 14064                           ; Name         Instructions Cycles
 14065                           ; simple_byte            4     3 (average)
 14066                           ; direct_byte            8     6 (fixed)
 14067                           ; jumptable            260     6 (fixed)
 14068                           ;	Chosen strategy is simple_byte
 14069  1366  0837               	movf	??_checkSensor+1,w
 14070  1367  3A00               	xorlw	0	; case 0
 14071  1368  1903               	skipnz
 14072  1369  2B6B               	goto	l5647
 14073  136A  2B5E               	goto	l4847
 14074  136B                     l5647:	
 14075                           
 14076                           ; Switch size 1, requested type "simple"
 14077                           ; Number of cases is 2, Range of values is 0 to 1
 14078                           ; switch strategies available:
 14079                           ; Name         Instructions Cycles
 14080                           ; simple_byte            7     4 (average)
 14081                           ; direct_byte           10     6 (fixed)
 14082                           ; jumptable            260     6 (fixed)
 14083                           ;	Chosen strategy is simple_byte
 14084  136B  0836               	movf	??_checkSensor,w
 14085  136C  3A00               	xorlw	0	; case 0
 14086  136D  1903               	skipnz
 14087  136E  2A50               	goto	l4813
 14088  136F  3A01               	xorlw	1	; case 1
 14089  1370  1903               	skipnz
 14090  1371  2A93               	goto	l4821
 14091  1372  2B5E               	goto	l4847
 14092  1373  0008               	return
 14093  1374                     __end_of_checkSensor:	
 14094                           
 14095                           	psect	text44
 14096  21AC                     __ptext44:	
 14097 ;; *************** function _uartSendByte *****************
 14098 ;; Defined at:
 14099 ;;		line 27 in file "uart.c"
 14100 ;; Parameters:    Size  Location     Type
 14101 ;;  s               1    wreg     unsigned char 
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;  s               1    0[BANK0 ] unsigned char 
 14104 ;; Return value:  Size  Location     Type
 14105 ;;                  1    wreg      void 
 14106 ;; Registers used:
 14107 ;;		wreg
 14108 ;; Tracked objects:
 14109 ;;		On entry : 0/0
 14110 ;;		On exit  : 0/0
 14111 ;;		Unchanged: 0/0
 14112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14116 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14117 ;;Total ram usage:        1 bytes
 14118 ;; Hardware stack levels used:    1
 14119 ;; Hardware stack levels required when called:    3
 14120 ;; This function calls:
 14121 ;;		Nothing
 14122 ;; This function is called by:
 14123 ;;		_checkSensor
 14124 ;; This function uses a non-reentrant model
 14125 ;;
 14126                           
 14127                           
 14128                           ;psect for function _uartSendByte
 14129  21AC                     _uartSendByte:	
 14130                           
 14131                           ;incstack = 0
 14132                           ; Regs used in _uartSendByte: [wreg]
 14133                           ;uartSendByte@s stored from wreg
 14134  21AC  0140               	movlb	0	; select bank0
 14135  21AD  00A0               	movwf	uartSendByte@s
 14136                           
 14137                           ;uart.c: 27: void uartSendByte(char s);uart.c: 28: {;uart.c: 29:  TX1REG = s;
 14138  21AE  0820               	movf	uartSendByte@s,w
 14139  21AF  0142               	movlb	2	; select bank2
 14140  21B0  009A               	movwf	26	;volatile
 14141                           
 14142                           ;uart.c: 30:  __nop();
 14143  21B1  0000               	nop
 14144  21B2                     l446:	
 14145                           ;uart.c: 31:  while (!PIR3bits.TX1IF);
 14146                           
 14147  21B2  014E               	movlb	14	; select bank14
 14148  21B3  1A0F               	btfsc	15,4	;volatile
 14149  21B4  0008               	return
 14150  21B5  29B2               	goto	l446
 14151  21B6                     __end_of_uartSendByte:	
 14152                           
 14153                           	psect	text45
 14154  2189                     __ptext45:	
 14155 ;; *************** function _uartReset *****************
 14156 ;; Defined at:
 14157 ;;		line 73 in file "uart.c"
 14158 ;; Parameters:    Size  Location     Type
 14159 ;;		None
 14160 ;; Auto vars:     Size  Location     Type
 14161 ;;  dump            1    0        unsigned char 
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  1    wreg      void 
 14164 ;; Registers used:
 14165 ;;		wreg, status,2
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14175 ;;Total ram usage:        1 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; Hardware stack levels required when called:    3
 14178 ;; This function calls:
 14179 ;;		Nothing
 14180 ;; This function is called by:
 14181 ;;		_checkSensor
 14182 ;; This function uses a non-reentrant model
 14183 ;;
 14184                           
 14185                           
 14186                           ;psect for function _uartReset
 14187  2189                     _uartReset:	
 14188                           
 14189                           ;incstack = 0
 14190                           ; Regs used in _uartReset: [wreg+status,2]
 14191  2189  0142               	movlb	2	; select bank2
 14192  218A  0819               	movf	25,w	;volatile
 14193                           
 14194                           ;uart.c: 77:  RC1STAbits.CREN = 0;
 14195  218B  121D               	bcf	29,4	;volatile
 14196                           
 14197                           ;uart.c: 78:  RC1STAbits.CREN = 1;
 14198  218C  161D               	bsf	29,4	;volatile
 14199                           
 14200                           ;uart.c: 79:  RC1STAbits.SPEN = 0;
 14201  218D  139D               	bcf	29,7	;volatile
 14202                           
 14203                           ;uart.c: 80:  RC1STAbits.SPEN = 1;
 14204  218E  179D               	bsf	29,7	;volatile
 14205                           
 14206                           ;uart.c: 81:  rxCount = 0;
 14207  218F  01FC               	clrf	_rxCount	;volatile
 14208  2190  0008               	return
 14209  2191                     __end_of_uartReset:	
 14210                           
 14211                           	psect	text46
 14212  21CB                     __ptext46:	
 14213 ;; *************** function _uartIsDataReady *****************
 14214 ;; Defined at:
 14215 ;;		line 13 in file "uart.c"
 14216 ;; Parameters:    Size  Location     Type
 14217 ;;		None
 14218 ;; Auto vars:     Size  Location     Type
 14219 ;;  ret             1    1[BANK0 ] unsigned char 
 14220 ;; Return value:  Size  Location     Type
 14221 ;;                  1    wreg      unsigned char 
 14222 ;; Registers used:
 14223 ;;		wreg, status,2
 14224 ;; Tracked objects:
 14225 ;;		On entry : 0/0
 14226 ;;		On exit  : 0/0
 14227 ;;		Unchanged: 0/0
 14228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14233 ;;Total ram usage:        2 bytes
 14234 ;; Hardware stack levels used:    1
 14235 ;; Hardware stack levels required when called:    3
 14236 ;; This function calls:
 14237 ;;		Nothing
 14238 ;; This function is called by:
 14239 ;;		_checkSensor
 14240 ;; This function uses a non-reentrant model
 14241 ;;
 14242                           
 14243                           
 14244                           ;psect for function _uartIsDataReady
 14245  21CB                     _uartIsDataReady:	
 14246                           
 14247                           ;uart.c: 15:  uint8_t ret = dataReadyFlag;
 14248                           
 14249                           ;incstack = 0
 14250                           ; Regs used in _uartIsDataReady: [wreg+status,2]
 14251  21CB  0141               	movlb	1	; select bank1
 14252  21CC  0866               	movf	_dataReadyFlag^(0+128),w	;volatile
 14253  21CD  0140               	movlb	0	; select bank0
 14254  21CE  00A0               	movwf	??_uartIsDataReady
 14255  21CF  0820               	movf	??_uartIsDataReady,w
 14256  21D0  00A1               	movwf	uartIsDataReady@ret
 14257                           
 14258                           ;uart.c: 16:  dataReadyFlag = 0;
 14259  21D1  0141               	movlb	1	; select bank1
 14260  21D2  01E6               	clrf	_dataReadyFlag^(0+128)	;volatile
 14261                           
 14262                           ;uart.c: 17:  return ret;
 14263  21D3  0140               	movlb	0	; select bank0
 14264  21D4  0821               	movf	uartIsDataReady@ret,w
 14265  21D5  0008               	return
 14266  21D6                     __end_of_uartIsDataReady:	
 14267                           
 14268                           	psect	text47
 14269  2615                     __ptext47:	
 14270 ;; *************** function _timeSince *****************
 14271 ;; Defined at:
 14272 ;;		line 21 in file "interrupt.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;  since           4    4[BANK0 ] unsigned long 
 14275 ;; Auto vars:     Size  Location     Type
 14276 ;;  now             4   16[BANK0 ] unsigned long 
 14277 ;; Return value:  Size  Location     Type
 14278 ;;                  4    4[BANK0 ] unsigned long 
 14279 ;; Registers used:
 14280 ;;		wreg, pclath, cstack
 14281 ;; Tracked objects:
 14282 ;;		On entry : 0/0
 14283 ;;		On exit  : 0/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14286 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14287 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14288 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14289 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14290 ;;Total ram usage:       16 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; Hardware stack levels required when called:    4
 14293 ;; This function calls:
 14294 ;;		_timeNow
 14295 ;; This function is called by:
 14296 ;;		_main
 14297 ;;		_checkSensor
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           
 14302                           ;psect for function _timeSince
 14303  2615                     _timeSince:	
 14304                           
 14305                           ;interrupt.c: 21: uint32_t timeSince(uint32_t since);interrupt.c: 22: {;interrupt.c: 23:
      +                            uint32_t now = timeNow();
 14306                           
 14307                           ;incstack = 0
 14308                           ; Regs used in _timeSince: [wreg+pclath+cstack]
 14309  2615  31A2  2204  31A6   	fcall	_timeNow
 14310  2618  0140               	movlb	0	; select bank0
 14311  2619  0823               	movf	?_timeNow+3,w
 14312  261A  00B3               	movwf	timeSince@now+3
 14313  261B  0822               	movf	?_timeNow+2,w
 14314  261C  00B2               	movwf	timeSince@now+2
 14315  261D  0821               	movf	?_timeNow+1,w
 14316  261E  00B1               	movwf	timeSince@now+1
 14317  261F  0820               	movf	?_timeNow,w
 14318  2620  00B0               	movwf	timeSince@now
 14319                           
 14320                           ;interrupt.c: 24:  if (now >= since)
 14321  2621  0827               	movf	timeSince@since+3,w
 14322  2622  0233               	subwf	timeSince@now+3,w
 14323  2623  1D03               	skipz
 14324  2624  2E2F               	goto	u4945
 14325  2625  0826               	movf	timeSince@since+2,w
 14326  2626  0232               	subwf	timeSince@now+2,w
 14327  2627  1D03               	skipz
 14328  2628  2E2F               	goto	u4945
 14329  2629  0825               	movf	timeSince@since+1,w
 14330  262A  0231               	subwf	timeSince@now+1,w
 14331  262B  1D03               	skipz
 14332  262C  2E2F               	goto	u4945
 14333  262D  0824               	movf	timeSince@since,w
 14334  262E  0230               	subwf	timeSince@now,w
 14335  262F                     u4945:	
 14336  262F  1C03               	skipc
 14337  2630  2E46               	goto	l4217
 14338                           
 14339                           ;interrupt.c: 25:   return (now - since);
 14340  2631  0824               	movf	timeSince@since,w
 14341  2632  0230               	subwf	timeSince@now,w
 14342  2633  00A8               	movwf	??_timeSince
 14343  2634  0825               	movf	timeSince@since+1,w
 14344  2635  3B31               	subwfb	timeSince@now+1,w
 14345  2636  00A9               	movwf	??_timeSince+1
 14346  2637  0826               	movf	timeSince@since+2,w
 14347  2638  3B32               	subwfb	timeSince@now+2,w
 14348  2639  00AA               	movwf	??_timeSince+2
 14349  263A  0827               	movf	timeSince@since+3,w
 14350  263B  3B33               	subwfb	timeSince@now+3,w
 14351  263C  00AB               	movwf	??_timeSince+3
 14352  263D  082B               	movf	??_timeSince+3,w
 14353  263E  00A7               	movwf	?_timeSince+3
 14354  263F  082A               	movf	??_timeSince+2,w
 14355  2640  00A6               	movwf	?_timeSince+2
 14356  2641  0829               	movf	??_timeSince+1,w
 14357  2642  00A5               	movwf	?_timeSince+1
 14358  2643  0828               	movf	??_timeSince,w
 14359  2644  00A4               	movwf	?_timeSince
 14360  2645  0008               	return
 14361  2646                     l4217:	
 14362                           
 14363                           ;interrupt.c: 27:  return (now + (1 + 1000000000UL - since));
 14364  2646  3001               	movlw	1
 14365  2647  00A8               	movwf	??_timeSince
 14366  2648  30CA               	movlw	202
 14367  2649  00A9               	movwf	??_timeSince+1
 14368  264A  309A               	movlw	154
 14369  264B  00AA               	movwf	??_timeSince+2
 14370  264C  303B               	movlw	59
 14371  264D  00AB               	movwf	??_timeSince+3
 14372  264E  0824               	movf	timeSince@since,w
 14373  264F  0230               	subwf	timeSince@now,w
 14374  2650  00AC               	movwf	??_timeSince+4
 14375  2651  0825               	movf	timeSince@since+1,w
 14376  2652  3B31               	subwfb	timeSince@now+1,w
 14377  2653  00AD               	movwf	??_timeSince+5
 14378  2654  0826               	movf	timeSince@since+2,w
 14379  2655  3B32               	subwfb	timeSince@now+2,w
 14380  2656  00AE               	movwf	??_timeSince+6
 14381  2657  0827               	movf	timeSince@since+3,w
 14382  2658  3B33               	subwfb	timeSince@now+3,w
 14383  2659  00AF               	movwf	??_timeSince+7
 14384  265A  082C               	movf	??_timeSince+4,w
 14385  265B  07A8               	addwf	??_timeSince,f
 14386  265C  082D               	movf	??_timeSince+5,w
 14387  265D  3DA9               	addwfc	??_timeSince+1,f
 14388  265E  082E               	movf	??_timeSince+6,w
 14389  265F  3DAA               	addwfc	??_timeSince+2,f
 14390  2660  082F               	movf	??_timeSince+7,w
 14391  2661  3DAB               	addwfc	??_timeSince+3,f
 14392  2662  082B               	movf	??_timeSince+3,w
 14393  2663  00A7               	movwf	?_timeSince+3
 14394  2664  082A               	movf	??_timeSince+2,w
 14395  2665  00A6               	movwf	?_timeSince+2
 14396  2666  0829               	movf	??_timeSince+1,w
 14397  2667  00A5               	movwf	?_timeSince+1
 14398  2668  0828               	movf	??_timeSince,w
 14399  2669  00A4               	movwf	?_timeSince
 14400  266A  0008               	return
 14401  266B                     __end_of_timeSince:	
 14402                           
 14403                           	psect	text48
 14404  2204                     __ptext48:	
 14405 ;; *************** function _timeNow *****************
 14406 ;; Defined at:
 14407 ;;		line 13 in file "interrupt.c"
 14408 ;; Parameters:    Size  Location     Type
 14409 ;;		None
 14410 ;; Auto vars:     Size  Location     Type
 14411 ;;		None
 14412 ;; Return value:  Size  Location     Type
 14413 ;;                  4    0[BANK0 ] unsigned long 
 14414 ;; Registers used:
 14415 ;;		wreg
 14416 ;; Tracked objects:
 14417 ;;		On entry : 0/0
 14418 ;;		On exit  : 0/0
 14419 ;;		Unchanged: 0/0
 14420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14421 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14424 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14425 ;;Total ram usage:        4 bytes
 14426 ;; Hardware stack levels used:    1
 14427 ;; Hardware stack levels required when called:    3
 14428 ;; This function calls:
 14429 ;;		Nothing
 14430 ;; This function is called by:
 14431 ;;		_main
 14432 ;;		_checkSensor
 14433 ;;		_timeSince
 14434 ;; This function uses a non-reentrant model
 14435 ;;
 14436                           
 14437                           
 14438                           ;psect for function _timeNow
 14439  2204                     _timeNow:	
 14440                           
 14441                           ;interrupt.c: 15:  return tick100ms;
 14442                           
 14443                           ;incstack = 0
 14444                           ; Regs used in _timeNow: [wreg]
 14445  2204  0142               	movlb	2	; select bank2
 14446  2205  0823               	movf	(_tick100ms+3)^(0+256),w	;volatile
 14447  2206  0140               	movlb	0	; select bank0
 14448  2207  00A3               	movwf	?_timeNow+3
 14449  2208  0142               	movlb	2	; select bank2
 14450  2209  0822               	movf	(_tick100ms+2)^(0+256),w	;volatile
 14451  220A  0140               	movlb	0	; select bank0
 14452  220B  00A2               	movwf	?_timeNow+2
 14453  220C  0142               	movlb	2	; select bank2
 14454  220D  0821               	movf	(_tick100ms+1)^(0+256),w	;volatile
 14455  220E  0140               	movlb	0	; select bank0
 14456  220F  00A1               	movwf	?_timeNow+1
 14457  2210  0142               	movlb	2	; select bank2
 14458  2211  0820               	movf	_tick100ms^(0+256),w	;volatile
 14459  2212  0140               	movlb	0	; select bank0
 14460  2213  00A0               	movwf	?_timeNow
 14461  2214  0008               	return
 14462  2215                     __end_of_timeNow:	
 14463                           
 14464                           	psect	text49
 14465  2174                     __ptext49:	
 14466 ;; *************** function _getDataPacket *****************
 14467 ;; Defined at:
 14468 ;;		line 20 in file "uart.c"
 14469 ;; Parameters:    Size  Location     Type
 14470 ;;		None
 14471 ;; Auto vars:     Size  Location     Type
 14472 ;;		None
 14473 ;; Return value:  Size  Location     Type
 14474 ;;                  1    wreg      PTR struct .
 14475 ;; Registers used:
 14476 ;;		wreg
 14477 ;; Tracked objects:
 14478 ;;		On entry : 0/0
 14479 ;;		On exit  : 0/0
 14480 ;;		Unchanged: 0/0
 14481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14486 ;;Total ram usage:        0 bytes
 14487 ;; Hardware stack levels used:    1
 14488 ;; Hardware stack levels required when called:    3
 14489 ;; This function calls:
 14490 ;;		Nothing
 14491 ;; This function is called by:
 14492 ;;		_checkSensor
 14493 ;; This function uses a non-reentrant model
 14494 ;;
 14495                           
 14496                           
 14497                           ;psect for function _getDataPacket
 14498  2174                     _getDataPacket:	
 14499                           
 14500                           ;uart.c: 22:  return &dataPacket;
 14501                           
 14502                           ;incstack = 0
 14503                           ; Regs used in _getDataPacket: [wreg]
 14504  2174  304A               	movlw	(low (_dataPacket| (0+256)))& (0+255)
 14505  2175  0008               	return
 14506  2176                     __end_of_getDataPacket:	
 14507                           
 14508                           	psect	text50
 14509  1015                     __ptext50:	
 14510 ;; *************** function ___xxtofl *****************
 14511 ;; Defined at:
 14512 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;  sign            1    wreg     unsigned char 
 14515 ;;  val             4    6[BANK0 ] long 
 14516 ;; Auto vars:     Size  Location     Type
 14517 ;;  sign            1   14[BANK0 ] unsigned char 
 14518 ;;  arg             4   16[BANK0 ] unsigned long 
 14519 ;;  exp             1   15[BANK0 ] unsigned char 
 14520 ;; Return value:  Size  Location     Type
 14521 ;;                  4    6[BANK0 ] unsigned char 
 14522 ;; Registers used:
 14523 ;;		wreg, status,2, status,0
 14524 ;; Tracked objects:
 14525 ;;		On entry : 0/0
 14526 ;;		On exit  : 0/0
 14527 ;;		Unchanged: 0/0
 14528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14529 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14530 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14531 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14532 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14533 ;;Total ram usage:       14 bytes
 14534 ;; Hardware stack levels used:    1
 14535 ;; Hardware stack levels required when called:    3
 14536 ;; This function calls:
 14537 ;;		Nothing
 14538 ;; This function is called by:
 14539 ;;		_checkSensor
 14540 ;;		_getAvgChannelCurrents
 14541 ;;		_convertAnalogValues
 14542 ;;		_ftoa
 14543 ;; This function uses a non-reentrant model
 14544 ;;
 14545                           
 14546                           
 14547                           ;psect for function ___xxtofl
 14548  1015                     ___xxtofl:	
 14549                           
 14550                           ;incstack = 0
 14551                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 14552                           ;___xxtofl@sign stored from wreg
 14553  1015  0140               	movlb	0	; select bank0
 14554  1016  00AE               	movwf	___xxtofl@sign
 14555  1017  082E               	movf	___xxtofl@sign,w
 14556  1018  1D03               	btfss	3,2
 14557  1019  1FA9               	btfss	___xxtofl@val+3,7
 14558  101A  282B               	goto	l3953
 14559  101B  0926               	comf	___xxtofl@val,w
 14560  101C  00B0               	movwf	___xxtofl@arg
 14561  101D  0927               	comf	___xxtofl@val+1,w
 14562  101E  00B1               	movwf	___xxtofl@arg+1
 14563  101F  0928               	comf	___xxtofl@val+2,w
 14564  1020  00B2               	movwf	___xxtofl@arg+2
 14565  1021  0929               	comf	___xxtofl@val+3,w
 14566  1022  00B3               	movwf	___xxtofl@arg+3
 14567  1023  0AB0               	incf	___xxtofl@arg,f
 14568  1024  1903               	skipnz
 14569  1025  0AB1               	incf	___xxtofl@arg+1,f
 14570  1026  1903               	skipnz
 14571  1027  0AB2               	incf	___xxtofl@arg+2,f
 14572  1028  1903               	skipnz
 14573  1029  0AB3               	incf	___xxtofl@arg+3,f
 14574  102A  2833               	goto	l1200
 14575  102B                     l3953:	
 14576  102B  0829               	movf	___xxtofl@val+3,w
 14577  102C  00B3               	movwf	___xxtofl@arg+3
 14578  102D  0828               	movf	___xxtofl@val+2,w
 14579  102E  00B2               	movwf	___xxtofl@arg+2
 14580  102F  0827               	movf	___xxtofl@val+1,w
 14581  1030  00B1               	movwf	___xxtofl@arg+1
 14582  1031  0826               	movf	___xxtofl@val,w
 14583  1032  00B0               	movwf	___xxtofl@arg
 14584  1033                     l1200:	
 14585  1033  0829               	movf	___xxtofl@val+3,w
 14586  1034  0428               	iorwf	___xxtofl@val+2,w
 14587  1035  0427               	iorwf	___xxtofl@val+1,w
 14588  1036  0426               	iorwf	___xxtofl@val,w
 14589  1037  1D03               	skipz
 14590  1038  2842               	goto	l3959
 14591  1039  3000               	movlw	0
 14592  103A  00A9               	movwf	?___xxtofl+3
 14593  103B  3000               	movlw	0
 14594  103C  00A8               	movwf	?___xxtofl+2
 14595  103D  3000               	movlw	0
 14596  103E  00A7               	movwf	?___xxtofl+1
 14597  103F  3000               	movlw	0
 14598  1040  00A6               	movwf	?___xxtofl
 14599  1041  0008               	return
 14600  1042                     l3959:	
 14601  1042  3096               	movlw	150
 14602  1043  00AA               	movwf	??___xxtofl
 14603  1044  082A               	movf	??___xxtofl,w
 14604  1045  00AF               	movwf	___xxtofl@exp
 14605  1046                     l3963:	
 14606  1046  30FE               	movlw	254
 14607  1047  0533               	andwf	___xxtofl@arg+3,w
 14608  1048  1903               	btfsc	3,2
 14609  1049  2869               	goto	l1206
 14610  104A  3001               	movlw	1
 14611  104B  00AA               	movwf	??___xxtofl
 14612  104C  082A               	movf	??___xxtofl,w
 14613  104D  07AF               	addwf	___xxtofl@exp,f
 14614  104E  3001               	movlw	1
 14615  104F                     u4515:	
 14616  104F  36B3               	lsrf	___xxtofl@arg+3,f
 14617  1050  0CB2               	rrf	___xxtofl@arg+2,f
 14618  1051  0CB1               	rrf	___xxtofl@arg+1,f
 14619  1052  0CB0               	rrf	___xxtofl@arg,f
 14620  1053  0B89               	decfsz	9,f
 14621  1054  284F               	goto	u4515
 14622  1055  2846               	goto	l3963
 14623  1056                     l3965:	
 14624  1056  3001               	movlw	1
 14625  1057  00AA               	movwf	??___xxtofl
 14626  1058  082A               	movf	??___xxtofl,w
 14627  1059  07AF               	addwf	___xxtofl@exp,f
 14628  105A  3001               	movlw	1
 14629  105B  07B0               	addwf	___xxtofl@arg,f
 14630  105C  3000               	movlw	0
 14631  105D  3DB1               	addwfc	___xxtofl@arg+1,f
 14632  105E  3000               	movlw	0
 14633  105F  3DB2               	addwfc	___xxtofl@arg+2,f
 14634  1060  3000               	movlw	0
 14635  1061  3DB3               	addwfc	___xxtofl@arg+3,f
 14636  1062  3001               	movlw	1
 14637  1063                     u4535:	
 14638  1063  36B3               	lsrf	___xxtofl@arg+3,f
 14639  1064  0CB2               	rrf	___xxtofl@arg+2,f
 14640  1065  0CB1               	rrf	___xxtofl@arg+1,f
 14641  1066  0CB0               	rrf	___xxtofl@arg,f
 14642  1067  0B89               	decfsz	9,f
 14643  1068  2863               	goto	u4535
 14644  1069                     l1206:	
 14645  1069  30FF               	movlw	255
 14646  106A  0533               	andwf	___xxtofl@arg+3,w
 14647  106B  1903               	btfsc	3,2
 14648  106C  287B               	goto	l3973
 14649  106D  2856               	goto	l3965
 14650  106E                     l3975:	
 14651  106E  3002               	movlw	2
 14652  106F  022F               	subwf	___xxtofl@exp,w
 14653  1070  1C03               	btfss	3,0
 14654  1071  287D               	goto	l1213
 14655  1072  3001               	movlw	1
 14656  1073  02AF               	subwf	___xxtofl@exp,f
 14657  1074  3001               	movlw	1
 14658  1075                     u4555:	
 14659  1075  35B0               	lslf	___xxtofl@arg,f
 14660  1076  0DB1               	rlf	___xxtofl@arg+1,f
 14661  1077  0DB2               	rlf	___xxtofl@arg+2,f
 14662  1078  0DB3               	rlf	___xxtofl@arg+3,f
 14663  1079  0B89               	decfsz	9,f
 14664  107A  2875               	goto	u4555
 14665  107B                     l3973:	
 14666  107B  1FB2               	btfss	___xxtofl@arg+2,7
 14667  107C  286E               	goto	l3975
 14668  107D                     l1213:	
 14669  107D  182F               	btfsc	___xxtofl@exp,0
 14670  107E  2887               	goto	l1214
 14671  107F  30FF               	movlw	255
 14672  1080  05B0               	andwf	___xxtofl@arg,f
 14673  1081  30FF               	movlw	255
 14674  1082  05B1               	andwf	___xxtofl@arg+1,f
 14675  1083  307F               	movlw	127
 14676  1084  05B2               	andwf	___xxtofl@arg+2,f
 14677  1085  30FF               	movlw	255
 14678  1086  05B3               	andwf	___xxtofl@arg+3,f
 14679  1087                     l1214:	
 14680  1087  1003               	clrc
 14681  1088  0CAF               	rrf	___xxtofl@exp,f
 14682  1089  082F               	movf	___xxtofl@exp,w
 14683  108A  00AA               	movwf	??___xxtofl
 14684  108B  01AB               	clrf	??___xxtofl+1
 14685  108C  01AC               	clrf	??___xxtofl+2
 14686  108D  01AD               	clrf	??___xxtofl+3
 14687  108E  3018               	movlw	24
 14688  108F                     u4595:	
 14689  108F  35AA               	lslf	??___xxtofl,f
 14690  1090  0DAB               	rlf	??___xxtofl+1,f
 14691  1091  0DAC               	rlf	??___xxtofl+2,f
 14692  1092  0DAD               	rlf	??___xxtofl+3,f
 14693  1093  0B89               	decfsz	9,f
 14694  1094  288F               	goto	u4595
 14695  1095  082A               	movf	??___xxtofl,w
 14696  1096  04B0               	iorwf	___xxtofl@arg,f
 14697  1097  082B               	movf	??___xxtofl+1,w
 14698  1098  04B1               	iorwf	___xxtofl@arg+1,f
 14699  1099  082C               	movf	??___xxtofl+2,w
 14700  109A  04B2               	iorwf	___xxtofl@arg+2,f
 14701  109B  082D               	movf	??___xxtofl+3,w
 14702  109C  04B3               	iorwf	___xxtofl@arg+3,f
 14703  109D  082E               	movf	___xxtofl@sign,w
 14704  109E  1D03               	btfss	3,2
 14705  109F  1FA9               	btfss	___xxtofl@val+3,7
 14706  10A0  28A2               	goto	l3987
 14707  10A1  17B3               	bsf	___xxtofl@arg+3,7
 14708  10A2                     l3987:	
 14709  10A2  0833               	movf	___xxtofl@arg+3,w
 14710  10A3  00A9               	movwf	?___xxtofl+3
 14711  10A4  0832               	movf	___xxtofl@arg+2,w
 14712  10A5  00A8               	movwf	?___xxtofl+2
 14713  10A6  0831               	movf	___xxtofl@arg+1,w
 14714  10A7  00A7               	movwf	?___xxtofl+1
 14715  10A8  0830               	movf	___xxtofl@arg,w
 14716  10A9  00A6               	movwf	?___xxtofl
 14717  10AA  0008               	return
 14718  10AB                     __end_of___xxtofl:	
 14719                           
 14720                           	psect	text51
 14721  19F1                     __ptext51:	
 14722 ;; *************** function ___flge *****************
 14723 ;; Defined at:
 14724 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 14725 ;; Parameters:    Size  Location     Type
 14726 ;;  ff1             4    0[BANK0 ] unsigned char 
 14727 ;;  ff2             4    4[BANK0 ] unsigned char 
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;		None
 14730 ;; Return value:  Size  Location     Type
 14731 ;;		None               void
 14732 ;; Registers used:
 14733 ;;		wreg, status,2, status,0
 14734 ;; Tracked objects:
 14735 ;;		On entry : 0/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14739 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14741 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14742 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14743 ;;Total ram usage:       12 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; Hardware stack levels required when called:    3
 14746 ;; This function calls:
 14747 ;;		Nothing
 14748 ;; This function is called by:
 14749 ;;		_systemCheck
 14750 ;;		_checkSensor
 14751 ;;		_getAvgChannelCurrents
 14752 ;;		_spinInput
 14753 ;;		_channelSetup
 14754 ;;		_setOutputPower
 14755 ;;		_ftoa
 14756 ;; This function uses a non-reentrant model
 14757 ;;
 14758                           
 14759                           
 14760                           ;psect for function ___flge
 14761  19F1                     ___flge:	
 14762                           
 14763                           ;incstack = 0
 14764                           ; Regs used in ___flge: [wreg+status,2+status,0]
 14765  19F1  3000               	movlw	0
 14766  19F2  0140               	movlb	0	; select bank0
 14767  19F3  0520               	andwf	___flge@ff1,w
 14768  19F4  00A8               	movwf	??___flge
 14769  19F5  3000               	movlw	0
 14770  19F6  0521               	andwf	___flge@ff1+1,w
 14771  19F7  00A9               	movwf	??___flge+1
 14772  19F8  3080               	movlw	128
 14773  19F9  0522               	andwf	___flge@ff1+2,w
 14774  19FA  00AA               	movwf	??___flge+2
 14775  19FB  307F               	movlw	127
 14776  19FC  0523               	andwf	___flge@ff1+3,w
 14777  19FD  00AB               	movwf	??___flge+3
 14778  19FE  082B               	movf	??___flge+3,w
 14779  19FF  042A               	iorwf	??___flge+2,w
 14780  1A00  0429               	iorwf	??___flge+1,w
 14781  1A01  0428               	iorwf	??___flge,w
 14782  1A02  1D03               	skipz
 14783  1A03  2A0C               	goto	l943
 14784  1A04  3000               	movlw	0
 14785  1A05  00A3               	movwf	___flge@ff1+3
 14786  1A06  3000               	movlw	0
 14787  1A07  00A2               	movwf	___flge@ff1+2
 14788  1A08  3000               	movlw	0
 14789  1A09  00A1               	movwf	___flge@ff1+1
 14790  1A0A  3000               	movlw	0
 14791  1A0B  00A0               	movwf	___flge@ff1
 14792  1A0C                     l943:	
 14793  1A0C  3000               	movlw	0
 14794  1A0D  0524               	andwf	___flge@ff2,w
 14795  1A0E  00A8               	movwf	??___flge
 14796  1A0F  3000               	movlw	0
 14797  1A10  0525               	andwf	___flge@ff2+1,w
 14798  1A11  00A9               	movwf	??___flge+1
 14799  1A12  3080               	movlw	128
 14800  1A13  0526               	andwf	___flge@ff2+2,w
 14801  1A14  00AA               	movwf	??___flge+2
 14802  1A15  307F               	movlw	127
 14803  1A16  0527               	andwf	___flge@ff2+3,w
 14804  1A17  00AB               	movwf	??___flge+3
 14805  1A18  082B               	movf	??___flge+3,w
 14806  1A19  042A               	iorwf	??___flge+2,w
 14807  1A1A  0429               	iorwf	??___flge+1,w
 14808  1A1B  0428               	iorwf	??___flge,w
 14809  1A1C  1D03               	skipz
 14810  1A1D  2A26               	goto	l3611
 14811  1A1E  3000               	movlw	0
 14812  1A1F  00A7               	movwf	___flge@ff2+3
 14813  1A20  3000               	movlw	0
 14814  1A21  00A6               	movwf	___flge@ff2+2
 14815  1A22  3000               	movlw	0
 14816  1A23  00A5               	movwf	___flge@ff2+1
 14817  1A24  3000               	movlw	0
 14818  1A25  00A4               	movwf	___flge@ff2
 14819  1A26                     l3611:	
 14820  1A26  1FA3               	btfss	___flge@ff1+3,7
 14821  1A27  2A40               	goto	l3615
 14822  1A28  3000               	movlw	0
 14823  1A29  00A8               	movwf	??___flge
 14824  1A2A  3000               	movlw	0
 14825  1A2B  00A9               	movwf	??___flge+1
 14826  1A2C  3000               	movlw	0
 14827  1A2D  00AA               	movwf	??___flge+2
 14828  1A2E  3080               	movlw	128
 14829  1A2F  00AB               	movwf	??___flge+3
 14830  1A30  0820               	movf	___flge@ff1,w
 14831  1A31  02A8               	subwf	??___flge,f
 14832  1A32  0821               	movf	___flge@ff1+1,w
 14833  1A33  3BA9               	subwfb	??___flge+1,f
 14834  1A34  0822               	movf	___flge@ff1+2,w
 14835  1A35  3BAA               	subwfb	??___flge+2,f
 14836  1A36  0823               	movf	___flge@ff1+3,w
 14837  1A37  3BAB               	subwfb	??___flge+3,f
 14838  1A38  082B               	movf	??___flge+3,w
 14839  1A39  00A3               	movwf	___flge@ff1+3
 14840  1A3A  082A               	movf	??___flge+2,w
 14841  1A3B  00A2               	movwf	___flge@ff1+2
 14842  1A3C  0829               	movf	??___flge+1,w
 14843  1A3D  00A1               	movwf	___flge@ff1+1
 14844  1A3E  0828               	movf	??___flge,w
 14845  1A3F  00A0               	movwf	___flge@ff1
 14846  1A40                     l3615:	
 14847  1A40  1FA7               	btfss	___flge@ff2+3,7
 14848  1A41  2A5A               	goto	l946
 14849  1A42  3000               	movlw	0
 14850  1A43  00A8               	movwf	??___flge
 14851  1A44  3000               	movlw	0
 14852  1A45  00A9               	movwf	??___flge+1
 14853  1A46  3000               	movlw	0
 14854  1A47  00AA               	movwf	??___flge+2
 14855  1A48  3080               	movlw	128
 14856  1A49  00AB               	movwf	??___flge+3
 14857  1A4A  0824               	movf	___flge@ff2,w
 14858  1A4B  02A8               	subwf	??___flge,f
 14859  1A4C  0825               	movf	___flge@ff2+1,w
 14860  1A4D  3BA9               	subwfb	??___flge+1,f
 14861  1A4E  0826               	movf	___flge@ff2+2,w
 14862  1A4F  3BAA               	subwfb	??___flge+2,f
 14863  1A50  0827               	movf	___flge@ff2+3,w
 14864  1A51  3BAB               	subwfb	??___flge+3,f
 14865  1A52  082B               	movf	??___flge+3,w
 14866  1A53  00A7               	movwf	___flge@ff2+3
 14867  1A54  082A               	movf	??___flge+2,w
 14868  1A55  00A6               	movwf	___flge@ff2+2
 14869  1A56  0829               	movf	??___flge+1,w
 14870  1A57  00A5               	movwf	___flge@ff2+1
 14871  1A58  0828               	movf	??___flge,w
 14872  1A59  00A4               	movwf	___flge@ff2
 14873  1A5A                     l946:	
 14874  1A5A  3080               	movlw	128
 14875  1A5B  06A3               	xorwf	___flge@ff1+3,f
 14876  1A5C  3080               	movlw	128
 14877  1A5D  06A7               	xorwf	___flge@ff2+3,f
 14878  1A5E  0827               	movf	___flge@ff2+3,w
 14879  1A5F  0223               	subwf	___flge@ff1+3,w
 14880  1A60  1D03               	skipz
 14881  1A61  0008               	return
 14882  1A62  0826               	movf	___flge@ff2+2,w
 14883  1A63  0222               	subwf	___flge@ff1+2,w
 14884  1A64  1D03               	skipz
 14885  1A65  0008               	return
 14886  1A66  0825               	movf	___flge@ff2+1,w
 14887  1A67  0221               	subwf	___flge@ff1+1,w
 14888  1A68  1D03               	skipz
 14889  1A69  0008               	return
 14890  1A6A  0824               	movf	___flge@ff2,w
 14891  1A6B  0220               	subwf	___flge@ff1,w
 14892  1A6C  0008               	return
 14893  1A6D                     __end_of___flge:	
 14894                           
 14895                           	psect	text52
 14896  00B5                     __ptext52:	
 14897 ;; *************** function _calcRequiredPower *****************
 14898 ;; Defined at:
 14899 ;;		line 166 in file "main.c"
 14900 ;; Parameters:    Size  Location     Type
 14901 ;;  data            2   74[BANK0 ] PTR struct .
 14902 ;;		 -> data(173), 
 14903 ;; Auto vars:     Size  Location     Type
 14904 ;;  T2              4   52[BANK1 ] float 
 14905 ;;  T1              4   48[BANK1 ] float 
 14906 ;;  A               4   40[BANK1 ] float 
 14907 ;;  phi             4   36[BANK1 ] float 
 14908 ;;  d               4   32[BANK1 ] float 
 14909 ;;  Rth             4    4[BANK1 ] float 
 14910 ;;  p               4    0[BANK1 ] float 
 14911 ;;  n               1   56[BANK1 ] unsigned char 
 14912 ;; Return value:  Size  Location     Type
 14913 ;;                  1    wreg      void 
 14914 ;; Registers used:
 14915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14916 ;; Tracked objects:
 14917 ;;		On entry : 0/0
 14918 ;;		On exit  : 0/0
 14919 ;;		Unchanged: 0/0
 14920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14921 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14922 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14923 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14924 ;;      Totals:         0       6      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14925 ;;Total ram usage:       63 bytes
 14926 ;; Hardware stack levels used:    1
 14927 ;; Hardware stack levels required when called:    5
 14928 ;; This function calls:
 14929 ;;		___fladd
 14930 ;;		___fldiv
 14931 ;;		___flmul
 14932 ;;		___flsub
 14933 ;; This function is called by:
 14934 ;;		_main
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938                           
 14939                           ;psect for function _calcRequiredPower
 14940  00B5                     _calcRequiredPower:	
 14941                           
 14942                           ;main.c: 166: void calcRequiredPower(t_globalData *data);main.c: 167: {;main.c: 168:  ui
      +                          nt8_t n;;main.c: 169:  float d, A, T1, T2, phi;;main.c: 170:  float p, Rth;;main.c: 172:
      +                            for (n = 0; n < 4; n++) {
 14943                           
 14944                           ;incstack = 0
 14945                           ; Regs used in _calcRequiredPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14946  00B5  0141               	movlb	1	; select bank1
 14947  00B6  01D8               	clrf	calcRequiredPower@n^(0+128)
 14948  00B7                     l4925:	
 14949                           
 14950                           ;main.c: 174:   d = 0.0254 * data->chData[n].lensDia;
 14951  00B7  303C               	movlw	60
 14952  00B8  0140               	movlb	0	; select bank0
 14953  00B9  00B7               	movwf	___flmul@b+3
 14954  00BA  30D0               	movlw	208
 14955  00BB  00B6               	movwf	___flmul@b+2
 14956  00BC  3013               	movlw	19
 14957  00BD  00B5               	movwf	___flmul@b+1
 14958  00BE  30A9               	movlw	169
 14959  00BF  00B4               	movwf	___flmul@b
 14960  00C0  0141               	movlb	1	; select bank1
 14961  00C1  0858               	movf	calcRequiredPower@n^(0+128),w
 14962  00C2  0140               	movlb	0	; select bank0
 14963  00C3  00EC               	movwf	??_calcRequiredPower
 14964  00C4  01ED               	clrf	??_calcRequiredPower+1
 14965  00C5  3005               	movlw	5
 14966  00C6                     u5565:	
 14967  00C6  35EC               	lslf	??_calcRequiredPower,f
 14968  00C7  0DED               	rlf	??_calcRequiredPower+1,f
 14969  00C8  0B89               	decfsz	9,f
 14970  00C9  28C6               	goto	u5565
 14971  00CA  086C               	movf	??_calcRequiredPower,w
 14972  00CB  076A               	addwf	calcRequiredPower@data,w
 14973  00CC  00EE               	movwf	??_calcRequiredPower+2
 14974  00CD  086D               	movf	??_calcRequiredPower+1,w
 14975  00CE  3D6B               	addwfc	calcRequiredPower@data+1,w
 14976  00CF  00EF               	movwf	??_calcRequiredPower+3
 14977  00D0  086E               	movf	??_calcRequiredPower+2,w
 14978  00D1  3E43               	addlw	67
 14979  00D2  0086               	movwf	6
 14980  00D3  3000               	movlw	0
 14981  00D4  3D6F               	addwfc	??_calcRequiredPower+3,w
 14982  00D5  0087               	movwf	7
 14983  00D6  3F40               	moviw [0]fsr1
 14984  00D7  00B8               	movwf	___flmul@a
 14985  00D8  3F41               	moviw [1]fsr1
 14986  00D9  00B9               	movwf	___flmul@a+1
 14987  00DA  3F42               	moviw [2]fsr1
 14988  00DB  00BA               	movwf	___flmul@a+2
 14989  00DC  3F43               	moviw [3]fsr1
 14990  00DD  00BB               	movwf	___flmul@a+3
 14991  00DE  3185  2502  3180   	fcall	___flmul
 14992  00E1  0140               	movlb	0	; select bank0
 14993  00E2  0837               	movf	?___flmul+3,w
 14994  00E3  0141               	movlb	1	; select bank1
 14995  00E4  00C3               	movwf	(calcRequiredPower@d+3)^(0+128)
 14996  00E5  0140               	movlb	0	; select bank0
 14997  00E6  0836               	movf	?___flmul+2,w
 14998  00E7  0141               	movlb	1	; select bank1
 14999  00E8  00C2               	movwf	(calcRequiredPower@d+2)^(0+128)
 15000  00E9  0140               	movlb	0	; select bank0
 15001  00EA  0835               	movf	?___flmul+1,w
 15002  00EB  0141               	movlb	1	; select bank1
 15003  00EC  00C1               	movwf	(calcRequiredPower@d+1)^(0+128)
 15004  00ED  0140               	movlb	0	; select bank0
 15005  00EE  0834               	movf	?___flmul,w
 15006  00EF  0141               	movlb	1	; select bank1
 15007  00F0  00C0               	movwf	calcRequiredPower@d^(0+128)
 15008                           
 15009                           ;main.c: 175:   A = (3.14 * d * d) / 4;
 15010  00F1  3040               	movlw	64
 15011  00F2  0140               	movlb	0	; select bank0
 15012  00F3  00B7               	movwf	___flmul@b+3
 15013  00F4  3048               	movlw	72
 15014  00F5  00B6               	movwf	___flmul@b+2
 15015  00F6  30F5               	movlw	245
 15016  00F7  00B5               	movwf	___flmul@b+1
 15017  00F8  30C3               	movlw	195
 15018  00F9  00B4               	movwf	___flmul@b
 15019  00FA  0141               	movlb	1	; select bank1
 15020  00FB  0843               	movf	(calcRequiredPower@d+3)^(0+128),w
 15021  00FC  0140               	movlb	0	; select bank0
 15022  00FD  00BB               	movwf	___flmul@a+3
 15023  00FE  0141               	movlb	1	; select bank1
 15024  00FF  0842               	movf	(calcRequiredPower@d+2)^(0+128),w
 15025  0100  0140               	movlb	0	; select bank0
 15026  0101  00BA               	movwf	___flmul@a+2
 15027  0102  0141               	movlb	1	; select bank1
 15028  0103  0841               	movf	(calcRequiredPower@d+1)^(0+128),w
 15029  0104  0140               	movlb	0	; select bank0
 15030  0105  00B9               	movwf	___flmul@a+1
 15031  0106  0141               	movlb	1	; select bank1
 15032  0107  0840               	movf	calcRequiredPower@d^(0+128),w
 15033  0108  0140               	movlb	0	; select bank0
 15034  0109  00B8               	movwf	___flmul@a
 15035  010A  3185  2502  3180   	fcall	___flmul
 15036  010D  0140               	movlb	0	; select bank0
 15037  010E  0837               	movf	?___flmul+3,w
 15038  010F  0141               	movlb	1	; select bank1
 15039  0110  00CF               	movwf	(_calcRequiredPower$2137+3)^(0+128)
 15040  0111  0140               	movlb	0	; select bank0
 15041  0112  0836               	movf	?___flmul+2,w
 15042  0113  0141               	movlb	1	; select bank1
 15043  0114  00CE               	movwf	(_calcRequiredPower$2137+2)^(0+128)
 15044  0115  0140               	movlb	0	; select bank0
 15045  0116  0835               	movf	?___flmul+1,w
 15046  0117  0141               	movlb	1	; select bank1
 15047  0118  00CD               	movwf	(_calcRequiredPower$2137+1)^(0+128)
 15048  0119  0140               	movlb	0	; select bank0
 15049  011A  0834               	movf	?___flmul,w
 15050  011B  0141               	movlb	1	; select bank1
 15051  011C  00CC               	movwf	_calcRequiredPower$2137^(0+128)
 15052                           
 15053                           ;main.c: 175:   A = (3.14 * d * d) / 4;
 15054  011D  3040               	movlw	64
 15055  011E  0140               	movlb	0	; select bank0
 15056  011F  00D1               	movwf	___fldiv@a+3
 15057  0120  3080               	movlw	128
 15058  0121  00D0               	movwf	___fldiv@a+2
 15059  0122  3000               	movlw	0
 15060  0123  00CF               	movwf	___fldiv@a+1
 15061  0124  3000               	movlw	0
 15062  0125  00CE               	movwf	___fldiv@a
 15063  0126  0141               	movlb	1	; select bank1
 15064  0127  0843               	movf	(calcRequiredPower@d+3)^(0+128),w
 15065  0128  0140               	movlb	0	; select bank0
 15066  0129  00B7               	movwf	___flmul@b+3
 15067  012A  0141               	movlb	1	; select bank1
 15068  012B  0842               	movf	(calcRequiredPower@d+2)^(0+128),w
 15069  012C  0140               	movlb	0	; select bank0
 15070  012D  00B6               	movwf	___flmul@b+2
 15071  012E  0141               	movlb	1	; select bank1
 15072  012F  0841               	movf	(calcRequiredPower@d+1)^(0+128),w
 15073  0130  0140               	movlb	0	; select bank0
 15074  0131  00B5               	movwf	___flmul@b+1
 15075  0132  0141               	movlb	1	; select bank1
 15076  0133  0840               	movf	calcRequiredPower@d^(0+128),w
 15077  0134  0140               	movlb	0	; select bank0
 15078  0135  00B4               	movwf	___flmul@b
 15079  0136  0141               	movlb	1	; select bank1
 15080  0137  084F               	movf	(_calcRequiredPower$2137+3)^(0+128),w
 15081  0138  0140               	movlb	0	; select bank0
 15082  0139  00BB               	movwf	___flmul@a+3
 15083  013A  0141               	movlb	1	; select bank1
 15084  013B  084E               	movf	(_calcRequiredPower$2137+2)^(0+128),w
 15085  013C  0140               	movlb	0	; select bank0
 15086  013D  00BA               	movwf	___flmul@a+2
 15087  013E  0141               	movlb	1	; select bank1
 15088  013F  084D               	movf	(_calcRequiredPower$2137+1)^(0+128),w
 15089  0140  0140               	movlb	0	; select bank0
 15090  0141  00B9               	movwf	___flmul@a+1
 15091  0142  0141               	movlb	1	; select bank1
 15092  0143  084C               	movf	_calcRequiredPower$2137^(0+128),w
 15093  0144  0140               	movlb	0	; select bank0
 15094  0145  00B8               	movwf	___flmul@a
 15095  0146  3185  2502  3180   	fcall	___flmul
 15096  0149  0140               	movlb	0	; select bank0
 15097  014A  0837               	movf	?___flmul+3,w
 15098  014B  00D5               	movwf	___fldiv@b+3
 15099  014C  0836               	movf	?___flmul+2,w
 15100  014D  00D4               	movwf	___fldiv@b+2
 15101  014E  0835               	movf	?___flmul+1,w
 15102  014F  00D3               	movwf	___fldiv@b+1
 15103  0150  0834               	movf	?___flmul,w
 15104  0151  00D2               	movwf	___fldiv@b
 15105  0152  3193  2374  3180   	fcall	___fldiv
 15106  0155  0140               	movlb	0	; select bank0
 15107  0156  0851               	movf	?___fldiv+3,w
 15108  0157  0141               	movlb	1	; select bank1
 15109  0158  00CB               	movwf	(calcRequiredPower@A+3)^(0+128)
 15110  0159  0140               	movlb	0	; select bank0
 15111  015A  0850               	movf	?___fldiv+2,w
 15112  015B  0141               	movlb	1	; select bank1
 15113  015C  00CA               	movwf	(calcRequiredPower@A+2)^(0+128)
 15114  015D  0140               	movlb	0	; select bank0
 15115  015E  084F               	movf	?___fldiv+1,w
 15116  015F  0141               	movlb	1	; select bank1
 15117  0160  00C9               	movwf	(calcRequiredPower@A+1)^(0+128)
 15118  0161  0140               	movlb	0	; select bank0
 15119  0162  084E               	movf	?___fldiv,w
 15120  0163  0141               	movlb	1	; select bank1
 15121  0164  00C8               	movwf	calcRequiredPower@A^(0+128)
 15122                           
 15123                           ;main.c: 177:   T1 = data->dewPointC + data->dpOffset + 273.15;
 15124  0165  0140               	movlb	0	; select bank0
 15125  0166  086A               	movf	calcRequiredPower@data,w
 15126  0167  3E20               	addlw	32
 15127  0168  0086               	movwf	6
 15128  0169  3000               	movlw	0
 15129  016A  3D6B               	addwfc	calcRequiredPower@data+1,w
 15130  016B  0087               	movwf	7
 15131  016C  3F40               	moviw [0]fsr1
 15132  016D  00CE               	movwf	___fladd@b
 15133  016E  3F41               	moviw [1]fsr1
 15134  016F  00CF               	movwf	___fladd@b+1
 15135  0170  3F42               	moviw [2]fsr1
 15136  0171  00D0               	movwf	___fladd@b+2
 15137  0172  3F43               	moviw [3]fsr1
 15138  0173  00D1               	movwf	___fladd@b+3
 15139  0174  086A               	movf	calcRequiredPower@data,w
 15140  0175  0086               	movwf	6
 15141  0176  086B               	movf	calcRequiredPower@data+1,w
 15142  0177  0087               	movwf	7
 15143  0178  3148               	addfsr 1,8
 15144  0179  3F40               	moviw [0]fsr1
 15145  017A  00D2               	movwf	___fladd@a
 15146  017B  3F41               	moviw [1]fsr1
 15147  017C  00D3               	movwf	___fladd@a+1
 15148  017D  3F42               	moviw [2]fsr1
 15149  017E  00D4               	movwf	___fladd@a+2
 15150  017F  3F43               	moviw [3]fsr1
 15151  0180  00D5               	movwf	___fladd@a+3
 15152  0181  318C  241B  3180   	fcall	___fladd
 15153  0184  0140               	movlb	0	; select bank0
 15154  0185  0851               	movf	?___fladd+3,w
 15155  0186  0141               	movlb	1	; select bank1
 15156  0187  00AB               	movwf	(_calcRequiredPower$2138+3)^(0+128)
 15157  0188  0140               	movlb	0	; select bank0
 15158  0189  0850               	movf	?___fladd+2,w
 15159  018A  0141               	movlb	1	; select bank1
 15160  018B  00AA               	movwf	(_calcRequiredPower$2138+2)^(0+128)
 15161  018C  0140               	movlb	0	; select bank0
 15162  018D  084F               	movf	?___fladd+1,w
 15163  018E  0141               	movlb	1	; select bank1
 15164  018F  00A9               	movwf	(_calcRequiredPower$2138+1)^(0+128)
 15165  0190  0140               	movlb	0	; select bank0
 15166  0191  084E               	movf	?___fladd,w
 15167  0192  0141               	movlb	1	; select bank1
 15168  0193  00A8               	movwf	_calcRequiredPower$2138^(0+128)
 15169                           
 15170                           ;main.c: 177:   T1 = data->dewPointC + data->dpOffset + 273.15;
 15171  0194  3043               	movlw	67
 15172  0195  0140               	movlb	0	; select bank0
 15173  0196  00D1               	movwf	___fladd@b+3
 15174  0197  3088               	movlw	136
 15175  0198  00D0               	movwf	___fladd@b+2
 15176  0199  3093               	movlw	147
 15177  019A  00CF               	movwf	___fladd@b+1
 15178  019B  3033               	movlw	51
 15179  019C  00CE               	movwf	___fladd@b
 15180  019D  0141               	movlb	1	; select bank1
 15181  019E  082B               	movf	(_calcRequiredPower$2138+3)^(0+128),w
 15182  019F  0140               	movlb	0	; select bank0
 15183  01A0  00D5               	movwf	___fladd@a+3
 15184  01A1  0141               	movlb	1	; select bank1
 15185  01A2  082A               	movf	(_calcRequiredPower$2138+2)^(0+128),w
 15186  01A3  0140               	movlb	0	; select bank0
 15187  01A4  00D4               	movwf	___fladd@a+2
 15188  01A5  0141               	movlb	1	; select bank1
 15189  01A6  0829               	movf	(_calcRequiredPower$2138+1)^(0+128),w
 15190  01A7  0140               	movlb	0	; select bank0
 15191  01A8  00D3               	movwf	___fladd@a+1
 15192  01A9  0141               	movlb	1	; select bank1
 15193  01AA  0828               	movf	_calcRequiredPower$2138^(0+128),w
 15194  01AB  0140               	movlb	0	; select bank0
 15195  01AC  00D2               	movwf	___fladd@a
 15196  01AD  318C  241B  3180   	fcall	___fladd
 15197  01B0  0140               	movlb	0	; select bank0
 15198  01B1  0851               	movf	?___fladd+3,w
 15199  01B2  0141               	movlb	1	; select bank1
 15200  01B3  00D3               	movwf	(calcRequiredPower@T1+3)^(0+128)
 15201  01B4  0140               	movlb	0	; select bank0
 15202  01B5  0850               	movf	?___fladd+2,w
 15203  01B6  0141               	movlb	1	; select bank1
 15204  01B7  00D2               	movwf	(calcRequiredPower@T1+2)^(0+128)
 15205  01B8  0140               	movlb	0	; select bank0
 15206  01B9  084F               	movf	?___fladd+1,w
 15207  01BA  0141               	movlb	1	; select bank1
 15208  01BB  00D1               	movwf	(calcRequiredPower@T1+1)^(0+128)
 15209  01BC  0140               	movlb	0	; select bank0
 15210  01BD  084E               	movf	?___fladd,w
 15211  01BE  0141               	movlb	1	; select bank1
 15212  01BF  00D0               	movwf	calcRequiredPower@T1^(0+128)
 15213                           
 15214                           ;main.c: 178:   T2 = data->skyTemp + 273.15;
 15215  01C0  3043               	movlw	67
 15216  01C1  0140               	movlb	0	; select bank0
 15217  01C2  00D1               	movwf	___fladd@b+3
 15218  01C3  3088               	movlw	136
 15219  01C4  00D0               	movwf	___fladd@b+2
 15220  01C5  3093               	movlw	147
 15221  01C6  00CF               	movwf	___fladd@b+1
 15222  01C7  3033               	movlw	51
 15223  01C8  00CE               	movwf	___fladd@b
 15224  01C9  086A               	movf	calcRequiredPower@data,w
 15225  01CA  3E24               	addlw	36
 15226  01CB  0086               	movwf	6
 15227  01CC  3000               	movlw	0
 15228  01CD  3D6B               	addwfc	calcRequiredPower@data+1,w
 15229  01CE  0087               	movwf	7
 15230  01CF  3F40               	moviw [0]fsr1
 15231  01D0  00D2               	movwf	___fladd@a
 15232  01D1  3F41               	moviw [1]fsr1
 15233  01D2  00D3               	movwf	___fladd@a+1
 15234  01D3  3F42               	moviw [2]fsr1
 15235  01D4  00D4               	movwf	___fladd@a+2
 15236  01D5  3F43               	moviw [3]fsr1
 15237  01D6  00D5               	movwf	___fladd@a+3
 15238  01D7  318C  241B  3180   	fcall	___fladd
 15239  01DA  0140               	movlb	0	; select bank0
 15240  01DB  0851               	movf	?___fladd+3,w
 15241  01DC  0141               	movlb	1	; select bank1
 15242  01DD  00D7               	movwf	(calcRequiredPower@T2+3)^(0+128)
 15243  01DE  0140               	movlb	0	; select bank0
 15244  01DF  0850               	movf	?___fladd+2,w
 15245  01E0  0141               	movlb	1	; select bank1
 15246  01E1  00D6               	movwf	(calcRequiredPower@T2+2)^(0+128)
 15247  01E2  0140               	movlb	0	; select bank0
 15248  01E3  084F               	movf	?___fladd+1,w
 15249  01E4  0141               	movlb	1	; select bank1
 15250  01E5  00D5               	movwf	(calcRequiredPower@T2+1)^(0+128)
 15251  01E6  0140               	movlb	0	; select bank0
 15252  01E7  084E               	movf	?___fladd,w
 15253  01E8  0141               	movlb	1	; select bank1
 15254  01E9  00D4               	movwf	calcRequiredPower@T2^(0+128)
 15255                           
 15256                           ;main.c: 180:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15257  01EA  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 15258  01EB  0140               	movlb	0	; select bank0
 15259  01EC  00B7               	movwf	___flmul@b+3
 15260  01ED  0141               	movlb	1	; select bank1
 15261  01EE  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 15262  01EF  0140               	movlb	0	; select bank0
 15263  01F0  00B6               	movwf	___flmul@b+2
 15264  01F1  0141               	movlb	1	; select bank1
 15265  01F2  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 15266  01F3  0140               	movlb	0	; select bank0
 15267  01F4  00B5               	movwf	___flmul@b+1
 15268  01F5  0141               	movlb	1	; select bank1
 15269  01F6  0854               	movf	calcRequiredPower@T2^(0+128),w
 15270  01F7  0140               	movlb	0	; select bank0
 15271  01F8  00B4               	movwf	___flmul@b
 15272  01F9  0141               	movlb	1	; select bank1
 15273  01FA  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 15274  01FB  0140               	movlb	0	; select bank0
 15275  01FC  00BB               	movwf	___flmul@a+3
 15276  01FD  0141               	movlb	1	; select bank1
 15277  01FE  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 15278  01FF  0140               	movlb	0	; select bank0
 15279  0200  00BA               	movwf	___flmul@a+2
 15280  0201  0141               	movlb	1	; select bank1
 15281  0202  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 15282  0203  0140               	movlb	0	; select bank0
 15283  0204  00B9               	movwf	___flmul@a+1
 15284  0205  0141               	movlb	1	; select bank1
 15285  0206  0854               	movf	calcRequiredPower@T2^(0+128),w
 15286  0207  0140               	movlb	0	; select bank0
 15287  0208  00B8               	movwf	___flmul@a
 15288  0209  3185  2502  3180   	fcall	___flmul
 15289  020C  0140               	movlb	0	; select bank0
 15290  020D  0837               	movf	?___flmul+3,w
 15291  020E  0141               	movlb	1	; select bank1
 15292  020F  00CF               	movwf	(_calcRequiredPower$2137+3)^(0+128)
 15293  0210  0140               	movlb	0	; select bank0
 15294  0211  0836               	movf	?___flmul+2,w
 15295  0212  0141               	movlb	1	; select bank1
 15296  0213  00CE               	movwf	(_calcRequiredPower$2137+2)^(0+128)
 15297  0214  0140               	movlb	0	; select bank0
 15298  0215  0835               	movf	?___flmul+1,w
 15299  0216  0141               	movlb	1	; select bank1
 15300  0217  00CD               	movwf	(_calcRequiredPower$2137+1)^(0+128)
 15301  0218  0140               	movlb	0	; select bank0
 15302  0219  0834               	movf	?___flmul,w
 15303  021A  0141               	movlb	1	; select bank1
 15304  021B  00CC               	movwf	_calcRequiredPower$2137^(0+128)
 15305                           
 15306                           ;main.c: 180:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15307  021C  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 15308  021D  0140               	movlb	0	; select bank0
 15309  021E  00B7               	movwf	___flmul@b+3
 15310  021F  0141               	movlb	1	; select bank1
 15311  0220  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 15312  0221  0140               	movlb	0	; select bank0
 15313  0222  00B6               	movwf	___flmul@b+2
 15314  0223  0141               	movlb	1	; select bank1
 15315  0224  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 15316  0225  0140               	movlb	0	; select bank0
 15317  0226  00B5               	movwf	___flmul@b+1
 15318  0227  0141               	movlb	1	; select bank1
 15319  0228  0854               	movf	calcRequiredPower@T2^(0+128),w
 15320  0229  0140               	movlb	0	; select bank0
 15321  022A  00B4               	movwf	___flmul@b
 15322  022B  0141               	movlb	1	; select bank1
 15323  022C  084F               	movf	(_calcRequiredPower$2137+3)^(0+128),w
 15324  022D  0140               	movlb	0	; select bank0
 15325  022E  00BB               	movwf	___flmul@a+3
 15326  022F  0141               	movlb	1	; select bank1
 15327  0230  084E               	movf	(_calcRequiredPower$2137+2)^(0+128),w
 15328  0231  0140               	movlb	0	; select bank0
 15329  0232  00BA               	movwf	___flmul@a+2
 15330  0233  0141               	movlb	1	; select bank1
 15331  0234  084D               	movf	(_calcRequiredPower$2137+1)^(0+128),w
 15332  0235  0140               	movlb	0	; select bank0
 15333  0236  00B9               	movwf	___flmul@a+1
 15334  0237  0141               	movlb	1	; select bank1
 15335  0238  084C               	movf	_calcRequiredPower$2137^(0+128),w
 15336  0239  0140               	movlb	0	; select bank0
 15337  023A  00B8               	movwf	___flmul@a
 15338  023B  3185  2502  3180   	fcall	___flmul
 15339  023E  0140               	movlb	0	; select bank0
 15340  023F  0837               	movf	?___flmul+3,w
 15341  0240  0141               	movlb	1	; select bank1
 15342  0241  00AF               	movwf	(_calcRequiredPower$2139+3)^(0+128)
 15343  0242  0140               	movlb	0	; select bank0
 15344  0243  0836               	movf	?___flmul+2,w
 15345  0244  0141               	movlb	1	; select bank1
 15346  0245  00AE               	movwf	(_calcRequiredPower$2139+2)^(0+128)
 15347  0246  0140               	movlb	0	; select bank0
 15348  0247  0835               	movf	?___flmul+1,w
 15349  0248  0141               	movlb	1	; select bank1
 15350  0249  00AD               	movwf	(_calcRequiredPower$2139+1)^(0+128)
 15351  024A  0140               	movlb	0	; select bank0
 15352  024B  0834               	movf	?___flmul,w
 15353  024C  0141               	movlb	1	; select bank1
 15354  024D  00AC               	movwf	_calcRequiredPower$2139^(0+128)
 15355                           
 15356                           ;main.c: 180:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15357  024E  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 15358  024F  0140               	movlb	0	; select bank0
 15359  0250  00B7               	movwf	___flmul@b+3
 15360  0251  0141               	movlb	1	; select bank1
 15361  0252  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 15362  0253  0140               	movlb	0	; select bank0
 15363  0254  00B6               	movwf	___flmul@b+2
 15364  0255  0141               	movlb	1	; select bank1
 15365  0256  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 15366  0257  0140               	movlb	0	; select bank0
 15367  0258  00B5               	movwf	___flmul@b+1
 15368  0259  0141               	movlb	1	; select bank1
 15369  025A  0850               	movf	calcRequiredPower@T1^(0+128),w
 15370  025B  0140               	movlb	0	; select bank0
 15371  025C  00B4               	movwf	___flmul@b
 15372  025D  0141               	movlb	1	; select bank1
 15373  025E  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 15374  025F  0140               	movlb	0	; select bank0
 15375  0260  00BB               	movwf	___flmul@a+3
 15376  0261  0141               	movlb	1	; select bank1
 15377  0262  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 15378  0263  0140               	movlb	0	; select bank0
 15379  0264  00BA               	movwf	___flmul@a+2
 15380  0265  0141               	movlb	1	; select bank1
 15381  0266  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 15382  0267  0140               	movlb	0	; select bank0
 15383  0268  00B9               	movwf	___flmul@a+1
 15384  0269  0141               	movlb	1	; select bank1
 15385  026A  0850               	movf	calcRequiredPower@T1^(0+128),w
 15386  026B  0140               	movlb	0	; select bank0
 15387  026C  00B8               	movwf	___flmul@a
 15388  026D  3185  2502  3180   	fcall	___flmul
 15389  0270  0140               	movlb	0	; select bank0
 15390  0271  0837               	movf	?___flmul+3,w
 15391  0272  0141               	movlb	1	; select bank1
 15392  0273  00B3               	movwf	(_calcRequiredPower$2140+3)^(0+128)
 15393  0274  0140               	movlb	0	; select bank0
 15394  0275  0836               	movf	?___flmul+2,w
 15395  0276  0141               	movlb	1	; select bank1
 15396  0277  00B2               	movwf	(_calcRequiredPower$2140+2)^(0+128)
 15397  0278  0140               	movlb	0	; select bank0
 15398  0279  0835               	movf	?___flmul+1,w
 15399  027A  0141               	movlb	1	; select bank1
 15400  027B  00B1               	movwf	(_calcRequiredPower$2140+1)^(0+128)
 15401  027C  0140               	movlb	0	; select bank0
 15402  027D  0834               	movf	?___flmul,w
 15403  027E  0141               	movlb	1	; select bank1
 15404  027F  00B0               	movwf	_calcRequiredPower$2140^(0+128)
 15405                           
 15406                           ;main.c: 180:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15407  0280  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 15408  0281  0140               	movlb	0	; select bank0
 15409  0282  00B7               	movwf	___flmul@b+3
 15410  0283  0141               	movlb	1	; select bank1
 15411  0284  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 15412  0285  0140               	movlb	0	; select bank0
 15413  0286  00B6               	movwf	___flmul@b+2
 15414  0287  0141               	movlb	1	; select bank1
 15415  0288  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 15416  0289  0140               	movlb	0	; select bank0
 15417  028A  00B5               	movwf	___flmul@b+1
 15418  028B  0141               	movlb	1	; select bank1
 15419  028C  0850               	movf	calcRequiredPower@T1^(0+128),w
 15420  028D  0140               	movlb	0	; select bank0
 15421  028E  00B4               	movwf	___flmul@b
 15422  028F  0141               	movlb	1	; select bank1
 15423  0290  0833               	movf	(_calcRequiredPower$2140+3)^(0+128),w
 15424  0291  0140               	movlb	0	; select bank0
 15425  0292  00BB               	movwf	___flmul@a+3
 15426  0293  0141               	movlb	1	; select bank1
 15427  0294  0832               	movf	(_calcRequiredPower$2140+2)^(0+128),w
 15428  0295  0140               	movlb	0	; select bank0
 15429  0296  00BA               	movwf	___flmul@a+2
 15430  0297  0141               	movlb	1	; select bank1
 15431  0298  0831               	movf	(_calcRequiredPower$2140+1)^(0+128),w
 15432  0299  0140               	movlb	0	; select bank0
 15433  029A  00B9               	movwf	___flmul@a+1
 15434  029B  0141               	movlb	1	; select bank1
 15435  029C  0830               	movf	_calcRequiredPower$2140^(0+128),w
 15436  029D  0140               	movlb	0	; select bank0
 15437  029E  00B8               	movwf	___flmul@a
 15438  029F  3185  2502  3180   	fcall	___flmul
 15439  02A2  0140               	movlb	0	; select bank0
 15440  02A3  0837               	movf	?___flmul+3,w
 15441  02A4  0141               	movlb	1	; select bank1
 15442  02A5  00B7               	movwf	(_calcRequiredPower$2141+3)^(0+128)
 15443  02A6  0140               	movlb	0	; select bank0
 15444  02A7  0836               	movf	?___flmul+2,w
 15445  02A8  0141               	movlb	1	; select bank1
 15446  02A9  00B6               	movwf	(_calcRequiredPower$2141+2)^(0+128)
 15447  02AA  0140               	movlb	0	; select bank0
 15448  02AB  0835               	movf	?___flmul+1,w
 15449  02AC  0141               	movlb	1	; select bank1
 15450  02AD  00B5               	movwf	(_calcRequiredPower$2141+1)^(0+128)
 15451  02AE  0140               	movlb	0	; select bank0
 15452  02AF  0834               	movf	?___flmul,w
 15453  02B0  0141               	movlb	1	; select bank1
 15454  02B1  00B4               	movwf	_calcRequiredPower$2141^(0+128)
 15455                           
 15456                           ;main.c: 180:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15457  02B2  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 15458  02B3  0140               	movlb	0	; select bank0
 15459  02B4  00B7               	movwf	___flmul@b+3
 15460  02B5  0141               	movlb	1	; select bank1
 15461  02B6  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 15462  02B7  0140               	movlb	0	; select bank0
 15463  02B8  00B6               	movwf	___flmul@b+2
 15464  02B9  0141               	movlb	1	; select bank1
 15465  02BA  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 15466  02BB  0140               	movlb	0	; select bank0
 15467  02BC  00B5               	movwf	___flmul@b+1
 15468  02BD  0141               	movlb	1	; select bank1
 15469  02BE  0854               	movf	calcRequiredPower@T2^(0+128),w
 15470  02BF  0140               	movlb	0	; select bank0
 15471  02C0  00B4               	movwf	___flmul@b
 15472  02C1  0141               	movlb	1	; select bank1
 15473  02C2  082F               	movf	(_calcRequiredPower$2139+3)^(0+128),w
 15474  02C3  0140               	movlb	0	; select bank0
 15475  02C4  00BB               	movwf	___flmul@a+3
 15476  02C5  0141               	movlb	1	; select bank1
 15477  02C6  082E               	movf	(_calcRequiredPower$2139+2)^(0+128),w
 15478  02C7  0140               	movlb	0	; select bank0
 15479  02C8  00BA               	movwf	___flmul@a+2
 15480  02C9  0141               	movlb	1	; select bank1
 15481  02CA  082D               	movf	(_calcRequiredPower$2139+1)^(0+128),w
 15482  02CB  0140               	movlb	0	; select bank0
 15483  02CC  00B9               	movwf	___flmul@a+1
 15484  02CD  0141               	movlb	1	; select bank1
 15485  02CE  082C               	movf	_calcRequiredPower$2139^(0+128),w
 15486  02CF  0140               	movlb	0	; select bank0
 15487  02D0  00B8               	movwf	___flmul@a
 15488  02D1  3185  2502  3180   	fcall	___flmul
 15489  02D4  0140               	movlb	0	; select bank0
 15490  02D5  0837               	movf	?___flmul+3,w
 15491  02D6  00E5               	movwf	___flsub@a+3
 15492  02D7  0836               	movf	?___flmul+2,w
 15493  02D8  00E4               	movwf	___flsub@a+2
 15494  02D9  0835               	movf	?___flmul+1,w
 15495  02DA  00E3               	movwf	___flsub@a+1
 15496  02DB  0834               	movf	?___flmul,w
 15497  02DC  00E2               	movwf	___flsub@a
 15498  02DD  0141               	movlb	1	; select bank1
 15499  02DE  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 15500  02DF  0140               	movlb	0	; select bank0
 15501  02E0  00B7               	movwf	___flmul@b+3
 15502  02E1  0141               	movlb	1	; select bank1
 15503  02E2  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 15504  02E3  0140               	movlb	0	; select bank0
 15505  02E4  00B6               	movwf	___flmul@b+2
 15506  02E5  0141               	movlb	1	; select bank1
 15507  02E6  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 15508  02E7  0140               	movlb	0	; select bank0
 15509  02E8  00B5               	movwf	___flmul@b+1
 15510  02E9  0141               	movlb	1	; select bank1
 15511  02EA  0850               	movf	calcRequiredPower@T1^(0+128),w
 15512  02EB  0140               	movlb	0	; select bank0
 15513  02EC  00B4               	movwf	___flmul@b
 15514  02ED  0141               	movlb	1	; select bank1
 15515  02EE  0837               	movf	(_calcRequiredPower$2141+3)^(0+128),w
 15516  02EF  0140               	movlb	0	; select bank0
 15517  02F0  00BB               	movwf	___flmul@a+3
 15518  02F1  0141               	movlb	1	; select bank1
 15519  02F2  0836               	movf	(_calcRequiredPower$2141+2)^(0+128),w
 15520  02F3  0140               	movlb	0	; select bank0
 15521  02F4  00BA               	movwf	___flmul@a+2
 15522  02F5  0141               	movlb	1	; select bank1
 15523  02F6  0835               	movf	(_calcRequiredPower$2141+1)^(0+128),w
 15524  02F7  0140               	movlb	0	; select bank0
 15525  02F8  00B9               	movwf	___flmul@a+1
 15526  02F9  0141               	movlb	1	; select bank1
 15527  02FA  0834               	movf	_calcRequiredPower$2141^(0+128),w
 15528  02FB  0140               	movlb	0	; select bank0
 15529  02FC  00B8               	movwf	___flmul@a
 15530  02FD  3185  2502  3180   	fcall	___flmul
 15531  0300  0140               	movlb	0	; select bank0
 15532  0301  0837               	movf	?___flmul+3,w
 15533  0302  00E9               	movwf	___flsub@b+3
 15534  0303  0836               	movf	?___flmul+2,w
 15535  0304  00E8               	movwf	___flsub@b+2
 15536  0305  0835               	movf	?___flmul+1,w
 15537  0306  00E7               	movwf	___flsub@b+1
 15538  0307  0834               	movf	?___flmul,w
 15539  0308  00E6               	movwf	___flsub@b
 15540  0309  31A2  2261  3180   	fcall	___flsub
 15541  030C  0140               	movlb	0	; select bank0
 15542  030D  0865               	movf	?___flsub+3,w
 15543  030E  0141               	movlb	1	; select bank1
 15544  030F  00BB               	movwf	(_calcRequiredPower$2142+3)^(0+128)
 15545  0310  0140               	movlb	0	; select bank0
 15546  0311  0864               	movf	?___flsub+2,w
 15547  0312  0141               	movlb	1	; select bank1
 15548  0313  00BA               	movwf	(_calcRequiredPower$2142+2)^(0+128)
 15549  0314  0140               	movlb	0	; select bank0
 15550  0315  0863               	movf	?___flsub+1,w
 15551  0316  0141               	movlb	1	; select bank1
 15552  0317  00B9               	movwf	(_calcRequiredPower$2142+1)^(0+128)
 15553  0318  0140               	movlb	0	; select bank0
 15554  0319  0862               	movf	?___flsub,w
 15555  031A  0141               	movlb	1	; select bank1
 15556  031B  00B8               	movwf	_calcRequiredPower$2142^(0+128)
 15557                           
 15558                           ;main.c: 180:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15559  031C  3033               	movlw	51
 15560  031D  0140               	movlb	0	; select bank0
 15561  031E  00B7               	movwf	___flmul@b+3
 15562  031F  3067               	movlw	103
 15563  0320  00B6               	movwf	___flmul@b+2
 15564  0321  3059               	movlw	89
 15565  0322  00B5               	movwf	___flmul@b+1
 15566  0323  3032               	movlw	50
 15567  0324  00B4               	movwf	___flmul@b
 15568  0325  0141               	movlb	1	; select bank1
 15569  0326  084B               	movf	(calcRequiredPower@A+3)^(0+128),w
 15570  0327  0140               	movlb	0	; select bank0
 15571  0328  00BB               	movwf	___flmul@a+3
 15572  0329  0141               	movlb	1	; select bank1
 15573  032A  084A               	movf	(calcRequiredPower@A+2)^(0+128),w
 15574  032B  0140               	movlb	0	; select bank0
 15575  032C  00BA               	movwf	___flmul@a+2
 15576  032D  0141               	movlb	1	; select bank1
 15577  032E  0849               	movf	(calcRequiredPower@A+1)^(0+128),w
 15578  032F  0140               	movlb	0	; select bank0
 15579  0330  00B9               	movwf	___flmul@a+1
 15580  0331  0141               	movlb	1	; select bank1
 15581  0332  0848               	movf	calcRequiredPower@A^(0+128),w
 15582  0333  0140               	movlb	0	; select bank0
 15583  0334  00B8               	movwf	___flmul@a
 15584  0335  3185  2502  3180   	fcall	___flmul
 15585  0338  0140               	movlb	0	; select bank0
 15586  0339  0837               	movf	?___flmul+3,w
 15587  033A  0141               	movlb	1	; select bank1
 15588  033B  00BF               	movwf	(_calcRequiredPower$2143+3)^(0+128)
 15589  033C  0140               	movlb	0	; select bank0
 15590  033D  0836               	movf	?___flmul+2,w
 15591  033E  0141               	movlb	1	; select bank1
 15592  033F  00BE               	movwf	(_calcRequiredPower$2143+2)^(0+128)
 15593  0340  0140               	movlb	0	; select bank0
 15594  0341  0835               	movf	?___flmul+1,w
 15595  0342  0141               	movlb	1	; select bank1
 15596  0343  00BD               	movwf	(_calcRequiredPower$2143+1)^(0+128)
 15597  0344  0140               	movlb	0	; select bank0
 15598  0345  0834               	movf	?___flmul,w
 15599  0346  0141               	movlb	1	; select bank1
 15600  0347  00BC               	movwf	_calcRequiredPower$2143^(0+128)
 15601                           
 15602                           ;main.c: 180:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15603  0348  083B               	movf	(_calcRequiredPower$2142+3)^(0+128),w
 15604  0349  0140               	movlb	0	; select bank0
 15605  034A  00B7               	movwf	___flmul@b+3
 15606  034B  0141               	movlb	1	; select bank1
 15607  034C  083A               	movf	(_calcRequiredPower$2142+2)^(0+128),w
 15608  034D  0140               	movlb	0	; select bank0
 15609  034E  00B6               	movwf	___flmul@b+2
 15610  034F  0141               	movlb	1	; select bank1
 15611  0350  0839               	movf	(_calcRequiredPower$2142+1)^(0+128),w
 15612  0351  0140               	movlb	0	; select bank0
 15613  0352  00B5               	movwf	___flmul@b+1
 15614  0353  0141               	movlb	1	; select bank1
 15615  0354  0838               	movf	_calcRequiredPower$2142^(0+128),w
 15616  0355  0140               	movlb	0	; select bank0
 15617  0356  00B4               	movwf	___flmul@b
 15618  0357  0141               	movlb	1	; select bank1
 15619  0358  083F               	movf	(_calcRequiredPower$2143+3)^(0+128),w
 15620  0359  0140               	movlb	0	; select bank0
 15621  035A  00BB               	movwf	___flmul@a+3
 15622  035B  0141               	movlb	1	; select bank1
 15623  035C  083E               	movf	(_calcRequiredPower$2143+2)^(0+128),w
 15624  035D  0140               	movlb	0	; select bank0
 15625  035E  00BA               	movwf	___flmul@a+2
 15626  035F  0141               	movlb	1	; select bank1
 15627  0360  083D               	movf	(_calcRequiredPower$2143+1)^(0+128),w
 15628  0361  0140               	movlb	0	; select bank0
 15629  0362  00B9               	movwf	___flmul@a+1
 15630  0363  0141               	movlb	1	; select bank1
 15631  0364  083C               	movf	_calcRequiredPower$2143^(0+128),w
 15632  0365  0140               	movlb	0	; select bank0
 15633  0366  00B8               	movwf	___flmul@a
 15634  0367  3185  2502  3180   	fcall	___flmul
 15635  036A  0140               	movlb	0	; select bank0
 15636  036B  0837               	movf	?___flmul+3,w
 15637  036C  0141               	movlb	1	; select bank1
 15638  036D  00C7               	movwf	(calcRequiredPower@phi+3)^(0+128)
 15639  036E  0140               	movlb	0	; select bank0
 15640  036F  0836               	movf	?___flmul+2,w
 15641  0370  0141               	movlb	1	; select bank1
 15642  0371  00C6               	movwf	(calcRequiredPower@phi+2)^(0+128)
 15643  0372  0140               	movlb	0	; select bank0
 15644  0373  0835               	movf	?___flmul+1,w
 15645  0374  0141               	movlb	1	; select bank1
 15646  0375  00C5               	movwf	(calcRequiredPower@phi+1)^(0+128)
 15647  0376  0140               	movlb	0	; select bank0
 15648  0377  0834               	movf	?___flmul,w
 15649  0378  0141               	movlb	1	; select bank1
 15650  0379  00C4               	movwf	calcRequiredPower@phi^(0+128)
 15651                           
 15652                           ;main.c: 182:   data->chData[n].Preq = phi * data->fudgeFactor;
 15653  037A  0847               	movf	(calcRequiredPower@phi+3)^(0+128),w
 15654  037B  0140               	movlb	0	; select bank0
 15655  037C  00B7               	movwf	___flmul@b+3
 15656  037D  0141               	movlb	1	; select bank1
 15657  037E  0846               	movf	(calcRequiredPower@phi+2)^(0+128),w
 15658  037F  0140               	movlb	0	; select bank0
 15659  0380  00B6               	movwf	___flmul@b+2
 15660  0381  0141               	movlb	1	; select bank1
 15661  0382  0845               	movf	(calcRequiredPower@phi+1)^(0+128),w
 15662  0383  0140               	movlb	0	; select bank0
 15663  0384  00B5               	movwf	___flmul@b+1
 15664  0385  0141               	movlb	1	; select bank1
 15665  0386  0844               	movf	calcRequiredPower@phi^(0+128),w
 15666  0387  0140               	movlb	0	; select bank0
 15667  0388  00B4               	movwf	___flmul@b
 15668  0389  086A               	movf	calcRequiredPower@data,w
 15669  038A  3E28               	addlw	40
 15670  038B  0086               	movwf	6
 15671  038C  3000               	movlw	0
 15672  038D  3D6B               	addwfc	calcRequiredPower@data+1,w
 15673  038E  0087               	movwf	7
 15674  038F  3F40               	moviw [0]fsr1
 15675  0390  00B8               	movwf	___flmul@a
 15676  0391  3F41               	moviw [1]fsr1
 15677  0392  00B9               	movwf	___flmul@a+1
 15678  0393  3F42               	moviw [2]fsr1
 15679  0394  00BA               	movwf	___flmul@a+2
 15680  0395  3F43               	moviw [3]fsr1
 15681  0396  00BB               	movwf	___flmul@a+3
 15682  0397  3185  2502  3180   	fcall	___flmul
 15683  039A  0141               	movlb	1	; select bank1
 15684  039B  0858               	movf	calcRequiredPower@n^(0+128),w
 15685  039C  0140               	movlb	0	; select bank0
 15686  039D  00EC               	movwf	??_calcRequiredPower
 15687  039E  01ED               	clrf	??_calcRequiredPower+1
 15688  039F  3005               	movlw	5
 15689  03A0                     u5575:	
 15690  03A0  35EC               	lslf	??_calcRequiredPower,f
 15691  03A1  0DED               	rlf	??_calcRequiredPower+1,f
 15692  03A2  0B89               	decfsz	9,f
 15693  03A3  2BA0               	goto	u5575
 15694  03A4  086C               	movf	??_calcRequiredPower,w
 15695  03A5  076A               	addwf	calcRequiredPower@data,w
 15696  03A6  00EE               	movwf	??_calcRequiredPower+2
 15697  03A7  086D               	movf	??_calcRequiredPower+1,w
 15698  03A8  3D6B               	addwfc	calcRequiredPower@data+1,w
 15699  03A9  00EF               	movwf	??_calcRequiredPower+3
 15700  03AA  086E               	movf	??_calcRequiredPower+2,w
 15701  03AB  3E35               	addlw	53
 15702  03AC  0086               	movwf	6
 15703  03AD  3000               	movlw	0
 15704  03AE  3D6F               	addwfc	??_calcRequiredPower+3,w
 15705  03AF  0087               	movwf	7
 15706  03B0  0834               	movf	?___flmul,w
 15707  03B1  3FC0               	movwi [0]fsr1
 15708  03B2  0835               	movf	?___flmul+1,w
 15709  03B3  3FC1               	movwi [1]fsr1
 15710  03B4  0836               	movf	?___flmul+2,w
 15711  03B5  3FC2               	movwi [2]fsr1
 15712  03B6  0837               	movf	?___flmul+3,w
 15713  03B7  3FC3               	movwi [3]fsr1
 15714                           
 15715                           ;main.c: 185:   p = 2 * 3.14 * 0.0254 * data->chData[n].lensDia;
 15716  03B8  303E               	movlw	62
 15717  03B9  00B7               	movwf	___flmul@b+3
 15718  03BA  3023               	movlw	35
 15719  03BB  00B6               	movwf	___flmul@b+2
 15720  03BC  3057               	movlw	87
 15721  03BD  00B5               	movwf	___flmul@b+1
 15722  03BE  301D               	movlw	29
 15723  03BF  00B4               	movwf	___flmul@b
 15724  03C0  0141               	movlb	1	; select bank1
 15725  03C1  0858               	movf	calcRequiredPower@n^(0+128),w
 15726  03C2  0140               	movlb	0	; select bank0
 15727  03C3  00EC               	movwf	??_calcRequiredPower
 15728  03C4  01ED               	clrf	??_calcRequiredPower+1
 15729  03C5  3005               	movlw	5
 15730  03C6                     u5585:	
 15731  03C6  35EC               	lslf	??_calcRequiredPower,f
 15732  03C7  0DED               	rlf	??_calcRequiredPower+1,f
 15733  03C8  0B89               	decfsz	9,f
 15734  03C9  2BC6               	goto	u5585
 15735  03CA  086C               	movf	??_calcRequiredPower,w
 15736  03CB  076A               	addwf	calcRequiredPower@data,w
 15737  03CC  00EE               	movwf	??_calcRequiredPower+2
 15738  03CD  086D               	movf	??_calcRequiredPower+1,w
 15739  03CE  3D6B               	addwfc	calcRequiredPower@data+1,w
 15740  03CF  00EF               	movwf	??_calcRequiredPower+3
 15741  03D0  086E               	movf	??_calcRequiredPower+2,w
 15742  03D1  3E43               	addlw	67
 15743  03D2  0086               	movwf	6
 15744  03D3  3000               	movlw	0
 15745  03D4  3D6F               	addwfc	??_calcRequiredPower+3,w
 15746  03D5  0087               	movwf	7
 15747  03D6  3F40               	moviw [0]fsr1
 15748  03D7  00B8               	movwf	___flmul@a
 15749  03D8  3F41               	moviw [1]fsr1
 15750  03D9  00B9               	movwf	___flmul@a+1
 15751  03DA  3F42               	moviw [2]fsr1
 15752  03DB  00BA               	movwf	___flmul@a+2
 15753  03DC  3F43               	moviw [3]fsr1
 15754  03DD  00BB               	movwf	___flmul@a+3
 15755  03DE  3185  2502  3180   	fcall	___flmul
 15756  03E1  0140               	movlb	0	; select bank0
 15757  03E2  0837               	movf	?___flmul+3,w
 15758  03E3  0141               	movlb	1	; select bank1
 15759  03E4  00A3               	movwf	(calcRequiredPower@p+3)^(0+128)
 15760  03E5  0140               	movlb	0	; select bank0
 15761  03E6  0836               	movf	?___flmul+2,w
 15762  03E7  0141               	movlb	1	; select bank1
 15763  03E8  00A2               	movwf	(calcRequiredPower@p+2)^(0+128)
 15764  03E9  0140               	movlb	0	; select bank0
 15765  03EA  0835               	movf	?___flmul+1,w
 15766  03EB  0141               	movlb	1	; select bank1
 15767  03EC  00A1               	movwf	(calcRequiredPower@p+1)^(0+128)
 15768  03ED  0140               	movlb	0	; select bank0
 15769  03EE  0834               	movf	?___flmul,w
 15770  03EF  0141               	movlb	1	; select bank1
 15771  03F0  00A0               	movwf	calcRequiredPower@p^(0+128)
 15772                           
 15773                           ;main.c: 186:   A = p * 0.03;
 15774  03F1  303C               	movlw	60
 15775  03F2  0140               	movlb	0	; select bank0
 15776  03F3  00B7               	movwf	___flmul@b+3
 15777  03F4  30F5               	movlw	245
 15778  03F5  00B6               	movwf	___flmul@b+2
 15779  03F6  30C2               	movlw	194
 15780  03F7  00B5               	movwf	___flmul@b+1
 15781  03F8  308F               	movlw	143
 15782  03F9  00B4               	movwf	___flmul@b
 15783  03FA  0141               	movlb	1	; select bank1
 15784  03FB  0823               	movf	(calcRequiredPower@p+3)^(0+128),w
 15785  03FC  0140               	movlb	0	; select bank0
 15786  03FD  00BB               	movwf	___flmul@a+3
 15787  03FE  0141               	movlb	1	; select bank1
 15788  03FF  0822               	movf	(calcRequiredPower@p+2)^(0+128),w
 15789  0400  0140               	movlb	0	; select bank0
 15790  0401  00BA               	movwf	___flmul@a+2
 15791  0402  0141               	movlb	1	; select bank1
 15792  0403  0821               	movf	(calcRequiredPower@p+1)^(0+128),w
 15793  0404  0140               	movlb	0	; select bank0
 15794  0405  00B9               	movwf	___flmul@a+1
 15795  0406  0141               	movlb	1	; select bank1
 15796  0407  0820               	movf	calcRequiredPower@p^(0+128),w
 15797  0408  0140               	movlb	0	; select bank0
 15798  0409  00B8               	movwf	___flmul@a
 15799  040A  3185  2502  3180   	fcall	___flmul
 15800  040D  0140               	movlb	0	; select bank0
 15801  040E  0837               	movf	?___flmul+3,w
 15802  040F  0141               	movlb	1	; select bank1
 15803  0410  00CB               	movwf	(calcRequiredPower@A+3)^(0+128)
 15804  0411  0140               	movlb	0	; select bank0
 15805  0412  0836               	movf	?___flmul+2,w
 15806  0413  0141               	movlb	1	; select bank1
 15807  0414  00CA               	movwf	(calcRequiredPower@A+2)^(0+128)
 15808  0415  0140               	movlb	0	; select bank0
 15809  0416  0835               	movf	?___flmul+1,w
 15810  0417  0141               	movlb	1	; select bank1
 15811  0418  00C9               	movwf	(calcRequiredPower@A+1)^(0+128)
 15812  0419  0140               	movlb	0	; select bank0
 15813  041A  0834               	movf	?___flmul,w
 15814  041B  0141               	movlb	1	; select bank1
 15815  041C  00C8               	movwf	calcRequiredPower@A^(0+128)
 15816                           
 15817                           ;main.c: 188:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 15818  041D  303F               	movlw	63
 15819  041E  0140               	movlb	0	; select bank0
 15820  041F  00B7               	movwf	___flmul@b+3
 15821  0420  3059               	movlw	89
 15822  0421  00B6               	movwf	___flmul@b+2
 15823  0422  3099               	movlw	153
 15824  0423  00B5               	movwf	___flmul@b+1
 15825  0424  309A               	movlw	154
 15826  0425  00B4               	movwf	___flmul@b
 15827  0426  3040               	movlw	64
 15828  0427  00D1               	movwf	___fldiv@a+3
 15829  0428  3000               	movlw	0
 15830  0429  00D0               	movwf	___fldiv@a+2
 15831  042A  3000               	movlw	0
 15832  042B  00CF               	movwf	___fldiv@a+1
 15833  042C  3000               	movlw	0
 15834  042D  00CE               	movwf	___fldiv@a
 15835  042E  0141               	movlb	1	; select bank1
 15836  042F  0858               	movf	calcRequiredPower@n^(0+128),w
 15837  0430  0140               	movlb	0	; select bank0
 15838  0431  00EC               	movwf	??_calcRequiredPower
 15839  0432  01ED               	clrf	??_calcRequiredPower+1
 15840  0433  3005               	movlw	5
 15841  0434                     u5595:	
 15842  0434  35EC               	lslf	??_calcRequiredPower,f
 15843  0435  0DED               	rlf	??_calcRequiredPower+1,f
 15844  0436  0B89               	decfsz	9,f
 15845  0437  2C34               	goto	u5595
 15846  0438  086C               	movf	??_calcRequiredPower,w
 15847  0439  076A               	addwf	calcRequiredPower@data,w
 15848  043A  00EE               	movwf	??_calcRequiredPower+2
 15849  043B  086D               	movf	??_calcRequiredPower+1,w
 15850  043C  3D6B               	addwfc	calcRequiredPower@data+1,w
 15851  043D  00EF               	movwf	??_calcRequiredPower+3
 15852  043E  086E               	movf	??_calcRequiredPower+2,w
 15853  043F  3E43               	addlw	67
 15854  0440  0086               	movwf	6
 15855  0441  3000               	movlw	0
 15856  0442  3D6F               	addwfc	??_calcRequiredPower+3,w
 15857  0443  0087               	movwf	7
 15858  0444  3F40               	moviw [0]fsr1
 15859  0445  00D2               	movwf	___fldiv@b
 15860  0446  3F41               	moviw [1]fsr1
 15861  0447  00D3               	movwf	___fldiv@b+1
 15862  0448  3F42               	moviw [2]fsr1
 15863  0449  00D4               	movwf	___fldiv@b+2
 15864  044A  3F43               	moviw [3]fsr1
 15865  044B  00D5               	movwf	___fldiv@b+3
 15866  044C  3193  2374  3180   	fcall	___fldiv
 15867  044F  0140               	movlb	0	; select bank0
 15868  0450  0851               	movf	?___fldiv+3,w
 15869  0451  00BB               	movwf	___flmul@a+3
 15870  0452  0850               	movf	?___fldiv+2,w
 15871  0453  00BA               	movwf	___flmul@a+2
 15872  0454  084F               	movf	?___fldiv+1,w
 15873  0455  00B9               	movwf	___flmul@a+1
 15874  0456  084E               	movf	?___fldiv,w
 15875  0457  00B8               	movwf	___flmul@a
 15876  0458  3185  2502  3180   	fcall	___flmul
 15877  045B  0140               	movlb	0	; select bank0
 15878  045C  0837               	movf	?___flmul+3,w
 15879  045D  0141               	movlb	1	; select bank1
 15880  045E  00CF               	movwf	(_calcRequiredPower$2137+3)^(0+128)
 15881  045F  0140               	movlb	0	; select bank0
 15882  0460  0836               	movf	?___flmul+2,w
 15883  0461  0141               	movlb	1	; select bank1
 15884  0462  00CE               	movwf	(_calcRequiredPower$2137+2)^(0+128)
 15885  0463  0140               	movlb	0	; select bank0
 15886  0464  0835               	movf	?___flmul+1,w
 15887  0465  0141               	movlb	1	; select bank1
 15888  0466  00CD               	movwf	(_calcRequiredPower$2137+1)^(0+128)
 15889  0467  0140               	movlb	0	; select bank0
 15890  0468  0834               	movf	?___flmul,w
 15891  0469  0141               	movlb	1	; select bank1
 15892  046A  00CC               	movwf	_calcRequiredPower$2137^(0+128)
 15893                           
 15894                           ;main.c: 188:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 15895  046B  084B               	movf	(calcRequiredPower@A+3)^(0+128),w
 15896  046C  0140               	movlb	0	; select bank0
 15897  046D  00B7               	movwf	___flmul@b+3
 15898  046E  0141               	movlb	1	; select bank1
 15899  046F  084A               	movf	(calcRequiredPower@A+2)^(0+128),w
 15900  0470  0140               	movlb	0	; select bank0
 15901  0471  00B6               	movwf	___flmul@b+2
 15902  0472  0141               	movlb	1	; select bank1
 15903  0473  0849               	movf	(calcRequiredPower@A+1)^(0+128),w
 15904  0474  0140               	movlb	0	; select bank0
 15905  0475  00B5               	movwf	___flmul@b+1
 15906  0476  0141               	movlb	1	; select bank1
 15907  0477  0848               	movf	calcRequiredPower@A^(0+128),w
 15908  0478  0140               	movlb	0	; select bank0
 15909  0479  00B4               	movwf	___flmul@b
 15910  047A  0141               	movlb	1	; select bank1
 15911  047B  084F               	movf	(_calcRequiredPower$2137+3)^(0+128),w
 15912  047C  0140               	movlb	0	; select bank0
 15913  047D  00BB               	movwf	___flmul@a+3
 15914  047E  0141               	movlb	1	; select bank1
 15915  047F  084E               	movf	(_calcRequiredPower$2137+2)^(0+128),w
 15916  0480  0140               	movlb	0	; select bank0
 15917  0481  00BA               	movwf	___flmul@a+2
 15918  0482  0141               	movlb	1	; select bank1
 15919  0483  084D               	movf	(_calcRequiredPower$2137+1)^(0+128),w
 15920  0484  0140               	movlb	0	; select bank0
 15921  0485  00B9               	movwf	___flmul@a+1
 15922  0486  0141               	movlb	1	; select bank1
 15923  0487  084C               	movf	_calcRequiredPower$2137^(0+128),w
 15924  0488  0140               	movlb	0	; select bank0
 15925  0489  00B8               	movwf	___flmul@a
 15926  048A  3185  2502  3180   	fcall	___flmul
 15927  048D  0140               	movlb	0	; select bank0
 15928  048E  0837               	movf	?___flmul+3,w
 15929  048F  0141               	movlb	1	; select bank1
 15930  0490  00A7               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 15931  0491  0140               	movlb	0	; select bank0
 15932  0492  0836               	movf	?___flmul+2,w
 15933  0493  0141               	movlb	1	; select bank1
 15934  0494  00A6               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 15935  0495  0140               	movlb	0	; select bank0
 15936  0496  0835               	movf	?___flmul+1,w
 15937  0497  0141               	movlb	1	; select bank1
 15938  0498  00A5               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 15939  0499  0140               	movlb	0	; select bank0
 15940  049A  0834               	movf	?___flmul,w
 15941  049B  0141               	movlb	1	; select bank1
 15942  049C  00A4               	movwf	calcRequiredPower@Rth^(0+128)
 15943                           
 15944                           ;main.c: 190:   data->chData[n].dt = phi * Rth - data->dewPointC;
 15945  049D  0140               	movlb	0	; select bank0
 15946  049E  086A               	movf	calcRequiredPower@data,w
 15947  049F  0086               	movwf	6
 15948  04A0  086B               	movf	calcRequiredPower@data+1,w
 15949  04A1  0087               	movwf	7
 15950  04A2  3148               	addfsr 1,8
 15951  04A3  3F40               	moviw [0]fsr1
 15952  04A4  00E2               	movwf	___flsub@a
 15953  04A5  3F41               	moviw [1]fsr1
 15954  04A6  00E3               	movwf	___flsub@a+1
 15955  04A7  3F42               	moviw [2]fsr1
 15956  04A8  00E4               	movwf	___flsub@a+2
 15957  04A9  3F43               	moviw [3]fsr1
 15958  04AA  00E5               	movwf	___flsub@a+3
 15959  04AB  0141               	movlb	1	; select bank1
 15960  04AC  0827               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 15961  04AD  0140               	movlb	0	; select bank0
 15962  04AE  00B7               	movwf	___flmul@b+3
 15963  04AF  0141               	movlb	1	; select bank1
 15964  04B0  0826               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 15965  04B1  0140               	movlb	0	; select bank0
 15966  04B2  00B6               	movwf	___flmul@b+2
 15967  04B3  0141               	movlb	1	; select bank1
 15968  04B4  0825               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 15969  04B5  0140               	movlb	0	; select bank0
 15970  04B6  00B5               	movwf	___flmul@b+1
 15971  04B7  0141               	movlb	1	; select bank1
 15972  04B8  0824               	movf	calcRequiredPower@Rth^(0+128),w
 15973  04B9  0140               	movlb	0	; select bank0
 15974  04BA  00B4               	movwf	___flmul@b
 15975  04BB  0141               	movlb	1	; select bank1
 15976  04BC  0847               	movf	(calcRequiredPower@phi+3)^(0+128),w
 15977  04BD  0140               	movlb	0	; select bank0
 15978  04BE  00BB               	movwf	___flmul@a+3
 15979  04BF  0141               	movlb	1	; select bank1
 15980  04C0  0846               	movf	(calcRequiredPower@phi+2)^(0+128),w
 15981  04C1  0140               	movlb	0	; select bank0
 15982  04C2  00BA               	movwf	___flmul@a+2
 15983  04C3  0141               	movlb	1	; select bank1
 15984  04C4  0845               	movf	(calcRequiredPower@phi+1)^(0+128),w
 15985  04C5  0140               	movlb	0	; select bank0
 15986  04C6  00B9               	movwf	___flmul@a+1
 15987  04C7  0141               	movlb	1	; select bank1
 15988  04C8  0844               	movf	calcRequiredPower@phi^(0+128),w
 15989  04C9  0140               	movlb	0	; select bank0
 15990  04CA  00B8               	movwf	___flmul@a
 15991  04CB  3185  2502  3180   	fcall	___flmul
 15992  04CE  0140               	movlb	0	; select bank0
 15993  04CF  0837               	movf	?___flmul+3,w
 15994  04D0  00E9               	movwf	___flsub@b+3
 15995  04D1  0836               	movf	?___flmul+2,w
 15996  04D2  00E8               	movwf	___flsub@b+2
 15997  04D3  0835               	movf	?___flmul+1,w
 15998  04D4  00E7               	movwf	___flsub@b+1
 15999  04D5  0834               	movf	?___flmul,w
 16000  04D6  00E6               	movwf	___flsub@b
 16001  04D7  31A2  2261  3180   	fcall	___flsub
 16002  04DA  0141               	movlb	1	; select bank1
 16003  04DB  0858               	movf	calcRequiredPower@n^(0+128),w
 16004  04DC  0140               	movlb	0	; select bank0
 16005  04DD  00EC               	movwf	??_calcRequiredPower
 16006  04DE  01ED               	clrf	??_calcRequiredPower+1
 16007  04DF  3005               	movlw	5
 16008  04E0                     u5605:	
 16009  04E0  35EC               	lslf	??_calcRequiredPower,f
 16010  04E1  0DED               	rlf	??_calcRequiredPower+1,f
 16011  04E2  0B89               	decfsz	9,f
 16012  04E3  2CE0               	goto	u5605
 16013  04E4  086C               	movf	??_calcRequiredPower,w
 16014  04E5  076A               	addwf	calcRequiredPower@data,w
 16015  04E6  00EE               	movwf	??_calcRequiredPower+2
 16016  04E7  086D               	movf	??_calcRequiredPower+1,w
 16017  04E8  3D6B               	addwfc	calcRequiredPower@data+1,w
 16018  04E9  00EF               	movwf	??_calcRequiredPower+3
 16019  04EA  086E               	movf	??_calcRequiredPower+2,w
 16020  04EB  3E47               	addlw	71
 16021  04EC  0086               	movwf	6
 16022  04ED  3000               	movlw	0
 16023  04EE  3D6F               	addwfc	??_calcRequiredPower+3,w
 16024  04EF  0087               	movwf	7
 16025  04F0  0862               	movf	?___flsub,w
 16026  04F1  3FC0               	movwi [0]fsr1
 16027  04F2  0863               	movf	?___flsub+1,w
 16028  04F3  3FC1               	movwi [1]fsr1
 16029  04F4  0864               	movf	?___flsub+2,w
 16030  04F5  3FC2               	movwi [2]fsr1
 16031  04F6  0865               	movf	?___flsub+3,w
 16032  04F7  3FC3               	movwi [3]fsr1
 16033                           
 16034                           ;main.c: 191:  }
 16035  04F8  3001               	movlw	1
 16036  04F9  00EC               	movwf	??_calcRequiredPower
 16037  04FA  086C               	movf	??_calcRequiredPower,w
 16038  04FB  0141               	movlb	1	; select bank1
 16039  04FC  07D8               	addwf	calcRequiredPower@n^(0+128),f
 16040  04FD  3004               	movlw	4
 16041  04FE  0258               	subwf	calcRequiredPower@n^(0+128),w
 16042  04FF  1803               	btfsc	3,0
 16043  0500  0008               	return
 16044  0501  28B7               	goto	l4925
 16045  0502                     __end_of_calcRequiredPower:	
 16046                           
 16047                           	psect	text53
 16048  2261                     __ptext53:	
 16049 ;; *************** function ___flsub *****************
 16050 ;; Defined at:
 16051 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 16052 ;; Parameters:    Size  Location     Type
 16053 ;;  a               4   66[BANK0 ] void 
 16054 ;;  b               4   70[BANK0 ] void 
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;		None
 16057 ;; Return value:  Size  Location     Type
 16058 ;;                  4   66[BANK0 ] void 
 16059 ;; Registers used:
 16060 ;;		wreg, status,2, status,0, pclath, cstack
 16061 ;; Tracked objects:
 16062 ;;		On entry : 0/0
 16063 ;;		On exit  : 0/0
 16064 ;;		Unchanged: 0/0
 16065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16066 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16069 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16070 ;;Total ram usage:        8 bytes
 16071 ;; Hardware stack levels used:    1
 16072 ;; Hardware stack levels required when called:    4
 16073 ;; This function calls:
 16074 ;;		___fladd
 16075 ;; This function is called by:
 16076 ;;		_calcRequiredPower
 16077 ;;		_spinInput
 16078 ;;		_ftoa
 16079 ;; This function uses a non-reentrant model
 16080 ;;
 16081                           
 16082                           
 16083                           ;psect for function ___flsub
 16084  2261                     ___flsub:	
 16085                           
 16086                           ;incstack = 0
 16087                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 16088  2261  3080               	movlw	128
 16089  2262  0140               	movlb	0	; select bank0
 16090  2263  06E5               	xorwf	___flsub@a+3,f
 16091  2264  0869               	movf	___flsub@b+3,w
 16092  2265  00D1               	movwf	___fladd@b+3
 16093  2266  0868               	movf	___flsub@b+2,w
 16094  2267  00D0               	movwf	___fladd@b+2
 16095  2268  0867               	movf	___flsub@b+1,w
 16096  2269  00CF               	movwf	___fladd@b+1
 16097  226A  0866               	movf	___flsub@b,w
 16098  226B  00CE               	movwf	___fladd@b
 16099  226C  0865               	movf	___flsub@a+3,w
 16100  226D  00D5               	movwf	___fladd@a+3
 16101  226E  0864               	movf	___flsub@a+2,w
 16102  226F  00D4               	movwf	___fladd@a+2
 16103  2270  0863               	movf	___flsub@a+1,w
 16104  2271  00D3               	movwf	___fladd@a+1
 16105  2272  0862               	movf	___flsub@a,w
 16106  2273  00D2               	movwf	___fladd@a
 16107  2274  318C  241B         	fcall	___fladd
 16108  2276  0140               	movlb	0	; select bank0
 16109  2277  0851               	movf	?___fladd+3,w
 16110  2278  00E5               	movwf	?___flsub+3
 16111  2279  0850               	movf	?___fladd+2,w
 16112  227A  00E4               	movwf	?___flsub+2
 16113  227B  084F               	movf	?___fladd+1,w
 16114  227C  00E3               	movwf	?___flsub+1
 16115  227D  084E               	movf	?___fladd,w
 16116  227E  00E2               	movwf	?___flsub
 16117  227F  0008               	return
 16118  2280                     __end_of___flsub:	
 16119                           
 16120                           	psect	text54
 16121  0C1B                     __ptext54:	
 16122 ;; *************** function ___fladd *****************
 16123 ;; Defined at:
 16124 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 16125 ;; Parameters:    Size  Location     Type
 16126 ;;  b               4   46[BANK0 ] void 
 16127 ;;  a               4   50[BANK0 ] void 
 16128 ;; Auto vars:     Size  Location     Type
 16129 ;;  grs             1   65[BANK0 ] unsigned char 
 16130 ;;  bexp            1   64[BANK0 ] unsigned char 
 16131 ;;  aexp            1   63[BANK0 ] unsigned char 
 16132 ;;  signs           1   62[BANK0 ] unsigned char 
 16133 ;; Return value:  Size  Location     Type
 16134 ;;                  4   46[BANK0 ] unsigned char 
 16135 ;; Registers used:
 16136 ;;		wreg, status,2, status,0
 16137 ;; Tracked objects:
 16138 ;;		On entry : 0/0
 16139 ;;		On exit  : 0/0
 16140 ;;		Unchanged: 0/0
 16141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16142 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16143 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16144 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16145 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16146 ;;Total ram usage:       20 bytes
 16147 ;; Hardware stack levels used:    1
 16148 ;; Hardware stack levels required when called:    3
 16149 ;; This function calls:
 16150 ;;		Nothing
 16151 ;; This function is called by:
 16152 ;;		_calcRequiredPower
 16153 ;;		_convertAnalogValues
 16154 ;;		_spinInput
 16155 ;;		___flsub
 16156 ;; This function uses a non-reentrant model
 16157 ;;
 16158                           
 16159                           
 16160                           ;psect for function ___fladd
 16161  0C1B                     ___fladd:	
 16162                           
 16163                           ;incstack = 0
 16164                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 16165  0C1B  0140               	movlb	0	; select bank0
 16166  0C1C  0851               	movf	___fladd@b+3,w
 16167  0C1D  3980               	andlw	128
 16168  0C1E  00D6               	movwf	??___fladd
 16169  0C1F  0856               	movf	??___fladd,w
 16170  0C20  00DE               	movwf	___fladd@signs
 16171  0C21  3551               	lslf	___fladd@b+3,w
 16172  0C22  00D6               	movwf	??___fladd
 16173  0C23  0856               	movf	??___fladd,w
 16174  0C24  00E0               	movwf	___fladd@bexp
 16175  0C25  1BD0               	btfsc	___fladd@b+2,7
 16176  0C26  1460               	bsf	___fladd@bexp,0
 16177  0C27  0860               	movf	___fladd@bexp,w
 16178  0C28  1903               	btfsc	3,2
 16179  0C29  2C38               	goto	l3291
 16180  0C2A  0A60               	incf	___fladd@bexp,w
 16181  0C2B  1D03               	btfss	3,2
 16182  0C2C  2C35               	goto	l3287
 16183  0C2D  3000               	movlw	0
 16184  0C2E  00D1               	movwf	___fladd@b+3
 16185  0C2F  3000               	movlw	0
 16186  0C30  00D0               	movwf	___fladd@b+2
 16187  0C31  3000               	movlw	0
 16188  0C32  00CF               	movwf	___fladd@b+1
 16189  0C33  3000               	movlw	0
 16190  0C34  00CE               	movwf	___fladd@b
 16191  0C35                     l3287:	
 16192  0C35  17D0               	bsf	___fladd@b+2,7
 16193  0C36  01D1               	clrf	___fladd@b+3
 16194  0C37  2C40               	goto	l3293
 16195  0C38                     l3291:	
 16196  0C38  3000               	movlw	0
 16197  0C39  00D1               	movwf	___fladd@b+3
 16198  0C3A  3000               	movlw	0
 16199  0C3B  00D0               	movwf	___fladd@b+2
 16200  0C3C  3000               	movlw	0
 16201  0C3D  00CF               	movwf	___fladd@b+1
 16202  0C3E  3000               	movlw	0
 16203  0C3F  00CE               	movwf	___fladd@b
 16204  0C40                     l3293:	
 16205  0C40  0855               	movf	___fladd@a+3,w
 16206  0C41  3980               	andlw	128
 16207  0C42  00D6               	movwf	??___fladd
 16208  0C43  0856               	movf	??___fladd,w
 16209  0C44  00DF               	movwf	___fladd@aexp
 16210  0C45  085F               	movf	___fladd@aexp,w
 16211  0C46  065E               	xorwf	___fladd@signs,w
 16212  0C47  1D03               	btfss	3,2
 16213  0C48  175E               	bsf	___fladd@signs,6
 16214  0C49  3555               	lslf	___fladd@a+3,w
 16215  0C4A  00D6               	movwf	??___fladd
 16216  0C4B  0856               	movf	??___fladd,w
 16217  0C4C  00DF               	movwf	___fladd@aexp
 16218  0C4D  1BD4               	btfsc	___fladd@a+2,7
 16219  0C4E  145F               	bsf	___fladd@aexp,0
 16220  0C4F  085F               	movf	___fladd@aexp,w
 16221  0C50  1903               	btfsc	3,2
 16222  0C51  2C60               	goto	l3315
 16223  0C52  0A5F               	incf	___fladd@aexp,w
 16224  0C53  1D03               	btfss	3,2
 16225  0C54  2C5D               	goto	l3311
 16226  0C55  3000               	movlw	0
 16227  0C56  00D5               	movwf	___fladd@a+3
 16228  0C57  3000               	movlw	0
 16229  0C58  00D4               	movwf	___fladd@a+2
 16230  0C59  3000               	movlw	0
 16231  0C5A  00D3               	movwf	___fladd@a+1
 16232  0C5B  3000               	movlw	0
 16233  0C5C  00D2               	movwf	___fladd@a
 16234  0C5D                     l3311:	
 16235  0C5D  17D4               	bsf	___fladd@a+2,7
 16236  0C5E  01D5               	clrf	___fladd@a+3
 16237  0C5F  2C68               	goto	l1066
 16238  0C60                     l3315:	
 16239  0C60  3000               	movlw	0
 16240  0C61  00D5               	movwf	___fladd@a+3
 16241  0C62  3000               	movlw	0
 16242  0C63  00D4               	movwf	___fladd@a+2
 16243  0C64  3000               	movlw	0
 16244  0C65  00D3               	movwf	___fladd@a+1
 16245  0C66  3000               	movlw	0
 16246  0C67  00D2               	movwf	___fladd@a
 16247  0C68                     l1066:	
 16248  0C68  0860               	movf	___fladd@bexp,w
 16249  0C69  025F               	subwf	___fladd@aexp,w
 16250  0C6A  1803               	skipnc
 16251  0C6B  2CAE               	goto	l3351
 16252  0C6C  1F5E               	btfss	___fladd@signs,6
 16253  0C6D  2C72               	goto	l3321
 16254  0C6E  3080               	movlw	128
 16255  0C6F  00D6               	movwf	??___fladd
 16256  0C70  0856               	movf	??___fladd,w
 16257  0C71  06DE               	xorwf	___fladd@signs,f
 16258  0C72                     l3321:	
 16259  0C72  0860               	movf	___fladd@bexp,w
 16260  0C73  00D6               	movwf	??___fladd
 16261  0C74  0856               	movf	??___fladd,w
 16262  0C75  00E1               	movwf	___fladd@grs
 16263  0C76  085F               	movf	___fladd@aexp,w
 16264  0C77  00D6               	movwf	??___fladd
 16265  0C78  0856               	movf	??___fladd,w
 16266  0C79  00E0               	movwf	___fladd@bexp
 16267  0C7A  0861               	movf	___fladd@grs,w
 16268  0C7B  00D6               	movwf	??___fladd
 16269  0C7C  0856               	movf	??___fladd,w
 16270  0C7D  00DF               	movwf	___fladd@aexp
 16271  0C7E  084E               	movf	___fladd@b,w
 16272  0C7F  00D6               	movwf	??___fladd
 16273  0C80  0856               	movf	??___fladd,w
 16274  0C81  00E1               	movwf	___fladd@grs
 16275  0C82  0852               	movf	___fladd@a,w
 16276  0C83  00D6               	movwf	??___fladd
 16277  0C84  0856               	movf	??___fladd,w
 16278  0C85  00CE               	movwf	___fladd@b
 16279  0C86  0861               	movf	___fladd@grs,w
 16280  0C87  00D6               	movwf	??___fladd
 16281  0C88  0856               	movf	??___fladd,w
 16282  0C89  00D2               	movwf	___fladd@a
 16283  0C8A  084F               	movf	___fladd@b+1,w
 16284  0C8B  00D6               	movwf	??___fladd
 16285  0C8C  0856               	movf	??___fladd,w
 16286  0C8D  00E1               	movwf	___fladd@grs
 16287  0C8E  0853               	movf	___fladd@a+1,w
 16288  0C8F  00D6               	movwf	??___fladd
 16289  0C90  0856               	movf	??___fladd,w
 16290  0C91  00CF               	movwf	___fladd@b+1
 16291  0C92  0861               	movf	___fladd@grs,w
 16292  0C93  00D6               	movwf	??___fladd
 16293  0C94  0856               	movf	??___fladd,w
 16294  0C95  00D3               	movwf	___fladd@a+1
 16295  0C96  0850               	movf	___fladd@b+2,w
 16296  0C97  00D6               	movwf	??___fladd
 16297  0C98  0856               	movf	??___fladd,w
 16298  0C99  00E1               	movwf	___fladd@grs
 16299  0C9A  0854               	movf	___fladd@a+2,w
 16300  0C9B  00D6               	movwf	??___fladd
 16301  0C9C  0856               	movf	??___fladd,w
 16302  0C9D  00D0               	movwf	___fladd@b+2
 16303  0C9E  0861               	movf	___fladd@grs,w
 16304  0C9F  00D6               	movwf	??___fladd
 16305  0CA0  0856               	movf	??___fladd,w
 16306  0CA1  00D4               	movwf	___fladd@a+2
 16307  0CA2  0851               	movf	___fladd@b+3,w
 16308  0CA3  00D6               	movwf	??___fladd
 16309  0CA4  0856               	movf	??___fladd,w
 16310  0CA5  00E1               	movwf	___fladd@grs
 16311  0CA6  0855               	movf	___fladd@a+3,w
 16312  0CA7  00D6               	movwf	??___fladd
 16313  0CA8  0856               	movf	??___fladd,w
 16314  0CA9  00D1               	movwf	___fladd@b+3
 16315  0CAA  0861               	movf	___fladd@grs,w
 16316  0CAB  00D6               	movwf	??___fladd
 16317  0CAC  0856               	movf	??___fladd,w
 16318  0CAD  00D5               	movwf	___fladd@a+3
 16319  0CAE                     l3351:	
 16320  0CAE  01E1               	clrf	___fladd@grs
 16321  0CAF  085F               	movf	___fladd@aexp,w
 16322  0CB0  00D6               	movwf	??___fladd
 16323  0CB1  01D7               	clrf	??___fladd+1
 16324  0CB2  0857               	movf	??___fladd+1,w
 16325  0CB3  00D9               	movwf	??___fladd+3
 16326  0CB4  0860               	movf	___fladd@bexp,w
 16327  0CB5  0256               	subwf	??___fladd,w
 16328  0CB6  00D8               	movwf	??___fladd+2
 16329  0CB7  1C03               	skipc
 16330  0CB8  03D9               	decf	??___fladd+3,f
 16331  0CB9  0859               	movf	??___fladd+3,w
 16332  0CBA  3A80               	xorlw	128
 16333  0CBB  00DA               	movwf	??___fladd+4
 16334  0CBC  3080               	movlw	128
 16335  0CBD  025A               	subwf	??___fladd+4,w
 16336  0CBE  1D03               	skipz
 16337  0CBF  2CC2               	goto	u3145
 16338  0CC0  301A               	movlw	26
 16339  0CC1  0258               	subwf	??___fladd+2,w
 16340  0CC2                     u3145:	
 16341  0CC2  1C03               	skipc
 16342  0CC3  2CF6               	goto	l3369
 16343  0CC4  0140               	movlb	0	; select bank0
 16344  0CC5  0851               	movf	___fladd@b+3,w
 16345  0CC6  0450               	iorwf	___fladd@b+2,w
 16346  0CC7  044F               	iorwf	___fladd@b+1,w
 16347  0CC8  044E               	iorwf	___fladd@b,w
 16348  0CC9  1903               	btfsc	3,2
 16349  0CCA  2CCD               	goto	u3150
 16350  0CCB  3001               	movlw	1
 16351  0CCC  2CCE               	goto	u3160
 16352  0CCD                     u3150:	
 16353  0CCD  3000               	movlw	0
 16354  0CCE                     u3160:	
 16355  0CCE  00D6               	movwf	??___fladd
 16356  0CCF  0856               	movf	??___fladd,w
 16357  0CD0  00E1               	movwf	___fladd@grs
 16358  0CD1  3000               	movlw	0
 16359  0CD2  00D1               	movwf	___fladd@b+3
 16360  0CD3  3000               	movlw	0
 16361  0CD4  00D0               	movwf	___fladd@b+2
 16362  0CD5  3000               	movlw	0
 16363  0CD6  00CF               	movwf	___fladd@b+1
 16364  0CD7  3000               	movlw	0
 16365  0CD8  00CE               	movwf	___fladd@b
 16366  0CD9  085F               	movf	___fladd@aexp,w
 16367  0CDA  00D6               	movwf	??___fladd
 16368  0CDB  0856               	movf	??___fladd,w
 16369  0CDC  00E0               	movwf	___fladd@bexp
 16370  0CDD  2CFB               	goto	l1070
 16371  0CDE                     l1072:	
 16372  0CDE  1C61               	btfss	___fladd@grs,0
 16373  0CDF  2CE6               	goto	l3359
 16374  0CE0  3661               	lsrf	___fladd@grs,w
 16375  0CE1  3801               	iorlw	1
 16376  0CE2  00D6               	movwf	??___fladd
 16377  0CE3  0856               	movf	??___fladd,w
 16378  0CE4  00E1               	movwf	___fladd@grs
 16379  0CE5  2CE8               	goto	l3361
 16380  0CE6                     l3359:	
 16381  0CE6  1003               	clrc
 16382  0CE7  0CE1               	rrf	___fladd@grs,f
 16383  0CE8                     l3361:	
 16384  0CE8  184E               	btfsc	___fladd@b,0
 16385  0CE9  17E1               	bsf	___fladd@grs,7
 16386  0CEA  3001               	movlw	1
 16387  0CEB  00D6               	movwf	??___fladd
 16388  0CEC                     u3195:	
 16389  0CEC  37D1               	asrf	___fladd@b+3,f
 16390  0CED  0CD0               	rrf	___fladd@b+2,f
 16391  0CEE  0CCF               	rrf	___fladd@b+1,f
 16392  0CEF  0CCE               	rrf	___fladd@b,f
 16393  0CF0  0BD6               	decfsz	??___fladd& (0+127),f
 16394  0CF1  2CEC               	goto	u3195
 16395  0CF2  3001               	movlw	1
 16396  0CF3  00D6               	movwf	??___fladd
 16397  0CF4  0856               	movf	??___fladd,w
 16398  0CF5  07E0               	addwf	___fladd@bexp,f
 16399  0CF6                     l3369:	
 16400  0CF6  0140               	movlb	0	; select bank0
 16401  0CF7  085F               	movf	___fladd@aexp,w
 16402  0CF8  0260               	subwf	___fladd@bexp,w
 16403  0CF9  1C03               	skipc
 16404  0CFA  2CDE               	goto	l1072
 16405  0CFB                     l1070:	
 16406  0CFB  1B5E               	btfsc	___fladd@signs,6
 16407  0CFC  2D2C               	goto	l3395
 16408  0CFD  0860               	movf	___fladd@bexp,w
 16409  0CFE  1D03               	btfss	3,2
 16410  0CFF  2D09               	goto	l3377
 16411  0D00  3000               	movlw	0
 16412  0D01  00D1               	movwf	?___fladd+3
 16413  0D02  3000               	movlw	0
 16414  0D03  00D0               	movwf	?___fladd+2
 16415  0D04  3000               	movlw	0
 16416  0D05  00CF               	movwf	?___fladd+1
 16417  0D06  3000               	movlw	0
 16418  0D07  00CE               	movwf	?___fladd
 16419  0D08  0008               	return
 16420  0D09                     l3377:	
 16421  0D09  0852               	movf	___fladd@a,w
 16422  0D0A  07CE               	addwf	___fladd@b,f
 16423  0D0B  0853               	movf	___fladd@a+1,w
 16424  0D0C  3DCF               	addwfc	___fladd@b+1,f
 16425  0D0D  0854               	movf	___fladd@a+2,w
 16426  0D0E  3DD0               	addwfc	___fladd@b+2,f
 16427  0D0F  0855               	movf	___fladd@a+3,w
 16428  0D10  3DD1               	addwfc	___fladd@b+3,f
 16429  0D11  1C51               	btfss	___fladd@b+3,0
 16430  0D12  2DA6               	goto	l3429
 16431  0D13  1C61               	btfss	___fladd@grs,0
 16432  0D14  2D1B               	goto	l3385
 16433  0D15  3661               	lsrf	___fladd@grs,w
 16434  0D16  3801               	iorlw	1
 16435  0D17  00D6               	movwf	??___fladd
 16436  0D18  0856               	movf	??___fladd,w
 16437  0D19  00E1               	movwf	___fladd@grs
 16438  0D1A  2D1D               	goto	l3387
 16439  0D1B                     l3385:	
 16440  0D1B  1003               	clrc
 16441  0D1C  0CE1               	rrf	___fladd@grs,f
 16442  0D1D                     l3387:	
 16443  0D1D  184E               	btfsc	___fladd@b,0
 16444  0D1E  17E1               	bsf	___fladd@grs,7
 16445  0D1F  3001               	movlw	1
 16446  0D20  00D6               	movwf	??___fladd
 16447  0D21                     u3265:	
 16448  0D21  37D1               	asrf	___fladd@b+3,f
 16449  0D22  0CD0               	rrf	___fladd@b+2,f
 16450  0D23  0CCF               	rrf	___fladd@b+1,f
 16451  0D24  0CCE               	rrf	___fladd@b,f
 16452  0D25  0BD6               	decfsz	??___fladd& (0+127),f
 16453  0D26  2D21               	goto	u3265
 16454  0D27  3001               	movlw	1
 16455  0D28  00D6               	movwf	??___fladd
 16456  0D29  0856               	movf	??___fladd,w
 16457  0D2A  07E0               	addwf	___fladd@bexp,f
 16458  0D2B  2DA6               	goto	l3429
 16459  0D2C                     l3395:	
 16460  0D2C  0851               	movf	___fladd@b+3,w
 16461  0D2D  3A80               	xorlw	128
 16462  0D2E  00D6               	movwf	??___fladd
 16463  0D2F  0855               	movf	___fladd@a+3,w
 16464  0D30  3A80               	xorlw	128
 16465  0D31  0256               	subwf	??___fladd,w
 16466  0D32  1D03               	skipz
 16467  0D33  2D3E               	goto	u3273
 16468  0D34  0854               	movf	___fladd@a+2,w
 16469  0D35  0250               	subwf	___fladd@b+2,w
 16470  0D36  1D03               	skipz
 16471  0D37  2D3E               	goto	u3273
 16472  0D38  0853               	movf	___fladd@a+1,w
 16473  0D39  024F               	subwf	___fladd@b+1,w
 16474  0D3A  1D03               	skipz
 16475  0D3B  2D3E               	goto	u3273
 16476  0D3C  0852               	movf	___fladd@a,w
 16477  0D3D  024E               	subwf	___fladd@b,w
 16478  0D3E                     u3273:	
 16479  0D3E  1803               	skipnc
 16480  0D3F  2D76               	goto	l3405
 16481  0D40  30FF               	movlw	255
 16482  0D41  00D6               	movwf	??___fladd
 16483  0D42  30FF               	movlw	255
 16484  0D43  00D7               	movwf	??___fladd+1
 16485  0D44  30FF               	movlw	255
 16486  0D45  00D8               	movwf	??___fladd+2
 16487  0D46  30FF               	movlw	255
 16488  0D47  00D9               	movwf	??___fladd+3
 16489  0D48  084E               	movf	___fladd@b,w
 16490  0D49  0252               	subwf	___fladd@a,w
 16491  0D4A  00DA               	movwf	??___fladd+4
 16492  0D4B  084F               	movf	___fladd@b+1,w
 16493  0D4C  3B53               	subwfb	___fladd@a+1,w
 16494  0D4D  00DB               	movwf	??___fladd+5
 16495  0D4E  0850               	movf	___fladd@b+2,w
 16496  0D4F  3B54               	subwfb	___fladd@a+2,w
 16497  0D50  00DC               	movwf	??___fladd+6
 16498  0D51  0851               	movf	___fladd@b+3,w
 16499  0D52  3B55               	subwfb	___fladd@a+3,w
 16500  0D53  00DD               	movwf	??___fladd+7
 16501  0D54  085A               	movf	??___fladd+4,w
 16502  0D55  07D6               	addwf	??___fladd,f
 16503  0D56  085B               	movf	??___fladd+5,w
 16504  0D57  3DD7               	addwfc	??___fladd+1,f
 16505  0D58  085C               	movf	??___fladd+6,w
 16506  0D59  3DD8               	addwfc	??___fladd+2,f
 16507  0D5A  085D               	movf	??___fladd+7,w
 16508  0D5B  3DD9               	addwfc	??___fladd+3,f
 16509  0D5C  0859               	movf	??___fladd+3,w
 16510  0D5D  00D1               	movwf	___fladd@b+3
 16511  0D5E  0858               	movf	??___fladd+2,w
 16512  0D5F  00D0               	movwf	___fladd@b+2
 16513  0D60  0857               	movf	??___fladd+1,w
 16514  0D61  00CF               	movwf	___fladd@b+1
 16515  0D62  0856               	movf	??___fladd,w
 16516  0D63  00CE               	movwf	___fladd@b
 16517  0D64  3080               	movlw	128
 16518  0D65  00D6               	movwf	??___fladd
 16519  0D66  0856               	movf	??___fladd,w
 16520  0D67  06DE               	xorwf	___fladd@signs,f
 16521  0D68  09E1               	comf	___fladd@grs,f
 16522  0D69  0AE1               	incf	___fladd@grs,f
 16523  0D6A  0861               	movf	___fladd@grs,w
 16524  0D6B  1D03               	btfss	3,2
 16525  0D6C  2D7E               	goto	l1087
 16526  0D6D  3001               	movlw	1
 16527  0D6E  07CE               	addwf	___fladd@b,f
 16528  0D6F  3000               	movlw	0
 16529  0D70  3DCF               	addwfc	___fladd@b+1,f
 16530  0D71  3000               	movlw	0
 16531  0D72  3DD0               	addwfc	___fladd@b+2,f
 16532  0D73  3000               	movlw	0
 16533  0D74  3DD1               	addwfc	___fladd@b+3,f
 16534  0D75  2D7E               	goto	l1087
 16535  0D76                     l3405:	
 16536  0D76  0852               	movf	___fladd@a,w
 16537  0D77  02CE               	subwf	___fladd@b,f
 16538  0D78  0853               	movf	___fladd@a+1,w
 16539  0D79  3BCF               	subwfb	___fladd@b+1,f
 16540  0D7A  0854               	movf	___fladd@a+2,w
 16541  0D7B  3BD0               	subwfb	___fladd@b+2,f
 16542  0D7C  0855               	movf	___fladd@a+3,w
 16543  0D7D  3BD1               	subwfb	___fladd@b+3,f
 16544  0D7E                     l1087:	
 16545  0D7E  0851               	movf	___fladd@b+3,w
 16546  0D7F  0450               	iorwf	___fladd@b+2,w
 16547  0D80  044F               	iorwf	___fladd@b+1,w
 16548  0D81  044E               	iorwf	___fladd@b,w
 16549  0D82  1D03               	skipz
 16550  0D83  2DA4               	goto	l3427
 16551  0D84  0861               	movf	___fladd@grs,w
 16552  0D85  1D03               	btfss	3,2
 16553  0D86  2DA4               	goto	l3427
 16554  0D87  3000               	movlw	0
 16555  0D88  00D1               	movwf	?___fladd+3
 16556  0D89  3000               	movlw	0
 16557  0D8A  00D0               	movwf	?___fladd+2
 16558  0D8B  3000               	movlw	0
 16559  0D8C  00CF               	movwf	?___fladd+1
 16560  0D8D  3000               	movlw	0
 16561  0D8E  00CE               	movwf	?___fladd
 16562  0D8F  0008               	return
 16563  0D90                     l3413:	
 16564  0D90  3001               	movlw	1
 16565  0D91                     u3315:	
 16566  0D91  35CE               	lslf	___fladd@b,f
 16567  0D92  0DCF               	rlf	___fladd@b+1,f
 16568  0D93  0DD0               	rlf	___fladd@b+2,f
 16569  0D94  0DD1               	rlf	___fladd@b+3,f
 16570  0D95  0B89               	decfsz	9,f
 16571  0D96  2D91               	goto	u3315
 16572  0D97  1BE1               	btfsc	___fladd@grs,7
 16573  0D98  144E               	bsf	___fladd@b,0
 16574  0D99  1C61               	btfss	___fladd@grs,0
 16575  0D9A  2D9D               	goto	l3421
 16576  0D9B  1403               	setc
 16577  0D9C  2D9E               	goto	L11
 16578  0D9D                     l3421:	
 16579  0D9D  1003               	clrc
 16580  0D9E                     L11:	
 16581  0D9E  0DE1               	rlf	___fladd@grs,f
 16582  0D9F  0860               	movf	___fladd@bexp,w
 16583  0DA0  1903               	btfsc	3,2
 16584  0DA1  2DA4               	goto	l3427
 16585  0DA2  3001               	movlw	1
 16586  0DA3  02E0               	subwf	___fladd@bexp,f
 16587  0DA4                     l3427:	
 16588  0DA4  1FD0               	btfss	___fladd@b+2,7
 16589  0DA5  2D90               	goto	l3413
 16590  0DA6                     l3429:	
 16591  0DA6  01DF               	clrf	___fladd@aexp
 16592  0DA7  1FE1               	btfss	___fladd@grs,7
 16593  0DA8  2DB1               	goto	l3439
 16594  0DA9  0861               	movf	___fladd@grs,w
 16595  0DAA  397F               	andlw	127
 16596  0DAB  1903               	btfsc	3,2
 16597  0DAC  184E               	btfsc	___fladd@b,0
 16598  0DAD  2DAF               	goto	l3435
 16599  0DAE  2DB1               	goto	l3439
 16600  0DAF                     l3435:	
 16601  0DAF  01DF               	clrf	___fladd@aexp
 16602  0DB0  0ADF               	incf	___fladd@aexp,f
 16603  0DB1                     l3439:	
 16604  0DB1  085F               	movf	___fladd@aexp,w
 16605  0DB2  1903               	btfsc	3,2
 16606  0DB3  2DDD               	goto	l1100
 16607  0DB4  3001               	movlw	1
 16608  0DB5  07CE               	addwf	___fladd@b,f
 16609  0DB6  3000               	movlw	0
 16610  0DB7  3DCF               	addwfc	___fladd@b+1,f
 16611  0DB8  3000               	movlw	0
 16612  0DB9  3DD0               	addwfc	___fladd@b+2,f
 16613  0DBA  3000               	movlw	0
 16614  0DBB  3DD1               	addwfc	___fladd@b+3,f
 16615  0DBC  1C51               	btfss	___fladd@b+3,0
 16616  0DBD  2DDD               	goto	l1100
 16617  0DBE  084E               	movf	___fladd@b,w
 16618  0DBF  00D6               	movwf	??___fladd
 16619  0DC0  084F               	movf	___fladd@b+1,w
 16620  0DC1  00D7               	movwf	??___fladd+1
 16621  0DC2  0850               	movf	___fladd@b+2,w
 16622  0DC3  00D8               	movwf	??___fladd+2
 16623  0DC4  0851               	movf	___fladd@b+3,w
 16624  0DC5  00D9               	movwf	??___fladd+3
 16625  0DC6  3001               	movlw	1
 16626  0DC7  00DA               	movwf	??___fladd+4
 16627  0DC8                     u3415:	
 16628  0DC8  37D9               	asrf	??___fladd+3,f
 16629  0DC9  0CD8               	rrf	??___fladd+2,f
 16630  0DCA  0CD7               	rrf	??___fladd+1,f
 16631  0DCB  0CD6               	rrf	??___fladd,f
 16632  0DCC  0BDA               	decfsz	??___fladd+4,f
 16633  0DCD  2DC8               	goto	u3415
 16634  0DCE  0859               	movf	??___fladd+3,w
 16635  0DCF  00D1               	movwf	___fladd@b+3
 16636  0DD0  0858               	movf	??___fladd+2,w
 16637  0DD1  00D0               	movwf	___fladd@b+2
 16638  0DD2  0857               	movf	??___fladd+1,w
 16639  0DD3  00CF               	movwf	___fladd@b+1
 16640  0DD4  0856               	movf	??___fladd,w
 16641  0DD5  00CE               	movwf	___fladd@b
 16642  0DD6  0A60               	incf	___fladd@bexp,w
 16643  0DD7  1903               	btfsc	3,2
 16644  0DD8  2DDD               	goto	l1100
 16645  0DD9  3001               	movlw	1
 16646  0DDA  00D6               	movwf	??___fladd
 16647  0DDB  0856               	movf	??___fladd,w
 16648  0DDC  07E0               	addwf	___fladd@bexp,f
 16649  0DDD                     l1100:	
 16650  0DDD  0A60               	incf	___fladd@bexp,w
 16651  0DDE  1D03               	btfss	3,2
 16652  0DDF  0860               	movf	___fladd@bexp,w
 16653  0DE0  1D03               	btfss	3,2
 16654  0DE1  2DED               	goto	l3457
 16655  0DE2  3000               	movlw	0
 16656  0DE3  00D1               	movwf	___fladd@b+3
 16657  0DE4  3000               	movlw	0
 16658  0DE5  00D0               	movwf	___fladd@b+2
 16659  0DE6  3000               	movlw	0
 16660  0DE7  00CF               	movwf	___fladd@b+1
 16661  0DE8  3000               	movlw	0
 16662  0DE9  00CE               	movwf	___fladd@b
 16663  0DEA  0860               	movf	___fladd@bexp,w
 16664  0DEB  1903               	btfsc	3,2
 16665  0DEC  01DE               	clrf	___fladd@signs
 16666  0DED                     l3457:	
 16667  0DED  1C60               	btfss	___fladd@bexp,0
 16668  0DEE  2DF1               	goto	l3461
 16669  0DEF  17D0               	bsf	___fladd@b+2,7
 16670  0DF0  2DF5               	goto	l1108
 16671  0DF1                     l3461:	
 16672  0DF1  307F               	movlw	127
 16673  0DF2  00D6               	movwf	??___fladd
 16674  0DF3  0856               	movf	??___fladd,w
 16675  0DF4  05D0               	andwf	___fladd@b+2,f
 16676  0DF5                     l1108:	
 16677  0DF5  3660               	lsrf	___fladd@bexp,w
 16678  0DF6  00D6               	movwf	??___fladd
 16679  0DF7  0856               	movf	??___fladd,w
 16680  0DF8  00D1               	movwf	___fladd@b+3
 16681  0DF9  1FDE               	btfss	___fladd@signs,7
 16682  0DFA  0008               	return
 16683  0DFB  17D1               	bsf	___fladd@b+3,7
 16684  0DFC  0008               	return
 16685  0DFD                     __end_of___fladd:	
 16686                           
 16687                           	psect	text55
 16688  0502                     __ptext55:	
 16689 ;; *************** function ___flmul *****************
 16690 ;; Defined at:
 16691 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;  b               4   20[BANK0 ] unsigned char 
 16694 ;;  a               4   24[BANK0 ] unsigned char 
 16695 ;; Auto vars:     Size  Location     Type
 16696 ;;  prod            4   40[BANK0 ] struct .
 16697 ;;  grs             4   34[BANK0 ] unsigned long 
 16698 ;;  temp            2   44[BANK0 ] struct .
 16699 ;;  bexp            1   39[BANK0 ] unsigned char 
 16700 ;;  aexp            1   38[BANK0 ] unsigned char 
 16701 ;;  sign            1   33[BANK0 ] unsigned char 
 16702 ;; Return value:  Size  Location     Type
 16703 ;;                  4   20[BANK0 ] unsigned char 
 16704 ;; Registers used:
 16705 ;;		wreg, status,2, status,0, pclath, cstack
 16706 ;; Tracked objects:
 16707 ;;		On entry : 0/0
 16708 ;;		On exit  : 0/0
 16709 ;;		Unchanged: 0/0
 16710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16711 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16712 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16713 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16714 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16715 ;;Total ram usage:       26 bytes
 16716 ;; Hardware stack levels used:    1
 16717 ;; Hardware stack levels required when called:    4
 16718 ;; This function calls:
 16719 ;;		__Umul8_16
 16720 ;; This function is called by:
 16721 ;;		_calcRequiredPower
 16722 ;;		_getAvgChannelCurrents
 16723 ;;		_convertAnalogValues
 16724 ;;		_ftoa
 16725 ;; This function uses a non-reentrant model
 16726 ;;
 16727                           
 16728                           
 16729                           ;psect for function ___flmul
 16730  0502                     ___flmul:	
 16731                           
 16732                           ;incstack = 0
 16733                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 16734  0502  0140               	movlb	0	; select bank0
 16735  0503  0837               	movf	___flmul@b+3,w
 16736  0504  3980               	andlw	128
 16737  0505  00BC               	movwf	??___flmul
 16738  0506  083C               	movf	??___flmul,w
 16739  0507  00C1               	movwf	___flmul@sign
 16740  0508  3537               	lslf	___flmul@b+3,w
 16741  0509  00BC               	movwf	??___flmul
 16742  050A  083C               	movf	??___flmul,w
 16743  050B  00C7               	movwf	___flmul@bexp
 16744  050C  1BB6               	btfsc	___flmul@b+2,7
 16745  050D  1447               	bsf	___flmul@bexp,0
 16746  050E  0847               	movf	___flmul@bexp,w
 16747  050F  1903               	btfsc	3,2
 16748  0510  2D1E               	goto	l3823
 16749  0511  0A47               	incf	___flmul@bexp,w
 16750  0512  1D03               	btfss	3,2
 16751  0513  2D1C               	goto	l3821
 16752  0514  3000               	movlw	0
 16753  0515  00B7               	movwf	___flmul@b+3
 16754  0516  3000               	movlw	0
 16755  0517  00B6               	movwf	___flmul@b+2
 16756  0518  3000               	movlw	0
 16757  0519  00B5               	movwf	___flmul@b+1
 16758  051A  3000               	movlw	0
 16759  051B  00B4               	movwf	___flmul@b
 16760  051C                     l3821:	
 16761  051C  17B6               	bsf	___flmul@b+2,7
 16762  051D  2D26               	goto	l3825
 16763  051E                     l3823:	
 16764  051E  3000               	movlw	0
 16765  051F  00B7               	movwf	___flmul@b+3
 16766  0520  3000               	movlw	0
 16767  0521  00B6               	movwf	___flmul@b+2
 16768  0522  3000               	movlw	0
 16769  0523  00B5               	movwf	___flmul@b+1
 16770  0524  3000               	movlw	0
 16771  0525  00B4               	movwf	___flmul@b
 16772  0526                     l3825:	
 16773  0526  083B               	movf	___flmul@a+3,w
 16774  0527  3980               	andlw	128
 16775  0528  00BC               	movwf	??___flmul
 16776  0529  083C               	movf	??___flmul,w
 16777  052A  06C1               	xorwf	___flmul@sign,f
 16778  052B  353B               	lslf	___flmul@a+3,w
 16779  052C  00BC               	movwf	??___flmul
 16780  052D  083C               	movf	??___flmul,w
 16781  052E  00C6               	movwf	___flmul@aexp
 16782  052F  1BBA               	btfsc	___flmul@a+2,7
 16783  0530  1446               	bsf	___flmul@aexp,0
 16784  0531  0846               	movf	___flmul@aexp,w
 16785  0532  1903               	btfsc	3,2
 16786  0533  2D41               	goto	l3841
 16787  0534  0A46               	incf	___flmul@aexp,w
 16788  0535  1D03               	btfss	3,2
 16789  0536  2D3F               	goto	l3839
 16790  0537  3000               	movlw	0
 16791  0538  00BB               	movwf	___flmul@a+3
 16792  0539  3000               	movlw	0
 16793  053A  00BA               	movwf	___flmul@a+2
 16794  053B  3000               	movlw	0
 16795  053C  00B9               	movwf	___flmul@a+1
 16796  053D  3000               	movlw	0
 16797  053E  00B8               	movwf	___flmul@a
 16798  053F                     l3839:	
 16799  053F  17BA               	bsf	___flmul@a+2,7
 16800  0540  2D49               	goto	l3843
 16801  0541                     l3841:	
 16802  0541  3000               	movlw	0
 16803  0542  00BB               	movwf	___flmul@a+3
 16804  0543  3000               	movlw	0
 16805  0544  00BA               	movwf	___flmul@a+2
 16806  0545  3000               	movlw	0
 16807  0546  00B9               	movwf	___flmul@a+1
 16808  0547  3000               	movlw	0
 16809  0548  00B8               	movwf	___flmul@a
 16810  0549                     l3843:	
 16811  0549  0846               	movf	___flmul@aexp,w
 16812  054A  1D03               	btfss	3,2
 16813  054B  0847               	movf	___flmul@bexp,w
 16814  054C  1D03               	btfss	3,2
 16815  054D  2D57               	goto	l3851
 16816  054E  3000               	movlw	0
 16817  054F  00B7               	movwf	?___flmul+3
 16818  0550  3000               	movlw	0
 16819  0551  00B6               	movwf	?___flmul+2
 16820  0552  3000               	movlw	0
 16821  0553  00B5               	movwf	?___flmul+1
 16822  0554  3000               	movlw	0
 16823  0555  00B4               	movwf	?___flmul
 16824  0556  0008               	return
 16825  0557                     l3851:	
 16826  0557  0834               	movf	___flmul@b,w
 16827  0558  00BC               	movwf	??___flmul
 16828  0559  083C               	movf	??___flmul,w
 16829  055A  00A0               	movwf	__Umul8_16@multiplicand
 16830  055B  083A               	movf	___flmul@a+2,w
 16831  055C  31A2  2280  3185   	fcall	__Umul8_16
 16832  055F  0140               	movlb	0	; select bank0
 16833  0560  0821               	movf	?__Umul8_16+1,w
 16834  0561  00CD               	movwf	___flmul@temp+1
 16835  0562  0820               	movf	?__Umul8_16,w
 16836  0563  00CC               	movwf	___flmul@temp
 16837  0564  084C               	movf	___flmul@temp,w
 16838  0565  00BC               	movwf	??___flmul
 16839  0566  01BD               	clrf	??___flmul+1
 16840  0567  01BE               	clrf	??___flmul+2
 16841  0568  01BF               	clrf	??___flmul+3
 16842  0569  083F               	movf	??___flmul+3,w
 16843  056A  00C5               	movwf	___flmul@grs+3
 16844  056B  083E               	movf	??___flmul+2,w
 16845  056C  00C4               	movwf	___flmul@grs+2
 16846  056D  083D               	movf	??___flmul+1,w
 16847  056E  00C3               	movwf	___flmul@grs+1
 16848  056F  083C               	movf	??___flmul,w
 16849  0570  00C2               	movwf	___flmul@grs
 16850  0571  084D               	movf	___flmul@temp+1,w
 16851  0572  00BC               	movwf	??___flmul
 16852  0573  01BD               	clrf	??___flmul+1
 16853  0574  01BE               	clrf	??___flmul+2
 16854  0575  01BF               	clrf	??___flmul+3
 16855  0576  083F               	movf	??___flmul+3,w
 16856  0577  00CB               	movwf	___flmul@prod+3
 16857  0578  083E               	movf	??___flmul+2,w
 16858  0579  00CA               	movwf	___flmul@prod+2
 16859  057A  083D               	movf	??___flmul+1,w
 16860  057B  00C9               	movwf	___flmul@prod+1
 16861  057C  083C               	movf	??___flmul,w
 16862  057D  00C8               	movwf	___flmul@prod
 16863  057E  0835               	movf	___flmul@b+1,w
 16864  057F  00BC               	movwf	??___flmul
 16865  0580  083C               	movf	??___flmul,w
 16866  0581  00A0               	movwf	__Umul8_16@multiplicand
 16867  0582  0839               	movf	___flmul@a+1,w
 16868  0583  31A2  2280  3185   	fcall	__Umul8_16
 16869  0586  0140               	movlb	0	; select bank0
 16870  0587  0821               	movf	?__Umul8_16+1,w
 16871  0588  00CD               	movwf	___flmul@temp+1
 16872  0589  0820               	movf	?__Umul8_16,w
 16873  058A  00CC               	movwf	___flmul@temp
 16874  058B  084C               	movf	___flmul@temp,w
 16875  058C  00BC               	movwf	??___flmul
 16876  058D  01BD               	clrf	??___flmul+1
 16877  058E  01BE               	clrf	??___flmul+2
 16878  058F  01BF               	clrf	??___flmul+3
 16879  0590  083C               	movf	??___flmul,w
 16880  0591  07C2               	addwf	___flmul@grs,f
 16881  0592  083D               	movf	??___flmul+1,w
 16882  0593  3DC3               	addwfc	___flmul@grs+1,f
 16883  0594  083E               	movf	??___flmul+2,w
 16884  0595  3DC4               	addwfc	___flmul@grs+2,f
 16885  0596  083F               	movf	??___flmul+3,w
 16886  0597  3DC5               	addwfc	___flmul@grs+3,f
 16887  0598  084D               	movf	___flmul@temp+1,w
 16888  0599  00BC               	movwf	??___flmul
 16889  059A  01BD               	clrf	??___flmul+1
 16890  059B  01BE               	clrf	??___flmul+2
 16891  059C  01BF               	clrf	??___flmul+3
 16892  059D  083C               	movf	??___flmul,w
 16893  059E  07C8               	addwf	___flmul@prod,f
 16894  059F  083D               	movf	??___flmul+1,w
 16895  05A0  3DC9               	addwfc	___flmul@prod+1,f
 16896  05A1  083E               	movf	??___flmul+2,w
 16897  05A2  3DCA               	addwfc	___flmul@prod+2,f
 16898  05A3  083F               	movf	??___flmul+3,w
 16899  05A4  3DCB               	addwfc	___flmul@prod+3,f
 16900  05A5  0836               	movf	___flmul@b+2,w
 16901  05A6  00BC               	movwf	??___flmul
 16902  05A7  083C               	movf	??___flmul,w
 16903  05A8  00A0               	movwf	__Umul8_16@multiplicand
 16904  05A9  0838               	movf	___flmul@a,w
 16905  05AA  31A2  2280  3185   	fcall	__Umul8_16
 16906  05AD  0140               	movlb	0	; select bank0
 16907  05AE  0821               	movf	?__Umul8_16+1,w
 16908  05AF  00CD               	movwf	___flmul@temp+1
 16909  05B0  0820               	movf	?__Umul8_16,w
 16910  05B1  00CC               	movwf	___flmul@temp
 16911  05B2  084C               	movf	___flmul@temp,w
 16912  05B3  00BC               	movwf	??___flmul
 16913  05B4  01BD               	clrf	??___flmul+1
 16914  05B5  01BE               	clrf	??___flmul+2
 16915  05B6  01BF               	clrf	??___flmul+3
 16916  05B7  083C               	movf	??___flmul,w
 16917  05B8  07C2               	addwf	___flmul@grs,f
 16918  05B9  083D               	movf	??___flmul+1,w
 16919  05BA  3DC3               	addwfc	___flmul@grs+1,f
 16920  05BB  083E               	movf	??___flmul+2,w
 16921  05BC  3DC4               	addwfc	___flmul@grs+2,f
 16922  05BD  083F               	movf	??___flmul+3,w
 16923  05BE  3DC5               	addwfc	___flmul@grs+3,f
 16924  05BF  084D               	movf	___flmul@temp+1,w
 16925  05C0  00BC               	movwf	??___flmul
 16926  05C1  01BD               	clrf	??___flmul+1
 16927  05C2  01BE               	clrf	??___flmul+2
 16928  05C3  01BF               	clrf	??___flmul+3
 16929  05C4  083C               	movf	??___flmul,w
 16930  05C5  07C8               	addwf	___flmul@prod,f
 16931  05C6  083D               	movf	??___flmul+1,w
 16932  05C7  3DC9               	addwfc	___flmul@prod+1,f
 16933  05C8  083E               	movf	??___flmul+2,w
 16934  05C9  3DCA               	addwfc	___flmul@prod+2,f
 16935  05CA  083F               	movf	??___flmul+3,w
 16936  05CB  3DCB               	addwfc	___flmul@prod+3,f
 16937  05CC  3008               	movlw	8
 16938  05CD                     u4305:	
 16939  05CD  35C2               	lslf	___flmul@grs,f
 16940  05CE  0DC3               	rlf	___flmul@grs+1,f
 16941  05CF  0DC4               	rlf	___flmul@grs+2,f
 16942  05D0  0DC5               	rlf	___flmul@grs+3,f
 16943  05D1  0B89               	decfsz	9,f
 16944  05D2  2DCD               	goto	u4305
 16945  05D3  0835               	movf	___flmul@b+1,w
 16946  05D4  00BC               	movwf	??___flmul
 16947  05D5  083C               	movf	??___flmul,w
 16948  05D6  00A0               	movwf	__Umul8_16@multiplicand
 16949  05D7  0838               	movf	___flmul@a,w
 16950  05D8  31A2  2280  3185   	fcall	__Umul8_16
 16951  05DB  0140               	movlb	0	; select bank0
 16952  05DC  0821               	movf	?__Umul8_16+1,w
 16953  05DD  00CD               	movwf	___flmul@temp+1
 16954  05DE  0820               	movf	?__Umul8_16,w
 16955  05DF  00CC               	movwf	___flmul@temp
 16956  05E0  084C               	movf	___flmul@temp,w
 16957  05E1  07C2               	addwf	___flmul@grs,f
 16958  05E2  084D               	movf	___flmul@temp+1,w
 16959  05E3  3DC3               	addwfc	___flmul@grs+1,f
 16960  05E4  3000               	movlw	0
 16961  05E5  3DC4               	addwfc	___flmul@grs+2,f
 16962  05E6  3DC5               	addwfc	___flmul@grs+3,f
 16963  05E7  0834               	movf	___flmul@b,w
 16964  05E8  00BC               	movwf	??___flmul
 16965  05E9  083C               	movf	??___flmul,w
 16966  05EA  00A0               	movwf	__Umul8_16@multiplicand
 16967  05EB  0839               	movf	___flmul@a+1,w
 16968  05EC  31A2  2280  3185   	fcall	__Umul8_16
 16969  05EF  0140               	movlb	0	; select bank0
 16970  05F0  0821               	movf	?__Umul8_16+1,w
 16971  05F1  00CD               	movwf	___flmul@temp+1
 16972  05F2  0820               	movf	?__Umul8_16,w
 16973  05F3  00CC               	movwf	___flmul@temp
 16974  05F4  084C               	movf	___flmul@temp,w
 16975  05F5  07C2               	addwf	___flmul@grs,f
 16976  05F6  084D               	movf	___flmul@temp+1,w
 16977  05F7  3DC3               	addwfc	___flmul@grs+1,f
 16978  05F8  3000               	movlw	0
 16979  05F9  3DC4               	addwfc	___flmul@grs+2,f
 16980  05FA  3DC5               	addwfc	___flmul@grs+3,f
 16981  05FB  3008               	movlw	8
 16982  05FC                     u4315:	
 16983  05FC  35C2               	lslf	___flmul@grs,f
 16984  05FD  0DC3               	rlf	___flmul@grs+1,f
 16985  05FE  0DC4               	rlf	___flmul@grs+2,f
 16986  05FF  0DC5               	rlf	___flmul@grs+3,f
 16987  0600  0B89               	decfsz	9,f
 16988  0601  2DFC               	goto	u4315
 16989  0602  0834               	movf	___flmul@b,w
 16990  0603  00BC               	movwf	??___flmul
 16991  0604  083C               	movf	??___flmul,w
 16992  0605  00A0               	movwf	__Umul8_16@multiplicand
 16993  0606  0838               	movf	___flmul@a,w
 16994  0607  31A2  2280  3185   	fcall	__Umul8_16
 16995  060A  0140               	movlb	0	; select bank0
 16996  060B  0821               	movf	?__Umul8_16+1,w
 16997  060C  00CD               	movwf	___flmul@temp+1
 16998  060D  0820               	movf	?__Umul8_16,w
 16999  060E  00CC               	movwf	___flmul@temp
 17000  060F  084C               	movf	___flmul@temp,w
 17001  0610  07C2               	addwf	___flmul@grs,f
 17002  0611  084D               	movf	___flmul@temp+1,w
 17003  0612  3DC3               	addwfc	___flmul@grs+1,f
 17004  0613  3000               	movlw	0
 17005  0614  3DC4               	addwfc	___flmul@grs+2,f
 17006  0615  3DC5               	addwfc	___flmul@grs+3,f
 17007  0616  0835               	movf	___flmul@b+1,w
 17008  0617  00BC               	movwf	??___flmul
 17009  0618  083C               	movf	??___flmul,w
 17010  0619  00A0               	movwf	__Umul8_16@multiplicand
 17011  061A  083A               	movf	___flmul@a+2,w
 17012  061B  31A2  2280  3185   	fcall	__Umul8_16
 17013  061E  0140               	movlb	0	; select bank0
 17014  061F  0821               	movf	?__Umul8_16+1,w
 17015  0620  00CD               	movwf	___flmul@temp+1
 17016  0621  0820               	movf	?__Umul8_16,w
 17017  0622  00CC               	movwf	___flmul@temp
 17018  0623  084C               	movf	___flmul@temp,w
 17019  0624  07C8               	addwf	___flmul@prod,f
 17020  0625  084D               	movf	___flmul@temp+1,w
 17021  0626  3DC9               	addwfc	___flmul@prod+1,f
 17022  0627  3000               	movlw	0
 17023  0628  3DCA               	addwfc	___flmul@prod+2,f
 17024  0629  3DCB               	addwfc	___flmul@prod+3,f
 17025  062A  0836               	movf	___flmul@b+2,w
 17026  062B  00BC               	movwf	??___flmul
 17027  062C  083C               	movf	??___flmul,w
 17028  062D  00A0               	movwf	__Umul8_16@multiplicand
 17029  062E  0839               	movf	___flmul@a+1,w
 17030  062F  31A2  2280  3185   	fcall	__Umul8_16
 17031  0632  0140               	movlb	0	; select bank0
 17032  0633  0821               	movf	?__Umul8_16+1,w
 17033  0634  00CD               	movwf	___flmul@temp+1
 17034  0635  0820               	movf	?__Umul8_16,w
 17035  0636  00CC               	movwf	___flmul@temp
 17036  0637  084C               	movf	___flmul@temp,w
 17037  0638  07C8               	addwf	___flmul@prod,f
 17038  0639  084D               	movf	___flmul@temp+1,w
 17039  063A  3DC9               	addwfc	___flmul@prod+1,f
 17040  063B  3000               	movlw	0
 17041  063C  3DCA               	addwfc	___flmul@prod+2,f
 17042  063D  3DCB               	addwfc	___flmul@prod+3,f
 17043  063E  0836               	movf	___flmul@b+2,w
 17044  063F  00BC               	movwf	??___flmul
 17045  0640  083C               	movf	??___flmul,w
 17046  0641  00A0               	movwf	__Umul8_16@multiplicand
 17047  0642  083A               	movf	___flmul@a+2,w
 17048  0643  31A2  2280  3185   	fcall	__Umul8_16
 17049  0646  0140               	movlb	0	; select bank0
 17050  0647  0821               	movf	?__Umul8_16+1,w
 17051  0648  00CD               	movwf	___flmul@temp+1
 17052  0649  0820               	movf	?__Umul8_16,w
 17053  064A  00CC               	movwf	___flmul@temp
 17054  064B  084C               	movf	___flmul@temp,w
 17055  064C  00BC               	movwf	??___flmul
 17056  064D  084D               	movf	___flmul@temp+1,w
 17057  064E  00BD               	movwf	??___flmul+1
 17058  064F  01BE               	clrf	??___flmul+2
 17059  0650  01BF               	clrf	??___flmul+3
 17060  0651  3008               	movlw	8
 17061  0652                     u4325:	
 17062  0652  35BC               	lslf	??___flmul,f
 17063  0653  0DBD               	rlf	??___flmul+1,f
 17064  0654  0DBE               	rlf	??___flmul+2,f
 17065  0655  0DBF               	rlf	??___flmul+3,f
 17066  0656  0B89               	decfsz	9,f
 17067  0657  2E52               	goto	u4325
 17068  0658  083C               	movf	??___flmul,w
 17069  0659  07C8               	addwf	___flmul@prod,f
 17070  065A  083D               	movf	??___flmul+1,w
 17071  065B  3DC9               	addwfc	___flmul@prod+1,f
 17072  065C  083E               	movf	??___flmul+2,w
 17073  065D  3DCA               	addwfc	___flmul@prod+2,f
 17074  065E  083F               	movf	??___flmul+3,w
 17075  065F  3DCB               	addwfc	___flmul@prod+3,f
 17076  0660  0842               	movf	___flmul@grs,w
 17077  0661  00BC               	movwf	??___flmul
 17078  0662  0843               	movf	___flmul@grs+1,w
 17079  0663  00BD               	movwf	??___flmul+1
 17080  0664  0844               	movf	___flmul@grs+2,w
 17081  0665  00BE               	movwf	??___flmul+2
 17082  0666  0845               	movf	___flmul@grs+3,w
 17083  0667  00BF               	movwf	??___flmul+3
 17084  0668  3018               	movlw	24
 17085  0669                     u4335:	
 17086  0669  36BF               	lsrf	??___flmul+3,f
 17087  066A  0CBE               	rrf	??___flmul+2,f
 17088  066B  0CBD               	rrf	??___flmul+1,f
 17089  066C  0CBC               	rrf	??___flmul,f
 17090  066D  0B89               	decfsz	9,f
 17091  066E  2E69               	goto	u4335
 17092  066F  083C               	movf	??___flmul,w
 17093  0670  07C8               	addwf	___flmul@prod,f
 17094  0671  083D               	movf	??___flmul+1,w
 17095  0672  3DC9               	addwfc	___flmul@prod+1,f
 17096  0673  083E               	movf	??___flmul+2,w
 17097  0674  3DCA               	addwfc	___flmul@prod+2,f
 17098  0675  083F               	movf	??___flmul+3,w
 17099  0676  3DCB               	addwfc	___flmul@prod+3,f
 17100  0677  3008               	movlw	8
 17101  0678                     u4345:	
 17102  0678  35C2               	lslf	___flmul@grs,f
 17103  0679  0DC3               	rlf	___flmul@grs+1,f
 17104  067A  0DC4               	rlf	___flmul@grs+2,f
 17105  067B  0DC5               	rlf	___flmul@grs+3,f
 17106  067C  0B89               	decfsz	9,f
 17107  067D  2E78               	goto	u4345
 17108  067E  0847               	movf	___flmul@bexp,w
 17109  067F  0746               	addwf	___flmul@aexp,w
 17110  0680  00BC               	movwf	??___flmul
 17111  0681  01BD               	clrf	??___flmul+1
 17112  0682  0DBD               	rlf	??___flmul+1,f
 17113  0683  083C               	movf	??___flmul,w
 17114  0684  3E82               	addlw	130
 17115  0685  00CC               	movwf	___flmul@temp
 17116  0686  30FF               	movlw	255
 17117  0687  3D3D               	addwfc	??___flmul+1,w
 17118  0688  00CD               	movwf	___flmul@temp+1
 17119  0689                     l3903:	
 17120  0689  1BCA               	btfsc	___flmul@prod+2,7
 17121  068A  2EA0               	goto	l3905
 17122  068B  3001               	movlw	1
 17123  068C                     u4355:	
 17124  068C  35C8               	lslf	___flmul@prod,f
 17125  068D  0DC9               	rlf	___flmul@prod+1,f
 17126  068E  0DCA               	rlf	___flmul@prod+2,f
 17127  068F  0DCB               	rlf	___flmul@prod+3,f
 17128  0690  0B89               	decfsz	9,f
 17129  0691  2E8C               	goto	u4355
 17130  0692  1BC5               	btfsc	___flmul@grs+3,7
 17131  0693  1448               	bsf	___flmul@prod,0
 17132  0694  3001               	movlw	1
 17133  0695                     u4375:	
 17134  0695  35C2               	lslf	___flmul@grs,f
 17135  0696  0DC3               	rlf	___flmul@grs+1,f
 17136  0697  0DC4               	rlf	___flmul@grs+2,f
 17137  0698  0DC5               	rlf	___flmul@grs+3,f
 17138  0699  0B89               	decfsz	9,f
 17139  069A  2E95               	goto	u4375
 17140  069B  30FF               	movlw	255
 17141  069C  07CC               	addwf	___flmul@temp,f
 17142  069D  30FF               	movlw	255
 17143  069E  3DCD               	addwfc	___flmul@temp+1,f
 17144  069F  2E89               	goto	l3903
 17145  06A0                     l3905:	
 17146  06A0  01C6               	clrf	___flmul@aexp
 17147  06A1  1FC5               	btfss	___flmul@grs+3,7
 17148  06A2  2EB9               	goto	l3915
 17149  06A3  30FF               	movlw	255
 17150  06A4  0542               	andwf	___flmul@grs,w
 17151  06A5  00BC               	movwf	??___flmul
 17152  06A6  30FF               	movlw	255
 17153  06A7  0543               	andwf	___flmul@grs+1,w
 17154  06A8  00BD               	movwf	??___flmul+1
 17155  06A9  30FF               	movlw	255
 17156  06AA  0544               	andwf	___flmul@grs+2,w
 17157  06AB  00BE               	movwf	??___flmul+2
 17158  06AC  307F               	movlw	127
 17159  06AD  0545               	andwf	___flmul@grs+3,w
 17160  06AE  00BF               	movwf	??___flmul+3
 17161  06AF  083F               	movf	??___flmul+3,w
 17162  06B0  043E               	iorwf	??___flmul+2,w
 17163  06B1  043D               	iorwf	??___flmul+1,w
 17164  06B2  043C               	iorwf	??___flmul,w
 17165  06B3  1903               	skipnz
 17166  06B4  1848               	btfsc	___flmul@prod,0
 17167  06B5  2EB7               	goto	l3911
 17168  06B6  2EB9               	goto	l3915
 17169  06B7                     l3911:	
 17170  06B7  01C6               	clrf	___flmul@aexp
 17171  06B8  0AC6               	incf	___flmul@aexp,f
 17172  06B9                     l3915:	
 17173  06B9  0846               	movf	___flmul@aexp,w
 17174  06BA  1903               	btfsc	3,2
 17175  06BB  2EE2               	goto	l3925
 17176  06BC  3001               	movlw	1
 17177  06BD  07C8               	addwf	___flmul@prod,f
 17178  06BE  3000               	movlw	0
 17179  06BF  3DC9               	addwfc	___flmul@prod+1,f
 17180  06C0  3000               	movlw	0
 17181  06C1  3DCA               	addwfc	___flmul@prod+2,f
 17182  06C2  3000               	movlw	0
 17183  06C3  3DCB               	addwfc	___flmul@prod+3,f
 17184  06C4  1C4B               	btfss	___flmul@prod+3,0
 17185  06C5  2EE2               	goto	l3925
 17186  06C6  0848               	movf	___flmul@prod,w
 17187  06C7  00BC               	movwf	??___flmul
 17188  06C8  0849               	movf	___flmul@prod+1,w
 17189  06C9  00BD               	movwf	??___flmul+1
 17190  06CA  084A               	movf	___flmul@prod+2,w
 17191  06CB  00BE               	movwf	??___flmul+2
 17192  06CC  084B               	movf	___flmul@prod+3,w
 17193  06CD  00BF               	movwf	??___flmul+3
 17194  06CE  3001               	movlw	1
 17195  06CF  00C0               	movwf	??___flmul+4
 17196  06D0                     u4445:	
 17197  06D0  37BF               	asrf	??___flmul+3,f
 17198  06D1  0CBE               	rrf	??___flmul+2,f
 17199  06D2  0CBD               	rrf	??___flmul+1,f
 17200  06D3  0CBC               	rrf	??___flmul,f
 17201  06D4  0BC0               	decfsz	??___flmul+4,f
 17202  06D5  2ED0               	goto	u4445
 17203  06D6  083F               	movf	??___flmul+3,w
 17204  06D7  00CB               	movwf	___flmul@prod+3
 17205  06D8  083E               	movf	??___flmul+2,w
 17206  06D9  00CA               	movwf	___flmul@prod+2
 17207  06DA  083D               	movf	??___flmul+1,w
 17208  06DB  00C9               	movwf	___flmul@prod+1
 17209  06DC  083C               	movf	??___flmul,w
 17210  06DD  00C8               	movwf	___flmul@prod
 17211  06DE  3001               	movlw	1
 17212  06DF  07CC               	addwf	___flmul@temp,f
 17213  06E0  3000               	movlw	0
 17214  06E1  3DCD               	addwfc	___flmul@temp+1,f
 17215  06E2                     l3925:	
 17216  06E2  084D               	movf	___flmul@temp+1,w
 17217  06E3  3A80               	xorlw	128
 17218  06E4  00BC               	movwf	??___flmul
 17219  06E5  3080               	movlw	128
 17220  06E6  023C               	subwf	??___flmul,w
 17221  06E7  1D03               	skipz
 17222  06E8  2EEB               	goto	u4455
 17223  06E9  30FF               	movlw	255
 17224  06EA  024C               	subwf	___flmul@temp,w
 17225  06EB                     u4455:	
 17226  06EB  1C03               	skipc
 17227  06EC  2EF7               	goto	l3929
 17228  06ED  307F               	movlw	127
 17229  06EE  0140               	movlb	0	; select bank0
 17230  06EF  00CB               	movwf	___flmul@prod+3
 17231  06F0  3080               	movlw	128
 17232  06F1  00CA               	movwf	___flmul@prod+2
 17233  06F2  3000               	movlw	0
 17234  06F3  00C9               	movwf	___flmul@prod+1
 17235  06F4  3000               	movlw	0
 17236  06F5  00C8               	movwf	___flmul@prod
 17237  06F6  2F21               	goto	l1174
 17238  06F7                     l3929:	
 17239  06F7  0140               	movlb	0	; select bank0
 17240  06F8  084D               	movf	___flmul@temp+1,w
 17241  06F9  3A80               	xorlw	128
 17242  06FA  00BC               	movwf	??___flmul
 17243  06FB  3080               	movlw	128
 17244  06FC  023C               	subwf	??___flmul,w
 17245  06FD  1D03               	skipz
 17246  06FE  2F01               	goto	u4465
 17247  06FF  3001               	movlw	1
 17248  0700  024C               	subwf	___flmul@temp,w
 17249  0701                     u4465:	
 17250  0701  1803               	skipnc
 17251  0702  2F0E               	goto	l3935
 17252  0703  3000               	movlw	0
 17253  0704  0140               	movlb	0	; select bank0
 17254  0705  00CB               	movwf	___flmul@prod+3
 17255  0706  3000               	movlw	0
 17256  0707  00CA               	movwf	___flmul@prod+2
 17257  0708  3000               	movlw	0
 17258  0709  00C9               	movwf	___flmul@prod+1
 17259  070A  3000               	movlw	0
 17260  070B  00C8               	movwf	___flmul@prod
 17261  070C  01C1               	clrf	___flmul@sign
 17262  070D  2F21               	goto	l1174
 17263  070E                     l3935:	
 17264  070E  0140               	movlb	0	; select bank0
 17265  070F  084C               	movf	___flmul@temp,w
 17266  0710  00BC               	movwf	??___flmul
 17267  0711  083C               	movf	??___flmul,w
 17268  0712  00C7               	movwf	___flmul@bexp
 17269  0713  30FF               	movlw	255
 17270  0714  05C8               	andwf	___flmul@prod,f
 17271  0715  30FF               	movlw	255
 17272  0716  05C9               	andwf	___flmul@prod+1,f
 17273  0717  307F               	movlw	127
 17274  0718  05CA               	andwf	___flmul@prod+2,f
 17275  0719  3000               	movlw	0
 17276  071A  05CB               	andwf	___flmul@prod+3,f
 17277  071B  1847               	btfsc	___flmul@bexp,0
 17278  071C  17CA               	bsf	___flmul@prod+2,7
 17279  071D  3647               	lsrf	___flmul@bexp,w
 17280  071E  00BC               	movwf	??___flmul
 17281  071F  083C               	movf	??___flmul,w
 17282  0720  00CB               	movwf	___flmul@prod+3
 17283  0721                     l1174:	
 17284  0721  0841               	movf	___flmul@sign,w
 17285  0722  00BC               	movwf	??___flmul
 17286  0723  083C               	movf	??___flmul,w
 17287  0724  04CB               	iorwf	___flmul@prod+3,f
 17288  0725  084B               	movf	___flmul@prod+3,w
 17289  0726  00B7               	movwf	?___flmul+3
 17290  0727  084A               	movf	___flmul@prod+2,w
 17291  0728  00B6               	movwf	?___flmul+2
 17292  0729  0849               	movf	___flmul@prod+1,w
 17293  072A  00B5               	movwf	?___flmul+1
 17294  072B  0848               	movf	___flmul@prod,w
 17295  072C  00B4               	movwf	?___flmul
 17296  072D  0008               	return
 17297  072E                     __end_of___flmul:	
 17298                           
 17299                           	psect	text56
 17300  2280                     __ptext56:	
 17301 ;; *************** function __Umul8_16 *****************
 17302 ;; Defined at:
 17303 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 17304 ;; Parameters:    Size  Location     Type
 17305 ;;  multiplier      1    wreg     unsigned char 
 17306 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 17307 ;; Auto vars:     Size  Location     Type
 17308 ;;  multiplier      1    8[BANK0 ] unsigned char 
 17309 ;;  word_mpld       2    6[BANK0 ] unsigned int 
 17310 ;;  product         2    4[BANK0 ] unsigned int 
 17311 ;; Return value:  Size  Location     Type
 17312 ;;                  2    0[BANK0 ] unsigned int 
 17313 ;; Registers used:
 17314 ;;		wreg, status,2, status,0
 17315 ;; Tracked objects:
 17316 ;;		On entry : 0/0
 17317 ;;		On exit  : 0/0
 17318 ;;		Unchanged: 0/0
 17319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17320 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17321 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17323 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17324 ;;Total ram usage:        9 bytes
 17325 ;; Hardware stack levels used:    1
 17326 ;; Hardware stack levels required when called:    3
 17327 ;; This function calls:
 17328 ;;		Nothing
 17329 ;; This function is called by:
 17330 ;;		___flmul
 17331 ;; This function uses a non-reentrant model
 17332 ;;
 17333                           
 17334                           
 17335                           ;psect for function __Umul8_16
 17336  2280                     __Umul8_16:	
 17337                           
 17338                           ;incstack = 0
 17339                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 17340                           ;__Umul8_16@multiplier stored from wreg
 17341  2280  0140               	movlb	0	; select bank0
 17342  2281  00A8               	movwf	__Umul8_16@multiplier
 17343  2282  01A4               	clrf	__Umul8_16@product
 17344  2283  01A5               	clrf	__Umul8_16@product+1
 17345  2284  0820               	movf	__Umul8_16@multiplicand,w
 17346  2285  00A2               	movwf	??__Umul8_16
 17347  2286  01A3               	clrf	??__Umul8_16+1
 17348  2287  0822               	movf	??__Umul8_16,w
 17349  2288  00A6               	movwf	__Umul8_16@word_mpld
 17350  2289  0823               	movf	??__Umul8_16+1,w
 17351  228A  00A7               	movwf	__Umul8_16@word_mpld+1
 17352  228B                     l3471:	
 17353  228B  1C28               	btfss	__Umul8_16@multiplier,0
 17354  228C  2A91               	goto	l1229
 17355  228D  0826               	movf	__Umul8_16@word_mpld,w
 17356  228E  07A4               	addwf	__Umul8_16@product,f
 17357  228F  0827               	movf	__Umul8_16@word_mpld+1,w
 17358  2290  3DA5               	addwfc	__Umul8_16@product+1,f
 17359  2291                     l1229:	
 17360  2291  3001               	movlw	1
 17361  2292                     u3495:	
 17362  2292  35A6               	lslf	__Umul8_16@word_mpld,f
 17363  2293  0DA7               	rlf	__Umul8_16@word_mpld+1,f
 17364  2294  0B89               	decfsz	9,f
 17365  2295  2A92               	goto	u3495
 17366  2296  1003               	clrc
 17367  2297  0CA8               	rrf	__Umul8_16@multiplier,f
 17368  2298  0828               	movf	__Umul8_16@multiplier,w
 17369  2299  1D03               	btfss	3,2
 17370  229A  2A8B               	goto	l3471
 17371  229B  0825               	movf	__Umul8_16@product+1,w
 17372  229C  00A1               	movwf	?__Umul8_16+1
 17373  229D  0824               	movf	__Umul8_16@product,w
 17374  229E  00A0               	movwf	?__Umul8_16
 17375  229F  0008               	return
 17376  22A0                     __end_of__Umul8_16:	
 17377                           
 17378                           	psect	text57
 17379  1374                     __ptext57:	
 17380 ;; *************** function ___fldiv *****************
 17381 ;; Defined at:
 17382 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 17383 ;; Parameters:    Size  Location     Type
 17384 ;;  a               4   46[BANK0 ] unsigned int 
 17385 ;;  b               4   50[BANK0 ] unsigned int 
 17386 ;; Auto vars:     Size  Location     Type
 17387 ;;  grs             4   66[BANK0 ] unsigned long 
 17388 ;;  rem             4   59[BANK0 ] unsigned long 
 17389 ;;  new_exp         2   64[BANK0 ] int 
 17390 ;;  aexp            1   71[BANK0 ] unsigned char 
 17391 ;;  bexp            1   70[BANK0 ] unsigned char 
 17392 ;;  sign            1   63[BANK0 ] unsigned char 
 17393 ;; Return value:  Size  Location     Type
 17394 ;;                  4   46[BANK0 ] unsigned char 
 17395 ;; Registers used:
 17396 ;;		wreg, status,2, status,0
 17397 ;; Tracked objects:
 17398 ;;		On entry : 0/0
 17399 ;;		On exit  : 0/0
 17400 ;;		Unchanged: 0/0
 17401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17402 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17403 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17404 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17405 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17406 ;;Total ram usage:       26 bytes
 17407 ;; Hardware stack levels used:    1
 17408 ;; Hardware stack levels required when called:    3
 17409 ;; This function calls:
 17410 ;;		Nothing
 17411 ;; This function is called by:
 17412 ;;		_calcRequiredPower
 17413 ;;		_getAvgChannelCurrents
 17414 ;;		_convertAnalogValues
 17415 ;;		_ftoa
 17416 ;; This function uses a non-reentrant model
 17417 ;;
 17418                           
 17419                           
 17420                           ;psect for function ___fldiv
 17421  1374                     ___fldiv:	
 17422                           
 17423                           ;incstack = 0
 17424                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 17425  1374  0140               	movlb	0	; select bank0
 17426  1375  0855               	movf	___fldiv@b+3,w
 17427  1376  3980               	andlw	128
 17428  1377  00D6               	movwf	??___fldiv
 17429  1378  0856               	movf	??___fldiv,w
 17430  1379  00DF               	movwf	___fldiv@sign
 17431  137A  3555               	lslf	___fldiv@b+3,w
 17432  137B  00D6               	movwf	??___fldiv
 17433  137C  0856               	movf	??___fldiv,w
 17434  137D  00E6               	movwf	___fldiv@bexp
 17435  137E  1BD4               	btfsc	___fldiv@b+2,7
 17436  137F  1466               	bsf	___fldiv@bexp,0
 17437  1380  0866               	movf	___fldiv@bexp,w
 17438  1381  1903               	btfsc	3,2
 17439  1382  2B91               	goto	l3685
 17440  1383  0A66               	incf	___fldiv@bexp,w
 17441  1384  1D03               	btfss	3,2
 17442  1385  2B8E               	goto	l3681
 17443  1386  3000               	movlw	0
 17444  1387  00D5               	movwf	___fldiv@b+3
 17445  1388  3000               	movlw	0
 17446  1389  00D4               	movwf	___fldiv@b+2
 17447  138A  3000               	movlw	0
 17448  138B  00D3               	movwf	___fldiv@b+1
 17449  138C  3000               	movlw	0
 17450  138D  00D2               	movwf	___fldiv@b
 17451  138E                     l3681:	
 17452  138E  17D4               	bsf	___fldiv@b+2,7
 17453  138F  01D5               	clrf	___fldiv@b+3
 17454  1390  2B99               	goto	l3687
 17455  1391                     l3685:	
 17456  1391  3000               	movlw	0
 17457  1392  00D5               	movwf	___fldiv@b+3
 17458  1393  3000               	movlw	0
 17459  1394  00D4               	movwf	___fldiv@b+2
 17460  1395  3000               	movlw	0
 17461  1396  00D3               	movwf	___fldiv@b+1
 17462  1397  3000               	movlw	0
 17463  1398  00D2               	movwf	___fldiv@b
 17464  1399                     l3687:	
 17465  1399  0851               	movf	___fldiv@a+3,w
 17466  139A  3980               	andlw	128
 17467  139B  00D6               	movwf	??___fldiv
 17468  139C  0856               	movf	??___fldiv,w
 17469  139D  06DF               	xorwf	___fldiv@sign,f
 17470  139E  3551               	lslf	___fldiv@a+3,w
 17471  139F  00D6               	movwf	??___fldiv
 17472  13A0  0856               	movf	??___fldiv,w
 17473  13A1  00E7               	movwf	___fldiv@aexp
 17474  13A2  1BD0               	btfsc	___fldiv@a+2,7
 17475  13A3  1467               	bsf	___fldiv@aexp,0
 17476  13A4  0867               	movf	___fldiv@aexp,w
 17477  13A5  1903               	btfsc	3,2
 17478  13A6  2BB5               	goto	l3705
 17479  13A7  0A67               	incf	___fldiv@aexp,w
 17480  13A8  1D03               	btfss	3,2
 17481  13A9  2BB2               	goto	l3701
 17482  13AA  3000               	movlw	0
 17483  13AB  00D1               	movwf	___fldiv@a+3
 17484  13AC  3000               	movlw	0
 17485  13AD  00D0               	movwf	___fldiv@a+2
 17486  13AE  3000               	movlw	0
 17487  13AF  00CF               	movwf	___fldiv@a+1
 17488  13B0  3000               	movlw	0
 17489  13B1  00CE               	movwf	___fldiv@a
 17490  13B2                     l3701:	
 17491  13B2  17D0               	bsf	___fldiv@a+2,7
 17492  13B3  01D1               	clrf	___fldiv@a+3
 17493  13B4  2BBD               	goto	l1122
 17494  13B5                     l3705:	
 17495  13B5  3000               	movlw	0
 17496  13B6  00D1               	movwf	___fldiv@a+3
 17497  13B7  3000               	movlw	0
 17498  13B8  00D0               	movwf	___fldiv@a+2
 17499  13B9  3000               	movlw	0
 17500  13BA  00CF               	movwf	___fldiv@a+1
 17501  13BB  3000               	movlw	0
 17502  13BC  00CE               	movwf	___fldiv@a
 17503  13BD                     l1122:	
 17504  13BD  0851               	movf	___fldiv@a+3,w
 17505  13BE  0450               	iorwf	___fldiv@a+2,w
 17506  13BF  044F               	iorwf	___fldiv@a+1,w
 17507  13C0  044E               	iorwf	___fldiv@a,w
 17508  13C1  1D03               	skipz
 17509  13C2  2BDC               	goto	l3715
 17510  13C3  3000               	movlw	0
 17511  13C4  00D5               	movwf	___fldiv@b+3
 17512  13C5  3000               	movlw	0
 17513  13C6  00D4               	movwf	___fldiv@b+2
 17514  13C7  3000               	movlw	0
 17515  13C8  00D3               	movwf	___fldiv@b+1
 17516  13C9  3000               	movlw	0
 17517  13CA  00D2               	movwf	___fldiv@b
 17518  13CB  3080               	movlw	128
 17519  13CC  04D4               	iorwf	___fldiv@b+2,f
 17520  13CD  307F               	movlw	127
 17521  13CE  04D5               	iorwf	___fldiv@b+3,f
 17522  13CF                     L12:	
 17523  13CF  085F               	movf	___fldiv@sign,w
 17524  13D0  00D6               	movwf	??___fldiv
 17525  13D1  0856               	movf	??___fldiv,w
 17526  13D2  04D5               	iorwf	___fldiv@b+3,f
 17527  13D3  0855               	movf	___fldiv@b+3,w
 17528  13D4  00D1               	movwf	?___fldiv+3
 17529  13D5  0854               	movf	___fldiv@b+2,w
 17530  13D6  00D0               	movwf	?___fldiv+2
 17531  13D7  0853               	movf	___fldiv@b+1,w
 17532  13D8  00CF               	movwf	?___fldiv+1
 17533  13D9  0852               	movf	___fldiv@b,w
 17534  13DA  00CE               	movwf	?___fldiv
 17535  13DB  0008               	return
 17536  13DC                     l3715:	
 17537  13DC  0866               	movf	___fldiv@bexp,w
 17538  13DD  1D03               	btfss	3,2
 17539  13DE  2BE8               	goto	l3721
 17540  13DF  3000               	movlw	0
 17541  13E0  00D1               	movwf	?___fldiv+3
 17542  13E1  3000               	movlw	0
 17543  13E2  00D0               	movwf	?___fldiv+2
 17544  13E3  3000               	movlw	0
 17545  13E4  00CF               	movwf	?___fldiv+1
 17546  13E5  3000               	movlw	0
 17547  13E6  00CE               	movwf	?___fldiv
 17548  13E7  0008               	return
 17549  13E8                     l3721:	
 17550  13E8  0866               	movf	___fldiv@bexp,w
 17551  13E9  00D6               	movwf	??___fldiv
 17552  13EA  01D7               	clrf	??___fldiv+1
 17553  13EB  0857               	movf	??___fldiv+1,w
 17554  13EC  00D9               	movwf	??___fldiv+3
 17555  13ED  0867               	movf	___fldiv@aexp,w
 17556  13EE  0256               	subwf	??___fldiv,w
 17557  13EF  00D8               	movwf	??___fldiv+2
 17558  13F0  1C03               	skipc
 17559  13F1  03D9               	decf	??___fldiv+3,f
 17560  13F2  0858               	movf	??___fldiv+2,w
 17561  13F3  3E7F               	addlw	127
 17562  13F4  00E0               	movwf	___fldiv@new_exp
 17563  13F5  3000               	movlw	0
 17564  13F6  3D59               	addwfc	??___fldiv+3,w
 17565  13F7  00E1               	movwf	___fldiv@new_exp+1
 17566  13F8  0855               	movf	___fldiv@b+3,w
 17567  13F9  00DE               	movwf	___fldiv@rem+3
 17568  13FA  0854               	movf	___fldiv@b+2,w
 17569  13FB  00DD               	movwf	___fldiv@rem+2
 17570  13FC  0853               	movf	___fldiv@b+1,w
 17571  13FD  00DC               	movwf	___fldiv@rem+1
 17572  13FE  0852               	movf	___fldiv@b,w
 17573  13FF  00DB               	movwf	___fldiv@rem
 17574  1400  3000               	movlw	0
 17575  1401  00D5               	movwf	___fldiv@b+3
 17576  1402  3000               	movlw	0
 17577  1403  00D4               	movwf	___fldiv@b+2
 17578  1404  3000               	movlw	0
 17579  1405  00D3               	movwf	___fldiv@b+1
 17580  1406  3000               	movlw	0
 17581  1407  00D2               	movwf	___fldiv@b
 17582  1408  3000               	movlw	0
 17583  1409  00E5               	movwf	___fldiv@grs+3
 17584  140A  3000               	movlw	0
 17585  140B  00E4               	movwf	___fldiv@grs+2
 17586  140C  3000               	movlw	0
 17587  140D  00E3               	movwf	___fldiv@grs+1
 17588  140E  3000               	movlw	0
 17589  140F  00E2               	movwf	___fldiv@grs
 17590  1410  01E7               	clrf	___fldiv@aexp
 17591  1411                     l3749:	
 17592  1411  301A               	movlw	26
 17593  1412  0267               	subwf	___fldiv@aexp,w
 17594  1413  1803               	btfsc	3,0
 17595  1414  2C4D               	goto	l3751
 17596  1415  0867               	movf	___fldiv@aexp,w
 17597  1416  1903               	btfsc	3,2
 17598  1417  2C2F               	goto	l3741
 17599  1418  3001               	movlw	1
 17600  1419                     u4025:	
 17601  1419  35DB               	lslf	___fldiv@rem,f
 17602  141A  0DDC               	rlf	___fldiv@rem+1,f
 17603  141B  0DDD               	rlf	___fldiv@rem+2,f
 17604  141C  0DDE               	rlf	___fldiv@rem+3,f
 17605  141D  0B89               	decfsz	9,f
 17606  141E  2C19               	goto	u4025
 17607  141F  3001               	movlw	1
 17608  1420                     u4035:	
 17609  1420  35D2               	lslf	___fldiv@b,f
 17610  1421  0DD3               	rlf	___fldiv@b+1,f
 17611  1422  0DD4               	rlf	___fldiv@b+2,f
 17612  1423  0DD5               	rlf	___fldiv@b+3,f
 17613  1424  0B89               	decfsz	9,f
 17614  1425  2C20               	goto	u4035
 17615  1426  1BE5               	btfsc	___fldiv@grs+3,7
 17616  1427  1452               	bsf	___fldiv@b,0
 17617  1428  3001               	movlw	1
 17618  1429                     u4055:	
 17619  1429  35E2               	lslf	___fldiv@grs,f
 17620  142A  0DE3               	rlf	___fldiv@grs+1,f
 17621  142B  0DE4               	rlf	___fldiv@grs+2,f
 17622  142C  0DE5               	rlf	___fldiv@grs+3,f
 17623  142D  0B89               	decfsz	9,f
 17624  142E  2C29               	goto	u4055
 17625  142F                     l3741:	
 17626  142F  0851               	movf	___fldiv@a+3,w
 17627  1430  025E               	subwf	___fldiv@rem+3,w
 17628  1431  1D03               	skipz
 17629  1432  2C3D               	goto	u4065
 17630  1433  0850               	movf	___fldiv@a+2,w
 17631  1434  025D               	subwf	___fldiv@rem+2,w
 17632  1435  1D03               	skipz
 17633  1436  2C3D               	goto	u4065
 17634  1437  084F               	movf	___fldiv@a+1,w
 17635  1438  025C               	subwf	___fldiv@rem+1,w
 17636  1439  1D03               	skipz
 17637  143A  2C3D               	goto	u4065
 17638  143B  084E               	movf	___fldiv@a,w
 17639  143C  025B               	subwf	___fldiv@rem,w
 17640  143D                     u4065:	
 17641  143D  1C03               	skipc
 17642  143E  2C48               	goto	l3747
 17643  143F  1765               	bsf	___fldiv@grs+3,6
 17644  1440  084E               	movf	___fldiv@a,w
 17645  1441  02DB               	subwf	___fldiv@rem,f
 17646  1442  084F               	movf	___fldiv@a+1,w
 17647  1443  3BDC               	subwfb	___fldiv@rem+1,f
 17648  1444  0850               	movf	___fldiv@a+2,w
 17649  1445  3BDD               	subwfb	___fldiv@rem+2,f
 17650  1446  0851               	movf	___fldiv@a+3,w
 17651  1447  3BDE               	subwfb	___fldiv@rem+3,f
 17652  1448                     l3747:	
 17653  1448  3001               	movlw	1
 17654  1449  00D6               	movwf	??___fldiv
 17655  144A  0856               	movf	??___fldiv,w
 17656  144B  07E7               	addwf	___fldiv@aexp,f
 17657  144C  2C11               	goto	l3749
 17658  144D                     l3751:	
 17659  144D  085E               	movf	___fldiv@rem+3,w
 17660  144E  045D               	iorwf	___fldiv@rem+2,w
 17661  144F  045C               	iorwf	___fldiv@rem+1,w
 17662  1450  045B               	iorwf	___fldiv@rem,w
 17663  1451  1D03               	btfss	3,2
 17664  1452  1462               	bsf	___fldiv@grs,0
 17665  1453                     l3765:	
 17666  1453  1BD4               	btfsc	___fldiv@b+2,7
 17667  1454  2C6A               	goto	l3767
 17668  1455  3001               	movlw	1
 17669  1456                     u4095:	
 17670  1456  35D2               	lslf	___fldiv@b,f
 17671  1457  0DD3               	rlf	___fldiv@b+1,f
 17672  1458  0DD4               	rlf	___fldiv@b+2,f
 17673  1459  0DD5               	rlf	___fldiv@b+3,f
 17674  145A  0B89               	decfsz	9,f
 17675  145B  2C56               	goto	u4095
 17676  145C  1BE5               	btfsc	___fldiv@grs+3,7
 17677  145D  1452               	bsf	___fldiv@b,0
 17678  145E  3001               	movlw	1
 17679  145F                     u4115:	
 17680  145F  35E2               	lslf	___fldiv@grs,f
 17681  1460  0DE3               	rlf	___fldiv@grs+1,f
 17682  1461  0DE4               	rlf	___fldiv@grs+2,f
 17683  1462  0DE5               	rlf	___fldiv@grs+3,f
 17684  1463  0B89               	decfsz	9,f
 17685  1464  2C5F               	goto	u4115
 17686  1465  30FF               	movlw	255
 17687  1466  07E0               	addwf	___fldiv@new_exp,f
 17688  1467  30FF               	movlw	255
 17689  1468  3DE1               	addwfc	___fldiv@new_exp+1,f
 17690  1469  2C53               	goto	l3765
 17691  146A                     l3767:	
 17692  146A  01E7               	clrf	___fldiv@aexp
 17693  146B  1FE5               	btfss	___fldiv@grs+3,7
 17694  146C  2C83               	goto	l3777
 17695  146D  30FF               	movlw	255
 17696  146E  0562               	andwf	___fldiv@grs,w
 17697  146F  00D6               	movwf	??___fldiv
 17698  1470  30FF               	movlw	255
 17699  1471  0563               	andwf	___fldiv@grs+1,w
 17700  1472  00D7               	movwf	??___fldiv+1
 17701  1473  30FF               	movlw	255
 17702  1474  0564               	andwf	___fldiv@grs+2,w
 17703  1475  00D8               	movwf	??___fldiv+2
 17704  1476  307F               	movlw	127
 17705  1477  0565               	andwf	___fldiv@grs+3,w
 17706  1478  00D9               	movwf	??___fldiv+3
 17707  1479  0859               	movf	??___fldiv+3,w
 17708  147A  0458               	iorwf	??___fldiv+2,w
 17709  147B  0457               	iorwf	??___fldiv+1,w
 17710  147C  0456               	iorwf	??___fldiv,w
 17711  147D  1903               	skipnz
 17712  147E  1852               	btfsc	___fldiv@b,0
 17713  147F  2C81               	goto	l3773
 17714  1480  2C83               	goto	l3777
 17715  1481                     l3773:	
 17716  1481  01E7               	clrf	___fldiv@aexp
 17717  1482  0AE7               	incf	___fldiv@aexp,f
 17718  1483                     l3777:	
 17719  1483  0867               	movf	___fldiv@aexp,w
 17720  1484  1903               	btfsc	3,2
 17721  1485  2CAC               	goto	l3787
 17722  1486  3001               	movlw	1
 17723  1487  07D2               	addwf	___fldiv@b,f
 17724  1488  3000               	movlw	0
 17725  1489  3DD3               	addwfc	___fldiv@b+1,f
 17726  148A  3000               	movlw	0
 17727  148B  3DD4               	addwfc	___fldiv@b+2,f
 17728  148C  3000               	movlw	0
 17729  148D  3DD5               	addwfc	___fldiv@b+3,f
 17730  148E  1C55               	btfss	___fldiv@b+3,0
 17731  148F  2CAC               	goto	l3787
 17732  1490  0852               	movf	___fldiv@b,w
 17733  1491  00D6               	movwf	??___fldiv
 17734  1492  0853               	movf	___fldiv@b+1,w
 17735  1493  00D7               	movwf	??___fldiv+1
 17736  1494  0854               	movf	___fldiv@b+2,w
 17737  1495  00D8               	movwf	??___fldiv+2
 17738  1496  0855               	movf	___fldiv@b+3,w
 17739  1497  00D9               	movwf	??___fldiv+3
 17740  1498  3001               	movlw	1
 17741  1499  00DA               	movwf	??___fldiv+4
 17742  149A                     u4185:	
 17743  149A  37D9               	asrf	??___fldiv+3,f
 17744  149B  0CD8               	rrf	??___fldiv+2,f
 17745  149C  0CD7               	rrf	??___fldiv+1,f
 17746  149D  0CD6               	rrf	??___fldiv,f
 17747  149E  0BDA               	decfsz	??___fldiv+4,f
 17748  149F  2C9A               	goto	u4185
 17749  14A0  0859               	movf	??___fldiv+3,w
 17750  14A1  00D5               	movwf	___fldiv@b+3
 17751  14A2  0858               	movf	??___fldiv+2,w
 17752  14A3  00D4               	movwf	___fldiv@b+2
 17753  14A4  0857               	movf	??___fldiv+1,w
 17754  14A5  00D3               	movwf	___fldiv@b+1
 17755  14A6  0856               	movf	??___fldiv,w
 17756  14A7  00D2               	movwf	___fldiv@b
 17757  14A8  3001               	movlw	1
 17758  14A9  07E0               	addwf	___fldiv@new_exp,f
 17759  14AA  3000               	movlw	0
 17760  14AB  3DE1               	addwfc	___fldiv@new_exp+1,f
 17761  14AC                     l3787:	
 17762  14AC  0861               	movf	___fldiv@new_exp+1,w
 17763  14AD  3A80               	xorlw	128
 17764  14AE  00D6               	movwf	??___fldiv
 17765  14AF  3080               	movlw	128
 17766  14B0  0256               	subwf	??___fldiv,w
 17767  14B1  1D03               	skipz
 17768  14B2  2CB5               	goto	u4195
 17769  14B3  30FF               	movlw	255
 17770  14B4  0260               	subwf	___fldiv@new_exp,w
 17771  14B5                     u4195:	
 17772  14B5  1C03               	skipc
 17773  14B6  2CC4               	goto	l1143
 17774  14B7  30FF               	movlw	255
 17775  14B8  0140               	movlb	0	; select bank0
 17776  14B9  00E0               	movwf	___fldiv@new_exp
 17777  14BA  3000               	movlw	0
 17778  14BB  00E1               	movwf	___fldiv@new_exp+1
 17779  14BC  3000               	movlw	0
 17780  14BD  00D5               	movwf	___fldiv@b+3
 17781  14BE  3000               	movlw	0
 17782  14BF  00D4               	movwf	___fldiv@b+2
 17783  14C0  3000               	movlw	0
 17784  14C1  00D3               	movwf	___fldiv@b+1
 17785  14C2  3000               	movlw	0
 17786  14C3  00D2               	movwf	___fldiv@b
 17787  14C4                     l1143:	
 17788  14C4  0140               	movlb	0	; select bank0
 17789  14C5  0861               	movf	___fldiv@new_exp+1,w
 17790  14C6  3A80               	xorlw	128
 17791  14C7  00D6               	movwf	??___fldiv
 17792  14C8  3080               	movlw	128
 17793  14C9  0256               	subwf	??___fldiv,w
 17794  14CA  1D03               	skipz
 17795  14CB  2CCE               	goto	u4205
 17796  14CC  3001               	movlw	1
 17797  14CD  0260               	subwf	___fldiv@new_exp,w
 17798  14CE                     u4205:	
 17799  14CE  1803               	skipnc
 17800  14CF  2CDC               	goto	l1144
 17801  14D0  0140               	movlb	0	; select bank0
 17802  14D1  01E0               	clrf	___fldiv@new_exp
 17803  14D2  01E1               	clrf	___fldiv@new_exp+1
 17804  14D3  3000               	movlw	0
 17805  14D4  00D5               	movwf	___fldiv@b+3
 17806  14D5  3000               	movlw	0
 17807  14D6  00D4               	movwf	___fldiv@b+2
 17808  14D7  3000               	movlw	0
 17809  14D8  00D3               	movwf	___fldiv@b+1
 17810  14D9  3000               	movlw	0
 17811  14DA  00D2               	movwf	___fldiv@b
 17812  14DB  01DF               	clrf	___fldiv@sign
 17813  14DC                     l1144:	
 17814  14DC  0140               	movlb	0	; select bank0
 17815  14DD  0860               	movf	___fldiv@new_exp,w
 17816  14DE  00D6               	movwf	??___fldiv
 17817  14DF  0856               	movf	??___fldiv,w
 17818  14E0  00E6               	movwf	___fldiv@bexp
 17819  14E1  1C66               	btfss	___fldiv@bexp,0
 17820  14E2  2CE5               	goto	l3801
 17821  14E3  17D4               	bsf	___fldiv@b+2,7
 17822  14E4  2CE9               	goto	l1146
 17823  14E5                     l3801:	
 17824  14E5  307F               	movlw	127
 17825  14E6  00D6               	movwf	??___fldiv
 17826  14E7  0856               	movf	??___fldiv,w
 17827  14E8  05D4               	andwf	___fldiv@b+2,f
 17828  14E9                     l1146:	
 17829  14E9  3666               	lsrf	___fldiv@bexp,w
 17830  14EA  00D6               	movwf	??___fldiv
 17831  14EB  0856               	movf	??___fldiv,w
 17832  14EC  00D5               	movwf	___fldiv@b+3
 17833  14ED  2BCF               	goto	L12
 17834  14EE                     __end_of___fldiv:	
 17835                           
 17836                           	psect	text58
 17837  22A0                     __ptext58:	
 17838 ;; *************** function _OLED_loadSpecialChars *****************
 17839 ;; Defined at:
 17840 ;;		line 177 in file "oled.c"
 17841 ;; Parameters:    Size  Location     Type
 17842 ;;		None
 17843 ;; Auto vars:     Size  Location     Type
 17844 ;;  special        32    8[BANK0 ] unsigned char [32]
 17845 ;;  n               1   40[BANK0 ] unsigned char 
 17846 ;; Return value:  Size  Location     Type
 17847 ;;                  1    wreg      void 
 17848 ;; Registers used:
 17849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17850 ;; Tracked objects:
 17851 ;;		On entry : 0/0
 17852 ;;		On exit  : 0/0
 17853 ;;		Unchanged: 0/0
 17854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17856 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17858 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17859 ;;Total ram usage:       34 bytes
 17860 ;; Hardware stack levels used:    1
 17861 ;; Hardware stack levels required when called:    7
 17862 ;; This function calls:
 17863 ;;		_OLED_command
 17864 ;;		_OLED_write
 17865 ;; This function is called by:
 17866 ;;		_main
 17867 ;; This function uses a non-reentrant model
 17868 ;;
 17869                           
 17870                           
 17871                           ;psect for function _OLED_loadSpecialChars
 17872  22A0                     _OLED_loadSpecialChars:	
 17873                           
 17874                           ;oled.c: 179:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 17875                           
 17876                           ;incstack = 0
 17877                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17878  22A0  30A0               	movlw	low OLED_loadSpecialChars@F7945
 17879  22A1  0086               	movwf	6
 17880  22A2  3001               	movlw	high OLED_loadSpecialChars@F7945
 17881  22A3  0087               	movwf	7
 17882  22A4  3028               	movlw	low OLED_loadSpecialChars@special
 17883  22A5  0084               	movwf	4
 17884  22A6  3000               	movlw	high OLED_loadSpecialChars@special
 17885  22A7  0085               	movwf	5
 17886  22A8  3020               	movlw	32
 17887  22A9  0140               	movlb	0	; select bank0
 17888  22AA  00A7               	movwf	??_OLED_loadSpecialChars
 17889  22AB                     u5360:	
 17890  22AB  0016               	moviw fsr1++
 17891  22AC  001A               	movwi fsr0++
 17892  22AD  0BA7               	decfsz	??_OLED_loadSpecialChars,f
 17893  22AE  2AAB               	goto	u5360
 17894                           
 17895                           ;oled.c: 184:  uint8_t n;;oled.c: 186:  OLED_command(0x40 + 8);
 17896  22AF  3048               	movlw	72
 17897  22B0  31A1  21A2  31A2   	fcall	_OLED_command
 17898                           
 17899                           ;oled.c: 187:  for(n = 0; n < sizeof(special); n++) {
 17900  22B3  0140               	movlb	0	; select bank0
 17901  22B4  01C8               	clrf	OLED_loadSpecialChars@n
 17902  22B5                     l4771:	
 17903                           
 17904                           ;oled.c: 188:   OLED_write(special[n]);
 17905  22B5  0848               	movf	OLED_loadSpecialChars@n,w
 17906  22B6  3E28               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 17907  22B7  0086               	movwf	6
 17908  22B8  0187               	clrf	7
 17909  22B9  0801               	movf	1,w
 17910  22BA  31A1  21C0  31A2   	fcall	_OLED_write
 17911                           
 17912                           ;oled.c: 189:  }
 17913  22BD  3001               	movlw	1
 17914  22BE  0140               	movlb	0	; select bank0
 17915  22BF  00A7               	movwf	??_OLED_loadSpecialChars
 17916  22C0  0827               	movf	??_OLED_loadSpecialChars,w
 17917  22C1  07C8               	addwf	OLED_loadSpecialChars@n,f
 17918  22C2  3020               	movlw	32
 17919  22C3  0248               	subwf	OLED_loadSpecialChars@n,w
 17920  22C4  1803               	btfsc	3,0
 17921  22C5  0008               	return
 17922  22C6  2AB5               	goto	l4771
 17923  22C7                     __end_of_OLED_loadSpecialChars:	
 17924                           
 17925                           	psect	text59
 17926  21C0                     __ptext59:	
 17927 ;; *************** function _OLED_write *****************
 17928 ;; Defined at:
 17929 ;;		line 79 in file "oled.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;  value           1    wreg     unsigned char 
 17932 ;; Auto vars:     Size  Location     Type
 17933 ;;  value           1    6[BANK0 ] unsigned char 
 17934 ;; Return value:  Size  Location     Type
 17935 ;;                  1    wreg      void 
 17936 ;; Registers used:
 17937 ;;		wreg, status,2, status,0, pclath, cstack
 17938 ;; Tracked objects:
 17939 ;;		On entry : 0/0
 17940 ;;		On exit  : 0/0
 17941 ;;		Unchanged: 0/0
 17942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17947 ;;Total ram usage:        1 bytes
 17948 ;; Hardware stack levels used:    1
 17949 ;; Hardware stack levels required when called:    6
 17950 ;; This function calls:
 17951 ;;		_OLED_send
 17952 ;;		_OLED_waitForReady
 17953 ;; This function is called by:
 17954 ;;		_OLED_print_xy
 17955 ;;		_OLED_loadSpecialChars
 17956 ;;		_OLED_print
 17957 ;; This function uses a non-reentrant model
 17958 ;;
 17959                           
 17960                           
 17961                           ;psect for function _OLED_write
 17962  21C0                     _OLED_write:	
 17963                           
 17964                           ;incstack = 0
 17965                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 17966                           ;OLED_write@value stored from wreg
 17967  21C0  0140               	movlb	0	; select bank0
 17968  21C1  00A6               	movwf	OLED_write@value
 17969                           
 17970                           ;oled.c: 79: void OLED_write(uint8_t value);oled.c: 80: {;oled.c: 81:  OLED_send(value, 
      +                          1);
 17971  21C2  01A3               	clrf	OLED_send@mode
 17972  21C3  0AA3               	incf	OLED_send@mode,f
 17973  21C4  0826               	movf	OLED_write@value,w
 17974  21C5  3187  27E8  31A1   	fcall	_OLED_send
 17975                           
 17976                           ;oled.c: 82:  OLED_waitForReady();
 17977  21C8  31A2  2242         	fcall	_OLED_waitForReady
 17978  21CA  0008               	return
 17979  21CB                     __end_of_OLED_write:	
 17980                           
 17981                           	psect	text60
 17982  1A6D                     __ptext60:	
 17983 ;; *************** function _OLED_init *****************
 17984 ;; Defined at:
 17985 ;;		line 85 in file "oled.c"
 17986 ;; Parameters:    Size  Location     Type
 17987 ;;		None
 17988 ;; Auto vars:     Size  Location     Type
 17989 ;;		None
 17990 ;; Return value:  Size  Location     Type
 17991 ;;                  1    wreg      void 
 17992 ;; Registers used:
 17993 ;;		wreg, status,2, status,0, pclath, cstack
 17994 ;; Tracked objects:
 17995 ;;		On entry : 0/0
 17996 ;;		On exit  : 0/0
 17997 ;;		Unchanged: 0/0
 17998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18001 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18002 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18003 ;;Total ram usage:        1 bytes
 18004 ;; Hardware stack levels used:    1
 18005 ;; Hardware stack levels required when called:    7
 18006 ;; This function calls:
 18007 ;;		_OLED_command
 18008 ;;		_OLED_write4bits
 18009 ;; This function is called by:
 18010 ;;		_main
 18011 ;; This function uses a non-reentrant model
 18012 ;;
 18013                           
 18014                           
 18015                           ;psect for function _OLED_init
 18016  1A6D                     _OLED_init:	
 18017                           
 18018                           ;oled.c: 87:  LATBbits.LATB4 = 0;
 18019                           
 18020                           ;incstack = 0
 18021                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 18022  1A6D  0140               	movlb	0	; select bank0
 18023  1A6E  1219               	bcf	25,4	;volatile
 18024                           
 18025                           ;oled.c: 88:  LATBbits.LATB2 = 0;
 18026  1A6F  1119               	bcf	25,2	;volatile
 18027                           
 18028                           ;oled.c: 89:  LATBbits.LATB3 = 0;
 18029  1A70  1199               	bcf	25,3	;volatile
 18030                           
 18031                           ;oled.c: 91:  _delay((unsigned long)((50)*(4000000/4000.0)));
 18032  1A71  3041               	movlw	65
 18033  1A72  0140               	movlb	0	; select bank0
 18034  1A73  00A7               	movwf	??_OLED_init
 18035  1A74  30EE               	movlw	238
 18036  1A75                     u6367:	
 18037  1A75  0B89               	decfsz	9,f
 18038  1A76  2A75               	goto	u6367
 18039  1A77  0BA7               	decfsz	??_OLED_init,f
 18040  1A78  2A75               	goto	u6367
 18041  1A79  0000               	nop
 18042                           
 18043                           ;oled.c: 95:  LATBbits.LATB1 = 0;
 18044  1A7A  0140               	movlb	0	; select bank0
 18045  1A7B  1099               	bcf	25,1	;volatile
 18046                           
 18047                           ;oled.c: 96:  LATBbits.LATB0 = 0;
 18048  1A7C  1019               	bcf	25,0	;volatile
 18049                           
 18050                           ;oled.c: 97:  LATCbits.LATC5 = 0;
 18051  1A7D  129A               	bcf	26,5	;volatile
 18052                           
 18053                           ;oled.c: 98:  LATCbits.LATC4 = 0;
 18054  1A7E  121A               	bcf	26,4	;volatile
 18055                           
 18056                           ;oled.c: 109:  OLED_write4bits(0x03);
 18057  1A7F  3003               	movlw	3
 18058  1A80  31A4  2424  319A   	fcall	_OLED_write4bits
 18059                           
 18060                           ;oled.c: 110:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18061  1A83  3007               	movlw	7
 18062  1A84  0140               	movlb	0	; select bank0
 18063  1A85  00A7               	movwf	??_OLED_init
 18064  1A86  307D               	movlw	125
 18065  1A87                     u6377:	
 18066  1A87  0B89               	decfsz	9,f
 18067  1A88  2A87               	goto	u6377
 18068  1A89  0BA7               	decfsz	??_OLED_init,f
 18069  1A8A  2A87               	goto	u6377
 18070                           
 18071                           ;oled.c: 111:  OLED_write4bits(0x08);
 18072  1A8B  3008               	movlw	8
 18073  1A8C  31A4  2424  319A   	fcall	_OLED_write4bits
 18074                           
 18075                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18076  1A8F  3007               	movlw	7
 18077  1A90  0140               	movlb	0	; select bank0
 18078  1A91  00A7               	movwf	??_OLED_init
 18079  1A92  307D               	movlw	125
 18080  1A93                     u6387:	
 18081  1A93  0B89               	decfsz	9,f
 18082  1A94  2A93               	goto	u6387
 18083  1A95  0BA7               	decfsz	??_OLED_init,f
 18084  1A96  2A93               	goto	u6387
 18085                           
 18086                           ;oled.c: 114:  OLED_write4bits(0x02);
 18087  1A97  3002               	movlw	2
 18088  1A98  31A4  2424  319A   	fcall	_OLED_write4bits
 18089                           
 18090                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18091  1A9B  3007               	movlw	7
 18092  1A9C  0140               	movlb	0	; select bank0
 18093  1A9D  00A7               	movwf	??_OLED_init
 18094  1A9E  307D               	movlw	125
 18095  1A9F                     u6397:	
 18096  1A9F  0B89               	decfsz	9,f
 18097  1AA0  2A9F               	goto	u6397
 18098  1AA1  0BA7               	decfsz	??_OLED_init,f
 18099  1AA2  2A9F               	goto	u6397
 18100                           
 18101                           ;oled.c: 116:  OLED_write4bits(0x02);
 18102  1AA3  3002               	movlw	2
 18103  1AA4  31A4  2424  319A   	fcall	_OLED_write4bits
 18104                           
 18105                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18106  1AA7  3007               	movlw	7
 18107  1AA8  0140               	movlb	0	; select bank0
 18108  1AA9  00A7               	movwf	??_OLED_init
 18109  1AAA  307D               	movlw	125
 18110  1AAB                     u6407:	
 18111  1AAB  0B89               	decfsz	9,f
 18112  1AAC  2AAB               	goto	u6407
 18113  1AAD  0BA7               	decfsz	??_OLED_init,f
 18114  1AAE  2AAB               	goto	u6407
 18115                           
 18116                           ;oled.c: 118:  OLED_write4bits(0x08);
 18117  1AAF  3008               	movlw	8
 18118  1AB0  31A4  2424  319A   	fcall	_OLED_write4bits
 18119                           
 18120                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18121  1AB3  3007               	movlw	7
 18122  1AB4  0140               	movlb	0	; select bank0
 18123  1AB5  00A7               	movwf	??_OLED_init
 18124  1AB6  307D               	movlw	125
 18125  1AB7                     u6417:	
 18126  1AB7  0B89               	decfsz	9,f
 18127  1AB8  2AB7               	goto	u6417
 18128  1AB9  0BA7               	decfsz	??_OLED_init,f
 18129  1ABA  2AB7               	goto	u6417
 18130                           
 18131                           ;oled.c: 121:  OLED_command(0x08);
 18132  1ABB  3008               	movlw	8
 18133  1ABC  31A1  21A2  319A   	fcall	_OLED_command
 18134                           
 18135                           ;oled.c: 122:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18136  1ABF  3007               	movlw	7
 18137  1AC0  0140               	movlb	0	; select bank0
 18138  1AC1  00A7               	movwf	??_OLED_init
 18139  1AC2  307D               	movlw	125
 18140  1AC3                     u6427:	
 18141  1AC3  0B89               	decfsz	9,f
 18142  1AC4  2AC3               	goto	u6427
 18143  1AC5  0BA7               	decfsz	??_OLED_init,f
 18144  1AC6  2AC3               	goto	u6427
 18145                           
 18146                           ;oled.c: 123:  OLED_command(0x01);
 18147  1AC7  3001               	movlw	1
 18148  1AC8  31A1  21A2  319A   	fcall	_OLED_command
 18149                           
 18150                           ;oled.c: 124:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18151  1ACB  3007               	movlw	7
 18152  1ACC  0140               	movlb	0	; select bank0
 18153  1ACD  00A7               	movwf	??_OLED_init
 18154  1ACE  307D               	movlw	125
 18155  1ACF                     u6437:	
 18156  1ACF  0B89               	decfsz	9,f
 18157  1AD0  2ACF               	goto	u6437
 18158  1AD1  0BA7               	decfsz	??_OLED_init,f
 18159  1AD2  2ACF               	goto	u6437
 18160                           
 18161                           ;oled.c: 125:  OLED_command(0x06);
 18162  1AD3  3006               	movlw	6
 18163  1AD4  31A1  21A2  319A   	fcall	_OLED_command
 18164                           
 18165                           ;oled.c: 126:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18166  1AD7  3007               	movlw	7
 18167  1AD8  0140               	movlb	0	; select bank0
 18168  1AD9  00A7               	movwf	??_OLED_init
 18169  1ADA  307D               	movlw	125
 18170  1ADB                     u6447:	
 18171  1ADB  0B89               	decfsz	9,f
 18172  1ADC  2ADB               	goto	u6447
 18173  1ADD  0BA7               	decfsz	??_OLED_init,f
 18174  1ADE  2ADB               	goto	u6447
 18175                           
 18176                           ;oled.c: 127:  OLED_command(0x02);
 18177  1ADF  3002               	movlw	2
 18178  1AE0  31A1  21A2  319A   	fcall	_OLED_command
 18179                           
 18180                           ;oled.c: 128:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18181  1AE3  3007               	movlw	7
 18182  1AE4  0140               	movlb	0	; select bank0
 18183  1AE5  00A7               	movwf	??_OLED_init
 18184  1AE6  307D               	movlw	125
 18185  1AE7                     u6457:	
 18186  1AE7  0B89               	decfsz	9,f
 18187  1AE8  2AE7               	goto	u6457
 18188  1AE9  0BA7               	decfsz	??_OLED_init,f
 18189  1AEA  2AE7               	goto	u6457
 18190                           
 18191                           ;oled.c: 129:  OLED_command(0x0C);
 18192  1AEB  300C               	movlw	12
 18193  1AEC  31A1  21A2  319A   	fcall	_OLED_command
 18194                           
 18195                           ;oled.c: 130:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18196  1AEF  3007               	movlw	7
 18197  1AF0  0140               	movlb	0	; select bank0
 18198  1AF1  00A7               	movwf	??_OLED_init
 18199  1AF2  307D               	movlw	125
 18200  1AF3                     u6467:	
 18201  1AF3  0B89               	decfsz	9,f
 18202  1AF4  2AF3               	goto	u6467
 18203  1AF5  0BA7               	decfsz	??_OLED_init,f
 18204  1AF6  2AF3               	goto	u6467
 18205  1AF7  0008               	return
 18206  1AF8                     __end_of_OLED_init:	
 18207                           
 18208                           	psect	text61
 18209  21A2                     __ptext61:	
 18210 ;; *************** function _OLED_command *****************
 18211 ;; Defined at:
 18212 ;;		line 73 in file "oled.c"
 18213 ;; Parameters:    Size  Location     Type
 18214 ;;  value           1    wreg     unsigned char 
 18215 ;; Auto vars:     Size  Location     Type
 18216 ;;  value           1    6[BANK0 ] unsigned char 
 18217 ;; Return value:  Size  Location     Type
 18218 ;;                  1    wreg      void 
 18219 ;; Registers used:
 18220 ;;		wreg, status,2, status,0, pclath, cstack
 18221 ;; Tracked objects:
 18222 ;;		On entry : 0/0
 18223 ;;		On exit  : 0/0
 18224 ;;		Unchanged: 0/0
 18225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18229 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18230 ;;Total ram usage:        1 bytes
 18231 ;; Hardware stack levels used:    1
 18232 ;; Hardware stack levels required when called:    6
 18233 ;; This function calls:
 18234 ;;		_OLED_send
 18235 ;;		_OLED_waitForReady
 18236 ;; This function is called by:
 18237 ;;		_OLED_Off
 18238 ;;		_OLED_init
 18239 ;;		_OLED_scrollDisplayLeft
 18240 ;;		_OLED_scrollDisplayRight
 18241 ;;		_OLED_print_xy
 18242 ;;		_OLED_returnHome
 18243 ;;		_OLED_clearDisplay
 18244 ;;		_OLED_loadSpecialChars
 18245 ;;		_returnToPage
 18246 ;;		_OLED_setCursor
 18247 ;; This function uses a non-reentrant model
 18248 ;;
 18249                           
 18250                           
 18251                           ;psect for function _OLED_command
 18252  21A2                     _OLED_command:	
 18253                           
 18254                           ;incstack = 0
 18255                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 18256                           ;OLED_command@value stored from wreg
 18257  21A2  0140               	movlb	0	; select bank0
 18258  21A3  00A6               	movwf	OLED_command@value
 18259                           
 18260                           ;oled.c: 73: void OLED_command(uint8_t value);oled.c: 74: {;oled.c: 75:  OLED_send(value
      +                          , 0);
 18261  21A4  01A3               	clrf	OLED_send@mode
 18262  21A5  0826               	movf	OLED_command@value,w
 18263  21A6  3187  27E8  31A1   	fcall	_OLED_send
 18264                           
 18265                           ;oled.c: 76:  OLED_waitForReady();
 18266  21A9  31A2  2242         	fcall	_OLED_waitForReady
 18267  21AB  0008               	return
 18268  21AC                     __end_of_OLED_command:	
 18269                           
 18270                           	psect	text62
 18271  2242                     __ptext62:	
 18272 ;; *************** function _OLED_waitForReady *****************
 18273 ;; Defined at:
 18274 ;;		line 48 in file "oled.c"
 18275 ;; Parameters:    Size  Location     Type
 18276 ;;		None
 18277 ;; Auto vars:     Size  Location     Type
 18278 ;;  busy            1    0[BANK0 ] unsigned char 
 18279 ;; Return value:  Size  Location     Type
 18280 ;;                  1    wreg      void 
 18281 ;; Registers used:
 18282 ;;		wreg, status,2, status,0, pclath, cstack
 18283 ;; Tracked objects:
 18284 ;;		On entry : 0/0
 18285 ;;		On exit  : 0/0
 18286 ;;		Unchanged: 0/0
 18287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18292 ;;Total ram usage:        1 bytes
 18293 ;; Hardware stack levels used:    1
 18294 ;; Hardware stack levels required when called:    4
 18295 ;; This function calls:
 18296 ;;		_OLED_pulseEnable
 18297 ;; This function is called by:
 18298 ;;		_OLED_command
 18299 ;;		_OLED_write
 18300 ;; This function uses a non-reentrant model
 18301 ;;
 18302                           
 18303                           
 18304                           ;psect for function _OLED_waitForReady
 18305  2242                     _OLED_waitForReady:	
 18306                           
 18307                           ;oled.c: 52:  TRISCbits.TRISC4 = 1;
 18308                           
 18309                           ;incstack = 0
 18310                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0+pclath+cstack]
 18311  2242  0140               	movlb	0	; select bank0
 18312  2243  1614               	bsf	20,4	;volatile
 18313                           
 18314                           ;oled.c: 53:  LATBbits.LATB4 = 0;
 18315  2244  1219               	bcf	25,4	;volatile
 18316                           
 18317                           ;oled.c: 54:  LATBbits.LATB3 = 1;
 18318  2245  1599               	bsf	25,3	;volatile
 18319  2246                     l266:	
 18320                           ;oled.c: 56:  do {
 18321                           
 18322                           
 18323                           ;oled.c: 57:   LATBbits.LATB2 = 0;
 18324  2246  1119               	bcf	25,2	;volatile
 18325                           
 18326                           ;oled.c: 58:   _delay((unsigned long)((10)*(4000000/4000000.0)));
 18327  2247  3003               	movlw	3
 18328  2248                     u6477:	
 18329  2248  0B89               	decfsz	9,f
 18330  2249  2A48               	goto	u6477
 18331  224A  0000               	nop
 18332                           
 18333                           ;oled.c: 59:   LATBbits.LATB2 = 1;
 18334  224B  0140               	movlb	0	; select bank0
 18335  224C  1519               	bsf	25,2	;volatile
 18336                           
 18337                           ;oled.c: 61:   _delay((unsigned long)((10)*(4000000/4000000.0)));
 18338  224D  3003               	movlw	3
 18339  224E                     u6487:	
 18340  224E  0B89               	decfsz	9,f
 18341  224F  2A4E               	goto	u6487
 18342  2250  0000               	nop
 18343                           
 18344                           ;oled.c: 62:   busy = PORTCbits.RC4;
 18345  2251  3000               	movlw	0
 18346  2252  0140               	movlb	0	; select bank0
 18347  2253  1A0E               	btfsc	14,4	;volatile
 18348  2254  3001               	movlw	1
 18349  2255  00A0               	movwf	OLED_waitForReady@busy
 18350                           
 18351                           ;oled.c: 64:   LATBbits.LATB2 = 0;
 18352  2256  1119               	bcf	25,2	;volatile
 18353                           
 18354                           ;oled.c: 66:   OLED_pulseEnable();
 18355  2257  31A1  2199  31A2   	fcall	_OLED_pulseEnable
 18356                           
 18357                           ;oled.c: 67:  } while (busy);
 18358  225A  0140               	movlb	0	; select bank0
 18359  225B  0820               	movf	OLED_waitForReady@busy,w
 18360  225C  1D03               	btfss	3,2
 18361  225D  2A46               	goto	l266
 18362                           
 18363                           ;oled.c: 69:  TRISCbits.TRISC4 = 0;
 18364  225E  1214               	bcf	20,4	;volatile
 18365                           
 18366                           ;oled.c: 70:  LATBbits.LATB3 = 0;
 18367  225F  1199               	bcf	25,3	;volatile
 18368  2260  0008               	return
 18369  2261                     __end_of_OLED_waitForReady:	
 18370                           
 18371                           	psect	text63
 18372  07E8                     __ptext63:	
 18373 ;; *************** function _OLED_send *****************
 18374 ;; Defined at:
 18375 ;;		line 37 in file "oled.c"
 18376 ;; Parameters:    Size  Location     Type
 18377 ;;  value           1    wreg     unsigned char 
 18378 ;;  mode            1    3[BANK0 ] unsigned char 
 18379 ;; Auto vars:     Size  Location     Type
 18380 ;;  value           1    5[BANK0 ] unsigned char 
 18381 ;; Return value:  Size  Location     Type
 18382 ;;                  1    wreg      void 
 18383 ;; Registers used:
 18384 ;;		wreg, status,2, status,0, pclath, cstack
 18385 ;; Tracked objects:
 18386 ;;		On entry : 0/0
 18387 ;;		On exit  : 0/0
 18388 ;;		Unchanged: 0/0
 18389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18390 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18393 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18394 ;;Total ram usage:        3 bytes
 18395 ;; Hardware stack levels used:    1
 18396 ;; Hardware stack levels required when called:    5
 18397 ;; This function calls:
 18398 ;;		_OLED_write4bits
 18399 ;; This function is called by:
 18400 ;;		_OLED_command
 18401 ;;		_OLED_write
 18402 ;; This function uses a non-reentrant model
 18403 ;;
 18404                           
 18405                           
 18406                           ;psect for function _OLED_send
 18407  07E8                     _OLED_send:	
 18408                           
 18409                           ;incstack = 0
 18410                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 18411                           ;OLED_send@value stored from wreg
 18412  07E8  0140               	movlb	0	; select bank0
 18413  07E9  00A5               	movwf	OLED_send@value
 18414                           
 18415                           ;oled.c: 37: void OLED_send(uint8_t value, uint8_t mode);oled.c: 38: {;oled.c: 39:  LATB
      +                          bits.LATB4 = mode;
 18416  07EA  0C23               	rrf	OLED_send@mode,w
 18417  07EB  1C03               	skipc
 18418  07EC  1219               	bcf	25,4	;volatile
 18419  07ED  1803               	skipnc
 18420  07EE  1619               	bsf	25,4	;volatile
 18421                           
 18422                           ;oled.c: 40:  LATBbits.LATB3 = 0;
 18423  07EF  1199               	bcf	25,3	;volatile
 18424                           
 18425                           ;oled.c: 42:  OLED_write4bits(value >> 4);
 18426  07F0  0825               	movf	OLED_send@value,w
 18427  07F1  00A4               	movwf	??_OLED_send
 18428  07F2  3004               	movlw	4
 18429  07F3                     u3035:	
 18430  07F3  36A4               	lsrf	??_OLED_send,f
 18431  07F4  0B89               	decfsz	9,f
 18432  07F5  2FF3               	goto	u3035
 18433  07F6  0824               	movf	??_OLED_send,w
 18434  07F7  31A4  2424  3187   	fcall	_OLED_write4bits
 18435                           
 18436                           ;oled.c: 43:  OLED_write4bits(value);
 18437  07FA  0140               	movlb	0	; select bank0
 18438  07FB  0825               	movf	OLED_send@value,w
 18439  07FC  31A4  2424         	fcall	_OLED_write4bits
 18440  07FE  0008               	return
 18441  07FF                     __end_of_OLED_send:	
 18442                           
 18443                           	psect	text64
 18444  2424                     __ptext64:	
 18445 ;; *************** function _OLED_write4bits *****************
 18446 ;; Defined at:
 18447 ;;		line 26 in file "oled.c"
 18448 ;; Parameters:    Size  Location     Type
 18449 ;;  value           1    wreg     unsigned char 
 18450 ;; Auto vars:     Size  Location     Type
 18451 ;;  value           1    2[BANK0 ] unsigned char 
 18452 ;; Return value:  Size  Location     Type
 18453 ;;                  1    wreg      void 
 18454 ;; Registers used:
 18455 ;;		wreg, status,2, status,0, pclath, cstack
 18456 ;; Tracked objects:
 18457 ;;		On entry : 0/0
 18458 ;;		On exit  : 0/0
 18459 ;;		Unchanged: 0/0
 18460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18464 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18465 ;;Total ram usage:        3 bytes
 18466 ;; Hardware stack levels used:    1
 18467 ;; Hardware stack levels required when called:    4
 18468 ;; This function calls:
 18469 ;;		_OLED_pulseEnable
 18470 ;; This function is called by:
 18471 ;;		_OLED_send
 18472 ;;		_OLED_init
 18473 ;; This function uses a non-reentrant model
 18474 ;;
 18475                           
 18476                           
 18477                           ;psect for function _OLED_write4bits
 18478  2424                     _OLED_write4bits:	
 18479                           
 18480                           ;incstack = 0
 18481                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0+pclath+cstack]
 18482                           ;OLED_write4bits@value stored from wreg
 18483  2424  0140               	movlb	0	; select bank0
 18484  2425  00A2               	movwf	OLED_write4bits@value
 18485                           
 18486                           ;oled.c: 26: void OLED_write4bits(uint8_t value);oled.c: 27: {;oled.c: 28:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 18487  2426  0822               	movf	OLED_write4bits@value,w
 18488  2427  3901               	andlw	1
 18489  2428  00A0               	movwf	??_OLED_write4bits
 18490  2429  0DA0               	rlf	??_OLED_write4bits,f
 18491  242A  0819               	movf	25,w	;volatile
 18492  242B  0620               	xorwf	??_OLED_write4bits,w
 18493  242C  39FD               	andlw	-3
 18494  242D  0620               	xorwf	??_OLED_write4bits,w
 18495  242E  0099               	movwf	25	;volatile
 18496                           
 18497                           ;oled.c: 29:  LATBbits.LATB0 = (value >> 1) & 0x01;
 18498  242F  0822               	movf	OLED_write4bits@value,w
 18499  2430  00A0               	movwf	??_OLED_write4bits
 18500  2431  3001               	movlw	1
 18501  2432                     u3005:	
 18502  2432  36A0               	lsrf	??_OLED_write4bits,f
 18503  2433  0B89               	decfsz	9,f
 18504  2434  2C32               	goto	u3005
 18505  2435  3001               	movlw	1
 18506  2436  0520               	andwf	??_OLED_write4bits,w
 18507  2437  00A1               	movwf	??_OLED_write4bits+1
 18508  2438  0819               	movf	25,w	;volatile
 18509  2439  0621               	xorwf	??_OLED_write4bits+1,w
 18510  243A  39FE               	andlw	-2
 18511  243B  0621               	xorwf	??_OLED_write4bits+1,w
 18512  243C  0099               	movwf	25	;volatile
 18513                           
 18514                           ;oled.c: 30:  LATCbits.LATC5 = (value >> 2) & 0x01;
 18515  243D  0822               	movf	OLED_write4bits@value,w
 18516  243E  00A0               	movwf	??_OLED_write4bits
 18517  243F  3002               	movlw	2
 18518  2440                     u3015:	
 18519  2440  36A0               	lsrf	??_OLED_write4bits,f
 18520  2441  0B89               	decfsz	9,f
 18521  2442  2C40               	goto	u3015
 18522  2443  0820               	movf	??_OLED_write4bits,w
 18523  2444  3901               	andlw	1
 18524  2445  00A1               	movwf	??_OLED_write4bits+1
 18525  2446  0EA1               	swapf	??_OLED_write4bits+1,f
 18526  2447  0DA1               	rlf	??_OLED_write4bits+1,f
 18527  2448  081A               	movf	26,w	;volatile
 18528  2449  0621               	xorwf	??_OLED_write4bits+1,w
 18529  244A  39DF               	andlw	-33
 18530  244B  0621               	xorwf	??_OLED_write4bits+1,w
 18531  244C  009A               	movwf	26	;volatile
 18532                           
 18533                           ;oled.c: 31:  LATCbits.LATC4 = (value >> 3) & 0x01;
 18534  244D  0822               	movf	OLED_write4bits@value,w
 18535  244E  00A0               	movwf	??_OLED_write4bits
 18536  244F  3003               	movlw	3
 18537  2450                     u3025:	
 18538  2450  36A0               	lsrf	??_OLED_write4bits,f
 18539  2451  0B89               	decfsz	9,f
 18540  2452  2C50               	goto	u3025
 18541  2453  0820               	movf	??_OLED_write4bits,w
 18542  2454  3901               	andlw	1
 18543  2455  00A1               	movwf	??_OLED_write4bits+1
 18544  2456  0EA1               	swapf	??_OLED_write4bits+1,f
 18545  2457  081A               	movf	26,w	;volatile
 18546  2458  0621               	xorwf	??_OLED_write4bits+1,w
 18547  2459  39EF               	andlw	-17
 18548  245A  0621               	xorwf	??_OLED_write4bits+1,w
 18549  245B  009A               	movwf	26	;volatile
 18550                           
 18551                           ;oled.c: 33:  _delay((unsigned long)((50)*(4000000/4000000.0)));
 18552  245C  3010               	movlw	16
 18553  245D                     u6497:	
 18554  245D  0B89               	decfsz	9,f
 18555  245E  2C5D               	goto	u6497
 18556  245F  3200               	nop2
 18557                           
 18558                           ;oled.c: 34:  OLED_pulseEnable();
 18559  2460  31A1  2199         	fcall	_OLED_pulseEnable
 18560  2462  0008               	return
 18561  2463                     __end_of_OLED_write4bits:	
 18562                           
 18563                           	psect	text65
 18564  2199                     __ptext65:	
 18565 ;; *************** function _OLED_pulseEnable *****************
 18566 ;; Defined at:
 18567 ;;		line 19 in file "oled.c"
 18568 ;; Parameters:    Size  Location     Type
 18569 ;;		None
 18570 ;; Auto vars:     Size  Location     Type
 18571 ;;		None
 18572 ;; Return value:  Size  Location     Type
 18573 ;;                  1    wreg      void 
 18574 ;; Registers used:
 18575 ;;		wreg
 18576 ;; Tracked objects:
 18577 ;;		On entry : 0/0
 18578 ;;		On exit  : 0/0
 18579 ;;		Unchanged: 0/0
 18580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18585 ;;Total ram usage:        0 bytes
 18586 ;; Hardware stack levels used:    1
 18587 ;; Hardware stack levels required when called:    3
 18588 ;; This function calls:
 18589 ;;		Nothing
 18590 ;; This function is called by:
 18591 ;;		_OLED_write4bits
 18592 ;;		_OLED_waitForReady
 18593 ;; This function uses a non-reentrant model
 18594 ;;
 18595                           
 18596                           
 18597                           ;psect for function _OLED_pulseEnable
 18598  2199                     _OLED_pulseEnable:	
 18599                           
 18600                           ;oled.c: 21:  LATBbits.LATB2 = 1;
 18601                           
 18602                           ;incstack = 0
 18603                           ; Regs used in _OLED_pulseEnable: [wreg]
 18604  2199  0140               	movlb	0	; select bank0
 18605  219A  1519               	bsf	25,2	;volatile
 18606                           
 18607                           ;oled.c: 22:  _delay((unsigned long)((50)*(4000000/4000000.0)));
 18608  219B  3010               	movlw	16
 18609  219C                     u6507:	
 18610  219C  0B89               	decfsz	9,f
 18611  219D  299C               	goto	u6507
 18612  219E  3200               	nop2
 18613                           
 18614                           ;oled.c: 23:  LATBbits.LATB2 = 0;
 18615  219F  0140               	movlb	0	; select bank0
 18616  21A0  1119               	bcf	25,2	;volatile
 18617  21A1  0008               	return
 18618  21A2                     __end_of_OLED_pulseEnable:	
 18619                           
 18620                           	psect	intentry
 18621  0004                     __pintentry:	
 18622 ;; *************** function _ISR *****************
 18623 ;; Defined at:
 18624 ;;		line 48 in file "interrupt.c"
 18625 ;; Parameters:    Size  Location     Type
 18626 ;;		None
 18627 ;; Auto vars:     Size  Location     Type
 18628 ;;		None
 18629 ;; Return value:  Size  Location     Type
 18630 ;;                  1    wreg      void 
 18631 ;; Registers used:
 18632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18633 ;; Tracked objects:
 18634 ;;		On entry : 0/0
 18635 ;;		On exit  : 0/0
 18636 ;;		Unchanged: 0/0
 18637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18640 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18641 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18642 ;;Total ram usage:        4 bytes
 18643 ;; Hardware stack levels used:    1
 18644 ;; Hardware stack levels required when called:    2
 18645 ;; This function calls:
 18646 ;;		_pushButtonISR
 18647 ;;		_rotISR
 18648 ;;		_uartReceiveISR
 18649 ;; This function is called by:
 18650 ;;		Interrupt level 1
 18651 ;; This function uses a non-reentrant model
 18652 ;;
 18653                           
 18654  0004                     _ISR:	
 18655                           
 18656                           ;incstack = 0
 18657  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 18658                           
 18659                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18660  0005  3180               	pagesel	$
 18661                           
 18662                           ;interrupt.c: 50:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 18663  0006  014E               	movlb	14	; select bank14
 18664  0007  1A96               	btfsc	22,5	;volatile
 18665  0008  1E8C               	btfss	12,5	;volatile
 18666  0009  2815               	goto	i1l363
 18667                           
 18668                           ;interrupt.c: 53:   tick10ms++;
 18669  000A  3001               	movlw	1
 18670  000B  00F8               	movwf	??_ISR
 18671  000C  0878               	movf	??_ISR,w
 18672  000D  0141               	movlb	1	; select bank1
 18673  000E  07E9               	addwf	_tick10ms^(0+128),f	;volatile
 18674                           
 18675                           ;interrupt.c: 54:   TMR0 = 178;
 18676  000F  30B2               	movlw	178
 18677  0010  014B               	movlb	11	; select bank11
 18678  0011  009C               	movwf	28	;volatile
 18679                           
 18680                           ;interrupt.c: 55:   PIR0bits.TMR0IF = 0;
 18681  0012  014E               	movlb	14	; select bank14
 18682  0013  128C               	bcf	12,5	;volatile
 18683                           
 18684                           ;interrupt.c: 56:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 18685  0014  2866               	goto	i1l375
 18686  0015                     i1l363:	
 18687  0015  1A16               	btfsc	22,4	;volatile
 18688  0016  1E0C               	btfss	12,4	;volatile
 18689  0017  2831               	goto	i1l365
 18690                           
 18691                           ;interrupt.c: 58:   if (IOCAFbits.IOCAF7 == 1) {
 18692  0018  017E               	movlb	62	; select bank62
 18693  0019  1FBF               	btfss	63,7	;volatile
 18694  001A  2820               	goto	i1l5153
 18695                           
 18696                           ;interrupt.c: 59:    pushButtonISR();
 18697  001B  31A2  22C7  3180   	fcall	_pushButtonISR
 18698                           
 18699                           ;interrupt.c: 60:    IOCAFbits.IOCAF7 = 0;
 18700  001E  017E               	movlb	62	; select bank62
 18701  001F  13BF               	bcf	63,7	;volatile
 18702  0020                     i1l5153:	
 18703                           
 18704                           ;interrupt.c: 62:   if (IOCAFbits.IOCAF4 == 1) {
 18705  0020  1E3F               	btfss	63,4	;volatile
 18706  0021  2827               	goto	i1l5159
 18707                           
 18708                           ;interrupt.c: 63:    rotISR();
 18709  0022  31A3  23EC  3180   	fcall	_rotISR
 18710                           
 18711                           ;interrupt.c: 64:    IOCAFbits.IOCAF4 = 0;
 18712  0025  017E               	movlb	62	; select bank62
 18713  0026  123F               	bcf	63,4	;volatile
 18714  0027                     i1l5159:	
 18715                           
 18716                           ;interrupt.c: 66:   if (IOCAFbits.IOCAF5 == 1) {
 18717  0027  1EBF               	btfss	63,5	;volatile
 18718  0028  282E               	goto	i1l5165
 18719                           
 18720                           ;interrupt.c: 67:    rotISR();
 18721  0029  31A3  23EC  3180   	fcall	_rotISR
 18722                           
 18723                           ;interrupt.c: 68:    IOCAFbits.IOCAF5 = 0;
 18724  002C  017E               	movlb	62	; select bank62
 18725  002D  12BF               	bcf	63,5	;volatile
 18726  002E                     i1l5165:	
 18727                           
 18728                           ;interrupt.c: 70:   PIR0bits.IOCIF = 0;
 18729  002E  014E               	movlb	14	; select bank14
 18730  002F  120C               	bcf	12,4	;volatile
 18731                           
 18732                           ;interrupt.c: 71:  } else if (INTCONbits.PEIE == 1) {
 18733  0030  2866               	goto	i1l375
 18734  0031                     i1l365:	
 18735  0031  1F0B               	btfss	11,6	;volatile
 18736  0032  2866               	goto	i1l375
 18737                           
 18738                           ;interrupt.c: 72:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 18739  0033  181A               	btfsc	26,0	;volatile
 18740  0034  1C10               	btfss	16,0	;volatile
 18741  0035  285F               	goto	i1l371
 18742                           
 18743                           ;interrupt.c: 75:    if (tick100ms++ >= 1000000000UL)
 18744  0036  0142               	movlb	2	; select bank2
 18745  0037  0823               	movf	(_tick100ms+3)^(0+256),w	;volatile
 18746  0038  00FB               	movwf	??_ISR+3
 18747  0039  0822               	movf	(_tick100ms+2)^(0+256),w	;volatile
 18748  003A  00FA               	movwf	??_ISR+2
 18749  003B  0821               	movf	(_tick100ms+1)^(0+256),w	;volatile
 18750  003C  00F9               	movwf	??_ISR+1
 18751  003D  0820               	movf	_tick100ms^(0+256),w	;volatile
 18752  003E  00F8               	movwf	??_ISR
 18753  003F  3001               	movlw	1
 18754  0040  07A0               	addwf	_tick100ms^(0+256),f	;volatile
 18755  0041  3000               	movlw	0
 18756  0042  3DA1               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 18757  0043  3DA2               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 18758  0044  3DA3               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 18759  0045  3000               	movlw	0
 18760  0046  0278               	subwf	??_ISR,w
 18761  0047  30CA               	movlw	202
 18762  0048  3B79               	subwfb	??_ISR+1,w
 18763  0049  309A               	movlw	154
 18764  004A  3B7A               	subwfb	??_ISR+2,w
 18765  004B  303B               	movlw	59
 18766  004C  3B7B               	subwfb	??_ISR+3,w
 18767  004D  1C03               	btfss	3,0
 18768  004E  2857               	goto	i1l5175
 18769                           
 18770                           ;interrupt.c: 76:     tick100ms = 0;
 18771  004F  3000               	movlw	0
 18772  0050  00A3               	movwf	(_tick100ms+3)^(0+256)	;volatile
 18773  0051  3000               	movlw	0
 18774  0052  00A2               	movwf	(_tick100ms+2)^(0+256)	;volatile
 18775  0053  3000               	movlw	0
 18776  0054  00A1               	movwf	(_tick100ms+1)^(0+256)	;volatile
 18777  0055  3000               	movlw	0
 18778  0056  00A0               	movwf	_tick100ms^(0+256)	;volatile
 18779  0057                     i1l5175:	
 18780                           
 18781                           ;interrupt.c: 77:    TMR1 = 53035;
 18782  0057  30CF               	movlw	207
 18783  0058  0144               	movlb	4	; select bank4
 18784  0059  008D               	movwf	13	;volatile
 18785  005A  302B               	movlw	43
 18786  005B  008C               	movwf	12	;volatile
 18787                           
 18788                           ;interrupt.c: 78:    PIR4bits.TMR1IF = 0;
 18789  005C  014E               	movlb	14	; select bank14
 18790  005D  1010               	bcf	16,0	;volatile
 18791                           
 18792                           ;interrupt.c: 79:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 18793  005E  2866               	goto	i1l375
 18794  005F                     i1l371:	
 18795  005F  1A99               	btfsc	25,5	;volatile
 18796  0060  1E8F               	btfss	15,5	;volatile
 18797  0061  2866               	goto	i1l375
 18798                           
 18799                           ;interrupt.c: 80:    uartReceiveISR();
 18800  0062  31A4  24A7         	fcall	_uartReceiveISR
 18801                           
 18802                           ;interrupt.c: 81:    PIR3bits.RC1IF = 0;
 18803  0064  014E               	movlb	14	; select bank14
 18804  0065  128F               	bcf	15,5	;volatile
 18805  0066                     i1l375:	
 18806  0066  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 18807  0067  0009               	retfie
 18808  0068                     __end_of_ISR:	
 18809                           
 18810                           	psect	text67
 18811  24A7                     __ptext67:	
 18812 ;; *************** function _uartReceiveISR *****************
 18813 ;; Defined at:
 18814 ;;		line 37 in file "uart.c"
 18815 ;; Parameters:    Size  Location     Type
 18816 ;;		None
 18817 ;; Auto vars:     Size  Location     Type
 18818 ;;		None
 18819 ;; Return value:  Size  Location     Type
 18820 ;;                  1    wreg      void 
 18821 ;; Registers used:
 18822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18823 ;; Tracked objects:
 18824 ;;		On entry : 0/0
 18825 ;;		On exit  : 0/0
 18826 ;;		Unchanged: 0/0
 18827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18831 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18832 ;;Total ram usage:        1 bytes
 18833 ;; Hardware stack levels used:    1
 18834 ;; Hardware stack levels required when called:    1
 18835 ;; This function calls:
 18836 ;;		_strncpy
 18837 ;; This function is called by:
 18838 ;;		_ISR
 18839 ;; This function uses a non-reentrant model
 18840 ;;
 18841                           
 18842                           
 18843                           ;psect for function _uartReceiveISR
 18844  24A7                     _uartReceiveISR:	
 18845                           
 18846                           ;uart.c: 39:  static char buffer[20];;uart.c: 41:  static uint8_t checksum = 0;;uart.c: 
      +                          43:  if (RC1STAbits.OERR)
 18847                           
 18848                           ;incstack = 0
 18849                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18850  24A7  0142               	movlb	2	; select bank2
 18851  24A8  1C9D               	btfss	29,1	;volatile
 18852  24A9  2CB0               	goto	i1l5063
 18853                           
 18854                           ;uart.c: 44:  {;uart.c: 45:   RC1STAbits.CREN = 0;
 18855  24AA  121D               	bcf	29,4	;volatile
 18856                           
 18857                           ;uart.c: 46:   RC1STAbits.CREN = 1;
 18858  24AB  161D               	bsf	29,4	;volatile
 18859                           
 18860                           ;uart.c: 47:   rxOErrCount++;
 18861  24AC  3001               	movlw	1
 18862  24AD  00F6               	movwf	??_uartReceiveISR
 18863  24AE  0876               	movf	??_uartReceiveISR,w
 18864  24AF  07B4               	addwf	_rxOErrCount^(0+256),f	;volatile
 18865  24B0                     i1l5063:	
 18866                           
 18867                           ;uart.c: 49:  if (RC1STAbits.FERR)
 18868  24B0  1D1D               	btfss	29,2	;volatile
 18869  24B1  2CB8               	goto	i1l5069
 18870                           
 18871                           ;uart.c: 50:  {;uart.c: 51:   RC1STAbits.SPEN = 0;
 18872  24B2  139D               	bcf	29,7	;volatile
 18873                           
 18874                           ;uart.c: 52:   RC1STAbits.SPEN = 1;
 18875  24B3  179D               	bsf	29,7	;volatile
 18876                           
 18877                           ;uart.c: 53:   rxFErrCount++;
 18878  24B4  3001               	movlw	1
 18879  24B5  00F6               	movwf	??_uartReceiveISR
 18880  24B6  0876               	movf	??_uartReceiveISR,w
 18881  24B7  07B5               	addwf	_rxFErrCount^(0+256),f	;volatile
 18882  24B8                     i1l5069:	
 18883                           
 18884                           ;uart.c: 57:  if (rxCount < sizeof(dataPacket)) {
 18885  24B8  300F               	movlw	15
 18886  24B9  027C               	subwf	_rxCount,w	;volatile
 18887  24BA  1803               	skipnc
 18888  24BB  2CD4               	goto	i1l5075
 18889                           
 18890                           ;uart.c: 58:   buffer[rxCount] = RC1REG;
 18891  24BC  0819               	movf	25,w	;volatile
 18892  24BD  00F6               	movwf	??_uartReceiveISR
 18893  24BE  087C               	movf	_rxCount,w
 18894  24BF  3E36               	addlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 18895  24C0  0086               	movwf	6
 18896  24C1  3001               	movlw	1	; select bank2/3
 18897  24C2  0087               	movwf	7
 18898  24C3  0876               	movf	??_uartReceiveISR,w
 18899  24C4  0081               	movwf	1
 18900                           
 18901                           ;uart.c: 59:   checksum ^= buffer[rxCount];
 18902  24C5  087C               	movf	_rxCount,w
 18903  24C6  3E36               	addlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 18904  24C7  0086               	movwf	6
 18905  24C8  3001               	movlw	1	; select bank2/3
 18906  24C9  0087               	movwf	7
 18907  24CA  0801               	movf	1,w
 18908  24CB  00F6               	movwf	??_uartReceiveISR
 18909  24CC  0876               	movf	??_uartReceiveISR,w
 18910  24CD  0141               	movlb	1	; select bank1
 18911  24CE  06E5               	xorwf	uartReceiveISR@checksum^(0+128),f
 18912                           
 18913                           ;uart.c: 60:   rxCount++;
 18914  24CF  3001               	movlw	1
 18915  24D0  00F6               	movwf	??_uartReceiveISR
 18916  24D1  0876               	movf	??_uartReceiveISR,w
 18917  24D2  07FC               	addwf	_rxCount,f	;volatile
 18918                           
 18919                           ;uart.c: 61:  } else {
 18920  24D3  0008               	return
 18921  24D4                     i1l5075:	
 18922                           
 18923                           ;uart.c: 63:   if (RC1REG == checksum) {
 18924  24D4  0819               	movf	25,w	;volatile
 18925  24D5  0141               	movlb	1	; select bank1
 18926  24D6  0665               	xorwf	uartReceiveISR@checksum^(0+128),w
 18927  24D7  1D03               	skipz
 18928  24D8  2CE8               	goto	i1l5081
 18929                           
 18930                           ;uart.c: 65:    dataReadyFlag = 1;
 18931  24D9  3001               	movlw	1
 18932  24DA  00F6               	movwf	??_uartReceiveISR
 18933  24DB  0876               	movf	??_uartReceiveISR,w
 18934  24DC  00E6               	movwf	_dataReadyFlag^(0+128)	;volatile
 18935                           
 18936                           ;uart.c: 66:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 18937  24DD  3036               	movlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 18938  24DE  00F6               	movwf	??_uartReceiveISR
 18939  24DF  0876               	movf	??_uartReceiveISR,w
 18940  24E0  00F0               	movwf	strncpy@s
 18941  24E1  300F               	movlw	15
 18942  24E2  00F1               	movwf	strncpy@n
 18943  24E3  3000               	movlw	0
 18944  24E4  00F2               	movwf	strncpy@n+1
 18945  24E5  304A               	movlw	(low (_dataPacket| (0+256)))& (0+255)
 18946  24E6  31A3  2325         	fcall	_strncpy
 18947  24E8                     i1l5081:	
 18948                           
 18949                           ;uart.c: 68:   checksum = 0;
 18950  24E8  0141               	movlb	1	; select bank1
 18951  24E9  01E5               	clrf	uartReceiveISR@checksum^(0+128)
 18952                           
 18953                           ;uart.c: 69:   rxCount = 0;
 18954  24EA  01FC               	clrf	_rxCount	;volatile
 18955  24EB  0008               	return
 18956  24EC                     __end_of_uartReceiveISR:	
 18957                           
 18958                           	psect	text68
 18959  2325                     __ptext68:	
 18960 ;; *************** function _strncpy *****************
 18961 ;; Defined at:
 18962 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 18963 ;; Parameters:    Size  Location     Type
 18964 ;;  d               1    wreg     PTR unsigned char 
 18965 ;;		 -> dataPacket(15), 
 18966 ;;  s               1    0[COMMON] PTR const unsigned char 
 18967 ;;		 -> uartReceiveISR@buffer(20), 
 18968 ;;  n               2    1[COMMON] unsigned int 
 18969 ;; Auto vars:     Size  Location     Type
 18970 ;;  d               1    4[COMMON] PTR unsigned char 
 18971 ;;		 -> dataPacket(15), 
 18972 ;;  cp              1    5[COMMON] PTR unsigned char 
 18973 ;;		 -> dataPacket(15), 
 18974 ;; Return value:  Size  Location     Type
 18975 ;;                  1    wreg      PTR unsigned char 
 18976 ;; Registers used:
 18977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 18978 ;; Tracked objects:
 18979 ;;		On entry : 0/0
 18980 ;;		On exit  : 0/0
 18981 ;;		Unchanged: 0/0
 18982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18983 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18984 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18986 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18987 ;;Total ram usage:        6 bytes
 18988 ;; Hardware stack levels used:    1
 18989 ;; This function calls:
 18990 ;;		Nothing
 18991 ;; This function is called by:
 18992 ;;		_uartReceiveISR
 18993 ;; This function uses a non-reentrant model
 18994 ;;
 18995                           
 18996                           
 18997                           ;psect for function _strncpy
 18998  2325                     _strncpy:	
 18999                           
 19000                           ;incstack = 0
 19001                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 19002                           ;strncpy@d stored from wreg
 19003  2325  00F4               	movwf	strncpy@d
 19004  2326  0874               	movf	strncpy@d,w
 19005  2327  00F3               	movwf	??_strncpy
 19006  2328  0873               	movf	??_strncpy,w
 19007  2329  00F5               	movwf	strncpy@cp
 19008  232A                     i1l4297:	
 19009  232A  0871               	movf	strncpy@n,w
 19010  232B  0472               	iorwf	strncpy@n+1,w
 19011  232C  1903               	btfsc	3,2
 19012  232D  2B4B               	goto	i1l4303
 19013  232E  3001               	movlw	1
 19014  232F  02F1               	subwf	strncpy@n,f
 19015  2330  3000               	movlw	0
 19016  2331  3BF2               	subwfb	strncpy@n+1,f
 19017  2332  0875               	movf	strncpy@cp,w
 19018  2333  0086               	movwf	6
 19019  2334  3001               	movlw	1	; select bank2/3
 19020  2335  0087               	movwf	7
 19021  2336  0AF5               	incf	strncpy@cp,f
 19022  2337  0870               	movf	strncpy@s,w
 19023  2338  0084               	movwf	4
 19024  2339  3001               	movlw	1	; select bank2/3
 19025  233A  0085               	movwf	5
 19026  233B  0AF0               	incf	strncpy@s,f
 19027  233C  0800               	movf	0,w
 19028  233D  3FC0               	movwi [0]fsr1
 19029  233E  0889               	movf	9,f
 19030  233F  1903               	btfsc	3,2
 19031  2340  2B4B               	goto	i1l4303
 19032  2341  2B2A               	goto	i1l4297
 19033  2342                     i1l4299:	
 19034  2342  0875               	movf	strncpy@cp,w
 19035  2343  0086               	movwf	6
 19036  2344  3001               	movlw	1	; select bank2/3
 19037  2345  0087               	movwf	7
 19038  2346  0181               	clrf	1
 19039  2347  3001               	movlw	1
 19040  2348  00F3               	movwf	??_strncpy
 19041  2349  0873               	movf	??_strncpy,w
 19042  234A  07F5               	addwf	strncpy@cp,f
 19043  234B                     i1l4303:	
 19044  234B  3001               	movlw	1
 19045  234C  02F1               	subwf	strncpy@n,f
 19046  234D  3000               	movlw	0
 19047  234E  3BF2               	subwfb	strncpy@n+1,f
 19048  234F  0A71               	incf	strncpy@n,w
 19049  2350  1D03               	skipz
 19050  2351  2B42               	goto	i1l4299
 19051  2352  0A72               	incf	strncpy@n+1,w
 19052  2353  1903               	btfsc	3,2
 19053  2354  0008               	return
 19054  2355  2B42               	goto	i1l4299
 19055  2356                     __end_of_strncpy:	
 19056                           
 19057                           	psect	text69
 19058  23EC                     __ptext69:	
 19059 ;; *************** function _rotISR *****************
 19060 ;; Defined at:
 19061 ;;		line 35 in file "inputs.c"
 19062 ;; Parameters:    Size  Location     Type
 19063 ;;		None
 19064 ;; Auto vars:     Size  Location     Type
 19065 ;;  input           1    7[COMMON] unsigned char 
 19066 ;; Return value:  Size  Location     Type
 19067 ;;                  1    wreg      void 
 19068 ;; Registers used:
 19069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 19070 ;; Tracked objects:
 19071 ;;		On entry : 0/0
 19072 ;;		On exit  : 0/0
 19073 ;;		Unchanged: 0/0
 19074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19077 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19078 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19079 ;;Total ram usage:        8 bytes
 19080 ;; Hardware stack levels used:    1
 19081 ;; This function calls:
 19082 ;;		Nothing
 19083 ;; This function is called by:
 19084 ;;		_ISR
 19085 ;; This function uses a non-reentrant model
 19086 ;;
 19087                           
 19088                           
 19089                           ;psect for function _rotISR
 19090  23EC                     _rotISR:	
 19091                           
 19092                           ;inputs.c: 37:  uint8_t input;;inputs.c: 39:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 19093                           
 19094                           ;incstack = 0
 19095                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 19096  23EC  0140               	movlb	0	; select bank0
 19097  23ED  0E0C               	swapf	12,w	;volatile
 19098  23EE  3901               	andlw	1
 19099  23EF  00F0               	movwf	??_rotISR
 19100  23F0  0E0C               	swapf	12,w	;volatile
 19101  23F1  0C89               	rrf	9,f
 19102  23F2  3901               	andlw	1
 19103  23F3  0709               	addwf	9,w
 19104  23F4  0470               	iorwf	??_rotISR,w
 19105  23F5  00F1               	movwf	??_rotISR+1
 19106  23F6  0871               	movf	??_rotISR+1,w
 19107  23F7  00F7               	movwf	rotISR@input
 19108                           
 19109                           ;inputs.c: 42:  curRotState = transition_table[curRotState & 0b00000111][input];
 19110  23F8  087D               	movf	_curRotState,w	;volatile
 19111  23F9  3907               	andlw	7
 19112  23FA  00F0               	movwf	??_rotISR
 19113  23FB  01F1               	clrf	??_rotISR+1
 19114  23FC  35F0               	lslf	??_rotISR,f
 19115  23FD  0DF1               	rlf	??_rotISR+1,f
 19116  23FE  35F0               	lslf	??_rotISR,f
 19117  23FF  0DF1               	rlf	??_rotISR+1,f
 19118  2400  30AD               	movlw	low (_transition_table| (0+32768))
 19119  2401  00F2               	movwf	??_rotISR+2
 19120  2402  30A8               	movlw	high (_transition_table| (0+32768))
 19121  2403  00F3               	movwf	??_rotISR+3
 19122  2404  0870               	movf	??_rotISR,w
 19123  2405  0772               	addwf	??_rotISR+2,w
 19124  2406  00F4               	movwf	??_rotISR+4
 19125  2407  0871               	movf	??_rotISR+1,w
 19126  2408  3D73               	addwfc	??_rotISR+3,w
 19127  2409  00F5               	movwf	??_rotISR+5
 19128  240A  0877               	movf	rotISR@input,w
 19129  240B  0774               	addwf	??_rotISR+4,w
 19130  240C  0084               	movwf	4
 19131  240D  0875               	movf	??_rotISR+5,w
 19132  240E  1803               	skipnc
 19133  240F  0A75               	incf	??_rotISR+5,w
 19134  2410  0085               	movwf	5
 19135  2411  0800               	movf	0,w	;code access
 19136  2412  00F6               	movwf	??_rotISR+6
 19137  2413  0876               	movf	??_rotISR+6,w
 19138  2414  00FD               	movwf	_curRotState	;volatile
 19139                           
 19140                           ;inputs.c: 45:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 19141  2415  1FFD               	btfss	_curRotState,7	;volatile
 19142  2416  2C1C               	goto	i1l5053
 19143  2417  3001               	movlw	1
 19144  2418  00F0               	movwf	??_rotISR
 19145  2419  0870               	movf	??_rotISR,w
 19146  241A  0141               	movlb	1	; select bank1
 19147  241B  00E8               	movwf	_rotDir^(0+128)	;volatile
 19148  241C                     i1l5053:	
 19149                           
 19150                           ;inputs.c: 46:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 19151  241C  1F7D               	btfss	_curRotState,6	;volatile
 19152  241D  0008               	return
 19153  241E  3002               	movlw	2
 19154  241F  00F0               	movwf	??_rotISR
 19155  2420  0870               	movf	??_rotISR,w
 19156  2421  0141               	movlb	1	; select bank1
 19157  2422  00E8               	movwf	_rotDir^(0+128)	;volatile
 19158  2423  0008               	return
 19159  2424                     __end_of_rotISR:	
 19160                           
 19161                           	psect	text70
 19162  22C7                     __ptext70:	
 19163 ;; *************** function _pushButtonISR *****************
 19164 ;; Defined at:
 19165 ;;		line 53 in file "inputs.c"
 19166 ;; Parameters:    Size  Location     Type
 19167 ;;		None
 19168 ;; Auto vars:     Size  Location     Type
 19169 ;;  time            1    1[COMMON] unsigned char 
 19170 ;; Return value:  Size  Location     Type
 19171 ;;                  1    wreg      void 
 19172 ;; Registers used:
 19173 ;;		wreg, status,2, status,0, pclath, cstack
 19174 ;; Tracked objects:
 19175 ;;		On entry : 0/0
 19176 ;;		On exit  : 0/0
 19177 ;;		Unchanged: 0/0
 19178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19181 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19182 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19183 ;;Total ram usage:        2 bytes
 19184 ;; Hardware stack levels used:    1
 19185 ;; Hardware stack levels required when called:    1
 19186 ;; This function calls:
 19187 ;;		_get10msTick
 19188 ;;		_reset10msTick
 19189 ;; This function is called by:
 19190 ;;		_ISR
 19191 ;; This function uses a non-reentrant model
 19192 ;;
 19193                           
 19194                           
 19195                           ;psect for function _pushButtonISR
 19196  22C7                     _pushButtonISR:	
 19197                           
 19198                           ;inputs.c: 55:  uint8_t time;;inputs.c: 57:  if (!PORTAbits.RA7) {
 19199                           
 19200                           ;incstack = 0
 19201                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0+pclath+cstack]
 19202  22C7  0140               	movlb	0	; select bank0
 19203  22C8  1B8C               	btfsc	12,7	;volatile
 19204  22C9  2ACD               	goto	i1l5029
 19205                           
 19206                           ;inputs.c: 58:   reset10msTick();
 19207  22CA  3190  2000         	fcall	_reset10msTick
 19208                           
 19209                           ;inputs.c: 59:  } else {
 19210  22CC  0008               	return
 19211  22CD                     i1l5029:	
 19212                           
 19213                           ;inputs.c: 60:   time = get10msTick();
 19214  22CD  31A1  2176  31A2   	fcall	_get10msTick
 19215  22D0  00F0               	movwf	??_pushButtonISR
 19216  22D1  0870               	movf	??_pushButtonISR,w
 19217  22D2  00F1               	movwf	pushButtonISR@time
 19218                           
 19219                           ;inputs.c: 61:   if ((time > 5) & (time <= 50))
 19220  22D3  3006               	movlw	6
 19221  22D4  0271               	subwf	pushButtonISR@time,w
 19222  22D5  1C03               	skipc
 19223  22D6  2AE1               	goto	i1l5037
 19224  22D7  3033               	movlw	51
 19225  22D8  0271               	subwf	pushButtonISR@time,w
 19226  22D9  1803               	skipnc
 19227  22DA  2AE1               	goto	i1l5037
 19228                           
 19229                           ;inputs.c: 63:    pbState = PB_SHORT;
 19230  22DB  3001               	movlw	1
 19231  22DC  00F0               	movwf	??_pushButtonISR
 19232  22DD  0870               	movf	??_pushButtonISR,w
 19233  22DE  0141               	movlb	1	; select bank1
 19234  22DF  00E7               	movwf	_pbState^(0+128)	;volatile
 19235  22E0  0008               	return
 19236  22E1                     i1l5037:	
 19237  22E1  3033               	movlw	51
 19238  22E2  0271               	subwf	pushButtonISR@time,w
 19239  22E3  1C03               	skipc
 19240  22E4  2AEF               	goto	i1l5043
 19241  22E5  3097               	movlw	151
 19242  22E6  0271               	subwf	pushButtonISR@time,w
 19243  22E7  1803               	skipnc
 19244  22E8  2AEF               	goto	i1l5043
 19245                           
 19246                           ;inputs.c: 66:    pbState = PB_LONG;
 19247  22E9  3002               	movlw	2
 19248  22EA  00F0               	movwf	??_pushButtonISR
 19249  22EB  0870               	movf	??_pushButtonISR,w
 19250  22EC  0141               	movlb	1	; select bank1
 19251  22ED  00E7               	movwf	_pbState^(0+128)	;volatile
 19252  22EE  0008               	return
 19253  22EF                     i1l5043:	
 19254                           
 19255                           ;inputs.c: 69:    pbState = PB_ABORT;
 19256  22EF  3003               	movlw	3
 19257  22F0  00F0               	movwf	??_pushButtonISR
 19258  22F1  0870               	movf	??_pushButtonISR,w
 19259  22F2  0141               	movlb	1	; select bank1
 19260  22F3  00E7               	movwf	_pbState^(0+128)	;volatile
 19261  22F4  0008               	return
 19262  22F5                     __end_of_pushButtonISR:	
 19263                           
 19264                           	psect	text71
 19265  1000                     __ptext71:	
 19266 ;; *************** function _reset10msTick *****************
 19267 ;; Defined at:
 19268 ;;		line 41 in file "interrupt.c"
 19269 ;; Parameters:    Size  Location     Type
 19270 ;;		None
 19271 ;; Auto vars:     Size  Location     Type
 19272 ;;		None
 19273 ;; Return value:  Size  Location     Type
 19274 ;;                  1    wreg      void 
 19275 ;; Registers used:
 19276 ;;		status,2
 19277 ;; Tracked objects:
 19278 ;;		On entry : 0/0
 19279 ;;		On exit  : 0/0
 19280 ;;		Unchanged: 0/0
 19281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19286 ;;Total ram usage:        0 bytes
 19287 ;; Hardware stack levels used:    1
 19288 ;; This function calls:
 19289 ;;		Nothing
 19290 ;; This function is called by:
 19291 ;;		_pushButtonISR
 19292 ;; This function uses a non-reentrant model
 19293 ;;
 19294                           
 19295                           
 19296                           ;psect for function _reset10msTick
 19297  1000                     _reset10msTick:	
 19298                           
 19299                           ;interrupt.c: 42:  tick10ms = 0;
 19300                           
 19301                           ;incstack = 0
 19302                           ; Regs used in _reset10msTick: [status,2]
 19303  1000  0141               	movlb	1	; select bank1
 19304  1001  01E9               	clrf	_tick10ms^(0+128)	;volatile
 19305  1002  0008               	return
 19306  1003                     __end_of_reset10msTick:	
 19307                           
 19308                           	psect	text72
 19309  2176                     __ptext72:	
 19310 ;; *************** function _get10msTick *****************
 19311 ;; Defined at:
 19312 ;;		line 33 in file "interrupt.c"
 19313 ;; Parameters:    Size  Location     Type
 19314 ;;		None
 19315 ;; Auto vars:     Size  Location     Type
 19316 ;;		None
 19317 ;; Return value:  Size  Location     Type
 19318 ;;                  1    wreg      unsigned char 
 19319 ;; Registers used:
 19320 ;;		wreg
 19321 ;; Tracked objects:
 19322 ;;		On entry : 0/0
 19323 ;;		On exit  : 0/0
 19324 ;;		Unchanged: 0/0
 19325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19330 ;;Total ram usage:        0 bytes
 19331 ;; Hardware stack levels used:    1
 19332 ;; This function calls:
 19333 ;;		Nothing
 19334 ;; This function is called by:
 19335 ;;		_pushButtonISR
 19336 ;; This function uses a non-reentrant model
 19337 ;;
 19338                           
 19339                           
 19340                           ;psect for function _get10msTick
 19341  2176                     _get10msTick:	
 19342                           
 19343                           ;interrupt.c: 35:  return tick10ms;
 19344                           
 19345                           ;incstack = 0
 19346                           ; Regs used in _get10msTick: [wreg]
 19347  2176  0141               	movlb	1	; select bank1
 19348  2177  0869               	movf	_tick10ms^(0+128),w	;volatile
 19349  2178  0008               	return
 19350  2179                     __end_of_get10msTick:	
 19351  007E                     btemp	set	126	;btemp
 19352  007E                     int$flags	set	126
 19353  007E                     wtemp0	set	126


Data Sizes:
    Strings     399
    Constant    115
    Data        60
    BSS         85
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     62      80
    BANK2            80      0      75
    BANK3            80      0      50
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           19      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    p_fct$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    S1496$1$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__getStateFunc$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    func$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK2[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> str(BANK2[10]), systemCheck@str(BANK1[3]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK2[10]), 

    menu@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__getStateFunc	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    menu@func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    S1496$func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl.func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    p_fct	PTR FTN(PTR struct .,)unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setFudgeFactor@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setSkyTemp@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setDPOffset@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setup@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setLensDia@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setOutputPower@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setOutputPower@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    channelSetup@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    channelSetup@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    channelView$1226	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_17(CODE[7]), STR_16(CODE[7]), 

    channelView@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    statusView@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    spinInput@input	PTR float  size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 49
		 -> STR_53(CODE[11]), STR_52(CODE[9]), STR_51(CODE[2]), STR_50(CODE[13]), 
		 -> STR_49(CODE[9]), STR_48(CODE[2]), STR_47(CODE[13]), STR_46(CODE[3]), 
		 -> STR_45(CODE[7]), STR_44(CODE[13]), STR_43(CODE[10]), STR_42(CODE[10]), 
		 -> STR_41(CODE[3]), STR_40(CODE[7]), STR_39(CODE[37]), STR_38(CODE[8]), 
		 -> STR_37(CODE[2]), STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[2]), 
		 -> STR_33(CODE[7]), STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[6]), 
		 -> STR_29(CODE[13]), STR_28(CODE[8]), STR_27(CODE[9]), STR_26(CODE[8]), 
		 -> STR_25(CODE[5]), STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[25]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), 
		 -> STR_17(CODE[7]), STR_16(CODE[7]), STR_15(CODE[3]), STR_14(CODE[13]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[4]), STR_10(CODE[2]), 
		 -> STR_9(CODE[4]), STR_8(CODE[8]), STR_7(CODE[7]), STR_6(CODE[8]), 
		 -> STR_5(CODE[2]), STR_4(CODE[4]), str(BANK2[10]), STR_3(CODE[49]), 
		 -> STR_2(CODE[4]), systemCheck@str(BANK1[3]), STR_1(CODE[12]), 

    convertAnalogValues@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    getAvgChannelCurrents@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    getAvgChannelCurrents@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    sp__getDataPacket	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    checkSensor@dp	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    checkSensor@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    calcRequiredPower@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    systemCheck@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    initGlobalData@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    initGlobalData@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _main->_calcRequiredPower
    _main->_convertAnalogValues
    _main->_getAvgChannelCurrents
    _systemCheck->_convertAnalogValues
    _convertAnalogValues->___fldiv
    _OLED_Off->_OLED_command
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_ftoa
    _setOutputPower->_ftoa
    _setLensDia->_ftoa
    _setFudgeFactor->_ftoa
    _setDPOffset->_ftoa
    _spinInput->___flsub
    _menuError->_OLED_print_xy
    _OLED_returnHome->_OLED_command
    _OLED_clearDisplay->_OLED_command
    _getStateFunc->___wmul
    _getNextState->___wmul
    _channelView->_ftoa
    _channelSetup->_ftoa
    _returnToPage->_OLED_command
    _OLED_scrollDisplayRight->_OLED_command
    _OLED_scrollDisplayLeft->_OLED_command
    _itoa->___fltol
    _ftoa->___fltol
    _OLED_print_xy->_OLED_command
    _OLED_print_xy->_OLED_write
    _getAvgChannelCurrents->___fltol
    _ema->___lmul
    ___fltol->___fldiv
    _checkSensor->___xxtofl
    _checkSensor->_timeSince
    _timeSince->_timeNow
    ___xxtofl->___wmul
    _calcRequiredPower->___flsub
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calcRequiredPower
    _systemCheck->_itoa
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_ftoa
    _setOutputPower->_ftoa
    _setLensDia->_ftoa
    _setFudgeFactor->_ftoa
    _setDPOffset->_ftoa
    _channelView->_ftoa
    _channelSetup->_ftoa
    _itoa->___fltol
    _ftoa->___fltol
    _getAvgChannelCurrents->___fltol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  517803
                                             57 BANK1      5     5      0
                  _OLED_clearDisplay
                          _OLED_init
              _OLED_loadSpecialChars
                    _OLED_returnHome
                  _calcRequiredPower
                        _checkSensor
                _convertAnalogValues
              _getAvgChannelCurrents
                     _initGlobalData
                         _initialize
                               _menu
                        _systemCheck
                            _timeNow
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     6      2   33726
                                             16 BANK1      8     6      2
                           _OLED_Off
                  _OLED_clearDisplay
                      _OLED_print_xy
                    _OLED_returnHome
                             ___flge
                _convertAnalogValues
                              _error
                               _itoa
 ---------------------------------------------------------------------------------
 (2) _convertAnalogValues                                  8     6      2   13893
                                             72 BANK0      8     6      2
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                   _adcGetConversion
                                _ema
 ---------------------------------------------------------------------------------
 (2) _OLED_Off                                             0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _menu                                                11     9      2  432098
                                             28 BANK1     11     9      2
                       _channelSetup *
                        _channelView *
                       _getNextState
                              _getPB
                       _getStateFunc
                          _menuError
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
 ---------------------------------------------------------------------------------
 (2) _statusView                                           4     2      2   38863
                                             17 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                4     2      2   38665
                                             17 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           3     1      2   48512
                                             17 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       8     6      2   54784
                                             17 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                               _ftoa
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           7     5      2   48512
                                             17 BANK1      7     5      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       3     1      2   48565
                                             17 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          3     1      2   48512
                                             17 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   11171
                                             74 BANK0      2     2      0
                                              0 BANK1     14     0     14
                            ___fladd
                             ___flge
                            ___flsub
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _menuError                                            0     0      0   13225
                  _OLED_clearDisplay
                      _OLED_print_xy
                    _OLED_returnHome
 ---------------------------------------------------------------------------------
 (2) _OLED_returnHome                                      0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _OLED_clearDisplay                                    0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _getStateFunc                                         7     5      2    1572
                                              6 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         7     5      2    1856
                                              6 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         11     9      2   43775
                                             17 BANK1     11     9      2
                      _OLED_print_xy
                             ___bmul
                            ___fltol
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    1080
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         8     6      2   44884
                                             17 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    1858
                                              7 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1302
                                              7 BANK0      6     5      1
             _OLED_scrollDisplayLeft
            _OLED_scrollDisplayRight
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayRight                              0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayLeft                               0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    2784
                                              5 BANK1     11     7      4
                            ___awdiv
                            ___awmod
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   22918
                                             78 BANK0      2     2      0
                                              5 BANK1     12     6      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1460
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     394
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   12521
                                              7 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       9     7      2     563
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _getAvgChannelCurrents                               14    12      2   14765
                                             78 BANK0      2     0      2
                                              5 BANK1     12    12      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                           ___xxtofl
                   _adcGetConversion
                                _ema
                              _error
                          _setSwitch
 ---------------------------------------------------------------------------------
 (2) _setSwitch                                            4     3      1     338
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _error                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _ema                                                 20    12      8    1419
                                             12 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     396
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _adcGetConversion                                     4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     457
                                             72 BANK0      6     2      4
                                              0 BANK1      5     5      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          7     5      2    4554
                                             20 BANK0      7     5      2
                             ___flge
                           ___xxtofl
                      _getDataPacket
                            _timeNow
                          _timeSince
                    _uartIsDataReady
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIsDataReady                                      2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     361
                                              4 BANK0     16    12      4
                            _timeNow
 ---------------------------------------------------------------------------------
 (2) _timeNow                                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getDataPacket                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              6 BANK0     14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    2918
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   63    61      2   15866
                                             74 BANK0      6     4      2
                                              0 BANK1     57    57      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    3549
                                             66 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    2896
                                             46 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             26    18      8    6217
                                             20 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            9     7      2     799
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             26    18      8    2185
                                             46 BANK0     26    18      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0     796
                                              7 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                              7 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              0 BANK0      1     1      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     306
                                              3 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              0 BANK0      3     3      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _OLED_pulseEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  4     4      0     438
                                              8 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (10) _uartReceiveISR                                      1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (11) _strncpy                                             6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (10) _rotISR                                              8     8      0      23
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (10) _pushButtonISR                                       2     2      0      89
                                              0 COMMON     2     2      0
                        _get10msTick
                      _reset10msTick
 ---------------------------------------------------------------------------------
 (11) _reset10msTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _get10msTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_clearDisplay
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write4bits
       _OLED_pulseEnable
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_returnHome
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _calcRequiredPower
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
   _checkSensor
     ___flge
     ___xxtofl
       ___wmul (ARG)
     _getDataPacket
     _timeNow
     _timeSince
       _timeNow
     _uartIsDataReady
     _uartReset
     _uartSendByte
   _convertAnalogValues
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___xxtofl
       ___wmul (ARG)
     _adcGetConversion
     _ema
       ___lmul
   _getAvgChannelCurrents
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flge
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     ___xxtofl
       ___wmul (ARG)
     _adcGetConversion
     _ema
       ___lmul
     _error
     _setSwitch
   _initGlobalData
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___fleq
       ___flge
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___bmul
       ___fltol
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _getNextState *
       ___wmul
     _getPB *
     _getStateFunc *
       ___wmul
     _menuError *
       _OLED_clearDisplay
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _OLED_returnHome
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___fleq
       ___flge
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
   _systemCheck
     _OLED_Off
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_clearDisplay
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       _OLED_write
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       ___bmul (ARG)
     _OLED_returnHome
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     ___flge
     _convertAnalogValues
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___fldiv
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl
         ___wmul (ARG)
       _adcGetConversion
       _ema
         ___lmul
     _error
     _itoa
       ___awdiv
       ___awmod
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
   _timeNow
   _timeSince
     _timeNow

 _ISR (ROOT)
   _pushButtonISR
     _get10msTick
     _reset10msTick
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3E      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     12B       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      32      12       62.5%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              13      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     12B      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jan 28 19:30:27 2020

                   _pushButtonISR 22C7                     returnToPage@n 002A          __end_of_transition_table 28C9  
                    _stateFuncTbl 2800                      ___fldiv@aexp 0067                      ___fldiv@bexp 0066  
                    ___fldiv@sign 005F                    ___bmul@product 0022                       __CFG_CP$OFF 0000  
             __end_of_systemCheck 1208            _calcRequiredPower$2140 00B0            _calcRequiredPower$2141 00B4  
          _calcRequiredPower$2142 00B8            _calcRequiredPower$2143 00BC            _calcRequiredPower$2137 00CC  
          _calcRequiredPower$2138 00A8            _calcRequiredPower$2139 00AC                      ___awdiv@sign 0026  
             ___wmul@multiplicand 0022                    ??_getStateFunc 0028           ??_OLED_loadSpecialChars 0027  
             __Umul8_16@word_mpld 0026                       __CFG_LVP$ON 0000                               l129 1BA8  
                             l171 2387                               l236 2537                               l149 118B  
                             l266 2246                               l446 21B2                               l198 0814  
                             l626 2225                               l765 222F                               l934 2595  
                             l943 1A0C                               l935 25AF                               l946 1A5A  
                             l966 19D5                               _ISR 0004                               _ema 26C3  
                             _str 0159                      ___awmod@sign 0026                      __CFG_BORV$LO 0000  
                             wreg 0009                  returnToPage@page 0029                      ___flmul@aexp 0046  
                    ___flmul@bexp 0047                      ___flmul@sign 0041                      ___flmul@temp 004C  
                    ___flmul@prod 0048                     __CFG_BBEN$OFF 0000                              ?_ISR 0070  
                    __CFG_ZCD$OFF 0000                      ___fltol@exp1 006D                              l1100 0DDD  
                            l1200 1033                              l1122 13BD                              l1108 0DF5  
                            l1213 107D                              l1070 0CFB                              l1214 1087  
                            l1206 1069                              l1143 14C4                              l1144 14DC  
                            l1072 0CDE                              l1146 14E9                              l1066 0C68  
                            l1229 2291                              l1174 0721                              l1087 0D7E  
                            l4101 15BB                              l3311 0C5D                              l4007 23A4  
                            ?_ema 002C                              l3321 0C72                              l4121 15D1  
                            l3315 0C60                              l4123 166A              __end_of_channelSetup 2000  
                            l3421 0D9D                              l3413 0D90                              l3405 0D76  
                            l3351 0CAE                              l3511 22FE                              l4231 235F  
                            l4143 27BF                              l4151 27D5                              l4047 087B  
                            l4311 08F1                              l3361 0CE8                              l4217 2646  
                            l4233 2365                              l3601 252D                              l4065 23CA  
                            l4321 0909                              l4313 08F5                              l3435 0DAF  
                            l3427 0DA4                              l3291 0C38                              l3611 1A26  
                            l3515 2308                              l4235 236B                              l4091 1590  
                            l3531 25CE                              l4163 27E0                              l4171 27F5  
                            l4315 08F7                              l3701 13B2                              l3461 0DF1  
                            l3429 0DA6                              l3293 0C40                              l4229 2359  
                            l4333 0969                              l3471 228B                              l3439 0DB1  
                            l3359 0CE6                              l3287 0C35                              l3615 1A40  
                            l3631 1994                              l4239 2371                              l4183 100C  
                            l5311 0ED6                              l5303 0EBA                              l3801 14E5  
                            l3721 13E8                              l3705 13B5                              l3457 0DED  
                            l3385 0D1B                              l3377 0D09                              l3369 0CF6  
                            l4089 1540                              l3537 25D9                              l5321 0F43  
                            l5305 0EBB                              l3715 13DC                              l3387 0D1D  
                            l3395 0D2C                              l3627 198B                              l4099 15A1  
                            l3563 2610                              l3555 25FF                              l3547 25E1  
                            l4179 1006                              l5331 0FA4                              l4531 1B0A  
                            l3741 142F                              l3821 051C                              l3549 25ED  
                            l4613 2466                              l5325 0F62                              l5309 0EC0  
                            l5341 0FED                              l3751 144D                              l3911 06B7  
                            l3903 0689                              l3823 051E                              l3647 19C1  
                            l4199 25C1                              l3559 2608                              l3575 24F7  
                            l5271 2737                              l4359 0A63                              l5327 0F78  
                            l5335 0FBA                              l5407 1DDA                              l5511 268D  
                            l3681 138E                              l3905 06A0                              l3841 0541  
                            l3825 0526                              l3657 19E2                              l3649 19D1  
                            l3497 2229                              l3593 251C                              l5329 0F8E  
                            l5337 0FE7                              l3747 1448                              l3915 06B9  
                            l3851 0557                              l3843 0549                              l4811 1247  
                            l3587 2504                              l3579 24FE                              l5275 2780  
                            l4651 1C85                              l4643 1C6A                              l4619 249C  
                            l5419 1E49                              l4571 18B3                              l5451 10FC  
                            l3773 1481                              l3765 1453                              l3749 1411  
                            l3685 1391                              l3925 06E2                              l4821 1293  
                            l4813 1250                              l3589 2510                              l3597 2525  
                            l5277 2791                              l4637 1C19                              l5285 0E07  
                            l5373 1F43                              l5429 1E9A                              l5509 268A  
                            l3767 146A                              l3687 1399                              l3935 070E  
                            l3839 053F                              l4823 12B4                              l4815 1271  
                            l5383 1F94                              l4559 07D8                              l5455 1136  
                            l5551 1BDA                              l3777 1483                              l3929 06F7  
                            l3953 102B                              l4809 123E                              l4657 1CA1  
                            l5393 1FF0                              l4585 1845                              l5449 10F8  
                            l4771 22B5                              l3787 14AC                              l3963 1046  
                            l4843 1355                              l4851 1361                              l5643 0FD6  
                            l5491 118C                              l4925 00B7                              l3973 107B  
                            l3965 1056                              l4829 12C0                              l5645 2379  
                            l5477 1152                              l5557 1BFC                              l3975 106E  
                            l3959 1042                              l5647 136B                              l4847 135E  
                            l4599 1922                              l4785 1D3E                              l5497 11CA  
                            l3987 10A2                              l4971 0B49                              l4955 0A8F  
                            l4991 0C05                              l4959 0AC4                              l4985 0B81  
                            l4999 0C19                              STR_1 294A                              STR_2 29EB  
                            STR_3 281B                              STR_4 29DF                              STR_5 29FE  
                            STR_6 2996                              STR_7 29CB                              STR_8 2996  
                            STR_9 29E3                              u3005 2432                              u3015 2440  
                            u3025 2450                              u3035 07F3                              u3150 0CCD  
                            u3160 0CCE                              u4025 1419                              u3145 0CC2  
                            u4115 145F                              u4035 1420                              u3315 0D91  
                            u4205 14CE                              _PIE0 0716                              u4055 1429  
                            u3415 0DC8                              u4065 143D                              u4305 05CD  
                            u3273 0D3E                              u3265 0D21                              _PIE3 0719  
                            _PIE4 071A                              u4315 05FC                              u3195 0CEC  
                            u4325 0652                              u3525 2230                              u4095 1456  
                            u4335 0669                              u3535 2235                              u5215 1B0F  
                            u4185 149A                              u4345 0678                              u3625 25E4  
                            u6105 1ED9                              u5225 1B3F                              u4195 14B5  
                            u4355 068C                              u4515 104F                              u4445 06D0  
                            u3565 2309                              u3645 25EE                              u3725 2507  
                            u6045 0E61                              u3495 2292                              u4455 06EB  
                            u4375 0695                              u4535 1063                              u3575 2310  
                            u3655 25F8                              u5360 22AB                              u4465 0701  
                            u3905 19D9                              u3665 2600                              u3745 2516  
                            u6065 0EDA                              u6145 1DB8                              u4555 1075  
                            u3755 251D                              u6075 0F2C                              u5605 04E0  
                            u3845 19A4                              u6317 1C10                              u6407 1AAB  
                            u4735 23E0                              u6095 0FBE                              u6327 117B  
                            u6417 1AB7                              u5625 0A6A                              u5385 1D42  
                            u6337 27C6                              u6507 219C                              u6427 1AC3  
                            u4595 108F                              u3875 19C2                              u4675 2721  
                            u6347 27E7                              u6437 1ACF                              u5565 00C6  
                            u6357 0B7A                              u4845 27B7                              u6447 1ADB  
                            u6367 1A75                              u5575 03A0                              u4935 25BD  
                            u6295 26BA                              u6457 1AE7                              u6377 1A87  
                            u5585 03C6                              u4945 262F                              u6467 1AF3  
                            u6387 1A93                              u5595 0434                              u6477 2248  
                            u6397 1A9F                              u6487 224E                              u6497 245D  
                            _TMR0 059C                              _TMR1 020C         __size_of_OLED_pulseEnable 0009  
            __size_of_get10msTick 0003                     __CFG_FCMEN$ON 0000                     OLED_send@mode 0023  
                            _data 2743                              _main 1B83                              _ftoa 14EE  
                            _menu 266B                              _itoa 272C                  channelSetup@data 00B1  
                            fsr0h 0005                              fsr1h 0007                              indf0 0000  
                            fsr0l 0004                              indf1 0001                              fsr1l 0006  
                channelSetup@page 00E1                              btemp 007E                     __CFG_BOREN$ON 0000  
                            start 0068    __size_of_getAvgChannelCurrents 01B6                       ?_OLED_write 0070  
   __end_of_getAvgChannelCurrents 0C1B                      spinInput@dir 006B                   ___fldiv@new_exp 0060  
                    spinInput@max 00A6                      spinInput@min 00A2                 _calcRequiredPower 00B5  
                  ?_pushButtonISR 0070                     __CFG_CSWEN$ON 0000                 ___bmul@multiplier 0023  
                   __CFG_MCLRE$ON 0000                      main@checkInt 00DA                ?_calcRequiredPower 006A  
                           ??_ISR 0078                             ??_ema 0034                __size_of_OLED_init 008B  
              __size_of_OLED_send 0017                    _setFudgeFactor 1910                     ___fltol@sign1 006C  
                 __end_of___fladd 0DFD                             ?_main 0070                             ?_ftoa 00A5  
                           ?_menu 00BC                   __end_of___fldiv 14EE                             ?_itoa 00A5  
                 __end_of___awdiv 2615                             STR_10 2A00                             STR_11 29E7  
                           STR_12 29F8                             STR_20 2916                             STR_13 29F5  
                           STR_21 2930                             STR_30 29D9                             STR_14 28E2  
                           STR_22 28C9                             STR_23 29DA                             STR_15 29FB  
                           STR_31 29B6                             STR_16 29AF                             STR_32 29D9  
                           STR_40 29D2                             STR_24 299E                             STR_25 29DA  
                           STR_17 297F                             STR_41 29F2                             STR_33 29BD  
                   __CFG_WDTE$OFF 0000                             STR_34 29C9                             STR_50 28A0  
                           STR_26 29AE                             STR_42 2961                             STR_18 2923  
                           STR_51 29C9                             STR_43 28E5                             STR_35 298E  
                           STR_27 297D                             STR_19 28EF                             STR_36 28D5  
                           STR_28 29A6                             STR_52 2974                             STR_44 2909  
                 __end_of___awmod 2532                             STR_37 29C9                             STR_45 29C4  
                           STR_53 2956                             STR_29 293D                             STR_46 29EF  
                           STR_38 2986                             STR_47 28FC                             STR_39 2888  
                           STR_48 29C9                             STR_49 296B                   __end_of___flmul 072E  
             ??_calcRequiredPower 006C   checkSensor@sensorUpdateInterval 0128                   __end_of___flsub 2280  
                 __end_of___fltol 19F1                             _T1CLK 0211                  __end_of_OLED_Off 21C0  
                 ___awdiv@divisor 0020                             _T1CON 020E                             _IOCAN 1F3E  
                           _IOCAP 1F3D                             _IOCCN 1F54                             i1l371 005F  
                           i1l363 0015                             i1l365 0031                             i1l375 0066  
                 ___awdiv@counter 0025             __end_of_reset10msTick 1003                             _TRISA 0012  
                           _TRISB 0013                             _TRISC 0014            uartReceiveISR@checksum 00E5  
             ___lmul@multiplicand 0024              __size_of_checkSensor 016C                      ?_setDPOffset 00B1  
                   __CFG_WRTB$OFF 0000                     __CFG_WRTC$OFF 0000                    OLED_send@value 0025  
                           _getPB 21E1                    statusView@data 00B1                    statusView@page 00E3  
        statusView@prevSensorStat 00EE                             _p_fct 01C0                             ema@in 002C  
                ?_uartIsDataReady 0070                             _error 07FF                             _setup 072E  
                  setSkyTemp@data 00B1                             ftoa@w 00AE                             pclath 000A  
                 __end_of_timeNow 2215              __size_of_channelView 0203                             status 0003  
                           wtemp0 007E         __end_of_calcRequiredPower 0502                   __end_of_strncpy 2356  
                   spinInput@step 00AA                       _systemCheck 10AB       getAvgChannelCurrents@chData 00AF  
                 __initialization 006A                      __end_of_main 1C16                      __end_of_ftoa 1674  
                    __end_of_menu 26C3                      __end_of_itoa 2795            __end_of_setFudgeFactor 197F  
                  __CFG_SAFEN$OFF 0000                            ??_main 00D9                            ??_ftoa 006E  
                          ??_menu 00BE                            ??_itoa 00A9                 ?_adcGetConversion 0020  
                  OLED_print_xy@s 0028                  setSwitch@channel 0023              __end_of_getNextState 1CAB  
         __size_of_setOutputPower 0121                ??_adcGetConversion 0022      __size_of_convertAnalogValues 018C  
             __size_of_OLED_write 000B                setOutputPower@data 00B1                            ?_getPB 0070  
         _OLED_scrollDisplayRight 217D                            _ADCON1 009E             calcRequiredPower@data 006A  
                          ?_error 0070                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0022                            ?_setup 00B1                            _ANSELA 1F38  
                          _ANSELB 1F43                            _ANSELC 1F4E                __CFG_RSTOSC$HFINT1 0000  
                          _T0CON0 059E                            _T0CON1 059F                            _RC1REG 0119  
                          _RC1STA 011D                            _RC6PPS 1F26                            i1l4303 234B  
                          i1l5043 22EF                            i1l5037 22E1                            i1l5029 22CD  
                          i1l5053 241C                            i1l5063 24B0                            i1l5081 24E8  
                          i1l5153 0020                            i1l5075 24D4                            i1l5069 24B8  
                          i1l5165 002E                            i1l5175 0057                            i1l5159 0027  
                          i1l4297 232A                    __CFG_WDTCCS$SC 0000                            i1l4299 2342  
           __end_of_getDataPacket 2176                            _INTCON 000B                 __end_of_OLED_init 1AF8  
               __end_of_OLED_send 07FF                   systemCheck@data 00B0                            _OSCFRQ 0893  
                          _SPBRGL 011B                            _TX1REG 011A                            _TX1STA 011E  
            __end_of_getStateFunc 24A7                  __end_of___xxtofl 10AB                   ??_pushButtonISR 0070  
                  __CFG_PWRTE$OFF 0000                            ___flge 19F1                            ___bmul 1003  
                          ___fleq 257A                            ___lmul 22F5        OLED_loadSpecialChars@F7945 01A0  
                       ??___fladd 0056                            ___wmul 2226                         ??___fldiv 0056  
                       ??___awdiv 0024                    __CFG_STVREN$ON 0000                         ??___awmod 0024  
                       ??___flmul 003C                         ??___flsub 006A                         ??___fltol 00A0  
                 ?_setFudgeFactor 00B1                channelSetup@chData 00B7          __size_of_OLED_returnHome 0004  
                          _paging 2795                  ___awdiv@quotient 0027                   ___awmod@divisor 0020  
                          _rotISR 23EC                            _rotDir 00E8           __size_of_initGlobalData 0108  
                   ?_OLED_command 0070                   ___awmod@counter 0025                            menu@pb 00C3  
              __size_of__Umul8_16 0020             __size_of_channelSetup 012C           adcGetConversion@channel 0023  
           OLED_waitForReady@busy 0020                         ??_timeNow 0024                 OLED_command@value 0026  
                       ??_strncpy 0073                  _OLED_pulseEnable 2199                        ___flge@ff1 0020  
                      ___flge@ff2 0024                     checkSensor@dp 003A                      ___xxtofl@arg 0030  
                    ___xxtofl@exp 002F                      ___xxtofl@val 0026                        ___fleq@ff1 0020  
                      ___fleq@ff2 0024                    spinInput@input 00A0           __end_of__initialization 00B1  
                    ftoa@intValue 00AD        __size_of_calcRequiredPower 044D                        ___fltol@f1 0068  
                       ?_OLED_Off 0070               ___bmul@multiplicand 0020          __size_of_OLED_write4bits 003F  
                  __pcstackCOMMON 0070                      __pidataBANK1 0002                      __pidataBANK2 2191  
                    __pidataBANK3 1801                     __end_of_getPB 21EC           convertAnalogValues@data 0068  
         convertAnalogValues@avgI 012C           convertAnalogValues@avgT 0130           convertAnalogValues@avgV 012E  
    getAvgChannelCurrents@channel 00EC              uartReceiveISR@buffer 0136                     __end_of_error 0800  
                    _channelSetup 1ED4                     __end_of_setup 07E8                    ??_OLED_command 0026  
    getAvgChannelCurrents@current 00AB    __size_of_OLED_loadSpecialChars 0027                setFudgeFactor@data 00B1  
   __end_of_OLED_loadSpecialChars 22C7      getAvgChannelCurrents@samples 00EB                __size_of_getRotDir 000B  
       ??_OLED_scrollDisplayRight 0027                    setSwitch@state 0020                           ??_getPB 0020  
          __size_of_OLED_print_xy 0032                           ??_error 0020                        _dataPacket 014A  
                         ??_setup 00B3              __size_of_setDPOffset 006F                        __pbssBANK1 00DE  
                      __pbssBANK2 0120                uartIsDataReady@ret 0021           __size_of_uartReceiveISR 0045  
              __size_of_menuError 0011                      ??_OLED_write 0026                        ??_OLED_Off 0027  
               __end_of__Umul8_16 22A0                        __pmaintext 1B83                           ?___flge 0020  
                         ?___bmul 0020                           ?___fleq 0020                           ?___lmul 0020  
                         ?___wmul 0020                 getStateFunc@state 002B                   __CFG_PPS1WAY$ON 0000  
                      __pintentry 0004             __size_of_getNextState 0095                           ?_paging 0027  
               _OLED_waitForReady 2242                    ___lmul@product 0028                           ?_rotISR 0070  
              __size_of_setSwitch 0032          ??_OLED_scrollDisplayLeft 0027                __size_of_timeSince 0056  
              ?_OLED_waitForReady 0070                __size_of_uartReset 0008                    _setOutputPower 1DB3  
               ??_OLED_returnHome 0027                         ?___xxtofl 0026                __size_of_spinInput 00B3  
                         _OSCCON1 088D                __end_of_OLED_write 21CB                     ??_get10msTick 0070  
             ??_OLED_waitForReady 0020             __size_of_getStateFunc 0044                 pushButtonISR@time 0071  
                     rotISR@input 0077                      _getNextState 1C16                      ?_systemCheck 00B0  
               __end_of_getRotDir 21E1               _convertAnalogValues 1674                        ema@average 002E  
           _getAvgChannelCurrents 0A65                     _OLED_print_xy 2388         __end_of_OLED_waitForReady 2261  
                 __size_of___flge 007C                   __size_of___bmul 0012                   __size_of___fleq 0049  
                         ___fladd 0C1B                           ___fldiv 1374                           ___awdiv 25C3  
                 __size_of___lmul 0030                           ___awmod 24EC                           ___flmul 0502  
                         ___flsub 2261                           ___fltol 197F                   __size_of___wmul 001C  
                 OLED_write@value 0026                     ?_uartSendByte 0070                    _initGlobalData 1CAB  
                 __size_of_paging 006B                 ??_OLED_write4bits 0020                        _initialize 2532  
                 __size_of_rotISR 0038            __end_of_setOutputPower 1ED4                           __ptext1 10AB  
                         __ptext2 1674                           __ptext3 21B6                           __ptext4 266B  
                         __ptext5 1910                           __ptext6 1833                           __ptext7 18A1  
                         __ptext8 072E                           __ptext9 1AF8                     ??_checkSensor 0036  
                         _pbState 00E7                      _getStateFunc 2463                   __CFG_WRTAPP$OFF 0000  
                    __size_of_ISR 0064                  _channelView$1226 00B9                 __end_of_menuError 2226  
                         ema@tmp0 003C                      __size_of_ema 0069                        ??___xxtofl 002A  
                ___awmod@dividend 0022              ?_convertAnalogValues 0068                         _IOCAFbits 1F3F  
                 __CFG_WRTSAF$OFF 0000                           _rxCount 007C                           _timeNow 2204  
                   ??_channelView 00B3                           clrloop0 21ED                           _strncpy 2325  
            end_of_initialization 00B1                        _setLensDia 1AF8                           ftoa@len 00AB  
                         ftoa@pos 00AF                           ftoa@str 00B0                           paging@n 002C  
                  paging@lastPage 0027              __end_of_OLED_command 21AC                 __end_of_setSwitch 2388  
                         init_ram 21F8         __size_of_adcGetConversion 001D                           itoa@str 00A5  
                         initloop 21F9               __end_of_get10msTick 2179                        _setSkyTemp 1833  
               __end_of_timeSince 266B                 __end_of_uartReset 2191          __size_of_uartIsDataReady 000B  
                ??_setFudgeFactor 00B3                         _OLED_init 1A6D                         _OLED_send 07E8  
          __size_of_reset10msTick 0003               OLED_setCursor@F7932 0167                     ?_returnToPage 0070  
               __end_of_spinInput 08D1                    ?_OLED_print_xy 0027                OLED_print_xy@F7940 0163  
          __end_of_initGlobalData 1DB3                     _dataReadyFlag 00E6                    ??_uartSendByte 0020  
           __CFG_WDTCPS$WDTCPS_31 0000          __end_of_OLED_pulseEnable 21A2                         _PORTAbits 000C  
                       _PORTCbits 000E                   ?_setOutputPower 00B1   __size_of_OLED_scrollDisplayLeft 0004  
                 _selectedChannel 00E4                       ___fladd@grs 0061             ??_convertAnalogValues 006A  
                   ___xxtofl@sign 002E                         _TRISCbits 0014                       ___fldiv@grs 0062  
                     ___fldiv@rem 005B               __end_of_checkSensor 1374                  __CFG_FEXTOSC$OFF 0000  
    OLED_loadSpecialChars@special 0028                    _uartReceiveISR 24A7                       ___flmul@grs 0042  
                      _statusView 08D1               __end_of_channelView 1000                   channelView@data 00B1  
               getNextState@state 002B                   channelView@page 00E2                        ?_OLED_init 0070  
                  ??_returnToPage 0027                        ?_OLED_send 0023            ?_getAvgChannelCurrents 006E  
           __end_of_pushButtonISR 22F5                 __size_of_OLED_Off 000A        __size_of_OLED_waitForReady 001F  
                 ?_initGlobalData 0020                    __end_of___flge 1A6D              __end_of_nextStateTbl 2888  
                  __end_of___bmul 1015                    __end_of___fleq 25C3                    __end_of___lmul 2325  
                  __end_of___wmul 2242                       ?_initialize 0070            __size_of_getDataPacket 0002  
                  __end_of_paging 2800                        ftoa@fValue 00A5                    __end_of_rotISR 2424  
             start_initialization 006A                     _reset10msTick 1000                       __end_of_ISR 0068  
                     __end_of_ema 272C          OLED_print_xy@row_offsets 002B            __end_of_uartReceiveISR 24EC  
                     _get10msTick 2176          getAvgChannelCurrents@adc 00A9          getAvgChannelCurrents@avg 0132  
                     ?_setLensDia 00B1            _OLED_scrollDisplayLeft 2179              calcRequiredPower@Rth 00A4  
            initGlobalData@chData 0027              calcRequiredPower@phi 00C4                       ?_setSkyTemp 00B1  
                 ??_OLED_print_xy 002A                    systemCheck@str 00B4                  __CFG_LPBOREN$OFF 0000  
                      error@error 0070                          ??___flge 0028                          ??___bmul 0021  
                        ??___fleq 0028              __size_of_systemCheck 015D                    timeSince@since 0024  
                        ??___lmul 0028                   _OLED_returnHome 2185                          ??___wmul 0024  
                       __Umul8_16 2280                 ??_uartIsDataReady 0020                       __pdataBANK1 00EE  
                     __pdataBANK2 0163                       __pdataBANK3 01A0                          ??_paging 0028  
                        ??_rotISR 0070                  OLED_print_xy@col 002F                       _checkSensor 1208  
                       ___fladd@a 0052                         ___fladd@b 004E                  OLED_print_xy@row 0027  
                       ___fldiv@a 004E                         ___fldiv@b 0052                    ?_reset10msTick 0070  
                     __pbssBIGRAM 2743                         ___flmul@a 0038                         ___flmul@b 0034  
                     __pbssCOMMON 007C                         ___flsub@a 0062                         ___flsub@b 0066  
                       ___latbits 0003                     ??_setDPOffset 00B3                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0             _OLED_loadSpecialChars 22A0             __size_of_OLED_command 000A  
          convertAnalogValues@adc 006E                 __size_of___xxtofl 0096                 paging@currentPage 002A  
                     _channelView 0DFD                   ?_uartReceiveISR 0070              __end_of_uartSendByte 21B6  
                    systemCheck@n 00B7                       ?_statusView 00B1                     _getDataPacket 2174  
                _adcGetConversion 0801               __size_of_initialize 0048              setOutputPower@chData 00B7  
                 _OLED_write4bits 2424                       ??_OLED_init 0027                       ??_OLED_send 0024  
                        ?___fladd 004E                          ?___fldiv 004E                          ?___awdiv 0020  
                        ?___awmod 0020                          ?___flmul 0034                          ?___flsub 0062  
                        ?___fltol 0068                    _g_updateScreen 00EF                         _getRotDir 21D6  
                      ?__Umul8_16 0020               __size_of_setLensDia 008B          ?_OLED_scrollDisplayRight 0070  
                    _OLED_command 21A2                          _BAUD1CON 011F                    getNextState@pb 0027  
                    channelView@n 00BB          _convertAnalogValues$2144 006A               __size_of_setSkyTemp 006E  
            __end_of_returnToPage 23EC                          ?_timeNow 0020                    __size_of_getPB 000B  
                       _menuError 2215                    __size_of_error 0001                         _tick100ms 0120  
                        ?_strncpy 0070                    __size_of_setup 00BA                    ?_getDataPacket 0070  
             __end_of_setDPOffset 1910                    ___wmul@product 0024                          _LATAbits 0018  
                        _LATBbits 0019                          _LATCbits 001A           __end_of_OLED_returnHome 2189  
                       clear_ram0 21EC                     paging@lastDir 00DE                          _PIE0bits 0716  
                        _PIE3bits 0719                          _PIE4bits 071A                          _OLED_Off 21B6  
                  setLensDia@data 00B1                         _setSwitch 2356                          _PIR0bits 070C  
                        _PIR3bits 070F                          _PIR4bits 0710                         _timeSince 2615  
                       _uartReset 2189                   initGlobalData@n 0026                 __CFG_BBSIZE$BB512 0000  
                ??_setOutputPower 00B3         getAvgChannelCurrents@data 006E         getAvgChannelCurrents@busy 00EA  
                      ?_getRotDir 0070                         _spinInput 081E                 ?_OLED_pulseEnable 0070  
                 ??_reset10msTick 0070                        _ADCON0bits 009D                 ___wmul@multiplier 0020  
                    _RX1DTPPSbits 1ECB               __size_of_statusView 0194                   setDPOffset@data 00B1  
              ??_OLED_pulseEnable 0020            ?_OLED_loadSpecialChars 0070                  getNextState@page 0026  
                   menu@nextState 00C6              OLED_write4bits@value 0022                       _curRotState 007D  
                _transition_table 28AD              __end_of_stateFuncTbl 281B                        ?_menuError 0070  
               ___lmul@multiplier 0020           __end_of_OLED_write4bits 2463                      _nextStateTbl 284C  
                       ftoa@width 00A9           ??_getAvgChannelCurrents 00A5               calcRequiredPower@T1 00D0  
             calcRequiredPower@T2 00D4                  ??_initGlobalData 0022                         paging@dir 002B  
               _OLED_clearDisplay 2181                        ?_setSwitch 0020                     uartSendByte@s 0020  
                       menu@state 00DF                        ?_timeSince 0024                        ?_uartReset 0070  
 __end_of_OLED_scrollDisplayRight 2181                ?_OLED_clearDisplay 0070                       ??__Umul8_16 0022  
                       itoa@value 00A7                     ?_channelSetup 00B1                         itoa@width 00A8  
                __size_of___fladd 01E2                  __size_of___fldiv 017A                  __size_of___awdiv 0052  
     __end_of_convertAnalogValues 1800                  __size_of___awmod 0046                        ?_spinInput 00A0  
                __size_of___flmul 022C                  __size_of___flsub 001F                  __size_of___fltol 0072  
          OLED_loadSpecialChars@n 0048                      ??_initialize 0020               ??_OLED_clearDisplay 0027  
                        ___xxtofl 1015                       _rxFErrCount 0135             __size_of_uartSendByte 000A  
                     _setDPOffset 18A1          checkSensor@sensorTimeout 0124                          __ptext10 1DB3  
                        __ptext11 1ED4                          __ptext20 1C16                          __ptext12 0DFD  
                        __ptext21 1003                          __ptext13 08D1                          __ptext30 14EE  
                        __ptext22 23BA                          __ptext14 081E                          __ptext31 2226  
                        __ptext23 2795                          __ptext15 2215                          __ptext40 22F5  
                        __ptext32 257A                          __ptext24 21D6                          __ptext16 2185  
                        __ptext41 0801                          __ptext33 2388                          __ptext25 217D  
                        __ptext17 2181                          __ptext50 1015                          __ptext42 197F  
                        __ptext34 2532                          __ptext26 2179                          __ptext18 2463  
                        __ptext51 19F1                          __ptext43 1208                          __ptext35 1CAB  
                        __ptext27 272C                          __ptext19 21E1                          __ptext60 1A6D  
                        __ptext52 00B5                          __ptext44 21AC                          __ptext36 0A65  
                        __ptext28 24EC                          __ptext61 21A2                          __ptext53 2261  
                        __ptext45 2189                          __ptext37 2356                          __ptext29 25C3  
                        __ptext70 22C7                          __ptext62 2242                          __ptext54 0C1B  
                        __ptext46 21CB                          __ptext38 07FF                          __ptext71 1000  
                        __ptext63 07E8                          __ptext55 0502                          __ptext47 2615  
                        __ptext39 26C3                          __ptext72 2176                          __ptext64 2424  
                        __ptext56 2280                          __ptext48 2204                          __ptext65 2199  
                        __ptext57 1374                          __ptext49 2174                          __ptext58 22A0  
                        __ptext67 24A7                          __ptext59 21C0                          __ptext68 2325  
                        __ptext69 23EC                      ?_get10msTick 0070                  __size_of_timeNow 0011  
                 ??_getDataPacket 0020           ?_OLED_scrollDisplayLeft 0070                      ??_setLensDia 00B3  
                   getNextState@n 002C                       _OSCCON3bits 088F                  __size_of_strncpy 0031  
                        ema@alpha 0030                     __size_of_main 0093                     __size_of_ftoa 0186  
       __end_of_OLED_clearDisplay 2185                     __size_of_menu 0058                     __size_of_itoa 0069  
                    ??_setSkyTemp 00B3                   _uartIsDataReady 21CB                          getPB@ret 0021  
                        _tick10ms 00E9                  ?_OLED_returnHome 0070                __end_of_initialize 257A  
            __CFG_WDTCWS$WDTCWS_7 0000                        _RC1STAbits 011D                       _rxOErrCount 0134  
                  ??_channelSetup 00B3                         setup@data 00B1                          int$flags 007E  
                       setup@page 00E0                       ??_getRotDir 0020                      _uartSendByte 21AC  
           __size_of_returnToPage 0032                __end_of_setLensDia 1B83          __end_of_adcGetConversion 081E  
         __size_of_setFudgeFactor 006F                      ?_checkSensor 0034                  ??_uartReceiveISR 0076  
                        ftoa@prec 00AA                          ftoa@sign 00AC                        _INTCONbits 000B  
              calcRequiredPower@A 00C8                calcRequiredPower@d 00C0                calcRequiredPower@n 00D8  
              calcRequiredPower@p 00A0                __end_of_setSkyTemp 18A1                          menu@data 00BC  
              initGlobalData@data 0020                          menu@page 00C2                          menu@func 00C4  
  __end_of_OLED_scrollDisplayLeft 217D                      timeSince@now 0030                    __pstringtext10 2916  
                  __pstringtext11 2923                    __pstringtext20 2986                    __pstringtext12 2930  
                  __pstringtext21 298E                    __pstringtext13 293D                    __pstringtext30 29D2  
                  __pstringtext22 2996                    __pstringtext14 294A                    __pstringtext31 29D9  
                  __pstringtext23 299E                    __pstringtext15 2956                    __pstringtext40 29FB  
                  __pstringtext32 29DF                    __pstringtext24 29A6                    __pstringtext16 2961  
                  __pstringtext41 29FE                    __pstringtext33 29E3                    __pstringtext25 29AE  
                  __pstringtext17 296B                    __pstringtext42 2A00                    __pstringtext34 29E7  
                  __pstringtext26 29B6                    __pstringtext18 2974                    __pstringtext43 0000  
                  __pstringtext35 29EB                    __pstringtext27 29BD                    __pstringtext19 297D  
                  __pstringtext36 29EF                    __pstringtext28 29C4                    __pstringtext37 29F2  
                  __pstringtext29 29CB                    __pstringtext38 29F5                    __pstringtext39 29F8  
          __size_of_pushButtonISR 002E                       ??_menuError 0030                      ?_channelView 00B1  
                ?_OLED_write4bits 0070                          intlevel1 0000                      ??_statusView 00B3  
               __CFG_CLKOUTEN$OFF 0000                     ?_getNextState 0026                     ??_systemCheck 00B2  
                      _OLED_write 21C0                       ??_setSwitch 0021                         strncpy@cp 0075  
           __end_of_OLED_print_xy 23BA                      _returnToPage 23BA                       ??_timeSince 0028  
                     ??_uartReset 0020                       ??_spinInput 006A                      getRotDir@ret 0021  
                   __pstringtext1 284C                     __pstringtext2 28AD                     __pstringtext3 2800  
                   __pstringtext4 2888                     __pstringtext5 28C9                     __pstringtext6 28E2  
                   __pstringtext7 28EF                     __pstringtext8 28FC                     __pstringtext9 2909  
                   ?_getStateFunc 0026            __Umul8_16@multiplicand 0020                     getStateFunc@n 002C  
              __end_of_statusView 0A65                          strncpy@d 0074                          strncpy@n 0071  
                        strncpy@s 0070           __end_of_uartIsDataReady 21D6                     ___fladd@signs 005E  
__size_of_OLED_scrollDisplayRight 0004                  checkSensor@state 00ED                      ___fladd@aexp 005F  
                    ___fladd@bexp 0060        __size_of_OLED_clearDisplay 0004                   checkSensor@data 0034  
                  ??_getNextState 0028              __Umul8_16@multiplier 0028                 __Umul8_16@product 0024  
