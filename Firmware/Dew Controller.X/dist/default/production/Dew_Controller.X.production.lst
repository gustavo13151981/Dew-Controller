

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Jan 30 19:01:57 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK5,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	stringtext24,global,class=STRCODE,delta=2
    32                           	psect	stringtext25,global,class=STRCODE,delta=2
    33                           	psect	stringtext26,global,class=STRCODE,delta=2
    34                           	psect	stringtext27,global,class=STRCODE,delta=2
    35                           	psect	stringtext28,global,class=STRCODE,delta=2
    36                           	psect	stringtext29,global,class=STRCODE,delta=2
    37                           	psect	stringtext30,global,class=STRCODE,delta=2
    38                           	psect	stringtext31,global,class=STRCODE,delta=2
    39                           	psect	stringtext32,global,class=STRCODE,delta=2
    40                           	psect	stringtext33,global,class=STRCODE,delta=2
    41                           	psect	stringtext34,global,class=STRCODE,delta=2
    42                           	psect	stringtext35,global,class=STRCODE,delta=2
    43                           	psect	stringtext36,global,class=STRCODE,delta=2
    44                           	psect	stringtext37,global,class=STRCODE,delta=2
    45                           	psect	stringtext38,global,class=STRCODE,delta=2
    46                           	psect	stringtext39,global,class=STRCODE,delta=2
    47                           	psect	stringtext40,global,class=STRCODE,delta=2
    48                           	psect	stringtext41,global,class=STRCODE,delta=2
    49                           	psect	stringtext42,global,class=STRCODE,delta=2
    50                           	psect	stringtext43,global,class=STRCODE,delta=2
    51                           	psect	stringtext44,global,class=STRCODE,delta=2
    52                           	psect	stringtext45,global,class=STRCODE,delta=2
    53                           	psect	stringtext46,global,class=STRCODE,delta=2
    54                           	psect	stringtext47,global,class=STRCODE,delta=2
    55                           	psect	stringtext48,global,class=STRCODE,delta=2
    56                           	psect	stringtext49,global,class=STRCODE,delta=2
    57                           	psect	stringtext50,global,class=STRCODE,delta=2
    58                           	psect	stringtext51,global,class=STRCODE,delta=2
    59                           	psect	stringtext52,global,class=STRCODE,delta=2
    60                           	psect	stringtext53,global,class=STRCODE,delta=2
    61                           	psect	stringtext54,global,class=STRCODE,delta=2
    62                           	psect	stringtext55,global,class=STRCODE,delta=2
    63                           	psect	stringtext56,global,class=STRCODE,delta=2
    64                           	psect	stringtext57,global,class=STRCODE,delta=2
    65                           	psect	stringtext58,global,class=STRCODE,delta=2
    66                           	psect	stringtext59,global,class=STRCODE,delta=2
    67                           	psect	stringtext60,global,class=STRCODE,delta=2
    68                           	psect	stringtext61,global,class=STRCODE,delta=2
    69                           	psect	stringtext62,global,class=STRCODE,delta=2
    70                           	psect	stringtext63,global,class=STRCODE,delta=2
    71                           	psect	stringtext64,global,class=STRCODE,delta=2
    72                           	psect	stringtext65,global,class=STRCODE,delta=2
    73                           	psect	stringtext66,global,class=STRCODE,delta=2
    74                           	psect	stringtext67,global,class=STRCODE,delta=2
    75                           	psect	stringtext68,global,class=STRCODE,delta=2
    76                           	psect	stringtext69,global,class=STRCODE,delta=2
    77                           	psect	stringtext70,global,class=STRCODE,delta=2
    78                           	psect	stringtext71,global,class=STRCODE,delta=2
    79                           	psect	stringtext72,global,class=STRCODE,delta=2
    80                           	psect	stringtext73,global,class=STRCODE,delta=2
    81                           	psect	cinit,global,class=CODE,merge=1,delta=2
    82                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    83                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    84                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    85                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    86                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    87                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    88                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    89                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    91                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    92                           	psect	inittext,global,class=CODE,delta=2
    93                           	psect	clrtext,global,class=CODE,delta=2
    94                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1
    95                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    96                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    97                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    98                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    99                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   100                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   101                           	psect	text1,local,class=CODE,merge=1,delta=2
   102                           	psect	text2,local,class=CODE,merge=1,delta=2
   103                           	psect	text3,local,class=CODE,merge=1,delta=2
   104                           	psect	text4,local,class=CODE,merge=1,delta=2
   105                           	psect	text5,local,class=CODE,merge=1,delta=2
   106                           	psect	text6,local,class=CODE,merge=1,delta=2
   107                           	psect	text7,local,class=CODE,merge=1,delta=2
   108                           	psect	text8,local,class=CODE,merge=1,delta=2
   109                           	psect	text9,local,class=CODE,merge=1,delta=2
   110                           	psect	text10,local,class=CODE,merge=1,delta=2
   111                           	psect	text11,local,class=CODE,merge=1,delta=2
   112                           	psect	text12,local,class=CODE,merge=1,delta=2
   113                           	psect	text13,local,class=CODE,merge=1,delta=2
   114                           	psect	text14,local,class=CODE,merge=1,delta=2
   115                           	psect	text15,local,class=CODE,merge=1,delta=2
   116                           	psect	text16,local,class=CODE,merge=1,delta=2
   117                           	psect	text17,local,class=CODE,merge=1,delta=2
   118                           	psect	text18,local,class=CODE,merge=1,delta=2
   119                           	psect	text19,local,class=CODE,merge=1,delta=2
   120                           	psect	text20,local,class=CODE,merge=1,delta=2
   121                           	psect	text21,local,class=CODE,merge=1,delta=2
   122                           	psect	text22,local,class=CODE,merge=1,delta=2
   123                           	psect	text23,local,class=CODE,merge=1,delta=2
   124                           	psect	text24,local,class=CODE,merge=1,delta=2
   125                           	psect	text25,local,class=CODE,merge=1,delta=2
   126                           	psect	text26,local,class=CODE,merge=1,delta=2
   127                           	psect	text27,local,class=CODE,merge=1,delta=2
   128                           	psect	text28,local,class=CODE,merge=1,delta=2
   129                           	psect	text29,local,class=CODE,merge=1,delta=2
   130                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
   131                           	psect	text31,local,class=CODE,merge=1,delta=2
   132                           	psect	text32,local,class=CODE,merge=1,delta=2
   133                           	psect	text33,local,class=CODE,merge=1,delta=2
   134                           	psect	text34,local,class=CODE,merge=1,delta=2
   135                           	psect	text35,local,class=CODE,merge=1,delta=2
   136                           	psect	text36,local,class=CODE,merge=1,delta=2
   137                           	psect	text37,local,class=CODE,merge=1,delta=2
   138                           	psect	text38,local,class=CODE,merge=1,delta=2
   139                           	psect	text39,local,class=CODE,merge=1,delta=2
   140                           	psect	text40,local,class=CODE,merge=1,delta=2
   141                           	psect	text41,local,class=CODE,merge=1,delta=2
   142                           	psect	text42,local,class=CODE,merge=1,delta=2
   143                           	psect	text43,local,class=CODE,merge=1,delta=2
   144                           	psect	text44,local,class=CODE,merge=1,delta=2
   145                           	psect	text45,local,class=CODE,merge=1,delta=2
   146                           	psect	text46,local,class=CODE,merge=1,delta=2
   147                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
   148                           	psect	text48,local,class=CODE,merge=1,delta=2
   149                           	psect	text49,local,class=CODE,merge=1,delta=2,group=1
   150                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
   151                           	psect	text51,local,class=CODE,merge=1,delta=2
   152                           	psect	text52,local,class=CODE,merge=1,delta=2,group=2
   153                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   154                           	psect	text54,local,class=CODE,merge=1,delta=2
   155                           	psect	text55,local,class=CODE,merge=1,delta=2
   156                           	psect	text56,local,class=CODE,merge=1,delta=2
   157                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
   158                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
   159                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
   160                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
   161                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   162                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
   163                           	psect	text63,local,class=CODE,merge=1,delta=2
   164                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
   165                           	psect	text65,local,class=CODE,merge=1,delta=2,group=1
   166                           	psect	text66,local,class=CODE,merge=1,delta=2,group=1
   167                           	psect	text67,local,class=CODE,merge=1,delta=2,group=1
   168                           	psect	text68,local,class=CODE,merge=1,delta=2,group=1
   169                           	psect	text69,local,class=CODE,merge=1,delta=2
   170                           	psect	text70,local,class=CODE,merge=1,delta=2
   171                           	psect	text71,local,class=CODE,merge=1,delta=2
   172                           	psect	text72,local,class=CODE,merge=1,delta=2
   173                           	psect	text73,local,class=CODE,merge=1,delta=2
   174                           	psect	text74,local,class=CODE,merge=1,delta=2
   175                           	psect	text75,local,class=CODE,merge=1,delta=2
   176                           	psect	text76,local,class=CODE,merge=1,delta=2
   177                           	psect	intentry,global,class=CODE,delta=2
   178                           	psect	text78,local,class=CODE,merge=1,delta=2
   179                           	psect	text79,local,class=CODE,merge=1,delta=2,group=2
   180                           	psect	text80,local,class=CODE,merge=1,delta=2
   181                           	psect	text81,local,class=CODE,merge=1,delta=2
   182                           	psect	text82,local,class=CODE,merge=1,delta=2
   183                           	psect	text83,local,class=CODE,merge=1,delta=2
   184                           	psect	text84,local,class=CODE,merge=1,delta=2
   185                           	dabs	1,0xCA0,32
   186                           	dabs	1,0xC20,80
   187                           	dabs	1,0xBB6,58
   188                           	dabs	1,0x2746,0,_data
   189                           	dabs	1,0x7E,2
   190  0000                     
   191                           ; Version 2.10
   192                           ; Generated 31/07/2019 GMT
   193                           ; 
   194                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   195                           ; All rights reserved.
   196                           ; 
   197                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   198                           ; 
   199                           ; Redistribution and use in source and binary forms, with or without modification, are
   200                           ; permitted provided that the following conditions are met:
   201                           ; 
   202                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   203                           ;        conditions and the following disclaimer.
   204                           ; 
   205                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   206                           ;        of conditions and the following disclaimer in the documentation and/or other
   207                           ;        materials provided with the distribution.
   208                           ; 
   209                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   210                           ;        software without specific prior written permission.
   211                           ; 
   212                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   213                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   214                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   215                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   216                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   217                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   218                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   219                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   220                           ; 
   221                           ; 
   222                           ; Code-generator required, PIC16F15356 Definitions
   223                           ; 
   224                           ; SFR Addresses
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0008                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  0010                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0016                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  009B                     	;# 
   249  009B                     	;# 
   250  009C                     	;# 
   251  009D                     	;# 
   252  009E                     	;# 
   253  009F                     	;# 
   254  0119                     	;# 
   255  0119                     	;# 
   256  0119                     	;# 
   257  011A                     	;# 
   258  011A                     	;# 
   259  011A                     	;# 
   260  011B                     	;# 
   261  011B                     	;# 
   262  011B                     	;# 
   263  011B                     	;# 
   264  011B                     	;# 
   265  011C                     	;# 
   266  011C                     	;# 
   267  011C                     	;# 
   268  011D                     	;# 
   269  011D                     	;# 
   270  011D                     	;# 
   271  011E                     	;# 
   272  011E                     	;# 
   273  011E                     	;# 
   274  011F                     	;# 
   275  011F                     	;# 
   276  011F                     	;# 
   277  011F                     	;# 
   278  011F                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  018E                     	;# 
   282  018F                     	;# 
   283  0190                     	;# 
   284  0191                     	;# 
   285  0192                     	;# 
   286  0196                     	;# 
   287  0197                     	;# 
   288  0198                     	;# 
   289  0199                     	;# 
   290  019A                     	;# 
   291  019B                     	;# 
   292  019C                     	;# 
   293  020C                     	;# 
   294  020C                     	;# 
   295  020D                     	;# 
   296  020E                     	;# 
   297  020F                     	;# 
   298  020F                     	;# 
   299  0210                     	;# 
   300  0210                     	;# 
   301  0211                     	;# 
   302  0211                     	;# 
   303  028C                     	;# 
   304  028C                     	;# 
   305  028D                     	;# 
   306  028D                     	;# 
   307  028E                     	;# 
   308  028F                     	;# 
   309  0290                     	;# 
   310  0291                     	;# 
   311  030C                     	;# 
   312  030C                     	;# 
   313  030D                     	;# 
   314  030E                     	;# 
   315  030F                     	;# 
   316  0310                     	;# 
   317  0310                     	;# 
   318  0311                     	;# 
   319  0312                     	;# 
   320  0313                     	;# 
   321  0314                     	;# 
   322  0314                     	;# 
   323  0315                     	;# 
   324  0316                     	;# 
   325  0318                     	;# 
   326  0318                     	;# 
   327  0319                     	;# 
   328  031A                     	;# 
   329  031C                     	;# 
   330  031C                     	;# 
   331  031D                     	;# 
   332  031E                     	;# 
   333  038C                     	;# 
   334  038C                     	;# 
   335  038D                     	;# 
   336  038E                     	;# 
   337  058C                     	;# 
   338  058C                     	;# 
   339  058D                     	;# 
   340  058E                     	;# 
   341  058F                     	;# 
   342  058F                     	;# 
   343  0590                     	;# 
   344  0591                     	;# 
   345  0592                     	;# 
   346  0593                     	;# 
   347  059C                     	;# 
   348  059C                     	;# 
   349  059D                     	;# 
   350  059D                     	;# 
   351  059E                     	;# 
   352  059F                     	;# 
   353  060C                     	;# 
   354  060D                     	;# 
   355  060E                     	;# 
   356  060F                     	;# 
   357  0610                     	;# 
   358  0611                     	;# 
   359  0612                     	;# 
   360  0613                     	;# 
   361  0614                     	;# 
   362  070C                     	;# 
   363  070D                     	;# 
   364  070E                     	;# 
   365  070F                     	;# 
   366  0710                     	;# 
   367  0711                     	;# 
   368  0712                     	;# 
   369  0713                     	;# 
   370  0716                     	;# 
   371  0717                     	;# 
   372  0718                     	;# 
   373  0719                     	;# 
   374  071A                     	;# 
   375  071B                     	;# 
   376  071C                     	;# 
   377  071D                     	;# 
   378  0796                     	;# 
   379  0797                     	;# 
   380  0798                     	;# 
   381  0799                     	;# 
   382  079A                     	;# 
   383  079B                     	;# 
   384  080C                     	;# 
   385  080D                     	;# 
   386  080E                     	;# 
   387  080F                     	;# 
   388  0810                     	;# 
   389  0811                     	;# 
   390  0812                     	;# 
   391  0813                     	;# 
   392  0814                     	;# 
   393  081A                     	;# 
   394  081A                     	;# 
   395  081B                     	;# 
   396  081C                     	;# 
   397  081C                     	;# 
   398  081D                     	;# 
   399  081E                     	;# 
   400  081F                     	;# 
   401  088C                     	;# 
   402  088D                     	;# 
   403  088E                     	;# 
   404  088F                     	;# 
   405  0890                     	;# 
   406  0891                     	;# 
   407  0892                     	;# 
   408  0893                     	;# 
   409  0895                     	;# 
   410  0896                     	;# 
   411  090C                     	;# 
   412  090E                     	;# 
   413  090F                     	;# 
   414  091F                     	;# 
   415  098F                     	;# 
   416  098F                     	;# 
   417  0990                     	;# 
   418  0991                     	;# 
   419  0992                     	;# 
   420  0993                     	;# 
   421  0994                     	;# 
   422  0995                     	;# 
   423  0996                     	;# 
   424  0997                     	;# 
   425  0A19                     	;# 
   426  0A19                     	;# 
   427  0A1A                     	;# 
   428  0A1A                     	;# 
   429  0A1B                     	;# 
   430  0A1B                     	;# 
   431  0A1B                     	;# 
   432  0A1C                     	;# 
   433  0A1C                     	;# 
   434  0A1D                     	;# 
   435  0A1D                     	;# 
   436  0A1E                     	;# 
   437  0A1E                     	;# 
   438  0A1F                     	;# 
   439  0A1F                     	;# 
   440  0A1F                     	;# 
   441  1E0F                     	;# 
   442  1E10                     	;# 
   443  1E11                     	;# 
   444  1E12                     	;# 
   445  1E13                     	;# 
   446  1E14                     	;# 
   447  1E15                     	;# 
   448  1E16                     	;# 
   449  1E17                     	;# 
   450  1E18                     	;# 
   451  1E19                     	;# 
   452  1E1A                     	;# 
   453  1E1B                     	;# 
   454  1E1C                     	;# 
   455  1E1D                     	;# 
   456  1E1E                     	;# 
   457  1E1F                     	;# 
   458  1E20                     	;# 
   459  1E21                     	;# 
   460  1E22                     	;# 
   461  1E23                     	;# 
   462  1E24                     	;# 
   463  1E25                     	;# 
   464  1E26                     	;# 
   465  1E27                     	;# 
   466  1E28                     	;# 
   467  1E29                     	;# 
   468  1E2A                     	;# 
   469  1E2B                     	;# 
   470  1E2C                     	;# 
   471  1E2D                     	;# 
   472  1E2E                     	;# 
   473  1E2F                     	;# 
   474  1E30                     	;# 
   475  1E31                     	;# 
   476  1E32                     	;# 
   477  1E33                     	;# 
   478  1E34                     	;# 
   479  1E35                     	;# 
   480  1E36                     	;# 
   481  1E37                     	;# 
   482  1E8F                     	;# 
   483  1E90                     	;# 
   484  1E91                     	;# 
   485  1E92                     	;# 
   486  1E93                     	;# 
   487  1E9C                     	;# 
   488  1EA1                     	;# 
   489  1EA2                     	;# 
   490  1EB1                     	;# 
   491  1EBB                     	;# 
   492  1EBC                     	;# 
   493  1EBD                     	;# 
   494  1EBE                     	;# 
   495  1EC3                     	;# 
   496  1EC5                     	;# 
   497  1EC6                     	;# 
   498  1EC7                     	;# 
   499  1EC8                     	;# 
   500  1EC9                     	;# 
   501  1ECA                     	;# 
   502  1ECB                     	;# 
   503  1ECC                     	;# 
   504  1ECD                     	;# 
   505  1ECE                     	;# 
   506  1F10                     	;# 
   507  1F11                     	;# 
   508  1F12                     	;# 
   509  1F13                     	;# 
   510  1F14                     	;# 
   511  1F15                     	;# 
   512  1F16                     	;# 
   513  1F17                     	;# 
   514  1F18                     	;# 
   515  1F19                     	;# 
   516  1F1A                     	;# 
   517  1F1B                     	;# 
   518  1F1C                     	;# 
   519  1F1D                     	;# 
   520  1F1E                     	;# 
   521  1F1F                     	;# 
   522  1F20                     	;# 
   523  1F21                     	;# 
   524  1F22                     	;# 
   525  1F23                     	;# 
   526  1F24                     	;# 
   527  1F25                     	;# 
   528  1F26                     	;# 
   529  1F27                     	;# 
   530  1F38                     	;# 
   531  1F39                     	;# 
   532  1F3A                     	;# 
   533  1F3B                     	;# 
   534  1F3C                     	;# 
   535  1F3D                     	;# 
   536  1F3E                     	;# 
   537  1F3F                     	;# 
   538  1F43                     	;# 
   539  1F44                     	;# 
   540  1F45                     	;# 
   541  1F46                     	;# 
   542  1F47                     	;# 
   543  1F48                     	;# 
   544  1F49                     	;# 
   545  1F4A                     	;# 
   546  1F4E                     	;# 
   547  1F4F                     	;# 
   548  1F50                     	;# 
   549  1F51                     	;# 
   550  1F52                     	;# 
   551  1F53                     	;# 
   552  1F54                     	;# 
   553  1F55                     	;# 
   554  1F65                     	;# 
   555  1F68                     	;# 
   556  1F69                     	;# 
   557  1F6A                     	;# 
   558  1F6B                     	;# 
   559  1FE4                     	;# 
   560  1FE5                     	;# 
   561  1FE6                     	;# 
   562  1FE7                     	;# 
   563  1FE8                     	;# 
   564  1FE8                     	;# 
   565  1FE9                     	;# 
   566  1FEA                     	;# 
   567  1FEB                     	;# 
   568  1FED                     	;# 
   569  1FEE                     	;# 
   570  1FEF                     	;# 
   571  0000                     	;# 
   572  0001                     	;# 
   573  0002                     	;# 
   574  0003                     	;# 
   575  0004                     	;# 
   576  0005                     	;# 
   577  0006                     	;# 
   578  0007                     	;# 
   579  0008                     	;# 
   580  0009                     	;# 
   581  000A                     	;# 
   582  000B                     	;# 
   583  000C                     	;# 
   584  000D                     	;# 
   585  000E                     	;# 
   586  0010                     	;# 
   587  0012                     	;# 
   588  0013                     	;# 
   589  0014                     	;# 
   590  0016                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  009B                     	;# 
   595  009B                     	;# 
   596  009C                     	;# 
   597  009D                     	;# 
   598  009E                     	;# 
   599  009F                     	;# 
   600  0119                     	;# 
   601  0119                     	;# 
   602  0119                     	;# 
   603  011A                     	;# 
   604  011A                     	;# 
   605  011A                     	;# 
   606  011B                     	;# 
   607  011B                     	;# 
   608  011B                     	;# 
   609  011B                     	;# 
   610  011B                     	;# 
   611  011C                     	;# 
   612  011C                     	;# 
   613  011C                     	;# 
   614  011D                     	;# 
   615  011D                     	;# 
   616  011D                     	;# 
   617  011E                     	;# 
   618  011E                     	;# 
   619  011E                     	;# 
   620  011F                     	;# 
   621  011F                     	;# 
   622  011F                     	;# 
   623  011F                     	;# 
   624  011F                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  018E                     	;# 
   628  018F                     	;# 
   629  0190                     	;# 
   630  0191                     	;# 
   631  0192                     	;# 
   632  0196                     	;# 
   633  0197                     	;# 
   634  0198                     	;# 
   635  0199                     	;# 
   636  019A                     	;# 
   637  019B                     	;# 
   638  019C                     	;# 
   639  020C                     	;# 
   640  020C                     	;# 
   641  020D                     	;# 
   642  020E                     	;# 
   643  020F                     	;# 
   644  020F                     	;# 
   645  0210                     	;# 
   646  0210                     	;# 
   647  0211                     	;# 
   648  0211                     	;# 
   649  028C                     	;# 
   650  028C                     	;# 
   651  028D                     	;# 
   652  028D                     	;# 
   653  028E                     	;# 
   654  028F                     	;# 
   655  0290                     	;# 
   656  0291                     	;# 
   657  030C                     	;# 
   658  030C                     	;# 
   659  030D                     	;# 
   660  030E                     	;# 
   661  030F                     	;# 
   662  0310                     	;# 
   663  0310                     	;# 
   664  0311                     	;# 
   665  0312                     	;# 
   666  0313                     	;# 
   667  0314                     	;# 
   668  0314                     	;# 
   669  0315                     	;# 
   670  0316                     	;# 
   671  0318                     	;# 
   672  0318                     	;# 
   673  0319                     	;# 
   674  031A                     	;# 
   675  031C                     	;# 
   676  031C                     	;# 
   677  031D                     	;# 
   678  031E                     	;# 
   679  038C                     	;# 
   680  038C                     	;# 
   681  038D                     	;# 
   682  038E                     	;# 
   683  058C                     	;# 
   684  058C                     	;# 
   685  058D                     	;# 
   686  058E                     	;# 
   687  058F                     	;# 
   688  058F                     	;# 
   689  0590                     	;# 
   690  0591                     	;# 
   691  0592                     	;# 
   692  0593                     	;# 
   693  059C                     	;# 
   694  059C                     	;# 
   695  059D                     	;# 
   696  059D                     	;# 
   697  059E                     	;# 
   698  059F                     	;# 
   699  060C                     	;# 
   700  060D                     	;# 
   701  060E                     	;# 
   702  060F                     	;# 
   703  0610                     	;# 
   704  0611                     	;# 
   705  0612                     	;# 
   706  0613                     	;# 
   707  0614                     	;# 
   708  070C                     	;# 
   709  070D                     	;# 
   710  070E                     	;# 
   711  070F                     	;# 
   712  0710                     	;# 
   713  0711                     	;# 
   714  0712                     	;# 
   715  0713                     	;# 
   716  0716                     	;# 
   717  0717                     	;# 
   718  0718                     	;# 
   719  0719                     	;# 
   720  071A                     	;# 
   721  071B                     	;# 
   722  071C                     	;# 
   723  071D                     	;# 
   724  0796                     	;# 
   725  0797                     	;# 
   726  0798                     	;# 
   727  0799                     	;# 
   728  079A                     	;# 
   729  079B                     	;# 
   730  080C                     	;# 
   731  080D                     	;# 
   732  080E                     	;# 
   733  080F                     	;# 
   734  0810                     	;# 
   735  0811                     	;# 
   736  0812                     	;# 
   737  0813                     	;# 
   738  0814                     	;# 
   739  081A                     	;# 
   740  081A                     	;# 
   741  081B                     	;# 
   742  081C                     	;# 
   743  081C                     	;# 
   744  081D                     	;# 
   745  081E                     	;# 
   746  081F                     	;# 
   747  088C                     	;# 
   748  088D                     	;# 
   749  088E                     	;# 
   750  088F                     	;# 
   751  0890                     	;# 
   752  0891                     	;# 
   753  0892                     	;# 
   754  0893                     	;# 
   755  0895                     	;# 
   756  0896                     	;# 
   757  090C                     	;# 
   758  090E                     	;# 
   759  090F                     	;# 
   760  091F                     	;# 
   761  098F                     	;# 
   762  098F                     	;# 
   763  0990                     	;# 
   764  0991                     	;# 
   765  0992                     	;# 
   766  0993                     	;# 
   767  0994                     	;# 
   768  0995                     	;# 
   769  0996                     	;# 
   770  0997                     	;# 
   771  0A19                     	;# 
   772  0A19                     	;# 
   773  0A1A                     	;# 
   774  0A1A                     	;# 
   775  0A1B                     	;# 
   776  0A1B                     	;# 
   777  0A1B                     	;# 
   778  0A1C                     	;# 
   779  0A1C                     	;# 
   780  0A1D                     	;# 
   781  0A1D                     	;# 
   782  0A1E                     	;# 
   783  0A1E                     	;# 
   784  0A1F                     	;# 
   785  0A1F                     	;# 
   786  0A1F                     	;# 
   787  1E0F                     	;# 
   788  1E10                     	;# 
   789  1E11                     	;# 
   790  1E12                     	;# 
   791  1E13                     	;# 
   792  1E14                     	;# 
   793  1E15                     	;# 
   794  1E16                     	;# 
   795  1E17                     	;# 
   796  1E18                     	;# 
   797  1E19                     	;# 
   798  1E1A                     	;# 
   799  1E1B                     	;# 
   800  1E1C                     	;# 
   801  1E1D                     	;# 
   802  1E1E                     	;# 
   803  1E1F                     	;# 
   804  1E20                     	;# 
   805  1E21                     	;# 
   806  1E22                     	;# 
   807  1E23                     	;# 
   808  1E24                     	;# 
   809  1E25                     	;# 
   810  1E26                     	;# 
   811  1E27                     	;# 
   812  1E28                     	;# 
   813  1E29                     	;# 
   814  1E2A                     	;# 
   815  1E2B                     	;# 
   816  1E2C                     	;# 
   817  1E2D                     	;# 
   818  1E2E                     	;# 
   819  1E2F                     	;# 
   820  1E30                     	;# 
   821  1E31                     	;# 
   822  1E32                     	;# 
   823  1E33                     	;# 
   824  1E34                     	;# 
   825  1E35                     	;# 
   826  1E36                     	;# 
   827  1E37                     	;# 
   828  1E8F                     	;# 
   829  1E90                     	;# 
   830  1E91                     	;# 
   831  1E92                     	;# 
   832  1E93                     	;# 
   833  1E9C                     	;# 
   834  1EA1                     	;# 
   835  1EA2                     	;# 
   836  1EB1                     	;# 
   837  1EBB                     	;# 
   838  1EBC                     	;# 
   839  1EBD                     	;# 
   840  1EBE                     	;# 
   841  1EC3                     	;# 
   842  1EC5                     	;# 
   843  1EC6                     	;# 
   844  1EC7                     	;# 
   845  1EC8                     	;# 
   846  1EC9                     	;# 
   847  1ECA                     	;# 
   848  1ECB                     	;# 
   849  1ECC                     	;# 
   850  1ECD                     	;# 
   851  1ECE                     	;# 
   852  1F10                     	;# 
   853  1F11                     	;# 
   854  1F12                     	;# 
   855  1F13                     	;# 
   856  1F14                     	;# 
   857  1F15                     	;# 
   858  1F16                     	;# 
   859  1F17                     	;# 
   860  1F18                     	;# 
   861  1F19                     	;# 
   862  1F1A                     	;# 
   863  1F1B                     	;# 
   864  1F1C                     	;# 
   865  1F1D                     	;# 
   866  1F1E                     	;# 
   867  1F1F                     	;# 
   868  1F20                     	;# 
   869  1F21                     	;# 
   870  1F22                     	;# 
   871  1F23                     	;# 
   872  1F24                     	;# 
   873  1F25                     	;# 
   874  1F26                     	;# 
   875  1F27                     	;# 
   876  1F38                     	;# 
   877  1F39                     	;# 
   878  1F3A                     	;# 
   879  1F3B                     	;# 
   880  1F3C                     	;# 
   881  1F3D                     	;# 
   882  1F3E                     	;# 
   883  1F3F                     	;# 
   884  1F43                     	;# 
   885  1F44                     	;# 
   886  1F45                     	;# 
   887  1F46                     	;# 
   888  1F47                     	;# 
   889  1F48                     	;# 
   890  1F49                     	;# 
   891  1F4A                     	;# 
   892  1F4E                     	;# 
   893  1F4F                     	;# 
   894  1F50                     	;# 
   895  1F51                     	;# 
   896  1F52                     	;# 
   897  1F53                     	;# 
   898  1F54                     	;# 
   899  1F55                     	;# 
   900  1F65                     	;# 
   901  1F68                     	;# 
   902  1F69                     	;# 
   903  1F6A                     	;# 
   904  1F6B                     	;# 
   905  1FE4                     	;# 
   906  1FE5                     	;# 
   907  1FE6                     	;# 
   908  1FE7                     	;# 
   909  1FE8                     	;# 
   910  1FE8                     	;# 
   911  1FE9                     	;# 
   912  1FEA                     	;# 
   913  1FEB                     	;# 
   914  1FED                     	;# 
   915  1FEE                     	;# 
   916  1FEF                     	;# 
   917  0000                     	;# 
   918  0001                     	;# 
   919  0002                     	;# 
   920  0003                     	;# 
   921  0004                     	;# 
   922  0005                     	;# 
   923  0006                     	;# 
   924  0007                     	;# 
   925  0008                     	;# 
   926  0009                     	;# 
   927  000A                     	;# 
   928  000B                     	;# 
   929  000C                     	;# 
   930  000D                     	;# 
   931  000E                     	;# 
   932  0010                     	;# 
   933  0012                     	;# 
   934  0013                     	;# 
   935  0014                     	;# 
   936  0016                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  009B                     	;# 
   941  009B                     	;# 
   942  009C                     	;# 
   943  009D                     	;# 
   944  009E                     	;# 
   945  009F                     	;# 
   946  0119                     	;# 
   947  0119                     	;# 
   948  0119                     	;# 
   949  011A                     	;# 
   950  011A                     	;# 
   951  011A                     	;# 
   952  011B                     	;# 
   953  011B                     	;# 
   954  011B                     	;# 
   955  011B                     	;# 
   956  011B                     	;# 
   957  011C                     	;# 
   958  011C                     	;# 
   959  011C                     	;# 
   960  011D                     	;# 
   961  011D                     	;# 
   962  011D                     	;# 
   963  011E                     	;# 
   964  011E                     	;# 
   965  011E                     	;# 
   966  011F                     	;# 
   967  011F                     	;# 
   968  011F                     	;# 
   969  011F                     	;# 
   970  011F                     	;# 
   971  018C                     	;# 
   972  018D                     	;# 
   973  018E                     	;# 
   974  018F                     	;# 
   975  0190                     	;# 
   976  0191                     	;# 
   977  0192                     	;# 
   978  0196                     	;# 
   979  0197                     	;# 
   980  0198                     	;# 
   981  0199                     	;# 
   982  019A                     	;# 
   983  019B                     	;# 
   984  019C                     	;# 
   985  020C                     	;# 
   986  020C                     	;# 
   987  020D                     	;# 
   988  020E                     	;# 
   989  020F                     	;# 
   990  020F                     	;# 
   991  0210                     	;# 
   992  0210                     	;# 
   993  0211                     	;# 
   994  0211                     	;# 
   995  028C                     	;# 
   996  028C                     	;# 
   997  028D                     	;# 
   998  028D                     	;# 
   999  028E                     	;# 
  1000  028F                     	;# 
  1001  0290                     	;# 
  1002  0291                     	;# 
  1003  030C                     	;# 
  1004  030C                     	;# 
  1005  030D                     	;# 
  1006  030E                     	;# 
  1007  030F                     	;# 
  1008  0310                     	;# 
  1009  0310                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0314                     	;# 
  1014  0314                     	;# 
  1015  0315                     	;# 
  1016  0316                     	;# 
  1017  0318                     	;# 
  1018  0318                     	;# 
  1019  0319                     	;# 
  1020  031A                     	;# 
  1021  031C                     	;# 
  1022  031C                     	;# 
  1023  031D                     	;# 
  1024  031E                     	;# 
  1025  038C                     	;# 
  1026  038C                     	;# 
  1027  038D                     	;# 
  1028  038E                     	;# 
  1029  058C                     	;# 
  1030  058C                     	;# 
  1031  058D                     	;# 
  1032  058E                     	;# 
  1033  058F                     	;# 
  1034  058F                     	;# 
  1035  0590                     	;# 
  1036  0591                     	;# 
  1037  0592                     	;# 
  1038  0593                     	;# 
  1039  059C                     	;# 
  1040  059C                     	;# 
  1041  059D                     	;# 
  1042  059D                     	;# 
  1043  059E                     	;# 
  1044  059F                     	;# 
  1045  060C                     	;# 
  1046  060D                     	;# 
  1047  060E                     	;# 
  1048  060F                     	;# 
  1049  0610                     	;# 
  1050  0611                     	;# 
  1051  0612                     	;# 
  1052  0613                     	;# 
  1053  0614                     	;# 
  1054  070C                     	;# 
  1055  070D                     	;# 
  1056  070E                     	;# 
  1057  070F                     	;# 
  1058  0710                     	;# 
  1059  0711                     	;# 
  1060  0712                     	;# 
  1061  0713                     	;# 
  1062  0716                     	;# 
  1063  0717                     	;# 
  1064  0718                     	;# 
  1065  0719                     	;# 
  1066  071A                     	;# 
  1067  071B                     	;# 
  1068  071C                     	;# 
  1069  071D                     	;# 
  1070  0796                     	;# 
  1071  0797                     	;# 
  1072  0798                     	;# 
  1073  0799                     	;# 
  1074  079A                     	;# 
  1075  079B                     	;# 
  1076  080C                     	;# 
  1077  080D                     	;# 
  1078  080E                     	;# 
  1079  080F                     	;# 
  1080  0810                     	;# 
  1081  0811                     	;# 
  1082  0812                     	;# 
  1083  0813                     	;# 
  1084  0814                     	;# 
  1085  081A                     	;# 
  1086  081A                     	;# 
  1087  081B                     	;# 
  1088  081C                     	;# 
  1089  081C                     	;# 
  1090  081D                     	;# 
  1091  081E                     	;# 
  1092  081F                     	;# 
  1093  088C                     	;# 
  1094  088D                     	;# 
  1095  088E                     	;# 
  1096  088F                     	;# 
  1097  0890                     	;# 
  1098  0891                     	;# 
  1099  0892                     	;# 
  1100  0893                     	;# 
  1101  0895                     	;# 
  1102  0896                     	;# 
  1103  090C                     	;# 
  1104  090E                     	;# 
  1105  090F                     	;# 
  1106  091F                     	;# 
  1107  098F                     	;# 
  1108  098F                     	;# 
  1109  0990                     	;# 
  1110  0991                     	;# 
  1111  0992                     	;# 
  1112  0993                     	;# 
  1113  0994                     	;# 
  1114  0995                     	;# 
  1115  0996                     	;# 
  1116  0997                     	;# 
  1117  0A19                     	;# 
  1118  0A19                     	;# 
  1119  0A1A                     	;# 
  1120  0A1A                     	;# 
  1121  0A1B                     	;# 
  1122  0A1B                     	;# 
  1123  0A1B                     	;# 
  1124  0A1C                     	;# 
  1125  0A1C                     	;# 
  1126  0A1D                     	;# 
  1127  0A1D                     	;# 
  1128  0A1E                     	;# 
  1129  0A1E                     	;# 
  1130  0A1F                     	;# 
  1131  0A1F                     	;# 
  1132  0A1F                     	;# 
  1133  1E0F                     	;# 
  1134  1E10                     	;# 
  1135  1E11                     	;# 
  1136  1E12                     	;# 
  1137  1E13                     	;# 
  1138  1E14                     	;# 
  1139  1E15                     	;# 
  1140  1E16                     	;# 
  1141  1E17                     	;# 
  1142  1E18                     	;# 
  1143  1E19                     	;# 
  1144  1E1A                     	;# 
  1145  1E1B                     	;# 
  1146  1E1C                     	;# 
  1147  1E1D                     	;# 
  1148  1E1E                     	;# 
  1149  1E1F                     	;# 
  1150  1E20                     	;# 
  1151  1E21                     	;# 
  1152  1E22                     	;# 
  1153  1E23                     	;# 
  1154  1E24                     	;# 
  1155  1E25                     	;# 
  1156  1E26                     	;# 
  1157  1E27                     	;# 
  1158  1E28                     	;# 
  1159  1E29                     	;# 
  1160  1E2A                     	;# 
  1161  1E2B                     	;# 
  1162  1E2C                     	;# 
  1163  1E2D                     	;# 
  1164  1E2E                     	;# 
  1165  1E2F                     	;# 
  1166  1E30                     	;# 
  1167  1E31                     	;# 
  1168  1E32                     	;# 
  1169  1E33                     	;# 
  1170  1E34                     	;# 
  1171  1E35                     	;# 
  1172  1E36                     	;# 
  1173  1E37                     	;# 
  1174  1E8F                     	;# 
  1175  1E90                     	;# 
  1176  1E91                     	;# 
  1177  1E92                     	;# 
  1178  1E93                     	;# 
  1179  1E9C                     	;# 
  1180  1EA1                     	;# 
  1181  1EA2                     	;# 
  1182  1EB1                     	;# 
  1183  1EBB                     	;# 
  1184  1EBC                     	;# 
  1185  1EBD                     	;# 
  1186  1EBE                     	;# 
  1187  1EC3                     	;# 
  1188  1EC5                     	;# 
  1189  1EC6                     	;# 
  1190  1EC7                     	;# 
  1191  1EC8                     	;# 
  1192  1EC9                     	;# 
  1193  1ECA                     	;# 
  1194  1ECB                     	;# 
  1195  1ECC                     	;# 
  1196  1ECD                     	;# 
  1197  1ECE                     	;# 
  1198  1F10                     	;# 
  1199  1F11                     	;# 
  1200  1F12                     	;# 
  1201  1F13                     	;# 
  1202  1F14                     	;# 
  1203  1F15                     	;# 
  1204  1F16                     	;# 
  1205  1F17                     	;# 
  1206  1F18                     	;# 
  1207  1F19                     	;# 
  1208  1F1A                     	;# 
  1209  1F1B                     	;# 
  1210  1F1C                     	;# 
  1211  1F1D                     	;# 
  1212  1F1E                     	;# 
  1213  1F1F                     	;# 
  1214  1F20                     	;# 
  1215  1F21                     	;# 
  1216  1F22                     	;# 
  1217  1F23                     	;# 
  1218  1F24                     	;# 
  1219  1F25                     	;# 
  1220  1F26                     	;# 
  1221  1F27                     	;# 
  1222  1F38                     	;# 
  1223  1F39                     	;# 
  1224  1F3A                     	;# 
  1225  1F3B                     	;# 
  1226  1F3C                     	;# 
  1227  1F3D                     	;# 
  1228  1F3E                     	;# 
  1229  1F3F                     	;# 
  1230  1F43                     	;# 
  1231  1F44                     	;# 
  1232  1F45                     	;# 
  1233  1F46                     	;# 
  1234  1F47                     	;# 
  1235  1F48                     	;# 
  1236  1F49                     	;# 
  1237  1F4A                     	;# 
  1238  1F4E                     	;# 
  1239  1F4F                     	;# 
  1240  1F50                     	;# 
  1241  1F51                     	;# 
  1242  1F52                     	;# 
  1243  1F53                     	;# 
  1244  1F54                     	;# 
  1245  1F55                     	;# 
  1246  1F65                     	;# 
  1247  1F68                     	;# 
  1248  1F69                     	;# 
  1249  1F6A                     	;# 
  1250  1F6B                     	;# 
  1251  1FE4                     	;# 
  1252  1FE5                     	;# 
  1253  1FE6                     	;# 
  1254  1FE7                     	;# 
  1255  1FE8                     	;# 
  1256  1FE8                     	;# 
  1257  1FE9                     	;# 
  1258  1FEA                     	;# 
  1259  1FEB                     	;# 
  1260  1FED                     	;# 
  1261  1FEE                     	;# 
  1262  1FEF                     	;# 
  1263  0000                     	;# 
  1264  0001                     	;# 
  1265  0002                     	;# 
  1266  0003                     	;# 
  1267  0004                     	;# 
  1268  0005                     	;# 
  1269  0006                     	;# 
  1270  0007                     	;# 
  1271  0008                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  0010                     	;# 
  1279  0012                     	;# 
  1280  0013                     	;# 
  1281  0014                     	;# 
  1282  0016                     	;# 
  1283  0018                     	;# 
  1284  0019                     	;# 
  1285  001A                     	;# 
  1286  009B                     	;# 
  1287  009B                     	;# 
  1288  009C                     	;# 
  1289  009D                     	;# 
  1290  009E                     	;# 
  1291  009F                     	;# 
  1292  0119                     	;# 
  1293  0119                     	;# 
  1294  0119                     	;# 
  1295  011A                     	;# 
  1296  011A                     	;# 
  1297  011A                     	;# 
  1298  011B                     	;# 
  1299  011B                     	;# 
  1300  011B                     	;# 
  1301  011B                     	;# 
  1302  011B                     	;# 
  1303  011C                     	;# 
  1304  011C                     	;# 
  1305  011C                     	;# 
  1306  011D                     	;# 
  1307  011D                     	;# 
  1308  011D                     	;# 
  1309  011E                     	;# 
  1310  011E                     	;# 
  1311  011E                     	;# 
  1312  011F                     	;# 
  1313  011F                     	;# 
  1314  011F                     	;# 
  1315  011F                     	;# 
  1316  011F                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  018F                     	;# 
  1321  0190                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0198                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019C                     	;# 
  1331  020C                     	;# 
  1332  020C                     	;# 
  1333  020D                     	;# 
  1334  020E                     	;# 
  1335  020F                     	;# 
  1336  020F                     	;# 
  1337  0210                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  028C                     	;# 
  1342  028C                     	;# 
  1343  028D                     	;# 
  1344  028D                     	;# 
  1345  028E                     	;# 
  1346  028F                     	;# 
  1347  0290                     	;# 
  1348  0291                     	;# 
  1349  030C                     	;# 
  1350  030C                     	;# 
  1351  030D                     	;# 
  1352  030E                     	;# 
  1353  030F                     	;# 
  1354  0310                     	;# 
  1355  0310                     	;# 
  1356  0311                     	;# 
  1357  0312                     	;# 
  1358  0313                     	;# 
  1359  0314                     	;# 
  1360  0314                     	;# 
  1361  0315                     	;# 
  1362  0316                     	;# 
  1363  0318                     	;# 
  1364  0318                     	;# 
  1365  0319                     	;# 
  1366  031A                     	;# 
  1367  031C                     	;# 
  1368  031C                     	;# 
  1369  031D                     	;# 
  1370  031E                     	;# 
  1371  038C                     	;# 
  1372  038C                     	;# 
  1373  038D                     	;# 
  1374  038E                     	;# 
  1375  058C                     	;# 
  1376  058C                     	;# 
  1377  058D                     	;# 
  1378  058E                     	;# 
  1379  058F                     	;# 
  1380  058F                     	;# 
  1381  0590                     	;# 
  1382  0591                     	;# 
  1383  0592                     	;# 
  1384  0593                     	;# 
  1385  059C                     	;# 
  1386  059C                     	;# 
  1387  059D                     	;# 
  1388  059D                     	;# 
  1389  059E                     	;# 
  1390  059F                     	;# 
  1391  060C                     	;# 
  1392  060D                     	;# 
  1393  060E                     	;# 
  1394  060F                     	;# 
  1395  0610                     	;# 
  1396  0611                     	;# 
  1397  0612                     	;# 
  1398  0613                     	;# 
  1399  0614                     	;# 
  1400  070C                     	;# 
  1401  070D                     	;# 
  1402  070E                     	;# 
  1403  070F                     	;# 
  1404  0710                     	;# 
  1405  0711                     	;# 
  1406  0712                     	;# 
  1407  0713                     	;# 
  1408  0716                     	;# 
  1409  0717                     	;# 
  1410  0718                     	;# 
  1411  0719                     	;# 
  1412  071A                     	;# 
  1413  071B                     	;# 
  1414  071C                     	;# 
  1415  071D                     	;# 
  1416  0796                     	;# 
  1417  0797                     	;# 
  1418  0798                     	;# 
  1419  0799                     	;# 
  1420  079A                     	;# 
  1421  079B                     	;# 
  1422  080C                     	;# 
  1423  080D                     	;# 
  1424  080E                     	;# 
  1425  080F                     	;# 
  1426  0810                     	;# 
  1427  0811                     	;# 
  1428  0812                     	;# 
  1429  0813                     	;# 
  1430  0814                     	;# 
  1431  081A                     	;# 
  1432  081A                     	;# 
  1433  081B                     	;# 
  1434  081C                     	;# 
  1435  081C                     	;# 
  1436  081D                     	;# 
  1437  081E                     	;# 
  1438  081F                     	;# 
  1439  088C                     	;# 
  1440  088D                     	;# 
  1441  088E                     	;# 
  1442  088F                     	;# 
  1443  0890                     	;# 
  1444  0891                     	;# 
  1445  0892                     	;# 
  1446  0893                     	;# 
  1447  0895                     	;# 
  1448  0896                     	;# 
  1449  090C                     	;# 
  1450  090E                     	;# 
  1451  090F                     	;# 
  1452  091F                     	;# 
  1453  098F                     	;# 
  1454  098F                     	;# 
  1455  0990                     	;# 
  1456  0991                     	;# 
  1457  0992                     	;# 
  1458  0993                     	;# 
  1459  0994                     	;# 
  1460  0995                     	;# 
  1461  0996                     	;# 
  1462  0997                     	;# 
  1463  0A19                     	;# 
  1464  0A19                     	;# 
  1465  0A1A                     	;# 
  1466  0A1A                     	;# 
  1467  0A1B                     	;# 
  1468  0A1B                     	;# 
  1469  0A1B                     	;# 
  1470  0A1C                     	;# 
  1471  0A1C                     	;# 
  1472  0A1D                     	;# 
  1473  0A1D                     	;# 
  1474  0A1E                     	;# 
  1475  0A1E                     	;# 
  1476  0A1F                     	;# 
  1477  0A1F                     	;# 
  1478  0A1F                     	;# 
  1479  1E0F                     	;# 
  1480  1E10                     	;# 
  1481  1E11                     	;# 
  1482  1E12                     	;# 
  1483  1E13                     	;# 
  1484  1E14                     	;# 
  1485  1E15                     	;# 
  1486  1E16                     	;# 
  1487  1E17                     	;# 
  1488  1E18                     	;# 
  1489  1E19                     	;# 
  1490  1E1A                     	;# 
  1491  1E1B                     	;# 
  1492  1E1C                     	;# 
  1493  1E1D                     	;# 
  1494  1E1E                     	;# 
  1495  1E1F                     	;# 
  1496  1E20                     	;# 
  1497  1E21                     	;# 
  1498  1E22                     	;# 
  1499  1E23                     	;# 
  1500  1E24                     	;# 
  1501  1E25                     	;# 
  1502  1E26                     	;# 
  1503  1E27                     	;# 
  1504  1E28                     	;# 
  1505  1E29                     	;# 
  1506  1E2A                     	;# 
  1507  1E2B                     	;# 
  1508  1E2C                     	;# 
  1509  1E2D                     	;# 
  1510  1E2E                     	;# 
  1511  1E2F                     	;# 
  1512  1E30                     	;# 
  1513  1E31                     	;# 
  1514  1E32                     	;# 
  1515  1E33                     	;# 
  1516  1E34                     	;# 
  1517  1E35                     	;# 
  1518  1E36                     	;# 
  1519  1E37                     	;# 
  1520  1E8F                     	;# 
  1521  1E90                     	;# 
  1522  1E91                     	;# 
  1523  1E92                     	;# 
  1524  1E93                     	;# 
  1525  1E9C                     	;# 
  1526  1EA1                     	;# 
  1527  1EA2                     	;# 
  1528  1EB1                     	;# 
  1529  1EBB                     	;# 
  1530  1EBC                     	;# 
  1531  1EBD                     	;# 
  1532  1EBE                     	;# 
  1533  1EC3                     	;# 
  1534  1EC5                     	;# 
  1535  1EC6                     	;# 
  1536  1EC7                     	;# 
  1537  1EC8                     	;# 
  1538  1EC9                     	;# 
  1539  1ECA                     	;# 
  1540  1ECB                     	;# 
  1541  1ECC                     	;# 
  1542  1ECD                     	;# 
  1543  1ECE                     	;# 
  1544  1F10                     	;# 
  1545  1F11                     	;# 
  1546  1F12                     	;# 
  1547  1F13                     	;# 
  1548  1F14                     	;# 
  1549  1F15                     	;# 
  1550  1F16                     	;# 
  1551  1F17                     	;# 
  1552  1F18                     	;# 
  1553  1F19                     	;# 
  1554  1F1A                     	;# 
  1555  1F1B                     	;# 
  1556  1F1C                     	;# 
  1557  1F1D                     	;# 
  1558  1F1E                     	;# 
  1559  1F1F                     	;# 
  1560  1F20                     	;# 
  1561  1F21                     	;# 
  1562  1F22                     	;# 
  1563  1F23                     	;# 
  1564  1F24                     	;# 
  1565  1F25                     	;# 
  1566  1F26                     	;# 
  1567  1F27                     	;# 
  1568  1F38                     	;# 
  1569  1F39                     	;# 
  1570  1F3A                     	;# 
  1571  1F3B                     	;# 
  1572  1F3C                     	;# 
  1573  1F3D                     	;# 
  1574  1F3E                     	;# 
  1575  1F3F                     	;# 
  1576  1F43                     	;# 
  1577  1F44                     	;# 
  1578  1F45                     	;# 
  1579  1F46                     	;# 
  1580  1F47                     	;# 
  1581  1F48                     	;# 
  1582  1F49                     	;# 
  1583  1F4A                     	;# 
  1584  1F4E                     	;# 
  1585  1F4F                     	;# 
  1586  1F50                     	;# 
  1587  1F51                     	;# 
  1588  1F52                     	;# 
  1589  1F53                     	;# 
  1590  1F54                     	;# 
  1591  1F55                     	;# 
  1592  1F65                     	;# 
  1593  1F68                     	;# 
  1594  1F69                     	;# 
  1595  1F6A                     	;# 
  1596  1F6B                     	;# 
  1597  1FE4                     	;# 
  1598  1FE5                     	;# 
  1599  1FE6                     	;# 
  1600  1FE7                     	;# 
  1601  1FE8                     	;# 
  1602  1FE8                     	;# 
  1603  1FE9                     	;# 
  1604  1FEA                     	;# 
  1605  1FEB                     	;# 
  1606  1FED                     	;# 
  1607  1FEE                     	;# 
  1608  1FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0012                     	;# 
  1626  0013                     	;# 
  1627  0014                     	;# 
  1628  0016                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  009B                     	;# 
  1633  009B                     	;# 
  1634  009C                     	;# 
  1635  009D                     	;# 
  1636  009E                     	;# 
  1637  009F                     	;# 
  1638  0119                     	;# 
  1639  0119                     	;# 
  1640  0119                     	;# 
  1641  011A                     	;# 
  1642  011A                     	;# 
  1643  011A                     	;# 
  1644  011B                     	;# 
  1645  011B                     	;# 
  1646  011B                     	;# 
  1647  011B                     	;# 
  1648  011B                     	;# 
  1649  011C                     	;# 
  1650  011C                     	;# 
  1651  011C                     	;# 
  1652  011D                     	;# 
  1653  011D                     	;# 
  1654  011D                     	;# 
  1655  011E                     	;# 
  1656  011E                     	;# 
  1657  011E                     	;# 
  1658  011F                     	;# 
  1659  011F                     	;# 
  1660  011F                     	;# 
  1661  011F                     	;# 
  1662  011F                     	;# 
  1663  018C                     	;# 
  1664  018D                     	;# 
  1665  018E                     	;# 
  1666  018F                     	;# 
  1667  0190                     	;# 
  1668  0191                     	;# 
  1669  0192                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0198                     	;# 
  1673  0199                     	;# 
  1674  019A                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  020C                     	;# 
  1678  020C                     	;# 
  1679  020D                     	;# 
  1680  020E                     	;# 
  1681  020F                     	;# 
  1682  020F                     	;# 
  1683  0210                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  028C                     	;# 
  1688  028C                     	;# 
  1689  028D                     	;# 
  1690  028D                     	;# 
  1691  028E                     	;# 
  1692  028F                     	;# 
  1693  0290                     	;# 
  1694  0291                     	;# 
  1695  030C                     	;# 
  1696  030C                     	;# 
  1697  030D                     	;# 
  1698  030E                     	;# 
  1699  030F                     	;# 
  1700  0310                     	;# 
  1701  0310                     	;# 
  1702  0311                     	;# 
  1703  0312                     	;# 
  1704  0313                     	;# 
  1705  0314                     	;# 
  1706  0314                     	;# 
  1707  0315                     	;# 
  1708  0316                     	;# 
  1709  0318                     	;# 
  1710  0318                     	;# 
  1711  0319                     	;# 
  1712  031A                     	;# 
  1713  031C                     	;# 
  1714  031C                     	;# 
  1715  031D                     	;# 
  1716  031E                     	;# 
  1717  038C                     	;# 
  1718  038C                     	;# 
  1719  038D                     	;# 
  1720  038E                     	;# 
  1721  058C                     	;# 
  1722  058C                     	;# 
  1723  058D                     	;# 
  1724  058E                     	;# 
  1725  058F                     	;# 
  1726  058F                     	;# 
  1727  0590                     	;# 
  1728  0591                     	;# 
  1729  0592                     	;# 
  1730  0593                     	;# 
  1731  059C                     	;# 
  1732  059C                     	;# 
  1733  059D                     	;# 
  1734  059D                     	;# 
  1735  059E                     	;# 
  1736  059F                     	;# 
  1737  060C                     	;# 
  1738  060D                     	;# 
  1739  060E                     	;# 
  1740  060F                     	;# 
  1741  0610                     	;# 
  1742  0611                     	;# 
  1743  0612                     	;# 
  1744  0613                     	;# 
  1745  0614                     	;# 
  1746  070C                     	;# 
  1747  070D                     	;# 
  1748  070E                     	;# 
  1749  070F                     	;# 
  1750  0710                     	;# 
  1751  0711                     	;# 
  1752  0712                     	;# 
  1753  0713                     	;# 
  1754  0716                     	;# 
  1755  0717                     	;# 
  1756  0718                     	;# 
  1757  0719                     	;# 
  1758  071A                     	;# 
  1759  071B                     	;# 
  1760  071C                     	;# 
  1761  071D                     	;# 
  1762  0796                     	;# 
  1763  0797                     	;# 
  1764  0798                     	;# 
  1765  0799                     	;# 
  1766  079A                     	;# 
  1767  079B                     	;# 
  1768  080C                     	;# 
  1769  080D                     	;# 
  1770  080E                     	;# 
  1771  080F                     	;# 
  1772  0810                     	;# 
  1773  0811                     	;# 
  1774  0812                     	;# 
  1775  0813                     	;# 
  1776  0814                     	;# 
  1777  081A                     	;# 
  1778  081A                     	;# 
  1779  081B                     	;# 
  1780  081C                     	;# 
  1781  081C                     	;# 
  1782  081D                     	;# 
  1783  081E                     	;# 
  1784  081F                     	;# 
  1785  088C                     	;# 
  1786  088D                     	;# 
  1787  088E                     	;# 
  1788  088F                     	;# 
  1789  0890                     	;# 
  1790  0891                     	;# 
  1791  0892                     	;# 
  1792  0893                     	;# 
  1793  0895                     	;# 
  1794  0896                     	;# 
  1795  090C                     	;# 
  1796  090E                     	;# 
  1797  090F                     	;# 
  1798  091F                     	;# 
  1799  098F                     	;# 
  1800  098F                     	;# 
  1801  0990                     	;# 
  1802  0991                     	;# 
  1803  0992                     	;# 
  1804  0993                     	;# 
  1805  0994                     	;# 
  1806  0995                     	;# 
  1807  0996                     	;# 
  1808  0997                     	;# 
  1809  0A19                     	;# 
  1810  0A19                     	;# 
  1811  0A1A                     	;# 
  1812  0A1A                     	;# 
  1813  0A1B                     	;# 
  1814  0A1B                     	;# 
  1815  0A1B                     	;# 
  1816  0A1C                     	;# 
  1817  0A1C                     	;# 
  1818  0A1D                     	;# 
  1819  0A1D                     	;# 
  1820  0A1E                     	;# 
  1821  0A1E                     	;# 
  1822  0A1F                     	;# 
  1823  0A1F                     	;# 
  1824  0A1F                     	;# 
  1825  1E0F                     	;# 
  1826  1E10                     	;# 
  1827  1E11                     	;# 
  1828  1E12                     	;# 
  1829  1E13                     	;# 
  1830  1E14                     	;# 
  1831  1E15                     	;# 
  1832  1E16                     	;# 
  1833  1E17                     	;# 
  1834  1E18                     	;# 
  1835  1E19                     	;# 
  1836  1E1A                     	;# 
  1837  1E1B                     	;# 
  1838  1E1C                     	;# 
  1839  1E1D                     	;# 
  1840  1E1E                     	;# 
  1841  1E1F                     	;# 
  1842  1E20                     	;# 
  1843  1E21                     	;# 
  1844  1E22                     	;# 
  1845  1E23                     	;# 
  1846  1E24                     	;# 
  1847  1E25                     	;# 
  1848  1E26                     	;# 
  1849  1E27                     	;# 
  1850  1E28                     	;# 
  1851  1E29                     	;# 
  1852  1E2A                     	;# 
  1853  1E2B                     	;# 
  1854  1E2C                     	;# 
  1855  1E2D                     	;# 
  1856  1E2E                     	;# 
  1857  1E2F                     	;# 
  1858  1E30                     	;# 
  1859  1E31                     	;# 
  1860  1E32                     	;# 
  1861  1E33                     	;# 
  1862  1E34                     	;# 
  1863  1E35                     	;# 
  1864  1E36                     	;# 
  1865  1E37                     	;# 
  1866  1E8F                     	;# 
  1867  1E90                     	;# 
  1868  1E91                     	;# 
  1869  1E92                     	;# 
  1870  1E93                     	;# 
  1871  1E9C                     	;# 
  1872  1EA1                     	;# 
  1873  1EA2                     	;# 
  1874  1EB1                     	;# 
  1875  1EBB                     	;# 
  1876  1EBC                     	;# 
  1877  1EBD                     	;# 
  1878  1EBE                     	;# 
  1879  1EC3                     	;# 
  1880  1EC5                     	;# 
  1881  1EC6                     	;# 
  1882  1EC7                     	;# 
  1883  1EC8                     	;# 
  1884  1EC9                     	;# 
  1885  1ECA                     	;# 
  1886  1ECB                     	;# 
  1887  1ECC                     	;# 
  1888  1ECD                     	;# 
  1889  1ECE                     	;# 
  1890  1F10                     	;# 
  1891  1F11                     	;# 
  1892  1F12                     	;# 
  1893  1F13                     	;# 
  1894  1F14                     	;# 
  1895  1F15                     	;# 
  1896  1F16                     	;# 
  1897  1F17                     	;# 
  1898  1F18                     	;# 
  1899  1F19                     	;# 
  1900  1F1A                     	;# 
  1901  1F1B                     	;# 
  1902  1F1C                     	;# 
  1903  1F1D                     	;# 
  1904  1F1E                     	;# 
  1905  1F1F                     	;# 
  1906  1F20                     	;# 
  1907  1F21                     	;# 
  1908  1F22                     	;# 
  1909  1F23                     	;# 
  1910  1F24                     	;# 
  1911  1F25                     	;# 
  1912  1F26                     	;# 
  1913  1F27                     	;# 
  1914  1F38                     	;# 
  1915  1F39                     	;# 
  1916  1F3A                     	;# 
  1917  1F3B                     	;# 
  1918  1F3C                     	;# 
  1919  1F3D                     	;# 
  1920  1F3E                     	;# 
  1921  1F3F                     	;# 
  1922  1F43                     	;# 
  1923  1F44                     	;# 
  1924  1F45                     	;# 
  1925  1F46                     	;# 
  1926  1F47                     	;# 
  1927  1F48                     	;# 
  1928  1F49                     	;# 
  1929  1F4A                     	;# 
  1930  1F4E                     	;# 
  1931  1F4F                     	;# 
  1932  1F50                     	;# 
  1933  1F51                     	;# 
  1934  1F52                     	;# 
  1935  1F53                     	;# 
  1936  1F54                     	;# 
  1937  1F55                     	;# 
  1938  1F65                     	;# 
  1939  1F68                     	;# 
  1940  1F69                     	;# 
  1941  1F6A                     	;# 
  1942  1F6B                     	;# 
  1943  1FE4                     	;# 
  1944  1FE5                     	;# 
  1945  1FE6                     	;# 
  1946  1FE7                     	;# 
  1947  1FE8                     	;# 
  1948  1FE8                     	;# 
  1949  1FE9                     	;# 
  1950  1FEA                     	;# 
  1951  1FEB                     	;# 
  1952  1FED                     	;# 
  1953  1FEE                     	;# 
  1954  1FEF                     	;# 
  1955  0000                     	;# 
  1956  0001                     	;# 
  1957  0002                     	;# 
  1958  0003                     	;# 
  1959  0004                     	;# 
  1960  0005                     	;# 
  1961  0006                     	;# 
  1962  0007                     	;# 
  1963  0008                     	;# 
  1964  0009                     	;# 
  1965  000A                     	;# 
  1966  000B                     	;# 
  1967  000C                     	;# 
  1968  000D                     	;# 
  1969  000E                     	;# 
  1970  0010                     	;# 
  1971  0012                     	;# 
  1972  0013                     	;# 
  1973  0014                     	;# 
  1974  0016                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  009F                     	;# 
  1984  0119                     	;# 
  1985  0119                     	;# 
  1986  0119                     	;# 
  1987  011A                     	;# 
  1988  011A                     	;# 
  1989  011A                     	;# 
  1990  011B                     	;# 
  1991  011B                     	;# 
  1992  011B                     	;# 
  1993  011B                     	;# 
  1994  011B                     	;# 
  1995  011C                     	;# 
  1996  011C                     	;# 
  1997  011C                     	;# 
  1998  011D                     	;# 
  1999  011D                     	;# 
  2000  011D                     	;# 
  2001  011E                     	;# 
  2002  011E                     	;# 
  2003  011E                     	;# 
  2004  011F                     	;# 
  2005  011F                     	;# 
  2006  011F                     	;# 
  2007  011F                     	;# 
  2008  011F                     	;# 
  2009  018C                     	;# 
  2010  018D                     	;# 
  2011  018E                     	;# 
  2012  018F                     	;# 
  2013  0190                     	;# 
  2014  0191                     	;# 
  2015  0192                     	;# 
  2016  0196                     	;# 
  2017  0197                     	;# 
  2018  0198                     	;# 
  2019  0199                     	;# 
  2020  019A                     	;# 
  2021  019B                     	;# 
  2022  019C                     	;# 
  2023  020C                     	;# 
  2024  020C                     	;# 
  2025  020D                     	;# 
  2026  020E                     	;# 
  2027  020F                     	;# 
  2028  020F                     	;# 
  2029  0210                     	;# 
  2030  0210                     	;# 
  2031  0211                     	;# 
  2032  0211                     	;# 
  2033  028C                     	;# 
  2034  028C                     	;# 
  2035  028D                     	;# 
  2036  028D                     	;# 
  2037  028E                     	;# 
  2038  028F                     	;# 
  2039  0290                     	;# 
  2040  0291                     	;# 
  2041  030C                     	;# 
  2042  030C                     	;# 
  2043  030D                     	;# 
  2044  030E                     	;# 
  2045  030F                     	;# 
  2046  0310                     	;# 
  2047  0310                     	;# 
  2048  0311                     	;# 
  2049  0312                     	;# 
  2050  0313                     	;# 
  2051  0314                     	;# 
  2052  0314                     	;# 
  2053  0315                     	;# 
  2054  0316                     	;# 
  2055  0318                     	;# 
  2056  0318                     	;# 
  2057  0319                     	;# 
  2058  031A                     	;# 
  2059  031C                     	;# 
  2060  031C                     	;# 
  2061  031D                     	;# 
  2062  031E                     	;# 
  2063  038C                     	;# 
  2064  038C                     	;# 
  2065  038D                     	;# 
  2066  038E                     	;# 
  2067  058C                     	;# 
  2068  058C                     	;# 
  2069  058D                     	;# 
  2070  058E                     	;# 
  2071  058F                     	;# 
  2072  058F                     	;# 
  2073  0590                     	;# 
  2074  0591                     	;# 
  2075  0592                     	;# 
  2076  0593                     	;# 
  2077  059C                     	;# 
  2078  059C                     	;# 
  2079  059D                     	;# 
  2080  059D                     	;# 
  2081  059E                     	;# 
  2082  059F                     	;# 
  2083  060C                     	;# 
  2084  060D                     	;# 
  2085  060E                     	;# 
  2086  060F                     	;# 
  2087  0610                     	;# 
  2088  0611                     	;# 
  2089  0612                     	;# 
  2090  0613                     	;# 
  2091  0614                     	;# 
  2092  070C                     	;# 
  2093  070D                     	;# 
  2094  070E                     	;# 
  2095  070F                     	;# 
  2096  0710                     	;# 
  2097  0711                     	;# 
  2098  0712                     	;# 
  2099  0713                     	;# 
  2100  0716                     	;# 
  2101  0717                     	;# 
  2102  0718                     	;# 
  2103  0719                     	;# 
  2104  071A                     	;# 
  2105  071B                     	;# 
  2106  071C                     	;# 
  2107  071D                     	;# 
  2108  0796                     	;# 
  2109  0797                     	;# 
  2110  0798                     	;# 
  2111  0799                     	;# 
  2112  079A                     	;# 
  2113  079B                     	;# 
  2114  080C                     	;# 
  2115  080D                     	;# 
  2116  080E                     	;# 
  2117  080F                     	;# 
  2118  0810                     	;# 
  2119  0811                     	;# 
  2120  0812                     	;# 
  2121  0813                     	;# 
  2122  0814                     	;# 
  2123  081A                     	;# 
  2124  081A                     	;# 
  2125  081B                     	;# 
  2126  081C                     	;# 
  2127  081C                     	;# 
  2128  081D                     	;# 
  2129  081E                     	;# 
  2130  081F                     	;# 
  2131  088C                     	;# 
  2132  088D                     	;# 
  2133  088E                     	;# 
  2134  088F                     	;# 
  2135  0890                     	;# 
  2136  0891                     	;# 
  2137  0892                     	;# 
  2138  0893                     	;# 
  2139  0895                     	;# 
  2140  0896                     	;# 
  2141  090C                     	;# 
  2142  090E                     	;# 
  2143  090F                     	;# 
  2144  091F                     	;# 
  2145  098F                     	;# 
  2146  098F                     	;# 
  2147  0990                     	;# 
  2148  0991                     	;# 
  2149  0992                     	;# 
  2150  0993                     	;# 
  2151  0994                     	;# 
  2152  0995                     	;# 
  2153  0996                     	;# 
  2154  0997                     	;# 
  2155  0A19                     	;# 
  2156  0A19                     	;# 
  2157  0A1A                     	;# 
  2158  0A1A                     	;# 
  2159  0A1B                     	;# 
  2160  0A1B                     	;# 
  2161  0A1B                     	;# 
  2162  0A1C                     	;# 
  2163  0A1C                     	;# 
  2164  0A1D                     	;# 
  2165  0A1D                     	;# 
  2166  0A1E                     	;# 
  2167  0A1E                     	;# 
  2168  0A1F                     	;# 
  2169  0A1F                     	;# 
  2170  0A1F                     	;# 
  2171  1E0F                     	;# 
  2172  1E10                     	;# 
  2173  1E11                     	;# 
  2174  1E12                     	;# 
  2175  1E13                     	;# 
  2176  1E14                     	;# 
  2177  1E15                     	;# 
  2178  1E16                     	;# 
  2179  1E17                     	;# 
  2180  1E18                     	;# 
  2181  1E19                     	;# 
  2182  1E1A                     	;# 
  2183  1E1B                     	;# 
  2184  1E1C                     	;# 
  2185  1E1D                     	;# 
  2186  1E1E                     	;# 
  2187  1E1F                     	;# 
  2188  1E20                     	;# 
  2189  1E21                     	;# 
  2190  1E22                     	;# 
  2191  1E23                     	;# 
  2192  1E24                     	;# 
  2193  1E25                     	;# 
  2194  1E26                     	;# 
  2195  1E27                     	;# 
  2196  1E28                     	;# 
  2197  1E29                     	;# 
  2198  1E2A                     	;# 
  2199  1E2B                     	;# 
  2200  1E2C                     	;# 
  2201  1E2D                     	;# 
  2202  1E2E                     	;# 
  2203  1E2F                     	;# 
  2204  1E30                     	;# 
  2205  1E31                     	;# 
  2206  1E32                     	;# 
  2207  1E33                     	;# 
  2208  1E34                     	;# 
  2209  1E35                     	;# 
  2210  1E36                     	;# 
  2211  1E37                     	;# 
  2212  1E8F                     	;# 
  2213  1E90                     	;# 
  2214  1E91                     	;# 
  2215  1E92                     	;# 
  2216  1E93                     	;# 
  2217  1E9C                     	;# 
  2218  1EA1                     	;# 
  2219  1EA2                     	;# 
  2220  1EB1                     	;# 
  2221  1EBB                     	;# 
  2222  1EBC                     	;# 
  2223  1EBD                     	;# 
  2224  1EBE                     	;# 
  2225  1EC3                     	;# 
  2226  1EC5                     	;# 
  2227  1EC6                     	;# 
  2228  1EC7                     	;# 
  2229  1EC8                     	;# 
  2230  1EC9                     	;# 
  2231  1ECA                     	;# 
  2232  1ECB                     	;# 
  2233  1ECC                     	;# 
  2234  1ECD                     	;# 
  2235  1ECE                     	;# 
  2236  1F10                     	;# 
  2237  1F11                     	;# 
  2238  1F12                     	;# 
  2239  1F13                     	;# 
  2240  1F14                     	;# 
  2241  1F15                     	;# 
  2242  1F16                     	;# 
  2243  1F17                     	;# 
  2244  1F18                     	;# 
  2245  1F19                     	;# 
  2246  1F1A                     	;# 
  2247  1F1B                     	;# 
  2248  1F1C                     	;# 
  2249  1F1D                     	;# 
  2250  1F1E                     	;# 
  2251  1F1F                     	;# 
  2252  1F20                     	;# 
  2253  1F21                     	;# 
  2254  1F22                     	;# 
  2255  1F23                     	;# 
  2256  1F24                     	;# 
  2257  1F25                     	;# 
  2258  1F26                     	;# 
  2259  1F27                     	;# 
  2260  1F38                     	;# 
  2261  1F39                     	;# 
  2262  1F3A                     	;# 
  2263  1F3B                     	;# 
  2264  1F3C                     	;# 
  2265  1F3D                     	;# 
  2266  1F3E                     	;# 
  2267  1F3F                     	;# 
  2268  1F43                     	;# 
  2269  1F44                     	;# 
  2270  1F45                     	;# 
  2271  1F46                     	;# 
  2272  1F47                     	;# 
  2273  1F48                     	;# 
  2274  1F49                     	;# 
  2275  1F4A                     	;# 
  2276  1F4E                     	;# 
  2277  1F4F                     	;# 
  2278  1F50                     	;# 
  2279  1F51                     	;# 
  2280  1F52                     	;# 
  2281  1F53                     	;# 
  2282  1F54                     	;# 
  2283  1F55                     	;# 
  2284  1F65                     	;# 
  2285  1F68                     	;# 
  2286  1F69                     	;# 
  2287  1F6A                     	;# 
  2288  1F6B                     	;# 
  2289  1FE4                     	;# 
  2290  1FE5                     	;# 
  2291  1FE6                     	;# 
  2292  1FE7                     	;# 
  2293  1FE8                     	;# 
  2294  1FE8                     	;# 
  2295  1FE9                     	;# 
  2296  1FEA                     	;# 
  2297  1FEB                     	;# 
  2298  1FED                     	;# 
  2299  1FEE                     	;# 
  2300  1FEF                     	;# 
  2301  0000                     	;# 
  2302  0001                     	;# 
  2303  0002                     	;# 
  2304  0003                     	;# 
  2305  0004                     	;# 
  2306  0005                     	;# 
  2307  0006                     	;# 
  2308  0007                     	;# 
  2309  0008                     	;# 
  2310  0009                     	;# 
  2311  000A                     	;# 
  2312  000B                     	;# 
  2313  000C                     	;# 
  2314  000D                     	;# 
  2315  000E                     	;# 
  2316  0010                     	;# 
  2317  0012                     	;# 
  2318  0013                     	;# 
  2319  0014                     	;# 
  2320  0016                     	;# 
  2321  0018                     	;# 
  2322  0019                     	;# 
  2323  001A                     	;# 
  2324  009B                     	;# 
  2325  009B                     	;# 
  2326  009C                     	;# 
  2327  009D                     	;# 
  2328  009E                     	;# 
  2329  009F                     	;# 
  2330  0119                     	;# 
  2331  0119                     	;# 
  2332  0119                     	;# 
  2333  011A                     	;# 
  2334  011A                     	;# 
  2335  011A                     	;# 
  2336  011B                     	;# 
  2337  011B                     	;# 
  2338  011B                     	;# 
  2339  011B                     	;# 
  2340  011B                     	;# 
  2341  011C                     	;# 
  2342  011C                     	;# 
  2343  011C                     	;# 
  2344  011D                     	;# 
  2345  011D                     	;# 
  2346  011D                     	;# 
  2347  011E                     	;# 
  2348  011E                     	;# 
  2349  011E                     	;# 
  2350  011F                     	;# 
  2351  011F                     	;# 
  2352  011F                     	;# 
  2353  011F                     	;# 
  2354  011F                     	;# 
  2355  018C                     	;# 
  2356  018D                     	;# 
  2357  018E                     	;# 
  2358  018F                     	;# 
  2359  0190                     	;# 
  2360  0191                     	;# 
  2361  0192                     	;# 
  2362  0196                     	;# 
  2363  0197                     	;# 
  2364  0198                     	;# 
  2365  0199                     	;# 
  2366  019A                     	;# 
  2367  019B                     	;# 
  2368  019C                     	;# 
  2369  020C                     	;# 
  2370  020C                     	;# 
  2371  020D                     	;# 
  2372  020E                     	;# 
  2373  020F                     	;# 
  2374  020F                     	;# 
  2375  0210                     	;# 
  2376  0210                     	;# 
  2377  0211                     	;# 
  2378  0211                     	;# 
  2379  028C                     	;# 
  2380  028C                     	;# 
  2381  028D                     	;# 
  2382  028D                     	;# 
  2383  028E                     	;# 
  2384  028F                     	;# 
  2385  0290                     	;# 
  2386  0291                     	;# 
  2387  030C                     	;# 
  2388  030C                     	;# 
  2389  030D                     	;# 
  2390  030E                     	;# 
  2391  030F                     	;# 
  2392  0310                     	;# 
  2393  0310                     	;# 
  2394  0311                     	;# 
  2395  0312                     	;# 
  2396  0313                     	;# 
  2397  0314                     	;# 
  2398  0314                     	;# 
  2399  0315                     	;# 
  2400  0316                     	;# 
  2401  0318                     	;# 
  2402  0318                     	;# 
  2403  0319                     	;# 
  2404  031A                     	;# 
  2405  031C                     	;# 
  2406  031C                     	;# 
  2407  031D                     	;# 
  2408  031E                     	;# 
  2409  038C                     	;# 
  2410  038C                     	;# 
  2411  038D                     	;# 
  2412  038E                     	;# 
  2413  058C                     	;# 
  2414  058C                     	;# 
  2415  058D                     	;# 
  2416  058E                     	;# 
  2417  058F                     	;# 
  2418  058F                     	;# 
  2419  0590                     	;# 
  2420  0591                     	;# 
  2421  0592                     	;# 
  2422  0593                     	;# 
  2423  059C                     	;# 
  2424  059C                     	;# 
  2425  059D                     	;# 
  2426  059D                     	;# 
  2427  059E                     	;# 
  2428  059F                     	;# 
  2429  060C                     	;# 
  2430  060D                     	;# 
  2431  060E                     	;# 
  2432  060F                     	;# 
  2433  0610                     	;# 
  2434  0611                     	;# 
  2435  0612                     	;# 
  2436  0613                     	;# 
  2437  0614                     	;# 
  2438  070C                     	;# 
  2439  070D                     	;# 
  2440  070E                     	;# 
  2441  070F                     	;# 
  2442  0710                     	;# 
  2443  0711                     	;# 
  2444  0712                     	;# 
  2445  0713                     	;# 
  2446  0716                     	;# 
  2447  0717                     	;# 
  2448  0718                     	;# 
  2449  0719                     	;# 
  2450  071A                     	;# 
  2451  071B                     	;# 
  2452  071C                     	;# 
  2453  071D                     	;# 
  2454  0796                     	;# 
  2455  0797                     	;# 
  2456  0798                     	;# 
  2457  0799                     	;# 
  2458  079A                     	;# 
  2459  079B                     	;# 
  2460  080C                     	;# 
  2461  080D                     	;# 
  2462  080E                     	;# 
  2463  080F                     	;# 
  2464  0810                     	;# 
  2465  0811                     	;# 
  2466  0812                     	;# 
  2467  0813                     	;# 
  2468  0814                     	;# 
  2469  081A                     	;# 
  2470  081A                     	;# 
  2471  081B                     	;# 
  2472  081C                     	;# 
  2473  081C                     	;# 
  2474  081D                     	;# 
  2475  081E                     	;# 
  2476  081F                     	;# 
  2477  088C                     	;# 
  2478  088D                     	;# 
  2479  088E                     	;# 
  2480  088F                     	;# 
  2481  0890                     	;# 
  2482  0891                     	;# 
  2483  0892                     	;# 
  2484  0893                     	;# 
  2485  0895                     	;# 
  2486  0896                     	;# 
  2487  090C                     	;# 
  2488  090E                     	;# 
  2489  090F                     	;# 
  2490  091F                     	;# 
  2491  098F                     	;# 
  2492  098F                     	;# 
  2493  0990                     	;# 
  2494  0991                     	;# 
  2495  0992                     	;# 
  2496  0993                     	;# 
  2497  0994                     	;# 
  2498  0995                     	;# 
  2499  0996                     	;# 
  2500  0997                     	;# 
  2501  0A19                     	;# 
  2502  0A19                     	;# 
  2503  0A1A                     	;# 
  2504  0A1A                     	;# 
  2505  0A1B                     	;# 
  2506  0A1B                     	;# 
  2507  0A1B                     	;# 
  2508  0A1C                     	;# 
  2509  0A1C                     	;# 
  2510  0A1D                     	;# 
  2511  0A1D                     	;# 
  2512  0A1E                     	;# 
  2513  0A1E                     	;# 
  2514  0A1F                     	;# 
  2515  0A1F                     	;# 
  2516  0A1F                     	;# 
  2517  1E0F                     	;# 
  2518  1E10                     	;# 
  2519  1E11                     	;# 
  2520  1E12                     	;# 
  2521  1E13                     	;# 
  2522  1E14                     	;# 
  2523  1E15                     	;# 
  2524  1E16                     	;# 
  2525  1E17                     	;# 
  2526  1E18                     	;# 
  2527  1E19                     	;# 
  2528  1E1A                     	;# 
  2529  1E1B                     	;# 
  2530  1E1C                     	;# 
  2531  1E1D                     	;# 
  2532  1E1E                     	;# 
  2533  1E1F                     	;# 
  2534  1E20                     	;# 
  2535  1E21                     	;# 
  2536  1E22                     	;# 
  2537  1E23                     	;# 
  2538  1E24                     	;# 
  2539  1E25                     	;# 
  2540  1E26                     	;# 
  2541  1E27                     	;# 
  2542  1E28                     	;# 
  2543  1E29                     	;# 
  2544  1E2A                     	;# 
  2545  1E2B                     	;# 
  2546  1E2C                     	;# 
  2547  1E2D                     	;# 
  2548  1E2E                     	;# 
  2549  1E2F                     	;# 
  2550  1E30                     	;# 
  2551  1E31                     	;# 
  2552  1E32                     	;# 
  2553  1E33                     	;# 
  2554  1E34                     	;# 
  2555  1E35                     	;# 
  2556  1E36                     	;# 
  2557  1E37                     	;# 
  2558  1E8F                     	;# 
  2559  1E90                     	;# 
  2560  1E91                     	;# 
  2561  1E92                     	;# 
  2562  1E93                     	;# 
  2563  1E9C                     	;# 
  2564  1EA1                     	;# 
  2565  1EA2                     	;# 
  2566  1EB1                     	;# 
  2567  1EBB                     	;# 
  2568  1EBC                     	;# 
  2569  1EBD                     	;# 
  2570  1EBE                     	;# 
  2571  1EC3                     	;# 
  2572  1EC5                     	;# 
  2573  1EC6                     	;# 
  2574  1EC7                     	;# 
  2575  1EC8                     	;# 
  2576  1EC9                     	;# 
  2577  1ECA                     	;# 
  2578  1ECB                     	;# 
  2579  1ECC                     	;# 
  2580  1ECD                     	;# 
  2581  1ECE                     	;# 
  2582  1F10                     	;# 
  2583  1F11                     	;# 
  2584  1F12                     	;# 
  2585  1F13                     	;# 
  2586  1F14                     	;# 
  2587  1F15                     	;# 
  2588  1F16                     	;# 
  2589  1F17                     	;# 
  2590  1F18                     	;# 
  2591  1F19                     	;# 
  2592  1F1A                     	;# 
  2593  1F1B                     	;# 
  2594  1F1C                     	;# 
  2595  1F1D                     	;# 
  2596  1F1E                     	;# 
  2597  1F1F                     	;# 
  2598  1F20                     	;# 
  2599  1F21                     	;# 
  2600  1F22                     	;# 
  2601  1F23                     	;# 
  2602  1F24                     	;# 
  2603  1F25                     	;# 
  2604  1F26                     	;# 
  2605  1F27                     	;# 
  2606  1F38                     	;# 
  2607  1F39                     	;# 
  2608  1F3A                     	;# 
  2609  1F3B                     	;# 
  2610  1F3C                     	;# 
  2611  1F3D                     	;# 
  2612  1F3E                     	;# 
  2613  1F3F                     	;# 
  2614  1F43                     	;# 
  2615  1F44                     	;# 
  2616  1F45                     	;# 
  2617  1F46                     	;# 
  2618  1F47                     	;# 
  2619  1F48                     	;# 
  2620  1F49                     	;# 
  2621  1F4A                     	;# 
  2622  1F4E                     	;# 
  2623  1F4F                     	;# 
  2624  1F50                     	;# 
  2625  1F51                     	;# 
  2626  1F52                     	;# 
  2627  1F53                     	;# 
  2628  1F54                     	;# 
  2629  1F55                     	;# 
  2630  1F65                     	;# 
  2631  1F68                     	;# 
  2632  1F69                     	;# 
  2633  1F6A                     	;# 
  2634  1F6B                     	;# 
  2635  1FE4                     	;# 
  2636  1FE5                     	;# 
  2637  1FE6                     	;# 
  2638  1FE7                     	;# 
  2639  1FE8                     	;# 
  2640  1FE8                     	;# 
  2641  1FE9                     	;# 
  2642  1FEA                     	;# 
  2643  1FEB                     	;# 
  2644  1FED                     	;# 
  2645  1FEE                     	;# 
  2646  1FEF                     	;# 
  2647  0000                     	;# 
  2648  0001                     	;# 
  2649  0002                     	;# 
  2650  0003                     	;# 
  2651  0004                     	;# 
  2652  0005                     	;# 
  2653  0006                     	;# 
  2654  0007                     	;# 
  2655  0008                     	;# 
  2656  0009                     	;# 
  2657  000A                     	;# 
  2658  000B                     	;# 
  2659  000C                     	;# 
  2660  000D                     	;# 
  2661  000E                     	;# 
  2662  0010                     	;# 
  2663  0012                     	;# 
  2664  0013                     	;# 
  2665  0014                     	;# 
  2666  0016                     	;# 
  2667  0018                     	;# 
  2668  0019                     	;# 
  2669  001A                     	;# 
  2670  009B                     	;# 
  2671  009B                     	;# 
  2672  009C                     	;# 
  2673  009D                     	;# 
  2674  009E                     	;# 
  2675  009F                     	;# 
  2676  0119                     	;# 
  2677  0119                     	;# 
  2678  0119                     	;# 
  2679  011A                     	;# 
  2680  011A                     	;# 
  2681  011A                     	;# 
  2682  011B                     	;# 
  2683  011B                     	;# 
  2684  011B                     	;# 
  2685  011B                     	;# 
  2686  011B                     	;# 
  2687  011C                     	;# 
  2688  011C                     	;# 
  2689  011C                     	;# 
  2690  011D                     	;# 
  2691  011D                     	;# 
  2692  011D                     	;# 
  2693  011E                     	;# 
  2694  011E                     	;# 
  2695  011E                     	;# 
  2696  011F                     	;# 
  2697  011F                     	;# 
  2698  011F                     	;# 
  2699  011F                     	;# 
  2700  011F                     	;# 
  2701  018C                     	;# 
  2702  018D                     	;# 
  2703  018E                     	;# 
  2704  018F                     	;# 
  2705  0190                     	;# 
  2706  0191                     	;# 
  2707  0192                     	;# 
  2708  0196                     	;# 
  2709  0197                     	;# 
  2710  0198                     	;# 
  2711  0199                     	;# 
  2712  019A                     	;# 
  2713  019B                     	;# 
  2714  019C                     	;# 
  2715  020C                     	;# 
  2716  020C                     	;# 
  2717  020D                     	;# 
  2718  020E                     	;# 
  2719  020F                     	;# 
  2720  020F                     	;# 
  2721  0210                     	;# 
  2722  0210                     	;# 
  2723  0211                     	;# 
  2724  0211                     	;# 
  2725  028C                     	;# 
  2726  028C                     	;# 
  2727  028D                     	;# 
  2728  028D                     	;# 
  2729  028E                     	;# 
  2730  028F                     	;# 
  2731  0290                     	;# 
  2732  0291                     	;# 
  2733  030C                     	;# 
  2734  030C                     	;# 
  2735  030D                     	;# 
  2736  030E                     	;# 
  2737  030F                     	;# 
  2738  0310                     	;# 
  2739  0310                     	;# 
  2740  0311                     	;# 
  2741  0312                     	;# 
  2742  0313                     	;# 
  2743  0314                     	;# 
  2744  0314                     	;# 
  2745  0315                     	;# 
  2746  0316                     	;# 
  2747  0318                     	;# 
  2748  0318                     	;# 
  2749  0319                     	;# 
  2750  031A                     	;# 
  2751  031C                     	;# 
  2752  031C                     	;# 
  2753  031D                     	;# 
  2754  031E                     	;# 
  2755  038C                     	;# 
  2756  038C                     	;# 
  2757  038D                     	;# 
  2758  038E                     	;# 
  2759  058C                     	;# 
  2760  058C                     	;# 
  2761  058D                     	;# 
  2762  058E                     	;# 
  2763  058F                     	;# 
  2764  058F                     	;# 
  2765  0590                     	;# 
  2766  0591                     	;# 
  2767  0592                     	;# 
  2768  0593                     	;# 
  2769  059C                     	;# 
  2770  059C                     	;# 
  2771  059D                     	;# 
  2772  059D                     	;# 
  2773  059E                     	;# 
  2774  059F                     	;# 
  2775  060C                     	;# 
  2776  060D                     	;# 
  2777  060E                     	;# 
  2778  060F                     	;# 
  2779  0610                     	;# 
  2780  0611                     	;# 
  2781  0612                     	;# 
  2782  0613                     	;# 
  2783  0614                     	;# 
  2784  070C                     	;# 
  2785  070D                     	;# 
  2786  070E                     	;# 
  2787  070F                     	;# 
  2788  0710                     	;# 
  2789  0711                     	;# 
  2790  0712                     	;# 
  2791  0713                     	;# 
  2792  0716                     	;# 
  2793  0717                     	;# 
  2794  0718                     	;# 
  2795  0719                     	;# 
  2796  071A                     	;# 
  2797  071B                     	;# 
  2798  071C                     	;# 
  2799  071D                     	;# 
  2800  0796                     	;# 
  2801  0797                     	;# 
  2802  0798                     	;# 
  2803  0799                     	;# 
  2804  079A                     	;# 
  2805  079B                     	;# 
  2806  080C                     	;# 
  2807  080D                     	;# 
  2808  080E                     	;# 
  2809  080F                     	;# 
  2810  0810                     	;# 
  2811  0811                     	;# 
  2812  0812                     	;# 
  2813  0813                     	;# 
  2814  0814                     	;# 
  2815  081A                     	;# 
  2816  081A                     	;# 
  2817  081B                     	;# 
  2818  081C                     	;# 
  2819  081C                     	;# 
  2820  081D                     	;# 
  2821  081E                     	;# 
  2822  081F                     	;# 
  2823  088C                     	;# 
  2824  088D                     	;# 
  2825  088E                     	;# 
  2826  088F                     	;# 
  2827  0890                     	;# 
  2828  0891                     	;# 
  2829  0892                     	;# 
  2830  0893                     	;# 
  2831  0895                     	;# 
  2832  0896                     	;# 
  2833  090C                     	;# 
  2834  090E                     	;# 
  2835  090F                     	;# 
  2836  091F                     	;# 
  2837  098F                     	;# 
  2838  098F                     	;# 
  2839  0990                     	;# 
  2840  0991                     	;# 
  2841  0992                     	;# 
  2842  0993                     	;# 
  2843  0994                     	;# 
  2844  0995                     	;# 
  2845  0996                     	;# 
  2846  0997                     	;# 
  2847  0A19                     	;# 
  2848  0A19                     	;# 
  2849  0A1A                     	;# 
  2850  0A1A                     	;# 
  2851  0A1B                     	;# 
  2852  0A1B                     	;# 
  2853  0A1B                     	;# 
  2854  0A1C                     	;# 
  2855  0A1C                     	;# 
  2856  0A1D                     	;# 
  2857  0A1D                     	;# 
  2858  0A1E                     	;# 
  2859  0A1E                     	;# 
  2860  0A1F                     	;# 
  2861  0A1F                     	;# 
  2862  0A1F                     	;# 
  2863  1E0F                     	;# 
  2864  1E10                     	;# 
  2865  1E11                     	;# 
  2866  1E12                     	;# 
  2867  1E13                     	;# 
  2868  1E14                     	;# 
  2869  1E15                     	;# 
  2870  1E16                     	;# 
  2871  1E17                     	;# 
  2872  1E18                     	;# 
  2873  1E19                     	;# 
  2874  1E1A                     	;# 
  2875  1E1B                     	;# 
  2876  1E1C                     	;# 
  2877  1E1D                     	;# 
  2878  1E1E                     	;# 
  2879  1E1F                     	;# 
  2880  1E20                     	;# 
  2881  1E21                     	;# 
  2882  1E22                     	;# 
  2883  1E23                     	;# 
  2884  1E24                     	;# 
  2885  1E25                     	;# 
  2886  1E26                     	;# 
  2887  1E27                     	;# 
  2888  1E28                     	;# 
  2889  1E29                     	;# 
  2890  1E2A                     	;# 
  2891  1E2B                     	;# 
  2892  1E2C                     	;# 
  2893  1E2D                     	;# 
  2894  1E2E                     	;# 
  2895  1E2F                     	;# 
  2896  1E30                     	;# 
  2897  1E31                     	;# 
  2898  1E32                     	;# 
  2899  1E33                     	;# 
  2900  1E34                     	;# 
  2901  1E35                     	;# 
  2902  1E36                     	;# 
  2903  1E37                     	;# 
  2904  1E8F                     	;# 
  2905  1E90                     	;# 
  2906  1E91                     	;# 
  2907  1E92                     	;# 
  2908  1E93                     	;# 
  2909  1E9C                     	;# 
  2910  1EA1                     	;# 
  2911  1EA2                     	;# 
  2912  1EB1                     	;# 
  2913  1EBB                     	;# 
  2914  1EBC                     	;# 
  2915  1EBD                     	;# 
  2916  1EBE                     	;# 
  2917  1EC3                     	;# 
  2918  1EC5                     	;# 
  2919  1EC6                     	;# 
  2920  1EC7                     	;# 
  2921  1EC8                     	;# 
  2922  1EC9                     	;# 
  2923  1ECA                     	;# 
  2924  1ECB                     	;# 
  2925  1ECC                     	;# 
  2926  1ECD                     	;# 
  2927  1ECE                     	;# 
  2928  1F10                     	;# 
  2929  1F11                     	;# 
  2930  1F12                     	;# 
  2931  1F13                     	;# 
  2932  1F14                     	;# 
  2933  1F15                     	;# 
  2934  1F16                     	;# 
  2935  1F17                     	;# 
  2936  1F18                     	;# 
  2937  1F19                     	;# 
  2938  1F1A                     	;# 
  2939  1F1B                     	;# 
  2940  1F1C                     	;# 
  2941  1F1D                     	;# 
  2942  1F1E                     	;# 
  2943  1F1F                     	;# 
  2944  1F20                     	;# 
  2945  1F21                     	;# 
  2946  1F22                     	;# 
  2947  1F23                     	;# 
  2948  1F24                     	;# 
  2949  1F25                     	;# 
  2950  1F26                     	;# 
  2951  1F27                     	;# 
  2952  1F38                     	;# 
  2953  1F39                     	;# 
  2954  1F3A                     	;# 
  2955  1F3B                     	;# 
  2956  1F3C                     	;# 
  2957  1F3D                     	;# 
  2958  1F3E                     	;# 
  2959  1F3F                     	;# 
  2960  1F43                     	;# 
  2961  1F44                     	;# 
  2962  1F45                     	;# 
  2963  1F46                     	;# 
  2964  1F47                     	;# 
  2965  1F48                     	;# 
  2966  1F49                     	;# 
  2967  1F4A                     	;# 
  2968  1F4E                     	;# 
  2969  1F4F                     	;# 
  2970  1F50                     	;# 
  2971  1F51                     	;# 
  2972  1F52                     	;# 
  2973  1F53                     	;# 
  2974  1F54                     	;# 
  2975  1F55                     	;# 
  2976  1F65                     	;# 
  2977  1F68                     	;# 
  2978  1F69                     	;# 
  2979  1F6A                     	;# 
  2980  1F6B                     	;# 
  2981  1FE4                     	;# 
  2982  1FE5                     	;# 
  2983  1FE6                     	;# 
  2984  1FE7                     	;# 
  2985  1FE8                     	;# 
  2986  1FE8                     	;# 
  2987  1FE9                     	;# 
  2988  1FEA                     	;# 
  2989  1FEB                     	;# 
  2990  1FED                     	;# 
  2991  1FEE                     	;# 
  2992  1FEF                     	;# 
  2993  0000                     	;# 
  2994  0001                     	;# 
  2995  0002                     	;# 
  2996  0003                     	;# 
  2997  0004                     	;# 
  2998  0005                     	;# 
  2999  0006                     	;# 
  3000  0007                     	;# 
  3001  0008                     	;# 
  3002  0009                     	;# 
  3003  000A                     	;# 
  3004  000B                     	;# 
  3005  000C                     	;# 
  3006  000D                     	;# 
  3007  000E                     	;# 
  3008  0010                     	;# 
  3009  0012                     	;# 
  3010  0013                     	;# 
  3011  0014                     	;# 
  3012  0016                     	;# 
  3013  0018                     	;# 
  3014  0019                     	;# 
  3015  001A                     	;# 
  3016  009B                     	;# 
  3017  009B                     	;# 
  3018  009C                     	;# 
  3019  009D                     	;# 
  3020  009E                     	;# 
  3021  009F                     	;# 
  3022  0119                     	;# 
  3023  0119                     	;# 
  3024  0119                     	;# 
  3025  011A                     	;# 
  3026  011A                     	;# 
  3027  011A                     	;# 
  3028  011B                     	;# 
  3029  011B                     	;# 
  3030  011B                     	;# 
  3031  011B                     	;# 
  3032  011B                     	;# 
  3033  011C                     	;# 
  3034  011C                     	;# 
  3035  011C                     	;# 
  3036  011D                     	;# 
  3037  011D                     	;# 
  3038  011D                     	;# 
  3039  011E                     	;# 
  3040  011E                     	;# 
  3041  011E                     	;# 
  3042  011F                     	;# 
  3043  011F                     	;# 
  3044  011F                     	;# 
  3045  011F                     	;# 
  3046  011F                     	;# 
  3047  018C                     	;# 
  3048  018D                     	;# 
  3049  018E                     	;# 
  3050  018F                     	;# 
  3051  0190                     	;# 
  3052  0191                     	;# 
  3053  0192                     	;# 
  3054  0196                     	;# 
  3055  0197                     	;# 
  3056  0198                     	;# 
  3057  0199                     	;# 
  3058  019A                     	;# 
  3059  019B                     	;# 
  3060  019C                     	;# 
  3061  020C                     	;# 
  3062  020C                     	;# 
  3063  020D                     	;# 
  3064  020E                     	;# 
  3065  020F                     	;# 
  3066  020F                     	;# 
  3067  0210                     	;# 
  3068  0210                     	;# 
  3069  0211                     	;# 
  3070  0211                     	;# 
  3071  028C                     	;# 
  3072  028C                     	;# 
  3073  028D                     	;# 
  3074  028D                     	;# 
  3075  028E                     	;# 
  3076  028F                     	;# 
  3077  0290                     	;# 
  3078  0291                     	;# 
  3079  030C                     	;# 
  3080  030C                     	;# 
  3081  030D                     	;# 
  3082  030E                     	;# 
  3083  030F                     	;# 
  3084  0310                     	;# 
  3085  0310                     	;# 
  3086  0311                     	;# 
  3087  0312                     	;# 
  3088  0313                     	;# 
  3089  0314                     	;# 
  3090  0314                     	;# 
  3091  0315                     	;# 
  3092  0316                     	;# 
  3093  0318                     	;# 
  3094  0318                     	;# 
  3095  0319                     	;# 
  3096  031A                     	;# 
  3097  031C                     	;# 
  3098  031C                     	;# 
  3099  031D                     	;# 
  3100  031E                     	;# 
  3101  038C                     	;# 
  3102  038C                     	;# 
  3103  038D                     	;# 
  3104  038E                     	;# 
  3105  058C                     	;# 
  3106  058C                     	;# 
  3107  058D                     	;# 
  3108  058E                     	;# 
  3109  058F                     	;# 
  3110  058F                     	;# 
  3111  0590                     	;# 
  3112  0591                     	;# 
  3113  0592                     	;# 
  3114  0593                     	;# 
  3115  059C                     	;# 
  3116  059C                     	;# 
  3117  059D                     	;# 
  3118  059D                     	;# 
  3119  059E                     	;# 
  3120  059F                     	;# 
  3121  060C                     	;# 
  3122  060D                     	;# 
  3123  060E                     	;# 
  3124  060F                     	;# 
  3125  0610                     	;# 
  3126  0611                     	;# 
  3127  0612                     	;# 
  3128  0613                     	;# 
  3129  0614                     	;# 
  3130  070C                     	;# 
  3131  070D                     	;# 
  3132  070E                     	;# 
  3133  070F                     	;# 
  3134  0710                     	;# 
  3135  0711                     	;# 
  3136  0712                     	;# 
  3137  0713                     	;# 
  3138  0716                     	;# 
  3139  0717                     	;# 
  3140  0718                     	;# 
  3141  0719                     	;# 
  3142  071A                     	;# 
  3143  071B                     	;# 
  3144  071C                     	;# 
  3145  071D                     	;# 
  3146  0796                     	;# 
  3147  0797                     	;# 
  3148  0798                     	;# 
  3149  0799                     	;# 
  3150  079A                     	;# 
  3151  079B                     	;# 
  3152  080C                     	;# 
  3153  080D                     	;# 
  3154  080E                     	;# 
  3155  080F                     	;# 
  3156  0810                     	;# 
  3157  0811                     	;# 
  3158  0812                     	;# 
  3159  0813                     	;# 
  3160  0814                     	;# 
  3161  081A                     	;# 
  3162  081A                     	;# 
  3163  081B                     	;# 
  3164  081C                     	;# 
  3165  081C                     	;# 
  3166  081D                     	;# 
  3167  081E                     	;# 
  3168  081F                     	;# 
  3169  088C                     	;# 
  3170  088D                     	;# 
  3171  088E                     	;# 
  3172  088F                     	;# 
  3173  0890                     	;# 
  3174  0891                     	;# 
  3175  0892                     	;# 
  3176  0893                     	;# 
  3177  0895                     	;# 
  3178  0896                     	;# 
  3179  090C                     	;# 
  3180  090E                     	;# 
  3181  090F                     	;# 
  3182  091F                     	;# 
  3183  098F                     	;# 
  3184  098F                     	;# 
  3185  0990                     	;# 
  3186  0991                     	;# 
  3187  0992                     	;# 
  3188  0993                     	;# 
  3189  0994                     	;# 
  3190  0995                     	;# 
  3191  0996                     	;# 
  3192  0997                     	;# 
  3193  0A19                     	;# 
  3194  0A19                     	;# 
  3195  0A1A                     	;# 
  3196  0A1A                     	;# 
  3197  0A1B                     	;# 
  3198  0A1B                     	;# 
  3199  0A1B                     	;# 
  3200  0A1C                     	;# 
  3201  0A1C                     	;# 
  3202  0A1D                     	;# 
  3203  0A1D                     	;# 
  3204  0A1E                     	;# 
  3205  0A1E                     	;# 
  3206  0A1F                     	;# 
  3207  0A1F                     	;# 
  3208  0A1F                     	;# 
  3209  1E0F                     	;# 
  3210  1E10                     	;# 
  3211  1E11                     	;# 
  3212  1E12                     	;# 
  3213  1E13                     	;# 
  3214  1E14                     	;# 
  3215  1E15                     	;# 
  3216  1E16                     	;# 
  3217  1E17                     	;# 
  3218  1E18                     	;# 
  3219  1E19                     	;# 
  3220  1E1A                     	;# 
  3221  1E1B                     	;# 
  3222  1E1C                     	;# 
  3223  1E1D                     	;# 
  3224  1E1E                     	;# 
  3225  1E1F                     	;# 
  3226  1E20                     	;# 
  3227  1E21                     	;# 
  3228  1E22                     	;# 
  3229  1E23                     	;# 
  3230  1E24                     	;# 
  3231  1E25                     	;# 
  3232  1E26                     	;# 
  3233  1E27                     	;# 
  3234  1E28                     	;# 
  3235  1E29                     	;# 
  3236  1E2A                     	;# 
  3237  1E2B                     	;# 
  3238  1E2C                     	;# 
  3239  1E2D                     	;# 
  3240  1E2E                     	;# 
  3241  1E2F                     	;# 
  3242  1E30                     	;# 
  3243  1E31                     	;# 
  3244  1E32                     	;# 
  3245  1E33                     	;# 
  3246  1E34                     	;# 
  3247  1E35                     	;# 
  3248  1E36                     	;# 
  3249  1E37                     	;# 
  3250  1E8F                     	;# 
  3251  1E90                     	;# 
  3252  1E91                     	;# 
  3253  1E92                     	;# 
  3254  1E93                     	;# 
  3255  1E9C                     	;# 
  3256  1EA1                     	;# 
  3257  1EA2                     	;# 
  3258  1EB1                     	;# 
  3259  1EBB                     	;# 
  3260  1EBC                     	;# 
  3261  1EBD                     	;# 
  3262  1EBE                     	;# 
  3263  1EC3                     	;# 
  3264  1EC5                     	;# 
  3265  1EC6                     	;# 
  3266  1EC7                     	;# 
  3267  1EC8                     	;# 
  3268  1EC9                     	;# 
  3269  1ECA                     	;# 
  3270  1ECB                     	;# 
  3271  1ECC                     	;# 
  3272  1ECD                     	;# 
  3273  1ECE                     	;# 
  3274  1F10                     	;# 
  3275  1F11                     	;# 
  3276  1F12                     	;# 
  3277  1F13                     	;# 
  3278  1F14                     	;# 
  3279  1F15                     	;# 
  3280  1F16                     	;# 
  3281  1F17                     	;# 
  3282  1F18                     	;# 
  3283  1F19                     	;# 
  3284  1F1A                     	;# 
  3285  1F1B                     	;# 
  3286  1F1C                     	;# 
  3287  1F1D                     	;# 
  3288  1F1E                     	;# 
  3289  1F1F                     	;# 
  3290  1F20                     	;# 
  3291  1F21                     	;# 
  3292  1F22                     	;# 
  3293  1F23                     	;# 
  3294  1F24                     	;# 
  3295  1F25                     	;# 
  3296  1F26                     	;# 
  3297  1F27                     	;# 
  3298  1F38                     	;# 
  3299  1F39                     	;# 
  3300  1F3A                     	;# 
  3301  1F3B                     	;# 
  3302  1F3C                     	;# 
  3303  1F3D                     	;# 
  3304  1F3E                     	;# 
  3305  1F3F                     	;# 
  3306  1F43                     	;# 
  3307  1F44                     	;# 
  3308  1F45                     	;# 
  3309  1F46                     	;# 
  3310  1F47                     	;# 
  3311  1F48                     	;# 
  3312  1F49                     	;# 
  3313  1F4A                     	;# 
  3314  1F4E                     	;# 
  3315  1F4F                     	;# 
  3316  1F50                     	;# 
  3317  1F51                     	;# 
  3318  1F52                     	;# 
  3319  1F53                     	;# 
  3320  1F54                     	;# 
  3321  1F55                     	;# 
  3322  1F65                     	;# 
  3323  1F68                     	;# 
  3324  1F69                     	;# 
  3325  1F6A                     	;# 
  3326  1F6B                     	;# 
  3327  1FE4                     	;# 
  3328  1FE5                     	;# 
  3329  1FE6                     	;# 
  3330  1FE7                     	;# 
  3331  1FE8                     	;# 
  3332  1FE8                     	;# 
  3333  1FE9                     	;# 
  3334  1FEA                     	;# 
  3335  1FEB                     	;# 
  3336  1FED                     	;# 
  3337  1FEE                     	;# 
  3338  1FEF                     	;# 
  3339  0000                     	;# 
  3340  0001                     	;# 
  3341  0002                     	;# 
  3342  0003                     	;# 
  3343  0004                     	;# 
  3344  0005                     	;# 
  3345  0006                     	;# 
  3346  0007                     	;# 
  3347  0008                     	;# 
  3348  0009                     	;# 
  3349  000A                     	;# 
  3350  000B                     	;# 
  3351  000C                     	;# 
  3352  000D                     	;# 
  3353  000E                     	;# 
  3354  0010                     	;# 
  3355  0012                     	;# 
  3356  0013                     	;# 
  3357  0014                     	;# 
  3358  0016                     	;# 
  3359  0018                     	;# 
  3360  0019                     	;# 
  3361  001A                     	;# 
  3362  009B                     	;# 
  3363  009B                     	;# 
  3364  009C                     	;# 
  3365  009D                     	;# 
  3366  009E                     	;# 
  3367  009F                     	;# 
  3368  0119                     	;# 
  3369  0119                     	;# 
  3370  0119                     	;# 
  3371  011A                     	;# 
  3372  011A                     	;# 
  3373  011A                     	;# 
  3374  011B                     	;# 
  3375  011B                     	;# 
  3376  011B                     	;# 
  3377  011B                     	;# 
  3378  011B                     	;# 
  3379  011C                     	;# 
  3380  011C                     	;# 
  3381  011C                     	;# 
  3382  011D                     	;# 
  3383  011D                     	;# 
  3384  011D                     	;# 
  3385  011E                     	;# 
  3386  011E                     	;# 
  3387  011E                     	;# 
  3388  011F                     	;# 
  3389  011F                     	;# 
  3390  011F                     	;# 
  3391  011F                     	;# 
  3392  011F                     	;# 
  3393  018C                     	;# 
  3394  018D                     	;# 
  3395  018E                     	;# 
  3396  018F                     	;# 
  3397  0190                     	;# 
  3398  0191                     	;# 
  3399  0192                     	;# 
  3400  0196                     	;# 
  3401  0197                     	;# 
  3402  0198                     	;# 
  3403  0199                     	;# 
  3404  019A                     	;# 
  3405  019B                     	;# 
  3406  019C                     	;# 
  3407  020C                     	;# 
  3408  020C                     	;# 
  3409  020D                     	;# 
  3410  020E                     	;# 
  3411  020F                     	;# 
  3412  020F                     	;# 
  3413  0210                     	;# 
  3414  0210                     	;# 
  3415  0211                     	;# 
  3416  0211                     	;# 
  3417  028C                     	;# 
  3418  028C                     	;# 
  3419  028D                     	;# 
  3420  028D                     	;# 
  3421  028E                     	;# 
  3422  028F                     	;# 
  3423  0290                     	;# 
  3424  0291                     	;# 
  3425  030C                     	;# 
  3426  030C                     	;# 
  3427  030D                     	;# 
  3428  030E                     	;# 
  3429  030F                     	;# 
  3430  0310                     	;# 
  3431  0310                     	;# 
  3432  0311                     	;# 
  3433  0312                     	;# 
  3434  0313                     	;# 
  3435  0314                     	;# 
  3436  0314                     	;# 
  3437  0315                     	;# 
  3438  0316                     	;# 
  3439  0318                     	;# 
  3440  0318                     	;# 
  3441  0319                     	;# 
  3442  031A                     	;# 
  3443  031C                     	;# 
  3444  031C                     	;# 
  3445  031D                     	;# 
  3446  031E                     	;# 
  3447  038C                     	;# 
  3448  038C                     	;# 
  3449  038D                     	;# 
  3450  038E                     	;# 
  3451  058C                     	;# 
  3452  058C                     	;# 
  3453  058D                     	;# 
  3454  058E                     	;# 
  3455  058F                     	;# 
  3456  058F                     	;# 
  3457  0590                     	;# 
  3458  0591                     	;# 
  3459  0592                     	;# 
  3460  0593                     	;# 
  3461  059C                     	;# 
  3462  059C                     	;# 
  3463  059D                     	;# 
  3464  059D                     	;# 
  3465  059E                     	;# 
  3466  059F                     	;# 
  3467  060C                     	;# 
  3468  060D                     	;# 
  3469  060E                     	;# 
  3470  060F                     	;# 
  3471  0610                     	;# 
  3472  0611                     	;# 
  3473  0612                     	;# 
  3474  0613                     	;# 
  3475  0614                     	;# 
  3476  070C                     	;# 
  3477  070D                     	;# 
  3478  070E                     	;# 
  3479  070F                     	;# 
  3480  0710                     	;# 
  3481  0711                     	;# 
  3482  0712                     	;# 
  3483  0713                     	;# 
  3484  0716                     	;# 
  3485  0717                     	;# 
  3486  0718                     	;# 
  3487  0719                     	;# 
  3488  071A                     	;# 
  3489  071B                     	;# 
  3490  071C                     	;# 
  3491  071D                     	;# 
  3492  0796                     	;# 
  3493  0797                     	;# 
  3494  0798                     	;# 
  3495  0799                     	;# 
  3496  079A                     	;# 
  3497  079B                     	;# 
  3498  080C                     	;# 
  3499  080D                     	;# 
  3500  080E                     	;# 
  3501  080F                     	;# 
  3502  0810                     	;# 
  3503  0811                     	;# 
  3504  0812                     	;# 
  3505  0813                     	;# 
  3506  0814                     	;# 
  3507  081A                     	;# 
  3508  081A                     	;# 
  3509  081B                     	;# 
  3510  081C                     	;# 
  3511  081C                     	;# 
  3512  081D                     	;# 
  3513  081E                     	;# 
  3514  081F                     	;# 
  3515  088C                     	;# 
  3516  088D                     	;# 
  3517  088E                     	;# 
  3518  088F                     	;# 
  3519  0890                     	;# 
  3520  0891                     	;# 
  3521  0892                     	;# 
  3522  0893                     	;# 
  3523  0895                     	;# 
  3524  0896                     	;# 
  3525  090C                     	;# 
  3526  090E                     	;# 
  3527  090F                     	;# 
  3528  091F                     	;# 
  3529  098F                     	;# 
  3530  098F                     	;# 
  3531  0990                     	;# 
  3532  0991                     	;# 
  3533  0992                     	;# 
  3534  0993                     	;# 
  3535  0994                     	;# 
  3536  0995                     	;# 
  3537  0996                     	;# 
  3538  0997                     	;# 
  3539  0A19                     	;# 
  3540  0A19                     	;# 
  3541  0A1A                     	;# 
  3542  0A1A                     	;# 
  3543  0A1B                     	;# 
  3544  0A1B                     	;# 
  3545  0A1B                     	;# 
  3546  0A1C                     	;# 
  3547  0A1C                     	;# 
  3548  0A1D                     	;# 
  3549  0A1D                     	;# 
  3550  0A1E                     	;# 
  3551  0A1E                     	;# 
  3552  0A1F                     	;# 
  3553  0A1F                     	;# 
  3554  0A1F                     	;# 
  3555  1E0F                     	;# 
  3556  1E10                     	;# 
  3557  1E11                     	;# 
  3558  1E12                     	;# 
  3559  1E13                     	;# 
  3560  1E14                     	;# 
  3561  1E15                     	;# 
  3562  1E16                     	;# 
  3563  1E17                     	;# 
  3564  1E18                     	;# 
  3565  1E19                     	;# 
  3566  1E1A                     	;# 
  3567  1E1B                     	;# 
  3568  1E1C                     	;# 
  3569  1E1D                     	;# 
  3570  1E1E                     	;# 
  3571  1E1F                     	;# 
  3572  1E20                     	;# 
  3573  1E21                     	;# 
  3574  1E22                     	;# 
  3575  1E23                     	;# 
  3576  1E24                     	;# 
  3577  1E25                     	;# 
  3578  1E26                     	;# 
  3579  1E27                     	;# 
  3580  1E28                     	;# 
  3581  1E29                     	;# 
  3582  1E2A                     	;# 
  3583  1E2B                     	;# 
  3584  1E2C                     	;# 
  3585  1E2D                     	;# 
  3586  1E2E                     	;# 
  3587  1E2F                     	;# 
  3588  1E30                     	;# 
  3589  1E31                     	;# 
  3590  1E32                     	;# 
  3591  1E33                     	;# 
  3592  1E34                     	;# 
  3593  1E35                     	;# 
  3594  1E36                     	;# 
  3595  1E37                     	;# 
  3596  1E8F                     	;# 
  3597  1E90                     	;# 
  3598  1E91                     	;# 
  3599  1E92                     	;# 
  3600  1E93                     	;# 
  3601  1E9C                     	;# 
  3602  1EA1                     	;# 
  3603  1EA2                     	;# 
  3604  1EB1                     	;# 
  3605  1EBB                     	;# 
  3606  1EBC                     	;# 
  3607  1EBD                     	;# 
  3608  1EBE                     	;# 
  3609  1EC3                     	;# 
  3610  1EC5                     	;# 
  3611  1EC6                     	;# 
  3612  1EC7                     	;# 
  3613  1EC8                     	;# 
  3614  1EC9                     	;# 
  3615  1ECA                     	;# 
  3616  1ECB                     	;# 
  3617  1ECC                     	;# 
  3618  1ECD                     	;# 
  3619  1ECE                     	;# 
  3620  1F10                     	;# 
  3621  1F11                     	;# 
  3622  1F12                     	;# 
  3623  1F13                     	;# 
  3624  1F14                     	;# 
  3625  1F15                     	;# 
  3626  1F16                     	;# 
  3627  1F17                     	;# 
  3628  1F18                     	;# 
  3629  1F19                     	;# 
  3630  1F1A                     	;# 
  3631  1F1B                     	;# 
  3632  1F1C                     	;# 
  3633  1F1D                     	;# 
  3634  1F1E                     	;# 
  3635  1F1F                     	;# 
  3636  1F20                     	;# 
  3637  1F21                     	;# 
  3638  1F22                     	;# 
  3639  1F23                     	;# 
  3640  1F24                     	;# 
  3641  1F25                     	;# 
  3642  1F26                     	;# 
  3643  1F27                     	;# 
  3644  1F38                     	;# 
  3645  1F39                     	;# 
  3646  1F3A                     	;# 
  3647  1F3B                     	;# 
  3648  1F3C                     	;# 
  3649  1F3D                     	;# 
  3650  1F3E                     	;# 
  3651  1F3F                     	;# 
  3652  1F43                     	;# 
  3653  1F44                     	;# 
  3654  1F45                     	;# 
  3655  1F46                     	;# 
  3656  1F47                     	;# 
  3657  1F48                     	;# 
  3658  1F49                     	;# 
  3659  1F4A                     	;# 
  3660  1F4E                     	;# 
  3661  1F4F                     	;# 
  3662  1F50                     	;# 
  3663  1F51                     	;# 
  3664  1F52                     	;# 
  3665  1F53                     	;# 
  3666  1F54                     	;# 
  3667  1F55                     	;# 
  3668  1F65                     	;# 
  3669  1F68                     	;# 
  3670  1F69                     	;# 
  3671  1F6A                     	;# 
  3672  1F6B                     	;# 
  3673  1FE4                     	;# 
  3674  1FE5                     	;# 
  3675  1FE6                     	;# 
  3676  1FE7                     	;# 
  3677  1FE8                     	;# 
  3678  1FE8                     	;# 
  3679  1FE9                     	;# 
  3680  1FEA                     	;# 
  3681  1FEB                     	;# 
  3682  1FED                     	;# 
  3683  1FEE                     	;# 
  3684  1FEF                     	;# 
  3685  0000                     	;# 
  3686  0001                     	;# 
  3687  0002                     	;# 
  3688  0003                     	;# 
  3689  0004                     	;# 
  3690  0005                     	;# 
  3691  0006                     	;# 
  3692  0007                     	;# 
  3693  0008                     	;# 
  3694  0009                     	;# 
  3695  000A                     	;# 
  3696  000B                     	;# 
  3697  000C                     	;# 
  3698  000D                     	;# 
  3699  000E                     	;# 
  3700  0010                     	;# 
  3701  0012                     	;# 
  3702  0013                     	;# 
  3703  0014                     	;# 
  3704  0016                     	;# 
  3705  0018                     	;# 
  3706  0019                     	;# 
  3707  001A                     	;# 
  3708  009B                     	;# 
  3709  009B                     	;# 
  3710  009C                     	;# 
  3711  009D                     	;# 
  3712  009E                     	;# 
  3713  009F                     	;# 
  3714  0119                     	;# 
  3715  0119                     	;# 
  3716  0119                     	;# 
  3717  011A                     	;# 
  3718  011A                     	;# 
  3719  011A                     	;# 
  3720  011B                     	;# 
  3721  011B                     	;# 
  3722  011B                     	;# 
  3723  011B                     	;# 
  3724  011B                     	;# 
  3725  011C                     	;# 
  3726  011C                     	;# 
  3727  011C                     	;# 
  3728  011D                     	;# 
  3729  011D                     	;# 
  3730  011D                     	;# 
  3731  011E                     	;# 
  3732  011E                     	;# 
  3733  011E                     	;# 
  3734  011F                     	;# 
  3735  011F                     	;# 
  3736  011F                     	;# 
  3737  011F                     	;# 
  3738  011F                     	;# 
  3739  018C                     	;# 
  3740  018D                     	;# 
  3741  018E                     	;# 
  3742  018F                     	;# 
  3743  0190                     	;# 
  3744  0191                     	;# 
  3745  0192                     	;# 
  3746  0196                     	;# 
  3747  0197                     	;# 
  3748  0198                     	;# 
  3749  0199                     	;# 
  3750  019A                     	;# 
  3751  019B                     	;# 
  3752  019C                     	;# 
  3753  020C                     	;# 
  3754  020C                     	;# 
  3755  020D                     	;# 
  3756  020E                     	;# 
  3757  020F                     	;# 
  3758  020F                     	;# 
  3759  0210                     	;# 
  3760  0210                     	;# 
  3761  0211                     	;# 
  3762  0211                     	;# 
  3763  028C                     	;# 
  3764  028C                     	;# 
  3765  028D                     	;# 
  3766  028D                     	;# 
  3767  028E                     	;# 
  3768  028F                     	;# 
  3769  0290                     	;# 
  3770  0291                     	;# 
  3771  030C                     	;# 
  3772  030C                     	;# 
  3773  030D                     	;# 
  3774  030E                     	;# 
  3775  030F                     	;# 
  3776  0310                     	;# 
  3777  0310                     	;# 
  3778  0311                     	;# 
  3779  0312                     	;# 
  3780  0313                     	;# 
  3781  0314                     	;# 
  3782  0314                     	;# 
  3783  0315                     	;# 
  3784  0316                     	;# 
  3785  0318                     	;# 
  3786  0318                     	;# 
  3787  0319                     	;# 
  3788  031A                     	;# 
  3789  031C                     	;# 
  3790  031C                     	;# 
  3791  031D                     	;# 
  3792  031E                     	;# 
  3793  038C                     	;# 
  3794  038C                     	;# 
  3795  038D                     	;# 
  3796  038E                     	;# 
  3797  058C                     	;# 
  3798  058C                     	;# 
  3799  058D                     	;# 
  3800  058E                     	;# 
  3801  058F                     	;# 
  3802  058F                     	;# 
  3803  0590                     	;# 
  3804  0591                     	;# 
  3805  0592                     	;# 
  3806  0593                     	;# 
  3807  059C                     	;# 
  3808  059C                     	;# 
  3809  059D                     	;# 
  3810  059D                     	;# 
  3811  059E                     	;# 
  3812  059F                     	;# 
  3813  060C                     	;# 
  3814  060D                     	;# 
  3815  060E                     	;# 
  3816  060F                     	;# 
  3817  0610                     	;# 
  3818  0611                     	;# 
  3819  0612                     	;# 
  3820  0613                     	;# 
  3821  0614                     	;# 
  3822  070C                     	;# 
  3823  070D                     	;# 
  3824  070E                     	;# 
  3825  070F                     	;# 
  3826  0710                     	;# 
  3827  0711                     	;# 
  3828  0712                     	;# 
  3829  0713                     	;# 
  3830  0716                     	;# 
  3831  0717                     	;# 
  3832  0718                     	;# 
  3833  0719                     	;# 
  3834  071A                     	;# 
  3835  071B                     	;# 
  3836  071C                     	;# 
  3837  071D                     	;# 
  3838  0796                     	;# 
  3839  0797                     	;# 
  3840  0798                     	;# 
  3841  0799                     	;# 
  3842  079A                     	;# 
  3843  079B                     	;# 
  3844  080C                     	;# 
  3845  080D                     	;# 
  3846  080E                     	;# 
  3847  080F                     	;# 
  3848  0810                     	;# 
  3849  0811                     	;# 
  3850  0812                     	;# 
  3851  0813                     	;# 
  3852  0814                     	;# 
  3853  081A                     	;# 
  3854  081A                     	;# 
  3855  081B                     	;# 
  3856  081C                     	;# 
  3857  081C                     	;# 
  3858  081D                     	;# 
  3859  081E                     	;# 
  3860  081F                     	;# 
  3861  088C                     	;# 
  3862  088D                     	;# 
  3863  088E                     	;# 
  3864  088F                     	;# 
  3865  0890                     	;# 
  3866  0891                     	;# 
  3867  0892                     	;# 
  3868  0893                     	;# 
  3869  0895                     	;# 
  3870  0896                     	;# 
  3871  090C                     	;# 
  3872  090E                     	;# 
  3873  090F                     	;# 
  3874  091F                     	;# 
  3875  098F                     	;# 
  3876  098F                     	;# 
  3877  0990                     	;# 
  3878  0991                     	;# 
  3879  0992                     	;# 
  3880  0993                     	;# 
  3881  0994                     	;# 
  3882  0995                     	;# 
  3883  0996                     	;# 
  3884  0997                     	;# 
  3885  0A19                     	;# 
  3886  0A19                     	;# 
  3887  0A1A                     	;# 
  3888  0A1A                     	;# 
  3889  0A1B                     	;# 
  3890  0A1B                     	;# 
  3891  0A1B                     	;# 
  3892  0A1C                     	;# 
  3893  0A1C                     	;# 
  3894  0A1D                     	;# 
  3895  0A1D                     	;# 
  3896  0A1E                     	;# 
  3897  0A1E                     	;# 
  3898  0A1F                     	;# 
  3899  0A1F                     	;# 
  3900  0A1F                     	;# 
  3901  1E0F                     	;# 
  3902  1E10                     	;# 
  3903  1E11                     	;# 
  3904  1E12                     	;# 
  3905  1E13                     	;# 
  3906  1E14                     	;# 
  3907  1E15                     	;# 
  3908  1E16                     	;# 
  3909  1E17                     	;# 
  3910  1E18                     	;# 
  3911  1E19                     	;# 
  3912  1E1A                     	;# 
  3913  1E1B                     	;# 
  3914  1E1C                     	;# 
  3915  1E1D                     	;# 
  3916  1E1E                     	;# 
  3917  1E1F                     	;# 
  3918  1E20                     	;# 
  3919  1E21                     	;# 
  3920  1E22                     	;# 
  3921  1E23                     	;# 
  3922  1E24                     	;# 
  3923  1E25                     	;# 
  3924  1E26                     	;# 
  3925  1E27                     	;# 
  3926  1E28                     	;# 
  3927  1E29                     	;# 
  3928  1E2A                     	;# 
  3929  1E2B                     	;# 
  3930  1E2C                     	;# 
  3931  1E2D                     	;# 
  3932  1E2E                     	;# 
  3933  1E2F                     	;# 
  3934  1E30                     	;# 
  3935  1E31                     	;# 
  3936  1E32                     	;# 
  3937  1E33                     	;# 
  3938  1E34                     	;# 
  3939  1E35                     	;# 
  3940  1E36                     	;# 
  3941  1E37                     	;# 
  3942  1E8F                     	;# 
  3943  1E90                     	;# 
  3944  1E91                     	;# 
  3945  1E92                     	;# 
  3946  1E93                     	;# 
  3947  1E9C                     	;# 
  3948  1EA1                     	;# 
  3949  1EA2                     	;# 
  3950  1EB1                     	;# 
  3951  1EBB                     	;# 
  3952  1EBC                     	;# 
  3953  1EBD                     	;# 
  3954  1EBE                     	;# 
  3955  1EC3                     	;# 
  3956  1EC5                     	;# 
  3957  1EC6                     	;# 
  3958  1EC7                     	;# 
  3959  1EC8                     	;# 
  3960  1EC9                     	;# 
  3961  1ECA                     	;# 
  3962  1ECB                     	;# 
  3963  1ECC                     	;# 
  3964  1ECD                     	;# 
  3965  1ECE                     	;# 
  3966  1F10                     	;# 
  3967  1F11                     	;# 
  3968  1F12                     	;# 
  3969  1F13                     	;# 
  3970  1F14                     	;# 
  3971  1F15                     	;# 
  3972  1F16                     	;# 
  3973  1F17                     	;# 
  3974  1F18                     	;# 
  3975  1F19                     	;# 
  3976  1F1A                     	;# 
  3977  1F1B                     	;# 
  3978  1F1C                     	;# 
  3979  1F1D                     	;# 
  3980  1F1E                     	;# 
  3981  1F1F                     	;# 
  3982  1F20                     	;# 
  3983  1F21                     	;# 
  3984  1F22                     	;# 
  3985  1F23                     	;# 
  3986  1F24                     	;# 
  3987  1F25                     	;# 
  3988  1F26                     	;# 
  3989  1F27                     	;# 
  3990  1F38                     	;# 
  3991  1F39                     	;# 
  3992  1F3A                     	;# 
  3993  1F3B                     	;# 
  3994  1F3C                     	;# 
  3995  1F3D                     	;# 
  3996  1F3E                     	;# 
  3997  1F3F                     	;# 
  3998  1F43                     	;# 
  3999  1F44                     	;# 
  4000  1F45                     	;# 
  4001  1F46                     	;# 
  4002  1F47                     	;# 
  4003  1F48                     	;# 
  4004  1F49                     	;# 
  4005  1F4A                     	;# 
  4006  1F4E                     	;# 
  4007  1F4F                     	;# 
  4008  1F50                     	;# 
  4009  1F51                     	;# 
  4010  1F52                     	;# 
  4011  1F53                     	;# 
  4012  1F54                     	;# 
  4013  1F55                     	;# 
  4014  1F65                     	;# 
  4015  1F68                     	;# 
  4016  1F69                     	;# 
  4017  1F6A                     	;# 
  4018  1F6B                     	;# 
  4019  1FE4                     	;# 
  4020  1FE5                     	;# 
  4021  1FE6                     	;# 
  4022  1FE7                     	;# 
  4023  1FE8                     	;# 
  4024  1FE8                     	;# 
  4025  1FE9                     	;# 
  4026  1FEA                     	;# 
  4027  1FEB                     	;# 
  4028  1FED                     	;# 
  4029  1FEE                     	;# 
  4030  1FEF                     	;_data
  4031                           
  4032                           	psect	idataBANK1
  4033  0003                     __pidataBANK1:	
  4034                           
  4035                           ;initializer for _g_screenRefresh
  4036  0003  3401               	retlw	1
  4037                           
  4038                           	psect	idataBANK3
  4039  0002                     __pidataBANK3:	
  4040                           
  4041                           ;initializer for statusView@prevSensorStat
  4042  0002  3401               	retlw	1
  4043                           
  4044                           	psect	idataBANK4
  4045  34C6                     __pidataBANK4:	
  4046                           
  4047                           ;initializer for OLED_print_xy@F7980
  4048  34C6  3400               	retlw	0
  4049  34C7  3440               	retlw	64
  4050  34C8  3414               	retlw	20
  4051  34C9  3454               	retlw	84
  4052                           
  4053                           ;initializer for OLED_setCursor@F7972
  4054  34CA  3400               	retlw	0
  4055  34CB  3440               	retlw	64
  4056  34CC  3414               	retlw	20
  4057  34CD  3454               	retlw	84
  4058                           
  4059                           	psect	idataBANK5
  4060  35C4                     __pidataBANK5:	
  4061                           
  4062                           ;initializer for OLED_loadSpecialChars@F7985
  4063  35C4  3418               	retlw	24
  4064  35C5  3418               	retlw	24
  4065  35C6  3403               	retlw	3
  4066  35C7  3404               	retlw	4
  4067  35C8  3404               	retlw	4
  4068  35C9  3404               	retlw	4
  4069  35CA  3403               	retlw	3
  4070  35CB  3400               	retlw	0
  4071  35CC  3400               	retlw	0
  4072  35CD  3400               	retlw	0
  4073  35CE  3400               	retlw	0
  4074  35CF  3404               	retlw	4
  4075  35D0  3400               	retlw	0
  4076  35D1  3400               	retlw	0
  4077  35D2  3400               	retlw	0
  4078  35D3  3400               	retlw	0
  4079  35D4  3401               	retlw	1
  4080  35D5  3401               	retlw	1
  4081  35D6  3405               	retlw	5
  4082  35D7  3409               	retlw	9
  4083  35D8  341F               	retlw	31
  4084  35D9  3408               	retlw	8
  4085  35DA  3404               	retlw	4
  4086  35DB  3400               	retlw	0
  4087  35DC  3400               	retlw	0
  4088  35DD  3410               	retlw	16
  4089  35DE  3418               	retlw	24
  4090  35DF  341C               	retlw	28
  4091  35E0  3418               	retlw	24
  4092  35E1  3410               	retlw	16
  4093  35E2  3400               	retlw	0
  4094  35E3  3400               	retlw	0
  4095                           
  4096                           	psect	stringtext1
  4097  3000                     __pstringtext1:	
  4098  3000                     _nextStateTbl:	
  4099  3000  3400               	retlw	0
  4100  3001  34FF               	retlw	255
  4101  3002  3401               	retlw	1
  4102  3003  3405               	retlw	5
  4103  3004  3400               	retlw	0
  4104  3005  3400               	retlw	0
  4105  3006  3401               	retlw	1
  4106  3007  34FF               	retlw	255
  4107  3008  3400               	retlw	0
  4108  3009  3402               	retlw	2
  4109  300A  3401               	retlw	1
  4110  300B  3401               	retlw	1
  4111  300C  3402               	retlw	2
  4112  300D  3400               	retlw	0
  4113  300E  3403               	retlw	3
  4114  300F  3401               	retlw	1
  4115  3010  3401               	retlw	1
  4116  3011  3402               	retlw	2
  4117  3012  3402               	retlw	2
  4118  3013  3401               	retlw	1
  4119  3014  3404               	retlw	4
  4120  3015  3401               	retlw	1
  4121  3016  3401               	retlw	1
  4122  3017  3402               	retlw	2
  4123  3018  3402               	retlw	2
  4124  3019  3402               	retlw	2
  4125  301A  3402               	retlw	2
  4126  301B  3401               	retlw	1
  4127  301C  3401               	retlw	1
  4128  301D  3402               	retlw	2
  4129  301E  3403               	retlw	3
  4130  301F  3400               	retlw	0
  4131  3020  3402               	retlw	2
  4132  3021  3402               	retlw	2
  4133  3022  3402               	retlw	2
  4134  3023  3403               	retlw	3
  4135  3024  3403               	retlw	3
  4136  3025  3401               	retlw	1
  4137  3026  3402               	retlw	2
  4138  3027  3402               	retlw	2
  4139  3028  3402               	retlw	2
  4140  3029  3402               	retlw	2
  4141  302A  3404               	retlw	4
  4142  302B  3400               	retlw	0
  4143  302C  3402               	retlw	2
  4144  302D  3402               	retlw	2
  4145  302E  3402               	retlw	2
  4146  302F  3404               	retlw	4
  4147  3030  3405               	retlw	5
  4148  3031  3400               	retlw	0
  4149  3032  3406               	retlw	6
  4150  3033  3400               	retlw	0
  4151  3034  3400               	retlw	0
  4152  3035  3405               	retlw	5
  4153  3036  3405               	retlw	5
  4154  3037  3401               	retlw	1
  4155  3038  3407               	retlw	7
  4156  3039  3400               	retlw	0
  4157  303A  3400               	retlw	0
  4158  303B  3405               	retlw	5
  4159  303C  3405               	retlw	5
  4160  303D  3402               	retlw	2
  4161  303E  3408               	retlw	8
  4162  303F  3400               	retlw	0
  4163  3040  3400               	retlw	0
  4164  3041  3405               	retlw	5
  4165  3042  3406               	retlw	6
  4166  3043  3400               	retlw	0
  4167  3044  3405               	retlw	5
  4168  3045  3405               	retlw	5
  4169  3046  3405               	retlw	5
  4170  3047  3406               	retlw	6
  4171  3048  3407               	retlw	7
  4172  3049  3400               	retlw	0
  4173  304A  3405               	retlw	5
  4174  304B  3405               	retlw	5
  4175  304C  3405               	retlw	5
  4176  304D  3407               	retlw	7
  4177  304E  3408               	retlw	8
  4178  304F  3400               	retlw	0
  4179  3050  3405               	retlw	5
  4180  3051  3405               	retlw	5
  4181  3052  3405               	retlw	5
  4182  3053  3408               	retlw	8
  4183  3054                     __end_of_nextStateTbl:	
  4184                           
  4185                           	psect	stringtext2
  4186  3825                     __pstringtext2:	
  4187  3825                     _transition_table:	
  4188  3825  3400               	retlw	0
  4189  3826  3404               	retlw	4
  4190  3827  3401               	retlw	1
  4191  3828  3400               	retlw	0
  4192  3829  3482               	retlw	130
  4193  382A  3400               	retlw	0
  4194  382B  3401               	retlw	1
  4195  382C  3400               	retlw	0
  4196  382D  3402               	retlw	2
  4197  382E  3403               	retlw	3
  4198  382F  3401               	retlw	1
  4199  3830  3400               	retlw	0
  4200  3831  3402               	retlw	2
  4201  3832  3403               	retlw	3
  4202  3833  3400               	retlw	0
  4203  3834  3480               	retlw	128
  4204  3835  3445               	retlw	69
  4205  3836  3404               	retlw	4
  4206  3837  3400               	retlw	0
  4207  3838  3400               	retlw	0
  4208  3839  3405               	retlw	5
  4209  383A  3404               	retlw	4
  4210  383B  3406               	retlw	6
  4211  383C  3400               	retlw	0
  4212  383D  3405               	retlw	5
  4213  383E  3400               	retlw	0
  4214  383F  3406               	retlw	6
  4215  3840  3440               	retlw	64
  4216  3841                     __end_of_transition_table:	
  4217                           
  4218                           	psect	stringtext3
  4219  3054                     __pstringtext3:	
  4220  3054                     _stateFuncTbl:	
  4221  3054  3400               	retlw	0
  4222  3055  34F0               	retlw	low _statusView
  4223  3056  3413               	retlw	high _statusView
  4224  3057  3401               	retlw	1
  4225  3058  343E               	retlw	low _channelView
  4226  3059  3405               	retlw	high _channelView
  4227  305A  3402               	retlw	2
  4228  305B  3429               	retlw	low _channelSetup
  4229  305C  3419               	retlw	high _channelSetup
  4230  305D  3403               	retlw	3
  4231  305E  340C               	retlw	low _setOutputPower
  4232  305F  3408               	retlw	high _setOutputPower
  4233  3060  3404               	retlw	4
  4234  3061  34DD               	retlw	low _setLensDia
  4235  3062  342E               	retlw	high _setLensDia
  4236  3063  3405               	retlw	5
  4237  3064  346B               	retlw	low _setup
  4238  3065  3421               	retlw	high _setup
  4239  3066  3406               	retlw	6
  4240  3067  341A               	retlw	low _setDPOffset
  4241  3068  342C               	retlw	high _setDPOffset
  4242  3069  3407               	retlw	7
  4243  306A  3488               	retlw	low _setSkyTemp
  4244  306B  342C               	retlw	high _setSkyTemp
  4245  306C  3408               	retlw	8
  4246  306D  34F6               	retlw	low _setFudgeFactor
  4247  306E  342C               	retlw	high _setFudgeFactor
  4248  306F                     __end_of_stateFuncTbl:	
  4249  0018                     _LATAbits	set	24
  4250  000C                     _PORTAbits	set	12
  4251  000B                     _INTCONbits	set	11
  4252  000E                     _PORTCbits	set	14
  4253  0014                     _TRISCbits	set	20
  4254  001A                     _LATCbits	set	26
  4255  000B                     _INTCON	set	11
  4256  0014                     _TRISC	set	20
  4257  0013                     _TRISB	set	19
  4258  0012                     _TRISA	set	18
  4259  0019                     _LATBbits	set	25
  4260  009B                     _ADRESL	set	155
  4261  009C                     _ADRESH	set	156
  4262  009E                     _ADCON1	set	158
  4263  009D                     _ADCON0bits	set	157
  4264  0119                     _RC1REG	set	281
  4265  011D                     _RC1STAbits	set	285
  4266  011A                     _TX1REG	set	282
  4267  011E                     _TX1STA	set	286
  4268  011D                     _RC1STA	set	285
  4269  011B                     _SPBRGL	set	283
  4270  011F                     _BAUD1CON	set	287
  4271  020C                     _TMR1	set	524
  4272  0211                     _T1CLK	set	529
  4273  020E                     _T1CON	set	526
  4274  059C                     _TMR0	set	1436
  4275  059F                     _T0CON1	set	1439
  4276  059E                     _T0CON0	set	1438
  4277  070F                     _PIR3bits	set	1807
  4278  0719                     _PIE3bits	set	1817
  4279  0710                     _PIR4bits	set	1808
  4280  071A                     _PIE4bits	set	1818
  4281  070C                     _PIR0bits	set	1804
  4282  0716                     _PIE0bits	set	1814
  4283  071A                     _PIE4	set	1818
  4284  0719                     _PIE3	set	1817
  4285  0716                     _PIE0	set	1814
  4286  088F                     _OSCCON3bits	set	2191
  4287  088D                     _OSCCON1	set	2189
  4288  0893                     _OSCFRQ	set	2195
  4289  1ECB                     _RX1DTPPSbits	set	7883
  4290  1F3F                     _IOCAFbits	set	7999
  4291  1F54                     _IOCCN	set	8020
  4292  1F3E                     _IOCAN	set	7998
  4293  1F3D                     _IOCAP	set	7997
  4294  1F4E                     _ANSELC	set	8014
  4295  1F43                     _ANSELB	set	8003
  4296  1F38                     _ANSELA	set	7992
  4297  1F26                     _RC6PPS	set	7974
  4298  306F                     STR_1:	
  4299  306F  3454               	retlw	84	;'T'
  4300  3070  3465               	retlw	101	;'e'
  4301  3071  346D               	retlw	109	;'m'
  4302  3072  3470               	retlw	112	;'p'
  4303  3073  3465               	retlw	101	;'e'
  4304  3074  3472               	retlw	114	;'r'
  4305  3075  3461               	retlw	97	;'a'
  4306  3076  3474               	retlw	116	;'t'
  4307  3077  3475               	retlw	117	;'u'
  4308  3078  3472               	retlw	114	;'r'
  4309  3079  3465               	retlw	101	;'e'
  4310  307A  3420               	retlw	32	;' '
  4311  307B  3452               	retlw	82	;'R'
  4312  307C  3465               	retlw	101	;'e'
  4313  307D  346C               	retlw	108	;'l'
  4314  307E  342E               	retlw	46	;'.'
  4315  307F  3468               	retlw	104	;'h'
  4316  3080  3475               	retlw	117	;'u'
  4317  3081  346D               	retlw	109	;'m'
  4318  3082  3469               	retlw	105	;'i'
  4319  3083  3464               	retlw	100	;'d'
  4320  3084  3469               	retlw	105	;'i'
  4321  3085  3474               	retlw	116	;'t'
  4322  3086  3479               	retlw	121	;'y'
  4323  3087  3444               	retlw	68	;'D'
  4324  3088  3465               	retlw	101	;'e'
  4325  3089  3477               	retlw	119	;'w'
  4326  308A  3470               	retlw	112	;'p'
  4327  308B  346F               	retlw	111	;'o'
  4328  308C  3469               	retlw	105	;'i'
  4329  308D  346E               	retlw	110	;'n'
  4330  308E  3474               	retlw	116	;'t'
  4331  308F  3420               	retlw	32	;' '
  4332  3090  3420               	retlw	32	;' '
  4333  3091  3420               	retlw	32	;' '
  4334  3092  3420               	retlw	32	;' '
  4335  3093  3442               	retlw	66	;'B'
  4336  3094  3461               	retlw	97	;'a'
  4337  3095  3474               	retlw	116	;'t'
  4338  3096  342E               	retlw	46	;'.'
  4339  3097  3420               	retlw	32	;' '
  4340  3098  3420               	retlw	32	;' '
  4341  3099  3420               	retlw	32	;' '
  4342  309A  3450               	retlw	80	;'P'
  4343  309B  346F               	retlw	111	;'o'
  4344  309C  3477               	retlw	119	;'w'
  4345  309D  3465               	retlw	101	;'e'
  4346  309E  3472               	retlw	114	;'r'
  4347  309F  3456               	retlw	86	;'V'
  4348  30A0  3465               	retlw	101	;'e'
  4349  30A1  3472               	retlw	114	;'r'
  4350  30A2  3473               	retlw	115	;'s'
  4351  30A3  3469               	retlw	105	;'i'
  4352  30A4  346F               	retlw	111	;'o'
  4353  30A5  346E               	retlw	110	;'n'
  4354  30A6  343A               	retlw	58	;':'
  4355  30A7  3400               	retlw	0
  4356                           
  4357                           	psect	stringtext4
  4358  3800                     __pstringtext4:	
  4359  3800                     STR_48:	
  4360  3800  3444               	retlw	68	;'D'
  4361  3801  3450               	retlw	80	;'P'
  4362  3802  3420               	retlw	32	;' '
  4363  3803  346F               	retlw	111	;'o'
  4364  3804  3466               	retlw	102	;'f'
  4365  3805  3466               	retlw	102	;'f'
  4366  3806  3473               	retlw	115	;'s'
  4367  3807  3465               	retlw	101	;'e'
  4368  3808  3474               	retlw	116	;'t'
  4369  3809  3420               	retlw	32	;' '
  4370  380A  3420               	retlw	32	;' '
  4371  380B  3420               	retlw	32	;' '
  4372  380C  3453               	retlw	83	;'S'
  4373  380D  346B               	retlw	107	;'k'
  4374  380E  3479               	retlw	121	;'y'
  4375  380F  3420               	retlw	32	;' '
  4376  3810  3474               	retlw	116	;'t'
  4377  3811  3465               	retlw	101	;'e'
  4378  3812  346D               	retlw	109	;'m'
  4379  3813  3470               	retlw	112	;'p'
  4380  3814  342E               	retlw	46	;'.'
  4381  3815  3420               	retlw	32	;' '
  4382  3816  3420               	retlw	32	;' '
  4383  3817  3420               	retlw	32	;' '
  4384  3818  3446               	retlw	70	;'F'
  4385  3819  3475               	retlw	117	;'u'
  4386  381A  3464               	retlw	100	;'d'
  4387  381B  3467               	retlw	103	;'g'
  4388  381C  3465               	retlw	101	;'e'
  4389  381D  3420               	retlw	32	;' '
  4390  381E  3466               	retlw	102	;'f'
  4391  381F  3461               	retlw	97	;'a'
  4392  3820  3463               	retlw	99	;'c'
  4393  3821  3474               	retlw	116	;'t'
  4394  3822  346F               	retlw	111	;'o'
  4395  3823  3472               	retlw	114	;'r'
  4396  3824  3400               	retlw	0
  4397                           
  4398                           	psect	stringtext5
  4399  3841                     __pstringtext5:	
  4400  3841                     STR_62:	
  4401  3841  3448               	retlw	72	;'H'
  4402  3842  3465               	retlw	101	;'e'
  4403  3843  3461               	retlw	97	;'a'
  4404  3844  3474               	retlw	116	;'t'
  4405  3845  3465               	retlw	101	;'e'
  4406  3846  3472               	retlw	114	;'r'
  4407  3847  3420               	retlw	32	;' '
  4408  3848  3420               	retlw	32	;' '
  4409  3849  3420               	retlw	32	;' '
  4410  384A  3420               	retlw	32	;' '
  4411  384B  3420               	retlw	32	;' '
  4412  384C  3420               	retlw	32	;' '
  4413  384D  3400               	retlw	0
  4414                           
  4415                           	psect	stringtext6
  4416  384E                     __pstringtext6:	
  4417  384E                     STR_74:	
  4418  384E  3453               	retlw	83	;'S'
  4419  384F  3465               	retlw	101	;'e'
  4420  3850  346E               	retlw	110	;'n'
  4421  3851  3473               	retlw	115	;'s'
  4422  3852  346F               	retlw	111	;'o'
  4423  3853  3472               	retlw	114	;'r'
  4424  3854  3420               	retlw	32	;' '
  4425  3855  3420               	retlw	32	;' '
  4426  3856  3420               	retlw	32	;' '
  4427  3857  3420               	retlw	32	;' '
  4428  3858  3420               	retlw	32	;' '
  4429  3859  3420               	retlw	32	;' '
  4430  385A  3400               	retlw	0
  4431                           
  4432                           	psect	stringtext7
  4433  385B                     __pstringtext7:	
  4434  385B                     STR_64:	
  4435  385B  344F               	retlw	79	;'O'
  4436  385C  3475               	retlw	117	;'u'
  4437  385D  3474               	retlw	116	;'t'
  4438  385E  3470               	retlw	112	;'p'
  4439  385F  3475               	retlw	117	;'u'
  4440  3860  3474               	retlw	116	;'t'
  4441  3861  3420               	retlw	32	;' '
  4442  3862  3420               	retlw	32	;' '
  4443  3863  3420               	retlw	32	;' '
  4444  3864  3420               	retlw	32	;' '
  4445  3865  3420               	retlw	32	;' '
  4446  3866  3420               	retlw	32	;' '
  4447  3867  3400               	retlw	0
  4448                           
  4449                           	psect	stringtext8
  4450  3868                     __pstringtext8:	
  4451  3868                     STR_83:	
  4452  3868  3420               	retlw	32	;' '
  4453  3869  3420               	retlw	32	;' '
  4454  386A  3420               	retlw	32	;' '
  4455  386B  3420               	retlw	32	;' '
  4456  386C  343A               	retlw	58	;':'
  4457  386D  342D               	retlw	45	;'-'
  4458  386E  3429               	retlw	41	;')'
  4459  386F  3420               	retlw	32	;' '
  4460  3870  3420               	retlw	32	;' '
  4461  3871  3420               	retlw	32	;' '
  4462  3872  3420               	retlw	32	;' '
  4463  3873  3420               	retlw	32	;' '
  4464  3874  3400               	retlw	0
  4465                           
  4466                           	psect	stringtext9
  4467  3875                     __pstringtext9:	
  4468  3875                     STR_63:	
  4469  3875  3472               	retlw	114	;'r'
  4470  3876  3465               	retlw	101	;'e'
  4471  3877  346D               	retlw	109	;'m'
  4472  3878  346F               	retlw	111	;'o'
  4473  3879  3476               	retlw	118	;'v'
  4474  387A  3465               	retlw	101	;'e'
  4475  387B  3464               	retlw	100	;'d'
  4476  387C  3420               	retlw	32	;' '
  4477  387D  3420               	retlw	32	;' '
  4478  387E  3420               	retlw	32	;' '
  4479  387F  3420               	retlw	32	;' '
  4480  3880  3420               	retlw	32	;' '
  4481  3881  3400               	retlw	0
  4482                           
  4483                           	psect	stringtext10
  4484  3882                     __pstringtext10:	
  4485  3882                     STR_84:	
  4486  3882  3455               	retlw	85	;'U'
  4487  3883  346E               	retlw	110	;'n'
  4488  3884  346B               	retlw	107	;'k'
  4489  3885  346E               	retlw	110	;'n'
  4490  3886  346F               	retlw	111	;'o'
  4491  3887  3477               	retlw	119	;'w'
  4492  3888  346E               	retlw	110	;'n'
  4493  3889  3420               	retlw	32	;' '
  4494  388A  3420               	retlw	32	;' '
  4495  388B  3420               	retlw	32	;' '
  4496  388C  3420               	retlw	32	;' '
  4497  388D  3420               	retlw	32	;' '
  4498  388E  3400               	retlw	0
  4499                           
  4500                           	psect	stringtext11
  4501  388F                     __pstringtext11:	
  4502  388F                     STR_75:	
  4503  388F  3474               	retlw	116	;'t'
  4504  3890  3469               	retlw	105	;'i'
  4505  3891  346D               	retlw	109	;'m'
  4506  3892  3465               	retlw	101	;'e'
  4507  3893  346F               	retlw	111	;'o'
  4508  3894  3475               	retlw	117	;'u'
  4509  3895  3474               	retlw	116	;'t'
  4510  3896  3420               	retlw	32	;' '
  4511  3897  3420               	retlw	32	;' '
  4512  3898  3420               	retlw	32	;' '
  4513  3899  3420               	retlw	32	;' '
  4514  389A  3420               	retlw	32	;' '
  4515  389B  3400               	retlw	0
  4516                           
  4517                           	psect	stringtext12
  4518  389C                     __pstringtext12:	
  4519  389C                     STR_65:	
  4520  389C  3473               	retlw	115	;'s'
  4521  389D  3468               	retlw	104	;'h'
  4522  389E  346F               	retlw	111	;'o'
  4523  389F  3472               	retlw	114	;'r'
  4524  38A0  3474               	retlw	116	;'t'
  4525  38A1  3465               	retlw	101	;'e'
  4526  38A2  3464               	retlw	100	;'d'
  4527  38A3  3421               	retlw	33	;'!'
  4528  38A4  3420               	retlw	32	;' '
  4529  38A5  3420               	retlw	32	;' '
  4530  38A6  3420               	retlw	32	;' '
  4531  38A7  3420               	retlw	32	;' '
  4532  38A8  3400               	retlw	0
  4533                           
  4534                           	psect	stringtext13
  4535  38A9                     __pstringtext13:	
  4536  38A9                     STR_73:	
  4537  38A9  3474               	retlw	116	;'t'
  4538  38AA  346F               	retlw	111	;'o'
  4539  38AB  346F               	retlw	111	;'o'
  4540  38AC  3420               	retlw	32	;' '
  4541  38AD  346C               	retlw	108	;'l'
  4542  38AE  346F               	retlw	111	;'o'
  4543  38AF  3477               	retlw	119	;'w'
  4544  38B0  3421               	retlw	33	;'!'
  4545  38B1  3420               	retlw	32	;' '
  4546  38B2  3420               	retlw	32	;' '
  4547  38B3  3420               	retlw	32	;' '
  4548  38B4  3420               	retlw	32	;' '
  4549  38B5  3400               	retlw	0
  4550                           
  4551                           	psect	stringtext14
  4552  38B6                     __pstringtext14:	
  4553  38B6                     STR_77:	
  4554  38B6  3463               	retlw	99	;'c'
  4555  38B7  3468               	retlw	104	;'h'
  4556  38B8  3465               	retlw	101	;'e'
  4557  38B9  3463               	retlw	99	;'c'
  4558  38BA  346B               	retlw	107	;'k'
  4559  38BB  3473               	retlw	115	;'s'
  4560  38BC  3475               	retlw	117	;'u'
  4561  38BD  346D               	retlw	109	;'m'
  4562  38BE  3420               	retlw	32	;' '
  4563  38BF  3420               	retlw	32	;' '
  4564  38C0  3420               	retlw	32	;' '
  4565  38C1  3420               	retlw	32	;' '
  4566  38C2  3400               	retlw	0
  4567                           
  4568                           	psect	stringtext15
  4569  38C3                     __pstringtext15:	
  4570  38C3                     STR_67:	
  4571  38C3  3464               	retlw	100	;'d'
  4572  38C4  3465               	retlw	101	;'e'
  4573  38C5  3474               	retlw	116	;'t'
  4574  38C6  3465               	retlw	101	;'e'
  4575  38C7  3463               	retlw	99	;'c'
  4576  38C8  3474               	retlw	116	;'t'
  4577  38C9  3465               	retlw	101	;'e'
  4578  38CA  3464               	retlw	100	;'d'
  4579  38CB  3421               	retlw	33	;'!'
  4580  38CC  3420               	retlw	32	;' '
  4581  38CD  3420               	retlw	32	;' '
  4582  38CE  3420               	retlw	32	;' '
  4583  38CF  3400               	retlw	0
  4584                           
  4585                           	psect	stringtext16
  4586  38D0                     __pstringtext16:	
  4587  38D0                     STR_71:	
  4588  38D0  3474               	retlw	116	;'t'
  4589  38D1  346F               	retlw	111	;'o'
  4590  38D2  346F               	retlw	111	;'o'
  4591  38D3  3420               	retlw	32	;' '
  4592  38D4  3468               	retlw	104	;'h'
  4593  38D5  3469               	retlw	105	;'i'
  4594  38D6  3467               	retlw	103	;'g'
  4595  38D7  3468               	retlw	104	;'h'
  4596  38D8  3421               	retlw	33	;'!'
  4597  38D9  3420               	retlw	32	;' '
  4598  38DA  3420               	retlw	32	;' '
  4599  38DB  3420               	retlw	32	;' '
  4600  38DC  3400               	retlw	0
  4601                           
  4602                           	psect	stringtext17
  4603  38DD                     __pstringtext17:	
  4604  38DD                     STR_85:	
  4605  38DD  3465               	retlw	101	;'e'
  4606  38DE  3472               	retlw	114	;'r'
  4607  38DF  3472               	retlw	114	;'r'
  4608  38E0  346F               	retlw	111	;'o'
  4609  38E1  3472               	retlw	114	;'r'
  4610  38E2  3420               	retlw	32	;' '
  4611  38E3  3463               	retlw	99	;'c'
  4612  38E4  346F               	retlw	111	;'o'
  4613  38E5  3464               	retlw	100	;'d'
  4614  38E6  3465               	retlw	101	;'e'
  4615  38E7  3420               	retlw	32	;' '
  4616  38E8  3420               	retlw	32	;' '
  4617  38E9  3400               	retlw	0
  4618                           
  4619                           	psect	stringtext18
  4620  38EA                     __pstringtext18:	
  4621  38EA                     STR_78:	
  4622  38EA  344F               	retlw	79	;'O'
  4623  38EB  3456               	retlw	86	;'V'
  4624  38EC  3445               	retlw	69	;'E'
  4625  38ED  3452               	retlw	82	;'R'
  4626  38EE  3443               	retlw	67	;'C'
  4627  38EF  3455               	retlw	85	;'U'
  4628  38F0  3452               	retlw	82	;'R'
  4629  38F1  3452               	retlw	82	;'R'
  4630  38F2  3445               	retlw	69	;'E'
  4631  38F3  344E               	retlw	78	;'N'
  4632  38F4  3454               	retlw	84	;'T'
  4633  38F5  3420               	retlw	32	;' '
  4634  38F6  3400               	retlw	0
  4635                           
  4636                           	psect	stringtext19
  4637  38F7                     __pstringtext19:	
  4638  38F7                     STR_82:	
  4639  38F7  344D               	retlw	77	;'M'
  4640  38F8  3465               	retlw	101	;'e'
  4641  38F9  346E               	retlw	110	;'n'
  4642  38FA  3475               	retlw	117	;'u'
  4643  38FB  3420               	retlw	32	;' '
  4644  38FC  3462               	retlw	98	;'b'
  4645  38FD  3472               	retlw	114	;'r'
  4646  38FE  346F               	retlw	111	;'o'
  4647  38FF  346B               	retlw	107	;'k'
  4648  3900  3465               	retlw	101	;'e'
  4649  3901  346E               	retlw	110	;'n'
  4650  3902  3420               	retlw	32	;' '
  4651  3903  3400               	retlw	0
  4652                           
  4653                           	psect	stringtext20
  4654  3904                     __pstringtext20:	
  4655  3904                     STR_66:	
  4656  3904  344F               	retlw	79	;'O'
  4657  3905  3476               	retlw	118	;'v'
  4658  3906  3465               	retlw	101	;'e'
  4659  3907  3472               	retlw	114	;'r'
  4660  3908  3463               	retlw	99	;'c'
  4661  3909  3475               	retlw	117	;'u'
  4662  390A  3472               	retlw	114	;'r'
  4663  390B  3472               	retlw	114	;'r'
  4664  390C  3465               	retlw	101	;'e'
  4665  390D  346E               	retlw	110	;'n'
  4666  390E  3474               	retlw	116	;'t'
  4667  390F  3420               	retlw	32	;' '
  4668  3910  3400               	retlw	0
  4669                           
  4670                           	psect	stringtext21
  4671  3911                     __pstringtext21:	
  4672  3911                     STR_69:	
  4673  3911  346F               	retlw	111	;'o'
  4674  3912  3476               	retlw	118	;'v'
  4675  3913  3465               	retlw	101	;'e'
  4676  3914  3472               	retlw	114	;'r'
  4677  3915  3463               	retlw	99	;'c'
  4678  3916  3475               	retlw	117	;'u'
  4679  3917  3472               	retlw	114	;'r'
  4680  3918  3472               	retlw	114	;'r'
  4681  3919  3465               	retlw	101	;'e'
  4682  391A  346E               	retlw	110	;'n'
  4683  391B  3474               	retlw	116	;'t'
  4684  391C  3420               	retlw	32	;' '
  4685  391D  3400               	retlw	0
  4686                           
  4687                           	psect	stringtext22
  4688  391E                     __pstringtext22:	
  4689  391E                     STR_70:	
  4690  391E  3453               	retlw	83	;'S'
  4691  391F  3475               	retlw	117	;'u'
  4692  3920  3470               	retlw	112	;'p'
  4693  3921  3470               	retlw	112	;'p'
  4694  3922  346C               	retlw	108	;'l'
  4695  3923  3479               	retlw	121	;'y'
  4696  3924  3420               	retlw	32	;' '
  4697  3925  3476               	retlw	118	;'v'
  4698  3926  346F               	retlw	111	;'o'
  4699  3927  346C               	retlw	108	;'l'
  4700  3928  3474               	retlw	116	;'t'
  4701  3929  342E               	retlw	46	;'.'
  4702  392A  3400               	retlw	0
  4703                           
  4704                           	psect	stringtext23
  4705  392B                     __pstringtext23:	
  4706  392B                     STR_79:	
  4707  392B  3454               	retlw	84	;'T'
  4708  392C  3455               	retlw	85	;'U'
  4709  392D  3452               	retlw	82	;'R'
  4710  392E  344E               	retlw	78	;'N'
  4711  392F  3420               	retlw	32	;' '
  4712  3930  344F               	retlw	79	;'O'
  4713  3931  3446               	retlw	70	;'F'
  4714  3932  3446               	retlw	70	;'F'
  4715  3933  3420               	retlw	32	;' '
  4716  3934  344E               	retlw	78	;'N'
  4717  3935  344F               	retlw	79	;'O'
  4718  3936  3457               	retlw	87	;'W'
  4719  3937  3400               	retlw	0
  4720                           
  4721                           	psect	stringtext24
  4722  3938                     __pstringtext24:	
  4723  3938                     STR_76:	
  4724  3938  3453               	retlw	83	;'S'
  4725  3939  3465               	retlw	101	;'e'
  4726  393A  346E               	retlw	110	;'n'
  4727  393B  3473               	retlw	115	;'s'
  4728  393C  346F               	retlw	111	;'o'
  4729  393D  3472               	retlw	114	;'r'
  4730  393E  3420               	retlw	32	;' '
  4731  393F  3477               	retlw	119	;'w'
  4732  3940  3472               	retlw	114	;'r'
  4733  3941  346F               	retlw	111	;'o'
  4734  3942  346E               	retlw	110	;'n'
  4735  3943  3467               	retlw	103	;'g'
  4736  3944  3400               	retlw	0
  4737                           
  4738                           	psect	stringtext25
  4739  3945                     __pstringtext25:	
  4740  3945                     STR_81:	
  4741  3945  3450               	retlw	80	;'P'
  4742  3946  346C               	retlw	108	;'l'
  4743  3947  3465               	retlw	101	;'e'
  4744  3948  3461               	retlw	97	;'a'
  4745  3949  3473               	retlw	115	;'s'
  4746  394A  3465               	retlw	101	;'e'
  4747  394B  3420               	retlw	32	;' '
  4748  394C  3463               	retlw	99	;'c'
  4749  394D  3468               	retlw	104	;'h'
  4750  394E  3465               	retlw	101	;'e'
  4751  394F  3463               	retlw	99	;'c'
  4752  3950  346B               	retlw	107	;'k'
  4753  3951  3400               	retlw	0
  4754                           
  4755                           	psect	stringtext26
  4756  3952                     __pstringtext26:	
  4757  3952                     STR_28:	
  4758  3952  344E               	retlw	78	;'N'
  4759  3953  346F               	retlw	111	;'o'
  4760  3954  3474               	retlw	116	;'t'
  4761  3955  3420               	retlw	32	;' '
  4762  3956  3420               	retlw	32	;' '
  4763  3957  3420               	retlw	32	;' '
  4764  3958  3420               	retlw	32	;' '
  4765  3959  3420               	retlw	32	;' '
  4766  395A  3420               	retlw	32	;' '
  4767  395B  3420               	retlw	32	;' '
  4768  395C  3420               	retlw	32	;' '
  4769  395D  3420               	retlw	32	;' '
  4770  395E  3400               	retlw	0
  4771                           
  4772                           	psect	stringtext27
  4773  395F                     __pstringtext27:	
  4774  395F                     STR_32:	
  4775  395F  3452               	retlw	82	;'R'
  4776  3960  3465               	retlw	101	;'e'
  4777  3961  3473               	retlw	115	;'s'
  4778  3962  3465               	retlw	101	;'e'
  4779  3963  3474               	retlw	116	;'t'
  4780  3964  3420               	retlw	32	;' '
  4781  3965  3420               	retlw	32	;' '
  4782  3966  3420               	retlw	32	;' '
  4783  3967  3420               	retlw	32	;' '
  4784  3968  3420               	retlw	32	;' '
  4785  3969  3420               	retlw	32	;' '
  4786  396A  3420               	retlw	32	;' '
  4787  396B  3400               	retlw	0
  4788                           
  4789                           	psect	stringtext28
  4790  396C                     __pstringtext28:	
  4791  396C                     STR_30:	
  4792  396C  3454               	retlw	84	;'T'
  4793  396D  3465               	retlw	101	;'e'
  4794  396E  3473               	retlw	115	;'s'
  4795  396F  3474               	retlw	116	;'t'
  4796  3970  3469               	retlw	105	;'i'
  4797  3971  346E               	retlw	110	;'n'
  4798  3972  3467               	retlw	103	;'g'
  4799  3973  3420               	retlw	32	;' '
  4800  3974  3420               	retlw	32	;' '
  4801  3975  3420               	retlw	32	;' '
  4802  3976  3420               	retlw	32	;' '
  4803  3977  3420               	retlw	32	;' '
  4804  3978  3400               	retlw	0
  4805                           
  4806                           	psect	stringtext29
  4807  3979                     __pstringtext29:	
  4808  3979                     STR_33:	
  4809  3979  3463               	retlw	99	;'c'
  4810  397A  3468               	retlw	104	;'h'
  4811  397B  3461               	retlw	97	;'a'
  4812  397C  346E               	retlw	110	;'n'
  4813  397D  346E               	retlw	110	;'n'
  4814  397E  3465               	retlw	101	;'e'
  4815  397F  346C               	retlw	108	;'l'
  4816  3980  3420               	retlw	32	;' '
  4817  3981  3420               	retlw	32	;' '
  4818  3982  3420               	retlw	32	;' '
  4819  3983  3420               	retlw	32	;' '
  4820  3984  3420               	retlw	32	;' '
  4821  3985  3400               	retlw	0
  4822                           
  4823                           	psect	stringtext30
  4824  3986                     __pstringtext30:	
  4825  3986                     STR_19:	
  4826  3986  3453               	retlw	83	;'S'
  4827  3987  3468               	retlw	104	;'h'
  4828  3988  346F               	retlw	111	;'o'
  4829  3989  3472               	retlw	114	;'r'
  4830  398A  3474               	retlw	116	;'t'
  4831  398B  3465               	retlw	101	;'e'
  4832  398C  3464               	retlw	100	;'d'
  4833  398D  3421               	retlw	33	;'!'
  4834  398E  3420               	retlw	32	;' '
  4835  398F  3420               	retlw	32	;' '
  4836  3990  3420               	retlw	32	;' '
  4837  3991  3420               	retlw	32	;' '
  4838  3992  3400               	retlw	0
  4839                           
  4840                           	psect	stringtext31
  4841  3993                     __pstringtext31:	
  4842  3993                     STR_14:	
  4843  3993  3444               	retlw	68	;'D'
  4844  3994  3469               	retlw	105	;'i'
  4845  3995  3473               	retlw	115	;'s'
  4846  3996  3461               	retlw	97	;'a'
  4847  3997  3462               	retlw	98	;'b'
  4848  3998  346C               	retlw	108	;'l'
  4849  3999  3465               	retlw	101	;'e'
  4850  399A  3464               	retlw	100	;'d'
  4851  399B  3420               	retlw	32	;' '
  4852  399C  3420               	retlw	32	;' '
  4853  399D  3420               	retlw	32	;' '
  4854  399E  3420               	retlw	32	;' '
  4855  399F  3400               	retlw	0
  4856                           
  4857                           	psect	stringtext32
  4858  39A0                     __pstringtext32:	
  4859  39A0                     STR_31:	
  4860  39A0  3468               	retlw	104	;'h'
  4861  39A1  3465               	retlw	101	;'e'
  4862  39A2  3461               	retlw	97	;'a'
  4863  39A3  3474               	retlw	116	;'t'
  4864  39A4  3465               	retlw	101	;'e'
  4865  39A5  3472               	retlw	114	;'r'
  4866  39A6  342E               	retlw	46	;'.'
  4867  39A7  342E               	retlw	46	;'.'
  4868  39A8  342E               	retlw	46	;'.'
  4869  39A9  3420               	retlw	32	;' '
  4870  39AA  3420               	retlw	32	;' '
  4871  39AB  3420               	retlw	32	;' '
  4872  39AC  3400               	retlw	0
  4873                           
  4874                           	psect	stringtext33
  4875  39AD                     __pstringtext33:	
  4876  39AD                     STR_56:	
  4877  39AD  3453               	retlw	83	;'S'
  4878  39AE  346B               	retlw	107	;'k'
  4879  39AF  3479               	retlw	121	;'y'
  4880  39B0  3420               	retlw	32	;' '
  4881  39B1  3474               	retlw	116	;'t'
  4882  39B2  3465               	retlw	101	;'e'
  4883  39B3  346D               	retlw	109	;'m'
  4884  39B4  3470               	retlw	112	;'p'
  4885  39B5  342E               	retlw	46	;'.'
  4886  39B6  3420               	retlw	32	;' '
  4887  39B7  3420               	retlw	32	;' '
  4888  39B8  3420               	retlw	32	;' '
  4889  39B9  3400               	retlw	0
  4890                           
  4891                           	psect	stringtext34
  4892  39BA                     __pstringtext34:	
  4893  39BA                     STR_29:	
  4894  39BA  3463               	retlw	99	;'c'
  4895  39BB  346F               	retlw	111	;'o'
  4896  39BC  346E               	retlw	110	;'n'
  4897  39BD  346E               	retlw	110	;'n'
  4898  39BE  3465               	retlw	101	;'e'
  4899  39BF  3463               	retlw	99	;'c'
  4900  39C0  3474               	retlw	116	;'t'
  4901  39C1  3465               	retlw	101	;'e'
  4902  39C2  3464               	retlw	100	;'d'
  4903  39C3  3420               	retlw	32	;' '
  4904  39C4  3420               	retlw	32	;' '
  4905  39C5  3420               	retlw	32	;' '
  4906  39C6  3400               	retlw	0
  4907                           
  4908                           	psect	stringtext35
  4909  39C7                     __pstringtext35:	
  4910  39C7                     STR_53:	
  4911  39C7  3444               	retlw	68	;'D'
  4912  39C8  3450               	retlw	80	;'P'
  4913  39C9  3420               	retlw	32	;' '
  4914  39CA  346F               	retlw	111	;'o'
  4915  39CB  3466               	retlw	102	;'f'
  4916  39CC  3466               	retlw	102	;'f'
  4917  39CD  3473               	retlw	115	;'s'
  4918  39CE  3465               	retlw	101	;'e'
  4919  39CF  3474               	retlw	116	;'t'
  4920  39D0  3420               	retlw	32	;' '
  4921  39D1  3420               	retlw	32	;' '
  4922  39D2  3420               	retlw	32	;' '
  4923  39D3  3400               	retlw	0
  4924                           
  4925                           	psect	stringtext36
  4926  39D4                     __pstringtext36:	
  4927  39D4                     STR_34:	
  4928  39D4  344C               	retlw	76	;'L'
  4929  39D5  3465               	retlw	101	;'e'
  4930  39D6  346E               	retlw	110	;'n'
  4931  39D7  3473               	retlw	115	;'s'
  4932  39D8  3420               	retlw	32	;' '
  4933  39D9  3464               	retlw	100	;'d'
  4934  39DA  3469               	retlw	105	;'i'
  4935  39DB  3461               	retlw	97	;'a'
  4936  39DC  346D               	retlw	109	;'m'
  4937  39DD  342E               	retlw	46	;'.'
  4938  39DE  3420               	retlw	32	;' '
  4939  39DF  3420               	retlw	32	;' '
  4940  39E0  3400               	retlw	0
  4941                           
  4942                           	psect	stringtext37
  4943  39E1                     __pstringtext37:	
  4944  39E1                     STR_43:	
  4945  39E1  3448               	retlw	72	;'H'
  4946  39E2  346F               	retlw	111	;'o'
  4947  39E3  346C               	retlw	108	;'l'
  4948  39E4  3464               	retlw	100	;'d'
  4949  39E5  3420               	retlw	32	;' '
  4950  39E6  3462               	retlw	98	;'b'
  4951  39E7  3475               	retlw	117	;'u'
  4952  39E8  3474               	retlw	116	;'t'
  4953  39E9  3474               	retlw	116	;'t'
  4954  39EA  346F               	retlw	111	;'o'
  4955  39EB  346E               	retlw	110	;'n'
  4956  39EC  3420               	retlw	32	;' '
  4957  39ED  3400               	retlw	0
  4958                           
  4959                           	psect	stringtext38
  4960  39EE                     __pstringtext38:	
  4961  39EE                     STR_13:	
  4962  39EE  3450               	retlw	80	;'P'
  4963  39EF  346C               	retlw	108	;'l'
  4964  39F0  3465               	retlw	101	;'e'
  4965  39F1  3461               	retlw	97	;'a'
  4966  39F2  3473               	retlw	115	;'s'
  4967  39F3  3465               	retlw	101	;'e'
  4968  39F4  3420               	retlw	32	;' '
  4969  39F5  3477               	retlw	119	;'w'
  4970  39F6  3461               	retlw	97	;'a'
  4971  39F7  3469               	retlw	105	;'i'
  4972  39F8  3474               	retlw	116	;'t'
  4973  39F9  3421               	retlw	33	;'!'
  4974  39FA  3400               	retlw	0
  4975                           
  4976                           	psect	stringtext39
  4977  39FB                     __pstringtext39:	
  4978  39FB                     STR_20:	
  4979  39FB  344F               	retlw	79	;'O'
  4980  39FC  3476               	retlw	118	;'v'
  4981  39FD  3465               	retlw	101	;'e'
  4982  39FE  3472               	retlw	114	;'r'
  4983  39FF  3463               	retlw	99	;'c'
  4984  3A00  3475               	retlw	117	;'u'
  4985  3A01  3472               	retlw	114	;'r'
  4986  3A02  3472               	retlw	114	;'r'
  4987  3A03  3465               	retlw	101	;'e'
  4988  3A04  346E               	retlw	110	;'n'
  4989  3A05  3474               	retlw	116	;'t'
  4990  3A06  3421               	retlw	33	;'!'
  4991  3A07  3400               	retlw	0
  4992                           
  4993                           	psect	stringtext40
  4994  3A08                     __pstringtext40:	
  4995  3A08                     STR_18:	
  4996  3A08  3444               	retlw	68	;'D'
  4997  3A09  3469               	retlw	105	;'i'
  4998  3A0A  3473               	retlw	115	;'s'
  4999  3A0B  3463               	retlw	99	;'c'
  5000  3A0C  346F               	retlw	111	;'o'
  5001  3A0D  346E               	retlw	110	;'n'
  5002  3A0E  346E               	retlw	110	;'n'
  5003  3A0F  3465               	retlw	101	;'e'
  5004  3A10  3463               	retlw	99	;'c'
  5005  3A11  3474               	retlw	116	;'t'
  5006  3A12  3465               	retlw	101	;'e'
  5007  3A13  3464               	retlw	100	;'d'
  5008  3A14  3400               	retlw	0
  5009                           
  5010                           	psect	stringtext41
  5011  3A15                     __pstringtext41:	
  5012  3A15                     STR_44:	
  5013  3A15  3474               	retlw	116	;'t'
  5014  3A16  346F               	retlw	111	;'o'
  5015  3A17  3420               	retlw	32	;' '
  5016  3A18  3472               	retlw	114	;'r'
  5017  3A19  3465               	retlw	101	;'e'
  5018  3A1A  342D               	retlw	45	;'-'
  5019  3A1B  3465               	retlw	101	;'e'
  5020  3A1C  346E               	retlw	110	;'n'
  5021  3A1D  3461               	retlw	97	;'a'
  5022  3A1E  3462               	retlw	98	;'b'
  5023  3A1F  346C               	retlw	108	;'l'
  5024  3A20  3465               	retlw	101	;'e'
  5025  3A21  3400               	retlw	0
  5026                           
  5027                           	psect	stringtext42
  5028  3A22                     __pstringtext42:	
  5029  3A22                     STR_21:	
  5030  3A22  344F               	retlw	79	;'O'
  5031  3A23  346E               	retlw	110	;'n'
  5032  3A24  3464               	retlw	100	;'d'
  5033  3A25  3472               	retlw	114	;'r'
  5034  3A26  3465               	retlw	101	;'e'
  5035  3A27  3453               	retlw	83	;'S'
  5036  3A28  3470               	retlw	112	;'p'
  5037  3A29  3465               	retlw	101	;'e'
  5038  3A2A  3463               	retlw	99	;'c'
  5039  3A2B  3469               	retlw	105	;'i'
  5040  3A2C  3461               	retlw	97	;'a'
  5041  3A2D  346C               	retlw	108	;'l'
  5042  3A2E  3400               	retlw	0
  5043                           
  5044                           	psect	stringtext43
  5045  3A2F                     __pstringtext43:	
  5046  3A2F                     STR_22:	
  5047  3A2F  344F               	retlw	79	;'O'
  5048  3A30  3475               	retlw	117	;'u'
  5049  3A31  3474               	retlw	116	;'t'
  5050  3A32  3470               	retlw	112	;'p'
  5051  3A33  3475               	retlw	117	;'u'
  5052  3A34  3474               	retlw	116	;'t'
  5053  3A35  3420               	retlw	32	;' '
  5054  3A36  3470               	retlw	112	;'p'
  5055  3A37  346F               	retlw	111	;'o'
  5056  3A38  3477               	retlw	119	;'w'
  5057  3A39  3465               	retlw	101	;'e'
  5058  3A3A  3472               	retlw	114	;'r'
  5059  3A3B  3400               	retlw	0
  5060                           
  5061                           	psect	stringtext44
  5062  3A3C                     __pstringtext44:	
  5063  3A3C                     STR_86:	
  5064  3A3C  3454               	retlw	84	;'T'
  5065  3A3D  3455               	retlw	85	;'U'
  5066  3A3E  3452               	retlw	82	;'R'
  5067  3A3F  344E               	retlw	78	;'N'
  5068  3A40  3449               	retlw	73	;'I'
  5069  3A41  344E               	retlw	78	;'N'
  5070  3A42  3447               	retlw	71	;'G'
  5071  3A43  3420               	retlw	32	;' '
  5072  3A44  344F               	retlw	79	;'O'
  5073  3A45  3446               	retlw	70	;'F'
  5074  3A46  3446               	retlw	70	;'F'
  5075  3A47  3400               	retlw	0
  5076                           
  5077                           	psect	stringtext45
  5078  3A48                     __pstringtext45:	
  5079  3A48                     STR_51:	
  5080  3A48  3401               	retlw	1
  5081  3A49  3420               	retlw	32	;' '
  5082  3A4A  3420               	retlw	32	;' '
  5083  3A4B  3420               	retlw	32	;' '
  5084  3A4C  3420               	retlw	32	;' '
  5085  3A4D  3420               	retlw	32	;' '
  5086  3A4E  3420               	retlw	32	;' '
  5087  3A4F  3420               	retlw	32	;' '
  5088  3A50  3420               	retlw	32	;' '
  5089  3A51  3400               	retlw	0
  5090                           
  5091                           	psect	stringtext46
  5092  3A52                     __pstringtext46:	
  5093  3A52                     STR_58:	
  5094  3A52  3401               	retlw	1
  5095  3A53  3420               	retlw	32	;' '
  5096  3A54  3403               	retlw	3
  5097  3A55  3420               	retlw	32	;' '
  5098  3A56  3420               	retlw	32	;' '
  5099  3A57  3420               	retlw	32	;' '
  5100  3A58  3420               	retlw	32	;' '
  5101  3A59  3420               	retlw	32	;' '
  5102  3A5A  3400               	retlw	0
  5103                           
  5104                           	psect	stringtext47
  5105  3A5B                     __pstringtext47:	
  5106  3A5B                     STR_61:	
  5107  3A5B  3420               	retlw	32	;' '
  5108  3A5C  3403               	retlw	3
  5109  3A5D  3420               	retlw	32	;' '
  5110  3A5E  3420               	retlw	32	;' '
  5111  3A5F  3420               	retlw	32	;' '
  5112  3A60  3420               	retlw	32	;' '
  5113  3A61  3420               	retlw	32	;' '
  5114  3A62  3420               	retlw	32	;' '
  5115  3A63  3400               	retlw	0
  5116                           
  5117                           	psect	stringtext48
  5118  3A64                     __pstringtext48:	
  5119  3A64                     STR_17:	
  5120  3A64  3457               	retlw	87	;'W'
  5121  3A65  3420               	retlw	32	;' '
  5122  3A66  346D               	retlw	109	;'m'
  5123  3A67  3461               	retlw	97	;'a'
  5124  3A68  346E               	retlw	110	;'n'
  5125  3A69  3475               	retlw	117	;'u'
  5126  3A6A  3461               	retlw	97	;'a'
  5127  3A6B  346C               	retlw	108	;'l'
  5128  3A6C  3400               	retlw	0
  5129                           
  5130                           	psect	stringtext49
  5131  3A6D                     __pstringtext49:	
  5132  3A6D                     STR_47:	
  5133  3A6D  3420               	retlw	32	;' '
  5134  3A6E  3469               	retlw	105	;'i'
  5135  3A6F  346E               	retlw	110	;'n'
  5136  3A70  3463               	retlw	99	;'c'
  5137  3A71  3468               	retlw	104	;'h'
  5138  3A72  3420               	retlw	32	;' '
  5139  3A73  3403               	retlw	3
  5140  3A74  3400               	retlw	0
  5141                           
  5142                           	psect	stringtext50
  5143  3A75                     __pstringtext50:	
  5144  3A75                     STR_42:	
  5145  3A75  3457               	retlw	87	;'W'
  5146  3A76  3420               	retlw	32	;' '
  5147  3A77  346D               	retlw	109	;'m'
  5148  3A78  3461               	retlw	97	;'a'
  5149  3A79  346E               	retlw	110	;'n'
  5150  3A7A  342E               	retlw	46	;'.'
  5151  3A7B  3403               	retlw	3
  5152  3A7C  3400               	retlw	0
  5153                           
  5154                           	psect	stringtext51
  5155  3A7D                     __pstringtext51:	
  5156  3A7D                     STR_5:	
  5157  3A7D  3401               	retlw	1
  5158  3A7E  3420               	retlw	32	;' '
  5159  3A7F  3420               	retlw	32	;' '
  5160  3A80  3420               	retlw	32	;' '
  5161  3A81  3420               	retlw	32	;' '
  5162  3A82  3420               	retlw	32	;' '
  5163  3A83  3420               	retlw	32	;' '
  5164  3A84  3400               	retlw	0
  5165                           
  5166                           	psect	stringtext52
  5167  3A85                     __pstringtext52:	
  5168  3A85                     STR_24:	
  5169  3A85  3420               	retlw	32	;' '
  5170  3A86  346F               	retlw	111	;'o'
  5171  3A87  3466               	retlw	102	;'f'
  5172  3A88  3466               	retlw	102	;'f'
  5173  3A89  3420               	retlw	32	;' '
  5174  3A8A  3420               	retlw	32	;' '
  5175  3A8B  3420               	retlw	32	;' '
  5176  3A8C  3400               	retlw	0
  5177                           
  5178                           	psect	stringtext53
  5179  3A8D                     __pstringtext53:	
  5180  3A8D                     STR_35:	
  5181  3A8D  3420               	retlw	32	;' '
  5182  3A8E  3469               	retlw	105	;'i'
  5183  3A8F  346E               	retlw	110	;'n'
  5184  3A90  3463               	retlw	99	;'c'
  5185  3A91  3468               	retlw	104	;'h'
  5186  3A92  3420               	retlw	32	;' '
  5187  3A93  3420               	retlw	32	;' '
  5188  3A94  3400               	retlw	0
  5189                           
  5190                           	psect	stringtext54
  5191  3A95                     __pstringtext54:	
  5192  3A95                     STR_26:	
  5193  3A95  3420               	retlw	32	;' '
  5194  3A96  3461               	retlw	97	;'a'
  5195  3A97  3475               	retlw	117	;'u'
  5196  3A98  3474               	retlw	116	;'t'
  5197  3A99  346F               	retlw	111	;'o'
  5198  3A9A  3420               	retlw	32	;' '
  5199  3A9B  3420               	retlw	32	;' '
  5200  3A9C  3400               	retlw	0
  5201                           
  5202                           	psect	stringtext55
  5203  3A9D                     __pstringtext55:	
  5204  3A9D                     STR_2:	
  5205  3A9D  3453               	retlw	83	;'S'
  5206  3A9E  3465               	retlw	101	;'e'
  5207  3A9F  346E               	retlw	110	;'n'
  5208  3AA0  3473               	retlw	115	;'s'
  5209  3AA1  346F               	retlw	111	;'o'
  5210  3AA2  3472               	retlw	114	;'r'
  5211  3AA3  343A               	retlw	58	;':'
  5212  3AA4  3400               	retlw	0
  5213                           
  5214                           	psect	stringtext56
  5215  3AA5                     __pstringtext56:	
  5216  3AA5                     STR_38:	
  5217  3AA5  3420               	retlw	32	;' '
  5218  3AA6  346F               	retlw	111	;'o'
  5219  3AA7  3466               	retlw	102	;'f'
  5220  3AA8  3466               	retlw	102	;'f'
  5221  3AA9  3420               	retlw	32	;' '
  5222  3AAA  3403               	retlw	3
  5223  3AAB  3400               	retlw	0
  5224                           
  5225                           	psect	stringtext57
  5226  3AAC                     __pstringtext57:	
  5227  3AAC                     STR_40:	
  5228  3AAC  3420               	retlw	32	;' '
  5229  3AAD  3461               	retlw	97	;'a'
  5230  3AAE  3475               	retlw	117	;'u'
  5231  3AAF  3474               	retlw	116	;'t'
  5232  3AB0  346F               	retlw	111	;'o'
  5233  3AB1  3403               	retlw	3
  5234  3AB2  3400               	retlw	0
  5235                           
  5236                           	psect	stringtext58
  5237  3AB3                     __pstringtext58:	
  5238  3AB3                     STR_54:	
  5239  3AB3  3474               	retlw	116	;'t'
  5240  3AB4  3465               	retlw	101	;'e'
  5241  3AB5  346D               	retlw	109	;'m'
  5242  3AB6  3470               	retlw	112	;'p'
  5243  3AB7  342E               	retlw	46	;'.'
  5244  3AB8  3404               	retlw	4
  5245  3AB9  3400               	retlw	0
  5246                           
  5247                           	psect	stringtext59
  5248  3ABA                     __pstringtext59:	
  5249  3ABA                     STR_6:	
  5250  3ABA  3425               	retlw	37	;'%'
  5251  3ABB  3420               	retlw	32	;' '
  5252  3ABC  3420               	retlw	32	;' '
  5253  3ABD  3420               	retlw	32	;' '
  5254  3ABE  3420               	retlw	32	;' '
  5255  3ABF  3420               	retlw	32	;' '
  5256  3AC0  3400               	retlw	0
  5257                           
  5258                           	psect	stringtext60
  5259  3AC1                     __pstringtext60:	
  5260  3AC1                     STR_49:	
  5261  3AC1  3474               	retlw	116	;'t'
  5262  3AC2  3465               	retlw	101	;'e'
  5263  3AC3  346D               	retlw	109	;'m'
  5264  3AC4  3470               	retlw	112	;'p'
  5265  3AC5  342E               	retlw	46	;'.'
  5266  3AC6  3420               	retlw	32	;' '
  5267  3AC7  3400               	retlw	0
  5268                           
  5269                           	psect	stringtext61
  5270  3AC8                     __pstringtext61:	
  5271  3AC8                     STR_37:	
  5272  3AC8  3404               	retlw	4
  5273  3AC9  3443               	retlw	67	;'C'
  5274  3ACA  3468               	retlw	104	;'h'
  5275  3ACB  342E               	retlw	46	;'.'
  5276  3ACC  3420               	retlw	32	;' '
  5277  3ACD  3400               	retlw	0
  5278                           
  5279                           	psect	stringtext62
  5280  3ACE                     __pstringtext62:	
  5281  3ACE                     STR_87:	
  5282  3ACE  3449               	retlw	73	;'I'
  5283  3ACF  344E               	retlw	78	;'N'
  5284  3AD0  3420               	retlw	32	;' '
  5285  3AD1  3400               	retlw	0
  5286                           
  5287                           	psect	stringtext63
  5288  3AD2                     __pstringtext63:	
  5289  3AD2                     STR_3:	
  5290  3AD2  3401               	retlw	1
  5291  3AD3  3420               	retlw	32	;' '
  5292  3AD4  3402               	retlw	2
  5293  3AD5  3400               	retlw	0
  5294                           
  5295                           	psect	stringtext64
  5296  3AD6                     __pstringtext64:	
  5297  3AD6                     STR_8:	
  5298  3AD6  3456               	retlw	86	;'V'
  5299  3AD7  3420               	retlw	32	;' '
  5300  3AD8  3420               	retlw	32	;' '
  5301  3AD9  3400               	retlw	0
  5302                           
  5303                           	psect	stringtext65
  5304  3ADA                     __pstringtext65:	
  5305  3ADA                     STR_10:	
  5306  3ADA  3443               	retlw	67	;'C'
  5307  3ADB  3468               	retlw	104	;'h'
  5308  3ADC  3420               	retlw	32	;' '
  5309  3ADD  3400               	retlw	0
  5310                           
  5311                           	psect	stringtext66
  5312  3ADE                     __pstringtext66:	
  5313  3ADE                     STR_55:	
  5314  3ADE  3401               	retlw	1
  5315  3ADF  3403               	retlw	3
  5316  3AE0  3400               	retlw	0
  5317                           
  5318                           	psect	stringtext67
  5319  3AE1                     __pstringtext67:	
  5320  3AE1                     STR_50:	
  5321  3AE1  3401               	retlw	1
  5322  3AE2  3420               	retlw	32	;' '
  5323  3AE3  3400               	retlw	0
  5324                           
  5325                           	psect	stringtext68
  5326  3AE4                     __pstringtext68:	
  5327  3AE4                     STR_12:	
  5328  3AE4  3422               	retlw	34	;'"'
  5329  3AE5  3420               	retlw	32	;' '
  5330  3AE6  3400               	retlw	0
  5331                           
  5332                           	psect	stringtext69
  5333  3AE7                     __pstringtext69:	
  5334  3AE7                     STR_11:	
  5335  3AE7  343A               	retlw	58	;':'
  5336  3AE8  3420               	retlw	32	;' '
  5337  3AE9  3400               	retlw	0
  5338                           
  5339                           	psect	stringtext70
  5340  3AEA                     __pstringtext70:	
  5341  3AEA                     STR_15:	
  5342  3AEA  3420               	retlw	32	;' '
  5343  3AEB  3428               	retlw	40	;'('
  5344  3AEC  3400               	retlw	0
  5345                           
  5346                           	psect	stringtext71
  5347  3AED                     __pstringtext71:	
  5348  3AED                     STR_16:	
  5349  3AED  3457               	retlw	87	;'W'
  5350  3AEE  3429               	retlw	41	;')'
  5351  3AEF  3400               	retlw	0
  5352                           
  5353                           	psect	stringtext72
  5354  3AF0                     __pstringtext72:	
  5355  3AF0                     STR_4:	
  5356  3AF0  3401               	retlw	1
  5357  3AF1  3400               	retlw	0
  5358                           
  5359                           	psect	stringtext73
  5360  0000                     __pstringtext73:	
  5361  3AB8                     
  5362                           ; #config settings
  5363  0000                     
  5364                           	psect	cinit
  5365  007C                     start_initialization:	
  5366  007C                     __initialization:		;BIGRAM
  5367                           
  5368                           ; Initialize objects allocated to BANK1
  5369  007C  0141               	movlb	1	; select bank1
  5370  007D  3180  2003  3180   	fcall	__pidataBANK1	;fetch initializer
  5371  0080  00ED               	movwf	__pdataBANK1& (0+127)
  5372                           
  5373                           ; Initialize objects allocated to BANK3
  5374  0081  0143               	movlb	3	; select bank3
  5375  0082  3180  2002  3180   	fcall	__pidataBANK3	;fetch initializer
  5376  0085  00EE               	movwf	__pdataBANK3& (0+127)
  5377                           
  5378                           ; Initialize objects allocated to BANK4
  5379  0086  30C6               	movlw	low __pidataBANK4
  5380  0087  0084               	movwf	4
  5381  0088  30B4               	movlw	(high __pidataBANK4)| (0+128)
  5382  0089  0085               	movwf	5
  5383  008A  3060               	movlw	low __pdataBANK4
  5384  008B  0086               	movwf	6
  5385  008C  3002               	movlw	high __pdataBANK4
  5386  008D  0087               	movwf	7
  5387  008E  3000               	movlw	0
  5388  008F  00FF               	movwf	btemp+1
  5389  0090  3008               	movlw	8
  5390  0091  3188  2000  3180   	fcall	init_ram
  5391                           
  5392                           ; Initialize objects allocated to BANK5
  5393  0094  30C4               	movlw	low __pidataBANK5
  5394  0095  0084               	movwf	4
  5395  0096  30B5               	movlw	(high __pidataBANK5)| (0+128)
  5396  0097  0085               	movwf	5
  5397  0098  30CD               	movlw	low __pdataBANK5
  5398  0099  0086               	movwf	6
  5399  009A  3002               	movlw	high __pdataBANK5
  5400  009B  0087               	movwf	7
  5401  009C  3000               	movlw	0
  5402  009D  00FF               	movwf	btemp+1
  5403  009E  3020               	movlw	32
  5404  009F  3188  2000  3180   	fcall	init_ram
  5405                           
  5406                           ; Clear objects allocated to BIGRAM
  5407  00A2  3046               	movlw	low (0+10054)
  5408  00A3  0084               	movwf	4
  5409  00A4  3027               	movlw	high (0+10054)
  5410  00A5  0085               	movwf	5
  5411  00A6  30AA               	movlw	170
  5412  00A7  00FE               	movwf	btemp
  5413  00A8  3000               	movlw	0
  5414  00A9  00FF               	movwf	btemp+1
  5415  00AA  31B5  252A  3180   	fcall	clear_ram0
  5416                           
  5417                           ; Clear objects allocated to COMMON
  5418  00AD  01FC               	clrf	__pbssCOMMON& (0+127)
  5419  00AE  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5420                           
  5421                           ; Clear objects allocated to BANK0
  5422  00AF  0140               	movlb	0	; select bank0
  5423  00B0  01E8               	clrf	__pbssBANK0& (0+127)
  5424  00B1  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  5425  00B2  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  5426  00B3  01EB               	clrf	(__pbssBANK0+3)& (0+127)
  5427                           
  5428                           ; Clear objects allocated to BANK2
  5429  00B4  3061               	movlw	low __pbssBANK2
  5430  00B5  0084               	movwf	4
  5431  00B6  3001               	movlw	high __pbssBANK2
  5432  00B7  0085               	movwf	5
  5433  00B8  300F               	movlw	15
  5434  00B9  00FE               	movwf	btemp
  5435  00BA  3000               	movlw	0
  5436  00BB  00FF               	movwf	btemp+1
  5437  00BC  31B5  252A  3180   	fcall	clear_ram0
  5438                           
  5439                           ; Clear objects allocated to BANK3
  5440  00BF  30E0               	movlw	low __pbssBANK3
  5441  00C0  0084               	movwf	4
  5442  00C1  3001               	movlw	high __pbssBANK3
  5443  00C2  0085               	movwf	5
  5444  00C3  300E               	movlw	14
  5445  00C4  00FE               	movwf	btemp
  5446  00C5  3000               	movlw	0
  5447  00C6  00FF               	movwf	btemp+1
  5448  00C7  31B5  252A  3180   	fcall	clear_ram0
  5449                           
  5450                           ; Clear objects allocated to BANK4
  5451  00CA  3020               	movlw	low __pbssBANK4
  5452  00CB  0084               	movwf	4
  5453  00CC  3002               	movlw	high __pbssBANK4
  5454  00CD  0085               	movwf	5
  5455  00CE  3040               	movlw	64
  5456  00CF  00FE               	movwf	btemp
  5457  00D0  3000               	movlw	0
  5458  00D1  00FF               	movwf	btemp+1
  5459  00D2  31B5  252A  3180   	fcall	clear_ram0
  5460                           
  5461                           ; Clear objects allocated to BANK5
  5462  00D5  30A0               	movlw	low __pbssBANK5
  5463  00D6  0084               	movwf	4
  5464  00D7  3002               	movlw	high __pbssBANK5
  5465  00D8  0085               	movwf	5
  5466  00D9  302D               	movlw	45
  5467  00DA  00FE               	movwf	btemp
  5468  00DB  3000               	movlw	0
  5469  00DC  00FF               	movwf	btemp+1
  5470  00DD  31B5  252A         	fcall	clear_ram0
  5471  00DF                     end_of_initialization:	
  5472                           ;End of C runtime variable initialization code
  5473                           
  5474  00DF                     __end_of__initialization:	
  5475  00DF  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5476  00E0  0140               	movlb	0
  5477  00E1  31A0  28B6         	ljmp	_main	;jump to C main() function
  5478                           
  5479                           	psect	bssCOMMON
  5480  007C                     __pbssCOMMON:	
  5481  007C                     _curRotState:	
  5482  007C                     	ds	1
  5483  007D                     _pbState:	
  5484  007D                     	ds	1
  5485                           
  5486                           	psect	bssBANK0
  5487  0068                     __pbssBANK0:	
  5488  0068                     checkChannelStatus@channel:	
  5489  0068                     	ds	1
  5490  0069                     _tail:	
  5491  0069                     	ds	1
  5492  006A                     _selectedChannel:	
  5493  006A                     	ds	1
  5494  006B                     _rxCount:	
  5495  006B                     	ds	1
  5496                           
  5497                           	psect	dataBANK1
  5498  00ED                     __pdataBANK1:	
  5499  00ED                     _g_screenRefresh:	
  5500  00ED                     	ds	1
  5501                           
  5502                           	psect	bssBANK2
  5503  0161                     __pbssBANK2:	
  5504  0161                     _tick100ms:	
  5505  0161                     	ds	4
  5506  0165                     _userActivity:	
  5507  0165                     	ds	4
  5508  0169                     checkChannelStatus@ready:	
  5509  0169                     	ds	1
  5510  016A                     menu@state:	
  5511  016A                     	ds	1
  5512  016B                     _head:	
  5513  016B                     	ds	1
  5514  016C                     setup@page:	
  5515  016C                     	ds	1
  5516  016D                     channelSetup@page:	
  5517  016D                     	ds	1
  5518  016E                     channelView@page:	
  5519  016E                     	ds	1
  5520  016F                     statusView@page:	
  5521  016F                     	ds	1
  5522                           
  5523                           	psect	bssBANK3
  5524  01E0                     __pbssBANK3:	
  5525  01E0                     checkChannelStatus@avg:	
  5526  01E0                     	ds	2
  5527  01E2                     checkSensor@state:	
  5528  01E2                     	ds	1
  5529  01E3                     checkChannelStatus@samples:	
  5530  01E3                     	ds	1
  5531  01E4                     _numGrpB:	
  5532  01E4                     	ds	1
  5533  01E5                     _numGrpA:	
  5534  01E5                     	ds	1
  5535  01E6                     paging@lastDir:	
  5536  01E6                     	ds	1
  5537  01E7                     menu@sleep:	
  5538  01E7                     	ds	1
  5539  01E8                     uartReceiveISR@checksum:	
  5540  01E8                     	ds	1
  5541  01E9                     _dataReadyFlag:	
  5542  01E9                     	ds	1
  5543  01EA                     _rxOErrCount:	
  5544  01EA                     	ds	1
  5545  01EB                     _rxFErrCount:	
  5546  01EB                     	ds	1
  5547  01EC                     _rotDir:	
  5548  01EC                     	ds	1
  5549  01ED                     _tick10ms:	
  5550  01ED                     	ds	1
  5551                           
  5552                           	psect	dataBANK3
  5553  01EE                     __pdataBANK3:	
  5554  01EE                     statusView@prevSensorStat:	
  5555  01EE                     	ds	1
  5556                           
  5557                           	psect	bssBANK4
  5558  0220                     __pbssBANK4:	
  5559  0220                     checkSensor@sensorTimeout:	
  5560  0220                     	ds	4
  5561  0224                     checkSensor@sensorUpdateInterval:	
  5562  0224                     	ds	4
  5563  0228                     getAnalogValues@avgI:	
  5564  0228                     	ds	2
  5565  022A                     getAnalogValues@avgV:	
  5566  022A                     	ds	2
  5567  022C                     getAnalogValues@avgT:	
  5568  022C                     	ds	2
  5569  022E                     _vChannels:	
  5570  022E                     	ds	32
  5571  024E                     _str:	
  5572  024E                     	ds	10
  5573  0258                     _grpB:	
  5574  0258                     	ds	4
  5575  025C                     _grpA:	
  5576  025C                     	ds	4
  5577                           
  5578                           	psect	dataBANK4
  5579  0260                     __pdataBANK4:	
  5580  0260                     OLED_print_xy@F7980:	
  5581  0260                     	ds	4
  5582  0264                     OLED_setCursor@F7972:	
  5583  0264                     	ds	4
  5584                           
  5585                           	psect	bssBANK5
  5586  02A0                     __pbssBANK5:	
  5587  02A0                     _errorMessageQueue:	
  5588  02A0                     	ds	10
  5589  02AA                     uartReceiveISR@buffer:	
  5590  02AA                     	ds	20
  5591  02BE                     _dataPacket:	
  5592  02BE                     	ds	15
  5593                           
  5594                           	psect	dataBANK5
  5595  02CD                     __pdataBANK5:	
  5596  02CD                     OLED_loadSpecialChars@F7985:	
  5597  02CD                     	ds	32
  5598                           
  5599                           	psect	inittext
  5600  0800                     init_ram:	
  5601  0800  00FE               	movwf	126
  5602  0801                     initloop:	
  5603  0801  0012               	moviw fsr0++
  5604  0802  001E               	movwi fsr1++
  5605  0803  3001               	movlw	1
  5606  0804  02FE               	subwf	126,f
  5607  0805  3000               	movlw	0
  5608  0806  3BFF               	subwfb	127,f
  5609  0807  087F               	movf	127,w
  5610  0808  047E               	iorwf	126,w
  5611  0809  1903               	btfsc	3,2
  5612  080A  3400               	retlw	0
  5613  080B  2801               	goto	initloop
  5614                           
  5615                           	psect	clrtext
  5616  352A                     clear_ram0:	
  5617                           ;	Called with FSR0 containing the base address, and
  5618                           ;	btemp/btemp+1 has the size to clear
  5619                           
  5620  352A  0064               	clrwdt	;clear the watchdog before getting into this loop
  5621  352B                     clrloop0:	
  5622  352B  0180               	clrf	0	;clear RAM location pointed to by FSR
  5623  352C  3101               	addfsr 0,1
  5624  352D  3001               	movlw	1
  5625  352E  02FE               	subwf	126,f
  5626  352F  3000               	movlw	0
  5627  3530  3BFF               	subwfb	127,f
  5628  3531  087F               	movf	127,w
  5629  3532  047E               	iorwf	126,w
  5630  3533  1903               	btfsc	3,2
  5631  3534  3400               	retlw	0	;all done for this memory range, return
  5632  3535  2D2B               	goto	clrloop0	;have we reached the end yet?
  5633                           
  5634                           	psect	cstackBANK6
  5635  0320                     __pcstackBANK6:	
  5636  0320                     channelThing@total:	
  5637                           
  5638                           ; 4 bytes @ 0x0
  5639  0320                     	ds	4
  5640  0324                     channelThing@totalGrpA:	
  5641                           
  5642                           ; 4 bytes @ 0x4
  5643  0324                     	ds	4
  5644  0328                     channelThing@totalGrpB:	
  5645                           
  5646                           ; 4 bytes @ 0x8
  5647  0328                     	ds	4
  5648  032C                     channelThing@phyCh:	
  5649                           
  5650                           ; 1 bytes @ 0xC
  5651  032C                     	ds	1
  5652  032D                     channelThing@n:	
  5653                           
  5654                           ; 1 bytes @ 0xD
  5655  032D                     	ds	1
  5656                           
  5657                           	psect	cstackBANK3
  5658  01A0                     __pcstackBANK3:	
  5659  01A0                     qsort@stack:	
  5660                           
  5661                           ; 64 bytes @ 0x0
  5662  01A0                     	ds	64
  5663                           
  5664                           	psect	cstackBANK2
  5665  0120                     __pcstackBANK2:	
  5666  0120                     qsort@xbuf:	
  5667                           
  5668                           ; 60 bytes @ 0x0
  5669  0120                     	ds	60
  5670  015C                     main@sysCheckInterval:	
  5671                           
  5672                           ; 4 bytes @ 0x3C
  5673  015C                     	ds	4
  5674  0160                     main@init:	
  5675                           
  5676                           ; 1 bytes @ 0x40
  5677  0160                     	ds	1
  5678                           
  5679                           	psect	cstackBANK1
  5680  00A0                     __pcstackBANK1:	
  5681  00A0                     ?___flsub:	
  5682  00A0                     ___flsub@a:	
  5683                           ; 4 bytes @ 0x0
  5684                           
  5685  00A0                     ___fldiv@rem:	
  5686                           ; 4 bytes @ 0x0
  5687                           
  5688                           
  5689                           ; 4 bytes @ 0x0
  5690  00A0                     	ds	4
  5691  00A4                     ___fldiv@sign:	
  5692  00A4                     ___flsub@b:	
  5693                           ; 1 bytes @ 0x4
  5694                           
  5695                           
  5696                           ; 4 bytes @ 0x4
  5697  00A4                     	ds	1
  5698  00A5                     ___fldiv@new_exp:	
  5699                           
  5700                           ; 2 bytes @ 0x5
  5701  00A5                     	ds	2
  5702  00A7                     ___fldiv@grs:	
  5703                           
  5704                           ; 4 bytes @ 0x7
  5705  00A7                     	ds	4
  5706  00AB                     ___fldiv@bexp:	
  5707                           
  5708                           ; 1 bytes @ 0xB
  5709  00AB                     	ds	1
  5710  00AC                     ___fldiv@aexp:	
  5711                           
  5712                           ; 1 bytes @ 0xC
  5713  00AC                     	ds	1
  5714  00AD                     ?___flge:	
  5715  00AD                     ?_getAnalogValues:	
  5716                           ; 1 bit 
  5717                           
  5718  00AD                     ?_calcRequiredPower:	
  5719                           ; 1 bytes @ 0xD
  5720                           
  5721  00AD                     ?___fltol:	
  5722                           ; 1 bytes @ 0xD
  5723                           
  5724  00AD                     calcRequiredPower@data:	
  5725                           ; 4 bytes @ 0xD
  5726                           
  5727  00AD                     getAnalogValues@data:	
  5728                           ; 2 bytes @ 0xD
  5729                           
  5730  00AD                     ___flge@ff1:	
  5731                           ; 2 bytes @ 0xD
  5732                           
  5733  00AD                     ___fltol@f1:	
  5734                           ; 4 bytes @ 0xD
  5735                           
  5736                           
  5737                           ; 4 bytes @ 0xD
  5738  00AD                     	ds	2
  5739  00AF                     ??_calcRequiredPower:	
  5740  00AF                     _getAnalogValues$2596:	
  5741                           ; 1 bytes @ 0xF
  5742                           
  5743                           
  5744                           ; 4 bytes @ 0xF
  5745  00AF                     	ds	2
  5746  00B1                     ??___fltol:	
  5747  00B1                     ___flge@ff2:	
  5748                           ; 1 bytes @ 0x11
  5749                           
  5750                           
  5751                           ; 4 bytes @ 0x11
  5752  00B1                     	ds	2
  5753  00B3                     getAnalogValues@adc:	
  5754  00B3                     calcRequiredPower@p:	
  5755                           ; 2 bytes @ 0x13
  5756                           
  5757                           
  5758                           ; 4 bytes @ 0x13
  5759  00B3                     	ds	2
  5760  00B5                     ??___flge:	
  5761                           
  5762                           ; 1 bytes @ 0x15
  5763  00B5                     	ds	1
  5764  00B6                     ?_itoa:	
  5765  00B6                     ?_sortDC:	
  5766                           ; 1 bytes @ 0x16
  5767                           
  5768  00B6                     ?_sortDCRev:	
  5769                           ; 2 bytes @ 0x16
  5770                           
  5771  00B6                     ?_sortCur:	
  5772                           ; 2 bytes @ 0x16
  5773                           
  5774  00B6                     sortDC@cmp1:	
  5775                           ; 2 bytes @ 0x16
  5776                           
  5777  00B6                     sortDCRev@cmp1:	
  5778                           ; 2 bytes @ 0x16
  5779                           
  5780  00B6                     sortCur@cmp1:	
  5781                           ; 2 bytes @ 0x16
  5782                           
  5783  00B6                     itoa@str:	
  5784                           ; 2 bytes @ 0x16
  5785                           
  5786                           
  5787                           ; 2 bytes @ 0x16
  5788  00B6                     	ds	1
  5789  00B7                     calcRequiredPower@Rth:	
  5790                           
  5791                           ; 4 bytes @ 0x17
  5792  00B7                     	ds	1
  5793  00B8                     itoa@value:	
  5794  00B8                     sortDC@cmp2:	
  5795                           ; 1 bytes @ 0x18
  5796                           
  5797  00B8                     sortDCRev@cmp2:	
  5798                           ; 2 bytes @ 0x18
  5799                           
  5800  00B8                     sortCur@cmp2:	
  5801                           ; 2 bytes @ 0x18
  5802                           
  5803                           
  5804                           ; 2 bytes @ 0x18
  5805  00B8                     	ds	1
  5806  00B9                     ?_checkSensor:	
  5807  00B9                     ?_checkChannelStatus:	
  5808                           ; 1 bytes @ 0x19
  5809                           
  5810  00B9                     ?_ftoa:	
  5811                           ; 1 bytes @ 0x19
  5812                           
  5813  00B9                     ?_spinInput:	
  5814                           ; 1 bytes @ 0x19
  5815                           
  5816  00B9                     itoa@width:	
  5817                           ; 1 bytes @ 0x19
  5818                           
  5819  00B9                     spinInput@input:	
  5820                           ; 1 bytes @ 0x19
  5821                           
  5822  00B9                     checkChannelStatus@data:	
  5823                           ; 2 bytes @ 0x19
  5824                           
  5825  00B9                     checkSensor@data:	
  5826                           ; 2 bytes @ 0x19
  5827                           
  5828  00B9                     ftoa@fValue:	
  5829                           ; 2 bytes @ 0x19
  5830                           
  5831                           
  5832                           ; 4 bytes @ 0x19
  5833  00B9                     	ds	1
  5834  00BA                     ??_itoa:	
  5835  00BA                     ??_sortDC:	
  5836                           ; 1 bytes @ 0x1A
  5837                           
  5838  00BA                     ??_sortDCRev:	
  5839                           ; 1 bytes @ 0x1A
  5840                           
  5841  00BA                     sortCur@a:	
  5842                           ; 1 bytes @ 0x1A
  5843                           
  5844                           
  5845                           ; 2 bytes @ 0x1A
  5846  00BA                     	ds	1
  5847  00BB                     ??_checkSensor:	
  5848  00BB                     ??_checkChannelStatus:	
  5849                           ; 1 bytes @ 0x1B
  5850                           
  5851  00BB                     spinInput@min:	
  5852                           ; 1 bytes @ 0x1B
  5853                           
  5854  00BB                     _calcRequiredPower$2590:	
  5855                           ; 4 bytes @ 0x1B
  5856                           
  5857                           
  5858                           ; 4 bytes @ 0x1B
  5859  00BB                     	ds	1
  5860  00BC                     sortDC@a:	
  5861  00BC                     sortDCRev@a:	
  5862                           ; 1 bytes @ 0x1C
  5863                           
  5864  00BC                     sortCur@b:	
  5865                           ; 1 bytes @ 0x1C
  5866                           
  5867                           
  5868                           ; 2 bytes @ 0x1C
  5869  00BC                     	ds	1
  5870  00BD                     sortDC@b:	
  5871  00BD                     sortDCRev@b:	
  5872                           ; 1 bytes @ 0x1D
  5873                           
  5874  00BD                     ftoa@width:	
  5875                           ; 1 bytes @ 0x1D
  5876                           
  5877                           
  5878                           ; 1 bytes @ 0x1D
  5879  00BD                     	ds	1
  5880  00BE                     ?_qsort:	
  5881  00BE                     ftoa@prec:	
  5882                           ; 1 bytes @ 0x1E
  5883                           
  5884  00BE                     qsort@nel:	
  5885                           ; 1 bytes @ 0x1E
  5886                           
  5887                           
  5888                           ; 2 bytes @ 0x1E
  5889  00BE                     	ds	1
  5890  00BF                     ??_ftoa:	
  5891  00BF                     checkChannelStatus@adc:	
  5892                           ; 1 bytes @ 0x1F
  5893                           
  5894  00BF                     spinInput@max:	
  5895                           ; 2 bytes @ 0x1F
  5896                           
  5897  00BF                     _calcRequiredPower$2591:	
  5898                           ; 4 bytes @ 0x1F
  5899                           
  5900                           
  5901                           ; 4 bytes @ 0x1F
  5902  00BF                     	ds	1
  5903  00C0                     qsort@width:	
  5904                           
  5905                           ; 2 bytes @ 0x20
  5906  00C0                     	ds	1
  5907  00C1                     ?_systemCheck:	
  5908  00C1                     ftoa@len:	
  5909                           ; 1 bytes @ 0x21
  5910                           
  5911  00C1                     systemCheck@data:	
  5912                           ; 1 bytes @ 0x21
  5913                           
  5914  00C1                     checkChannelStatus@current:	
  5915                           ; 2 bytes @ 0x21
  5916                           
  5917                           
  5918                           ; 4 bytes @ 0x21
  5919  00C1                     	ds	1
  5920  00C2                     ftoa@sign:	
  5921  00C2                     qsort@compar:	
  5922                           ; 1 bytes @ 0x22
  5923                           
  5924                           
  5925                           ; 2 bytes @ 0x22
  5926  00C2                     	ds	1
  5927  00C3                     ??_systemCheck:	
  5928  00C3                     ftoa@intValue:	
  5929                           ; 1 bytes @ 0x23
  5930                           
  5931  00C3                     spinInput@step:	
  5932                           ; 1 bytes @ 0x23
  5933                           
  5934  00C3                     _calcRequiredPower$2592:	
  5935                           ; 4 bytes @ 0x23
  5936                           
  5937                           
  5938                           ; 4 bytes @ 0x23
  5939  00C3                     	ds	1
  5940  00C4                     ??_qsort:	
  5941  00C4                     ftoa@w:	
  5942                           ; 1 bytes @ 0x24
  5943                           
  5944                           
  5945                           ; 1 bytes @ 0x24
  5946  00C4                     	ds	1
  5947  00C5                     ftoa@pos:	
  5948  00C5                     checkChannelStatus@chData:	
  5949                           ; 1 bytes @ 0x25
  5950                           
  5951                           
  5952                           ; 2 bytes @ 0x25
  5953  00C5                     	ds	1
  5954  00C6                     ftoa@str:	
  5955                           
  5956                           ; 1 bytes @ 0x26
  5957  00C6                     	ds	1
  5958  00C7                     ?_statusView:	
  5959  00C7                     ?_channelView:	
  5960                           ; 1 bytes @ 0x27
  5961                           
  5962  00C7                     ?_channelSetup:	
  5963                           ; 1 bytes @ 0x27
  5964                           
  5965  00C7                     ?_setOutputPower:	
  5966                           ; 1 bytes @ 0x27
  5967                           
  5968  00C7                     ?_setLensDia:	
  5969                           ; 1 bytes @ 0x27
  5970                           
  5971  00C7                     ?_setup:	
  5972                           ; 1 bytes @ 0x27
  5973                           
  5974  00C7                     ?_setDPOffset:	
  5975                           ; 1 bytes @ 0x27
  5976                           
  5977  00C7                     ?_setSkyTemp:	
  5978                           ; 1 bytes @ 0x27
  5979                           
  5980  00C7                     ?_setFudgeFactor:	
  5981                           ; 1 bytes @ 0x27
  5982                           
  5983  00C7                     statusView@data:	
  5984                           ; 1 bytes @ 0x27
  5985                           
  5986  00C7                     channelView@data:	
  5987                           ; 2 bytes @ 0x27
  5988                           
  5989  00C7                     channelSetup@data:	
  5990                           ; 2 bytes @ 0x27
  5991                           
  5992  00C7                     setOutputPower@data:	
  5993                           ; 2 bytes @ 0x27
  5994                           
  5995  00C7                     setLensDia@data:	
  5996                           ; 2 bytes @ 0x27
  5997                           
  5998  00C7                     setup@data:	
  5999                           ; 2 bytes @ 0x27
  6000                           
  6001  00C7                     setDPOffset@data:	
  6002                           ; 2 bytes @ 0x27
  6003                           
  6004  00C7                     setSkyTemp@data:	
  6005                           ; 2 bytes @ 0x27
  6006                           
  6007  00C7                     setFudgeFactor@data:	
  6008                           ; 2 bytes @ 0x27
  6009                           
  6010  00C7                     systemCheck@str:	
  6011                           ; 2 bytes @ 0x27
  6012                           
  6013  00C7                     _calcRequiredPower$2593:	
  6014                           ; 3 bytes @ 0x27
  6015                           
  6016                           
  6017                           ; 4 bytes @ 0x27
  6018  00C7                     	ds	2
  6019  00C9                     ??_statusView:	
  6020  00C9                     ??_channelView:	
  6021                           ; 1 bytes @ 0x29
  6022                           
  6023  00C9                     ??_channelSetup:	
  6024                           ; 1 bytes @ 0x29
  6025                           
  6026  00C9                     ??_setOutputPower:	
  6027                           ; 1 bytes @ 0x29
  6028                           
  6029  00C9                     ??_setLensDia:	
  6030                           ; 1 bytes @ 0x29
  6031                           
  6032  00C9                     ??_setup:	
  6033                           ; 1 bytes @ 0x29
  6034                           
  6035  00C9                     ??_setDPOffset:	
  6036                           ; 1 bytes @ 0x29
  6037                           
  6038  00C9                     ??_setSkyTemp:	
  6039                           ; 1 bytes @ 0x29
  6040                           
  6041  00C9                     ??_setFudgeFactor:	
  6042                           ; 1 bytes @ 0x29
  6043                           
  6044  00C9                     qsort@vbase:	
  6045                           ; 1 bytes @ 0x29
  6046                           
  6047                           
  6048                           ; 1 bytes @ 0x29
  6049  00C9                     	ds	1
  6050  00CA                     systemCheck@n:	
  6051  00CA                     qsort@x:	
  6052                           ; 1 bytes @ 0x2A
  6053                           
  6054                           
  6055                           ; 1 bytes @ 0x2A
  6056  00CA                     	ds	1
  6057  00CB                     qsort@base:	
  6058  00CB                     _calcRequiredPower$2594:	
  6059                           ; 1 bytes @ 0x2B
  6060                           
  6061                           
  6062                           ; 4 bytes @ 0x2B
  6063  00CB                     	ds	1
  6064  00CC                     qsort@l:	
  6065                           
  6066                           ; 2 bytes @ 0x2C
  6067  00CC                     	ds	1
  6068  00CD                     channelSetup@chData:	
  6069  00CD                     setOutputPower@chData:	
  6070                           ; 2 bytes @ 0x2D
  6071                           
  6072                           
  6073                           ; 2 bytes @ 0x2D
  6074  00CD                     	ds	1
  6075  00CE                     qsort@r:	
  6076                           
  6077                           ; 2 bytes @ 0x2E
  6078  00CE                     	ds	1
  6079  00CF                     channelView@n:	
  6080  00CF                     _calcRequiredPower$2595:	
  6081                           ; 1 bytes @ 0x2F
  6082                           
  6083                           
  6084                           ; 4 bytes @ 0x2F
  6085  00CF                     	ds	1
  6086  00D0                     ?_menu:	
  6087  00D0                     menu@data:	
  6088                           ; 1 bytes @ 0x30
  6089                           
  6090  00D0                     qsort@s:	
  6091                           ; 2 bytes @ 0x30
  6092                           
  6093                           
  6094                           ; 2 bytes @ 0x30
  6095  00D0                     	ds	2
  6096  00D2                     ??_menu:	
  6097  00D2                     qsort@i:	
  6098                           ; 1 bytes @ 0x32
  6099                           
  6100                           
  6101                           ; 2 bytes @ 0x32
  6102  00D2                     	ds	1
  6103  00D3                     calcRequiredPower@d:	
  6104                           
  6105                           ; 4 bytes @ 0x33
  6106  00D3                     	ds	1
  6107  00D4                     qsort@j:	
  6108                           
  6109                           ; 2 bytes @ 0x34
  6110  00D4                     	ds	2
  6111  00D6                     ?_channelThing:	
  6112  00D6                     menu@page:	
  6113                           ; 1 bytes @ 0x36
  6114                           
  6115  00D6                     channelThing@data:	
  6116                           ; 1 bytes @ 0x36
  6117                           
  6118                           
  6119                           ; 2 bytes @ 0x36
  6120  00D6                     	ds	1
  6121  00D7                     menu@pb:	
  6122  00D7                     calcRequiredPower@phi:	
  6123                           ; 1 bytes @ 0x37
  6124                           
  6125                           
  6126                           ; 4 bytes @ 0x37
  6127  00D7                     	ds	1
  6128  00D8                     ??_channelThing:	
  6129  00D8                     menu@timeout:	
  6130                           ; 1 bytes @ 0x38
  6131                           
  6132                           
  6133                           ; 1 bytes @ 0x38
  6134  00D8                     	ds	1
  6135  00D9                     menu@func:	
  6136                           
  6137                           ; 2 bytes @ 0x39
  6138  00D9                     	ds	2
  6139  00DB                     menu@nextState:	
  6140  00DB                     calcRequiredPower@A:	
  6141                           ; 1 bytes @ 0x3B
  6142                           
  6143                           
  6144                           ; 4 bytes @ 0x3B
  6145  00DB                     	ds	4
  6146  00DF                     _calcRequiredPower$2589:	
  6147                           
  6148                           ; 4 bytes @ 0x3F
  6149  00DF                     	ds	4
  6150  00E3                     calcRequiredPower@T1:	
  6151                           
  6152                           ; 4 bytes @ 0x43
  6153  00E3                     	ds	4
  6154  00E7                     calcRequiredPower@T2:	
  6155                           
  6156                           ; 4 bytes @ 0x47
  6157  00E7                     	ds	4
  6158  00EB                     calcRequiredPower@n:	
  6159                           
  6160                           ; 1 bytes @ 0x4B
  6161  00EB                     	ds	1
  6162  00EC                     ??_main:	
  6163                           
  6164                           ; 1 bytes @ 0x4C
  6165  00EC                     	ds	1
  6166                           
  6167                           	psect	cstackCOMMON
  6168  0070                     __pcstackCOMMON:	
  6169  0070                     ?_initialize:	
  6170  0070                     ?_OLED_init:	
  6171                           ; 1 bytes @ 0x0
  6172                           
  6173  0070                     ?_OLED_loadSpecialChars:	
  6174                           ; 1 bytes @ 0x0
  6175                           
  6176  0070                     ?_OLED_returnHome:	
  6177                           ; 1 bytes @ 0x0
  6178                           
  6179  0070                     ?_OLED_clearDisplay:	
  6180                           ; 1 bytes @ 0x0
  6181                           
  6182  0070                     ?_setLoadSwitch:	
  6183                           ; 1 bytes @ 0x0
  6184                           
  6185  0070                     ?_getLastError:	
  6186                           ; 1 bytes @ 0x0
  6187                           
  6188  0070                     ?_viewErrorMessage:	
  6189                           ; 1 bytes @ 0x0
  6190                           
  6191  0070                     ?_OLED_command:	
  6192                           ; 1 bytes @ 0x0
  6193                           
  6194  0070                     ?_pushButtonISR:	
  6195                           ; 1 bytes @ 0x0
  6196                           
  6197  0070                     ?_rotISR:	
  6198                           ; 1 bytes @ 0x0
  6199                           
  6200  0070                     ?_uartReceiveISR:	
  6201                           ; 1 bytes @ 0x0
  6202                           
  6203  0070                     ?_strncpy:	
  6204                           ; 1 bytes @ 0x0
  6205                           
  6206  0070                     ?_getDataPacket:	
  6207                           ; 1 bytes @ 0x0
  6208                           
  6209  0070                     ?_returnToPage:	
  6210                           ; 1 bytes @ 0x0
  6211                           
  6212  0070                     ?_removeLastError:	
  6213                           ; 1 bytes @ 0x0
  6214                           
  6215  0070                     ?_main:	
  6216                           ; 1 bytes @ 0x0
  6217                           
  6218  0070                     ?_OLED_off:	
  6219                           ; 1 bytes @ 0x0
  6220                           
  6221  0070                     ?_OLED_pulseEnable:	
  6222                           ; 1 bytes @ 0x0
  6223                           
  6224  0070                     ?_OLED_write4bits:	
  6225                           ; 1 bytes @ 0x0
  6226                           
  6227  0070                     ?_OLED_waitForReady:	
  6228                           ; 1 bytes @ 0x0
  6229                           
  6230  0070                     ?_OLED_write:	
  6231                           ; 1 bytes @ 0x0
  6232                           
  6233  0070                     ?_OLED_scrollDisplayLeft:	
  6234                           ; 1 bytes @ 0x0
  6235                           
  6236  0070                     ?_OLED_scrollDisplayRight:	
  6237                           ; 1 bytes @ 0x0
  6238                           
  6239  0070                     ?_get10msTick:	
  6240                           ; 1 bytes @ 0x0
  6241                           
  6242  0070                     ??_get10msTick:	
  6243                           ; 1 bytes @ 0x0
  6244                           
  6245  0070                     ?_reset10msTick:	
  6246                           ; 1 bytes @ 0x0
  6247                           
  6248  0070                     ??_reset10msTick:	
  6249                           ; 1 bytes @ 0x0
  6250                           
  6251  0070                     ?_ISR:	
  6252                           ; 1 bytes @ 0x0
  6253                           
  6254  0070                     ?_getRotDir:	
  6255                           ; 1 bytes @ 0x0
  6256                           
  6257  0070                     ?_getPB:	
  6258                           ; 1 bytes @ 0x0
  6259                           
  6260  0070                     ?_uartIsDataReady:	
  6261                           ; 1 bytes @ 0x0
  6262                           
  6263  0070                     ?_uartSendByte:	
  6264                           ; 1 bytes @ 0x0
  6265                           
  6266  0070                     ?_uartReset:	
  6267                           ; 1 bytes @ 0x0
  6268                           
  6269  0070                     ?_error:	
  6270                           ; 1 bytes @ 0x0
  6271                           
  6272  0070                     ?_setOLEDPower:	
  6273                           ; 1 bytes @ 0x0
  6274                           
  6275  0070                     ?i1_timeNow:	
  6276                           ; 1 bytes @ 0x0
  6277                           
  6278  0070                     strncpy@s:	
  6279                           ; 4 bytes @ 0x0
  6280                           
  6281                           
  6282                           ; 1 bytes @ 0x0
  6283  0070                     	ds	1
  6284  0071                     strncpy@n:	
  6285                           
  6286                           ; 2 bytes @ 0x1
  6287  0071                     	ds	2
  6288  0073                     ??_strncpy:	
  6289                           
  6290                           ; 1 bytes @ 0x3
  6291  0073                     	ds	1
  6292  0074                     ??_pushButtonISR:	
  6293  0074                     ??_rotISR:	
  6294                           ; 1 bytes @ 0x4
  6295                           
  6296  0074                     ??i1_timeNow:	
  6297                           ; 1 bytes @ 0x4
  6298                           
  6299  0074                     strncpy@d:	
  6300                           ; 1 bytes @ 0x4
  6301                           
  6302                           
  6303                           ; 1 bytes @ 0x4
  6304  0074                     	ds	1
  6305  0075                     pushButtonISR@time:	
  6306  0075                     strncpy@cp:	
  6307                           ; 1 bytes @ 0x5
  6308                           
  6309                           
  6310                           ; 1 bytes @ 0x5
  6311  0075                     	ds	1
  6312  0076                     ??_uartReceiveISR:	
  6313                           
  6314                           ; 1 bytes @ 0x6
  6315  0076                     	ds	5
  6316  007B                     rotISR@input:	
  6317                           
  6318                           ; 1 bytes @ 0xB
  6319  007B                     	ds	1
  6320                           
  6321                           	psect	cstackBANK0
  6322  0020                     __pcstackBANK0:	
  6323  0020                     ??_ISR:	
  6324                           
  6325                           ; 1 bytes @ 0x0
  6326  0020                     	ds	4
  6327  0024                     ?___fleq:	
  6328  0024                     ??_initialize:	
  6329                           ; 1 bit 
  6330                           
  6331  0024                     ?_initGlobalData:	
  6332                           ; 1 bytes @ 0x4
  6333                           
  6334  0024                     ??_setLoadSwitch:	
  6335                           ; 1 bytes @ 0x4
  6336                           
  6337  0024                     ??_getLastError:	
  6338                           ; 1 bytes @ 0x4
  6339                           
  6340  0024                     ??_getDataPacket:	
  6341                           ; 1 bytes @ 0x4
  6342                           
  6343  0024                     ??_OLED_pulseEnable:	
  6344                           ; 1 bytes @ 0x4
  6345                           
  6346  0024                     ??_OLED_write4bits:	
  6347                           ; 1 bytes @ 0x4
  6348                           
  6349  0024                     ??_OLED_waitForReady:	
  6350                           ; 1 bytes @ 0x4
  6351                           
  6352  0024                     ??_getRotDir:	
  6353                           ; 1 bytes @ 0x4
  6354                           
  6355  0024                     ??_getPB:	
  6356                           ; 1 bytes @ 0x4
  6357                           
  6358  0024                     ??_uartIsDataReady:	
  6359                           ; 1 bytes @ 0x4
  6360                           
  6361  0024                     ??_uartSendByte:	
  6362                           ; 1 bytes @ 0x4
  6363                           
  6364  0024                     ??_uartReset:	
  6365                           ; 1 bytes @ 0x4
  6366                           
  6367  0024                     ??_setOLEDPower:	
  6368                           ; 1 bytes @ 0x4
  6369                           
  6370  0024                     ?_setChannelSwitch:	
  6371                           ; 1 bytes @ 0x4
  6372                           
  6373  0024                     ?__Umul8_16:	
  6374                           ; 1 bytes @ 0x4
  6375                           
  6376  0024                     ?_getAnalogValue:	
  6377                           ; 2 bytes @ 0x4
  6378                           
  6379  0024                     ?___wmul:	
  6380                           ; 2 bytes @ 0x4
  6381                           
  6382  0024                     ?___awdiv:	
  6383                           ; 2 bytes @ 0x4
  6384                           
  6385  0024                     ?___awmod:	
  6386                           ; 2 bytes @ 0x4
  6387                           
  6388  0024                     ?_timeNow:	
  6389                           ; 2 bytes @ 0x4
  6390                           
  6391  0024                     ?___lmul:	
  6392                           ; 4 bytes @ 0x4
  6393                           
  6394  0024                     OLED_waitForReady@busy:	
  6395                           ; 4 bytes @ 0x4
  6396                           
  6397  0024                     uartSendByte@s:	
  6398                           ; 1 bytes @ 0x4
  6399                           
  6400  0024                     setLoadSwitch@state:	
  6401                           ; 1 bytes @ 0x4
  6402                           
  6403  0024                     setOLEDPower@state:	
  6404                           ; 1 bytes @ 0x4
  6405                           
  6406  0024                     setChannelSwitch@state:	
  6407                           ; 1 bytes @ 0x4
  6408                           
  6409  0024                     __Umul8_16@multiplicand:	
  6410                           ; 1 bytes @ 0x4
  6411                           
  6412  0024                     initGlobalData@data:	
  6413                           ; 1 bytes @ 0x4
  6414                           
  6415  0024                     ___wmul@multiplier:	
  6416                           ; 2 bytes @ 0x4
  6417                           
  6418  0024                     ___awdiv@divisor:	
  6419                           ; 2 bytes @ 0x4
  6420                           
  6421  0024                     ___awmod@divisor:	
  6422                           ; 2 bytes @ 0x4
  6423                           
  6424  0024                     ___lmul@multiplier:	
  6425                           ; 2 bytes @ 0x4
  6426                           
  6427  0024                     ___fleq@ff1:	
  6428                           ; 4 bytes @ 0x4
  6429                           
  6430                           
  6431                           ; 4 bytes @ 0x4
  6432  0024                     	ds	1
  6433  0025                     ??_setChannelSwitch:	
  6434  0025                     getRotDir@ret:	
  6435                           ; 1 bytes @ 0x5
  6436                           
  6437  0025                     getPB@ret:	
  6438                           ; 1 bytes @ 0x5
  6439                           
  6440  0025                     uartIsDataReady@ret:	
  6441                           ; 1 bytes @ 0x5
  6442                           
  6443                           
  6444                           ; 1 bytes @ 0x5
  6445  0025                     	ds	1
  6446  0026                     ??_initGlobalData:	
  6447  0026                     ??__Umul8_16:	
  6448                           ; 1 bytes @ 0x6
  6449                           
  6450  0026                     ??_getAnalogValue:	
  6451                           ; 1 bytes @ 0x6
  6452                           
  6453  0026                     OLED_write4bits@value:	
  6454                           ; 1 bytes @ 0x6
  6455                           
  6456  0026                     ___wmul@multiplicand:	
  6457                           ; 1 bytes @ 0x6
  6458                           
  6459  0026                     ___awdiv@dividend:	
  6460                           ; 2 bytes @ 0x6
  6461                           
  6462  0026                     ___awmod@dividend:	
  6463                           ; 2 bytes @ 0x6
  6464                           
  6465                           
  6466                           ; 2 bytes @ 0x6
  6467  0026                     	ds	1
  6468  0027                     ?_OLED_send:	
  6469  0027                     OLED_send@mode:	
  6470                           ; 1 bytes @ 0x7
  6471                           
  6472  0027                     setChannelSwitch@channel:	
  6473                           ; 1 bytes @ 0x7
  6474                           
  6475  0027                     getAnalogValue@channel:	
  6476                           ; 1 bytes @ 0x7
  6477                           
  6478                           
  6479                           ; 1 bytes @ 0x7
  6480  0027                     	ds	1
  6481  0028                     ??_timeNow:	
  6482  0028                     ??_OLED_send:	
  6483                           ; 1 bytes @ 0x8
  6484                           
  6485  0028                     ??___wmul:	
  6486                           ; 1 bytes @ 0x8
  6487                           
  6488  0028                     ??___awdiv:	
  6489                           ; 1 bytes @ 0x8
  6490                           
  6491  0028                     ??___awmod:	
  6492                           ; 1 bytes @ 0x8
  6493                           
  6494  0028                     ?_timeSince:	
  6495                           ; 1 bytes @ 0x8
  6496                           
  6497  0028                     ___wmul@product:	
  6498                           ; 4 bytes @ 0x8
  6499                           
  6500  0028                     __Umul8_16@product:	
  6501                           ; 2 bytes @ 0x8
  6502                           
  6503  0028                     timeSince@since:	
  6504                           ; 2 bytes @ 0x8
  6505                           
  6506  0028                     ___lmul@multiplicand:	
  6507                           ; 4 bytes @ 0x8
  6508                           
  6509  0028                     ___fleq@ff2:	
  6510                           ; 4 bytes @ 0x8
  6511                           
  6512                           
  6513                           ; 4 bytes @ 0x8
  6514  0028                     	ds	1
  6515  0029                     OLED_send@value:	
  6516  0029                     ___awdiv@counter:	
  6517                           ; 1 bytes @ 0x9
  6518                           
  6519  0029                     ___awmod@counter:	
  6520                           ; 1 bytes @ 0x9
  6521                           
  6522                           
  6523                           ; 1 bytes @ 0x9
  6524  0029                     	ds	1
  6525  002A                     ??_OLED_command:	
  6526  002A                     ?_getNextState:	
  6527                           ; 1 bytes @ 0xA
  6528                           
  6529  002A                     ??_OLED_write:	
  6530                           ; 1 bytes @ 0xA
  6531                           
  6532  002A                     ?_getStateFunc:	
  6533                           ; 1 bytes @ 0xA
  6534                           
  6535  002A                     ?___xxtofl:	
  6536                           ; 2 bytes @ 0xA
  6537                           
  6538  002A                     initGlobalData@n:	
  6539                           ; 4 bytes @ 0xA
  6540                           
  6541  002A                     OLED_command@value:	
  6542                           ; 1 bytes @ 0xA
  6543                           
  6544  002A                     OLED_write@value:	
  6545                           ; 1 bytes @ 0xA
  6546                           
  6547  002A                     getNextState@intState:	
  6548                           ; 1 bytes @ 0xA
  6549                           
  6550  002A                     ___awdiv@sign:	
  6551                           ; 1 bytes @ 0xA
  6552                           
  6553  002A                     ___awmod@sign:	
  6554                           ; 1 bytes @ 0xA
  6555                           
  6556  002A                     __Umul8_16@word_mpld:	
  6557                           ; 1 bytes @ 0xA
  6558                           
  6559  002A                     ___xxtofl@val:	
  6560                           ; 2 bytes @ 0xA
  6561                           
  6562                           
  6563                           ; 4 bytes @ 0xA
  6564  002A                     	ds	1
  6565  002B                     ??_OLED_init:	
  6566  002B                     ??_OLED_loadSpecialChars:	
  6567                           ; 1 bytes @ 0xB
  6568                           
  6569  002B                     ??_OLED_returnHome:	
  6570                           ; 1 bytes @ 0xB
  6571                           
  6572  002B                     ??_OLED_clearDisplay:	
  6573                           ; 1 bytes @ 0xB
  6574                           
  6575  002B                     ??_returnToPage:	
  6576                           ; 1 bytes @ 0xB
  6577                           
  6578  002B                     ?_paging:	
  6579                           ; 1 bytes @ 0xB
  6580                           
  6581  002B                     ??_removeLastError:	
  6582                           ; 1 bytes @ 0xB
  6583                           
  6584  002B                     ??_OLED_off:	
  6585                           ; 1 bytes @ 0xB
  6586                           
  6587  002B                     ??_OLED_scrollDisplayLeft:	
  6588                           ; 1 bytes @ 0xB
  6589                           
  6590  002B                     ??_OLED_scrollDisplayRight:	
  6591                           ; 1 bytes @ 0xB
  6592                           
  6593  002B                     ??_error:	
  6594                           ; 1 bytes @ 0xB
  6595                           
  6596  002B                     getNextState@pb:	
  6597                           ; 1 bytes @ 0xB
  6598                           
  6599  002B                     paging@lastPage:	
  6600                           ; 1 bytes @ 0xB
  6601                           
  6602  002B                     initGlobalData@chData:	
  6603                           ; 1 bytes @ 0xB
  6604                           
  6605  002B                     ___awdiv@quotient:	
  6606                           ; 2 bytes @ 0xB
  6607                           
  6608                           
  6609                           ; 2 bytes @ 0xB
  6610  002B                     	ds	1
  6611  002C                     ??_timeSince:	
  6612  002C                     ??_paging:	
  6613                           ; 1 bytes @ 0xC
  6614                           
  6615  002C                     ??_getStateFunc:	
  6616                           ; 1 bytes @ 0xC
  6617                           
  6618  002C                     ??___lmul:	
  6619                           ; 1 bytes @ 0xC
  6620                           
  6621  002C                     ??___fleq:	
  6622                           ; 1 bytes @ 0xC
  6623                           
  6624  002C                     error@error:	
  6625                           ; 1 bytes @ 0xC
  6626                           
  6627  002C                     getNextState@timeout:	
  6628                           ; 1 bytes @ 0xC
  6629                           
  6630  002C                     __Umul8_16@multiplier:	
  6631                           ; 1 bytes @ 0xC
  6632                           
  6633  002C                     ___lmul@product:	
  6634                           ; 1 bytes @ 0xC
  6635                           
  6636  002C                     OLED_loadSpecialChars@special:	
  6637                           ; 4 bytes @ 0xC
  6638                           
  6639                           
  6640                           ; 32 bytes @ 0xC
  6641  002C                     	ds	1
  6642  002D                     ??_getNextState:	
  6643  002D                     ?___bmul:	
  6644                           ; 1 bytes @ 0xD
  6645                           
  6646  002D                     returnToPage@page:	
  6647                           ; 1 bytes @ 0xD
  6648                           
  6649  002D                     ___bmul@multiplicand:	
  6650                           ; 1 bytes @ 0xD
  6651                           
  6652                           
  6653                           ; 1 bytes @ 0xD
  6654  002D                     	ds	1
  6655  002E                     ??___bmul:	
  6656  002E                     ??___xxtofl:	
  6657                           ; 1 bytes @ 0xE
  6658                           
  6659  002E                     paging@currentPage:	
  6660                           ; 1 bytes @ 0xE
  6661                           
  6662  002E                     returnToPage@n:	
  6663                           ; 1 bytes @ 0xE
  6664                           
  6665                           
  6666                           ; 1 bytes @ 0xE
  6667  002E                     	ds	1
  6668  002F                     getStateFunc@state:	
  6669  002F                     paging@dir:	
  6670                           ; 1 bytes @ 0xF
  6671                           
  6672  002F                     ___bmul@product:	
  6673                           ; 1 bytes @ 0xF
  6674                           
  6675                           
  6676                           ; 1 bytes @ 0xF
  6677  002F                     	ds	1
  6678  0030                     ?_ema:	
  6679  0030                     getStateFunc@n:	
  6680                           ; 2 bytes @ 0x10
  6681                           
  6682  0030                     getNextState@state:	
  6683                           ; 1 bytes @ 0x10
  6684                           
  6685  0030                     paging@n:	
  6686                           ; 1 bytes @ 0x10
  6687                           
  6688  0030                     ___bmul@multiplier:	
  6689                           ; 1 bytes @ 0x10
  6690                           
  6691  0030                     ema@in:	
  6692                           ; 1 bytes @ 0x10
  6693                           
  6694                           
  6695                           ; 2 bytes @ 0x10
  6696  0030                     	ds	1
  6697  0031                     ?_memcpy:	
  6698  0031                     ?_OLED_print_xy:	
  6699                           ; 1 bytes @ 0x11
  6700                           
  6701  0031                     ?_swap:	
  6702                           ; 1 bytes @ 0x11
  6703                           
  6704  0031                     OLED_print_xy@row:	
  6705                           ; 1 bytes @ 0x11
  6706                           
  6707  0031                     getNextState@n:	
  6708                           ; 1 bytes @ 0x11
  6709                           
  6710  0031                     memcpy@s1:	
  6711                           ; 1 bytes @ 0x11
  6712                           
  6713  0031                     swap@len:	
  6714                           ; 1 bytes @ 0x11
  6715                           
  6716                           
  6717                           ; 2 bytes @ 0x11
  6718  0031                     	ds	1
  6719  0032                     ___xxtofl@sign:	
  6720  0032                     OLED_print_xy@s:	
  6721                           ; 1 bytes @ 0x12
  6722                           
  6723  0032                     ema@average:	
  6724                           ; 2 bytes @ 0x12
  6725                           
  6726  0032                     memcpy@n:	
  6727                           ; 2 bytes @ 0x12
  6728                           
  6729                           
  6730                           ; 2 bytes @ 0x12
  6731  0032                     	ds	1
  6732  0033                     ___xxtofl@exp:	
  6733  0033                     swap@s1:	
  6734                           ; 1 bytes @ 0x13
  6735                           
  6736                           
  6737                           ; 1 bytes @ 0x13
  6738  0033                     	ds	1
  6739  0034                     ??_memcpy:	
  6740  0034                     ??_OLED_print_xy:	
  6741                           ; 1 bytes @ 0x14
  6742                           
  6743  0034                     swap@s2:	
  6744                           ; 1 bytes @ 0x14
  6745                           
  6746  0034                     timeSince@now:	
  6747                           ; 1 bytes @ 0x14
  6748                           
  6749  0034                     ema@alpha:	
  6750                           ; 4 bytes @ 0x14
  6751                           
  6752  0034                     ___xxtofl@arg:	
  6753                           ; 4 bytes @ 0x14
  6754                           
  6755                           
  6756                           ; 4 bytes @ 0x14
  6757  0034                     	ds	1
  6758  0035                     ??_swap:	
  6759  0035                     memcpy@tmp:	
  6760                           ; 1 bytes @ 0x15
  6761                           
  6762  0035                     OLED_print_xy@row_offsets:	
  6763                           ; 1 bytes @ 0x15
  6764                           
  6765                           
  6766                           ; 4 bytes @ 0x15
  6767  0035                     	ds	1
  6768  0036                     swap@c:	
  6769  0036                     memcpy@d1:	
  6770                           ; 1 bytes @ 0x16
  6771                           
  6772                           
  6773                           ; 1 bytes @ 0x16
  6774  0036                     	ds	1
  6775  0037                     memcpy@d:	
  6776                           
  6777                           ; 1 bytes @ 0x17
  6778  0037                     	ds	1
  6779  0038                     ??_ema:	
  6780  0038                     ?___flmul:	
  6781                           ; 1 bytes @ 0x18
  6782                           
  6783  0038                     memcpy@s:	
  6784                           ; 4 bytes @ 0x18
  6785                           
  6786  0038                     ___flmul@b:	
  6787                           ; 1 bytes @ 0x18
  6788                           
  6789                           
  6790                           ; 4 bytes @ 0x18
  6791  0038                     	ds	1
  6792  0039                     OLED_print_xy@col:	
  6793                           
  6794                           ; 1 bytes @ 0x19
  6795  0039                     	ds	1
  6796  003A                     ??_viewErrorMessage:	
  6797                           
  6798                           ; 1 bytes @ 0x1A
  6799  003A                     	ds	2
  6800  003C                     viewErrorMessage@errorCode:	
  6801  003C                     ___flmul@a:	
  6802                           ; 1 bytes @ 0x1C
  6803                           
  6804                           
  6805                           ; 4 bytes @ 0x1C
  6806  003C                     	ds	4
  6807  0040                     ??___flmul:	
  6808  0040                     ema@tmp0:	
  6809                           ; 1 bytes @ 0x20
  6810                           
  6811                           
  6812                           ; 4 bytes @ 0x20
  6813  0040                     	ds	5
  6814  0045                     ___flmul@sign:	
  6815                           
  6816                           ; 1 bytes @ 0x25
  6817  0045                     	ds	1
  6818  0046                     ___flmul@aexp:	
  6819                           
  6820                           ; 1 bytes @ 0x26
  6821  0046                     	ds	1
  6822  0047                     ___flmul@grs:	
  6823                           
  6824                           ; 4 bytes @ 0x27
  6825  0047                     	ds	4
  6826  004B                     ___flmul@bexp:	
  6827                           
  6828                           ; 1 bytes @ 0x2B
  6829  004B                     	ds	1
  6830  004C                     OLED_loadSpecialChars@n:	
  6831  004C                     ___flmul@prod:	
  6832                           ; 1 bytes @ 0x2C
  6833                           
  6834                           
  6835                           ; 4 bytes @ 0x2C
  6836  004C                     	ds	4
  6837  0050                     ___flmul@temp:	
  6838                           
  6839                           ; 2 bytes @ 0x30
  6840  0050                     	ds	2
  6841  0052                     ?___fladd:	
  6842  0052                     ?___fldiv:	
  6843                           ; 4 bytes @ 0x32
  6844                           
  6845  0052                     ___fladd@b:	
  6846                           ; 4 bytes @ 0x32
  6847                           
  6848  0052                     ___fldiv@a:	
  6849                           ; 4 bytes @ 0x32
  6850                           
  6851                           
  6852                           ; 4 bytes @ 0x32
  6853  0052                     	ds	4
  6854  0056                     ___fladd@a:	
  6855  0056                     ___fldiv@b:	
  6856                           ; 4 bytes @ 0x36
  6857                           
  6858                           
  6859                           ; 4 bytes @ 0x36
  6860  0056                     	ds	4
  6861  005A                     ??___fladd:	
  6862  005A                     ??___fldiv:	
  6863                           ; 1 bytes @ 0x3A
  6864                           
  6865                           
  6866                           ; 1 bytes @ 0x3A
  6867  005A                     	ds	8
  6868  0062                     ___fladd@signs:	
  6869                           
  6870                           ; 1 bytes @ 0x42
  6871  0062                     	ds	1
  6872  0063                     ___fladd@aexp:	
  6873                           
  6874                           ; 1 bytes @ 0x43
  6875  0063                     	ds	1
  6876  0064                     ___fladd@bexp:	
  6877                           
  6878                           ; 1 bytes @ 0x44
  6879  0064                     	ds	1
  6880  0065                     ___fladd@grs:	
  6881                           
  6882                           ; 1 bytes @ 0x45
  6883  0065                     	ds	1
  6884  0066                     ??_getAnalogValues:	
  6885  0066                     ??_spinInput:	
  6886                           ; 1 bytes @ 0x46
  6887                           
  6888  0066                     ??___flsub:	
  6889                           ; 1 bytes @ 0x46
  6890                           
  6891  0066                     checkSensor@dp:	
  6892                           ; 1 bytes @ 0x46
  6893                           
  6894  0066                     ___fltol@sign1:	
  6895                           ; 1 bytes @ 0x46
  6896                           
  6897                           
  6898                           ; 1 bytes @ 0x46
  6899  0066                     	ds	1
  6900  0067                     spinInput@dir:	
  6901  0067                     ___fltol@exp1:	
  6902                           ; 1 bytes @ 0x47
  6903                           
  6904                           
  6905                           ; 1 bytes @ 0x47
  6906  0067                     	ds	1
  6907  0068                     ??_sortCur:	
  6908                           
  6909                           	psect	maintext
  6910  20B6                     __pmaintext:	
  6911                           ; 1 bytes @ 0x48
  6912 ;;
  6913 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6914 ;;
  6915 ;; *************** function _main *****************
  6916 ;; Defined at:
  6917 ;;		line 28 in file "main.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;		None
  6920 ;; Auto vars:     Size  Location     Type
  6921 ;;  sysCheckInte    4   60[BANK2 ] unsigned long 
  6922 ;;  init            1   64[BANK2 ] unsigned char 
  6923 ;; Return value:  Size  Location     Type
  6924 ;;                  1    wreg      void 
  6925 ;; Registers used:
  6926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6927 ;; Tracked objects:
  6928 ;;		On entry : B3F/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6933 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6934 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6935 ;;      Totals:         0       0       1       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6936 ;;Total ram usage:        6 bytes
  6937 ;; Hardware stack levels required when called:   11
  6938 ;; This function calls:
  6939 ;;		_OLED_clearDisplay
  6940 ;;		_OLED_init
  6941 ;;		_OLED_loadSpecialChars
  6942 ;;		_OLED_returnHome
  6943 ;;		_calcRequiredPower
  6944 ;;		_channelThing
  6945 ;;		_checkChannelStatus
  6946 ;;		_checkSensor
  6947 ;;		_getAnalogValues
  6948 ;;		_getLastError
  6949 ;;		_initGlobalData
  6950 ;;		_initialize
  6951 ;;		_menu
  6952 ;;		_setLoadSwitch
  6953 ;;		_systemCheck
  6954 ;;		_timeNow
  6955 ;;		_timeSince
  6956 ;;		_viewErrorMessage
  6957 ;; This function is called by:
  6958 ;;		Startup code after reset
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           
  6963                           ;psect for function _main
  6964  20B6                     _main:	
  6965                           
  6966                           ;main.c: 30:  uint32_t sysCheckInterval = 0;
  6967                           
  6968                           ;incstack = 0
  6969                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6970  20B6  3000               	movlw	0
  6971  20B7  0142               	movlb	2	; select bank2
  6972  20B8  00DF               	movwf	(main@sysCheckInterval+3)^(0+256)
  6973  20B9  3000               	movlw	0
  6974  20BA  00DE               	movwf	(main@sysCheckInterval+2)^(0+256)
  6975  20BB  3000               	movlw	0
  6976  20BC  00DD               	movwf	(main@sysCheckInterval+1)^(0+256)
  6977  20BD  3000               	movlw	0
  6978  20BE  00DC               	movwf	main@sysCheckInterval^(0+256)
  6979                           
  6980                           ;main.c: 31:  uint8_t init = 1;
  6981  20BF  01E0               	clrf	main@init^(0+256)
  6982  20C0  0AE0               	incf	main@init^(0+256),f
  6983                           
  6984                           ;main.c: 33:  initialize();
  6985  20C1  31A9  21AC  31A0   	fcall	_initialize
  6986                           
  6987                           ;main.c: 34:  LATBbits.LATB5 = 1;
  6988  20C4  0140               	movlb	0	; select bank0
  6989  20C5  1699               	bsf	25,5	;volatile
  6990                           
  6991                           ;main.c: 35:  OLED_init();
  6992  20C6  31AE  2652  31A0   	fcall	_OLED_init
  6993                           
  6994                           ;main.c: 36:  OLED_loadSpecialChars();
  6995  20C9  31B5  25E4  31A0   	fcall	_OLED_loadSpecialChars
  6996                           
  6997                           ;main.c: 37:  OLED_returnHome();
  6998  20CC  3187  27FA  31A0   	fcall	_OLED_returnHome
  6999                           
  7000                           ;main.c: 38:  OLED_clearDisplay();
  7001  20CF  31B4  24AA  31A0   	fcall	_OLED_clearDisplay
  7002                           
  7003                           ;main.c: 39:  initGlobalData(&data);
  7004  20D2  3046               	movlw	70
  7005  20D3  0140               	movlb	0	; select bank0
  7006  20D4  00A4               	movwf	initGlobalData@data
  7007  20D5  3027               	movlw	39
  7008  20D6  00A5               	movwf	initGlobalData@data+1
  7009  20D7  3198  201C  31A0   	fcall	_initGlobalData
  7010                           
  7011                           ;main.c: 40:  setLoadSwitch(1);
  7012  20DA  3001               	movlw	1
  7013  20DB  31B4  24AE  31A0   	fcall	_setLoadSwitch
  7014  20DE                     l113:	
  7015                           ;main.c: 42:  while (1) {
  7016                           
  7017  20DE  0064               	clrwdt	;# 
  7018                           
  7019                           ;main.c: 46:   getAnalogValues(&data);
  7020  20DF  3046               	movlw	70
  7021  20E0  0141               	movlb	1	; select bank1
  7022  20E1  00AD               	movwf	getAnalogValues@data^(0+128)
  7023  20E2  3027               	movlw	39
  7024  20E3  00AE               	movwf	(getAnalogValues@data^(0+128)+1)
  7025  20E4  319C  2472  31A0   	fcall	_getAnalogValues
  7026                           
  7027                           ;main.c: 48:   if (timeSince(sysCheckInterval) > 5) {
  7028  20E7  0142               	movlb	2	; select bank2
  7029  20E8  085F               	movf	(main@sysCheckInterval+3)^(0+256),w
  7030  20E9  0140               	movlb	0	; select bank0
  7031  20EA  00AB               	movwf	timeSince@since+3
  7032  20EB  0142               	movlb	2	; select bank2
  7033  20EC  085E               	movf	(main@sysCheckInterval+2)^(0+256),w
  7034  20ED  0140               	movlb	0	; select bank0
  7035  20EE  00AA               	movwf	timeSince@since+2
  7036  20EF  0142               	movlb	2	; select bank2
  7037  20F0  085D               	movf	(main@sysCheckInterval+1)^(0+256),w
  7038  20F1  0140               	movlb	0	; select bank0
  7039  20F2  00A9               	movwf	timeSince@since+1
  7040  20F3  0142               	movlb	2	; select bank2
  7041  20F4  085C               	movf	main@sysCheckInterval^(0+256),w
  7042  20F5  0140               	movlb	0	; select bank0
  7043  20F6  00A8               	movwf	timeSince@since
  7044  20F7  3187  27A4  31A0   	fcall	_timeSince
  7045  20FA  0140               	movlb	0	; select bank0
  7046  20FB  082B               	movf	?_timeSince+3,w
  7047  20FC  1D03               	btfss	3,2
  7048  20FD  2908               	goto	l8219
  7049  20FE  082A               	movf	?_timeSince+2,w
  7050  20FF  1D03               	btfss	3,2
  7051  2100  2908               	goto	l8219
  7052  2101  0829               	movf	?_timeSince+1,w
  7053  2102  1D03               	btfss	3,2
  7054  2103  2908               	goto	l8219
  7055  2104  3006               	movlw	6
  7056  2105  0228               	subwf	?_timeSince,w
  7057  2106  1C03               	btfss	3,0
  7058  2107  2923               	goto	l8223
  7059  2108                     l8219:	
  7060                           
  7061                           ;main.c: 49:    sysCheckInterval = timeNow();
  7062  2108  31A8  2000  31A0   	fcall	_timeNow
  7063  210B  0140               	movlb	0	; select bank0
  7064  210C  0827               	movf	?_timeNow+3,w
  7065  210D  0142               	movlb	2	; select bank2
  7066  210E  00DF               	movwf	(main@sysCheckInterval+3)^(0+256)
  7067  210F  0140               	movlb	0	; select bank0
  7068  2110  0826               	movf	?_timeNow+2,w
  7069  2111  0142               	movlb	2	; select bank2
  7070  2112  00DE               	movwf	(main@sysCheckInterval+2)^(0+256)
  7071  2113  0140               	movlb	0	; select bank0
  7072  2114  0825               	movf	?_timeNow+1,w
  7073  2115  0142               	movlb	2	; select bank2
  7074  2116  00DD               	movwf	(main@sysCheckInterval+1)^(0+256)
  7075  2117  0140               	movlb	0	; select bank0
  7076  2118  0824               	movf	?_timeNow,w
  7077  2119  0142               	movlb	2	; select bank2
  7078  211A  00DC               	movwf	main@sysCheckInterval^(0+256)
  7079                           
  7080                           ;main.c: 50:    systemCheck(&data);
  7081  211B  3046               	movlw	70
  7082  211C  0141               	movlb	1	; select bank1
  7083  211D  00C1               	movwf	systemCheck@data^(0+128)
  7084  211E  3027               	movlw	39
  7085  211F  00C2               	movwf	(systemCheck@data^(0+128)+1)
  7086  2120  3190  2033  31A0   	fcall	_systemCheck
  7087  2123                     l8223:	
  7088                           
  7089                           ;main.c: 53:   if (checkSensor(&data)) {
  7090  2123  3046               	movlw	70
  7091  2124  0141               	movlb	1	; select bank1
  7092  2125  00B9               	movwf	checkSensor@data^(0+128)
  7093  2126  3027               	movlw	39
  7094  2127  00BA               	movwf	(checkSensor@data^(0+128)+1)
  7095  2128  31A6  267C  31A0   	fcall	_checkSensor
  7096  212B  3A00               	xorlw	0
  7097  212C  1903               	skipnz
  7098  212D  2938               	goto	l8229
  7099                           
  7100                           ;main.c: 54:    init = 0;
  7101  212E  0142               	movlb	2	; select bank2
  7102  212F  01E0               	clrf	main@init^(0+256)
  7103                           
  7104                           ;main.c: 56:    calcRequiredPower(&data);
  7105  2130  3046               	movlw	70
  7106  2131  0141               	movlb	1	; select bank1
  7107  2132  00AD               	movwf	calcRequiredPower@data^(0+128)
  7108  2133  3027               	movlw	39
  7109  2134  00AE               	movwf	(calcRequiredPower@data^(0+128)+1)
  7110  2135  3180  20E3  31A0   	fcall	_calcRequiredPower
  7111  2138                     l8229:	
  7112                           
  7113                           ;main.c: 60:    if (! init) {
  7114  2138  0142               	movlb	2	; select bank2
  7115  2139  0860               	movf	main@init^(0+256),w
  7116  213A  1D03               	btfss	3,2
  7117  213B  294F               	goto	l8235
  7118                           
  7119                           ;main.c: 61:     if (checkChannelStatus(&data))
  7120  213C  3046               	movlw	70
  7121  213D  0141               	movlb	1	; select bank1
  7122  213E  00B9               	movwf	checkChannelStatus@data^(0+128)
  7123  213F  3027               	movlw	39
  7124  2140  00BA               	movwf	(checkChannelStatus@data^(0+128)+1)
  7125  2141  3189  2183  31A0   	fcall	_checkChannelStatus
  7126  2144  3A00               	xorlw	0
  7127  2145  1903               	skipnz
  7128  2146  294F               	goto	l8235
  7129                           
  7130                           ;main.c: 62:      channelThing(&data);
  7131  2147  3046               	movlw	70
  7132  2148  0141               	movlb	1	; select bank1
  7133  2149  00D6               	movwf	channelThing@data^(0+128)
  7134  214A  3027               	movlw	39
  7135  214B  00D7               	movwf	(channelThing@data^(0+128)+1)
  7136  214C  318C  2479  31A0   	fcall	_channelThing
  7137  214F                     l8235:	
  7138                           
  7139                           ;main.c: 65:   if (getLastError() != NO_ERROR)
  7140  214F  31B5  2536  31A0   	fcall	_getLastError
  7141  2152  3A00               	xorlw	0
  7142  2153  1903               	skipnz
  7143  2154  2959               	goto	l8239
  7144                           
  7145                           ;main.c: 66:    viewErrorMessage();
  7146  2155  31A3  23CC  31A0   	fcall	_viewErrorMessage
  7147  2158  2961               	goto	l8241
  7148  2159                     l8239:	
  7149                           
  7150                           ;main.c: 68:    menu(&data);
  7151  2159  3046               	movlw	70
  7152  215A  0141               	movlb	1	; select bank1
  7153  215B  00D0               	movwf	menu@data^(0+128)
  7154  215C  3027               	movlw	39
  7155  215D  00D1               	movwf	(menu@data^(0+128)+1)
  7156  215E  31A2  22ED  31A0   	fcall	_menu
  7157  2161                     l8241:	
  7158                           
  7159                           ;main.c: 71:   _delay((unsigned long)((20)*(4000000UL/4000.0)));
  7160  2161  301A               	movlw	26
  7161  2162  0141               	movlb	1	; select bank1
  7162  2163  00EC               	movwf	??_main^(0+128)
  7163  2164  30F8               	movlw	248
  7164  2165                     u11197:	
  7165  2165  0B89               	decfsz	9,f
  7166  2166  2965               	goto	u11197
  7167  2167  0BEC               	decfsz	??_main^(0+128),f
  7168  2168  2965               	goto	u11197
  7169  2169  0000               	nop
  7170  216A  28DE               	goto	l113
  7171  216B                     __end_of_main:	
  7172                           
  7173                           	psect	text1
  7174  23CC                     __ptext1:	
  7175 ;; *************** function _viewErrorMessage *****************
  7176 ;; Defined at:
  7177 ;;		line 13 in file "error.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  errorCode       1   28[BANK0 ] enum E7830
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      void 
  7184 ;; Registers used:
  7185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7193 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7194 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7195 ;;Total ram usage:        3 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    8
  7198 ;; This function calls:
  7199 ;;		_OLED_print_xy
  7200 ;;		_OLED_returnHome
  7201 ;;		_getLastError
  7202 ;;		_getPB
  7203 ;;		_removeLastError
  7204 ;;		_setLoadSwitch
  7205 ;; This function is called by:
  7206 ;;		_main
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           
  7211                           ;psect for function _viewErrorMessage
  7212  23CC                     _viewErrorMessage:	
  7213                           
  7214                           ;error.c: 15:  enum e_errorcode errorCode = getLastError();
  7215                           
  7216                           ;incstack = 0
  7217                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7218  23CC  31B5  2536  31A3   	fcall	_getLastError
  7219  23CF  0140               	movlb	0	; select bank0
  7220  23D0  00BA               	movwf	??_viewErrorMessage
  7221  23D1  083A               	movf	??_viewErrorMessage,w
  7222  23D2  00BC               	movwf	viewErrorMessage@errorCode
  7223                           
  7224                           ;error.c: 16:  OLED_returnHome();
  7225  23D3  3187  27FA  31A3   	fcall	_OLED_returnHome
  7226                           
  7227                           ;error.c: 17:  switch(errorCode) {
  7228  23D6  2CDD               	goto	l8139
  7229  23D7                     l8111:	
  7230                           
  7231                           ;error.c: 19:   OLED_print_xy(0, 0, "Heater      ");
  7232  23D7  01B1               	clrf	OLED_print_xy@row
  7233  23D8  3041               	movlw	low (STR_62| (0+32768))
  7234  23D9  00B2               	movwf	OLED_print_xy@s
  7235  23DA  30B8               	movlw	high (STR_62| (0+32768))
  7236  23DB  00B3               	movwf	OLED_print_xy@s+1
  7237  23DC  3000               	movlw	0
  7238  23DD  31B7  2727  31A3   	fcall	_OLED_print_xy
  7239                           
  7240                           ;error.c: 20:   OLED_print_xy(0, 1, "removed     ");
  7241  23E0  0140               	movlb	0	; select bank0
  7242  23E1  01B1               	clrf	OLED_print_xy@row
  7243  23E2  0AB1               	incf	OLED_print_xy@row,f
  7244  23E3  3075               	movlw	low (STR_63| (0+32768))
  7245  23E4  00B2               	movwf	OLED_print_xy@s
  7246  23E5  30B8               	movlw	high (STR_63| (0+32768))
  7247  23E6  00B3               	movwf	OLED_print_xy@s+1
  7248  23E7  3000               	movlw	0
  7249  23E8  31B7  2727  31A3   	fcall	_OLED_print_xy
  7250                           
  7251                           ;error.c: 21:   break;
  7252  23EB  2D09               	goto	l8141
  7253  23EC                     l8113:	
  7254                           
  7255                           ;error.c: 23:   OLED_print_xy(0, 0, "Output      ");
  7256  23EC  01B1               	clrf	OLED_print_xy@row
  7257  23ED  305B               	movlw	low (STR_64| (0+32768))
  7258  23EE  00B2               	movwf	OLED_print_xy@s
  7259  23EF  30B8               	movlw	high (STR_64| (0+32768))
  7260  23F0  00B3               	movwf	OLED_print_xy@s+1
  7261  23F1  3000               	movlw	0
  7262  23F2  31B7  2727  31A3   	fcall	_OLED_print_xy
  7263                           
  7264                           ;error.c: 24:   OLED_print_xy(0, 1, "shorted!    ");
  7265  23F5  0140               	movlb	0	; select bank0
  7266  23F6  01B1               	clrf	OLED_print_xy@row
  7267  23F7  0AB1               	incf	OLED_print_xy@row,f
  7268  23F8  309C               	movlw	low (STR_65| (0+32768))
  7269  23F9  00B2               	movwf	OLED_print_xy@s
  7270  23FA  30B8               	movlw	high (STR_65| (0+32768))
  7271  23FB  00B3               	movwf	OLED_print_xy@s+1
  7272  23FC  3000               	movlw	0
  7273  23FD  31B7  2727  31A3   	fcall	_OLED_print_xy
  7274                           
  7275                           ;error.c: 25:   break;
  7276  2400  2D09               	goto	l8141
  7277  2401                     l8115:	
  7278                           
  7279                           ;error.c: 27:   OLED_print_xy(0, 0, "Overcurrent ");
  7280  2401  01B1               	clrf	OLED_print_xy@row
  7281  2402  3004               	movlw	low (STR_66| (0+32768))
  7282  2403  00B2               	movwf	OLED_print_xy@s
  7283  2404  30B9               	movlw	high (STR_66| (0+32768))
  7284  2405  00B3               	movwf	OLED_print_xy@s+1
  7285  2406  3000               	movlw	0
  7286  2407  31B7  2727  31A3   	fcall	_OLED_print_xy
  7287                           
  7288                           ;error.c: 28:   OLED_print_xy(0, 1, "detected!   ");
  7289  240A  0140               	movlb	0	; select bank0
  7290  240B  01B1               	clrf	OLED_print_xy@row
  7291  240C  0AB1               	incf	OLED_print_xy@row,f
  7292  240D  30C3               	movlw	low (STR_67| (0+32768))
  7293  240E  00B2               	movwf	OLED_print_xy@s
  7294  240F  30B8               	movlw	high (STR_67| (0+32768))
  7295  2410  00B3               	movwf	OLED_print_xy@s+1
  7296  2411  3000               	movlw	0
  7297  2412  31B7  2727  31A3   	fcall	_OLED_print_xy
  7298                           
  7299                           ;error.c: 29:   break;
  7300  2415  2D09               	goto	l8141
  7301  2416                     l8117:	
  7302                           
  7303                           ;error.c: 31:   OLED_print_xy(0, 0, "Heater      ");
  7304  2416  01B1               	clrf	OLED_print_xy@row
  7305  2417  3041               	movlw	low (STR_62| (0+32768))
  7306  2418  00B2               	movwf	OLED_print_xy@s
  7307  2419  30B8               	movlw	high (STR_62| (0+32768))
  7308  241A  00B3               	movwf	OLED_print_xy@s+1
  7309  241B  3000               	movlw	0
  7310  241C  31B7  2727  31A3   	fcall	_OLED_print_xy
  7311                           
  7312                           ;error.c: 32:   OLED_print_xy(0, 1, "overcurrent ");
  7313  241F  0140               	movlb	0	; select bank0
  7314  2420  01B1               	clrf	OLED_print_xy@row
  7315  2421  0AB1               	incf	OLED_print_xy@row,f
  7316  2422  3011               	movlw	low (STR_69| (0+32768))
  7317  2423  00B2               	movwf	OLED_print_xy@s
  7318  2424  30B9               	movlw	high (STR_69| (0+32768))
  7319  2425  00B3               	movwf	OLED_print_xy@s+1
  7320  2426  3000               	movlw	0
  7321  2427  31B7  2727  31A3   	fcall	_OLED_print_xy
  7322                           
  7323                           ;error.c: 33:   break;
  7324  242A  2D09               	goto	l8141
  7325  242B                     l8119:	
  7326                           
  7327                           ;error.c: 35:   OLED_print_xy(0, 0, "Supply volt.");
  7328  242B  01B1               	clrf	OLED_print_xy@row
  7329  242C  301E               	movlw	low (STR_70| (0+32768))
  7330  242D  00B2               	movwf	OLED_print_xy@s
  7331  242E  30B9               	movlw	high (STR_70| (0+32768))
  7332  242F  00B3               	movwf	OLED_print_xy@s+1
  7333  2430  3000               	movlw	0
  7334  2431  31B7  2727  31A3   	fcall	_OLED_print_xy
  7335                           
  7336                           ;error.c: 36:   OLED_print_xy(0, 1, "too high!   ");
  7337  2434  0140               	movlb	0	; select bank0
  7338  2435  01B1               	clrf	OLED_print_xy@row
  7339  2436  0AB1               	incf	OLED_print_xy@row,f
  7340  2437  30D0               	movlw	low (STR_71| (0+32768))
  7341  2438  00B2               	movwf	OLED_print_xy@s
  7342  2439  30B8               	movlw	high (STR_71| (0+32768))
  7343  243A  00B3               	movwf	OLED_print_xy@s+1
  7344  243B  3000               	movlw	0
  7345  243C  31B7  2727  31A3   	fcall	_OLED_print_xy
  7346                           
  7347                           ;error.c: 37:   break;
  7348  243F  2D09               	goto	l8141
  7349  2440                     l8121:	
  7350                           
  7351                           ;error.c: 39:   OLED_print_xy(0, 0, "Supply volt.");
  7352  2440  01B1               	clrf	OLED_print_xy@row
  7353  2441  301E               	movlw	low (STR_70| (0+32768))
  7354  2442  00B2               	movwf	OLED_print_xy@s
  7355  2443  30B9               	movlw	high (STR_70| (0+32768))
  7356  2444  00B3               	movwf	OLED_print_xy@s+1
  7357  2445  3000               	movlw	0
  7358  2446  31B7  2727  31A3   	fcall	_OLED_print_xy
  7359                           
  7360                           ;error.c: 40:   OLED_print_xy(0, 1, "too low!    ");
  7361  2449  0140               	movlb	0	; select bank0
  7362  244A  01B1               	clrf	OLED_print_xy@row
  7363  244B  0AB1               	incf	OLED_print_xy@row,f
  7364  244C  30A9               	movlw	low (STR_73| (0+32768))
  7365  244D  00B2               	movwf	OLED_print_xy@s
  7366  244E  30B8               	movlw	high (STR_73| (0+32768))
  7367  244F  00B3               	movwf	OLED_print_xy@s+1
  7368  2450  3000               	movlw	0
  7369  2451  31B7  2727  31A3   	fcall	_OLED_print_xy
  7370                           
  7371                           ;error.c: 41:   break;
  7372  2454  2D09               	goto	l8141
  7373  2455                     l8123:	
  7374                           
  7375                           ;error.c: 43:   OLED_print_xy(0, 0, "Sensor      ");
  7376  2455  01B1               	clrf	OLED_print_xy@row
  7377  2456  304E               	movlw	low (STR_74| (0+32768))
  7378  2457  00B2               	movwf	OLED_print_xy@s
  7379  2458  30B8               	movlw	high (STR_74| (0+32768))
  7380  2459  00B3               	movwf	OLED_print_xy@s+1
  7381  245A  3000               	movlw	0
  7382  245B  31B7  2727  31A3   	fcall	_OLED_print_xy
  7383                           
  7384                           ;error.c: 44:   OLED_print_xy(0, 1, "timeout     ");
  7385  245E  0140               	movlb	0	; select bank0
  7386  245F  01B1               	clrf	OLED_print_xy@row
  7387  2460  0AB1               	incf	OLED_print_xy@row,f
  7388  2461  308F               	movlw	low (STR_75| (0+32768))
  7389  2462  00B2               	movwf	OLED_print_xy@s
  7390  2463  30B8               	movlw	high (STR_75| (0+32768))
  7391  2464  00B3               	movwf	OLED_print_xy@s+1
  7392  2465  3000               	movlw	0
  7393  2466  31B7  2727  31A3   	fcall	_OLED_print_xy
  7394                           
  7395                           ;error.c: 45:   break;
  7396  2469  2D09               	goto	l8141
  7397  246A                     l8125:	
  7398                           
  7399                           ;error.c: 47:   OLED_print_xy(0, 0, "Sensor wrong");
  7400  246A  01B1               	clrf	OLED_print_xy@row
  7401  246B  3038               	movlw	low (STR_76| (0+32768))
  7402  246C  00B2               	movwf	OLED_print_xy@s
  7403  246D  30B9               	movlw	high (STR_76| (0+32768))
  7404  246E  00B3               	movwf	OLED_print_xy@s+1
  7405  246F  3000               	movlw	0
  7406  2470  31B7  2727  31A3   	fcall	_OLED_print_xy
  7407                           
  7408                           ;error.c: 48:   OLED_print_xy(0, 1, "checksum    ");
  7409  2473  0140               	movlb	0	; select bank0
  7410  2474  01B1               	clrf	OLED_print_xy@row
  7411  2475  0AB1               	incf	OLED_print_xy@row,f
  7412  2476  30B6               	movlw	low (STR_77| (0+32768))
  7413  2477  00B2               	movwf	OLED_print_xy@s
  7414  2478  30B8               	movlw	high (STR_77| (0+32768))
  7415  2479  00B3               	movwf	OLED_print_xy@s+1
  7416  247A  3000               	movlw	0
  7417  247B  31B7  2727  31A3   	fcall	_OLED_print_xy
  7418                           
  7419                           ;error.c: 49:   break;
  7420  247E  2D09               	goto	l8141
  7421  247F                     l8127:	
  7422                           
  7423                           ;error.c: 51:   OLED_print_xy(0, 0, "OVERCURRENT ");
  7424  247F  01B1               	clrf	OLED_print_xy@row
  7425  2480  30EA               	movlw	low (STR_78| (0+32768))
  7426  2481  00B2               	movwf	OLED_print_xy@s
  7427  2482  30B8               	movlw	high (STR_78| (0+32768))
  7428  2483  00B3               	movwf	OLED_print_xy@s+1
  7429  2484  3000               	movlw	0
  7430  2485  31B7  2727  31A3   	fcall	_OLED_print_xy
  7431                           
  7432                           ;error.c: 52:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7433  2488  0140               	movlb	0	; select bank0
  7434  2489  01B1               	clrf	OLED_print_xy@row
  7435  248A  0AB1               	incf	OLED_print_xy@row,f
  7436  248B  302B               	movlw	low (STR_79| (0+32768))
  7437  248C  00B2               	movwf	OLED_print_xy@s
  7438  248D  30B9               	movlw	high (STR_79| (0+32768))
  7439  248E  00B3               	movwf	OLED_print_xy@s+1
  7440  248F  3000               	movlw	0
  7441  2490  31B7  2727  31A3   	fcall	_OLED_print_xy
  7442                           
  7443                           ;error.c: 53:   break;
  7444  2493  2D09               	goto	l8141
  7445  2494                     l8129:	
  7446                           
  7447                           ;error.c: 55:   OLED_print_xy(0, 0, "Overcurrent ");
  7448  2494  01B1               	clrf	OLED_print_xy@row
  7449  2495  3004               	movlw	low (STR_66| (0+32768))
  7450  2496  00B2               	movwf	OLED_print_xy@s
  7451  2497  30B9               	movlw	high (STR_66| (0+32768))
  7452  2498  00B3               	movwf	OLED_print_xy@s+1
  7453  2499  3000               	movlw	0
  7454  249A  31B7  2727  31A3   	fcall	_OLED_print_xy
  7455                           
  7456                           ;error.c: 56:   OLED_print_xy(0, 1, "Please check");
  7457  249D  0140               	movlb	0	; select bank0
  7458  249E  01B1               	clrf	OLED_print_xy@row
  7459  249F  0AB1               	incf	OLED_print_xy@row,f
  7460  24A0  3045               	movlw	low (STR_81| (0+32768))
  7461  24A1  00B2               	movwf	OLED_print_xy@s
  7462  24A2  30B9               	movlw	high (STR_81| (0+32768))
  7463  24A3  00B3               	movwf	OLED_print_xy@s+1
  7464  24A4  3000               	movlw	0
  7465  24A5  31B7  2727  31A3   	fcall	_OLED_print_xy
  7466                           
  7467                           ;error.c: 57:   if (getPB() == PB_SHORT)
  7468  24A8  31B5  251F  31A3   	fcall	_getPB
  7469  24AB  3A01               	xorlw	1
  7470  24AC  1D03               	skipz
  7471  24AD  2D09               	goto	l8141
  7472                           
  7473                           ;error.c: 58:    setLoadSwitch(1);
  7474  24AE  3001               	movlw	1
  7475  24AF  31B4  24AE  31A3   	fcall	_setLoadSwitch
  7476  24B2  2D09               	goto	l8141
  7477  24B3                     l8135:	
  7478                           
  7479                           ;error.c: 61:   OLED_print_xy(0, 0, "Menu broken ");
  7480  24B3  01B1               	clrf	OLED_print_xy@row
  7481  24B4  30F7               	movlw	low (STR_82| (0+32768))
  7482  24B5  00B2               	movwf	OLED_print_xy@s
  7483  24B6  30B8               	movlw	high (STR_82| (0+32768))
  7484  24B7  00B3               	movwf	OLED_print_xy@s+1
  7485  24B8  3000               	movlw	0
  7486  24B9  31B7  2727  31A3   	fcall	_OLED_print_xy
  7487                           
  7488                           ;error.c: 62:   OLED_print_xy(0, 1, "    :-)     ");
  7489  24BC  0140               	movlb	0	; select bank0
  7490  24BD  01B1               	clrf	OLED_print_xy@row
  7491  24BE  0AB1               	incf	OLED_print_xy@row,f
  7492  24BF  3068               	movlw	low (STR_83| (0+32768))
  7493  24C0  00B2               	movwf	OLED_print_xy@s
  7494  24C1  30B8               	movlw	high (STR_83| (0+32768))
  7495  24C2  00B3               	movwf	OLED_print_xy@s+1
  7496  24C3  3000               	movlw	0
  7497  24C4  31B7  2727  31A3   	fcall	_OLED_print_xy
  7498                           
  7499                           ;error.c: 63:   break;
  7500  24C7  2D09               	goto	l8141
  7501  24C8                     l8137:	
  7502                           
  7503                           ;error.c: 65:   OLED_print_xy(0, 0, "Unknown     ");
  7504  24C8  01B1               	clrf	OLED_print_xy@row
  7505  24C9  3082               	movlw	low (STR_84| (0+32768))
  7506  24CA  00B2               	movwf	OLED_print_xy@s
  7507  24CB  30B8               	movlw	high (STR_84| (0+32768))
  7508  24CC  00B3               	movwf	OLED_print_xy@s+1
  7509  24CD  3000               	movlw	0
  7510  24CE  31B7  2727  31A3   	fcall	_OLED_print_xy
  7511                           
  7512                           ;error.c: 66:   OLED_print_xy(0, 1, "error code  ");
  7513  24D1  0140               	movlb	0	; select bank0
  7514  24D2  01B1               	clrf	OLED_print_xy@row
  7515  24D3  0AB1               	incf	OLED_print_xy@row,f
  7516  24D4  30DD               	movlw	low (STR_85| (0+32768))
  7517  24D5  00B2               	movwf	OLED_print_xy@s
  7518  24D6  30B8               	movlw	high (STR_85| (0+32768))
  7519  24D7  00B3               	movwf	OLED_print_xy@s+1
  7520  24D8  3000               	movlw	0
  7521  24D9  31B7  2727  31A3   	fcall	_OLED_print_xy
  7522                           
  7523                           ;error.c: 67:  }
  7524  24DC  2D09               	goto	l8141
  7525  24DD                     l8139:	
  7526  24DD  0140               	movlb	0	; select bank0
  7527  24DE  083C               	movf	viewErrorMessage@errorCode,w
  7528  24DF  00BA               	movwf	??_viewErrorMessage
  7529  24E0  01BB               	clrf	??_viewErrorMessage+1
  7530                           
  7531                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7532                           ; Switch size 1, requested type "simple"
  7533                           ; Number of cases is 1, Range of values is 0 to 0
  7534                           ; switch strategies available:
  7535                           ; Name         Instructions Cycles
  7536                           ; simple_byte            4     3 (average)
  7537                           ; direct_byte            8     6 (fixed)
  7538                           ; jumptable            260     6 (fixed)
  7539                           ;	Chosen strategy is simple_byte
  7540  24E1  083B               	movf	??_viewErrorMessage+1,w
  7541  24E2  3A00               	xorlw	0	; case 0
  7542  24E3  1903               	skipnz
  7543  24E4  2CE6               	goto	l8343
  7544  24E5  2CC8               	goto	l8137
  7545  24E6                     l8343:	
  7546                           
  7547                           ; Switch size 1, requested type "simple"
  7548                           ; Number of cases is 11, Range of values is 1 to 11
  7549                           ; switch strategies available:
  7550                           ; Name         Instructions Cycles
  7551                           ; direct_byte           31     9 (fixed)
  7552                           ; simple_byte           34    18 (average)
  7553                           ; jumptable            263     9 (fixed)
  7554                           ;	Chosen strategy is simple_byte
  7555  24E6  083A               	movf	??_viewErrorMessage,w
  7556  24E7  3A01               	xorlw	1	; case 1
  7557  24E8  1903               	skipnz
  7558  24E9  2BD7               	goto	l8111
  7559  24EA  3A03               	xorlw	3	; case 2
  7560  24EB  1903               	skipnz
  7561  24EC  2BEC               	goto	l8113
  7562  24ED  3A01               	xorlw	1	; case 3
  7563  24EE  1903               	skipnz
  7564  24EF  2C01               	goto	l8115
  7565  24F0  3A07               	xorlw	7	; case 4
  7566  24F1  1903               	skipnz
  7567  24F2  2C16               	goto	l8117
  7568  24F3  3A01               	xorlw	1	; case 5
  7569  24F4  1903               	skipnz
  7570  24F5  2C2B               	goto	l8119
  7571  24F6  3A03               	xorlw	3	; case 6
  7572  24F7  1903               	skipnz
  7573  24F8  2C40               	goto	l8121
  7574  24F9  3A01               	xorlw	1	; case 7
  7575  24FA  1903               	skipnz
  7576  24FB  2C55               	goto	l8123
  7577  24FC  3A0F               	xorlw	15	; case 8
  7578  24FD  1903               	skipnz
  7579  24FE  2C6A               	goto	l8125
  7580  24FF  3A01               	xorlw	1	; case 9
  7581  2500  1903               	skipnz
  7582  2501  2C7F               	goto	l8127
  7583  2502  3A03               	xorlw	3	; case 10
  7584  2503  1903               	skipnz
  7585  2504  2C94               	goto	l8129
  7586  2505  3A01               	xorlw	1	; case 11
  7587  2506  1903               	skipnz
  7588  2507  2CB3               	goto	l8135
  7589  2508  2CC8               	goto	l8137
  7590  2509                     l8141:	
  7591                           
  7592                           ;error.c: 69:  if (getPB() == PB_SHORT)
  7593  2509  31B5  251F  31A3   	fcall	_getPB
  7594  250C  3A01               	xorlw	1
  7595  250D  1D03               	skipz
  7596  250E  2D11               	goto	l8145
  7597                           
  7598                           ;error.c: 70:   removeLastError();
  7599  250F  31B5  256E         	fcall	_removeLastError
  7600  2511                     l8145:	
  7601                           
  7602                           ;error.c: 72:  g_screenRefresh = 1;
  7603  2511  0141               	movlb	1	; select bank1
  7604  2512  01ED               	clrf	_g_screenRefresh^(0+128)
  7605  2513  0AED               	incf	_g_screenRefresh^(0+128),f
  7606  2514  0008               	return
  7607  2515                     __end_of_viewErrorMessage:	
  7608                           
  7609                           	psect	text2
  7610  356E                     __ptext2:	
  7611 ;; *************** function _removeLastError *****************
  7612 ;; Defined at:
  7613 ;;		line 91 in file "error.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;		None
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;		None
  7618 ;; Return value:  Size  Location     Type
  7619 ;;                  1    wreg      void 
  7620 ;; Registers used:
  7621 ;;		wreg, status,2, status,0, pclath, cstack
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7630 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7631 ;;Total ram usage:        1 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    4
  7634 ;; This function calls:
  7635 ;;		___awmod
  7636 ;; This function is called by:
  7637 ;;		_viewErrorMessage
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           
  7642                           ;psect for function _removeLastError
  7643  356E                     _removeLastError:	
  7644                           
  7645                           ;error.c: 93:  if (head != tail)
  7646                           
  7647                           ;incstack = 0
  7648                           ; Regs used in _removeLastError: [wreg+status,2+status,0+pclath+cstack]
  7649  356E  0142               	movlb	2	; select bank2
  7650  356F  086B               	movf	_head^(0+256),w
  7651  3570  0140               	movlb	0	; select bank0
  7652  3571  0669               	xorwf	_tail,w
  7653  3572  1903               	skipnz
  7654  3573  0008               	return
  7655                           
  7656                           ;error.c: 94:   tail = (tail + 1) % 10;
  7657  3574  300A               	movlw	10
  7658  3575  00A4               	movwf	___awmod@divisor
  7659  3576  3000               	movlw	0
  7660  3577  00A5               	movwf	___awmod@divisor+1
  7661  3578  0869               	movf	_tail,w
  7662  3579  3E01               	addlw	1
  7663  357A  00A6               	movwf	___awmod@dividend
  7664  357B  3000               	movlw	0
  7665  357C  1803               	skipnc
  7666  357D  3001               	movlw	1
  7667  357E  00A7               	movwf	___awmod@dividend+1
  7668  357F  31A8  20D7         	fcall	___awmod
  7669  3581  0140               	movlb	0	; select bank0
  7670  3582  0824               	movf	?___awmod,w
  7671  3583  00AB               	movwf	??_removeLastError
  7672  3584  082B               	movf	??_removeLastError,w
  7673  3585  00E9               	movwf	_tail
  7674  3586  0008               	return
  7675  3587                     __end_of_removeLastError:	
  7676                           
  7677                           	psect	text3
  7678  3536                     __ptext3:	
  7679 ;; *************** function _getLastError *****************
  7680 ;; Defined at:
  7681 ;;		line 84 in file "error.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      enum E8254
  7688 ;; Registers used:
  7689 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7699 ;;Total ram usage:        0 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:    3
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_main
  7706 ;;		_viewErrorMessage
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           
  7711                           ;psect for function _getLastError
  7712  3536                     _getLastError:	
  7713                           
  7714                           ;error.c: 86:  if (head == tail)
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
  7718  3536  0142               	movlb	2	; select bank2
  7719  3537  086B               	movf	_head^(0+256),w
  7720  3538  0140               	movlb	0	; select bank0
  7721  3539  0669               	xorwf	_tail,w
  7722  353A  1D03               	skipz
  7723  353B  2D3E               	goto	l4955
  7724                           
  7725                           ;error.c: 87:   return NO_ERROR;
  7726  353C  3000               	movlw	0
  7727  353D  0008               	return
  7728  353E                     l4955:	
  7729                           
  7730                           ;error.c: 88:  return errorMessageQueue[tail];
  7731  353E  0869               	movf	_tail,w
  7732  353F  3EA0               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7733  3540  0086               	movwf	6
  7734  3541  3002               	movlw	2	; select bank5/6
  7735  3542  0087               	movwf	7
  7736  3543  0801               	movf	1,w
  7737  3544  0008               	return
  7738  3545                     __end_of_getLastError:	
  7739                           
  7740                           	psect	text4
  7741  1033                     __ptext4:	
  7742 ;; *************** function _systemCheck *****************
  7743 ;; Defined at:
  7744 ;;		line 154 in file "system.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;  data            2   33[BANK1 ] PTR struct .
  7747 ;;		 -> data(170), 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;  str             3   39[BANK1 ] unsigned char [3]
  7750 ;;  n               1   42[BANK1 ] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  1    wreg      void 
  7753 ;; Registers used:
  7754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7760 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7761 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7762 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7763 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7764 ;;Total ram usage:       10 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    8
  7767 ;; This function calls:
  7768 ;;		_OLED_clearDisplay
  7769 ;;		_OLED_off
  7770 ;;		_OLED_print_xy
  7771 ;;		_OLED_returnHome
  7772 ;;		___fldiv
  7773 ;;		___flge
  7774 ;;		___flmul
  7775 ;;		___xxtofl
  7776 ;;		_error
  7777 ;;		_getAnalogValue
  7778 ;;		_itoa
  7779 ;;		_setChannelSwitch
  7780 ;;		_setLoadSwitch
  7781 ;;		_setOLEDPower
  7782 ;; This function is called by:
  7783 ;;		_main
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function _systemCheck
  7789  1033                     _systemCheck:	
  7790                           
  7791                           ;system.c: 154: void systemCheck(t_globalData *data);system.c: 155: {;system.c: 156:  ui
      +                          nt8_t n;;system.c: 157:  char str[3];;system.c: 161:  if (data->current > 3.0) {
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7795  1033  3040               	movlw	64
  7796  1034  0141               	movlb	1	; select bank1
  7797  1035  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7798  1036  3040               	movlw	64
  7799  1037  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7800  1038  3000               	movlw	0
  7801  1039  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7802  103A  3000               	movlw	0
  7803  103B  00AD               	movwf	___flge@ff1^(0+128)
  7804  103C  0841               	movf	systemCheck@data^(0+128),w
  7805  103D  0086               	movwf	6
  7806  103E  0842               	movf	(systemCheck@data+1)^(0+128),w
  7807  103F  0087               	movwf	7
  7808  1040  3155               	addfsr 1,21
  7809  1041  3F40               	moviw [0]fsr1
  7810  1042  00B1               	movwf	___flge@ff2^(0+128)
  7811  1043  3F41               	moviw [1]fsr1
  7812  1044  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7813  1045  3F42               	moviw [2]fsr1
  7814  1046  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7815  1047  3F43               	moviw [3]fsr1
  7816  1048  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7817  1049  31AD  25D6  3190   	fcall	___flge
  7818  104C  1803               	btfsc	3,0
  7819  104D  28D6               	goto	l7783
  7820                           
  7821                           ;system.c: 163:   setChannelSwitch(255, 0);
  7822  104E  0140               	movlb	0	; select bank0
  7823  104F  01A4               	clrf	setChannelSwitch@state
  7824  1050  30FF               	movlw	255
  7825  1051  31A9  211D  3190   	fcall	_setChannelSwitch
  7826                           
  7827                           ;system.c: 164:   setLoadSwitch(0);
  7828  1054  3000               	movlw	0
  7829  1055  31B4  24AE  3190   	fcall	_setLoadSwitch
  7830                           
  7831                           ;system.c: 166:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          0) {
  7832  1058  3040               	movlw	64
  7833  1059  0141               	movlb	1	; select bank1
  7834  105A  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7835  105B  3040               	movlw	64
  7836  105C  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7837  105D  3000               	movlw	0
  7838  105E  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7839  105F  3000               	movlw	0
  7840  1060  00AD               	movwf	___flge@ff1^(0+128)
  7841  1061  3045               	movlw	69
  7842  1062  0140               	movlb	0	; select bank0
  7843  1063  00D5               	movwf	___fldiv@a+3
  7844  1064  301F               	movlw	31
  7845  1065  00D4               	movwf	___fldiv@a+2
  7846  1066  30D8               	movlw	216
  7847  1067  00D3               	movwf	___fldiv@a+1
  7848  1068  3000               	movlw	0
  7849  1069  00D2               	movwf	___fldiv@a
  7850  106A  3040               	movlw	64
  7851  106B  00BB               	movwf	___flmul@b+3
  7852  106C  30A0               	movlw	160
  7853  106D  00BA               	movwf	___flmul@b+2
  7854  106E  3000               	movlw	0
  7855  106F  00B9               	movwf	___flmul@b+1
  7856  1070  3000               	movlw	0
  7857  1071  00B8               	movwf	___flmul@b
  7858  1072  3011               	movlw	17
  7859  1073  31B5  2587  3190   	fcall	_getAnalogValue
  7860  1076  0140               	movlb	0	; select bank0
  7861  1077  0824               	movf	?_getAnalogValue,w
  7862  1078  0141               	movlb	1	; select bank1
  7863  1079  00C3               	movwf	??_systemCheck^(0+128)
  7864  107A  0140               	movlb	0	; select bank0
  7865  107B  0825               	movf	?_getAnalogValue+1,w
  7866  107C  0141               	movlb	1	; select bank1
  7867  107D  00C4               	movwf	(??_systemCheck^(0+128)+1)
  7868  107E  01C5               	clrf	(??_systemCheck^(0+128)+2)
  7869  107F  01C6               	clrf	(??_systemCheck^(0+128)+3)
  7870  1080  0846               	movf	(??_systemCheck+3)^(0+128),w
  7871  1081  0140               	movlb	0	; select bank0
  7872  1082  00AD               	movwf	___xxtofl@val+3
  7873  1083  0141               	movlb	1	; select bank1
  7874  1084  0845               	movf	(??_systemCheck+2)^(0+128),w
  7875  1085  0140               	movlb	0	; select bank0
  7876  1086  00AC               	movwf	___xxtofl@val+2
  7877  1087  0141               	movlb	1	; select bank1
  7878  1088  0844               	movf	(??_systemCheck+1)^(0+128),w
  7879  1089  0140               	movlb	0	; select bank0
  7880  108A  00AB               	movwf	___xxtofl@val+1
  7881  108B  0141               	movlb	1	; select bank1
  7882  108C  0843               	movf	??_systemCheck^(0+128),w
  7883  108D  0140               	movlb	0	; select bank0
  7884  108E  00AA               	movwf	___xxtofl@val
  7885  108F  3000               	movlw	0
  7886  1090  31AF  276A  3190   	fcall	___xxtofl
  7887  1093  0140               	movlb	0	; select bank0
  7888  1094  082D               	movf	?___xxtofl+3,w
  7889  1095  00BF               	movwf	___flmul@a+3
  7890  1096  082C               	movf	?___xxtofl+2,w
  7891  1097  00BE               	movwf	___flmul@a+2
  7892  1098  082B               	movf	?___xxtofl+1,w
  7893  1099  00BD               	movwf	___flmul@a+1
  7894  109A  082A               	movf	?___xxtofl,w
  7895  109B  00BC               	movwf	___flmul@a
  7896  109C  3195  25D4  3190   	fcall	___flmul
  7897  109F  0140               	movlb	0	; select bank0
  7898  10A0  083B               	movf	?___flmul+3,w
  7899  10A1  00D9               	movwf	___fldiv@b+3
  7900  10A2  083A               	movf	?___flmul+2,w
  7901  10A3  00D8               	movwf	___fldiv@b+2
  7902  10A4  0839               	movf	?___flmul+1,w
  7903  10A5  00D7               	movwf	___fldiv@b+1
  7904  10A6  0838               	movf	?___flmul,w
  7905  10A7  00D6               	movwf	___fldiv@b
  7906  10A8  319E  2628  3190   	fcall	___fldiv
  7907  10AB  0140               	movlb	0	; select bank0
  7908  10AC  0855               	movf	?___fldiv+3,w
  7909  10AD  0141               	movlb	1	; select bank1
  7910  10AE  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7911  10AF  0140               	movlb	0	; select bank0
  7912  10B0  0854               	movf	?___fldiv+2,w
  7913  10B1  0141               	movlb	1	; select bank1
  7914  10B2  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7915  10B3  0140               	movlb	0	; select bank0
  7916  10B4  0853               	movf	?___fldiv+1,w
  7917  10B5  0141               	movlb	1	; select bank1
  7918  10B6  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7919  10B7  0140               	movlb	0	; select bank0
  7920  10B8  0852               	movf	?___fldiv,w
  7921  10B9  0141               	movlb	1	; select bank1
  7922  10BA  00B1               	movwf	___flge@ff2^(0+128)
  7923  10BB  31AD  25D6  3190   	fcall	___flge
  7924  10BE  1803               	btfsc	3,0
  7925  10BF  28C2               	goto	l7777
  7926                           
  7927                           ;system.c: 169:    error(ERR_NUKED);
  7928  10C0  3009               	movlw	9
  7929  10C1  28D3               	goto	L1
  7930  10C2                     l7777:	
  7931                           ;system.c: 170:   } else {
  7932                           
  7933                           
  7934                           ;system.c: 172:    if (! data->status.OVERCURRENT) {
  7935  10C2  0141               	movlb	1	; select bank1
  7936  10C3  0841               	movf	systemCheck@data^(0+128),w
  7937  10C4  3E29               	addlw	41
  7938  10C5  0086               	movwf	6
  7939  10C6  3000               	movlw	0
  7940  10C7  3D42               	addwfc	(systemCheck@data+1)^(0+128),w
  7941  10C8  0087               	movwf	7
  7942  10C9  1901               	btfsc	1,2
  7943  10CA  28D6               	goto	l7783
  7944                           
  7945                           ;system.c: 173:     data->status.OVERCURRENT = 1;
  7946  10CB  0841               	movf	systemCheck@data^(0+128),w
  7947  10CC  3E29               	addlw	41
  7948  10CD  0086               	movwf	6
  7949  10CE  3000               	movlw	0
  7950  10CF  3D42               	addwfc	(systemCheck@data+1)^(0+128),w
  7951  10D0  0087               	movwf	7
  7952  10D1  1501               	bsf	1,2
  7953                           
  7954                           ;system.c: 174:     error(ERR_OVERCURRENT);
  7955  10D2  300A               	movlw	10
  7956  10D3                     L1:	
  7957  10D3  31B7  27C5  3190   	fcall	_error
  7958  10D6                     l7783:	
  7959                           
  7960                           ;system.c: 184:  if ((data->voltage > 13.8) ||
  7961  10D6  3041               	movlw	65
  7962  10D7  0141               	movlb	1	; select bank1
  7963  10D8  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7964  10D9  305C               	movlw	92
  7965  10DA  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7966  10DB  30CC               	movlw	204
  7967  10DC  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7968  10DD  30CD               	movlw	205
  7969  10DE  00AD               	movwf	___flge@ff1^(0+128)
  7970  10DF  0841               	movf	systemCheck@data^(0+128),w
  7971  10E0  0086               	movwf	6
  7972  10E1  0842               	movf	(systemCheck@data+1)^(0+128),w
  7973  10E2  0087               	movwf	7
  7974  10E3  3151               	addfsr 1,17
  7975  10E4  3F40               	moviw [0]fsr1
  7976  10E5  00B1               	movwf	___flge@ff2^(0+128)
  7977  10E6  3F41               	moviw [1]fsr1
  7978  10E7  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7979  10E8  3F42               	moviw [2]fsr1
  7980  10E9  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7981  10EA  3F43               	moviw [3]fsr1
  7982  10EB  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7983  10EC  31AD  25D6  3190   	fcall	___flge
  7984  10EF  1C03               	btfss	3,0
  7985  10F0  290C               	goto	l7787
  7986  10F1  3041               	movlw	65
  7987  10F2  0141               	movlb	1	; select bank1
  7988  10F3  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7989  10F4  3030               	movlw	48
  7990  10F5  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7991  10F6  3000               	movlw	0
  7992  10F7  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7993  10F8  3000               	movlw	0
  7994  10F9  00AD               	movwf	___flge@ff1^(0+128)
  7995  10FA  0841               	movf	systemCheck@data^(0+128),w
  7996  10FB  0086               	movwf	6
  7997  10FC  0842               	movf	(systemCheck@data+1)^(0+128),w
  7998  10FD  0087               	movwf	7
  7999  10FE  3151               	addfsr 1,17
  8000  10FF  3F40               	moviw [0]fsr1
  8001  1100  00B1               	movwf	___flge@ff2^(0+128)
  8002  1101  3F41               	moviw [1]fsr1
  8003  1102  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8004  1103  3F42               	moviw [2]fsr1
  8005  1104  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8006  1105  3F43               	moviw [3]fsr1
  8007  1106  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8008  1107  31AD  25D6  3190   	fcall	___flge
  8009  110A  1C03               	btfss	3,0
  8010  110B  296A               	goto	l7819
  8011  110C                     l7787:	
  8012                           
  8013                           ;system.c: 185:    (data->voltage <= 11.0)) {;system.c: 186:   INTCON = 0;
  8014  110C  018B               	clrf	11	;volatile
  8015                           
  8016                           ;system.c: 187:   OLED_clearDisplay();
  8017  110D  31B4  24AA  3190   	fcall	_OLED_clearDisplay
  8018                           
  8019                           ;system.c: 188:   OLED_returnHome();
  8020  1110  3187  27FA  3190   	fcall	_OLED_returnHome
  8021                           
  8022                           ;system.c: 189:   OLED_print_xy(0, 0, "TURNING OFF");
  8023  1113  0140               	movlb	0	; select bank0
  8024  1114  01B1               	clrf	OLED_print_xy@row
  8025  1115  303C               	movlw	low (STR_86| (0+32768))
  8026  1116  00B2               	movwf	OLED_print_xy@s
  8027  1117  30BA               	movlw	high (STR_86| (0+32768))
  8028  1118  00B3               	movwf	OLED_print_xy@s+1
  8029  1119  3000               	movlw	0
  8030  111A  31B7  2727  3190   	fcall	_OLED_print_xy
  8031                           
  8032                           ;system.c: 190:   setChannelSwitch(255, 0);
  8033  111D  0140               	movlb	0	; select bank0
  8034  111E  01A4               	clrf	setChannelSwitch@state
  8035  111F  30FF               	movlw	255
  8036  1120  31A9  211D  3190   	fcall	_setChannelSwitch
  8037                           
  8038                           ;system.c: 191:   setLoadSwitch(0);
  8039  1123  3000               	movlw	0
  8040  1124  31B4  24AE  3190   	fcall	_setLoadSwitch
  8041                           
  8042                           ;system.c: 192:   for(n = 5; n > 0; n--) {
  8043  1127  3005               	movlw	5
  8044  1128  0141               	movlb	1	; select bank1
  8045  1129  00C3               	movwf	??_systemCheck^(0+128)
  8046  112A  0843               	movf	??_systemCheck^(0+128),w
  8047  112B  00CA               	movwf	systemCheck@n^(0+128)
  8048  112C                     l7805:	
  8049                           
  8050                           ;system.c: 193:    itoa(str, n, 1);
  8051  112C  30C7               	movlw	low systemCheck@str
  8052  112D  00B6               	movwf	itoa@str^(0+128)
  8053  112E  3000               	movlw	high systemCheck@str
  8054  112F  00B7               	movwf	(itoa@str+1)^(0+128)
  8055  1130  084A               	movf	systemCheck@n^(0+128),w
  8056  1131  00C3               	movwf	??_systemCheck^(0+128)
  8057  1132  0843               	movf	??_systemCheck^(0+128),w
  8058  1133  00B8               	movwf	itoa@value^(0+128)
  8059  1134  01B9               	clrf	itoa@width^(0+128)
  8060  1135  0AB9               	incf	itoa@width^(0+128),f
  8061  1136  31AB  2346  3190   	fcall	_itoa
  8062                           
  8063                           ;system.c: 194:    OLED_print_xy(0, 1, "IN ");
  8064  1139  0140               	movlb	0	; select bank0
  8065  113A  01B1               	clrf	OLED_print_xy@row
  8066  113B  0AB1               	incf	OLED_print_xy@row,f
  8067  113C  30CE               	movlw	low (STR_87| (0+32768))
  8068  113D  00B2               	movwf	OLED_print_xy@s
  8069  113E  30BA               	movlw	high (STR_87| (0+32768))
  8070  113F  00B3               	movwf	OLED_print_xy@s+1
  8071  1140  3000               	movlw	0
  8072  1141  31B7  2727  3190   	fcall	_OLED_print_xy
  8073                           
  8074                           ;system.c: 195:    OLED_print_xy(3, 1, str);
  8075  1144  0140               	movlb	0	; select bank0
  8076  1145  01B1               	clrf	OLED_print_xy@row
  8077  1146  0AB1               	incf	OLED_print_xy@row,f
  8078  1147  30C7               	movlw	low systemCheck@str
  8079  1148  00B2               	movwf	OLED_print_xy@s
  8080  1149  3000               	movlw	high systemCheck@str
  8081  114A  00B3               	movwf	OLED_print_xy@s+1
  8082  114B  3003               	movlw	3
  8083  114C  31B7  2727  3190   	fcall	_OLED_print_xy
  8084                           
  8085                           ;system.c: 196:    _delay((unsigned long)((1000)*(4000000UL/4000.0)));
  8086  114F  3006               	movlw	6
  8087  1150  0141               	movlb	1	; select bank1
  8088  1151  00C4               	movwf	(??_systemCheck^(0+128)+1)
  8089  1152  3013               	movlw	19
  8090  1153  00C3               	movwf	??_systemCheck^(0+128)
  8091  1154  30AD               	movlw	173
  8092  1155                     u11207:	
  8093  1155  0B89               	decfsz	9,f
  8094  1156  2955               	goto	u11207
  8095  1157  0BC3               	decfsz	??_systemCheck^(0+128),f
  8096  1158  2955               	goto	u11207
  8097  1159  0BC4               	decfsz	(??_systemCheck^(0+128)+1),f
  8098  115A  2955               	goto	u11207
  8099  115B  3200               	nop2
  8100                           
  8101                           ;system.c: 197:   }
  8102  115C  3001               	movlw	1
  8103  115D  0141               	movlb	1	; select bank1
  8104  115E  02CA               	subwf	systemCheck@n^(0+128),f
  8105  115F  084A               	movf	systemCheck@n^(0+128),w
  8106  1160  1D03               	btfss	3,2
  8107  1161  292C               	goto	l7805
  8108                           
  8109                           ;system.c: 198:   OLED_off();
  8110  1162  31B4  24B6  3190   	fcall	_OLED_off
  8111                           
  8112                           ;system.c: 199:   setOLEDPower(0);
  8113  1165  3000               	movlw	0
  8114  1166  31B4  24BE  3190   	fcall	_setOLEDPower
  8115  1169                     l803:	
  8116                           ;system.c: 202:   while(1);
  8117                           
  8118  1169  2969               	goto	l803
  8119  116A                     l7819:	
  8120  116A  3041               	movlw	65
  8121  116B  0141               	movlb	1	; select bank1
  8122  116C  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8123  116D  3050               	movlw	80
  8124  116E  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8125  116F  3000               	movlw	0
  8126  1170  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8127  1171  3000               	movlw	0
  8128  1172  00AD               	movwf	___flge@ff1^(0+128)
  8129  1173  0841               	movf	systemCheck@data^(0+128),w
  8130  1174  0086               	movwf	6
  8131  1175  0842               	movf	(systemCheck@data+1)^(0+128),w
  8132  1176  0087               	movwf	7
  8133  1177  3151               	addfsr 1,17
  8134  1178  3F40               	moviw [0]fsr1
  8135  1179  00B1               	movwf	___flge@ff2^(0+128)
  8136  117A  3F41               	moviw [1]fsr1
  8137  117B  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8138  117C  3F42               	moviw [2]fsr1
  8139  117D  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8140  117E  3F43               	moviw [3]fsr1
  8141  117F  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8142  1180  31AD  25D6  3190   	fcall	___flge
  8143  1183  1803               	btfsc	3,0
  8144  1184  29B4               	goto	l7829
  8145  1185  3041               	movlw	65
  8146  1186  0141               	movlb	1	; select bank1
  8147  1187  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8148  1188  305C               	movlw	92
  8149  1189  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8150  118A  30CC               	movlw	204
  8151  118B  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8152  118C  30CD               	movlw	205
  8153  118D  00AD               	movwf	___flge@ff1^(0+128)
  8154  118E  0841               	movf	systemCheck@data^(0+128),w
  8155  118F  0086               	movwf	6
  8156  1190  0842               	movf	(systemCheck@data+1)^(0+128),w
  8157  1191  0087               	movwf	7
  8158  1192  3151               	addfsr 1,17
  8159  1193  3F40               	moviw [0]fsr1
  8160  1194  00B1               	movwf	___flge@ff2^(0+128)
  8161  1195  3F41               	moviw [1]fsr1
  8162  1196  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8163  1197  3F42               	moviw [2]fsr1
  8164  1198  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8165  1199  3F43               	moviw [3]fsr1
  8166  119A  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8167  119B  31AD  25D6  3190   	fcall	___flge
  8168  119E  1C03               	btfss	3,0
  8169  119F  29B4               	goto	l7829
  8170                           
  8171                           ;system.c: 204:   if (! data->status.BAT_HIGH) {
  8172  11A0  0141               	movlb	1	; select bank1
  8173  11A1  0841               	movf	systemCheck@data^(0+128),w
  8174  11A2  3E29               	addlw	41
  8175  11A3  0086               	movwf	6
  8176  11A4  3000               	movlw	0
  8177  11A5  3D42               	addwfc	(systemCheck@data+1)^(0+128),w
  8178  11A6  0087               	movwf	7
  8179  11A7  1881               	btfsc	1,1
  8180  11A8  0008               	return
  8181                           
  8182                           ;system.c: 205:    data->status.BAT_HIGH = 1;
  8183  11A9  0841               	movf	systemCheck@data^(0+128),w
  8184  11AA  3E29               	addlw	41
  8185  11AB  0086               	movwf	6
  8186  11AC  3000               	movlw	0
  8187  11AD  3D42               	addwfc	(systemCheck@data+1)^(0+128),w
  8188  11AE  0087               	movwf	7
  8189  11AF  1481               	bsf	1,1
  8190                           
  8191                           ;system.c: 206:    error(WARN_VOLT_HIGH);
  8192  11B0  3005               	movlw	5
  8193  11B1  31B7  27C5         	fcall	_error
  8194  11B3  0008               	return
  8195  11B4                     l7829:	
  8196  11B4  3041               	movlw	65
  8197  11B5  0141               	movlb	1	; select bank1
  8198  11B6  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8199  11B7  3030               	movlw	48
  8200  11B8  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8201  11B9  3000               	movlw	0
  8202  11BA  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8203  11BB  3000               	movlw	0
  8204  11BC  00AD               	movwf	___flge@ff1^(0+128)
  8205  11BD  0841               	movf	systemCheck@data^(0+128),w
  8206  11BE  0086               	movwf	6
  8207  11BF  0842               	movf	(systemCheck@data+1)^(0+128),w
  8208  11C0  0087               	movwf	7
  8209  11C1  3151               	addfsr 1,17
  8210  11C2  3F40               	moviw [0]fsr1
  8211  11C3  00B1               	movwf	___flge@ff2^(0+128)
  8212  11C4  3F41               	moviw [1]fsr1
  8213  11C5  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8214  11C6  3F42               	moviw [2]fsr1
  8215  11C7  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8216  11C8  3F43               	moviw [3]fsr1
  8217  11C9  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8218  11CA  31AD  25D6  3190   	fcall	___flge
  8219  11CD  1803               	btfsc	3,0
  8220  11CE  29FE               	goto	l7839
  8221  11CF  3041               	movlw	65
  8222  11D0  0141               	movlb	1	; select bank1
  8223  11D1  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8224  11D2  3036               	movlw	54
  8225  11D3  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8226  11D4  3066               	movlw	102
  8227  11D5  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8228  11D6  3066               	movlw	102
  8229  11D7  00AD               	movwf	___flge@ff1^(0+128)
  8230  11D8  0841               	movf	systemCheck@data^(0+128),w
  8231  11D9  0086               	movwf	6
  8232  11DA  0842               	movf	(systemCheck@data+1)^(0+128),w
  8233  11DB  0087               	movwf	7
  8234  11DC  3151               	addfsr 1,17
  8235  11DD  3F40               	moviw [0]fsr1
  8236  11DE  00B1               	movwf	___flge@ff2^(0+128)
  8237  11DF  3F41               	moviw [1]fsr1
  8238  11E0  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8239  11E1  3F42               	moviw [2]fsr1
  8240  11E2  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8241  11E3  3F43               	moviw [3]fsr1
  8242  11E4  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8243  11E5  31AD  25D6  3190   	fcall	___flge
  8244  11E8  1C03               	btfss	3,0
  8245  11E9  29FE               	goto	l7839
  8246                           
  8247                           ;system.c: 209:   if (! data->status.BAT_LOW) {
  8248  11EA  0141               	movlb	1	; select bank1
  8249  11EB  0841               	movf	systemCheck@data^(0+128),w
  8250  11EC  3E29               	addlw	41
  8251  11ED  0086               	movwf	6
  8252  11EE  3000               	movlw	0
  8253  11EF  3D42               	addwfc	(systemCheck@data+1)^(0+128),w
  8254  11F0  0087               	movwf	7
  8255  11F1  1801               	btfsc	1,0
  8256  11F2  0008               	return
  8257                           
  8258                           ;system.c: 210:    data->status.BAT_LOW = 1;
  8259  11F3  0841               	movf	systemCheck@data^(0+128),w
  8260  11F4  3E29               	addlw	41
  8261  11F5  0086               	movwf	6
  8262  11F6  3000               	movlw	0
  8263  11F7  3D42               	addwfc	(systemCheck@data+1)^(0+128),w
  8264  11F8  0087               	movwf	7
  8265  11F9  1401               	bsf	1,0
  8266                           
  8267                           ;system.c: 211:    error(WARN_VOLT_LOW);
  8268  11FA  3006               	movlw	6
  8269  11FB  31B7  27C5         	fcall	_error
  8270  11FD  0008               	return
  8271  11FE                     l7839:	
  8272                           
  8273                           ;system.c: 214:   data->status.BAT_HIGH = 0;
  8274  11FE  0141               	movlb	1	; select bank1
  8275  11FF  0841               	movf	systemCheck@data^(0+128),w
  8276  1200  3E29               	addlw	41
  8277  1201  0086               	movwf	6
  8278  1202  3000               	movlw	0
  8279  1203  3D42               	addwfc	(systemCheck@data+1)^(0+128),w
  8280  1204  0087               	movwf	7
  8281  1205  1081               	bcf	1,1
  8282                           
  8283                           ;system.c: 215:   data->status.BAT_LOW = 0;
  8284  1206  0841               	movf	systemCheck@data^(0+128),w
  8285  1207  3E29               	addlw	41
  8286  1208  0086               	movwf	6
  8287  1209  3000               	movlw	0
  8288  120A  3D42               	addwfc	(systemCheck@data+1)^(0+128),w
  8289  120B  0087               	movwf	7
  8290  120C  1001               	bcf	1,0
  8291  120D  0008               	return
  8292  120E                     __end_of_systemCheck:	
  8293                           
  8294                           	psect	text5
  8295  34BE                     __ptext5:	
  8296 ;; *************** function _setOLEDPower *****************
  8297 ;; Defined at:
  8298 ;;		line 7 in file "io.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;  state           1    wreg     unsigned char 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  state           1    4[BANK0 ] unsigned char 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      void 
  8305 ;; Registers used:
  8306 ;;		wreg, status,0
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8316 ;;Total ram usage:        1 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    3
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		_systemCheck
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           
  8327                           ;psect for function _setOLEDPower
  8328  34BE                     _setOLEDPower:	
  8329                           
  8330                           ;incstack = 0
  8331                           ; Regs used in _setOLEDPower: [wreg+status,0]
  8332                           ;setOLEDPower@state stored from wreg
  8333  34BE  0140               	movlb	0	; select bank0
  8334  34BF  00A4               	movwf	setOLEDPower@state
  8335                           
  8336                           ;io.c: 7: void setOLEDPower(uint8_t state);io.c: 8: {;io.c: 9:  LATBbits.LATB5 = state;
  8337  34C0  0C24               	rrf	setOLEDPower@state,w
  8338  34C1  1C03               	skipc
  8339  34C2  1299               	bcf	25,5	;volatile
  8340  34C3  1803               	skipnc
  8341  34C4  1699               	bsf	25,5	;volatile
  8342  34C5  0008               	return
  8343  34C6                     __end_of_setOLEDPower:	
  8344                           
  8345                           	psect	text6
  8346  07FA                     __ptext6:	
  8347 ;; *************** function _OLED_returnHome *****************
  8348 ;; Defined at:
  8349 ;;		line 166 in file "oled.c"
  8350 ;; Parameters:    Size  Location     Type
  8351 ;;		None
  8352 ;; Auto vars:     Size  Location     Type
  8353 ;;		None
  8354 ;; Return value:  Size  Location     Type
  8355 ;;                  1    wreg      void 
  8356 ;; Registers used:
  8357 ;;		wreg, status,2, status,0, pclath, cstack
  8358 ;; Tracked objects:
  8359 ;;		On entry : 0/0
  8360 ;;		On exit  : 0/0
  8361 ;;		Unchanged: 0/0
  8362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8367 ;;Total ram usage:        0 bytes
  8368 ;; Hardware stack levels used:    1
  8369 ;; Hardware stack levels required when called:    7
  8370 ;; This function calls:
  8371 ;;		_OLED_command
  8372 ;; This function is called by:
  8373 ;;		_main
  8374 ;;		_viewErrorMessage
  8375 ;;		_systemCheck
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           
  8380                           ;psect for function _OLED_returnHome
  8381  07FA                     _OLED_returnHome:	
  8382                           
  8383                           ;oled.c: 168:  OLED_command(0x02);
  8384                           
  8385                           ;incstack = 0
  8386                           ; Regs used in _OLED_returnHome: [wreg+status,2+status,0+pclath+cstack]
  8387  07FA  3002               	movlw	2
  8388  07FB  31B4  24EA         	fcall	_OLED_command
  8389  07FD  0008               	return
  8390  07FE                     __end_of_OLED_returnHome:	
  8391                           
  8392                           	psect	text7
  8393  34B6                     __ptext7:	
  8394 ;; *************** function _OLED_off *****************
  8395 ;; Defined at:
  8396 ;;		line 12 in file "oled.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;		None
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      void 
  8403 ;; Registers used:
  8404 ;;		wreg, status,2, status,0, pclath, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8414 ;;Total ram usage:        0 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    7
  8417 ;; This function calls:
  8418 ;;		_OLED_command
  8419 ;; This function is called by:
  8420 ;;		_systemCheck
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           
  8425                           ;psect for function _OLED_off
  8426  34B6                     _OLED_off:	
  8427                           
  8428                           ;oled.c: 14:  OLED_command(0x08);
  8429                           
  8430                           ;incstack = 0
  8431                           ; Regs used in _OLED_off: [wreg+status,2+status,0+pclath+cstack]
  8432  34B6  3008               	movlw	8
  8433  34B7  31B4  24EA  31B4   	fcall	_OLED_command
  8434                           
  8435                           ;oled.c: 15:  OLED_command(0x13);
  8436  34BA  3013               	movlw	19
  8437  34BB  31B4  24EA         	fcall	_OLED_command
  8438  34BD  0008               	return
  8439  34BE                     __end_of_OLED_off:	
  8440                           
  8441                           	psect	text8
  8442  34AA                     __ptext8:	
  8443 ;; *************** function _OLED_clearDisplay *****************
  8444 ;; Defined at:
  8445 ;;		line 171 in file "oled.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;		None
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;		None
  8450 ;; Return value:  Size  Location     Type
  8451 ;;                  1    wreg      void 
  8452 ;; Registers used:
  8453 ;;		wreg, status,2, status,0, pclath, cstack
  8454 ;; Tracked objects:
  8455 ;;		On entry : 0/0
  8456 ;;		On exit  : 0/0
  8457 ;;		Unchanged: 0/0
  8458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8463 ;;Total ram usage:        0 bytes
  8464 ;; Hardware stack levels used:    1
  8465 ;; Hardware stack levels required when called:    7
  8466 ;; This function calls:
  8467 ;;		_OLED_command
  8468 ;; This function is called by:
  8469 ;;		_main
  8470 ;;		_systemCheck
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           
  8475                           ;psect for function _OLED_clearDisplay
  8476  34AA                     _OLED_clearDisplay:	
  8477                           
  8478                           ;oled.c: 173:  OLED_command(0x01);
  8479                           
  8480                           ;incstack = 0
  8481                           ; Regs used in _OLED_clearDisplay: [wreg+status,2+status,0+pclath+cstack]
  8482  34AA  3001               	movlw	1
  8483  34AB  31B4  24EA         	fcall	_OLED_command
  8484  34AD  0008               	return
  8485  34AE                     __end_of_OLED_clearDisplay:	
  8486                           
  8487                           	psect	text9
  8488  22ED                     __ptext9:	
  8489 ;; *************** function _menu *****************
  8490 ;; Defined at:
  8491 ;;		line 87 in file "menuhelper.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  data            2   48[BANK1 ] PTR struct .
  8494 ;;		 -> data(170), 
  8495 ;; Auto vars:     Size  Location     Type
  8496 ;;  func            2   57[BANK1 ] PTR FTN(PTR struct .,)un
  8497 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  8498 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  8499 ;;		 -> statusView(1), NULL(0), 
  8500 ;;  nextState       1   59[BANK1 ] char 
  8501 ;;  timeout         1   56[BANK1 ] unsigned char 
  8502 ;;  pb              1   55[BANK1 ] enum E7878
  8503 ;;  page            1   54[BANK1 ] char 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      void 
  8506 ;; Registers used:
  8507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8513 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8514 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8515 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8516 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8517 ;;Total ram usage:       12 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:   10
  8520 ;; This function calls:
  8521 ;;		_OLED_command
  8522 ;;		_channelSetup
  8523 ;;		_channelView
  8524 ;;		_error
  8525 ;;		_getNextState
  8526 ;;		_getPB
  8527 ;;		_getStateFunc
  8528 ;;		_setDPOffset
  8529 ;;		_setFudgeFactor
  8530 ;;		_setLensDia
  8531 ;;		_setOutputPower
  8532 ;;		_setSkyTemp
  8533 ;;		_setup
  8534 ;;		_statusView
  8535 ;;		_timeSince
  8536 ;; This function is called by:
  8537 ;;		_main
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           
  8542                           ;psect for function _menu
  8543  22ED                     _menu:	
  8544                           
  8545                           ;menuhelper.c: 93:  enum e_buttonPress pb;;menuhelper.c: 94:  t_stateFuncPtr func;;menuh
      +                          elper.c: 97:  if (sleep) {
  8546                           
  8547                           ;incstack = 0
  8548                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8549  22ED  0143               	movlb	3	; select bank3
  8550  22EE  0867               	movf	menu@sleep^(0+384),w
  8551  22EF  1903               	btfsc	3,2
  8552  22F0  2B18               	goto	l8161
  8553                           
  8554                           ;menuhelper.c: 98:   if (timeSince(userActivity) < 1200) {
  8555  22F1  0142               	movlb	2	; select bank2
  8556  22F2  0868               	movf	(_userActivity+3)^(0+256),w	;volatile
  8557  22F3  0140               	movlb	0	; select bank0
  8558  22F4  00AB               	movwf	timeSince@since+3
  8559  22F5  0142               	movlb	2	; select bank2
  8560  22F6  0867               	movf	(_userActivity+2)^(0+256),w	;volatile
  8561  22F7  0140               	movlb	0	; select bank0
  8562  22F8  00AA               	movwf	timeSince@since+2
  8563  22F9  0142               	movlb	2	; select bank2
  8564  22FA  0866               	movf	(_userActivity+1)^(0+256),w	;volatile
  8565  22FB  0140               	movlb	0	; select bank0
  8566  22FC  00A9               	movwf	timeSince@since+1
  8567  22FD  0142               	movlb	2	; select bank2
  8568  22FE  0865               	movf	_userActivity^(0+256),w	;volatile
  8569  22FF  0140               	movlb	0	; select bank0
  8570  2300  00A8               	movwf	timeSince@since
  8571  2301  3187  27A4  31A2   	fcall	_timeSince
  8572  2304  0140               	movlb	0	; select bank0
  8573  2305  082B               	movf	?_timeSince+3,w
  8574  2306  1D03               	btfss	3,2
  8575  2307  0008               	return
  8576  2308  082A               	movf	?_timeSince+2,w
  8577  2309  1D03               	btfss	3,2
  8578  230A  0008               	return
  8579  230B  30B0               	movlw	176
  8580  230C  0228               	subwf	?_timeSince,w
  8581  230D  3004               	movlw	4
  8582  230E  3B29               	subwfb	?_timeSince+1,w
  8583  230F  1803               	btfsc	3,0
  8584  2310  0008               	return
  8585                           
  8586                           ;menuhelper.c: 100:    sleep = 0;
  8587  2311  0143               	movlb	3	; select bank3
  8588  2312  01E7               	clrf	menu@sleep^(0+384)
  8589                           
  8590                           ;menuhelper.c: 101:    OLED_command(0x08 | 0x04);
  8591  2313  300C               	movlw	12
  8592  2314  31B4  24EA  31A2   	fcall	_OLED_command
  8593                           
  8594                           ;menuhelper.c: 102:   } else {
  8595  2317  2B3F               	goto	l8169
  8596  2318                     l8161:	
  8597                           
  8598                           ;menuhelper.c: 106:   if (timeSince(userActivity) > 1200) {
  8599  2318  0142               	movlb	2	; select bank2
  8600  2319  0868               	movf	(_userActivity+3)^(0+256),w	;volatile
  8601  231A  0140               	movlb	0	; select bank0
  8602  231B  00AB               	movwf	timeSince@since+3
  8603  231C  0142               	movlb	2	; select bank2
  8604  231D  0867               	movf	(_userActivity+2)^(0+256),w	;volatile
  8605  231E  0140               	movlb	0	; select bank0
  8606  231F  00AA               	movwf	timeSince@since+2
  8607  2320  0142               	movlb	2	; select bank2
  8608  2321  0866               	movf	(_userActivity+1)^(0+256),w	;volatile
  8609  2322  0140               	movlb	0	; select bank0
  8610  2323  00A9               	movwf	timeSince@since+1
  8611  2324  0142               	movlb	2	; select bank2
  8612  2325  0865               	movf	_userActivity^(0+256),w	;volatile
  8613  2326  0140               	movlb	0	; select bank0
  8614  2327  00A8               	movwf	timeSince@since
  8615  2328  3187  27A4  31A2   	fcall	_timeSince
  8616  232B  0140               	movlb	0	; select bank0
  8617  232C  082B               	movf	?_timeSince+3,w
  8618  232D  1D03               	btfss	3,2
  8619  232E  2B38               	goto	l8163
  8620  232F  082A               	movf	?_timeSince+2,w
  8621  2330  1D03               	btfss	3,2
  8622  2331  2B38               	goto	l8163
  8623  2332  30B1               	movlw	177
  8624  2333  0228               	subwf	?_timeSince,w
  8625  2334  3004               	movlw	4
  8626  2335  3B29               	subwfb	?_timeSince+1,w
  8627  2336  1C03               	btfss	3,0
  8628  2337  2B3F               	goto	l8169
  8629  2338                     l8163:	
  8630                           
  8631                           ;menuhelper.c: 107:    sleep = 1;
  8632  2338  0143               	movlb	3	; select bank3
  8633  2339  01E7               	clrf	menu@sleep^(0+384)
  8634  233A  0AE7               	incf	menu@sleep^(0+384),f
  8635                           
  8636                           ;menuhelper.c: 108:    OLED_command(0x08 | 0x00);
  8637  233B  3008               	movlw	8
  8638  233C  31B4  24EA         	fcall	_OLED_command
  8639  233E  0008               	return
  8640  233F                     l8169:	
  8641                           
  8642                           ;menuhelper.c: 114:  func = getStateFunc(state);
  8643  233F  0142               	movlb	2	; select bank2
  8644  2340  086A               	movf	menu@state^(0+256),w
  8645  2341  31A8  2093  31A2   	fcall	_getStateFunc
  8646  2344  0140               	movlb	0	; select bank0
  8647  2345  082B               	movf	?_getStateFunc+1,w
  8648  2346  0141               	movlb	1	; select bank1
  8649  2347  00DA               	movwf	(menu@func+1)^(0+128)
  8650  2348  0140               	movlb	0	; select bank0
  8651  2349  082A               	movf	?_getStateFunc,w
  8652  234A  0141               	movlb	1	; select bank1
  8653  234B  00D9               	movwf	menu@func^(0+128)
  8654                           
  8655                           ;menuhelper.c: 115:  if (func)
  8656  234C  0859               	movf	menu@func^(0+128),w
  8657  234D  045A               	iorwf	(menu@func+1)^(0+128),w
  8658  234E  1903               	btfsc	3,2
  8659  234F  2B5E               	goto	l8175
  8660                           
  8661                           ;menuhelper.c: 116:   page = (*func)(data);
  8662  2350  0851               	movf	(menu@data+1)^(0+128),w
  8663  2351  00C8               	movwf	(setFudgeFactor@data+1)^(0+128)
  8664  2352  0850               	movf	menu@data^(0+128),w
  8665  2353  00C7               	movwf	setFudgeFactor@data^(0+128)
  8666  2354  085A               	movf	(menu@func+1)^(0+128),w
  8667  2355  008A               	movwf	10
  8668  2356  0859               	movf	menu@func^(0+128),w
  8669  2357  000A               	callw
  8670  2358  31A2               	pagesel	$
  8671  2359  0141               	movlb	1	; select bank1
  8672  235A  00D2               	movwf	??_menu^(0+128)
  8673  235B  0852               	movf	??_menu^(0+128),w
  8674  235C  00D6               	movwf	menu@page^(0+128)
  8675  235D  2B62               	goto	l8177
  8676  235E                     l8175:	
  8677                           
  8678                           ;menuhelper.c: 118:   error(ERR_MENU);
  8679  235E  300B               	movlw	11
  8680  235F  31B7  27C5  31A2   	fcall	_error
  8681  2362                     l8177:	
  8682                           
  8683                           ;menuhelper.c: 120:  g_screenRefresh = 0;
  8684  2362  0141               	movlb	1	; select bank1
  8685  2363  01ED               	clrf	_g_screenRefresh^(0+128)
  8686                           
  8687                           ;menuhelper.c: 121:  pb = getPB();
  8688  2364  31B5  251F  31A2   	fcall	_getPB
  8689  2367  0141               	movlb	1	; select bank1
  8690  2368  00D2               	movwf	??_menu^(0+128)
  8691  2369  0852               	movf	??_menu^(0+128),w
  8692  236A  00D7               	movwf	menu@pb^(0+128)
  8693                           
  8694                           ;menuhelper.c: 122:  timeout = (timeSince(userActivity) > 300);
  8695  236B  0142               	movlb	2	; select bank2
  8696  236C  0868               	movf	(_userActivity+3)^(0+256),w	;volatile
  8697  236D  0140               	movlb	0	; select bank0
  8698  236E  00AB               	movwf	timeSince@since+3
  8699  236F  0142               	movlb	2	; select bank2
  8700  2370  0867               	movf	(_userActivity+2)^(0+256),w	;volatile
  8701  2371  0140               	movlb	0	; select bank0
  8702  2372  00AA               	movwf	timeSince@since+2
  8703  2373  0142               	movlb	2	; select bank2
  8704  2374  0866               	movf	(_userActivity+1)^(0+256),w	;volatile
  8705  2375  0140               	movlb	0	; select bank0
  8706  2376  00A9               	movwf	timeSince@since+1
  8707  2377  0142               	movlb	2	; select bank2
  8708  2378  0865               	movf	_userActivity^(0+256),w	;volatile
  8709  2379  0140               	movlb	0	; select bank0
  8710  237A  00A8               	movwf	timeSince@since
  8711  237B  3187  27A4  31A2   	fcall	_timeSince
  8712  237E  0140               	movlb	0	; select bank0
  8713  237F  082B               	movf	?_timeSince+3,w
  8714  2380  1D03               	btfss	3,2
  8715  2381  2B8B               	goto	u11101
  8716  2382  082A               	movf	?_timeSince+2,w
  8717  2383  1D03               	btfss	3,2
  8718  2384  2B8B               	goto	u11101
  8719  2385  302D               	movlw	45
  8720  2386  0228               	subwf	?_timeSince,w
  8721  2387  3001               	movlw	1
  8722  2388  3B29               	subwfb	?_timeSince+1,w
  8723  2389  1C03               	btfss	3,0
  8724  238A  2B8D               	goto	u11100
  8725  238B                     u11101:	
  8726  238B  3001               	movlw	1
  8727  238C  2B8E               	goto	u11110
  8728  238D                     u11100:	
  8729  238D  3000               	movlw	0
  8730  238E                     u11110:	
  8731  238E  0141               	movlb	1	; select bank1
  8732  238F  00D2               	movwf	??_menu^(0+128)
  8733  2390  0852               	movf	??_menu^(0+128),w
  8734  2391  00D8               	movwf	menu@timeout^(0+128)
  8735                           
  8736                           ;menuhelper.c: 124:  nextState = getNextState(state, page, pb, timeout);
  8737  2392  0856               	movf	menu@page^(0+128),w
  8738  2393  00D2               	movwf	??_menu^(0+128)
  8739  2394  0852               	movf	??_menu^(0+128),w
  8740  2395  0140               	movlb	0	; select bank0
  8741  2396  00AA               	movwf	getNextState@intState
  8742  2397  0141               	movlb	1	; select bank1
  8743  2398  0857               	movf	menu@pb^(0+128),w
  8744  2399  00D3               	movwf	(??_menu+1)^(0+128)
  8745  239A  0853               	movf	(??_menu+1)^(0+128),w
  8746  239B  0140               	movlb	0	; select bank0
  8747  239C  00AB               	movwf	getNextState@pb
  8748  239D  0141               	movlb	1	; select bank1
  8749  239E  0858               	movf	menu@timeout^(0+128),w
  8750  239F  00D4               	movwf	(??_menu+2)^(0+128)
  8751  23A0  0854               	movf	(??_menu+2)^(0+128),w
  8752  23A1  0140               	movlb	0	; select bank0
  8753  23A2  00AC               	movwf	getNextState@timeout
  8754  23A3  0142               	movlb	2	; select bank2
  8755  23A4  086A               	movf	menu@state^(0+256),w
  8756  23A5  31A2  2225  31A2   	fcall	_getNextState
  8757  23A8  0141               	movlb	1	; select bank1
  8758  23A9  00D5               	movwf	(??_menu+3)^(0+128)
  8759  23AA  0855               	movf	(??_menu+3)^(0+128),w
  8760  23AB  00DB               	movwf	menu@nextState^(0+128)
  8761                           
  8762                           ;menuhelper.c: 126:  if (nextState > -1) {
  8763  23AC  1BDB               	btfsc	menu@nextState^(0+128),7
  8764  23AD  2BC8               	goto	l8193
  8765                           
  8766                           ;menuhelper.c: 128:   if (state != nextState) {
  8767  23AE  085B               	movf	menu@nextState^(0+128),w
  8768  23AF  00D2               	movwf	??_menu^(0+128)
  8769  23B0  01D3               	clrf	(??_menu^(0+128)+1)
  8770  23B1  1BD2               	btfsc	??_menu^(0+128),7
  8771  23B2  03D3               	decf	(??_menu^(0+128)+1),f
  8772  23B3  0142               	movlb	2	; select bank2
  8773  23B4  086A               	movf	menu@state^(0+256),w
  8774  23B5  0141               	movlb	1	; select bank1
  8775  23B6  00D4               	movwf	(??_menu+2)^(0+128)
  8776  23B7  01D5               	clrf	((??_menu+2)^(0+128)+1)
  8777  23B8  0853               	movf	(??_menu+1)^(0+128),w
  8778  23B9  0655               	xorwf	(??_menu+3)^(0+128),w
  8779  23BA  1D03               	skipz
  8780  23BB  2BBE               	goto	u11135
  8781  23BC  0852               	movf	??_menu^(0+128),w
  8782  23BD  0654               	xorwf	(??_menu+2)^(0+128),w
  8783  23BE                     u11135:	
  8784  23BE  1903               	skipnz
  8785  23BF  0008               	return
  8786                           
  8787                           ;menuhelper.c: 129:    g_screenRefresh = 1;
  8788  23C0  01ED               	clrf	_g_screenRefresh^(0+128)
  8789  23C1  0AED               	incf	_g_screenRefresh^(0+128),f
  8790                           
  8791                           ;menuhelper.c: 130:    state = nextState;
  8792  23C2  085B               	movf	menu@nextState^(0+128),w
  8793  23C3  00D2               	movwf	??_menu^(0+128)
  8794  23C4  0852               	movf	??_menu^(0+128),w
  8795  23C5  0142               	movlb	2	; select bank2
  8796  23C6  00EA               	movwf	menu@state^(0+256)
  8797  23C7  0008               	return
  8798  23C8                     l8193:	
  8799                           
  8800                           ;menuhelper.c: 133:   error(ERR_MENU);
  8801  23C8  300B               	movlw	11
  8802  23C9  31B7  27C5         	fcall	_error
  8803  23CB  0008               	return
  8804  23CC                     __end_of_menu:	
  8805                           
  8806                           	psect	text10
  8807  2CF6                     __ptext10:	
  8808 ;; *************** function _setFudgeFactor *****************
  8809 ;; Defined at:
  8810 ;;		line 317 in file "menu.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  data            2   39[BANK1 ] PTR struct .
  8813 ;;		 -> data(170), 
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;		None
  8816 ;; Return value:  Size  Location     Type
  8817 ;;                  1    wreg      unsigned char 
  8818 ;; Registers used:
  8819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8825 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8827 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8828 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8829 ;;Total ram usage:        3 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    8
  8832 ;; This function calls:
  8833 ;;		_OLED_print_xy
  8834 ;;		_ftoa
  8835 ;;		_returnToPage
  8836 ;;		_spinInput
  8837 ;; This function is called by:
  8838 ;;		_menu
  8839 ;; This function uses a non-reentrant model
  8840 ;;
  8841                           
  8842                           
  8843                           ;psect for function _setFudgeFactor
  8844  2CF6                     _setFudgeFactor:	
  8845                           
  8846                           ;menu.c: 317: uint8_t setFudgeFactor(t_globalData *data);menu.c: 318: {;menu.c: 319:  re
      +                          turnToPage(0);
  8847                           
  8848                           ;incstack = 0
  8849                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8850  2CF6  3000               	movlw	0
  8851  2CF7  3190  2001  31AC   	fcall	_returnToPage
  8852                           
  8853                           ;menu.c: 320:  if (g_screenRefresh)
  8854  2CFA  0141               	movlb	1	; select bank1
  8855  2CFB  086D               	movf	_g_screenRefresh^(0+128),w
  8856  2CFC  1903               	btfsc	3,2
  8857  2CFD  2D08               	goto	l7683
  8858                           
  8859                           ;menu.c: 321:   OLED_print_xy(0, 0, "Fudge factor");
  8860  2CFE  0140               	movlb	0	; select bank0
  8861  2CFF  01B1               	clrf	OLED_print_xy@row
  8862  2D00  3018               	movlw	low ((STR_48+24)| (0+32768))
  8863  2D01  00B2               	movwf	OLED_print_xy@s
  8864  2D02  30B8               	movlw	high ((STR_48+24)| (0+32768))
  8865  2D03  00B3               	movwf	OLED_print_xy@s+1
  8866  2D04  3000               	movlw	0
  8867  2D05  31B7  2727  31AC   	fcall	_OLED_print_xy
  8868  2D08                     l7683:	
  8869                           
  8870                           ;menu.c: 322:  spinInput(&data->fudgeFactor, 0.1, 5.0, 0.1);
  8871  2D08  0141               	movlb	1	; select bank1
  8872  2D09  0847               	movf	setFudgeFactor@data^(0+128),w
  8873  2D0A  3E25               	addlw	37
  8874  2D0B  00B9               	movwf	spinInput@input^(0+128)
  8875  2D0C  3000               	movlw	0
  8876  2D0D  3D48               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  8877  2D0E  00BA               	movwf	(spinInput@input+1)^(0+128)
  8878  2D0F  303D               	movlw	61
  8879  2D10  00BE               	movwf	(spinInput@min+3)^(0+128)
  8880  2D11  30CC               	movlw	204
  8881  2D12  00BD               	movwf	(spinInput@min+2)^(0+128)
  8882  2D13  30CC               	movlw	204
  8883  2D14  00BC               	movwf	(spinInput@min+1)^(0+128)
  8884  2D15  30CD               	movlw	205
  8885  2D16  00BB               	movwf	spinInput@min^(0+128)
  8886  2D17  3040               	movlw	64
  8887  2D18  00C2               	movwf	(spinInput@max+3)^(0+128)
  8888  2D19  30A0               	movlw	160
  8889  2D1A  00C1               	movwf	(spinInput@max+2)^(0+128)
  8890  2D1B  3000               	movlw	0
  8891  2D1C  00C0               	movwf	(spinInput@max+1)^(0+128)
  8892  2D1D  3000               	movlw	0
  8893  2D1E  00BF               	movwf	spinInput@max^(0+128)
  8894  2D1F  303D               	movlw	61
  8895  2D20  00C6               	movwf	(spinInput@step+3)^(0+128)
  8896  2D21  30CC               	movlw	204
  8897  2D22  00C5               	movwf	(spinInput@step+2)^(0+128)
  8898  2D23  30CC               	movlw	204
  8899  2D24  00C4               	movwf	(spinInput@step+1)^(0+128)
  8900  2D25  30CD               	movlw	205
  8901  2D26  00C3               	movwf	spinInput@step^(0+128)
  8902  2D27  31A0  201F  31AC   	fcall	_spinInput
  8903                           
  8904                           ;menu.c: 323:  ftoa(str, data->fudgeFactor, 3, 1);
  8905  2D2A  0141               	movlb	1	; select bank1
  8906  2D2B  0847               	movf	setFudgeFactor@data^(0+128),w
  8907  2D2C  3E25               	addlw	37
  8908  2D2D  0086               	movwf	6
  8909  2D2E  3000               	movlw	0
  8910  2D2F  3D48               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  8911  2D30  0087               	movwf	7
  8912  2D31  3F40               	moviw [0]fsr1
  8913  2D32  00B9               	movwf	ftoa@fValue^(0+128)
  8914  2D33  3F41               	moviw [1]fsr1
  8915  2D34  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  8916  2D35  3F42               	moviw [2]fsr1
  8917  2D36  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  8918  2D37  3F43               	moviw [3]fsr1
  8919  2D38  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  8920  2D39  3003               	movlw	3
  8921  2D3A  00C9               	movwf	??_setFudgeFactor^(0+128)
  8922  2D3B  0849               	movf	??_setFudgeFactor^(0+128),w
  8923  2D3C  00BD               	movwf	ftoa@width^(0+128)
  8924  2D3D  01BE               	clrf	ftoa@prec^(0+128)
  8925  2D3E  0ABE               	incf	ftoa@prec^(0+128),f
  8926  2D3F  304E               	movlw	(low (_str| (0+512)))& (0+255)
  8927  2D40  31A5  2515  31AC   	fcall	_ftoa
  8928                           
  8929                           ;menu.c: 324:  OLED_print_xy(0, 1, "\004");
  8930  2D43  0140               	movlb	0	; select bank0
  8931  2D44  01B1               	clrf	OLED_print_xy@row
  8932  2D45  0AB1               	incf	OLED_print_xy@row,f
  8933  2D46  30B8               	movlw	low ((STR_54+5)| (0+32768))
  8934  2D47  00B2               	movwf	OLED_print_xy@s
  8935  2D48  30BA               	movlw	high ((STR_54+5)| (0+32768))
  8936  2D49  00B3               	movwf	OLED_print_xy@s+1
  8937  2D4A  3000               	movlw	0
  8938  2D4B  31B7  2727  31AC   	fcall	_OLED_print_xy
  8939                           
  8940                           ;menu.c: 325:  OLED_print_xy(1, 1, str);
  8941  2D4E  0140               	movlb	0	; select bank0
  8942  2D4F  01B1               	clrf	OLED_print_xy@row
  8943  2D50  0AB1               	incf	OLED_print_xy@row,f
  8944  2D51  304E               	movlw	low _str
  8945  2D52  00B2               	movwf	OLED_print_xy@s
  8946  2D53  3002               	movlw	high _str
  8947  2D54  00B3               	movwf	OLED_print_xy@s+1
  8948  2D55  3001               	movlw	1
  8949  2D56  31B7  2727  31AC   	fcall	_OLED_print_xy
  8950                           
  8951                           ;menu.c: 326:  OLED_print_xy(4, 1, " \003      ");
  8952  2D59  0140               	movlb	0	; select bank0
  8953  2D5A  01B1               	clrf	OLED_print_xy@row
  8954  2D5B  0AB1               	incf	OLED_print_xy@row,f
  8955  2D5C  305B               	movlw	low (STR_61| (0+32768))
  8956  2D5D  00B2               	movwf	OLED_print_xy@s
  8957  2D5E  30BA               	movlw	high (STR_61| (0+32768))
  8958  2D5F  00B3               	movwf	OLED_print_xy@s+1
  8959  2D60  3004               	movlw	4
  8960  2D61  31B7  2727         	fcall	_OLED_print_xy
  8961                           
  8962                           ;menu.c: 327:  return 0;
  8963  2D63  3000               	movlw	0
  8964  2D64  0008               	return
  8965  2D65                     __end_of_setFudgeFactor:	
  8966                           
  8967                           	psect	text11
  8968  2C88                     __ptext11:	
  8969 ;; *************** function _setSkyTemp *****************
  8970 ;; Defined at:
  8971 ;;		line 300 in file "menu.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  data            2   39[BANK1 ] PTR struct .
  8974 ;;		 -> data(170), 
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;		None
  8977 ;; Return value:  Size  Location     Type
  8978 ;;                  1    wreg      unsigned char 
  8979 ;; Registers used:
  8980 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8981 ;; Tracked objects:
  8982 ;;		On entry : 0/0
  8983 ;;		On exit  : 0/0
  8984 ;;		Unchanged: 0/0
  8985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8986 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8988 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8989 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8990 ;;Total ram usage:        3 bytes
  8991 ;; Hardware stack levels used:    1
  8992 ;; Hardware stack levels required when called:    8
  8993 ;; This function calls:
  8994 ;;		_OLED_print_xy
  8995 ;;		_ftoa
  8996 ;;		_returnToPage
  8997 ;;		_spinInput
  8998 ;; This function is called by:
  8999 ;;		_menu
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           
  9004                           ;psect for function _setSkyTemp
  9005  2C88                     _setSkyTemp:	
  9006                           
  9007                           ;menu.c: 300: uint8_t setSkyTemp(t_globalData *data);menu.c: 301: {;menu.c: 302:  return
      +                          ToPage(0);
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9011  2C88  3000               	movlw	0
  9012  2C89  3190  2001  31AC   	fcall	_returnToPage
  9013                           
  9014                           ;menu.c: 303:  if (g_screenRefresh)
  9015  2C8C  0141               	movlb	1	; select bank1
  9016  2C8D  086D               	movf	_g_screenRefresh^(0+128),w
  9017  2C8E  1903               	btfsc	3,2
  9018  2C8F  2C9A               	goto	l7669
  9019                           
  9020                           ;menu.c: 304:   OLED_print_xy(0, 0, "Sky temp.   ");
  9021  2C90  0140               	movlb	0	; select bank0
  9022  2C91  01B1               	clrf	OLED_print_xy@row
  9023  2C92  30AD               	movlw	low (STR_56| (0+32768))
  9024  2C93  00B2               	movwf	OLED_print_xy@s
  9025  2C94  30B9               	movlw	high (STR_56| (0+32768))
  9026  2C95  00B3               	movwf	OLED_print_xy@s+1
  9027  2C96  3000               	movlw	0
  9028  2C97  31B7  2727  31AC   	fcall	_OLED_print_xy
  9029  2C9A                     l7669:	
  9030                           
  9031                           ;menu.c: 305:  spinInput(&data->skyTemp, -50, -20, 1);
  9032  2C9A  0141               	movlb	1	; select bank1
  9033  2C9B  0847               	movf	setSkyTemp@data^(0+128),w
  9034  2C9C  3E21               	addlw	33
  9035  2C9D  00B9               	movwf	spinInput@input^(0+128)
  9036  2C9E  3000               	movlw	0
  9037  2C9F  3D48               	addwfc	(setSkyTemp@data+1)^(0+128),w
  9038  2CA0  00BA               	movwf	(spinInput@input+1)^(0+128)
  9039  2CA1  30C2               	movlw	194
  9040  2CA2  00BE               	movwf	(spinInput@min+3)^(0+128)
  9041  2CA3  3048               	movlw	72
  9042  2CA4  00BD               	movwf	(spinInput@min+2)^(0+128)
  9043  2CA5  3000               	movlw	0
  9044  2CA6  00BC               	movwf	(spinInput@min+1)^(0+128)
  9045  2CA7  3000               	movlw	0
  9046  2CA8  00BB               	movwf	spinInput@min^(0+128)
  9047  2CA9  30C1               	movlw	193
  9048  2CAA  00C2               	movwf	(spinInput@max+3)^(0+128)
  9049  2CAB  30A0               	movlw	160
  9050  2CAC  00C1               	movwf	(spinInput@max+2)^(0+128)
  9051  2CAD  3000               	movlw	0
  9052  2CAE  00C0               	movwf	(spinInput@max+1)^(0+128)
  9053  2CAF  3000               	movlw	0
  9054  2CB0  00BF               	movwf	spinInput@max^(0+128)
  9055  2CB1  303F               	movlw	63
  9056  2CB2  00C6               	movwf	(spinInput@step+3)^(0+128)
  9057  2CB3  3080               	movlw	128
  9058  2CB4  00C5               	movwf	(spinInput@step+2)^(0+128)
  9059  2CB5  3000               	movlw	0
  9060  2CB6  00C4               	movwf	(spinInput@step+1)^(0+128)
  9061  2CB7  3000               	movlw	0
  9062  2CB8  00C3               	movwf	spinInput@step^(0+128)
  9063  2CB9  31A0  201F  31AC   	fcall	_spinInput
  9064                           
  9065                           ;menu.c: 306:  ftoa(str, data->skyTemp, 3, 0);
  9066  2CBC  0141               	movlb	1	; select bank1
  9067  2CBD  0847               	movf	setSkyTemp@data^(0+128),w
  9068  2CBE  3E21               	addlw	33
  9069  2CBF  0086               	movwf	6
  9070  2CC0  3000               	movlw	0
  9071  2CC1  3D48               	addwfc	(setSkyTemp@data+1)^(0+128),w
  9072  2CC2  0087               	movwf	7
  9073  2CC3  3F40               	moviw [0]fsr1
  9074  2CC4  00B9               	movwf	ftoa@fValue^(0+128)
  9075  2CC5  3F41               	moviw [1]fsr1
  9076  2CC6  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9077  2CC7  3F42               	moviw [2]fsr1
  9078  2CC8  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9079  2CC9  3F43               	moviw [3]fsr1
  9080  2CCA  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9081  2CCB  3003               	movlw	3
  9082  2CCC  00C9               	movwf	??_setSkyTemp^(0+128)
  9083  2CCD  0849               	movf	??_setSkyTemp^(0+128),w
  9084  2CCE  00BD               	movwf	ftoa@width^(0+128)
  9085  2CCF  01BE               	clrf	ftoa@prec^(0+128)
  9086  2CD0  304E               	movlw	(low (_str| (0+512)))& (0+255)
  9087  2CD1  31A5  2515  31AC   	fcall	_ftoa
  9088                           
  9089                           ;menu.c: 307:  OLED_print_xy(0, 1, "\004");
  9090  2CD4  0140               	movlb	0	; select bank0
  9091  2CD5  01B1               	clrf	OLED_print_xy@row
  9092  2CD6  0AB1               	incf	OLED_print_xy@row,f
  9093  2CD7  30B8               	movlw	low ((STR_54+5)| (0+32768))
  9094  2CD8  00B2               	movwf	OLED_print_xy@s
  9095  2CD9  30BA               	movlw	high ((STR_54+5)| (0+32768))
  9096  2CDA  00B3               	movwf	OLED_print_xy@s+1
  9097  2CDB  3000               	movlw	0
  9098  2CDC  31B7  2727  31AC   	fcall	_OLED_print_xy
  9099                           
  9100                           ;menu.c: 308:  OLED_print_xy(1, 1, str);
  9101  2CDF  0140               	movlb	0	; select bank0
  9102  2CE0  01B1               	clrf	OLED_print_xy@row
  9103  2CE1  0AB1               	incf	OLED_print_xy@row,f
  9104  2CE2  304E               	movlw	low _str
  9105  2CE3  00B2               	movwf	OLED_print_xy@s
  9106  2CE4  3002               	movlw	high _str
  9107  2CE5  00B3               	movwf	OLED_print_xy@s+1
  9108  2CE6  3001               	movlw	1
  9109  2CE7  31B7  2727  31AC   	fcall	_OLED_print_xy
  9110                           
  9111                           ;menu.c: 309:  OLED_print_xy(4, 1, "\001 \003     ");
  9112  2CEA  0140               	movlb	0	; select bank0
  9113  2CEB  01B1               	clrf	OLED_print_xy@row
  9114  2CEC  0AB1               	incf	OLED_print_xy@row,f
  9115  2CED  3052               	movlw	low (STR_58| (0+32768))
  9116  2CEE  00B2               	movwf	OLED_print_xy@s
  9117  2CEF  30BA               	movlw	high (STR_58| (0+32768))
  9118  2CF0  00B3               	movwf	OLED_print_xy@s+1
  9119  2CF1  3004               	movlw	4
  9120  2CF2  31B7  2727         	fcall	_OLED_print_xy
  9121                           
  9122                           ;menu.c: 310:  return 0;
  9123  2CF4  3000               	movlw	0
  9124  2CF5  0008               	return
  9125  2CF6                     __end_of_setSkyTemp:	
  9126                           
  9127                           	psect	text12
  9128  2C1A                     __ptext12:	
  9129 ;; *************** function _setDPOffset *****************
  9130 ;; Defined at:
  9131 ;;		line 283 in file "menu.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  data            2   39[BANK1 ] PTR struct .
  9134 ;;		 -> data(170), 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;		None
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      unsigned char 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9146 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9148 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9149 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9150 ;;Total ram usage:        3 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    8
  9153 ;; This function calls:
  9154 ;;		_OLED_print_xy
  9155 ;;		_ftoa
  9156 ;;		_returnToPage
  9157 ;;		_spinInput
  9158 ;; This function is called by:
  9159 ;;		_menu
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           
  9164                           ;psect for function _setDPOffset
  9165  2C1A                     _setDPOffset:	
  9166                           
  9167                           ;menu.c: 283: uint8_t setDPOffset(t_globalData *data);menu.c: 284: {;menu.c: 285:  retur
      +                          nToPage(0);
  9168                           
  9169                           ;incstack = 0
  9170                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9171  2C1A  3000               	movlw	0
  9172  2C1B  3190  2001  31AC   	fcall	_returnToPage
  9173                           
  9174                           ;menu.c: 286:  if (g_screenRefresh)
  9175  2C1E  0141               	movlb	1	; select bank1
  9176  2C1F  086D               	movf	_g_screenRefresh^(0+128),w
  9177  2C20  1903               	btfsc	3,2
  9178  2C21  2C2C               	goto	l7655
  9179                           
  9180                           ;menu.c: 287:   OLED_print_xy(0, 0, "DP offset   ");
  9181  2C22  0140               	movlb	0	; select bank0
  9182  2C23  01B1               	clrf	OLED_print_xy@row
  9183  2C24  30C7               	movlw	low (STR_53| (0+32768))
  9184  2C25  00B2               	movwf	OLED_print_xy@s
  9185  2C26  30B9               	movlw	high (STR_53| (0+32768))
  9186  2C27  00B3               	movwf	OLED_print_xy@s+1
  9187  2C28  3000               	movlw	0
  9188  2C29  31B7  2727  31AC   	fcall	_OLED_print_xy
  9189  2C2C                     l7655:	
  9190                           
  9191                           ;menu.c: 288:  spinInput(&data->dpOffset, 0, 10, 0.5);
  9192  2C2C  0141               	movlb	1	; select bank1
  9193  2C2D  0847               	movf	setDPOffset@data^(0+128),w
  9194  2C2E  3E1D               	addlw	29
  9195  2C2F  00B9               	movwf	spinInput@input^(0+128)
  9196  2C30  3000               	movlw	0
  9197  2C31  3D48               	addwfc	(setDPOffset@data+1)^(0+128),w
  9198  2C32  00BA               	movwf	(spinInput@input+1)^(0+128)
  9199  2C33  3000               	movlw	0
  9200  2C34  00BE               	movwf	(spinInput@min+3)^(0+128)
  9201  2C35  3000               	movlw	0
  9202  2C36  00BD               	movwf	(spinInput@min+2)^(0+128)
  9203  2C37  3000               	movlw	0
  9204  2C38  00BC               	movwf	(spinInput@min+1)^(0+128)
  9205  2C39  3000               	movlw	0
  9206  2C3A  00BB               	movwf	spinInput@min^(0+128)
  9207  2C3B  3041               	movlw	65
  9208  2C3C  00C2               	movwf	(spinInput@max+3)^(0+128)
  9209  2C3D  3020               	movlw	32
  9210  2C3E  00C1               	movwf	(spinInput@max+2)^(0+128)
  9211  2C3F  3000               	movlw	0
  9212  2C40  00C0               	movwf	(spinInput@max+1)^(0+128)
  9213  2C41  3000               	movlw	0
  9214  2C42  00BF               	movwf	spinInput@max^(0+128)
  9215  2C43  303F               	movlw	63
  9216  2C44  00C6               	movwf	(spinInput@step+3)^(0+128)
  9217  2C45  3000               	movlw	0
  9218  2C46  00C5               	movwf	(spinInput@step+2)^(0+128)
  9219  2C47  3000               	movlw	0
  9220  2C48  00C4               	movwf	(spinInput@step+1)^(0+128)
  9221  2C49  3000               	movlw	0
  9222  2C4A  00C3               	movwf	spinInput@step^(0+128)
  9223  2C4B  31A0  201F  31AC   	fcall	_spinInput
  9224                           
  9225                           ;menu.c: 289:  ftoa(str, data->dpOffset, 4, 1);
  9226  2C4E  0141               	movlb	1	; select bank1
  9227  2C4F  0847               	movf	setDPOffset@data^(0+128),w
  9228  2C50  0086               	movwf	6
  9229  2C51  0848               	movf	(setDPOffset@data+1)^(0+128),w
  9230  2C52  0087               	movwf	7
  9231  2C53  315D               	addfsr 1,29
  9232  2C54  3F40               	moviw [0]fsr1
  9233  2C55  00B9               	movwf	ftoa@fValue^(0+128)
  9234  2C56  3F41               	moviw [1]fsr1
  9235  2C57  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9236  2C58  3F42               	moviw [2]fsr1
  9237  2C59  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9238  2C5A  3F43               	moviw [3]fsr1
  9239  2C5B  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9240  2C5C  3004               	movlw	4
  9241  2C5D  00C9               	movwf	??_setDPOffset^(0+128)
  9242  2C5E  0849               	movf	??_setDPOffset^(0+128),w
  9243  2C5F  00BD               	movwf	ftoa@width^(0+128)
  9244  2C60  01BE               	clrf	ftoa@prec^(0+128)
  9245  2C61  0ABE               	incf	ftoa@prec^(0+128),f
  9246  2C62  304E               	movlw	(low (_str| (0+512)))& (0+255)
  9247  2C63  31A5  2515  31AC   	fcall	_ftoa
  9248                           
  9249                           ;menu.c: 290:  OLED_print_xy(0, 1, "temp.\004");
  9250  2C66  0140               	movlb	0	; select bank0
  9251  2C67  01B1               	clrf	OLED_print_xy@row
  9252  2C68  0AB1               	incf	OLED_print_xy@row,f
  9253  2C69  30B3               	movlw	low (STR_54| (0+32768))
  9254  2C6A  00B2               	movwf	OLED_print_xy@s
  9255  2C6B  30BA               	movlw	high (STR_54| (0+32768))
  9256  2C6C  00B3               	movwf	OLED_print_xy@s+1
  9257  2C6D  3000               	movlw	0
  9258  2C6E  31B7  2727  31AC   	fcall	_OLED_print_xy
  9259                           
  9260                           ;menu.c: 291:  OLED_print_xy(6, 1, str);
  9261  2C71  0140               	movlb	0	; select bank0
  9262  2C72  01B1               	clrf	OLED_print_xy@row
  9263  2C73  0AB1               	incf	OLED_print_xy@row,f
  9264  2C74  304E               	movlw	low _str
  9265  2C75  00B2               	movwf	OLED_print_xy@s
  9266  2C76  3002               	movlw	high _str
  9267  2C77  00B3               	movwf	OLED_print_xy@s+1
  9268  2C78  3006               	movlw	6
  9269  2C79  31B7  2727  31AC   	fcall	_OLED_print_xy
  9270                           
  9271                           ;menu.c: 292:  OLED_print_xy(10, 1, "\001\003");
  9272  2C7C  0140               	movlb	0	; select bank0
  9273  2C7D  01B1               	clrf	OLED_print_xy@row
  9274  2C7E  0AB1               	incf	OLED_print_xy@row,f
  9275  2C7F  30DE               	movlw	low (STR_55| (0+32768))
  9276  2C80  00B2               	movwf	OLED_print_xy@s
  9277  2C81  30BA               	movlw	high (STR_55| (0+32768))
  9278  2C82  00B3               	movwf	OLED_print_xy@s+1
  9279  2C83  300A               	movlw	10
  9280  2C84  31B7  2727         	fcall	_OLED_print_xy
  9281                           
  9282                           ;menu.c: 293:  return 0;
  9283  2C86  3000               	movlw	0
  9284  2C87  0008               	return
  9285  2C88                     __end_of_setDPOffset:	
  9286                           
  9287                           	psect	text13
  9288  216B                     __ptext13:	
  9289 ;; *************** function _setup *****************
  9290 ;; Defined at:
  9291 ;;		line 259 in file "menu.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;  data            2   39[BANK1 ] PTR struct .
  9294 ;;		 -> data(170), 
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;		None
  9297 ;; Return value:  Size  Location     Type
  9298 ;;                  1    wreg      unsigned char 
  9299 ;; Registers used:
  9300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9301 ;; Tracked objects:
  9302 ;;		On entry : 0/0
  9303 ;;		On exit  : 0/0
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9306 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9308 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9309 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9310 ;;Total ram usage:        4 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    9
  9313 ;; This function calls:
  9314 ;;		_OLED_print_xy
  9315 ;;		_ftoa
  9316 ;;		_paging
  9317 ;;		_returnToPage
  9318 ;; This function is called by:
  9319 ;;		_menu
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           
  9324                           ;psect for function _setup
  9325  216B                     _setup:	
  9326                           
  9327                           ;menu.c: 259: uint8_t setup(t_globalData *data);menu.c: 260: {;menu.c: 261:  static uint
      +                          8_t page = 0;;menu.c: 263:  returnToPage(page);
  9328                           
  9329                           ;incstack = 0
  9330                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9331  216B  0142               	movlb	2	; select bank2
  9332  216C  086C               	movf	setup@page^(0+256),w
  9333  216D  3190  2001  31A1   	fcall	_returnToPage
  9334                           
  9335                           ;menu.c: 264:  if (g_screenRefresh) {
  9336  2170  0141               	movlb	1	; select bank1
  9337  2171  086D               	movf	_g_screenRefresh^(0+128),w
  9338  2172  1903               	btfsc	3,2
  9339  2173  2A14               	goto	l7643
  9340                           
  9341                           ;menu.c: 265:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  9342  2174  0140               	movlb	0	; select bank0
  9343  2175  01B1               	clrf	OLED_print_xy@row
  9344  2176  3000               	movlw	low (STR_48| (0+32768))
  9345  2177  00B2               	movwf	OLED_print_xy@s
  9346  2178  30B8               	movlw	high (STR_48| (0+32768))
  9347  2179  00B3               	movwf	OLED_print_xy@s+1
  9348  217A  3000               	movlw	0
  9349  217B  31B7  2727  31A1   	fcall	_OLED_print_xy
  9350                           
  9351                           ;menu.c: 266:   OLED_print_xy(0, 1, "temp. ");
  9352  217E  0140               	movlb	0	; select bank0
  9353  217F  01B1               	clrf	OLED_print_xy@row
  9354  2180  0AB1               	incf	OLED_print_xy@row,f
  9355  2181  30C1               	movlw	low (STR_49| (0+32768))
  9356  2182  00B2               	movwf	OLED_print_xy@s
  9357  2183  30BA               	movlw	high (STR_49| (0+32768))
  9358  2184  00B3               	movwf	OLED_print_xy@s+1
  9359  2185  3000               	movlw	0
  9360  2186  31B7  2727  31A1   	fcall	_OLED_print_xy
  9361                           
  9362                           ;menu.c: 267:   ftoa(str, data->dpOffset, 4, 1);
  9363  2189  0141               	movlb	1	; select bank1
  9364  218A  0847               	movf	setup@data^(0+128),w
  9365  218B  0086               	movwf	6
  9366  218C  0848               	movf	(setup@data+1)^(0+128),w
  9367  218D  0087               	movwf	7
  9368  218E  315D               	addfsr 1,29
  9369  218F  3F40               	moviw [0]fsr1
  9370  2190  00B9               	movwf	ftoa@fValue^(0+128)
  9371  2191  3F41               	moviw [1]fsr1
  9372  2192  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9373  2193  3F42               	moviw [2]fsr1
  9374  2194  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9375  2195  3F43               	moviw [3]fsr1
  9376  2196  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9377  2197  3004               	movlw	4
  9378  2198  00C9               	movwf	??_setup^(0+128)
  9379  2199  0849               	movf	??_setup^(0+128),w
  9380  219A  00BD               	movwf	ftoa@width^(0+128)
  9381  219B  01BE               	clrf	ftoa@prec^(0+128)
  9382  219C  0ABE               	incf	ftoa@prec^(0+128),f
  9383  219D  304E               	movlw	(low (_str| (0+512)))& (0+255)
  9384  219E  31A5  2515  31A1   	fcall	_ftoa
  9385                           
  9386                           ;menu.c: 268:   OLED_print_xy(6, 1, str);
  9387  21A1  0140               	movlb	0	; select bank0
  9388  21A2  01B1               	clrf	OLED_print_xy@row
  9389  21A3  0AB1               	incf	OLED_print_xy@row,f
  9390  21A4  304E               	movlw	low _str
  9391  21A5  00B2               	movwf	OLED_print_xy@s
  9392  21A6  3002               	movlw	high _str
  9393  21A7  00B3               	movwf	OLED_print_xy@s+1
  9394  21A8  3006               	movlw	6
  9395  21A9  31B7  2727  31A1   	fcall	_OLED_print_xy
  9396                           
  9397                           ;menu.c: 269:   OLED_print_xy(10, 1, "\001 ");
  9398  21AC  0140               	movlb	0	; select bank0
  9399  21AD  01B1               	clrf	OLED_print_xy@row
  9400  21AE  0AB1               	incf	OLED_print_xy@row,f
  9401  21AF  30E1               	movlw	low (STR_50| (0+32768))
  9402  21B0  00B2               	movwf	OLED_print_xy@s
  9403  21B1  30BA               	movlw	high (STR_50| (0+32768))
  9404  21B2  00B3               	movwf	OLED_print_xy@s+1
  9405  21B3  300A               	movlw	10
  9406  21B4  31B7  2727  31A1   	fcall	_OLED_print_xy
  9407                           
  9408                           ;menu.c: 270:   ftoa(str, data->skyTemp, 3, 0);
  9409  21B7  0141               	movlb	1	; select bank1
  9410  21B8  0847               	movf	setup@data^(0+128),w
  9411  21B9  3E21               	addlw	33
  9412  21BA  0086               	movwf	6
  9413  21BB  3000               	movlw	0
  9414  21BC  3D48               	addwfc	(setup@data+1)^(0+128),w
  9415  21BD  0087               	movwf	7
  9416  21BE  3F40               	moviw [0]fsr1
  9417  21BF  00B9               	movwf	ftoa@fValue^(0+128)
  9418  21C0  3F41               	moviw [1]fsr1
  9419  21C1  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9420  21C2  3F42               	moviw [2]fsr1
  9421  21C3  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9422  21C4  3F43               	moviw [3]fsr1
  9423  21C5  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9424  21C6  3003               	movlw	3
  9425  21C7  00C9               	movwf	??_setup^(0+128)
  9426  21C8  0849               	movf	??_setup^(0+128),w
  9427  21C9  00BD               	movwf	ftoa@width^(0+128)
  9428  21CA  01BE               	clrf	ftoa@prec^(0+128)
  9429  21CB  304E               	movlw	(low (_str| (0+512)))& (0+255)
  9430  21CC  31A5  2515  31A1   	fcall	_ftoa
  9431                           
  9432                           ;menu.c: 271:   OLED_print_xy(12 + 0, 1, str);
  9433  21CF  0140               	movlb	0	; select bank0
  9434  21D0  01B1               	clrf	OLED_print_xy@row
  9435  21D1  0AB1               	incf	OLED_print_xy@row,f
  9436  21D2  304E               	movlw	low _str
  9437  21D3  00B2               	movwf	OLED_print_xy@s
  9438  21D4  3002               	movlw	high _str
  9439  21D5  00B3               	movwf	OLED_print_xy@s+1
  9440  21D6  300C               	movlw	12
  9441  21D7  31B7  2727  31A1   	fcall	_OLED_print_xy
  9442                           
  9443                           ;menu.c: 272:   OLED_print_xy(12 + 3, 1, "\001        ");
  9444  21DA  0140               	movlb	0	; select bank0
  9445  21DB  01B1               	clrf	OLED_print_xy@row
  9446  21DC  0AB1               	incf	OLED_print_xy@row,f
  9447  21DD  3048               	movlw	low (STR_51| (0+32768))
  9448  21DE  00B2               	movwf	OLED_print_xy@s
  9449  21DF  30BA               	movlw	high (STR_51| (0+32768))
  9450  21E0  00B3               	movwf	OLED_print_xy@s+1
  9451  21E1  300F               	movlw	15
  9452  21E2  31B7  2727  31A1   	fcall	_OLED_print_xy
  9453                           
  9454                           ;menu.c: 273:   ftoa(str, data->fudgeFactor, 3, 1);
  9455  21E5  0141               	movlb	1	; select bank1
  9456  21E6  0847               	movf	setup@data^(0+128),w
  9457  21E7  3E25               	addlw	37
  9458  21E8  0086               	movwf	6
  9459  21E9  3000               	movlw	0
  9460  21EA  3D48               	addwfc	(setup@data+1)^(0+128),w
  9461  21EB  0087               	movwf	7
  9462  21EC  3F40               	moviw [0]fsr1
  9463  21ED  00B9               	movwf	ftoa@fValue^(0+128)
  9464  21EE  3F41               	moviw [1]fsr1
  9465  21EF  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9466  21F0  3F42               	moviw [2]fsr1
  9467  21F1  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9468  21F2  3F43               	moviw [3]fsr1
  9469  21F3  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9470  21F4  3003               	movlw	3
  9471  21F5  00C9               	movwf	??_setup^(0+128)
  9472  21F6  0849               	movf	??_setup^(0+128),w
  9473  21F7  00BD               	movwf	ftoa@width^(0+128)
  9474  21F8  01BE               	clrf	ftoa@prec^(0+128)
  9475  21F9  0ABE               	incf	ftoa@prec^(0+128),f
  9476  21FA  304E               	movlw	(low (_str| (0+512)))& (0+255)
  9477  21FB  31A5  2515  31A1   	fcall	_ftoa
  9478                           
  9479                           ;menu.c: 274:   OLED_print_xy(2 * 12 + 0, 1, str);
  9480  21FE  0140               	movlb	0	; select bank0
  9481  21FF  01B1               	clrf	OLED_print_xy@row
  9482  2200  0AB1               	incf	OLED_print_xy@row,f
  9483  2201  304E               	movlw	low _str
  9484  2202  00B2               	movwf	OLED_print_xy@s
  9485  2203  3002               	movlw	high _str
  9486  2204  00B3               	movwf	OLED_print_xy@s+1
  9487  2205  3018               	movlw	24
  9488  2206  31B7  2727  31A1   	fcall	_OLED_print_xy
  9489                           
  9490                           ;menu.c: 275:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  9491  2209  0140               	movlb	0	; select bank0
  9492  220A  01B1               	clrf	OLED_print_xy@row
  9493  220B  0AB1               	incf	OLED_print_xy@row,f
  9494  220C  3055               	movlw	low ((STR_28+3)| (0+32768))
  9495  220D  00B2               	movwf	OLED_print_xy@s
  9496  220E  30B9               	movlw	high ((STR_28+3)| (0+32768))
  9497  220F  00B3               	movwf	OLED_print_xy@s+1
  9498  2210  301C               	movlw	28
  9499  2211  31B7  2727  31A1   	fcall	_OLED_print_xy
  9500  2214                     l7643:	
  9501                           
  9502                           ;menu.c: 277:  page = paging(page, 3);
  9503  2214  3003               	movlw	3
  9504  2215  0141               	movlb	1	; select bank1
  9505  2216  00C9               	movwf	??_setup^(0+128)
  9506  2217  0849               	movf	??_setup^(0+128),w
  9507  2218  0140               	movlb	0	; select bank0
  9508  2219  00AB               	movwf	paging@lastPage
  9509  221A  0142               	movlb	2	; select bank2
  9510  221B  086C               	movf	setup@page^(0+256),w
  9511  221C  31AB  23AF         	fcall	_paging
  9512  221E  0141               	movlb	1	; select bank1
  9513  221F  00CA               	movwf	(??_setup+1)^(0+128)
  9514  2220  084A               	movf	(??_setup+1)^(0+128),w
  9515  2221  0142               	movlb	2	; select bank2
  9516  2222  00EC               	movwf	setup@page^(0+256)
  9517                           
  9518                           ;menu.c: 278:  return page;
  9519  2223  086C               	movf	setup@page^(0+256),w
  9520  2224  0008               	return
  9521  2225                     __end_of_setup:	
  9522                           
  9523                           	psect	text14
  9524  2EDD                     __ptext14:	
  9525 ;; *************** function _setLensDia *****************
  9526 ;; Defined at:
  9527 ;;		line 243 in file "menu.c"
  9528 ;; Parameters:    Size  Location     Type
  9529 ;;  data            2   39[BANK1 ] PTR struct .
  9530 ;;		 -> data(170), 
  9531 ;; Auto vars:     Size  Location     Type
  9532 ;;		None
  9533 ;; Return value:  Size  Location     Type
  9534 ;;                  1    wreg      unsigned char 
  9535 ;; Registers used:
  9536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9537 ;; Tracked objects:
  9538 ;;		On entry : 0/0
  9539 ;;		On exit  : 0/0
  9540 ;;		Unchanged: 0/0
  9541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9542 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9544 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9545 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9546 ;;Total ram usage:        7 bytes
  9547 ;; Hardware stack levels used:    1
  9548 ;; Hardware stack levels required when called:    8
  9549 ;; This function calls:
  9550 ;;		_OLED_print_xy
  9551 ;;		_ftoa
  9552 ;;		_returnToPage
  9553 ;;		_spinInput
  9554 ;; This function is called by:
  9555 ;;		_menu
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _setLensDia
  9561  2EDD                     _setLensDia:	
  9562                           
  9563                           ;menu.c: 243: uint8_t setLensDia(t_globalData *data);menu.c: 244: {;menu.c: 245:  return
      +                          ToPage(0);
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9567  2EDD  3000               	movlw	0
  9568  2EDE  3190  2001  31AE   	fcall	_returnToPage
  9569                           
  9570                           ;menu.c: 246:  if (g_screenRefresh)
  9571  2EE1  0141               	movlb	1	; select bank1
  9572  2EE2  086D               	movf	_g_screenRefresh^(0+128),w
  9573  2EE3  1903               	btfsc	3,2
  9574  2EE4  2EEF               	goto	l7615
  9575                           
  9576                           ;menu.c: 247:   OLED_print_xy(0, 0, "Lens diam.  ");
  9577  2EE5  0140               	movlb	0	; select bank0
  9578  2EE6  01B1               	clrf	OLED_print_xy@row
  9579  2EE7  30D4               	movlw	low (STR_34| (0+32768))
  9580  2EE8  00B2               	movwf	OLED_print_xy@s
  9581  2EE9  30B9               	movlw	high (STR_34| (0+32768))
  9582  2EEA  00B3               	movwf	OLED_print_xy@s+1
  9583  2EEB  3000               	movlw	0
  9584  2EEC  31B7  2727  31AE   	fcall	_OLED_print_xy
  9585  2EEF                     l7615:	
  9586                           
  9587                           ;menu.c: 248:  spinInput(&data->chData[selectedChannel].lensDia, 1, 16, 0.5);
  9588  2EEF  0140               	movlb	0	; select bank0
  9589  2EF0  086A               	movf	_selectedChannel,w
  9590  2EF1  0141               	movlb	1	; select bank1
  9591  2EF2  00C9               	movwf	??_setLensDia^(0+128)
  9592  2EF3  01CA               	clrf	(??_setLensDia^(0+128)+1)
  9593  2EF4  3005               	movlw	5
  9594  2EF5                     u10085:	
  9595  2EF5  35C9               	lslf	??_setLensDia^(0+128),f
  9596  2EF6  0DCA               	rlf	(??_setLensDia^(0+128)+1),f
  9597  2EF7  0B89               	decfsz	9,f
  9598  2EF8  2EF5               	goto	u10085
  9599  2EF9  0849               	movf	??_setLensDia^(0+128),w
  9600  2EFA  0747               	addwf	setLensDia@data^(0+128),w
  9601  2EFB  00CB               	movwf	(??_setLensDia+2)^(0+128)
  9602  2EFC  084A               	movf	(??_setLensDia+1)^(0+128),w
  9603  2EFD  3D48               	addwfc	(setLensDia@data+1)^(0+128),w
  9604  2EFE  00CC               	movwf	(??_setLensDia+3)^(0+128)
  9605  2EFF  084B               	movf	(??_setLensDia+2)^(0+128),w
  9606  2F00  3E40               	addlw	64
  9607  2F01  00B9               	movwf	spinInput@input^(0+128)
  9608  2F02  3000               	movlw	0
  9609  2F03  3D4C               	addwfc	(??_setLensDia+3)^(0+128),w
  9610  2F04  00BA               	movwf	(spinInput@input+1)^(0+128)
  9611  2F05  303F               	movlw	63
  9612  2F06  00BE               	movwf	(spinInput@min+3)^(0+128)
  9613  2F07  3080               	movlw	128
  9614  2F08  00BD               	movwf	(spinInput@min+2)^(0+128)
  9615  2F09  3000               	movlw	0
  9616  2F0A  00BC               	movwf	(spinInput@min+1)^(0+128)
  9617  2F0B  3000               	movlw	0
  9618  2F0C  00BB               	movwf	spinInput@min^(0+128)
  9619  2F0D  3041               	movlw	65
  9620  2F0E  00C2               	movwf	(spinInput@max+3)^(0+128)
  9621  2F0F  3080               	movlw	128
  9622  2F10  00C1               	movwf	(spinInput@max+2)^(0+128)
  9623  2F11  3000               	movlw	0
  9624  2F12  00C0               	movwf	(spinInput@max+1)^(0+128)
  9625  2F13  3000               	movlw	0
  9626  2F14  00BF               	movwf	spinInput@max^(0+128)
  9627  2F15  303F               	movlw	63
  9628  2F16  00C6               	movwf	(spinInput@step+3)^(0+128)
  9629  2F17  3000               	movlw	0
  9630  2F18  00C5               	movwf	(spinInput@step+2)^(0+128)
  9631  2F19  3000               	movlw	0
  9632  2F1A  00C4               	movwf	(spinInput@step+1)^(0+128)
  9633  2F1B  3000               	movlw	0
  9634  2F1C  00C3               	movwf	spinInput@step^(0+128)
  9635  2F1D  31A0  201F  31AE   	fcall	_spinInput
  9636                           
  9637                           ;menu.c: 249:  ftoa(str, data->chData[selectedChannel].lensDia, 4, 1);
  9638  2F20  0140               	movlb	0	; select bank0
  9639  2F21  086A               	movf	_selectedChannel,w
  9640  2F22  0141               	movlb	1	; select bank1
  9641  2F23  00C9               	movwf	??_setLensDia^(0+128)
  9642  2F24  01CA               	clrf	(??_setLensDia^(0+128)+1)
  9643  2F25  3005               	movlw	5
  9644  2F26                     u10095:	
  9645  2F26  35C9               	lslf	??_setLensDia^(0+128),f
  9646  2F27  0DCA               	rlf	(??_setLensDia^(0+128)+1),f
  9647  2F28  0B89               	decfsz	9,f
  9648  2F29  2F26               	goto	u10095
  9649  2F2A  0849               	movf	??_setLensDia^(0+128),w
  9650  2F2B  0747               	addwf	setLensDia@data^(0+128),w
  9651  2F2C  00CB               	movwf	(??_setLensDia+2)^(0+128)
  9652  2F2D  084A               	movf	(??_setLensDia+1)^(0+128),w
  9653  2F2E  3D48               	addwfc	(setLensDia@data+1)^(0+128),w
  9654  2F2F  00CC               	movwf	(??_setLensDia+3)^(0+128)
  9655  2F30  084B               	movf	(??_setLensDia+2)^(0+128),w
  9656  2F31  3E40               	addlw	64
  9657  2F32  0086               	movwf	6
  9658  2F33  3000               	movlw	0
  9659  2F34  3D4C               	addwfc	(??_setLensDia+3)^(0+128),w
  9660  2F35  0087               	movwf	7
  9661  2F36  3F40               	moviw [0]fsr1
  9662  2F37  00B9               	movwf	ftoa@fValue^(0+128)
  9663  2F38  3F41               	moviw [1]fsr1
  9664  2F39  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9665  2F3A  3F42               	moviw [2]fsr1
  9666  2F3B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9667  2F3C  3F43               	moviw [3]fsr1
  9668  2F3D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9669  2F3E  3004               	movlw	4
  9670  2F3F  00CD               	movwf	(??_setLensDia+4)^(0+128)
  9671  2F40  084D               	movf	(??_setLensDia+4)^(0+128),w
  9672  2F41  00BD               	movwf	ftoa@width^(0+128)
  9673  2F42  01BE               	clrf	ftoa@prec^(0+128)
  9674  2F43  0ABE               	incf	ftoa@prec^(0+128),f
  9675  2F44  304E               	movlw	(low (_str| (0+512)))& (0+255)
  9676  2F45  31A5  2515  31AE   	fcall	_ftoa
  9677                           
  9678                           ;menu.c: 250:  OLED_print_xy(0, 1, "\004");
  9679  2F48  0140               	movlb	0	; select bank0
  9680  2F49  01B1               	clrf	OLED_print_xy@row
  9681  2F4A  0AB1               	incf	OLED_print_xy@row,f
  9682  2F4B  30B8               	movlw	low ((STR_54+5)| (0+32768))
  9683  2F4C  00B2               	movwf	OLED_print_xy@s
  9684  2F4D  30BA               	movlw	high ((STR_54+5)| (0+32768))
  9685  2F4E  00B3               	movwf	OLED_print_xy@s+1
  9686  2F4F  3000               	movlw	0
  9687  2F50  31B7  2727  31AE   	fcall	_OLED_print_xy
  9688                           
  9689                           ;menu.c: 251:  OLED_print_xy(1, 1, str);
  9690  2F53  0140               	movlb	0	; select bank0
  9691  2F54  01B1               	clrf	OLED_print_xy@row
  9692  2F55  0AB1               	incf	OLED_print_xy@row,f
  9693  2F56  304E               	movlw	low _str
  9694  2F57  00B2               	movwf	OLED_print_xy@s
  9695  2F58  3002               	movlw	high _str
  9696  2F59  00B3               	movwf	OLED_print_xy@s+1
  9697  2F5A  3001               	movlw	1
  9698  2F5B  31B7  2727  31AE   	fcall	_OLED_print_xy
  9699                           
  9700                           ;menu.c: 252:  OLED_print_xy(5, 1, " inch \003");
  9701  2F5E  0140               	movlb	0	; select bank0
  9702  2F5F  01B1               	clrf	OLED_print_xy@row
  9703  2F60  0AB1               	incf	OLED_print_xy@row,f
  9704  2F61  306D               	movlw	low (STR_47| (0+32768))
  9705  2F62  00B2               	movwf	OLED_print_xy@s
  9706  2F63  30BA               	movlw	high (STR_47| (0+32768))
  9707  2F64  00B3               	movwf	OLED_print_xy@s+1
  9708  2F65  3005               	movlw	5
  9709  2F66  31B7  2727         	fcall	_OLED_print_xy
  9710                           
  9711                           ;menu.c: 253:  return 0;
  9712  2F68  3000               	movlw	0
  9713  2F69  0008               	return
  9714  2F6A                     __end_of_setLensDia:	
  9715                           
  9716                           	psect	text15
  9717  080C                     __ptext15:	
  9718 ;; *************** function _setOutputPower *****************
  9719 ;; Defined at:
  9720 ;;		line 195 in file "menu.c"
  9721 ;; Parameters:    Size  Location     Type
  9722 ;;  data            2   39[BANK1 ] PTR struct .
  9723 ;;		 -> data(170), 
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  chData          2   45[BANK1 ] PTR struct .
  9726 ;;		 -> data.chData(128), data(170), 
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  1    wreg      unsigned char 
  9729 ;; Registers used:
  9730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9736 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9737 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9738 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9739 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9740 ;;Total ram usage:        8 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    8
  9743 ;; This function calls:
  9744 ;;		_OLED_print_xy
  9745 ;;		___fleq
  9746 ;;		___flge
  9747 ;;		_ftoa
  9748 ;;		_getPB
  9749 ;;		_itoa
  9750 ;;		_returnToPage
  9751 ;;		_spinInput
  9752 ;; This function is called by:
  9753 ;;		_menu
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           
  9758                           ;psect for function _setOutputPower
  9759  080C                     _setOutputPower:	
  9760                           
  9761                           ;menu.c: 195: uint8_t setOutputPower(t_globalData *data);menu.c: 196: {;menu.c: 197:  t_
      +                          channelData *chData = &data->chData[selectedChannel];
  9762                           
  9763                           ;incstack = 0
  9764                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9765  080C  0140               	movlb	0	; select bank0
  9766  080D  086A               	movf	_selectedChannel,w
  9767  080E  0141               	movlb	1	; select bank1
  9768  080F  00C9               	movwf	??_setOutputPower^(0+128)
  9769  0810  01CA               	clrf	(??_setOutputPower^(0+128)+1)
  9770  0811  3005               	movlw	5
  9771  0812                     u9975:	
  9772  0812  35C9               	lslf	??_setOutputPower^(0+128),f
  9773  0813  0DCA               	rlf	(??_setOutputPower^(0+128)+1),f
  9774  0814  0B89               	decfsz	9,f
  9775  0815  2812               	goto	u9975
  9776  0816  0849               	movf	??_setOutputPower^(0+128),w
  9777  0817  0747               	addwf	setOutputPower@data^(0+128),w
  9778  0818  00CB               	movwf	(??_setOutputPower+2)^(0+128)
  9779  0819  084A               	movf	(??_setOutputPower+1)^(0+128),w
  9780  081A  3D48               	addwfc	(setOutputPower@data+1)^(0+128),w
  9781  081B  00CC               	movwf	(??_setOutputPower+3)^(0+128)
  9782  081C  084B               	movf	(??_setOutputPower+2)^(0+128),w
  9783  081D  3E2A               	addlw	42
  9784  081E  00CD               	movwf	setOutputPower@chData^(0+128)
  9785  081F  3000               	movlw	0
  9786  0820  3D4C               	addwfc	(??_setOutputPower+3)^(0+128),w
  9787  0821  00CE               	movwf	(setOutputPower@chData+1)^(0+128)
  9788                           
  9789                           ;menu.c: 199:  returnToPage(0);
  9790  0822  3000               	movlw	0
  9791  0823  3190  2001  3188   	fcall	_returnToPage
  9792                           
  9793                           ;menu.c: 201:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
  9794  0826  0141               	movlb	1	; select bank1
  9795  0827  084D               	movf	setOutputPower@chData^(0+128),w
  9796  0828  0086               	movwf	6
  9797  0829  084E               	movf	(setOutputPower@chData+1)^(0+128),w
  9798  082A  0087               	movwf	7
  9799  082B  315F               	addfsr 1,31
  9800  082C  0301               	decf	1,w
  9801  082D  1903               	btfsc	3,2
  9802  082E  2837               	goto	l7549
  9803  082F  084D               	movf	setOutputPower@chData^(0+128),w
  9804  0830  0086               	movwf	6
  9805  0831  084E               	movf	(setOutputPower@chData+1)^(0+128),w
  9806  0832  0087               	movwf	7
  9807  0833  315F               	addfsr 1,31
  9808  0834  0801               	movf	1,w
  9809  0835  1D03               	btfss	3,2
  9810  0836  2942               	goto	l7583
  9811  0837                     l7549:	
  9812                           
  9813                           ;menu.c: 203:   if (g_screenRefresh)
  9814  0837  086D               	movf	_g_screenRefresh^(0+128),w
  9815  0838  1903               	btfsc	3,2
  9816  0839  2844               	goto	l7553
  9817                           
  9818                           ;menu.c: 204:    OLED_print_xy(0, 0, "Output power");
  9819  083A  0140               	movlb	0	; select bank0
  9820  083B  01B1               	clrf	OLED_print_xy@row
  9821  083C  302F               	movlw	low (STR_22| (0+32768))
  9822  083D  00B2               	movwf	OLED_print_xy@s
  9823  083E  30BA               	movlw	high (STR_22| (0+32768))
  9824  083F  00B3               	movwf	OLED_print_xy@s+1
  9825  0840  3000               	movlw	0
  9826  0841  31B7  2727  3188   	fcall	_OLED_print_xy
  9827  0844                     l7553:	
  9828                           
  9829                           ;menu.c: 205:   spinInput(&chData->Pset, -0.25, chData->Pmax, 0.25);
  9830  0844  0141               	movlb	1	; select bank1
  9831  0845  084D               	movf	setOutputPower@chData^(0+128),w
  9832  0846  3E10               	addlw	16
  9833  0847  00B9               	movwf	spinInput@input^(0+128)
  9834  0848  3000               	movlw	0
  9835  0849  3D4E               	addwfc	(setOutputPower@chData+1)^(0+128),w
  9836  084A  00BA               	movwf	(spinInput@input+1)^(0+128)
  9837  084B  30BE               	movlw	190
  9838  084C  00BE               	movwf	(spinInput@min+3)^(0+128)
  9839  084D  3080               	movlw	128
  9840  084E  00BD               	movwf	(spinInput@min+2)^(0+128)
  9841  084F  3000               	movlw	0
  9842  0850  00BC               	movwf	(spinInput@min+1)^(0+128)
  9843  0851  3000               	movlw	0
  9844  0852  00BB               	movwf	spinInput@min^(0+128)
  9845  0853  084D               	movf	setOutputPower@chData^(0+128),w
  9846  0854  0086               	movwf	6
  9847  0855  084E               	movf	(setOutputPower@chData+1)^(0+128),w
  9848  0856  0087               	movwf	7
  9849  0857  3144               	addfsr 1,4
  9850  0858  3F40               	moviw [0]fsr1
  9851  0859  00BF               	movwf	spinInput@max^(0+128)
  9852  085A  3F41               	moviw [1]fsr1
  9853  085B  00C0               	movwf	(spinInput@max+1)^(0+128)
  9854  085C  3F42               	moviw [2]fsr1
  9855  085D  00C1               	movwf	(spinInput@max+2)^(0+128)
  9856  085E  3F43               	moviw [3]fsr1
  9857  085F  00C2               	movwf	(spinInput@max+3)^(0+128)
  9858  0860  303E               	movlw	62
  9859  0861  00C6               	movwf	(spinInput@step+3)^(0+128)
  9860  0862  3080               	movlw	128
  9861  0863  00C5               	movwf	(spinInput@step+2)^(0+128)
  9862  0864  3000               	movlw	0
  9863  0865  00C4               	movwf	(spinInput@step+1)^(0+128)
  9864  0866  3000               	movlw	0
  9865  0867  00C3               	movwf	spinInput@step^(0+128)
  9866  0868  31A0  201F  3188   	fcall	_spinInput
  9867                           
  9868                           ;menu.c: 206:   if (chData->Pset == 0) {
  9869  086B  0141               	movlb	1	; select bank1
  9870  086C  084D               	movf	setOutputPower@chData^(0+128),w
  9871  086D  0086               	movwf	6
  9872  086E  084E               	movf	(setOutputPower@chData+1)^(0+128),w
  9873  086F  0087               	movwf	7
  9874  0870  3150               	addfsr 1,16
  9875  0871  3F40               	moviw [0]fsr1
  9876  0872  0140               	movlb	0	; select bank0
  9877  0873  00A4               	movwf	___fleq@ff1
  9878  0874  3F41               	moviw [1]fsr1
  9879  0875  00A5               	movwf	___fleq@ff1+1
  9880  0876  3F42               	moviw [2]fsr1
  9881  0877  00A6               	movwf	___fleq@ff1+2
  9882  0878  3F43               	moviw [3]fsr1
  9883  0879  00A7               	movwf	___fleq@ff1+3
  9884  087A  3000               	movlw	0
  9885  087B  00AB               	movwf	___fleq@ff2+3
  9886  087C  3000               	movlw	0
  9887  087D  00AA               	movwf	___fleq@ff2+2
  9888  087E  3000               	movlw	0
  9889  087F  00A9               	movwf	___fleq@ff2+1
  9890  0880  3000               	movlw	0
  9891  0881  00A8               	movwf	___fleq@ff2
  9892  0882  31A9  21F4  3188   	fcall	___fleq
  9893  0885  1C03               	btfss	3,0
  9894  0886  28BA               	goto	l7565
  9895                           
  9896                           ;menu.c: 207:    itoa(str, selectedChannel + 1, 1);
  9897  0887  304E               	movlw	low _str
  9898  0888  0141               	movlb	1	; select bank1
  9899  0889  00B6               	movwf	itoa@str^(0+128)
  9900  088A  3002               	movlw	high _str
  9901  088B  00B7               	movwf	(itoa@str+1)^(0+128)
  9902  088C  0140               	movlb	0	; select bank0
  9903  088D  086A               	movf	_selectedChannel,w
  9904  088E  3E01               	addlw	1
  9905  088F  0141               	movlb	1	; select bank1
  9906  0890  00C9               	movwf	??_setOutputPower^(0+128)
  9907  0891  0849               	movf	??_setOutputPower^(0+128),w
  9908  0892  00B8               	movwf	itoa@value^(0+128)
  9909  0893  01B9               	clrf	itoa@width^(0+128)
  9910  0894  0AB9               	incf	itoa@width^(0+128),f
  9911  0895  31AB  2346  3188   	fcall	_itoa
  9912                           
  9913                           ;menu.c: 208:    OLED_print_xy(0, 1, "\004Ch. ");
  9914  0898  0140               	movlb	0	; select bank0
  9915  0899  01B1               	clrf	OLED_print_xy@row
  9916  089A  0AB1               	incf	OLED_print_xy@row,f
  9917  089B  30C8               	movlw	low (STR_37| (0+32768))
  9918  089C  00B2               	movwf	OLED_print_xy@s
  9919  089D  30BA               	movlw	high (STR_37| (0+32768))
  9920  089E  00B3               	movwf	OLED_print_xy@s+1
  9921  089F  3000               	movlw	0
  9922  08A0  31B7  2727  3188   	fcall	_OLED_print_xy
  9923                           
  9924                           ;menu.c: 209:    OLED_print_xy(5, 1, str);
  9925  08A3  0140               	movlb	0	; select bank0
  9926  08A4  01B1               	clrf	OLED_print_xy@row
  9927  08A5  0AB1               	incf	OLED_print_xy@row,f
  9928  08A6  304E               	movlw	low _str
  9929  08A7  00B2               	movwf	OLED_print_xy@s
  9930  08A8  3002               	movlw	high _str
  9931  08A9  00B3               	movwf	OLED_print_xy@s+1
  9932  08AA  3005               	movlw	5
  9933  08AB  31B7  2727  3188   	fcall	_OLED_print_xy
  9934                           
  9935                           ;menu.c: 210:    OLED_print_xy(6, 1, " off \003");
  9936  08AE  0140               	movlb	0	; select bank0
  9937  08AF  01B1               	clrf	OLED_print_xy@row
  9938  08B0  0AB1               	incf	OLED_print_xy@row,f
  9939  08B1  30A5               	movlw	low (STR_38| (0+32768))
  9940  08B2  00B2               	movwf	OLED_print_xy@s
  9941  08B3  30BA               	movlw	high (STR_38| (0+32768))
  9942  08B4  00B3               	movwf	OLED_print_xy@s+1
  9943  08B5  3006               	movlw	6
  9944  08B6  31B7  2727  3188   	fcall	_OLED_print_xy
  9945                           
  9946                           ;menu.c: 211:   } else if (chData->Pset < 0) {
  9947  08B9  297F               	goto	l7595
  9948  08BA                     l7565:	
  9949  08BA  0141               	movlb	1	; select bank1
  9950  08BB  084D               	movf	setOutputPower@chData^(0+128),w
  9951  08BC  0086               	movwf	6
  9952  08BD  084E               	movf	(setOutputPower@chData+1)^(0+128),w
  9953  08BE  0087               	movwf	7
  9954  08BF  3150               	addfsr 1,16
  9955  08C0  3F40               	moviw [0]fsr1
  9956  08C1  00AD               	movwf	___flge@ff1^(0+128)
  9957  08C2  3F41               	moviw [1]fsr1
  9958  08C3  00AE               	movwf	(___flge@ff1+1)^(0+128)
  9959  08C4  3F42               	moviw [2]fsr1
  9960  08C5  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9961  08C6  3F43               	moviw [3]fsr1
  9962  08C7  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9963  08C8  3000               	movlw	0
  9964  08C9  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9965  08CA  3000               	movlw	0
  9966  08CB  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9967  08CC  3000               	movlw	0
  9968  08CD  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9969  08CE  3000               	movlw	0
  9970  08CF  00B1               	movwf	___flge@ff2^(0+128)
  9971  08D0  31AD  25D6  3188   	fcall	___flge
  9972  08D3  1803               	btfsc	3,0
  9973  08D4  2908               	goto	l7575
  9974                           
  9975                           ;menu.c: 212:    itoa(str, selectedChannel + 1, 1);
  9976  08D5  304E               	movlw	low _str
  9977  08D6  0141               	movlb	1	; select bank1
  9978  08D7  00B6               	movwf	itoa@str^(0+128)
  9979  08D8  3002               	movlw	high _str
  9980  08D9  00B7               	movwf	(itoa@str+1)^(0+128)
  9981  08DA  0140               	movlb	0	; select bank0
  9982  08DB  086A               	movf	_selectedChannel,w
  9983  08DC  3E01               	addlw	1
  9984  08DD  0141               	movlb	1	; select bank1
  9985  08DE  00C9               	movwf	??_setOutputPower^(0+128)
  9986  08DF  0849               	movf	??_setOutputPower^(0+128),w
  9987  08E0  00B8               	movwf	itoa@value^(0+128)
  9988  08E1  01B9               	clrf	itoa@width^(0+128)
  9989  08E2  0AB9               	incf	itoa@width^(0+128),f
  9990  08E3  31AB  2346  3188   	fcall	_itoa
  9991                           
  9992                           ;menu.c: 213:    OLED_print_xy(0, 1, "\004Ch. ");
  9993  08E6  0140               	movlb	0	; select bank0
  9994  08E7  01B1               	clrf	OLED_print_xy@row
  9995  08E8  0AB1               	incf	OLED_print_xy@row,f
  9996  08E9  30C8               	movlw	low (STR_37| (0+32768))
  9997  08EA  00B2               	movwf	OLED_print_xy@s
  9998  08EB  30BA               	movlw	high (STR_37| (0+32768))
  9999  08EC  00B3               	movwf	OLED_print_xy@s+1
 10000  08ED  3000               	movlw	0
 10001  08EE  31B7  2727  3188   	fcall	_OLED_print_xy
 10002                           
 10003                           ;menu.c: 214:    OLED_print_xy(5, 1, str);
 10004  08F1  0140               	movlb	0	; select bank0
 10005  08F2  01B1               	clrf	OLED_print_xy@row
 10006  08F3  0AB1               	incf	OLED_print_xy@row,f
 10007  08F4  304E               	movlw	low _str
 10008  08F5  00B2               	movwf	OLED_print_xy@s
 10009  08F6  3002               	movlw	high _str
 10010  08F7  00B3               	movwf	OLED_print_xy@s+1
 10011  08F8  3005               	movlw	5
 10012  08F9  31B7  2727  3188   	fcall	_OLED_print_xy
 10013                           
 10014                           ;menu.c: 215:    OLED_print_xy(6, 1, " auto\003");
 10015  08FC  0140               	movlb	0	; select bank0
 10016  08FD  01B1               	clrf	OLED_print_xy@row
 10017  08FE  0AB1               	incf	OLED_print_xy@row,f
 10018  08FF  30AC               	movlw	low (STR_40| (0+32768))
 10019  0900  00B2               	movwf	OLED_print_xy@s
 10020  0901  30BA               	movlw	high (STR_40| (0+32768))
 10021  0902  00B3               	movwf	OLED_print_xy@s+1
 10022  0903  3006               	movlw	6
 10023  0904  31B7  2727  3188   	fcall	_OLED_print_xy
 10024                           
 10025                           ;menu.c: 216:   } else {
 10026  0907  297F               	goto	l7595
 10027  0908                     l7575:	
 10028                           
 10029                           ;menu.c: 217:    OLED_print_xy(0, 1, "\004");
 10030  0908  0140               	movlb	0	; select bank0
 10031  0909  01B1               	clrf	OLED_print_xy@row
 10032  090A  0AB1               	incf	OLED_print_xy@row,f
 10033  090B  30B8               	movlw	low ((STR_54+5)| (0+32768))
 10034  090C  00B2               	movwf	OLED_print_xy@s
 10035  090D  30BA               	movlw	high ((STR_54+5)| (0+32768))
 10036  090E  00B3               	movwf	OLED_print_xy@s+1
 10037  090F  3000               	movlw	0
 10038  0910  31B7  2727  3188   	fcall	_OLED_print_xy
 10039                           
 10040                           ;menu.c: 218:    ftoa(str, chData->Pset, 4, 1);
 10041  0913  0141               	movlb	1	; select bank1
 10042  0914  084D               	movf	setOutputPower@chData^(0+128),w
 10043  0915  0086               	movwf	6
 10044  0916  084E               	movf	(setOutputPower@chData+1)^(0+128),w
 10045  0917  0087               	movwf	7
 10046  0918  3150               	addfsr 1,16
 10047  0919  3F40               	moviw [0]fsr1
 10048  091A  00B9               	movwf	ftoa@fValue^(0+128)
 10049  091B  3F41               	moviw [1]fsr1
 10050  091C  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10051  091D  3F42               	moviw [2]fsr1
 10052  091E  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10053  091F  3F43               	moviw [3]fsr1
 10054  0920  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10055  0921  3004               	movlw	4
 10056  0922  00C9               	movwf	??_setOutputPower^(0+128)
 10057  0923  0849               	movf	??_setOutputPower^(0+128),w
 10058  0924  00BD               	movwf	ftoa@width^(0+128)
 10059  0925  01BE               	clrf	ftoa@prec^(0+128)
 10060  0926  0ABE               	incf	ftoa@prec^(0+128),f
 10061  0927  304E               	movlw	(low (_str| (0+512)))& (0+255)
 10062  0928  31A5  2515  3188   	fcall	_ftoa
 10063                           
 10064                           ;menu.c: 219:    OLED_print_xy(1, 1, str);
 10065  092B  0140               	movlb	0	; select bank0
 10066  092C  01B1               	clrf	OLED_print_xy@row
 10067  092D  0AB1               	incf	OLED_print_xy@row,f
 10068  092E  304E               	movlw	low _str
 10069  092F  00B2               	movwf	OLED_print_xy@s
 10070  0930  3002               	movlw	high _str
 10071  0931  00B3               	movwf	OLED_print_xy@s+1
 10072  0932  3001               	movlw	1
 10073  0933  31B7  2727  3188   	fcall	_OLED_print_xy
 10074                           
 10075                           ;menu.c: 220:    OLED_print_xy(5, 1, "W man.\003");
 10076  0936  0140               	movlb	0	; select bank0
 10077  0937  01B1               	clrf	OLED_print_xy@row
 10078  0938  0AB1               	incf	OLED_print_xy@row,f
 10079  0939  3075               	movlw	low (STR_42| (0+32768))
 10080  093A  00B2               	movwf	OLED_print_xy@s
 10081  093B  30BA               	movlw	high (STR_42| (0+32768))
 10082  093C  00B3               	movwf	OLED_print_xy@s+1
 10083  093D  3005               	movlw	5
 10084  093E  31B7  2727  3188   	fcall	_OLED_print_xy
 10085  0941  297F               	goto	l7595
 10086  0942                     l7583:	
 10087  0942  084D               	movf	setOutputPower@chData^(0+128),w
 10088  0943  0086               	movwf	6
 10089  0944  084E               	movf	(setOutputPower@chData+1)^(0+128),w
 10090  0945  0087               	movwf	7
 10091  0946  315F               	addfsr 1,31
 10092  0947  3004               	movlw	4
 10093  0948  0601               	xorwf	1,w
 10094  0949  1903               	btfsc	3,2
 10095  094A  2954               	goto	l7587
 10096  094B  084D               	movf	setOutputPower@chData^(0+128),w
 10097  094C  0086               	movwf	6
 10098  094D  084E               	movf	(setOutputPower@chData+1)^(0+128),w
 10099  094E  0087               	movwf	7
 10100  094F  315F               	addfsr 1,31
 10101  0950  3003               	movlw	3
 10102  0951  0601               	xorwf	1,w
 10103  0952  1D03               	btfss	3,2
 10104  0953  2981               	goto	l7601
 10105  0954                     l7587:	
 10106                           
 10107                           ;menu.c: 225:   if (g_screenRefresh) {
 10108  0954  086D               	movf	_g_screenRefresh^(0+128),w
 10109  0955  1903               	btfsc	3,2
 10110  0956  296C               	goto	l7591
 10111                           
 10112                           ;menu.c: 226:    OLED_print_xy(0, 0, "Hold button ");
 10113  0957  0140               	movlb	0	; select bank0
 10114  0958  01B1               	clrf	OLED_print_xy@row
 10115  0959  30E1               	movlw	low (STR_43| (0+32768))
 10116  095A  00B2               	movwf	OLED_print_xy@s
 10117  095B  30B9               	movlw	high (STR_43| (0+32768))
 10118  095C  00B3               	movwf	OLED_print_xy@s+1
 10119  095D  3000               	movlw	0
 10120  095E  31B7  2727  3188   	fcall	_OLED_print_xy
 10121                           
 10122                           ;menu.c: 227:    OLED_print_xy(0, 1, "to re-enable");
 10123  0961  0140               	movlb	0	; select bank0
 10124  0962  01B1               	clrf	OLED_print_xy@row
 10125  0963  0AB1               	incf	OLED_print_xy@row,f
 10126  0964  3015               	movlw	low (STR_44| (0+32768))
 10127  0965  00B2               	movwf	OLED_print_xy@s
 10128  0966  30BA               	movlw	high (STR_44| (0+32768))
 10129  0967  00B3               	movwf	OLED_print_xy@s+1
 10130  0968  3000               	movlw	0
 10131  0969  31B7  2727  3188   	fcall	_OLED_print_xy
 10132  096C                     l7591:	
 10133                           
 10134                           ;menu.c: 229:   if (getPB() == PB_LONG)
 10135  096C  31B5  251F  3188   	fcall	_getPB
 10136  096F  3A02               	xorlw	2
 10137  0970  1D03               	skipz
 10138  0971  297F               	goto	l7595
 10139                           
 10140                           ;menu.c: 230:    chData->status = CH_UNCHECKED;
 10141  0972  0141               	movlb	1	; select bank1
 10142  0973  084D               	movf	setOutputPower@chData^(0+128),w
 10143  0974  3E1F               	addlw	31
 10144  0975  00C9               	movwf	??_setOutputPower^(0+128)
 10145  0976  3000               	movlw	0
 10146  0977  3D4E               	addwfc	(setOutputPower@chData+1)^(0+128),w
 10147  0978  00CA               	movwf	(??_setOutputPower+1)^(0+128)
 10148  0979  0849               	movf	??_setOutputPower^(0+128),w
 10149  097A  0086               	movwf	6
 10150  097B  084A               	movf	(??_setOutputPower+1)^(0+128),w
 10151  097C  0087               	movwf	7
 10152  097D  3005               	movlw	5
 10153  097E  0081               	movwf	1
 10154  097F                     l7595:	
 10155                           
 10156                           ;menu.c: 231:   return 0;
 10157  097F  3000               	movlw	0
 10158  0980  0008               	return
 10159  0981                     l7601:	
 10160                           
 10161                           ;menu.c: 235:   return 1;
 10162  0981  3001               	movlw	1
 10163  0982  0008               	return
 10164  0983                     __end_of_setOutputPower:	
 10165                           
 10166                           	psect	text16
 10167  1929                     __ptext16:	
 10168 ;; *************** function _channelSetup *****************
 10169 ;; Defined at:
 10170 ;;		line 140 in file "menu.c"
 10171 ;; Parameters:    Size  Location     Type
 10172 ;;  data            2   39[BANK1 ] PTR struct .
 10173 ;;		 -> data(170), 
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;  chData          2   45[BANK1 ] PTR struct .
 10176 ;;		 -> data.chData(128), data(170), 
 10177 ;; Return value:  Size  Location     Type
 10178 ;;                  1    wreg      unsigned char 
 10179 ;; Registers used:
 10180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10181 ;; Tracked objects:
 10182 ;;		On entry : 0/0
 10183 ;;		On exit  : 0/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10186 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10187 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10188 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10189 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10190 ;;Total ram usage:        8 bytes
 10191 ;; Hardware stack levels used:    1
 10192 ;; Hardware stack levels required when called:    9
 10193 ;; This function calls:
 10194 ;;		_OLED_print_xy
 10195 ;;		___fleq
 10196 ;;		___flge
 10197 ;;		_ftoa
 10198 ;;		_itoa
 10199 ;;		_paging
 10200 ;;		_returnToPage
 10201 ;; This function is called by:
 10202 ;;		_menu
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           
 10207                           ;psect for function _channelSetup
 10208  1929                     _channelSetup:	
 10209                           
 10210                           ;menu.c: 140: uint8_t channelSetup(t_globalData *data);menu.c: 141: {;menu.c: 142:  stat
      +                          ic uint8_t page = 0;;menu.c: 143:  t_channelData *chData = &data->chData[selectedChannel
      +                          ];
 10211                           
 10212                           ;incstack = 0
 10213                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10214  1929  0140               	movlb	0	; select bank0
 10215  192A  086A               	movf	_selectedChannel,w
 10216  192B  0141               	movlb	1	; select bank1
 10217  192C  00C9               	movwf	??_channelSetup^(0+128)
 10218  192D  01CA               	clrf	(??_channelSetup^(0+128)+1)
 10219  192E  3005               	movlw	5
 10220  192F                     u9885:	
 10221  192F  35C9               	lslf	??_channelSetup^(0+128),f
 10222  1930  0DCA               	rlf	(??_channelSetup^(0+128)+1),f
 10223  1931  0B89               	decfsz	9,f
 10224  1932  292F               	goto	u9885
 10225  1933  0849               	movf	??_channelSetup^(0+128),w
 10226  1934  0747               	addwf	channelSetup@data^(0+128),w
 10227  1935  00CB               	movwf	(??_channelSetup+2)^(0+128)
 10228  1936  084A               	movf	(??_channelSetup+1)^(0+128),w
 10229  1937  3D48               	addwfc	(channelSetup@data+1)^(0+128),w
 10230  1938  00CC               	movwf	(??_channelSetup+3)^(0+128)
 10231  1939  084B               	movf	(??_channelSetup+2)^(0+128),w
 10232  193A  3E2A               	addlw	42
 10233  193B  00CD               	movwf	channelSetup@chData^(0+128)
 10234  193C  3000               	movlw	0
 10235  193D  3D4C               	addwfc	(??_channelSetup+3)^(0+128),w
 10236  193E  00CE               	movwf	(channelSetup@chData+1)^(0+128)
 10237                           
 10238                           ;menu.c: 145:  returnToPage(page);
 10239  193F  0142               	movlb	2	; select bank2
 10240  1940  086D               	movf	channelSetup@page^(0+256),w
 10241  1941  3190  2001  3199   	fcall	_returnToPage
 10242                           
 10243                           ;menu.c: 147:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
 10244  1944  0141               	movlb	1	; select bank1
 10245  1945  084D               	movf	channelSetup@chData^(0+128),w
 10246  1946  0086               	movwf	6
 10247  1947  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10248  1948  0087               	movwf	7
 10249  1949  315F               	addfsr 1,31
 10250  194A  0301               	decf	1,w
 10251  194B  1903               	btfsc	3,2
 10252  194C  2955               	goto	l7487
 10253  194D  084D               	movf	channelSetup@chData^(0+128),w
 10254  194E  0086               	movwf	6
 10255  194F  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10256  1950  0087               	movwf	7
 10257  1951  315F               	addfsr 1,31
 10258  1952  0801               	movf	1,w
 10259  1953  1D03               	btfss	3,2
 10260  1954  2A20               	goto	l7515
 10261  1955                     l7487:	
 10262                           
 10263                           ;menu.c: 148:   OLED_print_xy(0, 0, "Output power");
 10264  1955  0140               	movlb	0	; select bank0
 10265  1956  01B1               	clrf	OLED_print_xy@row
 10266  1957  302F               	movlw	low (STR_22| (0+32768))
 10267  1958  00B2               	movwf	OLED_print_xy@s
 10268  1959  30BA               	movlw	high (STR_22| (0+32768))
 10269  195A  00B3               	movwf	OLED_print_xy@s+1
 10270  195B  3000               	movlw	0
 10271  195C  31B7  2727  3199   	fcall	_OLED_print_xy
 10272                           
 10273                           ;menu.c: 149:   if (chData->Pset == 0) {
 10274  195F  0141               	movlb	1	; select bank1
 10275  1960  084D               	movf	channelSetup@chData^(0+128),w
 10276  1961  0086               	movwf	6
 10277  1962  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10278  1963  0087               	movwf	7
 10279  1964  3150               	addfsr 1,16
 10280  1965  3F40               	moviw [0]fsr1
 10281  1966  0140               	movlb	0	; select bank0
 10282  1967  00A4               	movwf	___fleq@ff1
 10283  1968  3F41               	moviw [1]fsr1
 10284  1969  00A5               	movwf	___fleq@ff1+1
 10285  196A  3F42               	moviw [2]fsr1
 10286  196B  00A6               	movwf	___fleq@ff1+2
 10287  196C  3F43               	moviw [3]fsr1
 10288  196D  00A7               	movwf	___fleq@ff1+3
 10289  196E  3000               	movlw	0
 10290  196F  00AB               	movwf	___fleq@ff2+3
 10291  1970  3000               	movlw	0
 10292  1971  00AA               	movwf	___fleq@ff2+2
 10293  1972  3000               	movlw	0
 10294  1973  00A9               	movwf	___fleq@ff2+1
 10295  1974  3000               	movlw	0
 10296  1975  00A8               	movwf	___fleq@ff2
 10297  1976  31A9  21F4  3199   	fcall	___fleq
 10298  1979  1C03               	btfss	3,0
 10299  197A  29A9               	goto	l7499
 10300                           
 10301                           ;menu.c: 150:    OLED_print_xy(0, 1, "Ch. ");
 10302  197B  0140               	movlb	0	; select bank0
 10303  197C  01B1               	clrf	OLED_print_xy@row
 10304  197D  0AB1               	incf	OLED_print_xy@row,f
 10305  197E  30C9               	movlw	low ((STR_37+1)| (0+32768))
 10306  197F  00B2               	movwf	OLED_print_xy@s
 10307  1980  30BA               	movlw	high ((STR_37+1)| (0+32768))
 10308  1981  00B3               	movwf	OLED_print_xy@s+1
 10309  1982  3000               	movlw	0
 10310  1983  31B7  2727  3199   	fcall	_OLED_print_xy
 10311                           
 10312                           ;menu.c: 151:    itoa(str, selectedChannel + 1, 1);
 10313  1986  304E               	movlw	low _str
 10314  1987  0141               	movlb	1	; select bank1
 10315  1988  00B6               	movwf	itoa@str^(0+128)
 10316  1989  3002               	movlw	high _str
 10317  198A  00B7               	movwf	(itoa@str+1)^(0+128)
 10318  198B  0140               	movlb	0	; select bank0
 10319  198C  086A               	movf	_selectedChannel,w
 10320  198D  3E01               	addlw	1
 10321  198E  0141               	movlb	1	; select bank1
 10322  198F  00C9               	movwf	??_channelSetup^(0+128)
 10323  1990  0849               	movf	??_channelSetup^(0+128),w
 10324  1991  00B8               	movwf	itoa@value^(0+128)
 10325  1992  01B9               	clrf	itoa@width^(0+128)
 10326  1993  0AB9               	incf	itoa@width^(0+128),f
 10327  1994  31AB  2346  3199   	fcall	_itoa
 10328                           
 10329                           ;menu.c: 152:    OLED_print_xy(4, 1, str);
 10330  1997  0140               	movlb	0	; select bank0
 10331  1998  01B1               	clrf	OLED_print_xy@row
 10332  1999  0AB1               	incf	OLED_print_xy@row,f
 10333  199A  304E               	movlw	low _str
 10334  199B  00B2               	movwf	OLED_print_xy@s
 10335  199C  3002               	movlw	high _str
 10336  199D  00B3               	movwf	OLED_print_xy@s+1
 10337  199E  3004               	movlw	4
 10338  199F  31B7  2727  3199   	fcall	_OLED_print_xy
 10339                           
 10340                           ;menu.c: 153:    OLED_print_xy(5, 1, " off   ");
 10341  19A2  0140               	movlb	0	; select bank0
 10342  19A3  01B1               	clrf	OLED_print_xy@row
 10343  19A4  0AB1               	incf	OLED_print_xy@row,f
 10344  19A5  3085               	movlw	low (STR_24| (0+32768))
 10345  19A6  00B2               	movwf	OLED_print_xy@s
 10346  19A7  30BA               	movlw	high (STR_24| (0+32768))
 10347  19A8  29F1               	goto	L3
 10348  19A9                     l7499:	
 10349                           ;menu.c: 154:   } else if (chData->Pset < 0) {
 10350                           
 10351  19A9  0141               	movlb	1	; select bank1
 10352  19AA  084D               	movf	channelSetup@chData^(0+128),w
 10353  19AB  0086               	movwf	6
 10354  19AC  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10355  19AD  0087               	movwf	7
 10356  19AE  3150               	addfsr 1,16
 10357  19AF  3F40               	moviw [0]fsr1
 10358  19B0  00AD               	movwf	___flge@ff1^(0+128)
 10359  19B1  3F41               	moviw [1]fsr1
 10360  19B2  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10361  19B3  3F42               	moviw [2]fsr1
 10362  19B4  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10363  19B5  3F43               	moviw [3]fsr1
 10364  19B6  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10365  19B7  3000               	movlw	0
 10366  19B8  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10367  19B9  3000               	movlw	0
 10368  19BA  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10369  19BB  3000               	movlw	0
 10370  19BC  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10371  19BD  3000               	movlw	0
 10372  19BE  00B1               	movwf	___flge@ff2^(0+128)
 10373  19BF  31AD  25D6  3199   	fcall	___flge
 10374  19C2  1803               	btfsc	3,0
 10375  19C3  29F4               	goto	l7509
 10376                           
 10377                           ;menu.c: 155:    OLED_print_xy(0, 1, "Ch. ");
 10378  19C4  0140               	movlb	0	; select bank0
 10379  19C5  01B1               	clrf	OLED_print_xy@row
 10380  19C6  0AB1               	incf	OLED_print_xy@row,f
 10381  19C7  30C9               	movlw	low ((STR_37+1)| (0+32768))
 10382  19C8  00B2               	movwf	OLED_print_xy@s
 10383  19C9  30BA               	movlw	high ((STR_37+1)| (0+32768))
 10384  19CA  00B3               	movwf	OLED_print_xy@s+1
 10385  19CB  3000               	movlw	0
 10386  19CC  31B7  2727  3199   	fcall	_OLED_print_xy
 10387                           
 10388                           ;menu.c: 156:    itoa(str, selectedChannel + 1, 1);
 10389  19CF  304E               	movlw	low _str
 10390  19D0  0141               	movlb	1	; select bank1
 10391  19D1  00B6               	movwf	itoa@str^(0+128)
 10392  19D2  3002               	movlw	high _str
 10393  19D3  00B7               	movwf	(itoa@str+1)^(0+128)
 10394  19D4  0140               	movlb	0	; select bank0
 10395  19D5  086A               	movf	_selectedChannel,w
 10396  19D6  3E01               	addlw	1
 10397  19D7  0141               	movlb	1	; select bank1
 10398  19D8  00C9               	movwf	??_channelSetup^(0+128)
 10399  19D9  0849               	movf	??_channelSetup^(0+128),w
 10400  19DA  00B8               	movwf	itoa@value^(0+128)
 10401  19DB  01B9               	clrf	itoa@width^(0+128)
 10402  19DC  0AB9               	incf	itoa@width^(0+128),f
 10403  19DD  31AB  2346  3199   	fcall	_itoa
 10404                           
 10405                           ;menu.c: 157:    OLED_print_xy(4, 1, str);
 10406  19E0  0140               	movlb	0	; select bank0
 10407  19E1  01B1               	clrf	OLED_print_xy@row
 10408  19E2  0AB1               	incf	OLED_print_xy@row,f
 10409  19E3  304E               	movlw	low _str
 10410  19E4  00B2               	movwf	OLED_print_xy@s
 10411  19E5  3002               	movlw	high _str
 10412  19E6  00B3               	movwf	OLED_print_xy@s+1
 10413  19E7  3004               	movlw	4
 10414  19E8  31B7  2727  3199   	fcall	_OLED_print_xy
 10415                           
 10416                           ;menu.c: 158:    OLED_print_xy(5, 1, " auto  ");
 10417  19EB  0140               	movlb	0	; select bank0
 10418  19EC  01B1               	clrf	OLED_print_xy@row
 10419  19ED  0AB1               	incf	OLED_print_xy@row,f
 10420  19EE  3095               	movlw	low (STR_26| (0+32768))
 10421  19EF  00B2               	movwf	OLED_print_xy@s
 10422  19F0  30BA               	movlw	high (STR_26| (0+32768))
 10423  19F1                     L3:	
 10424  19F1  00B3               	movwf	OLED_print_xy@s+1
 10425  19F2  3005               	movlw	5
 10426  19F3  2A78               	goto	L2
 10427  19F4                     l7509:	
 10428                           ;menu.c: 159:   } else {
 10429                           
 10430                           
 10431                           ;menu.c: 160:    ftoa(str, chData->Pset, 4, 1);
 10432  19F4  0141               	movlb	1	; select bank1
 10433  19F5  084D               	movf	channelSetup@chData^(0+128),w
 10434  19F6  0086               	movwf	6
 10435  19F7  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10436  19F8  0087               	movwf	7
 10437  19F9  3150               	addfsr 1,16
 10438  19FA  3F40               	moviw [0]fsr1
 10439  19FB  00B9               	movwf	ftoa@fValue^(0+128)
 10440  19FC  3F41               	moviw [1]fsr1
 10441  19FD  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10442  19FE  3F42               	moviw [2]fsr1
 10443  19FF  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10444  1A00  3F43               	moviw [3]fsr1
 10445  1A01  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10446  1A02  3004               	movlw	4
 10447  1A03  00C9               	movwf	??_channelSetup^(0+128)
 10448  1A04  0849               	movf	??_channelSetup^(0+128),w
 10449  1A05  00BD               	movwf	ftoa@width^(0+128)
 10450  1A06  01BE               	clrf	ftoa@prec^(0+128)
 10451  1A07  0ABE               	incf	ftoa@prec^(0+128),f
 10452  1A08  304E               	movlw	(low (_str| (0+512)))& (0+255)
 10453  1A09  31A5  2515  3199   	fcall	_ftoa
 10454                           
 10455                           ;menu.c: 161:    OLED_print_xy(0, 1, str);
 10456  1A0C  0140               	movlb	0	; select bank0
 10457  1A0D  01B1               	clrf	OLED_print_xy@row
 10458  1A0E  0AB1               	incf	OLED_print_xy@row,f
 10459  1A0F  304E               	movlw	low _str
 10460  1A10  00B2               	movwf	OLED_print_xy@s
 10461  1A11  3002               	movlw	high _str
 10462  1A12  00B3               	movwf	OLED_print_xy@s+1
 10463  1A13  3000               	movlw	0
 10464  1A14  31B7  2727  3199   	fcall	_OLED_print_xy
 10465                           
 10466                           ;menu.c: 162:    OLED_print_xy(4, 1, "W manual");
 10467  1A17  0140               	movlb	0	; select bank0
 10468  1A18  01B1               	clrf	OLED_print_xy@row
 10469  1A19  0AB1               	incf	OLED_print_xy@row,f
 10470  1A1A  3064               	movlw	low (STR_17| (0+32768))
 10471  1A1B  00B2               	movwf	OLED_print_xy@s
 10472  1A1C  30BA               	movlw	high (STR_17| (0+32768))
 10473  1A1D  00B3               	movwf	OLED_print_xy@s+1
 10474  1A1E  3004               	movlw	4
 10475  1A1F  2A78               	goto	L2
 10476  1A20                     l7515:	
 10477  1A20  084D               	movf	channelSetup@chData^(0+128),w
 10478  1A21  0086               	movwf	6
 10479  1A22  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10480  1A23  0087               	movwf	7
 10481  1A24  315F               	addfsr 1,31
 10482  1A25  3002               	movlw	2
 10483  1A26  0601               	xorwf	1,w
 10484  1A27  1D03               	btfss	3,2
 10485  1A28  2A3A               	goto	l7519
 10486                           
 10487                           ;menu.c: 167:   OLED_print_xy(0, 0, "Not         ");
 10488  1A29  0140               	movlb	0	; select bank0
 10489  1A2A  01B1               	clrf	OLED_print_xy@row
 10490  1A2B  3052               	movlw	low (STR_28| (0+32768))
 10491  1A2C  00B2               	movwf	OLED_print_xy@s
 10492  1A2D  30B9               	movlw	high (STR_28| (0+32768))
 10493  1A2E  00B3               	movwf	OLED_print_xy@s+1
 10494  1A2F  3000               	movlw	0
 10495  1A30  31B7  2727  3199   	fcall	_OLED_print_xy
 10496                           
 10497                           ;menu.c: 168:   OLED_print_xy(0, 1, "connected   ");
 10498  1A33  0140               	movlb	0	; select bank0
 10499  1A34  01B1               	clrf	OLED_print_xy@row
 10500  1A35  0AB1               	incf	OLED_print_xy@row,f
 10501  1A36  30BA               	movlw	low (STR_29| (0+32768))
 10502  1A37  00B2               	movwf	OLED_print_xy@s
 10503  1A38  30B9               	movlw	high (STR_29| (0+32768))
 10504  1A39  2A76               	goto	L4
 10505  1A3A                     l7519:	
 10506                           ;menu.c: 170:  } else if (chData->status == CH_UNCHECKED) {
 10507                           
 10508  1A3A  084D               	movf	channelSetup@chData^(0+128),w
 10509  1A3B  0086               	movwf	6
 10510  1A3C  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10511  1A3D  0087               	movwf	7
 10512  1A3E  315F               	addfsr 1,31
 10513  1A3F  3005               	movlw	5
 10514  1A40  0601               	xorwf	1,w
 10515  1A41  1D03               	btfss	3,2
 10516  1A42  2A54               	goto	l7523
 10517                           
 10518                           ;menu.c: 172:   OLED_print_xy(0, 0, "Testing     ");
 10519  1A43  0140               	movlb	0	; select bank0
 10520  1A44  01B1               	clrf	OLED_print_xy@row
 10521  1A45  306C               	movlw	low (STR_30| (0+32768))
 10522  1A46  00B2               	movwf	OLED_print_xy@s
 10523  1A47  30B9               	movlw	high (STR_30| (0+32768))
 10524  1A48  00B3               	movwf	OLED_print_xy@s+1
 10525  1A49  3000               	movlw	0
 10526  1A4A  31B7  2727  3199   	fcall	_OLED_print_xy
 10527                           
 10528                           ;menu.c: 173:   OLED_print_xy(0, 1, "heater...   ");
 10529  1A4D  0140               	movlb	0	; select bank0
 10530  1A4E  01B1               	clrf	OLED_print_xy@row
 10531  1A4F  0AB1               	incf	OLED_print_xy@row,f
 10532  1A50  30A0               	movlw	low (STR_31| (0+32768))
 10533  1A51  00B2               	movwf	OLED_print_xy@s
 10534  1A52  30B9               	movlw	high (STR_31| (0+32768))
 10535  1A53  2A76               	goto	L4
 10536  1A54                     l7523:	
 10537                           ;menu.c: 175:  } else if ((chData->status == CH_OVERCURRENT) || (chData->status == CH_SH
      +                          ORTED)) {
 10538                           
 10539  1A54  084D               	movf	channelSetup@chData^(0+128),w
 10540  1A55  0086               	movwf	6
 10541  1A56  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10542  1A57  0087               	movwf	7
 10543  1A58  315F               	addfsr 1,31
 10544  1A59  3004               	movlw	4
 10545  1A5A  0601               	xorwf	1,w
 10546  1A5B  1903               	btfsc	3,2
 10547  1A5C  2A66               	goto	l7527
 10548  1A5D  084D               	movf	channelSetup@chData^(0+128),w
 10549  1A5E  0086               	movwf	6
 10550  1A5F  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10551  1A60  0087               	movwf	7
 10552  1A61  315F               	addfsr 1,31
 10553  1A62  3003               	movlw	3
 10554  1A63  0601               	xorwf	1,w
 10555  1A64  1D03               	btfss	3,2
 10556  1A65  2A7B               	goto	l449
 10557  1A66                     l7527:	
 10558                           
 10559                           ;menu.c: 177:   OLED_print_xy(0, 0, "Reset       ");
 10560  1A66  0140               	movlb	0	; select bank0
 10561  1A67  01B1               	clrf	OLED_print_xy@row
 10562  1A68  305F               	movlw	low (STR_32| (0+32768))
 10563  1A69  00B2               	movwf	OLED_print_xy@s
 10564  1A6A  30B9               	movlw	high (STR_32| (0+32768))
 10565  1A6B  00B3               	movwf	OLED_print_xy@s+1
 10566  1A6C  3000               	movlw	0
 10567  1A6D  31B7  2727  3199   	fcall	_OLED_print_xy
 10568                           
 10569                           ;menu.c: 178:   OLED_print_xy(0, 1, "channel     ");
 10570  1A70  0140               	movlb	0	; select bank0
 10571  1A71  01B1               	clrf	OLED_print_xy@row
 10572  1A72  0AB1               	incf	OLED_print_xy@row,f
 10573  1A73  3079               	movlw	low (STR_33| (0+32768))
 10574  1A74  00B2               	movwf	OLED_print_xy@s
 10575  1A75  30B9               	movlw	high (STR_33| (0+32768))
 10576  1A76                     L4:	
 10577  1A76  00B3               	movwf	OLED_print_xy@s+1
 10578  1A77  3000               	movlw	0
 10579  1A78                     L2:	
 10580  1A78  31B7  2727  3199   	fcall	_OLED_print_xy
 10581  1A7B                     l449:	
 10582                           
 10583                           ;menu.c: 182:  OLED_print_xy(12, 0, "Lens diam.  ");
 10584  1A7B  0140               	movlb	0	; select bank0
 10585  1A7C  01B1               	clrf	OLED_print_xy@row
 10586  1A7D  30D4               	movlw	low (STR_34| (0+32768))
 10587  1A7E  00B2               	movwf	OLED_print_xy@s
 10588  1A7F  30B9               	movlw	high (STR_34| (0+32768))
 10589  1A80  00B3               	movwf	OLED_print_xy@s+1
 10590  1A81  300C               	movlw	12
 10591  1A82  31B7  2727  3199   	fcall	_OLED_print_xy
 10592                           
 10593                           ;menu.c: 183:  ftoa(str, chData->lensDia, 4, 1);
 10594  1A85  0141               	movlb	1	; select bank1
 10595  1A86  084D               	movf	channelSetup@chData^(0+128),w
 10596  1A87  0086               	movwf	6
 10597  1A88  084E               	movf	(channelSetup@chData+1)^(0+128),w
 10598  1A89  0087               	movwf	7
 10599  1A8A  3156               	addfsr 1,22
 10600  1A8B  3F40               	moviw [0]fsr1
 10601  1A8C  00B9               	movwf	ftoa@fValue^(0+128)
 10602  1A8D  3F41               	moviw [1]fsr1
 10603  1A8E  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10604  1A8F  3F42               	moviw [2]fsr1
 10605  1A90  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10606  1A91  3F43               	moviw [3]fsr1
 10607  1A92  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10608  1A93  3004               	movlw	4
 10609  1A94  00C9               	movwf	??_channelSetup^(0+128)
 10610  1A95  0849               	movf	??_channelSetup^(0+128),w
 10611  1A96  00BD               	movwf	ftoa@width^(0+128)
 10612  1A97  01BE               	clrf	ftoa@prec^(0+128)
 10613  1A98  0ABE               	incf	ftoa@prec^(0+128),f
 10614  1A99  304E               	movlw	(low (_str| (0+512)))& (0+255)
 10615  1A9A  31A5  2515  3199   	fcall	_ftoa
 10616                           
 10617                           ;menu.c: 184:  OLED_print_xy(12 + 0, 1, str);
 10618  1A9D  0140               	movlb	0	; select bank0
 10619  1A9E  01B1               	clrf	OLED_print_xy@row
 10620  1A9F  0AB1               	incf	OLED_print_xy@row,f
 10621  1AA0  304E               	movlw	low _str
 10622  1AA1  00B2               	movwf	OLED_print_xy@s
 10623  1AA2  3002               	movlw	high _str
 10624  1AA3  00B3               	movwf	OLED_print_xy@s+1
 10625  1AA4  300C               	movlw	12
 10626  1AA5  31B7  2727  3199   	fcall	_OLED_print_xy
 10627                           
 10628                           ;menu.c: 185:  OLED_print_xy(12 + 5, 1, " inch  ");
 10629  1AA8  0140               	movlb	0	; select bank0
 10630  1AA9  01B1               	clrf	OLED_print_xy@row
 10631  1AAA  0AB1               	incf	OLED_print_xy@row,f
 10632  1AAB  308D               	movlw	low (STR_35| (0+32768))
 10633  1AAC  00B2               	movwf	OLED_print_xy@s
 10634  1AAD  30BA               	movlw	high (STR_35| (0+32768))
 10635  1AAE  00B3               	movwf	OLED_print_xy@s+1
 10636  1AAF  3011               	movlw	17
 10637  1AB0  31B7  2727  3199   	fcall	_OLED_print_xy
 10638                           
 10639                           ;menu.c: 187:  page = paging(page, 2);
 10640  1AB3  3002               	movlw	2
 10641  1AB4  0141               	movlb	1	; select bank1
 10642  1AB5  00C9               	movwf	??_channelSetup^(0+128)
 10643  1AB6  0849               	movf	??_channelSetup^(0+128),w
 10644  1AB7  0140               	movlb	0	; select bank0
 10645  1AB8  00AB               	movwf	paging@lastPage
 10646  1AB9  0142               	movlb	2	; select bank2
 10647  1ABA  086D               	movf	channelSetup@page^(0+256),w
 10648  1ABB  31AB  23AF         	fcall	_paging
 10649  1ABD  0141               	movlb	1	; select bank1
 10650  1ABE  00CA               	movwf	(??_channelSetup+1)^(0+128)
 10651  1ABF  084A               	movf	(??_channelSetup+1)^(0+128),w
 10652  1AC0  0142               	movlb	2	; select bank2
 10653  1AC1  00ED               	movwf	channelSetup@page^(0+256)
 10654                           
 10655                           ;menu.c: 189:  return page;
 10656  1AC2  086D               	movf	channelSetup@page^(0+256),w
 10657  1AC3  0008               	return
 10658  1AC4                     __end_of_channelSetup:	
 10659                           
 10660                           	psect	text17
 10661  053E                     __ptext17:	
 10662 ;; *************** function _channelView *****************
 10663 ;; Defined at:
 10664 ;;		line 75 in file "menu.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;  data            2   39[BANK1 ] PTR struct .
 10667 ;;		 -> data(170), 
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;  n               1   47[BANK1 ] unsigned char 
 10670 ;; Return value:  Size  Location     Type
 10671 ;;                  1    wreg      unsigned char 
 10672 ;; Registers used:
 10673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10679 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10680 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10681 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10682 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10683 ;;Total ram usage:        9 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    9
 10686 ;; This function calls:
 10687 ;;		_OLED_print_xy
 10688 ;;		___bmul
 10689 ;;		___fltol
 10690 ;;		_ftoa
 10691 ;;		_itoa
 10692 ;;		_paging
 10693 ;;		_returnToPage
 10694 ;; This function is called by:
 10695 ;;		_menu
 10696 ;; This function uses a non-reentrant model
 10697 ;;
 10698                           
 10699                           
 10700                           ;psect for function _channelView
 10701  053E                     _channelView:	
 10702                           
 10703                           ;menu.c: 75: uint8_t channelView(t_globalData *data);menu.c: 76: {;menu.c: 77:  static u
      +                          int8_t page = 0;;menu.c: 78:  uint8_t n;;menu.c: 80:  returnToPage(page);
 10704                           
 10705                           ;incstack = 0
 10706                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10707  053E  0142               	movlb	2	; select bank2
 10708  053F  086E               	movf	channelView@page^(0+256),w
 10709  0540  3190  2001  3185   	fcall	_returnToPage
 10710                           
 10711                           ;menu.c: 81:  if (g_screenRefresh) {
 10712  0543  0141               	movlb	1	; select bank1
 10713  0544  086D               	movf	_g_screenRefresh^(0+128),w
 10714  0545  1903               	btfsc	3,2
 10715  0546  2DF9               	goto	l7423
 10716                           
 10717                           ;menu.c: 82:   for (n = 0; n < 4; n++) {
 10718  0547  01CF               	clrf	channelView@n^(0+128)
 10719  0548                     l7405:	
 10720  0548  3004               	movlw	4
 10721  0549  024F               	subwf	channelView@n^(0+128),w
 10722  054A  1803               	btfsc	3,0
 10723  054B  2DF9               	goto	l7423
 10724                           
 10725                           ;menu.c: 83:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 10726  054C  0140               	movlb	0	; select bank0
 10727  054D  01B1               	clrf	OLED_print_xy@row
 10728  054E  30DA               	movlw	low (STR_10| (0+32768))
 10729  054F  00B2               	movwf	OLED_print_xy@s
 10730  0550  30BA               	movlw	high (STR_10| (0+32768))
 10731  0551  00B3               	movwf	OLED_print_xy@s+1
 10732  0552  300C               	movlw	12
 10733  0553  0141               	movlb	1	; select bank1
 10734  0554  00C9               	movwf	??_channelView^(0+128)
 10735  0555  0849               	movf	??_channelView^(0+128),w
 10736  0556  0140               	movlb	0	; select bank0
 10737  0557  00AD               	movwf	___bmul@multiplicand
 10738  0558  0141               	movlb	1	; select bank1
 10739  0559  084F               	movf	channelView@n^(0+128),w
 10740  055A  31B5  2545  3185   	fcall	___bmul
 10741  055D  31B7  2727  3185   	fcall	_OLED_print_xy
 10742                           
 10743                           ;menu.c: 84:    itoa(str, n + 1, 1);
 10744  0560  304E               	movlw	low _str
 10745  0561  0141               	movlb	1	; select bank1
 10746  0562  00B6               	movwf	itoa@str^(0+128)
 10747  0563  3002               	movlw	high _str
 10748  0564  00B7               	movwf	(itoa@str+1)^(0+128)
 10749  0565  084F               	movf	channelView@n^(0+128),w
 10750  0566  3E01               	addlw	1
 10751  0567  00C9               	movwf	??_channelView^(0+128)
 10752  0568  0849               	movf	??_channelView^(0+128),w
 10753  0569  00B8               	movwf	itoa@value^(0+128)
 10754  056A  01B9               	clrf	itoa@width^(0+128)
 10755  056B  0AB9               	incf	itoa@width^(0+128),f
 10756  056C  31AB  2346  3185   	fcall	_itoa
 10757                           
 10758                           ;menu.c: 85:    OLED_print_xy(n * 12 + 3, 0, str);
 10759  056F  0140               	movlb	0	; select bank0
 10760  0570  01B1               	clrf	OLED_print_xy@row
 10761  0571  304E               	movlw	low _str
 10762  0572  00B2               	movwf	OLED_print_xy@s
 10763  0573  3002               	movlw	high _str
 10764  0574  00B3               	movwf	OLED_print_xy@s+1
 10765  0575  300C               	movlw	12
 10766  0576  0141               	movlb	1	; select bank1
 10767  0577  00C9               	movwf	??_channelView^(0+128)
 10768  0578  0849               	movf	??_channelView^(0+128),w
 10769  0579  0140               	movlb	0	; select bank0
 10770  057A  00AD               	movwf	___bmul@multiplicand
 10771  057B  0141               	movlb	1	; select bank1
 10772  057C  084F               	movf	channelView@n^(0+128),w
 10773  057D  31B5  2545  3185   	fcall	___bmul
 10774  0580  3E03               	addlw	3
 10775  0581  31B7  2727  3185   	fcall	_OLED_print_xy
 10776                           
 10777                           ;menu.c: 86:    OLED_print_xy(n * 12 + 4, 0, ": ");
 10778  0584  0140               	movlb	0	; select bank0
 10779  0585  01B1               	clrf	OLED_print_xy@row
 10780  0586  30E7               	movlw	low (STR_11| (0+32768))
 10781  0587  00B2               	movwf	OLED_print_xy@s
 10782  0588  30BA               	movlw	high (STR_11| (0+32768))
 10783  0589  00B3               	movwf	OLED_print_xy@s+1
 10784  058A  300C               	movlw	12
 10785  058B  0141               	movlb	1	; select bank1
 10786  058C  00C9               	movwf	??_channelView^(0+128)
 10787  058D  0849               	movf	??_channelView^(0+128),w
 10788  058E  0140               	movlb	0	; select bank0
 10789  058F  00AD               	movwf	___bmul@multiplicand
 10790  0590  0141               	movlb	1	; select bank1
 10791  0591  084F               	movf	channelView@n^(0+128),w
 10792  0592  31B5  2545  3185   	fcall	___bmul
 10793  0595  3E04               	addlw	4
 10794  0596  31B7  2727  3185   	fcall	_OLED_print_xy
 10795                           
 10796                           ;menu.c: 87:    itoa(str, data->chData[n].lensDia, 2);
 10797  0599  304E               	movlw	low _str
 10798  059A  0141               	movlb	1	; select bank1
 10799  059B  00B6               	movwf	itoa@str^(0+128)
 10800  059C  3002               	movlw	high _str
 10801  059D  00B7               	movwf	(itoa@str+1)^(0+128)
 10802  059E  084F               	movf	channelView@n^(0+128),w
 10803  059F  00C9               	movwf	??_channelView^(0+128)
 10804  05A0  01CA               	clrf	(??_channelView^(0+128)+1)
 10805  05A1  3005               	movlw	5
 10806  05A2                     u9815:	
 10807  05A2  35C9               	lslf	??_channelView^(0+128),f
 10808  05A3  0DCA               	rlf	(??_channelView^(0+128)+1),f
 10809  05A4  0B89               	decfsz	9,f
 10810  05A5  2DA2               	goto	u9815
 10811  05A6  0849               	movf	??_channelView^(0+128),w
 10812  05A7  0747               	addwf	channelView@data^(0+128),w
 10813  05A8  00CB               	movwf	(??_channelView+2)^(0+128)
 10814  05A9  084A               	movf	(??_channelView+1)^(0+128),w
 10815  05AA  3D48               	addwfc	(channelView@data+1)^(0+128),w
 10816  05AB  00CC               	movwf	(??_channelView+3)^(0+128)
 10817  05AC  084B               	movf	(??_channelView+2)^(0+128),w
 10818  05AD  3E40               	addlw	64
 10819  05AE  0086               	movwf	6
 10820  05AF  3000               	movlw	0
 10821  05B0  3D4C               	addwfc	(??_channelView+3)^(0+128),w
 10822  05B1  0087               	movwf	7
 10823  05B2  3F40               	moviw [0]fsr1
 10824  05B3  00AD               	movwf	___fltol@f1^(0+128)
 10825  05B4  3F41               	moviw [1]fsr1
 10826  05B5  00AE               	movwf	(___fltol@f1+1)^(0+128)
 10827  05B6  3F42               	moviw [2]fsr1
 10828  05B7  00AF               	movwf	(___fltol@f1+2)^(0+128)
 10829  05B8  3F43               	moviw [3]fsr1
 10830  05B9  00B0               	movwf	(___fltol@f1+3)^(0+128)
 10831  05BA  31AD  2565  3185   	fcall	___fltol
 10832  05BD  0141               	movlb	1	; select bank1
 10833  05BE  082D               	movf	?___fltol^(0+128),w
 10834  05BF  00CD               	movwf	(??_channelView+4)^(0+128)
 10835  05C0  084D               	movf	(??_channelView+4)^(0+128),w
 10836  05C1  00B8               	movwf	itoa@value^(0+128)
 10837  05C2  3002               	movlw	2
 10838  05C3  00CE               	movwf	(??_channelView+5)^(0+128)
 10839  05C4  084E               	movf	(??_channelView+5)^(0+128),w
 10840  05C5  00B9               	movwf	itoa@width^(0+128)
 10841  05C6  31AB  2346  3185   	fcall	_itoa
 10842                           
 10843                           ;menu.c: 88:    OLED_print_xy(n * 12 + 6, 0, str);
 10844  05C9  0140               	movlb	0	; select bank0
 10845  05CA  01B1               	clrf	OLED_print_xy@row
 10846  05CB  304E               	movlw	low _str
 10847  05CC  00B2               	movwf	OLED_print_xy@s
 10848  05CD  3002               	movlw	high _str
 10849  05CE  00B3               	movwf	OLED_print_xy@s+1
 10850  05CF  300C               	movlw	12
 10851  05D0  0141               	movlb	1	; select bank1
 10852  05D1  00C9               	movwf	??_channelView^(0+128)
 10853  05D2  0849               	movf	??_channelView^(0+128),w
 10854  05D3  0140               	movlb	0	; select bank0
 10855  05D4  00AD               	movwf	___bmul@multiplicand
 10856  05D5  0141               	movlb	1	; select bank1
 10857  05D6  084F               	movf	channelView@n^(0+128),w
 10858  05D7  31B5  2545  3185   	fcall	___bmul
 10859  05DA  3E06               	addlw	6
 10860  05DB  31B7  2727  3185   	fcall	_OLED_print_xy
 10861                           
 10862                           ;menu.c: 89:    OLED_print_xy(n * 12 + 8, 0, "\" ");
 10863  05DE  0140               	movlb	0	; select bank0
 10864  05DF  01B1               	clrf	OLED_print_xy@row
 10865  05E0  30E4               	movlw	low (STR_12| (0+32768))
 10866  05E1  00B2               	movwf	OLED_print_xy@s
 10867  05E2  30BA               	movlw	high (STR_12| (0+32768))
 10868  05E3  00B3               	movwf	OLED_print_xy@s+1
 10869  05E4  300C               	movlw	12
 10870  05E5  0141               	movlb	1	; select bank1
 10871  05E6  00C9               	movwf	??_channelView^(0+128)
 10872  05E7  0849               	movf	??_channelView^(0+128),w
 10873  05E8  0140               	movlb	0	; select bank0
 10874  05E9  00AD               	movwf	___bmul@multiplicand
 10875  05EA  0141               	movlb	1	; select bank1
 10876  05EB  084F               	movf	channelView@n^(0+128),w
 10877  05EC  31B5  2545  3185   	fcall	___bmul
 10878  05EF  3E08               	addlw	8
 10879  05F0  31B7  2727  3185   	fcall	_OLED_print_xy
 10880                           
 10881                           ;menu.c: 90:   }
 10882  05F3  3001               	movlw	1
 10883  05F4  0141               	movlb	1	; select bank1
 10884  05F5  00C9               	movwf	??_channelView^(0+128)
 10885  05F6  0849               	movf	??_channelView^(0+128),w
 10886  05F7  07CF               	addwf	channelView@n^(0+128),f
 10887  05F8  2D48               	goto	l7405
 10888  05F9                     l7423:	
 10889                           
 10890                           ;menu.c: 93:  for (n = 0; n < 4; n++) {
 10891  05F9  01CF               	clrf	channelView@n^(0+128)
 10892  05FA                     l7425:	
 10893  05FA  3004               	movlw	4
 10894  05FB  024F               	subwf	channelView@n^(0+128),w
 10895  05FC  1803               	btfsc	3,0
 10896  05FD  2F8D               	goto	l7465
 10897  05FE  2F57               	goto	l7459
 10898  05FF                     l7429:	
 10899                           
 10900                           ;menu.c: 96:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 10901  05FF  0140               	movlb	0	; select bank0
 10902  0600  01B1               	clrf	OLED_print_xy@row
 10903  0601  0AB1               	incf	OLED_print_xy@row,f
 10904  0602  30EE               	movlw	low (STR_13| (0+32768))
 10905  0603  00B2               	movwf	OLED_print_xy@s
 10906  0604  30B9               	movlw	high (STR_13| (0+32768))
 10907  0605  00B3               	movwf	OLED_print_xy@s+1
 10908  0606  300C               	movlw	12
 10909  0607  0141               	movlb	1	; select bank1
 10910  0608  00C9               	movwf	??_channelView^(0+128)
 10911  0609  0849               	movf	??_channelView^(0+128),w
 10912  060A  0140               	movlb	0	; select bank0
 10913  060B  00AD               	movwf	___bmul@multiplicand
 10914  060C  0141               	movlb	1	; select bank1
 10915  060D  084F               	movf	channelView@n^(0+128),w
 10916  060E  31B5  2545  3185   	fcall	___bmul
 10917  0611  31B7  2727  3185   	fcall	_OLED_print_xy
 10918                           
 10919                           ;menu.c: 97:    break;
 10920  0614  2F87               	goto	l7461
 10921  0615                     l7431:	
 10922                           
 10923                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 10924  0615  0140               	movlb	0	; select bank0
 10925  0616  01B1               	clrf	OLED_print_xy@row
 10926  0617  0AB1               	incf	OLED_print_xy@row,f
 10927  0618  3093               	movlw	low (STR_14| (0+32768))
 10928  0619  00B2               	movwf	OLED_print_xy@s
 10929  061A  30B9               	movlw	high (STR_14| (0+32768))
 10930  061B  00B3               	movwf	OLED_print_xy@s+1
 10931  061C  300C               	movlw	12
 10932  061D  0141               	movlb	1	; select bank1
 10933  061E  00C9               	movwf	??_channelView^(0+128)
 10934  061F  0849               	movf	??_channelView^(0+128),w
 10935  0620  0140               	movlb	0	; select bank0
 10936  0621  00AD               	movwf	___bmul@multiplicand
 10937  0622  0141               	movlb	1	; select bank1
 10938  0623  084F               	movf	channelView@n^(0+128),w
 10939  0624  31B5  2545  3185   	fcall	___bmul
 10940  0627  31B7  2727  3185   	fcall	_OLED_print_xy
 10941                           
 10942                           ;menu.c: 100:    break;
 10943  062A  2F87               	goto	l7461
 10944  062B                     l7433:	
 10945                           
 10946                           ;menu.c: 102:    ftoa(str, data->chData[n].Patt, 4, 1);
 10947  062B  084F               	movf	channelView@n^(0+128),w
 10948  062C  00C9               	movwf	??_channelView^(0+128)
 10949  062D  01CA               	clrf	(??_channelView^(0+128)+1)
 10950  062E  3005               	movlw	5
 10951  062F                     u9835:	
 10952  062F  35C9               	lslf	??_channelView^(0+128),f
 10953  0630  0DCA               	rlf	(??_channelView^(0+128)+1),f
 10954  0631  0B89               	decfsz	9,f
 10955  0632  2E2F               	goto	u9835
 10956  0633  0849               	movf	??_channelView^(0+128),w
 10957  0634  0747               	addwf	channelView@data^(0+128),w
 10958  0635  00CB               	movwf	(??_channelView+2)^(0+128)
 10959  0636  084A               	movf	(??_channelView+1)^(0+128),w
 10960  0637  3D48               	addwfc	(channelView@data+1)^(0+128),w
 10961  0638  00CC               	movwf	(??_channelView+3)^(0+128)
 10962  0639  084B               	movf	(??_channelView+2)^(0+128),w
 10963  063A  3E36               	addlw	54
 10964  063B  0086               	movwf	6
 10965  063C  3000               	movlw	0
 10966  063D  3D4C               	addwfc	(??_channelView+3)^(0+128),w
 10967  063E  0087               	movwf	7
 10968  063F  3F40               	moviw [0]fsr1
 10969  0640  00B9               	movwf	ftoa@fValue^(0+128)
 10970  0641  3F41               	moviw [1]fsr1
 10971  0642  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10972  0643  3F42               	moviw [2]fsr1
 10973  0644  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10974  0645  3F43               	moviw [3]fsr1
 10975  0646  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10976  0647  3004               	movlw	4
 10977  0648  00CD               	movwf	(??_channelView+4)^(0+128)
 10978  0649  084D               	movf	(??_channelView+4)^(0+128),w
 10979  064A  00BD               	movwf	ftoa@width^(0+128)
 10980  064B  01BE               	clrf	ftoa@prec^(0+128)
 10981  064C  0ABE               	incf	ftoa@prec^(0+128),f
 10982  064D  304E               	movlw	(low (_str| (0+512)))& (0+255)
 10983  064E  31A5  2515  3185   	fcall	_ftoa
 10984                           
 10985                           ;menu.c: 104:    OLED_print_xy(n * 12 + 0, 1, str);
 10986  0651  0140               	movlb	0	; select bank0
 10987  0652  01B1               	clrf	OLED_print_xy@row
 10988  0653  0AB1               	incf	OLED_print_xy@row,f
 10989  0654  304E               	movlw	low _str
 10990  0655  00B2               	movwf	OLED_print_xy@s
 10991  0656  3002               	movlw	high _str
 10992  0657  00B3               	movwf	OLED_print_xy@s+1
 10993  0658  300C               	movlw	12
 10994  0659  0141               	movlb	1	; select bank1
 10995  065A  00C9               	movwf	??_channelView^(0+128)
 10996  065B  0849               	movf	??_channelView^(0+128),w
 10997  065C  0140               	movlb	0	; select bank0
 10998  065D  00AD               	movwf	___bmul@multiplicand
 10999  065E  0141               	movlb	1	; select bank1
 11000  065F  084F               	movf	channelView@n^(0+128),w
 11001  0660  31B5  2545  3185   	fcall	___bmul
 11002  0663  31B7  2727  3185   	fcall	_OLED_print_xy
 11003                           
 11004                           ;menu.c: 108:    if (data->chData[n].mode == MODE_AUTO) {
 11005  0666  0141               	movlb	1	; select bank1
 11006  0667  084F               	movf	channelView@n^(0+128),w
 11007  0668  00C9               	movwf	??_channelView^(0+128)
 11008  0669  01CA               	clrf	(??_channelView^(0+128)+1)
 11009  066A  3005               	movlw	5
 11010  066B                     u9845:	
 11011  066B  35C9               	lslf	??_channelView^(0+128),f
 11012  066C  0DCA               	rlf	(??_channelView^(0+128)+1),f
 11013  066D  0B89               	decfsz	9,f
 11014  066E  2E6B               	goto	u9845
 11015  066F  0849               	movf	??_channelView^(0+128),w
 11016  0670  0747               	addwf	channelView@data^(0+128),w
 11017  0671  00CB               	movwf	(??_channelView+2)^(0+128)
 11018  0672  084A               	movf	(??_channelView+1)^(0+128),w
 11019  0673  3D48               	addwfc	(channelView@data+1)^(0+128),w
 11020  0674  00CC               	movwf	(??_channelView+3)^(0+128)
 11021  0675  084B               	movf	(??_channelView+2)^(0+128),w
 11022  0676  3E48               	addlw	72
 11023  0677  0086               	movwf	6
 11024  0678  3000               	movlw	0
 11025  0679  3D4C               	addwfc	(??_channelView+3)^(0+128),w
 11026  067A  0087               	movwf	7
 11027  067B  0301               	decf	1,w
 11028  067C  1D03               	btfss	3,2
 11029  067D  2EE8               	goto	l7447
 11030                           
 11031                           ;menu.c: 109:     OLED_print_xy(n * 12 + 4, 1, " (");
 11032  067E  0140               	movlb	0	; select bank0
 11033  067F  01B1               	clrf	OLED_print_xy@row
 11034  0680  0AB1               	incf	OLED_print_xy@row,f
 11035  0681  30EA               	movlw	low (STR_15| (0+32768))
 11036  0682  00B2               	movwf	OLED_print_xy@s
 11037  0683  30BA               	movlw	high (STR_15| (0+32768))
 11038  0684  00B3               	movwf	OLED_print_xy@s+1
 11039  0685  300C               	movlw	12
 11040  0686  0141               	movlb	1	; select bank1
 11041  0687  00C9               	movwf	??_channelView^(0+128)
 11042  0688  0849               	movf	??_channelView^(0+128),w
 11043  0689  0140               	movlb	0	; select bank0
 11044  068A  00AD               	movwf	___bmul@multiplicand
 11045  068B  0141               	movlb	1	; select bank1
 11046  068C  084F               	movf	channelView@n^(0+128),w
 11047  068D  31B5  2545  3185   	fcall	___bmul
 11048  0690  3E04               	addlw	4
 11049  0691  31B7  2727  3185   	fcall	_OLED_print_xy
 11050                           
 11051                           ;menu.c: 110:     ftoa(str, data->chData[n].Preq, 4,1);
 11052  0694  0141               	movlb	1	; select bank1
 11053  0695  084F               	movf	channelView@n^(0+128),w
 11054  0696  00C9               	movwf	??_channelView^(0+128)
 11055  0697  01CA               	clrf	(??_channelView^(0+128)+1)
 11056  0698  3005               	movlw	5
 11057  0699                     u9865:	
 11058  0699  35C9               	lslf	??_channelView^(0+128),f
 11059  069A  0DCA               	rlf	(??_channelView^(0+128)+1),f
 11060  069B  0B89               	decfsz	9,f
 11061  069C  2E99               	goto	u9865
 11062  069D  0849               	movf	??_channelView^(0+128),w
 11063  069E  0747               	addwf	channelView@data^(0+128),w
 11064  069F  00CB               	movwf	(??_channelView+2)^(0+128)
 11065  06A0  084A               	movf	(??_channelView+1)^(0+128),w
 11066  06A1  3D48               	addwfc	(channelView@data+1)^(0+128),w
 11067  06A2  00CC               	movwf	(??_channelView+3)^(0+128)
 11068  06A3  084B               	movf	(??_channelView+2)^(0+128),w
 11069  06A4  3E32               	addlw	50
 11070  06A5  0086               	movwf	6
 11071  06A6  3000               	movlw	0
 11072  06A7  3D4C               	addwfc	(??_channelView+3)^(0+128),w
 11073  06A8  0087               	movwf	7
 11074  06A9  3F40               	moviw [0]fsr1
 11075  06AA  00B9               	movwf	ftoa@fValue^(0+128)
 11076  06AB  3F41               	moviw [1]fsr1
 11077  06AC  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11078  06AD  3F42               	moviw [2]fsr1
 11079  06AE  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11080  06AF  3F43               	moviw [3]fsr1
 11081  06B0  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11082  06B1  3004               	movlw	4
 11083  06B2  00CD               	movwf	(??_channelView+4)^(0+128)
 11084  06B3  084D               	movf	(??_channelView+4)^(0+128),w
 11085  06B4  00BD               	movwf	ftoa@width^(0+128)
 11086  06B5  01BE               	clrf	ftoa@prec^(0+128)
 11087  06B6  0ABE               	incf	ftoa@prec^(0+128),f
 11088  06B7  304E               	movlw	(low (_str| (0+512)))& (0+255)
 11089  06B8  31A5  2515  3185   	fcall	_ftoa
 11090                           
 11091                           ;menu.c: 111:     OLED_print_xy(n * 12 + 6, 1, str);
 11092  06BB  0140               	movlb	0	; select bank0
 11093  06BC  01B1               	clrf	OLED_print_xy@row
 11094  06BD  0AB1               	incf	OLED_print_xy@row,f
 11095  06BE  304E               	movlw	low _str
 11096  06BF  00B2               	movwf	OLED_print_xy@s
 11097  06C0  3002               	movlw	high _str
 11098  06C1  00B3               	movwf	OLED_print_xy@s+1
 11099  06C2  300C               	movlw	12
 11100  06C3  0141               	movlb	1	; select bank1
 11101  06C4  00C9               	movwf	??_channelView^(0+128)
 11102  06C5  0849               	movf	??_channelView^(0+128),w
 11103  06C6  0140               	movlb	0	; select bank0
 11104  06C7  00AD               	movwf	___bmul@multiplicand
 11105  06C8  0141               	movlb	1	; select bank1
 11106  06C9  084F               	movf	channelView@n^(0+128),w
 11107  06CA  31B5  2545  3185   	fcall	___bmul
 11108  06CD  3E06               	addlw	6
 11109  06CE  31B7  2727  3185   	fcall	_OLED_print_xy
 11110                           
 11111                           ;menu.c: 112:     OLED_print_xy(n * 12 + 10, 1, "W)");
 11112  06D1  0140               	movlb	0	; select bank0
 11113  06D2  01B1               	clrf	OLED_print_xy@row
 11114  06D3  0AB1               	incf	OLED_print_xy@row,f
 11115  06D4  30ED               	movlw	low (STR_16| (0+32768))
 11116  06D5  00B2               	movwf	OLED_print_xy@s
 11117  06D6  30BA               	movlw	high (STR_16| (0+32768))
 11118  06D7  00B3               	movwf	OLED_print_xy@s+1
 11119  06D8  300C               	movlw	12
 11120  06D9  0141               	movlb	1	; select bank1
 11121  06DA  00C9               	movwf	??_channelView^(0+128)
 11122  06DB  0849               	movf	??_channelView^(0+128),w
 11123  06DC  0140               	movlb	0	; select bank0
 11124  06DD  00AD               	movwf	___bmul@multiplicand
 11125  06DE  0141               	movlb	1	; select bank1
 11126  06DF  084F               	movf	channelView@n^(0+128),w
 11127  06E0  31B5  2545  3185   	fcall	___bmul
 11128  06E3  3E0A               	addlw	10
 11129  06E4  31B7  2727  3185   	fcall	_OLED_print_xy
 11130                           
 11131                           ;menu.c: 113:    } else {
 11132  06E7  2F87               	goto	l7461
 11133  06E8                     l7447:	
 11134                           
 11135                           ;menu.c: 114:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 11136  06E8  0140               	movlb	0	; select bank0
 11137  06E9  01B1               	clrf	OLED_print_xy@row
 11138  06EA  0AB1               	incf	OLED_print_xy@row,f
 11139  06EB  3064               	movlw	low (STR_17| (0+32768))
 11140  06EC  00B2               	movwf	OLED_print_xy@s
 11141  06ED  30BA               	movlw	high (STR_17| (0+32768))
 11142  06EE  00B3               	movwf	OLED_print_xy@s+1
 11143  06EF  300C               	movlw	12
 11144  06F0  0141               	movlb	1	; select bank1
 11145  06F1  00C9               	movwf	??_channelView^(0+128)
 11146  06F2  0849               	movf	??_channelView^(0+128),w
 11147  06F3  0140               	movlb	0	; select bank0
 11148  06F4  00AD               	movwf	___bmul@multiplicand
 11149  06F5  0141               	movlb	1	; select bank1
 11150  06F6  084F               	movf	channelView@n^(0+128),w
 11151  06F7  31B5  2545  3185   	fcall	___bmul
 11152  06FA  3E04               	addlw	4
 11153  06FB  31B7  2727  3185   	fcall	_OLED_print_xy
 11154  06FE  2F87               	goto	l7461
 11155  06FF                     l7449:	
 11156                           
 11157                           ;menu.c: 118:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 11158  06FF  0140               	movlb	0	; select bank0
 11159  0700  01B1               	clrf	OLED_print_xy@row
 11160  0701  0AB1               	incf	OLED_print_xy@row,f
 11161  0702  3008               	movlw	low (STR_18| (0+32768))
 11162  0703  00B2               	movwf	OLED_print_xy@s
 11163  0704  30BA               	movlw	high (STR_18| (0+32768))
 11164  0705  00B3               	movwf	OLED_print_xy@s+1
 11165  0706  300C               	movlw	12
 11166  0707  0141               	movlb	1	; select bank1
 11167  0708  00C9               	movwf	??_channelView^(0+128)
 11168  0709  0849               	movf	??_channelView^(0+128),w
 11169  070A  0140               	movlb	0	; select bank0
 11170  070B  00AD               	movwf	___bmul@multiplicand
 11171  070C  0141               	movlb	1	; select bank1
 11172  070D  084F               	movf	channelView@n^(0+128),w
 11173  070E  31B5  2545  3185   	fcall	___bmul
 11174  0711  31B7  2727  3185   	fcall	_OLED_print_xy
 11175                           
 11176                           ;menu.c: 119:    break;
 11177  0714  2F87               	goto	l7461
 11178  0715                     l7451:	
 11179                           
 11180                           ;menu.c: 121:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 11181  0715  0140               	movlb	0	; select bank0
 11182  0716  01B1               	clrf	OLED_print_xy@row
 11183  0717  0AB1               	incf	OLED_print_xy@row,f
 11184  0718  3086               	movlw	low (STR_19| (0+32768))
 11185  0719  00B2               	movwf	OLED_print_xy@s
 11186  071A  30B9               	movlw	high (STR_19| (0+32768))
 11187  071B  00B3               	movwf	OLED_print_xy@s+1
 11188  071C  300C               	movlw	12
 11189  071D  0141               	movlb	1	; select bank1
 11190  071E  00C9               	movwf	??_channelView^(0+128)
 11191  071F  0849               	movf	??_channelView^(0+128),w
 11192  0720  0140               	movlb	0	; select bank0
 11193  0721  00AD               	movwf	___bmul@multiplicand
 11194  0722  0141               	movlb	1	; select bank1
 11195  0723  084F               	movf	channelView@n^(0+128),w
 11196  0724  31B5  2545  3185   	fcall	___bmul
 11197  0727  31B7  2727  3185   	fcall	_OLED_print_xy
 11198                           
 11199                           ;menu.c: 122:    break;
 11200  072A  2F87               	goto	l7461
 11201  072B                     l7453:	
 11202                           
 11203                           ;menu.c: 124:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 11204  072B  0140               	movlb	0	; select bank0
 11205  072C  01B1               	clrf	OLED_print_xy@row
 11206  072D  0AB1               	incf	OLED_print_xy@row,f
 11207  072E  30FB               	movlw	low (STR_20| (0+32768))
 11208  072F  00B2               	movwf	OLED_print_xy@s
 11209  0730  30B9               	movlw	high (STR_20| (0+32768))
 11210  0731  00B3               	movwf	OLED_print_xy@s+1
 11211  0732  300C               	movlw	12
 11212  0733  0141               	movlb	1	; select bank1
 11213  0734  00C9               	movwf	??_channelView^(0+128)
 11214  0735  0849               	movf	??_channelView^(0+128),w
 11215  0736  0140               	movlb	0	; select bank0
 11216  0737  00AD               	movwf	___bmul@multiplicand
 11217  0738  0141               	movlb	1	; select bank1
 11218  0739  084F               	movf	channelView@n^(0+128),w
 11219  073A  31B5  2545  3185   	fcall	___bmul
 11220  073D  31B7  2727  3185   	fcall	_OLED_print_xy
 11221                           
 11222                           ;menu.c: 125:    break;
 11223  0740  2F87               	goto	l7461
 11224  0741                     l7455:	
 11225                           
 11226                           ;menu.c: 127:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 11227  0741  0140               	movlb	0	; select bank0
 11228  0742  01B1               	clrf	OLED_print_xy@row
 11229  0743  0AB1               	incf	OLED_print_xy@row,f
 11230  0744  3022               	movlw	low (STR_21| (0+32768))
 11231  0745  00B2               	movwf	OLED_print_xy@s
 11232  0746  30BA               	movlw	high (STR_21| (0+32768))
 11233  0747  00B3               	movwf	OLED_print_xy@s+1
 11234  0748  300C               	movlw	12
 11235  0749  0141               	movlb	1	; select bank1
 11236  074A  00C9               	movwf	??_channelView^(0+128)
 11237  074B  0849               	movf	??_channelView^(0+128),w
 11238  074C  0140               	movlb	0	; select bank0
 11239  074D  00AD               	movwf	___bmul@multiplicand
 11240  074E  0141               	movlb	1	; select bank1
 11241  074F  084F               	movf	channelView@n^(0+128),w
 11242  0750  31B5  2545  3185   	fcall	___bmul
 11243  0753  31B7  2727  3185   	fcall	_OLED_print_xy
 11244                           
 11245                           ;menu.c: 128:    break;
 11246  0756  2F87               	goto	l7461
 11247  0757                     l7459:	
 11248  0757  084F               	movf	channelView@n^(0+128),w
 11249  0758  00C9               	movwf	??_channelView^(0+128)
 11250  0759  01CA               	clrf	(??_channelView^(0+128)+1)
 11251  075A  3005               	movlw	5
 11252  075B                     u9875:	
 11253  075B  35C9               	lslf	??_channelView^(0+128),f
 11254  075C  0DCA               	rlf	(??_channelView^(0+128)+1),f
 11255  075D  0B89               	decfsz	9,f
 11256  075E  2F5B               	goto	u9875
 11257  075F  0849               	movf	??_channelView^(0+128),w
 11258  0760  0747               	addwf	channelView@data^(0+128),w
 11259  0761  00CB               	movwf	(??_channelView+2)^(0+128)
 11260  0762  084A               	movf	(??_channelView+1)^(0+128),w
 11261  0763  3D48               	addwfc	(channelView@data+1)^(0+128),w
 11262  0764  00CC               	movwf	(??_channelView+3)^(0+128)
 11263  0765  084B               	movf	(??_channelView+2)^(0+128),w
 11264  0766  3E49               	addlw	73
 11265  0767  0086               	movwf	6
 11266  0768  3000               	movlw	0
 11267  0769  3D4C               	addwfc	(??_channelView+3)^(0+128),w
 11268  076A  0087               	movwf	7
 11269  076B  0801               	movf	1,w
 11270  076C  00CD               	movwf	(??_channelView+4)^(0+128)
 11271  076D  01CE               	clrf	((??_channelView+4)^(0+128)+1)
 11272                           
 11273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11274                           ; Switch size 1, requested type "simple"
 11275                           ; Number of cases is 1, Range of values is 0 to 0
 11276                           ; switch strategies available:
 11277                           ; Name         Instructions Cycles
 11278                           ; simple_byte            4     3 (average)
 11279                           ; direct_byte            8     6 (fixed)
 11280                           ; jumptable            260     6 (fixed)
 11281                           ;	Chosen strategy is simple_byte
 11282  076E  084E               	movf	(??_channelView+5)^(0+128),w
 11283  076F  3A00               	xorlw	0	; case 0
 11284  0770  1903               	skipnz
 11285  0771  2F73               	goto	l8345
 11286  0772  2F41               	goto	l7455
 11287  0773                     l8345:	
 11288                           
 11289                           ; Switch size 1, requested type "simple"
 11290                           ; Number of cases is 6, Range of values is 0 to 5
 11291                           ; switch strategies available:
 11292                           ; Name         Instructions Cycles
 11293                           ; direct_byte           18     6 (fixed)
 11294                           ; simple_byte           19    10 (average)
 11295                           ; jumptable            260     6 (fixed)
 11296                           ;	Chosen strategy is simple_byte
 11297  0773  084D               	movf	(??_channelView+4)^(0+128),w
 11298  0774  3A00               	xorlw	0	; case 0
 11299  0775  1903               	skipnz
 11300  0776  2E15               	goto	l7431
 11301  0777  3A01               	xorlw	1	; case 1
 11302  0778  1903               	skipnz
 11303  0779  2E2B               	goto	l7433
 11304  077A  3A03               	xorlw	3	; case 2
 11305  077B  1903               	skipnz
 11306  077C  2EFF               	goto	l7449
 11307  077D  3A01               	xorlw	1	; case 3
 11308  077E  1903               	skipnz
 11309  077F  2F15               	goto	l7451
 11310  0780  3A07               	xorlw	7	; case 4
 11311  0781  1903               	skipnz
 11312  0782  2F2B               	goto	l7453
 11313  0783  3A01               	xorlw	1	; case 5
 11314  0784  1903               	skipnz
 11315  0785  2DFF               	goto	l7429
 11316  0786  2F41               	goto	l7455
 11317  0787                     l7461:	
 11318                           
 11319                           ;menu.c: 130:  }
 11320  0787  3001               	movlw	1
 11321  0788  0141               	movlb	1	; select bank1
 11322  0789  00C9               	movwf	??_channelView^(0+128)
 11323  078A  0849               	movf	??_channelView^(0+128),w
 11324  078B  07CF               	addwf	channelView@n^(0+128),f
 11325  078C  2DFA               	goto	l7425
 11326  078D                     l7465:	
 11327                           
 11328                           ;menu.c: 131:  page = paging(page, 4);
 11329  078D  3004               	movlw	4
 11330  078E  00C9               	movwf	??_channelView^(0+128)
 11331  078F  0849               	movf	??_channelView^(0+128),w
 11332  0790  0140               	movlb	0	; select bank0
 11333  0791  00AB               	movwf	paging@lastPage
 11334  0792  0142               	movlb	2	; select bank2
 11335  0793  086E               	movf	channelView@page^(0+256),w
 11336  0794  31AB  23AF         	fcall	_paging
 11337  0796  0141               	movlb	1	; select bank1
 11338  0797  00CA               	movwf	(??_channelView+1)^(0+128)
 11339  0798  084A               	movf	(??_channelView+1)^(0+128),w
 11340  0799  0142               	movlb	2	; select bank2
 11341  079A  00EE               	movwf	channelView@page^(0+256)
 11342                           
 11343                           ;menu.c: 132:  selectedChannel = page;
 11344  079B  086E               	movf	channelView@page^(0+256),w
 11345  079C  0141               	movlb	1	; select bank1
 11346  079D  00C9               	movwf	??_channelView^(0+128)
 11347  079E  0849               	movf	??_channelView^(0+128),w
 11348  079F  0140               	movlb	0	; select bank0
 11349  07A0  00EA               	movwf	_selectedChannel
 11350                           
 11351                           ;menu.c: 134:  return page;
 11352  07A1  0142               	movlb	2	; select bank2
 11353  07A2  086E               	movf	channelView@page^(0+256),w
 11354  07A3  0008               	return
 11355  07A4                     __end_of_channelView:	
 11356                           
 11357                           	psect	text18
 11358  13F0                     __ptext18:	
 11359 ;; *************** function _statusView *****************
 11360 ;; Defined at:
 11361 ;;		line 16 in file "menu.c"
 11362 ;; Parameters:    Size  Location     Type
 11363 ;;  data            2   39[BANK1 ] PTR struct .
 11364 ;;		 -> data(170), 
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;		None
 11367 ;; Return value:  Size  Location     Type
 11368 ;;                  1    wreg      unsigned char 
 11369 ;; Registers used:
 11370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11376 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11378 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11379 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11380 ;;Total ram usage:        4 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; Hardware stack levels required when called:    9
 11383 ;; This function calls:
 11384 ;;		_OLED_print_xy
 11385 ;;		_ftoa
 11386 ;;		_itoa
 11387 ;;		_paging
 11388 ;;		_returnToPage
 11389 ;; This function is called by:
 11390 ;;		_menu
 11391 ;; This function uses a non-reentrant model
 11392 ;;
 11393                           
 11394                           
 11395                           ;psect for function _statusView
 11396  13F0                     _statusView:	
 11397                           
 11398                           ;menu.c: 16: uint8_t statusView(t_globalData *data);menu.c: 17: {;menu.c: 18:  static ui
      +                          nt8_t page = 0;;menu.c: 19:  static uint8_t prevSensorStat = 1;;menu.c: 22:  if (prevSen
      +                          sorStat != data->status.SENSOR_OK) {
 11399                           
 11400                           ;incstack = 0
 11401                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11402  13F0  0141               	movlb	1	; select bank1
 11403  13F1  0847               	movf	statusView@data^(0+128),w
 11404  13F2  3E29               	addlw	41
 11405  13F3  0086               	movwf	6
 11406  13F4  3000               	movlw	0
 11407  13F5  3D48               	addwfc	(statusView@data+1)^(0+128),w
 11408  13F6  0087               	movwf	7
 11409  13F7  0C01               	rrf	1,w
 11410  13F8  00C9               	movwf	??_statusView^(0+128)
 11411  13F9  0CC9               	rrf	??_statusView^(0+128),f
 11412  13FA  0C49               	rrf	??_statusView^(0+128),w
 11413  13FB  3901               	andlw	1
 11414  13FC  0143               	movlb	3	; select bank3
 11415  13FD  066E               	xorwf	statusView@prevSensorStat^(0+384),w
 11416  13FE  1903               	skipnz
 11417  13FF  2C20               	goto	l7345
 11418                           
 11419                           ;menu.c: 23:   prevSensorStat = data->status.SENSOR_OK;
 11420  1400  0141               	movlb	1	; select bank1
 11421  1401  0847               	movf	statusView@data^(0+128),w
 11422  1402  3E29               	addlw	41
 11423  1403  0086               	movwf	6
 11424  1404  3000               	movlw	0
 11425  1405  3D48               	addwfc	(statusView@data+1)^(0+128),w
 11426  1406  0087               	movwf	7
 11427  1407  3000               	movlw	0
 11428  1408  1981               	btfsc	1,3
 11429  1409  3001               	movlw	1
 11430  140A  0143               	movlb	3	; select bank3
 11431  140B  00EE               	movwf	statusView@prevSensorStat^(0+384)
 11432                           
 11433                           ;menu.c: 25:   if (data->status.SENSOR_OK)
 11434  140C  0141               	movlb	1	; select bank1
 11435  140D  0847               	movf	statusView@data^(0+128),w
 11436  140E  3E29               	addlw	41
 11437  140F  0086               	movwf	6
 11438  1410  3000               	movlw	0
 11439  1411  3D48               	addwfc	(statusView@data+1)^(0+128),w
 11440  1412  0087               	movwf	7
 11441  1413  1D81               	btfss	1,3
 11442  1414  2C18               	goto	l7341
 11443                           
 11444                           ;menu.c: 26:    page = 0;
 11445  1415  0142               	movlb	2	; select bank2
 11446  1416  01EF               	clrf	statusView@page^(0+256)
 11447  1417  2C1D               	goto	l7343
 11448  1418                     l7341:	
 11449                           
 11450                           ;menu.c: 28:    page = 3;
 11451  1418  3003               	movlw	3
 11452  1419  00C9               	movwf	??_statusView^(0+128)
 11453  141A  0849               	movf	??_statusView^(0+128),w
 11454  141B  0142               	movlb	2	; select bank2
 11455  141C  00EF               	movwf	statusView@page^(0+256)
 11456  141D                     l7343:	
 11457                           
 11458                           ;menu.c: 29:   g_screenRefresh = 1;
 11459  141D  0141               	movlb	1	; select bank1
 11460  141E  01ED               	clrf	_g_screenRefresh^(0+128)
 11461  141F  0AED               	incf	_g_screenRefresh^(0+128),f
 11462  1420                     l7345:	
 11463                           
 11464                           ;menu.c: 32:  returnToPage(page);
 11465  1420  0142               	movlb	2	; select bank2
 11466  1421  086F               	movf	statusView@page^(0+256),w
 11467  1422  3190  2001  3193   	fcall	_returnToPage
 11468                           
 11469                           ;menu.c: 33:  if (g_screenRefresh) {
 11470  1425  0141               	movlb	1	; select bank1
 11471  1426  086D               	movf	_g_screenRefresh^(0+128),w
 11472  1427  1903               	btfsc	3,2
 11473  1428  2C3E               	goto	l7351
 11474                           
 11475                           ;menu.c: 34:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 11476  1429  0140               	movlb	0	; select bank0
 11477  142A  01B1               	clrf	OLED_print_xy@row
 11478  142B  306F               	movlw	low (STR_1| (0+32768))
 11479  142C  00B2               	movwf	OLED_print_xy@s
 11480  142D  30B0               	movlw	high (STR_1| (0+32768))
 11481  142E  00B3               	movwf	OLED_print_xy@s+1
 11482  142F  3000               	movlw	0
 11483  1430  31B7  2727  3193   	fcall	_OLED_print_xy
 11484                           
 11485                           ;menu.c: 35:   OLED_print_xy(4 * 12, 1, "Sensor:");
 11486  1433  0140               	movlb	0	; select bank0
 11487  1434  01B1               	clrf	OLED_print_xy@row
 11488  1435  0AB1               	incf	OLED_print_xy@row,f
 11489  1436  309D               	movlw	low (STR_2| (0+32768))
 11490  1437  00B2               	movwf	OLED_print_xy@s
 11491  1438  30BA               	movlw	high (STR_2| (0+32768))
 11492  1439  00B3               	movwf	OLED_print_xy@s+1
 11493  143A  3030               	movlw	48
 11494  143B  31B7  2727  3193   	fcall	_OLED_print_xy
 11495  143E                     l7351:	
 11496                           
 11497                           ;menu.c: 37:  if (data->status.AUX_SENSOR_OK) {
 11498  143E  0141               	movlb	1	; select bank1
 11499  143F  0847               	movf	statusView@data^(0+128),w
 11500  1440  3E29               	addlw	41
 11501  1441  0086               	movwf	6
 11502  1442  3000               	movlw	0
 11503  1443  3D48               	addwfc	(statusView@data+1)^(0+128),w
 11504  1444  0087               	movwf	7
 11505  1445  1E01               	btfss	1,4
 11506  1446  2C9E               	goto	l7363
 11507                           
 11508                           ;menu.c: 38:   ftoa(str, data->tempC, 5, 1);
 11509  1447  0847               	movf	statusView@data^(0+128),w
 11510  1448  0086               	movwf	6
 11511  1449  0848               	movf	(statusView@data+1)^(0+128),w
 11512  144A  0087               	movwf	7
 11513  144B  3F40               	moviw [0]fsr1
 11514  144C  00B9               	movwf	ftoa@fValue^(0+128)
 11515  144D  3F41               	moviw [1]fsr1
 11516  144E  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11517  144F  3F42               	moviw [2]fsr1
 11518  1450  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11519  1451  3F43               	moviw [3]fsr1
 11520  1452  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11521  1453  3005               	movlw	5
 11522  1454  00C9               	movwf	??_statusView^(0+128)
 11523  1455  0849               	movf	??_statusView^(0+128),w
 11524  1456  00BD               	movwf	ftoa@width^(0+128)
 11525  1457  01BE               	clrf	ftoa@prec^(0+128)
 11526  1458  0ABE               	incf	ftoa@prec^(0+128),f
 11527  1459  304E               	movlw	(low (_str| (0+512)))& (0+255)
 11528  145A  31A5  2515  3193   	fcall	_ftoa
 11529                           
 11530                           ;menu.c: 39:   OLED_print_xy(0, 1, str);
 11531  145D  0140               	movlb	0	; select bank0
 11532  145E  01B1               	clrf	OLED_print_xy@row
 11533  145F  0AB1               	incf	OLED_print_xy@row,f
 11534  1460  304E               	movlw	low _str
 11535  1461  00B2               	movwf	OLED_print_xy@s
 11536  1462  3002               	movlw	high _str
 11537  1463  00B3               	movwf	OLED_print_xy@s+1
 11538  1464  3000               	movlw	0
 11539  1465  31B7  2727  3193   	fcall	_OLED_print_xy
 11540                           
 11541                           ;menu.c: 40:   OLED_print_xy(5, 1, "\001 \002");
 11542  1468  0140               	movlb	0	; select bank0
 11543  1469  01B1               	clrf	OLED_print_xy@row
 11544  146A  0AB1               	incf	OLED_print_xy@row,f
 11545  146B  30D2               	movlw	low (STR_3| (0+32768))
 11546  146C  00B2               	movwf	OLED_print_xy@s
 11547  146D  30BA               	movlw	high (STR_3| (0+32768))
 11548  146E  00B3               	movwf	OLED_print_xy@s+1
 11549  146F  3005               	movlw	5
 11550  1470  31B7  2727  3193   	fcall	_OLED_print_xy
 11551                           
 11552                           ;menu.c: 41:   ftoa(str, data->tempAux, 3, 0);
 11553  1473  0141               	movlb	1	; select bank1
 11554  1474  0847               	movf	statusView@data^(0+128),w
 11555  1475  0086               	movwf	6
 11556  1476  0848               	movf	(statusView@data+1)^(0+128),w
 11557  1477  0087               	movwf	7
 11558  1478  314D               	addfsr 1,13
 11559  1479  3F40               	moviw [0]fsr1
 11560  147A  00B9               	movwf	ftoa@fValue^(0+128)
 11561  147B  3F41               	moviw [1]fsr1
 11562  147C  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11563  147D  3F42               	moviw [2]fsr1
 11564  147E  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11565  147F  3F43               	moviw [3]fsr1
 11566  1480  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11567  1481  3003               	movlw	3
 11568  1482  00C9               	movwf	??_statusView^(0+128)
 11569  1483  0849               	movf	??_statusView^(0+128),w
 11570  1484  00BD               	movwf	ftoa@width^(0+128)
 11571  1485  01BE               	clrf	ftoa@prec^(0+128)
 11572  1486  304E               	movlw	(low (_str| (0+512)))& (0+255)
 11573  1487  31A5  2515  3193   	fcall	_ftoa
 11574                           
 11575                           ;menu.c: 42:   OLED_print_xy(8, 1, str);
 11576  148A  0140               	movlb	0	; select bank0
 11577  148B  01B1               	clrf	OLED_print_xy@row
 11578  148C  0AB1               	incf	OLED_print_xy@row,f
 11579  148D  304E               	movlw	low _str
 11580  148E  00B2               	movwf	OLED_print_xy@s
 11581  148F  3002               	movlw	high _str
 11582  1490  00B3               	movwf	OLED_print_xy@s+1
 11583  1491  3008               	movlw	8
 11584  1492  31B7  2727  3193   	fcall	_OLED_print_xy
 11585                           
 11586                           ;menu.c: 43:   OLED_print_xy(11, 1, "\001");
 11587  1495  0140               	movlb	0	; select bank0
 11588  1496  01B1               	clrf	OLED_print_xy@row
 11589  1497  0AB1               	incf	OLED_print_xy@row,f
 11590  1498  30F0               	movlw	low (STR_4| (0+32768))
 11591  1499  00B2               	movwf	OLED_print_xy@s
 11592  149A  30BA               	movlw	high (STR_4| (0+32768))
 11593  149B  00B3               	movwf	OLED_print_xy@s+1
 11594  149C  300B               	movlw	11
 11595  149D  2CC7               	goto	L5
 11596  149E                     l7363:	
 11597                           ;menu.c: 44:  } else {
 11598                           
 11599                           
 11600                           ;menu.c: 45:   ftoa(str, data->tempC, 5, 1);
 11601  149E  0847               	movf	statusView@data^(0+128),w
 11602  149F  0086               	movwf	6
 11603  14A0  0848               	movf	(statusView@data+1)^(0+128),w
 11604  14A1  0087               	movwf	7
 11605  14A2  3F40               	moviw [0]fsr1
 11606  14A3  00B9               	movwf	ftoa@fValue^(0+128)
 11607  14A4  3F41               	moviw [1]fsr1
 11608  14A5  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11609  14A6  3F42               	moviw [2]fsr1
 11610  14A7  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11611  14A8  3F43               	moviw [3]fsr1
 11612  14A9  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11613  14AA  3005               	movlw	5
 11614  14AB  00C9               	movwf	??_statusView^(0+128)
 11615  14AC  0849               	movf	??_statusView^(0+128),w
 11616  14AD  00BD               	movwf	ftoa@width^(0+128)
 11617  14AE  01BE               	clrf	ftoa@prec^(0+128)
 11618  14AF  0ABE               	incf	ftoa@prec^(0+128),f
 11619  14B0  304E               	movlw	(low (_str| (0+512)))& (0+255)
 11620  14B1  31A5  2515  3193   	fcall	_ftoa
 11621                           
 11622                           ;menu.c: 46:   OLED_print_xy(0, 1, str);
 11623  14B4  0140               	movlb	0	; select bank0
 11624  14B5  01B1               	clrf	OLED_print_xy@row
 11625  14B6  0AB1               	incf	OLED_print_xy@row,f
 11626  14B7  304E               	movlw	low _str
 11627  14B8  00B2               	movwf	OLED_print_xy@s
 11628  14B9  3002               	movlw	high _str
 11629  14BA  00B3               	movwf	OLED_print_xy@s+1
 11630  14BB  3000               	movlw	0
 11631  14BC  31B7  2727  3193   	fcall	_OLED_print_xy
 11632                           
 11633                           ;menu.c: 47:   OLED_print_xy(5, 1, "\001      ");
 11634  14BF  0140               	movlb	0	; select bank0
 11635  14C0  01B1               	clrf	OLED_print_xy@row
 11636  14C1  0AB1               	incf	OLED_print_xy@row,f
 11637  14C2  307D               	movlw	low (STR_5| (0+32768))
 11638  14C3  00B2               	movwf	OLED_print_xy@s
 11639  14C4  30BA               	movlw	high (STR_5| (0+32768))
 11640  14C5  00B3               	movwf	OLED_print_xy@s+1
 11641  14C6  3005               	movlw	5
 11642  14C7                     L5:	
 11643  14C7  31B7  2727  3193   	fcall	_OLED_print_xy
 11644                           
 11645                           ;menu.c: 49:  ftoa(str, data->relHum, 5, 1);
 11646                           
 11647                           ;menu.c: 48:  }
 11648  14CA  0141               	movlb	1	; select bank1
 11649  14CB  0847               	movf	statusView@data^(0+128),w
 11650  14CC  0086               	movwf	6
 11651  14CD  0848               	movf	(statusView@data+1)^(0+128),w
 11652  14CE  0087               	movwf	7
 11653  14CF  3144               	addfsr 1,4
 11654  14D0  3F40               	moviw [0]fsr1
 11655  14D1  00B9               	movwf	ftoa@fValue^(0+128)
 11656  14D2  3F41               	moviw [1]fsr1
 11657  14D3  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11658  14D4  3F42               	moviw [2]fsr1
 11659  14D5  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11660  14D6  3F43               	moviw [3]fsr1
 11661  14D7  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11662  14D8  3005               	movlw	5
 11663  14D9  00C9               	movwf	??_statusView^(0+128)
 11664  14DA  0849               	movf	??_statusView^(0+128),w
 11665  14DB  00BD               	movwf	ftoa@width^(0+128)
 11666  14DC  01BE               	clrf	ftoa@prec^(0+128)
 11667  14DD  0ABE               	incf	ftoa@prec^(0+128),f
 11668  14DE  304E               	movlw	(low (_str| (0+512)))& (0+255)
 11669  14DF  31A5  2515  3193   	fcall	_ftoa
 11670                           
 11671                           ;menu.c: 50:  OLED_print_xy(12, 1, str);
 11672  14E2  0140               	movlb	0	; select bank0
 11673  14E3  01B1               	clrf	OLED_print_xy@row
 11674  14E4  0AB1               	incf	OLED_print_xy@row,f
 11675  14E5  304E               	movlw	low _str
 11676  14E6  00B2               	movwf	OLED_print_xy@s
 11677  14E7  3002               	movlw	high _str
 11678  14E8  00B3               	movwf	OLED_print_xy@s+1
 11679  14E9  300C               	movlw	12
 11680  14EA  31B7  2727  3193   	fcall	_OLED_print_xy
 11681                           
 11682                           ;menu.c: 51:  OLED_print_xy(12 + 5, 1, "%     ");
 11683  14ED  0140               	movlb	0	; select bank0
 11684  14EE  01B1               	clrf	OLED_print_xy@row
 11685  14EF  0AB1               	incf	OLED_print_xy@row,f
 11686  14F0  30BA               	movlw	low (STR_6| (0+32768))
 11687  14F1  00B2               	movwf	OLED_print_xy@s
 11688  14F2  30BA               	movlw	high (STR_6| (0+32768))
 11689  14F3  00B3               	movwf	OLED_print_xy@s+1
 11690  14F4  3011               	movlw	17
 11691  14F5  31B7  2727  3193   	fcall	_OLED_print_xy
 11692                           
 11693                           ;menu.c: 52:  ftoa(str, data->dewPointC, 5, 1);
 11694  14F8  0141               	movlb	1	; select bank1
 11695  14F9  0847               	movf	statusView@data^(0+128),w
 11696  14FA  0086               	movwf	6
 11697  14FB  0848               	movf	(statusView@data+1)^(0+128),w
 11698  14FC  0087               	movwf	7
 11699  14FD  3148               	addfsr 1,8
 11700  14FE  3F40               	moviw [0]fsr1
 11701  14FF  00B9               	movwf	ftoa@fValue^(0+128)
 11702  1500  3F41               	moviw [1]fsr1
 11703  1501  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11704  1502  3F42               	moviw [2]fsr1
 11705  1503  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11706  1504  3F43               	moviw [3]fsr1
 11707  1505  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11708  1506  3005               	movlw	5
 11709  1507  00C9               	movwf	??_statusView^(0+128)
 11710  1508  0849               	movf	??_statusView^(0+128),w
 11711  1509  00BD               	movwf	ftoa@width^(0+128)
 11712  150A  01BE               	clrf	ftoa@prec^(0+128)
 11713  150B  0ABE               	incf	ftoa@prec^(0+128),f
 11714  150C  304E               	movlw	(low (_str| (0+512)))& (0+255)
 11715  150D  31A5  2515  3193   	fcall	_ftoa
 11716                           
 11717                           ;menu.c: 53:  OLED_print_xy(2 * 12, 1, str);
 11718  1510  0140               	movlb	0	; select bank0
 11719  1511  01B1               	clrf	OLED_print_xy@row
 11720  1512  0AB1               	incf	OLED_print_xy@row,f
 11721  1513  304E               	movlw	low _str
 11722  1514  00B2               	movwf	OLED_print_xy@s
 11723  1515  3002               	movlw	high _str
 11724  1516  00B3               	movwf	OLED_print_xy@s+1
 11725  1517  3018               	movlw	24
 11726  1518  31B7  2727  3193   	fcall	_OLED_print_xy
 11727                           
 11728                           ;menu.c: 54:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 11729  151B  0140               	movlb	0	; select bank0
 11730  151C  01B1               	clrf	OLED_print_xy@row
 11731  151D  0AB1               	incf	OLED_print_xy@row,f
 11732  151E  307D               	movlw	low (STR_5| (0+32768))
 11733  151F  00B2               	movwf	OLED_print_xy@s
 11734  1520  30BA               	movlw	high (STR_5| (0+32768))
 11735  1521  00B3               	movwf	OLED_print_xy@s+1
 11736  1522  301D               	movlw	29
 11737  1523  31B7  2727  3193   	fcall	_OLED_print_xy
 11738                           
 11739                           ;menu.c: 55:  ftoa(str, data->voltage, 4, 1);
 11740  1526  0141               	movlb	1	; select bank1
 11741  1527  0847               	movf	statusView@data^(0+128),w
 11742  1528  0086               	movwf	6
 11743  1529  0848               	movf	(statusView@data+1)^(0+128),w
 11744  152A  0087               	movwf	7
 11745  152B  3151               	addfsr 1,17
 11746  152C  3F40               	moviw [0]fsr1
 11747  152D  00B9               	movwf	ftoa@fValue^(0+128)
 11748  152E  3F41               	moviw [1]fsr1
 11749  152F  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11750  1530  3F42               	moviw [2]fsr1
 11751  1531  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11752  1532  3F43               	moviw [3]fsr1
 11753  1533  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11754  1534  3004               	movlw	4
 11755  1535  00C9               	movwf	??_statusView^(0+128)
 11756  1536  0849               	movf	??_statusView^(0+128),w
 11757  1537  00BD               	movwf	ftoa@width^(0+128)
 11758  1538  01BE               	clrf	ftoa@prec^(0+128)
 11759  1539  0ABE               	incf	ftoa@prec^(0+128),f
 11760  153A  304E               	movlw	(low (_str| (0+512)))& (0+255)
 11761  153B  31A5  2515  3193   	fcall	_ftoa
 11762                           
 11763                           ;menu.c: 56:  OLED_print_xy(3 * 12, 1, str);
 11764  153E  0140               	movlb	0	; select bank0
 11765  153F  01B1               	clrf	OLED_print_xy@row
 11766  1540  0AB1               	incf	OLED_print_xy@row,f
 11767  1541  304E               	movlw	low _str
 11768  1542  00B2               	movwf	OLED_print_xy@s
 11769  1543  3002               	movlw	high _str
 11770  1544  00B3               	movwf	OLED_print_xy@s+1
 11771  1545  3024               	movlw	36
 11772  1546  31B7  2727  3193   	fcall	_OLED_print_xy
 11773                           
 11774                           ;menu.c: 57:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 11775  1549  0140               	movlb	0	; select bank0
 11776  154A  01B1               	clrf	OLED_print_xy@row
 11777  154B  0AB1               	incf	OLED_print_xy@row,f
 11778  154C  30D6               	movlw	low (STR_8| (0+32768))
 11779  154D  00B2               	movwf	OLED_print_xy@s
 11780  154E  30BA               	movlw	high (STR_8| (0+32768))
 11781  154F  00B3               	movwf	OLED_print_xy@s+1
 11782  1550  3028               	movlw	40
 11783  1551  31B7  2727  3193   	fcall	_OLED_print_xy
 11784                           
 11785                           ;menu.c: 58:  ftoa(str, data->power, 4, 1);
 11786  1554  0141               	movlb	1	; select bank1
 11787  1555  0847               	movf	statusView@data^(0+128),w
 11788  1556  0086               	movwf	6
 11789  1557  0848               	movf	(statusView@data+1)^(0+128),w
 11790  1558  0087               	movwf	7
 11791  1559  3159               	addfsr 1,25
 11792  155A  3F40               	moviw [0]fsr1
 11793  155B  00B9               	movwf	ftoa@fValue^(0+128)
 11794  155C  3F41               	moviw [1]fsr1
 11795  155D  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11796  155E  3F42               	moviw [2]fsr1
 11797  155F  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11798  1560  3F43               	moviw [3]fsr1
 11799  1561  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11800  1562  3004               	movlw	4
 11801  1563  00C9               	movwf	??_statusView^(0+128)
 11802  1564  0849               	movf	??_statusView^(0+128),w
 11803  1565  00BD               	movwf	ftoa@width^(0+128)
 11804  1566  01BE               	clrf	ftoa@prec^(0+128)
 11805  1567  0ABE               	incf	ftoa@prec^(0+128),f
 11806  1568  304E               	movlw	(low (_str| (0+512)))& (0+255)
 11807  1569  31A5  2515  3193   	fcall	_ftoa
 11808                           
 11809                           ;menu.c: 59:  OLED_print_xy(3 * 12 + 7, 1, str);
 11810  156C  0140               	movlb	0	; select bank0
 11811  156D  01B1               	clrf	OLED_print_xy@row
 11812  156E  0AB1               	incf	OLED_print_xy@row,f
 11813  156F  304E               	movlw	low _str
 11814  1570  00B2               	movwf	OLED_print_xy@s
 11815  1571  3002               	movlw	high _str
 11816  1572  00B3               	movwf	OLED_print_xy@s+1
 11817  1573  302B               	movlw	43
 11818  1574  31B7  2727  3193   	fcall	_OLED_print_xy
 11819                           
 11820                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 11, 1, "W");
 11821  1577  0140               	movlb	0	; select bank0
 11822  1578  01B1               	clrf	OLED_print_xy@row
 11823  1579  0AB1               	incf	OLED_print_xy@row,f
 11824  157A  3036               	movlw	low ((STR_79+11)| (0+32768))
 11825  157B  00B2               	movwf	OLED_print_xy@s
 11826  157C  30B9               	movlw	high ((STR_79+11)| (0+32768))
 11827  157D  00B3               	movwf	OLED_print_xy@s+1
 11828  157E  302F               	movlw	47
 11829  157F  31B7  2727  3193   	fcall	_OLED_print_xy
 11830                           
 11831                           ;menu.c: 61:  itoa(str, 1, 3);
 11832  1582  304E               	movlw	low _str
 11833  1583  0141               	movlb	1	; select bank1
 11834  1584  00B6               	movwf	itoa@str^(0+128)
 11835  1585  3002               	movlw	high _str
 11836  1586  00B7               	movwf	(itoa@str+1)^(0+128)
 11837  1587  01B8               	clrf	itoa@value^(0+128)
 11838  1588  0AB8               	incf	itoa@value^(0+128),f
 11839  1589  3003               	movlw	3
 11840  158A  00C9               	movwf	??_statusView^(0+128)
 11841  158B  0849               	movf	??_statusView^(0+128),w
 11842  158C  00B9               	movwf	itoa@width^(0+128)
 11843  158D  31AB  2346  3193   	fcall	_itoa
 11844                           
 11845                           ;menu.c: 62:  OLED_print_xy(4 * 12 + 8, 0, str);
 11846  1590  0140               	movlb	0	; select bank0
 11847  1591  01B1               	clrf	OLED_print_xy@row
 11848  1592  304E               	movlw	low _str
 11849  1593  00B2               	movwf	OLED_print_xy@s
 11850  1594  3002               	movlw	high _str
 11851  1595  00B3               	movwf	OLED_print_xy@s+1
 11852  1596  3038               	movlw	56
 11853  1597  31B7  2727  3193   	fcall	_OLED_print_xy
 11854                           
 11855                           ;menu.c: 64:  if (data->status.SENSOR_OK) {
 11856  159A  0141               	movlb	1	; select bank1
 11857  159B  0847               	movf	statusView@data^(0+128),w
 11858  159C  3E29               	addlw	41
 11859  159D  0086               	movwf	6
 11860  159E  3000               	movlw	0
 11861  159F  3D48               	addwfc	(statusView@data+1)^(0+128),w
 11862  15A0  0087               	movwf	7
 11863  15A1  1D81               	btfss	1,3
 11864  15A2  2DD1               	goto	l7395
 11865                           
 11866                           ;menu.c: 65:   itoa(str, data->sensorVersion, 3);
 11867  15A3  304E               	movlw	low _str
 11868  15A4  00B6               	movwf	itoa@str^(0+128)
 11869  15A5  3002               	movlw	high _str
 11870  15A6  00B7               	movwf	(itoa@str+1)^(0+128)
 11871  15A7  0847               	movf	statusView@data^(0+128),w
 11872  15A8  0086               	movwf	6
 11873  15A9  0848               	movf	(statusView@data+1)^(0+128),w
 11874  15AA  0087               	movwf	7
 11875  15AB  314C               	addfsr 1,12
 11876  15AC  0801               	movf	1,w
 11877  15AD  00C9               	movwf	??_statusView^(0+128)
 11878  15AE  0849               	movf	??_statusView^(0+128),w
 11879  15AF  00B8               	movwf	itoa@value^(0+128)
 11880  15B0  3003               	movlw	3
 11881  15B1  00CA               	movwf	(??_statusView+1)^(0+128)
 11882  15B2  084A               	movf	(??_statusView+1)^(0+128),w
 11883  15B3  00B9               	movwf	itoa@width^(0+128)
 11884  15B4  31AB  2346  3193   	fcall	_itoa
 11885                           
 11886                           ;menu.c: 66:   OLED_print_xy(4 * 12 + 8, 1, str);
 11887  15B7  0140               	movlb	0	; select bank0
 11888  15B8  01B1               	clrf	OLED_print_xy@row
 11889  15B9  0AB1               	incf	OLED_print_xy@row,f
 11890  15BA  304E               	movlw	low _str
 11891  15BB  00B2               	movwf	OLED_print_xy@s
 11892  15BC  3002               	movlw	high _str
 11893  15BD  00B3               	movwf	OLED_print_xy@s+1
 11894  15BE  3038               	movlw	56
 11895  15BF  31B7  2727  3193   	fcall	_OLED_print_xy
 11896                           
 11897                           ;menu.c: 67:   page = paging(page, 5);
 11898  15C2  3005               	movlw	5
 11899  15C3  0141               	movlb	1	; select bank1
 11900  15C4  00C9               	movwf	??_statusView^(0+128)
 11901  15C5  0849               	movf	??_statusView^(0+128),w
 11902  15C6  0140               	movlb	0	; select bank0
 11903  15C7  00AB               	movwf	paging@lastPage
 11904  15C8  0142               	movlb	2	; select bank2
 11905  15C9  086F               	movf	statusView@page^(0+256),w
 11906  15CA  31AB  23AF         	fcall	_paging
 11907  15CC  0141               	movlb	1	; select bank1
 11908  15CD  00CA               	movwf	(??_statusView+1)^(0+128)
 11909  15CE  084A               	movf	(??_statusView+1)^(0+128),w
 11910  15CF  0142               	movlb	2	; select bank2
 11911  15D0  00EF               	movwf	statusView@page^(0+256)
 11912  15D1                     l7395:	
 11913                           
 11914                           ;menu.c: 69:  return page;
 11915  15D1  0142               	movlb	2	; select bank2
 11916  15D2  086F               	movf	statusView@page^(0+256),w
 11917  15D3  0008               	return
 11918  15D4                     __end_of_statusView:	
 11919                           
 11920                           	psect	text19
 11921  351F                     __ptext19:	
 11922 ;; *************** function _getPB *****************
 11923 ;; Defined at:
 11924 ;;		line 89 in file "inputs.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;		None
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;  ret             1    5[BANK0 ] enum E7878
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  1    wreg      enum E7878
 11931 ;; Registers used:
 11932 ;;		wreg, status,2, status,0
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11941 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11942 ;;Total ram usage:        2 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; Hardware stack levels required when called:    3
 11945 ;; This function calls:
 11946 ;;		Nothing
 11947 ;; This function is called by:
 11948 ;;		_setOutputPower
 11949 ;;		_viewErrorMessage
 11950 ;;		_menu
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           
 11955                           ;psect for function _getPB
 11956  351F                     _getPB:	
 11957                           
 11958                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 11959                           
 11960                           ;incstack = 0
 11961                           ; Regs used in _getPB: [wreg+status,2+status,0]
 11962  351F  087D               	movf	_pbState,w	;volatile
 11963  3520  0140               	movlb	0	; select bank0
 11964  3521  00A4               	movwf	??_getPB
 11965  3522  0824               	movf	??_getPB,w
 11966  3523  00A5               	movwf	getPB@ret
 11967                           
 11968                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 11969  3524  3004               	movlw	4
 11970  3525  067D               	xorwf	_pbState,w	;volatile
 11971  3526  1D03               	btfss	3,2
 11972                           
 11973                           ;inputs.c: 93:   pbState = PB_NONE;
 11974  3527  01FD               	clrf	_pbState	;volatile
 11975                           
 11976                           ;inputs.c: 94:  return ret;
 11977  3528  0825               	movf	getPB@ret,w
 11978  3529  0008               	return
 11979  352A                     __end_of_getPB:	
 11980                           
 11981                           	psect	text20
 11982  201F                     __ptext20:	
 11983 ;; *************** function _spinInput *****************
 11984 ;; Defined at:
 11985 ;;		line 100 in file "inputs.c"
 11986 ;; Parameters:    Size  Location     Type
 11987 ;;  input           2   25[BANK1 ] PTR float 
 11988 ;;		 -> data.chData(128), data(170), 
 11989 ;;  min             4   27[BANK1 ] float 
 11990 ;;  max             4   31[BANK1 ] float 
 11991 ;;  step            4   35[BANK1 ] float 
 11992 ;; Auto vars:     Size  Location     Type
 11993 ;;  dir             1   71[BANK0 ] enum E7874
 11994 ;; Return value:  Size  Location     Type
 11995 ;;                  1    wreg      void 
 11996 ;; Registers used:
 11997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11998 ;; Tracked objects:
 11999 ;;		On entry : 0/0
 12000 ;;		On exit  : 0/0
 12001 ;;		Unchanged: 0/0
 12002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12003 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12006 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12007 ;;Total ram usage:       16 bytes
 12008 ;; Hardware stack levels used:    1
 12009 ;; Hardware stack levels required when called:    5
 12010 ;; This function calls:
 12011 ;;		___fladd
 12012 ;;		___flge
 12013 ;;		___flsub
 12014 ;;		_getRotDir
 12015 ;; This function is called by:
 12016 ;;		_setOutputPower
 12017 ;;		_setLensDia
 12018 ;;		_setDPOffset
 12019 ;;		_setSkyTemp
 12020 ;;		_setFudgeFactor
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           
 12025                           ;psect for function _spinInput
 12026  201F                     _spinInput:	
 12027                           
 12028                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 12029                           
 12030                           ;incstack = 0
 12031                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12032  201F  31B5  2514  31A0   	fcall	_getRotDir
 12033  2022  0140               	movlb	0	; select bank0
 12034  2023  00E6               	movwf	??_spinInput
 12035  2024  0866               	movf	??_spinInput,w
 12036  2025  00E7               	movwf	spinInput@dir
 12037                           
 12038                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 12039  2026  3002               	movlw	2
 12040  2027  0667               	xorwf	spinInput@dir,w
 12041  2028  1D03               	btfss	3,2
 12042  2029  2869               	goto	l7117
 12043  202A  0141               	movlb	1	; select bank1
 12044  202B  083E               	movf	(spinInput@min+3)^(0+128),w
 12045  202C  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12046  202D  083D               	movf	(spinInput@min+2)^(0+128),w
 12047  202E  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12048  202F  083C               	movf	(spinInput@min+1)^(0+128),w
 12049  2030  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12050  2031  083B               	movf	spinInput@min^(0+128),w
 12051  2032  00AD               	movwf	___flge@ff1^(0+128)
 12052  2033  0839               	movf	spinInput@input^(0+128),w
 12053  2034  0086               	movwf	6
 12054  2035  083A               	movf	(spinInput@input+1)^(0+128),w
 12055  2036  0087               	movwf	7
 12056  2037  3F40               	moviw [0]fsr1
 12057  2038  00B1               	movwf	___flge@ff2^(0+128)
 12058  2039  3F41               	moviw [1]fsr1
 12059  203A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 12060  203B  3F42               	moviw [2]fsr1
 12061  203C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 12062  203D  3F43               	moviw [3]fsr1
 12063  203E  00B4               	movwf	(___flge@ff2+3)^(0+128)
 12064  203F  31AD  25D6  31A0   	fcall	___flge
 12065  2042  1803               	btfsc	3,0
 12066  2043  2869               	goto	l7117
 12067                           
 12068                           ;inputs.c: 105:   *input -= step;
 12069  2044  0141               	movlb	1	; select bank1
 12070  2045  0846               	movf	(spinInput@step+3)^(0+128),w
 12071  2046  00A3               	movwf	(___flsub@a+3)^(0+128)
 12072  2047  0845               	movf	(spinInput@step+2)^(0+128),w
 12073  2048  00A2               	movwf	(___flsub@a+2)^(0+128)
 12074  2049  0844               	movf	(spinInput@step+1)^(0+128),w
 12075  204A  00A1               	movwf	(___flsub@a+1)^(0+128)
 12076  204B  0843               	movf	spinInput@step^(0+128),w
 12077  204C  00A0               	movwf	___flsub@a^(0+128)
 12078  204D  0839               	movf	spinInput@input^(0+128),w
 12079  204E  0086               	movwf	6
 12080  204F  083A               	movf	(spinInput@input+1)^(0+128),w
 12081  2050  0087               	movwf	7
 12082  2051  3F40               	moviw [0]fsr1
 12083  2052  00A4               	movwf	___flsub@b^(0+128)
 12084  2053  3F41               	moviw [1]fsr1
 12085  2054  00A5               	movwf	(___flsub@b+1)^(0+128)
 12086  2055  3F42               	moviw [2]fsr1
 12087  2056  00A6               	movwf	(___flsub@b+2)^(0+128)
 12088  2057  3F43               	moviw [3]fsr1
 12089  2058  00A7               	movwf	(___flsub@b+3)^(0+128)
 12090  2059  31B7  2759         	fcall	___flsub
 12091  205B  0141               	movlb	1	; select bank1
 12092  205C  0839               	movf	spinInput@input^(0+128),w
 12093  205D  0086               	movwf	6
 12094  205E  083A               	movf	(spinInput@input+1)^(0+128),w
 12095  205F  0087               	movwf	7
 12096  2060  0820               	movf	?___flsub^(0+128),w
 12097  2061  3FC0               	movwi [0]fsr1
 12098  2062  0821               	movf	(?___flsub+1)^(0+128),w
 12099  2063  3FC1               	movwi [1]fsr1
 12100  2064  0822               	movf	(?___flsub+2)^(0+128),w
 12101  2065  3FC2               	movwi [2]fsr1
 12102  2066  0823               	movf	(?___flsub+3)^(0+128),w
 12103  2067  3FC3               	movwi [3]fsr1
 12104  2068  0008               	return
 12105  2069                     l7117:	
 12106  2069  0140               	movlb	0	; select bank0
 12107  206A  0367               	decf	spinInput@dir,w
 12108  206B  1D03               	btfss	3,2
 12109  206C  0008               	return
 12110  206D  0141               	movlb	1	; select bank1
 12111  206E  0839               	movf	spinInput@input^(0+128),w
 12112  206F  0086               	movwf	6
 12113  2070  083A               	movf	(spinInput@input+1)^(0+128),w
 12114  2071  0087               	movwf	7
 12115  2072  3F40               	moviw [0]fsr1
 12116  2073  00AD               	movwf	___flge@ff1^(0+128)
 12117  2074  3F41               	moviw [1]fsr1
 12118  2075  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12119  2076  3F42               	moviw [2]fsr1
 12120  2077  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12121  2078  3F43               	moviw [3]fsr1
 12122  2079  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12123  207A  0842               	movf	(spinInput@max+3)^(0+128),w
 12124  207B  00B4               	movwf	(___flge@ff2+3)^(0+128)
 12125  207C  0841               	movf	(spinInput@max+2)^(0+128),w
 12126  207D  00B3               	movwf	(___flge@ff2+2)^(0+128)
 12127  207E  0840               	movf	(spinInput@max+1)^(0+128),w
 12128  207F  00B2               	movwf	(___flge@ff2+1)^(0+128)
 12129  2080  083F               	movf	spinInput@max^(0+128),w
 12130  2081  00B1               	movwf	___flge@ff2^(0+128)
 12131  2082  31AD  25D6  31A0   	fcall	___flge
 12132  2085  1803               	btfsc	3,0
 12133  2086  0008               	return
 12134                           
 12135                           ;inputs.c: 107:   *input += step;
 12136  2087  0141               	movlb	1	; select bank1
 12137  2088  0846               	movf	(spinInput@step+3)^(0+128),w
 12138  2089  0140               	movlb	0	; select bank0
 12139  208A  00D5               	movwf	___fladd@b+3
 12140  208B  0141               	movlb	1	; select bank1
 12141  208C  0845               	movf	(spinInput@step+2)^(0+128),w
 12142  208D  0140               	movlb	0	; select bank0
 12143  208E  00D4               	movwf	___fladd@b+2
 12144  208F  0141               	movlb	1	; select bank1
 12145  2090  0844               	movf	(spinInput@step+1)^(0+128),w
 12146  2091  0140               	movlb	0	; select bank0
 12147  2092  00D3               	movwf	___fladd@b+1
 12148  2093  0141               	movlb	1	; select bank1
 12149  2094  0843               	movf	spinInput@step^(0+128),w
 12150  2095  0140               	movlb	0	; select bank0
 12151  2096  00D2               	movwf	___fladd@b
 12152  2097  0141               	movlb	1	; select bank1
 12153  2098  0839               	movf	spinInput@input^(0+128),w
 12154  2099  0086               	movwf	6
 12155  209A  083A               	movf	(spinInput@input+1)^(0+128),w
 12156  209B  0087               	movwf	7
 12157  209C  3F40               	moviw [0]fsr1
 12158  209D  0140               	movlb	0	; select bank0
 12159  209E  00D6               	movwf	___fladd@a
 12160  209F  3F41               	moviw [1]fsr1
 12161  20A0  00D7               	movwf	___fladd@a+1
 12162  20A1  3F42               	moviw [2]fsr1
 12163  20A2  00D8               	movwf	___fladd@a+2
 12164  20A3  3F43               	moviw [3]fsr1
 12165  20A4  00D9               	movwf	___fladd@a+3
 12166  20A5  3192  220E         	fcall	___fladd
 12167  20A7  0141               	movlb	1	; select bank1
 12168  20A8  0839               	movf	spinInput@input^(0+128),w
 12169  20A9  0086               	movwf	6
 12170  20AA  083A               	movf	(spinInput@input+1)^(0+128),w
 12171  20AB  0087               	movwf	7
 12172  20AC  0140               	movlb	0	; select bank0
 12173  20AD  0852               	movf	?___fladd,w
 12174  20AE  3FC0               	movwi [0]fsr1
 12175  20AF  0853               	movf	?___fladd+1,w
 12176  20B0  3FC1               	movwi [1]fsr1
 12177  20B1  0854               	movf	?___fladd+2,w
 12178  20B2  3FC2               	movwi [2]fsr1
 12179  20B3  0855               	movf	?___fladd+3,w
 12180  20B4  3FC3               	movwi [3]fsr1
 12181  20B5  0008               	return
 12182  20B6                     __end_of_spinInput:	
 12183                           
 12184                           	psect	text21
 12185  2893                     __ptext21:	
 12186 ;; *************** function _getStateFunc *****************
 12187 ;; Defined at:
 12188 ;;		line 140 in file "menuhelper.c"
 12189 ;; Parameters:    Size  Location     Type
 12190 ;;  state           1    wreg     enum E7979
 12191 ;; Auto vars:     Size  Location     Type
 12192 ;;  state           1   15[BANK0 ] enum E7979
 12193 ;;  n               1   16[BANK0 ] unsigned char 
 12194 ;; Return value:  Size  Location     Type
 12195 ;;                  2   10[BANK0 ] PTR FTN(PTR struct .,)un
 12196 ;; Registers used:
 12197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12198 ;; Tracked objects:
 12199 ;;		On entry : 0/0
 12200 ;;		On exit  : 0/0
 12201 ;;		Unchanged: 0/0
 12202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12203 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12204 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12205 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12206 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12207 ;;Total ram usage:        7 bytes
 12208 ;; Hardware stack levels used:    1
 12209 ;; Hardware stack levels required when called:    4
 12210 ;; This function calls:
 12211 ;;		___wmul
 12212 ;; This function is called by:
 12213 ;;		_menu
 12214 ;; This function uses a non-reentrant model
 12215 ;;
 12216                           
 12217                           
 12218                           ;psect for function _getStateFunc
 12219  2893                     _getStateFunc:	
 12220                           
 12221                           ;incstack = 0
 12222                           ; Regs used in _getStateFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12223                           ;getStateFunc@state stored from wreg
 12224  2893  0140               	movlb	0	; select bank0
 12225  2894  00AF               	movwf	getStateFunc@state
 12226                           
 12227                           ;menuhelper.c: 140: t_stateFuncPtr getStateFunc(enum e_menuStates state);menuhelper.c: 1
      +                          41: {;menuhelper.c: 142:  uint8_t n;;menuhelper.c: 145:  for(n = 0; n < sizeof(stateFunc
      +                          Tbl)/sizeof(stateFuncTbl[0]); n++) {
 12228  2895  01B0               	clrf	getStateFunc@n
 12229  2896                     l5385:	
 12230                           
 12231                           ;menuhelper.c: 146:   if ((stateFuncTbl[n].state == state))
 12232  2896  0830               	movf	getStateFunc@n,w
 12233  2897  00AC               	movwf	??_getStateFunc
 12234  2898  01AD               	clrf	??_getStateFunc+1
 12235  2899  082C               	movf	??_getStateFunc,w
 12236  289A  00A4               	movwf	___wmul@multiplier
 12237  289B  082D               	movf	??_getStateFunc+1,w
 12238  289C  00A5               	movwf	___wmul@multiplier+1
 12239  289D  3003               	movlw	3
 12240  289E  00A6               	movwf	___wmul@multiplicand
 12241  289F  3000               	movlw	0
 12242  28A0  00A7               	movwf	___wmul@multiplicand+1
 12243  28A1  3198  2000  31A8   	fcall	___wmul
 12244  28A4  0140               	movlb	0	; select bank0
 12245  28A5  0825               	movf	?___wmul+1,w
 12246  28A6  0085               	movwf	5
 12247  28A7  0824               	movf	?___wmul,w
 12248  28A8  0084               	movwf	4
 12249  28A9  3054               	movlw	low (_stateFuncTbl| (0+32768))
 12250  28AA  0784               	addwf	4,f
 12251  28AB  30B0               	movlw	high (_stateFuncTbl| (0+32768))
 12252  28AC  3D85               	addwfc	5,f
 12253  28AD  0800               	movf	0,w	;code access
 12254  28AE  062F               	xorwf	getStateFunc@state,w
 12255  28AF  1D03               	skipz
 12256  28B0  28CC               	goto	l5391
 12257                           
 12258                           ;menuhelper.c: 147:    return stateFuncTbl[n].func;
 12259  28B1  0830               	movf	getStateFunc@n,w
 12260  28B2  00AC               	movwf	??_getStateFunc
 12261  28B3  01AD               	clrf	??_getStateFunc+1
 12262  28B4  082C               	movf	??_getStateFunc,w
 12263  28B5  00A4               	movwf	___wmul@multiplier
 12264  28B6  082D               	movf	??_getStateFunc+1,w
 12265  28B7  00A5               	movwf	___wmul@multiplier+1
 12266  28B8  3003               	movlw	3
 12267  28B9  00A6               	movwf	___wmul@multiplicand
 12268  28BA  3000               	movlw	0
 12269  28BB  00A7               	movwf	___wmul@multiplicand+1
 12270  28BC  3198  2000         	fcall	___wmul
 12271  28BE  0140               	movlb	0	; select bank0
 12272  28BF  0825               	movf	?___wmul+1,w
 12273  28C0  0085               	movwf	5
 12274  28C1  0824               	movf	?___wmul,w
 12275  28C2  0084               	movwf	4
 12276  28C3  3055               	movlw	low ((_stateFuncTbl+1)| (0+32768))
 12277  28C4  0784               	addwf	4,f
 12278  28C5  30B0               	movlw	high ((_stateFuncTbl+1)| (0+32768))
 12279  28C6  3D85               	addwfc	5,f
 12280  28C7  3F00               	moviw [0]fsr0
 12281  28C8  00AA               	movwf	?_getStateFunc
 12282  28C9  3F01               	moviw [1]fsr0
 12283  28CA  00AB               	movwf	?_getStateFunc+1
 12284  28CB  0008               	return
 12285  28CC                     l5391:	
 12286                           
 12287                           ;menuhelper.c: 148:  }
 12288  28CC  3001               	movlw	1
 12289  28CD  00AC               	movwf	??_getStateFunc
 12290  28CE  082C               	movf	??_getStateFunc,w
 12291  28CF  07B0               	addwf	getStateFunc@n,f
 12292  28D0  3009               	movlw	9
 12293  28D1  0230               	subwf	getStateFunc@n,w
 12294  28D2  1C03               	skipc
 12295  28D3  2896               	goto	l5385
 12296                           
 12297                           ;menuhelper.c: 149:  return (t_stateFuncPtr)((void*)0);
 12298  28D4  01AA               	clrf	?_getStateFunc
 12299  28D5  01AB               	clrf	?_getStateFunc+1
 12300  28D6  0008               	return
 12301  28D7                     __end_of_getStateFunc:	
 12302                           
 12303                           	psect	text22
 12304  2225                     __ptext22:	
 12305 ;; *************** function _getNextState *****************
 12306 ;; Defined at:
 12307 ;;		line 155 in file "menuhelper.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;  state           1    wreg     enum E7979
 12310 ;;  intState        1   10[BANK0 ] unsigned char 
 12311 ;;  pb              1   11[BANK0 ] enum E7878
 12312 ;;  timeout         1   12[BANK0 ] unsigned char 
 12313 ;; Auto vars:     Size  Location     Type
 12314 ;;  state           1   16[BANK0 ] enum E7979
 12315 ;;  n               1   17[BANK0 ] unsigned char 
 12316 ;; Return value:  Size  Location     Type
 12317 ;;                  1    wreg      char 
 12318 ;; Registers used:
 12319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12320 ;; Tracked objects:
 12321 ;;		On entry : 0/0
 12322 ;;		On exit  : 0/0
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12325 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12326 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12327 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12328 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12329 ;;Total ram usage:        8 bytes
 12330 ;; Hardware stack levels used:    1
 12331 ;; Hardware stack levels required when called:    4
 12332 ;; This function calls:
 12333 ;;		___wmul
 12334 ;; This function is called by:
 12335 ;;		_menu
 12336 ;; This function uses a non-reentrant model
 12337 ;;
 12338                           
 12339                           
 12340                           ;psect for function _getNextState
 12341  2225                     _getNextState:	
 12342                           
 12343                           ;incstack = 0
 12344                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12345                           ;getNextState@state stored from wreg
 12346  2225  0140               	movlb	0	; select bank0
 12347  2226  00B0               	movwf	getNextState@state
 12348                           
 12349                           ;menuhelper.c: 155: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 156:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 157: {;menuhelper
      +                          .c: 158:  uint8_t n;;menuhelper.c: 161:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 12350  2227  01B1               	clrf	getNextState@n
 12351  2228                     l5405:	
 12352                           
 12353                           ;menuhelper.c: 162:   if ((nextStateTbl[n].state == state)) {
 12354  2228  0831               	movf	getNextState@n,w
 12355  2229  00AD               	movwf	??_getNextState
 12356  222A  01AE               	clrf	??_getNextState+1
 12357  222B  082D               	movf	??_getNextState,w
 12358  222C  00A4               	movwf	___wmul@multiplier
 12359  222D  082E               	movf	??_getNextState+1,w
 12360  222E  00A5               	movwf	___wmul@multiplier+1
 12361  222F  3006               	movlw	6
 12362  2230  00A6               	movwf	___wmul@multiplicand
 12363  2231  3000               	movlw	0
 12364  2232  00A7               	movwf	___wmul@multiplicand+1
 12365  2233  3198  2000  31A2   	fcall	___wmul
 12366  2236  0140               	movlb	0	; select bank0
 12367  2237  0825               	movf	?___wmul+1,w
 12368  2238  0085               	movwf	5
 12369  2239  0824               	movf	?___wmul,w
 12370  223A  0084               	movwf	4
 12371  223B  3000               	movlw	low (_nextStateTbl| (0+32768))
 12372  223C  0784               	addwf	4,f
 12373  223D  30B0               	movlw	high (_nextStateTbl| (0+32768))
 12374  223E  3D85               	addwfc	5,f
 12375  223F  0800               	movf	0,w	;code access
 12376  2240  0630               	xorwf	getNextState@state,w
 12377  2241  1D03               	skipz
 12378  2242  2AE3               	goto	l5437
 12379                           
 12380                           ;menuhelper.c: 164:    if ((nextStateTbl[n].intState == intState) ||
 12381  2243  0831               	movf	getNextState@n,w
 12382  2244  00AD               	movwf	??_getNextState
 12383  2245  01AE               	clrf	??_getNextState+1
 12384  2246  082D               	movf	??_getNextState,w
 12385  2247  00A4               	movwf	___wmul@multiplier
 12386  2248  082E               	movf	??_getNextState+1,w
 12387  2249  00A5               	movwf	___wmul@multiplier+1
 12388  224A  3006               	movlw	6
 12389  224B  00A6               	movwf	___wmul@multiplicand
 12390  224C  3000               	movlw	0
 12391  224D  00A7               	movwf	___wmul@multiplicand+1
 12392  224E  3198  2000  31A2   	fcall	___wmul
 12393  2251  0140               	movlb	0	; select bank0
 12394  2252  0825               	movf	?___wmul+1,w
 12395  2253  0085               	movwf	5
 12396  2254  0824               	movf	?___wmul,w
 12397  2255  0084               	movwf	4
 12398  2256  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 12399  2257  0784               	addwf	4,f
 12400  2258  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 12401  2259  3D85               	addwfc	5,f
 12402  225A  0800               	movf	0,w	;code access
 12403  225B  062A               	xorwf	getNextState@intState,w
 12404  225C  1903               	skipnz
 12405  225D  2A79               	goto	l5411
 12406  225E  0831               	movf	getNextState@n,w
 12407  225F  00AD               	movwf	??_getNextState
 12408  2260  01AE               	clrf	??_getNextState+1
 12409  2261  082D               	movf	??_getNextState,w
 12410  2262  00A4               	movwf	___wmul@multiplier
 12411  2263  082E               	movf	??_getNextState+1,w
 12412  2264  00A5               	movwf	___wmul@multiplier+1
 12413  2265  3006               	movlw	6
 12414  2266  00A6               	movwf	___wmul@multiplicand
 12415  2267  3000               	movlw	0
 12416  2268  00A7               	movwf	___wmul@multiplicand+1
 12417  2269  3198  2000  31A2   	fcall	___wmul
 12418  226C  0140               	movlb	0	; select bank0
 12419  226D  0825               	movf	?___wmul+1,w
 12420  226E  0085               	movwf	5
 12421  226F  0824               	movf	?___wmul,w
 12422  2270  0084               	movwf	4
 12423  2271  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 12424  2272  0784               	addwf	4,f
 12425  2273  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 12426  2274  3D85               	addwfc	5,f
 12427  2275  0012               	moviw fsr0++
 12428  2276  3AFF               	xorlw	255
 12429  2277  1D03               	btfss	3,2
 12430  2278  2AE3               	goto	l5437
 12431  2279                     l5411:	
 12432                           
 12433                           ;menuhelper.c: 165:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 166:     if (
      +                          timeout)
 12434  2279  082C               	movf	getNextState@timeout,w
 12435  227A  1903               	btfsc	3,2
 12436  227B  2A94               	goto	l5417
 12437                           
 12438                           ;menuhelper.c: 167:      return nextStateTbl[n].timeout;
 12439  227C  0831               	movf	getNextState@n,w
 12440  227D  00AD               	movwf	??_getNextState
 12441  227E  01AE               	clrf	??_getNextState+1
 12442  227F  082D               	movf	??_getNextState,w
 12443  2280  00A4               	movwf	___wmul@multiplier
 12444  2281  082E               	movf	??_getNextState+1,w
 12445  2282  00A5               	movwf	___wmul@multiplier+1
 12446  2283  3006               	movlw	6
 12447  2284  00A6               	movwf	___wmul@multiplicand
 12448  2285  3000               	movlw	0
 12449  2286  00A7               	movwf	___wmul@multiplicand+1
 12450  2287  3198  2000         	fcall	___wmul
 12451  2289  0140               	movlb	0	; select bank0
 12452  228A  0825               	movf	?___wmul+1,w
 12453  228B  0085               	movwf	5
 12454  228C  0824               	movf	?___wmul,w
 12455  228D  0084               	movwf	4
 12456  228E  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
 12457  228F  0784               	addwf	4,f
 12458  2290  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
 12459  2291  3D85               	addwfc	5,f
 12460  2292  0800               	movf	0,w	;code access
 12461  2293  0008               	return
 12462  2294                     l5417:	
 12463                           
 12464                           ;menuhelper.c: 169:     if (pb == PB_SHORT)
 12465  2294  032B               	decf	getNextState@pb,w
 12466  2295  1D03               	btfss	3,2
 12467  2296  2AAF               	goto	l5425
 12468                           
 12469                           ;menuhelper.c: 170:      return nextStateTbl[n].pbShort;
 12470  2297  0831               	movf	getNextState@n,w
 12471  2298  00AD               	movwf	??_getNextState
 12472  2299  01AE               	clrf	??_getNextState+1
 12473  229A  082D               	movf	??_getNextState,w
 12474  229B  00A4               	movwf	___wmul@multiplier
 12475  229C  082E               	movf	??_getNextState+1,w
 12476  229D  00A5               	movwf	___wmul@multiplier+1
 12477  229E  3006               	movlw	6
 12478  229F  00A6               	movwf	___wmul@multiplicand
 12479  22A0  3000               	movlw	0
 12480  22A1  00A7               	movwf	___wmul@multiplicand+1
 12481  22A2  3198  2000         	fcall	___wmul
 12482  22A4  0140               	movlb	0	; select bank0
 12483  22A5  0825               	movf	?___wmul+1,w
 12484  22A6  0085               	movwf	5
 12485  22A7  0824               	movf	?___wmul,w
 12486  22A8  0084               	movwf	4
 12487  22A9  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 12488  22AA  0784               	addwf	4,f
 12489  22AB  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
 12490  22AC  3D85               	addwfc	5,f
 12491  22AD  0800               	movf	0,w	;code access
 12492  22AE  0008               	return
 12493  22AF                     l5425:	
 12494  22AF  3002               	movlw	2
 12495  22B0  062B               	xorwf	getNextState@pb,w
 12496  22B1  1D03               	btfss	3,2
 12497  22B2  2ACB               	goto	l5433
 12498                           
 12499                           ;menuhelper.c: 172:      return nextStateTbl[n].pbLong;
 12500  22B3  0831               	movf	getNextState@n,w
 12501  22B4  00AD               	movwf	??_getNextState
 12502  22B5  01AE               	clrf	??_getNextState+1
 12503  22B6  082D               	movf	??_getNextState,w
 12504  22B7  00A4               	movwf	___wmul@multiplier
 12505  22B8  082E               	movf	??_getNextState+1,w
 12506  22B9  00A5               	movwf	___wmul@multiplier+1
 12507  22BA  3006               	movlw	6
 12508  22BB  00A6               	movwf	___wmul@multiplicand
 12509  22BC  3000               	movlw	0
 12510  22BD  00A7               	movwf	___wmul@multiplicand+1
 12511  22BE  3198  2000         	fcall	___wmul
 12512  22C0  0140               	movlb	0	; select bank0
 12513  22C1  0825               	movf	?___wmul+1,w
 12514  22C2  0085               	movwf	5
 12515  22C3  0824               	movf	?___wmul,w
 12516  22C4  0084               	movwf	4
 12517  22C5  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 12518  22C6  0784               	addwf	4,f
 12519  22C7  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
 12520  22C8  3D85               	addwfc	5,f
 12521  22C9  0800               	movf	0,w	;code access
 12522  22CA  0008               	return
 12523  22CB                     l5433:	
 12524                           
 12525                           ;menuhelper.c: 174:      return nextStateTbl[n].noAction;
 12526  22CB  0831               	movf	getNextState@n,w
 12527  22CC  00AD               	movwf	??_getNextState
 12528  22CD  01AE               	clrf	??_getNextState+1
 12529  22CE  082D               	movf	??_getNextState,w
 12530  22CF  00A4               	movwf	___wmul@multiplier
 12531  22D0  082E               	movf	??_getNextState+1,w
 12532  22D1  00A5               	movwf	___wmul@multiplier+1
 12533  22D2  3006               	movlw	6
 12534  22D3  00A6               	movwf	___wmul@multiplicand
 12535  22D4  3000               	movlw	0
 12536  22D5  00A7               	movwf	___wmul@multiplicand+1
 12537  22D6  3198  2000         	fcall	___wmul
 12538  22D8  0140               	movlb	0	; select bank0
 12539  22D9  0825               	movf	?___wmul+1,w
 12540  22DA  0085               	movwf	5
 12541  22DB  0824               	movf	?___wmul,w
 12542  22DC  0084               	movwf	4
 12543  22DD  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 12544  22DE  0784               	addwf	4,f
 12545  22DF  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
 12546  22E0  3D85               	addwfc	5,f
 12547  22E1  0800               	movf	0,w	;code access
 12548  22E2  0008               	return
 12549  22E3                     l5437:	
 12550                           
 12551                           ;menuhelper.c: 177:  }
 12552  22E3  3001               	movlw	1
 12553  22E4  00AD               	movwf	??_getNextState
 12554  22E5  082D               	movf	??_getNextState,w
 12555  22E6  07B1               	addwf	getNextState@n,f
 12556  22E7  300E               	movlw	14
 12557  22E8  0231               	subwf	getNextState@n,w
 12558  22E9  1C03               	skipc
 12559  22EA  2A28               	goto	l5405
 12560                           
 12561                           ;menuhelper.c: 178:  return -1;
 12562  22EB  30FF               	movlw	255
 12563  22EC  0008               	return
 12564  22ED                     __end_of_getNextState:	
 12565                           
 12566                           	psect	text23
 12567  1001                     __ptext23:	
 12568 ;; *************** function _returnToPage *****************
 12569 ;; Defined at:
 12570 ;;		line 226 in file "menuhelper.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;  page            1    wreg     unsigned char 
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;  page            1   13[BANK0 ] unsigned char 
 12575 ;;  n               1   14[BANK0 ] unsigned char 
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  1    wreg      void 
 12578 ;; Registers used:
 12579 ;;		wreg, status,2, status,0, pclath, cstack
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12588 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12589 ;;Total ram usage:        4 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    7
 12592 ;; This function calls:
 12593 ;;		_OLED_command
 12594 ;;		___wmul
 12595 ;; This function is called by:
 12596 ;;		_statusView
 12597 ;;		_channelView
 12598 ;;		_channelSetup
 12599 ;;		_setOutputPower
 12600 ;;		_setLensDia
 12601 ;;		_setup
 12602 ;;		_setDPOffset
 12603 ;;		_setSkyTemp
 12604 ;;		_setFudgeFactor
 12605 ;; This function uses a non-reentrant model
 12606 ;;
 12607                           
 12608                           
 12609                           ;psect for function _returnToPage
 12610  1001                     _returnToPage:	
 12611                           
 12612                           ;incstack = 0
 12613                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 12614                           ;returnToPage@page stored from wreg
 12615  1001  0140               	movlb	0	; select bank0
 12616  1002  00AD               	movwf	returnToPage@page
 12617                           
 12618                           ;menuhelper.c: 226: void returnToPage(uint8_t page);menuhelper.c: 227: {;menuhelper.c: 2
      +                          28:  uint8_t n;;menuhelper.c: 230:  if (! g_screenRefresh)
 12619  1003  0141               	movlb	1	; select bank1
 12620  1004  086D               	movf	_g_screenRefresh^(0+128),w
 12621  1005  1903               	btfsc	3,2
 12622  1006  0008               	return
 12623                           
 12624                           ;menuhelper.c: 232:  OLED_command(0x01);
 12625  1007  3001               	movlw	1
 12626  1008  31B4  24EA  3190   	fcall	_OLED_command
 12627                           
 12628                           ;menuhelper.c: 233:  OLED_command(0x02);
 12629  100B  3002               	movlw	2
 12630  100C  31B4  24EA  3190   	fcall	_OLED_command
 12631                           
 12632                           ;menuhelper.c: 234:  for(n = 0; n < 12 * page; n++) {
 12633  100F  0140               	movlb	0	; select bank0
 12634  1010  01AE               	clrf	returnToPage@n
 12635  1011                     l4731:	
 12636  1011  082D               	movf	returnToPage@page,w
 12637  1012  00AB               	movwf	??_returnToPage
 12638  1013  01AC               	clrf	??_returnToPage+1
 12639  1014  082B               	movf	??_returnToPage,w
 12640  1015  00A4               	movwf	___wmul@multiplier
 12641  1016  082C               	movf	??_returnToPage+1,w
 12642  1017  00A5               	movwf	___wmul@multiplier+1
 12643  1018  300C               	movlw	12
 12644  1019  00A6               	movwf	___wmul@multiplicand
 12645  101A  3000               	movlw	0
 12646  101B  00A7               	movwf	___wmul@multiplicand+1
 12647  101C  3198  2000  3190   	fcall	___wmul
 12648  101F  0140               	movlb	0	; select bank0
 12649  1020  0825               	movf	?___wmul+1,w
 12650  1021  3A80               	xorlw	128
 12651  1022  3C80               	sublw	128
 12652  1023  1D03               	skipz
 12653  1024  2827               	goto	u5625
 12654  1025  0824               	movf	?___wmul,w
 12655  1026  022E               	subwf	returnToPage@n,w
 12656  1027                     u5625:	
 12657  1027  1803               	btfsc	3,0
 12658  1028  0008               	return
 12659                           
 12660                           ;menuhelper.c: 235:   OLED_command(0x10 | 0x08 | 0x00);
 12661  1029  3018               	movlw	24
 12662  102A  31B4  24EA  3190   	fcall	_OLED_command
 12663                           
 12664                           ;menuhelper.c: 236:  }
 12665  102D  3001               	movlw	1
 12666  102E  0140               	movlb	0	; select bank0
 12667  102F  00AB               	movwf	??_returnToPage
 12668  1030  082B               	movf	??_returnToPage,w
 12669  1031  07AE               	addwf	returnToPage@n,f
 12670  1032  2811               	goto	l4731
 12671  1033                     __end_of_returnToPage:	
 12672                           
 12673                           	psect	text24
 12674  2BAF                     __ptext24:	
 12675 ;; *************** function _paging *****************
 12676 ;; Defined at:
 12677 ;;		line 185 in file "menuhelper.c"
 12678 ;; Parameters:    Size  Location     Type
 12679 ;;  currentPage     1    wreg     unsigned char 
 12680 ;;  lastPage        1   11[BANK0 ] const unsigned char 
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;  currentPage     1   14[BANK0 ] unsigned char 
 12683 ;;  n               1   16[BANK0 ] unsigned char 
 12684 ;;  dir             1   15[BANK0 ] enum E7874
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      unsigned char 
 12687 ;; Registers used:
 12688 ;;		wreg, status,2, status,0, pclath, cstack
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12694 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12695 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12696 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12697 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12698 ;;Total ram usage:        6 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:    8
 12701 ;; This function calls:
 12702 ;;		_OLED_scrollDisplayLeft
 12703 ;;		_OLED_scrollDisplayRight
 12704 ;;		_getRotDir
 12705 ;; This function is called by:
 12706 ;;		_statusView
 12707 ;;		_channelView
 12708 ;;		_channelSetup
 12709 ;;		_setup
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           
 12714                           ;psect for function _paging
 12715  2BAF                     _paging:	
 12716                           
 12717                           ;incstack = 0
 12718                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 12719                           ;paging@currentPage stored from wreg
 12720  2BAF  0140               	movlb	0	; select bank0
 12721  2BB0  00AE               	movwf	paging@currentPage
 12722                           
 12723                           ;menuhelper.c: 185: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 186: {;menuhelper.c: 187:  uint8_t n;;menuhelper.c: 188:  enum e_direction dir;;me
      +                          nuhelper.c: 189:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 192:  PIE0bi
      +                          ts.IOCIE = 0;
 12724  2BB1  014E               	movlb	14	; select bank14
 12725  2BB2  1216               	bcf	22,4	;volatile
 12726                           
 12727                           ;menuhelper.c: 194:  dir = getRotDir();
 12728  2BB3  31B5  2514  31AB   	fcall	_getRotDir
 12729  2BB6  0140               	movlb	0	; select bank0
 12730  2BB7  00AC               	movwf	??_paging
 12731  2BB8  082C               	movf	??_paging,w
 12732  2BB9  00AF               	movwf	paging@dir
 12733                           
 12734                           ;menuhelper.c: 197:  if (dir == lastDir) {
 12735  2BBA  082F               	movf	paging@dir,w
 12736  2BBB  0143               	movlb	3	; select bank3
 12737  2BBC  0666               	xorwf	paging@lastDir^(0+384),w
 12738  2BBD  1D03               	skipz
 12739  2BBE  2C0F               	goto	l7241
 12740                           
 12741                           ;menuhelper.c: 199:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 12742  2BBF  0140               	movlb	0	; select bank0
 12743  2BC0  032F               	decf	paging@dir,w
 12744  2BC1  1D03               	btfss	3,2
 12745  2BC2  2BEF               	goto	l7221
 12746  2BC3  082B               	movf	paging@lastPage,w
 12747  2BC4  3EFF               	addlw	255
 12748  2BC5  00AC               	movwf	??_paging
 12749  2BC6  30FF               	movlw	255
 12750  2BC7  1803               	skipnc
 12751  2BC8  3000               	movlw	0
 12752  2BC9  00AD               	movwf	??_paging+1
 12753  2BCA  082D               	movf	??_paging+1,w
 12754  2BCB  3A80               	xorlw	128
 12755  2BCC  3C80               	sublw	128
 12756  2BCD  1D03               	skipz
 12757  2BCE  2BD1               	goto	u9595
 12758  2BCF  082C               	movf	??_paging,w
 12759  2BD0  022E               	subwf	paging@currentPage,w
 12760  2BD1                     u9595:	
 12761  2BD1  1803               	skipnc
 12762  2BD2  2BEF               	goto	l7221
 12763                           
 12764                           ;menuhelper.c: 200:    currentPage++;
 12765  2BD3  3001               	movlw	1
 12766  2BD4  0140               	movlb	0	; select bank0
 12767  2BD5  00AC               	movwf	??_paging
 12768  2BD6  082C               	movf	??_paging,w
 12769  2BD7  07AE               	addwf	paging@currentPage,f
 12770                           
 12771                           ;menuhelper.c: 201:    for(n = 0; n < 12; n++) {
 12772  2BD8  01B0               	clrf	paging@n
 12773  2BD9                     l7213:	
 12774                           
 12775                           ;menuhelper.c: 202:     OLED_scrollDisplayLeft();
 12776  2BD9  31B4  24A2  31AB   	fcall	_OLED_scrollDisplayLeft
 12777                           
 12778                           ;menuhelper.c: 203:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 12779  2BDC  301A               	movlw	26
 12780  2BDD  0140               	movlb	0	; select bank0
 12781  2BDE  00AC               	movwf	??_paging
 12782  2BDF  30F8               	movlw	248
 12783  2BE0                     u11217:	
 12784  2BE0  0B89               	decfsz	9,f
 12785  2BE1  2BE0               	goto	u11217
 12786  2BE2  0BAC               	decfsz	??_paging,f
 12787  2BE3  2BE0               	goto	u11217
 12788  2BE4  0000               	nop
 12789                           
 12790                           ;menuhelper.c: 204:    }
 12791  2BE5  3001               	movlw	1
 12792  2BE6  0140               	movlb	0	; select bank0
 12793  2BE7  00AC               	movwf	??_paging
 12794  2BE8  082C               	movf	??_paging,w
 12795  2BE9  07B0               	addwf	paging@n,f
 12796  2BEA  300C               	movlw	12
 12797  2BEB  0230               	subwf	paging@n,w
 12798  2BEC  1803               	btfsc	3,0
 12799  2BED  2C0F               	goto	l7241
 12800  2BEE  2BD9               	goto	l7213
 12801  2BEF                     l7221:	
 12802  2BEF  3002               	movlw	2
 12803  2BF0  0140               	movlb	0	; select bank0
 12804  2BF1  062F               	xorwf	paging@dir,w
 12805  2BF2  1D03               	btfss	3,2
 12806  2BF3  2C0F               	goto	l7241
 12807  2BF4  082E               	movf	paging@currentPage,w
 12808  2BF5  1903               	btfsc	3,2
 12809  2BF6  2C0F               	goto	l7241
 12810                           
 12811                           ;menuhelper.c: 208:    currentPage--;
 12812  2BF7  3001               	movlw	1
 12813  2BF8  02AE               	subwf	paging@currentPage,f
 12814                           
 12815                           ;menuhelper.c: 209:    for(n = 0; n < 12; n++) {
 12816  2BF9  01B0               	clrf	paging@n
 12817  2BFA                     l7233:	
 12818                           
 12819                           ;menuhelper.c: 210:     OLED_scrollDisplayRight();
 12820  2BFA  31B4  24A6  31AB   	fcall	_OLED_scrollDisplayRight
 12821                           
 12822                           ;menuhelper.c: 211:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 12823  2BFD  301A               	movlw	26
 12824  2BFE  0140               	movlb	0	; select bank0
 12825  2BFF  00AC               	movwf	??_paging
 12826  2C00  30F8               	movlw	248
 12827  2C01                     u11227:	
 12828  2C01  0B89               	decfsz	9,f
 12829  2C02  2C01               	goto	u11227
 12830  2C03  0BAC               	decfsz	??_paging,f
 12831  2C04  2C01               	goto	u11227
 12832  2C05  0000               	nop
 12833                           
 12834                           ;menuhelper.c: 212:    }
 12835  2C06  3001               	movlw	1
 12836  2C07  0140               	movlb	0	; select bank0
 12837  2C08  00AC               	movwf	??_paging
 12838  2C09  082C               	movf	??_paging,w
 12839  2C0A  07B0               	addwf	paging@n,f
 12840  2C0B  300C               	movlw	12
 12841  2C0C  0230               	subwf	paging@n,w
 12842  2C0D  1C03               	skipc
 12843  2C0E  2BFA               	goto	l7233
 12844  2C0F                     l7241:	
 12845                           
 12846                           ;menuhelper.c: 216:  lastDir = dir;
 12847  2C0F  0140               	movlb	0	; select bank0
 12848  2C10  082F               	movf	paging@dir,w
 12849  2C11  00AC               	movwf	??_paging
 12850  2C12  082C               	movf	??_paging,w
 12851  2C13  0143               	movlb	3	; select bank3
 12852  2C14  00E6               	movwf	paging@lastDir^(0+384)
 12853                           
 12854                           ;menuhelper.c: 217:  PIE0bits.IOCIE = 1;
 12855  2C15  014E               	movlb	14	; select bank14
 12856  2C16  1616               	bsf	22,4	;volatile
 12857                           
 12858                           ;menuhelper.c: 219:  return currentPage;
 12859  2C17  0140               	movlb	0	; select bank0
 12860  2C18  082E               	movf	paging@currentPage,w
 12861  2C19  0008               	return
 12862  2C1A                     __end_of_paging:	
 12863                           
 12864                           	psect	text25
 12865  3514                     __ptext25:	
 12866 ;; *************** function _getRotDir *****************
 12867 ;; Defined at:
 12868 ;;		line 79 in file "inputs.c"
 12869 ;; Parameters:    Size  Location     Type
 12870 ;;		None
 12871 ;; Auto vars:     Size  Location     Type
 12872 ;;  ret             1    5[BANK0 ] enum E7874
 12873 ;; Return value:  Size  Location     Type
 12874 ;;                  1    wreg      enum E7874
 12875 ;; Registers used:
 12876 ;;		wreg, status,2
 12877 ;; Tracked objects:
 12878 ;;		On entry : 0/0
 12879 ;;		On exit  : 0/0
 12880 ;;		Unchanged: 0/0
 12881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12883 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12884 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12886 ;;Total ram usage:        2 bytes
 12887 ;; Hardware stack levels used:    1
 12888 ;; Hardware stack levels required when called:    3
 12889 ;; This function calls:
 12890 ;;		Nothing
 12891 ;; This function is called by:
 12892 ;;		_spinInput
 12893 ;;		_paging
 12894 ;; This function uses a non-reentrant model
 12895 ;;
 12896                           
 12897                           
 12898                           ;psect for function _getRotDir
 12899  3514                     _getRotDir:	
 12900                           
 12901                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 12902                           
 12903                           ;incstack = 0
 12904                           ; Regs used in _getRotDir: [wreg+status,2]
 12905  3514  0143               	movlb	3	; select bank3
 12906  3515  086C               	movf	_rotDir^(0+384),w	;volatile
 12907  3516  0140               	movlb	0	; select bank0
 12908  3517  00A4               	movwf	??_getRotDir
 12909  3518  0824               	movf	??_getRotDir,w
 12910  3519  00A5               	movwf	getRotDir@ret
 12911                           
 12912                           ;inputs.c: 82:  rotDir = ROT_STOP;
 12913  351A  0143               	movlb	3	; select bank3
 12914  351B  01EC               	clrf	_rotDir^(0+384)	;volatile
 12915                           
 12916                           ;inputs.c: 83:  return ret;
 12917  351C  0140               	movlb	0	; select bank0
 12918  351D  0825               	movf	getRotDir@ret,w
 12919  351E  0008               	return
 12920  351F                     __end_of_getRotDir:	
 12921                           
 12922                           	psect	text26
 12923  34A6                     __ptext26:	
 12924 ;; *************** function _OLED_scrollDisplayRight *****************
 12925 ;; Defined at:
 12926 ;;		line 137 in file "oled.c"
 12927 ;; Parameters:    Size  Location     Type
 12928 ;;		None
 12929 ;; Auto vars:     Size  Location     Type
 12930 ;;		None
 12931 ;; Return value:  Size  Location     Type
 12932 ;;                  1    wreg      void 
 12933 ;; Registers used:
 12934 ;;		wreg, status,2, status,0, pclath, cstack
 12935 ;; Tracked objects:
 12936 ;;		On entry : 0/0
 12937 ;;		On exit  : 0/0
 12938 ;;		Unchanged: 0/0
 12939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12944 ;;Total ram usage:        0 bytes
 12945 ;; Hardware stack levels used:    1
 12946 ;; Hardware stack levels required when called:    7
 12947 ;; This function calls:
 12948 ;;		_OLED_command
 12949 ;; This function is called by:
 12950 ;;		_paging
 12951 ;; This function uses a non-reentrant model
 12952 ;;
 12953                           
 12954                           
 12955                           ;psect for function _OLED_scrollDisplayRight
 12956  34A6                     _OLED_scrollDisplayRight:	
 12957                           
 12958                           ;oled.c: 139:  OLED_command(0x10 | 0x08 | 0x04);
 12959                           
 12960                           ;incstack = 0
 12961                           ; Regs used in _OLED_scrollDisplayRight: [wreg+status,2+status,0+pclath+cstack]
 12962  34A6  301C               	movlw	28
 12963  34A7  31B4  24EA         	fcall	_OLED_command
 12964  34A9  0008               	return
 12965  34AA                     __end_of_OLED_scrollDisplayRight:	
 12966                           
 12967                           	psect	text27
 12968  34A2                     __ptext27:	
 12969 ;; *************** function _OLED_scrollDisplayLeft *****************
 12970 ;; Defined at:
 12971 ;;		line 132 in file "oled.c"
 12972 ;; Parameters:    Size  Location     Type
 12973 ;;		None
 12974 ;; Auto vars:     Size  Location     Type
 12975 ;;		None
 12976 ;; Return value:  Size  Location     Type
 12977 ;;                  1    wreg      void 
 12978 ;; Registers used:
 12979 ;;		wreg, status,2, status,0, pclath, cstack
 12980 ;; Tracked objects:
 12981 ;;		On entry : 0/0
 12982 ;;		On exit  : 0/0
 12983 ;;		Unchanged: 0/0
 12984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12989 ;;Total ram usage:        0 bytes
 12990 ;; Hardware stack levels used:    1
 12991 ;; Hardware stack levels required when called:    7
 12992 ;; This function calls:
 12993 ;;		_OLED_command
 12994 ;; This function is called by:
 12995 ;;		_paging
 12996 ;; This function uses a non-reentrant model
 12997 ;;
 12998                           
 12999                           
 13000                           ;psect for function _OLED_scrollDisplayLeft
 13001  34A2                     _OLED_scrollDisplayLeft:	
 13002                           
 13003                           ;oled.c: 134:  OLED_command(0x10 | 0x08 | 0x00);
 13004                           
 13005                           ;incstack = 0
 13006                           ; Regs used in _OLED_scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
 13007  34A2  3018               	movlw	24
 13008  34A3  31B4  24EA         	fcall	_OLED_command
 13009  34A5  0008               	return
 13010  34A6                     __end_of_OLED_scrollDisplayLeft:	
 13011                           
 13012                           	psect	text28
 13013  2B46                     __ptext28:	
 13014 ;; *************** function _itoa *****************
 13015 ;; Defined at:
 13016 ;;		line 38 in file "common.c"
 13017 ;; Parameters:    Size  Location     Type
 13018 ;;  str             2   22[BANK1 ] PTR unsigned char 
 13019 ;;		 -> systemCheck@str(3), str(10), 
 13020 ;;  value           1   24[BANK1 ] unsigned char 
 13021 ;;  width           1   25[BANK1 ] unsigned char 
 13022 ;; Auto vars:     Size  Location     Type
 13023 ;;		None
 13024 ;; Return value:  Size  Location     Type
 13025 ;;                  1    wreg      void 
 13026 ;; Registers used:
 13027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13028 ;; Tracked objects:
 13029 ;;		On entry : 0/0
 13030 ;;		On exit  : 0/0
 13031 ;;		Unchanged: 0/0
 13032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13033 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13035 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13036 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13037 ;;Total ram usage:       11 bytes
 13038 ;; Hardware stack levels used:    1
 13039 ;; Hardware stack levels required when called:    4
 13040 ;; This function calls:
 13041 ;;		___awdiv
 13042 ;;		___awmod
 13043 ;; This function is called by:
 13044 ;;		_statusView
 13045 ;;		_channelView
 13046 ;;		_channelSetup
 13047 ;;		_setOutputPower
 13048 ;;		_systemCheck
 13049 ;; This function uses a non-reentrant model
 13050 ;;
 13051                           
 13052                           
 13053                           ;psect for function _itoa
 13054  2B46                     _itoa:	
 13055                           
 13056                           ;common.c: 38: void itoa(char *str, uint8_t value, uint8_t width);common.c: 39: {;common
      +                          .c: 40:  str[width] = '\0';
 13057                           
 13058                           ;incstack = 0
 13059                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13060  2B46  0141               	movlb	1	; select bank1
 13061  2B47  0839               	movf	itoa@width^(0+128),w
 13062  2B48  00BA               	movwf	??_itoa^(0+128)
 13063  2B49  01BB               	clrf	(??_itoa^(0+128)+1)
 13064  2B4A  083A               	movf	??_itoa^(0+128),w
 13065  2B4B  0736               	addwf	itoa@str^(0+128),w
 13066  2B4C  0086               	movwf	6
 13067  2B4D  083B               	movf	(??_itoa+1)^(0+128),w
 13068  2B4E  3D37               	addwfc	(itoa@str+1)^(0+128),w
 13069  2B4F  0087               	movwf	7
 13070  2B50  0181               	clrf	1
 13071  2B51                     l7187:	
 13072                           ;common.c: 41:  while (value && width > 0) {
 13073                           
 13074                           
 13075                           ;common.c: 41:  while (value && width > 0) {
 13076  2B51  0838               	movf	itoa@value^(0+128),w
 13077  2B52  1903               	btfsc	3,2
 13078  2B53  2BAB               	goto	l7193
 13079  2B54  0839               	movf	itoa@width^(0+128),w
 13080  2B55  1903               	btfsc	3,2
 13081  2B56  2BAB               	goto	l7193
 13082                           
 13083                           ;common.c: 42:   str[--width] = (value % 10) + '0';
 13084  2B57  300A               	movlw	10
 13085  2B58  0140               	movlb	0	; select bank0
 13086  2B59  00A4               	movwf	___awmod@divisor
 13087  2B5A  3000               	movlw	0
 13088  2B5B  00A5               	movwf	___awmod@divisor+1
 13089  2B5C  0141               	movlb	1	; select bank1
 13090  2B5D  0838               	movf	itoa@value^(0+128),w
 13091  2B5E  00BA               	movwf	??_itoa^(0+128)
 13092  2B5F  01BB               	clrf	(??_itoa^(0+128)+1)
 13093  2B60  083A               	movf	??_itoa^(0+128),w
 13094  2B61  0140               	movlb	0	; select bank0
 13095  2B62  00A6               	movwf	___awmod@dividend
 13096  2B63  0141               	movlb	1	; select bank1
 13097  2B64  083B               	movf	(??_itoa+1)^(0+128),w
 13098  2B65  0140               	movlb	0	; select bank0
 13099  2B66  00A7               	movwf	___awmod@dividend+1
 13100  2B67  31A8  20D7  31AB   	fcall	___awmod
 13101  2B6A  0140               	movlb	0	; select bank0
 13102  2B6B  0824               	movf	?___awmod,w
 13103  2B6C  3E30               	addlw	48
 13104  2B6D  0141               	movlb	1	; select bank1
 13105  2B6E  00BC               	movwf	(??_itoa+2)^(0+128)
 13106  2B6F  3001               	movlw	1
 13107  2B70  02B9               	subwf	itoa@width^(0+128),f
 13108  2B71  0839               	movf	itoa@width^(0+128),w
 13109  2B72  00BD               	movwf	(??_itoa+3)^(0+128)
 13110  2B73  01BE               	clrf	((??_itoa+3)^(0+128)+1)
 13111  2B74  083D               	movf	(??_itoa+3)^(0+128),w
 13112  2B75  0736               	addwf	itoa@str^(0+128),w
 13113  2B76  00BF               	movwf	(??_itoa+5)^(0+128)
 13114  2B77  083E               	movf	(??_itoa+4)^(0+128),w
 13115  2B78  3D37               	addwfc	(itoa@str+1)^(0+128),w
 13116  2B79  00C0               	movwf	(??_itoa+6)^(0+128)
 13117  2B7A  083F               	movf	(??_itoa+5)^(0+128),w
 13118  2B7B  0086               	movwf	6
 13119  2B7C  0840               	movf	(??_itoa+6)^(0+128),w
 13120  2B7D  0087               	movwf	7
 13121  2B7E  083C               	movf	(??_itoa+2)^(0+128),w
 13122  2B7F  0081               	movwf	1
 13123                           
 13124                           ;common.c: 43:   value = value / 10;
 13125  2B80  300A               	movlw	10
 13126  2B81  0140               	movlb	0	; select bank0
 13127  2B82  00A4               	movwf	___awdiv@divisor
 13128  2B83  3000               	movlw	0
 13129  2B84  00A5               	movwf	___awdiv@divisor+1
 13130  2B85  0141               	movlb	1	; select bank1
 13131  2B86  0838               	movf	itoa@value^(0+128),w
 13132  2B87  00BA               	movwf	??_itoa^(0+128)
 13133  2B88  01BB               	clrf	(??_itoa^(0+128)+1)
 13134  2B89  083A               	movf	??_itoa^(0+128),w
 13135  2B8A  0140               	movlb	0	; select bank0
 13136  2B8B  00A6               	movwf	___awdiv@dividend
 13137  2B8C  0141               	movlb	1	; select bank1
 13138  2B8D  083B               	movf	(??_itoa+1)^(0+128),w
 13139  2B8E  0140               	movlb	0	; select bank0
 13140  2B8F  00A7               	movwf	___awdiv@dividend+1
 13141  2B90  31AA  228B  31AB   	fcall	___awdiv
 13142  2B93  0140               	movlb	0	; select bank0
 13143  2B94  0824               	movf	?___awdiv,w
 13144  2B95  0141               	movlb	1	; select bank1
 13145  2B96  00BC               	movwf	(??_itoa+2)^(0+128)
 13146  2B97  083C               	movf	(??_itoa+2)^(0+128),w
 13147  2B98  00B8               	movwf	itoa@value^(0+128)
 13148  2B99  2B51               	goto	l7187
 13149  2B9A                     l7191:	
 13150                           
 13151                           ;common.c: 46:   str[--width] = ' ';
 13152  2B9A  3001               	movlw	1
 13153  2B9B  02B9               	subwf	itoa@width^(0+128),f
 13154  2B9C  0839               	movf	itoa@width^(0+128),w
 13155  2B9D  00BA               	movwf	??_itoa^(0+128)
 13156  2B9E  01BB               	clrf	(??_itoa^(0+128)+1)
 13157  2B9F  083A               	movf	??_itoa^(0+128),w
 13158  2BA0  0736               	addwf	itoa@str^(0+128),w
 13159  2BA1  00BC               	movwf	(??_itoa+2)^(0+128)
 13160  2BA2  083B               	movf	(??_itoa+1)^(0+128),w
 13161  2BA3  3D37               	addwfc	(itoa@str+1)^(0+128),w
 13162  2BA4  00BD               	movwf	(??_itoa+3)^(0+128)
 13163  2BA5  083C               	movf	(??_itoa+2)^(0+128),w
 13164  2BA6  0086               	movwf	6
 13165  2BA7  083D               	movf	(??_itoa+3)^(0+128),w
 13166  2BA8  0087               	movwf	7
 13167  2BA9  3020               	movlw	32
 13168  2BAA  0081               	movwf	1
 13169  2BAB                     l7193:	
 13170                           
 13171                           ;common.c: 45:  while(width)
 13172  2BAB  0839               	movf	itoa@width^(0+128),w
 13173  2BAC  1903               	btfsc	3,2
 13174  2BAD  0008               	return
 13175  2BAE  2B9A               	goto	l7191
 13176  2BAF                     __end_of_itoa:	
 13177                           
 13178                           	psect	text29
 13179  2515                     __ptext29:	
 13180 ;; *************** function _ftoa *****************
 13181 ;; Defined at:
 13182 ;;		line 3 in file "common.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;  str             1    wreg     PTR unsigned char 
 13185 ;;		 -> str(10), 
 13186 ;;  fValue          4   25[BANK1 ] float 
 13187 ;;  width           1   29[BANK1 ] unsigned char 
 13188 ;;  prec            1   30[BANK1 ] unsigned char 
 13189 ;; Auto vars:     Size  Location     Type
 13190 ;;  str             1   38[BANK1 ] PTR unsigned char 
 13191 ;;		 -> str(10), 
 13192 ;;  pos             1   37[BANK1 ] unsigned char 
 13193 ;;  w               1   36[BANK1 ] unsigned char 
 13194 ;;  intValue        1   35[BANK1 ] unsigned char 
 13195 ;;  sign            1   34[BANK1 ] unsigned char 
 13196 ;;  len             1   33[BANK1 ] unsigned char 
 13197 ;; Return value:  Size  Location     Type
 13198 ;;                  1    wreg      void 
 13199 ;; Registers used:
 13200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13201 ;; Tracked objects:
 13202 ;;		On entry : 0/0
 13203 ;;		On exit  : 0/0
 13204 ;;		Unchanged: 0/0
 13205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13206 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13207 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13208 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13209 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13210 ;;Total ram usage:       14 bytes
 13211 ;; Hardware stack levels used:    1
 13212 ;; Hardware stack levels required when called:    5
 13213 ;; This function calls:
 13214 ;;		___fldiv
 13215 ;;		___flge
 13216 ;;		___flmul
 13217 ;;		___flsub
 13218 ;;		___fltol
 13219 ;;		___wmul
 13220 ;;		___xxtofl
 13221 ;; This function is called by:
 13222 ;;		_statusView
 13223 ;;		_channelView
 13224 ;;		_channelSetup
 13225 ;;		_setOutputPower
 13226 ;;		_setLensDia
 13227 ;;		_setup
 13228 ;;		_setDPOffset
 13229 ;;		_setSkyTemp
 13230 ;;		_setFudgeFactor
 13231 ;; This function uses a non-reentrant model
 13232 ;;
 13233                           
 13234                           
 13235                           ;psect for function _ftoa
 13236  2515                     _ftoa:	
 13237                           
 13238                           ;incstack = 0
 13239                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13240                           ;ftoa@str stored from wreg
 13241  2515  0141               	movlb	1	; select bank1
 13242  2516  00C6               	movwf	ftoa@str^(0+128)
 13243                           
 13244                           ;common.c: 3: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          4: {;common.c: 5:  uint8_t len = 1;
 13245  2517  01C1               	clrf	ftoa@len^(0+128)
 13246  2518  0AC1               	incf	ftoa@len^(0+128),f
 13247                           
 13248                           ;common.c: 7:  uint8_t pos = 0;
 13249  2519  01C5               	clrf	ftoa@pos^(0+128)
 13250                           
 13251                           ;common.c: 9:  uint8_t sign = 0;
 13252  251A  01C2               	clrf	ftoa@sign^(0+128)
 13253                           
 13254                           ;common.c: 11:  if (fValue < 0) {
 13255  251B  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13256  251C  00B0               	movwf	(___flge@ff1+3)^(0+128)
 13257  251D  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13258  251E  00AF               	movwf	(___flge@ff1+2)^(0+128)
 13259  251F  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13260  2520  00AE               	movwf	(___flge@ff1+1)^(0+128)
 13261  2521  0839               	movf	ftoa@fValue^(0+128),w
 13262  2522  00AD               	movwf	___flge@ff1^(0+128)
 13263  2523  3000               	movlw	0
 13264  2524  00B4               	movwf	(___flge@ff2+3)^(0+128)
 13265  2525  3000               	movlw	0
 13266  2526  00B3               	movwf	(___flge@ff2+2)^(0+128)
 13267  2527  3000               	movlw	0
 13268  2528  00B2               	movwf	(___flge@ff2+1)^(0+128)
 13269  2529  3000               	movlw	0
 13270  252A  00B1               	movwf	___flge@ff2^(0+128)
 13271  252B  31AD  25D6  31A5   	fcall	___flge
 13272  252E  1803               	btfsc	3,0
 13273  252F  2D60               	goto	l7145
 13274                           
 13275                           ;common.c: 12:   fValue *= -1;
 13276  2530  30BF               	movlw	191
 13277  2531  0140               	movlb	0	; select bank0
 13278  2532  00BB               	movwf	___flmul@b+3
 13279  2533  3080               	movlw	128
 13280  2534  00BA               	movwf	___flmul@b+2
 13281  2535  3000               	movlw	0
 13282  2536  00B9               	movwf	___flmul@b+1
 13283  2537  3000               	movlw	0
 13284  2538  00B8               	movwf	___flmul@b
 13285  2539  0141               	movlb	1	; select bank1
 13286  253A  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13287  253B  0140               	movlb	0	; select bank0
 13288  253C  00BF               	movwf	___flmul@a+3
 13289  253D  0141               	movlb	1	; select bank1
 13290  253E  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13291  253F  0140               	movlb	0	; select bank0
 13292  2540  00BE               	movwf	___flmul@a+2
 13293  2541  0141               	movlb	1	; select bank1
 13294  2542  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13295  2543  0140               	movlb	0	; select bank0
 13296  2544  00BD               	movwf	___flmul@a+1
 13297  2545  0141               	movlb	1	; select bank1
 13298  2546  0839               	movf	ftoa@fValue^(0+128),w
 13299  2547  0140               	movlb	0	; select bank0
 13300  2548  00BC               	movwf	___flmul@a
 13301  2549  3195  25D4  31A5   	fcall	___flmul
 13302  254C  0140               	movlb	0	; select bank0
 13303  254D  083B               	movf	?___flmul+3,w
 13304  254E  0141               	movlb	1	; select bank1
 13305  254F  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 13306  2550  0140               	movlb	0	; select bank0
 13307  2551  083A               	movf	?___flmul+2,w
 13308  2552  0141               	movlb	1	; select bank1
 13309  2553  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 13310  2554  0140               	movlb	0	; select bank0
 13311  2555  0839               	movf	?___flmul+1,w
 13312  2556  0141               	movlb	1	; select bank1
 13313  2557  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 13314  2558  0140               	movlb	0	; select bank0
 13315  2559  0838               	movf	?___flmul,w
 13316  255A  0141               	movlb	1	; select bank1
 13317  255B  00B9               	movwf	ftoa@fValue^(0+128)
 13318                           
 13319                           ;common.c: 13:   sign = 1;
 13320  255C  01C2               	clrf	ftoa@sign^(0+128)
 13321  255D  0AC2               	incf	ftoa@sign^(0+128),f
 13322                           
 13323                           ;common.c: 14:   width--;
 13324  255E  3001               	movlw	1
 13325  255F  02BD               	subwf	ftoa@width^(0+128),f
 13326  2560                     l7145:	
 13327                           
 13328                           ;common.c: 16:  while(fValue >= 10.0) {
 13329  2560  0141               	movlb	1	; select bank1
 13330  2561  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13331  2562  00B0               	movwf	(___flge@ff1+3)^(0+128)
 13332  2563  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13333  2564  00AF               	movwf	(___flge@ff1+2)^(0+128)
 13334  2565  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13335  2566  00AE               	movwf	(___flge@ff1+1)^(0+128)
 13336  2567  0839               	movf	ftoa@fValue^(0+128),w
 13337  2568  00AD               	movwf	___flge@ff1^(0+128)
 13338  2569  3041               	movlw	65
 13339  256A  00B4               	movwf	(___flge@ff2+3)^(0+128)
 13340  256B  3020               	movlw	32
 13341  256C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 13342  256D  3000               	movlw	0
 13343  256E  00B2               	movwf	(___flge@ff2+1)^(0+128)
 13344  256F  3000               	movlw	0
 13345  2570  00B1               	movwf	___flge@ff2^(0+128)
 13346  2571  31AD  25D6  31A5   	fcall	___flge
 13347  2574  1C03               	btfss	3,0
 13348  2575  2DA7               	goto	l7147
 13349                           
 13350                           ;common.c: 17:   fValue /= 10;
 13351  2576  3041               	movlw	65
 13352  2577  0140               	movlb	0	; select bank0
 13353  2578  00D5               	movwf	___fldiv@a+3
 13354  2579  3020               	movlw	32
 13355  257A  00D4               	movwf	___fldiv@a+2
 13356  257B  3000               	movlw	0
 13357  257C  00D3               	movwf	___fldiv@a+1
 13358  257D  3000               	movlw	0
 13359  257E  00D2               	movwf	___fldiv@a
 13360  257F  0141               	movlb	1	; select bank1
 13361  2580  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13362  2581  0140               	movlb	0	; select bank0
 13363  2582  00D9               	movwf	___fldiv@b+3
 13364  2583  0141               	movlb	1	; select bank1
 13365  2584  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13366  2585  0140               	movlb	0	; select bank0
 13367  2586  00D8               	movwf	___fldiv@b+2
 13368  2587  0141               	movlb	1	; select bank1
 13369  2588  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13370  2589  0140               	movlb	0	; select bank0
 13371  258A  00D7               	movwf	___fldiv@b+1
 13372  258B  0141               	movlb	1	; select bank1
 13373  258C  0839               	movf	ftoa@fValue^(0+128),w
 13374  258D  0140               	movlb	0	; select bank0
 13375  258E  00D6               	movwf	___fldiv@b
 13376  258F  319E  2628  31A5   	fcall	___fldiv
 13377  2592  0140               	movlb	0	; select bank0
 13378  2593  0855               	movf	?___fldiv+3,w
 13379  2594  0141               	movlb	1	; select bank1
 13380  2595  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 13381  2596  0140               	movlb	0	; select bank0
 13382  2597  0854               	movf	?___fldiv+2,w
 13383  2598  0141               	movlb	1	; select bank1
 13384  2599  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 13385  259A  0140               	movlb	0	; select bank0
 13386  259B  0853               	movf	?___fldiv+1,w
 13387  259C  0141               	movlb	1	; select bank1
 13388  259D  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 13389  259E  0140               	movlb	0	; select bank0
 13390  259F  0852               	movf	?___fldiv,w
 13391  25A0  0141               	movlb	1	; select bank1
 13392  25A1  00B9               	movwf	ftoa@fValue^(0+128)
 13393                           
 13394                           ;common.c: 18:   len++;
 13395  25A2  3001               	movlw	1
 13396  25A3  00BF               	movwf	??_ftoa^(0+128)
 13397  25A4  083F               	movf	??_ftoa^(0+128),w
 13398  25A5  07C1               	addwf	ftoa@len^(0+128),f
 13399  25A6  2D60               	goto	l7145
 13400  25A7                     l7147:	
 13401                           
 13402                           ;common.c: 20:  w = len + prec;
 13403  25A7  0141               	movlb	1	; select bank1
 13404  25A8  0841               	movf	ftoa@len^(0+128),w
 13405  25A9  073E               	addwf	ftoa@prec^(0+128),w
 13406  25AA  00BF               	movwf	??_ftoa^(0+128)
 13407  25AB  083F               	movf	??_ftoa^(0+128),w
 13408  25AC  00C4               	movwf	ftoa@w^(0+128)
 13409                           
 13410                           ;common.c: 21:  if (prec == 0)
 13411  25AD  083E               	movf	ftoa@prec^(0+128),w
 13412  25AE  1D03               	btfss	3,2
 13413  25AF  2DB4               	goto	l7155
 13414                           
 13415                           ;common.c: 22:   width++;
 13416  25B0  3001               	movlw	1
 13417  25B1  00BF               	movwf	??_ftoa^(0+128)
 13418  25B2  083F               	movf	??_ftoa^(0+128),w
 13419  25B3  07BD               	addwf	ftoa@width^(0+128),f
 13420  25B4                     l7155:	
 13421                           
 13422                           ;common.c: 23:  while(--width > w)
 13423  25B4  3001               	movlw	1
 13424  25B5  02BD               	subwf	ftoa@width^(0+128),f
 13425  25B6  083D               	movf	ftoa@width^(0+128),w
 13426  25B7  0244               	subwf	ftoa@w^(0+128),w
 13427  25B8  1803               	btfsc	3,0
 13428  25B9  2DCA               	goto	l7157
 13429                           
 13430                           ;common.c: 24:   str[pos++] = ' ';
 13431  25BA  3020               	movlw	32
 13432  25BB  00BF               	movwf	??_ftoa^(0+128)
 13433  25BC  0845               	movf	ftoa@pos^(0+128),w
 13434  25BD  0746               	addwf	ftoa@str^(0+128),w
 13435  25BE  00C0               	movwf	(??_ftoa+1)^(0+128)
 13436  25BF  0840               	movf	(??_ftoa+1)^(0+128),w
 13437  25C0  0086               	movwf	6
 13438  25C1  3002               	movlw	2	; select bank4/5
 13439  25C2  0087               	movwf	7
 13440  25C3  083F               	movf	??_ftoa^(0+128),w
 13441  25C4  0081               	movwf	1
 13442  25C5  3001               	movlw	1
 13443  25C6  00BF               	movwf	??_ftoa^(0+128)
 13444  25C7  083F               	movf	??_ftoa^(0+128),w
 13445  25C8  07C5               	addwf	ftoa@pos^(0+128),f
 13446  25C9  2DB4               	goto	l7155
 13447  25CA                     l7157:	
 13448                           
 13449                           ;common.c: 25:  if (sign)
 13450  25CA  0842               	movf	ftoa@sign^(0+128),w
 13451  25CB  1903               	btfsc	3,2
 13452  25CC  2DDC               	goto	l7177
 13453                           
 13454                           ;common.c: 26:   str[pos++] = '-';
 13455  25CD  302D               	movlw	45
 13456  25CE                     L6:	
 13457  25CE  00BF               	movwf	??_ftoa^(0+128)
 13458  25CF  0845               	movf	ftoa@pos^(0+128),w
 13459  25D0  0746               	addwf	ftoa@str^(0+128),w
 13460  25D1  00C0               	movwf	(??_ftoa+1)^(0+128)
 13461  25D2  0840               	movf	(??_ftoa+1)^(0+128),w
 13462  25D3  0086               	movwf	6
 13463  25D4  3002               	movlw	2	; select bank4/5
 13464  25D5  0087               	movwf	7
 13465  25D6  083F               	movf	??_ftoa^(0+128),w
 13466  25D7  0081               	movwf	1
 13467  25D8  3001               	movlw	1
 13468  25D9  00BF               	movwf	??_ftoa^(0+128)
 13469  25DA  083F               	movf	??_ftoa^(0+128),w
 13470  25DB  07C5               	addwf	ftoa@pos^(0+128),f
 13471  25DC                     l7177:	
 13472                           
 13473                           ;common.c: 27:  while(w--) {
 13474  25DC  3001               	movlw	1
 13475  25DD  02C4               	subwf	ftoa@w^(0+128),f
 13476  25DE  0A44               	incf	ftoa@w^(0+128),w
 13477  25DF  1903               	btfsc	3,2
 13478  25E0  2E73               	goto	l7179
 13479                           
 13480                           ;common.c: 28:   intValue = fValue;
 13481  25E1  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13482  25E2  00B0               	movwf	(___fltol@f1+3)^(0+128)
 13483  25E3  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13484  25E4  00AF               	movwf	(___fltol@f1+2)^(0+128)
 13485  25E5  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13486  25E6  00AE               	movwf	(___fltol@f1+1)^(0+128)
 13487  25E7  0839               	movf	ftoa@fValue^(0+128),w
 13488  25E8  00AD               	movwf	___fltol@f1^(0+128)
 13489  25E9  31AD  2565  31A5   	fcall	___fltol
 13490  25EC  0141               	movlb	1	; select bank1
 13491  25ED  082D               	movf	?___fltol^(0+128),w
 13492  25EE  00BF               	movwf	??_ftoa^(0+128)
 13493  25EF  083F               	movf	??_ftoa^(0+128),w
 13494  25F0  00C3               	movwf	ftoa@intValue^(0+128)
 13495                           
 13496                           ;common.c: 29:   fValue = fValue * 10 - (10 * intValue);
 13497  25F1  300A               	movlw	10
 13498  25F2  0140               	movlb	0	; select bank0
 13499  25F3  00A6               	movwf	___wmul@multiplicand
 13500  25F4  3000               	movlw	0
 13501  25F5  00A7               	movwf	___wmul@multiplicand+1
 13502  25F6  0141               	movlb	1	; select bank1
 13503  25F7  0843               	movf	ftoa@intValue^(0+128),w
 13504  25F8  00BF               	movwf	??_ftoa^(0+128)
 13505  25F9  01C0               	clrf	(??_ftoa^(0+128)+1)
 13506  25FA  083F               	movf	??_ftoa^(0+128),w
 13507  25FB  0140               	movlb	0	; select bank0
 13508  25FC  00A4               	movwf	___wmul@multiplier
 13509  25FD  0141               	movlb	1	; select bank1
 13510  25FE  0840               	movf	(??_ftoa+1)^(0+128),w
 13511  25FF  0140               	movlb	0	; select bank0
 13512  2600  00A5               	movwf	___wmul@multiplier+1
 13513  2601  3198  2000  31A5   	fcall	___wmul
 13514  2604  0140               	movlb	0	; select bank0
 13515  2605  0824               	movf	?___wmul,w
 13516  2606  00AA               	movwf	___xxtofl@val
 13517  2607  0825               	movf	?___wmul+1,w
 13518  2608  00AB               	movwf	___xxtofl@val+1
 13519  2609  0D89               	rlf	9,f
 13520  260A  3B89               	subwfb	9,f
 13521  260B  0989               	comf	9,f
 13522  260C  00AC               	movwf	___xxtofl@val+2
 13523  260D  00AD               	movwf	___xxtofl@val+3
 13524  260E  3001               	movlw	1
 13525  260F  31AF  276A  31A5   	fcall	___xxtofl
 13526  2612  0140               	movlb	0	; select bank0
 13527  2613  082D               	movf	?___xxtofl+3,w
 13528  2614  0141               	movlb	1	; select bank1
 13529  2615  00A3               	movwf	(___flsub@a+3)^(0+128)
 13530  2616  0140               	movlb	0	; select bank0
 13531  2617  082C               	movf	?___xxtofl+2,w
 13532  2618  0141               	movlb	1	; select bank1
 13533  2619  00A2               	movwf	(___flsub@a+2)^(0+128)
 13534  261A  0140               	movlb	0	; select bank0
 13535  261B  082B               	movf	?___xxtofl+1,w
 13536  261C  0141               	movlb	1	; select bank1
 13537  261D  00A1               	movwf	(___flsub@a+1)^(0+128)
 13538  261E  0140               	movlb	0	; select bank0
 13539  261F  082A               	movf	?___xxtofl,w
 13540  2620  0141               	movlb	1	; select bank1
 13541  2621  00A0               	movwf	___flsub@a^(0+128)
 13542  2622  3041               	movlw	65
 13543  2623  0140               	movlb	0	; select bank0
 13544  2624  00BB               	movwf	___flmul@b+3
 13545  2625  3020               	movlw	32
 13546  2626  00BA               	movwf	___flmul@b+2
 13547  2627  3000               	movlw	0
 13548  2628  00B9               	movwf	___flmul@b+1
 13549  2629  3000               	movlw	0
 13550  262A  00B8               	movwf	___flmul@b
 13551  262B  0141               	movlb	1	; select bank1
 13552  262C  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13553  262D  0140               	movlb	0	; select bank0
 13554  262E  00BF               	movwf	___flmul@a+3
 13555  262F  0141               	movlb	1	; select bank1
 13556  2630  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13557  2631  0140               	movlb	0	; select bank0
 13558  2632  00BE               	movwf	___flmul@a+2
 13559  2633  0141               	movlb	1	; select bank1
 13560  2634  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13561  2635  0140               	movlb	0	; select bank0
 13562  2636  00BD               	movwf	___flmul@a+1
 13563  2637  0141               	movlb	1	; select bank1
 13564  2638  0839               	movf	ftoa@fValue^(0+128),w
 13565  2639  0140               	movlb	0	; select bank0
 13566  263A  00BC               	movwf	___flmul@a
 13567  263B  3195  25D4  31A5   	fcall	___flmul
 13568  263E  0140               	movlb	0	; select bank0
 13569  263F  083B               	movf	?___flmul+3,w
 13570  2640  0141               	movlb	1	; select bank1
 13571  2641  00A7               	movwf	(___flsub@b+3)^(0+128)
 13572  2642  0140               	movlb	0	; select bank0
 13573  2643  083A               	movf	?___flmul+2,w
 13574  2644  0141               	movlb	1	; select bank1
 13575  2645  00A6               	movwf	(___flsub@b+2)^(0+128)
 13576  2646  0140               	movlb	0	; select bank0
 13577  2647  0839               	movf	?___flmul+1,w
 13578  2648  0141               	movlb	1	; select bank1
 13579  2649  00A5               	movwf	(___flsub@b+1)^(0+128)
 13580  264A  0140               	movlb	0	; select bank0
 13581  264B  0838               	movf	?___flmul,w
 13582  264C  0141               	movlb	1	; select bank1
 13583  264D  00A4               	movwf	___flsub@b^(0+128)
 13584  264E  31B7  2759  31A5   	fcall	___flsub
 13585  2651  0141               	movlb	1	; select bank1
 13586  2652  0823               	movf	(?___flsub+3)^(0+128),w
 13587  2653  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 13588  2654  0822               	movf	(?___flsub+2)^(0+128),w
 13589  2655  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 13590  2656  0821               	movf	(?___flsub+1)^(0+128),w
 13591  2657  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 13592  2658  0820               	movf	?___flsub^(0+128),w
 13593  2659  00B9               	movwf	ftoa@fValue^(0+128)
 13594                           
 13595                           ;common.c: 30:   str[pos++] = intValue + '0';
 13596  265A  0843               	movf	ftoa@intValue^(0+128),w
 13597  265B  3E30               	addlw	48
 13598  265C  00BF               	movwf	??_ftoa^(0+128)
 13599  265D  0845               	movf	ftoa@pos^(0+128),w
 13600  265E  0746               	addwf	ftoa@str^(0+128),w
 13601  265F  00C0               	movwf	(??_ftoa+1)^(0+128)
 13602  2660  0840               	movf	(??_ftoa+1)^(0+128),w
 13603  2661  0086               	movwf	6
 13604  2662  3002               	movlw	2	; select bank4/5
 13605  2663  0087               	movwf	7
 13606  2664  083F               	movf	??_ftoa^(0+128),w
 13607  2665  0081               	movwf	1
 13608  2666  3001               	movlw	1
 13609  2667  00BF               	movwf	??_ftoa^(0+128)
 13610  2668  083F               	movf	??_ftoa^(0+128),w
 13611  2669  07C5               	addwf	ftoa@pos^(0+128),f
 13612                           
 13613                           ;common.c: 31:   if (w && (w == prec))
 13614  266A  0844               	movf	ftoa@w^(0+128),w
 13615  266B  1903               	btfsc	3,2
 13616  266C  2DDC               	goto	l7177
 13617  266D  0844               	movf	ftoa@w^(0+128),w
 13618  266E  063E               	xorwf	ftoa@prec^(0+128),w
 13619  266F  1D03               	skipz
 13620  2670  2DDC               	goto	l7177
 13621                           
 13622                           ;common.c: 32:    str[pos++] = '.';
 13623  2671  302E               	movlw	46
 13624  2672  2DCE               	goto	L6
 13625  2673                     l7179:	
 13626                           
 13627                           ;common.c: 35:  str[pos] = '\0';
 13628  2673  0845               	movf	ftoa@pos^(0+128),w
 13629  2674  0746               	addwf	ftoa@str^(0+128),w
 13630  2675  00BF               	movwf	??_ftoa^(0+128)
 13631  2676  083F               	movf	??_ftoa^(0+128),w
 13632  2677  0086               	movwf	6
 13633  2678  3002               	movlw	2	; select bank4/5
 13634  2679  0087               	movwf	7
 13635  267A  0181               	clrf	1
 13636  267B  0008               	return
 13637  267C                     __end_of_ftoa:	
 13638                           
 13639                           	psect	text30
 13640  1800                     __ptext30:	
 13641 ;; *************** function ___wmul *****************
 13642 ;; Defined at:
 13643 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 13644 ;; Parameters:    Size  Location     Type
 13645 ;;  multiplier      2    4[BANK0 ] unsigned int 
 13646 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 13647 ;; Auto vars:     Size  Location     Type
 13648 ;;  product         2    8[BANK0 ] unsigned int 
 13649 ;; Return value:  Size  Location     Type
 13650 ;;                  2    4[BANK0 ] unsigned int 
 13651 ;; Registers used:
 13652 ;;		wreg, status,2, status,0
 13653 ;; Tracked objects:
 13654 ;;		On entry : 0/0
 13655 ;;		On exit  : 0/0
 13656 ;;		Unchanged: 0/0
 13657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13658 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13661 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13662 ;;Total ram usage:        6 bytes
 13663 ;; Hardware stack levels used:    1
 13664 ;; Hardware stack levels required when called:    3
 13665 ;; This function calls:
 13666 ;;		Nothing
 13667 ;; This function is called by:
 13668 ;;		_getStateFunc
 13669 ;;		_getNextState
 13670 ;;		_returnToPage
 13671 ;;		_ftoa
 13672 ;; This function uses a non-reentrant model
 13673 ;;
 13674                           
 13675                           
 13676                           ;psect for function ___wmul
 13677  1800                     ___wmul:	
 13678                           
 13679                           ;incstack = 0
 13680                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13681  1800  0140               	movlb	0	; select bank0
 13682  1801  01A8               	clrf	___wmul@product
 13683  1802  01A9               	clrf	___wmul@product+1
 13684  1803                     l4201:	
 13685  1803  1C24               	btfss	___wmul@multiplier,0
 13686  1804  2809               	goto	l981
 13687  1805  0826               	movf	___wmul@multiplicand,w
 13688  1806  07A8               	addwf	___wmul@product,f
 13689  1807  0827               	movf	___wmul@multiplicand+1,w
 13690  1808  3DA9               	addwfc	___wmul@product+1,f
 13691  1809                     l981:	
 13692  1809  3001               	movlw	1
 13693  180A                     u4495:	
 13694  180A  35A6               	lslf	___wmul@multiplicand,f
 13695  180B  0DA7               	rlf	___wmul@multiplicand+1,f
 13696  180C  0B89               	decfsz	9,f
 13697  180D  280A               	goto	u4495
 13698  180E  3001               	movlw	1
 13699  180F                     u4505:	
 13700  180F  36A5               	lsrf	___wmul@multiplier+1,f
 13701  1810  0CA4               	rrf	___wmul@multiplier,f
 13702  1811  0B89               	decfsz	9,f
 13703  1812  280F               	goto	u4505
 13704  1813  0824               	movf	___wmul@multiplier,w
 13705  1814  0425               	iorwf	___wmul@multiplier+1,w
 13706  1815  1D03               	btfss	3,2
 13707  1816  2803               	goto	l4201
 13708  1817  0829               	movf	___wmul@product+1,w
 13709  1818  00A5               	movwf	?___wmul+1
 13710  1819  0828               	movf	___wmul@product,w
 13711  181A  00A4               	movwf	?___wmul
 13712  181B  0008               	return
 13713  181C                     __end_of___wmul:	
 13714                           
 13715                           	psect	text31
 13716  3727                     __ptext31:	
 13717 ;; *************** function _OLED_print_xy *****************
 13718 ;; Defined at:
 13719 ;;		line 156 in file "oled.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;  col             1    wreg     unsigned char 
 13722 ;;  row             1   17[BANK0 ] unsigned char 
 13723 ;;  s               2   18[BANK0 ] PTR unsigned char 
 13724 ;;		 -> STR_87(4), systemCheck@str(3), STR_86(12), STR_85(13), 
 13725 ;;		 -> STR_84(13), STR_83(13), STR_82(13), STR_81(13), 
 13726 ;;		 -> STR_80(13), STR_79(13), STR_78(13), STR_77(13), 
 13727 ;;		 -> STR_76(13), STR_75(13), STR_74(13), STR_73(13), 
 13728 ;;		 -> STR_72(13), STR_71(13), STR_70(13), STR_69(13), 
 13729 ;;		 -> STR_68(13), STR_67(13), STR_66(13), STR_65(13), 
 13730 ;;		 -> STR_64(13), STR_63(13), STR_62(13), STR_61(9), 
 13731 ;;		 -> STR_60(2), STR_59(13), STR_58(9), STR_57(2), 
 13732 ;;		 -> STR_56(13), STR_55(3), STR_54(7), STR_53(13), 
 13733 ;;		 -> STR_52(10), STR_51(10), STR_50(3), STR_49(7), 
 13734 ;;		 -> STR_48(37), STR_47(8), STR_46(2), STR_45(13), 
 13735 ;;		 -> STR_44(13), STR_43(13), STR_42(8), STR_41(2), 
 13736 ;;		 -> STR_40(7), STR_39(6), STR_38(7), STR_37(6), 
 13737 ;;		 -> STR_36(13), STR_35(8), STR_34(13), STR_33(13), 
 13738 ;;		 -> STR_32(13), STR_31(13), STR_30(13), STR_29(13), 
 13739 ;;		 -> STR_28(13), STR_27(9), STR_26(8), STR_25(5), 
 13740 ;;		 -> STR_24(8), STR_23(5), STR_22(13), STR_21(13), 
 13741 ;;		 -> STR_20(13), STR_19(13), STR_18(13), STR_17(9), 
 13742 ;;		 -> STR_16(3), STR_15(3), STR_14(13), STR_13(13), 
 13743 ;;		 -> STR_12(3), STR_11(3), STR_10(4), STR_9(2), 
 13744 ;;		 -> STR_8(4), STR_7(8), STR_6(7), STR_5(8), 
 13745 ;;		 -> STR_4(2), STR_3(4), str(10), STR_2(8), 
 13746 ;;		 -> STR_1(57), 
 13747 ;; Auto vars:     Size  Location     Type
 13748 ;;  col             1   25[BANK0 ] unsigned char 
 13749 ;;  row_offsets     4   21[BANK0 ] unsigned char [4]
 13750 ;; Return value:  Size  Location     Type
 13751 ;;                  1    wreg      void 
 13752 ;; Registers used:
 13753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13759 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13760 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13762 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13763 ;;Total ram usage:        9 bytes
 13764 ;; Hardware stack levels used:    1
 13765 ;; Hardware stack levels required when called:    7
 13766 ;; This function calls:
 13767 ;;		_OLED_command
 13768 ;;		_OLED_write
 13769 ;; This function is called by:
 13770 ;;		_statusView
 13771 ;;		_channelView
 13772 ;;		_channelSetup
 13773 ;;		_setOutputPower
 13774 ;;		_setLensDia
 13775 ;;		_setup
 13776 ;;		_setDPOffset
 13777 ;;		_setSkyTemp
 13778 ;;		_setFudgeFactor
 13779 ;;		_viewErrorMessage
 13780 ;;		_systemCheck
 13781 ;; This function uses a non-reentrant model
 13782 ;;
 13783                           
 13784                           
 13785                           ;psect for function _OLED_print_xy
 13786  3727                     _OLED_print_xy:	
 13787                           
 13788                           ;incstack = 0
 13789                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13790                           ;OLED_print_xy@col stored from wreg
 13791  3727  0140               	movlb	0	; select bank0
 13792  3728  00B9               	movwf	OLED_print_xy@col
 13793                           
 13794                           ;oled.c: 156: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 157: {;oled.
      +                          c: 158:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 13795  3729  0144               	movlb	4	; select bank4
 13796  372A  0863               	movf	(OLED_print_xy@F7980+3)^(0+512),w
 13797  372B  0140               	movlb	0	; select bank0
 13798  372C  00B8               	movwf	OLED_print_xy@row_offsets+3
 13799  372D  0144               	movlb	4	; select bank4
 13800  372E  0862               	movf	(OLED_print_xy@F7980+2)^(0+512),w
 13801  372F  0140               	movlb	0	; select bank0
 13802  3730  00B7               	movwf	OLED_print_xy@row_offsets+2
 13803  3731  0144               	movlb	4	; select bank4
 13804  3732  0861               	movf	(OLED_print_xy@F7980+1)^(0+512),w
 13805  3733  0140               	movlb	0	; select bank0
 13806  3734  00B6               	movwf	OLED_print_xy@row_offsets+1
 13807  3735  0144               	movlb	4	; select bank4
 13808  3736  0860               	movf	OLED_print_xy@F7980^(0+512),w
 13809  3737  0140               	movlb	0	; select bank0
 13810  3738  00B5               	movwf	OLED_print_xy@row_offsets
 13811                           
 13812                           ;oled.c: 160:  OLED_command(0x80 | (col + row_offsets[row]));
 13813  3739  0831               	movf	OLED_print_xy@row,w
 13814  373A  3E35               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 13815  373B  0086               	movwf	6
 13816  373C  0187               	clrf	7
 13817  373D  0801               	movf	1,w
 13818  373E  0739               	addwf	OLED_print_xy@col,w
 13819  373F  3880               	iorlw	128
 13820  3740  31B4  24EA  31B7   	fcall	_OLED_command
 13821  3743                     l4693:	
 13822                           ;oled.c: 161:  while (*s != (char) ((void*)0)) {
 13823                           
 13824                           
 13825                           ;oled.c: 161:  while (*s != (char) ((void*)0)) {
 13826  3743  0140               	movlb	0	; select bank0
 13827  3744  0832               	movf	OLED_print_xy@s,w
 13828  3745  0084               	movwf	4
 13829  3746  0833               	movf	OLED_print_xy@s+1,w
 13830  3747  0085               	movwf	5
 13831  3748  0012               	moviw fsr0++
 13832  3749  1903               	btfsc	3,2
 13833  374A  0008               	return
 13834                           
 13835                           ;oled.c: 162:   OLED_write(*s++);
 13836  374B  0832               	movf	OLED_print_xy@s,w
 13837  374C  0084               	movwf	4
 13838  374D  0833               	movf	OLED_print_xy@s+1,w
 13839  374E  0085               	movwf	5
 13840  374F  0800               	movf	0,w	;code access
 13841  3750  31B4  24FE  31B7   	fcall	_OLED_write
 13842  3753  3001               	movlw	1
 13843  3754  0140               	movlb	0	; select bank0
 13844  3755  07B2               	addwf	OLED_print_xy@s,f
 13845  3756  3000               	movlw	0
 13846  3757  3DB3               	addwfc	OLED_print_xy@s+1,f
 13847  3758  2F43               	goto	l4693
 13848  3759                     __end_of_OLED_print_xy:	
 13849                           
 13850                           	psect	text32
 13851  29AC                     __ptext32:	
 13852 ;; *************** function _initialize *****************
 13853 ;; Defined at:
 13854 ;;		line 113 in file "main.c"
 13855 ;; Parameters:    Size  Location     Type
 13856 ;;		None
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;		None
 13859 ;; Return value:  Size  Location     Type
 13860 ;;                  1    wreg      void 
 13861 ;; Registers used:
 13862 ;;		wreg, status,2, status,0
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13872 ;;Total ram usage:        0 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; Hardware stack levels required when called:    3
 13875 ;; This function calls:
 13876 ;;		Nothing
 13877 ;; This function is called by:
 13878 ;;		_main
 13879 ;; This function uses a non-reentrant model
 13880 ;;
 13881                           
 13882                           
 13883                           ;psect for function _initialize
 13884  29AC                     _initialize:	
 13885                           
 13886                           ;main.c: 115:  OSCFRQ = 0b00000010;
 13887                           
 13888                           ;incstack = 0
 13889                           ; Regs used in _initialize: [wreg+status,2+status,0]
 13890  29AC  3002               	movlw	2
 13891  29AD  0151               	movlb	17	; select bank17
 13892  29AE  0093               	movwf	19	;volatile
 13893                           
 13894                           ;main.c: 116:  OSCCON1 = 0b01100000;
 13895  29AF  3060               	movlw	96
 13896  29B0  008D               	movwf	13	;volatile
 13897  29B1                     l130:	
 13898                           ;main.c: 117:  while (!OSCCON3bits.ORDY);
 13899                           
 13900  29B1  1E0F               	btfss	15,4	;volatile
 13901  29B2  29B1               	goto	l130
 13902                           
 13903                           ;main.c: 120:  RX1DTPPSbits.RX1DTPPS = 0x17;
 13904  29B3  017D               	movlb	61	; select bank61
 13905  29B4  084B               	movf	75,w	;volatile
 13906  29B5  39C0               	andlw	-64
 13907  29B6  3817               	iorlw	23
 13908  29B7  00CB               	movwf	75	;volatile
 13909                           
 13910                           ;main.c: 121:  RC6PPS = 0x0F;
 13911  29B8  300F               	movlw	15
 13912  29B9  017E               	movlb	62	; select bank62
 13913  29BA  00A6               	movwf	38	;volatile
 13914                           
 13915                           ;main.c: 124:  ANSELA = 0b01000000;
 13916  29BB  3040               	movlw	64
 13917  29BC  00B8               	movwf	56	;volatile
 13918                           
 13919                           ;main.c: 125:  ANSELB = 0b00000000;
 13920  29BD  01C3               	clrf	67	;volatile
 13921                           
 13922                           ;main.c: 126:  ANSELC = 0b00000011;
 13923  29BE  3003               	movlw	3
 13924  29BF  00CE               	movwf	78	;volatile
 13925                           
 13926                           ;main.c: 129:  TRISA = 0b11110000;
 13927  29C0  30F0               	movlw	240
 13928  29C1  0140               	movlb	0	; select bank0
 13929  29C2  0092               	movwf	18	;volatile
 13930                           
 13931                           ;main.c: 130:  TRISB = 0b00000000;
 13932  29C3  0193               	clrf	19	;volatile
 13933                           
 13934                           ;main.c: 131:  TRISC = 0b10000111;
 13935  29C4  3087               	movlw	135
 13936  29C5  0094               	movwf	20	;volatile
 13937                           
 13938                           ;main.c: 134:  ADCON0bits.ADON = 1;
 13939  29C6  0141               	movlb	1	; select bank1
 13940  29C7  141D               	bsf	29,0	;volatile
 13941                           
 13942                           ;main.c: 135:  ADCON1 = 0b11100000;
 13943  29C8  30E0               	movlw	224
 13944  29C9  009E               	movwf	30	;volatile
 13945                           
 13946                           ;main.c: 138:  T0CON0 = 0b10000000;
 13947  29CA  3080               	movlw	128
 13948  29CB  014B               	movlb	11	; select bank11
 13949  29CC  009E               	movwf	30	;volatile
 13950                           
 13951                           ;main.c: 139:  T0CON1 = 0b01000111;
 13952  29CD  3047               	movlw	71
 13953  29CE  009F               	movwf	31	;volatile
 13954                           
 13955                           ;main.c: 140:  TMR0 = 178;
 13956  29CF  30B2               	movlw	178
 13957  29D0  009C               	movwf	28	;volatile
 13958                           
 13959                           ;main.c: 143:  T1CON = 0b00110011;
 13960  29D1  3033               	movlw	51
 13961  29D2  0144               	movlb	4	; select bank4
 13962  29D3  008E               	movwf	14	;volatile
 13963                           
 13964                           ;main.c: 144:  T1CLK = 0b00000001;
 13965  29D4  3001               	movlw	1
 13966  29D5  0091               	movwf	17	;volatile
 13967                           
 13968                           ;main.c: 145:  TMR1 = 53035;
 13969  29D6  30CF               	movlw	207
 13970  29D7  008D               	movwf	13	;volatile
 13971  29D8  302B               	movlw	43
 13972  29D9  008C               	movwf	12	;volatile
 13973                           
 13974                           ;main.c: 148:  PIE0 = 0b00110000;
 13975  29DA  3030               	movlw	48
 13976  29DB  014E               	movlb	14	; select bank14
 13977  29DC  0096               	movwf	22	;volatile
 13978                           
 13979                           ;main.c: 149:  PIE3 = 0b00100000;
 13980  29DD  3020               	movlw	32
 13981  29DE  0099               	movwf	25	;volatile
 13982                           
 13983                           ;main.c: 150:  PIE4 = 0b00000001;
 13984  29DF  3001               	movlw	1
 13985  29E0  009A               	movwf	26	;volatile
 13986                           
 13987                           ;main.c: 151:  INTCON = 0b11000000;
 13988  29E1  30C0               	movlw	192
 13989  29E2  008B               	movwf	11	;volatile
 13990                           
 13991                           ;main.c: 154:  IOCAP = 0b10110000;
 13992  29E3  30B0               	movlw	176
 13993  29E4  017E               	movlb	62	; select bank62
 13994  29E5  00BD               	movwf	61	;volatile
 13995                           
 13996                           ;main.c: 155:  IOCAN = 0b10110000;
 13997  29E6  30B0               	movlw	176
 13998  29E7  00BE               	movwf	62	;volatile
 13999                           
 14000                           ;main.c: 156:  IOCCN = 0b00000100;
 14001  29E8  3004               	movlw	4
 14002  29E9  00D4               	movwf	84	;volatile
 14003                           
 14004                           ;main.c: 160:  BAUD1CON = 0b00001000;
 14005  29EA  3008               	movlw	8
 14006  29EB  0142               	movlb	2	; select bank2
 14007  29EC  009F               	movwf	31	;volatile
 14008                           
 14009                           ;main.c: 161:  SPBRGL = 25;
 14010  29ED  3019               	movlw	25
 14011  29EE  009B               	movwf	27	;volatile
 14012                           
 14013                           ;main.c: 162:  RC1STA = 0b10010000;
 14014  29EF  3090               	movlw	144
 14015  29F0  009D               	movwf	29	;volatile
 14016                           
 14017                           ;main.c: 163:  TX1STA = 0b00100000;
 14018  29F1  3020               	movlw	32
 14019  29F2  009E               	movwf	30	;volatile
 14020  29F3  0008               	return
 14021  29F4                     __end_of_initialize:	
 14022                           
 14023                           	psect	text33
 14024  181C                     __ptext33:	
 14025 ;; *************** function _initGlobalData *****************
 14026 ;; Defined at:
 14027 ;;		line 79 in file "main.c"
 14028 ;; Parameters:    Size  Location     Type
 14029 ;;  data            2    4[BANK0 ] PTR struct .
 14030 ;;		 -> data(170), 
 14031 ;; Auto vars:     Size  Location     Type
 14032 ;;  chData          2   11[BANK0 ] PTR struct .
 14033 ;;		 -> data.chData(128), data(170), 
 14034 ;;  n               1   10[BANK0 ] unsigned char 
 14035 ;; Return value:  Size  Location     Type
 14036 ;;                  1    wreg      void 
 14037 ;; Registers used:
 14038 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14039 ;; Tracked objects:
 14040 ;;		On entry : 0/0
 14041 ;;		On exit  : 0/0
 14042 ;;		Unchanged: 0/0
 14043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14044 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14045 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14046 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14047 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14048 ;;Total ram usage:        9 bytes
 14049 ;; Hardware stack levels used:    1
 14050 ;; Hardware stack levels required when called:    3
 14051 ;; This function calls:
 14052 ;;		Nothing
 14053 ;; This function is called by:
 14054 ;;		_main
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058                           
 14059                           ;psect for function _initGlobalData
 14060  181C                     _initGlobalData:	
 14061                           
 14062                           ;main.c: 79: void initGlobalData(t_globalData *data);main.c: 80: {;main.c: 81:  uint8_t 
      +                          n;;main.c: 82:  t_channelData *chData;;main.c: 84:  data->tempC = 0;
 14063                           
 14064                           ;incstack = 0
 14065                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0]
 14066  181C  0140               	movlb	0	; select bank0
 14067  181D  0824               	movf	initGlobalData@data,w
 14068  181E  0086               	movwf	6
 14069  181F  0825               	movf	initGlobalData@data+1,w
 14070  1820  0087               	movwf	7
 14071  1821  3000               	movlw	0
 14072  1822  3FC0               	movwi [0]fsr1
 14073  1823  3000               	movlw	0
 14074  1824  3FC1               	movwi [1]fsr1
 14075  1825  3000               	movlw	0
 14076  1826  3FC2               	movwi [2]fsr1
 14077  1827  3000               	movlw	0
 14078  1828  3FC3               	movwi [3]fsr1
 14079                           
 14080                           ;main.c: 85:  data->relHum = 0;
 14081  1829  0824               	movf	initGlobalData@data,w
 14082  182A  0086               	movwf	6
 14083  182B  0825               	movf	initGlobalData@data+1,w
 14084  182C  0087               	movwf	7
 14085  182D  3144               	addfsr 1,4
 14086  182E  3000               	movlw	0
 14087  182F  3FC0               	movwi [0]fsr1
 14088  1830  3000               	movlw	0
 14089  1831  3FC1               	movwi [1]fsr1
 14090  1832  3000               	movlw	0
 14091  1833  3FC2               	movwi [2]fsr1
 14092  1834  3000               	movlw	0
 14093  1835  3FC3               	movwi [3]fsr1
 14094                           
 14095                           ;main.c: 86:  data->dewPointC = 0;
 14096  1836  0824               	movf	initGlobalData@data,w
 14097  1837  0086               	movwf	6
 14098  1838  0825               	movf	initGlobalData@data+1,w
 14099  1839  0087               	movwf	7
 14100  183A  3148               	addfsr 1,8
 14101  183B  3000               	movlw	0
 14102  183C  3FC0               	movwi [0]fsr1
 14103  183D  3000               	movlw	0
 14104  183E  3FC1               	movwi [1]fsr1
 14105  183F  3000               	movlw	0
 14106  1840  3FC2               	movwi [2]fsr1
 14107  1841  3000               	movlw	0
 14108  1842  3FC3               	movwi [3]fsr1
 14109                           
 14110                           ;main.c: 87:  data->sensorVersion = 0;
 14111  1843  0824               	movf	initGlobalData@data,w
 14112  1844  0086               	movwf	6
 14113  1845  0825               	movf	initGlobalData@data+1,w
 14114  1846  0087               	movwf	7
 14115  1847  314C               	addfsr 1,12
 14116  1848  0181               	clrf	1
 14117                           
 14118                           ;main.c: 88:  data->tempAux = 0;
 14119  1849  0824               	movf	initGlobalData@data,w
 14120  184A  0086               	movwf	6
 14121  184B  0825               	movf	initGlobalData@data+1,w
 14122  184C  0087               	movwf	7
 14123  184D  314D               	addfsr 1,13
 14124  184E  3000               	movlw	0
 14125  184F  3FC0               	movwi [0]fsr1
 14126  1850  3000               	movlw	0
 14127  1851  3FC1               	movwi [1]fsr1
 14128  1852  3000               	movlw	0
 14129  1853  3FC2               	movwi [2]fsr1
 14130  1854  3000               	movlw	0
 14131  1855  3FC3               	movwi [3]fsr1
 14132                           
 14133                           ;main.c: 89:  data->voltage = 0;
 14134  1856  0824               	movf	initGlobalData@data,w
 14135  1857  0086               	movwf	6
 14136  1858  0825               	movf	initGlobalData@data+1,w
 14137  1859  0087               	movwf	7
 14138  185A  3151               	addfsr 1,17
 14139  185B  3000               	movlw	0
 14140  185C  3FC0               	movwi [0]fsr1
 14141  185D  3000               	movlw	0
 14142  185E  3FC1               	movwi [1]fsr1
 14143  185F  3000               	movlw	0
 14144  1860  3FC2               	movwi [2]fsr1
 14145  1861  3000               	movlw	0
 14146  1862  3FC3               	movwi [3]fsr1
 14147                           
 14148                           ;main.c: 90:  data->current = 0;
 14149  1863  0824               	movf	initGlobalData@data,w
 14150  1864  0086               	movwf	6
 14151  1865  0825               	movf	initGlobalData@data+1,w
 14152  1866  0087               	movwf	7
 14153  1867  3155               	addfsr 1,21
 14154  1868  3000               	movlw	0
 14155  1869  3FC0               	movwi [0]fsr1
 14156  186A  3000               	movlw	0
 14157  186B  3FC1               	movwi [1]fsr1
 14158  186C  3000               	movlw	0
 14159  186D  3FC2               	movwi [2]fsr1
 14160  186E  3000               	movlw	0
 14161  186F  3FC3               	movwi [3]fsr1
 14162                           
 14163                           ;main.c: 91:  data->power = 0;
 14164  1870  0824               	movf	initGlobalData@data,w
 14165  1871  0086               	movwf	6
 14166  1872  0825               	movf	initGlobalData@data+1,w
 14167  1873  0087               	movwf	7
 14168  1874  3159               	addfsr 1,25
 14169  1875  3000               	movlw	0
 14170  1876  3FC0               	movwi [0]fsr1
 14171  1877  3000               	movlw	0
 14172  1878  3FC1               	movwi [1]fsr1
 14173  1879  3000               	movlw	0
 14174  187A  3FC2               	movwi [2]fsr1
 14175  187B  3000               	movlw	0
 14176  187C  3FC3               	movwi [3]fsr1
 14177                           
 14178                           ;main.c: 92:  data->dpOffset = 3.0;
 14179  187D  0824               	movf	initGlobalData@data,w
 14180  187E  0086               	movwf	6
 14181  187F  0825               	movf	initGlobalData@data+1,w
 14182  1880  0087               	movwf	7
 14183  1881  315D               	addfsr 1,29
 14184  1882  3000               	movlw	0
 14185  1883  3FC0               	movwi [0]fsr1
 14186  1884  3000               	movlw	0
 14187  1885  3FC1               	movwi [1]fsr1
 14188  1886  3040               	movlw	64
 14189  1887  3FC2               	movwi [2]fsr1
 14190  1888  3040               	movlw	64
 14191  1889  3FC3               	movwi [3]fsr1
 14192                           
 14193                           ;main.c: 93:  data->skyTemp = -40;
 14194  188A  0824               	movf	initGlobalData@data,w
 14195  188B  3E21               	addlw	33
 14196  188C  0086               	movwf	6
 14197  188D  3000               	movlw	0
 14198  188E  3D25               	addwfc	initGlobalData@data+1,w
 14199  188F  0087               	movwf	7
 14200  1890  3000               	movlw	0
 14201  1891  3FC0               	movwi [0]fsr1
 14202  1892  3000               	movlw	0
 14203  1893  3FC1               	movwi [1]fsr1
 14204  1894  3020               	movlw	32
 14205  1895  3FC2               	movwi [2]fsr1
 14206  1896  30C2               	movlw	194
 14207  1897  3FC3               	movwi [3]fsr1
 14208                           
 14209                           ;main.c: 94:  data->fudgeFactor = 1.0;
 14210  1898  0824               	movf	initGlobalData@data,w
 14211  1899  3E25               	addlw	37
 14212  189A  0086               	movwf	6
 14213  189B  3000               	movlw	0
 14214  189C  3D25               	addwfc	initGlobalData@data+1,w
 14215  189D  0087               	movwf	7
 14216  189E  3000               	movlw	0
 14217  189F  3FC0               	movwi [0]fsr1
 14218  18A0  3000               	movlw	0
 14219  18A1  3FC1               	movwi [1]fsr1
 14220  18A2  3080               	movlw	128
 14221  18A3  3FC2               	movwi [2]fsr1
 14222  18A4  303F               	movlw	63
 14223  18A5  3FC3               	movwi [3]fsr1
 14224                           
 14225                           ;main.c: 96:  for (n = 0; n < 4; n++) {
 14226  18A6  01AA               	clrf	initGlobalData@n
 14227  18A7                     l5683:	
 14228                           
 14229                           ;main.c: 97:   chData = &data->chData[n];
 14230  18A7  082A               	movf	initGlobalData@n,w
 14231  18A8  00A6               	movwf	??_initGlobalData
 14232  18A9  01A7               	clrf	??_initGlobalData+1
 14233  18AA  3005               	movlw	5
 14234  18AB                     u6745:	
 14235  18AB  35A6               	lslf	??_initGlobalData,f
 14236  18AC  0DA7               	rlf	??_initGlobalData+1,f
 14237  18AD  0B89               	decfsz	9,f
 14238  18AE  28AB               	goto	u6745
 14239  18AF  0826               	movf	??_initGlobalData,w
 14240  18B0  0724               	addwf	initGlobalData@data,w
 14241  18B1  00A8               	movwf	??_initGlobalData+2
 14242  18B2  0827               	movf	??_initGlobalData+1,w
 14243  18B3  3D25               	addwfc	initGlobalData@data+1,w
 14244  18B4  00A9               	movwf	??_initGlobalData+3
 14245  18B5  0828               	movf	??_initGlobalData+2,w
 14246  18B6  3E2A               	addlw	42
 14247  18B7  00AB               	movwf	initGlobalData@chData
 14248  18B8  3000               	movlw	0
 14249  18B9  3D29               	addwfc	??_initGlobalData+3,w
 14250  18BA  00AC               	movwf	initGlobalData@chData+1
 14251                           
 14252                           ;main.c: 98:   chData->lensDia = 4;
 14253  18BB  082B               	movf	initGlobalData@chData,w
 14254  18BC  0086               	movwf	6
 14255  18BD  082C               	movf	initGlobalData@chData+1,w
 14256  18BE  0087               	movwf	7
 14257  18BF  3156               	addfsr 1,22
 14258  18C0  3000               	movlw	0
 14259  18C1  3FC0               	movwi [0]fsr1
 14260  18C2  3000               	movlw	0
 14261  18C3  3FC1               	movwi [1]fsr1
 14262  18C4  3080               	movlw	128
 14263  18C5  3FC2               	movwi [2]fsr1
 14264  18C6  3040               	movlw	64
 14265  18C7  3FC3               	movwi [3]fsr1
 14266                           
 14267                           ;main.c: 99:   chData->status = CH_UNCHECKED;
 14268  18C8  082B               	movf	initGlobalData@chData,w
 14269  18C9  3E1F               	addlw	31
 14270  18CA  00A6               	movwf	??_initGlobalData
 14271  18CB  3000               	movlw	0
 14272  18CC  3D2C               	addwfc	initGlobalData@chData+1,w
 14273  18CD  00A7               	movwf	??_initGlobalData+1
 14274  18CE  0826               	movf	??_initGlobalData,w
 14275  18CF  0086               	movwf	6
 14276  18D0  0827               	movf	??_initGlobalData+1,w
 14277  18D1  0087               	movwf	7
 14278  18D2  3005               	movlw	5
 14279  18D3  0081               	movwf	1
 14280                           
 14281                           ;main.c: 100:   chData->mode = MODE_AUTO;
 14282  18D4  082B               	movf	initGlobalData@chData,w
 14283  18D5  3E1E               	addlw	30
 14284  18D6  00A6               	movwf	??_initGlobalData
 14285  18D7  3000               	movlw	0
 14286  18D8  3D2C               	addwfc	initGlobalData@chData+1,w
 14287  18D9  00A7               	movwf	??_initGlobalData+1
 14288  18DA  0826               	movf	??_initGlobalData,w
 14289  18DB  0086               	movwf	6
 14290  18DC  0827               	movf	??_initGlobalData+1,w
 14291  18DD  0087               	movwf	7
 14292  18DE  3001               	movlw	1
 14293  18DF  0081               	movwf	1
 14294                           
 14295                           ;main.c: 101:   chData->Pmax = 0;
 14296  18E0  082B               	movf	initGlobalData@chData,w
 14297  18E1  0086               	movwf	6
 14298  18E2  082C               	movf	initGlobalData@chData+1,w
 14299  18E3  0087               	movwf	7
 14300  18E4  3144               	addfsr 1,4
 14301  18E5  3000               	movlw	0
 14302  18E6  3FC0               	movwi [0]fsr1
 14303  18E7  3000               	movlw	0
 14304  18E8  3FC1               	movwi [1]fsr1
 14305  18E9  3000               	movlw	0
 14306  18EA  3FC2               	movwi [2]fsr1
 14307  18EB  3000               	movlw	0
 14308  18EC  3FC3               	movwi [3]fsr1
 14309                           
 14310                           ;main.c: 102:   chData->Pset = -1;
 14311  18ED  082B               	movf	initGlobalData@chData,w
 14312  18EE  0086               	movwf	6
 14313  18EF  082C               	movf	initGlobalData@chData+1,w
 14314  18F0  0087               	movwf	7
 14315  18F1  3150               	addfsr 1,16
 14316  18F2  3000               	movlw	0
 14317  18F3  3FC0               	movwi [0]fsr1
 14318  18F4  3000               	movlw	0
 14319  18F5  3FC1               	movwi [1]fsr1
 14320  18F6  3080               	movlw	128
 14321  18F7  3FC2               	movwi [2]fsr1
 14322  18F8  30BF               	movlw	191
 14323  18F9  3FC3               	movwi [3]fsr1
 14324                           
 14325                           ;main.c: 103:   chData->Preq = 0;
 14326  18FA  082B               	movf	initGlobalData@chData,w
 14327  18FB  0086               	movwf	6
 14328  18FC  082C               	movf	initGlobalData@chData+1,w
 14329  18FD  0087               	movwf	7
 14330  18FE  3148               	addfsr 1,8
 14331  18FF  3000               	movlw	0
 14332  1900  3FC0               	movwi [0]fsr1
 14333  1901  3000               	movlw	0
 14334  1902  3FC1               	movwi [1]fsr1
 14335  1903  3000               	movlw	0
 14336  1904  3FC2               	movwi [2]fsr1
 14337  1905  3000               	movlw	0
 14338  1906  3FC3               	movwi [3]fsr1
 14339                           
 14340                           ;main.c: 104:   chData->Patt = 0;
 14341  1907  082B               	movf	initGlobalData@chData,w
 14342  1908  0086               	movwf	6
 14343  1909  082C               	movf	initGlobalData@chData+1,w
 14344  190A  0087               	movwf	7
 14345  190B  314C               	addfsr 1,12
 14346  190C  3000               	movlw	0
 14347  190D  3FC0               	movwi [0]fsr1
 14348  190E  3000               	movlw	0
 14349  190F  3FC1               	movwi [1]fsr1
 14350  1910  3000               	movlw	0
 14351  1911  3FC2               	movwi [2]fsr1
 14352  1912  3000               	movlw	0
 14353  1913  3FC3               	movwi [3]fsr1
 14354                           
 14355                           ;main.c: 105:   chData->current = 0;
 14356  1914  082B               	movf	initGlobalData@chData,w
 14357  1915  0086               	movwf	6
 14358  1916  082C               	movf	initGlobalData@chData+1,w
 14359  1917  0087               	movwf	7
 14360  1918  3000               	movlw	0
 14361  1919  3FC0               	movwi [0]fsr1
 14362  191A  3000               	movlw	0
 14363  191B  3FC1               	movwi [1]fsr1
 14364  191C  3000               	movlw	0
 14365  191D  3FC2               	movwi [2]fsr1
 14366  191E  3000               	movlw	0
 14367  191F  3FC3               	movwi [3]fsr1
 14368                           
 14369                           ;main.c: 106:  }
 14370  1920  3001               	movlw	1
 14371  1921  00A6               	movwf	??_initGlobalData
 14372  1922  0826               	movf	??_initGlobalData,w
 14373  1923  07AA               	addwf	initGlobalData@n,f
 14374  1924  3004               	movlw	4
 14375  1925  022A               	subwf	initGlobalData@n,w
 14376  1926  1803               	btfsc	3,0
 14377  1927  0008               	return
 14378  1928  28A7               	goto	l5683
 14379  1929                     __end_of_initGlobalData:	
 14380                           
 14381                           	psect	text34
 14382  1C72                     __ptext34:	
 14383 ;; *************** function _getAnalogValues *****************
 14384 ;; Defined at:
 14385 ;;		line 326 in file "system.c"
 14386 ;; Parameters:    Size  Location     Type
 14387 ;;  data            2   13[BANK1 ] PTR struct .
 14388 ;;		 -> data(170), 
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;  adc             2   19[BANK1 ] unsigned short 
 14391 ;; Return value:  Size  Location     Type
 14392 ;;                  1    wreg      void 
 14393 ;; Registers used:
 14394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14400 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14401 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14403 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14404 ;;Total ram usage:        8 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; Hardware stack levels required when called:    5
 14407 ;; This function calls:
 14408 ;;		___fladd
 14409 ;;		___fldiv
 14410 ;;		___flmul
 14411 ;;		___xxtofl
 14412 ;;		_ema
 14413 ;;		_getAnalogValue
 14414 ;; This function is called by:
 14415 ;;		_main
 14416 ;; This function uses a non-reentrant model
 14417 ;;
 14418                           
 14419                           
 14420                           ;psect for function _getAnalogValues
 14421  1C72                     _getAnalogValues:	
 14422                           
 14423                           ;system.c: 326: void getAnalogValues(t_globalData *data);system.c: 327: {;system.c: 328:
      +                            static uint16_t avgT, avgV, avgI;;system.c: 329:  uint16_t adc;;system.c: 331:  adc = 
      +                          getAnalogValue(0b000110);
 14424                           
 14425                           ;incstack = 0
 14426                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14427  1C72  3006               	movlw	6
 14428  1C73  31B5  2587  319C   	fcall	_getAnalogValue
 14429  1C76  0140               	movlb	0	; select bank0
 14430  1C77  0825               	movf	?_getAnalogValue+1,w
 14431  1C78  0141               	movlb	1	; select bank1
 14432  1C79  00B4               	movwf	(getAnalogValues@adc+1)^(0+128)
 14433  1C7A  0140               	movlb	0	; select bank0
 14434  1C7B  0824               	movf	?_getAnalogValue,w
 14435  1C7C  0141               	movlb	1	; select bank1
 14436  1C7D  00B3               	movwf	getAnalogValues@adc^(0+128)
 14437                           
 14438                           ;system.c: 332:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 14439  1C7E  0834               	movf	(getAnalogValues@adc+1)^(0+128),w
 14440  1C7F  0140               	movlb	0	; select bank0
 14441  1C80  00B1               	movwf	ema@in+1
 14442  1C81  0141               	movlb	1	; select bank1
 14443  1C82  0833               	movf	getAnalogValues@adc^(0+128),w
 14444  1C83  0140               	movlb	0	; select bank0
 14445  1C84  00B0               	movwf	ema@in
 14446  1C85  0144               	movlb	4	; select bank4
 14447  1C86  082D               	movf	(getAnalogValues@avgT+1)^(0+512),w
 14448  1C87  0140               	movlb	0	; select bank0
 14449  1C88  00B3               	movwf	ema@average+1
 14450  1C89  0144               	movlb	4	; select bank4
 14451  1C8A  082C               	movf	getAnalogValues@avgT^(0+512),w
 14452  1C8B  0140               	movlb	0	; select bank0
 14453  1C8C  00B2               	movwf	ema@average
 14454  1C8D  3000               	movlw	0
 14455  1C8E  00B7               	movwf	ema@alpha+3
 14456  1C8F  3000               	movlw	0
 14457  1C90  00B6               	movwf	ema@alpha+2
 14458  1C91  307F               	movlw	127
 14459  1C92  00B5               	movwf	ema@alpha+1
 14460  1C93  30FF               	movlw	255
 14461  1C94  00B4               	movwf	ema@alpha
 14462  1C95  31AA  22DD  319C   	fcall	_ema
 14463  1C98  0140               	movlb	0	; select bank0
 14464  1C99  0831               	movf	?_ema+1,w
 14465  1C9A  0144               	movlb	4	; select bank4
 14466  1C9B  00AD               	movwf	(getAnalogValues@avgT+1)^(0+512)
 14467  1C9C  0140               	movlb	0	; select bank0
 14468  1C9D  0830               	movf	?_ema,w
 14469  1C9E  0144               	movlb	4	; select bank4
 14470  1C9F  00AC               	movwf	getAnalogValues@avgT^(0+512)
 14471                           
 14472                           ;system.c: 333:  adc = getAnalogValue(0b010000);
 14473  1CA0  3010               	movlw	16
 14474  1CA1  31B5  2587  319C   	fcall	_getAnalogValue
 14475  1CA4  0140               	movlb	0	; select bank0
 14476  1CA5  0825               	movf	?_getAnalogValue+1,w
 14477  1CA6  0141               	movlb	1	; select bank1
 14478  1CA7  00B4               	movwf	(getAnalogValues@adc+1)^(0+128)
 14479  1CA8  0140               	movlb	0	; select bank0
 14480  1CA9  0824               	movf	?_getAnalogValue,w
 14481  1CAA  0141               	movlb	1	; select bank1
 14482  1CAB  00B3               	movwf	getAnalogValues@adc^(0+128)
 14483                           
 14484                           ;system.c: 334:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 14485  1CAC  0834               	movf	(getAnalogValues@adc+1)^(0+128),w
 14486  1CAD  0140               	movlb	0	; select bank0
 14487  1CAE  00B1               	movwf	ema@in+1
 14488  1CAF  0141               	movlb	1	; select bank1
 14489  1CB0  0833               	movf	getAnalogValues@adc^(0+128),w
 14490  1CB1  0140               	movlb	0	; select bank0
 14491  1CB2  00B0               	movwf	ema@in
 14492  1CB3  0144               	movlb	4	; select bank4
 14493  1CB4  082B               	movf	(getAnalogValues@avgV+1)^(0+512),w
 14494  1CB5  0140               	movlb	0	; select bank0
 14495  1CB6  00B3               	movwf	ema@average+1
 14496  1CB7  0144               	movlb	4	; select bank4
 14497  1CB8  082A               	movf	getAnalogValues@avgV^(0+512),w
 14498  1CB9  0140               	movlb	0	; select bank0
 14499  1CBA  00B2               	movwf	ema@average
 14500  1CBB  3000               	movlw	0
 14501  1CBC  00B7               	movwf	ema@alpha+3
 14502  1CBD  3000               	movlw	0
 14503  1CBE  00B6               	movwf	ema@alpha+2
 14504  1CBF  30CC               	movlw	204
 14505  1CC0  00B5               	movwf	ema@alpha+1
 14506  1CC1  30CC               	movlw	204
 14507  1CC2  00B4               	movwf	ema@alpha
 14508  1CC3  31AA  22DD  319C   	fcall	_ema
 14509  1CC6  0140               	movlb	0	; select bank0
 14510  1CC7  0831               	movf	?_ema+1,w
 14511  1CC8  0144               	movlb	4	; select bank4
 14512  1CC9  00AB               	movwf	(getAnalogValues@avgV+1)^(0+512)
 14513  1CCA  0140               	movlb	0	; select bank0
 14514  1CCB  0830               	movf	?_ema,w
 14515  1CCC  0144               	movlb	4	; select bank4
 14516  1CCD  00AA               	movwf	getAnalogValues@avgV^(0+512)
 14517                           
 14518                           ;system.c: 335:  adc = getAnalogValue(0b010001);
 14519  1CCE  3011               	movlw	17
 14520  1CCF  31B5  2587  319C   	fcall	_getAnalogValue
 14521  1CD2  0140               	movlb	0	; select bank0
 14522  1CD3  0825               	movf	?_getAnalogValue+1,w
 14523  1CD4  0141               	movlb	1	; select bank1
 14524  1CD5  00B4               	movwf	(getAnalogValues@adc+1)^(0+128)
 14525  1CD6  0140               	movlb	0	; select bank0
 14526  1CD7  0824               	movf	?_getAnalogValue,w
 14527  1CD8  0141               	movlb	1	; select bank1
 14528  1CD9  00B3               	movwf	getAnalogValues@adc^(0+128)
 14529                           
 14530                           ;system.c: 336:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 14531  1CDA  0834               	movf	(getAnalogValues@adc+1)^(0+128),w
 14532  1CDB  0140               	movlb	0	; select bank0
 14533  1CDC  00B1               	movwf	ema@in+1
 14534  1CDD  0141               	movlb	1	; select bank1
 14535  1CDE  0833               	movf	getAnalogValues@adc^(0+128),w
 14536  1CDF  0140               	movlb	0	; select bank0
 14537  1CE0  00B0               	movwf	ema@in
 14538  1CE1  0144               	movlb	4	; select bank4
 14539  1CE2  0829               	movf	(getAnalogValues@avgI+1)^(0+512),w
 14540  1CE3  0140               	movlb	0	; select bank0
 14541  1CE4  00B3               	movwf	ema@average+1
 14542  1CE5  0144               	movlb	4	; select bank4
 14543  1CE6  0828               	movf	getAnalogValues@avgI^(0+512),w
 14544  1CE7  0140               	movlb	0	; select bank0
 14545  1CE8  00B2               	movwf	ema@average
 14546  1CE9  3000               	movlw	0
 14547  1CEA  00B7               	movwf	ema@alpha+3
 14548  1CEB  3000               	movlw	0
 14549  1CEC  00B6               	movwf	ema@alpha+2
 14550  1CED  304C               	movlw	76
 14551  1CEE  00B5               	movwf	ema@alpha+1
 14552  1CEF  30CC               	movlw	204
 14553  1CF0  00B4               	movwf	ema@alpha
 14554  1CF1  31AA  22DD  319C   	fcall	_ema
 14555  1CF4  0140               	movlb	0	; select bank0
 14556  1CF5  0831               	movf	?_ema+1,w
 14557  1CF6  0144               	movlb	4	; select bank4
 14558  1CF7  00A9               	movwf	(getAnalogValues@avgI+1)^(0+512)
 14559  1CF8  0140               	movlb	0	; select bank0
 14560  1CF9  0830               	movf	?_ema,w
 14561  1CFA  0144               	movlb	4	; select bank4
 14562  1CFB  00A8               	movwf	getAnalogValues@avgI^(0+512)
 14563                           
 14564                           ;system.c: 337:  data->tempAux = ( (avgT * 0.1191) - 34.512 );
 14565  1CFC  30C2               	movlw	194
 14566  1CFD  0140               	movlb	0	; select bank0
 14567  1CFE  00D5               	movwf	___fladd@b+3
 14568  1CFF  300A               	movlw	10
 14569  1D00  00D4               	movwf	___fladd@b+2
 14570  1D01  300C               	movlw	12
 14571  1D02  00D3               	movwf	___fladd@b+1
 14572  1D03  304A               	movlw	74
 14573  1D04  00D2               	movwf	___fladd@b
 14574  1D05  303D               	movlw	61
 14575  1D06  00BB               	movwf	___flmul@b+3
 14576  1D07  30F3               	movlw	243
 14577  1D08  00BA               	movwf	___flmul@b+2
 14578  1D09  30EA               	movlw	234
 14579  1D0A  00B9               	movwf	___flmul@b+1
 14580  1D0B  30B3               	movlw	179
 14581  1D0C  00B8               	movwf	___flmul@b
 14582  1D0D  0144               	movlb	4	; select bank4
 14583  1D0E  082C               	movf	getAnalogValues@avgT^(0+512),w
 14584  1D0F  0140               	movlb	0	; select bank0
 14585  1D10  00AA               	movwf	___xxtofl@val
 14586  1D11  0144               	movlb	4	; select bank4
 14587  1D12  082D               	movf	(getAnalogValues@avgT+1)^(0+512),w
 14588  1D13  0140               	movlb	0	; select bank0
 14589  1D14  00AB               	movwf	___xxtofl@val+1
 14590  1D15  01AC               	clrf	___xxtofl@val+2
 14591  1D16  01AD               	clrf	___xxtofl@val+3
 14592  1D17  3000               	movlw	0
 14593  1D18  31AF  276A  319C   	fcall	___xxtofl
 14594  1D1B  0140               	movlb	0	; select bank0
 14595  1D1C  082D               	movf	?___xxtofl+3,w
 14596  1D1D  00BF               	movwf	___flmul@a+3
 14597  1D1E  082C               	movf	?___xxtofl+2,w
 14598  1D1F  00BE               	movwf	___flmul@a+2
 14599  1D20  082B               	movf	?___xxtofl+1,w
 14600  1D21  00BD               	movwf	___flmul@a+1
 14601  1D22  082A               	movf	?___xxtofl,w
 14602  1D23  00BC               	movwf	___flmul@a
 14603  1D24  3195  25D4  319C   	fcall	___flmul
 14604  1D27  0140               	movlb	0	; select bank0
 14605  1D28  083B               	movf	?___flmul+3,w
 14606  1D29  00D9               	movwf	___fladd@a+3
 14607  1D2A  083A               	movf	?___flmul+2,w
 14608  1D2B  00D8               	movwf	___fladd@a+2
 14609  1D2C  0839               	movf	?___flmul+1,w
 14610  1D2D  00D7               	movwf	___fladd@a+1
 14611  1D2E  0838               	movf	?___flmul,w
 14612  1D2F  00D6               	movwf	___fladd@a
 14613  1D30  3192  220E  319C   	fcall	___fladd
 14614  1D33  0141               	movlb	1	; select bank1
 14615  1D34  082D               	movf	getAnalogValues@data^(0+128),w
 14616  1D35  0086               	movwf	6
 14617  1D36  082E               	movf	(getAnalogValues@data+1)^(0+128),w
 14618  1D37  0087               	movwf	7
 14619  1D38  314D               	addfsr 1,13
 14620  1D39  0140               	movlb	0	; select bank0
 14621  1D3A  0852               	movf	?___fladd,w
 14622  1D3B  3FC0               	movwi [0]fsr1
 14623  1D3C  0853               	movf	?___fladd+1,w
 14624  1D3D  3FC1               	movwi [1]fsr1
 14625  1D3E  0854               	movf	?___fladd+2,w
 14626  1D3F  3FC2               	movwi [2]fsr1
 14627  1D40  0855               	movf	?___fladd+3,w
 14628  1D41  3FC3               	movwi [3]fsr1
 14629                           
 14630                           ;system.c: 338:  data->voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 14631  1D42  3040               	movlw	64
 14632  1D43  00BB               	movwf	___flmul@b+3
 14633  1D44  30A0               	movlw	160
 14634  1D45  00BA               	movwf	___flmul@b+2
 14635  1D46  3000               	movlw	0
 14636  1D47  00B9               	movwf	___flmul@b+1
 14637  1D48  3000               	movlw	0
 14638  1D49  00B8               	movwf	___flmul@b
 14639  1D4A  0144               	movlb	4	; select bank4
 14640  1D4B  082A               	movf	getAnalogValues@avgV^(0+512),w
 14641  1D4C  0140               	movlb	0	; select bank0
 14642  1D4D  00AA               	movwf	___xxtofl@val
 14643  1D4E  0144               	movlb	4	; select bank4
 14644  1D4F  082B               	movf	(getAnalogValues@avgV+1)^(0+512),w
 14645  1D50  0140               	movlb	0	; select bank0
 14646  1D51  00AB               	movwf	___xxtofl@val+1
 14647  1D52  01AC               	clrf	___xxtofl@val+2
 14648  1D53  01AD               	clrf	___xxtofl@val+3
 14649  1D54  3000               	movlw	0
 14650  1D55  31AF  276A  319C   	fcall	___xxtofl
 14651  1D58  0140               	movlb	0	; select bank0
 14652  1D59  082D               	movf	?___xxtofl+3,w
 14653  1D5A  00BF               	movwf	___flmul@a+3
 14654  1D5B  082C               	movf	?___xxtofl+2,w
 14655  1D5C  00BE               	movwf	___flmul@a+2
 14656  1D5D  082B               	movf	?___xxtofl+1,w
 14657  1D5E  00BD               	movwf	___flmul@a+1
 14658  1D5F  082A               	movf	?___xxtofl,w
 14659  1D60  00BC               	movwf	___flmul@a
 14660  1D61  3195  25D4  319C   	fcall	___flmul
 14661  1D64  0140               	movlb	0	; select bank0
 14662  1D65  083B               	movf	?___flmul+3,w
 14663  1D66  0141               	movlb	1	; select bank1
 14664  1D67  00B2               	movwf	(_getAnalogValues$2596+3)^(0+128)
 14665  1D68  0140               	movlb	0	; select bank0
 14666  1D69  083A               	movf	?___flmul+2,w
 14667  1D6A  0141               	movlb	1	; select bank1
 14668  1D6B  00B1               	movwf	(_getAnalogValues$2596+2)^(0+128)
 14669  1D6C  0140               	movlb	0	; select bank0
 14670  1D6D  0839               	movf	?___flmul+1,w
 14671  1D6E  0141               	movlb	1	; select bank1
 14672  1D6F  00B0               	movwf	(_getAnalogValues$2596+1)^(0+128)
 14673  1D70  0140               	movlb	0	; select bank0
 14674  1D71  0838               	movf	?___flmul,w
 14675  1D72  0141               	movlb	1	; select bank1
 14676  1D73  00AF               	movwf	_getAnalogValues$2596^(0+128)
 14677                           
 14678                           ;system.c: 338:  data->voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 14679  1D74  3047               	movlw	71
 14680  1D75  0140               	movlb	0	; select bank0
 14681  1D76  00D5               	movwf	___fldiv@a+3
 14682  1D77  303B               	movlw	59
 14683  1D78  00D4               	movwf	___fldiv@a+2
 14684  1D79  30D1               	movlw	209
 14685  1D7A  00D3               	movwf	___fldiv@a+1
 14686  1D7B  3000               	movlw	0
 14687  1D7C  00D2               	movwf	___fldiv@a
 14688  1D7D  3043               	movlw	67
 14689  1D7E  00BB               	movwf	___flmul@b+3
 14690  1D7F  3045               	movlw	69
 14691  1D80  00BA               	movwf	___flmul@b+2
 14692  1D81  3000               	movlw	0
 14693  1D82  00B9               	movwf	___flmul@b+1
 14694  1D83  3000               	movlw	0
 14695  1D84  00B8               	movwf	___flmul@b
 14696  1D85  0141               	movlb	1	; select bank1
 14697  1D86  0832               	movf	(_getAnalogValues$2596+3)^(0+128),w
 14698  1D87  0140               	movlb	0	; select bank0
 14699  1D88  00BF               	movwf	___flmul@a+3
 14700  1D89  0141               	movlb	1	; select bank1
 14701  1D8A  0831               	movf	(_getAnalogValues$2596+2)^(0+128),w
 14702  1D8B  0140               	movlb	0	; select bank0
 14703  1D8C  00BE               	movwf	___flmul@a+2
 14704  1D8D  0141               	movlb	1	; select bank1
 14705  1D8E  0830               	movf	(_getAnalogValues$2596+1)^(0+128),w
 14706  1D8F  0140               	movlb	0	; select bank0
 14707  1D90  00BD               	movwf	___flmul@a+1
 14708  1D91  0141               	movlb	1	; select bank1
 14709  1D92  082F               	movf	_getAnalogValues$2596^(0+128),w
 14710  1D93  0140               	movlb	0	; select bank0
 14711  1D94  00BC               	movwf	___flmul@a
 14712  1D95  3195  25D4  319C   	fcall	___flmul
 14713  1D98  0140               	movlb	0	; select bank0
 14714  1D99  083B               	movf	?___flmul+3,w
 14715  1D9A  00D9               	movwf	___fldiv@b+3
 14716  1D9B  083A               	movf	?___flmul+2,w
 14717  1D9C  00D8               	movwf	___fldiv@b+2
 14718  1D9D  0839               	movf	?___flmul+1,w
 14719  1D9E  00D7               	movwf	___fldiv@b+1
 14720  1D9F  0838               	movf	?___flmul,w
 14721  1DA0  00D6               	movwf	___fldiv@b
 14722  1DA1  319E  2628  319C   	fcall	___fldiv
 14723  1DA4  0141               	movlb	1	; select bank1
 14724  1DA5  082D               	movf	getAnalogValues@data^(0+128),w
 14725  1DA6  0086               	movwf	6
 14726  1DA7  082E               	movf	(getAnalogValues@data+1)^(0+128),w
 14727  1DA8  0087               	movwf	7
 14728  1DA9  3151               	addfsr 1,17
 14729  1DAA  0140               	movlb	0	; select bank0
 14730  1DAB  0852               	movf	?___fldiv,w
 14731  1DAC  3FC0               	movwi [0]fsr1
 14732  1DAD  0853               	movf	?___fldiv+1,w
 14733  1DAE  3FC1               	movwi [1]fsr1
 14734  1DAF  0854               	movf	?___fldiv+2,w
 14735  1DB0  3FC2               	movwi [2]fsr1
 14736  1DB1  0855               	movf	?___fldiv+3,w
 14737  1DB2  3FC3               	movwi [3]fsr1
 14738                           
 14739                           ;system.c: 339:  data->current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 14740  1DB3  3045               	movlw	69
 14741  1DB4  00D5               	movwf	___fldiv@a+3
 14742  1DB5  301F               	movlw	31
 14743  1DB6  00D4               	movwf	___fldiv@a+2
 14744  1DB7  30D8               	movlw	216
 14745  1DB8  00D3               	movwf	___fldiv@a+1
 14746  1DB9  3000               	movlw	0
 14747  1DBA  00D2               	movwf	___fldiv@a
 14748  1DBB  3040               	movlw	64
 14749  1DBC  00BB               	movwf	___flmul@b+3
 14750  1DBD  30A0               	movlw	160
 14751  1DBE  00BA               	movwf	___flmul@b+2
 14752  1DBF  3000               	movlw	0
 14753  1DC0  00B9               	movwf	___flmul@b+1
 14754  1DC1  3000               	movlw	0
 14755  1DC2  00B8               	movwf	___flmul@b
 14756  1DC3  0144               	movlb	4	; select bank4
 14757  1DC4  0828               	movf	getAnalogValues@avgI^(0+512),w
 14758  1DC5  0140               	movlb	0	; select bank0
 14759  1DC6  00AA               	movwf	___xxtofl@val
 14760  1DC7  0144               	movlb	4	; select bank4
 14761  1DC8  0829               	movf	(getAnalogValues@avgI+1)^(0+512),w
 14762  1DC9  0140               	movlb	0	; select bank0
 14763  1DCA  00AB               	movwf	___xxtofl@val+1
 14764  1DCB  01AC               	clrf	___xxtofl@val+2
 14765  1DCC  01AD               	clrf	___xxtofl@val+3
 14766  1DCD  3000               	movlw	0
 14767  1DCE  31AF  276A  319C   	fcall	___xxtofl
 14768  1DD1  0140               	movlb	0	; select bank0
 14769  1DD2  082D               	movf	?___xxtofl+3,w
 14770  1DD3  00BF               	movwf	___flmul@a+3
 14771  1DD4  082C               	movf	?___xxtofl+2,w
 14772  1DD5  00BE               	movwf	___flmul@a+2
 14773  1DD6  082B               	movf	?___xxtofl+1,w
 14774  1DD7  00BD               	movwf	___flmul@a+1
 14775  1DD8  082A               	movf	?___xxtofl,w
 14776  1DD9  00BC               	movwf	___flmul@a
 14777  1DDA  3195  25D4  319C   	fcall	___flmul
 14778  1DDD  0140               	movlb	0	; select bank0
 14779  1DDE  083B               	movf	?___flmul+3,w
 14780  1DDF  00D9               	movwf	___fldiv@b+3
 14781  1DE0  083A               	movf	?___flmul+2,w
 14782  1DE1  00D8               	movwf	___fldiv@b+2
 14783  1DE2  0839               	movf	?___flmul+1,w
 14784  1DE3  00D7               	movwf	___fldiv@b+1
 14785  1DE4  0838               	movf	?___flmul,w
 14786  1DE5  00D6               	movwf	___fldiv@b
 14787  1DE6  319E  2628  319C   	fcall	___fldiv
 14788  1DE9  0141               	movlb	1	; select bank1
 14789  1DEA  082D               	movf	getAnalogValues@data^(0+128),w
 14790  1DEB  0086               	movwf	6
 14791  1DEC  082E               	movf	(getAnalogValues@data+1)^(0+128),w
 14792  1DED  0087               	movwf	7
 14793  1DEE  3155               	addfsr 1,21
 14794  1DEF  0140               	movlb	0	; select bank0
 14795  1DF0  0852               	movf	?___fldiv,w
 14796  1DF1  3FC0               	movwi [0]fsr1
 14797  1DF2  0853               	movf	?___fldiv+1,w
 14798  1DF3  3FC1               	movwi [1]fsr1
 14799  1DF4  0854               	movf	?___fldiv+2,w
 14800  1DF5  3FC2               	movwi [2]fsr1
 14801  1DF6  0855               	movf	?___fldiv+3,w
 14802  1DF7  3FC3               	movwi [3]fsr1
 14803                           
 14804                           ;system.c: 340:  data->power = data->voltage * data->current;
 14805  1DF8  0141               	movlb	1	; select bank1
 14806  1DF9  082D               	movf	getAnalogValues@data^(0+128),w
 14807  1DFA  0086               	movwf	6
 14808  1DFB  082E               	movf	(getAnalogValues@data+1)^(0+128),w
 14809  1DFC  0087               	movwf	7
 14810  1DFD  3155               	addfsr 1,21
 14811  1DFE  3F40               	moviw [0]fsr1
 14812  1DFF  0140               	movlb	0	; select bank0
 14813  1E00  00B8               	movwf	___flmul@b
 14814  1E01  3F41               	moviw [1]fsr1
 14815  1E02  00B9               	movwf	___flmul@b+1
 14816  1E03  3F42               	moviw [2]fsr1
 14817  1E04  00BA               	movwf	___flmul@b+2
 14818  1E05  3F43               	moviw [3]fsr1
 14819  1E06  00BB               	movwf	___flmul@b+3
 14820  1E07  0141               	movlb	1	; select bank1
 14821  1E08  082D               	movf	getAnalogValues@data^(0+128),w
 14822  1E09  0086               	movwf	6
 14823  1E0A  082E               	movf	(getAnalogValues@data+1)^(0+128),w
 14824  1E0B  0087               	movwf	7
 14825  1E0C  3151               	addfsr 1,17
 14826  1E0D  3F40               	moviw [0]fsr1
 14827  1E0E  0140               	movlb	0	; select bank0
 14828  1E0F  00BC               	movwf	___flmul@a
 14829  1E10  3F41               	moviw [1]fsr1
 14830  1E11  00BD               	movwf	___flmul@a+1
 14831  1E12  3F42               	moviw [2]fsr1
 14832  1E13  00BE               	movwf	___flmul@a+2
 14833  1E14  3F43               	moviw [3]fsr1
 14834  1E15  00BF               	movwf	___flmul@a+3
 14835  1E16  3195  25D4         	fcall	___flmul
 14836  1E18  0141               	movlb	1	; select bank1
 14837  1E19  082D               	movf	getAnalogValues@data^(0+128),w
 14838  1E1A  0086               	movwf	6
 14839  1E1B  082E               	movf	(getAnalogValues@data+1)^(0+128),w
 14840  1E1C  0087               	movwf	7
 14841  1E1D  3159               	addfsr 1,25
 14842  1E1E  0140               	movlb	0	; select bank0
 14843  1E1F  0838               	movf	?___flmul,w
 14844  1E20  3FC0               	movwi [0]fsr1
 14845  1E21  0839               	movf	?___flmul+1,w
 14846  1E22  3FC1               	movwi [1]fsr1
 14847  1E23  083A               	movf	?___flmul+2,w
 14848  1E24  3FC2               	movwi [2]fsr1
 14849  1E25  083B               	movf	?___flmul+3,w
 14850  1E26  3FC3               	movwi [3]fsr1
 14851  1E27  0008               	return
 14852  1E28                     __end_of_getAnalogValues:	
 14853                           
 14854                           	psect	text35
 14855  267C                     __ptext35:	
 14856 ;; *************** function _checkSensor *****************
 14857 ;; Defined at:
 14858 ;;		line 224 in file "system.c"
 14859 ;; Parameters:    Size  Location     Type
 14860 ;;  data            2   25[BANK1 ] PTR struct .
 14861 ;;		 -> data(170), 
 14862 ;; Auto vars:     Size  Location     Type
 14863 ;;  dp              1   70[BANK0 ] PTR struct .
 14864 ;;		 -> dataPacket(15), 
 14865 ;; Return value:  Size  Location     Type
 14866 ;;                  1    wreg      unsigned char 
 14867 ;; Registers used:
 14868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14869 ;; Tracked objects:
 14870 ;;		On entry : 0/0
 14871 ;;		On exit  : 0/0
 14872 ;;		Unchanged: 0/0
 14873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14874 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14876 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14877 ;;      Totals:         0       1       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14878 ;;Total ram usage:        7 bytes
 14879 ;; Hardware stack levels used:    1
 14880 ;; Hardware stack levels required when called:    5
 14881 ;; This function calls:
 14882 ;;		___flge
 14883 ;;		_error
 14884 ;;		_getDataPacket
 14885 ;;		_timeNow
 14886 ;;		_timeSince
 14887 ;;		_uartIsDataReady
 14888 ;;		_uartReset
 14889 ;;		_uartSendByte
 14890 ;; This function is called by:
 14891 ;;		_main
 14892 ;; This function uses a non-reentrant model
 14893 ;;
 14894                           
 14895                           
 14896                           ;psect for function _checkSensor
 14897  267C                     _checkSensor:	
 14898                           
 14899                           ;system.c: 224: uint8_t checkSensor(t_globalData *data);system.c: 225: {;system.c: 226: 
      +                           t_dataPacket *dp;;system.c: 227:  static uint32_t sensorUpdateInterval = 0;;system.c: 2
      +                          28:  static uint32_t sensorTimeout = 0;;system.c: 229:  static uint8_t state = 0;;system
      +                          .c: 232:  if ((data->tempAux < -30) || (data->tempAux > 100)) {
 14900                           
 14901                           ;incstack = 0
 14902                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14903  267C  0141               	movlb	1	; select bank1
 14904  267D  0839               	movf	checkSensor@data^(0+128),w
 14905  267E  0086               	movwf	6
 14906  267F  083A               	movf	(checkSensor@data+1)^(0+128),w
 14907  2680  0087               	movwf	7
 14908  2681  314D               	addfsr 1,13
 14909  2682  3F40               	moviw [0]fsr1
 14910  2683  00AD               	movwf	___flge@ff1^(0+128)
 14911  2684  3F41               	moviw [1]fsr1
 14912  2685  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14913  2686  3F42               	moviw [2]fsr1
 14914  2687  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14915  2688  3F43               	moviw [3]fsr1
 14916  2689  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14917  268A  30C1               	movlw	193
 14918  268B  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14919  268C  30F0               	movlw	240
 14920  268D  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14921  268E  3000               	movlw	0
 14922  268F  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14923  2690  3000               	movlw	0
 14924  2691  00B1               	movwf	___flge@ff2^(0+128)
 14925  2692  31AD  25D6  31A6   	fcall	___flge
 14926  2695  1C03               	btfss	3,0
 14927  2696  2EB2               	goto	l7845
 14928  2697  3042               	movlw	66
 14929  2698  0141               	movlb	1	; select bank1
 14930  2699  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14931  269A  30C8               	movlw	200
 14932  269B  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14933  269C  3000               	movlw	0
 14934  269D  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14935  269E  3000               	movlw	0
 14936  269F  00AD               	movwf	___flge@ff1^(0+128)
 14937  26A0  0839               	movf	checkSensor@data^(0+128),w
 14938  26A1  0086               	movwf	6
 14939  26A2  083A               	movf	(checkSensor@data+1)^(0+128),w
 14940  26A3  0087               	movwf	7
 14941  26A4  314D               	addfsr 1,13
 14942  26A5  3F40               	moviw [0]fsr1
 14943  26A6  00B1               	movwf	___flge@ff2^(0+128)
 14944  26A7  3F41               	moviw [1]fsr1
 14945  26A8  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14946  26A9  3F42               	moviw [2]fsr1
 14947  26AA  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14948  26AB  3F43               	moviw [3]fsr1
 14949  26AC  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14950  26AD  31AD  25D6  31A6   	fcall	___flge
 14951  26B0  1803               	btfsc	3,0
 14952  26B1  2EBB               	goto	l7847
 14953  26B2                     l7845:	
 14954                           
 14955                           ;system.c: 233:   data->status.AUX_SENSOR_OK = 0;
 14956  26B2  0141               	movlb	1	; select bank1
 14957  26B3  0839               	movf	checkSensor@data^(0+128),w
 14958  26B4  3E29               	addlw	41
 14959  26B5  0086               	movwf	6
 14960  26B6  3000               	movlw	0
 14961  26B7  3D3A               	addwfc	(checkSensor@data+1)^(0+128),w
 14962  26B8  0087               	movwf	7
 14963  26B9  1201               	bcf	1,4
 14964                           
 14965                           ;system.c: 234:  } else
 14966  26BA  2FEC               	goto	l7899
 14967  26BB                     l7847:	
 14968                           
 14969                           ;system.c: 235:   data->status.AUX_SENSOR_OK = 1;
 14970  26BB  0141               	movlb	1	; select bank1
 14971  26BC  0839               	movf	checkSensor@data^(0+128),w
 14972  26BD  3E29               	addlw	41
 14973  26BE  0086               	movwf	6
 14974  26BF  3000               	movlw	0
 14975  26C0  3D3A               	addwfc	(checkSensor@data+1)^(0+128),w
 14976  26C1  0087               	movwf	7
 14977  26C2  1601               	bsf	1,4
 14978  26C3  2FEC               	goto	l7899
 14979  26C4                     l7849:	
 14980                           
 14981                           ;system.c: 240:   if (timeSince(sensorUpdateInterval) >= 50) {
 14982  26C4  0144               	movlb	4	; select bank4
 14983  26C5  0827               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
 14984  26C6  0140               	movlb	0	; select bank0
 14985  26C7  00AB               	movwf	timeSince@since+3
 14986  26C8  0144               	movlb	4	; select bank4
 14987  26C9  0826               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
 14988  26CA  0140               	movlb	0	; select bank0
 14989  26CB  00AA               	movwf	timeSince@since+2
 14990  26CC  0144               	movlb	4	; select bank4
 14991  26CD  0825               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
 14992  26CE  0140               	movlb	0	; select bank0
 14993  26CF  00A9               	movwf	timeSince@since+1
 14994  26D0  0144               	movlb	4	; select bank4
 14995  26D1  0824               	movf	checkSensor@sensorUpdateInterval^(0+512),w
 14996  26D2  0140               	movlb	0	; select bank0
 14997  26D3  00A8               	movwf	timeSince@since
 14998  26D4  3187  27A4  31A6   	fcall	_timeSince
 14999  26D7  0140               	movlb	0	; select bank0
 15000  26D8  082B               	movf	?_timeSince+3,w
 15001  26D9  1D03               	btfss	3,2
 15002  26DA  2EE5               	goto	l7851
 15003  26DB  082A               	movf	?_timeSince+2,w
 15004  26DC  1D03               	btfss	3,2
 15005  26DD  2EE5               	goto	l7851
 15006  26DE  0829               	movf	?_timeSince+1,w
 15007  26DF  1D03               	btfss	3,2
 15008  26E0  2EE5               	goto	l7851
 15009  26E1  3032               	movlw	50
 15010  26E2  0228               	subwf	?_timeSince,w
 15011  26E3  1C03               	btfss	3,0
 15012  26E4  2FFE               	goto	l7901
 15013  26E5                     l7851:	
 15014                           
 15015                           ;system.c: 241:    sensorUpdateInterval = sensorTimeout = timeNow();
 15016  26E5  31A8  2000  31A6   	fcall	_timeNow
 15017  26E8  0140               	movlb	0	; select bank0
 15018  26E9  0827               	movf	?_timeNow+3,w
 15019  26EA  0144               	movlb	4	; select bank4
 15020  26EB  00A3               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
 15021  26EC  0140               	movlb	0	; select bank0
 15022  26ED  0826               	movf	?_timeNow+2,w
 15023  26EE  0144               	movlb	4	; select bank4
 15024  26EF  00A2               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
 15025  26F0  0140               	movlb	0	; select bank0
 15026  26F1  0825               	movf	?_timeNow+1,w
 15027  26F2  0144               	movlb	4	; select bank4
 15028  26F3  00A1               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
 15029  26F4  0140               	movlb	0	; select bank0
 15030  26F5  0824               	movf	?_timeNow,w
 15031  26F6  0144               	movlb	4	; select bank4
 15032  26F7  00A0               	movwf	checkSensor@sensorTimeout^(0+512)
 15033  26F8  0823               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 15034  26F9  00A7               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
 15035  26FA  0822               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 15036  26FB  00A6               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
 15037  26FC  0821               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 15038  26FD  00A5               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
 15039  26FE  0820               	movf	checkSensor@sensorTimeout^(0+512),w
 15040  26FF  00A4               	movwf	checkSensor@sensorUpdateInterval^(0+512)
 15041                           
 15042                           ;system.c: 242:    uartSendByte('?');
 15043  2700  303F               	movlw	63
 15044  2701  31B4  24F4  31A6   	fcall	_uartSendByte
 15045                           
 15046                           ;system.c: 243:    state = 1;
 15047  2704  0143               	movlb	3	; select bank3
 15048  2705  01E2               	clrf	checkSensor@state^(0+384)
 15049  2706  0AE2               	incf	checkSensor@state^(0+384),f
 15050  2707  2FFE               	goto	l7901
 15051  2708                     l7857:	
 15052                           
 15053                           ;system.c: 248:   if (timeSince(sensorTimeout) > 20) {
 15054  2708  0144               	movlb	4	; select bank4
 15055  2709  0823               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 15056  270A  0140               	movlb	0	; select bank0
 15057  270B  00AB               	movwf	timeSince@since+3
 15058  270C  0144               	movlb	4	; select bank4
 15059  270D  0822               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 15060  270E  0140               	movlb	0	; select bank0
 15061  270F  00AA               	movwf	timeSince@since+2
 15062  2710  0144               	movlb	4	; select bank4
 15063  2711  0821               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 15064  2712  0140               	movlb	0	; select bank0
 15065  2713  00A9               	movwf	timeSince@since+1
 15066  2714  0144               	movlb	4	; select bank4
 15067  2715  0820               	movf	checkSensor@sensorTimeout^(0+512),w
 15068  2716  0140               	movlb	0	; select bank0
 15069  2717  00A8               	movwf	timeSince@since
 15070  2718  3187  27A4  31A6   	fcall	_timeSince
 15071  271B  0140               	movlb	0	; select bank0
 15072  271C  082B               	movf	?_timeSince+3,w
 15073  271D  1D03               	btfss	3,2
 15074  271E  2F29               	goto	l7859
 15075  271F  082A               	movf	?_timeSince+2,w
 15076  2720  1D03               	btfss	3,2
 15077  2721  2F29               	goto	l7859
 15078  2722  0829               	movf	?_timeSince+1,w
 15079  2723  1D03               	btfss	3,2
 15080  2724  2F29               	goto	l7859
 15081  2725  3015               	movlw	21
 15082  2726  0228               	subwf	?_timeSince,w
 15083  2727  1C03               	btfss	3,0
 15084  2728  2F43               	goto	l7869
 15085  2729                     l7859:	
 15086                           
 15087                           ;system.c: 249:    if (data->status.SENSOR_OK) {
 15088  2729  0141               	movlb	1	; select bank1
 15089  272A  0839               	movf	checkSensor@data^(0+128),w
 15090  272B  3E29               	addlw	41
 15091  272C  0086               	movwf	6
 15092  272D  3000               	movlw	0
 15093  272E  3D3A               	addwfc	(checkSensor@data+1)^(0+128),w
 15094  272F  0087               	movwf	7
 15095  2730  1D81               	btfss	1,3
 15096  2731  2F3F               	goto	l7867
 15097                           
 15098                           ;system.c: 250:     data->status.SENSOR_OK = 0;
 15099  2732  0839               	movf	checkSensor@data^(0+128),w
 15100  2733  3E29               	addlw	41
 15101  2734  0086               	movwf	6
 15102  2735  3000               	movlw	0
 15103  2736  3D3A               	addwfc	(checkSensor@data+1)^(0+128),w
 15104  2737  0087               	movwf	7
 15105  2738  1181               	bcf	1,3
 15106                           
 15107                           ;system.c: 251:     state = 0;
 15108  2739  0143               	movlb	3	; select bank3
 15109  273A  01E2               	clrf	checkSensor@state^(0+384)
 15110                           
 15111                           ;system.c: 252:     error(WARN_SENSOR_TIMEOUT);
 15112  273B  3007               	movlw	7
 15113  273C  31B7  27C5  31A6   	fcall	_error
 15114  273F                     l7867:	
 15115                           
 15116                           ;system.c: 254:    uartReset();
 15117  273F  31B4  24D7  31A6   	fcall	_uartReset
 15118                           
 15119                           ;system.c: 255:   } else if (uartIsDataReady()) {
 15120  2742  2FFE               	goto	l7901
 15121  2743                     l7869:	
 15122  2743  31B5  2509  31A6   	fcall	_uartIsDataReady
 15123  2746  3A00               	xorlw	0
 15124  2747  1903               	skipnz
 15125  2748  2FFE               	goto	l7901
 15126                           
 15127                           ;system.c: 256:    dp = getDataPacket();
 15128  2749  3187  27FE  31A6   	fcall	_getDataPacket
 15129  274C  0141               	movlb	1	; select bank1
 15130  274D  00BB               	movwf	??_checkSensor^(0+128)
 15131  274E  083B               	movf	??_checkSensor^(0+128),w
 15132  274F  0140               	movlb	0	; select bank0
 15133  2750  00E6               	movwf	checkSensor@dp
 15134                           
 15135                           ;system.c: 258:    if ((dp->header == 0xAA) && (dp->status == 1)) {
 15136  2751  0866               	movf	checkSensor@dp,w
 15137  2752  0086               	movwf	6
 15138  2753  3002               	movlw	2	; select bank4/5
 15139  2754  0087               	movwf	7
 15140  2755  30AA               	movlw	170
 15141  2756  0601               	xorwf	1,w
 15142  2757  1D03               	btfss	3,2
 15143  2758  2FD2               	goto	l7887
 15144  2759  0866               	movf	checkSensor@dp,w
 15145  275A  3E02               	addlw	2
 15146  275B  0086               	movwf	6
 15147  275C  3002               	movlw	2	; select bank4/5
 15148  275D  0087               	movwf	7
 15149  275E  0301               	decf	1,w
 15150  275F  1D03               	btfss	3,2
 15151  2760  2FD2               	goto	l7887
 15152                           
 15153                           ;system.c: 259:     data->tempC = dp->tempC;
 15154  2761  0866               	movf	checkSensor@dp,w
 15155  2762  3E03               	addlw	3
 15156  2763  0086               	movwf	6
 15157  2764  3002               	movlw	2	; select bank4/5
 15158  2765  0087               	movwf	7
 15159  2766  3F40               	moviw [0]fsr1
 15160  2767  0141               	movlb	1	; select bank1
 15161  2768  00BB               	movwf	??_checkSensor^(0+128)
 15162  2769  3F41               	moviw [1]fsr1
 15163  276A  00BC               	movwf	(??_checkSensor^(0+128)+1)
 15164  276B  3F42               	moviw [2]fsr1
 15165  276C  00BD               	movwf	(??_checkSensor^(0+128)+2)
 15166  276D  3F43               	moviw [3]fsr1
 15167  276E  00BE               	movwf	(??_checkSensor^(0+128)+3)
 15168  276F  0839               	movf	checkSensor@data^(0+128),w
 15169  2770  0086               	movwf	6
 15170  2771  083A               	movf	(checkSensor@data+1)^(0+128),w
 15171  2772  0087               	movwf	7
 15172  2773  083B               	movf	??_checkSensor^(0+128),w
 15173  2774  3FC0               	movwi [0]fsr1
 15174  2775  083C               	movf	(??_checkSensor+1)^(0+128),w
 15175  2776  3FC1               	movwi [1]fsr1
 15176  2777  083D               	movf	(??_checkSensor+2)^(0+128),w
 15177  2778  3FC2               	movwi [2]fsr1
 15178  2779  083E               	movf	(??_checkSensor+3)^(0+128),w
 15179  277A  3FC3               	movwi [3]fsr1
 15180                           
 15181                           ;system.c: 260:     data->relHum = dp->relHum;
 15182  277B  0140               	movlb	0	; select bank0
 15183  277C  0866               	movf	checkSensor@dp,w
 15184  277D  3E07               	addlw	7
 15185  277E  0086               	movwf	6
 15186  277F  3002               	movlw	2	; select bank4/5
 15187  2780  0087               	movwf	7
 15188  2781  3F40               	moviw [0]fsr1
 15189  2782  0141               	movlb	1	; select bank1
 15190  2783  00BB               	movwf	??_checkSensor^(0+128)
 15191  2784  3F41               	moviw [1]fsr1
 15192  2785  00BC               	movwf	(??_checkSensor^(0+128)+1)
 15193  2786  3F42               	moviw [2]fsr1
 15194  2787  00BD               	movwf	(??_checkSensor^(0+128)+2)
 15195  2788  3F43               	moviw [3]fsr1
 15196  2789  00BE               	movwf	(??_checkSensor^(0+128)+3)
 15197  278A  0839               	movf	checkSensor@data^(0+128),w
 15198  278B  0086               	movwf	6
 15199  278C  083A               	movf	(checkSensor@data+1)^(0+128),w
 15200  278D  0087               	movwf	7
 15201  278E  3144               	addfsr 1,4
 15202  278F  083B               	movf	??_checkSensor^(0+128),w
 15203  2790  3FC0               	movwi [0]fsr1
 15204  2791  083C               	movf	(??_checkSensor+1)^(0+128),w
 15205  2792  3FC1               	movwi [1]fsr1
 15206  2793  083D               	movf	(??_checkSensor+2)^(0+128),w
 15207  2794  3FC2               	movwi [2]fsr1
 15208  2795  083E               	movf	(??_checkSensor+3)^(0+128),w
 15209  2796  3FC3               	movwi [3]fsr1
 15210                           
 15211                           ;system.c: 261:     data->dewPointC = dp->dewPointC;
 15212  2797  0140               	movlb	0	; select bank0
 15213  2798  0866               	movf	checkSensor@dp,w
 15214  2799  3E0B               	addlw	11
 15215  279A  0086               	movwf	6
 15216  279B  3002               	movlw	2	; select bank4/5
 15217  279C  0087               	movwf	7
 15218  279D  3F40               	moviw [0]fsr1
 15219  279E  0141               	movlb	1	; select bank1
 15220  279F  00BB               	movwf	??_checkSensor^(0+128)
 15221  27A0  3F41               	moviw [1]fsr1
 15222  27A1  00BC               	movwf	(??_checkSensor^(0+128)+1)
 15223  27A2  3F42               	moviw [2]fsr1
 15224  27A3  00BD               	movwf	(??_checkSensor^(0+128)+2)
 15225  27A4  3F43               	moviw [3]fsr1
 15226  27A5  00BE               	movwf	(??_checkSensor^(0+128)+3)
 15227  27A6  0839               	movf	checkSensor@data^(0+128),w
 15228  27A7  0086               	movwf	6
 15229  27A8  083A               	movf	(checkSensor@data+1)^(0+128),w
 15230  27A9  0087               	movwf	7
 15231  27AA  3148               	addfsr 1,8
 15232  27AB  083B               	movf	??_checkSensor^(0+128),w
 15233  27AC  3FC0               	movwi [0]fsr1
 15234  27AD  083C               	movf	(??_checkSensor+1)^(0+128),w
 15235  27AE  3FC1               	movwi [1]fsr1
 15236  27AF  083D               	movf	(??_checkSensor+2)^(0+128),w
 15237  27B0  3FC2               	movwi [2]fsr1
 15238  27B1  083E               	movf	(??_checkSensor+3)^(0+128),w
 15239  27B2  3FC3               	movwi [3]fsr1
 15240                           
 15241                           ;system.c: 262:     data->sensorVersion = dp->version;
 15242  27B3  0140               	movlb	0	; select bank0
 15243  27B4  0A66               	incf	checkSensor@dp,w
 15244  27B5  0086               	movwf	6
 15245  27B6  3002               	movlw	2	; select bank4/5
 15246  27B7  0087               	movwf	7
 15247  27B8  0801               	movf	1,w
 15248  27B9  0141               	movlb	1	; select bank1
 15249  27BA  00BB               	movwf	??_checkSensor^(0+128)
 15250  27BB  0839               	movf	checkSensor@data^(0+128),w
 15251  27BC  3E0C               	addlw	12
 15252  27BD  00BC               	movwf	(??_checkSensor+1)^(0+128)
 15253  27BE  3000               	movlw	0
 15254  27BF  3D3A               	addwfc	(checkSensor@data+1)^(0+128),w
 15255  27C0  00BD               	movwf	(??_checkSensor+2)^(0+128)
 15256  27C1  083C               	movf	(??_checkSensor+1)^(0+128),w
 15257  27C2  0086               	movwf	6
 15258  27C3  083D               	movf	(??_checkSensor+2)^(0+128),w
 15259  27C4  0087               	movwf	7
 15260  27C5  083B               	movf	??_checkSensor^(0+128),w
 15261  27C6  0081               	movwf	1
 15262                           
 15263                           ;system.c: 263:     data->status.SENSOR_OK = 1;
 15264  27C7  0839               	movf	checkSensor@data^(0+128),w
 15265  27C8  3E29               	addlw	41
 15266  27C9  0086               	movwf	6
 15267  27CA  3000               	movlw	0
 15268  27CB  3D3A               	addwfc	(checkSensor@data+1)^(0+128),w
 15269  27CC  0087               	movwf	7
 15270  27CD  1581               	bsf	1,3
 15271                           
 15272                           ;system.c: 264:     state = 0;
 15273  27CE  0143               	movlb	3	; select bank3
 15274  27CF  01E2               	clrf	checkSensor@state^(0+384)
 15275                           
 15276                           ;system.c: 266:     return 1;
 15277  27D0  3001               	movlw	1
 15278  27D1  0008               	return
 15279  27D2                     l7887:	
 15280                           
 15281                           ;system.c: 269:     if (data->status.SENSOR_OK) {
 15282  27D2  0141               	movlb	1	; select bank1
 15283  27D3  0839               	movf	checkSensor@data^(0+128),w
 15284  27D4  3E29               	addlw	41
 15285  27D5  0086               	movwf	6
 15286  27D6  3000               	movlw	0
 15287  27D7  3D3A               	addwfc	(checkSensor@data+1)^(0+128),w
 15288  27D8  0087               	movwf	7
 15289  27D9  1D81               	btfss	1,3
 15290  27DA  2FE6               	goto	l7893
 15291                           
 15292                           ;system.c: 270:      data->status.SENSOR_OK = 0;
 15293  27DB  0839               	movf	checkSensor@data^(0+128),w
 15294  27DC  3E29               	addlw	41
 15295  27DD  0086               	movwf	6
 15296  27DE  3000               	movlw	0
 15297  27DF  3D3A               	addwfc	(checkSensor@data+1)^(0+128),w
 15298  27E0  0087               	movwf	7
 15299  27E1  1181               	bcf	1,3
 15300                           
 15301                           ;system.c: 271:      error(WARN_SENSOR_CHECKSUM);
 15302  27E2  3008               	movlw	8
 15303  27E3  31B7  27C5  31A6   	fcall	_error
 15304  27E6                     l7893:	
 15305                           
 15306                           ;system.c: 273:     uartReset();
 15307  27E6  31B4  24D7  31A6   	fcall	_uartReset
 15308  27E9                     l7895:	
 15309                           
 15310                           ;system.c: 275:    state = 0;
 15311  27E9  0143               	movlb	3	; select bank3
 15312  27EA  01E2               	clrf	checkSensor@state^(0+384)
 15313  27EB  2FFE               	goto	l7901
 15314  27EC                     l7899:	
 15315  27EC  0143               	movlb	3	; select bank3
 15316  27ED  0862               	movf	checkSensor@state^(0+384),w
 15317  27EE  0141               	movlb	1	; select bank1
 15318  27EF  00BB               	movwf	??_checkSensor^(0+128)
 15319  27F0  01BC               	clrf	(??_checkSensor^(0+128)+1)
 15320                           
 15321                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15322                           ; Switch size 1, requested type "simple"
 15323                           ; Number of cases is 1, Range of values is 0 to 0
 15324                           ; switch strategies available:
 15325                           ; Name         Instructions Cycles
 15326                           ; simple_byte            4     3 (average)
 15327                           ; direct_byte            8     6 (fixed)
 15328                           ; jumptable            260     6 (fixed)
 15329                           ;	Chosen strategy is simple_byte
 15330  27F1  083C               	movf	(??_checkSensor+1)^(0+128),w
 15331  27F2  3A00               	xorlw	0	; case 0
 15332  27F3  1903               	skipnz
 15333  27F4  2FF6               	goto	l8347
 15334  27F5  2FE9               	goto	l7895
 15335  27F6                     l8347:	
 15336                           
 15337                           ; Switch size 1, requested type "simple"
 15338                           ; Number of cases is 2, Range of values is 0 to 1
 15339                           ; switch strategies available:
 15340                           ; Name         Instructions Cycles
 15341                           ; simple_byte            7     4 (average)
 15342                           ; direct_byte           10     6 (fixed)
 15343                           ; jumptable            260     6 (fixed)
 15344                           ;	Chosen strategy is simple_byte
 15345  27F6  083B               	movf	??_checkSensor^(0+128),w
 15346  27F7  3A00               	xorlw	0	; case 0
 15347  27F8  1903               	skipnz
 15348  27F9  2EC4               	goto	l7849
 15349  27FA  3A01               	xorlw	1	; case 1
 15350  27FB  1903               	skipnz
 15351  27FC  2F08               	goto	l7857
 15352  27FD  2FE9               	goto	l7895
 15353  27FE                     l7901:	
 15354                           
 15355                           ;system.c: 282:  return 0;
 15356  27FE  3000               	movlw	0
 15357  27FF  0008               	return
 15358  2800                     __end_of_checkSensor:	
 15359                           
 15360                           	psect	text36
 15361  34F4                     __ptext36:	
 15362 ;; *************** function _uartSendByte *****************
 15363 ;; Defined at:
 15364 ;;		line 27 in file "uart.c"
 15365 ;; Parameters:    Size  Location     Type
 15366 ;;  s               1    wreg     unsigned char 
 15367 ;; Auto vars:     Size  Location     Type
 15368 ;;  s               1    4[BANK0 ] unsigned char 
 15369 ;; Return value:  Size  Location     Type
 15370 ;;                  1    wreg      void 
 15371 ;; Registers used:
 15372 ;;		wreg
 15373 ;; Tracked objects:
 15374 ;;		On entry : 0/0
 15375 ;;		On exit  : 0/0
 15376 ;;		Unchanged: 0/0
 15377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15381 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15382 ;;Total ram usage:        1 bytes
 15383 ;; Hardware stack levels used:    1
 15384 ;; Hardware stack levels required when called:    3
 15385 ;; This function calls:
 15386 ;;		Nothing
 15387 ;; This function is called by:
 15388 ;;		_checkSensor
 15389 ;; This function uses a non-reentrant model
 15390 ;;
 15391                           
 15392                           
 15393                           ;psect for function _uartSendByte
 15394  34F4                     _uartSendByte:	
 15395                           
 15396                           ;incstack = 0
 15397                           ; Regs used in _uartSendByte: [wreg]
 15398                           ;uartSendByte@s stored from wreg
 15399  34F4  0140               	movlb	0	; select bank0
 15400  34F5  00A4               	movwf	uartSendByte@s
 15401                           
 15402                           ;uart.c: 27: void uartSendByte(char s);uart.c: 28: {;uart.c: 29:  TX1REG = s;
 15403  34F6  0824               	movf	uartSendByte@s,w
 15404  34F7  0142               	movlb	2	; select bank2
 15405  34F8  009A               	movwf	26	;volatile
 15406                           
 15407                           ;uart.c: 30:  __nop();
 15408  34F9  0000               	nop
 15409  34FA                     l360:	
 15410                           ;uart.c: 31:  while (!PIR3bits.TX1IF);
 15411                           
 15412  34FA  014E               	movlb	14	; select bank14
 15413  34FB  1A0F               	btfsc	15,4	;volatile
 15414  34FC  0008               	return
 15415  34FD  2CFA               	goto	l360
 15416  34FE                     __end_of_uartSendByte:	
 15417                           
 15418                           	psect	text37
 15419  34D7                     __ptext37:	
 15420 ;; *************** function _uartReset *****************
 15421 ;; Defined at:
 15422 ;;		line 73 in file "uart.c"
 15423 ;; Parameters:    Size  Location     Type
 15424 ;;		None
 15425 ;; Auto vars:     Size  Location     Type
 15426 ;;  dump            1    0        unsigned char 
 15427 ;; Return value:  Size  Location     Type
 15428 ;;                  1    wreg      void 
 15429 ;; Registers used:
 15430 ;;		wreg, status,2
 15431 ;; Tracked objects:
 15432 ;;		On entry : 0/0
 15433 ;;		On exit  : 0/0
 15434 ;;		Unchanged: 0/0
 15435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15439 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15440 ;;Total ram usage:        1 bytes
 15441 ;; Hardware stack levels used:    1
 15442 ;; Hardware stack levels required when called:    3
 15443 ;; This function calls:
 15444 ;;		Nothing
 15445 ;; This function is called by:
 15446 ;;		_checkSensor
 15447 ;; This function uses a non-reentrant model
 15448 ;;
 15449                           
 15450                           
 15451                           ;psect for function _uartReset
 15452  34D7                     _uartReset:	
 15453                           
 15454                           ;incstack = 0
 15455                           ; Regs used in _uartReset: [wreg+status,2]
 15456  34D7  0142               	movlb	2	; select bank2
 15457  34D8  0819               	movf	25,w	;volatile
 15458                           
 15459                           ;uart.c: 77:  RC1STAbits.CREN = 0;
 15460  34D9  121D               	bcf	29,4	;volatile
 15461                           
 15462                           ;uart.c: 78:  RC1STAbits.CREN = 1;
 15463  34DA  161D               	bsf	29,4	;volatile
 15464                           
 15465                           ;uart.c: 79:  RC1STAbits.SPEN = 0;
 15466  34DB  139D               	bcf	29,7	;volatile
 15467                           
 15468                           ;uart.c: 80:  RC1STAbits.SPEN = 1;
 15469  34DC  179D               	bsf	29,7	;volatile
 15470                           
 15471                           ;uart.c: 81:  rxCount = 0;
 15472  34DD  0140               	movlb	0	; select bank0
 15473  34DE  01EB               	clrf	_rxCount	;volatile
 15474  34DF  0008               	return
 15475  34E0                     __end_of_uartReset:	
 15476                           
 15477                           	psect	text38
 15478  3509                     __ptext38:	
 15479 ;; *************** function _uartIsDataReady *****************
 15480 ;; Defined at:
 15481 ;;		line 13 in file "uart.c"
 15482 ;; Parameters:    Size  Location     Type
 15483 ;;		None
 15484 ;; Auto vars:     Size  Location     Type
 15485 ;;  ret             1    5[BANK0 ] unsigned char 
 15486 ;; Return value:  Size  Location     Type
 15487 ;;                  1    wreg      unsigned char 
 15488 ;; Registers used:
 15489 ;;		wreg, status,2
 15490 ;; Tracked objects:
 15491 ;;		On entry : 0/0
 15492 ;;		On exit  : 0/0
 15493 ;;		Unchanged: 0/0
 15494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15499 ;;Total ram usage:        2 bytes
 15500 ;; Hardware stack levels used:    1
 15501 ;; Hardware stack levels required when called:    3
 15502 ;; This function calls:
 15503 ;;		Nothing
 15504 ;; This function is called by:
 15505 ;;		_checkSensor
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           
 15510                           ;psect for function _uartIsDataReady
 15511  3509                     _uartIsDataReady:	
 15512                           
 15513                           ;uart.c: 15:  uint8_t ret = dataReadyFlag;
 15514                           
 15515                           ;incstack = 0
 15516                           ; Regs used in _uartIsDataReady: [wreg+status,2]
 15517  3509  0143               	movlb	3	; select bank3
 15518  350A  0869               	movf	_dataReadyFlag^(0+384),w	;volatile
 15519  350B  0140               	movlb	0	; select bank0
 15520  350C  00A4               	movwf	??_uartIsDataReady
 15521  350D  0824               	movf	??_uartIsDataReady,w
 15522  350E  00A5               	movwf	uartIsDataReady@ret
 15523                           
 15524                           ;uart.c: 16:  dataReadyFlag = 0;
 15525  350F  0143               	movlb	3	; select bank3
 15526  3510  01E9               	clrf	_dataReadyFlag^(0+384)	;volatile
 15527                           
 15528                           ;uart.c: 17:  return ret;
 15529  3511  0140               	movlb	0	; select bank0
 15530  3512  0825               	movf	uartIsDataReady@ret,w
 15531  3513  0008               	return
 15532  3514                     __end_of_uartIsDataReady:	
 15533                           
 15534                           	psect	text39
 15535  07A4                     __ptext39:	
 15536 ;; *************** function _timeSince *****************
 15537 ;; Defined at:
 15538 ;;		line 21 in file "interrupt.c"
 15539 ;; Parameters:    Size  Location     Type
 15540 ;;  since           4    8[BANK0 ] unsigned long 
 15541 ;; Auto vars:     Size  Location     Type
 15542 ;;  now             4   20[BANK0 ] unsigned long 
 15543 ;; Return value:  Size  Location     Type
 15544 ;;                  4    8[BANK0 ] unsigned long 
 15545 ;; Registers used:
 15546 ;;		wreg, pclath, cstack
 15547 ;; Tracked objects:
 15548 ;;		On entry : 0/0
 15549 ;;		On exit  : 0/0
 15550 ;;		Unchanged: 0/0
 15551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15553 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15554 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15555 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15556 ;;Total ram usage:       16 bytes
 15557 ;; Hardware stack levels used:    1
 15558 ;; Hardware stack levels required when called:    4
 15559 ;; This function calls:
 15560 ;;		_timeNow
 15561 ;; This function is called by:
 15562 ;;		_main
 15563 ;;		_menu
 15564 ;;		_checkSensor
 15565 ;; This function uses a non-reentrant model
 15566 ;;
 15567                           
 15568                           
 15569                           ;psect for function _timeSince
 15570  07A4                     _timeSince:	
 15571                           
 15572                           ;interrupt.c: 21: uint32_t timeSince(uint32_t since);interrupt.c: 22: {;interrupt.c: 23:
      +                            uint32_t now = timeNow();
 15573                           
 15574                           ;incstack = 0
 15575                           ; Regs used in _timeSince: [wreg+pclath+cstack]
 15576  07A4  31A8  2000  3187   	fcall	_timeNow
 15577  07A7  0140               	movlb	0	; select bank0
 15578  07A8  0827               	movf	?_timeNow+3,w
 15579  07A9  00B7               	movwf	timeSince@now+3
 15580  07AA  0826               	movf	?_timeNow+2,w
 15581  07AB  00B6               	movwf	timeSince@now+2
 15582  07AC  0825               	movf	?_timeNow+1,w
 15583  07AD  00B5               	movwf	timeSince@now+1
 15584  07AE  0824               	movf	?_timeNow,w
 15585  07AF  00B4               	movwf	timeSince@now
 15586                           
 15587                           ;interrupt.c: 24:  if (now >= since)
 15588  07B0  082B               	movf	timeSince@since+3,w
 15589  07B1  0237               	subwf	timeSince@now+3,w
 15590  07B2  1D03               	skipz
 15591  07B3  2FBE               	goto	u9725
 15592  07B4  082A               	movf	timeSince@since+2,w
 15593  07B5  0236               	subwf	timeSince@now+2,w
 15594  07B6  1D03               	skipz
 15595  07B7  2FBE               	goto	u9725
 15596  07B8  0829               	movf	timeSince@since+1,w
 15597  07B9  0235               	subwf	timeSince@now+1,w
 15598  07BA  1D03               	skipz
 15599  07BB  2FBE               	goto	u9725
 15600  07BC  0828               	movf	timeSince@since,w
 15601  07BD  0234               	subwf	timeSince@now,w
 15602  07BE                     u9725:	
 15603  07BE  1C03               	skipc
 15604  07BF  2FD5               	goto	l7303
 15605                           
 15606                           ;interrupt.c: 25:   return (now - since);
 15607  07C0  0828               	movf	timeSince@since,w
 15608  07C1  0234               	subwf	timeSince@now,w
 15609  07C2  00AC               	movwf	??_timeSince
 15610  07C3  0829               	movf	timeSince@since+1,w
 15611  07C4  3B35               	subwfb	timeSince@now+1,w
 15612  07C5  00AD               	movwf	??_timeSince+1
 15613  07C6  082A               	movf	timeSince@since+2,w
 15614  07C7  3B36               	subwfb	timeSince@now+2,w
 15615  07C8  00AE               	movwf	??_timeSince+2
 15616  07C9  082B               	movf	timeSince@since+3,w
 15617  07CA  3B37               	subwfb	timeSince@now+3,w
 15618  07CB  00AF               	movwf	??_timeSince+3
 15619  07CC  082F               	movf	??_timeSince+3,w
 15620  07CD  00AB               	movwf	?_timeSince+3
 15621  07CE  082E               	movf	??_timeSince+2,w
 15622  07CF  00AA               	movwf	?_timeSince+2
 15623  07D0  082D               	movf	??_timeSince+1,w
 15624  07D1  00A9               	movwf	?_timeSince+1
 15625  07D2  082C               	movf	??_timeSince,w
 15626  07D3  00A8               	movwf	?_timeSince
 15627  07D4  0008               	return
 15628  07D5                     l7303:	
 15629                           
 15630                           ;interrupt.c: 27:  return (now + (1 + 1000000000UL - since));
 15631  07D5  3001               	movlw	1
 15632  07D6  00AC               	movwf	??_timeSince
 15633  07D7  30CA               	movlw	202
 15634  07D8  00AD               	movwf	??_timeSince+1
 15635  07D9  309A               	movlw	154
 15636  07DA  00AE               	movwf	??_timeSince+2
 15637  07DB  303B               	movlw	59
 15638  07DC  00AF               	movwf	??_timeSince+3
 15639  07DD  0828               	movf	timeSince@since,w
 15640  07DE  0234               	subwf	timeSince@now,w
 15641  07DF  00B0               	movwf	??_timeSince+4
 15642  07E0  0829               	movf	timeSince@since+1,w
 15643  07E1  3B35               	subwfb	timeSince@now+1,w
 15644  07E2  00B1               	movwf	??_timeSince+5
 15645  07E3  082A               	movf	timeSince@since+2,w
 15646  07E4  3B36               	subwfb	timeSince@now+2,w
 15647  07E5  00B2               	movwf	??_timeSince+6
 15648  07E6  082B               	movf	timeSince@since+3,w
 15649  07E7  3B37               	subwfb	timeSince@now+3,w
 15650  07E8  00B3               	movwf	??_timeSince+7
 15651  07E9  0830               	movf	??_timeSince+4,w
 15652  07EA  07AC               	addwf	??_timeSince,f
 15653  07EB  0831               	movf	??_timeSince+5,w
 15654  07EC  3DAD               	addwfc	??_timeSince+1,f
 15655  07ED  0832               	movf	??_timeSince+6,w
 15656  07EE  3DAE               	addwfc	??_timeSince+2,f
 15657  07EF  0833               	movf	??_timeSince+7,w
 15658  07F0  3DAF               	addwfc	??_timeSince+3,f
 15659  07F1  082F               	movf	??_timeSince+3,w
 15660  07F2  00AB               	movwf	?_timeSince+3
 15661  07F3  082E               	movf	??_timeSince+2,w
 15662  07F4  00AA               	movwf	?_timeSince+2
 15663  07F5  082D               	movf	??_timeSince+1,w
 15664  07F6  00A9               	movwf	?_timeSince+1
 15665  07F7  082C               	movf	??_timeSince,w
 15666  07F8  00A8               	movwf	?_timeSince
 15667  07F9  0008               	return
 15668  07FA                     __end_of_timeSince:	
 15669                           
 15670                           	psect	text40
 15671  2800                     __ptext40:	
 15672 ;; *************** function _timeNow *****************
 15673 ;; Defined at:
 15674 ;;		line 13 in file "interrupt.c"
 15675 ;; Parameters:    Size  Location     Type
 15676 ;;		None
 15677 ;; Auto vars:     Size  Location     Type
 15678 ;;		None
 15679 ;; Return value:  Size  Location     Type
 15680 ;;                  4    4[BANK0 ] unsigned long 
 15681 ;; Registers used:
 15682 ;;		wreg
 15683 ;; Tracked objects:
 15684 ;;		On entry : 0/0
 15685 ;;		On exit  : 0/0
 15686 ;;		Unchanged: 0/0
 15687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15688 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15691 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15692 ;;Total ram usage:        4 bytes
 15693 ;; Hardware stack levels used:    1
 15694 ;; Hardware stack levels required when called:    3
 15695 ;; This function calls:
 15696 ;;		Nothing
 15697 ;; This function is called by:
 15698 ;;		_main
 15699 ;;		_timeSince
 15700 ;;		_checkSensor
 15701 ;; This function uses a non-reentrant model
 15702 ;;
 15703                           
 15704                           
 15705                           ;psect for function _timeNow
 15706  2800                     _timeNow:	
 15707                           
 15708                           ;interrupt.c: 15:  return tick100ms;
 15709                           
 15710                           ;incstack = 0
 15711                           ; Regs used in _timeNow: [wreg]
 15712  2800  0142               	movlb	2	; select bank2
 15713  2801  0864               	movf	(_tick100ms+3)^(0+256),w	;volatile
 15714  2802  0140               	movlb	0	; select bank0
 15715  2803  00A7               	movwf	?_timeNow+3
 15716  2804  0142               	movlb	2	; select bank2
 15717  2805  0863               	movf	(_tick100ms+2)^(0+256),w	;volatile
 15718  2806  0140               	movlb	0	; select bank0
 15719  2807  00A6               	movwf	?_timeNow+2
 15720  2808  0142               	movlb	2	; select bank2
 15721  2809  0862               	movf	(_tick100ms+1)^(0+256),w	;volatile
 15722  280A  0140               	movlb	0	; select bank0
 15723  280B  00A5               	movwf	?_timeNow+1
 15724  280C  0142               	movlb	2	; select bank2
 15725  280D  0861               	movf	_tick100ms^(0+256),w	;volatile
 15726  280E  0140               	movlb	0	; select bank0
 15727  280F  00A4               	movwf	?_timeNow
 15728  2810  0008               	return
 15729  2811                     __end_of_timeNow:	
 15730                           
 15731                           	psect	text41
 15732  07FE                     __ptext41:	
 15733 ;; *************** function _getDataPacket *****************
 15734 ;; Defined at:
 15735 ;;		line 20 in file "uart.c"
 15736 ;; Parameters:    Size  Location     Type
 15737 ;;		None
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;		None
 15740 ;; Return value:  Size  Location     Type
 15741 ;;                  1    wreg      PTR struct .
 15742 ;; Registers used:
 15743 ;;		wreg
 15744 ;; Tracked objects:
 15745 ;;		On entry : 0/0
 15746 ;;		On exit  : 0/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15753 ;;Total ram usage:        0 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; Hardware stack levels required when called:    3
 15756 ;; This function calls:
 15757 ;;		Nothing
 15758 ;; This function is called by:
 15759 ;;		_checkSensor
 15760 ;; This function uses a non-reentrant model
 15761 ;;
 15762                           
 15763                           
 15764                           ;psect for function _getDataPacket
 15765  07FE                     _getDataPacket:	
 15766                           
 15767                           ;uart.c: 22:  return &dataPacket;
 15768                           
 15769                           ;incstack = 0
 15770                           ; Regs used in _getDataPacket: [wreg]
 15771  07FE  30BE               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 15772  07FF  0008               	return
 15773  0800                     __end_of_getDataPacket:	
 15774                           
 15775                           	psect	text42
 15776  0983                     __ptext42:	
 15777 ;; *************** function _checkChannelStatus *****************
 15778 ;; Defined at:
 15779 ;;		line 58 in file "system.c"
 15780 ;; Parameters:    Size  Location     Type
 15781 ;;  data            2   25[BANK1 ] PTR struct .
 15782 ;;		 -> data(170), 
 15783 ;; Auto vars:     Size  Location     Type
 15784 ;;  current         4   33[BANK1 ] float 
 15785 ;;  chData          2   37[BANK1 ] PTR struct .
 15786 ;;		 -> data.chData(128), data(170), 
 15787 ;;  adc             2   31[BANK1 ] unsigned short 
 15788 ;; Return value:  Size  Location     Type
 15789 ;;                  1    wreg      unsigned char 
 15790 ;; Registers used:
 15791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15792 ;; Tracked objects:
 15793 ;;		On entry : 0/0
 15794 ;;		On exit  : 0/0
 15795 ;;		Unchanged: 0/0
 15796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15797 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15798 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15799 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15800 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15801 ;;Total ram usage:       14 bytes
 15802 ;; Hardware stack levels used:    1
 15803 ;; Hardware stack levels required when called:    5
 15804 ;; This function calls:
 15805 ;;		___fldiv
 15806 ;;		___fleq
 15807 ;;		___flge
 15808 ;;		___flmul
 15809 ;;		___fltol
 15810 ;;		___xxtofl
 15811 ;;		_ema
 15812 ;;		_error
 15813 ;;		_getAnalogValue
 15814 ;;		_setChannelSwitch
 15815 ;;		_setLoadSwitch
 15816 ;; This function is called by:
 15817 ;;		_main
 15818 ;; This function uses a non-reentrant model
 15819 ;;
 15820                           
 15821                           
 15822                           ;psect for function _checkChannelStatus
 15823  0983                     _checkChannelStatus:	
 15824                           
 15825                           ;system.c: 58: uint8_t checkChannelStatus(t_globalData *data);system.c: 59: {;system.c: 
      +                          60:  uint16_t adc;;system.c: 61:  static uint16_t avg;;system.c: 62:  static uint8_t cha
      +                          nnel = 0;;system.c: 63:  static uint8_t samples = 0;;system.c: 64:  static uint8_t ready
      +                           = 0;;system.c: 65:  float current;;system.c: 66:  t_channelData *chData;;system.c: 68: 
      +                           if (ready) {
 15826                           
 15827                           ;incstack = 0
 15828                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15829  0983  0142               	movlb	2	; select bank2
 15830  0984  0869               	movf	checkChannelStatus@ready^(0+256),w
 15831  0985  1903               	btfsc	3,2
 15832  0986  29A6               	goto	l7943
 15833                           
 15834                           ;system.c: 69:   ready = 0;
 15835  0987  01E9               	clrf	checkChannelStatus@ready^(0+256)
 15836                           
 15837                           ;system.c: 70:   samples = 0;
 15838  0988  0143               	movlb	3	; select bank3
 15839  0989  01E3               	clrf	checkChannelStatus@samples^(0+384)
 15840                           
 15841                           ;system.c: 71:   channel = 0;
 15842  098A  0140               	movlb	0	; select bank0
 15843  098B  01E8               	clrf	checkChannelStatus@channel
 15844                           
 15845                           ;system.c: 72:   avg = data->chData[channel].current;
 15846  098C  0141               	movlb	1	; select bank1
 15847  098D  0839               	movf	checkChannelStatus@data^(0+128),w
 15848  098E  3E2A               	addlw	42
 15849  098F  0086               	movwf	6
 15850  0990  3000               	movlw	0
 15851  0991  3D3A               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 15852  0992  0087               	movwf	7
 15853  0993  3F40               	moviw [0]fsr1
 15854  0994  00AD               	movwf	___fltol@f1^(0+128)
 15855  0995  3F41               	moviw [1]fsr1
 15856  0996  00AE               	movwf	(___fltol@f1+1)^(0+128)
 15857  0997  3F42               	moviw [2]fsr1
 15858  0998  00AF               	movwf	(___fltol@f1+2)^(0+128)
 15859  0999  3F43               	moviw [3]fsr1
 15860  099A  00B0               	movwf	(___fltol@f1+3)^(0+128)
 15861  099B  31AD  2565  3189   	fcall	___fltol
 15862  099E  0141               	movlb	1	; select bank1
 15863  099F  082E               	movf	(?___fltol+1)^(0+128),w
 15864  09A0  0143               	movlb	3	; select bank3
 15865  09A1  00E1               	movwf	(checkChannelStatus@avg+1)^(0+384)
 15866  09A2  0141               	movlb	1	; select bank1
 15867  09A3  082D               	movf	?___fltol^(0+128),w
 15868  09A4  0143               	movlb	3	; select bank3
 15869  09A5  00E0               	movwf	checkChannelStatus@avg^(0+384)
 15870  09A6                     l7943:	
 15871                           
 15872                           ;system.c: 75:  chData = &data->chData[channel];
 15873  09A6  0140               	movlb	0	; select bank0
 15874  09A7  0868               	movf	checkChannelStatus@channel,w
 15875  09A8  0141               	movlb	1	; select bank1
 15876  09A9  00BB               	movwf	??_checkChannelStatus^(0+128)
 15877  09AA  01BC               	clrf	(??_checkChannelStatus^(0+128)+1)
 15878  09AB  3005               	movlw	5
 15879  09AC                     u10605:	
 15880  09AC  35BB               	lslf	??_checkChannelStatus^(0+128),f
 15881  09AD  0DBC               	rlf	(??_checkChannelStatus^(0+128)+1),f
 15882  09AE  0B89               	decfsz	9,f
 15883  09AF  29AC               	goto	u10605
 15884  09B0  083B               	movf	??_checkChannelStatus^(0+128),w
 15885  09B1  0739               	addwf	checkChannelStatus@data^(0+128),w
 15886  09B2  00BD               	movwf	(??_checkChannelStatus+2)^(0+128)
 15887  09B3  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 15888  09B4  3D3A               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 15889  09B5  00BE               	movwf	(??_checkChannelStatus+3)^(0+128)
 15890  09B6  083D               	movf	(??_checkChannelStatus+2)^(0+128),w
 15891  09B7  3E2A               	addlw	42
 15892  09B8  00C5               	movwf	checkChannelStatus@chData^(0+128)
 15893  09B9  3000               	movlw	0
 15894  09BA  3D3E               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 15895  09BB  00C6               	movwf	(checkChannelStatus@chData+1)^(0+128)
 15896                           
 15897                           ;system.c: 77:  if (chData->status == CH_OVERCURRENT) {
 15898  09BC  0845               	movf	checkChannelStatus@chData^(0+128),w
 15899  09BD  0086               	movwf	6
 15900  09BE  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15901  09BF  0087               	movwf	7
 15902  09C0  315F               	addfsr 1,31
 15903  09C1  3004               	movlw	4
 15904  09C2  0601               	xorwf	1,w
 15905  09C3  1D03               	btfss	3,2
 15906  09C4  2A02               	goto	l7955
 15907                           
 15908                           ;system.c: 78:   if (++channel >= 4)
 15909  09C5  3001               	movlw	1
 15910  09C6  00BB               	movwf	??_checkChannelStatus^(0+128)
 15911  09C7  083B               	movf	??_checkChannelStatus^(0+128),w
 15912  09C8  0140               	movlb	0	; select bank0
 15913  09C9  07E8               	addwf	checkChannelStatus@channel,f
 15914  09CA  3004               	movlw	4
 15915  09CB  0268               	subwf	checkChannelStatus@channel,w
 15916  09CC  1C03               	skipc
 15917  09CD  29FF               	goto	l7951
 15918  09CE                     l7949:	
 15919                           
 15920                           ;system.c: 79:    ready = 1;
 15921  09CE  0142               	movlb	2	; select bank2
 15922  09CF  01E9               	clrf	checkChannelStatus@ready^(0+256)
 15923  09D0  0AE9               	incf	checkChannelStatus@ready^(0+256),f
 15924  09D1  29FF               	goto	l7951
 15925  09D2                     l7959:	
 15926                           
 15927                           ;system.c: 86:   adc = getAnalogValue(0b010001);
 15928  09D2  3011               	movlw	17
 15929  09D3  31B5  2587  3189   	fcall	_getAnalogValue
 15930  09D6  0140               	movlb	0	; select bank0
 15931  09D7  0825               	movf	?_getAnalogValue+1,w
 15932  09D8  0141               	movlb	1	; select bank1
 15933  09D9  00C0               	movwf	(checkChannelStatus@adc+1)^(0+128)
 15934  09DA  0140               	movlb	0	; select bank0
 15935  09DB  0824               	movf	?_getAnalogValue,w
 15936  09DC  0141               	movlb	1	; select bank1
 15937  09DD  00BF               	movwf	checkChannelStatus@adc^(0+128)
 15938                           
 15939                           ;system.c: 88:   avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 15940  09DE  0840               	movf	(checkChannelStatus@adc+1)^(0+128),w
 15941  09DF  0140               	movlb	0	; select bank0
 15942  09E0  00B1               	movwf	ema@in+1
 15943  09E1  0141               	movlb	1	; select bank1
 15944  09E2  083F               	movf	checkChannelStatus@adc^(0+128),w
 15945  09E3  0140               	movlb	0	; select bank0
 15946  09E4  00B0               	movwf	ema@in
 15947  09E5  0143               	movlb	3	; select bank3
 15948  09E6  0861               	movf	(checkChannelStatus@avg+1)^(0+384),w
 15949  09E7  0140               	movlb	0	; select bank0
 15950  09E8  00B3               	movwf	ema@average+1
 15951  09E9  0143               	movlb	3	; select bank3
 15952  09EA  0860               	movf	checkChannelStatus@avg^(0+384),w
 15953  09EB  0140               	movlb	0	; select bank0
 15954  09EC  00B2               	movwf	ema@average
 15955  09ED  3000               	movlw	0
 15956  09EE  00B7               	movwf	ema@alpha+3
 15957  09EF  3000               	movlw	0
 15958  09F0  00B6               	movwf	ema@alpha+2
 15959  09F1  30B3               	movlw	179
 15960  09F2  00B5               	movwf	ema@alpha+1
 15961  09F3  3032               	movlw	50
 15962  09F4  00B4               	movwf	ema@alpha
 15963  09F5  31AA  22DD         	fcall	_ema
 15964  09F7  0140               	movlb	0	; select bank0
 15965  09F8  0831               	movf	?_ema+1,w
 15966  09F9  0143               	movlb	3	; select bank3
 15967  09FA  00E1               	movwf	(checkChannelStatus@avg+1)^(0+384)
 15968  09FB  0140               	movlb	0	; select bank0
 15969  09FC  0830               	movf	?_ema,w
 15970  09FD  0143               	movlb	3	; select bank3
 15971  09FE  00E0               	movwf	checkChannelStatus@avg^(0+384)
 15972  09FF                     l7951:	
 15973                           ;system.c: 89:  } else {
 15974                           
 15975                           
 15976                           ;system.c: 80:   return ready;
 15977  09FF  0142               	movlb	2	; select bank2
 15978  0A00  0869               	movf	checkChannelStatus@ready^(0+256),w
 15979  0A01  0008               	return
 15980  0A02                     l7955:	
 15981                           
 15982                           ;system.c: 83:  setChannelSwitch(channel, 1);
 15983  0A02  0140               	movlb	0	; select bank0
 15984  0A03  01A4               	clrf	setChannelSwitch@state
 15985  0A04  0AA4               	incf	setChannelSwitch@state,f
 15986  0A05  0868               	movf	checkChannelStatus@channel,w
 15987  0A06  31A9  211D  3189   	fcall	_setChannelSwitch
 15988                           
 15989                           ;system.c: 85:  if (samples++ < 10) {
 15990  0A09  0143               	movlb	3	; select bank3
 15991  0A0A  0863               	movf	checkChannelStatus@samples^(0+384),w
 15992  0A0B  0AE3               	incf	checkChannelStatus@samples^(0+384),f
 15993  0A0C  0141               	movlb	1	; select bank1
 15994  0A0D  00BB               	movwf	??_checkChannelStatus^(0+128)
 15995  0A0E  300A               	movlw	10
 15996  0A0F  023B               	subwf	??_checkChannelStatus^(0+128),w
 15997  0A10  1C03               	btfss	3,0
 15998  0A11  29D2               	goto	l7959
 15999                           
 16000                           ;system.c: 90:   setChannelSwitch(channel, 0);
 16001  0A12  0140               	movlb	0	; select bank0
 16002  0A13  01A4               	clrf	setChannelSwitch@state
 16003  0A14  0868               	movf	checkChannelStatus@channel,w
 16004  0A15  31A9  211D  3189   	fcall	_setChannelSwitch
 16005                           
 16006                           ;system.c: 92:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 16007  0A18  3045               	movlw	69
 16008  0A19  0140               	movlb	0	; select bank0
 16009  0A1A  00D5               	movwf	___fldiv@a+3
 16010  0A1B  301F               	movlw	31
 16011  0A1C  00D4               	movwf	___fldiv@a+2
 16012  0A1D  30D8               	movlw	216
 16013  0A1E  00D3               	movwf	___fldiv@a+1
 16014  0A1F  3000               	movlw	0
 16015  0A20  00D2               	movwf	___fldiv@a
 16016  0A21  3040               	movlw	64
 16017  0A22  00BB               	movwf	___flmul@b+3
 16018  0A23  30A0               	movlw	160
 16019  0A24  00BA               	movwf	___flmul@b+2
 16020  0A25  3000               	movlw	0
 16021  0A26  00B9               	movwf	___flmul@b+1
 16022  0A27  3000               	movlw	0
 16023  0A28  00B8               	movwf	___flmul@b
 16024  0A29  0143               	movlb	3	; select bank3
 16025  0A2A  0860               	movf	checkChannelStatus@avg^(0+384),w
 16026  0A2B  0140               	movlb	0	; select bank0
 16027  0A2C  00AA               	movwf	___xxtofl@val
 16028  0A2D  0143               	movlb	3	; select bank3
 16029  0A2E  0861               	movf	(checkChannelStatus@avg+1)^(0+384),w
 16030  0A2F  0140               	movlb	0	; select bank0
 16031  0A30  00AB               	movwf	___xxtofl@val+1
 16032  0A31  01AC               	clrf	___xxtofl@val+2
 16033  0A32  01AD               	clrf	___xxtofl@val+3
 16034  0A33  3000               	movlw	0
 16035  0A34  31AF  276A  3189   	fcall	___xxtofl
 16036  0A37  0140               	movlb	0	; select bank0
 16037  0A38  082D               	movf	?___xxtofl+3,w
 16038  0A39  00BF               	movwf	___flmul@a+3
 16039  0A3A  082C               	movf	?___xxtofl+2,w
 16040  0A3B  00BE               	movwf	___flmul@a+2
 16041  0A3C  082B               	movf	?___xxtofl+1,w
 16042  0A3D  00BD               	movwf	___flmul@a+1
 16043  0A3E  082A               	movf	?___xxtofl,w
 16044  0A3F  00BC               	movwf	___flmul@a
 16045  0A40  3195  25D4  3189   	fcall	___flmul
 16046  0A43  0140               	movlb	0	; select bank0
 16047  0A44  083B               	movf	?___flmul+3,w
 16048  0A45  00D9               	movwf	___fldiv@b+3
 16049  0A46  083A               	movf	?___flmul+2,w
 16050  0A47  00D8               	movwf	___fldiv@b+2
 16051  0A48  0839               	movf	?___flmul+1,w
 16052  0A49  00D7               	movwf	___fldiv@b+1
 16053  0A4A  0838               	movf	?___flmul,w
 16054  0A4B  00D6               	movwf	___fldiv@b
 16055  0A4C  319E  2628  3189   	fcall	___fldiv
 16056  0A4F  0140               	movlb	0	; select bank0
 16057  0A50  0855               	movf	?___fldiv+3,w
 16058  0A51  0141               	movlb	1	; select bank1
 16059  0A52  00C4               	movwf	(checkChannelStatus@current+3)^(0+128)
 16060  0A53  0140               	movlb	0	; select bank0
 16061  0A54  0854               	movf	?___fldiv+2,w
 16062  0A55  0141               	movlb	1	; select bank1
 16063  0A56  00C3               	movwf	(checkChannelStatus@current+2)^(0+128)
 16064  0A57  0140               	movlb	0	; select bank0
 16065  0A58  0853               	movf	?___fldiv+1,w
 16066  0A59  0141               	movlb	1	; select bank1
 16067  0A5A  00C2               	movwf	(checkChannelStatus@current+1)^(0+128)
 16068  0A5B  0140               	movlb	0	; select bank0
 16069  0A5C  0852               	movf	?___fldiv,w
 16070  0A5D  0141               	movlb	1	; select bank1
 16071  0A5E  00C1               	movwf	checkChannelStatus@current^(0+128)
 16072                           
 16073                           ;system.c: 95:   if (current < 0.05) {
 16074  0A5F  0844               	movf	(checkChannelStatus@current+3)^(0+128),w
 16075  0A60  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16076  0A61  0843               	movf	(checkChannelStatus@current+2)^(0+128),w
 16077  0A62  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16078  0A63  0842               	movf	(checkChannelStatus@current+1)^(0+128),w
 16079  0A64  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16080  0A65  0841               	movf	checkChannelStatus@current^(0+128),w
 16081  0A66  00AD               	movwf	___flge@ff1^(0+128)
 16082  0A67  303D               	movlw	61
 16083  0A68  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16084  0A69  304C               	movlw	76
 16085  0A6A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16086  0A6B  30CC               	movlw	204
 16087  0A6C  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16088  0A6D  30CD               	movlw	205
 16089  0A6E  00B1               	movwf	___flge@ff2^(0+128)
 16090  0A6F  31AD  25D6  3189   	fcall	___flge
 16091  0A72  1803               	btfsc	3,0
 16092  0A73  2A8E               	goto	l7973
 16093                           
 16094                           ;system.c: 97:    if (chData->status == CH_ENABLED)
 16095  0A74  0141               	movlb	1	; select bank1
 16096  0A75  0845               	movf	checkChannelStatus@chData^(0+128),w
 16097  0A76  0086               	movwf	6
 16098  0A77  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16099  0A78  0087               	movwf	7
 16100  0A79  315F               	addfsr 1,31
 16101  0A7A  0301               	decf	1,w
 16102  0A7B  1D03               	btfss	3,2
 16103  0A7C  2A81               	goto	l7971
 16104                           
 16105                           ;system.c: 98:     error(WARN_REMOVED);
 16106  0A7D  3001               	movlw	1
 16107  0A7E  31B7  27C5  3189   	fcall	_error
 16108  0A81                     l7971:	
 16109                           
 16110                           ;system.c: 99:    chData->status = CH_OPEN;
 16111  0A81  0141               	movlb	1	; select bank1
 16112  0A82  0845               	movf	checkChannelStatus@chData^(0+128),w
 16113  0A83  3E1F               	addlw	31
 16114  0A84  00BB               	movwf	??_checkChannelStatus^(0+128)
 16115  0A85  3000               	movlw	0
 16116  0A86  3D46               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16117  0A87  00BC               	movwf	(??_checkChannelStatus+1)^(0+128)
 16118  0A88  083B               	movf	??_checkChannelStatus^(0+128),w
 16119  0A89  0086               	movwf	6
 16120  0A8A  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 16121  0A8B  0087               	movwf	7
 16122  0A8C  3002               	movlw	2
 16123  0A8D  2C6A               	goto	L7
 16124  0A8E                     l7973:	
 16125                           ;system.c: 100:   } else if ((current > 2.0) || (! PORTCbits.RC2)) {
 16126                           
 16127  0A8E  3040               	movlw	64
 16128  0A8F  0141               	movlb	1	; select bank1
 16129  0A90  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16130  0A91  3000               	movlw	0
 16131  0A92  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16132  0A93  3000               	movlw	0
 16133  0A94  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16134  0A95  3000               	movlw	0
 16135  0A96  00AD               	movwf	___flge@ff1^(0+128)
 16136  0A97  0844               	movf	(checkChannelStatus@current+3)^(0+128),w
 16137  0A98  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16138  0A99  0843               	movf	(checkChannelStatus@current+2)^(0+128),w
 16139  0A9A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16140  0A9B  0842               	movf	(checkChannelStatus@current+1)^(0+128),w
 16141  0A9C  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16142  0A9D  0841               	movf	checkChannelStatus@current^(0+128),w
 16143  0A9E  00B1               	movwf	___flge@ff2^(0+128)
 16144  0A9F  31AD  25D6  3189   	fcall	___flge
 16145  0AA2  1C03               	btfss	3,0
 16146  0AA3  2AA7               	goto	l7977
 16147  0AA4  0140               	movlb	0	; select bank0
 16148  0AA5  190E               	btfsc	14,2	;volatile
 16149  0AA6  2AD9               	goto	l7991
 16150  0AA7                     l7977:	
 16151                           
 16152                           ;system.c: 103:    error(WARN_HEATER_OVERCURRENT);
 16153  0AA7  3004               	movlw	4
 16154  0AA8  31B7  27C5  3189   	fcall	_error
 16155                           
 16156                           ;system.c: 104:    chData->status = CH_OVERCURRENT;
 16157  0AAB  0141               	movlb	1	; select bank1
 16158  0AAC  0845               	movf	checkChannelStatus@chData^(0+128),w
 16159  0AAD  3E1F               	addlw	31
 16160  0AAE  00BB               	movwf	??_checkChannelStatus^(0+128)
 16161  0AAF  3000               	movlw	0
 16162  0AB0  3D46               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16163  0AB1  00BC               	movwf	(??_checkChannelStatus+1)^(0+128)
 16164  0AB2  083B               	movf	??_checkChannelStatus^(0+128),w
 16165  0AB3  0086               	movwf	6
 16166  0AB4  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 16167  0AB5  0087               	movwf	7
 16168  0AB6  3004               	movlw	4
 16169  0AB7  0081               	movwf	1
 16170                           
 16171                           ;system.c: 106:    if (! PORTCbits.RC2) {
 16172  0AB8  0140               	movlb	0	; select bank0
 16173  0AB9  190E               	btfsc	14,2	;volatile
 16174  0ABA  2C6B               	goto	l8021
 16175                           
 16176                           ;system.c: 107:     chData->status = CH_SHORTED;
 16177  0ABB  0141               	movlb	1	; select bank1
 16178  0ABC  0845               	movf	checkChannelStatus@chData^(0+128),w
 16179  0ABD  3E1F               	addlw	31
 16180  0ABE  00BB               	movwf	??_checkChannelStatus^(0+128)
 16181  0ABF  3000               	movlw	0
 16182  0AC0  3D46               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16183  0AC1  00BC               	movwf	(??_checkChannelStatus+1)^(0+128)
 16184  0AC2  083B               	movf	??_checkChannelStatus^(0+128),w
 16185  0AC3  0086               	movwf	6
 16186  0AC4  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 16187  0AC5  0087               	movwf	7
 16188  0AC6  3003               	movlw	3
 16189  0AC7  0081               	movwf	1
 16190                           
 16191                           ;system.c: 108:     setLoadSwitch(0);
 16192  0AC8  3000               	movlw	0
 16193  0AC9  31B4  24AE  3189   	fcall	_setLoadSwitch
 16194                           
 16195                           ;system.c: 109:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 16196  0ACC  3007               	movlw	7
 16197  0ACD  0141               	movlb	1	; select bank1
 16198  0ACE  00BB               	movwf	??_checkChannelStatus^(0+128)
 16199  0ACF  307D               	movlw	125
 16200  0AD0                     u11237:	
 16201  0AD0  0B89               	decfsz	9,f
 16202  0AD1  2AD0               	goto	u11237
 16203  0AD2  0BBB               	decfsz	??_checkChannelStatus^(0+128),f
 16204  0AD3  2AD0               	goto	u11237
 16205                           
 16206                           ;system.c: 110:     setLoadSwitch(1);
 16207  0AD4  3001               	movlw	1
 16208  0AD5  31B4  24AE  3189   	fcall	_setLoadSwitch
 16209  0AD8  2C6B               	goto	l8021
 16210  0AD9                     l7991:	
 16211                           
 16212                           ;system.c: 113:    chData->current = current;
 16213  0AD9  0141               	movlb	1	; select bank1
 16214  0ADA  0845               	movf	checkChannelStatus@chData^(0+128),w
 16215  0ADB  0086               	movwf	6
 16216  0ADC  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16217  0ADD  0087               	movwf	7
 16218  0ADE  0841               	movf	checkChannelStatus@current^(0+128),w
 16219  0ADF  3FC0               	movwi [0]fsr1
 16220  0AE0  0842               	movf	(checkChannelStatus@current+1)^(0+128),w
 16221  0AE1  3FC1               	movwi [1]fsr1
 16222  0AE2  0843               	movf	(checkChannelStatus@current+2)^(0+128),w
 16223  0AE3  3FC2               	movwi [2]fsr1
 16224  0AE4  0844               	movf	(checkChannelStatus@current+3)^(0+128),w
 16225  0AE5  3FC3               	movwi [3]fsr1
 16226                           
 16227                           ;system.c: 114:    chData->Pmax = data->voltage * current;
 16228  0AE6  0844               	movf	(checkChannelStatus@current+3)^(0+128),w
 16229  0AE7  0140               	movlb	0	; select bank0
 16230  0AE8  00BB               	movwf	___flmul@b+3
 16231  0AE9  0141               	movlb	1	; select bank1
 16232  0AEA  0843               	movf	(checkChannelStatus@current+2)^(0+128),w
 16233  0AEB  0140               	movlb	0	; select bank0
 16234  0AEC  00BA               	movwf	___flmul@b+2
 16235  0AED  0141               	movlb	1	; select bank1
 16236  0AEE  0842               	movf	(checkChannelStatus@current+1)^(0+128),w
 16237  0AEF  0140               	movlb	0	; select bank0
 16238  0AF0  00B9               	movwf	___flmul@b+1
 16239  0AF1  0141               	movlb	1	; select bank1
 16240  0AF2  0841               	movf	checkChannelStatus@current^(0+128),w
 16241  0AF3  0140               	movlb	0	; select bank0
 16242  0AF4  00B8               	movwf	___flmul@b
 16243  0AF5  0141               	movlb	1	; select bank1
 16244  0AF6  0839               	movf	checkChannelStatus@data^(0+128),w
 16245  0AF7  0086               	movwf	6
 16246  0AF8  083A               	movf	(checkChannelStatus@data+1)^(0+128),w
 16247  0AF9  0087               	movwf	7
 16248  0AFA  3151               	addfsr 1,17
 16249  0AFB  3F40               	moviw [0]fsr1
 16250  0AFC  0140               	movlb	0	; select bank0
 16251  0AFD  00BC               	movwf	___flmul@a
 16252  0AFE  3F41               	moviw [1]fsr1
 16253  0AFF  00BD               	movwf	___flmul@a+1
 16254  0B00  3F42               	moviw [2]fsr1
 16255  0B01  00BE               	movwf	___flmul@a+2
 16256  0B02  3F43               	moviw [3]fsr1
 16257  0B03  00BF               	movwf	___flmul@a+3
 16258  0B04  3195  25D4  3189   	fcall	___flmul
 16259  0B07  0141               	movlb	1	; select bank1
 16260  0B08  0845               	movf	checkChannelStatus@chData^(0+128),w
 16261  0B09  0086               	movwf	6
 16262  0B0A  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16263  0B0B  0087               	movwf	7
 16264  0B0C  3144               	addfsr 1,4
 16265  0B0D  0140               	movlb	0	; select bank0
 16266  0B0E  0838               	movf	?___flmul,w
 16267  0B0F  3FC0               	movwi [0]fsr1
 16268  0B10  0839               	movf	?___flmul+1,w
 16269  0B11  3FC1               	movwi [1]fsr1
 16270  0B12  083A               	movf	?___flmul+2,w
 16271  0B13  3FC2               	movwi [2]fsr1
 16272  0B14  083B               	movf	?___flmul+3,w
 16273  0B15  3FC3               	movwi [3]fsr1
 16274                           
 16275                           ;system.c: 117:    if (chData->Pset > chData->Pmax)
 16276  0B16  0141               	movlb	1	; select bank1
 16277  0B17  0845               	movf	checkChannelStatus@chData^(0+128),w
 16278  0B18  0086               	movwf	6
 16279  0B19  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16280  0B1A  0087               	movwf	7
 16281  0B1B  3144               	addfsr 1,4
 16282  0B1C  3F40               	moviw [0]fsr1
 16283  0B1D  00AD               	movwf	___flge@ff1^(0+128)
 16284  0B1E  3F41               	moviw [1]fsr1
 16285  0B1F  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16286  0B20  3F42               	moviw [2]fsr1
 16287  0B21  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16288  0B22  3F43               	moviw [3]fsr1
 16289  0B23  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16290  0B24  0845               	movf	checkChannelStatus@chData^(0+128),w
 16291  0B25  0086               	movwf	6
 16292  0B26  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16293  0B27  0087               	movwf	7
 16294  0B28  3150               	addfsr 1,16
 16295  0B29  3F40               	moviw [0]fsr1
 16296  0B2A  00B1               	movwf	___flge@ff2^(0+128)
 16297  0B2B  3F41               	moviw [1]fsr1
 16298  0B2C  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16299  0B2D  3F42               	moviw [2]fsr1
 16300  0B2E  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16301  0B2F  3F43               	moviw [3]fsr1
 16302  0B30  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16303  0B31  31AD  25D6  3189   	fcall	___flge
 16304  0B34  1803               	btfsc	3,0
 16305  0B35  2B51               	goto	l780
 16306                           
 16307                           ;system.c: 118:     chData->Pset = chData->Pmax;
 16308  0B36  0141               	movlb	1	; select bank1
 16309  0B37  0845               	movf	checkChannelStatus@chData^(0+128),w
 16310  0B38  0086               	movwf	6
 16311  0B39  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16312  0B3A  0087               	movwf	7
 16313  0B3B  3144               	addfsr 1,4
 16314  0B3C  3F40               	moviw [0]fsr1
 16315  0B3D  00BB               	movwf	??_checkChannelStatus^(0+128)
 16316  0B3E  3F41               	moviw [1]fsr1
 16317  0B3F  00BC               	movwf	(??_checkChannelStatus^(0+128)+1)
 16318  0B40  3F42               	moviw [2]fsr1
 16319  0B41  00BD               	movwf	(??_checkChannelStatus^(0+128)+2)
 16320  0B42  3F43               	moviw [3]fsr1
 16321  0B43  00BE               	movwf	(??_checkChannelStatus^(0+128)+3)
 16322  0B44  0845               	movf	checkChannelStatus@chData^(0+128),w
 16323  0B45  0086               	movwf	6
 16324  0B46  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16325  0B47  0087               	movwf	7
 16326  0B48  3150               	addfsr 1,16
 16327  0B49  083B               	movf	??_checkChannelStatus^(0+128),w
 16328  0B4A  3FC0               	movwi [0]fsr1
 16329  0B4B  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 16330  0B4C  3FC1               	movwi [1]fsr1
 16331  0B4D  083D               	movf	(??_checkChannelStatus+2)^(0+128),w
 16332  0B4E  3FC2               	movwi [2]fsr1
 16333  0B4F  083E               	movf	(??_checkChannelStatus+3)^(0+128),w
 16334  0B50  3FC3               	movwi [3]fsr1
 16335  0B51                     l780:	
 16336                           
 16337                           ;system.c: 120:    if (data->status.SENSOR_OK) {
 16338  0B51  0141               	movlb	1	; select bank1
 16339  0B52  0839               	movf	checkChannelStatus@data^(0+128),w
 16340  0B53  3E29               	addlw	41
 16341  0B54  0086               	movwf	6
 16342  0B55  3000               	movlw	0
 16343  0B56  3D3A               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 16344  0B57  0087               	movwf	7
 16345  0B58  1D81               	btfss	1,3
 16346  0B59  2B9F               	goto	l8007
 16347                           
 16348                           ;system.c: 121:     if (chData->Pset < 0)
 16349  0B5A  0845               	movf	checkChannelStatus@chData^(0+128),w
 16350  0B5B  0086               	movwf	6
 16351  0B5C  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16352  0B5D  0087               	movwf	7
 16353  0B5E  3150               	addfsr 1,16
 16354  0B5F  3F40               	moviw [0]fsr1
 16355  0B60  00AD               	movwf	___flge@ff1^(0+128)
 16356  0B61  3F41               	moviw [1]fsr1
 16357  0B62  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16358  0B63  3F42               	moviw [2]fsr1
 16359  0B64  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16360  0B65  3F43               	moviw [3]fsr1
 16361  0B66  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16362  0B67  3000               	movlw	0
 16363  0B68  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16364  0B69  3000               	movlw	0
 16365  0B6A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16366  0B6B  3000               	movlw	0
 16367  0B6C  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16368  0B6D  3000               	movlw	0
 16369  0B6E  00B1               	movwf	___flge@ff2^(0+128)
 16370  0B6F  31AD  25D6  3189   	fcall	___flge
 16371  0B72  1803               	btfsc	3,0
 16372  0B73  2B82               	goto	l8003
 16373                           
 16374                           ;system.c: 122:      chData->mode = MODE_AUTO;
 16375  0B74  0141               	movlb	1	; select bank1
 16376  0B75  0845               	movf	checkChannelStatus@chData^(0+128),w
 16377  0B76  3E1E               	addlw	30
 16378  0B77  00BB               	movwf	??_checkChannelStatus^(0+128)
 16379  0B78  3000               	movlw	0
 16380  0B79  3D46               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16381  0B7A  00BC               	movwf	(??_checkChannelStatus+1)^(0+128)
 16382  0B7B  083B               	movf	??_checkChannelStatus^(0+128),w
 16383  0B7C  0086               	movwf	6
 16384  0B7D  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 16385  0B7E  0087               	movwf	7
 16386  0B7F  3001               	movlw	1
 16387  0B80  0081               	movwf	1
 16388  0B81  2BBF               	goto	l8011
 16389  0B82                     l8003:	
 16390  0B82  3000               	movlw	0
 16391  0B83  0141               	movlb	1	; select bank1
 16392  0B84  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16393  0B85  3000               	movlw	0
 16394  0B86  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16395  0B87  3000               	movlw	0
 16396  0B88  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16397  0B89  3000               	movlw	0
 16398  0B8A  00AD               	movwf	___flge@ff1^(0+128)
 16399  0B8B  0845               	movf	checkChannelStatus@chData^(0+128),w
 16400  0B8C  0086               	movwf	6
 16401  0B8D  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16402  0B8E  0087               	movwf	7
 16403  0B8F  3150               	addfsr 1,16
 16404  0B90  3F40               	moviw [0]fsr1
 16405  0B91  00B1               	movwf	___flge@ff2^(0+128)
 16406  0B92  3F41               	moviw [1]fsr1
 16407  0B93  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16408  0B94  3F42               	moviw [2]fsr1
 16409  0B95  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16410  0B96  3F43               	moviw [3]fsr1
 16411  0B97  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16412  0B98  31AD  25D6  3189   	fcall	___flge
 16413  0B9B  1803               	btfsc	3,0
 16414  0B9C  2BBF               	goto	l8011
 16415                           
 16416                           ;system.c: 124:      chData->mode = MODE_MANUAL;
 16417  0B9D  0141               	movlb	1	; select bank1
 16418  0B9E  2BB9               	goto	l8009
 16419  0B9F                     l8007:	
 16420                           
 16421                           ;system.c: 126:     chData->Pset = chData->Pmax;
 16422  0B9F  0845               	movf	checkChannelStatus@chData^(0+128),w
 16423  0BA0  0086               	movwf	6
 16424  0BA1  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16425  0BA2  0087               	movwf	7
 16426  0BA3  3144               	addfsr 1,4
 16427  0BA4  3F40               	moviw [0]fsr1
 16428  0BA5  00BB               	movwf	??_checkChannelStatus^(0+128)
 16429  0BA6  3F41               	moviw [1]fsr1
 16430  0BA7  00BC               	movwf	(??_checkChannelStatus^(0+128)+1)
 16431  0BA8  3F42               	moviw [2]fsr1
 16432  0BA9  00BD               	movwf	(??_checkChannelStatus^(0+128)+2)
 16433  0BAA  3F43               	moviw [3]fsr1
 16434  0BAB  00BE               	movwf	(??_checkChannelStatus^(0+128)+3)
 16435  0BAC  0845               	movf	checkChannelStatus@chData^(0+128),w
 16436  0BAD  0086               	movwf	6
 16437  0BAE  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16438  0BAF  0087               	movwf	7
 16439  0BB0  3150               	addfsr 1,16
 16440  0BB1  083B               	movf	??_checkChannelStatus^(0+128),w
 16441  0BB2  3FC0               	movwi [0]fsr1
 16442  0BB3  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 16443  0BB4  3FC1               	movwi [1]fsr1
 16444  0BB5  083D               	movf	(??_checkChannelStatus+2)^(0+128),w
 16445  0BB6  3FC2               	movwi [2]fsr1
 16446  0BB7  083E               	movf	(??_checkChannelStatus+3)^(0+128),w
 16447  0BB8  3FC3               	movwi [3]fsr1
 16448  0BB9                     l8009:	
 16449                           
 16450                           ;system.c: 127:     chData->mode = MODE_MANUAL;
 16451  0BB9  0845               	movf	checkChannelStatus@chData^(0+128),w
 16452  0BBA  0086               	movwf	6
 16453  0BBB  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16454  0BBC  0087               	movwf	7
 16455  0BBD  315E               	addfsr 1,30
 16456  0BBE  0181               	clrf	1
 16457  0BBF                     l8011:	
 16458                           
 16459                           ;system.c: 129:    if (chData->Pset == 0)
 16460  0BBF  0141               	movlb	1	; select bank1
 16461  0BC0  0845               	movf	checkChannelStatus@chData^(0+128),w
 16462  0BC1  0086               	movwf	6
 16463  0BC2  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16464  0BC3  0087               	movwf	7
 16465  0BC4  3150               	addfsr 1,16
 16466  0BC5  3F40               	moviw [0]fsr1
 16467  0BC6  0140               	movlb	0	; select bank0
 16468  0BC7  00A4               	movwf	___fleq@ff1
 16469  0BC8  3F41               	moviw [1]fsr1
 16470  0BC9  00A5               	movwf	___fleq@ff1+1
 16471  0BCA  3F42               	moviw [2]fsr1
 16472  0BCB  00A6               	movwf	___fleq@ff1+2
 16473  0BCC  3F43               	moviw [3]fsr1
 16474  0BCD  00A7               	movwf	___fleq@ff1+3
 16475  0BCE  3000               	movlw	0
 16476  0BCF  00AB               	movwf	___fleq@ff2+3
 16477  0BD0  3000               	movlw	0
 16478  0BD1  00AA               	movwf	___fleq@ff2+2
 16479  0BD2  3000               	movlw	0
 16480  0BD3  00A9               	movwf	___fleq@ff2+1
 16481  0BD4  3000               	movlw	0
 16482  0BD5  00A8               	movwf	___fleq@ff2
 16483  0BD6  31A9  21F4  3189   	fcall	___fleq
 16484  0BD9  1C03               	btfss	3,0
 16485  0BDA  2BE3               	goto	l8015
 16486                           
 16487                           ;system.c: 130:     chData->status = CH_DISABLED;
 16488  0BDB  0141               	movlb	1	; select bank1
 16489  0BDC  0845               	movf	checkChannelStatus@chData^(0+128),w
 16490  0BDD  0086               	movwf	6
 16491  0BDE  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16492  0BDF  0087               	movwf	7
 16493  0BE0  315F               	addfsr 1,31
 16494  0BE1  0181               	clrf	1
 16495  0BE2  2BF0               	goto	l787
 16496  0BE3                     l8015:	
 16497                           
 16498                           ;system.c: 132:     chData->status = CH_ENABLED;
 16499  0BE3  0141               	movlb	1	; select bank1
 16500  0BE4  0845               	movf	checkChannelStatus@chData^(0+128),w
 16501  0BE5  3E1F               	addlw	31
 16502  0BE6  00BB               	movwf	??_checkChannelStatus^(0+128)
 16503  0BE7  3000               	movlw	0
 16504  0BE8  3D46               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16505  0BE9  00BC               	movwf	(??_checkChannelStatus+1)^(0+128)
 16506  0BEA  083B               	movf	??_checkChannelStatus^(0+128),w
 16507  0BEB  0086               	movwf	6
 16508  0BEC  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 16509  0BED  0087               	movwf	7
 16510  0BEE  3001               	movlw	1
 16511  0BEF  0081               	movwf	1
 16512  0BF0                     l787:	
 16513                           
 16514                           ;system.c: 134:    if (chData->mode == MODE_AUTO)
 16515  0BF0  0845               	movf	checkChannelStatus@chData^(0+128),w
 16516  0BF1  0086               	movwf	6
 16517  0BF2  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16518  0BF3  0087               	movwf	7
 16519  0BF4  315E               	addfsr 1,30
 16520  0BF5  0301               	decf	1,w
 16521  0BF6  1D03               	btfss	3,2
 16522  0BF7  2C15               	goto	l8019
 16523                           
 16524                           ;system.c: 135:     chData->DCreq = (chData->Preq / chData->Pmax) * 100;
 16525  0BF8  0845               	movf	checkChannelStatus@chData^(0+128),w
 16526  0BF9  0086               	movwf	6
 16527  0BFA  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16528  0BFB  0087               	movwf	7
 16529  0BFC  3148               	addfsr 1,8
 16530  0BFD  3F40               	moviw [0]fsr1
 16531  0BFE  0140               	movlb	0	; select bank0
 16532  0BFF  00D6               	movwf	___fldiv@b
 16533  0C00  3F41               	moviw [1]fsr1
 16534  0C01  00D7               	movwf	___fldiv@b+1
 16535  0C02  3F42               	moviw [2]fsr1
 16536  0C03  00D8               	movwf	___fldiv@b+2
 16537  0C04  3F43               	moviw [3]fsr1
 16538  0C05  00D9               	movwf	___fldiv@b+3
 16539  0C06  0141               	movlb	1	; select bank1
 16540  0C07  0845               	movf	checkChannelStatus@chData^(0+128),w
 16541  0C08  0086               	movwf	6
 16542  0C09  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16543  0C0A  0087               	movwf	7
 16544  0C0B  3144               	addfsr 1,4
 16545  0C0C  3F40               	moviw [0]fsr1
 16546  0C0D  0140               	movlb	0	; select bank0
 16547  0C0E  00D2               	movwf	___fldiv@a
 16548  0C0F  3F41               	moviw [1]fsr1
 16549  0C10  00D3               	movwf	___fldiv@a+1
 16550  0C11  3F42               	moviw [2]fsr1
 16551  0C12  00D4               	movwf	___fldiv@a+2
 16552  0C13  3F43               	moviw [3]fsr1
 16553  0C14  2C31               	goto	L8
 16554  0C15                     l8019:	
 16555                           
 16556                           ;system.c: 137:     chData->DCreq = (chData->Pset / chData->Pmax) * 100;
 16557  0C15  0845               	movf	checkChannelStatus@chData^(0+128),w
 16558  0C16  0086               	movwf	6
 16559  0C17  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16560  0C18  0087               	movwf	7
 16561  0C19  3150               	addfsr 1,16
 16562  0C1A  3F40               	moviw [0]fsr1
 16563  0C1B  0140               	movlb	0	; select bank0
 16564  0C1C  00D6               	movwf	___fldiv@b
 16565  0C1D  3F41               	moviw [1]fsr1
 16566  0C1E  00D7               	movwf	___fldiv@b+1
 16567  0C1F  3F42               	moviw [2]fsr1
 16568  0C20  00D8               	movwf	___fldiv@b+2
 16569  0C21  3F43               	moviw [3]fsr1
 16570  0C22  00D9               	movwf	___fldiv@b+3
 16571  0C23  0141               	movlb	1	; select bank1
 16572  0C24  0845               	movf	checkChannelStatus@chData^(0+128),w
 16573  0C25  0086               	movwf	6
 16574  0C26  0846               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16575  0C27  0087               	movwf	7
 16576  0C28  3144               	addfsr 1,4
 16577  0C29  3F40               	moviw [0]fsr1
 16578  0C2A  0140               	movlb	0	; select bank0
 16579  0C2B  00D2               	movwf	___fldiv@a
 16580  0C2C  3F41               	moviw [1]fsr1
 16581  0C2D  00D3               	movwf	___fldiv@a+1
 16582  0C2E  3F42               	moviw [2]fsr1
 16583  0C2F  00D4               	movwf	___fldiv@a+2
 16584  0C30  3F43               	moviw [3]fsr1
 16585  0C31                     L8:	
 16586  0C31  00D5               	movwf	___fldiv@a+3
 16587  0C32  319E  2628  3189   	fcall	___fldiv
 16588  0C35  0140               	movlb	0	; select bank0
 16589  0C36  0855               	movf	?___fldiv+3,w
 16590  0C37  00BF               	movwf	___flmul@a+3
 16591  0C38  0854               	movf	?___fldiv+2,w
 16592  0C39  00BE               	movwf	___flmul@a+2
 16593  0C3A  0853               	movf	?___fldiv+1,w
 16594  0C3B  00BD               	movwf	___flmul@a+1
 16595  0C3C  0852               	movf	?___fldiv,w
 16596  0C3D  00BC               	movwf	___flmul@a
 16597  0C3E  3042               	movlw	66
 16598  0C3F  00BB               	movwf	___flmul@b+3
 16599  0C40  30C8               	movlw	200
 16600  0C41  00BA               	movwf	___flmul@b+2
 16601  0C42  3000               	movlw	0
 16602  0C43  00B9               	movwf	___flmul@b+1
 16603  0C44  3000               	movlw	0
 16604  0C45  00B8               	movwf	___flmul@b
 16605  0C46  3195  25D4  3189   	fcall	___flmul
 16606  0C49  0140               	movlb	0	; select bank0
 16607  0C4A  083B               	movf	?___flmul+3,w
 16608  0C4B  0141               	movlb	1	; select bank1
 16609  0C4C  00B0               	movwf	(___fltol@f1+3)^(0+128)
 16610  0C4D  0140               	movlb	0	; select bank0
 16611  0C4E  083A               	movf	?___flmul+2,w
 16612  0C4F  0141               	movlb	1	; select bank1
 16613  0C50  00AF               	movwf	(___fltol@f1+2)^(0+128)
 16614  0C51  0140               	movlb	0	; select bank0
 16615  0C52  0839               	movf	?___flmul+1,w
 16616  0C53  0141               	movlb	1	; select bank1
 16617  0C54  00AE               	movwf	(___fltol@f1+1)^(0+128)
 16618  0C55  0140               	movlb	0	; select bank0
 16619  0C56  0838               	movf	?___flmul,w
 16620  0C57  0141               	movlb	1	; select bank1
 16621  0C58  00AD               	movwf	___fltol@f1^(0+128)
 16622  0C59  31AD  2565  3189   	fcall	___fltol
 16623  0C5C  0141               	movlb	1	; select bank1
 16624  0C5D  082D               	movf	?___fltol^(0+128),w
 16625  0C5E  00BB               	movwf	??_checkChannelStatus^(0+128)
 16626  0C5F  0845               	movf	checkChannelStatus@chData^(0+128),w
 16627  0C60  3E14               	addlw	20
 16628  0C61  00BC               	movwf	(??_checkChannelStatus+1)^(0+128)
 16629  0C62  3000               	movlw	0
 16630  0C63  3D46               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16631  0C64  00BD               	movwf	(??_checkChannelStatus+2)^(0+128)
 16632  0C65  083C               	movf	(??_checkChannelStatus+1)^(0+128),w
 16633  0C66  0086               	movwf	6
 16634  0C67  083D               	movf	(??_checkChannelStatus+2)^(0+128),w
 16635  0C68  0087               	movwf	7
 16636  0C69  083B               	movf	??_checkChannelStatus^(0+128),w
 16637  0C6A                     L7:	
 16638  0C6A  0081               	movwf	1
 16639  0C6B                     l8021:	
 16640                           
 16641                           ;system.c: 140:   if (channel < 4 - 1) {
 16642  0C6B  3003               	movlw	3
 16643  0C6C  0140               	movlb	0	; select bank0
 16644  0C6D  0268               	subwf	checkChannelStatus@channel,w
 16645  0C6E  1803               	skipnc
 16646  0C6F  29CE               	goto	l7949
 16647                           
 16648                           ;system.c: 141:    channel++;
 16649  0C70  3001               	movlw	1
 16650  0C71  0141               	movlb	1	; select bank1
 16651  0C72  00BB               	movwf	??_checkChannelStatus^(0+128)
 16652  0C73  083B               	movf	??_checkChannelStatus^(0+128),w
 16653  0C74  0140               	movlb	0	; select bank0
 16654  0C75  07E8               	addwf	checkChannelStatus@channel,f
 16655                           
 16656                           ;system.c: 142:    samples = 0;
 16657  0C76  0143               	movlb	3	; select bank3
 16658  0C77  01E3               	clrf	checkChannelStatus@samples^(0+384)
 16659                           
 16660                           ;system.c: 143:   } else {
 16661  0C78  29FF               	goto	l7951
 16662  0C79                     __end_of_checkChannelStatus:	
 16663                           
 16664                           	psect	text43
 16665  34AE                     __ptext43:	
 16666 ;; *************** function _setLoadSwitch *****************
 16667 ;; Defined at:
 16668 ;;		line 3 in file "io.c"
 16669 ;; Parameters:    Size  Location     Type
 16670 ;;  state           1    wreg     unsigned char 
 16671 ;; Auto vars:     Size  Location     Type
 16672 ;;  state           1    4[BANK0 ] unsigned char 
 16673 ;; Return value:  Size  Location     Type
 16674 ;;                  1    wreg      void 
 16675 ;; Registers used:
 16676 ;;		wreg, status,0
 16677 ;; Tracked objects:
 16678 ;;		On entry : 0/0
 16679 ;;		On exit  : 0/0
 16680 ;;		Unchanged: 0/0
 16681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16686 ;;Total ram usage:        1 bytes
 16687 ;; Hardware stack levels used:    1
 16688 ;; Hardware stack levels required when called:    3
 16689 ;; This function calls:
 16690 ;;		Nothing
 16691 ;; This function is called by:
 16692 ;;		_main
 16693 ;;		_viewErrorMessage
 16694 ;;		_checkChannelStatus
 16695 ;;		_systemCheck
 16696 ;; This function uses a non-reentrant model
 16697 ;;
 16698                           
 16699                           
 16700                           ;psect for function _setLoadSwitch
 16701  34AE                     _setLoadSwitch:	
 16702                           
 16703                           ;incstack = 0
 16704                           ; Regs used in _setLoadSwitch: [wreg+status,0]
 16705                           ;setLoadSwitch@state stored from wreg
 16706  34AE  0140               	movlb	0	; select bank0
 16707  34AF  00A4               	movwf	setLoadSwitch@state
 16708                           
 16709                           ;io.c: 3: void setLoadSwitch(uint8_t state);io.c: 4: {;io.c: 5:  LATCbits.LATC3 = state;
 16710  34B0  0C24               	rrf	setLoadSwitch@state,w
 16711  34B1  1C03               	skipc
 16712  34B2  119A               	bcf	26,3	;volatile
 16713  34B3  1803               	skipnc
 16714  34B4  159A               	bsf	26,3	;volatile
 16715  34B5  0008               	return
 16716  34B6                     __end_of_setLoadSwitch:	
 16717                           
 16718                           	psect	text44
 16719  291D                     __ptext44:	
 16720 ;; *************** function _setChannelSwitch *****************
 16721 ;; Defined at:
 16722 ;;		line 12 in file "io.c"
 16723 ;; Parameters:    Size  Location     Type
 16724 ;;  channel         1    wreg     unsigned char 
 16725 ;;  state           1    4[BANK0 ] unsigned char 
 16726 ;; Auto vars:     Size  Location     Type
 16727 ;;  channel         1    7[BANK0 ] unsigned char 
 16728 ;; Return value:  Size  Location     Type
 16729 ;;                  1    wreg      void 
 16730 ;; Registers used:
 16731 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16732 ;; Tracked objects:
 16733 ;;		On entry : 0/0
 16734 ;;		On exit  : 0/0
 16735 ;;		Unchanged: 0/0
 16736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16737 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16739 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16740 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16741 ;;Total ram usage:        4 bytes
 16742 ;; Hardware stack levels used:    1
 16743 ;; Hardware stack levels required when called:    3
 16744 ;; This function calls:
 16745 ;;		Nothing
 16746 ;; This function is called by:
 16747 ;;		_checkChannelStatus
 16748 ;;		_systemCheck
 16749 ;; This function uses a non-reentrant model
 16750 ;;
 16751                           
 16752                           
 16753                           ;psect for function _setChannelSwitch
 16754  291D                     _setChannelSwitch:	
 16755                           
 16756                           ;incstack = 0
 16757                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 16758                           ;setChannelSwitch@channel stored from wreg
 16759  291D  0140               	movlb	0	; select bank0
 16760  291E  00A7               	movwf	setChannelSwitch@channel
 16761                           
 16762                           ;io.c: 12: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 13: {;io.c: 14:  
      +                          switch(channel) {
 16763  291F  294D               	goto	l5461
 16764  2920                     l5449:	
 16765                           
 16766                           ;io.c: 16:   LATAbits.LATA0 = state;
 16767  2920  0C24               	rrf	setChannelSwitch@state,w
 16768  2921  1C03               	skipc
 16769  2922  1018               	bcf	24,0	;volatile
 16770  2923  1803               	skipnc
 16771  2924  1418               	bsf	24,0	;volatile
 16772                           
 16773                           ;io.c: 17:   break;
 16774  2925  0008               	return
 16775  2926                     l5451:	
 16776                           
 16777                           ;io.c: 19:   LATAbits.LATA1 = state;
 16778  2926  0C24               	rrf	setChannelSwitch@state,w
 16779  2927  1C03               	skipc
 16780  2928  1098               	bcf	24,1	;volatile
 16781  2929  1803               	skipnc
 16782  292A  1498               	bsf	24,1	;volatile
 16783                           
 16784                           ;io.c: 20:   break;
 16785  292B  0008               	return
 16786  292C                     l5453:	
 16787                           
 16788                           ;io.c: 22:   LATAbits.LATA2 = state;
 16789  292C  0C24               	rrf	setChannelSwitch@state,w
 16790  292D  1C03               	skipc
 16791  292E  1118               	bcf	24,2	;volatile
 16792  292F  1803               	skipnc
 16793  2930  1518               	bsf	24,2	;volatile
 16794                           
 16795                           ;io.c: 23:   break;
 16796  2931  0008               	return
 16797  2932                     l5455:	
 16798                           
 16799                           ;io.c: 25:   LATAbits.LATA3 = state;
 16800  2932  0C24               	rrf	setChannelSwitch@state,w
 16801  2933  1C03               	skipc
 16802  2934  1198               	bcf	24,3	;volatile
 16803  2935  1803               	skipnc
 16804  2936  1598               	bsf	24,3	;volatile
 16805                           
 16806                           ;io.c: 26:   break;
 16807  2937  0008               	return
 16808  2938                     l5457:	
 16809                           
 16810                           ;io.c: 28:   LATAbits.LATA0 = state;
 16811  2938  0C24               	rrf	setChannelSwitch@state,w
 16812  2939  1C03               	skipc
 16813  293A  1018               	bcf	24,0	;volatile
 16814  293B  1803               	skipnc
 16815  293C  1418               	bsf	24,0	;volatile
 16816                           
 16817                           ;io.c: 29:   LATAbits.LATA1 = state;
 16818  293D  0C24               	rrf	setChannelSwitch@state,w
 16819  293E  1C03               	skipc
 16820  293F  1098               	bcf	24,1	;volatile
 16821  2940  1803               	skipnc
 16822  2941  1498               	bsf	24,1	;volatile
 16823                           
 16824                           ;io.c: 30:   LATAbits.LATA2 = state;
 16825  2942  0C24               	rrf	setChannelSwitch@state,w
 16826  2943  1C03               	skipc
 16827  2944  1118               	bcf	24,2	;volatile
 16828  2945  1803               	skipnc
 16829  2946  1518               	bsf	24,2	;volatile
 16830                           
 16831                           ;io.c: 31:   LATAbits.LATA3 = state;
 16832  2947  0C24               	rrf	setChannelSwitch@state,w
 16833  2948  1C03               	skipc
 16834  2949  1198               	bcf	24,3	;volatile
 16835  294A  1803               	skipnc
 16836  294B  1598               	bsf	24,3	;volatile
 16837                           
 16838                           ;io.c: 32:   break;
 16839  294C  0008               	return
 16840  294D                     l5461:	
 16841  294D  0827               	movf	setChannelSwitch@channel,w
 16842  294E  00A5               	movwf	??_setChannelSwitch
 16843  294F  01A6               	clrf	??_setChannelSwitch+1
 16844                           
 16845                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16846                           ; Switch size 1, requested type "simple"
 16847                           ; Number of cases is 1, Range of values is 0 to 0
 16848                           ; switch strategies available:
 16849                           ; Name         Instructions Cycles
 16850                           ; simple_byte            4     3 (average)
 16851                           ; direct_byte            8     6 (fixed)
 16852                           ; jumptable            260     6 (fixed)
 16853                           ;	Chosen strategy is simple_byte
 16854  2950  0826               	movf	??_setChannelSwitch+1,w
 16855  2951  3A00               	xorlw	0	; case 0
 16856  2952  1903               	skipnz
 16857  2953  2955               	goto	l8349
 16858  2954  2938               	goto	l5457
 16859  2955                     l8349:	
 16860                           
 16861                           ; Switch size 1, requested type "simple"
 16862                           ; Number of cases is 4, Range of values is 0 to 3
 16863                           ; switch strategies available:
 16864                           ; Name         Instructions Cycles
 16865                           ; simple_byte           13     7 (average)
 16866                           ; direct_byte           14     6 (fixed)
 16867                           ; jumptable            260     6 (fixed)
 16868                           ;	Chosen strategy is simple_byte
 16869  2955  0825               	movf	??_setChannelSwitch,w
 16870  2956  3A00               	xorlw	0	; case 0
 16871  2957  1903               	skipnz
 16872  2958  2920               	goto	l5449
 16873  2959  3A01               	xorlw	1	; case 1
 16874  295A  1903               	skipnz
 16875  295B  2926               	goto	l5451
 16876  295C  3A03               	xorlw	3	; case 2
 16877  295D  1903               	skipnz
 16878  295E  292C               	goto	l5453
 16879  295F  3A01               	xorlw	1	; case 3
 16880  2960  1903               	skipnz
 16881  2961  2932               	goto	l5455
 16882  2962  2938               	goto	l5457
 16883  2963  0008               	return
 16884  2964                     __end_of_setChannelSwitch:	
 16885                           
 16886                           	psect	text45
 16887  3587                     __ptext45:	
 16888 ;; *************** function _getAnalogValue *****************
 16889 ;; Defined at:
 16890 ;;		line 40 in file "io.c"
 16891 ;; Parameters:    Size  Location     Type
 16892 ;;  channel         1    wreg     unsigned char 
 16893 ;; Auto vars:     Size  Location     Type
 16894 ;;  channel         1    7[BANK0 ] unsigned char 
 16895 ;; Return value:  Size  Location     Type
 16896 ;;                  2    4[BANK0 ] unsigned short 
 16897 ;; Registers used:
 16898 ;;		wreg, status,2, status,0
 16899 ;; Tracked objects:
 16900 ;;		On entry : 0/0
 16901 ;;		On exit  : 0/0
 16902 ;;		Unchanged: 0/0
 16903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16904 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16906 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16907 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16908 ;;Total ram usage:        4 bytes
 16909 ;; Hardware stack levels used:    1
 16910 ;; Hardware stack levels required when called:    3
 16911 ;; This function calls:
 16912 ;;		Nothing
 16913 ;; This function is called by:
 16914 ;;		_checkChannelStatus
 16915 ;;		_systemCheck
 16916 ;;		_getAnalogValues
 16917 ;; This function uses a non-reentrant model
 16918 ;;
 16919                           
 16920                           
 16921                           ;psect for function _getAnalogValue
 16922  3587                     _getAnalogValue:	
 16923                           
 16924                           ;incstack = 0
 16925                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 16926                           ;getAnalogValue@channel stored from wreg
 16927  3587  0140               	movlb	0	; select bank0
 16928  3588  00A7               	movwf	getAnalogValue@channel
 16929                           
 16930                           ;io.c: 40: uint16_t getAnalogValue(uint8_t channel);io.c: 41: {;io.c: 42:  ADCON0bits.CH
      +                          S = channel;
 16931  3589  0827               	movf	getAnalogValue@channel,w
 16932  358A  00A6               	movwf	??_getAnalogValue
 16933  358B  0DA6               	rlf	??_getAnalogValue,f
 16934  358C  0DA6               	rlf	??_getAnalogValue,f
 16935  358D  0141               	movlb	1	; select bank1
 16936  358E  081D               	movf	29,w	;volatile
 16937  358F  0140               	movlb	0	; select bank0
 16938  3590  0626               	xorwf	??_getAnalogValue,w
 16939  3591  3903               	andlw	-253
 16940  3592  0626               	xorwf	??_getAnalogValue,w
 16941  3593  0141               	movlb	1	; select bank1
 16942  3594  009D               	movwf	29	;volatile
 16943                           
 16944                           ;io.c: 43:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 16945  3595  3200               	nop2	;2 cycle nop
 16946  3596  3200               	nop2	;2 cycle nop
 16947  3597  0000               	nop
 16948                           
 16949                           ;io.c: 44:  ADCON0bits.GO = 1;
 16950  3598  0141               	movlb	1	; select bank1
 16951  3599  149D               	bsf	29,1	;volatile
 16952  359A                     l696:	
 16953                           ;io.c: 45:  while (ADCON0bits.GO);
 16954                           
 16955  359A  189D               	btfsc	29,1	;volatile
 16956  359B  2D9A               	goto	l696
 16957                           
 16958                           ;io.c: 46:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 16959  359C  081C               	movf	28,w	;volatile
 16960  359D  0140               	movlb	0	; select bank0
 16961  359E  00A5               	movwf	?_getAnalogValue+1
 16962  359F  0141               	movlb	1	; select bank1
 16963  35A0  081B               	movf	27,w	;volatile
 16964  35A1  0140               	movlb	0	; select bank0
 16965  35A2  00A4               	movwf	?_getAnalogValue
 16966  35A3  0008               	return
 16967  35A4                     __end_of_getAnalogValue:	
 16968                           
 16969                           	psect	text46
 16970  37C5                     __ptext46:	
 16971 ;; *************** function _error *****************
 16972 ;; Defined at:
 16973 ;;		line 76 in file "error.c"
 16974 ;; Parameters:    Size  Location     Type
 16975 ;;  error           1    wreg     enum E7830
 16976 ;; Auto vars:     Size  Location     Type
 16977 ;;  error           1   12[BANK0 ] enum E7830
 16978 ;; Return value:  Size  Location     Type
 16979 ;;                  1    wreg      void 
 16980 ;; Registers used:
 16981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16982 ;; Tracked objects:
 16983 ;;		On entry : 0/0
 16984 ;;		On exit  : 0/0
 16985 ;;		Unchanged: 0/0
 16986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16991 ;;Total ram usage:        2 bytes
 16992 ;; Hardware stack levels used:    1
 16993 ;; Hardware stack levels required when called:    4
 16994 ;; This function calls:
 16995 ;;		___awmod
 16996 ;; This function is called by:
 16997 ;;		_menu
 16998 ;;		_checkChannelStatus
 16999 ;;		_systemCheck
 17000 ;;		_checkSensor
 17001 ;; This function uses a non-reentrant model
 17002 ;;
 17003                           
 17004                           
 17005                           ;psect for function _error
 17006  37C5                     _error:	
 17007                           
 17008                           ;incstack = 0
 17009                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17010                           ;error@error stored from wreg
 17011  37C5  0140               	movlb	0	; select bank0
 17012  37C6  00AC               	movwf	error@error
 17013                           
 17014                           ;error.c: 76: void error(enum e_errorcode error);error.c: 77: {;error.c: 78:  errorMessa
      +                          geQueue[head] = error;
 17015  37C7  082C               	movf	error@error,w
 17016  37C8  00AB               	movwf	??_error
 17017  37C9  0142               	movlb	2	; select bank2
 17018  37CA  086B               	movf	_head^(0+256),w
 17019  37CB  3EA0               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 17020  37CC  0086               	movwf	6
 17021  37CD  3002               	movlw	2	; select bank5/6
 17022  37CE  0087               	movwf	7
 17023  37CF  0140               	movlb	0	; select bank0
 17024  37D0  082B               	movf	??_error,w
 17025  37D1  0081               	movwf	1
 17026                           
 17027                           ;error.c: 79:  head = (head + 1) % 10;
 17028  37D2  300A               	movlw	10
 17029  37D3  00A4               	movwf	___awmod@divisor
 17030  37D4  3000               	movlw	0
 17031  37D5  00A5               	movwf	___awmod@divisor+1
 17032  37D6  0142               	movlb	2	; select bank2
 17033  37D7  086B               	movf	_head^(0+256),w
 17034  37D8  3E01               	addlw	1
 17035  37D9  0140               	movlb	0	; select bank0
 17036  37DA  00A6               	movwf	___awmod@dividend
 17037  37DB  3000               	movlw	0
 17038  37DC  1803               	skipnc
 17039  37DD  3001               	movlw	1
 17040  37DE  00A7               	movwf	___awmod@dividend+1
 17041  37DF  31A8  20D7  31B7   	fcall	___awmod
 17042  37E2  0140               	movlb	0	; select bank0
 17043  37E3  0824               	movf	?___awmod,w
 17044  37E4  00AB               	movwf	??_error
 17045  37E5  082B               	movf	??_error,w
 17046  37E6  0142               	movlb	2	; select bank2
 17047  37E7  00EB               	movwf	_head^(0+256)
 17048                           
 17049                           ;error.c: 80:  if (head == tail)
 17050  37E8  086B               	movf	_head^(0+256),w
 17051  37E9  0140               	movlb	0	; select bank0
 17052  37EA  0669               	xorwf	_tail,w
 17053  37EB  1D03               	skipz
 17054  37EC  0008               	return
 17055                           
 17056                           ;error.c: 81:   tail = (tail + 1) % 10;
 17057  37ED  300A               	movlw	10
 17058  37EE  00A4               	movwf	___awmod@divisor
 17059  37EF  3000               	movlw	0
 17060  37F0  00A5               	movwf	___awmod@divisor+1
 17061  37F1  0869               	movf	_tail,w
 17062  37F2  3E01               	addlw	1
 17063  37F3  00A6               	movwf	___awmod@dividend
 17064  37F4  3000               	movlw	0
 17065  37F5  1803               	skipnc
 17066  37F6  3001               	movlw	1
 17067  37F7  00A7               	movwf	___awmod@dividend+1
 17068  37F8  31A8  20D7         	fcall	___awmod
 17069  37FA  0140               	movlb	0	; select bank0
 17070  37FB  0824               	movf	?___awmod,w
 17071  37FC  00AB               	movwf	??_error
 17072  37FD  082B               	movf	??_error,w
 17073  37FE  00E9               	movwf	_tail
 17074  37FF  0008               	return
 17075  3800                     __end_of_error:	
 17076                           
 17077                           	psect	text47
 17078  28D7                     __ptext47:	
 17079 ;; *************** function ___awmod *****************
 17080 ;; Defined at:
 17081 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 17082 ;; Parameters:    Size  Location     Type
 17083 ;;  divisor         2    4[BANK0 ] int 
 17084 ;;  dividend        2    6[BANK0 ] int 
 17085 ;; Auto vars:     Size  Location     Type
 17086 ;;  sign            1   10[BANK0 ] unsigned char 
 17087 ;;  counter         1    9[BANK0 ] unsigned char 
 17088 ;; Return value:  Size  Location     Type
 17089 ;;                  2    4[BANK0 ] int 
 17090 ;; Registers used:
 17091 ;;		wreg, status,2, status,0
 17092 ;; Tracked objects:
 17093 ;;		On entry : 0/0
 17094 ;;		On exit  : 0/0
 17095 ;;		Unchanged: 0/0
 17096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17097 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17100 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17101 ;;Total ram usage:        7 bytes
 17102 ;; Hardware stack levels used:    1
 17103 ;; Hardware stack levels required when called:    3
 17104 ;; This function calls:
 17105 ;;		Nothing
 17106 ;; This function is called by:
 17107 ;;		_error
 17108 ;;		_removeLastError
 17109 ;;		_itoa
 17110 ;; This function uses a non-reentrant model
 17111 ;;
 17112                           
 17113                           
 17114                           ;psect for function ___awmod
 17115  28D7                     ___awmod:	
 17116                           
 17117                           ;incstack = 0
 17118                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 17119  28D7  0140               	movlb	0	; select bank0
 17120  28D8  01AA               	clrf	___awmod@sign
 17121  28D9  1FA7               	btfss	___awmod@dividend+1,7
 17122  28DA  28E2               	goto	l6689
 17123  28DB  09A6               	comf	___awmod@dividend,f
 17124  28DC  09A7               	comf	___awmod@dividend+1,f
 17125  28DD  0AA6               	incf	___awmod@dividend,f
 17126  28DE  1903               	skipnz
 17127  28DF  0AA7               	incf	___awmod@dividend+1,f
 17128  28E0  01AA               	clrf	___awmod@sign
 17129  28E1  0AAA               	incf	___awmod@sign,f
 17130  28E2                     l6689:	
 17131  28E2  1FA5               	btfss	___awmod@divisor+1,7
 17132  28E3  28E9               	goto	l6693
 17133  28E4  09A4               	comf	___awmod@divisor,f
 17134  28E5  09A5               	comf	___awmod@divisor+1,f
 17135  28E6  0AA4               	incf	___awmod@divisor,f
 17136  28E7  1903               	skipnz
 17137  28E8  0AA5               	incf	___awmod@divisor+1,f
 17138  28E9                     l6693:	
 17139  28E9  0824               	movf	___awmod@divisor,w
 17140  28EA  0425               	iorwf	___awmod@divisor+1,w
 17141  28EB  1903               	btfsc	3,2
 17142  28EC  2910               	goto	l6711
 17143  28ED  01A9               	clrf	___awmod@counter
 17144  28EE  0AA9               	incf	___awmod@counter,f
 17145  28EF                     l6701:	
 17146  28EF  1BA5               	btfsc	___awmod@divisor+1,7
 17147  28F0  28FB               	goto	l6703
 17148  28F1  3001               	movlw	1
 17149  28F2                     u8525:	
 17150  28F2  35A4               	lslf	___awmod@divisor,f
 17151  28F3  0DA5               	rlf	___awmod@divisor+1,f
 17152  28F4  0B89               	decfsz	9,f
 17153  28F5  28F2               	goto	u8525
 17154  28F6  3001               	movlw	1
 17155  28F7  00A8               	movwf	??___awmod
 17156  28F8  0828               	movf	??___awmod,w
 17157  28F9  07A9               	addwf	___awmod@counter,f
 17158  28FA  28EF               	goto	l6701
 17159  28FB                     l6703:	
 17160  28FB  0825               	movf	___awmod@divisor+1,w
 17161  28FC  0227               	subwf	___awmod@dividend+1,w
 17162  28FD  1D03               	skipz
 17163  28FE  2901               	goto	u8545
 17164  28FF  0824               	movf	___awmod@divisor,w
 17165  2900  0226               	subwf	___awmod@dividend,w
 17166  2901                     u8545:	
 17167  2901  1C03               	skipc
 17168  2902  2907               	goto	l6707
 17169  2903  0824               	movf	___awmod@divisor,w
 17170  2904  02A6               	subwf	___awmod@dividend,f
 17171  2905  0825               	movf	___awmod@divisor+1,w
 17172  2906  3BA7               	subwfb	___awmod@dividend+1,f
 17173  2907                     l6707:	
 17174  2907  3001               	movlw	1
 17175  2908                     u8555:	
 17176  2908  36A5               	lsrf	___awmod@divisor+1,f
 17177  2909  0CA4               	rrf	___awmod@divisor,f
 17178  290A  0B89               	decfsz	9,f
 17179  290B  2908               	goto	u8555
 17180  290C  3001               	movlw	1
 17181  290D  02A9               	subwf	___awmod@counter,f
 17182  290E  1D03               	btfss	3,2
 17183  290F  28FB               	goto	l6703
 17184  2910                     l6711:	
 17185  2910  082A               	movf	___awmod@sign,w
 17186  2911  1903               	btfsc	3,2
 17187  2912  2918               	goto	l6715
 17188  2913  09A6               	comf	___awmod@dividend,f
 17189  2914  09A7               	comf	___awmod@dividend+1,f
 17190  2915  0AA6               	incf	___awmod@dividend,f
 17191  2916  1903               	skipnz
 17192  2917  0AA7               	incf	___awmod@dividend+1,f
 17193  2918                     l6715:	
 17194  2918  0827               	movf	___awmod@dividend+1,w
 17195  2919  00A5               	movwf	?___awmod+1
 17196  291A  0826               	movf	___awmod@dividend,w
 17197  291B  00A4               	movwf	?___awmod
 17198  291C  0008               	return
 17199  291D                     __end_of___awmod:	
 17200                           
 17201                           	psect	text48
 17202  2ADD                     __ptext48:	
 17203 ;; *************** function _ema *****************
 17204 ;; Defined at:
 17205 ;;		line 55 in file "common.c"
 17206 ;; Parameters:    Size  Location     Type
 17207 ;;  in              2   16[BANK0 ] unsigned short 
 17208 ;;  average         2   18[BANK0 ] unsigned short 
 17209 ;;  alpha           4   20[BANK0 ] unsigned long 
 17210 ;; Auto vars:     Size  Location     Type
 17211 ;;  tmp0            4   32[BANK0 ] unsigned long 
 17212 ;; Return value:  Size  Location     Type
 17213 ;;                  2   16[BANK0 ] unsigned short 
 17214 ;; Registers used:
 17215 ;;		wreg, status,2, status,0, pclath, cstack
 17216 ;; Tracked objects:
 17217 ;;		On entry : 0/0
 17218 ;;		On exit  : 0/0
 17219 ;;		Unchanged: 0/0
 17220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17221 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17222 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17223 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17224 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17225 ;;Total ram usage:       20 bytes
 17226 ;; Hardware stack levels used:    1
 17227 ;; Hardware stack levels required when called:    4
 17228 ;; This function calls:
 17229 ;;		___lmul
 17230 ;; This function is called by:
 17231 ;;		_checkChannelStatus
 17232 ;;		_getAnalogValues
 17233 ;; This function uses a non-reentrant model
 17234 ;;
 17235                           
 17236                           
 17237                           ;psect for function _ema
 17238  2ADD                     _ema:	
 17239                           
 17240                           ;common.c: 55: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 56:
      +                           {;common.c: 57:  uint32_t tmp0;;common.c: 58:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 17241                           
 17242                           ;incstack = 0
 17243                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 17244  2ADD  0140               	movlb	0	; select bank0
 17245  2ADE  0832               	movf	ema@average,w
 17246  2ADF  00A4               	movwf	___lmul@multiplier
 17247  2AE0  0833               	movf	ema@average+1,w
 17248  2AE1  00A5               	movwf	___lmul@multiplier+1
 17249  2AE2  01A6               	clrf	___lmul@multiplier+2
 17250  2AE3  01A7               	clrf	___lmul@multiplier+3
 17251  2AE4  3000               	movlw	0
 17252  2AE5  00B8               	movwf	??_ema
 17253  2AE6  3000               	movlw	0
 17254  2AE7  00B9               	movwf	??_ema+1
 17255  2AE8  3001               	movlw	1
 17256  2AE9  00BA               	movwf	??_ema+2
 17257  2AEA  3000               	movlw	0
 17258  2AEB  00BB               	movwf	??_ema+3
 17259  2AEC  0834               	movf	ema@alpha,w
 17260  2AED  02B8               	subwf	??_ema,f
 17261  2AEE  0835               	movf	ema@alpha+1,w
 17262  2AEF  3BB9               	subwfb	??_ema+1,f
 17263  2AF0  0836               	movf	ema@alpha+2,w
 17264  2AF1  3BBA               	subwfb	??_ema+2,f
 17265  2AF2  0837               	movf	ema@alpha+3,w
 17266  2AF3  3BBB               	subwfb	??_ema+3,f
 17267  2AF4  083B               	movf	??_ema+3,w
 17268  2AF5  00AB               	movwf	___lmul@multiplicand+3
 17269  2AF6  083A               	movf	??_ema+2,w
 17270  2AF7  00AA               	movwf	___lmul@multiplicand+2
 17271  2AF8  0839               	movf	??_ema+1,w
 17272  2AF9  00A9               	movwf	___lmul@multiplicand+1
 17273  2AFA  0838               	movf	??_ema,w
 17274  2AFB  00A8               	movwf	___lmul@multiplicand
 17275  2AFC  31B6  26C6  31AA   	fcall	___lmul
 17276  2AFF  0140               	movlb	0	; select bank0
 17277  2B00  0824               	movf	?___lmul,w
 17278  2B01  00BC               	movwf	??_ema+4
 17279  2B02  0825               	movf	?___lmul+1,w
 17280  2B03  00BD               	movwf	??_ema+5
 17281  2B04  0826               	movf	?___lmul+2,w
 17282  2B05  00BE               	movwf	??_ema+6
 17283  2B06  0827               	movf	?___lmul+3,w
 17284  2B07  00BF               	movwf	??_ema+7
 17285  2B08  0830               	movf	ema@in,w
 17286  2B09  00A4               	movwf	___lmul@multiplier
 17287  2B0A  0831               	movf	ema@in+1,w
 17288  2B0B  00A5               	movwf	___lmul@multiplier+1
 17289  2B0C  01A6               	clrf	___lmul@multiplier+2
 17290  2B0D  01A7               	clrf	___lmul@multiplier+3
 17291  2B0E  0837               	movf	ema@alpha+3,w
 17292  2B0F  00AB               	movwf	___lmul@multiplicand+3
 17293  2B10  0836               	movf	ema@alpha+2,w
 17294  2B11  00AA               	movwf	___lmul@multiplicand+2
 17295  2B12  0835               	movf	ema@alpha+1,w
 17296  2B13  00A9               	movwf	___lmul@multiplicand+1
 17297  2B14  0834               	movf	ema@alpha,w
 17298  2B15  00A8               	movwf	___lmul@multiplicand
 17299  2B16  31B6  26C6  31AA   	fcall	___lmul
 17300  2B19  0140               	movlb	0	; select bank0
 17301  2B1A  0824               	movf	?___lmul,w
 17302  2B1B  07BC               	addwf	??_ema+4,f
 17303  2B1C  0825               	movf	?___lmul+1,w
 17304  2B1D  3DBD               	addwfc	??_ema+5,f
 17305  2B1E  0826               	movf	?___lmul+2,w
 17306  2B1F  3DBE               	addwfc	??_ema+6,f
 17307  2B20  0827               	movf	?___lmul+3,w
 17308  2B21  3DBF               	addwfc	??_ema+7,f
 17309  2B22  083F               	movf	??_ema+7,w
 17310  2B23  00C3               	movwf	ema@tmp0+3
 17311  2B24  083E               	movf	??_ema+6,w
 17312  2B25  00C2               	movwf	ema@tmp0+2
 17313  2B26  083D               	movf	??_ema+5,w
 17314  2B27  00C1               	movwf	ema@tmp0+1
 17315  2B28  083C               	movf	??_ema+4,w
 17316  2B29  00C0               	movwf	ema@tmp0
 17317                           
 17318                           ;common.c: 59:  return(tmp0 + 32768) / 65536;
 17319  2B2A  3000               	movlw	0
 17320  2B2B  00B8               	movwf	??_ema
 17321  2B2C  3080               	movlw	128
 17322  2B2D  00B9               	movwf	??_ema+1
 17323  2B2E  3000               	movlw	0
 17324  2B2F  00BA               	movwf	??_ema+2
 17325  2B30  3000               	movlw	0
 17326  2B31  00BB               	movwf	??_ema+3
 17327  2B32  0840               	movf	ema@tmp0,w
 17328  2B33  07B8               	addwf	??_ema,f
 17329  2B34  0841               	movf	ema@tmp0+1,w
 17330  2B35  3DB9               	addwfc	??_ema+1,f
 17331  2B36  0842               	movf	ema@tmp0+2,w
 17332  2B37  3DBA               	addwfc	??_ema+2,f
 17333  2B38  0843               	movf	ema@tmp0+3,w
 17334  2B39  3DBB               	addwfc	??_ema+3,f
 17335  2B3A  3010               	movlw	16
 17336  2B3B                     u6545:	
 17337  2B3B  36BB               	lsrf	??_ema+3,f
 17338  2B3C  0CBA               	rrf	??_ema+2,f
 17339  2B3D  0CB9               	rrf	??_ema+1,f
 17340  2B3E  0CB8               	rrf	??_ema,f
 17341  2B3F  0B89               	decfsz	9,f
 17342  2B40  2B3B               	goto	u6545
 17343  2B41  0839               	movf	??_ema+1,w
 17344  2B42  00B1               	movwf	?_ema+1
 17345  2B43  0838               	movf	??_ema,w
 17346  2B44  00B0               	movwf	?_ema
 17347  2B45  0008               	return
 17348  2B46                     __end_of_ema:	
 17349                           
 17350                           	psect	text49
 17351  36C6                     __ptext49:	
 17352 ;; *************** function ___lmul *****************
 17353 ;; Defined at:
 17354 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 17355 ;; Parameters:    Size  Location     Type
 17356 ;;  multiplier      4    4[BANK0 ] unsigned long 
 17357 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 17358 ;; Auto vars:     Size  Location     Type
 17359 ;;  product         4   12[BANK0 ] unsigned long 
 17360 ;; Return value:  Size  Location     Type
 17361 ;;                  4    4[BANK0 ] unsigned long 
 17362 ;; Registers used:
 17363 ;;		wreg, status,2, status,0
 17364 ;; Tracked objects:
 17365 ;;		On entry : 0/0
 17366 ;;		On exit  : 0/0
 17367 ;;		Unchanged: 0/0
 17368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17369 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17370 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17372 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17373 ;;Total ram usage:       12 bytes
 17374 ;; Hardware stack levels used:    1
 17375 ;; Hardware stack levels required when called:    3
 17376 ;; This function calls:
 17377 ;;		Nothing
 17378 ;; This function is called by:
 17379 ;;		_ema
 17380 ;; This function uses a non-reentrant model
 17381 ;;
 17382                           
 17383                           
 17384                           ;psect for function ___lmul
 17385  36C6                     ___lmul:	
 17386                           
 17387                           ;incstack = 0
 17388                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 17389  36C6  3000               	movlw	0
 17390  36C7  0140               	movlb	0	; select bank0
 17391  36C8  00AF               	movwf	___lmul@product+3
 17392  36C9  3000               	movlw	0
 17393  36CA  00AE               	movwf	___lmul@product+2
 17394  36CB  3000               	movlw	0
 17395  36CC  00AD               	movwf	___lmul@product+1
 17396  36CD  3000               	movlw	0
 17397  36CE  00AC               	movwf	___lmul@product
 17398  36CF                     l4877:	
 17399  36CF  1C24               	btfss	___lmul@multiplier,0
 17400  36D0  2ED9               	goto	l4881
 17401  36D1  0828               	movf	___lmul@multiplicand,w
 17402  36D2  07AC               	addwf	___lmul@product,f
 17403  36D3  0829               	movf	___lmul@multiplicand+1,w
 17404  36D4  3DAD               	addwfc	___lmul@product+1,f
 17405  36D5  082A               	movf	___lmul@multiplicand+2,w
 17406  36D6  3DAE               	addwfc	___lmul@product+2,f
 17407  36D7  082B               	movf	___lmul@multiplicand+3,w
 17408  36D8  3DAF               	addwfc	___lmul@product+3,f
 17409  36D9                     l4881:	
 17410  36D9  3001               	movlw	1
 17411  36DA                     u5865:	
 17412  36DA  35A8               	lslf	___lmul@multiplicand,f
 17413  36DB  0DA9               	rlf	___lmul@multiplicand+1,f
 17414  36DC  0DAA               	rlf	___lmul@multiplicand+2,f
 17415  36DD  0DAB               	rlf	___lmul@multiplicand+3,f
 17416  36DE  0B89               	decfsz	9,f
 17417  36DF  2EDA               	goto	u5865
 17418  36E0  3001               	movlw	1
 17419  36E1                     u5875:	
 17420  36E1  36A7               	lsrf	___lmul@multiplier+3,f
 17421  36E2  0CA6               	rrf	___lmul@multiplier+2,f
 17422  36E3  0CA5               	rrf	___lmul@multiplier+1,f
 17423  36E4  0CA4               	rrf	___lmul@multiplier,f
 17424  36E5  0B89               	decfsz	9,f
 17425  36E6  2EE1               	goto	u5875
 17426  36E7  0827               	movf	___lmul@multiplier+3,w
 17427  36E8  0426               	iorwf	___lmul@multiplier+2,w
 17428  36E9  0425               	iorwf	___lmul@multiplier+1,w
 17429  36EA  0424               	iorwf	___lmul@multiplier,w
 17430  36EB  1D03               	skipz
 17431  36EC  2ECF               	goto	l4877
 17432  36ED  082F               	movf	___lmul@product+3,w
 17433  36EE  00A7               	movwf	?___lmul+3
 17434  36EF  082E               	movf	___lmul@product+2,w
 17435  36F0  00A6               	movwf	?___lmul+2
 17436  36F1  082D               	movf	___lmul@product+1,w
 17437  36F2  00A5               	movwf	?___lmul+1
 17438  36F3  082C               	movf	___lmul@product,w
 17439  36F4  00A4               	movwf	?___lmul
 17440  36F5  0008               	return
 17441  36F6                     __end_of___lmul:	
 17442                           
 17443                           	psect	text50
 17444  29F4                     __ptext50:	
 17445 ;; *************** function ___fleq *****************
 17446 ;; Defined at:
 17447 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 17448 ;; Parameters:    Size  Location     Type
 17449 ;;  ff1             4    4[BANK0 ] unsigned long 
 17450 ;;  ff2             4    8[BANK0 ] unsigned long 
 17451 ;; Auto vars:     Size  Location     Type
 17452 ;;		None
 17453 ;; Return value:  Size  Location     Type
 17454 ;;		None               void
 17455 ;; Registers used:
 17456 ;;		wreg, status,2, status,0
 17457 ;; Tracked objects:
 17458 ;;		On entry : 0/0
 17459 ;;		On exit  : 0/0
 17460 ;;		Unchanged: 0/0
 17461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17462 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17464 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17465 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17466 ;;Total ram usage:       12 bytes
 17467 ;; Hardware stack levels used:    1
 17468 ;; Hardware stack levels required when called:    3
 17469 ;; This function calls:
 17470 ;;		Nothing
 17471 ;; This function is called by:
 17472 ;;		_channelSetup
 17473 ;;		_setOutputPower
 17474 ;;		_checkChannelStatus
 17475 ;; This function uses a non-reentrant model
 17476 ;;
 17477                           
 17478                           
 17479                           ;psect for function ___fleq
 17480  29F4                     ___fleq:	
 17481                           
 17482                           ;incstack = 0
 17483                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 17484  29F4  3000               	movlw	0
 17485  29F5  0140               	movlb	0	; select bank0
 17486  29F6  0524               	andwf	___fleq@ff1,w
 17487  29F7  00AC               	movwf	??___fleq
 17488  29F8  3000               	movlw	0
 17489  29F9  0525               	andwf	___fleq@ff1+1,w
 17490  29FA  00AD               	movwf	??___fleq+1
 17491  29FB  3080               	movlw	128
 17492  29FC  0526               	andwf	___fleq@ff1+2,w
 17493  29FD  00AE               	movwf	??___fleq+2
 17494  29FE  307F               	movlw	127
 17495  29FF  0527               	andwf	___fleq@ff1+3,w
 17496  2A00  00AF               	movwf	??___fleq+3
 17497  2A01  082F               	movf	??___fleq+3,w
 17498  2A02  042E               	iorwf	??___fleq+2,w
 17499  2A03  042D               	iorwf	??___fleq+1,w
 17500  2A04  042C               	iorwf	??___fleq,w
 17501  2A05  1D03               	skipz
 17502  2A06  2A0F               	goto	l1150
 17503  2A07  3000               	movlw	0
 17504  2A08  00A7               	movwf	___fleq@ff1+3
 17505  2A09  3000               	movlw	0
 17506  2A0A  00A6               	movwf	___fleq@ff1+2
 17507  2A0B  3000               	movlw	0
 17508  2A0C  00A5               	movwf	___fleq@ff1+1
 17509  2A0D  3000               	movlw	0
 17510  2A0E  00A4               	movwf	___fleq@ff1
 17511  2A0F                     l1150:	
 17512  2A0F  3000               	movlw	0
 17513  2A10  0528               	andwf	___fleq@ff2,w
 17514  2A11  00AC               	movwf	??___fleq
 17515  2A12  3000               	movlw	0
 17516  2A13  0529               	andwf	___fleq@ff2+1,w
 17517  2A14  00AD               	movwf	??___fleq+1
 17518  2A15  3080               	movlw	128
 17519  2A16  052A               	andwf	___fleq@ff2+2,w
 17520  2A17  00AE               	movwf	??___fleq+2
 17521  2A18  307F               	movlw	127
 17522  2A19  052B               	andwf	___fleq@ff2+3,w
 17523  2A1A  00AF               	movwf	??___fleq+3
 17524  2A1B  082F               	movf	??___fleq+3,w
 17525  2A1C  042E               	iorwf	??___fleq+2,w
 17526  2A1D  042D               	iorwf	??___fleq+1,w
 17527  2A1E  042C               	iorwf	??___fleq,w
 17528  2A1F  1D03               	skipz
 17529  2A20  2A29               	goto	l1151
 17530  2A21  3000               	movlw	0
 17531  2A22  00AB               	movwf	___fleq@ff2+3
 17532  2A23  3000               	movlw	0
 17533  2A24  00AA               	movwf	___fleq@ff2+2
 17534  2A25  3000               	movlw	0
 17535  2A26  00A9               	movwf	___fleq@ff2+1
 17536  2A27  3000               	movlw	0
 17537  2A28  00A8               	movwf	___fleq@ff2
 17538  2A29                     l1151:	
 17539  2A29  082B               	movf	___fleq@ff2+3,w
 17540  2A2A  0627               	xorwf	___fleq@ff1+3,w
 17541  2A2B  1D03               	skipz
 17542  2A2C  2A37               	goto	u5935
 17543  2A2D  082A               	movf	___fleq@ff2+2,w
 17544  2A2E  0626               	xorwf	___fleq@ff1+2,w
 17545  2A2F  1D03               	skipz
 17546  2A30  2A37               	goto	u5935
 17547  2A31  0829               	movf	___fleq@ff2+1,w
 17548  2A32  0625               	xorwf	___fleq@ff1+1,w
 17549  2A33  1D03               	skipz
 17550  2A34  2A37               	goto	u5935
 17551  2A35  0828               	movf	___fleq@ff2,w
 17552  2A36  0624               	xorwf	___fleq@ff1,w
 17553  2A37                     u5935:	
 17554  2A37  1903               	skipnz
 17555  2A38  2A3B               	goto	l4911
 17556  2A39  1003               	clrc
 17557  2A3A  0008               	return
 17558  2A3B                     l4911:	
 17559  2A3B  1403               	setc
 17560  2A3C  0008               	return
 17561  2A3D                     __end_of___fleq:	
 17562                           
 17563                           	psect	text51
 17564  0C79                     __ptext51:	
 17565 ;; *************** function _channelThing *****************
 17566 ;; Defined at:
 17567 ;;		line 381 in file "system.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  data            2   54[BANK1 ] PTR struct .
 17570 ;;		 -> data(170), 
 17571 ;; Auto vars:     Size  Location     Type
 17572 ;;  totalGrpB       4    8[BANK6 ] float 
 17573 ;;  totalGrpA       4    4[BANK6 ] float 
 17574 ;;  total           4    0[BANK6 ] float 
 17575 ;;  n               1   13[BANK6 ] unsigned char 
 17576 ;;  phyCh           1   12[BANK6 ] unsigned char 
 17577 ;; Return value:  Size  Location     Type
 17578 ;;                  1    wreg      void 
 17579 ;; Registers used:
 17580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17581 ;; Tracked objects:
 17582 ;;		On entry : 0/0
 17583 ;;		On exit  : 0/0
 17584 ;;		Unchanged: 0/0
 17585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17586 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17587 ;;      Locals:         0       0       0       0       0       0       0      14       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17588 ;;      Temps:          0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17589 ;;      Totals:         0       0      15       0       0       0       0      14       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17590 ;;Total ram usage:       29 bytes
 17591 ;; Hardware stack levels used:    1
 17592 ;; Hardware stack levels required when called:    7
 17593 ;; This function calls:
 17594 ;;		___fladd
 17595 ;;		___fldiv
 17596 ;;		___flge
 17597 ;;		___flmul
 17598 ;;		___xxtofl
 17599 ;;		_qsort
 17600 ;; This function is called by:
 17601 ;;		_main
 17602 ;; This function uses a non-reentrant model
 17603 ;;
 17604                           
 17605                           
 17606                           ;psect for function _channelThing
 17607  0C79                     _channelThing:	
 17608                           
 17609                           ;system.c: 381: void channelThing(t_globalData *data);system.c: 382: {;system.c: 383:  u
      +                          int8_t n, phyCh;;system.c: 384:  float total, totalGrpA, totalGrpB;;system.c: 386:  for(
      +                          n = 0; n < 4; n++) {
 17610                           
 17611                           ;incstack = 0
 17612                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17613  0C79  0146               	movlb	6	; select bank6
 17614  0C7A  01AD               	clrf	channelThing@n^(0+768)
 17615  0C7B                     l8037:	
 17616                           
 17617                           ;system.c: 387:   grpA[n] = -1;
 17618  0C7B  082D               	movf	channelThing@n^(0+768),w
 17619  0C7C  3E5C               	addlw	(low (_grpA| (0+512)))& (0+255)
 17620  0C7D  0086               	movwf	6
 17621  0C7E  3002               	movlw	2	; select bank4/5
 17622  0C7F  0087               	movwf	7
 17623  0C80  0181               	clrf	1
 17624  0C81  0381               	decf	1,f
 17625                           
 17626                           ;system.c: 388:   grpB[n] = -1;
 17627  0C82  082D               	movf	channelThing@n^(0+768),w
 17628  0C83  3E58               	addlw	(low (_grpB| (0+512)))& (0+255)
 17629  0C84  0086               	movwf	6
 17630  0C85  3002               	movlw	2	; select bank4/5
 17631  0C86  0087               	movwf	7
 17632  0C87  0181               	clrf	1
 17633  0C88  0381               	decf	1,f
 17634                           
 17635                           ;system.c: 390:   vChannels[n].phyChNum = n;
 17636  0C89  082D               	movf	channelThing@n^(0+768),w
 17637  0C8A  0141               	movlb	1	; select bank1
 17638  0C8B  00D8               	movwf	??_channelThing^(0+128)
 17639  0C8C  01D9               	clrf	(??_channelThing^(0+128)+1)
 17640  0C8D  0146               	movlb	6	; select bank6
 17641  0C8E  082D               	movf	channelThing@n^(0+768),w
 17642  0C8F  0141               	movlb	1	; select bank1
 17643  0C90  00DA               	movwf	(??_channelThing+2)^(0+128)
 17644  0C91  3002               	movlw	2
 17645  0C92                     u10765:	
 17646  0C92  35DA               	lslf	(??_channelThing+2)^(0+128),f
 17647  0C93  3EFF               	addlw	-1
 17648  0C94  1D03               	skipz
 17649  0C95  2C92               	goto	u10765
 17650  0C96  355A               	lslf	(??_channelThing+2)^(0+128),w
 17651  0C97  3E2E               	addlw	(low (_vChannels| (0+512)))& (0+255)
 17652  0C98  0086               	movwf	6
 17653  0C99  3002               	movlw	2	; select bank4/5
 17654  0C9A  0087               	movwf	7
 17655  0C9B  0858               	movf	??_channelThing^(0+128),w
 17656  0C9C  3FC0               	movwi [0]fsr1
 17657  0C9D  0859               	movf	(??_channelThing+1)^(0+128),w
 17658  0C9E  3FC1               	movwi [1]fsr1
 17659                           
 17660                           ;system.c: 391:   vChannels[n].current = data->chData[n].current;
 17661  0C9F  0146               	movlb	6	; select bank6
 17662  0CA0  082D               	movf	channelThing@n^(0+768),w
 17663  0CA1  0141               	movlb	1	; select bank1
 17664  0CA2  00D8               	movwf	??_channelThing^(0+128)
 17665  0CA3  01D9               	clrf	(??_channelThing^(0+128)+1)
 17666  0CA4  3005               	movlw	5
 17667  0CA5                     u10775:	
 17668  0CA5  35D8               	lslf	??_channelThing^(0+128),f
 17669  0CA6  0DD9               	rlf	(??_channelThing^(0+128)+1),f
 17670  0CA7  0B89               	decfsz	9,f
 17671  0CA8  2CA5               	goto	u10775
 17672  0CA9  0858               	movf	??_channelThing^(0+128),w
 17673  0CAA  0756               	addwf	channelThing@data^(0+128),w
 17674  0CAB  00DA               	movwf	(??_channelThing+2)^(0+128)
 17675  0CAC  0859               	movf	(??_channelThing+1)^(0+128),w
 17676  0CAD  3D57               	addwfc	(channelThing@data+1)^(0+128),w
 17677  0CAE  00DB               	movwf	(??_channelThing+3)^(0+128)
 17678  0CAF  085A               	movf	(??_channelThing+2)^(0+128),w
 17679  0CB0  3E2A               	addlw	42
 17680  0CB1  0086               	movwf	6
 17681  0CB2  3000               	movlw	0
 17682  0CB3  3D5B               	addwfc	(??_channelThing+3)^(0+128),w
 17683  0CB4  0087               	movwf	7
 17684  0CB5  3F40               	moviw [0]fsr1
 17685  0CB6  00DC               	movwf	(??_channelThing+4)^(0+128)
 17686  0CB7  3F41               	moviw [1]fsr1
 17687  0CB8  00DD               	movwf	((??_channelThing+4)^(0+128)+1)
 17688  0CB9  3F42               	moviw [2]fsr1
 17689  0CBA  00DE               	movwf	((??_channelThing+4)^(0+128)+2)
 17690  0CBB  3F43               	moviw [3]fsr1
 17691  0CBC  00DF               	movwf	((??_channelThing+4)^(0+128)+3)
 17692  0CBD  0146               	movlb	6	; select bank6
 17693  0CBE  082D               	movf	channelThing@n^(0+768),w
 17694  0CBF  0141               	movlb	1	; select bank1
 17695  0CC0  00E0               	movwf	(??_channelThing+8)^(0+128)
 17696  0CC1  3002               	movlw	2
 17697  0CC2                     u10785:	
 17698  0CC2  35E0               	lslf	(??_channelThing+8)^(0+128),f
 17699  0CC3  3EFF               	addlw	-1
 17700  0CC4  1D03               	skipz
 17701  0CC5  2CC2               	goto	u10785
 17702  0CC6  3560               	lslf	(??_channelThing+8)^(0+128),w
 17703  0CC7  3E30               	addlw	(low ((_vChannels| (0+512)+2)))& (0+255)
 17704  0CC8  0086               	movwf	6
 17705  0CC9  3002               	movlw	2	; select bank4/5
 17706  0CCA  0087               	movwf	7
 17707  0CCB  085C               	movf	(??_channelThing+4)^(0+128),w
 17708  0CCC  3FC0               	movwi [0]fsr1
 17709  0CCD  085D               	movf	(??_channelThing+5)^(0+128),w
 17710  0CCE  3FC1               	movwi [1]fsr1
 17711  0CCF  085E               	movf	(??_channelThing+6)^(0+128),w
 17712  0CD0  3FC2               	movwi [2]fsr1
 17713  0CD1  085F               	movf	(??_channelThing+7)^(0+128),w
 17714  0CD2  3FC3               	movwi [3]fsr1
 17715                           
 17716                           ;system.c: 392:   vChannels[n].DC = data->chData[n].DCreq;
 17717  0CD3  0146               	movlb	6	; select bank6
 17718  0CD4  082D               	movf	channelThing@n^(0+768),w
 17719  0CD5  0141               	movlb	1	; select bank1
 17720  0CD6  00D8               	movwf	??_channelThing^(0+128)
 17721  0CD7  01D9               	clrf	(??_channelThing^(0+128)+1)
 17722  0CD8  3005               	movlw	5
 17723  0CD9                     u10795:	
 17724  0CD9  35D8               	lslf	??_channelThing^(0+128),f
 17725  0CDA  0DD9               	rlf	(??_channelThing^(0+128)+1),f
 17726  0CDB  0B89               	decfsz	9,f
 17727  0CDC  2CD9               	goto	u10795
 17728  0CDD  0858               	movf	??_channelThing^(0+128),w
 17729  0CDE  0756               	addwf	channelThing@data^(0+128),w
 17730  0CDF  00DA               	movwf	(??_channelThing+2)^(0+128)
 17731  0CE0  0859               	movf	(??_channelThing+1)^(0+128),w
 17732  0CE1  3D57               	addwfc	(channelThing@data+1)^(0+128),w
 17733  0CE2  00DB               	movwf	(??_channelThing+3)^(0+128)
 17734  0CE3  085A               	movf	(??_channelThing+2)^(0+128),w
 17735  0CE4  3E3E               	addlw	62
 17736  0CE5  0086               	movwf	6
 17737  0CE6  3000               	movlw	0
 17738  0CE7  3D5B               	addwfc	(??_channelThing+3)^(0+128),w
 17739  0CE8  0087               	movwf	7
 17740  0CE9  0801               	movf	1,w
 17741  0CEA  00DC               	movwf	(??_channelThing+4)^(0+128)
 17742  0CEB  0146               	movlb	6	; select bank6
 17743  0CEC  082D               	movf	channelThing@n^(0+768),w
 17744  0CED  0141               	movlb	1	; select bank1
 17745  0CEE  00DD               	movwf	(??_channelThing+5)^(0+128)
 17746  0CEF  3002               	movlw	2
 17747  0CF0                     u10805:	
 17748  0CF0  35DD               	lslf	(??_channelThing+5)^(0+128),f
 17749  0CF1  3EFF               	addlw	-1
 17750  0CF2  1D03               	skipz
 17751  0CF3  2CF0               	goto	u10805
 17752  0CF4  355D               	lslf	(??_channelThing+5)^(0+128),w
 17753  0CF5  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 17754  0CF6  0086               	movwf	6
 17755  0CF7  3002               	movlw	2	; select bank4/5
 17756  0CF8  0087               	movwf	7
 17757  0CF9  085C               	movf	(??_channelThing+4)^(0+128),w
 17758  0CFA  0081               	movwf	1
 17759                           
 17760                           ;system.c: 393:  }
 17761  0CFB  3001               	movlw	1
 17762  0CFC  00D8               	movwf	??_channelThing^(0+128)
 17763  0CFD  0858               	movf	??_channelThing^(0+128),w
 17764  0CFE  0146               	movlb	6	; select bank6
 17765  0CFF  07AD               	addwf	channelThing@n^(0+768),f
 17766  0D00  3004               	movlw	4
 17767  0D01  022D               	subwf	channelThing@n^(0+768),w
 17768  0D02  1C03               	skipc
 17769  0D03  2C7B               	goto	l8037
 17770                           
 17771                           ;system.c: 395:  qsort(vChannels, 4, sizeof(vChannels[0]), sortCur);
 17772  0D04  3004               	movlw	4
 17773  0D05  0141               	movlb	1	; select bank1
 17774  0D06  00BE               	movwf	qsort@nel^(0+128)
 17775  0D07  3000               	movlw	0
 17776  0D08  00BF               	movwf	(qsort@nel^(0+128)+1)
 17777  0D09  3008               	movlw	8
 17778  0D0A  00C0               	movwf	qsort@width^(0+128)
 17779  0D0B  3000               	movlw	0
 17780  0D0C  00C1               	movwf	(qsort@width^(0+128)+1)
 17781  0D0D  308E               	movlw	low _sortCur
 17782  0D0E  00C2               	movwf	qsort@compar^(0+128)
 17783  0D0F  3037               	movlw	high _sortCur
 17784  0D10  00C3               	movwf	(qsort@compar^(0+128)+1)
 17785  0D11  302E               	movlw	(low (_vChannels| (0+512)))& (0+255)
 17786  0D12  319A  22C4  318C   	fcall	_qsort
 17787                           
 17788                           ;system.c: 397:  total = totalGrpA = totalGrpB = 0;
 17789  0D15  3000               	movlw	0
 17790  0D16  0146               	movlb	6	; select bank6
 17791  0D17  00AB               	movwf	(channelThing@totalGrpB+3)^(0+768)
 17792  0D18  3000               	movlw	0
 17793  0D19  00AA               	movwf	(channelThing@totalGrpB+2)^(0+768)
 17794  0D1A  3000               	movlw	0
 17795  0D1B  00A9               	movwf	(channelThing@totalGrpB+1)^(0+768)
 17796  0D1C  3000               	movlw	0
 17797  0D1D  00A8               	movwf	channelThing@totalGrpB^(0+768)
 17798  0D1E  082B               	movf	(channelThing@totalGrpB+3)^(0+768),w
 17799  0D1F  00A7               	movwf	(channelThing@totalGrpA+3)^(0+768)
 17800  0D20  082A               	movf	(channelThing@totalGrpB+2)^(0+768),w
 17801  0D21  00A6               	movwf	(channelThing@totalGrpA+2)^(0+768)
 17802  0D22  0829               	movf	(channelThing@totalGrpB+1)^(0+768),w
 17803  0D23  00A5               	movwf	(channelThing@totalGrpA+1)^(0+768)
 17804  0D24  0828               	movf	channelThing@totalGrpB^(0+768),w
 17805  0D25  00A4               	movwf	channelThing@totalGrpA^(0+768)
 17806  0D26  0827               	movf	(channelThing@totalGrpA+3)^(0+768),w
 17807  0D27  00A3               	movwf	(channelThing@total+3)^(0+768)
 17808  0D28  0826               	movf	(channelThing@totalGrpA+2)^(0+768),w
 17809  0D29  00A2               	movwf	(channelThing@total+2)^(0+768)
 17810  0D2A  0825               	movf	(channelThing@totalGrpA+1)^(0+768),w
 17811  0D2B  00A1               	movwf	(channelThing@total+1)^(0+768)
 17812  0D2C  0824               	movf	channelThing@totalGrpA^(0+768),w
 17813  0D2D  00A0               	movwf	channelThing@total^(0+768)
 17814                           
 17815                           ;system.c: 398:  numGrpA = numGrpB = 0;
 17816  0D2E  0143               	movlb	3	; select bank3
 17817  0D2F  01E4               	clrf	_numGrpB^(0+384)
 17818  0D30  01E5               	clrf	_numGrpA^(0+384)
 17819                           
 17820                           ;system.c: 400:  for(n = 0; n < 4; n++) {
 17821  0D31  0146               	movlb	6	; select bank6
 17822  0D32  01AD               	clrf	channelThing@n^(0+768)
 17823  0D33                     l8055:	
 17824                           
 17825                           ;system.c: 402:   vChannels[n].DCatt = vChannels[n].DC;
 17826  0D33  082D               	movf	channelThing@n^(0+768),w
 17827  0D34  0141               	movlb	1	; select bank1
 17828  0D35  00D8               	movwf	??_channelThing^(0+128)
 17829  0D36  3002               	movlw	2
 17830  0D37                     u10825:	
 17831  0D37  35D8               	lslf	??_channelThing^(0+128),f
 17832  0D38  3EFF               	addlw	-1
 17833  0D39  1D03               	skipz
 17834  0D3A  2D37               	goto	u10825
 17835  0D3B  3558               	lslf	??_channelThing^(0+128),w
 17836  0D3C  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 17837  0D3D  0086               	movwf	6
 17838  0D3E  3002               	movlw	2	; select bank4/5
 17839  0D3F  0087               	movwf	7
 17840  0D40  0801               	movf	1,w
 17841  0D41  00D9               	movwf	(??_channelThing+1)^(0+128)
 17842  0D42  0146               	movlb	6	; select bank6
 17843  0D43  082D               	movf	channelThing@n^(0+768),w
 17844  0D44  0141               	movlb	1	; select bank1
 17845  0D45  00DA               	movwf	(??_channelThing+2)^(0+128)
 17846  0D46  3002               	movlw	2
 17847  0D47                     u10835:	
 17848  0D47  35DA               	lslf	(??_channelThing+2)^(0+128),f
 17849  0D48  3EFF               	addlw	-1
 17850  0D49  1D03               	skipz
 17851  0D4A  2D47               	goto	u10835
 17852  0D4B  355A               	lslf	(??_channelThing+2)^(0+128),w
 17853  0D4C  3E35               	addlw	(low ((_vChannels| (0+512)+7)))& (0+255)
 17854  0D4D  0086               	movwf	6
 17855  0D4E  3002               	movlw	2	; select bank4/5
 17856  0D4F  0087               	movwf	7
 17857  0D50  0859               	movf	(??_channelThing+1)^(0+128),w
 17858  0D51  0081               	movwf	1
 17859                           
 17860                           ;system.c: 403:   total += vChannels[n].current;
 17861  0D52  0146               	movlb	6	; select bank6
 17862  0D53  082D               	movf	channelThing@n^(0+768),w
 17863  0D54  0141               	movlb	1	; select bank1
 17864  0D55  00D8               	movwf	??_channelThing^(0+128)
 17865  0D56  3002               	movlw	2
 17866  0D57                     u10845:	
 17867  0D57  35D8               	lslf	??_channelThing^(0+128),f
 17868  0D58  3EFF               	addlw	-1
 17869  0D59  1D03               	skipz
 17870  0D5A  2D57               	goto	u10845
 17871  0D5B  3558               	lslf	??_channelThing^(0+128),w
 17872  0D5C  3E30               	addlw	(low ((_vChannels| (0+512)+2)))& (0+255)
 17873  0D5D  0086               	movwf	6
 17874  0D5E  3002               	movlw	2	; select bank4/5
 17875  0D5F  0087               	movwf	7
 17876  0D60  3F40               	moviw [0]fsr1
 17877  0D61  0140               	movlb	0	; select bank0
 17878  0D62  00D2               	movwf	___fladd@b
 17879  0D63  3F41               	moviw [1]fsr1
 17880  0D64  00D3               	movwf	___fladd@b+1
 17881  0D65  3F42               	moviw [2]fsr1
 17882  0D66  00D4               	movwf	___fladd@b+2
 17883  0D67  3F43               	moviw [3]fsr1
 17884  0D68  00D5               	movwf	___fladd@b+3
 17885  0D69  0146               	movlb	6	; select bank6
 17886  0D6A  0823               	movf	(channelThing@total+3)^(0+768),w
 17887  0D6B  0140               	movlb	0	; select bank0
 17888  0D6C  00D9               	movwf	___fladd@a+3
 17889  0D6D  0146               	movlb	6	; select bank6
 17890  0D6E  0822               	movf	(channelThing@total+2)^(0+768),w
 17891  0D6F  0140               	movlb	0	; select bank0
 17892  0D70  00D8               	movwf	___fladd@a+2
 17893  0D71  0146               	movlb	6	; select bank6
 17894  0D72  0821               	movf	(channelThing@total+1)^(0+768),w
 17895  0D73  0140               	movlb	0	; select bank0
 17896  0D74  00D7               	movwf	___fladd@a+1
 17897  0D75  0146               	movlb	6	; select bank6
 17898  0D76  0820               	movf	channelThing@total^(0+768),w
 17899  0D77  0140               	movlb	0	; select bank0
 17900  0D78  00D6               	movwf	___fladd@a
 17901  0D79  3192  220E  318C   	fcall	___fladd
 17902  0D7C  0140               	movlb	0	; select bank0
 17903  0D7D  0855               	movf	?___fladd+3,w
 17904  0D7E  0146               	movlb	6	; select bank6
 17905  0D7F  00A3               	movwf	(channelThing@total+3)^(0+768)
 17906  0D80  0140               	movlb	0	; select bank0
 17907  0D81  0854               	movf	?___fladd+2,w
 17908  0D82  0146               	movlb	6	; select bank6
 17909  0D83  00A2               	movwf	(channelThing@total+2)^(0+768)
 17910  0D84  0140               	movlb	0	; select bank0
 17911  0D85  0853               	movf	?___fladd+1,w
 17912  0D86  0146               	movlb	6	; select bank6
 17913  0D87  00A1               	movwf	(channelThing@total+1)^(0+768)
 17914  0D88  0140               	movlb	0	; select bank0
 17915  0D89  0852               	movf	?___fladd,w
 17916  0D8A  0146               	movlb	6	; select bank6
 17917  0D8B  00A0               	movwf	channelThing@total^(0+768)
 17918                           
 17919                           ;system.c: 405:   if (totalGrpA + vChannels[n].current <= 3.0) {
 17920  0D8C  3040               	movlw	64
 17921  0D8D  0141               	movlb	1	; select bank1
 17922  0D8E  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17923  0D8F  3040               	movlw	64
 17924  0D90  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17925  0D91  3000               	movlw	0
 17926  0D92  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17927  0D93  3000               	movlw	0
 17928  0D94  00AD               	movwf	___flge@ff1^(0+128)
 17929  0D95  0146               	movlb	6	; select bank6
 17930  0D96  0827               	movf	(channelThing@totalGrpA+3)^(0+768),w
 17931  0D97  0140               	movlb	0	; select bank0
 17932  0D98  00D5               	movwf	___fladd@b+3
 17933  0D99  0146               	movlb	6	; select bank6
 17934  0D9A  0826               	movf	(channelThing@totalGrpA+2)^(0+768),w
 17935  0D9B  0140               	movlb	0	; select bank0
 17936  0D9C  00D4               	movwf	___fladd@b+2
 17937  0D9D  0146               	movlb	6	; select bank6
 17938  0D9E  0825               	movf	(channelThing@totalGrpA+1)^(0+768),w
 17939  0D9F  0140               	movlb	0	; select bank0
 17940  0DA0  00D3               	movwf	___fladd@b+1
 17941  0DA1  0146               	movlb	6	; select bank6
 17942  0DA2  0824               	movf	channelThing@totalGrpA^(0+768),w
 17943  0DA3  0140               	movlb	0	; select bank0
 17944  0DA4  00D2               	movwf	___fladd@b
 17945  0DA5  0146               	movlb	6	; select bank6
 17946  0DA6  082D               	movf	channelThing@n^(0+768),w
 17947  0DA7  0141               	movlb	1	; select bank1
 17948  0DA8  00D8               	movwf	??_channelThing^(0+128)
 17949  0DA9  3002               	movlw	2
 17950  0DAA                     u10855:	
 17951  0DAA  35D8               	lslf	??_channelThing^(0+128),f
 17952  0DAB  3EFF               	addlw	-1
 17953  0DAC  1D03               	skipz
 17954  0DAD  2DAA               	goto	u10855
 17955  0DAE  3558               	lslf	??_channelThing^(0+128),w
 17956  0DAF  3E30               	addlw	(low ((_vChannels| (0+512)+2)))& (0+255)
 17957  0DB0  0086               	movwf	6
 17958  0DB1  3002               	movlw	2	; select bank4/5
 17959  0DB2  0087               	movwf	7
 17960  0DB3  3F40               	moviw [0]fsr1
 17961  0DB4  0140               	movlb	0	; select bank0
 17962  0DB5  00D6               	movwf	___fladd@a
 17963  0DB6  3F41               	moviw [1]fsr1
 17964  0DB7  00D7               	movwf	___fladd@a+1
 17965  0DB8  3F42               	moviw [2]fsr1
 17966  0DB9  00D8               	movwf	___fladd@a+2
 17967  0DBA  3F43               	moviw [3]fsr1
 17968  0DBB  00D9               	movwf	___fladd@a+3
 17969  0DBC  3192  220E  318C   	fcall	___fladd
 17970  0DBF  0140               	movlb	0	; select bank0
 17971  0DC0  0855               	movf	?___fladd+3,w
 17972  0DC1  0141               	movlb	1	; select bank1
 17973  0DC2  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17974  0DC3  0140               	movlb	0	; select bank0
 17975  0DC4  0854               	movf	?___fladd+2,w
 17976  0DC5  0141               	movlb	1	; select bank1
 17977  0DC6  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17978  0DC7  0140               	movlb	0	; select bank0
 17979  0DC8  0853               	movf	?___fladd+1,w
 17980  0DC9  0141               	movlb	1	; select bank1
 17981  0DCA  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17982  0DCB  0140               	movlb	0	; select bank0
 17983  0DCC  0852               	movf	?___fladd,w
 17984  0DCD  0141               	movlb	1	; select bank1
 17985  0DCE  00B1               	movwf	___flge@ff2^(0+128)
 17986  0DCF  31AD  25D6  318C   	fcall	___flge
 17987  0DD2  1C03               	btfss	3,0
 17988  0DD3  2E20               	goto	l8067
 17989                           
 17990                           ;system.c: 406:    totalGrpA += vChannels[n].current;
 17991  0DD4  0146               	movlb	6	; select bank6
 17992  0DD5  082D               	movf	channelThing@n^(0+768),w
 17993  0DD6  0141               	movlb	1	; select bank1
 17994  0DD7  00D8               	movwf	??_channelThing^(0+128)
 17995  0DD8  3002               	movlw	2
 17996  0DD9                     u10875:	
 17997  0DD9  35D8               	lslf	??_channelThing^(0+128),f
 17998  0DDA  3EFF               	addlw	-1
 17999  0DDB  1D03               	skipz
 18000  0DDC  2DD9               	goto	u10875
 18001  0DDD  3558               	lslf	??_channelThing^(0+128),w
 18002  0DDE  3E30               	addlw	(low ((_vChannels| (0+512)+2)))& (0+255)
 18003  0DDF  0086               	movwf	6
 18004  0DE0  3002               	movlw	2	; select bank4/5
 18005  0DE1  0087               	movwf	7
 18006  0DE2  3F40               	moviw [0]fsr1
 18007  0DE3  0140               	movlb	0	; select bank0
 18008  0DE4  00D2               	movwf	___fladd@b
 18009  0DE5  3F41               	moviw [1]fsr1
 18010  0DE6  00D3               	movwf	___fladd@b+1
 18011  0DE7  3F42               	moviw [2]fsr1
 18012  0DE8  00D4               	movwf	___fladd@b+2
 18013  0DE9  3F43               	moviw [3]fsr1
 18014  0DEA  00D5               	movwf	___fladd@b+3
 18015  0DEB  0146               	movlb	6	; select bank6
 18016  0DEC  0827               	movf	(channelThing@totalGrpA+3)^(0+768),w
 18017  0DED  0140               	movlb	0	; select bank0
 18018  0DEE  00D9               	movwf	___fladd@a+3
 18019  0DEF  0146               	movlb	6	; select bank6
 18020  0DF0  0826               	movf	(channelThing@totalGrpA+2)^(0+768),w
 18021  0DF1  0140               	movlb	0	; select bank0
 18022  0DF2  00D8               	movwf	___fladd@a+2
 18023  0DF3  0146               	movlb	6	; select bank6
 18024  0DF4  0825               	movf	(channelThing@totalGrpA+1)^(0+768),w
 18025  0DF5  0140               	movlb	0	; select bank0
 18026  0DF6  00D7               	movwf	___fladd@a+1
 18027  0DF7  0146               	movlb	6	; select bank6
 18028  0DF8  0824               	movf	channelThing@totalGrpA^(0+768),w
 18029  0DF9  0140               	movlb	0	; select bank0
 18030  0DFA  00D6               	movwf	___fladd@a
 18031  0DFB  3192  220E  318C   	fcall	___fladd
 18032  0DFE  0140               	movlb	0	; select bank0
 18033  0DFF  0855               	movf	?___fladd+3,w
 18034  0E00  0146               	movlb	6	; select bank6
 18035  0E01  00A7               	movwf	(channelThing@totalGrpA+3)^(0+768)
 18036  0E02  0140               	movlb	0	; select bank0
 18037  0E03  0854               	movf	?___fladd+2,w
 18038  0E04  0146               	movlb	6	; select bank6
 18039  0E05  00A6               	movwf	(channelThing@totalGrpA+2)^(0+768)
 18040  0E06  0140               	movlb	0	; select bank0
 18041  0E07  0853               	movf	?___fladd+1,w
 18042  0E08  0146               	movlb	6	; select bank6
 18043  0E09  00A5               	movwf	(channelThing@totalGrpA+1)^(0+768)
 18044  0E0A  0140               	movlb	0	; select bank0
 18045  0E0B  0852               	movf	?___fladd,w
 18046  0E0C  0146               	movlb	6	; select bank6
 18047  0E0D  00A4               	movwf	channelThing@totalGrpA^(0+768)
 18048                           
 18049                           ;system.c: 407:    grpA[numGrpA++] = n;
 18050  0E0E  082D               	movf	channelThing@n^(0+768),w
 18051  0E0F  0141               	movlb	1	; select bank1
 18052  0E10  00D8               	movwf	??_channelThing^(0+128)
 18053  0E11  0143               	movlb	3	; select bank3
 18054  0E12  0865               	movf	_numGrpA^(0+384),w
 18055  0E13  3E5C               	addlw	(low (_grpA| (0+512)))& (0+255)
 18056  0E14  0086               	movwf	6
 18057  0E15  3002               	movlw	2	; select bank4/5
 18058  0E16  0087               	movwf	7
 18059  0E17  0141               	movlb	1	; select bank1
 18060  0E18  0858               	movf	??_channelThing^(0+128),w
 18061  0E19  0081               	movwf	1
 18062  0E1A  3001               	movlw	1
 18063  0E1B  00D8               	movwf	??_channelThing^(0+128)
 18064  0E1C  0858               	movf	??_channelThing^(0+128),w
 18065  0E1D  0143               	movlb	3	; select bank3
 18066  0E1E  07E5               	addwf	_numGrpA^(0+384),f
 18067                           
 18068                           ;system.c: 408:   } else if (totalGrpB + vChannels[n].current <= 3.0) {
 18069  0E1F  2EB3               	goto	l8075
 18070  0E20                     l8067:	
 18071  0E20  3040               	movlw	64
 18072  0E21  0141               	movlb	1	; select bank1
 18073  0E22  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18074  0E23  3040               	movlw	64
 18075  0E24  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18076  0E25  3000               	movlw	0
 18077  0E26  00AE               	movwf	(___flge@ff1+1)^(0+128)
 18078  0E27  3000               	movlw	0
 18079  0E28  00AD               	movwf	___flge@ff1^(0+128)
 18080  0E29  0146               	movlb	6	; select bank6
 18081  0E2A  082B               	movf	(channelThing@totalGrpB+3)^(0+768),w
 18082  0E2B  0140               	movlb	0	; select bank0
 18083  0E2C  00D5               	movwf	___fladd@b+3
 18084  0E2D  0146               	movlb	6	; select bank6
 18085  0E2E  082A               	movf	(channelThing@totalGrpB+2)^(0+768),w
 18086  0E2F  0140               	movlb	0	; select bank0
 18087  0E30  00D4               	movwf	___fladd@b+2
 18088  0E31  0146               	movlb	6	; select bank6
 18089  0E32  0829               	movf	(channelThing@totalGrpB+1)^(0+768),w
 18090  0E33  0140               	movlb	0	; select bank0
 18091  0E34  00D3               	movwf	___fladd@b+1
 18092  0E35  0146               	movlb	6	; select bank6
 18093  0E36  0828               	movf	channelThing@totalGrpB^(0+768),w
 18094  0E37  0140               	movlb	0	; select bank0
 18095  0E38  00D2               	movwf	___fladd@b
 18096  0E39  0146               	movlb	6	; select bank6
 18097  0E3A  082D               	movf	channelThing@n^(0+768),w
 18098  0E3B  0141               	movlb	1	; select bank1
 18099  0E3C  00D8               	movwf	??_channelThing^(0+128)
 18100  0E3D  3002               	movlw	2
 18101  0E3E                     u10885:	
 18102  0E3E  35D8               	lslf	??_channelThing^(0+128),f
 18103  0E3F  3EFF               	addlw	-1
 18104  0E40  1D03               	skipz
 18105  0E41  2E3E               	goto	u10885
 18106  0E42  3558               	lslf	??_channelThing^(0+128),w
 18107  0E43  3E30               	addlw	(low ((_vChannels| (0+512)+2)))& (0+255)
 18108  0E44  0086               	movwf	6
 18109  0E45  3002               	movlw	2	; select bank4/5
 18110  0E46  0087               	movwf	7
 18111  0E47  3F40               	moviw [0]fsr1
 18112  0E48  0140               	movlb	0	; select bank0
 18113  0E49  00D6               	movwf	___fladd@a
 18114  0E4A  3F41               	moviw [1]fsr1
 18115  0E4B  00D7               	movwf	___fladd@a+1
 18116  0E4C  3F42               	moviw [2]fsr1
 18117  0E4D  00D8               	movwf	___fladd@a+2
 18118  0E4E  3F43               	moviw [3]fsr1
 18119  0E4F  00D9               	movwf	___fladd@a+3
 18120  0E50  3192  220E  318C   	fcall	___fladd
 18121  0E53  0140               	movlb	0	; select bank0
 18122  0E54  0855               	movf	?___fladd+3,w
 18123  0E55  0141               	movlb	1	; select bank1
 18124  0E56  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18125  0E57  0140               	movlb	0	; select bank0
 18126  0E58  0854               	movf	?___fladd+2,w
 18127  0E59  0141               	movlb	1	; select bank1
 18128  0E5A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18129  0E5B  0140               	movlb	0	; select bank0
 18130  0E5C  0853               	movf	?___fladd+1,w
 18131  0E5D  0141               	movlb	1	; select bank1
 18132  0E5E  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18133  0E5F  0140               	movlb	0	; select bank0
 18134  0E60  0852               	movf	?___fladd,w
 18135  0E61  0141               	movlb	1	; select bank1
 18136  0E62  00B1               	movwf	___flge@ff2^(0+128)
 18137  0E63  31AD  25D6  318C   	fcall	___flge
 18138  0E66  1C03               	btfss	3,0
 18139  0E67  2EB3               	goto	l8075
 18140                           
 18141                           ;system.c: 409:    totalGrpB += vChannels[n].current;
 18142  0E68  0146               	movlb	6	; select bank6
 18143  0E69  082D               	movf	channelThing@n^(0+768),w
 18144  0E6A  0141               	movlb	1	; select bank1
 18145  0E6B  00D8               	movwf	??_channelThing^(0+128)
 18146  0E6C  3002               	movlw	2
 18147  0E6D                     u10905:	
 18148  0E6D  35D8               	lslf	??_channelThing^(0+128),f
 18149  0E6E  3EFF               	addlw	-1
 18150  0E6F  1D03               	skipz
 18151  0E70  2E6D               	goto	u10905
 18152  0E71  3558               	lslf	??_channelThing^(0+128),w
 18153  0E72  3E30               	addlw	(low ((_vChannels| (0+512)+2)))& (0+255)
 18154  0E73  0086               	movwf	6
 18155  0E74  3002               	movlw	2	; select bank4/5
 18156  0E75  0087               	movwf	7
 18157  0E76  3F40               	moviw [0]fsr1
 18158  0E77  0140               	movlb	0	; select bank0
 18159  0E78  00D2               	movwf	___fladd@b
 18160  0E79  3F41               	moviw [1]fsr1
 18161  0E7A  00D3               	movwf	___fladd@b+1
 18162  0E7B  3F42               	moviw [2]fsr1
 18163  0E7C  00D4               	movwf	___fladd@b+2
 18164  0E7D  3F43               	moviw [3]fsr1
 18165  0E7E  00D5               	movwf	___fladd@b+3
 18166  0E7F  0146               	movlb	6	; select bank6
 18167  0E80  082B               	movf	(channelThing@totalGrpB+3)^(0+768),w
 18168  0E81  0140               	movlb	0	; select bank0
 18169  0E82  00D9               	movwf	___fladd@a+3
 18170  0E83  0146               	movlb	6	; select bank6
 18171  0E84  082A               	movf	(channelThing@totalGrpB+2)^(0+768),w
 18172  0E85  0140               	movlb	0	; select bank0
 18173  0E86  00D8               	movwf	___fladd@a+2
 18174  0E87  0146               	movlb	6	; select bank6
 18175  0E88  0829               	movf	(channelThing@totalGrpB+1)^(0+768),w
 18176  0E89  0140               	movlb	0	; select bank0
 18177  0E8A  00D7               	movwf	___fladd@a+1
 18178  0E8B  0146               	movlb	6	; select bank6
 18179  0E8C  0828               	movf	channelThing@totalGrpB^(0+768),w
 18180  0E8D  0140               	movlb	0	; select bank0
 18181  0E8E  00D6               	movwf	___fladd@a
 18182  0E8F  3192  220E  318C   	fcall	___fladd
 18183  0E92  0140               	movlb	0	; select bank0
 18184  0E93  0855               	movf	?___fladd+3,w
 18185  0E94  0146               	movlb	6	; select bank6
 18186  0E95  00AB               	movwf	(channelThing@totalGrpB+3)^(0+768)
 18187  0E96  0140               	movlb	0	; select bank0
 18188  0E97  0854               	movf	?___fladd+2,w
 18189  0E98  0146               	movlb	6	; select bank6
 18190  0E99  00AA               	movwf	(channelThing@totalGrpB+2)^(0+768)
 18191  0E9A  0140               	movlb	0	; select bank0
 18192  0E9B  0853               	movf	?___fladd+1,w
 18193  0E9C  0146               	movlb	6	; select bank6
 18194  0E9D  00A9               	movwf	(channelThing@totalGrpB+1)^(0+768)
 18195  0E9E  0140               	movlb	0	; select bank0
 18196  0E9F  0852               	movf	?___fladd,w
 18197  0EA0  0146               	movlb	6	; select bank6
 18198  0EA1  00A8               	movwf	channelThing@totalGrpB^(0+768)
 18199                           
 18200                           ;system.c: 410:    grpB[numGrpB++] = n;
 18201  0EA2  082D               	movf	channelThing@n^(0+768),w
 18202  0EA3  0141               	movlb	1	; select bank1
 18203  0EA4  00D8               	movwf	??_channelThing^(0+128)
 18204  0EA5  0143               	movlb	3	; select bank3
 18205  0EA6  0864               	movf	_numGrpB^(0+384),w
 18206  0EA7  3E58               	addlw	(low (_grpB| (0+512)))& (0+255)
 18207  0EA8  0086               	movwf	6
 18208  0EA9  3002               	movlw	2	; select bank4/5
 18209  0EAA  0087               	movwf	7
 18210  0EAB  0141               	movlb	1	; select bank1
 18211  0EAC  0858               	movf	??_channelThing^(0+128),w
 18212  0EAD  0081               	movwf	1
 18213  0EAE  3001               	movlw	1
 18214  0EAF  00D8               	movwf	??_channelThing^(0+128)
 18215  0EB0  0858               	movf	??_channelThing^(0+128),w
 18216  0EB1  0143               	movlb	3	; select bank3
 18217  0EB2  07E4               	addwf	_numGrpB^(0+384),f
 18218  0EB3                     l8075:	
 18219                           
 18220                           ;system.c: 413:  }
 18221  0EB3  3001               	movlw	1
 18222  0EB4  0141               	movlb	1	; select bank1
 18223  0EB5  00D8               	movwf	??_channelThing^(0+128)
 18224  0EB6  0858               	movf	??_channelThing^(0+128),w
 18225  0EB7  0146               	movlb	6	; select bank6
 18226  0EB8  07AD               	addwf	channelThing@n^(0+768),f
 18227  0EB9  3004               	movlw	4
 18228  0EBA  022D               	subwf	channelThing@n^(0+768),w
 18229  0EBB  1C03               	skipc
 18230  0EBC  2D33               	goto	l8055
 18231                           
 18232                           ;system.c: 415:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 18233  0EBD  0143               	movlb	3	; select bank3
 18234  0EBE  0865               	movf	_numGrpA^(0+384),w
 18235  0EBF  0141               	movlb	1	; select bank1
 18236  0EC0  00D8               	movwf	??_channelThing^(0+128)
 18237  0EC1  01D9               	clrf	(??_channelThing^(0+128)+1)
 18238  0EC2  0858               	movf	??_channelThing^(0+128),w
 18239  0EC3  00BE               	movwf	qsort@nel^(0+128)
 18240  0EC4  0859               	movf	(??_channelThing+1)^(0+128),w
 18241  0EC5  00BF               	movwf	(qsort@nel+1)^(0+128)
 18242  0EC6  3001               	movlw	1
 18243  0EC7  00C0               	movwf	qsort@width^(0+128)
 18244  0EC8  3000               	movlw	0
 18245  0EC9  00C1               	movwf	(qsort@width^(0+128)+1)
 18246  0ECA  3096               	movlw	low _sortDC
 18247  0ECB  00C2               	movwf	qsort@compar^(0+128)
 18248  0ECC  3036               	movlw	high _sortDC
 18249  0ECD  00C3               	movwf	(qsort@compar^(0+128)+1)
 18250  0ECE  305C               	movlw	(low (_grpA| (0+512)))& (0+255)
 18251  0ECF  319A  22C4  318C   	fcall	_qsort
 18252                           
 18253                           ;system.c: 416:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 18254  0ED2  0143               	movlb	3	; select bank3
 18255  0ED3  0864               	movf	_numGrpB^(0+384),w
 18256  0ED4  0141               	movlb	1	; select bank1
 18257  0ED5  00D8               	movwf	??_channelThing^(0+128)
 18258  0ED6  01D9               	clrf	(??_channelThing^(0+128)+1)
 18259  0ED7  0858               	movf	??_channelThing^(0+128),w
 18260  0ED8  00BE               	movwf	qsort@nel^(0+128)
 18261  0ED9  0859               	movf	(??_channelThing+1)^(0+128),w
 18262  0EDA  00BF               	movwf	(qsort@nel+1)^(0+128)
 18263  0EDB  3001               	movlw	1
 18264  0EDC  00C0               	movwf	qsort@width^(0+128)
 18265  0EDD  3000               	movlw	0
 18266  0EDE  00C1               	movwf	(qsort@width^(0+128)+1)
 18267  0EDF  3066               	movlw	low _sortDCRev
 18268  0EE0  00C2               	movwf	qsort@compar^(0+128)
 18269  0EE1  3036               	movlw	high _sortDCRev
 18270  0EE2  00C3               	movwf	(qsort@compar^(0+128)+1)
 18271  0EE3  3058               	movlw	(low (_grpB| (0+512)))& (0+255)
 18272  0EE4  319A  22C4  318C   	fcall	_qsort
 18273                           
 18274                           ;system.c: 418:  for(n = 0; n < numGrpA; n++) {
 18275  0EE7  0146               	movlb	6	; select bank6
 18276  0EE8  01AD               	clrf	channelThing@n^(0+768)
 18277  0EE9                     l8091:	
 18278  0EE9  0143               	movlb	3	; select bank3
 18279  0EEA  0865               	movf	_numGrpA^(0+384),w
 18280  0EEB  0146               	movlb	6	; select bank6
 18281  0EEC  022D               	subwf	channelThing@n^(0+768),w
 18282  0EED  1803               	btfsc	3,0
 18283  0EEE  2F5D               	goto	l8093
 18284                           
 18285                           ;system.c: 419:   if (grpB[n] > -1) {
 18286  0EEF  082D               	movf	channelThing@n^(0+768),w
 18287  0EF0  3E58               	addlw	(low (_grpB| (0+512)))& (0+255)
 18288  0EF1  0086               	movwf	6
 18289  0EF2  3002               	movlw	2	; select bank4/5
 18290  0EF3  0087               	movwf	7
 18291  0EF4  1B81               	btfsc	1,7
 18292  0EF5  2F56               	goto	l8089
 18293                           
 18294                           ;system.c: 420:    if (vChannels[grpA[n]].DC + vChannels[grpB[n]].DC > 100)
 18295  0EF6  082D               	movf	channelThing@n^(0+768),w
 18296  0EF7  3E58               	addlw	(low (_grpB| (0+512)))& (0+255)
 18297  0EF8  0086               	movwf	6
 18298  0EF9  3002               	movlw	2	; select bank4/5
 18299  0EFA  0087               	movwf	7
 18300  0EFB  0801               	movf	1,w
 18301  0EFC  0141               	movlb	1	; select bank1
 18302  0EFD  00D8               	movwf	??_channelThing^(0+128)
 18303  0EFE  3002               	movlw	2
 18304  0EFF                     u10935:	
 18305  0EFF  35D8               	lslf	??_channelThing^(0+128),f
 18306  0F00  3EFF               	addlw	-1
 18307  0F01  1D03               	skipz
 18308  0F02  2EFF               	goto	u10935
 18309  0F03  3558               	lslf	??_channelThing^(0+128),w
 18310  0F04  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 18311  0F05  0086               	movwf	6
 18312  0F06  3002               	movlw	2	; select bank4/5
 18313  0F07  0087               	movwf	7
 18314  0F08  0146               	movlb	6	; select bank6
 18315  0F09  082D               	movf	channelThing@n^(0+768),w
 18316  0F0A  3E5C               	addlw	(low (_grpA| (0+512)))& (0+255)
 18317  0F0B  0084               	movwf	4
 18318  0F0C  3002               	movlw	2	; select bank4/5
 18319  0F0D  0085               	movwf	5
 18320  0F0E  0800               	movf	0,w
 18321  0F0F  0141               	movlb	1	; select bank1
 18322  0F10  00D9               	movwf	(??_channelThing+1)^(0+128)
 18323  0F11  3002               	movlw	2
 18324  0F12                     u10945:	
 18325  0F12  35D9               	lslf	(??_channelThing+1)^(0+128),f
 18326  0F13  3EFF               	addlw	-1
 18327  0F14  1D03               	skipz
 18328  0F15  2F12               	goto	u10945
 18329  0F16  3559               	lslf	(??_channelThing+1)^(0+128),w
 18330  0F17  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 18331  0F18  0084               	movwf	4
 18332  0F19  3002               	movlw	2	; select bank4/5
 18333  0F1A  0085               	movwf	5
 18334  0F1B  0800               	movf	0,w
 18335  0F1C  0701               	addwf	1,w
 18336  0F1D  00DA               	movwf	(??_channelThing+2)^(0+128)
 18337  0F1E  01DB               	clrf	((??_channelThing+2)^(0+128)+1)
 18338  0F1F  0DDB               	rlf	(??_channelThing+3)^(0+128),f
 18339  0F20  085B               	movf	(??_channelThing+3)^(0+128),w
 18340  0F21  3A80               	xorlw	128
 18341  0F22  00DC               	movwf	(??_channelThing+4)^(0+128)
 18342  0F23  3080               	movlw	128
 18343  0F24  025C               	subwf	(??_channelThing+4)^(0+128),w
 18344  0F25  1D03               	skipz
 18345  0F26  2F29               	goto	u10955
 18346  0F27  3065               	movlw	101
 18347  0F28  025A               	subwf	(??_channelThing+2)^(0+128),w
 18348  0F29                     u10955:	
 18349  0F29  1C03               	skipc
 18350  0F2A  2F56               	goto	l8089
 18351                           
 18352                           ;system.c: 421:     vChannels[grpB[n]].DCatt = 100 - vChannels[grpA[n]].DC;
 18353  0F2B  0146               	movlb	6	; select bank6
 18354  0F2C  082D               	movf	channelThing@n^(0+768),w
 18355  0F2D  3E5C               	addlw	(low (_grpA| (0+512)))& (0+255)
 18356  0F2E  0086               	movwf	6
 18357  0F2F  3002               	movlw	2	; select bank4/5
 18358  0F30  0087               	movwf	7
 18359  0F31  0801               	movf	1,w
 18360  0F32  0141               	movlb	1	; select bank1
 18361  0F33  00D8               	movwf	??_channelThing^(0+128)
 18362  0F34  3002               	movlw	2
 18363  0F35                     u10965:	
 18364  0F35  35D8               	lslf	??_channelThing^(0+128),f
 18365  0F36  3EFF               	addlw	-1
 18366  0F37  1D03               	skipz
 18367  0F38  2F35               	goto	u10965
 18368  0F39  3558               	lslf	??_channelThing^(0+128),w
 18369  0F3A  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 18370  0F3B  0086               	movwf	6
 18371  0F3C  3002               	movlw	2	; select bank4/5
 18372  0F3D  0087               	movwf	7
 18373  0F3E  0801               	movf	1,w
 18374  0F3F  3C64               	sublw	100
 18375  0F40  00D9               	movwf	(??_channelThing+1)^(0+128)
 18376  0F41  0146               	movlb	6	; select bank6
 18377  0F42  082D               	movf	channelThing@n^(0+768),w
 18378  0F43  3E58               	addlw	(low (_grpB| (0+512)))& (0+255)
 18379  0F44  0086               	movwf	6
 18380  0F45  3002               	movlw	2	; select bank4/5
 18381  0F46  0087               	movwf	7
 18382  0F47  0801               	movf	1,w
 18383  0F48  0141               	movlb	1	; select bank1
 18384  0F49  00DA               	movwf	(??_channelThing+2)^(0+128)
 18385  0F4A  3002               	movlw	2
 18386  0F4B                     u10975:	
 18387  0F4B  35DA               	lslf	(??_channelThing+2)^(0+128),f
 18388  0F4C  3EFF               	addlw	-1
 18389  0F4D  1D03               	skipz
 18390  0F4E  2F4B               	goto	u10975
 18391  0F4F  355A               	lslf	(??_channelThing+2)^(0+128),w
 18392  0F50  3E35               	addlw	(low ((_vChannels| (0+512)+7)))& (0+255)
 18393  0F51  0086               	movwf	6
 18394  0F52  3002               	movlw	2	; select bank4/5
 18395  0F53  0087               	movwf	7
 18396  0F54  0859               	movf	(??_channelThing+1)^(0+128),w
 18397  0F55  0081               	movwf	1
 18398  0F56                     l8089:	
 18399                           
 18400                           ;system.c: 423:  }
 18401  0F56  3001               	movlw	1
 18402  0F57  0141               	movlb	1	; select bank1
 18403  0F58  00D8               	movwf	??_channelThing^(0+128)
 18404  0F59  0858               	movf	??_channelThing^(0+128),w
 18405  0F5A  0146               	movlb	6	; select bank6
 18406  0F5B  07AD               	addwf	channelThing@n^(0+768),f
 18407  0F5C  2EE9               	goto	l8091
 18408  0F5D                     l8093:	
 18409                           
 18410                           ;system.c: 425:  for(n = 0; n < 4; n++) {
 18411  0F5D  01AD               	clrf	channelThing@n^(0+768)
 18412  0F5E                     l8099:	
 18413                           
 18414                           ;system.c: 426:   phyCh = vChannels[n].phyChNum;
 18415  0F5E  082D               	movf	channelThing@n^(0+768),w
 18416  0F5F  0141               	movlb	1	; select bank1
 18417  0F60  00D8               	movwf	??_channelThing^(0+128)
 18418  0F61  3002               	movlw	2
 18419  0F62                     u10995:	
 18420  0F62  35D8               	lslf	??_channelThing^(0+128),f
 18421  0F63  3EFF               	addlw	-1
 18422  0F64  1D03               	skipz
 18423  0F65  2F62               	goto	u10995
 18424  0F66  3558               	lslf	??_channelThing^(0+128),w
 18425  0F67  3E2E               	addlw	(low (_vChannels| (0+512)))& (0+255)
 18426  0F68  0086               	movwf	6
 18427  0F69  3002               	movlw	2	; select bank4/5
 18428  0F6A  0087               	movwf	7
 18429  0F6B  0801               	movf	1,w
 18430  0F6C  00D9               	movwf	(??_channelThing+1)^(0+128)
 18431  0F6D  0859               	movf	(??_channelThing+1)^(0+128),w
 18432  0F6E  0146               	movlb	6	; select bank6
 18433  0F6F  00AC               	movwf	channelThing@phyCh^(0+768)
 18434                           
 18435                           ;system.c: 428:   data->chData[phyCh].Patt = (vChannels[n].DCatt * data->chData[phyCh].P
      +                          max) / 100.0;
 18436  0F70  3042               	movlw	66
 18437  0F71  0140               	movlb	0	; select bank0
 18438  0F72  00D5               	movwf	___fldiv@a+3
 18439  0F73  30C8               	movlw	200
 18440  0F74  00D4               	movwf	___fldiv@a+2
 18441  0F75  3000               	movlw	0
 18442  0F76  00D3               	movwf	___fldiv@a+1
 18443  0F77  3000               	movlw	0
 18444  0F78  00D2               	movwf	___fldiv@a
 18445  0F79  0146               	movlb	6	; select bank6
 18446  0F7A  082C               	movf	channelThing@phyCh^(0+768),w
 18447  0F7B  0141               	movlb	1	; select bank1
 18448  0F7C  00D8               	movwf	??_channelThing^(0+128)
 18449  0F7D  01D9               	clrf	(??_channelThing^(0+128)+1)
 18450  0F7E  3005               	movlw	5
 18451  0F7F                     u11005:	
 18452  0F7F  35D8               	lslf	??_channelThing^(0+128),f
 18453  0F80  0DD9               	rlf	(??_channelThing^(0+128)+1),f
 18454  0F81  0B89               	decfsz	9,f
 18455  0F82  2F7F               	goto	u11005
 18456  0F83  0858               	movf	??_channelThing^(0+128),w
 18457  0F84  0756               	addwf	channelThing@data^(0+128),w
 18458  0F85  00DA               	movwf	(??_channelThing+2)^(0+128)
 18459  0F86  0859               	movf	(??_channelThing+1)^(0+128),w
 18460  0F87  3D57               	addwfc	(channelThing@data+1)^(0+128),w
 18461  0F88  00DB               	movwf	(??_channelThing+3)^(0+128)
 18462  0F89  085A               	movf	(??_channelThing+2)^(0+128),w
 18463  0F8A  3E2E               	addlw	46
 18464  0F8B  0086               	movwf	6
 18465  0F8C  3000               	movlw	0
 18466  0F8D  3D5B               	addwfc	(??_channelThing+3)^(0+128),w
 18467  0F8E  0087               	movwf	7
 18468  0F8F  3F40               	moviw [0]fsr1
 18469  0F90  0140               	movlb	0	; select bank0
 18470  0F91  00B8               	movwf	___flmul@b
 18471  0F92  3F41               	moviw [1]fsr1
 18472  0F93  00B9               	movwf	___flmul@b+1
 18473  0F94  3F42               	moviw [2]fsr1
 18474  0F95  00BA               	movwf	___flmul@b+2
 18475  0F96  3F43               	moviw [3]fsr1
 18476  0F97  00BB               	movwf	___flmul@b+3
 18477  0F98  0146               	movlb	6	; select bank6
 18478  0F99  082D               	movf	channelThing@n^(0+768),w
 18479  0F9A  0141               	movlb	1	; select bank1
 18480  0F9B  00DC               	movwf	(??_channelThing+4)^(0+128)
 18481  0F9C  3002               	movlw	2
 18482  0F9D                     u11015:	
 18483  0F9D  35DC               	lslf	(??_channelThing+4)^(0+128),f
 18484  0F9E  3EFF               	addlw	-1
 18485  0F9F  1D03               	skipz
 18486  0FA0  2F9D               	goto	u11015
 18487  0FA1  355C               	lslf	(??_channelThing+4)^(0+128),w
 18488  0FA2  3E35               	addlw	(low ((_vChannels| (0+512)+7)))& (0+255)
 18489  0FA3  0086               	movwf	6
 18490  0FA4  3002               	movlw	2	; select bank4/5
 18491  0FA5  0087               	movwf	7
 18492  0FA6  0801               	movf	1,w
 18493  0FA7  00DD               	movwf	(??_channelThing+5)^(0+128)
 18494  0FA8  01DE               	clrf	((??_channelThing+5)^(0+128)+1)
 18495  0FA9  01DF               	clrf	((??_channelThing+5)^(0+128)+2)
 18496  0FAA  01E0               	clrf	((??_channelThing+5)^(0+128)+3)
 18497  0FAB  0860               	movf	(??_channelThing+8)^(0+128),w
 18498  0FAC  0140               	movlb	0	; select bank0
 18499  0FAD  00AD               	movwf	___xxtofl@val+3
 18500  0FAE  0141               	movlb	1	; select bank1
 18501  0FAF  085F               	movf	(??_channelThing+7)^(0+128),w
 18502  0FB0  0140               	movlb	0	; select bank0
 18503  0FB1  00AC               	movwf	___xxtofl@val+2
 18504  0FB2  0141               	movlb	1	; select bank1
 18505  0FB3  085E               	movf	(??_channelThing+6)^(0+128),w
 18506  0FB4  0140               	movlb	0	; select bank0
 18507  0FB5  00AB               	movwf	___xxtofl@val+1
 18508  0FB6  0141               	movlb	1	; select bank1
 18509  0FB7  085D               	movf	(??_channelThing+5)^(0+128),w
 18510  0FB8  0140               	movlb	0	; select bank0
 18511  0FB9  00AA               	movwf	___xxtofl@val
 18512  0FBA  3001               	movlw	1
 18513  0FBB  31AF  276A  318C   	fcall	___xxtofl
 18514  0FBE  0140               	movlb	0	; select bank0
 18515  0FBF  082D               	movf	?___xxtofl+3,w
 18516  0FC0  00BF               	movwf	___flmul@a+3
 18517  0FC1  082C               	movf	?___xxtofl+2,w
 18518  0FC2  00BE               	movwf	___flmul@a+2
 18519  0FC3  082B               	movf	?___xxtofl+1,w
 18520  0FC4  00BD               	movwf	___flmul@a+1
 18521  0FC5  082A               	movf	?___xxtofl,w
 18522  0FC6  00BC               	movwf	___flmul@a
 18523  0FC7  3195  25D4  318C   	fcall	___flmul
 18524  0FCA  0140               	movlb	0	; select bank0
 18525  0FCB  083B               	movf	?___flmul+3,w
 18526  0FCC  00D9               	movwf	___fldiv@b+3
 18527  0FCD  083A               	movf	?___flmul+2,w
 18528  0FCE  00D8               	movwf	___fldiv@b+2
 18529  0FCF  0839               	movf	?___flmul+1,w
 18530  0FD0  00D7               	movwf	___fldiv@b+1
 18531  0FD1  0838               	movf	?___flmul,w
 18532  0FD2  00D6               	movwf	___fldiv@b
 18533  0FD3  319E  2628  318C   	fcall	___fldiv
 18534  0FD6  0146               	movlb	6	; select bank6
 18535  0FD7  082C               	movf	channelThing@phyCh^(0+768),w
 18536  0FD8  0141               	movlb	1	; select bank1
 18537  0FD9  00E1               	movwf	(??_channelThing+9)^(0+128)
 18538  0FDA  01E2               	clrf	((??_channelThing+9)^(0+128)+1)
 18539  0FDB  3005               	movlw	5
 18540  0FDC                     u11025:	
 18541  0FDC  35E1               	lslf	(??_channelThing+9)^(0+128),f
 18542  0FDD  0DE2               	rlf	((??_channelThing+9)^(0+128)+1),f
 18543  0FDE  0B89               	decfsz	9,f
 18544  0FDF  2FDC               	goto	u11025
 18545  0FE0  0861               	movf	(??_channelThing+9)^(0+128),w
 18546  0FE1  0756               	addwf	channelThing@data^(0+128),w
 18547  0FE2  00E3               	movwf	(??_channelThing+11)^(0+128)
 18548  0FE3  0862               	movf	(??_channelThing+10)^(0+128),w
 18549  0FE4  3D57               	addwfc	(channelThing@data+1)^(0+128),w
 18550  0FE5  00E4               	movwf	(??_channelThing+12)^(0+128)
 18551  0FE6  0863               	movf	(??_channelThing+11)^(0+128),w
 18552  0FE7  3E36               	addlw	54
 18553  0FE8  0086               	movwf	6
 18554  0FE9  3000               	movlw	0
 18555  0FEA  3D64               	addwfc	(??_channelThing+12)^(0+128),w
 18556  0FEB  0087               	movwf	7
 18557  0FEC  0140               	movlb	0	; select bank0
 18558  0FED  0852               	movf	?___fldiv,w
 18559  0FEE  3FC0               	movwi [0]fsr1
 18560  0FEF  0853               	movf	?___fldiv+1,w
 18561  0FF0  3FC1               	movwi [1]fsr1
 18562  0FF1  0854               	movf	?___fldiv+2,w
 18563  0FF2  3FC2               	movwi [2]fsr1
 18564  0FF3  0855               	movf	?___fldiv+3,w
 18565  0FF4  3FC3               	movwi [3]fsr1
 18566                           
 18567                           ;system.c: 429:  }
 18568  0FF5  3001               	movlw	1
 18569  0FF6  0141               	movlb	1	; select bank1
 18570  0FF7  00D8               	movwf	??_channelThing^(0+128)
 18571  0FF8  0858               	movf	??_channelThing^(0+128),w
 18572  0FF9  0146               	movlb	6	; select bank6
 18573  0FFA  07AD               	addwf	channelThing@n^(0+768),f
 18574  0FFB  3004               	movlw	4
 18575  0FFC  022D               	subwf	channelThing@n^(0+768),w
 18576  0FFD  1803               	btfsc	3,0
 18577  0FFE  0008               	return
 18578  0FFF  2F5E               	goto	l8099
 18579  1000                     __end_of_channelThing:	
 18580                           
 18581                           	psect	text52
 18582  1AC4                     __ptext52:	
 18583 ;; *************** function _qsort *****************
 18584 ;; Defined at:
 18585 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 18586 ;; Parameters:    Size  Location     Type
 18587 ;;  vbase           1    wreg     PTR void 
 18588 ;;		 -> grpB(4), grpA(4), vChannels(32), 
 18589 ;;  nel             2   30[BANK1 ] unsigned int 
 18590 ;;  width           2   32[BANK1 ] unsigned int 
 18591 ;;  compar          2   34[BANK1 ] PTR FTN(PTR const void ,
 18592 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 18593 ;; Auto vars:     Size  Location     Type
 18594 ;;  vbase           1   41[BANK1 ] PTR void 
 18595 ;;		 -> grpB(4), grpA(4), vChannels(32), 
 18596 ;;  stack          64    0[BANK3 ] struct .[16]
 18597 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 18598 ;;  j               2   52[BANK1 ] int 
 18599 ;;  i               2   50[BANK1 ] int 
 18600 ;;  s               2   48[BANK1 ] int 
 18601 ;;  r               2   46[BANK1 ] int 
 18602 ;;  l               2   44[BANK1 ] int 
 18603 ;;  base            1   43[BANK1 ] PTR unsigned char 
 18604 ;;		 -> grpB(4), grpA(4), vChannels(32), 
 18605 ;;  x               1   42[BANK1 ] PTR unsigned char 
 18606 ;;		 -> qsort@xbuf(60), 
 18607 ;; Return value:  Size  Location     Type
 18608 ;;                  1    wreg      void 
 18609 ;; Registers used:
 18610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18611 ;; Tracked objects:
 18612 ;;		On entry : 0/0
 18613 ;;		On exit  : 0/0
 18614 ;;		Unchanged: 0/0
 18615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18616 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18617 ;;      Locals:         0       0      13      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18618 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18619 ;;      Totals:         0       0      24      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18620 ;;Total ram usage:      148 bytes
 18621 ;; Hardware stack levels used:    1
 18622 ;; Hardware stack levels required when called:    6
 18623 ;; This function calls:
 18624 ;;		___awdiv
 18625 ;;		___bmul
 18626 ;;		_memcpy
 18627 ;;		_sortCur
 18628 ;;		_sortDC
 18629 ;;		_sortDCRev
 18630 ;;		_swap
 18631 ;; This function is called by:
 18632 ;;		_channelThing
 18633 ;; This function uses a non-reentrant model
 18634 ;;
 18635                           
 18636                           
 18637                           ;psect for function _qsort
 18638  1AC4                     _qsort:	
 18639                           
 18640                           ;incstack = 0
 18641                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18642                           ;qsort@vbase stored from wreg
 18643  1AC4  0141               	movlb	1	; select bank1
 18644  1AC5  00C9               	movwf	qsort@vbase^(0+128)
 18645  1AC6  0849               	movf	qsort@vbase^(0+128),w
 18646  1AC7  00C4               	movwf	??_qsort^(0+128)
 18647  1AC8  0844               	movf	??_qsort^(0+128),w
 18648  1AC9  00CB               	movwf	qsort@base^(0+128)
 18649  1ACA  3000               	movlw	0
 18650  1ACB  0241               	subwf	(qsort@width+1)^(0+128),w
 18651  1ACC  303C               	movlw	60
 18652  1ACD  1903               	skipnz
 18653  1ACE  0240               	subwf	qsort@width^(0+128),w
 18654  1ACF  1803               	skipnc
 18655  1AD0  0008               	return
 18656  1AD1  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 18657  1AD2  00C4               	movwf	??_qsort^(0+128)
 18658  1AD3  0844               	movf	??_qsort^(0+128),w
 18659  1AD4  00CA               	movwf	qsort@x^(0+128)
 18660  1AD5  0840               	movf	qsort@width^(0+128),w
 18661  1AD6  074A               	addwf	qsort@x^(0+128),w
 18662  1AD7  00C4               	movwf	??_qsort^(0+128)
 18663  1AD8  0844               	movf	??_qsort^(0+128),w
 18664  1AD9  0086               	movwf	6
 18665  1ADA  3001               	movlw	1	; select bank2/3
 18666  1ADB  0087               	movwf	7
 18667  1ADC  0181               	clrf	1
 18668  1ADD  01D0               	clrf	qsort@s^(0+128)
 18669  1ADE  01D1               	clrf	(qsort@s+1)^(0+128)
 18670  1ADF  0143               	movlb	3	; select bank3
 18671  1AE0  01A0               	clrf	qsort@stack^(0+384)
 18672  1AE1  01A1               	clrf	(qsort@stack+1)^(0+384)
 18673  1AE2  0141               	movlb	1	; select bank1
 18674  1AE3  083E               	movf	qsort@nel^(0+128),w
 18675  1AE4  3EFF               	addlw	255
 18676  1AE5  0143               	movlb	3	; select bank3
 18677  1AE6  00A2               	movwf	(qsort@stack^(0+384)+2)
 18678  1AE7  30FF               	movlw	255
 18679  1AE8  0141               	movlb	1	; select bank1
 18680  1AE9  3D3F               	addwfc	(qsort@nel+1)^(0+128),w
 18681  1AEA  0143               	movlb	3	; select bank3
 18682  1AEB  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 18683  1AEC                     l7715:	
 18684  1AEC  0141               	movlb	1	; select bank1
 18685  1AED  0850               	movf	qsort@s^(0+128),w
 18686  1AEE  00C4               	movwf	??_qsort^(0+128)
 18687  1AEF  3001               	movlw	1
 18688  1AF0                     u10175:	
 18689  1AF0  35C4               	lslf	??_qsort^(0+128),f
 18690  1AF1  3EFF               	addlw	-1
 18691  1AF2  1D03               	skipz
 18692  1AF3  2AF0               	goto	u10175
 18693  1AF4  3544               	lslf	??_qsort^(0+128),w
 18694  1AF5  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18695  1AF6  0086               	movwf	6
 18696  1AF7  3001               	movlw	1	; select bank3/4
 18697  1AF8  0087               	movwf	7
 18698  1AF9  3F40               	moviw [0]fsr1
 18699  1AFA  00CC               	movwf	qsort@l^(0+128)
 18700  1AFB  3F41               	moviw [1]fsr1
 18701  1AFC  00CD               	movwf	(qsort@l+1)^(0+128)
 18702  1AFD  0850               	movf	qsort@s^(0+128),w
 18703  1AFE  00C4               	movwf	??_qsort^(0+128)
 18704  1AFF  3001               	movlw	1
 18705  1B00                     u10185:	
 18706  1B00  35C4               	lslf	??_qsort^(0+128),f
 18707  1B01  3EFF               	addlw	-1
 18708  1B02  1D03               	skipz
 18709  1B03  2B00               	goto	u10185
 18710  1B04  3544               	lslf	??_qsort^(0+128),w
 18711  1B05  3E02               	addlw	2
 18712  1B06  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18713  1B07  0086               	movwf	6
 18714  1B08  3001               	movlw	1	; select bank3/4
 18715  1B09  0087               	movwf	7
 18716  1B0A  3F40               	moviw [0]fsr1
 18717  1B0B  00CE               	movwf	qsort@r^(0+128)
 18718  1B0C  3F41               	moviw [1]fsr1
 18719  1B0D  00CF               	movwf	(qsort@r+1)^(0+128)
 18720  1B0E  30FF               	movlw	255
 18721  1B0F  07D0               	addwf	qsort@s^(0+128),f
 18722  1B10  30FF               	movlw	255
 18723  1B11  3DD1               	addwfc	(qsort@s+1)^(0+128),f
 18724  1B12                     l7721:	
 18725  1B12  0141               	movlb	1	; select bank1
 18726  1B13  084D               	movf	(qsort@l+1)^(0+128),w
 18727  1B14  00D3               	movwf	(qsort@i+1)^(0+128)
 18728  1B15  084C               	movf	qsort@l^(0+128),w
 18729  1B16  00D2               	movwf	qsort@i^(0+128)
 18730  1B17  084F               	movf	(qsort@r+1)^(0+128),w
 18731  1B18  00D5               	movwf	(qsort@j+1)^(0+128)
 18732  1B19  084E               	movf	qsort@r^(0+128),w
 18733  1B1A  00D4               	movwf	qsort@j^(0+128)
 18734  1B1B  0840               	movf	qsort@width^(0+128),w
 18735  1B1C  00C4               	movwf	??_qsort^(0+128)
 18736  1B1D  0844               	movf	??_qsort^(0+128),w
 18737  1B1E  0140               	movlb	0	; select bank0
 18738  1B1F  00AD               	movwf	___bmul@multiplicand
 18739  1B20  0141               	movlb	1	; select bank1
 18740  1B21  0854               	movf	qsort@j^(0+128),w
 18741  1B22  0752               	addwf	qsort@i^(0+128),w
 18742  1B23  0140               	movlb	0	; select bank0
 18743  1B24  00A6               	movwf	___awdiv@dividend
 18744  1B25  0141               	movlb	1	; select bank1
 18745  1B26  0855               	movf	(qsort@j+1)^(0+128),w
 18746  1B27  3D53               	addwfc	(qsort@i+1)^(0+128),w
 18747  1B28  0140               	movlb	0	; select bank0
 18748  1B29  00A7               	movwf	___awdiv@dividend+1
 18749  1B2A  3002               	movlw	2
 18750  1B2B  00A4               	movwf	___awdiv@divisor
 18751  1B2C  3000               	movlw	0
 18752  1B2D  00A5               	movwf	___awdiv@divisor+1
 18753  1B2E  31AA  228B  319A   	fcall	___awdiv
 18754  1B31  0140               	movlb	0	; select bank0
 18755  1B32  0824               	movf	?___awdiv,w
 18756  1B33  31B5  2545  319A   	fcall	___bmul
 18757  1B36  0141               	movlb	1	; select bank1
 18758  1B37  074B               	addwf	qsort@base^(0+128),w
 18759  1B38  00C5               	movwf	(??_qsort+1)^(0+128)
 18760  1B39  0845               	movf	(??_qsort+1)^(0+128),w
 18761  1B3A  0140               	movlb	0	; select bank0
 18762  1B3B  00B1               	movwf	memcpy@s1
 18763  1B3C  0141               	movlb	1	; select bank1
 18764  1B3D  0841               	movf	(qsort@width+1)^(0+128),w
 18765  1B3E  0140               	movlb	0	; select bank0
 18766  1B3F  00B3               	movwf	memcpy@n+1
 18767  1B40  0141               	movlb	1	; select bank1
 18768  1B41  0840               	movf	qsort@width^(0+128),w
 18769  1B42  0140               	movlb	0	; select bank0
 18770  1B43  00B2               	movwf	memcpy@n
 18771  1B44  0141               	movlb	1	; select bank1
 18772  1B45  084A               	movf	qsort@x^(0+128),w
 18773  1B46  31B6  260B  319A   	fcall	_memcpy
 18774  1B49                     l7729:	
 18775  1B49  0141               	movlb	1	; select bank1
 18776  1B4A  0840               	movf	qsort@width^(0+128),w
 18777  1B4B  00C4               	movwf	??_qsort^(0+128)
 18778  1B4C  0844               	movf	??_qsort^(0+128),w
 18779  1B4D  0140               	movlb	0	; select bank0
 18780  1B4E  00AD               	movwf	___bmul@multiplicand
 18781  1B4F  0141               	movlb	1	; select bank1
 18782  1B50  0852               	movf	qsort@i^(0+128),w
 18783  1B51  31B5  2545  319A   	fcall	___bmul
 18784  1B54  0141               	movlb	1	; select bank1
 18785  1B55  074B               	addwf	qsort@base^(0+128),w
 18786  1B56  00B6               	movwf	sortCur@cmp1^(0+128)
 18787  1B57  3002               	movlw	2
 18788  1B58  00B7               	movwf	(sortCur@cmp1+1)^(0+128)
 18789  1B59  084A               	movf	qsort@x^(0+128),w
 18790  1B5A  00B8               	movwf	sortCur@cmp2^(0+128)
 18791  1B5B  3001               	movlw	1
 18792  1B5C  00B9               	movwf	(sortCur@cmp2+1)^(0+128)
 18793  1B5D  0843               	movf	(qsort@compar+1)^(0+128),w
 18794  1B5E  008A               	movwf	10
 18795  1B5F  0842               	movf	qsort@compar^(0+128),w
 18796  1B60  000A               	callw
 18797  1B61  319A               	pagesel	$
 18798  1B62  0141               	movlb	1	; select bank1
 18799  1B63  1FB7               	btfss	(?_sortCur+1)^(0+128),7
 18800  1B64  2B6E               	goto	l7733
 18801  1B65  3001               	movlw	1
 18802  1B66  07D2               	addwf	qsort@i^(0+128),f
 18803  1B67  3000               	movlw	0
 18804  1B68  3DD3               	addwfc	(qsort@i+1)^(0+128),f
 18805  1B69  2B49               	goto	l7729
 18806  1B6A                     l7731:	
 18807  1B6A  30FF               	movlw	255
 18808  1B6B  07D4               	addwf	qsort@j^(0+128),f
 18809  1B6C  30FF               	movlw	255
 18810  1B6D  3DD5               	addwfc	(qsort@j+1)^(0+128),f
 18811  1B6E                     l7733:	
 18812  1B6E  084A               	movf	qsort@x^(0+128),w
 18813  1B6F  00B6               	movwf	sortCur@cmp1^(0+128)
 18814  1B70  3001               	movlw	1
 18815  1B71  00B7               	movwf	(sortCur@cmp1+1)^(0+128)
 18816  1B72  0840               	movf	qsort@width^(0+128),w
 18817  1B73  00C4               	movwf	??_qsort^(0+128)
 18818  1B74  0844               	movf	??_qsort^(0+128),w
 18819  1B75  0140               	movlb	0	; select bank0
 18820  1B76  00AD               	movwf	___bmul@multiplicand
 18821  1B77  0141               	movlb	1	; select bank1
 18822  1B78  0854               	movf	qsort@j^(0+128),w
 18823  1B79  31B5  2545  319A   	fcall	___bmul
 18824  1B7C  0141               	movlb	1	; select bank1
 18825  1B7D  074B               	addwf	qsort@base^(0+128),w
 18826  1B7E  00B8               	movwf	sortCur@cmp2^(0+128)
 18827  1B7F  3002               	movlw	2
 18828  1B80  00B9               	movwf	(sortCur@cmp2+1)^(0+128)
 18829  1B81  0843               	movf	(qsort@compar+1)^(0+128),w
 18830  1B82  008A               	movwf	10
 18831  1B83  0842               	movf	qsort@compar^(0+128),w
 18832  1B84  000A               	callw
 18833  1B85  319A               	pagesel	$
 18834  1B86  0141               	movlb	1	; select bank1
 18835  1B87  1BB7               	btfsc	(?_sortCur+1)^(0+128),7
 18836  1B88  2B6A               	goto	l7731
 18837  1B89  0855               	movf	(qsort@j+1)^(0+128),w
 18838  1B8A  3A80               	xorlw	128
 18839  1B8B  00C4               	movwf	??_qsort^(0+128)
 18840  1B8C  0853               	movf	(qsort@i+1)^(0+128),w
 18841  1B8D  3A80               	xorlw	128
 18842  1B8E  0244               	subwf	??_qsort^(0+128),w
 18843  1B8F  1D03               	skipz
 18844  1B90  2B93               	goto	u10215
 18845  1B91  0852               	movf	qsort@i^(0+128),w
 18846  1B92  0254               	subwf	qsort@j^(0+128),w
 18847  1B93                     u10215:	
 18848  1B93  1C03               	skipc
 18849  1B94  2BCB               	goto	l7743
 18850  1B95  0141               	movlb	1	; select bank1
 18851  1B96  0841               	movf	(qsort@width+1)^(0+128),w
 18852  1B97  0140               	movlb	0	; select bank0
 18853  1B98  00B2               	movwf	swap@len+1
 18854  1B99  0141               	movlb	1	; select bank1
 18855  1B9A  0840               	movf	qsort@width^(0+128),w
 18856  1B9B  0140               	movlb	0	; select bank0
 18857  1B9C  00B1               	movwf	swap@len
 18858  1B9D  0141               	movlb	1	; select bank1
 18859  1B9E  0840               	movf	qsort@width^(0+128),w
 18860  1B9F  00C4               	movwf	??_qsort^(0+128)
 18861  1BA0  0844               	movf	??_qsort^(0+128),w
 18862  1BA1  0140               	movlb	0	; select bank0
 18863  1BA2  00AD               	movwf	___bmul@multiplicand
 18864  1BA3  0141               	movlb	1	; select bank1
 18865  1BA4  0852               	movf	qsort@i^(0+128),w
 18866  1BA5  31B5  2545  319A   	fcall	___bmul
 18867  1BA8  0141               	movlb	1	; select bank1
 18868  1BA9  074B               	addwf	qsort@base^(0+128),w
 18869  1BAA  00C5               	movwf	(??_qsort+1)^(0+128)
 18870  1BAB  0845               	movf	(??_qsort+1)^(0+128),w
 18871  1BAC  0140               	movlb	0	; select bank0
 18872  1BAD  00B3               	movwf	swap@s1
 18873  1BAE  0141               	movlb	1	; select bank1
 18874  1BAF  0840               	movf	qsort@width^(0+128),w
 18875  1BB0  00C6               	movwf	(??_qsort+2)^(0+128)
 18876  1BB1  0846               	movf	(??_qsort+2)^(0+128),w
 18877  1BB2  0140               	movlb	0	; select bank0
 18878  1BB3  00AD               	movwf	___bmul@multiplicand
 18879  1BB4  0141               	movlb	1	; select bank1
 18880  1BB5  0854               	movf	qsort@j^(0+128),w
 18881  1BB6  31B5  2545  319A   	fcall	___bmul
 18882  1BB9  0141               	movlb	1	; select bank1
 18883  1BBA  074B               	addwf	qsort@base^(0+128),w
 18884  1BBB  00C7               	movwf	(??_qsort+3)^(0+128)
 18885  1BBC  0847               	movf	(??_qsort+3)^(0+128),w
 18886  1BBD  0140               	movlb	0	; select bank0
 18887  1BBE  00B4               	movwf	swap@s2
 18888  1BBF  31B6  2637  319A   	fcall	_swap
 18889  1BC2  3001               	movlw	1
 18890  1BC3  0141               	movlb	1	; select bank1
 18891  1BC4  07D2               	addwf	qsort@i^(0+128),f
 18892  1BC5  3000               	movlw	0
 18893  1BC6  3DD3               	addwfc	(qsort@i+1)^(0+128),f
 18894  1BC7  30FF               	movlw	255
 18895  1BC8  07D4               	addwf	qsort@j^(0+128),f
 18896  1BC9  30FF               	movlw	255
 18897  1BCA  3DD5               	addwfc	(qsort@j+1)^(0+128),f
 18898  1BCB                     l7743:	
 18899  1BCB  0141               	movlb	1	; select bank1
 18900  1BCC  0855               	movf	(qsort@j+1)^(0+128),w
 18901  1BCD  3A80               	xorlw	128
 18902  1BCE  00C4               	movwf	??_qsort^(0+128)
 18903  1BCF  0853               	movf	(qsort@i+1)^(0+128),w
 18904  1BD0  3A80               	xorlw	128
 18905  1BD1  0244               	subwf	??_qsort^(0+128),w
 18906  1BD2  1D03               	skipz
 18907  1BD3  2BD6               	goto	u10225
 18908  1BD4  0852               	movf	qsort@i^(0+128),w
 18909  1BD5  0254               	subwf	qsort@j^(0+128),w
 18910  1BD6                     u10225:	
 18911  1BD6  1803               	skipnc
 18912  1BD7  2B49               	goto	l7729
 18913  1BD8  0141               	movlb	1	; select bank1
 18914  1BD9  0852               	movf	qsort@i^(0+128),w
 18915  1BDA  024E               	subwf	qsort@r^(0+128),w
 18916  1BDB  00C4               	movwf	??_qsort^(0+128)
 18917  1BDC  0853               	movf	(qsort@i+1)^(0+128),w
 18918  1BDD  3B4F               	subwfb	(qsort@r+1)^(0+128),w
 18919  1BDE  00C5               	movwf	(??_qsort+1)^(0+128)
 18920  1BDF  084C               	movf	qsort@l^(0+128),w
 18921  1BE0  0254               	subwf	qsort@j^(0+128),w
 18922  1BE1  00C6               	movwf	(??_qsort+2)^(0+128)
 18923  1BE2  084D               	movf	(qsort@l+1)^(0+128),w
 18924  1BE3  3B55               	subwfb	(qsort@j+1)^(0+128),w
 18925  1BE4  00C7               	movwf	(??_qsort+3)^(0+128)
 18926  1BE5  0847               	movf	(??_qsort+3)^(0+128),w
 18927  1BE6  3A80               	xorlw	128
 18928  1BE7  00C8               	movwf	(??_qsort+4)^(0+128)
 18929  1BE8  0845               	movf	(??_qsort+1)^(0+128),w
 18930  1BE9  3A80               	xorlw	128
 18931  1BEA  0248               	subwf	(??_qsort+4)^(0+128),w
 18932  1BEB  1D03               	skipz
 18933  1BEC  2BEF               	goto	u10235
 18934  1BED  0844               	movf	??_qsort^(0+128),w
 18935  1BEE  0246               	subwf	(??_qsort+2)^(0+128),w
 18936  1BEF                     u10235:	
 18937  1BEF  1803               	skipnc
 18938  1BF0  2C2A               	goto	l7753
 18939  1BF1  0141               	movlb	1	; select bank1
 18940  1BF2  0853               	movf	(qsort@i+1)^(0+128),w
 18941  1BF3  3A80               	xorlw	128
 18942  1BF4  00C4               	movwf	??_qsort^(0+128)
 18943  1BF5  084F               	movf	(qsort@r+1)^(0+128),w
 18944  1BF6  3A80               	xorlw	128
 18945  1BF7  0244               	subwf	??_qsort^(0+128),w
 18946  1BF8  1D03               	skipz
 18947  1BF9  2BFC               	goto	u10245
 18948  1BFA  084E               	movf	qsort@r^(0+128),w
 18949  1BFB  0252               	subwf	qsort@i^(0+128),w
 18950  1BFC                     u10245:	
 18951  1BFC  1803               	skipnc
 18952  1BFD  2C24               	goto	l7751
 18953  1BFE  3001               	movlw	1
 18954  1BFF  0141               	movlb	1	; select bank1
 18955  1C00  07D0               	addwf	qsort@s^(0+128),f
 18956  1C01  3000               	movlw	0
 18957  1C02  3DD1               	addwfc	(qsort@s+1)^(0+128),f
 18958  1C03  0850               	movf	qsort@s^(0+128),w
 18959  1C04  00C4               	movwf	??_qsort^(0+128)
 18960  1C05  3001               	movlw	1
 18961  1C06                     u10255:	
 18962  1C06  35C4               	lslf	??_qsort^(0+128),f
 18963  1C07  3EFF               	addlw	-1
 18964  1C08  1D03               	skipz
 18965  1C09  2C06               	goto	u10255
 18966  1C0A  3544               	lslf	??_qsort^(0+128),w
 18967  1C0B  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18968  1C0C  0086               	movwf	6
 18969  1C0D  3001               	movlw	1	; select bank3/4
 18970  1C0E  0087               	movwf	7
 18971  1C0F  0852               	movf	qsort@i^(0+128),w
 18972  1C10  3FC0               	movwi [0]fsr1
 18973  1C11  0853               	movf	(qsort@i+1)^(0+128),w
 18974  1C12  3FC1               	movwi [1]fsr1
 18975  1C13  0850               	movf	qsort@s^(0+128),w
 18976  1C14  00C4               	movwf	??_qsort^(0+128)
 18977  1C15  3001               	movlw	1
 18978  1C16                     u10265:	
 18979  1C16  35C4               	lslf	??_qsort^(0+128),f
 18980  1C17  3EFF               	addlw	-1
 18981  1C18  1D03               	skipz
 18982  1C19  2C16               	goto	u10265
 18983  1C1A  3544               	lslf	??_qsort^(0+128),w
 18984  1C1B  3E02               	addlw	2
 18985  1C1C  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18986  1C1D  0086               	movwf	6
 18987  1C1E  3001               	movlw	1	; select bank3/4
 18988  1C1F  0087               	movwf	7
 18989  1C20  084E               	movf	qsort@r^(0+128),w
 18990  1C21  3FC0               	movwi [0]fsr1
 18991  1C22  084F               	movf	(qsort@r+1)^(0+128),w
 18992  1C23  3FC1               	movwi [1]fsr1
 18993  1C24                     l7751:	
 18994  1C24  0141               	movlb	1	; select bank1
 18995  1C25  0855               	movf	(qsort@j+1)^(0+128),w
 18996  1C26  00CF               	movwf	(qsort@r+1)^(0+128)
 18997  1C27  0854               	movf	qsort@j^(0+128),w
 18998  1C28  00CE               	movwf	qsort@r^(0+128)
 18999  1C29  2C62               	goto	l7759
 19000  1C2A                     l7753:	
 19001  1C2A  0141               	movlb	1	; select bank1
 19002  1C2B  084D               	movf	(qsort@l+1)^(0+128),w
 19003  1C2C  3A80               	xorlw	128
 19004  1C2D  00C4               	movwf	??_qsort^(0+128)
 19005  1C2E  0855               	movf	(qsort@j+1)^(0+128),w
 19006  1C2F  3A80               	xorlw	128
 19007  1C30  0244               	subwf	??_qsort^(0+128),w
 19008  1C31  1D03               	skipz
 19009  1C32  2C35               	goto	u10275
 19010  1C33  0854               	movf	qsort@j^(0+128),w
 19011  1C34  024C               	subwf	qsort@l^(0+128),w
 19012  1C35                     u10275:	
 19013  1C35  1803               	skipnc
 19014  1C36  2C5D               	goto	l7757
 19015  1C37  3001               	movlw	1
 19016  1C38  0141               	movlb	1	; select bank1
 19017  1C39  07D0               	addwf	qsort@s^(0+128),f
 19018  1C3A  3000               	movlw	0
 19019  1C3B  3DD1               	addwfc	(qsort@s+1)^(0+128),f
 19020  1C3C  0850               	movf	qsort@s^(0+128),w
 19021  1C3D  00C4               	movwf	??_qsort^(0+128)
 19022  1C3E  3001               	movlw	1
 19023  1C3F                     u10285:	
 19024  1C3F  35C4               	lslf	??_qsort^(0+128),f
 19025  1C40  3EFF               	addlw	-1
 19026  1C41  1D03               	skipz
 19027  1C42  2C3F               	goto	u10285
 19028  1C43  3544               	lslf	??_qsort^(0+128),w
 19029  1C44  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19030  1C45  0086               	movwf	6
 19031  1C46  3001               	movlw	1	; select bank3/4
 19032  1C47  0087               	movwf	7
 19033  1C48  084C               	movf	qsort@l^(0+128),w
 19034  1C49  3FC0               	movwi [0]fsr1
 19035  1C4A  084D               	movf	(qsort@l+1)^(0+128),w
 19036  1C4B  3FC1               	movwi [1]fsr1
 19037  1C4C  0850               	movf	qsort@s^(0+128),w
 19038  1C4D  00C4               	movwf	??_qsort^(0+128)
 19039  1C4E  3001               	movlw	1
 19040  1C4F                     u10295:	
 19041  1C4F  35C4               	lslf	??_qsort^(0+128),f
 19042  1C50  3EFF               	addlw	-1
 19043  1C51  1D03               	skipz
 19044  1C52  2C4F               	goto	u10295
 19045  1C53  3544               	lslf	??_qsort^(0+128),w
 19046  1C54  3E02               	addlw	2
 19047  1C55  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19048  1C56  0086               	movwf	6
 19049  1C57  3001               	movlw	1	; select bank3/4
 19050  1C58  0087               	movwf	7
 19051  1C59  0854               	movf	qsort@j^(0+128),w
 19052  1C5A  3FC0               	movwi [0]fsr1
 19053  1C5B  0855               	movf	(qsort@j+1)^(0+128),w
 19054  1C5C  3FC1               	movwi [1]fsr1
 19055  1C5D                     l7757:	
 19056  1C5D  0141               	movlb	1	; select bank1
 19057  1C5E  0853               	movf	(qsort@i+1)^(0+128),w
 19058  1C5F  00CD               	movwf	(qsort@l+1)^(0+128)
 19059  1C60  0852               	movf	qsort@i^(0+128),w
 19060  1C61  00CC               	movwf	qsort@l^(0+128)
 19061  1C62                     l7759:	
 19062  1C62  084D               	movf	(qsort@l+1)^(0+128),w
 19063  1C63  3A80               	xorlw	128
 19064  1C64  00C4               	movwf	??_qsort^(0+128)
 19065  1C65  084F               	movf	(qsort@r+1)^(0+128),w
 19066  1C66  3A80               	xorlw	128
 19067  1C67  0244               	subwf	??_qsort^(0+128),w
 19068  1C68  1D03               	skipz
 19069  1C69  2C6C               	goto	u10305
 19070  1C6A  084E               	movf	qsort@r^(0+128),w
 19071  1C6B  024C               	subwf	qsort@l^(0+128),w
 19072  1C6C                     u10305:	
 19073  1C6C  1C03               	skipc
 19074  1C6D  2B12               	goto	l7721
 19075  1C6E  0141               	movlb	1	; select bank1
 19076  1C6F  1BD1               	btfsc	(qsort@s+1)^(0+128),7
 19077  1C70  0008               	return
 19078  1C71  2AEC               	goto	l7715
 19079  1C72                     __end_of_qsort:	
 19080                           
 19081                           	psect	text53
 19082  3637                     __ptext53:	
 19083 ;; *************** function _swap *****************
 19084 ;; Defined at:
 19085 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19086 ;; Parameters:    Size  Location     Type
 19087 ;;  len             2   17[BANK0 ] unsigned int 
 19088 ;;  s1              1   19[BANK0 ] PTR unsigned char 
 19089 ;;		 -> grpB(4), grpA(4), vChannels(32), 
 19090 ;;  s2              1   20[BANK0 ] PTR unsigned char 
 19091 ;;		 -> grpB(4), grpA(4), vChannels(32), 
 19092 ;; Auto vars:     Size  Location     Type
 19093 ;;  c               1   22[BANK0 ] unsigned char 
 19094 ;; Return value:  Size  Location     Type
 19095 ;;                  1    wreg      void 
 19096 ;; Registers used:
 19097 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19098 ;; Tracked objects:
 19099 ;;		On entry : 0/0
 19100 ;;		On exit  : 0/0
 19101 ;;		Unchanged: 0/0
 19102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19103 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19106 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19107 ;;Total ram usage:        6 bytes
 19108 ;; Hardware stack levels used:    1
 19109 ;; Hardware stack levels required when called:    3
 19110 ;; This function calls:
 19111 ;;		Nothing
 19112 ;; This function is called by:
 19113 ;;		_qsort
 19114 ;; This function uses a non-reentrant model
 19115 ;;
 19116                           
 19117                           
 19118                           ;psect for function _swap
 19119  3637                     _swap:	
 19120  3637                     l1436:	
 19121                           ;incstack = 0
 19122                           ; Regs used in _swap: [wreg+fsr1l+fsr1h+status,2+status,0]
 19123                           
 19124  3637  3001               	movlw	1
 19125  3638  0140               	movlb	0	; select bank0
 19126  3639  02B1               	subwf	swap@len,f
 19127  363A  3000               	movlw	0
 19128  363B  3BB2               	subwfb	swap@len+1,f
 19129  363C  0A31               	incf	swap@len,w
 19130  363D  1903               	btfsc	3,2
 19131  363E  0A32               	incf	swap@len+1,w
 19132  363F  1903               	btfsc	3,2
 19133  3640  0008               	return
 19134  3641  0833               	movf	swap@s1,w
 19135  3642  0086               	movwf	6
 19136  3643  3002               	movlw	2	; select bank4/5
 19137  3644  0087               	movwf	7
 19138  3645  0801               	movf	1,w
 19139  3646  00B5               	movwf	??_swap
 19140  3647  0835               	movf	??_swap,w
 19141  3648  00B6               	movwf	swap@c
 19142  3649  0834               	movf	swap@s2,w
 19143  364A  0086               	movwf	6
 19144  364B  3002               	movlw	2	; select bank4/5
 19145  364C  0087               	movwf	7
 19146  364D  0801               	movf	1,w
 19147  364E  00B5               	movwf	??_swap
 19148  364F  0833               	movf	swap@s1,w
 19149  3650  0086               	movwf	6
 19150  3651  3002               	movlw	2	; select bank4/5
 19151  3652  0087               	movwf	7
 19152  3653  0835               	movf	??_swap,w
 19153  3654  0081               	movwf	1
 19154  3655  3001               	movlw	1
 19155  3656  00B5               	movwf	??_swap
 19156  3657  0835               	movf	??_swap,w
 19157  3658  07B3               	addwf	swap@s1,f
 19158  3659  0836               	movf	swap@c,w
 19159  365A  00B5               	movwf	??_swap
 19160  365B  0834               	movf	swap@s2,w
 19161  365C  0086               	movwf	6
 19162  365D  3002               	movlw	2	; select bank4/5
 19163  365E  0087               	movwf	7
 19164  365F  0835               	movf	??_swap,w
 19165  3660  0081               	movwf	1
 19166  3661  3001               	movlw	1
 19167  3662  00B5               	movwf	??_swap
 19168  3663  0835               	movf	??_swap,w
 19169  3664  07B4               	addwf	swap@s2,f
 19170  3665  2E37               	goto	l1436
 19171  3666                     __end_of_swap:	
 19172                           
 19173                           	psect	text54
 19174  378E                     __ptext54:	
 19175 ;; *************** function _sortCur *****************
 19176 ;; Defined at:
 19177 ;;		line 368 in file "system.c"
 19178 ;; Parameters:    Size  Location     Type
 19179 ;;  cmp1            2   22[BANK1 ] PTR const void 
 19180 ;;		 -> qsort@xbuf(60), grpB(4), grpA(4), vChannels(32), 
 19181 ;;  cmp2            2   24[BANK1 ] PTR const void 
 19182 ;;		 -> qsort@xbuf(60), grpB(4), grpA(4), vChannels(32), 
 19183 ;; Auto vars:     Size  Location     Type
 19184 ;;  b               2   28[BANK1 ] PTR struct .
 19185 ;;		 -> qsort@xbuf(60), grpB(4), grpA(4), vChannels(32), 
 19186 ;;  a               2   26[BANK1 ] PTR struct .
 19187 ;;		 -> qsort@xbuf(60), grpB(4), grpA(4), vChannels(32), 
 19188 ;; Return value:  Size  Location     Type
 19189 ;;                  2   22[BANK1 ] int 
 19190 ;; Registers used:
 19191 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19192 ;; Tracked objects:
 19193 ;;		On entry : 0/0
 19194 ;;		On exit  : 0/0
 19195 ;;		Unchanged: 0/0
 19196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19197 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19198 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19200 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19201 ;;Total ram usage:        8 bytes
 19202 ;; Hardware stack levels used:    1
 19203 ;; Hardware stack levels required when called:    5
 19204 ;; This function calls:
 19205 ;;		___flsub
 19206 ;;		___fltol
 19207 ;; This function is called by:
 19208 ;;		_channelThing
 19209 ;;		_qsort
 19210 ;; This function uses a non-reentrant model
 19211 ;;
 19212                           
 19213                           
 19214                           ;psect for function _sortCur
 19215  378E                     _sortCur:	
 19216                           
 19217                           ;system.c: 368: int sortCur(const void *cmp1, const void *cmp2);system.c: 369: {;system.
      +                          c: 370:  t_virtChannel *a = (t_virtChannel *)cmp1;
 19218                           
 19219                           ;incstack = 0
 19220                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19221  378E  0141               	movlb	1	; select bank1
 19222  378F  0837               	movf	(sortCur@cmp1+1)^(0+128),w
 19223  3790  00BB               	movwf	(sortCur@a+1)^(0+128)
 19224  3791  0836               	movf	sortCur@cmp1^(0+128),w
 19225  3792  00BA               	movwf	sortCur@a^(0+128)
 19226                           
 19227                           ;system.c: 371:  t_virtChannel *b = (t_virtChannel *)cmp2;
 19228  3793  0839               	movf	(sortCur@cmp2+1)^(0+128),w
 19229  3794  00BD               	movwf	(sortCur@b+1)^(0+128)
 19230  3795  0838               	movf	sortCur@cmp2^(0+128),w
 19231  3796  00BC               	movwf	sortCur@b^(0+128)
 19232                           
 19233                           ;system.c: 373:  return (b->current - a->current);
 19234  3797  083C               	movf	sortCur@b^(0+128),w
 19235  3798  0086               	movwf	6
 19236  3799  083D               	movf	(sortCur@b+1)^(0+128),w
 19237  379A  0087               	movwf	7
 19238  379B  3142               	addfsr 1,2
 19239  379C  3F40               	moviw [0]fsr1
 19240  379D  00A4               	movwf	___flsub@b^(0+128)
 19241  379E  3F41               	moviw [1]fsr1
 19242  379F  00A5               	movwf	(___flsub@b+1)^(0+128)
 19243  37A0  3F42               	moviw [2]fsr1
 19244  37A1  00A6               	movwf	(___flsub@b+2)^(0+128)
 19245  37A2  3F43               	moviw [3]fsr1
 19246  37A3  00A7               	movwf	(___flsub@b+3)^(0+128)
 19247  37A4  083A               	movf	sortCur@a^(0+128),w
 19248  37A5  0086               	movwf	6
 19249  37A6  083B               	movf	(sortCur@a+1)^(0+128),w
 19250  37A7  0087               	movwf	7
 19251  37A8  3142               	addfsr 1,2
 19252  37A9  3F40               	moviw [0]fsr1
 19253  37AA  00A0               	movwf	___flsub@a^(0+128)
 19254  37AB  3F41               	moviw [1]fsr1
 19255  37AC  00A1               	movwf	(___flsub@a+1)^(0+128)
 19256  37AD  3F42               	moviw [2]fsr1
 19257  37AE  00A2               	movwf	(___flsub@a+2)^(0+128)
 19258  37AF  3F43               	moviw [3]fsr1
 19259  37B0  00A3               	movwf	(___flsub@a+3)^(0+128)
 19260  37B1  31B7  2759  31B7   	fcall	___flsub
 19261  37B4  0141               	movlb	1	; select bank1
 19262  37B5  0823               	movf	(?___flsub+3)^(0+128),w
 19263  37B6  00B0               	movwf	(___fltol@f1+3)^(0+128)
 19264  37B7  0822               	movf	(?___flsub+2)^(0+128),w
 19265  37B8  00AF               	movwf	(___fltol@f1+2)^(0+128)
 19266  37B9  0821               	movf	(?___flsub+1)^(0+128),w
 19267  37BA  00AE               	movwf	(___fltol@f1+1)^(0+128)
 19268  37BB  0820               	movf	?___flsub^(0+128),w
 19269  37BC  00AD               	movwf	___fltol@f1^(0+128)
 19270  37BD  31AD  2565         	fcall	___fltol
 19271  37BF  0141               	movlb	1	; select bank1
 19272  37C0  082E               	movf	(?___fltol+1)^(0+128),w
 19273  37C1  00B7               	movwf	(?_sortCur+1)^(0+128)
 19274  37C2  082D               	movf	?___fltol^(0+128),w
 19275  37C3  00B6               	movwf	?_sortCur^(0+128)
 19276  37C4  0008               	return
 19277  37C5                     __end_of_sortCur:	
 19278                           
 19279                           	psect	text55
 19280  3696                     __ptext55:	
 19281 ;; *************** function _sortDC *****************
 19282 ;; Defined at:
 19283 ;;		line 346 in file "system.c"
 19284 ;; Parameters:    Size  Location     Type
 19285 ;;  cmp1            2   22[BANK1 ] PTR const void 
 19286 ;;		 -> qsort@xbuf(60), grpB(4), grpA(4), vChannels(32), 
 19287 ;;  cmp2            2   24[BANK1 ] PTR const void 
 19288 ;;		 -> qsort@xbuf(60), grpB(4), grpA(4), vChannels(32), 
 19289 ;; Auto vars:     Size  Location     Type
 19290 ;;  b               1   29[BANK1 ] unsigned char 
 19291 ;;  a               1   28[BANK1 ] unsigned char 
 19292 ;; Return value:  Size  Location     Type
 19293 ;;                  2   22[BANK1 ] int 
 19294 ;; Registers used:
 19295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19296 ;; Tracked objects:
 19297 ;;		On entry : 0/0
 19298 ;;		On exit  : 0/0
 19299 ;;		Unchanged: 0/0
 19300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19301 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19302 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19303 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19304 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19305 ;;Total ram usage:        8 bytes
 19306 ;; Hardware stack levels used:    1
 19307 ;; Hardware stack levels required when called:    3
 19308 ;; This function calls:
 19309 ;;		Nothing
 19310 ;; This function is called by:
 19311 ;;		_channelThing
 19312 ;;		_qsort
 19313 ;; This function uses a non-reentrant model
 19314 ;;
 19315                           
 19316                           
 19317                           ;psect for function _sortDC
 19318  3696                     _sortDC:	
 19319                           
 19320                           ;system.c: 346: int sortDC(const void *cmp1, const void *cmp2);system.c: 347: {;system.c
      +                          : 348:  uint8_t a = *(uint8_t *)cmp1;
 19321                           
 19322                           ;incstack = 0
 19323                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0]
 19324  3696  0141               	movlb	1	; select bank1
 19325  3697  0836               	movf	sortDC@cmp1^(0+128),w
 19326  3698  0086               	movwf	6
 19327  3699  0837               	movf	(sortDC@cmp1+1)^(0+128),w
 19328  369A  0087               	movwf	7
 19329  369B  0801               	movf	1,w
 19330  369C  00BA               	movwf	??_sortDC^(0+128)
 19331  369D  083A               	movf	??_sortDC^(0+128),w
 19332  369E  00BC               	movwf	sortDC@a^(0+128)
 19333                           
 19334                           ;system.c: 349:  uint8_t b = *(uint8_t *)cmp2;
 19335  369F  0838               	movf	sortDC@cmp2^(0+128),w
 19336  36A0  0086               	movwf	6
 19337  36A1  0839               	movf	(sortDC@cmp2+1)^(0+128),w
 19338  36A2  0087               	movwf	7
 19339  36A3  0801               	movf	1,w
 19340  36A4  00BA               	movwf	??_sortDC^(0+128)
 19341  36A5  083A               	movf	??_sortDC^(0+128),w
 19342  36A6  00BD               	movwf	sortDC@b^(0+128)
 19343                           
 19344                           ;system.c: 351:  return (vChannels[b].DC - vChannels[a].DC);
 19345  36A7  083D               	movf	sortDC@b^(0+128),w
 19346  36A8  00BA               	movwf	??_sortDC^(0+128)
 19347  36A9  3002               	movlw	2
 19348  36AA                     u9645:	
 19349  36AA  35BA               	lslf	??_sortDC^(0+128),f
 19350  36AB  3EFF               	addlw	-1
 19351  36AC  1D03               	skipz
 19352  36AD  2EAA               	goto	u9645
 19353  36AE  353A               	lslf	??_sortDC^(0+128),w
 19354  36AF  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 19355  36B0  0086               	movwf	6
 19356  36B1  3002               	movlw	2	; select bank4/5
 19357  36B2  0087               	movwf	7
 19358  36B3  083C               	movf	sortDC@a^(0+128),w
 19359  36B4  00BB               	movwf	(??_sortDC+1)^(0+128)
 19360  36B5  3002               	movlw	2
 19361  36B6                     u9655:	
 19362  36B6  35BB               	lslf	(??_sortDC+1)^(0+128),f
 19363  36B7  3EFF               	addlw	-1
 19364  36B8  1D03               	skipz
 19365  36B9  2EB6               	goto	u9655
 19366  36BA  353B               	lslf	(??_sortDC+1)^(0+128),w
 19367  36BB  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 19368  36BC  0084               	movwf	4
 19369  36BD  3002               	movlw	2	; select bank4/5
 19370  36BE  0085               	movwf	5
 19371  36BF  0800               	movf	0,w
 19372  36C0  0201               	subwf	1,w
 19373  36C1  00B6               	movwf	?_sortDC^(0+128)
 19374  36C2  01B7               	clrf	(?_sortDC^(0+128)+1)
 19375  36C3  1C03               	skipc
 19376  36C4  03B7               	decf	(?_sortDC+1)^(0+128),f
 19377  36C5  0008               	return
 19378  36C6                     __end_of_sortDC:	
 19379                           
 19380                           	psect	text56
 19381  3666                     __ptext56:	
 19382 ;; *************** function _sortDCRev *****************
 19383 ;; Defined at:
 19384 ;;		line 357 in file "system.c"
 19385 ;; Parameters:    Size  Location     Type
 19386 ;;  cmp1            2   22[BANK1 ] PTR const void 
 19387 ;;		 -> qsort@xbuf(60), grpB(4), grpA(4), vChannels(32), 
 19388 ;;  cmp2            2   24[BANK1 ] PTR const void 
 19389 ;;		 -> qsort@xbuf(60), grpB(4), grpA(4), vChannels(32), 
 19390 ;; Auto vars:     Size  Location     Type
 19391 ;;  b               1   29[BANK1 ] unsigned char 
 19392 ;;  a               1   28[BANK1 ] unsigned char 
 19393 ;; Return value:  Size  Location     Type
 19394 ;;                  2   22[BANK1 ] int 
 19395 ;; Registers used:
 19396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19397 ;; Tracked objects:
 19398 ;;		On entry : 0/0
 19399 ;;		On exit  : 0/0
 19400 ;;		Unchanged: 0/0
 19401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19402 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19403 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19404 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19405 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19406 ;;Total ram usage:        8 bytes
 19407 ;; Hardware stack levels used:    1
 19408 ;; Hardware stack levels required when called:    3
 19409 ;; This function calls:
 19410 ;;		Nothing
 19411 ;; This function is called by:
 19412 ;;		_channelThing
 19413 ;;		_qsort
 19414 ;; This function uses a non-reentrant model
 19415 ;;
 19416                           
 19417                           
 19418                           ;psect for function _sortDCRev
 19419  3666                     _sortDCRev:	
 19420                           
 19421                           ;system.c: 357: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 358: {;syste
      +                          m.c: 359:  uint8_t a = *(uint8_t *)cmp1;
 19422                           
 19423                           ;incstack = 0
 19424                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0]
 19425  3666  0141               	movlb	1	; select bank1
 19426  3667  0836               	movf	sortDCRev@cmp1^(0+128),w
 19427  3668  0086               	movwf	6
 19428  3669  0837               	movf	(sortDCRev@cmp1+1)^(0+128),w
 19429  366A  0087               	movwf	7
 19430  366B  0801               	movf	1,w
 19431  366C  00BA               	movwf	??_sortDCRev^(0+128)
 19432  366D  083A               	movf	??_sortDCRev^(0+128),w
 19433  366E  00BC               	movwf	sortDCRev@a^(0+128)
 19434                           
 19435                           ;system.c: 360:  uint8_t b = *(uint8_t *)cmp2;
 19436  366F  0838               	movf	sortDCRev@cmp2^(0+128),w
 19437  3670  0086               	movwf	6
 19438  3671  0839               	movf	(sortDCRev@cmp2+1)^(0+128),w
 19439  3672  0087               	movwf	7
 19440  3673  0801               	movf	1,w
 19441  3674  00BA               	movwf	??_sortDCRev^(0+128)
 19442  3675  083A               	movf	??_sortDCRev^(0+128),w
 19443  3676  00BD               	movwf	sortDCRev@b^(0+128)
 19444                           
 19445                           ;system.c: 362:  return (vChannels[a].DC - vChannels[b].DC);
 19446  3677  083C               	movf	sortDCRev@a^(0+128),w
 19447  3678  00BA               	movwf	??_sortDCRev^(0+128)
 19448  3679  3002               	movlw	2
 19449  367A                     u9665:	
 19450  367A  35BA               	lslf	??_sortDCRev^(0+128),f
 19451  367B  3EFF               	addlw	-1
 19452  367C  1D03               	skipz
 19453  367D  2E7A               	goto	u9665
 19454  367E  353A               	lslf	??_sortDCRev^(0+128),w
 19455  367F  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 19456  3680  0086               	movwf	6
 19457  3681  3002               	movlw	2	; select bank4/5
 19458  3682  0087               	movwf	7
 19459  3683  083D               	movf	sortDCRev@b^(0+128),w
 19460  3684  00BB               	movwf	(??_sortDCRev+1)^(0+128)
 19461  3685  3002               	movlw	2
 19462  3686                     u9675:	
 19463  3686  35BB               	lslf	(??_sortDCRev+1)^(0+128),f
 19464  3687  3EFF               	addlw	-1
 19465  3688  1D03               	skipz
 19466  3689  2E86               	goto	u9675
 19467  368A  353B               	lslf	(??_sortDCRev+1)^(0+128),w
 19468  368B  3E34               	addlw	(low ((_vChannels| (0+512)+6)))& (0+255)
 19469  368C  0084               	movwf	4
 19470  368D  3002               	movlw	2	; select bank4/5
 19471  368E  0085               	movwf	5
 19472  368F  0800               	movf	0,w
 19473  3690  0201               	subwf	1,w
 19474  3691  00B6               	movwf	?_sortDCRev^(0+128)
 19475  3692  01B7               	clrf	(?_sortDCRev^(0+128)+1)
 19476  3693  1C03               	skipc
 19477  3694  03B7               	decf	(?_sortDCRev+1)^(0+128),f
 19478  3695  0008               	return
 19479  3696                     __end_of_sortDCRev:	
 19480                           
 19481                           	psect	text57
 19482  2D65                     __ptext57:	
 19483 ;; *************** function ___fltol *****************
 19484 ;; Defined at:
 19485 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 19486 ;; Parameters:    Size  Location     Type
 19487 ;;  f1              4   13[BANK1 ] int 
 19488 ;; Auto vars:     Size  Location     Type
 19489 ;;  exp1            1   71[BANK0 ] unsigned char 
 19490 ;;  sign1           1   70[BANK0 ] unsigned char 
 19491 ;; Return value:  Size  Location     Type
 19492 ;;                  4   13[BANK1 ] long 
 19493 ;; Registers used:
 19494 ;;		wreg, status,2, status,0
 19495 ;; Tracked objects:
 19496 ;;		On entry : 0/0
 19497 ;;		On exit  : 0/0
 19498 ;;		Unchanged: 0/0
 19499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19500 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19501 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19502 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19503 ;;      Totals:         0       2       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19504 ;;Total ram usage:       11 bytes
 19505 ;; Hardware stack levels used:    1
 19506 ;; Hardware stack levels required when called:    3
 19507 ;; This function calls:
 19508 ;;		Nothing
 19509 ;; This function is called by:
 19510 ;;		_channelView
 19511 ;;		_checkChannelStatus
 19512 ;;		_sortCur
 19513 ;;		_ftoa
 19514 ;; This function uses a non-reentrant model
 19515 ;;
 19516                           
 19517                           
 19518                           ;psect for function ___fltol
 19519  2D65                     ___fltol:	
 19520                           
 19521                           ;incstack = 0
 19522                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 19523  2D65  1003               	clrc
 19524  2D66  0141               	movlb	1	; select bank1
 19525  2D67  0D2F               	rlf	(___fltol@f1+2)^(0+128),w
 19526  2D68  0D30               	rlf	(___fltol@f1+3)^(0+128),w
 19527  2D69  00B1               	movwf	??___fltol^(0+128)
 19528  2D6A  0831               	movf	??___fltol^(0+128),w
 19529  2D6B  0140               	movlb	0	; select bank0
 19530  2D6C  00E7               	movwf	___fltol@exp1
 19531  2D6D  0867               	movf	___fltol@exp1,w
 19532  2D6E  1D03               	btfss	3,2
 19533  2D6F  2D7A               	goto	l6745
 19534  2D70                     l6741:	
 19535  2D70  3000               	movlw	0
 19536  2D71  0141               	movlb	1	; select bank1
 19537  2D72  00B0               	movwf	(?___fltol+3)^(0+128)
 19538  2D73  3000               	movlw	0
 19539  2D74  00AF               	movwf	(?___fltol+2)^(0+128)
 19540  2D75  3000               	movlw	0
 19541  2D76  00AE               	movwf	(?___fltol+1)^(0+128)
 19542  2D77  3000               	movlw	0
 19543  2D78  00AD               	movwf	?___fltol^(0+128)
 19544  2D79  0008               	return
 19545  2D7A                     l6745:	
 19546  2D7A  0141               	movlb	1	; select bank1
 19547  2D7B  082D               	movf	___fltol@f1^(0+128),w
 19548  2D7C  00B1               	movwf	??___fltol^(0+128)
 19549  2D7D  082E               	movf	(___fltol@f1+1)^(0+128),w
 19550  2D7E  00B2               	movwf	(??___fltol^(0+128)+1)
 19551  2D7F  082F               	movf	(___fltol@f1+2)^(0+128),w
 19552  2D80  00B3               	movwf	(??___fltol^(0+128)+2)
 19553  2D81  0830               	movf	(___fltol@f1+3)^(0+128),w
 19554  2D82  00B4               	movwf	(??___fltol^(0+128)+3)
 19555  2D83  301F               	movlw	31
 19556  2D84                     u8645:	
 19557  2D84  36B4               	lsrf	(??___fltol^(0+128)+3),f
 19558  2D85  0CB3               	rrf	(??___fltol^(0+128)+2),f
 19559  2D86  0CB2               	rrf	(??___fltol^(0+128)+1),f
 19560  2D87  0CB1               	rrf	??___fltol^(0+128),f
 19561  2D88  0B89               	decfsz	9,f
 19562  2D89  2D84               	goto	u8645
 19563  2D8A  0831               	movf	??___fltol^(0+128),w
 19564  2D8B  00B5               	movwf	(??___fltol+4)^(0+128)
 19565  2D8C  0835               	movf	(??___fltol+4)^(0+128),w
 19566  2D8D  0140               	movlb	0	; select bank0
 19567  2D8E  00E6               	movwf	___fltol@sign1
 19568  2D8F  0141               	movlb	1	; select bank1
 19569  2D90  17AF               	bsf	(___fltol@f1^(0+128)+2),7
 19570  2D91  30FF               	movlw	255
 19571  2D92  05AD               	andwf	___fltol@f1^(0+128),f
 19572  2D93  30FF               	movlw	255
 19573  2D94  05AE               	andwf	(___fltol@f1+1)^(0+128),f
 19574  2D95  30FF               	movlw	255
 19575  2D96  05AF               	andwf	(___fltol@f1+2)^(0+128),f
 19576  2D97  3000               	movlw	0
 19577  2D98  05B0               	andwf	(___fltol@f1+3)^(0+128),f
 19578  2D99  3096               	movlw	150
 19579  2D9A  0140               	movlb	0	; select bank0
 19580  2D9B  02E7               	subwf	___fltol@exp1,f
 19581  2D9C  1FE7               	btfss	___fltol@exp1,7
 19582  2D9D  2DB3               	goto	l6763
 19583  2D9E  0867               	movf	___fltol@exp1,w
 19584  2D9F  3A80               	xorlw	128
 19585  2DA0  3E97               	addlw	151
 19586  2DA1  1C03               	btfss	3,0
 19587  2DA2  2D70               	goto	l6741
 19588  2DA3                     l6761:	
 19589  2DA3  3001               	movlw	1
 19590  2DA4                     u8675:	
 19591  2DA4  0141               	movlb	1	; select bank1
 19592  2DA5  36B0               	lsrf	(___fltol@f1+3)^(0+128),f
 19593  2DA6  0CAF               	rrf	(___fltol@f1+2)^(0+128),f
 19594  2DA7  0CAE               	rrf	(___fltol@f1+1)^(0+128),f
 19595  2DA8  0CAD               	rrf	___fltol@f1^(0+128),f
 19596  2DA9  0B89               	decfsz	9,f
 19597  2DAA  2DA4               	goto	u8675
 19598  2DAB  3001               	movlw	1
 19599  2DAC  00B1               	movwf	??___fltol^(0+128)
 19600  2DAD  0831               	movf	??___fltol^(0+128),w
 19601  2DAE  0140               	movlb	0	; select bank0
 19602  2DAF  07E7               	addwf	___fltol@exp1,f
 19603  2DB0  1903               	btfsc	3,2
 19604  2DB1  2DC6               	goto	l6771
 19605  2DB2  2DA3               	goto	l6761
 19606  2DB3                     l6763:	
 19607  2DB3  3020               	movlw	32
 19608  2DB4  0267               	subwf	___fltol@exp1,w
 19609  2DB5  1803               	btfsc	3,0
 19610  2DB6  2D70               	goto	l6741
 19611  2DB7                     l1182:	
 19612  2DB7  0867               	movf	___fltol@exp1,w
 19613  2DB8  1903               	btfsc	3,2
 19614  2DB9  2DC6               	goto	l6771
 19615  2DBA  3001               	movlw	1
 19616  2DBB                     u8705:	
 19617  2DBB  0141               	movlb	1	; select bank1
 19618  2DBC  35AD               	lslf	___fltol@f1^(0+128),f
 19619  2DBD  0DAE               	rlf	(___fltol@f1+1)^(0+128),f
 19620  2DBE  0DAF               	rlf	(___fltol@f1+2)^(0+128),f
 19621  2DBF  0DB0               	rlf	(___fltol@f1+3)^(0+128),f
 19622  2DC0  0B89               	decfsz	9,f
 19623  2DC1  2DBB               	goto	u8705
 19624  2DC2  3001               	movlw	1
 19625  2DC3  0140               	movlb	0	; select bank0
 19626  2DC4  02E7               	subwf	___fltol@exp1,f
 19627  2DC5  2DB7               	goto	l1182
 19628  2DC6                     l6771:	
 19629  2DC6  0866               	movf	___fltol@sign1,w
 19630  2DC7  1903               	btfsc	3,2
 19631  2DC8  0008               	return
 19632  2DC9  0141               	movlb	1	; select bank1
 19633  2DCA  09AD               	comf	___fltol@f1^(0+128),f
 19634  2DCB  09AE               	comf	(___fltol@f1+1)^(0+128),f
 19635  2DCC  09AF               	comf	(___fltol@f1+2)^(0+128),f
 19636  2DCD  09B0               	comf	(___fltol@f1+3)^(0+128),f
 19637  2DCE  0AAD               	incf	___fltol@f1^(0+128),f
 19638  2DCF  1903               	skipnz
 19639  2DD0  0AAE               	incf	(___fltol@f1+1)^(0+128),f
 19640  2DD1  1903               	skipnz
 19641  2DD2  0AAF               	incf	(___fltol@f1+2)^(0+128),f
 19642  2DD3  1903               	skipnz
 19643  2DD4  0AB0               	incf	(___fltol@f1+3)^(0+128),f
 19644  2DD5  0008               	return
 19645  2DD6                     __end_of___fltol:	
 19646                           
 19647                           	psect	text58
 19648  360B                     __ptext58:	
 19649 ;; *************** function _memcpy *****************
 19650 ;; Defined at:
 19651 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 19652 ;; Parameters:    Size  Location     Type
 19653 ;;  d1              1    wreg     PTR void 
 19654 ;;		 -> qsort@xbuf(60), 
 19655 ;;  s1              1   17[BANK0 ] PTR const void 
 19656 ;;		 -> grpB(4), grpA(4), vChannels(32), 
 19657 ;;  n               2   18[BANK0 ] unsigned int 
 19658 ;; Auto vars:     Size  Location     Type
 19659 ;;  d1              1   22[BANK0 ] PTR void 
 19660 ;;		 -> qsort@xbuf(60), 
 19661 ;;  s               1   24[BANK0 ] PTR const unsigned char 
 19662 ;;		 -> grpB(4), grpA(4), vChannels(32), 
 19663 ;;  d               1   23[BANK0 ] PTR unsigned char 
 19664 ;;		 -> qsort@xbuf(60), 
 19665 ;;  tmp             1   21[BANK0 ] unsigned char 
 19666 ;; Return value:  Size  Location     Type
 19667 ;;                  1    wreg      PTR void 
 19668 ;; Registers used:
 19669 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19670 ;; Tracked objects:
 19671 ;;		On entry : 0/0
 19672 ;;		On exit  : 0/0
 19673 ;;		Unchanged: 0/0
 19674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19675 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19676 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19678 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19679 ;;Total ram usage:        8 bytes
 19680 ;; Hardware stack levels used:    1
 19681 ;; Hardware stack levels required when called:    3
 19682 ;; This function calls:
 19683 ;;		Nothing
 19684 ;; This function is called by:
 19685 ;;		_qsort
 19686 ;; This function uses a non-reentrant model
 19687 ;;
 19688                           
 19689                           
 19690                           ;psect for function _memcpy
 19691  360B                     _memcpy:	
 19692                           
 19693                           ;incstack = 0
 19694                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 19695                           ;memcpy@d1 stored from wreg
 19696  360B  0140               	movlb	0	; select bank0
 19697  360C  00B6               	movwf	memcpy@d1
 19698  360D  0831               	movf	memcpy@s1,w
 19699  360E  00B4               	movwf	??_memcpy
 19700  360F  0834               	movf	??_memcpy,w
 19701  3610  00B8               	movwf	memcpy@s
 19702  3611  0836               	movf	memcpy@d1,w
 19703  3612  00B4               	movwf	??_memcpy
 19704  3613  0834               	movf	??_memcpy,w
 19705  3614  00B7               	movwf	memcpy@d
 19706  3615                     l1480:	
 19707  3615  3001               	movlw	1
 19708  3616  02B2               	subwf	memcpy@n,f
 19709  3617  3000               	movlw	0
 19710  3618  3BB3               	subwfb	memcpy@n+1,f
 19711  3619  0A32               	incf	memcpy@n,w
 19712  361A  1903               	btfsc	3,2
 19713  361B  0A33               	incf	memcpy@n+1,w
 19714  361C  1903               	btfsc	3,2
 19715  361D  0008               	return
 19716  361E  0838               	movf	memcpy@s,w
 19717  361F  0086               	movwf	6
 19718  3620  3002               	movlw	2	; select bank4/5
 19719  3621  0087               	movwf	7
 19720  3622  0801               	movf	1,w
 19721  3623  00B4               	movwf	??_memcpy
 19722  3624  0834               	movf	??_memcpy,w
 19723  3625  00B5               	movwf	memcpy@tmp
 19724  3626  3001               	movlw	1
 19725  3627  00B4               	movwf	??_memcpy
 19726  3628  0834               	movf	??_memcpy,w
 19727  3629  07B8               	addwf	memcpy@s,f
 19728  362A  0835               	movf	memcpy@tmp,w
 19729  362B  00B4               	movwf	??_memcpy
 19730  362C  0837               	movf	memcpy@d,w
 19731  362D  0086               	movwf	6
 19732  362E  3001               	movlw	1	; select bank2/3
 19733  362F  0087               	movwf	7
 19734  3630  0834               	movf	??_memcpy,w
 19735  3631  0081               	movwf	1
 19736  3632  3001               	movlw	1
 19737  3633  00B4               	movwf	??_memcpy
 19738  3634  0834               	movf	??_memcpy,w
 19739  3635  07B7               	addwf	memcpy@d,f
 19740  3636  2E15               	goto	l1480
 19741  3637                     __end_of_memcpy:	
 19742                           
 19743                           	psect	text59
 19744  3545                     __ptext59:	
 19745 ;; *************** function ___bmul *****************
 19746 ;; Defined at:
 19747 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 19748 ;; Parameters:    Size  Location     Type
 19749 ;;  multiplier      1    wreg     unsigned char 
 19750 ;;  multiplicand    1   13[BANK0 ] unsigned char 
 19751 ;; Auto vars:     Size  Location     Type
 19752 ;;  multiplier      1   16[BANK0 ] unsigned char 
 19753 ;;  product         1   15[BANK0 ] unsigned char 
 19754 ;; Return value:  Size  Location     Type
 19755 ;;                  1    wreg      unsigned char 
 19756 ;; Registers used:
 19757 ;;		wreg, status,2, status,0
 19758 ;; Tracked objects:
 19759 ;;		On entry : 0/0
 19760 ;;		On exit  : 0/0
 19761 ;;		Unchanged: 0/0
 19762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19763 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19766 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19767 ;;Total ram usage:        4 bytes
 19768 ;; Hardware stack levels used:    1
 19769 ;; Hardware stack levels required when called:    3
 19770 ;; This function calls:
 19771 ;;		Nothing
 19772 ;; This function is called by:
 19773 ;;		_channelView
 19774 ;;		_qsort
 19775 ;; This function uses a non-reentrant model
 19776 ;;
 19777                           
 19778                           
 19779                           ;psect for function ___bmul
 19780  3545                     ___bmul:	
 19781                           
 19782                           ;incstack = 0
 19783                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 19784                           ;___bmul@multiplier stored from wreg
 19785  3545  0140               	movlb	0	; select bank0
 19786  3546  00B0               	movwf	___bmul@multiplier
 19787  3547  01AF               	clrf	___bmul@product
 19788  3548                     l7267:	
 19789  3548  1C30               	btfss	___bmul@multiplier,0
 19790  3549  2D4E               	goto	l7271
 19791  354A  082D               	movf	___bmul@multiplicand,w
 19792  354B  00AE               	movwf	??___bmul
 19793  354C  082E               	movf	??___bmul,w
 19794  354D  07AF               	addwf	___bmul@product,f
 19795  354E                     l7271:	
 19796  354E  1003               	clrc
 19797  354F  0DAD               	rlf	___bmul@multiplicand,f
 19798  3550  1003               	clrc
 19799  3551  0CB0               	rrf	___bmul@multiplier,f
 19800  3552  0830               	movf	___bmul@multiplier,w
 19801  3553  1D03               	btfss	3,2
 19802  3554  2D48               	goto	l7267
 19803  3555  082F               	movf	___bmul@product,w
 19804  3556  0008               	return
 19805  3557                     __end_of___bmul:	
 19806                           
 19807                           	psect	text60
 19808  2A8B                     __ptext60:	
 19809 ;; *************** function ___awdiv *****************
 19810 ;; Defined at:
 19811 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 19812 ;; Parameters:    Size  Location     Type
 19813 ;;  divisor         2    4[BANK0 ] int 
 19814 ;;  dividend        2    6[BANK0 ] int 
 19815 ;; Auto vars:     Size  Location     Type
 19816 ;;  quotient        2   11[BANK0 ] int 
 19817 ;;  sign            1   10[BANK0 ] unsigned char 
 19818 ;;  counter         1    9[BANK0 ] unsigned char 
 19819 ;; Return value:  Size  Location     Type
 19820 ;;                  2    4[BANK0 ] int 
 19821 ;; Registers used:
 19822 ;;		wreg, status,2, status,0
 19823 ;; Tracked objects:
 19824 ;;		On entry : 0/0
 19825 ;;		On exit  : 0/0
 19826 ;;		Unchanged: 0/0
 19827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19828 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19829 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19831 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19832 ;;Total ram usage:        9 bytes
 19833 ;; Hardware stack levels used:    1
 19834 ;; Hardware stack levels required when called:    3
 19835 ;; This function calls:
 19836 ;;		Nothing
 19837 ;; This function is called by:
 19838 ;;		_itoa
 19839 ;;		_qsort
 19840 ;; This function uses a non-reentrant model
 19841 ;;
 19842                           
 19843                           
 19844                           ;psect for function ___awdiv
 19845  2A8B                     ___awdiv:	
 19846                           
 19847                           ;incstack = 0
 19848                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19849  2A8B  0140               	movlb	0	; select bank0
 19850  2A8C  01AA               	clrf	___awdiv@sign
 19851  2A8D  1FA5               	btfss	___awdiv@divisor+1,7
 19852  2A8E  2A96               	goto	l6645
 19853  2A8F  09A4               	comf	___awdiv@divisor,f
 19854  2A90  09A5               	comf	___awdiv@divisor+1,f
 19855  2A91  0AA4               	incf	___awdiv@divisor,f
 19856  2A92  1903               	skipnz
 19857  2A93  0AA5               	incf	___awdiv@divisor+1,f
 19858  2A94  01AA               	clrf	___awdiv@sign
 19859  2A95  0AAA               	incf	___awdiv@sign,f
 19860  2A96                     l6645:	
 19861  2A96  1FA7               	btfss	___awdiv@dividend+1,7
 19862  2A97  2AA1               	goto	l6651
 19863  2A98  09A6               	comf	___awdiv@dividend,f
 19864  2A99  09A7               	comf	___awdiv@dividend+1,f
 19865  2A9A  0AA6               	incf	___awdiv@dividend,f
 19866  2A9B  1903               	skipnz
 19867  2A9C  0AA7               	incf	___awdiv@dividend+1,f
 19868  2A9D  3001               	movlw	1
 19869  2A9E  00A8               	movwf	??___awdiv
 19870  2A9F  0828               	movf	??___awdiv,w
 19871  2AA0  06AA               	xorwf	___awdiv@sign,f
 19872  2AA1                     l6651:	
 19873  2AA1  01AB               	clrf	___awdiv@quotient
 19874  2AA2  01AC               	clrf	___awdiv@quotient+1
 19875  2AA3  0824               	movf	___awdiv@divisor,w
 19876  2AA4  0425               	iorwf	___awdiv@divisor+1,w
 19877  2AA5  1903               	btfsc	3,2
 19878  2AA6  2AD0               	goto	l6673
 19879  2AA7  01A9               	clrf	___awdiv@counter
 19880  2AA8  0AA9               	incf	___awdiv@counter,f
 19881  2AA9                     l6661:	
 19882  2AA9  1BA5               	btfsc	___awdiv@divisor+1,7
 19883  2AAA  2AB5               	goto	l6663
 19884  2AAB  3001               	movlw	1
 19885  2AAC                     u8425:	
 19886  2AAC  35A4               	lslf	___awdiv@divisor,f
 19887  2AAD  0DA5               	rlf	___awdiv@divisor+1,f
 19888  2AAE  0B89               	decfsz	9,f
 19889  2AAF  2AAC               	goto	u8425
 19890  2AB0  3001               	movlw	1
 19891  2AB1  00A8               	movwf	??___awdiv
 19892  2AB2  0828               	movf	??___awdiv,w
 19893  2AB3  07A9               	addwf	___awdiv@counter,f
 19894  2AB4  2AA9               	goto	l6661
 19895  2AB5                     l6663:	
 19896  2AB5  3001               	movlw	1
 19897  2AB6                     u8445:	
 19898  2AB6  35AB               	lslf	___awdiv@quotient,f
 19899  2AB7  0DAC               	rlf	___awdiv@quotient+1,f
 19900  2AB8  0B89               	decfsz	9,f
 19901  2AB9  2AB6               	goto	u8445
 19902  2ABA  0825               	movf	___awdiv@divisor+1,w
 19903  2ABB  0227               	subwf	___awdiv@dividend+1,w
 19904  2ABC  1D03               	skipz
 19905  2ABD  2AC0               	goto	u8455
 19906  2ABE  0824               	movf	___awdiv@divisor,w
 19907  2ABF  0226               	subwf	___awdiv@dividend,w
 19908  2AC0                     u8455:	
 19909  2AC0  1C03               	skipc
 19910  2AC1  2AC7               	goto	l6669
 19911  2AC2  0824               	movf	___awdiv@divisor,w
 19912  2AC3  02A6               	subwf	___awdiv@dividend,f
 19913  2AC4  0825               	movf	___awdiv@divisor+1,w
 19914  2AC5  3BA7               	subwfb	___awdiv@dividend+1,f
 19915  2AC6  142B               	bsf	___awdiv@quotient,0
 19916  2AC7                     l6669:	
 19917  2AC7  3001               	movlw	1
 19918  2AC8                     u8465:	
 19919  2AC8  36A5               	lsrf	___awdiv@divisor+1,f
 19920  2AC9  0CA4               	rrf	___awdiv@divisor,f
 19921  2ACA  0B89               	decfsz	9,f
 19922  2ACB  2AC8               	goto	u8465
 19923  2ACC  3001               	movlw	1
 19924  2ACD  02A9               	subwf	___awdiv@counter,f
 19925  2ACE  1D03               	btfss	3,2
 19926  2ACF  2AB5               	goto	l6663
 19927  2AD0                     l6673:	
 19928  2AD0  082A               	movf	___awdiv@sign,w
 19929  2AD1  1903               	btfsc	3,2
 19930  2AD2  2AD8               	goto	l6677
 19931  2AD3  09AB               	comf	___awdiv@quotient,f
 19932  2AD4  09AC               	comf	___awdiv@quotient+1,f
 19933  2AD5  0AAB               	incf	___awdiv@quotient,f
 19934  2AD6  1903               	skipnz
 19935  2AD7  0AAC               	incf	___awdiv@quotient+1,f
 19936  2AD8                     l6677:	
 19937  2AD8  082C               	movf	___awdiv@quotient+1,w
 19938  2AD9  00A5               	movwf	?___awdiv+1
 19939  2ADA  082B               	movf	___awdiv@quotient,w
 19940  2ADB  00A4               	movwf	?___awdiv
 19941  2ADC  0008               	return
 19942  2ADD                     __end_of___awdiv:	
 19943                           
 19944                           	psect	text61
 19945  2F6A                     __ptext61:	
 19946 ;; *************** function ___xxtofl *****************
 19947 ;; Defined at:
 19948 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 19949 ;; Parameters:    Size  Location     Type
 19950 ;;  sign            1    wreg     unsigned char 
 19951 ;;  val             4   10[BANK0 ] long 
 19952 ;; Auto vars:     Size  Location     Type
 19953 ;;  sign            1   18[BANK0 ] unsigned char 
 19954 ;;  arg             4   20[BANK0 ] unsigned long 
 19955 ;;  exp             1   19[BANK0 ] unsigned char 
 19956 ;; Return value:  Size  Location     Type
 19957 ;;                  4   10[BANK0 ] unsigned char 
 19958 ;; Registers used:
 19959 ;;		wreg, status,2, status,0
 19960 ;; Tracked objects:
 19961 ;;		On entry : 0/0
 19962 ;;		On exit  : 0/0
 19963 ;;		Unchanged: 0/0
 19964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19965 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19966 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19967 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19968 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19969 ;;Total ram usage:       14 bytes
 19970 ;; Hardware stack levels used:    1
 19971 ;; Hardware stack levels required when called:    3
 19972 ;; This function calls:
 19973 ;;		Nothing
 19974 ;; This function is called by:
 19975 ;;		_checkChannelStatus
 19976 ;;		_systemCheck
 19977 ;;		_getAnalogValues
 19978 ;;		_channelThing
 19979 ;;		_ftoa
 19980 ;; This function uses a non-reentrant model
 19981 ;;
 19982                           
 19983                           
 19984                           ;psect for function ___xxtofl
 19985  2F6A                     ___xxtofl:	
 19986                           
 19987                           ;incstack = 0
 19988                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 19989                           ;___xxtofl@sign stored from wreg
 19990  2F6A  0140               	movlb	0	; select bank0
 19991  2F6B  00B2               	movwf	___xxtofl@sign
 19992  2F6C  0832               	movf	___xxtofl@sign,w
 19993  2F6D  1D03               	btfss	3,2
 19994  2F6E  1FAD               	btfss	___xxtofl@val+3,7
 19995  2F6F  2F80               	goto	l7067
 19996  2F70  092A               	comf	___xxtofl@val,w
 19997  2F71  00B4               	movwf	___xxtofl@arg
 19998  2F72  092B               	comf	___xxtofl@val+1,w
 19999  2F73  00B5               	movwf	___xxtofl@arg+1
 20000  2F74  092C               	comf	___xxtofl@val+2,w
 20001  2F75  00B6               	movwf	___xxtofl@arg+2
 20002  2F76  092D               	comf	___xxtofl@val+3,w
 20003  2F77  00B7               	movwf	___xxtofl@arg+3
 20004  2F78  0AB4               	incf	___xxtofl@arg,f
 20005  2F79  1903               	skipnz
 20006  2F7A  0AB5               	incf	___xxtofl@arg+1,f
 20007  2F7B  1903               	skipnz
 20008  2F7C  0AB6               	incf	___xxtofl@arg+2,f
 20009  2F7D  1903               	skipnz
 20010  2F7E  0AB7               	incf	___xxtofl@arg+3,f
 20011  2F7F  2F88               	goto	l1416
 20012  2F80                     l7067:	
 20013  2F80  082D               	movf	___xxtofl@val+3,w
 20014  2F81  00B7               	movwf	___xxtofl@arg+3
 20015  2F82  082C               	movf	___xxtofl@val+2,w
 20016  2F83  00B6               	movwf	___xxtofl@arg+2
 20017  2F84  082B               	movf	___xxtofl@val+1,w
 20018  2F85  00B5               	movwf	___xxtofl@arg+1
 20019  2F86  082A               	movf	___xxtofl@val,w
 20020  2F87  00B4               	movwf	___xxtofl@arg
 20021  2F88                     l1416:	
 20022  2F88  082D               	movf	___xxtofl@val+3,w
 20023  2F89  042C               	iorwf	___xxtofl@val+2,w
 20024  2F8A  042B               	iorwf	___xxtofl@val+1,w
 20025  2F8B  042A               	iorwf	___xxtofl@val,w
 20026  2F8C  1D03               	skipz
 20027  2F8D  2F97               	goto	l7073
 20028  2F8E  3000               	movlw	0
 20029  2F8F  00AD               	movwf	?___xxtofl+3
 20030  2F90  3000               	movlw	0
 20031  2F91  00AC               	movwf	?___xxtofl+2
 20032  2F92  3000               	movlw	0
 20033  2F93  00AB               	movwf	?___xxtofl+1
 20034  2F94  3000               	movlw	0
 20035  2F95  00AA               	movwf	?___xxtofl
 20036  2F96  0008               	return
 20037  2F97                     l7073:	
 20038  2F97  3096               	movlw	150
 20039  2F98  00AE               	movwf	??___xxtofl
 20040  2F99  082E               	movf	??___xxtofl,w
 20041  2F9A  00B3               	movwf	___xxtofl@exp
 20042  2F9B                     l7077:	
 20043  2F9B  30FE               	movlw	254
 20044  2F9C  0537               	andwf	___xxtofl@arg+3,w
 20045  2F9D  1903               	btfsc	3,2
 20046  2F9E  2FBE               	goto	l1422
 20047  2F9F  3001               	movlw	1
 20048  2FA0  00AE               	movwf	??___xxtofl
 20049  2FA1  082E               	movf	??___xxtofl,w
 20050  2FA2  07B3               	addwf	___xxtofl@exp,f
 20051  2FA3  3001               	movlw	1
 20052  2FA4                     u9315:	
 20053  2FA4  36B7               	lsrf	___xxtofl@arg+3,f
 20054  2FA5  0CB6               	rrf	___xxtofl@arg+2,f
 20055  2FA6  0CB5               	rrf	___xxtofl@arg+1,f
 20056  2FA7  0CB4               	rrf	___xxtofl@arg,f
 20057  2FA8  0B89               	decfsz	9,f
 20058  2FA9  2FA4               	goto	u9315
 20059  2FAA  2F9B               	goto	l7077
 20060  2FAB                     l7079:	
 20061  2FAB  3001               	movlw	1
 20062  2FAC  00AE               	movwf	??___xxtofl
 20063  2FAD  082E               	movf	??___xxtofl,w
 20064  2FAE  07B3               	addwf	___xxtofl@exp,f
 20065  2FAF  3001               	movlw	1
 20066  2FB0  07B4               	addwf	___xxtofl@arg,f
 20067  2FB1  3000               	movlw	0
 20068  2FB2  3DB5               	addwfc	___xxtofl@arg+1,f
 20069  2FB3  3000               	movlw	0
 20070  2FB4  3DB6               	addwfc	___xxtofl@arg+2,f
 20071  2FB5  3000               	movlw	0
 20072  2FB6  3DB7               	addwfc	___xxtofl@arg+3,f
 20073  2FB7  3001               	movlw	1
 20074  2FB8                     u9335:	
 20075  2FB8  36B7               	lsrf	___xxtofl@arg+3,f
 20076  2FB9  0CB6               	rrf	___xxtofl@arg+2,f
 20077  2FBA  0CB5               	rrf	___xxtofl@arg+1,f
 20078  2FBB  0CB4               	rrf	___xxtofl@arg,f
 20079  2FBC  0B89               	decfsz	9,f
 20080  2FBD  2FB8               	goto	u9335
 20081  2FBE                     l1422:	
 20082  2FBE  30FF               	movlw	255
 20083  2FBF  0537               	andwf	___xxtofl@arg+3,w
 20084  2FC0  1903               	btfsc	3,2
 20085  2FC1  2FD0               	goto	l7087
 20086  2FC2  2FAB               	goto	l7079
 20087  2FC3                     l7089:	
 20088  2FC3  3002               	movlw	2
 20089  2FC4  0233               	subwf	___xxtofl@exp,w
 20090  2FC5  1C03               	btfss	3,0
 20091  2FC6  2FD2               	goto	l1429
 20092  2FC7  3001               	movlw	1
 20093  2FC8  02B3               	subwf	___xxtofl@exp,f
 20094  2FC9  3001               	movlw	1
 20095  2FCA                     u9355:	
 20096  2FCA  35B4               	lslf	___xxtofl@arg,f
 20097  2FCB  0DB5               	rlf	___xxtofl@arg+1,f
 20098  2FCC  0DB6               	rlf	___xxtofl@arg+2,f
 20099  2FCD  0DB7               	rlf	___xxtofl@arg+3,f
 20100  2FCE  0B89               	decfsz	9,f
 20101  2FCF  2FCA               	goto	u9355
 20102  2FD0                     l7087:	
 20103  2FD0  1FB6               	btfss	___xxtofl@arg+2,7
 20104  2FD1  2FC3               	goto	l7089
 20105  2FD2                     l1429:	
 20106  2FD2  1833               	btfsc	___xxtofl@exp,0
 20107  2FD3  2FDC               	goto	l1430
 20108  2FD4  30FF               	movlw	255
 20109  2FD5  05B4               	andwf	___xxtofl@arg,f
 20110  2FD6  30FF               	movlw	255
 20111  2FD7  05B5               	andwf	___xxtofl@arg+1,f
 20112  2FD8  307F               	movlw	127
 20113  2FD9  05B6               	andwf	___xxtofl@arg+2,f
 20114  2FDA  30FF               	movlw	255
 20115  2FDB  05B7               	andwf	___xxtofl@arg+3,f
 20116  2FDC                     l1430:	
 20117  2FDC  1003               	clrc
 20118  2FDD  0CB3               	rrf	___xxtofl@exp,f
 20119  2FDE  0833               	movf	___xxtofl@exp,w
 20120  2FDF  00AE               	movwf	??___xxtofl
 20121  2FE0  01AF               	clrf	??___xxtofl+1
 20122  2FE1  01B0               	clrf	??___xxtofl+2
 20123  2FE2  01B1               	clrf	??___xxtofl+3
 20124  2FE3  3018               	movlw	24
 20125  2FE4                     u9395:	
 20126  2FE4  35AE               	lslf	??___xxtofl,f
 20127  2FE5  0DAF               	rlf	??___xxtofl+1,f
 20128  2FE6  0DB0               	rlf	??___xxtofl+2,f
 20129  2FE7  0DB1               	rlf	??___xxtofl+3,f
 20130  2FE8  0B89               	decfsz	9,f
 20131  2FE9  2FE4               	goto	u9395
 20132  2FEA  082E               	movf	??___xxtofl,w
 20133  2FEB  04B4               	iorwf	___xxtofl@arg,f
 20134  2FEC  082F               	movf	??___xxtofl+1,w
 20135  2FED  04B5               	iorwf	___xxtofl@arg+1,f
 20136  2FEE  0830               	movf	??___xxtofl+2,w
 20137  2FEF  04B6               	iorwf	___xxtofl@arg+2,f
 20138  2FF0  0831               	movf	??___xxtofl+3,w
 20139  2FF1  04B7               	iorwf	___xxtofl@arg+3,f
 20140  2FF2  0832               	movf	___xxtofl@sign,w
 20141  2FF3  1D03               	btfss	3,2
 20142  2FF4  1FAD               	btfss	___xxtofl@val+3,7
 20143  2FF5  2FF7               	goto	l7101
 20144  2FF6  17B7               	bsf	___xxtofl@arg+3,7
 20145  2FF7                     l7101:	
 20146  2FF7  0837               	movf	___xxtofl@arg+3,w
 20147  2FF8  00AD               	movwf	?___xxtofl+3
 20148  2FF9  0836               	movf	___xxtofl@arg+2,w
 20149  2FFA  00AC               	movwf	?___xxtofl+2
 20150  2FFB  0835               	movf	___xxtofl@arg+1,w
 20151  2FFC  00AB               	movwf	?___xxtofl+1
 20152  2FFD  0834               	movf	___xxtofl@arg,w
 20153  2FFE  00AA               	movwf	?___xxtofl
 20154  2FFF  0008               	return
 20155  3000                     __end_of___xxtofl:	
 20156                           
 20157                           	psect	text62
 20158  2DD6                     __ptext62:	
 20159 ;; *************** function ___flge *****************
 20160 ;; Defined at:
 20161 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 20162 ;; Parameters:    Size  Location     Type
 20163 ;;  ff1             4   13[BANK1 ] unsigned char 
 20164 ;;  ff2             4   17[BANK1 ] unsigned char 
 20165 ;; Auto vars:     Size  Location     Type
 20166 ;;		None
 20167 ;; Return value:  Size  Location     Type
 20168 ;;		None               void
 20169 ;; Registers used:
 20170 ;;		wreg, status,2, status,0
 20171 ;; Tracked objects:
 20172 ;;		On entry : 0/0
 20173 ;;		On exit  : 0/0
 20174 ;;		Unchanged: 0/0
 20175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20176 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20178 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20179 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20180 ;;Total ram usage:       12 bytes
 20181 ;; Hardware stack levels used:    1
 20182 ;; Hardware stack levels required when called:    3
 20183 ;; This function calls:
 20184 ;;		Nothing
 20185 ;; This function is called by:
 20186 ;;		_spinInput
 20187 ;;		_channelSetup
 20188 ;;		_setOutputPower
 20189 ;;		_checkChannelStatus
 20190 ;;		_systemCheck
 20191 ;;		_checkSensor
 20192 ;;		_channelThing
 20193 ;;		_ftoa
 20194 ;; This function uses a non-reentrant model
 20195 ;;
 20196                           
 20197                           
 20198                           ;psect for function ___flge
 20199  2DD6                     ___flge:	
 20200                           
 20201                           ;incstack = 0
 20202                           ; Regs used in ___flge: [wreg+status,2+status,0]
 20203  2DD6  3000               	movlw	0
 20204  2DD7  0141               	movlb	1	; select bank1
 20205  2DD8  052D               	andwf	___flge@ff1^(0+128),w
 20206  2DD9  00B5               	movwf	??___flge^(0+128)
 20207  2DDA  3000               	movlw	0
 20208  2DDB  052E               	andwf	(___flge@ff1+1)^(0+128),w
 20209  2DDC  00B6               	movwf	(??___flge^(0+128)+1)
 20210  2DDD  3080               	movlw	128
 20211  2DDE  052F               	andwf	(___flge@ff1+2)^(0+128),w
 20212  2DDF  00B7               	movwf	(??___flge^(0+128)+2)
 20213  2DE0  307F               	movlw	127
 20214  2DE1  0530               	andwf	(___flge@ff1+3)^(0+128),w
 20215  2DE2  00B8               	movwf	(??___flge^(0+128)+3)
 20216  2DE3  0838               	movf	(??___flge+3)^(0+128),w
 20217  2DE4  0437               	iorwf	(??___flge+2)^(0+128),w
 20218  2DE5  0436               	iorwf	(??___flge+1)^(0+128),w
 20219  2DE6  0435               	iorwf	??___flge^(0+128),w
 20220  2DE7  1D03               	skipz
 20221  2DE8  2DF1               	goto	l1159
 20222  2DE9  3000               	movlw	0
 20223  2DEA  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20224  2DEB  3000               	movlw	0
 20225  2DEC  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20226  2DED  3000               	movlw	0
 20227  2DEE  00AE               	movwf	(___flge@ff1+1)^(0+128)
 20228  2DEF  3000               	movlw	0
 20229  2DF0  00AD               	movwf	___flge@ff1^(0+128)
 20230  2DF1                     l1159:	
 20231  2DF1  3000               	movlw	0
 20232  2DF2  0531               	andwf	___flge@ff2^(0+128),w
 20233  2DF3  00B5               	movwf	??___flge^(0+128)
 20234  2DF4  3000               	movlw	0
 20235  2DF5  0532               	andwf	(___flge@ff2+1)^(0+128),w
 20236  2DF6  00B6               	movwf	(??___flge^(0+128)+1)
 20237  2DF7  3080               	movlw	128
 20238  2DF8  0533               	andwf	(___flge@ff2+2)^(0+128),w
 20239  2DF9  00B7               	movwf	(??___flge^(0+128)+2)
 20240  2DFA  307F               	movlw	127
 20241  2DFB  0534               	andwf	(___flge@ff2+3)^(0+128),w
 20242  2DFC  00B8               	movwf	(??___flge^(0+128)+3)
 20243  2DFD  0838               	movf	(??___flge+3)^(0+128),w
 20244  2DFE  0437               	iorwf	(??___flge+2)^(0+128),w
 20245  2DFF  0436               	iorwf	(??___flge+1)^(0+128),w
 20246  2E00  0435               	iorwf	??___flge^(0+128),w
 20247  2E01  1D03               	skipz
 20248  2E02  2E0B               	goto	l6725
 20249  2E03  3000               	movlw	0
 20250  2E04  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20251  2E05  3000               	movlw	0
 20252  2E06  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20253  2E07  3000               	movlw	0
 20254  2E08  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20255  2E09  3000               	movlw	0
 20256  2E0A  00B1               	movwf	___flge@ff2^(0+128)
 20257  2E0B                     l6725:	
 20258  2E0B  1FB0               	btfss	(___flge@ff1+3)^(0+128),7
 20259  2E0C  2E25               	goto	l6729
 20260  2E0D  3000               	movlw	0
 20261  2E0E  00B5               	movwf	??___flge^(0+128)
 20262  2E0F  3000               	movlw	0
 20263  2E10  00B6               	movwf	(??___flge^(0+128)+1)
 20264  2E11  3000               	movlw	0
 20265  2E12  00B7               	movwf	(??___flge^(0+128)+2)
 20266  2E13  3080               	movlw	128
 20267  2E14  00B8               	movwf	(??___flge^(0+128)+3)
 20268  2E15  082D               	movf	___flge@ff1^(0+128),w
 20269  2E16  02B5               	subwf	??___flge^(0+128),f
 20270  2E17  082E               	movf	(___flge@ff1+1)^(0+128),w
 20271  2E18  3BB6               	subwfb	(??___flge^(0+128)+1),f
 20272  2E19  082F               	movf	(___flge@ff1+2)^(0+128),w
 20273  2E1A  3BB7               	subwfb	(??___flge^(0+128)+2),f
 20274  2E1B  0830               	movf	(___flge@ff1+3)^(0+128),w
 20275  2E1C  3BB8               	subwfb	(??___flge^(0+128)+3),f
 20276  2E1D  0838               	movf	(??___flge+3)^(0+128),w
 20277  2E1E  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20278  2E1F  0837               	movf	(??___flge+2)^(0+128),w
 20279  2E20  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20280  2E21  0836               	movf	(??___flge+1)^(0+128),w
 20281  2E22  00AE               	movwf	(___flge@ff1+1)^(0+128)
 20282  2E23  0835               	movf	??___flge^(0+128),w
 20283  2E24  00AD               	movwf	___flge@ff1^(0+128)
 20284  2E25                     l6729:	
 20285  2E25  1FB4               	btfss	(___flge@ff2+3)^(0+128),7
 20286  2E26  2E3F               	goto	l1162
 20287  2E27  3000               	movlw	0
 20288  2E28  00B5               	movwf	??___flge^(0+128)
 20289  2E29  3000               	movlw	0
 20290  2E2A  00B6               	movwf	(??___flge^(0+128)+1)
 20291  2E2B  3000               	movlw	0
 20292  2E2C  00B7               	movwf	(??___flge^(0+128)+2)
 20293  2E2D  3080               	movlw	128
 20294  2E2E  00B8               	movwf	(??___flge^(0+128)+3)
 20295  2E2F  0831               	movf	___flge@ff2^(0+128),w
 20296  2E30  02B5               	subwf	??___flge^(0+128),f
 20297  2E31  0832               	movf	(___flge@ff2+1)^(0+128),w
 20298  2E32  3BB6               	subwfb	(??___flge^(0+128)+1),f
 20299  2E33  0833               	movf	(___flge@ff2+2)^(0+128),w
 20300  2E34  3BB7               	subwfb	(??___flge^(0+128)+2),f
 20301  2E35  0834               	movf	(___flge@ff2+3)^(0+128),w
 20302  2E36  3BB8               	subwfb	(??___flge^(0+128)+3),f
 20303  2E37  0838               	movf	(??___flge+3)^(0+128),w
 20304  2E38  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20305  2E39  0837               	movf	(??___flge+2)^(0+128),w
 20306  2E3A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20307  2E3B  0836               	movf	(??___flge+1)^(0+128),w
 20308  2E3C  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20309  2E3D  0835               	movf	??___flge^(0+128),w
 20310  2E3E  00B1               	movwf	___flge@ff2^(0+128)
 20311  2E3F                     l1162:	
 20312  2E3F  3080               	movlw	128
 20313  2E40  06B0               	xorwf	(___flge@ff1+3)^(0+128),f
 20314  2E41  3080               	movlw	128
 20315  2E42  06B4               	xorwf	(___flge@ff2+3)^(0+128),f
 20316  2E43  0834               	movf	(___flge@ff2+3)^(0+128),w
 20317  2E44  0230               	subwf	(___flge@ff1+3)^(0+128),w
 20318  2E45  1D03               	skipz
 20319  2E46  0008               	return
 20320  2E47  0833               	movf	(___flge@ff2+2)^(0+128),w
 20321  2E48  022F               	subwf	(___flge@ff1+2)^(0+128),w
 20322  2E49  1D03               	skipz
 20323  2E4A  0008               	return
 20324  2E4B  0832               	movf	(___flge@ff2+1)^(0+128),w
 20325  2E4C  022E               	subwf	(___flge@ff1+1)^(0+128),w
 20326  2E4D  1D03               	skipz
 20327  2E4E  0008               	return
 20328  2E4F  0831               	movf	___flge@ff2^(0+128),w
 20329  2E50  022D               	subwf	___flge@ff1^(0+128),w
 20330  2E51  0008               	return
 20331  2E52                     __end_of___flge:	
 20332                           
 20333                           	psect	text63
 20334  00E3                     __ptext63:	
 20335 ;; *************** function _calcRequiredPower *****************
 20336 ;; Defined at:
 20337 ;;		line 294 in file "system.c"
 20338 ;; Parameters:    Size  Location     Type
 20339 ;;  data            2   13[BANK1 ] PTR struct .
 20340 ;;		 -> data(170), 
 20341 ;; Auto vars:     Size  Location     Type
 20342 ;;  T2              4   71[BANK1 ] float 
 20343 ;;  T1              4   67[BANK1 ] float 
 20344 ;;  A               4   59[BANK1 ] float 
 20345 ;;  phi             4   55[BANK1 ] float 
 20346 ;;  d               4   51[BANK1 ] float 
 20347 ;;  Rth             4   23[BANK1 ] float 
 20348 ;;  p               4   19[BANK1 ] float 
 20349 ;;  n               1   75[BANK1 ] unsigned char 
 20350 ;; Return value:  Size  Location     Type
 20351 ;;                  1    wreg      void 
 20352 ;; Registers used:
 20353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20354 ;; Tracked objects:
 20355 ;;		On entry : 0/0
 20356 ;;		On exit  : 0/0
 20357 ;;		Unchanged: 0/0
 20358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20359 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20360 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20361 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20362 ;;      Totals:         0       0      63       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20363 ;;Total ram usage:       63 bytes
 20364 ;; Hardware stack levels used:    1
 20365 ;; Hardware stack levels required when called:    5
 20366 ;; This function calls:
 20367 ;;		___fladd
 20368 ;;		___fldiv
 20369 ;;		___flmul
 20370 ;;		___flsub
 20371 ;; This function is called by:
 20372 ;;		_main
 20373 ;; This function uses a non-reentrant model
 20374 ;;
 20375                           
 20376                           
 20377                           ;psect for function _calcRequiredPower
 20378  00E3                     _calcRequiredPower:	
 20379                           
 20380                           ;system.c: 294: void calcRequiredPower(t_globalData *data);system.c: 295: {;system.c: 29
      +                          6:  uint8_t n;;system.c: 297:  float d, A, T1, T2, phi;;system.c: 298:  float p, Rth;;sy
      +                          stem.c: 300:  for (n = 0; n < 4; n++) {
 20381                           
 20382                           ;incstack = 0
 20383                           ; Regs used in _calcRequiredPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20384  00E3  0141               	movlb	1	; select bank1
 20385  00E4  01EB               	clrf	calcRequiredPower@n^(0+128)
 20386  00E5                     l7915:	
 20387                           
 20388                           ;system.c: 302:   d = 0.0254 * data->chData[n].lensDia;
 20389  00E5  303C               	movlw	60
 20390  00E6  0140               	movlb	0	; select bank0
 20391  00E7  00BB               	movwf	___flmul@b+3
 20392  00E8  30D0               	movlw	208
 20393  00E9  00BA               	movwf	___flmul@b+2
 20394  00EA  3013               	movlw	19
 20395  00EB  00B9               	movwf	___flmul@b+1
 20396  00EC  30A9               	movlw	169
 20397  00ED  00B8               	movwf	___flmul@b
 20398  00EE  0141               	movlb	1	; select bank1
 20399  00EF  086B               	movf	calcRequiredPower@n^(0+128),w
 20400  00F0  00AF               	movwf	??_calcRequiredPower^(0+128)
 20401  00F1  01B0               	clrf	(??_calcRequiredPower^(0+128)+1)
 20402  00F2  3005               	movlw	5
 20403  00F3                     u10535:	
 20404  00F3  35AF               	lslf	??_calcRequiredPower^(0+128),f
 20405  00F4  0DB0               	rlf	(??_calcRequiredPower^(0+128)+1),f
 20406  00F5  0B89               	decfsz	9,f
 20407  00F6  28F3               	goto	u10535
 20408  00F7  082F               	movf	??_calcRequiredPower^(0+128),w
 20409  00F8  072D               	addwf	calcRequiredPower@data^(0+128),w
 20410  00F9  00B1               	movwf	(??_calcRequiredPower+2)^(0+128)
 20411  00FA  0830               	movf	(??_calcRequiredPower+1)^(0+128),w
 20412  00FB  3D2E               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 20413  00FC  00B2               	movwf	(??_calcRequiredPower+3)^(0+128)
 20414  00FD  0831               	movf	(??_calcRequiredPower+2)^(0+128),w
 20415  00FE  3E40               	addlw	64
 20416  00FF  0086               	movwf	6
 20417  0100  3000               	movlw	0
 20418  0101  3D32               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 20419  0102  0087               	movwf	7
 20420  0103  3F40               	moviw [0]fsr1
 20421  0104  0140               	movlb	0	; select bank0
 20422  0105  00BC               	movwf	___flmul@a
 20423  0106  3F41               	moviw [1]fsr1
 20424  0107  00BD               	movwf	___flmul@a+1
 20425  0108  3F42               	moviw [2]fsr1
 20426  0109  00BE               	movwf	___flmul@a+2
 20427  010A  3F43               	moviw [3]fsr1
 20428  010B  00BF               	movwf	___flmul@a+3
 20429  010C  3195  25D4  3180   	fcall	___flmul
 20430  010F  0140               	movlb	0	; select bank0
 20431  0110  083B               	movf	?___flmul+3,w
 20432  0111  0141               	movlb	1	; select bank1
 20433  0112  00D6               	movwf	(calcRequiredPower@d+3)^(0+128)
 20434  0113  0140               	movlb	0	; select bank0
 20435  0114  083A               	movf	?___flmul+2,w
 20436  0115  0141               	movlb	1	; select bank1
 20437  0116  00D5               	movwf	(calcRequiredPower@d+2)^(0+128)
 20438  0117  0140               	movlb	0	; select bank0
 20439  0118  0839               	movf	?___flmul+1,w
 20440  0119  0141               	movlb	1	; select bank1
 20441  011A  00D4               	movwf	(calcRequiredPower@d+1)^(0+128)
 20442  011B  0140               	movlb	0	; select bank0
 20443  011C  0838               	movf	?___flmul,w
 20444  011D  0141               	movlb	1	; select bank1
 20445  011E  00D3               	movwf	calcRequiredPower@d^(0+128)
 20446                           
 20447                           ;system.c: 303:   A = (3.14 * d * d) / 4;
 20448  011F  3040               	movlw	64
 20449  0120  0140               	movlb	0	; select bank0
 20450  0121  00BB               	movwf	___flmul@b+3
 20451  0122  3048               	movlw	72
 20452  0123  00BA               	movwf	___flmul@b+2
 20453  0124  30F5               	movlw	245
 20454  0125  00B9               	movwf	___flmul@b+1
 20455  0126  30C3               	movlw	195
 20456  0127  00B8               	movwf	___flmul@b
 20457  0128  0141               	movlb	1	; select bank1
 20458  0129  0856               	movf	(calcRequiredPower@d+3)^(0+128),w
 20459  012A  0140               	movlb	0	; select bank0
 20460  012B  00BF               	movwf	___flmul@a+3
 20461  012C  0141               	movlb	1	; select bank1
 20462  012D  0855               	movf	(calcRequiredPower@d+2)^(0+128),w
 20463  012E  0140               	movlb	0	; select bank0
 20464  012F  00BE               	movwf	___flmul@a+2
 20465  0130  0141               	movlb	1	; select bank1
 20466  0131  0854               	movf	(calcRequiredPower@d+1)^(0+128),w
 20467  0132  0140               	movlb	0	; select bank0
 20468  0133  00BD               	movwf	___flmul@a+1
 20469  0134  0141               	movlb	1	; select bank1
 20470  0135  0853               	movf	calcRequiredPower@d^(0+128),w
 20471  0136  0140               	movlb	0	; select bank0
 20472  0137  00BC               	movwf	___flmul@a
 20473  0138  3195  25D4  3180   	fcall	___flmul
 20474  013B  0140               	movlb	0	; select bank0
 20475  013C  083B               	movf	?___flmul+3,w
 20476  013D  0141               	movlb	1	; select bank1
 20477  013E  00E2               	movwf	(_calcRequiredPower$2589+3)^(0+128)
 20478  013F  0140               	movlb	0	; select bank0
 20479  0140  083A               	movf	?___flmul+2,w
 20480  0141  0141               	movlb	1	; select bank1
 20481  0142  00E1               	movwf	(_calcRequiredPower$2589+2)^(0+128)
 20482  0143  0140               	movlb	0	; select bank0
 20483  0144  0839               	movf	?___flmul+1,w
 20484  0145  0141               	movlb	1	; select bank1
 20485  0146  00E0               	movwf	(_calcRequiredPower$2589+1)^(0+128)
 20486  0147  0140               	movlb	0	; select bank0
 20487  0148  0838               	movf	?___flmul,w
 20488  0149  0141               	movlb	1	; select bank1
 20489  014A  00DF               	movwf	_calcRequiredPower$2589^(0+128)
 20490                           
 20491                           ;system.c: 303:   A = (3.14 * d * d) / 4;
 20492  014B  3040               	movlw	64
 20493  014C  0140               	movlb	0	; select bank0
 20494  014D  00D5               	movwf	___fldiv@a+3
 20495  014E  3080               	movlw	128
 20496  014F  00D4               	movwf	___fldiv@a+2
 20497  0150  3000               	movlw	0
 20498  0151  00D3               	movwf	___fldiv@a+1
 20499  0152  3000               	movlw	0
 20500  0153  00D2               	movwf	___fldiv@a
 20501  0154  0141               	movlb	1	; select bank1
 20502  0155  0856               	movf	(calcRequiredPower@d+3)^(0+128),w
 20503  0156  0140               	movlb	0	; select bank0
 20504  0157  00BB               	movwf	___flmul@b+3
 20505  0158  0141               	movlb	1	; select bank1
 20506  0159  0855               	movf	(calcRequiredPower@d+2)^(0+128),w
 20507  015A  0140               	movlb	0	; select bank0
 20508  015B  00BA               	movwf	___flmul@b+2
 20509  015C  0141               	movlb	1	; select bank1
 20510  015D  0854               	movf	(calcRequiredPower@d+1)^(0+128),w
 20511  015E  0140               	movlb	0	; select bank0
 20512  015F  00B9               	movwf	___flmul@b+1
 20513  0160  0141               	movlb	1	; select bank1
 20514  0161  0853               	movf	calcRequiredPower@d^(0+128),w
 20515  0162  0140               	movlb	0	; select bank0
 20516  0163  00B8               	movwf	___flmul@b
 20517  0164  0141               	movlb	1	; select bank1
 20518  0165  0862               	movf	(_calcRequiredPower$2589+3)^(0+128),w
 20519  0166  0140               	movlb	0	; select bank0
 20520  0167  00BF               	movwf	___flmul@a+3
 20521  0168  0141               	movlb	1	; select bank1
 20522  0169  0861               	movf	(_calcRequiredPower$2589+2)^(0+128),w
 20523  016A  0140               	movlb	0	; select bank0
 20524  016B  00BE               	movwf	___flmul@a+2
 20525  016C  0141               	movlb	1	; select bank1
 20526  016D  0860               	movf	(_calcRequiredPower$2589+1)^(0+128),w
 20527  016E  0140               	movlb	0	; select bank0
 20528  016F  00BD               	movwf	___flmul@a+1
 20529  0170  0141               	movlb	1	; select bank1
 20530  0171  085F               	movf	_calcRequiredPower$2589^(0+128),w
 20531  0172  0140               	movlb	0	; select bank0
 20532  0173  00BC               	movwf	___flmul@a
 20533  0174  3195  25D4  3180   	fcall	___flmul
 20534  0177  0140               	movlb	0	; select bank0
 20535  0178  083B               	movf	?___flmul+3,w
 20536  0179  00D9               	movwf	___fldiv@b+3
 20537  017A  083A               	movf	?___flmul+2,w
 20538  017B  00D8               	movwf	___fldiv@b+2
 20539  017C  0839               	movf	?___flmul+1,w
 20540  017D  00D7               	movwf	___fldiv@b+1
 20541  017E  0838               	movf	?___flmul,w
 20542  017F  00D6               	movwf	___fldiv@b
 20543  0180  319E  2628  3180   	fcall	___fldiv
 20544  0183  0140               	movlb	0	; select bank0
 20545  0184  0855               	movf	?___fldiv+3,w
 20546  0185  0141               	movlb	1	; select bank1
 20547  0186  00DE               	movwf	(calcRequiredPower@A+3)^(0+128)
 20548  0187  0140               	movlb	0	; select bank0
 20549  0188  0854               	movf	?___fldiv+2,w
 20550  0189  0141               	movlb	1	; select bank1
 20551  018A  00DD               	movwf	(calcRequiredPower@A+2)^(0+128)
 20552  018B  0140               	movlb	0	; select bank0
 20553  018C  0853               	movf	?___fldiv+1,w
 20554  018D  0141               	movlb	1	; select bank1
 20555  018E  00DC               	movwf	(calcRequiredPower@A+1)^(0+128)
 20556  018F  0140               	movlb	0	; select bank0
 20557  0190  0852               	movf	?___fldiv,w
 20558  0191  0141               	movlb	1	; select bank1
 20559  0192  00DB               	movwf	calcRequiredPower@A^(0+128)
 20560                           
 20561                           ;system.c: 305:   T1 = data->dewPointC + data->dpOffset + 273.15;
 20562  0193  082D               	movf	calcRequiredPower@data^(0+128),w
 20563  0194  0086               	movwf	6
 20564  0195  082E               	movf	(calcRequiredPower@data+1)^(0+128),w
 20565  0196  0087               	movwf	7
 20566  0197  315D               	addfsr 1,29
 20567  0198  3F40               	moviw [0]fsr1
 20568  0199  0140               	movlb	0	; select bank0
 20569  019A  00D2               	movwf	___fladd@b
 20570  019B  3F41               	moviw [1]fsr1
 20571  019C  00D3               	movwf	___fladd@b+1
 20572  019D  3F42               	moviw [2]fsr1
 20573  019E  00D4               	movwf	___fladd@b+2
 20574  019F  3F43               	moviw [3]fsr1
 20575  01A0  00D5               	movwf	___fladd@b+3
 20576  01A1  0141               	movlb	1	; select bank1
 20577  01A2  082D               	movf	calcRequiredPower@data^(0+128),w
 20578  01A3  0086               	movwf	6
 20579  01A4  082E               	movf	(calcRequiredPower@data+1)^(0+128),w
 20580  01A5  0087               	movwf	7
 20581  01A6  3148               	addfsr 1,8
 20582  01A7  3F40               	moviw [0]fsr1
 20583  01A8  0140               	movlb	0	; select bank0
 20584  01A9  00D6               	movwf	___fladd@a
 20585  01AA  3F41               	moviw [1]fsr1
 20586  01AB  00D7               	movwf	___fladd@a+1
 20587  01AC  3F42               	moviw [2]fsr1
 20588  01AD  00D8               	movwf	___fladd@a+2
 20589  01AE  3F43               	moviw [3]fsr1
 20590  01AF  00D9               	movwf	___fladd@a+3
 20591  01B0  3192  220E  3180   	fcall	___fladd
 20592  01B3  0140               	movlb	0	; select bank0
 20593  01B4  0855               	movf	?___fladd+3,w
 20594  01B5  0141               	movlb	1	; select bank1
 20595  01B6  00BE               	movwf	(_calcRequiredPower$2590+3)^(0+128)
 20596  01B7  0140               	movlb	0	; select bank0
 20597  01B8  0854               	movf	?___fladd+2,w
 20598  01B9  0141               	movlb	1	; select bank1
 20599  01BA  00BD               	movwf	(_calcRequiredPower$2590+2)^(0+128)
 20600  01BB  0140               	movlb	0	; select bank0
 20601  01BC  0853               	movf	?___fladd+1,w
 20602  01BD  0141               	movlb	1	; select bank1
 20603  01BE  00BC               	movwf	(_calcRequiredPower$2590+1)^(0+128)
 20604  01BF  0140               	movlb	0	; select bank0
 20605  01C0  0852               	movf	?___fladd,w
 20606  01C1  0141               	movlb	1	; select bank1
 20607  01C2  00BB               	movwf	_calcRequiredPower$2590^(0+128)
 20608                           
 20609                           ;system.c: 305:   T1 = data->dewPointC + data->dpOffset + 273.15;
 20610  01C3  3043               	movlw	67
 20611  01C4  0140               	movlb	0	; select bank0
 20612  01C5  00D5               	movwf	___fladd@b+3
 20613  01C6  3088               	movlw	136
 20614  01C7  00D4               	movwf	___fladd@b+2
 20615  01C8  3093               	movlw	147
 20616  01C9  00D3               	movwf	___fladd@b+1
 20617  01CA  3033               	movlw	51
 20618  01CB  00D2               	movwf	___fladd@b
 20619  01CC  0141               	movlb	1	; select bank1
 20620  01CD  083E               	movf	(_calcRequiredPower$2590+3)^(0+128),w
 20621  01CE  0140               	movlb	0	; select bank0
 20622  01CF  00D9               	movwf	___fladd@a+3
 20623  01D0  0141               	movlb	1	; select bank1
 20624  01D1  083D               	movf	(_calcRequiredPower$2590+2)^(0+128),w
 20625  01D2  0140               	movlb	0	; select bank0
 20626  01D3  00D8               	movwf	___fladd@a+2
 20627  01D4  0141               	movlb	1	; select bank1
 20628  01D5  083C               	movf	(_calcRequiredPower$2590+1)^(0+128),w
 20629  01D6  0140               	movlb	0	; select bank0
 20630  01D7  00D7               	movwf	___fladd@a+1
 20631  01D8  0141               	movlb	1	; select bank1
 20632  01D9  083B               	movf	_calcRequiredPower$2590^(0+128),w
 20633  01DA  0140               	movlb	0	; select bank0
 20634  01DB  00D6               	movwf	___fladd@a
 20635  01DC  3192  220E  3180   	fcall	___fladd
 20636  01DF  0140               	movlb	0	; select bank0
 20637  01E0  0855               	movf	?___fladd+3,w
 20638  01E1  0141               	movlb	1	; select bank1
 20639  01E2  00E6               	movwf	(calcRequiredPower@T1+3)^(0+128)
 20640  01E3  0140               	movlb	0	; select bank0
 20641  01E4  0854               	movf	?___fladd+2,w
 20642  01E5  0141               	movlb	1	; select bank1
 20643  01E6  00E5               	movwf	(calcRequiredPower@T1+2)^(0+128)
 20644  01E7  0140               	movlb	0	; select bank0
 20645  01E8  0853               	movf	?___fladd+1,w
 20646  01E9  0141               	movlb	1	; select bank1
 20647  01EA  00E4               	movwf	(calcRequiredPower@T1+1)^(0+128)
 20648  01EB  0140               	movlb	0	; select bank0
 20649  01EC  0852               	movf	?___fladd,w
 20650  01ED  0141               	movlb	1	; select bank1
 20651  01EE  00E3               	movwf	calcRequiredPower@T1^(0+128)
 20652                           
 20653                           ;system.c: 306:   T2 = data->skyTemp + 273.15;
 20654  01EF  3043               	movlw	67
 20655  01F0  0140               	movlb	0	; select bank0
 20656  01F1  00D5               	movwf	___fladd@b+3
 20657  01F2  3088               	movlw	136
 20658  01F3  00D4               	movwf	___fladd@b+2
 20659  01F4  3093               	movlw	147
 20660  01F5  00D3               	movwf	___fladd@b+1
 20661  01F6  3033               	movlw	51
 20662  01F7  00D2               	movwf	___fladd@b
 20663  01F8  0141               	movlb	1	; select bank1
 20664  01F9  082D               	movf	calcRequiredPower@data^(0+128),w
 20665  01FA  3E21               	addlw	33
 20666  01FB  0086               	movwf	6
 20667  01FC  3000               	movlw	0
 20668  01FD  3D2E               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 20669  01FE  0087               	movwf	7
 20670  01FF  3F40               	moviw [0]fsr1
 20671  0200  0140               	movlb	0	; select bank0
 20672  0201  00D6               	movwf	___fladd@a
 20673  0202  3F41               	moviw [1]fsr1
 20674  0203  00D7               	movwf	___fladd@a+1
 20675  0204  3F42               	moviw [2]fsr1
 20676  0205  00D8               	movwf	___fladd@a+2
 20677  0206  3F43               	moviw [3]fsr1
 20678  0207  00D9               	movwf	___fladd@a+3
 20679  0208  3192  220E  3180   	fcall	___fladd
 20680  020B  0140               	movlb	0	; select bank0
 20681  020C  0855               	movf	?___fladd+3,w
 20682  020D  0141               	movlb	1	; select bank1
 20683  020E  00EA               	movwf	(calcRequiredPower@T2+3)^(0+128)
 20684  020F  0140               	movlb	0	; select bank0
 20685  0210  0854               	movf	?___fladd+2,w
 20686  0211  0141               	movlb	1	; select bank1
 20687  0212  00E9               	movwf	(calcRequiredPower@T2+2)^(0+128)
 20688  0213  0140               	movlb	0	; select bank0
 20689  0214  0853               	movf	?___fladd+1,w
 20690  0215  0141               	movlb	1	; select bank1
 20691  0216  00E8               	movwf	(calcRequiredPower@T2+1)^(0+128)
 20692  0217  0140               	movlb	0	; select bank0
 20693  0218  0852               	movf	?___fladd,w
 20694  0219  0141               	movlb	1	; select bank1
 20695  021A  00E7               	movwf	calcRequiredPower@T2^(0+128)
 20696                           
 20697                           ;system.c: 308:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20698  021B  086A               	movf	(calcRequiredPower@T2+3)^(0+128),w
 20699  021C  0140               	movlb	0	; select bank0
 20700  021D  00BB               	movwf	___flmul@b+3
 20701  021E  0141               	movlb	1	; select bank1
 20702  021F  0869               	movf	(calcRequiredPower@T2+2)^(0+128),w
 20703  0220  0140               	movlb	0	; select bank0
 20704  0221  00BA               	movwf	___flmul@b+2
 20705  0222  0141               	movlb	1	; select bank1
 20706  0223  0868               	movf	(calcRequiredPower@T2+1)^(0+128),w
 20707  0224  0140               	movlb	0	; select bank0
 20708  0225  00B9               	movwf	___flmul@b+1
 20709  0226  0141               	movlb	1	; select bank1
 20710  0227  0867               	movf	calcRequiredPower@T2^(0+128),w
 20711  0228  0140               	movlb	0	; select bank0
 20712  0229  00B8               	movwf	___flmul@b
 20713  022A  0141               	movlb	1	; select bank1
 20714  022B  086A               	movf	(calcRequiredPower@T2+3)^(0+128),w
 20715  022C  0140               	movlb	0	; select bank0
 20716  022D  00BF               	movwf	___flmul@a+3
 20717  022E  0141               	movlb	1	; select bank1
 20718  022F  0869               	movf	(calcRequiredPower@T2+2)^(0+128),w
 20719  0230  0140               	movlb	0	; select bank0
 20720  0231  00BE               	movwf	___flmul@a+2
 20721  0232  0141               	movlb	1	; select bank1
 20722  0233  0868               	movf	(calcRequiredPower@T2+1)^(0+128),w
 20723  0234  0140               	movlb	0	; select bank0
 20724  0235  00BD               	movwf	___flmul@a+1
 20725  0236  0141               	movlb	1	; select bank1
 20726  0237  0867               	movf	calcRequiredPower@T2^(0+128),w
 20727  0238  0140               	movlb	0	; select bank0
 20728  0239  00BC               	movwf	___flmul@a
 20729  023A  3195  25D4  3180   	fcall	___flmul
 20730  023D  0140               	movlb	0	; select bank0
 20731  023E  083B               	movf	?___flmul+3,w
 20732  023F  0141               	movlb	1	; select bank1
 20733  0240  00E2               	movwf	(_calcRequiredPower$2589+3)^(0+128)
 20734  0241  0140               	movlb	0	; select bank0
 20735  0242  083A               	movf	?___flmul+2,w
 20736  0243  0141               	movlb	1	; select bank1
 20737  0244  00E1               	movwf	(_calcRequiredPower$2589+2)^(0+128)
 20738  0245  0140               	movlb	0	; select bank0
 20739  0246  0839               	movf	?___flmul+1,w
 20740  0247  0141               	movlb	1	; select bank1
 20741  0248  00E0               	movwf	(_calcRequiredPower$2589+1)^(0+128)
 20742  0249  0140               	movlb	0	; select bank0
 20743  024A  0838               	movf	?___flmul,w
 20744  024B  0141               	movlb	1	; select bank1
 20745  024C  00DF               	movwf	_calcRequiredPower$2589^(0+128)
 20746                           
 20747                           ;system.c: 308:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20748  024D  086A               	movf	(calcRequiredPower@T2+3)^(0+128),w
 20749  024E  0140               	movlb	0	; select bank0
 20750  024F  00BB               	movwf	___flmul@b+3
 20751  0250  0141               	movlb	1	; select bank1
 20752  0251  0869               	movf	(calcRequiredPower@T2+2)^(0+128),w
 20753  0252  0140               	movlb	0	; select bank0
 20754  0253  00BA               	movwf	___flmul@b+2
 20755  0254  0141               	movlb	1	; select bank1
 20756  0255  0868               	movf	(calcRequiredPower@T2+1)^(0+128),w
 20757  0256  0140               	movlb	0	; select bank0
 20758  0257  00B9               	movwf	___flmul@b+1
 20759  0258  0141               	movlb	1	; select bank1
 20760  0259  0867               	movf	calcRequiredPower@T2^(0+128),w
 20761  025A  0140               	movlb	0	; select bank0
 20762  025B  00B8               	movwf	___flmul@b
 20763  025C  0141               	movlb	1	; select bank1
 20764  025D  0862               	movf	(_calcRequiredPower$2589+3)^(0+128),w
 20765  025E  0140               	movlb	0	; select bank0
 20766  025F  00BF               	movwf	___flmul@a+3
 20767  0260  0141               	movlb	1	; select bank1
 20768  0261  0861               	movf	(_calcRequiredPower$2589+2)^(0+128),w
 20769  0262  0140               	movlb	0	; select bank0
 20770  0263  00BE               	movwf	___flmul@a+2
 20771  0264  0141               	movlb	1	; select bank1
 20772  0265  0860               	movf	(_calcRequiredPower$2589+1)^(0+128),w
 20773  0266  0140               	movlb	0	; select bank0
 20774  0267  00BD               	movwf	___flmul@a+1
 20775  0268  0141               	movlb	1	; select bank1
 20776  0269  085F               	movf	_calcRequiredPower$2589^(0+128),w
 20777  026A  0140               	movlb	0	; select bank0
 20778  026B  00BC               	movwf	___flmul@a
 20779  026C  3195  25D4  3180   	fcall	___flmul
 20780  026F  0140               	movlb	0	; select bank0
 20781  0270  083B               	movf	?___flmul+3,w
 20782  0271  0141               	movlb	1	; select bank1
 20783  0272  00C2               	movwf	(_calcRequiredPower$2591+3)^(0+128)
 20784  0273  0140               	movlb	0	; select bank0
 20785  0274  083A               	movf	?___flmul+2,w
 20786  0275  0141               	movlb	1	; select bank1
 20787  0276  00C1               	movwf	(_calcRequiredPower$2591+2)^(0+128)
 20788  0277  0140               	movlb	0	; select bank0
 20789  0278  0839               	movf	?___flmul+1,w
 20790  0279  0141               	movlb	1	; select bank1
 20791  027A  00C0               	movwf	(_calcRequiredPower$2591+1)^(0+128)
 20792  027B  0140               	movlb	0	; select bank0
 20793  027C  0838               	movf	?___flmul,w
 20794  027D  0141               	movlb	1	; select bank1
 20795  027E  00BF               	movwf	_calcRequiredPower$2591^(0+128)
 20796                           
 20797                           ;system.c: 308:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20798  027F  0866               	movf	(calcRequiredPower@T1+3)^(0+128),w
 20799  0280  0140               	movlb	0	; select bank0
 20800  0281  00BB               	movwf	___flmul@b+3
 20801  0282  0141               	movlb	1	; select bank1
 20802  0283  0865               	movf	(calcRequiredPower@T1+2)^(0+128),w
 20803  0284  0140               	movlb	0	; select bank0
 20804  0285  00BA               	movwf	___flmul@b+2
 20805  0286  0141               	movlb	1	; select bank1
 20806  0287  0864               	movf	(calcRequiredPower@T1+1)^(0+128),w
 20807  0288  0140               	movlb	0	; select bank0
 20808  0289  00B9               	movwf	___flmul@b+1
 20809  028A  0141               	movlb	1	; select bank1
 20810  028B  0863               	movf	calcRequiredPower@T1^(0+128),w
 20811  028C  0140               	movlb	0	; select bank0
 20812  028D  00B8               	movwf	___flmul@b
 20813  028E  0141               	movlb	1	; select bank1
 20814  028F  0866               	movf	(calcRequiredPower@T1+3)^(0+128),w
 20815  0290  0140               	movlb	0	; select bank0
 20816  0291  00BF               	movwf	___flmul@a+3
 20817  0292  0141               	movlb	1	; select bank1
 20818  0293  0865               	movf	(calcRequiredPower@T1+2)^(0+128),w
 20819  0294  0140               	movlb	0	; select bank0
 20820  0295  00BE               	movwf	___flmul@a+2
 20821  0296  0141               	movlb	1	; select bank1
 20822  0297  0864               	movf	(calcRequiredPower@T1+1)^(0+128),w
 20823  0298  0140               	movlb	0	; select bank0
 20824  0299  00BD               	movwf	___flmul@a+1
 20825  029A  0141               	movlb	1	; select bank1
 20826  029B  0863               	movf	calcRequiredPower@T1^(0+128),w
 20827  029C  0140               	movlb	0	; select bank0
 20828  029D  00BC               	movwf	___flmul@a
 20829  029E  3195  25D4  3180   	fcall	___flmul
 20830  02A1  0140               	movlb	0	; select bank0
 20831  02A2  083B               	movf	?___flmul+3,w
 20832  02A3  0141               	movlb	1	; select bank1
 20833  02A4  00C6               	movwf	(_calcRequiredPower$2592+3)^(0+128)
 20834  02A5  0140               	movlb	0	; select bank0
 20835  02A6  083A               	movf	?___flmul+2,w
 20836  02A7  0141               	movlb	1	; select bank1
 20837  02A8  00C5               	movwf	(_calcRequiredPower$2592+2)^(0+128)
 20838  02A9  0140               	movlb	0	; select bank0
 20839  02AA  0839               	movf	?___flmul+1,w
 20840  02AB  0141               	movlb	1	; select bank1
 20841  02AC  00C4               	movwf	(_calcRequiredPower$2592+1)^(0+128)
 20842  02AD  0140               	movlb	0	; select bank0
 20843  02AE  0838               	movf	?___flmul,w
 20844  02AF  0141               	movlb	1	; select bank1
 20845  02B0  00C3               	movwf	_calcRequiredPower$2592^(0+128)
 20846                           
 20847                           ;system.c: 308:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20848  02B1  0866               	movf	(calcRequiredPower@T1+3)^(0+128),w
 20849  02B2  0140               	movlb	0	; select bank0
 20850  02B3  00BB               	movwf	___flmul@b+3
 20851  02B4  0141               	movlb	1	; select bank1
 20852  02B5  0865               	movf	(calcRequiredPower@T1+2)^(0+128),w
 20853  02B6  0140               	movlb	0	; select bank0
 20854  02B7  00BA               	movwf	___flmul@b+2
 20855  02B8  0141               	movlb	1	; select bank1
 20856  02B9  0864               	movf	(calcRequiredPower@T1+1)^(0+128),w
 20857  02BA  0140               	movlb	0	; select bank0
 20858  02BB  00B9               	movwf	___flmul@b+1
 20859  02BC  0141               	movlb	1	; select bank1
 20860  02BD  0863               	movf	calcRequiredPower@T1^(0+128),w
 20861  02BE  0140               	movlb	0	; select bank0
 20862  02BF  00B8               	movwf	___flmul@b
 20863  02C0  0141               	movlb	1	; select bank1
 20864  02C1  0846               	movf	(_calcRequiredPower$2592+3)^(0+128),w
 20865  02C2  0140               	movlb	0	; select bank0
 20866  02C3  00BF               	movwf	___flmul@a+3
 20867  02C4  0141               	movlb	1	; select bank1
 20868  02C5  0845               	movf	(_calcRequiredPower$2592+2)^(0+128),w
 20869  02C6  0140               	movlb	0	; select bank0
 20870  02C7  00BE               	movwf	___flmul@a+2
 20871  02C8  0141               	movlb	1	; select bank1
 20872  02C9  0844               	movf	(_calcRequiredPower$2592+1)^(0+128),w
 20873  02CA  0140               	movlb	0	; select bank0
 20874  02CB  00BD               	movwf	___flmul@a+1
 20875  02CC  0141               	movlb	1	; select bank1
 20876  02CD  0843               	movf	_calcRequiredPower$2592^(0+128),w
 20877  02CE  0140               	movlb	0	; select bank0
 20878  02CF  00BC               	movwf	___flmul@a
 20879  02D0  3195  25D4  3180   	fcall	___flmul
 20880  02D3  0140               	movlb	0	; select bank0
 20881  02D4  083B               	movf	?___flmul+3,w
 20882  02D5  0141               	movlb	1	; select bank1
 20883  02D6  00CA               	movwf	(_calcRequiredPower$2593+3)^(0+128)
 20884  02D7  0140               	movlb	0	; select bank0
 20885  02D8  083A               	movf	?___flmul+2,w
 20886  02D9  0141               	movlb	1	; select bank1
 20887  02DA  00C9               	movwf	(_calcRequiredPower$2593+2)^(0+128)
 20888  02DB  0140               	movlb	0	; select bank0
 20889  02DC  0839               	movf	?___flmul+1,w
 20890  02DD  0141               	movlb	1	; select bank1
 20891  02DE  00C8               	movwf	(_calcRequiredPower$2593+1)^(0+128)
 20892  02DF  0140               	movlb	0	; select bank0
 20893  02E0  0838               	movf	?___flmul,w
 20894  02E1  0141               	movlb	1	; select bank1
 20895  02E2  00C7               	movwf	_calcRequiredPower$2593^(0+128)
 20896                           
 20897                           ;system.c: 308:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20898  02E3  086A               	movf	(calcRequiredPower@T2+3)^(0+128),w
 20899  02E4  0140               	movlb	0	; select bank0
 20900  02E5  00BB               	movwf	___flmul@b+3
 20901  02E6  0141               	movlb	1	; select bank1
 20902  02E7  0869               	movf	(calcRequiredPower@T2+2)^(0+128),w
 20903  02E8  0140               	movlb	0	; select bank0
 20904  02E9  00BA               	movwf	___flmul@b+2
 20905  02EA  0141               	movlb	1	; select bank1
 20906  02EB  0868               	movf	(calcRequiredPower@T2+1)^(0+128),w
 20907  02EC  0140               	movlb	0	; select bank0
 20908  02ED  00B9               	movwf	___flmul@b+1
 20909  02EE  0141               	movlb	1	; select bank1
 20910  02EF  0867               	movf	calcRequiredPower@T2^(0+128),w
 20911  02F0  0140               	movlb	0	; select bank0
 20912  02F1  00B8               	movwf	___flmul@b
 20913  02F2  0141               	movlb	1	; select bank1
 20914  02F3  0842               	movf	(_calcRequiredPower$2591+3)^(0+128),w
 20915  02F4  0140               	movlb	0	; select bank0
 20916  02F5  00BF               	movwf	___flmul@a+3
 20917  02F6  0141               	movlb	1	; select bank1
 20918  02F7  0841               	movf	(_calcRequiredPower$2591+2)^(0+128),w
 20919  02F8  0140               	movlb	0	; select bank0
 20920  02F9  00BE               	movwf	___flmul@a+2
 20921  02FA  0141               	movlb	1	; select bank1
 20922  02FB  0840               	movf	(_calcRequiredPower$2591+1)^(0+128),w
 20923  02FC  0140               	movlb	0	; select bank0
 20924  02FD  00BD               	movwf	___flmul@a+1
 20925  02FE  0141               	movlb	1	; select bank1
 20926  02FF  083F               	movf	_calcRequiredPower$2591^(0+128),w
 20927  0300  0140               	movlb	0	; select bank0
 20928  0301  00BC               	movwf	___flmul@a
 20929  0302  3195  25D4  3180   	fcall	___flmul
 20930  0305  0140               	movlb	0	; select bank0
 20931  0306  083B               	movf	?___flmul+3,w
 20932  0307  0141               	movlb	1	; select bank1
 20933  0308  00A3               	movwf	(___flsub@a+3)^(0+128)
 20934  0309  0140               	movlb	0	; select bank0
 20935  030A  083A               	movf	?___flmul+2,w
 20936  030B  0141               	movlb	1	; select bank1
 20937  030C  00A2               	movwf	(___flsub@a+2)^(0+128)
 20938  030D  0140               	movlb	0	; select bank0
 20939  030E  0839               	movf	?___flmul+1,w
 20940  030F  0141               	movlb	1	; select bank1
 20941  0310  00A1               	movwf	(___flsub@a+1)^(0+128)
 20942  0311  0140               	movlb	0	; select bank0
 20943  0312  0838               	movf	?___flmul,w
 20944  0313  0141               	movlb	1	; select bank1
 20945  0314  00A0               	movwf	___flsub@a^(0+128)
 20946  0315  0866               	movf	(calcRequiredPower@T1+3)^(0+128),w
 20947  0316  0140               	movlb	0	; select bank0
 20948  0317  00BB               	movwf	___flmul@b+3
 20949  0318  0141               	movlb	1	; select bank1
 20950  0319  0865               	movf	(calcRequiredPower@T1+2)^(0+128),w
 20951  031A  0140               	movlb	0	; select bank0
 20952  031B  00BA               	movwf	___flmul@b+2
 20953  031C  0141               	movlb	1	; select bank1
 20954  031D  0864               	movf	(calcRequiredPower@T1+1)^(0+128),w
 20955  031E  0140               	movlb	0	; select bank0
 20956  031F  00B9               	movwf	___flmul@b+1
 20957  0320  0141               	movlb	1	; select bank1
 20958  0321  0863               	movf	calcRequiredPower@T1^(0+128),w
 20959  0322  0140               	movlb	0	; select bank0
 20960  0323  00B8               	movwf	___flmul@b
 20961  0324  0141               	movlb	1	; select bank1
 20962  0325  084A               	movf	(_calcRequiredPower$2593+3)^(0+128),w
 20963  0326  0140               	movlb	0	; select bank0
 20964  0327  00BF               	movwf	___flmul@a+3
 20965  0328  0141               	movlb	1	; select bank1
 20966  0329  0849               	movf	(_calcRequiredPower$2593+2)^(0+128),w
 20967  032A  0140               	movlb	0	; select bank0
 20968  032B  00BE               	movwf	___flmul@a+2
 20969  032C  0141               	movlb	1	; select bank1
 20970  032D  0848               	movf	(_calcRequiredPower$2593+1)^(0+128),w
 20971  032E  0140               	movlb	0	; select bank0
 20972  032F  00BD               	movwf	___flmul@a+1
 20973  0330  0141               	movlb	1	; select bank1
 20974  0331  0847               	movf	_calcRequiredPower$2593^(0+128),w
 20975  0332  0140               	movlb	0	; select bank0
 20976  0333  00BC               	movwf	___flmul@a
 20977  0334  3195  25D4  3180   	fcall	___flmul
 20978  0337  0140               	movlb	0	; select bank0
 20979  0338  083B               	movf	?___flmul+3,w
 20980  0339  0141               	movlb	1	; select bank1
 20981  033A  00A7               	movwf	(___flsub@b+3)^(0+128)
 20982  033B  0140               	movlb	0	; select bank0
 20983  033C  083A               	movf	?___flmul+2,w
 20984  033D  0141               	movlb	1	; select bank1
 20985  033E  00A6               	movwf	(___flsub@b+2)^(0+128)
 20986  033F  0140               	movlb	0	; select bank0
 20987  0340  0839               	movf	?___flmul+1,w
 20988  0341  0141               	movlb	1	; select bank1
 20989  0342  00A5               	movwf	(___flsub@b+1)^(0+128)
 20990  0343  0140               	movlb	0	; select bank0
 20991  0344  0838               	movf	?___flmul,w
 20992  0345  0141               	movlb	1	; select bank1
 20993  0346  00A4               	movwf	___flsub@b^(0+128)
 20994  0347  31B7  2759  3180   	fcall	___flsub
 20995  034A  0141               	movlb	1	; select bank1
 20996  034B  0823               	movf	(?___flsub+3)^(0+128),w
 20997  034C  00CE               	movwf	(_calcRequiredPower$2594+3)^(0+128)
 20998  034D  0822               	movf	(?___flsub+2)^(0+128),w
 20999  034E  00CD               	movwf	(_calcRequiredPower$2594+2)^(0+128)
 21000  034F  0821               	movf	(?___flsub+1)^(0+128),w
 21001  0350  00CC               	movwf	(_calcRequiredPower$2594+1)^(0+128)
 21002  0351  0820               	movf	?___flsub^(0+128),w
 21003  0352  00CB               	movwf	_calcRequiredPower$2594^(0+128)
 21004                           
 21005                           ;system.c: 308:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21006  0353  3033               	movlw	51
 21007  0354  0140               	movlb	0	; select bank0
 21008  0355  00BB               	movwf	___flmul@b+3
 21009  0356  3067               	movlw	103
 21010  0357  00BA               	movwf	___flmul@b+2
 21011  0358  3059               	movlw	89
 21012  0359  00B9               	movwf	___flmul@b+1
 21013  035A  3032               	movlw	50
 21014  035B  00B8               	movwf	___flmul@b
 21015  035C  0141               	movlb	1	; select bank1
 21016  035D  085E               	movf	(calcRequiredPower@A+3)^(0+128),w
 21017  035E  0140               	movlb	0	; select bank0
 21018  035F  00BF               	movwf	___flmul@a+3
 21019  0360  0141               	movlb	1	; select bank1
 21020  0361  085D               	movf	(calcRequiredPower@A+2)^(0+128),w
 21021  0362  0140               	movlb	0	; select bank0
 21022  0363  00BE               	movwf	___flmul@a+2
 21023  0364  0141               	movlb	1	; select bank1
 21024  0365  085C               	movf	(calcRequiredPower@A+1)^(0+128),w
 21025  0366  0140               	movlb	0	; select bank0
 21026  0367  00BD               	movwf	___flmul@a+1
 21027  0368  0141               	movlb	1	; select bank1
 21028  0369  085B               	movf	calcRequiredPower@A^(0+128),w
 21029  036A  0140               	movlb	0	; select bank0
 21030  036B  00BC               	movwf	___flmul@a
 21031  036C  3195  25D4  3180   	fcall	___flmul
 21032  036F  0140               	movlb	0	; select bank0
 21033  0370  083B               	movf	?___flmul+3,w
 21034  0371  0141               	movlb	1	; select bank1
 21035  0372  00D2               	movwf	(_calcRequiredPower$2595+3)^(0+128)
 21036  0373  0140               	movlb	0	; select bank0
 21037  0374  083A               	movf	?___flmul+2,w
 21038  0375  0141               	movlb	1	; select bank1
 21039  0376  00D1               	movwf	(_calcRequiredPower$2595+2)^(0+128)
 21040  0377  0140               	movlb	0	; select bank0
 21041  0378  0839               	movf	?___flmul+1,w
 21042  0379  0141               	movlb	1	; select bank1
 21043  037A  00D0               	movwf	(_calcRequiredPower$2595+1)^(0+128)
 21044  037B  0140               	movlb	0	; select bank0
 21045  037C  0838               	movf	?___flmul,w
 21046  037D  0141               	movlb	1	; select bank1
 21047  037E  00CF               	movwf	_calcRequiredPower$2595^(0+128)
 21048                           
 21049                           ;system.c: 308:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21050  037F  084E               	movf	(_calcRequiredPower$2594+3)^(0+128),w
 21051  0380  0140               	movlb	0	; select bank0
 21052  0381  00BB               	movwf	___flmul@b+3
 21053  0382  0141               	movlb	1	; select bank1
 21054  0383  084D               	movf	(_calcRequiredPower$2594+2)^(0+128),w
 21055  0384  0140               	movlb	0	; select bank0
 21056  0385  00BA               	movwf	___flmul@b+2
 21057  0386  0141               	movlb	1	; select bank1
 21058  0387  084C               	movf	(_calcRequiredPower$2594+1)^(0+128),w
 21059  0388  0140               	movlb	0	; select bank0
 21060  0389  00B9               	movwf	___flmul@b+1
 21061  038A  0141               	movlb	1	; select bank1
 21062  038B  084B               	movf	_calcRequiredPower$2594^(0+128),w
 21063  038C  0140               	movlb	0	; select bank0
 21064  038D  00B8               	movwf	___flmul@b
 21065  038E  0141               	movlb	1	; select bank1
 21066  038F  0852               	movf	(_calcRequiredPower$2595+3)^(0+128),w
 21067  0390  0140               	movlb	0	; select bank0
 21068  0391  00BF               	movwf	___flmul@a+3
 21069  0392  0141               	movlb	1	; select bank1
 21070  0393  0851               	movf	(_calcRequiredPower$2595+2)^(0+128),w
 21071  0394  0140               	movlb	0	; select bank0
 21072  0395  00BE               	movwf	___flmul@a+2
 21073  0396  0141               	movlb	1	; select bank1
 21074  0397  0850               	movf	(_calcRequiredPower$2595+1)^(0+128),w
 21075  0398  0140               	movlb	0	; select bank0
 21076  0399  00BD               	movwf	___flmul@a+1
 21077  039A  0141               	movlb	1	; select bank1
 21078  039B  084F               	movf	_calcRequiredPower$2595^(0+128),w
 21079  039C  0140               	movlb	0	; select bank0
 21080  039D  00BC               	movwf	___flmul@a
 21081  039E  3195  25D4  3180   	fcall	___flmul
 21082  03A1  0140               	movlb	0	; select bank0
 21083  03A2  083B               	movf	?___flmul+3,w
 21084  03A3  0141               	movlb	1	; select bank1
 21085  03A4  00DA               	movwf	(calcRequiredPower@phi+3)^(0+128)
 21086  03A5  0140               	movlb	0	; select bank0
 21087  03A6  083A               	movf	?___flmul+2,w
 21088  03A7  0141               	movlb	1	; select bank1
 21089  03A8  00D9               	movwf	(calcRequiredPower@phi+2)^(0+128)
 21090  03A9  0140               	movlb	0	; select bank0
 21091  03AA  0839               	movf	?___flmul+1,w
 21092  03AB  0141               	movlb	1	; select bank1
 21093  03AC  00D8               	movwf	(calcRequiredPower@phi+1)^(0+128)
 21094  03AD  0140               	movlb	0	; select bank0
 21095  03AE  0838               	movf	?___flmul,w
 21096  03AF  0141               	movlb	1	; select bank1
 21097  03B0  00D7               	movwf	calcRequiredPower@phi^(0+128)
 21098                           
 21099                           ;system.c: 310:   data->chData[n].Preq = phi * data->fudgeFactor;
 21100  03B1  085A               	movf	(calcRequiredPower@phi+3)^(0+128),w
 21101  03B2  0140               	movlb	0	; select bank0
 21102  03B3  00BB               	movwf	___flmul@b+3
 21103  03B4  0141               	movlb	1	; select bank1
 21104  03B5  0859               	movf	(calcRequiredPower@phi+2)^(0+128),w
 21105  03B6  0140               	movlb	0	; select bank0
 21106  03B7  00BA               	movwf	___flmul@b+2
 21107  03B8  0141               	movlb	1	; select bank1
 21108  03B9  0858               	movf	(calcRequiredPower@phi+1)^(0+128),w
 21109  03BA  0140               	movlb	0	; select bank0
 21110  03BB  00B9               	movwf	___flmul@b+1
 21111  03BC  0141               	movlb	1	; select bank1
 21112  03BD  0857               	movf	calcRequiredPower@phi^(0+128),w
 21113  03BE  0140               	movlb	0	; select bank0
 21114  03BF  00B8               	movwf	___flmul@b
 21115  03C0  0141               	movlb	1	; select bank1
 21116  03C1  082D               	movf	calcRequiredPower@data^(0+128),w
 21117  03C2  3E25               	addlw	37
 21118  03C3  0086               	movwf	6
 21119  03C4  3000               	movlw	0
 21120  03C5  3D2E               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21121  03C6  0087               	movwf	7
 21122  03C7  3F40               	moviw [0]fsr1
 21123  03C8  0140               	movlb	0	; select bank0
 21124  03C9  00BC               	movwf	___flmul@a
 21125  03CA  3F41               	moviw [1]fsr1
 21126  03CB  00BD               	movwf	___flmul@a+1
 21127  03CC  3F42               	moviw [2]fsr1
 21128  03CD  00BE               	movwf	___flmul@a+2
 21129  03CE  3F43               	moviw [3]fsr1
 21130  03CF  00BF               	movwf	___flmul@a+3
 21131  03D0  3195  25D4  3180   	fcall	___flmul
 21132  03D3  0141               	movlb	1	; select bank1
 21133  03D4  086B               	movf	calcRequiredPower@n^(0+128),w
 21134  03D5  00AF               	movwf	??_calcRequiredPower^(0+128)
 21135  03D6  01B0               	clrf	(??_calcRequiredPower^(0+128)+1)
 21136  03D7  3005               	movlw	5
 21137  03D8                     u10545:	
 21138  03D8  35AF               	lslf	??_calcRequiredPower^(0+128),f
 21139  03D9  0DB0               	rlf	(??_calcRequiredPower^(0+128)+1),f
 21140  03DA  0B89               	decfsz	9,f
 21141  03DB  2BD8               	goto	u10545
 21142  03DC  082F               	movf	??_calcRequiredPower^(0+128),w
 21143  03DD  072D               	addwf	calcRequiredPower@data^(0+128),w
 21144  03DE  00B1               	movwf	(??_calcRequiredPower+2)^(0+128)
 21145  03DF  0830               	movf	(??_calcRequiredPower+1)^(0+128),w
 21146  03E0  3D2E               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21147  03E1  00B2               	movwf	(??_calcRequiredPower+3)^(0+128)
 21148  03E2  0831               	movf	(??_calcRequiredPower+2)^(0+128),w
 21149  03E3  3E32               	addlw	50
 21150  03E4  0086               	movwf	6
 21151  03E5  3000               	movlw	0
 21152  03E6  3D32               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21153  03E7  0087               	movwf	7
 21154  03E8  0140               	movlb	0	; select bank0
 21155  03E9  0838               	movf	?___flmul,w
 21156  03EA  3FC0               	movwi [0]fsr1
 21157  03EB  0839               	movf	?___flmul+1,w
 21158  03EC  3FC1               	movwi [1]fsr1
 21159  03ED  083A               	movf	?___flmul+2,w
 21160  03EE  3FC2               	movwi [2]fsr1
 21161  03EF  083B               	movf	?___flmul+3,w
 21162  03F0  3FC3               	movwi [3]fsr1
 21163                           
 21164                           ;system.c: 313:   p = 2 * 3.14 * 0.0254 * data->chData[n].lensDia;
 21165  03F1  303E               	movlw	62
 21166  03F2  00BB               	movwf	___flmul@b+3
 21167  03F3  3023               	movlw	35
 21168  03F4  00BA               	movwf	___flmul@b+2
 21169  03F5  3057               	movlw	87
 21170  03F6  00B9               	movwf	___flmul@b+1
 21171  03F7  301D               	movlw	29
 21172  03F8  00B8               	movwf	___flmul@b
 21173  03F9  0141               	movlb	1	; select bank1
 21174  03FA  086B               	movf	calcRequiredPower@n^(0+128),w
 21175  03FB  00AF               	movwf	??_calcRequiredPower^(0+128)
 21176  03FC  01B0               	clrf	(??_calcRequiredPower^(0+128)+1)
 21177  03FD  3005               	movlw	5
 21178  03FE                     u10555:	
 21179  03FE  35AF               	lslf	??_calcRequiredPower^(0+128),f
 21180  03FF  0DB0               	rlf	(??_calcRequiredPower^(0+128)+1),f
 21181  0400  0B89               	decfsz	9,f
 21182  0401  2BFE               	goto	u10555
 21183  0402  082F               	movf	??_calcRequiredPower^(0+128),w
 21184  0403  072D               	addwf	calcRequiredPower@data^(0+128),w
 21185  0404  00B1               	movwf	(??_calcRequiredPower+2)^(0+128)
 21186  0405  0830               	movf	(??_calcRequiredPower+1)^(0+128),w
 21187  0406  3D2E               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21188  0407  00B2               	movwf	(??_calcRequiredPower+3)^(0+128)
 21189  0408  0831               	movf	(??_calcRequiredPower+2)^(0+128),w
 21190  0409  3E40               	addlw	64
 21191  040A  0086               	movwf	6
 21192  040B  3000               	movlw	0
 21193  040C  3D32               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21194  040D  0087               	movwf	7
 21195  040E  3F40               	moviw [0]fsr1
 21196  040F  0140               	movlb	0	; select bank0
 21197  0410  00BC               	movwf	___flmul@a
 21198  0411  3F41               	moviw [1]fsr1
 21199  0412  00BD               	movwf	___flmul@a+1
 21200  0413  3F42               	moviw [2]fsr1
 21201  0414  00BE               	movwf	___flmul@a+2
 21202  0415  3F43               	moviw [3]fsr1
 21203  0416  00BF               	movwf	___flmul@a+3
 21204  0417  3195  25D4  3180   	fcall	___flmul
 21205  041A  0140               	movlb	0	; select bank0
 21206  041B  083B               	movf	?___flmul+3,w
 21207  041C  0141               	movlb	1	; select bank1
 21208  041D  00B6               	movwf	(calcRequiredPower@p+3)^(0+128)
 21209  041E  0140               	movlb	0	; select bank0
 21210  041F  083A               	movf	?___flmul+2,w
 21211  0420  0141               	movlb	1	; select bank1
 21212  0421  00B5               	movwf	(calcRequiredPower@p+2)^(0+128)
 21213  0422  0140               	movlb	0	; select bank0
 21214  0423  0839               	movf	?___flmul+1,w
 21215  0424  0141               	movlb	1	; select bank1
 21216  0425  00B4               	movwf	(calcRequiredPower@p+1)^(0+128)
 21217  0426  0140               	movlb	0	; select bank0
 21218  0427  0838               	movf	?___flmul,w
 21219  0428  0141               	movlb	1	; select bank1
 21220  0429  00B3               	movwf	calcRequiredPower@p^(0+128)
 21221                           
 21222                           ;system.c: 314:   A = p * 0.03;
 21223  042A  303C               	movlw	60
 21224  042B  0140               	movlb	0	; select bank0
 21225  042C  00BB               	movwf	___flmul@b+3
 21226  042D  30F5               	movlw	245
 21227  042E  00BA               	movwf	___flmul@b+2
 21228  042F  30C2               	movlw	194
 21229  0430  00B9               	movwf	___flmul@b+1
 21230  0431  308F               	movlw	143
 21231  0432  00B8               	movwf	___flmul@b
 21232  0433  0141               	movlb	1	; select bank1
 21233  0434  0836               	movf	(calcRequiredPower@p+3)^(0+128),w
 21234  0435  0140               	movlb	0	; select bank0
 21235  0436  00BF               	movwf	___flmul@a+3
 21236  0437  0141               	movlb	1	; select bank1
 21237  0438  0835               	movf	(calcRequiredPower@p+2)^(0+128),w
 21238  0439  0140               	movlb	0	; select bank0
 21239  043A  00BE               	movwf	___flmul@a+2
 21240  043B  0141               	movlb	1	; select bank1
 21241  043C  0834               	movf	(calcRequiredPower@p+1)^(0+128),w
 21242  043D  0140               	movlb	0	; select bank0
 21243  043E  00BD               	movwf	___flmul@a+1
 21244  043F  0141               	movlb	1	; select bank1
 21245  0440  0833               	movf	calcRequiredPower@p^(0+128),w
 21246  0441  0140               	movlb	0	; select bank0
 21247  0442  00BC               	movwf	___flmul@a
 21248  0443  3195  25D4  3180   	fcall	___flmul
 21249  0446  0140               	movlb	0	; select bank0
 21250  0447  083B               	movf	?___flmul+3,w
 21251  0448  0141               	movlb	1	; select bank1
 21252  0449  00DE               	movwf	(calcRequiredPower@A+3)^(0+128)
 21253  044A  0140               	movlb	0	; select bank0
 21254  044B  083A               	movf	?___flmul+2,w
 21255  044C  0141               	movlb	1	; select bank1
 21256  044D  00DD               	movwf	(calcRequiredPower@A+2)^(0+128)
 21257  044E  0140               	movlb	0	; select bank0
 21258  044F  0839               	movf	?___flmul+1,w
 21259  0450  0141               	movlb	1	; select bank1
 21260  0451  00DC               	movwf	(calcRequiredPower@A+1)^(0+128)
 21261  0452  0140               	movlb	0	; select bank0
 21262  0453  0838               	movf	?___flmul,w
 21263  0454  0141               	movlb	1	; select bank1
 21264  0455  00DB               	movwf	calcRequiredPower@A^(0+128)
 21265                           
 21266                           ;system.c: 316:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 21267  0456  303F               	movlw	63
 21268  0457  0140               	movlb	0	; select bank0
 21269  0458  00BB               	movwf	___flmul@b+3
 21270  0459  3059               	movlw	89
 21271  045A  00BA               	movwf	___flmul@b+2
 21272  045B  3099               	movlw	153
 21273  045C  00B9               	movwf	___flmul@b+1
 21274  045D  309A               	movlw	154
 21275  045E  00B8               	movwf	___flmul@b
 21276  045F  3040               	movlw	64
 21277  0460  00D5               	movwf	___fldiv@a+3
 21278  0461  3000               	movlw	0
 21279  0462  00D4               	movwf	___fldiv@a+2
 21280  0463  3000               	movlw	0
 21281  0464  00D3               	movwf	___fldiv@a+1
 21282  0465  3000               	movlw	0
 21283  0466  00D2               	movwf	___fldiv@a
 21284  0467  0141               	movlb	1	; select bank1
 21285  0468  086B               	movf	calcRequiredPower@n^(0+128),w
 21286  0469  00AF               	movwf	??_calcRequiredPower^(0+128)
 21287  046A  01B0               	clrf	(??_calcRequiredPower^(0+128)+1)
 21288  046B  3005               	movlw	5
 21289  046C                     u10565:	
 21290  046C  35AF               	lslf	??_calcRequiredPower^(0+128),f
 21291  046D  0DB0               	rlf	(??_calcRequiredPower^(0+128)+1),f
 21292  046E  0B89               	decfsz	9,f
 21293  046F  2C6C               	goto	u10565
 21294  0470  082F               	movf	??_calcRequiredPower^(0+128),w
 21295  0471  072D               	addwf	calcRequiredPower@data^(0+128),w
 21296  0472  00B1               	movwf	(??_calcRequiredPower+2)^(0+128)
 21297  0473  0830               	movf	(??_calcRequiredPower+1)^(0+128),w
 21298  0474  3D2E               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21299  0475  00B2               	movwf	(??_calcRequiredPower+3)^(0+128)
 21300  0476  0831               	movf	(??_calcRequiredPower+2)^(0+128),w
 21301  0477  3E40               	addlw	64
 21302  0478  0086               	movwf	6
 21303  0479  3000               	movlw	0
 21304  047A  3D32               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21305  047B  0087               	movwf	7
 21306  047C  3F40               	moviw [0]fsr1
 21307  047D  0140               	movlb	0	; select bank0
 21308  047E  00D6               	movwf	___fldiv@b
 21309  047F  3F41               	moviw [1]fsr1
 21310  0480  00D7               	movwf	___fldiv@b+1
 21311  0481  3F42               	moviw [2]fsr1
 21312  0482  00D8               	movwf	___fldiv@b+2
 21313  0483  3F43               	moviw [3]fsr1
 21314  0484  00D9               	movwf	___fldiv@b+3
 21315  0485  319E  2628  3180   	fcall	___fldiv
 21316  0488  0140               	movlb	0	; select bank0
 21317  0489  0855               	movf	?___fldiv+3,w
 21318  048A  00BF               	movwf	___flmul@a+3
 21319  048B  0854               	movf	?___fldiv+2,w
 21320  048C  00BE               	movwf	___flmul@a+2
 21321  048D  0853               	movf	?___fldiv+1,w
 21322  048E  00BD               	movwf	___flmul@a+1
 21323  048F  0852               	movf	?___fldiv,w
 21324  0490  00BC               	movwf	___flmul@a
 21325  0491  3195  25D4  3180   	fcall	___flmul
 21326  0494  0140               	movlb	0	; select bank0
 21327  0495  083B               	movf	?___flmul+3,w
 21328  0496  0141               	movlb	1	; select bank1
 21329  0497  00E2               	movwf	(_calcRequiredPower$2589+3)^(0+128)
 21330  0498  0140               	movlb	0	; select bank0
 21331  0499  083A               	movf	?___flmul+2,w
 21332  049A  0141               	movlb	1	; select bank1
 21333  049B  00E1               	movwf	(_calcRequiredPower$2589+2)^(0+128)
 21334  049C  0140               	movlb	0	; select bank0
 21335  049D  0839               	movf	?___flmul+1,w
 21336  049E  0141               	movlb	1	; select bank1
 21337  049F  00E0               	movwf	(_calcRequiredPower$2589+1)^(0+128)
 21338  04A0  0140               	movlb	0	; select bank0
 21339  04A1  0838               	movf	?___flmul,w
 21340  04A2  0141               	movlb	1	; select bank1
 21341  04A3  00DF               	movwf	_calcRequiredPower$2589^(0+128)
 21342                           
 21343                           ;system.c: 316:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 21344  04A4  085E               	movf	(calcRequiredPower@A+3)^(0+128),w
 21345  04A5  0140               	movlb	0	; select bank0
 21346  04A6  00BB               	movwf	___flmul@b+3
 21347  04A7  0141               	movlb	1	; select bank1
 21348  04A8  085D               	movf	(calcRequiredPower@A+2)^(0+128),w
 21349  04A9  0140               	movlb	0	; select bank0
 21350  04AA  00BA               	movwf	___flmul@b+2
 21351  04AB  0141               	movlb	1	; select bank1
 21352  04AC  085C               	movf	(calcRequiredPower@A+1)^(0+128),w
 21353  04AD  0140               	movlb	0	; select bank0
 21354  04AE  00B9               	movwf	___flmul@b+1
 21355  04AF  0141               	movlb	1	; select bank1
 21356  04B0  085B               	movf	calcRequiredPower@A^(0+128),w
 21357  04B1  0140               	movlb	0	; select bank0
 21358  04B2  00B8               	movwf	___flmul@b
 21359  04B3  0141               	movlb	1	; select bank1
 21360  04B4  0862               	movf	(_calcRequiredPower$2589+3)^(0+128),w
 21361  04B5  0140               	movlb	0	; select bank0
 21362  04B6  00BF               	movwf	___flmul@a+3
 21363  04B7  0141               	movlb	1	; select bank1
 21364  04B8  0861               	movf	(_calcRequiredPower$2589+2)^(0+128),w
 21365  04B9  0140               	movlb	0	; select bank0
 21366  04BA  00BE               	movwf	___flmul@a+2
 21367  04BB  0141               	movlb	1	; select bank1
 21368  04BC  0860               	movf	(_calcRequiredPower$2589+1)^(0+128),w
 21369  04BD  0140               	movlb	0	; select bank0
 21370  04BE  00BD               	movwf	___flmul@a+1
 21371  04BF  0141               	movlb	1	; select bank1
 21372  04C0  085F               	movf	_calcRequiredPower$2589^(0+128),w
 21373  04C1  0140               	movlb	0	; select bank0
 21374  04C2  00BC               	movwf	___flmul@a
 21375  04C3  3195  25D4  3180   	fcall	___flmul
 21376  04C6  0140               	movlb	0	; select bank0
 21377  04C7  083B               	movf	?___flmul+3,w
 21378  04C8  0141               	movlb	1	; select bank1
 21379  04C9  00BA               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 21380  04CA  0140               	movlb	0	; select bank0
 21381  04CB  083A               	movf	?___flmul+2,w
 21382  04CC  0141               	movlb	1	; select bank1
 21383  04CD  00B9               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 21384  04CE  0140               	movlb	0	; select bank0
 21385  04CF  0839               	movf	?___flmul+1,w
 21386  04D0  0141               	movlb	1	; select bank1
 21387  04D1  00B8               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 21388  04D2  0140               	movlb	0	; select bank0
 21389  04D3  0838               	movf	?___flmul,w
 21390  04D4  0141               	movlb	1	; select bank1
 21391  04D5  00B7               	movwf	calcRequiredPower@Rth^(0+128)
 21392                           
 21393                           ;system.c: 318:   data->chData[n].dt = phi * Rth - data->dewPointC;
 21394  04D6  082D               	movf	calcRequiredPower@data^(0+128),w
 21395  04D7  0086               	movwf	6
 21396  04D8  082E               	movf	(calcRequiredPower@data+1)^(0+128),w
 21397  04D9  0087               	movwf	7
 21398  04DA  3148               	addfsr 1,8
 21399  04DB  3F40               	moviw [0]fsr1
 21400  04DC  00A0               	movwf	___flsub@a^(0+128)
 21401  04DD  3F41               	moviw [1]fsr1
 21402  04DE  00A1               	movwf	(___flsub@a+1)^(0+128)
 21403  04DF  3F42               	moviw [2]fsr1
 21404  04E0  00A2               	movwf	(___flsub@a+2)^(0+128)
 21405  04E1  3F43               	moviw [3]fsr1
 21406  04E2  00A3               	movwf	(___flsub@a+3)^(0+128)
 21407  04E3  083A               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 21408  04E4  0140               	movlb	0	; select bank0
 21409  04E5  00BB               	movwf	___flmul@b+3
 21410  04E6  0141               	movlb	1	; select bank1
 21411  04E7  0839               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 21412  04E8  0140               	movlb	0	; select bank0
 21413  04E9  00BA               	movwf	___flmul@b+2
 21414  04EA  0141               	movlb	1	; select bank1
 21415  04EB  0838               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 21416  04EC  0140               	movlb	0	; select bank0
 21417  04ED  00B9               	movwf	___flmul@b+1
 21418  04EE  0141               	movlb	1	; select bank1
 21419  04EF  0837               	movf	calcRequiredPower@Rth^(0+128),w
 21420  04F0  0140               	movlb	0	; select bank0
 21421  04F1  00B8               	movwf	___flmul@b
 21422  04F2  0141               	movlb	1	; select bank1
 21423  04F3  085A               	movf	(calcRequiredPower@phi+3)^(0+128),w
 21424  04F4  0140               	movlb	0	; select bank0
 21425  04F5  00BF               	movwf	___flmul@a+3
 21426  04F6  0141               	movlb	1	; select bank1
 21427  04F7  0859               	movf	(calcRequiredPower@phi+2)^(0+128),w
 21428  04F8  0140               	movlb	0	; select bank0
 21429  04F9  00BE               	movwf	___flmul@a+2
 21430  04FA  0141               	movlb	1	; select bank1
 21431  04FB  0858               	movf	(calcRequiredPower@phi+1)^(0+128),w
 21432  04FC  0140               	movlb	0	; select bank0
 21433  04FD  00BD               	movwf	___flmul@a+1
 21434  04FE  0141               	movlb	1	; select bank1
 21435  04FF  0857               	movf	calcRequiredPower@phi^(0+128),w
 21436  0500  0140               	movlb	0	; select bank0
 21437  0501  00BC               	movwf	___flmul@a
 21438  0502  3195  25D4  3180   	fcall	___flmul
 21439  0505  0140               	movlb	0	; select bank0
 21440  0506  083B               	movf	?___flmul+3,w
 21441  0507  0141               	movlb	1	; select bank1
 21442  0508  00A7               	movwf	(___flsub@b+3)^(0+128)
 21443  0509  0140               	movlb	0	; select bank0
 21444  050A  083A               	movf	?___flmul+2,w
 21445  050B  0141               	movlb	1	; select bank1
 21446  050C  00A6               	movwf	(___flsub@b+2)^(0+128)
 21447  050D  0140               	movlb	0	; select bank0
 21448  050E  0839               	movf	?___flmul+1,w
 21449  050F  0141               	movlb	1	; select bank1
 21450  0510  00A5               	movwf	(___flsub@b+1)^(0+128)
 21451  0511  0140               	movlb	0	; select bank0
 21452  0512  0838               	movf	?___flmul,w
 21453  0513  0141               	movlb	1	; select bank1
 21454  0514  00A4               	movwf	___flsub@b^(0+128)
 21455  0515  31B7  2759  3180   	fcall	___flsub
 21456  0518  0141               	movlb	1	; select bank1
 21457  0519  086B               	movf	calcRequiredPower@n^(0+128),w
 21458  051A  00AF               	movwf	??_calcRequiredPower^(0+128)
 21459  051B  01B0               	clrf	(??_calcRequiredPower^(0+128)+1)
 21460  051C  3005               	movlw	5
 21461  051D                     u10575:	
 21462  051D  35AF               	lslf	??_calcRequiredPower^(0+128),f
 21463  051E  0DB0               	rlf	(??_calcRequiredPower^(0+128)+1),f
 21464  051F  0B89               	decfsz	9,f
 21465  0520  2D1D               	goto	u10575
 21466  0521  082F               	movf	??_calcRequiredPower^(0+128),w
 21467  0522  072D               	addwf	calcRequiredPower@data^(0+128),w
 21468  0523  00B1               	movwf	(??_calcRequiredPower+2)^(0+128)
 21469  0524  0830               	movf	(??_calcRequiredPower+1)^(0+128),w
 21470  0525  3D2E               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21471  0526  00B2               	movwf	(??_calcRequiredPower+3)^(0+128)
 21472  0527  0831               	movf	(??_calcRequiredPower+2)^(0+128),w
 21473  0528  3E44               	addlw	68
 21474  0529  0086               	movwf	6
 21475  052A  3000               	movlw	0
 21476  052B  3D32               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21477  052C  0087               	movwf	7
 21478  052D  0820               	movf	?___flsub^(0+128),w
 21479  052E  3FC0               	movwi [0]fsr1
 21480  052F  0821               	movf	(?___flsub+1)^(0+128),w
 21481  0530  3FC1               	movwi [1]fsr1
 21482  0531  0822               	movf	(?___flsub+2)^(0+128),w
 21483  0532  3FC2               	movwi [2]fsr1
 21484  0533  0823               	movf	(?___flsub+3)^(0+128),w
 21485  0534  3FC3               	movwi [3]fsr1
 21486                           
 21487                           ;system.c: 319:  }
 21488  0535  3001               	movlw	1
 21489  0536  00AF               	movwf	??_calcRequiredPower^(0+128)
 21490  0537  082F               	movf	??_calcRequiredPower^(0+128),w
 21491  0538  07EB               	addwf	calcRequiredPower@n^(0+128),f
 21492  0539  3004               	movlw	4
 21493  053A  026B               	subwf	calcRequiredPower@n^(0+128),w
 21494  053B  1803               	btfsc	3,0
 21495  053C  0008               	return
 21496  053D  28E5               	goto	l7915
 21497  053E                     __end_of_calcRequiredPower:	
 21498                           
 21499                           	psect	text64
 21500  3759                     __ptext64:	
 21501 ;; *************** function ___flsub *****************
 21502 ;; Defined at:
 21503 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 21504 ;; Parameters:    Size  Location     Type
 21505 ;;  a               4    0[BANK1 ] void 
 21506 ;;  b               4    4[BANK1 ] void 
 21507 ;; Auto vars:     Size  Location     Type
 21508 ;;		None
 21509 ;; Return value:  Size  Location     Type
 21510 ;;                  4    0[BANK1 ] void 
 21511 ;; Registers used:
 21512 ;;		wreg, status,2, status,0, pclath, cstack
 21513 ;; Tracked objects:
 21514 ;;		On entry : 0/0
 21515 ;;		On exit  : 0/0
 21516 ;;		Unchanged: 0/0
 21517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21518 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21521 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21522 ;;Total ram usage:        8 bytes
 21523 ;; Hardware stack levels used:    1
 21524 ;; Hardware stack levels required when called:    4
 21525 ;; This function calls:
 21526 ;;		___fladd
 21527 ;; This function is called by:
 21528 ;;		_spinInput
 21529 ;;		_calcRequiredPower
 21530 ;;		_sortCur
 21531 ;;		_ftoa
 21532 ;; This function uses a non-reentrant model
 21533 ;;
 21534                           
 21535                           
 21536                           ;psect for function ___flsub
 21537  3759                     ___flsub:	
 21538                           
 21539                           ;incstack = 0
 21540                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 21541  3759  3080               	movlw	128
 21542  375A  0141               	movlb	1	; select bank1
 21543  375B  06A3               	xorwf	(___flsub@a+3)^(0+128),f
 21544  375C  0827               	movf	(___flsub@b+3)^(0+128),w
 21545  375D  0140               	movlb	0	; select bank0
 21546  375E  00D5               	movwf	___fladd@b+3
 21547  375F  0141               	movlb	1	; select bank1
 21548  3760  0826               	movf	(___flsub@b+2)^(0+128),w
 21549  3761  0140               	movlb	0	; select bank0
 21550  3762  00D4               	movwf	___fladd@b+2
 21551  3763  0141               	movlb	1	; select bank1
 21552  3764  0825               	movf	(___flsub@b+1)^(0+128),w
 21553  3765  0140               	movlb	0	; select bank0
 21554  3766  00D3               	movwf	___fladd@b+1
 21555  3767  0141               	movlb	1	; select bank1
 21556  3768  0824               	movf	___flsub@b^(0+128),w
 21557  3769  0140               	movlb	0	; select bank0
 21558  376A  00D2               	movwf	___fladd@b
 21559  376B  0141               	movlb	1	; select bank1
 21560  376C  0823               	movf	(___flsub@a+3)^(0+128),w
 21561  376D  0140               	movlb	0	; select bank0
 21562  376E  00D9               	movwf	___fladd@a+3
 21563  376F  0141               	movlb	1	; select bank1
 21564  3770  0822               	movf	(___flsub@a+2)^(0+128),w
 21565  3771  0140               	movlb	0	; select bank0
 21566  3772  00D8               	movwf	___fladd@a+2
 21567  3773  0141               	movlb	1	; select bank1
 21568  3774  0821               	movf	(___flsub@a+1)^(0+128),w
 21569  3775  0140               	movlb	0	; select bank0
 21570  3776  00D7               	movwf	___fladd@a+1
 21571  3777  0141               	movlb	1	; select bank1
 21572  3778  0820               	movf	___flsub@a^(0+128),w
 21573  3779  0140               	movlb	0	; select bank0
 21574  377A  00D6               	movwf	___fladd@a
 21575  377B  3192  220E         	fcall	___fladd
 21576  377D  0140               	movlb	0	; select bank0
 21577  377E  0855               	movf	?___fladd+3,w
 21578  377F  0141               	movlb	1	; select bank1
 21579  3780  00A3               	movwf	(?___flsub+3)^(0+128)
 21580  3781  0140               	movlb	0	; select bank0
 21581  3782  0854               	movf	?___fladd+2,w
 21582  3783  0141               	movlb	1	; select bank1
 21583  3784  00A2               	movwf	(?___flsub+2)^(0+128)
 21584  3785  0140               	movlb	0	; select bank0
 21585  3786  0853               	movf	?___fladd+1,w
 21586  3787  0141               	movlb	1	; select bank1
 21587  3788  00A1               	movwf	(?___flsub+1)^(0+128)
 21588  3789  0140               	movlb	0	; select bank0
 21589  378A  0852               	movf	?___fladd,w
 21590  378B  0141               	movlb	1	; select bank1
 21591  378C  00A0               	movwf	?___flsub^(0+128)
 21592  378D  0008               	return
 21593  378E                     __end_of___flsub:	
 21594                           
 21595                           	psect	text65
 21596  120E                     __ptext65:	
 21597 ;; *************** function ___fladd *****************
 21598 ;; Defined at:
 21599 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 21600 ;; Parameters:    Size  Location     Type
 21601 ;;  b               4   50[BANK0 ] void 
 21602 ;;  a               4   54[BANK0 ] void 
 21603 ;; Auto vars:     Size  Location     Type
 21604 ;;  grs             1   69[BANK0 ] unsigned char 
 21605 ;;  bexp            1   68[BANK0 ] unsigned char 
 21606 ;;  aexp            1   67[BANK0 ] unsigned char 
 21607 ;;  signs           1   66[BANK0 ] unsigned char 
 21608 ;; Return value:  Size  Location     Type
 21609 ;;                  4   50[BANK0 ] unsigned char 
 21610 ;; Registers used:
 21611 ;;		wreg, status,2, status,0
 21612 ;; Tracked objects:
 21613 ;;		On entry : 0/0
 21614 ;;		On exit  : 0/0
 21615 ;;		Unchanged: 0/0
 21616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21617 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21618 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21619 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21620 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21621 ;;Total ram usage:       20 bytes
 21622 ;; Hardware stack levels used:    1
 21623 ;; Hardware stack levels required when called:    3
 21624 ;; This function calls:
 21625 ;;		Nothing
 21626 ;; This function is called by:
 21627 ;;		_spinInput
 21628 ;;		_calcRequiredPower
 21629 ;;		_getAnalogValues
 21630 ;;		_channelThing
 21631 ;;		___flsub
 21632 ;; This function uses a non-reentrant model
 21633 ;;
 21634                           
 21635                           
 21636                           ;psect for function ___fladd
 21637  120E                     ___fladd:	
 21638                           
 21639                           ;incstack = 0
 21640                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 21641  120E  0140               	movlb	0	; select bank0
 21642  120F  0855               	movf	___fladd@b+3,w
 21643  1210  3980               	andlw	128
 21644  1211  00DA               	movwf	??___fladd
 21645  1212  085A               	movf	??___fladd,w
 21646  1213  00E2               	movwf	___fladd@signs
 21647  1214  3555               	lslf	___fladd@b+3,w
 21648  1215  00DA               	movwf	??___fladd
 21649  1216  085A               	movf	??___fladd,w
 21650  1217  00E4               	movwf	___fladd@bexp
 21651  1218  1BD4               	btfsc	___fladd@b+2,7
 21652  1219  1464               	bsf	___fladd@bexp,0
 21653  121A  0864               	movf	___fladd@bexp,w
 21654  121B  1903               	btfsc	3,2
 21655  121C  2A2B               	goto	l6439
 21656  121D  0A64               	incf	___fladd@bexp,w
 21657  121E  1D03               	btfss	3,2
 21658  121F  2A28               	goto	l6435
 21659  1220  3000               	movlw	0
 21660  1221  00D5               	movwf	___fladd@b+3
 21661  1222  3000               	movlw	0
 21662  1223  00D4               	movwf	___fladd@b+2
 21663  1224  3000               	movlw	0
 21664  1225  00D3               	movwf	___fladd@b+1
 21665  1226  3000               	movlw	0
 21666  1227  00D2               	movwf	___fladd@b
 21667  1228                     l6435:	
 21668  1228  17D4               	bsf	___fladd@b+2,7
 21669  1229  01D5               	clrf	___fladd@b+3
 21670  122A  2A33               	goto	l6441
 21671  122B                     l6439:	
 21672  122B  3000               	movlw	0
 21673  122C  00D5               	movwf	___fladd@b+3
 21674  122D  3000               	movlw	0
 21675  122E  00D4               	movwf	___fladd@b+2
 21676  122F  3000               	movlw	0
 21677  1230  00D3               	movwf	___fladd@b+1
 21678  1231  3000               	movlw	0
 21679  1232  00D2               	movwf	___fladd@b
 21680  1233                     l6441:	
 21681  1233  0859               	movf	___fladd@a+3,w
 21682  1234  3980               	andlw	128
 21683  1235  00DA               	movwf	??___fladd
 21684  1236  085A               	movf	??___fladd,w
 21685  1237  00E3               	movwf	___fladd@aexp
 21686  1238  0863               	movf	___fladd@aexp,w
 21687  1239  0662               	xorwf	___fladd@signs,w
 21688  123A  1D03               	btfss	3,2
 21689  123B  1762               	bsf	___fladd@signs,6
 21690  123C  3559               	lslf	___fladd@a+3,w
 21691  123D  00DA               	movwf	??___fladd
 21692  123E  085A               	movf	??___fladd,w
 21693  123F  00E3               	movwf	___fladd@aexp
 21694  1240  1BD8               	btfsc	___fladd@a+2,7
 21695  1241  1463               	bsf	___fladd@aexp,0
 21696  1242  0863               	movf	___fladd@aexp,w
 21697  1243  1903               	btfsc	3,2
 21698  1244  2A53               	goto	l6463
 21699  1245  0A63               	incf	___fladd@aexp,w
 21700  1246  1D03               	btfss	3,2
 21701  1247  2A50               	goto	l6459
 21702  1248  3000               	movlw	0
 21703  1249  00D9               	movwf	___fladd@a+3
 21704  124A  3000               	movlw	0
 21705  124B  00D8               	movwf	___fladd@a+2
 21706  124C  3000               	movlw	0
 21707  124D  00D7               	movwf	___fladd@a+1
 21708  124E  3000               	movlw	0
 21709  124F  00D6               	movwf	___fladd@a
 21710  1250                     l6459:	
 21711  1250  17D8               	bsf	___fladd@a+2,7
 21712  1251  01D9               	clrf	___fladd@a+3
 21713  1252  2A5B               	goto	l1282
 21714  1253                     l6463:	
 21715  1253  3000               	movlw	0
 21716  1254  00D9               	movwf	___fladd@a+3
 21717  1255  3000               	movlw	0
 21718  1256  00D8               	movwf	___fladd@a+2
 21719  1257  3000               	movlw	0
 21720  1258  00D7               	movwf	___fladd@a+1
 21721  1259  3000               	movlw	0
 21722  125A  00D6               	movwf	___fladd@a
 21723  125B                     l1282:	
 21724  125B  0864               	movf	___fladd@bexp,w
 21725  125C  0263               	subwf	___fladd@aexp,w
 21726  125D  1803               	skipnc
 21727  125E  2AA1               	goto	l6499
 21728  125F  1F62               	btfss	___fladd@signs,6
 21729  1260  2A65               	goto	l6469
 21730  1261  3080               	movlw	128
 21731  1262  00DA               	movwf	??___fladd
 21732  1263  085A               	movf	??___fladd,w
 21733  1264  06E2               	xorwf	___fladd@signs,f
 21734  1265                     l6469:	
 21735  1265  0864               	movf	___fladd@bexp,w
 21736  1266  00DA               	movwf	??___fladd
 21737  1267  085A               	movf	??___fladd,w
 21738  1268  00E5               	movwf	___fladd@grs
 21739  1269  0863               	movf	___fladd@aexp,w
 21740  126A  00DA               	movwf	??___fladd
 21741  126B  085A               	movf	??___fladd,w
 21742  126C  00E4               	movwf	___fladd@bexp
 21743  126D  0865               	movf	___fladd@grs,w
 21744  126E  00DA               	movwf	??___fladd
 21745  126F  085A               	movf	??___fladd,w
 21746  1270  00E3               	movwf	___fladd@aexp
 21747  1271  0852               	movf	___fladd@b,w
 21748  1272  00DA               	movwf	??___fladd
 21749  1273  085A               	movf	??___fladd,w
 21750  1274  00E5               	movwf	___fladd@grs
 21751  1275  0856               	movf	___fladd@a,w
 21752  1276  00DA               	movwf	??___fladd
 21753  1277  085A               	movf	??___fladd,w
 21754  1278  00D2               	movwf	___fladd@b
 21755  1279  0865               	movf	___fladd@grs,w
 21756  127A  00DA               	movwf	??___fladd
 21757  127B  085A               	movf	??___fladd,w
 21758  127C  00D6               	movwf	___fladd@a
 21759  127D  0853               	movf	___fladd@b+1,w
 21760  127E  00DA               	movwf	??___fladd
 21761  127F  085A               	movf	??___fladd,w
 21762  1280  00E5               	movwf	___fladd@grs
 21763  1281  0857               	movf	___fladd@a+1,w
 21764  1282  00DA               	movwf	??___fladd
 21765  1283  085A               	movf	??___fladd,w
 21766  1284  00D3               	movwf	___fladd@b+1
 21767  1285  0865               	movf	___fladd@grs,w
 21768  1286  00DA               	movwf	??___fladd
 21769  1287  085A               	movf	??___fladd,w
 21770  1288  00D7               	movwf	___fladd@a+1
 21771  1289  0854               	movf	___fladd@b+2,w
 21772  128A  00DA               	movwf	??___fladd
 21773  128B  085A               	movf	??___fladd,w
 21774  128C  00E5               	movwf	___fladd@grs
 21775  128D  0858               	movf	___fladd@a+2,w
 21776  128E  00DA               	movwf	??___fladd
 21777  128F  085A               	movf	??___fladd,w
 21778  1290  00D4               	movwf	___fladd@b+2
 21779  1291  0865               	movf	___fladd@grs,w
 21780  1292  00DA               	movwf	??___fladd
 21781  1293  085A               	movf	??___fladd,w
 21782  1294  00D8               	movwf	___fladd@a+2
 21783  1295  0855               	movf	___fladd@b+3,w
 21784  1296  00DA               	movwf	??___fladd
 21785  1297  085A               	movf	??___fladd,w
 21786  1298  00E5               	movwf	___fladd@grs
 21787  1299  0859               	movf	___fladd@a+3,w
 21788  129A  00DA               	movwf	??___fladd
 21789  129B  085A               	movf	??___fladd,w
 21790  129C  00D5               	movwf	___fladd@b+3
 21791  129D  0865               	movf	___fladd@grs,w
 21792  129E  00DA               	movwf	??___fladd
 21793  129F  085A               	movf	??___fladd,w
 21794  12A0  00D9               	movwf	___fladd@a+3
 21795  12A1                     l6499:	
 21796  12A1  01E5               	clrf	___fladd@grs
 21797  12A2  0863               	movf	___fladd@aexp,w
 21798  12A3  00DA               	movwf	??___fladd
 21799  12A4  01DB               	clrf	??___fladd+1
 21800  12A5  085B               	movf	??___fladd+1,w
 21801  12A6  00DD               	movwf	??___fladd+3
 21802  12A7  0864               	movf	___fladd@bexp,w
 21803  12A8  025A               	subwf	??___fladd,w
 21804  12A9  00DC               	movwf	??___fladd+2
 21805  12AA  1C03               	skipc
 21806  12AB  03DD               	decf	??___fladd+3,f
 21807  12AC  085D               	movf	??___fladd+3,w
 21808  12AD  3A80               	xorlw	128
 21809  12AE  00DE               	movwf	??___fladd+4
 21810  12AF  3080               	movlw	128
 21811  12B0  025E               	subwf	??___fladd+4,w
 21812  12B1  1D03               	skipz
 21813  12B2  2AB5               	goto	u8025
 21814  12B3  301A               	movlw	26
 21815  12B4  025C               	subwf	??___fladd+2,w
 21816  12B5                     u8025:	
 21817  12B5  1C03               	skipc
 21818  12B6  2AE9               	goto	l6517
 21819  12B7  0140               	movlb	0	; select bank0
 21820  12B8  0855               	movf	___fladd@b+3,w
 21821  12B9  0454               	iorwf	___fladd@b+2,w
 21822  12BA  0453               	iorwf	___fladd@b+1,w
 21823  12BB  0452               	iorwf	___fladd@b,w
 21824  12BC  1903               	btfsc	3,2
 21825  12BD  2AC0               	goto	u8030
 21826  12BE  3001               	movlw	1
 21827  12BF  2AC1               	goto	u8040
 21828  12C0                     u8030:	
 21829  12C0  3000               	movlw	0
 21830  12C1                     u8040:	
 21831  12C1  00DA               	movwf	??___fladd
 21832  12C2  085A               	movf	??___fladd,w
 21833  12C3  00E5               	movwf	___fladd@grs
 21834  12C4  3000               	movlw	0
 21835  12C5  00D5               	movwf	___fladd@b+3
 21836  12C6  3000               	movlw	0
 21837  12C7  00D4               	movwf	___fladd@b+2
 21838  12C8  3000               	movlw	0
 21839  12C9  00D3               	movwf	___fladd@b+1
 21840  12CA  3000               	movlw	0
 21841  12CB  00D2               	movwf	___fladd@b
 21842  12CC  0863               	movf	___fladd@aexp,w
 21843  12CD  00DA               	movwf	??___fladd
 21844  12CE  085A               	movf	??___fladd,w
 21845  12CF  00E4               	movwf	___fladd@bexp
 21846  12D0  2AEE               	goto	l1286
 21847  12D1                     l1288:	
 21848  12D1  1C65               	btfss	___fladd@grs,0
 21849  12D2  2AD9               	goto	l6507
 21850  12D3  3665               	lsrf	___fladd@grs,w
 21851  12D4  3801               	iorlw	1
 21852  12D5  00DA               	movwf	??___fladd
 21853  12D6  085A               	movf	??___fladd,w
 21854  12D7  00E5               	movwf	___fladd@grs
 21855  12D8  2ADB               	goto	l6509
 21856  12D9                     l6507:	
 21857  12D9  1003               	clrc
 21858  12DA  0CE5               	rrf	___fladd@grs,f
 21859  12DB                     l6509:	
 21860  12DB  1852               	btfsc	___fladd@b,0
 21861  12DC  17E5               	bsf	___fladd@grs,7
 21862  12DD  3001               	movlw	1
 21863  12DE  00DA               	movwf	??___fladd
 21864  12DF                     u8075:	
 21865  12DF  37D5               	asrf	___fladd@b+3,f
 21866  12E0  0CD4               	rrf	___fladd@b+2,f
 21867  12E1  0CD3               	rrf	___fladd@b+1,f
 21868  12E2  0CD2               	rrf	___fladd@b,f
 21869  12E3  0BDA               	decfsz	??___fladd& (0+127),f
 21870  12E4  2ADF               	goto	u8075
 21871  12E5  3001               	movlw	1
 21872  12E6  00DA               	movwf	??___fladd
 21873  12E7  085A               	movf	??___fladd,w
 21874  12E8  07E4               	addwf	___fladd@bexp,f
 21875  12E9                     l6517:	
 21876  12E9  0140               	movlb	0	; select bank0
 21877  12EA  0863               	movf	___fladd@aexp,w
 21878  12EB  0264               	subwf	___fladd@bexp,w
 21879  12EC  1C03               	skipc
 21880  12ED  2AD1               	goto	l1288
 21881  12EE                     l1286:	
 21882  12EE  1B62               	btfsc	___fladd@signs,6
 21883  12EF  2B1F               	goto	l6543
 21884  12F0  0864               	movf	___fladd@bexp,w
 21885  12F1  1D03               	btfss	3,2
 21886  12F2  2AFC               	goto	l6525
 21887  12F3  3000               	movlw	0
 21888  12F4  00D5               	movwf	?___fladd+3
 21889  12F5  3000               	movlw	0
 21890  12F6  00D4               	movwf	?___fladd+2
 21891  12F7  3000               	movlw	0
 21892  12F8  00D3               	movwf	?___fladd+1
 21893  12F9  3000               	movlw	0
 21894  12FA  00D2               	movwf	?___fladd
 21895  12FB  0008               	return
 21896  12FC                     l6525:	
 21897  12FC  0856               	movf	___fladd@a,w
 21898  12FD  07D2               	addwf	___fladd@b,f
 21899  12FE  0857               	movf	___fladd@a+1,w
 21900  12FF  3DD3               	addwfc	___fladd@b+1,f
 21901  1300  0858               	movf	___fladd@a+2,w
 21902  1301  3DD4               	addwfc	___fladd@b+2,f
 21903  1302  0859               	movf	___fladd@a+3,w
 21904  1303  3DD5               	addwfc	___fladd@b+3,f
 21905  1304  1C55               	btfss	___fladd@b+3,0
 21906  1305  2B99               	goto	l6577
 21907  1306  1C65               	btfss	___fladd@grs,0
 21908  1307  2B0E               	goto	l6533
 21909  1308  3665               	lsrf	___fladd@grs,w
 21910  1309  3801               	iorlw	1
 21911  130A  00DA               	movwf	??___fladd
 21912  130B  085A               	movf	??___fladd,w
 21913  130C  00E5               	movwf	___fladd@grs
 21914  130D  2B10               	goto	l6535
 21915  130E                     l6533:	
 21916  130E  1003               	clrc
 21917  130F  0CE5               	rrf	___fladd@grs,f
 21918  1310                     l6535:	
 21919  1310  1852               	btfsc	___fladd@b,0
 21920  1311  17E5               	bsf	___fladd@grs,7
 21921  1312  3001               	movlw	1
 21922  1313  00DA               	movwf	??___fladd
 21923  1314                     u8145:	
 21924  1314  37D5               	asrf	___fladd@b+3,f
 21925  1315  0CD4               	rrf	___fladd@b+2,f
 21926  1316  0CD3               	rrf	___fladd@b+1,f
 21927  1317  0CD2               	rrf	___fladd@b,f
 21928  1318  0BDA               	decfsz	??___fladd& (0+127),f
 21929  1319  2B14               	goto	u8145
 21930  131A  3001               	movlw	1
 21931  131B  00DA               	movwf	??___fladd
 21932  131C  085A               	movf	??___fladd,w
 21933  131D  07E4               	addwf	___fladd@bexp,f
 21934  131E  2B99               	goto	l6577
 21935  131F                     l6543:	
 21936  131F  0855               	movf	___fladd@b+3,w
 21937  1320  3A80               	xorlw	128
 21938  1321  00DA               	movwf	??___fladd
 21939  1322  0859               	movf	___fladd@a+3,w
 21940  1323  3A80               	xorlw	128
 21941  1324  025A               	subwf	??___fladd,w
 21942  1325  1D03               	skipz
 21943  1326  2B31               	goto	u8153
 21944  1327  0858               	movf	___fladd@a+2,w
 21945  1328  0254               	subwf	___fladd@b+2,w
 21946  1329  1D03               	skipz
 21947  132A  2B31               	goto	u8153
 21948  132B  0857               	movf	___fladd@a+1,w
 21949  132C  0253               	subwf	___fladd@b+1,w
 21950  132D  1D03               	skipz
 21951  132E  2B31               	goto	u8153
 21952  132F  0856               	movf	___fladd@a,w
 21953  1330  0252               	subwf	___fladd@b,w
 21954  1331                     u8153:	
 21955  1331  1803               	skipnc
 21956  1332  2B69               	goto	l6553
 21957  1333  30FF               	movlw	255
 21958  1334  00DA               	movwf	??___fladd
 21959  1335  30FF               	movlw	255
 21960  1336  00DB               	movwf	??___fladd+1
 21961  1337  30FF               	movlw	255
 21962  1338  00DC               	movwf	??___fladd+2
 21963  1339  30FF               	movlw	255
 21964  133A  00DD               	movwf	??___fladd+3
 21965  133B  0852               	movf	___fladd@b,w
 21966  133C  0256               	subwf	___fladd@a,w
 21967  133D  00DE               	movwf	??___fladd+4
 21968  133E  0853               	movf	___fladd@b+1,w
 21969  133F  3B57               	subwfb	___fladd@a+1,w
 21970  1340  00DF               	movwf	??___fladd+5
 21971  1341  0854               	movf	___fladd@b+2,w
 21972  1342  3B58               	subwfb	___fladd@a+2,w
 21973  1343  00E0               	movwf	??___fladd+6
 21974  1344  0855               	movf	___fladd@b+3,w
 21975  1345  3B59               	subwfb	___fladd@a+3,w
 21976  1346  00E1               	movwf	??___fladd+7
 21977  1347  085E               	movf	??___fladd+4,w
 21978  1348  07DA               	addwf	??___fladd,f
 21979  1349  085F               	movf	??___fladd+5,w
 21980  134A  3DDB               	addwfc	??___fladd+1,f
 21981  134B  0860               	movf	??___fladd+6,w
 21982  134C  3DDC               	addwfc	??___fladd+2,f
 21983  134D  0861               	movf	??___fladd+7,w
 21984  134E  3DDD               	addwfc	??___fladd+3,f
 21985  134F  085D               	movf	??___fladd+3,w
 21986  1350  00D5               	movwf	___fladd@b+3
 21987  1351  085C               	movf	??___fladd+2,w
 21988  1352  00D4               	movwf	___fladd@b+2
 21989  1353  085B               	movf	??___fladd+1,w
 21990  1354  00D3               	movwf	___fladd@b+1
 21991  1355  085A               	movf	??___fladd,w
 21992  1356  00D2               	movwf	___fladd@b
 21993  1357  3080               	movlw	128
 21994  1358  00DA               	movwf	??___fladd
 21995  1359  085A               	movf	??___fladd,w
 21996  135A  06E2               	xorwf	___fladd@signs,f
 21997  135B  09E5               	comf	___fladd@grs,f
 21998  135C  0AE5               	incf	___fladd@grs,f
 21999  135D  0865               	movf	___fladd@grs,w
 22000  135E  1D03               	btfss	3,2
 22001  135F  2B71               	goto	l1303
 22002  1360  3001               	movlw	1
 22003  1361  07D2               	addwf	___fladd@b,f
 22004  1362  3000               	movlw	0
 22005  1363  3DD3               	addwfc	___fladd@b+1,f
 22006  1364  3000               	movlw	0
 22007  1365  3DD4               	addwfc	___fladd@b+2,f
 22008  1366  3000               	movlw	0
 22009  1367  3DD5               	addwfc	___fladd@b+3,f
 22010  1368  2B71               	goto	l1303
 22011  1369                     l6553:	
 22012  1369  0856               	movf	___fladd@a,w
 22013  136A  02D2               	subwf	___fladd@b,f
 22014  136B  0857               	movf	___fladd@a+1,w
 22015  136C  3BD3               	subwfb	___fladd@b+1,f
 22016  136D  0858               	movf	___fladd@a+2,w
 22017  136E  3BD4               	subwfb	___fladd@b+2,f
 22018  136F  0859               	movf	___fladd@a+3,w
 22019  1370  3BD5               	subwfb	___fladd@b+3,f
 22020  1371                     l1303:	
 22021  1371  0855               	movf	___fladd@b+3,w
 22022  1372  0454               	iorwf	___fladd@b+2,w
 22023  1373  0453               	iorwf	___fladd@b+1,w
 22024  1374  0452               	iorwf	___fladd@b,w
 22025  1375  1D03               	skipz
 22026  1376  2B97               	goto	l6575
 22027  1377  0865               	movf	___fladd@grs,w
 22028  1378  1D03               	btfss	3,2
 22029  1379  2B97               	goto	l6575
 22030  137A  3000               	movlw	0
 22031  137B  00D5               	movwf	?___fladd+3
 22032  137C  3000               	movlw	0
 22033  137D  00D4               	movwf	?___fladd+2
 22034  137E  3000               	movlw	0
 22035  137F  00D3               	movwf	?___fladd+1
 22036  1380  3000               	movlw	0
 22037  1381  00D2               	movwf	?___fladd
 22038  1382  0008               	return
 22039  1383                     l6561:	
 22040  1383  3001               	movlw	1
 22041  1384                     u8195:	
 22042  1384  35D2               	lslf	___fladd@b,f
 22043  1385  0DD3               	rlf	___fladd@b+1,f
 22044  1386  0DD4               	rlf	___fladd@b+2,f
 22045  1387  0DD5               	rlf	___fladd@b+3,f
 22046  1388  0B89               	decfsz	9,f
 22047  1389  2B84               	goto	u8195
 22048  138A  1BE5               	btfsc	___fladd@grs,7
 22049  138B  1452               	bsf	___fladd@b,0
 22050  138C  1C65               	btfss	___fladd@grs,0
 22051  138D  2B90               	goto	l6569
 22052  138E  1403               	setc
 22053  138F  2B91               	goto	L10
 22054  1390                     l6569:	
 22055  1390  1003               	clrc
 22056  1391                     L10:	
 22057  1391  0DE5               	rlf	___fladd@grs,f
 22058  1392  0864               	movf	___fladd@bexp,w
 22059  1393  1903               	btfsc	3,2
 22060  1394  2B97               	goto	l6575
 22061  1395  3001               	movlw	1
 22062  1396  02E4               	subwf	___fladd@bexp,f
 22063  1397                     l6575:	
 22064  1397  1FD4               	btfss	___fladd@b+2,7
 22065  1398  2B83               	goto	l6561
 22066  1399                     l6577:	
 22067  1399  01E3               	clrf	___fladd@aexp
 22068  139A  1FE5               	btfss	___fladd@grs,7
 22069  139B  2BA4               	goto	l6587
 22070  139C  0865               	movf	___fladd@grs,w
 22071  139D  397F               	andlw	127
 22072  139E  1903               	btfsc	3,2
 22073  139F  1852               	btfsc	___fladd@b,0
 22074  13A0  2BA2               	goto	l6583
 22075  13A1  2BA4               	goto	l6587
 22076  13A2                     l6583:	
 22077  13A2  01E3               	clrf	___fladd@aexp
 22078  13A3  0AE3               	incf	___fladd@aexp,f
 22079  13A4                     l6587:	
 22080  13A4  0863               	movf	___fladd@aexp,w
 22081  13A5  1903               	btfsc	3,2
 22082  13A6  2BD0               	goto	l1316
 22083  13A7  3001               	movlw	1
 22084  13A8  07D2               	addwf	___fladd@b,f
 22085  13A9  3000               	movlw	0
 22086  13AA  3DD3               	addwfc	___fladd@b+1,f
 22087  13AB  3000               	movlw	0
 22088  13AC  3DD4               	addwfc	___fladd@b+2,f
 22089  13AD  3000               	movlw	0
 22090  13AE  3DD5               	addwfc	___fladd@b+3,f
 22091  13AF  1C55               	btfss	___fladd@b+3,0
 22092  13B0  2BD0               	goto	l1316
 22093  13B1  0852               	movf	___fladd@b,w
 22094  13B2  00DA               	movwf	??___fladd
 22095  13B3  0853               	movf	___fladd@b+1,w
 22096  13B4  00DB               	movwf	??___fladd+1
 22097  13B5  0854               	movf	___fladd@b+2,w
 22098  13B6  00DC               	movwf	??___fladd+2
 22099  13B7  0855               	movf	___fladd@b+3,w
 22100  13B8  00DD               	movwf	??___fladd+3
 22101  13B9  3001               	movlw	1
 22102  13BA  00DE               	movwf	??___fladd+4
 22103  13BB                     u8295:	
 22104  13BB  37DD               	asrf	??___fladd+3,f
 22105  13BC  0CDC               	rrf	??___fladd+2,f
 22106  13BD  0CDB               	rrf	??___fladd+1,f
 22107  13BE  0CDA               	rrf	??___fladd,f
 22108  13BF  0BDE               	decfsz	??___fladd+4,f
 22109  13C0  2BBB               	goto	u8295
 22110  13C1  085D               	movf	??___fladd+3,w
 22111  13C2  00D5               	movwf	___fladd@b+3
 22112  13C3  085C               	movf	??___fladd+2,w
 22113  13C4  00D4               	movwf	___fladd@b+2
 22114  13C5  085B               	movf	??___fladd+1,w
 22115  13C6  00D3               	movwf	___fladd@b+1
 22116  13C7  085A               	movf	??___fladd,w
 22117  13C8  00D2               	movwf	___fladd@b
 22118  13C9  0A64               	incf	___fladd@bexp,w
 22119  13CA  1903               	btfsc	3,2
 22120  13CB  2BD0               	goto	l1316
 22121  13CC  3001               	movlw	1
 22122  13CD  00DA               	movwf	??___fladd
 22123  13CE  085A               	movf	??___fladd,w
 22124  13CF  07E4               	addwf	___fladd@bexp,f
 22125  13D0                     l1316:	
 22126  13D0  0A64               	incf	___fladd@bexp,w
 22127  13D1  1D03               	btfss	3,2
 22128  13D2  0864               	movf	___fladd@bexp,w
 22129  13D3  1D03               	btfss	3,2
 22130  13D4  2BE0               	goto	l6605
 22131  13D5  3000               	movlw	0
 22132  13D6  00D5               	movwf	___fladd@b+3
 22133  13D7  3000               	movlw	0
 22134  13D8  00D4               	movwf	___fladd@b+2
 22135  13D9  3000               	movlw	0
 22136  13DA  00D3               	movwf	___fladd@b+1
 22137  13DB  3000               	movlw	0
 22138  13DC  00D2               	movwf	___fladd@b
 22139  13DD  0864               	movf	___fladd@bexp,w
 22140  13DE  1903               	btfsc	3,2
 22141  13DF  01E2               	clrf	___fladd@signs
 22142  13E0                     l6605:	
 22143  13E0  1C64               	btfss	___fladd@bexp,0
 22144  13E1  2BE4               	goto	l6609
 22145  13E2  17D4               	bsf	___fladd@b+2,7
 22146  13E3  2BE8               	goto	l1324
 22147  13E4                     l6609:	
 22148  13E4  307F               	movlw	127
 22149  13E5  00DA               	movwf	??___fladd
 22150  13E6  085A               	movf	??___fladd,w
 22151  13E7  05D4               	andwf	___fladd@b+2,f
 22152  13E8                     l1324:	
 22153  13E8  3664               	lsrf	___fladd@bexp,w
 22154  13E9  00DA               	movwf	??___fladd
 22155  13EA  085A               	movf	??___fladd,w
 22156  13EB  00D5               	movwf	___fladd@b+3
 22157  13EC  1FE2               	btfss	___fladd@signs,7
 22158  13ED  0008               	return
 22159  13EE  17D5               	bsf	___fladd@b+3,7
 22160  13EF  0008               	return
 22161  13F0                     __end_of___fladd:	
 22162                           
 22163                           	psect	text66
 22164  15D4                     __ptext66:	
 22165 ;; *************** function ___flmul *****************
 22166 ;; Defined at:
 22167 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 22168 ;; Parameters:    Size  Location     Type
 22169 ;;  b               4   24[BANK0 ] unsigned char 
 22170 ;;  a               4   28[BANK0 ] unsigned char 
 22171 ;; Auto vars:     Size  Location     Type
 22172 ;;  prod            4   44[BANK0 ] struct .
 22173 ;;  grs             4   39[BANK0 ] unsigned long 
 22174 ;;  temp            2   48[BANK0 ] struct .
 22175 ;;  bexp            1   43[BANK0 ] unsigned char 
 22176 ;;  aexp            1   38[BANK0 ] unsigned char 
 22177 ;;  sign            1   37[BANK0 ] unsigned char 
 22178 ;; Return value:  Size  Location     Type
 22179 ;;                  4   24[BANK0 ] unsigned char 
 22180 ;; Registers used:
 22181 ;;		wreg, status,2, status,0, pclath, cstack
 22182 ;; Tracked objects:
 22183 ;;		On entry : 0/0
 22184 ;;		On exit  : 0/0
 22185 ;;		Unchanged: 0/0
 22186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22187 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22188 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22189 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22190 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22191 ;;Total ram usage:       26 bytes
 22192 ;; Hardware stack levels used:    1
 22193 ;; Hardware stack levels required when called:    4
 22194 ;; This function calls:
 22195 ;;		__Umul8_16
 22196 ;; This function is called by:
 22197 ;;		_checkChannelStatus
 22198 ;;		_systemCheck
 22199 ;;		_calcRequiredPower
 22200 ;;		_getAnalogValues
 22201 ;;		_channelThing
 22202 ;;		_ftoa
 22203 ;; This function uses a non-reentrant model
 22204 ;;
 22205                           
 22206                           
 22207                           ;psect for function ___flmul
 22208  15D4                     ___flmul:	
 22209                           
 22210                           ;incstack = 0
 22211                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 22212  15D4  0140               	movlb	0	; select bank0
 22213  15D5  083B               	movf	___flmul@b+3,w
 22214  15D6  3980               	andlw	128
 22215  15D7  00C0               	movwf	??___flmul
 22216  15D8  0840               	movf	??___flmul,w
 22217  15D9  00C5               	movwf	___flmul@sign
 22218  15DA  353B               	lslf	___flmul@b+3,w
 22219  15DB  00C0               	movwf	??___flmul
 22220  15DC  0840               	movf	??___flmul,w
 22221  15DD  00CB               	movwf	___flmul@bexp
 22222  15DE  1BBA               	btfsc	___flmul@b+2,7
 22223  15DF  144B               	bsf	___flmul@bexp,0
 22224  15E0  084B               	movf	___flmul@bexp,w
 22225  15E1  1903               	btfsc	3,2
 22226  15E2  2DF0               	goto	l6937
 22227  15E3  0A4B               	incf	___flmul@bexp,w
 22228  15E4  1D03               	btfss	3,2
 22229  15E5  2DEE               	goto	l6935
 22230  15E6  3000               	movlw	0
 22231  15E7  00BB               	movwf	___flmul@b+3
 22232  15E8  3000               	movlw	0
 22233  15E9  00BA               	movwf	___flmul@b+2
 22234  15EA  3000               	movlw	0
 22235  15EB  00B9               	movwf	___flmul@b+1
 22236  15EC  3000               	movlw	0
 22237  15ED  00B8               	movwf	___flmul@b
 22238  15EE                     l6935:	
 22239  15EE  17BA               	bsf	___flmul@b+2,7
 22240  15EF  2DF8               	goto	l6939
 22241  15F0                     l6937:	
 22242  15F0  3000               	movlw	0
 22243  15F1  00BB               	movwf	___flmul@b+3
 22244  15F2  3000               	movlw	0
 22245  15F3  00BA               	movwf	___flmul@b+2
 22246  15F4  3000               	movlw	0
 22247  15F5  00B9               	movwf	___flmul@b+1
 22248  15F6  3000               	movlw	0
 22249  15F7  00B8               	movwf	___flmul@b
 22250  15F8                     l6939:	
 22251  15F8  083F               	movf	___flmul@a+3,w
 22252  15F9  3980               	andlw	128
 22253  15FA  00C0               	movwf	??___flmul
 22254  15FB  0840               	movf	??___flmul,w
 22255  15FC  06C5               	xorwf	___flmul@sign,f
 22256  15FD  353F               	lslf	___flmul@a+3,w
 22257  15FE  00C0               	movwf	??___flmul
 22258  15FF  0840               	movf	??___flmul,w
 22259  1600  00C6               	movwf	___flmul@aexp
 22260  1601  1BBE               	btfsc	___flmul@a+2,7
 22261  1602  1446               	bsf	___flmul@aexp,0
 22262  1603  0846               	movf	___flmul@aexp,w
 22263  1604  1903               	btfsc	3,2
 22264  1605  2E13               	goto	l6955
 22265  1606  0A46               	incf	___flmul@aexp,w
 22266  1607  1D03               	btfss	3,2
 22267  1608  2E11               	goto	l6953
 22268  1609  3000               	movlw	0
 22269  160A  00BF               	movwf	___flmul@a+3
 22270  160B  3000               	movlw	0
 22271  160C  00BE               	movwf	___flmul@a+2
 22272  160D  3000               	movlw	0
 22273  160E  00BD               	movwf	___flmul@a+1
 22274  160F  3000               	movlw	0
 22275  1610  00BC               	movwf	___flmul@a
 22276  1611                     l6953:	
 22277  1611  17BE               	bsf	___flmul@a+2,7
 22278  1612  2E1B               	goto	l6957
 22279  1613                     l6955:	
 22280  1613  3000               	movlw	0
 22281  1614  00BF               	movwf	___flmul@a+3
 22282  1615  3000               	movlw	0
 22283  1616  00BE               	movwf	___flmul@a+2
 22284  1617  3000               	movlw	0
 22285  1618  00BD               	movwf	___flmul@a+1
 22286  1619  3000               	movlw	0
 22287  161A  00BC               	movwf	___flmul@a
 22288  161B                     l6957:	
 22289  161B  0846               	movf	___flmul@aexp,w
 22290  161C  1D03               	btfss	3,2
 22291  161D  084B               	movf	___flmul@bexp,w
 22292  161E  1D03               	btfss	3,2
 22293  161F  2E29               	goto	l6965
 22294  1620  3000               	movlw	0
 22295  1621  00BB               	movwf	?___flmul+3
 22296  1622  3000               	movlw	0
 22297  1623  00BA               	movwf	?___flmul+2
 22298  1624  3000               	movlw	0
 22299  1625  00B9               	movwf	?___flmul+1
 22300  1626  3000               	movlw	0
 22301  1627  00B8               	movwf	?___flmul
 22302  1628  0008               	return
 22303  1629                     l6965:	
 22304  1629  0838               	movf	___flmul@b,w
 22305  162A  00C0               	movwf	??___flmul
 22306  162B  0840               	movf	??___flmul,w
 22307  162C  00A4               	movwf	__Umul8_16@multiplicand
 22308  162D  083E               	movf	___flmul@a+2,w
 22309  162E  31B5  25A4  3195   	fcall	__Umul8_16
 22310  1631  0140               	movlb	0	; select bank0
 22311  1632  0825               	movf	?__Umul8_16+1,w
 22312  1633  00D1               	movwf	___flmul@temp+1
 22313  1634  0824               	movf	?__Umul8_16,w
 22314  1635  00D0               	movwf	___flmul@temp
 22315  1636  0850               	movf	___flmul@temp,w
 22316  1637  00C0               	movwf	??___flmul
 22317  1638  01C1               	clrf	??___flmul+1
 22318  1639  01C2               	clrf	??___flmul+2
 22319  163A  01C3               	clrf	??___flmul+3
 22320  163B  0843               	movf	??___flmul+3,w
 22321  163C  00CA               	movwf	___flmul@grs+3
 22322  163D  0842               	movf	??___flmul+2,w
 22323  163E  00C9               	movwf	___flmul@grs+2
 22324  163F  0841               	movf	??___flmul+1,w
 22325  1640  00C8               	movwf	___flmul@grs+1
 22326  1641  0840               	movf	??___flmul,w
 22327  1642  00C7               	movwf	___flmul@grs
 22328  1643  0851               	movf	___flmul@temp+1,w
 22329  1644  00C0               	movwf	??___flmul
 22330  1645  01C1               	clrf	??___flmul+1
 22331  1646  01C2               	clrf	??___flmul+2
 22332  1647  01C3               	clrf	??___flmul+3
 22333  1648  0843               	movf	??___flmul+3,w
 22334  1649  00CF               	movwf	___flmul@prod+3
 22335  164A  0842               	movf	??___flmul+2,w
 22336  164B  00CE               	movwf	___flmul@prod+2
 22337  164C  0841               	movf	??___flmul+1,w
 22338  164D  00CD               	movwf	___flmul@prod+1
 22339  164E  0840               	movf	??___flmul,w
 22340  164F  00CC               	movwf	___flmul@prod
 22341  1650  0839               	movf	___flmul@b+1,w
 22342  1651  00C0               	movwf	??___flmul
 22343  1652  0840               	movf	??___flmul,w
 22344  1653  00A4               	movwf	__Umul8_16@multiplicand
 22345  1654  083D               	movf	___flmul@a+1,w
 22346  1655  31B5  25A4  3195   	fcall	__Umul8_16
 22347  1658  0140               	movlb	0	; select bank0
 22348  1659  0825               	movf	?__Umul8_16+1,w
 22349  165A  00D1               	movwf	___flmul@temp+1
 22350  165B  0824               	movf	?__Umul8_16,w
 22351  165C  00D0               	movwf	___flmul@temp
 22352  165D  0850               	movf	___flmul@temp,w
 22353  165E  00C0               	movwf	??___flmul
 22354  165F  01C1               	clrf	??___flmul+1
 22355  1660  01C2               	clrf	??___flmul+2
 22356  1661  01C3               	clrf	??___flmul+3
 22357  1662  0840               	movf	??___flmul,w
 22358  1663  07C7               	addwf	___flmul@grs,f
 22359  1664  0841               	movf	??___flmul+1,w
 22360  1665  3DC8               	addwfc	___flmul@grs+1,f
 22361  1666  0842               	movf	??___flmul+2,w
 22362  1667  3DC9               	addwfc	___flmul@grs+2,f
 22363  1668  0843               	movf	??___flmul+3,w
 22364  1669  3DCA               	addwfc	___flmul@grs+3,f
 22365  166A  0851               	movf	___flmul@temp+1,w
 22366  166B  00C0               	movwf	??___flmul
 22367  166C  01C1               	clrf	??___flmul+1
 22368  166D  01C2               	clrf	??___flmul+2
 22369  166E  01C3               	clrf	??___flmul+3
 22370  166F  0840               	movf	??___flmul,w
 22371  1670  07CC               	addwf	___flmul@prod,f
 22372  1671  0841               	movf	??___flmul+1,w
 22373  1672  3DCD               	addwfc	___flmul@prod+1,f
 22374  1673  0842               	movf	??___flmul+2,w
 22375  1674  3DCE               	addwfc	___flmul@prod+2,f
 22376  1675  0843               	movf	??___flmul+3,w
 22377  1676  3DCF               	addwfc	___flmul@prod+3,f
 22378  1677  083A               	movf	___flmul@b+2,w
 22379  1678  00C0               	movwf	??___flmul
 22380  1679  0840               	movf	??___flmul,w
 22381  167A  00A4               	movwf	__Umul8_16@multiplicand
 22382  167B  083C               	movf	___flmul@a,w
 22383  167C  31B5  25A4  3195   	fcall	__Umul8_16
 22384  167F  0140               	movlb	0	; select bank0
 22385  1680  0825               	movf	?__Umul8_16+1,w
 22386  1681  00D1               	movwf	___flmul@temp+1
 22387  1682  0824               	movf	?__Umul8_16,w
 22388  1683  00D0               	movwf	___flmul@temp
 22389  1684  0850               	movf	___flmul@temp,w
 22390  1685  00C0               	movwf	??___flmul
 22391  1686  01C1               	clrf	??___flmul+1
 22392  1687  01C2               	clrf	??___flmul+2
 22393  1688  01C3               	clrf	??___flmul+3
 22394  1689  0840               	movf	??___flmul,w
 22395  168A  07C7               	addwf	___flmul@grs,f
 22396  168B  0841               	movf	??___flmul+1,w
 22397  168C  3DC8               	addwfc	___flmul@grs+1,f
 22398  168D  0842               	movf	??___flmul+2,w
 22399  168E  3DC9               	addwfc	___flmul@grs+2,f
 22400  168F  0843               	movf	??___flmul+3,w
 22401  1690  3DCA               	addwfc	___flmul@grs+3,f
 22402  1691  0851               	movf	___flmul@temp+1,w
 22403  1692  00C0               	movwf	??___flmul
 22404  1693  01C1               	clrf	??___flmul+1
 22405  1694  01C2               	clrf	??___flmul+2
 22406  1695  01C3               	clrf	??___flmul+3
 22407  1696  0840               	movf	??___flmul,w
 22408  1697  07CC               	addwf	___flmul@prod,f
 22409  1698  0841               	movf	??___flmul+1,w
 22410  1699  3DCD               	addwfc	___flmul@prod+1,f
 22411  169A  0842               	movf	??___flmul+2,w
 22412  169B  3DCE               	addwfc	___flmul@prod+2,f
 22413  169C  0843               	movf	??___flmul+3,w
 22414  169D  3DCF               	addwfc	___flmul@prod+3,f
 22415  169E  3008               	movlw	8
 22416  169F                     u9105:	
 22417  169F  35C7               	lslf	___flmul@grs,f
 22418  16A0  0DC8               	rlf	___flmul@grs+1,f
 22419  16A1  0DC9               	rlf	___flmul@grs+2,f
 22420  16A2  0DCA               	rlf	___flmul@grs+3,f
 22421  16A3  0B89               	decfsz	9,f
 22422  16A4  2E9F               	goto	u9105
 22423  16A5  0839               	movf	___flmul@b+1,w
 22424  16A6  00C0               	movwf	??___flmul
 22425  16A7  0840               	movf	??___flmul,w
 22426  16A8  00A4               	movwf	__Umul8_16@multiplicand
 22427  16A9  083C               	movf	___flmul@a,w
 22428  16AA  31B5  25A4  3195   	fcall	__Umul8_16
 22429  16AD  0140               	movlb	0	; select bank0
 22430  16AE  0825               	movf	?__Umul8_16+1,w
 22431  16AF  00D1               	movwf	___flmul@temp+1
 22432  16B0  0824               	movf	?__Umul8_16,w
 22433  16B1  00D0               	movwf	___flmul@temp
 22434  16B2  0850               	movf	___flmul@temp,w
 22435  16B3  07C7               	addwf	___flmul@grs,f
 22436  16B4  0851               	movf	___flmul@temp+1,w
 22437  16B5  3DC8               	addwfc	___flmul@grs+1,f
 22438  16B6  3000               	movlw	0
 22439  16B7  3DC9               	addwfc	___flmul@grs+2,f
 22440  16B8  3DCA               	addwfc	___flmul@grs+3,f
 22441  16B9  0838               	movf	___flmul@b,w
 22442  16BA  00C0               	movwf	??___flmul
 22443  16BB  0840               	movf	??___flmul,w
 22444  16BC  00A4               	movwf	__Umul8_16@multiplicand
 22445  16BD  083D               	movf	___flmul@a+1,w
 22446  16BE  31B5  25A4  3195   	fcall	__Umul8_16
 22447  16C1  0140               	movlb	0	; select bank0
 22448  16C2  0825               	movf	?__Umul8_16+1,w
 22449  16C3  00D1               	movwf	___flmul@temp+1
 22450  16C4  0824               	movf	?__Umul8_16,w
 22451  16C5  00D0               	movwf	___flmul@temp
 22452  16C6  0850               	movf	___flmul@temp,w
 22453  16C7  07C7               	addwf	___flmul@grs,f
 22454  16C8  0851               	movf	___flmul@temp+1,w
 22455  16C9  3DC8               	addwfc	___flmul@grs+1,f
 22456  16CA  3000               	movlw	0
 22457  16CB  3DC9               	addwfc	___flmul@grs+2,f
 22458  16CC  3DCA               	addwfc	___flmul@grs+3,f
 22459  16CD  3008               	movlw	8
 22460  16CE                     u9115:	
 22461  16CE  35C7               	lslf	___flmul@grs,f
 22462  16CF  0DC8               	rlf	___flmul@grs+1,f
 22463  16D0  0DC9               	rlf	___flmul@grs+2,f
 22464  16D1  0DCA               	rlf	___flmul@grs+3,f
 22465  16D2  0B89               	decfsz	9,f
 22466  16D3  2ECE               	goto	u9115
 22467  16D4  0838               	movf	___flmul@b,w
 22468  16D5  00C0               	movwf	??___flmul
 22469  16D6  0840               	movf	??___flmul,w
 22470  16D7  00A4               	movwf	__Umul8_16@multiplicand
 22471  16D8  083C               	movf	___flmul@a,w
 22472  16D9  31B5  25A4  3195   	fcall	__Umul8_16
 22473  16DC  0140               	movlb	0	; select bank0
 22474  16DD  0825               	movf	?__Umul8_16+1,w
 22475  16DE  00D1               	movwf	___flmul@temp+1
 22476  16DF  0824               	movf	?__Umul8_16,w
 22477  16E0  00D0               	movwf	___flmul@temp
 22478  16E1  0850               	movf	___flmul@temp,w
 22479  16E2  07C7               	addwf	___flmul@grs,f
 22480  16E3  0851               	movf	___flmul@temp+1,w
 22481  16E4  3DC8               	addwfc	___flmul@grs+1,f
 22482  16E5  3000               	movlw	0
 22483  16E6  3DC9               	addwfc	___flmul@grs+2,f
 22484  16E7  3DCA               	addwfc	___flmul@grs+3,f
 22485  16E8  0839               	movf	___flmul@b+1,w
 22486  16E9  00C0               	movwf	??___flmul
 22487  16EA  0840               	movf	??___flmul,w
 22488  16EB  00A4               	movwf	__Umul8_16@multiplicand
 22489  16EC  083E               	movf	___flmul@a+2,w
 22490  16ED  31B5  25A4  3195   	fcall	__Umul8_16
 22491  16F0  0140               	movlb	0	; select bank0
 22492  16F1  0825               	movf	?__Umul8_16+1,w
 22493  16F2  00D1               	movwf	___flmul@temp+1
 22494  16F3  0824               	movf	?__Umul8_16,w
 22495  16F4  00D0               	movwf	___flmul@temp
 22496  16F5  0850               	movf	___flmul@temp,w
 22497  16F6  07CC               	addwf	___flmul@prod,f
 22498  16F7  0851               	movf	___flmul@temp+1,w
 22499  16F8  3DCD               	addwfc	___flmul@prod+1,f
 22500  16F9  3000               	movlw	0
 22501  16FA  3DCE               	addwfc	___flmul@prod+2,f
 22502  16FB  3DCF               	addwfc	___flmul@prod+3,f
 22503  16FC  083A               	movf	___flmul@b+2,w
 22504  16FD  00C0               	movwf	??___flmul
 22505  16FE  0840               	movf	??___flmul,w
 22506  16FF  00A4               	movwf	__Umul8_16@multiplicand
 22507  1700  083D               	movf	___flmul@a+1,w
 22508  1701  31B5  25A4  3195   	fcall	__Umul8_16
 22509  1704  0140               	movlb	0	; select bank0
 22510  1705  0825               	movf	?__Umul8_16+1,w
 22511  1706  00D1               	movwf	___flmul@temp+1
 22512  1707  0824               	movf	?__Umul8_16,w
 22513  1708  00D0               	movwf	___flmul@temp
 22514  1709  0850               	movf	___flmul@temp,w
 22515  170A  07CC               	addwf	___flmul@prod,f
 22516  170B  0851               	movf	___flmul@temp+1,w
 22517  170C  3DCD               	addwfc	___flmul@prod+1,f
 22518  170D  3000               	movlw	0
 22519  170E  3DCE               	addwfc	___flmul@prod+2,f
 22520  170F  3DCF               	addwfc	___flmul@prod+3,f
 22521  1710  083A               	movf	___flmul@b+2,w
 22522  1711  00C0               	movwf	??___flmul
 22523  1712  0840               	movf	??___flmul,w
 22524  1713  00A4               	movwf	__Umul8_16@multiplicand
 22525  1714  083E               	movf	___flmul@a+2,w
 22526  1715  31B5  25A4  3195   	fcall	__Umul8_16
 22527  1718  0140               	movlb	0	; select bank0
 22528  1719  0825               	movf	?__Umul8_16+1,w
 22529  171A  00D1               	movwf	___flmul@temp+1
 22530  171B  0824               	movf	?__Umul8_16,w
 22531  171C  00D0               	movwf	___flmul@temp
 22532  171D  0850               	movf	___flmul@temp,w
 22533  171E  00C0               	movwf	??___flmul
 22534  171F  0851               	movf	___flmul@temp+1,w
 22535  1720  00C1               	movwf	??___flmul+1
 22536  1721  01C2               	clrf	??___flmul+2
 22537  1722  01C3               	clrf	??___flmul+3
 22538  1723  3008               	movlw	8
 22539  1724                     u9125:	
 22540  1724  35C0               	lslf	??___flmul,f
 22541  1725  0DC1               	rlf	??___flmul+1,f
 22542  1726  0DC2               	rlf	??___flmul+2,f
 22543  1727  0DC3               	rlf	??___flmul+3,f
 22544  1728  0B89               	decfsz	9,f
 22545  1729  2F24               	goto	u9125
 22546  172A  0840               	movf	??___flmul,w
 22547  172B  07CC               	addwf	___flmul@prod,f
 22548  172C  0841               	movf	??___flmul+1,w
 22549  172D  3DCD               	addwfc	___flmul@prod+1,f
 22550  172E  0842               	movf	??___flmul+2,w
 22551  172F  3DCE               	addwfc	___flmul@prod+2,f
 22552  1730  0843               	movf	??___flmul+3,w
 22553  1731  3DCF               	addwfc	___flmul@prod+3,f
 22554  1732  0847               	movf	___flmul@grs,w
 22555  1733  00C0               	movwf	??___flmul
 22556  1734  0848               	movf	___flmul@grs+1,w
 22557  1735  00C1               	movwf	??___flmul+1
 22558  1736  0849               	movf	___flmul@grs+2,w
 22559  1737  00C2               	movwf	??___flmul+2
 22560  1738  084A               	movf	___flmul@grs+3,w
 22561  1739  00C3               	movwf	??___flmul+3
 22562  173A  3018               	movlw	24
 22563  173B                     u9135:	
 22564  173B  36C3               	lsrf	??___flmul+3,f
 22565  173C  0CC2               	rrf	??___flmul+2,f
 22566  173D  0CC1               	rrf	??___flmul+1,f
 22567  173E  0CC0               	rrf	??___flmul,f
 22568  173F  0B89               	decfsz	9,f
 22569  1740  2F3B               	goto	u9135
 22570  1741  0840               	movf	??___flmul,w
 22571  1742  07CC               	addwf	___flmul@prod,f
 22572  1743  0841               	movf	??___flmul+1,w
 22573  1744  3DCD               	addwfc	___flmul@prod+1,f
 22574  1745  0842               	movf	??___flmul+2,w
 22575  1746  3DCE               	addwfc	___flmul@prod+2,f
 22576  1747  0843               	movf	??___flmul+3,w
 22577  1748  3DCF               	addwfc	___flmul@prod+3,f
 22578  1749  3008               	movlw	8
 22579  174A                     u9145:	
 22580  174A  35C7               	lslf	___flmul@grs,f
 22581  174B  0DC8               	rlf	___flmul@grs+1,f
 22582  174C  0DC9               	rlf	___flmul@grs+2,f
 22583  174D  0DCA               	rlf	___flmul@grs+3,f
 22584  174E  0B89               	decfsz	9,f
 22585  174F  2F4A               	goto	u9145
 22586  1750  084B               	movf	___flmul@bexp,w
 22587  1751  0746               	addwf	___flmul@aexp,w
 22588  1752  00C0               	movwf	??___flmul
 22589  1753  01C1               	clrf	??___flmul+1
 22590  1754  0DC1               	rlf	??___flmul+1,f
 22591  1755  0840               	movf	??___flmul,w
 22592  1756  3E82               	addlw	130
 22593  1757  00D0               	movwf	___flmul@temp
 22594  1758  30FF               	movlw	255
 22595  1759  3D41               	addwfc	??___flmul+1,w
 22596  175A  00D1               	movwf	___flmul@temp+1
 22597  175B                     l7017:	
 22598  175B  1BCE               	btfsc	___flmul@prod+2,7
 22599  175C  2F72               	goto	l7019
 22600  175D  3001               	movlw	1
 22601  175E                     u9155:	
 22602  175E  35CC               	lslf	___flmul@prod,f
 22603  175F  0DCD               	rlf	___flmul@prod+1,f
 22604  1760  0DCE               	rlf	___flmul@prod+2,f
 22605  1761  0DCF               	rlf	___flmul@prod+3,f
 22606  1762  0B89               	decfsz	9,f
 22607  1763  2F5E               	goto	u9155
 22608  1764  1BCA               	btfsc	___flmul@grs+3,7
 22609  1765  144C               	bsf	___flmul@prod,0
 22610  1766  3001               	movlw	1
 22611  1767                     u9175:	
 22612  1767  35C7               	lslf	___flmul@grs,f
 22613  1768  0DC8               	rlf	___flmul@grs+1,f
 22614  1769  0DC9               	rlf	___flmul@grs+2,f
 22615  176A  0DCA               	rlf	___flmul@grs+3,f
 22616  176B  0B89               	decfsz	9,f
 22617  176C  2F67               	goto	u9175
 22618  176D  30FF               	movlw	255
 22619  176E  07D0               	addwf	___flmul@temp,f
 22620  176F  30FF               	movlw	255
 22621  1770  3DD1               	addwfc	___flmul@temp+1,f
 22622  1771  2F5B               	goto	l7017
 22623  1772                     l7019:	
 22624  1772  01C6               	clrf	___flmul@aexp
 22625  1773  1FCA               	btfss	___flmul@grs+3,7
 22626  1774  2F8B               	goto	l7029
 22627  1775  30FF               	movlw	255
 22628  1776  0547               	andwf	___flmul@grs,w
 22629  1777  00C0               	movwf	??___flmul
 22630  1778  30FF               	movlw	255
 22631  1779  0548               	andwf	___flmul@grs+1,w
 22632  177A  00C1               	movwf	??___flmul+1
 22633  177B  30FF               	movlw	255
 22634  177C  0549               	andwf	___flmul@grs+2,w
 22635  177D  00C2               	movwf	??___flmul+2
 22636  177E  307F               	movlw	127
 22637  177F  054A               	andwf	___flmul@grs+3,w
 22638  1780  00C3               	movwf	??___flmul+3
 22639  1781  0843               	movf	??___flmul+3,w
 22640  1782  0442               	iorwf	??___flmul+2,w
 22641  1783  0441               	iorwf	??___flmul+1,w
 22642  1784  0440               	iorwf	??___flmul,w
 22643  1785  1903               	skipnz
 22644  1786  184C               	btfsc	___flmul@prod,0
 22645  1787  2F89               	goto	l7025
 22646  1788  2F8B               	goto	l7029
 22647  1789                     l7025:	
 22648  1789  01C6               	clrf	___flmul@aexp
 22649  178A  0AC6               	incf	___flmul@aexp,f
 22650  178B                     l7029:	
 22651  178B  0846               	movf	___flmul@aexp,w
 22652  178C  1903               	btfsc	3,2
 22653  178D  2FB4               	goto	l7039
 22654  178E  3001               	movlw	1
 22655  178F  07CC               	addwf	___flmul@prod,f
 22656  1790  3000               	movlw	0
 22657  1791  3DCD               	addwfc	___flmul@prod+1,f
 22658  1792  3000               	movlw	0
 22659  1793  3DCE               	addwfc	___flmul@prod+2,f
 22660  1794  3000               	movlw	0
 22661  1795  3DCF               	addwfc	___flmul@prod+3,f
 22662  1796  1C4F               	btfss	___flmul@prod+3,0
 22663  1797  2FB4               	goto	l7039
 22664  1798  084C               	movf	___flmul@prod,w
 22665  1799  00C0               	movwf	??___flmul
 22666  179A  084D               	movf	___flmul@prod+1,w
 22667  179B  00C1               	movwf	??___flmul+1
 22668  179C  084E               	movf	___flmul@prod+2,w
 22669  179D  00C2               	movwf	??___flmul+2
 22670  179E  084F               	movf	___flmul@prod+3,w
 22671  179F  00C3               	movwf	??___flmul+3
 22672  17A0  3001               	movlw	1
 22673  17A1  00C4               	movwf	??___flmul+4
 22674  17A2                     u9245:	
 22675  17A2  37C3               	asrf	??___flmul+3,f
 22676  17A3  0CC2               	rrf	??___flmul+2,f
 22677  17A4  0CC1               	rrf	??___flmul+1,f
 22678  17A5  0CC0               	rrf	??___flmul,f
 22679  17A6  0BC4               	decfsz	??___flmul+4,f
 22680  17A7  2FA2               	goto	u9245
 22681  17A8  0843               	movf	??___flmul+3,w
 22682  17A9  00CF               	movwf	___flmul@prod+3
 22683  17AA  0842               	movf	??___flmul+2,w
 22684  17AB  00CE               	movwf	___flmul@prod+2
 22685  17AC  0841               	movf	??___flmul+1,w
 22686  17AD  00CD               	movwf	___flmul@prod+1
 22687  17AE  0840               	movf	??___flmul,w
 22688  17AF  00CC               	movwf	___flmul@prod
 22689  17B0  3001               	movlw	1
 22690  17B1  07D0               	addwf	___flmul@temp,f
 22691  17B2  3000               	movlw	0
 22692  17B3  3DD1               	addwfc	___flmul@temp+1,f
 22693  17B4                     l7039:	
 22694  17B4  0851               	movf	___flmul@temp+1,w
 22695  17B5  3A80               	xorlw	128
 22696  17B6  00C0               	movwf	??___flmul
 22697  17B7  3080               	movlw	128
 22698  17B8  0240               	subwf	??___flmul,w
 22699  17B9  1D03               	skipz
 22700  17BA  2FBD               	goto	u9255
 22701  17BB  30FF               	movlw	255
 22702  17BC  0250               	subwf	___flmul@temp,w
 22703  17BD                     u9255:	
 22704  17BD  1C03               	skipc
 22705  17BE  2FC9               	goto	l7043
 22706  17BF  307F               	movlw	127
 22707  17C0  0140               	movlb	0	; select bank0
 22708  17C1  00CF               	movwf	___flmul@prod+3
 22709  17C2  3080               	movlw	128
 22710  17C3  00CE               	movwf	___flmul@prod+2
 22711  17C4  3000               	movlw	0
 22712  17C5  00CD               	movwf	___flmul@prod+1
 22713  17C6  3000               	movlw	0
 22714  17C7  00CC               	movwf	___flmul@prod
 22715  17C8  2FF3               	goto	l1390
 22716  17C9                     l7043:	
 22717  17C9  0140               	movlb	0	; select bank0
 22718  17CA  0851               	movf	___flmul@temp+1,w
 22719  17CB  3A80               	xorlw	128
 22720  17CC  00C0               	movwf	??___flmul
 22721  17CD  3080               	movlw	128
 22722  17CE  0240               	subwf	??___flmul,w
 22723  17CF  1D03               	skipz
 22724  17D0  2FD3               	goto	u9265
 22725  17D1  3001               	movlw	1
 22726  17D2  0250               	subwf	___flmul@temp,w
 22727  17D3                     u9265:	
 22728  17D3  1803               	skipnc
 22729  17D4  2FE0               	goto	l7049
 22730  17D5  3000               	movlw	0
 22731  17D6  0140               	movlb	0	; select bank0
 22732  17D7  00CF               	movwf	___flmul@prod+3
 22733  17D8  3000               	movlw	0
 22734  17D9  00CE               	movwf	___flmul@prod+2
 22735  17DA  3000               	movlw	0
 22736  17DB  00CD               	movwf	___flmul@prod+1
 22737  17DC  3000               	movlw	0
 22738  17DD  00CC               	movwf	___flmul@prod
 22739  17DE  01C5               	clrf	___flmul@sign
 22740  17DF  2FF3               	goto	l1390
 22741  17E0                     l7049:	
 22742  17E0  0140               	movlb	0	; select bank0
 22743  17E1  0850               	movf	___flmul@temp,w
 22744  17E2  00C0               	movwf	??___flmul
 22745  17E3  0840               	movf	??___flmul,w
 22746  17E4  00CB               	movwf	___flmul@bexp
 22747  17E5  30FF               	movlw	255
 22748  17E6  05CC               	andwf	___flmul@prod,f
 22749  17E7  30FF               	movlw	255
 22750  17E8  05CD               	andwf	___flmul@prod+1,f
 22751  17E9  307F               	movlw	127
 22752  17EA  05CE               	andwf	___flmul@prod+2,f
 22753  17EB  3000               	movlw	0
 22754  17EC  05CF               	andwf	___flmul@prod+3,f
 22755  17ED  184B               	btfsc	___flmul@bexp,0
 22756  17EE  17CE               	bsf	___flmul@prod+2,7
 22757  17EF  364B               	lsrf	___flmul@bexp,w
 22758  17F0  00C0               	movwf	??___flmul
 22759  17F1  0840               	movf	??___flmul,w
 22760  17F2  00CF               	movwf	___flmul@prod+3
 22761  17F3                     l1390:	
 22762  17F3  0845               	movf	___flmul@sign,w
 22763  17F4  00C0               	movwf	??___flmul
 22764  17F5  0840               	movf	??___flmul,w
 22765  17F6  04CF               	iorwf	___flmul@prod+3,f
 22766  17F7  084F               	movf	___flmul@prod+3,w
 22767  17F8  00BB               	movwf	?___flmul+3
 22768  17F9  084E               	movf	___flmul@prod+2,w
 22769  17FA  00BA               	movwf	?___flmul+2
 22770  17FB  084D               	movf	___flmul@prod+1,w
 22771  17FC  00B9               	movwf	?___flmul+1
 22772  17FD  084C               	movf	___flmul@prod,w
 22773  17FE  00B8               	movwf	?___flmul
 22774  17FF  0008               	return
 22775  1800                     __end_of___flmul:	
 22776                           
 22777                           	psect	text67
 22778  35A4                     __ptext67:	
 22779 ;; *************** function __Umul8_16 *****************
 22780 ;; Defined at:
 22781 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 22782 ;; Parameters:    Size  Location     Type
 22783 ;;  multiplier      1    wreg     unsigned char 
 22784 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 22785 ;; Auto vars:     Size  Location     Type
 22786 ;;  multiplier      1   12[BANK0 ] unsigned char 
 22787 ;;  word_mpld       2   10[BANK0 ] unsigned int 
 22788 ;;  product         2    8[BANK0 ] unsigned int 
 22789 ;; Return value:  Size  Location     Type
 22790 ;;                  2    4[BANK0 ] unsigned int 
 22791 ;; Registers used:
 22792 ;;		wreg, status,2, status,0
 22793 ;; Tracked objects:
 22794 ;;		On entry : 0/0
 22795 ;;		On exit  : 0/0
 22796 ;;		Unchanged: 0/0
 22797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22799 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22801 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22802 ;;Total ram usage:        9 bytes
 22803 ;; Hardware stack levels used:    1
 22804 ;; Hardware stack levels required when called:    3
 22805 ;; This function calls:
 22806 ;;		Nothing
 22807 ;; This function is called by:
 22808 ;;		___flmul
 22809 ;; This function uses a non-reentrant model
 22810 ;;
 22811                           
 22812                           
 22813                           ;psect for function __Umul8_16
 22814  35A4                     __Umul8_16:	
 22815                           
 22816                           ;incstack = 0
 22817                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 22818                           ;__Umul8_16@multiplier stored from wreg
 22819  35A4  0140               	movlb	0	; select bank0
 22820  35A5  00AC               	movwf	__Umul8_16@multiplier
 22821  35A6  01A8               	clrf	__Umul8_16@product
 22822  35A7  01A9               	clrf	__Umul8_16@product+1
 22823  35A8  0824               	movf	__Umul8_16@multiplicand,w
 22824  35A9  00A6               	movwf	??__Umul8_16
 22825  35AA  01A7               	clrf	??__Umul8_16+1
 22826  35AB  0826               	movf	??__Umul8_16,w
 22827  35AC  00AA               	movwf	__Umul8_16@word_mpld
 22828  35AD  0827               	movf	??__Umul8_16+1,w
 22829  35AE  00AB               	movwf	__Umul8_16@word_mpld+1
 22830  35AF                     l6619:	
 22831  35AF  1C2C               	btfss	__Umul8_16@multiplier,0
 22832  35B0  2DB5               	goto	l1475
 22833  35B1  082A               	movf	__Umul8_16@word_mpld,w
 22834  35B2  07A8               	addwf	__Umul8_16@product,f
 22835  35B3  082B               	movf	__Umul8_16@word_mpld+1,w
 22836  35B4  3DA9               	addwfc	__Umul8_16@product+1,f
 22837  35B5                     l1475:	
 22838  35B5  3001               	movlw	1
 22839  35B6                     u8375:	
 22840  35B6  35AA               	lslf	__Umul8_16@word_mpld,f
 22841  35B7  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 22842  35B8  0B89               	decfsz	9,f
 22843  35B9  2DB6               	goto	u8375
 22844  35BA  1003               	clrc
 22845  35BB  0CAC               	rrf	__Umul8_16@multiplier,f
 22846  35BC  082C               	movf	__Umul8_16@multiplier,w
 22847  35BD  1D03               	btfss	3,2
 22848  35BE  2DAF               	goto	l6619
 22849  35BF  0829               	movf	__Umul8_16@product+1,w
 22850  35C0  00A5               	movwf	?__Umul8_16+1
 22851  35C1  0828               	movf	__Umul8_16@product,w
 22852  35C2  00A4               	movwf	?__Umul8_16
 22853  35C3  0008               	return
 22854  35C4                     __end_of__Umul8_16:	
 22855                           
 22856                           	psect	text68
 22857  1E28                     __ptext68:	
 22858 ;; *************** function ___fldiv *****************
 22859 ;; Defined at:
 22860 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 22861 ;; Parameters:    Size  Location     Type
 22862 ;;  a               4   50[BANK0 ] unsigned int 
 22863 ;;  b               4   54[BANK0 ] unsigned int 
 22864 ;; Auto vars:     Size  Location     Type
 22865 ;;  grs             4    7[BANK1 ] unsigned long 
 22866 ;;  rem             4    0[BANK1 ] unsigned long 
 22867 ;;  new_exp         2    5[BANK1 ] int 
 22868 ;;  aexp            1   12[BANK1 ] unsigned char 
 22869 ;;  bexp            1   11[BANK1 ] unsigned char 
 22870 ;;  sign            1    4[BANK1 ] unsigned char 
 22871 ;; Return value:  Size  Location     Type
 22872 ;;                  4   50[BANK0 ] unsigned char 
 22873 ;; Registers used:
 22874 ;;		wreg, status,2, status,0
 22875 ;; Tracked objects:
 22876 ;;		On entry : 0/0
 22877 ;;		On exit  : 0/0
 22878 ;;		Unchanged: 0/0
 22879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22880 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22881 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22882 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22883 ;;      Totals:         0      13      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22884 ;;Total ram usage:       26 bytes
 22885 ;; Hardware stack levels used:    1
 22886 ;; Hardware stack levels required when called:    3
 22887 ;; This function calls:
 22888 ;;		Nothing
 22889 ;; This function is called by:
 22890 ;;		_checkChannelStatus
 22891 ;;		_systemCheck
 22892 ;;		_calcRequiredPower
 22893 ;;		_getAnalogValues
 22894 ;;		_channelThing
 22895 ;;		_ftoa
 22896 ;; This function uses a non-reentrant model
 22897 ;;
 22898                           
 22899                           
 22900                           ;psect for function ___fldiv
 22901  1E28                     ___fldiv:	
 22902                           
 22903                           ;incstack = 0
 22904                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 22905  1E28  0140               	movlb	0	; select bank0
 22906  1E29  0859               	movf	___fldiv@b+3,w
 22907  1E2A  3980               	andlw	128
 22908  1E2B  00DA               	movwf	??___fldiv
 22909  1E2C  085A               	movf	??___fldiv,w
 22910  1E2D  0141               	movlb	1	; select bank1
 22911  1E2E  00A4               	movwf	___fldiv@sign^(0+128)
 22912  1E2F  0140               	movlb	0	; select bank0
 22913  1E30  3559               	lslf	___fldiv@b+3,w
 22914  1E31  00DA               	movwf	??___fldiv
 22915  1E32  085A               	movf	??___fldiv,w
 22916  1E33  0141               	movlb	1	; select bank1
 22917  1E34  00AB               	movwf	___fldiv@bexp^(0+128)
 22918  1E35  0140               	movlb	0	; select bank0
 22919  1E36  1FD8               	btfss	___fldiv@b+2,7
 22920  1E37  2E3A               	goto	l6789
 22921  1E38  0141               	movlb	1	; select bank1
 22922  1E39  142B               	bsf	___fldiv@bexp^(0+128),0
 22923  1E3A                     l6789:	
 22924  1E3A  0141               	movlb	1	; select bank1
 22925  1E3B  082B               	movf	___fldiv@bexp^(0+128),w
 22926  1E3C  1903               	btfsc	3,2
 22927  1E3D  2E4E               	goto	l6799
 22928  1E3E  0A2B               	incf	___fldiv@bexp^(0+128),w
 22929  1E3F  1D03               	btfss	3,2
 22930  1E40  2E4A               	goto	l6795
 22931  1E41  3000               	movlw	0
 22932  1E42  0140               	movlb	0	; select bank0
 22933  1E43  00D9               	movwf	___fldiv@b+3
 22934  1E44  3000               	movlw	0
 22935  1E45  00D8               	movwf	___fldiv@b+2
 22936  1E46  3000               	movlw	0
 22937  1E47  00D7               	movwf	___fldiv@b+1
 22938  1E48  3000               	movlw	0
 22939  1E49  00D6               	movwf	___fldiv@b
 22940  1E4A                     l6795:	
 22941  1E4A  0140               	movlb	0	; select bank0
 22942  1E4B  17D8               	bsf	___fldiv@b+2,7
 22943  1E4C  01D9               	clrf	___fldiv@b+3
 22944  1E4D  2E57               	goto	l6801
 22945  1E4E                     l6799:	
 22946  1E4E  3000               	movlw	0
 22947  1E4F  0140               	movlb	0	; select bank0
 22948  1E50  00D9               	movwf	___fldiv@b+3
 22949  1E51  3000               	movlw	0
 22950  1E52  00D8               	movwf	___fldiv@b+2
 22951  1E53  3000               	movlw	0
 22952  1E54  00D7               	movwf	___fldiv@b+1
 22953  1E55  3000               	movlw	0
 22954  1E56  00D6               	movwf	___fldiv@b
 22955  1E57                     l6801:	
 22956  1E57  0855               	movf	___fldiv@a+3,w
 22957  1E58  3980               	andlw	128
 22958  1E59  00DA               	movwf	??___fldiv
 22959  1E5A  085A               	movf	??___fldiv,w
 22960  1E5B  0141               	movlb	1	; select bank1
 22961  1E5C  06A4               	xorwf	___fldiv@sign^(0+128),f
 22962  1E5D  0140               	movlb	0	; select bank0
 22963  1E5E  3555               	lslf	___fldiv@a+3,w
 22964  1E5F  00DA               	movwf	??___fldiv
 22965  1E60  085A               	movf	??___fldiv,w
 22966  1E61  0141               	movlb	1	; select bank1
 22967  1E62  00AC               	movwf	___fldiv@aexp^(0+128)
 22968  1E63  0140               	movlb	0	; select bank0
 22969  1E64  1FD4               	btfss	___fldiv@a+2,7
 22970  1E65  2E68               	goto	l6809
 22971  1E66  0141               	movlb	1	; select bank1
 22972  1E67  142C               	bsf	___fldiv@aexp^(0+128),0
 22973  1E68                     l6809:	
 22974  1E68  0141               	movlb	1	; select bank1
 22975  1E69  082C               	movf	___fldiv@aexp^(0+128),w
 22976  1E6A  1903               	btfsc	3,2
 22977  1E6B  2E7C               	goto	l6819
 22978  1E6C  0A2C               	incf	___fldiv@aexp^(0+128),w
 22979  1E6D  1D03               	btfss	3,2
 22980  1E6E  2E78               	goto	l6815
 22981  1E6F  3000               	movlw	0
 22982  1E70  0140               	movlb	0	; select bank0
 22983  1E71  00D5               	movwf	___fldiv@a+3
 22984  1E72  3000               	movlw	0
 22985  1E73  00D4               	movwf	___fldiv@a+2
 22986  1E74  3000               	movlw	0
 22987  1E75  00D3               	movwf	___fldiv@a+1
 22988  1E76  3000               	movlw	0
 22989  1E77  00D2               	movwf	___fldiv@a
 22990  1E78                     l6815:	
 22991  1E78  0140               	movlb	0	; select bank0
 22992  1E79  17D4               	bsf	___fldiv@a+2,7
 22993  1E7A  01D5               	clrf	___fldiv@a+3
 22994  1E7B  2E85               	goto	l1338
 22995  1E7C                     l6819:	
 22996  1E7C  3000               	movlw	0
 22997  1E7D  0140               	movlb	0	; select bank0
 22998  1E7E  00D5               	movwf	___fldiv@a+3
 22999  1E7F  3000               	movlw	0
 23000  1E80  00D4               	movwf	___fldiv@a+2
 23001  1E81  3000               	movlw	0
 23002  1E82  00D3               	movwf	___fldiv@a+1
 23003  1E83  3000               	movlw	0
 23004  1E84  00D2               	movwf	___fldiv@a
 23005  1E85                     l1338:	
 23006  1E85  0855               	movf	___fldiv@a+3,w
 23007  1E86  0454               	iorwf	___fldiv@a+2,w
 23008  1E87  0453               	iorwf	___fldiv@a+1,w
 23009  1E88  0452               	iorwf	___fldiv@a,w
 23010  1E89  1D03               	skipz
 23011  1E8A  2EA6               	goto	l6829
 23012  1E8B  3000               	movlw	0
 23013  1E8C  00D9               	movwf	___fldiv@b+3
 23014  1E8D  3000               	movlw	0
 23015  1E8E  00D8               	movwf	___fldiv@b+2
 23016  1E8F  3000               	movlw	0
 23017  1E90  00D7               	movwf	___fldiv@b+1
 23018  1E91  3000               	movlw	0
 23019  1E92  00D6               	movwf	___fldiv@b
 23020  1E93  3080               	movlw	128
 23021  1E94  04D8               	iorwf	___fldiv@b+2,f
 23022  1E95  307F               	movlw	127
 23023  1E96  04D9               	iorwf	___fldiv@b+3,f
 23024  1E97                     L11:	
 23025  1E97  0141               	movlb	1	; select bank1
 23026  1E98  0824               	movf	___fldiv@sign^(0+128),w
 23027  1E99  0140               	movlb	0	; select bank0
 23028  1E9A  00DA               	movwf	??___fldiv
 23029  1E9B  085A               	movf	??___fldiv,w
 23030  1E9C  04D9               	iorwf	___fldiv@b+3,f
 23031  1E9D  0859               	movf	___fldiv@b+3,w
 23032  1E9E  00D5               	movwf	?___fldiv+3
 23033  1E9F  0858               	movf	___fldiv@b+2,w
 23034  1EA0  00D4               	movwf	?___fldiv+2
 23035  1EA1  0857               	movf	___fldiv@b+1,w
 23036  1EA2  00D3               	movwf	?___fldiv+1
 23037  1EA3  0856               	movf	___fldiv@b,w
 23038  1EA4  00D2               	movwf	?___fldiv
 23039  1EA5  0008               	return
 23040  1EA6                     l6829:	
 23041  1EA6  0141               	movlb	1	; select bank1
 23042  1EA7  082B               	movf	___fldiv@bexp^(0+128),w
 23043  1EA8  1D03               	btfss	3,2
 23044  1EA9  2EB4               	goto	l6835
 23045  1EAA  3000               	movlw	0
 23046  1EAB  0140               	movlb	0	; select bank0
 23047  1EAC  00D5               	movwf	?___fldiv+3
 23048  1EAD  3000               	movlw	0
 23049  1EAE  00D4               	movwf	?___fldiv+2
 23050  1EAF  3000               	movlw	0
 23051  1EB0  00D3               	movwf	?___fldiv+1
 23052  1EB1  3000               	movlw	0
 23053  1EB2  00D2               	movwf	?___fldiv
 23054  1EB3  0008               	return
 23055  1EB4                     l6835:	
 23056  1EB4  082B               	movf	___fldiv@bexp^(0+128),w
 23057  1EB5  0140               	movlb	0	; select bank0
 23058  1EB6  00DA               	movwf	??___fldiv
 23059  1EB7  01DB               	clrf	??___fldiv+1
 23060  1EB8  085B               	movf	??___fldiv+1,w
 23061  1EB9  00DD               	movwf	??___fldiv+3
 23062  1EBA  0141               	movlb	1	; select bank1
 23063  1EBB  082C               	movf	___fldiv@aexp^(0+128),w
 23064  1EBC  0140               	movlb	0	; select bank0
 23065  1EBD  025A               	subwf	??___fldiv,w
 23066  1EBE  00DC               	movwf	??___fldiv+2
 23067  1EBF  1C03               	skipc
 23068  1EC0  03DD               	decf	??___fldiv+3,f
 23069  1EC1  085C               	movf	??___fldiv+2,w
 23070  1EC2  3E7F               	addlw	127
 23071  1EC3  0141               	movlb	1	; select bank1
 23072  1EC4  00A5               	movwf	___fldiv@new_exp^(0+128)
 23073  1EC5  3000               	movlw	0
 23074  1EC6  0140               	movlb	0	; select bank0
 23075  1EC7  3D5D               	addwfc	??___fldiv+3,w
 23076  1EC8  0141               	movlb	1	; select bank1
 23077  1EC9  00A6               	movwf	(___fldiv@new_exp+1)^(0+128)
 23078  1ECA  0140               	movlb	0	; select bank0
 23079  1ECB  0859               	movf	___fldiv@b+3,w
 23080  1ECC  0141               	movlb	1	; select bank1
 23081  1ECD  00A3               	movwf	(___fldiv@rem+3)^(0+128)
 23082  1ECE  0140               	movlb	0	; select bank0
 23083  1ECF  0858               	movf	___fldiv@b+2,w
 23084  1ED0  0141               	movlb	1	; select bank1
 23085  1ED1  00A2               	movwf	(___fldiv@rem+2)^(0+128)
 23086  1ED2  0140               	movlb	0	; select bank0
 23087  1ED3  0857               	movf	___fldiv@b+1,w
 23088  1ED4  0141               	movlb	1	; select bank1
 23089  1ED5  00A1               	movwf	(___fldiv@rem+1)^(0+128)
 23090  1ED6  0140               	movlb	0	; select bank0
 23091  1ED7  0856               	movf	___fldiv@b,w
 23092  1ED8  0141               	movlb	1	; select bank1
 23093  1ED9  00A0               	movwf	___fldiv@rem^(0+128)
 23094  1EDA  3000               	movlw	0
 23095  1EDB  0140               	movlb	0	; select bank0
 23096  1EDC  00D9               	movwf	___fldiv@b+3
 23097  1EDD  3000               	movlw	0
 23098  1EDE  00D8               	movwf	___fldiv@b+2
 23099  1EDF  3000               	movlw	0
 23100  1EE0  00D7               	movwf	___fldiv@b+1
 23101  1EE1  3000               	movlw	0
 23102  1EE2  00D6               	movwf	___fldiv@b
 23103  1EE3  3000               	movlw	0
 23104  1EE4  0141               	movlb	1	; select bank1
 23105  1EE5  00AA               	movwf	(___fldiv@grs+3)^(0+128)
 23106  1EE6  3000               	movlw	0
 23107  1EE7  00A9               	movwf	(___fldiv@grs+2)^(0+128)
 23108  1EE8  3000               	movlw	0
 23109  1EE9  00A8               	movwf	(___fldiv@grs+1)^(0+128)
 23110  1EEA  3000               	movlw	0
 23111  1EEB  00A7               	movwf	___fldiv@grs^(0+128)
 23112  1EEC  01AC               	clrf	___fldiv@aexp^(0+128)
 23113  1EED                     l6863:	
 23114  1EED  301A               	movlw	26
 23115  1EEE  022C               	subwf	___fldiv@aexp^(0+128),w
 23116  1EEF  1803               	btfsc	3,0
 23117  1EF0  2F40               	goto	l6865
 23118  1EF1  082C               	movf	___fldiv@aexp^(0+128),w
 23119  1EF2  1903               	btfsc	3,2
 23120  1EF3  2F10               	goto	l6855
 23121  1EF4  3001               	movlw	1
 23122  1EF5                     u8825:	
 23123  1EF5  35A0               	lslf	___fldiv@rem^(0+128),f
 23124  1EF6  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
 23125  1EF7  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
 23126  1EF8  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
 23127  1EF9  0B89               	decfsz	9,f
 23128  1EFA  2EF5               	goto	u8825
 23129  1EFB  3001               	movlw	1
 23130  1EFC                     u8835:	
 23131  1EFC  0140               	movlb	0	; select bank0
 23132  1EFD  35D6               	lslf	___fldiv@b,f
 23133  1EFE  0DD7               	rlf	___fldiv@b+1,f
 23134  1EFF  0DD8               	rlf	___fldiv@b+2,f
 23135  1F00  0DD9               	rlf	___fldiv@b+3,f
 23136  1F01  0B89               	decfsz	9,f
 23137  1F02  2EFC               	goto	u8835
 23138  1F03  0141               	movlb	1	; select bank1
 23139  1F04  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 23140  1F05  2F08               	goto	l6853
 23141  1F06  0140               	movlb	0	; select bank0
 23142  1F07  1456               	bsf	___fldiv@b,0
 23143  1F08                     l6853:	
 23144  1F08  3001               	movlw	1
 23145  1F09                     u8855:	
 23146  1F09  0141               	movlb	1	; select bank1
 23147  1F0A  35A7               	lslf	___fldiv@grs^(0+128),f
 23148  1F0B  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 23149  1F0C  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 23150  1F0D  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 23151  1F0E  0B89               	decfsz	9,f
 23152  1F0F  2F09               	goto	u8855
 23153  1F10                     l6855:	
 23154  1F10  0140               	movlb	0	; select bank0
 23155  1F11  0855               	movf	___fldiv@a+3,w
 23156  1F12  0141               	movlb	1	; select bank1
 23157  1F13  0223               	subwf	(___fldiv@rem+3)^(0+128),w
 23158  1F14  1D03               	skipz
 23159  1F15  2F26               	goto	u8865
 23160  1F16  0140               	movlb	0	; select bank0
 23161  1F17  0854               	movf	___fldiv@a+2,w
 23162  1F18  0141               	movlb	1	; select bank1
 23163  1F19  0222               	subwf	(___fldiv@rem+2)^(0+128),w
 23164  1F1A  1D03               	skipz
 23165  1F1B  2F26               	goto	u8865
 23166  1F1C  0140               	movlb	0	; select bank0
 23167  1F1D  0853               	movf	___fldiv@a+1,w
 23168  1F1E  0141               	movlb	1	; select bank1
 23169  1F1F  0221               	subwf	(___fldiv@rem+1)^(0+128),w
 23170  1F20  1D03               	skipz
 23171  1F21  2F26               	goto	u8865
 23172  1F22  0140               	movlb	0	; select bank0
 23173  1F23  0852               	movf	___fldiv@a,w
 23174  1F24  0141               	movlb	1	; select bank1
 23175  1F25  0220               	subwf	___fldiv@rem^(0+128),w
 23176  1F26                     u8865:	
 23177  1F26  1C03               	skipc
 23178  1F27  2F39               	goto	l6861
 23179  1F28  172A               	bsf	(___fldiv@grs^(0+128)+3),6
 23180  1F29  0140               	movlb	0	; select bank0
 23181  1F2A  0852               	movf	___fldiv@a,w
 23182  1F2B  0141               	movlb	1	; select bank1
 23183  1F2C  02A0               	subwf	___fldiv@rem^(0+128),f
 23184  1F2D  0140               	movlb	0	; select bank0
 23185  1F2E  0853               	movf	___fldiv@a+1,w
 23186  1F2F  0141               	movlb	1	; select bank1
 23187  1F30  3BA1               	subwfb	(___fldiv@rem+1)^(0+128),f
 23188  1F31  0140               	movlb	0	; select bank0
 23189  1F32  0854               	movf	___fldiv@a+2,w
 23190  1F33  0141               	movlb	1	; select bank1
 23191  1F34  3BA2               	subwfb	(___fldiv@rem+2)^(0+128),f
 23192  1F35  0140               	movlb	0	; select bank0
 23193  1F36  0855               	movf	___fldiv@a+3,w
 23194  1F37  0141               	movlb	1	; select bank1
 23195  1F38  3BA3               	subwfb	(___fldiv@rem+3)^(0+128),f
 23196  1F39                     l6861:	
 23197  1F39  3001               	movlw	1
 23198  1F3A  0140               	movlb	0	; select bank0
 23199  1F3B  00DA               	movwf	??___fldiv
 23200  1F3C  085A               	movf	??___fldiv,w
 23201  1F3D  0141               	movlb	1	; select bank1
 23202  1F3E  07AC               	addwf	___fldiv@aexp^(0+128),f
 23203  1F3F  2EED               	goto	l6863
 23204  1F40                     l6865:	
 23205  1F40  0823               	movf	(___fldiv@rem+3)^(0+128),w
 23206  1F41  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
 23207  1F42  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
 23208  1F43  0420               	iorwf	___fldiv@rem^(0+128),w
 23209  1F44  1D03               	btfss	3,2
 23210  1F45  1427               	bsf	___fldiv@grs^(0+128),0
 23211  1F46                     l6879:	
 23212  1F46  0140               	movlb	0	; select bank0
 23213  1F47  1BD8               	btfsc	___fldiv@b+2,7
 23214  1F48  2F62               	goto	l6881
 23215  1F49  3001               	movlw	1
 23216  1F4A                     u8895:	
 23217  1F4A  35D6               	lslf	___fldiv@b,f
 23218  1F4B  0DD7               	rlf	___fldiv@b+1,f
 23219  1F4C  0DD8               	rlf	___fldiv@b+2,f
 23220  1F4D  0DD9               	rlf	___fldiv@b+3,f
 23221  1F4E  0B89               	decfsz	9,f
 23222  1F4F  2F4A               	goto	u8895
 23223  1F50  0141               	movlb	1	; select bank1
 23224  1F51  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 23225  1F52  2F55               	goto	l6875
 23226  1F53  0140               	movlb	0	; select bank0
 23227  1F54  1456               	bsf	___fldiv@b,0
 23228  1F55                     l6875:	
 23229  1F55  3001               	movlw	1
 23230  1F56                     u8915:	
 23231  1F56  0141               	movlb	1	; select bank1
 23232  1F57  35A7               	lslf	___fldiv@grs^(0+128),f
 23233  1F58  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 23234  1F59  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 23235  1F5A  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 23236  1F5B  0B89               	decfsz	9,f
 23237  1F5C  2F56               	goto	u8915
 23238  1F5D  30FF               	movlw	255
 23239  1F5E  07A5               	addwf	___fldiv@new_exp^(0+128),f
 23240  1F5F  30FF               	movlw	255
 23241  1F60  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 23242  1F61  2F46               	goto	l6879
 23243  1F62                     l6881:	
 23244  1F62  0141               	movlb	1	; select bank1
 23245  1F63  01AC               	clrf	___fldiv@aexp^(0+128)
 23246  1F64  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 23247  1F65  2F84               	goto	l6891
 23248  1F66  30FF               	movlw	255
 23249  1F67  0527               	andwf	___fldiv@grs^(0+128),w
 23250  1F68  0140               	movlb	0	; select bank0
 23251  1F69  00DA               	movwf	??___fldiv
 23252  1F6A  30FF               	movlw	255
 23253  1F6B  0141               	movlb	1	; select bank1
 23254  1F6C  0528               	andwf	(___fldiv@grs+1)^(0+128),w
 23255  1F6D  0140               	movlb	0	; select bank0
 23256  1F6E  00DB               	movwf	??___fldiv+1
 23257  1F6F  30FF               	movlw	255
 23258  1F70  0141               	movlb	1	; select bank1
 23259  1F71  0529               	andwf	(___fldiv@grs+2)^(0+128),w
 23260  1F72  0140               	movlb	0	; select bank0
 23261  1F73  00DC               	movwf	??___fldiv+2
 23262  1F74  307F               	movlw	127
 23263  1F75  0141               	movlb	1	; select bank1
 23264  1F76  052A               	andwf	(___fldiv@grs+3)^(0+128),w
 23265  1F77  0140               	movlb	0	; select bank0
 23266  1F78  00DD               	movwf	??___fldiv+3
 23267  1F79  085D               	movf	??___fldiv+3,w
 23268  1F7A  045C               	iorwf	??___fldiv+2,w
 23269  1F7B  045B               	iorwf	??___fldiv+1,w
 23270  1F7C  045A               	iorwf	??___fldiv,w
 23271  1F7D  1903               	skipnz
 23272  1F7E  1856               	btfsc	___fldiv@b,0
 23273  1F7F  2F81               	goto	l6887
 23274  1F80  2F84               	goto	l6891
 23275  1F81                     l6887:	
 23276  1F81  0141               	movlb	1	; select bank1
 23277  1F82  01AC               	clrf	___fldiv@aexp^(0+128)
 23278  1F83  0AAC               	incf	___fldiv@aexp^(0+128),f
 23279  1F84                     l6891:	
 23280  1F84  0141               	movlb	1	; select bank1
 23281  1F85  082C               	movf	___fldiv@aexp^(0+128),w
 23282  1F86  1903               	btfsc	3,2
 23283  1F87  2FB0               	goto	l6901
 23284  1F88  3001               	movlw	1
 23285  1F89  0140               	movlb	0	; select bank0
 23286  1F8A  07D6               	addwf	___fldiv@b,f
 23287  1F8B  3000               	movlw	0
 23288  1F8C  3DD7               	addwfc	___fldiv@b+1,f
 23289  1F8D  3000               	movlw	0
 23290  1F8E  3DD8               	addwfc	___fldiv@b+2,f
 23291  1F8F  3000               	movlw	0
 23292  1F90  3DD9               	addwfc	___fldiv@b+3,f
 23293  1F91  1C59               	btfss	___fldiv@b+3,0
 23294  1F92  2FB0               	goto	l6901
 23295  1F93  0856               	movf	___fldiv@b,w
 23296  1F94  00DA               	movwf	??___fldiv
 23297  1F95  0857               	movf	___fldiv@b+1,w
 23298  1F96  00DB               	movwf	??___fldiv+1
 23299  1F97  0858               	movf	___fldiv@b+2,w
 23300  1F98  00DC               	movwf	??___fldiv+2
 23301  1F99  0859               	movf	___fldiv@b+3,w
 23302  1F9A  00DD               	movwf	??___fldiv+3
 23303  1F9B  3001               	movlw	1
 23304  1F9C  00DE               	movwf	??___fldiv+4
 23305  1F9D                     u8985:	
 23306  1F9D  37DD               	asrf	??___fldiv+3,f
 23307  1F9E  0CDC               	rrf	??___fldiv+2,f
 23308  1F9F  0CDB               	rrf	??___fldiv+1,f
 23309  1FA0  0CDA               	rrf	??___fldiv,f
 23310  1FA1  0BDE               	decfsz	??___fldiv+4,f
 23311  1FA2  2F9D               	goto	u8985
 23312  1FA3  085D               	movf	??___fldiv+3,w
 23313  1FA4  00D9               	movwf	___fldiv@b+3
 23314  1FA5  085C               	movf	??___fldiv+2,w
 23315  1FA6  00D8               	movwf	___fldiv@b+2
 23316  1FA7  085B               	movf	??___fldiv+1,w
 23317  1FA8  00D7               	movwf	___fldiv@b+1
 23318  1FA9  085A               	movf	??___fldiv,w
 23319  1FAA  00D6               	movwf	___fldiv@b
 23320  1FAB  3001               	movlw	1
 23321  1FAC  0141               	movlb	1	; select bank1
 23322  1FAD  07A5               	addwf	___fldiv@new_exp^(0+128),f
 23323  1FAE  3000               	movlw	0
 23324  1FAF  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 23325  1FB0                     l6901:	
 23326  1FB0  0141               	movlb	1	; select bank1
 23327  1FB1  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 23328  1FB2  3A80               	xorlw	128
 23329  1FB3  0140               	movlb	0	; select bank0
 23330  1FB4  00DA               	movwf	??___fldiv
 23331  1FB5  3080               	movlw	128
 23332  1FB6  025A               	subwf	??___fldiv,w
 23333  1FB7  1D03               	skipz
 23334  1FB8  2FBC               	goto	u8995
 23335  1FB9  30FF               	movlw	255
 23336  1FBA  0141               	movlb	1	; select bank1
 23337  1FBB  0225               	subwf	___fldiv@new_exp^(0+128),w
 23338  1FBC                     u8995:	
 23339  1FBC  1C03               	skipc
 23340  1FBD  2FCC               	goto	l1359
 23341  1FBE  30FF               	movlw	255
 23342  1FBF  0141               	movlb	1	; select bank1
 23343  1FC0  00A5               	movwf	___fldiv@new_exp^(0+128)
 23344  1FC1  3000               	movlw	0
 23345  1FC2  00A6               	movwf	(___fldiv@new_exp^(0+128)+1)
 23346  1FC3  3000               	movlw	0
 23347  1FC4  0140               	movlb	0	; select bank0
 23348  1FC5  00D9               	movwf	___fldiv@b+3
 23349  1FC6  3000               	movlw	0
 23350  1FC7  00D8               	movwf	___fldiv@b+2
 23351  1FC8  3000               	movlw	0
 23352  1FC9  00D7               	movwf	___fldiv@b+1
 23353  1FCA  3000               	movlw	0
 23354  1FCB  00D6               	movwf	___fldiv@b
 23355  1FCC                     l1359:	
 23356  1FCC  0141               	movlb	1	; select bank1
 23357  1FCD  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 23358  1FCE  3A80               	xorlw	128
 23359  1FCF  0140               	movlb	0	; select bank0
 23360  1FD0  00DA               	movwf	??___fldiv
 23361  1FD1  3080               	movlw	128
 23362  1FD2  025A               	subwf	??___fldiv,w
 23363  1FD3  1D03               	skipz
 23364  1FD4  2FD8               	goto	u9005
 23365  1FD5  3001               	movlw	1
 23366  1FD6  0141               	movlb	1	; select bank1
 23367  1FD7  0225               	subwf	___fldiv@new_exp^(0+128),w
 23368  1FD8                     u9005:	
 23369  1FD8  1803               	skipnc
 23370  1FD9  2FE8               	goto	l1360
 23371  1FDA  0141               	movlb	1	; select bank1
 23372  1FDB  01A5               	clrf	___fldiv@new_exp^(0+128)
 23373  1FDC  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 23374  1FDD  3000               	movlw	0
 23375  1FDE  0140               	movlb	0	; select bank0
 23376  1FDF  00D9               	movwf	___fldiv@b+3
 23377  1FE0  3000               	movlw	0
 23378  1FE1  00D8               	movwf	___fldiv@b+2
 23379  1FE2  3000               	movlw	0
 23380  1FE3  00D7               	movwf	___fldiv@b+1
 23381  1FE4  3000               	movlw	0
 23382  1FE5  00D6               	movwf	___fldiv@b
 23383  1FE6  0141               	movlb	1	; select bank1
 23384  1FE7  01A4               	clrf	___fldiv@sign^(0+128)
 23385  1FE8                     l1360:	
 23386  1FE8  0141               	movlb	1	; select bank1
 23387  1FE9  0825               	movf	___fldiv@new_exp^(0+128),w
 23388  1FEA  0140               	movlb	0	; select bank0
 23389  1FEB  00DA               	movwf	??___fldiv
 23390  1FEC  085A               	movf	??___fldiv,w
 23391  1FED  0141               	movlb	1	; select bank1
 23392  1FEE  00AB               	movwf	___fldiv@bexp^(0+128)
 23393  1FEF  1C2B               	btfss	___fldiv@bexp^(0+128),0
 23394  1FF0  2FF4               	goto	l6915
 23395  1FF1  0140               	movlb	0	; select bank0
 23396  1FF2  17D8               	bsf	___fldiv@b+2,7
 23397  1FF3  2FF9               	goto	l1362
 23398  1FF4                     l6915:	
 23399  1FF4  307F               	movlw	127
 23400  1FF5  0140               	movlb	0	; select bank0
 23401  1FF6  00DA               	movwf	??___fldiv
 23402  1FF7  085A               	movf	??___fldiv,w
 23403  1FF8  05D8               	andwf	___fldiv@b+2,f
 23404  1FF9                     l1362:	
 23405  1FF9  0141               	movlb	1	; select bank1
 23406  1FFA  362B               	lsrf	___fldiv@bexp^(0+128),w
 23407  1FFB  0140               	movlb	0	; select bank0
 23408  1FFC  00DA               	movwf	??___fldiv
 23409  1FFD  085A               	movf	??___fldiv,w
 23410  1FFE  00D9               	movwf	___fldiv@b+3
 23411  1FFF  2E97               	goto	L11
 23412  2000                     __end_of___fldiv:	
 23413                           
 23414                           	psect	text69
 23415  35E4                     __ptext69:	
 23416 ;; *************** function _OLED_loadSpecialChars *****************
 23417 ;; Defined at:
 23418 ;;		line 176 in file "oled.c"
 23419 ;; Parameters:    Size  Location     Type
 23420 ;;		None
 23421 ;; Auto vars:     Size  Location     Type
 23422 ;;  special        32   12[BANK0 ] unsigned char [32]
 23423 ;;  n               1   44[BANK0 ] unsigned char 
 23424 ;; Return value:  Size  Location     Type
 23425 ;;                  1    wreg      void 
 23426 ;; Registers used:
 23427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23428 ;; Tracked objects:
 23429 ;;		On entry : 0/0
 23430 ;;		On exit  : 0/0
 23431 ;;		Unchanged: 0/0
 23432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23434 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23436 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23437 ;;Total ram usage:       34 bytes
 23438 ;; Hardware stack levels used:    1
 23439 ;; Hardware stack levels required when called:    7
 23440 ;; This function calls:
 23441 ;;		_OLED_command
 23442 ;;		_OLED_write
 23443 ;; This function is called by:
 23444 ;;		_main
 23445 ;; This function uses a non-reentrant model
 23446 ;;
 23447                           
 23448                           
 23449                           ;psect for function _OLED_loadSpecialChars
 23450  35E4                     _OLED_loadSpecialChars:	
 23451                           
 23452                           ;oled.c: 178:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 23453                           
 23454                           ;incstack = 0
 23455                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23456  35E4  30CD               	movlw	low OLED_loadSpecialChars@F7985
 23457  35E5  0086               	movwf	6
 23458  35E6  3002               	movlw	high OLED_loadSpecialChars@F7985
 23459  35E7  0087               	movwf	7
 23460  35E8  302C               	movlw	low OLED_loadSpecialChars@special
 23461  35E9  0084               	movwf	4
 23462  35EA  3000               	movlw	high OLED_loadSpecialChars@special
 23463  35EB  0085               	movwf	5
 23464  35EC  3020               	movlw	32
 23465  35ED  0140               	movlb	0	; select bank0
 23466  35EE  00AB               	movwf	??_OLED_loadSpecialChars
 23467  35EF                     u6720:	
 23468  35EF  0016               	moviw fsr1++
 23469  35F0  001A               	movwi fsr0++
 23470  35F1  0BAB               	decfsz	??_OLED_loadSpecialChars,f
 23471  35F2  2DEF               	goto	u6720
 23472                           
 23473                           ;oled.c: 183:  uint8_t n;;oled.c: 185:  OLED_command(0x40 + 8);
 23474  35F3  3048               	movlw	72
 23475  35F4  31B4  24EA  31B5   	fcall	_OLED_command
 23476                           
 23477                           ;oled.c: 186:  for(n = 0; n < sizeof(special); n++) {
 23478  35F7  0140               	movlb	0	; select bank0
 23479  35F8  01CC               	clrf	OLED_loadSpecialChars@n
 23480  35F9                     l5653:	
 23481                           
 23482                           ;oled.c: 187:   OLED_write(special[n]);
 23483  35F9  084C               	movf	OLED_loadSpecialChars@n,w
 23484  35FA  3E2C               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 23485  35FB  0086               	movwf	6
 23486  35FC  0187               	clrf	7
 23487  35FD  0801               	movf	1,w
 23488  35FE  31B4  24FE  31B5   	fcall	_OLED_write
 23489                           
 23490                           ;oled.c: 188:  }
 23491  3601  3001               	movlw	1
 23492  3602  0140               	movlb	0	; select bank0
 23493  3603  00AB               	movwf	??_OLED_loadSpecialChars
 23494  3604  082B               	movf	??_OLED_loadSpecialChars,w
 23495  3605  07CC               	addwf	OLED_loadSpecialChars@n,f
 23496  3606  3020               	movlw	32
 23497  3607  024C               	subwf	OLED_loadSpecialChars@n,w
 23498  3608  1803               	btfsc	3,0
 23499  3609  0008               	return
 23500  360A  2DF9               	goto	l5653
 23501  360B                     __end_of_OLED_loadSpecialChars:	
 23502                           
 23503                           	psect	text70
 23504  34FE                     __ptext70:	
 23505 ;; *************** function _OLED_write *****************
 23506 ;; Defined at:
 23507 ;;		line 78 in file "oled.c"
 23508 ;; Parameters:    Size  Location     Type
 23509 ;;  value           1    wreg     unsigned char 
 23510 ;; Auto vars:     Size  Location     Type
 23511 ;;  value           1   10[BANK0 ] unsigned char 
 23512 ;; Return value:  Size  Location     Type
 23513 ;;                  1    wreg      void 
 23514 ;; Registers used:
 23515 ;;		wreg, status,2, status,0, pclath, cstack
 23516 ;; Tracked objects:
 23517 ;;		On entry : 0/0
 23518 ;;		On exit  : 0/0
 23519 ;;		Unchanged: 0/0
 23520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23525 ;;Total ram usage:        1 bytes
 23526 ;; Hardware stack levels used:    1
 23527 ;; Hardware stack levels required when called:    6
 23528 ;; This function calls:
 23529 ;;		_OLED_send
 23530 ;;		_OLED_waitForReady
 23531 ;; This function is called by:
 23532 ;;		_OLED_print_xy
 23533 ;;		_OLED_loadSpecialChars
 23534 ;;		_OLED_print
 23535 ;; This function uses a non-reentrant model
 23536 ;;
 23537                           
 23538                           
 23539                           ;psect for function _OLED_write
 23540  34FE                     _OLED_write:	
 23541                           
 23542                           ;incstack = 0
 23543                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 23544                           ;OLED_write@value stored from wreg
 23545  34FE  0140               	movlb	0	; select bank0
 23546  34FF  00AA               	movwf	OLED_write@value
 23547                           
 23548                           ;oled.c: 78: void OLED_write(uint8_t value);oled.c: 79: {;oled.c: 80:  OLED_send(value, 
      +                          1);
 23549  3500  01A7               	clrf	OLED_send@mode
 23550  3501  0AA7               	incf	OLED_send@mode,f
 23551  3502  082A               	movf	OLED_write@value,w
 23552  3503  31B5  2557  31B4   	fcall	_OLED_send
 23553                           
 23554                           ;oled.c: 81:  OLED_waitForReady();
 23555  3506  31A0  2000         	fcall	_OLED_waitForReady
 23556  3508  0008               	return
 23557  3509                     __end_of_OLED_write:	
 23558                           
 23559                           	psect	text71
 23560  2E52                     __ptext71:	
 23561 ;; *************** function _OLED_init *****************
 23562 ;; Defined at:
 23563 ;;		line 84 in file "oled.c"
 23564 ;; Parameters:    Size  Location     Type
 23565 ;;		None
 23566 ;; Auto vars:     Size  Location     Type
 23567 ;;		None
 23568 ;; Return value:  Size  Location     Type
 23569 ;;                  1    wreg      void 
 23570 ;; Registers used:
 23571 ;;		wreg, status,2, status,0, pclath, cstack
 23572 ;; Tracked objects:
 23573 ;;		On entry : 0/0
 23574 ;;		On exit  : 0/0
 23575 ;;		Unchanged: 0/0
 23576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23580 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23581 ;;Total ram usage:        1 bytes
 23582 ;; Hardware stack levels used:    1
 23583 ;; Hardware stack levels required when called:    7
 23584 ;; This function calls:
 23585 ;;		_OLED_command
 23586 ;;		_OLED_write4bits
 23587 ;; This function is called by:
 23588 ;;		_main
 23589 ;; This function uses a non-reentrant model
 23590 ;;
 23591                           
 23592                           
 23593                           ;psect for function _OLED_init
 23594  2E52                     _OLED_init:	
 23595                           
 23596                           ;oled.c: 86:  LATBbits.LATB4 = 0;
 23597                           
 23598                           ;incstack = 0
 23599                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 23600  2E52  0140               	movlb	0	; select bank0
 23601  2E53  1219               	bcf	25,4	;volatile
 23602                           
 23603                           ;oled.c: 87:  LATBbits.LATB2 = 0;
 23604  2E54  1119               	bcf	25,2	;volatile
 23605                           
 23606                           ;oled.c: 88:  LATBbits.LATB3 = 0;
 23607  2E55  1199               	bcf	25,3	;volatile
 23608                           
 23609                           ;oled.c: 90:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 23610  2E56  3041               	movlw	65
 23611  2E57  0140               	movlb	0	; select bank0
 23612  2E58  00AB               	movwf	??_OLED_init
 23613  2E59  30EE               	movlw	238
 23614  2E5A                     u11247:	
 23615  2E5A  0B89               	decfsz	9,f
 23616  2E5B  2E5A               	goto	u11247
 23617  2E5C  0BAB               	decfsz	??_OLED_init,f
 23618  2E5D  2E5A               	goto	u11247
 23619  2E5E  0000               	nop
 23620                           
 23621                           ;oled.c: 94:  LATBbits.LATB1 = 0;
 23622  2E5F  0140               	movlb	0	; select bank0
 23623  2E60  1099               	bcf	25,1	;volatile
 23624                           
 23625                           ;oled.c: 95:  LATBbits.LATB0 = 0;
 23626  2E61  1019               	bcf	25,0	;volatile
 23627                           
 23628                           ;oled.c: 96:  LATCbits.LATC5 = 0;
 23629  2E62  129A               	bcf	26,5	;volatile
 23630                           
 23631                           ;oled.c: 97:  LATCbits.LATC4 = 0;
 23632  2E63  121A               	bcf	26,4	;volatile
 23633                           
 23634                           ;oled.c: 108:  OLED_write4bits(0x03);
 23635  2E64  3003               	movlw	3
 23636  2E65  31A8  2011  31AE   	fcall	_OLED_write4bits
 23637                           
 23638                           ;oled.c: 109:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23639  2E68  3007               	movlw	7
 23640  2E69  0140               	movlb	0	; select bank0
 23641  2E6A  00AB               	movwf	??_OLED_init
 23642  2E6B  307D               	movlw	125
 23643  2E6C                     u11257:	
 23644  2E6C  0B89               	decfsz	9,f
 23645  2E6D  2E6C               	goto	u11257
 23646  2E6E  0BAB               	decfsz	??_OLED_init,f
 23647  2E6F  2E6C               	goto	u11257
 23648                           
 23649                           ;oled.c: 110:  OLED_write4bits(0x08);
 23650  2E70  3008               	movlw	8
 23651  2E71  31A8  2011  31AE   	fcall	_OLED_write4bits
 23652                           
 23653                           ;oled.c: 111:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23654  2E74  3007               	movlw	7
 23655  2E75  0140               	movlb	0	; select bank0
 23656  2E76  00AB               	movwf	??_OLED_init
 23657  2E77  307D               	movlw	125
 23658  2E78                     u11267:	
 23659  2E78  0B89               	decfsz	9,f
 23660  2E79  2E78               	goto	u11267
 23661  2E7A  0BAB               	decfsz	??_OLED_init,f
 23662  2E7B  2E78               	goto	u11267
 23663                           
 23664                           ;oled.c: 113:  OLED_write4bits(0x02);
 23665  2E7C  3002               	movlw	2
 23666  2E7D  31A8  2011  31AE   	fcall	_OLED_write4bits
 23667                           
 23668                           ;oled.c: 114:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23669  2E80  3007               	movlw	7
 23670  2E81  0140               	movlb	0	; select bank0
 23671  2E82  00AB               	movwf	??_OLED_init
 23672  2E83  307D               	movlw	125
 23673  2E84                     u11277:	
 23674  2E84  0B89               	decfsz	9,f
 23675  2E85  2E84               	goto	u11277
 23676  2E86  0BAB               	decfsz	??_OLED_init,f
 23677  2E87  2E84               	goto	u11277
 23678                           
 23679                           ;oled.c: 115:  OLED_write4bits(0x02);
 23680  2E88  3002               	movlw	2
 23681  2E89  31A8  2011  31AE   	fcall	_OLED_write4bits
 23682                           
 23683                           ;oled.c: 116:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23684  2E8C  3007               	movlw	7
 23685  2E8D  0140               	movlb	0	; select bank0
 23686  2E8E  00AB               	movwf	??_OLED_init
 23687  2E8F  307D               	movlw	125
 23688  2E90                     u11287:	
 23689  2E90  0B89               	decfsz	9,f
 23690  2E91  2E90               	goto	u11287
 23691  2E92  0BAB               	decfsz	??_OLED_init,f
 23692  2E93  2E90               	goto	u11287
 23693                           
 23694                           ;oled.c: 117:  OLED_write4bits(0x08);
 23695  2E94  3008               	movlw	8
 23696  2E95  31A8  2011  31AE   	fcall	_OLED_write4bits
 23697                           
 23698                           ;oled.c: 118:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23699  2E98  3007               	movlw	7
 23700  2E99  0140               	movlb	0	; select bank0
 23701  2E9A  00AB               	movwf	??_OLED_init
 23702  2E9B  307D               	movlw	125
 23703  2E9C                     u11297:	
 23704  2E9C  0B89               	decfsz	9,f
 23705  2E9D  2E9C               	goto	u11297
 23706  2E9E  0BAB               	decfsz	??_OLED_init,f
 23707  2E9F  2E9C               	goto	u11297
 23708                           
 23709                           ;oled.c: 120:  OLED_command(0x08);
 23710  2EA0  3008               	movlw	8
 23711  2EA1  31B4  24EA  31AE   	fcall	_OLED_command
 23712                           
 23713                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23714  2EA4  3007               	movlw	7
 23715  2EA5  0140               	movlb	0	; select bank0
 23716  2EA6  00AB               	movwf	??_OLED_init
 23717  2EA7  307D               	movlw	125
 23718  2EA8                     u11307:	
 23719  2EA8  0B89               	decfsz	9,f
 23720  2EA9  2EA8               	goto	u11307
 23721  2EAA  0BAB               	decfsz	??_OLED_init,f
 23722  2EAB  2EA8               	goto	u11307
 23723                           
 23724                           ;oled.c: 122:  OLED_command(0x01);
 23725  2EAC  3001               	movlw	1
 23726  2EAD  31B4  24EA  31AE   	fcall	_OLED_command
 23727                           
 23728                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23729  2EB0  3007               	movlw	7
 23730  2EB1  0140               	movlb	0	; select bank0
 23731  2EB2  00AB               	movwf	??_OLED_init
 23732  2EB3  307D               	movlw	125
 23733  2EB4                     u11317:	
 23734  2EB4  0B89               	decfsz	9,f
 23735  2EB5  2EB4               	goto	u11317
 23736  2EB6  0BAB               	decfsz	??_OLED_init,f
 23737  2EB7  2EB4               	goto	u11317
 23738                           
 23739                           ;oled.c: 124:  OLED_command(0x06);
 23740  2EB8  3006               	movlw	6
 23741  2EB9  31B4  24EA  31AE   	fcall	_OLED_command
 23742                           
 23743                           ;oled.c: 125:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23744  2EBC  3007               	movlw	7
 23745  2EBD  0140               	movlb	0	; select bank0
 23746  2EBE  00AB               	movwf	??_OLED_init
 23747  2EBF  307D               	movlw	125
 23748  2EC0                     u11327:	
 23749  2EC0  0B89               	decfsz	9,f
 23750  2EC1  2EC0               	goto	u11327
 23751  2EC2  0BAB               	decfsz	??_OLED_init,f
 23752  2EC3  2EC0               	goto	u11327
 23753                           
 23754                           ;oled.c: 126:  OLED_command(0x02);
 23755  2EC4  3002               	movlw	2
 23756  2EC5  31B4  24EA  31AE   	fcall	_OLED_command
 23757                           
 23758                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23759  2EC8  3007               	movlw	7
 23760  2EC9  0140               	movlb	0	; select bank0
 23761  2ECA  00AB               	movwf	??_OLED_init
 23762  2ECB  307D               	movlw	125
 23763  2ECC                     u11337:	
 23764  2ECC  0B89               	decfsz	9,f
 23765  2ECD  2ECC               	goto	u11337
 23766  2ECE  0BAB               	decfsz	??_OLED_init,f
 23767  2ECF  2ECC               	goto	u11337
 23768                           
 23769                           ;oled.c: 128:  OLED_command(0x0C);
 23770  2ED0  300C               	movlw	12
 23771  2ED1  31B4  24EA  31AE   	fcall	_OLED_command
 23772                           
 23773                           ;oled.c: 129:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23774  2ED4  3007               	movlw	7
 23775  2ED5  0140               	movlb	0	; select bank0
 23776  2ED6  00AB               	movwf	??_OLED_init
 23777  2ED7  307D               	movlw	125
 23778  2ED8                     u11347:	
 23779  2ED8  0B89               	decfsz	9,f
 23780  2ED9  2ED8               	goto	u11347
 23781  2EDA  0BAB               	decfsz	??_OLED_init,f
 23782  2EDB  2ED8               	goto	u11347
 23783  2EDC  0008               	return
 23784  2EDD                     __end_of_OLED_init:	
 23785                           
 23786                           	psect	text72
 23787  34EA                     __ptext72:	
 23788 ;; *************** function _OLED_command *****************
 23789 ;; Defined at:
 23790 ;;		line 72 in file "oled.c"
 23791 ;; Parameters:    Size  Location     Type
 23792 ;;  value           1    wreg     unsigned char 
 23793 ;; Auto vars:     Size  Location     Type
 23794 ;;  value           1   10[BANK0 ] unsigned char 
 23795 ;; Return value:  Size  Location     Type
 23796 ;;                  1    wreg      void 
 23797 ;; Registers used:
 23798 ;;		wreg, status,2, status,0, pclath, cstack
 23799 ;; Tracked objects:
 23800 ;;		On entry : 0/0
 23801 ;;		On exit  : 0/0
 23802 ;;		Unchanged: 0/0
 23803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23807 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23808 ;;Total ram usage:        1 bytes
 23809 ;; Hardware stack levels used:    1
 23810 ;; Hardware stack levels required when called:    6
 23811 ;; This function calls:
 23812 ;;		_OLED_send
 23813 ;;		_OLED_waitForReady
 23814 ;; This function is called by:
 23815 ;;		_OLED_off
 23816 ;;		_OLED_init
 23817 ;;		_OLED_scrollDisplayLeft
 23818 ;;		_OLED_scrollDisplayRight
 23819 ;;		_OLED_print_xy
 23820 ;;		_OLED_returnHome
 23821 ;;		_OLED_clearDisplay
 23822 ;;		_OLED_loadSpecialChars
 23823 ;;		_menu
 23824 ;;		_returnToPage
 23825 ;;		_OLED_setCursor
 23826 ;; This function uses a non-reentrant model
 23827 ;;
 23828                           
 23829                           
 23830                           ;psect for function _OLED_command
 23831  34EA                     _OLED_command:	
 23832                           
 23833                           ;incstack = 0
 23834                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 23835                           ;OLED_command@value stored from wreg
 23836  34EA  0140               	movlb	0	; select bank0
 23837  34EB  00AA               	movwf	OLED_command@value
 23838                           
 23839                           ;oled.c: 72: void OLED_command(uint8_t value);oled.c: 73: {;oled.c: 74:  OLED_send(value
      +                          , 0);
 23840  34EC  01A7               	clrf	OLED_send@mode
 23841  34ED  082A               	movf	OLED_command@value,w
 23842  34EE  31B5  2557  31B4   	fcall	_OLED_send
 23843                           
 23844                           ;oled.c: 75:  OLED_waitForReady();
 23845  34F1  31A0  2000         	fcall	_OLED_waitForReady
 23846  34F3  0008               	return
 23847  34F4                     __end_of_OLED_command:	
 23848                           
 23849                           	psect	text73
 23850  2000                     __ptext73:	
 23851 ;; *************** function _OLED_waitForReady *****************
 23852 ;; Defined at:
 23853 ;;		line 47 in file "oled.c"
 23854 ;; Parameters:    Size  Location     Type
 23855 ;;		None
 23856 ;; Auto vars:     Size  Location     Type
 23857 ;;  busy            1    4[BANK0 ] unsigned char 
 23858 ;; Return value:  Size  Location     Type
 23859 ;;                  1    wreg      void 
 23860 ;; Registers used:
 23861 ;;		wreg, status,2, status,0, pclath, cstack
 23862 ;; Tracked objects:
 23863 ;;		On entry : 0/0
 23864 ;;		On exit  : 0/0
 23865 ;;		Unchanged: 0/0
 23866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23871 ;;Total ram usage:        1 bytes
 23872 ;; Hardware stack levels used:    1
 23873 ;; Hardware stack levels required when called:    4
 23874 ;; This function calls:
 23875 ;;		_OLED_pulseEnable
 23876 ;; This function is called by:
 23877 ;;		_OLED_command
 23878 ;;		_OLED_write
 23879 ;; This function uses a non-reentrant model
 23880 ;;
 23881                           
 23882                           
 23883                           ;psect for function _OLED_waitForReady
 23884  2000                     _OLED_waitForReady:	
 23885                           
 23886                           ;oled.c: 51:  TRISCbits.TRISC4 = 1;
 23887                           
 23888                           ;incstack = 0
 23889                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0+pclath+cstack]
 23890  2000  0140               	movlb	0	; select bank0
 23891  2001  1614               	bsf	20,4	;volatile
 23892                           
 23893                           ;oled.c: 52:  LATBbits.LATB4 = 0;
 23894  2002  1219               	bcf	25,4	;volatile
 23895                           
 23896                           ;oled.c: 53:  LATBbits.LATB3 = 1;
 23897  2003  1599               	bsf	25,3	;volatile
 23898  2004                     l164:	
 23899                           ;oled.c: 55:  do {
 23900                           
 23901                           
 23902                           ;oled.c: 56:   LATBbits.LATB2 = 0;
 23903  2004  1119               	bcf	25,2	;volatile
 23904                           
 23905                           ;oled.c: 57:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 23906  2005  3003               	movlw	3
 23907  2006                     u11357:	
 23908  2006  0B89               	decfsz	9,f
 23909  2007  2806               	goto	u11357
 23910  2008  0000               	nop
 23911                           
 23912                           ;oled.c: 58:   LATBbits.LATB2 = 1;
 23913  2009  0140               	movlb	0	; select bank0
 23914  200A  1519               	bsf	25,2	;volatile
 23915                           
 23916                           ;oled.c: 60:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 23917  200B  3003               	movlw	3
 23918  200C                     u11367:	
 23919  200C  0B89               	decfsz	9,f
 23920  200D  280C               	goto	u11367
 23921  200E  0000               	nop
 23922                           
 23923                           ;oled.c: 61:   busy = PORTCbits.RC4;
 23924  200F  3000               	movlw	0
 23925  2010  0140               	movlb	0	; select bank0
 23926  2011  1A0E               	btfsc	14,4	;volatile
 23927  2012  3001               	movlw	1
 23928  2013  00A4               	movwf	OLED_waitForReady@busy
 23929                           
 23930                           ;oled.c: 63:   LATBbits.LATB2 = 0;
 23931  2014  1119               	bcf	25,2	;volatile
 23932                           
 23933                           ;oled.c: 65:   OLED_pulseEnable();
 23934  2015  31B4  24CE  31A0   	fcall	_OLED_pulseEnable
 23935                           
 23936                           ;oled.c: 66:  } while (busy);
 23937  2018  0140               	movlb	0	; select bank0
 23938  2019  0824               	movf	OLED_waitForReady@busy,w
 23939  201A  1D03               	btfss	3,2
 23940  201B  2804               	goto	l164
 23941                           
 23942                           ;oled.c: 68:  TRISCbits.TRISC4 = 0;
 23943  201C  1214               	bcf	20,4	;volatile
 23944                           
 23945                           ;oled.c: 69:  LATBbits.LATB3 = 0;
 23946  201D  1199               	bcf	25,3	;volatile
 23947  201E  0008               	return
 23948  201F                     __end_of_OLED_waitForReady:	
 23949                           
 23950                           	psect	text74
 23951  3557                     __ptext74:	
 23952 ;; *************** function _OLED_send *****************
 23953 ;; Defined at:
 23954 ;;		line 36 in file "oled.c"
 23955 ;; Parameters:    Size  Location     Type
 23956 ;;  value           1    wreg     unsigned char 
 23957 ;;  mode            1    7[BANK0 ] unsigned char 
 23958 ;; Auto vars:     Size  Location     Type
 23959 ;;  value           1    9[BANK0 ] unsigned char 
 23960 ;; Return value:  Size  Location     Type
 23961 ;;                  1    wreg      void 
 23962 ;; Registers used:
 23963 ;;		wreg, status,2, status,0, pclath, cstack
 23964 ;; Tracked objects:
 23965 ;;		On entry : 0/0
 23966 ;;		On exit  : 0/0
 23967 ;;		Unchanged: 0/0
 23968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23969 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23972 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23973 ;;Total ram usage:        3 bytes
 23974 ;; Hardware stack levels used:    1
 23975 ;; Hardware stack levels required when called:    5
 23976 ;; This function calls:
 23977 ;;		_OLED_write4bits
 23978 ;; This function is called by:
 23979 ;;		_OLED_command
 23980 ;;		_OLED_write
 23981 ;; This function uses a non-reentrant model
 23982 ;;
 23983                           
 23984                           
 23985                           ;psect for function _OLED_send
 23986  3557                     _OLED_send:	
 23987                           
 23988                           ;incstack = 0
 23989                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 23990                           ;OLED_send@value stored from wreg
 23991  3557  0140               	movlb	0	; select bank0
 23992  3558  00A9               	movwf	OLED_send@value
 23993                           
 23994                           ;oled.c: 36: void OLED_send(uint8_t value, uint8_t mode);oled.c: 37: {;oled.c: 38:  LATB
      +                          bits.LATB4 = mode;
 23995  3559  0C27               	rrf	OLED_send@mode,w
 23996  355A  1C03               	skipc
 23997  355B  1219               	bcf	25,4	;volatile
 23998  355C  1803               	skipnc
 23999  355D  1619               	bsf	25,4	;volatile
 24000                           
 24001                           ;oled.c: 39:  LATBbits.LATB3 = 0;
 24002  355E  1199               	bcf	25,3	;volatile
 24003                           
 24004                           ;oled.c: 41:  OLED_write4bits(value >> 4);
 24005  355F  0829               	movf	OLED_send@value,w
 24006  3560  00A8               	movwf	??_OLED_send
 24007  3561  3004               	movlw	4
 24008  3562                     u4005:	
 24009  3562  36A8               	lsrf	??_OLED_send,f
 24010  3563  0B89               	decfsz	9,f
 24011  3564  2D62               	goto	u4005
 24012  3565  0828               	movf	??_OLED_send,w
 24013  3566  31A8  2011  31B5   	fcall	_OLED_write4bits
 24014                           
 24015                           ;oled.c: 42:  OLED_write4bits(value);
 24016  3569  0140               	movlb	0	; select bank0
 24017  356A  0829               	movf	OLED_send@value,w
 24018  356B  31A8  2011         	fcall	_OLED_write4bits
 24019  356D  0008               	return
 24020  356E                     __end_of_OLED_send:	
 24021                           
 24022                           	psect	text75
 24023  2811                     __ptext75:	
 24024 ;; *************** function _OLED_write4bits *****************
 24025 ;; Defined at:
 24026 ;;		line 25 in file "oled.c"
 24027 ;; Parameters:    Size  Location     Type
 24028 ;;  value           1    wreg     unsigned char 
 24029 ;; Auto vars:     Size  Location     Type
 24030 ;;  value           1    6[BANK0 ] unsigned char 
 24031 ;; Return value:  Size  Location     Type
 24032 ;;                  1    wreg      void 
 24033 ;; Registers used:
 24034 ;;		wreg, status,2, status,0, pclath, cstack
 24035 ;; Tracked objects:
 24036 ;;		On entry : 0/0
 24037 ;;		On exit  : 0/0
 24038 ;;		Unchanged: 0/0
 24039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24043 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24044 ;;Total ram usage:        3 bytes
 24045 ;; Hardware stack levels used:    1
 24046 ;; Hardware stack levels required when called:    4
 24047 ;; This function calls:
 24048 ;;		_OLED_pulseEnable
 24049 ;; This function is called by:
 24050 ;;		_OLED_send
 24051 ;;		_OLED_init
 24052 ;; This function uses a non-reentrant model
 24053 ;;
 24054                           
 24055                           
 24056                           ;psect for function _OLED_write4bits
 24057  2811                     _OLED_write4bits:	
 24058                           
 24059                           ;incstack = 0
 24060                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0+pclath+cstack]
 24061                           ;OLED_write4bits@value stored from wreg
 24062  2811  0140               	movlb	0	; select bank0
 24063  2812  00A6               	movwf	OLED_write4bits@value
 24064                           
 24065                           ;oled.c: 25: void OLED_write4bits(uint8_t value);oled.c: 26: {;oled.c: 27:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 24066  2813  0826               	movf	OLED_write4bits@value,w
 24067  2814  3901               	andlw	1
 24068  2815  00A4               	movwf	??_OLED_write4bits
 24069  2816  0DA4               	rlf	??_OLED_write4bits,f
 24070  2817  0819               	movf	25,w	;volatile
 24071  2818  0624               	xorwf	??_OLED_write4bits,w
 24072  2819  39FD               	andlw	-3
 24073  281A  0624               	xorwf	??_OLED_write4bits,w
 24074  281B  0099               	movwf	25	;volatile
 24075                           
 24076                           ;oled.c: 28:  LATBbits.LATB0 = (value >> 1) & 0x01;
 24077  281C  0826               	movf	OLED_write4bits@value,w
 24078  281D  00A4               	movwf	??_OLED_write4bits
 24079  281E  3001               	movlw	1
 24080  281F                     u3975:	
 24081  281F  36A4               	lsrf	??_OLED_write4bits,f
 24082  2820  0B89               	decfsz	9,f
 24083  2821  281F               	goto	u3975
 24084  2822  3001               	movlw	1
 24085  2823  0524               	andwf	??_OLED_write4bits,w
 24086  2824  00A5               	movwf	??_OLED_write4bits+1
 24087  2825  0819               	movf	25,w	;volatile
 24088  2826  0625               	xorwf	??_OLED_write4bits+1,w
 24089  2827  39FE               	andlw	-2
 24090  2828  0625               	xorwf	??_OLED_write4bits+1,w
 24091  2829  0099               	movwf	25	;volatile
 24092                           
 24093                           ;oled.c: 29:  LATCbits.LATC5 = (value >> 2) & 0x01;
 24094  282A  0826               	movf	OLED_write4bits@value,w
 24095  282B  00A4               	movwf	??_OLED_write4bits
 24096  282C  3002               	movlw	2
 24097  282D                     u3985:	
 24098  282D  36A4               	lsrf	??_OLED_write4bits,f
 24099  282E  0B89               	decfsz	9,f
 24100  282F  282D               	goto	u3985
 24101  2830  0824               	movf	??_OLED_write4bits,w
 24102  2831  3901               	andlw	1
 24103  2832  00A5               	movwf	??_OLED_write4bits+1
 24104  2833  0EA5               	swapf	??_OLED_write4bits+1,f
 24105  2834  0DA5               	rlf	??_OLED_write4bits+1,f
 24106  2835  081A               	movf	26,w	;volatile
 24107  2836  0625               	xorwf	??_OLED_write4bits+1,w
 24108  2837  39DF               	andlw	-33
 24109  2838  0625               	xorwf	??_OLED_write4bits+1,w
 24110  2839  009A               	movwf	26	;volatile
 24111                           
 24112                           ;oled.c: 30:  LATCbits.LATC4 = (value >> 3) & 0x01;
 24113  283A  0826               	movf	OLED_write4bits@value,w
 24114  283B  00A4               	movwf	??_OLED_write4bits
 24115  283C  3003               	movlw	3
 24116  283D                     u3995:	
 24117  283D  36A4               	lsrf	??_OLED_write4bits,f
 24118  283E  0B89               	decfsz	9,f
 24119  283F  283D               	goto	u3995
 24120  2840  0824               	movf	??_OLED_write4bits,w
 24121  2841  3901               	andlw	1
 24122  2842  00A5               	movwf	??_OLED_write4bits+1
 24123  2843  0EA5               	swapf	??_OLED_write4bits+1,f
 24124  2844  081A               	movf	26,w	;volatile
 24125  2845  0625               	xorwf	??_OLED_write4bits+1,w
 24126  2846  39EF               	andlw	-17
 24127  2847  0625               	xorwf	??_OLED_write4bits+1,w
 24128  2848  009A               	movwf	26	;volatile
 24129                           
 24130                           ;oled.c: 32:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 24131  2849  3010               	movlw	16
 24132  284A                     u11377:	
 24133  284A  0B89               	decfsz	9,f
 24134  284B  284A               	goto	u11377
 24135  284C  3200               	nop2
 24136                           
 24137                           ;oled.c: 33:  OLED_pulseEnable();
 24138  284D  31B4  24CE         	fcall	_OLED_pulseEnable
 24139  284F  0008               	return
 24140  2850                     __end_of_OLED_write4bits:	
 24141                           
 24142                           	psect	text76
 24143  34CE                     __ptext76:	
 24144 ;; *************** function _OLED_pulseEnable *****************
 24145 ;; Defined at:
 24146 ;;		line 18 in file "oled.c"
 24147 ;; Parameters:    Size  Location     Type
 24148 ;;		None
 24149 ;; Auto vars:     Size  Location     Type
 24150 ;;		None
 24151 ;; Return value:  Size  Location     Type
 24152 ;;                  1    wreg      void 
 24153 ;; Registers used:
 24154 ;;		wreg
 24155 ;; Tracked objects:
 24156 ;;		On entry : 0/0
 24157 ;;		On exit  : 0/0
 24158 ;;		Unchanged: 0/0
 24159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24164 ;;Total ram usage:        0 bytes
 24165 ;; Hardware stack levels used:    1
 24166 ;; Hardware stack levels required when called:    3
 24167 ;; This function calls:
 24168 ;;		Nothing
 24169 ;; This function is called by:
 24170 ;;		_OLED_write4bits
 24171 ;;		_OLED_waitForReady
 24172 ;; This function uses a non-reentrant model
 24173 ;;
 24174                           
 24175                           
 24176                           ;psect for function _OLED_pulseEnable
 24177  34CE                     _OLED_pulseEnable:	
 24178                           
 24179                           ;oled.c: 20:  LATBbits.LATB2 = 1;
 24180                           
 24181                           ;incstack = 0
 24182                           ; Regs used in _OLED_pulseEnable: [wreg]
 24183  34CE  0140               	movlb	0	; select bank0
 24184  34CF  1519               	bsf	25,2	;volatile
 24185                           
 24186                           ;oled.c: 21:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 24187  34D0  3010               	movlw	16
 24188  34D1                     u11387:	
 24189  34D1  0B89               	decfsz	9,f
 24190  34D2  2CD1               	goto	u11387
 24191  34D3  3200               	nop2
 24192                           
 24193                           ;oled.c: 22:  LATBbits.LATB2 = 0;
 24194  34D4  0140               	movlb	0	; select bank0
 24195  34D5  1119               	bcf	25,2	;volatile
 24196  34D6  0008               	return
 24197  34D7                     __end_of_OLED_pulseEnable:	
 24198                           
 24199                           	psect	intentry
 24200  0004                     __pintentry:	
 24201 ;; *************** function _ISR *****************
 24202 ;; Defined at:
 24203 ;;		line 48 in file "interrupt.c"
 24204 ;; Parameters:    Size  Location     Type
 24205 ;;		None
 24206 ;; Auto vars:     Size  Location     Type
 24207 ;;		None
 24208 ;; Return value:  Size  Location     Type
 24209 ;;                  1    wreg      void 
 24210 ;; Registers used:
 24211 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24212 ;; Tracked objects:
 24213 ;;		On entry : 0/0
 24214 ;;		On exit  : 0/0
 24215 ;;		Unchanged: 0/0
 24216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24219 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24220 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24221 ;;Total ram usage:        4 bytes
 24222 ;; Hardware stack levels used:    1
 24223 ;; Hardware stack levels required when called:    2
 24224 ;; This function calls:
 24225 ;;		_pushButtonISR
 24226 ;;		_rotISR
 24227 ;;		_uartReceiveISR
 24228 ;; This function is called by:
 24229 ;;		Interrupt level 1
 24230 ;; This function uses a non-reentrant model
 24231 ;;
 24232                           
 24233  0004                     _ISR:	
 24234                           
 24235                           ;incstack = 0
 24236  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 24237                           
 24238                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24239  0005  3180               	pagesel	$
 24240                           
 24241                           ;interrupt.c: 50:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 24242  0006  014E               	movlb	14	; select bank14
 24243  0007  1A96               	btfsc	22,5	;volatile
 24244  0008  1E8C               	btfss	12,5	;volatile
 24245  0009  281D               	goto	i1l265
 24246                           
 24247                           ;interrupt.c: 53:   tick10ms++;
 24248  000A  3001               	movlw	1
 24249  000B  0140               	movlb	0	; select bank0
 24250  000C  00A0               	movwf	??_ISR
 24251  000D  0820               	movf	??_ISR,w
 24252  000E  0143               	movlb	3	; select bank3
 24253  000F  07ED               	addwf	_tick10ms^(0+384),f	;volatile
 24254                           
 24255                           ;interrupt.c: 54:   if (pbState == PB_WAIT)
 24256  0010  3004               	movlw	4
 24257  0011  067D               	xorwf	_pbState,w	;volatile
 24258  0012  1D03               	btfss	3,2
 24259  0013  2817               	goto	i1l6277
 24260                           
 24261                           ;interrupt.c: 55:    pushButtonISR();
 24262  0014  31A9  2164  3180   	fcall	_pushButtonISR
 24263  0017                     i1l6277:	
 24264                           
 24265                           ;interrupt.c: 56:   TMR0 = 178;
 24266  0017  30B2               	movlw	178
 24267  0018  014B               	movlb	11	; select bank11
 24268  0019  009C               	movwf	28	;volatile
 24269                           
 24270                           ;interrupt.c: 57:   PIR0bits.TMR0IF = 0;
 24271  001A  014E               	movlb	14	; select bank14
 24272  001B  128C               	bcf	12,5	;volatile
 24273                           
 24274                           ;interrupt.c: 58:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 24275  001C  2878               	goto	i1l278
 24276  001D                     i1l265:	
 24277  001D  1A16               	btfsc	22,4	;volatile
 24278  001E  1E0C               	btfss	12,4	;volatile
 24279  001F  2839               	goto	i1l268
 24280                           
 24281                           ;interrupt.c: 60:   if (IOCAFbits.IOCAF7 == 1) {
 24282  0020  017E               	movlb	62	; select bank62
 24283  0021  1FBF               	btfss	63,7	;volatile
 24284  0022  2828               	goto	i1l6289
 24285                           
 24286                           ;interrupt.c: 61:    pushButtonISR();
 24287  0023  31A9  2164  3180   	fcall	_pushButtonISR
 24288                           
 24289                           ;interrupt.c: 62:    IOCAFbits.IOCAF7 = 0;
 24290  0026  017E               	movlb	62	; select bank62
 24291  0027  13BF               	bcf	63,7	;volatile
 24292  0028                     i1l6289:	
 24293                           
 24294                           ;interrupt.c: 64:   if (IOCAFbits.IOCAF4 == 1) {
 24295  0028  1E3F               	btfss	63,4	;volatile
 24296  0029  282F               	goto	i1l6295
 24297                           
 24298                           ;interrupt.c: 65:    rotISR();
 24299  002A  31A8  2050  3180   	fcall	_rotISR
 24300                           
 24301                           ;interrupt.c: 66:    IOCAFbits.IOCAF4 = 0;
 24302  002D  017E               	movlb	62	; select bank62
 24303  002E  123F               	bcf	63,4	;volatile
 24304  002F                     i1l6295:	
 24305                           
 24306                           ;interrupt.c: 68:   if (IOCAFbits.IOCAF5 == 1) {
 24307  002F  1EBF               	btfss	63,5	;volatile
 24308  0030  2836               	goto	i1l6301
 24309                           
 24310                           ;interrupt.c: 69:    rotISR();
 24311  0031  31A8  2050  3180   	fcall	_rotISR
 24312                           
 24313                           ;interrupt.c: 70:    IOCAFbits.IOCAF5 = 0;
 24314  0034  017E               	movlb	62	; select bank62
 24315  0035  12BF               	bcf	63,5	;volatile
 24316  0036                     i1l6301:	
 24317                           
 24318                           ;interrupt.c: 72:   PIR0bits.IOCIF = 0;
 24319  0036  014E               	movlb	14	; select bank14
 24320  0037  120C               	bcf	12,4	;volatile
 24321                           
 24322                           ;interrupt.c: 73:  } else if (INTCONbits.PEIE == 1) {
 24323  0038  2878               	goto	i1l278
 24324  0039                     i1l268:	
 24325  0039  1F0B               	btfss	11,6	;volatile
 24326  003A  2878               	goto	i1l278
 24327                           
 24328                           ;interrupt.c: 74:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 24329  003B  181A               	btfsc	26,0	;volatile
 24330  003C  1C10               	btfss	16,0	;volatile
 24331  003D  2871               	goto	i1l274
 24332                           
 24333                           ;interrupt.c: 77:    if (tick100ms++ >= 1000000000UL)
 24334  003E  0142               	movlb	2	; select bank2
 24335  003F  0864               	movf	(_tick100ms+3)^(0+256),w	;volatile
 24336  0040  0140               	movlb	0	; select bank0
 24337  0041  00A3               	movwf	??_ISR+3
 24338  0042  0142               	movlb	2	; select bank2
 24339  0043  0863               	movf	(_tick100ms+2)^(0+256),w	;volatile
 24340  0044  0140               	movlb	0	; select bank0
 24341  0045  00A2               	movwf	??_ISR+2
 24342  0046  0142               	movlb	2	; select bank2
 24343  0047  0862               	movf	(_tick100ms+1)^(0+256),w	;volatile
 24344  0048  0140               	movlb	0	; select bank0
 24345  0049  00A1               	movwf	??_ISR+1
 24346  004A  0142               	movlb	2	; select bank2
 24347  004B  0861               	movf	_tick100ms^(0+256),w	;volatile
 24348  004C  0140               	movlb	0	; select bank0
 24349  004D  00A0               	movwf	??_ISR
 24350  004E  3001               	movlw	1
 24351  004F  0142               	movlb	2	; select bank2
 24352  0050  07E1               	addwf	_tick100ms^(0+256),f	;volatile
 24353  0051  3000               	movlw	0
 24354  0052  3DE2               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 24355  0053  3DE3               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 24356  0054  3DE4               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 24357  0055  3000               	movlw	0
 24358  0056  0140               	movlb	0	; select bank0
 24359  0057  0220               	subwf	??_ISR,w
 24360  0058  30CA               	movlw	202
 24361  0059  3B21               	subwfb	??_ISR+1,w
 24362  005A  309A               	movlw	154
 24363  005B  3B22               	subwfb	??_ISR+2,w
 24364  005C  303B               	movlw	59
 24365  005D  3B23               	subwfb	??_ISR+3,w
 24366  005E  1C03               	btfss	3,0
 24367  005F  2869               	goto	i1l6311
 24368                           
 24369                           ;interrupt.c: 78:     tick100ms = 0;
 24370  0060  3000               	movlw	0
 24371  0061  0142               	movlb	2	; select bank2
 24372  0062  00E4               	movwf	(_tick100ms+3)^(0+256)	;volatile
 24373  0063  3000               	movlw	0
 24374  0064  00E3               	movwf	(_tick100ms+2)^(0+256)	;volatile
 24375  0065  3000               	movlw	0
 24376  0066  00E2               	movwf	(_tick100ms+1)^(0+256)	;volatile
 24377  0067  3000               	movlw	0
 24378  0068  00E1               	movwf	_tick100ms^(0+256)	;volatile
 24379  0069                     i1l6311:	
 24380                           
 24381                           ;interrupt.c: 79:    TMR1 = 53035;
 24382  0069  30CF               	movlw	207
 24383  006A  0144               	movlb	4	; select bank4
 24384  006B  008D               	movwf	13	;volatile
 24385  006C  302B               	movlw	43
 24386  006D  008C               	movwf	12	;volatile
 24387                           
 24388                           ;interrupt.c: 80:    PIR4bits.TMR1IF = 0;
 24389  006E  014E               	movlb	14	; select bank14
 24390  006F  1010               	bcf	16,0	;volatile
 24391                           
 24392                           ;interrupt.c: 81:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 24393  0070  2878               	goto	i1l278
 24394  0071                     i1l274:	
 24395  0071  1A99               	btfsc	25,5	;volatile
 24396  0072  1E8F               	btfss	15,5	;volatile
 24397  0073  2878               	goto	i1l278
 24398                           
 24399                           ;interrupt.c: 82:    uartReceiveISR();
 24400  0074  31AA  223D         	fcall	_uartReceiveISR
 24401                           
 24402                           ;interrupt.c: 83:    PIR3bits.RC1IF = 0;
 24403  0076  014E               	movlb	14	; select bank14
 24404  0077  128F               	bcf	15,5	;volatile
 24405  0078                     i1l278:	
 24406  0078  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 24407  0079  0009               	retfie
 24408  007A                     __end_of_ISR:	
 24409                           
 24410                           	psect	text78
 24411  2A3D                     __ptext78:	
 24412 ;; *************** function _uartReceiveISR *****************
 24413 ;; Defined at:
 24414 ;;		line 37 in file "uart.c"
 24415 ;; Parameters:    Size  Location     Type
 24416 ;;		None
 24417 ;; Auto vars:     Size  Location     Type
 24418 ;;		None
 24419 ;; Return value:  Size  Location     Type
 24420 ;;                  1    wreg      void 
 24421 ;; Registers used:
 24422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24423 ;; Tracked objects:
 24424 ;;		On entry : 0/0
 24425 ;;		On exit  : 0/0
 24426 ;;		Unchanged: 0/0
 24427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24430 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24431 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24432 ;;Total ram usage:        1 bytes
 24433 ;; Hardware stack levels used:    1
 24434 ;; Hardware stack levels required when called:    1
 24435 ;; This function calls:
 24436 ;;		_strncpy
 24437 ;; This function is called by:
 24438 ;;		_ISR
 24439 ;; This function uses a non-reentrant model
 24440 ;;
 24441                           
 24442                           
 24443                           ;psect for function _uartReceiveISR
 24444  2A3D                     _uartReceiveISR:	
 24445                           
 24446                           ;uart.c: 39:  static char buffer[20];;uart.c: 41:  static uint8_t checksum = 0;;uart.c: 
      +                          43:  if (RC1STAbits.OERR)
 24447                           
 24448                           ;incstack = 0
 24449                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24450  2A3D  0142               	movlb	2	; select bank2
 24451  2A3E  1C9D               	btfss	29,1	;volatile
 24452  2A3F  2A47               	goto	i1l6187
 24453                           
 24454                           ;uart.c: 44:  {;uart.c: 45:   RC1STAbits.CREN = 0;
 24455  2A40  121D               	bcf	29,4	;volatile
 24456                           
 24457                           ;uart.c: 46:   RC1STAbits.CREN = 1;
 24458  2A41  161D               	bsf	29,4	;volatile
 24459                           
 24460                           ;uart.c: 47:   rxOErrCount++;
 24461  2A42  3001               	movlw	1
 24462  2A43  00F6               	movwf	??_uartReceiveISR
 24463  2A44  0876               	movf	??_uartReceiveISR,w
 24464  2A45  0143               	movlb	3	; select bank3
 24465  2A46  07EA               	addwf	_rxOErrCount^(0+384),f	;volatile
 24466  2A47                     i1l6187:	
 24467                           
 24468                           ;uart.c: 49:  if (RC1STAbits.FERR)
 24469  2A47  0142               	movlb	2	; select bank2
 24470  2A48  1D1D               	btfss	29,2	;volatile
 24471  2A49  2A51               	goto	i1l6193
 24472                           
 24473                           ;uart.c: 50:  {;uart.c: 51:   RC1STAbits.SPEN = 0;
 24474  2A4A  139D               	bcf	29,7	;volatile
 24475                           
 24476                           ;uart.c: 52:   RC1STAbits.SPEN = 1;
 24477  2A4B  179D               	bsf	29,7	;volatile
 24478                           
 24479                           ;uart.c: 53:   rxFErrCount++;
 24480  2A4C  3001               	movlw	1
 24481  2A4D  00F6               	movwf	??_uartReceiveISR
 24482  2A4E  0876               	movf	??_uartReceiveISR,w
 24483  2A4F  0143               	movlb	3	; select bank3
 24484  2A50  07EB               	addwf	_rxFErrCount^(0+384),f	;volatile
 24485  2A51                     i1l6193:	
 24486                           
 24487                           ;uart.c: 57:  if (rxCount < sizeof(dataPacket)) {
 24488  2A51  300F               	movlw	15
 24489  2A52  0140               	movlb	0	; select bank0
 24490  2A53  026B               	subwf	_rxCount,w	;volatile
 24491  2A54  1803               	skipnc
 24492  2A55  2A71               	goto	i1l6199
 24493                           
 24494                           ;uart.c: 58:   buffer[rxCount] = RC1REG;
 24495  2A56  0142               	movlb	2	; select bank2
 24496  2A57  0819               	movf	25,w	;volatile
 24497  2A58  00F6               	movwf	??_uartReceiveISR
 24498  2A59  0140               	movlb	0	; select bank0
 24499  2A5A  086B               	movf	_rxCount,w
 24500  2A5B  3EAA               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 24501  2A5C  0086               	movwf	6
 24502  2A5D  3002               	movlw	2	; select bank5/6
 24503  2A5E  0087               	movwf	7
 24504  2A5F  0876               	movf	??_uartReceiveISR,w
 24505  2A60  0081               	movwf	1
 24506                           
 24507                           ;uart.c: 59:   checksum ^= buffer[rxCount];
 24508  2A61  086B               	movf	_rxCount,w
 24509  2A62  3EAA               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 24510  2A63  0086               	movwf	6
 24511  2A64  3002               	movlw	2	; select bank5/6
 24512  2A65  0087               	movwf	7
 24513  2A66  0801               	movf	1,w
 24514  2A67  00F6               	movwf	??_uartReceiveISR
 24515  2A68  0876               	movf	??_uartReceiveISR,w
 24516  2A69  0143               	movlb	3	; select bank3
 24517  2A6A  06E8               	xorwf	uartReceiveISR@checksum^(0+384),f
 24518                           
 24519                           ;uart.c: 60:   rxCount++;
 24520  2A6B  3001               	movlw	1
 24521  2A6C  00F6               	movwf	??_uartReceiveISR
 24522  2A6D  0876               	movf	??_uartReceiveISR,w
 24523  2A6E  0140               	movlb	0	; select bank0
 24524  2A6F  07EB               	addwf	_rxCount,f	;volatile
 24525                           
 24526                           ;uart.c: 61:  } else {
 24527  2A70  0008               	return
 24528  2A71                     i1l6199:	
 24529                           
 24530                           ;uart.c: 63:   if (RC1REG == checksum) {
 24531  2A71  0142               	movlb	2	; select bank2
 24532  2A72  0819               	movf	25,w	;volatile
 24533  2A73  0143               	movlb	3	; select bank3
 24534  2A74  0668               	xorwf	uartReceiveISR@checksum^(0+384),w
 24535  2A75  1D03               	skipz
 24536  2A76  2A86               	goto	i1l6205
 24537                           
 24538                           ;uart.c: 65:    dataReadyFlag = 1;
 24539  2A77  3001               	movlw	1
 24540  2A78  00F6               	movwf	??_uartReceiveISR
 24541  2A79  0876               	movf	??_uartReceiveISR,w
 24542  2A7A  00E9               	movwf	_dataReadyFlag^(0+384)	;volatile
 24543                           
 24544                           ;uart.c: 66:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 24545  2A7B  30AA               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 24546  2A7C  00F6               	movwf	??_uartReceiveISR
 24547  2A7D  0876               	movf	??_uartReceiveISR,w
 24548  2A7E  00F0               	movwf	strncpy@s
 24549  2A7F  300F               	movlw	15
 24550  2A80  00F1               	movwf	strncpy@n
 24551  2A81  3000               	movlw	0
 24552  2A82  00F2               	movwf	strncpy@n+1
 24553  2A83  30BE               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 24554  2A84  31B6  26F6         	fcall	_strncpy
 24555  2A86                     i1l6205:	
 24556                           
 24557                           ;uart.c: 68:   checksum = 0;
 24558  2A86  0143               	movlb	3	; select bank3
 24559  2A87  01E8               	clrf	uartReceiveISR@checksum^(0+384)
 24560                           
 24561                           ;uart.c: 69:   rxCount = 0;
 24562  2A88  0140               	movlb	0	; select bank0
 24563  2A89  01EB               	clrf	_rxCount	;volatile
 24564  2A8A  0008               	return
 24565  2A8B                     __end_of_uartReceiveISR:	
 24566                           
 24567                           	psect	text79
 24568  36F6                     __ptext79:	
 24569 ;; *************** function _strncpy *****************
 24570 ;; Defined at:
 24571 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 24572 ;; Parameters:    Size  Location     Type
 24573 ;;  d               1    wreg     PTR unsigned char 
 24574 ;;		 -> dataPacket(15), 
 24575 ;;  s               1    0[COMMON] PTR const unsigned char 
 24576 ;;		 -> uartReceiveISR@buffer(20), 
 24577 ;;  n               2    1[COMMON] unsigned int 
 24578 ;; Auto vars:     Size  Location     Type
 24579 ;;  d               1    4[COMMON] PTR unsigned char 
 24580 ;;		 -> dataPacket(15), 
 24581 ;;  cp              1    5[COMMON] PTR unsigned char 
 24582 ;;		 -> dataPacket(15), 
 24583 ;; Return value:  Size  Location     Type
 24584 ;;                  1    wreg      PTR unsigned char 
 24585 ;; Registers used:
 24586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 24587 ;; Tracked objects:
 24588 ;;		On entry : 0/0
 24589 ;;		On exit  : 0/0
 24590 ;;		Unchanged: 0/0
 24591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24592 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24595 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24596 ;;Total ram usage:        6 bytes
 24597 ;; Hardware stack levels used:    1
 24598 ;; This function calls:
 24599 ;;		Nothing
 24600 ;; This function is called by:
 24601 ;;		_uartReceiveISR
 24602 ;; This function uses a non-reentrant model
 24603 ;;
 24604                           
 24605                           
 24606                           ;psect for function _strncpy
 24607  36F6                     _strncpy:	
 24608                           
 24609                           ;incstack = 0
 24610                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 24611                           ;strncpy@d stored from wreg
 24612  36F6  00F4               	movwf	strncpy@d
 24613  36F7  0874               	movf	strncpy@d,w
 24614  36F8  00F3               	movwf	??_strncpy
 24615  36F9  0873               	movf	??_strncpy,w
 24616  36FA  00F5               	movwf	strncpy@cp
 24617  36FB                     i1l4991:	
 24618  36FB  0871               	movf	strncpy@n,w
 24619  36FC  0472               	iorwf	strncpy@n+1,w
 24620  36FD  1903               	btfsc	3,2
 24621  36FE  2F1C               	goto	i1l4997
 24622  36FF  3001               	movlw	1
 24623  3700  02F1               	subwf	strncpy@n,f
 24624  3701  3000               	movlw	0
 24625  3702  3BF2               	subwfb	strncpy@n+1,f
 24626  3703  0875               	movf	strncpy@cp,w
 24627  3704  0086               	movwf	6
 24628  3705  3002               	movlw	2	; select bank4/5
 24629  3706  0087               	movwf	7
 24630  3707  0AF5               	incf	strncpy@cp,f
 24631  3708  0870               	movf	strncpy@s,w
 24632  3709  0084               	movwf	4
 24633  370A  3002               	movlw	2	; select bank4/5
 24634  370B  0085               	movwf	5
 24635  370C  0AF0               	incf	strncpy@s,f
 24636  370D  0800               	movf	0,w
 24637  370E  3FC0               	movwi [0]fsr1
 24638  370F  0889               	movf	9,f
 24639  3710  1903               	btfsc	3,2
 24640  3711  2F1C               	goto	i1l4997
 24641  3712  2EFB               	goto	i1l4991
 24642  3713                     i1l4993:	
 24643  3713  0875               	movf	strncpy@cp,w
 24644  3714  0086               	movwf	6
 24645  3715  3002               	movlw	2	; select bank4/5
 24646  3716  0087               	movwf	7
 24647  3717  0181               	clrf	1
 24648  3718  3001               	movlw	1
 24649  3719  00F3               	movwf	??_strncpy
 24650  371A  0873               	movf	??_strncpy,w
 24651  371B  07F5               	addwf	strncpy@cp,f
 24652  371C                     i1l4997:	
 24653  371C  3001               	movlw	1
 24654  371D  02F1               	subwf	strncpy@n,f
 24655  371E  3000               	movlw	0
 24656  371F  3BF2               	subwfb	strncpy@n+1,f
 24657  3720  0A71               	incf	strncpy@n,w
 24658  3721  1D03               	skipz
 24659  3722  2F13               	goto	i1l4993
 24660  3723  0A72               	incf	strncpy@n+1,w
 24661  3724  1903               	btfsc	3,2
 24662  3725  0008               	return
 24663  3726  2F13               	goto	i1l4993
 24664  3727                     __end_of_strncpy:	
 24665                           
 24666                           	psect	text80
 24667  2850                     __ptext80:	
 24668 ;; *************** function _rotISR *****************
 24669 ;; Defined at:
 24670 ;;		line 34 in file "inputs.c"
 24671 ;; Parameters:    Size  Location     Type
 24672 ;;		None
 24673 ;; Auto vars:     Size  Location     Type
 24674 ;;  input           1   11[COMMON] unsigned char 
 24675 ;; Return value:  Size  Location     Type
 24676 ;;                  1    wreg      void 
 24677 ;; Registers used:
 24678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 24679 ;; Tracked objects:
 24680 ;;		On entry : 0/0
 24681 ;;		On exit  : 0/0
 24682 ;;		Unchanged: 0/0
 24683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24686 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24687 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24688 ;;Total ram usage:        8 bytes
 24689 ;; Hardware stack levels used:    1
 24690 ;; Hardware stack levels required when called:    1
 24691 ;; This function calls:
 24692 ;;		i1_timeNow
 24693 ;; This function is called by:
 24694 ;;		_ISR
 24695 ;; This function uses a non-reentrant model
 24696 ;;
 24697                           
 24698                           
 24699                           ;psect for function _rotISR
 24700  2850                     _rotISR:	
 24701                           
 24702                           ;inputs.c: 36:  uint8_t input;;inputs.c: 38:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 24703                           
 24704                           ;incstack = 0
 24705                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 24706  2850  0140               	movlb	0	; select bank0
 24707  2851  0E0C               	swapf	12,w	;volatile
 24708  2852  3901               	andlw	1
 24709  2853  00F4               	movwf	??_rotISR
 24710  2854  0E0C               	swapf	12,w	;volatile
 24711  2855  0C89               	rrf	9,f
 24712  2856  3901               	andlw	1
 24713  2857  0709               	addwf	9,w
 24714  2858  0474               	iorwf	??_rotISR,w
 24715  2859  00F5               	movwf	??_rotISR+1
 24716  285A  0875               	movf	??_rotISR+1,w
 24717  285B  00FB               	movwf	rotISR@input
 24718                           
 24719                           ;inputs.c: 41:  curRotState = transition_table[curRotState & 0b00000111][input];
 24720  285C  087C               	movf	_curRotState,w	;volatile
 24721  285D  3907               	andlw	7
 24722  285E  00F4               	movwf	??_rotISR
 24723  285F  01F5               	clrf	??_rotISR+1
 24724  2860  35F4               	lslf	??_rotISR,f
 24725  2861  0DF5               	rlf	??_rotISR+1,f
 24726  2862  35F4               	lslf	??_rotISR,f
 24727  2863  0DF5               	rlf	??_rotISR+1,f
 24728  2864  3025               	movlw	low (_transition_table| (0+32768))
 24729  2865  00F6               	movwf	??_rotISR+2
 24730  2866  30B8               	movlw	high (_transition_table| (0+32768))
 24731  2867  00F7               	movwf	??_rotISR+3
 24732  2868  0874               	movf	??_rotISR,w
 24733  2869  0776               	addwf	??_rotISR+2,w
 24734  286A  00F8               	movwf	??_rotISR+4
 24735  286B  0875               	movf	??_rotISR+1,w
 24736  286C  3D77               	addwfc	??_rotISR+3,w
 24737  286D  00F9               	movwf	??_rotISR+5
 24738  286E  087B               	movf	rotISR@input,w
 24739  286F  0778               	addwf	??_rotISR+4,w
 24740  2870  0084               	movwf	4
 24741  2871  0879               	movf	??_rotISR+5,w
 24742  2872  1803               	skipnc
 24743  2873  0A79               	incf	??_rotISR+5,w
 24744  2874  0085               	movwf	5
 24745  2875  0800               	movf	0,w	;code access
 24746  2876  00FA               	movwf	??_rotISR+6
 24747  2877  087A               	movf	??_rotISR+6,w
 24748  2878  00FC               	movwf	_curRotState	;volatile
 24749                           
 24750                           ;inputs.c: 44:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 24751  2879  1FFC               	btfss	_curRotState,7	;volatile
 24752  287A  2880               	goto	i1l6175
 24753  287B  3001               	movlw	1
 24754  287C  00F4               	movwf	??_rotISR
 24755  287D  0874               	movf	??_rotISR,w
 24756  287E  0143               	movlb	3	; select bank3
 24757  287F  00EC               	movwf	_rotDir^(0+384)	;volatile
 24758  2880                     i1l6175:	
 24759                           
 24760                           ;inputs.c: 45:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 24761  2880  1F7C               	btfss	_curRotState,6	;volatile
 24762  2881  2887               	goto	i1l6179
 24763  2882  3002               	movlw	2
 24764  2883  00F4               	movwf	??_rotISR
 24765  2884  0874               	movf	??_rotISR,w
 24766  2885  0143               	movlb	3	; select bank3
 24767  2886  00EC               	movwf	_rotDir^(0+384)	;volatile
 24768  2887                     i1l6179:	
 24769                           
 24770                           ;inputs.c: 47:  userActivity = timeNow();
 24771  2887  31B4  24E0         	fcall	i1_timeNow
 24772  2889  0873               	movf	?i1_timeNow+3,w
 24773  288A  0142               	movlb	2	; select bank2
 24774  288B  00E8               	movwf	(_userActivity+3)^(0+256)	;volatile
 24775  288C  0872               	movf	?i1_timeNow+2,w
 24776  288D  00E7               	movwf	(_userActivity+2)^(0+256)	;volatile
 24777  288E  0871               	movf	?i1_timeNow+1,w
 24778  288F  00E6               	movwf	(_userActivity+1)^(0+256)	;volatile
 24779  2890  0870               	movf	?i1_timeNow,w
 24780  2891  00E5               	movwf	_userActivity^(0+256)	;volatile
 24781  2892  0008               	return
 24782  2893                     __end_of_rotISR:	
 24783                           
 24784                           	psect	text81
 24785  2964                     __ptext81:	
 24786 ;; *************** function _pushButtonISR *****************
 24787 ;; Defined at:
 24788 ;;		line 54 in file "inputs.c"
 24789 ;; Parameters:    Size  Location     Type
 24790 ;;		None
 24791 ;; Auto vars:     Size  Location     Type
 24792 ;;  time            1    5[COMMON] unsigned char 
 24793 ;; Return value:  Size  Location     Type
 24794 ;;                  1    wreg      void 
 24795 ;; Registers used:
 24796 ;;		wreg, status,2, status,0, pclath, cstack
 24797 ;; Tracked objects:
 24798 ;;		On entry : 0/0
 24799 ;;		On exit  : 0/0
 24800 ;;		Unchanged: 0/0
 24801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24803 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24804 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24805 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24806 ;;Total ram usage:        2 bytes
 24807 ;; Hardware stack levels used:    1
 24808 ;; Hardware stack levels required when called:    1
 24809 ;; This function calls:
 24810 ;;		_get10msTick
 24811 ;;		_reset10msTick
 24812 ;;		i1_timeNow
 24813 ;; This function is called by:
 24814 ;;		_ISR
 24815 ;; This function uses a non-reentrant model
 24816 ;;
 24817                           
 24818                           
 24819                           ;psect for function _pushButtonISR
 24820  2964                     _pushButtonISR:	
 24821                           
 24822                           ;inputs.c: 56:  uint8_t time;;inputs.c: 58:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT
      +                          )) {
 24823                           
 24824                           ;incstack = 0
 24825                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0+pclath+cstack]
 24826  2964  0140               	movlb	0	; select bank0
 24827  2965  1B8C               	btfsc	12,7	;volatile
 24828  2966  297E               	goto	i1l6147
 24829  2967  3004               	movlw	4
 24830  2968  067D               	xorwf	_pbState,w	;volatile
 24831  2969  1903               	btfsc	3,2
 24832  296A  297E               	goto	i1l6147
 24833                           
 24834                           ;inputs.c: 59:   reset10msTick();
 24835  296B  31B4  249F  31A9   	fcall	_reset10msTick
 24836                           
 24837                           ;inputs.c: 60:   pbState = PB_WAIT;
 24838  296E  3004               	movlw	4
 24839  296F  00F4               	movwf	??_pushButtonISR
 24840  2970  0874               	movf	??_pushButtonISR,w
 24841  2971  00FD               	movwf	_pbState	;volatile
 24842                           
 24843                           ;inputs.c: 61:   userActivity = timeNow();
 24844  2972  31B4  24E0         	fcall	i1_timeNow
 24845  2974  0873               	movf	?i1_timeNow+3,w
 24846  2975  0142               	movlb	2	; select bank2
 24847  2976  00E8               	movwf	(_userActivity+3)^(0+256)	;volatile
 24848  2977  0872               	movf	?i1_timeNow+2,w
 24849  2978  00E7               	movwf	(_userActivity+2)^(0+256)	;volatile
 24850  2979  0871               	movf	?i1_timeNow+1,w
 24851  297A  00E6               	movwf	(_userActivity+1)^(0+256)	;volatile
 24852  297B  0870               	movf	?i1_timeNow,w
 24853  297C  00E5               	movwf	_userActivity^(0+256)	;volatile
 24854                           
 24855                           ;inputs.c: 62:  } else if (pbState == PB_WAIT) {
 24856  297D  0008               	return
 24857  297E                     i1l6147:	
 24858  297E  3004               	movlw	4
 24859  297F  067D               	xorwf	_pbState,w	;volatile
 24860  2980  1D03               	btfss	3,2
 24861  2981  0008               	return
 24862                           
 24863                           ;inputs.c: 63:   time = get10msTick();
 24864  2982  31B4  249C  31A9   	fcall	_get10msTick
 24865  2985  00F4               	movwf	??_pushButtonISR
 24866  2986  0874               	movf	??_pushButtonISR,w
 24867  2987  00F5               	movwf	pushButtonISR@time
 24868                           
 24869                           ;inputs.c: 64:   if ((time > 10) && (time <= 70) && (PORTAbits.RA7))
 24870  2988  300B               	movlw	11
 24871  2989  0275               	subwf	pushButtonISR@time,w
 24872  298A  1C03               	skipc
 24873  298B  2998               	goto	i1l6159
 24874  298C  3047               	movlw	71
 24875  298D  0275               	subwf	pushButtonISR@time,w
 24876  298E  1803               	skipnc
 24877  298F  2998               	goto	i1l6159
 24878  2990  0140               	movlb	0	; select bank0
 24879  2991  1F8C               	btfss	12,7	;volatile
 24880  2992  2998               	goto	i1l6159
 24881                           
 24882                           ;inputs.c: 66:    pbState = PB_SHORT;
 24883  2993  3001               	movlw	1
 24884  2994  00F4               	movwf	??_pushButtonISR
 24885  2995  0874               	movf	??_pushButtonISR,w
 24886  2996  00FD               	movwf	_pbState	;volatile
 24887  2997  0008               	return
 24888  2998                     i1l6159:	
 24889  2998  3047               	movlw	71
 24890  2999  0275               	subwf	pushButtonISR@time,w
 24891  299A  1C03               	skipc
 24892  299B  29A4               	goto	i1l309
 24893  299C  0140               	movlb	0	; select bank0
 24894  299D  1B8C               	btfsc	12,7	;volatile
 24895  299E  29A4               	goto	i1l309
 24896                           
 24897                           ;inputs.c: 69:    pbState = PB_LONG;
 24898  299F  3002               	movlw	2
 24899  29A0  00F4               	movwf	??_pushButtonISR
 24900  29A1  0874               	movf	??_pushButtonISR,w
 24901  29A2  00FD               	movwf	_pbState	;volatile
 24902  29A3  0008               	return
 24903  29A4                     i1l309:	
 24904                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 24905                           
 24906  29A4  0140               	movlb	0	; select bank0
 24907  29A5  1F8C               	btfss	12,7	;volatile
 24908  29A6  0008               	return
 24909                           
 24910                           ;inputs.c: 72:    pbState = PB_ABORT;
 24911  29A7  3003               	movlw	3
 24912  29A8  00F4               	movwf	??_pushButtonISR
 24913  29A9  0874               	movf	??_pushButtonISR,w
 24914  29AA  00FD               	movwf	_pbState	;volatile
 24915  29AB  0008               	return
 24916  29AC                     __end_of_pushButtonISR:	
 24917                           ;inputs.c: 73:  }
 24918                           
 24919                           
 24920                           	psect	text82
 24921  34E0                     __ptext82:	
 24922 ;; *************** function i1_timeNow *****************
 24923 ;; Defined at:
 24924 ;;		line 13 in file "interrupt.c"
 24925 ;; Parameters:    Size  Location     Type
 24926 ;;		None
 24927 ;; Auto vars:     Size  Location     Type
 24928 ;;		None
 24929 ;; Return value:  Size  Location     Type
 24930 ;;                  4    0[COMMON] unsigned long 
 24931 ;; Registers used:
 24932 ;;		wreg
 24933 ;; Tracked objects:
 24934 ;;		On entry : 0/0
 24935 ;;		On exit  : 0/0
 24936 ;;		Unchanged: 0/0
 24937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24938 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24941 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24942 ;;Total ram usage:        4 bytes
 24943 ;; Hardware stack levels used:    1
 24944 ;; This function calls:
 24945 ;;		Nothing
 24946 ;; This function is called by:
 24947 ;;		_rotISR
 24948 ;;		_pushButtonISR
 24949 ;; This function uses a non-reentrant model
 24950 ;;
 24951                           
 24952                           
 24953                           ;psect for function i1_timeNow
 24954  34E0                     i1_timeNow:	
 24955                           
 24956                           ;interrupt.c: 15:  return tick100ms;
 24957                           
 24958                           ;incstack = 0
 24959                           ; Regs used in i1_timeNow: [wreg]
 24960  34E0  0142               	movlb	2	; select bank2
 24961  34E1  0864               	movf	(_tick100ms+3)^(0+256),w	;volatile
 24962  34E2  00F3               	movwf	?i1_timeNow+3
 24963  34E3  0863               	movf	(_tick100ms+2)^(0+256),w	;volatile
 24964  34E4  00F2               	movwf	?i1_timeNow+2
 24965  34E5  0862               	movf	(_tick100ms+1)^(0+256),w	;volatile
 24966  34E6  00F1               	movwf	?i1_timeNow+1
 24967  34E7  0861               	movf	_tick100ms^(0+256),w	;volatile
 24968  34E8  00F0               	movwf	?i1_timeNow
 24969  34E9  0008               	return
 24970  34EA                     __end_ofi1_timeNow:	
 24971                           
 24972                           	psect	text83
 24973  349F                     __ptext83:	
 24974 ;; *************** function _reset10msTick *****************
 24975 ;; Defined at:
 24976 ;;		line 41 in file "interrupt.c"
 24977 ;; Parameters:    Size  Location     Type
 24978 ;;		None
 24979 ;; Auto vars:     Size  Location     Type
 24980 ;;		None
 24981 ;; Return value:  Size  Location     Type
 24982 ;;                  1    wreg      void 
 24983 ;; Registers used:
 24984 ;;		status,2
 24985 ;; Tracked objects:
 24986 ;;		On entry : 0/0
 24987 ;;		On exit  : 0/0
 24988 ;;		Unchanged: 0/0
 24989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24994 ;;Total ram usage:        0 bytes
 24995 ;; Hardware stack levels used:    1
 24996 ;; This function calls:
 24997 ;;		Nothing
 24998 ;; This function is called by:
 24999 ;;		_pushButtonISR
 25000 ;; This function uses a non-reentrant model
 25001 ;;
 25002                           
 25003                           
 25004                           ;psect for function _reset10msTick
 25005  349F                     _reset10msTick:	
 25006                           
 25007                           ;interrupt.c: 42:  tick10ms = 0;
 25008                           
 25009                           ;incstack = 0
 25010                           ; Regs used in _reset10msTick: [status,2]
 25011  349F  0143               	movlb	3	; select bank3
 25012  34A0  01ED               	clrf	_tick10ms^(0+384)	;volatile
 25013  34A1  0008               	return
 25014  34A2                     __end_of_reset10msTick:	
 25015                           
 25016                           	psect	text84
 25017  349C                     __ptext84:	
 25018 ;; *************** function _get10msTick *****************
 25019 ;; Defined at:
 25020 ;;		line 33 in file "interrupt.c"
 25021 ;; Parameters:    Size  Location     Type
 25022 ;;		None
 25023 ;; Auto vars:     Size  Location     Type
 25024 ;;		None
 25025 ;; Return value:  Size  Location     Type
 25026 ;;                  1    wreg      unsigned char 
 25027 ;; Registers used:
 25028 ;;		wreg
 25029 ;; Tracked objects:
 25030 ;;		On entry : 0/0
 25031 ;;		On exit  : 0/0
 25032 ;;		Unchanged: 0/0
 25033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25038 ;;Total ram usage:        0 bytes
 25039 ;; Hardware stack levels used:    1
 25040 ;; This function calls:
 25041 ;;		Nothing
 25042 ;; This function is called by:
 25043 ;;		_pushButtonISR
 25044 ;; This function uses a non-reentrant model
 25045 ;;
 25046                           
 25047                           
 25048                           ;psect for function _get10msTick
 25049  349C                     _get10msTick:	
 25050                           
 25051                           ;interrupt.c: 35:  return tick10ms;
 25052                           
 25053                           ;incstack = 0
 25054                           ; Regs used in _get10msTick: [wreg]
 25055  349C  0143               	movlb	3	; select bank3
 25056  349D  086D               	movf	_tick10ms^(0+384),w	;volatile
 25057  349E  0008               	return
 25058  349F                     __end_of_get10msTick:	
 25059  007E                     btemp	set	126	;btemp
 25060  007E                     int$flags	set	126
 25061  007E                     wtemp0	set	126


Data Sizes:
    Strings     783
    Constant    139
    Data        42
    BSS         144
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     72      76
    BANK1            80     77      78
    BANK2            80     65      80
    BANK3            80     64      79
    BANK4            80      0      72
    BANK5            80      0      77
    BANK6            80     14      14
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           22      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    S1400$1$0	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    sp__getStateFunc$0	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    func$0	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    memcpy@d1	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@s1	PTR const void  size(1) Largest target is 32
		 -> grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 32
		 -> grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK5[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK5[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK5[15]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    sp__memcpy	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 32
		 -> grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 32
		 -> grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 32
		 -> grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 32
		 -> grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> systemCheck@str(BANK1[3]), str(BANK4[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK4[10]), 

    channelThing@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), grpB(BANK4[4]), grpA(BANK4[4]), vChannels(BANK4[32]), 

    getAnalogValues@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    calcRequiredPower@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    checkSensor@dp	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK5[15]), 

    checkSensor@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    systemCheck@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    checkChannelStatus@chData	PTR struct . size(2) Largest target is 170
		 -> data.chData(BIGRAM[128]), data(BIGRAM[170]), 

    checkChannelStatus@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    menu@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    sp__getStateFunc	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    menu@func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    S1400$func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl.func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setFudgeFactor@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    setSkyTemp@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    setDPOffset@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    setup@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    setLensDia@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    setOutputPower@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    setOutputPower@chData	PTR struct . size(2) Largest target is 170
		 -> data.chData(BIGRAM[128]), data(BIGRAM[170]), 

    channelSetup@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    channelSetup@chData	PTR struct . size(2) Largest target is 170
		 -> data.chData(BIGRAM[128]), data(BIGRAM[170]), 

    channelView@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    statusView@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK5[15]), 

    sp__getDataPacket	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK5[15]), 

    spinInput@input	PTR float  size(2) Largest target is 170
		 -> data.chData(BIGRAM[128]), data(BIGRAM[170]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_87(CODE[4]), systemCheck@str(BANK1[3]), STR_86(CODE[12]), STR_85(CODE[13]), 
		 -> STR_84(CODE[13]), STR_83(CODE[13]), STR_82(CODE[13]), STR_81(CODE[13]), 
		 -> STR_80(CODE[13]), STR_79(CODE[13]), STR_78(CODE[13]), STR_77(CODE[13]), 
		 -> STR_76(CODE[13]), STR_75(CODE[13]), STR_74(CODE[13]), STR_73(CODE[13]), 
		 -> STR_72(CODE[13]), STR_71(CODE[13]), STR_70(CODE[13]), STR_69(CODE[13]), 
		 -> STR_68(CODE[13]), STR_67(CODE[13]), STR_66(CODE[13]), STR_65(CODE[13]), 
		 -> STR_64(CODE[13]), STR_63(CODE[13]), STR_62(CODE[13]), STR_61(CODE[9]), 
		 -> STR_60(CODE[2]), STR_59(CODE[13]), STR_58(CODE[9]), STR_57(CODE[2]), 
		 -> STR_56(CODE[13]), STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[13]), 
		 -> STR_52(CODE[10]), STR_51(CODE[10]), STR_50(CODE[3]), STR_49(CODE[7]), 
		 -> STR_48(CODE[37]), STR_47(CODE[8]), STR_46(CODE[2]), STR_45(CODE[13]), 
		 -> STR_44(CODE[13]), STR_43(CODE[13]), STR_42(CODE[8]), STR_41(CODE[2]), 
		 -> STR_40(CODE[7]), STR_39(CODE[6]), STR_38(CODE[7]), STR_37(CODE[6]), 
		 -> STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[13]), STR_33(CODE[13]), 
		 -> STR_32(CODE[13]), STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), 
		 -> STR_28(CODE[13]), STR_27(CODE[9]), STR_26(CODE[8]), STR_25(CODE[5]), 
		 -> STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[13]), STR_21(CODE[13]), 
		 -> STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[9]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[13]), STR_13(CODE[13]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), STR_9(CODE[2]), 
		 -> STR_8(CODE[4]), STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[8]), 
		 -> STR_4(CODE[2]), STR_3(CODE[4]), str(BANK4[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[57]), 

    initGlobalData@chData	PTR struct . size(2) Largest target is 170
		 -> data.chData(BIGRAM[128]), data(BIGRAM[170]), 

    initGlobalData@data	PTR struct . size(2) Largest target is 170
		 -> data(BIGRAM[170]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy
    _rotISR->i1_timeNow
    _pushButtonISR->i1_timeNow

Critical Paths under _main in BANK0

    _viewErrorMessage->_OLED_print_xy
    _removeLastError->___awmod
    _OLED_returnHome->_OLED_command
    _OLED_off->_OLED_command
    _OLED_clearDisplay->_OLED_command
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _spinInput->___fladd
    _getStateFunc->___wmul
    _getNextState->___wmul
    _channelView->___fltol
    _returnToPage->_OLED_command
    _OLED_scrollDisplayRight->_OLED_command
    _OLED_scrollDisplayLeft->_OLED_command
    _itoa->___fltol
    _ftoa->___fltol
    _OLED_print_xy->___bmul
    _getAnalogValues->___fladd
    _timeSince->_timeNow
    _checkChannelStatus->___fltol
    _error->___awmod
    _ema->___lmul
    _swap->___bmul
    _sortCur->___fltol
    _memcpy->___bmul
    ___bmul->___awdiv
    ___xxtofl->___wmul
    ___flge->___fladd
    _calcRequiredPower->___fladd
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calcRequiredPower
    _systemCheck->_itoa
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_ftoa
    _setSkyTemp->_spinInput
    _setOutputPower->_ftoa
    _setOutputPower->_spinInput
    _setLensDia->_ftoa
    _setLensDia->_spinInput
    _setFudgeFactor->_ftoa
    _setFudgeFactor->_spinInput
    _setDPOffset->_ftoa
    _setDPOffset->_spinInput
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _itoa->___fltol
    _ftoa->___flge
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___flge
    _channelThing->_qsort
    _qsort->_sortCur
    _qsort->_sortDC
    _qsort->_sortDCRev
    _sortCur->___fltol
    ___fltol->___fldiv
    ___flge->___fldiv
    _calcRequiredPower->___fldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    _main->_channelThing

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  796350
                                             76 BANK1      1     1      0
                                             60 BANK2      5     5      0
                  _OLED_clearDisplay
                          _OLED_init
              _OLED_loadSpecialChars
                    _OLED_returnHome
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                      _setLoadSwitch
                        _systemCheck
                            _timeNow
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     3     3      0   19881
                                             26 BANK0      3     3      0
                      _OLED_print_xy
                    _OLED_returnHome
                       _getLastError
                              _getPB
                    _removeLastError
                      _setLoadSwitch
 ---------------------------------------------------------------------------------
 (2) _removeLastError                                      1     1      0    1153
                                             11 BANK0      1     1      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _getLastError                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                         10     8      2   43695
                                             33 BANK1     10     8      2
                  _OLED_clearDisplay
                           _OLED_off
                      _OLED_print_xy
                    _OLED_returnHome
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                               _itoa
                   _setChannelSwitch
                      _setLoadSwitch
                       _setOLEDPower
 ---------------------------------------------------------------------------------
 (2) _setOLEDPower                                         1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OLED_returnHome                                      0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _OLED_off                                             0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _OLED_clearDisplay                                    0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _menu                                                12    10      2  616738
                                             48 BANK1     12    10      2
                       _OLED_command
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                       _getStateFunc
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           4     2      2   59958
                                             39 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                4     2      2   55366
                                             39 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           3     1      2   71268
                                             39 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       8     6      2   80807
                                             39 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      23
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           7     5      2   71268
                                             39 BANK1      7     5      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       3     1      2   71333
                                             39 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          3     1      2   71268
                                             39 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   17424
                                             70 BANK0      2     2      0
                                             25 BANK1     14     0     14
                            ___fladd
                             ___flge
                            ___flsub
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getStateFunc                                         7     5      2    2106
                                             10 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         8     5      3    2532
                                             10 BANK0      8     5      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                          9     7      2   63306
                                             39 BANK1      9     7      2
                      _OLED_print_xy
                             ___bmul
                            ___fltol
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         8     6      2   64851
                                             39 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    2392
                                             11 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1491
                                             11 BANK0      6     5      1
             _OLED_scrollDisplayLeft
            _OLED_scrollDisplayRight
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      34
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayRight                              0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayLeft                               0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    4282
                                             22 BANK1     11     7      4
                            ___awdiv
                            ___awmod
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   33093
                                             25 BANK1     14     8      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1994
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   18297
                                             17 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       9     7      2     585
                                              4 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      8     6      2   19937
                                             13 BANK1      8     6      2
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          7     5      2    7069
                                             70 BANK0      1     1      0
                                             25 BANK1      6     4      2
                             ___flge
                              _error
                      _getDataPacket
                            _timeNow
                          _timeSince
                    _uartIsDataReady
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       3
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIsDataReady                                      2     2      0      34
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     729
                                              8 BANK0     16    12      4
                            _timeNow
 ---------------------------------------------------------------------------------
 (2) _timeNow                                              4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getDataPacket                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  14    12      2   23386
                                             25 BANK1     14    12      2
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
                      _setLoadSwitch
 ---------------------------------------------------------------------------------
 (2) _setLoadSwitch                                        1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     502
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      22
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                2     2      0    1184
                                             11 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1153
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1419
                                             16 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     396
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     546
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        29    27      2   37980
                                             54 BANK1     15    13      2
                                              0 BANK6     14    14      0
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              148   142      6   14053
                                             30 BANK1     24    18      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 6     2      4     465
                                             17 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            8     4      4     130
                                             22 BANK1      8     4      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               8     4      4     130
                                             22 BANK1      8     4      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    7154
                                             22 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     877
                                             70 BANK0      2     2      0
                                             13 BANK1      9     5      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               8     5      3     424
                                             17 BANK0      8     5      3
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    1901
                                             13 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     805
                                              4 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1106
                                             10 BANK0     14    10      4
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4406
                                             13 BANK1     12     4      8
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   63    61      2   24314
                                             13 BANK1     63    61      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5887
                                              0 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4922
                                             50 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    8573
                                             24 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     980
                                              4 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    3483
                                             50 BANK0     13     5      8
                                              0 BANK1     13    13      0
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0     796
                                             11 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                             10 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                             11 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                             10 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              4 BANK0      1     1      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     306
                                              7 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              4 BANK0      3     3      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _OLED_pulseEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  4     4      0     416
                                              0 BANK0      4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (10) _uartReceiveISR                                      1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (11) _strncpy                                             6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (10) _rotISR                                              8     8      0      23
                                              4 COMMON     8     8      0
                          i1_timeNow
 ---------------------------------------------------------------------------------
 (10) _pushButtonISR                                       2     2      0      67
                                              4 COMMON     2     2      0
                        _get10msTick
                      _reset10msTick
                          i1_timeNow
 ---------------------------------------------------------------------------------
 (11) i1_timeNow                                           4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (11) _reset10msTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _get10msTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_clearDisplay
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write4bits
       _OLED_pulseEnable
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_returnHome
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _calcRequiredPower
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
   _channelThing
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___wmul (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
       _sortDC *
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul (ARG)
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flsub (ARG)
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
     ___xxtofl
       ___wmul (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
     _setLoadSwitch
   _checkSensor
     ___flge
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getDataPacket
     _timeNow
     _timeSince
       _timeNow
     _uartIsDataReady
     _uartReset
     _uartSendByte
   _getAnalogValues
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___wmul (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
   _initialize
   _menu
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___fltol
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _error *
       ___awmod
     _getNextState *
       ___wmul
     _getPB *
     _getStateFunc *
       ___wmul
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___fladd (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fladd (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flsub (ARG)
             ___fladd
               ___flmul (ARG)
                 __Umul8_16
                 ___xxtofl (ARG)
                   ___wmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _timeSince *
       _timeNow
   _setLoadSwitch
   _systemCheck
     _OLED_clearDisplay
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_off
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       _OLED_write
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       ___bmul (ARG)
         ___awdiv (ARG)
     _OLED_returnHome
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___fladd (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___wmul (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _itoa
       ___awdiv
       ___awmod
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub (ARG)
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
     _setChannelSwitch
     _setLoadSwitch
     _setOLEDPower
   _timeNow
   _timeSince
     _timeNow
   _viewErrorMessage
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       _OLED_write
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       ___bmul (ARG)
         ___awdiv (ARG)
     _OLED_returnHome
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _getLastError
     _getPB
     _removeLastError
       ___awmod
     _setLoadSwitch

 _ISR (ROOT)
   _pushButtonISR
     _get10msTick
     _reset10msTick
     i1_timeNow
   _rotISR
     i1_timeNow
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     48      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4D      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1EA       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     41      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      4F      12       98.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      48      14       90.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      4D      16       96.3%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      E       E      18       17.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              16      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1EA      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Jan 30 19:01:57 2020

                   _pushButtonISR 2964                     returnToPage@n 002E          __end_of_transition_table 3841  
                    _stateFuncTbl 3054                      ___fldiv@aexp 00AC                      ___fldiv@bexp 00AB  
                    ___fldiv@sign 00A4                    ___bmul@product 002F                       __CFG_CP$OFF 0000  
             __end_of_systemCheck 120E            _calcRequiredPower$2590 00BB            _calcRequiredPower$2591 00BF  
          _calcRequiredPower$2592 00C3                      ___awdiv@sign 002A            _calcRequiredPower$2593 00C7  
          _calcRequiredPower$2594 00CB            _calcRequiredPower$2595 00CF            _calcRequiredPower$2589 00DF  
                ?_removeLastError 0070               ___wmul@multiplicand 0026                    ??_getStateFunc 002C  
         ??_OLED_loadSpecialChars 002B               __Umul8_16@word_mpld 002A                       __CFG_LVP$ON 0000  
                             l113 20DE                               l130 29B1                               l164 2004  
                             l360 34FA                               l449 1A7B                               l803 1169  
                             l780 0B51                               l696 359A                               l787 0BF0  
                             l981 1809                               _ISR 0004                               _ema 2ADD  
                             _str 024E                      ___awmod@sign 002A                      __CFG_BORV$LO 0000  
                             wreg 0009                  returnToPage@page 002D                      ___flmul@aexp 0046  
                    ___flmul@bexp 004B                      ___flmul@sign 0045                      ___flmul@temp 0050  
                    ___flmul@prod 004C                     __CFG_BBEN$OFF 0000          __end_of_setChannelSwitch 2964  
                    _userActivity 0165                  channelThing@data 00D6                              ?_ISR 0070  
                    __CFG_ZCD$OFF 0000                      ___fltol@exp1 0067              __end_of_channelThing 1000  
                            l1150 2A0F                              l1303 1371                              l1151 2A29  
                            l1162 2E3F                              l1324 13E8                              l1316 13D0  
                            l1430 2FDC                              l1422 2FBE                              l1182 2DB7  
                            l1159 2DF1                              l1360 1FE8                              l1416 2F88  
                            l1362 1FF9                              l1338 1E85                              l1282 125B  
                            l1436 3637                              l1429 2FD2                              l1390 17F3  
                            l1286 12EE                              l1359 1FCC                              ?_ema 0030  
                            l1288 12D1                              l1480 3615                              l4201 1803  
                            l1475 35B5              __end_of_channelSetup 1AC4                              l5411 2279  
                            l7101 2FF7                              l5405 2228                              l7025 1789  
                            l7017 175B                              l5433 22CB                              l5425 22AF  
                            l5417 2294                              l7043 17C9                              l7019 1772  
                            l5451 2926                              l8011 0BBF                              l8003 0B82  
                            l4731 1011                              l7029 178B                              l5453 292C  
                            l5461 294D                              l8021 0C6B                              l7213 2BD9  
                            l7221 2BEF                              l5437 22E3                              l7117 2069  
                            l7039 17B4                              l4911 2A3B                              l5455 2932  
                            l8015 0BE3                              l8007 0B9F                              l7303 07D5  
                            l5391 28CC                              l8111 23D7                              l7049 17E0  
                            l6441 1233                              l7073 2F97                              l5457 2938  
                            l5449 2920                              l8009 0BB9                              l7145 2560  
                            l7233 2BFA                              l7241 2C0F                              l5385 2896  
                            l8121 2440                              l8113 23EC                              l6507 12D9  
                            l6435 1228                              l7067 2F80                              l8019 0C15  
                            l7155 25B4                              l7147 25A7                              l8123 2455  
                            l8115 2401                              l5653 35F9                              l6605 13E0  
                            l6533 130E                              l6525 12FC                              l6509 12DB  
                            l6517 12E9                              l7077 2F9B                              l8037 0C7B  
                            l6701 28EF                              l4693 3743                              l7157 25CA  
                            l7341 1418                              l7405 0548                              l8125 246A  
                            l8117 2416                              l8141 2509                              l6535 1310  
                            l6543 131F                              l6463 1253                              l6439 122B  
                            l7087 2FD0                              l7079 2FAB                              l7271 354E  
                            l8055 0D33                              l6703 28FB                              l6711 2910  
                            l7191 2B9A                              l7351 143E                              l7343 141D  
                            l7431 0615                              l7423 05F9                              l8135 24B3  
                            l8127 247F                              l8119 242B                              l8223 2123  
                            l6801 1E57                              l6609 13E4                              l6561 1383  
                            l6553 1369                              l7089 2FC3                              l4881 36D9  
                            l7177 25DC                              l7193 2BAB                              l7345 1420  
                            l7433 062B                              l7425 05FA                              l7601 0981  
                            l8161 2318                              l8145 2511                              l8137 24C8  
                            l8129 2494                              l8241 2161                              l6619 35AF  
                            l6459 1250                              l6651 2AA1                              l7267 3548  
                            l8091 0EE9                              l8075 0EB3                              l8067 0E20  
                            l6715 2918                              l6707 2907                              l5683 18A7  
                            l7179 2673                              l7187 2B51                              l7363 149E  
                            l7451 0715                              l7523 1A54                              l7515 1A20  
                            l8163 2338                              l4955 353E                              l8139 24DD  
                            l8235 214F                              l8219 2108                              l6901 1FB0  
                            l6469 1265                              l6725 2E0B                              l6661 2AA9  
                            l6645 2A96                              l6741 2D70                              l8093 0F5D  
                            l4877 36CF                              l7453 072B                              l7461 0787  
                            l7429 05FF                              l7509 19F4                              l8229 2138  
                            l6815 1E78                              l6583 13A2                              l6575 1397  
                            l6663 2AB5                              l7455 0741                              l7447 06E8  
                            l7527 1A66                              l7519 1A3A                              l7615 2EEF  
                            l8175 235E                              l8343 24E6                              l8239 2159  
                            l6809 1E68                              l6569 1390                              l6577 1399  
                            l6729 2E25                              l6673 2AD0                              l6761 2DA3  
                            l6745 2D7A                              l7721 1B12                              l8089 0F56  
                            l8345 0773                              l7449 06FF                              l7465 078D  
                            l7553 0844                              l8193 23C8                              l8177 2362  
                            l8169 233F                              l6915 1FF4                              l6835 1EB4  
                            l6819 1E7C                              l6587 13A4                              l6499 12A1  
                            l6771 2DC6                              l6763 2DB3                              l7731 1B6A  
                            l7715 1AEC                              l8099 0F5E                              l8347 27F6  
                            l7395 15D1                              l7459 0757                              l7643 2214  
                            l6861 1F39                              l6853 1F08                              l6829 1EA6  
                            l6677 2AD8                              l6669 2AC7                              l7733 1B6E  
                            l6693 28E9                              l8349 2955                              l7901 27FE  
                            l7565 08BA                              l7549 0837                              l7805 112C  
                            l6855 1F10                              l6863 1EED                              l6935 15EE  
                            l7751 1C24                              l7743 1BCB                              l7487 1955  
                            l7591 096C                              l7575 0908                              l7583 0942  
                            l7655 2C2C                              l6881 1F62                              l6865 1F40  
                            l6953 1611                              l6937 15F0                              l7753 1C2A  
                            l7729 1B49                              l6689 28E2                              l6891 1F84  
                            l6875 1F55                              l6795 1E4A                              l6955 1613  
                            l6939 15F8                              l7915 00E5                              l7851 26E5  
                            l7499 19A9                              l7587 0954                              l7595 097F  
                            l7683 2D08                              l7819 116A                              l6789 1E3A  
                            l6965 1629                              l6957 161B                              l7757 1C5D  
                            l7845 26B2                              l7669 2C9A                              l7829 11B4  
                            l6887 1F81                              l6879 1F46                              l6799 1E4E  
                            l7759 1C62                              l7951 09FF                              l7943 09A6  
                            l7847 26BB                              l7839 11FE                              l7783 10D6  
                            l7857 2708                              l7849 26C4                              l7777 10C2  
                            l7971 0A81                              l7955 0A02                              l7867 273F  
                            l7859 2729                              l7787 110C                              l7973 0A8E  
                            l7949 09CE                              l7893 27E6                              l7869 2743  
                            l7991 0AD9                              l7959 09D2                              l7895 27E9  
                            l7887 27D2                              l7977 0AA7                              l7899 27EC  
                            STR_1 306F                              STR_2 3A9D                              STR_3 3AD2  
                            STR_4 3AF0                              STR_5 3A7D                              STR_6 3ABA  
                            STR_7 3A7D                              STR_8 3AD6                              STR_9 3936  
                            u4005 3562                              _PIE0 0716                              _PIE3 0719  
                            _PIE4 071A                              u4505 180F                              u8030 12C0  
                            u4495 180A                              u8040 12C1                              u8025 12B5  
                            u5625 1027                              u9005 1FD8                              u3975 281F  
                            u6720 35EF                              u3985 282D                              u9105 169F  
                            u8153 1331                              u8145 1314                              u6545 2B3B  
                            u3995 283D                              u9115 16CE                              u8075 12DF  
                            u9125 1724                              u9135 173B                              u5935 2A37  
                            u9145 174A                              u8425 2AAC                              u5865 36DA  
                            u6745 18AB                              u9155 175E                              u8195 1384  
                            u9315 2FA4                              u5875 36E1                              u9245 17A2  
                            u8445 2AB6                              u8525 28F2                              u8375 35B6  
                            u9255 17BD                              u9175 1767                              u8295 13BB  
                            u9335 2FB8                              u8455 2AC0                              u9265 17D3  
                            u8465 2AC8                              u8705 2DBB                              u8545 2901  
                            u9355 2FCA                              u8555 2908                              u8645 2D84  
                            u8825 1EF5                              u8915 1F56                              u8835 1EFC  
                            u9395 2FE4                              u8675 2DA4                              u9645 36AA  
                            u9725 07BE                              u8855 1F09                              u9655 36B6  
                            u9815 05A2                              u8865 1F26                              u9665 367A  
                            u9675 3686                              u9595 2BD1                              u9835 062F  
                            u9845 066B                              u8895 1F4A                              _TMR0 059C  
                            u8985 1F9D                              u9865 0699                              _TMR1 020C  
                            u8995 1FBC                              u9875 075B                              u9885 192F  
                            u9975 0812         __size_of_OLED_pulseEnable 0009              __size_of_get10msTick 0003  
                   __CFG_FCMEN$ON 0000                     OLED_send@mode 0027                              _data 2746  
                            _head 016B                              _grpA 025C                              _grpB 0258  
                            _main 20B6                              _ftoa 2515                              _menu 22ED  
                            _itoa 2B46                  channelSetup@data 00C7                              _tail 0069  
                            fsr0h 0005                              fsr1h 0007                              indf0 0000  
                            fsr0l 0004                              indf1 0001                              fsr1l 0006  
                            _swap 3637                  channelSetup@page 016D                              btemp 007E  
                   __CFG_BOREN$ON 0000                              start 007A                       ?_OLED_write 0070  
                    spinInput@dir 0067                   ___fldiv@new_exp 00A5                      spinInput@max 00BF  
                    spinInput@min 00BB                 _calcRequiredPower 00E3                    ?_pushButtonISR 0070  
                   __CFG_CSWEN$ON 0000                 ___bmul@multiplier 0030                     __CFG_MCLRE$ON 0000  
              ?_calcRequiredPower 00AD                             ??_ISR 0020                             ??_ema 0038  
              __size_of_OLED_init 008B                __size_of_OLED_send 0017                 channelThing@phyCh 032C  
                  _setFudgeFactor 2CF6                 channelThing@total 0320                     ___fltol@sign1 0066  
                 __end_of___fladd 13F0                             ?_main 0070                             ?_ftoa 00B9  
                           ?_menu 00D0                   __end_of___fldiv 2000                             ?_itoa 00B6  
                 __end_of___awdiv 2ADD                             STR_10 3ADA                             STR_11 3AE7  
                           STR_12 3AE4                             STR_20 39FB                             STR_21 3A22  
                           STR_13 39EE                             STR_22 3A2F                             STR_14 3993  
                           STR_30 396C                             STR_23 3AC9                             STR_15 3AEA  
                           STR_31 39A0                             STR_16 3AED                             STR_40 3AAC  
                           STR_24 3A85                             STR_32 395F                             STR_41 3AB8  
                           STR_25 3AC9                             STR_17 3A64                             STR_33 3979  
                   __CFG_WDTE$OFF 0000                             STR_50 3AE1                             STR_26 3A95  
                           STR_42 3A75                             STR_18 3A08                             STR_34 39D4  
                           STR_27 3A64                             STR_35 3A8D                             STR_51 3A48  
                           STR_43 39E1                             STR_19 3986                             STR_60 3AB8  
                           STR_52 3955                             STR_36 3A2F                             STR_44 3A15  
                           STR_28 3952                   __end_of___awmod 291D                             STR_45 39D4  
                           STR_37 3AC8                             STR_61 3A5B                             STR_53 39C7  
                           STR_29 39BA                             STR_46 3AB8                             STR_54 3AB3  
                           STR_38 3AA5                             STR_70 391E                             STR_62 3841  
                           STR_39 3AC8                             STR_55 3ADE                             STR_47 3A6D  
                           STR_71 38D0                             STR_63 3875                             STR_80 3904  
                           STR_72 391E                             STR_56 39AD                             STR_64 385B  
                           STR_48 3800                             STR_57 3AB8                             STR_49 3AC1  
                           STR_81 3945                             STR_73 38A9                             STR_65 389C  
                           STR_58 3A52                             STR_66 3904                             STR_82 38F7  
                           STR_74 384E                             STR_59 3818                             STR_67 38C3  
                           STR_75 388F                             STR_83 3868                             STR_68 3841  
                           STR_76 3938                             STR_84 3882                             STR_69 3911  
                           STR_85 38DD                             STR_77 38B6                             STR_86 3A3C  
                           STR_78 38EA                             STR_87 3ACE                             STR_79 392B  
                 __end_of___flmul 1800               ??_calcRequiredPower 00AF   checkSensor@sensorUpdateInterval 0224  
                 __end_of___flsub 378E                   __end_of___fltol 2DD6                             ?_swap 0031  
                           u11100 238D                             u11005 0F7F                             u11101 238B  
                           u11110 238E                             u10215 1B93                             u11015 0F9D  
                           u10305 1C6C                             u10225 1BD6                             u11025 0FDC  
                           u10235 1BEF                             u10245 1BFC                             u10085 2EF5  
                           u10255 1C06                             u10175 1AF0                             u10095 2F26  
                           u11135 23BE                             u11207 1155                             _T1CLK 0211  
                           u10265 1C16                             u10185 1B00                             u11217 2BE0  
                           u11307 2EA8                             u10275 1C35                             u11227 2C01  
                 ___awdiv@divisor 0024                             u11317 2EB4                             u10285 1C3F  
                           u11237 0AD0                             u10605 09AC                             u11327 2EC0  
                           u11247 2E5A                             u10535 00F3                             u10295 1C4F  
                           _T1CON 020E                             u11337 2ECC                             u11257 2E6C  
                           u10545 03D8                             u11347 2ED8                             u11267 2E78  
                           u10555 03FE                             u11357 2006                             u11277 2E84  
                           u10565 046C                             u10805 0CF0                             u11197 2165  
                           u11367 200C                             u11287 2E90                             u10575 051D  
                           u11377 284A                             u11297 2E9C                             u10905 0E6D  
                           u10825 0D37                             u11387 34D1                             u10835 0D47  
                           u10845 0D57                             u10765 0C92                             u10935 0EFF  
                           u10855 0DAA                             u10775 0CA5                             u10945 0F12  
                           u10785 0CC2                             u10955 0F29                             u10875 0DD9  
                           u10795 0CD9                             u10965 0F35                             u10885 0E3E  
                           u10975 0F4B                             u10995 0F62                             _IOCAN 1F3E  
                           _IOCAP 1F3D                             _IOCCN 1F54                             i1l309 29A4  
                           i1l265 001D                             i1l274 0071                             i1l268 0039  
                           i1l278 0078                  __end_of_OLED_off 34BE                   ___awdiv@counter 0029  
           __end_of_setLoadSwitch 34B6             __end_of_reset10msTick 34A2                             _TRISA 0012  
                           _TRISB 0013                             _TRISC 0014            uartReceiveISR@checksum 01E8  
             ___lmul@multiplicand 0028              __size_of_checkSensor 0184                      ?_setDPOffset 00C7  
                   __CFG_WRTB$OFF 0000                     __CFG_WRTC$OFF 0000        __end_of_checkChannelStatus 0C79  
                  OLED_send@value 0029                             _getPB 351F               getNextState@timeout 002C  
                  statusView@data 00C7                    statusView@page 016F          statusView@prevSensorStat 01EE  
                           ema@in 0030                  ?_uartIsDataReady 0070                             _error 37C5  
                           _setup 216B                             _qsort 1AC4                    setSkyTemp@data 00C7  
                           ftoa@w 00C4                             pclath 000A                   __end_of_timeNow 2811  
            __size_of_channelView 0266                             swap@c 0036                   __end_of_sortCur 37C5  
                           status 0003                             wtemp0 007E         __end_of_calcRequiredPower 053E  
                 __end_of_strncpy 3727                     spinInput@step 00C3                       _systemCheck 1033  
            __end_of_getLastError 3545                   __initialization 007C                      __end_of_main 216B  
                    __end_of_ftoa 267C                      __end_of_menu 23CC                      __end_of_itoa 2BAF  
         __size_of_getAnalogValue 001D                      __end_of_swap 3666            __end_of_setFudgeFactor 2D65  
                  __CFG_SAFEN$OFF 0000                  _viewErrorMessage 23CC                __size_ofi1_timeNow 000A  
                          ??_main 00EC                            ??_ftoa 00BF                            ??_menu 00D2  
                          ??_itoa 00BA                            ??_swap 0035                    OLED_print_xy@s 0032  
                   sortDCRev@cmp1 00B6                     sortDCRev@cmp2 00B8              __end_of_getNextState 22ED  
         __size_of_setOutputPower 0177               __size_of_OLED_write 000B                setOutputPower@data 00C7  
           getAnalogValue@channel 0027                            ?_getPB 0070           _OLED_scrollDisplayRight 34A6  
                          _ADCON1 009E             calcRequiredPower@data 00AD                            ?_error 0070  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0026  
                          ?_setup 00C7                            _ANSELA 1F38                            _ANSELB 1F43  
                          _ANSELC 1F4E                __CFG_RSTOSC$HFINT1 0000                            ?_qsort 00BE  
                          _T0CON0 059E                            _T0CON1 059F                            _RC1REG 0119  
                          _RC1STA 011D                            _RC6PPS 1F26                            i1l6205 2A86  
                          i1l6301 0036                            i1l6311 0069                    __CFG_WDTCCS$SC 0000  
                          i1l6147 297E                            i1l6159 2998                            i1l6175 2880  
                          i1l6193 2A51                            i1l6179 2887                            i1l6187 2A47  
                          i1l6277 0017                            i1l6199 2A71                            i1l6295 002F  
                          i1l6289 0028             __end_of_getDataPacket 0800                            i1l4991 36FB  
                          i1l4993 3713                            i1l4997 371C                            _INTCON 000B  
               __end_of_OLED_init 2EDD                 __end_of_OLED_send 356E                   systemCheck@data 00C1  
                          _OSCFRQ 0893                            _SPBRGL 011B                            _TX1REG 011A  
                          _TX1STA 011E              __end_of_getStateFunc 28D7              getNextState@intState 002A  
                __end_of___xxtofl 3000                   ??_pushButtonISR 0074                    __CFG_PWRTE$OFF 0000  
                     menu@timeout 00D8                            ___flge 2DD6                            ___bmul 3545  
                          ___fleq 29F4                     ?_setOLEDPower 0070                            ___lmul 36C6  
      OLED_loadSpecialChars@F7985 02CD                         ??___fladd 005A                            ___wmul 1800  
                       ??___fldiv 005A                         ??___awdiv 0028                    __CFG_STVREN$ON 0000  
                       ??___awmod 0028                         ??___flmul 0040                         ??___flsub 0066  
                       ??___fltol 00B1                   ?_setFudgeFactor 00C7                channelSetup@chData 00CD  
        __size_of_OLED_returnHome 0004                            _paging 2BAF                            _memcpy 360B  
                ___awdiv@quotient 002B                   ___awmod@divisor 0024                            _rotISR 2850  
                          _rotDir 01EC           __size_of_initGlobalData 010D                     ?_OLED_command 0070  
                 ___awmod@counter 0029                            _sortDC 3696                            menu@pb 00D7  
              __size_of__Umul8_16 0020             __size_of_channelThing 0387             __size_of_channelSetup 019B  
           OLED_waitForReady@busy 0024                         ??_timeNow 0028                            swap@s1 0033  
                          swap@s2 0034                 OLED_command@value 002A                            qsort@i 00D2  
                          qsort@j 00D4                            qsort@l 00CC                            qsort@r 00CE  
                          qsort@s 00D0                            qsort@x 00CA                         ??_sortCur 0068  
                       ??_strncpy 0073                  _OLED_pulseEnable 34CE                        ___flge@ff1 00AD  
                      ___flge@ff2 00B1                     checkSensor@dp 0066                      ___xxtofl@arg 0034  
                    ___xxtofl@exp 0033                      ___xxtofl@val 002A                        ___fleq@ff1 0024  
                      ___fleq@ff2 0028                    spinInput@input 00B9                 __end_ofi1_timeNow 34EA  
         __end_of__initialization 00DF                      ftoa@intValue 00C3        __size_of_calcRequiredPower 045B  
                      ___fltol@f1 00AD               ___bmul@multiplicand 002D                         ?_OLED_off 0070  
        __size_of_OLED_write4bits 003F                    ??_setOLEDPower 0024                    __pcstackCOMMON 0070  
                    __pidataBANK1 0003                      __pidataBANK3 0002                      __pidataBANK4 34C6  
                    __pidataBANK5 35C4                     __end_of_getPB 352A              uartReceiveISR@buffer 02AA  
                   __end_of_error 3800                      _channelThing 0C79          __size_of_getAnalogValues 01B6  
                    _channelSetup 1929                     __end_of_setup 2225                     __end_of_qsort 1C72  
                  ??_OLED_command 002A    __size_of_OLED_loadSpecialChars 0027                setFudgeFactor@data 00C7  
   __end_of_OLED_loadSpecialChars 360B                __size_of_getRotDir 000B         ??_OLED_scrollDisplayRight 002B  
                         ??_getPB 0024            __size_of_OLED_print_xy 0032                           ??_error 002B  
                      _dataPacket 02BE                 ?_setChannelSwitch 0024                           ??_setup 00C9  
            __size_of_setDPOffset 006E                           ??_qsort 00C4                        __pbssBANK0 0068  
                      __pbssBANK2 0161                        __pbssBANK3 01E0                        __pbssBANK4 0220  
                      __pbssBANK5 02A0                uartIsDataReady@ret 0025           __size_of_uartReceiveISR 004E  
               setOLEDPower@state 0024                ??_setChannelSwitch 0025             __size_of_getLastError 000F  
                    ??_OLED_write 002A                 __end_of__Umul8_16 35C4                        ??_OLED_off 002B  
                      __pmaintext 20B6                    _getAnalogValue 3587                           ?___flge 00AD  
                         ?___bmul 002D                           ?___fleq 0024                           ?___lmul 0024  
                         ?___wmul 0024                 getStateFunc@state 002F                   __CFG_PPS1WAY$ON 0000  
                      __pintentry 0004             __size_of_getNextState 00C8                           ?_paging 002B  
                         ?_memcpy 0031                 _OLED_waitForReady 2000                    ___lmul@product 002C  
                         ?_rotISR 0070          ??_OLED_scrollDisplayLeft 002B                           ?_sortDC 00B6  
              __size_of_timeSince 0056                ?_OLED_waitForReady 0070                __size_of_uartReset 0009  
           channelThing@totalGrpA 0324             channelThing@totalGrpB 0328                    _setOutputPower 080C  
               ??_OLED_returnHome 002B                         ?___xxtofl 002A                __size_of_spinInput 0097  
                         _OSCCON1 088D                __size_of_sortDCRev 0030          __size_of_removeLastError 0019  
              __end_of_OLED_write 3509                      _getLastError 3536                     ??_get10msTick 0070  
             ??_OLED_waitForReady 0024             __size_of_getStateFunc 0044                 pushButtonISR@time 0075  
                   channelThing@n 032D          __end_of_viewErrorMessage 2515                       rotISR@input 007B  
                    _getNextState 2225                      ?_systemCheck 00C1                _checkChannelStatus 0983  
          __end_of_getAnalogValue 35A4                 __end_of_getRotDir 351F                        ema@average 0032  
                   _OLED_print_xy 3727                getAnalogValues@adc 00B3         __end_of_OLED_waitForReady 201F  
                 __size_of___flge 007C                   __size_of___bmul 0012                   __size_of___fleq 0049  
                         ___fladd 120E                           ___fldiv 1E28                           ___awdiv 2A8B  
                 __size_of___lmul 0030                           ___awmod 28D7                           ___flmul 15D4  
                         ___flsub 3759                           ___fltol 2D65                   __size_of___wmul 001C  
                 OLED_write@value 002A               ?_checkChannelStatus 00B9                     ?_uartSendByte 0070  
                  _initGlobalData 181C                   __size_of_paging 006B                 ??_OLED_write4bits 0024  
                 __size_of_memcpy 002C                        _initialize 29AC                   __size_of_rotISR 0043  
          __end_of_setOutputPower 0983                           __ptext1 23CC                           __ptext2 356E  
                         __ptext3 3536                           __ptext4 1033                           __ptext5 34BE  
                         __ptext6 07FA                           __ptext7 34B6                           __ptext8 34AA  
                         __ptext9 22ED                     ??_checkSensor 00BB                   __size_of_sortDC 0030  
                         _pbState 007D                      _getStateFunc 2893                   __CFG_WRTAPP$OFF 0000  
                    __size_of_ISR 0076                           ema@tmp0 0040                      __size_of_ema 0069  
                      ??___xxtofl 002E                  ___awmod@dividend 0026                 ??_getAnalogValues 0066  
                       _IOCAFbits 1F3F                   __CFG_WRTSAF$OFF 0000                           _numGrpA 01E5  
                         _numGrpB 01E4                           _rxCount 006B                           _timeNow 2800  
                   ??_channelView 00C9              __end_of_setOLEDPower 34C6                           _sortCur 378E  
                         clrloop0 352B              ??_checkChannelStatus 00BB           setChannelSwitch@channel 0027  
                         _strncpy 36F6              end_of_initialization 00DF                        _setLensDia 2EDD  
                         ftoa@len 00C1                           ftoa@pos 00C5                           ftoa@str 00C6  
                         paging@n 0030                           memcpy@d 0037                           memcpy@n 0032  
                         memcpy@s 0038                    paging@lastPage 002B             checkChannelStatus@adc 00BF  
            __end_of_OLED_command 34F4             checkChannelStatus@avg 01E0                           init_ram 0800  
                         itoa@str 00B6                           initloop 0801               __end_of_get10msTick 349F  
                      _setSkyTemp 2C88                 __end_of_timeSince 07FA                 __end_of_uartReset 34E0  
        __size_of_uartIsDataReady 000B                  ??_setFudgeFactor 00C9                         _OLED_init 2E52  
                       _OLED_send 3557                   ?_getAnalogValue 0024            __size_of_setLoadSwitch 0008  
          __size_of_reset10msTick 0003               OLED_setCursor@F7972 0264                     ?_returnToPage 0070  
               __end_of_spinInput 20B6                    ?_OLED_print_xy 0031                 __end_of_sortDCRev 3696  
              OLED_print_xy@F7980 0260                           sortDC@a 00BC                           sortDC@b 00BD  
                         swap@len 0031            __end_of_initGlobalData 1929                     _dataReadyFlag 01E9  
                  ??_uartSendByte 0024             __CFG_WDTCPS$WDTCPS_31 0000          __end_of_OLED_pulseEnable 34D7  
                       _PORTAbits 000C                         _PORTCbits 000E                   ?_setOutputPower 00C7  
 __size_of_OLED_scrollDisplayLeft 0004                   _selectedChannel 006A                       ___fladd@grs 0065  
                   ___xxtofl@sign 0032                         _TRISCbits 0014                       ___fldiv@grs 00A7  
                     ___fldiv@rem 00A0              _getAnalogValues$2596 00AF               __end_of_checkSensor 2800  
                __CFG_FEXTOSC$OFF 0000      OLED_loadSpecialChars@special 002C                    _uartReceiveISR 2A3D  
                     ___flmul@grs 0047                 ??_removeLastError 002B                        _statusView 13F0  
             __end_of_channelView 07A4                   channelView@data 00C7                 getNextState@state 0030  
                 channelView@page 016E                        ?_OLED_init 0070                    ??_returnToPage 002B  
                      ?_OLED_send 0027                         i1_timeNow 34E0             __end_of_pushButtonISR 29AC  
      __size_of_OLED_waitForReady 001F                 __size_of_OLED_off 0008                   ?_initGlobalData 0024  
                  __end_of___flge 2E52              __end_of_nextStateTbl 3054                    __end_of___bmul 3557  
                  __end_of___fleq 2A3D                    __end_of___lmul 36F6                    __end_of___wmul 181C  
                     ?_initialize 0070            __size_of_getDataPacket 0002                    __end_of_paging 2C1A  
                  __end_of_memcpy 3637                        ftoa@fValue 00B9                    __end_of_rotISR 2893  
                  __end_of_sortDC 36C6                     _setLoadSwitch 34AE               start_initialization 007C  
                   _reset10msTick 349F                       __end_of_ISR 007A                       __end_of_ema 2B46  
        OLED_print_xy@row_offsets 0035            __end_of_uartReceiveISR 2A8B                       _get10msTick 349C  
                     ?_setLensDia 00C7            _OLED_scrollDisplayLeft 34A2              calcRequiredPower@Rth 00B7  
            initGlobalData@chData 002B              calcRequiredPower@phi 00D7                       ?_setSkyTemp 00C7  
                 ??_OLED_print_xy 0034                    systemCheck@str 00C7                        ?i1_timeNow 0070  
                     sortCur@cmp1 00B6                       sortCur@cmp2 00B8                  __CFG_LPBOREN$OFF 0000  
        checkChannelStatus@chData 00C5                        error@error 002C                          ??___flge 00B5  
                        ??___bmul 002E                          ??___fleq 002C              __size_of_systemCheck 01DB  
                  timeSince@since 0028                          ??___lmul 002C         __size_of_setChannelSwitch 0047  
                 _OLED_returnHome 07FA                          ??___wmul 0028                         __Umul8_16 35A4  
               ??_uartIsDataReady 0024                       __pdataBANK1 00ED                       __pdataBANK3 01EE  
                     __pdataBANK4 0260                       __pdataBANK5 02CD                setLoadSwitch@state 0024  
                        ??_paging 002C                          ??_memcpy 0034                          ??_rotISR 0074  
           setChannelSwitch@state 0024                       qsort@compar 00C2                          ??_sortDC 00BA  
                OLED_print_xy@col 0039                       _checkSensor 267C             __size_of_setOLEDPower 0008  
                       ___fladd@a 0056                         ___fladd@b 0052                  OLED_print_xy@row 0031  
                  ?_setLoadSwitch 0070                         ___fldiv@a 0052                         ___fldiv@b 0056  
                  ?_reset10msTick 0070                       __pbssBIGRAM 2746                         ___flmul@a 003C  
                       ___flmul@b 0038                       __pbssCOMMON 007C                         ___flsub@a 00A0  
                       ___flsub@b 00A4                         ___latbits 0003                     ??_setDPOffset 00C9  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK2 0120  
                   __pcstackBANK3 01A0                     __pcstackBANK6 0320             _OLED_loadSpecialChars 35E4  
           __size_of_OLED_command 000A                 __size_of___xxtofl 0096                 paging@currentPage 002E  
                     _channelView 053E                   ?_uartReceiveISR 0070              __end_of_uartSendByte 34FE  
                    systemCheck@n 00CA                 ?_viewErrorMessage 0070                       ?_statusView 00C7  
                   _getDataPacket 07FE               __size_of_initialize 0048              setOutputPower@chData 00CD  
              ??_viewErrorMessage 003A                   _OLED_write4bits 2811                       ??_OLED_init 002B  
                     ??_OLED_send 0028                         _vChannels 022E                      _setOLEDPower 34BE  
                        ?___fladd 0052                   _getAnalogValues 1C72                          ?___fldiv 0052  
                        ?___awdiv 0024                          ?___awmod 0024                          ?___flmul 0038  
                        ?___flsub 00A0                          ?___fltol 00AD                         _getRotDir 3514  
                      ?__Umul8_16 0024               __size_of_setLensDia 008D          ?_OLED_scrollDisplayRight 0070  
                    _OLED_command 34EA                          _BAUD1CON 011F                    getNextState@pb 002B  
                    channelView@n 00CF               __size_of_setSkyTemp 006E              __end_of_returnToPage 1033  
                        ?_timeNow 0024                    __size_of_getPB 000B                          ?_sortCur 00B6  
                  __size_of_error 003B                         _tick100ms 0161                          ?_strncpy 0070  
                  __size_of_setup 00BA                    __size_of_qsort 01AE                    ?_getDataPacket 0070  
                ??_getAnalogValue 0026               __end_of_setDPOffset 2C88                    ___wmul@product 0028  
                        _LATAbits 0018                          _LATBbits 0019                          _LATCbits 001A  
         __end_of_OLED_returnHome 07FE                         clear_ram0 352A                     paging@lastDir 01E6  
                        _PIE0bits 0716                          _PIE3bits 0719                          _PIE4bits 071A  
                  setLensDia@data 00C7                       ??i1_timeNow 0074                          _OLED_off 34B6  
                        _PIR0bits 070C                          _PIR3bits 070F                          _PIR4bits 0710  
                       _timeSince 07A4                         _uartReset 34D7                   initGlobalData@n 002A  
               __CFG_BBSIZE$BB512 0000                  ??_setOutputPower 00C9                        ?_getRotDir 0070  
                       _spinInput 201F                         _sortDCRev 3666                 ?_OLED_pulseEnable 0070  
                 ??_setLoadSwitch 0024                   ??_reset10msTick 0070                        _ADCON0bits 009D  
               ___wmul@multiplier 0024                      _RX1DTPPSbits 1ECB               __size_of_statusView 01E4  
                 setDPOffset@data 00C7                ??_OLED_pulseEnable 0024            ?_OLED_loadSpecialChars 0070  
                 _removeLastError 356E                     menu@nextState 00DB                        sortDC@cmp1 00B6  
                      sortDC@cmp2 00B8              OLED_write4bits@value 0026                       _curRotState 007C  
                      sortDCRev@a 00BC                        sortDCRev@b 00BD                  _transition_table 3825  
            __end_of_stateFuncTbl 306F                 ___lmul@multiplier 0024           __end_of_OLED_write4bits 2850  
     __size_of_checkChannelStatus 02F6                      _nextStateTbl 3000                         ftoa@width 00BD  
         __end_of_getAnalogValues 1E28               calcRequiredPower@T1 00E3               calcRequiredPower@T2 00E7  
                ??_initGlobalData 0026                         paging@dir 002F                 _OLED_clearDisplay 34AA  
                   uartSendByte@s 0024                         menu@sleep 01E7                         menu@state 016A  
                       memcpy@tmp 0035                        ?_timeSince 0028                        ?_uartReset 0070  
 __end_of_OLED_scrollDisplayRight 34AA                ?_OLED_clearDisplay 0070         checkChannelStatus@channel 0068  
                _setChannelSwitch 291D           checkChannelStatus@ready 0169                       ??__Umul8_16 0026  
                   ?_channelThing 00D6                         itoa@value 00B8               getAnalogValues@data 00AD  
             getAnalogValues@avgI 0228                     ?_channelSetup 00C7               getAnalogValues@avgT 022C  
             getAnalogValues@avgV 022A                         itoa@width 00B9                  __size_of___fladd 01E2  
                      qsort@vbase 00C9                  __size_of___fldiv 01D8                  __size_of___awdiv 0052  
                __size_of___awmod 0046                        ?_spinInput 00B9                  __size_of___flmul 022C  
                __size_of___flsub 0035                  __size_of___fltol 0071                        qsort@stack 01A0  
                      qsort@width 00C0                        ?_sortDCRev 00B6            OLED_loadSpecialChars@n 004C  
                    ??_initialize 0024         checkChannelStatus@current 00C1               ??_OLED_clearDisplay 002B  
       checkChannelStatus@samples 01E3                          ___xxtofl 2F6A                       _rxFErrCount 01EB  
               _errorMessageQueue 02A0             __size_of_uartSendByte 000A                       _setDPOffset 2C1A  
        checkSensor@sensorTimeout 0220                          __ptext10 2CF6                          __ptext11 2C88  
                        __ptext20 201F                          __ptext12 2C1A                          __ptext21 2893  
                        __ptext13 216B                          __ptext30 1800                          __ptext22 2225  
                        __ptext14 2EDD                          __ptext31 3727                          __ptext23 1001  
                        __ptext15 080C                          __ptext40 2800                          __ptext32 29AC  
                        __ptext24 2BAF                          __ptext16 1929                          __ptext41 07FE  
                        __ptext33 181C                          __ptext25 3514                          __ptext17 053E  
                        __ptext50 29F4                          __ptext42 0983                          __ptext34 1C72  
                        __ptext26 34A6                          __ptext18 13F0                          __ptext51 0C79  
                        __ptext43 34AE                          __ptext35 267C                          __ptext27 34A2  
                        __ptext19 351F                          __ptext60 2A8B                          __ptext52 1AC4  
                        __ptext44 291D                          __ptext36 34F4                          __ptext28 2B46  
                        __ptext61 2F6A                          __ptext53 3637                          __ptext45 3587  
                        __ptext37 34D7                          __ptext29 2515                          __ptext70 34FE  
                        __ptext62 2DD6                          __ptext54 378E                          __ptext46 37C5  
                        __ptext38 3509                          __ptext71 2E52                          __ptext63 00E3  
                        __ptext55 3696                          __ptext47 28D7                          __ptext39 07A4  
                        __ptext80 2850                          __ptext72 34EA                          __ptext64 3759  
                        __ptext56 3666                          __ptext48 2ADD                          __ptext81 2964  
                        __ptext73 2000                          __ptext65 120E                          __ptext57 2D65  
                        __ptext49 36C6                          __ptext82 34E0                          __ptext74 3557  
                        __ptext66 15D4                          __ptext58 360B                          __ptext83 349F  
                        __ptext75 2811                          __ptext67 35A4                          __ptext59 3545  
                        __ptext84 349C                          __ptext76 34CE                          __ptext68 1E28  
                        __ptext69 35E4                          __ptext78 2A3D                          __ptext79 36F6  
                    ?_get10msTick 0070                  __size_of_timeNow 0011                   ??_getDataPacket 0024  
         ?_OLED_scrollDisplayLeft 0070                      ??_setLensDia 00C9                  __size_of_sortCur 0037  
                   getNextState@n 0031                       _OSCCON3bits 088F                  __size_of_strncpy 0031  
                        ema@alpha 0034                     __size_of_main 00B5                     __size_of_ftoa 0167  
       __end_of_OLED_clearDisplay 34AE              main@sysCheckInterval 015C                     __size_of_menu 00DF  
                   __size_of_itoa 0069                      ??_setSkyTemp 00C9                   _uartIsDataReady 3509  
                        getPB@ret 0025                     __size_of_swap 002F                          _tick10ms 01ED  
                ?_OLED_returnHome 0070                __end_of_initialize 29F4              __CFG_WDTCWS$WDTCWS_7 0000  
                      _RC1STAbits 011D                       _rxOErrCount 01EA                    ??_channelThing 00D8  
                  ??_channelSetup 00C9                         setup@data 00C7                          int$flags 007E  
                       setup@page 016C                       ??_getRotDir 0024           __end_of_removeLastError 3587  
                        main@init 0160                      _uartSendByte 34F4             __size_of_returnToPage 0032  
              __end_of_setLensDia 2F6A           __size_of_setFudgeFactor 006F                      ?_checkSensor 00B9  
                ??_uartReceiveISR 0076                          ftoa@prec 00BE                          ftoa@sign 00C2  
                      _INTCONbits 000B                calcRequiredPower@A 00DB                calcRequiredPower@d 00D3  
              calcRequiredPower@n 00EB                calcRequiredPower@p 00B3                __end_of_setSkyTemp 2CF6  
                        menu@data 00D0                initGlobalData@data 0024                          menu@page 00D6  
                        memcpy@d1 0036                          menu@func 00D9                          memcpy@s1 0031  
  __end_of_OLED_scrollDisplayLeft 34A6                     ?_getLastError 0070                      timeSince@now 0034  
          checkChannelStatus@data 00B9                    __pstringtext10 3882                    __pstringtext11 388F  
                  __pstringtext20 3904                    __pstringtext12 389C                    __pstringtext21 3911  
                  __pstringtext13 38A9                    __pstringtext30 3986                    __pstringtext22 391E  
                  __pstringtext14 38B6                    __pstringtext31 3993                    __pstringtext23 392B  
                  __pstringtext15 38C3                    __pstringtext40 3A08                    __pstringtext32 39A0  
                  __pstringtext24 3938                    __pstringtext16 38D0                    __pstringtext41 3A15  
                  __pstringtext33 39AD                    __pstringtext25 3945                    __pstringtext17 38DD  
                  __pstringtext50 3A75                    __pstringtext42 3A22                    __pstringtext34 39BA  
                  __pstringtext26 3952                    __pstringtext18 38EA                    __pstringtext51 3A7D  
                  __pstringtext43 3A2F                    __pstringtext35 39C7                    __pstringtext27 395F  
                  __pstringtext19 38F7                    __pstringtext60 3AC1                    __pstringtext52 3A85  
                  __pstringtext44 3A3C                    __pstringtext36 39D4                    __pstringtext28 396C  
                  __pstringtext61 3AC8                    __pstringtext53 3A8D                    __pstringtext45 3A48  
                  __pstringtext37 39E1                    __pstringtext29 3979                    __pstringtext70 3AEA  
                  __pstringtext62 3ACE                    __pstringtext54 3A95                    __pstringtext46 3A52  
                  __pstringtext38 39EE                    __pstringtext71 3AED                    __pstringtext63 3AD2  
                  __pstringtext55 3A9D                    __pstringtext47 3A5B                    __pstringtext39 39FB  
                  __pstringtext72 3AF0                    __pstringtext64 3AD6                    __pstringtext56 3AA5  
                  __pstringtext48 3A64                    __pstringtext73 0000                    __pstringtext65 3ADA  
                  __pstringtext57 3AAC                    __pstringtext49 3A6D                    __pstringtext66 3ADE  
                  __pstringtext58 3AB3                    __pstringtext67 3AE1                    __pstringtext59 3ABA  
                  __pstringtext68 3AE4                    __pstringtext69 3AE7            __size_of_pushButtonISR 0048  
                       qsort@base 00CB                      ?_channelView 00C7                         qsort@xbuf 0120  
       viewErrorMessage@errorCode 003C                  ?_OLED_write4bits 0070                          intlevel1 0000  
                    ??_statusView 00C9                 __CFG_CLKOUTEN$OFF 0000                  ?_getAnalogValues 00AD  
                   ?_getNextState 002A                     ??_systemCheck 00C3                        _OLED_write 34FE  
                       strncpy@cp 0075             __end_of_OLED_print_xy 3759                      _returnToPage 1001  
                     ??_timeSince 002C                       ??_uartReset 0024                       ??_spinInput 0066  
                     ??_sortDCRev 00BA                      getRotDir@ret 0025         __size_of_viewErrorMessage 0149  
                        sortCur@a 00BA                          sortCur@b 00BC                     __pstringtext1 3000  
                   __pstringtext2 3825                     __pstringtext3 3054                     __pstringtext4 3800  
                   __pstringtext5 3841                     __pstringtext6 384E                     __pstringtext7 385B  
                   __pstringtext8 3868                     __pstringtext9 3875                          qsort@nel 00BE  
                   ?_getStateFunc 002A            __Umul8_16@multiplicand 0024                     getStateFunc@n 0030  
              __end_of_statusView 15D4                    ??_getLastError 0024                          strncpy@d 0074  
                        strncpy@n 0071                          strncpy@s 0070           __end_of_uartIsDataReady 3514  
                   ___fladd@signs 0062  __size_of_OLED_scrollDisplayRight 0004                  checkSensor@state 01E2  
                    ___fladd@aexp 0063                      ___fladd@bexp 0064        __size_of_OLED_clearDisplay 0004  
                 checkSensor@data 00B9                    ??_getNextState 002D              __Umul8_16@multiplier 002C  
               __Umul8_16@product 0028                   _g_screenRefresh 00ED  
