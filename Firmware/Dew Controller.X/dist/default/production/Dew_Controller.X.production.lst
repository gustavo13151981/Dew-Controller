

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jan 28 20:07:49 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	stringtext40,global,class=STRCODE,delta=2
    47                           	psect	stringtext41,global,class=STRCODE,delta=2
    48                           	psect	stringtext42,global,class=STRCODE,delta=2
    49                           	psect	stringtext43,global,class=STRCODE,delta=2
    50                           	psect	cinit,global,class=CODE,merge=1,delta=2
    51                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    52                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    53                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    54                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    55                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    56                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    57                           	psect	inittext,global,class=CODE,delta=2
    58                           	psect	clrtext,global,class=CODE,delta=2
    59                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    60                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    61                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    62                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    63                           	psect	text1,local,class=CODE,merge=1,delta=2
    64                           	psect	text2,local,class=CODE,merge=1,delta=2
    65                           	psect	text3,local,class=CODE,merge=1,delta=2
    66                           	psect	text4,local,class=CODE,merge=1,delta=2
    67                           	psect	text5,local,class=CODE,merge=1,delta=2
    68                           	psect	text6,local,class=CODE,merge=1,delta=2
    69                           	psect	text7,local,class=CODE,merge=1,delta=2
    70                           	psect	text8,local,class=CODE,merge=1,delta=2
    71                           	psect	text9,local,class=CODE,merge=1,delta=2
    72                           	psect	text10,local,class=CODE,merge=1,delta=2
    73                           	psect	text11,local,class=CODE,merge=1,delta=2
    74                           	psect	text12,local,class=CODE,merge=1,delta=2
    75                           	psect	text13,local,class=CODE,merge=1,delta=2
    76                           	psect	text14,local,class=CODE,merge=1,delta=2
    77                           	psect	text15,local,class=CODE,merge=1,delta=2
    78                           	psect	text16,local,class=CODE,merge=1,delta=2
    79                           	psect	text17,local,class=CODE,merge=1,delta=2
    80                           	psect	text18,local,class=CODE,merge=1,delta=2
    81                           	psect	text19,local,class=CODE,merge=1,delta=2
    82                           	psect	text20,local,class=CODE,merge=1,delta=2
    83                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text22,local,class=CODE,merge=1,delta=2
    85                           	psect	text23,local,class=CODE,merge=1,delta=2
    86                           	psect	text24,local,class=CODE,merge=1,delta=2
    87                           	psect	text25,local,class=CODE,merge=1,delta=2
    88                           	psect	text26,local,class=CODE,merge=1,delta=2
    89                           	psect	text27,local,class=CODE,merge=1,delta=2
    90                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    91                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    92                           	psect	text30,local,class=CODE,merge=1,delta=2
    93                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    94                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    95                           	psect	text33,local,class=CODE,merge=1,delta=2
    96                           	psect	text34,local,class=CODE,merge=1,delta=2
    97                           	psect	text35,local,class=CODE,merge=1,delta=2
    98                           	psect	text36,local,class=CODE,merge=1,delta=2
    99                           	psect	text37,local,class=CODE,merge=1,delta=2
   100                           	psect	text38,local,class=CODE,merge=1,delta=2
   101                           	psect	text39,local,class=CODE,merge=1,delta=2
   102                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
   103                           	psect	text41,local,class=CODE,merge=1,delta=2
   104                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
   105                           	psect	text43,local,class=CODE,merge=1,delta=2
   106                           	psect	text44,local,class=CODE,merge=1,delta=2
   107                           	psect	text45,local,class=CODE,merge=1,delta=2
   108                           	psect	text46,local,class=CODE,merge=1,delta=2
   109                           	psect	text47,local,class=CODE,merge=1,delta=2
   110                           	psect	text48,local,class=CODE,merge=1,delta=2
   111                           	psect	text49,local,class=CODE,merge=1,delta=2
   112                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
   113                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   114                           	psect	text52,local,class=CODE,merge=1,delta=2
   115                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
   116                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   117                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   118                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   119                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
   120                           	psect	text58,local,class=CODE,merge=1,delta=2
   121                           	psect	text59,local,class=CODE,merge=1,delta=2
   122                           	psect	text60,local,class=CODE,merge=1,delta=2
   123                           	psect	text61,local,class=CODE,merge=1,delta=2
   124                           	psect	text62,local,class=CODE,merge=1,delta=2
   125                           	psect	text63,local,class=CODE,merge=1,delta=2
   126                           	psect	text64,local,class=CODE,merge=1,delta=2
   127                           	psect	text65,local,class=CODE,merge=1,delta=2
   128                           	psect	intentry,global,class=CODE,delta=2
   129                           	psect	text67,local,class=CODE,merge=1,delta=2
   130                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
   131                           	psect	text69,local,class=CODE,merge=1,delta=2
   132                           	psect	text70,local,class=CODE,merge=1,delta=2
   133                           	psect	text71,local,class=CODE,merge=1,delta=2
   134                           	psect	text72,local,class=CODE,merge=1,delta=2
   135                           	dabs	1,0xCA0,32
   136                           	dabs	1,0xC20,80
   137                           	dabs	1,0xBB3,61
   138                           	dabs	1,0x2743,0,_data
   139                           	dabs	1,0x7E,2
   140  0000                     
   141                           ; Version 2.10
   142                           ; Generated 31/07/2019 GMT
   143                           ; 
   144                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC16F15356 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0010                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0016                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  0119                     	;# 
   205  0119                     	;# 
   206  0119                     	;# 
   207  011A                     	;# 
   208  011A                     	;# 
   209  011A                     	;# 
   210  011B                     	;# 
   211  011B                     	;# 
   212  011B                     	;# 
   213  011B                     	;# 
   214  011B                     	;# 
   215  011C                     	;# 
   216  011C                     	;# 
   217  011C                     	;# 
   218  011D                     	;# 
   219  011D                     	;# 
   220  011D                     	;# 
   221  011E                     	;# 
   222  011E                     	;# 
   223  011E                     	;# 
   224  011F                     	;# 
   225  011F                     	;# 
   226  011F                     	;# 
   227  011F                     	;# 
   228  011F                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  018E                     	;# 
   232  018F                     	;# 
   233  0190                     	;# 
   234  0191                     	;# 
   235  0192                     	;# 
   236  0196                     	;# 
   237  0197                     	;# 
   238  0198                     	;# 
   239  0199                     	;# 
   240  019A                     	;# 
   241  019B                     	;# 
   242  019C                     	;# 
   243  020C                     	;# 
   244  020C                     	;# 
   245  020D                     	;# 
   246  020E                     	;# 
   247  020F                     	;# 
   248  020F                     	;# 
   249  0210                     	;# 
   250  0210                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  028C                     	;# 
   254  028C                     	;# 
   255  028D                     	;# 
   256  028D                     	;# 
   257  028E                     	;# 
   258  028F                     	;# 
   259  0290                     	;# 
   260  0291                     	;# 
   261  030C                     	;# 
   262  030C                     	;# 
   263  030D                     	;# 
   264  030E                     	;# 
   265  030F                     	;# 
   266  0310                     	;# 
   267  0310                     	;# 
   268  0311                     	;# 
   269  0312                     	;# 
   270  0313                     	;# 
   271  0314                     	;# 
   272  0314                     	;# 
   273  0315                     	;# 
   274  0316                     	;# 
   275  0318                     	;# 
   276  0318                     	;# 
   277  0319                     	;# 
   278  031A                     	;# 
   279  031C                     	;# 
   280  031C                     	;# 
   281  031D                     	;# 
   282  031E                     	;# 
   283  038C                     	;# 
   284  038C                     	;# 
   285  038D                     	;# 
   286  038E                     	;# 
   287  058C                     	;# 
   288  058C                     	;# 
   289  058D                     	;# 
   290  058E                     	;# 
   291  058F                     	;# 
   292  058F                     	;# 
   293  0590                     	;# 
   294  0591                     	;# 
   295  0592                     	;# 
   296  0593                     	;# 
   297  059C                     	;# 
   298  059C                     	;# 
   299  059D                     	;# 
   300  059D                     	;# 
   301  059E                     	;# 
   302  059F                     	;# 
   303  060C                     	;# 
   304  060D                     	;# 
   305  060E                     	;# 
   306  060F                     	;# 
   307  0610                     	;# 
   308  0611                     	;# 
   309  0612                     	;# 
   310  0613                     	;# 
   311  0614                     	;# 
   312  070C                     	;# 
   313  070D                     	;# 
   314  070E                     	;# 
   315  070F                     	;# 
   316  0710                     	;# 
   317  0711                     	;# 
   318  0712                     	;# 
   319  0713                     	;# 
   320  0716                     	;# 
   321  0717                     	;# 
   322  0718                     	;# 
   323  0719                     	;# 
   324  071A                     	;# 
   325  071B                     	;# 
   326  071C                     	;# 
   327  071D                     	;# 
   328  0796                     	;# 
   329  0797                     	;# 
   330  0798                     	;# 
   331  0799                     	;# 
   332  079A                     	;# 
   333  079B                     	;# 
   334  080C                     	;# 
   335  080D                     	;# 
   336  080E                     	;# 
   337  080F                     	;# 
   338  0810                     	;# 
   339  0811                     	;# 
   340  0812                     	;# 
   341  0813                     	;# 
   342  0814                     	;# 
   343  081A                     	;# 
   344  081A                     	;# 
   345  081B                     	;# 
   346  081C                     	;# 
   347  081C                     	;# 
   348  081D                     	;# 
   349  081E                     	;# 
   350  081F                     	;# 
   351  088C                     	;# 
   352  088D                     	;# 
   353  088E                     	;# 
   354  088F                     	;# 
   355  0890                     	;# 
   356  0891                     	;# 
   357  0892                     	;# 
   358  0893                     	;# 
   359  0895                     	;# 
   360  0896                     	;# 
   361  090C                     	;# 
   362  090E                     	;# 
   363  090F                     	;# 
   364  091F                     	;# 
   365  098F                     	;# 
   366  098F                     	;# 
   367  0990                     	;# 
   368  0991                     	;# 
   369  0992                     	;# 
   370  0993                     	;# 
   371  0994                     	;# 
   372  0995                     	;# 
   373  0996                     	;# 
   374  0997                     	;# 
   375  0A19                     	;# 
   376  0A19                     	;# 
   377  0A1A                     	;# 
   378  0A1A                     	;# 
   379  0A1B                     	;# 
   380  0A1B                     	;# 
   381  0A1B                     	;# 
   382  0A1C                     	;# 
   383  0A1C                     	;# 
   384  0A1D                     	;# 
   385  0A1D                     	;# 
   386  0A1E                     	;# 
   387  0A1E                     	;# 
   388  0A1F                     	;# 
   389  0A1F                     	;# 
   390  0A1F                     	;# 
   391  1E0F                     	;# 
   392  1E10                     	;# 
   393  1E11                     	;# 
   394  1E12                     	;# 
   395  1E13                     	;# 
   396  1E14                     	;# 
   397  1E15                     	;# 
   398  1E16                     	;# 
   399  1E17                     	;# 
   400  1E18                     	;# 
   401  1E19                     	;# 
   402  1E1A                     	;# 
   403  1E1B                     	;# 
   404  1E1C                     	;# 
   405  1E1D                     	;# 
   406  1E1E                     	;# 
   407  1E1F                     	;# 
   408  1E20                     	;# 
   409  1E21                     	;# 
   410  1E22                     	;# 
   411  1E23                     	;# 
   412  1E24                     	;# 
   413  1E25                     	;# 
   414  1E26                     	;# 
   415  1E27                     	;# 
   416  1E28                     	;# 
   417  1E29                     	;# 
   418  1E2A                     	;# 
   419  1E2B                     	;# 
   420  1E2C                     	;# 
   421  1E2D                     	;# 
   422  1E2E                     	;# 
   423  1E2F                     	;# 
   424  1E30                     	;# 
   425  1E31                     	;# 
   426  1E32                     	;# 
   427  1E33                     	;# 
   428  1E34                     	;# 
   429  1E35                     	;# 
   430  1E36                     	;# 
   431  1E37                     	;# 
   432  1E8F                     	;# 
   433  1E90                     	;# 
   434  1E91                     	;# 
   435  1E92                     	;# 
   436  1E93                     	;# 
   437  1E9C                     	;# 
   438  1EA1                     	;# 
   439  1EA2                     	;# 
   440  1EB1                     	;# 
   441  1EBB                     	;# 
   442  1EBC                     	;# 
   443  1EBD                     	;# 
   444  1EBE                     	;# 
   445  1EC3                     	;# 
   446  1EC5                     	;# 
   447  1EC6                     	;# 
   448  1EC7                     	;# 
   449  1EC8                     	;# 
   450  1EC9                     	;# 
   451  1ECA                     	;# 
   452  1ECB                     	;# 
   453  1ECC                     	;# 
   454  1ECD                     	;# 
   455  1ECE                     	;# 
   456  1F10                     	;# 
   457  1F11                     	;# 
   458  1F12                     	;# 
   459  1F13                     	;# 
   460  1F14                     	;# 
   461  1F15                     	;# 
   462  1F16                     	;# 
   463  1F17                     	;# 
   464  1F18                     	;# 
   465  1F19                     	;# 
   466  1F1A                     	;# 
   467  1F1B                     	;# 
   468  1F1C                     	;# 
   469  1F1D                     	;# 
   470  1F1E                     	;# 
   471  1F1F                     	;# 
   472  1F20                     	;# 
   473  1F21                     	;# 
   474  1F22                     	;# 
   475  1F23                     	;# 
   476  1F24                     	;# 
   477  1F25                     	;# 
   478  1F26                     	;# 
   479  1F27                     	;# 
   480  1F38                     	;# 
   481  1F39                     	;# 
   482  1F3A                     	;# 
   483  1F3B                     	;# 
   484  1F3C                     	;# 
   485  1F3D                     	;# 
   486  1F3E                     	;# 
   487  1F3F                     	;# 
   488  1F43                     	;# 
   489  1F44                     	;# 
   490  1F45                     	;# 
   491  1F46                     	;# 
   492  1F47                     	;# 
   493  1F48                     	;# 
   494  1F49                     	;# 
   495  1F4A                     	;# 
   496  1F4E                     	;# 
   497  1F4F                     	;# 
   498  1F50                     	;# 
   499  1F51                     	;# 
   500  1F52                     	;# 
   501  1F53                     	;# 
   502  1F54                     	;# 
   503  1F55                     	;# 
   504  1F65                     	;# 
   505  1F68                     	;# 
   506  1F69                     	;# 
   507  1F6A                     	;# 
   508  1F6B                     	;# 
   509  1FE4                     	;# 
   510  1FE5                     	;# 
   511  1FE6                     	;# 
   512  1FE7                     	;# 
   513  1FE8                     	;# 
   514  1FE8                     	;# 
   515  1FE9                     	;# 
   516  1FEA                     	;# 
   517  1FEB                     	;# 
   518  1FED                     	;# 
   519  1FEE                     	;# 
   520  1FEF                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  0010                     	;# 
   537  0012                     	;# 
   538  0013                     	;# 
   539  0014                     	;# 
   540  0016                     	;# 
   541  0018                     	;# 
   542  0019                     	;# 
   543  001A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  009F                     	;# 
   550  0119                     	;# 
   551  0119                     	;# 
   552  0119                     	;# 
   553  011A                     	;# 
   554  011A                     	;# 
   555  011A                     	;# 
   556  011B                     	;# 
   557  011B                     	;# 
   558  011B                     	;# 
   559  011B                     	;# 
   560  011B                     	;# 
   561  011C                     	;# 
   562  011C                     	;# 
   563  011C                     	;# 
   564  011D                     	;# 
   565  011D                     	;# 
   566  011D                     	;# 
   567  011E                     	;# 
   568  011E                     	;# 
   569  011E                     	;# 
   570  011F                     	;# 
   571  011F                     	;# 
   572  011F                     	;# 
   573  011F                     	;# 
   574  011F                     	;# 
   575  018C                     	;# 
   576  018D                     	;# 
   577  018E                     	;# 
   578  018F                     	;# 
   579  0190                     	;# 
   580  0191                     	;# 
   581  0192                     	;# 
   582  0196                     	;# 
   583  0197                     	;# 
   584  0198                     	;# 
   585  0199                     	;# 
   586  019A                     	;# 
   587  019B                     	;# 
   588  019C                     	;# 
   589  020C                     	;# 
   590  020C                     	;# 
   591  020D                     	;# 
   592  020E                     	;# 
   593  020F                     	;# 
   594  020F                     	;# 
   595  0210                     	;# 
   596  0210                     	;# 
   597  0211                     	;# 
   598  0211                     	;# 
   599  028C                     	;# 
   600  028C                     	;# 
   601  028D                     	;# 
   602  028D                     	;# 
   603  028E                     	;# 
   604  028F                     	;# 
   605  0290                     	;# 
   606  0291                     	;# 
   607  030C                     	;# 
   608  030C                     	;# 
   609  030D                     	;# 
   610  030E                     	;# 
   611  030F                     	;# 
   612  0310                     	;# 
   613  0310                     	;# 
   614  0311                     	;# 
   615  0312                     	;# 
   616  0313                     	;# 
   617  0314                     	;# 
   618  0314                     	;# 
   619  0315                     	;# 
   620  0316                     	;# 
   621  0318                     	;# 
   622  0318                     	;# 
   623  0319                     	;# 
   624  031A                     	;# 
   625  031C                     	;# 
   626  031C                     	;# 
   627  031D                     	;# 
   628  031E                     	;# 
   629  038C                     	;# 
   630  038C                     	;# 
   631  038D                     	;# 
   632  038E                     	;# 
   633  058C                     	;# 
   634  058C                     	;# 
   635  058D                     	;# 
   636  058E                     	;# 
   637  058F                     	;# 
   638  058F                     	;# 
   639  0590                     	;# 
   640  0591                     	;# 
   641  0592                     	;# 
   642  0593                     	;# 
   643  059C                     	;# 
   644  059C                     	;# 
   645  059D                     	;# 
   646  059D                     	;# 
   647  059E                     	;# 
   648  059F                     	;# 
   649  060C                     	;# 
   650  060D                     	;# 
   651  060E                     	;# 
   652  060F                     	;# 
   653  0610                     	;# 
   654  0611                     	;# 
   655  0612                     	;# 
   656  0613                     	;# 
   657  0614                     	;# 
   658  070C                     	;# 
   659  070D                     	;# 
   660  070E                     	;# 
   661  070F                     	;# 
   662  0710                     	;# 
   663  0711                     	;# 
   664  0712                     	;# 
   665  0713                     	;# 
   666  0716                     	;# 
   667  0717                     	;# 
   668  0718                     	;# 
   669  0719                     	;# 
   670  071A                     	;# 
   671  071B                     	;# 
   672  071C                     	;# 
   673  071D                     	;# 
   674  0796                     	;# 
   675  0797                     	;# 
   676  0798                     	;# 
   677  0799                     	;# 
   678  079A                     	;# 
   679  079B                     	;# 
   680  080C                     	;# 
   681  080D                     	;# 
   682  080E                     	;# 
   683  080F                     	;# 
   684  0810                     	;# 
   685  0811                     	;# 
   686  0812                     	;# 
   687  0813                     	;# 
   688  0814                     	;# 
   689  081A                     	;# 
   690  081A                     	;# 
   691  081B                     	;# 
   692  081C                     	;# 
   693  081C                     	;# 
   694  081D                     	;# 
   695  081E                     	;# 
   696  081F                     	;# 
   697  088C                     	;# 
   698  088D                     	;# 
   699  088E                     	;# 
   700  088F                     	;# 
   701  0890                     	;# 
   702  0891                     	;# 
   703  0892                     	;# 
   704  0893                     	;# 
   705  0895                     	;# 
   706  0896                     	;# 
   707  090C                     	;# 
   708  090E                     	;# 
   709  090F                     	;# 
   710  091F                     	;# 
   711  098F                     	;# 
   712  098F                     	;# 
   713  0990                     	;# 
   714  0991                     	;# 
   715  0992                     	;# 
   716  0993                     	;# 
   717  0994                     	;# 
   718  0995                     	;# 
   719  0996                     	;# 
   720  0997                     	;# 
   721  0A19                     	;# 
   722  0A19                     	;# 
   723  0A1A                     	;# 
   724  0A1A                     	;# 
   725  0A1B                     	;# 
   726  0A1B                     	;# 
   727  0A1B                     	;# 
   728  0A1C                     	;# 
   729  0A1C                     	;# 
   730  0A1D                     	;# 
   731  0A1D                     	;# 
   732  0A1E                     	;# 
   733  0A1E                     	;# 
   734  0A1F                     	;# 
   735  0A1F                     	;# 
   736  0A1F                     	;# 
   737  1E0F                     	;# 
   738  1E10                     	;# 
   739  1E11                     	;# 
   740  1E12                     	;# 
   741  1E13                     	;# 
   742  1E14                     	;# 
   743  1E15                     	;# 
   744  1E16                     	;# 
   745  1E17                     	;# 
   746  1E18                     	;# 
   747  1E19                     	;# 
   748  1E1A                     	;# 
   749  1E1B                     	;# 
   750  1E1C                     	;# 
   751  1E1D                     	;# 
   752  1E1E                     	;# 
   753  1E1F                     	;# 
   754  1E20                     	;# 
   755  1E21                     	;# 
   756  1E22                     	;# 
   757  1E23                     	;# 
   758  1E24                     	;# 
   759  1E25                     	;# 
   760  1E26                     	;# 
   761  1E27                     	;# 
   762  1E28                     	;# 
   763  1E29                     	;# 
   764  1E2A                     	;# 
   765  1E2B                     	;# 
   766  1E2C                     	;# 
   767  1E2D                     	;# 
   768  1E2E                     	;# 
   769  1E2F                     	;# 
   770  1E30                     	;# 
   771  1E31                     	;# 
   772  1E32                     	;# 
   773  1E33                     	;# 
   774  1E34                     	;# 
   775  1E35                     	;# 
   776  1E36                     	;# 
   777  1E37                     	;# 
   778  1E8F                     	;# 
   779  1E90                     	;# 
   780  1E91                     	;# 
   781  1E92                     	;# 
   782  1E93                     	;# 
   783  1E9C                     	;# 
   784  1EA1                     	;# 
   785  1EA2                     	;# 
   786  1EB1                     	;# 
   787  1EBB                     	;# 
   788  1EBC                     	;# 
   789  1EBD                     	;# 
   790  1EBE                     	;# 
   791  1EC3                     	;# 
   792  1EC5                     	;# 
   793  1EC6                     	;# 
   794  1EC7                     	;# 
   795  1EC8                     	;# 
   796  1EC9                     	;# 
   797  1ECA                     	;# 
   798  1ECB                     	;# 
   799  1ECC                     	;# 
   800  1ECD                     	;# 
   801  1ECE                     	;# 
   802  1F10                     	;# 
   803  1F11                     	;# 
   804  1F12                     	;# 
   805  1F13                     	;# 
   806  1F14                     	;# 
   807  1F15                     	;# 
   808  1F16                     	;# 
   809  1F17                     	;# 
   810  1F18                     	;# 
   811  1F19                     	;# 
   812  1F1A                     	;# 
   813  1F1B                     	;# 
   814  1F1C                     	;# 
   815  1F1D                     	;# 
   816  1F1E                     	;# 
   817  1F1F                     	;# 
   818  1F20                     	;# 
   819  1F21                     	;# 
   820  1F22                     	;# 
   821  1F23                     	;# 
   822  1F24                     	;# 
   823  1F25                     	;# 
   824  1F26                     	;# 
   825  1F27                     	;# 
   826  1F38                     	;# 
   827  1F39                     	;# 
   828  1F3A                     	;# 
   829  1F3B                     	;# 
   830  1F3C                     	;# 
   831  1F3D                     	;# 
   832  1F3E                     	;# 
   833  1F3F                     	;# 
   834  1F43                     	;# 
   835  1F44                     	;# 
   836  1F45                     	;# 
   837  1F46                     	;# 
   838  1F47                     	;# 
   839  1F48                     	;# 
   840  1F49                     	;# 
   841  1F4A                     	;# 
   842  1F4E                     	;# 
   843  1F4F                     	;# 
   844  1F50                     	;# 
   845  1F51                     	;# 
   846  1F52                     	;# 
   847  1F53                     	;# 
   848  1F54                     	;# 
   849  1F55                     	;# 
   850  1F65                     	;# 
   851  1F68                     	;# 
   852  1F69                     	;# 
   853  1F6A                     	;# 
   854  1F6B                     	;# 
   855  1FE4                     	;# 
   856  1FE5                     	;# 
   857  1FE6                     	;# 
   858  1FE7                     	;# 
   859  1FE8                     	;# 
   860  1FE8                     	;# 
   861  1FE9                     	;# 
   862  1FEA                     	;# 
   863  1FEB                     	;# 
   864  1FED                     	;# 
   865  1FEE                     	;# 
   866  1FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000D                     	;# 
   881  000E                     	;# 
   882  0010                     	;# 
   883  0012                     	;# 
   884  0013                     	;# 
   885  0014                     	;# 
   886  0016                     	;# 
   887  0018                     	;# 
   888  0019                     	;# 
   889  001A                     	;# 
   890  009B                     	;# 
   891  009B                     	;# 
   892  009C                     	;# 
   893  009D                     	;# 
   894  009E                     	;# 
   895  009F                     	;# 
   896  0119                     	;# 
   897  0119                     	;# 
   898  0119                     	;# 
   899  011A                     	;# 
   900  011A                     	;# 
   901  011A                     	;# 
   902  011B                     	;# 
   903  011B                     	;# 
   904  011B                     	;# 
   905  011B                     	;# 
   906  011B                     	;# 
   907  011C                     	;# 
   908  011C                     	;# 
   909  011C                     	;# 
   910  011D                     	;# 
   911  011D                     	;# 
   912  011D                     	;# 
   913  011E                     	;# 
   914  011E                     	;# 
   915  011E                     	;# 
   916  011F                     	;# 
   917  011F                     	;# 
   918  011F                     	;# 
   919  011F                     	;# 
   920  011F                     	;# 
   921  018C                     	;# 
   922  018D                     	;# 
   923  018E                     	;# 
   924  018F                     	;# 
   925  0190                     	;# 
   926  0191                     	;# 
   927  0192                     	;# 
   928  0196                     	;# 
   929  0197                     	;# 
   930  0198                     	;# 
   931  0199                     	;# 
   932  019A                     	;# 
   933  019B                     	;# 
   934  019C                     	;# 
   935  020C                     	;# 
   936  020C                     	;# 
   937  020D                     	;# 
   938  020E                     	;# 
   939  020F                     	;# 
   940  020F                     	;# 
   941  0210                     	;# 
   942  0210                     	;# 
   943  0211                     	;# 
   944  0211                     	;# 
   945  028C                     	;# 
   946  028C                     	;# 
   947  028D                     	;# 
   948  028D                     	;# 
   949  028E                     	;# 
   950  028F                     	;# 
   951  0290                     	;# 
   952  0291                     	;# 
   953  030C                     	;# 
   954  030C                     	;# 
   955  030D                     	;# 
   956  030E                     	;# 
   957  030F                     	;# 
   958  0310                     	;# 
   959  0310                     	;# 
   960  0311                     	;# 
   961  0312                     	;# 
   962  0313                     	;# 
   963  0314                     	;# 
   964  0314                     	;# 
   965  0315                     	;# 
   966  0316                     	;# 
   967  0318                     	;# 
   968  0318                     	;# 
   969  0319                     	;# 
   970  031A                     	;# 
   971  031C                     	;# 
   972  031C                     	;# 
   973  031D                     	;# 
   974  031E                     	;# 
   975  038C                     	;# 
   976  038C                     	;# 
   977  038D                     	;# 
   978  038E                     	;# 
   979  058C                     	;# 
   980  058C                     	;# 
   981  058D                     	;# 
   982  058E                     	;# 
   983  058F                     	;# 
   984  058F                     	;# 
   985  0590                     	;# 
   986  0591                     	;# 
   987  0592                     	;# 
   988  0593                     	;# 
   989  059C                     	;# 
   990  059C                     	;# 
   991  059D                     	;# 
   992  059D                     	;# 
   993  059E                     	;# 
   994  059F                     	;# 
   995  060C                     	;# 
   996  060D                     	;# 
   997  060E                     	;# 
   998  060F                     	;# 
   999  0610                     	;# 
  1000  0611                     	;# 
  1001  0612                     	;# 
  1002  0613                     	;# 
  1003  0614                     	;# 
  1004  070C                     	;# 
  1005  070D                     	;# 
  1006  070E                     	;# 
  1007  070F                     	;# 
  1008  0710                     	;# 
  1009  0711                     	;# 
  1010  0712                     	;# 
  1011  0713                     	;# 
  1012  0716                     	;# 
  1013  0717                     	;# 
  1014  0718                     	;# 
  1015  0719                     	;# 
  1016  071A                     	;# 
  1017  071B                     	;# 
  1018  071C                     	;# 
  1019  071D                     	;# 
  1020  0796                     	;# 
  1021  0797                     	;# 
  1022  0798                     	;# 
  1023  0799                     	;# 
  1024  079A                     	;# 
  1025  079B                     	;# 
  1026  080C                     	;# 
  1027  080D                     	;# 
  1028  080E                     	;# 
  1029  080F                     	;# 
  1030  0810                     	;# 
  1031  0811                     	;# 
  1032  0812                     	;# 
  1033  0813                     	;# 
  1034  0814                     	;# 
  1035  081A                     	;# 
  1036  081A                     	;# 
  1037  081B                     	;# 
  1038  081C                     	;# 
  1039  081C                     	;# 
  1040  081D                     	;# 
  1041  081E                     	;# 
  1042  081F                     	;# 
  1043  088C                     	;# 
  1044  088D                     	;# 
  1045  088E                     	;# 
  1046  088F                     	;# 
  1047  0890                     	;# 
  1048  0891                     	;# 
  1049  0892                     	;# 
  1050  0893                     	;# 
  1051  0895                     	;# 
  1052  0896                     	;# 
  1053  090C                     	;# 
  1054  090E                     	;# 
  1055  090F                     	;# 
  1056  091F                     	;# 
  1057  098F                     	;# 
  1058  098F                     	;# 
  1059  0990                     	;# 
  1060  0991                     	;# 
  1061  0992                     	;# 
  1062  0993                     	;# 
  1063  0994                     	;# 
  1064  0995                     	;# 
  1065  0996                     	;# 
  1066  0997                     	;# 
  1067  0A19                     	;# 
  1068  0A19                     	;# 
  1069  0A1A                     	;# 
  1070  0A1A                     	;# 
  1071  0A1B                     	;# 
  1072  0A1B                     	;# 
  1073  0A1B                     	;# 
  1074  0A1C                     	;# 
  1075  0A1C                     	;# 
  1076  0A1D                     	;# 
  1077  0A1D                     	;# 
  1078  0A1E                     	;# 
  1079  0A1E                     	;# 
  1080  0A1F                     	;# 
  1081  0A1F                     	;# 
  1082  0A1F                     	;# 
  1083  1E0F                     	;# 
  1084  1E10                     	;# 
  1085  1E11                     	;# 
  1086  1E12                     	;# 
  1087  1E13                     	;# 
  1088  1E14                     	;# 
  1089  1E15                     	;# 
  1090  1E16                     	;# 
  1091  1E17                     	;# 
  1092  1E18                     	;# 
  1093  1E19                     	;# 
  1094  1E1A                     	;# 
  1095  1E1B                     	;# 
  1096  1E1C                     	;# 
  1097  1E1D                     	;# 
  1098  1E1E                     	;# 
  1099  1E1F                     	;# 
  1100  1E20                     	;# 
  1101  1E21                     	;# 
  1102  1E22                     	;# 
  1103  1E23                     	;# 
  1104  1E24                     	;# 
  1105  1E25                     	;# 
  1106  1E26                     	;# 
  1107  1E27                     	;# 
  1108  1E28                     	;# 
  1109  1E29                     	;# 
  1110  1E2A                     	;# 
  1111  1E2B                     	;# 
  1112  1E2C                     	;# 
  1113  1E2D                     	;# 
  1114  1E2E                     	;# 
  1115  1E2F                     	;# 
  1116  1E30                     	;# 
  1117  1E31                     	;# 
  1118  1E32                     	;# 
  1119  1E33                     	;# 
  1120  1E34                     	;# 
  1121  1E35                     	;# 
  1122  1E36                     	;# 
  1123  1E37                     	;# 
  1124  1E8F                     	;# 
  1125  1E90                     	;# 
  1126  1E91                     	;# 
  1127  1E92                     	;# 
  1128  1E93                     	;# 
  1129  1E9C                     	;# 
  1130  1EA1                     	;# 
  1131  1EA2                     	;# 
  1132  1EB1                     	;# 
  1133  1EBB                     	;# 
  1134  1EBC                     	;# 
  1135  1EBD                     	;# 
  1136  1EBE                     	;# 
  1137  1EC3                     	;# 
  1138  1EC5                     	;# 
  1139  1EC6                     	;# 
  1140  1EC7                     	;# 
  1141  1EC8                     	;# 
  1142  1EC9                     	;# 
  1143  1ECA                     	;# 
  1144  1ECB                     	;# 
  1145  1ECC                     	;# 
  1146  1ECD                     	;# 
  1147  1ECE                     	;# 
  1148  1F10                     	;# 
  1149  1F11                     	;# 
  1150  1F12                     	;# 
  1151  1F13                     	;# 
  1152  1F14                     	;# 
  1153  1F15                     	;# 
  1154  1F16                     	;# 
  1155  1F17                     	;# 
  1156  1F18                     	;# 
  1157  1F19                     	;# 
  1158  1F1A                     	;# 
  1159  1F1B                     	;# 
  1160  1F1C                     	;# 
  1161  1F1D                     	;# 
  1162  1F1E                     	;# 
  1163  1F1F                     	;# 
  1164  1F20                     	;# 
  1165  1F21                     	;# 
  1166  1F22                     	;# 
  1167  1F23                     	;# 
  1168  1F24                     	;# 
  1169  1F25                     	;# 
  1170  1F26                     	;# 
  1171  1F27                     	;# 
  1172  1F38                     	;# 
  1173  1F39                     	;# 
  1174  1F3A                     	;# 
  1175  1F3B                     	;# 
  1176  1F3C                     	;# 
  1177  1F3D                     	;# 
  1178  1F3E                     	;# 
  1179  1F3F                     	;# 
  1180  1F43                     	;# 
  1181  1F44                     	;# 
  1182  1F45                     	;# 
  1183  1F46                     	;# 
  1184  1F47                     	;# 
  1185  1F48                     	;# 
  1186  1F49                     	;# 
  1187  1F4A                     	;# 
  1188  1F4E                     	;# 
  1189  1F4F                     	;# 
  1190  1F50                     	;# 
  1191  1F51                     	;# 
  1192  1F52                     	;# 
  1193  1F53                     	;# 
  1194  1F54                     	;# 
  1195  1F55                     	;# 
  1196  1F65                     	;# 
  1197  1F68                     	;# 
  1198  1F69                     	;# 
  1199  1F6A                     	;# 
  1200  1F6B                     	;# 
  1201  1FE4                     	;# 
  1202  1FE5                     	;# 
  1203  1FE6                     	;# 
  1204  1FE7                     	;# 
  1205  1FE8                     	;# 
  1206  1FE8                     	;# 
  1207  1FE9                     	;# 
  1208  1FEA                     	;# 
  1209  1FEB                     	;# 
  1210  1FED                     	;# 
  1211  1FEE                     	;# 
  1212  1FEF                     	;# 
  1213  0000                     	;# 
  1214  0001                     	;# 
  1215  0002                     	;# 
  1216  0003                     	;# 
  1217  0004                     	;# 
  1218  0005                     	;# 
  1219  0006                     	;# 
  1220  0007                     	;# 
  1221  0008                     	;# 
  1222  0009                     	;# 
  1223  000A                     	;# 
  1224  000B                     	;# 
  1225  000C                     	;# 
  1226  000D                     	;# 
  1227  000E                     	;# 
  1228  0010                     	;# 
  1229  0012                     	;# 
  1230  0013                     	;# 
  1231  0014                     	;# 
  1232  0016                     	;# 
  1233  0018                     	;# 
  1234  0019                     	;# 
  1235  001A                     	;# 
  1236  009B                     	;# 
  1237  009B                     	;# 
  1238  009C                     	;# 
  1239  009D                     	;# 
  1240  009E                     	;# 
  1241  009F                     	;# 
  1242  0119                     	;# 
  1243  0119                     	;# 
  1244  0119                     	;# 
  1245  011A                     	;# 
  1246  011A                     	;# 
  1247  011A                     	;# 
  1248  011B                     	;# 
  1249  011B                     	;# 
  1250  011B                     	;# 
  1251  011B                     	;# 
  1252  011B                     	;# 
  1253  011C                     	;# 
  1254  011C                     	;# 
  1255  011C                     	;# 
  1256  011D                     	;# 
  1257  011D                     	;# 
  1258  011D                     	;# 
  1259  011E                     	;# 
  1260  011E                     	;# 
  1261  011E                     	;# 
  1262  011F                     	;# 
  1263  011F                     	;# 
  1264  011F                     	;# 
  1265  011F                     	;# 
  1266  011F                     	;# 
  1267  018C                     	;# 
  1268  018D                     	;# 
  1269  018E                     	;# 
  1270  018F                     	;# 
  1271  0190                     	;# 
  1272  0191                     	;# 
  1273  0192                     	;# 
  1274  0196                     	;# 
  1275  0197                     	;# 
  1276  0198                     	;# 
  1277  0199                     	;# 
  1278  019A                     	;# 
  1279  019B                     	;# 
  1280  019C                     	;# 
  1281  020C                     	;# 
  1282  020C                     	;# 
  1283  020D                     	;# 
  1284  020E                     	;# 
  1285  020F                     	;# 
  1286  020F                     	;# 
  1287  0210                     	;# 
  1288  0210                     	;# 
  1289  0211                     	;# 
  1290  0211                     	;# 
  1291  028C                     	;# 
  1292  028C                     	;# 
  1293  028D                     	;# 
  1294  028D                     	;# 
  1295  028E                     	;# 
  1296  028F                     	;# 
  1297  0290                     	;# 
  1298  0291                     	;# 
  1299  030C                     	;# 
  1300  030C                     	;# 
  1301  030D                     	;# 
  1302  030E                     	;# 
  1303  030F                     	;# 
  1304  0310                     	;# 
  1305  0310                     	;# 
  1306  0311                     	;# 
  1307  0312                     	;# 
  1308  0313                     	;# 
  1309  0314                     	;# 
  1310  0314                     	;# 
  1311  0315                     	;# 
  1312  0316                     	;# 
  1313  0318                     	;# 
  1314  0318                     	;# 
  1315  0319                     	;# 
  1316  031A                     	;# 
  1317  031C                     	;# 
  1318  031C                     	;# 
  1319  031D                     	;# 
  1320  031E                     	;# 
  1321  038C                     	;# 
  1322  038C                     	;# 
  1323  038D                     	;# 
  1324  038E                     	;# 
  1325  058C                     	;# 
  1326  058C                     	;# 
  1327  058D                     	;# 
  1328  058E                     	;# 
  1329  058F                     	;# 
  1330  058F                     	;# 
  1331  0590                     	;# 
  1332  0591                     	;# 
  1333  0592                     	;# 
  1334  0593                     	;# 
  1335  059C                     	;# 
  1336  059C                     	;# 
  1337  059D                     	;# 
  1338  059D                     	;# 
  1339  059E                     	;# 
  1340  059F                     	;# 
  1341  060C                     	;# 
  1342  060D                     	;# 
  1343  060E                     	;# 
  1344  060F                     	;# 
  1345  0610                     	;# 
  1346  0611                     	;# 
  1347  0612                     	;# 
  1348  0613                     	;# 
  1349  0614                     	;# 
  1350  070C                     	;# 
  1351  070D                     	;# 
  1352  070E                     	;# 
  1353  070F                     	;# 
  1354  0710                     	;# 
  1355  0711                     	;# 
  1356  0712                     	;# 
  1357  0713                     	;# 
  1358  0716                     	;# 
  1359  0717                     	;# 
  1360  0718                     	;# 
  1361  0719                     	;# 
  1362  071A                     	;# 
  1363  071B                     	;# 
  1364  071C                     	;# 
  1365  071D                     	;# 
  1366  0796                     	;# 
  1367  0797                     	;# 
  1368  0798                     	;# 
  1369  0799                     	;# 
  1370  079A                     	;# 
  1371  079B                     	;# 
  1372  080C                     	;# 
  1373  080D                     	;# 
  1374  080E                     	;# 
  1375  080F                     	;# 
  1376  0810                     	;# 
  1377  0811                     	;# 
  1378  0812                     	;# 
  1379  0813                     	;# 
  1380  0814                     	;# 
  1381  081A                     	;# 
  1382  081A                     	;# 
  1383  081B                     	;# 
  1384  081C                     	;# 
  1385  081C                     	;# 
  1386  081D                     	;# 
  1387  081E                     	;# 
  1388  081F                     	;# 
  1389  088C                     	;# 
  1390  088D                     	;# 
  1391  088E                     	;# 
  1392  088F                     	;# 
  1393  0890                     	;# 
  1394  0891                     	;# 
  1395  0892                     	;# 
  1396  0893                     	;# 
  1397  0895                     	;# 
  1398  0896                     	;# 
  1399  090C                     	;# 
  1400  090E                     	;# 
  1401  090F                     	;# 
  1402  091F                     	;# 
  1403  098F                     	;# 
  1404  098F                     	;# 
  1405  0990                     	;# 
  1406  0991                     	;# 
  1407  0992                     	;# 
  1408  0993                     	;# 
  1409  0994                     	;# 
  1410  0995                     	;# 
  1411  0996                     	;# 
  1412  0997                     	;# 
  1413  0A19                     	;# 
  1414  0A19                     	;# 
  1415  0A1A                     	;# 
  1416  0A1A                     	;# 
  1417  0A1B                     	;# 
  1418  0A1B                     	;# 
  1419  0A1B                     	;# 
  1420  0A1C                     	;# 
  1421  0A1C                     	;# 
  1422  0A1D                     	;# 
  1423  0A1D                     	;# 
  1424  0A1E                     	;# 
  1425  0A1E                     	;# 
  1426  0A1F                     	;# 
  1427  0A1F                     	;# 
  1428  0A1F                     	;# 
  1429  1E0F                     	;# 
  1430  1E10                     	;# 
  1431  1E11                     	;# 
  1432  1E12                     	;# 
  1433  1E13                     	;# 
  1434  1E14                     	;# 
  1435  1E15                     	;# 
  1436  1E16                     	;# 
  1437  1E17                     	;# 
  1438  1E18                     	;# 
  1439  1E19                     	;# 
  1440  1E1A                     	;# 
  1441  1E1B                     	;# 
  1442  1E1C                     	;# 
  1443  1E1D                     	;# 
  1444  1E1E                     	;# 
  1445  1E1F                     	;# 
  1446  1E20                     	;# 
  1447  1E21                     	;# 
  1448  1E22                     	;# 
  1449  1E23                     	;# 
  1450  1E24                     	;# 
  1451  1E25                     	;# 
  1452  1E26                     	;# 
  1453  1E27                     	;# 
  1454  1E28                     	;# 
  1455  1E29                     	;# 
  1456  1E2A                     	;# 
  1457  1E2B                     	;# 
  1458  1E2C                     	;# 
  1459  1E2D                     	;# 
  1460  1E2E                     	;# 
  1461  1E2F                     	;# 
  1462  1E30                     	;# 
  1463  1E31                     	;# 
  1464  1E32                     	;# 
  1465  1E33                     	;# 
  1466  1E34                     	;# 
  1467  1E35                     	;# 
  1468  1E36                     	;# 
  1469  1E37                     	;# 
  1470  1E8F                     	;# 
  1471  1E90                     	;# 
  1472  1E91                     	;# 
  1473  1E92                     	;# 
  1474  1E93                     	;# 
  1475  1E9C                     	;# 
  1476  1EA1                     	;# 
  1477  1EA2                     	;# 
  1478  1EB1                     	;# 
  1479  1EBB                     	;# 
  1480  1EBC                     	;# 
  1481  1EBD                     	;# 
  1482  1EBE                     	;# 
  1483  1EC3                     	;# 
  1484  1EC5                     	;# 
  1485  1EC6                     	;# 
  1486  1EC7                     	;# 
  1487  1EC8                     	;# 
  1488  1EC9                     	;# 
  1489  1ECA                     	;# 
  1490  1ECB                     	;# 
  1491  1ECC                     	;# 
  1492  1ECD                     	;# 
  1493  1ECE                     	;# 
  1494  1F10                     	;# 
  1495  1F11                     	;# 
  1496  1F12                     	;# 
  1497  1F13                     	;# 
  1498  1F14                     	;# 
  1499  1F15                     	;# 
  1500  1F16                     	;# 
  1501  1F17                     	;# 
  1502  1F18                     	;# 
  1503  1F19                     	;# 
  1504  1F1A                     	;# 
  1505  1F1B                     	;# 
  1506  1F1C                     	;# 
  1507  1F1D                     	;# 
  1508  1F1E                     	;# 
  1509  1F1F                     	;# 
  1510  1F20                     	;# 
  1511  1F21                     	;# 
  1512  1F22                     	;# 
  1513  1F23                     	;# 
  1514  1F24                     	;# 
  1515  1F25                     	;# 
  1516  1F26                     	;# 
  1517  1F27                     	;# 
  1518  1F38                     	;# 
  1519  1F39                     	;# 
  1520  1F3A                     	;# 
  1521  1F3B                     	;# 
  1522  1F3C                     	;# 
  1523  1F3D                     	;# 
  1524  1F3E                     	;# 
  1525  1F3F                     	;# 
  1526  1F43                     	;# 
  1527  1F44                     	;# 
  1528  1F45                     	;# 
  1529  1F46                     	;# 
  1530  1F47                     	;# 
  1531  1F48                     	;# 
  1532  1F49                     	;# 
  1533  1F4A                     	;# 
  1534  1F4E                     	;# 
  1535  1F4F                     	;# 
  1536  1F50                     	;# 
  1537  1F51                     	;# 
  1538  1F52                     	;# 
  1539  1F53                     	;# 
  1540  1F54                     	;# 
  1541  1F55                     	;# 
  1542  1F65                     	;# 
  1543  1F68                     	;# 
  1544  1F69                     	;# 
  1545  1F6A                     	;# 
  1546  1F6B                     	;# 
  1547  1FE4                     	;# 
  1548  1FE5                     	;# 
  1549  1FE6                     	;# 
  1550  1FE7                     	;# 
  1551  1FE8                     	;# 
  1552  1FE8                     	;# 
  1553  1FE9                     	;# 
  1554  1FEA                     	;# 
  1555  1FEB                     	;# 
  1556  1FED                     	;# 
  1557  1FEE                     	;# 
  1558  1FEF                     	;# 
  1559  0000                     	;# 
  1560  0001                     	;# 
  1561  0002                     	;# 
  1562  0003                     	;# 
  1563  0004                     	;# 
  1564  0005                     	;# 
  1565  0006                     	;# 
  1566  0007                     	;# 
  1567  0008                     	;# 
  1568  0009                     	;# 
  1569  000A                     	;# 
  1570  000B                     	;# 
  1571  000C                     	;# 
  1572  000D                     	;# 
  1573  000E                     	;# 
  1574  0010                     	;# 
  1575  0012                     	;# 
  1576  0013                     	;# 
  1577  0014                     	;# 
  1578  0016                     	;# 
  1579  0018                     	;# 
  1580  0019                     	;# 
  1581  001A                     	;# 
  1582  009B                     	;# 
  1583  009B                     	;# 
  1584  009C                     	;# 
  1585  009D                     	;# 
  1586  009E                     	;# 
  1587  009F                     	;# 
  1588  0119                     	;# 
  1589  0119                     	;# 
  1590  0119                     	;# 
  1591  011A                     	;# 
  1592  011A                     	;# 
  1593  011A                     	;# 
  1594  011B                     	;# 
  1595  011B                     	;# 
  1596  011B                     	;# 
  1597  011B                     	;# 
  1598  011B                     	;# 
  1599  011C                     	;# 
  1600  011C                     	;# 
  1601  011C                     	;# 
  1602  011D                     	;# 
  1603  011D                     	;# 
  1604  011D                     	;# 
  1605  011E                     	;# 
  1606  011E                     	;# 
  1607  011E                     	;# 
  1608  011F                     	;# 
  1609  011F                     	;# 
  1610  011F                     	;# 
  1611  011F                     	;# 
  1612  011F                     	;# 
  1613  018C                     	;# 
  1614  018D                     	;# 
  1615  018E                     	;# 
  1616  018F                     	;# 
  1617  0190                     	;# 
  1618  0191                     	;# 
  1619  0192                     	;# 
  1620  0196                     	;# 
  1621  0197                     	;# 
  1622  0198                     	;# 
  1623  0199                     	;# 
  1624  019A                     	;# 
  1625  019B                     	;# 
  1626  019C                     	;# 
  1627  020C                     	;# 
  1628  020C                     	;# 
  1629  020D                     	;# 
  1630  020E                     	;# 
  1631  020F                     	;# 
  1632  020F                     	;# 
  1633  0210                     	;# 
  1634  0210                     	;# 
  1635  0211                     	;# 
  1636  0211                     	;# 
  1637  028C                     	;# 
  1638  028C                     	;# 
  1639  028D                     	;# 
  1640  028D                     	;# 
  1641  028E                     	;# 
  1642  028F                     	;# 
  1643  0290                     	;# 
  1644  0291                     	;# 
  1645  030C                     	;# 
  1646  030C                     	;# 
  1647  030D                     	;# 
  1648  030E                     	;# 
  1649  030F                     	;# 
  1650  0310                     	;# 
  1651  0310                     	;# 
  1652  0311                     	;# 
  1653  0312                     	;# 
  1654  0313                     	;# 
  1655  0314                     	;# 
  1656  0314                     	;# 
  1657  0315                     	;# 
  1658  0316                     	;# 
  1659  0318                     	;# 
  1660  0318                     	;# 
  1661  0319                     	;# 
  1662  031A                     	;# 
  1663  031C                     	;# 
  1664  031C                     	;# 
  1665  031D                     	;# 
  1666  031E                     	;# 
  1667  038C                     	;# 
  1668  038C                     	;# 
  1669  038D                     	;# 
  1670  038E                     	;# 
  1671  058C                     	;# 
  1672  058C                     	;# 
  1673  058D                     	;# 
  1674  058E                     	;# 
  1675  058F                     	;# 
  1676  058F                     	;# 
  1677  0590                     	;# 
  1678  0591                     	;# 
  1679  0592                     	;# 
  1680  0593                     	;# 
  1681  059C                     	;# 
  1682  059C                     	;# 
  1683  059D                     	;# 
  1684  059D                     	;# 
  1685  059E                     	;# 
  1686  059F                     	;# 
  1687  060C                     	;# 
  1688  060D                     	;# 
  1689  060E                     	;# 
  1690  060F                     	;# 
  1691  0610                     	;# 
  1692  0611                     	;# 
  1693  0612                     	;# 
  1694  0613                     	;# 
  1695  0614                     	;# 
  1696  070C                     	;# 
  1697  070D                     	;# 
  1698  070E                     	;# 
  1699  070F                     	;# 
  1700  0710                     	;# 
  1701  0711                     	;# 
  1702  0712                     	;# 
  1703  0713                     	;# 
  1704  0716                     	;# 
  1705  0717                     	;# 
  1706  0718                     	;# 
  1707  0719                     	;# 
  1708  071A                     	;# 
  1709  071B                     	;# 
  1710  071C                     	;# 
  1711  071D                     	;# 
  1712  0796                     	;# 
  1713  0797                     	;# 
  1714  0798                     	;# 
  1715  0799                     	;# 
  1716  079A                     	;# 
  1717  079B                     	;# 
  1718  080C                     	;# 
  1719  080D                     	;# 
  1720  080E                     	;# 
  1721  080F                     	;# 
  1722  0810                     	;# 
  1723  0811                     	;# 
  1724  0812                     	;# 
  1725  0813                     	;# 
  1726  0814                     	;# 
  1727  081A                     	;# 
  1728  081A                     	;# 
  1729  081B                     	;# 
  1730  081C                     	;# 
  1731  081C                     	;# 
  1732  081D                     	;# 
  1733  081E                     	;# 
  1734  081F                     	;# 
  1735  088C                     	;# 
  1736  088D                     	;# 
  1737  088E                     	;# 
  1738  088F                     	;# 
  1739  0890                     	;# 
  1740  0891                     	;# 
  1741  0892                     	;# 
  1742  0893                     	;# 
  1743  0895                     	;# 
  1744  0896                     	;# 
  1745  090C                     	;# 
  1746  090E                     	;# 
  1747  090F                     	;# 
  1748  091F                     	;# 
  1749  098F                     	;# 
  1750  098F                     	;# 
  1751  0990                     	;# 
  1752  0991                     	;# 
  1753  0992                     	;# 
  1754  0993                     	;# 
  1755  0994                     	;# 
  1756  0995                     	;# 
  1757  0996                     	;# 
  1758  0997                     	;# 
  1759  0A19                     	;# 
  1760  0A19                     	;# 
  1761  0A1A                     	;# 
  1762  0A1A                     	;# 
  1763  0A1B                     	;# 
  1764  0A1B                     	;# 
  1765  0A1B                     	;# 
  1766  0A1C                     	;# 
  1767  0A1C                     	;# 
  1768  0A1D                     	;# 
  1769  0A1D                     	;# 
  1770  0A1E                     	;# 
  1771  0A1E                     	;# 
  1772  0A1F                     	;# 
  1773  0A1F                     	;# 
  1774  0A1F                     	;# 
  1775  1E0F                     	;# 
  1776  1E10                     	;# 
  1777  1E11                     	;# 
  1778  1E12                     	;# 
  1779  1E13                     	;# 
  1780  1E14                     	;# 
  1781  1E15                     	;# 
  1782  1E16                     	;# 
  1783  1E17                     	;# 
  1784  1E18                     	;# 
  1785  1E19                     	;# 
  1786  1E1A                     	;# 
  1787  1E1B                     	;# 
  1788  1E1C                     	;# 
  1789  1E1D                     	;# 
  1790  1E1E                     	;# 
  1791  1E1F                     	;# 
  1792  1E20                     	;# 
  1793  1E21                     	;# 
  1794  1E22                     	;# 
  1795  1E23                     	;# 
  1796  1E24                     	;# 
  1797  1E25                     	;# 
  1798  1E26                     	;# 
  1799  1E27                     	;# 
  1800  1E28                     	;# 
  1801  1E29                     	;# 
  1802  1E2A                     	;# 
  1803  1E2B                     	;# 
  1804  1E2C                     	;# 
  1805  1E2D                     	;# 
  1806  1E2E                     	;# 
  1807  1E2F                     	;# 
  1808  1E30                     	;# 
  1809  1E31                     	;# 
  1810  1E32                     	;# 
  1811  1E33                     	;# 
  1812  1E34                     	;# 
  1813  1E35                     	;# 
  1814  1E36                     	;# 
  1815  1E37                     	;# 
  1816  1E8F                     	;# 
  1817  1E90                     	;# 
  1818  1E91                     	;# 
  1819  1E92                     	;# 
  1820  1E93                     	;# 
  1821  1E9C                     	;# 
  1822  1EA1                     	;# 
  1823  1EA2                     	;# 
  1824  1EB1                     	;# 
  1825  1EBB                     	;# 
  1826  1EBC                     	;# 
  1827  1EBD                     	;# 
  1828  1EBE                     	;# 
  1829  1EC3                     	;# 
  1830  1EC5                     	;# 
  1831  1EC6                     	;# 
  1832  1EC7                     	;# 
  1833  1EC8                     	;# 
  1834  1EC9                     	;# 
  1835  1ECA                     	;# 
  1836  1ECB                     	;# 
  1837  1ECC                     	;# 
  1838  1ECD                     	;# 
  1839  1ECE                     	;# 
  1840  1F10                     	;# 
  1841  1F11                     	;# 
  1842  1F12                     	;# 
  1843  1F13                     	;# 
  1844  1F14                     	;# 
  1845  1F15                     	;# 
  1846  1F16                     	;# 
  1847  1F17                     	;# 
  1848  1F18                     	;# 
  1849  1F19                     	;# 
  1850  1F1A                     	;# 
  1851  1F1B                     	;# 
  1852  1F1C                     	;# 
  1853  1F1D                     	;# 
  1854  1F1E                     	;# 
  1855  1F1F                     	;# 
  1856  1F20                     	;# 
  1857  1F21                     	;# 
  1858  1F22                     	;# 
  1859  1F23                     	;# 
  1860  1F24                     	;# 
  1861  1F25                     	;# 
  1862  1F26                     	;# 
  1863  1F27                     	;# 
  1864  1F38                     	;# 
  1865  1F39                     	;# 
  1866  1F3A                     	;# 
  1867  1F3B                     	;# 
  1868  1F3C                     	;# 
  1869  1F3D                     	;# 
  1870  1F3E                     	;# 
  1871  1F3F                     	;# 
  1872  1F43                     	;# 
  1873  1F44                     	;# 
  1874  1F45                     	;# 
  1875  1F46                     	;# 
  1876  1F47                     	;# 
  1877  1F48                     	;# 
  1878  1F49                     	;# 
  1879  1F4A                     	;# 
  1880  1F4E                     	;# 
  1881  1F4F                     	;# 
  1882  1F50                     	;# 
  1883  1F51                     	;# 
  1884  1F52                     	;# 
  1885  1F53                     	;# 
  1886  1F54                     	;# 
  1887  1F55                     	;# 
  1888  1F65                     	;# 
  1889  1F68                     	;# 
  1890  1F69                     	;# 
  1891  1F6A                     	;# 
  1892  1F6B                     	;# 
  1893  1FE4                     	;# 
  1894  1FE5                     	;# 
  1895  1FE6                     	;# 
  1896  1FE7                     	;# 
  1897  1FE8                     	;# 
  1898  1FE8                     	;# 
  1899  1FE9                     	;# 
  1900  1FEA                     	;# 
  1901  1FEB                     	;# 
  1902  1FED                     	;# 
  1903  1FEE                     	;# 
  1904  1FEF                     	;# 
  1905  0000                     	;# 
  1906  0001                     	;# 
  1907  0002                     	;# 
  1908  0003                     	;# 
  1909  0004                     	;# 
  1910  0005                     	;# 
  1911  0006                     	;# 
  1912  0007                     	;# 
  1913  0008                     	;# 
  1914  0009                     	;# 
  1915  000A                     	;# 
  1916  000B                     	;# 
  1917  000C                     	;# 
  1918  000D                     	;# 
  1919  000E                     	;# 
  1920  0010                     	;# 
  1921  0012                     	;# 
  1922  0013                     	;# 
  1923  0014                     	;# 
  1924  0016                     	;# 
  1925  0018                     	;# 
  1926  0019                     	;# 
  1927  001A                     	;# 
  1928  009B                     	;# 
  1929  009B                     	;# 
  1930  009C                     	;# 
  1931  009D                     	;# 
  1932  009E                     	;# 
  1933  009F                     	;# 
  1934  0119                     	;# 
  1935  0119                     	;# 
  1936  0119                     	;# 
  1937  011A                     	;# 
  1938  011A                     	;# 
  1939  011A                     	;# 
  1940  011B                     	;# 
  1941  011B                     	;# 
  1942  011B                     	;# 
  1943  011B                     	;# 
  1944  011B                     	;# 
  1945  011C                     	;# 
  1946  011C                     	;# 
  1947  011C                     	;# 
  1948  011D                     	;# 
  1949  011D                     	;# 
  1950  011D                     	;# 
  1951  011E                     	;# 
  1952  011E                     	;# 
  1953  011E                     	;# 
  1954  011F                     	;# 
  1955  011F                     	;# 
  1956  011F                     	;# 
  1957  011F                     	;# 
  1958  011F                     	;# 
  1959  018C                     	;# 
  1960  018D                     	;# 
  1961  018E                     	;# 
  1962  018F                     	;# 
  1963  0190                     	;# 
  1964  0191                     	;# 
  1965  0192                     	;# 
  1966  0196                     	;# 
  1967  0197                     	;# 
  1968  0198                     	;# 
  1969  0199                     	;# 
  1970  019A                     	;# 
  1971  019B                     	;# 
  1972  019C                     	;# 
  1973  020C                     	;# 
  1974  020C                     	;# 
  1975  020D                     	;# 
  1976  020E                     	;# 
  1977  020F                     	;# 
  1978  020F                     	;# 
  1979  0210                     	;# 
  1980  0210                     	;# 
  1981  0211                     	;# 
  1982  0211                     	;# 
  1983  028C                     	;# 
  1984  028C                     	;# 
  1985  028D                     	;# 
  1986  028D                     	;# 
  1987  028E                     	;# 
  1988  028F                     	;# 
  1989  0290                     	;# 
  1990  0291                     	;# 
  1991  030C                     	;# 
  1992  030C                     	;# 
  1993  030D                     	;# 
  1994  030E                     	;# 
  1995  030F                     	;# 
  1996  0310                     	;# 
  1997  0310                     	;# 
  1998  0311                     	;# 
  1999  0312                     	;# 
  2000  0313                     	;# 
  2001  0314                     	;# 
  2002  0314                     	;# 
  2003  0315                     	;# 
  2004  0316                     	;# 
  2005  0318                     	;# 
  2006  0318                     	;# 
  2007  0319                     	;# 
  2008  031A                     	;# 
  2009  031C                     	;# 
  2010  031C                     	;# 
  2011  031D                     	;# 
  2012  031E                     	;# 
  2013  038C                     	;# 
  2014  038C                     	;# 
  2015  038D                     	;# 
  2016  038E                     	;# 
  2017  058C                     	;# 
  2018  058C                     	;# 
  2019  058D                     	;# 
  2020  058E                     	;# 
  2021  058F                     	;# 
  2022  058F                     	;# 
  2023  0590                     	;# 
  2024  0591                     	;# 
  2025  0592                     	;# 
  2026  0593                     	;# 
  2027  059C                     	;# 
  2028  059C                     	;# 
  2029  059D                     	;# 
  2030  059D                     	;# 
  2031  059E                     	;# 
  2032  059F                     	;# 
  2033  060C                     	;# 
  2034  060D                     	;# 
  2035  060E                     	;# 
  2036  060F                     	;# 
  2037  0610                     	;# 
  2038  0611                     	;# 
  2039  0612                     	;# 
  2040  0613                     	;# 
  2041  0614                     	;# 
  2042  070C                     	;# 
  2043  070D                     	;# 
  2044  070E                     	;# 
  2045  070F                     	;# 
  2046  0710                     	;# 
  2047  0711                     	;# 
  2048  0712                     	;# 
  2049  0713                     	;# 
  2050  0716                     	;# 
  2051  0717                     	;# 
  2052  0718                     	;# 
  2053  0719                     	;# 
  2054  071A                     	;# 
  2055  071B                     	;# 
  2056  071C                     	;# 
  2057  071D                     	;# 
  2058  0796                     	;# 
  2059  0797                     	;# 
  2060  0798                     	;# 
  2061  0799                     	;# 
  2062  079A                     	;# 
  2063  079B                     	;# 
  2064  080C                     	;# 
  2065  080D                     	;# 
  2066  080E                     	;# 
  2067  080F                     	;# 
  2068  0810                     	;# 
  2069  0811                     	;# 
  2070  0812                     	;# 
  2071  0813                     	;# 
  2072  0814                     	;# 
  2073  081A                     	;# 
  2074  081A                     	;# 
  2075  081B                     	;# 
  2076  081C                     	;# 
  2077  081C                     	;# 
  2078  081D                     	;# 
  2079  081E                     	;# 
  2080  081F                     	;# 
  2081  088C                     	;# 
  2082  088D                     	;# 
  2083  088E                     	;# 
  2084  088F                     	;# 
  2085  0890                     	;# 
  2086  0891                     	;# 
  2087  0892                     	;# 
  2088  0893                     	;# 
  2089  0895                     	;# 
  2090  0896                     	;# 
  2091  090C                     	;# 
  2092  090E                     	;# 
  2093  090F                     	;# 
  2094  091F                     	;# 
  2095  098F                     	;# 
  2096  098F                     	;# 
  2097  0990                     	;# 
  2098  0991                     	;# 
  2099  0992                     	;# 
  2100  0993                     	;# 
  2101  0994                     	;# 
  2102  0995                     	;# 
  2103  0996                     	;# 
  2104  0997                     	;# 
  2105  0A19                     	;# 
  2106  0A19                     	;# 
  2107  0A1A                     	;# 
  2108  0A1A                     	;# 
  2109  0A1B                     	;# 
  2110  0A1B                     	;# 
  2111  0A1B                     	;# 
  2112  0A1C                     	;# 
  2113  0A1C                     	;# 
  2114  0A1D                     	;# 
  2115  0A1D                     	;# 
  2116  0A1E                     	;# 
  2117  0A1E                     	;# 
  2118  0A1F                     	;# 
  2119  0A1F                     	;# 
  2120  0A1F                     	;# 
  2121  1E0F                     	;# 
  2122  1E10                     	;# 
  2123  1E11                     	;# 
  2124  1E12                     	;# 
  2125  1E13                     	;# 
  2126  1E14                     	;# 
  2127  1E15                     	;# 
  2128  1E16                     	;# 
  2129  1E17                     	;# 
  2130  1E18                     	;# 
  2131  1E19                     	;# 
  2132  1E1A                     	;# 
  2133  1E1B                     	;# 
  2134  1E1C                     	;# 
  2135  1E1D                     	;# 
  2136  1E1E                     	;# 
  2137  1E1F                     	;# 
  2138  1E20                     	;# 
  2139  1E21                     	;# 
  2140  1E22                     	;# 
  2141  1E23                     	;# 
  2142  1E24                     	;# 
  2143  1E25                     	;# 
  2144  1E26                     	;# 
  2145  1E27                     	;# 
  2146  1E28                     	;# 
  2147  1E29                     	;# 
  2148  1E2A                     	;# 
  2149  1E2B                     	;# 
  2150  1E2C                     	;# 
  2151  1E2D                     	;# 
  2152  1E2E                     	;# 
  2153  1E2F                     	;# 
  2154  1E30                     	;# 
  2155  1E31                     	;# 
  2156  1E32                     	;# 
  2157  1E33                     	;# 
  2158  1E34                     	;# 
  2159  1E35                     	;# 
  2160  1E36                     	;# 
  2161  1E37                     	;# 
  2162  1E8F                     	;# 
  2163  1E90                     	;# 
  2164  1E91                     	;# 
  2165  1E92                     	;# 
  2166  1E93                     	;# 
  2167  1E9C                     	;# 
  2168  1EA1                     	;# 
  2169  1EA2                     	;# 
  2170  1EB1                     	;# 
  2171  1EBB                     	;# 
  2172  1EBC                     	;# 
  2173  1EBD                     	;# 
  2174  1EBE                     	;# 
  2175  1EC3                     	;# 
  2176  1EC5                     	;# 
  2177  1EC6                     	;# 
  2178  1EC7                     	;# 
  2179  1EC8                     	;# 
  2180  1EC9                     	;# 
  2181  1ECA                     	;# 
  2182  1ECB                     	;# 
  2183  1ECC                     	;# 
  2184  1ECD                     	;# 
  2185  1ECE                     	;# 
  2186  1F10                     	;# 
  2187  1F11                     	;# 
  2188  1F12                     	;# 
  2189  1F13                     	;# 
  2190  1F14                     	;# 
  2191  1F15                     	;# 
  2192  1F16                     	;# 
  2193  1F17                     	;# 
  2194  1F18                     	;# 
  2195  1F19                     	;# 
  2196  1F1A                     	;# 
  2197  1F1B                     	;# 
  2198  1F1C                     	;# 
  2199  1F1D                     	;# 
  2200  1F1E                     	;# 
  2201  1F1F                     	;# 
  2202  1F20                     	;# 
  2203  1F21                     	;# 
  2204  1F22                     	;# 
  2205  1F23                     	;# 
  2206  1F24                     	;# 
  2207  1F25                     	;# 
  2208  1F26                     	;# 
  2209  1F27                     	;# 
  2210  1F38                     	;# 
  2211  1F39                     	;# 
  2212  1F3A                     	;# 
  2213  1F3B                     	;# 
  2214  1F3C                     	;# 
  2215  1F3D                     	;# 
  2216  1F3E                     	;# 
  2217  1F3F                     	;# 
  2218  1F43                     	;# 
  2219  1F44                     	;# 
  2220  1F45                     	;# 
  2221  1F46                     	;# 
  2222  1F47                     	;# 
  2223  1F48                     	;# 
  2224  1F49                     	;# 
  2225  1F4A                     	;# 
  2226  1F4E                     	;# 
  2227  1F4F                     	;# 
  2228  1F50                     	;# 
  2229  1F51                     	;# 
  2230  1F52                     	;# 
  2231  1F53                     	;# 
  2232  1F54                     	;# 
  2233  1F55                     	;# 
  2234  1F65                     	;# 
  2235  1F68                     	;# 
  2236  1F69                     	;# 
  2237  1F6A                     	;# 
  2238  1F6B                     	;# 
  2239  1FE4                     	;# 
  2240  1FE5                     	;# 
  2241  1FE6                     	;# 
  2242  1FE7                     	;# 
  2243  1FE8                     	;# 
  2244  1FE8                     	;# 
  2245  1FE9                     	;# 
  2246  1FEA                     	;# 
  2247  1FEB                     	;# 
  2248  1FED                     	;# 
  2249  1FEE                     	;# 
  2250  1FEF                     	;# 
  2251  0000                     	;# 
  2252  0001                     	;# 
  2253  0002                     	;# 
  2254  0003                     	;# 
  2255  0004                     	;# 
  2256  0005                     	;# 
  2257  0006                     	;# 
  2258  0007                     	;# 
  2259  0008                     	;# 
  2260  0009                     	;# 
  2261  000A                     	;# 
  2262  000B                     	;# 
  2263  000C                     	;# 
  2264  000D                     	;# 
  2265  000E                     	;# 
  2266  0010                     	;# 
  2267  0012                     	;# 
  2268  0013                     	;# 
  2269  0014                     	;# 
  2270  0016                     	;# 
  2271  0018                     	;# 
  2272  0019                     	;# 
  2273  001A                     	;# 
  2274  009B                     	;# 
  2275  009B                     	;# 
  2276  009C                     	;# 
  2277  009D                     	;# 
  2278  009E                     	;# 
  2279  009F                     	;# 
  2280  0119                     	;# 
  2281  0119                     	;# 
  2282  0119                     	;# 
  2283  011A                     	;# 
  2284  011A                     	;# 
  2285  011A                     	;# 
  2286  011B                     	;# 
  2287  011B                     	;# 
  2288  011B                     	;# 
  2289  011B                     	;# 
  2290  011B                     	;# 
  2291  011C                     	;# 
  2292  011C                     	;# 
  2293  011C                     	;# 
  2294  011D                     	;# 
  2295  011D                     	;# 
  2296  011D                     	;# 
  2297  011E                     	;# 
  2298  011E                     	;# 
  2299  011E                     	;# 
  2300  011F                     	;# 
  2301  011F                     	;# 
  2302  011F                     	;# 
  2303  011F                     	;# 
  2304  011F                     	;# 
  2305  018C                     	;# 
  2306  018D                     	;# 
  2307  018E                     	;# 
  2308  018F                     	;# 
  2309  0190                     	;# 
  2310  0191                     	;# 
  2311  0192                     	;# 
  2312  0196                     	;# 
  2313  0197                     	;# 
  2314  0198                     	;# 
  2315  0199                     	;# 
  2316  019A                     	;# 
  2317  019B                     	;# 
  2318  019C                     	;# 
  2319  020C                     	;# 
  2320  020C                     	;# 
  2321  020D                     	;# 
  2322  020E                     	;# 
  2323  020F                     	;# 
  2324  020F                     	;# 
  2325  0210                     	;# 
  2326  0210                     	;# 
  2327  0211                     	;# 
  2328  0211                     	;# 
  2329  028C                     	;# 
  2330  028C                     	;# 
  2331  028D                     	;# 
  2332  028D                     	;# 
  2333  028E                     	;# 
  2334  028F                     	;# 
  2335  0290                     	;# 
  2336  0291                     	;# 
  2337  030C                     	;# 
  2338  030C                     	;# 
  2339  030D                     	;# 
  2340  030E                     	;# 
  2341  030F                     	;# 
  2342  0310                     	;# 
  2343  0310                     	;# 
  2344  0311                     	;# 
  2345  0312                     	;# 
  2346  0313                     	;# 
  2347  0314                     	;# 
  2348  0314                     	;# 
  2349  0315                     	;# 
  2350  0316                     	;# 
  2351  0318                     	;# 
  2352  0318                     	;# 
  2353  0319                     	;# 
  2354  031A                     	;# 
  2355  031C                     	;# 
  2356  031C                     	;# 
  2357  031D                     	;# 
  2358  031E                     	;# 
  2359  038C                     	;# 
  2360  038C                     	;# 
  2361  038D                     	;# 
  2362  038E                     	;# 
  2363  058C                     	;# 
  2364  058C                     	;# 
  2365  058D                     	;# 
  2366  058E                     	;# 
  2367  058F                     	;# 
  2368  058F                     	;# 
  2369  0590                     	;# 
  2370  0591                     	;# 
  2371  0592                     	;# 
  2372  0593                     	;# 
  2373  059C                     	;# 
  2374  059C                     	;# 
  2375  059D                     	;# 
  2376  059D                     	;# 
  2377  059E                     	;# 
  2378  059F                     	;# 
  2379  060C                     	;# 
  2380  060D                     	;# 
  2381  060E                     	;# 
  2382  060F                     	;# 
  2383  0610                     	;# 
  2384  0611                     	;# 
  2385  0612                     	;# 
  2386  0613                     	;# 
  2387  0614                     	;# 
  2388  070C                     	;# 
  2389  070D                     	;# 
  2390  070E                     	;# 
  2391  070F                     	;# 
  2392  0710                     	;# 
  2393  0711                     	;# 
  2394  0712                     	;# 
  2395  0713                     	;# 
  2396  0716                     	;# 
  2397  0717                     	;# 
  2398  0718                     	;# 
  2399  0719                     	;# 
  2400  071A                     	;# 
  2401  071B                     	;# 
  2402  071C                     	;# 
  2403  071D                     	;# 
  2404  0796                     	;# 
  2405  0797                     	;# 
  2406  0798                     	;# 
  2407  0799                     	;# 
  2408  079A                     	;# 
  2409  079B                     	;# 
  2410  080C                     	;# 
  2411  080D                     	;# 
  2412  080E                     	;# 
  2413  080F                     	;# 
  2414  0810                     	;# 
  2415  0811                     	;# 
  2416  0812                     	;# 
  2417  0813                     	;# 
  2418  0814                     	;# 
  2419  081A                     	;# 
  2420  081A                     	;# 
  2421  081B                     	;# 
  2422  081C                     	;# 
  2423  081C                     	;# 
  2424  081D                     	;# 
  2425  081E                     	;# 
  2426  081F                     	;# 
  2427  088C                     	;# 
  2428  088D                     	;# 
  2429  088E                     	;# 
  2430  088F                     	;# 
  2431  0890                     	;# 
  2432  0891                     	;# 
  2433  0892                     	;# 
  2434  0893                     	;# 
  2435  0895                     	;# 
  2436  0896                     	;# 
  2437  090C                     	;# 
  2438  090E                     	;# 
  2439  090F                     	;# 
  2440  091F                     	;# 
  2441  098F                     	;# 
  2442  098F                     	;# 
  2443  0990                     	;# 
  2444  0991                     	;# 
  2445  0992                     	;# 
  2446  0993                     	;# 
  2447  0994                     	;# 
  2448  0995                     	;# 
  2449  0996                     	;# 
  2450  0997                     	;# 
  2451  0A19                     	;# 
  2452  0A19                     	;# 
  2453  0A1A                     	;# 
  2454  0A1A                     	;# 
  2455  0A1B                     	;# 
  2456  0A1B                     	;# 
  2457  0A1B                     	;# 
  2458  0A1C                     	;# 
  2459  0A1C                     	;# 
  2460  0A1D                     	;# 
  2461  0A1D                     	;# 
  2462  0A1E                     	;# 
  2463  0A1E                     	;# 
  2464  0A1F                     	;# 
  2465  0A1F                     	;# 
  2466  0A1F                     	;# 
  2467  1E0F                     	;# 
  2468  1E10                     	;# 
  2469  1E11                     	;# 
  2470  1E12                     	;# 
  2471  1E13                     	;# 
  2472  1E14                     	;# 
  2473  1E15                     	;# 
  2474  1E16                     	;# 
  2475  1E17                     	;# 
  2476  1E18                     	;# 
  2477  1E19                     	;# 
  2478  1E1A                     	;# 
  2479  1E1B                     	;# 
  2480  1E1C                     	;# 
  2481  1E1D                     	;# 
  2482  1E1E                     	;# 
  2483  1E1F                     	;# 
  2484  1E20                     	;# 
  2485  1E21                     	;# 
  2486  1E22                     	;# 
  2487  1E23                     	;# 
  2488  1E24                     	;# 
  2489  1E25                     	;# 
  2490  1E26                     	;# 
  2491  1E27                     	;# 
  2492  1E28                     	;# 
  2493  1E29                     	;# 
  2494  1E2A                     	;# 
  2495  1E2B                     	;# 
  2496  1E2C                     	;# 
  2497  1E2D                     	;# 
  2498  1E2E                     	;# 
  2499  1E2F                     	;# 
  2500  1E30                     	;# 
  2501  1E31                     	;# 
  2502  1E32                     	;# 
  2503  1E33                     	;# 
  2504  1E34                     	;# 
  2505  1E35                     	;# 
  2506  1E36                     	;# 
  2507  1E37                     	;# 
  2508  1E8F                     	;# 
  2509  1E90                     	;# 
  2510  1E91                     	;# 
  2511  1E92                     	;# 
  2512  1E93                     	;# 
  2513  1E9C                     	;# 
  2514  1EA1                     	;# 
  2515  1EA2                     	;# 
  2516  1EB1                     	;# 
  2517  1EBB                     	;# 
  2518  1EBC                     	;# 
  2519  1EBD                     	;# 
  2520  1EBE                     	;# 
  2521  1EC3                     	;# 
  2522  1EC5                     	;# 
  2523  1EC6                     	;# 
  2524  1EC7                     	;# 
  2525  1EC8                     	;# 
  2526  1EC9                     	;# 
  2527  1ECA                     	;# 
  2528  1ECB                     	;# 
  2529  1ECC                     	;# 
  2530  1ECD                     	;# 
  2531  1ECE                     	;# 
  2532  1F10                     	;# 
  2533  1F11                     	;# 
  2534  1F12                     	;# 
  2535  1F13                     	;# 
  2536  1F14                     	;# 
  2537  1F15                     	;# 
  2538  1F16                     	;# 
  2539  1F17                     	;# 
  2540  1F18                     	;# 
  2541  1F19                     	;# 
  2542  1F1A                     	;# 
  2543  1F1B                     	;# 
  2544  1F1C                     	;# 
  2545  1F1D                     	;# 
  2546  1F1E                     	;# 
  2547  1F1F                     	;# 
  2548  1F20                     	;# 
  2549  1F21                     	;# 
  2550  1F22                     	;# 
  2551  1F23                     	;# 
  2552  1F24                     	;# 
  2553  1F25                     	;# 
  2554  1F26                     	;# 
  2555  1F27                     	;# 
  2556  1F38                     	;# 
  2557  1F39                     	;# 
  2558  1F3A                     	;# 
  2559  1F3B                     	;# 
  2560  1F3C                     	;# 
  2561  1F3D                     	;# 
  2562  1F3E                     	;# 
  2563  1F3F                     	;# 
  2564  1F43                     	;# 
  2565  1F44                     	;# 
  2566  1F45                     	;# 
  2567  1F46                     	;# 
  2568  1F47                     	;# 
  2569  1F48                     	;# 
  2570  1F49                     	;# 
  2571  1F4A                     	;# 
  2572  1F4E                     	;# 
  2573  1F4F                     	;# 
  2574  1F50                     	;# 
  2575  1F51                     	;# 
  2576  1F52                     	;# 
  2577  1F53                     	;# 
  2578  1F54                     	;# 
  2579  1F55                     	;# 
  2580  1F65                     	;# 
  2581  1F68                     	;# 
  2582  1F69                     	;# 
  2583  1F6A                     	;# 
  2584  1F6B                     	;# 
  2585  1FE4                     	;# 
  2586  1FE5                     	;# 
  2587  1FE6                     	;# 
  2588  1FE7                     	;# 
  2589  1FE8                     	;# 
  2590  1FE8                     	;# 
  2591  1FE9                     	;# 
  2592  1FEA                     	;# 
  2593  1FEB                     	;# 
  2594  1FED                     	;# 
  2595  1FEE                     	;# 
  2596  1FEF                     	;# 
  2597  0000                     	;# 
  2598  0001                     	;# 
  2599  0002                     	;# 
  2600  0003                     	;# 
  2601  0004                     	;# 
  2602  0005                     	;# 
  2603  0006                     	;# 
  2604  0007                     	;# 
  2605  0008                     	;# 
  2606  0009                     	;# 
  2607  000A                     	;# 
  2608  000B                     	;# 
  2609  000C                     	;# 
  2610  000D                     	;# 
  2611  000E                     	;# 
  2612  0010                     	;# 
  2613  0012                     	;# 
  2614  0013                     	;# 
  2615  0014                     	;# 
  2616  0016                     	;# 
  2617  0018                     	;# 
  2618  0019                     	;# 
  2619  001A                     	;# 
  2620  009B                     	;# 
  2621  009B                     	;# 
  2622  009C                     	;# 
  2623  009D                     	;# 
  2624  009E                     	;# 
  2625  009F                     	;# 
  2626  0119                     	;# 
  2627  0119                     	;# 
  2628  0119                     	;# 
  2629  011A                     	;# 
  2630  011A                     	;# 
  2631  011A                     	;# 
  2632  011B                     	;# 
  2633  011B                     	;# 
  2634  011B                     	;# 
  2635  011B                     	;# 
  2636  011B                     	;# 
  2637  011C                     	;# 
  2638  011C                     	;# 
  2639  011C                     	;# 
  2640  011D                     	;# 
  2641  011D                     	;# 
  2642  011D                     	;# 
  2643  011E                     	;# 
  2644  011E                     	;# 
  2645  011E                     	;# 
  2646  011F                     	;# 
  2647  011F                     	;# 
  2648  011F                     	;# 
  2649  011F                     	;# 
  2650  011F                     	;# 
  2651  018C                     	;# 
  2652  018D                     	;# 
  2653  018E                     	;# 
  2654  018F                     	;# 
  2655  0190                     	;# 
  2656  0191                     	;# 
  2657  0192                     	;# 
  2658  0196                     	;# 
  2659  0197                     	;# 
  2660  0198                     	;# 
  2661  0199                     	;# 
  2662  019A                     	;# 
  2663  019B                     	;# 
  2664  019C                     	;# 
  2665  020C                     	;# 
  2666  020C                     	;# 
  2667  020D                     	;# 
  2668  020E                     	;# 
  2669  020F                     	;# 
  2670  020F                     	;# 
  2671  0210                     	;# 
  2672  0210                     	;# 
  2673  0211                     	;# 
  2674  0211                     	;# 
  2675  028C                     	;# 
  2676  028C                     	;# 
  2677  028D                     	;# 
  2678  028D                     	;# 
  2679  028E                     	;# 
  2680  028F                     	;# 
  2681  0290                     	;# 
  2682  0291                     	;# 
  2683  030C                     	;# 
  2684  030C                     	;# 
  2685  030D                     	;# 
  2686  030E                     	;# 
  2687  030F                     	;# 
  2688  0310                     	;# 
  2689  0310                     	;# 
  2690  0311                     	;# 
  2691  0312                     	;# 
  2692  0313                     	;# 
  2693  0314                     	;# 
  2694  0314                     	;# 
  2695  0315                     	;# 
  2696  0316                     	;# 
  2697  0318                     	;# 
  2698  0318                     	;# 
  2699  0319                     	;# 
  2700  031A                     	;# 
  2701  031C                     	;# 
  2702  031C                     	;# 
  2703  031D                     	;# 
  2704  031E                     	;# 
  2705  038C                     	;# 
  2706  038C                     	;# 
  2707  038D                     	;# 
  2708  038E                     	;# 
  2709  058C                     	;# 
  2710  058C                     	;# 
  2711  058D                     	;# 
  2712  058E                     	;# 
  2713  058F                     	;# 
  2714  058F                     	;# 
  2715  0590                     	;# 
  2716  0591                     	;# 
  2717  0592                     	;# 
  2718  0593                     	;# 
  2719  059C                     	;# 
  2720  059C                     	;# 
  2721  059D                     	;# 
  2722  059D                     	;# 
  2723  059E                     	;# 
  2724  059F                     	;# 
  2725  060C                     	;# 
  2726  060D                     	;# 
  2727  060E                     	;# 
  2728  060F                     	;# 
  2729  0610                     	;# 
  2730  0611                     	;# 
  2731  0612                     	;# 
  2732  0613                     	;# 
  2733  0614                     	;# 
  2734  070C                     	;# 
  2735  070D                     	;# 
  2736  070E                     	;# 
  2737  070F                     	;# 
  2738  0710                     	;# 
  2739  0711                     	;# 
  2740  0712                     	;# 
  2741  0713                     	;# 
  2742  0716                     	;# 
  2743  0717                     	;# 
  2744  0718                     	;# 
  2745  0719                     	;# 
  2746  071A                     	;# 
  2747  071B                     	;# 
  2748  071C                     	;# 
  2749  071D                     	;# 
  2750  0796                     	;# 
  2751  0797                     	;# 
  2752  0798                     	;# 
  2753  0799                     	;# 
  2754  079A                     	;# 
  2755  079B                     	;# 
  2756  080C                     	;# 
  2757  080D                     	;# 
  2758  080E                     	;# 
  2759  080F                     	;# 
  2760  0810                     	;# 
  2761  0811                     	;# 
  2762  0812                     	;# 
  2763  0813                     	;# 
  2764  0814                     	;# 
  2765  081A                     	;# 
  2766  081A                     	;# 
  2767  081B                     	;# 
  2768  081C                     	;# 
  2769  081C                     	;# 
  2770  081D                     	;# 
  2771  081E                     	;# 
  2772  081F                     	;# 
  2773  088C                     	;# 
  2774  088D                     	;# 
  2775  088E                     	;# 
  2776  088F                     	;# 
  2777  0890                     	;# 
  2778  0891                     	;# 
  2779  0892                     	;# 
  2780  0893                     	;# 
  2781  0895                     	;# 
  2782  0896                     	;# 
  2783  090C                     	;# 
  2784  090E                     	;# 
  2785  090F                     	;# 
  2786  091F                     	;# 
  2787  098F                     	;# 
  2788  098F                     	;# 
  2789  0990                     	;# 
  2790  0991                     	;# 
  2791  0992                     	;# 
  2792  0993                     	;# 
  2793  0994                     	;# 
  2794  0995                     	;# 
  2795  0996                     	;# 
  2796  0997                     	;# 
  2797  0A19                     	;# 
  2798  0A19                     	;# 
  2799  0A1A                     	;# 
  2800  0A1A                     	;# 
  2801  0A1B                     	;# 
  2802  0A1B                     	;# 
  2803  0A1B                     	;# 
  2804  0A1C                     	;# 
  2805  0A1C                     	;# 
  2806  0A1D                     	;# 
  2807  0A1D                     	;# 
  2808  0A1E                     	;# 
  2809  0A1E                     	;# 
  2810  0A1F                     	;# 
  2811  0A1F                     	;# 
  2812  0A1F                     	;# 
  2813  1E0F                     	;# 
  2814  1E10                     	;# 
  2815  1E11                     	;# 
  2816  1E12                     	;# 
  2817  1E13                     	;# 
  2818  1E14                     	;# 
  2819  1E15                     	;# 
  2820  1E16                     	;# 
  2821  1E17                     	;# 
  2822  1E18                     	;# 
  2823  1E19                     	;# 
  2824  1E1A                     	;# 
  2825  1E1B                     	;# 
  2826  1E1C                     	;# 
  2827  1E1D                     	;# 
  2828  1E1E                     	;# 
  2829  1E1F                     	;# 
  2830  1E20                     	;# 
  2831  1E21                     	;# 
  2832  1E22                     	;# 
  2833  1E23                     	;# 
  2834  1E24                     	;# 
  2835  1E25                     	;# 
  2836  1E26                     	;# 
  2837  1E27                     	;# 
  2838  1E28                     	;# 
  2839  1E29                     	;# 
  2840  1E2A                     	;# 
  2841  1E2B                     	;# 
  2842  1E2C                     	;# 
  2843  1E2D                     	;# 
  2844  1E2E                     	;# 
  2845  1E2F                     	;# 
  2846  1E30                     	;# 
  2847  1E31                     	;# 
  2848  1E32                     	;# 
  2849  1E33                     	;# 
  2850  1E34                     	;# 
  2851  1E35                     	;# 
  2852  1E36                     	;# 
  2853  1E37                     	;# 
  2854  1E8F                     	;# 
  2855  1E90                     	;# 
  2856  1E91                     	;# 
  2857  1E92                     	;# 
  2858  1E93                     	;# 
  2859  1E9C                     	;# 
  2860  1EA1                     	;# 
  2861  1EA2                     	;# 
  2862  1EB1                     	;# 
  2863  1EBB                     	;# 
  2864  1EBC                     	;# 
  2865  1EBD                     	;# 
  2866  1EBE                     	;# 
  2867  1EC3                     	;# 
  2868  1EC5                     	;# 
  2869  1EC6                     	;# 
  2870  1EC7                     	;# 
  2871  1EC8                     	;# 
  2872  1EC9                     	;# 
  2873  1ECA                     	;# 
  2874  1ECB                     	;# 
  2875  1ECC                     	;# 
  2876  1ECD                     	;# 
  2877  1ECE                     	;# 
  2878  1F10                     	;# 
  2879  1F11                     	;# 
  2880  1F12                     	;# 
  2881  1F13                     	;# 
  2882  1F14                     	;# 
  2883  1F15                     	;# 
  2884  1F16                     	;# 
  2885  1F17                     	;# 
  2886  1F18                     	;# 
  2887  1F19                     	;# 
  2888  1F1A                     	;# 
  2889  1F1B                     	;# 
  2890  1F1C                     	;# 
  2891  1F1D                     	;# 
  2892  1F1E                     	;# 
  2893  1F1F                     	;# 
  2894  1F20                     	;# 
  2895  1F21                     	;# 
  2896  1F22                     	;# 
  2897  1F23                     	;# 
  2898  1F24                     	;# 
  2899  1F25                     	;# 
  2900  1F26                     	;# 
  2901  1F27                     	;# 
  2902  1F38                     	;# 
  2903  1F39                     	;# 
  2904  1F3A                     	;# 
  2905  1F3B                     	;# 
  2906  1F3C                     	;# 
  2907  1F3D                     	;# 
  2908  1F3E                     	;# 
  2909  1F3F                     	;# 
  2910  1F43                     	;# 
  2911  1F44                     	;# 
  2912  1F45                     	;# 
  2913  1F46                     	;# 
  2914  1F47                     	;# 
  2915  1F48                     	;# 
  2916  1F49                     	;# 
  2917  1F4A                     	;# 
  2918  1F4E                     	;# 
  2919  1F4F                     	;# 
  2920  1F50                     	;# 
  2921  1F51                     	;# 
  2922  1F52                     	;# 
  2923  1F53                     	;# 
  2924  1F54                     	;# 
  2925  1F55                     	;# 
  2926  1F65                     	;# 
  2927  1F68                     	;# 
  2928  1F69                     	;# 
  2929  1F6A                     	;# 
  2930  1F6B                     	;# 
  2931  1FE4                     	;# 
  2932  1FE5                     	;# 
  2933  1FE6                     	;# 
  2934  1FE7                     	;# 
  2935  1FE8                     	;# 
  2936  1FE8                     	;# 
  2937  1FE9                     	;# 
  2938  1FEA                     	;# 
  2939  1FEB                     	;# 
  2940  1FED                     	;# 
  2941  1FEE                     	;# 
  2942  1FEF                     	;# 
  2943  0000                     	;# 
  2944  0001                     	;# 
  2945  0002                     	;# 
  2946  0003                     	;# 
  2947  0004                     	;# 
  2948  0005                     	;# 
  2949  0006                     	;# 
  2950  0007                     	;# 
  2951  0008                     	;# 
  2952  0009                     	;# 
  2953  000A                     	;# 
  2954  000B                     	;# 
  2955  000C                     	;# 
  2956  000D                     	;# 
  2957  000E                     	;# 
  2958  0010                     	;# 
  2959  0012                     	;# 
  2960  0013                     	;# 
  2961  0014                     	;# 
  2962  0016                     	;# 
  2963  0018                     	;# 
  2964  0019                     	;# 
  2965  001A                     	;# 
  2966  009B                     	;# 
  2967  009B                     	;# 
  2968  009C                     	;# 
  2969  009D                     	;# 
  2970  009E                     	;# 
  2971  009F                     	;# 
  2972  0119                     	;# 
  2973  0119                     	;# 
  2974  0119                     	;# 
  2975  011A                     	;# 
  2976  011A                     	;# 
  2977  011A                     	;# 
  2978  011B                     	;# 
  2979  011B                     	;# 
  2980  011B                     	;# 
  2981  011B                     	;# 
  2982  011B                     	;# 
  2983  011C                     	;# 
  2984  011C                     	;# 
  2985  011C                     	;# 
  2986  011D                     	;# 
  2987  011D                     	;# 
  2988  011D                     	;# 
  2989  011E                     	;# 
  2990  011E                     	;# 
  2991  011E                     	;# 
  2992  011F                     	;# 
  2993  011F                     	;# 
  2994  011F                     	;# 
  2995  011F                     	;# 
  2996  011F                     	;# 
  2997  018C                     	;# 
  2998  018D                     	;# 
  2999  018E                     	;# 
  3000  018F                     	;# 
  3001  0190                     	;# 
  3002  0191                     	;# 
  3003  0192                     	;# 
  3004  0196                     	;# 
  3005  0197                     	;# 
  3006  0198                     	;# 
  3007  0199                     	;# 
  3008  019A                     	;# 
  3009  019B                     	;# 
  3010  019C                     	;# 
  3011  020C                     	;# 
  3012  020C                     	;# 
  3013  020D                     	;# 
  3014  020E                     	;# 
  3015  020F                     	;# 
  3016  020F                     	;# 
  3017  0210                     	;# 
  3018  0210                     	;# 
  3019  0211                     	;# 
  3020  0211                     	;# 
  3021  028C                     	;# 
  3022  028C                     	;# 
  3023  028D                     	;# 
  3024  028D                     	;# 
  3025  028E                     	;# 
  3026  028F                     	;# 
  3027  0290                     	;# 
  3028  0291                     	;# 
  3029  030C                     	;# 
  3030  030C                     	;# 
  3031  030D                     	;# 
  3032  030E                     	;# 
  3033  030F                     	;# 
  3034  0310                     	;# 
  3035  0310                     	;# 
  3036  0311                     	;# 
  3037  0312                     	;# 
  3038  0313                     	;# 
  3039  0314                     	;# 
  3040  0314                     	;# 
  3041  0315                     	;# 
  3042  0316                     	;# 
  3043  0318                     	;# 
  3044  0318                     	;# 
  3045  0319                     	;# 
  3046  031A                     	;# 
  3047  031C                     	;# 
  3048  031C                     	;# 
  3049  031D                     	;# 
  3050  031E                     	;# 
  3051  038C                     	;# 
  3052  038C                     	;# 
  3053  038D                     	;# 
  3054  038E                     	;# 
  3055  058C                     	;# 
  3056  058C                     	;# 
  3057  058D                     	;# 
  3058  058E                     	;# 
  3059  058F                     	;# 
  3060  058F                     	;# 
  3061  0590                     	;# 
  3062  0591                     	;# 
  3063  0592                     	;# 
  3064  0593                     	;# 
  3065  059C                     	;# 
  3066  059C                     	;# 
  3067  059D                     	;# 
  3068  059D                     	;# 
  3069  059E                     	;# 
  3070  059F                     	;# 
  3071  060C                     	;# 
  3072  060D                     	;# 
  3073  060E                     	;# 
  3074  060F                     	;# 
  3075  0610                     	;# 
  3076  0611                     	;# 
  3077  0612                     	;# 
  3078  0613                     	;# 
  3079  0614                     	;# 
  3080  070C                     	;# 
  3081  070D                     	;# 
  3082  070E                     	;# 
  3083  070F                     	;# 
  3084  0710                     	;# 
  3085  0711                     	;# 
  3086  0712                     	;# 
  3087  0713                     	;# 
  3088  0716                     	;# 
  3089  0717                     	;# 
  3090  0718                     	;# 
  3091  0719                     	;# 
  3092  071A                     	;# 
  3093  071B                     	;# 
  3094  071C                     	;# 
  3095  071D                     	;# 
  3096  0796                     	;# 
  3097  0797                     	;# 
  3098  0798                     	;# 
  3099  0799                     	;# 
  3100  079A                     	;# 
  3101  079B                     	;# 
  3102  080C                     	;# 
  3103  080D                     	;# 
  3104  080E                     	;# 
  3105  080F                     	;# 
  3106  0810                     	;# 
  3107  0811                     	;# 
  3108  0812                     	;# 
  3109  0813                     	;# 
  3110  0814                     	;# 
  3111  081A                     	;# 
  3112  081A                     	;# 
  3113  081B                     	;# 
  3114  081C                     	;# 
  3115  081C                     	;# 
  3116  081D                     	;# 
  3117  081E                     	;# 
  3118  081F                     	;# 
  3119  088C                     	;# 
  3120  088D                     	;# 
  3121  088E                     	;# 
  3122  088F                     	;# 
  3123  0890                     	;# 
  3124  0891                     	;# 
  3125  0892                     	;# 
  3126  0893                     	;# 
  3127  0895                     	;# 
  3128  0896                     	;# 
  3129  090C                     	;# 
  3130  090E                     	;# 
  3131  090F                     	;# 
  3132  091F                     	;# 
  3133  098F                     	;# 
  3134  098F                     	;# 
  3135  0990                     	;# 
  3136  0991                     	;# 
  3137  0992                     	;# 
  3138  0993                     	;# 
  3139  0994                     	;# 
  3140  0995                     	;# 
  3141  0996                     	;# 
  3142  0997                     	;# 
  3143  0A19                     	;# 
  3144  0A19                     	;# 
  3145  0A1A                     	;# 
  3146  0A1A                     	;# 
  3147  0A1B                     	;# 
  3148  0A1B                     	;# 
  3149  0A1B                     	;# 
  3150  0A1C                     	;# 
  3151  0A1C                     	;# 
  3152  0A1D                     	;# 
  3153  0A1D                     	;# 
  3154  0A1E                     	;# 
  3155  0A1E                     	;# 
  3156  0A1F                     	;# 
  3157  0A1F                     	;# 
  3158  0A1F                     	;# 
  3159  1E0F                     	;# 
  3160  1E10                     	;# 
  3161  1E11                     	;# 
  3162  1E12                     	;# 
  3163  1E13                     	;# 
  3164  1E14                     	;# 
  3165  1E15                     	;# 
  3166  1E16                     	;# 
  3167  1E17                     	;# 
  3168  1E18                     	;# 
  3169  1E19                     	;# 
  3170  1E1A                     	;# 
  3171  1E1B                     	;# 
  3172  1E1C                     	;# 
  3173  1E1D                     	;# 
  3174  1E1E                     	;# 
  3175  1E1F                     	;# 
  3176  1E20                     	;# 
  3177  1E21                     	;# 
  3178  1E22                     	;# 
  3179  1E23                     	;# 
  3180  1E24                     	;# 
  3181  1E25                     	;# 
  3182  1E26                     	;# 
  3183  1E27                     	;# 
  3184  1E28                     	;# 
  3185  1E29                     	;# 
  3186  1E2A                     	;# 
  3187  1E2B                     	;# 
  3188  1E2C                     	;# 
  3189  1E2D                     	;# 
  3190  1E2E                     	;# 
  3191  1E2F                     	;# 
  3192  1E30                     	;# 
  3193  1E31                     	;# 
  3194  1E32                     	;# 
  3195  1E33                     	;# 
  3196  1E34                     	;# 
  3197  1E35                     	;# 
  3198  1E36                     	;# 
  3199  1E37                     	;# 
  3200  1E8F                     	;# 
  3201  1E90                     	;# 
  3202  1E91                     	;# 
  3203  1E92                     	;# 
  3204  1E93                     	;# 
  3205  1E9C                     	;# 
  3206  1EA1                     	;# 
  3207  1EA2                     	;# 
  3208  1EB1                     	;# 
  3209  1EBB                     	;# 
  3210  1EBC                     	;# 
  3211  1EBD                     	;# 
  3212  1EBE                     	;# 
  3213  1EC3                     	;# 
  3214  1EC5                     	;# 
  3215  1EC6                     	;# 
  3216  1EC7                     	;# 
  3217  1EC8                     	;# 
  3218  1EC9                     	;# 
  3219  1ECA                     	;# 
  3220  1ECB                     	;# 
  3221  1ECC                     	;# 
  3222  1ECD                     	;# 
  3223  1ECE                     	;# 
  3224  1F10                     	;# 
  3225  1F11                     	;# 
  3226  1F12                     	;# 
  3227  1F13                     	;# 
  3228  1F14                     	;# 
  3229  1F15                     	;# 
  3230  1F16                     	;# 
  3231  1F17                     	;# 
  3232  1F18                     	;# 
  3233  1F19                     	;# 
  3234  1F1A                     	;# 
  3235  1F1B                     	;# 
  3236  1F1C                     	;# 
  3237  1F1D                     	;# 
  3238  1F1E                     	;# 
  3239  1F1F                     	;# 
  3240  1F20                     	;# 
  3241  1F21                     	;# 
  3242  1F22                     	;# 
  3243  1F23                     	;# 
  3244  1F24                     	;# 
  3245  1F25                     	;# 
  3246  1F26                     	;# 
  3247  1F27                     	;# 
  3248  1F38                     	;# 
  3249  1F39                     	;# 
  3250  1F3A                     	;# 
  3251  1F3B                     	;# 
  3252  1F3C                     	;# 
  3253  1F3D                     	;# 
  3254  1F3E                     	;# 
  3255  1F3F                     	;# 
  3256  1F43                     	;# 
  3257  1F44                     	;# 
  3258  1F45                     	;# 
  3259  1F46                     	;# 
  3260  1F47                     	;# 
  3261  1F48                     	;# 
  3262  1F49                     	;# 
  3263  1F4A                     	;# 
  3264  1F4E                     	;# 
  3265  1F4F                     	;# 
  3266  1F50                     	;# 
  3267  1F51                     	;# 
  3268  1F52                     	;# 
  3269  1F53                     	;# 
  3270  1F54                     	;# 
  3271  1F55                     	;# 
  3272  1F65                     	;# 
  3273  1F68                     	;# 
  3274  1F69                     	;# 
  3275  1F6A                     	;# 
  3276  1F6B                     	;# 
  3277  1FE4                     	;# 
  3278  1FE5                     	;# 
  3279  1FE6                     	;# 
  3280  1FE7                     	;# 
  3281  1FE8                     	;# 
  3282  1FE8                     	;# 
  3283  1FE9                     	;# 
  3284  1FEA                     	;# 
  3285  1FEB                     	;# 
  3286  1FED                     	;# 
  3287  1FEE                     	;# 
  3288  1FEF                     	;_data
  3289                           
  3290                           	psect	idataBANK1
  3291  0002                     __pidataBANK1:	
  3292                           
  3293                           ;initializer for statusView@prevSensorStat
  3294  0002  3401               	retlw	1
  3295                           
  3296                           ;initializer for _g_updateScreen
  3297  0003  3401               	retlw	1
  3298                           
  3299                           	psect	idataBANK2
  3300  218D                     __pidataBANK2:	
  3301                           
  3302                           ;initializer for OLED_print_xy@F7940
  3303  218D  3400               	retlw	0
  3304  218E  3440               	retlw	64
  3305  218F  3414               	retlw	20
  3306  2190  3454               	retlw	84
  3307                           
  3308                           ;initializer for OLED_setCursor@F7932
  3309  2191  3400               	retlw	0
  3310  2192  3440               	retlw	64
  3311  2193  3414               	retlw	20
  3312  2194  3454               	retlw	84
  3313                           
  3314                           	psect	idataBANK3
  3315  1802                     __pidataBANK3:	
  3316                           
  3317                           ;initializer for OLED_loadSpecialChars@F7945
  3318  1802  3418               	retlw	24
  3319  1803  3418               	retlw	24
  3320  1804  3403               	retlw	3
  3321  1805  3404               	retlw	4
  3322  1806  3404               	retlw	4
  3323  1807  3404               	retlw	4
  3324  1808  3403               	retlw	3
  3325  1809  3400               	retlw	0
  3326  180A  3400               	retlw	0
  3327  180B  3400               	retlw	0
  3328  180C  3400               	retlw	0
  3329  180D  3404               	retlw	4
  3330  180E  3400               	retlw	0
  3331  180F  3400               	retlw	0
  3332  1810  3400               	retlw	0
  3333  1811  3400               	retlw	0
  3334  1812  3401               	retlw	1
  3335  1813  3401               	retlw	1
  3336  1814  3405               	retlw	5
  3337  1815  3409               	retlw	9
  3338  1816  341F               	retlw	31
  3339  1817  3408               	retlw	8
  3340  1818  3404               	retlw	4
  3341  1819  3400               	retlw	0
  3342  181A  3400               	retlw	0
  3343  181B  3410               	retlw	16
  3344  181C  3418               	retlw	24
  3345  181D  341C               	retlw	28
  3346  181E  3418               	retlw	24
  3347  181F  3410               	retlw	16
  3348  1820  3400               	retlw	0
  3349  1821  3400               	retlw	0
  3350                           
  3351                           ;initializer for _p_fct
  3352  1822  34CB               	retlw	low _statusView
  3353  1823  3408               	retlw	high _statusView
  3354  1824  34FD               	retlw	low _channelView
  3355  1825  340D               	retlw	high _channelView
  3356  1826  34D4               	retlw	low _channelSetup
  3357  1827  341E               	retlw	high _channelSetup
  3358  1828  34B3               	retlw	low _setOutputPower
  3359  1829  341D               	retlw	high _setOutputPower
  3360  182A  34F9               	retlw	low _setLensDia
  3361  182B  341A               	retlw	high _setLensDia
  3362  182C  342E               	retlw	low _setup
  3363  182D  3407               	retlw	high _setup
  3364  182E  34A2               	retlw	low _setDPOffset
  3365  182F  3418               	retlw	high _setDPOffset
  3366  1830  3434               	retlw	low _setSkyTemp
  3367  1831  3418               	retlw	high _setSkyTemp
  3368  1832  3411               	retlw	low _setFudgeFactor
  3369  1833  3419               	retlw	high _setFudgeFactor
  3370                           
  3371                           	psect	stringtext1
  3372  284C                     __pstringtext1:	
  3373  284C                     _nextStateTbl:	
  3374  284C  3400               	retlw	0
  3375  284D  34FF               	retlw	255
  3376  284E  3401               	retlw	1
  3377  284F  3405               	retlw	5
  3378  2850  3400               	retlw	0
  3379  2851  3401               	retlw	1
  3380  2852  34FF               	retlw	255
  3381  2853  3400               	retlw	0
  3382  2854  3402               	retlw	2
  3383  2855  3401               	retlw	1
  3384  2856  3402               	retlw	2
  3385  2857  3400               	retlw	0
  3386  2858  3403               	retlw	3
  3387  2859  3401               	retlw	1
  3388  285A  3401               	retlw	1
  3389  285B  3402               	retlw	2
  3390  285C  3401               	retlw	1
  3391  285D  3404               	retlw	4
  3392  285E  3401               	retlw	1
  3393  285F  3401               	retlw	1
  3394  2860  3403               	retlw	3
  3395  2861  3400               	retlw	0
  3396  2862  3402               	retlw	2
  3397  2863  3402               	retlw	2
  3398  2864  3402               	retlw	2
  3399  2865  3404               	retlw	4
  3400  2866  3400               	retlw	0
  3401  2867  3402               	retlw	2
  3402  2868  3402               	retlw	2
  3403  2869  3402               	retlw	2
  3404  286A  3405               	retlw	5
  3405  286B  3400               	retlw	0
  3406  286C  3406               	retlw	6
  3407  286D  3400               	retlw	0
  3408  286E  3400               	retlw	0
  3409  286F  3405               	retlw	5
  3410  2870  3401               	retlw	1
  3411  2871  3407               	retlw	7
  3412  2872  3400               	retlw	0
  3413  2873  3400               	retlw	0
  3414  2874  3405               	retlw	5
  3415  2875  3402               	retlw	2
  3416  2876  3408               	retlw	8
  3417  2877  3400               	retlw	0
  3418  2878  3400               	retlw	0
  3419  2879  3406               	retlw	6
  3420  287A  3400               	retlw	0
  3421  287B  3405               	retlw	5
  3422  287C  3405               	retlw	5
  3423  287D  3405               	retlw	5
  3424  287E  3407               	retlw	7
  3425  287F  3400               	retlw	0
  3426  2880  3405               	retlw	5
  3427  2881  3405               	retlw	5
  3428  2882  3405               	retlw	5
  3429  2883  3408               	retlw	8
  3430  2884  3400               	retlw	0
  3431  2885  3405               	retlw	5
  3432  2886  3405               	retlw	5
  3433  2887  3405               	retlw	5
  3434  2888                     __end_of_nextStateTbl:	
  3435                           
  3436                           	psect	stringtext2
  3437  28AD                     __pstringtext2:	
  3438  28AD                     _transition_table:	
  3439  28AD  3400               	retlw	0
  3440  28AE  3404               	retlw	4
  3441  28AF  3401               	retlw	1
  3442  28B0  3400               	retlw	0
  3443  28B1  3482               	retlw	130
  3444  28B2  3400               	retlw	0
  3445  28B3  3401               	retlw	1
  3446  28B4  3400               	retlw	0
  3447  28B5  3402               	retlw	2
  3448  28B6  3403               	retlw	3
  3449  28B7  3401               	retlw	1
  3450  28B8  3400               	retlw	0
  3451  28B9  3402               	retlw	2
  3452  28BA  3403               	retlw	3
  3453  28BB  3400               	retlw	0
  3454  28BC  3480               	retlw	128
  3455  28BD  3445               	retlw	69
  3456  28BE  3404               	retlw	4
  3457  28BF  3400               	retlw	0
  3458  28C0  3400               	retlw	0
  3459  28C1  3405               	retlw	5
  3460  28C2  3404               	retlw	4
  3461  28C3  3406               	retlw	6
  3462  28C4  3400               	retlw	0
  3463  28C5  3405               	retlw	5
  3464  28C6  3400               	retlw	0
  3465  28C7  3406               	retlw	6
  3466  28C8  3440               	retlw	64
  3467  28C9                     __end_of_transition_table:	
  3468                           
  3469                           	psect	stringtext3
  3470  2800                     __pstringtext3:	
  3471  2800                     _stateFuncTbl:	
  3472  2800  3400               	retlw	0
  3473  2801  34CB               	retlw	low _statusView
  3474  2802  3408               	retlw	high _statusView
  3475  2803  3401               	retlw	1
  3476  2804  34FD               	retlw	low _channelView
  3477  2805  340D               	retlw	high _channelView
  3478  2806  3402               	retlw	2
  3479  2807  34D4               	retlw	low _channelSetup
  3480  2808  341E               	retlw	high _channelSetup
  3481  2809  3403               	retlw	3
  3482  280A  34B3               	retlw	low _setOutputPower
  3483  280B  341D               	retlw	high _setOutputPower
  3484  280C  3404               	retlw	4
  3485  280D  34F9               	retlw	low _setLensDia
  3486  280E  341A               	retlw	high _setLensDia
  3487  280F  3405               	retlw	5
  3488  2810  342E               	retlw	low _setup
  3489  2811  3407               	retlw	high _setup
  3490  2812  3406               	retlw	6
  3491  2813  34A2               	retlw	low _setDPOffset
  3492  2814  3418               	retlw	high _setDPOffset
  3493  2815  3407               	retlw	7
  3494  2816  3434               	retlw	low _setSkyTemp
  3495  2817  3418               	retlw	high _setSkyTemp
  3496  2818  3408               	retlw	8
  3497  2819  3411               	retlw	low _setFudgeFactor
  3498  281A  3419               	retlw	high _setFudgeFactor
  3499  281B                     __end_of_stateFuncTbl:	
  3500  000C                     _PORTAbits	set	12
  3501  000B                     _INTCONbits	set	11
  3502  0014                     _TRISCbits	set	20
  3503  0014                     _TRISC	set	20
  3504  0013                     _TRISB	set	19
  3505  0012                     _TRISA	set	18
  3506  000E                     _PORTCbits	set	14
  3507  000B                     _INTCON	set	11
  3508  0018                     _LATAbits	set	24
  3509  001A                     _LATCbits	set	26
  3510  0019                     _LATBbits	set	25
  3511  009E                     _ADCON1	set	158
  3512  009B                     _ADRESL	set	155
  3513  009C                     _ADRESH	set	156
  3514  009D                     _ADCON0bits	set	157
  3515  0119                     _RC1REG	set	281
  3516  011D                     _RC1STAbits	set	285
  3517  011A                     _TX1REG	set	282
  3518  011E                     _TX1STA	set	286
  3519  011D                     _RC1STA	set	285
  3520  011B                     _SPBRGL	set	283
  3521  011F                     _BAUD1CON	set	287
  3522  020C                     _TMR1	set	524
  3523  0211                     _T1CLK	set	529
  3524  020E                     _T1CON	set	526
  3525  059C                     _TMR0	set	1436
  3526  059F                     _T0CON1	set	1439
  3527  059E                     _T0CON0	set	1438
  3528  070F                     _PIR3bits	set	1807
  3529  0719                     _PIE3bits	set	1817
  3530  0710                     _PIR4bits	set	1808
  3531  071A                     _PIE4bits	set	1818
  3532  070C                     _PIR0bits	set	1804
  3533  0716                     _PIE0bits	set	1814
  3534  071A                     _PIE4	set	1818
  3535  0719                     _PIE3	set	1817
  3536  0716                     _PIE0	set	1814
  3537  088F                     _OSCCON3bits	set	2191
  3538  088D                     _OSCCON1	set	2189
  3539  0893                     _OSCFRQ	set	2195
  3540  1ECB                     _RX1DTPPSbits	set	7883
  3541  1F3F                     _IOCAFbits	set	7999
  3542  1F54                     _IOCCN	set	8020
  3543  1F3E                     _IOCAN	set	7998
  3544  1F3D                     _IOCAP	set	7997
  3545  1F4E                     _ANSELC	set	8014
  3546  1F43                     _ANSELB	set	8003
  3547  1F38                     _ANSELA	set	7992
  3548  1F26                     _RC6PPS	set	7974
  3549  281B                     STR_3:	
  3550  281B  3454               	retlw	84	;'T'
  3551  281C  3465               	retlw	101	;'e'
  3552  281D  346D               	retlw	109	;'m'
  3553  281E  3470               	retlw	112	;'p'
  3554  281F  3465               	retlw	101	;'e'
  3555  2820  3472               	retlw	114	;'r'
  3556  2821  3461               	retlw	97	;'a'
  3557  2822  3474               	retlw	116	;'t'
  3558  2823  3475               	retlw	117	;'u'
  3559  2824  3472               	retlw	114	;'r'
  3560  2825  3465               	retlw	101	;'e'
  3561  2826  3420               	retlw	32	;' '
  3562  2827  3452               	retlw	82	;'R'
  3563  2828  3465               	retlw	101	;'e'
  3564  2829  346C               	retlw	108	;'l'
  3565  282A  342E               	retlw	46	;'.'
  3566  282B  3468               	retlw	104	;'h'
  3567  282C  3475               	retlw	117	;'u'
  3568  282D  346D               	retlw	109	;'m'
  3569  282E  3469               	retlw	105	;'i'
  3570  282F  3464               	retlw	100	;'d'
  3571  2830  3469               	retlw	105	;'i'
  3572  2831  3474               	retlw	116	;'t'
  3573  2832  3479               	retlw	121	;'y'
  3574  2833  3444               	retlw	68	;'D'
  3575  2834  3465               	retlw	101	;'e'
  3576  2835  3477               	retlw	119	;'w'
  3577  2836  3470               	retlw	112	;'p'
  3578  2837  346F               	retlw	111	;'o'
  3579  2838  3469               	retlw	105	;'i'
  3580  2839  346E               	retlw	110	;'n'
  3581  283A  3474               	retlw	116	;'t'
  3582  283B  3420               	retlw	32	;' '
  3583  283C  3420               	retlw	32	;' '
  3584  283D  3420               	retlw	32	;' '
  3585  283E  3420               	retlw	32	;' '
  3586  283F  3442               	retlw	66	;'B'
  3587  2840  3461               	retlw	97	;'a'
  3588  2841  3474               	retlw	116	;'t'
  3589  2842  342E               	retlw	46	;'.'
  3590  2843  3420               	retlw	32	;' '
  3591  2844  3420               	retlw	32	;' '
  3592  2845  3420               	retlw	32	;' '
  3593  2846  3450               	retlw	80	;'P'
  3594  2847  346F               	retlw	111	;'o'
  3595  2848  3477               	retlw	119	;'w'
  3596  2849  3465               	retlw	101	;'e'
  3597  284A  3472               	retlw	114	;'r'
  3598  284B  3400               	retlw	0
  3599                           
  3600                           	psect	stringtext4
  3601  2888                     __pstringtext4:	
  3602  2888                     STR_39:	
  3603  2888  3444               	retlw	68	;'D'
  3604  2889  3450               	retlw	80	;'P'
  3605  288A  3420               	retlw	32	;' '
  3606  288B  346F               	retlw	111	;'o'
  3607  288C  3466               	retlw	102	;'f'
  3608  288D  3466               	retlw	102	;'f'
  3609  288E  3473               	retlw	115	;'s'
  3610  288F  3465               	retlw	101	;'e'
  3611  2890  3474               	retlw	116	;'t'
  3612  2891  3420               	retlw	32	;' '
  3613  2892  3420               	retlw	32	;' '
  3614  2893  3420               	retlw	32	;' '
  3615  2894  3453               	retlw	83	;'S'
  3616  2895  346B               	retlw	107	;'k'
  3617  2896  3479               	retlw	121	;'y'
  3618  2897  3420               	retlw	32	;' '
  3619  2898  3474               	retlw	116	;'t'
  3620  2899  3465               	retlw	101	;'e'
  3621  289A  346D               	retlw	109	;'m'
  3622  289B  3470               	retlw	112	;'p'
  3623  289C  342E               	retlw	46	;'.'
  3624  289D  3420               	retlw	32	;' '
  3625  289E  3420               	retlw	32	;' '
  3626  289F  3420               	retlw	32	;' '
  3627  28A0  3446               	retlw	70	;'F'
  3628  28A1  3475               	retlw	117	;'u'
  3629  28A2  3464               	retlw	100	;'d'
  3630  28A3  3467               	retlw	103	;'g'
  3631  28A4  3465               	retlw	101	;'e'
  3632  28A5  3420               	retlw	32	;' '
  3633  28A6  3466               	retlw	102	;'f'
  3634  28A7  3461               	retlw	97	;'a'
  3635  28A8  3463               	retlw	99	;'c'
  3636  28A9  3474               	retlw	116	;'t'
  3637  28AA  346F               	retlw	111	;'o'
  3638  28AB  3472               	retlw	114	;'r'
  3639  28AC  3400               	retlw	0
  3640                           
  3641                           	psect	stringtext5
  3642  28C9                     __pstringtext5:	
  3643  28C9                     STR_22:	
  3644  28C9  344F               	retlw	79	;'O'
  3645  28CA  3475               	retlw	117	;'u'
  3646  28CB  3474               	retlw	116	;'t'
  3647  28CC  3470               	retlw	112	;'p'
  3648  28CD  3475               	retlw	117	;'u'
  3649  28CE  3474               	retlw	116	;'t'
  3650  28CF  3420               	retlw	32	;' '
  3651  28D0  3470               	retlw	112	;'p'
  3652  28D1  346F               	retlw	111	;'o'
  3653  28D2  3477               	retlw	119	;'w'
  3654  28D3  3465               	retlw	101	;'e'
  3655  28D4  3472               	retlw	114	;'r'
  3656  28D5  344C               	retlw	76	;'L'
  3657  28D6  3465               	retlw	101	;'e'
  3658  28D7  346E               	retlw	110	;'n'
  3659  28D8  3473               	retlw	115	;'s'
  3660  28D9  3420               	retlw	32	;' '
  3661  28DA  3464               	retlw	100	;'d'
  3662  28DB  3469               	retlw	105	;'i'
  3663  28DC  3461               	retlw	97	;'a'
  3664  28DD  346D               	retlw	109	;'m'
  3665  28DE  342E               	retlw	46	;'.'
  3666  28DF  3420               	retlw	32	;' '
  3667  28E0  3420               	retlw	32	;' '
  3668  28E1  3400               	retlw	0
  3669                           
  3670                           	psect	stringtext6
  3671  28E2                     __pstringtext6:	
  3672  28E2                     STR_14:	
  3673  28E2  344F               	retlw	79	;'O'
  3674  28E3  3466               	retlw	102	;'f'
  3675  28E4  3466               	retlw	102	;'f'
  3676  28E5  3420               	retlw	32	;' '
  3677  28E6  3420               	retlw	32	;' '
  3678  28E7  3420               	retlw	32	;' '
  3679  28E8  3420               	retlw	32	;' '
  3680  28E9  3420               	retlw	32	;' '
  3681  28EA  3420               	retlw	32	;' '
  3682  28EB  3420               	retlw	32	;' '
  3683  28EC  3420               	retlw	32	;' '
  3684  28ED  3420               	retlw	32	;' '
  3685  28EE  3400               	retlw	0
  3686                           
  3687                           	psect	stringtext7
  3688  28EF                     __pstringtext7:	
  3689  28EF                     STR_19:	
  3690  28EF  3453               	retlw	83	;'S'
  3691  28F0  3468               	retlw	104	;'h'
  3692  28F1  346F               	retlw	111	;'o'
  3693  28F2  3472               	retlw	114	;'r'
  3694  28F3  3474               	retlw	116	;'t'
  3695  28F4  3465               	retlw	101	;'e'
  3696  28F5  3464               	retlw	100	;'d'
  3697  28F6  3421               	retlw	33	;'!'
  3698  28F7  3420               	retlw	32	;' '
  3699  28F8  3420               	retlw	32	;' '
  3700  28F9  3420               	retlw	32	;' '
  3701  28FA  3420               	retlw	32	;' '
  3702  28FB  3400               	retlw	0
  3703                           
  3704                           	psect	stringtext8
  3705  28FC                     __pstringtext8:	
  3706  28FC                     STR_47:	
  3707  28FC  3453               	retlw	83	;'S'
  3708  28FD  346B               	retlw	107	;'k'
  3709  28FE  3479               	retlw	121	;'y'
  3710  28FF  3420               	retlw	32	;' '
  3711  2900  3474               	retlw	116	;'t'
  3712  2901  3465               	retlw	101	;'e'
  3713  2902  346D               	retlw	109	;'m'
  3714  2903  3470               	retlw	112	;'p'
  3715  2904  342E               	retlw	46	;'.'
  3716  2905  3420               	retlw	32	;' '
  3717  2906  3420               	retlw	32	;' '
  3718  2907  3420               	retlw	32	;' '
  3719  2908  3400               	retlw	0
  3720                           
  3721                           	psect	stringtext9
  3722  2909                     __pstringtext9:	
  3723  2909                     STR_44:	
  3724  2909  3444               	retlw	68	;'D'
  3725  290A  3450               	retlw	80	;'P'
  3726  290B  3420               	retlw	32	;' '
  3727  290C  346F               	retlw	111	;'o'
  3728  290D  3466               	retlw	102	;'f'
  3729  290E  3466               	retlw	102	;'f'
  3730  290F  3473               	retlw	115	;'s'
  3731  2910  3465               	retlw	101	;'e'
  3732  2911  3474               	retlw	116	;'t'
  3733  2912  3420               	retlw	32	;' '
  3734  2913  3420               	retlw	32	;' '
  3735  2914  3420               	retlw	32	;' '
  3736  2915  3400               	retlw	0
  3737                           
  3738                           	psect	stringtext10
  3739  2916                     __pstringtext10:	
  3740  2916                     STR_20:	
  3741  2916  344F               	retlw	79	;'O'
  3742  2917  3476               	retlw	118	;'v'
  3743  2918  3465               	retlw	101	;'e'
  3744  2919  3472               	retlw	114	;'r'
  3745  291A  3463               	retlw	99	;'c'
  3746  291B  3475               	retlw	117	;'u'
  3747  291C  3472               	retlw	114	;'r'
  3748  291D  3472               	retlw	114	;'r'
  3749  291E  3465               	retlw	101	;'e'
  3750  291F  346E               	retlw	110	;'n'
  3751  2920  3474               	retlw	116	;'t'
  3752  2921  3421               	retlw	33	;'!'
  3753  2922  3400               	retlw	0
  3754                           
  3755                           	psect	stringtext11
  3756  2923                     __pstringtext11:	
  3757  2923                     STR_18:	
  3758  2923  3444               	retlw	68	;'D'
  3759  2924  3469               	retlw	105	;'i'
  3760  2925  3473               	retlw	115	;'s'
  3761  2926  3463               	retlw	99	;'c'
  3762  2927  346F               	retlw	111	;'o'
  3763  2928  346E               	retlw	110	;'n'
  3764  2929  346E               	retlw	110	;'n'
  3765  292A  3465               	retlw	101	;'e'
  3766  292B  3463               	retlw	99	;'c'
  3767  292C  3474               	retlw	116	;'t'
  3768  292D  3465               	retlw	101	;'e'
  3769  292E  3464               	retlw	100	;'d'
  3770  292F  3400               	retlw	0
  3771                           
  3772                           	psect	stringtext12
  3773  2930                     __pstringtext12:	
  3774  2930                     STR_21:	
  3775  2930  344F               	retlw	79	;'O'
  3776  2931  346E               	retlw	110	;'n'
  3777  2932  3464               	retlw	100	;'d'
  3778  2933  3472               	retlw	114	;'r'
  3779  2934  3465               	retlw	101	;'e'
  3780  2935  3453               	retlw	83	;'S'
  3781  2936  3470               	retlw	112	;'p'
  3782  2937  3465               	retlw	101	;'e'
  3783  2938  3463               	retlw	99	;'c'
  3784  2939  3469               	retlw	105	;'i'
  3785  293A  3461               	retlw	97	;'a'
  3786  293B  346C               	retlw	108	;'l'
  3787  293C  3400               	retlw	0
  3788                           
  3789                           	psect	stringtext13
  3790  293D                     __pstringtext13:	
  3791  293D                     STR_29:	
  3792  293D  344F               	retlw	79	;'O'
  3793  293E  3475               	retlw	117	;'u'
  3794  293F  3474               	retlw	116	;'t'
  3795  2940  3470               	retlw	112	;'p'
  3796  2941  3475               	retlw	117	;'u'
  3797  2942  3474               	retlw	116	;'t'
  3798  2943  3420               	retlw	32	;' '
  3799  2944  3470               	retlw	112	;'p'
  3800  2945  346F               	retlw	111	;'o'
  3801  2946  3477               	retlw	119	;'w'
  3802  2947  3465               	retlw	101	;'e'
  3803  2948  3472               	retlw	114	;'r'
  3804  2949  3400               	retlw	0
  3805                           
  3806                           	psect	stringtext14
  3807  294A                     __pstringtext14:	
  3808  294A                     STR_1:	
  3809  294A  3454               	retlw	84	;'T'
  3810  294B  3455               	retlw	85	;'U'
  3811  294C  3452               	retlw	82	;'R'
  3812  294D  344E               	retlw	78	;'N'
  3813  294E  3449               	retlw	73	;'I'
  3814  294F  344E               	retlw	78	;'N'
  3815  2950  3447               	retlw	71	;'G'
  3816  2951  3420               	retlw	32	;' '
  3817  2952  344F               	retlw	79	;'O'
  3818  2953  3446               	retlw	70	;'F'
  3819  2954  3446               	retlw	70	;'F'
  3820  2955  3400               	retlw	0
  3821                           
  3822                           	psect	stringtext15
  3823  2956                     __pstringtext15:	
  3824  2956                     STR_53:	
  3825  2956  344D               	retlw	77	;'M'
  3826  2957  3465               	retlw	101	;'e'
  3827  2958  346E               	retlw	110	;'n'
  3828  2959  3475               	retlw	117	;'u'
  3829  295A  3420               	retlw	32	;' '
  3830  295B  3465               	retlw	101	;'e'
  3831  295C  3472               	retlw	114	;'r'
  3832  295D  3472               	retlw	114	;'r'
  3833  295E  346F               	retlw	111	;'o'
  3834  295F  3472               	retlw	114	;'r'
  3835  2960  3400               	retlw	0
  3836                           
  3837                           	psect	stringtext16
  3838  2961                     __pstringtext16:	
  3839  2961                     STR_42:	
  3840  2961  3401               	retlw	1
  3841  2962  3420               	retlw	32	;' '
  3842  2963  3420               	retlw	32	;' '
  3843  2964  3420               	retlw	32	;' '
  3844  2965  3420               	retlw	32	;' '
  3845  2966  3420               	retlw	32	;' '
  3846  2967  3420               	retlw	32	;' '
  3847  2968  3420               	retlw	32	;' '
  3848  2969  3420               	retlw	32	;' '
  3849  296A  3400               	retlw	0
  3850                           
  3851                           	psect	stringtext17
  3852  296B                     __pstringtext17:	
  3853  296B                     STR_49:	
  3854  296B  3401               	retlw	1
  3855  296C  3420               	retlw	32	;' '
  3856  296D  3403               	retlw	3
  3857  296E  3420               	retlw	32	;' '
  3858  296F  3420               	retlw	32	;' '
  3859  2970  3420               	retlw	32	;' '
  3860  2971  3420               	retlw	32	;' '
  3861  2972  3420               	retlw	32	;' '
  3862  2973  3400               	retlw	0
  3863                           
  3864                           	psect	stringtext18
  3865  2974                     __pstringtext18:	
  3866  2974                     STR_52:	
  3867  2974  3420               	retlw	32	;' '
  3868  2975  3403               	retlw	3
  3869  2976  3420               	retlw	32	;' '
  3870  2977  3420               	retlw	32	;' '
  3871  2978  3420               	retlw	32	;' '
  3872  2979  3420               	retlw	32	;' '
  3873  297A  3420               	retlw	32	;' '
  3874  297B  3420               	retlw	32	;' '
  3875  297C  3400               	retlw	0
  3876                           
  3877                           	psect	stringtext19
  3878  297D                     __pstringtext19:	
  3879  297D                     STR_27:	
  3880  297D  3457               	retlw	87	;'W'
  3881  297E  3420               	retlw	32	;' '
  3882  297F  346D               	retlw	109	;'m'
  3883  2980  3461               	retlw	97	;'a'
  3884  2981  346E               	retlw	110	;'n'
  3885  2982  3475               	retlw	117	;'u'
  3886  2983  3461               	retlw	97	;'a'
  3887  2984  346C               	retlw	108	;'l'
  3888  2985  3400               	retlw	0
  3889                           
  3890                           	psect	stringtext20
  3891  2986                     __pstringtext20:	
  3892  2986                     STR_38:	
  3893  2986  3420               	retlw	32	;' '
  3894  2987  3469               	retlw	105	;'i'
  3895  2988  346E               	retlw	110	;'n'
  3896  2989  3463               	retlw	99	;'c'
  3897  298A  3468               	retlw	104	;'h'
  3898  298B  3420               	retlw	32	;' '
  3899  298C  3403               	retlw	3
  3900  298D  3400               	retlw	0
  3901                           
  3902                           	psect	stringtext21
  3903  298E                     __pstringtext21:	
  3904  298E                     STR_35:	
  3905  298E  3457               	retlw	87	;'W'
  3906  298F  3420               	retlw	32	;' '
  3907  2990  346D               	retlw	109	;'m'
  3908  2991  3461               	retlw	97	;'a'
  3909  2992  346E               	retlw	110	;'n'
  3910  2993  342E               	retlw	46	;'.'
  3911  2994  3403               	retlw	3
  3912  2995  3400               	retlw	0
  3913                           
  3914                           	psect	stringtext22
  3915  2996                     __pstringtext22:	
  3916  2996                     STR_6:	
  3917  2996  3401               	retlw	1
  3918  2997  3420               	retlw	32	;' '
  3919  2998  3420               	retlw	32	;' '
  3920  2999  3420               	retlw	32	;' '
  3921  299A  3420               	retlw	32	;' '
  3922  299B  3420               	retlw	32	;' '
  3923  299C  3420               	retlw	32	;' '
  3924  299D  3400               	retlw	0
  3925                           
  3926                           	psect	stringtext23
  3927  299E                     __pstringtext23:	
  3928  299E                     STR_24:	
  3929  299E  3420               	retlw	32	;' '
  3930  299F  346F               	retlw	111	;'o'
  3931  29A0  3466               	retlw	102	;'f'
  3932  29A1  3466               	retlw	102	;'f'
  3933  29A2  3420               	retlw	32	;' '
  3934  29A3  3420               	retlw	32	;' '
  3935  29A4  3420               	retlw	32	;' '
  3936  29A5  3400               	retlw	0
  3937                           
  3938                           	psect	stringtext24
  3939  29A6                     __pstringtext24:	
  3940  29A6                     STR_28:	
  3941  29A6  3420               	retlw	32	;' '
  3942  29A7  3469               	retlw	105	;'i'
  3943  29A8  346E               	retlw	110	;'n'
  3944  29A9  3463               	retlw	99	;'c'
  3945  29AA  3468               	retlw	104	;'h'
  3946  29AB  3420               	retlw	32	;' '
  3947  29AC  3420               	retlw	32	;' '
  3948  29AD  3400               	retlw	0
  3949                           
  3950                           	psect	stringtext25
  3951  29AE                     __pstringtext25:	
  3952  29AE                     STR_26:	
  3953  29AE  3420               	retlw	32	;' '
  3954  29AF  3461               	retlw	97	;'a'
  3955  29B0  3475               	retlw	117	;'u'
  3956  29B1  3474               	retlw	116	;'t'
  3957  29B2  346F               	retlw	111	;'o'
  3958  29B3  3420               	retlw	32	;' '
  3959  29B4  3420               	retlw	32	;' '
  3960  29B5  3400               	retlw	0
  3961                           
  3962                           	psect	stringtext26
  3963  29B6                     __pstringtext26:	
  3964  29B6                     STR_31:	
  3965  29B6  3420               	retlw	32	;' '
  3966  29B7  346F               	retlw	111	;'o'
  3967  29B8  3466               	retlw	102	;'f'
  3968  29B9  3466               	retlw	102	;'f'
  3969  29BA  3420               	retlw	32	;' '
  3970  29BB  3403               	retlw	3
  3971  29BC  3400               	retlw	0
  3972                           
  3973                           	psect	stringtext27
  3974  29BD                     __pstringtext27:	
  3975  29BD                     STR_33:	
  3976  29BD  3420               	retlw	32	;' '
  3977  29BE  3461               	retlw	97	;'a'
  3978  29BF  3475               	retlw	117	;'u'
  3979  29C0  3474               	retlw	116	;'t'
  3980  29C1  346F               	retlw	111	;'o'
  3981  29C2  3403               	retlw	3
  3982  29C3  3400               	retlw	0
  3983                           
  3984                           	psect	stringtext28
  3985  29C4                     __pstringtext28:	
  3986  29C4                     STR_45:	
  3987  29C4  3474               	retlw	116	;'t'
  3988  29C5  3465               	retlw	101	;'e'
  3989  29C6  346D               	retlw	109	;'m'
  3990  29C7  3470               	retlw	112	;'p'
  3991  29C8  342E               	retlw	46	;'.'
  3992  29C9  3404               	retlw	4
  3993  29CA  3400               	retlw	0
  3994                           
  3995                           	psect	stringtext29
  3996  29CB                     __pstringtext29:	
  3997  29CB                     STR_7:	
  3998  29CB  3425               	retlw	37	;'%'
  3999  29CC  3420               	retlw	32	;' '
  4000  29CD  3420               	retlw	32	;' '
  4001  29CE  3420               	retlw	32	;' '
  4002  29CF  3420               	retlw	32	;' '
  4003  29D0  3420               	retlw	32	;' '
  4004  29D1  3400               	retlw	0
  4005                           
  4006                           	psect	stringtext30
  4007  29D2                     __pstringtext30:	
  4008  29D2                     STR_40:	
  4009  29D2  3474               	retlw	116	;'t'
  4010  29D3  3465               	retlw	101	;'e'
  4011  29D4  346D               	retlw	109	;'m'
  4012  29D5  3470               	retlw	112	;'p'
  4013  29D6  342E               	retlw	46	;'.'
  4014  29D7  3420               	retlw	32	;' '
  4015  29D8  3400               	retlw	0
  4016                           
  4017                           	psect	stringtext31
  4018  29D9                     __pstringtext31:	
  4019  29D9                     STR_30:	
  4020  29D9  3404               	retlw	4
  4021  29DA  3443               	retlw	67	;'C'
  4022  29DB  3468               	retlw	104	;'h'
  4023  29DC  342E               	retlw	46	;'.'
  4024  29DD  3420               	retlw	32	;' '
  4025  29DE  3400               	retlw	0
  4026                           
  4027                           	psect	stringtext32
  4028  29DF                     __pstringtext32:	
  4029  29DF                     STR_4:	
  4030  29DF  3401               	retlw	1
  4031  29E0  3420               	retlw	32	;' '
  4032  29E1  3402               	retlw	2
  4033  29E2  3400               	retlw	0
  4034                           
  4035                           	psect	stringtext33
  4036  29E3                     __pstringtext33:	
  4037  29E3                     STR_9:	
  4038  29E3  3456               	retlw	86	;'V'
  4039  29E4  3420               	retlw	32	;' '
  4040  29E5  3420               	retlw	32	;' '
  4041  29E6  3400               	retlw	0
  4042                           
  4043                           	psect	stringtext34
  4044  29E7                     __pstringtext34:	
  4045  29E7                     STR_11:	
  4046  29E7  3443               	retlw	67	;'C'
  4047  29E8  3468               	retlw	104	;'h'
  4048  29E9  3420               	retlw	32	;' '
  4049  29EA  3400               	retlw	0
  4050                           
  4051                           	psect	stringtext35
  4052  29EB                     __pstringtext35:	
  4053  29EB                     STR_2:	
  4054  29EB  3449               	retlw	73	;'I'
  4055  29EC  344E               	retlw	78	;'N'
  4056  29ED  3420               	retlw	32	;' '
  4057  29EE  3400               	retlw	0
  4058                           
  4059                           	psect	stringtext36
  4060  29EF                     __pstringtext36:	
  4061  29EF                     STR_46:	
  4062  29EF  3401               	retlw	1
  4063  29F0  3403               	retlw	3
  4064  29F1  3400               	retlw	0
  4065                           
  4066                           	psect	stringtext37
  4067  29F2                     __pstringtext37:	
  4068  29F2                     STR_41:	
  4069  29F2  3401               	retlw	1
  4070  29F3  3420               	retlw	32	;' '
  4071  29F4  3400               	retlw	0
  4072                           
  4073                           	psect	stringtext38
  4074  29F5                     __pstringtext38:	
  4075  29F5                     STR_13:	
  4076  29F5  3422               	retlw	34	;'"'
  4077  29F6  3420               	retlw	32	;' '
  4078  29F7  3400               	retlw	0
  4079                           
  4080                           	psect	stringtext39
  4081  29F8                     __pstringtext39:	
  4082  29F8                     STR_12:	
  4083  29F8  343A               	retlw	58	;':'
  4084  29F9  3420               	retlw	32	;' '
  4085  29FA  3400               	retlw	0
  4086                           
  4087                           	psect	stringtext40
  4088  29FB                     __pstringtext40:	
  4089  29FB                     STR_15:	
  4090  29FB  3457               	retlw	87	;'W'
  4091  29FC  3420               	retlw	32	;' '
  4092  29FD  3400               	retlw	0
  4093                           
  4094                           	psect	stringtext41
  4095  29FE                     __pstringtext41:	
  4096  29FE                     STR_5:	
  4097  29FE  3401               	retlw	1
  4098  29FF  3400               	retlw	0
  4099                           
  4100                           	psect	stringtext42
  4101  2A00                     __pstringtext42:	
  4102  2A00                     STR_10:	
  4103  2A00  3457               	retlw	87	;'W'
  4104  2A01  3400               	retlw	0
  4105                           
  4106                           	psect	stringtext43
  4107  0000                     __pstringtext43:	
  4108  29C9                     
  4109                           ; #config settings
  4110  0000                     
  4111                           	psect	cinit
  4112  006A                     start_initialization:	
  4113  006A                     __initialization:		;BIGRAM
  4114                           
  4115                           ; Initialize objects allocated to BANK1
  4116  006A  0141               	movlb	1	; select bank1
  4117  006B  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  4118  006E  00EE               	movwf	__pdataBANK1& (0+127)
  4119  006F  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4120  0072  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  4121                           
  4122                           ; Initialize objects allocated to BANK2
  4123  0073  308D               	movlw	low __pidataBANK2
  4124  0074  0084               	movwf	4
  4125  0075  30A1               	movlw	(high __pidataBANK2)| (0+128)
  4126  0076  0085               	movwf	5
  4127  0077  3063               	movlw	low __pdataBANK2
  4128  0078  0086               	movwf	6
  4129  0079  3001               	movlw	high __pdataBANK2
  4130  007A  0087               	movwf	7
  4131  007B  3000               	movlw	0
  4132  007C  00FF               	movwf	btemp+1
  4133  007D  3008               	movlw	8
  4134  007E  31A1  21F4  3180   	fcall	init_ram
  4135                           
  4136                           ; Initialize objects allocated to BANK3
  4137  0081  3002               	movlw	low __pidataBANK3
  4138  0082  0084               	movwf	4
  4139  0083  3098               	movlw	(high __pidataBANK3)| (0+128)
  4140  0084  0085               	movwf	5
  4141  0085  30A0               	movlw	low __pdataBANK3
  4142  0086  0086               	movwf	6
  4143  0087  3001               	movlw	high __pdataBANK3
  4144  0088  0087               	movwf	7
  4145  0089  3000               	movlw	0
  4146  008A  00FF               	movwf	btemp+1
  4147  008B  3032               	movlw	50
  4148  008C  31A1  21F4  3180   	fcall	init_ram
  4149                           
  4150                           ; Clear objects allocated to BIGRAM
  4151  008F  3043               	movlw	low (0+10051)
  4152  0090  0084               	movwf	4
  4153  0091  3027               	movlw	high (0+10051)
  4154  0092  0085               	movwf	5
  4155  0093  30AD               	movlw	173
  4156  0094  00FE               	movwf	btemp
  4157  0095  3000               	movlw	0
  4158  0096  00FF               	movwf	btemp+1
  4159  0097  31A1  21E8  3180   	fcall	clear_ram0
  4160                           
  4161                           ; Clear objects allocated to COMMON
  4162  009A  01FC               	clrf	__pbssCOMMON& (0+127)
  4163  009B  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  4164                           
  4165                           ; Clear objects allocated to BANK1
  4166  009C  30DE               	movlw	low __pbssBANK1
  4167  009D  0084               	movwf	4
  4168  009E  3000               	movlw	high __pbssBANK1
  4169  009F  0085               	movwf	5
  4170  00A0  3010               	movlw	16
  4171  00A1  00FE               	movwf	btemp
  4172  00A2  3000               	movlw	0
  4173  00A3  00FF               	movwf	btemp+1
  4174  00A4  31A1  21E8  3180   	fcall	clear_ram0
  4175                           
  4176                           ; Clear objects allocated to BANK2
  4177  00A7  3020               	movlw	low __pbssBANK2
  4178  00A8  0084               	movwf	4
  4179  00A9  3001               	movlw	high __pbssBANK2
  4180  00AA  0085               	movwf	5
  4181  00AB  3043               	movlw	67
  4182  00AC  00FE               	movwf	btemp
  4183  00AD  3000               	movlw	0
  4184  00AE  00FF               	movwf	btemp+1
  4185  00AF  31A1  21E8         	fcall	clear_ram0
  4186  00B1                     end_of_initialization:	
  4187                           ;End of C runtime variable initialization code
  4188                           
  4189  00B1                     __end_of__initialization:	
  4190  00B1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4191  00B2  0140               	movlb	0
  4192  00B3  319B  2B84         	ljmp	_main	;jump to C main() function
  4193                           
  4194                           	psect	bssCOMMON
  4195  007C                     __pbssCOMMON:	
  4196  007C                     _rxCount:	
  4197  007C                     	ds	1
  4198  007D                     _curRotState:	
  4199  007D                     	ds	1
  4200                           
  4201                           	psect	bssBANK1
  4202  00DE                     __pbssBANK1:	
  4203  00DE                     paging@lastDir:	
  4204  00DE                     	ds	1
  4205  00DF                     menu@state:	
  4206  00DF                     	ds	1
  4207  00E0                     setup@page:	
  4208  00E0                     	ds	1
  4209  00E1                     channelSetup@page:	
  4210  00E1                     	ds	1
  4211  00E2                     channelView@page:	
  4212  00E2                     	ds	1
  4213  00E3                     statusView@page:	
  4214  00E3                     	ds	1
  4215  00E4                     _selectedChannel:	
  4216  00E4                     	ds	1
  4217  00E5                     uartReceiveISR@checksum:	
  4218  00E5                     	ds	1
  4219  00E6                     _dataReadyFlag:	
  4220  00E6                     	ds	1
  4221  00E7                     _pbState:	
  4222  00E7                     	ds	1
  4223  00E8                     _rotDir:	
  4224  00E8                     	ds	1
  4225  00E9                     _tick10ms:	
  4226  00E9                     	ds	1
  4227  00EA                     getAvgChannelCurrents@busy:	
  4228  00EA                     	ds	1
  4229  00EB                     getAvgChannelCurrents@samples:	
  4230  00EB                     	ds	1
  4231  00EC                     getAvgChannelCurrents@channel:	
  4232  00EC                     	ds	1
  4233  00ED                     checkSensor@state:	
  4234  00ED                     	ds	1
  4235                           
  4236                           	psect	dataBANK1
  4237  00EE                     __pdataBANK1:	
  4238  00EE                     statusView@prevSensorStat:	
  4239  00EE                     	ds	1
  4240  00EF                     _g_updateScreen:	
  4241  00EF                     	ds	1
  4242                           
  4243                           	psect	bssBANK2
  4244  0120                     __pbssBANK2:	
  4245  0120                     _tick100ms:	
  4246  0120                     	ds	4
  4247  0124                     checkSensor@sensorTimeout:	
  4248  0124                     	ds	4
  4249  0128                     checkSensor@sensorUpdateInterval:	
  4250  0128                     	ds	4
  4251  012C                     convertAnalogValues@avgI:	
  4252  012C                     	ds	2
  4253  012E                     convertAnalogValues@avgV:	
  4254  012E                     	ds	2
  4255  0130                     convertAnalogValues@avgT:	
  4256  0130                     	ds	2
  4257  0132                     getAvgChannelCurrents@avg:	
  4258  0132                     	ds	2
  4259  0134                     _rxOErrCount:	
  4260  0134                     	ds	1
  4261  0135                     _rxFErrCount:	
  4262  0135                     	ds	1
  4263  0136                     uartReceiveISR@buffer:	
  4264  0136                     	ds	20
  4265  014A                     _dataPacket:	
  4266  014A                     	ds	15
  4267  0159                     _str:	
  4268  0159                     	ds	10
  4269                           
  4270                           	psect	dataBANK2
  4271  0163                     __pdataBANK2:	
  4272  0163                     OLED_print_xy@F7940:	
  4273  0163                     	ds	4
  4274  0167                     OLED_setCursor@F7932:	
  4275  0167                     	ds	4
  4276                           
  4277                           	psect	dataBANK3
  4278  01A0                     __pdataBANK3:	
  4279  01A0                     OLED_loadSpecialChars@F7945:	
  4280  01A0                     	ds	32
  4281  01C0                     _p_fct:	
  4282  01C0                     	ds	18
  4283                           
  4284                           	psect	inittext
  4285  21F4                     init_ram:	
  4286  21F4  00FE               	movwf	126
  4287  21F5                     initloop:	
  4288  21F5  0012               	moviw fsr0++
  4289  21F6  001E               	movwi fsr1++
  4290  21F7  3001               	movlw	1
  4291  21F8  02FE               	subwf	126,f
  4292  21F9  3000               	movlw	0
  4293  21FA  3BFF               	subwfb	127,f
  4294  21FB  087F               	movf	127,w
  4295  21FC  047E               	iorwf	126,w
  4296  21FD  1903               	btfsc	3,2
  4297  21FE  3400               	retlw	0
  4298  21FF  29F5               	goto	initloop
  4299                           
  4300                           	psect	clrtext
  4301  21E8                     clear_ram0:	
  4302                           ;	Called with FSR0 containing the base address, and
  4303                           ;	btemp/btemp+1 has the size to clear
  4304                           
  4305  21E8  0064               	clrwdt	;clear the watchdog before getting into this loop
  4306  21E9                     clrloop0:	
  4307  21E9  0180               	clrf	0	;clear RAM location pointed to by FSR
  4308  21EA  3101               	addfsr 0,1
  4309  21EB  3001               	movlw	1
  4310  21EC  02FE               	subwf	126,f
  4311  21ED  3000               	movlw	0
  4312  21EE  3BFF               	subwfb	127,f
  4313  21EF  087F               	movf	127,w
  4314  21F0  047E               	iorwf	126,w
  4315  21F1  1903               	btfsc	3,2
  4316  21F2  3400               	retlw	0	;all done for this memory range, return
  4317  21F3  29E9               	goto	clrloop0	;have we reached the end yet?
  4318                           
  4319                           	psect	cstackBANK1
  4320  00A0                     __pcstackBANK1:	
  4321  00A0                     ?_spinInput:	
  4322  00A0                     ??___fltol:	
  4323                           ; 1 bytes @ 0x0
  4324                           
  4325  00A0                     spinInput@input:	
  4326                           ; 1 bytes @ 0x0
  4327                           
  4328  00A0                     calcRequiredPower@p:	
  4329                           ; 2 bytes @ 0x0
  4330                           
  4331                           
  4332                           ; 4 bytes @ 0x0
  4333  00A0                     	ds	2
  4334  00A2                     spinInput@min:	
  4335                           
  4336                           ; 4 bytes @ 0x2
  4337  00A2                     	ds	2
  4338  00A4                     calcRequiredPower@Rth:	
  4339                           
  4340                           ; 4 bytes @ 0x4
  4341  00A4                     	ds	1
  4342  00A5                     ??_getAvgChannelCurrents:	
  4343  00A5                     ?_itoa:	
  4344                           ; 1 bytes @ 0x5
  4345                           
  4346  00A5                     ?_ftoa:	
  4347                           ; 1 bytes @ 0x5
  4348                           
  4349  00A5                     itoa@str:	
  4350                           ; 1 bytes @ 0x5
  4351                           
  4352  00A5                     ftoa@fValue:	
  4353                           ; 2 bytes @ 0x5
  4354                           
  4355                           
  4356                           ; 4 bytes @ 0x5
  4357  00A5                     	ds	1
  4358  00A6                     spinInput@max:	
  4359                           
  4360                           ; 4 bytes @ 0x6
  4361  00A6                     	ds	1
  4362  00A7                     itoa@value:	
  4363                           
  4364                           ; 1 bytes @ 0x7
  4365  00A7                     	ds	1
  4366  00A8                     itoa@width:	
  4367  00A8                     _calcRequiredPower$2139:	
  4368                           ; 1 bytes @ 0x8
  4369                           
  4370                           
  4371                           ; 4 bytes @ 0x8
  4372  00A8                     	ds	1
  4373  00A9                     ??_itoa:	
  4374  00A9                     ftoa@width:	
  4375                           ; 1 bytes @ 0x9
  4376                           
  4377  00A9                     getAvgChannelCurrents@adc:	
  4378                           ; 1 bytes @ 0x9
  4379                           
  4380                           
  4381                           ; 2 bytes @ 0x9
  4382  00A9                     	ds	1
  4383  00AA                     ftoa@prec:	
  4384  00AA                     spinInput@step:	
  4385                           ; 1 bytes @ 0xA
  4386                           
  4387                           
  4388                           ; 4 bytes @ 0xA
  4389  00AA                     	ds	1
  4390  00AB                     ftoa@len:	
  4391  00AB                     getAvgChannelCurrents@current:	
  4392                           ; 1 bytes @ 0xB
  4393                           
  4394                           
  4395                           ; 4 bytes @ 0xB
  4396  00AB                     	ds	1
  4397  00AC                     ftoa@sign:	
  4398  00AC                     _calcRequiredPower$2140:	
  4399                           ; 1 bytes @ 0xC
  4400                           
  4401                           
  4402                           ; 4 bytes @ 0xC
  4403  00AC                     	ds	1
  4404  00AD                     ftoa@intValue:	
  4405                           
  4406                           ; 1 bytes @ 0xD
  4407  00AD                     	ds	1
  4408  00AE                     ftoa@w:	
  4409                           
  4410                           ; 1 bytes @ 0xE
  4411  00AE                     	ds	1
  4412  00AF                     ftoa@pos:	
  4413  00AF                     getAvgChannelCurrents@chData:	
  4414                           ; 1 bytes @ 0xF
  4415                           
  4416                           
  4417                           ; 2 bytes @ 0xF
  4418  00AF                     	ds	1
  4419  00B0                     ?_systemCheck:	
  4420  00B0                     ftoa@str:	
  4421                           ; 1 bytes @ 0x10
  4422                           
  4423  00B0                     systemCheck@data:	
  4424                           ; 1 bytes @ 0x10
  4425                           
  4426  00B0                     _calcRequiredPower$2141:	
  4427                           ; 2 bytes @ 0x10
  4428                           
  4429                           
  4430                           ; 4 bytes @ 0x10
  4431  00B0                     	ds	1
  4432  00B1                     ?_statusView:	
  4433  00B1                     ?_channelView:	
  4434                           ; 1 bytes @ 0x11
  4435                           
  4436  00B1                     ?_channelSetup:	
  4437                           ; 1 bytes @ 0x11
  4438                           
  4439  00B1                     ?_setOutputPower:	
  4440                           ; 1 bytes @ 0x11
  4441                           
  4442  00B1                     ?_setLensDia:	
  4443                           ; 1 bytes @ 0x11
  4444                           
  4445  00B1                     ?_setup:	
  4446                           ; 1 bytes @ 0x11
  4447                           
  4448  00B1                     ?_setDPOffset:	
  4449                           ; 1 bytes @ 0x11
  4450                           
  4451  00B1                     ?_setSkyTemp:	
  4452                           ; 1 bytes @ 0x11
  4453                           
  4454  00B1                     ?_setFudgeFactor:	
  4455                           ; 1 bytes @ 0x11
  4456                           
  4457  00B1                     statusView@data:	
  4458                           ; 1 bytes @ 0x11
  4459                           
  4460  00B1                     channelView@data:	
  4461                           ; 2 bytes @ 0x11
  4462                           
  4463  00B1                     channelSetup@data:	
  4464                           ; 2 bytes @ 0x11
  4465                           
  4466  00B1                     setOutputPower@data:	
  4467                           ; 2 bytes @ 0x11
  4468                           
  4469  00B1                     setLensDia@data:	
  4470                           ; 2 bytes @ 0x11
  4471                           
  4472  00B1                     setup@data:	
  4473                           ; 2 bytes @ 0x11
  4474                           
  4475  00B1                     setDPOffset@data:	
  4476                           ; 2 bytes @ 0x11
  4477                           
  4478  00B1                     setSkyTemp@data:	
  4479                           ; 2 bytes @ 0x11
  4480                           
  4481  00B1                     setFudgeFactor@data:	
  4482                           ; 2 bytes @ 0x11
  4483                           
  4484                           
  4485                           ; 2 bytes @ 0x11
  4486  00B1                     	ds	1
  4487  00B2                     ??_systemCheck:	
  4488                           
  4489                           ; 1 bytes @ 0x12
  4490  00B2                     	ds	1
  4491  00B3                     ??_statusView:	
  4492  00B3                     ??_channelView:	
  4493                           ; 1 bytes @ 0x13
  4494                           
  4495  00B3                     ??_channelSetup:	
  4496                           ; 1 bytes @ 0x13
  4497                           
  4498  00B3                     ??_setOutputPower:	
  4499                           ; 1 bytes @ 0x13
  4500                           
  4501  00B3                     ??_setLensDia:	
  4502                           ; 1 bytes @ 0x13
  4503                           
  4504  00B3                     ??_setup:	
  4505                           ; 1 bytes @ 0x13
  4506                           
  4507  00B3                     ??_setDPOffset:	
  4508                           ; 1 bytes @ 0x13
  4509                           
  4510  00B3                     ??_setSkyTemp:	
  4511                           ; 1 bytes @ 0x13
  4512                           
  4513  00B3                     ??_setFudgeFactor:	
  4514                           ; 1 bytes @ 0x13
  4515                           
  4516                           
  4517                           ; 1 bytes @ 0x13
  4518  00B3                     	ds	1
  4519  00B4                     systemCheck@str:	
  4520  00B4                     _calcRequiredPower$2142:	
  4521                           ; 3 bytes @ 0x14
  4522                           
  4523                           
  4524                           ; 4 bytes @ 0x14
  4525  00B4                     	ds	3
  4526  00B7                     systemCheck@n:	
  4527  00B7                     channelSetup@chData:	
  4528                           ; 1 bytes @ 0x17
  4529                           
  4530  00B7                     setOutputPower@chData:	
  4531                           ; 2 bytes @ 0x17
  4532                           
  4533                           
  4534                           ; 2 bytes @ 0x17
  4535  00B7                     	ds	1
  4536  00B8                     _calcRequiredPower$2143:	
  4537                           
  4538                           ; 4 bytes @ 0x18
  4539  00B8                     	ds	1
  4540  00B9                     _channelView$1227:	
  4541                           
  4542                           ; 2 bytes @ 0x19
  4543  00B9                     	ds	2
  4544  00BB                     channelView@n:	
  4545                           
  4546                           ; 1 bytes @ 0x1B
  4547  00BB                     	ds	1
  4548  00BC                     ?_menu:	
  4549  00BC                     menu@data:	
  4550                           ; 1 bytes @ 0x1C
  4551                           
  4552  00BC                     _calcRequiredPower$2144:	
  4553                           ; 2 bytes @ 0x1C
  4554                           
  4555                           
  4556                           ; 4 bytes @ 0x1C
  4557  00BC                     	ds	2
  4558  00BE                     ??_menu:	
  4559                           
  4560                           ; 1 bytes @ 0x1E
  4561  00BE                     	ds	2
  4562  00C0                     calcRequiredPower@d:	
  4563                           
  4564                           ; 4 bytes @ 0x20
  4565  00C0                     	ds	2
  4566  00C2                     menu@page:	
  4567                           
  4568                           ; 1 bytes @ 0x22
  4569  00C2                     	ds	1
  4570  00C3                     menu@pb:	
  4571                           
  4572                           ; 1 bytes @ 0x23
  4573  00C3                     	ds	1
  4574  00C4                     menu@func:	
  4575  00C4                     calcRequiredPower@phi:	
  4576                           ; 2 bytes @ 0x24
  4577                           
  4578                           
  4579                           ; 4 bytes @ 0x24
  4580  00C4                     	ds	2
  4581  00C6                     menu@nextState:	
  4582                           
  4583                           ; 1 bytes @ 0x26
  4584  00C6                     	ds	2
  4585  00C8                     calcRequiredPower@A:	
  4586                           
  4587                           ; 4 bytes @ 0x28
  4588  00C8                     	ds	4
  4589  00CC                     _calcRequiredPower$2138:	
  4590                           
  4591                           ; 4 bytes @ 0x2C
  4592  00CC                     	ds	4
  4593  00D0                     calcRequiredPower@T1:	
  4594                           
  4595                           ; 4 bytes @ 0x30
  4596  00D0                     	ds	4
  4597  00D4                     calcRequiredPower@T2:	
  4598                           
  4599                           ; 4 bytes @ 0x34
  4600  00D4                     	ds	4
  4601  00D8                     calcRequiredPower@n:	
  4602                           
  4603                           ; 1 bytes @ 0x38
  4604  00D8                     	ds	1
  4605  00D9                     ??_main:	
  4606                           
  4607                           ; 1 bytes @ 0x39
  4608  00D9                     	ds	1
  4609  00DA                     main@checkInt:	
  4610                           
  4611                           ; 4 bytes @ 0x3A
  4612  00DA                     	ds	4
  4613                           
  4614                           	psect	cstackCOMMON
  4615  0070                     __pcstackCOMMON:	
  4616  0070                     ?_initialize:	
  4617  0070                     ?_OLED_init:	
  4618                           ; 1 bytes @ 0x0
  4619                           
  4620  0070                     ?_OLED_loadSpecialChars:	
  4621                           ; 1 bytes @ 0x0
  4622                           
  4623  0070                     ?_OLED_returnHome:	
  4624                           ; 1 bytes @ 0x0
  4625                           
  4626  0070                     ?_OLED_clearDisplay:	
  4627                           ; 1 bytes @ 0x0
  4628                           
  4629  0070                     ?_error:	
  4630                           ; 1 bytes @ 0x0
  4631                           
  4632  0070                     ?_OLED_Off:	
  4633                           ; 1 bytes @ 0x0
  4634                           
  4635  0070                     ?_uartSendByte:	
  4636                           ; 1 bytes @ 0x0
  4637                           
  4638  0070                     ?_uartReset:	
  4639                           ; 1 bytes @ 0x0
  4640                           
  4641  0070                     ?_uartIsDataReady:	
  4642                           ; 1 bytes @ 0x0
  4643                           
  4644  0070                     ?_getDataPacket:	
  4645                           ; 1 bytes @ 0x0
  4646                           
  4647  0070                     ?_OLED_command:	
  4648                           ; 1 bytes @ 0x0
  4649                           
  4650  0070                     ?_pushButtonISR:	
  4651                           ; 1 bytes @ 0x0
  4652                           
  4653  0070                     ??_pushButtonISR:	
  4654                           ; 1 bytes @ 0x0
  4655                           
  4656  0070                     ?_rotISR:	
  4657                           ; 1 bytes @ 0x0
  4658                           
  4659  0070                     ??_rotISR:	
  4660                           ; 1 bytes @ 0x0
  4661                           
  4662  0070                     ?_uartReceiveISR:	
  4663                           ; 1 bytes @ 0x0
  4664                           
  4665  0070                     ?_strncpy:	
  4666                           ; 1 bytes @ 0x0
  4667                           
  4668  0070                     ?_returnToPage:	
  4669                           ; 1 bytes @ 0x0
  4670                           
  4671  0070                     ?_menuError:	
  4672                           ; 1 bytes @ 0x0
  4673                           
  4674  0070                     ?_main:	
  4675                           ; 1 bytes @ 0x0
  4676                           
  4677  0070                     ?_OLED_pulseEnable:	
  4678                           ; 1 bytes @ 0x0
  4679                           
  4680  0070                     ?_OLED_write4bits:	
  4681                           ; 1 bytes @ 0x0
  4682                           
  4683  0070                     ?_OLED_waitForReady:	
  4684                           ; 1 bytes @ 0x0
  4685                           
  4686  0070                     ?_OLED_write:	
  4687                           ; 1 bytes @ 0x0
  4688                           
  4689  0070                     ?_OLED_scrollDisplayLeft:	
  4690                           ; 1 bytes @ 0x0
  4691                           
  4692  0070                     ?_OLED_scrollDisplayRight:	
  4693                           ; 1 bytes @ 0x0
  4694                           
  4695  0070                     ?_get10msTick:	
  4696                           ; 1 bytes @ 0x0
  4697                           
  4698  0070                     ??_get10msTick:	
  4699                           ; 1 bytes @ 0x0
  4700                           
  4701  0070                     ?_reset10msTick:	
  4702                           ; 1 bytes @ 0x0
  4703                           
  4704  0070                     ??_reset10msTick:	
  4705                           ; 1 bytes @ 0x0
  4706                           
  4707  0070                     ?_ISR:	
  4708                           ; 1 bytes @ 0x0
  4709                           
  4710  0070                     ?_getRotDir:	
  4711                           ; 1 bytes @ 0x0
  4712                           
  4713  0070                     ?_getPB:	
  4714                           ; 1 bytes @ 0x0
  4715                           
  4716  0070                     error@error:	
  4717                           ; 1 bytes @ 0x0
  4718                           
  4719  0070                     strncpy@s:	
  4720                           ; 1 bytes @ 0x0
  4721                           
  4722                           
  4723                           ; 1 bytes @ 0x0
  4724  0070                     	ds	1
  4725  0071                     pushButtonISR@time:	
  4726  0071                     strncpy@n:	
  4727                           ; 1 bytes @ 0x1
  4728                           
  4729                           
  4730                           ; 2 bytes @ 0x1
  4731  0071                     	ds	2
  4732  0073                     ??_strncpy:	
  4733                           
  4734                           ; 1 bytes @ 0x3
  4735  0073                     	ds	1
  4736  0074                     strncpy@d:	
  4737                           
  4738                           ; 1 bytes @ 0x4
  4739  0074                     	ds	1
  4740  0075                     strncpy@cp:	
  4741                           
  4742                           ; 1 bytes @ 0x5
  4743  0075                     	ds	1
  4744  0076                     ??_uartReceiveISR:	
  4745                           
  4746                           ; 1 bytes @ 0x6
  4747  0076                     	ds	1
  4748  0077                     rotISR@input:	
  4749                           
  4750                           ; 1 bytes @ 0x7
  4751  0077                     	ds	1
  4752  0078                     ??_ISR:	
  4753                           
  4754                           ; 1 bytes @ 0x8
  4755  0078                     	ds	4
  4756                           
  4757                           	psect	cstackBANK0
  4758  0020                     __pcstackBANK0:	
  4759  0020                     ?___fleq:	
  4760  0020                     ?___flge:	
  4761                           ; 1 bit 
  4762                           
  4763  0020                     ??_initialize:	
  4764                           ; 1 bit 
  4765                           
  4766  0020                     ?_initGlobalData:	
  4767                           ; 1 bytes @ 0x0
  4768                           
  4769  0020                     ??_error:	
  4770                           ; 1 bytes @ 0x0
  4771                           
  4772  0020                     ??_uartSendByte:	
  4773                           ; 1 bytes @ 0x0
  4774                           
  4775  0020                     ??_uartReset:	
  4776                           ; 1 bytes @ 0x0
  4777                           
  4778  0020                     ??_uartIsDataReady:	
  4779                           ; 1 bytes @ 0x0
  4780                           
  4781  0020                     ??_getDataPacket:	
  4782                           ; 1 bytes @ 0x0
  4783                           
  4784  0020                     ?_setSwitch:	
  4785                           ; 1 bytes @ 0x0
  4786                           
  4787  0020                     ??_OLED_pulseEnable:	
  4788                           ; 1 bytes @ 0x0
  4789                           
  4790  0020                     ??_OLED_write4bits:	
  4791                           ; 1 bytes @ 0x0
  4792                           
  4793  0020                     ??_OLED_waitForReady:	
  4794                           ; 1 bytes @ 0x0
  4795                           
  4796  0020                     ??_getRotDir:	
  4797                           ; 1 bytes @ 0x0
  4798                           
  4799  0020                     ??_getPB:	
  4800                           ; 1 bytes @ 0x0
  4801                           
  4802  0020                     ?___bmul:	
  4803                           ; 1 bytes @ 0x0
  4804                           
  4805  0020                     ?__Umul8_16:	
  4806                           ; 1 bytes @ 0x0
  4807                           
  4808  0020                     ?_adcGetConversion:	
  4809                           ; 2 bytes @ 0x0
  4810                           
  4811  0020                     ?___wmul:	
  4812                           ; 2 bytes @ 0x0
  4813                           
  4814  0020                     ?___awdiv:	
  4815                           ; 2 bytes @ 0x0
  4816                           
  4817  0020                     ?___awmod:	
  4818                           ; 2 bytes @ 0x0
  4819                           
  4820  0020                     ?_timeNow:	
  4821                           ; 2 bytes @ 0x0
  4822                           
  4823  0020                     ?___lmul:	
  4824                           ; 4 bytes @ 0x0
  4825                           
  4826  0020                     setSwitch@state:	
  4827                           ; 4 bytes @ 0x0
  4828                           
  4829  0020                     OLED_waitForReady@busy:	
  4830                           ; 1 bytes @ 0x0
  4831                           
  4832  0020                     uartSendByte@s:	
  4833                           ; 1 bytes @ 0x0
  4834                           
  4835  0020                     ___bmul@multiplicand:	
  4836                           ; 1 bytes @ 0x0
  4837                           
  4838  0020                     __Umul8_16@multiplicand:	
  4839                           ; 1 bytes @ 0x0
  4840                           
  4841  0020                     initGlobalData@data:	
  4842                           ; 1 bytes @ 0x0
  4843                           
  4844  0020                     ___wmul@multiplier:	
  4845                           ; 2 bytes @ 0x0
  4846                           
  4847  0020                     ___awdiv@divisor:	
  4848                           ; 2 bytes @ 0x0
  4849                           
  4850  0020                     ___awmod@divisor:	
  4851                           ; 2 bytes @ 0x0
  4852                           
  4853  0020                     ___lmul@multiplier:	
  4854                           ; 2 bytes @ 0x0
  4855                           
  4856  0020                     ___fleq@ff1:	
  4857                           ; 4 bytes @ 0x0
  4858                           
  4859  0020                     ___flge@ff1:	
  4860                           ; 4 bytes @ 0x0
  4861                           
  4862                           
  4863                           ; 4 bytes @ 0x0
  4864  0020                     	ds	1
  4865  0021                     ??_setSwitch:	
  4866  0021                     ??___bmul:	
  4867                           ; 1 bytes @ 0x1
  4868                           
  4869  0021                     setSwitch@channel:	
  4870                           ; 1 bytes @ 0x1
  4871                           
  4872  0021                     getRotDir@ret:	
  4873                           ; 1 bytes @ 0x1
  4874                           
  4875  0021                     getPB@ret:	
  4876                           ; 1 bytes @ 0x1
  4877                           
  4878  0021                     uartIsDataReady@ret:	
  4879                           ; 1 bytes @ 0x1
  4880                           
  4881                           
  4882                           ; 1 bytes @ 0x1
  4883  0021                     	ds	1
  4884  0022                     ??_initGlobalData:	
  4885  0022                     ??__Umul8_16:	
  4886                           ; 1 bytes @ 0x2
  4887                           
  4888  0022                     ??_adcGetConversion:	
  4889                           ; 1 bytes @ 0x2
  4890                           
  4891  0022                     OLED_write4bits@value:	
  4892                           ; 1 bytes @ 0x2
  4893                           
  4894  0022                     ___bmul@product:	
  4895                           ; 1 bytes @ 0x2
  4896                           
  4897  0022                     ___wmul@multiplicand:	
  4898                           ; 1 bytes @ 0x2
  4899                           
  4900  0022                     ___awdiv@dividend:	
  4901                           ; 2 bytes @ 0x2
  4902                           
  4903  0022                     ___awmod@dividend:	
  4904                           ; 2 bytes @ 0x2
  4905                           
  4906                           
  4907                           ; 2 bytes @ 0x2
  4908  0022                     	ds	1
  4909  0023                     ?_OLED_send:	
  4910  0023                     adcGetConversion@channel:	
  4911                           ; 1 bytes @ 0x3
  4912                           
  4913  0023                     OLED_send@mode:	
  4914                           ; 1 bytes @ 0x3
  4915                           
  4916  0023                     ___bmul@multiplier:	
  4917                           ; 1 bytes @ 0x3
  4918                           
  4919                           
  4920                           ; 1 bytes @ 0x3
  4921  0023                     	ds	1
  4922  0024                     ??_timeNow:	
  4923  0024                     ??_OLED_send:	
  4924                           ; 1 bytes @ 0x4
  4925                           
  4926  0024                     ??___wmul:	
  4927                           ; 1 bytes @ 0x4
  4928                           
  4929  0024                     ??___awdiv:	
  4930                           ; 1 bytes @ 0x4
  4931                           
  4932  0024                     ??___awmod:	
  4933                           ; 1 bytes @ 0x4
  4934                           
  4935  0024                     ?_timeSince:	
  4936                           ; 1 bytes @ 0x4
  4937                           
  4938  0024                     ___wmul@product:	
  4939                           ; 4 bytes @ 0x4
  4940                           
  4941  0024                     __Umul8_16@product:	
  4942                           ; 2 bytes @ 0x4
  4943                           
  4944  0024                     timeSince@since:	
  4945                           ; 2 bytes @ 0x4
  4946                           
  4947  0024                     ___lmul@multiplicand:	
  4948                           ; 4 bytes @ 0x4
  4949                           
  4950  0024                     ___fleq@ff2:	
  4951                           ; 4 bytes @ 0x4
  4952                           
  4953  0024                     ___flge@ff2:	
  4954                           ; 4 bytes @ 0x4
  4955                           
  4956                           
  4957                           ; 4 bytes @ 0x4
  4958  0024                     	ds	1
  4959  0025                     OLED_send@value:	
  4960  0025                     ___awdiv@counter:	
  4961                           ; 1 bytes @ 0x5
  4962                           
  4963  0025                     ___awmod@counter:	
  4964                           ; 1 bytes @ 0x5
  4965                           
  4966                           
  4967                           ; 1 bytes @ 0x5
  4968  0025                     	ds	1
  4969  0026                     ??_OLED_command:	
  4970  0026                     ?_getNextState:	
  4971                           ; 1 bytes @ 0x6
  4972                           
  4973  0026                     ??_OLED_write:	
  4974                           ; 1 bytes @ 0x6
  4975                           
  4976  0026                     ?_getStateFunc:	
  4977                           ; 1 bytes @ 0x6
  4978                           
  4979  0026                     ?___xxtofl:	
  4980                           ; 2 bytes @ 0x6
  4981                           
  4982  0026                     initGlobalData@n:	
  4983                           ; 4 bytes @ 0x6
  4984                           
  4985  0026                     OLED_command@value:	
  4986                           ; 1 bytes @ 0x6
  4987                           
  4988  0026                     OLED_write@value:	
  4989                           ; 1 bytes @ 0x6
  4990                           
  4991  0026                     getNextState@page:	
  4992                           ; 1 bytes @ 0x6
  4993                           
  4994  0026                     ___awdiv@sign:	
  4995                           ; 1 bytes @ 0x6
  4996                           
  4997  0026                     ___awmod@sign:	
  4998                           ; 1 bytes @ 0x6
  4999                           
  5000  0026                     __Umul8_16@word_mpld:	
  5001                           ; 1 bytes @ 0x6
  5002                           
  5003  0026                     ___xxtofl@val:	
  5004                           ; 2 bytes @ 0x6
  5005                           
  5006                           
  5007                           ; 4 bytes @ 0x6
  5008  0026                     	ds	1
  5009  0027                     ??_OLED_init:	
  5010  0027                     ??_OLED_loadSpecialChars:	
  5011                           ; 1 bytes @ 0x7
  5012                           
  5013  0027                     ??_OLED_returnHome:	
  5014                           ; 1 bytes @ 0x7
  5015                           
  5016  0027                     ??_OLED_clearDisplay:	
  5017                           ; 1 bytes @ 0x7
  5018                           
  5019  0027                     ?_OLED_print_xy:	
  5020                           ; 1 bytes @ 0x7
  5021                           
  5022  0027                     ??_OLED_Off:	
  5023                           ; 1 bytes @ 0x7
  5024                           
  5025  0027                     ??_returnToPage:	
  5026                           ; 1 bytes @ 0x7
  5027                           
  5028  0027                     ?_paging:	
  5029                           ; 1 bytes @ 0x7
  5030                           
  5031  0027                     ??_OLED_scrollDisplayLeft:	
  5032                           ; 1 bytes @ 0x7
  5033                           
  5034  0027                     ??_OLED_scrollDisplayRight:	
  5035                           ; 1 bytes @ 0x7
  5036                           
  5037  0027                     OLED_print_xy@row:	
  5038                           ; 1 bytes @ 0x7
  5039                           
  5040  0027                     getNextState@pb:	
  5041                           ; 1 bytes @ 0x7
  5042                           
  5043  0027                     paging@lastPage:	
  5044                           ; 1 bytes @ 0x7
  5045                           
  5046  0027                     initGlobalData@chData:	
  5047                           ; 1 bytes @ 0x7
  5048                           
  5049  0027                     ___awdiv@quotient:	
  5050                           ; 2 bytes @ 0x7
  5051                           
  5052                           
  5053                           ; 2 bytes @ 0x7
  5054  0027                     	ds	1
  5055  0028                     ??_timeSince:	
  5056  0028                     ??_paging:	
  5057                           ; 1 bytes @ 0x8
  5058                           
  5059  0028                     ??_getStateFunc:	
  5060                           ; 1 bytes @ 0x8
  5061                           
  5062  0028                     ??_getNextState:	
  5063                           ; 1 bytes @ 0x8
  5064                           
  5065  0028                     ??___lmul:	
  5066                           ; 1 bytes @ 0x8
  5067                           
  5068  0028                     ??___fleq:	
  5069                           ; 1 bytes @ 0x8
  5070                           
  5071  0028                     ??___flge:	
  5072                           ; 1 bytes @ 0x8
  5073                           
  5074  0028                     __Umul8_16@multiplier:	
  5075                           ; 1 bytes @ 0x8
  5076                           
  5077  0028                     OLED_print_xy@s:	
  5078                           ; 1 bytes @ 0x8
  5079                           
  5080  0028                     ___lmul@product:	
  5081                           ; 2 bytes @ 0x8
  5082                           
  5083  0028                     OLED_loadSpecialChars@special:	
  5084                           ; 4 bytes @ 0x8
  5085                           
  5086                           
  5087                           ; 32 bytes @ 0x8
  5088  0028                     	ds	1
  5089  0029                     returnToPage@page:	
  5090                           
  5091                           ; 1 bytes @ 0x9
  5092  0029                     	ds	1
  5093  002A                     ??_OLED_print_xy:	
  5094  002A                     ??___xxtofl:	
  5095                           ; 1 bytes @ 0xA
  5096                           
  5097  002A                     paging@currentPage:	
  5098                           ; 1 bytes @ 0xA
  5099                           
  5100  002A                     returnToPage@n:	
  5101                           ; 1 bytes @ 0xA
  5102                           
  5103                           
  5104                           ; 1 bytes @ 0xA
  5105  002A                     	ds	1
  5106  002B                     getStateFunc@state:	
  5107  002B                     getNextState@state:	
  5108                           ; 1 bytes @ 0xB
  5109                           
  5110  002B                     paging@dir:	
  5111                           ; 1 bytes @ 0xB
  5112                           
  5113  002B                     OLED_print_xy@row_offsets:	
  5114                           ; 1 bytes @ 0xB
  5115                           
  5116                           
  5117                           ; 4 bytes @ 0xB
  5118  002B                     	ds	1
  5119  002C                     ?_ema:	
  5120  002C                     getStateFunc@n:	
  5121                           ; 2 bytes @ 0xC
  5122                           
  5123  002C                     getNextState@n:	
  5124                           ; 1 bytes @ 0xC
  5125                           
  5126  002C                     paging@n:	
  5127                           ; 1 bytes @ 0xC
  5128                           
  5129  002C                     ema@in:	
  5130                           ; 1 bytes @ 0xC
  5131                           
  5132                           
  5133                           ; 2 bytes @ 0xC
  5134  002C                     	ds	2
  5135  002E                     ___xxtofl@sign:	
  5136  002E                     ema@average:	
  5137                           ; 1 bytes @ 0xE
  5138                           
  5139                           
  5140                           ; 2 bytes @ 0xE
  5141  002E                     	ds	1
  5142  002F                     OLED_print_xy@col:	
  5143  002F                     ___xxtofl@exp:	
  5144                           ; 1 bytes @ 0xF
  5145                           
  5146                           
  5147                           ; 1 bytes @ 0xF
  5148  002F                     	ds	1
  5149  0030                     ??_menuError:	
  5150  0030                     timeSince@now:	
  5151                           ; 1 bytes @ 0x10
  5152                           
  5153  0030                     ema@alpha:	
  5154                           ; 4 bytes @ 0x10
  5155                           
  5156  0030                     ___xxtofl@arg:	
  5157                           ; 4 bytes @ 0x10
  5158                           
  5159                           
  5160                           ; 4 bytes @ 0x10
  5161  0030                     	ds	4
  5162  0034                     ?_checkSensor:	
  5163  0034                     ??_ema:	
  5164                           ; 1 bytes @ 0x14
  5165                           
  5166  0034                     ?___flmul:	
  5167                           ; 1 bytes @ 0x14
  5168                           
  5169  0034                     checkSensor@data:	
  5170                           ; 4 bytes @ 0x14
  5171                           
  5172  0034                     ___flmul@b:	
  5173                           ; 2 bytes @ 0x14
  5174                           
  5175                           
  5176                           ; 4 bytes @ 0x14
  5177  0034                     	ds	2
  5178  0036                     ??_checkSensor:	
  5179                           
  5180                           ; 1 bytes @ 0x16
  5181  0036                     	ds	2
  5182  0038                     ___flmul@a:	
  5183                           
  5184                           ; 4 bytes @ 0x18
  5185  0038                     	ds	2
  5186  003A                     checkSensor@dp:	
  5187                           
  5188                           ; 1 bytes @ 0x1A
  5189  003A                     	ds	2
  5190  003C                     ??___flmul:	
  5191  003C                     ema@tmp0:	
  5192                           ; 1 bytes @ 0x1C
  5193                           
  5194                           
  5195                           ; 4 bytes @ 0x1C
  5196  003C                     	ds	5
  5197  0041                     ___flmul@sign:	
  5198                           
  5199                           ; 1 bytes @ 0x21
  5200  0041                     	ds	1
  5201  0042                     ___flmul@grs:	
  5202                           
  5203                           ; 4 bytes @ 0x22
  5204  0042                     	ds	4
  5205  0046                     ___flmul@aexp:	
  5206                           
  5207                           ; 1 bytes @ 0x26
  5208  0046                     	ds	1
  5209  0047                     ___flmul@bexp:	
  5210                           
  5211                           ; 1 bytes @ 0x27
  5212  0047                     	ds	1
  5213  0048                     OLED_loadSpecialChars@n:	
  5214  0048                     ___flmul@prod:	
  5215                           ; 1 bytes @ 0x28
  5216                           
  5217                           
  5218                           ; 4 bytes @ 0x28
  5219  0048                     	ds	4
  5220  004C                     ___flmul@temp:	
  5221                           
  5222                           ; 2 bytes @ 0x2C
  5223  004C                     	ds	2
  5224  004E                     ?___fladd:	
  5225  004E                     ?___fldiv:	
  5226                           ; 4 bytes @ 0x2E
  5227                           
  5228  004E                     ___fladd@b:	
  5229                           ; 4 bytes @ 0x2E
  5230                           
  5231  004E                     ___fldiv@a:	
  5232                           ; 4 bytes @ 0x2E
  5233                           
  5234                           
  5235                           ; 4 bytes @ 0x2E
  5236  004E                     	ds	4
  5237  0052                     ___fladd@a:	
  5238  0052                     ___fldiv@b:	
  5239                           ; 4 bytes @ 0x32
  5240                           
  5241                           
  5242                           ; 4 bytes @ 0x32
  5243  0052                     	ds	4
  5244  0056                     ??___fladd:	
  5245  0056                     ??___fldiv:	
  5246                           ; 1 bytes @ 0x36
  5247                           
  5248                           
  5249                           ; 1 bytes @ 0x36
  5250  0056                     	ds	5
  5251  005B                     ___fldiv@rem:	
  5252                           
  5253                           ; 4 bytes @ 0x3B
  5254  005B                     	ds	3
  5255  005E                     ___fladd@signs:	
  5256                           
  5257                           ; 1 bytes @ 0x3E
  5258  005E                     	ds	1
  5259  005F                     ___fladd@aexp:	
  5260  005F                     ___fldiv@sign:	
  5261                           ; 1 bytes @ 0x3F
  5262                           
  5263                           
  5264                           ; 1 bytes @ 0x3F
  5265  005F                     	ds	1
  5266  0060                     ___fladd@bexp:	
  5267  0060                     ___fldiv@new_exp:	
  5268                           ; 1 bytes @ 0x40
  5269                           
  5270                           
  5271                           ; 2 bytes @ 0x40
  5272  0060                     	ds	1
  5273  0061                     ___fladd@grs:	
  5274                           
  5275                           ; 1 bytes @ 0x41
  5276  0061                     	ds	1
  5277  0062                     ?___flsub:	
  5278  0062                     ___flsub@a:	
  5279                           ; 4 bytes @ 0x42
  5280                           
  5281  0062                     ___fldiv@grs:	
  5282                           ; 4 bytes @ 0x42
  5283                           
  5284                           
  5285                           ; 4 bytes @ 0x42
  5286  0062                     	ds	4
  5287  0066                     ___fldiv@bexp:	
  5288  0066                     ___flsub@b:	
  5289                           ; 1 bytes @ 0x46
  5290                           
  5291                           
  5292                           ; 4 bytes @ 0x46
  5293  0066                     	ds	1
  5294  0067                     ___fldiv@aexp:	
  5295                           
  5296                           ; 1 bytes @ 0x47
  5297  0067                     	ds	1
  5298  0068                     ?_convertAnalogValues:	
  5299  0068                     ?___fltol:	
  5300                           ; 1 bytes @ 0x48
  5301                           
  5302  0068                     convertAnalogValues@data:	
  5303                           ; 4 bytes @ 0x48
  5304                           
  5305  0068                     ___fltol@f1:	
  5306                           ; 2 bytes @ 0x48
  5307                           
  5308                           
  5309                           ; 4 bytes @ 0x48
  5310  0068                     	ds	2
  5311  006A                     ??_convertAnalogValues:	
  5312  006A                     ?_calcRequiredPower:	
  5313                           ; 1 bytes @ 0x4A
  5314                           
  5315  006A                     ??_spinInput:	
  5316                           ; 1 bytes @ 0x4A
  5317                           
  5318  006A                     ??___flsub:	
  5319                           ; 1 bytes @ 0x4A
  5320                           
  5321  006A                     calcRequiredPower@data:	
  5322                           ; 1 bytes @ 0x4A
  5323                           
  5324  006A                     _convertAnalogValues$2145:	
  5325                           ; 2 bytes @ 0x4A
  5326                           
  5327                           
  5328                           ; 4 bytes @ 0x4A
  5329  006A                     	ds	1
  5330  006B                     spinInput@dir:	
  5331                           
  5332                           ; 1 bytes @ 0x4B
  5333  006B                     	ds	1
  5334  006C                     ??_calcRequiredPower:	
  5335  006C                     ___fltol@sign1:	
  5336                           ; 1 bytes @ 0x4C
  5337                           
  5338                           
  5339                           ; 1 bytes @ 0x4C
  5340  006C                     	ds	1
  5341  006D                     ___fltol@exp1:	
  5342                           
  5343                           ; 1 bytes @ 0x4D
  5344  006D                     	ds	1
  5345  006E                     ?_getAvgChannelCurrents:	
  5346  006E                     ??_ftoa:	
  5347                           ; 1 bytes @ 0x4E
  5348                           
  5349  006E                     getAvgChannelCurrents@data:	
  5350                           ; 1 bytes @ 0x4E
  5351                           
  5352  006E                     convertAnalogValues@adc:	
  5353                           ; 2 bytes @ 0x4E
  5354                           
  5355                           
  5356                           ; 2 bytes @ 0x4E
  5357  006E                     	ds	2
  5358                           
  5359                           	psect	maintext
  5360  1B84                     __pmaintext:	
  5361 ;;
  5362 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  5363 ;;
  5364 ;; *************** function _main *****************
  5365 ;; Defined at:
  5366 ;;		line 59 in file "main.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;		None
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;  checkInt        4   58[BANK1 ] unsigned long 
  5371 ;; Return value:  Size  Location     Type
  5372 ;;                  1    wreg      void 
  5373 ;; Registers used:
  5374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5375 ;; Tracked objects:
  5376 ;;		On entry : B3F/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5381 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5382 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5383 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5384 ;;Total ram usage:        5 bytes
  5385 ;; Hardware stack levels required when called:   11
  5386 ;; This function calls:
  5387 ;;		_OLED_clearDisplay
  5388 ;;		_OLED_init
  5389 ;;		_OLED_loadSpecialChars
  5390 ;;		_OLED_returnHome
  5391 ;;		_calcRequiredPower
  5392 ;;		_checkSensor
  5393 ;;		_convertAnalogValues
  5394 ;;		_getAvgChannelCurrents
  5395 ;;		_initGlobalData
  5396 ;;		_initialize
  5397 ;;		_menu
  5398 ;;		_systemCheck
  5399 ;;		_timeNow
  5400 ;;		_timeSince
  5401 ;; This function is called by:
  5402 ;;		Startup code after reset
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _main
  5408  1B84                     _main:	
  5409                           
  5410                           ;main.c: 61:  uint32_t checkInt = 0;
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5414  1B84  3000               	movlw	0
  5415  1B85  0141               	movlb	1	; select bank1
  5416  1B86  00DD               	movwf	(main@checkInt+3)^(0+128)
  5417  1B87  3000               	movlw	0
  5418  1B88  00DC               	movwf	(main@checkInt+2)^(0+128)
  5419  1B89  3000               	movlw	0
  5420  1B8A  00DB               	movwf	(main@checkInt+1)^(0+128)
  5421  1B8B  3000               	movlw	0
  5422  1B8C  00DA               	movwf	main@checkInt^(0+128)
  5423                           
  5424                           ;main.c: 63:  initialize();
  5425  1B8D  31A5  2532  319B   	fcall	_initialize
  5426                           
  5427                           ;main.c: 64:  LATBbits.LATB5 = 1;
  5428  1B90  0140               	movlb	0	; select bank0
  5429  1B91  1699               	bsf	25,5	;volatile
  5430                           
  5431                           ;main.c: 65:  OLED_init();
  5432  1B92  319A  226E  319B   	fcall	_OLED_init
  5433                           
  5434                           ;main.c: 66:  OLED_loadSpecialChars();
  5435  1B95  31A2  22A8  319B   	fcall	_OLED_loadSpecialChars
  5436                           
  5437                           ;main.c: 67:  OLED_returnHome();
  5438  1B98  3188  2002  319B   	fcall	_OLED_returnHome
  5439                           
  5440                           ;main.c: 68:  OLED_clearDisplay();
  5441  1B9B  3190  2000  319B   	fcall	_OLED_clearDisplay
  5442                           
  5443                           ;main.c: 69:  initGlobalData(&data);
  5444  1B9E  3043               	movlw	67
  5445  1B9F  0140               	movlb	0	; select bank0
  5446  1BA0  00A0               	movwf	initGlobalData@data
  5447  1BA1  3027               	movlw	39
  5448  1BA2  00A1               	movwf	initGlobalData@data+1
  5449  1BA3  319C  24AB  319B   	fcall	_initGlobalData
  5450                           
  5451                           ;main.c: 70:  LATCbits.LATC3 = 1;
  5452  1BA6  0140               	movlb	0	; select bank0
  5453  1BA7  159A               	bsf	26,3	;volatile
  5454  1BA8                     l131:	
  5455                           ;main.c: 73:  while (1) {
  5456                           
  5457  1BA8  0064               	clrwdt	;# 
  5458                           
  5459                           ;main.c: 75:   convertAnalogValues(&data);
  5460  1BA9  3043               	movlw	67
  5461  1BAA  0140               	movlb	0	; select bank0
  5462  1BAB  00E8               	movwf	convertAnalogValues@data
  5463  1BAC  3027               	movlw	39
  5464  1BAD  00E9               	movwf	convertAnalogValues@data+1
  5465  1BAE  3196  2674  319B   	fcall	_convertAnalogValues
  5466                           
  5467                           ;main.c: 76:   checkSensor(&data);
  5468  1BB1  3043               	movlw	67
  5469  1BB2  0140               	movlb	0	; select bank0
  5470  1BB3  00B4               	movwf	checkSensor@data
  5471  1BB4  3027               	movlw	39
  5472  1BB5  00B5               	movwf	checkSensor@data+1
  5473  1BB6  3192  2208  319B   	fcall	_checkSensor
  5474                           
  5475                           ;main.c: 77:   if (timeSince(checkInt) > 10) {
  5476  1BB9  0141               	movlb	1	; select bank1
  5477  1BBA  085D               	movf	(main@checkInt+3)^(0+128),w
  5478  1BBB  0140               	movlb	0	; select bank0
  5479  1BBC  00A7               	movwf	timeSince@since+3
  5480  1BBD  0141               	movlb	1	; select bank1
  5481  1BBE  085C               	movf	(main@checkInt+2)^(0+128),w
  5482  1BBF  0140               	movlb	0	; select bank0
  5483  1BC0  00A6               	movwf	timeSince@since+2
  5484  1BC1  0141               	movlb	1	; select bank1
  5485  1BC2  085B               	movf	(main@checkInt+1)^(0+128),w
  5486  1BC3  0140               	movlb	0	; select bank0
  5487  1BC4  00A5               	movwf	timeSince@since+1
  5488  1BC5  0141               	movlb	1	; select bank1
  5489  1BC6  085A               	movf	main@checkInt^(0+128),w
  5490  1BC7  0140               	movlb	0	; select bank0
  5491  1BC8  00A4               	movwf	timeSince@since
  5492  1BC9  31A6  2615  319B   	fcall	_timeSince
  5493  1BCC  0140               	movlb	0	; select bank0
  5494  1BCD  0827               	movf	?_timeSince+3,w
  5495  1BCE  1D03               	btfss	3,2
  5496  1BCF  2BDA               	goto	l5501
  5497  1BD0  0826               	movf	?_timeSince+2,w
  5498  1BD1  1D03               	btfss	3,2
  5499  1BD2  2BDA               	goto	l5501
  5500  1BD3  0825               	movf	?_timeSince+1,w
  5501  1BD4  1D03               	btfss	3,2
  5502  1BD5  2BDA               	goto	l5501
  5503  1BD6  300B               	movlw	11
  5504  1BD7  0224               	subwf	?_timeSince,w
  5505  1BD8  1C03               	btfss	3,0
  5506  1BD9  2BFC               	goto	l5507
  5507  1BDA                     l5501:	
  5508                           
  5509                           ;main.c: 78:    checkInt = timeNow();
  5510  1BDA  31A2  2200  319B   	fcall	_timeNow
  5511  1BDD  0140               	movlb	0	; select bank0
  5512  1BDE  0823               	movf	?_timeNow+3,w
  5513  1BDF  0141               	movlb	1	; select bank1
  5514  1BE0  00DD               	movwf	(main@checkInt+3)^(0+128)
  5515  1BE1  0140               	movlb	0	; select bank0
  5516  1BE2  0822               	movf	?_timeNow+2,w
  5517  1BE3  0141               	movlb	1	; select bank1
  5518  1BE4  00DC               	movwf	(main@checkInt+2)^(0+128)
  5519  1BE5  0140               	movlb	0	; select bank0
  5520  1BE6  0821               	movf	?_timeNow+1,w
  5521  1BE7  0141               	movlb	1	; select bank1
  5522  1BE8  00DB               	movwf	(main@checkInt+1)^(0+128)
  5523  1BE9  0140               	movlb	0	; select bank0
  5524  1BEA  0820               	movf	?_timeNow,w
  5525  1BEB  0141               	movlb	1	; select bank1
  5526  1BEC  00DA               	movwf	main@checkInt^(0+128)
  5527                           
  5528                           ;main.c: 79:    systemCheck(&data);
  5529  1BED  3043               	movlw	67
  5530  1BEE  00B0               	movwf	systemCheck@data^(0+128)
  5531  1BEF  3027               	movlw	39
  5532  1BF0  00B1               	movwf	(systemCheck@data^(0+128)+1)
  5533  1BF1  3190  20AB  319B   	fcall	_systemCheck
  5534                           
  5535                           ;main.c: 80:    calcRequiredPower(&data);
  5536  1BF4  3043               	movlw	67
  5537  1BF5  0140               	movlb	0	; select bank0
  5538  1BF6  00EA               	movwf	calcRequiredPower@data
  5539  1BF7  3027               	movlw	39
  5540  1BF8  00EB               	movwf	calcRequiredPower@data+1
  5541  1BF9  3180  20B5  319B   	fcall	_calcRequiredPower
  5542  1BFC                     l5507:	
  5543                           
  5544                           ;main.c: 84:    getAvgChannelCurrents(&data);
  5545  1BFC  3043               	movlw	67
  5546  1BFD  0140               	movlb	0	; select bank0
  5547  1BFE  00EE               	movwf	getAvgChannelCurrents@data
  5548  1BFF  3027               	movlw	39
  5549  1C00  00EF               	movwf	getAvgChannelCurrents@data+1
  5550  1C01  318A  225F  319B   	fcall	_getAvgChannelCurrents
  5551                           
  5552                           ;main.c: 85:   menu(&data);
  5553  1C04  3043               	movlw	67
  5554  1C05  0141               	movlb	1	; select bank1
  5555  1C06  00BC               	movwf	menu@data^(0+128)
  5556  1C07  3027               	movlw	39
  5557  1C08  00BD               	movwf	(menu@data^(0+128)+1)
  5558  1C09  31A6  266B  319B   	fcall	_menu
  5559                           
  5560                           ;main.c: 86:   _delay((unsigned long)((10)*(4000000/4000.0)));
  5561  1C0C  300D               	movlw	13
  5562  1C0D  0141               	movlb	1	; select bank1
  5563  1C0E  00D9               	movwf	??_main^(0+128)
  5564  1C0F  30FB               	movlw	251
  5565  1C10                     u6417:	
  5566  1C10  0B89               	decfsz	9,f
  5567  1C11  2C10               	goto	u6417
  5568  1C12  0BD9               	decfsz	??_main^(0+128),f
  5569  1C13  2C10               	goto	u6417
  5570  1C14  3200               	nop2
  5571  1C15  2BA8               	goto	l131
  5572  1C16                     __end_of_main:	
  5573                           
  5574                           	psect	text1
  5575  10AB                     __ptext1:	
  5576 ;; *************** function _systemCheck *****************
  5577 ;; Defined at:
  5578 ;;		line 119 in file "main.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;  data            2   16[BANK1 ] PTR struct .
  5581 ;;		 -> data(173), 
  5582 ;; Auto vars:     Size  Location     Type
  5583 ;;  str             3   20[BANK1 ] unsigned char [3]
  5584 ;;  n               1   23[BANK1 ] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      void 
  5587 ;; Registers used:
  5588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5594 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5595 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5596 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5597 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5598 ;;Total ram usage:        8 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    8
  5601 ;; This function calls:
  5602 ;;		_OLED_Off
  5603 ;;		_OLED_clearDisplay
  5604 ;;		_OLED_print_xy
  5605 ;;		_OLED_returnHome
  5606 ;;		___flge
  5607 ;;		_convertAnalogValues
  5608 ;;		_error
  5609 ;;		_itoa
  5610 ;; This function is called by:
  5611 ;;		_main
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function _systemCheck
  5617  10AB                     _systemCheck:	
  5618                           
  5619                           ;main.c: 119: void systemCheck(t_globalData *data);main.c: 120: {;main.c: 121:  uint8_t 
      +                          n;;main.c: 122:  char str[3];;main.c: 124:  if (data->current > 3.0) {
  5620                           
  5621                           ;incstack = 0
  5622                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5623  10AB  3040               	movlw	64
  5624  10AC  0140               	movlb	0	; select bank0
  5625  10AD  00A3               	movwf	___flge@ff1+3
  5626  10AE  3040               	movlw	64
  5627  10AF  00A2               	movwf	___flge@ff1+2
  5628  10B0  3000               	movlw	0
  5629  10B1  00A1               	movwf	___flge@ff1+1
  5630  10B2  3000               	movlw	0
  5631  10B3  00A0               	movwf	___flge@ff1
  5632  10B4  0141               	movlb	1	; select bank1
  5633  10B5  0830               	movf	systemCheck@data^(0+128),w
  5634  10B6  0086               	movwf	6
  5635  10B7  0831               	movf	(systemCheck@data+1)^(0+128),w
  5636  10B8  0087               	movwf	7
  5637  10B9  3158               	addfsr 1,24
  5638  10BA  3F40               	moviw [0]fsr1
  5639  10BB  0140               	movlb	0	; select bank0
  5640  10BC  00A4               	movwf	___flge@ff2
  5641  10BD  3F41               	moviw [1]fsr1
  5642  10BE  00A5               	movwf	___flge@ff2+1
  5643  10BF  3F42               	moviw [2]fsr1
  5644  10C0  00A6               	movwf	___flge@ff2+2
  5645  10C1  3F43               	moviw [3]fsr1
  5646  10C2  00A7               	movwf	___flge@ff2+3
  5647  10C3  3199  21F2  3190   	fcall	___flge
  5648  10C6  1803               	btfsc	3,0
  5649  10C7  28FC               	goto	l5403
  5650                           
  5651                           ;main.c: 125:   LATAbits.LATA0 = 0;
  5652  10C8  0140               	movlb	0	; select bank0
  5653  10C9  1018               	bcf	24,0	;volatile
  5654                           
  5655                           ;main.c: 126:   LATAbits.LATA1 = 0;
  5656  10CA  1098               	bcf	24,1	;volatile
  5657                           
  5658                           ;main.c: 127:   LATAbits.LATA2 = 0;
  5659  10CB  1118               	bcf	24,2	;volatile
  5660                           
  5661                           ;main.c: 128:   LATAbits.LATA3 = 0;
  5662  10CC  1198               	bcf	24,3	;volatile
  5663                           
  5664                           ;main.c: 129:   LATCbits.LATC3 = 0;
  5665  10CD  119A               	bcf	26,3	;volatile
  5666                           
  5667                           ;main.c: 130:   convertAnalogValues(data);
  5668  10CE  0141               	movlb	1	; select bank1
  5669  10CF  0831               	movf	(systemCheck@data+1)^(0+128),w
  5670  10D0  0140               	movlb	0	; select bank0
  5671  10D1  00E9               	movwf	convertAnalogValues@data+1
  5672  10D2  0141               	movlb	1	; select bank1
  5673  10D3  0830               	movf	systemCheck@data^(0+128),w
  5674  10D4  0140               	movlb	0	; select bank0
  5675  10D5  00E8               	movwf	convertAnalogValues@data
  5676  10D6  3196  2674  3190   	fcall	_convertAnalogValues
  5677                           
  5678                           ;main.c: 131:   if (data->current > 3.0) {
  5679  10D9  3040               	movlw	64
  5680  10DA  0140               	movlb	0	; select bank0
  5681  10DB  00A3               	movwf	___flge@ff1+3
  5682  10DC  3040               	movlw	64
  5683  10DD  00A2               	movwf	___flge@ff1+2
  5684  10DE  3000               	movlw	0
  5685  10DF  00A1               	movwf	___flge@ff1+1
  5686  10E0  3000               	movlw	0
  5687  10E1  00A0               	movwf	___flge@ff1
  5688  10E2  0141               	movlb	1	; select bank1
  5689  10E3  0830               	movf	systemCheck@data^(0+128),w
  5690  10E4  0086               	movwf	6
  5691  10E5  0831               	movf	(systemCheck@data+1)^(0+128),w
  5692  10E6  0087               	movwf	7
  5693  10E7  3158               	addfsr 1,24
  5694  10E8  3F40               	moviw [0]fsr1
  5695  10E9  0140               	movlb	0	; select bank0
  5696  10EA  00A4               	movwf	___flge@ff2
  5697  10EB  3F41               	moviw [1]fsr1
  5698  10EC  00A5               	movwf	___flge@ff2+1
  5699  10ED  3F42               	moviw [2]fsr1
  5700  10EE  00A6               	movwf	___flge@ff2+2
  5701  10EF  3F43               	moviw [3]fsr1
  5702  10F0  00A7               	movwf	___flge@ff2+3
  5703  10F1  3199  21F2  3190   	fcall	___flge
  5704  10F4  1803               	btfsc	3,0
  5705  10F5  28F8               	goto	l5401
  5706                           
  5707                           ;main.c: 133:    error(ERR_NUKED);
  5708  10F6  3004               	movlw	4
  5709  10F7  28F9               	goto	L1
  5710  10F8                     l5401:	
  5711                           ;main.c: 134:   } else {
  5712                           
  5713                           
  5714                           ;main.c: 135:    error(ERR_OVERCURRENT);
  5715  10F8  3005               	movlw	5
  5716  10F9                     L1:	
  5717  10F9  3187  27FF  3190   	fcall	_error
  5718  10FC                     l5403:	
  5719                           
  5720                           ;main.c: 139:  if ((data->voltage > 13.8) || (data->voltage <= 11.0)) {
  5721  10FC  3041               	movlw	65
  5722  10FD  0140               	movlb	0	; select bank0
  5723  10FE  00A3               	movwf	___flge@ff1+3
  5724  10FF  305C               	movlw	92
  5725  1100  00A2               	movwf	___flge@ff1+2
  5726  1101  30CC               	movlw	204
  5727  1102  00A1               	movwf	___flge@ff1+1
  5728  1103  30CD               	movlw	205
  5729  1104  00A0               	movwf	___flge@ff1
  5730  1105  0141               	movlb	1	; select bank1
  5731  1106  0830               	movf	systemCheck@data^(0+128),w
  5732  1107  0086               	movwf	6
  5733  1108  0831               	movf	(systemCheck@data+1)^(0+128),w
  5734  1109  0087               	movwf	7
  5735  110A  3154               	addfsr 1,20
  5736  110B  3F40               	moviw [0]fsr1
  5737  110C  0140               	movlb	0	; select bank0
  5738  110D  00A4               	movwf	___flge@ff2
  5739  110E  3F41               	moviw [1]fsr1
  5740  110F  00A5               	movwf	___flge@ff2+1
  5741  1110  3F42               	moviw [2]fsr1
  5742  1111  00A6               	movwf	___flge@ff2+2
  5743  1112  3F43               	moviw [3]fsr1
  5744  1113  00A7               	movwf	___flge@ff2+3
  5745  1114  3199  21F2  3190   	fcall	___flge
  5746  1117  1C03               	btfss	3,0
  5747  1118  2936               	goto	l5407
  5748  1119  3041               	movlw	65
  5749  111A  0140               	movlb	0	; select bank0
  5750  111B  00A3               	movwf	___flge@ff1+3
  5751  111C  3030               	movlw	48
  5752  111D  00A2               	movwf	___flge@ff1+2
  5753  111E  3000               	movlw	0
  5754  111F  00A1               	movwf	___flge@ff1+1
  5755  1120  3000               	movlw	0
  5756  1121  00A0               	movwf	___flge@ff1
  5757  1122  0141               	movlb	1	; select bank1
  5758  1123  0830               	movf	systemCheck@data^(0+128),w
  5759  1124  0086               	movwf	6
  5760  1125  0831               	movf	(systemCheck@data+1)^(0+128),w
  5761  1126  0087               	movwf	7
  5762  1127  3154               	addfsr 1,20
  5763  1128  3F40               	moviw [0]fsr1
  5764  1129  0140               	movlb	0	; select bank0
  5765  112A  00A4               	movwf	___flge@ff2
  5766  112B  3F41               	moviw [1]fsr1
  5767  112C  00A5               	movwf	___flge@ff2+1
  5768  112D  3F42               	moviw [2]fsr1
  5769  112E  00A6               	movwf	___flge@ff2+2
  5770  112F  3F43               	moviw [3]fsr1
  5771  1130  00A7               	movwf	___flge@ff2+3
  5772  1131  3199  21F2  3190   	fcall	___flge
  5773  1134  1C03               	btfss	3,0
  5774  1135  298C               	goto	l5443
  5775  1136                     l5407:	
  5776                           
  5777                           ;main.c: 140:   OLED_clearDisplay();
  5778  1136  3190  2000  3190   	fcall	_OLED_clearDisplay
  5779                           
  5780                           ;main.c: 141:   OLED_returnHome();
  5781  1139  3188  2002  3190   	fcall	_OLED_returnHome
  5782                           
  5783                           ;main.c: 142:   OLED_print_xy(0, 0, "TURNING OFF");
  5784  113C  0140               	movlb	0	; select bank0
  5785  113D  01A7               	clrf	OLED_print_xy@row
  5786  113E  304A               	movlw	low (STR_1| (0+32768))
  5787  113F  00A8               	movwf	OLED_print_xy@s
  5788  1140  30A9               	movlw	high (STR_1| (0+32768))
  5789  1141  00A9               	movwf	OLED_print_xy@s+1
  5790  1142  3000               	movlw	0
  5791  1143  31A3  2388  3190   	fcall	_OLED_print_xy
  5792                           
  5793                           ;main.c: 143:   LATAbits.LATA0 = 0;
  5794  1146  0140               	movlb	0	; select bank0
  5795  1147  1018               	bcf	24,0	;volatile
  5796                           
  5797                           ;main.c: 144:   LATAbits.LATA1 = 0;
  5798  1148  1098               	bcf	24,1	;volatile
  5799                           
  5800                           ;main.c: 145:   LATAbits.LATA2 = 0;
  5801  1149  1118               	bcf	24,2	;volatile
  5802                           
  5803                           ;main.c: 146:   LATAbits.LATA3 = 0;
  5804  114A  1198               	bcf	24,3	;volatile
  5805                           
  5806                           ;main.c: 147:   LATCbits.LATC3 = 0;
  5807  114B  119A               	bcf	26,3	;volatile
  5808                           
  5809                           ;main.c: 148:   INTCON = 0;
  5810  114C  018B               	clrf	11	;volatile
  5811                           
  5812                           ;main.c: 149:   for(n = 5; n > 0; n--) {
  5813  114D  3005               	movlw	5
  5814  114E  0141               	movlb	1	; select bank1
  5815  114F  00B2               	movwf	??_systemCheck^(0+128)
  5816  1150  0832               	movf	??_systemCheck^(0+128),w
  5817  1151  00B7               	movwf	systemCheck@n^(0+128)
  5818  1152                     l5429:	
  5819                           
  5820                           ;main.c: 150:    itoa(str, n, 1);
  5821  1152  30B4               	movlw	low systemCheck@str
  5822  1153  00A5               	movwf	itoa@str^(0+128)
  5823  1154  3000               	movlw	high systemCheck@str
  5824  1155  00A6               	movwf	(itoa@str+1)^(0+128)
  5825  1156  0837               	movf	systemCheck@n^(0+128),w
  5826  1157  00B2               	movwf	??_systemCheck^(0+128)
  5827  1158  0832               	movf	??_systemCheck^(0+128),w
  5828  1159  00A7               	movwf	itoa@value^(0+128)
  5829  115A  01A8               	clrf	itoa@width^(0+128)
  5830  115B  0AA8               	incf	itoa@width^(0+128),f
  5831  115C  31A7  272C  3190   	fcall	_itoa
  5832                           
  5833                           ;main.c: 151:    OLED_print_xy(0, 1, "IN ");
  5834  115F  0140               	movlb	0	; select bank0
  5835  1160  01A7               	clrf	OLED_print_xy@row
  5836  1161  0AA7               	incf	OLED_print_xy@row,f
  5837  1162  30EB               	movlw	low (STR_2| (0+32768))
  5838  1163  00A8               	movwf	OLED_print_xy@s
  5839  1164  30A9               	movlw	high (STR_2| (0+32768))
  5840  1165  00A9               	movwf	OLED_print_xy@s+1
  5841  1166  3000               	movlw	0
  5842  1167  31A3  2388  3190   	fcall	_OLED_print_xy
  5843                           
  5844                           ;main.c: 152:    OLED_print_xy(3, 1, str);
  5845  116A  0140               	movlb	0	; select bank0
  5846  116B  01A7               	clrf	OLED_print_xy@row
  5847  116C  0AA7               	incf	OLED_print_xy@row,f
  5848  116D  30B4               	movlw	low systemCheck@str
  5849  116E  00A8               	movwf	OLED_print_xy@s
  5850  116F  3000               	movlw	high systemCheck@str
  5851  1170  00A9               	movwf	OLED_print_xy@s+1
  5852  1171  3003               	movlw	3
  5853  1172  31A3  2388  3190   	fcall	_OLED_print_xy
  5854                           
  5855                           ;main.c: 153:    _delay((unsigned long)((1000)*(4000000/4000.0)));
  5856  1175  3006               	movlw	6
  5857  1176  0141               	movlb	1	; select bank1
  5858  1177  00B3               	movwf	(??_systemCheck^(0+128)+1)
  5859  1178  3013               	movlw	19
  5860  1179  00B2               	movwf	??_systemCheck^(0+128)
  5861  117A  30AD               	movlw	173
  5862  117B                     u6427:	
  5863  117B  0B89               	decfsz	9,f
  5864  117C  297B               	goto	u6427
  5865  117D  0BB2               	decfsz	??_systemCheck^(0+128),f
  5866  117E  297B               	goto	u6427
  5867  117F  0BB3               	decfsz	(??_systemCheck^(0+128)+1),f
  5868  1180  297B               	goto	u6427
  5869  1181  3200               	nop2
  5870                           
  5871                           ;main.c: 154:   }
  5872  1182  3001               	movlw	1
  5873  1183  0141               	movlb	1	; select bank1
  5874  1184  02B7               	subwf	systemCheck@n^(0+128),f
  5875  1185  0837               	movf	systemCheck@n^(0+128),w
  5876  1186  1D03               	btfss	3,2
  5877  1187  2952               	goto	l5429
  5878                           
  5879                           ;main.c: 155:   OLED_Off();
  5880  1188  31A1  21B2  3190   	fcall	_OLED_Off
  5881  118B                     l151:	
  5882                           ;main.c: 156:   while(1);
  5883                           
  5884  118B  298B               	goto	l151
  5885  118C                     l5443:	
  5886  118C  3041               	movlw	65
  5887  118D  0140               	movlb	0	; select bank0
  5888  118E  00A3               	movwf	___flge@ff1+3
  5889  118F  3050               	movlw	80
  5890  1190  00A2               	movwf	___flge@ff1+2
  5891  1191  3000               	movlw	0
  5892  1192  00A1               	movwf	___flge@ff1+1
  5893  1193  3000               	movlw	0
  5894  1194  00A0               	movwf	___flge@ff1
  5895  1195  0141               	movlb	1	; select bank1
  5896  1196  0830               	movf	systemCheck@data^(0+128),w
  5897  1197  0086               	movwf	6
  5898  1198  0831               	movf	(systemCheck@data+1)^(0+128),w
  5899  1199  0087               	movwf	7
  5900  119A  3154               	addfsr 1,20
  5901  119B  3F40               	moviw [0]fsr1
  5902  119C  0140               	movlb	0	; select bank0
  5903  119D  00A4               	movwf	___flge@ff2
  5904  119E  3F41               	moviw [1]fsr1
  5905  119F  00A5               	movwf	___flge@ff2+1
  5906  11A0  3F42               	moviw [2]fsr1
  5907  11A1  00A6               	movwf	___flge@ff2+2
  5908  11A2  3F43               	moviw [3]fsr1
  5909  11A3  00A7               	movwf	___flge@ff2+3
  5910  11A4  3199  21F2  3190   	fcall	___flge
  5911  11A7  1803               	btfsc	3,0
  5912  11A8  29CA               	goto	l5449
  5913  11A9  3041               	movlw	65
  5914  11AA  0140               	movlb	0	; select bank0
  5915  11AB  00A3               	movwf	___flge@ff1+3
  5916  11AC  305C               	movlw	92
  5917  11AD  00A2               	movwf	___flge@ff1+2
  5918  11AE  30CC               	movlw	204
  5919  11AF  00A1               	movwf	___flge@ff1+1
  5920  11B0  30CD               	movlw	205
  5921  11B1  00A0               	movwf	___flge@ff1
  5922  11B2  0141               	movlb	1	; select bank1
  5923  11B3  0830               	movf	systemCheck@data^(0+128),w
  5924  11B4  0086               	movwf	6
  5925  11B5  0831               	movf	(systemCheck@data+1)^(0+128),w
  5926  11B6  0087               	movwf	7
  5927  11B7  3154               	addfsr 1,20
  5928  11B8  3F40               	moviw [0]fsr1
  5929  11B9  0140               	movlb	0	; select bank0
  5930  11BA  00A4               	movwf	___flge@ff2
  5931  11BB  3F41               	moviw [1]fsr1
  5932  11BC  00A5               	movwf	___flge@ff2+1
  5933  11BD  3F42               	moviw [2]fsr1
  5934  11BE  00A6               	movwf	___flge@ff2+2
  5935  11BF  3F43               	moviw [3]fsr1
  5936  11C0  00A7               	movwf	___flge@ff2+3
  5937  11C1  3199  21F2  3190   	fcall	___flge
  5938  11C4  1C03               	btfss	3,0
  5939  11C5  29CA               	goto	l5449
  5940                           
  5941                           ;main.c: 159:   error(WARN_VOLT_HIGH);
  5942  11C6  3002               	movlw	2
  5943  11C7  3187  27FF         	fcall	_error
  5944                           
  5945                           ;main.c: 160:  } else if ((data->voltage > 11.0) && (data->voltage <= 11.4)) {
  5946  11C9  0008               	return
  5947  11CA                     l5449:	
  5948  11CA  3041               	movlw	65
  5949  11CB  0140               	movlb	0	; select bank0
  5950  11CC  00A3               	movwf	___flge@ff1+3
  5951  11CD  3030               	movlw	48
  5952  11CE  00A2               	movwf	___flge@ff1+2
  5953  11CF  3000               	movlw	0
  5954  11D0  00A1               	movwf	___flge@ff1+1
  5955  11D1  3000               	movlw	0
  5956  11D2  00A0               	movwf	___flge@ff1
  5957  11D3  0141               	movlb	1	; select bank1
  5958  11D4  0830               	movf	systemCheck@data^(0+128),w
  5959  11D5  0086               	movwf	6
  5960  11D6  0831               	movf	(systemCheck@data+1)^(0+128),w
  5961  11D7  0087               	movwf	7
  5962  11D8  3154               	addfsr 1,20
  5963  11D9  3F40               	moviw [0]fsr1
  5964  11DA  0140               	movlb	0	; select bank0
  5965  11DB  00A4               	movwf	___flge@ff2
  5966  11DC  3F41               	moviw [1]fsr1
  5967  11DD  00A5               	movwf	___flge@ff2+1
  5968  11DE  3F42               	moviw [2]fsr1
  5969  11DF  00A6               	movwf	___flge@ff2+2
  5970  11E0  3F43               	moviw [3]fsr1
  5971  11E1  00A7               	movwf	___flge@ff2+3
  5972  11E2  3199  21F2  3190   	fcall	___flge
  5973  11E5  1803               	btfsc	3,0
  5974  11E6  0008               	return
  5975  11E7  3041               	movlw	65
  5976  11E8  0140               	movlb	0	; select bank0
  5977  11E9  00A3               	movwf	___flge@ff1+3
  5978  11EA  3036               	movlw	54
  5979  11EB  00A2               	movwf	___flge@ff1+2
  5980  11EC  3066               	movlw	102
  5981  11ED  00A1               	movwf	___flge@ff1+1
  5982  11EE  3066               	movlw	102
  5983  11EF  00A0               	movwf	___flge@ff1
  5984  11F0  0141               	movlb	1	; select bank1
  5985  11F1  0830               	movf	systemCheck@data^(0+128),w
  5986  11F2  0086               	movwf	6
  5987  11F3  0831               	movf	(systemCheck@data+1)^(0+128),w
  5988  11F4  0087               	movwf	7
  5989  11F5  3154               	addfsr 1,20
  5990  11F6  3F40               	moviw [0]fsr1
  5991  11F7  0140               	movlb	0	; select bank0
  5992  11F8  00A4               	movwf	___flge@ff2
  5993  11F9  3F41               	moviw [1]fsr1
  5994  11FA  00A5               	movwf	___flge@ff2+1
  5995  11FB  3F42               	moviw [2]fsr1
  5996  11FC  00A6               	movwf	___flge@ff2+2
  5997  11FD  3F43               	moviw [3]fsr1
  5998  11FE  00A7               	movwf	___flge@ff2+3
  5999  11FF  3199  21F2  3190   	fcall	___flge
  6000  1202  1C03               	btfss	3,0
  6001  1203  0008               	return
  6002                           
  6003                           ;main.c: 161:   error(WARN_VOLT_LOW);
  6004  1204  3003               	movlw	3
  6005  1205  3187  27FF         	fcall	_error
  6006  1207  0008               	return
  6007  1208                     __end_of_systemCheck:	
  6008                           
  6009                           	psect	text2
  6010  1674                     __ptext2:	
  6011 ;; *************** function _convertAnalogValues *****************
  6012 ;; Defined at:
  6013 ;;		line 339 in file "main.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;  data            2   72[BANK0 ] PTR struct .
  6016 ;;		 -> data(173), 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  adc             2   78[BANK0 ] unsigned short 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      void 
  6021 ;; Registers used:
  6022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6028 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6029 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6031 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6032 ;;Total ram usage:        8 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    5
  6035 ;; This function calls:
  6036 ;;		___fladd
  6037 ;;		___fldiv
  6038 ;;		___flmul
  6039 ;;		___xxtofl
  6040 ;;		_adcGetConversion
  6041 ;;		_ema
  6042 ;; This function is called by:
  6043 ;;		_main
  6044 ;;		_systemCheck
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           
  6049                           ;psect for function _convertAnalogValues
  6050  1674                     _convertAnalogValues:	
  6051                           
  6052                           ;main.c: 339: void convertAnalogValues(t_globalData *data);main.c: 340: {;main.c: 341:  
      +                          static uint16_t avgT, avgV, avgI;;main.c: 342:  uint16_t adc;;main.c: 344:  adc = adcGet
      +                          Conversion(0b000110);
  6053                           
  6054                           ;incstack = 0
  6055                           ; Regs used in _convertAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6056  1674  3006               	movlw	6
  6057  1675  31A2  222D  3196   	fcall	_adcGetConversion
  6058  1678  0140               	movlb	0	; select bank0
  6059  1679  0821               	movf	?_adcGetConversion+1,w
  6060  167A  00EF               	movwf	convertAnalogValues@adc+1
  6061  167B  0820               	movf	?_adcGetConversion,w
  6062  167C  00EE               	movwf	convertAnalogValues@adc
  6063                           
  6064                           ;main.c: 345:  avgT = ema(adc, avgT, ( (uint32_t)(0.35 * 65535) ));
  6065  167D  086F               	movf	convertAnalogValues@adc+1,w
  6066  167E  00AD               	movwf	ema@in+1
  6067  167F  086E               	movf	convertAnalogValues@adc,w
  6068  1680  00AC               	movwf	ema@in
  6069  1681  0142               	movlb	2	; select bank2
  6070  1682  0831               	movf	(convertAnalogValues@avgT+1)^(0+256),w
  6071  1683  0140               	movlb	0	; select bank0
  6072  1684  00AF               	movwf	ema@average+1
  6073  1685  0142               	movlb	2	; select bank2
  6074  1686  0830               	movf	convertAnalogValues@avgT^(0+256),w
  6075  1687  0140               	movlb	0	; select bank0
  6076  1688  00AE               	movwf	ema@average
  6077  1689  3000               	movlw	0
  6078  168A  00B3               	movwf	ema@alpha+3
  6079  168B  3000               	movlw	0
  6080  168C  00B2               	movwf	ema@alpha+2
  6081  168D  3059               	movlw	89
  6082  168E  00B1               	movwf	ema@alpha+1
  6083  168F  3099               	movlw	153
  6084  1690  00B0               	movwf	ema@alpha
  6085  1691  31A6  26C3  3196   	fcall	_ema
  6086  1694  0140               	movlb	0	; select bank0
  6087  1695  082D               	movf	?_ema+1,w
  6088  1696  0142               	movlb	2	; select bank2
  6089  1697  00B1               	movwf	(convertAnalogValues@avgT+1)^(0+256)
  6090  1698  0140               	movlb	0	; select bank0
  6091  1699  082C               	movf	?_ema,w
  6092  169A  0142               	movlb	2	; select bank2
  6093  169B  00B0               	movwf	convertAnalogValues@avgT^(0+256)
  6094                           
  6095                           ;main.c: 346:  adc = adcGetConversion(0b010000);
  6096  169C  3010               	movlw	16
  6097  169D  31A2  222D  3196   	fcall	_adcGetConversion
  6098  16A0  0140               	movlb	0	; select bank0
  6099  16A1  0821               	movf	?_adcGetConversion+1,w
  6100  16A2  00EF               	movwf	convertAnalogValues@adc+1
  6101  16A3  0820               	movf	?_adcGetConversion,w
  6102  16A4  00EE               	movwf	convertAnalogValues@adc
  6103                           
  6104                           ;main.c: 347:  avgV = ema(adc, avgV, ( (uint32_t)(0.35 * 65535) ));
  6105  16A5  086F               	movf	convertAnalogValues@adc+1,w
  6106  16A6  00AD               	movwf	ema@in+1
  6107  16A7  086E               	movf	convertAnalogValues@adc,w
  6108  16A8  00AC               	movwf	ema@in
  6109  16A9  0142               	movlb	2	; select bank2
  6110  16AA  082F               	movf	(convertAnalogValues@avgV+1)^(0+256),w
  6111  16AB  0140               	movlb	0	; select bank0
  6112  16AC  00AF               	movwf	ema@average+1
  6113  16AD  0142               	movlb	2	; select bank2
  6114  16AE  082E               	movf	convertAnalogValues@avgV^(0+256),w
  6115  16AF  0140               	movlb	0	; select bank0
  6116  16B0  00AE               	movwf	ema@average
  6117  16B1  3000               	movlw	0
  6118  16B2  00B3               	movwf	ema@alpha+3
  6119  16B3  3000               	movlw	0
  6120  16B4  00B2               	movwf	ema@alpha+2
  6121  16B5  3059               	movlw	89
  6122  16B6  00B1               	movwf	ema@alpha+1
  6123  16B7  3099               	movlw	153
  6124  16B8  00B0               	movwf	ema@alpha
  6125  16B9  31A6  26C3  3196   	fcall	_ema
  6126  16BC  0140               	movlb	0	; select bank0
  6127  16BD  082D               	movf	?_ema+1,w
  6128  16BE  0142               	movlb	2	; select bank2
  6129  16BF  00AF               	movwf	(convertAnalogValues@avgV+1)^(0+256)
  6130  16C0  0140               	movlb	0	; select bank0
  6131  16C1  082C               	movf	?_ema,w
  6132  16C2  0142               	movlb	2	; select bank2
  6133  16C3  00AE               	movwf	convertAnalogValues@avgV^(0+256)
  6134                           
  6135                           ;main.c: 348:  adc = adcGetConversion(0b010001);
  6136  16C4  3011               	movlw	17
  6137  16C5  31A2  222D  3196   	fcall	_adcGetConversion
  6138  16C8  0140               	movlb	0	; select bank0
  6139  16C9  0821               	movf	?_adcGetConversion+1,w
  6140  16CA  00EF               	movwf	convertAnalogValues@adc+1
  6141  16CB  0820               	movf	?_adcGetConversion,w
  6142  16CC  00EE               	movwf	convertAnalogValues@adc
  6143                           
  6144                           ;main.c: 349:  avgI = ema(adc, avgI, ( (uint32_t)(0.35 * 65535) ));
  6145  16CD  086F               	movf	convertAnalogValues@adc+1,w
  6146  16CE  00AD               	movwf	ema@in+1
  6147  16CF  086E               	movf	convertAnalogValues@adc,w
  6148  16D0  00AC               	movwf	ema@in
  6149  16D1  0142               	movlb	2	; select bank2
  6150  16D2  082D               	movf	(convertAnalogValues@avgI+1)^(0+256),w
  6151  16D3  0140               	movlb	0	; select bank0
  6152  16D4  00AF               	movwf	ema@average+1
  6153  16D5  0142               	movlb	2	; select bank2
  6154  16D6  082C               	movf	convertAnalogValues@avgI^(0+256),w
  6155  16D7  0140               	movlb	0	; select bank0
  6156  16D8  00AE               	movwf	ema@average
  6157  16D9  3000               	movlw	0
  6158  16DA  00B3               	movwf	ema@alpha+3
  6159  16DB  3000               	movlw	0
  6160  16DC  00B2               	movwf	ema@alpha+2
  6161  16DD  3059               	movlw	89
  6162  16DE  00B1               	movwf	ema@alpha+1
  6163  16DF  3099               	movlw	153
  6164  16E0  00B0               	movwf	ema@alpha
  6165  16E1  31A6  26C3  3196   	fcall	_ema
  6166  16E4  0140               	movlb	0	; select bank0
  6167  16E5  082D               	movf	?_ema+1,w
  6168  16E6  0142               	movlb	2	; select bank2
  6169  16E7  00AD               	movwf	(convertAnalogValues@avgI+1)^(0+256)
  6170  16E8  0140               	movlb	0	; select bank0
  6171  16E9  082C               	movf	?_ema,w
  6172  16EA  0142               	movlb	2	; select bank2
  6173  16EB  00AC               	movwf	convertAnalogValues@avgI^(0+256)
  6174                           
  6175                           ;main.c: 350:  data->tempAux = (avgT * 0.1191) - 34.512;
  6176  16EC  30C2               	movlw	194
  6177  16ED  0140               	movlb	0	; select bank0
  6178  16EE  00D1               	movwf	___fladd@b+3
  6179  16EF  300A               	movlw	10
  6180  16F0  00D0               	movwf	___fladd@b+2
  6181  16F1  300C               	movlw	12
  6182  16F2  00CF               	movwf	___fladd@b+1
  6183  16F3  304A               	movlw	74
  6184  16F4  00CE               	movwf	___fladd@b
  6185  16F5  303D               	movlw	61
  6186  16F6  00B7               	movwf	___flmul@b+3
  6187  16F7  30F3               	movlw	243
  6188  16F8  00B6               	movwf	___flmul@b+2
  6189  16F9  30EA               	movlw	234
  6190  16FA  00B5               	movwf	___flmul@b+1
  6191  16FB  30B3               	movlw	179
  6192  16FC  00B4               	movwf	___flmul@b
  6193  16FD  0142               	movlb	2	; select bank2
  6194  16FE  0830               	movf	convertAnalogValues@avgT^(0+256),w
  6195  16FF  0140               	movlb	0	; select bank0
  6196  1700  00A6               	movwf	___xxtofl@val
  6197  1701  0142               	movlb	2	; select bank2
  6198  1702  0831               	movf	(convertAnalogValues@avgT+1)^(0+256),w
  6199  1703  0140               	movlb	0	; select bank0
  6200  1704  00A7               	movwf	___xxtofl@val+1
  6201  1705  01A8               	clrf	___xxtofl@val+2
  6202  1706  01A9               	clrf	___xxtofl@val+3
  6203  1707  3000               	movlw	0
  6204  1708  3190  2015  3196   	fcall	___xxtofl
  6205  170B  0140               	movlb	0	; select bank0
  6206  170C  0829               	movf	?___xxtofl+3,w
  6207  170D  00BB               	movwf	___flmul@a+3
  6208  170E  0828               	movf	?___xxtofl+2,w
  6209  170F  00BA               	movwf	___flmul@a+2
  6210  1710  0827               	movf	?___xxtofl+1,w
  6211  1711  00B9               	movwf	___flmul@a+1
  6212  1712  0826               	movf	?___xxtofl,w
  6213  1713  00B8               	movwf	___flmul@a
  6214  1714  3185  2502  3196   	fcall	___flmul
  6215  1717  0140               	movlb	0	; select bank0
  6216  1718  0837               	movf	?___flmul+3,w
  6217  1719  00D5               	movwf	___fladd@a+3
  6218  171A  0836               	movf	?___flmul+2,w
  6219  171B  00D4               	movwf	___fladd@a+2
  6220  171C  0835               	movf	?___flmul+1,w
  6221  171D  00D3               	movwf	___fladd@a+1
  6222  171E  0834               	movf	?___flmul,w
  6223  171F  00D2               	movwf	___fladd@a
  6224  1720  318C  241B  3196   	fcall	___fladd
  6225  1723  0140               	movlb	0	; select bank0
  6226  1724  0868               	movf	convertAnalogValues@data,w
  6227  1725  0086               	movwf	6
  6228  1726  0869               	movf	convertAnalogValues@data+1,w
  6229  1727  0087               	movwf	7
  6230  1728  3150               	addfsr 1,16
  6231  1729  084E               	movf	?___fladd,w
  6232  172A  3FC0               	movwi [0]fsr1
  6233  172B  084F               	movf	?___fladd+1,w
  6234  172C  3FC1               	movwi [1]fsr1
  6235  172D  0850               	movf	?___fladd+2,w
  6236  172E  3FC2               	movwi [2]fsr1
  6237  172F  0851               	movf	?___fladd+3,w
  6238  1730  3FC3               	movwi [3]fsr1
  6239                           
  6240                           ;main.c: 351:  data->voltage = (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
  6241  1731  3040               	movlw	64
  6242  1732  00B7               	movwf	___flmul@b+3
  6243  1733  30A0               	movlw	160
  6244  1734  00B6               	movwf	___flmul@b+2
  6245  1735  3000               	movlw	0
  6246  1736  00B5               	movwf	___flmul@b+1
  6247  1737  3000               	movlw	0
  6248  1738  00B4               	movwf	___flmul@b
  6249  1739  0142               	movlb	2	; select bank2
  6250  173A  082E               	movf	convertAnalogValues@avgV^(0+256),w
  6251  173B  0140               	movlb	0	; select bank0
  6252  173C  00A6               	movwf	___xxtofl@val
  6253  173D  0142               	movlb	2	; select bank2
  6254  173E  082F               	movf	(convertAnalogValues@avgV+1)^(0+256),w
  6255  173F  0140               	movlb	0	; select bank0
  6256  1740  00A7               	movwf	___xxtofl@val+1
  6257  1741  01A8               	clrf	___xxtofl@val+2
  6258  1742  01A9               	clrf	___xxtofl@val+3
  6259  1743  3000               	movlw	0
  6260  1744  3190  2015  3196   	fcall	___xxtofl
  6261  1747  0140               	movlb	0	; select bank0
  6262  1748  0829               	movf	?___xxtofl+3,w
  6263  1749  00BB               	movwf	___flmul@a+3
  6264  174A  0828               	movf	?___xxtofl+2,w
  6265  174B  00BA               	movwf	___flmul@a+2
  6266  174C  0827               	movf	?___xxtofl+1,w
  6267  174D  00B9               	movwf	___flmul@a+1
  6268  174E  0826               	movf	?___xxtofl,w
  6269  174F  00B8               	movwf	___flmul@a
  6270  1750  3185  2502  3196   	fcall	___flmul
  6271  1753  0140               	movlb	0	; select bank0
  6272  1754  0837               	movf	?___flmul+3,w
  6273  1755  00ED               	movwf	_convertAnalogValues$2145+3
  6274  1756  0836               	movf	?___flmul+2,w
  6275  1757  00EC               	movwf	_convertAnalogValues$2145+2
  6276  1758  0835               	movf	?___flmul+1,w
  6277  1759  00EB               	movwf	_convertAnalogValues$2145+1
  6278  175A  0834               	movf	?___flmul,w
  6279  175B  00EA               	movwf	_convertAnalogValues$2145
  6280                           
  6281                           ;main.c: 351:  data->voltage = (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
  6282  175C  3047               	movlw	71
  6283  175D  00D1               	movwf	___fldiv@a+3
  6284  175E  303B               	movlw	59
  6285  175F  00D0               	movwf	___fldiv@a+2
  6286  1760  30D1               	movlw	209
  6287  1761  00CF               	movwf	___fldiv@a+1
  6288  1762  3000               	movlw	0
  6289  1763  00CE               	movwf	___fldiv@a
  6290  1764  3043               	movlw	67
  6291  1765  00B7               	movwf	___flmul@b+3
  6292  1766  3045               	movlw	69
  6293  1767  00B6               	movwf	___flmul@b+2
  6294  1768  3000               	movlw	0
  6295  1769  00B5               	movwf	___flmul@b+1
  6296  176A  3000               	movlw	0
  6297  176B  00B4               	movwf	___flmul@b
  6298  176C  086D               	movf	_convertAnalogValues$2145+3,w
  6299  176D  00BB               	movwf	___flmul@a+3
  6300  176E  086C               	movf	_convertAnalogValues$2145+2,w
  6301  176F  00BA               	movwf	___flmul@a+2
  6302  1770  086B               	movf	_convertAnalogValues$2145+1,w
  6303  1771  00B9               	movwf	___flmul@a+1
  6304  1772  086A               	movf	_convertAnalogValues$2145,w
  6305  1773  00B8               	movwf	___flmul@a
  6306  1774  3185  2502  3196   	fcall	___flmul
  6307  1777  0140               	movlb	0	; select bank0
  6308  1778  0837               	movf	?___flmul+3,w
  6309  1779  00D5               	movwf	___fldiv@b+3
  6310  177A  0836               	movf	?___flmul+2,w
  6311  177B  00D4               	movwf	___fldiv@b+2
  6312  177C  0835               	movf	?___flmul+1,w
  6313  177D  00D3               	movwf	___fldiv@b+1
  6314  177E  0834               	movf	?___flmul,w
  6315  177F  00D2               	movwf	___fldiv@b
  6316  1780  3193  2374  3196   	fcall	___fldiv
  6317  1783  0140               	movlb	0	; select bank0
  6318  1784  0868               	movf	convertAnalogValues@data,w
  6319  1785  0086               	movwf	6
  6320  1786  0869               	movf	convertAnalogValues@data+1,w
  6321  1787  0087               	movwf	7
  6322  1788  3154               	addfsr 1,20
  6323  1789  084E               	movf	?___fldiv,w
  6324  178A  3FC0               	movwi [0]fsr1
  6325  178B  084F               	movf	?___fldiv+1,w
  6326  178C  3FC1               	movwi [1]fsr1
  6327  178D  0850               	movf	?___fldiv+2,w
  6328  178E  3FC2               	movwi [2]fsr1
  6329  178F  0851               	movf	?___fldiv+3,w
  6330  1790  3FC3               	movwi [3]fsr1
  6331                           
  6332                           ;main.c: 352:  data->current = (avgI * 5.0) / (1023.0 * 0.05 * 50.0);
  6333  1791  3045               	movlw	69
  6334  1792  00D1               	movwf	___fldiv@a+3
  6335  1793  301F               	movlw	31
  6336  1794  00D0               	movwf	___fldiv@a+2
  6337  1795  30D8               	movlw	216
  6338  1796  00CF               	movwf	___fldiv@a+1
  6339  1797  3000               	movlw	0
  6340  1798  00CE               	movwf	___fldiv@a
  6341  1799  3040               	movlw	64
  6342  179A  00B7               	movwf	___flmul@b+3
  6343  179B  30A0               	movlw	160
  6344  179C  00B6               	movwf	___flmul@b+2
  6345  179D  3000               	movlw	0
  6346  179E  00B5               	movwf	___flmul@b+1
  6347  179F  3000               	movlw	0
  6348  17A0  00B4               	movwf	___flmul@b
  6349  17A1  0142               	movlb	2	; select bank2
  6350  17A2  082C               	movf	convertAnalogValues@avgI^(0+256),w
  6351  17A3  0140               	movlb	0	; select bank0
  6352  17A4  00A6               	movwf	___xxtofl@val
  6353  17A5  0142               	movlb	2	; select bank2
  6354  17A6  082D               	movf	(convertAnalogValues@avgI+1)^(0+256),w
  6355  17A7  0140               	movlb	0	; select bank0
  6356  17A8  00A7               	movwf	___xxtofl@val+1
  6357  17A9  01A8               	clrf	___xxtofl@val+2
  6358  17AA  01A9               	clrf	___xxtofl@val+3
  6359  17AB  3000               	movlw	0
  6360  17AC  3190  2015  3196   	fcall	___xxtofl
  6361  17AF  0140               	movlb	0	; select bank0
  6362  17B0  0829               	movf	?___xxtofl+3,w
  6363  17B1  00BB               	movwf	___flmul@a+3
  6364  17B2  0828               	movf	?___xxtofl+2,w
  6365  17B3  00BA               	movwf	___flmul@a+2
  6366  17B4  0827               	movf	?___xxtofl+1,w
  6367  17B5  00B9               	movwf	___flmul@a+1
  6368  17B6  0826               	movf	?___xxtofl,w
  6369  17B7  00B8               	movwf	___flmul@a
  6370  17B8  3185  2502  3196   	fcall	___flmul
  6371  17BB  0140               	movlb	0	; select bank0
  6372  17BC  0837               	movf	?___flmul+3,w
  6373  17BD  00D5               	movwf	___fldiv@b+3
  6374  17BE  0836               	movf	?___flmul+2,w
  6375  17BF  00D4               	movwf	___fldiv@b+2
  6376  17C0  0835               	movf	?___flmul+1,w
  6377  17C1  00D3               	movwf	___fldiv@b+1
  6378  17C2  0834               	movf	?___flmul,w
  6379  17C3  00D2               	movwf	___fldiv@b
  6380  17C4  3193  2374  3196   	fcall	___fldiv
  6381  17C7  0140               	movlb	0	; select bank0
  6382  17C8  0868               	movf	convertAnalogValues@data,w
  6383  17C9  0086               	movwf	6
  6384  17CA  0869               	movf	convertAnalogValues@data+1,w
  6385  17CB  0087               	movwf	7
  6386  17CC  3158               	addfsr 1,24
  6387  17CD  084E               	movf	?___fldiv,w
  6388  17CE  3FC0               	movwi [0]fsr1
  6389  17CF  084F               	movf	?___fldiv+1,w
  6390  17D0  3FC1               	movwi [1]fsr1
  6391  17D1  0850               	movf	?___fldiv+2,w
  6392  17D2  3FC2               	movwi [2]fsr1
  6393  17D3  0851               	movf	?___fldiv+3,w
  6394  17D4  3FC3               	movwi [3]fsr1
  6395                           
  6396                           ;main.c: 353:  data->power = data->voltage * data->current;
  6397  17D5  0868               	movf	convertAnalogValues@data,w
  6398  17D6  0086               	movwf	6
  6399  17D7  0869               	movf	convertAnalogValues@data+1,w
  6400  17D8  0087               	movwf	7
  6401  17D9  3158               	addfsr 1,24
  6402  17DA  3F40               	moviw [0]fsr1
  6403  17DB  00B4               	movwf	___flmul@b
  6404  17DC  3F41               	moviw [1]fsr1
  6405  17DD  00B5               	movwf	___flmul@b+1
  6406  17DE  3F42               	moviw [2]fsr1
  6407  17DF  00B6               	movwf	___flmul@b+2
  6408  17E0  3F43               	moviw [3]fsr1
  6409  17E1  00B7               	movwf	___flmul@b+3
  6410  17E2  0868               	movf	convertAnalogValues@data,w
  6411  17E3  0086               	movwf	6
  6412  17E4  0869               	movf	convertAnalogValues@data+1,w
  6413  17E5  0087               	movwf	7
  6414  17E6  3154               	addfsr 1,20
  6415  17E7  3F40               	moviw [0]fsr1
  6416  17E8  00B8               	movwf	___flmul@a
  6417  17E9  3F41               	moviw [1]fsr1
  6418  17EA  00B9               	movwf	___flmul@a+1
  6419  17EB  3F42               	moviw [2]fsr1
  6420  17EC  00BA               	movwf	___flmul@a+2
  6421  17ED  3F43               	moviw [3]fsr1
  6422  17EE  00BB               	movwf	___flmul@a+3
  6423  17EF  3185  2502         	fcall	___flmul
  6424  17F1  0140               	movlb	0	; select bank0
  6425  17F2  0868               	movf	convertAnalogValues@data,w
  6426  17F3  0086               	movwf	6
  6427  17F4  0869               	movf	convertAnalogValues@data+1,w
  6428  17F5  0087               	movwf	7
  6429  17F6  315C               	addfsr 1,28
  6430  17F7  0834               	movf	?___flmul,w
  6431  17F8  3FC0               	movwi [0]fsr1
  6432  17F9  0835               	movf	?___flmul+1,w
  6433  17FA  3FC1               	movwi [1]fsr1
  6434  17FB  0836               	movf	?___flmul+2,w
  6435  17FC  3FC2               	movwi [2]fsr1
  6436  17FD  0837               	movf	?___flmul+3,w
  6437  17FE  3FC3               	movwi [3]fsr1
  6438  17FF  0008               	return
  6439  1800                     __end_of_convertAnalogValues:	
  6440                           
  6441                           	psect	text3
  6442  21B2                     __ptext3:	
  6443 ;; *************** function _OLED_Off *****************
  6444 ;; Defined at:
  6445 ;;		line 12 in file "oled.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;		None
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;		None
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  1    wreg      void 
  6452 ;; Registers used:
  6453 ;;		wreg, status,2, status,0, pclath, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6463 ;;Total ram usage:        0 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:    7
  6466 ;; This function calls:
  6467 ;;		_OLED_command
  6468 ;; This function is called by:
  6469 ;;		_systemCheck
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           
  6474                           ;psect for function _OLED_Off
  6475  21B2                     _OLED_Off:	
  6476                           
  6477                           ;oled.c: 14:  OLED_command(0x08);
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in _OLED_Off: [wreg+status,2+status,0+pclath+cstack]
  6481  21B2  3008               	movlw	8
  6482  21B3  31A1  219E  31A1   	fcall	_OLED_command
  6483                           
  6484                           ;oled.c: 15:  OLED_command(0x13);
  6485  21B6  3013               	movlw	19
  6486  21B7  31A1  219E         	fcall	_OLED_command
  6487                           
  6488                           ;oled.c: 16:  LATBbits.LATB5 = 1;
  6489  21B9  0140               	movlb	0	; select bank0
  6490  21BA  1699               	bsf	25,5	;volatile
  6491  21BB  0008               	return
  6492  21BC                     __end_of_OLED_Off:	
  6493                           
  6494                           	psect	text4
  6495  266B                     __ptext4:	
  6496 ;; *************** function _menu *****************
  6497 ;; Defined at:
  6498 ;;		line 93 in file "menuhelper.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  data            2   28[BANK1 ] PTR struct .
  6501 ;;		 -> data(173), 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  func            2   36[BANK1 ] PTR FTN(PTR struct .,)un
  6504 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  6505 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  6506 ;;		 -> statusView(1), NULL(0), 
  6507 ;;  nextState       1   38[BANK1 ] char 
  6508 ;;  pb              1   35[BANK1 ] enum E7943
  6509 ;;  page            1   34[BANK1 ] char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      void 
  6512 ;; Registers used:
  6513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6519 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6520 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6521 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6522 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6523 ;;Total ram usage:       11 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:   10
  6526 ;; This function calls:
  6527 ;;		_channelSetup
  6528 ;;		_channelView
  6529 ;;		_getNextState
  6530 ;;		_getPB
  6531 ;;		_getStateFunc
  6532 ;;		_menuError
  6533 ;;		_setDPOffset
  6534 ;;		_setFudgeFactor
  6535 ;;		_setLensDia
  6536 ;;		_setOutputPower
  6537 ;;		_setSkyTemp
  6538 ;;		_setup
  6539 ;;		_statusView
  6540 ;; This function is called by:
  6541 ;;		_main
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function _menu
  6547  266B                     _menu:	
  6548                           
  6549                           ;menuhelper.c: 93: void menu(t_globalData *data);menuhelper.c: 94: {;menuhelper.c: 95:  
      +                          static uint8_t state = ST_STATUS_VIEW;;menuhelper.c: 96:  int8_t page, nextState;;menuhe
      +                          lper.c: 97:  enum e_buttonPress pb;;menuhelper.c: 98:  t_stateFuncPtr func;;menuhelper.c
      +                          : 101:  func = getStateFunc(state);
  6550                           
  6551                           ;incstack = 0
  6552                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6553  266B  0141               	movlb	1	; select bank1
  6554  266C  085F               	movf	menu@state^(0+128),w
  6555  266D  31A4  2463  31A6   	fcall	_getStateFunc
  6556  2670  0140               	movlb	0	; select bank0
  6557  2671  0827               	movf	?_getStateFunc+1,w
  6558  2672  0141               	movlb	1	; select bank1
  6559  2673  00C5               	movwf	(menu@func+1)^(0+128)
  6560  2674  0140               	movlb	0	; select bank0
  6561  2675  0826               	movf	?_getStateFunc,w
  6562  2676  0141               	movlb	1	; select bank1
  6563  2677  00C4               	movwf	menu@func^(0+128)
  6564                           
  6565                           ;menuhelper.c: 102:  if (func)
  6566  2678  0844               	movf	menu@func^(0+128),w
  6567  2679  0445               	iorwf	(menu@func+1)^(0+128),w
  6568  267A  1903               	btfsc	3,2
  6569  267B  2E8A               	goto	l5461
  6570                           
  6571                           ;menuhelper.c: 103:   page = (*func)(data);
  6572  267C  083D               	movf	(menu@data+1)^(0+128),w
  6573  267D  00B2               	movwf	(setFudgeFactor@data+1)^(0+128)
  6574  267E  083C               	movf	menu@data^(0+128),w
  6575  267F  00B1               	movwf	setFudgeFactor@data^(0+128)
  6576  2680  0845               	movf	(menu@func+1)^(0+128),w
  6577  2681  008A               	movwf	10
  6578  2682  0844               	movf	menu@func^(0+128),w
  6579  2683  000A               	callw
  6580  2684  31A6               	pagesel	$
  6581  2685  0141               	movlb	1	; select bank1
  6582  2686  00BE               	movwf	??_menu^(0+128)
  6583  2687  083E               	movf	??_menu^(0+128),w
  6584  2688  00C2               	movwf	menu@page^(0+128)
  6585  2689  2E8D               	goto	l5463
  6586  268A                     l5461:	
  6587                           
  6588                           ;menuhelper.c: 105:   menuError();
  6589  268A  3190  2004  31A6   	fcall	_menuError
  6590  268D                     l5463:	
  6591                           
  6592                           ;menuhelper.c: 107:  g_updateScreen = 0;
  6593  268D  0141               	movlb	1	; select bank1
  6594  268E  01EF               	clrf	_g_updateScreen^(0+128)
  6595                           
  6596                           ;menuhelper.c: 108:  pb = getPB();
  6597  268F  31A1  21DD  31A6   	fcall	_getPB
  6598  2692  0141               	movlb	1	; select bank1
  6599  2693  00BE               	movwf	??_menu^(0+128)
  6600  2694  083E               	movf	??_menu^(0+128),w
  6601  2695  00C3               	movwf	menu@pb^(0+128)
  6602                           
  6603                           ;menuhelper.c: 110:  nextState = getNextState(state, page, pb);
  6604  2696  0842               	movf	menu@page^(0+128),w
  6605  2697  00BE               	movwf	??_menu^(0+128)
  6606  2698  083E               	movf	??_menu^(0+128),w
  6607  2699  0140               	movlb	0	; select bank0
  6608  269A  00A6               	movwf	getNextState@page
  6609  269B  0141               	movlb	1	; select bank1
  6610  269C  0843               	movf	menu@pb^(0+128),w
  6611  269D  00BF               	movwf	(??_menu+1)^(0+128)
  6612  269E  083F               	movf	(??_menu+1)^(0+128),w
  6613  269F  0140               	movlb	0	; select bank0
  6614  26A0  00A7               	movwf	getNextState@pb
  6615  26A1  0141               	movlb	1	; select bank1
  6616  26A2  085F               	movf	menu@state^(0+128),w
  6617  26A3  319C  2416  31A6   	fcall	_getNextState
  6618  26A6  0141               	movlb	1	; select bank1
  6619  26A7  00C0               	movwf	(??_menu+2)^(0+128)
  6620  26A8  0840               	movf	(??_menu+2)^(0+128),w
  6621  26A9  00C6               	movwf	menu@nextState^(0+128)
  6622                           
  6623                           ;menuhelper.c: 112:  if (nextState > -1) {
  6624  26AA  1BC6               	btfsc	menu@nextState^(0+128),7
  6625  26AB  0008               	return
  6626                           
  6627                           ;menuhelper.c: 114:   if (state != nextState) {
  6628  26AC  0846               	movf	menu@nextState^(0+128),w
  6629  26AD  00BE               	movwf	??_menu^(0+128)
  6630  26AE  01BF               	clrf	(??_menu^(0+128)+1)
  6631  26AF  1BBE               	btfsc	??_menu^(0+128),7
  6632  26B0  03BF               	decf	(??_menu^(0+128)+1),f
  6633  26B1  085F               	movf	menu@state^(0+128),w
  6634  26B2  00C0               	movwf	(??_menu+2)^(0+128)
  6635  26B3  01C1               	clrf	((??_menu+2)^(0+128)+1)
  6636  26B4  083F               	movf	(??_menu+1)^(0+128),w
  6637  26B5  0641               	xorwf	(??_menu+3)^(0+128),w
  6638  26B6  1D03               	skipz
  6639  26B7  2EBA               	goto	u6395
  6640  26B8  083E               	movf	??_menu^(0+128),w
  6641  26B9  0640               	xorwf	(??_menu+2)^(0+128),w
  6642  26BA                     u6395:	
  6643  26BA  1903               	skipnz
  6644  26BB  0008               	return
  6645                           
  6646                           ;menuhelper.c: 115:    g_updateScreen = 1;
  6647  26BC  01EF               	clrf	_g_updateScreen^(0+128)
  6648  26BD  0AEF               	incf	_g_updateScreen^(0+128),f
  6649                           
  6650                           ;menuhelper.c: 116:    state = nextState;
  6651  26BE  0846               	movf	menu@nextState^(0+128),w
  6652  26BF  00BE               	movwf	??_menu^(0+128)
  6653  26C0  083E               	movf	??_menu^(0+128),w
  6654  26C1  00DF               	movwf	menu@state^(0+128)
  6655  26C2  0008               	return
  6656  26C3                     __end_of_menu:	
  6657                           
  6658                           	psect	text5
  6659  1911                     __ptext5:	
  6660 ;; *************** function _setFudgeFactor *****************
  6661 ;; Defined at:
  6662 ;;		line 260 in file "menu.c"
  6663 ;; Parameters:    Size  Location     Type
  6664 ;;  data            2   17[BANK1 ] PTR struct .
  6665 ;;		 -> data(173), 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  1    wreg      unsigned char 
  6670 ;; Registers used:
  6671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6677 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6679 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6680 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6681 ;;Total ram usage:        3 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    8
  6684 ;; This function calls:
  6685 ;;		_OLED_print_xy
  6686 ;;		_ftoa
  6687 ;;		_returnToPage
  6688 ;;		_spinInput
  6689 ;; This function is called by:
  6690 ;;		_menu
  6691 ;; This function uses a non-reentrant model
  6692 ;;
  6693                           
  6694                           
  6695                           ;psect for function _setFudgeFactor
  6696  1911                     _setFudgeFactor:	
  6697                           
  6698                           ;menu.c: 260: uint8_t setFudgeFactor(t_globalData *data);menu.c: 261: {;menu.c: 262:  re
      +                          turnToPage(0);
  6699                           
  6700                           ;incstack = 0
  6701                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6702  1911  3000               	movlw	0
  6703  1912  31A3  23BA  3199   	fcall	_returnToPage
  6704                           
  6705                           ;menu.c: 263:  if (g_updateScreen)
  6706  1915  0141               	movlb	1	; select bank1
  6707  1916  086F               	movf	_g_updateScreen^(0+128),w
  6708  1917  1903               	btfsc	3,2
  6709  1918  2923               	goto	l4579
  6710                           
  6711                           ;menu.c: 264:   OLED_print_xy(0, 0, "Fudge factor");
  6712  1919  0140               	movlb	0	; select bank0
  6713  191A  01A7               	clrf	OLED_print_xy@row
  6714  191B  30A0               	movlw	low ((STR_39+24)| (0+32768))
  6715  191C  00A8               	movwf	OLED_print_xy@s
  6716  191D  30A8               	movlw	high ((STR_39+24)| (0+32768))
  6717  191E  00A9               	movwf	OLED_print_xy@s+1
  6718  191F  3000               	movlw	0
  6719  1920  31A3  2388  3199   	fcall	_OLED_print_xy
  6720  1923                     l4579:	
  6721                           
  6722                           ;menu.c: 265:  spinInput(&data->fudgeFactor, 0.1, 5.0, 0.1);
  6723  1923  0141               	movlb	1	; select bank1
  6724  1924  0831               	movf	setFudgeFactor@data^(0+128),w
  6725  1925  3E28               	addlw	40
  6726  1926  00A0               	movwf	spinInput@input^(0+128)
  6727  1927  3000               	movlw	0
  6728  1928  3D32               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  6729  1929  00A1               	movwf	(spinInput@input+1)^(0+128)
  6730  192A  303D               	movlw	61
  6731  192B  00A5               	movwf	(spinInput@min+3)^(0+128)
  6732  192C  30CC               	movlw	204
  6733  192D  00A4               	movwf	(spinInput@min+2)^(0+128)
  6734  192E  30CC               	movlw	204
  6735  192F  00A3               	movwf	(spinInput@min+1)^(0+128)
  6736  1930  30CD               	movlw	205
  6737  1931  00A2               	movwf	spinInput@min^(0+128)
  6738  1932  3040               	movlw	64
  6739  1933  00A9               	movwf	(spinInput@max+3)^(0+128)
  6740  1934  30A0               	movlw	160
  6741  1935  00A8               	movwf	(spinInput@max+2)^(0+128)
  6742  1936  3000               	movlw	0
  6743  1937  00A7               	movwf	(spinInput@max+1)^(0+128)
  6744  1938  3000               	movlw	0
  6745  1939  00A6               	movwf	spinInput@max^(0+128)
  6746  193A  303D               	movlw	61
  6747  193B  00AD               	movwf	(spinInput@step+3)^(0+128)
  6748  193C  30CC               	movlw	204
  6749  193D  00AC               	movwf	(spinInput@step+2)^(0+128)
  6750  193E  30CC               	movlw	204
  6751  193F  00AB               	movwf	(spinInput@step+1)^(0+128)
  6752  1940  30CD               	movlw	205
  6753  1941  00AA               	movwf	spinInput@step^(0+128)
  6754  1942  3188  2018  3199   	fcall	_spinInput
  6755                           
  6756                           ;menu.c: 266:  ftoa(str, data->fudgeFactor, 3, 1);
  6757  1945  0141               	movlb	1	; select bank1
  6758  1946  0831               	movf	setFudgeFactor@data^(0+128),w
  6759  1947  3E28               	addlw	40
  6760  1948  0086               	movwf	6
  6761  1949  3000               	movlw	0
  6762  194A  3D32               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  6763  194B  0087               	movwf	7
  6764  194C  3F40               	moviw [0]fsr1
  6765  194D  00A5               	movwf	ftoa@fValue^(0+128)
  6766  194E  3F41               	moviw [1]fsr1
  6767  194F  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  6768  1950  3F42               	moviw [2]fsr1
  6769  1951  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  6770  1952  3F43               	moviw [3]fsr1
  6771  1953  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  6772  1954  3003               	movlw	3
  6773  1955  00B3               	movwf	??_setFudgeFactor^(0+128)
  6774  1956  0833               	movf	??_setFudgeFactor^(0+128),w
  6775  1957  00A9               	movwf	ftoa@width^(0+128)
  6776  1958  01AA               	clrf	ftoa@prec^(0+128)
  6777  1959  0AAA               	incf	ftoa@prec^(0+128),f
  6778  195A  3059               	movlw	(low (_str| (0+256)))& (0+255)
  6779  195B  3194  24EE  3199   	fcall	_ftoa
  6780                           
  6781                           ;menu.c: 267:  OLED_print_xy(0, 1, "\004");
  6782  195E  0140               	movlb	0	; select bank0
  6783  195F  01A7               	clrf	OLED_print_xy@row
  6784  1960  0AA7               	incf	OLED_print_xy@row,f
  6785  1961  30C9               	movlw	low ((STR_45+5)| (0+32768))
  6786  1962  00A8               	movwf	OLED_print_xy@s
  6787  1963  30A9               	movlw	high ((STR_45+5)| (0+32768))
  6788  1964  00A9               	movwf	OLED_print_xy@s+1
  6789  1965  3000               	movlw	0
  6790  1966  31A3  2388  3199   	fcall	_OLED_print_xy
  6791                           
  6792                           ;menu.c: 268:  OLED_print_xy(1, 1, str);
  6793  1969  0140               	movlb	0	; select bank0
  6794  196A  01A7               	clrf	OLED_print_xy@row
  6795  196B  0AA7               	incf	OLED_print_xy@row,f
  6796  196C  3059               	movlw	low _str
  6797  196D  00A8               	movwf	OLED_print_xy@s
  6798  196E  3001               	movlw	high _str
  6799  196F  00A9               	movwf	OLED_print_xy@s+1
  6800  1970  3001               	movlw	1
  6801  1971  31A3  2388  3199   	fcall	_OLED_print_xy
  6802                           
  6803                           ;menu.c: 269:  OLED_print_xy(4, 1, " \003      ");
  6804  1974  0140               	movlb	0	; select bank0
  6805  1975  01A7               	clrf	OLED_print_xy@row
  6806  1976  0AA7               	incf	OLED_print_xy@row,f
  6807  1977  3074               	movlw	low (STR_52| (0+32768))
  6808  1978  00A8               	movwf	OLED_print_xy@s
  6809  1979  30A9               	movlw	high (STR_52| (0+32768))
  6810  197A  00A9               	movwf	OLED_print_xy@s+1
  6811  197B  3004               	movlw	4
  6812  197C  31A3  2388         	fcall	_OLED_print_xy
  6813                           
  6814                           ;menu.c: 270:  return 0;
  6815  197E  3000               	movlw	0
  6816  197F  0008               	return
  6817  1980                     __end_of_setFudgeFactor:	
  6818                           
  6819                           	psect	text6
  6820  1834                     __ptext6:	
  6821 ;; *************** function _setSkyTemp *****************
  6822 ;; Defined at:
  6823 ;;		line 243 in file "menu.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;  data            2   17[BANK1 ] PTR struct .
  6826 ;;		 -> data(173), 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;		None
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      unsigned char 
  6831 ;; Registers used:
  6832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6838 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6840 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6841 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6842 ;;Total ram usage:        3 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    8
  6845 ;; This function calls:
  6846 ;;		_OLED_print_xy
  6847 ;;		_ftoa
  6848 ;;		_returnToPage
  6849 ;;		_spinInput
  6850 ;; This function is called by:
  6851 ;;		_menu
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           
  6856                           ;psect for function _setSkyTemp
  6857  1834                     _setSkyTemp:	
  6858                           
  6859                           ;menu.c: 243: uint8_t setSkyTemp(t_globalData *data);menu.c: 244: {;menu.c: 245:  return
      +                          ToPage(0);
  6860                           
  6861                           ;incstack = 0
  6862                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6863  1834  3000               	movlw	0
  6864  1835  31A3  23BA  3198   	fcall	_returnToPage
  6865                           
  6866                           ;menu.c: 246:  if (g_updateScreen)
  6867  1838  0141               	movlb	1	; select bank1
  6868  1839  086F               	movf	_g_updateScreen^(0+128),w
  6869  183A  1903               	btfsc	3,2
  6870  183B  2846               	goto	l4565
  6871                           
  6872                           ;menu.c: 247:   OLED_print_xy(0, 0, "Sky temp.   ");
  6873  183C  0140               	movlb	0	; select bank0
  6874  183D  01A7               	clrf	OLED_print_xy@row
  6875  183E  30FC               	movlw	low (STR_47| (0+32768))
  6876  183F  00A8               	movwf	OLED_print_xy@s
  6877  1840  30A8               	movlw	high (STR_47| (0+32768))
  6878  1841  00A9               	movwf	OLED_print_xy@s+1
  6879  1842  3000               	movlw	0
  6880  1843  31A3  2388  3198   	fcall	_OLED_print_xy
  6881  1846                     l4565:	
  6882                           
  6883                           ;menu.c: 248:  spinInput(&data->skyTemp, -50, -20, 1);
  6884  1846  0141               	movlb	1	; select bank1
  6885  1847  0831               	movf	setSkyTemp@data^(0+128),w
  6886  1848  3E24               	addlw	36
  6887  1849  00A0               	movwf	spinInput@input^(0+128)
  6888  184A  3000               	movlw	0
  6889  184B  3D32               	addwfc	(setSkyTemp@data+1)^(0+128),w
  6890  184C  00A1               	movwf	(spinInput@input+1)^(0+128)
  6891  184D  30C2               	movlw	194
  6892  184E  00A5               	movwf	(spinInput@min+3)^(0+128)
  6893  184F  3048               	movlw	72
  6894  1850  00A4               	movwf	(spinInput@min+2)^(0+128)
  6895  1851  3000               	movlw	0
  6896  1852  00A3               	movwf	(spinInput@min+1)^(0+128)
  6897  1853  3000               	movlw	0
  6898  1854  00A2               	movwf	spinInput@min^(0+128)
  6899  1855  30C1               	movlw	193
  6900  1856  00A9               	movwf	(spinInput@max+3)^(0+128)
  6901  1857  30A0               	movlw	160
  6902  1858  00A8               	movwf	(spinInput@max+2)^(0+128)
  6903  1859  3000               	movlw	0
  6904  185A  00A7               	movwf	(spinInput@max+1)^(0+128)
  6905  185B  3000               	movlw	0
  6906  185C  00A6               	movwf	spinInput@max^(0+128)
  6907  185D  303F               	movlw	63
  6908  185E  00AD               	movwf	(spinInput@step+3)^(0+128)
  6909  185F  3080               	movlw	128
  6910  1860  00AC               	movwf	(spinInput@step+2)^(0+128)
  6911  1861  3000               	movlw	0
  6912  1862  00AB               	movwf	(spinInput@step+1)^(0+128)
  6913  1863  3000               	movlw	0
  6914  1864  00AA               	movwf	spinInput@step^(0+128)
  6915  1865  3188  2018  3198   	fcall	_spinInput
  6916                           
  6917                           ;menu.c: 249:  ftoa(str, data->skyTemp, 3, 0);
  6918  1868  0141               	movlb	1	; select bank1
  6919  1869  0831               	movf	setSkyTemp@data^(0+128),w
  6920  186A  3E24               	addlw	36
  6921  186B  0086               	movwf	6
  6922  186C  3000               	movlw	0
  6923  186D  3D32               	addwfc	(setSkyTemp@data+1)^(0+128),w
  6924  186E  0087               	movwf	7
  6925  186F  3F40               	moviw [0]fsr1
  6926  1870  00A5               	movwf	ftoa@fValue^(0+128)
  6927  1871  3F41               	moviw [1]fsr1
  6928  1872  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  6929  1873  3F42               	moviw [2]fsr1
  6930  1874  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  6931  1875  3F43               	moviw [3]fsr1
  6932  1876  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  6933  1877  3003               	movlw	3
  6934  1878  00B3               	movwf	??_setSkyTemp^(0+128)
  6935  1879  0833               	movf	??_setSkyTemp^(0+128),w
  6936  187A  00A9               	movwf	ftoa@width^(0+128)
  6937  187B  01AA               	clrf	ftoa@prec^(0+128)
  6938  187C  3059               	movlw	(low (_str| (0+256)))& (0+255)
  6939  187D  3194  24EE  3198   	fcall	_ftoa
  6940                           
  6941                           ;menu.c: 250:  OLED_print_xy(0, 1, "\004");
  6942  1880  0140               	movlb	0	; select bank0
  6943  1881  01A7               	clrf	OLED_print_xy@row
  6944  1882  0AA7               	incf	OLED_print_xy@row,f
  6945  1883  30C9               	movlw	low ((STR_45+5)| (0+32768))
  6946  1884  00A8               	movwf	OLED_print_xy@s
  6947  1885  30A9               	movlw	high ((STR_45+5)| (0+32768))
  6948  1886  00A9               	movwf	OLED_print_xy@s+1
  6949  1887  3000               	movlw	0
  6950  1888  31A3  2388  3198   	fcall	_OLED_print_xy
  6951                           
  6952                           ;menu.c: 251:  OLED_print_xy(1, 1, str);
  6953  188B  0140               	movlb	0	; select bank0
  6954  188C  01A7               	clrf	OLED_print_xy@row
  6955  188D  0AA7               	incf	OLED_print_xy@row,f
  6956  188E  3059               	movlw	low _str
  6957  188F  00A8               	movwf	OLED_print_xy@s
  6958  1890  3001               	movlw	high _str
  6959  1891  00A9               	movwf	OLED_print_xy@s+1
  6960  1892  3001               	movlw	1
  6961  1893  31A3  2388  3198   	fcall	_OLED_print_xy
  6962                           
  6963                           ;menu.c: 252:  OLED_print_xy(4, 1, "\001 \003     ");
  6964  1896  0140               	movlb	0	; select bank0
  6965  1897  01A7               	clrf	OLED_print_xy@row
  6966  1898  0AA7               	incf	OLED_print_xy@row,f
  6967  1899  306B               	movlw	low (STR_49| (0+32768))
  6968  189A  00A8               	movwf	OLED_print_xy@s
  6969  189B  30A9               	movlw	high (STR_49| (0+32768))
  6970  189C  00A9               	movwf	OLED_print_xy@s+1
  6971  189D  3004               	movlw	4
  6972  189E  31A3  2388         	fcall	_OLED_print_xy
  6973                           
  6974                           ;menu.c: 253:  return 0;
  6975  18A0  3000               	movlw	0
  6976  18A1  0008               	return
  6977  18A2                     __end_of_setSkyTemp:	
  6978                           
  6979                           	psect	text7
  6980  18A2                     __ptext7:	
  6981 ;; *************** function _setDPOffset *****************
  6982 ;; Defined at:
  6983 ;;		line 226 in file "menu.c"
  6984 ;; Parameters:    Size  Location     Type
  6985 ;;  data            2   17[BANK1 ] PTR struct .
  6986 ;;		 -> data(173), 
  6987 ;; Auto vars:     Size  Location     Type
  6988 ;;		None
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  1    wreg      unsigned char 
  6991 ;; Registers used:
  6992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6998 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7000 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7001 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7002 ;;Total ram usage:        3 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; Hardware stack levels required when called:    8
  7005 ;; This function calls:
  7006 ;;		_OLED_print_xy
  7007 ;;		_ftoa
  7008 ;;		_returnToPage
  7009 ;;		_spinInput
  7010 ;; This function is called by:
  7011 ;;		_menu
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function _setDPOffset
  7017  18A2                     _setDPOffset:	
  7018                           
  7019                           ;menu.c: 226: uint8_t setDPOffset(t_globalData *data);menu.c: 227: {;menu.c: 228:  retur
      +                          nToPage(0);
  7020                           
  7021                           ;incstack = 0
  7022                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7023  18A2  3000               	movlw	0
  7024  18A3  31A3  23BA  3198   	fcall	_returnToPage
  7025                           
  7026                           ;menu.c: 229:  if (g_updateScreen)
  7027  18A6  0141               	movlb	1	; select bank1
  7028  18A7  086F               	movf	_g_updateScreen^(0+128),w
  7029  18A8  1903               	btfsc	3,2
  7030  18A9  28B4               	goto	l4551
  7031                           
  7032                           ;menu.c: 230:   OLED_print_xy(0, 0, "DP offset   ");
  7033  18AA  0140               	movlb	0	; select bank0
  7034  18AB  01A7               	clrf	OLED_print_xy@row
  7035  18AC  3009               	movlw	low (STR_44| (0+32768))
  7036  18AD  00A8               	movwf	OLED_print_xy@s
  7037  18AE  30A9               	movlw	high (STR_44| (0+32768))
  7038  18AF  00A9               	movwf	OLED_print_xy@s+1
  7039  18B0  3000               	movlw	0
  7040  18B1  31A3  2388  3198   	fcall	_OLED_print_xy
  7041  18B4                     l4551:	
  7042                           
  7043                           ;menu.c: 231:  spinInput(&data->dpOffset, 0, 10, 0.5);
  7044  18B4  0141               	movlb	1	; select bank1
  7045  18B5  0831               	movf	setDPOffset@data^(0+128),w
  7046  18B6  3E20               	addlw	32
  7047  18B7  00A0               	movwf	spinInput@input^(0+128)
  7048  18B8  3000               	movlw	0
  7049  18B9  3D32               	addwfc	(setDPOffset@data+1)^(0+128),w
  7050  18BA  00A1               	movwf	(spinInput@input+1)^(0+128)
  7051  18BB  3000               	movlw	0
  7052  18BC  00A5               	movwf	(spinInput@min+3)^(0+128)
  7053  18BD  3000               	movlw	0
  7054  18BE  00A4               	movwf	(spinInput@min+2)^(0+128)
  7055  18BF  3000               	movlw	0
  7056  18C0  00A3               	movwf	(spinInput@min+1)^(0+128)
  7057  18C1  3000               	movlw	0
  7058  18C2  00A2               	movwf	spinInput@min^(0+128)
  7059  18C3  3041               	movlw	65
  7060  18C4  00A9               	movwf	(spinInput@max+3)^(0+128)
  7061  18C5  3020               	movlw	32
  7062  18C6  00A8               	movwf	(spinInput@max+2)^(0+128)
  7063  18C7  3000               	movlw	0
  7064  18C8  00A7               	movwf	(spinInput@max+1)^(0+128)
  7065  18C9  3000               	movlw	0
  7066  18CA  00A6               	movwf	spinInput@max^(0+128)
  7067  18CB  303F               	movlw	63
  7068  18CC  00AD               	movwf	(spinInput@step+3)^(0+128)
  7069  18CD  3000               	movlw	0
  7070  18CE  00AC               	movwf	(spinInput@step+2)^(0+128)
  7071  18CF  3000               	movlw	0
  7072  18D0  00AB               	movwf	(spinInput@step+1)^(0+128)
  7073  18D1  3000               	movlw	0
  7074  18D2  00AA               	movwf	spinInput@step^(0+128)
  7075  18D3  3188  2018  3198   	fcall	_spinInput
  7076                           
  7077                           ;menu.c: 232:  ftoa(str, data->dpOffset, 4, 1);
  7078  18D6  0141               	movlb	1	; select bank1
  7079  18D7  0831               	movf	setDPOffset@data^(0+128),w
  7080  18D8  3E20               	addlw	32
  7081  18D9  0086               	movwf	6
  7082  18DA  3000               	movlw	0
  7083  18DB  3D32               	addwfc	(setDPOffset@data+1)^(0+128),w
  7084  18DC  0087               	movwf	7
  7085  18DD  3F40               	moviw [0]fsr1
  7086  18DE  00A5               	movwf	ftoa@fValue^(0+128)
  7087  18DF  3F41               	moviw [1]fsr1
  7088  18E0  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7089  18E1  3F42               	moviw [2]fsr1
  7090  18E2  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7091  18E3  3F43               	moviw [3]fsr1
  7092  18E4  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7093  18E5  3004               	movlw	4
  7094  18E6  00B3               	movwf	??_setDPOffset^(0+128)
  7095  18E7  0833               	movf	??_setDPOffset^(0+128),w
  7096  18E8  00A9               	movwf	ftoa@width^(0+128)
  7097  18E9  01AA               	clrf	ftoa@prec^(0+128)
  7098  18EA  0AAA               	incf	ftoa@prec^(0+128),f
  7099  18EB  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7100  18EC  3194  24EE  3198   	fcall	_ftoa
  7101                           
  7102                           ;menu.c: 233:  OLED_print_xy(0, 1, "temp.\004");
  7103  18EF  0140               	movlb	0	; select bank0
  7104  18F0  01A7               	clrf	OLED_print_xy@row
  7105  18F1  0AA7               	incf	OLED_print_xy@row,f
  7106  18F2  30C4               	movlw	low (STR_45| (0+32768))
  7107  18F3  00A8               	movwf	OLED_print_xy@s
  7108  18F4  30A9               	movlw	high (STR_45| (0+32768))
  7109  18F5  00A9               	movwf	OLED_print_xy@s+1
  7110  18F6  3000               	movlw	0
  7111  18F7  31A3  2388  3198   	fcall	_OLED_print_xy
  7112                           
  7113                           ;menu.c: 234:  OLED_print_xy(6, 1, str);
  7114  18FA  0140               	movlb	0	; select bank0
  7115  18FB  01A7               	clrf	OLED_print_xy@row
  7116  18FC  0AA7               	incf	OLED_print_xy@row,f
  7117  18FD  3059               	movlw	low _str
  7118  18FE  00A8               	movwf	OLED_print_xy@s
  7119  18FF  3001               	movlw	high _str
  7120  1900  00A9               	movwf	OLED_print_xy@s+1
  7121  1901  3006               	movlw	6
  7122  1902  31A3  2388  3198   	fcall	_OLED_print_xy
  7123                           
  7124                           ;menu.c: 235:  OLED_print_xy(10, 1, "\001\003");
  7125  1905  0140               	movlb	0	; select bank0
  7126  1906  01A7               	clrf	OLED_print_xy@row
  7127  1907  0AA7               	incf	OLED_print_xy@row,f
  7128  1908  30EF               	movlw	low (STR_46| (0+32768))
  7129  1909  00A8               	movwf	OLED_print_xy@s
  7130  190A  30A9               	movlw	high (STR_46| (0+32768))
  7131  190B  00A9               	movwf	OLED_print_xy@s+1
  7132  190C  300A               	movlw	10
  7133  190D  31A3  2388         	fcall	_OLED_print_xy
  7134                           
  7135                           ;menu.c: 236:  return 0;
  7136  190F  3000               	movlw	0
  7137  1910  0008               	return
  7138  1911                     __end_of_setDPOffset:	
  7139                           
  7140                           	psect	text8
  7141  072E                     __ptext8:	
  7142 ;; *************** function _setup *****************
  7143 ;; Defined at:
  7144 ;;		line 202 in file "menu.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  data            2   17[BANK1 ] PTR struct .
  7147 ;;		 -> data(173), 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  1    wreg      unsigned char 
  7152 ;; Registers used:
  7153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7159 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7161 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7162 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7163 ;;Total ram usage:        4 bytes
  7164 ;; Hardware stack levels used:    1
  7165 ;; Hardware stack levels required when called:    9
  7166 ;; This function calls:
  7167 ;;		_OLED_print_xy
  7168 ;;		_ftoa
  7169 ;;		_paging
  7170 ;;		_returnToPage
  7171 ;; This function is called by:
  7172 ;;		_menu
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           
  7177                           ;psect for function _setup
  7178  072E                     _setup:	
  7179                           
  7180                           ;menu.c: 202: uint8_t setup(t_globalData *data);menu.c: 203: {;menu.c: 204:  static uint
      +                          8_t page = 0;;menu.c: 206:  returnToPage(page);
  7181                           
  7182                           ;incstack = 0
  7183                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7184  072E  0141               	movlb	1	; select bank1
  7185  072F  0860               	movf	setup@page^(0+128),w
  7186  0730  31A3  23BA  3187   	fcall	_returnToPage
  7187                           
  7188                           ;menu.c: 207:  if (g_updateScreen) {
  7189  0733  0141               	movlb	1	; select bank1
  7190  0734  086F               	movf	_g_updateScreen^(0+128),w
  7191  0735  1903               	btfsc	3,2
  7192  0736  2FD8               	goto	l4539
  7193                           
  7194                           ;menu.c: 208:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  7195  0737  0140               	movlb	0	; select bank0
  7196  0738  01A7               	clrf	OLED_print_xy@row
  7197  0739  3088               	movlw	low (STR_39| (0+32768))
  7198  073A  00A8               	movwf	OLED_print_xy@s
  7199  073B  30A8               	movlw	high (STR_39| (0+32768))
  7200  073C  00A9               	movwf	OLED_print_xy@s+1
  7201  073D  3000               	movlw	0
  7202  073E  31A3  2388  3187   	fcall	_OLED_print_xy
  7203                           
  7204                           ;menu.c: 209:   OLED_print_xy(0, 1, "temp. ");
  7205  0741  0140               	movlb	0	; select bank0
  7206  0742  01A7               	clrf	OLED_print_xy@row
  7207  0743  0AA7               	incf	OLED_print_xy@row,f
  7208  0744  30D2               	movlw	low (STR_40| (0+32768))
  7209  0745  00A8               	movwf	OLED_print_xy@s
  7210  0746  30A9               	movlw	high (STR_40| (0+32768))
  7211  0747  00A9               	movwf	OLED_print_xy@s+1
  7212  0748  3000               	movlw	0
  7213  0749  31A3  2388  3187   	fcall	_OLED_print_xy
  7214                           
  7215                           ;menu.c: 210:   ftoa(str, data->dpOffset, 4, 1);
  7216  074C  0141               	movlb	1	; select bank1
  7217  074D  0831               	movf	setup@data^(0+128),w
  7218  074E  3E20               	addlw	32
  7219  074F  0086               	movwf	6
  7220  0750  3000               	movlw	0
  7221  0751  3D32               	addwfc	(setup@data+1)^(0+128),w
  7222  0752  0087               	movwf	7
  7223  0753  3F40               	moviw [0]fsr1
  7224  0754  00A5               	movwf	ftoa@fValue^(0+128)
  7225  0755  3F41               	moviw [1]fsr1
  7226  0756  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7227  0757  3F42               	moviw [2]fsr1
  7228  0758  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7229  0759  3F43               	moviw [3]fsr1
  7230  075A  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7231  075B  3004               	movlw	4
  7232  075C  00B3               	movwf	??_setup^(0+128)
  7233  075D  0833               	movf	??_setup^(0+128),w
  7234  075E  00A9               	movwf	ftoa@width^(0+128)
  7235  075F  01AA               	clrf	ftoa@prec^(0+128)
  7236  0760  0AAA               	incf	ftoa@prec^(0+128),f
  7237  0761  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7238  0762  3194  24EE  3187   	fcall	_ftoa
  7239                           
  7240                           ;menu.c: 211:   OLED_print_xy(6, 1, str);
  7241  0765  0140               	movlb	0	; select bank0
  7242  0766  01A7               	clrf	OLED_print_xy@row
  7243  0767  0AA7               	incf	OLED_print_xy@row,f
  7244  0768  3059               	movlw	low _str
  7245  0769  00A8               	movwf	OLED_print_xy@s
  7246  076A  3001               	movlw	high _str
  7247  076B  00A9               	movwf	OLED_print_xy@s+1
  7248  076C  3006               	movlw	6
  7249  076D  31A3  2388  3187   	fcall	_OLED_print_xy
  7250                           
  7251                           ;menu.c: 212:   OLED_print_xy(10, 1, "\001 ");
  7252  0770  0140               	movlb	0	; select bank0
  7253  0771  01A7               	clrf	OLED_print_xy@row
  7254  0772  0AA7               	incf	OLED_print_xy@row,f
  7255  0773  30F2               	movlw	low (STR_41| (0+32768))
  7256  0774  00A8               	movwf	OLED_print_xy@s
  7257  0775  30A9               	movlw	high (STR_41| (0+32768))
  7258  0776  00A9               	movwf	OLED_print_xy@s+1
  7259  0777  300A               	movlw	10
  7260  0778  31A3  2388  3187   	fcall	_OLED_print_xy
  7261                           
  7262                           ;menu.c: 213:   ftoa(str, data->skyTemp, 3, 0);
  7263  077B  0141               	movlb	1	; select bank1
  7264  077C  0831               	movf	setup@data^(0+128),w
  7265  077D  3E24               	addlw	36
  7266  077E  0086               	movwf	6
  7267  077F  3000               	movlw	0
  7268  0780  3D32               	addwfc	(setup@data+1)^(0+128),w
  7269  0781  0087               	movwf	7
  7270  0782  3F40               	moviw [0]fsr1
  7271  0783  00A5               	movwf	ftoa@fValue^(0+128)
  7272  0784  3F41               	moviw [1]fsr1
  7273  0785  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7274  0786  3F42               	moviw [2]fsr1
  7275  0787  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7276  0788  3F43               	moviw [3]fsr1
  7277  0789  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7278  078A  3003               	movlw	3
  7279  078B  00B3               	movwf	??_setup^(0+128)
  7280  078C  0833               	movf	??_setup^(0+128),w
  7281  078D  00A9               	movwf	ftoa@width^(0+128)
  7282  078E  01AA               	clrf	ftoa@prec^(0+128)
  7283  078F  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7284  0790  3194  24EE  3187   	fcall	_ftoa
  7285                           
  7286                           ;menu.c: 214:   OLED_print_xy(12 + 0, 1, str);
  7287  0793  0140               	movlb	0	; select bank0
  7288  0794  01A7               	clrf	OLED_print_xy@row
  7289  0795  0AA7               	incf	OLED_print_xy@row,f
  7290  0796  3059               	movlw	low _str
  7291  0797  00A8               	movwf	OLED_print_xy@s
  7292  0798  3001               	movlw	high _str
  7293  0799  00A9               	movwf	OLED_print_xy@s+1
  7294  079A  300C               	movlw	12
  7295  079B  31A3  2388  3187   	fcall	_OLED_print_xy
  7296                           
  7297                           ;menu.c: 215:   OLED_print_xy(12 + 3, 1, "\001        ");
  7298  079E  0140               	movlb	0	; select bank0
  7299  079F  01A7               	clrf	OLED_print_xy@row
  7300  07A0  0AA7               	incf	OLED_print_xy@row,f
  7301  07A1  3061               	movlw	low (STR_42| (0+32768))
  7302  07A2  00A8               	movwf	OLED_print_xy@s
  7303  07A3  30A9               	movlw	high (STR_42| (0+32768))
  7304  07A4  00A9               	movwf	OLED_print_xy@s+1
  7305  07A5  300F               	movlw	15
  7306  07A6  31A3  2388  3187   	fcall	_OLED_print_xy
  7307                           
  7308                           ;menu.c: 216:   ftoa(str, data->fudgeFactor, 3, 1);
  7309  07A9  0141               	movlb	1	; select bank1
  7310  07AA  0831               	movf	setup@data^(0+128),w
  7311  07AB  3E28               	addlw	40
  7312  07AC  0086               	movwf	6
  7313  07AD  3000               	movlw	0
  7314  07AE  3D32               	addwfc	(setup@data+1)^(0+128),w
  7315  07AF  0087               	movwf	7
  7316  07B0  3F40               	moviw [0]fsr1
  7317  07B1  00A5               	movwf	ftoa@fValue^(0+128)
  7318  07B2  3F41               	moviw [1]fsr1
  7319  07B3  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7320  07B4  3F42               	moviw [2]fsr1
  7321  07B5  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7322  07B6  3F43               	moviw [3]fsr1
  7323  07B7  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7324  07B8  3003               	movlw	3
  7325  07B9  00B3               	movwf	??_setup^(0+128)
  7326  07BA  0833               	movf	??_setup^(0+128),w
  7327  07BB  00A9               	movwf	ftoa@width^(0+128)
  7328  07BC  01AA               	clrf	ftoa@prec^(0+128)
  7329  07BD  0AAA               	incf	ftoa@prec^(0+128),f
  7330  07BE  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7331  07BF  3194  24EE  3187   	fcall	_ftoa
  7332                           
  7333                           ;menu.c: 217:   OLED_print_xy(2 * 12 + 0, 1, str);
  7334  07C2  0140               	movlb	0	; select bank0
  7335  07C3  01A7               	clrf	OLED_print_xy@row
  7336  07C4  0AA7               	incf	OLED_print_xy@row,f
  7337  07C5  3059               	movlw	low _str
  7338  07C6  00A8               	movwf	OLED_print_xy@s
  7339  07C7  3001               	movlw	high _str
  7340  07C8  00A9               	movwf	OLED_print_xy@s+1
  7341  07C9  3018               	movlw	24
  7342  07CA  31A3  2388  3187   	fcall	_OLED_print_xy
  7343                           
  7344                           ;menu.c: 218:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  7345  07CD  0140               	movlb	0	; select bank0
  7346  07CE  01A7               	clrf	OLED_print_xy@row
  7347  07CF  0AA7               	incf	OLED_print_xy@row,f
  7348  07D0  30E5               	movlw	low ((STR_14+3)| (0+32768))
  7349  07D1  00A8               	movwf	OLED_print_xy@s
  7350  07D2  30A8               	movlw	high ((STR_14+3)| (0+32768))
  7351  07D3  00A9               	movwf	OLED_print_xy@s+1
  7352  07D4  301C               	movlw	28
  7353  07D5  31A3  2388  3187   	fcall	_OLED_print_xy
  7354  07D8                     l4539:	
  7355                           
  7356                           ;menu.c: 220:  page = paging(page, 3);
  7357  07D8  3003               	movlw	3
  7358  07D9  0141               	movlb	1	; select bank1
  7359  07DA  00B3               	movwf	??_setup^(0+128)
  7360  07DB  0833               	movf	??_setup^(0+128),w
  7361  07DC  0140               	movlb	0	; select bank0
  7362  07DD  00A7               	movwf	paging@lastPage
  7363  07DE  0141               	movlb	1	; select bank1
  7364  07DF  0860               	movf	setup@page^(0+128),w
  7365  07E0  31A7  2795         	fcall	_paging
  7366  07E2  0141               	movlb	1	; select bank1
  7367  07E3  00B4               	movwf	(??_setup+1)^(0+128)
  7368  07E4  0834               	movf	(??_setup+1)^(0+128),w
  7369  07E5  00E0               	movwf	setup@page^(0+128)
  7370                           
  7371                           ;menu.c: 221:  return page;
  7372  07E6  0860               	movf	setup@page^(0+128),w
  7373  07E7  0008               	return
  7374  07E8                     __end_of_setup:	
  7375                           
  7376                           	psect	text9
  7377  1AF9                     __ptext9:	
  7378 ;; *************** function _setLensDia *****************
  7379 ;; Defined at:
  7380 ;;		line 186 in file "menu.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;  data            2   17[BANK1 ] PTR struct .
  7383 ;;		 -> data(173), 
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;		None
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  1    wreg      unsigned char 
  7388 ;; Registers used:
  7389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7395 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7397 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7398 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7399 ;;Total ram usage:        7 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:    8
  7402 ;; This function calls:
  7403 ;;		_OLED_print_xy
  7404 ;;		_ftoa
  7405 ;;		_returnToPage
  7406 ;;		_spinInput
  7407 ;; This function is called by:
  7408 ;;		_menu
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           
  7413                           ;psect for function _setLensDia
  7414  1AF9                     _setLensDia:	
  7415                           
  7416                           ;menu.c: 186: uint8_t setLensDia(t_globalData *data);menu.c: 187: {;menu.c: 188:  return
      +                          ToPage(0);
  7417                           
  7418                           ;incstack = 0
  7419                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7420  1AF9  3000               	movlw	0
  7421  1AFA  31A3  23BA  319A   	fcall	_returnToPage
  7422                           
  7423                           ;menu.c: 189:  if (g_updateScreen)
  7424  1AFD  0141               	movlb	1	; select bank1
  7425  1AFE  086F               	movf	_g_updateScreen^(0+128),w
  7426  1AFF  1903               	btfsc	3,2
  7427  1B00  2B0B               	goto	l4511
  7428                           
  7429                           ;menu.c: 190:   OLED_print_xy(0, 0, "Lens diam.  ");
  7430  1B01  0140               	movlb	0	; select bank0
  7431  1B02  01A7               	clrf	OLED_print_xy@row
  7432  1B03  30D5               	movlw	low ((STR_22+12)| (0+32768))
  7433  1B04  00A8               	movwf	OLED_print_xy@s
  7434  1B05  30A8               	movlw	high ((STR_22+12)| (0+32768))
  7435  1B06  00A9               	movwf	OLED_print_xy@s+1
  7436  1B07  3000               	movlw	0
  7437  1B08  31A3  2388  319A   	fcall	_OLED_print_xy
  7438  1B0B                     l4511:	
  7439                           
  7440                           ;menu.c: 191:  spinInput(&data->chData[selectedChannel].lensDia, 1, 16, 0.5);
  7441  1B0B  0141               	movlb	1	; select bank1
  7442  1B0C  0864               	movf	_selectedChannel^(0+128),w
  7443  1B0D  00B3               	movwf	??_setLensDia^(0+128)
  7444  1B0E  01B4               	clrf	(??_setLensDia^(0+128)+1)
  7445  1B0F  3005               	movlw	5
  7446  1B10                     u5305:	
  7447  1B10  35B3               	lslf	??_setLensDia^(0+128),f
  7448  1B11  0DB4               	rlf	(??_setLensDia^(0+128)+1),f
  7449  1B12  0B89               	decfsz	9,f
  7450  1B13  2B10               	goto	u5305
  7451  1B14  0833               	movf	??_setLensDia^(0+128),w
  7452  1B15  0731               	addwf	setLensDia@data^(0+128),w
  7453  1B16  00B5               	movwf	(??_setLensDia+2)^(0+128)
  7454  1B17  0834               	movf	(??_setLensDia+1)^(0+128),w
  7455  1B18  3D32               	addwfc	(setLensDia@data+1)^(0+128),w
  7456  1B19  00B6               	movwf	(??_setLensDia+3)^(0+128)
  7457  1B1A  0835               	movf	(??_setLensDia+2)^(0+128),w
  7458  1B1B  3E43               	addlw	67
  7459  1B1C  00A0               	movwf	spinInput@input^(0+128)
  7460  1B1D  3000               	movlw	0
  7461  1B1E  3D36               	addwfc	(??_setLensDia+3)^(0+128),w
  7462  1B1F  00A1               	movwf	(spinInput@input+1)^(0+128)
  7463  1B20  303F               	movlw	63
  7464  1B21  00A5               	movwf	(spinInput@min+3)^(0+128)
  7465  1B22  3080               	movlw	128
  7466  1B23  00A4               	movwf	(spinInput@min+2)^(0+128)
  7467  1B24  3000               	movlw	0
  7468  1B25  00A3               	movwf	(spinInput@min+1)^(0+128)
  7469  1B26  3000               	movlw	0
  7470  1B27  00A2               	movwf	spinInput@min^(0+128)
  7471  1B28  3041               	movlw	65
  7472  1B29  00A9               	movwf	(spinInput@max+3)^(0+128)
  7473  1B2A  3080               	movlw	128
  7474  1B2B  00A8               	movwf	(spinInput@max+2)^(0+128)
  7475  1B2C  3000               	movlw	0
  7476  1B2D  00A7               	movwf	(spinInput@max+1)^(0+128)
  7477  1B2E  3000               	movlw	0
  7478  1B2F  00A6               	movwf	spinInput@max^(0+128)
  7479  1B30  303F               	movlw	63
  7480  1B31  00AD               	movwf	(spinInput@step+3)^(0+128)
  7481  1B32  3000               	movlw	0
  7482  1B33  00AC               	movwf	(spinInput@step+2)^(0+128)
  7483  1B34  3000               	movlw	0
  7484  1B35  00AB               	movwf	(spinInput@step+1)^(0+128)
  7485  1B36  3000               	movlw	0
  7486  1B37  00AA               	movwf	spinInput@step^(0+128)
  7487  1B38  3188  2018  319A   	fcall	_spinInput
  7488                           
  7489                           ;menu.c: 192:  ftoa(str, data->chData[selectedChannel].lensDia, 4, 1);
  7490  1B3B  0141               	movlb	1	; select bank1
  7491  1B3C  0864               	movf	_selectedChannel^(0+128),w
  7492  1B3D  00B3               	movwf	??_setLensDia^(0+128)
  7493  1B3E  01B4               	clrf	(??_setLensDia^(0+128)+1)
  7494  1B3F  3005               	movlw	5
  7495  1B40                     u5315:	
  7496  1B40  35B3               	lslf	??_setLensDia^(0+128),f
  7497  1B41  0DB4               	rlf	(??_setLensDia^(0+128)+1),f
  7498  1B42  0B89               	decfsz	9,f
  7499  1B43  2B40               	goto	u5315
  7500  1B44  0833               	movf	??_setLensDia^(0+128),w
  7501  1B45  0731               	addwf	setLensDia@data^(0+128),w
  7502  1B46  00B5               	movwf	(??_setLensDia+2)^(0+128)
  7503  1B47  0834               	movf	(??_setLensDia+1)^(0+128),w
  7504  1B48  3D32               	addwfc	(setLensDia@data+1)^(0+128),w
  7505  1B49  00B6               	movwf	(??_setLensDia+3)^(0+128)
  7506  1B4A  0835               	movf	(??_setLensDia+2)^(0+128),w
  7507  1B4B  3E43               	addlw	67
  7508  1B4C  0086               	movwf	6
  7509  1B4D  3000               	movlw	0
  7510  1B4E  3D36               	addwfc	(??_setLensDia+3)^(0+128),w
  7511  1B4F  0087               	movwf	7
  7512  1B50  3F40               	moviw [0]fsr1
  7513  1B51  00A5               	movwf	ftoa@fValue^(0+128)
  7514  1B52  3F41               	moviw [1]fsr1
  7515  1B53  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7516  1B54  3F42               	moviw [2]fsr1
  7517  1B55  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7518  1B56  3F43               	moviw [3]fsr1
  7519  1B57  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7520  1B58  3004               	movlw	4
  7521  1B59  00B7               	movwf	(??_setLensDia+4)^(0+128)
  7522  1B5A  0837               	movf	(??_setLensDia+4)^(0+128),w
  7523  1B5B  00A9               	movwf	ftoa@width^(0+128)
  7524  1B5C  01AA               	clrf	ftoa@prec^(0+128)
  7525  1B5D  0AAA               	incf	ftoa@prec^(0+128),f
  7526  1B5E  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7527  1B5F  3194  24EE  319A   	fcall	_ftoa
  7528                           
  7529                           ;menu.c: 193:  OLED_print_xy(0, 1, "\004");
  7530  1B62  0140               	movlb	0	; select bank0
  7531  1B63  01A7               	clrf	OLED_print_xy@row
  7532  1B64  0AA7               	incf	OLED_print_xy@row,f
  7533  1B65  30C9               	movlw	low ((STR_45+5)| (0+32768))
  7534  1B66  00A8               	movwf	OLED_print_xy@s
  7535  1B67  30A9               	movlw	high ((STR_45+5)| (0+32768))
  7536  1B68  00A9               	movwf	OLED_print_xy@s+1
  7537  1B69  3000               	movlw	0
  7538  1B6A  31A3  2388  319A   	fcall	_OLED_print_xy
  7539                           
  7540                           ;menu.c: 194:  OLED_print_xy(1, 1, str);
  7541  1B6D  0140               	movlb	0	; select bank0
  7542  1B6E  01A7               	clrf	OLED_print_xy@row
  7543  1B6F  0AA7               	incf	OLED_print_xy@row,f
  7544  1B70  3059               	movlw	low _str
  7545  1B71  00A8               	movwf	OLED_print_xy@s
  7546  1B72  3001               	movlw	high _str
  7547  1B73  00A9               	movwf	OLED_print_xy@s+1
  7548  1B74  3001               	movlw	1
  7549  1B75  31A3  2388  319A   	fcall	_OLED_print_xy
  7550                           
  7551                           ;menu.c: 195:  OLED_print_xy(5, 1, " inch \003");
  7552  1B78  0140               	movlb	0	; select bank0
  7553  1B79  01A7               	clrf	OLED_print_xy@row
  7554  1B7A  0AA7               	incf	OLED_print_xy@row,f
  7555  1B7B  3086               	movlw	low (STR_38| (0+32768))
  7556  1B7C  00A8               	movwf	OLED_print_xy@s
  7557  1B7D  30A9               	movlw	high (STR_38| (0+32768))
  7558  1B7E  00A9               	movwf	OLED_print_xy@s+1
  7559  1B7F  3005               	movlw	5
  7560  1B80  31A3  2388         	fcall	_OLED_print_xy
  7561                           
  7562                           ;menu.c: 196:  return 0;
  7563  1B82  3000               	movlw	0
  7564  1B83  0008               	return
  7565  1B84                     __end_of_setLensDia:	
  7566                           
  7567                           	psect	text10
  7568  1DB3                     __ptext10:	
  7569 ;; *************** function _setOutputPower *****************
  7570 ;; Defined at:
  7571 ;;		line 157 in file "menu.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  data            2   17[BANK1 ] PTR struct .
  7574 ;;		 -> data(173), 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  chData          2   23[BANK1 ] PTR struct .
  7577 ;;		 -> data.chData(128), data(173), 
  7578 ;; Return value:  Size  Location     Type
  7579 ;;                  1    wreg      unsigned char 
  7580 ;; Registers used:
  7581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7587 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7588 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7589 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7590 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7591 ;;Total ram usage:        8 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    8
  7594 ;; This function calls:
  7595 ;;		_OLED_print_xy
  7596 ;;		___fleq
  7597 ;;		___flge
  7598 ;;		_ftoa
  7599 ;;		_itoa
  7600 ;;		_returnToPage
  7601 ;;		_spinInput
  7602 ;; This function is called by:
  7603 ;;		_menu
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           
  7608                           ;psect for function _setOutputPower
  7609  1DB3                     _setOutputPower:	
  7610                           
  7611                           ;menu.c: 157: uint8_t setOutputPower(t_globalData *data);menu.c: 158: {;menu.c: 159:  t_
      +                          channelData *chData = &data->chData[selectedChannel];
  7612                           
  7613                           ;incstack = 0
  7614                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7615  1DB3  0141               	movlb	1	; select bank1
  7616  1DB4  0864               	movf	_selectedChannel^(0+128),w
  7617  1DB5  00B3               	movwf	??_setOutputPower^(0+128)
  7618  1DB6  01B4               	clrf	(??_setOutputPower^(0+128)+1)
  7619  1DB7  3005               	movlw	5
  7620  1DB8                     u6245:	
  7621  1DB8  35B3               	lslf	??_setOutputPower^(0+128),f
  7622  1DB9  0DB4               	rlf	(??_setOutputPower^(0+128)+1),f
  7623  1DBA  0B89               	decfsz	9,f
  7624  1DBB  2DB8               	goto	u6245
  7625  1DBC  0833               	movf	??_setOutputPower^(0+128),w
  7626  1DBD  0731               	addwf	setOutputPower@data^(0+128),w
  7627  1DBE  00B5               	movwf	(??_setOutputPower+2)^(0+128)
  7628  1DBF  0834               	movf	(??_setOutputPower+1)^(0+128),w
  7629  1DC0  3D32               	addwfc	(setOutputPower@data+1)^(0+128),w
  7630  1DC1  00B6               	movwf	(??_setOutputPower+3)^(0+128)
  7631  1DC2  0835               	movf	(??_setOutputPower+2)^(0+128),w
  7632  1DC3  3E2D               	addlw	45
  7633  1DC4  00B7               	movwf	setOutputPower@chData^(0+128)
  7634  1DC5  3000               	movlw	0
  7635  1DC6  3D36               	addwfc	(??_setOutputPower+3)^(0+128),w
  7636  1DC7  00B8               	movwf	(setOutputPower@chData+1)^(0+128)
  7637                           
  7638                           ;menu.c: 161:  returnToPage(0);
  7639  1DC8  3000               	movlw	0
  7640  1DC9  31A3  23BA  319D   	fcall	_returnToPage
  7641                           
  7642                           ;menu.c: 162:  if (g_updateScreen)
  7643  1DCC  0141               	movlb	1	; select bank1
  7644  1DCD  086F               	movf	_g_updateScreen^(0+128),w
  7645  1DCE  1903               	btfsc	3,2
  7646  1DCF  2DDA               	goto	l5359
  7647                           
  7648                           ;menu.c: 163:   OLED_print_xy(0, 0, "Output power");
  7649  1DD0  0140               	movlb	0	; select bank0
  7650  1DD1  01A7               	clrf	OLED_print_xy@row
  7651  1DD2  303D               	movlw	low (STR_29| (0+32768))
  7652  1DD3  00A8               	movwf	OLED_print_xy@s
  7653  1DD4  30A9               	movlw	high (STR_29| (0+32768))
  7654  1DD5  00A9               	movwf	OLED_print_xy@s+1
  7655  1DD6  3000               	movlw	0
  7656  1DD7  31A3  2388  319D   	fcall	_OLED_print_xy
  7657  1DDA                     l5359:	
  7658                           
  7659                           ;menu.c: 164:  spinInput(&chData->Pset, 0, chData->Pmax, 0.25);
  7660  1DDA  0141               	movlb	1	; select bank1
  7661  1DDB  0837               	movf	setOutputPower@chData^(0+128),w
  7662  1DDC  3E10               	addlw	16
  7663  1DDD  00A0               	movwf	spinInput@input^(0+128)
  7664  1DDE  3000               	movlw	0
  7665  1DDF  3D38               	addwfc	(setOutputPower@chData+1)^(0+128),w
  7666  1DE0  00A1               	movwf	(spinInput@input+1)^(0+128)
  7667  1DE1  3000               	movlw	0
  7668  1DE2  00A5               	movwf	(spinInput@min+3)^(0+128)
  7669  1DE3  3000               	movlw	0
  7670  1DE4  00A4               	movwf	(spinInput@min+2)^(0+128)
  7671  1DE5  3000               	movlw	0
  7672  1DE6  00A3               	movwf	(spinInput@min+1)^(0+128)
  7673  1DE7  3000               	movlw	0
  7674  1DE8  00A2               	movwf	spinInput@min^(0+128)
  7675  1DE9  0837               	movf	setOutputPower@chData^(0+128),w
  7676  1DEA  0086               	movwf	6
  7677  1DEB  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7678  1DEC  0087               	movwf	7
  7679  1DED  3144               	addfsr 1,4
  7680  1DEE  3F40               	moviw [0]fsr1
  7681  1DEF  00A6               	movwf	spinInput@max^(0+128)
  7682  1DF0  3F41               	moviw [1]fsr1
  7683  1DF1  00A7               	movwf	(spinInput@max+1)^(0+128)
  7684  1DF2  3F42               	moviw [2]fsr1
  7685  1DF3  00A8               	movwf	(spinInput@max+2)^(0+128)
  7686  1DF4  3F43               	moviw [3]fsr1
  7687  1DF5  00A9               	movwf	(spinInput@max+3)^(0+128)
  7688  1DF6  303E               	movlw	62
  7689  1DF7  00AD               	movwf	(spinInput@step+3)^(0+128)
  7690  1DF8  3080               	movlw	128
  7691  1DF9  00AC               	movwf	(spinInput@step+2)^(0+128)
  7692  1DFA  3000               	movlw	0
  7693  1DFB  00AB               	movwf	(spinInput@step+1)^(0+128)
  7694  1DFC  3000               	movlw	0
  7695  1DFD  00AA               	movwf	spinInput@step^(0+128)
  7696  1DFE  3188  2018  319D   	fcall	_spinInput
  7697                           
  7698                           ;menu.c: 165:  if (chData->Pset == 0) {
  7699  1E01  0141               	movlb	1	; select bank1
  7700  1E02  0837               	movf	setOutputPower@chData^(0+128),w
  7701  1E03  0086               	movwf	6
  7702  1E04  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7703  1E05  0087               	movwf	7
  7704  1E06  3150               	addfsr 1,16
  7705  1E07  3F40               	moviw [0]fsr1
  7706  1E08  0140               	movlb	0	; select bank0
  7707  1E09  00A0               	movwf	___fleq@ff1
  7708  1E0A  3F41               	moviw [1]fsr1
  7709  1E0B  00A1               	movwf	___fleq@ff1+1
  7710  1E0C  3F42               	moviw [2]fsr1
  7711  1E0D  00A2               	movwf	___fleq@ff1+2
  7712  1E0E  3F43               	moviw [3]fsr1
  7713  1E0F  00A3               	movwf	___fleq@ff1+3
  7714  1E10  3000               	movlw	0
  7715  1E11  00A7               	movwf	___fleq@ff2+3
  7716  1E12  3000               	movlw	0
  7717  1E13  00A6               	movwf	___fleq@ff2+2
  7718  1E14  3000               	movlw	0
  7719  1E15  00A5               	movwf	___fleq@ff2+1
  7720  1E16  3000               	movlw	0
  7721  1E17  00A4               	movwf	___fleq@ff2
  7722  1E18  31A5  257A  319D   	fcall	___fleq
  7723  1E1B  1C03               	btfss	3,0
  7724  1E1C  2E49               	goto	l5371
  7725                           
  7726                           ;menu.c: 166:   itoa(str, selectedChannel + 1, 1);
  7727  1E1D  3059               	movlw	low _str
  7728  1E1E  0141               	movlb	1	; select bank1
  7729  1E1F  00A5               	movwf	itoa@str^(0+128)
  7730  1E20  3001               	movlw	high _str
  7731  1E21  00A6               	movwf	(itoa@str+1)^(0+128)
  7732  1E22  0864               	movf	_selectedChannel^(0+128),w
  7733  1E23  3E01               	addlw	1
  7734  1E24  00B3               	movwf	??_setOutputPower^(0+128)
  7735  1E25  0833               	movf	??_setOutputPower^(0+128),w
  7736  1E26  00A7               	movwf	itoa@value^(0+128)
  7737  1E27  01A8               	clrf	itoa@width^(0+128)
  7738  1E28  0AA8               	incf	itoa@width^(0+128),f
  7739  1E29  31A7  272C  319D   	fcall	_itoa
  7740                           
  7741                           ;menu.c: 167:   OLED_print_xy(0, 1, "\004Ch. ");
  7742  1E2C  0140               	movlb	0	; select bank0
  7743  1E2D  01A7               	clrf	OLED_print_xy@row
  7744  1E2E  0AA7               	incf	OLED_print_xy@row,f
  7745  1E2F  30D9               	movlw	low (STR_30| (0+32768))
  7746  1E30  00A8               	movwf	OLED_print_xy@s
  7747  1E31  30A9               	movlw	high (STR_30| (0+32768))
  7748  1E32  00A9               	movwf	OLED_print_xy@s+1
  7749  1E33  3000               	movlw	0
  7750  1E34  31A3  2388  319D   	fcall	_OLED_print_xy
  7751                           
  7752                           ;menu.c: 168:   OLED_print_xy(5, 1, str);
  7753  1E37  0140               	movlb	0	; select bank0
  7754  1E38  01A7               	clrf	OLED_print_xy@row
  7755  1E39  0AA7               	incf	OLED_print_xy@row,f
  7756  1E3A  3059               	movlw	low _str
  7757  1E3B  00A8               	movwf	OLED_print_xy@s
  7758  1E3C  3001               	movlw	high _str
  7759  1E3D  00A9               	movwf	OLED_print_xy@s+1
  7760  1E3E  3005               	movlw	5
  7761  1E3F  31A3  2388  319D   	fcall	_OLED_print_xy
  7762                           
  7763                           ;menu.c: 169:   OLED_print_xy(6, 1, " off \003");
  7764  1E42  0140               	movlb	0	; select bank0
  7765  1E43  01A7               	clrf	OLED_print_xy@row
  7766  1E44  0AA7               	incf	OLED_print_xy@row,f
  7767  1E45  30B6               	movlw	low (STR_31| (0+32768))
  7768  1E46  00A8               	movwf	OLED_print_xy@s
  7769  1E47  30A9               	movlw	high (STR_31| (0+32768))
  7770  1E48  2E97               	goto	L3
  7771  1E49                     l5371:	
  7772                           ;menu.c: 170:  } else if (chData->Pset >= chData->Pmax) {
  7773                           
  7774  1E49  0141               	movlb	1	; select bank1
  7775  1E4A  0837               	movf	setOutputPower@chData^(0+128),w
  7776  1E4B  0086               	movwf	6
  7777  1E4C  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7778  1E4D  0087               	movwf	7
  7779  1E4E  3150               	addfsr 1,16
  7780  1E4F  3F40               	moviw [0]fsr1
  7781  1E50  0140               	movlb	0	; select bank0
  7782  1E51  00A0               	movwf	___flge@ff1
  7783  1E52  3F41               	moviw [1]fsr1
  7784  1E53  00A1               	movwf	___flge@ff1+1
  7785  1E54  3F42               	moviw [2]fsr1
  7786  1E55  00A2               	movwf	___flge@ff1+2
  7787  1E56  3F43               	moviw [3]fsr1
  7788  1E57  00A3               	movwf	___flge@ff1+3
  7789  1E58  0141               	movlb	1	; select bank1
  7790  1E59  0837               	movf	setOutputPower@chData^(0+128),w
  7791  1E5A  0086               	movwf	6
  7792  1E5B  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7793  1E5C  0087               	movwf	7
  7794  1E5D  3144               	addfsr 1,4
  7795  1E5E  3F40               	moviw [0]fsr1
  7796  1E5F  0140               	movlb	0	; select bank0
  7797  1E60  00A4               	movwf	___flge@ff2
  7798  1E61  3F41               	moviw [1]fsr1
  7799  1E62  00A5               	movwf	___flge@ff2+1
  7800  1E63  3F42               	moviw [2]fsr1
  7801  1E64  00A6               	movwf	___flge@ff2+2
  7802  1E65  3F43               	moviw [3]fsr1
  7803  1E66  00A7               	movwf	___flge@ff2+3
  7804  1E67  3199  21F2  319D   	fcall	___flge
  7805  1E6A  1C03               	btfss	3,0
  7806  1E6B  2E9A               	goto	l5381
  7807                           
  7808                           ;menu.c: 171:   itoa(str, selectedChannel + 1, 1);
  7809  1E6C  3059               	movlw	low _str
  7810  1E6D  0141               	movlb	1	; select bank1
  7811  1E6E  00A5               	movwf	itoa@str^(0+128)
  7812  1E6F  3001               	movlw	high _str
  7813  1E70  00A6               	movwf	(itoa@str+1)^(0+128)
  7814  1E71  0864               	movf	_selectedChannel^(0+128),w
  7815  1E72  3E01               	addlw	1
  7816  1E73  00B3               	movwf	??_setOutputPower^(0+128)
  7817  1E74  0833               	movf	??_setOutputPower^(0+128),w
  7818  1E75  00A7               	movwf	itoa@value^(0+128)
  7819  1E76  01A8               	clrf	itoa@width^(0+128)
  7820  1E77  0AA8               	incf	itoa@width^(0+128),f
  7821  1E78  31A7  272C  319D   	fcall	_itoa
  7822                           
  7823                           ;menu.c: 172:   OLED_print_xy(0, 1, "\004Ch. ");
  7824  1E7B  0140               	movlb	0	; select bank0
  7825  1E7C  01A7               	clrf	OLED_print_xy@row
  7826  1E7D  0AA7               	incf	OLED_print_xy@row,f
  7827  1E7E  30D9               	movlw	low (STR_30| (0+32768))
  7828  1E7F  00A8               	movwf	OLED_print_xy@s
  7829  1E80  30A9               	movlw	high (STR_30| (0+32768))
  7830  1E81  00A9               	movwf	OLED_print_xy@s+1
  7831  1E82  3000               	movlw	0
  7832  1E83  31A3  2388  319D   	fcall	_OLED_print_xy
  7833                           
  7834                           ;menu.c: 173:   OLED_print_xy(5, 1, str);
  7835  1E86  0140               	movlb	0	; select bank0
  7836  1E87  01A7               	clrf	OLED_print_xy@row
  7837  1E88  0AA7               	incf	OLED_print_xy@row,f
  7838  1E89  3059               	movlw	low _str
  7839  1E8A  00A8               	movwf	OLED_print_xy@s
  7840  1E8B  3001               	movlw	high _str
  7841  1E8C  00A9               	movwf	OLED_print_xy@s+1
  7842  1E8D  3005               	movlw	5
  7843  1E8E  31A3  2388  319D   	fcall	_OLED_print_xy
  7844                           
  7845                           ;menu.c: 174:   OLED_print_xy(6, 1, " auto\003");
  7846  1E91  0140               	movlb	0	; select bank0
  7847  1E92  01A7               	clrf	OLED_print_xy@row
  7848  1E93  0AA7               	incf	OLED_print_xy@row,f
  7849  1E94  30BD               	movlw	low (STR_33| (0+32768))
  7850  1E95  00A8               	movwf	OLED_print_xy@s
  7851  1E96  30A9               	movlw	high (STR_33| (0+32768))
  7852  1E97                     L3:	
  7853  1E97  00A9               	movwf	OLED_print_xy@s+1
  7854  1E98  3006               	movlw	6
  7855  1E99  2ED0               	goto	L2
  7856  1E9A                     l5381:	
  7857                           ;menu.c: 175:  } else {
  7858                           
  7859                           
  7860                           ;menu.c: 176:   OLED_print_xy(0, 1, "\004");
  7861  1E9A  0140               	movlb	0	; select bank0
  7862  1E9B  01A7               	clrf	OLED_print_xy@row
  7863  1E9C  0AA7               	incf	OLED_print_xy@row,f
  7864  1E9D  30C9               	movlw	low ((STR_45+5)| (0+32768))
  7865  1E9E  00A8               	movwf	OLED_print_xy@s
  7866  1E9F  30A9               	movlw	high ((STR_45+5)| (0+32768))
  7867  1EA0  00A9               	movwf	OLED_print_xy@s+1
  7868  1EA1  3000               	movlw	0
  7869  1EA2  31A3  2388  319D   	fcall	_OLED_print_xy
  7870                           
  7871                           ;menu.c: 177:   ftoa(str, chData->Pset, 4, 1);
  7872  1EA5  0141               	movlb	1	; select bank1
  7873  1EA6  0837               	movf	setOutputPower@chData^(0+128),w
  7874  1EA7  0086               	movwf	6
  7875  1EA8  0838               	movf	(setOutputPower@chData+1)^(0+128),w
  7876  1EA9  0087               	movwf	7
  7877  1EAA  3150               	addfsr 1,16
  7878  1EAB  3F40               	moviw [0]fsr1
  7879  1EAC  00A5               	movwf	ftoa@fValue^(0+128)
  7880  1EAD  3F41               	moviw [1]fsr1
  7881  1EAE  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7882  1EAF  3F42               	moviw [2]fsr1
  7883  1EB0  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7884  1EB1  3F43               	moviw [3]fsr1
  7885  1EB2  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7886  1EB3  3004               	movlw	4
  7887  1EB4  00B3               	movwf	??_setOutputPower^(0+128)
  7888  1EB5  0833               	movf	??_setOutputPower^(0+128),w
  7889  1EB6  00A9               	movwf	ftoa@width^(0+128)
  7890  1EB7  01AA               	clrf	ftoa@prec^(0+128)
  7891  1EB8  0AAA               	incf	ftoa@prec^(0+128),f
  7892  1EB9  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7893  1EBA  3194  24EE  319D   	fcall	_ftoa
  7894                           
  7895                           ;menu.c: 178:   OLED_print_xy(1, 1, str);
  7896  1EBD  0140               	movlb	0	; select bank0
  7897  1EBE  01A7               	clrf	OLED_print_xy@row
  7898  1EBF  0AA7               	incf	OLED_print_xy@row,f
  7899  1EC0  3059               	movlw	low _str
  7900  1EC1  00A8               	movwf	OLED_print_xy@s
  7901  1EC2  3001               	movlw	high _str
  7902  1EC3  00A9               	movwf	OLED_print_xy@s+1
  7903  1EC4  3001               	movlw	1
  7904  1EC5  31A3  2388  319D   	fcall	_OLED_print_xy
  7905                           
  7906                           ;menu.c: 179:   OLED_print_xy(5, 1, "W man.\003");
  7907  1EC8  0140               	movlb	0	; select bank0
  7908  1EC9  01A7               	clrf	OLED_print_xy@row
  7909  1ECA  0AA7               	incf	OLED_print_xy@row,f
  7910  1ECB  308E               	movlw	low (STR_35| (0+32768))
  7911  1ECC  00A8               	movwf	OLED_print_xy@s
  7912  1ECD  30A9               	movlw	high (STR_35| (0+32768))
  7913  1ECE  00A9               	movwf	OLED_print_xy@s+1
  7914  1ECF  3005               	movlw	5
  7915  1ED0                     L2:	
  7916  1ED0  31A3  2388         	fcall	_OLED_print_xy
  7917                           
  7918                           ;menu.c: 181:  return 0;
  7919  1ED2  3000               	movlw	0
  7920  1ED3  0008               	return
  7921  1ED4                     __end_of_setOutputPower:	
  7922                           
  7923                           	psect	text11
  7924  1ED4                     __ptext11:	
  7925 ;; *************** function _channelSetup *****************
  7926 ;; Defined at:
  7927 ;;		line 121 in file "menu.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  data            2   17[BANK1 ] PTR struct .
  7930 ;;		 -> data(173), 
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;  chData          2   23[BANK1 ] PTR struct .
  7933 ;;		 -> data.chData(128), data(173), 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      unsigned char 
  7936 ;; Registers used:
  7937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7943 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7944 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7945 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7946 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7947 ;;Total ram usage:        8 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    9
  7950 ;; This function calls:
  7951 ;;		_OLED_print_xy
  7952 ;;		___fleq
  7953 ;;		___flge
  7954 ;;		_ftoa
  7955 ;;		_itoa
  7956 ;;		_paging
  7957 ;;		_returnToPage
  7958 ;; This function is called by:
  7959 ;;		_menu
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           
  7964                           ;psect for function _channelSetup
  7965  1ED4                     _channelSetup:	
  7966                           
  7967                           ;menu.c: 121: uint8_t channelSetup(t_globalData *data);menu.c: 122: {;menu.c: 123:  stat
      +                          ic uint8_t page = 0;;menu.c: 124:  t_channelData *chData = &data->chData[selectedChannel
      +                          ];
  7968                           
  7969                           ;incstack = 0
  7970                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7971  1ED4  0141               	movlb	1	; select bank1
  7972  1ED5  0864               	movf	_selectedChannel^(0+128),w
  7973  1ED6  00B3               	movwf	??_channelSetup^(0+128)
  7974  1ED7  01B4               	clrf	(??_channelSetup^(0+128)+1)
  7975  1ED8  3005               	movlw	5
  7976  1ED9                     u6205:	
  7977  1ED9  35B3               	lslf	??_channelSetup^(0+128),f
  7978  1EDA  0DB4               	rlf	(??_channelSetup^(0+128)+1),f
  7979  1EDB  0B89               	decfsz	9,f
  7980  1EDC  2ED9               	goto	u6205
  7981  1EDD  0833               	movf	??_channelSetup^(0+128),w
  7982  1EDE  0731               	addwf	channelSetup@data^(0+128),w
  7983  1EDF  00B5               	movwf	(??_channelSetup+2)^(0+128)
  7984  1EE0  0834               	movf	(??_channelSetup+1)^(0+128),w
  7985  1EE1  3D32               	addwfc	(channelSetup@data+1)^(0+128),w
  7986  1EE2  00B6               	movwf	(??_channelSetup+3)^(0+128)
  7987  1EE3  0835               	movf	(??_channelSetup+2)^(0+128),w
  7988  1EE4  3E2D               	addlw	45
  7989  1EE5  00B7               	movwf	channelSetup@chData^(0+128)
  7990  1EE6  3000               	movlw	0
  7991  1EE7  3D36               	addwfc	(??_channelSetup+3)^(0+128),w
  7992  1EE8  00B8               	movwf	(channelSetup@chData+1)^(0+128)
  7993                           
  7994                           ;menu.c: 126:  returnToPage(page);
  7995  1EE9  0861               	movf	channelSetup@page^(0+128),w
  7996  1EEA  31A3  23BA  319E   	fcall	_returnToPage
  7997                           
  7998                           ;menu.c: 127:  if (g_updateScreen) {
  7999  1EED  0141               	movlb	1	; select bank1
  8000  1EEE  086F               	movf	_g_updateScreen^(0+128),w
  8001  1EEF  1903               	btfsc	3,2
  8002  1EF0  2FF0               	goto	l5345
  8003                           
  8004                           ;menu.c: 128:   OLED_print_xy(0, 0, "Output powerLens diam.  ");
  8005  1EF1  0140               	movlb	0	; select bank0
  8006  1EF2  01A7               	clrf	OLED_print_xy@row
  8007  1EF3  30C9               	movlw	low (STR_22| (0+32768))
  8008  1EF4  00A8               	movwf	OLED_print_xy@s
  8009  1EF5  30A8               	movlw	high (STR_22| (0+32768))
  8010  1EF6  00A9               	movwf	OLED_print_xy@s+1
  8011  1EF7  3000               	movlw	0
  8012  1EF8  31A3  2388  319E   	fcall	_OLED_print_xy
  8013                           
  8014                           ;menu.c: 130:   if (chData->Pset == 0) {
  8015  1EFB  0141               	movlb	1	; select bank1
  8016  1EFC  0837               	movf	channelSetup@chData^(0+128),w
  8017  1EFD  0086               	movwf	6
  8018  1EFE  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8019  1EFF  0087               	movwf	7
  8020  1F00  3150               	addfsr 1,16
  8021  1F01  3F40               	moviw [0]fsr1
  8022  1F02  0140               	movlb	0	; select bank0
  8023  1F03  00A0               	movwf	___fleq@ff1
  8024  1F04  3F41               	moviw [1]fsr1
  8025  1F05  00A1               	movwf	___fleq@ff1+1
  8026  1F06  3F42               	moviw [2]fsr1
  8027  1F07  00A2               	movwf	___fleq@ff1+2
  8028  1F08  3F43               	moviw [3]fsr1
  8029  1F09  00A3               	movwf	___fleq@ff1+3
  8030  1F0A  3000               	movlw	0
  8031  1F0B  00A7               	movwf	___fleq@ff2+3
  8032  1F0C  3000               	movlw	0
  8033  1F0D  00A6               	movwf	___fleq@ff2+2
  8034  1F0E  3000               	movlw	0
  8035  1F0F  00A5               	movwf	___fleq@ff2+1
  8036  1F10  3000               	movlw	0
  8037  1F11  00A4               	movwf	___fleq@ff2
  8038  1F12  31A5  257A  319E   	fcall	___fleq
  8039  1F15  1C03               	btfss	3,0
  8040  1F16  2F43               	goto	l5325
  8041                           
  8042                           ;menu.c: 131:    OLED_print_xy(0, 1, "Ch. ");
  8043  1F17  0140               	movlb	0	; select bank0
  8044  1F18  01A7               	clrf	OLED_print_xy@row
  8045  1F19  0AA7               	incf	OLED_print_xy@row,f
  8046  1F1A  30DA               	movlw	low ((STR_30+1)| (0+32768))
  8047  1F1B  00A8               	movwf	OLED_print_xy@s
  8048  1F1C  30A9               	movlw	high ((STR_30+1)| (0+32768))
  8049  1F1D  00A9               	movwf	OLED_print_xy@s+1
  8050  1F1E  3000               	movlw	0
  8051  1F1F  31A3  2388  319E   	fcall	_OLED_print_xy
  8052                           
  8053                           ;menu.c: 132:    itoa(str, selectedChannel + 1, 1);
  8054  1F22  3059               	movlw	low _str
  8055  1F23  0141               	movlb	1	; select bank1
  8056  1F24  00A5               	movwf	itoa@str^(0+128)
  8057  1F25  3001               	movlw	high _str
  8058  1F26  00A6               	movwf	(itoa@str+1)^(0+128)
  8059  1F27  0864               	movf	_selectedChannel^(0+128),w
  8060  1F28  3E01               	addlw	1
  8061  1F29  00B3               	movwf	??_channelSetup^(0+128)
  8062  1F2A  0833               	movf	??_channelSetup^(0+128),w
  8063  1F2B  00A7               	movwf	itoa@value^(0+128)
  8064  1F2C  01A8               	clrf	itoa@width^(0+128)
  8065  1F2D  0AA8               	incf	itoa@width^(0+128),f
  8066  1F2E  31A7  272C  319E   	fcall	_itoa
  8067                           
  8068                           ;menu.c: 133:    OLED_print_xy(4, 1, str);
  8069  1F31  0140               	movlb	0	; select bank0
  8070  1F32  01A7               	clrf	OLED_print_xy@row
  8071  1F33  0AA7               	incf	OLED_print_xy@row,f
  8072  1F34  3059               	movlw	low _str
  8073  1F35  00A8               	movwf	OLED_print_xy@s
  8074  1F36  3001               	movlw	high _str
  8075  1F37  00A9               	movwf	OLED_print_xy@s+1
  8076  1F38  3004               	movlw	4
  8077  1F39  31A3  2388  319E   	fcall	_OLED_print_xy
  8078                           
  8079                           ;menu.c: 134:    OLED_print_xy(5, 1, " off   ");
  8080  1F3C  0140               	movlb	0	; select bank0
  8081  1F3D  01A7               	clrf	OLED_print_xy@row
  8082  1F3E  0AA7               	incf	OLED_print_xy@row,f
  8083  1F3F  309E               	movlw	low (STR_24| (0+32768))
  8084  1F40  00A8               	movwf	OLED_print_xy@s
  8085  1F41  30A9               	movlw	high (STR_24| (0+32768))
  8086  1F42  2F91               	goto	L5
  8087  1F43                     l5325:	
  8088                           ;menu.c: 135:   } else if (chData->Pset >= chData->Pmax) {
  8089                           
  8090  1F43  0141               	movlb	1	; select bank1
  8091  1F44  0837               	movf	channelSetup@chData^(0+128),w
  8092  1F45  0086               	movwf	6
  8093  1F46  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8094  1F47  0087               	movwf	7
  8095  1F48  3150               	addfsr 1,16
  8096  1F49  3F40               	moviw [0]fsr1
  8097  1F4A  0140               	movlb	0	; select bank0
  8098  1F4B  00A0               	movwf	___flge@ff1
  8099  1F4C  3F41               	moviw [1]fsr1
  8100  1F4D  00A1               	movwf	___flge@ff1+1
  8101  1F4E  3F42               	moviw [2]fsr1
  8102  1F4F  00A2               	movwf	___flge@ff1+2
  8103  1F50  3F43               	moviw [3]fsr1
  8104  1F51  00A3               	movwf	___flge@ff1+3
  8105  1F52  0141               	movlb	1	; select bank1
  8106  1F53  0837               	movf	channelSetup@chData^(0+128),w
  8107  1F54  0086               	movwf	6
  8108  1F55  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8109  1F56  0087               	movwf	7
  8110  1F57  3144               	addfsr 1,4
  8111  1F58  3F40               	moviw [0]fsr1
  8112  1F59  0140               	movlb	0	; select bank0
  8113  1F5A  00A4               	movwf	___flge@ff2
  8114  1F5B  3F41               	moviw [1]fsr1
  8115  1F5C  00A5               	movwf	___flge@ff2+1
  8116  1F5D  3F42               	moviw [2]fsr1
  8117  1F5E  00A6               	movwf	___flge@ff2+2
  8118  1F5F  3F43               	moviw [3]fsr1
  8119  1F60  00A7               	movwf	___flge@ff2+3
  8120  1F61  3199  21F2  319E   	fcall	___flge
  8121  1F64  1C03               	btfss	3,0
  8122  1F65  2F94               	goto	l5335
  8123                           
  8124                           ;menu.c: 136:    OLED_print_xy(0, 1, "Ch. ");
  8125  1F66  0140               	movlb	0	; select bank0
  8126  1F67  01A7               	clrf	OLED_print_xy@row
  8127  1F68  0AA7               	incf	OLED_print_xy@row,f
  8128  1F69  30DA               	movlw	low ((STR_30+1)| (0+32768))
  8129  1F6A  00A8               	movwf	OLED_print_xy@s
  8130  1F6B  30A9               	movlw	high ((STR_30+1)| (0+32768))
  8131  1F6C  00A9               	movwf	OLED_print_xy@s+1
  8132  1F6D  3000               	movlw	0
  8133  1F6E  31A3  2388  319E   	fcall	_OLED_print_xy
  8134                           
  8135                           ;menu.c: 137:    itoa(str, selectedChannel + 1, 1);
  8136  1F71  3059               	movlw	low _str
  8137  1F72  0141               	movlb	1	; select bank1
  8138  1F73  00A5               	movwf	itoa@str^(0+128)
  8139  1F74  3001               	movlw	high _str
  8140  1F75  00A6               	movwf	(itoa@str+1)^(0+128)
  8141  1F76  0864               	movf	_selectedChannel^(0+128),w
  8142  1F77  3E01               	addlw	1
  8143  1F78  00B3               	movwf	??_channelSetup^(0+128)
  8144  1F79  0833               	movf	??_channelSetup^(0+128),w
  8145  1F7A  00A7               	movwf	itoa@value^(0+128)
  8146  1F7B  01A8               	clrf	itoa@width^(0+128)
  8147  1F7C  0AA8               	incf	itoa@width^(0+128),f
  8148  1F7D  31A7  272C  319E   	fcall	_itoa
  8149                           
  8150                           ;menu.c: 138:    OLED_print_xy(4, 1, str);
  8151  1F80  0140               	movlb	0	; select bank0
  8152  1F81  01A7               	clrf	OLED_print_xy@row
  8153  1F82  0AA7               	incf	OLED_print_xy@row,f
  8154  1F83  3059               	movlw	low _str
  8155  1F84  00A8               	movwf	OLED_print_xy@s
  8156  1F85  3001               	movlw	high _str
  8157  1F86  00A9               	movwf	OLED_print_xy@s+1
  8158  1F87  3004               	movlw	4
  8159  1F88  31A3  2388  319E   	fcall	_OLED_print_xy
  8160                           
  8161                           ;menu.c: 139:    OLED_print_xy(5, 1, " auto  ");
  8162  1F8B  0140               	movlb	0	; select bank0
  8163  1F8C  01A7               	clrf	OLED_print_xy@row
  8164  1F8D  0AA7               	incf	OLED_print_xy@row,f
  8165  1F8E  30AE               	movlw	low (STR_26| (0+32768))
  8166  1F8F  00A8               	movwf	OLED_print_xy@s
  8167  1F90  30A9               	movlw	high (STR_26| (0+32768))
  8168  1F91                     L5:	
  8169  1F91  00A9               	movwf	OLED_print_xy@s+1
  8170  1F92  3005               	movlw	5
  8171  1F93  2FBF               	goto	L4
  8172  1F94                     l5335:	
  8173                           ;menu.c: 140:   } else {
  8174                           
  8175                           
  8176                           ;menu.c: 141:    ftoa(str, chData->Pset, 4, 1);
  8177  1F94  0141               	movlb	1	; select bank1
  8178  1F95  0837               	movf	channelSetup@chData^(0+128),w
  8179  1F96  0086               	movwf	6
  8180  1F97  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8181  1F98  0087               	movwf	7
  8182  1F99  3150               	addfsr 1,16
  8183  1F9A  3F40               	moviw [0]fsr1
  8184  1F9B  00A5               	movwf	ftoa@fValue^(0+128)
  8185  1F9C  3F41               	moviw [1]fsr1
  8186  1F9D  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8187  1F9E  3F42               	moviw [2]fsr1
  8188  1F9F  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8189  1FA0  3F43               	moviw [3]fsr1
  8190  1FA1  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8191  1FA2  3004               	movlw	4
  8192  1FA3  00B3               	movwf	??_channelSetup^(0+128)
  8193  1FA4  0833               	movf	??_channelSetup^(0+128),w
  8194  1FA5  00A9               	movwf	ftoa@width^(0+128)
  8195  1FA6  01AA               	clrf	ftoa@prec^(0+128)
  8196  1FA7  0AAA               	incf	ftoa@prec^(0+128),f
  8197  1FA8  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8198  1FA9  3194  24EE  319E   	fcall	_ftoa
  8199                           
  8200                           ;menu.c: 142:    OLED_print_xy(0, 1, str);
  8201  1FAC  0140               	movlb	0	; select bank0
  8202  1FAD  01A7               	clrf	OLED_print_xy@row
  8203  1FAE  0AA7               	incf	OLED_print_xy@row,f
  8204  1FAF  3059               	movlw	low _str
  8205  1FB0  00A8               	movwf	OLED_print_xy@s
  8206  1FB1  3001               	movlw	high _str
  8207  1FB2  00A9               	movwf	OLED_print_xy@s+1
  8208  1FB3  3000               	movlw	0
  8209  1FB4  31A3  2388  319E   	fcall	_OLED_print_xy
  8210                           
  8211                           ;menu.c: 143:    OLED_print_xy(4, 1, "W manual");
  8212  1FB7  0140               	movlb	0	; select bank0
  8213  1FB8  01A7               	clrf	OLED_print_xy@row
  8214  1FB9  0AA7               	incf	OLED_print_xy@row,f
  8215  1FBA  307D               	movlw	low (STR_27| (0+32768))
  8216  1FBB  00A8               	movwf	OLED_print_xy@s
  8217  1FBC  30A9               	movlw	high (STR_27| (0+32768))
  8218  1FBD  00A9               	movwf	OLED_print_xy@s+1
  8219  1FBE  3004               	movlw	4
  8220  1FBF                     L4:	
  8221  1FBF  31A3  2388  319E   	fcall	_OLED_print_xy
  8222                           
  8223                           ;menu.c: 145:   ftoa(str, chData->lensDia, 4, 1);
  8224  1FC2  0141               	movlb	1	; select bank1
  8225  1FC3  0837               	movf	channelSetup@chData^(0+128),w
  8226  1FC4  0086               	movwf	6
  8227  1FC5  0838               	movf	(channelSetup@chData+1)^(0+128),w
  8228  1FC6  0087               	movwf	7
  8229  1FC7  3156               	addfsr 1,22
  8230  1FC8  3F40               	moviw [0]fsr1
  8231  1FC9  00A5               	movwf	ftoa@fValue^(0+128)
  8232  1FCA  3F41               	moviw [1]fsr1
  8233  1FCB  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8234  1FCC  3F42               	moviw [2]fsr1
  8235  1FCD  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8236  1FCE  3F43               	moviw [3]fsr1
  8237  1FCF  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8238  1FD0  3004               	movlw	4
  8239  1FD1  00B3               	movwf	??_channelSetup^(0+128)
  8240  1FD2  0833               	movf	??_channelSetup^(0+128),w
  8241  1FD3  00A9               	movwf	ftoa@width^(0+128)
  8242  1FD4  01AA               	clrf	ftoa@prec^(0+128)
  8243  1FD5  0AAA               	incf	ftoa@prec^(0+128),f
  8244  1FD6  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8245  1FD7  3194  24EE  319E   	fcall	_ftoa
  8246                           
  8247                           ;menu.c: 146:   OLED_print_xy(12 + 0, 1, str);
  8248  1FDA  0140               	movlb	0	; select bank0
  8249  1FDB  01A7               	clrf	OLED_print_xy@row
  8250  1FDC  0AA7               	incf	OLED_print_xy@row,f
  8251  1FDD  3059               	movlw	low _str
  8252  1FDE  00A8               	movwf	OLED_print_xy@s
  8253  1FDF  3001               	movlw	high _str
  8254  1FE0  00A9               	movwf	OLED_print_xy@s+1
  8255  1FE1  300C               	movlw	12
  8256  1FE2  31A3  2388  319E   	fcall	_OLED_print_xy
  8257                           
  8258                           ;menu.c: 147:   OLED_print_xy(12 + 5, 1, " inch  ");
  8259  1FE5  0140               	movlb	0	; select bank0
  8260  1FE6  01A7               	clrf	OLED_print_xy@row
  8261  1FE7  0AA7               	incf	OLED_print_xy@row,f
  8262  1FE8  30A6               	movlw	low (STR_28| (0+32768))
  8263  1FE9  00A8               	movwf	OLED_print_xy@s
  8264  1FEA  30A9               	movlw	high (STR_28| (0+32768))
  8265  1FEB  00A9               	movwf	OLED_print_xy@s+1
  8266  1FEC  3011               	movlw	17
  8267  1FED  31A3  2388  319E   	fcall	_OLED_print_xy
  8268  1FF0                     l5345:	
  8269                           
  8270                           ;menu.c: 150:  page = paging(page, 2);
  8271  1FF0  3002               	movlw	2
  8272  1FF1  0141               	movlb	1	; select bank1
  8273  1FF2  00B3               	movwf	??_channelSetup^(0+128)
  8274  1FF3  0833               	movf	??_channelSetup^(0+128),w
  8275  1FF4  0140               	movlb	0	; select bank0
  8276  1FF5  00A7               	movwf	paging@lastPage
  8277  1FF6  0141               	movlb	1	; select bank1
  8278  1FF7  0861               	movf	channelSetup@page^(0+128),w
  8279  1FF8  31A7  2795         	fcall	_paging
  8280  1FFA  0141               	movlb	1	; select bank1
  8281  1FFB  00B4               	movwf	(??_channelSetup+1)^(0+128)
  8282  1FFC  0834               	movf	(??_channelSetup+1)^(0+128),w
  8283  1FFD  00E1               	movwf	channelSetup@page^(0+128)
  8284                           
  8285                           ;menu.c: 151:  return page;
  8286  1FFE  0861               	movf	channelSetup@page^(0+128),w
  8287  1FFF  0008               	return
  8288  2000                     __end_of_channelSetup:	
  8289                           
  8290                           	psect	text12
  8291  0DFD                     __ptext12:	
  8292 ;; *************** function _channelView *****************
  8293 ;; Defined at:
  8294 ;;		line 69 in file "menu.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  data            2   17[BANK1 ] PTR struct .
  8297 ;;		 -> data(173), 
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;  n               1   27[BANK1 ] unsigned char 
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      unsigned char 
  8302 ;; Registers used:
  8303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8309 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8310 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8311 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8312 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8313 ;;Total ram usage:       11 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; Hardware stack levels required when called:    9
  8316 ;; This function calls:
  8317 ;;		_OLED_print_xy
  8318 ;;		___bmul
  8319 ;;		___fltol
  8320 ;;		_ftoa
  8321 ;;		_itoa
  8322 ;;		_paging
  8323 ;;		_returnToPage
  8324 ;; This function is called by:
  8325 ;;		_menu
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           
  8330                           ;psect for function _channelView
  8331  0DFD                     _channelView:	
  8332                           
  8333                           ;menu.c: 69: uint8_t channelView(t_globalData *data);menu.c: 70: {;menu.c: 71:  static u
      +                          int8_t page = 0;;menu.c: 72:  uint8_t n;;menu.c: 74:  returnToPage(page);
  8334                           
  8335                           ;incstack = 0
  8336                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8337  0DFD  0141               	movlb	1	; select bank1
  8338  0DFE  0862               	movf	channelView@page^(0+128),w
  8339  0DFF  31A3  23BA  318D   	fcall	_returnToPage
  8340                           
  8341                           ;menu.c: 75:  if (g_updateScreen) {
  8342  0E02  0141               	movlb	1	; select bank1
  8343  0E03  086F               	movf	_g_updateScreen^(0+128),w
  8344  0E04  1903               	btfsc	3,2
  8345  0E05  2EBA               	goto	l5255
  8346                           
  8347                           ;menu.c: 76:   for (n = 0; n < 4; n++) {
  8348  0E06  01BB               	clrf	channelView@n^(0+128)
  8349  0E07                     l5237:	
  8350  0E07  3004               	movlw	4
  8351  0E08  023B               	subwf	channelView@n^(0+128),w
  8352  0E09  1803               	btfsc	3,0
  8353  0E0A  2EBA               	goto	l5255
  8354                           
  8355                           ;menu.c: 77:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
  8356  0E0B  0140               	movlb	0	; select bank0
  8357  0E0C  01A7               	clrf	OLED_print_xy@row
  8358  0E0D  30E7               	movlw	low (STR_11| (0+32768))
  8359  0E0E  00A8               	movwf	OLED_print_xy@s
  8360  0E0F  30A9               	movlw	high (STR_11| (0+32768))
  8361  0E10  00A9               	movwf	OLED_print_xy@s+1
  8362  0E11  300C               	movlw	12
  8363  0E12  0141               	movlb	1	; select bank1
  8364  0E13  00B3               	movwf	??_channelView^(0+128)
  8365  0E14  0833               	movf	??_channelView^(0+128),w
  8366  0E15  0140               	movlb	0	; select bank0
  8367  0E16  00A0               	movwf	___bmul@multiplicand
  8368  0E17  0141               	movlb	1	; select bank1
  8369  0E18  083B               	movf	channelView@n^(0+128),w
  8370  0E19  3188  2006  318D   	fcall	___bmul
  8371  0E1C  31A3  2388  318D   	fcall	_OLED_print_xy
  8372                           
  8373                           ;menu.c: 78:    itoa(str, n + 1, 1);
  8374  0E1F  3059               	movlw	low _str
  8375  0E20  0141               	movlb	1	; select bank1
  8376  0E21  00A5               	movwf	itoa@str^(0+128)
  8377  0E22  3001               	movlw	high _str
  8378  0E23  00A6               	movwf	(itoa@str+1)^(0+128)
  8379  0E24  083B               	movf	channelView@n^(0+128),w
  8380  0E25  3E01               	addlw	1
  8381  0E26  00B3               	movwf	??_channelView^(0+128)
  8382  0E27  0833               	movf	??_channelView^(0+128),w
  8383  0E28  00A7               	movwf	itoa@value^(0+128)
  8384  0E29  01A8               	clrf	itoa@width^(0+128)
  8385  0E2A  0AA8               	incf	itoa@width^(0+128),f
  8386  0E2B  31A7  272C  318D   	fcall	_itoa
  8387                           
  8388                           ;menu.c: 79:    OLED_print_xy(n * 12 + 3, 0, str);
  8389  0E2E  0140               	movlb	0	; select bank0
  8390  0E2F  01A7               	clrf	OLED_print_xy@row
  8391  0E30  3059               	movlw	low _str
  8392  0E31  00A8               	movwf	OLED_print_xy@s
  8393  0E32  3001               	movlw	high _str
  8394  0E33  00A9               	movwf	OLED_print_xy@s+1
  8395  0E34  300C               	movlw	12
  8396  0E35  0141               	movlb	1	; select bank1
  8397  0E36  00B3               	movwf	??_channelView^(0+128)
  8398  0E37  0833               	movf	??_channelView^(0+128),w
  8399  0E38  0140               	movlb	0	; select bank0
  8400  0E39  00A0               	movwf	___bmul@multiplicand
  8401  0E3A  0141               	movlb	1	; select bank1
  8402  0E3B  083B               	movf	channelView@n^(0+128),w
  8403  0E3C  3188  2006  318D   	fcall	___bmul
  8404  0E3F  3E03               	addlw	3
  8405  0E40  31A3  2388  318D   	fcall	_OLED_print_xy
  8406                           
  8407                           ;menu.c: 80:    OLED_print_xy(n * 12 + 4, 0, ": ");
  8408  0E43  0140               	movlb	0	; select bank0
  8409  0E44  01A7               	clrf	OLED_print_xy@row
  8410  0E45  30F8               	movlw	low (STR_12| (0+32768))
  8411  0E46  00A8               	movwf	OLED_print_xy@s
  8412  0E47  30A9               	movlw	high (STR_12| (0+32768))
  8413  0E48  00A9               	movwf	OLED_print_xy@s+1
  8414  0E49  300C               	movlw	12
  8415  0E4A  0141               	movlb	1	; select bank1
  8416  0E4B  00B3               	movwf	??_channelView^(0+128)
  8417  0E4C  0833               	movf	??_channelView^(0+128),w
  8418  0E4D  0140               	movlb	0	; select bank0
  8419  0E4E  00A0               	movwf	___bmul@multiplicand
  8420  0E4F  0141               	movlb	1	; select bank1
  8421  0E50  083B               	movf	channelView@n^(0+128),w
  8422  0E51  3188  2006  318D   	fcall	___bmul
  8423  0E54  3E04               	addlw	4
  8424  0E55  31A3  2388  318D   	fcall	_OLED_print_xy
  8425                           
  8426                           ;menu.c: 81:    itoa(str, data->chData[n].lensDia, 2);
  8427  0E58  3059               	movlw	low _str
  8428  0E59  0141               	movlb	1	; select bank1
  8429  0E5A  00A5               	movwf	itoa@str^(0+128)
  8430  0E5B  3001               	movlw	high _str
  8431  0E5C  00A6               	movwf	(itoa@str+1)^(0+128)
  8432  0E5D  083B               	movf	channelView@n^(0+128),w
  8433  0E5E  00B3               	movwf	??_channelView^(0+128)
  8434  0E5F  01B4               	clrf	(??_channelView^(0+128)+1)
  8435  0E60  3005               	movlw	5
  8436  0E61                     u6145:	
  8437  0E61  35B3               	lslf	??_channelView^(0+128),f
  8438  0E62  0DB4               	rlf	(??_channelView^(0+128)+1),f
  8439  0E63  0B89               	decfsz	9,f
  8440  0E64  2E61               	goto	u6145
  8441  0E65  0833               	movf	??_channelView^(0+128),w
  8442  0E66  0731               	addwf	channelView@data^(0+128),w
  8443  0E67  00B5               	movwf	(??_channelView+2)^(0+128)
  8444  0E68  0834               	movf	(??_channelView+1)^(0+128),w
  8445  0E69  3D32               	addwfc	(channelView@data+1)^(0+128),w
  8446  0E6A  00B6               	movwf	(??_channelView+3)^(0+128)
  8447  0E6B  0835               	movf	(??_channelView+2)^(0+128),w
  8448  0E6C  3E43               	addlw	67
  8449  0E6D  0086               	movwf	6
  8450  0E6E  3000               	movlw	0
  8451  0E6F  3D36               	addwfc	(??_channelView+3)^(0+128),w
  8452  0E70  0087               	movwf	7
  8453  0E71  3F40               	moviw [0]fsr1
  8454  0E72  0140               	movlb	0	; select bank0
  8455  0E73  00E8               	movwf	___fltol@f1
  8456  0E74  3F41               	moviw [1]fsr1
  8457  0E75  00E9               	movwf	___fltol@f1+1
  8458  0E76  3F42               	moviw [2]fsr1
  8459  0E77  00EA               	movwf	___fltol@f1+2
  8460  0E78  3F43               	moviw [3]fsr1
  8461  0E79  00EB               	movwf	___fltol@f1+3
  8462  0E7A  3199  2180  318D   	fcall	___fltol
  8463  0E7D  0140               	movlb	0	; select bank0
  8464  0E7E  0868               	movf	?___fltol,w
  8465  0E7F  0141               	movlb	1	; select bank1
  8466  0E80  00B7               	movwf	(??_channelView+4)^(0+128)
  8467  0E81  0837               	movf	(??_channelView+4)^(0+128),w
  8468  0E82  00A7               	movwf	itoa@value^(0+128)
  8469  0E83  3002               	movlw	2
  8470  0E84  00B8               	movwf	(??_channelView+5)^(0+128)
  8471  0E85  0838               	movf	(??_channelView+5)^(0+128),w
  8472  0E86  00A8               	movwf	itoa@width^(0+128)
  8473  0E87  31A7  272C  318D   	fcall	_itoa
  8474                           
  8475                           ;menu.c: 82:    OLED_print_xy(n * 12 + 6, 0, str);
  8476  0E8A  0140               	movlb	0	; select bank0
  8477  0E8B  01A7               	clrf	OLED_print_xy@row
  8478  0E8C  3059               	movlw	low _str
  8479  0E8D  00A8               	movwf	OLED_print_xy@s
  8480  0E8E  3001               	movlw	high _str
  8481  0E8F  00A9               	movwf	OLED_print_xy@s+1
  8482  0E90  300C               	movlw	12
  8483  0E91  0141               	movlb	1	; select bank1
  8484  0E92  00B3               	movwf	??_channelView^(0+128)
  8485  0E93  0833               	movf	??_channelView^(0+128),w
  8486  0E94  0140               	movlb	0	; select bank0
  8487  0E95  00A0               	movwf	___bmul@multiplicand
  8488  0E96  0141               	movlb	1	; select bank1
  8489  0E97  083B               	movf	channelView@n^(0+128),w
  8490  0E98  3188  2006  318D   	fcall	___bmul
  8491  0E9B  3E06               	addlw	6
  8492  0E9C  31A3  2388  318D   	fcall	_OLED_print_xy
  8493                           
  8494                           ;menu.c: 83:    OLED_print_xy(n * 12 + 8, 0, "\" ");
  8495  0E9F  0140               	movlb	0	; select bank0
  8496  0EA0  01A7               	clrf	OLED_print_xy@row
  8497  0EA1  30F5               	movlw	low (STR_13| (0+32768))
  8498  0EA2  00A8               	movwf	OLED_print_xy@s
  8499  0EA3  30A9               	movlw	high (STR_13| (0+32768))
  8500  0EA4  00A9               	movwf	OLED_print_xy@s+1
  8501  0EA5  300C               	movlw	12
  8502  0EA6  0141               	movlb	1	; select bank1
  8503  0EA7  00B3               	movwf	??_channelView^(0+128)
  8504  0EA8  0833               	movf	??_channelView^(0+128),w
  8505  0EA9  0140               	movlb	0	; select bank0
  8506  0EAA  00A0               	movwf	___bmul@multiplicand
  8507  0EAB  0141               	movlb	1	; select bank1
  8508  0EAC  083B               	movf	channelView@n^(0+128),w
  8509  0EAD  3188  2006  318D   	fcall	___bmul
  8510  0EB0  3E08               	addlw	8
  8511  0EB1  31A3  2388  318D   	fcall	_OLED_print_xy
  8512                           
  8513                           ;menu.c: 84:   }
  8514  0EB4  3001               	movlw	1
  8515  0EB5  0141               	movlb	1	; select bank1
  8516  0EB6  00B3               	movwf	??_channelView^(0+128)
  8517  0EB7  0833               	movf	??_channelView^(0+128),w
  8518  0EB8  07BB               	addwf	channelView@n^(0+128),f
  8519  0EB9  2E07               	goto	l5237
  8520  0EBA                     l5255:	
  8521                           
  8522                           ;menu.c: 87:  for (n = 0; n < 4; n++) {
  8523  0EBA  01BB               	clrf	channelView@n^(0+128)
  8524  0EBB                     l5257:	
  8525  0EBB  3004               	movlw	4
  8526  0EBC  023B               	subwf	channelView@n^(0+128),w
  8527  0EBD  1803               	btfsc	3,0
  8528  0EBE  2FED               	goto	l5293
  8529  0EBF  2FBA               	goto	l5287
  8530  0EC0                     l5261:	
  8531                           
  8532                           ;menu.c: 90:    OLED_print_xy(n * 12 + 0, 1, "Off         ");
  8533  0EC0  0140               	movlb	0	; select bank0
  8534  0EC1  01A7               	clrf	OLED_print_xy@row
  8535  0EC2  0AA7               	incf	OLED_print_xy@row,f
  8536  0EC3  30E2               	movlw	low (STR_14| (0+32768))
  8537  0EC4  00A8               	movwf	OLED_print_xy@s
  8538  0EC5  30A8               	movlw	high (STR_14| (0+32768))
  8539  0EC6  00A9               	movwf	OLED_print_xy@s+1
  8540  0EC7  300C               	movlw	12
  8541  0EC8  0141               	movlb	1	; select bank1
  8542  0EC9  00B3               	movwf	??_channelView^(0+128)
  8543  0ECA  0833               	movf	??_channelView^(0+128),w
  8544  0ECB  0140               	movlb	0	; select bank0
  8545  0ECC  00A0               	movwf	___bmul@multiplicand
  8546  0ECD  0141               	movlb	1	; select bank1
  8547  0ECE  083B               	movf	channelView@n^(0+128),w
  8548  0ECF  3188  2006  318D   	fcall	___bmul
  8549  0ED2  31A3  2388  318D   	fcall	_OLED_print_xy
  8550                           
  8551                           ;menu.c: 91:    break;
  8552  0ED5  2FE7               	goto	l5289
  8553  0ED6                     l5263:	
  8554                           
  8555                           ;menu.c: 93:    ftoa(str, data->chData[n].Patt, 4, 1);
  8556  0ED6  083B               	movf	channelView@n^(0+128),w
  8557  0ED7  00B3               	movwf	??_channelView^(0+128)
  8558  0ED8  01B4               	clrf	(??_channelView^(0+128)+1)
  8559  0ED9  3005               	movlw	5
  8560  0EDA                     u6165:	
  8561  0EDA  35B3               	lslf	??_channelView^(0+128),f
  8562  0EDB  0DB4               	rlf	(??_channelView^(0+128)+1),f
  8563  0EDC  0B89               	decfsz	9,f
  8564  0EDD  2EDA               	goto	u6165
  8565  0EDE  0833               	movf	??_channelView^(0+128),w
  8566  0EDF  0731               	addwf	channelView@data^(0+128),w
  8567  0EE0  00B5               	movwf	(??_channelView+2)^(0+128)
  8568  0EE1  0834               	movf	(??_channelView+1)^(0+128),w
  8569  0EE2  3D32               	addwfc	(channelView@data+1)^(0+128),w
  8570  0EE3  00B6               	movwf	(??_channelView+3)^(0+128)
  8571  0EE4  0835               	movf	(??_channelView+2)^(0+128),w
  8572  0EE5  3E39               	addlw	57
  8573  0EE6  0086               	movwf	6
  8574  0EE7  3000               	movlw	0
  8575  0EE8  3D36               	addwfc	(??_channelView+3)^(0+128),w
  8576  0EE9  0087               	movwf	7
  8577  0EEA  3F40               	moviw [0]fsr1
  8578  0EEB  00A5               	movwf	ftoa@fValue^(0+128)
  8579  0EEC  3F41               	moviw [1]fsr1
  8580  0EED  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8581  0EEE  3F42               	moviw [2]fsr1
  8582  0EEF  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8583  0EF0  3F43               	moviw [3]fsr1
  8584  0EF1  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8585  0EF2  3004               	movlw	4
  8586  0EF3  00B7               	movwf	(??_channelView+4)^(0+128)
  8587  0EF4  0837               	movf	(??_channelView+4)^(0+128),w
  8588  0EF5  00A9               	movwf	ftoa@width^(0+128)
  8589  0EF6  01AA               	clrf	ftoa@prec^(0+128)
  8590  0EF7  0AAA               	incf	ftoa@prec^(0+128),f
  8591  0EF8  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8592  0EF9  3194  24EE  318D   	fcall	_ftoa
  8593                           
  8594                           ;menu.c: 94:    OLED_print_xy(n * 12 + 0, 1, str);
  8595  0EFC  0140               	movlb	0	; select bank0
  8596  0EFD  01A7               	clrf	OLED_print_xy@row
  8597  0EFE  0AA7               	incf	OLED_print_xy@row,f
  8598  0EFF  3059               	movlw	low _str
  8599  0F00  00A8               	movwf	OLED_print_xy@s
  8600  0F01  3001               	movlw	high _str
  8601  0F02  00A9               	movwf	OLED_print_xy@s+1
  8602  0F03  300C               	movlw	12
  8603  0F04  0141               	movlb	1	; select bank1
  8604  0F05  00B3               	movwf	??_channelView^(0+128)
  8605  0F06  0833               	movf	??_channelView^(0+128),w
  8606  0F07  0140               	movlb	0	; select bank0
  8607  0F08  00A0               	movwf	___bmul@multiplicand
  8608  0F09  0141               	movlb	1	; select bank1
  8609  0F0A  083B               	movf	channelView@n^(0+128),w
  8610  0F0B  3188  2006  318D   	fcall	___bmul
  8611  0F0E  31A3  2388  318D   	fcall	_OLED_print_xy
  8612                           
  8613                           ;menu.c: 95:    OLED_print_xy(n * 12 + 4, 1, "W ");
  8614  0F11  0140               	movlb	0	; select bank0
  8615  0F12  01A7               	clrf	OLED_print_xy@row
  8616  0F13  0AA7               	incf	OLED_print_xy@row,f
  8617  0F14  30FB               	movlw	low (STR_15| (0+32768))
  8618  0F15  00A8               	movwf	OLED_print_xy@s
  8619  0F16  30A9               	movlw	high (STR_15| (0+32768))
  8620  0F17  00A9               	movwf	OLED_print_xy@s+1
  8621  0F18  300C               	movlw	12
  8622  0F19  0141               	movlb	1	; select bank1
  8623  0F1A  00B3               	movwf	??_channelView^(0+128)
  8624  0F1B  0833               	movf	??_channelView^(0+128),w
  8625  0F1C  0140               	movlb	0	; select bank0
  8626  0F1D  00A0               	movwf	___bmul@multiplicand
  8627  0F1E  0141               	movlb	1	; select bank1
  8628  0F1F  083B               	movf	channelView@n^(0+128),w
  8629  0F20  3188  2006  318D   	fcall	___bmul
  8630  0F23  3E04               	addlw	4
  8631  0F24  31A3  2388  318D   	fcall	_OLED_print_xy
  8632                           
  8633                           ;menu.c: 96:    OLED_print_xy(n * 12 + 6, 1, (data->chData[n].mode == MODE_AUTO ? "auto 
      +                           " : "manual"));
  8634  0F27  0141               	movlb	1	; select bank1
  8635  0F28  083B               	movf	channelView@n^(0+128),w
  8636  0F29  00B3               	movwf	??_channelView^(0+128)
  8637  0F2A  01B4               	clrf	(??_channelView^(0+128)+1)
  8638  0F2B  3005               	movlw	5
  8639  0F2C                     u6175:	
  8640  0F2C  35B3               	lslf	??_channelView^(0+128),f
  8641  0F2D  0DB4               	rlf	(??_channelView^(0+128)+1),f
  8642  0F2E  0B89               	decfsz	9,f
  8643  0F2F  2F2C               	goto	u6175
  8644  0F30  0833               	movf	??_channelView^(0+128),w
  8645  0F31  0731               	addwf	channelView@data^(0+128),w
  8646  0F32  00B5               	movwf	(??_channelView+2)^(0+128)
  8647  0F33  0834               	movf	(??_channelView+1)^(0+128),w
  8648  0F34  3D32               	addwfc	(channelView@data+1)^(0+128),w
  8649  0F35  00B6               	movwf	(??_channelView+3)^(0+128)
  8650  0F36  0835               	movf	(??_channelView+2)^(0+128),w
  8651  0F37  3E4B               	addlw	75
  8652  0F38  0086               	movwf	6
  8653  0F39  3000               	movlw	0
  8654  0F3A  3D36               	addwfc	(??_channelView+3)^(0+128),w
  8655  0F3B  0087               	movwf	7
  8656  0F3C  0301               	decf	1,w
  8657  0F3D  1903               	btfsc	3,2
  8658  0F3E  2F43               	goto	l5273
  8659  0F3F  307F               	movlw	low ((STR_27+2)| (0+32768))
  8660  0F40  00B9               	movwf	_channelView$1227^(0+128)
  8661  0F41  30A9               	movlw	high ((STR_27+2)| (0+32768))
  8662  0F42  2F46               	goto	L6
  8663  0F43                     l5273:	
  8664  0F43  30AF               	movlw	low ((STR_26+1)| (0+32768))
  8665  0F44  00B9               	movwf	_channelView$1227^(0+128)
  8666  0F45  30A9               	movlw	high ((STR_26+1)| (0+32768))
  8667  0F46                     L6:	
  8668  0F46  00BA               	movwf	(_channelView$1227^(0+128)+1)
  8669  0F47  0140               	movlb	0	; select bank0
  8670  0F48  01A7               	clrf	OLED_print_xy@row
  8671  0F49  0AA7               	incf	OLED_print_xy@row,f
  8672  0F4A  0141               	movlb	1	; select bank1
  8673  0F4B  083A               	movf	(_channelView$1227+1)^(0+128),w
  8674  0F4C  0140               	movlb	0	; select bank0
  8675  0F4D  00A9               	movwf	OLED_print_xy@s+1
  8676  0F4E  0141               	movlb	1	; select bank1
  8677  0F4F  0839               	movf	_channelView$1227^(0+128),w
  8678  0F50  0140               	movlb	0	; select bank0
  8679  0F51  00A8               	movwf	OLED_print_xy@s
  8680  0F52  300C               	movlw	12
  8681  0F53  0141               	movlb	1	; select bank1
  8682  0F54  00B3               	movwf	??_channelView^(0+128)
  8683  0F55  0833               	movf	??_channelView^(0+128),w
  8684  0F56  0140               	movlb	0	; select bank0
  8685  0F57  00A0               	movwf	___bmul@multiplicand
  8686  0F58  0141               	movlb	1	; select bank1
  8687  0F59  083B               	movf	channelView@n^(0+128),w
  8688  0F5A  3188  2006  318D   	fcall	___bmul
  8689  0F5D  3E06               	addlw	6
  8690  0F5E  31A3  2388  318D   	fcall	_OLED_print_xy
  8691                           
  8692                           ;menu.c: 97:    break;
  8693  0F61  2FE7               	goto	l5289
  8694  0F62                     l5277:	
  8695                           
  8696                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
  8697  0F62  0140               	movlb	0	; select bank0
  8698  0F63  01A7               	clrf	OLED_print_xy@row
  8699  0F64  0AA7               	incf	OLED_print_xy@row,f
  8700  0F65  3023               	movlw	low (STR_18| (0+32768))
  8701  0F66  00A8               	movwf	OLED_print_xy@s
  8702  0F67  30A9               	movlw	high (STR_18| (0+32768))
  8703  0F68  00A9               	movwf	OLED_print_xy@s+1
  8704  0F69  300C               	movlw	12
  8705  0F6A  0141               	movlb	1	; select bank1
  8706  0F6B  00B3               	movwf	??_channelView^(0+128)
  8707  0F6C  0833               	movf	??_channelView^(0+128),w
  8708  0F6D  0140               	movlb	0	; select bank0
  8709  0F6E  00A0               	movwf	___bmul@multiplicand
  8710  0F6F  0141               	movlb	1	; select bank1
  8711  0F70  083B               	movf	channelView@n^(0+128),w
  8712  0F71  3188  2006  318D   	fcall	___bmul
  8713  0F74  31A3  2388  318D   	fcall	_OLED_print_xy
  8714                           
  8715                           ;menu.c: 100:    break;
  8716  0F77  2FE7               	goto	l5289
  8717  0F78                     l5279:	
  8718                           
  8719                           ;menu.c: 102:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
  8720  0F78  0140               	movlb	0	; select bank0
  8721  0F79  01A7               	clrf	OLED_print_xy@row
  8722  0F7A  0AA7               	incf	OLED_print_xy@row,f
  8723  0F7B  30EF               	movlw	low (STR_19| (0+32768))
  8724  0F7C  00A8               	movwf	OLED_print_xy@s
  8725  0F7D  30A8               	movlw	high (STR_19| (0+32768))
  8726  0F7E  00A9               	movwf	OLED_print_xy@s+1
  8727  0F7F  300C               	movlw	12
  8728  0F80  0141               	movlb	1	; select bank1
  8729  0F81  00B3               	movwf	??_channelView^(0+128)
  8730  0F82  0833               	movf	??_channelView^(0+128),w
  8731  0F83  0140               	movlb	0	; select bank0
  8732  0F84  00A0               	movwf	___bmul@multiplicand
  8733  0F85  0141               	movlb	1	; select bank1
  8734  0F86  083B               	movf	channelView@n^(0+128),w
  8735  0F87  3188  2006  318D   	fcall	___bmul
  8736  0F8A  31A3  2388  318D   	fcall	_OLED_print_xy
  8737                           
  8738                           ;menu.c: 103:    break;
  8739  0F8D  2FE7               	goto	l5289
  8740  0F8E                     l5281:	
  8741                           
  8742                           ;menu.c: 105:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
  8743  0F8E  0140               	movlb	0	; select bank0
  8744  0F8F  01A7               	clrf	OLED_print_xy@row
  8745  0F90  0AA7               	incf	OLED_print_xy@row,f
  8746  0F91  3016               	movlw	low (STR_20| (0+32768))
  8747  0F92  00A8               	movwf	OLED_print_xy@s
  8748  0F93  30A9               	movlw	high (STR_20| (0+32768))
  8749  0F94  00A9               	movwf	OLED_print_xy@s+1
  8750  0F95  300C               	movlw	12
  8751  0F96  0141               	movlb	1	; select bank1
  8752  0F97  00B3               	movwf	??_channelView^(0+128)
  8753  0F98  0833               	movf	??_channelView^(0+128),w
  8754  0F99  0140               	movlb	0	; select bank0
  8755  0F9A  00A0               	movwf	___bmul@multiplicand
  8756  0F9B  0141               	movlb	1	; select bank1
  8757  0F9C  083B               	movf	channelView@n^(0+128),w
  8758  0F9D  3188  2006  318D   	fcall	___bmul
  8759  0FA0  31A3  2388  318D   	fcall	_OLED_print_xy
  8760                           
  8761                           ;menu.c: 106:    break;
  8762  0FA3  2FE7               	goto	l5289
  8763  0FA4                     l5283:	
  8764                           
  8765                           ;menu.c: 108:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
  8766  0FA4  0140               	movlb	0	; select bank0
  8767  0FA5  01A7               	clrf	OLED_print_xy@row
  8768  0FA6  0AA7               	incf	OLED_print_xy@row,f
  8769  0FA7  3030               	movlw	low (STR_21| (0+32768))
  8770  0FA8  00A8               	movwf	OLED_print_xy@s
  8771  0FA9  30A9               	movlw	high (STR_21| (0+32768))
  8772  0FAA  00A9               	movwf	OLED_print_xy@s+1
  8773  0FAB  300C               	movlw	12
  8774  0FAC  0141               	movlb	1	; select bank1
  8775  0FAD  00B3               	movwf	??_channelView^(0+128)
  8776  0FAE  0833               	movf	??_channelView^(0+128),w
  8777  0FAF  0140               	movlb	0	; select bank0
  8778  0FB0  00A0               	movwf	___bmul@multiplicand
  8779  0FB1  0141               	movlb	1	; select bank1
  8780  0FB2  083B               	movf	channelView@n^(0+128),w
  8781  0FB3  3188  2006  318D   	fcall	___bmul
  8782  0FB6  31A3  2388  318D   	fcall	_OLED_print_xy
  8783                           
  8784                           ;menu.c: 109:    break;
  8785  0FB9  2FE7               	goto	l5289
  8786  0FBA                     l5287:	
  8787  0FBA  083B               	movf	channelView@n^(0+128),w
  8788  0FBB  00B3               	movwf	??_channelView^(0+128)
  8789  0FBC  01B4               	clrf	(??_channelView^(0+128)+1)
  8790  0FBD  3005               	movlw	5
  8791  0FBE                     u6195:	
  8792  0FBE  35B3               	lslf	??_channelView^(0+128),f
  8793  0FBF  0DB4               	rlf	(??_channelView^(0+128)+1),f
  8794  0FC0  0B89               	decfsz	9,f
  8795  0FC1  2FBE               	goto	u6195
  8796  0FC2  0833               	movf	??_channelView^(0+128),w
  8797  0FC3  0731               	addwf	channelView@data^(0+128),w
  8798  0FC4  00B5               	movwf	(??_channelView+2)^(0+128)
  8799  0FC5  0834               	movf	(??_channelView+1)^(0+128),w
  8800  0FC6  3D32               	addwfc	(channelView@data+1)^(0+128),w
  8801  0FC7  00B6               	movwf	(??_channelView+3)^(0+128)
  8802  0FC8  0835               	movf	(??_channelView+2)^(0+128),w
  8803  0FC9  3E4C               	addlw	76
  8804  0FCA  0086               	movwf	6
  8805  0FCB  3000               	movlw	0
  8806  0FCC  3D36               	addwfc	(??_channelView+3)^(0+128),w
  8807  0FCD  0087               	movwf	7
  8808  0FCE  0801               	movf	1,w
  8809  0FCF  00B7               	movwf	(??_channelView+4)^(0+128)
  8810  0FD0  01B8               	clrf	((??_channelView+4)^(0+128)+1)
  8811                           
  8812                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8813                           ; Switch size 1, requested type "simple"
  8814                           ; Number of cases is 1, Range of values is 0 to 0
  8815                           ; switch strategies available:
  8816                           ; Name         Instructions Cycles
  8817                           ; simple_byte            4     3 (average)
  8818                           ; direct_byte            8     6 (fixed)
  8819                           ; jumptable            260     6 (fixed)
  8820                           ;	Chosen strategy is simple_byte
  8821  0FD1  0838               	movf	(??_channelView+5)^(0+128),w
  8822  0FD2  3A00               	xorlw	0	; case 0
  8823  0FD3  1903               	skipnz
  8824  0FD4  2FD6               	goto	l5563
  8825  0FD5  2FA4               	goto	l5283
  8826  0FD6                     l5563:	
  8827                           
  8828                           ; Switch size 1, requested type "simple"
  8829                           ; Number of cases is 5, Range of values is 0 to 4
  8830                           ; switch strategies available:
  8831                           ; Name         Instructions Cycles
  8832                           ; direct_byte           16     6 (fixed)
  8833                           ; simple_byte           16     9 (average)
  8834                           ; jumptable            260     6 (fixed)
  8835                           ;	Chosen strategy is simple_byte
  8836  0FD6  0837               	movf	(??_channelView+4)^(0+128),w
  8837  0FD7  3A00               	xorlw	0	; case 0
  8838  0FD8  1903               	skipnz
  8839  0FD9  2EC0               	goto	l5261
  8840  0FDA  3A01               	xorlw	1	; case 1
  8841  0FDB  1903               	skipnz
  8842  0FDC  2ED6               	goto	l5263
  8843  0FDD  3A03               	xorlw	3	; case 2
  8844  0FDE  1903               	skipnz
  8845  0FDF  2F62               	goto	l5277
  8846  0FE0  3A01               	xorlw	1	; case 3
  8847  0FE1  1903               	skipnz
  8848  0FE2  2F78               	goto	l5279
  8849  0FE3  3A07               	xorlw	7	; case 4
  8850  0FE4  1903               	skipnz
  8851  0FE5  2F8E               	goto	l5281
  8852  0FE6  2FA4               	goto	l5283
  8853  0FE7                     l5289:	
  8854                           
  8855                           ;menu.c: 111:  }
  8856  0FE7  3001               	movlw	1
  8857  0FE8  0141               	movlb	1	; select bank1
  8858  0FE9  00B3               	movwf	??_channelView^(0+128)
  8859  0FEA  0833               	movf	??_channelView^(0+128),w
  8860  0FEB  07BB               	addwf	channelView@n^(0+128),f
  8861  0FEC  2EBB               	goto	l5257
  8862  0FED                     l5293:	
  8863                           
  8864                           ;menu.c: 112:  page = paging(page, 4);
  8865  0FED  3004               	movlw	4
  8866  0FEE  00B3               	movwf	??_channelView^(0+128)
  8867  0FEF  0833               	movf	??_channelView^(0+128),w
  8868  0FF0  0140               	movlb	0	; select bank0
  8869  0FF1  00A7               	movwf	paging@lastPage
  8870  0FF2  0141               	movlb	1	; select bank1
  8871  0FF3  0862               	movf	channelView@page^(0+128),w
  8872  0FF4  31A7  2795         	fcall	_paging
  8873  0FF6  0141               	movlb	1	; select bank1
  8874  0FF7  00B4               	movwf	(??_channelView+1)^(0+128)
  8875  0FF8  0834               	movf	(??_channelView+1)^(0+128),w
  8876  0FF9  00E2               	movwf	channelView@page^(0+128)
  8877                           
  8878                           ;menu.c: 113:  selectedChannel = page;
  8879  0FFA  0862               	movf	channelView@page^(0+128),w
  8880  0FFB  00B3               	movwf	??_channelView^(0+128)
  8881  0FFC  0833               	movf	??_channelView^(0+128),w
  8882  0FFD  00E4               	movwf	_selectedChannel^(0+128)
  8883                           
  8884                           ;menu.c: 115:  return page;
  8885  0FFE  0862               	movf	channelView@page^(0+128),w
  8886  0FFF  0008               	return
  8887  1000                     __end_of_channelView:	
  8888                           
  8889                           	psect	text13
  8890  08CB                     __ptext13:	
  8891 ;; *************** function _statusView *****************
  8892 ;; Defined at:
  8893 ;;		line 18 in file "menu.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;  data            2   17[BANK1 ] PTR struct .
  8896 ;;		 -> data(173), 
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      unsigned char 
  8901 ;; Registers used:
  8902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8908 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8910 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8911 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8912 ;;Total ram usage:        4 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    9
  8915 ;; This function calls:
  8916 ;;		_OLED_print_xy
  8917 ;;		_ftoa
  8918 ;;		_paging
  8919 ;;		_returnToPage
  8920 ;; This function is called by:
  8921 ;;		_menu
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           
  8926                           ;psect for function _statusView
  8927  08CB                     _statusView:	
  8928                           
  8929                           ;menu.c: 18: uint8_t statusView(t_globalData *data);menu.c: 19: {;menu.c: 20:  static ui
      +                          nt8_t page = 0;;menu.c: 21:  static uint8_t prevSensorStat = 1;;menu.c: 24:  if (prevSen
      +                          sorStat != data->status.SENSOR_OK) {
  8930                           
  8931                           ;incstack = 0
  8932                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8933  08CB  0141               	movlb	1	; select bank1
  8934  08CC  0831               	movf	statusView@data^(0+128),w
  8935  08CD  3E2C               	addlw	44
  8936  08CE  0086               	movwf	6
  8937  08CF  3000               	movlw	0
  8938  08D0  3D32               	addwfc	(statusView@data+1)^(0+128),w
  8939  08D1  0087               	movwf	7
  8940  08D2  0C01               	rrf	1,w
  8941  08D3  3901               	andlw	1
  8942  08D4  066E               	xorwf	statusView@prevSensorStat^(0+128),w
  8943  08D5  1903               	skipnz
  8944  08D6  28F1               	goto	l4295
  8945                           
  8946                           ;menu.c: 25:   prevSensorStat = data->status.SENSOR_OK;
  8947  08D7  0831               	movf	statusView@data^(0+128),w
  8948  08D8  3E2C               	addlw	44
  8949  08D9  0086               	movwf	6
  8950  08DA  3000               	movlw	0
  8951  08DB  3D32               	addwfc	(statusView@data+1)^(0+128),w
  8952  08DC  0087               	movwf	7
  8953  08DD  3000               	movlw	0
  8954  08DE  1881               	btfsc	1,1
  8955  08DF  3001               	movlw	1
  8956  08E0  00EE               	movwf	statusView@prevSensorStat^(0+128)
  8957                           
  8958                           ;menu.c: 27:   if (data->status.SENSOR_OK)
  8959  08E1  0831               	movf	statusView@data^(0+128),w
  8960  08E2  3E2C               	addlw	44
  8961  08E3  0086               	movwf	6
  8962  08E4  3000               	movlw	0
  8963  08E5  3D32               	addwfc	(statusView@data+1)^(0+128),w
  8964  08E6  0087               	movwf	7
  8965  08E7  1C81               	btfss	1,1
  8966  08E8  28EB               	goto	l4291
  8967                           
  8968                           ;menu.c: 28:    page = 0;
  8969  08E9  01E3               	clrf	statusView@page^(0+128)
  8970  08EA  28EF               	goto	l4293
  8971  08EB                     l4291:	
  8972                           
  8973                           ;menu.c: 30:    page = 3;
  8974  08EB  3003               	movlw	3
  8975  08EC  00B3               	movwf	??_statusView^(0+128)
  8976  08ED  0833               	movf	??_statusView^(0+128),w
  8977  08EE  00E3               	movwf	statusView@page^(0+128)
  8978  08EF                     l4293:	
  8979                           
  8980                           ;menu.c: 31:   g_updateScreen = 1;
  8981  08EF  01EF               	clrf	_g_updateScreen^(0+128)
  8982  08F0  0AEF               	incf	_g_updateScreen^(0+128),f
  8983  08F1                     l4295:	
  8984                           
  8985                           ;menu.c: 34:  returnToPage(page);
  8986  08F1  0863               	movf	statusView@page^(0+128),w
  8987  08F2  31A3  23BA  3188   	fcall	_returnToPage
  8988                           
  8989                           ;menu.c: 35:  if (g_updateScreen)
  8990  08F5  0141               	movlb	1	; select bank1
  8991  08F6  086F               	movf	_g_updateScreen^(0+128),w
  8992  08F7  1903               	btfsc	3,2
  8993  08F8  2903               	goto	l4301
  8994                           
  8995                           ;menu.c: 36:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   Power");
  8996  08F9  0140               	movlb	0	; select bank0
  8997  08FA  01A7               	clrf	OLED_print_xy@row
  8998  08FB  301B               	movlw	low (STR_3| (0+32768))
  8999  08FC  00A8               	movwf	OLED_print_xy@s
  9000  08FD  30A8               	movlw	high (STR_3| (0+32768))
  9001  08FE  00A9               	movwf	OLED_print_xy@s+1
  9002  08FF  3000               	movlw	0
  9003  0900  31A3  2388  3188   	fcall	_OLED_print_xy
  9004  0903                     l4301:	
  9005                           
  9006                           ;menu.c: 37:  if (data->status.AUX_SENSOR_OK) {
  9007  0903  0141               	movlb	1	; select bank1
  9008  0904  0831               	movf	statusView@data^(0+128),w
  9009  0905  3E2C               	addlw	44
  9010  0906  0086               	movwf	6
  9011  0907  3000               	movlw	0
  9012  0908  3D32               	addwfc	(statusView@data+1)^(0+128),w
  9013  0909  0087               	movwf	7
  9014  090A  1D01               	btfss	1,2
  9015  090B  2963               	goto	l4313
  9016                           
  9017                           ;menu.c: 38:   ftoa(str, data->tempC, 5, 1);
  9018  090C  0831               	movf	statusView@data^(0+128),w
  9019  090D  0086               	movwf	6
  9020  090E  0832               	movf	(statusView@data+1)^(0+128),w
  9021  090F  0087               	movwf	7
  9022  0910  3F40               	moviw [0]fsr1
  9023  0911  00A5               	movwf	ftoa@fValue^(0+128)
  9024  0912  3F41               	moviw [1]fsr1
  9025  0913  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9026  0914  3F42               	moviw [2]fsr1
  9027  0915  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9028  0916  3F43               	moviw [3]fsr1
  9029  0917  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9030  0918  3005               	movlw	5
  9031  0919  00B3               	movwf	??_statusView^(0+128)
  9032  091A  0833               	movf	??_statusView^(0+128),w
  9033  091B  00A9               	movwf	ftoa@width^(0+128)
  9034  091C  01AA               	clrf	ftoa@prec^(0+128)
  9035  091D  0AAA               	incf	ftoa@prec^(0+128),f
  9036  091E  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9037  091F  3194  24EE  3188   	fcall	_ftoa
  9038                           
  9039                           ;menu.c: 39:   OLED_print_xy(0, 1, str);
  9040  0922  0140               	movlb	0	; select bank0
  9041  0923  01A7               	clrf	OLED_print_xy@row
  9042  0924  0AA7               	incf	OLED_print_xy@row,f
  9043  0925  3059               	movlw	low _str
  9044  0926  00A8               	movwf	OLED_print_xy@s
  9045  0927  3001               	movlw	high _str
  9046  0928  00A9               	movwf	OLED_print_xy@s+1
  9047  0929  3000               	movlw	0
  9048  092A  31A3  2388  3188   	fcall	_OLED_print_xy
  9049                           
  9050                           ;menu.c: 40:   OLED_print_xy(5, 1, "\001 \002");
  9051  092D  0140               	movlb	0	; select bank0
  9052  092E  01A7               	clrf	OLED_print_xy@row
  9053  092F  0AA7               	incf	OLED_print_xy@row,f
  9054  0930  30DF               	movlw	low (STR_4| (0+32768))
  9055  0931  00A8               	movwf	OLED_print_xy@s
  9056  0932  30A9               	movlw	high (STR_4| (0+32768))
  9057  0933  00A9               	movwf	OLED_print_xy@s+1
  9058  0934  3005               	movlw	5
  9059  0935  31A3  2388  3188   	fcall	_OLED_print_xy
  9060                           
  9061                           ;menu.c: 41:   ftoa(str, data->tempAux, 3, 0);
  9062  0938  0141               	movlb	1	; select bank1
  9063  0939  0831               	movf	statusView@data^(0+128),w
  9064  093A  0086               	movwf	6
  9065  093B  0832               	movf	(statusView@data+1)^(0+128),w
  9066  093C  0087               	movwf	7
  9067  093D  3150               	addfsr 1,16
  9068  093E  3F40               	moviw [0]fsr1
  9069  093F  00A5               	movwf	ftoa@fValue^(0+128)
  9070  0940  3F41               	moviw [1]fsr1
  9071  0941  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9072  0942  3F42               	moviw [2]fsr1
  9073  0943  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9074  0944  3F43               	moviw [3]fsr1
  9075  0945  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9076  0946  3003               	movlw	3
  9077  0947  00B3               	movwf	??_statusView^(0+128)
  9078  0948  0833               	movf	??_statusView^(0+128),w
  9079  0949  00A9               	movwf	ftoa@width^(0+128)
  9080  094A  01AA               	clrf	ftoa@prec^(0+128)
  9081  094B  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9082  094C  3194  24EE  3188   	fcall	_ftoa
  9083                           
  9084                           ;menu.c: 42:   OLED_print_xy(8, 1, str);
  9085  094F  0140               	movlb	0	; select bank0
  9086  0950  01A7               	clrf	OLED_print_xy@row
  9087  0951  0AA7               	incf	OLED_print_xy@row,f
  9088  0952  3059               	movlw	low _str
  9089  0953  00A8               	movwf	OLED_print_xy@s
  9090  0954  3001               	movlw	high _str
  9091  0955  00A9               	movwf	OLED_print_xy@s+1
  9092  0956  3008               	movlw	8
  9093  0957  31A3  2388  3188   	fcall	_OLED_print_xy
  9094                           
  9095                           ;menu.c: 43:   OLED_print_xy(11, 1, "\001");
  9096  095A  0140               	movlb	0	; select bank0
  9097  095B  01A7               	clrf	OLED_print_xy@row
  9098  095C  0AA7               	incf	OLED_print_xy@row,f
  9099  095D  30FE               	movlw	low (STR_5| (0+32768))
  9100  095E  00A8               	movwf	OLED_print_xy@s
  9101  095F  30A9               	movlw	high (STR_5| (0+32768))
  9102  0960  00A9               	movwf	OLED_print_xy@s+1
  9103  0961  300B               	movlw	11
  9104  0962  298C               	goto	L7
  9105  0963                     l4313:	
  9106                           ;menu.c: 44:  } else {
  9107                           
  9108                           
  9109                           ;menu.c: 45:   ftoa(str, data->tempC, 5, 1);
  9110  0963  0831               	movf	statusView@data^(0+128),w
  9111  0964  0086               	movwf	6
  9112  0965  0832               	movf	(statusView@data+1)^(0+128),w
  9113  0966  0087               	movwf	7
  9114  0967  3F40               	moviw [0]fsr1
  9115  0968  00A5               	movwf	ftoa@fValue^(0+128)
  9116  0969  3F41               	moviw [1]fsr1
  9117  096A  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9118  096B  3F42               	moviw [2]fsr1
  9119  096C  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9120  096D  3F43               	moviw [3]fsr1
  9121  096E  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9122  096F  3005               	movlw	5
  9123  0970  00B3               	movwf	??_statusView^(0+128)
  9124  0971  0833               	movf	??_statusView^(0+128),w
  9125  0972  00A9               	movwf	ftoa@width^(0+128)
  9126  0973  01AA               	clrf	ftoa@prec^(0+128)
  9127  0974  0AAA               	incf	ftoa@prec^(0+128),f
  9128  0975  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9129  0976  3194  24EE  3188   	fcall	_ftoa
  9130                           
  9131                           ;menu.c: 46:   OLED_print_xy(0, 1, str);
  9132  0979  0140               	movlb	0	; select bank0
  9133  097A  01A7               	clrf	OLED_print_xy@row
  9134  097B  0AA7               	incf	OLED_print_xy@row,f
  9135  097C  3059               	movlw	low _str
  9136  097D  00A8               	movwf	OLED_print_xy@s
  9137  097E  3001               	movlw	high _str
  9138  097F  00A9               	movwf	OLED_print_xy@s+1
  9139  0980  3000               	movlw	0
  9140  0981  31A3  2388  3188   	fcall	_OLED_print_xy
  9141                           
  9142                           ;menu.c: 47:   OLED_print_xy(5, 1, "\001      ");
  9143  0984  0140               	movlb	0	; select bank0
  9144  0985  01A7               	clrf	OLED_print_xy@row
  9145  0986  0AA7               	incf	OLED_print_xy@row,f
  9146  0987  3096               	movlw	low (STR_6| (0+32768))
  9147  0988  00A8               	movwf	OLED_print_xy@s
  9148  0989  30A9               	movlw	high (STR_6| (0+32768))
  9149  098A  00A9               	movwf	OLED_print_xy@s+1
  9150  098B  3005               	movlw	5
  9151  098C                     L7:	
  9152  098C  31A3  2388  3188   	fcall	_OLED_print_xy
  9153                           
  9154                           ;menu.c: 49:  ftoa(str, data->relHum, 5, 1);
  9155                           
  9156                           ;menu.c: 48:  }
  9157  098F  0141               	movlb	1	; select bank1
  9158  0990  0831               	movf	statusView@data^(0+128),w
  9159  0991  0086               	movwf	6
  9160  0992  0832               	movf	(statusView@data+1)^(0+128),w
  9161  0993  0087               	movwf	7
  9162  0994  3144               	addfsr 1,4
  9163  0995  3F40               	moviw [0]fsr1
  9164  0996  00A5               	movwf	ftoa@fValue^(0+128)
  9165  0997  3F41               	moviw [1]fsr1
  9166  0998  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9167  0999  3F42               	moviw [2]fsr1
  9168  099A  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9169  099B  3F43               	moviw [3]fsr1
  9170  099C  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9171  099D  3005               	movlw	5
  9172  099E  00B3               	movwf	??_statusView^(0+128)
  9173  099F  0833               	movf	??_statusView^(0+128),w
  9174  09A0  00A9               	movwf	ftoa@width^(0+128)
  9175  09A1  01AA               	clrf	ftoa@prec^(0+128)
  9176  09A2  0AAA               	incf	ftoa@prec^(0+128),f
  9177  09A3  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9178  09A4  3194  24EE  3188   	fcall	_ftoa
  9179                           
  9180                           ;menu.c: 50:  OLED_print_xy(12, 1, str);
  9181  09A7  0140               	movlb	0	; select bank0
  9182  09A8  01A7               	clrf	OLED_print_xy@row
  9183  09A9  0AA7               	incf	OLED_print_xy@row,f
  9184  09AA  3059               	movlw	low _str
  9185  09AB  00A8               	movwf	OLED_print_xy@s
  9186  09AC  3001               	movlw	high _str
  9187  09AD  00A9               	movwf	OLED_print_xy@s+1
  9188  09AE  300C               	movlw	12
  9189  09AF  31A3  2388  3188   	fcall	_OLED_print_xy
  9190                           
  9191                           ;menu.c: 51:  OLED_print_xy(12 + 5, 1, "%     ");
  9192  09B2  0140               	movlb	0	; select bank0
  9193  09B3  01A7               	clrf	OLED_print_xy@row
  9194  09B4  0AA7               	incf	OLED_print_xy@row,f
  9195  09B5  30CB               	movlw	low (STR_7| (0+32768))
  9196  09B6  00A8               	movwf	OLED_print_xy@s
  9197  09B7  30A9               	movlw	high (STR_7| (0+32768))
  9198  09B8  00A9               	movwf	OLED_print_xy@s+1
  9199  09B9  3011               	movlw	17
  9200  09BA  31A3  2388  3188   	fcall	_OLED_print_xy
  9201                           
  9202                           ;menu.c: 52:  ftoa(str, data->dewPointC, 5, 1);
  9203  09BD  0141               	movlb	1	; select bank1
  9204  09BE  0831               	movf	statusView@data^(0+128),w
  9205  09BF  0086               	movwf	6
  9206  09C0  0832               	movf	(statusView@data+1)^(0+128),w
  9207  09C1  0087               	movwf	7
  9208  09C2  3148               	addfsr 1,8
  9209  09C3  3F40               	moviw [0]fsr1
  9210  09C4  00A5               	movwf	ftoa@fValue^(0+128)
  9211  09C5  3F41               	moviw [1]fsr1
  9212  09C6  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9213  09C7  3F42               	moviw [2]fsr1
  9214  09C8  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9215  09C9  3F43               	moviw [3]fsr1
  9216  09CA  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9217  09CB  3005               	movlw	5
  9218  09CC  00B3               	movwf	??_statusView^(0+128)
  9219  09CD  0833               	movf	??_statusView^(0+128),w
  9220  09CE  00A9               	movwf	ftoa@width^(0+128)
  9221  09CF  01AA               	clrf	ftoa@prec^(0+128)
  9222  09D0  0AAA               	incf	ftoa@prec^(0+128),f
  9223  09D1  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9224  09D2  3194  24EE  3188   	fcall	_ftoa
  9225                           
  9226                           ;menu.c: 53:  OLED_print_xy(2 * 12, 1, str);
  9227  09D5  0140               	movlb	0	; select bank0
  9228  09D6  01A7               	clrf	OLED_print_xy@row
  9229  09D7  0AA7               	incf	OLED_print_xy@row,f
  9230  09D8  3059               	movlw	low _str
  9231  09D9  00A8               	movwf	OLED_print_xy@s
  9232  09DA  3001               	movlw	high _str
  9233  09DB  00A9               	movwf	OLED_print_xy@s+1
  9234  09DC  3018               	movlw	24
  9235  09DD  31A3  2388  3188   	fcall	_OLED_print_xy
  9236                           
  9237                           ;menu.c: 54:  OLED_print_xy(2 * 12 +5, 1, "\001      ");
  9238  09E0  0140               	movlb	0	; select bank0
  9239  09E1  01A7               	clrf	OLED_print_xy@row
  9240  09E2  0AA7               	incf	OLED_print_xy@row,f
  9241  09E3  3096               	movlw	low (STR_6| (0+32768))
  9242  09E4  00A8               	movwf	OLED_print_xy@s
  9243  09E5  30A9               	movlw	high (STR_6| (0+32768))
  9244  09E6  00A9               	movwf	OLED_print_xy@s+1
  9245  09E7  301D               	movlw	29
  9246  09E8  31A3  2388  3188   	fcall	_OLED_print_xy
  9247                           
  9248                           ;menu.c: 55:  ftoa(str, data->voltage, 4, 1);
  9249  09EB  0141               	movlb	1	; select bank1
  9250  09EC  0831               	movf	statusView@data^(0+128),w
  9251  09ED  0086               	movwf	6
  9252  09EE  0832               	movf	(statusView@data+1)^(0+128),w
  9253  09EF  0087               	movwf	7
  9254  09F0  3154               	addfsr 1,20
  9255  09F1  3F40               	moviw [0]fsr1
  9256  09F2  00A5               	movwf	ftoa@fValue^(0+128)
  9257  09F3  3F41               	moviw [1]fsr1
  9258  09F4  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9259  09F5  3F42               	moviw [2]fsr1
  9260  09F6  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9261  09F7  3F43               	moviw [3]fsr1
  9262  09F8  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9263  09F9  3004               	movlw	4
  9264  09FA  00B3               	movwf	??_statusView^(0+128)
  9265  09FB  0833               	movf	??_statusView^(0+128),w
  9266  09FC  00A9               	movwf	ftoa@width^(0+128)
  9267  09FD  01AA               	clrf	ftoa@prec^(0+128)
  9268  09FE  0AAA               	incf	ftoa@prec^(0+128),f
  9269  09FF  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9270  0A00  3194  24EE  3188   	fcall	_ftoa
  9271                           
  9272                           ;menu.c: 56:  OLED_print_xy(3 * 12, 1, str);
  9273  0A03  0140               	movlb	0	; select bank0
  9274  0A04  01A7               	clrf	OLED_print_xy@row
  9275  0A05  0AA7               	incf	OLED_print_xy@row,f
  9276  0A06  3059               	movlw	low _str
  9277  0A07  00A8               	movwf	OLED_print_xy@s
  9278  0A08  3001               	movlw	high _str
  9279  0A09  00A9               	movwf	OLED_print_xy@s+1
  9280  0A0A  3024               	movlw	36
  9281  0A0B  31A3  2388  3188   	fcall	_OLED_print_xy
  9282                           
  9283                           ;menu.c: 57:  OLED_print_xy(3 * 12 +4, 1, "V  ");
  9284  0A0E  0140               	movlb	0	; select bank0
  9285  0A0F  01A7               	clrf	OLED_print_xy@row
  9286  0A10  0AA7               	incf	OLED_print_xy@row,f
  9287  0A11  30E3               	movlw	low (STR_9| (0+32768))
  9288  0A12  00A8               	movwf	OLED_print_xy@s
  9289  0A13  30A9               	movlw	high (STR_9| (0+32768))
  9290  0A14  00A9               	movwf	OLED_print_xy@s+1
  9291  0A15  3028               	movlw	40
  9292  0A16  31A3  2388  3188   	fcall	_OLED_print_xy
  9293                           
  9294                           ;menu.c: 58:  ftoa(str, data->power, 4, 1);
  9295  0A19  0141               	movlb	1	; select bank1
  9296  0A1A  0831               	movf	statusView@data^(0+128),w
  9297  0A1B  0086               	movwf	6
  9298  0A1C  0832               	movf	(statusView@data+1)^(0+128),w
  9299  0A1D  0087               	movwf	7
  9300  0A1E  315C               	addfsr 1,28
  9301  0A1F  3F40               	moviw [0]fsr1
  9302  0A20  00A5               	movwf	ftoa@fValue^(0+128)
  9303  0A21  3F41               	moviw [1]fsr1
  9304  0A22  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9305  0A23  3F42               	moviw [2]fsr1
  9306  0A24  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9307  0A25  3F43               	moviw [3]fsr1
  9308  0A26  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9309  0A27  3004               	movlw	4
  9310  0A28  00B3               	movwf	??_statusView^(0+128)
  9311  0A29  0833               	movf	??_statusView^(0+128),w
  9312  0A2A  00A9               	movwf	ftoa@width^(0+128)
  9313  0A2B  01AA               	clrf	ftoa@prec^(0+128)
  9314  0A2C  0AAA               	incf	ftoa@prec^(0+128),f
  9315  0A2D  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9316  0A2E  3194  24EE  3188   	fcall	_ftoa
  9317                           
  9318                           ;menu.c: 59:  OLED_print_xy(3 * 12 +7, 1, str);
  9319  0A31  0140               	movlb	0	; select bank0
  9320  0A32  01A7               	clrf	OLED_print_xy@row
  9321  0A33  0AA7               	incf	OLED_print_xy@row,f
  9322  0A34  3059               	movlw	low _str
  9323  0A35  00A8               	movwf	OLED_print_xy@s
  9324  0A36  3001               	movlw	high _str
  9325  0A37  00A9               	movwf	OLED_print_xy@s+1
  9326  0A38  302B               	movlw	43
  9327  0A39  31A3  2388  3188   	fcall	_OLED_print_xy
  9328                           
  9329                           ;menu.c: 60:  OLED_print_xy(3 * 12 +11, 1, "W");
  9330  0A3C  0140               	movlb	0	; select bank0
  9331  0A3D  01A7               	clrf	OLED_print_xy@row
  9332  0A3E  0AA7               	incf	OLED_print_xy@row,f
  9333  0A3F  3000               	movlw	low (STR_10| (0+32768))
  9334  0A40  00A8               	movwf	OLED_print_xy@s
  9335  0A41  30AA               	movlw	high (STR_10| (0+32768))
  9336  0A42  00A9               	movwf	OLED_print_xy@s+1
  9337  0A43  302F               	movlw	47
  9338  0A44  31A3  2388  3188   	fcall	_OLED_print_xy
  9339                           
  9340                           ;menu.c: 61:  if (data->status.SENSOR_OK)
  9341  0A47  0141               	movlb	1	; select bank1
  9342  0A48  0831               	movf	statusView@data^(0+128),w
  9343  0A49  3E2C               	addlw	44
  9344  0A4A  0086               	movwf	6
  9345  0A4B  3000               	movlw	0
  9346  0A4C  3D32               	addwfc	(statusView@data+1)^(0+128),w
  9347  0A4D  0087               	movwf	7
  9348  0A4E  1C81               	btfss	1,1
  9349  0A4F  2A5D               	goto	l4339
  9350                           
  9351                           ;menu.c: 62:   page = paging(page, 4);
  9352  0A50  3004               	movlw	4
  9353  0A51  00B3               	movwf	??_statusView^(0+128)
  9354  0A52  0833               	movf	??_statusView^(0+128),w
  9355  0A53  0140               	movlb	0	; select bank0
  9356  0A54  00A7               	movwf	paging@lastPage
  9357  0A55  0141               	movlb	1	; select bank1
  9358  0A56  0863               	movf	statusView@page^(0+128),w
  9359  0A57  31A7  2795         	fcall	_paging
  9360  0A59  0141               	movlb	1	; select bank1
  9361  0A5A  00B4               	movwf	(??_statusView+1)^(0+128)
  9362  0A5B  0834               	movf	(??_statusView+1)^(0+128),w
  9363  0A5C  00E3               	movwf	statusView@page^(0+128)
  9364  0A5D                     l4339:	
  9365                           
  9366                           ;menu.c: 63:  return page;
  9367  0A5D  0863               	movf	statusView@page^(0+128),w
  9368  0A5E  0008               	return
  9369  0A5F                     __end_of_statusView:	
  9370                           
  9371                           	psect	text14
  9372  0818                     __ptext14:	
  9373 ;; *************** function _spinInput *****************
  9374 ;; Defined at:
  9375 ;;		line 96 in file "inputs.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;  input           2    0[BANK1 ] PTR float 
  9378 ;;		 -> data.chData(128), data(173), 
  9379 ;;  min             4    2[BANK1 ] float 
  9380 ;;  max             4    6[BANK1 ] float 
  9381 ;;  step            4   10[BANK1 ] float 
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  dir             1   75[BANK0 ] enum E7886
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      void 
  9386 ;; Registers used:
  9387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9393 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9396 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9397 ;;Total ram usage:       16 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    5
  9400 ;; This function calls:
  9401 ;;		___fladd
  9402 ;;		___flge
  9403 ;;		___flsub
  9404 ;;		_getRotDir
  9405 ;; This function is called by:
  9406 ;;		_setOutputPower
  9407 ;;		_setLensDia
  9408 ;;		_setDPOffset
  9409 ;;		_setSkyTemp
  9410 ;;		_setFudgeFactor
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           
  9415                           ;psect for function _spinInput
  9416  0818                     _spinInput:	
  9417                           
  9418                           ;inputs.c: 96: void spinInput(float *input, float min, float max, float step);inputs.c: 
      +                          97: {;inputs.c: 98:  enum e_direction dir = getRotDir();
  9419                           
  9420                           ;incstack = 0
  9421                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9422  0818  31A1  21D2  3188   	fcall	_getRotDir
  9423  081B  0140               	movlb	0	; select bank0
  9424  081C  00EA               	movwf	??_spinInput
  9425  081D  086A               	movf	??_spinInput,w
  9426  081E  00EB               	movwf	spinInput@dir
  9427                           
  9428                           ;inputs.c: 100:  if ((dir == ROT_CCW) && (*input > min))
  9429  081F  3002               	movlw	2
  9430  0820  066B               	xorwf	spinInput@dir,w
  9431  0821  1D03               	btfss	3,2
  9432  0822  2875               	goto	l4031
  9433  0823  0141               	movlb	1	; select bank1
  9434  0824  0825               	movf	(spinInput@min+3)^(0+128),w
  9435  0825  0140               	movlb	0	; select bank0
  9436  0826  00A3               	movwf	___flge@ff1+3
  9437  0827  0141               	movlb	1	; select bank1
  9438  0828  0824               	movf	(spinInput@min+2)^(0+128),w
  9439  0829  0140               	movlb	0	; select bank0
  9440  082A  00A2               	movwf	___flge@ff1+2
  9441  082B  0141               	movlb	1	; select bank1
  9442  082C  0823               	movf	(spinInput@min+1)^(0+128),w
  9443  082D  0140               	movlb	0	; select bank0
  9444  082E  00A1               	movwf	___flge@ff1+1
  9445  082F  0141               	movlb	1	; select bank1
  9446  0830  0822               	movf	spinInput@min^(0+128),w
  9447  0831  0140               	movlb	0	; select bank0
  9448  0832  00A0               	movwf	___flge@ff1
  9449  0833  0141               	movlb	1	; select bank1
  9450  0834  0820               	movf	spinInput@input^(0+128),w
  9451  0835  0086               	movwf	6
  9452  0836  0821               	movf	(spinInput@input+1)^(0+128),w
  9453  0837  0087               	movwf	7
  9454  0838  3F40               	moviw [0]fsr1
  9455  0839  0140               	movlb	0	; select bank0
  9456  083A  00A4               	movwf	___flge@ff2
  9457  083B  3F41               	moviw [1]fsr1
  9458  083C  00A5               	movwf	___flge@ff2+1
  9459  083D  3F42               	moviw [2]fsr1
  9460  083E  00A6               	movwf	___flge@ff2+2
  9461  083F  3F43               	moviw [3]fsr1
  9462  0840  00A7               	movwf	___flge@ff2+3
  9463  0841  3199  21F2  3188   	fcall	___flge
  9464  0844  1803               	btfsc	3,0
  9465  0845  2875               	goto	l4031
  9466                           
  9467                           ;inputs.c: 101:   *input -= step;
  9468  0846  0141               	movlb	1	; select bank1
  9469  0847  082D               	movf	(spinInput@step+3)^(0+128),w
  9470  0848  0140               	movlb	0	; select bank0
  9471  0849  00E5               	movwf	___flsub@a+3
  9472  084A  0141               	movlb	1	; select bank1
  9473  084B  082C               	movf	(spinInput@step+2)^(0+128),w
  9474  084C  0140               	movlb	0	; select bank0
  9475  084D  00E4               	movwf	___flsub@a+2
  9476  084E  0141               	movlb	1	; select bank1
  9477  084F  082B               	movf	(spinInput@step+1)^(0+128),w
  9478  0850  0140               	movlb	0	; select bank0
  9479  0851  00E3               	movwf	___flsub@a+1
  9480  0852  0141               	movlb	1	; select bank1
  9481  0853  082A               	movf	spinInput@step^(0+128),w
  9482  0854  0140               	movlb	0	; select bank0
  9483  0855  00E2               	movwf	___flsub@a
  9484  0856  0141               	movlb	1	; select bank1
  9485  0857  0820               	movf	spinInput@input^(0+128),w
  9486  0858  0086               	movwf	6
  9487  0859  0821               	movf	(spinInput@input+1)^(0+128),w
  9488  085A  0087               	movwf	7
  9489  085B  3F40               	moviw [0]fsr1
  9490  085C  0140               	movlb	0	; select bank0
  9491  085D  00E6               	movwf	___flsub@b
  9492  085E  3F41               	moviw [1]fsr1
  9493  085F  00E7               	movwf	___flsub@b+1
  9494  0860  3F42               	moviw [2]fsr1
  9495  0861  00E8               	movwf	___flsub@b+2
  9496  0862  3F43               	moviw [3]fsr1
  9497  0863  00E9               	movwf	___flsub@b+3
  9498  0864  31A2  2269         	fcall	___flsub
  9499  0866  0141               	movlb	1	; select bank1
  9500  0867  0820               	movf	spinInput@input^(0+128),w
  9501  0868  0086               	movwf	6
  9502  0869  0821               	movf	(spinInput@input+1)^(0+128),w
  9503  086A  0087               	movwf	7
  9504  086B  0140               	movlb	0	; select bank0
  9505  086C  0862               	movf	?___flsub,w
  9506  086D  3FC0               	movwi [0]fsr1
  9507  086E  0863               	movf	?___flsub+1,w
  9508  086F  3FC1               	movwi [1]fsr1
  9509  0870  0864               	movf	?___flsub+2,w
  9510  0871  3FC2               	movwi [2]fsr1
  9511  0872  0865               	movf	?___flsub+3,w
  9512  0873  3FC3               	movwi [3]fsr1
  9513  0874  0008               	return
  9514  0875                     l4031:	
  9515  0875  0140               	movlb	0	; select bank0
  9516  0876  036B               	decf	spinInput@dir,w
  9517  0877  1D03               	btfss	3,2
  9518  0878  0008               	return
  9519  0879  0141               	movlb	1	; select bank1
  9520  087A  0820               	movf	spinInput@input^(0+128),w
  9521  087B  0086               	movwf	6
  9522  087C  0821               	movf	(spinInput@input+1)^(0+128),w
  9523  087D  0087               	movwf	7
  9524  087E  3F40               	moviw [0]fsr1
  9525  087F  0140               	movlb	0	; select bank0
  9526  0880  00A0               	movwf	___flge@ff1
  9527  0881  3F41               	moviw [1]fsr1
  9528  0882  00A1               	movwf	___flge@ff1+1
  9529  0883  3F42               	moviw [2]fsr1
  9530  0884  00A2               	movwf	___flge@ff1+2
  9531  0885  3F43               	moviw [3]fsr1
  9532  0886  00A3               	movwf	___flge@ff1+3
  9533  0887  0141               	movlb	1	; select bank1
  9534  0888  0829               	movf	(spinInput@max+3)^(0+128),w
  9535  0889  0140               	movlb	0	; select bank0
  9536  088A  00A7               	movwf	___flge@ff2+3
  9537  088B  0141               	movlb	1	; select bank1
  9538  088C  0828               	movf	(spinInput@max+2)^(0+128),w
  9539  088D  0140               	movlb	0	; select bank0
  9540  088E  00A6               	movwf	___flge@ff2+2
  9541  088F  0141               	movlb	1	; select bank1
  9542  0890  0827               	movf	(spinInput@max+1)^(0+128),w
  9543  0891  0140               	movlb	0	; select bank0
  9544  0892  00A5               	movwf	___flge@ff2+1
  9545  0893  0141               	movlb	1	; select bank1
  9546  0894  0826               	movf	spinInput@max^(0+128),w
  9547  0895  0140               	movlb	0	; select bank0
  9548  0896  00A4               	movwf	___flge@ff2
  9549  0897  3199  21F2  3188   	fcall	___flge
  9550  089A  1803               	btfsc	3,0
  9551  089B  0008               	return
  9552                           
  9553                           ;inputs.c: 103:   *input += step;
  9554  089C  0141               	movlb	1	; select bank1
  9555  089D  082D               	movf	(spinInput@step+3)^(0+128),w
  9556  089E  0140               	movlb	0	; select bank0
  9557  089F  00D1               	movwf	___fladd@b+3
  9558  08A0  0141               	movlb	1	; select bank1
  9559  08A1  082C               	movf	(spinInput@step+2)^(0+128),w
  9560  08A2  0140               	movlb	0	; select bank0
  9561  08A3  00D0               	movwf	___fladd@b+2
  9562  08A4  0141               	movlb	1	; select bank1
  9563  08A5  082B               	movf	(spinInput@step+1)^(0+128),w
  9564  08A6  0140               	movlb	0	; select bank0
  9565  08A7  00CF               	movwf	___fladd@b+1
  9566  08A8  0141               	movlb	1	; select bank1
  9567  08A9  082A               	movf	spinInput@step^(0+128),w
  9568  08AA  0140               	movlb	0	; select bank0
  9569  08AB  00CE               	movwf	___fladd@b
  9570  08AC  0141               	movlb	1	; select bank1
  9571  08AD  0820               	movf	spinInput@input^(0+128),w
  9572  08AE  0086               	movwf	6
  9573  08AF  0821               	movf	(spinInput@input+1)^(0+128),w
  9574  08B0  0087               	movwf	7
  9575  08B1  3F40               	moviw [0]fsr1
  9576  08B2  0140               	movlb	0	; select bank0
  9577  08B3  00D2               	movwf	___fladd@a
  9578  08B4  3F41               	moviw [1]fsr1
  9579  08B5  00D3               	movwf	___fladd@a+1
  9580  08B6  3F42               	moviw [2]fsr1
  9581  08B7  00D4               	movwf	___fladd@a+2
  9582  08B8  3F43               	moviw [3]fsr1
  9583  08B9  00D5               	movwf	___fladd@a+3
  9584  08BA  318C  241B         	fcall	___fladd
  9585  08BC  0141               	movlb	1	; select bank1
  9586  08BD  0820               	movf	spinInput@input^(0+128),w
  9587  08BE  0086               	movwf	6
  9588  08BF  0821               	movf	(spinInput@input+1)^(0+128),w
  9589  08C0  0087               	movwf	7
  9590  08C1  0140               	movlb	0	; select bank0
  9591  08C2  084E               	movf	?___fladd,w
  9592  08C3  3FC0               	movwi [0]fsr1
  9593  08C4  084F               	movf	?___fladd+1,w
  9594  08C5  3FC1               	movwi [1]fsr1
  9595  08C6  0850               	movf	?___fladd+2,w
  9596  08C7  3FC2               	movwi [2]fsr1
  9597  08C8  0851               	movf	?___fladd+3,w
  9598  08C9  3FC3               	movwi [3]fsr1
  9599  08CA  0008               	return
  9600  08CB                     __end_of_spinInput:	
  9601                           
  9602                           	psect	text15
  9603  1004                     __ptext15:	
  9604 ;; *************** function _menuError *****************
  9605 ;; Defined at:
  9606 ;;		line 126 in file "menuhelper.c"
  9607 ;; Parameters:    Size  Location     Type
  9608 ;;		None
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;		None
  9611 ;; Return value:  Size  Location     Type
  9612 ;;                  1    wreg      void 
  9613 ;; Registers used:
  9614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9624 ;;Total ram usage:        0 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    8
  9627 ;; This function calls:
  9628 ;;		_OLED_clearDisplay
  9629 ;;		_OLED_print_xy
  9630 ;;		_OLED_returnHome
  9631 ;; This function is called by:
  9632 ;;		_menu
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           
  9637                           ;psect for function _menuError
  9638  1004                     _menuError:	
  9639                           
  9640                           ;menuhelper.c: 128:  OLED_returnHome();
  9641                           
  9642                           ;incstack = 0
  9643                           ; Regs used in _menuError: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9644  1004  3188  2002  3190   	fcall	_OLED_returnHome
  9645                           
  9646                           ;menuhelper.c: 129:  OLED_clearDisplay();
  9647  1007  3190  2000  3190   	fcall	_OLED_clearDisplay
  9648                           
  9649                           ;menuhelper.c: 130:  OLED_print_xy(0, 0, "Menu error");
  9650  100A  0140               	movlb	0	; select bank0
  9651  100B  01A7               	clrf	OLED_print_xy@row
  9652  100C  3056               	movlw	low (STR_53| (0+32768))
  9653  100D  00A8               	movwf	OLED_print_xy@s
  9654  100E  30A9               	movlw	high (STR_53| (0+32768))
  9655  100F  00A9               	movwf	OLED_print_xy@s+1
  9656  1010  3000               	movlw	0
  9657  1011  31A3  2388  3190   	fcall	_OLED_print_xy
  9658  1014                     l630:	
  9659                           ;menuhelper.c: 131:  while(1);
  9660                           
  9661  1014  2814               	goto	l630
  9662  1015                     __end_of_menuError:	
  9663                           
  9664                           	psect	text16
  9665  0802                     __ptext16:	
  9666 ;; *************** function _OLED_returnHome *****************
  9667 ;; Defined at:
  9668 ;;		line 167 in file "oled.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;                  1    wreg      void 
  9675 ;; Registers used:
  9676 ;;		wreg, status,2, status,0, pclath, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9686 ;;Total ram usage:        0 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    7
  9689 ;; This function calls:
  9690 ;;		_OLED_command
  9691 ;; This function is called by:
  9692 ;;		_main
  9693 ;;		_systemCheck
  9694 ;;		_menuError
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           
  9699                           ;psect for function _OLED_returnHome
  9700  0802                     _OLED_returnHome:	
  9701                           
  9702                           ;oled.c: 169:  OLED_command(0x02);
  9703                           
  9704                           ;incstack = 0
  9705                           ; Regs used in _OLED_returnHome: [wreg+status,2+status,0+pclath+cstack]
  9706  0802  3002               	movlw	2
  9707  0803  31A1  219E         	fcall	_OLED_command
  9708  0805  0008               	return
  9709  0806                     __end_of_OLED_returnHome:	
  9710                           
  9711                           	psect	text17
  9712  1000                     __ptext17:	
  9713 ;; *************** function _OLED_clearDisplay *****************
  9714 ;; Defined at:
  9715 ;;		line 172 in file "oled.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      void 
  9722 ;; Registers used:
  9723 ;;		wreg, status,2, status,0, pclath, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9733 ;;Total ram usage:        0 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    7
  9736 ;; This function calls:
  9737 ;;		_OLED_command
  9738 ;; This function is called by:
  9739 ;;		_main
  9740 ;;		_systemCheck
  9741 ;;		_menuError
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           
  9746                           ;psect for function _OLED_clearDisplay
  9747  1000                     _OLED_clearDisplay:	
  9748                           
  9749                           ;oled.c: 174:  OLED_command(0x01);
  9750                           
  9751                           ;incstack = 0
  9752                           ; Regs used in _OLED_clearDisplay: [wreg+status,2+status,0+pclath+cstack]
  9753  1000  3001               	movlw	1
  9754  1001  31A1  219E         	fcall	_OLED_command
  9755  1003  0008               	return
  9756  1004                     __end_of_OLED_clearDisplay:	
  9757                           
  9758                           	psect	text18
  9759  2463                     __ptext18:	
  9760 ;; *************** function _getStateFunc *****************
  9761 ;; Defined at:
  9762 ;;		line 137 in file "menuhelper.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;  state           1    wreg     enum E7957
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;  state           1   11[BANK0 ] enum E7957
  9767 ;;  n               1   12[BANK0 ] unsigned char 
  9768 ;; Return value:  Size  Location     Type
  9769 ;;                  2    6[BANK0 ] PTR FTN(PTR struct .,)un
  9770 ;; Registers used:
  9771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9772 ;; Tracked objects:
  9773 ;;		On entry : 0/0
  9774 ;;		On exit  : 0/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9777 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9779 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9780 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9781 ;;Total ram usage:        7 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:    4
  9784 ;; This function calls:
  9785 ;;		___wmul
  9786 ;; This function is called by:
  9787 ;;		_menu
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           
  9792                           ;psect for function _getStateFunc
  9793  2463                     _getStateFunc:	
  9794                           
  9795                           ;incstack = 0
  9796                           ; Regs used in _getStateFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9797                           ;getStateFunc@state stored from wreg
  9798  2463  0140               	movlb	0	; select bank0
  9799  2464  00AB               	movwf	getStateFunc@state
  9800                           
  9801                           ;menuhelper.c: 137: t_stateFuncPtr getStateFunc(enum e_menuStates state);menuhelper.c: 1
      +                          38: {;menuhelper.c: 139:  uint8_t n;;menuhelper.c: 142:  for(n = 0; n < sizeof(stateFunc
      +                          Tbl)/sizeof(stateFuncTbl[0]); n++) {
  9802  2465  01AC               	clrf	getStateFunc@n
  9803  2466                     l4593:	
  9804                           
  9805                           ;menuhelper.c: 143:   if ((stateFuncTbl[n].state == state))
  9806  2466  082C               	movf	getStateFunc@n,w
  9807  2467  00A8               	movwf	??_getStateFunc
  9808  2468  01A9               	clrf	??_getStateFunc+1
  9809  2469  0828               	movf	??_getStateFunc,w
  9810  246A  00A0               	movwf	___wmul@multiplier
  9811  246B  0829               	movf	??_getStateFunc+1,w
  9812  246C  00A1               	movwf	___wmul@multiplier+1
  9813  246D  3003               	movlw	3
  9814  246E  00A2               	movwf	___wmul@multiplicand
  9815  246F  3000               	movlw	0
  9816  2470  00A3               	movwf	___wmul@multiplicand+1
  9817  2471  31A2  2211  31A4   	fcall	___wmul
  9818  2474  0140               	movlb	0	; select bank0
  9819  2475  0821               	movf	?___wmul+1,w
  9820  2476  0085               	movwf	5
  9821  2477  0820               	movf	?___wmul,w
  9822  2478  0084               	movwf	4
  9823  2479  3000               	movlw	low (_stateFuncTbl| (0+32768))
  9824  247A  0784               	addwf	4,f
  9825  247B  30A8               	movlw	high (_stateFuncTbl| (0+32768))
  9826  247C  3D85               	addwfc	5,f
  9827  247D  0800               	movf	0,w	;code access
  9828  247E  062B               	xorwf	getStateFunc@state,w
  9829  247F  1D03               	skipz
  9830  2480  2C9C               	goto	l4599
  9831                           
  9832                           ;menuhelper.c: 144:    return stateFuncTbl[n].func;
  9833  2481  082C               	movf	getStateFunc@n,w
  9834  2482  00A8               	movwf	??_getStateFunc
  9835  2483  01A9               	clrf	??_getStateFunc+1
  9836  2484  0828               	movf	??_getStateFunc,w
  9837  2485  00A0               	movwf	___wmul@multiplier
  9838  2486  0829               	movf	??_getStateFunc+1,w
  9839  2487  00A1               	movwf	___wmul@multiplier+1
  9840  2488  3003               	movlw	3
  9841  2489  00A2               	movwf	___wmul@multiplicand
  9842  248A  3000               	movlw	0
  9843  248B  00A3               	movwf	___wmul@multiplicand+1
  9844  248C  31A2  2211         	fcall	___wmul
  9845  248E  0140               	movlb	0	; select bank0
  9846  248F  0821               	movf	?___wmul+1,w
  9847  2490  0085               	movwf	5
  9848  2491  0820               	movf	?___wmul,w
  9849  2492  0084               	movwf	4
  9850  2493  3001               	movlw	low ((_stateFuncTbl+1)| (0+32768))
  9851  2494  0784               	addwf	4,f
  9852  2495  30A8               	movlw	high ((_stateFuncTbl+1)| (0+32768))
  9853  2496  3D85               	addwfc	5,f
  9854  2497  3F00               	moviw [0]fsr0
  9855  2498  00A6               	movwf	?_getStateFunc
  9856  2499  3F01               	moviw [1]fsr0
  9857  249A  00A7               	movwf	?_getStateFunc+1
  9858  249B  0008               	return
  9859  249C                     l4599:	
  9860                           
  9861                           ;menuhelper.c: 145:  }
  9862  249C  3001               	movlw	1
  9863  249D  00A8               	movwf	??_getStateFunc
  9864  249E  0828               	movf	??_getStateFunc,w
  9865  249F  07AC               	addwf	getStateFunc@n,f
  9866  24A0  3009               	movlw	9
  9867  24A1  022C               	subwf	getStateFunc@n,w
  9868  24A2  1C03               	skipc
  9869  24A3  2C66               	goto	l4593
  9870                           
  9871                           ;menuhelper.c: 146:  return (t_stateFuncPtr)((void*)0);
  9872  24A4  01A6               	clrf	?_getStateFunc
  9873  24A5  01A7               	clrf	?_getStateFunc+1
  9874  24A6  0008               	return
  9875  24A7                     __end_of_getStateFunc:	
  9876                           
  9877                           	psect	text19
  9878  21DD                     __ptext19:	
  9879 ;; *************** function _getPB *****************
  9880 ;; Defined at:
  9881 ;;		line 86 in file "inputs.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;		None
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;  ret             1    1[BANK0 ] enum E7890
  9886 ;; Return value:  Size  Location     Type
  9887 ;;                  1    wreg      enum E7890
  9888 ;; Registers used:
  9889 ;;		wreg, status,2
  9890 ;; Tracked objects:
  9891 ;;		On entry : 0/0
  9892 ;;		On exit  : 0/0
  9893 ;;		Unchanged: 0/0
  9894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9897 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9899 ;;Total ram usage:        2 bytes
  9900 ;; Hardware stack levels used:    1
  9901 ;; Hardware stack levels required when called:    3
  9902 ;; This function calls:
  9903 ;;		Nothing
  9904 ;; This function is called by:
  9905 ;;		_menu
  9906 ;; This function uses a non-reentrant model
  9907 ;;
  9908                           
  9909                           
  9910                           ;psect for function _getPB
  9911  21DD                     _getPB:	
  9912                           
  9913                           ;inputs.c: 88:  enum e_buttonPress ret = pbState;
  9914                           
  9915                           ;incstack = 0
  9916                           ; Regs used in _getPB: [wreg+status,2]
  9917  21DD  0141               	movlb	1	; select bank1
  9918  21DE  0867               	movf	_pbState^(0+128),w	;volatile
  9919  21DF  0140               	movlb	0	; select bank0
  9920  21E0  00A0               	movwf	??_getPB
  9921  21E1  0820               	movf	??_getPB,w
  9922  21E2  00A1               	movwf	getPB@ret
  9923                           
  9924                           ;inputs.c: 89:  pbState = PB_NONE;
  9925  21E3  0141               	movlb	1	; select bank1
  9926  21E4  01E7               	clrf	_pbState^(0+128)	;volatile
  9927                           
  9928                           ;inputs.c: 90:  return ret;
  9929  21E5  0140               	movlb	0	; select bank0
  9930  21E6  0821               	movf	getPB@ret,w
  9931  21E7  0008               	return
  9932  21E8                     __end_of_getPB:	
  9933                           
  9934                           	psect	text20
  9935  1C16                     __ptext20:	
  9936 ;; *************** function _getNextState *****************
  9937 ;; Defined at:
  9938 ;;		line 152 in file "menuhelper.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;  state           1    wreg     enum E7957
  9941 ;;  page            1    6[BANK0 ] unsigned char 
  9942 ;;  pb              1    7[BANK0 ] enum E7943
  9943 ;; Auto vars:     Size  Location     Type
  9944 ;;  state           1   11[BANK0 ] enum E7957
  9945 ;;  n               1   12[BANK0 ] unsigned char 
  9946 ;; Return value:  Size  Location     Type
  9947 ;;                  1    wreg      char 
  9948 ;; Registers used:
  9949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9950 ;; Tracked objects:
  9951 ;;		On entry : 0/0
  9952 ;;		On exit  : 0/0
  9953 ;;		Unchanged: 0/0
  9954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9955 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9957 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9958 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9959 ;;Total ram usage:        7 bytes
  9960 ;; Hardware stack levels used:    1
  9961 ;; Hardware stack levels required when called:    4
  9962 ;; This function calls:
  9963 ;;		___wmul
  9964 ;; This function is called by:
  9965 ;;		_menu
  9966 ;; This function uses a non-reentrant model
  9967 ;;
  9968                           
  9969                           
  9970                           ;psect for function _getNextState
  9971  1C16                     _getNextState:	
  9972                           
  9973                           ;incstack = 0
  9974                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9975                           ;getNextState@state stored from wreg
  9976  1C16  0140               	movlb	0	; select bank0
  9977  1C17  00AB               	movwf	getNextState@state
  9978                           
  9979                           ;menuhelper.c: 152: int8_t getNextState(enum e_menuStates state, uint8_t page, enum e_bu
      +                          ttonPress pb);menuhelper.c: 153: {;menuhelper.c: 154:  uint8_t n;;menuhelper.c: 157:  fo
      +                          r(n = 0; n < sizeof(nextStateTbl)/sizeof(nextStateTbl[0]); n++) {
  9980  1C18  01AC               	clrf	getNextState@n
  9981  1C19                     l4617:	
  9982                           
  9983                           ;menuhelper.c: 158:   if ((nextStateTbl[n].state == state)) {
  9984  1C19  082C               	movf	getNextState@n,w
  9985  1C1A  00A8               	movwf	??_getNextState
  9986  1C1B  01A9               	clrf	??_getNextState+1
  9987  1C1C  0828               	movf	??_getNextState,w
  9988  1C1D  00A0               	movwf	___wmul@multiplier
  9989  1C1E  0829               	movf	??_getNextState+1,w
  9990  1C1F  00A1               	movwf	___wmul@multiplier+1
  9991  1C20  3005               	movlw	5
  9992  1C21  00A2               	movwf	___wmul@multiplicand
  9993  1C22  3000               	movlw	0
  9994  1C23  00A3               	movwf	___wmul@multiplicand+1
  9995  1C24  31A2  2211  319C   	fcall	___wmul
  9996  1C27  0140               	movlb	0	; select bank0
  9997  1C28  0821               	movf	?___wmul+1,w
  9998  1C29  0085               	movwf	5
  9999  1C2A  0820               	movf	?___wmul,w
 10000  1C2B  0084               	movwf	4
 10001  1C2C  304C               	movlw	low (_nextStateTbl| (0+32768))
 10002  1C2D  0784               	addwf	4,f
 10003  1C2E  30A8               	movlw	high (_nextStateTbl| (0+32768))
 10004  1C2F  3D85               	addwfc	5,f
 10005  1C30  0800               	movf	0,w	;code access
 10006  1C31  062B               	xorwf	getNextState@state,w
 10007  1C32  1D03               	skipz
 10008  1C33  2CA1               	goto	l4637
 10009                           
 10010                           ;menuhelper.c: 160:    if ((nextStateTbl[n].page == page) ||
 10011  1C34  082C               	movf	getNextState@n,w
 10012  1C35  00A8               	movwf	??_getNextState
 10013  1C36  01A9               	clrf	??_getNextState+1
 10014  1C37  0828               	movf	??_getNextState,w
 10015  1C38  00A0               	movwf	___wmul@multiplier
 10016  1C39  0829               	movf	??_getNextState+1,w
 10017  1C3A  00A1               	movwf	___wmul@multiplier+1
 10018  1C3B  3005               	movlw	5
 10019  1C3C  00A2               	movwf	___wmul@multiplicand
 10020  1C3D  3000               	movlw	0
 10021  1C3E  00A3               	movwf	___wmul@multiplicand+1
 10022  1C3F  31A2  2211  319C   	fcall	___wmul
 10023  1C42  0140               	movlb	0	; select bank0
 10024  1C43  0821               	movf	?___wmul+1,w
 10025  1C44  0085               	movwf	5
 10026  1C45  0820               	movf	?___wmul,w
 10027  1C46  0084               	movwf	4
 10028  1C47  304D               	movlw	low ((_nextStateTbl+1)| (0+32768))
 10029  1C48  0784               	addwf	4,f
 10030  1C49  30A8               	movlw	high ((_nextStateTbl+1)| (0+32768))
 10031  1C4A  3D85               	addwfc	5,f
 10032  1C4B  0800               	movf	0,w	;code access
 10033  1C4C  0626               	xorwf	getNextState@page,w
 10034  1C4D  1903               	skipnz
 10035  1C4E  2C6A               	goto	l4623
 10036  1C4F  082C               	movf	getNextState@n,w
 10037  1C50  00A8               	movwf	??_getNextState
 10038  1C51  01A9               	clrf	??_getNextState+1
 10039  1C52  0828               	movf	??_getNextState,w
 10040  1C53  00A0               	movwf	___wmul@multiplier
 10041  1C54  0829               	movf	??_getNextState+1,w
 10042  1C55  00A1               	movwf	___wmul@multiplier+1
 10043  1C56  3005               	movlw	5
 10044  1C57  00A2               	movwf	___wmul@multiplicand
 10045  1C58  3000               	movlw	0
 10046  1C59  00A3               	movwf	___wmul@multiplicand+1
 10047  1C5A  31A2  2211  319C   	fcall	___wmul
 10048  1C5D  0140               	movlb	0	; select bank0
 10049  1C5E  0821               	movf	?___wmul+1,w
 10050  1C5F  0085               	movwf	5
 10051  1C60  0820               	movf	?___wmul,w
 10052  1C61  0084               	movwf	4
 10053  1C62  304D               	movlw	low ((_nextStateTbl+1)| (0+32768))
 10054  1C63  0784               	addwf	4,f
 10055  1C64  30A8               	movlw	high ((_nextStateTbl+1)| (0+32768))
 10056  1C65  3D85               	addwfc	5,f
 10057  1C66  0012               	moviw fsr0++
 10058  1C67  3AFF               	xorlw	255
 10059  1C68  1D03               	btfss	3,2
 10060  1C69  2CA1               	goto	l4637
 10061  1C6A                     l4623:	
 10062                           
 10063                           ;menuhelper.c: 161:     (nextStateTbl[n].page == 255)) {;menuhelper.c: 163:     if (pb =
      +                          = PB_SHORT)
 10064  1C6A  0327               	decf	getNextState@pb,w
 10065  1C6B  1D03               	btfss	3,2
 10066  1C6C  2C85               	goto	l4631
 10067                           
 10068                           ;menuhelper.c: 164:      return nextStateTbl[n].pbShort;
 10069  1C6D  082C               	movf	getNextState@n,w
 10070  1C6E  00A8               	movwf	??_getNextState
 10071  1C6F  01A9               	clrf	??_getNextState+1
 10072  1C70  0828               	movf	??_getNextState,w
 10073  1C71  00A0               	movwf	___wmul@multiplier
 10074  1C72  0829               	movf	??_getNextState+1,w
 10075  1C73  00A1               	movwf	___wmul@multiplier+1
 10076  1C74  3005               	movlw	5
 10077  1C75  00A2               	movwf	___wmul@multiplicand
 10078  1C76  3000               	movlw	0
 10079  1C77  00A3               	movwf	___wmul@multiplicand+1
 10080  1C78  31A2  2211         	fcall	___wmul
 10081  1C7A  0140               	movlb	0	; select bank0
 10082  1C7B  0821               	movf	?___wmul+1,w
 10083  1C7C  0085               	movwf	5
 10084  1C7D  0820               	movf	?___wmul,w
 10085  1C7E  0084               	movwf	4
 10086  1C7F  304E               	movlw	low ((_nextStateTbl+2)| (0+32768))
 10087  1C80  0784               	addwf	4,f
 10088  1C81  30A8               	movlw	high ((_nextStateTbl+2)| (0+32768))
 10089  1C82  3D85               	addwfc	5,f
 10090  1C83  0800               	movf	0,w	;code access
 10091  1C84  0008               	return
 10092  1C85                     l4631:	
 10093  1C85  3002               	movlw	2
 10094  1C86  0627               	xorwf	getNextState@pb,w
 10095  1C87  1D03               	btfss	3,2
 10096  1C88  2CA1               	goto	l4637
 10097                           
 10098                           ;menuhelper.c: 166:      return nextStateTbl[n].pbLong;
 10099  1C89  082C               	movf	getNextState@n,w
 10100  1C8A  00A8               	movwf	??_getNextState
 10101  1C8B  01A9               	clrf	??_getNextState+1
 10102  1C8C  0828               	movf	??_getNextState,w
 10103  1C8D  00A0               	movwf	___wmul@multiplier
 10104  1C8E  0829               	movf	??_getNextState+1,w
 10105  1C8F  00A1               	movwf	___wmul@multiplier+1
 10106  1C90  3005               	movlw	5
 10107  1C91  00A2               	movwf	___wmul@multiplicand
 10108  1C92  3000               	movlw	0
 10109  1C93  00A3               	movwf	___wmul@multiplicand+1
 10110  1C94  31A2  2211         	fcall	___wmul
 10111  1C96  0140               	movlb	0	; select bank0
 10112  1C97  0821               	movf	?___wmul+1,w
 10113  1C98  0085               	movwf	5
 10114  1C99  0820               	movf	?___wmul,w
 10115  1C9A  0084               	movwf	4
 10116  1C9B  304F               	movlw	low ((_nextStateTbl+3)| (0+32768))
 10117  1C9C  0784               	addwf	4,f
 10118  1C9D  30A8               	movlw	high ((_nextStateTbl+3)| (0+32768))
 10119  1C9E  3D85               	addwfc	5,f
 10120  1C9F  0800               	movf	0,w	;code access
 10121  1CA0  0008               	return
 10122  1CA1                     l4637:	
 10123                           ;menuhelper.c: 167:    }
 10124                           
 10125                           
 10126                           ;menuhelper.c: 169:  }
 10127  1CA1  3001               	movlw	1
 10128  1CA2  00A8               	movwf	??_getNextState
 10129  1CA3  0828               	movf	??_getNextState,w
 10130  1CA4  07AC               	addwf	getNextState@n,f
 10131  1CA5  300C               	movlw	12
 10132  1CA6  022C               	subwf	getNextState@n,w
 10133  1CA7  1C03               	skipc
 10134  1CA8  2C19               	goto	l4617
 10135                           
 10136                           ;menuhelper.c: 170:  return -1;
 10137  1CA9  30FF               	movlw	255
 10138  1CAA  0008               	return
 10139  1CAB                     __end_of_getNextState:	
 10140                           
 10141                           	psect	text21
 10142  0806                     __ptext21:	
 10143 ;; *************** function ___bmul *****************
 10144 ;; Defined at:
 10145 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;  multiplier      1    wreg     unsigned char 
 10148 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;  multiplier      1    3[BANK0 ] unsigned char 
 10151 ;;  product         1    2[BANK0 ] unsigned char 
 10152 ;; Return value:  Size  Location     Type
 10153 ;;                  1    wreg      unsigned char 
 10154 ;; Registers used:
 10155 ;;		wreg, status,2, status,0
 10156 ;; Tracked objects:
 10157 ;;		On entry : 0/0
 10158 ;;		On exit  : 0/0
 10159 ;;		Unchanged: 0/0
 10160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10161 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10164 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10165 ;;Total ram usage:        4 bytes
 10166 ;; Hardware stack levels used:    1
 10167 ;; Hardware stack levels required when called:    3
 10168 ;; This function calls:
 10169 ;;		Nothing
 10170 ;; This function is called by:
 10171 ;;		_channelView
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           
 10176                           ;psect for function ___bmul
 10177  0806                     ___bmul:	
 10178                           
 10179                           ;incstack = 0
 10180                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10181                           ;___bmul@multiplier stored from wreg
 10182  0806  0140               	movlb	0	; select bank0
 10183  0807  00A3               	movwf	___bmul@multiplier
 10184  0808  01A2               	clrf	___bmul@product
 10185  0809                     l4163:	
 10186  0809  1C23               	btfss	___bmul@multiplier,0
 10187  080A  280F               	goto	l4167
 10188  080B  0820               	movf	___bmul@multiplicand,w
 10189  080C  00A1               	movwf	??___bmul
 10190  080D  0821               	movf	??___bmul,w
 10191  080E  07A2               	addwf	___bmul@product,f
 10192  080F                     l4167:	
 10193  080F  1003               	clrc
 10194  0810  0DA0               	rlf	___bmul@multiplicand,f
 10195  0811  1003               	clrc
 10196  0812  0CA3               	rrf	___bmul@multiplier,f
 10197  0813  0823               	movf	___bmul@multiplier,w
 10198  0814  1D03               	btfss	3,2
 10199  0815  2809               	goto	l4163
 10200  0816  0822               	movf	___bmul@product,w
 10201  0817  0008               	return
 10202  0818                     __end_of___bmul:	
 10203                           
 10204                           	psect	text22
 10205  23BA                     __ptext22:	
 10206 ;; *************** function _returnToPage *****************
 10207 ;; Defined at:
 10208 ;;		line 218 in file "menuhelper.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;  page            1    wreg     unsigned char 
 10211 ;; Auto vars:     Size  Location     Type
 10212 ;;  page            1    9[BANK0 ] unsigned char 
 10213 ;;  n               1   10[BANK0 ] unsigned char 
 10214 ;; Return value:  Size  Location     Type
 10215 ;;                  1    wreg      void 
 10216 ;; Registers used:
 10217 ;;		wreg, status,2, status,0, pclath, cstack
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/0
 10220 ;;		On exit  : 0/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10226 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10227 ;;Total ram usage:        4 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    7
 10230 ;; This function calls:
 10231 ;;		_OLED_command
 10232 ;;		___wmul
 10233 ;; This function is called by:
 10234 ;;		_statusView
 10235 ;;		_channelView
 10236 ;;		_channelSetup
 10237 ;;		_setOutputPower
 10238 ;;		_setLensDia
 10239 ;;		_setup
 10240 ;;		_setDPOffset
 10241 ;;		_setSkyTemp
 10242 ;;		_setFudgeFactor
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           
 10247                           ;psect for function _returnToPage
 10248  23BA                     _returnToPage:	
 10249                           
 10250                           ;incstack = 0
 10251                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 10252                           ;returnToPage@page stored from wreg
 10253  23BA  0140               	movlb	0	; select bank0
 10254  23BB  00A9               	movwf	returnToPage@page
 10255                           
 10256                           ;menuhelper.c: 218: void returnToPage(uint8_t page);menuhelper.c: 219: {;menuhelper.c: 2
      +                          20:  uint8_t n;;menuhelper.c: 222:  if (! g_updateScreen)
 10257  23BC  0141               	movlb	1	; select bank1
 10258  23BD  086F               	movf	_g_updateScreen^(0+128),w
 10259  23BE  1903               	btfsc	3,2
 10260  23BF  0008               	return
 10261                           
 10262                           ;menuhelper.c: 224:  OLED_command(0x01);
 10263  23C0  3001               	movlw	1
 10264  23C1  31A1  219E  31A3   	fcall	_OLED_command
 10265                           
 10266                           ;menuhelper.c: 225:  OLED_command(0x02);
 10267  23C4  3002               	movlw	2
 10268  23C5  31A1  219E  31A3   	fcall	_OLED_command
 10269                           
 10270                           ;menuhelper.c: 226:  for(n = 0; n < 12 * page; n++) {
 10271  23C8  0140               	movlb	0	; select bank0
 10272  23C9  01AA               	clrf	returnToPage@n
 10273  23CA                     l4049:	
 10274  23CA  0829               	movf	returnToPage@page,w
 10275  23CB  00A7               	movwf	??_returnToPage
 10276  23CC  01A8               	clrf	??_returnToPage+1
 10277  23CD  0827               	movf	??_returnToPage,w
 10278  23CE  00A0               	movwf	___wmul@multiplier
 10279  23CF  0828               	movf	??_returnToPage+1,w
 10280  23D0  00A1               	movwf	___wmul@multiplier+1
 10281  23D1  300C               	movlw	12
 10282  23D2  00A2               	movwf	___wmul@multiplicand
 10283  23D3  3000               	movlw	0
 10284  23D4  00A3               	movwf	___wmul@multiplicand+1
 10285  23D5  31A2  2211  31A3   	fcall	___wmul
 10286  23D8  0140               	movlb	0	; select bank0
 10287  23D9  0821               	movf	?___wmul+1,w
 10288  23DA  3A80               	xorlw	128
 10289  23DB  3C80               	sublw	128
 10290  23DC  1D03               	skipz
 10291  23DD  2BE0               	goto	u4785
 10292  23DE  0820               	movf	?___wmul,w
 10293  23DF  022A               	subwf	returnToPage@n,w
 10294  23E0                     u4785:	
 10295  23E0  1803               	btfsc	3,0
 10296  23E1  0008               	return
 10297                           
 10298                           ;menuhelper.c: 227:   OLED_command(0x10 | 0x08 | 0x00);
 10299  23E2  3018               	movlw	24
 10300  23E3  31A1  219E  31A3   	fcall	_OLED_command
 10301                           
 10302                           ;menuhelper.c: 228:  }
 10303  23E6  3001               	movlw	1
 10304  23E7  0140               	movlb	0	; select bank0
 10305  23E8  00A7               	movwf	??_returnToPage
 10306  23E9  0827               	movf	??_returnToPage,w
 10307  23EA  07AA               	addwf	returnToPage@n,f
 10308  23EB  2BCA               	goto	l4049
 10309  23EC                     __end_of_returnToPage:	
 10310                           
 10311                           	psect	text23
 10312  2795                     __ptext23:	
 10313 ;; *************** function _paging *****************
 10314 ;; Defined at:
 10315 ;;		line 177 in file "menuhelper.c"
 10316 ;; Parameters:    Size  Location     Type
 10317 ;;  currentPage     1    wreg     unsigned char 
 10318 ;;  lastPage        1    7[BANK0 ] const unsigned char 
 10319 ;; Auto vars:     Size  Location     Type
 10320 ;;  currentPage     1   10[BANK0 ] unsigned char 
 10321 ;;  n               1   12[BANK0 ] unsigned char 
 10322 ;;  dir             1   11[BANK0 ] enum E7939
 10323 ;; Return value:  Size  Location     Type
 10324 ;;                  1    wreg      unsigned char 
 10325 ;; Registers used:
 10326 ;;		wreg, status,2, status,0, pclath, cstack
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10332 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10333 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10335 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10336 ;;Total ram usage:        6 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; Hardware stack levels required when called:    8
 10339 ;; This function calls:
 10340 ;;		_OLED_scrollDisplayLeft
 10341 ;;		_OLED_scrollDisplayRight
 10342 ;;		_getRotDir
 10343 ;; This function is called by:
 10344 ;;		_statusView
 10345 ;;		_channelView
 10346 ;;		_channelSetup
 10347 ;;		_setup
 10348 ;; This function uses a non-reentrant model
 10349 ;;
 10350                           
 10351                           
 10352                           ;psect for function _paging
 10353  2795                     _paging:	
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 10357                           ;paging@currentPage stored from wreg
 10358  2795  0140               	movlb	0	; select bank0
 10359  2796  00AA               	movwf	paging@currentPage
 10360                           
 10361                           ;menuhelper.c: 177: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 178: {;menuhelper.c: 179:  uint8_t n;;menuhelper.c: 180:  enum e_direction dir;;me
      +                          nuhelper.c: 181:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 184:  PIE0bi
      +                          ts.IOCIE = 0;
 10362  2797  014E               	movlb	14	; select bank14
 10363  2798  1216               	bcf	22,4	;volatile
 10364                           
 10365                           ;menuhelper.c: 186:  dir = getRotDir();
 10366  2799  31A1  21D2  31A7   	fcall	_getRotDir
 10367  279C  0140               	movlb	0	; select bank0
 10368  279D  00A8               	movwf	??_paging
 10369  279E  0828               	movf	??_paging,w
 10370  279F  00AB               	movwf	paging@dir
 10371                           
 10372                           ;menuhelper.c: 189:  if (dir == lastDir) {
 10373  27A0  082B               	movf	paging@dir,w
 10374  27A1  0141               	movlb	1	; select bank1
 10375  27A2  065E               	xorwf	paging@lastDir^(0+128),w
 10376  27A3  1D03               	skipz
 10377  27A4  2FF5               	goto	l4155
 10378                           
 10379                           ;menuhelper.c: 191:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 10380  27A5  0140               	movlb	0	; select bank0
 10381  27A6  032B               	decf	paging@dir,w
 10382  27A7  1D03               	btfss	3,2
 10383  27A8  2FD5               	goto	l4135
 10384  27A9  0827               	movf	paging@lastPage,w
 10385  27AA  3EFF               	addlw	255
 10386  27AB  00A8               	movwf	??_paging
 10387  27AC  30FF               	movlw	255
 10388  27AD  1803               	skipnc
 10389  27AE  3000               	movlw	0
 10390  27AF  00A9               	movwf	??_paging+1
 10391  27B0  0829               	movf	??_paging+1,w
 10392  27B1  3A80               	xorlw	128
 10393  27B2  3C80               	sublw	128
 10394  27B3  1D03               	skipz
 10395  27B4  2FB7               	goto	u4895
 10396  27B5  0828               	movf	??_paging,w
 10397  27B6  022A               	subwf	paging@currentPage,w
 10398  27B7                     u4895:	
 10399  27B7  1803               	skipnc
 10400  27B8  2FD5               	goto	l4135
 10401                           
 10402                           ;menuhelper.c: 192:    currentPage++;
 10403  27B9  3001               	movlw	1
 10404  27BA  0140               	movlb	0	; select bank0
 10405  27BB  00A8               	movwf	??_paging
 10406  27BC  0828               	movf	??_paging,w
 10407  27BD  07AA               	addwf	paging@currentPage,f
 10408                           
 10409                           ;menuhelper.c: 193:    for(n = 0; n < 12; n++) {
 10410  27BE  01AC               	clrf	paging@n
 10411  27BF                     l4127:	
 10412                           
 10413                           ;menuhelper.c: 194:     OLED_scrollDisplayLeft();
 10414  27BF  31A1  217D  31A7   	fcall	_OLED_scrollDisplayLeft
 10415                           
 10416                           ;menuhelper.c: 195:     _delay((unsigned long)((20)*(4000000/4000.0)));
 10417  27C2  301A               	movlw	26
 10418  27C3  0140               	movlb	0	; select bank0
 10419  27C4  00A8               	movwf	??_paging
 10420  27C5  30F8               	movlw	248
 10421  27C6                     u6437:	
 10422  27C6  0B89               	decfsz	9,f
 10423  27C7  2FC6               	goto	u6437
 10424  27C8  0BA8               	decfsz	??_paging,f
 10425  27C9  2FC6               	goto	u6437
 10426  27CA  0000               	nop
 10427                           
 10428                           ;menuhelper.c: 196:    }
 10429  27CB  3001               	movlw	1
 10430  27CC  0140               	movlb	0	; select bank0
 10431  27CD  00A8               	movwf	??_paging
 10432  27CE  0828               	movf	??_paging,w
 10433  27CF  07AC               	addwf	paging@n,f
 10434  27D0  300C               	movlw	12
 10435  27D1  022C               	subwf	paging@n,w
 10436  27D2  1803               	btfsc	3,0
 10437  27D3  2FF5               	goto	l4155
 10438  27D4  2FBF               	goto	l4127
 10439  27D5                     l4135:	
 10440  27D5  3002               	movlw	2
 10441  27D6  0140               	movlb	0	; select bank0
 10442  27D7  062B               	xorwf	paging@dir,w
 10443  27D8  1D03               	btfss	3,2
 10444  27D9  2FF5               	goto	l4155
 10445  27DA  082A               	movf	paging@currentPage,w
 10446  27DB  1903               	btfsc	3,2
 10447  27DC  2FF5               	goto	l4155
 10448                           
 10449                           ;menuhelper.c: 200:    currentPage--;
 10450  27DD  3001               	movlw	1
 10451  27DE  02AA               	subwf	paging@currentPage,f
 10452                           
 10453                           ;menuhelper.c: 201:    for(n = 0; n < 12; n++) {
 10454  27DF  01AC               	clrf	paging@n
 10455  27E0                     l4147:	
 10456                           
 10457                           ;menuhelper.c: 202:     OLED_scrollDisplayRight();
 10458  27E0  31A1  2181  31A7   	fcall	_OLED_scrollDisplayRight
 10459                           
 10460                           ;menuhelper.c: 203:     _delay((unsigned long)((20)*(4000000/4000.0)));
 10461  27E3  301A               	movlw	26
 10462  27E4  0140               	movlb	0	; select bank0
 10463  27E5  00A8               	movwf	??_paging
 10464  27E6  30F8               	movlw	248
 10465  27E7                     u6447:	
 10466  27E7  0B89               	decfsz	9,f
 10467  27E8  2FE7               	goto	u6447
 10468  27E9  0BA8               	decfsz	??_paging,f
 10469  27EA  2FE7               	goto	u6447
 10470  27EB  0000               	nop
 10471                           
 10472                           ;menuhelper.c: 204:    }
 10473  27EC  3001               	movlw	1
 10474  27ED  0140               	movlb	0	; select bank0
 10475  27EE  00A8               	movwf	??_paging
 10476  27EF  0828               	movf	??_paging,w
 10477  27F0  07AC               	addwf	paging@n,f
 10478  27F1  300C               	movlw	12
 10479  27F2  022C               	subwf	paging@n,w
 10480  27F3  1C03               	skipc
 10481  27F4  2FE0               	goto	l4147
 10482  27F5                     l4155:	
 10483                           
 10484                           ;menuhelper.c: 208:  lastDir = dir;
 10485  27F5  0140               	movlb	0	; select bank0
 10486  27F6  082B               	movf	paging@dir,w
 10487  27F7  00A8               	movwf	??_paging
 10488  27F8  0828               	movf	??_paging,w
 10489  27F9  0141               	movlb	1	; select bank1
 10490  27FA  00DE               	movwf	paging@lastDir^(0+128)
 10491                           
 10492                           ;menuhelper.c: 209:  PIE0bits.IOCIE = 1;
 10493  27FB  014E               	movlb	14	; select bank14
 10494  27FC  1616               	bsf	22,4	;volatile
 10495                           
 10496                           ;menuhelper.c: 211:  return currentPage;
 10497  27FD  0140               	movlb	0	; select bank0
 10498  27FE  082A               	movf	paging@currentPage,w
 10499  27FF  0008               	return
 10500  2800                     __end_of_paging:	
 10501                           
 10502                           	psect	text24
 10503  21D2                     __ptext24:	
 10504 ;; *************** function _getRotDir *****************
 10505 ;; Defined at:
 10506 ;;		line 76 in file "inputs.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;		None
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;  ret             1    1[BANK0 ] enum E7886
 10511 ;; Return value:  Size  Location     Type
 10512 ;;                  1    wreg      enum E7886
 10513 ;; Registers used:
 10514 ;;		wreg, status,2
 10515 ;; Tracked objects:
 10516 ;;		On entry : 0/0
 10517 ;;		On exit  : 0/0
 10518 ;;		Unchanged: 0/0
 10519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10524 ;;Total ram usage:        2 bytes
 10525 ;; Hardware stack levels used:    1
 10526 ;; Hardware stack levels required when called:    3
 10527 ;; This function calls:
 10528 ;;		Nothing
 10529 ;; This function is called by:
 10530 ;;		_spinInput
 10531 ;;		_paging
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           
 10536                           ;psect for function _getRotDir
 10537  21D2                     _getRotDir:	
 10538                           
 10539                           ;inputs.c: 78:  enum e_direction ret = rotDir;
 10540                           
 10541                           ;incstack = 0
 10542                           ; Regs used in _getRotDir: [wreg+status,2]
 10543  21D2  0141               	movlb	1	; select bank1
 10544  21D3  0868               	movf	_rotDir^(0+128),w	;volatile
 10545  21D4  0140               	movlb	0	; select bank0
 10546  21D5  00A0               	movwf	??_getRotDir
 10547  21D6  0820               	movf	??_getRotDir,w
 10548  21D7  00A1               	movwf	getRotDir@ret
 10549                           
 10550                           ;inputs.c: 79:  rotDir = ROT_STOP;
 10551  21D8  0141               	movlb	1	; select bank1
 10552  21D9  01E8               	clrf	_rotDir^(0+128)	;volatile
 10553                           
 10554                           ;inputs.c: 80:  return ret;
 10555  21DA  0140               	movlb	0	; select bank0
 10556  21DB  0821               	movf	getRotDir@ret,w
 10557  21DC  0008               	return
 10558  21DD                     __end_of_getRotDir:	
 10559                           
 10560                           	psect	text25
 10561  2181                     __ptext25:	
 10562 ;; *************** function _OLED_scrollDisplayRight *****************
 10563 ;; Defined at:
 10564 ;;		line 138 in file "oled.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;		None
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;		None
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  1    wreg      void 
 10571 ;; Registers used:
 10572 ;;		wreg, status,2, status,0, pclath, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/0
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10582 ;;Total ram usage:        0 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    7
 10585 ;; This function calls:
 10586 ;;		_OLED_command
 10587 ;; This function is called by:
 10588 ;;		_paging
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           
 10593                           ;psect for function _OLED_scrollDisplayRight
 10594  2181                     _OLED_scrollDisplayRight:	
 10595                           
 10596                           ;oled.c: 140:  OLED_command(0x10 | 0x08 | 0x04);
 10597                           
 10598                           ;incstack = 0
 10599                           ; Regs used in _OLED_scrollDisplayRight: [wreg+status,2+status,0+pclath+cstack]
 10600  2181  301C               	movlw	28
 10601  2182  31A1  219E         	fcall	_OLED_command
 10602  2184  0008               	return
 10603  2185                     __end_of_OLED_scrollDisplayRight:	
 10604                           
 10605                           	psect	text26
 10606  217D                     __ptext26:	
 10607 ;; *************** function _OLED_scrollDisplayLeft *****************
 10608 ;; Defined at:
 10609 ;;		line 133 in file "oled.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;		None
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;		None
 10614 ;; Return value:  Size  Location     Type
 10615 ;;                  1    wreg      void 
 10616 ;; Registers used:
 10617 ;;		wreg, status,2, status,0, pclath, cstack
 10618 ;; Tracked objects:
 10619 ;;		On entry : 0/0
 10620 ;;		On exit  : 0/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10627 ;;Total ram usage:        0 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    7
 10630 ;; This function calls:
 10631 ;;		_OLED_command
 10632 ;; This function is called by:
 10633 ;;		_paging
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           
 10638                           ;psect for function _OLED_scrollDisplayLeft
 10639  217D                     _OLED_scrollDisplayLeft:	
 10640                           
 10641                           ;oled.c: 135:  OLED_command(0x10 | 0x08 | 0x00);
 10642                           
 10643                           ;incstack = 0
 10644                           ; Regs used in _OLED_scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
 10645  217D  3018               	movlw	24
 10646  217E  31A1  219E         	fcall	_OLED_command
 10647  2180  0008               	return
 10648  2181                     __end_of_OLED_scrollDisplayLeft:	
 10649                           
 10650                           	psect	text27
 10651  272C                     __ptext27:	
 10652 ;; *************** function _itoa *****************
 10653 ;; Defined at:
 10654 ;;		line 38 in file "common.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;  str             2    5[BANK1 ] PTR unsigned char 
 10657 ;;		 -> str(10), systemCheck@str(3), 
 10658 ;;  value           1    7[BANK1 ] unsigned char 
 10659 ;;  width           1    8[BANK1 ] unsigned char 
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;		None
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  1    wreg      void 
 10664 ;; Registers used:
 10665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10671 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10673 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10674 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10675 ;;Total ram usage:       11 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    4
 10678 ;; This function calls:
 10679 ;;		___awdiv
 10680 ;;		___awmod
 10681 ;; This function is called by:
 10682 ;;		_systemCheck
 10683 ;;		_channelView
 10684 ;;		_channelSetup
 10685 ;;		_setOutputPower
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           
 10690                           ;psect for function _itoa
 10691  272C                     _itoa:	
 10692                           
 10693                           ;common.c: 38: void itoa(char *str, uint8_t value, uint8_t width);common.c: 39: {;common
      +                          .c: 40:  str[width] = '\0';
 10694                           
 10695                           ;incstack = 0
 10696                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10697  272C  0141               	movlb	1	; select bank1
 10698  272D  0828               	movf	itoa@width^(0+128),w
 10699  272E  00A9               	movwf	??_itoa^(0+128)
 10700  272F  01AA               	clrf	(??_itoa^(0+128)+1)
 10701  2730  0829               	movf	??_itoa^(0+128),w
 10702  2731  0725               	addwf	itoa@str^(0+128),w
 10703  2732  0086               	movwf	6
 10704  2733  082A               	movf	(??_itoa+1)^(0+128),w
 10705  2734  3D26               	addwfc	(itoa@str+1)^(0+128),w
 10706  2735  0087               	movwf	7
 10707  2736  0181               	clrf	1
 10708  2737                     l5223:	
 10709                           ;common.c: 41:  while (value && width > 0) {
 10710                           
 10711                           
 10712                           ;common.c: 41:  while (value && width > 0) {
 10713  2737  0827               	movf	itoa@value^(0+128),w
 10714  2738  1903               	btfsc	3,2
 10715  2739  2F91               	goto	l5229
 10716  273A  0828               	movf	itoa@width^(0+128),w
 10717  273B  1903               	btfsc	3,2
 10718  273C  2F91               	goto	l5229
 10719                           
 10720                           ;common.c: 42:   str[--width] = (value % 10) + '0';
 10721  273D  300A               	movlw	10
 10722  273E  0140               	movlb	0	; select bank0
 10723  273F  00A0               	movwf	___awmod@divisor
 10724  2740  3000               	movlw	0
 10725  2741  00A1               	movwf	___awmod@divisor+1
 10726  2742  0141               	movlb	1	; select bank1
 10727  2743  0827               	movf	itoa@value^(0+128),w
 10728  2744  00A9               	movwf	??_itoa^(0+128)
 10729  2745  01AA               	clrf	(??_itoa^(0+128)+1)
 10730  2746  0829               	movf	??_itoa^(0+128),w
 10731  2747  0140               	movlb	0	; select bank0
 10732  2748  00A2               	movwf	___awmod@dividend
 10733  2749  0141               	movlb	1	; select bank1
 10734  274A  082A               	movf	(??_itoa+1)^(0+128),w
 10735  274B  0140               	movlb	0	; select bank0
 10736  274C  00A3               	movwf	___awmod@dividend+1
 10737  274D  31A4  24EC  31A7   	fcall	___awmod
 10738  2750  0140               	movlb	0	; select bank0
 10739  2751  0820               	movf	?___awmod,w
 10740  2752  3E30               	addlw	48
 10741  2753  0141               	movlb	1	; select bank1
 10742  2754  00AB               	movwf	(??_itoa+2)^(0+128)
 10743  2755  3001               	movlw	1
 10744  2756  02A8               	subwf	itoa@width^(0+128),f
 10745  2757  0828               	movf	itoa@width^(0+128),w
 10746  2758  00AC               	movwf	(??_itoa+3)^(0+128)
 10747  2759  01AD               	clrf	((??_itoa+3)^(0+128)+1)
 10748  275A  082C               	movf	(??_itoa+3)^(0+128),w
 10749  275B  0725               	addwf	itoa@str^(0+128),w
 10750  275C  00AE               	movwf	(??_itoa+5)^(0+128)
 10751  275D  082D               	movf	(??_itoa+4)^(0+128),w
 10752  275E  3D26               	addwfc	(itoa@str+1)^(0+128),w
 10753  275F  00AF               	movwf	(??_itoa+6)^(0+128)
 10754  2760  082E               	movf	(??_itoa+5)^(0+128),w
 10755  2761  0086               	movwf	6
 10756  2762  082F               	movf	(??_itoa+6)^(0+128),w
 10757  2763  0087               	movwf	7
 10758  2764  082B               	movf	(??_itoa+2)^(0+128),w
 10759  2765  0081               	movwf	1
 10760                           
 10761                           ;common.c: 43:   value = value / 10;
 10762  2766  300A               	movlw	10
 10763  2767  0140               	movlb	0	; select bank0
 10764  2768  00A0               	movwf	___awdiv@divisor
 10765  2769  3000               	movlw	0
 10766  276A  00A1               	movwf	___awdiv@divisor+1
 10767  276B  0141               	movlb	1	; select bank1
 10768  276C  0827               	movf	itoa@value^(0+128),w
 10769  276D  00A9               	movwf	??_itoa^(0+128)
 10770  276E  01AA               	clrf	(??_itoa^(0+128)+1)
 10771  276F  0829               	movf	??_itoa^(0+128),w
 10772  2770  0140               	movlb	0	; select bank0
 10773  2771  00A2               	movwf	___awdiv@dividend
 10774  2772  0141               	movlb	1	; select bank1
 10775  2773  082A               	movf	(??_itoa+1)^(0+128),w
 10776  2774  0140               	movlb	0	; select bank0
 10777  2775  00A3               	movwf	___awdiv@dividend+1
 10778  2776  31A5  25C3  31A7   	fcall	___awdiv
 10779  2779  0140               	movlb	0	; select bank0
 10780  277A  0820               	movf	?___awdiv,w
 10781  277B  0141               	movlb	1	; select bank1
 10782  277C  00AB               	movwf	(??_itoa+2)^(0+128)
 10783  277D  082B               	movf	(??_itoa+2)^(0+128),w
 10784  277E  00A7               	movwf	itoa@value^(0+128)
 10785  277F  2F37               	goto	l5223
 10786  2780                     l5227:	
 10787                           
 10788                           ;common.c: 46:   str[--width] = ' ';
 10789  2780  3001               	movlw	1
 10790  2781  02A8               	subwf	itoa@width^(0+128),f
 10791  2782  0828               	movf	itoa@width^(0+128),w
 10792  2783  00A9               	movwf	??_itoa^(0+128)
 10793  2784  01AA               	clrf	(??_itoa^(0+128)+1)
 10794  2785  0829               	movf	??_itoa^(0+128),w
 10795  2786  0725               	addwf	itoa@str^(0+128),w
 10796  2787  00AB               	movwf	(??_itoa+2)^(0+128)
 10797  2788  082A               	movf	(??_itoa+1)^(0+128),w
 10798  2789  3D26               	addwfc	(itoa@str+1)^(0+128),w
 10799  278A  00AC               	movwf	(??_itoa+3)^(0+128)
 10800  278B  082B               	movf	(??_itoa+2)^(0+128),w
 10801  278C  0086               	movwf	6
 10802  278D  082C               	movf	(??_itoa+3)^(0+128),w
 10803  278E  0087               	movwf	7
 10804  278F  3020               	movlw	32
 10805  2790  0081               	movwf	1
 10806  2791                     l5229:	
 10807                           
 10808                           ;common.c: 45:  while(width)
 10809  2791  0828               	movf	itoa@width^(0+128),w
 10810  2792  1903               	btfsc	3,2
 10811  2793  0008               	return
 10812  2794  2F80               	goto	l5227
 10813  2795                     __end_of_itoa:	
 10814                           
 10815                           	psect	text28
 10816  24EC                     __ptext28:	
 10817 ;; *************** function ___awmod *****************
 10818 ;; Defined at:
 10819 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;  divisor         2    0[BANK0 ] int 
 10822 ;;  dividend        2    2[BANK0 ] int 
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;  sign            1    6[BANK0 ] unsigned char 
 10825 ;;  counter         1    5[BANK0 ] unsigned char 
 10826 ;; Return value:  Size  Location     Type
 10827 ;;                  2    0[BANK0 ] int 
 10828 ;; Registers used:
 10829 ;;		wreg, status,2, status,0
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10835 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10836 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10838 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10839 ;;Total ram usage:        7 bytes
 10840 ;; Hardware stack levels used:    1
 10841 ;; Hardware stack levels required when called:    3
 10842 ;; This function calls:
 10843 ;;		Nothing
 10844 ;; This function is called by:
 10845 ;;		_itoa
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           
 10850                           ;psect for function ___awmod
 10851  24EC                     ___awmod:	
 10852                           
 10853                           ;incstack = 0
 10854                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10855  24EC  0140               	movlb	0	; select bank0
 10856  24ED  01A6               	clrf	___awmod@sign
 10857  24EE  1FA3               	btfss	___awmod@dividend+1,7
 10858  24EF  2CF7               	goto	l3559
 10859  24F0  09A2               	comf	___awmod@dividend,f
 10860  24F1  09A3               	comf	___awmod@dividend+1,f
 10861  24F2  0AA2               	incf	___awmod@dividend,f
 10862  24F3  1903               	skipnz
 10863  24F4  0AA3               	incf	___awmod@dividend+1,f
 10864  24F5  01A6               	clrf	___awmod@sign
 10865  24F6  0AA6               	incf	___awmod@sign,f
 10866  24F7                     l3559:	
 10867  24F7  1FA1               	btfss	___awmod@divisor+1,7
 10868  24F8  2CFE               	goto	l3563
 10869  24F9  09A0               	comf	___awmod@divisor,f
 10870  24FA  09A1               	comf	___awmod@divisor+1,f
 10871  24FB  0AA0               	incf	___awmod@divisor,f
 10872  24FC  1903               	skipnz
 10873  24FD  0AA1               	incf	___awmod@divisor+1,f
 10874  24FE                     l3563:	
 10875  24FE  0820               	movf	___awmod@divisor,w
 10876  24FF  0421               	iorwf	___awmod@divisor+1,w
 10877  2500  1903               	btfsc	3,2
 10878  2501  2D25               	goto	l3581
 10879  2502  01A5               	clrf	___awmod@counter
 10880  2503  0AA5               	incf	___awmod@counter,f
 10881  2504                     l3571:	
 10882  2504  1BA1               	btfsc	___awmod@divisor+1,7
 10883  2505  2D10               	goto	l3573
 10884  2506  3001               	movlw	1
 10885  2507                     u3775:	
 10886  2507  35A0               	lslf	___awmod@divisor,f
 10887  2508  0DA1               	rlf	___awmod@divisor+1,f
 10888  2509  0B89               	decfsz	9,f
 10889  250A  2D07               	goto	u3775
 10890  250B  3001               	movlw	1
 10891  250C  00A4               	movwf	??___awmod
 10892  250D  0824               	movf	??___awmod,w
 10893  250E  07A5               	addwf	___awmod@counter,f
 10894  250F  2D04               	goto	l3571
 10895  2510                     l3573:	
 10896  2510  0821               	movf	___awmod@divisor+1,w
 10897  2511  0223               	subwf	___awmod@dividend+1,w
 10898  2512  1D03               	skipz
 10899  2513  2D16               	goto	u3795
 10900  2514  0820               	movf	___awmod@divisor,w
 10901  2515  0222               	subwf	___awmod@dividend,w
 10902  2516                     u3795:	
 10903  2516  1C03               	skipc
 10904  2517  2D1C               	goto	l3577
 10905  2518  0820               	movf	___awmod@divisor,w
 10906  2519  02A2               	subwf	___awmod@dividend,f
 10907  251A  0821               	movf	___awmod@divisor+1,w
 10908  251B  3BA3               	subwfb	___awmod@dividend+1,f
 10909  251C                     l3577:	
 10910  251C  3001               	movlw	1
 10911  251D                     u3805:	
 10912  251D  36A1               	lsrf	___awmod@divisor+1,f
 10913  251E  0CA0               	rrf	___awmod@divisor,f
 10914  251F  0B89               	decfsz	9,f
 10915  2520  2D1D               	goto	u3805
 10916  2521  3001               	movlw	1
 10917  2522  02A5               	subwf	___awmod@counter,f
 10918  2523  1D03               	btfss	3,2
 10919  2524  2D10               	goto	l3573
 10920  2525                     l3581:	
 10921  2525  0826               	movf	___awmod@sign,w
 10922  2526  1903               	btfsc	3,2
 10923  2527  2D2D               	goto	l3585
 10924  2528  09A2               	comf	___awmod@dividend,f
 10925  2529  09A3               	comf	___awmod@dividend+1,f
 10926  252A  0AA2               	incf	___awmod@dividend,f
 10927  252B  1903               	skipnz
 10928  252C  0AA3               	incf	___awmod@dividend+1,f
 10929  252D                     l3585:	
 10930  252D  0823               	movf	___awmod@dividend+1,w
 10931  252E  00A1               	movwf	?___awmod+1
 10932  252F  0822               	movf	___awmod@dividend,w
 10933  2530  00A0               	movwf	?___awmod
 10934  2531  0008               	return
 10935  2532                     __end_of___awmod:	
 10936                           
 10937                           	psect	text29
 10938  25C3                     __ptext29:	
 10939 ;; *************** function ___awdiv *****************
 10940 ;; Defined at:
 10941 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;  divisor         2    0[BANK0 ] int 
 10944 ;;  dividend        2    2[BANK0 ] int 
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;  quotient        2    7[BANK0 ] int 
 10947 ;;  sign            1    6[BANK0 ] unsigned char 
 10948 ;;  counter         1    5[BANK0 ] unsigned char 
 10949 ;; Return value:  Size  Location     Type
 10950 ;;                  2    0[BANK0 ] int 
 10951 ;; Registers used:
 10952 ;;		wreg, status,2, status,0
 10953 ;; Tracked objects:
 10954 ;;		On entry : 0/0
 10955 ;;		On exit  : 0/0
 10956 ;;		Unchanged: 0/0
 10957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10959 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10961 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10962 ;;Total ram usage:        9 bytes
 10963 ;; Hardware stack levels used:    1
 10964 ;; Hardware stack levels required when called:    3
 10965 ;; This function calls:
 10966 ;;		Nothing
 10967 ;; This function is called by:
 10968 ;;		_itoa
 10969 ;; This function uses a non-reentrant model
 10970 ;;
 10971                           
 10972                           
 10973                           ;psect for function ___awdiv
 10974  25C3                     ___awdiv:	
 10975                           
 10976                           ;incstack = 0
 10977                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10978  25C3  0140               	movlb	0	; select bank0
 10979  25C4  01A6               	clrf	___awdiv@sign
 10980  25C5  1FA1               	btfss	___awdiv@divisor+1,7
 10981  25C6  2DCE               	goto	l3515
 10982  25C7  09A0               	comf	___awdiv@divisor,f
 10983  25C8  09A1               	comf	___awdiv@divisor+1,f
 10984  25C9  0AA0               	incf	___awdiv@divisor,f
 10985  25CA  1903               	skipnz
 10986  25CB  0AA1               	incf	___awdiv@divisor+1,f
 10987  25CC  01A6               	clrf	___awdiv@sign
 10988  25CD  0AA6               	incf	___awdiv@sign,f
 10989  25CE                     l3515:	
 10990  25CE  1FA3               	btfss	___awdiv@dividend+1,7
 10991  25CF  2DD9               	goto	l3521
 10992  25D0  09A2               	comf	___awdiv@dividend,f
 10993  25D1  09A3               	comf	___awdiv@dividend+1,f
 10994  25D2  0AA2               	incf	___awdiv@dividend,f
 10995  25D3  1903               	skipnz
 10996  25D4  0AA3               	incf	___awdiv@dividend+1,f
 10997  25D5  3001               	movlw	1
 10998  25D6  00A4               	movwf	??___awdiv
 10999  25D7  0824               	movf	??___awdiv,w
 11000  25D8  06A6               	xorwf	___awdiv@sign,f
 11001  25D9                     l3521:	
 11002  25D9  01A7               	clrf	___awdiv@quotient
 11003  25DA  01A8               	clrf	___awdiv@quotient+1
 11004  25DB  0820               	movf	___awdiv@divisor,w
 11005  25DC  0421               	iorwf	___awdiv@divisor+1,w
 11006  25DD  1903               	btfsc	3,2
 11007  25DE  2E08               	goto	l3543
 11008  25DF  01A5               	clrf	___awdiv@counter
 11009  25E0  0AA5               	incf	___awdiv@counter,f
 11010  25E1                     l3531:	
 11011  25E1  1BA1               	btfsc	___awdiv@divisor+1,7
 11012  25E2  2DED               	goto	l3533
 11013  25E3  3001               	movlw	1
 11014  25E4                     u3675:	
 11015  25E4  35A0               	lslf	___awdiv@divisor,f
 11016  25E5  0DA1               	rlf	___awdiv@divisor+1,f
 11017  25E6  0B89               	decfsz	9,f
 11018  25E7  2DE4               	goto	u3675
 11019  25E8  3001               	movlw	1
 11020  25E9  00A4               	movwf	??___awdiv
 11021  25EA  0824               	movf	??___awdiv,w
 11022  25EB  07A5               	addwf	___awdiv@counter,f
 11023  25EC  2DE1               	goto	l3531
 11024  25ED                     l3533:	
 11025  25ED  3001               	movlw	1
 11026  25EE                     u3695:	
 11027  25EE  35A7               	lslf	___awdiv@quotient,f
 11028  25EF  0DA8               	rlf	___awdiv@quotient+1,f
 11029  25F0  0B89               	decfsz	9,f
 11030  25F1  2DEE               	goto	u3695
 11031  25F2  0821               	movf	___awdiv@divisor+1,w
 11032  25F3  0223               	subwf	___awdiv@dividend+1,w
 11033  25F4  1D03               	skipz
 11034  25F5  2DF8               	goto	u3705
 11035  25F6  0820               	movf	___awdiv@divisor,w
 11036  25F7  0222               	subwf	___awdiv@dividend,w
 11037  25F8                     u3705:	
 11038  25F8  1C03               	skipc
 11039  25F9  2DFF               	goto	l3539
 11040  25FA  0820               	movf	___awdiv@divisor,w
 11041  25FB  02A2               	subwf	___awdiv@dividend,f
 11042  25FC  0821               	movf	___awdiv@divisor+1,w
 11043  25FD  3BA3               	subwfb	___awdiv@dividend+1,f
 11044  25FE  1427               	bsf	___awdiv@quotient,0
 11045  25FF                     l3539:	
 11046  25FF  3001               	movlw	1
 11047  2600                     u3715:	
 11048  2600  36A1               	lsrf	___awdiv@divisor+1,f
 11049  2601  0CA0               	rrf	___awdiv@divisor,f
 11050  2602  0B89               	decfsz	9,f
 11051  2603  2E00               	goto	u3715
 11052  2604  3001               	movlw	1
 11053  2605  02A5               	subwf	___awdiv@counter,f
 11054  2606  1D03               	btfss	3,2
 11055  2607  2DED               	goto	l3533
 11056  2608                     l3543:	
 11057  2608  0826               	movf	___awdiv@sign,w
 11058  2609  1903               	btfsc	3,2
 11059  260A  2E10               	goto	l3547
 11060  260B  09A7               	comf	___awdiv@quotient,f
 11061  260C  09A8               	comf	___awdiv@quotient+1,f
 11062  260D  0AA7               	incf	___awdiv@quotient,f
 11063  260E  1903               	skipnz
 11064  260F  0AA8               	incf	___awdiv@quotient+1,f
 11065  2610                     l3547:	
 11066  2610  0828               	movf	___awdiv@quotient+1,w
 11067  2611  00A1               	movwf	?___awdiv+1
 11068  2612  0827               	movf	___awdiv@quotient,w
 11069  2613  00A0               	movwf	?___awdiv
 11070  2614  0008               	return
 11071  2615                     __end_of___awdiv:	
 11072                           
 11073                           	psect	text30
 11074  14EE                     __ptext30:	
 11075 ;; *************** function _ftoa *****************
 11076 ;; Defined at:
 11077 ;;		line 3 in file "common.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;  str             1    wreg     PTR unsigned char 
 11080 ;;		 -> str(10), 
 11081 ;;  fValue          4    5[BANK1 ] float 
 11082 ;;  width           1    9[BANK1 ] unsigned char 
 11083 ;;  prec            1   10[BANK1 ] unsigned char 
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;  str             1   16[BANK1 ] PTR unsigned char 
 11086 ;;		 -> str(10), 
 11087 ;;  pos             1   15[BANK1 ] unsigned char 
 11088 ;;  w               1   14[BANK1 ] unsigned char 
 11089 ;;  intValue        1   13[BANK1 ] unsigned char 
 11090 ;;  sign            1   12[BANK1 ] unsigned char 
 11091 ;;  len             1   11[BANK1 ] unsigned char 
 11092 ;; Return value:  Size  Location     Type
 11093 ;;                  1    wreg      void 
 11094 ;; Registers used:
 11095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11101 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11102 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11104 ;;      Totals:         0       2      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11105 ;;Total ram usage:       14 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    5
 11108 ;; This function calls:
 11109 ;;		___fldiv
 11110 ;;		___flge
 11111 ;;		___flmul
 11112 ;;		___flsub
 11113 ;;		___fltol
 11114 ;;		___wmul
 11115 ;;		___xxtofl
 11116 ;; This function is called by:
 11117 ;;		_statusView
 11118 ;;		_channelView
 11119 ;;		_channelSetup
 11120 ;;		_setOutputPower
 11121 ;;		_setLensDia
 11122 ;;		_setup
 11123 ;;		_setDPOffset
 11124 ;;		_setSkyTemp
 11125 ;;		_setFudgeFactor
 11126 ;; This function uses a non-reentrant model
 11127 ;;
 11128                           
 11129                           
 11130                           ;psect for function _ftoa
 11131  14EE                     _ftoa:	
 11132                           
 11133                           ;incstack = 0
 11134                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11135                           ;ftoa@str stored from wreg
 11136  14EE  0141               	movlb	1	; select bank1
 11137  14EF  00B0               	movwf	ftoa@str^(0+128)
 11138                           
 11139                           ;common.c: 3: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          4: {;common.c: 5:  uint8_t len = 1;
 11140  14F0  01AB               	clrf	ftoa@len^(0+128)
 11141  14F1  0AAB               	incf	ftoa@len^(0+128),f
 11142                           
 11143                           ;common.c: 7:  uint8_t pos = 0;
 11144  14F2  01AF               	clrf	ftoa@pos^(0+128)
 11145                           
 11146                           ;common.c: 9:  uint8_t sign = 0;
 11147  14F3  01AC               	clrf	ftoa@sign^(0+128)
 11148                           
 11149                           ;common.c: 11:  if (fValue < 0) {
 11150  14F4  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11151  14F5  0140               	movlb	0	; select bank0
 11152  14F6  00A3               	movwf	___flge@ff1+3
 11153  14F7  0141               	movlb	1	; select bank1
 11154  14F8  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11155  14F9  0140               	movlb	0	; select bank0
 11156  14FA  00A2               	movwf	___flge@ff1+2
 11157  14FB  0141               	movlb	1	; select bank1
 11158  14FC  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11159  14FD  0140               	movlb	0	; select bank0
 11160  14FE  00A1               	movwf	___flge@ff1+1
 11161  14FF  0141               	movlb	1	; select bank1
 11162  1500  0825               	movf	ftoa@fValue^(0+128),w
 11163  1501  0140               	movlb	0	; select bank0
 11164  1502  00A0               	movwf	___flge@ff1
 11165  1503  3000               	movlw	0
 11166  1504  00A7               	movwf	___flge@ff2+3
 11167  1505  3000               	movlw	0
 11168  1506  00A6               	movwf	___flge@ff2+2
 11169  1507  3000               	movlw	0
 11170  1508  00A5               	movwf	___flge@ff2+1
 11171  1509  3000               	movlw	0
 11172  150A  00A4               	movwf	___flge@ff2
 11173  150B  3199  21F2  3194   	fcall	___flge
 11174  150E  1803               	btfsc	3,0
 11175  150F  2D40               	goto	l4073
 11176                           
 11177                           ;common.c: 12:   fValue *= -1;
 11178  1510  30BF               	movlw	191
 11179  1511  0140               	movlb	0	; select bank0
 11180  1512  00B7               	movwf	___flmul@b+3
 11181  1513  3080               	movlw	128
 11182  1514  00B6               	movwf	___flmul@b+2
 11183  1515  3000               	movlw	0
 11184  1516  00B5               	movwf	___flmul@b+1
 11185  1517  3000               	movlw	0
 11186  1518  00B4               	movwf	___flmul@b
 11187  1519  0141               	movlb	1	; select bank1
 11188  151A  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11189  151B  0140               	movlb	0	; select bank0
 11190  151C  00BB               	movwf	___flmul@a+3
 11191  151D  0141               	movlb	1	; select bank1
 11192  151E  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11193  151F  0140               	movlb	0	; select bank0
 11194  1520  00BA               	movwf	___flmul@a+2
 11195  1521  0141               	movlb	1	; select bank1
 11196  1522  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11197  1523  0140               	movlb	0	; select bank0
 11198  1524  00B9               	movwf	___flmul@a+1
 11199  1525  0141               	movlb	1	; select bank1
 11200  1526  0825               	movf	ftoa@fValue^(0+128),w
 11201  1527  0140               	movlb	0	; select bank0
 11202  1528  00B8               	movwf	___flmul@a
 11203  1529  3185  2502  3194   	fcall	___flmul
 11204  152C  0140               	movlb	0	; select bank0
 11205  152D  0837               	movf	?___flmul+3,w
 11206  152E  0141               	movlb	1	; select bank1
 11207  152F  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 11208  1530  0140               	movlb	0	; select bank0
 11209  1531  0836               	movf	?___flmul+2,w
 11210  1532  0141               	movlb	1	; select bank1
 11211  1533  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 11212  1534  0140               	movlb	0	; select bank0
 11213  1535  0835               	movf	?___flmul+1,w
 11214  1536  0141               	movlb	1	; select bank1
 11215  1537  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 11216  1538  0140               	movlb	0	; select bank0
 11217  1539  0834               	movf	?___flmul,w
 11218  153A  0141               	movlb	1	; select bank1
 11219  153B  00A5               	movwf	ftoa@fValue^(0+128)
 11220                           
 11221                           ;common.c: 13:   sign = 1;
 11222  153C  01AC               	clrf	ftoa@sign^(0+128)
 11223  153D  0AAC               	incf	ftoa@sign^(0+128),f
 11224                           
 11225                           ;common.c: 14:   width--;
 11226  153E  3001               	movlw	1
 11227  153F  02A9               	subwf	ftoa@width^(0+128),f
 11228  1540                     l4073:	
 11229                           
 11230                           ;common.c: 16:  while(fValue >= 10.0) {
 11231  1540  0141               	movlb	1	; select bank1
 11232  1541  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11233  1542  0140               	movlb	0	; select bank0
 11234  1543  00A3               	movwf	___flge@ff1+3
 11235  1544  0141               	movlb	1	; select bank1
 11236  1545  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11237  1546  0140               	movlb	0	; select bank0
 11238  1547  00A2               	movwf	___flge@ff1+2
 11239  1548  0141               	movlb	1	; select bank1
 11240  1549  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11241  154A  0140               	movlb	0	; select bank0
 11242  154B  00A1               	movwf	___flge@ff1+1
 11243  154C  0141               	movlb	1	; select bank1
 11244  154D  0825               	movf	ftoa@fValue^(0+128),w
 11245  154E  0140               	movlb	0	; select bank0
 11246  154F  00A0               	movwf	___flge@ff1
 11247  1550  3041               	movlw	65
 11248  1551  00A7               	movwf	___flge@ff2+3
 11249  1552  3020               	movlw	32
 11250  1553  00A6               	movwf	___flge@ff2+2
 11251  1554  3000               	movlw	0
 11252  1555  00A5               	movwf	___flge@ff2+1
 11253  1556  3000               	movlw	0
 11254  1557  00A4               	movwf	___flge@ff2
 11255  1558  3199  21F2  3194   	fcall	___flge
 11256  155B  1C03               	btfss	3,0
 11257  155C  2D90               	goto	l4075
 11258                           
 11259                           ;common.c: 17:   fValue /= 10;
 11260  155D  3041               	movlw	65
 11261  155E  0140               	movlb	0	; select bank0
 11262  155F  00D1               	movwf	___fldiv@a+3
 11263  1560  3020               	movlw	32
 11264  1561  00D0               	movwf	___fldiv@a+2
 11265  1562  3000               	movlw	0
 11266  1563  00CF               	movwf	___fldiv@a+1
 11267  1564  3000               	movlw	0
 11268  1565  00CE               	movwf	___fldiv@a
 11269  1566  0141               	movlb	1	; select bank1
 11270  1567  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11271  1568  0140               	movlb	0	; select bank0
 11272  1569  00D5               	movwf	___fldiv@b+3
 11273  156A  0141               	movlb	1	; select bank1
 11274  156B  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11275  156C  0140               	movlb	0	; select bank0
 11276  156D  00D4               	movwf	___fldiv@b+2
 11277  156E  0141               	movlb	1	; select bank1
 11278  156F  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11279  1570  0140               	movlb	0	; select bank0
 11280  1571  00D3               	movwf	___fldiv@b+1
 11281  1572  0141               	movlb	1	; select bank1
 11282  1573  0825               	movf	ftoa@fValue^(0+128),w
 11283  1574  0140               	movlb	0	; select bank0
 11284  1575  00D2               	movwf	___fldiv@b
 11285  1576  3193  2374  3194   	fcall	___fldiv
 11286  1579  0140               	movlb	0	; select bank0
 11287  157A  0851               	movf	?___fldiv+3,w
 11288  157B  0141               	movlb	1	; select bank1
 11289  157C  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 11290  157D  0140               	movlb	0	; select bank0
 11291  157E  0850               	movf	?___fldiv+2,w
 11292  157F  0141               	movlb	1	; select bank1
 11293  1580  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 11294  1581  0140               	movlb	0	; select bank0
 11295  1582  084F               	movf	?___fldiv+1,w
 11296  1583  0141               	movlb	1	; select bank1
 11297  1584  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 11298  1585  0140               	movlb	0	; select bank0
 11299  1586  084E               	movf	?___fldiv,w
 11300  1587  0141               	movlb	1	; select bank1
 11301  1588  00A5               	movwf	ftoa@fValue^(0+128)
 11302                           
 11303                           ;common.c: 18:   len++;
 11304  1589  3001               	movlw	1
 11305  158A  0140               	movlb	0	; select bank0
 11306  158B  00EE               	movwf	??_ftoa
 11307  158C  086E               	movf	??_ftoa,w
 11308  158D  0141               	movlb	1	; select bank1
 11309  158E  07AB               	addwf	ftoa@len^(0+128),f
 11310  158F  2D40               	goto	l4073
 11311  1590                     l4075:	
 11312                           
 11313                           ;common.c: 20:  w = len + prec;
 11314  1590  0141               	movlb	1	; select bank1
 11315  1591  082B               	movf	ftoa@len^(0+128),w
 11316  1592  072A               	addwf	ftoa@prec^(0+128),w
 11317  1593  0140               	movlb	0	; select bank0
 11318  1594  00EE               	movwf	??_ftoa
 11319  1595  086E               	movf	??_ftoa,w
 11320  1596  0141               	movlb	1	; select bank1
 11321  1597  00AE               	movwf	ftoa@w^(0+128)
 11322                           
 11323                           ;common.c: 21:  if (prec == 0)
 11324  1598  082A               	movf	ftoa@prec^(0+128),w
 11325  1599  1D03               	btfss	3,2
 11326  159A  2DA1               	goto	l4083
 11327                           
 11328                           ;common.c: 22:   width++;
 11329  159B  3001               	movlw	1
 11330  159C  0140               	movlb	0	; select bank0
 11331  159D  00EE               	movwf	??_ftoa
 11332  159E  086E               	movf	??_ftoa,w
 11333  159F  0141               	movlb	1	; select bank1
 11334  15A0  07A9               	addwf	ftoa@width^(0+128),f
 11335  15A1                     l4083:	
 11336                           
 11337                           ;common.c: 23:  while(--width > w)
 11338  15A1  3001               	movlw	1
 11339  15A2  02A9               	subwf	ftoa@width^(0+128),f
 11340  15A3  0829               	movf	ftoa@width^(0+128),w
 11341  15A4  022E               	subwf	ftoa@w^(0+128),w
 11342  15A5  1803               	btfsc	3,0
 11343  15A6  2DBB               	goto	l4085
 11344                           
 11345                           ;common.c: 24:   str[pos++] = ' ';
 11346  15A7  3020               	movlw	32
 11347  15A8  0140               	movlb	0	; select bank0
 11348  15A9  00EE               	movwf	??_ftoa
 11349  15AA  0141               	movlb	1	; select bank1
 11350  15AB  082F               	movf	ftoa@pos^(0+128),w
 11351  15AC  0730               	addwf	ftoa@str^(0+128),w
 11352  15AD  0140               	movlb	0	; select bank0
 11353  15AE  00EF               	movwf	??_ftoa+1
 11354  15AF  086F               	movf	??_ftoa+1,w
 11355  15B0  0086               	movwf	6
 11356  15B1  3001               	movlw	1	; select bank2/3
 11357  15B2  0087               	movwf	7
 11358  15B3  086E               	movf	??_ftoa,w
 11359  15B4  0081               	movwf	1
 11360  15B5  3001               	movlw	1
 11361  15B6  00EE               	movwf	??_ftoa
 11362  15B7  086E               	movf	??_ftoa,w
 11363  15B8  0141               	movlb	1	; select bank1
 11364  15B9  07AF               	addwf	ftoa@pos^(0+128),f
 11365  15BA  2DA1               	goto	l4083
 11366  15BB                     l4085:	
 11367                           
 11368                           ;common.c: 25:  if (sign)
 11369  15BB  082C               	movf	ftoa@sign^(0+128),w
 11370  15BC  1903               	btfsc	3,2
 11371  15BD  2DD1               	goto	l4105
 11372                           
 11373                           ;common.c: 26:   str[pos++] = '-';
 11374  15BE  302D               	movlw	45
 11375  15BF                     L8:	
 11376  15BF  0140               	movlb	0	; select bank0
 11377  15C0  00EE               	movwf	??_ftoa
 11378  15C1  0141               	movlb	1	; select bank1
 11379  15C2  082F               	movf	ftoa@pos^(0+128),w
 11380  15C3  0730               	addwf	ftoa@str^(0+128),w
 11381  15C4  0140               	movlb	0	; select bank0
 11382  15C5  00EF               	movwf	??_ftoa+1
 11383  15C6  086F               	movf	??_ftoa+1,w
 11384  15C7  0086               	movwf	6
 11385  15C8  3001               	movlw	1	; select bank2/3
 11386  15C9  0087               	movwf	7
 11387  15CA  086E               	movf	??_ftoa,w
 11388  15CB  0081               	movwf	1
 11389  15CC  3001               	movlw	1
 11390  15CD  00EE               	movwf	??_ftoa
 11391  15CE  086E               	movf	??_ftoa,w
 11392  15CF  0141               	movlb	1	; select bank1
 11393  15D0  07AF               	addwf	ftoa@pos^(0+128),f
 11394  15D1                     l4105:	
 11395                           
 11396                           ;common.c: 27:  while(w--) {
 11397  15D1  3001               	movlw	1
 11398  15D2  02AE               	subwf	ftoa@w^(0+128),f
 11399  15D3  0A2E               	incf	ftoa@w^(0+128),w
 11400  15D4  1903               	btfsc	3,2
 11401  15D5  2E6A               	goto	l4107
 11402                           
 11403                           ;common.c: 28:   intValue = fValue;
 11404  15D6  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11405  15D7  0140               	movlb	0	; select bank0
 11406  15D8  00EB               	movwf	___fltol@f1+3
 11407  15D9  0141               	movlb	1	; select bank1
 11408  15DA  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11409  15DB  0140               	movlb	0	; select bank0
 11410  15DC  00EA               	movwf	___fltol@f1+2
 11411  15DD  0141               	movlb	1	; select bank1
 11412  15DE  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11413  15DF  0140               	movlb	0	; select bank0
 11414  15E0  00E9               	movwf	___fltol@f1+1
 11415  15E1  0141               	movlb	1	; select bank1
 11416  15E2  0825               	movf	ftoa@fValue^(0+128),w
 11417  15E3  0140               	movlb	0	; select bank0
 11418  15E4  00E8               	movwf	___fltol@f1
 11419  15E5  3199  2180  3194   	fcall	___fltol
 11420  15E8  0140               	movlb	0	; select bank0
 11421  15E9  0868               	movf	?___fltol,w
 11422  15EA  00EE               	movwf	??_ftoa
 11423  15EB  086E               	movf	??_ftoa,w
 11424  15EC  0141               	movlb	1	; select bank1
 11425  15ED  00AD               	movwf	ftoa@intValue^(0+128)
 11426                           
 11427                           ;common.c: 29:   fValue = fValue * 10 - (10 * intValue);
 11428  15EE  300A               	movlw	10
 11429  15EF  0140               	movlb	0	; select bank0
 11430  15F0  00A2               	movwf	___wmul@multiplicand
 11431  15F1  3000               	movlw	0
 11432  15F2  00A3               	movwf	___wmul@multiplicand+1
 11433  15F3  0141               	movlb	1	; select bank1
 11434  15F4  082D               	movf	ftoa@intValue^(0+128),w
 11435  15F5  0140               	movlb	0	; select bank0
 11436  15F6  00EE               	movwf	??_ftoa
 11437  15F7  01EF               	clrf	??_ftoa+1
 11438  15F8  086E               	movf	??_ftoa,w
 11439  15F9  00A0               	movwf	___wmul@multiplier
 11440  15FA  086F               	movf	??_ftoa+1,w
 11441  15FB  00A1               	movwf	___wmul@multiplier+1
 11442  15FC  31A2  2211  3194   	fcall	___wmul
 11443  15FF  0140               	movlb	0	; select bank0
 11444  1600  0820               	movf	?___wmul,w
 11445  1601  00A6               	movwf	___xxtofl@val
 11446  1602  0821               	movf	?___wmul+1,w
 11447  1603  00A7               	movwf	___xxtofl@val+1
 11448  1604  0D89               	rlf	9,f
 11449  1605  3B89               	subwfb	9,f
 11450  1606  0989               	comf	9,f
 11451  1607  00A8               	movwf	___xxtofl@val+2
 11452  1608  00A9               	movwf	___xxtofl@val+3
 11453  1609  3001               	movlw	1
 11454  160A  3190  2015  3194   	fcall	___xxtofl
 11455  160D  0140               	movlb	0	; select bank0
 11456  160E  0829               	movf	?___xxtofl+3,w
 11457  160F  00E5               	movwf	___flsub@a+3
 11458  1610  0828               	movf	?___xxtofl+2,w
 11459  1611  00E4               	movwf	___flsub@a+2
 11460  1612  0827               	movf	?___xxtofl+1,w
 11461  1613  00E3               	movwf	___flsub@a+1
 11462  1614  0826               	movf	?___xxtofl,w
 11463  1615  00E2               	movwf	___flsub@a
 11464  1616  3041               	movlw	65
 11465  1617  00B7               	movwf	___flmul@b+3
 11466  1618  3020               	movlw	32
 11467  1619  00B6               	movwf	___flmul@b+2
 11468  161A  3000               	movlw	0
 11469  161B  00B5               	movwf	___flmul@b+1
 11470  161C  3000               	movlw	0
 11471  161D  00B4               	movwf	___flmul@b
 11472  161E  0141               	movlb	1	; select bank1
 11473  161F  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11474  1620  0140               	movlb	0	; select bank0
 11475  1621  00BB               	movwf	___flmul@a+3
 11476  1622  0141               	movlb	1	; select bank1
 11477  1623  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11478  1624  0140               	movlb	0	; select bank0
 11479  1625  00BA               	movwf	___flmul@a+2
 11480  1626  0141               	movlb	1	; select bank1
 11481  1627  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11482  1628  0140               	movlb	0	; select bank0
 11483  1629  00B9               	movwf	___flmul@a+1
 11484  162A  0141               	movlb	1	; select bank1
 11485  162B  0825               	movf	ftoa@fValue^(0+128),w
 11486  162C  0140               	movlb	0	; select bank0
 11487  162D  00B8               	movwf	___flmul@a
 11488  162E  3185  2502  3194   	fcall	___flmul
 11489  1631  0140               	movlb	0	; select bank0
 11490  1632  0837               	movf	?___flmul+3,w
 11491  1633  00E9               	movwf	___flsub@b+3
 11492  1634  0836               	movf	?___flmul+2,w
 11493  1635  00E8               	movwf	___flsub@b+2
 11494  1636  0835               	movf	?___flmul+1,w
 11495  1637  00E7               	movwf	___flsub@b+1
 11496  1638  0834               	movf	?___flmul,w
 11497  1639  00E6               	movwf	___flsub@b
 11498  163A  31A2  2269  3194   	fcall	___flsub
 11499  163D  0140               	movlb	0	; select bank0
 11500  163E  0865               	movf	?___flsub+3,w
 11501  163F  0141               	movlb	1	; select bank1
 11502  1640  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 11503  1641  0140               	movlb	0	; select bank0
 11504  1642  0864               	movf	?___flsub+2,w
 11505  1643  0141               	movlb	1	; select bank1
 11506  1644  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 11507  1645  0140               	movlb	0	; select bank0
 11508  1646  0863               	movf	?___flsub+1,w
 11509  1647  0141               	movlb	1	; select bank1
 11510  1648  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 11511  1649  0140               	movlb	0	; select bank0
 11512  164A  0862               	movf	?___flsub,w
 11513  164B  0141               	movlb	1	; select bank1
 11514  164C  00A5               	movwf	ftoa@fValue^(0+128)
 11515                           
 11516                           ;common.c: 30:   str[pos++] = intValue + '0';
 11517  164D  082D               	movf	ftoa@intValue^(0+128),w
 11518  164E  3E30               	addlw	48
 11519  164F  0140               	movlb	0	; select bank0
 11520  1650  00EE               	movwf	??_ftoa
 11521  1651  0141               	movlb	1	; select bank1
 11522  1652  082F               	movf	ftoa@pos^(0+128),w
 11523  1653  0730               	addwf	ftoa@str^(0+128),w
 11524  1654  0140               	movlb	0	; select bank0
 11525  1655  00EF               	movwf	??_ftoa+1
 11526  1656  086F               	movf	??_ftoa+1,w
 11527  1657  0086               	movwf	6
 11528  1658  3001               	movlw	1	; select bank2/3
 11529  1659  0087               	movwf	7
 11530  165A  086E               	movf	??_ftoa,w
 11531  165B  0081               	movwf	1
 11532  165C  3001               	movlw	1
 11533  165D  00EE               	movwf	??_ftoa
 11534  165E  086E               	movf	??_ftoa,w
 11535  165F  0141               	movlb	1	; select bank1
 11536  1660  07AF               	addwf	ftoa@pos^(0+128),f
 11537                           
 11538                           ;common.c: 31:   if (w && (w == prec))
 11539  1661  082E               	movf	ftoa@w^(0+128),w
 11540  1662  1903               	btfsc	3,2
 11541  1663  2DD1               	goto	l4105
 11542  1664  082E               	movf	ftoa@w^(0+128),w
 11543  1665  062A               	xorwf	ftoa@prec^(0+128),w
 11544  1666  1D03               	skipz
 11545  1667  2DD1               	goto	l4105
 11546                           
 11547                           ;common.c: 32:    str[pos++] = '.';
 11548  1668  302E               	movlw	46
 11549  1669  2DBF               	goto	L8
 11550  166A                     l4107:	
 11551                           
 11552                           ;common.c: 35:  str[pos] = '\0';
 11553  166A  082F               	movf	ftoa@pos^(0+128),w
 11554  166B  0730               	addwf	ftoa@str^(0+128),w
 11555  166C  0140               	movlb	0	; select bank0
 11556  166D  00EE               	movwf	??_ftoa
 11557  166E  086E               	movf	??_ftoa,w
 11558  166F  0086               	movwf	6
 11559  1670  3001               	movlw	1	; select bank2/3
 11560  1671  0087               	movwf	7
 11561  1672  0181               	clrf	1
 11562  1673  0008               	return
 11563  1674                     __end_of_ftoa:	
 11564                           
 11565                           	psect	text31
 11566  2211                     __ptext31:	
 11567 ;; *************** function ___wmul *****************
 11568 ;; Defined at:
 11569 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 11570 ;; Parameters:    Size  Location     Type
 11571 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11572 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;  product         2    4[BANK0 ] unsigned int 
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  2    0[BANK0 ] unsigned int 
 11577 ;; Registers used:
 11578 ;;		wreg, status,2, status,0
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11587 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11588 ;;Total ram usage:        6 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    3
 11591 ;; This function calls:
 11592 ;;		Nothing
 11593 ;; This function is called by:
 11594 ;;		_getStateFunc
 11595 ;;		_getNextState
 11596 ;;		_returnToPage
 11597 ;;		_ftoa
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           
 11602                           ;psect for function ___wmul
 11603  2211                     ___wmul:	
 11604                           
 11605                           ;incstack = 0
 11606                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11607  2211  0140               	movlb	0	; select bank0
 11608  2212  01A4               	clrf	___wmul@product
 11609  2213  01A5               	clrf	___wmul@product+1
 11610  2214                     l3481:	
 11611  2214  1C20               	btfss	___wmul@multiplier,0
 11612  2215  2A1A               	goto	l769
 11613  2216  0822               	movf	___wmul@multiplicand,w
 11614  2217  07A4               	addwf	___wmul@product,f
 11615  2218  0823               	movf	___wmul@multiplicand+1,w
 11616  2219  3DA5               	addwfc	___wmul@product+1,f
 11617  221A                     l769:	
 11618  221A  3001               	movlw	1
 11619  221B                     u3575:	
 11620  221B  35A2               	lslf	___wmul@multiplicand,f
 11621  221C  0DA3               	rlf	___wmul@multiplicand+1,f
 11622  221D  0B89               	decfsz	9,f
 11623  221E  2A1B               	goto	u3575
 11624  221F  3001               	movlw	1
 11625  2220                     u3585:	
 11626  2220  36A1               	lsrf	___wmul@multiplier+1,f
 11627  2221  0CA0               	rrf	___wmul@multiplier,f
 11628  2222  0B89               	decfsz	9,f
 11629  2223  2A20               	goto	u3585
 11630  2224  0820               	movf	___wmul@multiplier,w
 11631  2225  0421               	iorwf	___wmul@multiplier+1,w
 11632  2226  1D03               	btfss	3,2
 11633  2227  2A14               	goto	l3481
 11634  2228  0825               	movf	___wmul@product+1,w
 11635  2229  00A1               	movwf	?___wmul+1
 11636  222A  0824               	movf	___wmul@product,w
 11637  222B  00A0               	movwf	?___wmul
 11638  222C  0008               	return
 11639  222D                     __end_of___wmul:	
 11640                           
 11641                           	psect	text32
 11642  257A                     __ptext32:	
 11643 ;; *************** function ___fleq *****************
 11644 ;; Defined at:
 11645 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 11646 ;; Parameters:    Size  Location     Type
 11647 ;;  ff1             4    0[BANK0 ] unsigned int 
 11648 ;;  ff2             4    4[BANK0 ] unsigned int 
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;		None
 11651 ;; Return value:  Size  Location     Type
 11652 ;;		None               void
 11653 ;; Registers used:
 11654 ;;		wreg, status,2, status,0
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11660 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11662 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11663 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11664 ;;Total ram usage:       12 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; Hardware stack levels required when called:    3
 11667 ;; This function calls:
 11668 ;;		Nothing
 11669 ;; This function is called by:
 11670 ;;		_channelSetup
 11671 ;;		_setOutputPower
 11672 ;; This function uses a non-reentrant model
 11673 ;;
 11674                           
 11675                           
 11676                           ;psect for function ___fleq
 11677  257A                     ___fleq:	
 11678                           
 11679                           ;incstack = 0
 11680                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 11681  257A  3000               	movlw	0
 11682  257B  0140               	movlb	0	; select bank0
 11683  257C  0520               	andwf	___fleq@ff1,w
 11684  257D  00A8               	movwf	??___fleq
 11685  257E  3000               	movlw	0
 11686  257F  0521               	andwf	___fleq@ff1+1,w
 11687  2580  00A9               	movwf	??___fleq+1
 11688  2581  3080               	movlw	128
 11689  2582  0522               	andwf	___fleq@ff1+2,w
 11690  2583  00AA               	movwf	??___fleq+2
 11691  2584  307F               	movlw	127
 11692  2585  0523               	andwf	___fleq@ff1+3,w
 11693  2586  00AB               	movwf	??___fleq+3
 11694  2587  082B               	movf	??___fleq+3,w
 11695  2588  042A               	iorwf	??___fleq+2,w
 11696  2589  0429               	iorwf	??___fleq+1,w
 11697  258A  0428               	iorwf	??___fleq,w
 11698  258B  1D03               	skipz
 11699  258C  2D95               	goto	l938
 11700  258D  3000               	movlw	0
 11701  258E  00A3               	movwf	___fleq@ff1+3
 11702  258F  3000               	movlw	0
 11703  2590  00A2               	movwf	___fleq@ff1+2
 11704  2591  3000               	movlw	0
 11705  2592  00A1               	movwf	___fleq@ff1+1
 11706  2593  3000               	movlw	0
 11707  2594  00A0               	movwf	___fleq@ff1
 11708  2595                     l938:	
 11709  2595  3000               	movlw	0
 11710  2596  0524               	andwf	___fleq@ff2,w
 11711  2597  00A8               	movwf	??___fleq
 11712  2598  3000               	movlw	0
 11713  2599  0525               	andwf	___fleq@ff2+1,w
 11714  259A  00A9               	movwf	??___fleq+1
 11715  259B  3080               	movlw	128
 11716  259C  0526               	andwf	___fleq@ff2+2,w
 11717  259D  00AA               	movwf	??___fleq+2
 11718  259E  307F               	movlw	127
 11719  259F  0527               	andwf	___fleq@ff2+3,w
 11720  25A0  00AB               	movwf	??___fleq+3
 11721  25A1  082B               	movf	??___fleq+3,w
 11722  25A2  042A               	iorwf	??___fleq+2,w
 11723  25A3  0429               	iorwf	??___fleq+1,w
 11724  25A4  0428               	iorwf	??___fleq,w
 11725  25A5  1D03               	skipz
 11726  25A6  2DAF               	goto	l939
 11727  25A7  3000               	movlw	0
 11728  25A8  00A7               	movwf	___fleq@ff2+3
 11729  25A9  3000               	movlw	0
 11730  25AA  00A6               	movwf	___fleq@ff2+2
 11731  25AB  3000               	movlw	0
 11732  25AC  00A5               	movwf	___fleq@ff2+1
 11733  25AD  3000               	movlw	0
 11734  25AE  00A4               	movwf	___fleq@ff2
 11735  25AF                     l939:	
 11736  25AF  0827               	movf	___fleq@ff2+3,w
 11737  25B0  0623               	xorwf	___fleq@ff1+3,w
 11738  25B1  1D03               	skipz
 11739  25B2  2DBD               	goto	u4985
 11740  25B3  0826               	movf	___fleq@ff2+2,w
 11741  25B4  0622               	xorwf	___fleq@ff1+2,w
 11742  25B5  1D03               	skipz
 11743  25B6  2DBD               	goto	u4985
 11744  25B7  0825               	movf	___fleq@ff2+1,w
 11745  25B8  0621               	xorwf	___fleq@ff1+1,w
 11746  25B9  1D03               	skipz
 11747  25BA  2DBD               	goto	u4985
 11748  25BB  0824               	movf	___fleq@ff2,w
 11749  25BC  0620               	xorwf	___fleq@ff1,w
 11750  25BD                     u4985:	
 11751  25BD  1903               	skipnz
 11752  25BE  2DC1               	goto	l4183
 11753  25BF  1003               	clrc
 11754  25C0  0008               	return
 11755  25C1                     l4183:	
 11756  25C1  1403               	setc
 11757  25C2  0008               	return
 11758  25C3                     __end_of___fleq:	
 11759                           
 11760                           	psect	text33
 11761  2388                     __ptext33:	
 11762 ;; *************** function _OLED_print_xy *****************
 11763 ;; Defined at:
 11764 ;;		line 157 in file "oled.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;  col             1    wreg     unsigned char 
 11767 ;;  row             1    7[BANK0 ] unsigned char 
 11768 ;;  s               2    8[BANK0 ] PTR unsigned char 
 11769 ;;		 -> STR_53(11), STR_52(9), STR_51(2), STR_50(13), 
 11770 ;;		 -> STR_49(9), STR_48(2), STR_47(13), STR_46(3), 
 11771 ;;		 -> STR_45(7), STR_44(13), STR_43(10), STR_42(10), 
 11772 ;;		 -> STR_41(3), STR_40(7), STR_39(37), STR_38(8), 
 11773 ;;		 -> STR_37(2), STR_36(13), STR_35(8), STR_34(2), 
 11774 ;;		 -> STR_33(7), STR_32(6), STR_31(7), STR_30(6), 
 11775 ;;		 -> STR_29(13), STR_28(8), STR_27(9), STR_26(8), 
 11776 ;;		 -> STR_25(5), STR_24(8), STR_23(5), STR_22(25), 
 11777 ;;		 -> STR_21(13), STR_20(13), STR_19(13), STR_18(13), 
 11778 ;;		 -> STR_17(7), STR_16(7), STR_15(3), STR_14(13), 
 11779 ;;		 -> STR_13(3), STR_12(3), STR_11(4), STR_10(2), 
 11780 ;;		 -> STR_9(4), STR_8(8), STR_7(7), STR_6(8), 
 11781 ;;		 -> STR_5(2), STR_4(4), str(10), STR_3(49), 
 11782 ;;		 -> STR_2(4), systemCheck@str(3), STR_1(12), 
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;  col             1   15[BANK0 ] unsigned char 
 11785 ;;  row_offsets     4   11[BANK0 ] unsigned char [4]
 11786 ;; Return value:  Size  Location     Type
 11787 ;;                  1    wreg      void 
 11788 ;; Registers used:
 11789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11790 ;; Tracked objects:
 11791 ;;		On entry : 0/0
 11792 ;;		On exit  : 0/0
 11793 ;;		Unchanged: 0/0
 11794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11795 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11796 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11798 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11799 ;;Total ram usage:        9 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    7
 11802 ;; This function calls:
 11803 ;;		_OLED_command
 11804 ;;		_OLED_write
 11805 ;; This function is called by:
 11806 ;;		_systemCheck
 11807 ;;		_statusView
 11808 ;;		_channelView
 11809 ;;		_channelSetup
 11810 ;;		_setOutputPower
 11811 ;;		_setLensDia
 11812 ;;		_setup
 11813 ;;		_setDPOffset
 11814 ;;		_setSkyTemp
 11815 ;;		_setFudgeFactor
 11816 ;;		_menuError
 11817 ;; This function uses a non-reentrant model
 11818 ;;
 11819                           
 11820                           
 11821                           ;psect for function _OLED_print_xy
 11822  2388                     _OLED_print_xy:	
 11823                           
 11824                           ;incstack = 0
 11825                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11826                           ;OLED_print_xy@col stored from wreg
 11827  2388  0140               	movlb	0	; select bank0
 11828  2389  00AF               	movwf	OLED_print_xy@col
 11829                           
 11830                           ;oled.c: 157: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 158: {;oled.
      +                          c: 159:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 11831  238A  0142               	movlb	2	; select bank2
 11832  238B  0866               	movf	(OLED_print_xy@F7940+3)^(0+256),w
 11833  238C  0140               	movlb	0	; select bank0
 11834  238D  00AE               	movwf	OLED_print_xy@row_offsets+3
 11835  238E  0142               	movlb	2	; select bank2
 11836  238F  0865               	movf	(OLED_print_xy@F7940+2)^(0+256),w
 11837  2390  0140               	movlb	0	; select bank0
 11838  2391  00AD               	movwf	OLED_print_xy@row_offsets+2
 11839  2392  0142               	movlb	2	; select bank2
 11840  2393  0864               	movf	(OLED_print_xy@F7940+1)^(0+256),w
 11841  2394  0140               	movlb	0	; select bank0
 11842  2395  00AC               	movwf	OLED_print_xy@row_offsets+1
 11843  2396  0142               	movlb	2	; select bank2
 11844  2397  0863               	movf	OLED_print_xy@F7940^(0+256),w
 11845  2398  0140               	movlb	0	; select bank0
 11846  2399  00AB               	movwf	OLED_print_xy@row_offsets
 11847                           
 11848                           ;oled.c: 161:  OLED_command(0x80 | (col + row_offsets[row]));
 11849  239A  0827               	movf	OLED_print_xy@row,w
 11850  239B  3E2B               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 11851  239C  0086               	movwf	6
 11852  239D  0187               	clrf	7
 11853  239E  0801               	movf	1,w
 11854  239F  072F               	addwf	OLED_print_xy@col,w
 11855  23A0  3880               	iorlw	128
 11856  23A1  31A1  219E  31A3   	fcall	_OLED_command
 11857  23A4                     l3991:	
 11858                           ;oled.c: 162:  while (*s != (char) ((void*)0)) {
 11859                           
 11860                           
 11861                           ;oled.c: 162:  while (*s != (char) ((void*)0)) {
 11862  23A4  0140               	movlb	0	; select bank0
 11863  23A5  0828               	movf	OLED_print_xy@s,w
 11864  23A6  0084               	movwf	4
 11865  23A7  0829               	movf	OLED_print_xy@s+1,w
 11866  23A8  0085               	movwf	5
 11867  23A9  0012               	moviw fsr0++
 11868  23AA  1903               	btfsc	3,2
 11869  23AB  0008               	return
 11870                           
 11871                           ;oled.c: 163:   OLED_write(*s++);
 11872  23AC  0828               	movf	OLED_print_xy@s,w
 11873  23AD  0084               	movwf	4
 11874  23AE  0829               	movf	OLED_print_xy@s+1,w
 11875  23AF  0085               	movwf	5
 11876  23B0  0800               	movf	0,w	;code access
 11877  23B1  31A1  21BC  31A3   	fcall	_OLED_write
 11878  23B4  3001               	movlw	1
 11879  23B5  0140               	movlb	0	; select bank0
 11880  23B6  07A8               	addwf	OLED_print_xy@s,f
 11881  23B7  3000               	movlw	0
 11882  23B8  3DA9               	addwfc	OLED_print_xy@s+1,f
 11883  23B9  2BA4               	goto	l3991
 11884  23BA                     __end_of_OLED_print_xy:	
 11885                           
 11886                           	psect	text34
 11887  2532                     __ptext34:	
 11888 ;; *************** function _initialize *****************
 11889 ;; Defined at:
 11890 ;;		line 360 in file "main.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;		None
 11893 ;; Auto vars:     Size  Location     Type
 11894 ;;		None
 11895 ;; Return value:  Size  Location     Type
 11896 ;;                  1    wreg      void 
 11897 ;; Registers used:
 11898 ;;		wreg, status,2, status,0
 11899 ;; Tracked objects:
 11900 ;;		On entry : 0/0
 11901 ;;		On exit  : 0/0
 11902 ;;		Unchanged: 0/0
 11903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11908 ;;Total ram usage:        0 bytes
 11909 ;; Hardware stack levels used:    1
 11910 ;; Hardware stack levels required when called:    3
 11911 ;; This function calls:
 11912 ;;		Nothing
 11913 ;; This function is called by:
 11914 ;;		_main
 11915 ;; This function uses a non-reentrant model
 11916 ;;
 11917                           
 11918                           
 11919                           ;psect for function _initialize
 11920  2532                     _initialize:	
 11921                           
 11922                           ;main.c: 362:  OSCFRQ = 0b00000010;
 11923                           
 11924                           ;incstack = 0
 11925                           ; Regs used in _initialize: [wreg+status,2+status,0]
 11926  2532  3002               	movlw	2
 11927  2533  0151               	movlb	17	; select bank17
 11928  2534  0093               	movwf	19	;volatile
 11929                           
 11930                           ;main.c: 363:  OSCCON1 = 0b01100000;
 11931  2535  3060               	movlw	96
 11932  2536  008D               	movwf	13	;volatile
 11933  2537                     l240:	
 11934                           ;main.c: 364:  while (!OSCCON3bits.ORDY);
 11935                           
 11936  2537  1E0F               	btfss	15,4	;volatile
 11937  2538  2D37               	goto	l240
 11938                           
 11939                           ;main.c: 367:  RX1DTPPSbits.RX1DTPPS = 0x17;
 11940  2539  017D               	movlb	61	; select bank61
 11941  253A  084B               	movf	75,w	;volatile
 11942  253B  39C0               	andlw	-64
 11943  253C  3817               	iorlw	23
 11944  253D  00CB               	movwf	75	;volatile
 11945                           
 11946                           ;main.c: 368:  RC6PPS = 0x0F;
 11947  253E  300F               	movlw	15
 11948  253F  017E               	movlb	62	; select bank62
 11949  2540  00A6               	movwf	38	;volatile
 11950                           
 11951                           ;main.c: 371:  ANSELA = 0b01000000;
 11952  2541  3040               	movlw	64
 11953  2542  00B8               	movwf	56	;volatile
 11954                           
 11955                           ;main.c: 372:  ANSELB = 0b00000000;
 11956  2543  01C3               	clrf	67	;volatile
 11957                           
 11958                           ;main.c: 373:  ANSELC = 0b00000011;
 11959  2544  3003               	movlw	3
 11960  2545  00CE               	movwf	78	;volatile
 11961                           
 11962                           ;main.c: 376:  TRISA = 0b11110000;
 11963  2546  30F0               	movlw	240
 11964  2547  0140               	movlb	0	; select bank0
 11965  2548  0092               	movwf	18	;volatile
 11966                           
 11967                           ;main.c: 377:  TRISB = 0b00000000;
 11968  2549  0193               	clrf	19	;volatile
 11969                           
 11970                           ;main.c: 378:  TRISC = 0b10000111;
 11971  254A  3087               	movlw	135
 11972  254B  0094               	movwf	20	;volatile
 11973                           
 11974                           ;main.c: 381:  ADCON0bits.ADON = 1;
 11975  254C  0141               	movlb	1	; select bank1
 11976  254D  141D               	bsf	29,0	;volatile
 11977                           
 11978                           ;main.c: 382:  ADCON1 = 0b11100000;
 11979  254E  30E0               	movlw	224
 11980  254F  009E               	movwf	30	;volatile
 11981                           
 11982                           ;main.c: 385:  T0CON0 = 0b10000000;
 11983  2550  3080               	movlw	128
 11984  2551  014B               	movlb	11	; select bank11
 11985  2552  009E               	movwf	30	;volatile
 11986                           
 11987                           ;main.c: 386:  T0CON1 = 0b01000111;
 11988  2553  3047               	movlw	71
 11989  2554  009F               	movwf	31	;volatile
 11990                           
 11991                           ;main.c: 387:  TMR0 = 178;
 11992  2555  30B2               	movlw	178
 11993  2556  009C               	movwf	28	;volatile
 11994                           
 11995                           ;main.c: 390:  T1CON = 0b00110011;
 11996  2557  3033               	movlw	51
 11997  2558  0144               	movlb	4	; select bank4
 11998  2559  008E               	movwf	14	;volatile
 11999                           
 12000                           ;main.c: 391:  T1CLK = 0b00000001;
 12001  255A  3001               	movlw	1
 12002  255B  0091               	movwf	17	;volatile
 12003                           
 12004                           ;main.c: 392:  TMR1 = 53035;
 12005  255C  30CF               	movlw	207
 12006  255D  008D               	movwf	13	;volatile
 12007  255E  302B               	movlw	43
 12008  255F  008C               	movwf	12	;volatile
 12009                           
 12010                           ;main.c: 395:  PIE0 = 0b00110000;
 12011  2560  3030               	movlw	48
 12012  2561  014E               	movlb	14	; select bank14
 12013  2562  0096               	movwf	22	;volatile
 12014                           
 12015                           ;main.c: 396:  PIE3 = 0b00100000;
 12016  2563  3020               	movlw	32
 12017  2564  0099               	movwf	25	;volatile
 12018                           
 12019                           ;main.c: 397:  PIE4 = 0b00000001;
 12020  2565  3001               	movlw	1
 12021  2566  009A               	movwf	26	;volatile
 12022                           
 12023                           ;main.c: 398:  INTCON = 0b11000000;
 12024  2567  30C0               	movlw	192
 12025  2568  008B               	movwf	11	;volatile
 12026                           
 12027                           ;main.c: 401:  IOCAP = 0b10110000;
 12028  2569  30B0               	movlw	176
 12029  256A  017E               	movlb	62	; select bank62
 12030  256B  00BD               	movwf	61	;volatile
 12031                           
 12032                           ;main.c: 402:  IOCAN = 0b10110000;
 12033  256C  30B0               	movlw	176
 12034  256D  00BE               	movwf	62	;volatile
 12035                           
 12036                           ;main.c: 403:  IOCCN = 0b00000100;
 12037  256E  3004               	movlw	4
 12038  256F  00D4               	movwf	84	;volatile
 12039                           
 12040                           ;main.c: 407:  BAUD1CON = 0b00001000;
 12041  2570  3008               	movlw	8
 12042  2571  0142               	movlb	2	; select bank2
 12043  2572  009F               	movwf	31	;volatile
 12044                           
 12045                           ;main.c: 408:  SPBRGL = 25;
 12046  2573  3019               	movlw	25
 12047  2574  009B               	movwf	27	;volatile
 12048                           
 12049                           ;main.c: 409:  RC1STA = 0b10010000;
 12050  2575  3090               	movlw	144
 12051  2576  009D               	movwf	29	;volatile
 12052                           
 12053                           ;main.c: 410:  TX1STA = 0b00100000;
 12054  2577  3020               	movlw	32
 12055  2578  009E               	movwf	30	;volatile
 12056  2579  0008               	return
 12057  257A                     __end_of_initialize:	
 12058                           
 12059                           	psect	text35
 12060  1CAB                     __ptext35:	
 12061 ;; *************** function _initGlobalData *****************
 12062 ;; Defined at:
 12063 ;;		line 90 in file "main.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;  data            2    0[BANK0 ] PTR struct .
 12066 ;;		 -> data(173), 
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;  chData          2    7[BANK0 ] PTR struct .
 12069 ;;		 -> data.chData(128), data(173), 
 12070 ;;  n               1    6[BANK0 ] unsigned char 
 12071 ;; Return value:  Size  Location     Type
 12072 ;;                  1    wreg      void 
 12073 ;; Registers used:
 12074 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12075 ;; Tracked objects:
 12076 ;;		On entry : 0/0
 12077 ;;		On exit  : 0/0
 12078 ;;		Unchanged: 0/0
 12079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12080 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12081 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12082 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12083 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12084 ;;Total ram usage:        9 bytes
 12085 ;; Hardware stack levels used:    1
 12086 ;; Hardware stack levels required when called:    3
 12087 ;; This function calls:
 12088 ;;		Nothing
 12089 ;; This function is called by:
 12090 ;;		_main
 12091 ;; This function uses a non-reentrant model
 12092 ;;
 12093                           
 12094                           
 12095                           ;psect for function _initGlobalData
 12096  1CAB                     _initGlobalData:	
 12097                           
 12098                           ;main.c: 90: void initGlobalData(t_globalData *data);main.c: 91: {;main.c: 92:  uint8_t 
      +                          n;;main.c: 93:  t_channelData *chData;;main.c: 95:  data->tempC = 0;
 12099                           
 12100                           ;incstack = 0
 12101                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0]
 12102  1CAB  0140               	movlb	0	; select bank0
 12103  1CAC  0820               	movf	initGlobalData@data,w
 12104  1CAD  0086               	movwf	6
 12105  1CAE  0821               	movf	initGlobalData@data+1,w
 12106  1CAF  0087               	movwf	7
 12107  1CB0  3000               	movlw	0
 12108  1CB1  3FC0               	movwi [0]fsr1
 12109  1CB2  3000               	movlw	0
 12110  1CB3  3FC1               	movwi [1]fsr1
 12111  1CB4  3000               	movlw	0
 12112  1CB5  3FC2               	movwi [2]fsr1
 12113  1CB6  3000               	movlw	0
 12114  1CB7  3FC3               	movwi [3]fsr1
 12115                           
 12116                           ;main.c: 96:  data->relHum = 0;
 12117  1CB8  0820               	movf	initGlobalData@data,w
 12118  1CB9  0086               	movwf	6
 12119  1CBA  0821               	movf	initGlobalData@data+1,w
 12120  1CBB  0087               	movwf	7
 12121  1CBC  3144               	addfsr 1,4
 12122  1CBD  3000               	movlw	0
 12123  1CBE  3FC0               	movwi [0]fsr1
 12124  1CBF  3000               	movlw	0
 12125  1CC0  3FC1               	movwi [1]fsr1
 12126  1CC1  3000               	movlw	0
 12127  1CC2  3FC2               	movwi [2]fsr1
 12128  1CC3  3000               	movlw	0
 12129  1CC4  3FC3               	movwi [3]fsr1
 12130                           
 12131                           ;main.c: 97:  data->dewPointC = 0;
 12132  1CC5  0820               	movf	initGlobalData@data,w
 12133  1CC6  0086               	movwf	6
 12134  1CC7  0821               	movf	initGlobalData@data+1,w
 12135  1CC8  0087               	movwf	7
 12136  1CC9  3148               	addfsr 1,8
 12137  1CCA  3000               	movlw	0
 12138  1CCB  3FC0               	movwi [0]fsr1
 12139  1CCC  3000               	movlw	0
 12140  1CCD  3FC1               	movwi [1]fsr1
 12141  1CCE  3000               	movlw	0
 12142  1CCF  3FC2               	movwi [2]fsr1
 12143  1CD0  3000               	movlw	0
 12144  1CD1  3FC3               	movwi [3]fsr1
 12145                           
 12146                           ;main.c: 98:  data->sensorVersion = 0;
 12147  1CD2  0820               	movf	initGlobalData@data,w
 12148  1CD3  0086               	movwf	6
 12149  1CD4  0821               	movf	initGlobalData@data+1,w
 12150  1CD5  0087               	movwf	7
 12151  1CD6  314C               	addfsr 1,12
 12152  1CD7  3000               	movlw	0
 12153  1CD8  3FC0               	movwi [0]fsr1
 12154  1CD9  3000               	movlw	0
 12155  1CDA  3FC1               	movwi [1]fsr1
 12156  1CDB  3000               	movlw	0
 12157  1CDC  3FC2               	movwi [2]fsr1
 12158  1CDD  3000               	movlw	0
 12159  1CDE  3FC3               	movwi [3]fsr1
 12160                           
 12161                           ;main.c: 99:  data->tempAux = 0;
 12162  1CDF  0820               	movf	initGlobalData@data,w
 12163  1CE0  0086               	movwf	6
 12164  1CE1  0821               	movf	initGlobalData@data+1,w
 12165  1CE2  0087               	movwf	7
 12166  1CE3  3150               	addfsr 1,16
 12167  1CE4  3000               	movlw	0
 12168  1CE5  3FC0               	movwi [0]fsr1
 12169  1CE6  3000               	movlw	0
 12170  1CE7  3FC1               	movwi [1]fsr1
 12171  1CE8  3000               	movlw	0
 12172  1CE9  3FC2               	movwi [2]fsr1
 12173  1CEA  3000               	movlw	0
 12174  1CEB  3FC3               	movwi [3]fsr1
 12175                           
 12176                           ;main.c: 100:  data->voltage = 0;
 12177  1CEC  0820               	movf	initGlobalData@data,w
 12178  1CED  0086               	movwf	6
 12179  1CEE  0821               	movf	initGlobalData@data+1,w
 12180  1CEF  0087               	movwf	7
 12181  1CF0  3154               	addfsr 1,20
 12182  1CF1  3000               	movlw	0
 12183  1CF2  3FC0               	movwi [0]fsr1
 12184  1CF3  3000               	movlw	0
 12185  1CF4  3FC1               	movwi [1]fsr1
 12186  1CF5  3000               	movlw	0
 12187  1CF6  3FC2               	movwi [2]fsr1
 12188  1CF7  3000               	movlw	0
 12189  1CF8  3FC3               	movwi [3]fsr1
 12190                           
 12191                           ;main.c: 101:  data->current = 0;
 12192  1CF9  0820               	movf	initGlobalData@data,w
 12193  1CFA  0086               	movwf	6
 12194  1CFB  0821               	movf	initGlobalData@data+1,w
 12195  1CFC  0087               	movwf	7
 12196  1CFD  3158               	addfsr 1,24
 12197  1CFE  3000               	movlw	0
 12198  1CFF  3FC0               	movwi [0]fsr1
 12199  1D00  3000               	movlw	0
 12200  1D01  3FC1               	movwi [1]fsr1
 12201  1D02  3000               	movlw	0
 12202  1D03  3FC2               	movwi [2]fsr1
 12203  1D04  3000               	movlw	0
 12204  1D05  3FC3               	movwi [3]fsr1
 12205                           
 12206                           ;main.c: 102:  data->power = 0;
 12207  1D06  0820               	movf	initGlobalData@data,w
 12208  1D07  0086               	movwf	6
 12209  1D08  0821               	movf	initGlobalData@data+1,w
 12210  1D09  0087               	movwf	7
 12211  1D0A  315C               	addfsr 1,28
 12212  1D0B  3000               	movlw	0
 12213  1D0C  3FC0               	movwi [0]fsr1
 12214  1D0D  3000               	movlw	0
 12215  1D0E  3FC1               	movwi [1]fsr1
 12216  1D0F  3000               	movlw	0
 12217  1D10  3FC2               	movwi [2]fsr1
 12218  1D11  3000               	movlw	0
 12219  1D12  3FC3               	movwi [3]fsr1
 12220                           
 12221                           ;main.c: 103:  data->dpOffset = 3.0;
 12222  1D13  0820               	movf	initGlobalData@data,w
 12223  1D14  3E20               	addlw	32
 12224  1D15  0086               	movwf	6
 12225  1D16  3000               	movlw	0
 12226  1D17  3D21               	addwfc	initGlobalData@data+1,w
 12227  1D18  0087               	movwf	7
 12228  1D19  3000               	movlw	0
 12229  1D1A  3FC0               	movwi [0]fsr1
 12230  1D1B  3000               	movlw	0
 12231  1D1C  3FC1               	movwi [1]fsr1
 12232  1D1D  3040               	movlw	64
 12233  1D1E  3FC2               	movwi [2]fsr1
 12234  1D1F  3040               	movlw	64
 12235  1D20  3FC3               	movwi [3]fsr1
 12236                           
 12237                           ;main.c: 104:  data->skyTemp = -40;
 12238  1D21  0820               	movf	initGlobalData@data,w
 12239  1D22  3E24               	addlw	36
 12240  1D23  0086               	movwf	6
 12241  1D24  3000               	movlw	0
 12242  1D25  3D21               	addwfc	initGlobalData@data+1,w
 12243  1D26  0087               	movwf	7
 12244  1D27  3000               	movlw	0
 12245  1D28  3FC0               	movwi [0]fsr1
 12246  1D29  3000               	movlw	0
 12247  1D2A  3FC1               	movwi [1]fsr1
 12248  1D2B  3020               	movlw	32
 12249  1D2C  3FC2               	movwi [2]fsr1
 12250  1D2D  30C2               	movlw	194
 12251  1D2E  3FC3               	movwi [3]fsr1
 12252                           
 12253                           ;main.c: 105:  data->fudgeFactor = 1.0;
 12254  1D2F  0820               	movf	initGlobalData@data,w
 12255  1D30  3E28               	addlw	40
 12256  1D31  0086               	movwf	6
 12257  1D32  3000               	movlw	0
 12258  1D33  3D21               	addwfc	initGlobalData@data+1,w
 12259  1D34  0087               	movwf	7
 12260  1D35  3000               	movlw	0
 12261  1D36  3FC0               	movwi [0]fsr1
 12262  1D37  3000               	movlw	0
 12263  1D38  3FC1               	movwi [1]fsr1
 12264  1D39  3080               	movlw	128
 12265  1D3A  3FC2               	movwi [2]fsr1
 12266  1D3B  303F               	movlw	63
 12267  1D3C  3FC3               	movwi [3]fsr1
 12268                           
 12269                           ;main.c: 107:  for (n = 0; n < 4; n++) {
 12270  1D3D  01A6               	clrf	initGlobalData@n
 12271  1D3E                     l4765:	
 12272                           
 12273                           ;main.c: 108:   chData = &data->chData[n];
 12274  1D3E  0826               	movf	initGlobalData@n,w
 12275  1D3F  00A2               	movwf	??_initGlobalData
 12276  1D40  01A3               	clrf	??_initGlobalData+1
 12277  1D41  3005               	movlw	5
 12278  1D42                     u5475:	
 12279  1D42  35A2               	lslf	??_initGlobalData,f
 12280  1D43  0DA3               	rlf	??_initGlobalData+1,f
 12281  1D44  0B89               	decfsz	9,f
 12282  1D45  2D42               	goto	u5475
 12283  1D46  0822               	movf	??_initGlobalData,w
 12284  1D47  0720               	addwf	initGlobalData@data,w
 12285  1D48  00A4               	movwf	??_initGlobalData+2
 12286  1D49  0823               	movf	??_initGlobalData+1,w
 12287  1D4A  3D21               	addwfc	initGlobalData@data+1,w
 12288  1D4B  00A5               	movwf	??_initGlobalData+3
 12289  1D4C  0824               	movf	??_initGlobalData+2,w
 12290  1D4D  3E2D               	addlw	45
 12291  1D4E  00A7               	movwf	initGlobalData@chData
 12292  1D4F  3000               	movlw	0
 12293  1D50  3D25               	addwfc	??_initGlobalData+3,w
 12294  1D51  00A8               	movwf	initGlobalData@chData+1
 12295                           
 12296                           ;main.c: 109:   chData->lensDia = 4;
 12297  1D52  0827               	movf	initGlobalData@chData,w
 12298  1D53  0086               	movwf	6
 12299  1D54  0828               	movf	initGlobalData@chData+1,w
 12300  1D55  0087               	movwf	7
 12301  1D56  3156               	addfsr 1,22
 12302  1D57  3000               	movlw	0
 12303  1D58  3FC0               	movwi [0]fsr1
 12304  1D59  3000               	movlw	0
 12305  1D5A  3FC1               	movwi [1]fsr1
 12306  1D5B  3080               	movlw	128
 12307  1D5C  3FC2               	movwi [2]fsr1
 12308  1D5D  3040               	movlw	64
 12309  1D5E  3FC3               	movwi [3]fsr1
 12310                           
 12311                           ;main.c: 110:   chData->status = CH_ENABLED;
 12312  1D5F  0827               	movf	initGlobalData@chData,w
 12313  1D60  3E1F               	addlw	31
 12314  1D61  00A2               	movwf	??_initGlobalData
 12315  1D62  3000               	movlw	0
 12316  1D63  3D28               	addwfc	initGlobalData@chData+1,w
 12317  1D64  00A3               	movwf	??_initGlobalData+1
 12318  1D65  0822               	movf	??_initGlobalData,w
 12319  1D66  0086               	movwf	6
 12320  1D67  0823               	movf	??_initGlobalData+1,w
 12321  1D68  0087               	movwf	7
 12322  1D69  3001               	movlw	1
 12323  1D6A  0081               	movwf	1
 12324                           
 12325                           ;main.c: 111:   chData->mode = MODE_AUTO;
 12326  1D6B  0827               	movf	initGlobalData@chData,w
 12327  1D6C  3E1E               	addlw	30
 12328  1D6D  00A2               	movwf	??_initGlobalData
 12329  1D6E  3000               	movlw	0
 12330  1D6F  3D28               	addwfc	initGlobalData@chData+1,w
 12331  1D70  00A3               	movwf	??_initGlobalData+1
 12332  1D71  0822               	movf	??_initGlobalData,w
 12333  1D72  0086               	movwf	6
 12334  1D73  0823               	movf	??_initGlobalData+1,w
 12335  1D74  0087               	movwf	7
 12336  1D75  3001               	movlw	1
 12337  1D76  0081               	movwf	1
 12338                           
 12339                           ;main.c: 112:   chData->Pmax = 0;
 12340  1D77  0827               	movf	initGlobalData@chData,w
 12341  1D78  0086               	movwf	6
 12342  1D79  0828               	movf	initGlobalData@chData+1,w
 12343  1D7A  0087               	movwf	7
 12344  1D7B  3144               	addfsr 1,4
 12345  1D7C  3000               	movlw	0
 12346  1D7D  3FC0               	movwi [0]fsr1
 12347  1D7E  3000               	movlw	0
 12348  1D7F  3FC1               	movwi [1]fsr1
 12349  1D80  3000               	movlw	0
 12350  1D81  3FC2               	movwi [2]fsr1
 12351  1D82  3000               	movlw	0
 12352  1D83  3FC3               	movwi [3]fsr1
 12353                           
 12354                           ;main.c: 113:   chData->Preq = 0;
 12355  1D84  0827               	movf	initGlobalData@chData,w
 12356  1D85  0086               	movwf	6
 12357  1D86  0828               	movf	initGlobalData@chData+1,w
 12358  1D87  0087               	movwf	7
 12359  1D88  3148               	addfsr 1,8
 12360  1D89  3000               	movlw	0
 12361  1D8A  3FC0               	movwi [0]fsr1
 12362  1D8B  3000               	movlw	0
 12363  1D8C  3FC1               	movwi [1]fsr1
 12364  1D8D  3000               	movlw	0
 12365  1D8E  3FC2               	movwi [2]fsr1
 12366  1D8F  3000               	movlw	0
 12367  1D90  3FC3               	movwi [3]fsr1
 12368                           
 12369                           ;main.c: 114:   chData->Patt = 0;
 12370  1D91  0827               	movf	initGlobalData@chData,w
 12371  1D92  0086               	movwf	6
 12372  1D93  0828               	movf	initGlobalData@chData+1,w
 12373  1D94  0087               	movwf	7
 12374  1D95  314C               	addfsr 1,12
 12375  1D96  3000               	movlw	0
 12376  1D97  3FC0               	movwi [0]fsr1
 12377  1D98  3000               	movlw	0
 12378  1D99  3FC1               	movwi [1]fsr1
 12379  1D9A  3000               	movlw	0
 12380  1D9B  3FC2               	movwi [2]fsr1
 12381  1D9C  3000               	movlw	0
 12382  1D9D  3FC3               	movwi [3]fsr1
 12383                           
 12384                           ;main.c: 115:   chData->current = 0;
 12385  1D9E  0827               	movf	initGlobalData@chData,w
 12386  1D9F  0086               	movwf	6
 12387  1DA0  0828               	movf	initGlobalData@chData+1,w
 12388  1DA1  0087               	movwf	7
 12389  1DA2  3000               	movlw	0
 12390  1DA3  3FC0               	movwi [0]fsr1
 12391  1DA4  3000               	movlw	0
 12392  1DA5  3FC1               	movwi [1]fsr1
 12393  1DA6  3000               	movlw	0
 12394  1DA7  3FC2               	movwi [2]fsr1
 12395  1DA8  3000               	movlw	0
 12396  1DA9  3FC3               	movwi [3]fsr1
 12397                           
 12398                           ;main.c: 116:  }
 12399  1DAA  3001               	movlw	1
 12400  1DAB  00A2               	movwf	??_initGlobalData
 12401  1DAC  0822               	movf	??_initGlobalData,w
 12402  1DAD  07A6               	addwf	initGlobalData@n,f
 12403  1DAE  3004               	movlw	4
 12404  1DAF  0226               	subwf	initGlobalData@n,w
 12405  1DB0  1803               	btfsc	3,0
 12406  1DB1  0008               	return
 12407  1DB2  2D3E               	goto	l4765
 12408  1DB3                     __end_of_initGlobalData:	
 12409                           
 12410                           	psect	text36
 12411  0A5F                     __ptext36:	
 12412 ;; *************** function _getAvgChannelCurrents *****************
 12413 ;; Defined at:
 12414 ;;		line 273 in file "main.c"
 12415 ;; Parameters:    Size  Location     Type
 12416 ;;  data            2   78[BANK0 ] PTR struct .
 12417 ;;		 -> data(173), 
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;  current         4   11[BANK1 ] float 
 12420 ;;  chData          2   15[BANK1 ] PTR struct .
 12421 ;;		 -> data.chData(128), data(173), 
 12422 ;;  adc             2    9[BANK1 ] unsigned short 
 12423 ;; Return value:  Size  Location     Type
 12424 ;;                  1    wreg      unsigned char 
 12425 ;; Registers used:
 12426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12427 ;; Tracked objects:
 12428 ;;		On entry : 0/0
 12429 ;;		On exit  : 0/0
 12430 ;;		Unchanged: 0/0
 12431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12432 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12433 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12434 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12435 ;;      Totals:         0       2      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12436 ;;Total ram usage:       14 bytes
 12437 ;; Hardware stack levels used:    1
 12438 ;; Hardware stack levels required when called:    5
 12439 ;; This function calls:
 12440 ;;		___fldiv
 12441 ;;		___flge
 12442 ;;		___flmul
 12443 ;;		___fltol
 12444 ;;		___xxtofl
 12445 ;;		_adcGetConversion
 12446 ;;		_ema
 12447 ;;		_error
 12448 ;;		_setSwitch
 12449 ;; This function is called by:
 12450 ;;		_main
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           
 12455                           ;psect for function _getAvgChannelCurrents
 12456  0A5F                     _getAvgChannelCurrents:	
 12457                           
 12458                           ;main.c: 273: uint8_t getAvgChannelCurrents(t_globalData *data);main.c: 274: {;main.c: 2
      +                          75:  uint16_t adc;;main.c: 276:  static uint16_t avg;;main.c: 277:  static uint8_t chann
      +                          el = 0;;main.c: 278:  static uint8_t samples = 0;;main.c: 279:  static uint8_t busy = 0;
      +                          ;main.c: 280:  float current;;main.c: 281:  t_channelData *chData;;main.c: 283:  if (!bu
      +                          sy) {
 12459                           
 12460                           ;incstack = 0
 12461                           ; Regs used in _getAvgChannelCurrents: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12462  0A5F  0141               	movlb	1	; select bank1
 12463  0A60  086A               	movf	getAvgChannelCurrents@busy^(0+128),w
 12464  0A61  1D03               	btfss	3,2
 12465  0A62  2A71               	goto	l4935
 12466                           
 12467                           ;main.c: 284:   busy = 1;
 12468  0A63  01EA               	clrf	getAvgChannelCurrents@busy^(0+128)
 12469  0A64  0AEA               	incf	getAvgChannelCurrents@busy^(0+128),f
 12470                           
 12471                           ;main.c: 285:   samples = 0;
 12472  0A65  01EB               	clrf	getAvgChannelCurrents@samples^(0+128)
 12473                           
 12474                           ;main.c: 286:   channel = 0;
 12475  0A66  01EC               	clrf	getAvgChannelCurrents@channel^(0+128)
 12476                           
 12477                           ;main.c: 287:   avg = 0;
 12478  0A67  0142               	movlb	2	; select bank2
 12479  0A68  01B2               	clrf	getAvgChannelCurrents@avg^(0+256)
 12480  0A69  01B3               	clrf	(getAvgChannelCurrents@avg+1)^(0+256)
 12481                           
 12482                           ;main.c: 288:   setSwitch(channel, 1);
 12483  0A6A  0140               	movlb	0	; select bank0
 12484  0A6B  01A0               	clrf	setSwitch@state
 12485  0A6C  0AA0               	incf	setSwitch@state,f
 12486  0A6D  3000               	movlw	0
 12487  0A6E  31A2  22CF         	fcall	_setSwitch
 12488                           
 12489                           ;main.c: 289:  } else {
 12490  0A70  0008               	return
 12491  0A71                     l4935:	
 12492                           
 12493                           ;main.c: 290:   chData = &data->chData[channel];
 12494  0A71  086C               	movf	getAvgChannelCurrents@channel^(0+128),w
 12495  0A72  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12496  0A73  01A6               	clrf	(??_getAvgChannelCurrents^(0+128)+1)
 12497  0A74  3005               	movlw	5
 12498  0A75                     u5725:	
 12499  0A75  35A5               	lslf	??_getAvgChannelCurrents^(0+128),f
 12500  0A76  0DA6               	rlf	(??_getAvgChannelCurrents^(0+128)+1),f
 12501  0A77  0B89               	decfsz	9,f
 12502  0A78  2A75               	goto	u5725
 12503  0A79  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12504  0A7A  0140               	movlb	0	; select bank0
 12505  0A7B  076E               	addwf	getAvgChannelCurrents@data,w
 12506  0A7C  0141               	movlb	1	; select bank1
 12507  0A7D  00A7               	movwf	(??_getAvgChannelCurrents+2)^(0+128)
 12508  0A7E  0826               	movf	(??_getAvgChannelCurrents+1)^(0+128),w
 12509  0A7F  0140               	movlb	0	; select bank0
 12510  0A80  3D6F               	addwfc	getAvgChannelCurrents@data+1,w
 12511  0A81  0141               	movlb	1	; select bank1
 12512  0A82  00A8               	movwf	(??_getAvgChannelCurrents+3)^(0+128)
 12513  0A83  0827               	movf	(??_getAvgChannelCurrents+2)^(0+128),w
 12514  0A84  3E2D               	addlw	45
 12515  0A85  00AF               	movwf	getAvgChannelCurrents@chData^(0+128)
 12516  0A86  3000               	movlw	0
 12517  0A87  3D28               	addwfc	(??_getAvgChannelCurrents+3)^(0+128),w
 12518  0A88  00B0               	movwf	(getAvgChannelCurrents@chData+1)^(0+128)
 12519                           
 12520                           ;main.c: 291:   if (samples++ < 20) {
 12521  0A89  086B               	movf	getAvgChannelCurrents@samples^(0+128),w
 12522  0A8A  0AEB               	incf	getAvgChannelCurrents@samples^(0+128),f
 12523  0A8B  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12524  0A8C  3014               	movlw	20
 12525  0A8D  0225               	subwf	??_getAvgChannelCurrents^(0+128),w
 12526  0A8E  1803               	skipnc
 12527  0A8F  2AC3               	goto	l4945
 12528                           
 12529                           ;main.c: 292:    if (channel == 2)
 12530  0A90  3002               	movlw	2
 12531  0A91  066C               	xorwf	getAvgChannelCurrents@channel^(0+128),w
 12532  0A92  1D03               	btfss	3,2
 12533  0A93  2A95               	goto	l4943
 12534                           
 12535                           ;main.c: 293:     __nop();
 12536  0A94  0000               	nop
 12537  0A95                     l4943:	
 12538                           
 12539                           ;main.c: 294:    adc = adcGetConversion(0b010001);
 12540  0A95  3011               	movlw	17
 12541  0A96  31A2  222D  318A   	fcall	_adcGetConversion
 12542  0A99  0140               	movlb	0	; select bank0
 12543  0A9A  0821               	movf	?_adcGetConversion+1,w
 12544  0A9B  0141               	movlb	1	; select bank1
 12545  0A9C  00AA               	movwf	(getAvgChannelCurrents@adc+1)^(0+128)
 12546  0A9D  0140               	movlb	0	; select bank0
 12547  0A9E  0820               	movf	?_adcGetConversion,w
 12548  0A9F  0141               	movlb	1	; select bank1
 12549  0AA0  00A9               	movwf	getAvgChannelCurrents@adc^(0+128)
 12550                           
 12551                           ;main.c: 295:    avg = ema(adc, avg, ( (uint32_t)(0.65 * 65535) ));
 12552  0AA1  082A               	movf	(getAvgChannelCurrents@adc+1)^(0+128),w
 12553  0AA2  0140               	movlb	0	; select bank0
 12554  0AA3  00AD               	movwf	ema@in+1
 12555  0AA4  0141               	movlb	1	; select bank1
 12556  0AA5  0829               	movf	getAvgChannelCurrents@adc^(0+128),w
 12557  0AA6  0140               	movlb	0	; select bank0
 12558  0AA7  00AC               	movwf	ema@in
 12559  0AA8  0142               	movlb	2	; select bank2
 12560  0AA9  0833               	movf	(getAvgChannelCurrents@avg+1)^(0+256),w
 12561  0AAA  0140               	movlb	0	; select bank0
 12562  0AAB  00AF               	movwf	ema@average+1
 12563  0AAC  0142               	movlb	2	; select bank2
 12564  0AAD  0832               	movf	getAvgChannelCurrents@avg^(0+256),w
 12565  0AAE  0140               	movlb	0	; select bank0
 12566  0AAF  00AE               	movwf	ema@average
 12567  0AB0  3000               	movlw	0
 12568  0AB1  00B3               	movwf	ema@alpha+3
 12569  0AB2  3000               	movlw	0
 12570  0AB3  00B2               	movwf	ema@alpha+2
 12571  0AB4  30A6               	movlw	166
 12572  0AB5  00B1               	movwf	ema@alpha+1
 12573  0AB6  3065               	movlw	101
 12574  0AB7  00B0               	movwf	ema@alpha
 12575  0AB8  31A6  26C3         	fcall	_ema
 12576  0ABA  0140               	movlb	0	; select bank0
 12577  0ABB  082D               	movf	?_ema+1,w
 12578  0ABC  0142               	movlb	2	; select bank2
 12579  0ABD  00B3               	movwf	(getAvgChannelCurrents@avg+1)^(0+256)
 12580  0ABE  0140               	movlb	0	; select bank0
 12581  0ABF  082C               	movf	?_ema,w
 12582  0AC0  0142               	movlb	2	; select bank2
 12583  0AC1  00B2               	movwf	getAvgChannelCurrents@avg^(0+256)
 12584                           
 12585                           ;main.c: 296:   } else {
 12586  0AC2  0008               	return
 12587  0AC3                     l4945:	
 12588                           
 12589                           ;main.c: 297:    setSwitch(channel, 0);
 12590  0AC3  0140               	movlb	0	; select bank0
 12591  0AC4  01A0               	clrf	setSwitch@state
 12592  0AC5  0141               	movlb	1	; select bank1
 12593  0AC6  086C               	movf	getAvgChannelCurrents@channel^(0+128),w
 12594  0AC7  31A2  22CF  318A   	fcall	_setSwitch
 12595                           
 12596                           ;main.c: 298:    current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 12597  0ACA  3045               	movlw	69
 12598  0ACB  0140               	movlb	0	; select bank0
 12599  0ACC  00D1               	movwf	___fldiv@a+3
 12600  0ACD  301F               	movlw	31
 12601  0ACE  00D0               	movwf	___fldiv@a+2
 12602  0ACF  30D8               	movlw	216
 12603  0AD0  00CF               	movwf	___fldiv@a+1
 12604  0AD1  3000               	movlw	0
 12605  0AD2  00CE               	movwf	___fldiv@a
 12606  0AD3  3040               	movlw	64
 12607  0AD4  00B7               	movwf	___flmul@b+3
 12608  0AD5  30A0               	movlw	160
 12609  0AD6  00B6               	movwf	___flmul@b+2
 12610  0AD7  3000               	movlw	0
 12611  0AD8  00B5               	movwf	___flmul@b+1
 12612  0AD9  3000               	movlw	0
 12613  0ADA  00B4               	movwf	___flmul@b
 12614  0ADB  0142               	movlb	2	; select bank2
 12615  0ADC  0832               	movf	getAvgChannelCurrents@avg^(0+256),w
 12616  0ADD  0140               	movlb	0	; select bank0
 12617  0ADE  00A6               	movwf	___xxtofl@val
 12618  0ADF  0142               	movlb	2	; select bank2
 12619  0AE0  0833               	movf	(getAvgChannelCurrents@avg+1)^(0+256),w
 12620  0AE1  0140               	movlb	0	; select bank0
 12621  0AE2  00A7               	movwf	___xxtofl@val+1
 12622  0AE3  01A8               	clrf	___xxtofl@val+2
 12623  0AE4  01A9               	clrf	___xxtofl@val+3
 12624  0AE5  3000               	movlw	0
 12625  0AE6  3190  2015  318A   	fcall	___xxtofl
 12626  0AE9  0140               	movlb	0	; select bank0
 12627  0AEA  0829               	movf	?___xxtofl+3,w
 12628  0AEB  00BB               	movwf	___flmul@a+3
 12629  0AEC  0828               	movf	?___xxtofl+2,w
 12630  0AED  00BA               	movwf	___flmul@a+2
 12631  0AEE  0827               	movf	?___xxtofl+1,w
 12632  0AEF  00B9               	movwf	___flmul@a+1
 12633  0AF0  0826               	movf	?___xxtofl,w
 12634  0AF1  00B8               	movwf	___flmul@a
 12635  0AF2  3185  2502  318A   	fcall	___flmul
 12636  0AF5  0140               	movlb	0	; select bank0
 12637  0AF6  0837               	movf	?___flmul+3,w
 12638  0AF7  00D5               	movwf	___fldiv@b+3
 12639  0AF8  0836               	movf	?___flmul+2,w
 12640  0AF9  00D4               	movwf	___fldiv@b+2
 12641  0AFA  0835               	movf	?___flmul+1,w
 12642  0AFB  00D3               	movwf	___fldiv@b+1
 12643  0AFC  0834               	movf	?___flmul,w
 12644  0AFD  00D2               	movwf	___fldiv@b
 12645  0AFE  3193  2374  318A   	fcall	___fldiv
 12646  0B01  0140               	movlb	0	; select bank0
 12647  0B02  0851               	movf	?___fldiv+3,w
 12648  0B03  0141               	movlb	1	; select bank1
 12649  0B04  00AE               	movwf	(getAvgChannelCurrents@current+3)^(0+128)
 12650  0B05  0140               	movlb	0	; select bank0
 12651  0B06  0850               	movf	?___fldiv+2,w
 12652  0B07  0141               	movlb	1	; select bank1
 12653  0B08  00AD               	movwf	(getAvgChannelCurrents@current+2)^(0+128)
 12654  0B09  0140               	movlb	0	; select bank0
 12655  0B0A  084F               	movf	?___fldiv+1,w
 12656  0B0B  0141               	movlb	1	; select bank1
 12657  0B0C  00AC               	movwf	(getAvgChannelCurrents@current+1)^(0+128)
 12658  0B0D  0140               	movlb	0	; select bank0
 12659  0B0E  084E               	movf	?___fldiv,w
 12660  0B0F  0141               	movlb	1	; select bank1
 12661  0B10  00AB               	movwf	getAvgChannelCurrents@current^(0+128)
 12662                           
 12663                           ;main.c: 300:    if (current < 0.05) {
 12664  0B11  082E               	movf	(getAvgChannelCurrents@current+3)^(0+128),w
 12665  0B12  0140               	movlb	0	; select bank0
 12666  0B13  00A3               	movwf	___flge@ff1+3
 12667  0B14  0141               	movlb	1	; select bank1
 12668  0B15  082D               	movf	(getAvgChannelCurrents@current+2)^(0+128),w
 12669  0B16  0140               	movlb	0	; select bank0
 12670  0B17  00A2               	movwf	___flge@ff1+2
 12671  0B18  0141               	movlb	1	; select bank1
 12672  0B19  082C               	movf	(getAvgChannelCurrents@current+1)^(0+128),w
 12673  0B1A  0140               	movlb	0	; select bank0
 12674  0B1B  00A1               	movwf	___flge@ff1+1
 12675  0B1C  0141               	movlb	1	; select bank1
 12676  0B1D  082B               	movf	getAvgChannelCurrents@current^(0+128),w
 12677  0B1E  0140               	movlb	0	; select bank0
 12678  0B1F  00A0               	movwf	___flge@ff1
 12679  0B20  303D               	movlw	61
 12680  0B21  00A7               	movwf	___flge@ff2+3
 12681  0B22  304C               	movlw	76
 12682  0B23  00A6               	movwf	___flge@ff2+2
 12683  0B24  30CC               	movlw	204
 12684  0B25  00A5               	movwf	___flge@ff2+1
 12685  0B26  30CD               	movlw	205
 12686  0B27  00A4               	movwf	___flge@ff2
 12687  0B28  3199  21F2  318A   	fcall	___flge
 12688  0B2B  1803               	btfsc	3,0
 12689  0B2C  2B48               	goto	l4953
 12690                           
 12691                           ;main.c: 301:     if (chData->status != CH_OPEN) {
 12692  0B2D  0141               	movlb	1	; select bank1
 12693  0B2E  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12694  0B2F  0086               	movwf	6
 12695  0B30  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12696  0B31  0087               	movwf	7
 12697  0B32  315F               	addfsr 1,31
 12698  0B33  3002               	movlw	2
 12699  0B34  0601               	xorwf	1,w
 12700  0B35  1903               	btfsc	3,2
 12701  0B36  2C04               	goto	l4973
 12702                           
 12703                           ;main.c: 302:      error(WARN_REMOVED);
 12704  0B37  3000               	movlw	0
 12705  0B38  3187  27FF  318A   	fcall	_error
 12706                           
 12707                           ;main.c: 303:      chData->status = CH_OPEN;
 12708  0B3B  0141               	movlb	1	; select bank1
 12709  0B3C  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12710  0B3D  3E1F               	addlw	31
 12711  0B3E  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12712  0B3F  3000               	movlw	0
 12713  0B40  3D30               	addwfc	(getAvgChannelCurrents@chData+1)^(0+128),w
 12714  0B41  00A6               	movwf	(??_getAvgChannelCurrents+1)^(0+128)
 12715  0B42  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12716  0B43  0086               	movwf	6
 12717  0B44  0826               	movf	(??_getAvgChannelCurrents+1)^(0+128),w
 12718  0B45  0087               	movwf	7
 12719  0B46  3002               	movlw	2
 12720  0B47  2C03               	goto	L9
 12721  0B48                     l4953:	
 12722  0B48  3040               	movlw	64
 12723  0B49  0140               	movlb	0	; select bank0
 12724  0B4A  00A3               	movwf	___flge@ff1+3
 12725  0B4B  3040               	movlw	64
 12726  0B4C  00A2               	movwf	___flge@ff1+2
 12727  0B4D  3000               	movlw	0
 12728  0B4E  00A1               	movwf	___flge@ff1+1
 12729  0B4F  3000               	movlw	0
 12730  0B50  00A0               	movwf	___flge@ff1
 12731  0B51  0141               	movlb	1	; select bank1
 12732  0B52  082E               	movf	(getAvgChannelCurrents@current+3)^(0+128),w
 12733  0B53  0140               	movlb	0	; select bank0
 12734  0B54  00A7               	movwf	___flge@ff2+3
 12735  0B55  0141               	movlb	1	; select bank1
 12736  0B56  082D               	movf	(getAvgChannelCurrents@current+2)^(0+128),w
 12737  0B57  0140               	movlb	0	; select bank0
 12738  0B58  00A6               	movwf	___flge@ff2+2
 12739  0B59  0141               	movlb	1	; select bank1
 12740  0B5A  082C               	movf	(getAvgChannelCurrents@current+1)^(0+128),w
 12741  0B5B  0140               	movlb	0	; select bank0
 12742  0B5C  00A5               	movwf	___flge@ff2+1
 12743  0B5D  0141               	movlb	1	; select bank1
 12744  0B5E  082B               	movf	getAvgChannelCurrents@current^(0+128),w
 12745  0B5F  0140               	movlb	0	; select bank0
 12746  0B60  00A4               	movwf	___flge@ff2
 12747  0B61  3199  21F2  318A   	fcall	___flge
 12748  0B64  1803               	btfsc	3,0
 12749  0B65  2B80               	goto	l4967
 12750                           
 12751                           ;main.c: 306:     error(WARN_SHORT);
 12752  0B66  3001               	movlw	1
 12753  0B67  3187  27FF  318A   	fcall	_error
 12754                           
 12755                           ;main.c: 307:     chData->status = CH_DISABLED;
 12756  0B6A  0141               	movlb	1	; select bank1
 12757  0B6B  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12758  0B6C  0086               	movwf	6
 12759  0B6D  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12760  0B6E  0087               	movwf	7
 12761  0B6F  315F               	addfsr 1,31
 12762  0B70  0181               	clrf	1
 12763                           
 12764                           ;main.c: 308:     if (!PORTCbits.RC2) {
 12765  0B71  0140               	movlb	0	; select bank0
 12766  0B72  190E               	btfsc	14,2	;volatile
 12767  0B73  2C04               	goto	l4973
 12768                           
 12769                           ;main.c: 309:      LATCbits.LATC3 = 0;
 12770  0B74  119A               	bcf	26,3	;volatile
 12771                           
 12772                           ;main.c: 310:      _delay((unsigned long)((5)*(4000000/4000.0)));
 12773  0B75  3007               	movlw	7
 12774  0B76  0141               	movlb	1	; select bank1
 12775  0B77  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12776  0B78  307D               	movlw	125
 12777  0B79                     u6457:	
 12778  0B79  0B89               	decfsz	9,f
 12779  0B7A  2B79               	goto	u6457
 12780  0B7B  0BA5               	decfsz	??_getAvgChannelCurrents^(0+128),f
 12781  0B7C  2B79               	goto	u6457
 12782                           
 12783                           ;main.c: 311:      LATCbits.LATC3 = 1;
 12784  0B7D  0140               	movlb	0	; select bank0
 12785  0B7E  159A               	bsf	26,3	;volatile
 12786  0B7F  2C04               	goto	l4973
 12787  0B80                     l4967:	
 12788                           
 12789                           ;main.c: 314:     chData->status = CH_ENABLED;
 12790  0B80  0141               	movlb	1	; select bank1
 12791  0B81  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12792  0B82  3E1F               	addlw	31
 12793  0B83  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12794  0B84  3000               	movlw	0
 12795  0B85  3D30               	addwfc	(getAvgChannelCurrents@chData+1)^(0+128),w
 12796  0B86  00A6               	movwf	(??_getAvgChannelCurrents+1)^(0+128)
 12797  0B87  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12798  0B88  0086               	movwf	6
 12799  0B89  0826               	movf	(??_getAvgChannelCurrents+1)^(0+128),w
 12800  0B8A  0087               	movwf	7
 12801  0B8B  3001               	movlw	1
 12802  0B8C  0081               	movwf	1
 12803                           
 12804                           ;main.c: 315:     chData->current = current;
 12805  0B8D  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12806  0B8E  0086               	movwf	6
 12807  0B8F  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12808  0B90  0087               	movwf	7
 12809  0B91  082B               	movf	getAvgChannelCurrents@current^(0+128),w
 12810  0B92  3FC0               	movwi [0]fsr1
 12811  0B93  082C               	movf	(getAvgChannelCurrents@current+1)^(0+128),w
 12812  0B94  3FC1               	movwi [1]fsr1
 12813  0B95  082D               	movf	(getAvgChannelCurrents@current+2)^(0+128),w
 12814  0B96  3FC2               	movwi [2]fsr1
 12815  0B97  082E               	movf	(getAvgChannelCurrents@current+3)^(0+128),w
 12816  0B98  3FC3               	movwi [3]fsr1
 12817                           
 12818                           ;main.c: 316:     chData->Pmax = data->voltage * current;
 12819  0B99  082E               	movf	(getAvgChannelCurrents@current+3)^(0+128),w
 12820  0B9A  0140               	movlb	0	; select bank0
 12821  0B9B  00B7               	movwf	___flmul@b+3
 12822  0B9C  0141               	movlb	1	; select bank1
 12823  0B9D  082D               	movf	(getAvgChannelCurrents@current+2)^(0+128),w
 12824  0B9E  0140               	movlb	0	; select bank0
 12825  0B9F  00B6               	movwf	___flmul@b+2
 12826  0BA0  0141               	movlb	1	; select bank1
 12827  0BA1  082C               	movf	(getAvgChannelCurrents@current+1)^(0+128),w
 12828  0BA2  0140               	movlb	0	; select bank0
 12829  0BA3  00B5               	movwf	___flmul@b+1
 12830  0BA4  0141               	movlb	1	; select bank1
 12831  0BA5  082B               	movf	getAvgChannelCurrents@current^(0+128),w
 12832  0BA6  0140               	movlb	0	; select bank0
 12833  0BA7  00B4               	movwf	___flmul@b
 12834  0BA8  086E               	movf	getAvgChannelCurrents@data,w
 12835  0BA9  0086               	movwf	6
 12836  0BAA  086F               	movf	getAvgChannelCurrents@data+1,w
 12837  0BAB  0087               	movwf	7
 12838  0BAC  3154               	addfsr 1,20
 12839  0BAD  3F40               	moviw [0]fsr1
 12840  0BAE  00B8               	movwf	___flmul@a
 12841  0BAF  3F41               	moviw [1]fsr1
 12842  0BB0  00B9               	movwf	___flmul@a+1
 12843  0BB1  3F42               	moviw [2]fsr1
 12844  0BB2  00BA               	movwf	___flmul@a+2
 12845  0BB3  3F43               	moviw [3]fsr1
 12846  0BB4  00BB               	movwf	___flmul@a+3
 12847  0BB5  3185  2502  318A   	fcall	___flmul
 12848  0BB8  0141               	movlb	1	; select bank1
 12849  0BB9  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12850  0BBA  0086               	movwf	6
 12851  0BBB  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12852  0BBC  0087               	movwf	7
 12853  0BBD  3144               	addfsr 1,4
 12854  0BBE  0140               	movlb	0	; select bank0
 12855  0BBF  0834               	movf	?___flmul,w
 12856  0BC0  3FC0               	movwi [0]fsr1
 12857  0BC1  0835               	movf	?___flmul+1,w
 12858  0BC2  3FC1               	movwi [1]fsr1
 12859  0BC3  0836               	movf	?___flmul+2,w
 12860  0BC4  3FC2               	movwi [2]fsr1
 12861  0BC5  0837               	movf	?___flmul+3,w
 12862  0BC6  3FC3               	movwi [3]fsr1
 12863                           
 12864                           ;main.c: 317:     chData->DCreq = chData->Pmax / chData->Preq;
 12865  0BC7  0141               	movlb	1	; select bank1
 12866  0BC8  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12867  0BC9  0086               	movwf	6
 12868  0BCA  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12869  0BCB  0087               	movwf	7
 12870  0BCC  3144               	addfsr 1,4
 12871  0BCD  3F40               	moviw [0]fsr1
 12872  0BCE  0140               	movlb	0	; select bank0
 12873  0BCF  00D2               	movwf	___fldiv@b
 12874  0BD0  3F41               	moviw [1]fsr1
 12875  0BD1  00D3               	movwf	___fldiv@b+1
 12876  0BD2  3F42               	moviw [2]fsr1
 12877  0BD3  00D4               	movwf	___fldiv@b+2
 12878  0BD4  3F43               	moviw [3]fsr1
 12879  0BD5  00D5               	movwf	___fldiv@b+3
 12880  0BD6  0141               	movlb	1	; select bank1
 12881  0BD7  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12882  0BD8  0086               	movwf	6
 12883  0BD9  0830               	movf	(getAvgChannelCurrents@chData+1)^(0+128),w
 12884  0BDA  0087               	movwf	7
 12885  0BDB  3148               	addfsr 1,8
 12886  0BDC  3F40               	moviw [0]fsr1
 12887  0BDD  0140               	movlb	0	; select bank0
 12888  0BDE  00CE               	movwf	___fldiv@a
 12889  0BDF  3F41               	moviw [1]fsr1
 12890  0BE0  00CF               	movwf	___fldiv@a+1
 12891  0BE1  3F42               	moviw [2]fsr1
 12892  0BE2  00D0               	movwf	___fldiv@a+2
 12893  0BE3  3F43               	moviw [3]fsr1
 12894  0BE4  00D1               	movwf	___fldiv@a+3
 12895  0BE5  3193  2374  318A   	fcall	___fldiv
 12896  0BE8  0140               	movlb	0	; select bank0
 12897  0BE9  0851               	movf	?___fldiv+3,w
 12898  0BEA  00EB               	movwf	___fltol@f1+3
 12899  0BEB  0850               	movf	?___fldiv+2,w
 12900  0BEC  00EA               	movwf	___fltol@f1+2
 12901  0BED  084F               	movf	?___fldiv+1,w
 12902  0BEE  00E9               	movwf	___fltol@f1+1
 12903  0BEF  084E               	movf	?___fldiv,w
 12904  0BF0  00E8               	movwf	___fltol@f1
 12905  0BF1  3199  2180  318A   	fcall	___fltol
 12906  0BF4  0140               	movlb	0	; select bank0
 12907  0BF5  0868               	movf	?___fltol,w
 12908  0BF6  0141               	movlb	1	; select bank1
 12909  0BF7  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12910  0BF8  082F               	movf	getAvgChannelCurrents@chData^(0+128),w
 12911  0BF9  3E14               	addlw	20
 12912  0BFA  00A6               	movwf	(??_getAvgChannelCurrents+1)^(0+128)
 12913  0BFB  3000               	movlw	0
 12914  0BFC  3D30               	addwfc	(getAvgChannelCurrents@chData+1)^(0+128),w
 12915  0BFD  00A7               	movwf	(??_getAvgChannelCurrents+2)^(0+128)
 12916  0BFE  0826               	movf	(??_getAvgChannelCurrents+1)^(0+128),w
 12917  0BFF  0086               	movwf	6
 12918  0C00  0827               	movf	(??_getAvgChannelCurrents+2)^(0+128),w
 12919  0C01  0087               	movwf	7
 12920  0C02  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12921  0C03                     L9:	
 12922  0C03  0081               	movwf	1
 12923  0C04                     l4973:	
 12924                           
 12925                           ;main.c: 321:    if (channel < 4 - 1) {
 12926  0C04  3003               	movlw	3
 12927  0C05  0141               	movlb	1	; select bank1
 12928  0C06  026C               	subwf	getAvgChannelCurrents@channel^(0+128),w
 12929  0C07  1803               	skipnc
 12930  0C08  2C19               	goto	l4983
 12931                           
 12932                           ;main.c: 322:     channel++;
 12933  0C09  3001               	movlw	1
 12934  0C0A  00A5               	movwf	??_getAvgChannelCurrents^(0+128)
 12935  0C0B  0825               	movf	??_getAvgChannelCurrents^(0+128),w
 12936  0C0C  07EC               	addwf	getAvgChannelCurrents@channel^(0+128),f
 12937                           
 12938                           ;main.c: 323:     samples = 0;
 12939  0C0D  01EB               	clrf	getAvgChannelCurrents@samples^(0+128)
 12940                           
 12941                           ;main.c: 324:     avg = 0;
 12942  0C0E  0142               	movlb	2	; select bank2
 12943  0C0F  01B2               	clrf	getAvgChannelCurrents@avg^(0+256)
 12944  0C10  01B3               	clrf	(getAvgChannelCurrents@avg+1)^(0+256)
 12945                           
 12946                           ;main.c: 325:     setSwitch(channel, 1);
 12947  0C11  0140               	movlb	0	; select bank0
 12948  0C12  01A0               	clrf	setSwitch@state
 12949  0C13  0AA0               	incf	setSwitch@state,f
 12950  0C14  0141               	movlb	1	; select bank1
 12951  0C15  086C               	movf	getAvgChannelCurrents@channel^(0+128),w
 12952  0C16  31A2  22CF         	fcall	_setSwitch
 12953                           
 12954                           ;main.c: 326:    } else {
 12955  0C18  0008               	return
 12956  0C19                     l4983:	
 12957                           
 12958                           ;main.c: 327:     busy = 0;
 12959  0C19  01EA               	clrf	getAvgChannelCurrents@busy^(0+128)
 12960  0C1A  0008               	return
 12961  0C1B                     __end_of_getAvgChannelCurrents:	
 12962                           
 12963                           	psect	text37
 12964  22CF                     __ptext37:	
 12965 ;; *************** function _setSwitch *****************
 12966 ;; Defined at:
 12967 ;;		line 193 in file "main.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;  channel         1    wreg     unsigned char 
 12970 ;;  state           1    0[BANK0 ] unsigned char 
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;  channel         1    1[BANK0 ] unsigned char 
 12973 ;; Return value:  Size  Location     Type
 12974 ;;                  1    wreg      void 
 12975 ;; Registers used:
 12976 ;;		wreg, status,2, status,0
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12982 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12985 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12986 ;;Total ram usage:        2 bytes
 12987 ;; Hardware stack levels used:    1
 12988 ;; Hardware stack levels required when called:    3
 12989 ;; This function calls:
 12990 ;;		Nothing
 12991 ;; This function is called by:
 12992 ;;		_getAvgChannelCurrents
 12993 ;; This function uses a non-reentrant model
 12994 ;;
 12995                           
 12996                           
 12997                           ;psect for function _setSwitch
 12998  22CF                     _setSwitch:	
 12999                           
 13000                           ;incstack = 0
 13001                           ; Regs used in _setSwitch: [wreg+status,2+status,0]
 13002                           ;setSwitch@channel stored from wreg
 13003  22CF  0140               	movlb	0	; select bank0
 13004  22D0  00A1               	movwf	setSwitch@channel
 13005                           
 13006                           ;main.c: 193: void setSwitch(uint8_t channel, uint8_t state);main.c: 194: {;main.c: 195:
      +                            if (channel == 0)
 13007  22D1  0821               	movf	setSwitch@channel,w
 13008  22D2  1D03               	btfss	3,2
 13009  22D3  2ADA               	goto	l4215
 13010                           
 13011                           ;main.c: 196:   LATAbits.LATA0 = state;
 13012  22D4  0C20               	rrf	setSwitch@state,w
 13013  22D5  1C03               	skipc
 13014  22D6  1018               	bcf	24,0	;volatile
 13015  22D7  1803               	skipnc
 13016  22D8  1418               	bsf	24,0	;volatile
 13017  22D9  0008               	return
 13018  22DA                     l4215:	
 13019  22DA  0321               	decf	setSwitch@channel,w
 13020  22DB  1D03               	btfss	3,2
 13021  22DC  2AE3               	goto	l4219
 13022                           
 13023                           ;main.c: 198:   LATAbits.LATA1 = state;
 13024  22DD  0C20               	rrf	setSwitch@state,w
 13025  22DE  1C03               	skipc
 13026  22DF  1098               	bcf	24,1	;volatile
 13027  22E0  1803               	skipnc
 13028  22E1  1498               	bsf	24,1	;volatile
 13029  22E2  0008               	return
 13030  22E3                     l4219:	
 13031  22E3  3002               	movlw	2
 13032  22E4  0621               	xorwf	setSwitch@channel,w
 13033  22E5  1D03               	btfss	3,2
 13034  22E6  2AED               	goto	l4223
 13035                           
 13036                           ;main.c: 200:   LATAbits.LATA2 = state;
 13037  22E7  0C20               	rrf	setSwitch@state,w
 13038  22E8  1C03               	skipc
 13039  22E9  1118               	bcf	24,2	;volatile
 13040  22EA  1803               	skipnc
 13041  22EB  1518               	bsf	24,2	;volatile
 13042  22EC  0008               	return
 13043  22ED                     l4223:	
 13044  22ED  3003               	movlw	3
 13045  22EE  0621               	xorwf	setSwitch@channel,w
 13046  22EF  1D03               	btfss	3,2
 13047  22F0  2AF7               	goto	l172
 13048                           
 13049                           ;main.c: 202:   LATAbits.LATA3 = state;
 13050  22F1  0C20               	rrf	setSwitch@state,w
 13051  22F2  1C03               	skipc
 13052  22F3  1198               	bcf	24,3	;volatile
 13053  22F4  1803               	skipnc
 13054  22F5  1598               	bsf	24,3	;volatile
 13055  22F6  0008               	return
 13056  22F7                     l172:	
 13057                           ;main.c: 203:  else
 13058                           
 13059                           
 13060                           ;main.c: 204:   __nop();
 13061  22F7  0000               	nop
 13062  22F8  0008               	return
 13063  22F9                     __end_of_setSwitch:	
 13064                           
 13065                           	psect	text38
 13066  07FF                     __ptext38:	
 13067 ;; *************** function _error *****************
 13068 ;; Defined at:
 13069 ;;		line 4 in file "error.c"
 13070 ;; Parameters:    Size  Location     Type
 13071 ;;  error           1    wreg     enum E7821
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;  error           1    0[COMMON] enum E7821
 13074 ;; Return value:  Size  Location     Type
 13075 ;;                  1    wreg      void 
 13076 ;; Registers used:
 13077 ;;		wreg
 13078 ;; Tracked objects:
 13079 ;;		On entry : 0/0
 13080 ;;		On exit  : 0/0
 13081 ;;		Unchanged: 0/0
 13082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13087 ;;Total ram usage:        0 bytes
 13088 ;; Hardware stack levels used:    1
 13089 ;; Hardware stack levels required when called:    3
 13090 ;; This function calls:
 13091 ;;		Nothing
 13092 ;; This function is called by:
 13093 ;;		_systemCheck
 13094 ;;		_getAvgChannelCurrents
 13095 ;; This function uses a non-reentrant model
 13096 ;;
 13097                           
 13098                           
 13099                           ;psect for function _error
 13100  07FF                     _error:	
 13101                           
 13102                           ;error.c: 4: void error(enum e_errorcode error);error.c: 5: {;error.c: 6:  return;
 13103                           
 13104                           ;incstack = 0
 13105                           ; Regs used in _error: [wreg]
 13106  07FF  0008               	return
 13107  0800                     __end_of_error:	
 13108                           
 13109                           	psect	text39
 13110  26C3                     __ptext39:	
 13111 ;; *************** function _ema *****************
 13112 ;; Defined at:
 13113 ;;		line 55 in file "common.c"
 13114 ;; Parameters:    Size  Location     Type
 13115 ;;  in              2   12[BANK0 ] unsigned short 
 13116 ;;  average         2   14[BANK0 ] unsigned short 
 13117 ;;  alpha           4   16[BANK0 ] unsigned long 
 13118 ;; Auto vars:     Size  Location     Type
 13119 ;;  tmp0            4   28[BANK0 ] unsigned long 
 13120 ;; Return value:  Size  Location     Type
 13121 ;;                  2   12[BANK0 ] unsigned short 
 13122 ;; Registers used:
 13123 ;;		wreg, status,2, status,0, pclath, cstack
 13124 ;; Tracked objects:
 13125 ;;		On entry : 0/0
 13126 ;;		On exit  : 0/0
 13127 ;;		Unchanged: 0/0
 13128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13129 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13130 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13131 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13132 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13133 ;;Total ram usage:       20 bytes
 13134 ;; Hardware stack levels used:    1
 13135 ;; Hardware stack levels required when called:    4
 13136 ;; This function calls:
 13137 ;;		___lmul
 13138 ;; This function is called by:
 13139 ;;		_getAvgChannelCurrents
 13140 ;;		_convertAnalogValues
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           
 13145                           ;psect for function _ema
 13146  26C3                     _ema:	
 13147                           
 13148                           ;common.c: 55: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 56:
      +                           {;common.c: 57:  uint32_t tmp0;;common.c: 58:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 13149                           
 13150                           ;incstack = 0
 13151                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 13152  26C3  0140               	movlb	0	; select bank0
 13153  26C4  082E               	movf	ema@average,w
 13154  26C5  00A0               	movwf	___lmul@multiplier
 13155  26C6  082F               	movf	ema@average+1,w
 13156  26C7  00A1               	movwf	___lmul@multiplier+1
 13157  26C8  01A2               	clrf	___lmul@multiplier+2
 13158  26C9  01A3               	clrf	___lmul@multiplier+3
 13159  26CA  3000               	movlw	0
 13160  26CB  00B4               	movwf	??_ema
 13161  26CC  3000               	movlw	0
 13162  26CD  00B5               	movwf	??_ema+1
 13163  26CE  3001               	movlw	1
 13164  26CF  00B6               	movwf	??_ema+2
 13165  26D0  3000               	movlw	0
 13166  26D1  00B7               	movwf	??_ema+3
 13167  26D2  0830               	movf	ema@alpha,w
 13168  26D3  02B4               	subwf	??_ema,f
 13169  26D4  0831               	movf	ema@alpha+1,w
 13170  26D5  3BB5               	subwfb	??_ema+1,f
 13171  26D6  0832               	movf	ema@alpha+2,w
 13172  26D7  3BB6               	subwfb	??_ema+2,f
 13173  26D8  0833               	movf	ema@alpha+3,w
 13174  26D9  3BB7               	subwfb	??_ema+3,f
 13175  26DA  0837               	movf	??_ema+3,w
 13176  26DB  00A7               	movwf	___lmul@multiplicand+3
 13177  26DC  0836               	movf	??_ema+2,w
 13178  26DD  00A6               	movwf	___lmul@multiplicand+2
 13179  26DE  0835               	movf	??_ema+1,w
 13180  26DF  00A5               	movwf	___lmul@multiplicand+1
 13181  26E0  0834               	movf	??_ema,w
 13182  26E1  00A4               	movwf	___lmul@multiplicand
 13183  26E2  31A3  2327  31A6   	fcall	___lmul
 13184  26E5  0140               	movlb	0	; select bank0
 13185  26E6  0820               	movf	?___lmul,w
 13186  26E7  00B8               	movwf	??_ema+4
 13187  26E8  0821               	movf	?___lmul+1,w
 13188  26E9  00B9               	movwf	??_ema+5
 13189  26EA  0822               	movf	?___lmul+2,w
 13190  26EB  00BA               	movwf	??_ema+6
 13191  26EC  0823               	movf	?___lmul+3,w
 13192  26ED  00BB               	movwf	??_ema+7
 13193  26EE  082C               	movf	ema@in,w
 13194  26EF  00A0               	movwf	___lmul@multiplier
 13195  26F0  082D               	movf	ema@in+1,w
 13196  26F1  00A1               	movwf	___lmul@multiplier+1
 13197  26F2  01A2               	clrf	___lmul@multiplier+2
 13198  26F3  01A3               	clrf	___lmul@multiplier+3
 13199  26F4  0833               	movf	ema@alpha+3,w
 13200  26F5  00A7               	movwf	___lmul@multiplicand+3
 13201  26F6  0832               	movf	ema@alpha+2,w
 13202  26F7  00A6               	movwf	___lmul@multiplicand+2
 13203  26F8  0831               	movf	ema@alpha+1,w
 13204  26F9  00A5               	movwf	___lmul@multiplicand+1
 13205  26FA  0830               	movf	ema@alpha,w
 13206  26FB  00A4               	movwf	___lmul@multiplicand
 13207  26FC  31A3  2327  31A6   	fcall	___lmul
 13208  26FF  0140               	movlb	0	; select bank0
 13209  2700  0820               	movf	?___lmul,w
 13210  2701  07B8               	addwf	??_ema+4,f
 13211  2702  0821               	movf	?___lmul+1,w
 13212  2703  3DB9               	addwfc	??_ema+5,f
 13213  2704  0822               	movf	?___lmul+2,w
 13214  2705  3DBA               	addwfc	??_ema+6,f
 13215  2706  0823               	movf	?___lmul+3,w
 13216  2707  3DBB               	addwfc	??_ema+7,f
 13217  2708  083B               	movf	??_ema+7,w
 13218  2709  00BF               	movwf	ema@tmp0+3
 13219  270A  083A               	movf	??_ema+6,w
 13220  270B  00BE               	movwf	ema@tmp0+2
 13221  270C  0839               	movf	??_ema+5,w
 13222  270D  00BD               	movwf	ema@tmp0+1
 13223  270E  0838               	movf	??_ema+4,w
 13224  270F  00BC               	movwf	ema@tmp0
 13225                           
 13226                           ;common.c: 59:  return(tmp0 + 32768) / 65536;
 13227  2710  3000               	movlw	0
 13228  2711  00B4               	movwf	??_ema
 13229  2712  3080               	movlw	128
 13230  2713  00B5               	movwf	??_ema+1
 13231  2714  3000               	movlw	0
 13232  2715  00B6               	movwf	??_ema+2
 13233  2716  3000               	movlw	0
 13234  2717  00B7               	movwf	??_ema+3
 13235  2718  083C               	movf	ema@tmp0,w
 13236  2719  07B4               	addwf	??_ema,f
 13237  271A  083D               	movf	ema@tmp0+1,w
 13238  271B  3DB5               	addwfc	??_ema+1,f
 13239  271C  083E               	movf	ema@tmp0+2,w
 13240  271D  3DB6               	addwfc	??_ema+2,f
 13241  271E  083F               	movf	ema@tmp0+3,w
 13242  271F  3DB7               	addwfc	??_ema+3,f
 13243  2720  3010               	movlw	16
 13244  2721                     u4725:	
 13245  2721  36B7               	lsrf	??_ema+3,f
 13246  2722  0CB6               	rrf	??_ema+2,f
 13247  2723  0CB5               	rrf	??_ema+1,f
 13248  2724  0CB4               	rrf	??_ema,f
 13249  2725  0B89               	decfsz	9,f
 13250  2726  2F21               	goto	u4725
 13251  2727  0835               	movf	??_ema+1,w
 13252  2728  00AD               	movwf	?_ema+1
 13253  2729  0834               	movf	??_ema,w
 13254  272A  00AC               	movwf	?_ema
 13255  272B  0008               	return
 13256  272C                     __end_of_ema:	
 13257                           
 13258                           	psect	text40
 13259  2327                     __ptext40:	
 13260 ;; *************** function ___lmul *****************
 13261 ;; Defined at:
 13262 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 13263 ;; Parameters:    Size  Location     Type
 13264 ;;  multiplier      4    0[BANK0 ] unsigned long 
 13265 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 13266 ;; Auto vars:     Size  Location     Type
 13267 ;;  product         4    8[BANK0 ] unsigned long 
 13268 ;; Return value:  Size  Location     Type
 13269 ;;                  4    0[BANK0 ] unsigned long 
 13270 ;; Registers used:
 13271 ;;		wreg, status,2, status,0
 13272 ;; Tracked objects:
 13273 ;;		On entry : 0/0
 13274 ;;		On exit  : 0/0
 13275 ;;		Unchanged: 0/0
 13276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13277 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13278 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13280 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13281 ;;Total ram usage:       12 bytes
 13282 ;; Hardware stack levels used:    1
 13283 ;; Hardware stack levels required when called:    3
 13284 ;; This function calls:
 13285 ;;		Nothing
 13286 ;; This function is called by:
 13287 ;;		_ema
 13288 ;; This function uses a non-reentrant model
 13289 ;;
 13290                           
 13291                           
 13292                           ;psect for function ___lmul
 13293  2327                     ___lmul:	
 13294                           
 13295                           ;incstack = 0
 13296                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13297  2327  3000               	movlw	0
 13298  2328  0140               	movlb	0	; select bank0
 13299  2329  00AB               	movwf	___lmul@product+3
 13300  232A  3000               	movlw	0
 13301  232B  00AA               	movwf	___lmul@product+2
 13302  232C  3000               	movlw	0
 13303  232D  00A9               	movwf	___lmul@product+1
 13304  232E  3000               	movlw	0
 13305  232F  00A8               	movwf	___lmul@product
 13306  2330                     l3495:	
 13307  2330  1C20               	btfss	___lmul@multiplier,0
 13308  2331  2B3A               	goto	l3499
 13309  2332  0824               	movf	___lmul@multiplicand,w
 13310  2333  07A8               	addwf	___lmul@product,f
 13311  2334  0825               	movf	___lmul@multiplicand+1,w
 13312  2335  3DA9               	addwfc	___lmul@product+1,f
 13313  2336  0826               	movf	___lmul@multiplicand+2,w
 13314  2337  3DAA               	addwfc	___lmul@product+2,f
 13315  2338  0827               	movf	___lmul@multiplicand+3,w
 13316  2339  3DAB               	addwfc	___lmul@product+3,f
 13317  233A                     l3499:	
 13318  233A  3001               	movlw	1
 13319  233B                     u3615:	
 13320  233B  35A4               	lslf	___lmul@multiplicand,f
 13321  233C  0DA5               	rlf	___lmul@multiplicand+1,f
 13322  233D  0DA6               	rlf	___lmul@multiplicand+2,f
 13323  233E  0DA7               	rlf	___lmul@multiplicand+3,f
 13324  233F  0B89               	decfsz	9,f
 13325  2340  2B3B               	goto	u3615
 13326  2341  3001               	movlw	1
 13327  2342                     u3625:	
 13328  2342  36A3               	lsrf	___lmul@multiplier+3,f
 13329  2343  0CA2               	rrf	___lmul@multiplier+2,f
 13330  2344  0CA1               	rrf	___lmul@multiplier+1,f
 13331  2345  0CA0               	rrf	___lmul@multiplier,f
 13332  2346  0B89               	decfsz	9,f
 13333  2347  2B42               	goto	u3625
 13334  2348  0823               	movf	___lmul@multiplier+3,w
 13335  2349  0422               	iorwf	___lmul@multiplier+2,w
 13336  234A  0421               	iorwf	___lmul@multiplier+1,w
 13337  234B  0420               	iorwf	___lmul@multiplier,w
 13338  234C  1D03               	skipz
 13339  234D  2B30               	goto	l3495
 13340  234E  082B               	movf	___lmul@product+3,w
 13341  234F  00A3               	movwf	?___lmul+3
 13342  2350  082A               	movf	___lmul@product+2,w
 13343  2351  00A2               	movwf	?___lmul+2
 13344  2352  0829               	movf	___lmul@product+1,w
 13345  2353  00A1               	movwf	?___lmul+1
 13346  2354  0828               	movf	___lmul@product,w
 13347  2355  00A0               	movwf	?___lmul
 13348  2356  0008               	return
 13349  2357                     __end_of___lmul:	
 13350                           
 13351                           	psect	text41
 13352  222D                     __ptext41:	
 13353 ;; *************** function _adcGetConversion *****************
 13354 ;; Defined at:
 13355 ;;		line 264 in file "main.c"
 13356 ;; Parameters:    Size  Location     Type
 13357 ;;  channel         1    wreg     unsigned char 
 13358 ;; Auto vars:     Size  Location     Type
 13359 ;;  channel         1    3[BANK0 ] unsigned char 
 13360 ;; Return value:  Size  Location     Type
 13361 ;;                  2    0[BANK0 ] unsigned short 
 13362 ;; Registers used:
 13363 ;;		wreg, status,2, status,0
 13364 ;; Tracked objects:
 13365 ;;		On entry : 0/0
 13366 ;;		On exit  : 0/0
 13367 ;;		Unchanged: 0/0
 13368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13372 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13373 ;;Total ram usage:        4 bytes
 13374 ;; Hardware stack levels used:    1
 13375 ;; Hardware stack levels required when called:    3
 13376 ;; This function calls:
 13377 ;;		Nothing
 13378 ;; This function is called by:
 13379 ;;		_getAvgChannelCurrents
 13380 ;;		_convertAnalogValues
 13381 ;; This function uses a non-reentrant model
 13382 ;;
 13383                           
 13384                           
 13385                           ;psect for function _adcGetConversion
 13386  222D                     _adcGetConversion:	
 13387                           
 13388                           ;incstack = 0
 13389                           ; Regs used in _adcGetConversion: [wreg+status,2+status,0]
 13390                           ;adcGetConversion@channel stored from wreg
 13391  222D  0140               	movlb	0	; select bank0
 13392  222E  00A3               	movwf	adcGetConversion@channel
 13393                           
 13394                           ;main.c: 264: uint16_t adcGetConversion(uint8_t channel);main.c: 265: {;main.c: 266:  AD
      +                          CON0bits.CHS = channel;
 13395  222F  0823               	movf	adcGetConversion@channel,w
 13396  2230  00A2               	movwf	??_adcGetConversion
 13397  2231  0DA2               	rlf	??_adcGetConversion,f
 13398  2232  0DA2               	rlf	??_adcGetConversion,f
 13399  2233  0141               	movlb	1	; select bank1
 13400  2234  081D               	movf	29,w	;volatile
 13401  2235  0140               	movlb	0	; select bank0
 13402  2236  0622               	xorwf	??_adcGetConversion,w
 13403  2237  3903               	andlw	-253
 13404  2238  0622               	xorwf	??_adcGetConversion,w
 13405  2239  0141               	movlb	1	; select bank1
 13406  223A  009D               	movwf	29	;volatile
 13407                           
 13408                           ;main.c: 267:  _delay((unsigned long)((5)*(4000000/4000000.0)));
 13409  223B  3200               	nop2	;2 cycle nop
 13410  223C  3200               	nop2	;2 cycle nop
 13411  223D  0000               	nop
 13412                           
 13413                           ;main.c: 268:  ADCON0bits.GO = 1;
 13414  223E  0141               	movlb	1	; select bank1
 13415  223F  149D               	bsf	29,1	;volatile
 13416  2240                     l201:	
 13417                           ;main.c: 269:  while (ADCON0bits.GO);
 13418                           
 13419  2240  189D               	btfsc	29,1	;volatile
 13420  2241  2A40               	goto	l201
 13421                           
 13422                           ;main.c: 270:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 13423  2242  081C               	movf	28,w	;volatile
 13424  2243  0140               	movlb	0	; select bank0
 13425  2244  00A1               	movwf	?_adcGetConversion+1
 13426  2245  0141               	movlb	1	; select bank1
 13427  2246  081B               	movf	27,w	;volatile
 13428  2247  0140               	movlb	0	; select bank0
 13429  2248  00A0               	movwf	?_adcGetConversion
 13430  2249  0008               	return
 13431  224A                     __end_of_adcGetConversion:	
 13432                           
 13433                           	psect	text42
 13434  1980                     __ptext42:	
 13435 ;; *************** function ___fltol *****************
 13436 ;; Defined at:
 13437 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 13438 ;; Parameters:    Size  Location     Type
 13439 ;;  f1              4   72[BANK0 ] unsigned short 
 13440 ;; Auto vars:     Size  Location     Type
 13441 ;;  exp1            1   77[BANK0 ] unsigned char 
 13442 ;;  sign1           1   76[BANK0 ] unsigned char 
 13443 ;; Return value:  Size  Location     Type
 13444 ;;                  4   72[BANK0 ] long 
 13445 ;; Registers used:
 13446 ;;		wreg, status,2, status,0
 13447 ;; Tracked objects:
 13448 ;;		On entry : 0/0
 13449 ;;		On exit  : 0/0
 13450 ;;		Unchanged: 0/0
 13451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13452 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13453 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13454 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13455 ;;      Totals:         0       6       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13456 ;;Total ram usage:       11 bytes
 13457 ;; Hardware stack levels used:    1
 13458 ;; Hardware stack levels required when called:    3
 13459 ;; This function calls:
 13460 ;;		Nothing
 13461 ;; This function is called by:
 13462 ;;		_getAvgChannelCurrents
 13463 ;;		_channelView
 13464 ;;		_ftoa
 13465 ;; This function uses a non-reentrant model
 13466 ;;
 13467                           
 13468                           
 13469                           ;psect for function ___fltol
 13470  1980                     ___fltol:	
 13471                           
 13472                           ;incstack = 0
 13473                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 13474  1980  1003               	clrc
 13475  1981  0140               	movlb	0	; select bank0
 13476  1982  0D6A               	rlf	___fltol@f1+2,w
 13477  1983  0D6B               	rlf	___fltol@f1+3,w
 13478  1984  0141               	movlb	1	; select bank1
 13479  1985  00A0               	movwf	??___fltol^(0+128)
 13480  1986  0820               	movf	??___fltol^(0+128),w
 13481  1987  0140               	movlb	0	; select bank0
 13482  1988  00ED               	movwf	___fltol@exp1
 13483  1989  086D               	movf	___fltol@exp1,w
 13484  198A  1D03               	btfss	3,2
 13485  198B  2995               	goto	l3615
 13486  198C                     l3611:	
 13487  198C  3000               	movlw	0
 13488  198D  00EB               	movwf	?___fltol+3
 13489  198E  3000               	movlw	0
 13490  198F  00EA               	movwf	?___fltol+2
 13491  1990  3000               	movlw	0
 13492  1991  00E9               	movwf	?___fltol+1
 13493  1992  3000               	movlw	0
 13494  1993  00E8               	movwf	?___fltol
 13495  1994  0008               	return
 13496  1995                     l3615:	
 13497  1995  0868               	movf	___fltol@f1,w
 13498  1996  0141               	movlb	1	; select bank1
 13499  1997  00A0               	movwf	??___fltol^(0+128)
 13500  1998  0140               	movlb	0	; select bank0
 13501  1999  0869               	movf	___fltol@f1+1,w
 13502  199A  0141               	movlb	1	; select bank1
 13503  199B  00A1               	movwf	(??___fltol^(0+128)+1)
 13504  199C  0140               	movlb	0	; select bank0
 13505  199D  086A               	movf	___fltol@f1+2,w
 13506  199E  0141               	movlb	1	; select bank1
 13507  199F  00A2               	movwf	(??___fltol^(0+128)+2)
 13508  19A0  0140               	movlb	0	; select bank0
 13509  19A1  086B               	movf	___fltol@f1+3,w
 13510  19A2  0141               	movlb	1	; select bank1
 13511  19A3  00A3               	movwf	(??___fltol^(0+128)+3)
 13512  19A4  301F               	movlw	31
 13513  19A5                     u3895:	
 13514  19A5  36A3               	lsrf	(??___fltol^(0+128)+3),f
 13515  19A6  0CA2               	rrf	(??___fltol^(0+128)+2),f
 13516  19A7  0CA1               	rrf	(??___fltol^(0+128)+1),f
 13517  19A8  0CA0               	rrf	??___fltol^(0+128),f
 13518  19A9  0B89               	decfsz	9,f
 13519  19AA  29A5               	goto	u3895
 13520  19AB  0820               	movf	??___fltol^(0+128),w
 13521  19AC  00A4               	movwf	(??___fltol+4)^(0+128)
 13522  19AD  0824               	movf	(??___fltol+4)^(0+128),w
 13523  19AE  0140               	movlb	0	; select bank0
 13524  19AF  00EC               	movwf	___fltol@sign1
 13525  19B0  17EA               	bsf	___fltol@f1+2,7
 13526  19B1  30FF               	movlw	255
 13527  19B2  05E8               	andwf	___fltol@f1,f
 13528  19B3  30FF               	movlw	255
 13529  19B4  05E9               	andwf	___fltol@f1+1,f
 13530  19B5  30FF               	movlw	255
 13531  19B6  05EA               	andwf	___fltol@f1+2,f
 13532  19B7  3000               	movlw	0
 13533  19B8  05EB               	andwf	___fltol@f1+3,f
 13534  19B9  3096               	movlw	150
 13535  19BA  02ED               	subwf	___fltol@exp1,f
 13536  19BB  1FED               	btfss	___fltol@exp1,7
 13537  19BC  29D2               	goto	l3633
 13538  19BD  086D               	movf	___fltol@exp1,w
 13539  19BE  3A80               	xorlw	128
 13540  19BF  3E97               	addlw	151
 13541  19C0  1C03               	btfss	3,0
 13542  19C1  298C               	goto	l3611
 13543  19C2                     l3631:	
 13544  19C2  3001               	movlw	1
 13545  19C3                     u3925:	
 13546  19C3  36EB               	lsrf	___fltol@f1+3,f
 13547  19C4  0CEA               	rrf	___fltol@f1+2,f
 13548  19C5  0CE9               	rrf	___fltol@f1+1,f
 13549  19C6  0CE8               	rrf	___fltol@f1,f
 13550  19C7  0B89               	decfsz	9,f
 13551  19C8  29C3               	goto	u3925
 13552  19C9  3001               	movlw	1
 13553  19CA  0141               	movlb	1	; select bank1
 13554  19CB  00A0               	movwf	??___fltol^(0+128)
 13555  19CC  0820               	movf	??___fltol^(0+128),w
 13556  19CD  0140               	movlb	0	; select bank0
 13557  19CE  07ED               	addwf	___fltol@exp1,f
 13558  19CF  1903               	btfsc	3,2
 13559  19D0  29E3               	goto	l3641
 13560  19D1  29C2               	goto	l3631
 13561  19D2                     l3633:	
 13562  19D2  3020               	movlw	32
 13563  19D3  026D               	subwf	___fltol@exp1,w
 13564  19D4  1803               	btfsc	3,0
 13565  19D5  298C               	goto	l3611
 13566  19D6                     l970:	
 13567  19D6  086D               	movf	___fltol@exp1,w
 13568  19D7  1903               	btfsc	3,2
 13569  19D8  29E3               	goto	l3641
 13570  19D9  3001               	movlw	1
 13571  19DA                     u3955:	
 13572  19DA  35E8               	lslf	___fltol@f1,f
 13573  19DB  0DE9               	rlf	___fltol@f1+1,f
 13574  19DC  0DEA               	rlf	___fltol@f1+2,f
 13575  19DD  0DEB               	rlf	___fltol@f1+3,f
 13576  19DE  0B89               	decfsz	9,f
 13577  19DF  29DA               	goto	u3955
 13578  19E0  3001               	movlw	1
 13579  19E1  02ED               	subwf	___fltol@exp1,f
 13580  19E2  29D6               	goto	l970
 13581  19E3                     l3641:	
 13582  19E3  086C               	movf	___fltol@sign1,w
 13583  19E4  1903               	btfsc	3,2
 13584  19E5  0008               	return
 13585  19E6  09E8               	comf	___fltol@f1,f
 13586  19E7  09E9               	comf	___fltol@f1+1,f
 13587  19E8  09EA               	comf	___fltol@f1+2,f
 13588  19E9  09EB               	comf	___fltol@f1+3,f
 13589  19EA  0AE8               	incf	___fltol@f1,f
 13590  19EB  1903               	skipnz
 13591  19EC  0AE9               	incf	___fltol@f1+1,f
 13592  19ED  1903               	skipnz
 13593  19EE  0AEA               	incf	___fltol@f1+2,f
 13594  19EF  1903               	skipnz
 13595  19F0  0AEB               	incf	___fltol@f1+3,f
 13596  19F1  0008               	return
 13597  19F2                     __end_of___fltol:	
 13598                           
 13599                           	psect	text43
 13600  1208                     __ptext43:	
 13601 ;; *************** function _checkSensor *****************
 13602 ;; Defined at:
 13603 ;;		line 211 in file "main.c"
 13604 ;; Parameters:    Size  Location     Type
 13605 ;;  data            2   20[BANK0 ] PTR struct .
 13606 ;;		 -> data(173), 
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;  dp              1   26[BANK0 ] PTR struct .
 13609 ;;		 -> dataPacket(15), 
 13610 ;; Return value:  Size  Location     Type
 13611 ;;                  1    wreg      void 
 13612 ;; Registers used:
 13613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13614 ;; Tracked objects:
 13615 ;;		On entry : 0/0
 13616 ;;		On exit  : 0/0
 13617 ;;		Unchanged: 0/0
 13618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13619 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13620 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13621 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13622 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13623 ;;Total ram usage:        7 bytes
 13624 ;; Hardware stack levels used:    1
 13625 ;; Hardware stack levels required when called:    5
 13626 ;; This function calls:
 13627 ;;		___flge
 13628 ;;		___xxtofl
 13629 ;;		_getDataPacket
 13630 ;;		_timeNow
 13631 ;;		_timeSince
 13632 ;;		_uartIsDataReady
 13633 ;;		_uartReset
 13634 ;;		_uartSendByte
 13635 ;; This function is called by:
 13636 ;;		_main
 13637 ;; This function uses a non-reentrant model
 13638 ;;
 13639                           
 13640                           
 13641                           ;psect for function _checkSensor
 13642  1208                     _checkSensor:	
 13643                           
 13644                           ;main.c: 211: void checkSensor(t_globalData *data);main.c: 212: {;main.c: 213:  t_dataPa
      +                          cket *dp;;main.c: 214:  static uint32_t sensorUpdateInterval = 0;;main.c: 215:  static u
      +                          int32_t sensorTimeout = 0;;main.c: 216:  static uint8_t state = 0;;main.c: 219:  if ((da
      +                          ta->tempAux < -30) || (data->tempAux > 100)) {
 13645                           
 13646                           ;incstack = 0
 13647                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13648  1208  0140               	movlb	0	; select bank0
 13649  1209  0834               	movf	checkSensor@data,w
 13650  120A  0086               	movwf	6
 13651  120B  0835               	movf	checkSensor@data+1,w
 13652  120C  0087               	movwf	7
 13653  120D  3150               	addfsr 1,16
 13654  120E  3F40               	moviw [0]fsr1
 13655  120F  00A0               	movwf	___flge@ff1
 13656  1210  3F41               	moviw [1]fsr1
 13657  1211  00A1               	movwf	___flge@ff1+1
 13658  1212  3F42               	moviw [2]fsr1
 13659  1213  00A2               	movwf	___flge@ff1+2
 13660  1214  3F43               	moviw [3]fsr1
 13661  1215  00A3               	movwf	___flge@ff1+3
 13662  1216  30C1               	movlw	193
 13663  1217  00A7               	movwf	___flge@ff2+3
 13664  1218  30F0               	movlw	240
 13665  1219  00A6               	movwf	___flge@ff2+2
 13666  121A  3000               	movlw	0
 13667  121B  00A5               	movwf	___flge@ff2+1
 13668  121C  3000               	movlw	0
 13669  121D  00A4               	movwf	___flge@ff2
 13670  121E  3199  21F2  3192   	fcall	___flge
 13671  1221  1C03               	btfss	3,0
 13672  1222  2A3E               	goto	l4789
 13673  1223  3042               	movlw	66
 13674  1224  0140               	movlb	0	; select bank0
 13675  1225  00A3               	movwf	___flge@ff1+3
 13676  1226  30C8               	movlw	200
 13677  1227  00A2               	movwf	___flge@ff1+2
 13678  1228  3000               	movlw	0
 13679  1229  00A1               	movwf	___flge@ff1+1
 13680  122A  3000               	movlw	0
 13681  122B  00A0               	movwf	___flge@ff1
 13682  122C  0834               	movf	checkSensor@data,w
 13683  122D  0086               	movwf	6
 13684  122E  0835               	movf	checkSensor@data+1,w
 13685  122F  0087               	movwf	7
 13686  1230  3150               	addfsr 1,16
 13687  1231  3F40               	moviw [0]fsr1
 13688  1232  00A4               	movwf	___flge@ff2
 13689  1233  3F41               	moviw [1]fsr1
 13690  1234  00A5               	movwf	___flge@ff2+1
 13691  1235  3F42               	moviw [2]fsr1
 13692  1236  00A6               	movwf	___flge@ff2+2
 13693  1237  3F43               	moviw [3]fsr1
 13694  1238  00A7               	movwf	___flge@ff2+3
 13695  1239  3199  21F2  3192   	fcall	___flge
 13696  123C  1803               	btfsc	3,0
 13697  123D  2A47               	goto	l4791
 13698  123E                     l4789:	
 13699                           
 13700                           ;main.c: 220:   data->status.AUX_SENSOR_OK = 0;
 13701  123E  0140               	movlb	0	; select bank0
 13702  123F  0834               	movf	checkSensor@data,w
 13703  1240  3E2C               	addlw	44
 13704  1241  0086               	movwf	6
 13705  1242  3000               	movlw	0
 13706  1243  3D35               	addwfc	checkSensor@data+1,w
 13707  1244  0087               	movwf	7
 13708  1245  1101               	bcf	1,2
 13709                           
 13710                           ;main.c: 221:  } else
 13711  1246  2B61               	goto	l4831
 13712  1247                     l4791:	
 13713                           
 13714                           ;main.c: 222:   data->status.AUX_SENSOR_OK = 1;
 13715  1247  0140               	movlb	0	; select bank0
 13716  1248  0834               	movf	checkSensor@data,w
 13717  1249  3E2C               	addlw	44
 13718  124A  0086               	movwf	6
 13719  124B  3000               	movlw	0
 13720  124C  3D35               	addwfc	checkSensor@data+1,w
 13721  124D  0087               	movwf	7
 13722  124E  1501               	bsf	1,2
 13723  124F  2B61               	goto	l4831
 13724  1250                     l4793:	
 13725                           
 13726                           ;main.c: 227:   if (timeSince(sensorUpdateInterval) >= 50) {
 13727  1250  0142               	movlb	2	; select bank2
 13728  1251  082B               	movf	(checkSensor@sensorUpdateInterval+3)^(0+256),w
 13729  1252  0140               	movlb	0	; select bank0
 13730  1253  00A7               	movwf	timeSince@since+3
 13731  1254  0142               	movlb	2	; select bank2
 13732  1255  082A               	movf	(checkSensor@sensorUpdateInterval+2)^(0+256),w
 13733  1256  0140               	movlb	0	; select bank0
 13734  1257  00A6               	movwf	timeSince@since+2
 13735  1258  0142               	movlb	2	; select bank2
 13736  1259  0829               	movf	(checkSensor@sensorUpdateInterval+1)^(0+256),w
 13737  125A  0140               	movlb	0	; select bank0
 13738  125B  00A5               	movwf	timeSince@since+1
 13739  125C  0142               	movlb	2	; select bank2
 13740  125D  0828               	movf	checkSensor@sensorUpdateInterval^(0+256),w
 13741  125E  0140               	movlb	0	; select bank0
 13742  125F  00A4               	movwf	timeSince@since
 13743  1260  31A6  2615  3192   	fcall	_timeSince
 13744  1263  0140               	movlb	0	; select bank0
 13745  1264  0827               	movf	?_timeSince+3,w
 13746  1265  1D03               	btfss	3,2
 13747  1266  2A71               	goto	l4795
 13748  1267  0826               	movf	?_timeSince+2,w
 13749  1268  1D03               	btfss	3,2
 13750  1269  2A71               	goto	l4795
 13751  126A  0825               	movf	?_timeSince+1,w
 13752  126B  1D03               	btfss	3,2
 13753  126C  2A71               	goto	l4795
 13754  126D  3032               	movlw	50
 13755  126E  0224               	subwf	?_timeSince,w
 13756  126F  1C03               	btfss	3,0
 13757  1270  0008               	return
 13758  1271                     l4795:	
 13759                           
 13760                           ;main.c: 228:    sensorUpdateInterval = sensorTimeout = timeNow();
 13761  1271  31A2  2200  3192   	fcall	_timeNow
 13762  1274  0140               	movlb	0	; select bank0
 13763  1275  0823               	movf	?_timeNow+3,w
 13764  1276  0142               	movlb	2	; select bank2
 13765  1277  00A7               	movwf	(checkSensor@sensorTimeout+3)^(0+256)
 13766  1278  0140               	movlb	0	; select bank0
 13767  1279  0822               	movf	?_timeNow+2,w
 13768  127A  0142               	movlb	2	; select bank2
 13769  127B  00A6               	movwf	(checkSensor@sensorTimeout+2)^(0+256)
 13770  127C  0140               	movlb	0	; select bank0
 13771  127D  0821               	movf	?_timeNow+1,w
 13772  127E  0142               	movlb	2	; select bank2
 13773  127F  00A5               	movwf	(checkSensor@sensorTimeout+1)^(0+256)
 13774  1280  0140               	movlb	0	; select bank0
 13775  1281  0820               	movf	?_timeNow,w
 13776  1282  0142               	movlb	2	; select bank2
 13777  1283  00A4               	movwf	checkSensor@sensorTimeout^(0+256)
 13778  1284  0827               	movf	(checkSensor@sensorTimeout+3)^(0+256),w
 13779  1285  00AB               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+256)
 13780  1286  0826               	movf	(checkSensor@sensorTimeout+2)^(0+256),w
 13781  1287  00AA               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+256)
 13782  1288  0825               	movf	(checkSensor@sensorTimeout+1)^(0+256),w
 13783  1289  00A9               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+256)
 13784  128A  0824               	movf	checkSensor@sensorTimeout^(0+256),w
 13785  128B  00A8               	movwf	checkSensor@sensorUpdateInterval^(0+256)
 13786                           
 13787                           ;main.c: 229:    uartSendByte('?');
 13788  128C  303F               	movlw	63
 13789  128D  31A1  21A8         	fcall	_uartSendByte
 13790                           
 13791                           ;main.c: 230:    state = 1;
 13792  128F  0141               	movlb	1	; select bank1
 13793  1290  01ED               	clrf	checkSensor@state^(0+128)
 13794  1291  0AED               	incf	checkSensor@state^(0+128),f
 13795  1292  0008               	return
 13796  1293                     l4801:	
 13797                           
 13798                           ;main.c: 235:   if (timeSince(sensorTimeout) > 20) {
 13799  1293  0142               	movlb	2	; select bank2
 13800  1294  0827               	movf	(checkSensor@sensorTimeout+3)^(0+256),w
 13801  1295  0140               	movlb	0	; select bank0
 13802  1296  00A7               	movwf	timeSince@since+3
 13803  1297  0142               	movlb	2	; select bank2
 13804  1298  0826               	movf	(checkSensor@sensorTimeout+2)^(0+256),w
 13805  1299  0140               	movlb	0	; select bank0
 13806  129A  00A6               	movwf	timeSince@since+2
 13807  129B  0142               	movlb	2	; select bank2
 13808  129C  0825               	movf	(checkSensor@sensorTimeout+1)^(0+256),w
 13809  129D  0140               	movlb	0	; select bank0
 13810  129E  00A5               	movwf	timeSince@since+1
 13811  129F  0142               	movlb	2	; select bank2
 13812  12A0  0824               	movf	checkSensor@sensorTimeout^(0+256),w
 13813  12A1  0140               	movlb	0	; select bank0
 13814  12A2  00A4               	movwf	timeSince@since
 13815  12A3  31A6  2615  3192   	fcall	_timeSince
 13816  12A6  0140               	movlb	0	; select bank0
 13817  12A7  0827               	movf	?_timeSince+3,w
 13818  12A8  1D03               	btfss	3,2
 13819  12A9  2AB4               	goto	l4803
 13820  12AA  0826               	movf	?_timeSince+2,w
 13821  12AB  1D03               	btfss	3,2
 13822  12AC  2AB4               	goto	l4803
 13823  12AD  0825               	movf	?_timeSince+1,w
 13824  12AE  1D03               	btfss	3,2
 13825  12AF  2AB4               	goto	l4803
 13826  12B0  3015               	movlw	21
 13827  12B1  0224               	subwf	?_timeSince,w
 13828  12B2  1C03               	btfss	3,0
 13829  12B3  2AC0               	goto	l4809
 13830  12B4                     l4803:	
 13831                           
 13832                           ;main.c: 236:    data->status.SENSOR_OK = 0;
 13833  12B4  0834               	movf	checkSensor@data,w
 13834  12B5  3E2C               	addlw	44
 13835  12B6  0086               	movwf	6
 13836  12B7  3000               	movlw	0
 13837  12B8  3D35               	addwfc	checkSensor@data+1,w
 13838  12B9  0087               	movwf	7
 13839  12BA  1081               	bcf	1,1
 13840                           
 13841                           ;main.c: 237:    state = 0;
 13842  12BB  0141               	movlb	1	; select bank1
 13843  12BC  01ED               	clrf	checkSensor@state^(0+128)
 13844                           
 13845                           ;main.c: 238:    uartReset();
 13846  12BD  31A1  2185         	fcall	_uartReset
 13847                           
 13848                           ;main.c: 239:   } else if (uartIsDataReady()) {
 13849  12BF  0008               	return
 13850  12C0                     l4809:	
 13851  12C0  31A1  21C7  3192   	fcall	_uartIsDataReady
 13852  12C3  3A00               	xorlw	0
 13853  12C4  1903               	skipnz
 13854  12C5  0008               	return
 13855                           
 13856                           ;main.c: 240:    dp = getDataPacket();
 13857  12C6  3188  2000  3192   	fcall	_getDataPacket
 13858  12C9  0140               	movlb	0	; select bank0
 13859  12CA  00B6               	movwf	??_checkSensor
 13860  12CB  0836               	movf	??_checkSensor,w
 13861  12CC  00BA               	movwf	checkSensor@dp
 13862                           
 13863                           ;main.c: 241:    if ((dp->header == 0xAA) && (dp->status == 1)) {
 13864  12CD  083A               	movf	checkSensor@dp,w
 13865  12CE  0086               	movwf	6
 13866  12CF  3001               	movlw	1	; select bank2/3
 13867  12D0  0087               	movwf	7
 13868  12D1  30AA               	movlw	170
 13869  12D2  0601               	xorwf	1,w
 13870  12D3  1D03               	btfss	3,2
 13871  12D4  2B55               	goto	l4823
 13872  12D5  083A               	movf	checkSensor@dp,w
 13873  12D6  3E02               	addlw	2
 13874  12D7  0086               	movwf	6
 13875  12D8  3001               	movlw	1	; select bank2/3
 13876  12D9  0087               	movwf	7
 13877  12DA  0301               	decf	1,w
 13878  12DB  1D03               	btfss	3,2
 13879  12DC  2B55               	goto	l4823
 13880                           
 13881                           ;main.c: 242:     data->tempC = dp->tempC;
 13882  12DD  083A               	movf	checkSensor@dp,w
 13883  12DE  3E03               	addlw	3
 13884  12DF  0086               	movwf	6
 13885  12E0  3001               	movlw	1	; select bank2/3
 13886  12E1  0087               	movwf	7
 13887  12E2  3F40               	moviw [0]fsr1
 13888  12E3  00B6               	movwf	??_checkSensor
 13889  12E4  3F41               	moviw [1]fsr1
 13890  12E5  00B7               	movwf	??_checkSensor+1
 13891  12E6  3F42               	moviw [2]fsr1
 13892  12E7  00B8               	movwf	??_checkSensor+2
 13893  12E8  3F43               	moviw [3]fsr1
 13894  12E9  00B9               	movwf	??_checkSensor+3
 13895  12EA  0834               	movf	checkSensor@data,w
 13896  12EB  0086               	movwf	6
 13897  12EC  0835               	movf	checkSensor@data+1,w
 13898  12ED  0087               	movwf	7
 13899  12EE  0836               	movf	??_checkSensor,w
 13900  12EF  3FC0               	movwi [0]fsr1
 13901  12F0  0837               	movf	??_checkSensor+1,w
 13902  12F1  3FC1               	movwi [1]fsr1
 13903  12F2  0838               	movf	??_checkSensor+2,w
 13904  12F3  3FC2               	movwi [2]fsr1
 13905  12F4  0839               	movf	??_checkSensor+3,w
 13906  12F5  3FC3               	movwi [3]fsr1
 13907                           
 13908                           ;main.c: 243:     data->relHum = dp->relHum;
 13909  12F6  083A               	movf	checkSensor@dp,w
 13910  12F7  3E07               	addlw	7
 13911  12F8  0086               	movwf	6
 13912  12F9  3001               	movlw	1	; select bank2/3
 13913  12FA  0087               	movwf	7
 13914  12FB  3F40               	moviw [0]fsr1
 13915  12FC  00B6               	movwf	??_checkSensor
 13916  12FD  3F41               	moviw [1]fsr1
 13917  12FE  00B7               	movwf	??_checkSensor+1
 13918  12FF  3F42               	moviw [2]fsr1
 13919  1300  00B8               	movwf	??_checkSensor+2
 13920  1301  3F43               	moviw [3]fsr1
 13921  1302  00B9               	movwf	??_checkSensor+3
 13922  1303  0834               	movf	checkSensor@data,w
 13923  1304  0086               	movwf	6
 13924  1305  0835               	movf	checkSensor@data+1,w
 13925  1306  0087               	movwf	7
 13926  1307  3144               	addfsr 1,4
 13927  1308  0836               	movf	??_checkSensor,w
 13928  1309  3FC0               	movwi [0]fsr1
 13929  130A  0837               	movf	??_checkSensor+1,w
 13930  130B  3FC1               	movwi [1]fsr1
 13931  130C  0838               	movf	??_checkSensor+2,w
 13932  130D  3FC2               	movwi [2]fsr1
 13933  130E  0839               	movf	??_checkSensor+3,w
 13934  130F  3FC3               	movwi [3]fsr1
 13935                           
 13936                           ;main.c: 244:     data->dewPointC = dp->dewPointC;
 13937  1310  083A               	movf	checkSensor@dp,w
 13938  1311  3E0B               	addlw	11
 13939  1312  0086               	movwf	6
 13940  1313  3001               	movlw	1	; select bank2/3
 13941  1314  0087               	movwf	7
 13942  1315  3F40               	moviw [0]fsr1
 13943  1316  00B6               	movwf	??_checkSensor
 13944  1317  3F41               	moviw [1]fsr1
 13945  1318  00B7               	movwf	??_checkSensor+1
 13946  1319  3F42               	moviw [2]fsr1
 13947  131A  00B8               	movwf	??_checkSensor+2
 13948  131B  3F43               	moviw [3]fsr1
 13949  131C  00B9               	movwf	??_checkSensor+3
 13950  131D  0834               	movf	checkSensor@data,w
 13951  131E  0086               	movwf	6
 13952  131F  0835               	movf	checkSensor@data+1,w
 13953  1320  0087               	movwf	7
 13954  1321  3148               	addfsr 1,8
 13955  1322  0836               	movf	??_checkSensor,w
 13956  1323  3FC0               	movwi [0]fsr1
 13957  1324  0837               	movf	??_checkSensor+1,w
 13958  1325  3FC1               	movwi [1]fsr1
 13959  1326  0838               	movf	??_checkSensor+2,w
 13960  1327  3FC2               	movwi [2]fsr1
 13961  1328  0839               	movf	??_checkSensor+3,w
 13962  1329  3FC3               	movwi [3]fsr1
 13963                           
 13964                           ;main.c: 245:     data->sensorVersion = dp->version;
 13965  132A  0A3A               	incf	checkSensor@dp,w
 13966  132B  0086               	movwf	6
 13967  132C  3001               	movlw	1	; select bank2/3
 13968  132D  0087               	movwf	7
 13969  132E  0801               	movf	1,w
 13970  132F  00B6               	movwf	??_checkSensor
 13971  1330  01B7               	clrf	??_checkSensor+1
 13972  1331  01B8               	clrf	??_checkSensor+2
 13973  1332  01B9               	clrf	??_checkSensor+3
 13974  1333  0839               	movf	??_checkSensor+3,w
 13975  1334  00A9               	movwf	___xxtofl@val+3
 13976  1335  0838               	movf	??_checkSensor+2,w
 13977  1336  00A8               	movwf	___xxtofl@val+2
 13978  1337  0837               	movf	??_checkSensor+1,w
 13979  1338  00A7               	movwf	___xxtofl@val+1
 13980  1339  0836               	movf	??_checkSensor,w
 13981  133A  00A6               	movwf	___xxtofl@val
 13982  133B  3000               	movlw	0
 13983  133C  3190  2015  3192   	fcall	___xxtofl
 13984  133F  0140               	movlb	0	; select bank0
 13985  1340  0834               	movf	checkSensor@data,w
 13986  1341  0086               	movwf	6
 13987  1342  0835               	movf	checkSensor@data+1,w
 13988  1343  0087               	movwf	7
 13989  1344  314C               	addfsr 1,12
 13990  1345  0826               	movf	?___xxtofl,w
 13991  1346  3FC0               	movwi [0]fsr1
 13992  1347  0827               	movf	?___xxtofl+1,w
 13993  1348  3FC1               	movwi [1]fsr1
 13994  1349  0828               	movf	?___xxtofl+2,w
 13995  134A  3FC2               	movwi [2]fsr1
 13996  134B  0829               	movf	?___xxtofl+3,w
 13997  134C  3FC3               	movwi [3]fsr1
 13998                           
 13999                           ;main.c: 246:     data->status.SENSOR_OK = 1;
 14000  134D  0834               	movf	checkSensor@data,w
 14001  134E  3E2C               	addlw	44
 14002  134F  0086               	movwf	6
 14003  1350  3000               	movlw	0
 14004  1351  3D35               	addwfc	checkSensor@data+1,w
 14005  1352  0087               	movwf	7
 14006  1353  1481               	bsf	1,1
 14007                           
 14008                           ;main.c: 247:    } else {
 14009  1354  2B5E               	goto	l4827
 14010  1355                     l4823:	
 14011                           
 14012                           ;main.c: 249:     data->status.SENSOR_OK = 0;
 14013  1355  0834               	movf	checkSensor@data,w
 14014  1356  3E2C               	addlw	44
 14015  1357  0086               	movwf	6
 14016  1358  3000               	movlw	0
 14017  1359  3D35               	addwfc	checkSensor@data+1,w
 14018  135A  0087               	movwf	7
 14019  135B  1081               	bcf	1,1
 14020                           
 14021                           ;main.c: 250:     uartReset();
 14022  135C  31A1  2185         	fcall	_uartReset
 14023  135E                     l4827:	
 14024                           
 14025                           ;main.c: 252:    state = 0;
 14026  135E  0141               	movlb	1	; select bank1
 14027  135F  01ED               	clrf	checkSensor@state^(0+128)
 14028  1360  0008               	return
 14029  1361                     l4831:	
 14030  1361  0141               	movlb	1	; select bank1
 14031  1362  086D               	movf	checkSensor@state^(0+128),w
 14032  1363  0140               	movlb	0	; select bank0
 14033  1364  00B6               	movwf	??_checkSensor
 14034  1365  01B7               	clrf	??_checkSensor+1
 14035                           
 14036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14037                           ; Switch size 1, requested type "simple"
 14038                           ; Number of cases is 1, Range of values is 0 to 0
 14039                           ; switch strategies available:
 14040                           ; Name         Instructions Cycles
 14041                           ; simple_byte            4     3 (average)
 14042                           ; direct_byte            8     6 (fixed)
 14043                           ; jumptable            260     6 (fixed)
 14044                           ;	Chosen strategy is simple_byte
 14045  1366  0837               	movf	??_checkSensor+1,w
 14046  1367  3A00               	xorlw	0	; case 0
 14047  1368  1903               	skipnz
 14048  1369  2B6B               	goto	l5565
 14049  136A  2B5E               	goto	l4827
 14050  136B                     l5565:	
 14051                           
 14052                           ; Switch size 1, requested type "simple"
 14053                           ; Number of cases is 2, Range of values is 0 to 1
 14054                           ; switch strategies available:
 14055                           ; Name         Instructions Cycles
 14056                           ; simple_byte            7     4 (average)
 14057                           ; direct_byte           10     6 (fixed)
 14058                           ; jumptable            260     6 (fixed)
 14059                           ;	Chosen strategy is simple_byte
 14060  136B  0836               	movf	??_checkSensor,w
 14061  136C  3A00               	xorlw	0	; case 0
 14062  136D  1903               	skipnz
 14063  136E  2A50               	goto	l4793
 14064  136F  3A01               	xorlw	1	; case 1
 14065  1370  1903               	skipnz
 14066  1371  2A93               	goto	l4801
 14067  1372  2B5E               	goto	l4827
 14068  1373  0008               	return
 14069  1374                     __end_of_checkSensor:	
 14070                           
 14071                           	psect	text44
 14072  21A8                     __ptext44:	
 14073 ;; *************** function _uartSendByte *****************
 14074 ;; Defined at:
 14075 ;;		line 27 in file "uart.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;  s               1    wreg     unsigned char 
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;  s               1    0[BANK0 ] unsigned char 
 14080 ;; Return value:  Size  Location     Type
 14081 ;;                  1    wreg      void 
 14082 ;; Registers used:
 14083 ;;		wreg
 14084 ;; Tracked objects:
 14085 ;;		On entry : 0/0
 14086 ;;		On exit  : 0/0
 14087 ;;		Unchanged: 0/0
 14088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14092 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14093 ;;Total ram usage:        1 bytes
 14094 ;; Hardware stack levels used:    1
 14095 ;; Hardware stack levels required when called:    3
 14096 ;; This function calls:
 14097 ;;		Nothing
 14098 ;; This function is called by:
 14099 ;;		_checkSensor
 14100 ;; This function uses a non-reentrant model
 14101 ;;
 14102                           
 14103                           
 14104                           ;psect for function _uartSendByte
 14105  21A8                     _uartSendByte:	
 14106                           
 14107                           ;incstack = 0
 14108                           ; Regs used in _uartSendByte: [wreg]
 14109                           ;uartSendByte@s stored from wreg
 14110  21A8  0140               	movlb	0	; select bank0
 14111  21A9  00A0               	movwf	uartSendByte@s
 14112                           
 14113                           ;uart.c: 27: void uartSendByte(char s);uart.c: 28: {;uart.c: 29:  TX1REG = s;
 14114  21AA  0820               	movf	uartSendByte@s,w
 14115  21AB  0142               	movlb	2	; select bank2
 14116  21AC  009A               	movwf	26	;volatile
 14117                           
 14118                           ;uart.c: 30:  __nop();
 14119  21AD  0000               	nop
 14120  21AE                     l450:	
 14121                           ;uart.c: 31:  while (!PIR3bits.TX1IF);
 14122                           
 14123  21AE  014E               	movlb	14	; select bank14
 14124  21AF  1A0F               	btfsc	15,4	;volatile
 14125  21B0  0008               	return
 14126  21B1  29AE               	goto	l450
 14127  21B2                     __end_of_uartSendByte:	
 14128                           
 14129                           	psect	text45
 14130  2185                     __ptext45:	
 14131 ;; *************** function _uartReset *****************
 14132 ;; Defined at:
 14133 ;;		line 73 in file "uart.c"
 14134 ;; Parameters:    Size  Location     Type
 14135 ;;		None
 14136 ;; Auto vars:     Size  Location     Type
 14137 ;;  dump            1    0        unsigned char 
 14138 ;; Return value:  Size  Location     Type
 14139 ;;                  1    wreg      void 
 14140 ;; Registers used:
 14141 ;;		wreg, status,2
 14142 ;; Tracked objects:
 14143 ;;		On entry : 0/0
 14144 ;;		On exit  : 0/0
 14145 ;;		Unchanged: 0/0
 14146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14150 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14151 ;;Total ram usage:        1 bytes
 14152 ;; Hardware stack levels used:    1
 14153 ;; Hardware stack levels required when called:    3
 14154 ;; This function calls:
 14155 ;;		Nothing
 14156 ;; This function is called by:
 14157 ;;		_checkSensor
 14158 ;; This function uses a non-reentrant model
 14159 ;;
 14160                           
 14161                           
 14162                           ;psect for function _uartReset
 14163  2185                     _uartReset:	
 14164                           
 14165                           ;incstack = 0
 14166                           ; Regs used in _uartReset: [wreg+status,2]
 14167  2185  0142               	movlb	2	; select bank2
 14168  2186  0819               	movf	25,w	;volatile
 14169                           
 14170                           ;uart.c: 77:  RC1STAbits.CREN = 0;
 14171  2187  121D               	bcf	29,4	;volatile
 14172                           
 14173                           ;uart.c: 78:  RC1STAbits.CREN = 1;
 14174  2188  161D               	bsf	29,4	;volatile
 14175                           
 14176                           ;uart.c: 79:  RC1STAbits.SPEN = 0;
 14177  2189  139D               	bcf	29,7	;volatile
 14178                           
 14179                           ;uart.c: 80:  RC1STAbits.SPEN = 1;
 14180  218A  179D               	bsf	29,7	;volatile
 14181                           
 14182                           ;uart.c: 81:  rxCount = 0;
 14183  218B  01FC               	clrf	_rxCount	;volatile
 14184  218C  0008               	return
 14185  218D                     __end_of_uartReset:	
 14186                           
 14187                           	psect	text46
 14188  21C7                     __ptext46:	
 14189 ;; *************** function _uartIsDataReady *****************
 14190 ;; Defined at:
 14191 ;;		line 13 in file "uart.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;		None
 14194 ;; Auto vars:     Size  Location     Type
 14195 ;;  ret             1    1[BANK0 ] unsigned char 
 14196 ;; Return value:  Size  Location     Type
 14197 ;;                  1    wreg      unsigned char 
 14198 ;; Registers used:
 14199 ;;		wreg, status,2
 14200 ;; Tracked objects:
 14201 ;;		On entry : 0/0
 14202 ;;		On exit  : 0/0
 14203 ;;		Unchanged: 0/0
 14204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14209 ;;Total ram usage:        2 bytes
 14210 ;; Hardware stack levels used:    1
 14211 ;; Hardware stack levels required when called:    3
 14212 ;; This function calls:
 14213 ;;		Nothing
 14214 ;; This function is called by:
 14215 ;;		_checkSensor
 14216 ;; This function uses a non-reentrant model
 14217 ;;
 14218                           
 14219                           
 14220                           ;psect for function _uartIsDataReady
 14221  21C7                     _uartIsDataReady:	
 14222                           
 14223                           ;uart.c: 15:  uint8_t ret = dataReadyFlag;
 14224                           
 14225                           ;incstack = 0
 14226                           ; Regs used in _uartIsDataReady: [wreg+status,2]
 14227  21C7  0141               	movlb	1	; select bank1
 14228  21C8  0866               	movf	_dataReadyFlag^(0+128),w	;volatile
 14229  21C9  0140               	movlb	0	; select bank0
 14230  21CA  00A0               	movwf	??_uartIsDataReady
 14231  21CB  0820               	movf	??_uartIsDataReady,w
 14232  21CC  00A1               	movwf	uartIsDataReady@ret
 14233                           
 14234                           ;uart.c: 16:  dataReadyFlag = 0;
 14235  21CD  0141               	movlb	1	; select bank1
 14236  21CE  01E6               	clrf	_dataReadyFlag^(0+128)	;volatile
 14237                           
 14238                           ;uart.c: 17:  return ret;
 14239  21CF  0140               	movlb	0	; select bank0
 14240  21D0  0821               	movf	uartIsDataReady@ret,w
 14241  21D1  0008               	return
 14242  21D2                     __end_of_uartIsDataReady:	
 14243                           
 14244                           	psect	text47
 14245  2615                     __ptext47:	
 14246 ;; *************** function _timeSince *****************
 14247 ;; Defined at:
 14248 ;;		line 21 in file "interrupt.c"
 14249 ;; Parameters:    Size  Location     Type
 14250 ;;  since           4    4[BANK0 ] unsigned long 
 14251 ;; Auto vars:     Size  Location     Type
 14252 ;;  now             4   16[BANK0 ] unsigned long 
 14253 ;; Return value:  Size  Location     Type
 14254 ;;                  4    4[BANK0 ] unsigned long 
 14255 ;; Registers used:
 14256 ;;		wreg, pclath, cstack
 14257 ;; Tracked objects:
 14258 ;;		On entry : 0/0
 14259 ;;		On exit  : 0/0
 14260 ;;		Unchanged: 0/0
 14261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14262 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14263 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14264 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14265 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14266 ;;Total ram usage:       16 bytes
 14267 ;; Hardware stack levels used:    1
 14268 ;; Hardware stack levels required when called:    4
 14269 ;; This function calls:
 14270 ;;		_timeNow
 14271 ;; This function is called by:
 14272 ;;		_main
 14273 ;;		_checkSensor
 14274 ;; This function uses a non-reentrant model
 14275 ;;
 14276                           
 14277                           
 14278                           ;psect for function _timeSince
 14279  2615                     _timeSince:	
 14280                           
 14281                           ;interrupt.c: 21: uint32_t timeSince(uint32_t since);interrupt.c: 22: {;interrupt.c: 23:
      +                            uint32_t now = timeNow();
 14282                           
 14283                           ;incstack = 0
 14284                           ; Regs used in _timeSince: [wreg+pclath+cstack]
 14285  2615  31A2  2200  31A6   	fcall	_timeNow
 14286  2618  0140               	movlb	0	; select bank0
 14287  2619  0823               	movf	?_timeNow+3,w
 14288  261A  00B3               	movwf	timeSince@now+3
 14289  261B  0822               	movf	?_timeNow+2,w
 14290  261C  00B2               	movwf	timeSince@now+2
 14291  261D  0821               	movf	?_timeNow+1,w
 14292  261E  00B1               	movwf	timeSince@now+1
 14293  261F  0820               	movf	?_timeNow,w
 14294  2620  00B0               	movwf	timeSince@now
 14295                           
 14296                           ;interrupt.c: 24:  if (now >= since)
 14297  2621  0827               	movf	timeSince@since+3,w
 14298  2622  0233               	subwf	timeSince@now+3,w
 14299  2623  1D03               	skipz
 14300  2624  2E2F               	goto	u4995
 14301  2625  0826               	movf	timeSince@since+2,w
 14302  2626  0232               	subwf	timeSince@now+2,w
 14303  2627  1D03               	skipz
 14304  2628  2E2F               	goto	u4995
 14305  2629  0825               	movf	timeSince@since+1,w
 14306  262A  0231               	subwf	timeSince@now+1,w
 14307  262B  1D03               	skipz
 14308  262C  2E2F               	goto	u4995
 14309  262D  0824               	movf	timeSince@since,w
 14310  262E  0230               	subwf	timeSince@now,w
 14311  262F                     u4995:	
 14312  262F  1C03               	skipc
 14313  2630  2E46               	goto	l4201
 14314                           
 14315                           ;interrupt.c: 25:   return (now - since);
 14316  2631  0824               	movf	timeSince@since,w
 14317  2632  0230               	subwf	timeSince@now,w
 14318  2633  00A8               	movwf	??_timeSince
 14319  2634  0825               	movf	timeSince@since+1,w
 14320  2635  3B31               	subwfb	timeSince@now+1,w
 14321  2636  00A9               	movwf	??_timeSince+1
 14322  2637  0826               	movf	timeSince@since+2,w
 14323  2638  3B32               	subwfb	timeSince@now+2,w
 14324  2639  00AA               	movwf	??_timeSince+2
 14325  263A  0827               	movf	timeSince@since+3,w
 14326  263B  3B33               	subwfb	timeSince@now+3,w
 14327  263C  00AB               	movwf	??_timeSince+3
 14328  263D  082B               	movf	??_timeSince+3,w
 14329  263E  00A7               	movwf	?_timeSince+3
 14330  263F  082A               	movf	??_timeSince+2,w
 14331  2640  00A6               	movwf	?_timeSince+2
 14332  2641  0829               	movf	??_timeSince+1,w
 14333  2642  00A5               	movwf	?_timeSince+1
 14334  2643  0828               	movf	??_timeSince,w
 14335  2644  00A4               	movwf	?_timeSince
 14336  2645  0008               	return
 14337  2646                     l4201:	
 14338                           
 14339                           ;interrupt.c: 27:  return (now + (1 + 1000000000UL - since));
 14340  2646  3001               	movlw	1
 14341  2647  00A8               	movwf	??_timeSince
 14342  2648  30CA               	movlw	202
 14343  2649  00A9               	movwf	??_timeSince+1
 14344  264A  309A               	movlw	154
 14345  264B  00AA               	movwf	??_timeSince+2
 14346  264C  303B               	movlw	59
 14347  264D  00AB               	movwf	??_timeSince+3
 14348  264E  0824               	movf	timeSince@since,w
 14349  264F  0230               	subwf	timeSince@now,w
 14350  2650  00AC               	movwf	??_timeSince+4
 14351  2651  0825               	movf	timeSince@since+1,w
 14352  2652  3B31               	subwfb	timeSince@now+1,w
 14353  2653  00AD               	movwf	??_timeSince+5
 14354  2654  0826               	movf	timeSince@since+2,w
 14355  2655  3B32               	subwfb	timeSince@now+2,w
 14356  2656  00AE               	movwf	??_timeSince+6
 14357  2657  0827               	movf	timeSince@since+3,w
 14358  2658  3B33               	subwfb	timeSince@now+3,w
 14359  2659  00AF               	movwf	??_timeSince+7
 14360  265A  082C               	movf	??_timeSince+4,w
 14361  265B  07A8               	addwf	??_timeSince,f
 14362  265C  082D               	movf	??_timeSince+5,w
 14363  265D  3DA9               	addwfc	??_timeSince+1,f
 14364  265E  082E               	movf	??_timeSince+6,w
 14365  265F  3DAA               	addwfc	??_timeSince+2,f
 14366  2660  082F               	movf	??_timeSince+7,w
 14367  2661  3DAB               	addwfc	??_timeSince+3,f
 14368  2662  082B               	movf	??_timeSince+3,w
 14369  2663  00A7               	movwf	?_timeSince+3
 14370  2664  082A               	movf	??_timeSince+2,w
 14371  2665  00A6               	movwf	?_timeSince+2
 14372  2666  0829               	movf	??_timeSince+1,w
 14373  2667  00A5               	movwf	?_timeSince+1
 14374  2668  0828               	movf	??_timeSince,w
 14375  2669  00A4               	movwf	?_timeSince
 14376  266A  0008               	return
 14377  266B                     __end_of_timeSince:	
 14378                           
 14379                           	psect	text48
 14380  2200                     __ptext48:	
 14381 ;; *************** function _timeNow *****************
 14382 ;; Defined at:
 14383 ;;		line 13 in file "interrupt.c"
 14384 ;; Parameters:    Size  Location     Type
 14385 ;;		None
 14386 ;; Auto vars:     Size  Location     Type
 14387 ;;		None
 14388 ;; Return value:  Size  Location     Type
 14389 ;;                  4    0[BANK0 ] unsigned long 
 14390 ;; Registers used:
 14391 ;;		wreg
 14392 ;; Tracked objects:
 14393 ;;		On entry : 0/0
 14394 ;;		On exit  : 0/0
 14395 ;;		Unchanged: 0/0
 14396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14397 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14400 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14401 ;;Total ram usage:        4 bytes
 14402 ;; Hardware stack levels used:    1
 14403 ;; Hardware stack levels required when called:    3
 14404 ;; This function calls:
 14405 ;;		Nothing
 14406 ;; This function is called by:
 14407 ;;		_main
 14408 ;;		_checkSensor
 14409 ;;		_timeSince
 14410 ;; This function uses a non-reentrant model
 14411 ;;
 14412                           
 14413                           
 14414                           ;psect for function _timeNow
 14415  2200                     _timeNow:	
 14416                           
 14417                           ;interrupt.c: 15:  return tick100ms;
 14418                           
 14419                           ;incstack = 0
 14420                           ; Regs used in _timeNow: [wreg]
 14421  2200  0142               	movlb	2	; select bank2
 14422  2201  0823               	movf	(_tick100ms+3)^(0+256),w	;volatile
 14423  2202  0140               	movlb	0	; select bank0
 14424  2203  00A3               	movwf	?_timeNow+3
 14425  2204  0142               	movlb	2	; select bank2
 14426  2205  0822               	movf	(_tick100ms+2)^(0+256),w	;volatile
 14427  2206  0140               	movlb	0	; select bank0
 14428  2207  00A2               	movwf	?_timeNow+2
 14429  2208  0142               	movlb	2	; select bank2
 14430  2209  0821               	movf	(_tick100ms+1)^(0+256),w	;volatile
 14431  220A  0140               	movlb	0	; select bank0
 14432  220B  00A1               	movwf	?_timeNow+1
 14433  220C  0142               	movlb	2	; select bank2
 14434  220D  0820               	movf	_tick100ms^(0+256),w	;volatile
 14435  220E  0140               	movlb	0	; select bank0
 14436  220F  00A0               	movwf	?_timeNow
 14437  2210  0008               	return
 14438  2211                     __end_of_timeNow:	
 14439                           
 14440                           	psect	text49
 14441  0800                     __ptext49:	
 14442 ;; *************** function _getDataPacket *****************
 14443 ;; Defined at:
 14444 ;;		line 20 in file "uart.c"
 14445 ;; Parameters:    Size  Location     Type
 14446 ;;		None
 14447 ;; Auto vars:     Size  Location     Type
 14448 ;;		None
 14449 ;; Return value:  Size  Location     Type
 14450 ;;                  1    wreg      PTR struct .
 14451 ;; Registers used:
 14452 ;;		wreg
 14453 ;; Tracked objects:
 14454 ;;		On entry : 0/0
 14455 ;;		On exit  : 0/0
 14456 ;;		Unchanged: 0/0
 14457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14462 ;;Total ram usage:        0 bytes
 14463 ;; Hardware stack levels used:    1
 14464 ;; Hardware stack levels required when called:    3
 14465 ;; This function calls:
 14466 ;;		Nothing
 14467 ;; This function is called by:
 14468 ;;		_checkSensor
 14469 ;; This function uses a non-reentrant model
 14470 ;;
 14471                           
 14472                           
 14473                           ;psect for function _getDataPacket
 14474  0800                     _getDataPacket:	
 14475                           
 14476                           ;uart.c: 22:  return &dataPacket;
 14477                           
 14478                           ;incstack = 0
 14479                           ; Regs used in _getDataPacket: [wreg]
 14480  0800  304A               	movlw	(low (_dataPacket| (0+256)))& (0+255)
 14481  0801  0008               	return
 14482  0802                     __end_of_getDataPacket:	
 14483                           
 14484                           	psect	text50
 14485  1015                     __ptext50:	
 14486 ;; *************** function ___xxtofl *****************
 14487 ;; Defined at:
 14488 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;  sign            1    wreg     unsigned char 
 14491 ;;  val             4    6[BANK0 ] long 
 14492 ;; Auto vars:     Size  Location     Type
 14493 ;;  sign            1   14[BANK0 ] unsigned char 
 14494 ;;  arg             4   16[BANK0 ] unsigned long 
 14495 ;;  exp             1   15[BANK0 ] unsigned char 
 14496 ;; Return value:  Size  Location     Type
 14497 ;;                  4    6[BANK0 ] unsigned char 
 14498 ;; Registers used:
 14499 ;;		wreg, status,2, status,0
 14500 ;; Tracked objects:
 14501 ;;		On entry : 0/0
 14502 ;;		On exit  : 0/0
 14503 ;;		Unchanged: 0/0
 14504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14506 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14507 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14508 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14509 ;;Total ram usage:       14 bytes
 14510 ;; Hardware stack levels used:    1
 14511 ;; Hardware stack levels required when called:    3
 14512 ;; This function calls:
 14513 ;;		Nothing
 14514 ;; This function is called by:
 14515 ;;		_checkSensor
 14516 ;;		_getAvgChannelCurrents
 14517 ;;		_convertAnalogValues
 14518 ;;		_ftoa
 14519 ;; This function uses a non-reentrant model
 14520 ;;
 14521                           
 14522                           
 14523                           ;psect for function ___xxtofl
 14524  1015                     ___xxtofl:	
 14525                           
 14526                           ;incstack = 0
 14527                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 14528                           ;___xxtofl@sign stored from wreg
 14529  1015  0140               	movlb	0	; select bank0
 14530  1016  00AE               	movwf	___xxtofl@sign
 14531  1017  082E               	movf	___xxtofl@sign,w
 14532  1018  1D03               	btfss	3,2
 14533  1019  1FA9               	btfss	___xxtofl@val+3,7
 14534  101A  282B               	goto	l3937
 14535  101B  0926               	comf	___xxtofl@val,w
 14536  101C  00B0               	movwf	___xxtofl@arg
 14537  101D  0927               	comf	___xxtofl@val+1,w
 14538  101E  00B1               	movwf	___xxtofl@arg+1
 14539  101F  0928               	comf	___xxtofl@val+2,w
 14540  1020  00B2               	movwf	___xxtofl@arg+2
 14541  1021  0929               	comf	___xxtofl@val+3,w
 14542  1022  00B3               	movwf	___xxtofl@arg+3
 14543  1023  0AB0               	incf	___xxtofl@arg,f
 14544  1024  1903               	skipnz
 14545  1025  0AB1               	incf	___xxtofl@arg+1,f
 14546  1026  1903               	skipnz
 14547  1027  0AB2               	incf	___xxtofl@arg+2,f
 14548  1028  1903               	skipnz
 14549  1029  0AB3               	incf	___xxtofl@arg+3,f
 14550  102A  2833               	goto	l1204
 14551  102B                     l3937:	
 14552  102B  0829               	movf	___xxtofl@val+3,w
 14553  102C  00B3               	movwf	___xxtofl@arg+3
 14554  102D  0828               	movf	___xxtofl@val+2,w
 14555  102E  00B2               	movwf	___xxtofl@arg+2
 14556  102F  0827               	movf	___xxtofl@val+1,w
 14557  1030  00B1               	movwf	___xxtofl@arg+1
 14558  1031  0826               	movf	___xxtofl@val,w
 14559  1032  00B0               	movwf	___xxtofl@arg
 14560  1033                     l1204:	
 14561  1033  0829               	movf	___xxtofl@val+3,w
 14562  1034  0428               	iorwf	___xxtofl@val+2,w
 14563  1035  0427               	iorwf	___xxtofl@val+1,w
 14564  1036  0426               	iorwf	___xxtofl@val,w
 14565  1037  1D03               	skipz
 14566  1038  2842               	goto	l3943
 14567  1039  3000               	movlw	0
 14568  103A  00A9               	movwf	?___xxtofl+3
 14569  103B  3000               	movlw	0
 14570  103C  00A8               	movwf	?___xxtofl+2
 14571  103D  3000               	movlw	0
 14572  103E  00A7               	movwf	?___xxtofl+1
 14573  103F  3000               	movlw	0
 14574  1040  00A6               	movwf	?___xxtofl
 14575  1041  0008               	return
 14576  1042                     l3943:	
 14577  1042  3096               	movlw	150
 14578  1043  00AA               	movwf	??___xxtofl
 14579  1044  082A               	movf	??___xxtofl,w
 14580  1045  00AF               	movwf	___xxtofl@exp
 14581  1046                     l3947:	
 14582  1046  30FE               	movlw	254
 14583  1047  0533               	andwf	___xxtofl@arg+3,w
 14584  1048  1903               	btfsc	3,2
 14585  1049  2869               	goto	l1210
 14586  104A  3001               	movlw	1
 14587  104B  00AA               	movwf	??___xxtofl
 14588  104C  082A               	movf	??___xxtofl,w
 14589  104D  07AF               	addwf	___xxtofl@exp,f
 14590  104E  3001               	movlw	1
 14591  104F                     u4565:	
 14592  104F  36B3               	lsrf	___xxtofl@arg+3,f
 14593  1050  0CB2               	rrf	___xxtofl@arg+2,f
 14594  1051  0CB1               	rrf	___xxtofl@arg+1,f
 14595  1052  0CB0               	rrf	___xxtofl@arg,f
 14596  1053  0B89               	decfsz	9,f
 14597  1054  284F               	goto	u4565
 14598  1055  2846               	goto	l3947
 14599  1056                     l3949:	
 14600  1056  3001               	movlw	1
 14601  1057  00AA               	movwf	??___xxtofl
 14602  1058  082A               	movf	??___xxtofl,w
 14603  1059  07AF               	addwf	___xxtofl@exp,f
 14604  105A  3001               	movlw	1
 14605  105B  07B0               	addwf	___xxtofl@arg,f
 14606  105C  3000               	movlw	0
 14607  105D  3DB1               	addwfc	___xxtofl@arg+1,f
 14608  105E  3000               	movlw	0
 14609  105F  3DB2               	addwfc	___xxtofl@arg+2,f
 14610  1060  3000               	movlw	0
 14611  1061  3DB3               	addwfc	___xxtofl@arg+3,f
 14612  1062  3001               	movlw	1
 14613  1063                     u4585:	
 14614  1063  36B3               	lsrf	___xxtofl@arg+3,f
 14615  1064  0CB2               	rrf	___xxtofl@arg+2,f
 14616  1065  0CB1               	rrf	___xxtofl@arg+1,f
 14617  1066  0CB0               	rrf	___xxtofl@arg,f
 14618  1067  0B89               	decfsz	9,f
 14619  1068  2863               	goto	u4585
 14620  1069                     l1210:	
 14621  1069  30FF               	movlw	255
 14622  106A  0533               	andwf	___xxtofl@arg+3,w
 14623  106B  1903               	btfsc	3,2
 14624  106C  287B               	goto	l3957
 14625  106D  2856               	goto	l3949
 14626  106E                     l3959:	
 14627  106E  3002               	movlw	2
 14628  106F  022F               	subwf	___xxtofl@exp,w
 14629  1070  1C03               	btfss	3,0
 14630  1071  287D               	goto	l1217
 14631  1072  3001               	movlw	1
 14632  1073  02AF               	subwf	___xxtofl@exp,f
 14633  1074  3001               	movlw	1
 14634  1075                     u4605:	
 14635  1075  35B0               	lslf	___xxtofl@arg,f
 14636  1076  0DB1               	rlf	___xxtofl@arg+1,f
 14637  1077  0DB2               	rlf	___xxtofl@arg+2,f
 14638  1078  0DB3               	rlf	___xxtofl@arg+3,f
 14639  1079  0B89               	decfsz	9,f
 14640  107A  2875               	goto	u4605
 14641  107B                     l3957:	
 14642  107B  1FB2               	btfss	___xxtofl@arg+2,7
 14643  107C  286E               	goto	l3959
 14644  107D                     l1217:	
 14645  107D  182F               	btfsc	___xxtofl@exp,0
 14646  107E  2887               	goto	l1218
 14647  107F  30FF               	movlw	255
 14648  1080  05B0               	andwf	___xxtofl@arg,f
 14649  1081  30FF               	movlw	255
 14650  1082  05B1               	andwf	___xxtofl@arg+1,f
 14651  1083  307F               	movlw	127
 14652  1084  05B2               	andwf	___xxtofl@arg+2,f
 14653  1085  30FF               	movlw	255
 14654  1086  05B3               	andwf	___xxtofl@arg+3,f
 14655  1087                     l1218:	
 14656  1087  1003               	clrc
 14657  1088  0CAF               	rrf	___xxtofl@exp,f
 14658  1089  082F               	movf	___xxtofl@exp,w
 14659  108A  00AA               	movwf	??___xxtofl
 14660  108B  01AB               	clrf	??___xxtofl+1
 14661  108C  01AC               	clrf	??___xxtofl+2
 14662  108D  01AD               	clrf	??___xxtofl+3
 14663  108E  3018               	movlw	24
 14664  108F                     u4645:	
 14665  108F  35AA               	lslf	??___xxtofl,f
 14666  1090  0DAB               	rlf	??___xxtofl+1,f
 14667  1091  0DAC               	rlf	??___xxtofl+2,f
 14668  1092  0DAD               	rlf	??___xxtofl+3,f
 14669  1093  0B89               	decfsz	9,f
 14670  1094  288F               	goto	u4645
 14671  1095  082A               	movf	??___xxtofl,w
 14672  1096  04B0               	iorwf	___xxtofl@arg,f
 14673  1097  082B               	movf	??___xxtofl+1,w
 14674  1098  04B1               	iorwf	___xxtofl@arg+1,f
 14675  1099  082C               	movf	??___xxtofl+2,w
 14676  109A  04B2               	iorwf	___xxtofl@arg+2,f
 14677  109B  082D               	movf	??___xxtofl+3,w
 14678  109C  04B3               	iorwf	___xxtofl@arg+3,f
 14679  109D  082E               	movf	___xxtofl@sign,w
 14680  109E  1D03               	btfss	3,2
 14681  109F  1FA9               	btfss	___xxtofl@val+3,7
 14682  10A0  28A2               	goto	l3971
 14683  10A1  17B3               	bsf	___xxtofl@arg+3,7
 14684  10A2                     l3971:	
 14685  10A2  0833               	movf	___xxtofl@arg+3,w
 14686  10A3  00A9               	movwf	?___xxtofl+3
 14687  10A4  0832               	movf	___xxtofl@arg+2,w
 14688  10A5  00A8               	movwf	?___xxtofl+2
 14689  10A6  0831               	movf	___xxtofl@arg+1,w
 14690  10A7  00A7               	movwf	?___xxtofl+1
 14691  10A8  0830               	movf	___xxtofl@arg,w
 14692  10A9  00A6               	movwf	?___xxtofl
 14693  10AA  0008               	return
 14694  10AB                     __end_of___xxtofl:	
 14695                           
 14696                           	psect	text51
 14697  19F2                     __ptext51:	
 14698 ;; *************** function ___flge *****************
 14699 ;; Defined at:
 14700 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 14701 ;; Parameters:    Size  Location     Type
 14702 ;;  ff1             4    0[BANK0 ] unsigned char 
 14703 ;;  ff2             4    4[BANK0 ] unsigned char 
 14704 ;; Auto vars:     Size  Location     Type
 14705 ;;		None
 14706 ;; Return value:  Size  Location     Type
 14707 ;;		None               void
 14708 ;; Registers used:
 14709 ;;		wreg, status,2, status,0
 14710 ;; Tracked objects:
 14711 ;;		On entry : 0/0
 14712 ;;		On exit  : 0/0
 14713 ;;		Unchanged: 0/0
 14714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14715 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14717 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14718 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14719 ;;Total ram usage:       12 bytes
 14720 ;; Hardware stack levels used:    1
 14721 ;; Hardware stack levels required when called:    3
 14722 ;; This function calls:
 14723 ;;		Nothing
 14724 ;; This function is called by:
 14725 ;;		_systemCheck
 14726 ;;		_checkSensor
 14727 ;;		_getAvgChannelCurrents
 14728 ;;		_spinInput
 14729 ;;		_channelSetup
 14730 ;;		_setOutputPower
 14731 ;;		_ftoa
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           
 14736                           ;psect for function ___flge
 14737  19F2                     ___flge:	
 14738                           
 14739                           ;incstack = 0
 14740                           ; Regs used in ___flge: [wreg+status,2+status,0]
 14741  19F2  3000               	movlw	0
 14742  19F3  0140               	movlb	0	; select bank0
 14743  19F4  0520               	andwf	___flge@ff1,w
 14744  19F5  00A8               	movwf	??___flge
 14745  19F6  3000               	movlw	0
 14746  19F7  0521               	andwf	___flge@ff1+1,w
 14747  19F8  00A9               	movwf	??___flge+1
 14748  19F9  3080               	movlw	128
 14749  19FA  0522               	andwf	___flge@ff1+2,w
 14750  19FB  00AA               	movwf	??___flge+2
 14751  19FC  307F               	movlw	127
 14752  19FD  0523               	andwf	___flge@ff1+3,w
 14753  19FE  00AB               	movwf	??___flge+3
 14754  19FF  082B               	movf	??___flge+3,w
 14755  1A00  042A               	iorwf	??___flge+2,w
 14756  1A01  0429               	iorwf	??___flge+1,w
 14757  1A02  0428               	iorwf	??___flge,w
 14758  1A03  1D03               	skipz
 14759  1A04  2A0D               	goto	l947
 14760  1A05  3000               	movlw	0
 14761  1A06  00A3               	movwf	___flge@ff1+3
 14762  1A07  3000               	movlw	0
 14763  1A08  00A2               	movwf	___flge@ff1+2
 14764  1A09  3000               	movlw	0
 14765  1A0A  00A1               	movwf	___flge@ff1+1
 14766  1A0B  3000               	movlw	0
 14767  1A0C  00A0               	movwf	___flge@ff1
 14768  1A0D                     l947:	
 14769  1A0D  3000               	movlw	0
 14770  1A0E  0524               	andwf	___flge@ff2,w
 14771  1A0F  00A8               	movwf	??___flge
 14772  1A10  3000               	movlw	0
 14773  1A11  0525               	andwf	___flge@ff2+1,w
 14774  1A12  00A9               	movwf	??___flge+1
 14775  1A13  3080               	movlw	128
 14776  1A14  0526               	andwf	___flge@ff2+2,w
 14777  1A15  00AA               	movwf	??___flge+2
 14778  1A16  307F               	movlw	127
 14779  1A17  0527               	andwf	___flge@ff2+3,w
 14780  1A18  00AB               	movwf	??___flge+3
 14781  1A19  082B               	movf	??___flge+3,w
 14782  1A1A  042A               	iorwf	??___flge+2,w
 14783  1A1B  0429               	iorwf	??___flge+1,w
 14784  1A1C  0428               	iorwf	??___flge,w
 14785  1A1D  1D03               	skipz
 14786  1A1E  2A27               	goto	l3595
 14787  1A1F  3000               	movlw	0
 14788  1A20  00A7               	movwf	___flge@ff2+3
 14789  1A21  3000               	movlw	0
 14790  1A22  00A6               	movwf	___flge@ff2+2
 14791  1A23  3000               	movlw	0
 14792  1A24  00A5               	movwf	___flge@ff2+1
 14793  1A25  3000               	movlw	0
 14794  1A26  00A4               	movwf	___flge@ff2
 14795  1A27                     l3595:	
 14796  1A27  1FA3               	btfss	___flge@ff1+3,7
 14797  1A28  2A41               	goto	l3599
 14798  1A29  3000               	movlw	0
 14799  1A2A  00A8               	movwf	??___flge
 14800  1A2B  3000               	movlw	0
 14801  1A2C  00A9               	movwf	??___flge+1
 14802  1A2D  3000               	movlw	0
 14803  1A2E  00AA               	movwf	??___flge+2
 14804  1A2F  3080               	movlw	128
 14805  1A30  00AB               	movwf	??___flge+3
 14806  1A31  0820               	movf	___flge@ff1,w
 14807  1A32  02A8               	subwf	??___flge,f
 14808  1A33  0821               	movf	___flge@ff1+1,w
 14809  1A34  3BA9               	subwfb	??___flge+1,f
 14810  1A35  0822               	movf	___flge@ff1+2,w
 14811  1A36  3BAA               	subwfb	??___flge+2,f
 14812  1A37  0823               	movf	___flge@ff1+3,w
 14813  1A38  3BAB               	subwfb	??___flge+3,f
 14814  1A39  082B               	movf	??___flge+3,w
 14815  1A3A  00A3               	movwf	___flge@ff1+3
 14816  1A3B  082A               	movf	??___flge+2,w
 14817  1A3C  00A2               	movwf	___flge@ff1+2
 14818  1A3D  0829               	movf	??___flge+1,w
 14819  1A3E  00A1               	movwf	___flge@ff1+1
 14820  1A3F  0828               	movf	??___flge,w
 14821  1A40  00A0               	movwf	___flge@ff1
 14822  1A41                     l3599:	
 14823  1A41  1FA7               	btfss	___flge@ff2+3,7
 14824  1A42  2A5B               	goto	l950
 14825  1A43  3000               	movlw	0
 14826  1A44  00A8               	movwf	??___flge
 14827  1A45  3000               	movlw	0
 14828  1A46  00A9               	movwf	??___flge+1
 14829  1A47  3000               	movlw	0
 14830  1A48  00AA               	movwf	??___flge+2
 14831  1A49  3080               	movlw	128
 14832  1A4A  00AB               	movwf	??___flge+3
 14833  1A4B  0824               	movf	___flge@ff2,w
 14834  1A4C  02A8               	subwf	??___flge,f
 14835  1A4D  0825               	movf	___flge@ff2+1,w
 14836  1A4E  3BA9               	subwfb	??___flge+1,f
 14837  1A4F  0826               	movf	___flge@ff2+2,w
 14838  1A50  3BAA               	subwfb	??___flge+2,f
 14839  1A51  0827               	movf	___flge@ff2+3,w
 14840  1A52  3BAB               	subwfb	??___flge+3,f
 14841  1A53  082B               	movf	??___flge+3,w
 14842  1A54  00A7               	movwf	___flge@ff2+3
 14843  1A55  082A               	movf	??___flge+2,w
 14844  1A56  00A6               	movwf	___flge@ff2+2
 14845  1A57  0829               	movf	??___flge+1,w
 14846  1A58  00A5               	movwf	___flge@ff2+1
 14847  1A59  0828               	movf	??___flge,w
 14848  1A5A  00A4               	movwf	___flge@ff2
 14849  1A5B                     l950:	
 14850  1A5B  3080               	movlw	128
 14851  1A5C  06A3               	xorwf	___flge@ff1+3,f
 14852  1A5D  3080               	movlw	128
 14853  1A5E  06A7               	xorwf	___flge@ff2+3,f
 14854  1A5F  0827               	movf	___flge@ff2+3,w
 14855  1A60  0223               	subwf	___flge@ff1+3,w
 14856  1A61  1D03               	skipz
 14857  1A62  0008               	return
 14858  1A63  0826               	movf	___flge@ff2+2,w
 14859  1A64  0222               	subwf	___flge@ff1+2,w
 14860  1A65  1D03               	skipz
 14861  1A66  0008               	return
 14862  1A67  0825               	movf	___flge@ff2+1,w
 14863  1A68  0221               	subwf	___flge@ff1+1,w
 14864  1A69  1D03               	skipz
 14865  1A6A  0008               	return
 14866  1A6B  0824               	movf	___flge@ff2,w
 14867  1A6C  0220               	subwf	___flge@ff1,w
 14868  1A6D  0008               	return
 14869  1A6E                     __end_of___flge:	
 14870                           
 14871                           	psect	text52
 14872  00B5                     __ptext52:	
 14873 ;; *************** function _calcRequiredPower *****************
 14874 ;; Defined at:
 14875 ;;		line 165 in file "main.c"
 14876 ;; Parameters:    Size  Location     Type
 14877 ;;  data            2   74[BANK0 ] PTR struct .
 14878 ;;		 -> data(173), 
 14879 ;; Auto vars:     Size  Location     Type
 14880 ;;  T2              4   52[BANK1 ] float 
 14881 ;;  T1              4   48[BANK1 ] float 
 14882 ;;  A               4   40[BANK1 ] float 
 14883 ;;  phi             4   36[BANK1 ] float 
 14884 ;;  d               4   32[BANK1 ] float 
 14885 ;;  Rth             4    4[BANK1 ] float 
 14886 ;;  p               4    0[BANK1 ] float 
 14887 ;;  n               1   56[BANK1 ] unsigned char 
 14888 ;; Return value:  Size  Location     Type
 14889 ;;                  1    wreg      void 
 14890 ;; Registers used:
 14891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14892 ;; Tracked objects:
 14893 ;;		On entry : 0/0
 14894 ;;		On exit  : 0/0
 14895 ;;		Unchanged: 0/0
 14896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14897 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14898 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14899 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14900 ;;      Totals:         0       6      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14901 ;;Total ram usage:       63 bytes
 14902 ;; Hardware stack levels used:    1
 14903 ;; Hardware stack levels required when called:    5
 14904 ;; This function calls:
 14905 ;;		___fladd
 14906 ;;		___fldiv
 14907 ;;		___flmul
 14908 ;;		___flsub
 14909 ;; This function is called by:
 14910 ;;		_main
 14911 ;; This function uses a non-reentrant model
 14912 ;;
 14913                           
 14914                           
 14915                           ;psect for function _calcRequiredPower
 14916  00B5                     _calcRequiredPower:	
 14917                           
 14918                           ;main.c: 165: void calcRequiredPower(t_globalData *data);main.c: 166: {;main.c: 167:  ui
      +                          nt8_t n;;main.c: 168:  float d, A, T1, T2, phi;;main.c: 169:  float p, Rth;;main.c: 171:
      +                            for (n = 0; n < 4; n++) {
 14919                           
 14920                           ;incstack = 0
 14921                           ; Regs used in _calcRequiredPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14922  00B5  0141               	movlb	1	; select bank1
 14923  00B6  01D8               	clrf	calcRequiredPower@n^(0+128)
 14924  00B7                     l4905:	
 14925                           
 14926                           ;main.c: 173:   d = 0.0254 * data->chData[n].lensDia;
 14927  00B7  303C               	movlw	60
 14928  00B8  0140               	movlb	0	; select bank0
 14929  00B9  00B7               	movwf	___flmul@b+3
 14930  00BA  30D0               	movlw	208
 14931  00BB  00B6               	movwf	___flmul@b+2
 14932  00BC  3013               	movlw	19
 14933  00BD  00B5               	movwf	___flmul@b+1
 14934  00BE  30A9               	movlw	169
 14935  00BF  00B4               	movwf	___flmul@b
 14936  00C0  0141               	movlb	1	; select bank1
 14937  00C1  0858               	movf	calcRequiredPower@n^(0+128),w
 14938  00C2  0140               	movlb	0	; select bank0
 14939  00C3  00EC               	movwf	??_calcRequiredPower
 14940  00C4  01ED               	clrf	??_calcRequiredPower+1
 14941  00C5  3005               	movlw	5
 14942  00C6                     u5655:	
 14943  00C6  35EC               	lslf	??_calcRequiredPower,f
 14944  00C7  0DED               	rlf	??_calcRequiredPower+1,f
 14945  00C8  0B89               	decfsz	9,f
 14946  00C9  28C6               	goto	u5655
 14947  00CA  086C               	movf	??_calcRequiredPower,w
 14948  00CB  076A               	addwf	calcRequiredPower@data,w
 14949  00CC  00EE               	movwf	??_calcRequiredPower+2
 14950  00CD  086D               	movf	??_calcRequiredPower+1,w
 14951  00CE  3D6B               	addwfc	calcRequiredPower@data+1,w
 14952  00CF  00EF               	movwf	??_calcRequiredPower+3
 14953  00D0  086E               	movf	??_calcRequiredPower+2,w
 14954  00D1  3E43               	addlw	67
 14955  00D2  0086               	movwf	6
 14956  00D3  3000               	movlw	0
 14957  00D4  3D6F               	addwfc	??_calcRequiredPower+3,w
 14958  00D5  0087               	movwf	7
 14959  00D6  3F40               	moviw [0]fsr1
 14960  00D7  00B8               	movwf	___flmul@a
 14961  00D8  3F41               	moviw [1]fsr1
 14962  00D9  00B9               	movwf	___flmul@a+1
 14963  00DA  3F42               	moviw [2]fsr1
 14964  00DB  00BA               	movwf	___flmul@a+2
 14965  00DC  3F43               	moviw [3]fsr1
 14966  00DD  00BB               	movwf	___flmul@a+3
 14967  00DE  3185  2502  3180   	fcall	___flmul
 14968  00E1  0140               	movlb	0	; select bank0
 14969  00E2  0837               	movf	?___flmul+3,w
 14970  00E3  0141               	movlb	1	; select bank1
 14971  00E4  00C3               	movwf	(calcRequiredPower@d+3)^(0+128)
 14972  00E5  0140               	movlb	0	; select bank0
 14973  00E6  0836               	movf	?___flmul+2,w
 14974  00E7  0141               	movlb	1	; select bank1
 14975  00E8  00C2               	movwf	(calcRequiredPower@d+2)^(0+128)
 14976  00E9  0140               	movlb	0	; select bank0
 14977  00EA  0835               	movf	?___flmul+1,w
 14978  00EB  0141               	movlb	1	; select bank1
 14979  00EC  00C1               	movwf	(calcRequiredPower@d+1)^(0+128)
 14980  00ED  0140               	movlb	0	; select bank0
 14981  00EE  0834               	movf	?___flmul,w
 14982  00EF  0141               	movlb	1	; select bank1
 14983  00F0  00C0               	movwf	calcRequiredPower@d^(0+128)
 14984                           
 14985                           ;main.c: 174:   A = (3.14 * d * d) / 4;
 14986  00F1  3040               	movlw	64
 14987  00F2  0140               	movlb	0	; select bank0
 14988  00F3  00B7               	movwf	___flmul@b+3
 14989  00F4  3048               	movlw	72
 14990  00F5  00B6               	movwf	___flmul@b+2
 14991  00F6  30F5               	movlw	245
 14992  00F7  00B5               	movwf	___flmul@b+1
 14993  00F8  30C3               	movlw	195
 14994  00F9  00B4               	movwf	___flmul@b
 14995  00FA  0141               	movlb	1	; select bank1
 14996  00FB  0843               	movf	(calcRequiredPower@d+3)^(0+128),w
 14997  00FC  0140               	movlb	0	; select bank0
 14998  00FD  00BB               	movwf	___flmul@a+3
 14999  00FE  0141               	movlb	1	; select bank1
 15000  00FF  0842               	movf	(calcRequiredPower@d+2)^(0+128),w
 15001  0100  0140               	movlb	0	; select bank0
 15002  0101  00BA               	movwf	___flmul@a+2
 15003  0102  0141               	movlb	1	; select bank1
 15004  0103  0841               	movf	(calcRequiredPower@d+1)^(0+128),w
 15005  0104  0140               	movlb	0	; select bank0
 15006  0105  00B9               	movwf	___flmul@a+1
 15007  0106  0141               	movlb	1	; select bank1
 15008  0107  0840               	movf	calcRequiredPower@d^(0+128),w
 15009  0108  0140               	movlb	0	; select bank0
 15010  0109  00B8               	movwf	___flmul@a
 15011  010A  3185  2502  3180   	fcall	___flmul
 15012  010D  0140               	movlb	0	; select bank0
 15013  010E  0837               	movf	?___flmul+3,w
 15014  010F  0141               	movlb	1	; select bank1
 15015  0110  00CF               	movwf	(_calcRequiredPower$2138+3)^(0+128)
 15016  0111  0140               	movlb	0	; select bank0
 15017  0112  0836               	movf	?___flmul+2,w
 15018  0113  0141               	movlb	1	; select bank1
 15019  0114  00CE               	movwf	(_calcRequiredPower$2138+2)^(0+128)
 15020  0115  0140               	movlb	0	; select bank0
 15021  0116  0835               	movf	?___flmul+1,w
 15022  0117  0141               	movlb	1	; select bank1
 15023  0118  00CD               	movwf	(_calcRequiredPower$2138+1)^(0+128)
 15024  0119  0140               	movlb	0	; select bank0
 15025  011A  0834               	movf	?___flmul,w
 15026  011B  0141               	movlb	1	; select bank1
 15027  011C  00CC               	movwf	_calcRequiredPower$2138^(0+128)
 15028                           
 15029                           ;main.c: 174:   A = (3.14 * d * d) / 4;
 15030  011D  3040               	movlw	64
 15031  011E  0140               	movlb	0	; select bank0
 15032  011F  00D1               	movwf	___fldiv@a+3
 15033  0120  3080               	movlw	128
 15034  0121  00D0               	movwf	___fldiv@a+2
 15035  0122  3000               	movlw	0
 15036  0123  00CF               	movwf	___fldiv@a+1
 15037  0124  3000               	movlw	0
 15038  0125  00CE               	movwf	___fldiv@a
 15039  0126  0141               	movlb	1	; select bank1
 15040  0127  0843               	movf	(calcRequiredPower@d+3)^(0+128),w
 15041  0128  0140               	movlb	0	; select bank0
 15042  0129  00B7               	movwf	___flmul@b+3
 15043  012A  0141               	movlb	1	; select bank1
 15044  012B  0842               	movf	(calcRequiredPower@d+2)^(0+128),w
 15045  012C  0140               	movlb	0	; select bank0
 15046  012D  00B6               	movwf	___flmul@b+2
 15047  012E  0141               	movlb	1	; select bank1
 15048  012F  0841               	movf	(calcRequiredPower@d+1)^(0+128),w
 15049  0130  0140               	movlb	0	; select bank0
 15050  0131  00B5               	movwf	___flmul@b+1
 15051  0132  0141               	movlb	1	; select bank1
 15052  0133  0840               	movf	calcRequiredPower@d^(0+128),w
 15053  0134  0140               	movlb	0	; select bank0
 15054  0135  00B4               	movwf	___flmul@b
 15055  0136  0141               	movlb	1	; select bank1
 15056  0137  084F               	movf	(_calcRequiredPower$2138+3)^(0+128),w
 15057  0138  0140               	movlb	0	; select bank0
 15058  0139  00BB               	movwf	___flmul@a+3
 15059  013A  0141               	movlb	1	; select bank1
 15060  013B  084E               	movf	(_calcRequiredPower$2138+2)^(0+128),w
 15061  013C  0140               	movlb	0	; select bank0
 15062  013D  00BA               	movwf	___flmul@a+2
 15063  013E  0141               	movlb	1	; select bank1
 15064  013F  084D               	movf	(_calcRequiredPower$2138+1)^(0+128),w
 15065  0140  0140               	movlb	0	; select bank0
 15066  0141  00B9               	movwf	___flmul@a+1
 15067  0142  0141               	movlb	1	; select bank1
 15068  0143  084C               	movf	_calcRequiredPower$2138^(0+128),w
 15069  0144  0140               	movlb	0	; select bank0
 15070  0145  00B8               	movwf	___flmul@a
 15071  0146  3185  2502  3180   	fcall	___flmul
 15072  0149  0140               	movlb	0	; select bank0
 15073  014A  0837               	movf	?___flmul+3,w
 15074  014B  00D5               	movwf	___fldiv@b+3
 15075  014C  0836               	movf	?___flmul+2,w
 15076  014D  00D4               	movwf	___fldiv@b+2
 15077  014E  0835               	movf	?___flmul+1,w
 15078  014F  00D3               	movwf	___fldiv@b+1
 15079  0150  0834               	movf	?___flmul,w
 15080  0151  00D2               	movwf	___fldiv@b
 15081  0152  3193  2374  3180   	fcall	___fldiv
 15082  0155  0140               	movlb	0	; select bank0
 15083  0156  0851               	movf	?___fldiv+3,w
 15084  0157  0141               	movlb	1	; select bank1
 15085  0158  00CB               	movwf	(calcRequiredPower@A+3)^(0+128)
 15086  0159  0140               	movlb	0	; select bank0
 15087  015A  0850               	movf	?___fldiv+2,w
 15088  015B  0141               	movlb	1	; select bank1
 15089  015C  00CA               	movwf	(calcRequiredPower@A+2)^(0+128)
 15090  015D  0140               	movlb	0	; select bank0
 15091  015E  084F               	movf	?___fldiv+1,w
 15092  015F  0141               	movlb	1	; select bank1
 15093  0160  00C9               	movwf	(calcRequiredPower@A+1)^(0+128)
 15094  0161  0140               	movlb	0	; select bank0
 15095  0162  084E               	movf	?___fldiv,w
 15096  0163  0141               	movlb	1	; select bank1
 15097  0164  00C8               	movwf	calcRequiredPower@A^(0+128)
 15098                           
 15099                           ;main.c: 176:   T1 = data->dewPointC + data->dpOffset + 273.15;
 15100  0165  0140               	movlb	0	; select bank0
 15101  0166  086A               	movf	calcRequiredPower@data,w
 15102  0167  3E20               	addlw	32
 15103  0168  0086               	movwf	6
 15104  0169  3000               	movlw	0
 15105  016A  3D6B               	addwfc	calcRequiredPower@data+1,w
 15106  016B  0087               	movwf	7
 15107  016C  3F40               	moviw [0]fsr1
 15108  016D  00CE               	movwf	___fladd@b
 15109  016E  3F41               	moviw [1]fsr1
 15110  016F  00CF               	movwf	___fladd@b+1
 15111  0170  3F42               	moviw [2]fsr1
 15112  0171  00D0               	movwf	___fladd@b+2
 15113  0172  3F43               	moviw [3]fsr1
 15114  0173  00D1               	movwf	___fladd@b+3
 15115  0174  086A               	movf	calcRequiredPower@data,w
 15116  0175  0086               	movwf	6
 15117  0176  086B               	movf	calcRequiredPower@data+1,w
 15118  0177  0087               	movwf	7
 15119  0178  3148               	addfsr 1,8
 15120  0179  3F40               	moviw [0]fsr1
 15121  017A  00D2               	movwf	___fladd@a
 15122  017B  3F41               	moviw [1]fsr1
 15123  017C  00D3               	movwf	___fladd@a+1
 15124  017D  3F42               	moviw [2]fsr1
 15125  017E  00D4               	movwf	___fladd@a+2
 15126  017F  3F43               	moviw [3]fsr1
 15127  0180  00D5               	movwf	___fladd@a+3
 15128  0181  318C  241B  3180   	fcall	___fladd
 15129  0184  0140               	movlb	0	; select bank0
 15130  0185  0851               	movf	?___fladd+3,w
 15131  0186  0141               	movlb	1	; select bank1
 15132  0187  00AB               	movwf	(_calcRequiredPower$2139+3)^(0+128)
 15133  0188  0140               	movlb	0	; select bank0
 15134  0189  0850               	movf	?___fladd+2,w
 15135  018A  0141               	movlb	1	; select bank1
 15136  018B  00AA               	movwf	(_calcRequiredPower$2139+2)^(0+128)
 15137  018C  0140               	movlb	0	; select bank0
 15138  018D  084F               	movf	?___fladd+1,w
 15139  018E  0141               	movlb	1	; select bank1
 15140  018F  00A9               	movwf	(_calcRequiredPower$2139+1)^(0+128)
 15141  0190  0140               	movlb	0	; select bank0
 15142  0191  084E               	movf	?___fladd,w
 15143  0192  0141               	movlb	1	; select bank1
 15144  0193  00A8               	movwf	_calcRequiredPower$2139^(0+128)
 15145                           
 15146                           ;main.c: 176:   T1 = data->dewPointC + data->dpOffset + 273.15;
 15147  0194  3043               	movlw	67
 15148  0195  0140               	movlb	0	; select bank0
 15149  0196  00D1               	movwf	___fladd@b+3
 15150  0197  3088               	movlw	136
 15151  0198  00D0               	movwf	___fladd@b+2
 15152  0199  3093               	movlw	147
 15153  019A  00CF               	movwf	___fladd@b+1
 15154  019B  3033               	movlw	51
 15155  019C  00CE               	movwf	___fladd@b
 15156  019D  0141               	movlb	1	; select bank1
 15157  019E  082B               	movf	(_calcRequiredPower$2139+3)^(0+128),w
 15158  019F  0140               	movlb	0	; select bank0
 15159  01A0  00D5               	movwf	___fladd@a+3
 15160  01A1  0141               	movlb	1	; select bank1
 15161  01A2  082A               	movf	(_calcRequiredPower$2139+2)^(0+128),w
 15162  01A3  0140               	movlb	0	; select bank0
 15163  01A4  00D4               	movwf	___fladd@a+2
 15164  01A5  0141               	movlb	1	; select bank1
 15165  01A6  0829               	movf	(_calcRequiredPower$2139+1)^(0+128),w
 15166  01A7  0140               	movlb	0	; select bank0
 15167  01A8  00D3               	movwf	___fladd@a+1
 15168  01A9  0141               	movlb	1	; select bank1
 15169  01AA  0828               	movf	_calcRequiredPower$2139^(0+128),w
 15170  01AB  0140               	movlb	0	; select bank0
 15171  01AC  00D2               	movwf	___fladd@a
 15172  01AD  318C  241B  3180   	fcall	___fladd
 15173  01B0  0140               	movlb	0	; select bank0
 15174  01B1  0851               	movf	?___fladd+3,w
 15175  01B2  0141               	movlb	1	; select bank1
 15176  01B3  00D3               	movwf	(calcRequiredPower@T1+3)^(0+128)
 15177  01B4  0140               	movlb	0	; select bank0
 15178  01B5  0850               	movf	?___fladd+2,w
 15179  01B6  0141               	movlb	1	; select bank1
 15180  01B7  00D2               	movwf	(calcRequiredPower@T1+2)^(0+128)
 15181  01B8  0140               	movlb	0	; select bank0
 15182  01B9  084F               	movf	?___fladd+1,w
 15183  01BA  0141               	movlb	1	; select bank1
 15184  01BB  00D1               	movwf	(calcRequiredPower@T1+1)^(0+128)
 15185  01BC  0140               	movlb	0	; select bank0
 15186  01BD  084E               	movf	?___fladd,w
 15187  01BE  0141               	movlb	1	; select bank1
 15188  01BF  00D0               	movwf	calcRequiredPower@T1^(0+128)
 15189                           
 15190                           ;main.c: 177:   T2 = data->skyTemp + 273.15;
 15191  01C0  3043               	movlw	67
 15192  01C1  0140               	movlb	0	; select bank0
 15193  01C2  00D1               	movwf	___fladd@b+3
 15194  01C3  3088               	movlw	136
 15195  01C4  00D0               	movwf	___fladd@b+2
 15196  01C5  3093               	movlw	147
 15197  01C6  00CF               	movwf	___fladd@b+1
 15198  01C7  3033               	movlw	51
 15199  01C8  00CE               	movwf	___fladd@b
 15200  01C9  086A               	movf	calcRequiredPower@data,w
 15201  01CA  3E24               	addlw	36
 15202  01CB  0086               	movwf	6
 15203  01CC  3000               	movlw	0
 15204  01CD  3D6B               	addwfc	calcRequiredPower@data+1,w
 15205  01CE  0087               	movwf	7
 15206  01CF  3F40               	moviw [0]fsr1
 15207  01D0  00D2               	movwf	___fladd@a
 15208  01D1  3F41               	moviw [1]fsr1
 15209  01D2  00D3               	movwf	___fladd@a+1
 15210  01D3  3F42               	moviw [2]fsr1
 15211  01D4  00D4               	movwf	___fladd@a+2
 15212  01D5  3F43               	moviw [3]fsr1
 15213  01D6  00D5               	movwf	___fladd@a+3
 15214  01D7  318C  241B  3180   	fcall	___fladd
 15215  01DA  0140               	movlb	0	; select bank0
 15216  01DB  0851               	movf	?___fladd+3,w
 15217  01DC  0141               	movlb	1	; select bank1
 15218  01DD  00D7               	movwf	(calcRequiredPower@T2+3)^(0+128)
 15219  01DE  0140               	movlb	0	; select bank0
 15220  01DF  0850               	movf	?___fladd+2,w
 15221  01E0  0141               	movlb	1	; select bank1
 15222  01E1  00D6               	movwf	(calcRequiredPower@T2+2)^(0+128)
 15223  01E2  0140               	movlb	0	; select bank0
 15224  01E3  084F               	movf	?___fladd+1,w
 15225  01E4  0141               	movlb	1	; select bank1
 15226  01E5  00D5               	movwf	(calcRequiredPower@T2+1)^(0+128)
 15227  01E6  0140               	movlb	0	; select bank0
 15228  01E7  084E               	movf	?___fladd,w
 15229  01E8  0141               	movlb	1	; select bank1
 15230  01E9  00D4               	movwf	calcRequiredPower@T2^(0+128)
 15231                           
 15232                           ;main.c: 179:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15233  01EA  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 15234  01EB  0140               	movlb	0	; select bank0
 15235  01EC  00B7               	movwf	___flmul@b+3
 15236  01ED  0141               	movlb	1	; select bank1
 15237  01EE  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 15238  01EF  0140               	movlb	0	; select bank0
 15239  01F0  00B6               	movwf	___flmul@b+2
 15240  01F1  0141               	movlb	1	; select bank1
 15241  01F2  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 15242  01F3  0140               	movlb	0	; select bank0
 15243  01F4  00B5               	movwf	___flmul@b+1
 15244  01F5  0141               	movlb	1	; select bank1
 15245  01F6  0854               	movf	calcRequiredPower@T2^(0+128),w
 15246  01F7  0140               	movlb	0	; select bank0
 15247  01F8  00B4               	movwf	___flmul@b
 15248  01F9  0141               	movlb	1	; select bank1
 15249  01FA  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 15250  01FB  0140               	movlb	0	; select bank0
 15251  01FC  00BB               	movwf	___flmul@a+3
 15252  01FD  0141               	movlb	1	; select bank1
 15253  01FE  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 15254  01FF  0140               	movlb	0	; select bank0
 15255  0200  00BA               	movwf	___flmul@a+2
 15256  0201  0141               	movlb	1	; select bank1
 15257  0202  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 15258  0203  0140               	movlb	0	; select bank0
 15259  0204  00B9               	movwf	___flmul@a+1
 15260  0205  0141               	movlb	1	; select bank1
 15261  0206  0854               	movf	calcRequiredPower@T2^(0+128),w
 15262  0207  0140               	movlb	0	; select bank0
 15263  0208  00B8               	movwf	___flmul@a
 15264  0209  3185  2502  3180   	fcall	___flmul
 15265  020C  0140               	movlb	0	; select bank0
 15266  020D  0837               	movf	?___flmul+3,w
 15267  020E  0141               	movlb	1	; select bank1
 15268  020F  00CF               	movwf	(_calcRequiredPower$2138+3)^(0+128)
 15269  0210  0140               	movlb	0	; select bank0
 15270  0211  0836               	movf	?___flmul+2,w
 15271  0212  0141               	movlb	1	; select bank1
 15272  0213  00CE               	movwf	(_calcRequiredPower$2138+2)^(0+128)
 15273  0214  0140               	movlb	0	; select bank0
 15274  0215  0835               	movf	?___flmul+1,w
 15275  0216  0141               	movlb	1	; select bank1
 15276  0217  00CD               	movwf	(_calcRequiredPower$2138+1)^(0+128)
 15277  0218  0140               	movlb	0	; select bank0
 15278  0219  0834               	movf	?___flmul,w
 15279  021A  0141               	movlb	1	; select bank1
 15280  021B  00CC               	movwf	_calcRequiredPower$2138^(0+128)
 15281                           
 15282                           ;main.c: 179:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15283  021C  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 15284  021D  0140               	movlb	0	; select bank0
 15285  021E  00B7               	movwf	___flmul@b+3
 15286  021F  0141               	movlb	1	; select bank1
 15287  0220  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 15288  0221  0140               	movlb	0	; select bank0
 15289  0222  00B6               	movwf	___flmul@b+2
 15290  0223  0141               	movlb	1	; select bank1
 15291  0224  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 15292  0225  0140               	movlb	0	; select bank0
 15293  0226  00B5               	movwf	___flmul@b+1
 15294  0227  0141               	movlb	1	; select bank1
 15295  0228  0854               	movf	calcRequiredPower@T2^(0+128),w
 15296  0229  0140               	movlb	0	; select bank0
 15297  022A  00B4               	movwf	___flmul@b
 15298  022B  0141               	movlb	1	; select bank1
 15299  022C  084F               	movf	(_calcRequiredPower$2138+3)^(0+128),w
 15300  022D  0140               	movlb	0	; select bank0
 15301  022E  00BB               	movwf	___flmul@a+3
 15302  022F  0141               	movlb	1	; select bank1
 15303  0230  084E               	movf	(_calcRequiredPower$2138+2)^(0+128),w
 15304  0231  0140               	movlb	0	; select bank0
 15305  0232  00BA               	movwf	___flmul@a+2
 15306  0233  0141               	movlb	1	; select bank1
 15307  0234  084D               	movf	(_calcRequiredPower$2138+1)^(0+128),w
 15308  0235  0140               	movlb	0	; select bank0
 15309  0236  00B9               	movwf	___flmul@a+1
 15310  0237  0141               	movlb	1	; select bank1
 15311  0238  084C               	movf	_calcRequiredPower$2138^(0+128),w
 15312  0239  0140               	movlb	0	; select bank0
 15313  023A  00B8               	movwf	___flmul@a
 15314  023B  3185  2502  3180   	fcall	___flmul
 15315  023E  0140               	movlb	0	; select bank0
 15316  023F  0837               	movf	?___flmul+3,w
 15317  0240  0141               	movlb	1	; select bank1
 15318  0241  00AF               	movwf	(_calcRequiredPower$2140+3)^(0+128)
 15319  0242  0140               	movlb	0	; select bank0
 15320  0243  0836               	movf	?___flmul+2,w
 15321  0244  0141               	movlb	1	; select bank1
 15322  0245  00AE               	movwf	(_calcRequiredPower$2140+2)^(0+128)
 15323  0246  0140               	movlb	0	; select bank0
 15324  0247  0835               	movf	?___flmul+1,w
 15325  0248  0141               	movlb	1	; select bank1
 15326  0249  00AD               	movwf	(_calcRequiredPower$2140+1)^(0+128)
 15327  024A  0140               	movlb	0	; select bank0
 15328  024B  0834               	movf	?___flmul,w
 15329  024C  0141               	movlb	1	; select bank1
 15330  024D  00AC               	movwf	_calcRequiredPower$2140^(0+128)
 15331                           
 15332                           ;main.c: 179:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15333  024E  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 15334  024F  0140               	movlb	0	; select bank0
 15335  0250  00B7               	movwf	___flmul@b+3
 15336  0251  0141               	movlb	1	; select bank1
 15337  0252  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 15338  0253  0140               	movlb	0	; select bank0
 15339  0254  00B6               	movwf	___flmul@b+2
 15340  0255  0141               	movlb	1	; select bank1
 15341  0256  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 15342  0257  0140               	movlb	0	; select bank0
 15343  0258  00B5               	movwf	___flmul@b+1
 15344  0259  0141               	movlb	1	; select bank1
 15345  025A  0850               	movf	calcRequiredPower@T1^(0+128),w
 15346  025B  0140               	movlb	0	; select bank0
 15347  025C  00B4               	movwf	___flmul@b
 15348  025D  0141               	movlb	1	; select bank1
 15349  025E  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 15350  025F  0140               	movlb	0	; select bank0
 15351  0260  00BB               	movwf	___flmul@a+3
 15352  0261  0141               	movlb	1	; select bank1
 15353  0262  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 15354  0263  0140               	movlb	0	; select bank0
 15355  0264  00BA               	movwf	___flmul@a+2
 15356  0265  0141               	movlb	1	; select bank1
 15357  0266  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 15358  0267  0140               	movlb	0	; select bank0
 15359  0268  00B9               	movwf	___flmul@a+1
 15360  0269  0141               	movlb	1	; select bank1
 15361  026A  0850               	movf	calcRequiredPower@T1^(0+128),w
 15362  026B  0140               	movlb	0	; select bank0
 15363  026C  00B8               	movwf	___flmul@a
 15364  026D  3185  2502  3180   	fcall	___flmul
 15365  0270  0140               	movlb	0	; select bank0
 15366  0271  0837               	movf	?___flmul+3,w
 15367  0272  0141               	movlb	1	; select bank1
 15368  0273  00B3               	movwf	(_calcRequiredPower$2141+3)^(0+128)
 15369  0274  0140               	movlb	0	; select bank0
 15370  0275  0836               	movf	?___flmul+2,w
 15371  0276  0141               	movlb	1	; select bank1
 15372  0277  00B2               	movwf	(_calcRequiredPower$2141+2)^(0+128)
 15373  0278  0140               	movlb	0	; select bank0
 15374  0279  0835               	movf	?___flmul+1,w
 15375  027A  0141               	movlb	1	; select bank1
 15376  027B  00B1               	movwf	(_calcRequiredPower$2141+1)^(0+128)
 15377  027C  0140               	movlb	0	; select bank0
 15378  027D  0834               	movf	?___flmul,w
 15379  027E  0141               	movlb	1	; select bank1
 15380  027F  00B0               	movwf	_calcRequiredPower$2141^(0+128)
 15381                           
 15382                           ;main.c: 179:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15383  0280  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 15384  0281  0140               	movlb	0	; select bank0
 15385  0282  00B7               	movwf	___flmul@b+3
 15386  0283  0141               	movlb	1	; select bank1
 15387  0284  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 15388  0285  0140               	movlb	0	; select bank0
 15389  0286  00B6               	movwf	___flmul@b+2
 15390  0287  0141               	movlb	1	; select bank1
 15391  0288  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 15392  0289  0140               	movlb	0	; select bank0
 15393  028A  00B5               	movwf	___flmul@b+1
 15394  028B  0141               	movlb	1	; select bank1
 15395  028C  0850               	movf	calcRequiredPower@T1^(0+128),w
 15396  028D  0140               	movlb	0	; select bank0
 15397  028E  00B4               	movwf	___flmul@b
 15398  028F  0141               	movlb	1	; select bank1
 15399  0290  0833               	movf	(_calcRequiredPower$2141+3)^(0+128),w
 15400  0291  0140               	movlb	0	; select bank0
 15401  0292  00BB               	movwf	___flmul@a+3
 15402  0293  0141               	movlb	1	; select bank1
 15403  0294  0832               	movf	(_calcRequiredPower$2141+2)^(0+128),w
 15404  0295  0140               	movlb	0	; select bank0
 15405  0296  00BA               	movwf	___flmul@a+2
 15406  0297  0141               	movlb	1	; select bank1
 15407  0298  0831               	movf	(_calcRequiredPower$2141+1)^(0+128),w
 15408  0299  0140               	movlb	0	; select bank0
 15409  029A  00B9               	movwf	___flmul@a+1
 15410  029B  0141               	movlb	1	; select bank1
 15411  029C  0830               	movf	_calcRequiredPower$2141^(0+128),w
 15412  029D  0140               	movlb	0	; select bank0
 15413  029E  00B8               	movwf	___flmul@a
 15414  029F  3185  2502  3180   	fcall	___flmul
 15415  02A2  0140               	movlb	0	; select bank0
 15416  02A3  0837               	movf	?___flmul+3,w
 15417  02A4  0141               	movlb	1	; select bank1
 15418  02A5  00B7               	movwf	(_calcRequiredPower$2142+3)^(0+128)
 15419  02A6  0140               	movlb	0	; select bank0
 15420  02A7  0836               	movf	?___flmul+2,w
 15421  02A8  0141               	movlb	1	; select bank1
 15422  02A9  00B6               	movwf	(_calcRequiredPower$2142+2)^(0+128)
 15423  02AA  0140               	movlb	0	; select bank0
 15424  02AB  0835               	movf	?___flmul+1,w
 15425  02AC  0141               	movlb	1	; select bank1
 15426  02AD  00B5               	movwf	(_calcRequiredPower$2142+1)^(0+128)
 15427  02AE  0140               	movlb	0	; select bank0
 15428  02AF  0834               	movf	?___flmul,w
 15429  02B0  0141               	movlb	1	; select bank1
 15430  02B1  00B4               	movwf	_calcRequiredPower$2142^(0+128)
 15431                           
 15432                           ;main.c: 179:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15433  02B2  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 15434  02B3  0140               	movlb	0	; select bank0
 15435  02B4  00B7               	movwf	___flmul@b+3
 15436  02B5  0141               	movlb	1	; select bank1
 15437  02B6  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 15438  02B7  0140               	movlb	0	; select bank0
 15439  02B8  00B6               	movwf	___flmul@b+2
 15440  02B9  0141               	movlb	1	; select bank1
 15441  02BA  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 15442  02BB  0140               	movlb	0	; select bank0
 15443  02BC  00B5               	movwf	___flmul@b+1
 15444  02BD  0141               	movlb	1	; select bank1
 15445  02BE  0854               	movf	calcRequiredPower@T2^(0+128),w
 15446  02BF  0140               	movlb	0	; select bank0
 15447  02C0  00B4               	movwf	___flmul@b
 15448  02C1  0141               	movlb	1	; select bank1
 15449  02C2  082F               	movf	(_calcRequiredPower$2140+3)^(0+128),w
 15450  02C3  0140               	movlb	0	; select bank0
 15451  02C4  00BB               	movwf	___flmul@a+3
 15452  02C5  0141               	movlb	1	; select bank1
 15453  02C6  082E               	movf	(_calcRequiredPower$2140+2)^(0+128),w
 15454  02C7  0140               	movlb	0	; select bank0
 15455  02C8  00BA               	movwf	___flmul@a+2
 15456  02C9  0141               	movlb	1	; select bank1
 15457  02CA  082D               	movf	(_calcRequiredPower$2140+1)^(0+128),w
 15458  02CB  0140               	movlb	0	; select bank0
 15459  02CC  00B9               	movwf	___flmul@a+1
 15460  02CD  0141               	movlb	1	; select bank1
 15461  02CE  082C               	movf	_calcRequiredPower$2140^(0+128),w
 15462  02CF  0140               	movlb	0	; select bank0
 15463  02D0  00B8               	movwf	___flmul@a
 15464  02D1  3185  2502  3180   	fcall	___flmul
 15465  02D4  0140               	movlb	0	; select bank0
 15466  02D5  0837               	movf	?___flmul+3,w
 15467  02D6  00E5               	movwf	___flsub@a+3
 15468  02D7  0836               	movf	?___flmul+2,w
 15469  02D8  00E4               	movwf	___flsub@a+2
 15470  02D9  0835               	movf	?___flmul+1,w
 15471  02DA  00E3               	movwf	___flsub@a+1
 15472  02DB  0834               	movf	?___flmul,w
 15473  02DC  00E2               	movwf	___flsub@a
 15474  02DD  0141               	movlb	1	; select bank1
 15475  02DE  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 15476  02DF  0140               	movlb	0	; select bank0
 15477  02E0  00B7               	movwf	___flmul@b+3
 15478  02E1  0141               	movlb	1	; select bank1
 15479  02E2  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 15480  02E3  0140               	movlb	0	; select bank0
 15481  02E4  00B6               	movwf	___flmul@b+2
 15482  02E5  0141               	movlb	1	; select bank1
 15483  02E6  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 15484  02E7  0140               	movlb	0	; select bank0
 15485  02E8  00B5               	movwf	___flmul@b+1
 15486  02E9  0141               	movlb	1	; select bank1
 15487  02EA  0850               	movf	calcRequiredPower@T1^(0+128),w
 15488  02EB  0140               	movlb	0	; select bank0
 15489  02EC  00B4               	movwf	___flmul@b
 15490  02ED  0141               	movlb	1	; select bank1
 15491  02EE  0837               	movf	(_calcRequiredPower$2142+3)^(0+128),w
 15492  02EF  0140               	movlb	0	; select bank0
 15493  02F0  00BB               	movwf	___flmul@a+3
 15494  02F1  0141               	movlb	1	; select bank1
 15495  02F2  0836               	movf	(_calcRequiredPower$2142+2)^(0+128),w
 15496  02F3  0140               	movlb	0	; select bank0
 15497  02F4  00BA               	movwf	___flmul@a+2
 15498  02F5  0141               	movlb	1	; select bank1
 15499  02F6  0835               	movf	(_calcRequiredPower$2142+1)^(0+128),w
 15500  02F7  0140               	movlb	0	; select bank0
 15501  02F8  00B9               	movwf	___flmul@a+1
 15502  02F9  0141               	movlb	1	; select bank1
 15503  02FA  0834               	movf	_calcRequiredPower$2142^(0+128),w
 15504  02FB  0140               	movlb	0	; select bank0
 15505  02FC  00B8               	movwf	___flmul@a
 15506  02FD  3185  2502  3180   	fcall	___flmul
 15507  0300  0140               	movlb	0	; select bank0
 15508  0301  0837               	movf	?___flmul+3,w
 15509  0302  00E9               	movwf	___flsub@b+3
 15510  0303  0836               	movf	?___flmul+2,w
 15511  0304  00E8               	movwf	___flsub@b+2
 15512  0305  0835               	movf	?___flmul+1,w
 15513  0306  00E7               	movwf	___flsub@b+1
 15514  0307  0834               	movf	?___flmul,w
 15515  0308  00E6               	movwf	___flsub@b
 15516  0309  31A2  2269  3180   	fcall	___flsub
 15517  030C  0140               	movlb	0	; select bank0
 15518  030D  0865               	movf	?___flsub+3,w
 15519  030E  0141               	movlb	1	; select bank1
 15520  030F  00BB               	movwf	(_calcRequiredPower$2143+3)^(0+128)
 15521  0310  0140               	movlb	0	; select bank0
 15522  0311  0864               	movf	?___flsub+2,w
 15523  0312  0141               	movlb	1	; select bank1
 15524  0313  00BA               	movwf	(_calcRequiredPower$2143+2)^(0+128)
 15525  0314  0140               	movlb	0	; select bank0
 15526  0315  0863               	movf	?___flsub+1,w
 15527  0316  0141               	movlb	1	; select bank1
 15528  0317  00B9               	movwf	(_calcRequiredPower$2143+1)^(0+128)
 15529  0318  0140               	movlb	0	; select bank0
 15530  0319  0862               	movf	?___flsub,w
 15531  031A  0141               	movlb	1	; select bank1
 15532  031B  00B8               	movwf	_calcRequiredPower$2143^(0+128)
 15533                           
 15534                           ;main.c: 179:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15535  031C  3033               	movlw	51
 15536  031D  0140               	movlb	0	; select bank0
 15537  031E  00B7               	movwf	___flmul@b+3
 15538  031F  3067               	movlw	103
 15539  0320  00B6               	movwf	___flmul@b+2
 15540  0321  3059               	movlw	89
 15541  0322  00B5               	movwf	___flmul@b+1
 15542  0323  3032               	movlw	50
 15543  0324  00B4               	movwf	___flmul@b
 15544  0325  0141               	movlb	1	; select bank1
 15545  0326  084B               	movf	(calcRequiredPower@A+3)^(0+128),w
 15546  0327  0140               	movlb	0	; select bank0
 15547  0328  00BB               	movwf	___flmul@a+3
 15548  0329  0141               	movlb	1	; select bank1
 15549  032A  084A               	movf	(calcRequiredPower@A+2)^(0+128),w
 15550  032B  0140               	movlb	0	; select bank0
 15551  032C  00BA               	movwf	___flmul@a+2
 15552  032D  0141               	movlb	1	; select bank1
 15553  032E  0849               	movf	(calcRequiredPower@A+1)^(0+128),w
 15554  032F  0140               	movlb	0	; select bank0
 15555  0330  00B9               	movwf	___flmul@a+1
 15556  0331  0141               	movlb	1	; select bank1
 15557  0332  0848               	movf	calcRequiredPower@A^(0+128),w
 15558  0333  0140               	movlb	0	; select bank0
 15559  0334  00B8               	movwf	___flmul@a
 15560  0335  3185  2502  3180   	fcall	___flmul
 15561  0338  0140               	movlb	0	; select bank0
 15562  0339  0837               	movf	?___flmul+3,w
 15563  033A  0141               	movlb	1	; select bank1
 15564  033B  00BF               	movwf	(_calcRequiredPower$2144+3)^(0+128)
 15565  033C  0140               	movlb	0	; select bank0
 15566  033D  0836               	movf	?___flmul+2,w
 15567  033E  0141               	movlb	1	; select bank1
 15568  033F  00BE               	movwf	(_calcRequiredPower$2144+2)^(0+128)
 15569  0340  0140               	movlb	0	; select bank0
 15570  0341  0835               	movf	?___flmul+1,w
 15571  0342  0141               	movlb	1	; select bank1
 15572  0343  00BD               	movwf	(_calcRequiredPower$2144+1)^(0+128)
 15573  0344  0140               	movlb	0	; select bank0
 15574  0345  0834               	movf	?___flmul,w
 15575  0346  0141               	movlb	1	; select bank1
 15576  0347  00BC               	movwf	_calcRequiredPower$2144^(0+128)
 15577                           
 15578                           ;main.c: 179:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 15579  0348  083B               	movf	(_calcRequiredPower$2143+3)^(0+128),w
 15580  0349  0140               	movlb	0	; select bank0
 15581  034A  00B7               	movwf	___flmul@b+3
 15582  034B  0141               	movlb	1	; select bank1
 15583  034C  083A               	movf	(_calcRequiredPower$2143+2)^(0+128),w
 15584  034D  0140               	movlb	0	; select bank0
 15585  034E  00B6               	movwf	___flmul@b+2
 15586  034F  0141               	movlb	1	; select bank1
 15587  0350  0839               	movf	(_calcRequiredPower$2143+1)^(0+128),w
 15588  0351  0140               	movlb	0	; select bank0
 15589  0352  00B5               	movwf	___flmul@b+1
 15590  0353  0141               	movlb	1	; select bank1
 15591  0354  0838               	movf	_calcRequiredPower$2143^(0+128),w
 15592  0355  0140               	movlb	0	; select bank0
 15593  0356  00B4               	movwf	___flmul@b
 15594  0357  0141               	movlb	1	; select bank1
 15595  0358  083F               	movf	(_calcRequiredPower$2144+3)^(0+128),w
 15596  0359  0140               	movlb	0	; select bank0
 15597  035A  00BB               	movwf	___flmul@a+3
 15598  035B  0141               	movlb	1	; select bank1
 15599  035C  083E               	movf	(_calcRequiredPower$2144+2)^(0+128),w
 15600  035D  0140               	movlb	0	; select bank0
 15601  035E  00BA               	movwf	___flmul@a+2
 15602  035F  0141               	movlb	1	; select bank1
 15603  0360  083D               	movf	(_calcRequiredPower$2144+1)^(0+128),w
 15604  0361  0140               	movlb	0	; select bank0
 15605  0362  00B9               	movwf	___flmul@a+1
 15606  0363  0141               	movlb	1	; select bank1
 15607  0364  083C               	movf	_calcRequiredPower$2144^(0+128),w
 15608  0365  0140               	movlb	0	; select bank0
 15609  0366  00B8               	movwf	___flmul@a
 15610  0367  3185  2502  3180   	fcall	___flmul
 15611  036A  0140               	movlb	0	; select bank0
 15612  036B  0837               	movf	?___flmul+3,w
 15613  036C  0141               	movlb	1	; select bank1
 15614  036D  00C7               	movwf	(calcRequiredPower@phi+3)^(0+128)
 15615  036E  0140               	movlb	0	; select bank0
 15616  036F  0836               	movf	?___flmul+2,w
 15617  0370  0141               	movlb	1	; select bank1
 15618  0371  00C6               	movwf	(calcRequiredPower@phi+2)^(0+128)
 15619  0372  0140               	movlb	0	; select bank0
 15620  0373  0835               	movf	?___flmul+1,w
 15621  0374  0141               	movlb	1	; select bank1
 15622  0375  00C5               	movwf	(calcRequiredPower@phi+1)^(0+128)
 15623  0376  0140               	movlb	0	; select bank0
 15624  0377  0834               	movf	?___flmul,w
 15625  0378  0141               	movlb	1	; select bank1
 15626  0379  00C4               	movwf	calcRequiredPower@phi^(0+128)
 15627                           
 15628                           ;main.c: 181:   data->chData[n].Preq = phi * data->fudgeFactor;
 15629  037A  0847               	movf	(calcRequiredPower@phi+3)^(0+128),w
 15630  037B  0140               	movlb	0	; select bank0
 15631  037C  00B7               	movwf	___flmul@b+3
 15632  037D  0141               	movlb	1	; select bank1
 15633  037E  0846               	movf	(calcRequiredPower@phi+2)^(0+128),w
 15634  037F  0140               	movlb	0	; select bank0
 15635  0380  00B6               	movwf	___flmul@b+2
 15636  0381  0141               	movlb	1	; select bank1
 15637  0382  0845               	movf	(calcRequiredPower@phi+1)^(0+128),w
 15638  0383  0140               	movlb	0	; select bank0
 15639  0384  00B5               	movwf	___flmul@b+1
 15640  0385  0141               	movlb	1	; select bank1
 15641  0386  0844               	movf	calcRequiredPower@phi^(0+128),w
 15642  0387  0140               	movlb	0	; select bank0
 15643  0388  00B4               	movwf	___flmul@b
 15644  0389  086A               	movf	calcRequiredPower@data,w
 15645  038A  3E28               	addlw	40
 15646  038B  0086               	movwf	6
 15647  038C  3000               	movlw	0
 15648  038D  3D6B               	addwfc	calcRequiredPower@data+1,w
 15649  038E  0087               	movwf	7
 15650  038F  3F40               	moviw [0]fsr1
 15651  0390  00B8               	movwf	___flmul@a
 15652  0391  3F41               	moviw [1]fsr1
 15653  0392  00B9               	movwf	___flmul@a+1
 15654  0393  3F42               	moviw [2]fsr1
 15655  0394  00BA               	movwf	___flmul@a+2
 15656  0395  3F43               	moviw [3]fsr1
 15657  0396  00BB               	movwf	___flmul@a+3
 15658  0397  3185  2502  3180   	fcall	___flmul
 15659  039A  0141               	movlb	1	; select bank1
 15660  039B  0858               	movf	calcRequiredPower@n^(0+128),w
 15661  039C  0140               	movlb	0	; select bank0
 15662  039D  00EC               	movwf	??_calcRequiredPower
 15663  039E  01ED               	clrf	??_calcRequiredPower+1
 15664  039F  3005               	movlw	5
 15665  03A0                     u5665:	
 15666  03A0  35EC               	lslf	??_calcRequiredPower,f
 15667  03A1  0DED               	rlf	??_calcRequiredPower+1,f
 15668  03A2  0B89               	decfsz	9,f
 15669  03A3  2BA0               	goto	u5665
 15670  03A4  086C               	movf	??_calcRequiredPower,w
 15671  03A5  076A               	addwf	calcRequiredPower@data,w
 15672  03A6  00EE               	movwf	??_calcRequiredPower+2
 15673  03A7  086D               	movf	??_calcRequiredPower+1,w
 15674  03A8  3D6B               	addwfc	calcRequiredPower@data+1,w
 15675  03A9  00EF               	movwf	??_calcRequiredPower+3
 15676  03AA  086E               	movf	??_calcRequiredPower+2,w
 15677  03AB  3E35               	addlw	53
 15678  03AC  0086               	movwf	6
 15679  03AD  3000               	movlw	0
 15680  03AE  3D6F               	addwfc	??_calcRequiredPower+3,w
 15681  03AF  0087               	movwf	7
 15682  03B0  0834               	movf	?___flmul,w
 15683  03B1  3FC0               	movwi [0]fsr1
 15684  03B2  0835               	movf	?___flmul+1,w
 15685  03B3  3FC1               	movwi [1]fsr1
 15686  03B4  0836               	movf	?___flmul+2,w
 15687  03B5  3FC2               	movwi [2]fsr1
 15688  03B6  0837               	movf	?___flmul+3,w
 15689  03B7  3FC3               	movwi [3]fsr1
 15690                           
 15691                           ;main.c: 184:   p = 2 * 3.14 * 0.0254 * data->chData[n].lensDia;
 15692  03B8  303E               	movlw	62
 15693  03B9  00B7               	movwf	___flmul@b+3
 15694  03BA  3023               	movlw	35
 15695  03BB  00B6               	movwf	___flmul@b+2
 15696  03BC  3057               	movlw	87
 15697  03BD  00B5               	movwf	___flmul@b+1
 15698  03BE  301D               	movlw	29
 15699  03BF  00B4               	movwf	___flmul@b
 15700  03C0  0141               	movlb	1	; select bank1
 15701  03C1  0858               	movf	calcRequiredPower@n^(0+128),w
 15702  03C2  0140               	movlb	0	; select bank0
 15703  03C3  00EC               	movwf	??_calcRequiredPower
 15704  03C4  01ED               	clrf	??_calcRequiredPower+1
 15705  03C5  3005               	movlw	5
 15706  03C6                     u5675:	
 15707  03C6  35EC               	lslf	??_calcRequiredPower,f
 15708  03C7  0DED               	rlf	??_calcRequiredPower+1,f
 15709  03C8  0B89               	decfsz	9,f
 15710  03C9  2BC6               	goto	u5675
 15711  03CA  086C               	movf	??_calcRequiredPower,w
 15712  03CB  076A               	addwf	calcRequiredPower@data,w
 15713  03CC  00EE               	movwf	??_calcRequiredPower+2
 15714  03CD  086D               	movf	??_calcRequiredPower+1,w
 15715  03CE  3D6B               	addwfc	calcRequiredPower@data+1,w
 15716  03CF  00EF               	movwf	??_calcRequiredPower+3
 15717  03D0  086E               	movf	??_calcRequiredPower+2,w
 15718  03D1  3E43               	addlw	67
 15719  03D2  0086               	movwf	6
 15720  03D3  3000               	movlw	0
 15721  03D4  3D6F               	addwfc	??_calcRequiredPower+3,w
 15722  03D5  0087               	movwf	7
 15723  03D6  3F40               	moviw [0]fsr1
 15724  03D7  00B8               	movwf	___flmul@a
 15725  03D8  3F41               	moviw [1]fsr1
 15726  03D9  00B9               	movwf	___flmul@a+1
 15727  03DA  3F42               	moviw [2]fsr1
 15728  03DB  00BA               	movwf	___flmul@a+2
 15729  03DC  3F43               	moviw [3]fsr1
 15730  03DD  00BB               	movwf	___flmul@a+3
 15731  03DE  3185  2502  3180   	fcall	___flmul
 15732  03E1  0140               	movlb	0	; select bank0
 15733  03E2  0837               	movf	?___flmul+3,w
 15734  03E3  0141               	movlb	1	; select bank1
 15735  03E4  00A3               	movwf	(calcRequiredPower@p+3)^(0+128)
 15736  03E5  0140               	movlb	0	; select bank0
 15737  03E6  0836               	movf	?___flmul+2,w
 15738  03E7  0141               	movlb	1	; select bank1
 15739  03E8  00A2               	movwf	(calcRequiredPower@p+2)^(0+128)
 15740  03E9  0140               	movlb	0	; select bank0
 15741  03EA  0835               	movf	?___flmul+1,w
 15742  03EB  0141               	movlb	1	; select bank1
 15743  03EC  00A1               	movwf	(calcRequiredPower@p+1)^(0+128)
 15744  03ED  0140               	movlb	0	; select bank0
 15745  03EE  0834               	movf	?___flmul,w
 15746  03EF  0141               	movlb	1	; select bank1
 15747  03F0  00A0               	movwf	calcRequiredPower@p^(0+128)
 15748                           
 15749                           ;main.c: 185:   A = p * 0.03;
 15750  03F1  303C               	movlw	60
 15751  03F2  0140               	movlb	0	; select bank0
 15752  03F3  00B7               	movwf	___flmul@b+3
 15753  03F4  30F5               	movlw	245
 15754  03F5  00B6               	movwf	___flmul@b+2
 15755  03F6  30C2               	movlw	194
 15756  03F7  00B5               	movwf	___flmul@b+1
 15757  03F8  308F               	movlw	143
 15758  03F9  00B4               	movwf	___flmul@b
 15759  03FA  0141               	movlb	1	; select bank1
 15760  03FB  0823               	movf	(calcRequiredPower@p+3)^(0+128),w
 15761  03FC  0140               	movlb	0	; select bank0
 15762  03FD  00BB               	movwf	___flmul@a+3
 15763  03FE  0141               	movlb	1	; select bank1
 15764  03FF  0822               	movf	(calcRequiredPower@p+2)^(0+128),w
 15765  0400  0140               	movlb	0	; select bank0
 15766  0401  00BA               	movwf	___flmul@a+2
 15767  0402  0141               	movlb	1	; select bank1
 15768  0403  0821               	movf	(calcRequiredPower@p+1)^(0+128),w
 15769  0404  0140               	movlb	0	; select bank0
 15770  0405  00B9               	movwf	___flmul@a+1
 15771  0406  0141               	movlb	1	; select bank1
 15772  0407  0820               	movf	calcRequiredPower@p^(0+128),w
 15773  0408  0140               	movlb	0	; select bank0
 15774  0409  00B8               	movwf	___flmul@a
 15775  040A  3185  2502  3180   	fcall	___flmul
 15776  040D  0140               	movlb	0	; select bank0
 15777  040E  0837               	movf	?___flmul+3,w
 15778  040F  0141               	movlb	1	; select bank1
 15779  0410  00CB               	movwf	(calcRequiredPower@A+3)^(0+128)
 15780  0411  0140               	movlb	0	; select bank0
 15781  0412  0836               	movf	?___flmul+2,w
 15782  0413  0141               	movlb	1	; select bank1
 15783  0414  00CA               	movwf	(calcRequiredPower@A+2)^(0+128)
 15784  0415  0140               	movlb	0	; select bank0
 15785  0416  0835               	movf	?___flmul+1,w
 15786  0417  0141               	movlb	1	; select bank1
 15787  0418  00C9               	movwf	(calcRequiredPower@A+1)^(0+128)
 15788  0419  0140               	movlb	0	; select bank0
 15789  041A  0834               	movf	?___flmul,w
 15790  041B  0141               	movlb	1	; select bank1
 15791  041C  00C8               	movwf	calcRequiredPower@A^(0+128)
 15792                           
 15793                           ;main.c: 187:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 15794  041D  303F               	movlw	63
 15795  041E  0140               	movlb	0	; select bank0
 15796  041F  00B7               	movwf	___flmul@b+3
 15797  0420  3059               	movlw	89
 15798  0421  00B6               	movwf	___flmul@b+2
 15799  0422  3099               	movlw	153
 15800  0423  00B5               	movwf	___flmul@b+1
 15801  0424  309A               	movlw	154
 15802  0425  00B4               	movwf	___flmul@b
 15803  0426  3040               	movlw	64
 15804  0427  00D1               	movwf	___fldiv@a+3
 15805  0428  3000               	movlw	0
 15806  0429  00D0               	movwf	___fldiv@a+2
 15807  042A  3000               	movlw	0
 15808  042B  00CF               	movwf	___fldiv@a+1
 15809  042C  3000               	movlw	0
 15810  042D  00CE               	movwf	___fldiv@a
 15811  042E  0141               	movlb	1	; select bank1
 15812  042F  0858               	movf	calcRequiredPower@n^(0+128),w
 15813  0430  0140               	movlb	0	; select bank0
 15814  0431  00EC               	movwf	??_calcRequiredPower
 15815  0432  01ED               	clrf	??_calcRequiredPower+1
 15816  0433  3005               	movlw	5
 15817  0434                     u5685:	
 15818  0434  35EC               	lslf	??_calcRequiredPower,f
 15819  0435  0DED               	rlf	??_calcRequiredPower+1,f
 15820  0436  0B89               	decfsz	9,f
 15821  0437  2C34               	goto	u5685
 15822  0438  086C               	movf	??_calcRequiredPower,w
 15823  0439  076A               	addwf	calcRequiredPower@data,w
 15824  043A  00EE               	movwf	??_calcRequiredPower+2
 15825  043B  086D               	movf	??_calcRequiredPower+1,w
 15826  043C  3D6B               	addwfc	calcRequiredPower@data+1,w
 15827  043D  00EF               	movwf	??_calcRequiredPower+3
 15828  043E  086E               	movf	??_calcRequiredPower+2,w
 15829  043F  3E43               	addlw	67
 15830  0440  0086               	movwf	6
 15831  0441  3000               	movlw	0
 15832  0442  3D6F               	addwfc	??_calcRequiredPower+3,w
 15833  0443  0087               	movwf	7
 15834  0444  3F40               	moviw [0]fsr1
 15835  0445  00D2               	movwf	___fldiv@b
 15836  0446  3F41               	moviw [1]fsr1
 15837  0447  00D3               	movwf	___fldiv@b+1
 15838  0448  3F42               	moviw [2]fsr1
 15839  0449  00D4               	movwf	___fldiv@b+2
 15840  044A  3F43               	moviw [3]fsr1
 15841  044B  00D5               	movwf	___fldiv@b+3
 15842  044C  3193  2374  3180   	fcall	___fldiv
 15843  044F  0140               	movlb	0	; select bank0
 15844  0450  0851               	movf	?___fldiv+3,w
 15845  0451  00BB               	movwf	___flmul@a+3
 15846  0452  0850               	movf	?___fldiv+2,w
 15847  0453  00BA               	movwf	___flmul@a+2
 15848  0454  084F               	movf	?___fldiv+1,w
 15849  0455  00B9               	movwf	___flmul@a+1
 15850  0456  084E               	movf	?___fldiv,w
 15851  0457  00B8               	movwf	___flmul@a
 15852  0458  3185  2502  3180   	fcall	___flmul
 15853  045B  0140               	movlb	0	; select bank0
 15854  045C  0837               	movf	?___flmul+3,w
 15855  045D  0141               	movlb	1	; select bank1
 15856  045E  00CF               	movwf	(_calcRequiredPower$2138+3)^(0+128)
 15857  045F  0140               	movlb	0	; select bank0
 15858  0460  0836               	movf	?___flmul+2,w
 15859  0461  0141               	movlb	1	; select bank1
 15860  0462  00CE               	movwf	(_calcRequiredPower$2138+2)^(0+128)
 15861  0463  0140               	movlb	0	; select bank0
 15862  0464  0835               	movf	?___flmul+1,w
 15863  0465  0141               	movlb	1	; select bank1
 15864  0466  00CD               	movwf	(_calcRequiredPower$2138+1)^(0+128)
 15865  0467  0140               	movlb	0	; select bank0
 15866  0468  0834               	movf	?___flmul,w
 15867  0469  0141               	movlb	1	; select bank1
 15868  046A  00CC               	movwf	_calcRequiredPower$2138^(0+128)
 15869                           
 15870                           ;main.c: 187:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 15871  046B  084B               	movf	(calcRequiredPower@A+3)^(0+128),w
 15872  046C  0140               	movlb	0	; select bank0
 15873  046D  00B7               	movwf	___flmul@b+3
 15874  046E  0141               	movlb	1	; select bank1
 15875  046F  084A               	movf	(calcRequiredPower@A+2)^(0+128),w
 15876  0470  0140               	movlb	0	; select bank0
 15877  0471  00B6               	movwf	___flmul@b+2
 15878  0472  0141               	movlb	1	; select bank1
 15879  0473  0849               	movf	(calcRequiredPower@A+1)^(0+128),w
 15880  0474  0140               	movlb	0	; select bank0
 15881  0475  00B5               	movwf	___flmul@b+1
 15882  0476  0141               	movlb	1	; select bank1
 15883  0477  0848               	movf	calcRequiredPower@A^(0+128),w
 15884  0478  0140               	movlb	0	; select bank0
 15885  0479  00B4               	movwf	___flmul@b
 15886  047A  0141               	movlb	1	; select bank1
 15887  047B  084F               	movf	(_calcRequiredPower$2138+3)^(0+128),w
 15888  047C  0140               	movlb	0	; select bank0
 15889  047D  00BB               	movwf	___flmul@a+3
 15890  047E  0141               	movlb	1	; select bank1
 15891  047F  084E               	movf	(_calcRequiredPower$2138+2)^(0+128),w
 15892  0480  0140               	movlb	0	; select bank0
 15893  0481  00BA               	movwf	___flmul@a+2
 15894  0482  0141               	movlb	1	; select bank1
 15895  0483  084D               	movf	(_calcRequiredPower$2138+1)^(0+128),w
 15896  0484  0140               	movlb	0	; select bank0
 15897  0485  00B9               	movwf	___flmul@a+1
 15898  0486  0141               	movlb	1	; select bank1
 15899  0487  084C               	movf	_calcRequiredPower$2138^(0+128),w
 15900  0488  0140               	movlb	0	; select bank0
 15901  0489  00B8               	movwf	___flmul@a
 15902  048A  3185  2502  3180   	fcall	___flmul
 15903  048D  0140               	movlb	0	; select bank0
 15904  048E  0837               	movf	?___flmul+3,w
 15905  048F  0141               	movlb	1	; select bank1
 15906  0490  00A7               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 15907  0491  0140               	movlb	0	; select bank0
 15908  0492  0836               	movf	?___flmul+2,w
 15909  0493  0141               	movlb	1	; select bank1
 15910  0494  00A6               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 15911  0495  0140               	movlb	0	; select bank0
 15912  0496  0835               	movf	?___flmul+1,w
 15913  0497  0141               	movlb	1	; select bank1
 15914  0498  00A5               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 15915  0499  0140               	movlb	0	; select bank0
 15916  049A  0834               	movf	?___flmul,w
 15917  049B  0141               	movlb	1	; select bank1
 15918  049C  00A4               	movwf	calcRequiredPower@Rth^(0+128)
 15919                           
 15920                           ;main.c: 189:   data->chData[n].dt = phi * Rth - data->dewPointC;
 15921  049D  0140               	movlb	0	; select bank0
 15922  049E  086A               	movf	calcRequiredPower@data,w
 15923  049F  0086               	movwf	6
 15924  04A0  086B               	movf	calcRequiredPower@data+1,w
 15925  04A1  0087               	movwf	7
 15926  04A2  3148               	addfsr 1,8
 15927  04A3  3F40               	moviw [0]fsr1
 15928  04A4  00E2               	movwf	___flsub@a
 15929  04A5  3F41               	moviw [1]fsr1
 15930  04A6  00E3               	movwf	___flsub@a+1
 15931  04A7  3F42               	moviw [2]fsr1
 15932  04A8  00E4               	movwf	___flsub@a+2
 15933  04A9  3F43               	moviw [3]fsr1
 15934  04AA  00E5               	movwf	___flsub@a+3
 15935  04AB  0141               	movlb	1	; select bank1
 15936  04AC  0827               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 15937  04AD  0140               	movlb	0	; select bank0
 15938  04AE  00B7               	movwf	___flmul@b+3
 15939  04AF  0141               	movlb	1	; select bank1
 15940  04B0  0826               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 15941  04B1  0140               	movlb	0	; select bank0
 15942  04B2  00B6               	movwf	___flmul@b+2
 15943  04B3  0141               	movlb	1	; select bank1
 15944  04B4  0825               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 15945  04B5  0140               	movlb	0	; select bank0
 15946  04B6  00B5               	movwf	___flmul@b+1
 15947  04B7  0141               	movlb	1	; select bank1
 15948  04B8  0824               	movf	calcRequiredPower@Rth^(0+128),w
 15949  04B9  0140               	movlb	0	; select bank0
 15950  04BA  00B4               	movwf	___flmul@b
 15951  04BB  0141               	movlb	1	; select bank1
 15952  04BC  0847               	movf	(calcRequiredPower@phi+3)^(0+128),w
 15953  04BD  0140               	movlb	0	; select bank0
 15954  04BE  00BB               	movwf	___flmul@a+3
 15955  04BF  0141               	movlb	1	; select bank1
 15956  04C0  0846               	movf	(calcRequiredPower@phi+2)^(0+128),w
 15957  04C1  0140               	movlb	0	; select bank0
 15958  04C2  00BA               	movwf	___flmul@a+2
 15959  04C3  0141               	movlb	1	; select bank1
 15960  04C4  0845               	movf	(calcRequiredPower@phi+1)^(0+128),w
 15961  04C5  0140               	movlb	0	; select bank0
 15962  04C6  00B9               	movwf	___flmul@a+1
 15963  04C7  0141               	movlb	1	; select bank1
 15964  04C8  0844               	movf	calcRequiredPower@phi^(0+128),w
 15965  04C9  0140               	movlb	0	; select bank0
 15966  04CA  00B8               	movwf	___flmul@a
 15967  04CB  3185  2502  3180   	fcall	___flmul
 15968  04CE  0140               	movlb	0	; select bank0
 15969  04CF  0837               	movf	?___flmul+3,w
 15970  04D0  00E9               	movwf	___flsub@b+3
 15971  04D1  0836               	movf	?___flmul+2,w
 15972  04D2  00E8               	movwf	___flsub@b+2
 15973  04D3  0835               	movf	?___flmul+1,w
 15974  04D4  00E7               	movwf	___flsub@b+1
 15975  04D5  0834               	movf	?___flmul,w
 15976  04D6  00E6               	movwf	___flsub@b
 15977  04D7  31A2  2269  3180   	fcall	___flsub
 15978  04DA  0141               	movlb	1	; select bank1
 15979  04DB  0858               	movf	calcRequiredPower@n^(0+128),w
 15980  04DC  0140               	movlb	0	; select bank0
 15981  04DD  00EC               	movwf	??_calcRequiredPower
 15982  04DE  01ED               	clrf	??_calcRequiredPower+1
 15983  04DF  3005               	movlw	5
 15984  04E0                     u5695:	
 15985  04E0  35EC               	lslf	??_calcRequiredPower,f
 15986  04E1  0DED               	rlf	??_calcRequiredPower+1,f
 15987  04E2  0B89               	decfsz	9,f
 15988  04E3  2CE0               	goto	u5695
 15989  04E4  086C               	movf	??_calcRequiredPower,w
 15990  04E5  076A               	addwf	calcRequiredPower@data,w
 15991  04E6  00EE               	movwf	??_calcRequiredPower+2
 15992  04E7  086D               	movf	??_calcRequiredPower+1,w
 15993  04E8  3D6B               	addwfc	calcRequiredPower@data+1,w
 15994  04E9  00EF               	movwf	??_calcRequiredPower+3
 15995  04EA  086E               	movf	??_calcRequiredPower+2,w
 15996  04EB  3E47               	addlw	71
 15997  04EC  0086               	movwf	6
 15998  04ED  3000               	movlw	0
 15999  04EE  3D6F               	addwfc	??_calcRequiredPower+3,w
 16000  04EF  0087               	movwf	7
 16001  04F0  0862               	movf	?___flsub,w
 16002  04F1  3FC0               	movwi [0]fsr1
 16003  04F2  0863               	movf	?___flsub+1,w
 16004  04F3  3FC1               	movwi [1]fsr1
 16005  04F4  0864               	movf	?___flsub+2,w
 16006  04F5  3FC2               	movwi [2]fsr1
 16007  04F6  0865               	movf	?___flsub+3,w
 16008  04F7  3FC3               	movwi [3]fsr1
 16009                           
 16010                           ;main.c: 190:  }
 16011  04F8  3001               	movlw	1
 16012  04F9  00EC               	movwf	??_calcRequiredPower
 16013  04FA  086C               	movf	??_calcRequiredPower,w
 16014  04FB  0141               	movlb	1	; select bank1
 16015  04FC  07D8               	addwf	calcRequiredPower@n^(0+128),f
 16016  04FD  3004               	movlw	4
 16017  04FE  0258               	subwf	calcRequiredPower@n^(0+128),w
 16018  04FF  1803               	btfsc	3,0
 16019  0500  0008               	return
 16020  0501  28B7               	goto	l4905
 16021  0502                     __end_of_calcRequiredPower:	
 16022                           
 16023                           	psect	text53
 16024  2269                     __ptext53:	
 16025 ;; *************** function ___flsub *****************
 16026 ;; Defined at:
 16027 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 16028 ;; Parameters:    Size  Location     Type
 16029 ;;  a               4   66[BANK0 ] void 
 16030 ;;  b               4   70[BANK0 ] void 
 16031 ;; Auto vars:     Size  Location     Type
 16032 ;;		None
 16033 ;; Return value:  Size  Location     Type
 16034 ;;                  4   66[BANK0 ] void 
 16035 ;; Registers used:
 16036 ;;		wreg, status,2, status,0, pclath, cstack
 16037 ;; Tracked objects:
 16038 ;;		On entry : 0/0
 16039 ;;		On exit  : 0/0
 16040 ;;		Unchanged: 0/0
 16041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16042 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16045 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16046 ;;Total ram usage:        8 bytes
 16047 ;; Hardware stack levels used:    1
 16048 ;; Hardware stack levels required when called:    4
 16049 ;; This function calls:
 16050 ;;		___fladd
 16051 ;; This function is called by:
 16052 ;;		_calcRequiredPower
 16053 ;;		_spinInput
 16054 ;;		_ftoa
 16055 ;; This function uses a non-reentrant model
 16056 ;;
 16057                           
 16058                           
 16059                           ;psect for function ___flsub
 16060  2269                     ___flsub:	
 16061                           
 16062                           ;incstack = 0
 16063                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 16064  2269  3080               	movlw	128
 16065  226A  0140               	movlb	0	; select bank0
 16066  226B  06E5               	xorwf	___flsub@a+3,f
 16067  226C  0869               	movf	___flsub@b+3,w
 16068  226D  00D1               	movwf	___fladd@b+3
 16069  226E  0868               	movf	___flsub@b+2,w
 16070  226F  00D0               	movwf	___fladd@b+2
 16071  2270  0867               	movf	___flsub@b+1,w
 16072  2271  00CF               	movwf	___fladd@b+1
 16073  2272  0866               	movf	___flsub@b,w
 16074  2273  00CE               	movwf	___fladd@b
 16075  2274  0865               	movf	___flsub@a+3,w
 16076  2275  00D5               	movwf	___fladd@a+3
 16077  2276  0864               	movf	___flsub@a+2,w
 16078  2277  00D4               	movwf	___fladd@a+2
 16079  2278  0863               	movf	___flsub@a+1,w
 16080  2279  00D3               	movwf	___fladd@a+1
 16081  227A  0862               	movf	___flsub@a,w
 16082  227B  00D2               	movwf	___fladd@a
 16083  227C  318C  241B         	fcall	___fladd
 16084  227E  0140               	movlb	0	; select bank0
 16085  227F  0851               	movf	?___fladd+3,w
 16086  2280  00E5               	movwf	?___flsub+3
 16087  2281  0850               	movf	?___fladd+2,w
 16088  2282  00E4               	movwf	?___flsub+2
 16089  2283  084F               	movf	?___fladd+1,w
 16090  2284  00E3               	movwf	?___flsub+1
 16091  2285  084E               	movf	?___fladd,w
 16092  2286  00E2               	movwf	?___flsub
 16093  2287  0008               	return
 16094  2288                     __end_of___flsub:	
 16095                           
 16096                           	psect	text54
 16097  0C1B                     __ptext54:	
 16098 ;; *************** function ___fladd *****************
 16099 ;; Defined at:
 16100 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 16101 ;; Parameters:    Size  Location     Type
 16102 ;;  b               4   46[BANK0 ] void 
 16103 ;;  a               4   50[BANK0 ] void 
 16104 ;; Auto vars:     Size  Location     Type
 16105 ;;  grs             1   65[BANK0 ] unsigned char 
 16106 ;;  bexp            1   64[BANK0 ] unsigned char 
 16107 ;;  aexp            1   63[BANK0 ] unsigned char 
 16108 ;;  signs           1   62[BANK0 ] unsigned char 
 16109 ;; Return value:  Size  Location     Type
 16110 ;;                  4   46[BANK0 ] unsigned char 
 16111 ;; Registers used:
 16112 ;;		wreg, status,2, status,0
 16113 ;; Tracked objects:
 16114 ;;		On entry : 0/0
 16115 ;;		On exit  : 0/0
 16116 ;;		Unchanged: 0/0
 16117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16118 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16119 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16120 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16121 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16122 ;;Total ram usage:       20 bytes
 16123 ;; Hardware stack levels used:    1
 16124 ;; Hardware stack levels required when called:    3
 16125 ;; This function calls:
 16126 ;;		Nothing
 16127 ;; This function is called by:
 16128 ;;		_calcRequiredPower
 16129 ;;		_convertAnalogValues
 16130 ;;		_spinInput
 16131 ;;		___flsub
 16132 ;; This function uses a non-reentrant model
 16133 ;;
 16134                           
 16135                           
 16136                           ;psect for function ___fladd
 16137  0C1B                     ___fladd:	
 16138                           
 16139                           ;incstack = 0
 16140                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 16141  0C1B  0140               	movlb	0	; select bank0
 16142  0C1C  0851               	movf	___fladd@b+3,w
 16143  0C1D  3980               	andlw	128
 16144  0C1E  00D6               	movwf	??___fladd
 16145  0C1F  0856               	movf	??___fladd,w
 16146  0C20  00DE               	movwf	___fladd@signs
 16147  0C21  3551               	lslf	___fladd@b+3,w
 16148  0C22  00D6               	movwf	??___fladd
 16149  0C23  0856               	movf	??___fladd,w
 16150  0C24  00E0               	movwf	___fladd@bexp
 16151  0C25  1BD0               	btfsc	___fladd@b+2,7
 16152  0C26  1460               	bsf	___fladd@bexp,0
 16153  0C27  0860               	movf	___fladd@bexp,w
 16154  0C28  1903               	btfsc	3,2
 16155  0C29  2C38               	goto	l3275
 16156  0C2A  0A60               	incf	___fladd@bexp,w
 16157  0C2B  1D03               	btfss	3,2
 16158  0C2C  2C35               	goto	l3271
 16159  0C2D  3000               	movlw	0
 16160  0C2E  00D1               	movwf	___fladd@b+3
 16161  0C2F  3000               	movlw	0
 16162  0C30  00D0               	movwf	___fladd@b+2
 16163  0C31  3000               	movlw	0
 16164  0C32  00CF               	movwf	___fladd@b+1
 16165  0C33  3000               	movlw	0
 16166  0C34  00CE               	movwf	___fladd@b
 16167  0C35                     l3271:	
 16168  0C35  17D0               	bsf	___fladd@b+2,7
 16169  0C36  01D1               	clrf	___fladd@b+3
 16170  0C37  2C40               	goto	l3277
 16171  0C38                     l3275:	
 16172  0C38  3000               	movlw	0
 16173  0C39  00D1               	movwf	___fladd@b+3
 16174  0C3A  3000               	movlw	0
 16175  0C3B  00D0               	movwf	___fladd@b+2
 16176  0C3C  3000               	movlw	0
 16177  0C3D  00CF               	movwf	___fladd@b+1
 16178  0C3E  3000               	movlw	0
 16179  0C3F  00CE               	movwf	___fladd@b
 16180  0C40                     l3277:	
 16181  0C40  0855               	movf	___fladd@a+3,w
 16182  0C41  3980               	andlw	128
 16183  0C42  00D6               	movwf	??___fladd
 16184  0C43  0856               	movf	??___fladd,w
 16185  0C44  00DF               	movwf	___fladd@aexp
 16186  0C45  085F               	movf	___fladd@aexp,w
 16187  0C46  065E               	xorwf	___fladd@signs,w
 16188  0C47  1D03               	btfss	3,2
 16189  0C48  175E               	bsf	___fladd@signs,6
 16190  0C49  3555               	lslf	___fladd@a+3,w
 16191  0C4A  00D6               	movwf	??___fladd
 16192  0C4B  0856               	movf	??___fladd,w
 16193  0C4C  00DF               	movwf	___fladd@aexp
 16194  0C4D  1BD4               	btfsc	___fladd@a+2,7
 16195  0C4E  145F               	bsf	___fladd@aexp,0
 16196  0C4F  085F               	movf	___fladd@aexp,w
 16197  0C50  1903               	btfsc	3,2
 16198  0C51  2C60               	goto	l3299
 16199  0C52  0A5F               	incf	___fladd@aexp,w
 16200  0C53  1D03               	btfss	3,2
 16201  0C54  2C5D               	goto	l3295
 16202  0C55  3000               	movlw	0
 16203  0C56  00D5               	movwf	___fladd@a+3
 16204  0C57  3000               	movlw	0
 16205  0C58  00D4               	movwf	___fladd@a+2
 16206  0C59  3000               	movlw	0
 16207  0C5A  00D3               	movwf	___fladd@a+1
 16208  0C5B  3000               	movlw	0
 16209  0C5C  00D2               	movwf	___fladd@a
 16210  0C5D                     l3295:	
 16211  0C5D  17D4               	bsf	___fladd@a+2,7
 16212  0C5E  01D5               	clrf	___fladd@a+3
 16213  0C5F  2C68               	goto	l1070
 16214  0C60                     l3299:	
 16215  0C60  3000               	movlw	0
 16216  0C61  00D5               	movwf	___fladd@a+3
 16217  0C62  3000               	movlw	0
 16218  0C63  00D4               	movwf	___fladd@a+2
 16219  0C64  3000               	movlw	0
 16220  0C65  00D3               	movwf	___fladd@a+1
 16221  0C66  3000               	movlw	0
 16222  0C67  00D2               	movwf	___fladd@a
 16223  0C68                     l1070:	
 16224  0C68  0860               	movf	___fladd@bexp,w
 16225  0C69  025F               	subwf	___fladd@aexp,w
 16226  0C6A  1803               	skipnc
 16227  0C6B  2CAE               	goto	l3335
 16228  0C6C  1F5E               	btfss	___fladd@signs,6
 16229  0C6D  2C72               	goto	l3305
 16230  0C6E  3080               	movlw	128
 16231  0C6F  00D6               	movwf	??___fladd
 16232  0C70  0856               	movf	??___fladd,w
 16233  0C71  06DE               	xorwf	___fladd@signs,f
 16234  0C72                     l3305:	
 16235  0C72  0860               	movf	___fladd@bexp,w
 16236  0C73  00D6               	movwf	??___fladd
 16237  0C74  0856               	movf	??___fladd,w
 16238  0C75  00E1               	movwf	___fladd@grs
 16239  0C76  085F               	movf	___fladd@aexp,w
 16240  0C77  00D6               	movwf	??___fladd
 16241  0C78  0856               	movf	??___fladd,w
 16242  0C79  00E0               	movwf	___fladd@bexp
 16243  0C7A  0861               	movf	___fladd@grs,w
 16244  0C7B  00D6               	movwf	??___fladd
 16245  0C7C  0856               	movf	??___fladd,w
 16246  0C7D  00DF               	movwf	___fladd@aexp
 16247  0C7E  084E               	movf	___fladd@b,w
 16248  0C7F  00D6               	movwf	??___fladd
 16249  0C80  0856               	movf	??___fladd,w
 16250  0C81  00E1               	movwf	___fladd@grs
 16251  0C82  0852               	movf	___fladd@a,w
 16252  0C83  00D6               	movwf	??___fladd
 16253  0C84  0856               	movf	??___fladd,w
 16254  0C85  00CE               	movwf	___fladd@b
 16255  0C86  0861               	movf	___fladd@grs,w
 16256  0C87  00D6               	movwf	??___fladd
 16257  0C88  0856               	movf	??___fladd,w
 16258  0C89  00D2               	movwf	___fladd@a
 16259  0C8A  084F               	movf	___fladd@b+1,w
 16260  0C8B  00D6               	movwf	??___fladd
 16261  0C8C  0856               	movf	??___fladd,w
 16262  0C8D  00E1               	movwf	___fladd@grs
 16263  0C8E  0853               	movf	___fladd@a+1,w
 16264  0C8F  00D6               	movwf	??___fladd
 16265  0C90  0856               	movf	??___fladd,w
 16266  0C91  00CF               	movwf	___fladd@b+1
 16267  0C92  0861               	movf	___fladd@grs,w
 16268  0C93  00D6               	movwf	??___fladd
 16269  0C94  0856               	movf	??___fladd,w
 16270  0C95  00D3               	movwf	___fladd@a+1
 16271  0C96  0850               	movf	___fladd@b+2,w
 16272  0C97  00D6               	movwf	??___fladd
 16273  0C98  0856               	movf	??___fladd,w
 16274  0C99  00E1               	movwf	___fladd@grs
 16275  0C9A  0854               	movf	___fladd@a+2,w
 16276  0C9B  00D6               	movwf	??___fladd
 16277  0C9C  0856               	movf	??___fladd,w
 16278  0C9D  00D0               	movwf	___fladd@b+2
 16279  0C9E  0861               	movf	___fladd@grs,w
 16280  0C9F  00D6               	movwf	??___fladd
 16281  0CA0  0856               	movf	??___fladd,w
 16282  0CA1  00D4               	movwf	___fladd@a+2
 16283  0CA2  0851               	movf	___fladd@b+3,w
 16284  0CA3  00D6               	movwf	??___fladd
 16285  0CA4  0856               	movf	??___fladd,w
 16286  0CA5  00E1               	movwf	___fladd@grs
 16287  0CA6  0855               	movf	___fladd@a+3,w
 16288  0CA7  00D6               	movwf	??___fladd
 16289  0CA8  0856               	movf	??___fladd,w
 16290  0CA9  00D1               	movwf	___fladd@b+3
 16291  0CAA  0861               	movf	___fladd@grs,w
 16292  0CAB  00D6               	movwf	??___fladd
 16293  0CAC  0856               	movf	??___fladd,w
 16294  0CAD  00D5               	movwf	___fladd@a+3
 16295  0CAE                     l3335:	
 16296  0CAE  01E1               	clrf	___fladd@grs
 16297  0CAF  085F               	movf	___fladd@aexp,w
 16298  0CB0  00D6               	movwf	??___fladd
 16299  0CB1  01D7               	clrf	??___fladd+1
 16300  0CB2  0857               	movf	??___fladd+1,w
 16301  0CB3  00D9               	movwf	??___fladd+3
 16302  0CB4  0860               	movf	___fladd@bexp,w
 16303  0CB5  0256               	subwf	??___fladd,w
 16304  0CB6  00D8               	movwf	??___fladd+2
 16305  0CB7  1C03               	skipc
 16306  0CB8  03D9               	decf	??___fladd+3,f
 16307  0CB9  0859               	movf	??___fladd+3,w
 16308  0CBA  3A80               	xorlw	128
 16309  0CBB  00DA               	movwf	??___fladd+4
 16310  0CBC  3080               	movlw	128
 16311  0CBD  025A               	subwf	??___fladd+4,w
 16312  0CBE  1D03               	skipz
 16313  0CBF  2CC2               	goto	u3195
 16314  0CC0  301A               	movlw	26
 16315  0CC1  0258               	subwf	??___fladd+2,w
 16316  0CC2                     u3195:	
 16317  0CC2  1C03               	skipc
 16318  0CC3  2CF6               	goto	l3353
 16319  0CC4  0140               	movlb	0	; select bank0
 16320  0CC5  0851               	movf	___fladd@b+3,w
 16321  0CC6  0450               	iorwf	___fladd@b+2,w
 16322  0CC7  044F               	iorwf	___fladd@b+1,w
 16323  0CC8  044E               	iorwf	___fladd@b,w
 16324  0CC9  1903               	btfsc	3,2
 16325  0CCA  2CCD               	goto	u3200
 16326  0CCB  3001               	movlw	1
 16327  0CCC  2CCE               	goto	u3210
 16328  0CCD                     u3200:	
 16329  0CCD  3000               	movlw	0
 16330  0CCE                     u3210:	
 16331  0CCE  00D6               	movwf	??___fladd
 16332  0CCF  0856               	movf	??___fladd,w
 16333  0CD0  00E1               	movwf	___fladd@grs
 16334  0CD1  3000               	movlw	0
 16335  0CD2  00D1               	movwf	___fladd@b+3
 16336  0CD3  3000               	movlw	0
 16337  0CD4  00D0               	movwf	___fladd@b+2
 16338  0CD5  3000               	movlw	0
 16339  0CD6  00CF               	movwf	___fladd@b+1
 16340  0CD7  3000               	movlw	0
 16341  0CD8  00CE               	movwf	___fladd@b
 16342  0CD9  085F               	movf	___fladd@aexp,w
 16343  0CDA  00D6               	movwf	??___fladd
 16344  0CDB  0856               	movf	??___fladd,w
 16345  0CDC  00E0               	movwf	___fladd@bexp
 16346  0CDD  2CFB               	goto	l1074
 16347  0CDE                     l1076:	
 16348  0CDE  1C61               	btfss	___fladd@grs,0
 16349  0CDF  2CE6               	goto	l3343
 16350  0CE0  3661               	lsrf	___fladd@grs,w
 16351  0CE1  3801               	iorlw	1
 16352  0CE2  00D6               	movwf	??___fladd
 16353  0CE3  0856               	movf	??___fladd,w
 16354  0CE4  00E1               	movwf	___fladd@grs
 16355  0CE5  2CE8               	goto	l3345
 16356  0CE6                     l3343:	
 16357  0CE6  1003               	clrc
 16358  0CE7  0CE1               	rrf	___fladd@grs,f
 16359  0CE8                     l3345:	
 16360  0CE8  184E               	btfsc	___fladd@b,0
 16361  0CE9  17E1               	bsf	___fladd@grs,7
 16362  0CEA  3001               	movlw	1
 16363  0CEB  00D6               	movwf	??___fladd
 16364  0CEC                     u3245:	
 16365  0CEC  37D1               	asrf	___fladd@b+3,f
 16366  0CED  0CD0               	rrf	___fladd@b+2,f
 16367  0CEE  0CCF               	rrf	___fladd@b+1,f
 16368  0CEF  0CCE               	rrf	___fladd@b,f
 16369  0CF0  0BD6               	decfsz	??___fladd& (0+127),f
 16370  0CF1  2CEC               	goto	u3245
 16371  0CF2  3001               	movlw	1
 16372  0CF3  00D6               	movwf	??___fladd
 16373  0CF4  0856               	movf	??___fladd,w
 16374  0CF5  07E0               	addwf	___fladd@bexp,f
 16375  0CF6                     l3353:	
 16376  0CF6  0140               	movlb	0	; select bank0
 16377  0CF7  085F               	movf	___fladd@aexp,w
 16378  0CF8  0260               	subwf	___fladd@bexp,w
 16379  0CF9  1C03               	skipc
 16380  0CFA  2CDE               	goto	l1076
 16381  0CFB                     l1074:	
 16382  0CFB  1B5E               	btfsc	___fladd@signs,6
 16383  0CFC  2D2C               	goto	l3379
 16384  0CFD  0860               	movf	___fladd@bexp,w
 16385  0CFE  1D03               	btfss	3,2
 16386  0CFF  2D09               	goto	l3361
 16387  0D00  3000               	movlw	0
 16388  0D01  00D1               	movwf	?___fladd+3
 16389  0D02  3000               	movlw	0
 16390  0D03  00D0               	movwf	?___fladd+2
 16391  0D04  3000               	movlw	0
 16392  0D05  00CF               	movwf	?___fladd+1
 16393  0D06  3000               	movlw	0
 16394  0D07  00CE               	movwf	?___fladd
 16395  0D08  0008               	return
 16396  0D09                     l3361:	
 16397  0D09  0852               	movf	___fladd@a,w
 16398  0D0A  07CE               	addwf	___fladd@b,f
 16399  0D0B  0853               	movf	___fladd@a+1,w
 16400  0D0C  3DCF               	addwfc	___fladd@b+1,f
 16401  0D0D  0854               	movf	___fladd@a+2,w
 16402  0D0E  3DD0               	addwfc	___fladd@b+2,f
 16403  0D0F  0855               	movf	___fladd@a+3,w
 16404  0D10  3DD1               	addwfc	___fladd@b+3,f
 16405  0D11  1C51               	btfss	___fladd@b+3,0
 16406  0D12  2DA6               	goto	l3413
 16407  0D13  1C61               	btfss	___fladd@grs,0
 16408  0D14  2D1B               	goto	l3369
 16409  0D15  3661               	lsrf	___fladd@grs,w
 16410  0D16  3801               	iorlw	1
 16411  0D17  00D6               	movwf	??___fladd
 16412  0D18  0856               	movf	??___fladd,w
 16413  0D19  00E1               	movwf	___fladd@grs
 16414  0D1A  2D1D               	goto	l3371
 16415  0D1B                     l3369:	
 16416  0D1B  1003               	clrc
 16417  0D1C  0CE1               	rrf	___fladd@grs,f
 16418  0D1D                     l3371:	
 16419  0D1D  184E               	btfsc	___fladd@b,0
 16420  0D1E  17E1               	bsf	___fladd@grs,7
 16421  0D1F  3001               	movlw	1
 16422  0D20  00D6               	movwf	??___fladd
 16423  0D21                     u3315:	
 16424  0D21  37D1               	asrf	___fladd@b+3,f
 16425  0D22  0CD0               	rrf	___fladd@b+2,f
 16426  0D23  0CCF               	rrf	___fladd@b+1,f
 16427  0D24  0CCE               	rrf	___fladd@b,f
 16428  0D25  0BD6               	decfsz	??___fladd& (0+127),f
 16429  0D26  2D21               	goto	u3315
 16430  0D27  3001               	movlw	1
 16431  0D28  00D6               	movwf	??___fladd
 16432  0D29  0856               	movf	??___fladd,w
 16433  0D2A  07E0               	addwf	___fladd@bexp,f
 16434  0D2B  2DA6               	goto	l3413
 16435  0D2C                     l3379:	
 16436  0D2C  0851               	movf	___fladd@b+3,w
 16437  0D2D  3A80               	xorlw	128
 16438  0D2E  00D6               	movwf	??___fladd
 16439  0D2F  0855               	movf	___fladd@a+3,w
 16440  0D30  3A80               	xorlw	128
 16441  0D31  0256               	subwf	??___fladd,w
 16442  0D32  1D03               	skipz
 16443  0D33  2D3E               	goto	u3323
 16444  0D34  0854               	movf	___fladd@a+2,w
 16445  0D35  0250               	subwf	___fladd@b+2,w
 16446  0D36  1D03               	skipz
 16447  0D37  2D3E               	goto	u3323
 16448  0D38  0853               	movf	___fladd@a+1,w
 16449  0D39  024F               	subwf	___fladd@b+1,w
 16450  0D3A  1D03               	skipz
 16451  0D3B  2D3E               	goto	u3323
 16452  0D3C  0852               	movf	___fladd@a,w
 16453  0D3D  024E               	subwf	___fladd@b,w
 16454  0D3E                     u3323:	
 16455  0D3E  1803               	skipnc
 16456  0D3F  2D76               	goto	l3389
 16457  0D40  30FF               	movlw	255
 16458  0D41  00D6               	movwf	??___fladd
 16459  0D42  30FF               	movlw	255
 16460  0D43  00D7               	movwf	??___fladd+1
 16461  0D44  30FF               	movlw	255
 16462  0D45  00D8               	movwf	??___fladd+2
 16463  0D46  30FF               	movlw	255
 16464  0D47  00D9               	movwf	??___fladd+3
 16465  0D48  084E               	movf	___fladd@b,w
 16466  0D49  0252               	subwf	___fladd@a,w
 16467  0D4A  00DA               	movwf	??___fladd+4
 16468  0D4B  084F               	movf	___fladd@b+1,w
 16469  0D4C  3B53               	subwfb	___fladd@a+1,w
 16470  0D4D  00DB               	movwf	??___fladd+5
 16471  0D4E  0850               	movf	___fladd@b+2,w
 16472  0D4F  3B54               	subwfb	___fladd@a+2,w
 16473  0D50  00DC               	movwf	??___fladd+6
 16474  0D51  0851               	movf	___fladd@b+3,w
 16475  0D52  3B55               	subwfb	___fladd@a+3,w
 16476  0D53  00DD               	movwf	??___fladd+7
 16477  0D54  085A               	movf	??___fladd+4,w
 16478  0D55  07D6               	addwf	??___fladd,f
 16479  0D56  085B               	movf	??___fladd+5,w
 16480  0D57  3DD7               	addwfc	??___fladd+1,f
 16481  0D58  085C               	movf	??___fladd+6,w
 16482  0D59  3DD8               	addwfc	??___fladd+2,f
 16483  0D5A  085D               	movf	??___fladd+7,w
 16484  0D5B  3DD9               	addwfc	??___fladd+3,f
 16485  0D5C  0859               	movf	??___fladd+3,w
 16486  0D5D  00D1               	movwf	___fladd@b+3
 16487  0D5E  0858               	movf	??___fladd+2,w
 16488  0D5F  00D0               	movwf	___fladd@b+2
 16489  0D60  0857               	movf	??___fladd+1,w
 16490  0D61  00CF               	movwf	___fladd@b+1
 16491  0D62  0856               	movf	??___fladd,w
 16492  0D63  00CE               	movwf	___fladd@b
 16493  0D64  3080               	movlw	128
 16494  0D65  00D6               	movwf	??___fladd
 16495  0D66  0856               	movf	??___fladd,w
 16496  0D67  06DE               	xorwf	___fladd@signs,f
 16497  0D68  09E1               	comf	___fladd@grs,f
 16498  0D69  0AE1               	incf	___fladd@grs,f
 16499  0D6A  0861               	movf	___fladd@grs,w
 16500  0D6B  1D03               	btfss	3,2
 16501  0D6C  2D7E               	goto	l1091
 16502  0D6D  3001               	movlw	1
 16503  0D6E  07CE               	addwf	___fladd@b,f
 16504  0D6F  3000               	movlw	0
 16505  0D70  3DCF               	addwfc	___fladd@b+1,f
 16506  0D71  3000               	movlw	0
 16507  0D72  3DD0               	addwfc	___fladd@b+2,f
 16508  0D73  3000               	movlw	0
 16509  0D74  3DD1               	addwfc	___fladd@b+3,f
 16510  0D75  2D7E               	goto	l1091
 16511  0D76                     l3389:	
 16512  0D76  0852               	movf	___fladd@a,w
 16513  0D77  02CE               	subwf	___fladd@b,f
 16514  0D78  0853               	movf	___fladd@a+1,w
 16515  0D79  3BCF               	subwfb	___fladd@b+1,f
 16516  0D7A  0854               	movf	___fladd@a+2,w
 16517  0D7B  3BD0               	subwfb	___fladd@b+2,f
 16518  0D7C  0855               	movf	___fladd@a+3,w
 16519  0D7D  3BD1               	subwfb	___fladd@b+3,f
 16520  0D7E                     l1091:	
 16521  0D7E  0851               	movf	___fladd@b+3,w
 16522  0D7F  0450               	iorwf	___fladd@b+2,w
 16523  0D80  044F               	iorwf	___fladd@b+1,w
 16524  0D81  044E               	iorwf	___fladd@b,w
 16525  0D82  1D03               	skipz
 16526  0D83  2DA4               	goto	l3411
 16527  0D84  0861               	movf	___fladd@grs,w
 16528  0D85  1D03               	btfss	3,2
 16529  0D86  2DA4               	goto	l3411
 16530  0D87  3000               	movlw	0
 16531  0D88  00D1               	movwf	?___fladd+3
 16532  0D89  3000               	movlw	0
 16533  0D8A  00D0               	movwf	?___fladd+2
 16534  0D8B  3000               	movlw	0
 16535  0D8C  00CF               	movwf	?___fladd+1
 16536  0D8D  3000               	movlw	0
 16537  0D8E  00CE               	movwf	?___fladd
 16538  0D8F  0008               	return
 16539  0D90                     l3397:	
 16540  0D90  3001               	movlw	1
 16541  0D91                     u3365:	
 16542  0D91  35CE               	lslf	___fladd@b,f
 16543  0D92  0DCF               	rlf	___fladd@b+1,f
 16544  0D93  0DD0               	rlf	___fladd@b+2,f
 16545  0D94  0DD1               	rlf	___fladd@b+3,f
 16546  0D95  0B89               	decfsz	9,f
 16547  0D96  2D91               	goto	u3365
 16548  0D97  1BE1               	btfsc	___fladd@grs,7
 16549  0D98  144E               	bsf	___fladd@b,0
 16550  0D99  1C61               	btfss	___fladd@grs,0
 16551  0D9A  2D9D               	goto	l3405
 16552  0D9B  1403               	setc
 16553  0D9C  2D9E               	goto	L11
 16554  0D9D                     l3405:	
 16555  0D9D  1003               	clrc
 16556  0D9E                     L11:	
 16557  0D9E  0DE1               	rlf	___fladd@grs,f
 16558  0D9F  0860               	movf	___fladd@bexp,w
 16559  0DA0  1903               	btfsc	3,2
 16560  0DA1  2DA4               	goto	l3411
 16561  0DA2  3001               	movlw	1
 16562  0DA3  02E0               	subwf	___fladd@bexp,f
 16563  0DA4                     l3411:	
 16564  0DA4  1FD0               	btfss	___fladd@b+2,7
 16565  0DA5  2D90               	goto	l3397
 16566  0DA6                     l3413:	
 16567  0DA6  01DF               	clrf	___fladd@aexp
 16568  0DA7  1FE1               	btfss	___fladd@grs,7
 16569  0DA8  2DB1               	goto	l3423
 16570  0DA9  0861               	movf	___fladd@grs,w
 16571  0DAA  397F               	andlw	127
 16572  0DAB  1903               	btfsc	3,2
 16573  0DAC  184E               	btfsc	___fladd@b,0
 16574  0DAD  2DAF               	goto	l3419
 16575  0DAE  2DB1               	goto	l3423
 16576  0DAF                     l3419:	
 16577  0DAF  01DF               	clrf	___fladd@aexp
 16578  0DB0  0ADF               	incf	___fladd@aexp,f
 16579  0DB1                     l3423:	
 16580  0DB1  085F               	movf	___fladd@aexp,w
 16581  0DB2  1903               	btfsc	3,2
 16582  0DB3  2DDD               	goto	l1104
 16583  0DB4  3001               	movlw	1
 16584  0DB5  07CE               	addwf	___fladd@b,f
 16585  0DB6  3000               	movlw	0
 16586  0DB7  3DCF               	addwfc	___fladd@b+1,f
 16587  0DB8  3000               	movlw	0
 16588  0DB9  3DD0               	addwfc	___fladd@b+2,f
 16589  0DBA  3000               	movlw	0
 16590  0DBB  3DD1               	addwfc	___fladd@b+3,f
 16591  0DBC  1C51               	btfss	___fladd@b+3,0
 16592  0DBD  2DDD               	goto	l1104
 16593  0DBE  084E               	movf	___fladd@b,w
 16594  0DBF  00D6               	movwf	??___fladd
 16595  0DC0  084F               	movf	___fladd@b+1,w
 16596  0DC1  00D7               	movwf	??___fladd+1
 16597  0DC2  0850               	movf	___fladd@b+2,w
 16598  0DC3  00D8               	movwf	??___fladd+2
 16599  0DC4  0851               	movf	___fladd@b+3,w
 16600  0DC5  00D9               	movwf	??___fladd+3
 16601  0DC6  3001               	movlw	1
 16602  0DC7  00DA               	movwf	??___fladd+4
 16603  0DC8                     u3465:	
 16604  0DC8  37D9               	asrf	??___fladd+3,f
 16605  0DC9  0CD8               	rrf	??___fladd+2,f
 16606  0DCA  0CD7               	rrf	??___fladd+1,f
 16607  0DCB  0CD6               	rrf	??___fladd,f
 16608  0DCC  0BDA               	decfsz	??___fladd+4,f
 16609  0DCD  2DC8               	goto	u3465
 16610  0DCE  0859               	movf	??___fladd+3,w
 16611  0DCF  00D1               	movwf	___fladd@b+3
 16612  0DD0  0858               	movf	??___fladd+2,w
 16613  0DD1  00D0               	movwf	___fladd@b+2
 16614  0DD2  0857               	movf	??___fladd+1,w
 16615  0DD3  00CF               	movwf	___fladd@b+1
 16616  0DD4  0856               	movf	??___fladd,w
 16617  0DD5  00CE               	movwf	___fladd@b
 16618  0DD6  0A60               	incf	___fladd@bexp,w
 16619  0DD7  1903               	btfsc	3,2
 16620  0DD8  2DDD               	goto	l1104
 16621  0DD9  3001               	movlw	1
 16622  0DDA  00D6               	movwf	??___fladd
 16623  0DDB  0856               	movf	??___fladd,w
 16624  0DDC  07E0               	addwf	___fladd@bexp,f
 16625  0DDD                     l1104:	
 16626  0DDD  0A60               	incf	___fladd@bexp,w
 16627  0DDE  1D03               	btfss	3,2
 16628  0DDF  0860               	movf	___fladd@bexp,w
 16629  0DE0  1D03               	btfss	3,2
 16630  0DE1  2DED               	goto	l3441
 16631  0DE2  3000               	movlw	0
 16632  0DE3  00D1               	movwf	___fladd@b+3
 16633  0DE4  3000               	movlw	0
 16634  0DE5  00D0               	movwf	___fladd@b+2
 16635  0DE6  3000               	movlw	0
 16636  0DE7  00CF               	movwf	___fladd@b+1
 16637  0DE8  3000               	movlw	0
 16638  0DE9  00CE               	movwf	___fladd@b
 16639  0DEA  0860               	movf	___fladd@bexp,w
 16640  0DEB  1903               	btfsc	3,2
 16641  0DEC  01DE               	clrf	___fladd@signs
 16642  0DED                     l3441:	
 16643  0DED  1C60               	btfss	___fladd@bexp,0
 16644  0DEE  2DF1               	goto	l3445
 16645  0DEF  17D0               	bsf	___fladd@b+2,7
 16646  0DF0  2DF5               	goto	l1112
 16647  0DF1                     l3445:	
 16648  0DF1  307F               	movlw	127
 16649  0DF2  00D6               	movwf	??___fladd
 16650  0DF3  0856               	movf	??___fladd,w
 16651  0DF4  05D0               	andwf	___fladd@b+2,f
 16652  0DF5                     l1112:	
 16653  0DF5  3660               	lsrf	___fladd@bexp,w
 16654  0DF6  00D6               	movwf	??___fladd
 16655  0DF7  0856               	movf	??___fladd,w
 16656  0DF8  00D1               	movwf	___fladd@b+3
 16657  0DF9  1FDE               	btfss	___fladd@signs,7
 16658  0DFA  0008               	return
 16659  0DFB  17D1               	bsf	___fladd@b+3,7
 16660  0DFC  0008               	return
 16661  0DFD                     __end_of___fladd:	
 16662                           
 16663                           	psect	text55
 16664  0502                     __ptext55:	
 16665 ;; *************** function ___flmul *****************
 16666 ;; Defined at:
 16667 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 16668 ;; Parameters:    Size  Location     Type
 16669 ;;  b               4   20[BANK0 ] unsigned char 
 16670 ;;  a               4   24[BANK0 ] unsigned char 
 16671 ;; Auto vars:     Size  Location     Type
 16672 ;;  prod            4   40[BANK0 ] struct .
 16673 ;;  grs             4   34[BANK0 ] unsigned long 
 16674 ;;  temp            2   44[BANK0 ] struct .
 16675 ;;  bexp            1   39[BANK0 ] unsigned char 
 16676 ;;  aexp            1   38[BANK0 ] unsigned char 
 16677 ;;  sign            1   33[BANK0 ] unsigned char 
 16678 ;; Return value:  Size  Location     Type
 16679 ;;                  4   20[BANK0 ] unsigned char 
 16680 ;; Registers used:
 16681 ;;		wreg, status,2, status,0, pclath, cstack
 16682 ;; Tracked objects:
 16683 ;;		On entry : 0/0
 16684 ;;		On exit  : 0/0
 16685 ;;		Unchanged: 0/0
 16686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16687 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16688 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16689 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16690 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16691 ;;Total ram usage:       26 bytes
 16692 ;; Hardware stack levels used:    1
 16693 ;; Hardware stack levels required when called:    4
 16694 ;; This function calls:
 16695 ;;		__Umul8_16
 16696 ;; This function is called by:
 16697 ;;		_calcRequiredPower
 16698 ;;		_getAvgChannelCurrents
 16699 ;;		_convertAnalogValues
 16700 ;;		_ftoa
 16701 ;; This function uses a non-reentrant model
 16702 ;;
 16703                           
 16704                           
 16705                           ;psect for function ___flmul
 16706  0502                     ___flmul:	
 16707                           
 16708                           ;incstack = 0
 16709                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 16710  0502  0140               	movlb	0	; select bank0
 16711  0503  0837               	movf	___flmul@b+3,w
 16712  0504  3980               	andlw	128
 16713  0505  00BC               	movwf	??___flmul
 16714  0506  083C               	movf	??___flmul,w
 16715  0507  00C1               	movwf	___flmul@sign
 16716  0508  3537               	lslf	___flmul@b+3,w
 16717  0509  00BC               	movwf	??___flmul
 16718  050A  083C               	movf	??___flmul,w
 16719  050B  00C7               	movwf	___flmul@bexp
 16720  050C  1BB6               	btfsc	___flmul@b+2,7
 16721  050D  1447               	bsf	___flmul@bexp,0
 16722  050E  0847               	movf	___flmul@bexp,w
 16723  050F  1903               	btfsc	3,2
 16724  0510  2D1E               	goto	l3807
 16725  0511  0A47               	incf	___flmul@bexp,w
 16726  0512  1D03               	btfss	3,2
 16727  0513  2D1C               	goto	l3805
 16728  0514  3000               	movlw	0
 16729  0515  00B7               	movwf	___flmul@b+3
 16730  0516  3000               	movlw	0
 16731  0517  00B6               	movwf	___flmul@b+2
 16732  0518  3000               	movlw	0
 16733  0519  00B5               	movwf	___flmul@b+1
 16734  051A  3000               	movlw	0
 16735  051B  00B4               	movwf	___flmul@b
 16736  051C                     l3805:	
 16737  051C  17B6               	bsf	___flmul@b+2,7
 16738  051D  2D26               	goto	l3809
 16739  051E                     l3807:	
 16740  051E  3000               	movlw	0
 16741  051F  00B7               	movwf	___flmul@b+3
 16742  0520  3000               	movlw	0
 16743  0521  00B6               	movwf	___flmul@b+2
 16744  0522  3000               	movlw	0
 16745  0523  00B5               	movwf	___flmul@b+1
 16746  0524  3000               	movlw	0
 16747  0525  00B4               	movwf	___flmul@b
 16748  0526                     l3809:	
 16749  0526  083B               	movf	___flmul@a+3,w
 16750  0527  3980               	andlw	128
 16751  0528  00BC               	movwf	??___flmul
 16752  0529  083C               	movf	??___flmul,w
 16753  052A  06C1               	xorwf	___flmul@sign,f
 16754  052B  353B               	lslf	___flmul@a+3,w
 16755  052C  00BC               	movwf	??___flmul
 16756  052D  083C               	movf	??___flmul,w
 16757  052E  00C6               	movwf	___flmul@aexp
 16758  052F  1BBA               	btfsc	___flmul@a+2,7
 16759  0530  1446               	bsf	___flmul@aexp,0
 16760  0531  0846               	movf	___flmul@aexp,w
 16761  0532  1903               	btfsc	3,2
 16762  0533  2D41               	goto	l3825
 16763  0534  0A46               	incf	___flmul@aexp,w
 16764  0535  1D03               	btfss	3,2
 16765  0536  2D3F               	goto	l3823
 16766  0537  3000               	movlw	0
 16767  0538  00BB               	movwf	___flmul@a+3
 16768  0539  3000               	movlw	0
 16769  053A  00BA               	movwf	___flmul@a+2
 16770  053B  3000               	movlw	0
 16771  053C  00B9               	movwf	___flmul@a+1
 16772  053D  3000               	movlw	0
 16773  053E  00B8               	movwf	___flmul@a
 16774  053F                     l3823:	
 16775  053F  17BA               	bsf	___flmul@a+2,7
 16776  0540  2D49               	goto	l3827
 16777  0541                     l3825:	
 16778  0541  3000               	movlw	0
 16779  0542  00BB               	movwf	___flmul@a+3
 16780  0543  3000               	movlw	0
 16781  0544  00BA               	movwf	___flmul@a+2
 16782  0545  3000               	movlw	0
 16783  0546  00B9               	movwf	___flmul@a+1
 16784  0547  3000               	movlw	0
 16785  0548  00B8               	movwf	___flmul@a
 16786  0549                     l3827:	
 16787  0549  0846               	movf	___flmul@aexp,w
 16788  054A  1D03               	btfss	3,2
 16789  054B  0847               	movf	___flmul@bexp,w
 16790  054C  1D03               	btfss	3,2
 16791  054D  2D57               	goto	l3835
 16792  054E  3000               	movlw	0
 16793  054F  00B7               	movwf	?___flmul+3
 16794  0550  3000               	movlw	0
 16795  0551  00B6               	movwf	?___flmul+2
 16796  0552  3000               	movlw	0
 16797  0553  00B5               	movwf	?___flmul+1
 16798  0554  3000               	movlw	0
 16799  0555  00B4               	movwf	?___flmul
 16800  0556  0008               	return
 16801  0557                     l3835:	
 16802  0557  0834               	movf	___flmul@b,w
 16803  0558  00BC               	movwf	??___flmul
 16804  0559  083C               	movf	??___flmul,w
 16805  055A  00A0               	movwf	__Umul8_16@multiplicand
 16806  055B  083A               	movf	___flmul@a+2,w
 16807  055C  31A2  2288  3185   	fcall	__Umul8_16
 16808  055F  0140               	movlb	0	; select bank0
 16809  0560  0821               	movf	?__Umul8_16+1,w
 16810  0561  00CD               	movwf	___flmul@temp+1
 16811  0562  0820               	movf	?__Umul8_16,w
 16812  0563  00CC               	movwf	___flmul@temp
 16813  0564  084C               	movf	___flmul@temp,w
 16814  0565  00BC               	movwf	??___flmul
 16815  0566  01BD               	clrf	??___flmul+1
 16816  0567  01BE               	clrf	??___flmul+2
 16817  0568  01BF               	clrf	??___flmul+3
 16818  0569  083F               	movf	??___flmul+3,w
 16819  056A  00C5               	movwf	___flmul@grs+3
 16820  056B  083E               	movf	??___flmul+2,w
 16821  056C  00C4               	movwf	___flmul@grs+2
 16822  056D  083D               	movf	??___flmul+1,w
 16823  056E  00C3               	movwf	___flmul@grs+1
 16824  056F  083C               	movf	??___flmul,w
 16825  0570  00C2               	movwf	___flmul@grs
 16826  0571  084D               	movf	___flmul@temp+1,w
 16827  0572  00BC               	movwf	??___flmul
 16828  0573  01BD               	clrf	??___flmul+1
 16829  0574  01BE               	clrf	??___flmul+2
 16830  0575  01BF               	clrf	??___flmul+3
 16831  0576  083F               	movf	??___flmul+3,w
 16832  0577  00CB               	movwf	___flmul@prod+3
 16833  0578  083E               	movf	??___flmul+2,w
 16834  0579  00CA               	movwf	___flmul@prod+2
 16835  057A  083D               	movf	??___flmul+1,w
 16836  057B  00C9               	movwf	___flmul@prod+1
 16837  057C  083C               	movf	??___flmul,w
 16838  057D  00C8               	movwf	___flmul@prod
 16839  057E  0835               	movf	___flmul@b+1,w
 16840  057F  00BC               	movwf	??___flmul
 16841  0580  083C               	movf	??___flmul,w
 16842  0581  00A0               	movwf	__Umul8_16@multiplicand
 16843  0582  0839               	movf	___flmul@a+1,w
 16844  0583  31A2  2288  3185   	fcall	__Umul8_16
 16845  0586  0140               	movlb	0	; select bank0
 16846  0587  0821               	movf	?__Umul8_16+1,w
 16847  0588  00CD               	movwf	___flmul@temp+1
 16848  0589  0820               	movf	?__Umul8_16,w
 16849  058A  00CC               	movwf	___flmul@temp
 16850  058B  084C               	movf	___flmul@temp,w
 16851  058C  00BC               	movwf	??___flmul
 16852  058D  01BD               	clrf	??___flmul+1
 16853  058E  01BE               	clrf	??___flmul+2
 16854  058F  01BF               	clrf	??___flmul+3
 16855  0590  083C               	movf	??___flmul,w
 16856  0591  07C2               	addwf	___flmul@grs,f
 16857  0592  083D               	movf	??___flmul+1,w
 16858  0593  3DC3               	addwfc	___flmul@grs+1,f
 16859  0594  083E               	movf	??___flmul+2,w
 16860  0595  3DC4               	addwfc	___flmul@grs+2,f
 16861  0596  083F               	movf	??___flmul+3,w
 16862  0597  3DC5               	addwfc	___flmul@grs+3,f
 16863  0598  084D               	movf	___flmul@temp+1,w
 16864  0599  00BC               	movwf	??___flmul
 16865  059A  01BD               	clrf	??___flmul+1
 16866  059B  01BE               	clrf	??___flmul+2
 16867  059C  01BF               	clrf	??___flmul+3
 16868  059D  083C               	movf	??___flmul,w
 16869  059E  07C8               	addwf	___flmul@prod,f
 16870  059F  083D               	movf	??___flmul+1,w
 16871  05A0  3DC9               	addwfc	___flmul@prod+1,f
 16872  05A1  083E               	movf	??___flmul+2,w
 16873  05A2  3DCA               	addwfc	___flmul@prod+2,f
 16874  05A3  083F               	movf	??___flmul+3,w
 16875  05A4  3DCB               	addwfc	___flmul@prod+3,f
 16876  05A5  0836               	movf	___flmul@b+2,w
 16877  05A6  00BC               	movwf	??___flmul
 16878  05A7  083C               	movf	??___flmul,w
 16879  05A8  00A0               	movwf	__Umul8_16@multiplicand
 16880  05A9  0838               	movf	___flmul@a,w
 16881  05AA  31A2  2288  3185   	fcall	__Umul8_16
 16882  05AD  0140               	movlb	0	; select bank0
 16883  05AE  0821               	movf	?__Umul8_16+1,w
 16884  05AF  00CD               	movwf	___flmul@temp+1
 16885  05B0  0820               	movf	?__Umul8_16,w
 16886  05B1  00CC               	movwf	___flmul@temp
 16887  05B2  084C               	movf	___flmul@temp,w
 16888  05B3  00BC               	movwf	??___flmul
 16889  05B4  01BD               	clrf	??___flmul+1
 16890  05B5  01BE               	clrf	??___flmul+2
 16891  05B6  01BF               	clrf	??___flmul+3
 16892  05B7  083C               	movf	??___flmul,w
 16893  05B8  07C2               	addwf	___flmul@grs,f
 16894  05B9  083D               	movf	??___flmul+1,w
 16895  05BA  3DC3               	addwfc	___flmul@grs+1,f
 16896  05BB  083E               	movf	??___flmul+2,w
 16897  05BC  3DC4               	addwfc	___flmul@grs+2,f
 16898  05BD  083F               	movf	??___flmul+3,w
 16899  05BE  3DC5               	addwfc	___flmul@grs+3,f
 16900  05BF  084D               	movf	___flmul@temp+1,w
 16901  05C0  00BC               	movwf	??___flmul
 16902  05C1  01BD               	clrf	??___flmul+1
 16903  05C2  01BE               	clrf	??___flmul+2
 16904  05C3  01BF               	clrf	??___flmul+3
 16905  05C4  083C               	movf	??___flmul,w
 16906  05C5  07C8               	addwf	___flmul@prod,f
 16907  05C6  083D               	movf	??___flmul+1,w
 16908  05C7  3DC9               	addwfc	___flmul@prod+1,f
 16909  05C8  083E               	movf	??___flmul+2,w
 16910  05C9  3DCA               	addwfc	___flmul@prod+2,f
 16911  05CA  083F               	movf	??___flmul+3,w
 16912  05CB  3DCB               	addwfc	___flmul@prod+3,f
 16913  05CC  3008               	movlw	8
 16914  05CD                     u4355:	
 16915  05CD  35C2               	lslf	___flmul@grs,f
 16916  05CE  0DC3               	rlf	___flmul@grs+1,f
 16917  05CF  0DC4               	rlf	___flmul@grs+2,f
 16918  05D0  0DC5               	rlf	___flmul@grs+3,f
 16919  05D1  0B89               	decfsz	9,f
 16920  05D2  2DCD               	goto	u4355
 16921  05D3  0835               	movf	___flmul@b+1,w
 16922  05D4  00BC               	movwf	??___flmul
 16923  05D5  083C               	movf	??___flmul,w
 16924  05D6  00A0               	movwf	__Umul8_16@multiplicand
 16925  05D7  0838               	movf	___flmul@a,w
 16926  05D8  31A2  2288  3185   	fcall	__Umul8_16
 16927  05DB  0140               	movlb	0	; select bank0
 16928  05DC  0821               	movf	?__Umul8_16+1,w
 16929  05DD  00CD               	movwf	___flmul@temp+1
 16930  05DE  0820               	movf	?__Umul8_16,w
 16931  05DF  00CC               	movwf	___flmul@temp
 16932  05E0  084C               	movf	___flmul@temp,w
 16933  05E1  07C2               	addwf	___flmul@grs,f
 16934  05E2  084D               	movf	___flmul@temp+1,w
 16935  05E3  3DC3               	addwfc	___flmul@grs+1,f
 16936  05E4  3000               	movlw	0
 16937  05E5  3DC4               	addwfc	___flmul@grs+2,f
 16938  05E6  3DC5               	addwfc	___flmul@grs+3,f
 16939  05E7  0834               	movf	___flmul@b,w
 16940  05E8  00BC               	movwf	??___flmul
 16941  05E9  083C               	movf	??___flmul,w
 16942  05EA  00A0               	movwf	__Umul8_16@multiplicand
 16943  05EB  0839               	movf	___flmul@a+1,w
 16944  05EC  31A2  2288  3185   	fcall	__Umul8_16
 16945  05EF  0140               	movlb	0	; select bank0
 16946  05F0  0821               	movf	?__Umul8_16+1,w
 16947  05F1  00CD               	movwf	___flmul@temp+1
 16948  05F2  0820               	movf	?__Umul8_16,w
 16949  05F3  00CC               	movwf	___flmul@temp
 16950  05F4  084C               	movf	___flmul@temp,w
 16951  05F5  07C2               	addwf	___flmul@grs,f
 16952  05F6  084D               	movf	___flmul@temp+1,w
 16953  05F7  3DC3               	addwfc	___flmul@grs+1,f
 16954  05F8  3000               	movlw	0
 16955  05F9  3DC4               	addwfc	___flmul@grs+2,f
 16956  05FA  3DC5               	addwfc	___flmul@grs+3,f
 16957  05FB  3008               	movlw	8
 16958  05FC                     u4365:	
 16959  05FC  35C2               	lslf	___flmul@grs,f
 16960  05FD  0DC3               	rlf	___flmul@grs+1,f
 16961  05FE  0DC4               	rlf	___flmul@grs+2,f
 16962  05FF  0DC5               	rlf	___flmul@grs+3,f
 16963  0600  0B89               	decfsz	9,f
 16964  0601  2DFC               	goto	u4365
 16965  0602  0834               	movf	___flmul@b,w
 16966  0603  00BC               	movwf	??___flmul
 16967  0604  083C               	movf	??___flmul,w
 16968  0605  00A0               	movwf	__Umul8_16@multiplicand
 16969  0606  0838               	movf	___flmul@a,w
 16970  0607  31A2  2288  3185   	fcall	__Umul8_16
 16971  060A  0140               	movlb	0	; select bank0
 16972  060B  0821               	movf	?__Umul8_16+1,w
 16973  060C  00CD               	movwf	___flmul@temp+1
 16974  060D  0820               	movf	?__Umul8_16,w
 16975  060E  00CC               	movwf	___flmul@temp
 16976  060F  084C               	movf	___flmul@temp,w
 16977  0610  07C2               	addwf	___flmul@grs,f
 16978  0611  084D               	movf	___flmul@temp+1,w
 16979  0612  3DC3               	addwfc	___flmul@grs+1,f
 16980  0613  3000               	movlw	0
 16981  0614  3DC4               	addwfc	___flmul@grs+2,f
 16982  0615  3DC5               	addwfc	___flmul@grs+3,f
 16983  0616  0835               	movf	___flmul@b+1,w
 16984  0617  00BC               	movwf	??___flmul
 16985  0618  083C               	movf	??___flmul,w
 16986  0619  00A0               	movwf	__Umul8_16@multiplicand
 16987  061A  083A               	movf	___flmul@a+2,w
 16988  061B  31A2  2288  3185   	fcall	__Umul8_16
 16989  061E  0140               	movlb	0	; select bank0
 16990  061F  0821               	movf	?__Umul8_16+1,w
 16991  0620  00CD               	movwf	___flmul@temp+1
 16992  0621  0820               	movf	?__Umul8_16,w
 16993  0622  00CC               	movwf	___flmul@temp
 16994  0623  084C               	movf	___flmul@temp,w
 16995  0624  07C8               	addwf	___flmul@prod,f
 16996  0625  084D               	movf	___flmul@temp+1,w
 16997  0626  3DC9               	addwfc	___flmul@prod+1,f
 16998  0627  3000               	movlw	0
 16999  0628  3DCA               	addwfc	___flmul@prod+2,f
 17000  0629  3DCB               	addwfc	___flmul@prod+3,f
 17001  062A  0836               	movf	___flmul@b+2,w
 17002  062B  00BC               	movwf	??___flmul
 17003  062C  083C               	movf	??___flmul,w
 17004  062D  00A0               	movwf	__Umul8_16@multiplicand
 17005  062E  0839               	movf	___flmul@a+1,w
 17006  062F  31A2  2288  3185   	fcall	__Umul8_16
 17007  0632  0140               	movlb	0	; select bank0
 17008  0633  0821               	movf	?__Umul8_16+1,w
 17009  0634  00CD               	movwf	___flmul@temp+1
 17010  0635  0820               	movf	?__Umul8_16,w
 17011  0636  00CC               	movwf	___flmul@temp
 17012  0637  084C               	movf	___flmul@temp,w
 17013  0638  07C8               	addwf	___flmul@prod,f
 17014  0639  084D               	movf	___flmul@temp+1,w
 17015  063A  3DC9               	addwfc	___flmul@prod+1,f
 17016  063B  3000               	movlw	0
 17017  063C  3DCA               	addwfc	___flmul@prod+2,f
 17018  063D  3DCB               	addwfc	___flmul@prod+3,f
 17019  063E  0836               	movf	___flmul@b+2,w
 17020  063F  00BC               	movwf	??___flmul
 17021  0640  083C               	movf	??___flmul,w
 17022  0641  00A0               	movwf	__Umul8_16@multiplicand
 17023  0642  083A               	movf	___flmul@a+2,w
 17024  0643  31A2  2288  3185   	fcall	__Umul8_16
 17025  0646  0140               	movlb	0	; select bank0
 17026  0647  0821               	movf	?__Umul8_16+1,w
 17027  0648  00CD               	movwf	___flmul@temp+1
 17028  0649  0820               	movf	?__Umul8_16,w
 17029  064A  00CC               	movwf	___flmul@temp
 17030  064B  084C               	movf	___flmul@temp,w
 17031  064C  00BC               	movwf	??___flmul
 17032  064D  084D               	movf	___flmul@temp+1,w
 17033  064E  00BD               	movwf	??___flmul+1
 17034  064F  01BE               	clrf	??___flmul+2
 17035  0650  01BF               	clrf	??___flmul+3
 17036  0651  3008               	movlw	8
 17037  0652                     u4375:	
 17038  0652  35BC               	lslf	??___flmul,f
 17039  0653  0DBD               	rlf	??___flmul+1,f
 17040  0654  0DBE               	rlf	??___flmul+2,f
 17041  0655  0DBF               	rlf	??___flmul+3,f
 17042  0656  0B89               	decfsz	9,f
 17043  0657  2E52               	goto	u4375
 17044  0658  083C               	movf	??___flmul,w
 17045  0659  07C8               	addwf	___flmul@prod,f
 17046  065A  083D               	movf	??___flmul+1,w
 17047  065B  3DC9               	addwfc	___flmul@prod+1,f
 17048  065C  083E               	movf	??___flmul+2,w
 17049  065D  3DCA               	addwfc	___flmul@prod+2,f
 17050  065E  083F               	movf	??___flmul+3,w
 17051  065F  3DCB               	addwfc	___flmul@prod+3,f
 17052  0660  0842               	movf	___flmul@grs,w
 17053  0661  00BC               	movwf	??___flmul
 17054  0662  0843               	movf	___flmul@grs+1,w
 17055  0663  00BD               	movwf	??___flmul+1
 17056  0664  0844               	movf	___flmul@grs+2,w
 17057  0665  00BE               	movwf	??___flmul+2
 17058  0666  0845               	movf	___flmul@grs+3,w
 17059  0667  00BF               	movwf	??___flmul+3
 17060  0668  3018               	movlw	24
 17061  0669                     u4385:	
 17062  0669  36BF               	lsrf	??___flmul+3,f
 17063  066A  0CBE               	rrf	??___flmul+2,f
 17064  066B  0CBD               	rrf	??___flmul+1,f
 17065  066C  0CBC               	rrf	??___flmul,f
 17066  066D  0B89               	decfsz	9,f
 17067  066E  2E69               	goto	u4385
 17068  066F  083C               	movf	??___flmul,w
 17069  0670  07C8               	addwf	___flmul@prod,f
 17070  0671  083D               	movf	??___flmul+1,w
 17071  0672  3DC9               	addwfc	___flmul@prod+1,f
 17072  0673  083E               	movf	??___flmul+2,w
 17073  0674  3DCA               	addwfc	___flmul@prod+2,f
 17074  0675  083F               	movf	??___flmul+3,w
 17075  0676  3DCB               	addwfc	___flmul@prod+3,f
 17076  0677  3008               	movlw	8
 17077  0678                     u4395:	
 17078  0678  35C2               	lslf	___flmul@grs,f
 17079  0679  0DC3               	rlf	___flmul@grs+1,f
 17080  067A  0DC4               	rlf	___flmul@grs+2,f
 17081  067B  0DC5               	rlf	___flmul@grs+3,f
 17082  067C  0B89               	decfsz	9,f
 17083  067D  2E78               	goto	u4395
 17084  067E  0847               	movf	___flmul@bexp,w
 17085  067F  0746               	addwf	___flmul@aexp,w
 17086  0680  00BC               	movwf	??___flmul
 17087  0681  01BD               	clrf	??___flmul+1
 17088  0682  0DBD               	rlf	??___flmul+1,f
 17089  0683  083C               	movf	??___flmul,w
 17090  0684  3E82               	addlw	130
 17091  0685  00CC               	movwf	___flmul@temp
 17092  0686  30FF               	movlw	255
 17093  0687  3D3D               	addwfc	??___flmul+1,w
 17094  0688  00CD               	movwf	___flmul@temp+1
 17095  0689                     l3887:	
 17096  0689  1BCA               	btfsc	___flmul@prod+2,7
 17097  068A  2EA0               	goto	l3889
 17098  068B  3001               	movlw	1
 17099  068C                     u4405:	
 17100  068C  35C8               	lslf	___flmul@prod,f
 17101  068D  0DC9               	rlf	___flmul@prod+1,f
 17102  068E  0DCA               	rlf	___flmul@prod+2,f
 17103  068F  0DCB               	rlf	___flmul@prod+3,f
 17104  0690  0B89               	decfsz	9,f
 17105  0691  2E8C               	goto	u4405
 17106  0692  1BC5               	btfsc	___flmul@grs+3,7
 17107  0693  1448               	bsf	___flmul@prod,0
 17108  0694  3001               	movlw	1
 17109  0695                     u4425:	
 17110  0695  35C2               	lslf	___flmul@grs,f
 17111  0696  0DC3               	rlf	___flmul@grs+1,f
 17112  0697  0DC4               	rlf	___flmul@grs+2,f
 17113  0698  0DC5               	rlf	___flmul@grs+3,f
 17114  0699  0B89               	decfsz	9,f
 17115  069A  2E95               	goto	u4425
 17116  069B  30FF               	movlw	255
 17117  069C  07CC               	addwf	___flmul@temp,f
 17118  069D  30FF               	movlw	255
 17119  069E  3DCD               	addwfc	___flmul@temp+1,f
 17120  069F  2E89               	goto	l3887
 17121  06A0                     l3889:	
 17122  06A0  01C6               	clrf	___flmul@aexp
 17123  06A1  1FC5               	btfss	___flmul@grs+3,7
 17124  06A2  2EB9               	goto	l3899
 17125  06A3  30FF               	movlw	255
 17126  06A4  0542               	andwf	___flmul@grs,w
 17127  06A5  00BC               	movwf	??___flmul
 17128  06A6  30FF               	movlw	255
 17129  06A7  0543               	andwf	___flmul@grs+1,w
 17130  06A8  00BD               	movwf	??___flmul+1
 17131  06A9  30FF               	movlw	255
 17132  06AA  0544               	andwf	___flmul@grs+2,w
 17133  06AB  00BE               	movwf	??___flmul+2
 17134  06AC  307F               	movlw	127
 17135  06AD  0545               	andwf	___flmul@grs+3,w
 17136  06AE  00BF               	movwf	??___flmul+3
 17137  06AF  083F               	movf	??___flmul+3,w
 17138  06B0  043E               	iorwf	??___flmul+2,w
 17139  06B1  043D               	iorwf	??___flmul+1,w
 17140  06B2  043C               	iorwf	??___flmul,w
 17141  06B3  1903               	skipnz
 17142  06B4  1848               	btfsc	___flmul@prod,0
 17143  06B5  2EB7               	goto	l3895
 17144  06B6  2EB9               	goto	l3899
 17145  06B7                     l3895:	
 17146  06B7  01C6               	clrf	___flmul@aexp
 17147  06B8  0AC6               	incf	___flmul@aexp,f
 17148  06B9                     l3899:	
 17149  06B9  0846               	movf	___flmul@aexp,w
 17150  06BA  1903               	btfsc	3,2
 17151  06BB  2EE2               	goto	l3909
 17152  06BC  3001               	movlw	1
 17153  06BD  07C8               	addwf	___flmul@prod,f
 17154  06BE  3000               	movlw	0
 17155  06BF  3DC9               	addwfc	___flmul@prod+1,f
 17156  06C0  3000               	movlw	0
 17157  06C1  3DCA               	addwfc	___flmul@prod+2,f
 17158  06C2  3000               	movlw	0
 17159  06C3  3DCB               	addwfc	___flmul@prod+3,f
 17160  06C4  1C4B               	btfss	___flmul@prod+3,0
 17161  06C5  2EE2               	goto	l3909
 17162  06C6  0848               	movf	___flmul@prod,w
 17163  06C7  00BC               	movwf	??___flmul
 17164  06C8  0849               	movf	___flmul@prod+1,w
 17165  06C9  00BD               	movwf	??___flmul+1
 17166  06CA  084A               	movf	___flmul@prod+2,w
 17167  06CB  00BE               	movwf	??___flmul+2
 17168  06CC  084B               	movf	___flmul@prod+3,w
 17169  06CD  00BF               	movwf	??___flmul+3
 17170  06CE  3001               	movlw	1
 17171  06CF  00C0               	movwf	??___flmul+4
 17172  06D0                     u4495:	
 17173  06D0  37BF               	asrf	??___flmul+3,f
 17174  06D1  0CBE               	rrf	??___flmul+2,f
 17175  06D2  0CBD               	rrf	??___flmul+1,f
 17176  06D3  0CBC               	rrf	??___flmul,f
 17177  06D4  0BC0               	decfsz	??___flmul+4,f
 17178  06D5  2ED0               	goto	u4495
 17179  06D6  083F               	movf	??___flmul+3,w
 17180  06D7  00CB               	movwf	___flmul@prod+3
 17181  06D8  083E               	movf	??___flmul+2,w
 17182  06D9  00CA               	movwf	___flmul@prod+2
 17183  06DA  083D               	movf	??___flmul+1,w
 17184  06DB  00C9               	movwf	___flmul@prod+1
 17185  06DC  083C               	movf	??___flmul,w
 17186  06DD  00C8               	movwf	___flmul@prod
 17187  06DE  3001               	movlw	1
 17188  06DF  07CC               	addwf	___flmul@temp,f
 17189  06E0  3000               	movlw	0
 17190  06E1  3DCD               	addwfc	___flmul@temp+1,f
 17191  06E2                     l3909:	
 17192  06E2  084D               	movf	___flmul@temp+1,w
 17193  06E3  3A80               	xorlw	128
 17194  06E4  00BC               	movwf	??___flmul
 17195  06E5  3080               	movlw	128
 17196  06E6  023C               	subwf	??___flmul,w
 17197  06E7  1D03               	skipz
 17198  06E8  2EEB               	goto	u4505
 17199  06E9  30FF               	movlw	255
 17200  06EA  024C               	subwf	___flmul@temp,w
 17201  06EB                     u4505:	
 17202  06EB  1C03               	skipc
 17203  06EC  2EF7               	goto	l3913
 17204  06ED  307F               	movlw	127
 17205  06EE  0140               	movlb	0	; select bank0
 17206  06EF  00CB               	movwf	___flmul@prod+3
 17207  06F0  3080               	movlw	128
 17208  06F1  00CA               	movwf	___flmul@prod+2
 17209  06F2  3000               	movlw	0
 17210  06F3  00C9               	movwf	___flmul@prod+1
 17211  06F4  3000               	movlw	0
 17212  06F5  00C8               	movwf	___flmul@prod
 17213  06F6  2F21               	goto	l1178
 17214  06F7                     l3913:	
 17215  06F7  0140               	movlb	0	; select bank0
 17216  06F8  084D               	movf	___flmul@temp+1,w
 17217  06F9  3A80               	xorlw	128
 17218  06FA  00BC               	movwf	??___flmul
 17219  06FB  3080               	movlw	128
 17220  06FC  023C               	subwf	??___flmul,w
 17221  06FD  1D03               	skipz
 17222  06FE  2F01               	goto	u4515
 17223  06FF  3001               	movlw	1
 17224  0700  024C               	subwf	___flmul@temp,w
 17225  0701                     u4515:	
 17226  0701  1803               	skipnc
 17227  0702  2F0E               	goto	l3919
 17228  0703  3000               	movlw	0
 17229  0704  0140               	movlb	0	; select bank0
 17230  0705  00CB               	movwf	___flmul@prod+3
 17231  0706  3000               	movlw	0
 17232  0707  00CA               	movwf	___flmul@prod+2
 17233  0708  3000               	movlw	0
 17234  0709  00C9               	movwf	___flmul@prod+1
 17235  070A  3000               	movlw	0
 17236  070B  00C8               	movwf	___flmul@prod
 17237  070C  01C1               	clrf	___flmul@sign
 17238  070D  2F21               	goto	l1178
 17239  070E                     l3919:	
 17240  070E  0140               	movlb	0	; select bank0
 17241  070F  084C               	movf	___flmul@temp,w
 17242  0710  00BC               	movwf	??___flmul
 17243  0711  083C               	movf	??___flmul,w
 17244  0712  00C7               	movwf	___flmul@bexp
 17245  0713  30FF               	movlw	255
 17246  0714  05C8               	andwf	___flmul@prod,f
 17247  0715  30FF               	movlw	255
 17248  0716  05C9               	andwf	___flmul@prod+1,f
 17249  0717  307F               	movlw	127
 17250  0718  05CA               	andwf	___flmul@prod+2,f
 17251  0719  3000               	movlw	0
 17252  071A  05CB               	andwf	___flmul@prod+3,f
 17253  071B  1847               	btfsc	___flmul@bexp,0
 17254  071C  17CA               	bsf	___flmul@prod+2,7
 17255  071D  3647               	lsrf	___flmul@bexp,w
 17256  071E  00BC               	movwf	??___flmul
 17257  071F  083C               	movf	??___flmul,w
 17258  0720  00CB               	movwf	___flmul@prod+3
 17259  0721                     l1178:	
 17260  0721  0841               	movf	___flmul@sign,w
 17261  0722  00BC               	movwf	??___flmul
 17262  0723  083C               	movf	??___flmul,w
 17263  0724  04CB               	iorwf	___flmul@prod+3,f
 17264  0725  084B               	movf	___flmul@prod+3,w
 17265  0726  00B7               	movwf	?___flmul+3
 17266  0727  084A               	movf	___flmul@prod+2,w
 17267  0728  00B6               	movwf	?___flmul+2
 17268  0729  0849               	movf	___flmul@prod+1,w
 17269  072A  00B5               	movwf	?___flmul+1
 17270  072B  0848               	movf	___flmul@prod,w
 17271  072C  00B4               	movwf	?___flmul
 17272  072D  0008               	return
 17273  072E                     __end_of___flmul:	
 17274                           
 17275                           	psect	text56
 17276  2288                     __ptext56:	
 17277 ;; *************** function __Umul8_16 *****************
 17278 ;; Defined at:
 17279 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 17280 ;; Parameters:    Size  Location     Type
 17281 ;;  multiplier      1    wreg     unsigned char 
 17282 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 17283 ;; Auto vars:     Size  Location     Type
 17284 ;;  multiplier      1    8[BANK0 ] unsigned char 
 17285 ;;  word_mpld       2    6[BANK0 ] unsigned int 
 17286 ;;  product         2    4[BANK0 ] unsigned int 
 17287 ;; Return value:  Size  Location     Type
 17288 ;;                  2    0[BANK0 ] unsigned int 
 17289 ;; Registers used:
 17290 ;;		wreg, status,2, status,0
 17291 ;; Tracked objects:
 17292 ;;		On entry : 0/0
 17293 ;;		On exit  : 0/0
 17294 ;;		Unchanged: 0/0
 17295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17296 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17297 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17298 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17299 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17300 ;;Total ram usage:        9 bytes
 17301 ;; Hardware stack levels used:    1
 17302 ;; Hardware stack levels required when called:    3
 17303 ;; This function calls:
 17304 ;;		Nothing
 17305 ;; This function is called by:
 17306 ;;		___flmul
 17307 ;; This function uses a non-reentrant model
 17308 ;;
 17309                           
 17310                           
 17311                           ;psect for function __Umul8_16
 17312  2288                     __Umul8_16:	
 17313                           
 17314                           ;incstack = 0
 17315                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 17316                           ;__Umul8_16@multiplier stored from wreg
 17317  2288  0140               	movlb	0	; select bank0
 17318  2289  00A8               	movwf	__Umul8_16@multiplier
 17319  228A  01A4               	clrf	__Umul8_16@product
 17320  228B  01A5               	clrf	__Umul8_16@product+1
 17321  228C  0820               	movf	__Umul8_16@multiplicand,w
 17322  228D  00A2               	movwf	??__Umul8_16
 17323  228E  01A3               	clrf	??__Umul8_16+1
 17324  228F  0822               	movf	??__Umul8_16,w
 17325  2290  00A6               	movwf	__Umul8_16@word_mpld
 17326  2291  0823               	movf	??__Umul8_16+1,w
 17327  2292  00A7               	movwf	__Umul8_16@word_mpld+1
 17328  2293                     l3455:	
 17329  2293  1C28               	btfss	__Umul8_16@multiplier,0
 17330  2294  2A99               	goto	l1233
 17331  2295  0826               	movf	__Umul8_16@word_mpld,w
 17332  2296  07A4               	addwf	__Umul8_16@product,f
 17333  2297  0827               	movf	__Umul8_16@word_mpld+1,w
 17334  2298  3DA5               	addwfc	__Umul8_16@product+1,f
 17335  2299                     l1233:	
 17336  2299  3001               	movlw	1
 17337  229A                     u3545:	
 17338  229A  35A6               	lslf	__Umul8_16@word_mpld,f
 17339  229B  0DA7               	rlf	__Umul8_16@word_mpld+1,f
 17340  229C  0B89               	decfsz	9,f
 17341  229D  2A9A               	goto	u3545
 17342  229E  1003               	clrc
 17343  229F  0CA8               	rrf	__Umul8_16@multiplier,f
 17344  22A0  0828               	movf	__Umul8_16@multiplier,w
 17345  22A1  1D03               	btfss	3,2
 17346  22A2  2A93               	goto	l3455
 17347  22A3  0825               	movf	__Umul8_16@product+1,w
 17348  22A4  00A1               	movwf	?__Umul8_16+1
 17349  22A5  0824               	movf	__Umul8_16@product,w
 17350  22A6  00A0               	movwf	?__Umul8_16
 17351  22A7  0008               	return
 17352  22A8                     __end_of__Umul8_16:	
 17353                           
 17354                           	psect	text57
 17355  1374                     __ptext57:	
 17356 ;; *************** function ___fldiv *****************
 17357 ;; Defined at:
 17358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 17359 ;; Parameters:    Size  Location     Type
 17360 ;;  a               4   46[BANK0 ] unsigned int 
 17361 ;;  b               4   50[BANK0 ] unsigned int 
 17362 ;; Auto vars:     Size  Location     Type
 17363 ;;  grs             4   66[BANK0 ] unsigned long 
 17364 ;;  rem             4   59[BANK0 ] unsigned long 
 17365 ;;  new_exp         2   64[BANK0 ] int 
 17366 ;;  aexp            1   71[BANK0 ] unsigned char 
 17367 ;;  bexp            1   70[BANK0 ] unsigned char 
 17368 ;;  sign            1   63[BANK0 ] unsigned char 
 17369 ;; Return value:  Size  Location     Type
 17370 ;;                  4   46[BANK0 ] unsigned char 
 17371 ;; Registers used:
 17372 ;;		wreg, status,2, status,0
 17373 ;; Tracked objects:
 17374 ;;		On entry : 0/0
 17375 ;;		On exit  : 0/0
 17376 ;;		Unchanged: 0/0
 17377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17378 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17379 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17380 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17381 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17382 ;;Total ram usage:       26 bytes
 17383 ;; Hardware stack levels used:    1
 17384 ;; Hardware stack levels required when called:    3
 17385 ;; This function calls:
 17386 ;;		Nothing
 17387 ;; This function is called by:
 17388 ;;		_calcRequiredPower
 17389 ;;		_getAvgChannelCurrents
 17390 ;;		_convertAnalogValues
 17391 ;;		_ftoa
 17392 ;; This function uses a non-reentrant model
 17393 ;;
 17394                           
 17395                           
 17396                           ;psect for function ___fldiv
 17397  1374                     ___fldiv:	
 17398                           
 17399                           ;incstack = 0
 17400                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 17401  1374  0140               	movlb	0	; select bank0
 17402  1375  0855               	movf	___fldiv@b+3,w
 17403  1376  3980               	andlw	128
 17404  1377  00D6               	movwf	??___fldiv
 17405  1378  0856               	movf	??___fldiv,w
 17406  1379  00DF               	movwf	___fldiv@sign
 17407  137A  3555               	lslf	___fldiv@b+3,w
 17408  137B  00D6               	movwf	??___fldiv
 17409  137C  0856               	movf	??___fldiv,w
 17410  137D  00E6               	movwf	___fldiv@bexp
 17411  137E  1BD4               	btfsc	___fldiv@b+2,7
 17412  137F  1466               	bsf	___fldiv@bexp,0
 17413  1380  0866               	movf	___fldiv@bexp,w
 17414  1381  1903               	btfsc	3,2
 17415  1382  2B91               	goto	l3669
 17416  1383  0A66               	incf	___fldiv@bexp,w
 17417  1384  1D03               	btfss	3,2
 17418  1385  2B8E               	goto	l3665
 17419  1386  3000               	movlw	0
 17420  1387  00D5               	movwf	___fldiv@b+3
 17421  1388  3000               	movlw	0
 17422  1389  00D4               	movwf	___fldiv@b+2
 17423  138A  3000               	movlw	0
 17424  138B  00D3               	movwf	___fldiv@b+1
 17425  138C  3000               	movlw	0
 17426  138D  00D2               	movwf	___fldiv@b
 17427  138E                     l3665:	
 17428  138E  17D4               	bsf	___fldiv@b+2,7
 17429  138F  01D5               	clrf	___fldiv@b+3
 17430  1390  2B99               	goto	l3671
 17431  1391                     l3669:	
 17432  1391  3000               	movlw	0
 17433  1392  00D5               	movwf	___fldiv@b+3
 17434  1393  3000               	movlw	0
 17435  1394  00D4               	movwf	___fldiv@b+2
 17436  1395  3000               	movlw	0
 17437  1396  00D3               	movwf	___fldiv@b+1
 17438  1397  3000               	movlw	0
 17439  1398  00D2               	movwf	___fldiv@b
 17440  1399                     l3671:	
 17441  1399  0851               	movf	___fldiv@a+3,w
 17442  139A  3980               	andlw	128
 17443  139B  00D6               	movwf	??___fldiv
 17444  139C  0856               	movf	??___fldiv,w
 17445  139D  06DF               	xorwf	___fldiv@sign,f
 17446  139E  3551               	lslf	___fldiv@a+3,w
 17447  139F  00D6               	movwf	??___fldiv
 17448  13A0  0856               	movf	??___fldiv,w
 17449  13A1  00E7               	movwf	___fldiv@aexp
 17450  13A2  1BD0               	btfsc	___fldiv@a+2,7
 17451  13A3  1467               	bsf	___fldiv@aexp,0
 17452  13A4  0867               	movf	___fldiv@aexp,w
 17453  13A5  1903               	btfsc	3,2
 17454  13A6  2BB5               	goto	l3689
 17455  13A7  0A67               	incf	___fldiv@aexp,w
 17456  13A8  1D03               	btfss	3,2
 17457  13A9  2BB2               	goto	l3685
 17458  13AA  3000               	movlw	0
 17459  13AB  00D1               	movwf	___fldiv@a+3
 17460  13AC  3000               	movlw	0
 17461  13AD  00D0               	movwf	___fldiv@a+2
 17462  13AE  3000               	movlw	0
 17463  13AF  00CF               	movwf	___fldiv@a+1
 17464  13B0  3000               	movlw	0
 17465  13B1  00CE               	movwf	___fldiv@a
 17466  13B2                     l3685:	
 17467  13B2  17D0               	bsf	___fldiv@a+2,7
 17468  13B3  01D1               	clrf	___fldiv@a+3
 17469  13B4  2BBD               	goto	l1126
 17470  13B5                     l3689:	
 17471  13B5  3000               	movlw	0
 17472  13B6  00D1               	movwf	___fldiv@a+3
 17473  13B7  3000               	movlw	0
 17474  13B8  00D0               	movwf	___fldiv@a+2
 17475  13B9  3000               	movlw	0
 17476  13BA  00CF               	movwf	___fldiv@a+1
 17477  13BB  3000               	movlw	0
 17478  13BC  00CE               	movwf	___fldiv@a
 17479  13BD                     l1126:	
 17480  13BD  0851               	movf	___fldiv@a+3,w
 17481  13BE  0450               	iorwf	___fldiv@a+2,w
 17482  13BF  044F               	iorwf	___fldiv@a+1,w
 17483  13C0  044E               	iorwf	___fldiv@a,w
 17484  13C1  1D03               	skipz
 17485  13C2  2BDC               	goto	l3699
 17486  13C3  3000               	movlw	0
 17487  13C4  00D5               	movwf	___fldiv@b+3
 17488  13C5  3000               	movlw	0
 17489  13C6  00D4               	movwf	___fldiv@b+2
 17490  13C7  3000               	movlw	0
 17491  13C8  00D3               	movwf	___fldiv@b+1
 17492  13C9  3000               	movlw	0
 17493  13CA  00D2               	movwf	___fldiv@b
 17494  13CB  3080               	movlw	128
 17495  13CC  04D4               	iorwf	___fldiv@b+2,f
 17496  13CD  307F               	movlw	127
 17497  13CE  04D5               	iorwf	___fldiv@b+3,f
 17498  13CF                     L12:	
 17499  13CF  085F               	movf	___fldiv@sign,w
 17500  13D0  00D6               	movwf	??___fldiv
 17501  13D1  0856               	movf	??___fldiv,w
 17502  13D2  04D5               	iorwf	___fldiv@b+3,f
 17503  13D3  0855               	movf	___fldiv@b+3,w
 17504  13D4  00D1               	movwf	?___fldiv+3
 17505  13D5  0854               	movf	___fldiv@b+2,w
 17506  13D6  00D0               	movwf	?___fldiv+2
 17507  13D7  0853               	movf	___fldiv@b+1,w
 17508  13D8  00CF               	movwf	?___fldiv+1
 17509  13D9  0852               	movf	___fldiv@b,w
 17510  13DA  00CE               	movwf	?___fldiv
 17511  13DB  0008               	return
 17512  13DC                     l3699:	
 17513  13DC  0866               	movf	___fldiv@bexp,w
 17514  13DD  1D03               	btfss	3,2
 17515  13DE  2BE8               	goto	l3705
 17516  13DF  3000               	movlw	0
 17517  13E0  00D1               	movwf	?___fldiv+3
 17518  13E1  3000               	movlw	0
 17519  13E2  00D0               	movwf	?___fldiv+2
 17520  13E3  3000               	movlw	0
 17521  13E4  00CF               	movwf	?___fldiv+1
 17522  13E5  3000               	movlw	0
 17523  13E6  00CE               	movwf	?___fldiv
 17524  13E7  0008               	return
 17525  13E8                     l3705:	
 17526  13E8  0866               	movf	___fldiv@bexp,w
 17527  13E9  00D6               	movwf	??___fldiv
 17528  13EA  01D7               	clrf	??___fldiv+1
 17529  13EB  0857               	movf	??___fldiv+1,w
 17530  13EC  00D9               	movwf	??___fldiv+3
 17531  13ED  0867               	movf	___fldiv@aexp,w
 17532  13EE  0256               	subwf	??___fldiv,w
 17533  13EF  00D8               	movwf	??___fldiv+2
 17534  13F0  1C03               	skipc
 17535  13F1  03D9               	decf	??___fldiv+3,f
 17536  13F2  0858               	movf	??___fldiv+2,w
 17537  13F3  3E7F               	addlw	127
 17538  13F4  00E0               	movwf	___fldiv@new_exp
 17539  13F5  3000               	movlw	0
 17540  13F6  3D59               	addwfc	??___fldiv+3,w
 17541  13F7  00E1               	movwf	___fldiv@new_exp+1
 17542  13F8  0855               	movf	___fldiv@b+3,w
 17543  13F9  00DE               	movwf	___fldiv@rem+3
 17544  13FA  0854               	movf	___fldiv@b+2,w
 17545  13FB  00DD               	movwf	___fldiv@rem+2
 17546  13FC  0853               	movf	___fldiv@b+1,w
 17547  13FD  00DC               	movwf	___fldiv@rem+1
 17548  13FE  0852               	movf	___fldiv@b,w
 17549  13FF  00DB               	movwf	___fldiv@rem
 17550  1400  3000               	movlw	0
 17551  1401  00D5               	movwf	___fldiv@b+3
 17552  1402  3000               	movlw	0
 17553  1403  00D4               	movwf	___fldiv@b+2
 17554  1404  3000               	movlw	0
 17555  1405  00D3               	movwf	___fldiv@b+1
 17556  1406  3000               	movlw	0
 17557  1407  00D2               	movwf	___fldiv@b
 17558  1408  3000               	movlw	0
 17559  1409  00E5               	movwf	___fldiv@grs+3
 17560  140A  3000               	movlw	0
 17561  140B  00E4               	movwf	___fldiv@grs+2
 17562  140C  3000               	movlw	0
 17563  140D  00E3               	movwf	___fldiv@grs+1
 17564  140E  3000               	movlw	0
 17565  140F  00E2               	movwf	___fldiv@grs
 17566  1410  01E7               	clrf	___fldiv@aexp
 17567  1411                     l3733:	
 17568  1411  301A               	movlw	26
 17569  1412  0267               	subwf	___fldiv@aexp,w
 17570  1413  1803               	btfsc	3,0
 17571  1414  2C4D               	goto	l3735
 17572  1415  0867               	movf	___fldiv@aexp,w
 17573  1416  1903               	btfsc	3,2
 17574  1417  2C2F               	goto	l3725
 17575  1418  3001               	movlw	1
 17576  1419                     u4075:	
 17577  1419  35DB               	lslf	___fldiv@rem,f
 17578  141A  0DDC               	rlf	___fldiv@rem+1,f
 17579  141B  0DDD               	rlf	___fldiv@rem+2,f
 17580  141C  0DDE               	rlf	___fldiv@rem+3,f
 17581  141D  0B89               	decfsz	9,f
 17582  141E  2C19               	goto	u4075
 17583  141F  3001               	movlw	1
 17584  1420                     u4085:	
 17585  1420  35D2               	lslf	___fldiv@b,f
 17586  1421  0DD3               	rlf	___fldiv@b+1,f
 17587  1422  0DD4               	rlf	___fldiv@b+2,f
 17588  1423  0DD5               	rlf	___fldiv@b+3,f
 17589  1424  0B89               	decfsz	9,f
 17590  1425  2C20               	goto	u4085
 17591  1426  1BE5               	btfsc	___fldiv@grs+3,7
 17592  1427  1452               	bsf	___fldiv@b,0
 17593  1428  3001               	movlw	1
 17594  1429                     u4105:	
 17595  1429  35E2               	lslf	___fldiv@grs,f
 17596  142A  0DE3               	rlf	___fldiv@grs+1,f
 17597  142B  0DE4               	rlf	___fldiv@grs+2,f
 17598  142C  0DE5               	rlf	___fldiv@grs+3,f
 17599  142D  0B89               	decfsz	9,f
 17600  142E  2C29               	goto	u4105
 17601  142F                     l3725:	
 17602  142F  0851               	movf	___fldiv@a+3,w
 17603  1430  025E               	subwf	___fldiv@rem+3,w
 17604  1431  1D03               	skipz
 17605  1432  2C3D               	goto	u4115
 17606  1433  0850               	movf	___fldiv@a+2,w
 17607  1434  025D               	subwf	___fldiv@rem+2,w
 17608  1435  1D03               	skipz
 17609  1436  2C3D               	goto	u4115
 17610  1437  084F               	movf	___fldiv@a+1,w
 17611  1438  025C               	subwf	___fldiv@rem+1,w
 17612  1439  1D03               	skipz
 17613  143A  2C3D               	goto	u4115
 17614  143B  084E               	movf	___fldiv@a,w
 17615  143C  025B               	subwf	___fldiv@rem,w
 17616  143D                     u4115:	
 17617  143D  1C03               	skipc
 17618  143E  2C48               	goto	l3731
 17619  143F  1765               	bsf	___fldiv@grs+3,6
 17620  1440  084E               	movf	___fldiv@a,w
 17621  1441  02DB               	subwf	___fldiv@rem,f
 17622  1442  084F               	movf	___fldiv@a+1,w
 17623  1443  3BDC               	subwfb	___fldiv@rem+1,f
 17624  1444  0850               	movf	___fldiv@a+2,w
 17625  1445  3BDD               	subwfb	___fldiv@rem+2,f
 17626  1446  0851               	movf	___fldiv@a+3,w
 17627  1447  3BDE               	subwfb	___fldiv@rem+3,f
 17628  1448                     l3731:	
 17629  1448  3001               	movlw	1
 17630  1449  00D6               	movwf	??___fldiv
 17631  144A  0856               	movf	??___fldiv,w
 17632  144B  07E7               	addwf	___fldiv@aexp,f
 17633  144C  2C11               	goto	l3733
 17634  144D                     l3735:	
 17635  144D  085E               	movf	___fldiv@rem+3,w
 17636  144E  045D               	iorwf	___fldiv@rem+2,w
 17637  144F  045C               	iorwf	___fldiv@rem+1,w
 17638  1450  045B               	iorwf	___fldiv@rem,w
 17639  1451  1D03               	btfss	3,2
 17640  1452  1462               	bsf	___fldiv@grs,0
 17641  1453                     l3749:	
 17642  1453  1BD4               	btfsc	___fldiv@b+2,7
 17643  1454  2C6A               	goto	l3751
 17644  1455  3001               	movlw	1
 17645  1456                     u4145:	
 17646  1456  35D2               	lslf	___fldiv@b,f
 17647  1457  0DD3               	rlf	___fldiv@b+1,f
 17648  1458  0DD4               	rlf	___fldiv@b+2,f
 17649  1459  0DD5               	rlf	___fldiv@b+3,f
 17650  145A  0B89               	decfsz	9,f
 17651  145B  2C56               	goto	u4145
 17652  145C  1BE5               	btfsc	___fldiv@grs+3,7
 17653  145D  1452               	bsf	___fldiv@b,0
 17654  145E  3001               	movlw	1
 17655  145F                     u4165:	
 17656  145F  35E2               	lslf	___fldiv@grs,f
 17657  1460  0DE3               	rlf	___fldiv@grs+1,f
 17658  1461  0DE4               	rlf	___fldiv@grs+2,f
 17659  1462  0DE5               	rlf	___fldiv@grs+3,f
 17660  1463  0B89               	decfsz	9,f
 17661  1464  2C5F               	goto	u4165
 17662  1465  30FF               	movlw	255
 17663  1466  07E0               	addwf	___fldiv@new_exp,f
 17664  1467  30FF               	movlw	255
 17665  1468  3DE1               	addwfc	___fldiv@new_exp+1,f
 17666  1469  2C53               	goto	l3749
 17667  146A                     l3751:	
 17668  146A  01E7               	clrf	___fldiv@aexp
 17669  146B  1FE5               	btfss	___fldiv@grs+3,7
 17670  146C  2C83               	goto	l3761
 17671  146D  30FF               	movlw	255
 17672  146E  0562               	andwf	___fldiv@grs,w
 17673  146F  00D6               	movwf	??___fldiv
 17674  1470  30FF               	movlw	255
 17675  1471  0563               	andwf	___fldiv@grs+1,w
 17676  1472  00D7               	movwf	??___fldiv+1
 17677  1473  30FF               	movlw	255
 17678  1474  0564               	andwf	___fldiv@grs+2,w
 17679  1475  00D8               	movwf	??___fldiv+2
 17680  1476  307F               	movlw	127
 17681  1477  0565               	andwf	___fldiv@grs+3,w
 17682  1478  00D9               	movwf	??___fldiv+3
 17683  1479  0859               	movf	??___fldiv+3,w
 17684  147A  0458               	iorwf	??___fldiv+2,w
 17685  147B  0457               	iorwf	??___fldiv+1,w
 17686  147C  0456               	iorwf	??___fldiv,w
 17687  147D  1903               	skipnz
 17688  147E  1852               	btfsc	___fldiv@b,0
 17689  147F  2C81               	goto	l3757
 17690  1480  2C83               	goto	l3761
 17691  1481                     l3757:	
 17692  1481  01E7               	clrf	___fldiv@aexp
 17693  1482  0AE7               	incf	___fldiv@aexp,f
 17694  1483                     l3761:	
 17695  1483  0867               	movf	___fldiv@aexp,w
 17696  1484  1903               	btfsc	3,2
 17697  1485  2CAC               	goto	l3771
 17698  1486  3001               	movlw	1
 17699  1487  07D2               	addwf	___fldiv@b,f
 17700  1488  3000               	movlw	0
 17701  1489  3DD3               	addwfc	___fldiv@b+1,f
 17702  148A  3000               	movlw	0
 17703  148B  3DD4               	addwfc	___fldiv@b+2,f
 17704  148C  3000               	movlw	0
 17705  148D  3DD5               	addwfc	___fldiv@b+3,f
 17706  148E  1C55               	btfss	___fldiv@b+3,0
 17707  148F  2CAC               	goto	l3771
 17708  1490  0852               	movf	___fldiv@b,w
 17709  1491  00D6               	movwf	??___fldiv
 17710  1492  0853               	movf	___fldiv@b+1,w
 17711  1493  00D7               	movwf	??___fldiv+1
 17712  1494  0854               	movf	___fldiv@b+2,w
 17713  1495  00D8               	movwf	??___fldiv+2
 17714  1496  0855               	movf	___fldiv@b+3,w
 17715  1497  00D9               	movwf	??___fldiv+3
 17716  1498  3001               	movlw	1
 17717  1499  00DA               	movwf	??___fldiv+4
 17718  149A                     u4235:	
 17719  149A  37D9               	asrf	??___fldiv+3,f
 17720  149B  0CD8               	rrf	??___fldiv+2,f
 17721  149C  0CD7               	rrf	??___fldiv+1,f
 17722  149D  0CD6               	rrf	??___fldiv,f
 17723  149E  0BDA               	decfsz	??___fldiv+4,f
 17724  149F  2C9A               	goto	u4235
 17725  14A0  0859               	movf	??___fldiv+3,w
 17726  14A1  00D5               	movwf	___fldiv@b+3
 17727  14A2  0858               	movf	??___fldiv+2,w
 17728  14A3  00D4               	movwf	___fldiv@b+2
 17729  14A4  0857               	movf	??___fldiv+1,w
 17730  14A5  00D3               	movwf	___fldiv@b+1
 17731  14A6  0856               	movf	??___fldiv,w
 17732  14A7  00D2               	movwf	___fldiv@b
 17733  14A8  3001               	movlw	1
 17734  14A9  07E0               	addwf	___fldiv@new_exp,f
 17735  14AA  3000               	movlw	0
 17736  14AB  3DE1               	addwfc	___fldiv@new_exp+1,f
 17737  14AC                     l3771:	
 17738  14AC  0861               	movf	___fldiv@new_exp+1,w
 17739  14AD  3A80               	xorlw	128
 17740  14AE  00D6               	movwf	??___fldiv
 17741  14AF  3080               	movlw	128
 17742  14B0  0256               	subwf	??___fldiv,w
 17743  14B1  1D03               	skipz
 17744  14B2  2CB5               	goto	u4245
 17745  14B3  30FF               	movlw	255
 17746  14B4  0260               	subwf	___fldiv@new_exp,w
 17747  14B5                     u4245:	
 17748  14B5  1C03               	skipc
 17749  14B6  2CC4               	goto	l1147
 17750  14B7  30FF               	movlw	255
 17751  14B8  0140               	movlb	0	; select bank0
 17752  14B9  00E0               	movwf	___fldiv@new_exp
 17753  14BA  3000               	movlw	0
 17754  14BB  00E1               	movwf	___fldiv@new_exp+1
 17755  14BC  3000               	movlw	0
 17756  14BD  00D5               	movwf	___fldiv@b+3
 17757  14BE  3000               	movlw	0
 17758  14BF  00D4               	movwf	___fldiv@b+2
 17759  14C0  3000               	movlw	0
 17760  14C1  00D3               	movwf	___fldiv@b+1
 17761  14C2  3000               	movlw	0
 17762  14C3  00D2               	movwf	___fldiv@b
 17763  14C4                     l1147:	
 17764  14C4  0140               	movlb	0	; select bank0
 17765  14C5  0861               	movf	___fldiv@new_exp+1,w
 17766  14C6  3A80               	xorlw	128
 17767  14C7  00D6               	movwf	??___fldiv
 17768  14C8  3080               	movlw	128
 17769  14C9  0256               	subwf	??___fldiv,w
 17770  14CA  1D03               	skipz
 17771  14CB  2CCE               	goto	u4255
 17772  14CC  3001               	movlw	1
 17773  14CD  0260               	subwf	___fldiv@new_exp,w
 17774  14CE                     u4255:	
 17775  14CE  1803               	skipnc
 17776  14CF  2CDC               	goto	l1148
 17777  14D0  0140               	movlb	0	; select bank0
 17778  14D1  01E0               	clrf	___fldiv@new_exp
 17779  14D2  01E1               	clrf	___fldiv@new_exp+1
 17780  14D3  3000               	movlw	0
 17781  14D4  00D5               	movwf	___fldiv@b+3
 17782  14D5  3000               	movlw	0
 17783  14D6  00D4               	movwf	___fldiv@b+2
 17784  14D7  3000               	movlw	0
 17785  14D8  00D3               	movwf	___fldiv@b+1
 17786  14D9  3000               	movlw	0
 17787  14DA  00D2               	movwf	___fldiv@b
 17788  14DB  01DF               	clrf	___fldiv@sign
 17789  14DC                     l1148:	
 17790  14DC  0140               	movlb	0	; select bank0
 17791  14DD  0860               	movf	___fldiv@new_exp,w
 17792  14DE  00D6               	movwf	??___fldiv
 17793  14DF  0856               	movf	??___fldiv,w
 17794  14E0  00E6               	movwf	___fldiv@bexp
 17795  14E1  1C66               	btfss	___fldiv@bexp,0
 17796  14E2  2CE5               	goto	l3785
 17797  14E3  17D4               	bsf	___fldiv@b+2,7
 17798  14E4  2CE9               	goto	l1150
 17799  14E5                     l3785:	
 17800  14E5  307F               	movlw	127
 17801  14E6  00D6               	movwf	??___fldiv
 17802  14E7  0856               	movf	??___fldiv,w
 17803  14E8  05D4               	andwf	___fldiv@b+2,f
 17804  14E9                     l1150:	
 17805  14E9  3666               	lsrf	___fldiv@bexp,w
 17806  14EA  00D6               	movwf	??___fldiv
 17807  14EB  0856               	movf	??___fldiv,w
 17808  14EC  00D5               	movwf	___fldiv@b+3
 17809  14ED  2BCF               	goto	L12
 17810  14EE                     __end_of___fldiv:	
 17811                           
 17812                           	psect	text58
 17813  22A8                     __ptext58:	
 17814 ;; *************** function _OLED_loadSpecialChars *****************
 17815 ;; Defined at:
 17816 ;;		line 177 in file "oled.c"
 17817 ;; Parameters:    Size  Location     Type
 17818 ;;		None
 17819 ;; Auto vars:     Size  Location     Type
 17820 ;;  special        32    8[BANK0 ] unsigned char [32]
 17821 ;;  n               1   40[BANK0 ] unsigned char 
 17822 ;; Return value:  Size  Location     Type
 17823 ;;                  1    wreg      void 
 17824 ;; Registers used:
 17825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17826 ;; Tracked objects:
 17827 ;;		On entry : 0/0
 17828 ;;		On exit  : 0/0
 17829 ;;		Unchanged: 0/0
 17830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17832 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17834 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17835 ;;Total ram usage:       34 bytes
 17836 ;; Hardware stack levels used:    1
 17837 ;; Hardware stack levels required when called:    7
 17838 ;; This function calls:
 17839 ;;		_OLED_command
 17840 ;;		_OLED_write
 17841 ;; This function is called by:
 17842 ;;		_main
 17843 ;; This function uses a non-reentrant model
 17844 ;;
 17845                           
 17846                           
 17847                           ;psect for function _OLED_loadSpecialChars
 17848  22A8                     _OLED_loadSpecialChars:	
 17849                           
 17850                           ;oled.c: 179:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 17851                           
 17852                           ;incstack = 0
 17853                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17854  22A8  30A0               	movlw	low OLED_loadSpecialChars@F7945
 17855  22A9  0086               	movwf	6
 17856  22AA  3001               	movlw	high OLED_loadSpecialChars@F7945
 17857  22AB  0087               	movwf	7
 17858  22AC  3028               	movlw	low OLED_loadSpecialChars@special
 17859  22AD  0084               	movwf	4
 17860  22AE  3000               	movlw	high OLED_loadSpecialChars@special
 17861  22AF  0085               	movwf	5
 17862  22B0  3020               	movlw	32
 17863  22B1  0140               	movlb	0	; select bank0
 17864  22B2  00A7               	movwf	??_OLED_loadSpecialChars
 17865  22B3                     u5450:	
 17866  22B3  0016               	moviw fsr1++
 17867  22B4  001A               	movwi fsr0++
 17868  22B5  0BA7               	decfsz	??_OLED_loadSpecialChars,f
 17869  22B6  2AB3               	goto	u5450
 17870                           
 17871                           ;oled.c: 184:  uint8_t n;;oled.c: 186:  OLED_command(0x40 + 8);
 17872  22B7  3048               	movlw	72
 17873  22B8  31A1  219E  31A2   	fcall	_OLED_command
 17874                           
 17875                           ;oled.c: 187:  for(n = 0; n < sizeof(special); n++) {
 17876  22BB  0140               	movlb	0	; select bank0
 17877  22BC  01C8               	clrf	OLED_loadSpecialChars@n
 17878  22BD                     l4751:	
 17879                           
 17880                           ;oled.c: 188:   OLED_write(special[n]);
 17881  22BD  0848               	movf	OLED_loadSpecialChars@n,w
 17882  22BE  3E28               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 17883  22BF  0086               	movwf	6
 17884  22C0  0187               	clrf	7
 17885  22C1  0801               	movf	1,w
 17886  22C2  31A1  21BC  31A2   	fcall	_OLED_write
 17887                           
 17888                           ;oled.c: 189:  }
 17889  22C5  3001               	movlw	1
 17890  22C6  0140               	movlb	0	; select bank0
 17891  22C7  00A7               	movwf	??_OLED_loadSpecialChars
 17892  22C8  0827               	movf	??_OLED_loadSpecialChars,w
 17893  22C9  07C8               	addwf	OLED_loadSpecialChars@n,f
 17894  22CA  3020               	movlw	32
 17895  22CB  0248               	subwf	OLED_loadSpecialChars@n,w
 17896  22CC  1803               	btfsc	3,0
 17897  22CD  0008               	return
 17898  22CE  2ABD               	goto	l4751
 17899  22CF                     __end_of_OLED_loadSpecialChars:	
 17900                           
 17901                           	psect	text59
 17902  21BC                     __ptext59:	
 17903 ;; *************** function _OLED_write *****************
 17904 ;; Defined at:
 17905 ;;		line 79 in file "oled.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;  value           1    wreg     unsigned char 
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;  value           1    6[BANK0 ] unsigned char 
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  1    wreg      void 
 17912 ;; Registers used:
 17913 ;;		wreg, status,2, status,0, pclath, cstack
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17922 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17923 ;;Total ram usage:        1 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    6
 17926 ;; This function calls:
 17927 ;;		_OLED_send
 17928 ;;		_OLED_waitForReady
 17929 ;; This function is called by:
 17930 ;;		_OLED_print_xy
 17931 ;;		_OLED_loadSpecialChars
 17932 ;;		_OLED_print
 17933 ;; This function uses a non-reentrant model
 17934 ;;
 17935                           
 17936                           
 17937                           ;psect for function _OLED_write
 17938  21BC                     _OLED_write:	
 17939                           
 17940                           ;incstack = 0
 17941                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 17942                           ;OLED_write@value stored from wreg
 17943  21BC  0140               	movlb	0	; select bank0
 17944  21BD  00A6               	movwf	OLED_write@value
 17945                           
 17946                           ;oled.c: 79: void OLED_write(uint8_t value);oled.c: 80: {;oled.c: 81:  OLED_send(value, 
      +                          1);
 17947  21BE  01A3               	clrf	OLED_send@mode
 17948  21BF  0AA3               	incf	OLED_send@mode,f
 17949  21C0  0826               	movf	OLED_write@value,w
 17950  21C1  3187  27E8  31A1   	fcall	_OLED_send
 17951                           
 17952                           ;oled.c: 82:  OLED_waitForReady();
 17953  21C4  31A2  224A         	fcall	_OLED_waitForReady
 17954  21C6  0008               	return
 17955  21C7                     __end_of_OLED_write:	
 17956                           
 17957                           	psect	text60
 17958  1A6E                     __ptext60:	
 17959 ;; *************** function _OLED_init *****************
 17960 ;; Defined at:
 17961 ;;		line 85 in file "oled.c"
 17962 ;; Parameters:    Size  Location     Type
 17963 ;;		None
 17964 ;; Auto vars:     Size  Location     Type
 17965 ;;		None
 17966 ;; Return value:  Size  Location     Type
 17967 ;;                  1    wreg      void 
 17968 ;; Registers used:
 17969 ;;		wreg, status,2, status,0, pclath, cstack
 17970 ;; Tracked objects:
 17971 ;;		On entry : 0/0
 17972 ;;		On exit  : 0/0
 17973 ;;		Unchanged: 0/0
 17974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17978 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17979 ;;Total ram usage:        1 bytes
 17980 ;; Hardware stack levels used:    1
 17981 ;; Hardware stack levels required when called:    7
 17982 ;; This function calls:
 17983 ;;		_OLED_command
 17984 ;;		_OLED_write4bits
 17985 ;; This function is called by:
 17986 ;;		_main
 17987 ;; This function uses a non-reentrant model
 17988 ;;
 17989                           
 17990                           
 17991                           ;psect for function _OLED_init
 17992  1A6E                     _OLED_init:	
 17993                           
 17994                           ;oled.c: 87:  LATBbits.LATB4 = 0;
 17995                           
 17996                           ;incstack = 0
 17997                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 17998  1A6E  0140               	movlb	0	; select bank0
 17999  1A6F  1219               	bcf	25,4	;volatile
 18000                           
 18001                           ;oled.c: 88:  LATBbits.LATB2 = 0;
 18002  1A70  1119               	bcf	25,2	;volatile
 18003                           
 18004                           ;oled.c: 89:  LATBbits.LATB3 = 0;
 18005  1A71  1199               	bcf	25,3	;volatile
 18006                           
 18007                           ;oled.c: 91:  _delay((unsigned long)((50)*(4000000/4000.0)));
 18008  1A72  3041               	movlw	65
 18009  1A73  0140               	movlb	0	; select bank0
 18010  1A74  00A7               	movwf	??_OLED_init
 18011  1A75  30EE               	movlw	238
 18012  1A76                     u6467:	
 18013  1A76  0B89               	decfsz	9,f
 18014  1A77  2A76               	goto	u6467
 18015  1A78  0BA7               	decfsz	??_OLED_init,f
 18016  1A79  2A76               	goto	u6467
 18017  1A7A  0000               	nop
 18018                           
 18019                           ;oled.c: 95:  LATBbits.LATB1 = 0;
 18020  1A7B  0140               	movlb	0	; select bank0
 18021  1A7C  1099               	bcf	25,1	;volatile
 18022                           
 18023                           ;oled.c: 96:  LATBbits.LATB0 = 0;
 18024  1A7D  1019               	bcf	25,0	;volatile
 18025                           
 18026                           ;oled.c: 97:  LATCbits.LATC5 = 0;
 18027  1A7E  129A               	bcf	26,5	;volatile
 18028                           
 18029                           ;oled.c: 98:  LATCbits.LATC4 = 0;
 18030  1A7F  121A               	bcf	26,4	;volatile
 18031                           
 18032                           ;oled.c: 109:  OLED_write4bits(0x03);
 18033  1A80  3003               	movlw	3
 18034  1A81  31A4  2424  319A   	fcall	_OLED_write4bits
 18035                           
 18036                           ;oled.c: 110:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18037  1A84  3007               	movlw	7
 18038  1A85  0140               	movlb	0	; select bank0
 18039  1A86  00A7               	movwf	??_OLED_init
 18040  1A87  307D               	movlw	125
 18041  1A88                     u6477:	
 18042  1A88  0B89               	decfsz	9,f
 18043  1A89  2A88               	goto	u6477
 18044  1A8A  0BA7               	decfsz	??_OLED_init,f
 18045  1A8B  2A88               	goto	u6477
 18046                           
 18047                           ;oled.c: 111:  OLED_write4bits(0x08);
 18048  1A8C  3008               	movlw	8
 18049  1A8D  31A4  2424  319A   	fcall	_OLED_write4bits
 18050                           
 18051                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18052  1A90  3007               	movlw	7
 18053  1A91  0140               	movlb	0	; select bank0
 18054  1A92  00A7               	movwf	??_OLED_init
 18055  1A93  307D               	movlw	125
 18056  1A94                     u6487:	
 18057  1A94  0B89               	decfsz	9,f
 18058  1A95  2A94               	goto	u6487
 18059  1A96  0BA7               	decfsz	??_OLED_init,f
 18060  1A97  2A94               	goto	u6487
 18061                           
 18062                           ;oled.c: 114:  OLED_write4bits(0x02);
 18063  1A98  3002               	movlw	2
 18064  1A99  31A4  2424  319A   	fcall	_OLED_write4bits
 18065                           
 18066                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18067  1A9C  3007               	movlw	7
 18068  1A9D  0140               	movlb	0	; select bank0
 18069  1A9E  00A7               	movwf	??_OLED_init
 18070  1A9F  307D               	movlw	125
 18071  1AA0                     u6497:	
 18072  1AA0  0B89               	decfsz	9,f
 18073  1AA1  2AA0               	goto	u6497
 18074  1AA2  0BA7               	decfsz	??_OLED_init,f
 18075  1AA3  2AA0               	goto	u6497
 18076                           
 18077                           ;oled.c: 116:  OLED_write4bits(0x02);
 18078  1AA4  3002               	movlw	2
 18079  1AA5  31A4  2424  319A   	fcall	_OLED_write4bits
 18080                           
 18081                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18082  1AA8  3007               	movlw	7
 18083  1AA9  0140               	movlb	0	; select bank0
 18084  1AAA  00A7               	movwf	??_OLED_init
 18085  1AAB  307D               	movlw	125
 18086  1AAC                     u6507:	
 18087  1AAC  0B89               	decfsz	9,f
 18088  1AAD  2AAC               	goto	u6507
 18089  1AAE  0BA7               	decfsz	??_OLED_init,f
 18090  1AAF  2AAC               	goto	u6507
 18091                           
 18092                           ;oled.c: 118:  OLED_write4bits(0x08);
 18093  1AB0  3008               	movlw	8
 18094  1AB1  31A4  2424  319A   	fcall	_OLED_write4bits
 18095                           
 18096                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18097  1AB4  3007               	movlw	7
 18098  1AB5  0140               	movlb	0	; select bank0
 18099  1AB6  00A7               	movwf	??_OLED_init
 18100  1AB7  307D               	movlw	125
 18101  1AB8                     u6517:	
 18102  1AB8  0B89               	decfsz	9,f
 18103  1AB9  2AB8               	goto	u6517
 18104  1ABA  0BA7               	decfsz	??_OLED_init,f
 18105  1ABB  2AB8               	goto	u6517
 18106                           
 18107                           ;oled.c: 121:  OLED_command(0x08);
 18108  1ABC  3008               	movlw	8
 18109  1ABD  31A1  219E  319A   	fcall	_OLED_command
 18110                           
 18111                           ;oled.c: 122:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18112  1AC0  3007               	movlw	7
 18113  1AC1  0140               	movlb	0	; select bank0
 18114  1AC2  00A7               	movwf	??_OLED_init
 18115  1AC3  307D               	movlw	125
 18116  1AC4                     u6527:	
 18117  1AC4  0B89               	decfsz	9,f
 18118  1AC5  2AC4               	goto	u6527
 18119  1AC6  0BA7               	decfsz	??_OLED_init,f
 18120  1AC7  2AC4               	goto	u6527
 18121                           
 18122                           ;oled.c: 123:  OLED_command(0x01);
 18123  1AC8  3001               	movlw	1
 18124  1AC9  31A1  219E  319A   	fcall	_OLED_command
 18125                           
 18126                           ;oled.c: 124:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18127  1ACC  3007               	movlw	7
 18128  1ACD  0140               	movlb	0	; select bank0
 18129  1ACE  00A7               	movwf	??_OLED_init
 18130  1ACF  307D               	movlw	125
 18131  1AD0                     u6537:	
 18132  1AD0  0B89               	decfsz	9,f
 18133  1AD1  2AD0               	goto	u6537
 18134  1AD2  0BA7               	decfsz	??_OLED_init,f
 18135  1AD3  2AD0               	goto	u6537
 18136                           
 18137                           ;oled.c: 125:  OLED_command(0x06);
 18138  1AD4  3006               	movlw	6
 18139  1AD5  31A1  219E  319A   	fcall	_OLED_command
 18140                           
 18141                           ;oled.c: 126:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18142  1AD8  3007               	movlw	7
 18143  1AD9  0140               	movlb	0	; select bank0
 18144  1ADA  00A7               	movwf	??_OLED_init
 18145  1ADB  307D               	movlw	125
 18146  1ADC                     u6547:	
 18147  1ADC  0B89               	decfsz	9,f
 18148  1ADD  2ADC               	goto	u6547
 18149  1ADE  0BA7               	decfsz	??_OLED_init,f
 18150  1ADF  2ADC               	goto	u6547
 18151                           
 18152                           ;oled.c: 127:  OLED_command(0x02);
 18153  1AE0  3002               	movlw	2
 18154  1AE1  31A1  219E  319A   	fcall	_OLED_command
 18155                           
 18156                           ;oled.c: 128:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18157  1AE4  3007               	movlw	7
 18158  1AE5  0140               	movlb	0	; select bank0
 18159  1AE6  00A7               	movwf	??_OLED_init
 18160  1AE7  307D               	movlw	125
 18161  1AE8                     u6557:	
 18162  1AE8  0B89               	decfsz	9,f
 18163  1AE9  2AE8               	goto	u6557
 18164  1AEA  0BA7               	decfsz	??_OLED_init,f
 18165  1AEB  2AE8               	goto	u6557
 18166                           
 18167                           ;oled.c: 129:  OLED_command(0x0C);
 18168  1AEC  300C               	movlw	12
 18169  1AED  31A1  219E  319A   	fcall	_OLED_command
 18170                           
 18171                           ;oled.c: 130:  _delay((unsigned long)((5)*(4000000/4000.0)));
 18172  1AF0  3007               	movlw	7
 18173  1AF1  0140               	movlb	0	; select bank0
 18174  1AF2  00A7               	movwf	??_OLED_init
 18175  1AF3  307D               	movlw	125
 18176  1AF4                     u6567:	
 18177  1AF4  0B89               	decfsz	9,f
 18178  1AF5  2AF4               	goto	u6567
 18179  1AF6  0BA7               	decfsz	??_OLED_init,f
 18180  1AF7  2AF4               	goto	u6567
 18181  1AF8  0008               	return
 18182  1AF9                     __end_of_OLED_init:	
 18183                           
 18184                           	psect	text61
 18185  219E                     __ptext61:	
 18186 ;; *************** function _OLED_command *****************
 18187 ;; Defined at:
 18188 ;;		line 73 in file "oled.c"
 18189 ;; Parameters:    Size  Location     Type
 18190 ;;  value           1    wreg     unsigned char 
 18191 ;; Auto vars:     Size  Location     Type
 18192 ;;  value           1    6[BANK0 ] unsigned char 
 18193 ;; Return value:  Size  Location     Type
 18194 ;;                  1    wreg      void 
 18195 ;; Registers used:
 18196 ;;		wreg, status,2, status,0, pclath, cstack
 18197 ;; Tracked objects:
 18198 ;;		On entry : 0/0
 18199 ;;		On exit  : 0/0
 18200 ;;		Unchanged: 0/0
 18201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18205 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18206 ;;Total ram usage:        1 bytes
 18207 ;; Hardware stack levels used:    1
 18208 ;; Hardware stack levels required when called:    6
 18209 ;; This function calls:
 18210 ;;		_OLED_send
 18211 ;;		_OLED_waitForReady
 18212 ;; This function is called by:
 18213 ;;		_OLED_Off
 18214 ;;		_OLED_init
 18215 ;;		_OLED_scrollDisplayLeft
 18216 ;;		_OLED_scrollDisplayRight
 18217 ;;		_OLED_print_xy
 18218 ;;		_OLED_returnHome
 18219 ;;		_OLED_clearDisplay
 18220 ;;		_OLED_loadSpecialChars
 18221 ;;		_returnToPage
 18222 ;;		_OLED_setCursor
 18223 ;; This function uses a non-reentrant model
 18224 ;;
 18225                           
 18226                           
 18227                           ;psect for function _OLED_command
 18228  219E                     _OLED_command:	
 18229                           
 18230                           ;incstack = 0
 18231                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 18232                           ;OLED_command@value stored from wreg
 18233  219E  0140               	movlb	0	; select bank0
 18234  219F  00A6               	movwf	OLED_command@value
 18235                           
 18236                           ;oled.c: 73: void OLED_command(uint8_t value);oled.c: 74: {;oled.c: 75:  OLED_send(value
      +                          , 0);
 18237  21A0  01A3               	clrf	OLED_send@mode
 18238  21A1  0826               	movf	OLED_command@value,w
 18239  21A2  3187  27E8  31A1   	fcall	_OLED_send
 18240                           
 18241                           ;oled.c: 76:  OLED_waitForReady();
 18242  21A5  31A2  224A         	fcall	_OLED_waitForReady
 18243  21A7  0008               	return
 18244  21A8                     __end_of_OLED_command:	
 18245                           
 18246                           	psect	text62
 18247  224A                     __ptext62:	
 18248 ;; *************** function _OLED_waitForReady *****************
 18249 ;; Defined at:
 18250 ;;		line 48 in file "oled.c"
 18251 ;; Parameters:    Size  Location     Type
 18252 ;;		None
 18253 ;; Auto vars:     Size  Location     Type
 18254 ;;  busy            1    0[BANK0 ] unsigned char 
 18255 ;; Return value:  Size  Location     Type
 18256 ;;                  1    wreg      void 
 18257 ;; Registers used:
 18258 ;;		wreg, status,2, status,0, pclath, cstack
 18259 ;; Tracked objects:
 18260 ;;		On entry : 0/0
 18261 ;;		On exit  : 0/0
 18262 ;;		Unchanged: 0/0
 18263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18268 ;;Total ram usage:        1 bytes
 18269 ;; Hardware stack levels used:    1
 18270 ;; Hardware stack levels required when called:    4
 18271 ;; This function calls:
 18272 ;;		_OLED_pulseEnable
 18273 ;; This function is called by:
 18274 ;;		_OLED_command
 18275 ;;		_OLED_write
 18276 ;; This function uses a non-reentrant model
 18277 ;;
 18278                           
 18279                           
 18280                           ;psect for function _OLED_waitForReady
 18281  224A                     _OLED_waitForReady:	
 18282                           
 18283                           ;oled.c: 52:  TRISCbits.TRISC4 = 1;
 18284                           
 18285                           ;incstack = 0
 18286                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0+pclath+cstack]
 18287  224A  0140               	movlb	0	; select bank0
 18288  224B  1614               	bsf	20,4	;volatile
 18289                           
 18290                           ;oled.c: 53:  LATBbits.LATB4 = 0;
 18291  224C  1219               	bcf	25,4	;volatile
 18292                           
 18293                           ;oled.c: 54:  LATBbits.LATB3 = 1;
 18294  224D  1599               	bsf	25,3	;volatile
 18295  224E                     l270:	
 18296                           ;oled.c: 56:  do {
 18297                           
 18298                           
 18299                           ;oled.c: 57:   LATBbits.LATB2 = 0;
 18300  224E  1119               	bcf	25,2	;volatile
 18301                           
 18302                           ;oled.c: 58:   _delay((unsigned long)((10)*(4000000/4000000.0)));
 18303  224F  3003               	movlw	3
 18304  2250                     u6577:	
 18305  2250  0B89               	decfsz	9,f
 18306  2251  2A50               	goto	u6577
 18307  2252  0000               	nop
 18308                           
 18309                           ;oled.c: 59:   LATBbits.LATB2 = 1;
 18310  2253  0140               	movlb	0	; select bank0
 18311  2254  1519               	bsf	25,2	;volatile
 18312                           
 18313                           ;oled.c: 61:   _delay((unsigned long)((10)*(4000000/4000000.0)));
 18314  2255  3003               	movlw	3
 18315  2256                     u6587:	
 18316  2256  0B89               	decfsz	9,f
 18317  2257  2A56               	goto	u6587
 18318  2258  0000               	nop
 18319                           
 18320                           ;oled.c: 62:   busy = PORTCbits.RC4;
 18321  2259  3000               	movlw	0
 18322  225A  0140               	movlb	0	; select bank0
 18323  225B  1A0E               	btfsc	14,4	;volatile
 18324  225C  3001               	movlw	1
 18325  225D  00A0               	movwf	OLED_waitForReady@busy
 18326                           
 18327                           ;oled.c: 64:   LATBbits.LATB2 = 0;
 18328  225E  1119               	bcf	25,2	;volatile
 18329                           
 18330                           ;oled.c: 66:   OLED_pulseEnable();
 18331  225F  31A1  2195  31A2   	fcall	_OLED_pulseEnable
 18332                           
 18333                           ;oled.c: 67:  } while (busy);
 18334  2262  0140               	movlb	0	; select bank0
 18335  2263  0820               	movf	OLED_waitForReady@busy,w
 18336  2264  1D03               	btfss	3,2
 18337  2265  2A4E               	goto	l270
 18338                           
 18339                           ;oled.c: 69:  TRISCbits.TRISC4 = 0;
 18340  2266  1214               	bcf	20,4	;volatile
 18341                           
 18342                           ;oled.c: 70:  LATBbits.LATB3 = 0;
 18343  2267  1199               	bcf	25,3	;volatile
 18344  2268  0008               	return
 18345  2269                     __end_of_OLED_waitForReady:	
 18346                           
 18347                           	psect	text63
 18348  07E8                     __ptext63:	
 18349 ;; *************** function _OLED_send *****************
 18350 ;; Defined at:
 18351 ;;		line 37 in file "oled.c"
 18352 ;; Parameters:    Size  Location     Type
 18353 ;;  value           1    wreg     unsigned char 
 18354 ;;  mode            1    3[BANK0 ] unsigned char 
 18355 ;; Auto vars:     Size  Location     Type
 18356 ;;  value           1    5[BANK0 ] unsigned char 
 18357 ;; Return value:  Size  Location     Type
 18358 ;;                  1    wreg      void 
 18359 ;; Registers used:
 18360 ;;		wreg, status,2, status,0, pclath, cstack
 18361 ;; Tracked objects:
 18362 ;;		On entry : 0/0
 18363 ;;		On exit  : 0/0
 18364 ;;		Unchanged: 0/0
 18365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18366 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18369 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18370 ;;Total ram usage:        3 bytes
 18371 ;; Hardware stack levels used:    1
 18372 ;; Hardware stack levels required when called:    5
 18373 ;; This function calls:
 18374 ;;		_OLED_write4bits
 18375 ;; This function is called by:
 18376 ;;		_OLED_command
 18377 ;;		_OLED_write
 18378 ;; This function uses a non-reentrant model
 18379 ;;
 18380                           
 18381                           
 18382                           ;psect for function _OLED_send
 18383  07E8                     _OLED_send:	
 18384                           
 18385                           ;incstack = 0
 18386                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 18387                           ;OLED_send@value stored from wreg
 18388  07E8  0140               	movlb	0	; select bank0
 18389  07E9  00A5               	movwf	OLED_send@value
 18390                           
 18391                           ;oled.c: 37: void OLED_send(uint8_t value, uint8_t mode);oled.c: 38: {;oled.c: 39:  LATB
      +                          bits.LATB4 = mode;
 18392  07EA  0C23               	rrf	OLED_send@mode,w
 18393  07EB  1C03               	skipc
 18394  07EC  1219               	bcf	25,4	;volatile
 18395  07ED  1803               	skipnc
 18396  07EE  1619               	bsf	25,4	;volatile
 18397                           
 18398                           ;oled.c: 40:  LATBbits.LATB3 = 0;
 18399  07EF  1199               	bcf	25,3	;volatile
 18400                           
 18401                           ;oled.c: 42:  OLED_write4bits(value >> 4);
 18402  07F0  0825               	movf	OLED_send@value,w
 18403  07F1  00A4               	movwf	??_OLED_send
 18404  07F2  3004               	movlw	4
 18405  07F3                     u3085:	
 18406  07F3  36A4               	lsrf	??_OLED_send,f
 18407  07F4  0B89               	decfsz	9,f
 18408  07F5  2FF3               	goto	u3085
 18409  07F6  0824               	movf	??_OLED_send,w
 18410  07F7  31A4  2424  3187   	fcall	_OLED_write4bits
 18411                           
 18412                           ;oled.c: 43:  OLED_write4bits(value);
 18413  07FA  0140               	movlb	0	; select bank0
 18414  07FB  0825               	movf	OLED_send@value,w
 18415  07FC  31A4  2424         	fcall	_OLED_write4bits
 18416  07FE  0008               	return
 18417  07FF                     __end_of_OLED_send:	
 18418                           
 18419                           	psect	text64
 18420  2424                     __ptext64:	
 18421 ;; *************** function _OLED_write4bits *****************
 18422 ;; Defined at:
 18423 ;;		line 26 in file "oled.c"
 18424 ;; Parameters:    Size  Location     Type
 18425 ;;  value           1    wreg     unsigned char 
 18426 ;; Auto vars:     Size  Location     Type
 18427 ;;  value           1    2[BANK0 ] unsigned char 
 18428 ;; Return value:  Size  Location     Type
 18429 ;;                  1    wreg      void 
 18430 ;; Registers used:
 18431 ;;		wreg, status,2, status,0, pclath, cstack
 18432 ;; Tracked objects:
 18433 ;;		On entry : 0/0
 18434 ;;		On exit  : 0/0
 18435 ;;		Unchanged: 0/0
 18436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18439 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18440 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18441 ;;Total ram usage:        3 bytes
 18442 ;; Hardware stack levels used:    1
 18443 ;; Hardware stack levels required when called:    4
 18444 ;; This function calls:
 18445 ;;		_OLED_pulseEnable
 18446 ;; This function is called by:
 18447 ;;		_OLED_send
 18448 ;;		_OLED_init
 18449 ;; This function uses a non-reentrant model
 18450 ;;
 18451                           
 18452                           
 18453                           ;psect for function _OLED_write4bits
 18454  2424                     _OLED_write4bits:	
 18455                           
 18456                           ;incstack = 0
 18457                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0+pclath+cstack]
 18458                           ;OLED_write4bits@value stored from wreg
 18459  2424  0140               	movlb	0	; select bank0
 18460  2425  00A2               	movwf	OLED_write4bits@value
 18461                           
 18462                           ;oled.c: 26: void OLED_write4bits(uint8_t value);oled.c: 27: {;oled.c: 28:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 18463  2426  0822               	movf	OLED_write4bits@value,w
 18464  2427  3901               	andlw	1
 18465  2428  00A0               	movwf	??_OLED_write4bits
 18466  2429  0DA0               	rlf	??_OLED_write4bits,f
 18467  242A  0819               	movf	25,w	;volatile
 18468  242B  0620               	xorwf	??_OLED_write4bits,w
 18469  242C  39FD               	andlw	-3
 18470  242D  0620               	xorwf	??_OLED_write4bits,w
 18471  242E  0099               	movwf	25	;volatile
 18472                           
 18473                           ;oled.c: 29:  LATBbits.LATB0 = (value >> 1) & 0x01;
 18474  242F  0822               	movf	OLED_write4bits@value,w
 18475  2430  00A0               	movwf	??_OLED_write4bits
 18476  2431  3001               	movlw	1
 18477  2432                     u3055:	
 18478  2432  36A0               	lsrf	??_OLED_write4bits,f
 18479  2433  0B89               	decfsz	9,f
 18480  2434  2C32               	goto	u3055
 18481  2435  3001               	movlw	1
 18482  2436  0520               	andwf	??_OLED_write4bits,w
 18483  2437  00A1               	movwf	??_OLED_write4bits+1
 18484  2438  0819               	movf	25,w	;volatile
 18485  2439  0621               	xorwf	??_OLED_write4bits+1,w
 18486  243A  39FE               	andlw	-2
 18487  243B  0621               	xorwf	??_OLED_write4bits+1,w
 18488  243C  0099               	movwf	25	;volatile
 18489                           
 18490                           ;oled.c: 30:  LATCbits.LATC5 = (value >> 2) & 0x01;
 18491  243D  0822               	movf	OLED_write4bits@value,w
 18492  243E  00A0               	movwf	??_OLED_write4bits
 18493  243F  3002               	movlw	2
 18494  2440                     u3065:	
 18495  2440  36A0               	lsrf	??_OLED_write4bits,f
 18496  2441  0B89               	decfsz	9,f
 18497  2442  2C40               	goto	u3065
 18498  2443  0820               	movf	??_OLED_write4bits,w
 18499  2444  3901               	andlw	1
 18500  2445  00A1               	movwf	??_OLED_write4bits+1
 18501  2446  0EA1               	swapf	??_OLED_write4bits+1,f
 18502  2447  0DA1               	rlf	??_OLED_write4bits+1,f
 18503  2448  081A               	movf	26,w	;volatile
 18504  2449  0621               	xorwf	??_OLED_write4bits+1,w
 18505  244A  39DF               	andlw	-33
 18506  244B  0621               	xorwf	??_OLED_write4bits+1,w
 18507  244C  009A               	movwf	26	;volatile
 18508                           
 18509                           ;oled.c: 31:  LATCbits.LATC4 = (value >> 3) & 0x01;
 18510  244D  0822               	movf	OLED_write4bits@value,w
 18511  244E  00A0               	movwf	??_OLED_write4bits
 18512  244F  3003               	movlw	3
 18513  2450                     u3075:	
 18514  2450  36A0               	lsrf	??_OLED_write4bits,f
 18515  2451  0B89               	decfsz	9,f
 18516  2452  2C50               	goto	u3075
 18517  2453  0820               	movf	??_OLED_write4bits,w
 18518  2454  3901               	andlw	1
 18519  2455  00A1               	movwf	??_OLED_write4bits+1
 18520  2456  0EA1               	swapf	??_OLED_write4bits+1,f
 18521  2457  081A               	movf	26,w	;volatile
 18522  2458  0621               	xorwf	??_OLED_write4bits+1,w
 18523  2459  39EF               	andlw	-17
 18524  245A  0621               	xorwf	??_OLED_write4bits+1,w
 18525  245B  009A               	movwf	26	;volatile
 18526                           
 18527                           ;oled.c: 33:  _delay((unsigned long)((50)*(4000000/4000000.0)));
 18528  245C  3010               	movlw	16
 18529  245D                     u6597:	
 18530  245D  0B89               	decfsz	9,f
 18531  245E  2C5D               	goto	u6597
 18532  245F  3200               	nop2
 18533                           
 18534                           ;oled.c: 34:  OLED_pulseEnable();
 18535  2460  31A1  2195         	fcall	_OLED_pulseEnable
 18536  2462  0008               	return
 18537  2463                     __end_of_OLED_write4bits:	
 18538                           
 18539                           	psect	text65
 18540  2195                     __ptext65:	
 18541 ;; *************** function _OLED_pulseEnable *****************
 18542 ;; Defined at:
 18543 ;;		line 19 in file "oled.c"
 18544 ;; Parameters:    Size  Location     Type
 18545 ;;		None
 18546 ;; Auto vars:     Size  Location     Type
 18547 ;;		None
 18548 ;; Return value:  Size  Location     Type
 18549 ;;                  1    wreg      void 
 18550 ;; Registers used:
 18551 ;;		wreg
 18552 ;; Tracked objects:
 18553 ;;		On entry : 0/0
 18554 ;;		On exit  : 0/0
 18555 ;;		Unchanged: 0/0
 18556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18561 ;;Total ram usage:        0 bytes
 18562 ;; Hardware stack levels used:    1
 18563 ;; Hardware stack levels required when called:    3
 18564 ;; This function calls:
 18565 ;;		Nothing
 18566 ;; This function is called by:
 18567 ;;		_OLED_write4bits
 18568 ;;		_OLED_waitForReady
 18569 ;; This function uses a non-reentrant model
 18570 ;;
 18571                           
 18572                           
 18573                           ;psect for function _OLED_pulseEnable
 18574  2195                     _OLED_pulseEnable:	
 18575                           
 18576                           ;oled.c: 21:  LATBbits.LATB2 = 1;
 18577                           
 18578                           ;incstack = 0
 18579                           ; Regs used in _OLED_pulseEnable: [wreg]
 18580  2195  0140               	movlb	0	; select bank0
 18581  2196  1519               	bsf	25,2	;volatile
 18582                           
 18583                           ;oled.c: 22:  _delay((unsigned long)((50)*(4000000/4000000.0)));
 18584  2197  3010               	movlw	16
 18585  2198                     u6607:	
 18586  2198  0B89               	decfsz	9,f
 18587  2199  2998               	goto	u6607
 18588  219A  3200               	nop2
 18589                           
 18590                           ;oled.c: 23:  LATBbits.LATB2 = 0;
 18591  219B  0140               	movlb	0	; select bank0
 18592  219C  1119               	bcf	25,2	;volatile
 18593  219D  0008               	return
 18594  219E                     __end_of_OLED_pulseEnable:	
 18595                           
 18596                           	psect	intentry
 18597  0004                     __pintentry:	
 18598 ;; *************** function _ISR *****************
 18599 ;; Defined at:
 18600 ;;		line 48 in file "interrupt.c"
 18601 ;; Parameters:    Size  Location     Type
 18602 ;;		None
 18603 ;; Auto vars:     Size  Location     Type
 18604 ;;		None
 18605 ;; Return value:  Size  Location     Type
 18606 ;;                  1    wreg      void 
 18607 ;; Registers used:
 18608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18609 ;; Tracked objects:
 18610 ;;		On entry : 0/0
 18611 ;;		On exit  : 0/0
 18612 ;;		Unchanged: 0/0
 18613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18616 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18617 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18618 ;;Total ram usage:        4 bytes
 18619 ;; Hardware stack levels used:    1
 18620 ;; Hardware stack levels required when called:    2
 18621 ;; This function calls:
 18622 ;;		_pushButtonISR
 18623 ;;		_rotISR
 18624 ;;		_uartReceiveISR
 18625 ;; This function is called by:
 18626 ;;		Interrupt level 1
 18627 ;; This function uses a non-reentrant model
 18628 ;;
 18629                           
 18630  0004                     _ISR:	
 18631                           
 18632                           ;incstack = 0
 18633  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 18634                           
 18635                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18636  0005  3180               	pagesel	$
 18637                           
 18638                           ;interrupt.c: 50:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 18639  0006  014E               	movlb	14	; select bank14
 18640  0007  1A96               	btfsc	22,5	;volatile
 18641  0008  1E8C               	btfss	12,5	;volatile
 18642  0009  2815               	goto	i1l367
 18643                           
 18644                           ;interrupt.c: 53:   tick10ms++;
 18645  000A  3001               	movlw	1
 18646  000B  00F8               	movwf	??_ISR
 18647  000C  0878               	movf	??_ISR,w
 18648  000D  0141               	movlb	1	; select bank1
 18649  000E  07E9               	addwf	_tick10ms^(0+128),f	;volatile
 18650                           
 18651                           ;interrupt.c: 54:   TMR0 = 178;
 18652  000F  30B2               	movlw	178
 18653  0010  014B               	movlb	11	; select bank11
 18654  0011  009C               	movwf	28	;volatile
 18655                           
 18656                           ;interrupt.c: 55:   PIR0bits.TMR0IF = 0;
 18657  0012  014E               	movlb	14	; select bank14
 18658  0013  128C               	bcf	12,5	;volatile
 18659                           
 18660                           ;interrupt.c: 56:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 18661  0014  2866               	goto	i1l379
 18662  0015                     i1l367:	
 18663  0015  1A16               	btfsc	22,4	;volatile
 18664  0016  1E0C               	btfss	12,4	;volatile
 18665  0017  2831               	goto	i1l369
 18666                           
 18667                           ;interrupt.c: 58:   if (IOCAFbits.IOCAF7 == 1) {
 18668  0018  017E               	movlb	62	; select bank62
 18669  0019  1FBF               	btfss	63,7	;volatile
 18670  001A  2820               	goto	i1l5135
 18671                           
 18672                           ;interrupt.c: 59:    pushButtonISR();
 18673  001B  31A2  22F9  3180   	fcall	_pushButtonISR
 18674                           
 18675                           ;interrupt.c: 60:    IOCAFbits.IOCAF7 = 0;
 18676  001E  017E               	movlb	62	; select bank62
 18677  001F  13BF               	bcf	63,7	;volatile
 18678  0020                     i1l5135:	
 18679                           
 18680                           ;interrupt.c: 62:   if (IOCAFbits.IOCAF4 == 1) {
 18681  0020  1E3F               	btfss	63,4	;volatile
 18682  0021  2827               	goto	i1l5141
 18683                           
 18684                           ;interrupt.c: 63:    rotISR();
 18685  0022  31A3  23EC  3180   	fcall	_rotISR
 18686                           
 18687                           ;interrupt.c: 64:    IOCAFbits.IOCAF4 = 0;
 18688  0025  017E               	movlb	62	; select bank62
 18689  0026  123F               	bcf	63,4	;volatile
 18690  0027                     i1l5141:	
 18691                           
 18692                           ;interrupt.c: 66:   if (IOCAFbits.IOCAF5 == 1) {
 18693  0027  1EBF               	btfss	63,5	;volatile
 18694  0028  282E               	goto	i1l5147
 18695                           
 18696                           ;interrupt.c: 67:    rotISR();
 18697  0029  31A3  23EC  3180   	fcall	_rotISR
 18698                           
 18699                           ;interrupt.c: 68:    IOCAFbits.IOCAF5 = 0;
 18700  002C  017E               	movlb	62	; select bank62
 18701  002D  12BF               	bcf	63,5	;volatile
 18702  002E                     i1l5147:	
 18703                           
 18704                           ;interrupt.c: 70:   PIR0bits.IOCIF = 0;
 18705  002E  014E               	movlb	14	; select bank14
 18706  002F  120C               	bcf	12,4	;volatile
 18707                           
 18708                           ;interrupt.c: 71:  } else if (INTCONbits.PEIE == 1) {
 18709  0030  2866               	goto	i1l379
 18710  0031                     i1l369:	
 18711  0031  1F0B               	btfss	11,6	;volatile
 18712  0032  2866               	goto	i1l379
 18713                           
 18714                           ;interrupt.c: 72:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 18715  0033  181A               	btfsc	26,0	;volatile
 18716  0034  1C10               	btfss	16,0	;volatile
 18717  0035  285F               	goto	i1l375
 18718                           
 18719                           ;interrupt.c: 75:    if (tick100ms++ >= 1000000000UL)
 18720  0036  0142               	movlb	2	; select bank2
 18721  0037  0823               	movf	(_tick100ms+3)^(0+256),w	;volatile
 18722  0038  00FB               	movwf	??_ISR+3
 18723  0039  0822               	movf	(_tick100ms+2)^(0+256),w	;volatile
 18724  003A  00FA               	movwf	??_ISR+2
 18725  003B  0821               	movf	(_tick100ms+1)^(0+256),w	;volatile
 18726  003C  00F9               	movwf	??_ISR+1
 18727  003D  0820               	movf	_tick100ms^(0+256),w	;volatile
 18728  003E  00F8               	movwf	??_ISR
 18729  003F  3001               	movlw	1
 18730  0040  07A0               	addwf	_tick100ms^(0+256),f	;volatile
 18731  0041  3000               	movlw	0
 18732  0042  3DA1               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 18733  0043  3DA2               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 18734  0044  3DA3               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 18735  0045  3000               	movlw	0
 18736  0046  0278               	subwf	??_ISR,w
 18737  0047  30CA               	movlw	202
 18738  0048  3B79               	subwfb	??_ISR+1,w
 18739  0049  309A               	movlw	154
 18740  004A  3B7A               	subwfb	??_ISR+2,w
 18741  004B  303B               	movlw	59
 18742  004C  3B7B               	subwfb	??_ISR+3,w
 18743  004D  1C03               	btfss	3,0
 18744  004E  2857               	goto	i1l5157
 18745                           
 18746                           ;interrupt.c: 76:     tick100ms = 0;
 18747  004F  3000               	movlw	0
 18748  0050  00A3               	movwf	(_tick100ms+3)^(0+256)	;volatile
 18749  0051  3000               	movlw	0
 18750  0052  00A2               	movwf	(_tick100ms+2)^(0+256)	;volatile
 18751  0053  3000               	movlw	0
 18752  0054  00A1               	movwf	(_tick100ms+1)^(0+256)	;volatile
 18753  0055  3000               	movlw	0
 18754  0056  00A0               	movwf	_tick100ms^(0+256)	;volatile
 18755  0057                     i1l5157:	
 18756                           
 18757                           ;interrupt.c: 77:    TMR1 = 53035;
 18758  0057  30CF               	movlw	207
 18759  0058  0144               	movlb	4	; select bank4
 18760  0059  008D               	movwf	13	;volatile
 18761  005A  302B               	movlw	43
 18762  005B  008C               	movwf	12	;volatile
 18763                           
 18764                           ;interrupt.c: 78:    PIR4bits.TMR1IF = 0;
 18765  005C  014E               	movlb	14	; select bank14
 18766  005D  1010               	bcf	16,0	;volatile
 18767                           
 18768                           ;interrupt.c: 79:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 18769  005E  2866               	goto	i1l379
 18770  005F                     i1l375:	
 18771  005F  1A99               	btfsc	25,5	;volatile
 18772  0060  1E8F               	btfss	15,5	;volatile
 18773  0061  2866               	goto	i1l379
 18774                           
 18775                           ;interrupt.c: 80:    uartReceiveISR();
 18776  0062  31A4  24A7         	fcall	_uartReceiveISR
 18777                           
 18778                           ;interrupt.c: 81:    PIR3bits.RC1IF = 0;
 18779  0064  014E               	movlb	14	; select bank14
 18780  0065  128F               	bcf	15,5	;volatile
 18781  0066                     i1l379:	
 18782  0066  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 18783  0067  0009               	retfie
 18784  0068                     __end_of_ISR:	
 18785                           
 18786                           	psect	text67
 18787  24A7                     __ptext67:	
 18788 ;; *************** function _uartReceiveISR *****************
 18789 ;; Defined at:
 18790 ;;		line 37 in file "uart.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;		None
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;		None
 18795 ;; Return value:  Size  Location     Type
 18796 ;;                  1    wreg      void 
 18797 ;; Registers used:
 18798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18799 ;; Tracked objects:
 18800 ;;		On entry : 0/0
 18801 ;;		On exit  : 0/0
 18802 ;;		Unchanged: 0/0
 18803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18806 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18807 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18808 ;;Total ram usage:        1 bytes
 18809 ;; Hardware stack levels used:    1
 18810 ;; Hardware stack levels required when called:    1
 18811 ;; This function calls:
 18812 ;;		_strncpy
 18813 ;; This function is called by:
 18814 ;;		_ISR
 18815 ;; This function uses a non-reentrant model
 18816 ;;
 18817                           
 18818                           
 18819                           ;psect for function _uartReceiveISR
 18820  24A7                     _uartReceiveISR:	
 18821                           
 18822                           ;uart.c: 39:  static char buffer[20];;uart.c: 41:  static uint8_t checksum = 0;;uart.c: 
      +                          43:  if (RC1STAbits.OERR)
 18823                           
 18824                           ;incstack = 0
 18825                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18826  24A7  0142               	movlb	2	; select bank2
 18827  24A8  1C9D               	btfss	29,1	;volatile
 18828  24A9  2CB0               	goto	i1l5047
 18829                           
 18830                           ;uart.c: 44:  {;uart.c: 45:   RC1STAbits.CREN = 0;
 18831  24AA  121D               	bcf	29,4	;volatile
 18832                           
 18833                           ;uart.c: 46:   RC1STAbits.CREN = 1;
 18834  24AB  161D               	bsf	29,4	;volatile
 18835                           
 18836                           ;uart.c: 47:   rxOErrCount++;
 18837  24AC  3001               	movlw	1
 18838  24AD  00F6               	movwf	??_uartReceiveISR
 18839  24AE  0876               	movf	??_uartReceiveISR,w
 18840  24AF  07B4               	addwf	_rxOErrCount^(0+256),f	;volatile
 18841  24B0                     i1l5047:	
 18842                           
 18843                           ;uart.c: 49:  if (RC1STAbits.FERR)
 18844  24B0  1D1D               	btfss	29,2	;volatile
 18845  24B1  2CB8               	goto	i1l5053
 18846                           
 18847                           ;uart.c: 50:  {;uart.c: 51:   RC1STAbits.SPEN = 0;
 18848  24B2  139D               	bcf	29,7	;volatile
 18849                           
 18850                           ;uart.c: 52:   RC1STAbits.SPEN = 1;
 18851  24B3  179D               	bsf	29,7	;volatile
 18852                           
 18853                           ;uart.c: 53:   rxFErrCount++;
 18854  24B4  3001               	movlw	1
 18855  24B5  00F6               	movwf	??_uartReceiveISR
 18856  24B6  0876               	movf	??_uartReceiveISR,w
 18857  24B7  07B5               	addwf	_rxFErrCount^(0+256),f	;volatile
 18858  24B8                     i1l5053:	
 18859                           
 18860                           ;uart.c: 57:  if (rxCount < sizeof(dataPacket)) {
 18861  24B8  300F               	movlw	15
 18862  24B9  027C               	subwf	_rxCount,w	;volatile
 18863  24BA  1803               	skipnc
 18864  24BB  2CD4               	goto	i1l5059
 18865                           
 18866                           ;uart.c: 58:   buffer[rxCount] = RC1REG;
 18867  24BC  0819               	movf	25,w	;volatile
 18868  24BD  00F6               	movwf	??_uartReceiveISR
 18869  24BE  087C               	movf	_rxCount,w
 18870  24BF  3E36               	addlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 18871  24C0  0086               	movwf	6
 18872  24C1  3001               	movlw	1	; select bank2/3
 18873  24C2  0087               	movwf	7
 18874  24C3  0876               	movf	??_uartReceiveISR,w
 18875  24C4  0081               	movwf	1
 18876                           
 18877                           ;uart.c: 59:   checksum ^= buffer[rxCount];
 18878  24C5  087C               	movf	_rxCount,w
 18879  24C6  3E36               	addlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 18880  24C7  0086               	movwf	6
 18881  24C8  3001               	movlw	1	; select bank2/3
 18882  24C9  0087               	movwf	7
 18883  24CA  0801               	movf	1,w
 18884  24CB  00F6               	movwf	??_uartReceiveISR
 18885  24CC  0876               	movf	??_uartReceiveISR,w
 18886  24CD  0141               	movlb	1	; select bank1
 18887  24CE  06E5               	xorwf	uartReceiveISR@checksum^(0+128),f
 18888                           
 18889                           ;uart.c: 60:   rxCount++;
 18890  24CF  3001               	movlw	1
 18891  24D0  00F6               	movwf	??_uartReceiveISR
 18892  24D1  0876               	movf	??_uartReceiveISR,w
 18893  24D2  07FC               	addwf	_rxCount,f	;volatile
 18894                           
 18895                           ;uart.c: 61:  } else {
 18896  24D3  0008               	return
 18897  24D4                     i1l5059:	
 18898                           
 18899                           ;uart.c: 63:   if (RC1REG == checksum) {
 18900  24D4  0819               	movf	25,w	;volatile
 18901  24D5  0141               	movlb	1	; select bank1
 18902  24D6  0665               	xorwf	uartReceiveISR@checksum^(0+128),w
 18903  24D7  1D03               	skipz
 18904  24D8  2CE8               	goto	i1l5065
 18905                           
 18906                           ;uart.c: 65:    dataReadyFlag = 1;
 18907  24D9  3001               	movlw	1
 18908  24DA  00F6               	movwf	??_uartReceiveISR
 18909  24DB  0876               	movf	??_uartReceiveISR,w
 18910  24DC  00E6               	movwf	_dataReadyFlag^(0+128)	;volatile
 18911                           
 18912                           ;uart.c: 66:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 18913  24DD  3036               	movlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 18914  24DE  00F6               	movwf	??_uartReceiveISR
 18915  24DF  0876               	movf	??_uartReceiveISR,w
 18916  24E0  00F0               	movwf	strncpy@s
 18917  24E1  300F               	movlw	15
 18918  24E2  00F1               	movwf	strncpy@n
 18919  24E3  3000               	movlw	0
 18920  24E4  00F2               	movwf	strncpy@n+1
 18921  24E5  304A               	movlw	(low (_dataPacket| (0+256)))& (0+255)
 18922  24E6  31A3  2357         	fcall	_strncpy
 18923  24E8                     i1l5065:	
 18924                           
 18925                           ;uart.c: 68:   checksum = 0;
 18926  24E8  0141               	movlb	1	; select bank1
 18927  24E9  01E5               	clrf	uartReceiveISR@checksum^(0+128)
 18928                           
 18929                           ;uart.c: 69:   rxCount = 0;
 18930  24EA  01FC               	clrf	_rxCount	;volatile
 18931  24EB  0008               	return
 18932  24EC                     __end_of_uartReceiveISR:	
 18933                           
 18934                           	psect	text68
 18935  2357                     __ptext68:	
 18936 ;; *************** function _strncpy *****************
 18937 ;; Defined at:
 18938 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 18939 ;; Parameters:    Size  Location     Type
 18940 ;;  d               1    wreg     PTR unsigned char 
 18941 ;;		 -> dataPacket(15), 
 18942 ;;  s               1    0[COMMON] PTR const unsigned char 
 18943 ;;		 -> uartReceiveISR@buffer(20), 
 18944 ;;  n               2    1[COMMON] unsigned int 
 18945 ;; Auto vars:     Size  Location     Type
 18946 ;;  d               1    4[COMMON] PTR unsigned char 
 18947 ;;		 -> dataPacket(15), 
 18948 ;;  cp              1    5[COMMON] PTR unsigned char 
 18949 ;;		 -> dataPacket(15), 
 18950 ;; Return value:  Size  Location     Type
 18951 ;;                  1    wreg      PTR unsigned char 
 18952 ;; Registers used:
 18953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 18954 ;; Tracked objects:
 18955 ;;		On entry : 0/0
 18956 ;;		On exit  : 0/0
 18957 ;;		Unchanged: 0/0
 18958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18959 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18961 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18962 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18963 ;;Total ram usage:        6 bytes
 18964 ;; Hardware stack levels used:    1
 18965 ;; This function calls:
 18966 ;;		Nothing
 18967 ;; This function is called by:
 18968 ;;		_uartReceiveISR
 18969 ;; This function uses a non-reentrant model
 18970 ;;
 18971                           
 18972                           
 18973                           ;psect for function _strncpy
 18974  2357                     _strncpy:	
 18975                           
 18976                           ;incstack = 0
 18977                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 18978                           ;strncpy@d stored from wreg
 18979  2357  00F4               	movwf	strncpy@d
 18980  2358  0874               	movf	strncpy@d,w
 18981  2359  00F3               	movwf	??_strncpy
 18982  235A  0873               	movf	??_strncpy,w
 18983  235B  00F5               	movwf	strncpy@cp
 18984  235C                     i1l4277:	
 18985  235C  0871               	movf	strncpy@n,w
 18986  235D  0472               	iorwf	strncpy@n+1,w
 18987  235E  1903               	btfsc	3,2
 18988  235F  2B7D               	goto	i1l4283
 18989  2360  3001               	movlw	1
 18990  2361  02F1               	subwf	strncpy@n,f
 18991  2362  3000               	movlw	0
 18992  2363  3BF2               	subwfb	strncpy@n+1,f
 18993  2364  0875               	movf	strncpy@cp,w
 18994  2365  0086               	movwf	6
 18995  2366  3001               	movlw	1	; select bank2/3
 18996  2367  0087               	movwf	7
 18997  2368  0AF5               	incf	strncpy@cp,f
 18998  2369  0870               	movf	strncpy@s,w
 18999  236A  0084               	movwf	4
 19000  236B  3001               	movlw	1	; select bank2/3
 19001  236C  0085               	movwf	5
 19002  236D  0AF0               	incf	strncpy@s,f
 19003  236E  0800               	movf	0,w
 19004  236F  3FC0               	movwi [0]fsr1
 19005  2370  0889               	movf	9,f
 19006  2371  1903               	btfsc	3,2
 19007  2372  2B7D               	goto	i1l4283
 19008  2373  2B5C               	goto	i1l4277
 19009  2374                     i1l4279:	
 19010  2374  0875               	movf	strncpy@cp,w
 19011  2375  0086               	movwf	6
 19012  2376  3001               	movlw	1	; select bank2/3
 19013  2377  0087               	movwf	7
 19014  2378  0181               	clrf	1
 19015  2379  3001               	movlw	1
 19016  237A  00F3               	movwf	??_strncpy
 19017  237B  0873               	movf	??_strncpy,w
 19018  237C  07F5               	addwf	strncpy@cp,f
 19019  237D                     i1l4283:	
 19020  237D  3001               	movlw	1
 19021  237E  02F1               	subwf	strncpy@n,f
 19022  237F  3000               	movlw	0
 19023  2380  3BF2               	subwfb	strncpy@n+1,f
 19024  2381  0A71               	incf	strncpy@n,w
 19025  2382  1D03               	skipz
 19026  2383  2B74               	goto	i1l4279
 19027  2384  0A72               	incf	strncpy@n+1,w
 19028  2385  1903               	btfsc	3,2
 19029  2386  0008               	return
 19030  2387  2B74               	goto	i1l4279
 19031  2388                     __end_of_strncpy:	
 19032                           
 19033                           	psect	text69
 19034  23EC                     __ptext69:	
 19035 ;; *************** function _rotISR *****************
 19036 ;; Defined at:
 19037 ;;		line 35 in file "inputs.c"
 19038 ;; Parameters:    Size  Location     Type
 19039 ;;		None
 19040 ;; Auto vars:     Size  Location     Type
 19041 ;;  input           1    7[COMMON] unsigned char 
 19042 ;; Return value:  Size  Location     Type
 19043 ;;                  1    wreg      void 
 19044 ;; Registers used:
 19045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 19046 ;; Tracked objects:
 19047 ;;		On entry : 0/0
 19048 ;;		On exit  : 0/0
 19049 ;;		Unchanged: 0/0
 19050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19053 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19054 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19055 ;;Total ram usage:        8 bytes
 19056 ;; Hardware stack levels used:    1
 19057 ;; This function calls:
 19058 ;;		Nothing
 19059 ;; This function is called by:
 19060 ;;		_ISR
 19061 ;; This function uses a non-reentrant model
 19062 ;;
 19063                           
 19064                           
 19065                           ;psect for function _rotISR
 19066  23EC                     _rotISR:	
 19067                           
 19068                           ;inputs.c: 37:  uint8_t input;;inputs.c: 39:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 19069                           
 19070                           ;incstack = 0
 19071                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 19072  23EC  0140               	movlb	0	; select bank0
 19073  23ED  0E0C               	swapf	12,w	;volatile
 19074  23EE  3901               	andlw	1
 19075  23EF  00F0               	movwf	??_rotISR
 19076  23F0  0E0C               	swapf	12,w	;volatile
 19077  23F1  0C89               	rrf	9,f
 19078  23F2  3901               	andlw	1
 19079  23F3  0709               	addwf	9,w
 19080  23F4  0470               	iorwf	??_rotISR,w
 19081  23F5  00F1               	movwf	??_rotISR+1
 19082  23F6  0871               	movf	??_rotISR+1,w
 19083  23F7  00F7               	movwf	rotISR@input
 19084                           
 19085                           ;inputs.c: 42:  curRotState = transition_table[curRotState & 0b00000111][input];
 19086  23F8  087D               	movf	_curRotState,w	;volatile
 19087  23F9  3907               	andlw	7
 19088  23FA  00F0               	movwf	??_rotISR
 19089  23FB  01F1               	clrf	??_rotISR+1
 19090  23FC  35F0               	lslf	??_rotISR,f
 19091  23FD  0DF1               	rlf	??_rotISR+1,f
 19092  23FE  35F0               	lslf	??_rotISR,f
 19093  23FF  0DF1               	rlf	??_rotISR+1,f
 19094  2400  30AD               	movlw	low (_transition_table| (0+32768))
 19095  2401  00F2               	movwf	??_rotISR+2
 19096  2402  30A8               	movlw	high (_transition_table| (0+32768))
 19097  2403  00F3               	movwf	??_rotISR+3
 19098  2404  0870               	movf	??_rotISR,w
 19099  2405  0772               	addwf	??_rotISR+2,w
 19100  2406  00F4               	movwf	??_rotISR+4
 19101  2407  0871               	movf	??_rotISR+1,w
 19102  2408  3D73               	addwfc	??_rotISR+3,w
 19103  2409  00F5               	movwf	??_rotISR+5
 19104  240A  0877               	movf	rotISR@input,w
 19105  240B  0774               	addwf	??_rotISR+4,w
 19106  240C  0084               	movwf	4
 19107  240D  0875               	movf	??_rotISR+5,w
 19108  240E  1803               	skipnc
 19109  240F  0A75               	incf	??_rotISR+5,w
 19110  2410  0085               	movwf	5
 19111  2411  0800               	movf	0,w	;code access
 19112  2412  00F6               	movwf	??_rotISR+6
 19113  2413  0876               	movf	??_rotISR+6,w
 19114  2414  00FD               	movwf	_curRotState	;volatile
 19115                           
 19116                           ;inputs.c: 45:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 19117  2415  1FFD               	btfss	_curRotState,7	;volatile
 19118  2416  2C1C               	goto	i1l5037
 19119  2417  3001               	movlw	1
 19120  2418  00F0               	movwf	??_rotISR
 19121  2419  0870               	movf	??_rotISR,w
 19122  241A  0141               	movlb	1	; select bank1
 19123  241B  00E8               	movwf	_rotDir^(0+128)	;volatile
 19124  241C                     i1l5037:	
 19125                           
 19126                           ;inputs.c: 46:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 19127  241C  1F7D               	btfss	_curRotState,6	;volatile
 19128  241D  0008               	return
 19129  241E  3002               	movlw	2
 19130  241F  00F0               	movwf	??_rotISR
 19131  2420  0870               	movf	??_rotISR,w
 19132  2421  0141               	movlb	1	; select bank1
 19133  2422  00E8               	movwf	_rotDir^(0+128)	;volatile
 19134  2423  0008               	return
 19135  2424                     __end_of_rotISR:	
 19136                           
 19137                           	psect	text70
 19138  22F9                     __ptext70:	
 19139 ;; *************** function _pushButtonISR *****************
 19140 ;; Defined at:
 19141 ;;		line 53 in file "inputs.c"
 19142 ;; Parameters:    Size  Location     Type
 19143 ;;		None
 19144 ;; Auto vars:     Size  Location     Type
 19145 ;;  time            1    1[COMMON] unsigned char 
 19146 ;; Return value:  Size  Location     Type
 19147 ;;                  1    wreg      void 
 19148 ;; Registers used:
 19149 ;;		wreg, status,2, status,0, pclath, cstack
 19150 ;; Tracked objects:
 19151 ;;		On entry : 0/0
 19152 ;;		On exit  : 0/0
 19153 ;;		Unchanged: 0/0
 19154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19159 ;;Total ram usage:        2 bytes
 19160 ;; Hardware stack levels used:    1
 19161 ;; Hardware stack levels required when called:    1
 19162 ;; This function calls:
 19163 ;;		_get10msTick
 19164 ;;		_reset10msTick
 19165 ;; This function is called by:
 19166 ;;		_ISR
 19167 ;; This function uses a non-reentrant model
 19168 ;;
 19169                           
 19170                           
 19171                           ;psect for function _pushButtonISR
 19172  22F9                     _pushButtonISR:	
 19173                           
 19174                           ;inputs.c: 55:  uint8_t time;;inputs.c: 57:  if (!PORTAbits.RA7) {
 19175                           
 19176                           ;incstack = 0
 19177                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0+pclath+cstack]
 19178  22F9  0140               	movlb	0	; select bank0
 19179  22FA  1B8C               	btfsc	12,7	;volatile
 19180  22FB  2AFF               	goto	i1l5013
 19181                           
 19182                           ;inputs.c: 58:   reset10msTick();
 19183  22FC  31A1  217A         	fcall	_reset10msTick
 19184                           
 19185                           ;inputs.c: 59:  } else {
 19186  22FE  0008               	return
 19187  22FF                     i1l5013:	
 19188                           
 19189                           ;inputs.c: 60:   time = get10msTick();
 19190  22FF  31A1  2177  31A2   	fcall	_get10msTick
 19191  2302  00F0               	movwf	??_pushButtonISR
 19192  2303  0870               	movf	??_pushButtonISR,w
 19193  2304  00F1               	movwf	pushButtonISR@time
 19194                           
 19195                           ;inputs.c: 61:   if ((time > 5) & (time <= 50))
 19196  2305  3006               	movlw	6
 19197  2306  0271               	subwf	pushButtonISR@time,w
 19198  2307  1C03               	skipc
 19199  2308  2B13               	goto	i1l5021
 19200  2309  3033               	movlw	51
 19201  230A  0271               	subwf	pushButtonISR@time,w
 19202  230B  1803               	skipnc
 19203  230C  2B13               	goto	i1l5021
 19204                           
 19205                           ;inputs.c: 63:    pbState = PB_SHORT;
 19206  230D  3001               	movlw	1
 19207  230E  00F0               	movwf	??_pushButtonISR
 19208  230F  0870               	movf	??_pushButtonISR,w
 19209  2310  0141               	movlb	1	; select bank1
 19210  2311  00E7               	movwf	_pbState^(0+128)	;volatile
 19211  2312  0008               	return
 19212  2313                     i1l5021:	
 19213  2313  3033               	movlw	51
 19214  2314  0271               	subwf	pushButtonISR@time,w
 19215  2315  1C03               	skipc
 19216  2316  2B21               	goto	i1l5027
 19217  2317  3097               	movlw	151
 19218  2318  0271               	subwf	pushButtonISR@time,w
 19219  2319  1803               	skipnc
 19220  231A  2B21               	goto	i1l5027
 19221                           
 19222                           ;inputs.c: 66:    pbState = PB_LONG;
 19223  231B  3002               	movlw	2
 19224  231C  00F0               	movwf	??_pushButtonISR
 19225  231D  0870               	movf	??_pushButtonISR,w
 19226  231E  0141               	movlb	1	; select bank1
 19227  231F  00E7               	movwf	_pbState^(0+128)	;volatile
 19228  2320  0008               	return
 19229  2321                     i1l5027:	
 19230                           
 19231                           ;inputs.c: 69:    pbState = PB_ABORT;
 19232  2321  3003               	movlw	3
 19233  2322  00F0               	movwf	??_pushButtonISR
 19234  2323  0870               	movf	??_pushButtonISR,w
 19235  2324  0141               	movlb	1	; select bank1
 19236  2325  00E7               	movwf	_pbState^(0+128)	;volatile
 19237  2326  0008               	return
 19238  2327                     __end_of_pushButtonISR:	
 19239                           
 19240                           	psect	text71
 19241  217A                     __ptext71:	
 19242 ;; *************** function _reset10msTick *****************
 19243 ;; Defined at:
 19244 ;;		line 41 in file "interrupt.c"
 19245 ;; Parameters:    Size  Location     Type
 19246 ;;		None
 19247 ;; Auto vars:     Size  Location     Type
 19248 ;;		None
 19249 ;; Return value:  Size  Location     Type
 19250 ;;                  1    wreg      void 
 19251 ;; Registers used:
 19252 ;;		status,2
 19253 ;; Tracked objects:
 19254 ;;		On entry : 0/0
 19255 ;;		On exit  : 0/0
 19256 ;;		Unchanged: 0/0
 19257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19262 ;;Total ram usage:        0 bytes
 19263 ;; Hardware stack levels used:    1
 19264 ;; This function calls:
 19265 ;;		Nothing
 19266 ;; This function is called by:
 19267 ;;		_pushButtonISR
 19268 ;; This function uses a non-reentrant model
 19269 ;;
 19270                           
 19271                           
 19272                           ;psect for function _reset10msTick
 19273  217A                     _reset10msTick:	
 19274                           
 19275                           ;interrupt.c: 42:  tick10ms = 0;
 19276                           
 19277                           ;incstack = 0
 19278                           ; Regs used in _reset10msTick: [status,2]
 19279  217A  0141               	movlb	1	; select bank1
 19280  217B  01E9               	clrf	_tick10ms^(0+128)	;volatile
 19281  217C  0008               	return
 19282  217D                     __end_of_reset10msTick:	
 19283                           
 19284                           	psect	text72
 19285  2177                     __ptext72:	
 19286 ;; *************** function _get10msTick *****************
 19287 ;; Defined at:
 19288 ;;		line 33 in file "interrupt.c"
 19289 ;; Parameters:    Size  Location     Type
 19290 ;;		None
 19291 ;; Auto vars:     Size  Location     Type
 19292 ;;		None
 19293 ;; Return value:  Size  Location     Type
 19294 ;;                  1    wreg      unsigned char 
 19295 ;; Registers used:
 19296 ;;		wreg
 19297 ;; Tracked objects:
 19298 ;;		On entry : 0/0
 19299 ;;		On exit  : 0/0
 19300 ;;		Unchanged: 0/0
 19301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19306 ;;Total ram usage:        0 bytes
 19307 ;; Hardware stack levels used:    1
 19308 ;; This function calls:
 19309 ;;		Nothing
 19310 ;; This function is called by:
 19311 ;;		_pushButtonISR
 19312 ;; This function uses a non-reentrant model
 19313 ;;
 19314                           
 19315                           
 19316                           ;psect for function _get10msTick
 19317  2177                     _get10msTick:	
 19318                           
 19319                           ;interrupt.c: 35:  return tick10ms;
 19320                           
 19321                           ;incstack = 0
 19322                           ; Regs used in _get10msTick: [wreg]
 19323  2177  0141               	movlb	1	; select bank1
 19324  2178  0869               	movf	_tick10ms^(0+128),w	;volatile
 19325  2179  0008               	return
 19326  217A                     __end_of_get10msTick:	
 19327  007E                     btemp	set	126	;btemp
 19328  007E                     int$flags	set	126
 19329  007E                     wtemp0	set	126


Data Sizes:
    Strings     399
    Constant    115
    Data        60
    BSS         85
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     62      80
    BANK2            80      0      75
    BANK3            80      0      50
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           19      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    p_fct$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    S1497$1$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__getStateFunc$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    func$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK2[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> str(BANK2[10]), systemCheck@str(BANK1[3]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK2[10]), 

    menu@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__getStateFunc	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    menu@func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    S1497$func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl.func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    p_fct	PTR FTN(PTR struct .,)unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setFudgeFactor@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setSkyTemp@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setDPOffset@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setup@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setLensDia@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setOutputPower@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setOutputPower@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    channelSetup@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    channelSetup@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    channelView$1227	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_17(CODE[7]), STR_16(CODE[7]), 

    channelView@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    statusView@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    spinInput@input	PTR float  size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 49
		 -> STR_53(CODE[11]), STR_52(CODE[9]), STR_51(CODE[2]), STR_50(CODE[13]), 
		 -> STR_49(CODE[9]), STR_48(CODE[2]), STR_47(CODE[13]), STR_46(CODE[3]), 
		 -> STR_45(CODE[7]), STR_44(CODE[13]), STR_43(CODE[10]), STR_42(CODE[10]), 
		 -> STR_41(CODE[3]), STR_40(CODE[7]), STR_39(CODE[37]), STR_38(CODE[8]), 
		 -> STR_37(CODE[2]), STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[2]), 
		 -> STR_33(CODE[7]), STR_32(CODE[6]), STR_31(CODE[7]), STR_30(CODE[6]), 
		 -> STR_29(CODE[13]), STR_28(CODE[8]), STR_27(CODE[9]), STR_26(CODE[8]), 
		 -> STR_25(CODE[5]), STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[25]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), 
		 -> STR_17(CODE[7]), STR_16(CODE[7]), STR_15(CODE[3]), STR_14(CODE[13]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[4]), STR_10(CODE[2]), 
		 -> STR_9(CODE[4]), STR_8(CODE[8]), STR_7(CODE[7]), STR_6(CODE[8]), 
		 -> STR_5(CODE[2]), STR_4(CODE[4]), str(BANK2[10]), STR_3(CODE[49]), 
		 -> STR_2(CODE[4]), systemCheck@str(BANK1[3]), STR_1(CODE[12]), 

    convertAnalogValues@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    getAvgChannelCurrents@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    getAvgChannelCurrents@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    sp__getDataPacket	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    checkSensor@dp	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    checkSensor@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    calcRequiredPower@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    systemCheck@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    initGlobalData@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    initGlobalData@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _main->_calcRequiredPower
    _main->_convertAnalogValues
    _main->_getAvgChannelCurrents
    _systemCheck->_convertAnalogValues
    _convertAnalogValues->___fldiv
    _OLED_Off->_OLED_command
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_ftoa
    _setOutputPower->_ftoa
    _setLensDia->_ftoa
    _setFudgeFactor->_ftoa
    _setDPOffset->_ftoa
    _spinInput->___flsub
    _menuError->_OLED_print_xy
    _OLED_returnHome->_OLED_command
    _OLED_clearDisplay->_OLED_command
    _getStateFunc->___wmul
    _getNextState->___wmul
    _channelView->_ftoa
    _channelSetup->_ftoa
    _returnToPage->_OLED_command
    _OLED_scrollDisplayRight->_OLED_command
    _OLED_scrollDisplayLeft->_OLED_command
    _itoa->___fltol
    _ftoa->___fltol
    _OLED_print_xy->_OLED_command
    _OLED_print_xy->_OLED_write
    _getAvgChannelCurrents->___fltol
    _ema->___lmul
    ___fltol->___fldiv
    _checkSensor->___xxtofl
    _checkSensor->_timeSince
    _timeSince->_timeNow
    ___xxtofl->___wmul
    _calcRequiredPower->___flsub
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calcRequiredPower
    _systemCheck->_itoa
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_ftoa
    _setOutputPower->_ftoa
    _setLensDia->_ftoa
    _setFudgeFactor->_ftoa
    _setDPOffset->_ftoa
    _channelView->_ftoa
    _channelSetup->_ftoa
    _itoa->___fltol
    _ftoa->___fltol
    _getAvgChannelCurrents->___fltol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  517869
                                             57 BANK1      5     5      0
                  _OLED_clearDisplay
                          _OLED_init
              _OLED_loadSpecialChars
                    _OLED_returnHome
                  _calcRequiredPower
                        _checkSensor
                _convertAnalogValues
              _getAvgChannelCurrents
                     _initGlobalData
                         _initialize
                               _menu
                        _systemCheck
                            _timeNow
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     6      2   33726
                                             16 BANK1      8     6      2
                           _OLED_Off
                  _OLED_clearDisplay
                      _OLED_print_xy
                    _OLED_returnHome
                             ___flge
                _convertAnalogValues
                              _error
                               _itoa
 ---------------------------------------------------------------------------------
 (2) _convertAnalogValues                                  8     6      2   13893
                                             72 BANK0      8     6      2
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                   _adcGetConversion
                                _ema
 ---------------------------------------------------------------------------------
 (2) _OLED_Off                                             0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _menu                                                11     9      2  432098
                                             28 BANK1     11     9      2
                       _channelSetup *
                        _channelView *
                       _getNextState
                              _getPB
                       _getStateFunc
                          _menuError
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
 ---------------------------------------------------------------------------------
 (2) _statusView                                           4     2      2   38863
                                             17 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                4     2      2   38665
                                             17 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           3     1      2   48512
                                             17 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       8     6      2   54784
                                             17 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                               _ftoa
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           7     5      2   48512
                                             17 BANK1      7     5      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       3     1      2   48565
                                             17 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          3     1      2   48512
                                             17 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   11171
                                             74 BANK0      2     2      0
                                              0 BANK1     14     0     14
                            ___fladd
                             ___flge
                            ___flsub
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _menuError                                            0     0      0   13225
                  _OLED_clearDisplay
                      _OLED_print_xy
                    _OLED_returnHome
 ---------------------------------------------------------------------------------
 (2) _OLED_returnHome                                      0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _OLED_clearDisplay                                    0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _getStateFunc                                         7     5      2    1572
                                              6 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         7     5      2    1856
                                              6 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         11     9      2   43775
                                             17 BANK1     11     9      2
                      _OLED_print_xy
                             ___bmul
                            ___fltol
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    1080
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         8     6      2   44884
                                             17 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    1858
                                              7 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1302
                                              7 BANK0      6     5      1
             _OLED_scrollDisplayLeft
            _OLED_scrollDisplayRight
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayRight                              0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayLeft                               0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    2784
                                              5 BANK1     11     7      4
                            ___awdiv
                            ___awmod
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   22918
                                             78 BANK0      2     2      0
                                              5 BANK1     12     6      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1460
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     394
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   12521
                                              7 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       9     7      2     563
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _getAvgChannelCurrents                               14    12      2   14831
                                             78 BANK0      2     0      2
                                              5 BANK1     12    12      0
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                           ___xxtofl
                   _adcGetConversion
                                _ema
                              _error
                          _setSwitch
 ---------------------------------------------------------------------------------
 (2) _setSwitch                                            2     1      1     404
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _error                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _ema                                                 20    12      8    1419
                                             12 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     396
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _adcGetConversion                                     4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     457
                                             72 BANK0      6     2      4
                                              0 BANK1      5     5      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          7     5      2    4554
                                             20 BANK0      7     5      2
                             ___flge
                           ___xxtofl
                      _getDataPacket
                            _timeNow
                          _timeSince
                    _uartIsDataReady
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIsDataReady                                      2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     361
                                              4 BANK0     16    12      4
                            _timeNow
 ---------------------------------------------------------------------------------
 (2) _timeNow                                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getDataPacket                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     778
                                              6 BANK0     14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    2918
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   63    61      2   15866
                                             74 BANK0      6     4      2
                                              0 BANK1     57    57      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    3549
                                             66 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    2896
                                             46 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             26    18      8    6217
                                             20 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            9     7      2     799
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             26    18      8    2185
                                             46 BANK0     26    18      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0     796
                                              7 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                              7 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              0 BANK0      1     1      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     306
                                              3 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              0 BANK0      3     3      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _OLED_pulseEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  4     4      0     438
                                              8 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (10) _uartReceiveISR                                      1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (11) _strncpy                                             6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (10) _rotISR                                              8     8      0      23
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (10) _pushButtonISR                                       2     2      0      89
                                              0 COMMON     2     2      0
                        _get10msTick
                      _reset10msTick
 ---------------------------------------------------------------------------------
 (11) _reset10msTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _get10msTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_clearDisplay
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write4bits
       _OLED_pulseEnable
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_returnHome
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _calcRequiredPower
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
   _checkSensor
     ___flge
     ___xxtofl
       ___wmul (ARG)
     _getDataPacket
     _timeNow
     _timeSince
       _timeNow
     _uartIsDataReady
     _uartReset
     _uartSendByte
   _convertAnalogValues
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___xxtofl
       ___wmul (ARG)
     _adcGetConversion
     _ema
       ___lmul
   _getAvgChannelCurrents
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___flge
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     ___xxtofl
       ___wmul (ARG)
     _adcGetConversion
     _ema
       ___lmul
     _error
     _setSwitch
   _initGlobalData
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___fleq
       ___flge
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___bmul
       ___fltol
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _getNextState *
       ___wmul
     _getPB *
     _getStateFunc *
       ___wmul
     _menuError *
       _OLED_clearDisplay
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _OLED_returnHome
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___fleq
       ___flge
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         _getRotDir
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flge
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
   _systemCheck
     _OLED_Off
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_clearDisplay
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       _OLED_write
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       ___bmul (ARG)
     _OLED_returnHome
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     ___flge
     _convertAnalogValues
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___fldiv
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___flmul
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
       ___xxtofl
         ___wmul (ARG)
       _adcGetConversion
       _ema
         ___lmul
     _error
     _itoa
       ___awdiv
       ___awmod
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
   _timeNow
   _timeSince
     _timeNow

 _ISR (ROOT)
   _pushButtonISR
     _get10msTick
     _reset10msTick
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3E      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     12B       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      32      12       62.5%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              13      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     12B      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jan 28 20:07:49 2020

                   _pushButtonISR 22F9                     returnToPage@n 002A          __end_of_transition_table 28C9  
                    _stateFuncTbl 2800                      ___fldiv@aexp 0067                      ___fldiv@bexp 0066  
                    ___fldiv@sign 005F                    ___bmul@product 0022                       __CFG_CP$OFF 0000  
             __end_of_systemCheck 1208            _calcRequiredPower$2140 00AC            _calcRequiredPower$2141 00B0  
          _calcRequiredPower$2142 00B4            _calcRequiredPower$2143 00B8            _calcRequiredPower$2144 00BC  
          _calcRequiredPower$2138 00CC            _calcRequiredPower$2139 00A8                      ___awdiv@sign 0026  
             ___wmul@multiplicand 0022                    ??_getStateFunc 0028           ??_OLED_loadSpecialChars 0027  
             __Umul8_16@word_mpld 0026                       __CFG_LVP$ON 0000                               l201 2240  
                             l131 1BA8                               l151 118B                               l240 2537  
                             l172 22F7                               l270 224E                               l450 21AE  
                             l630 1014                               l950 1A5B                               l769 221A  
                             l970 19D6                               l938 2595                               l947 1A0D  
                             l939 25AF                               _ISR 0004                               _ema 26C3  
                             _str 0159                      ___awmod@sign 0026                      __CFG_BORV$LO 0000  
                             wreg 0009                  returnToPage@page 0029                      ___flmul@aexp 0046  
                    ___flmul@bexp 0047                      ___flmul@sign 0041                      ___flmul@temp 004C  
                    ___flmul@prod 0048                     __CFG_BBEN$OFF 0000                              ?_ISR 0070  
                    __CFG_ZCD$OFF 0000                      ___fltol@exp1 006D                              l1112 0DF5  
                            l1104 0DDD                              l1210 1069                              l1204 1033  
                            l1150 14E9                              l1126 13BD                              l1070 0C68  
                            l1233 2299                              l1217 107D                              l1074 0CFB  
                            l1218 1087                              l1147 14C4                              l1091 0D7E  
                            l1148 14DC                              l1076 0CDE                              l1178 0721  
                            l4031 0875                              ?_ema 002C                              l3305 0C72  
                            l4201 2646                              l4105 15D1                              l3411 0DA4  
                            l4107 166A              __end_of_channelSetup 2000                              l3405 0D9D  
                            l3413 0DA6                              l4301 0903                              l3423 0DB1  
                            l3343 0CE6                              l3335 0CAE                              l3271 0C35  
                            l4223 22ED                              l4215 22DA                              l4127 27BF  
                            l4135 27D5                              l3441 0DED                              l3361 0D09  
                            l3345 0CE8                              l3353 0CF6                              l4073 1540  
                            l3521 25D9                              l4049 23CA                              l4313 0963  
                            l3419 0DAF                              l3371 0D1D                              l3275 0C38  
                            l3611 198C                              l4219 22E3                              l4083 15A1  
                            l4075 1590                              l3531 25E1                              l3515 25CE  
                            l4147 27E0                              l4155 27F5                              l4163 0809  
                            l3445 0DF1                              l3277 0C40                              l4085 15BB  
                            l3533 25ED                              l3455 2293                              l3295 0C5D  
                            l3631 19C2                              l3615 1995                              l4183 25C1  
                            l3543 2608                              l5223 2737                              l4167 080F  
                            l4511 1B0B                              l3705 13E8                              l3369 0D1B  
                            l3641 19E3                              l3633 19D2                              l3481 2214  
                            l5401 10F8                              l3731 1448                              l3379 0D2C  
                            l3299 0C60                              l3547 2610                              l3539 25FF  
                            l3571 2504                              l3563 24FE                              l5227 2780  
                            l4339 0A5D                              l4291 08EB                              l5403 10FC  
                            l3725 142F                              l3733 1411                              l3805 051C  
                            l3397 0D90                              l3389 0D76                              l3573 2510  
                            l3581 2525                              l5229 2791                              l4293 08EF  
                            l5261 0EC0                              l5237 0E07                              l5325 1F43  
                            l5501 1BDA                              l3751 146A                              l3735 144D  
                            l3671 1399                              l3823 053F                              l3807 051E  
                            l3495 2330                              l3559 24F7                              l4631 1C85  
                            l4623 1C6A                              l4295 08F1                              l5263 0ED6  
                            l5255 0EBA                              l5335 1F94                              l4551 18B4  
                            l5407 1136                              l3761 1483                              l3665 138E  
                            l3913 06F7                              l3825 0541                              l3809 0526  
                            l4801 1293                              l3585 252D                              l3577 251C  
                            l4617 1C19                              l5281 0F8E                              l5273 0F43  
                            l5257 0EBB                              l5345 1FF0                              l3771 14AC  
                            l3835 0557                              l3827 0549                              l3595 1A27  
                            l4803 12B4                              l3499 233A                              l5283 0FA4  
                            l5371 1E49                              l4539 07D8                              l5443 118C  
                            l5507 1BFC                              l3757 1481                              l3749 1453  
                            l3685 13B2                              l3669 1391                              l3909 06E2  
                            l4637 1CA1                              l5277 0F62                              l5293 0FED  
                            l5381 1E9A                              l4565 1846                              l5461 268A  
                            l5429 1152                              l4751 22BD                              l3919 070E  
                            l3599 1A41                              l3943 1042                              l4823 1355  
                            l4831 1361                              l5279 0F78                              l5287 0FBA  
                            l5359 1DDA                              l5463 268D                              l3785 14E5  
                            l3689 13B5                              l4905 00B7                              l3937 102B  
                            l4809 12C0                              l4593 2466                              l5289 0FE7  
                            l5449 11CA                              l3699 13DC                              l3971 10A2  
                            l3947 1046                              l4827 135E                              l5563 0FD6  
                            l4579 1923                              l3957 107B                              l3949 1056  
                            l5565 136B                              l4765 1D3E                              l3895 06B7  
                            l3887 0689                              l3959 106E                              l4791 1247  
                            l4943 0A95                              l4935 0A71                              l3991 23A4  
                            l4599 249C                              l3889 06A0                              l4793 1250  
                            l4953 0B48                              l4945 0AC3                              l3899 06B9  
                            l4795 1271                              l4789 123E                              l4973 0C04  
                            l4983 0C19                              l4967 0B80                              STR_1 294A  
                            STR_2 29EB                              STR_3 281B                              STR_4 29DF  
                            STR_5 29FE                              STR_6 2996                              STR_7 29CB  
                            STR_8 2996                              STR_9 29E3                              u3200 0CCD  
                            u3210 0CCE                              u3055 2432                              u3065 2440  
                            u4105 1429                              u3075 2450                              u4115 143D  
                            u3323 0D3E                              u3315 0D21                              u3085 07F3  
                            u3245 0CEC                              _PIE0 0716                              u4145 1456  
                            _PIE3 0719                              _PIE4 071A                              u4235 149A  
                            u4075 1419                              u3195 0CC2                              u4245 14B5  
                            u4165 145F                              u4085 1420                              u4405 068C  
                            u3365 0D91                              u4255 14CE                              u3615 233B  
                            u3545 229A                              u4505 06EB                              u4425 0695  
                            u3465 0DC8                              u3625 2342                              u3705 25F8  
                            u5305 1B10                              u4515 0701                              u4355 05CD  
                            u3715 2600                              u5315 1B40                              u4365 05FC  
                            u4605 1075                              u3805 251D                              u6205 1ED9  
                            u4375 0652                              u3575 221B                              u4385 0669  
                            u3585 2220                              u6145 0E61                              u5450 22B3  
                            u4395 0678                              u3675 25E4                              u4645 108F  
                            u4565 104F                              u3925 19C3                              u4725 2721  
                            u6165 0EDA                              u6245 1DB8                              u4495 06D0  
                            u3695 25EE                              u3775 2507                              u6175 0F2C  
                            u4585 1063                              u6417 1C10                              u6507 1AAC  
                            u3955 19DA                              u5475 1D42                              u3795 2516  
                            u6195 0FBE                              u6427 117B                              u6517 1AB8  
                            u5725 0A75                              u6437 27C6                              u6607 2198  
                            u6527 1AC4                              u5655 00C6                              u3895 19A5  
                            u6447 27E7                              u6537 1AD0                              u5665 03A0  
                            u6457 0B79                              u4785 23E0                              u6547 1ADC  
                            u6467 1A76                              u5675 03C6                              u6395 26BA  
                            u6557 1AE8                              u6477 1A88                              u5685 0434  
                            u6567 1AF4                              u6487 1A94                              u5695 04E0  
                            u4895 27B7                              u6577 2250                              u6497 1AA0  
                            u4985 25BD                              u6587 2256                              u4995 262F  
                            u6597 245D                              _TMR0 059C                              _TMR1 020C  
       __size_of_OLED_pulseEnable 0009              __size_of_get10msTick 0003                     __CFG_FCMEN$ON 0000  
                   OLED_send@mode 0023                              _data 2743                              _main 1B84  
                            _ftoa 14EE                              _menu 266B                              _itoa 272C  
                channelSetup@data 00B1                              fsr0h 0005                              fsr1h 0007  
                            indf0 0000                              fsr0l 0004                              indf1 0001  
                            fsr1l 0006                  channelSetup@page 00E1                              btemp 007E  
                   __CFG_BOREN$ON 0000                              start 0068    __size_of_getAvgChannelCurrents 01BC  
                     ?_OLED_write 0070     __end_of_getAvgChannelCurrents 0C1B                      spinInput@dir 006B  
                 ___fldiv@new_exp 0060                      spinInput@max 00A6                      spinInput@min 00A2  
               _calcRequiredPower 00B5                    ?_pushButtonISR 0070                     __CFG_CSWEN$ON 0000  
               ___bmul@multiplier 0023                     __CFG_MCLRE$ON 0000                      main@checkInt 00DA  
              ?_calcRequiredPower 006A                             ??_ISR 0078                             ??_ema 0034  
              __size_of_OLED_init 008B                __size_of_OLED_send 0017                    _setFudgeFactor 1911  
                   ___fltol@sign1 006C                   __end_of___fladd 0DFD                             ?_main 0070  
                           ?_ftoa 00A5                             ?_menu 00BC                   __end_of___fldiv 14EE  
                           ?_itoa 00A5                   __end_of___awdiv 2615                             STR_10 2A00  
                           STR_11 29E7                             STR_12 29F8                             STR_20 2916  
                           STR_13 29F5                             STR_21 2930                             STR_30 29D9  
                           STR_14 28E2                             STR_22 28C9                             STR_23 29DA  
                           STR_15 29FB                             STR_31 29B6                             STR_16 29AF  
                           STR_32 29D9                             STR_40 29D2                             STR_24 299E  
                           STR_25 29DA                             STR_17 297F                             STR_41 29F2  
                           STR_33 29BD                     __CFG_WDTE$OFF 0000                             STR_34 29C9  
                           STR_50 28A0                             STR_26 29AE                             STR_42 2961  
                           STR_18 2923                             STR_51 29C9                             STR_43 28E5  
                           STR_35 298E                             STR_27 297D                             STR_19 28EF  
                           STR_36 28D5                             STR_28 29A6                             STR_52 2974  
                           STR_44 2909                   __end_of___awmod 2532                             STR_37 29C9  
                           STR_45 29C4                             STR_53 2956                             STR_29 293D  
                           STR_46 29EF                             STR_38 2986                             STR_47 28FC  
                           STR_39 2888                             STR_48 29C9                             STR_49 296B  
                 __end_of___flmul 072E               ??_calcRequiredPower 006C   checkSensor@sensorUpdateInterval 0128  
                 __end_of___flsub 2288                   __end_of___fltol 19F2                             _T1CLK 0211  
                __end_of_OLED_Off 21BC                   ___awdiv@divisor 0020                             _T1CON 020E  
                           _IOCAN 1F3E                             _IOCAP 1F3D                             _IOCCN 1F54  
                           i1l375 005F                             i1l367 0015                             i1l369 0031  
                           i1l379 0066                   ___awdiv@counter 0025             __end_of_reset10msTick 217D  
                           _TRISA 0012                             _TRISB 0013                             _TRISC 0014  
          uartReceiveISR@checksum 00E5               ___lmul@multiplicand 0024              __size_of_checkSensor 016C  
                    ?_setDPOffset 00B1                     __CFG_WRTB$OFF 0000                     __CFG_WRTC$OFF 0000  
                  OLED_send@value 0025                             _getPB 21DD                    statusView@data 00B1  
                  statusView@page 00E3          statusView@prevSensorStat 00EE                             _p_fct 01C0  
                           ema@in 002C                  ?_uartIsDataReady 0070                             _error 07FF  
                           _setup 072E                    setSkyTemp@data 00B1                             ftoa@w 00AE  
                           pclath 000A                   __end_of_timeNow 2211              __size_of_channelView 0203  
                           status 0003                             wtemp0 007E         __end_of_calcRequiredPower 0502  
                 __end_of_strncpy 2388                     spinInput@step 00AA                       _systemCheck 10AB  
     getAvgChannelCurrents@chData 00AF                   __initialization 006A                      __end_of_main 1C16  
                    __end_of_ftoa 1674                      __end_of_menu 26C3                      __end_of_itoa 2795  
          __end_of_setFudgeFactor 1980                    __CFG_SAFEN$OFF 0000                            ??_main 00D9  
                          ??_ftoa 006E                            ??_menu 00BE                            ??_itoa 00A9  
               ?_adcGetConversion 0020                    OLED_print_xy@s 0028                  setSwitch@channel 0021  
            __end_of_getNextState 1CAB           __size_of_setOutputPower 0121                ??_adcGetConversion 0022  
    __size_of_convertAnalogValues 018C               __size_of_OLED_write 000B                setOutputPower@data 00B1  
                          ?_getPB 0070           _OLED_scrollDisplayRight 2181                            _ADCON1 009E  
           calcRequiredPower@data 006A                            ?_error 0070                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0022                            ?_setup 00B1  
                          _ANSELA 1F38                            _ANSELB 1F43                            _ANSELC 1F4E  
              __CFG_RSTOSC$HFINT1 0000                            _T0CON0 059E                            _T0CON1 059F  
                          _RC1REG 0119                            _RC1STA 011D                            _RC6PPS 1F26  
                          i1l5021 2313                            i1l5013 22FF                            i1l5027 2321  
                          i1l5037 241C                            i1l5053 24B8                            i1l5141 0027  
                          i1l5047 24B0                            i1l5135 0020                            i1l5065 24E8  
                          i1l4283 237D                            i1l5059 24D4                            i1l5147 002E  
                          i1l4277 235C                            i1l5157 0057                            i1l4279 2374  
                  __CFG_WDTCCS$SC 0000             __end_of_getDataPacket 0802                            _INTCON 000B  
               __end_of_OLED_init 1AF9                 __end_of_OLED_send 07FF                   systemCheck@data 00B0  
                          _OSCFRQ 0893                            _SPBRGL 011B                            _TX1REG 011A  
                          _TX1STA 011E              __end_of_getStateFunc 24A7                  __end_of___xxtofl 10AB  
                 ??_pushButtonISR 0070                    __CFG_PWRTE$OFF 0000                            ___flge 19F2  
                          ___bmul 0806                            ___fleq 257A                            ___lmul 2327  
      OLED_loadSpecialChars@F7945 01A0                         ??___fladd 0056                            ___wmul 2211  
                       ??___fldiv 0056                         ??___awdiv 0024                    __CFG_STVREN$ON 0000  
                       ??___awmod 0024                         ??___flmul 003C                         ??___flsub 006A  
                       ??___fltol 00A0                   ?_setFudgeFactor 00B1                channelSetup@chData 00B7  
        __size_of_OLED_returnHome 0004                            _paging 2795                  ___awdiv@quotient 0027  
                 ___awmod@divisor 0020                            _rotISR 23EC                            _rotDir 00E8  
         __size_of_initGlobalData 0108                     ?_OLED_command 0070                   ___awmod@counter 0025  
                          menu@pb 00C3                __size_of__Umul8_16 0020             __size_of_channelSetup 012C  
         adcGetConversion@channel 0023             OLED_waitForReady@busy 0020                         ??_timeNow 0024  
               OLED_command@value 0026                         ??_strncpy 0073                  _OLED_pulseEnable 2195  
                      ___flge@ff1 0020                        ___flge@ff2 0024                     checkSensor@dp 003A  
                    ___xxtofl@arg 0030                      ___xxtofl@exp 002F                      ___xxtofl@val 0026  
                      ___fleq@ff1 0020                        ___fleq@ff2 0024                    spinInput@input 00A0  
         __end_of__initialization 00B1                      ftoa@intValue 00AD        __size_of_calcRequiredPower 044D  
                      ___fltol@f1 0068                         ?_OLED_Off 0070               ___bmul@multiplicand 0020  
        __size_of_OLED_write4bits 003F                    __pcstackCOMMON 0070                      __pidataBANK1 0002  
                    __pidataBANK2 218D                      __pidataBANK3 1802                     __end_of_getPB 21E8  
         convertAnalogValues@data 0068           convertAnalogValues@avgI 012C           convertAnalogValues@avgT 0130  
         convertAnalogValues@avgV 012E      getAvgChannelCurrents@channel 00EC              uartReceiveISR@buffer 0136  
                   __end_of_error 0800                      _channelSetup 1ED4                     __end_of_setup 07E8  
                  ??_OLED_command 0026      getAvgChannelCurrents@current 00AB    __size_of_OLED_loadSpecialChars 0027  
              setFudgeFactor@data 00B1     __end_of_OLED_loadSpecialChars 22CF      getAvgChannelCurrents@samples 00EB  
              __size_of_getRotDir 000B         ??_OLED_scrollDisplayRight 0027                    setSwitch@state 0020  
                         ??_getPB 0020            __size_of_OLED_print_xy 0032                           ??_error 0020  
                      _dataPacket 014A                           ??_setup 00B3              __size_of_setDPOffset 006F  
                      __pbssBANK1 00DE                        __pbssBANK2 0120                uartIsDataReady@ret 0021  
         __size_of_uartReceiveISR 0045                __size_of_menuError 0011                      ??_OLED_write 0026  
                      ??_OLED_Off 0027                 __end_of__Umul8_16 22A8                        __pmaintext 1B84  
                         ?___flge 0020                           ?___bmul 0020                           ?___fleq 0020  
                         ?___lmul 0020                           ?___wmul 0020                 getStateFunc@state 002B  
                 __CFG_PPS1WAY$ON 0000                        __pintentry 0004             __size_of_getNextState 0095  
                         ?_paging 0027                 _OLED_waitForReady 224A                    ___lmul@product 0028  
                         ?_rotISR 0070                __size_of_setSwitch 002A          ??_OLED_scrollDisplayLeft 0027  
              __size_of_timeSince 0056                ?_OLED_waitForReady 0070                __size_of_uartReset 0008  
                  _setOutputPower 1DB3                 ??_OLED_returnHome 0027                         ?___xxtofl 0026  
              __size_of_spinInput 00B3                           _OSCCON1 088D                __end_of_OLED_write 21C7  
                   ??_get10msTick 0070               ??_OLED_waitForReady 0020             __size_of_getStateFunc 0044  
               pushButtonISR@time 0071                       rotISR@input 0077                      _getNextState 1C16  
                    ?_systemCheck 00B0                 __end_of_getRotDir 21DD               _convertAnalogValues 1674  
                      ema@average 002E             _getAvgChannelCurrents 0A5F                     _OLED_print_xy 2388  
       __end_of_OLED_waitForReady 2269                   __size_of___flge 007C                   __size_of___bmul 0012  
                 __size_of___fleq 0049                           ___fladd 0C1B                           ___fldiv 1374  
                         ___awdiv 25C3                   __size_of___lmul 0030                           ___awmod 24EC  
                         ___flmul 0502                           ___flsub 2269                           ___fltol 1980  
                 __size_of___wmul 001C                   OLED_write@value 0026                     ?_uartSendByte 0070  
                  _initGlobalData 1CAB                   __size_of_paging 006B                 ??_OLED_write4bits 0020  
                      _initialize 2532                   __size_of_rotISR 0038            __end_of_setOutputPower 1ED4  
                         __ptext1 10AB                           __ptext2 1674                           __ptext3 21B2  
                         __ptext4 266B                           __ptext5 1911                           __ptext6 1834  
                         __ptext7 18A2                           __ptext8 072E                           __ptext9 1AF9  
                   ??_checkSensor 0036                           _pbState 00E7                      _getStateFunc 2463  
                 __CFG_WRTAPP$OFF 0000                      __size_of_ISR 0064                  _channelView$1227 00B9  
               __end_of_menuError 1015                           ema@tmp0 003C                      __size_of_ema 0069  
                      ??___xxtofl 002A                  ___awmod@dividend 0022              ?_convertAnalogValues 0068  
                       _IOCAFbits 1F3F                   __CFG_WRTSAF$OFF 0000                           _rxCount 007C  
                         _timeNow 2200                     ??_channelView 00B3                           clrloop0 21E9  
                         _strncpy 2357              end_of_initialization 00B1                        _setLensDia 1AF9  
                         ftoa@len 00AB                           ftoa@pos 00AF                           ftoa@str 00B0  
                         paging@n 002C                    paging@lastPage 0027              __end_of_OLED_command 21A8  
               __end_of_setSwitch 22F9                           init_ram 21F4         __size_of_adcGetConversion 001D  
                         itoa@str 00A5                           initloop 21F5               __end_of_get10msTick 217A  
                      _setSkyTemp 1834                 __end_of_timeSince 266B                 __end_of_uartReset 218D  
        __size_of_uartIsDataReady 000B                  ??_setFudgeFactor 00B3                         _OLED_init 1A6E  
                       _OLED_send 07E8            __size_of_reset10msTick 0003               OLED_setCursor@F7932 0167  
                   ?_returnToPage 0070                 __end_of_spinInput 08CB                    ?_OLED_print_xy 0027  
              OLED_print_xy@F7940 0163            __end_of_initGlobalData 1DB3                     _dataReadyFlag 00E6  
                  ??_uartSendByte 0020             __CFG_WDTCPS$WDTCPS_31 0000          __end_of_OLED_pulseEnable 219E  
                       _PORTAbits 000C                         _PORTCbits 000E                   ?_setOutputPower 00B1  
 __size_of_OLED_scrollDisplayLeft 0004                   _selectedChannel 00E4                       ___fladd@grs 0061  
           ??_convertAnalogValues 006A                     ___xxtofl@sign 002E                         _TRISCbits 0014  
                     ___fldiv@grs 0062                       ___fldiv@rem 005B               __end_of_checkSensor 1374  
                __CFG_FEXTOSC$OFF 0000      OLED_loadSpecialChars@special 0028                    _uartReceiveISR 24A7  
                     ___flmul@grs 0042                        _statusView 08CB               __end_of_channelView 1000  
                 channelView@data 00B1                 getNextState@state 002B                   channelView@page 00E2  
                      ?_OLED_init 0070                    ??_returnToPage 0027                        ?_OLED_send 0023  
          ?_getAvgChannelCurrents 006E             __end_of_pushButtonISR 2327                 __size_of_OLED_Off 000A  
      __size_of_OLED_waitForReady 001F                   ?_initGlobalData 0020                    __end_of___flge 1A6E  
            __end_of_nextStateTbl 2888                    __end_of___bmul 0818                    __end_of___fleq 25C3  
                  __end_of___lmul 2357                    __end_of___wmul 222D                       ?_initialize 0070  
          __size_of_getDataPacket 0002                    __end_of_paging 2800                        ftoa@fValue 00A5  
                  __end_of_rotISR 2424               start_initialization 006A                     _reset10msTick 217A  
                     __end_of_ISR 0068                       __end_of_ema 272C          OLED_print_xy@row_offsets 002B  
          __end_of_uartReceiveISR 24EC                       _get10msTick 2177          getAvgChannelCurrents@adc 00A9  
        getAvgChannelCurrents@avg 0132                       ?_setLensDia 00B1            _OLED_scrollDisplayLeft 217D  
            calcRequiredPower@Rth 00A4              initGlobalData@chData 0027              calcRequiredPower@phi 00C4  
                     ?_setSkyTemp 00B1                   ??_OLED_print_xy 002A                    systemCheck@str 00B4  
                __CFG_LPBOREN$OFF 0000                        error@error 0070                          ??___flge 0028  
                        ??___bmul 0021                          ??___fleq 0028              __size_of_systemCheck 015D  
                  timeSince@since 0024                          ??___lmul 0028                   _OLED_returnHome 0802  
                        ??___wmul 0024                         __Umul8_16 2288                 ??_uartIsDataReady 0020  
                     __pdataBANK1 00EE                       __pdataBANK2 0163                       __pdataBANK3 01A0  
                        ??_paging 0028                          ??_rotISR 0070                  OLED_print_xy@col 002F  
                     _checkSensor 1208                         ___fladd@a 0052                         ___fladd@b 004E  
                OLED_print_xy@row 0027                         ___fldiv@a 004E                         ___fldiv@b 0052  
                  ?_reset10msTick 0070                       __pbssBIGRAM 2743                         ___flmul@a 0038  
                       ___flmul@b 0034                       __pbssCOMMON 007C                         ___flsub@a 0062  
                       ___flsub@b 0066                         ___latbits 0003                     ??_setDPOffset 00B3  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0             _OLED_loadSpecialChars 22A8  
           __size_of_OLED_command 000A            convertAnalogValues@adc 006E                 __size_of___xxtofl 0096  
               paging@currentPage 002A                       _channelView 0DFD                   ?_uartReceiveISR 0070  
            __end_of_uartSendByte 21B2                      systemCheck@n 00B7                       ?_statusView 00B1  
                   _getDataPacket 0800                  _adcGetConversion 222D               __size_of_initialize 0048  
            setOutputPower@chData 00B7                   _OLED_write4bits 2424                       ??_OLED_init 0027  
                     ??_OLED_send 0024                          ?___fladd 004E                          ?___fldiv 004E  
                        ?___awdiv 0020                          ?___awmod 0020                          ?___flmul 0034  
                        ?___flsub 0062                          ?___fltol 0068                    _g_updateScreen 00EF  
                       _getRotDir 21D2                        ?__Umul8_16 0020               __size_of_setLensDia 008B  
        ?_OLED_scrollDisplayRight 0070                      _OLED_command 219E                          _BAUD1CON 011F  
                  getNextState@pb 0027                      channelView@n 00BB          _convertAnalogValues$2145 006A  
             __size_of_setSkyTemp 006E              __end_of_returnToPage 23EC                          ?_timeNow 0020  
                  __size_of_getPB 000B                         _menuError 1004                    __size_of_error 0001  
                       _tick100ms 0120                          ?_strncpy 0070                    __size_of_setup 00BA  
                  ?_getDataPacket 0070               __end_of_setDPOffset 1911                    ___wmul@product 0024  
                        _LATAbits 0018                          _LATBbits 0019                          _LATCbits 001A  
         __end_of_OLED_returnHome 0806                         clear_ram0 21E8                     paging@lastDir 00DE  
                        _PIE0bits 0716                          _PIE3bits 0719                          _PIE4bits 071A  
                        _OLED_Off 21B2                    setLensDia@data 00B1                         _setSwitch 22CF  
                        _PIR0bits 070C                          _PIR3bits 070F                          _PIR4bits 0710  
                       _timeSince 2615                         _uartReset 2185                   initGlobalData@n 0026  
               __CFG_BBSIZE$BB512 0000                  ??_setOutputPower 00B3         getAvgChannelCurrents@data 006E  
       getAvgChannelCurrents@busy 00EA                        ?_getRotDir 0070                         _spinInput 0818  
               ?_OLED_pulseEnable 0070                   ??_reset10msTick 0070                        _ADCON0bits 009D  
               ___wmul@multiplier 0020                      _RX1DTPPSbits 1ECB               __size_of_statusView 0194  
                 setDPOffset@data 00B1                ??_OLED_pulseEnable 0020            ?_OLED_loadSpecialChars 0070  
                getNextState@page 0026                     menu@nextState 00C6              OLED_write4bits@value 0022  
                     _curRotState 007D                  _transition_table 28AD              __end_of_stateFuncTbl 281B  
                      ?_menuError 0070                 ___lmul@multiplier 0020           __end_of_OLED_write4bits 2463  
                    _nextStateTbl 284C                         ftoa@width 00A9           ??_getAvgChannelCurrents 00A5  
             calcRequiredPower@T1 00D0               calcRequiredPower@T2 00D4                  ??_initGlobalData 0022  
                       paging@dir 002B                 _OLED_clearDisplay 1000                        ?_setSwitch 0020  
                   uartSendByte@s 0020                         menu@state 00DF                        ?_timeSince 0024  
                      ?_uartReset 0070   __end_of_OLED_scrollDisplayRight 2185                ?_OLED_clearDisplay 0070  
                     ??__Umul8_16 0022                         itoa@value 00A7                     ?_channelSetup 00B1  
                       itoa@width 00A8                  __size_of___fladd 01E2                  __size_of___fldiv 017A  
                __size_of___awdiv 0052       __end_of_convertAnalogValues 1800                  __size_of___awmod 0046  
                      ?_spinInput 00A0                  __size_of___flmul 022C                  __size_of___flsub 001F  
                __size_of___fltol 0072            OLED_loadSpecialChars@n 0048                      ??_initialize 0020  
             ??_OLED_clearDisplay 0027                          ___xxtofl 1015                       _rxFErrCount 0135  
           __size_of_uartSendByte 000A                       _setDPOffset 18A2          checkSensor@sensorTimeout 0124  
                        __ptext10 1DB3                          __ptext11 1ED4                          __ptext20 1C16  
                        __ptext12 0DFD                          __ptext21 0806                          __ptext13 08CB  
                        __ptext30 14EE                          __ptext22 23BA                          __ptext14 0818  
                        __ptext31 2211                          __ptext23 2795                          __ptext15 1004  
                        __ptext40 2327                          __ptext32 257A                          __ptext24 21D2  
                        __ptext16 0802                          __ptext41 222D                          __ptext33 2388  
                        __ptext25 2181                          __ptext17 1000                          __ptext50 1015  
                        __ptext42 1980                          __ptext34 2532                          __ptext26 217D  
                        __ptext18 2463                          __ptext51 19F2                          __ptext43 1208  
                        __ptext35 1CAB                          __ptext27 272C                          __ptext19 21DD  
                        __ptext60 1A6E                          __ptext52 00B5                          __ptext44 21A8  
                        __ptext36 0A5F                          __ptext28 24EC                          __ptext61 219E  
                        __ptext53 2269                          __ptext45 2185                          __ptext37 22CF  
                        __ptext29 25C3                          __ptext70 22F9                          __ptext62 224A  
                        __ptext54 0C1B                          __ptext46 21C7                          __ptext38 07FF  
                        __ptext71 217A                          __ptext63 07E8                          __ptext55 0502  
                        __ptext47 2615                          __ptext39 26C3                          __ptext72 2177  
                        __ptext64 2424                          __ptext56 2288                          __ptext48 2200  
                        __ptext65 2195                          __ptext57 1374                          __ptext49 0800  
                        __ptext58 22A8                          __ptext67 24A7                          __ptext59 21BC  
                        __ptext68 2357                          __ptext69 23EC                      ?_get10msTick 0070  
                __size_of_timeNow 0011                   ??_getDataPacket 0020           ?_OLED_scrollDisplayLeft 0070  
                    ??_setLensDia 00B3                     getNextState@n 002C                       _OSCCON3bits 088F  
                __size_of_strncpy 0031                          ema@alpha 0030                     __size_of_main 0092  
                   __size_of_ftoa 0186         __end_of_OLED_clearDisplay 1004                     __size_of_menu 0058  
                   __size_of_itoa 0069                      ??_setSkyTemp 00B3                   _uartIsDataReady 21C7  
                        getPB@ret 0021                          _tick10ms 00E9                  ?_OLED_returnHome 0070  
              __end_of_initialize 257A              __CFG_WDTCWS$WDTCWS_7 0000                        _RC1STAbits 011D  
                     _rxOErrCount 0134                    ??_channelSetup 00B3                         setup@data 00B1  
                        int$flags 007E                         setup@page 00E0                       ??_getRotDir 0020  
                    _uartSendByte 21A8             __size_of_returnToPage 0032                __end_of_setLensDia 1B84  
        __end_of_adcGetConversion 224A           __size_of_setFudgeFactor 006F                      ?_checkSensor 0034  
                ??_uartReceiveISR 0076                          ftoa@prec 00AA                          ftoa@sign 00AC  
                      _INTCONbits 000B                calcRequiredPower@A 00C8                calcRequiredPower@d 00C0  
              calcRequiredPower@n 00D8                calcRequiredPower@p 00A0                __end_of_setSkyTemp 18A2  
                        menu@data 00BC                initGlobalData@data 0020                          menu@page 00C2  
                        menu@func 00C4    __end_of_OLED_scrollDisplayLeft 2181                      timeSince@now 0030  
                  __pstringtext10 2916                    __pstringtext11 2923                    __pstringtext20 2986  
                  __pstringtext12 2930                    __pstringtext21 298E                    __pstringtext13 293D  
                  __pstringtext30 29D2                    __pstringtext22 2996                    __pstringtext14 294A  
                  __pstringtext31 29D9                    __pstringtext23 299E                    __pstringtext15 2956  
                  __pstringtext40 29FB                    __pstringtext32 29DF                    __pstringtext24 29A6  
                  __pstringtext16 2961                    __pstringtext41 29FE                    __pstringtext33 29E3  
                  __pstringtext25 29AE                    __pstringtext17 296B                    __pstringtext42 2A00  
                  __pstringtext34 29E7                    __pstringtext26 29B6                    __pstringtext18 2974  
                  __pstringtext43 0000                    __pstringtext35 29EB                    __pstringtext27 29BD  
                  __pstringtext19 297D                    __pstringtext36 29EF                    __pstringtext28 29C4  
                  __pstringtext37 29F2                    __pstringtext29 29CB                    __pstringtext38 29F5  
                  __pstringtext39 29F8            __size_of_pushButtonISR 002E                       ??_menuError 0030  
                    ?_channelView 00B1                  ?_OLED_write4bits 0070                          intlevel1 0000  
                    ??_statusView 00B3                 __CFG_CLKOUTEN$OFF 0000                     ?_getNextState 0026  
                   ??_systemCheck 00B2                        _OLED_write 21BC                       ??_setSwitch 0021  
                       strncpy@cp 0075             __end_of_OLED_print_xy 23BA                      _returnToPage 23BA  
                     ??_timeSince 0028                       ??_uartReset 0020                       ??_spinInput 006A  
                    getRotDir@ret 0021                     __pstringtext1 284C                     __pstringtext2 28AD  
                   __pstringtext3 2800                     __pstringtext4 2888                     __pstringtext5 28C9  
                   __pstringtext6 28E2                     __pstringtext7 28EF                     __pstringtext8 28FC  
                   __pstringtext9 2909                     ?_getStateFunc 0026            __Umul8_16@multiplicand 0020  
                   getStateFunc@n 002C                __end_of_statusView 0A5F                          strncpy@d 0074  
                        strncpy@n 0071                          strncpy@s 0070           __end_of_uartIsDataReady 21D2  
                   ___fladd@signs 005E  __size_of_OLED_scrollDisplayRight 0004                  checkSensor@state 00ED  
                    ___fladd@aexp 005F                      ___fladd@bexp 0060        __size_of_OLED_clearDisplay 0004  
                 checkSensor@data 0034                    ??_getNextState 0028              __Umul8_16@multiplier 0028  
               __Umul8_16@product 0024  
