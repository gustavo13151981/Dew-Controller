

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 29 18:06:00 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	stringtext40,global,class=STRCODE,delta=2
    47                           	psect	stringtext41,global,class=STRCODE,delta=2
    48                           	psect	stringtext42,global,class=STRCODE,delta=2
    49                           	psect	stringtext43,global,class=STRCODE,delta=2
    50                           	psect	stringtext44,global,class=STRCODE,delta=2
    51                           	psect	stringtext45,global,class=STRCODE,delta=2
    52                           	psect	stringtext46,global,class=STRCODE,delta=2
    53                           	psect	stringtext47,global,class=STRCODE,delta=2
    54                           	psect	stringtext48,global,class=STRCODE,delta=2
    55                           	psect	stringtext49,global,class=STRCODE,delta=2
    56                           	psect	stringtext50,global,class=STRCODE,delta=2
    57                           	psect	stringtext51,global,class=STRCODE,delta=2
    58                           	psect	stringtext52,global,class=STRCODE,delta=2
    59                           	psect	cinit,global,class=CODE,merge=1,delta=2
    60                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    61                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    62                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    63                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    64                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    65                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    66                           	psect	inittext,global,class=CODE,delta=2
    67                           	psect	clrtext,global,class=CODE,delta=2
    68                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    69                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    70                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    71                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    72                           	psect	text1,local,class=CODE,merge=1,delta=2
    73                           	psect	text2,local,class=CODE,merge=1,delta=2
    74                           	psect	text3,local,class=CODE,merge=1,delta=2
    75                           	psect	text4,local,class=CODE,merge=1,delta=2
    76                           	psect	text5,local,class=CODE,merge=1,delta=2
    77                           	psect	text6,local,class=CODE,merge=1,delta=2
    78                           	psect	text7,local,class=CODE,merge=1,delta=2
    79                           	psect	text8,local,class=CODE,merge=1,delta=2
    80                           	psect	text9,local,class=CODE,merge=1,delta=2
    81                           	psect	text10,local,class=CODE,merge=1,delta=2
    82                           	psect	text11,local,class=CODE,merge=1,delta=2
    83                           	psect	text12,local,class=CODE,merge=1,delta=2
    84                           	psect	text13,local,class=CODE,merge=1,delta=2
    85                           	psect	text14,local,class=CODE,merge=1,delta=2
    86                           	psect	text15,local,class=CODE,merge=1,delta=2
    87                           	psect	text16,local,class=CODE,merge=1,delta=2
    88                           	psect	text17,local,class=CODE,merge=1,delta=2
    89                           	psect	text18,local,class=CODE,merge=1,delta=2
    90                           	psect	text19,local,class=CODE,merge=1,delta=2
    91                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    92                           	psect	text21,local,class=CODE,merge=1,delta=2
    93                           	psect	text22,local,class=CODE,merge=1,delta=2
    94                           	psect	text23,local,class=CODE,merge=1,delta=2
    95                           	psect	text24,local,class=CODE,merge=1,delta=2
    96                           	psect	text25,local,class=CODE,merge=1,delta=2
    97                           	psect	text26,local,class=CODE,merge=1,delta=2
    98                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    99                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
   100                           	psect	text29,local,class=CODE,merge=1,delta=2
   101                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
   102                           	psect	text31,local,class=CODE,merge=1,delta=2
   103                           	psect	text32,local,class=CODE,merge=1,delta=2
   104                           	psect	text33,local,class=CODE,merge=1,delta=2
   105                           	psect	text34,local,class=CODE,merge=1,delta=2
   106                           	psect	text35,local,class=CODE,merge=1,delta=2
   107                           	psect	text36,local,class=CODE,merge=1,delta=2
   108                           	psect	text37,local,class=CODE,merge=1,delta=2
   109                           	psect	text38,local,class=CODE,merge=1,delta=2
   110                           	psect	text39,local,class=CODE,merge=1,delta=2
   111                           	psect	text40,local,class=CODE,merge=1,delta=2
   112                           	psect	text41,local,class=CODE,merge=1,delta=2
   113                           	psect	text42,local,class=CODE,merge=1,delta=2
   114                           	psect	text43,local,class=CODE,merge=1,delta=2
   115                           	psect	text44,local,class=CODE,merge=1,delta=2
   116                           	psect	text45,local,class=CODE,merge=1,delta=2
   117                           	psect	text46,local,class=CODE,merge=1,delta=2
   118                           	psect	text47,local,class=CODE,merge=1,delta=2
   119                           	psect	text48,local,class=CODE,merge=1,delta=2,group=1
   120                           	psect	text49,local,class=CODE,merge=1,delta=2,group=1
   121                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
   122                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   123                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
   124                           	psect	text53,local,class=CODE,merge=1,delta=2
   125                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   126                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   127                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   128                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
   129                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
   130                           	psect	text59,local,class=CODE,merge=1,delta=2
   131                           	psect	text60,local,class=CODE,merge=1,delta=2
   132                           	psect	text61,local,class=CODE,merge=1,delta=2
   133                           	psect	text62,local,class=CODE,merge=1,delta=2
   134                           	psect	text63,local,class=CODE,merge=1,delta=2
   135                           	psect	text64,local,class=CODE,merge=1,delta=2
   136                           	psect	text65,local,class=CODE,merge=1,delta=2
   137                           	psect	text66,local,class=CODE,merge=1,delta=2
   138                           	psect	intentry,global,class=CODE,delta=2
   139                           	psect	text68,local,class=CODE,merge=1,delta=2
   140                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
   141                           	psect	text70,local,class=CODE,merge=1,delta=2
   142                           	psect	text71,local,class=CODE,merge=1,delta=2
   143                           	psect	text72,local,class=CODE,merge=1,delta=2
   144                           	psect	text73,local,class=CODE,merge=1,delta=2
   145                           	dabs	1,0xCA0,32
   146                           	dabs	1,0xC20,80
   147                           	dabs	1,0xBB3,61
   148                           	dabs	1,0x2743,0,_data
   149                           	dabs	1,0x7E,2
   150  0000                     
   151                           ; Version 2.10
   152                           ; Generated 31/07/2019 GMT
   153                           ; 
   154                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   155                           ; All rights reserved.
   156                           ; 
   157                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   158                           ; 
   159                           ; Redistribution and use in source and binary forms, with or without modification, are
   160                           ; permitted provided that the following conditions are met:
   161                           ; 
   162                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   163                           ;        conditions and the following disclaimer.
   164                           ; 
   165                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   166                           ;        of conditions and the following disclaimer in the documentation and/or other
   167                           ;        materials provided with the distribution.
   168                           ; 
   169                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   170                           ;        software without specific prior written permission.
   171                           ; 
   172                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   173                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   174                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   175                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   176                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   177                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   178                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   179                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   180                           ; 
   181                           ; 
   182                           ; Code-generator required, PIC16F15356 Definitions
   183                           ; 
   184                           ; SFR Addresses
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000D                     	;# 
   199  000E                     	;# 
   200  0010                     	;# 
   201  0012                     	;# 
   202  0013                     	;# 
   203  0014                     	;# 
   204  0016                     	;# 
   205  0018                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  009B                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  0119                     	;# 
   215  0119                     	;# 
   216  0119                     	;# 
   217  011A                     	;# 
   218  011A                     	;# 
   219  011A                     	;# 
   220  011B                     	;# 
   221  011B                     	;# 
   222  011B                     	;# 
   223  011B                     	;# 
   224  011B                     	;# 
   225  011C                     	;# 
   226  011C                     	;# 
   227  011C                     	;# 
   228  011D                     	;# 
   229  011D                     	;# 
   230  011D                     	;# 
   231  011E                     	;# 
   232  011E                     	;# 
   233  011E                     	;# 
   234  011F                     	;# 
   235  011F                     	;# 
   236  011F                     	;# 
   237  011F                     	;# 
   238  011F                     	;# 
   239  018C                     	;# 
   240  018D                     	;# 
   241  018E                     	;# 
   242  018F                     	;# 
   243  0190                     	;# 
   244  0191                     	;# 
   245  0192                     	;# 
   246  0196                     	;# 
   247  0197                     	;# 
   248  0198                     	;# 
   249  0199                     	;# 
   250  019A                     	;# 
   251  019B                     	;# 
   252  019C                     	;# 
   253  020C                     	;# 
   254  020C                     	;# 
   255  020D                     	;# 
   256  020E                     	;# 
   257  020F                     	;# 
   258  020F                     	;# 
   259  0210                     	;# 
   260  0210                     	;# 
   261  0211                     	;# 
   262  0211                     	;# 
   263  028C                     	;# 
   264  028C                     	;# 
   265  028D                     	;# 
   266  028D                     	;# 
   267  028E                     	;# 
   268  028F                     	;# 
   269  0290                     	;# 
   270  0291                     	;# 
   271  030C                     	;# 
   272  030C                     	;# 
   273  030D                     	;# 
   274  030E                     	;# 
   275  030F                     	;# 
   276  0310                     	;# 
   277  0310                     	;# 
   278  0311                     	;# 
   279  0312                     	;# 
   280  0313                     	;# 
   281  0314                     	;# 
   282  0314                     	;# 
   283  0315                     	;# 
   284  0316                     	;# 
   285  0318                     	;# 
   286  0318                     	;# 
   287  0319                     	;# 
   288  031A                     	;# 
   289  031C                     	;# 
   290  031C                     	;# 
   291  031D                     	;# 
   292  031E                     	;# 
   293  038C                     	;# 
   294  038C                     	;# 
   295  038D                     	;# 
   296  038E                     	;# 
   297  058C                     	;# 
   298  058C                     	;# 
   299  058D                     	;# 
   300  058E                     	;# 
   301  058F                     	;# 
   302  058F                     	;# 
   303  0590                     	;# 
   304  0591                     	;# 
   305  0592                     	;# 
   306  0593                     	;# 
   307  059C                     	;# 
   308  059C                     	;# 
   309  059D                     	;# 
   310  059D                     	;# 
   311  059E                     	;# 
   312  059F                     	;# 
   313  060C                     	;# 
   314  060D                     	;# 
   315  060E                     	;# 
   316  060F                     	;# 
   317  0610                     	;# 
   318  0611                     	;# 
   319  0612                     	;# 
   320  0613                     	;# 
   321  0614                     	;# 
   322  070C                     	;# 
   323  070D                     	;# 
   324  070E                     	;# 
   325  070F                     	;# 
   326  0710                     	;# 
   327  0711                     	;# 
   328  0712                     	;# 
   329  0713                     	;# 
   330  0716                     	;# 
   331  0717                     	;# 
   332  0718                     	;# 
   333  0719                     	;# 
   334  071A                     	;# 
   335  071B                     	;# 
   336  071C                     	;# 
   337  071D                     	;# 
   338  0796                     	;# 
   339  0797                     	;# 
   340  0798                     	;# 
   341  0799                     	;# 
   342  079A                     	;# 
   343  079B                     	;# 
   344  080C                     	;# 
   345  080D                     	;# 
   346  080E                     	;# 
   347  080F                     	;# 
   348  0810                     	;# 
   349  0811                     	;# 
   350  0812                     	;# 
   351  0813                     	;# 
   352  0814                     	;# 
   353  081A                     	;# 
   354  081A                     	;# 
   355  081B                     	;# 
   356  081C                     	;# 
   357  081C                     	;# 
   358  081D                     	;# 
   359  081E                     	;# 
   360  081F                     	;# 
   361  088C                     	;# 
   362  088D                     	;# 
   363  088E                     	;# 
   364  088F                     	;# 
   365  0890                     	;# 
   366  0891                     	;# 
   367  0892                     	;# 
   368  0893                     	;# 
   369  0895                     	;# 
   370  0896                     	;# 
   371  090C                     	;# 
   372  090E                     	;# 
   373  090F                     	;# 
   374  091F                     	;# 
   375  098F                     	;# 
   376  098F                     	;# 
   377  0990                     	;# 
   378  0991                     	;# 
   379  0992                     	;# 
   380  0993                     	;# 
   381  0994                     	;# 
   382  0995                     	;# 
   383  0996                     	;# 
   384  0997                     	;# 
   385  0A19                     	;# 
   386  0A19                     	;# 
   387  0A1A                     	;# 
   388  0A1A                     	;# 
   389  0A1B                     	;# 
   390  0A1B                     	;# 
   391  0A1B                     	;# 
   392  0A1C                     	;# 
   393  0A1C                     	;# 
   394  0A1D                     	;# 
   395  0A1D                     	;# 
   396  0A1E                     	;# 
   397  0A1E                     	;# 
   398  0A1F                     	;# 
   399  0A1F                     	;# 
   400  0A1F                     	;# 
   401  1E0F                     	;# 
   402  1E10                     	;# 
   403  1E11                     	;# 
   404  1E12                     	;# 
   405  1E13                     	;# 
   406  1E14                     	;# 
   407  1E15                     	;# 
   408  1E16                     	;# 
   409  1E17                     	;# 
   410  1E18                     	;# 
   411  1E19                     	;# 
   412  1E1A                     	;# 
   413  1E1B                     	;# 
   414  1E1C                     	;# 
   415  1E1D                     	;# 
   416  1E1E                     	;# 
   417  1E1F                     	;# 
   418  1E20                     	;# 
   419  1E21                     	;# 
   420  1E22                     	;# 
   421  1E23                     	;# 
   422  1E24                     	;# 
   423  1E25                     	;# 
   424  1E26                     	;# 
   425  1E27                     	;# 
   426  1E28                     	;# 
   427  1E29                     	;# 
   428  1E2A                     	;# 
   429  1E2B                     	;# 
   430  1E2C                     	;# 
   431  1E2D                     	;# 
   432  1E2E                     	;# 
   433  1E2F                     	;# 
   434  1E30                     	;# 
   435  1E31                     	;# 
   436  1E32                     	;# 
   437  1E33                     	;# 
   438  1E34                     	;# 
   439  1E35                     	;# 
   440  1E36                     	;# 
   441  1E37                     	;# 
   442  1E8F                     	;# 
   443  1E90                     	;# 
   444  1E91                     	;# 
   445  1E92                     	;# 
   446  1E93                     	;# 
   447  1E9C                     	;# 
   448  1EA1                     	;# 
   449  1EA2                     	;# 
   450  1EB1                     	;# 
   451  1EBB                     	;# 
   452  1EBC                     	;# 
   453  1EBD                     	;# 
   454  1EBE                     	;# 
   455  1EC3                     	;# 
   456  1EC5                     	;# 
   457  1EC6                     	;# 
   458  1EC7                     	;# 
   459  1EC8                     	;# 
   460  1EC9                     	;# 
   461  1ECA                     	;# 
   462  1ECB                     	;# 
   463  1ECC                     	;# 
   464  1ECD                     	;# 
   465  1ECE                     	;# 
   466  1F10                     	;# 
   467  1F11                     	;# 
   468  1F12                     	;# 
   469  1F13                     	;# 
   470  1F14                     	;# 
   471  1F15                     	;# 
   472  1F16                     	;# 
   473  1F17                     	;# 
   474  1F18                     	;# 
   475  1F19                     	;# 
   476  1F1A                     	;# 
   477  1F1B                     	;# 
   478  1F1C                     	;# 
   479  1F1D                     	;# 
   480  1F1E                     	;# 
   481  1F1F                     	;# 
   482  1F20                     	;# 
   483  1F21                     	;# 
   484  1F22                     	;# 
   485  1F23                     	;# 
   486  1F24                     	;# 
   487  1F25                     	;# 
   488  1F26                     	;# 
   489  1F27                     	;# 
   490  1F38                     	;# 
   491  1F39                     	;# 
   492  1F3A                     	;# 
   493  1F3B                     	;# 
   494  1F3C                     	;# 
   495  1F3D                     	;# 
   496  1F3E                     	;# 
   497  1F3F                     	;# 
   498  1F43                     	;# 
   499  1F44                     	;# 
   500  1F45                     	;# 
   501  1F46                     	;# 
   502  1F47                     	;# 
   503  1F48                     	;# 
   504  1F49                     	;# 
   505  1F4A                     	;# 
   506  1F4E                     	;# 
   507  1F4F                     	;# 
   508  1F50                     	;# 
   509  1F51                     	;# 
   510  1F52                     	;# 
   511  1F53                     	;# 
   512  1F54                     	;# 
   513  1F55                     	;# 
   514  1F65                     	;# 
   515  1F68                     	;# 
   516  1F69                     	;# 
   517  1F6A                     	;# 
   518  1F6B                     	;# 
   519  1FE4                     	;# 
   520  1FE5                     	;# 
   521  1FE6                     	;# 
   522  1FE7                     	;# 
   523  1FE8                     	;# 
   524  1FE8                     	;# 
   525  1FE9                     	;# 
   526  1FEA                     	;# 
   527  1FEB                     	;# 
   528  1FED                     	;# 
   529  1FEE                     	;# 
   530  1FEF                     	;# 
   531  0000                     	;# 
   532  0001                     	;# 
   533  0002                     	;# 
   534  0003                     	;# 
   535  0004                     	;# 
   536  0005                     	;# 
   537  0006                     	;# 
   538  0007                     	;# 
   539  0008                     	;# 
   540  0009                     	;# 
   541  000A                     	;# 
   542  000B                     	;# 
   543  000C                     	;# 
   544  000D                     	;# 
   545  000E                     	;# 
   546  0010                     	;# 
   547  0012                     	;# 
   548  0013                     	;# 
   549  0014                     	;# 
   550  0016                     	;# 
   551  0018                     	;# 
   552  0019                     	;# 
   553  001A                     	;# 
   554  009B                     	;# 
   555  009B                     	;# 
   556  009C                     	;# 
   557  009D                     	;# 
   558  009E                     	;# 
   559  009F                     	;# 
   560  0119                     	;# 
   561  0119                     	;# 
   562  0119                     	;# 
   563  011A                     	;# 
   564  011A                     	;# 
   565  011A                     	;# 
   566  011B                     	;# 
   567  011B                     	;# 
   568  011B                     	;# 
   569  011B                     	;# 
   570  011B                     	;# 
   571  011C                     	;# 
   572  011C                     	;# 
   573  011C                     	;# 
   574  011D                     	;# 
   575  011D                     	;# 
   576  011D                     	;# 
   577  011E                     	;# 
   578  011E                     	;# 
   579  011E                     	;# 
   580  011F                     	;# 
   581  011F                     	;# 
   582  011F                     	;# 
   583  011F                     	;# 
   584  011F                     	;# 
   585  018C                     	;# 
   586  018D                     	;# 
   587  018E                     	;# 
   588  018F                     	;# 
   589  0190                     	;# 
   590  0191                     	;# 
   591  0192                     	;# 
   592  0196                     	;# 
   593  0197                     	;# 
   594  0198                     	;# 
   595  0199                     	;# 
   596  019A                     	;# 
   597  019B                     	;# 
   598  019C                     	;# 
   599  020C                     	;# 
   600  020C                     	;# 
   601  020D                     	;# 
   602  020E                     	;# 
   603  020F                     	;# 
   604  020F                     	;# 
   605  0210                     	;# 
   606  0210                     	;# 
   607  0211                     	;# 
   608  0211                     	;# 
   609  028C                     	;# 
   610  028C                     	;# 
   611  028D                     	;# 
   612  028D                     	;# 
   613  028E                     	;# 
   614  028F                     	;# 
   615  0290                     	;# 
   616  0291                     	;# 
   617  030C                     	;# 
   618  030C                     	;# 
   619  030D                     	;# 
   620  030E                     	;# 
   621  030F                     	;# 
   622  0310                     	;# 
   623  0310                     	;# 
   624  0311                     	;# 
   625  0312                     	;# 
   626  0313                     	;# 
   627  0314                     	;# 
   628  0314                     	;# 
   629  0315                     	;# 
   630  0316                     	;# 
   631  0318                     	;# 
   632  0318                     	;# 
   633  0319                     	;# 
   634  031A                     	;# 
   635  031C                     	;# 
   636  031C                     	;# 
   637  031D                     	;# 
   638  031E                     	;# 
   639  038C                     	;# 
   640  038C                     	;# 
   641  038D                     	;# 
   642  038E                     	;# 
   643  058C                     	;# 
   644  058C                     	;# 
   645  058D                     	;# 
   646  058E                     	;# 
   647  058F                     	;# 
   648  058F                     	;# 
   649  0590                     	;# 
   650  0591                     	;# 
   651  0592                     	;# 
   652  0593                     	;# 
   653  059C                     	;# 
   654  059C                     	;# 
   655  059D                     	;# 
   656  059D                     	;# 
   657  059E                     	;# 
   658  059F                     	;# 
   659  060C                     	;# 
   660  060D                     	;# 
   661  060E                     	;# 
   662  060F                     	;# 
   663  0610                     	;# 
   664  0611                     	;# 
   665  0612                     	;# 
   666  0613                     	;# 
   667  0614                     	;# 
   668  070C                     	;# 
   669  070D                     	;# 
   670  070E                     	;# 
   671  070F                     	;# 
   672  0710                     	;# 
   673  0711                     	;# 
   674  0712                     	;# 
   675  0713                     	;# 
   676  0716                     	;# 
   677  0717                     	;# 
   678  0718                     	;# 
   679  0719                     	;# 
   680  071A                     	;# 
   681  071B                     	;# 
   682  071C                     	;# 
   683  071D                     	;# 
   684  0796                     	;# 
   685  0797                     	;# 
   686  0798                     	;# 
   687  0799                     	;# 
   688  079A                     	;# 
   689  079B                     	;# 
   690  080C                     	;# 
   691  080D                     	;# 
   692  080E                     	;# 
   693  080F                     	;# 
   694  0810                     	;# 
   695  0811                     	;# 
   696  0812                     	;# 
   697  0813                     	;# 
   698  0814                     	;# 
   699  081A                     	;# 
   700  081A                     	;# 
   701  081B                     	;# 
   702  081C                     	;# 
   703  081C                     	;# 
   704  081D                     	;# 
   705  081E                     	;# 
   706  081F                     	;# 
   707  088C                     	;# 
   708  088D                     	;# 
   709  088E                     	;# 
   710  088F                     	;# 
   711  0890                     	;# 
   712  0891                     	;# 
   713  0892                     	;# 
   714  0893                     	;# 
   715  0895                     	;# 
   716  0896                     	;# 
   717  090C                     	;# 
   718  090E                     	;# 
   719  090F                     	;# 
   720  091F                     	;# 
   721  098F                     	;# 
   722  098F                     	;# 
   723  0990                     	;# 
   724  0991                     	;# 
   725  0992                     	;# 
   726  0993                     	;# 
   727  0994                     	;# 
   728  0995                     	;# 
   729  0996                     	;# 
   730  0997                     	;# 
   731  0A19                     	;# 
   732  0A19                     	;# 
   733  0A1A                     	;# 
   734  0A1A                     	;# 
   735  0A1B                     	;# 
   736  0A1B                     	;# 
   737  0A1B                     	;# 
   738  0A1C                     	;# 
   739  0A1C                     	;# 
   740  0A1D                     	;# 
   741  0A1D                     	;# 
   742  0A1E                     	;# 
   743  0A1E                     	;# 
   744  0A1F                     	;# 
   745  0A1F                     	;# 
   746  0A1F                     	;# 
   747  1E0F                     	;# 
   748  1E10                     	;# 
   749  1E11                     	;# 
   750  1E12                     	;# 
   751  1E13                     	;# 
   752  1E14                     	;# 
   753  1E15                     	;# 
   754  1E16                     	;# 
   755  1E17                     	;# 
   756  1E18                     	;# 
   757  1E19                     	;# 
   758  1E1A                     	;# 
   759  1E1B                     	;# 
   760  1E1C                     	;# 
   761  1E1D                     	;# 
   762  1E1E                     	;# 
   763  1E1F                     	;# 
   764  1E20                     	;# 
   765  1E21                     	;# 
   766  1E22                     	;# 
   767  1E23                     	;# 
   768  1E24                     	;# 
   769  1E25                     	;# 
   770  1E26                     	;# 
   771  1E27                     	;# 
   772  1E28                     	;# 
   773  1E29                     	;# 
   774  1E2A                     	;# 
   775  1E2B                     	;# 
   776  1E2C                     	;# 
   777  1E2D                     	;# 
   778  1E2E                     	;# 
   779  1E2F                     	;# 
   780  1E30                     	;# 
   781  1E31                     	;# 
   782  1E32                     	;# 
   783  1E33                     	;# 
   784  1E34                     	;# 
   785  1E35                     	;# 
   786  1E36                     	;# 
   787  1E37                     	;# 
   788  1E8F                     	;# 
   789  1E90                     	;# 
   790  1E91                     	;# 
   791  1E92                     	;# 
   792  1E93                     	;# 
   793  1E9C                     	;# 
   794  1EA1                     	;# 
   795  1EA2                     	;# 
   796  1EB1                     	;# 
   797  1EBB                     	;# 
   798  1EBC                     	;# 
   799  1EBD                     	;# 
   800  1EBE                     	;# 
   801  1EC3                     	;# 
   802  1EC5                     	;# 
   803  1EC6                     	;# 
   804  1EC7                     	;# 
   805  1EC8                     	;# 
   806  1EC9                     	;# 
   807  1ECA                     	;# 
   808  1ECB                     	;# 
   809  1ECC                     	;# 
   810  1ECD                     	;# 
   811  1ECE                     	;# 
   812  1F10                     	;# 
   813  1F11                     	;# 
   814  1F12                     	;# 
   815  1F13                     	;# 
   816  1F14                     	;# 
   817  1F15                     	;# 
   818  1F16                     	;# 
   819  1F17                     	;# 
   820  1F18                     	;# 
   821  1F19                     	;# 
   822  1F1A                     	;# 
   823  1F1B                     	;# 
   824  1F1C                     	;# 
   825  1F1D                     	;# 
   826  1F1E                     	;# 
   827  1F1F                     	;# 
   828  1F20                     	;# 
   829  1F21                     	;# 
   830  1F22                     	;# 
   831  1F23                     	;# 
   832  1F24                     	;# 
   833  1F25                     	;# 
   834  1F26                     	;# 
   835  1F27                     	;# 
   836  1F38                     	;# 
   837  1F39                     	;# 
   838  1F3A                     	;# 
   839  1F3B                     	;# 
   840  1F3C                     	;# 
   841  1F3D                     	;# 
   842  1F3E                     	;# 
   843  1F3F                     	;# 
   844  1F43                     	;# 
   845  1F44                     	;# 
   846  1F45                     	;# 
   847  1F46                     	;# 
   848  1F47                     	;# 
   849  1F48                     	;# 
   850  1F49                     	;# 
   851  1F4A                     	;# 
   852  1F4E                     	;# 
   853  1F4F                     	;# 
   854  1F50                     	;# 
   855  1F51                     	;# 
   856  1F52                     	;# 
   857  1F53                     	;# 
   858  1F54                     	;# 
   859  1F55                     	;# 
   860  1F65                     	;# 
   861  1F68                     	;# 
   862  1F69                     	;# 
   863  1F6A                     	;# 
   864  1F6B                     	;# 
   865  1FE4                     	;# 
   866  1FE5                     	;# 
   867  1FE6                     	;# 
   868  1FE7                     	;# 
   869  1FE8                     	;# 
   870  1FE8                     	;# 
   871  1FE9                     	;# 
   872  1FEA                     	;# 
   873  1FEB                     	;# 
   874  1FED                     	;# 
   875  1FEE                     	;# 
   876  1FEF                     	;# 
   877  0000                     	;# 
   878  0001                     	;# 
   879  0002                     	;# 
   880  0003                     	;# 
   881  0004                     	;# 
   882  0005                     	;# 
   883  0006                     	;# 
   884  0007                     	;# 
   885  0008                     	;# 
   886  0009                     	;# 
   887  000A                     	;# 
   888  000B                     	;# 
   889  000C                     	;# 
   890  000D                     	;# 
   891  000E                     	;# 
   892  0010                     	;# 
   893  0012                     	;# 
   894  0013                     	;# 
   895  0014                     	;# 
   896  0016                     	;# 
   897  0018                     	;# 
   898  0019                     	;# 
   899  001A                     	;# 
   900  009B                     	;# 
   901  009B                     	;# 
   902  009C                     	;# 
   903  009D                     	;# 
   904  009E                     	;# 
   905  009F                     	;# 
   906  0119                     	;# 
   907  0119                     	;# 
   908  0119                     	;# 
   909  011A                     	;# 
   910  011A                     	;# 
   911  011A                     	;# 
   912  011B                     	;# 
   913  011B                     	;# 
   914  011B                     	;# 
   915  011B                     	;# 
   916  011B                     	;# 
   917  011C                     	;# 
   918  011C                     	;# 
   919  011C                     	;# 
   920  011D                     	;# 
   921  011D                     	;# 
   922  011D                     	;# 
   923  011E                     	;# 
   924  011E                     	;# 
   925  011E                     	;# 
   926  011F                     	;# 
   927  011F                     	;# 
   928  011F                     	;# 
   929  011F                     	;# 
   930  011F                     	;# 
   931  018C                     	;# 
   932  018D                     	;# 
   933  018E                     	;# 
   934  018F                     	;# 
   935  0190                     	;# 
   936  0191                     	;# 
   937  0192                     	;# 
   938  0196                     	;# 
   939  0197                     	;# 
   940  0198                     	;# 
   941  0199                     	;# 
   942  019A                     	;# 
   943  019B                     	;# 
   944  019C                     	;# 
   945  020C                     	;# 
   946  020C                     	;# 
   947  020D                     	;# 
   948  020E                     	;# 
   949  020F                     	;# 
   950  020F                     	;# 
   951  0210                     	;# 
   952  0210                     	;# 
   953  0211                     	;# 
   954  0211                     	;# 
   955  028C                     	;# 
   956  028C                     	;# 
   957  028D                     	;# 
   958  028D                     	;# 
   959  028E                     	;# 
   960  028F                     	;# 
   961  0290                     	;# 
   962  0291                     	;# 
   963  030C                     	;# 
   964  030C                     	;# 
   965  030D                     	;# 
   966  030E                     	;# 
   967  030F                     	;# 
   968  0310                     	;# 
   969  0310                     	;# 
   970  0311                     	;# 
   971  0312                     	;# 
   972  0313                     	;# 
   973  0314                     	;# 
   974  0314                     	;# 
   975  0315                     	;# 
   976  0316                     	;# 
   977  0318                     	;# 
   978  0318                     	;# 
   979  0319                     	;# 
   980  031A                     	;# 
   981  031C                     	;# 
   982  031C                     	;# 
   983  031D                     	;# 
   984  031E                     	;# 
   985  038C                     	;# 
   986  038C                     	;# 
   987  038D                     	;# 
   988  038E                     	;# 
   989  058C                     	;# 
   990  058C                     	;# 
   991  058D                     	;# 
   992  058E                     	;# 
   993  058F                     	;# 
   994  058F                     	;# 
   995  0590                     	;# 
   996  0591                     	;# 
   997  0592                     	;# 
   998  0593                     	;# 
   999  059C                     	;# 
  1000  059C                     	;# 
  1001  059D                     	;# 
  1002  059D                     	;# 
  1003  059E                     	;# 
  1004  059F                     	;# 
  1005  060C                     	;# 
  1006  060D                     	;# 
  1007  060E                     	;# 
  1008  060F                     	;# 
  1009  0610                     	;# 
  1010  0611                     	;# 
  1011  0612                     	;# 
  1012  0613                     	;# 
  1013  0614                     	;# 
  1014  070C                     	;# 
  1015  070D                     	;# 
  1016  070E                     	;# 
  1017  070F                     	;# 
  1018  0710                     	;# 
  1019  0711                     	;# 
  1020  0712                     	;# 
  1021  0713                     	;# 
  1022  0716                     	;# 
  1023  0717                     	;# 
  1024  0718                     	;# 
  1025  0719                     	;# 
  1026  071A                     	;# 
  1027  071B                     	;# 
  1028  071C                     	;# 
  1029  071D                     	;# 
  1030  0796                     	;# 
  1031  0797                     	;# 
  1032  0798                     	;# 
  1033  0799                     	;# 
  1034  079A                     	;# 
  1035  079B                     	;# 
  1036  080C                     	;# 
  1037  080D                     	;# 
  1038  080E                     	;# 
  1039  080F                     	;# 
  1040  0810                     	;# 
  1041  0811                     	;# 
  1042  0812                     	;# 
  1043  0813                     	;# 
  1044  0814                     	;# 
  1045  081A                     	;# 
  1046  081A                     	;# 
  1047  081B                     	;# 
  1048  081C                     	;# 
  1049  081C                     	;# 
  1050  081D                     	;# 
  1051  081E                     	;# 
  1052  081F                     	;# 
  1053  088C                     	;# 
  1054  088D                     	;# 
  1055  088E                     	;# 
  1056  088F                     	;# 
  1057  0890                     	;# 
  1058  0891                     	;# 
  1059  0892                     	;# 
  1060  0893                     	;# 
  1061  0895                     	;# 
  1062  0896                     	;# 
  1063  090C                     	;# 
  1064  090E                     	;# 
  1065  090F                     	;# 
  1066  091F                     	;# 
  1067  098F                     	;# 
  1068  098F                     	;# 
  1069  0990                     	;# 
  1070  0991                     	;# 
  1071  0992                     	;# 
  1072  0993                     	;# 
  1073  0994                     	;# 
  1074  0995                     	;# 
  1075  0996                     	;# 
  1076  0997                     	;# 
  1077  0A19                     	;# 
  1078  0A19                     	;# 
  1079  0A1A                     	;# 
  1080  0A1A                     	;# 
  1081  0A1B                     	;# 
  1082  0A1B                     	;# 
  1083  0A1B                     	;# 
  1084  0A1C                     	;# 
  1085  0A1C                     	;# 
  1086  0A1D                     	;# 
  1087  0A1D                     	;# 
  1088  0A1E                     	;# 
  1089  0A1E                     	;# 
  1090  0A1F                     	;# 
  1091  0A1F                     	;# 
  1092  0A1F                     	;# 
  1093  1E0F                     	;# 
  1094  1E10                     	;# 
  1095  1E11                     	;# 
  1096  1E12                     	;# 
  1097  1E13                     	;# 
  1098  1E14                     	;# 
  1099  1E15                     	;# 
  1100  1E16                     	;# 
  1101  1E17                     	;# 
  1102  1E18                     	;# 
  1103  1E19                     	;# 
  1104  1E1A                     	;# 
  1105  1E1B                     	;# 
  1106  1E1C                     	;# 
  1107  1E1D                     	;# 
  1108  1E1E                     	;# 
  1109  1E1F                     	;# 
  1110  1E20                     	;# 
  1111  1E21                     	;# 
  1112  1E22                     	;# 
  1113  1E23                     	;# 
  1114  1E24                     	;# 
  1115  1E25                     	;# 
  1116  1E26                     	;# 
  1117  1E27                     	;# 
  1118  1E28                     	;# 
  1119  1E29                     	;# 
  1120  1E2A                     	;# 
  1121  1E2B                     	;# 
  1122  1E2C                     	;# 
  1123  1E2D                     	;# 
  1124  1E2E                     	;# 
  1125  1E2F                     	;# 
  1126  1E30                     	;# 
  1127  1E31                     	;# 
  1128  1E32                     	;# 
  1129  1E33                     	;# 
  1130  1E34                     	;# 
  1131  1E35                     	;# 
  1132  1E36                     	;# 
  1133  1E37                     	;# 
  1134  1E8F                     	;# 
  1135  1E90                     	;# 
  1136  1E91                     	;# 
  1137  1E92                     	;# 
  1138  1E93                     	;# 
  1139  1E9C                     	;# 
  1140  1EA1                     	;# 
  1141  1EA2                     	;# 
  1142  1EB1                     	;# 
  1143  1EBB                     	;# 
  1144  1EBC                     	;# 
  1145  1EBD                     	;# 
  1146  1EBE                     	;# 
  1147  1EC3                     	;# 
  1148  1EC5                     	;# 
  1149  1EC6                     	;# 
  1150  1EC7                     	;# 
  1151  1EC8                     	;# 
  1152  1EC9                     	;# 
  1153  1ECA                     	;# 
  1154  1ECB                     	;# 
  1155  1ECC                     	;# 
  1156  1ECD                     	;# 
  1157  1ECE                     	;# 
  1158  1F10                     	;# 
  1159  1F11                     	;# 
  1160  1F12                     	;# 
  1161  1F13                     	;# 
  1162  1F14                     	;# 
  1163  1F15                     	;# 
  1164  1F16                     	;# 
  1165  1F17                     	;# 
  1166  1F18                     	;# 
  1167  1F19                     	;# 
  1168  1F1A                     	;# 
  1169  1F1B                     	;# 
  1170  1F1C                     	;# 
  1171  1F1D                     	;# 
  1172  1F1E                     	;# 
  1173  1F1F                     	;# 
  1174  1F20                     	;# 
  1175  1F21                     	;# 
  1176  1F22                     	;# 
  1177  1F23                     	;# 
  1178  1F24                     	;# 
  1179  1F25                     	;# 
  1180  1F26                     	;# 
  1181  1F27                     	;# 
  1182  1F38                     	;# 
  1183  1F39                     	;# 
  1184  1F3A                     	;# 
  1185  1F3B                     	;# 
  1186  1F3C                     	;# 
  1187  1F3D                     	;# 
  1188  1F3E                     	;# 
  1189  1F3F                     	;# 
  1190  1F43                     	;# 
  1191  1F44                     	;# 
  1192  1F45                     	;# 
  1193  1F46                     	;# 
  1194  1F47                     	;# 
  1195  1F48                     	;# 
  1196  1F49                     	;# 
  1197  1F4A                     	;# 
  1198  1F4E                     	;# 
  1199  1F4F                     	;# 
  1200  1F50                     	;# 
  1201  1F51                     	;# 
  1202  1F52                     	;# 
  1203  1F53                     	;# 
  1204  1F54                     	;# 
  1205  1F55                     	;# 
  1206  1F65                     	;# 
  1207  1F68                     	;# 
  1208  1F69                     	;# 
  1209  1F6A                     	;# 
  1210  1F6B                     	;# 
  1211  1FE4                     	;# 
  1212  1FE5                     	;# 
  1213  1FE6                     	;# 
  1214  1FE7                     	;# 
  1215  1FE8                     	;# 
  1216  1FE8                     	;# 
  1217  1FE9                     	;# 
  1218  1FEA                     	;# 
  1219  1FEB                     	;# 
  1220  1FED                     	;# 
  1221  1FEE                     	;# 
  1222  1FEF                     	;# 
  1223  0000                     	;# 
  1224  0001                     	;# 
  1225  0002                     	;# 
  1226  0003                     	;# 
  1227  0004                     	;# 
  1228  0005                     	;# 
  1229  0006                     	;# 
  1230  0007                     	;# 
  1231  0008                     	;# 
  1232  0009                     	;# 
  1233  000A                     	;# 
  1234  000B                     	;# 
  1235  000C                     	;# 
  1236  000D                     	;# 
  1237  000E                     	;# 
  1238  0010                     	;# 
  1239  0012                     	;# 
  1240  0013                     	;# 
  1241  0014                     	;# 
  1242  0016                     	;# 
  1243  0018                     	;# 
  1244  0019                     	;# 
  1245  001A                     	;# 
  1246  009B                     	;# 
  1247  009B                     	;# 
  1248  009C                     	;# 
  1249  009D                     	;# 
  1250  009E                     	;# 
  1251  009F                     	;# 
  1252  0119                     	;# 
  1253  0119                     	;# 
  1254  0119                     	;# 
  1255  011A                     	;# 
  1256  011A                     	;# 
  1257  011A                     	;# 
  1258  011B                     	;# 
  1259  011B                     	;# 
  1260  011B                     	;# 
  1261  011B                     	;# 
  1262  011B                     	;# 
  1263  011C                     	;# 
  1264  011C                     	;# 
  1265  011C                     	;# 
  1266  011D                     	;# 
  1267  011D                     	;# 
  1268  011D                     	;# 
  1269  011E                     	;# 
  1270  011E                     	;# 
  1271  011E                     	;# 
  1272  011F                     	;# 
  1273  011F                     	;# 
  1274  011F                     	;# 
  1275  011F                     	;# 
  1276  011F                     	;# 
  1277  018C                     	;# 
  1278  018D                     	;# 
  1279  018E                     	;# 
  1280  018F                     	;# 
  1281  0190                     	;# 
  1282  0191                     	;# 
  1283  0192                     	;# 
  1284  0196                     	;# 
  1285  0197                     	;# 
  1286  0198                     	;# 
  1287  0199                     	;# 
  1288  019A                     	;# 
  1289  019B                     	;# 
  1290  019C                     	;# 
  1291  020C                     	;# 
  1292  020C                     	;# 
  1293  020D                     	;# 
  1294  020E                     	;# 
  1295  020F                     	;# 
  1296  020F                     	;# 
  1297  0210                     	;# 
  1298  0210                     	;# 
  1299  0211                     	;# 
  1300  0211                     	;# 
  1301  028C                     	;# 
  1302  028C                     	;# 
  1303  028D                     	;# 
  1304  028D                     	;# 
  1305  028E                     	;# 
  1306  028F                     	;# 
  1307  0290                     	;# 
  1308  0291                     	;# 
  1309  030C                     	;# 
  1310  030C                     	;# 
  1311  030D                     	;# 
  1312  030E                     	;# 
  1313  030F                     	;# 
  1314  0310                     	;# 
  1315  0310                     	;# 
  1316  0311                     	;# 
  1317  0312                     	;# 
  1318  0313                     	;# 
  1319  0314                     	;# 
  1320  0314                     	;# 
  1321  0315                     	;# 
  1322  0316                     	;# 
  1323  0318                     	;# 
  1324  0318                     	;# 
  1325  0319                     	;# 
  1326  031A                     	;# 
  1327  031C                     	;# 
  1328  031C                     	;# 
  1329  031D                     	;# 
  1330  031E                     	;# 
  1331  038C                     	;# 
  1332  038C                     	;# 
  1333  038D                     	;# 
  1334  038E                     	;# 
  1335  058C                     	;# 
  1336  058C                     	;# 
  1337  058D                     	;# 
  1338  058E                     	;# 
  1339  058F                     	;# 
  1340  058F                     	;# 
  1341  0590                     	;# 
  1342  0591                     	;# 
  1343  0592                     	;# 
  1344  0593                     	;# 
  1345  059C                     	;# 
  1346  059C                     	;# 
  1347  059D                     	;# 
  1348  059D                     	;# 
  1349  059E                     	;# 
  1350  059F                     	;# 
  1351  060C                     	;# 
  1352  060D                     	;# 
  1353  060E                     	;# 
  1354  060F                     	;# 
  1355  0610                     	;# 
  1356  0611                     	;# 
  1357  0612                     	;# 
  1358  0613                     	;# 
  1359  0614                     	;# 
  1360  070C                     	;# 
  1361  070D                     	;# 
  1362  070E                     	;# 
  1363  070F                     	;# 
  1364  0710                     	;# 
  1365  0711                     	;# 
  1366  0712                     	;# 
  1367  0713                     	;# 
  1368  0716                     	;# 
  1369  0717                     	;# 
  1370  0718                     	;# 
  1371  0719                     	;# 
  1372  071A                     	;# 
  1373  071B                     	;# 
  1374  071C                     	;# 
  1375  071D                     	;# 
  1376  0796                     	;# 
  1377  0797                     	;# 
  1378  0798                     	;# 
  1379  0799                     	;# 
  1380  079A                     	;# 
  1381  079B                     	;# 
  1382  080C                     	;# 
  1383  080D                     	;# 
  1384  080E                     	;# 
  1385  080F                     	;# 
  1386  0810                     	;# 
  1387  0811                     	;# 
  1388  0812                     	;# 
  1389  0813                     	;# 
  1390  0814                     	;# 
  1391  081A                     	;# 
  1392  081A                     	;# 
  1393  081B                     	;# 
  1394  081C                     	;# 
  1395  081C                     	;# 
  1396  081D                     	;# 
  1397  081E                     	;# 
  1398  081F                     	;# 
  1399  088C                     	;# 
  1400  088D                     	;# 
  1401  088E                     	;# 
  1402  088F                     	;# 
  1403  0890                     	;# 
  1404  0891                     	;# 
  1405  0892                     	;# 
  1406  0893                     	;# 
  1407  0895                     	;# 
  1408  0896                     	;# 
  1409  090C                     	;# 
  1410  090E                     	;# 
  1411  090F                     	;# 
  1412  091F                     	;# 
  1413  098F                     	;# 
  1414  098F                     	;# 
  1415  0990                     	;# 
  1416  0991                     	;# 
  1417  0992                     	;# 
  1418  0993                     	;# 
  1419  0994                     	;# 
  1420  0995                     	;# 
  1421  0996                     	;# 
  1422  0997                     	;# 
  1423  0A19                     	;# 
  1424  0A19                     	;# 
  1425  0A1A                     	;# 
  1426  0A1A                     	;# 
  1427  0A1B                     	;# 
  1428  0A1B                     	;# 
  1429  0A1B                     	;# 
  1430  0A1C                     	;# 
  1431  0A1C                     	;# 
  1432  0A1D                     	;# 
  1433  0A1D                     	;# 
  1434  0A1E                     	;# 
  1435  0A1E                     	;# 
  1436  0A1F                     	;# 
  1437  0A1F                     	;# 
  1438  0A1F                     	;# 
  1439  1E0F                     	;# 
  1440  1E10                     	;# 
  1441  1E11                     	;# 
  1442  1E12                     	;# 
  1443  1E13                     	;# 
  1444  1E14                     	;# 
  1445  1E15                     	;# 
  1446  1E16                     	;# 
  1447  1E17                     	;# 
  1448  1E18                     	;# 
  1449  1E19                     	;# 
  1450  1E1A                     	;# 
  1451  1E1B                     	;# 
  1452  1E1C                     	;# 
  1453  1E1D                     	;# 
  1454  1E1E                     	;# 
  1455  1E1F                     	;# 
  1456  1E20                     	;# 
  1457  1E21                     	;# 
  1458  1E22                     	;# 
  1459  1E23                     	;# 
  1460  1E24                     	;# 
  1461  1E25                     	;# 
  1462  1E26                     	;# 
  1463  1E27                     	;# 
  1464  1E28                     	;# 
  1465  1E29                     	;# 
  1466  1E2A                     	;# 
  1467  1E2B                     	;# 
  1468  1E2C                     	;# 
  1469  1E2D                     	;# 
  1470  1E2E                     	;# 
  1471  1E2F                     	;# 
  1472  1E30                     	;# 
  1473  1E31                     	;# 
  1474  1E32                     	;# 
  1475  1E33                     	;# 
  1476  1E34                     	;# 
  1477  1E35                     	;# 
  1478  1E36                     	;# 
  1479  1E37                     	;# 
  1480  1E8F                     	;# 
  1481  1E90                     	;# 
  1482  1E91                     	;# 
  1483  1E92                     	;# 
  1484  1E93                     	;# 
  1485  1E9C                     	;# 
  1486  1EA1                     	;# 
  1487  1EA2                     	;# 
  1488  1EB1                     	;# 
  1489  1EBB                     	;# 
  1490  1EBC                     	;# 
  1491  1EBD                     	;# 
  1492  1EBE                     	;# 
  1493  1EC3                     	;# 
  1494  1EC5                     	;# 
  1495  1EC6                     	;# 
  1496  1EC7                     	;# 
  1497  1EC8                     	;# 
  1498  1EC9                     	;# 
  1499  1ECA                     	;# 
  1500  1ECB                     	;# 
  1501  1ECC                     	;# 
  1502  1ECD                     	;# 
  1503  1ECE                     	;# 
  1504  1F10                     	;# 
  1505  1F11                     	;# 
  1506  1F12                     	;# 
  1507  1F13                     	;# 
  1508  1F14                     	;# 
  1509  1F15                     	;# 
  1510  1F16                     	;# 
  1511  1F17                     	;# 
  1512  1F18                     	;# 
  1513  1F19                     	;# 
  1514  1F1A                     	;# 
  1515  1F1B                     	;# 
  1516  1F1C                     	;# 
  1517  1F1D                     	;# 
  1518  1F1E                     	;# 
  1519  1F1F                     	;# 
  1520  1F20                     	;# 
  1521  1F21                     	;# 
  1522  1F22                     	;# 
  1523  1F23                     	;# 
  1524  1F24                     	;# 
  1525  1F25                     	;# 
  1526  1F26                     	;# 
  1527  1F27                     	;# 
  1528  1F38                     	;# 
  1529  1F39                     	;# 
  1530  1F3A                     	;# 
  1531  1F3B                     	;# 
  1532  1F3C                     	;# 
  1533  1F3D                     	;# 
  1534  1F3E                     	;# 
  1535  1F3F                     	;# 
  1536  1F43                     	;# 
  1537  1F44                     	;# 
  1538  1F45                     	;# 
  1539  1F46                     	;# 
  1540  1F47                     	;# 
  1541  1F48                     	;# 
  1542  1F49                     	;# 
  1543  1F4A                     	;# 
  1544  1F4E                     	;# 
  1545  1F4F                     	;# 
  1546  1F50                     	;# 
  1547  1F51                     	;# 
  1548  1F52                     	;# 
  1549  1F53                     	;# 
  1550  1F54                     	;# 
  1551  1F55                     	;# 
  1552  1F65                     	;# 
  1553  1F68                     	;# 
  1554  1F69                     	;# 
  1555  1F6A                     	;# 
  1556  1F6B                     	;# 
  1557  1FE4                     	;# 
  1558  1FE5                     	;# 
  1559  1FE6                     	;# 
  1560  1FE7                     	;# 
  1561  1FE8                     	;# 
  1562  1FE8                     	;# 
  1563  1FE9                     	;# 
  1564  1FEA                     	;# 
  1565  1FEB                     	;# 
  1566  1FED                     	;# 
  1567  1FEE                     	;# 
  1568  1FEF                     	;# 
  1569  0000                     	;# 
  1570  0001                     	;# 
  1571  0002                     	;# 
  1572  0003                     	;# 
  1573  0004                     	;# 
  1574  0005                     	;# 
  1575  0006                     	;# 
  1576  0007                     	;# 
  1577  0008                     	;# 
  1578  0009                     	;# 
  1579  000A                     	;# 
  1580  000B                     	;# 
  1581  000C                     	;# 
  1582  000D                     	;# 
  1583  000E                     	;# 
  1584  0010                     	;# 
  1585  0012                     	;# 
  1586  0013                     	;# 
  1587  0014                     	;# 
  1588  0016                     	;# 
  1589  0018                     	;# 
  1590  0019                     	;# 
  1591  001A                     	;# 
  1592  009B                     	;# 
  1593  009B                     	;# 
  1594  009C                     	;# 
  1595  009D                     	;# 
  1596  009E                     	;# 
  1597  009F                     	;# 
  1598  0119                     	;# 
  1599  0119                     	;# 
  1600  0119                     	;# 
  1601  011A                     	;# 
  1602  011A                     	;# 
  1603  011A                     	;# 
  1604  011B                     	;# 
  1605  011B                     	;# 
  1606  011B                     	;# 
  1607  011B                     	;# 
  1608  011B                     	;# 
  1609  011C                     	;# 
  1610  011C                     	;# 
  1611  011C                     	;# 
  1612  011D                     	;# 
  1613  011D                     	;# 
  1614  011D                     	;# 
  1615  011E                     	;# 
  1616  011E                     	;# 
  1617  011E                     	;# 
  1618  011F                     	;# 
  1619  011F                     	;# 
  1620  011F                     	;# 
  1621  011F                     	;# 
  1622  011F                     	;# 
  1623  018C                     	;# 
  1624  018D                     	;# 
  1625  018E                     	;# 
  1626  018F                     	;# 
  1627  0190                     	;# 
  1628  0191                     	;# 
  1629  0192                     	;# 
  1630  0196                     	;# 
  1631  0197                     	;# 
  1632  0198                     	;# 
  1633  0199                     	;# 
  1634  019A                     	;# 
  1635  019B                     	;# 
  1636  019C                     	;# 
  1637  020C                     	;# 
  1638  020C                     	;# 
  1639  020D                     	;# 
  1640  020E                     	;# 
  1641  020F                     	;# 
  1642  020F                     	;# 
  1643  0210                     	;# 
  1644  0210                     	;# 
  1645  0211                     	;# 
  1646  0211                     	;# 
  1647  028C                     	;# 
  1648  028C                     	;# 
  1649  028D                     	;# 
  1650  028D                     	;# 
  1651  028E                     	;# 
  1652  028F                     	;# 
  1653  0290                     	;# 
  1654  0291                     	;# 
  1655  030C                     	;# 
  1656  030C                     	;# 
  1657  030D                     	;# 
  1658  030E                     	;# 
  1659  030F                     	;# 
  1660  0310                     	;# 
  1661  0310                     	;# 
  1662  0311                     	;# 
  1663  0312                     	;# 
  1664  0313                     	;# 
  1665  0314                     	;# 
  1666  0314                     	;# 
  1667  0315                     	;# 
  1668  0316                     	;# 
  1669  0318                     	;# 
  1670  0318                     	;# 
  1671  0319                     	;# 
  1672  031A                     	;# 
  1673  031C                     	;# 
  1674  031C                     	;# 
  1675  031D                     	;# 
  1676  031E                     	;# 
  1677  038C                     	;# 
  1678  038C                     	;# 
  1679  038D                     	;# 
  1680  038E                     	;# 
  1681  058C                     	;# 
  1682  058C                     	;# 
  1683  058D                     	;# 
  1684  058E                     	;# 
  1685  058F                     	;# 
  1686  058F                     	;# 
  1687  0590                     	;# 
  1688  0591                     	;# 
  1689  0592                     	;# 
  1690  0593                     	;# 
  1691  059C                     	;# 
  1692  059C                     	;# 
  1693  059D                     	;# 
  1694  059D                     	;# 
  1695  059E                     	;# 
  1696  059F                     	;# 
  1697  060C                     	;# 
  1698  060D                     	;# 
  1699  060E                     	;# 
  1700  060F                     	;# 
  1701  0610                     	;# 
  1702  0611                     	;# 
  1703  0612                     	;# 
  1704  0613                     	;# 
  1705  0614                     	;# 
  1706  070C                     	;# 
  1707  070D                     	;# 
  1708  070E                     	;# 
  1709  070F                     	;# 
  1710  0710                     	;# 
  1711  0711                     	;# 
  1712  0712                     	;# 
  1713  0713                     	;# 
  1714  0716                     	;# 
  1715  0717                     	;# 
  1716  0718                     	;# 
  1717  0719                     	;# 
  1718  071A                     	;# 
  1719  071B                     	;# 
  1720  071C                     	;# 
  1721  071D                     	;# 
  1722  0796                     	;# 
  1723  0797                     	;# 
  1724  0798                     	;# 
  1725  0799                     	;# 
  1726  079A                     	;# 
  1727  079B                     	;# 
  1728  080C                     	;# 
  1729  080D                     	;# 
  1730  080E                     	;# 
  1731  080F                     	;# 
  1732  0810                     	;# 
  1733  0811                     	;# 
  1734  0812                     	;# 
  1735  0813                     	;# 
  1736  0814                     	;# 
  1737  081A                     	;# 
  1738  081A                     	;# 
  1739  081B                     	;# 
  1740  081C                     	;# 
  1741  081C                     	;# 
  1742  081D                     	;# 
  1743  081E                     	;# 
  1744  081F                     	;# 
  1745  088C                     	;# 
  1746  088D                     	;# 
  1747  088E                     	;# 
  1748  088F                     	;# 
  1749  0890                     	;# 
  1750  0891                     	;# 
  1751  0892                     	;# 
  1752  0893                     	;# 
  1753  0895                     	;# 
  1754  0896                     	;# 
  1755  090C                     	;# 
  1756  090E                     	;# 
  1757  090F                     	;# 
  1758  091F                     	;# 
  1759  098F                     	;# 
  1760  098F                     	;# 
  1761  0990                     	;# 
  1762  0991                     	;# 
  1763  0992                     	;# 
  1764  0993                     	;# 
  1765  0994                     	;# 
  1766  0995                     	;# 
  1767  0996                     	;# 
  1768  0997                     	;# 
  1769  0A19                     	;# 
  1770  0A19                     	;# 
  1771  0A1A                     	;# 
  1772  0A1A                     	;# 
  1773  0A1B                     	;# 
  1774  0A1B                     	;# 
  1775  0A1B                     	;# 
  1776  0A1C                     	;# 
  1777  0A1C                     	;# 
  1778  0A1D                     	;# 
  1779  0A1D                     	;# 
  1780  0A1E                     	;# 
  1781  0A1E                     	;# 
  1782  0A1F                     	;# 
  1783  0A1F                     	;# 
  1784  0A1F                     	;# 
  1785  1E0F                     	;# 
  1786  1E10                     	;# 
  1787  1E11                     	;# 
  1788  1E12                     	;# 
  1789  1E13                     	;# 
  1790  1E14                     	;# 
  1791  1E15                     	;# 
  1792  1E16                     	;# 
  1793  1E17                     	;# 
  1794  1E18                     	;# 
  1795  1E19                     	;# 
  1796  1E1A                     	;# 
  1797  1E1B                     	;# 
  1798  1E1C                     	;# 
  1799  1E1D                     	;# 
  1800  1E1E                     	;# 
  1801  1E1F                     	;# 
  1802  1E20                     	;# 
  1803  1E21                     	;# 
  1804  1E22                     	;# 
  1805  1E23                     	;# 
  1806  1E24                     	;# 
  1807  1E25                     	;# 
  1808  1E26                     	;# 
  1809  1E27                     	;# 
  1810  1E28                     	;# 
  1811  1E29                     	;# 
  1812  1E2A                     	;# 
  1813  1E2B                     	;# 
  1814  1E2C                     	;# 
  1815  1E2D                     	;# 
  1816  1E2E                     	;# 
  1817  1E2F                     	;# 
  1818  1E30                     	;# 
  1819  1E31                     	;# 
  1820  1E32                     	;# 
  1821  1E33                     	;# 
  1822  1E34                     	;# 
  1823  1E35                     	;# 
  1824  1E36                     	;# 
  1825  1E37                     	;# 
  1826  1E8F                     	;# 
  1827  1E90                     	;# 
  1828  1E91                     	;# 
  1829  1E92                     	;# 
  1830  1E93                     	;# 
  1831  1E9C                     	;# 
  1832  1EA1                     	;# 
  1833  1EA2                     	;# 
  1834  1EB1                     	;# 
  1835  1EBB                     	;# 
  1836  1EBC                     	;# 
  1837  1EBD                     	;# 
  1838  1EBE                     	;# 
  1839  1EC3                     	;# 
  1840  1EC5                     	;# 
  1841  1EC6                     	;# 
  1842  1EC7                     	;# 
  1843  1EC8                     	;# 
  1844  1EC9                     	;# 
  1845  1ECA                     	;# 
  1846  1ECB                     	;# 
  1847  1ECC                     	;# 
  1848  1ECD                     	;# 
  1849  1ECE                     	;# 
  1850  1F10                     	;# 
  1851  1F11                     	;# 
  1852  1F12                     	;# 
  1853  1F13                     	;# 
  1854  1F14                     	;# 
  1855  1F15                     	;# 
  1856  1F16                     	;# 
  1857  1F17                     	;# 
  1858  1F18                     	;# 
  1859  1F19                     	;# 
  1860  1F1A                     	;# 
  1861  1F1B                     	;# 
  1862  1F1C                     	;# 
  1863  1F1D                     	;# 
  1864  1F1E                     	;# 
  1865  1F1F                     	;# 
  1866  1F20                     	;# 
  1867  1F21                     	;# 
  1868  1F22                     	;# 
  1869  1F23                     	;# 
  1870  1F24                     	;# 
  1871  1F25                     	;# 
  1872  1F26                     	;# 
  1873  1F27                     	;# 
  1874  1F38                     	;# 
  1875  1F39                     	;# 
  1876  1F3A                     	;# 
  1877  1F3B                     	;# 
  1878  1F3C                     	;# 
  1879  1F3D                     	;# 
  1880  1F3E                     	;# 
  1881  1F3F                     	;# 
  1882  1F43                     	;# 
  1883  1F44                     	;# 
  1884  1F45                     	;# 
  1885  1F46                     	;# 
  1886  1F47                     	;# 
  1887  1F48                     	;# 
  1888  1F49                     	;# 
  1889  1F4A                     	;# 
  1890  1F4E                     	;# 
  1891  1F4F                     	;# 
  1892  1F50                     	;# 
  1893  1F51                     	;# 
  1894  1F52                     	;# 
  1895  1F53                     	;# 
  1896  1F54                     	;# 
  1897  1F55                     	;# 
  1898  1F65                     	;# 
  1899  1F68                     	;# 
  1900  1F69                     	;# 
  1901  1F6A                     	;# 
  1902  1F6B                     	;# 
  1903  1FE4                     	;# 
  1904  1FE5                     	;# 
  1905  1FE6                     	;# 
  1906  1FE7                     	;# 
  1907  1FE8                     	;# 
  1908  1FE8                     	;# 
  1909  1FE9                     	;# 
  1910  1FEA                     	;# 
  1911  1FEB                     	;# 
  1912  1FED                     	;# 
  1913  1FEE                     	;# 
  1914  1FEF                     	;# 
  1915  0000                     	;# 
  1916  0001                     	;# 
  1917  0002                     	;# 
  1918  0003                     	;# 
  1919  0004                     	;# 
  1920  0005                     	;# 
  1921  0006                     	;# 
  1922  0007                     	;# 
  1923  0008                     	;# 
  1924  0009                     	;# 
  1925  000A                     	;# 
  1926  000B                     	;# 
  1927  000C                     	;# 
  1928  000D                     	;# 
  1929  000E                     	;# 
  1930  0010                     	;# 
  1931  0012                     	;# 
  1932  0013                     	;# 
  1933  0014                     	;# 
  1934  0016                     	;# 
  1935  0018                     	;# 
  1936  0019                     	;# 
  1937  001A                     	;# 
  1938  009B                     	;# 
  1939  009B                     	;# 
  1940  009C                     	;# 
  1941  009D                     	;# 
  1942  009E                     	;# 
  1943  009F                     	;# 
  1944  0119                     	;# 
  1945  0119                     	;# 
  1946  0119                     	;# 
  1947  011A                     	;# 
  1948  011A                     	;# 
  1949  011A                     	;# 
  1950  011B                     	;# 
  1951  011B                     	;# 
  1952  011B                     	;# 
  1953  011B                     	;# 
  1954  011B                     	;# 
  1955  011C                     	;# 
  1956  011C                     	;# 
  1957  011C                     	;# 
  1958  011D                     	;# 
  1959  011D                     	;# 
  1960  011D                     	;# 
  1961  011E                     	;# 
  1962  011E                     	;# 
  1963  011E                     	;# 
  1964  011F                     	;# 
  1965  011F                     	;# 
  1966  011F                     	;# 
  1967  011F                     	;# 
  1968  011F                     	;# 
  1969  018C                     	;# 
  1970  018D                     	;# 
  1971  018E                     	;# 
  1972  018F                     	;# 
  1973  0190                     	;# 
  1974  0191                     	;# 
  1975  0192                     	;# 
  1976  0196                     	;# 
  1977  0197                     	;# 
  1978  0198                     	;# 
  1979  0199                     	;# 
  1980  019A                     	;# 
  1981  019B                     	;# 
  1982  019C                     	;# 
  1983  020C                     	;# 
  1984  020C                     	;# 
  1985  020D                     	;# 
  1986  020E                     	;# 
  1987  020F                     	;# 
  1988  020F                     	;# 
  1989  0210                     	;# 
  1990  0210                     	;# 
  1991  0211                     	;# 
  1992  0211                     	;# 
  1993  028C                     	;# 
  1994  028C                     	;# 
  1995  028D                     	;# 
  1996  028D                     	;# 
  1997  028E                     	;# 
  1998  028F                     	;# 
  1999  0290                     	;# 
  2000  0291                     	;# 
  2001  030C                     	;# 
  2002  030C                     	;# 
  2003  030D                     	;# 
  2004  030E                     	;# 
  2005  030F                     	;# 
  2006  0310                     	;# 
  2007  0310                     	;# 
  2008  0311                     	;# 
  2009  0312                     	;# 
  2010  0313                     	;# 
  2011  0314                     	;# 
  2012  0314                     	;# 
  2013  0315                     	;# 
  2014  0316                     	;# 
  2015  0318                     	;# 
  2016  0318                     	;# 
  2017  0319                     	;# 
  2018  031A                     	;# 
  2019  031C                     	;# 
  2020  031C                     	;# 
  2021  031D                     	;# 
  2022  031E                     	;# 
  2023  038C                     	;# 
  2024  038C                     	;# 
  2025  038D                     	;# 
  2026  038E                     	;# 
  2027  058C                     	;# 
  2028  058C                     	;# 
  2029  058D                     	;# 
  2030  058E                     	;# 
  2031  058F                     	;# 
  2032  058F                     	;# 
  2033  0590                     	;# 
  2034  0591                     	;# 
  2035  0592                     	;# 
  2036  0593                     	;# 
  2037  059C                     	;# 
  2038  059C                     	;# 
  2039  059D                     	;# 
  2040  059D                     	;# 
  2041  059E                     	;# 
  2042  059F                     	;# 
  2043  060C                     	;# 
  2044  060D                     	;# 
  2045  060E                     	;# 
  2046  060F                     	;# 
  2047  0610                     	;# 
  2048  0611                     	;# 
  2049  0612                     	;# 
  2050  0613                     	;# 
  2051  0614                     	;# 
  2052  070C                     	;# 
  2053  070D                     	;# 
  2054  070E                     	;# 
  2055  070F                     	;# 
  2056  0710                     	;# 
  2057  0711                     	;# 
  2058  0712                     	;# 
  2059  0713                     	;# 
  2060  0716                     	;# 
  2061  0717                     	;# 
  2062  0718                     	;# 
  2063  0719                     	;# 
  2064  071A                     	;# 
  2065  071B                     	;# 
  2066  071C                     	;# 
  2067  071D                     	;# 
  2068  0796                     	;# 
  2069  0797                     	;# 
  2070  0798                     	;# 
  2071  0799                     	;# 
  2072  079A                     	;# 
  2073  079B                     	;# 
  2074  080C                     	;# 
  2075  080D                     	;# 
  2076  080E                     	;# 
  2077  080F                     	;# 
  2078  0810                     	;# 
  2079  0811                     	;# 
  2080  0812                     	;# 
  2081  0813                     	;# 
  2082  0814                     	;# 
  2083  081A                     	;# 
  2084  081A                     	;# 
  2085  081B                     	;# 
  2086  081C                     	;# 
  2087  081C                     	;# 
  2088  081D                     	;# 
  2089  081E                     	;# 
  2090  081F                     	;# 
  2091  088C                     	;# 
  2092  088D                     	;# 
  2093  088E                     	;# 
  2094  088F                     	;# 
  2095  0890                     	;# 
  2096  0891                     	;# 
  2097  0892                     	;# 
  2098  0893                     	;# 
  2099  0895                     	;# 
  2100  0896                     	;# 
  2101  090C                     	;# 
  2102  090E                     	;# 
  2103  090F                     	;# 
  2104  091F                     	;# 
  2105  098F                     	;# 
  2106  098F                     	;# 
  2107  0990                     	;# 
  2108  0991                     	;# 
  2109  0992                     	;# 
  2110  0993                     	;# 
  2111  0994                     	;# 
  2112  0995                     	;# 
  2113  0996                     	;# 
  2114  0997                     	;# 
  2115  0A19                     	;# 
  2116  0A19                     	;# 
  2117  0A1A                     	;# 
  2118  0A1A                     	;# 
  2119  0A1B                     	;# 
  2120  0A1B                     	;# 
  2121  0A1B                     	;# 
  2122  0A1C                     	;# 
  2123  0A1C                     	;# 
  2124  0A1D                     	;# 
  2125  0A1D                     	;# 
  2126  0A1E                     	;# 
  2127  0A1E                     	;# 
  2128  0A1F                     	;# 
  2129  0A1F                     	;# 
  2130  0A1F                     	;# 
  2131  1E0F                     	;# 
  2132  1E10                     	;# 
  2133  1E11                     	;# 
  2134  1E12                     	;# 
  2135  1E13                     	;# 
  2136  1E14                     	;# 
  2137  1E15                     	;# 
  2138  1E16                     	;# 
  2139  1E17                     	;# 
  2140  1E18                     	;# 
  2141  1E19                     	;# 
  2142  1E1A                     	;# 
  2143  1E1B                     	;# 
  2144  1E1C                     	;# 
  2145  1E1D                     	;# 
  2146  1E1E                     	;# 
  2147  1E1F                     	;# 
  2148  1E20                     	;# 
  2149  1E21                     	;# 
  2150  1E22                     	;# 
  2151  1E23                     	;# 
  2152  1E24                     	;# 
  2153  1E25                     	;# 
  2154  1E26                     	;# 
  2155  1E27                     	;# 
  2156  1E28                     	;# 
  2157  1E29                     	;# 
  2158  1E2A                     	;# 
  2159  1E2B                     	;# 
  2160  1E2C                     	;# 
  2161  1E2D                     	;# 
  2162  1E2E                     	;# 
  2163  1E2F                     	;# 
  2164  1E30                     	;# 
  2165  1E31                     	;# 
  2166  1E32                     	;# 
  2167  1E33                     	;# 
  2168  1E34                     	;# 
  2169  1E35                     	;# 
  2170  1E36                     	;# 
  2171  1E37                     	;# 
  2172  1E8F                     	;# 
  2173  1E90                     	;# 
  2174  1E91                     	;# 
  2175  1E92                     	;# 
  2176  1E93                     	;# 
  2177  1E9C                     	;# 
  2178  1EA1                     	;# 
  2179  1EA2                     	;# 
  2180  1EB1                     	;# 
  2181  1EBB                     	;# 
  2182  1EBC                     	;# 
  2183  1EBD                     	;# 
  2184  1EBE                     	;# 
  2185  1EC3                     	;# 
  2186  1EC5                     	;# 
  2187  1EC6                     	;# 
  2188  1EC7                     	;# 
  2189  1EC8                     	;# 
  2190  1EC9                     	;# 
  2191  1ECA                     	;# 
  2192  1ECB                     	;# 
  2193  1ECC                     	;# 
  2194  1ECD                     	;# 
  2195  1ECE                     	;# 
  2196  1F10                     	;# 
  2197  1F11                     	;# 
  2198  1F12                     	;# 
  2199  1F13                     	;# 
  2200  1F14                     	;# 
  2201  1F15                     	;# 
  2202  1F16                     	;# 
  2203  1F17                     	;# 
  2204  1F18                     	;# 
  2205  1F19                     	;# 
  2206  1F1A                     	;# 
  2207  1F1B                     	;# 
  2208  1F1C                     	;# 
  2209  1F1D                     	;# 
  2210  1F1E                     	;# 
  2211  1F1F                     	;# 
  2212  1F20                     	;# 
  2213  1F21                     	;# 
  2214  1F22                     	;# 
  2215  1F23                     	;# 
  2216  1F24                     	;# 
  2217  1F25                     	;# 
  2218  1F26                     	;# 
  2219  1F27                     	;# 
  2220  1F38                     	;# 
  2221  1F39                     	;# 
  2222  1F3A                     	;# 
  2223  1F3B                     	;# 
  2224  1F3C                     	;# 
  2225  1F3D                     	;# 
  2226  1F3E                     	;# 
  2227  1F3F                     	;# 
  2228  1F43                     	;# 
  2229  1F44                     	;# 
  2230  1F45                     	;# 
  2231  1F46                     	;# 
  2232  1F47                     	;# 
  2233  1F48                     	;# 
  2234  1F49                     	;# 
  2235  1F4A                     	;# 
  2236  1F4E                     	;# 
  2237  1F4F                     	;# 
  2238  1F50                     	;# 
  2239  1F51                     	;# 
  2240  1F52                     	;# 
  2241  1F53                     	;# 
  2242  1F54                     	;# 
  2243  1F55                     	;# 
  2244  1F65                     	;# 
  2245  1F68                     	;# 
  2246  1F69                     	;# 
  2247  1F6A                     	;# 
  2248  1F6B                     	;# 
  2249  1FE4                     	;# 
  2250  1FE5                     	;# 
  2251  1FE6                     	;# 
  2252  1FE7                     	;# 
  2253  1FE8                     	;# 
  2254  1FE8                     	;# 
  2255  1FE9                     	;# 
  2256  1FEA                     	;# 
  2257  1FEB                     	;# 
  2258  1FED                     	;# 
  2259  1FEE                     	;# 
  2260  1FEF                     	;# 
  2261  0000                     	;# 
  2262  0001                     	;# 
  2263  0002                     	;# 
  2264  0003                     	;# 
  2265  0004                     	;# 
  2266  0005                     	;# 
  2267  0006                     	;# 
  2268  0007                     	;# 
  2269  0008                     	;# 
  2270  0009                     	;# 
  2271  000A                     	;# 
  2272  000B                     	;# 
  2273  000C                     	;# 
  2274  000D                     	;# 
  2275  000E                     	;# 
  2276  0010                     	;# 
  2277  0012                     	;# 
  2278  0013                     	;# 
  2279  0014                     	;# 
  2280  0016                     	;# 
  2281  0018                     	;# 
  2282  0019                     	;# 
  2283  001A                     	;# 
  2284  009B                     	;# 
  2285  009B                     	;# 
  2286  009C                     	;# 
  2287  009D                     	;# 
  2288  009E                     	;# 
  2289  009F                     	;# 
  2290  0119                     	;# 
  2291  0119                     	;# 
  2292  0119                     	;# 
  2293  011A                     	;# 
  2294  011A                     	;# 
  2295  011A                     	;# 
  2296  011B                     	;# 
  2297  011B                     	;# 
  2298  011B                     	;# 
  2299  011B                     	;# 
  2300  011B                     	;# 
  2301  011C                     	;# 
  2302  011C                     	;# 
  2303  011C                     	;# 
  2304  011D                     	;# 
  2305  011D                     	;# 
  2306  011D                     	;# 
  2307  011E                     	;# 
  2308  011E                     	;# 
  2309  011E                     	;# 
  2310  011F                     	;# 
  2311  011F                     	;# 
  2312  011F                     	;# 
  2313  011F                     	;# 
  2314  011F                     	;# 
  2315  018C                     	;# 
  2316  018D                     	;# 
  2317  018E                     	;# 
  2318  018F                     	;# 
  2319  0190                     	;# 
  2320  0191                     	;# 
  2321  0192                     	;# 
  2322  0196                     	;# 
  2323  0197                     	;# 
  2324  0198                     	;# 
  2325  0199                     	;# 
  2326  019A                     	;# 
  2327  019B                     	;# 
  2328  019C                     	;# 
  2329  020C                     	;# 
  2330  020C                     	;# 
  2331  020D                     	;# 
  2332  020E                     	;# 
  2333  020F                     	;# 
  2334  020F                     	;# 
  2335  0210                     	;# 
  2336  0210                     	;# 
  2337  0211                     	;# 
  2338  0211                     	;# 
  2339  028C                     	;# 
  2340  028C                     	;# 
  2341  028D                     	;# 
  2342  028D                     	;# 
  2343  028E                     	;# 
  2344  028F                     	;# 
  2345  0290                     	;# 
  2346  0291                     	;# 
  2347  030C                     	;# 
  2348  030C                     	;# 
  2349  030D                     	;# 
  2350  030E                     	;# 
  2351  030F                     	;# 
  2352  0310                     	;# 
  2353  0310                     	;# 
  2354  0311                     	;# 
  2355  0312                     	;# 
  2356  0313                     	;# 
  2357  0314                     	;# 
  2358  0314                     	;# 
  2359  0315                     	;# 
  2360  0316                     	;# 
  2361  0318                     	;# 
  2362  0318                     	;# 
  2363  0319                     	;# 
  2364  031A                     	;# 
  2365  031C                     	;# 
  2366  031C                     	;# 
  2367  031D                     	;# 
  2368  031E                     	;# 
  2369  038C                     	;# 
  2370  038C                     	;# 
  2371  038D                     	;# 
  2372  038E                     	;# 
  2373  058C                     	;# 
  2374  058C                     	;# 
  2375  058D                     	;# 
  2376  058E                     	;# 
  2377  058F                     	;# 
  2378  058F                     	;# 
  2379  0590                     	;# 
  2380  0591                     	;# 
  2381  0592                     	;# 
  2382  0593                     	;# 
  2383  059C                     	;# 
  2384  059C                     	;# 
  2385  059D                     	;# 
  2386  059D                     	;# 
  2387  059E                     	;# 
  2388  059F                     	;# 
  2389  060C                     	;# 
  2390  060D                     	;# 
  2391  060E                     	;# 
  2392  060F                     	;# 
  2393  0610                     	;# 
  2394  0611                     	;# 
  2395  0612                     	;# 
  2396  0613                     	;# 
  2397  0614                     	;# 
  2398  070C                     	;# 
  2399  070D                     	;# 
  2400  070E                     	;# 
  2401  070F                     	;# 
  2402  0710                     	;# 
  2403  0711                     	;# 
  2404  0712                     	;# 
  2405  0713                     	;# 
  2406  0716                     	;# 
  2407  0717                     	;# 
  2408  0718                     	;# 
  2409  0719                     	;# 
  2410  071A                     	;# 
  2411  071B                     	;# 
  2412  071C                     	;# 
  2413  071D                     	;# 
  2414  0796                     	;# 
  2415  0797                     	;# 
  2416  0798                     	;# 
  2417  0799                     	;# 
  2418  079A                     	;# 
  2419  079B                     	;# 
  2420  080C                     	;# 
  2421  080D                     	;# 
  2422  080E                     	;# 
  2423  080F                     	;# 
  2424  0810                     	;# 
  2425  0811                     	;# 
  2426  0812                     	;# 
  2427  0813                     	;# 
  2428  0814                     	;# 
  2429  081A                     	;# 
  2430  081A                     	;# 
  2431  081B                     	;# 
  2432  081C                     	;# 
  2433  081C                     	;# 
  2434  081D                     	;# 
  2435  081E                     	;# 
  2436  081F                     	;# 
  2437  088C                     	;# 
  2438  088D                     	;# 
  2439  088E                     	;# 
  2440  088F                     	;# 
  2441  0890                     	;# 
  2442  0891                     	;# 
  2443  0892                     	;# 
  2444  0893                     	;# 
  2445  0895                     	;# 
  2446  0896                     	;# 
  2447  090C                     	;# 
  2448  090E                     	;# 
  2449  090F                     	;# 
  2450  091F                     	;# 
  2451  098F                     	;# 
  2452  098F                     	;# 
  2453  0990                     	;# 
  2454  0991                     	;# 
  2455  0992                     	;# 
  2456  0993                     	;# 
  2457  0994                     	;# 
  2458  0995                     	;# 
  2459  0996                     	;# 
  2460  0997                     	;# 
  2461  0A19                     	;# 
  2462  0A19                     	;# 
  2463  0A1A                     	;# 
  2464  0A1A                     	;# 
  2465  0A1B                     	;# 
  2466  0A1B                     	;# 
  2467  0A1B                     	;# 
  2468  0A1C                     	;# 
  2469  0A1C                     	;# 
  2470  0A1D                     	;# 
  2471  0A1D                     	;# 
  2472  0A1E                     	;# 
  2473  0A1E                     	;# 
  2474  0A1F                     	;# 
  2475  0A1F                     	;# 
  2476  0A1F                     	;# 
  2477  1E0F                     	;# 
  2478  1E10                     	;# 
  2479  1E11                     	;# 
  2480  1E12                     	;# 
  2481  1E13                     	;# 
  2482  1E14                     	;# 
  2483  1E15                     	;# 
  2484  1E16                     	;# 
  2485  1E17                     	;# 
  2486  1E18                     	;# 
  2487  1E19                     	;# 
  2488  1E1A                     	;# 
  2489  1E1B                     	;# 
  2490  1E1C                     	;# 
  2491  1E1D                     	;# 
  2492  1E1E                     	;# 
  2493  1E1F                     	;# 
  2494  1E20                     	;# 
  2495  1E21                     	;# 
  2496  1E22                     	;# 
  2497  1E23                     	;# 
  2498  1E24                     	;# 
  2499  1E25                     	;# 
  2500  1E26                     	;# 
  2501  1E27                     	;# 
  2502  1E28                     	;# 
  2503  1E29                     	;# 
  2504  1E2A                     	;# 
  2505  1E2B                     	;# 
  2506  1E2C                     	;# 
  2507  1E2D                     	;# 
  2508  1E2E                     	;# 
  2509  1E2F                     	;# 
  2510  1E30                     	;# 
  2511  1E31                     	;# 
  2512  1E32                     	;# 
  2513  1E33                     	;# 
  2514  1E34                     	;# 
  2515  1E35                     	;# 
  2516  1E36                     	;# 
  2517  1E37                     	;# 
  2518  1E8F                     	;# 
  2519  1E90                     	;# 
  2520  1E91                     	;# 
  2521  1E92                     	;# 
  2522  1E93                     	;# 
  2523  1E9C                     	;# 
  2524  1EA1                     	;# 
  2525  1EA2                     	;# 
  2526  1EB1                     	;# 
  2527  1EBB                     	;# 
  2528  1EBC                     	;# 
  2529  1EBD                     	;# 
  2530  1EBE                     	;# 
  2531  1EC3                     	;# 
  2532  1EC5                     	;# 
  2533  1EC6                     	;# 
  2534  1EC7                     	;# 
  2535  1EC8                     	;# 
  2536  1EC9                     	;# 
  2537  1ECA                     	;# 
  2538  1ECB                     	;# 
  2539  1ECC                     	;# 
  2540  1ECD                     	;# 
  2541  1ECE                     	;# 
  2542  1F10                     	;# 
  2543  1F11                     	;# 
  2544  1F12                     	;# 
  2545  1F13                     	;# 
  2546  1F14                     	;# 
  2547  1F15                     	;# 
  2548  1F16                     	;# 
  2549  1F17                     	;# 
  2550  1F18                     	;# 
  2551  1F19                     	;# 
  2552  1F1A                     	;# 
  2553  1F1B                     	;# 
  2554  1F1C                     	;# 
  2555  1F1D                     	;# 
  2556  1F1E                     	;# 
  2557  1F1F                     	;# 
  2558  1F20                     	;# 
  2559  1F21                     	;# 
  2560  1F22                     	;# 
  2561  1F23                     	;# 
  2562  1F24                     	;# 
  2563  1F25                     	;# 
  2564  1F26                     	;# 
  2565  1F27                     	;# 
  2566  1F38                     	;# 
  2567  1F39                     	;# 
  2568  1F3A                     	;# 
  2569  1F3B                     	;# 
  2570  1F3C                     	;# 
  2571  1F3D                     	;# 
  2572  1F3E                     	;# 
  2573  1F3F                     	;# 
  2574  1F43                     	;# 
  2575  1F44                     	;# 
  2576  1F45                     	;# 
  2577  1F46                     	;# 
  2578  1F47                     	;# 
  2579  1F48                     	;# 
  2580  1F49                     	;# 
  2581  1F4A                     	;# 
  2582  1F4E                     	;# 
  2583  1F4F                     	;# 
  2584  1F50                     	;# 
  2585  1F51                     	;# 
  2586  1F52                     	;# 
  2587  1F53                     	;# 
  2588  1F54                     	;# 
  2589  1F55                     	;# 
  2590  1F65                     	;# 
  2591  1F68                     	;# 
  2592  1F69                     	;# 
  2593  1F6A                     	;# 
  2594  1F6B                     	;# 
  2595  1FE4                     	;# 
  2596  1FE5                     	;# 
  2597  1FE6                     	;# 
  2598  1FE7                     	;# 
  2599  1FE8                     	;# 
  2600  1FE8                     	;# 
  2601  1FE9                     	;# 
  2602  1FEA                     	;# 
  2603  1FEB                     	;# 
  2604  1FED                     	;# 
  2605  1FEE                     	;# 
  2606  1FEF                     	;# 
  2607  0000                     	;# 
  2608  0001                     	;# 
  2609  0002                     	;# 
  2610  0003                     	;# 
  2611  0004                     	;# 
  2612  0005                     	;# 
  2613  0006                     	;# 
  2614  0007                     	;# 
  2615  0008                     	;# 
  2616  0009                     	;# 
  2617  000A                     	;# 
  2618  000B                     	;# 
  2619  000C                     	;# 
  2620  000D                     	;# 
  2621  000E                     	;# 
  2622  0010                     	;# 
  2623  0012                     	;# 
  2624  0013                     	;# 
  2625  0014                     	;# 
  2626  0016                     	;# 
  2627  0018                     	;# 
  2628  0019                     	;# 
  2629  001A                     	;# 
  2630  009B                     	;# 
  2631  009B                     	;# 
  2632  009C                     	;# 
  2633  009D                     	;# 
  2634  009E                     	;# 
  2635  009F                     	;# 
  2636  0119                     	;# 
  2637  0119                     	;# 
  2638  0119                     	;# 
  2639  011A                     	;# 
  2640  011A                     	;# 
  2641  011A                     	;# 
  2642  011B                     	;# 
  2643  011B                     	;# 
  2644  011B                     	;# 
  2645  011B                     	;# 
  2646  011B                     	;# 
  2647  011C                     	;# 
  2648  011C                     	;# 
  2649  011C                     	;# 
  2650  011D                     	;# 
  2651  011D                     	;# 
  2652  011D                     	;# 
  2653  011E                     	;# 
  2654  011E                     	;# 
  2655  011E                     	;# 
  2656  011F                     	;# 
  2657  011F                     	;# 
  2658  011F                     	;# 
  2659  011F                     	;# 
  2660  011F                     	;# 
  2661  018C                     	;# 
  2662  018D                     	;# 
  2663  018E                     	;# 
  2664  018F                     	;# 
  2665  0190                     	;# 
  2666  0191                     	;# 
  2667  0192                     	;# 
  2668  0196                     	;# 
  2669  0197                     	;# 
  2670  0198                     	;# 
  2671  0199                     	;# 
  2672  019A                     	;# 
  2673  019B                     	;# 
  2674  019C                     	;# 
  2675  020C                     	;# 
  2676  020C                     	;# 
  2677  020D                     	;# 
  2678  020E                     	;# 
  2679  020F                     	;# 
  2680  020F                     	;# 
  2681  0210                     	;# 
  2682  0210                     	;# 
  2683  0211                     	;# 
  2684  0211                     	;# 
  2685  028C                     	;# 
  2686  028C                     	;# 
  2687  028D                     	;# 
  2688  028D                     	;# 
  2689  028E                     	;# 
  2690  028F                     	;# 
  2691  0290                     	;# 
  2692  0291                     	;# 
  2693  030C                     	;# 
  2694  030C                     	;# 
  2695  030D                     	;# 
  2696  030E                     	;# 
  2697  030F                     	;# 
  2698  0310                     	;# 
  2699  0310                     	;# 
  2700  0311                     	;# 
  2701  0312                     	;# 
  2702  0313                     	;# 
  2703  0314                     	;# 
  2704  0314                     	;# 
  2705  0315                     	;# 
  2706  0316                     	;# 
  2707  0318                     	;# 
  2708  0318                     	;# 
  2709  0319                     	;# 
  2710  031A                     	;# 
  2711  031C                     	;# 
  2712  031C                     	;# 
  2713  031D                     	;# 
  2714  031E                     	;# 
  2715  038C                     	;# 
  2716  038C                     	;# 
  2717  038D                     	;# 
  2718  038E                     	;# 
  2719  058C                     	;# 
  2720  058C                     	;# 
  2721  058D                     	;# 
  2722  058E                     	;# 
  2723  058F                     	;# 
  2724  058F                     	;# 
  2725  0590                     	;# 
  2726  0591                     	;# 
  2727  0592                     	;# 
  2728  0593                     	;# 
  2729  059C                     	;# 
  2730  059C                     	;# 
  2731  059D                     	;# 
  2732  059D                     	;# 
  2733  059E                     	;# 
  2734  059F                     	;# 
  2735  060C                     	;# 
  2736  060D                     	;# 
  2737  060E                     	;# 
  2738  060F                     	;# 
  2739  0610                     	;# 
  2740  0611                     	;# 
  2741  0612                     	;# 
  2742  0613                     	;# 
  2743  0614                     	;# 
  2744  070C                     	;# 
  2745  070D                     	;# 
  2746  070E                     	;# 
  2747  070F                     	;# 
  2748  0710                     	;# 
  2749  0711                     	;# 
  2750  0712                     	;# 
  2751  0713                     	;# 
  2752  0716                     	;# 
  2753  0717                     	;# 
  2754  0718                     	;# 
  2755  0719                     	;# 
  2756  071A                     	;# 
  2757  071B                     	;# 
  2758  071C                     	;# 
  2759  071D                     	;# 
  2760  0796                     	;# 
  2761  0797                     	;# 
  2762  0798                     	;# 
  2763  0799                     	;# 
  2764  079A                     	;# 
  2765  079B                     	;# 
  2766  080C                     	;# 
  2767  080D                     	;# 
  2768  080E                     	;# 
  2769  080F                     	;# 
  2770  0810                     	;# 
  2771  0811                     	;# 
  2772  0812                     	;# 
  2773  0813                     	;# 
  2774  0814                     	;# 
  2775  081A                     	;# 
  2776  081A                     	;# 
  2777  081B                     	;# 
  2778  081C                     	;# 
  2779  081C                     	;# 
  2780  081D                     	;# 
  2781  081E                     	;# 
  2782  081F                     	;# 
  2783  088C                     	;# 
  2784  088D                     	;# 
  2785  088E                     	;# 
  2786  088F                     	;# 
  2787  0890                     	;# 
  2788  0891                     	;# 
  2789  0892                     	;# 
  2790  0893                     	;# 
  2791  0895                     	;# 
  2792  0896                     	;# 
  2793  090C                     	;# 
  2794  090E                     	;# 
  2795  090F                     	;# 
  2796  091F                     	;# 
  2797  098F                     	;# 
  2798  098F                     	;# 
  2799  0990                     	;# 
  2800  0991                     	;# 
  2801  0992                     	;# 
  2802  0993                     	;# 
  2803  0994                     	;# 
  2804  0995                     	;# 
  2805  0996                     	;# 
  2806  0997                     	;# 
  2807  0A19                     	;# 
  2808  0A19                     	;# 
  2809  0A1A                     	;# 
  2810  0A1A                     	;# 
  2811  0A1B                     	;# 
  2812  0A1B                     	;# 
  2813  0A1B                     	;# 
  2814  0A1C                     	;# 
  2815  0A1C                     	;# 
  2816  0A1D                     	;# 
  2817  0A1D                     	;# 
  2818  0A1E                     	;# 
  2819  0A1E                     	;# 
  2820  0A1F                     	;# 
  2821  0A1F                     	;# 
  2822  0A1F                     	;# 
  2823  1E0F                     	;# 
  2824  1E10                     	;# 
  2825  1E11                     	;# 
  2826  1E12                     	;# 
  2827  1E13                     	;# 
  2828  1E14                     	;# 
  2829  1E15                     	;# 
  2830  1E16                     	;# 
  2831  1E17                     	;# 
  2832  1E18                     	;# 
  2833  1E19                     	;# 
  2834  1E1A                     	;# 
  2835  1E1B                     	;# 
  2836  1E1C                     	;# 
  2837  1E1D                     	;# 
  2838  1E1E                     	;# 
  2839  1E1F                     	;# 
  2840  1E20                     	;# 
  2841  1E21                     	;# 
  2842  1E22                     	;# 
  2843  1E23                     	;# 
  2844  1E24                     	;# 
  2845  1E25                     	;# 
  2846  1E26                     	;# 
  2847  1E27                     	;# 
  2848  1E28                     	;# 
  2849  1E29                     	;# 
  2850  1E2A                     	;# 
  2851  1E2B                     	;# 
  2852  1E2C                     	;# 
  2853  1E2D                     	;# 
  2854  1E2E                     	;# 
  2855  1E2F                     	;# 
  2856  1E30                     	;# 
  2857  1E31                     	;# 
  2858  1E32                     	;# 
  2859  1E33                     	;# 
  2860  1E34                     	;# 
  2861  1E35                     	;# 
  2862  1E36                     	;# 
  2863  1E37                     	;# 
  2864  1E8F                     	;# 
  2865  1E90                     	;# 
  2866  1E91                     	;# 
  2867  1E92                     	;# 
  2868  1E93                     	;# 
  2869  1E9C                     	;# 
  2870  1EA1                     	;# 
  2871  1EA2                     	;# 
  2872  1EB1                     	;# 
  2873  1EBB                     	;# 
  2874  1EBC                     	;# 
  2875  1EBD                     	;# 
  2876  1EBE                     	;# 
  2877  1EC3                     	;# 
  2878  1EC5                     	;# 
  2879  1EC6                     	;# 
  2880  1EC7                     	;# 
  2881  1EC8                     	;# 
  2882  1EC9                     	;# 
  2883  1ECA                     	;# 
  2884  1ECB                     	;# 
  2885  1ECC                     	;# 
  2886  1ECD                     	;# 
  2887  1ECE                     	;# 
  2888  1F10                     	;# 
  2889  1F11                     	;# 
  2890  1F12                     	;# 
  2891  1F13                     	;# 
  2892  1F14                     	;# 
  2893  1F15                     	;# 
  2894  1F16                     	;# 
  2895  1F17                     	;# 
  2896  1F18                     	;# 
  2897  1F19                     	;# 
  2898  1F1A                     	;# 
  2899  1F1B                     	;# 
  2900  1F1C                     	;# 
  2901  1F1D                     	;# 
  2902  1F1E                     	;# 
  2903  1F1F                     	;# 
  2904  1F20                     	;# 
  2905  1F21                     	;# 
  2906  1F22                     	;# 
  2907  1F23                     	;# 
  2908  1F24                     	;# 
  2909  1F25                     	;# 
  2910  1F26                     	;# 
  2911  1F27                     	;# 
  2912  1F38                     	;# 
  2913  1F39                     	;# 
  2914  1F3A                     	;# 
  2915  1F3B                     	;# 
  2916  1F3C                     	;# 
  2917  1F3D                     	;# 
  2918  1F3E                     	;# 
  2919  1F3F                     	;# 
  2920  1F43                     	;# 
  2921  1F44                     	;# 
  2922  1F45                     	;# 
  2923  1F46                     	;# 
  2924  1F47                     	;# 
  2925  1F48                     	;# 
  2926  1F49                     	;# 
  2927  1F4A                     	;# 
  2928  1F4E                     	;# 
  2929  1F4F                     	;# 
  2930  1F50                     	;# 
  2931  1F51                     	;# 
  2932  1F52                     	;# 
  2933  1F53                     	;# 
  2934  1F54                     	;# 
  2935  1F55                     	;# 
  2936  1F65                     	;# 
  2937  1F68                     	;# 
  2938  1F69                     	;# 
  2939  1F6A                     	;# 
  2940  1F6B                     	;# 
  2941  1FE4                     	;# 
  2942  1FE5                     	;# 
  2943  1FE6                     	;# 
  2944  1FE7                     	;# 
  2945  1FE8                     	;# 
  2946  1FE8                     	;# 
  2947  1FE9                     	;# 
  2948  1FEA                     	;# 
  2949  1FEB                     	;# 
  2950  1FED                     	;# 
  2951  1FEE                     	;# 
  2952  1FEF                     	;# 
  2953  0000                     	;# 
  2954  0001                     	;# 
  2955  0002                     	;# 
  2956  0003                     	;# 
  2957  0004                     	;# 
  2958  0005                     	;# 
  2959  0006                     	;# 
  2960  0007                     	;# 
  2961  0008                     	;# 
  2962  0009                     	;# 
  2963  000A                     	;# 
  2964  000B                     	;# 
  2965  000C                     	;# 
  2966  000D                     	;# 
  2967  000E                     	;# 
  2968  0010                     	;# 
  2969  0012                     	;# 
  2970  0013                     	;# 
  2971  0014                     	;# 
  2972  0016                     	;# 
  2973  0018                     	;# 
  2974  0019                     	;# 
  2975  001A                     	;# 
  2976  009B                     	;# 
  2977  009B                     	;# 
  2978  009C                     	;# 
  2979  009D                     	;# 
  2980  009E                     	;# 
  2981  009F                     	;# 
  2982  0119                     	;# 
  2983  0119                     	;# 
  2984  0119                     	;# 
  2985  011A                     	;# 
  2986  011A                     	;# 
  2987  011A                     	;# 
  2988  011B                     	;# 
  2989  011B                     	;# 
  2990  011B                     	;# 
  2991  011B                     	;# 
  2992  011B                     	;# 
  2993  011C                     	;# 
  2994  011C                     	;# 
  2995  011C                     	;# 
  2996  011D                     	;# 
  2997  011D                     	;# 
  2998  011D                     	;# 
  2999  011E                     	;# 
  3000  011E                     	;# 
  3001  011E                     	;# 
  3002  011F                     	;# 
  3003  011F                     	;# 
  3004  011F                     	;# 
  3005  011F                     	;# 
  3006  011F                     	;# 
  3007  018C                     	;# 
  3008  018D                     	;# 
  3009  018E                     	;# 
  3010  018F                     	;# 
  3011  0190                     	;# 
  3012  0191                     	;# 
  3013  0192                     	;# 
  3014  0196                     	;# 
  3015  0197                     	;# 
  3016  0198                     	;# 
  3017  0199                     	;# 
  3018  019A                     	;# 
  3019  019B                     	;# 
  3020  019C                     	;# 
  3021  020C                     	;# 
  3022  020C                     	;# 
  3023  020D                     	;# 
  3024  020E                     	;# 
  3025  020F                     	;# 
  3026  020F                     	;# 
  3027  0210                     	;# 
  3028  0210                     	;# 
  3029  0211                     	;# 
  3030  0211                     	;# 
  3031  028C                     	;# 
  3032  028C                     	;# 
  3033  028D                     	;# 
  3034  028D                     	;# 
  3035  028E                     	;# 
  3036  028F                     	;# 
  3037  0290                     	;# 
  3038  0291                     	;# 
  3039  030C                     	;# 
  3040  030C                     	;# 
  3041  030D                     	;# 
  3042  030E                     	;# 
  3043  030F                     	;# 
  3044  0310                     	;# 
  3045  0310                     	;# 
  3046  0311                     	;# 
  3047  0312                     	;# 
  3048  0313                     	;# 
  3049  0314                     	;# 
  3050  0314                     	;# 
  3051  0315                     	;# 
  3052  0316                     	;# 
  3053  0318                     	;# 
  3054  0318                     	;# 
  3055  0319                     	;# 
  3056  031A                     	;# 
  3057  031C                     	;# 
  3058  031C                     	;# 
  3059  031D                     	;# 
  3060  031E                     	;# 
  3061  038C                     	;# 
  3062  038C                     	;# 
  3063  038D                     	;# 
  3064  038E                     	;# 
  3065  058C                     	;# 
  3066  058C                     	;# 
  3067  058D                     	;# 
  3068  058E                     	;# 
  3069  058F                     	;# 
  3070  058F                     	;# 
  3071  0590                     	;# 
  3072  0591                     	;# 
  3073  0592                     	;# 
  3074  0593                     	;# 
  3075  059C                     	;# 
  3076  059C                     	;# 
  3077  059D                     	;# 
  3078  059D                     	;# 
  3079  059E                     	;# 
  3080  059F                     	;# 
  3081  060C                     	;# 
  3082  060D                     	;# 
  3083  060E                     	;# 
  3084  060F                     	;# 
  3085  0610                     	;# 
  3086  0611                     	;# 
  3087  0612                     	;# 
  3088  0613                     	;# 
  3089  0614                     	;# 
  3090  070C                     	;# 
  3091  070D                     	;# 
  3092  070E                     	;# 
  3093  070F                     	;# 
  3094  0710                     	;# 
  3095  0711                     	;# 
  3096  0712                     	;# 
  3097  0713                     	;# 
  3098  0716                     	;# 
  3099  0717                     	;# 
  3100  0718                     	;# 
  3101  0719                     	;# 
  3102  071A                     	;# 
  3103  071B                     	;# 
  3104  071C                     	;# 
  3105  071D                     	;# 
  3106  0796                     	;# 
  3107  0797                     	;# 
  3108  0798                     	;# 
  3109  0799                     	;# 
  3110  079A                     	;# 
  3111  079B                     	;# 
  3112  080C                     	;# 
  3113  080D                     	;# 
  3114  080E                     	;# 
  3115  080F                     	;# 
  3116  0810                     	;# 
  3117  0811                     	;# 
  3118  0812                     	;# 
  3119  0813                     	;# 
  3120  0814                     	;# 
  3121  081A                     	;# 
  3122  081A                     	;# 
  3123  081B                     	;# 
  3124  081C                     	;# 
  3125  081C                     	;# 
  3126  081D                     	;# 
  3127  081E                     	;# 
  3128  081F                     	;# 
  3129  088C                     	;# 
  3130  088D                     	;# 
  3131  088E                     	;# 
  3132  088F                     	;# 
  3133  0890                     	;# 
  3134  0891                     	;# 
  3135  0892                     	;# 
  3136  0893                     	;# 
  3137  0895                     	;# 
  3138  0896                     	;# 
  3139  090C                     	;# 
  3140  090E                     	;# 
  3141  090F                     	;# 
  3142  091F                     	;# 
  3143  098F                     	;# 
  3144  098F                     	;# 
  3145  0990                     	;# 
  3146  0991                     	;# 
  3147  0992                     	;# 
  3148  0993                     	;# 
  3149  0994                     	;# 
  3150  0995                     	;# 
  3151  0996                     	;# 
  3152  0997                     	;# 
  3153  0A19                     	;# 
  3154  0A19                     	;# 
  3155  0A1A                     	;# 
  3156  0A1A                     	;# 
  3157  0A1B                     	;# 
  3158  0A1B                     	;# 
  3159  0A1B                     	;# 
  3160  0A1C                     	;# 
  3161  0A1C                     	;# 
  3162  0A1D                     	;# 
  3163  0A1D                     	;# 
  3164  0A1E                     	;# 
  3165  0A1E                     	;# 
  3166  0A1F                     	;# 
  3167  0A1F                     	;# 
  3168  0A1F                     	;# 
  3169  1E0F                     	;# 
  3170  1E10                     	;# 
  3171  1E11                     	;# 
  3172  1E12                     	;# 
  3173  1E13                     	;# 
  3174  1E14                     	;# 
  3175  1E15                     	;# 
  3176  1E16                     	;# 
  3177  1E17                     	;# 
  3178  1E18                     	;# 
  3179  1E19                     	;# 
  3180  1E1A                     	;# 
  3181  1E1B                     	;# 
  3182  1E1C                     	;# 
  3183  1E1D                     	;# 
  3184  1E1E                     	;# 
  3185  1E1F                     	;# 
  3186  1E20                     	;# 
  3187  1E21                     	;# 
  3188  1E22                     	;# 
  3189  1E23                     	;# 
  3190  1E24                     	;# 
  3191  1E25                     	;# 
  3192  1E26                     	;# 
  3193  1E27                     	;# 
  3194  1E28                     	;# 
  3195  1E29                     	;# 
  3196  1E2A                     	;# 
  3197  1E2B                     	;# 
  3198  1E2C                     	;# 
  3199  1E2D                     	;# 
  3200  1E2E                     	;# 
  3201  1E2F                     	;# 
  3202  1E30                     	;# 
  3203  1E31                     	;# 
  3204  1E32                     	;# 
  3205  1E33                     	;# 
  3206  1E34                     	;# 
  3207  1E35                     	;# 
  3208  1E36                     	;# 
  3209  1E37                     	;# 
  3210  1E8F                     	;# 
  3211  1E90                     	;# 
  3212  1E91                     	;# 
  3213  1E92                     	;# 
  3214  1E93                     	;# 
  3215  1E9C                     	;# 
  3216  1EA1                     	;# 
  3217  1EA2                     	;# 
  3218  1EB1                     	;# 
  3219  1EBB                     	;# 
  3220  1EBC                     	;# 
  3221  1EBD                     	;# 
  3222  1EBE                     	;# 
  3223  1EC3                     	;# 
  3224  1EC5                     	;# 
  3225  1EC6                     	;# 
  3226  1EC7                     	;# 
  3227  1EC8                     	;# 
  3228  1EC9                     	;# 
  3229  1ECA                     	;# 
  3230  1ECB                     	;# 
  3231  1ECC                     	;# 
  3232  1ECD                     	;# 
  3233  1ECE                     	;# 
  3234  1F10                     	;# 
  3235  1F11                     	;# 
  3236  1F12                     	;# 
  3237  1F13                     	;# 
  3238  1F14                     	;# 
  3239  1F15                     	;# 
  3240  1F16                     	;# 
  3241  1F17                     	;# 
  3242  1F18                     	;# 
  3243  1F19                     	;# 
  3244  1F1A                     	;# 
  3245  1F1B                     	;# 
  3246  1F1C                     	;# 
  3247  1F1D                     	;# 
  3248  1F1E                     	;# 
  3249  1F1F                     	;# 
  3250  1F20                     	;# 
  3251  1F21                     	;# 
  3252  1F22                     	;# 
  3253  1F23                     	;# 
  3254  1F24                     	;# 
  3255  1F25                     	;# 
  3256  1F26                     	;# 
  3257  1F27                     	;# 
  3258  1F38                     	;# 
  3259  1F39                     	;# 
  3260  1F3A                     	;# 
  3261  1F3B                     	;# 
  3262  1F3C                     	;# 
  3263  1F3D                     	;# 
  3264  1F3E                     	;# 
  3265  1F3F                     	;# 
  3266  1F43                     	;# 
  3267  1F44                     	;# 
  3268  1F45                     	;# 
  3269  1F46                     	;# 
  3270  1F47                     	;# 
  3271  1F48                     	;# 
  3272  1F49                     	;# 
  3273  1F4A                     	;# 
  3274  1F4E                     	;# 
  3275  1F4F                     	;# 
  3276  1F50                     	;# 
  3277  1F51                     	;# 
  3278  1F52                     	;# 
  3279  1F53                     	;# 
  3280  1F54                     	;# 
  3281  1F55                     	;# 
  3282  1F65                     	;# 
  3283  1F68                     	;# 
  3284  1F69                     	;# 
  3285  1F6A                     	;# 
  3286  1F6B                     	;# 
  3287  1FE4                     	;# 
  3288  1FE5                     	;# 
  3289  1FE6                     	;# 
  3290  1FE7                     	;# 
  3291  1FE8                     	;# 
  3292  1FE8                     	;# 
  3293  1FE9                     	;# 
  3294  1FEA                     	;# 
  3295  1FEB                     	;# 
  3296  1FED                     	;# 
  3297  1FEE                     	;# 
  3298  1FEF                     	;# 
  3299  0000                     	;# 
  3300  0001                     	;# 
  3301  0002                     	;# 
  3302  0003                     	;# 
  3303  0004                     	;# 
  3304  0005                     	;# 
  3305  0006                     	;# 
  3306  0007                     	;# 
  3307  0008                     	;# 
  3308  0009                     	;# 
  3309  000A                     	;# 
  3310  000B                     	;# 
  3311  000C                     	;# 
  3312  000D                     	;# 
  3313  000E                     	;# 
  3314  0010                     	;# 
  3315  0012                     	;# 
  3316  0013                     	;# 
  3317  0014                     	;# 
  3318  0016                     	;# 
  3319  0018                     	;# 
  3320  0019                     	;# 
  3321  001A                     	;# 
  3322  009B                     	;# 
  3323  009B                     	;# 
  3324  009C                     	;# 
  3325  009D                     	;# 
  3326  009E                     	;# 
  3327  009F                     	;# 
  3328  0119                     	;# 
  3329  0119                     	;# 
  3330  0119                     	;# 
  3331  011A                     	;# 
  3332  011A                     	;# 
  3333  011A                     	;# 
  3334  011B                     	;# 
  3335  011B                     	;# 
  3336  011B                     	;# 
  3337  011B                     	;# 
  3338  011B                     	;# 
  3339  011C                     	;# 
  3340  011C                     	;# 
  3341  011C                     	;# 
  3342  011D                     	;# 
  3343  011D                     	;# 
  3344  011D                     	;# 
  3345  011E                     	;# 
  3346  011E                     	;# 
  3347  011E                     	;# 
  3348  011F                     	;# 
  3349  011F                     	;# 
  3350  011F                     	;# 
  3351  011F                     	;# 
  3352  011F                     	;# 
  3353  018C                     	;# 
  3354  018D                     	;# 
  3355  018E                     	;# 
  3356  018F                     	;# 
  3357  0190                     	;# 
  3358  0191                     	;# 
  3359  0192                     	;# 
  3360  0196                     	;# 
  3361  0197                     	;# 
  3362  0198                     	;# 
  3363  0199                     	;# 
  3364  019A                     	;# 
  3365  019B                     	;# 
  3366  019C                     	;# 
  3367  020C                     	;# 
  3368  020C                     	;# 
  3369  020D                     	;# 
  3370  020E                     	;# 
  3371  020F                     	;# 
  3372  020F                     	;# 
  3373  0210                     	;# 
  3374  0210                     	;# 
  3375  0211                     	;# 
  3376  0211                     	;# 
  3377  028C                     	;# 
  3378  028C                     	;# 
  3379  028D                     	;# 
  3380  028D                     	;# 
  3381  028E                     	;# 
  3382  028F                     	;# 
  3383  0290                     	;# 
  3384  0291                     	;# 
  3385  030C                     	;# 
  3386  030C                     	;# 
  3387  030D                     	;# 
  3388  030E                     	;# 
  3389  030F                     	;# 
  3390  0310                     	;# 
  3391  0310                     	;# 
  3392  0311                     	;# 
  3393  0312                     	;# 
  3394  0313                     	;# 
  3395  0314                     	;# 
  3396  0314                     	;# 
  3397  0315                     	;# 
  3398  0316                     	;# 
  3399  0318                     	;# 
  3400  0318                     	;# 
  3401  0319                     	;# 
  3402  031A                     	;# 
  3403  031C                     	;# 
  3404  031C                     	;# 
  3405  031D                     	;# 
  3406  031E                     	;# 
  3407  038C                     	;# 
  3408  038C                     	;# 
  3409  038D                     	;# 
  3410  038E                     	;# 
  3411  058C                     	;# 
  3412  058C                     	;# 
  3413  058D                     	;# 
  3414  058E                     	;# 
  3415  058F                     	;# 
  3416  058F                     	;# 
  3417  0590                     	;# 
  3418  0591                     	;# 
  3419  0592                     	;# 
  3420  0593                     	;# 
  3421  059C                     	;# 
  3422  059C                     	;# 
  3423  059D                     	;# 
  3424  059D                     	;# 
  3425  059E                     	;# 
  3426  059F                     	;# 
  3427  060C                     	;# 
  3428  060D                     	;# 
  3429  060E                     	;# 
  3430  060F                     	;# 
  3431  0610                     	;# 
  3432  0611                     	;# 
  3433  0612                     	;# 
  3434  0613                     	;# 
  3435  0614                     	;# 
  3436  070C                     	;# 
  3437  070D                     	;# 
  3438  070E                     	;# 
  3439  070F                     	;# 
  3440  0710                     	;# 
  3441  0711                     	;# 
  3442  0712                     	;# 
  3443  0713                     	;# 
  3444  0716                     	;# 
  3445  0717                     	;# 
  3446  0718                     	;# 
  3447  0719                     	;# 
  3448  071A                     	;# 
  3449  071B                     	;# 
  3450  071C                     	;# 
  3451  071D                     	;# 
  3452  0796                     	;# 
  3453  0797                     	;# 
  3454  0798                     	;# 
  3455  0799                     	;# 
  3456  079A                     	;# 
  3457  079B                     	;# 
  3458  080C                     	;# 
  3459  080D                     	;# 
  3460  080E                     	;# 
  3461  080F                     	;# 
  3462  0810                     	;# 
  3463  0811                     	;# 
  3464  0812                     	;# 
  3465  0813                     	;# 
  3466  0814                     	;# 
  3467  081A                     	;# 
  3468  081A                     	;# 
  3469  081B                     	;# 
  3470  081C                     	;# 
  3471  081C                     	;# 
  3472  081D                     	;# 
  3473  081E                     	;# 
  3474  081F                     	;# 
  3475  088C                     	;# 
  3476  088D                     	;# 
  3477  088E                     	;# 
  3478  088F                     	;# 
  3479  0890                     	;# 
  3480  0891                     	;# 
  3481  0892                     	;# 
  3482  0893                     	;# 
  3483  0895                     	;# 
  3484  0896                     	;# 
  3485  090C                     	;# 
  3486  090E                     	;# 
  3487  090F                     	;# 
  3488  091F                     	;# 
  3489  098F                     	;# 
  3490  098F                     	;# 
  3491  0990                     	;# 
  3492  0991                     	;# 
  3493  0992                     	;# 
  3494  0993                     	;# 
  3495  0994                     	;# 
  3496  0995                     	;# 
  3497  0996                     	;# 
  3498  0997                     	;# 
  3499  0A19                     	;# 
  3500  0A19                     	;# 
  3501  0A1A                     	;# 
  3502  0A1A                     	;# 
  3503  0A1B                     	;# 
  3504  0A1B                     	;# 
  3505  0A1B                     	;# 
  3506  0A1C                     	;# 
  3507  0A1C                     	;# 
  3508  0A1D                     	;# 
  3509  0A1D                     	;# 
  3510  0A1E                     	;# 
  3511  0A1E                     	;# 
  3512  0A1F                     	;# 
  3513  0A1F                     	;# 
  3514  0A1F                     	;# 
  3515  1E0F                     	;# 
  3516  1E10                     	;# 
  3517  1E11                     	;# 
  3518  1E12                     	;# 
  3519  1E13                     	;# 
  3520  1E14                     	;# 
  3521  1E15                     	;# 
  3522  1E16                     	;# 
  3523  1E17                     	;# 
  3524  1E18                     	;# 
  3525  1E19                     	;# 
  3526  1E1A                     	;# 
  3527  1E1B                     	;# 
  3528  1E1C                     	;# 
  3529  1E1D                     	;# 
  3530  1E1E                     	;# 
  3531  1E1F                     	;# 
  3532  1E20                     	;# 
  3533  1E21                     	;# 
  3534  1E22                     	;# 
  3535  1E23                     	;# 
  3536  1E24                     	;# 
  3537  1E25                     	;# 
  3538  1E26                     	;# 
  3539  1E27                     	;# 
  3540  1E28                     	;# 
  3541  1E29                     	;# 
  3542  1E2A                     	;# 
  3543  1E2B                     	;# 
  3544  1E2C                     	;# 
  3545  1E2D                     	;# 
  3546  1E2E                     	;# 
  3547  1E2F                     	;# 
  3548  1E30                     	;# 
  3549  1E31                     	;# 
  3550  1E32                     	;# 
  3551  1E33                     	;# 
  3552  1E34                     	;# 
  3553  1E35                     	;# 
  3554  1E36                     	;# 
  3555  1E37                     	;# 
  3556  1E8F                     	;# 
  3557  1E90                     	;# 
  3558  1E91                     	;# 
  3559  1E92                     	;# 
  3560  1E93                     	;# 
  3561  1E9C                     	;# 
  3562  1EA1                     	;# 
  3563  1EA2                     	;# 
  3564  1EB1                     	;# 
  3565  1EBB                     	;# 
  3566  1EBC                     	;# 
  3567  1EBD                     	;# 
  3568  1EBE                     	;# 
  3569  1EC3                     	;# 
  3570  1EC5                     	;# 
  3571  1EC6                     	;# 
  3572  1EC7                     	;# 
  3573  1EC8                     	;# 
  3574  1EC9                     	;# 
  3575  1ECA                     	;# 
  3576  1ECB                     	;# 
  3577  1ECC                     	;# 
  3578  1ECD                     	;# 
  3579  1ECE                     	;# 
  3580  1F10                     	;# 
  3581  1F11                     	;# 
  3582  1F12                     	;# 
  3583  1F13                     	;# 
  3584  1F14                     	;# 
  3585  1F15                     	;# 
  3586  1F16                     	;# 
  3587  1F17                     	;# 
  3588  1F18                     	;# 
  3589  1F19                     	;# 
  3590  1F1A                     	;# 
  3591  1F1B                     	;# 
  3592  1F1C                     	;# 
  3593  1F1D                     	;# 
  3594  1F1E                     	;# 
  3595  1F1F                     	;# 
  3596  1F20                     	;# 
  3597  1F21                     	;# 
  3598  1F22                     	;# 
  3599  1F23                     	;# 
  3600  1F24                     	;# 
  3601  1F25                     	;# 
  3602  1F26                     	;# 
  3603  1F27                     	;# 
  3604  1F38                     	;# 
  3605  1F39                     	;# 
  3606  1F3A                     	;# 
  3607  1F3B                     	;# 
  3608  1F3C                     	;# 
  3609  1F3D                     	;# 
  3610  1F3E                     	;# 
  3611  1F3F                     	;# 
  3612  1F43                     	;# 
  3613  1F44                     	;# 
  3614  1F45                     	;# 
  3615  1F46                     	;# 
  3616  1F47                     	;# 
  3617  1F48                     	;# 
  3618  1F49                     	;# 
  3619  1F4A                     	;# 
  3620  1F4E                     	;# 
  3621  1F4F                     	;# 
  3622  1F50                     	;# 
  3623  1F51                     	;# 
  3624  1F52                     	;# 
  3625  1F53                     	;# 
  3626  1F54                     	;# 
  3627  1F55                     	;# 
  3628  1F65                     	;# 
  3629  1F68                     	;# 
  3630  1F69                     	;# 
  3631  1F6A                     	;# 
  3632  1F6B                     	;# 
  3633  1FE4                     	;# 
  3634  1FE5                     	;# 
  3635  1FE6                     	;# 
  3636  1FE7                     	;# 
  3637  1FE8                     	;# 
  3638  1FE8                     	;# 
  3639  1FE9                     	;# 
  3640  1FEA                     	;# 
  3641  1FEB                     	;# 
  3642  1FED                     	;# 
  3643  1FEE                     	;# 
  3644  1FEF                     	;# 
  3645  0000                     	;# 
  3646  0001                     	;# 
  3647  0002                     	;# 
  3648  0003                     	;# 
  3649  0004                     	;# 
  3650  0005                     	;# 
  3651  0006                     	;# 
  3652  0007                     	;# 
  3653  0008                     	;# 
  3654  0009                     	;# 
  3655  000A                     	;# 
  3656  000B                     	;# 
  3657  000C                     	;# 
  3658  000D                     	;# 
  3659  000E                     	;# 
  3660  0010                     	;# 
  3661  0012                     	;# 
  3662  0013                     	;# 
  3663  0014                     	;# 
  3664  0016                     	;# 
  3665  0018                     	;# 
  3666  0019                     	;# 
  3667  001A                     	;# 
  3668  009B                     	;# 
  3669  009B                     	;# 
  3670  009C                     	;# 
  3671  009D                     	;# 
  3672  009E                     	;# 
  3673  009F                     	;# 
  3674  0119                     	;# 
  3675  0119                     	;# 
  3676  0119                     	;# 
  3677  011A                     	;# 
  3678  011A                     	;# 
  3679  011A                     	;# 
  3680  011B                     	;# 
  3681  011B                     	;# 
  3682  011B                     	;# 
  3683  011B                     	;# 
  3684  011B                     	;# 
  3685  011C                     	;# 
  3686  011C                     	;# 
  3687  011C                     	;# 
  3688  011D                     	;# 
  3689  011D                     	;# 
  3690  011D                     	;# 
  3691  011E                     	;# 
  3692  011E                     	;# 
  3693  011E                     	;# 
  3694  011F                     	;# 
  3695  011F                     	;# 
  3696  011F                     	;# 
  3697  011F                     	;# 
  3698  011F                     	;# 
  3699  018C                     	;# 
  3700  018D                     	;# 
  3701  018E                     	;# 
  3702  018F                     	;# 
  3703  0190                     	;# 
  3704  0191                     	;# 
  3705  0192                     	;# 
  3706  0196                     	;# 
  3707  0197                     	;# 
  3708  0198                     	;# 
  3709  0199                     	;# 
  3710  019A                     	;# 
  3711  019B                     	;# 
  3712  019C                     	;# 
  3713  020C                     	;# 
  3714  020C                     	;# 
  3715  020D                     	;# 
  3716  020E                     	;# 
  3717  020F                     	;# 
  3718  020F                     	;# 
  3719  0210                     	;# 
  3720  0210                     	;# 
  3721  0211                     	;# 
  3722  0211                     	;# 
  3723  028C                     	;# 
  3724  028C                     	;# 
  3725  028D                     	;# 
  3726  028D                     	;# 
  3727  028E                     	;# 
  3728  028F                     	;# 
  3729  0290                     	;# 
  3730  0291                     	;# 
  3731  030C                     	;# 
  3732  030C                     	;# 
  3733  030D                     	;# 
  3734  030E                     	;# 
  3735  030F                     	;# 
  3736  0310                     	;# 
  3737  0310                     	;# 
  3738  0311                     	;# 
  3739  0312                     	;# 
  3740  0313                     	;# 
  3741  0314                     	;# 
  3742  0314                     	;# 
  3743  0315                     	;# 
  3744  0316                     	;# 
  3745  0318                     	;# 
  3746  0318                     	;# 
  3747  0319                     	;# 
  3748  031A                     	;# 
  3749  031C                     	;# 
  3750  031C                     	;# 
  3751  031D                     	;# 
  3752  031E                     	;# 
  3753  038C                     	;# 
  3754  038C                     	;# 
  3755  038D                     	;# 
  3756  038E                     	;# 
  3757  058C                     	;# 
  3758  058C                     	;# 
  3759  058D                     	;# 
  3760  058E                     	;# 
  3761  058F                     	;# 
  3762  058F                     	;# 
  3763  0590                     	;# 
  3764  0591                     	;# 
  3765  0592                     	;# 
  3766  0593                     	;# 
  3767  059C                     	;# 
  3768  059C                     	;# 
  3769  059D                     	;# 
  3770  059D                     	;# 
  3771  059E                     	;# 
  3772  059F                     	;# 
  3773  060C                     	;# 
  3774  060D                     	;# 
  3775  060E                     	;# 
  3776  060F                     	;# 
  3777  0610                     	;# 
  3778  0611                     	;# 
  3779  0612                     	;# 
  3780  0613                     	;# 
  3781  0614                     	;# 
  3782  070C                     	;# 
  3783  070D                     	;# 
  3784  070E                     	;# 
  3785  070F                     	;# 
  3786  0710                     	;# 
  3787  0711                     	;# 
  3788  0712                     	;# 
  3789  0713                     	;# 
  3790  0716                     	;# 
  3791  0717                     	;# 
  3792  0718                     	;# 
  3793  0719                     	;# 
  3794  071A                     	;# 
  3795  071B                     	;# 
  3796  071C                     	;# 
  3797  071D                     	;# 
  3798  0796                     	;# 
  3799  0797                     	;# 
  3800  0798                     	;# 
  3801  0799                     	;# 
  3802  079A                     	;# 
  3803  079B                     	;# 
  3804  080C                     	;# 
  3805  080D                     	;# 
  3806  080E                     	;# 
  3807  080F                     	;# 
  3808  0810                     	;# 
  3809  0811                     	;# 
  3810  0812                     	;# 
  3811  0813                     	;# 
  3812  0814                     	;# 
  3813  081A                     	;# 
  3814  081A                     	;# 
  3815  081B                     	;# 
  3816  081C                     	;# 
  3817  081C                     	;# 
  3818  081D                     	;# 
  3819  081E                     	;# 
  3820  081F                     	;# 
  3821  088C                     	;# 
  3822  088D                     	;# 
  3823  088E                     	;# 
  3824  088F                     	;# 
  3825  0890                     	;# 
  3826  0891                     	;# 
  3827  0892                     	;# 
  3828  0893                     	;# 
  3829  0895                     	;# 
  3830  0896                     	;# 
  3831  090C                     	;# 
  3832  090E                     	;# 
  3833  090F                     	;# 
  3834  091F                     	;# 
  3835  098F                     	;# 
  3836  098F                     	;# 
  3837  0990                     	;# 
  3838  0991                     	;# 
  3839  0992                     	;# 
  3840  0993                     	;# 
  3841  0994                     	;# 
  3842  0995                     	;# 
  3843  0996                     	;# 
  3844  0997                     	;# 
  3845  0A19                     	;# 
  3846  0A19                     	;# 
  3847  0A1A                     	;# 
  3848  0A1A                     	;# 
  3849  0A1B                     	;# 
  3850  0A1B                     	;# 
  3851  0A1B                     	;# 
  3852  0A1C                     	;# 
  3853  0A1C                     	;# 
  3854  0A1D                     	;# 
  3855  0A1D                     	;# 
  3856  0A1E                     	;# 
  3857  0A1E                     	;# 
  3858  0A1F                     	;# 
  3859  0A1F                     	;# 
  3860  0A1F                     	;# 
  3861  1E0F                     	;# 
  3862  1E10                     	;# 
  3863  1E11                     	;# 
  3864  1E12                     	;# 
  3865  1E13                     	;# 
  3866  1E14                     	;# 
  3867  1E15                     	;# 
  3868  1E16                     	;# 
  3869  1E17                     	;# 
  3870  1E18                     	;# 
  3871  1E19                     	;# 
  3872  1E1A                     	;# 
  3873  1E1B                     	;# 
  3874  1E1C                     	;# 
  3875  1E1D                     	;# 
  3876  1E1E                     	;# 
  3877  1E1F                     	;# 
  3878  1E20                     	;# 
  3879  1E21                     	;# 
  3880  1E22                     	;# 
  3881  1E23                     	;# 
  3882  1E24                     	;# 
  3883  1E25                     	;# 
  3884  1E26                     	;# 
  3885  1E27                     	;# 
  3886  1E28                     	;# 
  3887  1E29                     	;# 
  3888  1E2A                     	;# 
  3889  1E2B                     	;# 
  3890  1E2C                     	;# 
  3891  1E2D                     	;# 
  3892  1E2E                     	;# 
  3893  1E2F                     	;# 
  3894  1E30                     	;# 
  3895  1E31                     	;# 
  3896  1E32                     	;# 
  3897  1E33                     	;# 
  3898  1E34                     	;# 
  3899  1E35                     	;# 
  3900  1E36                     	;# 
  3901  1E37                     	;# 
  3902  1E8F                     	;# 
  3903  1E90                     	;# 
  3904  1E91                     	;# 
  3905  1E92                     	;# 
  3906  1E93                     	;# 
  3907  1E9C                     	;# 
  3908  1EA1                     	;# 
  3909  1EA2                     	;# 
  3910  1EB1                     	;# 
  3911  1EBB                     	;# 
  3912  1EBC                     	;# 
  3913  1EBD                     	;# 
  3914  1EBE                     	;# 
  3915  1EC3                     	;# 
  3916  1EC5                     	;# 
  3917  1EC6                     	;# 
  3918  1EC7                     	;# 
  3919  1EC8                     	;# 
  3920  1EC9                     	;# 
  3921  1ECA                     	;# 
  3922  1ECB                     	;# 
  3923  1ECC                     	;# 
  3924  1ECD                     	;# 
  3925  1ECE                     	;# 
  3926  1F10                     	;# 
  3927  1F11                     	;# 
  3928  1F12                     	;# 
  3929  1F13                     	;# 
  3930  1F14                     	;# 
  3931  1F15                     	;# 
  3932  1F16                     	;# 
  3933  1F17                     	;# 
  3934  1F18                     	;# 
  3935  1F19                     	;# 
  3936  1F1A                     	;# 
  3937  1F1B                     	;# 
  3938  1F1C                     	;# 
  3939  1F1D                     	;# 
  3940  1F1E                     	;# 
  3941  1F1F                     	;# 
  3942  1F20                     	;# 
  3943  1F21                     	;# 
  3944  1F22                     	;# 
  3945  1F23                     	;# 
  3946  1F24                     	;# 
  3947  1F25                     	;# 
  3948  1F26                     	;# 
  3949  1F27                     	;# 
  3950  1F38                     	;# 
  3951  1F39                     	;# 
  3952  1F3A                     	;# 
  3953  1F3B                     	;# 
  3954  1F3C                     	;# 
  3955  1F3D                     	;# 
  3956  1F3E                     	;# 
  3957  1F3F                     	;# 
  3958  1F43                     	;# 
  3959  1F44                     	;# 
  3960  1F45                     	;# 
  3961  1F46                     	;# 
  3962  1F47                     	;# 
  3963  1F48                     	;# 
  3964  1F49                     	;# 
  3965  1F4A                     	;# 
  3966  1F4E                     	;# 
  3967  1F4F                     	;# 
  3968  1F50                     	;# 
  3969  1F51                     	;# 
  3970  1F52                     	;# 
  3971  1F53                     	;# 
  3972  1F54                     	;# 
  3973  1F55                     	;# 
  3974  1F65                     	;# 
  3975  1F68                     	;# 
  3976  1F69                     	;# 
  3977  1F6A                     	;# 
  3978  1F6B                     	;# 
  3979  1FE4                     	;# 
  3980  1FE5                     	;# 
  3981  1FE6                     	;# 
  3982  1FE7                     	;# 
  3983  1FE8                     	;# 
  3984  1FE8                     	;# 
  3985  1FE9                     	;# 
  3986  1FEA                     	;# 
  3987  1FEB                     	;# 
  3988  1FED                     	;# 
  3989  1FEE                     	;# 
  3990  1FEF                     	;_data
  3991                           
  3992                           	psect	idataBANK1
  3993  0002                     __pidataBANK1:	
  3994                           
  3995                           ;initializer for statusView@prevSensorStat
  3996  0002  3401               	retlw	1
  3997                           
  3998                           ;initializer for _g_updateScreen
  3999  0003  3401               	retlw	1
  4000                           
  4001                           	psect	idataBANK2
  4002  2EFE                     __pidataBANK2:	
  4003                           
  4004                           ;initializer for OLED_print_xy@F7968
  4005  2EFE  3400               	retlw	0
  4006  2EFF  3440               	retlw	64
  4007  2F00  3414               	retlw	20
  4008  2F01  3454               	retlw	84
  4009                           
  4010                           ;initializer for OLED_setCursor@F7960
  4011  2F02  3400               	retlw	0
  4012  2F03  3440               	retlw	64
  4013  2F04  3414               	retlw	20
  4014  2F05  3454               	retlw	84
  4015                           
  4016                           	psect	idataBANK3
  4017  2132                     __pidataBANK3:	
  4018                           
  4019                           ;initializer for OLED_loadSpecialChars@F7973
  4020  2132  3418               	retlw	24
  4021  2133  3418               	retlw	24
  4022  2134  3403               	retlw	3
  4023  2135  3404               	retlw	4
  4024  2136  3404               	retlw	4
  4025  2137  3404               	retlw	4
  4026  2138  3403               	retlw	3
  4027  2139  3400               	retlw	0
  4028  213A  3400               	retlw	0
  4029  213B  3400               	retlw	0
  4030  213C  3400               	retlw	0
  4031  213D  3404               	retlw	4
  4032  213E  3400               	retlw	0
  4033  213F  3400               	retlw	0
  4034  2140  3400               	retlw	0
  4035  2141  3400               	retlw	0
  4036  2142  3401               	retlw	1
  4037  2143  3401               	retlw	1
  4038  2144  3405               	retlw	5
  4039  2145  3409               	retlw	9
  4040  2146  341F               	retlw	31
  4041  2147  3408               	retlw	8
  4042  2148  3404               	retlw	4
  4043  2149  3400               	retlw	0
  4044  214A  3400               	retlw	0
  4045  214B  3410               	retlw	16
  4046  214C  3418               	retlw	24
  4047  214D  341C               	retlw	28
  4048  214E  3418               	retlw	24
  4049  214F  3410               	retlw	16
  4050  2150  3400               	retlw	0
  4051  2151  3400               	retlw	0
  4052                           
  4053                           ;initializer for _p_fct
  4054  2152  34D7               	retlw	low _statusView
  4055  2153  3414               	retlw	high _statusView
  4056  2154  34B8               	retlw	low _channelView
  4057  2155  340B               	retlw	high _channelView
  4058  2156  346B               	retlw	low _channelSetup
  4059  2157  3416               	retlw	high _channelSetup
  4060  2158  3418               	retlw	low _setOutputPower
  4061  2159  341D               	retlw	high _setOutputPower
  4062  215A  3475               	retlw	low _setLensDia
  4063  215B  3427               	retlw	high _setLensDia
  4064  215C  3456               	retlw	low _setup
  4065  215D  341B               	retlw	high _setup
  4066  215E  349A               	retlw	low _setDPOffset
  4067  215F  3425               	retlw	high _setDPOffset
  4068  2160  342C               	retlw	low _setSkyTemp
  4069  2161  3425               	retlw	high _setSkyTemp
  4070  2162  3409               	retlw	low _setFudgeFactor
  4071  2163  3426               	retlw	high _setFudgeFactor
  4072                           
  4073                           	psect	stringtext1
  4074  2800                     __pstringtext1:	
  4075  2800                     _nextStateTbl:	
  4076  2800  3400               	retlw	0
  4077  2801  34FF               	retlw	255
  4078  2802  3401               	retlw	1
  4079  2803  3405               	retlw	5
  4080  2804  3400               	retlw	0
  4081  2805  3400               	retlw	0
  4082  2806  3401               	retlw	1
  4083  2807  34FF               	retlw	255
  4084  2808  3400               	retlw	0
  4085  2809  3402               	retlw	2
  4086  280A  3401               	retlw	1
  4087  280B  3401               	retlw	1
  4088  280C  3402               	retlw	2
  4089  280D  3400               	retlw	0
  4090  280E  3403               	retlw	3
  4091  280F  3401               	retlw	1
  4092  2810  3401               	retlw	1
  4093  2811  3402               	retlw	2
  4094  2812  3402               	retlw	2
  4095  2813  3401               	retlw	1
  4096  2814  3404               	retlw	4
  4097  2815  3401               	retlw	1
  4098  2816  3401               	retlw	1
  4099  2817  3402               	retlw	2
  4100  2818  3402               	retlw	2
  4101  2819  3402               	retlw	2
  4102  281A  3402               	retlw	2
  4103  281B  3401               	retlw	1
  4104  281C  3401               	retlw	1
  4105  281D  3402               	retlw	2
  4106  281E  3403               	retlw	3
  4107  281F  3400               	retlw	0
  4108  2820  3402               	retlw	2
  4109  2821  3402               	retlw	2
  4110  2822  3402               	retlw	2
  4111  2823  3403               	retlw	3
  4112  2824  3403               	retlw	3
  4113  2825  3401               	retlw	1
  4114  2826  3402               	retlw	2
  4115  2827  3402               	retlw	2
  4116  2828  3402               	retlw	2
  4117  2829  3402               	retlw	2
  4118  282A  3404               	retlw	4
  4119  282B  3400               	retlw	0
  4120  282C  3402               	retlw	2
  4121  282D  3402               	retlw	2
  4122  282E  3402               	retlw	2
  4123  282F  3404               	retlw	4
  4124  2830  3405               	retlw	5
  4125  2831  3400               	retlw	0
  4126  2832  3406               	retlw	6
  4127  2833  3400               	retlw	0
  4128  2834  3400               	retlw	0
  4129  2835  3405               	retlw	5
  4130  2836  3405               	retlw	5
  4131  2837  3401               	retlw	1
  4132  2838  3407               	retlw	7
  4133  2839  3400               	retlw	0
  4134  283A  3400               	retlw	0
  4135  283B  3405               	retlw	5
  4136  283C  3405               	retlw	5
  4137  283D  3402               	retlw	2
  4138  283E  3408               	retlw	8
  4139  283F  3400               	retlw	0
  4140  2840  3400               	retlw	0
  4141  2841  3405               	retlw	5
  4142  2842  3406               	retlw	6
  4143  2843  3400               	retlw	0
  4144  2844  3405               	retlw	5
  4145  2845  3405               	retlw	5
  4146  2846  3405               	retlw	5
  4147  2847  3406               	retlw	6
  4148  2848  3407               	retlw	7
  4149  2849  3400               	retlw	0
  4150  284A  3405               	retlw	5
  4151  284B  3405               	retlw	5
  4152  284C  3405               	retlw	5
  4153  284D  3407               	retlw	7
  4154  284E  3408               	retlw	8
  4155  284F  3400               	retlw	0
  4156  2850  3405               	retlw	5
  4157  2851  3405               	retlw	5
  4158  2852  3405               	retlw	5
  4159  2853  3408               	retlw	8
  4160  2854                     __end_of_nextStateTbl:	
  4161                           
  4162                           	psect	stringtext2
  4163  3000                     __pstringtext2:	
  4164  3000                     _transition_table:	
  4165  3000  3400               	retlw	0
  4166  3001  3404               	retlw	4
  4167  3002  3401               	retlw	1
  4168  3003  3400               	retlw	0
  4169  3004  3482               	retlw	130
  4170  3005  3400               	retlw	0
  4171  3006  3401               	retlw	1
  4172  3007  3400               	retlw	0
  4173  3008  3402               	retlw	2
  4174  3009  3403               	retlw	3
  4175  300A  3401               	retlw	1
  4176  300B  3400               	retlw	0
  4177  300C  3402               	retlw	2
  4178  300D  3403               	retlw	3
  4179  300E  3400               	retlw	0
  4180  300F  3480               	retlw	128
  4181  3010  3445               	retlw	69
  4182  3011  3404               	retlw	4
  4183  3012  3400               	retlw	0
  4184  3013  3400               	retlw	0
  4185  3014  3405               	retlw	5
  4186  3015  3404               	retlw	4
  4187  3016  3406               	retlw	6
  4188  3017  3400               	retlw	0
  4189  3018  3405               	retlw	5
  4190  3019  3400               	retlw	0
  4191  301A  3406               	retlw	6
  4192  301B  3440               	retlw	64
  4193  301C                     __end_of_transition_table:	
  4194                           
  4195                           	psect	stringtext3
  4196  2854                     __pstringtext3:	
  4197  2854                     _stateFuncTbl:	
  4198  2854  3400               	retlw	0
  4199  2855  34D7               	retlw	low _statusView
  4200  2856  3414               	retlw	high _statusView
  4201  2857  3401               	retlw	1
  4202  2858  34B8               	retlw	low _channelView
  4203  2859  340B               	retlw	high _channelView
  4204  285A  3402               	retlw	2
  4205  285B  346B               	retlw	low _channelSetup
  4206  285C  3416               	retlw	high _channelSetup
  4207  285D  3403               	retlw	3
  4208  285E  3418               	retlw	low _setOutputPower
  4209  285F  341D               	retlw	high _setOutputPower
  4210  2860  3404               	retlw	4
  4211  2861  3475               	retlw	low _setLensDia
  4212  2862  3427               	retlw	high _setLensDia
  4213  2863  3405               	retlw	5
  4214  2864  3456               	retlw	low _setup
  4215  2865  341B               	retlw	high _setup
  4216  2866  3406               	retlw	6
  4217  2867  349A               	retlw	low _setDPOffset
  4218  2868  3425               	retlw	high _setDPOffset
  4219  2869  3407               	retlw	7
  4220  286A  342C               	retlw	low _setSkyTemp
  4221  286B  3425               	retlw	high _setSkyTemp
  4222  286C  3408               	retlw	8
  4223  286D  3409               	retlw	low _setFudgeFactor
  4224  286E  3426               	retlw	high _setFudgeFactor
  4225  286F                     __end_of_stateFuncTbl:	
  4226  0018                     _LATAbits	set	24
  4227  000C                     _PORTAbits	set	12
  4228  000B                     _INTCONbits	set	11
  4229  000E                     _PORTCbits	set	14
  4230  0014                     _TRISCbits	set	20
  4231  001A                     _LATCbits	set	26
  4232  000B                     _INTCON	set	11
  4233  0014                     _TRISC	set	20
  4234  0013                     _TRISB	set	19
  4235  0012                     _TRISA	set	18
  4236  0019                     _LATBbits	set	25
  4237  009B                     _ADRESL	set	155
  4238  009C                     _ADRESH	set	156
  4239  009E                     _ADCON1	set	158
  4240  009D                     _ADCON0bits	set	157
  4241  0119                     _RC1REG	set	281
  4242  011D                     _RC1STAbits	set	285
  4243  011A                     _TX1REG	set	282
  4244  011E                     _TX1STA	set	286
  4245  011D                     _RC1STA	set	285
  4246  011B                     _SPBRGL	set	283
  4247  011F                     _BAUD1CON	set	287
  4248  020C                     _TMR1	set	524
  4249  0211                     _T1CLK	set	529
  4250  020E                     _T1CON	set	526
  4251  059C                     _TMR0	set	1436
  4252  059F                     _T0CON1	set	1439
  4253  059E                     _T0CON0	set	1438
  4254  070F                     _PIR3bits	set	1807
  4255  0719                     _PIE3bits	set	1817
  4256  0710                     _PIR4bits	set	1808
  4257  071A                     _PIE4bits	set	1818
  4258  070C                     _PIR0bits	set	1804
  4259  0716                     _PIE0bits	set	1814
  4260  071A                     _PIE4	set	1818
  4261  0719                     _PIE3	set	1817
  4262  0716                     _PIE0	set	1814
  4263  088F                     _OSCCON3bits	set	2191
  4264  088D                     _OSCCON1	set	2189
  4265  0893                     _OSCFRQ	set	2195
  4266  1ECB                     _RX1DTPPSbits	set	7883
  4267  1F3F                     _IOCAFbits	set	7999
  4268  1F54                     _IOCCN	set	8020
  4269  1F3E                     _IOCAN	set	7998
  4270  1F3D                     _IOCAP	set	7997
  4271  1F4E                     _ANSELC	set	8014
  4272  1F43                     _ANSELB	set	8003
  4273  1F38                     _ANSELA	set	7992
  4274  1F26                     _RC6PPS	set	7974
  4275  286F                     STR_1:	
  4276  286F  3454               	retlw	84	;'T'
  4277  2870  3465               	retlw	101	;'e'
  4278  2871  346D               	retlw	109	;'m'
  4279  2872  3470               	retlw	112	;'p'
  4280  2873  3465               	retlw	101	;'e'
  4281  2874  3472               	retlw	114	;'r'
  4282  2875  3461               	retlw	97	;'a'
  4283  2876  3474               	retlw	116	;'t'
  4284  2877  3475               	retlw	117	;'u'
  4285  2878  3472               	retlw	114	;'r'
  4286  2879  3465               	retlw	101	;'e'
  4287  287A  3420               	retlw	32	;' '
  4288  287B  3452               	retlw	82	;'R'
  4289  287C  3465               	retlw	101	;'e'
  4290  287D  346C               	retlw	108	;'l'
  4291  287E  342E               	retlw	46	;'.'
  4292  287F  3468               	retlw	104	;'h'
  4293  2880  3475               	retlw	117	;'u'
  4294  2881  346D               	retlw	109	;'m'
  4295  2882  3469               	retlw	105	;'i'
  4296  2883  3464               	retlw	100	;'d'
  4297  2884  3469               	retlw	105	;'i'
  4298  2885  3474               	retlw	116	;'t'
  4299  2886  3479               	retlw	121	;'y'
  4300  2887  3444               	retlw	68	;'D'
  4301  2888  3465               	retlw	101	;'e'
  4302  2889  3477               	retlw	119	;'w'
  4303  288A  3470               	retlw	112	;'p'
  4304  288B  346F               	retlw	111	;'o'
  4305  288C  3469               	retlw	105	;'i'
  4306  288D  346E               	retlw	110	;'n'
  4307  288E  3474               	retlw	116	;'t'
  4308  288F  3420               	retlw	32	;' '
  4309  2890  3420               	retlw	32	;' '
  4310  2891  3420               	retlw	32	;' '
  4311  2892  3420               	retlw	32	;' '
  4312  2893  3442               	retlw	66	;'B'
  4313  2894  3461               	retlw	97	;'a'
  4314  2895  3474               	retlw	116	;'t'
  4315  2896  342E               	retlw	46	;'.'
  4316  2897  3420               	retlw	32	;' '
  4317  2898  3420               	retlw	32	;' '
  4318  2899  3420               	retlw	32	;' '
  4319  289A  3450               	retlw	80	;'P'
  4320  289B  346F               	retlw	111	;'o'
  4321  289C  3477               	retlw	119	;'w'
  4322  289D  3465               	retlw	101	;'e'
  4323  289E  3472               	retlw	114	;'r'
  4324  289F  3400               	retlw	0
  4325                           
  4326                           	psect	stringtext4
  4327  28A0                     __pstringtext4:	
  4328  28A0                     STR_47:	
  4329  28A0  3444               	retlw	68	;'D'
  4330  28A1  3450               	retlw	80	;'P'
  4331  28A2  3420               	retlw	32	;' '
  4332  28A3  346F               	retlw	111	;'o'
  4333  28A4  3466               	retlw	102	;'f'
  4334  28A5  3466               	retlw	102	;'f'
  4335  28A6  3473               	retlw	115	;'s'
  4336  28A7  3465               	retlw	101	;'e'
  4337  28A8  3474               	retlw	116	;'t'
  4338  28A9  3420               	retlw	32	;' '
  4339  28AA  3420               	retlw	32	;' '
  4340  28AB  3420               	retlw	32	;' '
  4341  28AC  3453               	retlw	83	;'S'
  4342  28AD  346B               	retlw	107	;'k'
  4343  28AE  3479               	retlw	121	;'y'
  4344  28AF  3420               	retlw	32	;' '
  4345  28B0  3474               	retlw	116	;'t'
  4346  28B1  3465               	retlw	101	;'e'
  4347  28B2  346D               	retlw	109	;'m'
  4348  28B3  3470               	retlw	112	;'p'
  4349  28B4  342E               	retlw	46	;'.'
  4350  28B5  3420               	retlw	32	;' '
  4351  28B6  3420               	retlw	32	;' '
  4352  28B7  3420               	retlw	32	;' '
  4353  28B8  3446               	retlw	70	;'F'
  4354  28B9  3475               	retlw	117	;'u'
  4355  28BA  3464               	retlw	100	;'d'
  4356  28BB  3467               	retlw	103	;'g'
  4357  28BC  3465               	retlw	101	;'e'
  4358  28BD  3420               	retlw	32	;' '
  4359  28BE  3466               	retlw	102	;'f'
  4360  28BF  3461               	retlw	97	;'a'
  4361  28C0  3463               	retlw	99	;'c'
  4362  28C1  3474               	retlw	116	;'t'
  4363  28C2  346F               	retlw	111	;'o'
  4364  28C3  3472               	retlw	114	;'r'
  4365  28C4  3400               	retlw	0
  4366                           
  4367                           	psect	stringtext5
  4368  301C                     __pstringtext5:	
  4369  301C                     STR_27:	
  4370  301C  344E               	retlw	78	;'N'
  4371  301D  346F               	retlw	111	;'o'
  4372  301E  3474               	retlw	116	;'t'
  4373  301F  3420               	retlw	32	;' '
  4374  3020  3420               	retlw	32	;' '
  4375  3021  3420               	retlw	32	;' '
  4376  3022  3420               	retlw	32	;' '
  4377  3023  3420               	retlw	32	;' '
  4378  3024  3420               	retlw	32	;' '
  4379  3025  3420               	retlw	32	;' '
  4380  3026  3420               	retlw	32	;' '
  4381  3027  3420               	retlw	32	;' '
  4382  3028  3400               	retlw	0
  4383                           
  4384                           	psect	stringtext6
  4385  3029                     __pstringtext6:	
  4386  3029                     STR_31:	
  4387  3029  3452               	retlw	82	;'R'
  4388  302A  3465               	retlw	101	;'e'
  4389  302B  3473               	retlw	115	;'s'
  4390  302C  3465               	retlw	101	;'e'
  4391  302D  3474               	retlw	116	;'t'
  4392  302E  3420               	retlw	32	;' '
  4393  302F  3420               	retlw	32	;' '
  4394  3030  3420               	retlw	32	;' '
  4395  3031  3420               	retlw	32	;' '
  4396  3032  3420               	retlw	32	;' '
  4397  3033  3420               	retlw	32	;' '
  4398  3034  3420               	retlw	32	;' '
  4399  3035  3400               	retlw	0
  4400                           
  4401                           	psect	stringtext7
  4402  3036                     __pstringtext7:	
  4403  3036                     STR_29:	
  4404  3036  3454               	retlw	84	;'T'
  4405  3037  3465               	retlw	101	;'e'
  4406  3038  3473               	retlw	115	;'s'
  4407  3039  3474               	retlw	116	;'t'
  4408  303A  3469               	retlw	105	;'i'
  4409  303B  346E               	retlw	110	;'n'
  4410  303C  3467               	retlw	103	;'g'
  4411  303D  3420               	retlw	32	;' '
  4412  303E  3420               	retlw	32	;' '
  4413  303F  3420               	retlw	32	;' '
  4414  3040  3420               	retlw	32	;' '
  4415  3041  3420               	retlw	32	;' '
  4416  3042  3400               	retlw	0
  4417                           
  4418                           	psect	stringtext8
  4419  3043                     __pstringtext8:	
  4420  3043                     STR_32:	
  4421  3043  3463               	retlw	99	;'c'
  4422  3044  3468               	retlw	104	;'h'
  4423  3045  3461               	retlw	97	;'a'
  4424  3046  346E               	retlw	110	;'n'
  4425  3047  346E               	retlw	110	;'n'
  4426  3048  3465               	retlw	101	;'e'
  4427  3049  346C               	retlw	108	;'l'
  4428  304A  3420               	retlw	32	;' '
  4429  304B  3420               	retlw	32	;' '
  4430  304C  3420               	retlw	32	;' '
  4431  304D  3420               	retlw	32	;' '
  4432  304E  3420               	retlw	32	;' '
  4433  304F  3400               	retlw	0
  4434                           
  4435                           	psect	stringtext9
  4436  3050                     __pstringtext9:	
  4437  3050                     STR_18:	
  4438  3050  3453               	retlw	83	;'S'
  4439  3051  3468               	retlw	104	;'h'
  4440  3052  346F               	retlw	111	;'o'
  4441  3053  3472               	retlw	114	;'r'
  4442  3054  3474               	retlw	116	;'t'
  4443  3055  3465               	retlw	101	;'e'
  4444  3056  3464               	retlw	100	;'d'
  4445  3057  3421               	retlw	33	;'!'
  4446  3058  3420               	retlw	32	;' '
  4447  3059  3420               	retlw	32	;' '
  4448  305A  3420               	retlw	32	;' '
  4449  305B  3420               	retlw	32	;' '
  4450  305C  3400               	retlw	0
  4451                           
  4452                           	psect	stringtext10
  4453  305D                     __pstringtext10:	
  4454  305D                     STR_13:	
  4455  305D  3444               	retlw	68	;'D'
  4456  305E  3469               	retlw	105	;'i'
  4457  305F  3473               	retlw	115	;'s'
  4458  3060  3461               	retlw	97	;'a'
  4459  3061  3462               	retlw	98	;'b'
  4460  3062  346C               	retlw	108	;'l'
  4461  3063  3465               	retlw	101	;'e'
  4462  3064  3464               	retlw	100	;'d'
  4463  3065  3420               	retlw	32	;' '
  4464  3066  3420               	retlw	32	;' '
  4465  3067  3420               	retlw	32	;' '
  4466  3068  3420               	retlw	32	;' '
  4467  3069  3400               	retlw	0
  4468                           
  4469                           	psect	stringtext11
  4470  306A                     __pstringtext11:	
  4471  306A                     STR_30:	
  4472  306A  3468               	retlw	104	;'h'
  4473  306B  3465               	retlw	101	;'e'
  4474  306C  3461               	retlw	97	;'a'
  4475  306D  3474               	retlw	116	;'t'
  4476  306E  3465               	retlw	101	;'e'
  4477  306F  3472               	retlw	114	;'r'
  4478  3070  342E               	retlw	46	;'.'
  4479  3071  342E               	retlw	46	;'.'
  4480  3072  342E               	retlw	46	;'.'
  4481  3073  3420               	retlw	32	;' '
  4482  3074  3420               	retlw	32	;' '
  4483  3075  3420               	retlw	32	;' '
  4484  3076  3400               	retlw	0
  4485                           
  4486                           	psect	stringtext12
  4487  3077                     __pstringtext12:	
  4488  3077                     STR_55:	
  4489  3077  3453               	retlw	83	;'S'
  4490  3078  346B               	retlw	107	;'k'
  4491  3079  3479               	retlw	121	;'y'
  4492  307A  3420               	retlw	32	;' '
  4493  307B  3474               	retlw	116	;'t'
  4494  307C  3465               	retlw	101	;'e'
  4495  307D  346D               	retlw	109	;'m'
  4496  307E  3470               	retlw	112	;'p'
  4497  307F  342E               	retlw	46	;'.'
  4498  3080  3420               	retlw	32	;' '
  4499  3081  3420               	retlw	32	;' '
  4500  3082  3420               	retlw	32	;' '
  4501  3083  3400               	retlw	0
  4502                           
  4503                           	psect	stringtext13
  4504  3084                     __pstringtext13:	
  4505  3084                     STR_28:	
  4506  3084  3463               	retlw	99	;'c'
  4507  3085  346F               	retlw	111	;'o'
  4508  3086  346E               	retlw	110	;'n'
  4509  3087  346E               	retlw	110	;'n'
  4510  3088  3465               	retlw	101	;'e'
  4511  3089  3463               	retlw	99	;'c'
  4512  308A  3474               	retlw	116	;'t'
  4513  308B  3465               	retlw	101	;'e'
  4514  308C  3464               	retlw	100	;'d'
  4515  308D  3420               	retlw	32	;' '
  4516  308E  3420               	retlw	32	;' '
  4517  308F  3420               	retlw	32	;' '
  4518  3090  3400               	retlw	0
  4519                           
  4520                           	psect	stringtext14
  4521  3091                     __pstringtext14:	
  4522  3091                     STR_52:	
  4523  3091  3444               	retlw	68	;'D'
  4524  3092  3450               	retlw	80	;'P'
  4525  3093  3420               	retlw	32	;' '
  4526  3094  346F               	retlw	111	;'o'
  4527  3095  3466               	retlw	102	;'f'
  4528  3096  3466               	retlw	102	;'f'
  4529  3097  3473               	retlw	115	;'s'
  4530  3098  3465               	retlw	101	;'e'
  4531  3099  3474               	retlw	116	;'t'
  4532  309A  3420               	retlw	32	;' '
  4533  309B  3420               	retlw	32	;' '
  4534  309C  3420               	retlw	32	;' '
  4535  309D  3400               	retlw	0
  4536                           
  4537                           	psect	stringtext15
  4538  309E                     __pstringtext15:	
  4539  309E                     STR_33:	
  4540  309E  344C               	retlw	76	;'L'
  4541  309F  3465               	retlw	101	;'e'
  4542  30A0  346E               	retlw	110	;'n'
  4543  30A1  3473               	retlw	115	;'s'
  4544  30A2  3420               	retlw	32	;' '
  4545  30A3  3464               	retlw	100	;'d'
  4546  30A4  3469               	retlw	105	;'i'
  4547  30A5  3461               	retlw	97	;'a'
  4548  30A6  346D               	retlw	109	;'m'
  4549  30A7  342E               	retlw	46	;'.'
  4550  30A8  3420               	retlw	32	;' '
  4551  30A9  3420               	retlw	32	;' '
  4552  30AA  3400               	retlw	0
  4553                           
  4554                           	psect	stringtext16
  4555  30AB                     __pstringtext16:	
  4556  30AB                     STR_42:	
  4557  30AB  3448               	retlw	72	;'H'
  4558  30AC  346F               	retlw	111	;'o'
  4559  30AD  346C               	retlw	108	;'l'
  4560  30AE  3464               	retlw	100	;'d'
  4561  30AF  3420               	retlw	32	;' '
  4562  30B0  3462               	retlw	98	;'b'
  4563  30B1  3475               	retlw	117	;'u'
  4564  30B2  3474               	retlw	116	;'t'
  4565  30B3  3474               	retlw	116	;'t'
  4566  30B4  346F               	retlw	111	;'o'
  4567  30B5  346E               	retlw	110	;'n'
  4568  30B6  3420               	retlw	32	;' '
  4569  30B7  3400               	retlw	0
  4570                           
  4571                           	psect	stringtext17
  4572  30B8                     __pstringtext17:	
  4573  30B8                     STR_12:	
  4574  30B8  3450               	retlw	80	;'P'
  4575  30B9  346C               	retlw	108	;'l'
  4576  30BA  3465               	retlw	101	;'e'
  4577  30BB  3461               	retlw	97	;'a'
  4578  30BC  3473               	retlw	115	;'s'
  4579  30BD  3465               	retlw	101	;'e'
  4580  30BE  3420               	retlw	32	;' '
  4581  30BF  3477               	retlw	119	;'w'
  4582  30C0  3461               	retlw	97	;'a'
  4583  30C1  3469               	retlw	105	;'i'
  4584  30C2  3474               	retlw	116	;'t'
  4585  30C3  3421               	retlw	33	;'!'
  4586  30C4  3400               	retlw	0
  4587                           
  4588                           	psect	stringtext18
  4589  30C5                     __pstringtext18:	
  4590  30C5                     STR_19:	
  4591  30C5  344F               	retlw	79	;'O'
  4592  30C6  3476               	retlw	118	;'v'
  4593  30C7  3465               	retlw	101	;'e'
  4594  30C8  3472               	retlw	114	;'r'
  4595  30C9  3463               	retlw	99	;'c'
  4596  30CA  3475               	retlw	117	;'u'
  4597  30CB  3472               	retlw	114	;'r'
  4598  30CC  3472               	retlw	114	;'r'
  4599  30CD  3465               	retlw	101	;'e'
  4600  30CE  346E               	retlw	110	;'n'
  4601  30CF  3474               	retlw	116	;'t'
  4602  30D0  3421               	retlw	33	;'!'
  4603  30D1  3400               	retlw	0
  4604                           
  4605                           	psect	stringtext19
  4606  30D2                     __pstringtext19:	
  4607  30D2                     STR_17:	
  4608  30D2  3444               	retlw	68	;'D'
  4609  30D3  3469               	retlw	105	;'i'
  4610  30D4  3473               	retlw	115	;'s'
  4611  30D5  3463               	retlw	99	;'c'
  4612  30D6  346F               	retlw	111	;'o'
  4613  30D7  346E               	retlw	110	;'n'
  4614  30D8  346E               	retlw	110	;'n'
  4615  30D9  3465               	retlw	101	;'e'
  4616  30DA  3463               	retlw	99	;'c'
  4617  30DB  3474               	retlw	116	;'t'
  4618  30DC  3465               	retlw	101	;'e'
  4619  30DD  3464               	retlw	100	;'d'
  4620  30DE  3400               	retlw	0
  4621                           
  4622                           	psect	stringtext20
  4623  30DF                     __pstringtext20:	
  4624  30DF                     STR_43:	
  4625  30DF  3474               	retlw	116	;'t'
  4626  30E0  346F               	retlw	111	;'o'
  4627  30E1  3420               	retlw	32	;' '
  4628  30E2  3472               	retlw	114	;'r'
  4629  30E3  3465               	retlw	101	;'e'
  4630  30E4  342D               	retlw	45	;'-'
  4631  30E5  3465               	retlw	101	;'e'
  4632  30E6  346E               	retlw	110	;'n'
  4633  30E7  3461               	retlw	97	;'a'
  4634  30E8  3462               	retlw	98	;'b'
  4635  30E9  346C               	retlw	108	;'l'
  4636  30EA  3465               	retlw	101	;'e'
  4637  30EB  3400               	retlw	0
  4638                           
  4639                           	psect	stringtext21
  4640  30EC                     __pstringtext21:	
  4641  30EC                     STR_20:	
  4642  30EC  344F               	retlw	79	;'O'
  4643  30ED  346E               	retlw	110	;'n'
  4644  30EE  3464               	retlw	100	;'d'
  4645  30EF  3472               	retlw	114	;'r'
  4646  30F0  3465               	retlw	101	;'e'
  4647  30F1  3453               	retlw	83	;'S'
  4648  30F2  3470               	retlw	112	;'p'
  4649  30F3  3465               	retlw	101	;'e'
  4650  30F4  3463               	retlw	99	;'c'
  4651  30F5  3469               	retlw	105	;'i'
  4652  30F6  3461               	retlw	97	;'a'
  4653  30F7  346C               	retlw	108	;'l'
  4654  30F8  3400               	retlw	0
  4655                           
  4656                           	psect	stringtext22
  4657  30F9                     __pstringtext22:	
  4658  30F9                     STR_21:	
  4659  30F9  344F               	retlw	79	;'O'
  4660  30FA  3475               	retlw	117	;'u'
  4661  30FB  3474               	retlw	116	;'t'
  4662  30FC  3470               	retlw	112	;'p'
  4663  30FD  3475               	retlw	117	;'u'
  4664  30FE  3474               	retlw	116	;'t'
  4665  30FF  3420               	retlw	32	;' '
  4666  3100  3470               	retlw	112	;'p'
  4667  3101  346F               	retlw	111	;'o'
  4668  3102  3477               	retlw	119	;'w'
  4669  3103  3465               	retlw	101	;'e'
  4670  3104  3472               	retlw	114	;'r'
  4671  3105  3400               	retlw	0
  4672                           
  4673                           	psect	stringtext23
  4674  3106                     __pstringtext23:	
  4675  3106                     STR_62:	
  4676  3106  3454               	retlw	84	;'T'
  4677  3107  3455               	retlw	85	;'U'
  4678  3108  3452               	retlw	82	;'R'
  4679  3109  344E               	retlw	78	;'N'
  4680  310A  3449               	retlw	73	;'I'
  4681  310B  344E               	retlw	78	;'N'
  4682  310C  3447               	retlw	71	;'G'
  4683  310D  3420               	retlw	32	;' '
  4684  310E  344F               	retlw	79	;'O'
  4685  310F  3446               	retlw	70	;'F'
  4686  3110  3446               	retlw	70	;'F'
  4687  3111  3400               	retlw	0
  4688                           
  4689                           	psect	stringtext24
  4690  3112                     __pstringtext24:	
  4691  3112                     STR_61:	
  4692  3112  344D               	retlw	77	;'M'
  4693  3113  3465               	retlw	101	;'e'
  4694  3114  346E               	retlw	110	;'n'
  4695  3115  3475               	retlw	117	;'u'
  4696  3116  3420               	retlw	32	;' '
  4697  3117  3465               	retlw	101	;'e'
  4698  3118  3472               	retlw	114	;'r'
  4699  3119  3472               	retlw	114	;'r'
  4700  311A  346F               	retlw	111	;'o'
  4701  311B  3472               	retlw	114	;'r'
  4702  311C  3400               	retlw	0
  4703                           
  4704                           	psect	stringtext25
  4705  311D                     __pstringtext25:	
  4706  311D                     STR_50:	
  4707  311D  3401               	retlw	1
  4708  311E  3420               	retlw	32	;' '
  4709  311F  3420               	retlw	32	;' '
  4710  3120  3420               	retlw	32	;' '
  4711  3121  3420               	retlw	32	;' '
  4712  3122  3420               	retlw	32	;' '
  4713  3123  3420               	retlw	32	;' '
  4714  3124  3420               	retlw	32	;' '
  4715  3125  3420               	retlw	32	;' '
  4716  3126  3400               	retlw	0
  4717                           
  4718                           	psect	stringtext26
  4719  3127                     __pstringtext26:	
  4720  3127                     STR_57:	
  4721  3127  3401               	retlw	1
  4722  3128  3420               	retlw	32	;' '
  4723  3129  3403               	retlw	3
  4724  312A  3420               	retlw	32	;' '
  4725  312B  3420               	retlw	32	;' '
  4726  312C  3420               	retlw	32	;' '
  4727  312D  3420               	retlw	32	;' '
  4728  312E  3420               	retlw	32	;' '
  4729  312F  3400               	retlw	0
  4730                           
  4731                           	psect	stringtext27
  4732  3130                     __pstringtext27:	
  4733  3130                     STR_60:	
  4734  3130  3420               	retlw	32	;' '
  4735  3131  3403               	retlw	3
  4736  3132  3420               	retlw	32	;' '
  4737  3133  3420               	retlw	32	;' '
  4738  3134  3420               	retlw	32	;' '
  4739  3135  3420               	retlw	32	;' '
  4740  3136  3420               	retlw	32	;' '
  4741  3137  3420               	retlw	32	;' '
  4742  3138  3400               	retlw	0
  4743                           
  4744                           	psect	stringtext28
  4745  3139                     __pstringtext28:	
  4746  3139                     STR_26:	
  4747  3139  3457               	retlw	87	;'W'
  4748  313A  3420               	retlw	32	;' '
  4749  313B  346D               	retlw	109	;'m'
  4750  313C  3461               	retlw	97	;'a'
  4751  313D  346E               	retlw	110	;'n'
  4752  313E  3475               	retlw	117	;'u'
  4753  313F  3461               	retlw	97	;'a'
  4754  3140  346C               	retlw	108	;'l'
  4755  3141  3400               	retlw	0
  4756                           
  4757                           	psect	stringtext29
  4758  3142                     __pstringtext29:	
  4759  3142                     STR_46:	
  4760  3142  3420               	retlw	32	;' '
  4761  3143  3469               	retlw	105	;'i'
  4762  3144  346E               	retlw	110	;'n'
  4763  3145  3463               	retlw	99	;'c'
  4764  3146  3468               	retlw	104	;'h'
  4765  3147  3420               	retlw	32	;' '
  4766  3148  3403               	retlw	3
  4767  3149  3400               	retlw	0
  4768                           
  4769                           	psect	stringtext30
  4770  314A                     __pstringtext30:	
  4771  314A                     STR_41:	
  4772  314A  3457               	retlw	87	;'W'
  4773  314B  3420               	retlw	32	;' '
  4774  314C  346D               	retlw	109	;'m'
  4775  314D  3461               	retlw	97	;'a'
  4776  314E  346E               	retlw	110	;'n'
  4777  314F  342E               	retlw	46	;'.'
  4778  3150  3403               	retlw	3
  4779  3151  3400               	retlw	0
  4780                           
  4781                           	psect	stringtext31
  4782  3152                     __pstringtext31:	
  4783  3152                     STR_4:	
  4784  3152  3401               	retlw	1
  4785  3153  3420               	retlw	32	;' '
  4786  3154  3420               	retlw	32	;' '
  4787  3155  3420               	retlw	32	;' '
  4788  3156  3420               	retlw	32	;' '
  4789  3157  3420               	retlw	32	;' '
  4790  3158  3420               	retlw	32	;' '
  4791  3159  3400               	retlw	0
  4792                           
  4793                           	psect	stringtext32
  4794  315A                     __pstringtext32:	
  4795  315A                     STR_23:	
  4796  315A  3420               	retlw	32	;' '
  4797  315B  346F               	retlw	111	;'o'
  4798  315C  3466               	retlw	102	;'f'
  4799  315D  3466               	retlw	102	;'f'
  4800  315E  3420               	retlw	32	;' '
  4801  315F  3420               	retlw	32	;' '
  4802  3160  3420               	retlw	32	;' '
  4803  3161  3400               	retlw	0
  4804                           
  4805                           	psect	stringtext33
  4806  3162                     __pstringtext33:	
  4807  3162                     STR_34:	
  4808  3162  3420               	retlw	32	;' '
  4809  3163  3469               	retlw	105	;'i'
  4810  3164  346E               	retlw	110	;'n'
  4811  3165  3463               	retlw	99	;'c'
  4812  3166  3468               	retlw	104	;'h'
  4813  3167  3420               	retlw	32	;' '
  4814  3168  3420               	retlw	32	;' '
  4815  3169  3400               	retlw	0
  4816                           
  4817                           	psect	stringtext34
  4818  316A                     __pstringtext34:	
  4819  316A                     STR_25:	
  4820  316A  3420               	retlw	32	;' '
  4821  316B  3461               	retlw	97	;'a'
  4822  316C  3475               	retlw	117	;'u'
  4823  316D  3474               	retlw	116	;'t'
  4824  316E  346F               	retlw	111	;'o'
  4825  316F  3420               	retlw	32	;' '
  4826  3170  3420               	retlw	32	;' '
  4827  3171  3400               	retlw	0
  4828                           
  4829                           	psect	stringtext35
  4830  3172                     __pstringtext35:	
  4831  3172                     STR_37:	
  4832  3172  3420               	retlw	32	;' '
  4833  3173  346F               	retlw	111	;'o'
  4834  3174  3466               	retlw	102	;'f'
  4835  3175  3466               	retlw	102	;'f'
  4836  3176  3420               	retlw	32	;' '
  4837  3177  3403               	retlw	3
  4838  3178  3400               	retlw	0
  4839                           
  4840                           	psect	stringtext36
  4841  3179                     __pstringtext36:	
  4842  3179                     STR_39:	
  4843  3179  3420               	retlw	32	;' '
  4844  317A  3461               	retlw	97	;'a'
  4845  317B  3475               	retlw	117	;'u'
  4846  317C  3474               	retlw	116	;'t'
  4847  317D  346F               	retlw	111	;'o'
  4848  317E  3403               	retlw	3
  4849  317F  3400               	retlw	0
  4850                           
  4851                           	psect	stringtext37
  4852  3180                     __pstringtext37:	
  4853  3180                     STR_53:	
  4854  3180  3474               	retlw	116	;'t'
  4855  3181  3465               	retlw	101	;'e'
  4856  3182  346D               	retlw	109	;'m'
  4857  3183  3470               	retlw	112	;'p'
  4858  3184  342E               	retlw	46	;'.'
  4859  3185  3404               	retlw	4
  4860  3186  3400               	retlw	0
  4861                           
  4862                           	psect	stringtext38
  4863  3187                     __pstringtext38:	
  4864  3187                     STR_5:	
  4865  3187  3425               	retlw	37	;'%'
  4866  3188  3420               	retlw	32	;' '
  4867  3189  3420               	retlw	32	;' '
  4868  318A  3420               	retlw	32	;' '
  4869  318B  3420               	retlw	32	;' '
  4870  318C  3420               	retlw	32	;' '
  4871  318D  3400               	retlw	0
  4872                           
  4873                           	psect	stringtext39
  4874  318E                     __pstringtext39:	
  4875  318E                     STR_48:	
  4876  318E  3474               	retlw	116	;'t'
  4877  318F  3465               	retlw	101	;'e'
  4878  3190  346D               	retlw	109	;'m'
  4879  3191  3470               	retlw	112	;'p'
  4880  3192  342E               	retlw	46	;'.'
  4881  3193  3420               	retlw	32	;' '
  4882  3194  3400               	retlw	0
  4883                           
  4884                           	psect	stringtext40
  4885  3195                     __pstringtext40:	
  4886  3195                     STR_36:	
  4887  3195  3404               	retlw	4
  4888  3196  3443               	retlw	67	;'C'
  4889  3197  3468               	retlw	104	;'h'
  4890  3198  342E               	retlw	46	;'.'
  4891  3199  3420               	retlw	32	;' '
  4892  319A  3400               	retlw	0
  4893                           
  4894                           	psect	stringtext41
  4895  319B                     __pstringtext41:	
  4896  319B                     STR_63:	
  4897  319B  3449               	retlw	73	;'I'
  4898  319C  344E               	retlw	78	;'N'
  4899  319D  3420               	retlw	32	;' '
  4900  319E  3400               	retlw	0
  4901                           
  4902                           	psect	stringtext42
  4903  319F                     __pstringtext42:	
  4904  319F                     STR_2:	
  4905  319F  3401               	retlw	1
  4906  31A0  3420               	retlw	32	;' '
  4907  31A1  3402               	retlw	2
  4908  31A2  3400               	retlw	0
  4909                           
  4910                           	psect	stringtext43
  4911  31A3                     __pstringtext43:	
  4912  31A3                     STR_7:	
  4913  31A3  3456               	retlw	86	;'V'
  4914  31A4  3420               	retlw	32	;' '
  4915  31A5  3420               	retlw	32	;' '
  4916  31A6  3400               	retlw	0
  4917                           
  4918                           	psect	stringtext44
  4919  31A7                     __pstringtext44:	
  4920  31A7                     STR_9:	
  4921  31A7  3443               	retlw	67	;'C'
  4922  31A8  3468               	retlw	104	;'h'
  4923  31A9  3420               	retlw	32	;' '
  4924  31AA  3400               	retlw	0
  4925                           
  4926                           	psect	stringtext45
  4927  31AB                     __pstringtext45:	
  4928  31AB                     STR_54:	
  4929  31AB  3401               	retlw	1
  4930  31AC  3403               	retlw	3
  4931  31AD  3400               	retlw	0
  4932                           
  4933                           	psect	stringtext46
  4934  31AE                     __pstringtext46:	
  4935  31AE                     STR_49:	
  4936  31AE  3401               	retlw	1
  4937  31AF  3420               	retlw	32	;' '
  4938  31B0  3400               	retlw	0
  4939                           
  4940                           	psect	stringtext47
  4941  31B1                     __pstringtext47:	
  4942  31B1                     STR_11:	
  4943  31B1  3422               	retlw	34	;'"'
  4944  31B2  3420               	retlw	32	;' '
  4945  31B3  3400               	retlw	0
  4946                           
  4947                           	psect	stringtext48
  4948  31B4                     __pstringtext48:	
  4949  31B4                     STR_10:	
  4950  31B4  343A               	retlw	58	;':'
  4951  31B5  3420               	retlw	32	;' '
  4952  31B6  3400               	retlw	0
  4953                           
  4954                           	psect	stringtext49
  4955  31B7                     __pstringtext49:	
  4956  31B7                     STR_14:	
  4957  31B7  3457               	retlw	87	;'W'
  4958  31B8  3420               	retlw	32	;' '
  4959  31B9  3400               	retlw	0
  4960                           
  4961                           	psect	stringtext50
  4962  31BA                     __pstringtext50:	
  4963  31BA                     STR_3:	
  4964  31BA  3401               	retlw	1
  4965  31BB  3400               	retlw	0
  4966                           
  4967                           	psect	stringtext51
  4968  31BC                     __pstringtext51:	
  4969  31BC                     STR_8:	
  4970  31BC  3457               	retlw	87	;'W'
  4971  31BD  3400               	retlw	0
  4972                           
  4973                           	psect	stringtext52
  4974  0000                     __pstringtext52:	
  4975  3185                     
  4976                           ; #config settings
  4977  0000                     
  4978                           	psect	cinit
  4979  0071                     start_initialization:	
  4980  0071                     __initialization:		;BIGRAM
  4981                           
  4982                           ; Initialize objects allocated to BANK1
  4983  0071  0141               	movlb	1	; select bank1
  4984  0072  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  4985  0075  00EE               	movwf	__pdataBANK1& (0+127)
  4986  0076  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  4987  0079  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  4988                           
  4989                           ; Initialize objects allocated to BANK2
  4990  007A  30FE               	movlw	low __pidataBANK2
  4991  007B  0084               	movwf	4
  4992  007C  30AE               	movlw	(high __pidataBANK2)| (0+128)
  4993  007D  0085               	movwf	5
  4994  007E  3063               	movlw	low __pdataBANK2
  4995  007F  0086               	movwf	6
  4996  0080  3001               	movlw	high __pdataBANK2
  4997  0081  0087               	movwf	7
  4998  0082  3000               	movlw	0
  4999  0083  00FF               	movwf	btemp+1
  5000  0084  3008               	movlw	8
  5001  0085  31AF  276E  3180   	fcall	init_ram
  5002                           
  5003                           ; Initialize objects allocated to BANK3
  5004  0088  3032               	movlw	low __pidataBANK3
  5005  0089  0084               	movwf	4
  5006  008A  30A1               	movlw	(high __pidataBANK3)| (0+128)
  5007  008B  0085               	movwf	5
  5008  008C  30A0               	movlw	low __pdataBANK3
  5009  008D  0086               	movwf	6
  5010  008E  3001               	movlw	high __pdataBANK3
  5011  008F  0087               	movwf	7
  5012  0090  3000               	movlw	0
  5013  0091  00FF               	movwf	btemp+1
  5014  0092  3032               	movlw	50
  5015  0093  31AF  276E  3180   	fcall	init_ram
  5016                           
  5017                           ; Clear objects allocated to BIGRAM
  5018  0096  3043               	movlw	low (0+10051)
  5019  0097  0084               	movwf	4
  5020  0098  3027               	movlw	high (0+10051)
  5021  0099  0085               	movwf	5
  5022  009A  30AD               	movlw	173
  5023  009B  00FE               	movwf	btemp
  5024  009C  3000               	movlw	0
  5025  009D  00FF               	movwf	btemp+1
  5026  009E  31AF  2762  3180   	fcall	clear_ram0
  5027                           
  5028                           ; Clear objects allocated to COMMON
  5029  00A1  01FC               	clrf	__pbssCOMMON& (0+127)
  5030  00A2  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5031                           
  5032                           ; Clear objects allocated to BANK1
  5033  00A3  30DE               	movlw	low __pbssBANK1
  5034  00A4  0084               	movwf	4
  5035  00A5  3000               	movlw	high __pbssBANK1
  5036  00A6  0085               	movwf	5
  5037  00A7  3010               	movlw	16
  5038  00A8  00FE               	movwf	btemp
  5039  00A9  3000               	movlw	0
  5040  00AA  00FF               	movwf	btemp+1
  5041  00AB  31AF  2762  3180   	fcall	clear_ram0
  5042                           
  5043                           ; Clear objects allocated to BANK2
  5044  00AE  3020               	movlw	low __pbssBANK2
  5045  00AF  0084               	movwf	4
  5046  00B0  3001               	movlw	high __pbssBANK2
  5047  00B1  0085               	movwf	5
  5048  00B2  3043               	movlw	67
  5049  00B3  00FE               	movwf	btemp
  5050  00B4  3000               	movlw	0
  5051  00B5  00FF               	movwf	btemp+1
  5052  00B6  31AF  2762         	fcall	clear_ram0
  5053  00B8                     end_of_initialization:	
  5054                           ;End of C runtime variable initialization code
  5055                           
  5056  00B8                     __end_of__initialization:	
  5057  00B8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5058  00B9  0140               	movlb	0
  5059  00BA  3198  28B3         	ljmp	_main	;jump to C main() function
  5060                           
  5061                           	psect	bssCOMMON
  5062  007C                     __pbssCOMMON:	
  5063  007C                     _curRotState:	
  5064  007C                     	ds	1
  5065  007D                     _pbState:	
  5066  007D                     	ds	1
  5067                           
  5068                           	psect	bssBANK1
  5069  00DE                     __pbssBANK1:	
  5070  00DE                     checkSensor@state:	
  5071  00DE                     	ds	1
  5072  00DF                     checkChannelStatus@ready:	
  5073  00DF                     	ds	1
  5074  00E0                     checkChannelStatus@samples:	
  5075  00E0                     	ds	1
  5076  00E1                     checkChannelStatus@channel:	
  5077  00E1                     	ds	1
  5078  00E2                     paging@lastDir:	
  5079  00E2                     	ds	1
  5080  00E3                     menu@state:	
  5081  00E3                     	ds	1
  5082  00E4                     setup@page:	
  5083  00E4                     	ds	1
  5084  00E5                     channelSetup@page:	
  5085  00E5                     	ds	1
  5086  00E6                     channelView@page:	
  5087  00E6                     	ds	1
  5088  00E7                     statusView@page:	
  5089  00E7                     	ds	1
  5090  00E8                     _selectedChannel:	
  5091  00E8                     	ds	1
  5092  00E9                     uartReceiveISR@checksum:	
  5093  00E9                     	ds	1
  5094  00EA                     _dataReadyFlag:	
  5095  00EA                     	ds	1
  5096  00EB                     _rxCount:	
  5097  00EB                     	ds	1
  5098  00EC                     _rotDir:	
  5099  00EC                     	ds	1
  5100  00ED                     _tick10ms:	
  5101  00ED                     	ds	1
  5102                           
  5103                           	psect	dataBANK1
  5104  00EE                     __pdataBANK1:	
  5105  00EE                     statusView@prevSensorStat:	
  5106  00EE                     	ds	1
  5107  00EF                     _g_updateScreen:	
  5108  00EF                     	ds	1
  5109                           
  5110                           	psect	bssBANK2
  5111  0120                     __pbssBANK2:	
  5112  0120                     checkSensor@sensorTimeout:	
  5113  0120                     	ds	4
  5114  0124                     checkSensor@sensorUpdateInterval:	
  5115  0124                     	ds	4
  5116  0128                     _tick100ms:	
  5117  0128                     	ds	4
  5118  012C                     getAnalogValues@avgI:	
  5119  012C                     	ds	2
  5120  012E                     getAnalogValues@avgV:	
  5121  012E                     	ds	2
  5122  0130                     getAnalogValues@avgT:	
  5123  0130                     	ds	2
  5124  0132                     checkChannelStatus@avg:	
  5125  0132                     	ds	2
  5126  0134                     _rxOErrCount:	
  5127  0134                     	ds	1
  5128  0135                     _rxFErrCount:	
  5129  0135                     	ds	1
  5130  0136                     uartReceiveISR@buffer:	
  5131  0136                     	ds	20
  5132  014A                     _dataPacket:	
  5133  014A                     	ds	15
  5134  0159                     _str:	
  5135  0159                     	ds	10
  5136                           
  5137                           	psect	dataBANK2
  5138  0163                     __pdataBANK2:	
  5139  0163                     OLED_print_xy@F7968:	
  5140  0163                     	ds	4
  5141  0167                     OLED_setCursor@F7960:	
  5142  0167                     	ds	4
  5143                           
  5144                           	psect	dataBANK3
  5145  01A0                     __pdataBANK3:	
  5146  01A0                     OLED_loadSpecialChars@F7973:	
  5147  01A0                     	ds	32
  5148  01C0                     _p_fct:	
  5149  01C0                     	ds	18
  5150                           
  5151                           	psect	inittext
  5152  2F6E                     init_ram:	
  5153  2F6E  00FE               	movwf	126
  5154  2F6F                     initloop:	
  5155  2F6F  0012               	moviw fsr0++
  5156  2F70  001E               	movwi fsr1++
  5157  2F71  3001               	movlw	1
  5158  2F72  02FE               	subwf	126,f
  5159  2F73  3000               	movlw	0
  5160  2F74  3BFF               	subwfb	127,f
  5161  2F75  087F               	movf	127,w
  5162  2F76  047E               	iorwf	126,w
  5163  2F77  1903               	btfsc	3,2
  5164  2F78  3400               	retlw	0
  5165  2F79  2F6F               	goto	initloop
  5166                           
  5167                           	psect	clrtext
  5168  2F62                     clear_ram0:	
  5169                           ;	Called with FSR0 containing the base address, and
  5170                           ;	btemp/btemp+1 has the size to clear
  5171                           
  5172  2F62  0064               	clrwdt	;clear the watchdog before getting into this loop
  5173  2F63                     clrloop0:	
  5174  2F63  0180               	clrf	0	;clear RAM location pointed to by FSR
  5175  2F64  3101               	addfsr 0,1
  5176  2F65  3001               	movlw	1
  5177  2F66  02FE               	subwf	126,f
  5178  2F67  3000               	movlw	0
  5179  2F68  3BFF               	subwfb	127,f
  5180  2F69  087F               	movf	127,w
  5181  2F6A  047E               	iorwf	126,w
  5182  2F6B  1903               	btfsc	3,2
  5183  2F6C  3400               	retlw	0	;all done for this memory range, return
  5184  2F6D  2F63               	goto	clrloop0	;have we reached the end yet?
  5185                           
  5186                           	psect	cstackBANK1
  5187  00A0                     __pcstackBANK1:	
  5188  00A0                     ??___flge:	
  5189  00A0                     ??___fltol:	
  5190                           ; 1 bytes @ 0x0
  5191                           
  5192  00A0                     calcRequiredPower@p:	
  5193                           ; 1 bytes @ 0x0
  5194                           
  5195                           
  5196                           ; 4 bytes @ 0x0
  5197  00A0                     	ds	4
  5198  00A4                     ?_checkSensor:	
  5199  00A4                     ?_spinInput:	
  5200                           ; 1 bytes @ 0x4
  5201                           
  5202  00A4                     spinInput@input:	
  5203                           ; 1 bytes @ 0x4
  5204                           
  5205  00A4                     checkSensor@data:	
  5206                           ; 2 bytes @ 0x4
  5207                           
  5208  00A4                     calcRequiredPower@Rth:	
  5209                           ; 2 bytes @ 0x4
  5210                           
  5211                           
  5212                           ; 4 bytes @ 0x4
  5213  00A4                     	ds	1
  5214  00A5                     ?_checkChannelStatus:	
  5215  00A5                     ?_ftoa:	
  5216                           ; 1 bytes @ 0x5
  5217                           
  5218  00A5                     ?_itoa:	
  5219                           ; 1 bytes @ 0x5
  5220                           
  5221  00A5                     itoa@str:	
  5222                           ; 1 bytes @ 0x5
  5223                           
  5224  00A5                     checkChannelStatus@data:	
  5225                           ; 2 bytes @ 0x5
  5226                           
  5227  00A5                     ftoa@fValue:	
  5228                           ; 2 bytes @ 0x5
  5229                           
  5230                           
  5231                           ; 4 bytes @ 0x5
  5232  00A5                     	ds	1
  5233  00A6                     ??_checkSensor:	
  5234  00A6                     spinInput@min:	
  5235                           ; 1 bytes @ 0x6
  5236                           
  5237                           
  5238                           ; 4 bytes @ 0x6
  5239  00A6                     	ds	1
  5240  00A7                     ??_checkChannelStatus:	
  5241  00A7                     itoa@value:	
  5242                           ; 1 bytes @ 0x7
  5243                           
  5244                           
  5245                           ; 1 bytes @ 0x7
  5246  00A7                     	ds	1
  5247  00A8                     itoa@width:	
  5248  00A8                     _calcRequiredPower$2291:	
  5249                           ; 1 bytes @ 0x8
  5250                           
  5251                           
  5252                           ; 4 bytes @ 0x8
  5253  00A8                     	ds	1
  5254  00A9                     ??_itoa:	
  5255  00A9                     ftoa@width:	
  5256                           ; 1 bytes @ 0x9
  5257                           
  5258                           
  5259                           ; 1 bytes @ 0x9
  5260  00A9                     	ds	1
  5261  00AA                     ftoa@prec:	
  5262  00AA                     checkSensor@dp:	
  5263                           ; 1 bytes @ 0xA
  5264                           
  5265  00AA                     spinInput@max:	
  5266                           ; 1 bytes @ 0xA
  5267                           
  5268                           
  5269                           ; 4 bytes @ 0xA
  5270  00AA                     	ds	1
  5271  00AB                     ??_ftoa:	
  5272  00AB                     checkChannelStatus@adc:	
  5273                           ; 1 bytes @ 0xB
  5274                           
  5275                           
  5276                           ; 2 bytes @ 0xB
  5277  00AB                     	ds	1
  5278  00AC                     _calcRequiredPower$2292:	
  5279                           
  5280                           ; 4 bytes @ 0xC
  5281  00AC                     	ds	1
  5282  00AD                     ftoa@len:	
  5283  00AD                     checkChannelStatus@current:	
  5284                           ; 1 bytes @ 0xD
  5285                           
  5286                           
  5287                           ; 4 bytes @ 0xD
  5288  00AD                     	ds	1
  5289  00AE                     ftoa@sign:	
  5290  00AE                     spinInput@step:	
  5291                           ; 1 bytes @ 0xE
  5292                           
  5293                           
  5294                           ; 4 bytes @ 0xE
  5295  00AE                     	ds	1
  5296  00AF                     ftoa@intValue:	
  5297                           
  5298                           ; 1 bytes @ 0xF
  5299  00AF                     	ds	1
  5300  00B0                     ?_systemCheck:	
  5301  00B0                     ftoa@w:	
  5302                           ; 1 bytes @ 0x10
  5303                           
  5304  00B0                     systemCheck@data:	
  5305                           ; 1 bytes @ 0x10
  5306                           
  5307  00B0                     _calcRequiredPower$2293:	
  5308                           ; 2 bytes @ 0x10
  5309                           
  5310                           
  5311                           ; 4 bytes @ 0x10
  5312  00B0                     	ds	1
  5313  00B1                     ftoa@pos:	
  5314  00B1                     checkChannelStatus@chData:	
  5315                           ; 1 bytes @ 0x11
  5316                           
  5317                           
  5318                           ; 2 bytes @ 0x11
  5319  00B1                     	ds	1
  5320  00B2                     ??_systemCheck:	
  5321  00B2                     ??_spinInput:	
  5322                           ; 1 bytes @ 0x12
  5323                           
  5324  00B2                     ftoa@str:	
  5325                           ; 1 bytes @ 0x12
  5326                           
  5327                           
  5328                           ; 1 bytes @ 0x12
  5329  00B2                     	ds	1
  5330  00B3                     spinInput@dir:	
  5331                           
  5332                           ; 1 bytes @ 0x13
  5333  00B3                     	ds	1
  5334  00B4                     ?_statusView:	
  5335  00B4                     ?_channelView:	
  5336                           ; 1 bytes @ 0x14
  5337                           
  5338  00B4                     ?_channelSetup:	
  5339                           ; 1 bytes @ 0x14
  5340                           
  5341  00B4                     ?_setOutputPower:	
  5342                           ; 1 bytes @ 0x14
  5343                           
  5344  00B4                     ?_setLensDia:	
  5345                           ; 1 bytes @ 0x14
  5346                           
  5347  00B4                     ?_setup:	
  5348                           ; 1 bytes @ 0x14
  5349                           
  5350  00B4                     ?_setDPOffset:	
  5351                           ; 1 bytes @ 0x14
  5352                           
  5353  00B4                     ?_setSkyTemp:	
  5354                           ; 1 bytes @ 0x14
  5355                           
  5356  00B4                     ?_setFudgeFactor:	
  5357                           ; 1 bytes @ 0x14
  5358                           
  5359  00B4                     statusView@data:	
  5360                           ; 1 bytes @ 0x14
  5361                           
  5362  00B4                     channelView@data:	
  5363                           ; 2 bytes @ 0x14
  5364                           
  5365  00B4                     channelSetup@data:	
  5366                           ; 2 bytes @ 0x14
  5367                           
  5368  00B4                     setOutputPower@data:	
  5369                           ; 2 bytes @ 0x14
  5370                           
  5371  00B4                     setLensDia@data:	
  5372                           ; 2 bytes @ 0x14
  5373                           
  5374  00B4                     setup@data:	
  5375                           ; 2 bytes @ 0x14
  5376                           
  5377  00B4                     setDPOffset@data:	
  5378                           ; 2 bytes @ 0x14
  5379                           
  5380  00B4                     setSkyTemp@data:	
  5381                           ; 2 bytes @ 0x14
  5382                           
  5383  00B4                     setFudgeFactor@data:	
  5384                           ; 2 bytes @ 0x14
  5385                           
  5386  00B4                     _calcRequiredPower$2294:	
  5387                           ; 2 bytes @ 0x14
  5388                           
  5389                           
  5390                           ; 4 bytes @ 0x14
  5391  00B4                     	ds	2
  5392  00B6                     ??_statusView:	
  5393  00B6                     ??_channelView:	
  5394                           ; 1 bytes @ 0x16
  5395                           
  5396  00B6                     ??_channelSetup:	
  5397                           ; 1 bytes @ 0x16
  5398                           
  5399  00B6                     ??_setOutputPower:	
  5400                           ; 1 bytes @ 0x16
  5401                           
  5402  00B6                     ??_setLensDia:	
  5403                           ; 1 bytes @ 0x16
  5404                           
  5405  00B6                     ??_setup:	
  5406                           ; 1 bytes @ 0x16
  5407                           
  5408  00B6                     ??_setDPOffset:	
  5409                           ; 1 bytes @ 0x16
  5410                           
  5411  00B6                     ??_setSkyTemp:	
  5412                           ; 1 bytes @ 0x16
  5413                           
  5414  00B6                     ??_setFudgeFactor:	
  5415                           ; 1 bytes @ 0x16
  5416                           
  5417  00B6                     systemCheck@str:	
  5418                           ; 1 bytes @ 0x16
  5419                           
  5420                           
  5421                           ; 3 bytes @ 0x16
  5422  00B6                     	ds	2
  5423  00B8                     _calcRequiredPower$2295:	
  5424                           
  5425                           ; 4 bytes @ 0x18
  5426  00B8                     	ds	1
  5427  00B9                     systemCheck@n:	
  5428                           
  5429                           ; 1 bytes @ 0x19
  5430  00B9                     	ds	1
  5431  00BA                     channelSetup@chData:	
  5432  00BA                     setOutputPower@chData:	
  5433                           ; 2 bytes @ 0x1A
  5434                           
  5435                           
  5436                           ; 2 bytes @ 0x1A
  5437  00BA                     	ds	2
  5438  00BC                     _channelView$1023:	
  5439  00BC                     _calcRequiredPower$2296:	
  5440                           ; 2 bytes @ 0x1C
  5441                           
  5442                           
  5443                           ; 4 bytes @ 0x1C
  5444  00BC                     	ds	2
  5445  00BE                     channelView@n:	
  5446                           
  5447                           ; 1 bytes @ 0x1E
  5448  00BE                     	ds	1
  5449  00BF                     ?_menu:	
  5450  00BF                     menu@data:	
  5451                           ; 1 bytes @ 0x1F
  5452                           
  5453                           
  5454                           ; 2 bytes @ 0x1F
  5455  00BF                     	ds	1
  5456  00C0                     calcRequiredPower@d:	
  5457                           
  5458                           ; 4 bytes @ 0x20
  5459  00C0                     	ds	1
  5460  00C1                     ??_menu:	
  5461                           
  5462                           ; 1 bytes @ 0x21
  5463  00C1                     	ds	3
  5464  00C4                     calcRequiredPower@phi:	
  5465                           
  5466                           ; 4 bytes @ 0x24
  5467  00C4                     	ds	1
  5468  00C5                     menu@page:	
  5469                           
  5470                           ; 1 bytes @ 0x25
  5471  00C5                     	ds	1
  5472  00C6                     menu@pb:	
  5473                           
  5474                           ; 1 bytes @ 0x26
  5475  00C6                     	ds	1
  5476  00C7                     menu@func:	
  5477                           
  5478                           ; 2 bytes @ 0x27
  5479  00C7                     	ds	1
  5480  00C8                     calcRequiredPower@A:	
  5481                           
  5482                           ; 4 bytes @ 0x28
  5483  00C8                     	ds	1
  5484  00C9                     menu@nextState:	
  5485                           
  5486                           ; 1 bytes @ 0x29
  5487  00C9                     	ds	3
  5488  00CC                     _calcRequiredPower$2290:	
  5489                           
  5490                           ; 4 bytes @ 0x2C
  5491  00CC                     	ds	4
  5492  00D0                     calcRequiredPower@T1:	
  5493                           
  5494                           ; 4 bytes @ 0x30
  5495  00D0                     	ds	4
  5496  00D4                     calcRequiredPower@T2:	
  5497                           
  5498                           ; 4 bytes @ 0x34
  5499  00D4                     	ds	4
  5500  00D8                     calcRequiredPower@n:	
  5501                           
  5502                           ; 1 bytes @ 0x38
  5503  00D8                     	ds	1
  5504  00D9                     ??_main:	
  5505                           
  5506                           ; 1 bytes @ 0x39
  5507  00D9                     	ds	1
  5508  00DA                     main@sysCheckInterval:	
  5509                           
  5510                           ; 4 bytes @ 0x3A
  5511  00DA                     	ds	4
  5512                           
  5513                           	psect	cstackCOMMON
  5514  0070                     __pcstackCOMMON:	
  5515  0070                     ?_initialize:	
  5516  0070                     ?_OLED_init:	
  5517                           ; 1 bytes @ 0x0
  5518                           
  5519  0070                     ?_OLED_loadSpecialChars:	
  5520                           ; 1 bytes @ 0x0
  5521                           
  5522  0070                     ?_OLED_returnHome:	
  5523                           ; 1 bytes @ 0x0
  5524                           
  5525  0070                     ?_OLED_clearDisplay:	
  5526                           ; 1 bytes @ 0x0
  5527                           
  5528  0070                     ?_setLoadSwitch:	
  5529                           ; 1 bytes @ 0x0
  5530                           
  5531  0070                     ?_OLED_command:	
  5532                           ; 1 bytes @ 0x0
  5533                           
  5534  0070                     ?_pushButtonISR:	
  5535                           ; 1 bytes @ 0x0
  5536                           
  5537  0070                     ??_pushButtonISR:	
  5538                           ; 1 bytes @ 0x0
  5539                           
  5540  0070                     ?_rotISR:	
  5541                           ; 1 bytes @ 0x0
  5542                           
  5543  0070                     ??_rotISR:	
  5544                           ; 1 bytes @ 0x0
  5545                           
  5546  0070                     ?_uartReceiveISR:	
  5547                           ; 1 bytes @ 0x0
  5548                           
  5549  0070                     ?_strncpy:	
  5550                           ; 1 bytes @ 0x0
  5551                           
  5552  0070                     ?_getDataPacket:	
  5553                           ; 1 bytes @ 0x0
  5554                           
  5555  0070                     ?_returnToPage:	
  5556                           ; 1 bytes @ 0x0
  5557                           
  5558  0070                     ?_menuError:	
  5559                           ; 1 bytes @ 0x0
  5560                           
  5561  0070                     ?_main:	
  5562                           ; 1 bytes @ 0x0
  5563                           
  5564  0070                     ?_OLED_Off:	
  5565                           ; 1 bytes @ 0x0
  5566                           
  5567  0070                     ?_OLED_pulseEnable:	
  5568                           ; 1 bytes @ 0x0
  5569                           
  5570  0070                     ?_OLED_write4bits:	
  5571                           ; 1 bytes @ 0x0
  5572                           
  5573  0070                     ?_OLED_waitForReady:	
  5574                           ; 1 bytes @ 0x0
  5575                           
  5576  0070                     ?_OLED_write:	
  5577                           ; 1 bytes @ 0x0
  5578                           
  5579  0070                     ?_OLED_scrollDisplayLeft:	
  5580                           ; 1 bytes @ 0x0
  5581                           
  5582  0070                     ?_OLED_scrollDisplayRight:	
  5583                           ; 1 bytes @ 0x0
  5584                           
  5585  0070                     ?_get10msTick:	
  5586                           ; 1 bytes @ 0x0
  5587                           
  5588  0070                     ??_get10msTick:	
  5589                           ; 1 bytes @ 0x0
  5590                           
  5591  0070                     ?_reset10msTick:	
  5592                           ; 1 bytes @ 0x0
  5593                           
  5594  0070                     ??_reset10msTick:	
  5595                           ; 1 bytes @ 0x0
  5596                           
  5597  0070                     ?_ISR:	
  5598                           ; 1 bytes @ 0x0
  5599                           
  5600  0070                     ?_getRotDir:	
  5601                           ; 1 bytes @ 0x0
  5602                           
  5603  0070                     ?_getPB:	
  5604                           ; 1 bytes @ 0x0
  5605                           
  5606  0070                     ?_uartIsDataReady:	
  5607                           ; 1 bytes @ 0x0
  5608                           
  5609  0070                     ?_uartSendByte:	
  5610                           ; 1 bytes @ 0x0
  5611                           
  5612  0070                     ?_uartReset:	
  5613                           ; 1 bytes @ 0x0
  5614                           
  5615  0070                     ?_error:	
  5616                           ; 1 bytes @ 0x0
  5617                           
  5618  0070                     error@error:	
  5619                           ; 1 bytes @ 0x0
  5620                           
  5621  0070                     strncpy@s:	
  5622                           ; 1 bytes @ 0x0
  5623                           
  5624                           
  5625                           ; 1 bytes @ 0x0
  5626  0070                     	ds	1
  5627  0071                     pushButtonISR@time:	
  5628  0071                     strncpy@n:	
  5629                           ; 1 bytes @ 0x1
  5630                           
  5631                           
  5632                           ; 2 bytes @ 0x1
  5633  0071                     	ds	2
  5634  0073                     ??_strncpy:	
  5635                           
  5636                           ; 1 bytes @ 0x3
  5637  0073                     	ds	1
  5638  0074                     strncpy@d:	
  5639                           
  5640                           ; 1 bytes @ 0x4
  5641  0074                     	ds	1
  5642  0075                     strncpy@cp:	
  5643                           
  5644                           ; 1 bytes @ 0x5
  5645  0075                     	ds	1
  5646  0076                     ??_uartReceiveISR:	
  5647                           
  5648                           ; 1 bytes @ 0x6
  5649  0076                     	ds	1
  5650  0077                     rotISR@input:	
  5651                           
  5652                           ; 1 bytes @ 0x7
  5653  0077                     	ds	1
  5654  0078                     ??_ISR:	
  5655                           
  5656                           ; 1 bytes @ 0x8
  5657  0078                     	ds	4
  5658                           
  5659                           	psect	cstackBANK0
  5660  0020                     __pcstackBANK0:	
  5661  0020                     ?___fleq:	
  5662  0020                     ??_initialize:	
  5663                           ; 1 bit 
  5664                           
  5665  0020                     ?_initGlobalData:	
  5666                           ; 1 bytes @ 0x0
  5667                           
  5668  0020                     ??_setLoadSwitch:	
  5669                           ; 1 bytes @ 0x0
  5670                           
  5671  0020                     ??_getDataPacket:	
  5672                           ; 1 bytes @ 0x0
  5673                           
  5674  0020                     ??_OLED_pulseEnable:	
  5675                           ; 1 bytes @ 0x0
  5676                           
  5677  0020                     ??_OLED_write4bits:	
  5678                           ; 1 bytes @ 0x0
  5679                           
  5680  0020                     ??_OLED_waitForReady:	
  5681                           ; 1 bytes @ 0x0
  5682                           
  5683  0020                     ??_getRotDir:	
  5684                           ; 1 bytes @ 0x0
  5685                           
  5686  0020                     ??_getPB:	
  5687                           ; 1 bytes @ 0x0
  5688                           
  5689  0020                     ??_uartIsDataReady:	
  5690                           ; 1 bytes @ 0x0
  5691                           
  5692  0020                     ??_uartSendByte:	
  5693                           ; 1 bytes @ 0x0
  5694                           
  5695  0020                     ??_uartReset:	
  5696                           ; 1 bytes @ 0x0
  5697                           
  5698  0020                     ??_error:	
  5699                           ; 1 bytes @ 0x0
  5700                           
  5701  0020                     ?_setChannelSwitch:	
  5702                           ; 1 bytes @ 0x0
  5703                           
  5704  0020                     ?___bmul:	
  5705                           ; 1 bytes @ 0x0
  5706                           
  5707  0020                     ?__Umul8_16:	
  5708                           ; 1 bytes @ 0x0
  5709                           
  5710  0020                     ?_getAnalogValue:	
  5711                           ; 2 bytes @ 0x0
  5712                           
  5713  0020                     ?___wmul:	
  5714                           ; 2 bytes @ 0x0
  5715                           
  5716  0020                     ?___awdiv:	
  5717                           ; 2 bytes @ 0x0
  5718                           
  5719  0020                     ?___awmod:	
  5720                           ; 2 bytes @ 0x0
  5721                           
  5722  0020                     ?_timeNow:	
  5723                           ; 2 bytes @ 0x0
  5724                           
  5725  0020                     ?___lmul:	
  5726                           ; 4 bytes @ 0x0
  5727                           
  5728  0020                     OLED_waitForReady@busy:	
  5729                           ; 4 bytes @ 0x0
  5730                           
  5731  0020                     uartSendByte@s:	
  5732                           ; 1 bytes @ 0x0
  5733                           
  5734  0020                     setLoadSwitch@state:	
  5735                           ; 1 bytes @ 0x0
  5736                           
  5737  0020                     setChannelSwitch@state:	
  5738                           ; 1 bytes @ 0x0
  5739                           
  5740  0020                     ___bmul@multiplicand:	
  5741                           ; 1 bytes @ 0x0
  5742                           
  5743  0020                     __Umul8_16@multiplicand:	
  5744                           ; 1 bytes @ 0x0
  5745                           
  5746  0020                     initGlobalData@data:	
  5747                           ; 1 bytes @ 0x0
  5748                           
  5749  0020                     ___wmul@multiplier:	
  5750                           ; 2 bytes @ 0x0
  5751                           
  5752  0020                     ___awdiv@divisor:	
  5753                           ; 2 bytes @ 0x0
  5754                           
  5755  0020                     ___awmod@divisor:	
  5756                           ; 2 bytes @ 0x0
  5757                           
  5758  0020                     ___lmul@multiplier:	
  5759                           ; 2 bytes @ 0x0
  5760                           
  5761  0020                     ___fleq@ff1:	
  5762                           ; 4 bytes @ 0x0
  5763                           
  5764                           
  5765                           ; 4 bytes @ 0x0
  5766  0020                     	ds	1
  5767  0021                     ??_setChannelSwitch:	
  5768  0021                     ??___bmul:	
  5769                           ; 1 bytes @ 0x1
  5770                           
  5771  0021                     getRotDir@ret:	
  5772                           ; 1 bytes @ 0x1
  5773                           
  5774  0021                     getPB@ret:	
  5775                           ; 1 bytes @ 0x1
  5776                           
  5777  0021                     uartIsDataReady@ret:	
  5778                           ; 1 bytes @ 0x1
  5779                           
  5780                           
  5781                           ; 1 bytes @ 0x1
  5782  0021                     	ds	1
  5783  0022                     ??_initGlobalData:	
  5784  0022                     ??__Umul8_16:	
  5785                           ; 1 bytes @ 0x2
  5786                           
  5787  0022                     ??_getAnalogValue:	
  5788                           ; 1 bytes @ 0x2
  5789                           
  5790  0022                     OLED_write4bits@value:	
  5791                           ; 1 bytes @ 0x2
  5792                           
  5793  0022                     ___bmul@product:	
  5794                           ; 1 bytes @ 0x2
  5795                           
  5796  0022                     ___wmul@multiplicand:	
  5797                           ; 1 bytes @ 0x2
  5798                           
  5799  0022                     ___awdiv@dividend:	
  5800                           ; 2 bytes @ 0x2
  5801                           
  5802  0022                     ___awmod@dividend:	
  5803                           ; 2 bytes @ 0x2
  5804                           
  5805                           
  5806                           ; 2 bytes @ 0x2
  5807  0022                     	ds	1
  5808  0023                     ?_OLED_send:	
  5809  0023                     OLED_send@mode:	
  5810                           ; 1 bytes @ 0x3
  5811                           
  5812  0023                     setChannelSwitch@channel:	
  5813                           ; 1 bytes @ 0x3
  5814                           
  5815  0023                     getAnalogValue@channel:	
  5816                           ; 1 bytes @ 0x3
  5817                           
  5818  0023                     ___bmul@multiplier:	
  5819                           ; 1 bytes @ 0x3
  5820                           
  5821                           
  5822                           ; 1 bytes @ 0x3
  5823  0023                     	ds	1
  5824  0024                     ??_timeNow:	
  5825  0024                     ??_OLED_send:	
  5826                           ; 1 bytes @ 0x4
  5827                           
  5828  0024                     ??___wmul:	
  5829                           ; 1 bytes @ 0x4
  5830                           
  5831  0024                     ??___awdiv:	
  5832                           ; 1 bytes @ 0x4
  5833                           
  5834  0024                     ??___awmod:	
  5835                           ; 1 bytes @ 0x4
  5836                           
  5837  0024                     ?_timeSince:	
  5838                           ; 1 bytes @ 0x4
  5839                           
  5840  0024                     ___wmul@product:	
  5841                           ; 4 bytes @ 0x4
  5842                           
  5843  0024                     __Umul8_16@product:	
  5844                           ; 2 bytes @ 0x4
  5845                           
  5846  0024                     timeSince@since:	
  5847                           ; 2 bytes @ 0x4
  5848                           
  5849  0024                     ___lmul@multiplicand:	
  5850                           ; 4 bytes @ 0x4
  5851                           
  5852  0024                     ___fleq@ff2:	
  5853                           ; 4 bytes @ 0x4
  5854                           
  5855                           
  5856                           ; 4 bytes @ 0x4
  5857  0024                     	ds	1
  5858  0025                     OLED_send@value:	
  5859  0025                     ___awdiv@counter:	
  5860                           ; 1 bytes @ 0x5
  5861                           
  5862  0025                     ___awmod@counter:	
  5863                           ; 1 bytes @ 0x5
  5864                           
  5865                           
  5866                           ; 1 bytes @ 0x5
  5867  0025                     	ds	1
  5868  0026                     ??_OLED_command:	
  5869  0026                     ?_getNextState:	
  5870                           ; 1 bytes @ 0x6
  5871                           
  5872  0026                     ??_OLED_write:	
  5873                           ; 1 bytes @ 0x6
  5874                           
  5875  0026                     ?_getStateFunc:	
  5876                           ; 1 bytes @ 0x6
  5877                           
  5878  0026                     ?___xxtofl:	
  5879                           ; 2 bytes @ 0x6
  5880                           
  5881  0026                     initGlobalData@n:	
  5882                           ; 4 bytes @ 0x6
  5883                           
  5884  0026                     OLED_command@value:	
  5885                           ; 1 bytes @ 0x6
  5886                           
  5887  0026                     OLED_write@value:	
  5888                           ; 1 bytes @ 0x6
  5889                           
  5890  0026                     getNextState@intState:	
  5891                           ; 1 bytes @ 0x6
  5892                           
  5893  0026                     ___awdiv@sign:	
  5894                           ; 1 bytes @ 0x6
  5895                           
  5896  0026                     ___awmod@sign:	
  5897                           ; 1 bytes @ 0x6
  5898                           
  5899  0026                     __Umul8_16@word_mpld:	
  5900                           ; 1 bytes @ 0x6
  5901                           
  5902  0026                     ___xxtofl@val:	
  5903                           ; 2 bytes @ 0x6
  5904                           
  5905                           
  5906                           ; 4 bytes @ 0x6
  5907  0026                     	ds	1
  5908  0027                     ??_OLED_init:	
  5909  0027                     ??_OLED_loadSpecialChars:	
  5910                           ; 1 bytes @ 0x7
  5911                           
  5912  0027                     ??_OLED_returnHome:	
  5913                           ; 1 bytes @ 0x7
  5914                           
  5915  0027                     ??_OLED_clearDisplay:	
  5916                           ; 1 bytes @ 0x7
  5917                           
  5918  0027                     ??_returnToPage:	
  5919                           ; 1 bytes @ 0x7
  5920                           
  5921  0027                     ?_paging:	
  5922                           ; 1 bytes @ 0x7
  5923                           
  5924  0027                     ??_OLED_Off:	
  5925                           ; 1 bytes @ 0x7
  5926                           
  5927  0027                     ??_OLED_scrollDisplayLeft:	
  5928                           ; 1 bytes @ 0x7
  5929                           
  5930  0027                     ??_OLED_scrollDisplayRight:	
  5931                           ; 1 bytes @ 0x7
  5932                           
  5933  0027                     ?_OLED_print_xy:	
  5934                           ; 1 bytes @ 0x7
  5935                           
  5936  0027                     OLED_print_xy@row:	
  5937                           ; 1 bytes @ 0x7
  5938                           
  5939  0027                     getNextState@pb:	
  5940                           ; 1 bytes @ 0x7
  5941                           
  5942  0027                     paging@lastPage:	
  5943                           ; 1 bytes @ 0x7
  5944                           
  5945  0027                     initGlobalData@chData:	
  5946                           ; 1 bytes @ 0x7
  5947                           
  5948  0027                     ___awdiv@quotient:	
  5949                           ; 2 bytes @ 0x7
  5950                           
  5951                           
  5952                           ; 2 bytes @ 0x7
  5953  0027                     	ds	1
  5954  0028                     ??_timeSince:	
  5955  0028                     ??_paging:	
  5956                           ; 1 bytes @ 0x8
  5957                           
  5958  0028                     ??_getStateFunc:	
  5959                           ; 1 bytes @ 0x8
  5960                           
  5961  0028                     ??_getNextState:	
  5962                           ; 1 bytes @ 0x8
  5963                           
  5964  0028                     ??___lmul:	
  5965                           ; 1 bytes @ 0x8
  5966                           
  5967  0028                     ??___fleq:	
  5968                           ; 1 bytes @ 0x8
  5969                           
  5970  0028                     __Umul8_16@multiplier:	
  5971                           ; 1 bytes @ 0x8
  5972                           
  5973  0028                     OLED_print_xy@s:	
  5974                           ; 1 bytes @ 0x8
  5975                           
  5976  0028                     ___lmul@product:	
  5977                           ; 2 bytes @ 0x8
  5978                           
  5979  0028                     OLED_loadSpecialChars@special:	
  5980                           ; 4 bytes @ 0x8
  5981                           
  5982                           
  5983                           ; 32 bytes @ 0x8
  5984  0028                     	ds	1
  5985  0029                     returnToPage@page:	
  5986                           
  5987                           ; 1 bytes @ 0x9
  5988  0029                     	ds	1
  5989  002A                     ??_OLED_print_xy:	
  5990  002A                     ??___xxtofl:	
  5991                           ; 1 bytes @ 0xA
  5992                           
  5993  002A                     paging@currentPage:	
  5994                           ; 1 bytes @ 0xA
  5995                           
  5996  002A                     returnToPage@n:	
  5997                           ; 1 bytes @ 0xA
  5998                           
  5999                           
  6000                           ; 1 bytes @ 0xA
  6001  002A                     	ds	1
  6002  002B                     getStateFunc@state:	
  6003  002B                     getNextState@state:	
  6004                           ; 1 bytes @ 0xB
  6005                           
  6006  002B                     paging@dir:	
  6007                           ; 1 bytes @ 0xB
  6008                           
  6009  002B                     OLED_print_xy@row_offsets:	
  6010                           ; 1 bytes @ 0xB
  6011                           
  6012                           
  6013                           ; 4 bytes @ 0xB
  6014  002B                     	ds	1
  6015  002C                     ?_ema:	
  6016  002C                     getStateFunc@n:	
  6017                           ; 2 bytes @ 0xC
  6018                           
  6019  002C                     getNextState@n:	
  6020                           ; 1 bytes @ 0xC
  6021                           
  6022  002C                     paging@n:	
  6023                           ; 1 bytes @ 0xC
  6024                           
  6025  002C                     ema@in:	
  6026                           ; 1 bytes @ 0xC
  6027                           
  6028                           
  6029                           ; 2 bytes @ 0xC
  6030  002C                     	ds	2
  6031  002E                     ___xxtofl@sign:	
  6032  002E                     ema@average:	
  6033                           ; 1 bytes @ 0xE
  6034                           
  6035                           
  6036                           ; 2 bytes @ 0xE
  6037  002E                     	ds	1
  6038  002F                     OLED_print_xy@col:	
  6039  002F                     ___xxtofl@exp:	
  6040                           ; 1 bytes @ 0xF
  6041                           
  6042                           
  6043                           ; 1 bytes @ 0xF
  6044  002F                     	ds	1
  6045  0030                     ??_menuError:	
  6046  0030                     ema@alpha:	
  6047                           ; 1 bytes @ 0x10
  6048                           
  6049  0030                     timeSince@now:	
  6050                           ; 4 bytes @ 0x10
  6051                           
  6052  0030                     ___xxtofl@arg:	
  6053                           ; 4 bytes @ 0x10
  6054                           
  6055                           
  6056                           ; 4 bytes @ 0x10
  6057  0030                     	ds	4
  6058  0034                     ??_ema:	
  6059  0034                     ?___flmul:	
  6060                           ; 1 bytes @ 0x14
  6061                           
  6062  0034                     ___flmul@b:	
  6063                           ; 4 bytes @ 0x14
  6064                           
  6065                           
  6066                           ; 4 bytes @ 0x14
  6067  0034                     	ds	4
  6068  0038                     ___flmul@a:	
  6069                           
  6070                           ; 4 bytes @ 0x18
  6071  0038                     	ds	4
  6072  003C                     ??___flmul:	
  6073  003C                     ema@tmp0:	
  6074                           ; 1 bytes @ 0x1C
  6075                           
  6076                           
  6077                           ; 4 bytes @ 0x1C
  6078  003C                     	ds	5
  6079  0041                     ___flmul@sign:	
  6080                           
  6081                           ; 1 bytes @ 0x21
  6082  0041                     	ds	1
  6083  0042                     ___flmul@grs:	
  6084                           
  6085                           ; 4 bytes @ 0x22
  6086  0042                     	ds	4
  6087  0046                     ___flmul@aexp:	
  6088                           
  6089                           ; 1 bytes @ 0x26
  6090  0046                     	ds	1
  6091  0047                     ___flmul@bexp:	
  6092                           
  6093                           ; 1 bytes @ 0x27
  6094  0047                     	ds	1
  6095  0048                     OLED_loadSpecialChars@n:	
  6096  0048                     ___flmul@prod:	
  6097                           ; 1 bytes @ 0x28
  6098                           
  6099                           
  6100                           ; 4 bytes @ 0x28
  6101  0048                     	ds	4
  6102  004C                     ___flmul@temp:	
  6103                           
  6104                           ; 2 bytes @ 0x2C
  6105  004C                     	ds	2
  6106  004E                     ?___fladd:	
  6107  004E                     ?___fldiv:	
  6108                           ; 4 bytes @ 0x2E
  6109                           
  6110  004E                     ___fladd@b:	
  6111                           ; 4 bytes @ 0x2E
  6112                           
  6113  004E                     ___fldiv@a:	
  6114                           ; 4 bytes @ 0x2E
  6115                           
  6116                           
  6117                           ; 4 bytes @ 0x2E
  6118  004E                     	ds	4
  6119  0052                     ___fladd@a:	
  6120  0052                     ___fldiv@b:	
  6121                           ; 4 bytes @ 0x32
  6122                           
  6123                           
  6124                           ; 4 bytes @ 0x32
  6125  0052                     	ds	4
  6126  0056                     ??___fladd:	
  6127  0056                     ??___fldiv:	
  6128                           ; 1 bytes @ 0x36
  6129                           
  6130                           
  6131                           ; 1 bytes @ 0x36
  6132  0056                     	ds	5
  6133  005B                     ___fldiv@rem:	
  6134                           
  6135                           ; 4 bytes @ 0x3B
  6136  005B                     	ds	3
  6137  005E                     ___fladd@signs:	
  6138                           
  6139                           ; 1 bytes @ 0x3E
  6140  005E                     	ds	1
  6141  005F                     ___fladd@aexp:	
  6142  005F                     ___fldiv@sign:	
  6143                           ; 1 bytes @ 0x3F
  6144                           
  6145                           
  6146                           ; 1 bytes @ 0x3F
  6147  005F                     	ds	1
  6148  0060                     ___fladd@bexp:	
  6149  0060                     ___fldiv@new_exp:	
  6150                           ; 1 bytes @ 0x40
  6151                           
  6152                           
  6153                           ; 2 bytes @ 0x40
  6154  0060                     	ds	1
  6155  0061                     ___fladd@grs:	
  6156                           
  6157                           ; 1 bytes @ 0x41
  6158  0061                     	ds	1
  6159  0062                     ?___flsub:	
  6160  0062                     ___flsub@a:	
  6161                           ; 4 bytes @ 0x42
  6162                           
  6163  0062                     ___fldiv@grs:	
  6164                           ; 4 bytes @ 0x42
  6165                           
  6166                           
  6167                           ; 4 bytes @ 0x42
  6168  0062                     	ds	4
  6169  0066                     ___fldiv@bexp:	
  6170  0066                     ___flsub@b:	
  6171                           ; 1 bytes @ 0x46
  6172                           
  6173                           
  6174                           ; 4 bytes @ 0x46
  6175  0066                     	ds	1
  6176  0067                     ___fldiv@aexp:	
  6177                           
  6178                           ; 1 bytes @ 0x47
  6179  0067                     	ds	1
  6180  0068                     ?___flge:	
  6181  0068                     ?_getAnalogValues:	
  6182                           ; 1 bit 
  6183                           
  6184  0068                     ?___fltol:	
  6185                           ; 1 bytes @ 0x48
  6186                           
  6187  0068                     getAnalogValues@data:	
  6188                           ; 4 bytes @ 0x48
  6189                           
  6190  0068                     ___flge@ff1:	
  6191                           ; 2 bytes @ 0x48
  6192                           
  6193  0068                     ___fltol@f1:	
  6194                           ; 4 bytes @ 0x48
  6195                           
  6196                           
  6197                           ; 4 bytes @ 0x48
  6198  0068                     	ds	2
  6199  006A                     ??_getAnalogValues:	
  6200  006A                     ?_calcRequiredPower:	
  6201                           ; 1 bytes @ 0x4A
  6202                           
  6203  006A                     ??___flsub:	
  6204                           ; 1 bytes @ 0x4A
  6205                           
  6206  006A                     calcRequiredPower@data:	
  6207                           ; 1 bytes @ 0x4A
  6208                           
  6209  006A                     _getAnalogValues$2297:	
  6210                           ; 2 bytes @ 0x4A
  6211                           
  6212                           
  6213                           ; 4 bytes @ 0x4A
  6214  006A                     	ds	2
  6215  006C                     ??_calcRequiredPower:	
  6216  006C                     ___fltol@sign1:	
  6217                           ; 1 bytes @ 0x4C
  6218                           
  6219  006C                     ___flge@ff2:	
  6220                           ; 1 bytes @ 0x4C
  6221                           
  6222                           
  6223                           ; 4 bytes @ 0x4C
  6224  006C                     	ds	1
  6225  006D                     ___fltol@exp1:	
  6226                           
  6227                           ; 1 bytes @ 0x4D
  6228  006D                     	ds	1
  6229  006E                     getAnalogValues@adc:	
  6230                           
  6231                           ; 2 bytes @ 0x4E
  6232  006E                     	ds	2
  6233                           
  6234                           	psect	maintext
  6235  18B3                     __pmaintext:	
  6236 ;;
  6237 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6238 ;;
  6239 ;; *************** function _main *****************
  6240 ;; Defined at:
  6241 ;;		line 26 in file "main.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;		None
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  sysCheckInte    4   58[BANK1 ] unsigned long 
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  1    wreg      void 
  6248 ;; Registers used:
  6249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6250 ;; Tracked objects:
  6251 ;;		On entry : B3F/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6256 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6257 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6258 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6259 ;;Total ram usage:        5 bytes
  6260 ;; Hardware stack levels required when called:   11
  6261 ;; This function calls:
  6262 ;;		_OLED_clearDisplay
  6263 ;;		_OLED_init
  6264 ;;		_OLED_loadSpecialChars
  6265 ;;		_OLED_returnHome
  6266 ;;		_calcRequiredPower
  6267 ;;		_checkChannelStatus
  6268 ;;		_checkSensor
  6269 ;;		_getAnalogValues
  6270 ;;		_initGlobalData
  6271 ;;		_initialize
  6272 ;;		_menu
  6273 ;;		_setLoadSwitch
  6274 ;;		_systemCheck
  6275 ;;		_timeNow
  6276 ;;		_timeSince
  6277 ;; This function is called by:
  6278 ;;		Startup code after reset
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function _main
  6284  18B3                     _main:	
  6285                           
  6286                           ;main.c: 28:  uint32_t sysCheckInterval = 0;
  6287                           
  6288                           ;incstack = 0
  6289                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6290  18B3  3000               	movlw	0
  6291  18B4  0141               	movlb	1	; select bank1
  6292  18B5  00DD               	movwf	(main@sysCheckInterval+3)^(0+128)
  6293  18B6  3000               	movlw	0
  6294  18B7  00DC               	movwf	(main@sysCheckInterval+2)^(0+128)
  6295  18B8  3000               	movlw	0
  6296  18B9  00DB               	movwf	(main@sysCheckInterval+1)^(0+128)
  6297  18BA  3000               	movlw	0
  6298  18BB  00DA               	movwf	main@sysCheckInterval^(0+128)
  6299                           
  6300                           ;main.c: 30:  initialize();
  6301  18BC  31A2  22B4  3198   	fcall	_initialize
  6302                           
  6303                           ;main.c: 31:  LATBbits.LATB5 = 1;
  6304  18BF  0140               	movlb	0	; select bank0
  6305  18C0  1699               	bsf	25,5	;volatile
  6306                           
  6307                           ;main.c: 32:  OLED_init();
  6308  18C1  31A6  26EA  3198   	fcall	_OLED_init
  6309                           
  6310                           ;main.c: 33:  OLED_loadSpecialChars();
  6311  18C4  31A0  2046  3198   	fcall	_OLED_loadSpecialChars
  6312                           
  6313                           ;main.c: 34:  OLED_returnHome();
  6314  18C7  31A0  2003  3198   	fcall	_OLED_returnHome
  6315                           
  6316                           ;main.c: 35:  OLED_clearDisplay();
  6317  18CA  31AE  26F2  3198   	fcall	_OLED_clearDisplay
  6318                           
  6319                           ;main.c: 36:  initGlobalData(&data);
  6320  18CD  3043               	movlw	67
  6321  18CE  0140               	movlb	0	; select bank0
  6322  18CF  00A0               	movwf	initGlobalData@data
  6323  18D0  3027               	movlw	39
  6324  18D1  00A1               	movwf	initGlobalData@data+1
  6325  18D2  319C  2410  3198   	fcall	_initGlobalData
  6326                           
  6327                           ;main.c: 37:  setLoadSwitch(1);
  6328  18D5  3001               	movlw	1
  6329  18D6  31AE  26F6  3198   	fcall	_setLoadSwitch
  6330  18D9                     l137:	
  6331                           ;main.c: 40:  while (1) {
  6332                           
  6333  18D9  0064               	clrwdt	;# 
  6334                           
  6335                           ;main.c: 44:   getAnalogValues(&data);
  6336  18DA  3043               	movlw	67
  6337  18DB  0140               	movlb	0	; select bank0
  6338  18DC  00E8               	movwf	getAnalogValues@data
  6339  18DD  3027               	movlw	39
  6340  18DE  00E9               	movwf	getAnalogValues@data+1
  6341  18DF  3193  234B  3198   	fcall	_getAnalogValues
  6342                           
  6343                           ;main.c: 46:   if (timeSince(sysCheckInterval) > 5) {
  6344  18E2  0141               	movlb	1	; select bank1
  6345  18E3  085D               	movf	(main@sysCheckInterval+3)^(0+128),w
  6346  18E4  0140               	movlb	0	; select bank0
  6347  18E5  00A7               	movwf	timeSince@since+3
  6348  18E6  0141               	movlb	1	; select bank1
  6349  18E7  085C               	movf	(main@sysCheckInterval+2)^(0+128),w
  6350  18E8  0140               	movlb	0	; select bank0
  6351  18E9  00A6               	movwf	timeSince@since+2
  6352  18EA  0141               	movlb	1	; select bank1
  6353  18EB  085B               	movf	(main@sysCheckInterval+1)^(0+128),w
  6354  18EC  0140               	movlb	0	; select bank0
  6355  18ED  00A5               	movwf	timeSince@since+1
  6356  18EE  0141               	movlb	1	; select bank1
  6357  18EF  085A               	movf	main@sysCheckInterval^(0+128),w
  6358  18F0  0140               	movlb	0	; select bank0
  6359  18F1  00A4               	movwf	timeSince@since
  6360  18F2  3190  2000  3198   	fcall	_timeSince
  6361  18F5  0140               	movlb	0	; select bank0
  6362  18F6  0827               	movf	?_timeSince+3,w
  6363  18F7  1D03               	btfss	3,2
  6364  18F8  2903               	goto	l5872
  6365  18F9  0826               	movf	?_timeSince+2,w
  6366  18FA  1D03               	btfss	3,2
  6367  18FB  2903               	goto	l5872
  6368  18FC  0825               	movf	?_timeSince+1,w
  6369  18FD  1D03               	btfss	3,2
  6370  18FE  2903               	goto	l5872
  6371  18FF  3006               	movlw	6
  6372  1900  0224               	subwf	?_timeSince,w
  6373  1901  1C03               	btfss	3,0
  6374  1902  291D               	goto	l5876
  6375  1903                     l5872:	
  6376                           
  6377                           ;main.c: 47:    sysCheckInterval = timeNow();
  6378  1903  31AF  277A  3198   	fcall	_timeNow
  6379  1906  0140               	movlb	0	; select bank0
  6380  1907  0823               	movf	?_timeNow+3,w
  6381  1908  0141               	movlb	1	; select bank1
  6382  1909  00DD               	movwf	(main@sysCheckInterval+3)^(0+128)
  6383  190A  0140               	movlb	0	; select bank0
  6384  190B  0822               	movf	?_timeNow+2,w
  6385  190C  0141               	movlb	1	; select bank1
  6386  190D  00DC               	movwf	(main@sysCheckInterval+2)^(0+128)
  6387  190E  0140               	movlb	0	; select bank0
  6388  190F  0821               	movf	?_timeNow+1,w
  6389  1910  0141               	movlb	1	; select bank1
  6390  1911  00DB               	movwf	(main@sysCheckInterval+1)^(0+128)
  6391  1912  0140               	movlb	0	; select bank0
  6392  1913  0820               	movf	?_timeNow,w
  6393  1914  0141               	movlb	1	; select bank1
  6394  1915  00DA               	movwf	main@sysCheckInterval^(0+128)
  6395                           
  6396                           ;main.c: 48:    systemCheck(&data);
  6397  1916  3043               	movlw	67
  6398  1917  00B0               	movwf	systemCheck@data^(0+128)
  6399  1918  3027               	movlw	39
  6400  1919  00B1               	movwf	(systemCheck@data^(0+128)+1)
  6401  191A  3188  2039  3198   	fcall	_systemCheck
  6402  191D                     l5876:	
  6403                           
  6404                           ;main.c: 51:   if (checkSensor(&data))
  6405  191D  3043               	movlw	67
  6406  191E  0141               	movlb	1	; select bank1
  6407  191F  00A4               	movwf	checkSensor@data^(0+128)
  6408  1920  3027               	movlw	39
  6409  1921  00A5               	movwf	(checkSensor@data^(0+128)+1)
  6410  1922  3191  21D0  3198   	fcall	_checkSensor
  6411  1925  3A00               	xorlw	0
  6412  1926  1903               	skipnz
  6413  1927  2930               	goto	l5880
  6414                           
  6415                           ;main.c: 53:    calcRequiredPower(&data);
  6416  1928  3043               	movlw	67
  6417  1929  0140               	movlb	0	; select bank0
  6418  192A  00EA               	movwf	calcRequiredPower@data
  6419  192B  3027               	movlw	39
  6420  192C  00EB               	movwf	calcRequiredPower@data+1
  6421  192D  3180  20BC  3198   	fcall	_calcRequiredPower
  6422  1930                     l5880:	
  6423                           
  6424                           ;main.c: 57:    checkChannelStatus(&data);
  6425  1930  3043               	movlw	67
  6426  1931  0141               	movlb	1	; select bank1
  6427  1932  00A5               	movwf	checkChannelStatus@data^(0+128)
  6428  1933  3027               	movlw	39
  6429  1934  00A6               	movwf	(checkChannelStatus@data^(0+128)+1)
  6430  1935  3185  2509  3198   	fcall	_checkChannelStatus
  6431                           
  6432                           ;main.c: 61:   menu(&data);
  6433  1938  3043               	movlw	67
  6434  1939  0141               	movlb	1	; select bank1
  6435  193A  00BF               	movwf	menu@data^(0+128)
  6436  193B  3027               	movlw	39
  6437  193C  00C0               	movwf	(menu@data^(0+128)+1)
  6438  193D  31A3  2397  3198   	fcall	_menu
  6439                           
  6440                           ;main.c: 64:   _delay((unsigned long)((100)*(4000000UL/4000.0)));
  6441  1940  3082               	movlw	130
  6442  1941  0141               	movlb	1	; select bank1
  6443  1942  00D9               	movwf	??_main^(0+128)
  6444  1943  30DD               	movlw	221
  6445  1944                     u6917:	
  6446  1944  0B89               	decfsz	9,f
  6447  1945  2944               	goto	u6917
  6448  1946  0BD9               	decfsz	??_main^(0+128),f
  6449  1947  2944               	goto	u6917
  6450  1948  3200               	nop2
  6451  1949  28D9               	goto	l137
  6452  194A                     __end_of_main:	
  6453                           
  6454                           	psect	text1
  6455  0839                     __ptext1:	
  6456 ;; *************** function _systemCheck *****************
  6457 ;; Defined at:
  6458 ;;		line 130 in file "system.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;  data            2   16[BANK1 ] PTR struct .
  6461 ;;		 -> data(173), 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;  str             3   22[BANK1 ] unsigned char [3]
  6464 ;;  n               1   25[BANK1 ] unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      void 
  6467 ;; Registers used:
  6468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6474 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6475 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6476 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6477 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6478 ;;Total ram usage:       10 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    8
  6481 ;; This function calls:
  6482 ;;		_OLED_Off
  6483 ;;		_OLED_clearDisplay
  6484 ;;		_OLED_print_xy
  6485 ;;		_OLED_returnHome
  6486 ;;		___fldiv
  6487 ;;		___flge
  6488 ;;		___flmul
  6489 ;;		___xxtofl
  6490 ;;		_error
  6491 ;;		_getAnalogValue
  6492 ;;		_itoa
  6493 ;;		_setChannelSwitch
  6494 ;;		_setLoadSwitch
  6495 ;; This function is called by:
  6496 ;;		_main
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           
  6501                           ;psect for function _systemCheck
  6502  0839                     _systemCheck:	
  6503                           
  6504                           ;system.c: 130: void systemCheck(t_globalData *data);system.c: 131: {;system.c: 132:  ui
      +                          nt8_t n;;system.c: 133:  char str[3];;system.c: 137:  if (data->current > 3.0) {
  6505                           
  6506                           ;incstack = 0
  6507                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6508  0839  3040               	movlw	64
  6509  083A  0140               	movlb	0	; select bank0
  6510  083B  00EB               	movwf	___flge@ff1+3
  6511  083C  3040               	movlw	64
  6512  083D  00EA               	movwf	___flge@ff1+2
  6513  083E  3000               	movlw	0
  6514  083F  00E9               	movwf	___flge@ff1+1
  6515  0840  3000               	movlw	0
  6516  0841  00E8               	movwf	___flge@ff1
  6517  0842  0141               	movlb	1	; select bank1
  6518  0843  0830               	movf	systemCheck@data^(0+128),w
  6519  0844  0086               	movwf	6
  6520  0845  0831               	movf	(systemCheck@data+1)^(0+128),w
  6521  0846  0087               	movwf	7
  6522  0847  3158               	addfsr 1,24
  6523  0848  3F40               	moviw [0]fsr1
  6524  0849  0140               	movlb	0	; select bank0
  6525  084A  00EC               	movwf	___flge@ff2
  6526  084B  3F41               	moviw [1]fsr1
  6527  084C  00ED               	movwf	___flge@ff2+1
  6528  084D  3F42               	moviw [2]fsr1
  6529  084E  00EE               	movwf	___flge@ff2+2
  6530  084F  3F43               	moviw [3]fsr1
  6531  0850  00EF               	movwf	___flge@ff2+3
  6532  0851  3199  21F7  3188   	fcall	___flge
  6533  0854  1803               	btfsc	3,0
  6534  0855  28C6               	goto	l5780
  6535                           
  6536                           ;system.c: 139:   setChannelSwitch(255, 0);
  6537  0856  0140               	movlb	0	; select bank0
  6538  0857  01A0               	clrf	setChannelSwitch@state
  6539  0858  30FF               	movlw	255
  6540  0859  31A2  2225  3188   	fcall	_setChannelSwitch
  6541                           
  6542                           ;system.c: 140:   setLoadSwitch(0);
  6543  085C  3000               	movlw	0
  6544  085D  31AE  26F6  3188   	fcall	_setLoadSwitch
  6545                           
  6546                           ;system.c: 142:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          0) {
  6547  0860  3040               	movlw	64
  6548  0861  0140               	movlb	0	; select bank0
  6549  0862  00EB               	movwf	___flge@ff1+3
  6550  0863  3040               	movlw	64
  6551  0864  00EA               	movwf	___flge@ff1+2
  6552  0865  3000               	movlw	0
  6553  0866  00E9               	movwf	___flge@ff1+1
  6554  0867  3000               	movlw	0
  6555  0868  00E8               	movwf	___flge@ff1
  6556  0869  3045               	movlw	69
  6557  086A  00D1               	movwf	___fldiv@a+3
  6558  086B  301F               	movlw	31
  6559  086C  00D0               	movwf	___fldiv@a+2
  6560  086D  30D8               	movlw	216
  6561  086E  00CF               	movwf	___fldiv@a+1
  6562  086F  3000               	movlw	0
  6563  0870  00CE               	movwf	___fldiv@a
  6564  0871  3040               	movlw	64
  6565  0872  00B7               	movwf	___flmul@b+3
  6566  0873  30A0               	movlw	160
  6567  0874  00B6               	movwf	___flmul@b+2
  6568  0875  3000               	movlw	0
  6569  0876  00B5               	movwf	___flmul@b+1
  6570  0877  3000               	movlw	0
  6571  0878  00B4               	movwf	___flmul@b
  6572  0879  3011               	movlw	17
  6573  087A  3198  2000  3188   	fcall	_getAnalogValue
  6574  087D  0140               	movlb	0	; select bank0
  6575  087E  0820               	movf	?_getAnalogValue,w
  6576  087F  0141               	movlb	1	; select bank1
  6577  0880  00B2               	movwf	??_systemCheck^(0+128)
  6578  0881  0140               	movlb	0	; select bank0
  6579  0882  0821               	movf	?_getAnalogValue+1,w
  6580  0883  0141               	movlb	1	; select bank1
  6581  0884  00B3               	movwf	(??_systemCheck^(0+128)+1)
  6582  0885  01B4               	clrf	(??_systemCheck^(0+128)+2)
  6583  0886  01B5               	clrf	(??_systemCheck^(0+128)+3)
  6584  0887  0835               	movf	(??_systemCheck+3)^(0+128),w
  6585  0888  0140               	movlb	0	; select bank0
  6586  0889  00A9               	movwf	___xxtofl@val+3
  6587  088A  0141               	movlb	1	; select bank1
  6588  088B  0834               	movf	(??_systemCheck+2)^(0+128),w
  6589  088C  0140               	movlb	0	; select bank0
  6590  088D  00A8               	movwf	___xxtofl@val+2
  6591  088E  0141               	movlb	1	; select bank1
  6592  088F  0833               	movf	(??_systemCheck+1)^(0+128),w
  6593  0890  0140               	movlb	0	; select bank0
  6594  0891  00A7               	movwf	___xxtofl@val+1
  6595  0892  0141               	movlb	1	; select bank1
  6596  0893  0832               	movf	??_systemCheck^(0+128),w
  6597  0894  0140               	movlb	0	; select bank0
  6598  0895  00A6               	movwf	___xxtofl@val
  6599  0896  3000               	movlw	0
  6600  0897  3198  201D  3188   	fcall	___xxtofl
  6601  089A  0140               	movlb	0	; select bank0
  6602  089B  0829               	movf	?___xxtofl+3,w
  6603  089C  00BB               	movwf	___flmul@a+3
  6604  089D  0828               	movf	?___xxtofl+2,w
  6605  089E  00BA               	movwf	___flmul@a+2
  6606  089F  0827               	movf	?___xxtofl+1,w
  6607  08A0  00B9               	movwf	___flmul@a+1
  6608  08A1  0826               	movf	?___xxtofl,w
  6609  08A2  00B8               	movwf	___flmul@a
  6610  08A3  318D  25D4  3188   	fcall	___flmul
  6611  08A6  0140               	movlb	0	; select bank0
  6612  08A7  0837               	movf	?___flmul+3,w
  6613  08A8  00D5               	movwf	___fldiv@b+3
  6614  08A9  0836               	movf	?___flmul+2,w
  6615  08AA  00D4               	movwf	___fldiv@b+2
  6616  08AB  0835               	movf	?___flmul+1,w
  6617  08AC  00D3               	movwf	___fldiv@b+1
  6618  08AD  0834               	movf	?___flmul,w
  6619  08AE  00D2               	movwf	___fldiv@b
  6620  08AF  3190  2056  3188   	fcall	___fldiv
  6621  08B2  0140               	movlb	0	; select bank0
  6622  08B3  0851               	movf	?___fldiv+3,w
  6623  08B4  00EF               	movwf	___flge@ff2+3
  6624  08B5  0850               	movf	?___fldiv+2,w
  6625  08B6  00EE               	movwf	___flge@ff2+2
  6626  08B7  084F               	movf	?___fldiv+1,w
  6627  08B8  00ED               	movwf	___flge@ff2+1
  6628  08B9  084E               	movf	?___fldiv,w
  6629  08BA  00EC               	movwf	___flge@ff2
  6630  08BB  3199  21F7  3188   	fcall	___flge
  6631  08BE  1803               	btfsc	3,0
  6632  08BF  28C2               	goto	l5778
  6633                           
  6634                           ;system.c: 145:    error(ERR_NUKED);
  6635  08C0  3005               	movlw	5
  6636  08C1  28C3               	goto	L1
  6637  08C2                     l5778:	
  6638                           ;system.c: 146:   } else {
  6639                           
  6640                           
  6641                           ;system.c: 148:    error(ERR_OVERCURRENT);
  6642  08C2  3006               	movlw	6
  6643  08C3                     L1:	
  6644  08C3  3188  2000  3188   	fcall	_error
  6645  08C6                     l5780:	
  6646                           
  6647                           ;system.c: 157:  if ((data->voltage > 13.8) ||
  6648  08C6  3041               	movlw	65
  6649  08C7  0140               	movlb	0	; select bank0
  6650  08C8  00EB               	movwf	___flge@ff1+3
  6651  08C9  305C               	movlw	92
  6652  08CA  00EA               	movwf	___flge@ff1+2
  6653  08CB  30CC               	movlw	204
  6654  08CC  00E9               	movwf	___flge@ff1+1
  6655  08CD  30CD               	movlw	205
  6656  08CE  00E8               	movwf	___flge@ff1
  6657  08CF  0141               	movlb	1	; select bank1
  6658  08D0  0830               	movf	systemCheck@data^(0+128),w
  6659  08D1  0086               	movwf	6
  6660  08D2  0831               	movf	(systemCheck@data+1)^(0+128),w
  6661  08D3  0087               	movwf	7
  6662  08D4  3154               	addfsr 1,20
  6663  08D5  3F40               	moviw [0]fsr1
  6664  08D6  0140               	movlb	0	; select bank0
  6665  08D7  00EC               	movwf	___flge@ff2
  6666  08D8  3F41               	moviw [1]fsr1
  6667  08D9  00ED               	movwf	___flge@ff2+1
  6668  08DA  3F42               	moviw [2]fsr1
  6669  08DB  00EE               	movwf	___flge@ff2+2
  6670  08DC  3F43               	moviw [3]fsr1
  6671  08DD  00EF               	movwf	___flge@ff2+3
  6672  08DE  3199  21F7  3188   	fcall	___flge
  6673  08E1  1C03               	btfss	3,0
  6674  08E2  2900               	goto	l5784
  6675  08E3  3041               	movlw	65
  6676  08E4  0140               	movlb	0	; select bank0
  6677  08E5  00EB               	movwf	___flge@ff1+3
  6678  08E6  3030               	movlw	48
  6679  08E7  00EA               	movwf	___flge@ff1+2
  6680  08E8  3000               	movlw	0
  6681  08E9  00E9               	movwf	___flge@ff1+1
  6682  08EA  3000               	movlw	0
  6683  08EB  00E8               	movwf	___flge@ff1
  6684  08EC  0141               	movlb	1	; select bank1
  6685  08ED  0830               	movf	systemCheck@data^(0+128),w
  6686  08EE  0086               	movwf	6
  6687  08EF  0831               	movf	(systemCheck@data+1)^(0+128),w
  6688  08F0  0087               	movwf	7
  6689  08F1  3154               	addfsr 1,20
  6690  08F2  3F40               	moviw [0]fsr1
  6691  08F3  0140               	movlb	0	; select bank0
  6692  08F4  00EC               	movwf	___flge@ff2
  6693  08F5  3F41               	moviw [1]fsr1
  6694  08F6  00ED               	movwf	___flge@ff2+1
  6695  08F7  3F42               	moviw [2]fsr1
  6696  08F8  00EE               	movwf	___flge@ff2+2
  6697  08F9  3F43               	moviw [3]fsr1
  6698  08FA  00EF               	movwf	___flge@ff2+3
  6699  08FB  3199  21F7  3188   	fcall	___flge
  6700  08FE  1C03               	btfss	3,0
  6701  08FF  295A               	goto	l5816
  6702  0900                     l5784:	
  6703                           
  6704                           ;system.c: 158:    (data->voltage <= 11.0)) {;system.c: 159:   INTCON = 0;
  6705  0900  018B               	clrf	11	;volatile
  6706                           
  6707                           ;system.c: 160:   OLED_clearDisplay();
  6708  0901  31AE  26F2  3188   	fcall	_OLED_clearDisplay
  6709                           
  6710                           ;system.c: 161:   OLED_returnHome();
  6711  0904  31A0  2003  3188   	fcall	_OLED_returnHome
  6712                           
  6713                           ;system.c: 162:   OLED_print_xy(0, 0, "TURNING OFF");
  6714  0907  0140               	movlb	0	; select bank0
  6715  0908  01A7               	clrf	OLED_print_xy@row
  6716  0909  3006               	movlw	low (STR_62| (0+32768))
  6717  090A  00A8               	movwf	OLED_print_xy@s
  6718  090B  30B1               	movlw	high (STR_62| (0+32768))
  6719  090C  00A9               	movwf	OLED_print_xy@s+1
  6720  090D  3000               	movlw	0
  6721  090E  31A0  20CE  3188   	fcall	_OLED_print_xy
  6722                           
  6723                           ;system.c: 163:   setChannelSwitch(255, 0);
  6724  0911  0140               	movlb	0	; select bank0
  6725  0912  01A0               	clrf	setChannelSwitch@state
  6726  0913  30FF               	movlw	255
  6727  0914  31A2  2225  3188   	fcall	_setChannelSwitch
  6728                           
  6729                           ;system.c: 164:   setLoadSwitch(0);
  6730  0917  3000               	movlw	0
  6731  0918  31AE  26F6  3188   	fcall	_setLoadSwitch
  6732                           
  6733                           ;system.c: 165:   for(n = 5; n > 0; n--) {
  6734  091B  3005               	movlw	5
  6735  091C  0141               	movlb	1	; select bank1
  6736  091D  00B2               	movwf	??_systemCheck^(0+128)
  6737  091E  0832               	movf	??_systemCheck^(0+128),w
  6738  091F  00B9               	movwf	systemCheck@n^(0+128)
  6739  0920                     l5802:	
  6740                           
  6741                           ;system.c: 166:    itoa(str, n, 1);
  6742  0920  30B6               	movlw	low systemCheck@str
  6743  0921  00A5               	movwf	itoa@str^(0+128)
  6744  0922  3000               	movlw	high systemCheck@str
  6745  0923  00A6               	movwf	(itoa@str+1)^(0+128)
  6746  0924  0839               	movf	systemCheck@n^(0+128),w
  6747  0925  00B2               	movwf	??_systemCheck^(0+128)
  6748  0926  0832               	movf	??_systemCheck^(0+128),w
  6749  0927  00A7               	movwf	itoa@value^(0+128)
  6750  0928  01A8               	clrf	itoa@width^(0+128)
  6751  0929  0AA8               	incf	itoa@width^(0+128),f
  6752  092A  31A4  2458  3188   	fcall	_itoa
  6753                           
  6754                           ;system.c: 167:    OLED_print_xy(0, 1, "IN ");
  6755  092D  0140               	movlb	0	; select bank0
  6756  092E  01A7               	clrf	OLED_print_xy@row
  6757  092F  0AA7               	incf	OLED_print_xy@row,f
  6758  0930  309B               	movlw	low (STR_63| (0+32768))
  6759  0931  00A8               	movwf	OLED_print_xy@s
  6760  0932  30B1               	movlw	high (STR_63| (0+32768))
  6761  0933  00A9               	movwf	OLED_print_xy@s+1
  6762  0934  3000               	movlw	0
  6763  0935  31A0  20CE  3188   	fcall	_OLED_print_xy
  6764                           
  6765                           ;system.c: 168:    OLED_print_xy(3, 1, str);
  6766  0938  0140               	movlb	0	; select bank0
  6767  0939  01A7               	clrf	OLED_print_xy@row
  6768  093A  0AA7               	incf	OLED_print_xy@row,f
  6769  093B  30B6               	movlw	low systemCheck@str
  6770  093C  00A8               	movwf	OLED_print_xy@s
  6771  093D  3000               	movlw	high systemCheck@str
  6772  093E  00A9               	movwf	OLED_print_xy@s+1
  6773  093F  3003               	movlw	3
  6774  0940  31A0  20CE  3188   	fcall	_OLED_print_xy
  6775                           
  6776                           ;system.c: 169:    _delay((unsigned long)((1000)*(4000000UL/4000.0)));
  6777  0943  3006               	movlw	6
  6778  0944  0141               	movlb	1	; select bank1
  6779  0945  00B3               	movwf	(??_systemCheck^(0+128)+1)
  6780  0946  3013               	movlw	19
  6781  0947  00B2               	movwf	??_systemCheck^(0+128)
  6782  0948  30AD               	movlw	173
  6783  0949                     u6927:	
  6784  0949  0B89               	decfsz	9,f
  6785  094A  2949               	goto	u6927
  6786  094B  0BB2               	decfsz	??_systemCheck^(0+128),f
  6787  094C  2949               	goto	u6927
  6788  094D  0BB3               	decfsz	(??_systemCheck^(0+128)+1),f
  6789  094E  2949               	goto	u6927
  6790  094F  3200               	nop2
  6791                           
  6792                           ;system.c: 170:   }
  6793  0950  3001               	movlw	1
  6794  0951  0141               	movlb	1	; select bank1
  6795  0952  02B9               	subwf	systemCheck@n^(0+128),f
  6796  0953  0839               	movf	systemCheck@n^(0+128),w
  6797  0954  1D03               	btfss	3,2
  6798  0955  2920               	goto	l5802
  6799                           
  6800                           ;system.c: 172:   OLED_Off();
  6801  0956  31AF  272C  3188   	fcall	_OLED_Off
  6802  0959                     l737:	
  6803                           ;system.c: 176:   while(1);
  6804                           
  6805  0959  2959               	goto	l737
  6806  095A                     l5816:	
  6807  095A  3041               	movlw	65
  6808  095B  0140               	movlb	0	; select bank0
  6809  095C  00EB               	movwf	___flge@ff1+3
  6810  095D  3050               	movlw	80
  6811  095E  00EA               	movwf	___flge@ff1+2
  6812  095F  3000               	movlw	0
  6813  0960  00E9               	movwf	___flge@ff1+1
  6814  0961  3000               	movlw	0
  6815  0962  00E8               	movwf	___flge@ff1
  6816  0963  0141               	movlb	1	; select bank1
  6817  0964  0830               	movf	systemCheck@data^(0+128),w
  6818  0965  0086               	movwf	6
  6819  0966  0831               	movf	(systemCheck@data+1)^(0+128),w
  6820  0967  0087               	movwf	7
  6821  0968  3154               	addfsr 1,20
  6822  0969  3F40               	moviw [0]fsr1
  6823  096A  0140               	movlb	0	; select bank0
  6824  096B  00EC               	movwf	___flge@ff2
  6825  096C  3F41               	moviw [1]fsr1
  6826  096D  00ED               	movwf	___flge@ff2+1
  6827  096E  3F42               	moviw [2]fsr1
  6828  096F  00EE               	movwf	___flge@ff2+2
  6829  0970  3F43               	moviw [3]fsr1
  6830  0971  00EF               	movwf	___flge@ff2+3
  6831  0972  3199  21F7  3188   	fcall	___flge
  6832  0975  1803               	btfsc	3,0
  6833  0976  2998               	goto	l5822
  6834  0977  3041               	movlw	65
  6835  0978  0140               	movlb	0	; select bank0
  6836  0979  00EB               	movwf	___flge@ff1+3
  6837  097A  305C               	movlw	92
  6838  097B  00EA               	movwf	___flge@ff1+2
  6839  097C  30CC               	movlw	204
  6840  097D  00E9               	movwf	___flge@ff1+1
  6841  097E  30CD               	movlw	205
  6842  097F  00E8               	movwf	___flge@ff1
  6843  0980  0141               	movlb	1	; select bank1
  6844  0981  0830               	movf	systemCheck@data^(0+128),w
  6845  0982  0086               	movwf	6
  6846  0983  0831               	movf	(systemCheck@data+1)^(0+128),w
  6847  0984  0087               	movwf	7
  6848  0985  3154               	addfsr 1,20
  6849  0986  3F40               	moviw [0]fsr1
  6850  0987  0140               	movlb	0	; select bank0
  6851  0988  00EC               	movwf	___flge@ff2
  6852  0989  3F41               	moviw [1]fsr1
  6853  098A  00ED               	movwf	___flge@ff2+1
  6854  098B  3F42               	moviw [2]fsr1
  6855  098C  00EE               	movwf	___flge@ff2+2
  6856  098D  3F43               	moviw [3]fsr1
  6857  098E  00EF               	movwf	___flge@ff2+3
  6858  098F  3199  21F7  3188   	fcall	___flge
  6859  0992  1C03               	btfss	3,0
  6860  0993  2998               	goto	l5822
  6861                           
  6862                           ;system.c: 178:   error(WARN_VOLT_HIGH);
  6863  0994  3002               	movlw	2
  6864  0995  3188  2000         	fcall	_error
  6865                           
  6866                           ;system.c: 179:  } else if ((data->voltage > 11.0) && (data->voltage <= 11.4)) {
  6867  0997  0008               	return
  6868  0998                     l5822:	
  6869  0998  3041               	movlw	65
  6870  0999  0140               	movlb	0	; select bank0
  6871  099A  00EB               	movwf	___flge@ff1+3
  6872  099B  3030               	movlw	48
  6873  099C  00EA               	movwf	___flge@ff1+2
  6874  099D  3000               	movlw	0
  6875  099E  00E9               	movwf	___flge@ff1+1
  6876  099F  3000               	movlw	0
  6877  09A0  00E8               	movwf	___flge@ff1
  6878  09A1  0141               	movlb	1	; select bank1
  6879  09A2  0830               	movf	systemCheck@data^(0+128),w
  6880  09A3  0086               	movwf	6
  6881  09A4  0831               	movf	(systemCheck@data+1)^(0+128),w
  6882  09A5  0087               	movwf	7
  6883  09A6  3154               	addfsr 1,20
  6884  09A7  3F40               	moviw [0]fsr1
  6885  09A8  0140               	movlb	0	; select bank0
  6886  09A9  00EC               	movwf	___flge@ff2
  6887  09AA  3F41               	moviw [1]fsr1
  6888  09AB  00ED               	movwf	___flge@ff2+1
  6889  09AC  3F42               	moviw [2]fsr1
  6890  09AD  00EE               	movwf	___flge@ff2+2
  6891  09AE  3F43               	moviw [3]fsr1
  6892  09AF  00EF               	movwf	___flge@ff2+3
  6893  09B0  3199  21F7  3188   	fcall	___flge
  6894  09B3  1803               	btfsc	3,0
  6895  09B4  0008               	return
  6896  09B5  3041               	movlw	65
  6897  09B6  0140               	movlb	0	; select bank0
  6898  09B7  00EB               	movwf	___flge@ff1+3
  6899  09B8  3036               	movlw	54
  6900  09B9  00EA               	movwf	___flge@ff1+2
  6901  09BA  3066               	movlw	102
  6902  09BB  00E9               	movwf	___flge@ff1+1
  6903  09BC  3066               	movlw	102
  6904  09BD  00E8               	movwf	___flge@ff1
  6905  09BE  0141               	movlb	1	; select bank1
  6906  09BF  0830               	movf	systemCheck@data^(0+128),w
  6907  09C0  0086               	movwf	6
  6908  09C1  0831               	movf	(systemCheck@data+1)^(0+128),w
  6909  09C2  0087               	movwf	7
  6910  09C3  3154               	addfsr 1,20
  6911  09C4  3F40               	moviw [0]fsr1
  6912  09C5  0140               	movlb	0	; select bank0
  6913  09C6  00EC               	movwf	___flge@ff2
  6914  09C7  3F41               	moviw [1]fsr1
  6915  09C8  00ED               	movwf	___flge@ff2+1
  6916  09C9  3F42               	moviw [2]fsr1
  6917  09CA  00EE               	movwf	___flge@ff2+2
  6918  09CB  3F43               	moviw [3]fsr1
  6919  09CC  00EF               	movwf	___flge@ff2+3
  6920  09CD  3199  21F7  3188   	fcall	___flge
  6921  09D0  1C03               	btfss	3,0
  6922  09D1  0008               	return
  6923                           
  6924                           ;system.c: 180:   error(WARN_VOLT_LOW);
  6925  09D2  3003               	movlw	3
  6926  09D3  3188  2000         	fcall	_error
  6927  09D5  0008               	return
  6928  09D6                     __end_of_systemCheck:	
  6929                           
  6930                           	psect	text2
  6931  2F2C                     __ptext2:	
  6932 ;; *************** function _OLED_Off *****************
  6933 ;; Defined at:
  6934 ;;		line 12 in file "oled.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;		None
  6937 ;; Auto vars:     Size  Location     Type
  6938 ;;		None
  6939 ;; Return value:  Size  Location     Type
  6940 ;;                  1    wreg      void 
  6941 ;; Registers used:
  6942 ;;		wreg, status,2, status,0, pclath, cstack
  6943 ;; Tracked objects:
  6944 ;;		On entry : 0/0
  6945 ;;		On exit  : 0/0
  6946 ;;		Unchanged: 0/0
  6947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6952 ;;Total ram usage:        0 bytes
  6953 ;; Hardware stack levels used:    1
  6954 ;; Hardware stack levels required when called:    7
  6955 ;; This function calls:
  6956 ;;		_OLED_command
  6957 ;; This function is called by:
  6958 ;;		_systemCheck
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           
  6963                           ;psect for function _OLED_Off
  6964  2F2C                     _OLED_Off:	
  6965                           
  6966                           ;oled.c: 14:  OLED_command(0x08);
  6967                           
  6968                           ;incstack = 0
  6969                           ; Regs used in _OLED_Off: [wreg+status,2+status,0+pclath+cstack]
  6970  2F2C  3008               	movlw	8
  6971  2F2D  31AF  2718  31AF   	fcall	_OLED_command
  6972                           
  6973                           ;oled.c: 15:  OLED_command(0x13);
  6974  2F30  3013               	movlw	19
  6975  2F31  31AF  2718         	fcall	_OLED_command
  6976                           
  6977                           ;oled.c: 16:  LATBbits.LATB5 = 1;
  6978  2F33  0140               	movlb	0	; select bank0
  6979  2F34  1699               	bsf	25,5	;volatile
  6980  2F35  0008               	return
  6981  2F36                     __end_of_OLED_Off:	
  6982                           
  6983                           	psect	text3
  6984  2397                     __ptext3:	
  6985 ;; *************** function _menu *****************
  6986 ;; Defined at:
  6987 ;;		line 94 in file "menuhelper.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  data            2   31[BANK1 ] PTR struct .
  6990 ;;		 -> data(173), 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  func            2   39[BANK1 ] PTR FTN(PTR struct .,)un
  6993 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  6994 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  6995 ;;		 -> statusView(1), NULL(0), 
  6996 ;;  nextState       1   41[BANK1 ] char 
  6997 ;;  pb              1   38[BANK1 ] enum E7869
  6998 ;;  page            1   37[BANK1 ] char 
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  1    wreg      void 
  7001 ;; Registers used:
  7002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7008 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7009 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7010 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7011 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7012 ;;Total ram usage:       11 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:   10
  7015 ;; This function calls:
  7016 ;;		_channelSetup
  7017 ;;		_channelView
  7018 ;;		_getNextState
  7019 ;;		_getPB
  7020 ;;		_getStateFunc
  7021 ;;		_menuError
  7022 ;;		_setDPOffset
  7023 ;;		_setFudgeFactor
  7024 ;;		_setLensDia
  7025 ;;		_setOutputPower
  7026 ;;		_setSkyTemp
  7027 ;;		_setup
  7028 ;;		_statusView
  7029 ;; This function is called by:
  7030 ;;		_main
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function _menu
  7036  2397                     _menu:	
  7037                           
  7038                           ;menuhelper.c: 94: void menu(t_globalData *data);menuhelper.c: 95: {;menuhelper.c: 96:  
      +                          static uint8_t state = ST_STATUS_VIEW;;menuhelper.c: 97:  int8_t page, nextState;;menuhe
      +                          lper.c: 98:  enum e_buttonPress pb;;menuhelper.c: 99:  t_stateFuncPtr func;;menuhelper.c
      +                          : 102:  func = getStateFunc(state);
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7042  2397  0141               	movlb	1	; select bank1
  7043  2398  0863               	movf	menu@state^(0+128),w
  7044  2399  3187  27BC  31A3   	fcall	_getStateFunc
  7045  239C  0140               	movlb	0	; select bank0
  7046  239D  0827               	movf	?_getStateFunc+1,w
  7047  239E  0141               	movlb	1	; select bank1
  7048  239F  00C8               	movwf	(menu@func+1)^(0+128)
  7049  23A0  0140               	movlb	0	; select bank0
  7050  23A1  0826               	movf	?_getStateFunc,w
  7051  23A2  0141               	movlb	1	; select bank1
  7052  23A3  00C7               	movwf	menu@func^(0+128)
  7053                           
  7054                           ;menuhelper.c: 103:  if (func)
  7055  23A4  0847               	movf	menu@func^(0+128),w
  7056  23A5  0448               	iorwf	(menu@func+1)^(0+128),w
  7057  23A6  1903               	btfsc	3,2
  7058  23A7  2BB6               	goto	l5834
  7059                           
  7060                           ;menuhelper.c: 104:   page = (*func)(data);
  7061  23A8  0840               	movf	(menu@data+1)^(0+128),w
  7062  23A9  00B5               	movwf	(setFudgeFactor@data+1)^(0+128)
  7063  23AA  083F               	movf	menu@data^(0+128),w
  7064  23AB  00B4               	movwf	setFudgeFactor@data^(0+128)
  7065  23AC  0848               	movf	(menu@func+1)^(0+128),w
  7066  23AD  008A               	movwf	10
  7067  23AE  0847               	movf	menu@func^(0+128),w
  7068  23AF  000A               	callw
  7069  23B0  31A3               	pagesel	$
  7070  23B1  0141               	movlb	1	; select bank1
  7071  23B2  00C1               	movwf	??_menu^(0+128)
  7072  23B3  0841               	movf	??_menu^(0+128),w
  7073  23B4  00C5               	movwf	menu@page^(0+128)
  7074  23B5  2BB9               	goto	l5836
  7075  23B6                     l5834:	
  7076                           
  7077                           ;menuhelper.c: 106:   menuError();
  7078  23B6  31AF  278B  31A3   	fcall	_menuError
  7079  23B9                     l5836:	
  7080                           
  7081                           ;menuhelper.c: 108:  g_updateScreen = 0;
  7082  23B9  0141               	movlb	1	; select bank1
  7083  23BA  01EF               	clrf	_g_updateScreen^(0+128)
  7084                           
  7085                           ;menuhelper.c: 109:  pb = getPB();
  7086  23BB  31AF  2757  31A3   	fcall	_getPB
  7087  23BE  0141               	movlb	1	; select bank1
  7088  23BF  00C1               	movwf	??_menu^(0+128)
  7089  23C0  0841               	movf	??_menu^(0+128),w
  7090  23C1  00C6               	movwf	menu@pb^(0+128)
  7091                           
  7092                           ;menuhelper.c: 111:  nextState = getNextState(state, page, pb);
  7093  23C2  0845               	movf	menu@page^(0+128),w
  7094  23C3  00C1               	movwf	??_menu^(0+128)
  7095  23C4  0841               	movf	??_menu^(0+128),w
  7096  23C5  0140               	movlb	0	; select bank0
  7097  23C6  00A6               	movwf	getNextState@intState
  7098  23C7  0141               	movlb	1	; select bank1
  7099  23C8  0846               	movf	menu@pb^(0+128),w
  7100  23C9  00C2               	movwf	(??_menu+1)^(0+128)
  7101  23CA  0842               	movf	(??_menu+1)^(0+128),w
  7102  23CB  0140               	movlb	0	; select bank0
  7103  23CC  00A7               	movwf	getNextState@pb
  7104  23CD  0141               	movlb	1	; select bank1
  7105  23CE  0863               	movf	menu@state^(0+128),w
  7106  23CF  3199  214A  31A3   	fcall	_getNextState
  7107  23D2  0141               	movlb	1	; select bank1
  7108  23D3  00C3               	movwf	(??_menu+2)^(0+128)
  7109  23D4  0843               	movf	(??_menu+2)^(0+128),w
  7110  23D5  00C9               	movwf	menu@nextState^(0+128)
  7111                           
  7112                           ;menuhelper.c: 113:  if (nextState > -1) {
  7113  23D6  1BC9               	btfsc	menu@nextState^(0+128),7
  7114  23D7  0008               	return
  7115                           
  7116                           ;menuhelper.c: 115:   if (state != nextState) {
  7117  23D8  0849               	movf	menu@nextState^(0+128),w
  7118  23D9  00C1               	movwf	??_menu^(0+128)
  7119  23DA  01C2               	clrf	(??_menu^(0+128)+1)
  7120  23DB  1BC1               	btfsc	??_menu^(0+128),7
  7121  23DC  03C2               	decf	(??_menu^(0+128)+1),f
  7122  23DD  0863               	movf	menu@state^(0+128),w
  7123  23DE  00C3               	movwf	(??_menu+2)^(0+128)
  7124  23DF  01C4               	clrf	((??_menu+2)^(0+128)+1)
  7125  23E0  0842               	movf	(??_menu+1)^(0+128),w
  7126  23E1  0644               	xorwf	(??_menu+3)^(0+128),w
  7127  23E2  1D03               	skipz
  7128  23E3  2BE6               	goto	u6885
  7129  23E4  0841               	movf	??_menu^(0+128),w
  7130  23E5  0643               	xorwf	(??_menu+2)^(0+128),w
  7131  23E6                     u6885:	
  7132  23E6  1903               	skipnz
  7133  23E7  0008               	return
  7134                           
  7135                           ;menuhelper.c: 116:    g_updateScreen = 1;
  7136  23E8  01EF               	clrf	_g_updateScreen^(0+128)
  7137  23E9  0AEF               	incf	_g_updateScreen^(0+128),f
  7138                           
  7139                           ;menuhelper.c: 117:    state = nextState;
  7140  23EA  0849               	movf	menu@nextState^(0+128),w
  7141  23EB  00C1               	movwf	??_menu^(0+128)
  7142  23EC  0841               	movf	??_menu^(0+128),w
  7143  23ED  00E3               	movwf	menu@state^(0+128)
  7144  23EE  0008               	return
  7145  23EF                     __end_of_menu:	
  7146                           
  7147                           	psect	text4
  7148  2609                     __ptext4:	
  7149 ;; *************** function _setFudgeFactor *****************
  7150 ;; Defined at:
  7151 ;;		line 299 in file "menu.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  data            2   20[BANK1 ] PTR struct .
  7154 ;;		 -> data(173), 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;		None
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  1    wreg      unsigned char 
  7159 ;; Registers used:
  7160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7166 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7168 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7169 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7170 ;;Total ram usage:        3 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    8
  7173 ;; This function calls:
  7174 ;;		_OLED_print_xy
  7175 ;;		_ftoa
  7176 ;;		_returnToPage
  7177 ;;		_spinInput
  7178 ;; This function is called by:
  7179 ;;		_menu
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _setFudgeFactor
  7185  2609                     _setFudgeFactor:	
  7186                           
  7187                           ;menu.c: 299: uint8_t setFudgeFactor(t_globalData *data);menu.c: 300: {;menu.c: 301:  re
      +                          turnToPage(0);
  7188                           
  7189                           ;incstack = 0
  7190                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7191  2609  3000               	movlw	0
  7192  260A  31A1  2100  31A6   	fcall	_returnToPage
  7193                           
  7194                           ;menu.c: 302:  if (g_updateScreen)
  7195  260D  0141               	movlb	1	; select bank1
  7196  260E  086F               	movf	_g_updateScreen^(0+128),w
  7197  260F  1903               	btfsc	3,2
  7198  2610  2E1B               	goto	l4794
  7199                           
  7200                           ;menu.c: 303:   OLED_print_xy(0, 0, "Fudge factor");
  7201  2611  0140               	movlb	0	; select bank0
  7202  2612  01A7               	clrf	OLED_print_xy@row
  7203  2613  30B8               	movlw	low ((STR_47+24)| (0+32768))
  7204  2614  00A8               	movwf	OLED_print_xy@s
  7205  2615  30A8               	movlw	high ((STR_47+24)| (0+32768))
  7206  2616  00A9               	movwf	OLED_print_xy@s+1
  7207  2617  3000               	movlw	0
  7208  2618  31A0  20CE  31A6   	fcall	_OLED_print_xy
  7209  261B                     l4794:	
  7210                           
  7211                           ;menu.c: 304:  spinInput(&data->fudgeFactor, 0.1, 5.0, 0.1);
  7212  261B  0141               	movlb	1	; select bank1
  7213  261C  0834               	movf	setFudgeFactor@data^(0+128),w
  7214  261D  3E28               	addlw	40
  7215  261E  00A4               	movwf	spinInput@input^(0+128)
  7216  261F  3000               	movlw	0
  7217  2620  3D35               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  7218  2621  00A5               	movwf	(spinInput@input+1)^(0+128)
  7219  2622  303D               	movlw	61
  7220  2623  00A9               	movwf	(spinInput@min+3)^(0+128)
  7221  2624  30CC               	movlw	204
  7222  2625  00A8               	movwf	(spinInput@min+2)^(0+128)
  7223  2626  30CC               	movlw	204
  7224  2627  00A7               	movwf	(spinInput@min+1)^(0+128)
  7225  2628  30CD               	movlw	205
  7226  2629  00A6               	movwf	spinInput@min^(0+128)
  7227  262A  3040               	movlw	64
  7228  262B  00AD               	movwf	(spinInput@max+3)^(0+128)
  7229  262C  30A0               	movlw	160
  7230  262D  00AC               	movwf	(spinInput@max+2)^(0+128)
  7231  262E  3000               	movlw	0
  7232  262F  00AB               	movwf	(spinInput@max+1)^(0+128)
  7233  2630  3000               	movlw	0
  7234  2631  00AA               	movwf	spinInput@max^(0+128)
  7235  2632  303D               	movlw	61
  7236  2633  00B1               	movwf	(spinInput@step+3)^(0+128)
  7237  2634  30CC               	movlw	204
  7238  2635  00B0               	movwf	(spinInput@step+2)^(0+128)
  7239  2636  30CC               	movlw	204
  7240  2637  00AF               	movwf	(spinInput@step+1)^(0+128)
  7241  2638  30CD               	movlw	205
  7242  2639  00AE               	movwf	spinInput@step^(0+128)
  7243  263A  319A  22A5  31A6   	fcall	_spinInput
  7244                           
  7245                           ;menu.c: 305:  ftoa(str, data->fudgeFactor, 3, 1);
  7246  263D  0141               	movlb	1	; select bank1
  7247  263E  0834               	movf	setFudgeFactor@data^(0+128),w
  7248  263F  3E28               	addlw	40
  7249  2640  0086               	movwf	6
  7250  2641  3000               	movlw	0
  7251  2642  3D35               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  7252  2643  0087               	movwf	7
  7253  2644  3F40               	moviw [0]fsr1
  7254  2645  00A5               	movwf	ftoa@fValue^(0+128)
  7255  2646  3F41               	moviw [1]fsr1
  7256  2647  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7257  2648  3F42               	moviw [2]fsr1
  7258  2649  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7259  264A  3F43               	moviw [3]fsr1
  7260  264B  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7261  264C  3003               	movlw	3
  7262  264D  00B6               	movwf	??_setFudgeFactor^(0+128)
  7263  264E  0836               	movf	??_setFudgeFactor^(0+128),w
  7264  264F  00A9               	movwf	ftoa@width^(0+128)
  7265  2650  01AA               	clrf	ftoa@prec^(0+128)
  7266  2651  0AAA               	incf	ftoa@prec^(0+128),f
  7267  2652  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7268  2653  319E  268B  31A6   	fcall	_ftoa
  7269                           
  7270                           ;menu.c: 306:  OLED_print_xy(0, 1, "\004");
  7271  2656  0140               	movlb	0	; select bank0
  7272  2657  01A7               	clrf	OLED_print_xy@row
  7273  2658  0AA7               	incf	OLED_print_xy@row,f
  7274  2659  3085               	movlw	low ((STR_53+5)| (0+32768))
  7275  265A  00A8               	movwf	OLED_print_xy@s
  7276  265B  30B1               	movlw	high ((STR_53+5)| (0+32768))
  7277  265C  00A9               	movwf	OLED_print_xy@s+1
  7278  265D  3000               	movlw	0
  7279  265E  31A0  20CE  31A6   	fcall	_OLED_print_xy
  7280                           
  7281                           ;menu.c: 307:  OLED_print_xy(1, 1, str);
  7282  2661  0140               	movlb	0	; select bank0
  7283  2662  01A7               	clrf	OLED_print_xy@row
  7284  2663  0AA7               	incf	OLED_print_xy@row,f
  7285  2664  3059               	movlw	low _str
  7286  2665  00A8               	movwf	OLED_print_xy@s
  7287  2666  3001               	movlw	high _str
  7288  2667  00A9               	movwf	OLED_print_xy@s+1
  7289  2668  3001               	movlw	1
  7290  2669  31A0  20CE  31A6   	fcall	_OLED_print_xy
  7291                           
  7292                           ;menu.c: 308:  OLED_print_xy(4, 1, " \003      ");
  7293  266C  0140               	movlb	0	; select bank0
  7294  266D  01A7               	clrf	OLED_print_xy@row
  7295  266E  0AA7               	incf	OLED_print_xy@row,f
  7296  266F  3030               	movlw	low (STR_60| (0+32768))
  7297  2670  00A8               	movwf	OLED_print_xy@s
  7298  2671  30B1               	movlw	high (STR_60| (0+32768))
  7299  2672  00A9               	movwf	OLED_print_xy@s+1
  7300  2673  3004               	movlw	4
  7301  2674  31A0  20CE         	fcall	_OLED_print_xy
  7302                           
  7303                           ;menu.c: 309:  return 0;
  7304  2676  3000               	movlw	0
  7305  2677  0008               	return
  7306  2678                     __end_of_setFudgeFactor:	
  7307                           
  7308                           	psect	text5
  7309  252C                     __ptext5:	
  7310 ;; *************** function _setSkyTemp *****************
  7311 ;; Defined at:
  7312 ;;		line 282 in file "menu.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;  data            2   20[BANK1 ] PTR struct .
  7315 ;;		 -> data(173), 
  7316 ;; Auto vars:     Size  Location     Type
  7317 ;;		None
  7318 ;; Return value:  Size  Location     Type
  7319 ;;                  1    wreg      unsigned char 
  7320 ;; Registers used:
  7321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7322 ;; Tracked objects:
  7323 ;;		On entry : 0/0
  7324 ;;		On exit  : 0/0
  7325 ;;		Unchanged: 0/0
  7326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7327 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7329 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7330 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7331 ;;Total ram usage:        3 bytes
  7332 ;; Hardware stack levels used:    1
  7333 ;; Hardware stack levels required when called:    8
  7334 ;; This function calls:
  7335 ;;		_OLED_print_xy
  7336 ;;		_ftoa
  7337 ;;		_returnToPage
  7338 ;;		_spinInput
  7339 ;; This function is called by:
  7340 ;;		_menu
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           
  7345                           ;psect for function _setSkyTemp
  7346  252C                     _setSkyTemp:	
  7347                           
  7348                           ;menu.c: 282: uint8_t setSkyTemp(t_globalData *data);menu.c: 283: {;menu.c: 284:  return
      +                          ToPage(0);
  7349                           
  7350                           ;incstack = 0
  7351                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7352  252C  3000               	movlw	0
  7353  252D  31A1  2100  31A5   	fcall	_returnToPage
  7354                           
  7355                           ;menu.c: 285:  if (g_updateScreen)
  7356  2530  0141               	movlb	1	; select bank1
  7357  2531  086F               	movf	_g_updateScreen^(0+128),w
  7358  2532  1903               	btfsc	3,2
  7359  2533  2D3E               	goto	l4780
  7360                           
  7361                           ;menu.c: 286:   OLED_print_xy(0, 0, "Sky temp.   ");
  7362  2534  0140               	movlb	0	; select bank0
  7363  2535  01A7               	clrf	OLED_print_xy@row
  7364  2536  3077               	movlw	low (STR_55| (0+32768))
  7365  2537  00A8               	movwf	OLED_print_xy@s
  7366  2538  30B0               	movlw	high (STR_55| (0+32768))
  7367  2539  00A9               	movwf	OLED_print_xy@s+1
  7368  253A  3000               	movlw	0
  7369  253B  31A0  20CE  31A5   	fcall	_OLED_print_xy
  7370  253E                     l4780:	
  7371                           
  7372                           ;menu.c: 287:  spinInput(&data->skyTemp, -50, -20, 1);
  7373  253E  0141               	movlb	1	; select bank1
  7374  253F  0834               	movf	setSkyTemp@data^(0+128),w
  7375  2540  3E24               	addlw	36
  7376  2541  00A4               	movwf	spinInput@input^(0+128)
  7377  2542  3000               	movlw	0
  7378  2543  3D35               	addwfc	(setSkyTemp@data+1)^(0+128),w
  7379  2544  00A5               	movwf	(spinInput@input+1)^(0+128)
  7380  2545  30C2               	movlw	194
  7381  2546  00A9               	movwf	(spinInput@min+3)^(0+128)
  7382  2547  3048               	movlw	72
  7383  2548  00A8               	movwf	(spinInput@min+2)^(0+128)
  7384  2549  3000               	movlw	0
  7385  254A  00A7               	movwf	(spinInput@min+1)^(0+128)
  7386  254B  3000               	movlw	0
  7387  254C  00A6               	movwf	spinInput@min^(0+128)
  7388  254D  30C1               	movlw	193
  7389  254E  00AD               	movwf	(spinInput@max+3)^(0+128)
  7390  254F  30A0               	movlw	160
  7391  2550  00AC               	movwf	(spinInput@max+2)^(0+128)
  7392  2551  3000               	movlw	0
  7393  2552  00AB               	movwf	(spinInput@max+1)^(0+128)
  7394  2553  3000               	movlw	0
  7395  2554  00AA               	movwf	spinInput@max^(0+128)
  7396  2555  303F               	movlw	63
  7397  2556  00B1               	movwf	(spinInput@step+3)^(0+128)
  7398  2557  3080               	movlw	128
  7399  2558  00B0               	movwf	(spinInput@step+2)^(0+128)
  7400  2559  3000               	movlw	0
  7401  255A  00AF               	movwf	(spinInput@step+1)^(0+128)
  7402  255B  3000               	movlw	0
  7403  255C  00AE               	movwf	spinInput@step^(0+128)
  7404  255D  319A  22A5  31A5   	fcall	_spinInput
  7405                           
  7406                           ;menu.c: 288:  ftoa(str, data->skyTemp, 3, 0);
  7407  2560  0141               	movlb	1	; select bank1
  7408  2561  0834               	movf	setSkyTemp@data^(0+128),w
  7409  2562  3E24               	addlw	36
  7410  2563  0086               	movwf	6
  7411  2564  3000               	movlw	0
  7412  2565  3D35               	addwfc	(setSkyTemp@data+1)^(0+128),w
  7413  2566  0087               	movwf	7
  7414  2567  3F40               	moviw [0]fsr1
  7415  2568  00A5               	movwf	ftoa@fValue^(0+128)
  7416  2569  3F41               	moviw [1]fsr1
  7417  256A  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7418  256B  3F42               	moviw [2]fsr1
  7419  256C  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7420  256D  3F43               	moviw [3]fsr1
  7421  256E  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7422  256F  3003               	movlw	3
  7423  2570  00B6               	movwf	??_setSkyTemp^(0+128)
  7424  2571  0836               	movf	??_setSkyTemp^(0+128),w
  7425  2572  00A9               	movwf	ftoa@width^(0+128)
  7426  2573  01AA               	clrf	ftoa@prec^(0+128)
  7427  2574  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7428  2575  319E  268B  31A5   	fcall	_ftoa
  7429                           
  7430                           ;menu.c: 289:  OLED_print_xy(0, 1, "\004");
  7431  2578  0140               	movlb	0	; select bank0
  7432  2579  01A7               	clrf	OLED_print_xy@row
  7433  257A  0AA7               	incf	OLED_print_xy@row,f
  7434  257B  3085               	movlw	low ((STR_53+5)| (0+32768))
  7435  257C  00A8               	movwf	OLED_print_xy@s
  7436  257D  30B1               	movlw	high ((STR_53+5)| (0+32768))
  7437  257E  00A9               	movwf	OLED_print_xy@s+1
  7438  257F  3000               	movlw	0
  7439  2580  31A0  20CE  31A5   	fcall	_OLED_print_xy
  7440                           
  7441                           ;menu.c: 290:  OLED_print_xy(1, 1, str);
  7442  2583  0140               	movlb	0	; select bank0
  7443  2584  01A7               	clrf	OLED_print_xy@row
  7444  2585  0AA7               	incf	OLED_print_xy@row,f
  7445  2586  3059               	movlw	low _str
  7446  2587  00A8               	movwf	OLED_print_xy@s
  7447  2588  3001               	movlw	high _str
  7448  2589  00A9               	movwf	OLED_print_xy@s+1
  7449  258A  3001               	movlw	1
  7450  258B  31A0  20CE  31A5   	fcall	_OLED_print_xy
  7451                           
  7452                           ;menu.c: 291:  OLED_print_xy(4, 1, "\001 \003     ");
  7453  258E  0140               	movlb	0	; select bank0
  7454  258F  01A7               	clrf	OLED_print_xy@row
  7455  2590  0AA7               	incf	OLED_print_xy@row,f
  7456  2591  3027               	movlw	low (STR_57| (0+32768))
  7457  2592  00A8               	movwf	OLED_print_xy@s
  7458  2593  30B1               	movlw	high (STR_57| (0+32768))
  7459  2594  00A9               	movwf	OLED_print_xy@s+1
  7460  2595  3004               	movlw	4
  7461  2596  31A0  20CE         	fcall	_OLED_print_xy
  7462                           
  7463                           ;menu.c: 292:  return 0;
  7464  2598  3000               	movlw	0
  7465  2599  0008               	return
  7466  259A                     __end_of_setSkyTemp:	
  7467                           
  7468                           	psect	text6
  7469  259A                     __ptext6:	
  7470 ;; *************** function _setDPOffset *****************
  7471 ;; Defined at:
  7472 ;;		line 265 in file "menu.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  data            2   20[BANK1 ] PTR struct .
  7475 ;;		 -> data(173), 
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;		None
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  1    wreg      unsigned char 
  7480 ;; Registers used:
  7481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7487 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7489 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7490 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7491 ;;Total ram usage:        3 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    8
  7494 ;; This function calls:
  7495 ;;		_OLED_print_xy
  7496 ;;		_ftoa
  7497 ;;		_returnToPage
  7498 ;;		_spinInput
  7499 ;; This function is called by:
  7500 ;;		_menu
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           
  7505                           ;psect for function _setDPOffset
  7506  259A                     _setDPOffset:	
  7507                           
  7508                           ;menu.c: 265: uint8_t setDPOffset(t_globalData *data);menu.c: 266: {;menu.c: 267:  retur
      +                          nToPage(0);
  7509                           
  7510                           ;incstack = 0
  7511                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7512  259A  3000               	movlw	0
  7513  259B  31A1  2100  31A5   	fcall	_returnToPage
  7514                           
  7515                           ;menu.c: 268:  if (g_updateScreen)
  7516  259E  0141               	movlb	1	; select bank1
  7517  259F  086F               	movf	_g_updateScreen^(0+128),w
  7518  25A0  1903               	btfsc	3,2
  7519  25A1  2DAC               	goto	l4766
  7520                           
  7521                           ;menu.c: 269:   OLED_print_xy(0, 0, "DP offset   ");
  7522  25A2  0140               	movlb	0	; select bank0
  7523  25A3  01A7               	clrf	OLED_print_xy@row
  7524  25A4  3091               	movlw	low (STR_52| (0+32768))
  7525  25A5  00A8               	movwf	OLED_print_xy@s
  7526  25A6  30B0               	movlw	high (STR_52| (0+32768))
  7527  25A7  00A9               	movwf	OLED_print_xy@s+1
  7528  25A8  3000               	movlw	0
  7529  25A9  31A0  20CE  31A5   	fcall	_OLED_print_xy
  7530  25AC                     l4766:	
  7531                           
  7532                           ;menu.c: 270:  spinInput(&data->dpOffset, 0, 10, 0.5);
  7533  25AC  0141               	movlb	1	; select bank1
  7534  25AD  0834               	movf	setDPOffset@data^(0+128),w
  7535  25AE  3E20               	addlw	32
  7536  25AF  00A4               	movwf	spinInput@input^(0+128)
  7537  25B0  3000               	movlw	0
  7538  25B1  3D35               	addwfc	(setDPOffset@data+1)^(0+128),w
  7539  25B2  00A5               	movwf	(spinInput@input+1)^(0+128)
  7540  25B3  3000               	movlw	0
  7541  25B4  00A9               	movwf	(spinInput@min+3)^(0+128)
  7542  25B5  3000               	movlw	0
  7543  25B6  00A8               	movwf	(spinInput@min+2)^(0+128)
  7544  25B7  3000               	movlw	0
  7545  25B8  00A7               	movwf	(spinInput@min+1)^(0+128)
  7546  25B9  3000               	movlw	0
  7547  25BA  00A6               	movwf	spinInput@min^(0+128)
  7548  25BB  3041               	movlw	65
  7549  25BC  00AD               	movwf	(spinInput@max+3)^(0+128)
  7550  25BD  3020               	movlw	32
  7551  25BE  00AC               	movwf	(spinInput@max+2)^(0+128)
  7552  25BF  3000               	movlw	0
  7553  25C0  00AB               	movwf	(spinInput@max+1)^(0+128)
  7554  25C1  3000               	movlw	0
  7555  25C2  00AA               	movwf	spinInput@max^(0+128)
  7556  25C3  303F               	movlw	63
  7557  25C4  00B1               	movwf	(spinInput@step+3)^(0+128)
  7558  25C5  3000               	movlw	0
  7559  25C6  00B0               	movwf	(spinInput@step+2)^(0+128)
  7560  25C7  3000               	movlw	0
  7561  25C8  00AF               	movwf	(spinInput@step+1)^(0+128)
  7562  25C9  3000               	movlw	0
  7563  25CA  00AE               	movwf	spinInput@step^(0+128)
  7564  25CB  319A  22A5  31A5   	fcall	_spinInput
  7565                           
  7566                           ;menu.c: 271:  ftoa(str, data->dpOffset, 4, 1);
  7567  25CE  0141               	movlb	1	; select bank1
  7568  25CF  0834               	movf	setDPOffset@data^(0+128),w
  7569  25D0  3E20               	addlw	32
  7570  25D1  0086               	movwf	6
  7571  25D2  3000               	movlw	0
  7572  25D3  3D35               	addwfc	(setDPOffset@data+1)^(0+128),w
  7573  25D4  0087               	movwf	7
  7574  25D5  3F40               	moviw [0]fsr1
  7575  25D6  00A5               	movwf	ftoa@fValue^(0+128)
  7576  25D7  3F41               	moviw [1]fsr1
  7577  25D8  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7578  25D9  3F42               	moviw [2]fsr1
  7579  25DA  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7580  25DB  3F43               	moviw [3]fsr1
  7581  25DC  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7582  25DD  3004               	movlw	4
  7583  25DE  00B6               	movwf	??_setDPOffset^(0+128)
  7584  25DF  0836               	movf	??_setDPOffset^(0+128),w
  7585  25E0  00A9               	movwf	ftoa@width^(0+128)
  7586  25E1  01AA               	clrf	ftoa@prec^(0+128)
  7587  25E2  0AAA               	incf	ftoa@prec^(0+128),f
  7588  25E3  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7589  25E4  319E  268B  31A5   	fcall	_ftoa
  7590                           
  7591                           ;menu.c: 272:  OLED_print_xy(0, 1, "temp.\004");
  7592  25E7  0140               	movlb	0	; select bank0
  7593  25E8  01A7               	clrf	OLED_print_xy@row
  7594  25E9  0AA7               	incf	OLED_print_xy@row,f
  7595  25EA  3080               	movlw	low (STR_53| (0+32768))
  7596  25EB  00A8               	movwf	OLED_print_xy@s
  7597  25EC  30B1               	movlw	high (STR_53| (0+32768))
  7598  25ED  00A9               	movwf	OLED_print_xy@s+1
  7599  25EE  3000               	movlw	0
  7600  25EF  31A0  20CE  31A5   	fcall	_OLED_print_xy
  7601                           
  7602                           ;menu.c: 273:  OLED_print_xy(6, 1, str);
  7603  25F2  0140               	movlb	0	; select bank0
  7604  25F3  01A7               	clrf	OLED_print_xy@row
  7605  25F4  0AA7               	incf	OLED_print_xy@row,f
  7606  25F5  3059               	movlw	low _str
  7607  25F6  00A8               	movwf	OLED_print_xy@s
  7608  25F7  3001               	movlw	high _str
  7609  25F8  00A9               	movwf	OLED_print_xy@s+1
  7610  25F9  3006               	movlw	6
  7611  25FA  31A0  20CE  31A5   	fcall	_OLED_print_xy
  7612                           
  7613                           ;menu.c: 274:  OLED_print_xy(10, 1, "\001\003");
  7614  25FD  0140               	movlb	0	; select bank0
  7615  25FE  01A7               	clrf	OLED_print_xy@row
  7616  25FF  0AA7               	incf	OLED_print_xy@row,f
  7617  2600  30AB               	movlw	low (STR_54| (0+32768))
  7618  2601  00A8               	movwf	OLED_print_xy@s
  7619  2602  30B1               	movlw	high (STR_54| (0+32768))
  7620  2603  00A9               	movwf	OLED_print_xy@s+1
  7621  2604  300A               	movlw	10
  7622  2605  31A0  20CE         	fcall	_OLED_print_xy
  7623                           
  7624                           ;menu.c: 275:  return 0;
  7625  2607  3000               	movlw	0
  7626  2608  0008               	return
  7627  2609                     __end_of_setDPOffset:	
  7628                           
  7629                           	psect	text7
  7630  1B56                     __ptext7:	
  7631 ;; *************** function _setup *****************
  7632 ;; Defined at:
  7633 ;;		line 241 in file "menu.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;  data            2   20[BANK1 ] PTR struct .
  7636 ;;		 -> data(173), 
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;		None
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      unsigned char 
  7641 ;; Registers used:
  7642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7648 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7650 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7651 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7652 ;;Total ram usage:        4 bytes
  7653 ;; Hardware stack levels used:    1
  7654 ;; Hardware stack levels required when called:    9
  7655 ;; This function calls:
  7656 ;;		_OLED_print_xy
  7657 ;;		_ftoa
  7658 ;;		_paging
  7659 ;;		_returnToPage
  7660 ;; This function is called by:
  7661 ;;		_menu
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           
  7666                           ;psect for function _setup
  7667  1B56                     _setup:	
  7668                           
  7669                           ;menu.c: 241: uint8_t setup(t_globalData *data);menu.c: 242: {;menu.c: 243:  static uint
      +                          8_t page = 0;;menu.c: 245:  returnToPage(page);
  7670                           
  7671                           ;incstack = 0
  7672                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7673  1B56  0141               	movlb	1	; select bank1
  7674  1B57  0864               	movf	setup@page^(0+128),w
  7675  1B58  31A1  2100  319B   	fcall	_returnToPage
  7676                           
  7677                           ;menu.c: 246:  if (g_updateScreen) {
  7678  1B5B  0141               	movlb	1	; select bank1
  7679  1B5C  086F               	movf	_g_updateScreen^(0+128),w
  7680  1B5D  1903               	btfsc	3,2
  7681  1B5E  2C00               	goto	l4754
  7682                           
  7683                           ;menu.c: 247:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  7684  1B5F  0140               	movlb	0	; select bank0
  7685  1B60  01A7               	clrf	OLED_print_xy@row
  7686  1B61  30A0               	movlw	low (STR_47| (0+32768))
  7687  1B62  00A8               	movwf	OLED_print_xy@s
  7688  1B63  30A8               	movlw	high (STR_47| (0+32768))
  7689  1B64  00A9               	movwf	OLED_print_xy@s+1
  7690  1B65  3000               	movlw	0
  7691  1B66  31A0  20CE  319B   	fcall	_OLED_print_xy
  7692                           
  7693                           ;menu.c: 248:   OLED_print_xy(0, 1, "temp. ");
  7694  1B69  0140               	movlb	0	; select bank0
  7695  1B6A  01A7               	clrf	OLED_print_xy@row
  7696  1B6B  0AA7               	incf	OLED_print_xy@row,f
  7697  1B6C  308E               	movlw	low (STR_48| (0+32768))
  7698  1B6D  00A8               	movwf	OLED_print_xy@s
  7699  1B6E  30B1               	movlw	high (STR_48| (0+32768))
  7700  1B6F  00A9               	movwf	OLED_print_xy@s+1
  7701  1B70  3000               	movlw	0
  7702  1B71  31A0  20CE  319B   	fcall	_OLED_print_xy
  7703                           
  7704                           ;menu.c: 249:   ftoa(str, data->dpOffset, 4, 1);
  7705  1B74  0141               	movlb	1	; select bank1
  7706  1B75  0834               	movf	setup@data^(0+128),w
  7707  1B76  3E20               	addlw	32
  7708  1B77  0086               	movwf	6
  7709  1B78  3000               	movlw	0
  7710  1B79  3D35               	addwfc	(setup@data+1)^(0+128),w
  7711  1B7A  0087               	movwf	7
  7712  1B7B  3F40               	moviw [0]fsr1
  7713  1B7C  00A5               	movwf	ftoa@fValue^(0+128)
  7714  1B7D  3F41               	moviw [1]fsr1
  7715  1B7E  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7716  1B7F  3F42               	moviw [2]fsr1
  7717  1B80  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7718  1B81  3F43               	moviw [3]fsr1
  7719  1B82  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7720  1B83  3004               	movlw	4
  7721  1B84  00B6               	movwf	??_setup^(0+128)
  7722  1B85  0836               	movf	??_setup^(0+128),w
  7723  1B86  00A9               	movwf	ftoa@width^(0+128)
  7724  1B87  01AA               	clrf	ftoa@prec^(0+128)
  7725  1B88  0AAA               	incf	ftoa@prec^(0+128),f
  7726  1B89  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7727  1B8A  319E  268B  319B   	fcall	_ftoa
  7728                           
  7729                           ;menu.c: 250:   OLED_print_xy(6, 1, str);
  7730  1B8D  0140               	movlb	0	; select bank0
  7731  1B8E  01A7               	clrf	OLED_print_xy@row
  7732  1B8F  0AA7               	incf	OLED_print_xy@row,f
  7733  1B90  3059               	movlw	low _str
  7734  1B91  00A8               	movwf	OLED_print_xy@s
  7735  1B92  3001               	movlw	high _str
  7736  1B93  00A9               	movwf	OLED_print_xy@s+1
  7737  1B94  3006               	movlw	6
  7738  1B95  31A0  20CE  319B   	fcall	_OLED_print_xy
  7739                           
  7740                           ;menu.c: 251:   OLED_print_xy(10, 1, "\001 ");
  7741  1B98  0140               	movlb	0	; select bank0
  7742  1B99  01A7               	clrf	OLED_print_xy@row
  7743  1B9A  0AA7               	incf	OLED_print_xy@row,f
  7744  1B9B  30AE               	movlw	low (STR_49| (0+32768))
  7745  1B9C  00A8               	movwf	OLED_print_xy@s
  7746  1B9D  30B1               	movlw	high (STR_49| (0+32768))
  7747  1B9E  00A9               	movwf	OLED_print_xy@s+1
  7748  1B9F  300A               	movlw	10
  7749  1BA0  31A0  20CE  319B   	fcall	_OLED_print_xy
  7750                           
  7751                           ;menu.c: 252:   ftoa(str, data->skyTemp, 3, 0);
  7752  1BA3  0141               	movlb	1	; select bank1
  7753  1BA4  0834               	movf	setup@data^(0+128),w
  7754  1BA5  3E24               	addlw	36
  7755  1BA6  0086               	movwf	6
  7756  1BA7  3000               	movlw	0
  7757  1BA8  3D35               	addwfc	(setup@data+1)^(0+128),w
  7758  1BA9  0087               	movwf	7
  7759  1BAA  3F40               	moviw [0]fsr1
  7760  1BAB  00A5               	movwf	ftoa@fValue^(0+128)
  7761  1BAC  3F41               	moviw [1]fsr1
  7762  1BAD  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7763  1BAE  3F42               	moviw [2]fsr1
  7764  1BAF  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7765  1BB0  3F43               	moviw [3]fsr1
  7766  1BB1  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7767  1BB2  3003               	movlw	3
  7768  1BB3  00B6               	movwf	??_setup^(0+128)
  7769  1BB4  0836               	movf	??_setup^(0+128),w
  7770  1BB5  00A9               	movwf	ftoa@width^(0+128)
  7771  1BB6  01AA               	clrf	ftoa@prec^(0+128)
  7772  1BB7  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7773  1BB8  319E  268B  319B   	fcall	_ftoa
  7774                           
  7775                           ;menu.c: 253:   OLED_print_xy(12 + 0, 1, str);
  7776  1BBB  0140               	movlb	0	; select bank0
  7777  1BBC  01A7               	clrf	OLED_print_xy@row
  7778  1BBD  0AA7               	incf	OLED_print_xy@row,f
  7779  1BBE  3059               	movlw	low _str
  7780  1BBF  00A8               	movwf	OLED_print_xy@s
  7781  1BC0  3001               	movlw	high _str
  7782  1BC1  00A9               	movwf	OLED_print_xy@s+1
  7783  1BC2  300C               	movlw	12
  7784  1BC3  31A0  20CE  319B   	fcall	_OLED_print_xy
  7785                           
  7786                           ;menu.c: 254:   OLED_print_xy(12 + 3, 1, "\001        ");
  7787  1BC6  0140               	movlb	0	; select bank0
  7788  1BC7  01A7               	clrf	OLED_print_xy@row
  7789  1BC8  0AA7               	incf	OLED_print_xy@row,f
  7790  1BC9  301D               	movlw	low (STR_50| (0+32768))
  7791  1BCA  00A8               	movwf	OLED_print_xy@s
  7792  1BCB  30B1               	movlw	high (STR_50| (0+32768))
  7793  1BCC  00A9               	movwf	OLED_print_xy@s+1
  7794  1BCD  300F               	movlw	15
  7795  1BCE  31A0  20CE  319B   	fcall	_OLED_print_xy
  7796                           
  7797                           ;menu.c: 255:   ftoa(str, data->fudgeFactor, 3, 1);
  7798  1BD1  0141               	movlb	1	; select bank1
  7799  1BD2  0834               	movf	setup@data^(0+128),w
  7800  1BD3  3E28               	addlw	40
  7801  1BD4  0086               	movwf	6
  7802  1BD5  3000               	movlw	0
  7803  1BD6  3D35               	addwfc	(setup@data+1)^(0+128),w
  7804  1BD7  0087               	movwf	7
  7805  1BD8  3F40               	moviw [0]fsr1
  7806  1BD9  00A5               	movwf	ftoa@fValue^(0+128)
  7807  1BDA  3F41               	moviw [1]fsr1
  7808  1BDB  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  7809  1BDC  3F42               	moviw [2]fsr1
  7810  1BDD  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  7811  1BDE  3F43               	moviw [3]fsr1
  7812  1BDF  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  7813  1BE0  3003               	movlw	3
  7814  1BE1  00B6               	movwf	??_setup^(0+128)
  7815  1BE2  0836               	movf	??_setup^(0+128),w
  7816  1BE3  00A9               	movwf	ftoa@width^(0+128)
  7817  1BE4  01AA               	clrf	ftoa@prec^(0+128)
  7818  1BE5  0AAA               	incf	ftoa@prec^(0+128),f
  7819  1BE6  3059               	movlw	(low (_str| (0+256)))& (0+255)
  7820  1BE7  319E  268B  319B   	fcall	_ftoa
  7821                           
  7822                           ;menu.c: 256:   OLED_print_xy(2 * 12 + 0, 1, str);
  7823  1BEA  0140               	movlb	0	; select bank0
  7824  1BEB  01A7               	clrf	OLED_print_xy@row
  7825  1BEC  0AA7               	incf	OLED_print_xy@row,f
  7826  1BED  3059               	movlw	low _str
  7827  1BEE  00A8               	movwf	OLED_print_xy@s
  7828  1BEF  3001               	movlw	high _str
  7829  1BF0  00A9               	movwf	OLED_print_xy@s+1
  7830  1BF1  3018               	movlw	24
  7831  1BF2  31A0  20CE  319B   	fcall	_OLED_print_xy
  7832                           
  7833                           ;menu.c: 257:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  7834  1BF5  0140               	movlb	0	; select bank0
  7835  1BF6  01A7               	clrf	OLED_print_xy@row
  7836  1BF7  0AA7               	incf	OLED_print_xy@row,f
  7837  1BF8  301F               	movlw	low ((STR_27+3)| (0+32768))
  7838  1BF9  00A8               	movwf	OLED_print_xy@s
  7839  1BFA  30B0               	movlw	high ((STR_27+3)| (0+32768))
  7840  1BFB  00A9               	movwf	OLED_print_xy@s+1
  7841  1BFC  301C               	movlw	28
  7842  1BFD  31A0  20CE  319B   	fcall	_OLED_print_xy
  7843  1C00                     l4754:	
  7844                           
  7845                           ;menu.c: 259:  page = paging(page, 3);
  7846  1C00  3003               	movlw	3
  7847  1C01  0141               	movlb	1	; select bank1
  7848  1C02  00B6               	movwf	??_setup^(0+128)
  7849  1C03  0836               	movf	??_setup^(0+128),w
  7850  1C04  0140               	movlb	0	; select bank0
  7851  1C05  00A7               	movwf	paging@lastPage
  7852  1C06  0141               	movlb	1	; select bank1
  7853  1C07  0864               	movf	setup@page^(0+128),w
  7854  1C08  31A4  24C1         	fcall	_paging
  7855  1C0A  0141               	movlb	1	; select bank1
  7856  1C0B  00B7               	movwf	(??_setup+1)^(0+128)
  7857  1C0C  0837               	movf	(??_setup+1)^(0+128),w
  7858  1C0D  00E4               	movwf	setup@page^(0+128)
  7859                           
  7860                           ;menu.c: 260:  return page;
  7861  1C0E  0864               	movf	setup@page^(0+128),w
  7862  1C0F  0008               	return
  7863  1C10                     __end_of_setup:	
  7864                           
  7865                           	psect	text8
  7866  2775                     __ptext8:	
  7867 ;; *************** function _setLensDia *****************
  7868 ;; Defined at:
  7869 ;;		line 225 in file "menu.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  data            2   20[BANK1 ] PTR struct .
  7872 ;;		 -> data(173), 
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;		None
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      unsigned char 
  7877 ;; Registers used:
  7878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7884 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7886 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7887 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7888 ;;Total ram usage:        7 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    8
  7891 ;; This function calls:
  7892 ;;		_OLED_print_xy
  7893 ;;		_ftoa
  7894 ;;		_returnToPage
  7895 ;;		_spinInput
  7896 ;; This function is called by:
  7897 ;;		_menu
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           
  7902                           ;psect for function _setLensDia
  7903  2775                     _setLensDia:	
  7904                           
  7905                           ;menu.c: 225: uint8_t setLensDia(t_globalData *data);menu.c: 226: {;menu.c: 227:  return
      +                          ToPage(0);
  7906                           
  7907                           ;incstack = 0
  7908                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7909  2775  3000               	movlw	0
  7910  2776  31A1  2100  31A7   	fcall	_returnToPage
  7911                           
  7912                           ;menu.c: 228:  if (g_updateScreen)
  7913  2779  0141               	movlb	1	; select bank1
  7914  277A  086F               	movf	_g_updateScreen^(0+128),w
  7915  277B  1903               	btfsc	3,2
  7916  277C  2F87               	goto	l4726
  7917                           
  7918                           ;menu.c: 229:   OLED_print_xy(0, 0, "Lens diam.  ");
  7919  277D  0140               	movlb	0	; select bank0
  7920  277E  01A7               	clrf	OLED_print_xy@row
  7921  277F  309E               	movlw	low (STR_33| (0+32768))
  7922  2780  00A8               	movwf	OLED_print_xy@s
  7923  2781  30B0               	movlw	high (STR_33| (0+32768))
  7924  2782  00A9               	movwf	OLED_print_xy@s+1
  7925  2783  3000               	movlw	0
  7926  2784  31A0  20CE  31A7   	fcall	_OLED_print_xy
  7927  2787                     l4726:	
  7928                           
  7929                           ;menu.c: 230:  spinInput(&data->chData[selectedChannel].lensDia, 1, 16, 0.5);
  7930  2787  0141               	movlb	1	; select bank1
  7931  2788  0868               	movf	_selectedChannel^(0+128),w
  7932  2789  00B6               	movwf	??_setLensDia^(0+128)
  7933  278A  01B7               	clrf	(??_setLensDia^(0+128)+1)
  7934  278B  3005               	movlw	5
  7935  278C                     u5565:	
  7936  278C  35B6               	lslf	??_setLensDia^(0+128),f
  7937  278D  0DB7               	rlf	(??_setLensDia^(0+128)+1),f
  7938  278E  0B89               	decfsz	9,f
  7939  278F  2F8C               	goto	u5565
  7940  2790  0836               	movf	??_setLensDia^(0+128),w
  7941  2791  0734               	addwf	setLensDia@data^(0+128),w
  7942  2792  00B8               	movwf	(??_setLensDia+2)^(0+128)
  7943  2793  0837               	movf	(??_setLensDia+1)^(0+128),w
  7944  2794  3D35               	addwfc	(setLensDia@data+1)^(0+128),w
  7945  2795  00B9               	movwf	(??_setLensDia+3)^(0+128)
  7946  2796  0838               	movf	(??_setLensDia+2)^(0+128),w
  7947  2797  3E43               	addlw	67
  7948  2798  00A4               	movwf	spinInput@input^(0+128)
  7949  2799  3000               	movlw	0
  7950  279A  3D39               	addwfc	(??_setLensDia+3)^(0+128),w
  7951  279B  00A5               	movwf	(spinInput@input+1)^(0+128)
  7952  279C  303F               	movlw	63
  7953  279D  00A9               	movwf	(spinInput@min+3)^(0+128)
  7954  279E  3080               	movlw	128
  7955  279F  00A8               	movwf	(spinInput@min+2)^(0+128)
  7956  27A0  3000               	movlw	0
  7957  27A1  00A7               	movwf	(spinInput@min+1)^(0+128)
  7958  27A2  3000               	movlw	0
  7959  27A3  00A6               	movwf	spinInput@min^(0+128)
  7960  27A4  3041               	movlw	65
  7961  27A5  00AD               	movwf	(spinInput@max+3)^(0+128)
  7962  27A6  3080               	movlw	128
  7963  27A7  00AC               	movwf	(spinInput@max+2)^(0+128)
  7964  27A8  3000               	movlw	0
  7965  27A9  00AB               	movwf	(spinInput@max+1)^(0+128)
  7966  27AA  3000               	movlw	0
  7967  27AB  00AA               	movwf	spinInput@max^(0+128)
  7968  27AC  303F               	movlw	63
  7969  27AD  00B1               	movwf	(spinInput@step+3)^(0+128)
  7970  27AE  3000               	movlw	0
  7971  27AF  00B0               	movwf	(spinInput@step+2)^(0+128)
  7972  27B0  3000               	movlw	0
  7973  27B1  00AF               	movwf	(spinInput@step+1)^(0+128)
  7974  27B2  3000               	movlw	0
  7975  27B3  00AE               	movwf	spinInput@step^(0+128)
  7976  27B4  319A  22A5  31A7   	fcall	_spinInput
  7977                           
  7978                           ;menu.c: 231:  ftoa(str, data->chData[selectedChannel].lensDia, 4, 1);
  7979  27B7  0141               	movlb	1	; select bank1
  7980  27B8  0868               	movf	_selectedChannel^(0+128),w
  7981  27B9  00B6               	movwf	??_setLensDia^(0+128)
  7982  27BA  01B7               	clrf	(??_setLensDia^(0+128)+1)
  7983  27BB  3005               	movlw	5
  7984  27BC                     u5575:	
  7985  27BC  35B6               	lslf	??_setLensDia^(0+128),f
  7986  27BD  0DB7               	rlf	(??_setLensDia^(0+128)+1),f
  7987  27BE  0B89               	decfsz	9,f
  7988  27BF  2FBC               	goto	u5575
  7989  27C0  0836               	movf	??_setLensDia^(0+128),w
  7990  27C1  0734               	addwf	setLensDia@data^(0+128),w
  7991  27C2  00B8               	movwf	(??_setLensDia+2)^(0+128)
  7992  27C3  0837               	movf	(??_setLensDia+1)^(0+128),w
  7993  27C4  3D35               	addwfc	(setLensDia@data+1)^(0+128),w
  7994  27C5  00B9               	movwf	(??_setLensDia+3)^(0+128)
  7995  27C6  0838               	movf	(??_setLensDia+2)^(0+128),w
  7996  27C7  3E43               	addlw	67
  7997  27C8  0086               	movwf	6
  7998  27C9  3000               	movlw	0
  7999  27CA  3D39               	addwfc	(??_setLensDia+3)^(0+128),w
  8000  27CB  0087               	movwf	7
  8001  27CC  3F40               	moviw [0]fsr1
  8002  27CD  00A5               	movwf	ftoa@fValue^(0+128)
  8003  27CE  3F41               	moviw [1]fsr1
  8004  27CF  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8005  27D0  3F42               	moviw [2]fsr1
  8006  27D1  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8007  27D2  3F43               	moviw [3]fsr1
  8008  27D3  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8009  27D4  3004               	movlw	4
  8010  27D5  00BA               	movwf	(??_setLensDia+4)^(0+128)
  8011  27D6  083A               	movf	(??_setLensDia+4)^(0+128),w
  8012  27D7  00A9               	movwf	ftoa@width^(0+128)
  8013  27D8  01AA               	clrf	ftoa@prec^(0+128)
  8014  27D9  0AAA               	incf	ftoa@prec^(0+128),f
  8015  27DA  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8016  27DB  319E  268B  31A7   	fcall	_ftoa
  8017                           
  8018                           ;menu.c: 232:  OLED_print_xy(0, 1, "\004");
  8019  27DE  0140               	movlb	0	; select bank0
  8020  27DF  01A7               	clrf	OLED_print_xy@row
  8021  27E0  0AA7               	incf	OLED_print_xy@row,f
  8022  27E1  3085               	movlw	low ((STR_53+5)| (0+32768))
  8023  27E2  00A8               	movwf	OLED_print_xy@s
  8024  27E3  30B1               	movlw	high ((STR_53+5)| (0+32768))
  8025  27E4  00A9               	movwf	OLED_print_xy@s+1
  8026  27E5  3000               	movlw	0
  8027  27E6  31A0  20CE  31A7   	fcall	_OLED_print_xy
  8028                           
  8029                           ;menu.c: 233:  OLED_print_xy(1, 1, str);
  8030  27E9  0140               	movlb	0	; select bank0
  8031  27EA  01A7               	clrf	OLED_print_xy@row
  8032  27EB  0AA7               	incf	OLED_print_xy@row,f
  8033  27EC  3059               	movlw	low _str
  8034  27ED  00A8               	movwf	OLED_print_xy@s
  8035  27EE  3001               	movlw	high _str
  8036  27EF  00A9               	movwf	OLED_print_xy@s+1
  8037  27F0  3001               	movlw	1
  8038  27F1  31A0  20CE  31A7   	fcall	_OLED_print_xy
  8039                           
  8040                           ;menu.c: 234:  OLED_print_xy(5, 1, " inch \003");
  8041  27F4  0140               	movlb	0	; select bank0
  8042  27F5  01A7               	clrf	OLED_print_xy@row
  8043  27F6  0AA7               	incf	OLED_print_xy@row,f
  8044  27F7  3042               	movlw	low (STR_46| (0+32768))
  8045  27F8  00A8               	movwf	OLED_print_xy@s
  8046  27F9  30B1               	movlw	high (STR_46| (0+32768))
  8047  27FA  00A9               	movwf	OLED_print_xy@s+1
  8048  27FB  3005               	movlw	5
  8049  27FC  31A0  20CE         	fcall	_OLED_print_xy
  8050                           
  8051                           ;menu.c: 235:  return 0;
  8052  27FE  3000               	movlw	0
  8053  27FF  0008               	return
  8054  2800                     __end_of_setLensDia:	
  8055                           
  8056                           	psect	text9
  8057  1D18                     __ptext9:	
  8058 ;; *************** function _setOutputPower *****************
  8059 ;; Defined at:
  8060 ;;		line 177 in file "menu.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  data            2   20[BANK1 ] PTR struct .
  8063 ;;		 -> data(173), 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  chData          2   26[BANK1 ] PTR struct .
  8066 ;;		 -> data.chData(128), data(173), 
  8067 ;; Return value:  Size  Location     Type
  8068 ;;                  1    wreg      unsigned char 
  8069 ;; Registers used:
  8070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8071 ;; Tracked objects:
  8072 ;;		On entry : 0/0
  8073 ;;		On exit  : 0/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8076 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8077 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8078 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8079 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8080 ;;Total ram usage:        8 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    8
  8083 ;; This function calls:
  8084 ;;		_OLED_print_xy
  8085 ;;		___fleq
  8086 ;;		___flge
  8087 ;;		_ftoa
  8088 ;;		_getPB
  8089 ;;		_itoa
  8090 ;;		_returnToPage
  8091 ;;		_spinInput
  8092 ;; This function is called by:
  8093 ;;		_menu
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           
  8098                           ;psect for function _setOutputPower
  8099  1D18                     _setOutputPower:	
  8100                           
  8101                           ;menu.c: 177: uint8_t setOutputPower(t_globalData *data);menu.c: 178: {;menu.c: 179:  t_
      +                          channelData *chData = &data->chData[selectedChannel];
  8102                           
  8103                           ;incstack = 0
  8104                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8105  1D18  0141               	movlb	1	; select bank1
  8106  1D19  0868               	movf	_selectedChannel^(0+128),w
  8107  1D1A  00B6               	movwf	??_setOutputPower^(0+128)
  8108  1D1B  01B7               	clrf	(??_setOutputPower^(0+128)+1)
  8109  1D1C  3005               	movlw	5
  8110  1D1D                     u6675:	
  8111  1D1D  35B6               	lslf	??_setOutputPower^(0+128),f
  8112  1D1E  0DB7               	rlf	(??_setOutputPower^(0+128)+1),f
  8113  1D1F  0B89               	decfsz	9,f
  8114  1D20  2D1D               	goto	u6675
  8115  1D21  0836               	movf	??_setOutputPower^(0+128),w
  8116  1D22  0734               	addwf	setOutputPower@data^(0+128),w
  8117  1D23  00B8               	movwf	(??_setOutputPower+2)^(0+128)
  8118  1D24  0837               	movf	(??_setOutputPower+1)^(0+128),w
  8119  1D25  3D35               	addwfc	(setOutputPower@data+1)^(0+128),w
  8120  1D26  00B9               	movwf	(??_setOutputPower+3)^(0+128)
  8121  1D27  0838               	movf	(??_setOutputPower+2)^(0+128),w
  8122  1D28  3E2D               	addlw	45
  8123  1D29  00BA               	movwf	setOutputPower@chData^(0+128)
  8124  1D2A  3000               	movlw	0
  8125  1D2B  3D39               	addwfc	(??_setOutputPower+3)^(0+128),w
  8126  1D2C  00BB               	movwf	(setOutputPower@chData+1)^(0+128)
  8127                           
  8128                           ;menu.c: 181:  returnToPage(0);
  8129  1D2D  3000               	movlw	0
  8130  1D2E  31A1  2100  319D   	fcall	_returnToPage
  8131                           
  8132                           ;menu.c: 183:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
  8133  1D31  0141               	movlb	1	; select bank1
  8134  1D32  083A               	movf	setOutputPower@chData^(0+128),w
  8135  1D33  0086               	movwf	6
  8136  1D34  083B               	movf	(setOutputPower@chData+1)^(0+128),w
  8137  1D35  0087               	movwf	7
  8138  1D36  315F               	addfsr 1,31
  8139  1D37  0301               	decf	1,w
  8140  1D38  1903               	btfsc	3,2
  8141  1D39  2D42               	goto	l5708
  8142  1D3A  083A               	movf	setOutputPower@chData^(0+128),w
  8143  1D3B  0086               	movwf	6
  8144  1D3C  083B               	movf	(setOutputPower@chData+1)^(0+128),w
  8145  1D3D  0087               	movwf	7
  8146  1D3E  315F               	addfsr 1,31
  8147  1D3F  0801               	movf	1,w
  8148  1D40  1D03               	btfss	3,2
  8149  1D41  2E4A               	goto	l5742
  8150  1D42                     l5708:	
  8151                           
  8152                           ;menu.c: 185:   if (g_updateScreen)
  8153  1D42  086F               	movf	_g_updateScreen^(0+128),w
  8154  1D43  1903               	btfsc	3,2
  8155  1D44  2D4F               	goto	l5712
  8156                           
  8157                           ;menu.c: 186:    OLED_print_xy(0, 0, "Output power");
  8158  1D45  0140               	movlb	0	; select bank0
  8159  1D46  01A7               	clrf	OLED_print_xy@row
  8160  1D47  30F9               	movlw	low (STR_21| (0+32768))
  8161  1D48  00A8               	movwf	OLED_print_xy@s
  8162  1D49  30B0               	movlw	high (STR_21| (0+32768))
  8163  1D4A  00A9               	movwf	OLED_print_xy@s+1
  8164  1D4B  3000               	movlw	0
  8165  1D4C  31A0  20CE  319D   	fcall	_OLED_print_xy
  8166  1D4F                     l5712:	
  8167                           
  8168                           ;menu.c: 187:   spinInput(&chData->Pset, -0.25, chData->Pmax, 0.25);
  8169  1D4F  0141               	movlb	1	; select bank1
  8170  1D50  083A               	movf	setOutputPower@chData^(0+128),w
  8171  1D51  3E10               	addlw	16
  8172  1D52  00A4               	movwf	spinInput@input^(0+128)
  8173  1D53  3000               	movlw	0
  8174  1D54  3D3B               	addwfc	(setOutputPower@chData+1)^(0+128),w
  8175  1D55  00A5               	movwf	(spinInput@input+1)^(0+128)
  8176  1D56  30BE               	movlw	190
  8177  1D57  00A9               	movwf	(spinInput@min+3)^(0+128)
  8178  1D58  3080               	movlw	128
  8179  1D59  00A8               	movwf	(spinInput@min+2)^(0+128)
  8180  1D5A  3000               	movlw	0
  8181  1D5B  00A7               	movwf	(spinInput@min+1)^(0+128)
  8182  1D5C  3000               	movlw	0
  8183  1D5D  00A6               	movwf	spinInput@min^(0+128)
  8184  1D5E  083A               	movf	setOutputPower@chData^(0+128),w
  8185  1D5F  0086               	movwf	6
  8186  1D60  083B               	movf	(setOutputPower@chData+1)^(0+128),w
  8187  1D61  0087               	movwf	7
  8188  1D62  3144               	addfsr 1,4
  8189  1D63  3F40               	moviw [0]fsr1
  8190  1D64  00AA               	movwf	spinInput@max^(0+128)
  8191  1D65  3F41               	moviw [1]fsr1
  8192  1D66  00AB               	movwf	(spinInput@max+1)^(0+128)
  8193  1D67  3F42               	moviw [2]fsr1
  8194  1D68  00AC               	movwf	(spinInput@max+2)^(0+128)
  8195  1D69  3F43               	moviw [3]fsr1
  8196  1D6A  00AD               	movwf	(spinInput@max+3)^(0+128)
  8197  1D6B  303E               	movlw	62
  8198  1D6C  00B1               	movwf	(spinInput@step+3)^(0+128)
  8199  1D6D  3080               	movlw	128
  8200  1D6E  00B0               	movwf	(spinInput@step+2)^(0+128)
  8201  1D6F  3000               	movlw	0
  8202  1D70  00AF               	movwf	(spinInput@step+1)^(0+128)
  8203  1D71  3000               	movlw	0
  8204  1D72  00AE               	movwf	spinInput@step^(0+128)
  8205  1D73  319A  22A5  319D   	fcall	_spinInput
  8206                           
  8207                           ;menu.c: 188:   if (chData->Pset == 0) {
  8208  1D76  0141               	movlb	1	; select bank1
  8209  1D77  083A               	movf	setOutputPower@chData^(0+128),w
  8210  1D78  0086               	movwf	6
  8211  1D79  083B               	movf	(setOutputPower@chData+1)^(0+128),w
  8212  1D7A  0087               	movwf	7
  8213  1D7B  3150               	addfsr 1,16
  8214  1D7C  3F40               	moviw [0]fsr1
  8215  1D7D  0140               	movlb	0	; select bank0
  8216  1D7E  00A0               	movwf	___fleq@ff1
  8217  1D7F  3F41               	moviw [1]fsr1
  8218  1D80  00A1               	movwf	___fleq@ff1+1
  8219  1D81  3F42               	moviw [2]fsr1
  8220  1D82  00A2               	movwf	___fleq@ff1+2
  8221  1D83  3F43               	moviw [3]fsr1
  8222  1D84  00A3               	movwf	___fleq@ff1+3
  8223  1D85  3000               	movlw	0
  8224  1D86  00A7               	movwf	___fleq@ff2+3
  8225  1D87  3000               	movlw	0
  8226  1D88  00A6               	movwf	___fleq@ff2+2
  8227  1D89  3000               	movlw	0
  8228  1D8A  00A5               	movwf	___fleq@ff2+1
  8229  1D8B  3000               	movlw	0
  8230  1D8C  00A4               	movwf	___fleq@ff2
  8231  1D8D  31A2  22FC  319D   	fcall	___fleq
  8232  1D90  1C03               	btfss	3,0
  8233  1D91  2DC3               	goto	l5724
  8234                           
  8235                           ;menu.c: 189:    itoa(str, selectedChannel + 1, 1);
  8236  1D92  3059               	movlw	low _str
  8237  1D93  0141               	movlb	1	; select bank1
  8238  1D94  00A5               	movwf	itoa@str^(0+128)
  8239  1D95  3001               	movlw	high _str
  8240  1D96  00A6               	movwf	(itoa@str+1)^(0+128)
  8241  1D97  0868               	movf	_selectedChannel^(0+128),w
  8242  1D98  3E01               	addlw	1
  8243  1D99  00B6               	movwf	??_setOutputPower^(0+128)
  8244  1D9A  0836               	movf	??_setOutputPower^(0+128),w
  8245  1D9B  00A7               	movwf	itoa@value^(0+128)
  8246  1D9C  01A8               	clrf	itoa@width^(0+128)
  8247  1D9D  0AA8               	incf	itoa@width^(0+128),f
  8248  1D9E  31A4  2458  319D   	fcall	_itoa
  8249                           
  8250                           ;menu.c: 190:    OLED_print_xy(0, 1, "\004Ch. ");
  8251  1DA1  0140               	movlb	0	; select bank0
  8252  1DA2  01A7               	clrf	OLED_print_xy@row
  8253  1DA3  0AA7               	incf	OLED_print_xy@row,f
  8254  1DA4  3095               	movlw	low (STR_36| (0+32768))
  8255  1DA5  00A8               	movwf	OLED_print_xy@s
  8256  1DA6  30B1               	movlw	high (STR_36| (0+32768))
  8257  1DA7  00A9               	movwf	OLED_print_xy@s+1
  8258  1DA8  3000               	movlw	0
  8259  1DA9  31A0  20CE  319D   	fcall	_OLED_print_xy
  8260                           
  8261                           ;menu.c: 191:    OLED_print_xy(5, 1, str);
  8262  1DAC  0140               	movlb	0	; select bank0
  8263  1DAD  01A7               	clrf	OLED_print_xy@row
  8264  1DAE  0AA7               	incf	OLED_print_xy@row,f
  8265  1DAF  3059               	movlw	low _str
  8266  1DB0  00A8               	movwf	OLED_print_xy@s
  8267  1DB1  3001               	movlw	high _str
  8268  1DB2  00A9               	movwf	OLED_print_xy@s+1
  8269  1DB3  3005               	movlw	5
  8270  1DB4  31A0  20CE  319D   	fcall	_OLED_print_xy
  8271                           
  8272                           ;menu.c: 192:    OLED_print_xy(6, 1, " off \003");
  8273  1DB7  0140               	movlb	0	; select bank0
  8274  1DB8  01A7               	clrf	OLED_print_xy@row
  8275  1DB9  0AA7               	incf	OLED_print_xy@row,f
  8276  1DBA  3072               	movlw	low (STR_37| (0+32768))
  8277  1DBB  00A8               	movwf	OLED_print_xy@s
  8278  1DBC  30B1               	movlw	high (STR_37| (0+32768))
  8279  1DBD  00A9               	movwf	OLED_print_xy@s+1
  8280  1DBE  3006               	movlw	6
  8281  1DBF  31A0  20CE  319D   	fcall	_OLED_print_xy
  8282                           
  8283                           ;menu.c: 193:   } else if (chData->Pset < 0) {
  8284  1DC2  2E87               	goto	l5754
  8285  1DC3                     l5724:	
  8286  1DC3  0141               	movlb	1	; select bank1
  8287  1DC4  083A               	movf	setOutputPower@chData^(0+128),w
  8288  1DC5  0086               	movwf	6
  8289  1DC6  083B               	movf	(setOutputPower@chData+1)^(0+128),w
  8290  1DC7  0087               	movwf	7
  8291  1DC8  3150               	addfsr 1,16
  8292  1DC9  3F40               	moviw [0]fsr1
  8293  1DCA  0140               	movlb	0	; select bank0
  8294  1DCB  00E8               	movwf	___flge@ff1
  8295  1DCC  3F41               	moviw [1]fsr1
  8296  1DCD  00E9               	movwf	___flge@ff1+1
  8297  1DCE  3F42               	moviw [2]fsr1
  8298  1DCF  00EA               	movwf	___flge@ff1+2
  8299  1DD0  3F43               	moviw [3]fsr1
  8300  1DD1  00EB               	movwf	___flge@ff1+3
  8301  1DD2  3000               	movlw	0
  8302  1DD3  00EF               	movwf	___flge@ff2+3
  8303  1DD4  3000               	movlw	0
  8304  1DD5  00EE               	movwf	___flge@ff2+2
  8305  1DD6  3000               	movlw	0
  8306  1DD7  00ED               	movwf	___flge@ff2+1
  8307  1DD8  3000               	movlw	0
  8308  1DD9  00EC               	movwf	___flge@ff2
  8309  1DDA  3199  21F7  319D   	fcall	___flge
  8310  1DDD  1803               	btfsc	3,0
  8311  1DDE  2E10               	goto	l5734
  8312                           
  8313                           ;menu.c: 194:    itoa(str, selectedChannel + 1, 1);
  8314  1DDF  3059               	movlw	low _str
  8315  1DE0  0141               	movlb	1	; select bank1
  8316  1DE1  00A5               	movwf	itoa@str^(0+128)
  8317  1DE2  3001               	movlw	high _str
  8318  1DE3  00A6               	movwf	(itoa@str+1)^(0+128)
  8319  1DE4  0868               	movf	_selectedChannel^(0+128),w
  8320  1DE5  3E01               	addlw	1
  8321  1DE6  00B6               	movwf	??_setOutputPower^(0+128)
  8322  1DE7  0836               	movf	??_setOutputPower^(0+128),w
  8323  1DE8  00A7               	movwf	itoa@value^(0+128)
  8324  1DE9  01A8               	clrf	itoa@width^(0+128)
  8325  1DEA  0AA8               	incf	itoa@width^(0+128),f
  8326  1DEB  31A4  2458  319D   	fcall	_itoa
  8327                           
  8328                           ;menu.c: 195:    OLED_print_xy(0, 1, "\004Ch. ");
  8329  1DEE  0140               	movlb	0	; select bank0
  8330  1DEF  01A7               	clrf	OLED_print_xy@row
  8331  1DF0  0AA7               	incf	OLED_print_xy@row,f
  8332  1DF1  3095               	movlw	low (STR_36| (0+32768))
  8333  1DF2  00A8               	movwf	OLED_print_xy@s
  8334  1DF3  30B1               	movlw	high (STR_36| (0+32768))
  8335  1DF4  00A9               	movwf	OLED_print_xy@s+1
  8336  1DF5  3000               	movlw	0
  8337  1DF6  31A0  20CE  319D   	fcall	_OLED_print_xy
  8338                           
  8339                           ;menu.c: 196:    OLED_print_xy(5, 1, str);
  8340  1DF9  0140               	movlb	0	; select bank0
  8341  1DFA  01A7               	clrf	OLED_print_xy@row
  8342  1DFB  0AA7               	incf	OLED_print_xy@row,f
  8343  1DFC  3059               	movlw	low _str
  8344  1DFD  00A8               	movwf	OLED_print_xy@s
  8345  1DFE  3001               	movlw	high _str
  8346  1DFF  00A9               	movwf	OLED_print_xy@s+1
  8347  1E00  3005               	movlw	5
  8348  1E01  31A0  20CE  319D   	fcall	_OLED_print_xy
  8349                           
  8350                           ;menu.c: 197:    OLED_print_xy(6, 1, " auto\003");
  8351  1E04  0140               	movlb	0	; select bank0
  8352  1E05  01A7               	clrf	OLED_print_xy@row
  8353  1E06  0AA7               	incf	OLED_print_xy@row,f
  8354  1E07  3079               	movlw	low (STR_39| (0+32768))
  8355  1E08  00A8               	movwf	OLED_print_xy@s
  8356  1E09  30B1               	movlw	high (STR_39| (0+32768))
  8357  1E0A  00A9               	movwf	OLED_print_xy@s+1
  8358  1E0B  3006               	movlw	6
  8359  1E0C  31A0  20CE  319D   	fcall	_OLED_print_xy
  8360                           
  8361                           ;menu.c: 198:   } else {
  8362  1E0F  2E87               	goto	l5754
  8363  1E10                     l5734:	
  8364                           
  8365                           ;menu.c: 199:    OLED_print_xy(0, 1, "\004");
  8366  1E10  0140               	movlb	0	; select bank0
  8367  1E11  01A7               	clrf	OLED_print_xy@row
  8368  1E12  0AA7               	incf	OLED_print_xy@row,f
  8369  1E13  3085               	movlw	low ((STR_53+5)| (0+32768))
  8370  1E14  00A8               	movwf	OLED_print_xy@s
  8371  1E15  30B1               	movlw	high ((STR_53+5)| (0+32768))
  8372  1E16  00A9               	movwf	OLED_print_xy@s+1
  8373  1E17  3000               	movlw	0
  8374  1E18  31A0  20CE  319D   	fcall	_OLED_print_xy
  8375                           
  8376                           ;menu.c: 200:    ftoa(str, chData->Pset, 4, 1);
  8377  1E1B  0141               	movlb	1	; select bank1
  8378  1E1C  083A               	movf	setOutputPower@chData^(0+128),w
  8379  1E1D  0086               	movwf	6
  8380  1E1E  083B               	movf	(setOutputPower@chData+1)^(0+128),w
  8381  1E1F  0087               	movwf	7
  8382  1E20  3150               	addfsr 1,16
  8383  1E21  3F40               	moviw [0]fsr1
  8384  1E22  00A5               	movwf	ftoa@fValue^(0+128)
  8385  1E23  3F41               	moviw [1]fsr1
  8386  1E24  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8387  1E25  3F42               	moviw [2]fsr1
  8388  1E26  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8389  1E27  3F43               	moviw [3]fsr1
  8390  1E28  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8391  1E29  3004               	movlw	4
  8392  1E2A  00B6               	movwf	??_setOutputPower^(0+128)
  8393  1E2B  0836               	movf	??_setOutputPower^(0+128),w
  8394  1E2C  00A9               	movwf	ftoa@width^(0+128)
  8395  1E2D  01AA               	clrf	ftoa@prec^(0+128)
  8396  1E2E  0AAA               	incf	ftoa@prec^(0+128),f
  8397  1E2F  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8398  1E30  319E  268B  319D   	fcall	_ftoa
  8399                           
  8400                           ;menu.c: 201:    OLED_print_xy(1, 1, str);
  8401  1E33  0140               	movlb	0	; select bank0
  8402  1E34  01A7               	clrf	OLED_print_xy@row
  8403  1E35  0AA7               	incf	OLED_print_xy@row,f
  8404  1E36  3059               	movlw	low _str
  8405  1E37  00A8               	movwf	OLED_print_xy@s
  8406  1E38  3001               	movlw	high _str
  8407  1E39  00A9               	movwf	OLED_print_xy@s+1
  8408  1E3A  3001               	movlw	1
  8409  1E3B  31A0  20CE  319D   	fcall	_OLED_print_xy
  8410                           
  8411                           ;menu.c: 202:    OLED_print_xy(5, 1, "W man.\003");
  8412  1E3E  0140               	movlb	0	; select bank0
  8413  1E3F  01A7               	clrf	OLED_print_xy@row
  8414  1E40  0AA7               	incf	OLED_print_xy@row,f
  8415  1E41  304A               	movlw	low (STR_41| (0+32768))
  8416  1E42  00A8               	movwf	OLED_print_xy@s
  8417  1E43  30B1               	movlw	high (STR_41| (0+32768))
  8418  1E44  00A9               	movwf	OLED_print_xy@s+1
  8419  1E45  3005               	movlw	5
  8420  1E46  31A0  20CE  319D   	fcall	_OLED_print_xy
  8421  1E49  2E87               	goto	l5754
  8422  1E4A                     l5742:	
  8423  1E4A  083A               	movf	setOutputPower@chData^(0+128),w
  8424  1E4B  0086               	movwf	6
  8425  1E4C  083B               	movf	(setOutputPower@chData+1)^(0+128),w
  8426  1E4D  0087               	movwf	7
  8427  1E4E  315F               	addfsr 1,31
  8428  1E4F  3004               	movlw	4
  8429  1E50  0601               	xorwf	1,w
  8430  1E51  1903               	btfsc	3,2
  8431  1E52  2E5C               	goto	l5746
  8432  1E53  083A               	movf	setOutputPower@chData^(0+128),w
  8433  1E54  0086               	movwf	6
  8434  1E55  083B               	movf	(setOutputPower@chData+1)^(0+128),w
  8435  1E56  0087               	movwf	7
  8436  1E57  315F               	addfsr 1,31
  8437  1E58  3003               	movlw	3
  8438  1E59  0601               	xorwf	1,w
  8439  1E5A  1D03               	btfss	3,2
  8440  1E5B  2E89               	goto	l5760
  8441  1E5C                     l5746:	
  8442                           
  8443                           ;menu.c: 207:   if (g_updateScreen) {
  8444  1E5C  086F               	movf	_g_updateScreen^(0+128),w
  8445  1E5D  1903               	btfsc	3,2
  8446  1E5E  2E74               	goto	l5750
  8447                           
  8448                           ;menu.c: 208:    OLED_print_xy(0, 0, "Hold button ");
  8449  1E5F  0140               	movlb	0	; select bank0
  8450  1E60  01A7               	clrf	OLED_print_xy@row
  8451  1E61  30AB               	movlw	low (STR_42| (0+32768))
  8452  1E62  00A8               	movwf	OLED_print_xy@s
  8453  1E63  30B0               	movlw	high (STR_42| (0+32768))
  8454  1E64  00A9               	movwf	OLED_print_xy@s+1
  8455  1E65  3000               	movlw	0
  8456  1E66  31A0  20CE  319D   	fcall	_OLED_print_xy
  8457                           
  8458                           ;menu.c: 209:    OLED_print_xy(0, 1, "to re-enable");
  8459  1E69  0140               	movlb	0	; select bank0
  8460  1E6A  01A7               	clrf	OLED_print_xy@row
  8461  1E6B  0AA7               	incf	OLED_print_xy@row,f
  8462  1E6C  30DF               	movlw	low (STR_43| (0+32768))
  8463  1E6D  00A8               	movwf	OLED_print_xy@s
  8464  1E6E  30B0               	movlw	high (STR_43| (0+32768))
  8465  1E6F  00A9               	movwf	OLED_print_xy@s+1
  8466  1E70  3000               	movlw	0
  8467  1E71  31A0  20CE  319D   	fcall	_OLED_print_xy
  8468  1E74                     l5750:	
  8469                           
  8470                           ;menu.c: 211:   if (getPB() == PB_LONG)
  8471  1E74  31AF  2757  319D   	fcall	_getPB
  8472  1E77  3A02               	xorlw	2
  8473  1E78  1D03               	skipz
  8474  1E79  2E87               	goto	l5754
  8475                           
  8476                           ;menu.c: 212:    chData->status = CH_UNCHECKED;
  8477  1E7A  0141               	movlb	1	; select bank1
  8478  1E7B  083A               	movf	setOutputPower@chData^(0+128),w
  8479  1E7C  3E1F               	addlw	31
  8480  1E7D  00B6               	movwf	??_setOutputPower^(0+128)
  8481  1E7E  3000               	movlw	0
  8482  1E7F  3D3B               	addwfc	(setOutputPower@chData+1)^(0+128),w
  8483  1E80  00B7               	movwf	(??_setOutputPower+1)^(0+128)
  8484  1E81  0836               	movf	??_setOutputPower^(0+128),w
  8485  1E82  0086               	movwf	6
  8486  1E83  0837               	movf	(??_setOutputPower+1)^(0+128),w
  8487  1E84  0087               	movwf	7
  8488  1E85  3005               	movlw	5
  8489  1E86  0081               	movwf	1
  8490  1E87                     l5754:	
  8491                           
  8492                           ;menu.c: 213:   return 0;
  8493  1E87  3000               	movlw	0
  8494  1E88  0008               	return
  8495  1E89                     l5760:	
  8496                           
  8497                           ;menu.c: 217:   return 1;
  8498  1E89  3001               	movlw	1
  8499  1E8A  0008               	return
  8500  1E8B                     __end_of_setOutputPower:	
  8501                           
  8502                           	psect	text10
  8503  166B                     __ptext10:	
  8504 ;; *************** function _channelSetup *****************
  8505 ;; Defined at:
  8506 ;;		line 122 in file "menu.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;  data            2   20[BANK1 ] PTR struct .
  8509 ;;		 -> data(173), 
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;  chData          2   26[BANK1 ] PTR struct .
  8512 ;;		 -> data.chData(128), data(173), 
  8513 ;; Return value:  Size  Location     Type
  8514 ;;                  1    wreg      unsigned char 
  8515 ;; Registers used:
  8516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8517 ;; Tracked objects:
  8518 ;;		On entry : 0/0
  8519 ;;		On exit  : 0/0
  8520 ;;		Unchanged: 0/0
  8521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8522 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8523 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8524 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8525 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8526 ;;Total ram usage:        8 bytes
  8527 ;; Hardware stack levels used:    1
  8528 ;; Hardware stack levels required when called:    9
  8529 ;; This function calls:
  8530 ;;		_OLED_print_xy
  8531 ;;		___fleq
  8532 ;;		___flge
  8533 ;;		_ftoa
  8534 ;;		_itoa
  8535 ;;		_paging
  8536 ;;		_returnToPage
  8537 ;; This function is called by:
  8538 ;;		_menu
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           
  8543                           ;psect for function _channelSetup
  8544  166B                     _channelSetup:	
  8545                           
  8546                           ;menu.c: 122: uint8_t channelSetup(t_globalData *data);menu.c: 123: {;menu.c: 124:  stat
      +                          ic uint8_t page = 0;;menu.c: 125:  t_channelData *chData = &data->chData[selectedChannel
      +                          ];
  8547                           
  8548                           ;incstack = 0
  8549                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8550  166B  0141               	movlb	1	; select bank1
  8551  166C  0868               	movf	_selectedChannel^(0+128),w
  8552  166D  00B6               	movwf	??_channelSetup^(0+128)
  8553  166E  01B7               	clrf	(??_channelSetup^(0+128)+1)
  8554  166F  3005               	movlw	5
  8555  1670                     u6585:	
  8556  1670  35B6               	lslf	??_channelSetup^(0+128),f
  8557  1671  0DB7               	rlf	(??_channelSetup^(0+128)+1),f
  8558  1672  0B89               	decfsz	9,f
  8559  1673  2E70               	goto	u6585
  8560  1674  0836               	movf	??_channelSetup^(0+128),w
  8561  1675  0734               	addwf	channelSetup@data^(0+128),w
  8562  1676  00B8               	movwf	(??_channelSetup+2)^(0+128)
  8563  1677  0837               	movf	(??_channelSetup+1)^(0+128),w
  8564  1678  3D35               	addwfc	(channelSetup@data+1)^(0+128),w
  8565  1679  00B9               	movwf	(??_channelSetup+3)^(0+128)
  8566  167A  0838               	movf	(??_channelSetup+2)^(0+128),w
  8567  167B  3E2D               	addlw	45
  8568  167C  00BA               	movwf	channelSetup@chData^(0+128)
  8569  167D  3000               	movlw	0
  8570  167E  3D39               	addwfc	(??_channelSetup+3)^(0+128),w
  8571  167F  00BB               	movwf	(channelSetup@chData+1)^(0+128)
  8572                           
  8573                           ;menu.c: 127:  returnToPage(page);
  8574  1680  0865               	movf	channelSetup@page^(0+128),w
  8575  1681  31A1  2100  3196   	fcall	_returnToPage
  8576                           
  8577                           ;menu.c: 129:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
  8578  1684  0141               	movlb	1	; select bank1
  8579  1685  083A               	movf	channelSetup@chData^(0+128),w
  8580  1686  0086               	movwf	6
  8581  1687  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8582  1688  0087               	movwf	7
  8583  1689  315F               	addfsr 1,31
  8584  168A  0301               	decf	1,w
  8585  168B  1903               	btfsc	3,2
  8586  168C  2E95               	goto	l5646
  8587  168D  083A               	movf	channelSetup@chData^(0+128),w
  8588  168E  0086               	movwf	6
  8589  168F  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8590  1690  0087               	movwf	7
  8591  1691  315F               	addfsr 1,31
  8592  1692  0801               	movf	1,w
  8593  1693  1D03               	btfss	3,2
  8594  1694  2F5D               	goto	l5674
  8595  1695                     l5646:	
  8596                           
  8597                           ;menu.c: 130:   OLED_print_xy(0, 0, "Output power");
  8598  1695  0140               	movlb	0	; select bank0
  8599  1696  01A7               	clrf	OLED_print_xy@row
  8600  1697  30F9               	movlw	low (STR_21| (0+32768))
  8601  1698  00A8               	movwf	OLED_print_xy@s
  8602  1699  30B0               	movlw	high (STR_21| (0+32768))
  8603  169A  00A9               	movwf	OLED_print_xy@s+1
  8604  169B  3000               	movlw	0
  8605  169C  31A0  20CE  3196   	fcall	_OLED_print_xy
  8606                           
  8607                           ;menu.c: 131:   if (chData->Pset == 0) {
  8608  169F  0141               	movlb	1	; select bank1
  8609  16A0  083A               	movf	channelSetup@chData^(0+128),w
  8610  16A1  0086               	movwf	6
  8611  16A2  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8612  16A3  0087               	movwf	7
  8613  16A4  3150               	addfsr 1,16
  8614  16A5  3F40               	moviw [0]fsr1
  8615  16A6  0140               	movlb	0	; select bank0
  8616  16A7  00A0               	movwf	___fleq@ff1
  8617  16A8  3F41               	moviw [1]fsr1
  8618  16A9  00A1               	movwf	___fleq@ff1+1
  8619  16AA  3F42               	moviw [2]fsr1
  8620  16AB  00A2               	movwf	___fleq@ff1+2
  8621  16AC  3F43               	moviw [3]fsr1
  8622  16AD  00A3               	movwf	___fleq@ff1+3
  8623  16AE  3000               	movlw	0
  8624  16AF  00A7               	movwf	___fleq@ff2+3
  8625  16B0  3000               	movlw	0
  8626  16B1  00A6               	movwf	___fleq@ff2+2
  8627  16B2  3000               	movlw	0
  8628  16B3  00A5               	movwf	___fleq@ff2+1
  8629  16B4  3000               	movlw	0
  8630  16B5  00A4               	movwf	___fleq@ff2
  8631  16B6  31A2  22FC  3196   	fcall	___fleq
  8632  16B9  1C03               	btfss	3,0
  8633  16BA  2EE7               	goto	l5658
  8634                           
  8635                           ;menu.c: 132:    OLED_print_xy(0, 1, "Ch. ");
  8636  16BB  0140               	movlb	0	; select bank0
  8637  16BC  01A7               	clrf	OLED_print_xy@row
  8638  16BD  0AA7               	incf	OLED_print_xy@row,f
  8639  16BE  3096               	movlw	low ((STR_36+1)| (0+32768))
  8640  16BF  00A8               	movwf	OLED_print_xy@s
  8641  16C0  30B1               	movlw	high ((STR_36+1)| (0+32768))
  8642  16C1  00A9               	movwf	OLED_print_xy@s+1
  8643  16C2  3000               	movlw	0
  8644  16C3  31A0  20CE  3196   	fcall	_OLED_print_xy
  8645                           
  8646                           ;menu.c: 133:    itoa(str, selectedChannel + 1, 1);
  8647  16C6  3059               	movlw	low _str
  8648  16C7  0141               	movlb	1	; select bank1
  8649  16C8  00A5               	movwf	itoa@str^(0+128)
  8650  16C9  3001               	movlw	high _str
  8651  16CA  00A6               	movwf	(itoa@str+1)^(0+128)
  8652  16CB  0868               	movf	_selectedChannel^(0+128),w
  8653  16CC  3E01               	addlw	1
  8654  16CD  00B6               	movwf	??_channelSetup^(0+128)
  8655  16CE  0836               	movf	??_channelSetup^(0+128),w
  8656  16CF  00A7               	movwf	itoa@value^(0+128)
  8657  16D0  01A8               	clrf	itoa@width^(0+128)
  8658  16D1  0AA8               	incf	itoa@width^(0+128),f
  8659  16D2  31A4  2458  3196   	fcall	_itoa
  8660                           
  8661                           ;menu.c: 134:    OLED_print_xy(4, 1, str);
  8662  16D5  0140               	movlb	0	; select bank0
  8663  16D6  01A7               	clrf	OLED_print_xy@row
  8664  16D7  0AA7               	incf	OLED_print_xy@row,f
  8665  16D8  3059               	movlw	low _str
  8666  16D9  00A8               	movwf	OLED_print_xy@s
  8667  16DA  3001               	movlw	high _str
  8668  16DB  00A9               	movwf	OLED_print_xy@s+1
  8669  16DC  3004               	movlw	4
  8670  16DD  31A0  20CE  3196   	fcall	_OLED_print_xy
  8671                           
  8672                           ;menu.c: 135:    OLED_print_xy(5, 1, " off   ");
  8673  16E0  0140               	movlb	0	; select bank0
  8674  16E1  01A7               	clrf	OLED_print_xy@row
  8675  16E2  0AA7               	incf	OLED_print_xy@row,f
  8676  16E3  305A               	movlw	low (STR_23| (0+32768))
  8677  16E4  00A8               	movwf	OLED_print_xy@s
  8678  16E5  30B1               	movlw	high (STR_23| (0+32768))
  8679  16E6  2F2E               	goto	L3
  8680  16E7                     l5658:	
  8681                           ;menu.c: 136:   } else if (chData->Pset < 0) {
  8682                           
  8683  16E7  0141               	movlb	1	; select bank1
  8684  16E8  083A               	movf	channelSetup@chData^(0+128),w
  8685  16E9  0086               	movwf	6
  8686  16EA  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8687  16EB  0087               	movwf	7
  8688  16EC  3150               	addfsr 1,16
  8689  16ED  3F40               	moviw [0]fsr1
  8690  16EE  0140               	movlb	0	; select bank0
  8691  16EF  00E8               	movwf	___flge@ff1
  8692  16F0  3F41               	moviw [1]fsr1
  8693  16F1  00E9               	movwf	___flge@ff1+1
  8694  16F2  3F42               	moviw [2]fsr1
  8695  16F3  00EA               	movwf	___flge@ff1+2
  8696  16F4  3F43               	moviw [3]fsr1
  8697  16F5  00EB               	movwf	___flge@ff1+3
  8698  16F6  3000               	movlw	0
  8699  16F7  00EF               	movwf	___flge@ff2+3
  8700  16F8  3000               	movlw	0
  8701  16F9  00EE               	movwf	___flge@ff2+2
  8702  16FA  3000               	movlw	0
  8703  16FB  00ED               	movwf	___flge@ff2+1
  8704  16FC  3000               	movlw	0
  8705  16FD  00EC               	movwf	___flge@ff2
  8706  16FE  3199  21F7  3196   	fcall	___flge
  8707  1701  1803               	btfsc	3,0
  8708  1702  2F31               	goto	l5668
  8709                           
  8710                           ;menu.c: 137:    OLED_print_xy(0, 1, "Ch. ");
  8711  1703  0140               	movlb	0	; select bank0
  8712  1704  01A7               	clrf	OLED_print_xy@row
  8713  1705  0AA7               	incf	OLED_print_xy@row,f
  8714  1706  3096               	movlw	low ((STR_36+1)| (0+32768))
  8715  1707  00A8               	movwf	OLED_print_xy@s
  8716  1708  30B1               	movlw	high ((STR_36+1)| (0+32768))
  8717  1709  00A9               	movwf	OLED_print_xy@s+1
  8718  170A  3000               	movlw	0
  8719  170B  31A0  20CE  3196   	fcall	_OLED_print_xy
  8720                           
  8721                           ;menu.c: 138:    itoa(str, selectedChannel + 1, 1);
  8722  170E  3059               	movlw	low _str
  8723  170F  0141               	movlb	1	; select bank1
  8724  1710  00A5               	movwf	itoa@str^(0+128)
  8725  1711  3001               	movlw	high _str
  8726  1712  00A6               	movwf	(itoa@str+1)^(0+128)
  8727  1713  0868               	movf	_selectedChannel^(0+128),w
  8728  1714  3E01               	addlw	1
  8729  1715  00B6               	movwf	??_channelSetup^(0+128)
  8730  1716  0836               	movf	??_channelSetup^(0+128),w
  8731  1717  00A7               	movwf	itoa@value^(0+128)
  8732  1718  01A8               	clrf	itoa@width^(0+128)
  8733  1719  0AA8               	incf	itoa@width^(0+128),f
  8734  171A  31A4  2458  3196   	fcall	_itoa
  8735                           
  8736                           ;menu.c: 139:    OLED_print_xy(4, 1, str);
  8737  171D  0140               	movlb	0	; select bank0
  8738  171E  01A7               	clrf	OLED_print_xy@row
  8739  171F  0AA7               	incf	OLED_print_xy@row,f
  8740  1720  3059               	movlw	low _str
  8741  1721  00A8               	movwf	OLED_print_xy@s
  8742  1722  3001               	movlw	high _str
  8743  1723  00A9               	movwf	OLED_print_xy@s+1
  8744  1724  3004               	movlw	4
  8745  1725  31A0  20CE  3196   	fcall	_OLED_print_xy
  8746                           
  8747                           ;menu.c: 140:    OLED_print_xy(5, 1, " auto  ");
  8748  1728  0140               	movlb	0	; select bank0
  8749  1729  01A7               	clrf	OLED_print_xy@row
  8750  172A  0AA7               	incf	OLED_print_xy@row,f
  8751  172B  306A               	movlw	low (STR_25| (0+32768))
  8752  172C  00A8               	movwf	OLED_print_xy@s
  8753  172D  30B1               	movlw	high (STR_25| (0+32768))
  8754  172E                     L3:	
  8755  172E  00A9               	movwf	OLED_print_xy@s+1
  8756  172F  3005               	movlw	5
  8757  1730  2FB5               	goto	L2
  8758  1731                     l5668:	
  8759                           ;menu.c: 141:   } else {
  8760                           
  8761                           
  8762                           ;menu.c: 142:    ftoa(str, chData->Pset, 4, 1);
  8763  1731  0141               	movlb	1	; select bank1
  8764  1732  083A               	movf	channelSetup@chData^(0+128),w
  8765  1733  0086               	movwf	6
  8766  1734  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8767  1735  0087               	movwf	7
  8768  1736  3150               	addfsr 1,16
  8769  1737  3F40               	moviw [0]fsr1
  8770  1738  00A5               	movwf	ftoa@fValue^(0+128)
  8771  1739  3F41               	moviw [1]fsr1
  8772  173A  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8773  173B  3F42               	moviw [2]fsr1
  8774  173C  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8775  173D  3F43               	moviw [3]fsr1
  8776  173E  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8777  173F  3004               	movlw	4
  8778  1740  00B6               	movwf	??_channelSetup^(0+128)
  8779  1741  0836               	movf	??_channelSetup^(0+128),w
  8780  1742  00A9               	movwf	ftoa@width^(0+128)
  8781  1743  01AA               	clrf	ftoa@prec^(0+128)
  8782  1744  0AAA               	incf	ftoa@prec^(0+128),f
  8783  1745  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8784  1746  319E  268B  3196   	fcall	_ftoa
  8785                           
  8786                           ;menu.c: 143:    OLED_print_xy(0, 1, str);
  8787  1749  0140               	movlb	0	; select bank0
  8788  174A  01A7               	clrf	OLED_print_xy@row
  8789  174B  0AA7               	incf	OLED_print_xy@row,f
  8790  174C  3059               	movlw	low _str
  8791  174D  00A8               	movwf	OLED_print_xy@s
  8792  174E  3001               	movlw	high _str
  8793  174F  00A9               	movwf	OLED_print_xy@s+1
  8794  1750  3000               	movlw	0
  8795  1751  31A0  20CE  3196   	fcall	_OLED_print_xy
  8796                           
  8797                           ;menu.c: 144:    OLED_print_xy(4, 1, "W manual");
  8798  1754  0140               	movlb	0	; select bank0
  8799  1755  01A7               	clrf	OLED_print_xy@row
  8800  1756  0AA7               	incf	OLED_print_xy@row,f
  8801  1757  3039               	movlw	low (STR_26| (0+32768))
  8802  1758  00A8               	movwf	OLED_print_xy@s
  8803  1759  30B1               	movlw	high (STR_26| (0+32768))
  8804  175A  00A9               	movwf	OLED_print_xy@s+1
  8805  175B  3004               	movlw	4
  8806  175C  2FB5               	goto	L2
  8807  175D                     l5674:	
  8808  175D  083A               	movf	channelSetup@chData^(0+128),w
  8809  175E  0086               	movwf	6
  8810  175F  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8811  1760  0087               	movwf	7
  8812  1761  315F               	addfsr 1,31
  8813  1762  3002               	movlw	2
  8814  1763  0601               	xorwf	1,w
  8815  1764  1D03               	btfss	3,2
  8816  1765  2F77               	goto	l5678
  8817                           
  8818                           ;menu.c: 149:   OLED_print_xy(0, 0, "Not         ");
  8819  1766  0140               	movlb	0	; select bank0
  8820  1767  01A7               	clrf	OLED_print_xy@row
  8821  1768  301C               	movlw	low (STR_27| (0+32768))
  8822  1769  00A8               	movwf	OLED_print_xy@s
  8823  176A  30B0               	movlw	high (STR_27| (0+32768))
  8824  176B  00A9               	movwf	OLED_print_xy@s+1
  8825  176C  3000               	movlw	0
  8826  176D  31A0  20CE  3196   	fcall	_OLED_print_xy
  8827                           
  8828                           ;menu.c: 150:   OLED_print_xy(0, 1, "connected   ");
  8829  1770  0140               	movlb	0	; select bank0
  8830  1771  01A7               	clrf	OLED_print_xy@row
  8831  1772  0AA7               	incf	OLED_print_xy@row,f
  8832  1773  3084               	movlw	low (STR_28| (0+32768))
  8833  1774  00A8               	movwf	OLED_print_xy@s
  8834  1775  30B0               	movlw	high (STR_28| (0+32768))
  8835  1776  2FB3               	goto	L4
  8836  1777                     l5678:	
  8837                           ;menu.c: 152:  } else if (chData->status == CH_UNCHECKED) {
  8838                           
  8839  1777  083A               	movf	channelSetup@chData^(0+128),w
  8840  1778  0086               	movwf	6
  8841  1779  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8842  177A  0087               	movwf	7
  8843  177B  315F               	addfsr 1,31
  8844  177C  3005               	movlw	5
  8845  177D  0601               	xorwf	1,w
  8846  177E  1D03               	btfss	3,2
  8847  177F  2F91               	goto	l5682
  8848                           
  8849                           ;menu.c: 154:   OLED_print_xy(0, 0, "Testing     ");
  8850  1780  0140               	movlb	0	; select bank0
  8851  1781  01A7               	clrf	OLED_print_xy@row
  8852  1782  3036               	movlw	low (STR_29| (0+32768))
  8853  1783  00A8               	movwf	OLED_print_xy@s
  8854  1784  30B0               	movlw	high (STR_29| (0+32768))
  8855  1785  00A9               	movwf	OLED_print_xy@s+1
  8856  1786  3000               	movlw	0
  8857  1787  31A0  20CE  3196   	fcall	_OLED_print_xy
  8858                           
  8859                           ;menu.c: 155:   OLED_print_xy(0, 1, "heater...   ");
  8860  178A  0140               	movlb	0	; select bank0
  8861  178B  01A7               	clrf	OLED_print_xy@row
  8862  178C  0AA7               	incf	OLED_print_xy@row,f
  8863  178D  306A               	movlw	low (STR_30| (0+32768))
  8864  178E  00A8               	movwf	OLED_print_xy@s
  8865  178F  30B0               	movlw	high (STR_30| (0+32768))
  8866  1790  2FB3               	goto	L4
  8867  1791                     l5682:	
  8868                           ;menu.c: 157:  } else if ((chData->status == CH_OVERCURRENT) || (chData->status == CH_SH
      +                          ORTED)) {
  8869                           
  8870  1791  083A               	movf	channelSetup@chData^(0+128),w
  8871  1792  0086               	movwf	6
  8872  1793  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8873  1794  0087               	movwf	7
  8874  1795  315F               	addfsr 1,31
  8875  1796  3004               	movlw	4
  8876  1797  0601               	xorwf	1,w
  8877  1798  1903               	btfsc	3,2
  8878  1799  2FA3               	goto	l5686
  8879  179A  083A               	movf	channelSetup@chData^(0+128),w
  8880  179B  0086               	movwf	6
  8881  179C  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8882  179D  0087               	movwf	7
  8883  179E  315F               	addfsr 1,31
  8884  179F  3003               	movlw	3
  8885  17A0  0601               	xorwf	1,w
  8886  17A1  1D03               	btfss	3,2
  8887  17A2  2FB8               	goto	l459
  8888  17A3                     l5686:	
  8889                           
  8890                           ;menu.c: 159:   OLED_print_xy(0, 0, "Reset       ");
  8891  17A3  0140               	movlb	0	; select bank0
  8892  17A4  01A7               	clrf	OLED_print_xy@row
  8893  17A5  3029               	movlw	low (STR_31| (0+32768))
  8894  17A6  00A8               	movwf	OLED_print_xy@s
  8895  17A7  30B0               	movlw	high (STR_31| (0+32768))
  8896  17A8  00A9               	movwf	OLED_print_xy@s+1
  8897  17A9  3000               	movlw	0
  8898  17AA  31A0  20CE  3196   	fcall	_OLED_print_xy
  8899                           
  8900                           ;menu.c: 160:   OLED_print_xy(0, 1, "channel     ");
  8901  17AD  0140               	movlb	0	; select bank0
  8902  17AE  01A7               	clrf	OLED_print_xy@row
  8903  17AF  0AA7               	incf	OLED_print_xy@row,f
  8904  17B0  3043               	movlw	low (STR_32| (0+32768))
  8905  17B1  00A8               	movwf	OLED_print_xy@s
  8906  17B2  30B0               	movlw	high (STR_32| (0+32768))
  8907  17B3                     L4:	
  8908  17B3  00A9               	movwf	OLED_print_xy@s+1
  8909  17B4  3000               	movlw	0
  8910  17B5                     L2:	
  8911  17B5  31A0  20CE  3196   	fcall	_OLED_print_xy
  8912  17B8                     l459:	
  8913                           
  8914                           ;menu.c: 164:  OLED_print_xy(12, 0, "Lens diam.  ");
  8915  17B8  0140               	movlb	0	; select bank0
  8916  17B9  01A7               	clrf	OLED_print_xy@row
  8917  17BA  309E               	movlw	low (STR_33| (0+32768))
  8918  17BB  00A8               	movwf	OLED_print_xy@s
  8919  17BC  30B0               	movlw	high (STR_33| (0+32768))
  8920  17BD  00A9               	movwf	OLED_print_xy@s+1
  8921  17BE  300C               	movlw	12
  8922  17BF  31A0  20CE  3196   	fcall	_OLED_print_xy
  8923                           
  8924                           ;menu.c: 165:  ftoa(str, chData->lensDia, 4, 1);
  8925  17C2  0141               	movlb	1	; select bank1
  8926  17C3  083A               	movf	channelSetup@chData^(0+128),w
  8927  17C4  0086               	movwf	6
  8928  17C5  083B               	movf	(channelSetup@chData+1)^(0+128),w
  8929  17C6  0087               	movwf	7
  8930  17C7  3156               	addfsr 1,22
  8931  17C8  3F40               	moviw [0]fsr1
  8932  17C9  00A5               	movwf	ftoa@fValue^(0+128)
  8933  17CA  3F41               	moviw [1]fsr1
  8934  17CB  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  8935  17CC  3F42               	moviw [2]fsr1
  8936  17CD  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  8937  17CE  3F43               	moviw [3]fsr1
  8938  17CF  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  8939  17D0  3004               	movlw	4
  8940  17D1  00B6               	movwf	??_channelSetup^(0+128)
  8941  17D2  0836               	movf	??_channelSetup^(0+128),w
  8942  17D3  00A9               	movwf	ftoa@width^(0+128)
  8943  17D4  01AA               	clrf	ftoa@prec^(0+128)
  8944  17D5  0AAA               	incf	ftoa@prec^(0+128),f
  8945  17D6  3059               	movlw	(low (_str| (0+256)))& (0+255)
  8946  17D7  319E  268B  3196   	fcall	_ftoa
  8947                           
  8948                           ;menu.c: 166:  OLED_print_xy(12 + 0, 1, str);
  8949  17DA  0140               	movlb	0	; select bank0
  8950  17DB  01A7               	clrf	OLED_print_xy@row
  8951  17DC  0AA7               	incf	OLED_print_xy@row,f
  8952  17DD  3059               	movlw	low _str
  8953  17DE  00A8               	movwf	OLED_print_xy@s
  8954  17DF  3001               	movlw	high _str
  8955  17E0  00A9               	movwf	OLED_print_xy@s+1
  8956  17E1  300C               	movlw	12
  8957  17E2  31A0  20CE  3196   	fcall	_OLED_print_xy
  8958                           
  8959                           ;menu.c: 167:  OLED_print_xy(12 + 5, 1, " inch  ");
  8960  17E5  0140               	movlb	0	; select bank0
  8961  17E6  01A7               	clrf	OLED_print_xy@row
  8962  17E7  0AA7               	incf	OLED_print_xy@row,f
  8963  17E8  3062               	movlw	low (STR_34| (0+32768))
  8964  17E9  00A8               	movwf	OLED_print_xy@s
  8965  17EA  30B1               	movlw	high (STR_34| (0+32768))
  8966  17EB  00A9               	movwf	OLED_print_xy@s+1
  8967  17EC  3011               	movlw	17
  8968  17ED  31A0  20CE  3196   	fcall	_OLED_print_xy
  8969                           
  8970                           ;menu.c: 169:  page = paging(page, 2);
  8971  17F0  3002               	movlw	2
  8972  17F1  0141               	movlb	1	; select bank1
  8973  17F2  00B6               	movwf	??_channelSetup^(0+128)
  8974  17F3  0836               	movf	??_channelSetup^(0+128),w
  8975  17F4  0140               	movlb	0	; select bank0
  8976  17F5  00A7               	movwf	paging@lastPage
  8977  17F6  0141               	movlb	1	; select bank1
  8978  17F7  0865               	movf	channelSetup@page^(0+128),w
  8979  17F8  31A4  24C1         	fcall	_paging
  8980  17FA  0141               	movlb	1	; select bank1
  8981  17FB  00B7               	movwf	(??_channelSetup+1)^(0+128)
  8982  17FC  0837               	movf	(??_channelSetup+1)^(0+128),w
  8983  17FD  00E5               	movwf	channelSetup@page^(0+128)
  8984                           
  8985                           ;menu.c: 171:  return page;
  8986  17FE  0865               	movf	channelSetup@page^(0+128),w
  8987  17FF  0008               	return
  8988  1800                     __end_of_channelSetup:	
  8989                           
  8990                           	psect	text11
  8991  0BB8                     __ptext11:	
  8992 ;; *************** function _channelView *****************
  8993 ;; Defined at:
  8994 ;;		line 67 in file "menu.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  data            2   20[BANK1 ] PTR struct .
  8997 ;;		 -> data(173), 
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;  n               1   30[BANK1 ] unsigned char 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      unsigned char 
  9002 ;; Registers used:
  9003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9009 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9010 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9011 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9012 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9013 ;;Total ram usage:       11 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    9
  9016 ;; This function calls:
  9017 ;;		_OLED_print_xy
  9018 ;;		___bmul
  9019 ;;		___fltol
  9020 ;;		_ftoa
  9021 ;;		_itoa
  9022 ;;		_paging
  9023 ;;		_returnToPage
  9024 ;; This function is called by:
  9025 ;;		_menu
  9026 ;; This function uses a non-reentrant model
  9027 ;;
  9028                           
  9029                           
  9030                           ;psect for function _channelView
  9031  0BB8                     _channelView:	
  9032                           
  9033                           ;menu.c: 67: uint8_t channelView(t_globalData *data);menu.c: 68: {;menu.c: 69:  static u
      +                          int8_t page = 0;;menu.c: 70:  uint8_t n;;menu.c: 72:  returnToPage(page);
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9037  0BB8  0141               	movlb	1	; select bank1
  9038  0BB9  0866               	movf	channelView@page^(0+128),w
  9039  0BBA  31A1  2100  318B   	fcall	_returnToPage
  9040                           
  9041                           ;menu.c: 73:  if (g_updateScreen) {
  9042  0BBD  0141               	movlb	1	; select bank1
  9043  0BBE  086F               	movf	_g_updateScreen^(0+128),w
  9044  0BBF  1903               	btfsc	3,2
  9045  0BC0  2C75               	goto	l5584
  9046                           
  9047                           ;menu.c: 74:   for (n = 0; n < 4; n++) {
  9048  0BC1  01BE               	clrf	channelView@n^(0+128)
  9049  0BC2                     l5566:	
  9050  0BC2  3004               	movlw	4
  9051  0BC3  023E               	subwf	channelView@n^(0+128),w
  9052  0BC4  1803               	btfsc	3,0
  9053  0BC5  2C75               	goto	l5584
  9054                           
  9055                           ;menu.c: 75:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
  9056  0BC6  0140               	movlb	0	; select bank0
  9057  0BC7  01A7               	clrf	OLED_print_xy@row
  9058  0BC8  30A7               	movlw	low (STR_9| (0+32768))
  9059  0BC9  00A8               	movwf	OLED_print_xy@s
  9060  0BCA  30B1               	movlw	high (STR_9| (0+32768))
  9061  0BCB  00A9               	movwf	OLED_print_xy@s+1
  9062  0BCC  300C               	movlw	12
  9063  0BCD  0141               	movlb	1	; select bank1
  9064  0BCE  00B6               	movwf	??_channelView^(0+128)
  9065  0BCF  0836               	movf	??_channelView^(0+128),w
  9066  0BD0  0140               	movlb	0	; select bank0
  9067  0BD1  00A0               	movwf	___bmul@multiplicand
  9068  0BD2  0141               	movlb	1	; select bank1
  9069  0BD3  083E               	movf	channelView@n^(0+128),w
  9070  0BD4  31AF  279C  318B   	fcall	___bmul
  9071  0BD7  31A0  20CE  318B   	fcall	_OLED_print_xy
  9072                           
  9073                           ;menu.c: 76:    itoa(str, n + 1, 1);
  9074  0BDA  3059               	movlw	low _str
  9075  0BDB  0141               	movlb	1	; select bank1
  9076  0BDC  00A5               	movwf	itoa@str^(0+128)
  9077  0BDD  3001               	movlw	high _str
  9078  0BDE  00A6               	movwf	(itoa@str+1)^(0+128)
  9079  0BDF  083E               	movf	channelView@n^(0+128),w
  9080  0BE0  3E01               	addlw	1
  9081  0BE1  00B6               	movwf	??_channelView^(0+128)
  9082  0BE2  0836               	movf	??_channelView^(0+128),w
  9083  0BE3  00A7               	movwf	itoa@value^(0+128)
  9084  0BE4  01A8               	clrf	itoa@width^(0+128)
  9085  0BE5  0AA8               	incf	itoa@width^(0+128),f
  9086  0BE6  31A4  2458  318B   	fcall	_itoa
  9087                           
  9088                           ;menu.c: 77:    OLED_print_xy(n * 12 + 3, 0, str);
  9089  0BE9  0140               	movlb	0	; select bank0
  9090  0BEA  01A7               	clrf	OLED_print_xy@row
  9091  0BEB  3059               	movlw	low _str
  9092  0BEC  00A8               	movwf	OLED_print_xy@s
  9093  0BED  3001               	movlw	high _str
  9094  0BEE  00A9               	movwf	OLED_print_xy@s+1
  9095  0BEF  300C               	movlw	12
  9096  0BF0  0141               	movlb	1	; select bank1
  9097  0BF1  00B6               	movwf	??_channelView^(0+128)
  9098  0BF2  0836               	movf	??_channelView^(0+128),w
  9099  0BF3  0140               	movlb	0	; select bank0
  9100  0BF4  00A0               	movwf	___bmul@multiplicand
  9101  0BF5  0141               	movlb	1	; select bank1
  9102  0BF6  083E               	movf	channelView@n^(0+128),w
  9103  0BF7  31AF  279C  318B   	fcall	___bmul
  9104  0BFA  3E03               	addlw	3
  9105  0BFB  31A0  20CE  318B   	fcall	_OLED_print_xy
  9106                           
  9107                           ;menu.c: 78:    OLED_print_xy(n * 12 + 4, 0, ": ");
  9108  0BFE  0140               	movlb	0	; select bank0
  9109  0BFF  01A7               	clrf	OLED_print_xy@row
  9110  0C00  30B4               	movlw	low (STR_10| (0+32768))
  9111  0C01  00A8               	movwf	OLED_print_xy@s
  9112  0C02  30B1               	movlw	high (STR_10| (0+32768))
  9113  0C03  00A9               	movwf	OLED_print_xy@s+1
  9114  0C04  300C               	movlw	12
  9115  0C05  0141               	movlb	1	; select bank1
  9116  0C06  00B6               	movwf	??_channelView^(0+128)
  9117  0C07  0836               	movf	??_channelView^(0+128),w
  9118  0C08  0140               	movlb	0	; select bank0
  9119  0C09  00A0               	movwf	___bmul@multiplicand
  9120  0C0A  0141               	movlb	1	; select bank1
  9121  0C0B  083E               	movf	channelView@n^(0+128),w
  9122  0C0C  31AF  279C  318B   	fcall	___bmul
  9123  0C0F  3E04               	addlw	4
  9124  0C10  31A0  20CE  318B   	fcall	_OLED_print_xy
  9125                           
  9126                           ;menu.c: 79:    itoa(str, data->chData[n].lensDia, 2);
  9127  0C13  3059               	movlw	low _str
  9128  0C14  0141               	movlb	1	; select bank1
  9129  0C15  00A5               	movwf	itoa@str^(0+128)
  9130  0C16  3001               	movlw	high _str
  9131  0C17  00A6               	movwf	(itoa@str+1)^(0+128)
  9132  0C18  083E               	movf	channelView@n^(0+128),w
  9133  0C19  00B6               	movwf	??_channelView^(0+128)
  9134  0C1A  01B7               	clrf	(??_channelView^(0+128)+1)
  9135  0C1B  3005               	movlw	5
  9136  0C1C                     u6525:	
  9137  0C1C  35B6               	lslf	??_channelView^(0+128),f
  9138  0C1D  0DB7               	rlf	(??_channelView^(0+128)+1),f
  9139  0C1E  0B89               	decfsz	9,f
  9140  0C1F  2C1C               	goto	u6525
  9141  0C20  0836               	movf	??_channelView^(0+128),w
  9142  0C21  0734               	addwf	channelView@data^(0+128),w
  9143  0C22  00B8               	movwf	(??_channelView+2)^(0+128)
  9144  0C23  0837               	movf	(??_channelView+1)^(0+128),w
  9145  0C24  3D35               	addwfc	(channelView@data+1)^(0+128),w
  9146  0C25  00B9               	movwf	(??_channelView+3)^(0+128)
  9147  0C26  0838               	movf	(??_channelView+2)^(0+128),w
  9148  0C27  3E43               	addlw	67
  9149  0C28  0086               	movwf	6
  9150  0C29  3000               	movlw	0
  9151  0C2A  3D39               	addwfc	(??_channelView+3)^(0+128),w
  9152  0C2B  0087               	movwf	7
  9153  0C2C  3F40               	moviw [0]fsr1
  9154  0C2D  0140               	movlb	0	; select bank0
  9155  0C2E  00E8               	movwf	___fltol@f1
  9156  0C2F  3F41               	moviw [1]fsr1
  9157  0C30  00E9               	movwf	___fltol@f1+1
  9158  0C31  3F42               	moviw [2]fsr1
  9159  0C32  00EA               	movwf	___fltol@f1+2
  9160  0C33  3F43               	moviw [3]fsr1
  9161  0C34  00EB               	movwf	___fltol@f1+3
  9162  0C35  31A6  2678  318B   	fcall	___fltol
  9163  0C38  0140               	movlb	0	; select bank0
  9164  0C39  0868               	movf	?___fltol,w
  9165  0C3A  0141               	movlb	1	; select bank1
  9166  0C3B  00BA               	movwf	(??_channelView+4)^(0+128)
  9167  0C3C  083A               	movf	(??_channelView+4)^(0+128),w
  9168  0C3D  00A7               	movwf	itoa@value^(0+128)
  9169  0C3E  3002               	movlw	2
  9170  0C3F  00BB               	movwf	(??_channelView+5)^(0+128)
  9171  0C40  083B               	movf	(??_channelView+5)^(0+128),w
  9172  0C41  00A8               	movwf	itoa@width^(0+128)
  9173  0C42  31A4  2458  318B   	fcall	_itoa
  9174                           
  9175                           ;menu.c: 80:    OLED_print_xy(n * 12 + 6, 0, str);
  9176  0C45  0140               	movlb	0	; select bank0
  9177  0C46  01A7               	clrf	OLED_print_xy@row
  9178  0C47  3059               	movlw	low _str
  9179  0C48  00A8               	movwf	OLED_print_xy@s
  9180  0C49  3001               	movlw	high _str
  9181  0C4A  00A9               	movwf	OLED_print_xy@s+1
  9182  0C4B  300C               	movlw	12
  9183  0C4C  0141               	movlb	1	; select bank1
  9184  0C4D  00B6               	movwf	??_channelView^(0+128)
  9185  0C4E  0836               	movf	??_channelView^(0+128),w
  9186  0C4F  0140               	movlb	0	; select bank0
  9187  0C50  00A0               	movwf	___bmul@multiplicand
  9188  0C51  0141               	movlb	1	; select bank1
  9189  0C52  083E               	movf	channelView@n^(0+128),w
  9190  0C53  31AF  279C  318B   	fcall	___bmul
  9191  0C56  3E06               	addlw	6
  9192  0C57  31A0  20CE  318B   	fcall	_OLED_print_xy
  9193                           
  9194                           ;menu.c: 81:    OLED_print_xy(n * 12 + 8, 0, "\" ");
  9195  0C5A  0140               	movlb	0	; select bank0
  9196  0C5B  01A7               	clrf	OLED_print_xy@row
  9197  0C5C  30B1               	movlw	low (STR_11| (0+32768))
  9198  0C5D  00A8               	movwf	OLED_print_xy@s
  9199  0C5E  30B1               	movlw	high (STR_11| (0+32768))
  9200  0C5F  00A9               	movwf	OLED_print_xy@s+1
  9201  0C60  300C               	movlw	12
  9202  0C61  0141               	movlb	1	; select bank1
  9203  0C62  00B6               	movwf	??_channelView^(0+128)
  9204  0C63  0836               	movf	??_channelView^(0+128),w
  9205  0C64  0140               	movlb	0	; select bank0
  9206  0C65  00A0               	movwf	___bmul@multiplicand
  9207  0C66  0141               	movlb	1	; select bank1
  9208  0C67  083E               	movf	channelView@n^(0+128),w
  9209  0C68  31AF  279C  318B   	fcall	___bmul
  9210  0C6B  3E08               	addlw	8
  9211  0C6C  31A0  20CE  318B   	fcall	_OLED_print_xy
  9212                           
  9213                           ;menu.c: 82:   }
  9214  0C6F  3001               	movlw	1
  9215  0C70  0141               	movlb	1	; select bank1
  9216  0C71  00B6               	movwf	??_channelView^(0+128)
  9217  0C72  0836               	movf	??_channelView^(0+128),w
  9218  0C73  07BE               	addwf	channelView@n^(0+128),f
  9219  0C74  2BC2               	goto	l5566
  9220  0C75                     l5584:	
  9221                           
  9222                           ;menu.c: 85:  for (n = 0; n < 4; n++) {
  9223  0C75  01BE               	clrf	channelView@n^(0+128)
  9224  0C76                     l5586:	
  9225  0C76  3004               	movlw	4
  9226  0C77  023E               	subwf	channelView@n^(0+128),w
  9227  0C78  1803               	btfsc	3,0
  9228  0C79  2DC1               	goto	l5624
  9229  0C7A  2D8B               	goto	l5618
  9230  0C7B                     l5590:	
  9231                           
  9232                           ;menu.c: 88:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
  9233  0C7B  0140               	movlb	0	; select bank0
  9234  0C7C  01A7               	clrf	OLED_print_xy@row
  9235  0C7D  0AA7               	incf	OLED_print_xy@row,f
  9236  0C7E  30B8               	movlw	low (STR_12| (0+32768))
  9237  0C7F  00A8               	movwf	OLED_print_xy@s
  9238  0C80  30B0               	movlw	high (STR_12| (0+32768))
  9239  0C81  00A9               	movwf	OLED_print_xy@s+1
  9240  0C82  300C               	movlw	12
  9241  0C83  0141               	movlb	1	; select bank1
  9242  0C84  00B6               	movwf	??_channelView^(0+128)
  9243  0C85  0836               	movf	??_channelView^(0+128),w
  9244  0C86  0140               	movlb	0	; select bank0
  9245  0C87  00A0               	movwf	___bmul@multiplicand
  9246  0C88  0141               	movlb	1	; select bank1
  9247  0C89  083E               	movf	channelView@n^(0+128),w
  9248  0C8A  31AF  279C  318B   	fcall	___bmul
  9249  0C8D  31A0  20CE  318B   	fcall	_OLED_print_xy
  9250                           
  9251                           ;menu.c: 89:    break;
  9252  0C90  2DBB               	goto	l5620
  9253  0C91                     l5592:	
  9254                           
  9255                           ;menu.c: 91:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
  9256  0C91  0140               	movlb	0	; select bank0
  9257  0C92  01A7               	clrf	OLED_print_xy@row
  9258  0C93  0AA7               	incf	OLED_print_xy@row,f
  9259  0C94  305D               	movlw	low (STR_13| (0+32768))
  9260  0C95  00A8               	movwf	OLED_print_xy@s
  9261  0C96  30B0               	movlw	high (STR_13| (0+32768))
  9262  0C97  00A9               	movwf	OLED_print_xy@s+1
  9263  0C98  300C               	movlw	12
  9264  0C99  0141               	movlb	1	; select bank1
  9265  0C9A  00B6               	movwf	??_channelView^(0+128)
  9266  0C9B  0836               	movf	??_channelView^(0+128),w
  9267  0C9C  0140               	movlb	0	; select bank0
  9268  0C9D  00A0               	movwf	___bmul@multiplicand
  9269  0C9E  0141               	movlb	1	; select bank1
  9270  0C9F  083E               	movf	channelView@n^(0+128),w
  9271  0CA0  31AF  279C  318B   	fcall	___bmul
  9272  0CA3  31A0  20CE  318B   	fcall	_OLED_print_xy
  9273                           
  9274                           ;menu.c: 92:    break;
  9275  0CA6  2DBB               	goto	l5620
  9276  0CA7                     l5594:	
  9277                           
  9278                           ;menu.c: 94:    ftoa(str, data->chData[n].Patt, 4, 1);
  9279  0CA7  083E               	movf	channelView@n^(0+128),w
  9280  0CA8  00B6               	movwf	??_channelView^(0+128)
  9281  0CA9  01B7               	clrf	(??_channelView^(0+128)+1)
  9282  0CAA  3005               	movlw	5
  9283  0CAB                     u6545:	
  9284  0CAB  35B6               	lslf	??_channelView^(0+128),f
  9285  0CAC  0DB7               	rlf	(??_channelView^(0+128)+1),f
  9286  0CAD  0B89               	decfsz	9,f
  9287  0CAE  2CAB               	goto	u6545
  9288  0CAF  0836               	movf	??_channelView^(0+128),w
  9289  0CB0  0734               	addwf	channelView@data^(0+128),w
  9290  0CB1  00B8               	movwf	(??_channelView+2)^(0+128)
  9291  0CB2  0837               	movf	(??_channelView+1)^(0+128),w
  9292  0CB3  3D35               	addwfc	(channelView@data+1)^(0+128),w
  9293  0CB4  00B9               	movwf	(??_channelView+3)^(0+128)
  9294  0CB5  0838               	movf	(??_channelView+2)^(0+128),w
  9295  0CB6  3E39               	addlw	57
  9296  0CB7  0086               	movwf	6
  9297  0CB8  3000               	movlw	0
  9298  0CB9  3D39               	addwfc	(??_channelView+3)^(0+128),w
  9299  0CBA  0087               	movwf	7
  9300  0CBB  3F40               	moviw [0]fsr1
  9301  0CBC  00A5               	movwf	ftoa@fValue^(0+128)
  9302  0CBD  3F41               	moviw [1]fsr1
  9303  0CBE  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9304  0CBF  3F42               	moviw [2]fsr1
  9305  0CC0  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9306  0CC1  3F43               	moviw [3]fsr1
  9307  0CC2  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9308  0CC3  3004               	movlw	4
  9309  0CC4  00BA               	movwf	(??_channelView+4)^(0+128)
  9310  0CC5  083A               	movf	(??_channelView+4)^(0+128),w
  9311  0CC6  00A9               	movwf	ftoa@width^(0+128)
  9312  0CC7  01AA               	clrf	ftoa@prec^(0+128)
  9313  0CC8  0AAA               	incf	ftoa@prec^(0+128),f
  9314  0CC9  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9315  0CCA  319E  268B  318B   	fcall	_ftoa
  9316                           
  9317                           ;menu.c: 95:    OLED_print_xy(n * 12 + 0, 1, str);
  9318  0CCD  0140               	movlb	0	; select bank0
  9319  0CCE  01A7               	clrf	OLED_print_xy@row
  9320  0CCF  0AA7               	incf	OLED_print_xy@row,f
  9321  0CD0  3059               	movlw	low _str
  9322  0CD1  00A8               	movwf	OLED_print_xy@s
  9323  0CD2  3001               	movlw	high _str
  9324  0CD3  00A9               	movwf	OLED_print_xy@s+1
  9325  0CD4  300C               	movlw	12
  9326  0CD5  0141               	movlb	1	; select bank1
  9327  0CD6  00B6               	movwf	??_channelView^(0+128)
  9328  0CD7  0836               	movf	??_channelView^(0+128),w
  9329  0CD8  0140               	movlb	0	; select bank0
  9330  0CD9  00A0               	movwf	___bmul@multiplicand
  9331  0CDA  0141               	movlb	1	; select bank1
  9332  0CDB  083E               	movf	channelView@n^(0+128),w
  9333  0CDC  31AF  279C  318B   	fcall	___bmul
  9334  0CDF  31A0  20CE  318B   	fcall	_OLED_print_xy
  9335                           
  9336                           ;menu.c: 96:    OLED_print_xy(n * 12 + 4, 1, "W ");
  9337  0CE2  0140               	movlb	0	; select bank0
  9338  0CE3  01A7               	clrf	OLED_print_xy@row
  9339  0CE4  0AA7               	incf	OLED_print_xy@row,f
  9340  0CE5  30B7               	movlw	low (STR_14| (0+32768))
  9341  0CE6  00A8               	movwf	OLED_print_xy@s
  9342  0CE7  30B1               	movlw	high (STR_14| (0+32768))
  9343  0CE8  00A9               	movwf	OLED_print_xy@s+1
  9344  0CE9  300C               	movlw	12
  9345  0CEA  0141               	movlb	1	; select bank1
  9346  0CEB  00B6               	movwf	??_channelView^(0+128)
  9347  0CEC  0836               	movf	??_channelView^(0+128),w
  9348  0CED  0140               	movlb	0	; select bank0
  9349  0CEE  00A0               	movwf	___bmul@multiplicand
  9350  0CEF  0141               	movlb	1	; select bank1
  9351  0CF0  083E               	movf	channelView@n^(0+128),w
  9352  0CF1  31AF  279C  318B   	fcall	___bmul
  9353  0CF4  3E04               	addlw	4
  9354  0CF5  31A0  20CE  318B   	fcall	_OLED_print_xy
  9355                           
  9356                           ;menu.c: 97:    OLED_print_xy(n * 12 + 6, 1, (data->chData[n].mode == MODE_AUTO ? "auto 
      +                           " : "manual"));
  9357  0CF8  0141               	movlb	1	; select bank1
  9358  0CF9  083E               	movf	channelView@n^(0+128),w
  9359  0CFA  00B6               	movwf	??_channelView^(0+128)
  9360  0CFB  01B7               	clrf	(??_channelView^(0+128)+1)
  9361  0CFC  3005               	movlw	5
  9362  0CFD                     u6555:	
  9363  0CFD  35B6               	lslf	??_channelView^(0+128),f
  9364  0CFE  0DB7               	rlf	(??_channelView^(0+128)+1),f
  9365  0CFF  0B89               	decfsz	9,f
  9366  0D00  2CFD               	goto	u6555
  9367  0D01  0836               	movf	??_channelView^(0+128),w
  9368  0D02  0734               	addwf	channelView@data^(0+128),w
  9369  0D03  00B8               	movwf	(??_channelView+2)^(0+128)
  9370  0D04  0837               	movf	(??_channelView+1)^(0+128),w
  9371  0D05  3D35               	addwfc	(channelView@data+1)^(0+128),w
  9372  0D06  00B9               	movwf	(??_channelView+3)^(0+128)
  9373  0D07  0838               	movf	(??_channelView+2)^(0+128),w
  9374  0D08  3E4B               	addlw	75
  9375  0D09  0086               	movwf	6
  9376  0D0A  3000               	movlw	0
  9377  0D0B  3D39               	addwfc	(??_channelView+3)^(0+128),w
  9378  0D0C  0087               	movwf	7
  9379  0D0D  0301               	decf	1,w
  9380  0D0E  1903               	btfsc	3,2
  9381  0D0F  2D14               	goto	l5604
  9382  0D10  303B               	movlw	low ((STR_26+2)| (0+32768))
  9383  0D11  00BC               	movwf	_channelView$1023^(0+128)
  9384  0D12  30B1               	movlw	high ((STR_26+2)| (0+32768))
  9385  0D13  2D17               	goto	L5
  9386  0D14                     l5604:	
  9387  0D14  306B               	movlw	low ((STR_25+1)| (0+32768))
  9388  0D15  00BC               	movwf	_channelView$1023^(0+128)
  9389  0D16  30B1               	movlw	high ((STR_25+1)| (0+32768))
  9390  0D17                     L5:	
  9391  0D17  00BD               	movwf	(_channelView$1023^(0+128)+1)
  9392  0D18  0140               	movlb	0	; select bank0
  9393  0D19  01A7               	clrf	OLED_print_xy@row
  9394  0D1A  0AA7               	incf	OLED_print_xy@row,f
  9395  0D1B  0141               	movlb	1	; select bank1
  9396  0D1C  083D               	movf	(_channelView$1023+1)^(0+128),w
  9397  0D1D  0140               	movlb	0	; select bank0
  9398  0D1E  00A9               	movwf	OLED_print_xy@s+1
  9399  0D1F  0141               	movlb	1	; select bank1
  9400  0D20  083C               	movf	_channelView$1023^(0+128),w
  9401  0D21  0140               	movlb	0	; select bank0
  9402  0D22  00A8               	movwf	OLED_print_xy@s
  9403  0D23  300C               	movlw	12
  9404  0D24  0141               	movlb	1	; select bank1
  9405  0D25  00B6               	movwf	??_channelView^(0+128)
  9406  0D26  0836               	movf	??_channelView^(0+128),w
  9407  0D27  0140               	movlb	0	; select bank0
  9408  0D28  00A0               	movwf	___bmul@multiplicand
  9409  0D29  0141               	movlb	1	; select bank1
  9410  0D2A  083E               	movf	channelView@n^(0+128),w
  9411  0D2B  31AF  279C  318B   	fcall	___bmul
  9412  0D2E  3E06               	addlw	6
  9413  0D2F  31A0  20CE  318B   	fcall	_OLED_print_xy
  9414                           
  9415                           ;menu.c: 98:    break;
  9416  0D32  2DBB               	goto	l5620
  9417  0D33                     l5608:	
  9418                           
  9419                           ;menu.c: 100:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
  9420  0D33  0140               	movlb	0	; select bank0
  9421  0D34  01A7               	clrf	OLED_print_xy@row
  9422  0D35  0AA7               	incf	OLED_print_xy@row,f
  9423  0D36  30D2               	movlw	low (STR_17| (0+32768))
  9424  0D37  00A8               	movwf	OLED_print_xy@s
  9425  0D38  30B0               	movlw	high (STR_17| (0+32768))
  9426  0D39  00A9               	movwf	OLED_print_xy@s+1
  9427  0D3A  300C               	movlw	12
  9428  0D3B  0141               	movlb	1	; select bank1
  9429  0D3C  00B6               	movwf	??_channelView^(0+128)
  9430  0D3D  0836               	movf	??_channelView^(0+128),w
  9431  0D3E  0140               	movlb	0	; select bank0
  9432  0D3F  00A0               	movwf	___bmul@multiplicand
  9433  0D40  0141               	movlb	1	; select bank1
  9434  0D41  083E               	movf	channelView@n^(0+128),w
  9435  0D42  31AF  279C  318B   	fcall	___bmul
  9436  0D45  31A0  20CE  318B   	fcall	_OLED_print_xy
  9437                           
  9438                           ;menu.c: 101:    break;
  9439  0D48  2DBB               	goto	l5620
  9440  0D49                     l5610:	
  9441                           
  9442                           ;menu.c: 103:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
  9443  0D49  0140               	movlb	0	; select bank0
  9444  0D4A  01A7               	clrf	OLED_print_xy@row
  9445  0D4B  0AA7               	incf	OLED_print_xy@row,f
  9446  0D4C  3050               	movlw	low (STR_18| (0+32768))
  9447  0D4D  00A8               	movwf	OLED_print_xy@s
  9448  0D4E  30B0               	movlw	high (STR_18| (0+32768))
  9449  0D4F  00A9               	movwf	OLED_print_xy@s+1
  9450  0D50  300C               	movlw	12
  9451  0D51  0141               	movlb	1	; select bank1
  9452  0D52  00B6               	movwf	??_channelView^(0+128)
  9453  0D53  0836               	movf	??_channelView^(0+128),w
  9454  0D54  0140               	movlb	0	; select bank0
  9455  0D55  00A0               	movwf	___bmul@multiplicand
  9456  0D56  0141               	movlb	1	; select bank1
  9457  0D57  083E               	movf	channelView@n^(0+128),w
  9458  0D58  31AF  279C  318B   	fcall	___bmul
  9459  0D5B  31A0  20CE  318B   	fcall	_OLED_print_xy
  9460                           
  9461                           ;menu.c: 104:    break;
  9462  0D5E  2DBB               	goto	l5620
  9463  0D5F                     l5612:	
  9464                           
  9465                           ;menu.c: 106:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
  9466  0D5F  0140               	movlb	0	; select bank0
  9467  0D60  01A7               	clrf	OLED_print_xy@row
  9468  0D61  0AA7               	incf	OLED_print_xy@row,f
  9469  0D62  30C5               	movlw	low (STR_19| (0+32768))
  9470  0D63  00A8               	movwf	OLED_print_xy@s
  9471  0D64  30B0               	movlw	high (STR_19| (0+32768))
  9472  0D65  00A9               	movwf	OLED_print_xy@s+1
  9473  0D66  300C               	movlw	12
  9474  0D67  0141               	movlb	1	; select bank1
  9475  0D68  00B6               	movwf	??_channelView^(0+128)
  9476  0D69  0836               	movf	??_channelView^(0+128),w
  9477  0D6A  0140               	movlb	0	; select bank0
  9478  0D6B  00A0               	movwf	___bmul@multiplicand
  9479  0D6C  0141               	movlb	1	; select bank1
  9480  0D6D  083E               	movf	channelView@n^(0+128),w
  9481  0D6E  31AF  279C  318B   	fcall	___bmul
  9482  0D71  31A0  20CE  318B   	fcall	_OLED_print_xy
  9483                           
  9484                           ;menu.c: 107:    break;
  9485  0D74  2DBB               	goto	l5620
  9486  0D75                     l5614:	
  9487                           
  9488                           ;menu.c: 109:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
  9489  0D75  0140               	movlb	0	; select bank0
  9490  0D76  01A7               	clrf	OLED_print_xy@row
  9491  0D77  0AA7               	incf	OLED_print_xy@row,f
  9492  0D78  30EC               	movlw	low (STR_20| (0+32768))
  9493  0D79  00A8               	movwf	OLED_print_xy@s
  9494  0D7A  30B0               	movlw	high (STR_20| (0+32768))
  9495  0D7B  00A9               	movwf	OLED_print_xy@s+1
  9496  0D7C  300C               	movlw	12
  9497  0D7D  0141               	movlb	1	; select bank1
  9498  0D7E  00B6               	movwf	??_channelView^(0+128)
  9499  0D7F  0836               	movf	??_channelView^(0+128),w
  9500  0D80  0140               	movlb	0	; select bank0
  9501  0D81  00A0               	movwf	___bmul@multiplicand
  9502  0D82  0141               	movlb	1	; select bank1
  9503  0D83  083E               	movf	channelView@n^(0+128),w
  9504  0D84  31AF  279C  318B   	fcall	___bmul
  9505  0D87  31A0  20CE  318B   	fcall	_OLED_print_xy
  9506                           
  9507                           ;menu.c: 110:    break;
  9508  0D8A  2DBB               	goto	l5620
  9509  0D8B                     l5618:	
  9510  0D8B  083E               	movf	channelView@n^(0+128),w
  9511  0D8C  00B6               	movwf	??_channelView^(0+128)
  9512  0D8D  01B7               	clrf	(??_channelView^(0+128)+1)
  9513  0D8E  3005               	movlw	5
  9514  0D8F                     u6575:	
  9515  0D8F  35B6               	lslf	??_channelView^(0+128),f
  9516  0D90  0DB7               	rlf	(??_channelView^(0+128)+1),f
  9517  0D91  0B89               	decfsz	9,f
  9518  0D92  2D8F               	goto	u6575
  9519  0D93  0836               	movf	??_channelView^(0+128),w
  9520  0D94  0734               	addwf	channelView@data^(0+128),w
  9521  0D95  00B8               	movwf	(??_channelView+2)^(0+128)
  9522  0D96  0837               	movf	(??_channelView+1)^(0+128),w
  9523  0D97  3D35               	addwfc	(channelView@data+1)^(0+128),w
  9524  0D98  00B9               	movwf	(??_channelView+3)^(0+128)
  9525  0D99  0838               	movf	(??_channelView+2)^(0+128),w
  9526  0D9A  3E4C               	addlw	76
  9527  0D9B  0086               	movwf	6
  9528  0D9C  3000               	movlw	0
  9529  0D9D  3D39               	addwfc	(??_channelView+3)^(0+128),w
  9530  0D9E  0087               	movwf	7
  9531  0D9F  0801               	movf	1,w
  9532  0DA0  00BA               	movwf	(??_channelView+4)^(0+128)
  9533  0DA1  01BB               	clrf	((??_channelView+4)^(0+128)+1)
  9534                           
  9535                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9536                           ; Switch size 1, requested type "simple"
  9537                           ; Number of cases is 1, Range of values is 0 to 0
  9538                           ; switch strategies available:
  9539                           ; Name         Instructions Cycles
  9540                           ; simple_byte            4     3 (average)
  9541                           ; direct_byte            8     6 (fixed)
  9542                           ; jumptable            260     6 (fixed)
  9543                           ;	Chosen strategy is simple_byte
  9544  0DA2  083B               	movf	(??_channelView+5)^(0+128),w
  9545  0DA3  3A00               	xorlw	0	; case 0
  9546  0DA4  1903               	skipnz
  9547  0DA5  2DA7               	goto	l5966
  9548  0DA6  2D75               	goto	l5614
  9549  0DA7                     l5966:	
  9550                           
  9551                           ; Switch size 1, requested type "simple"
  9552                           ; Number of cases is 6, Range of values is 0 to 5
  9553                           ; switch strategies available:
  9554                           ; Name         Instructions Cycles
  9555                           ; direct_byte           18     6 (fixed)
  9556                           ; simple_byte           19    10 (average)
  9557                           ; jumptable            260     6 (fixed)
  9558                           ;	Chosen strategy is simple_byte
  9559  0DA7  083A               	movf	(??_channelView+4)^(0+128),w
  9560  0DA8  3A00               	xorlw	0	; case 0
  9561  0DA9  1903               	skipnz
  9562  0DAA  2C91               	goto	l5592
  9563  0DAB  3A01               	xorlw	1	; case 1
  9564  0DAC  1903               	skipnz
  9565  0DAD  2CA7               	goto	l5594
  9566  0DAE  3A03               	xorlw	3	; case 2
  9567  0DAF  1903               	skipnz
  9568  0DB0  2D33               	goto	l5608
  9569  0DB1  3A01               	xorlw	1	; case 3
  9570  0DB2  1903               	skipnz
  9571  0DB3  2D49               	goto	l5610
  9572  0DB4  3A07               	xorlw	7	; case 4
  9573  0DB5  1903               	skipnz
  9574  0DB6  2D5F               	goto	l5612
  9575  0DB7  3A01               	xorlw	1	; case 5
  9576  0DB8  1903               	skipnz
  9577  0DB9  2C7B               	goto	l5590
  9578  0DBA  2D75               	goto	l5614
  9579  0DBB                     l5620:	
  9580                           
  9581                           ;menu.c: 112:  }
  9582  0DBB  3001               	movlw	1
  9583  0DBC  0141               	movlb	1	; select bank1
  9584  0DBD  00B6               	movwf	??_channelView^(0+128)
  9585  0DBE  0836               	movf	??_channelView^(0+128),w
  9586  0DBF  07BE               	addwf	channelView@n^(0+128),f
  9587  0DC0  2C76               	goto	l5586
  9588  0DC1                     l5624:	
  9589                           
  9590                           ;menu.c: 113:  page = paging(page, 4);
  9591  0DC1  3004               	movlw	4
  9592  0DC2  00B6               	movwf	??_channelView^(0+128)
  9593  0DC3  0836               	movf	??_channelView^(0+128),w
  9594  0DC4  0140               	movlb	0	; select bank0
  9595  0DC5  00A7               	movwf	paging@lastPage
  9596  0DC6  0141               	movlb	1	; select bank1
  9597  0DC7  0866               	movf	channelView@page^(0+128),w
  9598  0DC8  31A4  24C1         	fcall	_paging
  9599  0DCA  0141               	movlb	1	; select bank1
  9600  0DCB  00B7               	movwf	(??_channelView+1)^(0+128)
  9601  0DCC  0837               	movf	(??_channelView+1)^(0+128),w
  9602  0DCD  00E6               	movwf	channelView@page^(0+128)
  9603                           
  9604                           ;menu.c: 114:  selectedChannel = page;
  9605  0DCE  0866               	movf	channelView@page^(0+128),w
  9606  0DCF  00B6               	movwf	??_channelView^(0+128)
  9607  0DD0  0836               	movf	??_channelView^(0+128),w
  9608  0DD1  00E8               	movwf	_selectedChannel^(0+128)
  9609                           
  9610                           ;menu.c: 116:  return page;
  9611  0DD2  0866               	movf	channelView@page^(0+128),w
  9612  0DD3  0008               	return
  9613  0DD4                     __end_of_channelView:	
  9614                           
  9615                           	psect	text12
  9616  14D7                     __ptext12:	
  9617 ;; *************** function _statusView *****************
  9618 ;; Defined at:
  9619 ;;		line 16 in file "menu.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;  data            2   20[BANK1 ] PTR struct .
  9622 ;;		 -> data(173), 
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;		None
  9625 ;; Return value:  Size  Location     Type
  9626 ;;                  1    wreg      unsigned char 
  9627 ;; Registers used:
  9628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9634 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9636 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9637 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9638 ;;Total ram usage:        4 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; Hardware stack levels required when called:    9
  9641 ;; This function calls:
  9642 ;;		_OLED_print_xy
  9643 ;;		_ftoa
  9644 ;;		_paging
  9645 ;;		_returnToPage
  9646 ;; This function is called by:
  9647 ;;		_menu
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           
  9652                           ;psect for function _statusView
  9653  14D7                     _statusView:	
  9654                           
  9655                           ;menu.c: 16: uint8_t statusView(t_globalData *data);menu.c: 17: {;menu.c: 18:  static ui
      +                          nt8_t page = 0;;menu.c: 19:  static uint8_t prevSensorStat = 1;;menu.c: 22:  if (prevSen
      +                          sorStat != data->status.SENSOR_OK) {
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9659  14D7  0141               	movlb	1	; select bank1
  9660  14D8  0834               	movf	statusView@data^(0+128),w
  9661  14D9  3E2C               	addlw	44
  9662  14DA  0086               	movwf	6
  9663  14DB  3000               	movlw	0
  9664  14DC  3D35               	addwfc	(statusView@data+1)^(0+128),w
  9665  14DD  0087               	movwf	7
  9666  14DE  0C01               	rrf	1,w
  9667  14DF  3901               	andlw	1
  9668  14E0  066E               	xorwf	statusView@prevSensorStat^(0+128),w
  9669  14E1  1903               	skipnz
  9670  14E2  2CFD               	goto	l4464
  9671                           
  9672                           ;menu.c: 23:   prevSensorStat = data->status.SENSOR_OK;
  9673  14E3  0834               	movf	statusView@data^(0+128),w
  9674  14E4  3E2C               	addlw	44
  9675  14E5  0086               	movwf	6
  9676  14E6  3000               	movlw	0
  9677  14E7  3D35               	addwfc	(statusView@data+1)^(0+128),w
  9678  14E8  0087               	movwf	7
  9679  14E9  3000               	movlw	0
  9680  14EA  1881               	btfsc	1,1
  9681  14EB  3001               	movlw	1
  9682  14EC  00EE               	movwf	statusView@prevSensorStat^(0+128)
  9683                           
  9684                           ;menu.c: 25:   if (data->status.SENSOR_OK)
  9685  14ED  0834               	movf	statusView@data^(0+128),w
  9686  14EE  3E2C               	addlw	44
  9687  14EF  0086               	movwf	6
  9688  14F0  3000               	movlw	0
  9689  14F1  3D35               	addwfc	(statusView@data+1)^(0+128),w
  9690  14F2  0087               	movwf	7
  9691  14F3  1C81               	btfss	1,1
  9692  14F4  2CF7               	goto	l4460
  9693                           
  9694                           ;menu.c: 26:    page = 0;
  9695  14F5  01E7               	clrf	statusView@page^(0+128)
  9696  14F6  2CFB               	goto	l4462
  9697  14F7                     l4460:	
  9698                           
  9699                           ;menu.c: 28:    page = 3;
  9700  14F7  3003               	movlw	3
  9701  14F8  00B6               	movwf	??_statusView^(0+128)
  9702  14F9  0836               	movf	??_statusView^(0+128),w
  9703  14FA  00E7               	movwf	statusView@page^(0+128)
  9704  14FB                     l4462:	
  9705                           
  9706                           ;menu.c: 29:   g_updateScreen = 1;
  9707  14FB  01EF               	clrf	_g_updateScreen^(0+128)
  9708  14FC  0AEF               	incf	_g_updateScreen^(0+128),f
  9709  14FD                     l4464:	
  9710                           
  9711                           ;menu.c: 32:  returnToPage(page);
  9712  14FD  0867               	movf	statusView@page^(0+128),w
  9713  14FE  31A1  2100  3194   	fcall	_returnToPage
  9714                           
  9715                           ;menu.c: 33:  if (g_updateScreen)
  9716  1501  0141               	movlb	1	; select bank1
  9717  1502  086F               	movf	_g_updateScreen^(0+128),w
  9718  1503  1903               	btfsc	3,2
  9719  1504  2D0F               	goto	l4470
  9720                           
  9721                           ;menu.c: 34:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   Power");
  9722  1505  0140               	movlb	0	; select bank0
  9723  1506  01A7               	clrf	OLED_print_xy@row
  9724  1507  306F               	movlw	low (STR_1| (0+32768))
  9725  1508  00A8               	movwf	OLED_print_xy@s
  9726  1509  30A8               	movlw	high (STR_1| (0+32768))
  9727  150A  00A9               	movwf	OLED_print_xy@s+1
  9728  150B  3000               	movlw	0
  9729  150C  31A0  20CE  3194   	fcall	_OLED_print_xy
  9730  150F                     l4470:	
  9731                           
  9732                           ;menu.c: 35:  if (data->status.AUX_SENSOR_OK) {
  9733  150F  0141               	movlb	1	; select bank1
  9734  1510  0834               	movf	statusView@data^(0+128),w
  9735  1511  3E2C               	addlw	44
  9736  1512  0086               	movwf	6
  9737  1513  3000               	movlw	0
  9738  1514  3D35               	addwfc	(statusView@data+1)^(0+128),w
  9739  1515  0087               	movwf	7
  9740  1516  1D01               	btfss	1,2
  9741  1517  2D6F               	goto	l4482
  9742                           
  9743                           ;menu.c: 36:   ftoa(str, data->tempC, 5, 1);
  9744  1518  0834               	movf	statusView@data^(0+128),w
  9745  1519  0086               	movwf	6
  9746  151A  0835               	movf	(statusView@data+1)^(0+128),w
  9747  151B  0087               	movwf	7
  9748  151C  3F40               	moviw [0]fsr1
  9749  151D  00A5               	movwf	ftoa@fValue^(0+128)
  9750  151E  3F41               	moviw [1]fsr1
  9751  151F  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9752  1520  3F42               	moviw [2]fsr1
  9753  1521  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9754  1522  3F43               	moviw [3]fsr1
  9755  1523  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9756  1524  3005               	movlw	5
  9757  1525  00B6               	movwf	??_statusView^(0+128)
  9758  1526  0836               	movf	??_statusView^(0+128),w
  9759  1527  00A9               	movwf	ftoa@width^(0+128)
  9760  1528  01AA               	clrf	ftoa@prec^(0+128)
  9761  1529  0AAA               	incf	ftoa@prec^(0+128),f
  9762  152A  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9763  152B  319E  268B  3194   	fcall	_ftoa
  9764                           
  9765                           ;menu.c: 37:   OLED_print_xy(0, 1, str);
  9766  152E  0140               	movlb	0	; select bank0
  9767  152F  01A7               	clrf	OLED_print_xy@row
  9768  1530  0AA7               	incf	OLED_print_xy@row,f
  9769  1531  3059               	movlw	low _str
  9770  1532  00A8               	movwf	OLED_print_xy@s
  9771  1533  3001               	movlw	high _str
  9772  1534  00A9               	movwf	OLED_print_xy@s+1
  9773  1535  3000               	movlw	0
  9774  1536  31A0  20CE  3194   	fcall	_OLED_print_xy
  9775                           
  9776                           ;menu.c: 38:   OLED_print_xy(5, 1, "\001 \002");
  9777  1539  0140               	movlb	0	; select bank0
  9778  153A  01A7               	clrf	OLED_print_xy@row
  9779  153B  0AA7               	incf	OLED_print_xy@row,f
  9780  153C  309F               	movlw	low (STR_2| (0+32768))
  9781  153D  00A8               	movwf	OLED_print_xy@s
  9782  153E  30B1               	movlw	high (STR_2| (0+32768))
  9783  153F  00A9               	movwf	OLED_print_xy@s+1
  9784  1540  3005               	movlw	5
  9785  1541  31A0  20CE  3194   	fcall	_OLED_print_xy
  9786                           
  9787                           ;menu.c: 39:   ftoa(str, data->tempAux, 3, 0);
  9788  1544  0141               	movlb	1	; select bank1
  9789  1545  0834               	movf	statusView@data^(0+128),w
  9790  1546  0086               	movwf	6
  9791  1547  0835               	movf	(statusView@data+1)^(0+128),w
  9792  1548  0087               	movwf	7
  9793  1549  3150               	addfsr 1,16
  9794  154A  3F40               	moviw [0]fsr1
  9795  154B  00A5               	movwf	ftoa@fValue^(0+128)
  9796  154C  3F41               	moviw [1]fsr1
  9797  154D  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9798  154E  3F42               	moviw [2]fsr1
  9799  154F  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9800  1550  3F43               	moviw [3]fsr1
  9801  1551  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9802  1552  3003               	movlw	3
  9803  1553  00B6               	movwf	??_statusView^(0+128)
  9804  1554  0836               	movf	??_statusView^(0+128),w
  9805  1555  00A9               	movwf	ftoa@width^(0+128)
  9806  1556  01AA               	clrf	ftoa@prec^(0+128)
  9807  1557  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9808  1558  319E  268B  3194   	fcall	_ftoa
  9809                           
  9810                           ;menu.c: 40:   OLED_print_xy(8, 1, str);
  9811  155B  0140               	movlb	0	; select bank0
  9812  155C  01A7               	clrf	OLED_print_xy@row
  9813  155D  0AA7               	incf	OLED_print_xy@row,f
  9814  155E  3059               	movlw	low _str
  9815  155F  00A8               	movwf	OLED_print_xy@s
  9816  1560  3001               	movlw	high _str
  9817  1561  00A9               	movwf	OLED_print_xy@s+1
  9818  1562  3008               	movlw	8
  9819  1563  31A0  20CE  3194   	fcall	_OLED_print_xy
  9820                           
  9821                           ;menu.c: 41:   OLED_print_xy(11, 1, "\001");
  9822  1566  0140               	movlb	0	; select bank0
  9823  1567  01A7               	clrf	OLED_print_xy@row
  9824  1568  0AA7               	incf	OLED_print_xy@row,f
  9825  1569  30BA               	movlw	low (STR_3| (0+32768))
  9826  156A  00A8               	movwf	OLED_print_xy@s
  9827  156B  30B1               	movlw	high (STR_3| (0+32768))
  9828  156C  00A9               	movwf	OLED_print_xy@s+1
  9829  156D  300B               	movlw	11
  9830  156E  2D98               	goto	L6
  9831  156F                     l4482:	
  9832                           ;menu.c: 42:  } else {
  9833                           
  9834                           
  9835                           ;menu.c: 43:   ftoa(str, data->tempC, 5, 1);
  9836  156F  0834               	movf	statusView@data^(0+128),w
  9837  1570  0086               	movwf	6
  9838  1571  0835               	movf	(statusView@data+1)^(0+128),w
  9839  1572  0087               	movwf	7
  9840  1573  3F40               	moviw [0]fsr1
  9841  1574  00A5               	movwf	ftoa@fValue^(0+128)
  9842  1575  3F41               	moviw [1]fsr1
  9843  1576  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9844  1577  3F42               	moviw [2]fsr1
  9845  1578  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9846  1579  3F43               	moviw [3]fsr1
  9847  157A  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9848  157B  3005               	movlw	5
  9849  157C  00B6               	movwf	??_statusView^(0+128)
  9850  157D  0836               	movf	??_statusView^(0+128),w
  9851  157E  00A9               	movwf	ftoa@width^(0+128)
  9852  157F  01AA               	clrf	ftoa@prec^(0+128)
  9853  1580  0AAA               	incf	ftoa@prec^(0+128),f
  9854  1581  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9855  1582  319E  268B  3194   	fcall	_ftoa
  9856                           
  9857                           ;menu.c: 44:   OLED_print_xy(0, 1, str);
  9858  1585  0140               	movlb	0	; select bank0
  9859  1586  01A7               	clrf	OLED_print_xy@row
  9860  1587  0AA7               	incf	OLED_print_xy@row,f
  9861  1588  3059               	movlw	low _str
  9862  1589  00A8               	movwf	OLED_print_xy@s
  9863  158A  3001               	movlw	high _str
  9864  158B  00A9               	movwf	OLED_print_xy@s+1
  9865  158C  3000               	movlw	0
  9866  158D  31A0  20CE  3194   	fcall	_OLED_print_xy
  9867                           
  9868                           ;menu.c: 45:   OLED_print_xy(5, 1, "\001      ");
  9869  1590  0140               	movlb	0	; select bank0
  9870  1591  01A7               	clrf	OLED_print_xy@row
  9871  1592  0AA7               	incf	OLED_print_xy@row,f
  9872  1593  3052               	movlw	low (STR_4| (0+32768))
  9873  1594  00A8               	movwf	OLED_print_xy@s
  9874  1595  30B1               	movlw	high (STR_4| (0+32768))
  9875  1596  00A9               	movwf	OLED_print_xy@s+1
  9876  1597  3005               	movlw	5
  9877  1598                     L6:	
  9878  1598  31A0  20CE  3194   	fcall	_OLED_print_xy
  9879                           
  9880                           ;menu.c: 47:  ftoa(str, data->relHum, 5, 1);
  9881                           
  9882                           ;menu.c: 46:  }
  9883  159B  0141               	movlb	1	; select bank1
  9884  159C  0834               	movf	statusView@data^(0+128),w
  9885  159D  0086               	movwf	6
  9886  159E  0835               	movf	(statusView@data+1)^(0+128),w
  9887  159F  0087               	movwf	7
  9888  15A0  3144               	addfsr 1,4
  9889  15A1  3F40               	moviw [0]fsr1
  9890  15A2  00A5               	movwf	ftoa@fValue^(0+128)
  9891  15A3  3F41               	moviw [1]fsr1
  9892  15A4  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9893  15A5  3F42               	moviw [2]fsr1
  9894  15A6  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9895  15A7  3F43               	moviw [3]fsr1
  9896  15A8  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9897  15A9  3005               	movlw	5
  9898  15AA  00B6               	movwf	??_statusView^(0+128)
  9899  15AB  0836               	movf	??_statusView^(0+128),w
  9900  15AC  00A9               	movwf	ftoa@width^(0+128)
  9901  15AD  01AA               	clrf	ftoa@prec^(0+128)
  9902  15AE  0AAA               	incf	ftoa@prec^(0+128),f
  9903  15AF  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9904  15B0  319E  268B  3194   	fcall	_ftoa
  9905                           
  9906                           ;menu.c: 48:  OLED_print_xy(12, 1, str);
  9907  15B3  0140               	movlb	0	; select bank0
  9908  15B4  01A7               	clrf	OLED_print_xy@row
  9909  15B5  0AA7               	incf	OLED_print_xy@row,f
  9910  15B6  3059               	movlw	low _str
  9911  15B7  00A8               	movwf	OLED_print_xy@s
  9912  15B8  3001               	movlw	high _str
  9913  15B9  00A9               	movwf	OLED_print_xy@s+1
  9914  15BA  300C               	movlw	12
  9915  15BB  31A0  20CE  3194   	fcall	_OLED_print_xy
  9916                           
  9917                           ;menu.c: 49:  OLED_print_xy(12 + 5, 1, "%     ");
  9918  15BE  0140               	movlb	0	; select bank0
  9919  15BF  01A7               	clrf	OLED_print_xy@row
  9920  15C0  0AA7               	incf	OLED_print_xy@row,f
  9921  15C1  3087               	movlw	low (STR_5| (0+32768))
  9922  15C2  00A8               	movwf	OLED_print_xy@s
  9923  15C3  30B1               	movlw	high (STR_5| (0+32768))
  9924  15C4  00A9               	movwf	OLED_print_xy@s+1
  9925  15C5  3011               	movlw	17
  9926  15C6  31A0  20CE  3194   	fcall	_OLED_print_xy
  9927                           
  9928                           ;menu.c: 50:  ftoa(str, data->dewPointC, 5, 1);
  9929  15C9  0141               	movlb	1	; select bank1
  9930  15CA  0834               	movf	statusView@data^(0+128),w
  9931  15CB  0086               	movwf	6
  9932  15CC  0835               	movf	(statusView@data+1)^(0+128),w
  9933  15CD  0087               	movwf	7
  9934  15CE  3148               	addfsr 1,8
  9935  15CF  3F40               	moviw [0]fsr1
  9936  15D0  00A5               	movwf	ftoa@fValue^(0+128)
  9937  15D1  3F41               	moviw [1]fsr1
  9938  15D2  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9939  15D3  3F42               	moviw [2]fsr1
  9940  15D4  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9941  15D5  3F43               	moviw [3]fsr1
  9942  15D6  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9943  15D7  3005               	movlw	5
  9944  15D8  00B6               	movwf	??_statusView^(0+128)
  9945  15D9  0836               	movf	??_statusView^(0+128),w
  9946  15DA  00A9               	movwf	ftoa@width^(0+128)
  9947  15DB  01AA               	clrf	ftoa@prec^(0+128)
  9948  15DC  0AAA               	incf	ftoa@prec^(0+128),f
  9949  15DD  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9950  15DE  319E  268B  3194   	fcall	_ftoa
  9951                           
  9952                           ;menu.c: 51:  OLED_print_xy(2 * 12, 1, str);
  9953  15E1  0140               	movlb	0	; select bank0
  9954  15E2  01A7               	clrf	OLED_print_xy@row
  9955  15E3  0AA7               	incf	OLED_print_xy@row,f
  9956  15E4  3059               	movlw	low _str
  9957  15E5  00A8               	movwf	OLED_print_xy@s
  9958  15E6  3001               	movlw	high _str
  9959  15E7  00A9               	movwf	OLED_print_xy@s+1
  9960  15E8  3018               	movlw	24
  9961  15E9  31A0  20CE  3194   	fcall	_OLED_print_xy
  9962                           
  9963                           ;menu.c: 52:  OLED_print_xy(2 * 12 +5, 1, "\001      ");
  9964  15EC  0140               	movlb	0	; select bank0
  9965  15ED  01A7               	clrf	OLED_print_xy@row
  9966  15EE  0AA7               	incf	OLED_print_xy@row,f
  9967  15EF  3052               	movlw	low (STR_4| (0+32768))
  9968  15F0  00A8               	movwf	OLED_print_xy@s
  9969  15F1  30B1               	movlw	high (STR_4| (0+32768))
  9970  15F2  00A9               	movwf	OLED_print_xy@s+1
  9971  15F3  301D               	movlw	29
  9972  15F4  31A0  20CE  3194   	fcall	_OLED_print_xy
  9973                           
  9974                           ;menu.c: 53:  ftoa(str, data->voltage, 4, 1);
  9975  15F7  0141               	movlb	1	; select bank1
  9976  15F8  0834               	movf	statusView@data^(0+128),w
  9977  15F9  0086               	movwf	6
  9978  15FA  0835               	movf	(statusView@data+1)^(0+128),w
  9979  15FB  0087               	movwf	7
  9980  15FC  3154               	addfsr 1,20
  9981  15FD  3F40               	moviw [0]fsr1
  9982  15FE  00A5               	movwf	ftoa@fValue^(0+128)
  9983  15FF  3F41               	moviw [1]fsr1
  9984  1600  00A6               	movwf	(ftoa@fValue+1)^(0+128)
  9985  1601  3F42               	moviw [2]fsr1
  9986  1602  00A7               	movwf	(ftoa@fValue+2)^(0+128)
  9987  1603  3F43               	moviw [3]fsr1
  9988  1604  00A8               	movwf	(ftoa@fValue+3)^(0+128)
  9989  1605  3004               	movlw	4
  9990  1606  00B6               	movwf	??_statusView^(0+128)
  9991  1607  0836               	movf	??_statusView^(0+128),w
  9992  1608  00A9               	movwf	ftoa@width^(0+128)
  9993  1609  01AA               	clrf	ftoa@prec^(0+128)
  9994  160A  0AAA               	incf	ftoa@prec^(0+128),f
  9995  160B  3059               	movlw	(low (_str| (0+256)))& (0+255)
  9996  160C  319E  268B  3194   	fcall	_ftoa
  9997                           
  9998                           ;menu.c: 54:  OLED_print_xy(3 * 12, 1, str);
  9999  160F  0140               	movlb	0	; select bank0
 10000  1610  01A7               	clrf	OLED_print_xy@row
 10001  1611  0AA7               	incf	OLED_print_xy@row,f
 10002  1612  3059               	movlw	low _str
 10003  1613  00A8               	movwf	OLED_print_xy@s
 10004  1614  3001               	movlw	high _str
 10005  1615  00A9               	movwf	OLED_print_xy@s+1
 10006  1616  3024               	movlw	36
 10007  1617  31A0  20CE  3194   	fcall	_OLED_print_xy
 10008                           
 10009                           ;menu.c: 55:  OLED_print_xy(3 * 12 +4, 1, "V  ");
 10010  161A  0140               	movlb	0	; select bank0
 10011  161B  01A7               	clrf	OLED_print_xy@row
 10012  161C  0AA7               	incf	OLED_print_xy@row,f
 10013  161D  30A3               	movlw	low (STR_7| (0+32768))
 10014  161E  00A8               	movwf	OLED_print_xy@s
 10015  161F  30B1               	movlw	high (STR_7| (0+32768))
 10016  1620  00A9               	movwf	OLED_print_xy@s+1
 10017  1621  3028               	movlw	40
 10018  1622  31A0  20CE  3194   	fcall	_OLED_print_xy
 10019                           
 10020                           ;menu.c: 56:  ftoa(str, data->power, 4, 1);
 10021  1625  0141               	movlb	1	; select bank1
 10022  1626  0834               	movf	statusView@data^(0+128),w
 10023  1627  0086               	movwf	6
 10024  1628  0835               	movf	(statusView@data+1)^(0+128),w
 10025  1629  0087               	movwf	7
 10026  162A  315C               	addfsr 1,28
 10027  162B  3F40               	moviw [0]fsr1
 10028  162C  00A5               	movwf	ftoa@fValue^(0+128)
 10029  162D  3F41               	moviw [1]fsr1
 10030  162E  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 10031  162F  3F42               	moviw [2]fsr1
 10032  1630  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 10033  1631  3F43               	moviw [3]fsr1
 10034  1632  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 10035  1633  3004               	movlw	4
 10036  1634  00B6               	movwf	??_statusView^(0+128)
 10037  1635  0836               	movf	??_statusView^(0+128),w
 10038  1636  00A9               	movwf	ftoa@width^(0+128)
 10039  1637  01AA               	clrf	ftoa@prec^(0+128)
 10040  1638  0AAA               	incf	ftoa@prec^(0+128),f
 10041  1639  3059               	movlw	(low (_str| (0+256)))& (0+255)
 10042  163A  319E  268B  3194   	fcall	_ftoa
 10043                           
 10044                           ;menu.c: 57:  OLED_print_xy(3 * 12 +7, 1, str);
 10045  163D  0140               	movlb	0	; select bank0
 10046  163E  01A7               	clrf	OLED_print_xy@row
 10047  163F  0AA7               	incf	OLED_print_xy@row,f
 10048  1640  3059               	movlw	low _str
 10049  1641  00A8               	movwf	OLED_print_xy@s
 10050  1642  3001               	movlw	high _str
 10051  1643  00A9               	movwf	OLED_print_xy@s+1
 10052  1644  302B               	movlw	43
 10053  1645  31A0  20CE  3194   	fcall	_OLED_print_xy
 10054                           
 10055                           ;menu.c: 58:  OLED_print_xy(3 * 12 +11, 1, "W");
 10056  1648  0140               	movlb	0	; select bank0
 10057  1649  01A7               	clrf	OLED_print_xy@row
 10058  164A  0AA7               	incf	OLED_print_xy@row,f
 10059  164B  30BC               	movlw	low (STR_8| (0+32768))
 10060  164C  00A8               	movwf	OLED_print_xy@s
 10061  164D  30B1               	movlw	high (STR_8| (0+32768))
 10062  164E  00A9               	movwf	OLED_print_xy@s+1
 10063  164F  302F               	movlw	47
 10064  1650  31A0  20CE  3194   	fcall	_OLED_print_xy
 10065                           
 10066                           ;menu.c: 59:  if (data->status.SENSOR_OK)
 10067  1653  0141               	movlb	1	; select bank1
 10068  1654  0834               	movf	statusView@data^(0+128),w
 10069  1655  3E2C               	addlw	44
 10070  1656  0086               	movwf	6
 10071  1657  3000               	movlw	0
 10072  1658  3D35               	addwfc	(statusView@data+1)^(0+128),w
 10073  1659  0087               	movwf	7
 10074  165A  1C81               	btfss	1,1
 10075  165B  2E69               	goto	l4508
 10076                           
 10077                           ;menu.c: 60:   page = paging(page, 4);
 10078  165C  3004               	movlw	4
 10079  165D  00B6               	movwf	??_statusView^(0+128)
 10080  165E  0836               	movf	??_statusView^(0+128),w
 10081  165F  0140               	movlb	0	; select bank0
 10082  1660  00A7               	movwf	paging@lastPage
 10083  1661  0141               	movlb	1	; select bank1
 10084  1662  0867               	movf	statusView@page^(0+128),w
 10085  1663  31A4  24C1         	fcall	_paging
 10086  1665  0141               	movlb	1	; select bank1
 10087  1666  00B7               	movwf	(??_statusView+1)^(0+128)
 10088  1667  0837               	movf	(??_statusView+1)^(0+128),w
 10089  1668  00E7               	movwf	statusView@page^(0+128)
 10090  1669                     l4508:	
 10091                           
 10092                           ;menu.c: 61:  return page;
 10093  1669  0867               	movf	statusView@page^(0+128),w
 10094  166A  0008               	return
 10095  166B                     __end_of_statusView:	
 10096                           
 10097                           	psect	text13
 10098  2F57                     __ptext13:	
 10099 ;; *************** function _getPB *****************
 10100 ;; Defined at:
 10101 ;;		line 86 in file "inputs.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;		None
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;  ret             1    1[BANK0 ] enum E7869
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      enum E7869
 10108 ;; Registers used:
 10109 ;;		wreg, status,2, status,0
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10119 ;;Total ram usage:        2 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    3
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_setOutputPower
 10126 ;;		_menu
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           
 10131                           ;psect for function _getPB
 10132  2F57                     _getPB:	
 10133                           
 10134                           ;inputs.c: 88:  enum e_buttonPress ret = pbState;
 10135                           
 10136                           ;incstack = 0
 10137                           ; Regs used in _getPB: [wreg+status,2+status,0]
 10138  2F57  087D               	movf	_pbState,w	;volatile
 10139  2F58  0140               	movlb	0	; select bank0
 10140  2F59  00A0               	movwf	??_getPB
 10141  2F5A  0820               	movf	??_getPB,w
 10142  2F5B  00A1               	movwf	getPB@ret
 10143                           
 10144                           ;inputs.c: 89:  if (pbState != PB_WAIT)
 10145  2F5C  3004               	movlw	4
 10146  2F5D  067D               	xorwf	_pbState,w	;volatile
 10147  2F5E  1D03               	btfss	3,2
 10148                           
 10149                           ;inputs.c: 90:   pbState = PB_NONE;
 10150  2F5F  01FD               	clrf	_pbState	;volatile
 10151                           
 10152                           ;inputs.c: 91:  return ret;
 10153  2F60  0821               	movf	getPB@ret,w
 10154  2F61  0008               	return
 10155  2F62                     __end_of_getPB:	
 10156                           
 10157                           	psect	text14
 10158  1AA5                     __ptext14:	
 10159 ;; *************** function _spinInput *****************
 10160 ;; Defined at:
 10161 ;;		line 97 in file "inputs.c"
 10162 ;; Parameters:    Size  Location     Type
 10163 ;;  input           2    4[BANK1 ] PTR float 
 10164 ;;		 -> data.chData(128), data(173), 
 10165 ;;  min             4    6[BANK1 ] float 
 10166 ;;  max             4   10[BANK1 ] float 
 10167 ;;  step            4   14[BANK1 ] float 
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;  dir             1   19[BANK1 ] enum E7865
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  1    wreg      void 
 10172 ;; Registers used:
 10173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10174 ;; Tracked objects:
 10175 ;;		On entry : 0/0
 10176 ;;		On exit  : 0/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10179 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10180 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10181 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10182 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10183 ;;Total ram usage:       16 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    5
 10186 ;; This function calls:
 10187 ;;		___fladd
 10188 ;;		___flge
 10189 ;;		___flsub
 10190 ;;		_getRotDir
 10191 ;; This function is called by:
 10192 ;;		_setOutputPower
 10193 ;;		_setLensDia
 10194 ;;		_setDPOffset
 10195 ;;		_setSkyTemp
 10196 ;;		_setFudgeFactor
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           
 10201                           ;psect for function _spinInput
 10202  1AA5                     _spinInput:	
 10203                           
 10204                           ;inputs.c: 97: void spinInput(float *input, float min, float max, float step);inputs.c: 
      +                          98: {;inputs.c: 99:  enum e_direction dir = getRotDir();
 10205                           
 10206                           ;incstack = 0
 10207                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10208  1AA5  31AF  274C  319A   	fcall	_getRotDir
 10209  1AA8  0141               	movlb	1	; select bank1
 10210  1AA9  00B2               	movwf	??_spinInput^(0+128)
 10211  1AAA  0832               	movf	??_spinInput^(0+128),w
 10212  1AAB  00B3               	movwf	spinInput@dir^(0+128)
 10213                           
 10214                           ;inputs.c: 101:  if ((dir == ROT_CCW) && (*input > min))
 10215  1AAC  3002               	movlw	2
 10216  1AAD  0633               	xorwf	spinInput@dir^(0+128),w
 10217  1AAE  1D03               	btfss	3,2
 10218  1AAF  2B01               	goto	l4268
 10219  1AB0  0829               	movf	(spinInput@min+3)^(0+128),w
 10220  1AB1  0140               	movlb	0	; select bank0
 10221  1AB2  00EB               	movwf	___flge@ff1+3
 10222  1AB3  0141               	movlb	1	; select bank1
 10223  1AB4  0828               	movf	(spinInput@min+2)^(0+128),w
 10224  1AB5  0140               	movlb	0	; select bank0
 10225  1AB6  00EA               	movwf	___flge@ff1+2
 10226  1AB7  0141               	movlb	1	; select bank1
 10227  1AB8  0827               	movf	(spinInput@min+1)^(0+128),w
 10228  1AB9  0140               	movlb	0	; select bank0
 10229  1ABA  00E9               	movwf	___flge@ff1+1
 10230  1ABB  0141               	movlb	1	; select bank1
 10231  1ABC  0826               	movf	spinInput@min^(0+128),w
 10232  1ABD  0140               	movlb	0	; select bank0
 10233  1ABE  00E8               	movwf	___flge@ff1
 10234  1ABF  0141               	movlb	1	; select bank1
 10235  1AC0  0824               	movf	spinInput@input^(0+128),w
 10236  1AC1  0086               	movwf	6
 10237  1AC2  0825               	movf	(spinInput@input+1)^(0+128),w
 10238  1AC3  0087               	movwf	7
 10239  1AC4  3F40               	moviw [0]fsr1
 10240  1AC5  0140               	movlb	0	; select bank0
 10241  1AC6  00EC               	movwf	___flge@ff2
 10242  1AC7  3F41               	moviw [1]fsr1
 10243  1AC8  00ED               	movwf	___flge@ff2+1
 10244  1AC9  3F42               	moviw [2]fsr1
 10245  1ACA  00EE               	movwf	___flge@ff2+2
 10246  1ACB  3F43               	moviw [3]fsr1
 10247  1ACC  00EF               	movwf	___flge@ff2+3
 10248  1ACD  3199  21F7  319A   	fcall	___flge
 10249  1AD0  1803               	btfsc	3,0
 10250  1AD1  2B01               	goto	l4268
 10251                           
 10252                           ;inputs.c: 102:   *input -= step;
 10253  1AD2  0141               	movlb	1	; select bank1
 10254  1AD3  0831               	movf	(spinInput@step+3)^(0+128),w
 10255  1AD4  0140               	movlb	0	; select bank0
 10256  1AD5  00E5               	movwf	___flsub@a+3
 10257  1AD6  0141               	movlb	1	; select bank1
 10258  1AD7  0830               	movf	(spinInput@step+2)^(0+128),w
 10259  1AD8  0140               	movlb	0	; select bank0
 10260  1AD9  00E4               	movwf	___flsub@a+2
 10261  1ADA  0141               	movlb	1	; select bank1
 10262  1ADB  082F               	movf	(spinInput@step+1)^(0+128),w
 10263  1ADC  0140               	movlb	0	; select bank0
 10264  1ADD  00E3               	movwf	___flsub@a+1
 10265  1ADE  0141               	movlb	1	; select bank1
 10266  1ADF  082E               	movf	spinInput@step^(0+128),w
 10267  1AE0  0140               	movlb	0	; select bank0
 10268  1AE1  00E2               	movwf	___flsub@a
 10269  1AE2  0141               	movlb	1	; select bank1
 10270  1AE3  0824               	movf	spinInput@input^(0+128),w
 10271  1AE4  0086               	movwf	6
 10272  1AE5  0825               	movf	(spinInput@input+1)^(0+128),w
 10273  1AE6  0087               	movwf	7
 10274  1AE7  3F40               	moviw [0]fsr1
 10275  1AE8  0140               	movlb	0	; select bank0
 10276  1AE9  00E6               	movwf	___flsub@b
 10277  1AEA  3F41               	moviw [1]fsr1
 10278  1AEB  00E7               	movwf	___flsub@b+1
 10279  1AEC  3F42               	moviw [2]fsr1
 10280  1AED  00E8               	movwf	___flsub@b+2
 10281  1AEE  3F43               	moviw [3]fsr1
 10282  1AEF  00E9               	movwf	___flsub@b+3
 10283  1AF0  31A0  2007         	fcall	___flsub
 10284  1AF2  0141               	movlb	1	; select bank1
 10285  1AF3  0824               	movf	spinInput@input^(0+128),w
 10286  1AF4  0086               	movwf	6
 10287  1AF5  0825               	movf	(spinInput@input+1)^(0+128),w
 10288  1AF6  0087               	movwf	7
 10289  1AF7  0140               	movlb	0	; select bank0
 10290  1AF8  0862               	movf	?___flsub,w
 10291  1AF9  3FC0               	movwi [0]fsr1
 10292  1AFA  0863               	movf	?___flsub+1,w
 10293  1AFB  3FC1               	movwi [1]fsr1
 10294  1AFC  0864               	movf	?___flsub+2,w
 10295  1AFD  3FC2               	movwi [2]fsr1
 10296  1AFE  0865               	movf	?___flsub+3,w
 10297  1AFF  3FC3               	movwi [3]fsr1
 10298  1B00  0008               	return
 10299  1B01                     l4268:	
 10300  1B01  0141               	movlb	1	; select bank1
 10301  1B02  0333               	decf	spinInput@dir^(0+128),w
 10302  1B03  1D03               	btfss	3,2
 10303  1B04  0008               	return
 10304  1B05  0824               	movf	spinInput@input^(0+128),w
 10305  1B06  0086               	movwf	6
 10306  1B07  0825               	movf	(spinInput@input+1)^(0+128),w
 10307  1B08  0087               	movwf	7
 10308  1B09  3F40               	moviw [0]fsr1
 10309  1B0A  0140               	movlb	0	; select bank0
 10310  1B0B  00E8               	movwf	___flge@ff1
 10311  1B0C  3F41               	moviw [1]fsr1
 10312  1B0D  00E9               	movwf	___flge@ff1+1
 10313  1B0E  3F42               	moviw [2]fsr1
 10314  1B0F  00EA               	movwf	___flge@ff1+2
 10315  1B10  3F43               	moviw [3]fsr1
 10316  1B11  00EB               	movwf	___flge@ff1+3
 10317  1B12  0141               	movlb	1	; select bank1
 10318  1B13  082D               	movf	(spinInput@max+3)^(0+128),w
 10319  1B14  0140               	movlb	0	; select bank0
 10320  1B15  00EF               	movwf	___flge@ff2+3
 10321  1B16  0141               	movlb	1	; select bank1
 10322  1B17  082C               	movf	(spinInput@max+2)^(0+128),w
 10323  1B18  0140               	movlb	0	; select bank0
 10324  1B19  00EE               	movwf	___flge@ff2+2
 10325  1B1A  0141               	movlb	1	; select bank1
 10326  1B1B  082B               	movf	(spinInput@max+1)^(0+128),w
 10327  1B1C  0140               	movlb	0	; select bank0
 10328  1B1D  00ED               	movwf	___flge@ff2+1
 10329  1B1E  0141               	movlb	1	; select bank1
 10330  1B1F  082A               	movf	spinInput@max^(0+128),w
 10331  1B20  0140               	movlb	0	; select bank0
 10332  1B21  00EC               	movwf	___flge@ff2
 10333  1B22  3199  21F7  319A   	fcall	___flge
 10334  1B25  1803               	btfsc	3,0
 10335  1B26  0008               	return
 10336                           
 10337                           ;inputs.c: 104:   *input += step;
 10338  1B27  0141               	movlb	1	; select bank1
 10339  1B28  0831               	movf	(spinInput@step+3)^(0+128),w
 10340  1B29  0140               	movlb	0	; select bank0
 10341  1B2A  00D1               	movwf	___fladd@b+3
 10342  1B2B  0141               	movlb	1	; select bank1
 10343  1B2C  0830               	movf	(spinInput@step+2)^(0+128),w
 10344  1B2D  0140               	movlb	0	; select bank0
 10345  1B2E  00D0               	movwf	___fladd@b+2
 10346  1B2F  0141               	movlb	1	; select bank1
 10347  1B30  082F               	movf	(spinInput@step+1)^(0+128),w
 10348  1B31  0140               	movlb	0	; select bank0
 10349  1B32  00CF               	movwf	___fladd@b+1
 10350  1B33  0141               	movlb	1	; select bank1
 10351  1B34  082E               	movf	spinInput@step^(0+128),w
 10352  1B35  0140               	movlb	0	; select bank0
 10353  1B36  00CE               	movwf	___fladd@b
 10354  1B37  0141               	movlb	1	; select bank1
 10355  1B38  0824               	movf	spinInput@input^(0+128),w
 10356  1B39  0086               	movwf	6
 10357  1B3A  0825               	movf	(spinInput@input+1)^(0+128),w
 10358  1B3B  0087               	movwf	7
 10359  1B3C  3F40               	moviw [0]fsr1
 10360  1B3D  0140               	movlb	0	; select bank0
 10361  1B3E  00D2               	movwf	___fladd@a
 10362  1B3F  3F41               	moviw [1]fsr1
 10363  1B40  00D3               	movwf	___fladd@a+1
 10364  1B41  3F42               	moviw [2]fsr1
 10365  1B42  00D4               	movwf	___fladd@a+2
 10366  1B43  3F43               	moviw [3]fsr1
 10367  1B44  00D5               	movwf	___fladd@a+3
 10368  1B45  3189  21D6         	fcall	___fladd
 10369  1B47  0141               	movlb	1	; select bank1
 10370  1B48  0824               	movf	spinInput@input^(0+128),w
 10371  1B49  0086               	movwf	6
 10372  1B4A  0825               	movf	(spinInput@input+1)^(0+128),w
 10373  1B4B  0087               	movwf	7
 10374  1B4C  0140               	movlb	0	; select bank0
 10375  1B4D  084E               	movf	?___fladd,w
 10376  1B4E  3FC0               	movwi [0]fsr1
 10377  1B4F  084F               	movf	?___fladd+1,w
 10378  1B50  3FC1               	movwi [1]fsr1
 10379  1B51  0850               	movf	?___fladd+2,w
 10380  1B52  3FC2               	movwi [2]fsr1
 10381  1B53  0851               	movf	?___fladd+3,w
 10382  1B54  3FC3               	movwi [3]fsr1
 10383  1B55  0008               	return
 10384  1B56                     __end_of_spinInput:	
 10385                           
 10386                           	psect	text15
 10387  2F8B                     __ptext15:	
 10388 ;; *************** function _menuError *****************
 10389 ;; Defined at:
 10390 ;;		line 127 in file "menuhelper.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;		None
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;		None
 10395 ;; Return value:  Size  Location     Type
 10396 ;;                  1    wreg      void 
 10397 ;; Registers used:
 10398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10408 ;;Total ram usage:        0 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    8
 10411 ;; This function calls:
 10412 ;;		_OLED_clearDisplay
 10413 ;;		_OLED_print_xy
 10414 ;;		_OLED_returnHome
 10415 ;; This function is called by:
 10416 ;;		_menu
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           
 10421                           ;psect for function _menuError
 10422  2F8B                     _menuError:	
 10423                           
 10424                           ;menuhelper.c: 129:  OLED_returnHome();
 10425                           
 10426                           ;incstack = 0
 10427                           ; Regs used in _menuError: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10428  2F8B  31A0  2003  31AF   	fcall	_OLED_returnHome
 10429                           
 10430                           ;menuhelper.c: 130:  OLED_clearDisplay();
 10431  2F8E  31AE  26F2  31AF   	fcall	_OLED_clearDisplay
 10432                           
 10433                           ;menuhelper.c: 131:  OLED_print_xy(0, 0, "Menu error");
 10434  2F91  0140               	movlb	0	; select bank0
 10435  2F92  01A7               	clrf	OLED_print_xy@row
 10436  2F93  3012               	movlw	low (STR_61| (0+32768))
 10437  2F94  00A8               	movwf	OLED_print_xy@s
 10438  2F95  30B1               	movlw	high (STR_61| (0+32768))
 10439  2F96  00A9               	movwf	OLED_print_xy@s+1
 10440  2F97  3000               	movlw	0
 10441  2F98  31A0  20CE  31AF   	fcall	_OLED_print_xy
 10442  2F9B                     l579:	
 10443                           ;menuhelper.c: 132:  while(1);
 10444                           
 10445  2F9B  2F9B               	goto	l579
 10446  2F9C                     __end_of_menuError:	
 10447                           
 10448                           	psect	text16
 10449  2003                     __ptext16:	
 10450 ;; *************** function _OLED_returnHome *****************
 10451 ;; Defined at:
 10452 ;;		line 167 in file "oled.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;		None
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;		None
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      void 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0, pclath, cstack
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10470 ;;Total ram usage:        0 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    7
 10473 ;; This function calls:
 10474 ;;		_OLED_command
 10475 ;; This function is called by:
 10476 ;;		_main
 10477 ;;		_menuError
 10478 ;;		_systemCheck
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           
 10483                           ;psect for function _OLED_returnHome
 10484  2003                     _OLED_returnHome:	
 10485                           
 10486                           ;oled.c: 169:  OLED_command(0x02);
 10487                           
 10488                           ;incstack = 0
 10489                           ; Regs used in _OLED_returnHome: [wreg+status,2+status,0+pclath+cstack]
 10490  2003  3002               	movlw	2
 10491  2004  31AF  2718         	fcall	_OLED_command
 10492  2006  0008               	return
 10493  2007                     __end_of_OLED_returnHome:	
 10494                           
 10495                           	psect	text17
 10496  2EF2                     __ptext17:	
 10497 ;; *************** function _OLED_clearDisplay *****************
 10498 ;; Defined at:
 10499 ;;		line 172 in file "oled.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;		None
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;		None
 10504 ;; Return value:  Size  Location     Type
 10505 ;;                  1    wreg      void 
 10506 ;; Registers used:
 10507 ;;		wreg, status,2, status,0, pclath, cstack
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10517 ;;Total ram usage:        0 bytes
 10518 ;; Hardware stack levels used:    1
 10519 ;; Hardware stack levels required when called:    7
 10520 ;; This function calls:
 10521 ;;		_OLED_command
 10522 ;; This function is called by:
 10523 ;;		_main
 10524 ;;		_menuError
 10525 ;;		_systemCheck
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _OLED_clearDisplay
 10531  2EF2                     _OLED_clearDisplay:	
 10532                           
 10533                           ;oled.c: 174:  OLED_command(0x01);
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _OLED_clearDisplay: [wreg+status,2+status,0+pclath+cstack]
 10537  2EF2  3001               	movlw	1
 10538  2EF3  31AF  2718         	fcall	_OLED_command
 10539  2EF5  0008               	return
 10540  2EF6                     __end_of_OLED_clearDisplay:	
 10541                           
 10542                           	psect	text18
 10543  07BC                     __ptext18:	
 10544 ;; *************** function _getStateFunc *****************
 10545 ;; Defined at:
 10546 ;;		line 138 in file "menuhelper.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;  state           1    wreg     enum E7967
 10549 ;; Auto vars:     Size  Location     Type
 10550 ;;  state           1   11[BANK0 ] enum E7967
 10551 ;;  n               1   12[BANK0 ] unsigned char 
 10552 ;; Return value:  Size  Location     Type
 10553 ;;                  2    6[BANK0 ] PTR FTN(PTR struct .,)un
 10554 ;; Registers used:
 10555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10556 ;; Tracked objects:
 10557 ;;		On entry : 0/0
 10558 ;;		On exit  : 0/0
 10559 ;;		Unchanged: 0/0
 10560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10561 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10562 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10563 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10564 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10565 ;;Total ram usage:        7 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; Hardware stack levels required when called:    4
 10568 ;; This function calls:
 10569 ;;		___wmul
 10570 ;; This function is called by:
 10571 ;;		_menu
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           
 10576                           ;psect for function _getStateFunc
 10577  07BC                     _getStateFunc:	
 10578                           
 10579                           ;incstack = 0
 10580                           ; Regs used in _getStateFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10581                           ;getStateFunc@state stored from wreg
 10582  07BC  0140               	movlb	0	; select bank0
 10583  07BD  00AB               	movwf	getStateFunc@state
 10584                           
 10585                           ;menuhelper.c: 138: t_stateFuncPtr getStateFunc(enum e_menuStates state);menuhelper.c: 1
      +                          39: {;menuhelper.c: 140:  uint8_t n;;menuhelper.c: 143:  for(n = 0; n < sizeof(stateFunc
      +                          Tbl)/sizeof(stateFuncTbl[0]); n++) {
 10586  07BE  01AC               	clrf	getStateFunc@n
 10587  07BF                     l4810:	
 10588                           
 10589                           ;menuhelper.c: 144:   if ((stateFuncTbl[n].state == state))
 10590  07BF  082C               	movf	getStateFunc@n,w
 10591  07C0  00A8               	movwf	??_getStateFunc
 10592  07C1  01A9               	clrf	??_getStateFunc+1
 10593  07C2  0828               	movf	??_getStateFunc,w
 10594  07C3  00A0               	movwf	___wmul@multiplier
 10595  07C4  0829               	movf	??_getStateFunc+1,w
 10596  07C5  00A1               	movwf	___wmul@multiplier+1
 10597  07C6  3003               	movlw	3
 10598  07C7  00A2               	movwf	___wmul@multiplicand
 10599  07C8  3000               	movlw	0
 10600  07C9  00A3               	movwf	___wmul@multiplicand+1
 10601  07CA  31AF  27C5  3187   	fcall	___wmul
 10602  07CD  0140               	movlb	0	; select bank0
 10603  07CE  0821               	movf	?___wmul+1,w
 10604  07CF  0085               	movwf	5
 10605  07D0  0820               	movf	?___wmul,w
 10606  07D1  0084               	movwf	4
 10607  07D2  3054               	movlw	low (_stateFuncTbl| (0+32768))
 10608  07D3  0784               	addwf	4,f
 10609  07D4  30A8               	movlw	high (_stateFuncTbl| (0+32768))
 10610  07D5  3D85               	addwfc	5,f
 10611  07D6  0800               	movf	0,w	;code access
 10612  07D7  062B               	xorwf	getStateFunc@state,w
 10613  07D8  1D03               	skipz
 10614  07D9  2FF5               	goto	l4816
 10615                           
 10616                           ;menuhelper.c: 145:    return stateFuncTbl[n].func;
 10617  07DA  082C               	movf	getStateFunc@n,w
 10618  07DB  00A8               	movwf	??_getStateFunc
 10619  07DC  01A9               	clrf	??_getStateFunc+1
 10620  07DD  0828               	movf	??_getStateFunc,w
 10621  07DE  00A0               	movwf	___wmul@multiplier
 10622  07DF  0829               	movf	??_getStateFunc+1,w
 10623  07E0  00A1               	movwf	___wmul@multiplier+1
 10624  07E1  3003               	movlw	3
 10625  07E2  00A2               	movwf	___wmul@multiplicand
 10626  07E3  3000               	movlw	0
 10627  07E4  00A3               	movwf	___wmul@multiplicand+1
 10628  07E5  31AF  27C5         	fcall	___wmul
 10629  07E7  0140               	movlb	0	; select bank0
 10630  07E8  0821               	movf	?___wmul+1,w
 10631  07E9  0085               	movwf	5
 10632  07EA  0820               	movf	?___wmul,w
 10633  07EB  0084               	movwf	4
 10634  07EC  3055               	movlw	low ((_stateFuncTbl+1)| (0+32768))
 10635  07ED  0784               	addwf	4,f
 10636  07EE  30A8               	movlw	high ((_stateFuncTbl+1)| (0+32768))
 10637  07EF  3D85               	addwfc	5,f
 10638  07F0  3F00               	moviw [0]fsr0
 10639  07F1  00A6               	movwf	?_getStateFunc
 10640  07F2  3F01               	moviw [1]fsr0
 10641  07F3  00A7               	movwf	?_getStateFunc+1
 10642  07F4  0008               	return
 10643  07F5                     l4816:	
 10644                           
 10645                           ;menuhelper.c: 146:  }
 10646  07F5  3001               	movlw	1
 10647  07F6  00A8               	movwf	??_getStateFunc
 10648  07F7  0828               	movf	??_getStateFunc,w
 10649  07F8  07AC               	addwf	getStateFunc@n,f
 10650  07F9  3009               	movlw	9
 10651  07FA  022C               	subwf	getStateFunc@n,w
 10652  07FB  1C03               	skipc
 10653  07FC  2FBF               	goto	l4810
 10654                           
 10655                           ;menuhelper.c: 147:  return (t_stateFuncPtr)((void*)0);
 10656  07FD  01A6               	clrf	?_getStateFunc
 10657  07FE  01A7               	clrf	?_getStateFunc+1
 10658  07FF  0008               	return
 10659  0800                     __end_of_getStateFunc:	
 10660                           
 10661                           	psect	text19
 10662  194A                     __ptext19:	
 10663 ;; *************** function _getNextState *****************
 10664 ;; Defined at:
 10665 ;;		line 153 in file "menuhelper.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  state           1    wreg     enum E7967
 10668 ;;  intState        1    6[BANK0 ] unsigned char 
 10669 ;;  pb              1    7[BANK0 ] enum E7869
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  state           1   11[BANK0 ] enum E7967
 10672 ;;  n               1   12[BANK0 ] unsigned char 
 10673 ;; Return value:  Size  Location     Type
 10674 ;;                  1    wreg      char 
 10675 ;; Registers used:
 10676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10677 ;; Tracked objects:
 10678 ;;		On entry : 0/0
 10679 ;;		On exit  : 0/0
 10680 ;;		Unchanged: 0/0
 10681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10682 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10683 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10684 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10685 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10686 ;;Total ram usage:        7 bytes
 10687 ;; Hardware stack levels used:    1
 10688 ;; Hardware stack levels required when called:    4
 10689 ;; This function calls:
 10690 ;;		___wmul
 10691 ;; This function is called by:
 10692 ;;		_menu
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           
 10697                           ;psect for function _getNextState
 10698  194A                     _getNextState:	
 10699                           
 10700                           ;incstack = 0
 10701                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10702                           ;getNextState@state stored from wreg
 10703  194A  0140               	movlb	0	; select bank0
 10704  194B  00AB               	movwf	getNextState@state
 10705                           
 10706                           ;menuhelper.c: 153: int8_t getNextState(enum e_menuStates state, uint8_t intState, enum 
      +                          e_buttonPress pb);menuhelper.c: 154: {;menuhelper.c: 155:  uint8_t n;;menuhelper.c: 158:
      +                            for(n = 0; n < sizeof(nextStateTbl)/sizeof(nextStateTbl[0]); n++) {
 10707  194C  01AC               	clrf	getNextState@n
 10708  194D                     l4834:	
 10709                           
 10710                           ;menuhelper.c: 159:   if ((nextStateTbl[n].state == state)) {
 10711  194D  082C               	movf	getNextState@n,w
 10712  194E  00A8               	movwf	??_getNextState
 10713  194F  01A9               	clrf	??_getNextState+1
 10714  1950  0828               	movf	??_getNextState,w
 10715  1951  00A0               	movwf	___wmul@multiplier
 10716  1952  0829               	movf	??_getNextState+1,w
 10717  1953  00A1               	movwf	___wmul@multiplier+1
 10718  1954  3006               	movlw	6
 10719  1955  00A2               	movwf	___wmul@multiplicand
 10720  1956  3000               	movlw	0
 10721  1957  00A3               	movwf	___wmul@multiplicand+1
 10722  1958  31AF  27C5  3199   	fcall	___wmul
 10723  195B  0140               	movlb	0	; select bank0
 10724  195C  0821               	movf	?___wmul+1,w
 10725  195D  0085               	movwf	5
 10726  195E  0820               	movf	?___wmul,w
 10727  195F  0084               	movwf	4
 10728  1960  3000               	movlw	low (_nextStateTbl| (0+32768))
 10729  1961  0784               	addwf	4,f
 10730  1962  30A8               	movlw	high (_nextStateTbl| (0+32768))
 10731  1963  3D85               	addwfc	5,f
 10732  1964  0800               	movf	0,w	;code access
 10733  1965  062B               	xorwf	getNextState@state,w
 10734  1966  1D03               	skipz
 10735  1967  29ED               	goto	l4860
 10736                           
 10737                           ;menuhelper.c: 161:    if ((nextStateTbl[n].intState == intState) ||
 10738  1968  082C               	movf	getNextState@n,w
 10739  1969  00A8               	movwf	??_getNextState
 10740  196A  01A9               	clrf	??_getNextState+1
 10741  196B  0828               	movf	??_getNextState,w
 10742  196C  00A0               	movwf	___wmul@multiplier
 10743  196D  0829               	movf	??_getNextState+1,w
 10744  196E  00A1               	movwf	___wmul@multiplier+1
 10745  196F  3006               	movlw	6
 10746  1970  00A2               	movwf	___wmul@multiplicand
 10747  1971  3000               	movlw	0
 10748  1972  00A3               	movwf	___wmul@multiplicand+1
 10749  1973  31AF  27C5  3199   	fcall	___wmul
 10750  1976  0140               	movlb	0	; select bank0
 10751  1977  0821               	movf	?___wmul+1,w
 10752  1978  0085               	movwf	5
 10753  1979  0820               	movf	?___wmul,w
 10754  197A  0084               	movwf	4
 10755  197B  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 10756  197C  0784               	addwf	4,f
 10757  197D  30A8               	movlw	high ((_nextStateTbl+1)| (0+32768))
 10758  197E  3D85               	addwfc	5,f
 10759  197F  0800               	movf	0,w	;code access
 10760  1980  0626               	xorwf	getNextState@intState,w
 10761  1981  1903               	skipnz
 10762  1982  299E               	goto	l4840
 10763  1983  082C               	movf	getNextState@n,w
 10764  1984  00A8               	movwf	??_getNextState
 10765  1985  01A9               	clrf	??_getNextState+1
 10766  1986  0828               	movf	??_getNextState,w
 10767  1987  00A0               	movwf	___wmul@multiplier
 10768  1988  0829               	movf	??_getNextState+1,w
 10769  1989  00A1               	movwf	___wmul@multiplier+1
 10770  198A  3006               	movlw	6
 10771  198B  00A2               	movwf	___wmul@multiplicand
 10772  198C  3000               	movlw	0
 10773  198D  00A3               	movwf	___wmul@multiplicand+1
 10774  198E  31AF  27C5  3199   	fcall	___wmul
 10775  1991  0140               	movlb	0	; select bank0
 10776  1992  0821               	movf	?___wmul+1,w
 10777  1993  0085               	movwf	5
 10778  1994  0820               	movf	?___wmul,w
 10779  1995  0084               	movwf	4
 10780  1996  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 10781  1997  0784               	addwf	4,f
 10782  1998  30A8               	movlw	high ((_nextStateTbl+1)| (0+32768))
 10783  1999  3D85               	addwfc	5,f
 10784  199A  0012               	moviw fsr0++
 10785  199B  3AFF               	xorlw	255
 10786  199C  1D03               	btfss	3,2
 10787  199D  29ED               	goto	l4860
 10788  199E                     l4840:	
 10789                           
 10790                           ;menuhelper.c: 162:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 164:     if (
      +                          pb == PB_SHORT)
 10791  199E  0327               	decf	getNextState@pb,w
 10792  199F  1D03               	btfss	3,2
 10793  19A0  29B9               	goto	l4848
 10794                           
 10795                           ;menuhelper.c: 165:      return nextStateTbl[n].pbShort;
 10796  19A1  082C               	movf	getNextState@n,w
 10797  19A2  00A8               	movwf	??_getNextState
 10798  19A3  01A9               	clrf	??_getNextState+1
 10799  19A4  0828               	movf	??_getNextState,w
 10800  19A5  00A0               	movwf	___wmul@multiplier
 10801  19A6  0829               	movf	??_getNextState+1,w
 10802  19A7  00A1               	movwf	___wmul@multiplier+1
 10803  19A8  3006               	movlw	6
 10804  19A9  00A2               	movwf	___wmul@multiplicand
 10805  19AA  3000               	movlw	0
 10806  19AB  00A3               	movwf	___wmul@multiplicand+1
 10807  19AC  31AF  27C5         	fcall	___wmul
 10808  19AE  0140               	movlb	0	; select bank0
 10809  19AF  0821               	movf	?___wmul+1,w
 10810  19B0  0085               	movwf	5
 10811  19B1  0820               	movf	?___wmul,w
 10812  19B2  0084               	movwf	4
 10813  19B3  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 10814  19B4  0784               	addwf	4,f
 10815  19B5  30A8               	movlw	high ((_nextStateTbl+2)| (0+32768))
 10816  19B6  3D85               	addwfc	5,f
 10817  19B7  0800               	movf	0,w	;code access
 10818  19B8  0008               	return
 10819  19B9                     l4848:	
 10820  19B9  3002               	movlw	2
 10821  19BA  0627               	xorwf	getNextState@pb,w
 10822  19BB  1D03               	btfss	3,2
 10823  19BC  29D5               	goto	l4856
 10824                           
 10825                           ;menuhelper.c: 167:      return nextStateTbl[n].pbLong;
 10826  19BD  082C               	movf	getNextState@n,w
 10827  19BE  00A8               	movwf	??_getNextState
 10828  19BF  01A9               	clrf	??_getNextState+1
 10829  19C0  0828               	movf	??_getNextState,w
 10830  19C1  00A0               	movwf	___wmul@multiplier
 10831  19C2  0829               	movf	??_getNextState+1,w
 10832  19C3  00A1               	movwf	___wmul@multiplier+1
 10833  19C4  3006               	movlw	6
 10834  19C5  00A2               	movwf	___wmul@multiplicand
 10835  19C6  3000               	movlw	0
 10836  19C7  00A3               	movwf	___wmul@multiplicand+1
 10837  19C8  31AF  27C5         	fcall	___wmul
 10838  19CA  0140               	movlb	0	; select bank0
 10839  19CB  0821               	movf	?___wmul+1,w
 10840  19CC  0085               	movwf	5
 10841  19CD  0820               	movf	?___wmul,w
 10842  19CE  0084               	movwf	4
 10843  19CF  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 10844  19D0  0784               	addwf	4,f
 10845  19D1  30A8               	movlw	high ((_nextStateTbl+3)| (0+32768))
 10846  19D2  3D85               	addwfc	5,f
 10847  19D3  0800               	movf	0,w	;code access
 10848  19D4  0008               	return
 10849  19D5                     l4856:	
 10850                           
 10851                           ;menuhelper.c: 169:      return nextStateTbl[n].noAction;
 10852  19D5  082C               	movf	getNextState@n,w
 10853  19D6  00A8               	movwf	??_getNextState
 10854  19D7  01A9               	clrf	??_getNextState+1
 10855  19D8  0828               	movf	??_getNextState,w
 10856  19D9  00A0               	movwf	___wmul@multiplier
 10857  19DA  0829               	movf	??_getNextState+1,w
 10858  19DB  00A1               	movwf	___wmul@multiplier+1
 10859  19DC  3006               	movlw	6
 10860  19DD  00A2               	movwf	___wmul@multiplicand
 10861  19DE  3000               	movlw	0
 10862  19DF  00A3               	movwf	___wmul@multiplicand+1
 10863  19E0  31AF  27C5         	fcall	___wmul
 10864  19E2  0140               	movlb	0	; select bank0
 10865  19E3  0821               	movf	?___wmul+1,w
 10866  19E4  0085               	movwf	5
 10867  19E5  0820               	movf	?___wmul,w
 10868  19E6  0084               	movwf	4
 10869  19E7  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 10870  19E8  0784               	addwf	4,f
 10871  19E9  30A8               	movlw	high ((_nextStateTbl+5)| (0+32768))
 10872  19EA  3D85               	addwfc	5,f
 10873  19EB  0800               	movf	0,w	;code access
 10874  19EC  0008               	return
 10875  19ED                     l4860:	
 10876                           
 10877                           ;menuhelper.c: 172:  }
 10878  19ED  3001               	movlw	1
 10879  19EE  00A8               	movwf	??_getNextState
 10880  19EF  0828               	movf	??_getNextState,w
 10881  19F0  07AC               	addwf	getNextState@n,f
 10882  19F1  300E               	movlw	14
 10883  19F2  022C               	subwf	getNextState@n,w
 10884  19F3  1C03               	skipc
 10885  19F4  294D               	goto	l4834
 10886                           
 10887                           ;menuhelper.c: 173:  return -1;
 10888  19F5  30FF               	movlw	255
 10889  19F6  0008               	return
 10890  19F7                     __end_of_getNextState:	
 10891                           
 10892                           	psect	text20
 10893  2F9C                     __ptext20:	
 10894 ;; *************** function ___bmul *****************
 10895 ;; Defined at:
 10896 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;  multiplier      1    wreg     unsigned char 
 10899 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 10900 ;; Auto vars:     Size  Location     Type
 10901 ;;  multiplier      1    3[BANK0 ] unsigned char 
 10902 ;;  product         1    2[BANK0 ] unsigned char 
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  1    wreg      unsigned char 
 10905 ;; Registers used:
 10906 ;;		wreg, status,2, status,0
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10912 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10915 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10916 ;;Total ram usage:        4 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    3
 10919 ;; This function calls:
 10920 ;;		Nothing
 10921 ;; This function is called by:
 10922 ;;		_channelView
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           
 10927                           ;psect for function ___bmul
 10928  2F9C                     ___bmul:	
 10929                           
 10930                           ;incstack = 0
 10931                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10932                           ;___bmul@multiplier stored from wreg
 10933  2F9C  0140               	movlb	0	; select bank0
 10934  2F9D  00A3               	movwf	___bmul@multiplier
 10935  2F9E  01A2               	clrf	___bmul@product
 10936  2F9F                     l4356:	
 10937  2F9F  1C23               	btfss	___bmul@multiplier,0
 10938  2FA0  2FA5               	goto	l4360
 10939  2FA1  0820               	movf	___bmul@multiplicand,w
 10940  2FA2  00A1               	movwf	??___bmul
 10941  2FA3  0821               	movf	??___bmul,w
 10942  2FA4  07A2               	addwf	___bmul@product,f
 10943  2FA5                     l4360:	
 10944  2FA5  1003               	clrc
 10945  2FA6  0DA0               	rlf	___bmul@multiplicand,f
 10946  2FA7  1003               	clrc
 10947  2FA8  0CA3               	rrf	___bmul@multiplier,f
 10948  2FA9  0823               	movf	___bmul@multiplier,w
 10949  2FAA  1D03               	btfss	3,2
 10950  2FAB  2F9F               	goto	l4356
 10951  2FAC  0822               	movf	___bmul@product,w
 10952  2FAD  0008               	return
 10953  2FAE                     __end_of___bmul:	
 10954                           
 10955                           	psect	text21
 10956  2100                     __ptext21:	
 10957 ;; *************** function _returnToPage *****************
 10958 ;; Defined at:
 10959 ;;		line 221 in file "menuhelper.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;  page            1    wreg     unsigned char 
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  page            1    9[BANK0 ] unsigned char 
 10964 ;;  n               1   10[BANK0 ] unsigned char 
 10965 ;; Return value:  Size  Location     Type
 10966 ;;                  1    wreg      void 
 10967 ;; Registers used:
 10968 ;;		wreg, status,2, status,0, pclath, cstack
 10969 ;; Tracked objects:
 10970 ;;		On entry : 0/0
 10971 ;;		On exit  : 0/0
 10972 ;;		Unchanged: 0/0
 10973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10977 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10978 ;;Total ram usage:        4 bytes
 10979 ;; Hardware stack levels used:    1
 10980 ;; Hardware stack levels required when called:    7
 10981 ;; This function calls:
 10982 ;;		_OLED_command
 10983 ;;		___wmul
 10984 ;; This function is called by:
 10985 ;;		_statusView
 10986 ;;		_channelView
 10987 ;;		_channelSetup
 10988 ;;		_setOutputPower
 10989 ;;		_setLensDia
 10990 ;;		_setup
 10991 ;;		_setDPOffset
 10992 ;;		_setSkyTemp
 10993 ;;		_setFudgeFactor
 10994 ;; This function uses a non-reentrant model
 10995 ;;
 10996                           
 10997                           
 10998                           ;psect for function _returnToPage
 10999  2100                     _returnToPage:	
 11000                           
 11001                           ;incstack = 0
 11002                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 11003                           ;returnToPage@page stored from wreg
 11004  2100  0140               	movlb	0	; select bank0
 11005  2101  00A9               	movwf	returnToPage@page
 11006                           
 11007                           ;menuhelper.c: 221: void returnToPage(uint8_t page);menuhelper.c: 222: {;menuhelper.c: 2
      +                          23:  uint8_t n;;menuhelper.c: 225:  if (! g_updateScreen)
 11008  2102  0141               	movlb	1	; select bank1
 11009  2103  086F               	movf	_g_updateScreen^(0+128),w
 11010  2104  1903               	btfsc	3,2
 11011  2105  0008               	return
 11012                           
 11013                           ;menuhelper.c: 227:  OLED_command(0x01);
 11014  2106  3001               	movlw	1
 11015  2107  31AF  2718  31A1   	fcall	_OLED_command
 11016                           
 11017                           ;menuhelper.c: 228:  OLED_command(0x02);
 11018  210A  3002               	movlw	2
 11019  210B  31AF  2718  31A1   	fcall	_OLED_command
 11020                           
 11021                           ;menuhelper.c: 229:  for(n = 0; n < 12 * page; n++) {
 11022  210E  0140               	movlb	0	; select bank0
 11023  210F  01AA               	clrf	returnToPage@n
 11024  2110                     l4286:	
 11025  2110  0829               	movf	returnToPage@page,w
 11026  2111  00A7               	movwf	??_returnToPage
 11027  2112  01A8               	clrf	??_returnToPage+1
 11028  2113  0827               	movf	??_returnToPage,w
 11029  2114  00A0               	movwf	___wmul@multiplier
 11030  2115  0828               	movf	??_returnToPage+1,w
 11031  2116  00A1               	movwf	___wmul@multiplier+1
 11032  2117  300C               	movlw	12
 11033  2118  00A2               	movwf	___wmul@multiplicand
 11034  2119  3000               	movlw	0
 11035  211A  00A3               	movwf	___wmul@multiplicand+1
 11036  211B  31AF  27C5  31A1   	fcall	___wmul
 11037  211E  0140               	movlb	0	; select bank0
 11038  211F  0821               	movf	?___wmul+1,w
 11039  2120  3A80               	xorlw	128
 11040  2121  3C80               	sublw	128
 11041  2122  1D03               	skipz
 11042  2123  2926               	goto	u5005
 11043  2124  0820               	movf	?___wmul,w
 11044  2125  022A               	subwf	returnToPage@n,w
 11045  2126                     u5005:	
 11046  2126  1803               	btfsc	3,0
 11047  2127  0008               	return
 11048                           
 11049                           ;menuhelper.c: 230:   OLED_command(0x10 | 0x08 | 0x00);
 11050  2128  3018               	movlw	24
 11051  2129  31AF  2718  31A1   	fcall	_OLED_command
 11052                           
 11053                           ;menuhelper.c: 231:  }
 11054  212C  3001               	movlw	1
 11055  212D  0140               	movlb	0	; select bank0
 11056  212E  00A7               	movwf	??_returnToPage
 11057  212F  0827               	movf	??_returnToPage,w
 11058  2130  07AA               	addwf	returnToPage@n,f
 11059  2131  2910               	goto	l4286
 11060  2132                     __end_of_returnToPage:	
 11061                           
 11062                           	psect	text22
 11063  24C1                     __ptext22:	
 11064 ;; *************** function _paging *****************
 11065 ;; Defined at:
 11066 ;;		line 180 in file "menuhelper.c"
 11067 ;; Parameters:    Size  Location     Type
 11068 ;;  currentPage     1    wreg     unsigned char 
 11069 ;;  lastPage        1    7[BANK0 ] const unsigned char 
 11070 ;; Auto vars:     Size  Location     Type
 11071 ;;  currentPage     1   10[BANK0 ] unsigned char 
 11072 ;;  n               1   12[BANK0 ] unsigned char 
 11073 ;;  dir             1   11[BANK0 ] enum E7865
 11074 ;; Return value:  Size  Location     Type
 11075 ;;                  1    wreg      unsigned char 
 11076 ;; Registers used:
 11077 ;;		wreg, status,2, status,0, pclath, cstack
 11078 ;; Tracked objects:
 11079 ;;		On entry : 0/0
 11080 ;;		On exit  : 0/0
 11081 ;;		Unchanged: 0/0
 11082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11083 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11084 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11086 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11087 ;;Total ram usage:        6 bytes
 11088 ;; Hardware stack levels used:    1
 11089 ;; Hardware stack levels required when called:    8
 11090 ;; This function calls:
 11091 ;;		_OLED_scrollDisplayLeft
 11092 ;;		_OLED_scrollDisplayRight
 11093 ;;		_getRotDir
 11094 ;; This function is called by:
 11095 ;;		_statusView
 11096 ;;		_channelView
 11097 ;;		_channelSetup
 11098 ;;		_setup
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           
 11103                           ;psect for function _paging
 11104  24C1                     _paging:	
 11105                           
 11106                           ;incstack = 0
 11107                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 11108                           ;paging@currentPage stored from wreg
 11109  24C1  0140               	movlb	0	; select bank0
 11110  24C2  00AA               	movwf	paging@currentPage
 11111                           
 11112                           ;menuhelper.c: 180: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 181: {;menuhelper.c: 182:  uint8_t n;;menuhelper.c: 183:  enum e_direction dir;;me
      +                          nuhelper.c: 184:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 187:  PIE0bi
      +                          ts.IOCIE = 0;
 11113  24C3  014E               	movlb	14	; select bank14
 11114  24C4  1216               	bcf	22,4	;volatile
 11115                           
 11116                           ;menuhelper.c: 189:  dir = getRotDir();
 11117  24C5  31AF  274C  31A4   	fcall	_getRotDir
 11118  24C8  0140               	movlb	0	; select bank0
 11119  24C9  00A8               	movwf	??_paging
 11120  24CA  0828               	movf	??_paging,w
 11121  24CB  00AB               	movwf	paging@dir
 11122                           
 11123                           ;menuhelper.c: 192:  if (dir == lastDir) {
 11124  24CC  082B               	movf	paging@dir,w
 11125  24CD  0141               	movlb	1	; select bank1
 11126  24CE  0662               	xorwf	paging@lastDir^(0+128),w
 11127  24CF  1D03               	skipz
 11128  24D0  2D21               	goto	l4334
 11129                           
 11130                           ;menuhelper.c: 194:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 11131  24D1  0140               	movlb	0	; select bank0
 11132  24D2  032B               	decf	paging@dir,w
 11133  24D3  1D03               	btfss	3,2
 11134  24D4  2D01               	goto	l4314
 11135  24D5  0827               	movf	paging@lastPage,w
 11136  24D6  3EFF               	addlw	255
 11137  24D7  00A8               	movwf	??_paging
 11138  24D8  30FF               	movlw	255
 11139  24D9  1803               	skipnc
 11140  24DA  3000               	movlw	0
 11141  24DB  00A9               	movwf	??_paging+1
 11142  24DC  0829               	movf	??_paging+1,w
 11143  24DD  3A80               	xorlw	128
 11144  24DE  3C80               	sublw	128
 11145  24DF  1D03               	skipz
 11146  24E0  2CE3               	goto	u5035
 11147  24E1  0828               	movf	??_paging,w
 11148  24E2  022A               	subwf	paging@currentPage,w
 11149  24E3                     u5035:	
 11150  24E3  1803               	skipnc
 11151  24E4  2D01               	goto	l4314
 11152                           
 11153                           ;menuhelper.c: 195:    currentPage++;
 11154  24E5  3001               	movlw	1
 11155  24E6  0140               	movlb	0	; select bank0
 11156  24E7  00A8               	movwf	??_paging
 11157  24E8  0828               	movf	??_paging,w
 11158  24E9  07AA               	addwf	paging@currentPage,f
 11159                           
 11160                           ;menuhelper.c: 196:    for(n = 0; n < 12; n++) {
 11161  24EA  01AC               	clrf	paging@n
 11162  24EB                     l4306:	
 11163                           
 11164                           ;menuhelper.c: 197:     OLED_scrollDisplayLeft();
 11165  24EB  31AE  26EA  31A4   	fcall	_OLED_scrollDisplayLeft
 11166                           
 11167                           ;menuhelper.c: 198:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 11168  24EE  301A               	movlw	26
 11169  24EF  0140               	movlb	0	; select bank0
 11170  24F0  00A8               	movwf	??_paging
 11171  24F1  30F8               	movlw	248
 11172  24F2                     u6937:	
 11173  24F2  0B89               	decfsz	9,f
 11174  24F3  2CF2               	goto	u6937
 11175  24F4  0BA8               	decfsz	??_paging,f
 11176  24F5  2CF2               	goto	u6937
 11177  24F6  0000               	nop
 11178                           
 11179                           ;menuhelper.c: 199:    }
 11180  24F7  3001               	movlw	1
 11181  24F8  0140               	movlb	0	; select bank0
 11182  24F9  00A8               	movwf	??_paging
 11183  24FA  0828               	movf	??_paging,w
 11184  24FB  07AC               	addwf	paging@n,f
 11185  24FC  300C               	movlw	12
 11186  24FD  022C               	subwf	paging@n,w
 11187  24FE  1803               	btfsc	3,0
 11188  24FF  2D21               	goto	l4334
 11189  2500  2CEB               	goto	l4306
 11190  2501                     l4314:	
 11191  2501  3002               	movlw	2
 11192  2502  0140               	movlb	0	; select bank0
 11193  2503  062B               	xorwf	paging@dir,w
 11194  2504  1D03               	btfss	3,2
 11195  2505  2D21               	goto	l4334
 11196  2506  082A               	movf	paging@currentPage,w
 11197  2507  1903               	btfsc	3,2
 11198  2508  2D21               	goto	l4334
 11199                           
 11200                           ;menuhelper.c: 203:    currentPage--;
 11201  2509  3001               	movlw	1
 11202  250A  02AA               	subwf	paging@currentPage,f
 11203                           
 11204                           ;menuhelper.c: 204:    for(n = 0; n < 12; n++) {
 11205  250B  01AC               	clrf	paging@n
 11206  250C                     l4326:	
 11207                           
 11208                           ;menuhelper.c: 205:     OLED_scrollDisplayRight();
 11209  250C  31AE  26EE  31A4   	fcall	_OLED_scrollDisplayRight
 11210                           
 11211                           ;menuhelper.c: 206:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 11212  250F  301A               	movlw	26
 11213  2510  0140               	movlb	0	; select bank0
 11214  2511  00A8               	movwf	??_paging
 11215  2512  30F8               	movlw	248
 11216  2513                     u6947:	
 11217  2513  0B89               	decfsz	9,f
 11218  2514  2D13               	goto	u6947
 11219  2515  0BA8               	decfsz	??_paging,f
 11220  2516  2D13               	goto	u6947
 11221  2517  0000               	nop
 11222                           
 11223                           ;menuhelper.c: 207:    }
 11224  2518  3001               	movlw	1
 11225  2519  0140               	movlb	0	; select bank0
 11226  251A  00A8               	movwf	??_paging
 11227  251B  0828               	movf	??_paging,w
 11228  251C  07AC               	addwf	paging@n,f
 11229  251D  300C               	movlw	12
 11230  251E  022C               	subwf	paging@n,w
 11231  251F  1C03               	skipc
 11232  2520  2D0C               	goto	l4326
 11233  2521                     l4334:	
 11234                           
 11235                           ;menuhelper.c: 211:  lastDir = dir;
 11236  2521  0140               	movlb	0	; select bank0
 11237  2522  082B               	movf	paging@dir,w
 11238  2523  00A8               	movwf	??_paging
 11239  2524  0828               	movf	??_paging,w
 11240  2525  0141               	movlb	1	; select bank1
 11241  2526  00E2               	movwf	paging@lastDir^(0+128)
 11242                           
 11243                           ;menuhelper.c: 212:  PIE0bits.IOCIE = 1;
 11244  2527  014E               	movlb	14	; select bank14
 11245  2528  1616               	bsf	22,4	;volatile
 11246                           
 11247                           ;menuhelper.c: 214:  return currentPage;
 11248  2529  0140               	movlb	0	; select bank0
 11249  252A  082A               	movf	paging@currentPage,w
 11250  252B  0008               	return
 11251  252C                     __end_of_paging:	
 11252                           
 11253                           	psect	text23
 11254  2F4C                     __ptext23:	
 11255 ;; *************** function _getRotDir *****************
 11256 ;; Defined at:
 11257 ;;		line 76 in file "inputs.c"
 11258 ;; Parameters:    Size  Location     Type
 11259 ;;		None
 11260 ;; Auto vars:     Size  Location     Type
 11261 ;;  ret             1    1[BANK0 ] enum E7865
 11262 ;; Return value:  Size  Location     Type
 11263 ;;                  1    wreg      enum E7865
 11264 ;; Registers used:
 11265 ;;		wreg, status,2
 11266 ;; Tracked objects:
 11267 ;;		On entry : 0/0
 11268 ;;		On exit  : 0/0
 11269 ;;		Unchanged: 0/0
 11270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11275 ;;Total ram usage:        2 bytes
 11276 ;; Hardware stack levels used:    1
 11277 ;; Hardware stack levels required when called:    3
 11278 ;; This function calls:
 11279 ;;		Nothing
 11280 ;; This function is called by:
 11281 ;;		_spinInput
 11282 ;;		_paging
 11283 ;; This function uses a non-reentrant model
 11284 ;;
 11285                           
 11286                           
 11287                           ;psect for function _getRotDir
 11288  2F4C                     _getRotDir:	
 11289                           
 11290                           ;inputs.c: 78:  enum e_direction ret = rotDir;
 11291                           
 11292                           ;incstack = 0
 11293                           ; Regs used in _getRotDir: [wreg+status,2]
 11294  2F4C  0141               	movlb	1	; select bank1
 11295  2F4D  086C               	movf	_rotDir^(0+128),w	;volatile
 11296  2F4E  0140               	movlb	0	; select bank0
 11297  2F4F  00A0               	movwf	??_getRotDir
 11298  2F50  0820               	movf	??_getRotDir,w
 11299  2F51  00A1               	movwf	getRotDir@ret
 11300                           
 11301                           ;inputs.c: 79:  rotDir = ROT_STOP;
 11302  2F52  0141               	movlb	1	; select bank1
 11303  2F53  01EC               	clrf	_rotDir^(0+128)	;volatile
 11304                           
 11305                           ;inputs.c: 80:  return ret;
 11306  2F54  0140               	movlb	0	; select bank0
 11307  2F55  0821               	movf	getRotDir@ret,w
 11308  2F56  0008               	return
 11309  2F57                     __end_of_getRotDir:	
 11310                           
 11311                           	psect	text24
 11312  2EEE                     __ptext24:	
 11313 ;; *************** function _OLED_scrollDisplayRight *****************
 11314 ;; Defined at:
 11315 ;;		line 138 in file "oled.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;		None
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;		None
 11320 ;; Return value:  Size  Location     Type
 11321 ;;                  1    wreg      void 
 11322 ;; Registers used:
 11323 ;;		wreg, status,2, status,0, pclath, cstack
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/0
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11333 ;;Total ram usage:        0 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:    7
 11336 ;; This function calls:
 11337 ;;		_OLED_command
 11338 ;; This function is called by:
 11339 ;;		_paging
 11340 ;; This function uses a non-reentrant model
 11341 ;;
 11342                           
 11343                           
 11344                           ;psect for function _OLED_scrollDisplayRight
 11345  2EEE                     _OLED_scrollDisplayRight:	
 11346                           
 11347                           ;oled.c: 140:  OLED_command(0x10 | 0x08 | 0x04);
 11348                           
 11349                           ;incstack = 0
 11350                           ; Regs used in _OLED_scrollDisplayRight: [wreg+status,2+status,0+pclath+cstack]
 11351  2EEE  301C               	movlw	28
 11352  2EEF  31AF  2718         	fcall	_OLED_command
 11353  2EF1  0008               	return
 11354  2EF2                     __end_of_OLED_scrollDisplayRight:	
 11355                           
 11356                           	psect	text25
 11357  2EEA                     __ptext25:	
 11358 ;; *************** function _OLED_scrollDisplayLeft *****************
 11359 ;; Defined at:
 11360 ;;		line 133 in file "oled.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;		None
 11363 ;; Auto vars:     Size  Location     Type
 11364 ;;		None
 11365 ;; Return value:  Size  Location     Type
 11366 ;;                  1    wreg      void 
 11367 ;; Registers used:
 11368 ;;		wreg, status,2, status,0, pclath, cstack
 11369 ;; Tracked objects:
 11370 ;;		On entry : 0/0
 11371 ;;		On exit  : 0/0
 11372 ;;		Unchanged: 0/0
 11373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11378 ;;Total ram usage:        0 bytes
 11379 ;; Hardware stack levels used:    1
 11380 ;; Hardware stack levels required when called:    7
 11381 ;; This function calls:
 11382 ;;		_OLED_command
 11383 ;; This function is called by:
 11384 ;;		_paging
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           
 11389                           ;psect for function _OLED_scrollDisplayLeft
 11390  2EEA                     _OLED_scrollDisplayLeft:	
 11391                           
 11392                           ;oled.c: 135:  OLED_command(0x10 | 0x08 | 0x00);
 11393                           
 11394                           ;incstack = 0
 11395                           ; Regs used in _OLED_scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
 11396  2EEA  3018               	movlw	24
 11397  2EEB  31AF  2718         	fcall	_OLED_command
 11398  2EED  0008               	return
 11399  2EEE                     __end_of_OLED_scrollDisplayLeft:	
 11400                           
 11401                           	psect	text26
 11402  2458                     __ptext26:	
 11403 ;; *************** function _itoa *****************
 11404 ;; Defined at:
 11405 ;;		line 38 in file "common.c"
 11406 ;; Parameters:    Size  Location     Type
 11407 ;;  str             2    5[BANK1 ] PTR unsigned char 
 11408 ;;		 -> systemCheck@str(3), str(10), 
 11409 ;;  value           1    7[BANK1 ] unsigned char 
 11410 ;;  width           1    8[BANK1 ] unsigned char 
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;		None
 11413 ;; Return value:  Size  Location     Type
 11414 ;;                  1    wreg      void 
 11415 ;; Registers used:
 11416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11422 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11424 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11425 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11426 ;;Total ram usage:       11 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    4
 11429 ;; This function calls:
 11430 ;;		___awdiv
 11431 ;;		___awmod
 11432 ;; This function is called by:
 11433 ;;		_channelView
 11434 ;;		_channelSetup
 11435 ;;		_setOutputPower
 11436 ;;		_systemCheck
 11437 ;; This function uses a non-reentrant model
 11438 ;;
 11439                           
 11440                           
 11441                           ;psect for function _itoa
 11442  2458                     _itoa:	
 11443                           
 11444                           ;common.c: 38: void itoa(char *str, uint8_t value, uint8_t width);common.c: 39: {;common
      +                          .c: 40:  str[width] = '\0';
 11445                           
 11446                           ;incstack = 0
 11447                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11448  2458  0141               	movlb	1	; select bank1
 11449  2459  0828               	movf	itoa@width^(0+128),w
 11450  245A  00A9               	movwf	??_itoa^(0+128)
 11451  245B  01AA               	clrf	(??_itoa^(0+128)+1)
 11452  245C  0829               	movf	??_itoa^(0+128),w
 11453  245D  0725               	addwf	itoa@str^(0+128),w
 11454  245E  0086               	movwf	6
 11455  245F  082A               	movf	(??_itoa+1)^(0+128),w
 11456  2460  3D26               	addwfc	(itoa@str+1)^(0+128),w
 11457  2461  0087               	movwf	7
 11458  2462  0181               	clrf	1
 11459  2463                     l5552:	
 11460                           ;common.c: 41:  while (value && width > 0) {
 11461                           
 11462                           
 11463                           ;common.c: 41:  while (value && width > 0) {
 11464  2463  0827               	movf	itoa@value^(0+128),w
 11465  2464  1903               	btfsc	3,2
 11466  2465  2CBD               	goto	l5558
 11467  2466  0828               	movf	itoa@width^(0+128),w
 11468  2467  1903               	btfsc	3,2
 11469  2468  2CBD               	goto	l5558
 11470                           
 11471                           ;common.c: 42:   str[--width] = (value % 10) + '0';
 11472  2469  300A               	movlw	10
 11473  246A  0140               	movlb	0	; select bank0
 11474  246B  00A0               	movwf	___awmod@divisor
 11475  246C  3000               	movlw	0
 11476  246D  00A1               	movwf	___awmod@divisor+1
 11477  246E  0141               	movlb	1	; select bank1
 11478  246F  0827               	movf	itoa@value^(0+128),w
 11479  2470  00A9               	movwf	??_itoa^(0+128)
 11480  2471  01AA               	clrf	(??_itoa^(0+128)+1)
 11481  2472  0829               	movf	??_itoa^(0+128),w
 11482  2473  0140               	movlb	0	; select bank0
 11483  2474  00A2               	movwf	___awmod@dividend
 11484  2475  0141               	movlb	1	; select bank1
 11485  2476  082A               	movf	(??_itoa+1)^(0+128),w
 11486  2477  0140               	movlb	0	; select bank0
 11487  2478  00A3               	movwf	___awmod@dividend+1
 11488  2479  31A1  21DF  31A4   	fcall	___awmod
 11489  247C  0140               	movlb	0	; select bank0
 11490  247D  0820               	movf	?___awmod,w
 11491  247E  3E30               	addlw	48
 11492  247F  0141               	movlb	1	; select bank1
 11493  2480  00AB               	movwf	(??_itoa+2)^(0+128)
 11494  2481  3001               	movlw	1
 11495  2482  02A8               	subwf	itoa@width^(0+128),f
 11496  2483  0828               	movf	itoa@width^(0+128),w
 11497  2484  00AC               	movwf	(??_itoa+3)^(0+128)
 11498  2485  01AD               	clrf	((??_itoa+3)^(0+128)+1)
 11499  2486  082C               	movf	(??_itoa+3)^(0+128),w
 11500  2487  0725               	addwf	itoa@str^(0+128),w
 11501  2488  00AE               	movwf	(??_itoa+5)^(0+128)
 11502  2489  082D               	movf	(??_itoa+4)^(0+128),w
 11503  248A  3D26               	addwfc	(itoa@str+1)^(0+128),w
 11504  248B  00AF               	movwf	(??_itoa+6)^(0+128)
 11505  248C  082E               	movf	(??_itoa+5)^(0+128),w
 11506  248D  0086               	movwf	6
 11507  248E  082F               	movf	(??_itoa+6)^(0+128),w
 11508  248F  0087               	movwf	7
 11509  2490  082B               	movf	(??_itoa+2)^(0+128),w
 11510  2491  0081               	movwf	1
 11511                           
 11512                           ;common.c: 43:   value = value / 10;
 11513  2492  300A               	movlw	10
 11514  2493  0140               	movlb	0	; select bank0
 11515  2494  00A0               	movwf	___awdiv@divisor
 11516  2495  3000               	movlw	0
 11517  2496  00A1               	movwf	___awdiv@divisor+1
 11518  2497  0141               	movlb	1	; select bank1
 11519  2498  0827               	movf	itoa@value^(0+128),w
 11520  2499  00A9               	movwf	??_itoa^(0+128)
 11521  249A  01AA               	clrf	(??_itoa^(0+128)+1)
 11522  249B  0829               	movf	??_itoa^(0+128),w
 11523  249C  0140               	movlb	0	; select bank0
 11524  249D  00A2               	movwf	___awdiv@dividend
 11525  249E  0141               	movlb	1	; select bank1
 11526  249F  082A               	movf	(??_itoa+1)^(0+128),w
 11527  24A0  0140               	movlb	0	; select bank0
 11528  24A1  00A3               	movwf	___awdiv@dividend+1
 11529  24A2  31A3  2345  31A4   	fcall	___awdiv
 11530  24A5  0140               	movlb	0	; select bank0
 11531  24A6  0820               	movf	?___awdiv,w
 11532  24A7  0141               	movlb	1	; select bank1
 11533  24A8  00AB               	movwf	(??_itoa+2)^(0+128)
 11534  24A9  082B               	movf	(??_itoa+2)^(0+128),w
 11535  24AA  00A7               	movwf	itoa@value^(0+128)
 11536  24AB  2C63               	goto	l5552
 11537  24AC                     l5556:	
 11538                           
 11539                           ;common.c: 46:   str[--width] = ' ';
 11540  24AC  3001               	movlw	1
 11541  24AD  02A8               	subwf	itoa@width^(0+128),f
 11542  24AE  0828               	movf	itoa@width^(0+128),w
 11543  24AF  00A9               	movwf	??_itoa^(0+128)
 11544  24B0  01AA               	clrf	(??_itoa^(0+128)+1)
 11545  24B1  0829               	movf	??_itoa^(0+128),w
 11546  24B2  0725               	addwf	itoa@str^(0+128),w
 11547  24B3  00AB               	movwf	(??_itoa+2)^(0+128)
 11548  24B4  082A               	movf	(??_itoa+1)^(0+128),w
 11549  24B5  3D26               	addwfc	(itoa@str+1)^(0+128),w
 11550  24B6  00AC               	movwf	(??_itoa+3)^(0+128)
 11551  24B7  082B               	movf	(??_itoa+2)^(0+128),w
 11552  24B8  0086               	movwf	6
 11553  24B9  082C               	movf	(??_itoa+3)^(0+128),w
 11554  24BA  0087               	movwf	7
 11555  24BB  3020               	movlw	32
 11556  24BC  0081               	movwf	1
 11557  24BD                     l5558:	
 11558                           
 11559                           ;common.c: 45:  while(width)
 11560  24BD  0828               	movf	itoa@width^(0+128),w
 11561  24BE  1903               	btfsc	3,2
 11562  24BF  0008               	return
 11563  24C0  2CAC               	goto	l5556
 11564  24C1                     __end_of_itoa:	
 11565                           
 11566                           	psect	text27
 11567  21DF                     __ptext27:	
 11568 ;; *************** function ___awmod *****************
 11569 ;; Defined at:
 11570 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;  divisor         2    0[BANK0 ] int 
 11573 ;;  dividend        2    2[BANK0 ] int 
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;  sign            1    6[BANK0 ] unsigned char 
 11576 ;;  counter         1    5[BANK0 ] unsigned char 
 11577 ;; Return value:  Size  Location     Type
 11578 ;;                  2    0[BANK0 ] int 
 11579 ;; Registers used:
 11580 ;;		wreg, status,2, status,0
 11581 ;; Tracked objects:
 11582 ;;		On entry : 0/0
 11583 ;;		On exit  : 0/0
 11584 ;;		Unchanged: 0/0
 11585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11589 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11590 ;;Total ram usage:        7 bytes
 11591 ;; Hardware stack levels used:    1
 11592 ;; Hardware stack levels required when called:    3
 11593 ;; This function calls:
 11594 ;;		Nothing
 11595 ;; This function is called by:
 11596 ;;		_itoa
 11597 ;; This function uses a non-reentrant model
 11598 ;;
 11599                           
 11600                           
 11601                           ;psect for function ___awmod
 11602  21DF                     ___awmod:	
 11603                           
 11604                           ;incstack = 0
 11605                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11606  21DF  0140               	movlb	0	; select bank0
 11607  21E0  01A6               	clrf	___awmod@sign
 11608  21E1  1FA3               	btfss	___awmod@dividend+1,7
 11609  21E2  29EA               	goto	l3744
 11610  21E3  09A2               	comf	___awmod@dividend,f
 11611  21E4  09A3               	comf	___awmod@dividend+1,f
 11612  21E5  0AA2               	incf	___awmod@dividend,f
 11613  21E6  1903               	skipnz
 11614  21E7  0AA3               	incf	___awmod@dividend+1,f
 11615  21E8  01A6               	clrf	___awmod@sign
 11616  21E9  0AA6               	incf	___awmod@sign,f
 11617  21EA                     l3744:	
 11618  21EA  1FA1               	btfss	___awmod@divisor+1,7
 11619  21EB  29F1               	goto	l3748
 11620  21EC  09A0               	comf	___awmod@divisor,f
 11621  21ED  09A1               	comf	___awmod@divisor+1,f
 11622  21EE  0AA0               	incf	___awmod@divisor,f
 11623  21EF  1903               	skipnz
 11624  21F0  0AA1               	incf	___awmod@divisor+1,f
 11625  21F1                     l3748:	
 11626  21F1  0820               	movf	___awmod@divisor,w
 11627  21F2  0421               	iorwf	___awmod@divisor+1,w
 11628  21F3  1903               	btfsc	3,2
 11629  21F4  2A18               	goto	l3766
 11630  21F5  01A5               	clrf	___awmod@counter
 11631  21F6  0AA5               	incf	___awmod@counter,f
 11632  21F7                     l3756:	
 11633  21F7  1BA1               	btfsc	___awmod@divisor+1,7
 11634  21F8  2A03               	goto	l3758
 11635  21F9  3001               	movlw	1
 11636  21FA                     u3925:	
 11637  21FA  35A0               	lslf	___awmod@divisor,f
 11638  21FB  0DA1               	rlf	___awmod@divisor+1,f
 11639  21FC  0B89               	decfsz	9,f
 11640  21FD  29FA               	goto	u3925
 11641  21FE  3001               	movlw	1
 11642  21FF  00A4               	movwf	??___awmod
 11643  2200  0824               	movf	??___awmod,w
 11644  2201  07A5               	addwf	___awmod@counter,f
 11645  2202  29F7               	goto	l3756
 11646  2203                     l3758:	
 11647  2203  0821               	movf	___awmod@divisor+1,w
 11648  2204  0223               	subwf	___awmod@dividend+1,w
 11649  2205  1D03               	skipz
 11650  2206  2A09               	goto	u3945
 11651  2207  0820               	movf	___awmod@divisor,w
 11652  2208  0222               	subwf	___awmod@dividend,w
 11653  2209                     u3945:	
 11654  2209  1C03               	skipc
 11655  220A  2A0F               	goto	l3762
 11656  220B  0820               	movf	___awmod@divisor,w
 11657  220C  02A2               	subwf	___awmod@dividend,f
 11658  220D  0821               	movf	___awmod@divisor+1,w
 11659  220E  3BA3               	subwfb	___awmod@dividend+1,f
 11660  220F                     l3762:	
 11661  220F  3001               	movlw	1
 11662  2210                     u3955:	
 11663  2210  36A1               	lsrf	___awmod@divisor+1,f
 11664  2211  0CA0               	rrf	___awmod@divisor,f
 11665  2212  0B89               	decfsz	9,f
 11666  2213  2A10               	goto	u3955
 11667  2214  3001               	movlw	1
 11668  2215  02A5               	subwf	___awmod@counter,f
 11669  2216  1D03               	btfss	3,2
 11670  2217  2A03               	goto	l3758
 11671  2218                     l3766:	
 11672  2218  0826               	movf	___awmod@sign,w
 11673  2219  1903               	btfsc	3,2
 11674  221A  2A20               	goto	l3770
 11675  221B  09A2               	comf	___awmod@dividend,f
 11676  221C  09A3               	comf	___awmod@dividend+1,f
 11677  221D  0AA2               	incf	___awmod@dividend,f
 11678  221E  1903               	skipnz
 11679  221F  0AA3               	incf	___awmod@dividend+1,f
 11680  2220                     l3770:	
 11681  2220  0823               	movf	___awmod@dividend+1,w
 11682  2221  00A1               	movwf	?___awmod+1
 11683  2222  0822               	movf	___awmod@dividend,w
 11684  2223  00A0               	movwf	?___awmod
 11685  2224  0008               	return
 11686  2225                     __end_of___awmod:	
 11687                           
 11688                           	psect	text28
 11689  2345                     __ptext28:	
 11690 ;; *************** function ___awdiv *****************
 11691 ;; Defined at:
 11692 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 11693 ;; Parameters:    Size  Location     Type
 11694 ;;  divisor         2    0[BANK0 ] int 
 11695 ;;  dividend        2    2[BANK0 ] int 
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;  quotient        2    7[BANK0 ] int 
 11698 ;;  sign            1    6[BANK0 ] unsigned char 
 11699 ;;  counter         1    5[BANK0 ] unsigned char 
 11700 ;; Return value:  Size  Location     Type
 11701 ;;                  2    0[BANK0 ] int 
 11702 ;; Registers used:
 11703 ;;		wreg, status,2, status,0
 11704 ;; Tracked objects:
 11705 ;;		On entry : 0/0
 11706 ;;		On exit  : 0/0
 11707 ;;		Unchanged: 0/0
 11708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11709 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11710 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11712 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11713 ;;Total ram usage:        9 bytes
 11714 ;; Hardware stack levels used:    1
 11715 ;; Hardware stack levels required when called:    3
 11716 ;; This function calls:
 11717 ;;		Nothing
 11718 ;; This function is called by:
 11719 ;;		_itoa
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           
 11724                           ;psect for function ___awdiv
 11725  2345                     ___awdiv:	
 11726                           
 11727                           ;incstack = 0
 11728                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11729  2345  0140               	movlb	0	; select bank0
 11730  2346  01A6               	clrf	___awdiv@sign
 11731  2347  1FA1               	btfss	___awdiv@divisor+1,7
 11732  2348  2B50               	goto	l3700
 11733  2349  09A0               	comf	___awdiv@divisor,f
 11734  234A  09A1               	comf	___awdiv@divisor+1,f
 11735  234B  0AA0               	incf	___awdiv@divisor,f
 11736  234C  1903               	skipnz
 11737  234D  0AA1               	incf	___awdiv@divisor+1,f
 11738  234E  01A6               	clrf	___awdiv@sign
 11739  234F  0AA6               	incf	___awdiv@sign,f
 11740  2350                     l3700:	
 11741  2350  1FA3               	btfss	___awdiv@dividend+1,7
 11742  2351  2B5B               	goto	l3706
 11743  2352  09A2               	comf	___awdiv@dividend,f
 11744  2353  09A3               	comf	___awdiv@dividend+1,f
 11745  2354  0AA2               	incf	___awdiv@dividend,f
 11746  2355  1903               	skipnz
 11747  2356  0AA3               	incf	___awdiv@dividend+1,f
 11748  2357  3001               	movlw	1
 11749  2358  00A4               	movwf	??___awdiv
 11750  2359  0824               	movf	??___awdiv,w
 11751  235A  06A6               	xorwf	___awdiv@sign,f
 11752  235B                     l3706:	
 11753  235B  01A7               	clrf	___awdiv@quotient
 11754  235C  01A8               	clrf	___awdiv@quotient+1
 11755  235D  0820               	movf	___awdiv@divisor,w
 11756  235E  0421               	iorwf	___awdiv@divisor+1,w
 11757  235F  1903               	btfsc	3,2
 11758  2360  2B8A               	goto	l3728
 11759  2361  01A5               	clrf	___awdiv@counter
 11760  2362  0AA5               	incf	___awdiv@counter,f
 11761  2363                     l3716:	
 11762  2363  1BA1               	btfsc	___awdiv@divisor+1,7
 11763  2364  2B6F               	goto	l3718
 11764  2365  3001               	movlw	1
 11765  2366                     u3825:	
 11766  2366  35A0               	lslf	___awdiv@divisor,f
 11767  2367  0DA1               	rlf	___awdiv@divisor+1,f
 11768  2368  0B89               	decfsz	9,f
 11769  2369  2B66               	goto	u3825
 11770  236A  3001               	movlw	1
 11771  236B  00A4               	movwf	??___awdiv
 11772  236C  0824               	movf	??___awdiv,w
 11773  236D  07A5               	addwf	___awdiv@counter,f
 11774  236E  2B63               	goto	l3716
 11775  236F                     l3718:	
 11776  236F  3001               	movlw	1
 11777  2370                     u3845:	
 11778  2370  35A7               	lslf	___awdiv@quotient,f
 11779  2371  0DA8               	rlf	___awdiv@quotient+1,f
 11780  2372  0B89               	decfsz	9,f
 11781  2373  2B70               	goto	u3845
 11782  2374  0821               	movf	___awdiv@divisor+1,w
 11783  2375  0223               	subwf	___awdiv@dividend+1,w
 11784  2376  1D03               	skipz
 11785  2377  2B7A               	goto	u3855
 11786  2378  0820               	movf	___awdiv@divisor,w
 11787  2379  0222               	subwf	___awdiv@dividend,w
 11788  237A                     u3855:	
 11789  237A  1C03               	skipc
 11790  237B  2B81               	goto	l3724
 11791  237C  0820               	movf	___awdiv@divisor,w
 11792  237D  02A2               	subwf	___awdiv@dividend,f
 11793  237E  0821               	movf	___awdiv@divisor+1,w
 11794  237F  3BA3               	subwfb	___awdiv@dividend+1,f
 11795  2380  1427               	bsf	___awdiv@quotient,0
 11796  2381                     l3724:	
 11797  2381  3001               	movlw	1
 11798  2382                     u3865:	
 11799  2382  36A1               	lsrf	___awdiv@divisor+1,f
 11800  2383  0CA0               	rrf	___awdiv@divisor,f
 11801  2384  0B89               	decfsz	9,f
 11802  2385  2B82               	goto	u3865
 11803  2386  3001               	movlw	1
 11804  2387  02A5               	subwf	___awdiv@counter,f
 11805  2388  1D03               	btfss	3,2
 11806  2389  2B6F               	goto	l3718
 11807  238A                     l3728:	
 11808  238A  0826               	movf	___awdiv@sign,w
 11809  238B  1903               	btfsc	3,2
 11810  238C  2B92               	goto	l3732
 11811  238D  09A7               	comf	___awdiv@quotient,f
 11812  238E  09A8               	comf	___awdiv@quotient+1,f
 11813  238F  0AA7               	incf	___awdiv@quotient,f
 11814  2390  1903               	skipnz
 11815  2391  0AA8               	incf	___awdiv@quotient+1,f
 11816  2392                     l3732:	
 11817  2392  0828               	movf	___awdiv@quotient+1,w
 11818  2393  00A1               	movwf	?___awdiv+1
 11819  2394  0827               	movf	___awdiv@quotient,w
 11820  2395  00A0               	movwf	?___awdiv
 11821  2396  0008               	return
 11822  2397                     __end_of___awdiv:	
 11823                           
 11824                           	psect	text29
 11825  1E8B                     __ptext29:	
 11826 ;; *************** function _ftoa *****************
 11827 ;; Defined at:
 11828 ;;		line 3 in file "common.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;  str             1    wreg     PTR unsigned char 
 11831 ;;		 -> str(10), 
 11832 ;;  fValue          4    5[BANK1 ] float 
 11833 ;;  width           1    9[BANK1 ] unsigned char 
 11834 ;;  prec            1   10[BANK1 ] unsigned char 
 11835 ;; Auto vars:     Size  Location     Type
 11836 ;;  str             1   18[BANK1 ] PTR unsigned char 
 11837 ;;		 -> str(10), 
 11838 ;;  pos             1   17[BANK1 ] unsigned char 
 11839 ;;  w               1   16[BANK1 ] unsigned char 
 11840 ;;  intValue        1   15[BANK1 ] unsigned char 
 11841 ;;  sign            1   14[BANK1 ] unsigned char 
 11842 ;;  len             1   13[BANK1 ] unsigned char 
 11843 ;; Return value:  Size  Location     Type
 11844 ;;                  1    wreg      void 
 11845 ;; Registers used:
 11846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11847 ;; Tracked objects:
 11848 ;;		On entry : 0/0
 11849 ;;		On exit  : 0/0
 11850 ;;		Unchanged: 0/0
 11851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11852 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11853 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11854 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11855 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11856 ;;Total ram usage:       14 bytes
 11857 ;; Hardware stack levels used:    1
 11858 ;; Hardware stack levels required when called:    5
 11859 ;; This function calls:
 11860 ;;		___fldiv
 11861 ;;		___flge
 11862 ;;		___flmul
 11863 ;;		___flsub
 11864 ;;		___fltol
 11865 ;;		___wmul
 11866 ;;		___xxtofl
 11867 ;; This function is called by:
 11868 ;;		_statusView
 11869 ;;		_channelView
 11870 ;;		_channelSetup
 11871 ;;		_setOutputPower
 11872 ;;		_setLensDia
 11873 ;;		_setup
 11874 ;;		_setDPOffset
 11875 ;;		_setSkyTemp
 11876 ;;		_setFudgeFactor
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           
 11881                           ;psect for function _ftoa
 11882  1E8B                     _ftoa:	
 11883                           
 11884                           ;incstack = 0
 11885                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11886                           ;ftoa@str stored from wreg
 11887  1E8B  0141               	movlb	1	; select bank1
 11888  1E8C  00B2               	movwf	ftoa@str^(0+128)
 11889                           
 11890                           ;common.c: 3: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          4: {;common.c: 5:  uint8_t len = 1;
 11891  1E8D  01AD               	clrf	ftoa@len^(0+128)
 11892  1E8E  0AAD               	incf	ftoa@len^(0+128),f
 11893                           
 11894                           ;common.c: 7:  uint8_t pos = 0;
 11895  1E8F  01B1               	clrf	ftoa@pos^(0+128)
 11896                           
 11897                           ;common.c: 9:  uint8_t sign = 0;
 11898  1E90  01AE               	clrf	ftoa@sign^(0+128)
 11899                           
 11900                           ;common.c: 11:  if (fValue < 0) {
 11901  1E91  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11902  1E92  0140               	movlb	0	; select bank0
 11903  1E93  00EB               	movwf	___flge@ff1+3
 11904  1E94  0141               	movlb	1	; select bank1
 11905  1E95  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11906  1E96  0140               	movlb	0	; select bank0
 11907  1E97  00EA               	movwf	___flge@ff1+2
 11908  1E98  0141               	movlb	1	; select bank1
 11909  1E99  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11910  1E9A  0140               	movlb	0	; select bank0
 11911  1E9B  00E9               	movwf	___flge@ff1+1
 11912  1E9C  0141               	movlb	1	; select bank1
 11913  1E9D  0825               	movf	ftoa@fValue^(0+128),w
 11914  1E9E  0140               	movlb	0	; select bank0
 11915  1E9F  00E8               	movwf	___flge@ff1
 11916  1EA0  3000               	movlw	0
 11917  1EA1  00EF               	movwf	___flge@ff2+3
 11918  1EA2  3000               	movlw	0
 11919  1EA3  00EE               	movwf	___flge@ff2+2
 11920  1EA4  3000               	movlw	0
 11921  1EA5  00ED               	movwf	___flge@ff2+1
 11922  1EA6  3000               	movlw	0
 11923  1EA7  00EC               	movwf	___flge@ff2
 11924  1EA8  3199  21F7  319E   	fcall	___flge
 11925  1EAB  1803               	btfsc	3,0
 11926  1EAC  2EDD               	goto	l4182
 11927                           
 11928                           ;common.c: 12:   fValue *= -1;
 11929  1EAD  30BF               	movlw	191
 11930  1EAE  0140               	movlb	0	; select bank0
 11931  1EAF  00B7               	movwf	___flmul@b+3
 11932  1EB0  3080               	movlw	128
 11933  1EB1  00B6               	movwf	___flmul@b+2
 11934  1EB2  3000               	movlw	0
 11935  1EB3  00B5               	movwf	___flmul@b+1
 11936  1EB4  3000               	movlw	0
 11937  1EB5  00B4               	movwf	___flmul@b
 11938  1EB6  0141               	movlb	1	; select bank1
 11939  1EB7  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11940  1EB8  0140               	movlb	0	; select bank0
 11941  1EB9  00BB               	movwf	___flmul@a+3
 11942  1EBA  0141               	movlb	1	; select bank1
 11943  1EBB  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11944  1EBC  0140               	movlb	0	; select bank0
 11945  1EBD  00BA               	movwf	___flmul@a+2
 11946  1EBE  0141               	movlb	1	; select bank1
 11947  1EBF  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11948  1EC0  0140               	movlb	0	; select bank0
 11949  1EC1  00B9               	movwf	___flmul@a+1
 11950  1EC2  0141               	movlb	1	; select bank1
 11951  1EC3  0825               	movf	ftoa@fValue^(0+128),w
 11952  1EC4  0140               	movlb	0	; select bank0
 11953  1EC5  00B8               	movwf	___flmul@a
 11954  1EC6  318D  25D4  319E   	fcall	___flmul
 11955  1EC9  0140               	movlb	0	; select bank0
 11956  1ECA  0837               	movf	?___flmul+3,w
 11957  1ECB  0141               	movlb	1	; select bank1
 11958  1ECC  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 11959  1ECD  0140               	movlb	0	; select bank0
 11960  1ECE  0836               	movf	?___flmul+2,w
 11961  1ECF  0141               	movlb	1	; select bank1
 11962  1ED0  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 11963  1ED1  0140               	movlb	0	; select bank0
 11964  1ED2  0835               	movf	?___flmul+1,w
 11965  1ED3  0141               	movlb	1	; select bank1
 11966  1ED4  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 11967  1ED5  0140               	movlb	0	; select bank0
 11968  1ED6  0834               	movf	?___flmul,w
 11969  1ED7  0141               	movlb	1	; select bank1
 11970  1ED8  00A5               	movwf	ftoa@fValue^(0+128)
 11971                           
 11972                           ;common.c: 13:   sign = 1;
 11973  1ED9  01AE               	clrf	ftoa@sign^(0+128)
 11974  1EDA  0AAE               	incf	ftoa@sign^(0+128),f
 11975                           
 11976                           ;common.c: 14:   width--;
 11977  1EDB  3001               	movlw	1
 11978  1EDC  02A9               	subwf	ftoa@width^(0+128),f
 11979  1EDD                     l4182:	
 11980                           
 11981                           ;common.c: 16:  while(fValue >= 10.0) {
 11982  1EDD  0141               	movlb	1	; select bank1
 11983  1EDE  0828               	movf	(ftoa@fValue+3)^(0+128),w
 11984  1EDF  0140               	movlb	0	; select bank0
 11985  1EE0  00EB               	movwf	___flge@ff1+3
 11986  1EE1  0141               	movlb	1	; select bank1
 11987  1EE2  0827               	movf	(ftoa@fValue+2)^(0+128),w
 11988  1EE3  0140               	movlb	0	; select bank0
 11989  1EE4  00EA               	movwf	___flge@ff1+2
 11990  1EE5  0141               	movlb	1	; select bank1
 11991  1EE6  0826               	movf	(ftoa@fValue+1)^(0+128),w
 11992  1EE7  0140               	movlb	0	; select bank0
 11993  1EE8  00E9               	movwf	___flge@ff1+1
 11994  1EE9  0141               	movlb	1	; select bank1
 11995  1EEA  0825               	movf	ftoa@fValue^(0+128),w
 11996  1EEB  0140               	movlb	0	; select bank0
 11997  1EEC  00E8               	movwf	___flge@ff1
 11998  1EED  3041               	movlw	65
 11999  1EEE  00EF               	movwf	___flge@ff2+3
 12000  1EEF  3020               	movlw	32
 12001  1EF0  00EE               	movwf	___flge@ff2+2
 12002  1EF1  3000               	movlw	0
 12003  1EF2  00ED               	movwf	___flge@ff2+1
 12004  1EF3  3000               	movlw	0
 12005  1EF4  00EC               	movwf	___flge@ff2
 12006  1EF5  3199  21F7  319E   	fcall	___flge
 12007  1EF8  1C03               	btfss	3,0
 12008  1EF9  2F2B               	goto	l4184
 12009                           
 12010                           ;common.c: 17:   fValue /= 10;
 12011  1EFA  3041               	movlw	65
 12012  1EFB  0140               	movlb	0	; select bank0
 12013  1EFC  00D1               	movwf	___fldiv@a+3
 12014  1EFD  3020               	movlw	32
 12015  1EFE  00D0               	movwf	___fldiv@a+2
 12016  1EFF  3000               	movlw	0
 12017  1F00  00CF               	movwf	___fldiv@a+1
 12018  1F01  3000               	movlw	0
 12019  1F02  00CE               	movwf	___fldiv@a
 12020  1F03  0141               	movlb	1	; select bank1
 12021  1F04  0828               	movf	(ftoa@fValue+3)^(0+128),w
 12022  1F05  0140               	movlb	0	; select bank0
 12023  1F06  00D5               	movwf	___fldiv@b+3
 12024  1F07  0141               	movlb	1	; select bank1
 12025  1F08  0827               	movf	(ftoa@fValue+2)^(0+128),w
 12026  1F09  0140               	movlb	0	; select bank0
 12027  1F0A  00D4               	movwf	___fldiv@b+2
 12028  1F0B  0141               	movlb	1	; select bank1
 12029  1F0C  0826               	movf	(ftoa@fValue+1)^(0+128),w
 12030  1F0D  0140               	movlb	0	; select bank0
 12031  1F0E  00D3               	movwf	___fldiv@b+1
 12032  1F0F  0141               	movlb	1	; select bank1
 12033  1F10  0825               	movf	ftoa@fValue^(0+128),w
 12034  1F11  0140               	movlb	0	; select bank0
 12035  1F12  00D2               	movwf	___fldiv@b
 12036  1F13  3190  2056  319E   	fcall	___fldiv
 12037  1F16  0140               	movlb	0	; select bank0
 12038  1F17  0851               	movf	?___fldiv+3,w
 12039  1F18  0141               	movlb	1	; select bank1
 12040  1F19  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 12041  1F1A  0140               	movlb	0	; select bank0
 12042  1F1B  0850               	movf	?___fldiv+2,w
 12043  1F1C  0141               	movlb	1	; select bank1
 12044  1F1D  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 12045  1F1E  0140               	movlb	0	; select bank0
 12046  1F1F  084F               	movf	?___fldiv+1,w
 12047  1F20  0141               	movlb	1	; select bank1
 12048  1F21  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 12049  1F22  0140               	movlb	0	; select bank0
 12050  1F23  084E               	movf	?___fldiv,w
 12051  1F24  0141               	movlb	1	; select bank1
 12052  1F25  00A5               	movwf	ftoa@fValue^(0+128)
 12053                           
 12054                           ;common.c: 18:   len++;
 12055  1F26  3001               	movlw	1
 12056  1F27  00AB               	movwf	??_ftoa^(0+128)
 12057  1F28  082B               	movf	??_ftoa^(0+128),w
 12058  1F29  07AD               	addwf	ftoa@len^(0+128),f
 12059  1F2A  2EDD               	goto	l4182
 12060  1F2B                     l4184:	
 12061                           
 12062                           ;common.c: 20:  w = len + prec;
 12063  1F2B  0141               	movlb	1	; select bank1
 12064  1F2C  082D               	movf	ftoa@len^(0+128),w
 12065  1F2D  072A               	addwf	ftoa@prec^(0+128),w
 12066  1F2E  00AB               	movwf	??_ftoa^(0+128)
 12067  1F2F  082B               	movf	??_ftoa^(0+128),w
 12068  1F30  00B0               	movwf	ftoa@w^(0+128)
 12069                           
 12070                           ;common.c: 21:  if (prec == 0)
 12071  1F31  082A               	movf	ftoa@prec^(0+128),w
 12072  1F32  1D03               	btfss	3,2
 12073  1F33  2F38               	goto	l4192
 12074                           
 12075                           ;common.c: 22:   width++;
 12076  1F34  3001               	movlw	1
 12077  1F35  00AB               	movwf	??_ftoa^(0+128)
 12078  1F36  082B               	movf	??_ftoa^(0+128),w
 12079  1F37  07A9               	addwf	ftoa@width^(0+128),f
 12080  1F38                     l4192:	
 12081                           
 12082                           ;common.c: 23:  while(--width > w)
 12083  1F38  3001               	movlw	1
 12084  1F39  02A9               	subwf	ftoa@width^(0+128),f
 12085  1F3A  0829               	movf	ftoa@width^(0+128),w
 12086  1F3B  0230               	subwf	ftoa@w^(0+128),w
 12087  1F3C  1803               	btfsc	3,0
 12088  1F3D  2F4E               	goto	l4194
 12089                           
 12090                           ;common.c: 24:   str[pos++] = ' ';
 12091  1F3E  3020               	movlw	32
 12092  1F3F  00AB               	movwf	??_ftoa^(0+128)
 12093  1F40  0831               	movf	ftoa@pos^(0+128),w
 12094  1F41  0732               	addwf	ftoa@str^(0+128),w
 12095  1F42  00AC               	movwf	(??_ftoa+1)^(0+128)
 12096  1F43  082C               	movf	(??_ftoa+1)^(0+128),w
 12097  1F44  0086               	movwf	6
 12098  1F45  3001               	movlw	1	; select bank2/3
 12099  1F46  0087               	movwf	7
 12100  1F47  082B               	movf	??_ftoa^(0+128),w
 12101  1F48  0081               	movwf	1
 12102  1F49  3001               	movlw	1
 12103  1F4A  00AB               	movwf	??_ftoa^(0+128)
 12104  1F4B  082B               	movf	??_ftoa^(0+128),w
 12105  1F4C  07B1               	addwf	ftoa@pos^(0+128),f
 12106  1F4D  2F38               	goto	l4192
 12107  1F4E                     l4194:	
 12108                           
 12109                           ;common.c: 25:  if (sign)
 12110  1F4E  082E               	movf	ftoa@sign^(0+128),w
 12111  1F4F  1903               	btfsc	3,2
 12112  1F50  2F60               	goto	l4214
 12113                           
 12114                           ;common.c: 26:   str[pos++] = '-';
 12115  1F51  302D               	movlw	45
 12116  1F52                     L7:	
 12117  1F52  00AB               	movwf	??_ftoa^(0+128)
 12118  1F53  0831               	movf	ftoa@pos^(0+128),w
 12119  1F54  0732               	addwf	ftoa@str^(0+128),w
 12120  1F55  00AC               	movwf	(??_ftoa+1)^(0+128)
 12121  1F56  082C               	movf	(??_ftoa+1)^(0+128),w
 12122  1F57  0086               	movwf	6
 12123  1F58  3001               	movlw	1	; select bank2/3
 12124  1F59  0087               	movwf	7
 12125  1F5A  082B               	movf	??_ftoa^(0+128),w
 12126  1F5B  0081               	movwf	1
 12127  1F5C  3001               	movlw	1
 12128  1F5D  00AB               	movwf	??_ftoa^(0+128)
 12129  1F5E  082B               	movf	??_ftoa^(0+128),w
 12130  1F5F  07B1               	addwf	ftoa@pos^(0+128),f
 12131  1F60                     l4214:	
 12132                           
 12133                           ;common.c: 27:  while(w--) {
 12134  1F60  3001               	movlw	1
 12135  1F61  02B0               	subwf	ftoa@w^(0+128),f
 12136  1F62  0A30               	incf	ftoa@w^(0+128),w
 12137  1F63  1903               	btfsc	3,2
 12138  1F64  2FF7               	goto	l4216
 12139                           
 12140                           ;common.c: 28:   intValue = fValue;
 12141  1F65  0828               	movf	(ftoa@fValue+3)^(0+128),w
 12142  1F66  0140               	movlb	0	; select bank0
 12143  1F67  00EB               	movwf	___fltol@f1+3
 12144  1F68  0141               	movlb	1	; select bank1
 12145  1F69  0827               	movf	(ftoa@fValue+2)^(0+128),w
 12146  1F6A  0140               	movlb	0	; select bank0
 12147  1F6B  00EA               	movwf	___fltol@f1+2
 12148  1F6C  0141               	movlb	1	; select bank1
 12149  1F6D  0826               	movf	(ftoa@fValue+1)^(0+128),w
 12150  1F6E  0140               	movlb	0	; select bank0
 12151  1F6F  00E9               	movwf	___fltol@f1+1
 12152  1F70  0141               	movlb	1	; select bank1
 12153  1F71  0825               	movf	ftoa@fValue^(0+128),w
 12154  1F72  0140               	movlb	0	; select bank0
 12155  1F73  00E8               	movwf	___fltol@f1
 12156  1F74  31A6  2678  319E   	fcall	___fltol
 12157  1F77  0140               	movlb	0	; select bank0
 12158  1F78  0868               	movf	?___fltol,w
 12159  1F79  0141               	movlb	1	; select bank1
 12160  1F7A  00AB               	movwf	??_ftoa^(0+128)
 12161  1F7B  082B               	movf	??_ftoa^(0+128),w
 12162  1F7C  00AF               	movwf	ftoa@intValue^(0+128)
 12163                           
 12164                           ;common.c: 29:   fValue = fValue * 10 - (10 * intValue);
 12165  1F7D  300A               	movlw	10
 12166  1F7E  0140               	movlb	0	; select bank0
 12167  1F7F  00A2               	movwf	___wmul@multiplicand
 12168  1F80  3000               	movlw	0
 12169  1F81  00A3               	movwf	___wmul@multiplicand+1
 12170  1F82  0141               	movlb	1	; select bank1
 12171  1F83  082F               	movf	ftoa@intValue^(0+128),w
 12172  1F84  00AB               	movwf	??_ftoa^(0+128)
 12173  1F85  01AC               	clrf	(??_ftoa^(0+128)+1)
 12174  1F86  082B               	movf	??_ftoa^(0+128),w
 12175  1F87  0140               	movlb	0	; select bank0
 12176  1F88  00A0               	movwf	___wmul@multiplier
 12177  1F89  0141               	movlb	1	; select bank1
 12178  1F8A  082C               	movf	(??_ftoa+1)^(0+128),w
 12179  1F8B  0140               	movlb	0	; select bank0
 12180  1F8C  00A1               	movwf	___wmul@multiplier+1
 12181  1F8D  31AF  27C5  319E   	fcall	___wmul
 12182  1F90  0140               	movlb	0	; select bank0
 12183  1F91  0820               	movf	?___wmul,w
 12184  1F92  00A6               	movwf	___xxtofl@val
 12185  1F93  0821               	movf	?___wmul+1,w
 12186  1F94  00A7               	movwf	___xxtofl@val+1
 12187  1F95  0D89               	rlf	9,f
 12188  1F96  3B89               	subwfb	9,f
 12189  1F97  0989               	comf	9,f
 12190  1F98  00A8               	movwf	___xxtofl@val+2
 12191  1F99  00A9               	movwf	___xxtofl@val+3
 12192  1F9A  3001               	movlw	1
 12193  1F9B  3198  201D  319E   	fcall	___xxtofl
 12194  1F9E  0140               	movlb	0	; select bank0
 12195  1F9F  0829               	movf	?___xxtofl+3,w
 12196  1FA0  00E5               	movwf	___flsub@a+3
 12197  1FA1  0828               	movf	?___xxtofl+2,w
 12198  1FA2  00E4               	movwf	___flsub@a+2
 12199  1FA3  0827               	movf	?___xxtofl+1,w
 12200  1FA4  00E3               	movwf	___flsub@a+1
 12201  1FA5  0826               	movf	?___xxtofl,w
 12202  1FA6  00E2               	movwf	___flsub@a
 12203  1FA7  3041               	movlw	65
 12204  1FA8  00B7               	movwf	___flmul@b+3
 12205  1FA9  3020               	movlw	32
 12206  1FAA  00B6               	movwf	___flmul@b+2
 12207  1FAB  3000               	movlw	0
 12208  1FAC  00B5               	movwf	___flmul@b+1
 12209  1FAD  3000               	movlw	0
 12210  1FAE  00B4               	movwf	___flmul@b
 12211  1FAF  0141               	movlb	1	; select bank1
 12212  1FB0  0828               	movf	(ftoa@fValue+3)^(0+128),w
 12213  1FB1  0140               	movlb	0	; select bank0
 12214  1FB2  00BB               	movwf	___flmul@a+3
 12215  1FB3  0141               	movlb	1	; select bank1
 12216  1FB4  0827               	movf	(ftoa@fValue+2)^(0+128),w
 12217  1FB5  0140               	movlb	0	; select bank0
 12218  1FB6  00BA               	movwf	___flmul@a+2
 12219  1FB7  0141               	movlb	1	; select bank1
 12220  1FB8  0826               	movf	(ftoa@fValue+1)^(0+128),w
 12221  1FB9  0140               	movlb	0	; select bank0
 12222  1FBA  00B9               	movwf	___flmul@a+1
 12223  1FBB  0141               	movlb	1	; select bank1
 12224  1FBC  0825               	movf	ftoa@fValue^(0+128),w
 12225  1FBD  0140               	movlb	0	; select bank0
 12226  1FBE  00B8               	movwf	___flmul@a
 12227  1FBF  318D  25D4  319E   	fcall	___flmul
 12228  1FC2  0140               	movlb	0	; select bank0
 12229  1FC3  0837               	movf	?___flmul+3,w
 12230  1FC4  00E9               	movwf	___flsub@b+3
 12231  1FC5  0836               	movf	?___flmul+2,w
 12232  1FC6  00E8               	movwf	___flsub@b+2
 12233  1FC7  0835               	movf	?___flmul+1,w
 12234  1FC8  00E7               	movwf	___flsub@b+1
 12235  1FC9  0834               	movf	?___flmul,w
 12236  1FCA  00E6               	movwf	___flsub@b
 12237  1FCB  31A0  2007  319E   	fcall	___flsub
 12238  1FCE  0140               	movlb	0	; select bank0
 12239  1FCF  0865               	movf	?___flsub+3,w
 12240  1FD0  0141               	movlb	1	; select bank1
 12241  1FD1  00A8               	movwf	(ftoa@fValue+3)^(0+128)
 12242  1FD2  0140               	movlb	0	; select bank0
 12243  1FD3  0864               	movf	?___flsub+2,w
 12244  1FD4  0141               	movlb	1	; select bank1
 12245  1FD5  00A7               	movwf	(ftoa@fValue+2)^(0+128)
 12246  1FD6  0140               	movlb	0	; select bank0
 12247  1FD7  0863               	movf	?___flsub+1,w
 12248  1FD8  0141               	movlb	1	; select bank1
 12249  1FD9  00A6               	movwf	(ftoa@fValue+1)^(0+128)
 12250  1FDA  0140               	movlb	0	; select bank0
 12251  1FDB  0862               	movf	?___flsub,w
 12252  1FDC  0141               	movlb	1	; select bank1
 12253  1FDD  00A5               	movwf	ftoa@fValue^(0+128)
 12254                           
 12255                           ;common.c: 30:   str[pos++] = intValue + '0';
 12256  1FDE  082F               	movf	ftoa@intValue^(0+128),w
 12257  1FDF  3E30               	addlw	48
 12258  1FE0  00AB               	movwf	??_ftoa^(0+128)
 12259  1FE1  0831               	movf	ftoa@pos^(0+128),w
 12260  1FE2  0732               	addwf	ftoa@str^(0+128),w
 12261  1FE3  00AC               	movwf	(??_ftoa+1)^(0+128)
 12262  1FE4  082C               	movf	(??_ftoa+1)^(0+128),w
 12263  1FE5  0086               	movwf	6
 12264  1FE6  3001               	movlw	1	; select bank2/3
 12265  1FE7  0087               	movwf	7
 12266  1FE8  082B               	movf	??_ftoa^(0+128),w
 12267  1FE9  0081               	movwf	1
 12268  1FEA  3001               	movlw	1
 12269  1FEB  00AB               	movwf	??_ftoa^(0+128)
 12270  1FEC  082B               	movf	??_ftoa^(0+128),w
 12271  1FED  07B1               	addwf	ftoa@pos^(0+128),f
 12272                           
 12273                           ;common.c: 31:   if (w && (w == prec))
 12274  1FEE  0830               	movf	ftoa@w^(0+128),w
 12275  1FEF  1903               	btfsc	3,2
 12276  1FF0  2F60               	goto	l4214
 12277  1FF1  0830               	movf	ftoa@w^(0+128),w
 12278  1FF2  062A               	xorwf	ftoa@prec^(0+128),w
 12279  1FF3  1D03               	skipz
 12280  1FF4  2F60               	goto	l4214
 12281                           
 12282                           ;common.c: 32:    str[pos++] = '.';
 12283  1FF5  302E               	movlw	46
 12284  1FF6  2F52               	goto	L7
 12285  1FF7                     l4216:	
 12286                           
 12287                           ;common.c: 35:  str[pos] = '\0';
 12288  1FF7  0831               	movf	ftoa@pos^(0+128),w
 12289  1FF8  0732               	addwf	ftoa@str^(0+128),w
 12290  1FF9  00AB               	movwf	??_ftoa^(0+128)
 12291  1FFA  082B               	movf	??_ftoa^(0+128),w
 12292  1FFB  0086               	movwf	6
 12293  1FFC  3001               	movlw	1	; select bank2/3
 12294  1FFD  0087               	movwf	7
 12295  1FFE  0181               	clrf	1
 12296  1FFF  0008               	return
 12297  2000                     __end_of_ftoa:	
 12298                           
 12299                           	psect	text30
 12300  2FC5                     __ptext30:	
 12301 ;; *************** function ___wmul *****************
 12302 ;; Defined at:
 12303 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 12304 ;; Parameters:    Size  Location     Type
 12305 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12306 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;  product         2    4[BANK0 ] unsigned int 
 12309 ;; Return value:  Size  Location     Type
 12310 ;;                  2    0[BANK0 ] unsigned int 
 12311 ;; Registers used:
 12312 ;;		wreg, status,2, status,0
 12313 ;; Tracked objects:
 12314 ;;		On entry : 0/0
 12315 ;;		On exit  : 0/0
 12316 ;;		Unchanged: 0/0
 12317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12318 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12319 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12321 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12322 ;;Total ram usage:        6 bytes
 12323 ;; Hardware stack levels used:    1
 12324 ;; Hardware stack levels required when called:    3
 12325 ;; This function calls:
 12326 ;;		Nothing
 12327 ;; This function is called by:
 12328 ;;		_ftoa
 12329 ;;		_getStateFunc
 12330 ;;		_getNextState
 12331 ;;		_returnToPage
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           
 12336                           ;psect for function ___wmul
 12337  2FC5                     ___wmul:	
 12338                           
 12339                           ;incstack = 0
 12340                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12341  2FC5  0140               	movlb	0	; select bank0
 12342  2FC6  01A4               	clrf	___wmul@product
 12343  2FC7  01A5               	clrf	___wmul@product+1
 12344  2FC8                     l3680:	
 12345  2FC8  1C20               	btfss	___wmul@multiplier,0
 12346  2FC9  2FCE               	goto	l850
 12347  2FCA  0822               	movf	___wmul@multiplicand,w
 12348  2FCB  07A4               	addwf	___wmul@product,f
 12349  2FCC  0823               	movf	___wmul@multiplicand+1,w
 12350  2FCD  3DA5               	addwfc	___wmul@product+1,f
 12351  2FCE                     l850:	
 12352  2FCE  3001               	movlw	1
 12353  2FCF                     u3765:	
 12354  2FCF  35A2               	lslf	___wmul@multiplicand,f
 12355  2FD0  0DA3               	rlf	___wmul@multiplicand+1,f
 12356  2FD1  0B89               	decfsz	9,f
 12357  2FD2  2FCF               	goto	u3765
 12358  2FD3  3001               	movlw	1
 12359  2FD4                     u3775:	
 12360  2FD4  36A1               	lsrf	___wmul@multiplier+1,f
 12361  2FD5  0CA0               	rrf	___wmul@multiplier,f
 12362  2FD6  0B89               	decfsz	9,f
 12363  2FD7  2FD4               	goto	u3775
 12364  2FD8  0820               	movf	___wmul@multiplier,w
 12365  2FD9  0421               	iorwf	___wmul@multiplier+1,w
 12366  2FDA  1D03               	btfss	3,2
 12367  2FDB  2FC8               	goto	l3680
 12368  2FDC  0825               	movf	___wmul@product+1,w
 12369  2FDD  00A1               	movwf	?___wmul+1
 12370  2FDE  0824               	movf	___wmul@product,w
 12371  2FDF  00A0               	movwf	?___wmul
 12372  2FE0  0008               	return
 12373  2FE1                     __end_of___wmul:	
 12374                           
 12375                           	psect	text31
 12376  20CE                     __ptext31:	
 12377 ;; *************** function _OLED_print_xy *****************
 12378 ;; Defined at:
 12379 ;;		line 157 in file "oled.c"
 12380 ;; Parameters:    Size  Location     Type
 12381 ;;  col             1    wreg     unsigned char 
 12382 ;;  row             1    7[BANK0 ] unsigned char 
 12383 ;;  s               2    8[BANK0 ] PTR unsigned char 
 12384 ;;		 -> STR_63(4), systemCheck@str(3), STR_62(12), STR_61(11), 
 12385 ;;		 -> STR_60(9), STR_59(2), STR_58(13), STR_57(9), 
 12386 ;;		 -> STR_56(2), STR_55(13), STR_54(3), STR_53(7), 
 12387 ;;		 -> STR_52(13), STR_51(10), STR_50(10), STR_49(3), 
 12388 ;;		 -> STR_48(7), STR_47(37), STR_46(8), STR_45(2), 
 12389 ;;		 -> STR_44(13), STR_43(13), STR_42(13), STR_41(8), 
 12390 ;;		 -> STR_40(2), STR_39(7), STR_38(6), STR_37(7), 
 12391 ;;		 -> STR_36(6), STR_35(13), STR_34(8), STR_33(13), 
 12392 ;;		 -> STR_32(13), STR_31(13), STR_30(13), STR_29(13), 
 12393 ;;		 -> STR_28(13), STR_27(13), STR_26(9), STR_25(8), 
 12394 ;;		 -> STR_24(5), STR_23(8), STR_22(5), STR_21(13), 
 12395 ;;		 -> STR_20(13), STR_19(13), STR_18(13), STR_17(13), 
 12396 ;;		 -> STR_16(7), STR_15(7), STR_14(3), STR_13(13), 
 12397 ;;		 -> STR_12(13), STR_11(3), STR_10(3), STR_9(4), 
 12398 ;;		 -> STR_8(2), STR_7(4), STR_6(8), STR_5(7), 
 12399 ;;		 -> STR_4(8), STR_3(2), STR_2(4), str(10), 
 12400 ;;		 -> STR_1(49), 
 12401 ;; Auto vars:     Size  Location     Type
 12402 ;;  col             1   15[BANK0 ] unsigned char 
 12403 ;;  row_offsets     4   11[BANK0 ] unsigned char [4]
 12404 ;; Return value:  Size  Location     Type
 12405 ;;                  1    wreg      void 
 12406 ;; Registers used:
 12407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12408 ;; Tracked objects:
 12409 ;;		On entry : 0/0
 12410 ;;		On exit  : 0/0
 12411 ;;		Unchanged: 0/0
 12412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12413 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12414 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12416 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12417 ;;Total ram usage:        9 bytes
 12418 ;; Hardware stack levels used:    1
 12419 ;; Hardware stack levels required when called:    7
 12420 ;; This function calls:
 12421 ;;		_OLED_command
 12422 ;;		_OLED_write
 12423 ;; This function is called by:
 12424 ;;		_statusView
 12425 ;;		_channelView
 12426 ;;		_channelSetup
 12427 ;;		_setOutputPower
 12428 ;;		_setLensDia
 12429 ;;		_setup
 12430 ;;		_setDPOffset
 12431 ;;		_setSkyTemp
 12432 ;;		_setFudgeFactor
 12433 ;;		_menuError
 12434 ;;		_systemCheck
 12435 ;; This function uses a non-reentrant model
 12436 ;;
 12437                           
 12438                           
 12439                           ;psect for function _OLED_print_xy
 12440  20CE                     _OLED_print_xy:	
 12441                           
 12442                           ;incstack = 0
 12443                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12444                           ;OLED_print_xy@col stored from wreg
 12445  20CE  0140               	movlb	0	; select bank0
 12446  20CF  00AF               	movwf	OLED_print_xy@col
 12447                           
 12448                           ;oled.c: 157: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 158: {;oled.
      +                          c: 159:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 12449  20D0  0142               	movlb	2	; select bank2
 12450  20D1  0866               	movf	(OLED_print_xy@F7968+3)^(0+256),w
 12451  20D2  0140               	movlb	0	; select bank0
 12452  20D3  00AE               	movwf	OLED_print_xy@row_offsets+3
 12453  20D4  0142               	movlb	2	; select bank2
 12454  20D5  0865               	movf	(OLED_print_xy@F7968+2)^(0+256),w
 12455  20D6  0140               	movlb	0	; select bank0
 12456  20D7  00AD               	movwf	OLED_print_xy@row_offsets+2
 12457  20D8  0142               	movlb	2	; select bank2
 12458  20D9  0864               	movf	(OLED_print_xy@F7968+1)^(0+256),w
 12459  20DA  0140               	movlb	0	; select bank0
 12460  20DB  00AC               	movwf	OLED_print_xy@row_offsets+1
 12461  20DC  0142               	movlb	2	; select bank2
 12462  20DD  0863               	movf	OLED_print_xy@F7968^(0+256),w
 12463  20DE  0140               	movlb	0	; select bank0
 12464  20DF  00AB               	movwf	OLED_print_xy@row_offsets
 12465                           
 12466                           ;oled.c: 161:  OLED_command(0x80 | (col + row_offsets[row]));
 12467  20E0  0827               	movf	OLED_print_xy@row,w
 12468  20E1  3E2B               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 12469  20E2  0086               	movwf	6
 12470  20E3  0187               	clrf	7
 12471  20E4  0801               	movf	1,w
 12472  20E5  072F               	addwf	OLED_print_xy@col,w
 12473  20E6  3880               	iorlw	128
 12474  20E7  31AF  2718  31A0   	fcall	_OLED_command
 12475  20EA                     l4248:	
 12476                           ;oled.c: 162:  while (*s != (char) ((void*)0)) {
 12477                           
 12478                           
 12479                           ;oled.c: 162:  while (*s != (char) ((void*)0)) {
 12480  20EA  0140               	movlb	0	; select bank0
 12481  20EB  0828               	movf	OLED_print_xy@s,w
 12482  20EC  0084               	movwf	4
 12483  20ED  0829               	movf	OLED_print_xy@s+1,w
 12484  20EE  0085               	movwf	5
 12485  20EF  0012               	moviw fsr0++
 12486  20F0  1903               	btfsc	3,2
 12487  20F1  0008               	return
 12488                           
 12489                           ;oled.c: 163:   OLED_write(*s++);
 12490  20F2  0828               	movf	OLED_print_xy@s,w
 12491  20F3  0084               	movwf	4
 12492  20F4  0829               	movf	OLED_print_xy@s+1,w
 12493  20F5  0085               	movwf	5
 12494  20F6  0800               	movf	0,w	;code access
 12495  20F7  31AF  2736  31A0   	fcall	_OLED_write
 12496  20FA  3001               	movlw	1
 12497  20FB  0140               	movlb	0	; select bank0
 12498  20FC  07A8               	addwf	OLED_print_xy@s,f
 12499  20FD  3000               	movlw	0
 12500  20FE  3DA9               	addwfc	OLED_print_xy@s+1,f
 12501  20FF  28EA               	goto	l4248
 12502  2100                     __end_of_OLED_print_xy:	
 12503                           
 12504                           	psect	text32
 12505  22B4                     __ptext32:	
 12506 ;; *************** function _initialize *****************
 12507 ;; Defined at:
 12508 ;;		line 105 in file "main.c"
 12509 ;; Parameters:    Size  Location     Type
 12510 ;;		None
 12511 ;; Auto vars:     Size  Location     Type
 12512 ;;		None
 12513 ;; Return value:  Size  Location     Type
 12514 ;;                  1    wreg      void 
 12515 ;; Registers used:
 12516 ;;		wreg, status,2, status,0
 12517 ;; Tracked objects:
 12518 ;;		On entry : 0/0
 12519 ;;		On exit  : 0/0
 12520 ;;		Unchanged: 0/0
 12521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12526 ;;Total ram usage:        0 bytes
 12527 ;; Hardware stack levels used:    1
 12528 ;; Hardware stack levels required when called:    3
 12529 ;; This function calls:
 12530 ;;		Nothing
 12531 ;; This function is called by:
 12532 ;;		_main
 12533 ;; This function uses a non-reentrant model
 12534 ;;
 12535                           
 12536                           
 12537                           ;psect for function _initialize
 12538  22B4                     _initialize:	
 12539                           
 12540                           ;main.c: 107:  OSCFRQ = 0b00000010;
 12541                           
 12542                           ;incstack = 0
 12543                           ; Regs used in _initialize: [wreg+status,2+status,0]
 12544  22B4  3002               	movlw	2
 12545  22B5  0151               	movlb	17	; select bank17
 12546  22B6  0093               	movwf	19	;volatile
 12547                           
 12548                           ;main.c: 108:  OSCCON1 = 0b01100000;
 12549  22B7  3060               	movlw	96
 12550  22B8  008D               	movwf	13	;volatile
 12551  22B9                     l150:	
 12552                           ;main.c: 109:  while (!OSCCON3bits.ORDY);
 12553                           
 12554  22B9  1E0F               	btfss	15,4	;volatile
 12555  22BA  2AB9               	goto	l150
 12556                           
 12557                           ;main.c: 112:  RX1DTPPSbits.RX1DTPPS = 0x17;
 12558  22BB  017D               	movlb	61	; select bank61
 12559  22BC  084B               	movf	75,w	;volatile
 12560  22BD  39C0               	andlw	-64
 12561  22BE  3817               	iorlw	23
 12562  22BF  00CB               	movwf	75	;volatile
 12563                           
 12564                           ;main.c: 113:  RC6PPS = 0x0F;
 12565  22C0  300F               	movlw	15
 12566  22C1  017E               	movlb	62	; select bank62
 12567  22C2  00A6               	movwf	38	;volatile
 12568                           
 12569                           ;main.c: 116:  ANSELA = 0b01000000;
 12570  22C3  3040               	movlw	64
 12571  22C4  00B8               	movwf	56	;volatile
 12572                           
 12573                           ;main.c: 117:  ANSELB = 0b00000000;
 12574  22C5  01C3               	clrf	67	;volatile
 12575                           
 12576                           ;main.c: 118:  ANSELC = 0b00000011;
 12577  22C6  3003               	movlw	3
 12578  22C7  00CE               	movwf	78	;volatile
 12579                           
 12580                           ;main.c: 121:  TRISA = 0b11110000;
 12581  22C8  30F0               	movlw	240
 12582  22C9  0140               	movlb	0	; select bank0
 12583  22CA  0092               	movwf	18	;volatile
 12584                           
 12585                           ;main.c: 122:  TRISB = 0b00000000;
 12586  22CB  0193               	clrf	19	;volatile
 12587                           
 12588                           ;main.c: 123:  TRISC = 0b10000111;
 12589  22CC  3087               	movlw	135
 12590  22CD  0094               	movwf	20	;volatile
 12591                           
 12592                           ;main.c: 126:  ADCON0bits.ADON = 1;
 12593  22CE  0141               	movlb	1	; select bank1
 12594  22CF  141D               	bsf	29,0	;volatile
 12595                           
 12596                           ;main.c: 127:  ADCON1 = 0b11100000;
 12597  22D0  30E0               	movlw	224
 12598  22D1  009E               	movwf	30	;volatile
 12599                           
 12600                           ;main.c: 130:  T0CON0 = 0b10000000;
 12601  22D2  3080               	movlw	128
 12602  22D3  014B               	movlb	11	; select bank11
 12603  22D4  009E               	movwf	30	;volatile
 12604                           
 12605                           ;main.c: 131:  T0CON1 = 0b01000111;
 12606  22D5  3047               	movlw	71
 12607  22D6  009F               	movwf	31	;volatile
 12608                           
 12609                           ;main.c: 132:  TMR0 = 178;
 12610  22D7  30B2               	movlw	178
 12611  22D8  009C               	movwf	28	;volatile
 12612                           
 12613                           ;main.c: 135:  T1CON = 0b00110011;
 12614  22D9  3033               	movlw	51
 12615  22DA  0144               	movlb	4	; select bank4
 12616  22DB  008E               	movwf	14	;volatile
 12617                           
 12618                           ;main.c: 136:  T1CLK = 0b00000001;
 12619  22DC  3001               	movlw	1
 12620  22DD  0091               	movwf	17	;volatile
 12621                           
 12622                           ;main.c: 137:  TMR1 = 53035;
 12623  22DE  30CF               	movlw	207
 12624  22DF  008D               	movwf	13	;volatile
 12625  22E0  302B               	movlw	43
 12626  22E1  008C               	movwf	12	;volatile
 12627                           
 12628                           ;main.c: 140:  PIE0 = 0b00110000;
 12629  22E2  3030               	movlw	48
 12630  22E3  014E               	movlb	14	; select bank14
 12631  22E4  0096               	movwf	22	;volatile
 12632                           
 12633                           ;main.c: 141:  PIE3 = 0b00100000;
 12634  22E5  3020               	movlw	32
 12635  22E6  0099               	movwf	25	;volatile
 12636                           
 12637                           ;main.c: 142:  PIE4 = 0b00000001;
 12638  22E7  3001               	movlw	1
 12639  22E8  009A               	movwf	26	;volatile
 12640                           
 12641                           ;main.c: 143:  INTCON = 0b11000000;
 12642  22E9  30C0               	movlw	192
 12643  22EA  008B               	movwf	11	;volatile
 12644                           
 12645                           ;main.c: 146:  IOCAP = 0b10110000;
 12646  22EB  30B0               	movlw	176
 12647  22EC  017E               	movlb	62	; select bank62
 12648  22ED  00BD               	movwf	61	;volatile
 12649                           
 12650                           ;main.c: 147:  IOCAN = 0b10110000;
 12651  22EE  30B0               	movlw	176
 12652  22EF  00BE               	movwf	62	;volatile
 12653                           
 12654                           ;main.c: 148:  IOCCN = 0b00000100;
 12655  22F0  3004               	movlw	4
 12656  22F1  00D4               	movwf	84	;volatile
 12657                           
 12658                           ;main.c: 152:  BAUD1CON = 0b00001000;
 12659  22F2  3008               	movlw	8
 12660  22F3  0142               	movlb	2	; select bank2
 12661  22F4  009F               	movwf	31	;volatile
 12662                           
 12663                           ;main.c: 153:  SPBRGL = 25;
 12664  22F5  3019               	movlw	25
 12665  22F6  009B               	movwf	27	;volatile
 12666                           
 12667                           ;main.c: 154:  RC1STA = 0b10010000;
 12668  22F7  3090               	movlw	144
 12669  22F8  009D               	movwf	29	;volatile
 12670                           
 12671                           ;main.c: 155:  TX1STA = 0b00100000;
 12672  22F9  3020               	movlw	32
 12673  22FA  009E               	movwf	30	;volatile
 12674  22FB  0008               	return
 12675  22FC                     __end_of_initialize:	
 12676                           
 12677                           	psect	text33
 12678  1C10                     __ptext33:	
 12679 ;; *************** function _initGlobalData *****************
 12680 ;; Defined at:
 12681 ;;		line 72 in file "main.c"
 12682 ;; Parameters:    Size  Location     Type
 12683 ;;  data            2    0[BANK0 ] PTR struct .
 12684 ;;		 -> data(173), 
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;  chData          2    7[BANK0 ] PTR struct .
 12687 ;;		 -> data.chData(128), data(173), 
 12688 ;;  n               1    6[BANK0 ] unsigned char 
 12689 ;; Return value:  Size  Location     Type
 12690 ;;                  1    wreg      void 
 12691 ;; Registers used:
 12692 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12693 ;; Tracked objects:
 12694 ;;		On entry : 0/0
 12695 ;;		On exit  : 0/0
 12696 ;;		Unchanged: 0/0
 12697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12698 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12699 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12700 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12701 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12702 ;;Total ram usage:        9 bytes
 12703 ;; Hardware stack levels used:    1
 12704 ;; Hardware stack levels required when called:    3
 12705 ;; This function calls:
 12706 ;;		Nothing
 12707 ;; This function is called by:
 12708 ;;		_main
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           
 12713                           ;psect for function _initGlobalData
 12714  1C10                     _initGlobalData:	
 12715                           
 12716                           ;main.c: 72: void initGlobalData(t_globalData *data);main.c: 73: {;main.c: 74:  uint8_t 
      +                          n;;main.c: 75:  t_channelData *chData;;main.c: 77:  data->tempC = 0;
 12717                           
 12718                           ;incstack = 0
 12719                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0]
 12720  1C10  0140               	movlb	0	; select bank0
 12721  1C11  0820               	movf	initGlobalData@data,w
 12722  1C12  0086               	movwf	6
 12723  1C13  0821               	movf	initGlobalData@data+1,w
 12724  1C14  0087               	movwf	7
 12725  1C15  3000               	movlw	0
 12726  1C16  3FC0               	movwi [0]fsr1
 12727  1C17  3000               	movlw	0
 12728  1C18  3FC1               	movwi [1]fsr1
 12729  1C19  3000               	movlw	0
 12730  1C1A  3FC2               	movwi [2]fsr1
 12731  1C1B  3000               	movlw	0
 12732  1C1C  3FC3               	movwi [3]fsr1
 12733                           
 12734                           ;main.c: 78:  data->relHum = 0;
 12735  1C1D  0820               	movf	initGlobalData@data,w
 12736  1C1E  0086               	movwf	6
 12737  1C1F  0821               	movf	initGlobalData@data+1,w
 12738  1C20  0087               	movwf	7
 12739  1C21  3144               	addfsr 1,4
 12740  1C22  3000               	movlw	0
 12741  1C23  3FC0               	movwi [0]fsr1
 12742  1C24  3000               	movlw	0
 12743  1C25  3FC1               	movwi [1]fsr1
 12744  1C26  3000               	movlw	0
 12745  1C27  3FC2               	movwi [2]fsr1
 12746  1C28  3000               	movlw	0
 12747  1C29  3FC3               	movwi [3]fsr1
 12748                           
 12749                           ;main.c: 79:  data->dewPointC = 0;
 12750  1C2A  0820               	movf	initGlobalData@data,w
 12751  1C2B  0086               	movwf	6
 12752  1C2C  0821               	movf	initGlobalData@data+1,w
 12753  1C2D  0087               	movwf	7
 12754  1C2E  3148               	addfsr 1,8
 12755  1C2F  3000               	movlw	0
 12756  1C30  3FC0               	movwi [0]fsr1
 12757  1C31  3000               	movlw	0
 12758  1C32  3FC1               	movwi [1]fsr1
 12759  1C33  3000               	movlw	0
 12760  1C34  3FC2               	movwi [2]fsr1
 12761  1C35  3000               	movlw	0
 12762  1C36  3FC3               	movwi [3]fsr1
 12763                           
 12764                           ;main.c: 80:  data->sensorVersion = 0;
 12765  1C37  0820               	movf	initGlobalData@data,w
 12766  1C38  0086               	movwf	6
 12767  1C39  0821               	movf	initGlobalData@data+1,w
 12768  1C3A  0087               	movwf	7
 12769  1C3B  314C               	addfsr 1,12
 12770  1C3C  3000               	movlw	0
 12771  1C3D  3FC0               	movwi [0]fsr1
 12772  1C3E  3000               	movlw	0
 12773  1C3F  3FC1               	movwi [1]fsr1
 12774  1C40  3000               	movlw	0
 12775  1C41  3FC2               	movwi [2]fsr1
 12776  1C42  3000               	movlw	0
 12777  1C43  3FC3               	movwi [3]fsr1
 12778                           
 12779                           ;main.c: 81:  data->tempAux = 0;
 12780  1C44  0820               	movf	initGlobalData@data,w
 12781  1C45  0086               	movwf	6
 12782  1C46  0821               	movf	initGlobalData@data+1,w
 12783  1C47  0087               	movwf	7
 12784  1C48  3150               	addfsr 1,16
 12785  1C49  3000               	movlw	0
 12786  1C4A  3FC0               	movwi [0]fsr1
 12787  1C4B  3000               	movlw	0
 12788  1C4C  3FC1               	movwi [1]fsr1
 12789  1C4D  3000               	movlw	0
 12790  1C4E  3FC2               	movwi [2]fsr1
 12791  1C4F  3000               	movlw	0
 12792  1C50  3FC3               	movwi [3]fsr1
 12793                           
 12794                           ;main.c: 82:  data->voltage = 0;
 12795  1C51  0820               	movf	initGlobalData@data,w
 12796  1C52  0086               	movwf	6
 12797  1C53  0821               	movf	initGlobalData@data+1,w
 12798  1C54  0087               	movwf	7
 12799  1C55  3154               	addfsr 1,20
 12800  1C56  3000               	movlw	0
 12801  1C57  3FC0               	movwi [0]fsr1
 12802  1C58  3000               	movlw	0
 12803  1C59  3FC1               	movwi [1]fsr1
 12804  1C5A  3000               	movlw	0
 12805  1C5B  3FC2               	movwi [2]fsr1
 12806  1C5C  3000               	movlw	0
 12807  1C5D  3FC3               	movwi [3]fsr1
 12808                           
 12809                           ;main.c: 83:  data->current = 0;
 12810  1C5E  0820               	movf	initGlobalData@data,w
 12811  1C5F  0086               	movwf	6
 12812  1C60  0821               	movf	initGlobalData@data+1,w
 12813  1C61  0087               	movwf	7
 12814  1C62  3158               	addfsr 1,24
 12815  1C63  3000               	movlw	0
 12816  1C64  3FC0               	movwi [0]fsr1
 12817  1C65  3000               	movlw	0
 12818  1C66  3FC1               	movwi [1]fsr1
 12819  1C67  3000               	movlw	0
 12820  1C68  3FC2               	movwi [2]fsr1
 12821  1C69  3000               	movlw	0
 12822  1C6A  3FC3               	movwi [3]fsr1
 12823                           
 12824                           ;main.c: 84:  data->power = 0;
 12825  1C6B  0820               	movf	initGlobalData@data,w
 12826  1C6C  0086               	movwf	6
 12827  1C6D  0821               	movf	initGlobalData@data+1,w
 12828  1C6E  0087               	movwf	7
 12829  1C6F  315C               	addfsr 1,28
 12830  1C70  3000               	movlw	0
 12831  1C71  3FC0               	movwi [0]fsr1
 12832  1C72  3000               	movlw	0
 12833  1C73  3FC1               	movwi [1]fsr1
 12834  1C74  3000               	movlw	0
 12835  1C75  3FC2               	movwi [2]fsr1
 12836  1C76  3000               	movlw	0
 12837  1C77  3FC3               	movwi [3]fsr1
 12838                           
 12839                           ;main.c: 85:  data->dpOffset = 3.0;
 12840  1C78  0820               	movf	initGlobalData@data,w
 12841  1C79  3E20               	addlw	32
 12842  1C7A  0086               	movwf	6
 12843  1C7B  3000               	movlw	0
 12844  1C7C  3D21               	addwfc	initGlobalData@data+1,w
 12845  1C7D  0087               	movwf	7
 12846  1C7E  3000               	movlw	0
 12847  1C7F  3FC0               	movwi [0]fsr1
 12848  1C80  3000               	movlw	0
 12849  1C81  3FC1               	movwi [1]fsr1
 12850  1C82  3040               	movlw	64
 12851  1C83  3FC2               	movwi [2]fsr1
 12852  1C84  3040               	movlw	64
 12853  1C85  3FC3               	movwi [3]fsr1
 12854                           
 12855                           ;main.c: 86:  data->skyTemp = -40;
 12856  1C86  0820               	movf	initGlobalData@data,w
 12857  1C87  3E24               	addlw	36
 12858  1C88  0086               	movwf	6
 12859  1C89  3000               	movlw	0
 12860  1C8A  3D21               	addwfc	initGlobalData@data+1,w
 12861  1C8B  0087               	movwf	7
 12862  1C8C  3000               	movlw	0
 12863  1C8D  3FC0               	movwi [0]fsr1
 12864  1C8E  3000               	movlw	0
 12865  1C8F  3FC1               	movwi [1]fsr1
 12866  1C90  3020               	movlw	32
 12867  1C91  3FC2               	movwi [2]fsr1
 12868  1C92  30C2               	movlw	194
 12869  1C93  3FC3               	movwi [3]fsr1
 12870                           
 12871                           ;main.c: 87:  data->fudgeFactor = 1.0;
 12872  1C94  0820               	movf	initGlobalData@data,w
 12873  1C95  3E28               	addlw	40
 12874  1C96  0086               	movwf	6
 12875  1C97  3000               	movlw	0
 12876  1C98  3D21               	addwfc	initGlobalData@data+1,w
 12877  1C99  0087               	movwf	7
 12878  1C9A  3000               	movlw	0
 12879  1C9B  3FC0               	movwi [0]fsr1
 12880  1C9C  3000               	movlw	0
 12881  1C9D  3FC1               	movwi [1]fsr1
 12882  1C9E  3080               	movlw	128
 12883  1C9F  3FC2               	movwi [2]fsr1
 12884  1CA0  303F               	movlw	63
 12885  1CA1  3FC3               	movwi [3]fsr1
 12886                           
 12887                           ;main.c: 89:  for (n = 0; n < 4; n++) {
 12888  1CA2  01A6               	clrf	initGlobalData@n
 12889  1CA3                     l5020:	
 12890                           
 12891                           ;main.c: 90:   chData = &data->chData[n];
 12892  1CA3  0826               	movf	initGlobalData@n,w
 12893  1CA4  00A2               	movwf	??_initGlobalData
 12894  1CA5  01A3               	clrf	??_initGlobalData+1
 12895  1CA6  3005               	movlw	5
 12896  1CA7                     u5745:	
 12897  1CA7  35A2               	lslf	??_initGlobalData,f
 12898  1CA8  0DA3               	rlf	??_initGlobalData+1,f
 12899  1CA9  0B89               	decfsz	9,f
 12900  1CAA  2CA7               	goto	u5745
 12901  1CAB  0822               	movf	??_initGlobalData,w
 12902  1CAC  0720               	addwf	initGlobalData@data,w
 12903  1CAD  00A4               	movwf	??_initGlobalData+2
 12904  1CAE  0823               	movf	??_initGlobalData+1,w
 12905  1CAF  3D21               	addwfc	initGlobalData@data+1,w
 12906  1CB0  00A5               	movwf	??_initGlobalData+3
 12907  1CB1  0824               	movf	??_initGlobalData+2,w
 12908  1CB2  3E2D               	addlw	45
 12909  1CB3  00A7               	movwf	initGlobalData@chData
 12910  1CB4  3000               	movlw	0
 12911  1CB5  3D25               	addwfc	??_initGlobalData+3,w
 12912  1CB6  00A8               	movwf	initGlobalData@chData+1
 12913                           
 12914                           ;main.c: 91:   chData->lensDia = 4;
 12915  1CB7  0827               	movf	initGlobalData@chData,w
 12916  1CB8  0086               	movwf	6
 12917  1CB9  0828               	movf	initGlobalData@chData+1,w
 12918  1CBA  0087               	movwf	7
 12919  1CBB  3156               	addfsr 1,22
 12920  1CBC  3000               	movlw	0
 12921  1CBD  3FC0               	movwi [0]fsr1
 12922  1CBE  3000               	movlw	0
 12923  1CBF  3FC1               	movwi [1]fsr1
 12924  1CC0  3080               	movlw	128
 12925  1CC1  3FC2               	movwi [2]fsr1
 12926  1CC2  3040               	movlw	64
 12927  1CC3  3FC3               	movwi [3]fsr1
 12928                           
 12929                           ;main.c: 92:   chData->status = CH_ENABLED;
 12930  1CC4  0827               	movf	initGlobalData@chData,w
 12931  1CC5  3E1F               	addlw	31
 12932  1CC6  00A2               	movwf	??_initGlobalData
 12933  1CC7  3000               	movlw	0
 12934  1CC8  3D28               	addwfc	initGlobalData@chData+1,w
 12935  1CC9  00A3               	movwf	??_initGlobalData+1
 12936  1CCA  0822               	movf	??_initGlobalData,w
 12937  1CCB  0086               	movwf	6
 12938  1CCC  0823               	movf	??_initGlobalData+1,w
 12939  1CCD  0087               	movwf	7
 12940  1CCE  3001               	movlw	1
 12941  1CCF  0081               	movwf	1
 12942                           
 12943                           ;main.c: 93:   chData->mode = MODE_AUTO;
 12944  1CD0  0827               	movf	initGlobalData@chData,w
 12945  1CD1  3E1E               	addlw	30
 12946  1CD2  00A2               	movwf	??_initGlobalData
 12947  1CD3  3000               	movlw	0
 12948  1CD4  3D28               	addwfc	initGlobalData@chData+1,w
 12949  1CD5  00A3               	movwf	??_initGlobalData+1
 12950  1CD6  0822               	movf	??_initGlobalData,w
 12951  1CD7  0086               	movwf	6
 12952  1CD8  0823               	movf	??_initGlobalData+1,w
 12953  1CD9  0087               	movwf	7
 12954  1CDA  3001               	movlw	1
 12955  1CDB  0081               	movwf	1
 12956                           
 12957                           ;main.c: 94:   chData->Pmax = 0;
 12958  1CDC  0827               	movf	initGlobalData@chData,w
 12959  1CDD  0086               	movwf	6
 12960  1CDE  0828               	movf	initGlobalData@chData+1,w
 12961  1CDF  0087               	movwf	7
 12962  1CE0  3144               	addfsr 1,4
 12963  1CE1  3000               	movlw	0
 12964  1CE2  3FC0               	movwi [0]fsr1
 12965  1CE3  3000               	movlw	0
 12966  1CE4  3FC1               	movwi [1]fsr1
 12967  1CE5  3000               	movlw	0
 12968  1CE6  3FC2               	movwi [2]fsr1
 12969  1CE7  3000               	movlw	0
 12970  1CE8  3FC3               	movwi [3]fsr1
 12971                           
 12972                           ;main.c: 95:   chData->Preq = 0;
 12973  1CE9  0827               	movf	initGlobalData@chData,w
 12974  1CEA  0086               	movwf	6
 12975  1CEB  0828               	movf	initGlobalData@chData+1,w
 12976  1CEC  0087               	movwf	7
 12977  1CED  3148               	addfsr 1,8
 12978  1CEE  3000               	movlw	0
 12979  1CEF  3FC0               	movwi [0]fsr1
 12980  1CF0  3000               	movlw	0
 12981  1CF1  3FC1               	movwi [1]fsr1
 12982  1CF2  3000               	movlw	0
 12983  1CF3  3FC2               	movwi [2]fsr1
 12984  1CF4  3000               	movlw	0
 12985  1CF5  3FC3               	movwi [3]fsr1
 12986                           
 12987                           ;main.c: 96:   chData->Patt = 0;
 12988  1CF6  0827               	movf	initGlobalData@chData,w
 12989  1CF7  0086               	movwf	6
 12990  1CF8  0828               	movf	initGlobalData@chData+1,w
 12991  1CF9  0087               	movwf	7
 12992  1CFA  314C               	addfsr 1,12
 12993  1CFB  3000               	movlw	0
 12994  1CFC  3FC0               	movwi [0]fsr1
 12995  1CFD  3000               	movlw	0
 12996  1CFE  3FC1               	movwi [1]fsr1
 12997  1CFF  3000               	movlw	0
 12998  1D00  3FC2               	movwi [2]fsr1
 12999  1D01  3000               	movlw	0
 13000  1D02  3FC3               	movwi [3]fsr1
 13001                           
 13002                           ;main.c: 97:   chData->current = 0;
 13003  1D03  0827               	movf	initGlobalData@chData,w
 13004  1D04  0086               	movwf	6
 13005  1D05  0828               	movf	initGlobalData@chData+1,w
 13006  1D06  0087               	movwf	7
 13007  1D07  3000               	movlw	0
 13008  1D08  3FC0               	movwi [0]fsr1
 13009  1D09  3000               	movlw	0
 13010  1D0A  3FC1               	movwi [1]fsr1
 13011  1D0B  3000               	movlw	0
 13012  1D0C  3FC2               	movwi [2]fsr1
 13013  1D0D  3000               	movlw	0
 13014  1D0E  3FC3               	movwi [3]fsr1
 13015                           
 13016                           ;main.c: 98:  }
 13017  1D0F  3001               	movlw	1
 13018  1D10  00A2               	movwf	??_initGlobalData
 13019  1D11  0822               	movf	??_initGlobalData,w
 13020  1D12  07A6               	addwf	initGlobalData@n,f
 13021  1D13  3004               	movlw	4
 13022  1D14  0226               	subwf	initGlobalData@n,w
 13023  1D15  1803               	btfsc	3,0
 13024  1D16  0008               	return
 13025  1D17  2CA3               	goto	l5020
 13026  1D18                     __end_of_initGlobalData:	
 13027                           
 13028                           	psect	text34
 13029  134B                     __ptext34:	
 13030 ;; *************** function _getAnalogValues *****************
 13031 ;; Defined at:
 13032 ;;		line 285 in file "system.c"
 13033 ;; Parameters:    Size  Location     Type
 13034 ;;  data            2   72[BANK0 ] PTR struct .
 13035 ;;		 -> data(173), 
 13036 ;; Auto vars:     Size  Location     Type
 13037 ;;  adc             2   78[BANK0 ] unsigned short 
 13038 ;; Return value:  Size  Location     Type
 13039 ;;                  1    wreg      void 
 13040 ;; Registers used:
 13041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13042 ;; Tracked objects:
 13043 ;;		On entry : 0/0
 13044 ;;		On exit  : 0/0
 13045 ;;		Unchanged: 0/0
 13046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13048 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13050 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13051 ;;Total ram usage:        8 bytes
 13052 ;; Hardware stack levels used:    1
 13053 ;; Hardware stack levels required when called:    5
 13054 ;; This function calls:
 13055 ;;		___fladd
 13056 ;;		___fldiv
 13057 ;;		___flmul
 13058 ;;		___xxtofl
 13059 ;;		_ema
 13060 ;;		_getAnalogValue
 13061 ;; This function is called by:
 13062 ;;		_main
 13063 ;; This function uses a non-reentrant model
 13064 ;;
 13065                           
 13066                           
 13067                           ;psect for function _getAnalogValues
 13068  134B                     _getAnalogValues:	
 13069                           
 13070                           ;system.c: 285: void getAnalogValues(t_globalData *data);system.c: 286: {;system.c: 287:
      +                            static uint16_t avgT, avgV, avgI;;system.c: 288:  uint16_t adc;;system.c: 290:  adc = 
      +                          getAnalogValue(0b000110);
 13071                           
 13072                           ;incstack = 0
 13073                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13074  134B  3006               	movlw	6
 13075  134C  3198  2000  3193   	fcall	_getAnalogValue
 13076  134F  0140               	movlb	0	; select bank0
 13077  1350  0821               	movf	?_getAnalogValue+1,w
 13078  1351  00EF               	movwf	getAnalogValues@adc+1
 13079  1352  0820               	movf	?_getAnalogValue,w
 13080  1353  00EE               	movwf	getAnalogValues@adc
 13081                           
 13082                           ;system.c: 291:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 13083  1354  086F               	movf	getAnalogValues@adc+1,w
 13084  1355  00AD               	movwf	ema@in+1
 13085  1356  086E               	movf	getAnalogValues@adc,w
 13086  1357  00AC               	movwf	ema@in
 13087  1358  0142               	movlb	2	; select bank2
 13088  1359  0831               	movf	(getAnalogValues@avgT+1)^(0+256),w
 13089  135A  0140               	movlb	0	; select bank0
 13090  135B  00AF               	movwf	ema@average+1
 13091  135C  0142               	movlb	2	; select bank2
 13092  135D  0830               	movf	getAnalogValues@avgT^(0+256),w
 13093  135E  0140               	movlb	0	; select bank0
 13094  135F  00AE               	movwf	ema@average
 13095  1360  3000               	movlw	0
 13096  1361  00B3               	movwf	ema@alpha+3
 13097  1362  3000               	movlw	0
 13098  1363  00B2               	movwf	ema@alpha+2
 13099  1364  307F               	movlw	127
 13100  1365  00B1               	movwf	ema@alpha+1
 13101  1366  30FF               	movlw	255
 13102  1367  00B0               	movwf	ema@alpha
 13103  1368  31A3  23EF  3193   	fcall	_ema
 13104  136B  0140               	movlb	0	; select bank0
 13105  136C  082D               	movf	?_ema+1,w
 13106  136D  0142               	movlb	2	; select bank2
 13107  136E  00B1               	movwf	(getAnalogValues@avgT+1)^(0+256)
 13108  136F  0140               	movlb	0	; select bank0
 13109  1370  082C               	movf	?_ema,w
 13110  1371  0142               	movlb	2	; select bank2
 13111  1372  00B0               	movwf	getAnalogValues@avgT^(0+256)
 13112                           
 13113                           ;system.c: 292:  adc = getAnalogValue(0b010000);
 13114  1373  3010               	movlw	16
 13115  1374  3198  2000  3193   	fcall	_getAnalogValue
 13116  1377  0140               	movlb	0	; select bank0
 13117  1378  0821               	movf	?_getAnalogValue+1,w
 13118  1379  00EF               	movwf	getAnalogValues@adc+1
 13119  137A  0820               	movf	?_getAnalogValue,w
 13120  137B  00EE               	movwf	getAnalogValues@adc
 13121                           
 13122                           ;system.c: 293:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 13123  137C  086F               	movf	getAnalogValues@adc+1,w
 13124  137D  00AD               	movwf	ema@in+1
 13125  137E  086E               	movf	getAnalogValues@adc,w
 13126  137F  00AC               	movwf	ema@in
 13127  1380  0142               	movlb	2	; select bank2
 13128  1381  082F               	movf	(getAnalogValues@avgV+1)^(0+256),w
 13129  1382  0140               	movlb	0	; select bank0
 13130  1383  00AF               	movwf	ema@average+1
 13131  1384  0142               	movlb	2	; select bank2
 13132  1385  082E               	movf	getAnalogValues@avgV^(0+256),w
 13133  1386  0140               	movlb	0	; select bank0
 13134  1387  00AE               	movwf	ema@average
 13135  1388  3000               	movlw	0
 13136  1389  00B3               	movwf	ema@alpha+3
 13137  138A  3000               	movlw	0
 13138  138B  00B2               	movwf	ema@alpha+2
 13139  138C  30CC               	movlw	204
 13140  138D  00B1               	movwf	ema@alpha+1
 13141  138E  30CC               	movlw	204
 13142  138F  00B0               	movwf	ema@alpha
 13143  1390  31A3  23EF  3193   	fcall	_ema
 13144  1393  0140               	movlb	0	; select bank0
 13145  1394  082D               	movf	?_ema+1,w
 13146  1395  0142               	movlb	2	; select bank2
 13147  1396  00AF               	movwf	(getAnalogValues@avgV+1)^(0+256)
 13148  1397  0140               	movlb	0	; select bank0
 13149  1398  082C               	movf	?_ema,w
 13150  1399  0142               	movlb	2	; select bank2
 13151  139A  00AE               	movwf	getAnalogValues@avgV^(0+256)
 13152                           
 13153                           ;system.c: 294:  adc = getAnalogValue(0b010001);
 13154  139B  3011               	movlw	17
 13155  139C  3198  2000  3193   	fcall	_getAnalogValue
 13156  139F  0140               	movlb	0	; select bank0
 13157  13A0  0821               	movf	?_getAnalogValue+1,w
 13158  13A1  00EF               	movwf	getAnalogValues@adc+1
 13159  13A2  0820               	movf	?_getAnalogValue,w
 13160  13A3  00EE               	movwf	getAnalogValues@adc
 13161                           
 13162                           ;system.c: 295:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 13163  13A4  086F               	movf	getAnalogValues@adc+1,w
 13164  13A5  00AD               	movwf	ema@in+1
 13165  13A6  086E               	movf	getAnalogValues@adc,w
 13166  13A7  00AC               	movwf	ema@in
 13167  13A8  0142               	movlb	2	; select bank2
 13168  13A9  082D               	movf	(getAnalogValues@avgI+1)^(0+256),w
 13169  13AA  0140               	movlb	0	; select bank0
 13170  13AB  00AF               	movwf	ema@average+1
 13171  13AC  0142               	movlb	2	; select bank2
 13172  13AD  082C               	movf	getAnalogValues@avgI^(0+256),w
 13173  13AE  0140               	movlb	0	; select bank0
 13174  13AF  00AE               	movwf	ema@average
 13175  13B0  3000               	movlw	0
 13176  13B1  00B3               	movwf	ema@alpha+3
 13177  13B2  3000               	movlw	0
 13178  13B3  00B2               	movwf	ema@alpha+2
 13179  13B4  304C               	movlw	76
 13180  13B5  00B1               	movwf	ema@alpha+1
 13181  13B6  30CC               	movlw	204
 13182  13B7  00B0               	movwf	ema@alpha
 13183  13B8  31A3  23EF  3193   	fcall	_ema
 13184  13BB  0140               	movlb	0	; select bank0
 13185  13BC  082D               	movf	?_ema+1,w
 13186  13BD  0142               	movlb	2	; select bank2
 13187  13BE  00AD               	movwf	(getAnalogValues@avgI+1)^(0+256)
 13188  13BF  0140               	movlb	0	; select bank0
 13189  13C0  082C               	movf	?_ema,w
 13190  13C1  0142               	movlb	2	; select bank2
 13191  13C2  00AC               	movwf	getAnalogValues@avgI^(0+256)
 13192                           
 13193                           ;system.c: 296:  data->tempAux = ( (avgT * 0.1191) - 34.512 );
 13194  13C3  30C2               	movlw	194
 13195  13C4  0140               	movlb	0	; select bank0
 13196  13C5  00D1               	movwf	___fladd@b+3
 13197  13C6  300A               	movlw	10
 13198  13C7  00D0               	movwf	___fladd@b+2
 13199  13C8  300C               	movlw	12
 13200  13C9  00CF               	movwf	___fladd@b+1
 13201  13CA  304A               	movlw	74
 13202  13CB  00CE               	movwf	___fladd@b
 13203  13CC  303D               	movlw	61
 13204  13CD  00B7               	movwf	___flmul@b+3
 13205  13CE  30F3               	movlw	243
 13206  13CF  00B6               	movwf	___flmul@b+2
 13207  13D0  30EA               	movlw	234
 13208  13D1  00B5               	movwf	___flmul@b+1
 13209  13D2  30B3               	movlw	179
 13210  13D3  00B4               	movwf	___flmul@b
 13211  13D4  0142               	movlb	2	; select bank2
 13212  13D5  0830               	movf	getAnalogValues@avgT^(0+256),w
 13213  13D6  0140               	movlb	0	; select bank0
 13214  13D7  00A6               	movwf	___xxtofl@val
 13215  13D8  0142               	movlb	2	; select bank2
 13216  13D9  0831               	movf	(getAnalogValues@avgT+1)^(0+256),w
 13217  13DA  0140               	movlb	0	; select bank0
 13218  13DB  00A7               	movwf	___xxtofl@val+1
 13219  13DC  01A8               	clrf	___xxtofl@val+2
 13220  13DD  01A9               	clrf	___xxtofl@val+3
 13221  13DE  3000               	movlw	0
 13222  13DF  3198  201D  3193   	fcall	___xxtofl
 13223  13E2  0140               	movlb	0	; select bank0
 13224  13E3  0829               	movf	?___xxtofl+3,w
 13225  13E4  00BB               	movwf	___flmul@a+3
 13226  13E5  0828               	movf	?___xxtofl+2,w
 13227  13E6  00BA               	movwf	___flmul@a+2
 13228  13E7  0827               	movf	?___xxtofl+1,w
 13229  13E8  00B9               	movwf	___flmul@a+1
 13230  13E9  0826               	movf	?___xxtofl,w
 13231  13EA  00B8               	movwf	___flmul@a
 13232  13EB  318D  25D4  3193   	fcall	___flmul
 13233  13EE  0140               	movlb	0	; select bank0
 13234  13EF  0837               	movf	?___flmul+3,w
 13235  13F0  00D5               	movwf	___fladd@a+3
 13236  13F1  0836               	movf	?___flmul+2,w
 13237  13F2  00D4               	movwf	___fladd@a+2
 13238  13F3  0835               	movf	?___flmul+1,w
 13239  13F4  00D3               	movwf	___fladd@a+1
 13240  13F5  0834               	movf	?___flmul,w
 13241  13F6  00D2               	movwf	___fladd@a
 13242  13F7  3189  21D6  3193   	fcall	___fladd
 13243  13FA  0140               	movlb	0	; select bank0
 13244  13FB  0868               	movf	getAnalogValues@data,w
 13245  13FC  0086               	movwf	6
 13246  13FD  0869               	movf	getAnalogValues@data+1,w
 13247  13FE  0087               	movwf	7
 13248  13FF  3150               	addfsr 1,16
 13249  1400  084E               	movf	?___fladd,w
 13250  1401  3FC0               	movwi [0]fsr1
 13251  1402  084F               	movf	?___fladd+1,w
 13252  1403  3FC1               	movwi [1]fsr1
 13253  1404  0850               	movf	?___fladd+2,w
 13254  1405  3FC2               	movwi [2]fsr1
 13255  1406  0851               	movf	?___fladd+3,w
 13256  1407  3FC3               	movwi [3]fsr1
 13257                           
 13258                           ;system.c: 297:  data->voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 13259  1408  3040               	movlw	64
 13260  1409  00B7               	movwf	___flmul@b+3
 13261  140A  30A0               	movlw	160
 13262  140B  00B6               	movwf	___flmul@b+2
 13263  140C  3000               	movlw	0
 13264  140D  00B5               	movwf	___flmul@b+1
 13265  140E  3000               	movlw	0
 13266  140F  00B4               	movwf	___flmul@b
 13267  1410  0142               	movlb	2	; select bank2
 13268  1411  082E               	movf	getAnalogValues@avgV^(0+256),w
 13269  1412  0140               	movlb	0	; select bank0
 13270  1413  00A6               	movwf	___xxtofl@val
 13271  1414  0142               	movlb	2	; select bank2
 13272  1415  082F               	movf	(getAnalogValues@avgV+1)^(0+256),w
 13273  1416  0140               	movlb	0	; select bank0
 13274  1417  00A7               	movwf	___xxtofl@val+1
 13275  1418  01A8               	clrf	___xxtofl@val+2
 13276  1419  01A9               	clrf	___xxtofl@val+3
 13277  141A  3000               	movlw	0
 13278  141B  3198  201D  3193   	fcall	___xxtofl
 13279  141E  0140               	movlb	0	; select bank0
 13280  141F  0829               	movf	?___xxtofl+3,w
 13281  1420  00BB               	movwf	___flmul@a+3
 13282  1421  0828               	movf	?___xxtofl+2,w
 13283  1422  00BA               	movwf	___flmul@a+2
 13284  1423  0827               	movf	?___xxtofl+1,w
 13285  1424  00B9               	movwf	___flmul@a+1
 13286  1425  0826               	movf	?___xxtofl,w
 13287  1426  00B8               	movwf	___flmul@a
 13288  1427  318D  25D4  3193   	fcall	___flmul
 13289  142A  0140               	movlb	0	; select bank0
 13290  142B  0837               	movf	?___flmul+3,w
 13291  142C  00ED               	movwf	_getAnalogValues$2297+3
 13292  142D  0836               	movf	?___flmul+2,w
 13293  142E  00EC               	movwf	_getAnalogValues$2297+2
 13294  142F  0835               	movf	?___flmul+1,w
 13295  1430  00EB               	movwf	_getAnalogValues$2297+1
 13296  1431  0834               	movf	?___flmul,w
 13297  1432  00EA               	movwf	_getAnalogValues$2297
 13298                           
 13299                           ;system.c: 297:  data->voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 13300  1433  3047               	movlw	71
 13301  1434  00D1               	movwf	___fldiv@a+3
 13302  1435  303B               	movlw	59
 13303  1436  00D0               	movwf	___fldiv@a+2
 13304  1437  30D1               	movlw	209
 13305  1438  00CF               	movwf	___fldiv@a+1
 13306  1439  3000               	movlw	0
 13307  143A  00CE               	movwf	___fldiv@a
 13308  143B  3043               	movlw	67
 13309  143C  00B7               	movwf	___flmul@b+3
 13310  143D  3045               	movlw	69
 13311  143E  00B6               	movwf	___flmul@b+2
 13312  143F  3000               	movlw	0
 13313  1440  00B5               	movwf	___flmul@b+1
 13314  1441  3000               	movlw	0
 13315  1442  00B4               	movwf	___flmul@b
 13316  1443  086D               	movf	_getAnalogValues$2297+3,w
 13317  1444  00BB               	movwf	___flmul@a+3
 13318  1445  086C               	movf	_getAnalogValues$2297+2,w
 13319  1446  00BA               	movwf	___flmul@a+2
 13320  1447  086B               	movf	_getAnalogValues$2297+1,w
 13321  1448  00B9               	movwf	___flmul@a+1
 13322  1449  086A               	movf	_getAnalogValues$2297,w
 13323  144A  00B8               	movwf	___flmul@a
 13324  144B  318D  25D4  3193   	fcall	___flmul
 13325  144E  0140               	movlb	0	; select bank0
 13326  144F  0837               	movf	?___flmul+3,w
 13327  1450  00D5               	movwf	___fldiv@b+3
 13328  1451  0836               	movf	?___flmul+2,w
 13329  1452  00D4               	movwf	___fldiv@b+2
 13330  1453  0835               	movf	?___flmul+1,w
 13331  1454  00D3               	movwf	___fldiv@b+1
 13332  1455  0834               	movf	?___flmul,w
 13333  1456  00D2               	movwf	___fldiv@b
 13334  1457  3190  2056  3193   	fcall	___fldiv
 13335  145A  0140               	movlb	0	; select bank0
 13336  145B  0868               	movf	getAnalogValues@data,w
 13337  145C  0086               	movwf	6
 13338  145D  0869               	movf	getAnalogValues@data+1,w
 13339  145E  0087               	movwf	7
 13340  145F  3154               	addfsr 1,20
 13341  1460  084E               	movf	?___fldiv,w
 13342  1461  3FC0               	movwi [0]fsr1
 13343  1462  084F               	movf	?___fldiv+1,w
 13344  1463  3FC1               	movwi [1]fsr1
 13345  1464  0850               	movf	?___fldiv+2,w
 13346  1465  3FC2               	movwi [2]fsr1
 13347  1466  0851               	movf	?___fldiv+3,w
 13348  1467  3FC3               	movwi [3]fsr1
 13349                           
 13350                           ;system.c: 298:  data->current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 13351  1468  3045               	movlw	69
 13352  1469  00D1               	movwf	___fldiv@a+3
 13353  146A  301F               	movlw	31
 13354  146B  00D0               	movwf	___fldiv@a+2
 13355  146C  30D8               	movlw	216
 13356  146D  00CF               	movwf	___fldiv@a+1
 13357  146E  3000               	movlw	0
 13358  146F  00CE               	movwf	___fldiv@a
 13359  1470  3040               	movlw	64
 13360  1471  00B7               	movwf	___flmul@b+3
 13361  1472  30A0               	movlw	160
 13362  1473  00B6               	movwf	___flmul@b+2
 13363  1474  3000               	movlw	0
 13364  1475  00B5               	movwf	___flmul@b+1
 13365  1476  3000               	movlw	0
 13366  1477  00B4               	movwf	___flmul@b
 13367  1478  0142               	movlb	2	; select bank2
 13368  1479  082C               	movf	getAnalogValues@avgI^(0+256),w
 13369  147A  0140               	movlb	0	; select bank0
 13370  147B  00A6               	movwf	___xxtofl@val
 13371  147C  0142               	movlb	2	; select bank2
 13372  147D  082D               	movf	(getAnalogValues@avgI+1)^(0+256),w
 13373  147E  0140               	movlb	0	; select bank0
 13374  147F  00A7               	movwf	___xxtofl@val+1
 13375  1480  01A8               	clrf	___xxtofl@val+2
 13376  1481  01A9               	clrf	___xxtofl@val+3
 13377  1482  3000               	movlw	0
 13378  1483  3198  201D  3193   	fcall	___xxtofl
 13379  1486  0140               	movlb	0	; select bank0
 13380  1487  0829               	movf	?___xxtofl+3,w
 13381  1488  00BB               	movwf	___flmul@a+3
 13382  1489  0828               	movf	?___xxtofl+2,w
 13383  148A  00BA               	movwf	___flmul@a+2
 13384  148B  0827               	movf	?___xxtofl+1,w
 13385  148C  00B9               	movwf	___flmul@a+1
 13386  148D  0826               	movf	?___xxtofl,w
 13387  148E  00B8               	movwf	___flmul@a
 13388  148F  318D  25D4  3193   	fcall	___flmul
 13389  1492  0140               	movlb	0	; select bank0
 13390  1493  0837               	movf	?___flmul+3,w
 13391  1494  00D5               	movwf	___fldiv@b+3
 13392  1495  0836               	movf	?___flmul+2,w
 13393  1496  00D4               	movwf	___fldiv@b+2
 13394  1497  0835               	movf	?___flmul+1,w
 13395  1498  00D3               	movwf	___fldiv@b+1
 13396  1499  0834               	movf	?___flmul,w
 13397  149A  00D2               	movwf	___fldiv@b
 13398  149B  3190  2056  3193   	fcall	___fldiv
 13399  149E  0140               	movlb	0	; select bank0
 13400  149F  0868               	movf	getAnalogValues@data,w
 13401  14A0  0086               	movwf	6
 13402  14A1  0869               	movf	getAnalogValues@data+1,w
 13403  14A2  0087               	movwf	7
 13404  14A3  3158               	addfsr 1,24
 13405  14A4  084E               	movf	?___fldiv,w
 13406  14A5  3FC0               	movwi [0]fsr1
 13407  14A6  084F               	movf	?___fldiv+1,w
 13408  14A7  3FC1               	movwi [1]fsr1
 13409  14A8  0850               	movf	?___fldiv+2,w
 13410  14A9  3FC2               	movwi [2]fsr1
 13411  14AA  0851               	movf	?___fldiv+3,w
 13412  14AB  3FC3               	movwi [3]fsr1
 13413                           
 13414                           ;system.c: 299:  data->power = data->voltage * data->current;
 13415  14AC  0868               	movf	getAnalogValues@data,w
 13416  14AD  0086               	movwf	6
 13417  14AE  0869               	movf	getAnalogValues@data+1,w
 13418  14AF  0087               	movwf	7
 13419  14B0  3158               	addfsr 1,24
 13420  14B1  3F40               	moviw [0]fsr1
 13421  14B2  00B4               	movwf	___flmul@b
 13422  14B3  3F41               	moviw [1]fsr1
 13423  14B4  00B5               	movwf	___flmul@b+1
 13424  14B5  3F42               	moviw [2]fsr1
 13425  14B6  00B6               	movwf	___flmul@b+2
 13426  14B7  3F43               	moviw [3]fsr1
 13427  14B8  00B7               	movwf	___flmul@b+3
 13428  14B9  0868               	movf	getAnalogValues@data,w
 13429  14BA  0086               	movwf	6
 13430  14BB  0869               	movf	getAnalogValues@data+1,w
 13431  14BC  0087               	movwf	7
 13432  14BD  3154               	addfsr 1,20
 13433  14BE  3F40               	moviw [0]fsr1
 13434  14BF  00B8               	movwf	___flmul@a
 13435  14C0  3F41               	moviw [1]fsr1
 13436  14C1  00B9               	movwf	___flmul@a+1
 13437  14C2  3F42               	moviw [2]fsr1
 13438  14C3  00BA               	movwf	___flmul@a+2
 13439  14C4  3F43               	moviw [3]fsr1
 13440  14C5  00BB               	movwf	___flmul@a+3
 13441  14C6  318D  25D4         	fcall	___flmul
 13442  14C8  0140               	movlb	0	; select bank0
 13443  14C9  0868               	movf	getAnalogValues@data,w
 13444  14CA  0086               	movwf	6
 13445  14CB  0869               	movf	getAnalogValues@data+1,w
 13446  14CC  0087               	movwf	7
 13447  14CD  315C               	addfsr 1,28
 13448  14CE  0834               	movf	?___flmul,w
 13449  14CF  3FC0               	movwi [0]fsr1
 13450  14D0  0835               	movf	?___flmul+1,w
 13451  14D1  3FC1               	movwi [1]fsr1
 13452  14D2  0836               	movf	?___flmul+2,w
 13453  14D3  3FC2               	movwi [2]fsr1
 13454  14D4  0837               	movf	?___flmul+3,w
 13455  14D5  3FC3               	movwi [3]fsr1
 13456  14D6  0008               	return
 13457  14D7                     __end_of_getAnalogValues:	
 13458                           
 13459                           	psect	text35
 13460  11D0                     __ptext35:	
 13461 ;; *************** function _checkSensor *****************
 13462 ;; Defined at:
 13463 ;;		line 189 in file "system.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;  data            2    4[BANK1 ] PTR struct .
 13466 ;;		 -> data(173), 
 13467 ;; Auto vars:     Size  Location     Type
 13468 ;;  dp              1   10[BANK1 ] PTR struct .
 13469 ;;		 -> dataPacket(15), 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  1    wreg      unsigned char 
 13472 ;; Registers used:
 13473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13479 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13480 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13481 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13482 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13483 ;;Total ram usage:        7 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    5
 13486 ;; This function calls:
 13487 ;;		___flge
 13488 ;;		___xxtofl
 13489 ;;		_getDataPacket
 13490 ;;		_timeNow
 13491 ;;		_timeSince
 13492 ;;		_uartIsDataReady
 13493 ;;		_uartReset
 13494 ;;		_uartSendByte
 13495 ;; This function is called by:
 13496 ;;		_main
 13497 ;; This function uses a non-reentrant model
 13498 ;;
 13499                           
 13500                           
 13501                           ;psect for function _checkSensor
 13502  11D0                     _checkSensor:	
 13503                           
 13504                           ;system.c: 189: uint8_t checkSensor(t_globalData *data);system.c: 190: {;system.c: 191: 
      +                           t_dataPacket *dp;;system.c: 192:  static uint32_t sensorUpdateInterval = 0;;system.c: 1
      +                          93:  static uint32_t sensorTimeout = 0;;system.c: 194:  static uint8_t state = 0;;system
      +                          .c: 197:  if ((data->tempAux < -30) || (data->tempAux > 100)) {
 13505                           
 13506                           ;incstack = 0
 13507                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13508  11D0  0141               	movlb	1	; select bank1
 13509  11D1  0824               	movf	checkSensor@data^(0+128),w
 13510  11D2  0086               	movwf	6
 13511  11D3  0825               	movf	(checkSensor@data+1)^(0+128),w
 13512  11D4  0087               	movwf	7
 13513  11D5  3150               	addfsr 1,16
 13514  11D6  3F40               	moviw [0]fsr1
 13515  11D7  0140               	movlb	0	; select bank0
 13516  11D8  00E8               	movwf	___flge@ff1
 13517  11D9  3F41               	moviw [1]fsr1
 13518  11DA  00E9               	movwf	___flge@ff1+1
 13519  11DB  3F42               	moviw [2]fsr1
 13520  11DC  00EA               	movwf	___flge@ff1+2
 13521  11DD  3F43               	moviw [3]fsr1
 13522  11DE  00EB               	movwf	___flge@ff1+3
 13523  11DF  30C1               	movlw	193
 13524  11E0  00EF               	movwf	___flge@ff2+3
 13525  11E1  30F0               	movlw	240
 13526  11E2  00EE               	movwf	___flge@ff2+2
 13527  11E3  3000               	movlw	0
 13528  11E4  00ED               	movwf	___flge@ff2+1
 13529  11E5  3000               	movlw	0
 13530  11E6  00EC               	movwf	___flge@ff2
 13531  11E7  3199  21F7  3191   	fcall	___flge
 13532  11EA  1C03               	btfss	3,0
 13533  11EB  2A09               	goto	l5110
 13534  11EC  3042               	movlw	66
 13535  11ED  0140               	movlb	0	; select bank0
 13536  11EE  00EB               	movwf	___flge@ff1+3
 13537  11EF  30C8               	movlw	200
 13538  11F0  00EA               	movwf	___flge@ff1+2
 13539  11F1  3000               	movlw	0
 13540  11F2  00E9               	movwf	___flge@ff1+1
 13541  11F3  3000               	movlw	0
 13542  11F4  00E8               	movwf	___flge@ff1
 13543  11F5  0141               	movlb	1	; select bank1
 13544  11F6  0824               	movf	checkSensor@data^(0+128),w
 13545  11F7  0086               	movwf	6
 13546  11F8  0825               	movf	(checkSensor@data+1)^(0+128),w
 13547  11F9  0087               	movwf	7
 13548  11FA  3150               	addfsr 1,16
 13549  11FB  3F40               	moviw [0]fsr1
 13550  11FC  0140               	movlb	0	; select bank0
 13551  11FD  00EC               	movwf	___flge@ff2
 13552  11FE  3F41               	moviw [1]fsr1
 13553  11FF  00ED               	movwf	___flge@ff2+1
 13554  1200  3F42               	moviw [2]fsr1
 13555  1201  00EE               	movwf	___flge@ff2+2
 13556  1202  3F43               	moviw [3]fsr1
 13557  1203  00EF               	movwf	___flge@ff2+3
 13558  1204  3199  21F7  3191   	fcall	___flge
 13559  1207  1803               	btfsc	3,0
 13560  1208  2A12               	goto	l5112
 13561  1209                     l5110:	
 13562                           
 13563                           ;system.c: 198:   data->status.AUX_SENSOR_OK = 0;
 13564  1209  0141               	movlb	1	; select bank1
 13565  120A  0824               	movf	checkSensor@data^(0+128),w
 13566  120B  3E2C               	addlw	44
 13567  120C  0086               	movwf	6
 13568  120D  3000               	movlw	0
 13569  120E  3D25               	addwfc	(checkSensor@data+1)^(0+128),w
 13570  120F  0087               	movwf	7
 13571  1210  1101               	bcf	1,2
 13572                           
 13573                           ;system.c: 199:  } else
 13574  1211  2B39               	goto	l5160
 13575  1212                     l5112:	
 13576                           
 13577                           ;system.c: 200:   data->status.AUX_SENSOR_OK = 1;
 13578  1212  0141               	movlb	1	; select bank1
 13579  1213  0824               	movf	checkSensor@data^(0+128),w
 13580  1214  3E2C               	addlw	44
 13581  1215  0086               	movwf	6
 13582  1216  3000               	movlw	0
 13583  1217  3D25               	addwfc	(checkSensor@data+1)^(0+128),w
 13584  1218  0087               	movwf	7
 13585  1219  1501               	bsf	1,2
 13586  121A  2B39               	goto	l5160
 13587  121B                     l5114:	
 13588                           
 13589                           ;system.c: 205:   if (timeSince(sensorUpdateInterval) >= 50) {
 13590  121B  0142               	movlb	2	; select bank2
 13591  121C  0827               	movf	(checkSensor@sensorUpdateInterval+3)^(0+256),w
 13592  121D  0140               	movlb	0	; select bank0
 13593  121E  00A7               	movwf	timeSince@since+3
 13594  121F  0142               	movlb	2	; select bank2
 13595  1220  0826               	movf	(checkSensor@sensorUpdateInterval+2)^(0+256),w
 13596  1221  0140               	movlb	0	; select bank0
 13597  1222  00A6               	movwf	timeSince@since+2
 13598  1223  0142               	movlb	2	; select bank2
 13599  1224  0825               	movf	(checkSensor@sensorUpdateInterval+1)^(0+256),w
 13600  1225  0140               	movlb	0	; select bank0
 13601  1226  00A5               	movwf	timeSince@since+1
 13602  1227  0142               	movlb	2	; select bank2
 13603  1228  0824               	movf	checkSensor@sensorUpdateInterval^(0+256),w
 13604  1229  0140               	movlb	0	; select bank0
 13605  122A  00A4               	movwf	timeSince@since
 13606  122B  3190  2000  3191   	fcall	_timeSince
 13607  122E  0140               	movlb	0	; select bank0
 13608  122F  0827               	movf	?_timeSince+3,w
 13609  1230  1D03               	btfss	3,2
 13610  1231  2A3C               	goto	l5116
 13611  1232  0826               	movf	?_timeSince+2,w
 13612  1233  1D03               	btfss	3,2
 13613  1234  2A3C               	goto	l5116
 13614  1235  0825               	movf	?_timeSince+1,w
 13615  1236  1D03               	btfss	3,2
 13616  1237  2A3C               	goto	l5116
 13617  1238  3032               	movlw	50
 13618  1239  0224               	subwf	?_timeSince,w
 13619  123A  1C03               	btfss	3,0
 13620  123B  2B49               	goto	l5162
 13621  123C                     l5116:	
 13622                           
 13623                           ;system.c: 206:    sensorUpdateInterval = sensorTimeout = timeNow();
 13624  123C  31AF  277A  3191   	fcall	_timeNow
 13625  123F  0140               	movlb	0	; select bank0
 13626  1240  0823               	movf	?_timeNow+3,w
 13627  1241  0142               	movlb	2	; select bank2
 13628  1242  00A3               	movwf	(checkSensor@sensorTimeout+3)^(0+256)
 13629  1243  0140               	movlb	0	; select bank0
 13630  1244  0822               	movf	?_timeNow+2,w
 13631  1245  0142               	movlb	2	; select bank2
 13632  1246  00A2               	movwf	(checkSensor@sensorTimeout+2)^(0+256)
 13633  1247  0140               	movlb	0	; select bank0
 13634  1248  0821               	movf	?_timeNow+1,w
 13635  1249  0142               	movlb	2	; select bank2
 13636  124A  00A1               	movwf	(checkSensor@sensorTimeout+1)^(0+256)
 13637  124B  0140               	movlb	0	; select bank0
 13638  124C  0820               	movf	?_timeNow,w
 13639  124D  0142               	movlb	2	; select bank2
 13640  124E  00A0               	movwf	checkSensor@sensorTimeout^(0+256)
 13641  124F  0823               	movf	(checkSensor@sensorTimeout+3)^(0+256),w
 13642  1250  00A7               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+256)
 13643  1251  0822               	movf	(checkSensor@sensorTimeout+2)^(0+256),w
 13644  1252  00A6               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+256)
 13645  1253  0821               	movf	(checkSensor@sensorTimeout+1)^(0+256),w
 13646  1254  00A5               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+256)
 13647  1255  0820               	movf	checkSensor@sensorTimeout^(0+256),w
 13648  1256  00A4               	movwf	checkSensor@sensorUpdateInterval^(0+256)
 13649                           
 13650                           ;system.c: 207:    uartSendByte('?');
 13651  1257  303F               	movlw	63
 13652  1258  31AF  2722  3191   	fcall	_uartSendByte
 13653                           
 13654                           ;system.c: 208:    state = 1;
 13655  125B  0141               	movlb	1	; select bank1
 13656  125C  01DE               	clrf	checkSensor@state^(0+128)
 13657  125D  0ADE               	incf	checkSensor@state^(0+128),f
 13658  125E  2B49               	goto	l5162
 13659  125F                     l5122:	
 13660                           
 13661                           ;system.c: 213:   if (timeSince(sensorTimeout) > 20) {
 13662  125F  0142               	movlb	2	; select bank2
 13663  1260  0823               	movf	(checkSensor@sensorTimeout+3)^(0+256),w
 13664  1261  0140               	movlb	0	; select bank0
 13665  1262  00A7               	movwf	timeSince@since+3
 13666  1263  0142               	movlb	2	; select bank2
 13667  1264  0822               	movf	(checkSensor@sensorTimeout+2)^(0+256),w
 13668  1265  0140               	movlb	0	; select bank0
 13669  1266  00A6               	movwf	timeSince@since+2
 13670  1267  0142               	movlb	2	; select bank2
 13671  1268  0821               	movf	(checkSensor@sensorTimeout+1)^(0+256),w
 13672  1269  0140               	movlb	0	; select bank0
 13673  126A  00A5               	movwf	timeSince@since+1
 13674  126B  0142               	movlb	2	; select bank2
 13675  126C  0820               	movf	checkSensor@sensorTimeout^(0+256),w
 13676  126D  0140               	movlb	0	; select bank0
 13677  126E  00A4               	movwf	timeSince@since
 13678  126F  3190  2000  3191   	fcall	_timeSince
 13679  1272  0140               	movlb	0	; select bank0
 13680  1273  0827               	movf	?_timeSince+3,w
 13681  1274  1D03               	btfss	3,2
 13682  1275  2A80               	goto	l5124
 13683  1276  0826               	movf	?_timeSince+2,w
 13684  1277  1D03               	btfss	3,2
 13685  1278  2A80               	goto	l5124
 13686  1279  0825               	movf	?_timeSince+1,w
 13687  127A  1D03               	btfss	3,2
 13688  127B  2A80               	goto	l5124
 13689  127C  3015               	movlw	21
 13690  127D  0224               	subwf	?_timeSince,w
 13691  127E  1C03               	btfss	3,0
 13692  127F  2A8D               	goto	l5130
 13693  1280                     l5124:	
 13694                           
 13695                           ;system.c: 214:    data->status.SENSOR_OK = 0;
 13696  1280  0141               	movlb	1	; select bank1
 13697  1281  0824               	movf	checkSensor@data^(0+128),w
 13698  1282  3E2C               	addlw	44
 13699  1283  0086               	movwf	6
 13700  1284  3000               	movlw	0
 13701  1285  3D25               	addwfc	(checkSensor@data+1)^(0+128),w
 13702  1286  0087               	movwf	7
 13703  1287  1081               	bcf	1,1
 13704                           
 13705                           ;system.c: 215:    state = 0;
 13706  1288  01DE               	clrf	checkSensor@state^(0+128)
 13707                           
 13708                           ;system.c: 216:    uartReset();
 13709  1289  31AF  270F  3191   	fcall	_uartReset
 13710                           
 13711                           ;system.c: 217:   } else if (uartIsDataReady()) {
 13712  128C  2B49               	goto	l5162
 13713  128D                     l5130:	
 13714  128D  31AF  2741  3191   	fcall	_uartIsDataReady
 13715  1290  3A00               	xorlw	0
 13716  1291  1903               	skipnz
 13717  1292  2B49               	goto	l5162
 13718                           
 13719                           ;system.c: 218:    dp = getDataPacket();
 13720  1293  31AE  26E5  3191   	fcall	_getDataPacket
 13721  1296  0141               	movlb	1	; select bank1
 13722  1297  00A6               	movwf	??_checkSensor^(0+128)
 13723  1298  0826               	movf	??_checkSensor^(0+128),w
 13724  1299  00AA               	movwf	checkSensor@dp^(0+128)
 13725                           
 13726                           ;system.c: 220:    if ((dp->header == 0xAA) && (dp->status == 1)) {
 13727  129A  082A               	movf	checkSensor@dp^(0+128),w
 13728  129B  0086               	movwf	6
 13729  129C  3001               	movlw	1	; select bank2/3
 13730  129D  0087               	movwf	7
 13731  129E  30AA               	movlw	170
 13732  129F  0601               	xorwf	1,w
 13733  12A0  1D03               	btfss	3,2
 13734  12A1  2B2C               	goto	l5152
 13735  12A2  082A               	movf	checkSensor@dp^(0+128),w
 13736  12A3  3E02               	addlw	2
 13737  12A4  0086               	movwf	6
 13738  12A5  3001               	movlw	1	; select bank2/3
 13739  12A6  0087               	movwf	7
 13740  12A7  0301               	decf	1,w
 13741  12A8  1D03               	btfss	3,2
 13742  12A9  2B2C               	goto	l5152
 13743                           
 13744                           ;system.c: 221:     data->tempC = dp->tempC;
 13745  12AA  082A               	movf	checkSensor@dp^(0+128),w
 13746  12AB  3E03               	addlw	3
 13747  12AC  0086               	movwf	6
 13748  12AD  3001               	movlw	1	; select bank2/3
 13749  12AE  0087               	movwf	7
 13750  12AF  3F40               	moviw [0]fsr1
 13751  12B0  00A6               	movwf	??_checkSensor^(0+128)
 13752  12B1  3F41               	moviw [1]fsr1
 13753  12B2  00A7               	movwf	(??_checkSensor^(0+128)+1)
 13754  12B3  3F42               	moviw [2]fsr1
 13755  12B4  00A8               	movwf	(??_checkSensor^(0+128)+2)
 13756  12B5  3F43               	moviw [3]fsr1
 13757  12B6  00A9               	movwf	(??_checkSensor^(0+128)+3)
 13758  12B7  0824               	movf	checkSensor@data^(0+128),w
 13759  12B8  0086               	movwf	6
 13760  12B9  0825               	movf	(checkSensor@data+1)^(0+128),w
 13761  12BA  0087               	movwf	7
 13762  12BB  0826               	movf	??_checkSensor^(0+128),w
 13763  12BC  3FC0               	movwi [0]fsr1
 13764  12BD  0827               	movf	(??_checkSensor+1)^(0+128),w
 13765  12BE  3FC1               	movwi [1]fsr1
 13766  12BF  0828               	movf	(??_checkSensor+2)^(0+128),w
 13767  12C0  3FC2               	movwi [2]fsr1
 13768  12C1  0829               	movf	(??_checkSensor+3)^(0+128),w
 13769  12C2  3FC3               	movwi [3]fsr1
 13770                           
 13771                           ;system.c: 222:     data->relHum = dp->relHum;
 13772  12C3  082A               	movf	checkSensor@dp^(0+128),w
 13773  12C4  3E07               	addlw	7
 13774  12C5  0086               	movwf	6
 13775  12C6  3001               	movlw	1	; select bank2/3
 13776  12C7  0087               	movwf	7
 13777  12C8  3F40               	moviw [0]fsr1
 13778  12C9  00A6               	movwf	??_checkSensor^(0+128)
 13779  12CA  3F41               	moviw [1]fsr1
 13780  12CB  00A7               	movwf	(??_checkSensor^(0+128)+1)
 13781  12CC  3F42               	moviw [2]fsr1
 13782  12CD  00A8               	movwf	(??_checkSensor^(0+128)+2)
 13783  12CE  3F43               	moviw [3]fsr1
 13784  12CF  00A9               	movwf	(??_checkSensor^(0+128)+3)
 13785  12D0  0824               	movf	checkSensor@data^(0+128),w
 13786  12D1  0086               	movwf	6
 13787  12D2  0825               	movf	(checkSensor@data+1)^(0+128),w
 13788  12D3  0087               	movwf	7
 13789  12D4  3144               	addfsr 1,4
 13790  12D5  0826               	movf	??_checkSensor^(0+128),w
 13791  12D6  3FC0               	movwi [0]fsr1
 13792  12D7  0827               	movf	(??_checkSensor+1)^(0+128),w
 13793  12D8  3FC1               	movwi [1]fsr1
 13794  12D9  0828               	movf	(??_checkSensor+2)^(0+128),w
 13795  12DA  3FC2               	movwi [2]fsr1
 13796  12DB  0829               	movf	(??_checkSensor+3)^(0+128),w
 13797  12DC  3FC3               	movwi [3]fsr1
 13798                           
 13799                           ;system.c: 223:     data->dewPointC = dp->dewPointC;
 13800  12DD  082A               	movf	checkSensor@dp^(0+128),w
 13801  12DE  3E0B               	addlw	11
 13802  12DF  0086               	movwf	6
 13803  12E0  3001               	movlw	1	; select bank2/3
 13804  12E1  0087               	movwf	7
 13805  12E2  3F40               	moviw [0]fsr1
 13806  12E3  00A6               	movwf	??_checkSensor^(0+128)
 13807  12E4  3F41               	moviw [1]fsr1
 13808  12E5  00A7               	movwf	(??_checkSensor^(0+128)+1)
 13809  12E6  3F42               	moviw [2]fsr1
 13810  12E7  00A8               	movwf	(??_checkSensor^(0+128)+2)
 13811  12E8  3F43               	moviw [3]fsr1
 13812  12E9  00A9               	movwf	(??_checkSensor^(0+128)+3)
 13813  12EA  0824               	movf	checkSensor@data^(0+128),w
 13814  12EB  0086               	movwf	6
 13815  12EC  0825               	movf	(checkSensor@data+1)^(0+128),w
 13816  12ED  0087               	movwf	7
 13817  12EE  3148               	addfsr 1,8
 13818  12EF  0826               	movf	??_checkSensor^(0+128),w
 13819  12F0  3FC0               	movwi [0]fsr1
 13820  12F1  0827               	movf	(??_checkSensor+1)^(0+128),w
 13821  12F2  3FC1               	movwi [1]fsr1
 13822  12F3  0828               	movf	(??_checkSensor+2)^(0+128),w
 13823  12F4  3FC2               	movwi [2]fsr1
 13824  12F5  0829               	movf	(??_checkSensor+3)^(0+128),w
 13825  12F6  3FC3               	movwi [3]fsr1
 13826                           
 13827                           ;system.c: 224:     data->sensorVersion = dp->version;
 13828  12F7  0A2A               	incf	checkSensor@dp^(0+128),w
 13829  12F8  0086               	movwf	6
 13830  12F9  3001               	movlw	1	; select bank2/3
 13831  12FA  0087               	movwf	7
 13832  12FB  0801               	movf	1,w
 13833  12FC  00A6               	movwf	??_checkSensor^(0+128)
 13834  12FD  01A7               	clrf	(??_checkSensor^(0+128)+1)
 13835  12FE  01A8               	clrf	(??_checkSensor^(0+128)+2)
 13836  12FF  01A9               	clrf	(??_checkSensor^(0+128)+3)
 13837  1300  0829               	movf	(??_checkSensor+3)^(0+128),w
 13838  1301  0140               	movlb	0	; select bank0
 13839  1302  00A9               	movwf	___xxtofl@val+3
 13840  1303  0141               	movlb	1	; select bank1
 13841  1304  0828               	movf	(??_checkSensor+2)^(0+128),w
 13842  1305  0140               	movlb	0	; select bank0
 13843  1306  00A8               	movwf	___xxtofl@val+2
 13844  1307  0141               	movlb	1	; select bank1
 13845  1308  0827               	movf	(??_checkSensor+1)^(0+128),w
 13846  1309  0140               	movlb	0	; select bank0
 13847  130A  00A7               	movwf	___xxtofl@val+1
 13848  130B  0141               	movlb	1	; select bank1
 13849  130C  0826               	movf	??_checkSensor^(0+128),w
 13850  130D  0140               	movlb	0	; select bank0
 13851  130E  00A6               	movwf	___xxtofl@val
 13852  130F  3000               	movlw	0
 13853  1310  3198  201D         	fcall	___xxtofl
 13854  1312  0141               	movlb	1	; select bank1
 13855  1313  0824               	movf	checkSensor@data^(0+128),w
 13856  1314  0086               	movwf	6
 13857  1315  0825               	movf	(checkSensor@data+1)^(0+128),w
 13858  1316  0087               	movwf	7
 13859  1317  314C               	addfsr 1,12
 13860  1318  0140               	movlb	0	; select bank0
 13861  1319  0826               	movf	?___xxtofl,w
 13862  131A  3FC0               	movwi [0]fsr1
 13863  131B  0827               	movf	?___xxtofl+1,w
 13864  131C  3FC1               	movwi [1]fsr1
 13865  131D  0828               	movf	?___xxtofl+2,w
 13866  131E  3FC2               	movwi [2]fsr1
 13867  131F  0829               	movf	?___xxtofl+3,w
 13868  1320  3FC3               	movwi [3]fsr1
 13869                           
 13870                           ;system.c: 225:     data->status.SENSOR_OK = 1;
 13871  1321  0141               	movlb	1	; select bank1
 13872  1322  0824               	movf	checkSensor@data^(0+128),w
 13873  1323  3E2C               	addlw	44
 13874  1324  0086               	movwf	6
 13875  1325  3000               	movlw	0
 13876  1326  3D25               	addwfc	(checkSensor@data+1)^(0+128),w
 13877  1327  0087               	movwf	7
 13878  1328  1481               	bsf	1,1
 13879                           
 13880                           ;system.c: 226:     state = 0;
 13881  1329  01DE               	clrf	checkSensor@state^(0+128)
 13882                           
 13883                           ;system.c: 228:     return 1;
 13884  132A  3001               	movlw	1
 13885  132B  0008               	return
 13886  132C                     l5152:	
 13887                           
 13888                           ;system.c: 231:     data->status.SENSOR_OK = 0;
 13889  132C  0824               	movf	checkSensor@data^(0+128),w
 13890  132D  3E2C               	addlw	44
 13891  132E  0086               	movwf	6
 13892  132F  3000               	movlw	0
 13893  1330  3D25               	addwfc	(checkSensor@data+1)^(0+128),w
 13894  1331  0087               	movwf	7
 13895  1332  1081               	bcf	1,1
 13896                           
 13897                           ;system.c: 232:     uartReset();
 13898  1333  31AF  270F  3191   	fcall	_uartReset
 13899  1336                     l5156:	
 13900                           
 13901                           ;system.c: 234:    state = 0;
 13902  1336  0141               	movlb	1	; select bank1
 13903  1337  01DE               	clrf	checkSensor@state^(0+128)
 13904  1338  2B49               	goto	l5162
 13905  1339                     l5160:	
 13906  1339  085E               	movf	checkSensor@state^(0+128),w
 13907  133A  00A6               	movwf	??_checkSensor^(0+128)
 13908  133B  01A7               	clrf	(??_checkSensor^(0+128)+1)
 13909                           
 13910                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13911                           ; Switch size 1, requested type "simple"
 13912                           ; Number of cases is 1, Range of values is 0 to 0
 13913                           ; switch strategies available:
 13914                           ; Name         Instructions Cycles
 13915                           ; simple_byte            4     3 (average)
 13916                           ; direct_byte            8     6 (fixed)
 13917                           ; jumptable            260     6 (fixed)
 13918                           ;	Chosen strategy is simple_byte
 13919  133C  0827               	movf	(??_checkSensor+1)^(0+128),w
 13920  133D  3A00               	xorlw	0	; case 0
 13921  133E  1903               	skipnz
 13922  133F  2B41               	goto	l5968
 13923  1340  2B36               	goto	l5156
 13924  1341                     l5968:	
 13925                           
 13926                           ; Switch size 1, requested type "simple"
 13927                           ; Number of cases is 2, Range of values is 0 to 1
 13928                           ; switch strategies available:
 13929                           ; Name         Instructions Cycles
 13930                           ; simple_byte            7     4 (average)
 13931                           ; direct_byte           10     6 (fixed)
 13932                           ; jumptable            260     6 (fixed)
 13933                           ;	Chosen strategy is simple_byte
 13934  1341  0826               	movf	??_checkSensor^(0+128),w
 13935  1342  3A00               	xorlw	0	; case 0
 13936  1343  1903               	skipnz
 13937  1344  2A1B               	goto	l5114
 13938  1345  3A01               	xorlw	1	; case 1
 13939  1346  1903               	skipnz
 13940  1347  2A5F               	goto	l5122
 13941  1348  2B36               	goto	l5156
 13942  1349                     l5162:	
 13943                           
 13944                           ;system.c: 241:  return 0;
 13945  1349  3000               	movlw	0
 13946  134A  0008               	return
 13947  134B                     __end_of_checkSensor:	
 13948                           
 13949                           	psect	text36
 13950  2F22                     __ptext36:	
 13951 ;; *************** function _uartSendByte *****************
 13952 ;; Defined at:
 13953 ;;		line 27 in file "uart.c"
 13954 ;; Parameters:    Size  Location     Type
 13955 ;;  s               1    wreg     unsigned char 
 13956 ;; Auto vars:     Size  Location     Type
 13957 ;;  s               1    0[BANK0 ] unsigned char 
 13958 ;; Return value:  Size  Location     Type
 13959 ;;                  1    wreg      void 
 13960 ;; Registers used:
 13961 ;;		wreg
 13962 ;; Tracked objects:
 13963 ;;		On entry : 0/0
 13964 ;;		On exit  : 0/0
 13965 ;;		Unchanged: 0/0
 13966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13970 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13971 ;;Total ram usage:        1 bytes
 13972 ;; Hardware stack levels used:    1
 13973 ;; Hardware stack levels required when called:    3
 13974 ;; This function calls:
 13975 ;;		Nothing
 13976 ;; This function is called by:
 13977 ;;		_checkSensor
 13978 ;; This function uses a non-reentrant model
 13979 ;;
 13980                           
 13981                           
 13982                           ;psect for function _uartSendByte
 13983  2F22                     _uartSendByte:	
 13984                           
 13985                           ;incstack = 0
 13986                           ; Regs used in _uartSendByte: [wreg]
 13987                           ;uartSendByte@s stored from wreg
 13988  2F22  0140               	movlb	0	; select bank0
 13989  2F23  00A0               	movwf	uartSendByte@s
 13990                           
 13991                           ;uart.c: 27: void uartSendByte(char s);uart.c: 28: {;uart.c: 29:  TX1REG = s;
 13992  2F24  0820               	movf	uartSendByte@s,w
 13993  2F25  0142               	movlb	2	; select bank2
 13994  2F26  009A               	movwf	26	;volatile
 13995                           
 13996                           ;uart.c: 30:  __nop();
 13997  2F27  0000               	nop
 13998  2F28                     l370:	
 13999                           ;uart.c: 31:  while (!PIR3bits.TX1IF);
 14000                           
 14001  2F28  014E               	movlb	14	; select bank14
 14002  2F29  1A0F               	btfsc	15,4	;volatile
 14003  2F2A  0008               	return
 14004  2F2B  2F28               	goto	l370
 14005  2F2C                     __end_of_uartSendByte:	
 14006                           
 14007                           	psect	text37
 14008  2F0F                     __ptext37:	
 14009 ;; *************** function _uartReset *****************
 14010 ;; Defined at:
 14011 ;;		line 73 in file "uart.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;		None
 14014 ;; Auto vars:     Size  Location     Type
 14015 ;;  dump            1    0        unsigned char 
 14016 ;; Return value:  Size  Location     Type
 14017 ;;                  1    wreg      void 
 14018 ;; Registers used:
 14019 ;;		wreg, status,2
 14020 ;; Tracked objects:
 14021 ;;		On entry : 0/0
 14022 ;;		On exit  : 0/0
 14023 ;;		Unchanged: 0/0
 14024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14026 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14028 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14029 ;;Total ram usage:        1 bytes
 14030 ;; Hardware stack levels used:    1
 14031 ;; Hardware stack levels required when called:    3
 14032 ;; This function calls:
 14033 ;;		Nothing
 14034 ;; This function is called by:
 14035 ;;		_checkSensor
 14036 ;; This function uses a non-reentrant model
 14037 ;;
 14038                           
 14039                           
 14040                           ;psect for function _uartReset
 14041  2F0F                     _uartReset:	
 14042                           
 14043                           ;incstack = 0
 14044                           ; Regs used in _uartReset: [wreg+status,2]
 14045  2F0F  0142               	movlb	2	; select bank2
 14046  2F10  0819               	movf	25,w	;volatile
 14047                           
 14048                           ;uart.c: 77:  RC1STAbits.CREN = 0;
 14049  2F11  121D               	bcf	29,4	;volatile
 14050                           
 14051                           ;uart.c: 78:  RC1STAbits.CREN = 1;
 14052  2F12  161D               	bsf	29,4	;volatile
 14053                           
 14054                           ;uart.c: 79:  RC1STAbits.SPEN = 0;
 14055  2F13  139D               	bcf	29,7	;volatile
 14056                           
 14057                           ;uart.c: 80:  RC1STAbits.SPEN = 1;
 14058  2F14  179D               	bsf	29,7	;volatile
 14059                           
 14060                           ;uart.c: 81:  rxCount = 0;
 14061  2F15  0141               	movlb	1	; select bank1
 14062  2F16  01EB               	clrf	_rxCount^(0+128)	;volatile
 14063  2F17  0008               	return
 14064  2F18                     __end_of_uartReset:	
 14065                           
 14066                           	psect	text38
 14067  2F41                     __ptext38:	
 14068 ;; *************** function _uartIsDataReady *****************
 14069 ;; Defined at:
 14070 ;;		line 13 in file "uart.c"
 14071 ;; Parameters:    Size  Location     Type
 14072 ;;		None
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;  ret             1    1[BANK0 ] unsigned char 
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  1    wreg      unsigned char 
 14077 ;; Registers used:
 14078 ;;		wreg, status,2
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14088 ;;Total ram usage:        2 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    3
 14091 ;; This function calls:
 14092 ;;		Nothing
 14093 ;; This function is called by:
 14094 ;;		_checkSensor
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           
 14099                           ;psect for function _uartIsDataReady
 14100  2F41                     _uartIsDataReady:	
 14101                           
 14102                           ;uart.c: 15:  uint8_t ret = dataReadyFlag;
 14103                           
 14104                           ;incstack = 0
 14105                           ; Regs used in _uartIsDataReady: [wreg+status,2]
 14106  2F41  0141               	movlb	1	; select bank1
 14107  2F42  086A               	movf	_dataReadyFlag^(0+128),w	;volatile
 14108  2F43  0140               	movlb	0	; select bank0
 14109  2F44  00A0               	movwf	??_uartIsDataReady
 14110  2F45  0820               	movf	??_uartIsDataReady,w
 14111  2F46  00A1               	movwf	uartIsDataReady@ret
 14112                           
 14113                           ;uart.c: 16:  dataReadyFlag = 0;
 14114  2F47  0141               	movlb	1	; select bank1
 14115  2F48  01EA               	clrf	_dataReadyFlag^(0+128)	;volatile
 14116                           
 14117                           ;uart.c: 17:  return ret;
 14118  2F49  0140               	movlb	0	; select bank0
 14119  2F4A  0821               	movf	uartIsDataReady@ret,w
 14120  2F4B  0008               	return
 14121  2F4C                     __end_of_uartIsDataReady:	
 14122                           
 14123                           	psect	text39
 14124  1000                     __ptext39:	
 14125 ;; *************** function _timeSince *****************
 14126 ;; Defined at:
 14127 ;;		line 21 in file "interrupt.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;  since           4    4[BANK0 ] unsigned long 
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;  now             4   16[BANK0 ] unsigned long 
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  4    4[BANK0 ] unsigned long 
 14134 ;; Registers used:
 14135 ;;		wreg, pclath, cstack
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14141 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14142 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14143 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14144 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14145 ;;Total ram usage:       16 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:    4
 14148 ;; This function calls:
 14149 ;;		_timeNow
 14150 ;; This function is called by:
 14151 ;;		_main
 14152 ;;		_checkSensor
 14153 ;; This function uses a non-reentrant model
 14154 ;;
 14155                           
 14156                           
 14157                           ;psect for function _timeSince
 14158  1000                     _timeSince:	
 14159                           
 14160                           ;interrupt.c: 21: uint32_t timeSince(uint32_t since);interrupt.c: 22: {;interrupt.c: 23:
      +                            uint32_t now = timeNow();
 14161                           
 14162                           ;incstack = 0
 14163                           ; Regs used in _timeSince: [wreg+pclath+cstack]
 14164  1000  31AF  277A  3190   	fcall	_timeNow
 14165  1003  0140               	movlb	0	; select bank0
 14166  1004  0823               	movf	?_timeNow+3,w
 14167  1005  00B3               	movwf	timeSince@now+3
 14168  1006  0822               	movf	?_timeNow+2,w
 14169  1007  00B2               	movwf	timeSince@now+2
 14170  1008  0821               	movf	?_timeNow+1,w
 14171  1009  00B1               	movwf	timeSince@now+1
 14172  100A  0820               	movf	?_timeNow,w
 14173  100B  00B0               	movwf	timeSince@now
 14174                           
 14175                           ;interrupt.c: 24:  if (now >= since)
 14176  100C  0827               	movf	timeSince@since+3,w
 14177  100D  0233               	subwf	timeSince@now+3,w
 14178  100E  1D03               	skipz
 14179  100F  281A               	goto	u5185
 14180  1010  0826               	movf	timeSince@since+2,w
 14181  1011  0232               	subwf	timeSince@now+2,w
 14182  1012  1D03               	skipz
 14183  1013  281A               	goto	u5185
 14184  1014  0825               	movf	timeSince@since+1,w
 14185  1015  0231               	subwf	timeSince@now+1,w
 14186  1016  1D03               	skipz
 14187  1017  281A               	goto	u5185
 14188  1018  0824               	movf	timeSince@since,w
 14189  1019  0230               	subwf	timeSince@now,w
 14190  101A                     u5185:	
 14191  101A  1C03               	skipc
 14192  101B  2831               	goto	l4396
 14193                           
 14194                           ;interrupt.c: 25:   return (now - since);
 14195  101C  0824               	movf	timeSince@since,w
 14196  101D  0230               	subwf	timeSince@now,w
 14197  101E  00A8               	movwf	??_timeSince
 14198  101F  0825               	movf	timeSince@since+1,w
 14199  1020  3B31               	subwfb	timeSince@now+1,w
 14200  1021  00A9               	movwf	??_timeSince+1
 14201  1022  0826               	movf	timeSince@since+2,w
 14202  1023  3B32               	subwfb	timeSince@now+2,w
 14203  1024  00AA               	movwf	??_timeSince+2
 14204  1025  0827               	movf	timeSince@since+3,w
 14205  1026  3B33               	subwfb	timeSince@now+3,w
 14206  1027  00AB               	movwf	??_timeSince+3
 14207  1028  082B               	movf	??_timeSince+3,w
 14208  1029  00A7               	movwf	?_timeSince+3
 14209  102A  082A               	movf	??_timeSince+2,w
 14210  102B  00A6               	movwf	?_timeSince+2
 14211  102C  0829               	movf	??_timeSince+1,w
 14212  102D  00A5               	movwf	?_timeSince+1
 14213  102E  0828               	movf	??_timeSince,w
 14214  102F  00A4               	movwf	?_timeSince
 14215  1030  0008               	return
 14216  1031                     l4396:	
 14217                           
 14218                           ;interrupt.c: 27:  return (now + (1 + 1000000000UL - since));
 14219  1031  3001               	movlw	1
 14220  1032  00A8               	movwf	??_timeSince
 14221  1033  30CA               	movlw	202
 14222  1034  00A9               	movwf	??_timeSince+1
 14223  1035  309A               	movlw	154
 14224  1036  00AA               	movwf	??_timeSince+2
 14225  1037  303B               	movlw	59
 14226  1038  00AB               	movwf	??_timeSince+3
 14227  1039  0824               	movf	timeSince@since,w
 14228  103A  0230               	subwf	timeSince@now,w
 14229  103B  00AC               	movwf	??_timeSince+4
 14230  103C  0825               	movf	timeSince@since+1,w
 14231  103D  3B31               	subwfb	timeSince@now+1,w
 14232  103E  00AD               	movwf	??_timeSince+5
 14233  103F  0826               	movf	timeSince@since+2,w
 14234  1040  3B32               	subwfb	timeSince@now+2,w
 14235  1041  00AE               	movwf	??_timeSince+6
 14236  1042  0827               	movf	timeSince@since+3,w
 14237  1043  3B33               	subwfb	timeSince@now+3,w
 14238  1044  00AF               	movwf	??_timeSince+7
 14239  1045  082C               	movf	??_timeSince+4,w
 14240  1046  07A8               	addwf	??_timeSince,f
 14241  1047  082D               	movf	??_timeSince+5,w
 14242  1048  3DA9               	addwfc	??_timeSince+1,f
 14243  1049  082E               	movf	??_timeSince+6,w
 14244  104A  3DAA               	addwfc	??_timeSince+2,f
 14245  104B  082F               	movf	??_timeSince+7,w
 14246  104C  3DAB               	addwfc	??_timeSince+3,f
 14247  104D  082B               	movf	??_timeSince+3,w
 14248  104E  00A7               	movwf	?_timeSince+3
 14249  104F  082A               	movf	??_timeSince+2,w
 14250  1050  00A6               	movwf	?_timeSince+2
 14251  1051  0829               	movf	??_timeSince+1,w
 14252  1052  00A5               	movwf	?_timeSince+1
 14253  1053  0828               	movf	??_timeSince,w
 14254  1054  00A4               	movwf	?_timeSince
 14255  1055  0008               	return
 14256  1056                     __end_of_timeSince:	
 14257                           
 14258                           	psect	text40
 14259  2F7A                     __ptext40:	
 14260 ;; *************** function _timeNow *****************
 14261 ;; Defined at:
 14262 ;;		line 13 in file "interrupt.c"
 14263 ;; Parameters:    Size  Location     Type
 14264 ;;		None
 14265 ;; Auto vars:     Size  Location     Type
 14266 ;;		None
 14267 ;; Return value:  Size  Location     Type
 14268 ;;                  4    0[BANK0 ] unsigned long 
 14269 ;; Registers used:
 14270 ;;		wreg
 14271 ;; Tracked objects:
 14272 ;;		On entry : 0/0
 14273 ;;		On exit  : 0/0
 14274 ;;		Unchanged: 0/0
 14275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14276 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14279 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14280 ;;Total ram usage:        4 bytes
 14281 ;; Hardware stack levels used:    1
 14282 ;; Hardware stack levels required when called:    3
 14283 ;; This function calls:
 14284 ;;		Nothing
 14285 ;; This function is called by:
 14286 ;;		_main
 14287 ;;		_timeSince
 14288 ;;		_checkSensor
 14289 ;; This function uses a non-reentrant model
 14290 ;;
 14291                           
 14292                           
 14293                           ;psect for function _timeNow
 14294  2F7A                     _timeNow:	
 14295                           
 14296                           ;interrupt.c: 15:  return tick100ms;
 14297                           
 14298                           ;incstack = 0
 14299                           ; Regs used in _timeNow: [wreg]
 14300  2F7A  0142               	movlb	2	; select bank2
 14301  2F7B  082B               	movf	(_tick100ms+3)^(0+256),w	;volatile
 14302  2F7C  0140               	movlb	0	; select bank0
 14303  2F7D  00A3               	movwf	?_timeNow+3
 14304  2F7E  0142               	movlb	2	; select bank2
 14305  2F7F  082A               	movf	(_tick100ms+2)^(0+256),w	;volatile
 14306  2F80  0140               	movlb	0	; select bank0
 14307  2F81  00A2               	movwf	?_timeNow+2
 14308  2F82  0142               	movlb	2	; select bank2
 14309  2F83  0829               	movf	(_tick100ms+1)^(0+256),w	;volatile
 14310  2F84  0140               	movlb	0	; select bank0
 14311  2F85  00A1               	movwf	?_timeNow+1
 14312  2F86  0142               	movlb	2	; select bank2
 14313  2F87  0828               	movf	_tick100ms^(0+256),w	;volatile
 14314  2F88  0140               	movlb	0	; select bank0
 14315  2F89  00A0               	movwf	?_timeNow
 14316  2F8A  0008               	return
 14317  2F8B                     __end_of_timeNow:	
 14318                           
 14319                           	psect	text41
 14320  2EE5                     __ptext41:	
 14321 ;; *************** function _getDataPacket *****************
 14322 ;; Defined at:
 14323 ;;		line 20 in file "uart.c"
 14324 ;; Parameters:    Size  Location     Type
 14325 ;;		None
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;		None
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      PTR struct .
 14330 ;; Registers used:
 14331 ;;		wreg
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14341 ;;Total ram usage:        0 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; Hardware stack levels required when called:    3
 14344 ;; This function calls:
 14345 ;;		Nothing
 14346 ;; This function is called by:
 14347 ;;		_checkSensor
 14348 ;; This function uses a non-reentrant model
 14349 ;;
 14350                           
 14351                           
 14352                           ;psect for function _getDataPacket
 14353  2EE5                     _getDataPacket:	
 14354                           
 14355                           ;uart.c: 22:  return &dataPacket;
 14356                           
 14357                           ;incstack = 0
 14358                           ; Regs used in _getDataPacket: [wreg]
 14359  2EE5  304A               	movlw	(low (_dataPacket| (0+256)))& (0+255)
 14360  2EE6  0008               	return
 14361  2EE7                     __end_of_getDataPacket:	
 14362                           
 14363                           	psect	text42
 14364  0509                     __ptext42:	
 14365 ;; *************** function _checkChannelStatus *****************
 14366 ;; Defined at:
 14367 ;;		line 43 in file "system.c"
 14368 ;; Parameters:    Size  Location     Type
 14369 ;;  data            2    5[BANK1 ] PTR struct .
 14370 ;;		 -> data(173), 
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;  current         4   13[BANK1 ] float 
 14373 ;;  chData          2   17[BANK1 ] PTR struct .
 14374 ;;		 -> data.chData(128), data(173), 
 14375 ;;  adc             2   11[BANK1 ] unsigned short 
 14376 ;; Return value:  Size  Location     Type
 14377 ;;                  1    wreg      unsigned char 
 14378 ;; Registers used:
 14379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14380 ;; Tracked objects:
 14381 ;;		On entry : 0/0
 14382 ;;		On exit  : 0/0
 14383 ;;		Unchanged: 0/0
 14384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14385 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14386 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14387 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14388 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14389 ;;Total ram usage:       14 bytes
 14390 ;; Hardware stack levels used:    1
 14391 ;; Hardware stack levels required when called:    5
 14392 ;; This function calls:
 14393 ;;		___fldiv
 14394 ;;		___fleq
 14395 ;;		___flge
 14396 ;;		___flmul
 14397 ;;		___fltol
 14398 ;;		___xxtofl
 14399 ;;		_ema
 14400 ;;		_error
 14401 ;;		_getAnalogValue
 14402 ;;		_setChannelSwitch
 14403 ;;		_setLoadSwitch
 14404 ;; This function is called by:
 14405 ;;		_main
 14406 ;; This function uses a non-reentrant model
 14407 ;;
 14408                           
 14409                           
 14410                           ;psect for function _checkChannelStatus
 14411  0509                     _checkChannelStatus:	
 14412                           
 14413                           ;system.c: 43: uint8_t checkChannelStatus(t_globalData *data);system.c: 44: {;system.c: 
      +                          45:  uint16_t adc;;system.c: 46:  static uint16_t avg;;system.c: 47:  static uint8_t cha
      +                          nnel = 0;;system.c: 48:  static uint8_t samples = 0;;system.c: 49:  static uint8_t ready
      +                           = 0;;system.c: 50:  float current;;system.c: 51:  t_channelData *chData;;system.c: 53: 
      +                           if (ready) {
 14414                           
 14415                           ;incstack = 0
 14416                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14417  0509  0141               	movlb	1	; select bank1
 14418  050A  085F               	movf	checkChannelStatus@ready^(0+128),w
 14419  050B  1903               	btfsc	3,2
 14420  050C  2D2A               	goto	l5204
 14421                           
 14422                           ;system.c: 54:   ready = 0;
 14423  050D  01DF               	clrf	checkChannelStatus@ready^(0+128)
 14424                           
 14425                           ;system.c: 55:   samples = 0;
 14426  050E  01E0               	clrf	checkChannelStatus@samples^(0+128)
 14427                           
 14428                           ;system.c: 56:   channel = 0;
 14429  050F  01E1               	clrf	checkChannelStatus@channel^(0+128)
 14430                           
 14431                           ;system.c: 57:   avg = data->chData[channel].current;
 14432  0510  0825               	movf	checkChannelStatus@data^(0+128),w
 14433  0511  3E2D               	addlw	45
 14434  0512  0086               	movwf	6
 14435  0513  3000               	movlw	0
 14436  0514  3D26               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 14437  0515  0087               	movwf	7
 14438  0516  3F40               	moviw [0]fsr1
 14439  0517  0140               	movlb	0	; select bank0
 14440  0518  00E8               	movwf	___fltol@f1
 14441  0519  3F41               	moviw [1]fsr1
 14442  051A  00E9               	movwf	___fltol@f1+1
 14443  051B  3F42               	moviw [2]fsr1
 14444  051C  00EA               	movwf	___fltol@f1+2
 14445  051D  3F43               	moviw [3]fsr1
 14446  051E  00EB               	movwf	___fltol@f1+3
 14447  051F  31A6  2678  3185   	fcall	___fltol
 14448  0522  0140               	movlb	0	; select bank0
 14449  0523  0869               	movf	?___fltol+1,w
 14450  0524  0142               	movlb	2	; select bank2
 14451  0525  00B3               	movwf	(checkChannelStatus@avg+1)^(0+256)
 14452  0526  0140               	movlb	0	; select bank0
 14453  0527  0868               	movf	?___fltol,w
 14454  0528  0142               	movlb	2	; select bank2
 14455  0529  00B2               	movwf	checkChannelStatus@avg^(0+256)
 14456  052A                     l5204:	
 14457                           
 14458                           ;system.c: 60:  chData = &data->chData[channel];
 14459  052A  0141               	movlb	1	; select bank1
 14460  052B  0861               	movf	checkChannelStatus@channel^(0+128),w
 14461  052C  00A7               	movwf	??_checkChannelStatus^(0+128)
 14462  052D  01A8               	clrf	(??_checkChannelStatus^(0+128)+1)
 14463  052E  3005               	movlw	5
 14464  052F                     u5995:	
 14465  052F  35A7               	lslf	??_checkChannelStatus^(0+128),f
 14466  0530  0DA8               	rlf	(??_checkChannelStatus^(0+128)+1),f
 14467  0531  0B89               	decfsz	9,f
 14468  0532  2D2F               	goto	u5995
 14469  0533  0827               	movf	??_checkChannelStatus^(0+128),w
 14470  0534  0725               	addwf	checkChannelStatus@data^(0+128),w
 14471  0535  00A9               	movwf	(??_checkChannelStatus+2)^(0+128)
 14472  0536  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 14473  0537  3D26               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 14474  0538  00AA               	movwf	(??_checkChannelStatus+3)^(0+128)
 14475  0539  0829               	movf	(??_checkChannelStatus+2)^(0+128),w
 14476  053A  3E2D               	addlw	45
 14477  053B  00B1               	movwf	checkChannelStatus@chData^(0+128)
 14478  053C  3000               	movlw	0
 14479  053D  3D2A               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 14480  053E  00B2               	movwf	(checkChannelStatus@chData+1)^(0+128)
 14481                           
 14482                           ;system.c: 61:  setChannelSwitch(channel, 1);
 14483  053F  0140               	movlb	0	; select bank0
 14484  0540  01A0               	clrf	setChannelSwitch@state
 14485  0541  0AA0               	incf	setChannelSwitch@state,f
 14486  0542  0141               	movlb	1	; select bank1
 14487  0543  0861               	movf	checkChannelStatus@channel^(0+128),w
 14488  0544  31A2  2225  3185   	fcall	_setChannelSwitch
 14489                           
 14490                           ;system.c: 63:  if (samples++ < 10) {
 14491  0547  0141               	movlb	1	; select bank1
 14492  0548  0860               	movf	checkChannelStatus@samples^(0+128),w
 14493  0549  0AE0               	incf	checkChannelStatus@samples^(0+128),f
 14494  054A  00A7               	movwf	??_checkChannelStatus^(0+128)
 14495  054B  300A               	movlw	10
 14496  054C  0227               	subwf	??_checkChannelStatus^(0+128),w
 14497  054D  1803               	skipnc
 14498  054E  2D7D               	goto	l5212
 14499                           
 14500                           ;system.c: 64:   adc = getAnalogValue(0b010001);
 14501  054F  3011               	movlw	17
 14502  0550  3198  2000  3185   	fcall	_getAnalogValue
 14503  0553  0140               	movlb	0	; select bank0
 14504  0554  0821               	movf	?_getAnalogValue+1,w
 14505  0555  0141               	movlb	1	; select bank1
 14506  0556  00AC               	movwf	(checkChannelStatus@adc+1)^(0+128)
 14507  0557  0140               	movlb	0	; select bank0
 14508  0558  0820               	movf	?_getAnalogValue,w
 14509  0559  0141               	movlb	1	; select bank1
 14510  055A  00AB               	movwf	checkChannelStatus@adc^(0+128)
 14511                           
 14512                           ;system.c: 66:   avg = ema(adc, avg, ( (uint32_t)(0.65 * 65535) ));
 14513  055B  082C               	movf	(checkChannelStatus@adc+1)^(0+128),w
 14514  055C  0140               	movlb	0	; select bank0
 14515  055D  00AD               	movwf	ema@in+1
 14516  055E  0141               	movlb	1	; select bank1
 14517  055F  082B               	movf	checkChannelStatus@adc^(0+128),w
 14518  0560  0140               	movlb	0	; select bank0
 14519  0561  00AC               	movwf	ema@in
 14520  0562  0142               	movlb	2	; select bank2
 14521  0563  0833               	movf	(checkChannelStatus@avg+1)^(0+256),w
 14522  0564  0140               	movlb	0	; select bank0
 14523  0565  00AF               	movwf	ema@average+1
 14524  0566  0142               	movlb	2	; select bank2
 14525  0567  0832               	movf	checkChannelStatus@avg^(0+256),w
 14526  0568  0140               	movlb	0	; select bank0
 14527  0569  00AE               	movwf	ema@average
 14528  056A  3000               	movlw	0
 14529  056B  00B3               	movwf	ema@alpha+3
 14530  056C  3000               	movlw	0
 14531  056D  00B2               	movwf	ema@alpha+2
 14532  056E  30A6               	movlw	166
 14533  056F  00B1               	movwf	ema@alpha+1
 14534  0570  3065               	movlw	101
 14535  0571  00B0               	movwf	ema@alpha
 14536  0572  31A3  23EF         	fcall	_ema
 14537  0574  0140               	movlb	0	; select bank0
 14538  0575  082D               	movf	?_ema+1,w
 14539  0576  0142               	movlb	2	; select bank2
 14540  0577  00B3               	movwf	(checkChannelStatus@avg+1)^(0+256)
 14541  0578  0140               	movlb	0	; select bank0
 14542  0579  082C               	movf	?_ema,w
 14543  057A  0142               	movlb	2	; select bank2
 14544  057B  00B2               	movwf	checkChannelStatus@avg^(0+256)
 14545                           
 14546                           ;system.c: 67:  } else {
 14547  057C  0008               	return
 14548  057D                     l5212:	
 14549                           
 14550                           ;system.c: 68:   setChannelSwitch(channel, 0);
 14551  057D  0140               	movlb	0	; select bank0
 14552  057E  01A0               	clrf	setChannelSwitch@state
 14553  057F  0141               	movlb	1	; select bank1
 14554  0580  0861               	movf	checkChannelStatus@channel^(0+128),w
 14555  0581  31A2  2225  3185   	fcall	_setChannelSwitch
 14556                           
 14557                           ;system.c: 70:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 14558  0584  3045               	movlw	69
 14559  0585  0140               	movlb	0	; select bank0
 14560  0586  00D1               	movwf	___fldiv@a+3
 14561  0587  301F               	movlw	31
 14562  0588  00D0               	movwf	___fldiv@a+2
 14563  0589  30D8               	movlw	216
 14564  058A  00CF               	movwf	___fldiv@a+1
 14565  058B  3000               	movlw	0
 14566  058C  00CE               	movwf	___fldiv@a
 14567  058D  3040               	movlw	64
 14568  058E  00B7               	movwf	___flmul@b+3
 14569  058F  30A0               	movlw	160
 14570  0590  00B6               	movwf	___flmul@b+2
 14571  0591  3000               	movlw	0
 14572  0592  00B5               	movwf	___flmul@b+1
 14573  0593  3000               	movlw	0
 14574  0594  00B4               	movwf	___flmul@b
 14575  0595  0142               	movlb	2	; select bank2
 14576  0596  0832               	movf	checkChannelStatus@avg^(0+256),w
 14577  0597  0140               	movlb	0	; select bank0
 14578  0598  00A6               	movwf	___xxtofl@val
 14579  0599  0142               	movlb	2	; select bank2
 14580  059A  0833               	movf	(checkChannelStatus@avg+1)^(0+256),w
 14581  059B  0140               	movlb	0	; select bank0
 14582  059C  00A7               	movwf	___xxtofl@val+1
 14583  059D  01A8               	clrf	___xxtofl@val+2
 14584  059E  01A9               	clrf	___xxtofl@val+3
 14585  059F  3000               	movlw	0
 14586  05A0  3198  201D  3185   	fcall	___xxtofl
 14587  05A3  0140               	movlb	0	; select bank0
 14588  05A4  0829               	movf	?___xxtofl+3,w
 14589  05A5  00BB               	movwf	___flmul@a+3
 14590  05A6  0828               	movf	?___xxtofl+2,w
 14591  05A7  00BA               	movwf	___flmul@a+2
 14592  05A8  0827               	movf	?___xxtofl+1,w
 14593  05A9  00B9               	movwf	___flmul@a+1
 14594  05AA  0826               	movf	?___xxtofl,w
 14595  05AB  00B8               	movwf	___flmul@a
 14596  05AC  318D  25D4  3185   	fcall	___flmul
 14597  05AF  0140               	movlb	0	; select bank0
 14598  05B0  0837               	movf	?___flmul+3,w
 14599  05B1  00D5               	movwf	___fldiv@b+3
 14600  05B2  0836               	movf	?___flmul+2,w
 14601  05B3  00D4               	movwf	___fldiv@b+2
 14602  05B4  0835               	movf	?___flmul+1,w
 14603  05B5  00D3               	movwf	___fldiv@b+1
 14604  05B6  0834               	movf	?___flmul,w
 14605  05B7  00D2               	movwf	___fldiv@b
 14606  05B8  3190  2056  3185   	fcall	___fldiv
 14607  05BB  0140               	movlb	0	; select bank0
 14608  05BC  0851               	movf	?___fldiv+3,w
 14609  05BD  0141               	movlb	1	; select bank1
 14610  05BE  00B0               	movwf	(checkChannelStatus@current+3)^(0+128)
 14611  05BF  0140               	movlb	0	; select bank0
 14612  05C0  0850               	movf	?___fldiv+2,w
 14613  05C1  0141               	movlb	1	; select bank1
 14614  05C2  00AF               	movwf	(checkChannelStatus@current+2)^(0+128)
 14615  05C3  0140               	movlb	0	; select bank0
 14616  05C4  084F               	movf	?___fldiv+1,w
 14617  05C5  0141               	movlb	1	; select bank1
 14618  05C6  00AE               	movwf	(checkChannelStatus@current+1)^(0+128)
 14619  05C7  0140               	movlb	0	; select bank0
 14620  05C8  084E               	movf	?___fldiv,w
 14621  05C9  0141               	movlb	1	; select bank1
 14622  05CA  00AD               	movwf	checkChannelStatus@current^(0+128)
 14623                           
 14624                           ;system.c: 73:   if (current < 0.05) {
 14625  05CB  0830               	movf	(checkChannelStatus@current+3)^(0+128),w
 14626  05CC  0140               	movlb	0	; select bank0
 14627  05CD  00EB               	movwf	___flge@ff1+3
 14628  05CE  0141               	movlb	1	; select bank1
 14629  05CF  082F               	movf	(checkChannelStatus@current+2)^(0+128),w
 14630  05D0  0140               	movlb	0	; select bank0
 14631  05D1  00EA               	movwf	___flge@ff1+2
 14632  05D2  0141               	movlb	1	; select bank1
 14633  05D3  082E               	movf	(checkChannelStatus@current+1)^(0+128),w
 14634  05D4  0140               	movlb	0	; select bank0
 14635  05D5  00E9               	movwf	___flge@ff1+1
 14636  05D6  0141               	movlb	1	; select bank1
 14637  05D7  082D               	movf	checkChannelStatus@current^(0+128),w
 14638  05D8  0140               	movlb	0	; select bank0
 14639  05D9  00E8               	movwf	___flge@ff1
 14640  05DA  303D               	movlw	61
 14641  05DB  00EF               	movwf	___flge@ff2+3
 14642  05DC  304C               	movlw	76
 14643  05DD  00EE               	movwf	___flge@ff2+2
 14644  05DE  30CC               	movlw	204
 14645  05DF  00ED               	movwf	___flge@ff2+1
 14646  05E0  30CD               	movlw	205
 14647  05E1  00EC               	movwf	___flge@ff2
 14648  05E2  3199  21F7  3185   	fcall	___flge
 14649  05E5  1803               	btfsc	3,0
 14650  05E6  2E02               	goto	l5224
 14651                           
 14652                           ;system.c: 75:    if (chData->status != CH_OPEN) {
 14653  05E7  0141               	movlb	1	; select bank1
 14654  05E8  0831               	movf	checkChannelStatus@chData^(0+128),w
 14655  05E9  0086               	movwf	6
 14656  05EA  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14657  05EB  0087               	movwf	7
 14658  05EC  315F               	addfsr 1,31
 14659  05ED  3002               	movlw	2
 14660  05EE  0601               	xorwf	1,w
 14661  05EF  1903               	btfsc	3,2
 14662  05F0  2FAE               	goto	l5270
 14663                           
 14664                           ;system.c: 76:     error(WARN_REMOVED);
 14665  05F1  3000               	movlw	0
 14666  05F2  3188  2000  3185   	fcall	_error
 14667                           
 14668                           ;system.c: 77:     chData->status = CH_OPEN;
 14669  05F5  0141               	movlb	1	; select bank1
 14670  05F6  0831               	movf	checkChannelStatus@chData^(0+128),w
 14671  05F7  3E1F               	addlw	31
 14672  05F8  00A7               	movwf	??_checkChannelStatus^(0+128)
 14673  05F9  3000               	movlw	0
 14674  05FA  3D32               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 14675  05FB  00A8               	movwf	(??_checkChannelStatus+1)^(0+128)
 14676  05FC  0827               	movf	??_checkChannelStatus^(0+128),w
 14677  05FD  0086               	movwf	6
 14678  05FE  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 14679  05FF  0087               	movwf	7
 14680  0600  3002               	movlw	2
 14681  0601  2FAD               	goto	L8
 14682  0602                     l5224:	
 14683  0602  303F               	movlw	63
 14684  0603  0140               	movlb	0	; select bank0
 14685  0604  00EB               	movwf	___flge@ff1+3
 14686  0605  3000               	movlw	0
 14687  0606  00EA               	movwf	___flge@ff1+2
 14688  0607  3000               	movlw	0
 14689  0608  00E9               	movwf	___flge@ff1+1
 14690  0609  3000               	movlw	0
 14691  060A  00E8               	movwf	___flge@ff1
 14692  060B  0141               	movlb	1	; select bank1
 14693  060C  0830               	movf	(checkChannelStatus@current+3)^(0+128),w
 14694  060D  0140               	movlb	0	; select bank0
 14695  060E  00EF               	movwf	___flge@ff2+3
 14696  060F  0141               	movlb	1	; select bank1
 14697  0610  082F               	movf	(checkChannelStatus@current+2)^(0+128),w
 14698  0611  0140               	movlb	0	; select bank0
 14699  0612  00EE               	movwf	___flge@ff2+2
 14700  0613  0141               	movlb	1	; select bank1
 14701  0614  082E               	movf	(checkChannelStatus@current+1)^(0+128),w
 14702  0615  0140               	movlb	0	; select bank0
 14703  0616  00ED               	movwf	___flge@ff2+1
 14704  0617  0141               	movlb	1	; select bank1
 14705  0618  082D               	movf	checkChannelStatus@current^(0+128),w
 14706  0619  0140               	movlb	0	; select bank0
 14707  061A  00EC               	movwf	___flge@ff2
 14708  061B  3199  21F7  3185   	fcall	___flge
 14709  061E  1C03               	btfss	3,0
 14710  061F  2E23               	goto	l5228
 14711  0620  0140               	movlb	0	; select bank0
 14712  0621  190E               	btfsc	14,2	;volatile
 14713  0622  2E55               	goto	l5242
 14714  0623                     l5228:	
 14715                           
 14716                           ;system.c: 82:    error(WARN_OVERCURRENT);
 14717  0623  3004               	movlw	4
 14718  0624  3188  2000  3185   	fcall	_error
 14719                           
 14720                           ;system.c: 83:    chData->status = CH_OVERCURRENT;
 14721  0627  0141               	movlb	1	; select bank1
 14722  0628  0831               	movf	checkChannelStatus@chData^(0+128),w
 14723  0629  3E1F               	addlw	31
 14724  062A  00A7               	movwf	??_checkChannelStatus^(0+128)
 14725  062B  3000               	movlw	0
 14726  062C  3D32               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 14727  062D  00A8               	movwf	(??_checkChannelStatus+1)^(0+128)
 14728  062E  0827               	movf	??_checkChannelStatus^(0+128),w
 14729  062F  0086               	movwf	6
 14730  0630  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 14731  0631  0087               	movwf	7
 14732  0632  3004               	movlw	4
 14733  0633  0081               	movwf	1
 14734                           
 14735                           ;system.c: 85:    if (! PORTCbits.RC2) {
 14736  0634  0140               	movlb	0	; select bank0
 14737  0635  190E               	btfsc	14,2	;volatile
 14738  0636  2FAE               	goto	l5270
 14739                           
 14740                           ;system.c: 86:     chData->status = CH_SHORTED;
 14741  0637  0141               	movlb	1	; select bank1
 14742  0638  0831               	movf	checkChannelStatus@chData^(0+128),w
 14743  0639  3E1F               	addlw	31
 14744  063A  00A7               	movwf	??_checkChannelStatus^(0+128)
 14745  063B  3000               	movlw	0
 14746  063C  3D32               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 14747  063D  00A8               	movwf	(??_checkChannelStatus+1)^(0+128)
 14748  063E  0827               	movf	??_checkChannelStatus^(0+128),w
 14749  063F  0086               	movwf	6
 14750  0640  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 14751  0641  0087               	movwf	7
 14752  0642  3003               	movlw	3
 14753  0643  0081               	movwf	1
 14754                           
 14755                           ;system.c: 87:     setLoadSwitch(0);
 14756  0644  3000               	movlw	0
 14757  0645  31AE  26F6  3185   	fcall	_setLoadSwitch
 14758                           
 14759                           ;system.c: 88:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 14760  0648  3007               	movlw	7
 14761  0649  0141               	movlb	1	; select bank1
 14762  064A  00A7               	movwf	??_checkChannelStatus^(0+128)
 14763  064B  307D               	movlw	125
 14764  064C                     u6957:	
 14765  064C  0B89               	decfsz	9,f
 14766  064D  2E4C               	goto	u6957
 14767  064E  0BA7               	decfsz	??_checkChannelStatus^(0+128),f
 14768  064F  2E4C               	goto	u6957
 14769                           
 14770                           ;system.c: 89:     setLoadSwitch(1);
 14771  0650  3001               	movlw	1
 14772  0651  31AE  26F6  3185   	fcall	_setLoadSwitch
 14773  0654  2FAE               	goto	l5270
 14774  0655                     l5242:	
 14775                           
 14776                           ;system.c: 92:    chData->current = current;
 14777  0655  0141               	movlb	1	; select bank1
 14778  0656  0831               	movf	checkChannelStatus@chData^(0+128),w
 14779  0657  0086               	movwf	6
 14780  0658  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14781  0659  0087               	movwf	7
 14782  065A  082D               	movf	checkChannelStatus@current^(0+128),w
 14783  065B  3FC0               	movwi [0]fsr1
 14784  065C  082E               	movf	(checkChannelStatus@current+1)^(0+128),w
 14785  065D  3FC1               	movwi [1]fsr1
 14786  065E  082F               	movf	(checkChannelStatus@current+2)^(0+128),w
 14787  065F  3FC2               	movwi [2]fsr1
 14788  0660  0830               	movf	(checkChannelStatus@current+3)^(0+128),w
 14789  0661  3FC3               	movwi [3]fsr1
 14790                           
 14791                           ;system.c: 93:    chData->Pmax = data->voltage * current;
 14792  0662  0830               	movf	(checkChannelStatus@current+3)^(0+128),w
 14793  0663  0140               	movlb	0	; select bank0
 14794  0664  00B7               	movwf	___flmul@b+3
 14795  0665  0141               	movlb	1	; select bank1
 14796  0666  082F               	movf	(checkChannelStatus@current+2)^(0+128),w
 14797  0667  0140               	movlb	0	; select bank0
 14798  0668  00B6               	movwf	___flmul@b+2
 14799  0669  0141               	movlb	1	; select bank1
 14800  066A  082E               	movf	(checkChannelStatus@current+1)^(0+128),w
 14801  066B  0140               	movlb	0	; select bank0
 14802  066C  00B5               	movwf	___flmul@b+1
 14803  066D  0141               	movlb	1	; select bank1
 14804  066E  082D               	movf	checkChannelStatus@current^(0+128),w
 14805  066F  0140               	movlb	0	; select bank0
 14806  0670  00B4               	movwf	___flmul@b
 14807  0671  0141               	movlb	1	; select bank1
 14808  0672  0825               	movf	checkChannelStatus@data^(0+128),w
 14809  0673  0086               	movwf	6
 14810  0674  0826               	movf	(checkChannelStatus@data+1)^(0+128),w
 14811  0675  0087               	movwf	7
 14812  0676  3154               	addfsr 1,20
 14813  0677  3F40               	moviw [0]fsr1
 14814  0678  0140               	movlb	0	; select bank0
 14815  0679  00B8               	movwf	___flmul@a
 14816  067A  3F41               	moviw [1]fsr1
 14817  067B  00B9               	movwf	___flmul@a+1
 14818  067C  3F42               	moviw [2]fsr1
 14819  067D  00BA               	movwf	___flmul@a+2
 14820  067E  3F43               	moviw [3]fsr1
 14821  067F  00BB               	movwf	___flmul@a+3
 14822  0680  318D  25D4  3185   	fcall	___flmul
 14823  0683  0141               	movlb	1	; select bank1
 14824  0684  0831               	movf	checkChannelStatus@chData^(0+128),w
 14825  0685  0086               	movwf	6
 14826  0686  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14827  0687  0087               	movwf	7
 14828  0688  3144               	addfsr 1,4
 14829  0689  0140               	movlb	0	; select bank0
 14830  068A  0834               	movf	?___flmul,w
 14831  068B  3FC0               	movwi [0]fsr1
 14832  068C  0835               	movf	?___flmul+1,w
 14833  068D  3FC1               	movwi [1]fsr1
 14834  068E  0836               	movf	?___flmul+2,w
 14835  068F  3FC2               	movwi [2]fsr1
 14836  0690  0837               	movf	?___flmul+3,w
 14837  0691  3FC3               	movwi [3]fsr1
 14838                           
 14839                           ;system.c: 96:    if (chData->Pset > chData->Pmax)
 14840  0692  0141               	movlb	1	; select bank1
 14841  0693  0831               	movf	checkChannelStatus@chData^(0+128),w
 14842  0694  0086               	movwf	6
 14843  0695  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14844  0696  0087               	movwf	7
 14845  0697  3144               	addfsr 1,4
 14846  0698  3F40               	moviw [0]fsr1
 14847  0699  0140               	movlb	0	; select bank0
 14848  069A  00E8               	movwf	___flge@ff1
 14849  069B  3F41               	moviw [1]fsr1
 14850  069C  00E9               	movwf	___flge@ff1+1
 14851  069D  3F42               	moviw [2]fsr1
 14852  069E  00EA               	movwf	___flge@ff1+2
 14853  069F  3F43               	moviw [3]fsr1
 14854  06A0  00EB               	movwf	___flge@ff1+3
 14855  06A1  0141               	movlb	1	; select bank1
 14856  06A2  0831               	movf	checkChannelStatus@chData^(0+128),w
 14857  06A3  0086               	movwf	6
 14858  06A4  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14859  06A5  0087               	movwf	7
 14860  06A6  3150               	addfsr 1,16
 14861  06A7  3F40               	moviw [0]fsr1
 14862  06A8  0140               	movlb	0	; select bank0
 14863  06A9  00EC               	movwf	___flge@ff2
 14864  06AA  3F41               	moviw [1]fsr1
 14865  06AB  00ED               	movwf	___flge@ff2+1
 14866  06AC  3F42               	moviw [2]fsr1
 14867  06AD  00EE               	movwf	___flge@ff2+2
 14868  06AE  3F43               	moviw [3]fsr1
 14869  06AF  00EF               	movwf	___flge@ff2+3
 14870  06B0  3199  21F7  3185   	fcall	___flge
 14871  06B3  1803               	btfsc	3,0
 14872  06B4  2ED0               	goto	l716
 14873                           
 14874                           ;system.c: 97:     chData->Pset = chData->Pmax;
 14875  06B5  0141               	movlb	1	; select bank1
 14876  06B6  0831               	movf	checkChannelStatus@chData^(0+128),w
 14877  06B7  0086               	movwf	6
 14878  06B8  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14879  06B9  0087               	movwf	7
 14880  06BA  3144               	addfsr 1,4
 14881  06BB  3F40               	moviw [0]fsr1
 14882  06BC  00A7               	movwf	??_checkChannelStatus^(0+128)
 14883  06BD  3F41               	moviw [1]fsr1
 14884  06BE  00A8               	movwf	(??_checkChannelStatus^(0+128)+1)
 14885  06BF  3F42               	moviw [2]fsr1
 14886  06C0  00A9               	movwf	(??_checkChannelStatus^(0+128)+2)
 14887  06C1  3F43               	moviw [3]fsr1
 14888  06C2  00AA               	movwf	(??_checkChannelStatus^(0+128)+3)
 14889  06C3  0831               	movf	checkChannelStatus@chData^(0+128),w
 14890  06C4  0086               	movwf	6
 14891  06C5  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14892  06C6  0087               	movwf	7
 14893  06C7  3150               	addfsr 1,16
 14894  06C8  0827               	movf	??_checkChannelStatus^(0+128),w
 14895  06C9  3FC0               	movwi [0]fsr1
 14896  06CA  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 14897  06CB  3FC1               	movwi [1]fsr1
 14898  06CC  0829               	movf	(??_checkChannelStatus+2)^(0+128),w
 14899  06CD  3FC2               	movwi [2]fsr1
 14900  06CE  082A               	movf	(??_checkChannelStatus+3)^(0+128),w
 14901  06CF  3FC3               	movwi [3]fsr1
 14902  06D0                     l716:	
 14903                           
 14904                           ;system.c: 99:    if (data->status.SENSOR_OK) {
 14905  06D0  0141               	movlb	1	; select bank1
 14906  06D1  0825               	movf	checkChannelStatus@data^(0+128),w
 14907  06D2  3E2C               	addlw	44
 14908  06D3  0086               	movwf	6
 14909  06D4  3000               	movlw	0
 14910  06D5  3D26               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 14911  06D6  0087               	movwf	7
 14912  06D7  1C81               	btfss	1,1
 14913  06D8  2F21               	goto	l5258
 14914                           
 14915                           ;system.c: 100:     if (chData->Pset < 0)
 14916  06D9  0831               	movf	checkChannelStatus@chData^(0+128),w
 14917  06DA  0086               	movwf	6
 14918  06DB  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14919  06DC  0087               	movwf	7
 14920  06DD  3150               	addfsr 1,16
 14921  06DE  3F40               	moviw [0]fsr1
 14922  06DF  0140               	movlb	0	; select bank0
 14923  06E0  00E8               	movwf	___flge@ff1
 14924  06E1  3F41               	moviw [1]fsr1
 14925  06E2  00E9               	movwf	___flge@ff1+1
 14926  06E3  3F42               	moviw [2]fsr1
 14927  06E4  00EA               	movwf	___flge@ff1+2
 14928  06E5  3F43               	moviw [3]fsr1
 14929  06E6  00EB               	movwf	___flge@ff1+3
 14930  06E7  3000               	movlw	0
 14931  06E8  00EF               	movwf	___flge@ff2+3
 14932  06E9  3000               	movlw	0
 14933  06EA  00EE               	movwf	___flge@ff2+2
 14934  06EB  3000               	movlw	0
 14935  06EC  00ED               	movwf	___flge@ff2+1
 14936  06ED  3000               	movlw	0
 14937  06EE  00EC               	movwf	___flge@ff2
 14938  06EF  3199  21F7  3185   	fcall	___flge
 14939  06F2  1803               	btfsc	3,0
 14940  06F3  2F02               	goto	l5254
 14941                           
 14942                           ;system.c: 101:      chData->mode = MODE_AUTO;
 14943  06F4  0141               	movlb	1	; select bank1
 14944  06F5  0831               	movf	checkChannelStatus@chData^(0+128),w
 14945  06F6  3E1E               	addlw	30
 14946  06F7  00A7               	movwf	??_checkChannelStatus^(0+128)
 14947  06F8  3000               	movlw	0
 14948  06F9  3D32               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 14949  06FA  00A8               	movwf	(??_checkChannelStatus+1)^(0+128)
 14950  06FB  0827               	movf	??_checkChannelStatus^(0+128),w
 14951  06FC  0086               	movwf	6
 14952  06FD  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 14953  06FE  0087               	movwf	7
 14954  06FF  3001               	movlw	1
 14955  0700  0081               	movwf	1
 14956  0701  2F41               	goto	l5262
 14957  0702                     l5254:	
 14958  0702  3000               	movlw	0
 14959  0703  0140               	movlb	0	; select bank0
 14960  0704  00EB               	movwf	___flge@ff1+3
 14961  0705  3000               	movlw	0
 14962  0706  00EA               	movwf	___flge@ff1+2
 14963  0707  3000               	movlw	0
 14964  0708  00E9               	movwf	___flge@ff1+1
 14965  0709  3000               	movlw	0
 14966  070A  00E8               	movwf	___flge@ff1
 14967  070B  0141               	movlb	1	; select bank1
 14968  070C  0831               	movf	checkChannelStatus@chData^(0+128),w
 14969  070D  0086               	movwf	6
 14970  070E  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14971  070F  0087               	movwf	7
 14972  0710  3150               	addfsr 1,16
 14973  0711  3F40               	moviw [0]fsr1
 14974  0712  0140               	movlb	0	; select bank0
 14975  0713  00EC               	movwf	___flge@ff2
 14976  0714  3F41               	moviw [1]fsr1
 14977  0715  00ED               	movwf	___flge@ff2+1
 14978  0716  3F42               	moviw [2]fsr1
 14979  0717  00EE               	movwf	___flge@ff2+2
 14980  0718  3F43               	moviw [3]fsr1
 14981  0719  00EF               	movwf	___flge@ff2+3
 14982  071A  3199  21F7  3185   	fcall	___flge
 14983  071D  1803               	btfsc	3,0
 14984  071E  2F41               	goto	l5262
 14985                           
 14986                           ;system.c: 103:      chData->mode = MODE_MANUAL;
 14987  071F  0141               	movlb	1	; select bank1
 14988  0720  2F3B               	goto	l5260
 14989  0721                     l5258:	
 14990                           
 14991                           ;system.c: 105:     chData->Pset = chData->Pmax;
 14992  0721  0831               	movf	checkChannelStatus@chData^(0+128),w
 14993  0722  0086               	movwf	6
 14994  0723  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 14995  0724  0087               	movwf	7
 14996  0725  3144               	addfsr 1,4
 14997  0726  3F40               	moviw [0]fsr1
 14998  0727  00A7               	movwf	??_checkChannelStatus^(0+128)
 14999  0728  3F41               	moviw [1]fsr1
 15000  0729  00A8               	movwf	(??_checkChannelStatus^(0+128)+1)
 15001  072A  3F42               	moviw [2]fsr1
 15002  072B  00A9               	movwf	(??_checkChannelStatus^(0+128)+2)
 15003  072C  3F43               	moviw [3]fsr1
 15004  072D  00AA               	movwf	(??_checkChannelStatus^(0+128)+3)
 15005  072E  0831               	movf	checkChannelStatus@chData^(0+128),w
 15006  072F  0086               	movwf	6
 15007  0730  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15008  0731  0087               	movwf	7
 15009  0732  3150               	addfsr 1,16
 15010  0733  0827               	movf	??_checkChannelStatus^(0+128),w
 15011  0734  3FC0               	movwi [0]fsr1
 15012  0735  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 15013  0736  3FC1               	movwi [1]fsr1
 15014  0737  0829               	movf	(??_checkChannelStatus+2)^(0+128),w
 15015  0738  3FC2               	movwi [2]fsr1
 15016  0739  082A               	movf	(??_checkChannelStatus+3)^(0+128),w
 15017  073A  3FC3               	movwi [3]fsr1
 15018  073B                     l5260:	
 15019                           
 15020                           ;system.c: 106:     chData->mode = MODE_MANUAL;
 15021  073B  0831               	movf	checkChannelStatus@chData^(0+128),w
 15022  073C  0086               	movwf	6
 15023  073D  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15024  073E  0087               	movwf	7
 15025  073F  315E               	addfsr 1,30
 15026  0740  0181               	clrf	1
 15027  0741                     l5262:	
 15028                           
 15029                           ;system.c: 108:    if (chData->Pset == 0)
 15030  0741  0141               	movlb	1	; select bank1
 15031  0742  0831               	movf	checkChannelStatus@chData^(0+128),w
 15032  0743  0086               	movwf	6
 15033  0744  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15034  0745  0087               	movwf	7
 15035  0746  3150               	addfsr 1,16
 15036  0747  3F40               	moviw [0]fsr1
 15037  0748  0140               	movlb	0	; select bank0
 15038  0749  00A0               	movwf	___fleq@ff1
 15039  074A  3F41               	moviw [1]fsr1
 15040  074B  00A1               	movwf	___fleq@ff1+1
 15041  074C  3F42               	moviw [2]fsr1
 15042  074D  00A2               	movwf	___fleq@ff1+2
 15043  074E  3F43               	moviw [3]fsr1
 15044  074F  00A3               	movwf	___fleq@ff1+3
 15045  0750  3000               	movlw	0
 15046  0751  00A7               	movwf	___fleq@ff2+3
 15047  0752  3000               	movlw	0
 15048  0753  00A6               	movwf	___fleq@ff2+2
 15049  0754  3000               	movlw	0
 15050  0755  00A5               	movwf	___fleq@ff2+1
 15051  0756  3000               	movlw	0
 15052  0757  00A4               	movwf	___fleq@ff2
 15053  0758  31A2  22FC  3185   	fcall	___fleq
 15054  075B  1C03               	btfss	3,0
 15055  075C  2F65               	goto	l5266
 15056                           
 15057                           ;system.c: 109:     chData->status = CH_DISABLED;
 15058  075D  0141               	movlb	1	; select bank1
 15059  075E  0831               	movf	checkChannelStatus@chData^(0+128),w
 15060  075F  0086               	movwf	6
 15061  0760  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15062  0761  0087               	movwf	7
 15063  0762  315F               	addfsr 1,31
 15064  0763  0181               	clrf	1
 15065  0764  2F72               	goto	l5268
 15066  0765                     l5266:	
 15067                           
 15068                           ;system.c: 111:     chData->status = CH_ENABLED;
 15069  0765  0141               	movlb	1	; select bank1
 15070  0766  0831               	movf	checkChannelStatus@chData^(0+128),w
 15071  0767  3E1F               	addlw	31
 15072  0768  00A7               	movwf	??_checkChannelStatus^(0+128)
 15073  0769  3000               	movlw	0
 15074  076A  3D32               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 15075  076B  00A8               	movwf	(??_checkChannelStatus+1)^(0+128)
 15076  076C  0827               	movf	??_checkChannelStatus^(0+128),w
 15077  076D  0086               	movwf	6
 15078  076E  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 15079  076F  0087               	movwf	7
 15080  0770  3001               	movlw	1
 15081  0771  0081               	movwf	1
 15082  0772                     l5268:	
 15083                           
 15084                           ;system.c: 113:    chData->DCreq = chData->Pmax / chData->Preq;
 15085  0772  0831               	movf	checkChannelStatus@chData^(0+128),w
 15086  0773  0086               	movwf	6
 15087  0774  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15088  0775  0087               	movwf	7
 15089  0776  3144               	addfsr 1,4
 15090  0777  3F40               	moviw [0]fsr1
 15091  0778  0140               	movlb	0	; select bank0
 15092  0779  00D2               	movwf	___fldiv@b
 15093  077A  3F41               	moviw [1]fsr1
 15094  077B  00D3               	movwf	___fldiv@b+1
 15095  077C  3F42               	moviw [2]fsr1
 15096  077D  00D4               	movwf	___fldiv@b+2
 15097  077E  3F43               	moviw [3]fsr1
 15098  077F  00D5               	movwf	___fldiv@b+3
 15099  0780  0141               	movlb	1	; select bank1
 15100  0781  0831               	movf	checkChannelStatus@chData^(0+128),w
 15101  0782  0086               	movwf	6
 15102  0783  0832               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15103  0784  0087               	movwf	7
 15104  0785  3148               	addfsr 1,8
 15105  0786  3F40               	moviw [0]fsr1
 15106  0787  0140               	movlb	0	; select bank0
 15107  0788  00CE               	movwf	___fldiv@a
 15108  0789  3F41               	moviw [1]fsr1
 15109  078A  00CF               	movwf	___fldiv@a+1
 15110  078B  3F42               	moviw [2]fsr1
 15111  078C  00D0               	movwf	___fldiv@a+2
 15112  078D  3F43               	moviw [3]fsr1
 15113  078E  00D1               	movwf	___fldiv@a+3
 15114  078F  3190  2056  3185   	fcall	___fldiv
 15115  0792  0140               	movlb	0	; select bank0
 15116  0793  0851               	movf	?___fldiv+3,w
 15117  0794  00EB               	movwf	___fltol@f1+3
 15118  0795  0850               	movf	?___fldiv+2,w
 15119  0796  00EA               	movwf	___fltol@f1+2
 15120  0797  084F               	movf	?___fldiv+1,w
 15121  0798  00E9               	movwf	___fltol@f1+1
 15122  0799  084E               	movf	?___fldiv,w
 15123  079A  00E8               	movwf	___fltol@f1
 15124  079B  31A6  2678  3185   	fcall	___fltol
 15125  079E  0140               	movlb	0	; select bank0
 15126  079F  0868               	movf	?___fltol,w
 15127  07A0  0141               	movlb	1	; select bank1
 15128  07A1  00A7               	movwf	??_checkChannelStatus^(0+128)
 15129  07A2  0831               	movf	checkChannelStatus@chData^(0+128),w
 15130  07A3  3E14               	addlw	20
 15131  07A4  00A8               	movwf	(??_checkChannelStatus+1)^(0+128)
 15132  07A5  3000               	movlw	0
 15133  07A6  3D32               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 15134  07A7  00A9               	movwf	(??_checkChannelStatus+2)^(0+128)
 15135  07A8  0828               	movf	(??_checkChannelStatus+1)^(0+128),w
 15136  07A9  0086               	movwf	6
 15137  07AA  0829               	movf	(??_checkChannelStatus+2)^(0+128),w
 15138  07AB  0087               	movwf	7
 15139  07AC  0827               	movf	??_checkChannelStatus^(0+128),w
 15140  07AD                     L8:	
 15141  07AD  0081               	movwf	1
 15142  07AE                     l5270:	
 15143                           
 15144                           ;system.c: 116:   if (channel < 4 - 1) {
 15145  07AE  3003               	movlw	3
 15146  07AF  0141               	movlb	1	; select bank1
 15147  07B0  0261               	subwf	checkChannelStatus@channel^(0+128),w
 15148  07B1  1803               	skipnc
 15149  07B2  2FB9               	goto	l724
 15150                           
 15151                           ;system.c: 117:    channel++;
 15152  07B3  3001               	movlw	1
 15153  07B4  00A7               	movwf	??_checkChannelStatus^(0+128)
 15154  07B5  0827               	movf	??_checkChannelStatus^(0+128),w
 15155  07B6  07E1               	addwf	checkChannelStatus@channel^(0+128),f
 15156                           
 15157                           ;system.c: 118:    samples = 0;
 15158  07B7  01E0               	clrf	checkChannelStatus@samples^(0+128)
 15159                           
 15160                           ;system.c: 119:   } else {
 15161  07B8  0008               	return
 15162  07B9                     l724:	
 15163                           
 15164                           ;system.c: 120:    ready = 1;
 15165  07B9  01DF               	clrf	checkChannelStatus@ready^(0+128)
 15166  07BA  0ADF               	incf	checkChannelStatus@ready^(0+128),f
 15167  07BB  0008               	return
 15168  07BC                     __end_of_checkChannelStatus:	
 15169                           
 15170                           	psect	text43
 15171  2EF6                     __ptext43:	
 15172 ;; *************** function _setLoadSwitch *****************
 15173 ;; Defined at:
 15174 ;;		line 3 in file "io.c"
 15175 ;; Parameters:    Size  Location     Type
 15176 ;;  state           1    wreg     unsigned char 
 15177 ;; Auto vars:     Size  Location     Type
 15178 ;;  state           1    0[BANK0 ] unsigned char 
 15179 ;; Return value:  Size  Location     Type
 15180 ;;                  1    wreg      void 
 15181 ;; Registers used:
 15182 ;;		wreg, status,0
 15183 ;; Tracked objects:
 15184 ;;		On entry : 0/0
 15185 ;;		On exit  : 0/0
 15186 ;;		Unchanged: 0/0
 15187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15189 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15191 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15192 ;;Total ram usage:        1 bytes
 15193 ;; Hardware stack levels used:    1
 15194 ;; Hardware stack levels required when called:    3
 15195 ;; This function calls:
 15196 ;;		Nothing
 15197 ;; This function is called by:
 15198 ;;		_main
 15199 ;;		_checkChannelStatus
 15200 ;;		_systemCheck
 15201 ;; This function uses a non-reentrant model
 15202 ;;
 15203                           
 15204                           
 15205                           ;psect for function _setLoadSwitch
 15206  2EF6                     _setLoadSwitch:	
 15207                           
 15208                           ;incstack = 0
 15209                           ; Regs used in _setLoadSwitch: [wreg+status,0]
 15210                           ;setLoadSwitch@state stored from wreg
 15211  2EF6  0140               	movlb	0	; select bank0
 15212  2EF7  00A0               	movwf	setLoadSwitch@state
 15213                           
 15214                           ;io.c: 3: void setLoadSwitch(uint8_t state);io.c: 4: {;io.c: 5:  LATCbits.LATC3 = state;
 15215  2EF8  0C20               	rrf	setLoadSwitch@state,w
 15216  2EF9  1C03               	skipc
 15217  2EFA  119A               	bcf	26,3	;volatile
 15218  2EFB  1803               	skipnc
 15219  2EFC  159A               	bsf	26,3	;volatile
 15220  2EFD  0008               	return
 15221  2EFE                     __end_of_setLoadSwitch:	
 15222                           
 15223                           	psect	text44
 15224  2225                     __ptext44:	
 15225 ;; *************** function _setChannelSwitch *****************
 15226 ;; Defined at:
 15227 ;;		line 8 in file "io.c"
 15228 ;; Parameters:    Size  Location     Type
 15229 ;;  channel         1    wreg     unsigned char 
 15230 ;;  state           1    0[BANK0 ] unsigned char 
 15231 ;; Auto vars:     Size  Location     Type
 15232 ;;  channel         1    3[BANK0 ] unsigned char 
 15233 ;; Return value:  Size  Location     Type
 15234 ;;                  1    wreg      void 
 15235 ;; Registers used:
 15236 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15237 ;; Tracked objects:
 15238 ;;		On entry : 0/0
 15239 ;;		On exit  : 0/0
 15240 ;;		Unchanged: 0/0
 15241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15242 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15245 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15246 ;;Total ram usage:        4 bytes
 15247 ;; Hardware stack levels used:    1
 15248 ;; Hardware stack levels required when called:    3
 15249 ;; This function calls:
 15250 ;;		Nothing
 15251 ;; This function is called by:
 15252 ;;		_checkChannelStatus
 15253 ;;		_systemCheck
 15254 ;; This function uses a non-reentrant model
 15255 ;;
 15256                           
 15257                           
 15258                           ;psect for function _setChannelSwitch
 15259  2225                     _setChannelSwitch:	
 15260                           
 15261                           ;incstack = 0
 15262                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 15263                           ;setChannelSwitch@channel stored from wreg
 15264  2225  0140               	movlb	0	; select bank0
 15265  2226  00A3               	movwf	setChannelSwitch@channel
 15266                           
 15267                           ;io.c: 8: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 9: {;io.c: 10:  sw
      +                          itch(channel) {
 15268  2227  2A55               	goto	l4882
 15269  2228                     l4870:	
 15270                           
 15271                           ;io.c: 12:   LATAbits.LATA0 = state;
 15272  2228  0C20               	rrf	setChannelSwitch@state,w
 15273  2229  1C03               	skipc
 15274  222A  1018               	bcf	24,0	;volatile
 15275  222B  1803               	skipnc
 15276  222C  1418               	bsf	24,0	;volatile
 15277                           
 15278                           ;io.c: 13:   break;
 15279  222D  0008               	return
 15280  222E                     l4872:	
 15281                           
 15282                           ;io.c: 15:   LATAbits.LATA1 = state;
 15283  222E  0C20               	rrf	setChannelSwitch@state,w
 15284  222F  1C03               	skipc
 15285  2230  1098               	bcf	24,1	;volatile
 15286  2231  1803               	skipnc
 15287  2232  1498               	bsf	24,1	;volatile
 15288                           
 15289                           ;io.c: 16:   break;
 15290  2233  0008               	return
 15291  2234                     l4874:	
 15292                           
 15293                           ;io.c: 18:   LATAbits.LATA2 = state;
 15294  2234  0C20               	rrf	setChannelSwitch@state,w
 15295  2235  1C03               	skipc
 15296  2236  1118               	bcf	24,2	;volatile
 15297  2237  1803               	skipnc
 15298  2238  1518               	bsf	24,2	;volatile
 15299                           
 15300                           ;io.c: 19:   break;
 15301  2239  0008               	return
 15302  223A                     l4876:	
 15303                           
 15304                           ;io.c: 21:   LATAbits.LATA3 = state;
 15305  223A  0C20               	rrf	setChannelSwitch@state,w
 15306  223B  1C03               	skipc
 15307  223C  1198               	bcf	24,3	;volatile
 15308  223D  1803               	skipnc
 15309  223E  1598               	bsf	24,3	;volatile
 15310                           
 15311                           ;io.c: 22:   break;
 15312  223F  0008               	return
 15313  2240                     l4878:	
 15314                           
 15315                           ;io.c: 24:   LATAbits.LATA0 = state;
 15316  2240  0C20               	rrf	setChannelSwitch@state,w
 15317  2241  1C03               	skipc
 15318  2242  1018               	bcf	24,0	;volatile
 15319  2243  1803               	skipnc
 15320  2244  1418               	bsf	24,0	;volatile
 15321                           
 15322                           ;io.c: 25:   LATAbits.LATA1 = state;
 15323  2245  0C20               	rrf	setChannelSwitch@state,w
 15324  2246  1C03               	skipc
 15325  2247  1098               	bcf	24,1	;volatile
 15326  2248  1803               	skipnc
 15327  2249  1498               	bsf	24,1	;volatile
 15328                           
 15329                           ;io.c: 26:   LATAbits.LATA2 = state;
 15330  224A  0C20               	rrf	setChannelSwitch@state,w
 15331  224B  1C03               	skipc
 15332  224C  1118               	bcf	24,2	;volatile
 15333  224D  1803               	skipnc
 15334  224E  1518               	bsf	24,2	;volatile
 15335                           
 15336                           ;io.c: 27:   LATAbits.LATA3 = state;
 15337  224F  0C20               	rrf	setChannelSwitch@state,w
 15338  2250  1C03               	skipc
 15339  2251  1198               	bcf	24,3	;volatile
 15340  2252  1803               	skipnc
 15341  2253  1598               	bsf	24,3	;volatile
 15342                           
 15343                           ;io.c: 28:   break;
 15344  2254  0008               	return
 15345  2255                     l4882:	
 15346  2255  0823               	movf	setChannelSwitch@channel,w
 15347  2256  00A1               	movwf	??_setChannelSwitch
 15348  2257  01A2               	clrf	??_setChannelSwitch+1
 15349                           
 15350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15351                           ; Switch size 1, requested type "simple"
 15352                           ; Number of cases is 1, Range of values is 0 to 0
 15353                           ; switch strategies available:
 15354                           ; Name         Instructions Cycles
 15355                           ; simple_byte            4     3 (average)
 15356                           ; direct_byte            8     6 (fixed)
 15357                           ; jumptable            260     6 (fixed)
 15358                           ;	Chosen strategy is simple_byte
 15359  2258  0822               	movf	??_setChannelSwitch+1,w
 15360  2259  3A00               	xorlw	0	; case 0
 15361  225A  1903               	skipnz
 15362  225B  2A5D               	goto	l5970
 15363  225C  2A40               	goto	l4878
 15364  225D                     l5970:	
 15365                           
 15366                           ; Switch size 1, requested type "simple"
 15367                           ; Number of cases is 4, Range of values is 0 to 3
 15368                           ; switch strategies available:
 15369                           ; Name         Instructions Cycles
 15370                           ; simple_byte           13     7 (average)
 15371                           ; direct_byte           14     6 (fixed)
 15372                           ; jumptable            260     6 (fixed)
 15373                           ;	Chosen strategy is simple_byte
 15374  225D  0821               	movf	??_setChannelSwitch,w
 15375  225E  3A00               	xorlw	0	; case 0
 15376  225F  1903               	skipnz
 15377  2260  2A28               	goto	l4870
 15378  2261  3A01               	xorlw	1	; case 1
 15379  2262  1903               	skipnz
 15380  2263  2A2E               	goto	l4872
 15381  2264  3A03               	xorlw	3	; case 2
 15382  2265  1903               	skipnz
 15383  2266  2A34               	goto	l4874
 15384  2267  3A01               	xorlw	1	; case 3
 15385  2268  1903               	skipnz
 15386  2269  2A3A               	goto	l4876
 15387  226A  2A40               	goto	l4878
 15388  226B  0008               	return
 15389  226C                     __end_of_setChannelSwitch:	
 15390                           
 15391                           	psect	text45
 15392  1800                     __ptext45:	
 15393 ;; *************** function _getAnalogValue *****************
 15394 ;; Defined at:
 15395 ;;		line 36 in file "io.c"
 15396 ;; Parameters:    Size  Location     Type
 15397 ;;  channel         1    wreg     unsigned char 
 15398 ;; Auto vars:     Size  Location     Type
 15399 ;;  channel         1    3[BANK0 ] unsigned char 
 15400 ;; Return value:  Size  Location     Type
 15401 ;;                  2    0[BANK0 ] unsigned short 
 15402 ;; Registers used:
 15403 ;;		wreg, status,2, status,0
 15404 ;; Tracked objects:
 15405 ;;		On entry : 0/0
 15406 ;;		On exit  : 0/0
 15407 ;;		Unchanged: 0/0
 15408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15409 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15411 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15412 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15413 ;;Total ram usage:        4 bytes
 15414 ;; Hardware stack levels used:    1
 15415 ;; Hardware stack levels required when called:    3
 15416 ;; This function calls:
 15417 ;;		Nothing
 15418 ;; This function is called by:
 15419 ;;		_checkChannelStatus
 15420 ;;		_systemCheck
 15421 ;;		_getAnalogValues
 15422 ;; This function uses a non-reentrant model
 15423 ;;
 15424                           
 15425                           
 15426                           ;psect for function _getAnalogValue
 15427  1800                     _getAnalogValue:	
 15428                           
 15429                           ;incstack = 0
 15430                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 15431                           ;getAnalogValue@channel stored from wreg
 15432  1800  0140               	movlb	0	; select bank0
 15433  1801  00A3               	movwf	getAnalogValue@channel
 15434                           
 15435                           ;io.c: 36: uint16_t getAnalogValue(uint8_t channel);io.c: 37: {;io.c: 38:  ADCON0bits.CH
      +                          S = channel;
 15436  1802  0823               	movf	getAnalogValue@channel,w
 15437  1803  00A2               	movwf	??_getAnalogValue
 15438  1804  0DA2               	rlf	??_getAnalogValue,f
 15439  1805  0DA2               	rlf	??_getAnalogValue,f
 15440  1806  0141               	movlb	1	; select bank1
 15441  1807  081D               	movf	29,w	;volatile
 15442  1808  0140               	movlb	0	; select bank0
 15443  1809  0622               	xorwf	??_getAnalogValue,w
 15444  180A  3903               	andlw	-253
 15445  180B  0622               	xorwf	??_getAnalogValue,w
 15446  180C  0141               	movlb	1	; select bank1
 15447  180D  009D               	movwf	29	;volatile
 15448                           
 15449                           ;io.c: 39:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 15450  180E  3200               	nop2	;2 cycle nop
 15451  180F  3200               	nop2	;2 cycle nop
 15452  1810  0000               	nop
 15453                           
 15454                           ;io.c: 40:  ADCON0bits.GO = 1;
 15455  1811  0141               	movlb	1	; select bank1
 15456  1812  149D               	bsf	29,1	;volatile
 15457  1813                     l651:	
 15458                           ;io.c: 41:  while (ADCON0bits.GO);
 15459                           
 15460  1813  189D               	btfsc	29,1	;volatile
 15461  1814  2813               	goto	l651
 15462                           
 15463                           ;io.c: 42:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 15464  1815  081C               	movf	28,w	;volatile
 15465  1816  0140               	movlb	0	; select bank0
 15466  1817  00A1               	movwf	?_getAnalogValue+1
 15467  1818  0141               	movlb	1	; select bank1
 15468  1819  081B               	movf	27,w	;volatile
 15469  181A  0140               	movlb	0	; select bank0
 15470  181B  00A0               	movwf	?_getAnalogValue
 15471  181C  0008               	return
 15472  181D                     __end_of_getAnalogValue:	
 15473                           
 15474                           	psect	text46
 15475  0800                     __ptext46:	
 15476 ;; *************** function _error *****************
 15477 ;; Defined at:
 15478 ;;		line 4 in file "error.c"
 15479 ;; Parameters:    Size  Location     Type
 15480 ;;  error           1    wreg     enum E7828
 15481 ;; Auto vars:     Size  Location     Type
 15482 ;;  error           1    0[COMMON] enum E7828
 15483 ;; Return value:  Size  Location     Type
 15484 ;;                  1    wreg      void 
 15485 ;; Registers used:
 15486 ;;		wreg
 15487 ;; Tracked objects:
 15488 ;;		On entry : 0/0
 15489 ;;		On exit  : 0/0
 15490 ;;		Unchanged: 0/0
 15491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15496 ;;Total ram usage:        0 bytes
 15497 ;; Hardware stack levels used:    1
 15498 ;; Hardware stack levels required when called:    3
 15499 ;; This function calls:
 15500 ;;		Nothing
 15501 ;; This function is called by:
 15502 ;;		_checkChannelStatus
 15503 ;;		_systemCheck
 15504 ;; This function uses a non-reentrant model
 15505 ;;
 15506                           
 15507                           
 15508                           ;psect for function _error
 15509  0800                     _error:	
 15510                           
 15511                           ;error.c: 4: void error(enum e_errorcode error);error.c: 5: {;error.c: 6:  return;
 15512                           
 15513                           ;incstack = 0
 15514                           ; Regs used in _error: [wreg]
 15515  0800  0008               	return
 15516  0801                     __end_of_error:	
 15517                           
 15518                           	psect	text47
 15519  23EF                     __ptext47:	
 15520 ;; *************** function _ema *****************
 15521 ;; Defined at:
 15522 ;;		line 55 in file "common.c"
 15523 ;; Parameters:    Size  Location     Type
 15524 ;;  in              2   12[BANK0 ] unsigned short 
 15525 ;;  average         2   14[BANK0 ] unsigned short 
 15526 ;;  alpha           4   16[BANK0 ] unsigned long 
 15527 ;; Auto vars:     Size  Location     Type
 15528 ;;  tmp0            4   28[BANK0 ] unsigned long 
 15529 ;; Return value:  Size  Location     Type
 15530 ;;                  2   12[BANK0 ] unsigned short 
 15531 ;; Registers used:
 15532 ;;		wreg, status,2, status,0, pclath, cstack
 15533 ;; Tracked objects:
 15534 ;;		On entry : 0/0
 15535 ;;		On exit  : 0/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15538 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15539 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15540 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15541 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15542 ;;Total ram usage:       20 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; Hardware stack levels required when called:    4
 15545 ;; This function calls:
 15546 ;;		___lmul
 15547 ;; This function is called by:
 15548 ;;		_checkChannelStatus
 15549 ;;		_getAnalogValues
 15550 ;; This function uses a non-reentrant model
 15551 ;;
 15552                           
 15553                           
 15554                           ;psect for function _ema
 15555  23EF                     _ema:	
 15556                           
 15557                           ;common.c: 55: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 56:
      +                           {;common.c: 57:  uint32_t tmp0;;common.c: 58:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 15558                           
 15559                           ;incstack = 0
 15560                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 15561  23EF  0140               	movlb	0	; select bank0
 15562  23F0  082E               	movf	ema@average,w
 15563  23F1  00A0               	movwf	___lmul@multiplier
 15564  23F2  082F               	movf	ema@average+1,w
 15565  23F3  00A1               	movwf	___lmul@multiplier+1
 15566  23F4  01A2               	clrf	___lmul@multiplier+2
 15567  23F5  01A3               	clrf	___lmul@multiplier+3
 15568  23F6  3000               	movlw	0
 15569  23F7  00B4               	movwf	??_ema
 15570  23F8  3000               	movlw	0
 15571  23F9  00B5               	movwf	??_ema+1
 15572  23FA  3001               	movlw	1
 15573  23FB  00B6               	movwf	??_ema+2
 15574  23FC  3000               	movlw	0
 15575  23FD  00B7               	movwf	??_ema+3
 15576  23FE  0830               	movf	ema@alpha,w
 15577  23FF  02B4               	subwf	??_ema,f
 15578  2400  0831               	movf	ema@alpha+1,w
 15579  2401  3BB5               	subwfb	??_ema+1,f
 15580  2402  0832               	movf	ema@alpha+2,w
 15581  2403  3BB6               	subwfb	??_ema+2,f
 15582  2404  0833               	movf	ema@alpha+3,w
 15583  2405  3BB7               	subwfb	??_ema+3,f
 15584  2406  0837               	movf	??_ema+3,w
 15585  2407  00A7               	movwf	___lmul@multiplicand+3
 15586  2408  0836               	movf	??_ema+2,w
 15587  2409  00A6               	movwf	___lmul@multiplicand+2
 15588  240A  0835               	movf	??_ema+1,w
 15589  240B  00A5               	movwf	___lmul@multiplicand+1
 15590  240C  0834               	movf	??_ema,w
 15591  240D  00A4               	movwf	___lmul@multiplicand
 15592  240E  31A0  206D  31A3   	fcall	___lmul
 15593  2411  0140               	movlb	0	; select bank0
 15594  2412  0820               	movf	?___lmul,w
 15595  2413  00B8               	movwf	??_ema+4
 15596  2414  0821               	movf	?___lmul+1,w
 15597  2415  00B9               	movwf	??_ema+5
 15598  2416  0822               	movf	?___lmul+2,w
 15599  2417  00BA               	movwf	??_ema+6
 15600  2418  0823               	movf	?___lmul+3,w
 15601  2419  00BB               	movwf	??_ema+7
 15602  241A  082C               	movf	ema@in,w
 15603  241B  00A0               	movwf	___lmul@multiplier
 15604  241C  082D               	movf	ema@in+1,w
 15605  241D  00A1               	movwf	___lmul@multiplier+1
 15606  241E  01A2               	clrf	___lmul@multiplier+2
 15607  241F  01A3               	clrf	___lmul@multiplier+3
 15608  2420  0833               	movf	ema@alpha+3,w
 15609  2421  00A7               	movwf	___lmul@multiplicand+3
 15610  2422  0832               	movf	ema@alpha+2,w
 15611  2423  00A6               	movwf	___lmul@multiplicand+2
 15612  2424  0831               	movf	ema@alpha+1,w
 15613  2425  00A5               	movwf	___lmul@multiplicand+1
 15614  2426  0830               	movf	ema@alpha,w
 15615  2427  00A4               	movwf	___lmul@multiplicand
 15616  2428  31A0  206D  31A3   	fcall	___lmul
 15617  242B  0140               	movlb	0	; select bank0
 15618  242C  0820               	movf	?___lmul,w
 15619  242D  07B8               	addwf	??_ema+4,f
 15620  242E  0821               	movf	?___lmul+1,w
 15621  242F  3DB9               	addwfc	??_ema+5,f
 15622  2430  0822               	movf	?___lmul+2,w
 15623  2431  3DBA               	addwfc	??_ema+6,f
 15624  2432  0823               	movf	?___lmul+3,w
 15625  2433  3DBB               	addwfc	??_ema+7,f
 15626  2434  083B               	movf	??_ema+7,w
 15627  2435  00BF               	movwf	ema@tmp0+3
 15628  2436  083A               	movf	??_ema+6,w
 15629  2437  00BE               	movwf	ema@tmp0+2
 15630  2438  0839               	movf	??_ema+5,w
 15631  2439  00BD               	movwf	ema@tmp0+1
 15632  243A  0838               	movf	??_ema+4,w
 15633  243B  00BC               	movwf	ema@tmp0
 15634                           
 15635                           ;common.c: 59:  return(tmp0 + 32768) / 65536;
 15636  243C  3000               	movlw	0
 15637  243D  00B4               	movwf	??_ema
 15638  243E  3080               	movlw	128
 15639  243F  00B5               	movwf	??_ema+1
 15640  2440  3000               	movlw	0
 15641  2441  00B6               	movwf	??_ema+2
 15642  2442  3000               	movlw	0
 15643  2443  00B7               	movwf	??_ema+3
 15644  2444  083C               	movf	ema@tmp0,w
 15645  2445  07B4               	addwf	??_ema,f
 15646  2446  083D               	movf	ema@tmp0+1,w
 15647  2447  3DB5               	addwfc	??_ema+1,f
 15648  2448  083E               	movf	ema@tmp0+2,w
 15649  2449  3DB6               	addwfc	??_ema+2,f
 15650  244A  083F               	movf	ema@tmp0+3,w
 15651  244B  3DB7               	addwfc	??_ema+3,f
 15652  244C  3010               	movlw	16
 15653  244D                     u5175:	
 15654  244D  36B7               	lsrf	??_ema+3,f
 15655  244E  0CB6               	rrf	??_ema+2,f
 15656  244F  0CB5               	rrf	??_ema+1,f
 15657  2450  0CB4               	rrf	??_ema,f
 15658  2451  0B89               	decfsz	9,f
 15659  2452  2C4D               	goto	u5175
 15660  2453  0835               	movf	??_ema+1,w
 15661  2454  00AD               	movwf	?_ema+1
 15662  2455  0834               	movf	??_ema,w
 15663  2456  00AC               	movwf	?_ema
 15664  2457  0008               	return
 15665  2458                     __end_of_ema:	
 15666                           
 15667                           	psect	text48
 15668  206D                     __ptext48:	
 15669 ;; *************** function ___lmul *****************
 15670 ;; Defined at:
 15671 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 15672 ;; Parameters:    Size  Location     Type
 15673 ;;  multiplier      4    0[BANK0 ] unsigned long 
 15674 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;  product         4    8[BANK0 ] unsigned long 
 15677 ;; Return value:  Size  Location     Type
 15678 ;;                  4    0[BANK0 ] unsigned long 
 15679 ;; Registers used:
 15680 ;;		wreg, status,2, status,0
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15686 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15687 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15689 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15690 ;;Total ram usage:       12 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; Hardware stack levels required when called:    3
 15693 ;; This function calls:
 15694 ;;		Nothing
 15695 ;; This function is called by:
 15696 ;;		_ema
 15697 ;; This function uses a non-reentrant model
 15698 ;;
 15699                           
 15700                           
 15701                           ;psect for function ___lmul
 15702  206D                     ___lmul:	
 15703                           
 15704                           ;incstack = 0
 15705                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 15706  206D  3000               	movlw	0
 15707  206E  0140               	movlb	0	; select bank0
 15708  206F  00AB               	movwf	___lmul@product+3
 15709  2070  3000               	movlw	0
 15710  2071  00AA               	movwf	___lmul@product+2
 15711  2072  3000               	movlw	0
 15712  2073  00A9               	movwf	___lmul@product+1
 15713  2074  3000               	movlw	0
 15714  2075  00A8               	movwf	___lmul@product
 15715  2076                     l4342:	
 15716  2076  1C20               	btfss	___lmul@multiplier,0
 15717  2077  2880               	goto	l4346
 15718  2078  0824               	movf	___lmul@multiplicand,w
 15719  2079  07A8               	addwf	___lmul@product,f
 15720  207A  0825               	movf	___lmul@multiplicand+1,w
 15721  207B  3DA9               	addwfc	___lmul@product+1,f
 15722  207C  0826               	movf	___lmul@multiplicand+2,w
 15723  207D  3DAA               	addwfc	___lmul@product+2,f
 15724  207E  0827               	movf	___lmul@multiplicand+3,w
 15725  207F  3DAB               	addwfc	___lmul@product+3,f
 15726  2080                     l4346:	
 15727  2080  3001               	movlw	1
 15728  2081                     u5095:	
 15729  2081  35A4               	lslf	___lmul@multiplicand,f
 15730  2082  0DA5               	rlf	___lmul@multiplicand+1,f
 15731  2083  0DA6               	rlf	___lmul@multiplicand+2,f
 15732  2084  0DA7               	rlf	___lmul@multiplicand+3,f
 15733  2085  0B89               	decfsz	9,f
 15734  2086  2881               	goto	u5095
 15735  2087  3001               	movlw	1
 15736  2088                     u5105:	
 15737  2088  36A3               	lsrf	___lmul@multiplier+3,f
 15738  2089  0CA2               	rrf	___lmul@multiplier+2,f
 15739  208A  0CA1               	rrf	___lmul@multiplier+1,f
 15740  208B  0CA0               	rrf	___lmul@multiplier,f
 15741  208C  0B89               	decfsz	9,f
 15742  208D  2888               	goto	u5105
 15743  208E  0823               	movf	___lmul@multiplier+3,w
 15744  208F  0422               	iorwf	___lmul@multiplier+2,w
 15745  2090  0421               	iorwf	___lmul@multiplier+1,w
 15746  2091  0420               	iorwf	___lmul@multiplier,w
 15747  2092  1D03               	skipz
 15748  2093  2876               	goto	l4342
 15749  2094  082B               	movf	___lmul@product+3,w
 15750  2095  00A3               	movwf	?___lmul+3
 15751  2096  082A               	movf	___lmul@product+2,w
 15752  2097  00A2               	movwf	?___lmul+2
 15753  2098  0829               	movf	___lmul@product+1,w
 15754  2099  00A1               	movwf	?___lmul+1
 15755  209A  0828               	movf	___lmul@product,w
 15756  209B  00A0               	movwf	?___lmul
 15757  209C  0008               	return
 15758  209D                     __end_of___lmul:	
 15759                           
 15760                           	psect	text49
 15761  181D                     __ptext49:	
 15762 ;; *************** function ___xxtofl *****************
 15763 ;; Defined at:
 15764 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 15765 ;; Parameters:    Size  Location     Type
 15766 ;;  sign            1    wreg     unsigned char 
 15767 ;;  val             4    6[BANK0 ] long 
 15768 ;; Auto vars:     Size  Location     Type
 15769 ;;  sign            1   14[BANK0 ] unsigned char 
 15770 ;;  arg             4   16[BANK0 ] unsigned long 
 15771 ;;  exp             1   15[BANK0 ] unsigned char 
 15772 ;; Return value:  Size  Location     Type
 15773 ;;                  4    6[BANK0 ] unsigned char 
 15774 ;; Registers used:
 15775 ;;		wreg, status,2, status,0
 15776 ;; Tracked objects:
 15777 ;;		On entry : 0/0
 15778 ;;		On exit  : 0/0
 15779 ;;		Unchanged: 0/0
 15780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15781 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15782 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15783 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15784 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15785 ;;Total ram usage:       14 bytes
 15786 ;; Hardware stack levels used:    1
 15787 ;; Hardware stack levels required when called:    3
 15788 ;; This function calls:
 15789 ;;		Nothing
 15790 ;; This function is called by:
 15791 ;;		_ftoa
 15792 ;;		_checkChannelStatus
 15793 ;;		_systemCheck
 15794 ;;		_checkSensor
 15795 ;;		_getAnalogValues
 15796 ;; This function uses a non-reentrant model
 15797 ;;
 15798                           
 15799                           
 15800                           ;psect for function ___xxtofl
 15801  181D                     ___xxtofl:	
 15802                           
 15803                           ;incstack = 0
 15804                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 15805                           ;___xxtofl@sign stored from wreg
 15806  181D  0140               	movlb	0	; select bank0
 15807  181E  00AE               	movwf	___xxtofl@sign
 15808  181F  082E               	movf	___xxtofl@sign,w
 15809  1820  1D03               	btfss	3,2
 15810  1821  1FA9               	btfss	___xxtofl@val+3,7
 15811  1822  2833               	goto	l4122
 15812  1823  0926               	comf	___xxtofl@val,w
 15813  1824  00B0               	movwf	___xxtofl@arg
 15814  1825  0927               	comf	___xxtofl@val+1,w
 15815  1826  00B1               	movwf	___xxtofl@arg+1
 15816  1827  0928               	comf	___xxtofl@val+2,w
 15817  1828  00B2               	movwf	___xxtofl@arg+2
 15818  1829  0929               	comf	___xxtofl@val+3,w
 15819  182A  00B3               	movwf	___xxtofl@arg+3
 15820  182B  0AB0               	incf	___xxtofl@arg,f
 15821  182C  1903               	skipnz
 15822  182D  0AB1               	incf	___xxtofl@arg+1,f
 15823  182E  1903               	skipnz
 15824  182F  0AB2               	incf	___xxtofl@arg+2,f
 15825  1830  1903               	skipnz
 15826  1831  0AB3               	incf	___xxtofl@arg+3,f
 15827  1832  283B               	goto	l1285
 15828  1833                     l4122:	
 15829  1833  0829               	movf	___xxtofl@val+3,w
 15830  1834  00B3               	movwf	___xxtofl@arg+3
 15831  1835  0828               	movf	___xxtofl@val+2,w
 15832  1836  00B2               	movwf	___xxtofl@arg+2
 15833  1837  0827               	movf	___xxtofl@val+1,w
 15834  1838  00B1               	movwf	___xxtofl@arg+1
 15835  1839  0826               	movf	___xxtofl@val,w
 15836  183A  00B0               	movwf	___xxtofl@arg
 15837  183B                     l1285:	
 15838  183B  0829               	movf	___xxtofl@val+3,w
 15839  183C  0428               	iorwf	___xxtofl@val+2,w
 15840  183D  0427               	iorwf	___xxtofl@val+1,w
 15841  183E  0426               	iorwf	___xxtofl@val,w
 15842  183F  1D03               	skipz
 15843  1840  284A               	goto	l4128
 15844  1841  3000               	movlw	0
 15845  1842  00A9               	movwf	?___xxtofl+3
 15846  1843  3000               	movlw	0
 15847  1844  00A8               	movwf	?___xxtofl+2
 15848  1845  3000               	movlw	0
 15849  1846  00A7               	movwf	?___xxtofl+1
 15850  1847  3000               	movlw	0
 15851  1848  00A6               	movwf	?___xxtofl
 15852  1849  0008               	return
 15853  184A                     l4128:	
 15854  184A  3096               	movlw	150
 15855  184B  00AA               	movwf	??___xxtofl
 15856  184C  082A               	movf	??___xxtofl,w
 15857  184D  00AF               	movwf	___xxtofl@exp
 15858  184E                     l4132:	
 15859  184E  30FE               	movlw	254
 15860  184F  0533               	andwf	___xxtofl@arg+3,w
 15861  1850  1903               	btfsc	3,2
 15862  1851  2871               	goto	l1291
 15863  1852  3001               	movlw	1
 15864  1853  00AA               	movwf	??___xxtofl
 15865  1854  082A               	movf	??___xxtofl,w
 15866  1855  07AF               	addwf	___xxtofl@exp,f
 15867  1856  3001               	movlw	1
 15868  1857                     u4715:	
 15869  1857  36B3               	lsrf	___xxtofl@arg+3,f
 15870  1858  0CB2               	rrf	___xxtofl@arg+2,f
 15871  1859  0CB1               	rrf	___xxtofl@arg+1,f
 15872  185A  0CB0               	rrf	___xxtofl@arg,f
 15873  185B  0B89               	decfsz	9,f
 15874  185C  2857               	goto	u4715
 15875  185D  284E               	goto	l4132
 15876  185E                     l4134:	
 15877  185E  3001               	movlw	1
 15878  185F  00AA               	movwf	??___xxtofl
 15879  1860  082A               	movf	??___xxtofl,w
 15880  1861  07AF               	addwf	___xxtofl@exp,f
 15881  1862  3001               	movlw	1
 15882  1863  07B0               	addwf	___xxtofl@arg,f
 15883  1864  3000               	movlw	0
 15884  1865  3DB1               	addwfc	___xxtofl@arg+1,f
 15885  1866  3000               	movlw	0
 15886  1867  3DB2               	addwfc	___xxtofl@arg+2,f
 15887  1868  3000               	movlw	0
 15888  1869  3DB3               	addwfc	___xxtofl@arg+3,f
 15889  186A  3001               	movlw	1
 15890  186B                     u4735:	
 15891  186B  36B3               	lsrf	___xxtofl@arg+3,f
 15892  186C  0CB2               	rrf	___xxtofl@arg+2,f
 15893  186D  0CB1               	rrf	___xxtofl@arg+1,f
 15894  186E  0CB0               	rrf	___xxtofl@arg,f
 15895  186F  0B89               	decfsz	9,f
 15896  1870  286B               	goto	u4735
 15897  1871                     l1291:	
 15898  1871  30FF               	movlw	255
 15899  1872  0533               	andwf	___xxtofl@arg+3,w
 15900  1873  1903               	btfsc	3,2
 15901  1874  2883               	goto	l4142
 15902  1875  285E               	goto	l4134
 15903  1876                     l4144:	
 15904  1876  3002               	movlw	2
 15905  1877  022F               	subwf	___xxtofl@exp,w
 15906  1878  1C03               	btfss	3,0
 15907  1879  2885               	goto	l1298
 15908  187A  3001               	movlw	1
 15909  187B  02AF               	subwf	___xxtofl@exp,f
 15910  187C  3001               	movlw	1
 15911  187D                     u4755:	
 15912  187D  35B0               	lslf	___xxtofl@arg,f
 15913  187E  0DB1               	rlf	___xxtofl@arg+1,f
 15914  187F  0DB2               	rlf	___xxtofl@arg+2,f
 15915  1880  0DB3               	rlf	___xxtofl@arg+3,f
 15916  1881  0B89               	decfsz	9,f
 15917  1882  287D               	goto	u4755
 15918  1883                     l4142:	
 15919  1883  1FB2               	btfss	___xxtofl@arg+2,7
 15920  1884  2876               	goto	l4144
 15921  1885                     l1298:	
 15922  1885  182F               	btfsc	___xxtofl@exp,0
 15923  1886  288F               	goto	l1299
 15924  1887  30FF               	movlw	255
 15925  1888  05B0               	andwf	___xxtofl@arg,f
 15926  1889  30FF               	movlw	255
 15927  188A  05B1               	andwf	___xxtofl@arg+1,f
 15928  188B  307F               	movlw	127
 15929  188C  05B2               	andwf	___xxtofl@arg+2,f
 15930  188D  30FF               	movlw	255
 15931  188E  05B3               	andwf	___xxtofl@arg+3,f
 15932  188F                     l1299:	
 15933  188F  1003               	clrc
 15934  1890  0CAF               	rrf	___xxtofl@exp,f
 15935  1891  082F               	movf	___xxtofl@exp,w
 15936  1892  00AA               	movwf	??___xxtofl
 15937  1893  01AB               	clrf	??___xxtofl+1
 15938  1894  01AC               	clrf	??___xxtofl+2
 15939  1895  01AD               	clrf	??___xxtofl+3
 15940  1896  3018               	movlw	24
 15941  1897                     u4795:	
 15942  1897  35AA               	lslf	??___xxtofl,f
 15943  1898  0DAB               	rlf	??___xxtofl+1,f
 15944  1899  0DAC               	rlf	??___xxtofl+2,f
 15945  189A  0DAD               	rlf	??___xxtofl+3,f
 15946  189B  0B89               	decfsz	9,f
 15947  189C  2897               	goto	u4795
 15948  189D  082A               	movf	??___xxtofl,w
 15949  189E  04B0               	iorwf	___xxtofl@arg,f
 15950  189F  082B               	movf	??___xxtofl+1,w
 15951  18A0  04B1               	iorwf	___xxtofl@arg+1,f
 15952  18A1  082C               	movf	??___xxtofl+2,w
 15953  18A2  04B2               	iorwf	___xxtofl@arg+2,f
 15954  18A3  082D               	movf	??___xxtofl+3,w
 15955  18A4  04B3               	iorwf	___xxtofl@arg+3,f
 15956  18A5  082E               	movf	___xxtofl@sign,w
 15957  18A6  1D03               	btfss	3,2
 15958  18A7  1FA9               	btfss	___xxtofl@val+3,7
 15959  18A8  28AA               	goto	l4156
 15960  18A9  17B3               	bsf	___xxtofl@arg+3,7
 15961  18AA                     l4156:	
 15962  18AA  0833               	movf	___xxtofl@arg+3,w
 15963  18AB  00A9               	movwf	?___xxtofl+3
 15964  18AC  0832               	movf	___xxtofl@arg+2,w
 15965  18AD  00A8               	movwf	?___xxtofl+2
 15966  18AE  0831               	movf	___xxtofl@arg+1,w
 15967  18AF  00A7               	movwf	?___xxtofl+1
 15968  18B0  0830               	movf	___xxtofl@arg,w
 15969  18B1  00A6               	movwf	?___xxtofl
 15970  18B2  0008               	return
 15971  18B3                     __end_of___xxtofl:	
 15972                           
 15973                           	psect	text50
 15974  2678                     __ptext50:	
 15975 ;; *************** function ___fltol *****************
 15976 ;; Defined at:
 15977 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 15978 ;; Parameters:    Size  Location     Type
 15979 ;;  f1              4   72[BANK0 ] unsigned char 
 15980 ;; Auto vars:     Size  Location     Type
 15981 ;;  exp1            1   77[BANK0 ] unsigned char 
 15982 ;;  sign1           1   76[BANK0 ] unsigned char 
 15983 ;; Return value:  Size  Location     Type
 15984 ;;                  4   72[BANK0 ] long 
 15985 ;; Registers used:
 15986 ;;		wreg, status,2, status,0
 15987 ;; Tracked objects:
 15988 ;;		On entry : 0/0
 15989 ;;		On exit  : 0/0
 15990 ;;		Unchanged: 0/0
 15991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15992 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15993 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15994 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15995 ;;      Totals:         0       6       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15996 ;;Total ram usage:       11 bytes
 15997 ;; Hardware stack levels used:    1
 15998 ;; Hardware stack levels required when called:    3
 15999 ;; This function calls:
 16000 ;;		Nothing
 16001 ;; This function is called by:
 16002 ;;		_ftoa
 16003 ;;		_channelView
 16004 ;;		_checkChannelStatus
 16005 ;; This function uses a non-reentrant model
 16006 ;;
 16007                           
 16008                           
 16009                           ;psect for function ___fltol
 16010  2678                     ___fltol:	
 16011                           
 16012                           ;incstack = 0
 16013                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 16014  2678  1003               	clrc
 16015  2679  0140               	movlb	0	; select bank0
 16016  267A  0D6A               	rlf	___fltol@f1+2,w
 16017  267B  0D6B               	rlf	___fltol@f1+3,w
 16018  267C  0141               	movlb	1	; select bank1
 16019  267D  00A0               	movwf	??___fltol^(0+128)
 16020  267E  0820               	movf	??___fltol^(0+128),w
 16021  267F  0140               	movlb	0	; select bank0
 16022  2680  00ED               	movwf	___fltol@exp1
 16023  2681  086D               	movf	___fltol@exp1,w
 16024  2682  1D03               	btfss	3,2
 16025  2683  2E8D               	goto	l3800
 16026  2684                     l3796:	
 16027  2684  3000               	movlw	0
 16028  2685  00EB               	movwf	?___fltol+3
 16029  2686  3000               	movlw	0
 16030  2687  00EA               	movwf	?___fltol+2
 16031  2688  3000               	movlw	0
 16032  2689  00E9               	movwf	?___fltol+1
 16033  268A  3000               	movlw	0
 16034  268B  00E8               	movwf	?___fltol
 16035  268C  0008               	return
 16036  268D                     l3800:	
 16037  268D  0868               	movf	___fltol@f1,w
 16038  268E  0141               	movlb	1	; select bank1
 16039  268F  00A0               	movwf	??___fltol^(0+128)
 16040  2690  0140               	movlb	0	; select bank0
 16041  2691  0869               	movf	___fltol@f1+1,w
 16042  2692  0141               	movlb	1	; select bank1
 16043  2693  00A1               	movwf	(??___fltol^(0+128)+1)
 16044  2694  0140               	movlb	0	; select bank0
 16045  2695  086A               	movf	___fltol@f1+2,w
 16046  2696  0141               	movlb	1	; select bank1
 16047  2697  00A2               	movwf	(??___fltol^(0+128)+2)
 16048  2698  0140               	movlb	0	; select bank0
 16049  2699  086B               	movf	___fltol@f1+3,w
 16050  269A  0141               	movlb	1	; select bank1
 16051  269B  00A3               	movwf	(??___fltol^(0+128)+3)
 16052  269C  301F               	movlw	31
 16053  269D                     u4045:	
 16054  269D  36A3               	lsrf	(??___fltol^(0+128)+3),f
 16055  269E  0CA2               	rrf	(??___fltol^(0+128)+2),f
 16056  269F  0CA1               	rrf	(??___fltol^(0+128)+1),f
 16057  26A0  0CA0               	rrf	??___fltol^(0+128),f
 16058  26A1  0B89               	decfsz	9,f
 16059  26A2  2E9D               	goto	u4045
 16060  26A3  0820               	movf	??___fltol^(0+128),w
 16061  26A4  00A4               	movwf	(??___fltol+4)^(0+128)
 16062  26A5  0824               	movf	(??___fltol+4)^(0+128),w
 16063  26A6  0140               	movlb	0	; select bank0
 16064  26A7  00EC               	movwf	___fltol@sign1
 16065  26A8  17EA               	bsf	___fltol@f1+2,7
 16066  26A9  30FF               	movlw	255
 16067  26AA  05E8               	andwf	___fltol@f1,f
 16068  26AB  30FF               	movlw	255
 16069  26AC  05E9               	andwf	___fltol@f1+1,f
 16070  26AD  30FF               	movlw	255
 16071  26AE  05EA               	andwf	___fltol@f1+2,f
 16072  26AF  3000               	movlw	0
 16073  26B0  05EB               	andwf	___fltol@f1+3,f
 16074  26B1  3096               	movlw	150
 16075  26B2  02ED               	subwf	___fltol@exp1,f
 16076  26B3  1FED               	btfss	___fltol@exp1,7
 16077  26B4  2ECA               	goto	l3818
 16078  26B5  086D               	movf	___fltol@exp1,w
 16079  26B6  3A80               	xorlw	128
 16080  26B7  3E97               	addlw	151
 16081  26B8  1C03               	btfss	3,0
 16082  26B9  2E84               	goto	l3796
 16083  26BA                     l3816:	
 16084  26BA  3001               	movlw	1
 16085  26BB                     u4075:	
 16086  26BB  36EB               	lsrf	___fltol@f1+3,f
 16087  26BC  0CEA               	rrf	___fltol@f1+2,f
 16088  26BD  0CE9               	rrf	___fltol@f1+1,f
 16089  26BE  0CE8               	rrf	___fltol@f1,f
 16090  26BF  0B89               	decfsz	9,f
 16091  26C0  2EBB               	goto	u4075
 16092  26C1  3001               	movlw	1
 16093  26C2  0141               	movlb	1	; select bank1
 16094  26C3  00A0               	movwf	??___fltol^(0+128)
 16095  26C4  0820               	movf	??___fltol^(0+128),w
 16096  26C5  0140               	movlb	0	; select bank0
 16097  26C6  07ED               	addwf	___fltol@exp1,f
 16098  26C7  1903               	btfsc	3,2
 16099  26C8  2EDB               	goto	l3826
 16100  26C9  2EBA               	goto	l3816
 16101  26CA                     l3818:	
 16102  26CA  3020               	movlw	32
 16103  26CB  026D               	subwf	___fltol@exp1,w
 16104  26CC  1803               	btfsc	3,0
 16105  26CD  2E84               	goto	l3796
 16106  26CE                     l1051:	
 16107  26CE  086D               	movf	___fltol@exp1,w
 16108  26CF  1903               	btfsc	3,2
 16109  26D0  2EDB               	goto	l3826
 16110  26D1  3001               	movlw	1
 16111  26D2                     u4105:	
 16112  26D2  35E8               	lslf	___fltol@f1,f
 16113  26D3  0DE9               	rlf	___fltol@f1+1,f
 16114  26D4  0DEA               	rlf	___fltol@f1+2,f
 16115  26D5  0DEB               	rlf	___fltol@f1+3,f
 16116  26D6  0B89               	decfsz	9,f
 16117  26D7  2ED2               	goto	u4105
 16118  26D8  3001               	movlw	1
 16119  26D9  02ED               	subwf	___fltol@exp1,f
 16120  26DA  2ECE               	goto	l1051
 16121  26DB                     l3826:	
 16122  26DB  086C               	movf	___fltol@sign1,w
 16123  26DC  1903               	btfsc	3,2
 16124  26DD  0008               	return
 16125  26DE  09E8               	comf	___fltol@f1,f
 16126  26DF  09E9               	comf	___fltol@f1+1,f
 16127  26E0  09EA               	comf	___fltol@f1+2,f
 16128  26E1  09EB               	comf	___fltol@f1+3,f
 16129  26E2  0AE8               	incf	___fltol@f1,f
 16130  26E3  1903               	skipnz
 16131  26E4  0AE9               	incf	___fltol@f1+1,f
 16132  26E5  1903               	skipnz
 16133  26E6  0AEA               	incf	___fltol@f1+2,f
 16134  26E7  1903               	skipnz
 16135  26E8  0AEB               	incf	___fltol@f1+3,f
 16136  26E9  0008               	return
 16137  26EA                     __end_of___fltol:	
 16138                           
 16139                           	psect	text51
 16140  19F7                     __ptext51:	
 16141 ;; *************** function ___flge *****************
 16142 ;; Defined at:
 16143 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 16144 ;; Parameters:    Size  Location     Type
 16145 ;;  ff1             4   72[BANK0 ] long 
 16146 ;;  ff2             4   76[BANK0 ] long 
 16147 ;; Auto vars:     Size  Location     Type
 16148 ;;		None
 16149 ;; Return value:  Size  Location     Type
 16150 ;;		None               void
 16151 ;; Registers used:
 16152 ;;		wreg, status,2, status,0
 16153 ;; Tracked objects:
 16154 ;;		On entry : 0/0
 16155 ;;		On exit  : 0/0
 16156 ;;		Unchanged: 0/0
 16157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16158 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16160 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16161 ;;      Totals:         0       8       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16162 ;;Total ram usage:       12 bytes
 16163 ;; Hardware stack levels used:    1
 16164 ;; Hardware stack levels required when called:    3
 16165 ;; This function calls:
 16166 ;;		Nothing
 16167 ;; This function is called by:
 16168 ;;		_ftoa
 16169 ;;		_spinInput
 16170 ;;		_channelSetup
 16171 ;;		_setOutputPower
 16172 ;;		_checkChannelStatus
 16173 ;;		_systemCheck
 16174 ;;		_checkSensor
 16175 ;; This function uses a non-reentrant model
 16176 ;;
 16177                           
 16178                           
 16179                           ;psect for function ___flge
 16180  19F7                     ___flge:	
 16181                           
 16182                           ;incstack = 0
 16183                           ; Regs used in ___flge: [wreg+status,2+status,0]
 16184  19F7  3000               	movlw	0
 16185  19F8  0140               	movlb	0	; select bank0
 16186  19F9  0568               	andwf	___flge@ff1,w
 16187  19FA  0141               	movlb	1	; select bank1
 16188  19FB  00A0               	movwf	??___flge^(0+128)
 16189  19FC  3000               	movlw	0
 16190  19FD  0140               	movlb	0	; select bank0
 16191  19FE  0569               	andwf	___flge@ff1+1,w
 16192  19FF  0141               	movlb	1	; select bank1
 16193  1A00  00A1               	movwf	(??___flge^(0+128)+1)
 16194  1A01  3080               	movlw	128
 16195  1A02  0140               	movlb	0	; select bank0
 16196  1A03  056A               	andwf	___flge@ff1+2,w
 16197  1A04  0141               	movlb	1	; select bank1
 16198  1A05  00A2               	movwf	(??___flge^(0+128)+2)
 16199  1A06  307F               	movlw	127
 16200  1A07  0140               	movlb	0	; select bank0
 16201  1A08  056B               	andwf	___flge@ff1+3,w
 16202  1A09  0141               	movlb	1	; select bank1
 16203  1A0A  00A3               	movwf	(??___flge^(0+128)+3)
 16204  1A0B  0823               	movf	(??___flge+3)^(0+128),w
 16205  1A0C  0422               	iorwf	(??___flge+2)^(0+128),w
 16206  1A0D  0421               	iorwf	(??___flge+1)^(0+128),w
 16207  1A0E  0420               	iorwf	??___flge^(0+128),w
 16208  1A0F  1D03               	skipz
 16209  1A10  2A1A               	goto	l1028
 16210  1A11  3000               	movlw	0
 16211  1A12  0140               	movlb	0	; select bank0
 16212  1A13  00EB               	movwf	___flge@ff1+3
 16213  1A14  3000               	movlw	0
 16214  1A15  00EA               	movwf	___flge@ff1+2
 16215  1A16  3000               	movlw	0
 16216  1A17  00E9               	movwf	___flge@ff1+1
 16217  1A18  3000               	movlw	0
 16218  1A19  00E8               	movwf	___flge@ff1
 16219  1A1A                     l1028:	
 16220  1A1A  3000               	movlw	0
 16221  1A1B  0140               	movlb	0	; select bank0
 16222  1A1C  056C               	andwf	___flge@ff2,w
 16223  1A1D  0141               	movlb	1	; select bank1
 16224  1A1E  00A0               	movwf	??___flge^(0+128)
 16225  1A1F  3000               	movlw	0
 16226  1A20  0140               	movlb	0	; select bank0
 16227  1A21  056D               	andwf	___flge@ff2+1,w
 16228  1A22  0141               	movlb	1	; select bank1
 16229  1A23  00A1               	movwf	(??___flge^(0+128)+1)
 16230  1A24  3080               	movlw	128
 16231  1A25  0140               	movlb	0	; select bank0
 16232  1A26  056E               	andwf	___flge@ff2+2,w
 16233  1A27  0141               	movlb	1	; select bank1
 16234  1A28  00A2               	movwf	(??___flge^(0+128)+2)
 16235  1A29  307F               	movlw	127
 16236  1A2A  0140               	movlb	0	; select bank0
 16237  1A2B  056F               	andwf	___flge@ff2+3,w
 16238  1A2C  0141               	movlb	1	; select bank1
 16239  1A2D  00A3               	movwf	(??___flge^(0+128)+3)
 16240  1A2E  0823               	movf	(??___flge+3)^(0+128),w
 16241  1A2F  0422               	iorwf	(??___flge+2)^(0+128),w
 16242  1A30  0421               	iorwf	(??___flge+1)^(0+128),w
 16243  1A31  0420               	iorwf	??___flge^(0+128),w
 16244  1A32  1D03               	skipz
 16245  1A33  2A3D               	goto	l3780
 16246  1A34  3000               	movlw	0
 16247  1A35  0140               	movlb	0	; select bank0
 16248  1A36  00EF               	movwf	___flge@ff2+3
 16249  1A37  3000               	movlw	0
 16250  1A38  00EE               	movwf	___flge@ff2+2
 16251  1A39  3000               	movlw	0
 16252  1A3A  00ED               	movwf	___flge@ff2+1
 16253  1A3B  3000               	movlw	0
 16254  1A3C  00EC               	movwf	___flge@ff2
 16255  1A3D                     l3780:	
 16256  1A3D  0140               	movlb	0	; select bank0
 16257  1A3E  1FEB               	btfss	___flge@ff1+3,7
 16258  1A3F  2A68               	goto	l3784
 16259  1A40  3000               	movlw	0
 16260  1A41  0141               	movlb	1	; select bank1
 16261  1A42  00A0               	movwf	??___flge^(0+128)
 16262  1A43  3000               	movlw	0
 16263  1A44  00A1               	movwf	(??___flge^(0+128)+1)
 16264  1A45  3000               	movlw	0
 16265  1A46  00A2               	movwf	(??___flge^(0+128)+2)
 16266  1A47  3080               	movlw	128
 16267  1A48  00A3               	movwf	(??___flge^(0+128)+3)
 16268  1A49  0140               	movlb	0	; select bank0
 16269  1A4A  0868               	movf	___flge@ff1,w
 16270  1A4B  0141               	movlb	1	; select bank1
 16271  1A4C  02A0               	subwf	??___flge^(0+128),f
 16272  1A4D  0140               	movlb	0	; select bank0
 16273  1A4E  0869               	movf	___flge@ff1+1,w
 16274  1A4F  0141               	movlb	1	; select bank1
 16275  1A50  3BA1               	subwfb	(??___flge^(0+128)+1),f
 16276  1A51  0140               	movlb	0	; select bank0
 16277  1A52  086A               	movf	___flge@ff1+2,w
 16278  1A53  0141               	movlb	1	; select bank1
 16279  1A54  3BA2               	subwfb	(??___flge^(0+128)+2),f
 16280  1A55  0140               	movlb	0	; select bank0
 16281  1A56  086B               	movf	___flge@ff1+3,w
 16282  1A57  0141               	movlb	1	; select bank1
 16283  1A58  3BA3               	subwfb	(??___flge^(0+128)+3),f
 16284  1A59  0823               	movf	(??___flge+3)^(0+128),w
 16285  1A5A  0140               	movlb	0	; select bank0
 16286  1A5B  00EB               	movwf	___flge@ff1+3
 16287  1A5C  0141               	movlb	1	; select bank1
 16288  1A5D  0822               	movf	(??___flge+2)^(0+128),w
 16289  1A5E  0140               	movlb	0	; select bank0
 16290  1A5F  00EA               	movwf	___flge@ff1+2
 16291  1A60  0141               	movlb	1	; select bank1
 16292  1A61  0821               	movf	(??___flge+1)^(0+128),w
 16293  1A62  0140               	movlb	0	; select bank0
 16294  1A63  00E9               	movwf	___flge@ff1+1
 16295  1A64  0141               	movlb	1	; select bank1
 16296  1A65  0820               	movf	??___flge^(0+128),w
 16297  1A66  0140               	movlb	0	; select bank0
 16298  1A67  00E8               	movwf	___flge@ff1
 16299  1A68                     l3784:	
 16300  1A68  1FEF               	btfss	___flge@ff2+3,7
 16301  1A69  2A92               	goto	l1031
 16302  1A6A  3000               	movlw	0
 16303  1A6B  0141               	movlb	1	; select bank1
 16304  1A6C  00A0               	movwf	??___flge^(0+128)
 16305  1A6D  3000               	movlw	0
 16306  1A6E  00A1               	movwf	(??___flge^(0+128)+1)
 16307  1A6F  3000               	movlw	0
 16308  1A70  00A2               	movwf	(??___flge^(0+128)+2)
 16309  1A71  3080               	movlw	128
 16310  1A72  00A3               	movwf	(??___flge^(0+128)+3)
 16311  1A73  0140               	movlb	0	; select bank0
 16312  1A74  086C               	movf	___flge@ff2,w
 16313  1A75  0141               	movlb	1	; select bank1
 16314  1A76  02A0               	subwf	??___flge^(0+128),f
 16315  1A77  0140               	movlb	0	; select bank0
 16316  1A78  086D               	movf	___flge@ff2+1,w
 16317  1A79  0141               	movlb	1	; select bank1
 16318  1A7A  3BA1               	subwfb	(??___flge^(0+128)+1),f
 16319  1A7B  0140               	movlb	0	; select bank0
 16320  1A7C  086E               	movf	___flge@ff2+2,w
 16321  1A7D  0141               	movlb	1	; select bank1
 16322  1A7E  3BA2               	subwfb	(??___flge^(0+128)+2),f
 16323  1A7F  0140               	movlb	0	; select bank0
 16324  1A80  086F               	movf	___flge@ff2+3,w
 16325  1A81  0141               	movlb	1	; select bank1
 16326  1A82  3BA3               	subwfb	(??___flge^(0+128)+3),f
 16327  1A83  0823               	movf	(??___flge+3)^(0+128),w
 16328  1A84  0140               	movlb	0	; select bank0
 16329  1A85  00EF               	movwf	___flge@ff2+3
 16330  1A86  0141               	movlb	1	; select bank1
 16331  1A87  0822               	movf	(??___flge+2)^(0+128),w
 16332  1A88  0140               	movlb	0	; select bank0
 16333  1A89  00EE               	movwf	___flge@ff2+2
 16334  1A8A  0141               	movlb	1	; select bank1
 16335  1A8B  0821               	movf	(??___flge+1)^(0+128),w
 16336  1A8C  0140               	movlb	0	; select bank0
 16337  1A8D  00ED               	movwf	___flge@ff2+1
 16338  1A8E  0141               	movlb	1	; select bank1
 16339  1A8F  0820               	movf	??___flge^(0+128),w
 16340  1A90  0140               	movlb	0	; select bank0
 16341  1A91  00EC               	movwf	___flge@ff2
 16342  1A92                     l1031:	
 16343  1A92  3080               	movlw	128
 16344  1A93  06EB               	xorwf	___flge@ff1+3,f
 16345  1A94  3080               	movlw	128
 16346  1A95  06EF               	xorwf	___flge@ff2+3,f
 16347  1A96  086F               	movf	___flge@ff2+3,w
 16348  1A97  026B               	subwf	___flge@ff1+3,w
 16349  1A98  1D03               	skipz
 16350  1A99  0008               	return
 16351  1A9A  086E               	movf	___flge@ff2+2,w
 16352  1A9B  026A               	subwf	___flge@ff1+2,w
 16353  1A9C  1D03               	skipz
 16354  1A9D  0008               	return
 16355  1A9E  086D               	movf	___flge@ff2+1,w
 16356  1A9F  0269               	subwf	___flge@ff1+1,w
 16357  1AA0  1D03               	skipz
 16358  1AA1  0008               	return
 16359  1AA2  086C               	movf	___flge@ff2,w
 16360  1AA3  0268               	subwf	___flge@ff1,w
 16361  1AA4  0008               	return
 16362  1AA5                     __end_of___flge:	
 16363                           
 16364                           	psect	text52
 16365  22FC                     __ptext52:	
 16366 ;; *************** function ___fleq *****************
 16367 ;; Defined at:
 16368 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;  ff1             4    0[BANK0 ] long 
 16371 ;;  ff2             4    4[BANK0 ] long 
 16372 ;; Auto vars:     Size  Location     Type
 16373 ;;		None
 16374 ;; Return value:  Size  Location     Type
 16375 ;;		None               void
 16376 ;; Registers used:
 16377 ;;		wreg, status,2, status,0
 16378 ;; Tracked objects:
 16379 ;;		On entry : 0/0
 16380 ;;		On exit  : 0/0
 16381 ;;		Unchanged: 0/0
 16382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16383 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16385 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16386 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16387 ;;Total ram usage:       12 bytes
 16388 ;; Hardware stack levels used:    1
 16389 ;; Hardware stack levels required when called:    3
 16390 ;; This function calls:
 16391 ;;		Nothing
 16392 ;; This function is called by:
 16393 ;;		_channelSetup
 16394 ;;		_setOutputPower
 16395 ;;		_checkChannelStatus
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           
 16400                           ;psect for function ___fleq
 16401  22FC                     ___fleq:	
 16402                           
 16403                           ;incstack = 0
 16404                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 16405  22FC  3000               	movlw	0
 16406  22FD  0140               	movlb	0	; select bank0
 16407  22FE  0520               	andwf	___fleq@ff1,w
 16408  22FF  00A8               	movwf	??___fleq
 16409  2300  3000               	movlw	0
 16410  2301  0521               	andwf	___fleq@ff1+1,w
 16411  2302  00A9               	movwf	??___fleq+1
 16412  2303  3080               	movlw	128
 16413  2304  0522               	andwf	___fleq@ff1+2,w
 16414  2305  00AA               	movwf	??___fleq+2
 16415  2306  307F               	movlw	127
 16416  2307  0523               	andwf	___fleq@ff1+3,w
 16417  2308  00AB               	movwf	??___fleq+3
 16418  2309  082B               	movf	??___fleq+3,w
 16419  230A  042A               	iorwf	??___fleq+2,w
 16420  230B  0429               	iorwf	??___fleq+1,w
 16421  230C  0428               	iorwf	??___fleq,w
 16422  230D  1D03               	skipz
 16423  230E  2B17               	goto	l1019
 16424  230F  3000               	movlw	0
 16425  2310  00A3               	movwf	___fleq@ff1+3
 16426  2311  3000               	movlw	0
 16427  2312  00A2               	movwf	___fleq@ff1+2
 16428  2313  3000               	movlw	0
 16429  2314  00A1               	movwf	___fleq@ff1+1
 16430  2315  3000               	movlw	0
 16431  2316  00A0               	movwf	___fleq@ff1
 16432  2317                     l1019:	
 16433  2317  3000               	movlw	0
 16434  2318  0524               	andwf	___fleq@ff2,w
 16435  2319  00A8               	movwf	??___fleq
 16436  231A  3000               	movlw	0
 16437  231B  0525               	andwf	___fleq@ff2+1,w
 16438  231C  00A9               	movwf	??___fleq+1
 16439  231D  3080               	movlw	128
 16440  231E  0526               	andwf	___fleq@ff2+2,w
 16441  231F  00AA               	movwf	??___fleq+2
 16442  2320  307F               	movlw	127
 16443  2321  0527               	andwf	___fleq@ff2+3,w
 16444  2322  00AB               	movwf	??___fleq+3
 16445  2323  082B               	movf	??___fleq+3,w
 16446  2324  042A               	iorwf	??___fleq+2,w
 16447  2325  0429               	iorwf	??___fleq+1,w
 16448  2326  0428               	iorwf	??___fleq,w
 16449  2327  1D03               	skipz
 16450  2328  2B31               	goto	l1020
 16451  2329  3000               	movlw	0
 16452  232A  00A7               	movwf	___fleq@ff2+3
 16453  232B  3000               	movlw	0
 16454  232C  00A6               	movwf	___fleq@ff2+2
 16455  232D  3000               	movlw	0
 16456  232E  00A5               	movwf	___fleq@ff2+1
 16457  232F  3000               	movlw	0
 16458  2330  00A4               	movwf	___fleq@ff2
 16459  2331                     l1020:	
 16460  2331  0827               	movf	___fleq@ff2+3,w
 16461  2332  0623               	xorwf	___fleq@ff1+3,w
 16462  2333  1D03               	skipz
 16463  2334  2B3F               	goto	u5165
 16464  2335  0826               	movf	___fleq@ff2+2,w
 16465  2336  0622               	xorwf	___fleq@ff1+2,w
 16466  2337  1D03               	skipz
 16467  2338  2B3F               	goto	u5165
 16468  2339  0825               	movf	___fleq@ff2+1,w
 16469  233A  0621               	xorwf	___fleq@ff1+1,w
 16470  233B  1D03               	skipz
 16471  233C  2B3F               	goto	u5165
 16472  233D  0824               	movf	___fleq@ff2,w
 16473  233E  0620               	xorwf	___fleq@ff1,w
 16474  233F                     u5165:	
 16475  233F  1903               	skipnz
 16476  2340  2B43               	goto	l4376
 16477  2341  1003               	clrc
 16478  2342  0008               	return
 16479  2343                     l4376:	
 16480  2343  1403               	setc
 16481  2344  0008               	return
 16482  2345                     __end_of___fleq:	
 16483                           
 16484                           	psect	text53
 16485  00BC                     __ptext53:	
 16486 ;; *************** function _calcRequiredPower *****************
 16487 ;; Defined at:
 16488 ;;		line 253 in file "system.c"
 16489 ;; Parameters:    Size  Location     Type
 16490 ;;  data            2   74[BANK0 ] PTR struct .
 16491 ;;		 -> data(173), 
 16492 ;; Auto vars:     Size  Location     Type
 16493 ;;  T2              4   52[BANK1 ] float 
 16494 ;;  T1              4   48[BANK1 ] float 
 16495 ;;  A               4   40[BANK1 ] float 
 16496 ;;  phi             4   36[BANK1 ] float 
 16497 ;;  d               4   32[BANK1 ] float 
 16498 ;;  Rth             4    4[BANK1 ] float 
 16499 ;;  p               4    0[BANK1 ] float 
 16500 ;;  n               1   56[BANK1 ] unsigned char 
 16501 ;; Return value:  Size  Location     Type
 16502 ;;                  1    wreg      void 
 16503 ;; Registers used:
 16504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16505 ;; Tracked objects:
 16506 ;;		On entry : 0/0
 16507 ;;		On exit  : 0/0
 16508 ;;		Unchanged: 0/0
 16509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16510 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16511 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16512 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16513 ;;      Totals:         0       6      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16514 ;;Total ram usage:       63 bytes
 16515 ;; Hardware stack levels used:    1
 16516 ;; Hardware stack levels required when called:    5
 16517 ;; This function calls:
 16518 ;;		___fladd
 16519 ;;		___fldiv
 16520 ;;		___flmul
 16521 ;;		___flsub
 16522 ;; This function is called by:
 16523 ;;		_main
 16524 ;; This function uses a non-reentrant model
 16525 ;;
 16526                           
 16527                           
 16528                           ;psect for function _calcRequiredPower
 16529  00BC                     _calcRequiredPower:	
 16530                           
 16531                           ;system.c: 253: void calcRequiredPower(t_globalData *data);system.c: 254: {;system.c: 25
      +                          5:  uint8_t n;;system.c: 256:  float d, A, T1, T2, phi;;system.c: 257:  float p, Rth;;sy
      +                          stem.c: 259:  for (n = 0; n < 4; n++) {
 16532                           
 16533                           ;incstack = 0
 16534                           ; Regs used in _calcRequiredPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16535  00BC  0141               	movlb	1	; select bank1
 16536  00BD  01D8               	clrf	calcRequiredPower@n^(0+128)
 16537  00BE                     l5176:	
 16538                           
 16539                           ;system.c: 261:   d = 0.0254 * data->chData[n].lensDia;
 16540  00BE  303C               	movlw	60
 16541  00BF  0140               	movlb	0	; select bank0
 16542  00C0  00B7               	movwf	___flmul@b+3
 16543  00C1  30D0               	movlw	208
 16544  00C2  00B6               	movwf	___flmul@b+2
 16545  00C3  3013               	movlw	19
 16546  00C4  00B5               	movwf	___flmul@b+1
 16547  00C5  30A9               	movlw	169
 16548  00C6  00B4               	movwf	___flmul@b
 16549  00C7  0141               	movlb	1	; select bank1
 16550  00C8  0858               	movf	calcRequiredPower@n^(0+128),w
 16551  00C9  0140               	movlb	0	; select bank0
 16552  00CA  00EC               	movwf	??_calcRequiredPower
 16553  00CB  01ED               	clrf	??_calcRequiredPower+1
 16554  00CC  3005               	movlw	5
 16555  00CD                     u5925:	
 16556  00CD  35EC               	lslf	??_calcRequiredPower,f
 16557  00CE  0DED               	rlf	??_calcRequiredPower+1,f
 16558  00CF  0B89               	decfsz	9,f
 16559  00D0  28CD               	goto	u5925
 16560  00D1  086C               	movf	??_calcRequiredPower,w
 16561  00D2  076A               	addwf	calcRequiredPower@data,w
 16562  00D3  00EE               	movwf	??_calcRequiredPower+2
 16563  00D4  086D               	movf	??_calcRequiredPower+1,w
 16564  00D5  3D6B               	addwfc	calcRequiredPower@data+1,w
 16565  00D6  00EF               	movwf	??_calcRequiredPower+3
 16566  00D7  086E               	movf	??_calcRequiredPower+2,w
 16567  00D8  3E43               	addlw	67
 16568  00D9  0086               	movwf	6
 16569  00DA  3000               	movlw	0
 16570  00DB  3D6F               	addwfc	??_calcRequiredPower+3,w
 16571  00DC  0087               	movwf	7
 16572  00DD  3F40               	moviw [0]fsr1
 16573  00DE  00B8               	movwf	___flmul@a
 16574  00DF  3F41               	moviw [1]fsr1
 16575  00E0  00B9               	movwf	___flmul@a+1
 16576  00E1  3F42               	moviw [2]fsr1
 16577  00E2  00BA               	movwf	___flmul@a+2
 16578  00E3  3F43               	moviw [3]fsr1
 16579  00E4  00BB               	movwf	___flmul@a+3
 16580  00E5  318D  25D4  3180   	fcall	___flmul
 16581  00E8  0140               	movlb	0	; select bank0
 16582  00E9  0837               	movf	?___flmul+3,w
 16583  00EA  0141               	movlb	1	; select bank1
 16584  00EB  00C3               	movwf	(calcRequiredPower@d+3)^(0+128)
 16585  00EC  0140               	movlb	0	; select bank0
 16586  00ED  0836               	movf	?___flmul+2,w
 16587  00EE  0141               	movlb	1	; select bank1
 16588  00EF  00C2               	movwf	(calcRequiredPower@d+2)^(0+128)
 16589  00F0  0140               	movlb	0	; select bank0
 16590  00F1  0835               	movf	?___flmul+1,w
 16591  00F2  0141               	movlb	1	; select bank1
 16592  00F3  00C1               	movwf	(calcRequiredPower@d+1)^(0+128)
 16593  00F4  0140               	movlb	0	; select bank0
 16594  00F5  0834               	movf	?___flmul,w
 16595  00F6  0141               	movlb	1	; select bank1
 16596  00F7  00C0               	movwf	calcRequiredPower@d^(0+128)
 16597                           
 16598                           ;system.c: 262:   A = (3.14 * d * d) / 4;
 16599  00F8  3040               	movlw	64
 16600  00F9  0140               	movlb	0	; select bank0
 16601  00FA  00B7               	movwf	___flmul@b+3
 16602  00FB  3048               	movlw	72
 16603  00FC  00B6               	movwf	___flmul@b+2
 16604  00FD  30F5               	movlw	245
 16605  00FE  00B5               	movwf	___flmul@b+1
 16606  00FF  30C3               	movlw	195
 16607  0100  00B4               	movwf	___flmul@b
 16608  0101  0141               	movlb	1	; select bank1
 16609  0102  0843               	movf	(calcRequiredPower@d+3)^(0+128),w
 16610  0103  0140               	movlb	0	; select bank0
 16611  0104  00BB               	movwf	___flmul@a+3
 16612  0105  0141               	movlb	1	; select bank1
 16613  0106  0842               	movf	(calcRequiredPower@d+2)^(0+128),w
 16614  0107  0140               	movlb	0	; select bank0
 16615  0108  00BA               	movwf	___flmul@a+2
 16616  0109  0141               	movlb	1	; select bank1
 16617  010A  0841               	movf	(calcRequiredPower@d+1)^(0+128),w
 16618  010B  0140               	movlb	0	; select bank0
 16619  010C  00B9               	movwf	___flmul@a+1
 16620  010D  0141               	movlb	1	; select bank1
 16621  010E  0840               	movf	calcRequiredPower@d^(0+128),w
 16622  010F  0140               	movlb	0	; select bank0
 16623  0110  00B8               	movwf	___flmul@a
 16624  0111  318D  25D4  3180   	fcall	___flmul
 16625  0114  0140               	movlb	0	; select bank0
 16626  0115  0837               	movf	?___flmul+3,w
 16627  0116  0141               	movlb	1	; select bank1
 16628  0117  00CF               	movwf	(_calcRequiredPower$2290+3)^(0+128)
 16629  0118  0140               	movlb	0	; select bank0
 16630  0119  0836               	movf	?___flmul+2,w
 16631  011A  0141               	movlb	1	; select bank1
 16632  011B  00CE               	movwf	(_calcRequiredPower$2290+2)^(0+128)
 16633  011C  0140               	movlb	0	; select bank0
 16634  011D  0835               	movf	?___flmul+1,w
 16635  011E  0141               	movlb	1	; select bank1
 16636  011F  00CD               	movwf	(_calcRequiredPower$2290+1)^(0+128)
 16637  0120  0140               	movlb	0	; select bank0
 16638  0121  0834               	movf	?___flmul,w
 16639  0122  0141               	movlb	1	; select bank1
 16640  0123  00CC               	movwf	_calcRequiredPower$2290^(0+128)
 16641                           
 16642                           ;system.c: 262:   A = (3.14 * d * d) / 4;
 16643  0124  3040               	movlw	64
 16644  0125  0140               	movlb	0	; select bank0
 16645  0126  00D1               	movwf	___fldiv@a+3
 16646  0127  3080               	movlw	128
 16647  0128  00D0               	movwf	___fldiv@a+2
 16648  0129  3000               	movlw	0
 16649  012A  00CF               	movwf	___fldiv@a+1
 16650  012B  3000               	movlw	0
 16651  012C  00CE               	movwf	___fldiv@a
 16652  012D  0141               	movlb	1	; select bank1
 16653  012E  0843               	movf	(calcRequiredPower@d+3)^(0+128),w
 16654  012F  0140               	movlb	0	; select bank0
 16655  0130  00B7               	movwf	___flmul@b+3
 16656  0131  0141               	movlb	1	; select bank1
 16657  0132  0842               	movf	(calcRequiredPower@d+2)^(0+128),w
 16658  0133  0140               	movlb	0	; select bank0
 16659  0134  00B6               	movwf	___flmul@b+2
 16660  0135  0141               	movlb	1	; select bank1
 16661  0136  0841               	movf	(calcRequiredPower@d+1)^(0+128),w
 16662  0137  0140               	movlb	0	; select bank0
 16663  0138  00B5               	movwf	___flmul@b+1
 16664  0139  0141               	movlb	1	; select bank1
 16665  013A  0840               	movf	calcRequiredPower@d^(0+128),w
 16666  013B  0140               	movlb	0	; select bank0
 16667  013C  00B4               	movwf	___flmul@b
 16668  013D  0141               	movlb	1	; select bank1
 16669  013E  084F               	movf	(_calcRequiredPower$2290+3)^(0+128),w
 16670  013F  0140               	movlb	0	; select bank0
 16671  0140  00BB               	movwf	___flmul@a+3
 16672  0141  0141               	movlb	1	; select bank1
 16673  0142  084E               	movf	(_calcRequiredPower$2290+2)^(0+128),w
 16674  0143  0140               	movlb	0	; select bank0
 16675  0144  00BA               	movwf	___flmul@a+2
 16676  0145  0141               	movlb	1	; select bank1
 16677  0146  084D               	movf	(_calcRequiredPower$2290+1)^(0+128),w
 16678  0147  0140               	movlb	0	; select bank0
 16679  0148  00B9               	movwf	___flmul@a+1
 16680  0149  0141               	movlb	1	; select bank1
 16681  014A  084C               	movf	_calcRequiredPower$2290^(0+128),w
 16682  014B  0140               	movlb	0	; select bank0
 16683  014C  00B8               	movwf	___flmul@a
 16684  014D  318D  25D4  3180   	fcall	___flmul
 16685  0150  0140               	movlb	0	; select bank0
 16686  0151  0837               	movf	?___flmul+3,w
 16687  0152  00D5               	movwf	___fldiv@b+3
 16688  0153  0836               	movf	?___flmul+2,w
 16689  0154  00D4               	movwf	___fldiv@b+2
 16690  0155  0835               	movf	?___flmul+1,w
 16691  0156  00D3               	movwf	___fldiv@b+1
 16692  0157  0834               	movf	?___flmul,w
 16693  0158  00D2               	movwf	___fldiv@b
 16694  0159  3190  2056  3180   	fcall	___fldiv
 16695  015C  0140               	movlb	0	; select bank0
 16696  015D  0851               	movf	?___fldiv+3,w
 16697  015E  0141               	movlb	1	; select bank1
 16698  015F  00CB               	movwf	(calcRequiredPower@A+3)^(0+128)
 16699  0160  0140               	movlb	0	; select bank0
 16700  0161  0850               	movf	?___fldiv+2,w
 16701  0162  0141               	movlb	1	; select bank1
 16702  0163  00CA               	movwf	(calcRequiredPower@A+2)^(0+128)
 16703  0164  0140               	movlb	0	; select bank0
 16704  0165  084F               	movf	?___fldiv+1,w
 16705  0166  0141               	movlb	1	; select bank1
 16706  0167  00C9               	movwf	(calcRequiredPower@A+1)^(0+128)
 16707  0168  0140               	movlb	0	; select bank0
 16708  0169  084E               	movf	?___fldiv,w
 16709  016A  0141               	movlb	1	; select bank1
 16710  016B  00C8               	movwf	calcRequiredPower@A^(0+128)
 16711                           
 16712                           ;system.c: 264:   T1 = data->dewPointC + data->dpOffset + 273.15;
 16713  016C  0140               	movlb	0	; select bank0
 16714  016D  086A               	movf	calcRequiredPower@data,w
 16715  016E  3E20               	addlw	32
 16716  016F  0086               	movwf	6
 16717  0170  3000               	movlw	0
 16718  0171  3D6B               	addwfc	calcRequiredPower@data+1,w
 16719  0172  0087               	movwf	7
 16720  0173  3F40               	moviw [0]fsr1
 16721  0174  00CE               	movwf	___fladd@b
 16722  0175  3F41               	moviw [1]fsr1
 16723  0176  00CF               	movwf	___fladd@b+1
 16724  0177  3F42               	moviw [2]fsr1
 16725  0178  00D0               	movwf	___fladd@b+2
 16726  0179  3F43               	moviw [3]fsr1
 16727  017A  00D1               	movwf	___fladd@b+3
 16728  017B  086A               	movf	calcRequiredPower@data,w
 16729  017C  0086               	movwf	6
 16730  017D  086B               	movf	calcRequiredPower@data+1,w
 16731  017E  0087               	movwf	7
 16732  017F  3148               	addfsr 1,8
 16733  0180  3F40               	moviw [0]fsr1
 16734  0181  00D2               	movwf	___fladd@a
 16735  0182  3F41               	moviw [1]fsr1
 16736  0183  00D3               	movwf	___fladd@a+1
 16737  0184  3F42               	moviw [2]fsr1
 16738  0185  00D4               	movwf	___fladd@a+2
 16739  0186  3F43               	moviw [3]fsr1
 16740  0187  00D5               	movwf	___fladd@a+3
 16741  0188  3189  21D6  3180   	fcall	___fladd
 16742  018B  0140               	movlb	0	; select bank0
 16743  018C  0851               	movf	?___fladd+3,w
 16744  018D  0141               	movlb	1	; select bank1
 16745  018E  00AB               	movwf	(_calcRequiredPower$2291+3)^(0+128)
 16746  018F  0140               	movlb	0	; select bank0
 16747  0190  0850               	movf	?___fladd+2,w
 16748  0191  0141               	movlb	1	; select bank1
 16749  0192  00AA               	movwf	(_calcRequiredPower$2291+2)^(0+128)
 16750  0193  0140               	movlb	0	; select bank0
 16751  0194  084F               	movf	?___fladd+1,w
 16752  0195  0141               	movlb	1	; select bank1
 16753  0196  00A9               	movwf	(_calcRequiredPower$2291+1)^(0+128)
 16754  0197  0140               	movlb	0	; select bank0
 16755  0198  084E               	movf	?___fladd,w
 16756  0199  0141               	movlb	1	; select bank1
 16757  019A  00A8               	movwf	_calcRequiredPower$2291^(0+128)
 16758                           
 16759                           ;system.c: 264:   T1 = data->dewPointC + data->dpOffset + 273.15;
 16760  019B  3043               	movlw	67
 16761  019C  0140               	movlb	0	; select bank0
 16762  019D  00D1               	movwf	___fladd@b+3
 16763  019E  3088               	movlw	136
 16764  019F  00D0               	movwf	___fladd@b+2
 16765  01A0  3093               	movlw	147
 16766  01A1  00CF               	movwf	___fladd@b+1
 16767  01A2  3033               	movlw	51
 16768  01A3  00CE               	movwf	___fladd@b
 16769  01A4  0141               	movlb	1	; select bank1
 16770  01A5  082B               	movf	(_calcRequiredPower$2291+3)^(0+128),w
 16771  01A6  0140               	movlb	0	; select bank0
 16772  01A7  00D5               	movwf	___fladd@a+3
 16773  01A8  0141               	movlb	1	; select bank1
 16774  01A9  082A               	movf	(_calcRequiredPower$2291+2)^(0+128),w
 16775  01AA  0140               	movlb	0	; select bank0
 16776  01AB  00D4               	movwf	___fladd@a+2
 16777  01AC  0141               	movlb	1	; select bank1
 16778  01AD  0829               	movf	(_calcRequiredPower$2291+1)^(0+128),w
 16779  01AE  0140               	movlb	0	; select bank0
 16780  01AF  00D3               	movwf	___fladd@a+1
 16781  01B0  0141               	movlb	1	; select bank1
 16782  01B1  0828               	movf	_calcRequiredPower$2291^(0+128),w
 16783  01B2  0140               	movlb	0	; select bank0
 16784  01B3  00D2               	movwf	___fladd@a
 16785  01B4  3189  21D6  3180   	fcall	___fladd
 16786  01B7  0140               	movlb	0	; select bank0
 16787  01B8  0851               	movf	?___fladd+3,w
 16788  01B9  0141               	movlb	1	; select bank1
 16789  01BA  00D3               	movwf	(calcRequiredPower@T1+3)^(0+128)
 16790  01BB  0140               	movlb	0	; select bank0
 16791  01BC  0850               	movf	?___fladd+2,w
 16792  01BD  0141               	movlb	1	; select bank1
 16793  01BE  00D2               	movwf	(calcRequiredPower@T1+2)^(0+128)
 16794  01BF  0140               	movlb	0	; select bank0
 16795  01C0  084F               	movf	?___fladd+1,w
 16796  01C1  0141               	movlb	1	; select bank1
 16797  01C2  00D1               	movwf	(calcRequiredPower@T1+1)^(0+128)
 16798  01C3  0140               	movlb	0	; select bank0
 16799  01C4  084E               	movf	?___fladd,w
 16800  01C5  0141               	movlb	1	; select bank1
 16801  01C6  00D0               	movwf	calcRequiredPower@T1^(0+128)
 16802                           
 16803                           ;system.c: 265:   T2 = data->skyTemp + 273.15;
 16804  01C7  3043               	movlw	67
 16805  01C8  0140               	movlb	0	; select bank0
 16806  01C9  00D1               	movwf	___fladd@b+3
 16807  01CA  3088               	movlw	136
 16808  01CB  00D0               	movwf	___fladd@b+2
 16809  01CC  3093               	movlw	147
 16810  01CD  00CF               	movwf	___fladd@b+1
 16811  01CE  3033               	movlw	51
 16812  01CF  00CE               	movwf	___fladd@b
 16813  01D0  086A               	movf	calcRequiredPower@data,w
 16814  01D1  3E24               	addlw	36
 16815  01D2  0086               	movwf	6
 16816  01D3  3000               	movlw	0
 16817  01D4  3D6B               	addwfc	calcRequiredPower@data+1,w
 16818  01D5  0087               	movwf	7
 16819  01D6  3F40               	moviw [0]fsr1
 16820  01D7  00D2               	movwf	___fladd@a
 16821  01D8  3F41               	moviw [1]fsr1
 16822  01D9  00D3               	movwf	___fladd@a+1
 16823  01DA  3F42               	moviw [2]fsr1
 16824  01DB  00D4               	movwf	___fladd@a+2
 16825  01DC  3F43               	moviw [3]fsr1
 16826  01DD  00D5               	movwf	___fladd@a+3
 16827  01DE  3189  21D6  3180   	fcall	___fladd
 16828  01E1  0140               	movlb	0	; select bank0
 16829  01E2  0851               	movf	?___fladd+3,w
 16830  01E3  0141               	movlb	1	; select bank1
 16831  01E4  00D7               	movwf	(calcRequiredPower@T2+3)^(0+128)
 16832  01E5  0140               	movlb	0	; select bank0
 16833  01E6  0850               	movf	?___fladd+2,w
 16834  01E7  0141               	movlb	1	; select bank1
 16835  01E8  00D6               	movwf	(calcRequiredPower@T2+2)^(0+128)
 16836  01E9  0140               	movlb	0	; select bank0
 16837  01EA  084F               	movf	?___fladd+1,w
 16838  01EB  0141               	movlb	1	; select bank1
 16839  01EC  00D5               	movwf	(calcRequiredPower@T2+1)^(0+128)
 16840  01ED  0140               	movlb	0	; select bank0
 16841  01EE  084E               	movf	?___fladd,w
 16842  01EF  0141               	movlb	1	; select bank1
 16843  01F0  00D4               	movwf	calcRequiredPower@T2^(0+128)
 16844                           
 16845                           ;system.c: 267:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 16846  01F1  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 16847  01F2  0140               	movlb	0	; select bank0
 16848  01F3  00B7               	movwf	___flmul@b+3
 16849  01F4  0141               	movlb	1	; select bank1
 16850  01F5  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 16851  01F6  0140               	movlb	0	; select bank0
 16852  01F7  00B6               	movwf	___flmul@b+2
 16853  01F8  0141               	movlb	1	; select bank1
 16854  01F9  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 16855  01FA  0140               	movlb	0	; select bank0
 16856  01FB  00B5               	movwf	___flmul@b+1
 16857  01FC  0141               	movlb	1	; select bank1
 16858  01FD  0854               	movf	calcRequiredPower@T2^(0+128),w
 16859  01FE  0140               	movlb	0	; select bank0
 16860  01FF  00B4               	movwf	___flmul@b
 16861  0200  0141               	movlb	1	; select bank1
 16862  0201  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 16863  0202  0140               	movlb	0	; select bank0
 16864  0203  00BB               	movwf	___flmul@a+3
 16865  0204  0141               	movlb	1	; select bank1
 16866  0205  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 16867  0206  0140               	movlb	0	; select bank0
 16868  0207  00BA               	movwf	___flmul@a+2
 16869  0208  0141               	movlb	1	; select bank1
 16870  0209  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 16871  020A  0140               	movlb	0	; select bank0
 16872  020B  00B9               	movwf	___flmul@a+1
 16873  020C  0141               	movlb	1	; select bank1
 16874  020D  0854               	movf	calcRequiredPower@T2^(0+128),w
 16875  020E  0140               	movlb	0	; select bank0
 16876  020F  00B8               	movwf	___flmul@a
 16877  0210  318D  25D4  3180   	fcall	___flmul
 16878  0213  0140               	movlb	0	; select bank0
 16879  0214  0837               	movf	?___flmul+3,w
 16880  0215  0141               	movlb	1	; select bank1
 16881  0216  00CF               	movwf	(_calcRequiredPower$2290+3)^(0+128)
 16882  0217  0140               	movlb	0	; select bank0
 16883  0218  0836               	movf	?___flmul+2,w
 16884  0219  0141               	movlb	1	; select bank1
 16885  021A  00CE               	movwf	(_calcRequiredPower$2290+2)^(0+128)
 16886  021B  0140               	movlb	0	; select bank0
 16887  021C  0835               	movf	?___flmul+1,w
 16888  021D  0141               	movlb	1	; select bank1
 16889  021E  00CD               	movwf	(_calcRequiredPower$2290+1)^(0+128)
 16890  021F  0140               	movlb	0	; select bank0
 16891  0220  0834               	movf	?___flmul,w
 16892  0221  0141               	movlb	1	; select bank1
 16893  0222  00CC               	movwf	_calcRequiredPower$2290^(0+128)
 16894                           
 16895                           ;system.c: 267:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 16896  0223  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 16897  0224  0140               	movlb	0	; select bank0
 16898  0225  00B7               	movwf	___flmul@b+3
 16899  0226  0141               	movlb	1	; select bank1
 16900  0227  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 16901  0228  0140               	movlb	0	; select bank0
 16902  0229  00B6               	movwf	___flmul@b+2
 16903  022A  0141               	movlb	1	; select bank1
 16904  022B  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 16905  022C  0140               	movlb	0	; select bank0
 16906  022D  00B5               	movwf	___flmul@b+1
 16907  022E  0141               	movlb	1	; select bank1
 16908  022F  0854               	movf	calcRequiredPower@T2^(0+128),w
 16909  0230  0140               	movlb	0	; select bank0
 16910  0231  00B4               	movwf	___flmul@b
 16911  0232  0141               	movlb	1	; select bank1
 16912  0233  084F               	movf	(_calcRequiredPower$2290+3)^(0+128),w
 16913  0234  0140               	movlb	0	; select bank0
 16914  0235  00BB               	movwf	___flmul@a+3
 16915  0236  0141               	movlb	1	; select bank1
 16916  0237  084E               	movf	(_calcRequiredPower$2290+2)^(0+128),w
 16917  0238  0140               	movlb	0	; select bank0
 16918  0239  00BA               	movwf	___flmul@a+2
 16919  023A  0141               	movlb	1	; select bank1
 16920  023B  084D               	movf	(_calcRequiredPower$2290+1)^(0+128),w
 16921  023C  0140               	movlb	0	; select bank0
 16922  023D  00B9               	movwf	___flmul@a+1
 16923  023E  0141               	movlb	1	; select bank1
 16924  023F  084C               	movf	_calcRequiredPower$2290^(0+128),w
 16925  0240  0140               	movlb	0	; select bank0
 16926  0241  00B8               	movwf	___flmul@a
 16927  0242  318D  25D4  3180   	fcall	___flmul
 16928  0245  0140               	movlb	0	; select bank0
 16929  0246  0837               	movf	?___flmul+3,w
 16930  0247  0141               	movlb	1	; select bank1
 16931  0248  00AF               	movwf	(_calcRequiredPower$2292+3)^(0+128)
 16932  0249  0140               	movlb	0	; select bank0
 16933  024A  0836               	movf	?___flmul+2,w
 16934  024B  0141               	movlb	1	; select bank1
 16935  024C  00AE               	movwf	(_calcRequiredPower$2292+2)^(0+128)
 16936  024D  0140               	movlb	0	; select bank0
 16937  024E  0835               	movf	?___flmul+1,w
 16938  024F  0141               	movlb	1	; select bank1
 16939  0250  00AD               	movwf	(_calcRequiredPower$2292+1)^(0+128)
 16940  0251  0140               	movlb	0	; select bank0
 16941  0252  0834               	movf	?___flmul,w
 16942  0253  0141               	movlb	1	; select bank1
 16943  0254  00AC               	movwf	_calcRequiredPower$2292^(0+128)
 16944                           
 16945                           ;system.c: 267:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 16946  0255  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 16947  0256  0140               	movlb	0	; select bank0
 16948  0257  00B7               	movwf	___flmul@b+3
 16949  0258  0141               	movlb	1	; select bank1
 16950  0259  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 16951  025A  0140               	movlb	0	; select bank0
 16952  025B  00B6               	movwf	___flmul@b+2
 16953  025C  0141               	movlb	1	; select bank1
 16954  025D  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 16955  025E  0140               	movlb	0	; select bank0
 16956  025F  00B5               	movwf	___flmul@b+1
 16957  0260  0141               	movlb	1	; select bank1
 16958  0261  0850               	movf	calcRequiredPower@T1^(0+128),w
 16959  0262  0140               	movlb	0	; select bank0
 16960  0263  00B4               	movwf	___flmul@b
 16961  0264  0141               	movlb	1	; select bank1
 16962  0265  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 16963  0266  0140               	movlb	0	; select bank0
 16964  0267  00BB               	movwf	___flmul@a+3
 16965  0268  0141               	movlb	1	; select bank1
 16966  0269  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 16967  026A  0140               	movlb	0	; select bank0
 16968  026B  00BA               	movwf	___flmul@a+2
 16969  026C  0141               	movlb	1	; select bank1
 16970  026D  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 16971  026E  0140               	movlb	0	; select bank0
 16972  026F  00B9               	movwf	___flmul@a+1
 16973  0270  0141               	movlb	1	; select bank1
 16974  0271  0850               	movf	calcRequiredPower@T1^(0+128),w
 16975  0272  0140               	movlb	0	; select bank0
 16976  0273  00B8               	movwf	___flmul@a
 16977  0274  318D  25D4  3180   	fcall	___flmul
 16978  0277  0140               	movlb	0	; select bank0
 16979  0278  0837               	movf	?___flmul+3,w
 16980  0279  0141               	movlb	1	; select bank1
 16981  027A  00B3               	movwf	(_calcRequiredPower$2293+3)^(0+128)
 16982  027B  0140               	movlb	0	; select bank0
 16983  027C  0836               	movf	?___flmul+2,w
 16984  027D  0141               	movlb	1	; select bank1
 16985  027E  00B2               	movwf	(_calcRequiredPower$2293+2)^(0+128)
 16986  027F  0140               	movlb	0	; select bank0
 16987  0280  0835               	movf	?___flmul+1,w
 16988  0281  0141               	movlb	1	; select bank1
 16989  0282  00B1               	movwf	(_calcRequiredPower$2293+1)^(0+128)
 16990  0283  0140               	movlb	0	; select bank0
 16991  0284  0834               	movf	?___flmul,w
 16992  0285  0141               	movlb	1	; select bank1
 16993  0286  00B0               	movwf	_calcRequiredPower$2293^(0+128)
 16994                           
 16995                           ;system.c: 267:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 16996  0287  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 16997  0288  0140               	movlb	0	; select bank0
 16998  0289  00B7               	movwf	___flmul@b+3
 16999  028A  0141               	movlb	1	; select bank1
 17000  028B  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 17001  028C  0140               	movlb	0	; select bank0
 17002  028D  00B6               	movwf	___flmul@b+2
 17003  028E  0141               	movlb	1	; select bank1
 17004  028F  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 17005  0290  0140               	movlb	0	; select bank0
 17006  0291  00B5               	movwf	___flmul@b+1
 17007  0292  0141               	movlb	1	; select bank1
 17008  0293  0850               	movf	calcRequiredPower@T1^(0+128),w
 17009  0294  0140               	movlb	0	; select bank0
 17010  0295  00B4               	movwf	___flmul@b
 17011  0296  0141               	movlb	1	; select bank1
 17012  0297  0833               	movf	(_calcRequiredPower$2293+3)^(0+128),w
 17013  0298  0140               	movlb	0	; select bank0
 17014  0299  00BB               	movwf	___flmul@a+3
 17015  029A  0141               	movlb	1	; select bank1
 17016  029B  0832               	movf	(_calcRequiredPower$2293+2)^(0+128),w
 17017  029C  0140               	movlb	0	; select bank0
 17018  029D  00BA               	movwf	___flmul@a+2
 17019  029E  0141               	movlb	1	; select bank1
 17020  029F  0831               	movf	(_calcRequiredPower$2293+1)^(0+128),w
 17021  02A0  0140               	movlb	0	; select bank0
 17022  02A1  00B9               	movwf	___flmul@a+1
 17023  02A2  0141               	movlb	1	; select bank1
 17024  02A3  0830               	movf	_calcRequiredPower$2293^(0+128),w
 17025  02A4  0140               	movlb	0	; select bank0
 17026  02A5  00B8               	movwf	___flmul@a
 17027  02A6  318D  25D4  3180   	fcall	___flmul
 17028  02A9  0140               	movlb	0	; select bank0
 17029  02AA  0837               	movf	?___flmul+3,w
 17030  02AB  0141               	movlb	1	; select bank1
 17031  02AC  00B7               	movwf	(_calcRequiredPower$2294+3)^(0+128)
 17032  02AD  0140               	movlb	0	; select bank0
 17033  02AE  0836               	movf	?___flmul+2,w
 17034  02AF  0141               	movlb	1	; select bank1
 17035  02B0  00B6               	movwf	(_calcRequiredPower$2294+2)^(0+128)
 17036  02B1  0140               	movlb	0	; select bank0
 17037  02B2  0835               	movf	?___flmul+1,w
 17038  02B3  0141               	movlb	1	; select bank1
 17039  02B4  00B5               	movwf	(_calcRequiredPower$2294+1)^(0+128)
 17040  02B5  0140               	movlb	0	; select bank0
 17041  02B6  0834               	movf	?___flmul,w
 17042  02B7  0141               	movlb	1	; select bank1
 17043  02B8  00B4               	movwf	_calcRequiredPower$2294^(0+128)
 17044                           
 17045                           ;system.c: 267:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17046  02B9  0857               	movf	(calcRequiredPower@T2+3)^(0+128),w
 17047  02BA  0140               	movlb	0	; select bank0
 17048  02BB  00B7               	movwf	___flmul@b+3
 17049  02BC  0141               	movlb	1	; select bank1
 17050  02BD  0856               	movf	(calcRequiredPower@T2+2)^(0+128),w
 17051  02BE  0140               	movlb	0	; select bank0
 17052  02BF  00B6               	movwf	___flmul@b+2
 17053  02C0  0141               	movlb	1	; select bank1
 17054  02C1  0855               	movf	(calcRequiredPower@T2+1)^(0+128),w
 17055  02C2  0140               	movlb	0	; select bank0
 17056  02C3  00B5               	movwf	___flmul@b+1
 17057  02C4  0141               	movlb	1	; select bank1
 17058  02C5  0854               	movf	calcRequiredPower@T2^(0+128),w
 17059  02C6  0140               	movlb	0	; select bank0
 17060  02C7  00B4               	movwf	___flmul@b
 17061  02C8  0141               	movlb	1	; select bank1
 17062  02C9  082F               	movf	(_calcRequiredPower$2292+3)^(0+128),w
 17063  02CA  0140               	movlb	0	; select bank0
 17064  02CB  00BB               	movwf	___flmul@a+3
 17065  02CC  0141               	movlb	1	; select bank1
 17066  02CD  082E               	movf	(_calcRequiredPower$2292+2)^(0+128),w
 17067  02CE  0140               	movlb	0	; select bank0
 17068  02CF  00BA               	movwf	___flmul@a+2
 17069  02D0  0141               	movlb	1	; select bank1
 17070  02D1  082D               	movf	(_calcRequiredPower$2292+1)^(0+128),w
 17071  02D2  0140               	movlb	0	; select bank0
 17072  02D3  00B9               	movwf	___flmul@a+1
 17073  02D4  0141               	movlb	1	; select bank1
 17074  02D5  082C               	movf	_calcRequiredPower$2292^(0+128),w
 17075  02D6  0140               	movlb	0	; select bank0
 17076  02D7  00B8               	movwf	___flmul@a
 17077  02D8  318D  25D4  3180   	fcall	___flmul
 17078  02DB  0140               	movlb	0	; select bank0
 17079  02DC  0837               	movf	?___flmul+3,w
 17080  02DD  00E5               	movwf	___flsub@a+3
 17081  02DE  0836               	movf	?___flmul+2,w
 17082  02DF  00E4               	movwf	___flsub@a+2
 17083  02E0  0835               	movf	?___flmul+1,w
 17084  02E1  00E3               	movwf	___flsub@a+1
 17085  02E2  0834               	movf	?___flmul,w
 17086  02E3  00E2               	movwf	___flsub@a
 17087  02E4  0141               	movlb	1	; select bank1
 17088  02E5  0853               	movf	(calcRequiredPower@T1+3)^(0+128),w
 17089  02E6  0140               	movlb	0	; select bank0
 17090  02E7  00B7               	movwf	___flmul@b+3
 17091  02E8  0141               	movlb	1	; select bank1
 17092  02E9  0852               	movf	(calcRequiredPower@T1+2)^(0+128),w
 17093  02EA  0140               	movlb	0	; select bank0
 17094  02EB  00B6               	movwf	___flmul@b+2
 17095  02EC  0141               	movlb	1	; select bank1
 17096  02ED  0851               	movf	(calcRequiredPower@T1+1)^(0+128),w
 17097  02EE  0140               	movlb	0	; select bank0
 17098  02EF  00B5               	movwf	___flmul@b+1
 17099  02F0  0141               	movlb	1	; select bank1
 17100  02F1  0850               	movf	calcRequiredPower@T1^(0+128),w
 17101  02F2  0140               	movlb	0	; select bank0
 17102  02F3  00B4               	movwf	___flmul@b
 17103  02F4  0141               	movlb	1	; select bank1
 17104  02F5  0837               	movf	(_calcRequiredPower$2294+3)^(0+128),w
 17105  02F6  0140               	movlb	0	; select bank0
 17106  02F7  00BB               	movwf	___flmul@a+3
 17107  02F8  0141               	movlb	1	; select bank1
 17108  02F9  0836               	movf	(_calcRequiredPower$2294+2)^(0+128),w
 17109  02FA  0140               	movlb	0	; select bank0
 17110  02FB  00BA               	movwf	___flmul@a+2
 17111  02FC  0141               	movlb	1	; select bank1
 17112  02FD  0835               	movf	(_calcRequiredPower$2294+1)^(0+128),w
 17113  02FE  0140               	movlb	0	; select bank0
 17114  02FF  00B9               	movwf	___flmul@a+1
 17115  0300  0141               	movlb	1	; select bank1
 17116  0301  0834               	movf	_calcRequiredPower$2294^(0+128),w
 17117  0302  0140               	movlb	0	; select bank0
 17118  0303  00B8               	movwf	___flmul@a
 17119  0304  318D  25D4  3180   	fcall	___flmul
 17120  0307  0140               	movlb	0	; select bank0
 17121  0308  0837               	movf	?___flmul+3,w
 17122  0309  00E9               	movwf	___flsub@b+3
 17123  030A  0836               	movf	?___flmul+2,w
 17124  030B  00E8               	movwf	___flsub@b+2
 17125  030C  0835               	movf	?___flmul+1,w
 17126  030D  00E7               	movwf	___flsub@b+1
 17127  030E  0834               	movf	?___flmul,w
 17128  030F  00E6               	movwf	___flsub@b
 17129  0310  31A0  2007  3180   	fcall	___flsub
 17130  0313  0140               	movlb	0	; select bank0
 17131  0314  0865               	movf	?___flsub+3,w
 17132  0315  0141               	movlb	1	; select bank1
 17133  0316  00BB               	movwf	(_calcRequiredPower$2295+3)^(0+128)
 17134  0317  0140               	movlb	0	; select bank0
 17135  0318  0864               	movf	?___flsub+2,w
 17136  0319  0141               	movlb	1	; select bank1
 17137  031A  00BA               	movwf	(_calcRequiredPower$2295+2)^(0+128)
 17138  031B  0140               	movlb	0	; select bank0
 17139  031C  0863               	movf	?___flsub+1,w
 17140  031D  0141               	movlb	1	; select bank1
 17141  031E  00B9               	movwf	(_calcRequiredPower$2295+1)^(0+128)
 17142  031F  0140               	movlb	0	; select bank0
 17143  0320  0862               	movf	?___flsub,w
 17144  0321  0141               	movlb	1	; select bank1
 17145  0322  00B8               	movwf	_calcRequiredPower$2295^(0+128)
 17146                           
 17147                           ;system.c: 267:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17148  0323  3033               	movlw	51
 17149  0324  0140               	movlb	0	; select bank0
 17150  0325  00B7               	movwf	___flmul@b+3
 17151  0326  3067               	movlw	103
 17152  0327  00B6               	movwf	___flmul@b+2
 17153  0328  3059               	movlw	89
 17154  0329  00B5               	movwf	___flmul@b+1
 17155  032A  3032               	movlw	50
 17156  032B  00B4               	movwf	___flmul@b
 17157  032C  0141               	movlb	1	; select bank1
 17158  032D  084B               	movf	(calcRequiredPower@A+3)^(0+128),w
 17159  032E  0140               	movlb	0	; select bank0
 17160  032F  00BB               	movwf	___flmul@a+3
 17161  0330  0141               	movlb	1	; select bank1
 17162  0331  084A               	movf	(calcRequiredPower@A+2)^(0+128),w
 17163  0332  0140               	movlb	0	; select bank0
 17164  0333  00BA               	movwf	___flmul@a+2
 17165  0334  0141               	movlb	1	; select bank1
 17166  0335  0849               	movf	(calcRequiredPower@A+1)^(0+128),w
 17167  0336  0140               	movlb	0	; select bank0
 17168  0337  00B9               	movwf	___flmul@a+1
 17169  0338  0141               	movlb	1	; select bank1
 17170  0339  0848               	movf	calcRequiredPower@A^(0+128),w
 17171  033A  0140               	movlb	0	; select bank0
 17172  033B  00B8               	movwf	___flmul@a
 17173  033C  318D  25D4  3180   	fcall	___flmul
 17174  033F  0140               	movlb	0	; select bank0
 17175  0340  0837               	movf	?___flmul+3,w
 17176  0341  0141               	movlb	1	; select bank1
 17177  0342  00BF               	movwf	(_calcRequiredPower$2296+3)^(0+128)
 17178  0343  0140               	movlb	0	; select bank0
 17179  0344  0836               	movf	?___flmul+2,w
 17180  0345  0141               	movlb	1	; select bank1
 17181  0346  00BE               	movwf	(_calcRequiredPower$2296+2)^(0+128)
 17182  0347  0140               	movlb	0	; select bank0
 17183  0348  0835               	movf	?___flmul+1,w
 17184  0349  0141               	movlb	1	; select bank1
 17185  034A  00BD               	movwf	(_calcRequiredPower$2296+1)^(0+128)
 17186  034B  0140               	movlb	0	; select bank0
 17187  034C  0834               	movf	?___flmul,w
 17188  034D  0141               	movlb	1	; select bank1
 17189  034E  00BC               	movwf	_calcRequiredPower$2296^(0+128)
 17190                           
 17191                           ;system.c: 267:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17192  034F  083B               	movf	(_calcRequiredPower$2295+3)^(0+128),w
 17193  0350  0140               	movlb	0	; select bank0
 17194  0351  00B7               	movwf	___flmul@b+3
 17195  0352  0141               	movlb	1	; select bank1
 17196  0353  083A               	movf	(_calcRequiredPower$2295+2)^(0+128),w
 17197  0354  0140               	movlb	0	; select bank0
 17198  0355  00B6               	movwf	___flmul@b+2
 17199  0356  0141               	movlb	1	; select bank1
 17200  0357  0839               	movf	(_calcRequiredPower$2295+1)^(0+128),w
 17201  0358  0140               	movlb	0	; select bank0
 17202  0359  00B5               	movwf	___flmul@b+1
 17203  035A  0141               	movlb	1	; select bank1
 17204  035B  0838               	movf	_calcRequiredPower$2295^(0+128),w
 17205  035C  0140               	movlb	0	; select bank0
 17206  035D  00B4               	movwf	___flmul@b
 17207  035E  0141               	movlb	1	; select bank1
 17208  035F  083F               	movf	(_calcRequiredPower$2296+3)^(0+128),w
 17209  0360  0140               	movlb	0	; select bank0
 17210  0361  00BB               	movwf	___flmul@a+3
 17211  0362  0141               	movlb	1	; select bank1
 17212  0363  083E               	movf	(_calcRequiredPower$2296+2)^(0+128),w
 17213  0364  0140               	movlb	0	; select bank0
 17214  0365  00BA               	movwf	___flmul@a+2
 17215  0366  0141               	movlb	1	; select bank1
 17216  0367  083D               	movf	(_calcRequiredPower$2296+1)^(0+128),w
 17217  0368  0140               	movlb	0	; select bank0
 17218  0369  00B9               	movwf	___flmul@a+1
 17219  036A  0141               	movlb	1	; select bank1
 17220  036B  083C               	movf	_calcRequiredPower$2296^(0+128),w
 17221  036C  0140               	movlb	0	; select bank0
 17222  036D  00B8               	movwf	___flmul@a
 17223  036E  318D  25D4  3180   	fcall	___flmul
 17224  0371  0140               	movlb	0	; select bank0
 17225  0372  0837               	movf	?___flmul+3,w
 17226  0373  0141               	movlb	1	; select bank1
 17227  0374  00C7               	movwf	(calcRequiredPower@phi+3)^(0+128)
 17228  0375  0140               	movlb	0	; select bank0
 17229  0376  0836               	movf	?___flmul+2,w
 17230  0377  0141               	movlb	1	; select bank1
 17231  0378  00C6               	movwf	(calcRequiredPower@phi+2)^(0+128)
 17232  0379  0140               	movlb	0	; select bank0
 17233  037A  0835               	movf	?___flmul+1,w
 17234  037B  0141               	movlb	1	; select bank1
 17235  037C  00C5               	movwf	(calcRequiredPower@phi+1)^(0+128)
 17236  037D  0140               	movlb	0	; select bank0
 17237  037E  0834               	movf	?___flmul,w
 17238  037F  0141               	movlb	1	; select bank1
 17239  0380  00C4               	movwf	calcRequiredPower@phi^(0+128)
 17240                           
 17241                           ;system.c: 269:   data->chData[n].Preq = phi * data->fudgeFactor;
 17242  0381  0847               	movf	(calcRequiredPower@phi+3)^(0+128),w
 17243  0382  0140               	movlb	0	; select bank0
 17244  0383  00B7               	movwf	___flmul@b+3
 17245  0384  0141               	movlb	1	; select bank1
 17246  0385  0846               	movf	(calcRequiredPower@phi+2)^(0+128),w
 17247  0386  0140               	movlb	0	; select bank0
 17248  0387  00B6               	movwf	___flmul@b+2
 17249  0388  0141               	movlb	1	; select bank1
 17250  0389  0845               	movf	(calcRequiredPower@phi+1)^(0+128),w
 17251  038A  0140               	movlb	0	; select bank0
 17252  038B  00B5               	movwf	___flmul@b+1
 17253  038C  0141               	movlb	1	; select bank1
 17254  038D  0844               	movf	calcRequiredPower@phi^(0+128),w
 17255  038E  0140               	movlb	0	; select bank0
 17256  038F  00B4               	movwf	___flmul@b
 17257  0390  086A               	movf	calcRequiredPower@data,w
 17258  0391  3E28               	addlw	40
 17259  0392  0086               	movwf	6
 17260  0393  3000               	movlw	0
 17261  0394  3D6B               	addwfc	calcRequiredPower@data+1,w
 17262  0395  0087               	movwf	7
 17263  0396  3F40               	moviw [0]fsr1
 17264  0397  00B8               	movwf	___flmul@a
 17265  0398  3F41               	moviw [1]fsr1
 17266  0399  00B9               	movwf	___flmul@a+1
 17267  039A  3F42               	moviw [2]fsr1
 17268  039B  00BA               	movwf	___flmul@a+2
 17269  039C  3F43               	moviw [3]fsr1
 17270  039D  00BB               	movwf	___flmul@a+3
 17271  039E  318D  25D4  3180   	fcall	___flmul
 17272  03A1  0141               	movlb	1	; select bank1
 17273  03A2  0858               	movf	calcRequiredPower@n^(0+128),w
 17274  03A3  0140               	movlb	0	; select bank0
 17275  03A4  00EC               	movwf	??_calcRequiredPower
 17276  03A5  01ED               	clrf	??_calcRequiredPower+1
 17277  03A6  3005               	movlw	5
 17278  03A7                     u5935:	
 17279  03A7  35EC               	lslf	??_calcRequiredPower,f
 17280  03A8  0DED               	rlf	??_calcRequiredPower+1,f
 17281  03A9  0B89               	decfsz	9,f
 17282  03AA  2BA7               	goto	u5935
 17283  03AB  086C               	movf	??_calcRequiredPower,w
 17284  03AC  076A               	addwf	calcRequiredPower@data,w
 17285  03AD  00EE               	movwf	??_calcRequiredPower+2
 17286  03AE  086D               	movf	??_calcRequiredPower+1,w
 17287  03AF  3D6B               	addwfc	calcRequiredPower@data+1,w
 17288  03B0  00EF               	movwf	??_calcRequiredPower+3
 17289  03B1  086E               	movf	??_calcRequiredPower+2,w
 17290  03B2  3E35               	addlw	53
 17291  03B3  0086               	movwf	6
 17292  03B4  3000               	movlw	0
 17293  03B5  3D6F               	addwfc	??_calcRequiredPower+3,w
 17294  03B6  0087               	movwf	7
 17295  03B7  0834               	movf	?___flmul,w
 17296  03B8  3FC0               	movwi [0]fsr1
 17297  03B9  0835               	movf	?___flmul+1,w
 17298  03BA  3FC1               	movwi [1]fsr1
 17299  03BB  0836               	movf	?___flmul+2,w
 17300  03BC  3FC2               	movwi [2]fsr1
 17301  03BD  0837               	movf	?___flmul+3,w
 17302  03BE  3FC3               	movwi [3]fsr1
 17303                           
 17304                           ;system.c: 272:   p = 2 * 3.14 * 0.0254 * data->chData[n].lensDia;
 17305  03BF  303E               	movlw	62
 17306  03C0  00B7               	movwf	___flmul@b+3
 17307  03C1  3023               	movlw	35
 17308  03C2  00B6               	movwf	___flmul@b+2
 17309  03C3  3057               	movlw	87
 17310  03C4  00B5               	movwf	___flmul@b+1
 17311  03C5  301D               	movlw	29
 17312  03C6  00B4               	movwf	___flmul@b
 17313  03C7  0141               	movlb	1	; select bank1
 17314  03C8  0858               	movf	calcRequiredPower@n^(0+128),w
 17315  03C9  0140               	movlb	0	; select bank0
 17316  03CA  00EC               	movwf	??_calcRequiredPower
 17317  03CB  01ED               	clrf	??_calcRequiredPower+1
 17318  03CC  3005               	movlw	5
 17319  03CD                     u5945:	
 17320  03CD  35EC               	lslf	??_calcRequiredPower,f
 17321  03CE  0DED               	rlf	??_calcRequiredPower+1,f
 17322  03CF  0B89               	decfsz	9,f
 17323  03D0  2BCD               	goto	u5945
 17324  03D1  086C               	movf	??_calcRequiredPower,w
 17325  03D2  076A               	addwf	calcRequiredPower@data,w
 17326  03D3  00EE               	movwf	??_calcRequiredPower+2
 17327  03D4  086D               	movf	??_calcRequiredPower+1,w
 17328  03D5  3D6B               	addwfc	calcRequiredPower@data+1,w
 17329  03D6  00EF               	movwf	??_calcRequiredPower+3
 17330  03D7  086E               	movf	??_calcRequiredPower+2,w
 17331  03D8  3E43               	addlw	67
 17332  03D9  0086               	movwf	6
 17333  03DA  3000               	movlw	0
 17334  03DB  3D6F               	addwfc	??_calcRequiredPower+3,w
 17335  03DC  0087               	movwf	7
 17336  03DD  3F40               	moviw [0]fsr1
 17337  03DE  00B8               	movwf	___flmul@a
 17338  03DF  3F41               	moviw [1]fsr1
 17339  03E0  00B9               	movwf	___flmul@a+1
 17340  03E1  3F42               	moviw [2]fsr1
 17341  03E2  00BA               	movwf	___flmul@a+2
 17342  03E3  3F43               	moviw [3]fsr1
 17343  03E4  00BB               	movwf	___flmul@a+3
 17344  03E5  318D  25D4  3180   	fcall	___flmul
 17345  03E8  0140               	movlb	0	; select bank0
 17346  03E9  0837               	movf	?___flmul+3,w
 17347  03EA  0141               	movlb	1	; select bank1
 17348  03EB  00A3               	movwf	(calcRequiredPower@p+3)^(0+128)
 17349  03EC  0140               	movlb	0	; select bank0
 17350  03ED  0836               	movf	?___flmul+2,w
 17351  03EE  0141               	movlb	1	; select bank1
 17352  03EF  00A2               	movwf	(calcRequiredPower@p+2)^(0+128)
 17353  03F0  0140               	movlb	0	; select bank0
 17354  03F1  0835               	movf	?___flmul+1,w
 17355  03F2  0141               	movlb	1	; select bank1
 17356  03F3  00A1               	movwf	(calcRequiredPower@p+1)^(0+128)
 17357  03F4  0140               	movlb	0	; select bank0
 17358  03F5  0834               	movf	?___flmul,w
 17359  03F6  0141               	movlb	1	; select bank1
 17360  03F7  00A0               	movwf	calcRequiredPower@p^(0+128)
 17361                           
 17362                           ;system.c: 273:   A = p * 0.03;
 17363  03F8  303C               	movlw	60
 17364  03F9  0140               	movlb	0	; select bank0
 17365  03FA  00B7               	movwf	___flmul@b+3
 17366  03FB  30F5               	movlw	245
 17367  03FC  00B6               	movwf	___flmul@b+2
 17368  03FD  30C2               	movlw	194
 17369  03FE  00B5               	movwf	___flmul@b+1
 17370  03FF  308F               	movlw	143
 17371  0400  00B4               	movwf	___flmul@b
 17372  0401  0141               	movlb	1	; select bank1
 17373  0402  0823               	movf	(calcRequiredPower@p+3)^(0+128),w
 17374  0403  0140               	movlb	0	; select bank0
 17375  0404  00BB               	movwf	___flmul@a+3
 17376  0405  0141               	movlb	1	; select bank1
 17377  0406  0822               	movf	(calcRequiredPower@p+2)^(0+128),w
 17378  0407  0140               	movlb	0	; select bank0
 17379  0408  00BA               	movwf	___flmul@a+2
 17380  0409  0141               	movlb	1	; select bank1
 17381  040A  0821               	movf	(calcRequiredPower@p+1)^(0+128),w
 17382  040B  0140               	movlb	0	; select bank0
 17383  040C  00B9               	movwf	___flmul@a+1
 17384  040D  0141               	movlb	1	; select bank1
 17385  040E  0820               	movf	calcRequiredPower@p^(0+128),w
 17386  040F  0140               	movlb	0	; select bank0
 17387  0410  00B8               	movwf	___flmul@a
 17388  0411  318D  25D4  3180   	fcall	___flmul
 17389  0414  0140               	movlb	0	; select bank0
 17390  0415  0837               	movf	?___flmul+3,w
 17391  0416  0141               	movlb	1	; select bank1
 17392  0417  00CB               	movwf	(calcRequiredPower@A+3)^(0+128)
 17393  0418  0140               	movlb	0	; select bank0
 17394  0419  0836               	movf	?___flmul+2,w
 17395  041A  0141               	movlb	1	; select bank1
 17396  041B  00CA               	movwf	(calcRequiredPower@A+2)^(0+128)
 17397  041C  0140               	movlb	0	; select bank0
 17398  041D  0835               	movf	?___flmul+1,w
 17399  041E  0141               	movlb	1	; select bank1
 17400  041F  00C9               	movwf	(calcRequiredPower@A+1)^(0+128)
 17401  0420  0140               	movlb	0	; select bank0
 17402  0421  0834               	movf	?___flmul,w
 17403  0422  0141               	movlb	1	; select bank1
 17404  0423  00C8               	movwf	calcRequiredPower@A^(0+128)
 17405                           
 17406                           ;system.c: 275:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 17407  0424  303F               	movlw	63
 17408  0425  0140               	movlb	0	; select bank0
 17409  0426  00B7               	movwf	___flmul@b+3
 17410  0427  3059               	movlw	89
 17411  0428  00B6               	movwf	___flmul@b+2
 17412  0429  3099               	movlw	153
 17413  042A  00B5               	movwf	___flmul@b+1
 17414  042B  309A               	movlw	154
 17415  042C  00B4               	movwf	___flmul@b
 17416  042D  3040               	movlw	64
 17417  042E  00D1               	movwf	___fldiv@a+3
 17418  042F  3000               	movlw	0
 17419  0430  00D0               	movwf	___fldiv@a+2
 17420  0431  3000               	movlw	0
 17421  0432  00CF               	movwf	___fldiv@a+1
 17422  0433  3000               	movlw	0
 17423  0434  00CE               	movwf	___fldiv@a
 17424  0435  0141               	movlb	1	; select bank1
 17425  0436  0858               	movf	calcRequiredPower@n^(0+128),w
 17426  0437  0140               	movlb	0	; select bank0
 17427  0438  00EC               	movwf	??_calcRequiredPower
 17428  0439  01ED               	clrf	??_calcRequiredPower+1
 17429  043A  3005               	movlw	5
 17430  043B                     u5955:	
 17431  043B  35EC               	lslf	??_calcRequiredPower,f
 17432  043C  0DED               	rlf	??_calcRequiredPower+1,f
 17433  043D  0B89               	decfsz	9,f
 17434  043E  2C3B               	goto	u5955
 17435  043F  086C               	movf	??_calcRequiredPower,w
 17436  0440  076A               	addwf	calcRequiredPower@data,w
 17437  0441  00EE               	movwf	??_calcRequiredPower+2
 17438  0442  086D               	movf	??_calcRequiredPower+1,w
 17439  0443  3D6B               	addwfc	calcRequiredPower@data+1,w
 17440  0444  00EF               	movwf	??_calcRequiredPower+3
 17441  0445  086E               	movf	??_calcRequiredPower+2,w
 17442  0446  3E43               	addlw	67
 17443  0447  0086               	movwf	6
 17444  0448  3000               	movlw	0
 17445  0449  3D6F               	addwfc	??_calcRequiredPower+3,w
 17446  044A  0087               	movwf	7
 17447  044B  3F40               	moviw [0]fsr1
 17448  044C  00D2               	movwf	___fldiv@b
 17449  044D  3F41               	moviw [1]fsr1
 17450  044E  00D3               	movwf	___fldiv@b+1
 17451  044F  3F42               	moviw [2]fsr1
 17452  0450  00D4               	movwf	___fldiv@b+2
 17453  0451  3F43               	moviw [3]fsr1
 17454  0452  00D5               	movwf	___fldiv@b+3
 17455  0453  3190  2056  3180   	fcall	___fldiv
 17456  0456  0140               	movlb	0	; select bank0
 17457  0457  0851               	movf	?___fldiv+3,w
 17458  0458  00BB               	movwf	___flmul@a+3
 17459  0459  0850               	movf	?___fldiv+2,w
 17460  045A  00BA               	movwf	___flmul@a+2
 17461  045B  084F               	movf	?___fldiv+1,w
 17462  045C  00B9               	movwf	___flmul@a+1
 17463  045D  084E               	movf	?___fldiv,w
 17464  045E  00B8               	movwf	___flmul@a
 17465  045F  318D  25D4  3180   	fcall	___flmul
 17466  0462  0140               	movlb	0	; select bank0
 17467  0463  0837               	movf	?___flmul+3,w
 17468  0464  0141               	movlb	1	; select bank1
 17469  0465  00CF               	movwf	(_calcRequiredPower$2290+3)^(0+128)
 17470  0466  0140               	movlb	0	; select bank0
 17471  0467  0836               	movf	?___flmul+2,w
 17472  0468  0141               	movlb	1	; select bank1
 17473  0469  00CE               	movwf	(_calcRequiredPower$2290+2)^(0+128)
 17474  046A  0140               	movlb	0	; select bank0
 17475  046B  0835               	movf	?___flmul+1,w
 17476  046C  0141               	movlb	1	; select bank1
 17477  046D  00CD               	movwf	(_calcRequiredPower$2290+1)^(0+128)
 17478  046E  0140               	movlb	0	; select bank0
 17479  046F  0834               	movf	?___flmul,w
 17480  0470  0141               	movlb	1	; select bank1
 17481  0471  00CC               	movwf	_calcRequiredPower$2290^(0+128)
 17482                           
 17483                           ;system.c: 275:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 17484  0472  084B               	movf	(calcRequiredPower@A+3)^(0+128),w
 17485  0473  0140               	movlb	0	; select bank0
 17486  0474  00B7               	movwf	___flmul@b+3
 17487  0475  0141               	movlb	1	; select bank1
 17488  0476  084A               	movf	(calcRequiredPower@A+2)^(0+128),w
 17489  0477  0140               	movlb	0	; select bank0
 17490  0478  00B6               	movwf	___flmul@b+2
 17491  0479  0141               	movlb	1	; select bank1
 17492  047A  0849               	movf	(calcRequiredPower@A+1)^(0+128),w
 17493  047B  0140               	movlb	0	; select bank0
 17494  047C  00B5               	movwf	___flmul@b+1
 17495  047D  0141               	movlb	1	; select bank1
 17496  047E  0848               	movf	calcRequiredPower@A^(0+128),w
 17497  047F  0140               	movlb	0	; select bank0
 17498  0480  00B4               	movwf	___flmul@b
 17499  0481  0141               	movlb	1	; select bank1
 17500  0482  084F               	movf	(_calcRequiredPower$2290+3)^(0+128),w
 17501  0483  0140               	movlb	0	; select bank0
 17502  0484  00BB               	movwf	___flmul@a+3
 17503  0485  0141               	movlb	1	; select bank1
 17504  0486  084E               	movf	(_calcRequiredPower$2290+2)^(0+128),w
 17505  0487  0140               	movlb	0	; select bank0
 17506  0488  00BA               	movwf	___flmul@a+2
 17507  0489  0141               	movlb	1	; select bank1
 17508  048A  084D               	movf	(_calcRequiredPower$2290+1)^(0+128),w
 17509  048B  0140               	movlb	0	; select bank0
 17510  048C  00B9               	movwf	___flmul@a+1
 17511  048D  0141               	movlb	1	; select bank1
 17512  048E  084C               	movf	_calcRequiredPower$2290^(0+128),w
 17513  048F  0140               	movlb	0	; select bank0
 17514  0490  00B8               	movwf	___flmul@a
 17515  0491  318D  25D4  3180   	fcall	___flmul
 17516  0494  0140               	movlb	0	; select bank0
 17517  0495  0837               	movf	?___flmul+3,w
 17518  0496  0141               	movlb	1	; select bank1
 17519  0497  00A7               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 17520  0498  0140               	movlb	0	; select bank0
 17521  0499  0836               	movf	?___flmul+2,w
 17522  049A  0141               	movlb	1	; select bank1
 17523  049B  00A6               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 17524  049C  0140               	movlb	0	; select bank0
 17525  049D  0835               	movf	?___flmul+1,w
 17526  049E  0141               	movlb	1	; select bank1
 17527  049F  00A5               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 17528  04A0  0140               	movlb	0	; select bank0
 17529  04A1  0834               	movf	?___flmul,w
 17530  04A2  0141               	movlb	1	; select bank1
 17531  04A3  00A4               	movwf	calcRequiredPower@Rth^(0+128)
 17532                           
 17533                           ;system.c: 277:   data->chData[n].dt = phi * Rth - data->dewPointC;
 17534  04A4  0140               	movlb	0	; select bank0
 17535  04A5  086A               	movf	calcRequiredPower@data,w
 17536  04A6  0086               	movwf	6
 17537  04A7  086B               	movf	calcRequiredPower@data+1,w
 17538  04A8  0087               	movwf	7
 17539  04A9  3148               	addfsr 1,8
 17540  04AA  3F40               	moviw [0]fsr1
 17541  04AB  00E2               	movwf	___flsub@a
 17542  04AC  3F41               	moviw [1]fsr1
 17543  04AD  00E3               	movwf	___flsub@a+1
 17544  04AE  3F42               	moviw [2]fsr1
 17545  04AF  00E4               	movwf	___flsub@a+2
 17546  04B0  3F43               	moviw [3]fsr1
 17547  04B1  00E5               	movwf	___flsub@a+3
 17548  04B2  0141               	movlb	1	; select bank1
 17549  04B3  0827               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 17550  04B4  0140               	movlb	0	; select bank0
 17551  04B5  00B7               	movwf	___flmul@b+3
 17552  04B6  0141               	movlb	1	; select bank1
 17553  04B7  0826               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 17554  04B8  0140               	movlb	0	; select bank0
 17555  04B9  00B6               	movwf	___flmul@b+2
 17556  04BA  0141               	movlb	1	; select bank1
 17557  04BB  0825               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 17558  04BC  0140               	movlb	0	; select bank0
 17559  04BD  00B5               	movwf	___flmul@b+1
 17560  04BE  0141               	movlb	1	; select bank1
 17561  04BF  0824               	movf	calcRequiredPower@Rth^(0+128),w
 17562  04C0  0140               	movlb	0	; select bank0
 17563  04C1  00B4               	movwf	___flmul@b
 17564  04C2  0141               	movlb	1	; select bank1
 17565  04C3  0847               	movf	(calcRequiredPower@phi+3)^(0+128),w
 17566  04C4  0140               	movlb	0	; select bank0
 17567  04C5  00BB               	movwf	___flmul@a+3
 17568  04C6  0141               	movlb	1	; select bank1
 17569  04C7  0846               	movf	(calcRequiredPower@phi+2)^(0+128),w
 17570  04C8  0140               	movlb	0	; select bank0
 17571  04C9  00BA               	movwf	___flmul@a+2
 17572  04CA  0141               	movlb	1	; select bank1
 17573  04CB  0845               	movf	(calcRequiredPower@phi+1)^(0+128),w
 17574  04CC  0140               	movlb	0	; select bank0
 17575  04CD  00B9               	movwf	___flmul@a+1
 17576  04CE  0141               	movlb	1	; select bank1
 17577  04CF  0844               	movf	calcRequiredPower@phi^(0+128),w
 17578  04D0  0140               	movlb	0	; select bank0
 17579  04D1  00B8               	movwf	___flmul@a
 17580  04D2  318D  25D4  3180   	fcall	___flmul
 17581  04D5  0140               	movlb	0	; select bank0
 17582  04D6  0837               	movf	?___flmul+3,w
 17583  04D7  00E9               	movwf	___flsub@b+3
 17584  04D8  0836               	movf	?___flmul+2,w
 17585  04D9  00E8               	movwf	___flsub@b+2
 17586  04DA  0835               	movf	?___flmul+1,w
 17587  04DB  00E7               	movwf	___flsub@b+1
 17588  04DC  0834               	movf	?___flmul,w
 17589  04DD  00E6               	movwf	___flsub@b
 17590  04DE  31A0  2007  3180   	fcall	___flsub
 17591  04E1  0141               	movlb	1	; select bank1
 17592  04E2  0858               	movf	calcRequiredPower@n^(0+128),w
 17593  04E3  0140               	movlb	0	; select bank0
 17594  04E4  00EC               	movwf	??_calcRequiredPower
 17595  04E5  01ED               	clrf	??_calcRequiredPower+1
 17596  04E6  3005               	movlw	5
 17597  04E7                     u5965:	
 17598  04E7  35EC               	lslf	??_calcRequiredPower,f
 17599  04E8  0DED               	rlf	??_calcRequiredPower+1,f
 17600  04E9  0B89               	decfsz	9,f
 17601  04EA  2CE7               	goto	u5965
 17602  04EB  086C               	movf	??_calcRequiredPower,w
 17603  04EC  076A               	addwf	calcRequiredPower@data,w
 17604  04ED  00EE               	movwf	??_calcRequiredPower+2
 17605  04EE  086D               	movf	??_calcRequiredPower+1,w
 17606  04EF  3D6B               	addwfc	calcRequiredPower@data+1,w
 17607  04F0  00EF               	movwf	??_calcRequiredPower+3
 17608  04F1  086E               	movf	??_calcRequiredPower+2,w
 17609  04F2  3E47               	addlw	71
 17610  04F3  0086               	movwf	6
 17611  04F4  3000               	movlw	0
 17612  04F5  3D6F               	addwfc	??_calcRequiredPower+3,w
 17613  04F6  0087               	movwf	7
 17614  04F7  0862               	movf	?___flsub,w
 17615  04F8  3FC0               	movwi [0]fsr1
 17616  04F9  0863               	movf	?___flsub+1,w
 17617  04FA  3FC1               	movwi [1]fsr1
 17618  04FB  0864               	movf	?___flsub+2,w
 17619  04FC  3FC2               	movwi [2]fsr1
 17620  04FD  0865               	movf	?___flsub+3,w
 17621  04FE  3FC3               	movwi [3]fsr1
 17622                           
 17623                           ;system.c: 278:  }
 17624  04FF  3001               	movlw	1
 17625  0500  00EC               	movwf	??_calcRequiredPower
 17626  0501  086C               	movf	??_calcRequiredPower,w
 17627  0502  0141               	movlb	1	; select bank1
 17628  0503  07D8               	addwf	calcRequiredPower@n^(0+128),f
 17629  0504  3004               	movlw	4
 17630  0505  0258               	subwf	calcRequiredPower@n^(0+128),w
 17631  0506  1803               	btfsc	3,0
 17632  0507  0008               	return
 17633  0508  28BE               	goto	l5176
 17634  0509                     __end_of_calcRequiredPower:	
 17635                           
 17636                           	psect	text54
 17637  2007                     __ptext54:	
 17638 ;; *************** function ___flsub *****************
 17639 ;; Defined at:
 17640 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 17641 ;; Parameters:    Size  Location     Type
 17642 ;;  a               4   66[BANK0 ] void 
 17643 ;;  b               4   70[BANK0 ] void 
 17644 ;; Auto vars:     Size  Location     Type
 17645 ;;		None
 17646 ;; Return value:  Size  Location     Type
 17647 ;;                  4   66[BANK0 ] void 
 17648 ;; Registers used:
 17649 ;;		wreg, status,2, status,0, pclath, cstack
 17650 ;; Tracked objects:
 17651 ;;		On entry : 0/0
 17652 ;;		On exit  : 0/0
 17653 ;;		Unchanged: 0/0
 17654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17655 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17658 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17659 ;;Total ram usage:        8 bytes
 17660 ;; Hardware stack levels used:    1
 17661 ;; Hardware stack levels required when called:    4
 17662 ;; This function calls:
 17663 ;;		___fladd
 17664 ;; This function is called by:
 17665 ;;		_ftoa
 17666 ;;		_spinInput
 17667 ;;		_calcRequiredPower
 17668 ;; This function uses a non-reentrant model
 17669 ;;
 17670                           
 17671                           
 17672                           ;psect for function ___flsub
 17673  2007                     ___flsub:	
 17674                           
 17675                           ;incstack = 0
 17676                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 17677  2007  3080               	movlw	128
 17678  2008  0140               	movlb	0	; select bank0
 17679  2009  06E5               	xorwf	___flsub@a+3,f
 17680  200A  0869               	movf	___flsub@b+3,w
 17681  200B  00D1               	movwf	___fladd@b+3
 17682  200C  0868               	movf	___flsub@b+2,w
 17683  200D  00D0               	movwf	___fladd@b+2
 17684  200E  0867               	movf	___flsub@b+1,w
 17685  200F  00CF               	movwf	___fladd@b+1
 17686  2010  0866               	movf	___flsub@b,w
 17687  2011  00CE               	movwf	___fladd@b
 17688  2012  0865               	movf	___flsub@a+3,w
 17689  2013  00D5               	movwf	___fladd@a+3
 17690  2014  0864               	movf	___flsub@a+2,w
 17691  2015  00D4               	movwf	___fladd@a+2
 17692  2016  0863               	movf	___flsub@a+1,w
 17693  2017  00D3               	movwf	___fladd@a+1
 17694  2018  0862               	movf	___flsub@a,w
 17695  2019  00D2               	movwf	___fladd@a
 17696  201A  3189  21D6         	fcall	___fladd
 17697  201C  0140               	movlb	0	; select bank0
 17698  201D  0851               	movf	?___fladd+3,w
 17699  201E  00E5               	movwf	?___flsub+3
 17700  201F  0850               	movf	?___fladd+2,w
 17701  2020  00E4               	movwf	?___flsub+2
 17702  2021  084F               	movf	?___fladd+1,w
 17703  2022  00E3               	movwf	?___flsub+1
 17704  2023  084E               	movf	?___fladd,w
 17705  2024  00E2               	movwf	?___flsub
 17706  2025  0008               	return
 17707  2026                     __end_of___flsub:	
 17708                           
 17709                           	psect	text55
 17710  09D6                     __ptext55:	
 17711 ;; *************** function ___fladd *****************
 17712 ;; Defined at:
 17713 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 17714 ;; Parameters:    Size  Location     Type
 17715 ;;  b               4   46[BANK0 ] void 
 17716 ;;  a               4   50[BANK0 ] void 
 17717 ;; Auto vars:     Size  Location     Type
 17718 ;;  grs             1   65[BANK0 ] unsigned char 
 17719 ;;  bexp            1   64[BANK0 ] unsigned char 
 17720 ;;  aexp            1   63[BANK0 ] unsigned char 
 17721 ;;  signs           1   62[BANK0 ] unsigned char 
 17722 ;; Return value:  Size  Location     Type
 17723 ;;                  4   46[BANK0 ] unsigned char 
 17724 ;; Registers used:
 17725 ;;		wreg, status,2, status,0
 17726 ;; Tracked objects:
 17727 ;;		On entry : 0/0
 17728 ;;		On exit  : 0/0
 17729 ;;		Unchanged: 0/0
 17730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17731 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17732 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17733 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17734 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17735 ;;Total ram usage:       20 bytes
 17736 ;; Hardware stack levels used:    1
 17737 ;; Hardware stack levels required when called:    3
 17738 ;; This function calls:
 17739 ;;		Nothing
 17740 ;; This function is called by:
 17741 ;;		_spinInput
 17742 ;;		_calcRequiredPower
 17743 ;;		_getAnalogValues
 17744 ;;		___flsub
 17745 ;; This function uses a non-reentrant model
 17746 ;;
 17747                           
 17748                           
 17749                           ;psect for function ___fladd
 17750  09D6                     ___fladd:	
 17751                           
 17752                           ;incstack = 0
 17753                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 17754  09D6  0140               	movlb	0	; select bank0
 17755  09D7  0851               	movf	___fladd@b+3,w
 17756  09D8  3980               	andlw	128
 17757  09D9  00D6               	movwf	??___fladd
 17758  09DA  0856               	movf	??___fladd,w
 17759  09DB  00DE               	movwf	___fladd@signs
 17760  09DC  3551               	lslf	___fladd@b+3,w
 17761  09DD  00D6               	movwf	??___fladd
 17762  09DE  0856               	movf	??___fladd,w
 17763  09DF  00E0               	movwf	___fladd@bexp
 17764  09E0  1BD0               	btfsc	___fladd@b+2,7
 17765  09E1  1460               	bsf	___fladd@bexp,0
 17766  09E2  0860               	movf	___fladd@bexp,w
 17767  09E3  1903               	btfsc	3,2
 17768  09E4  29F3               	goto	l3474
 17769  09E5  0A60               	incf	___fladd@bexp,w
 17770  09E6  1D03               	btfss	3,2
 17771  09E7  29F0               	goto	l3470
 17772  09E8  3000               	movlw	0
 17773  09E9  00D1               	movwf	___fladd@b+3
 17774  09EA  3000               	movlw	0
 17775  09EB  00D0               	movwf	___fladd@b+2
 17776  09EC  3000               	movlw	0
 17777  09ED  00CF               	movwf	___fladd@b+1
 17778  09EE  3000               	movlw	0
 17779  09EF  00CE               	movwf	___fladd@b
 17780  09F0                     l3470:	
 17781  09F0  17D0               	bsf	___fladd@b+2,7
 17782  09F1  01D1               	clrf	___fladd@b+3
 17783  09F2  29FB               	goto	l3476
 17784  09F3                     l3474:	
 17785  09F3  3000               	movlw	0
 17786  09F4  00D1               	movwf	___fladd@b+3
 17787  09F5  3000               	movlw	0
 17788  09F6  00D0               	movwf	___fladd@b+2
 17789  09F7  3000               	movlw	0
 17790  09F8  00CF               	movwf	___fladd@b+1
 17791  09F9  3000               	movlw	0
 17792  09FA  00CE               	movwf	___fladd@b
 17793  09FB                     l3476:	
 17794  09FB  0855               	movf	___fladd@a+3,w
 17795  09FC  3980               	andlw	128
 17796  09FD  00D6               	movwf	??___fladd
 17797  09FE  0856               	movf	??___fladd,w
 17798  09FF  00DF               	movwf	___fladd@aexp
 17799  0A00  085F               	movf	___fladd@aexp,w
 17800  0A01  065E               	xorwf	___fladd@signs,w
 17801  0A02  1D03               	btfss	3,2
 17802  0A03  175E               	bsf	___fladd@signs,6
 17803  0A04  3555               	lslf	___fladd@a+3,w
 17804  0A05  00D6               	movwf	??___fladd
 17805  0A06  0856               	movf	??___fladd,w
 17806  0A07  00DF               	movwf	___fladd@aexp
 17807  0A08  1BD4               	btfsc	___fladd@a+2,7
 17808  0A09  145F               	bsf	___fladd@aexp,0
 17809  0A0A  085F               	movf	___fladd@aexp,w
 17810  0A0B  1903               	btfsc	3,2
 17811  0A0C  2A1B               	goto	l3498
 17812  0A0D  0A5F               	incf	___fladd@aexp,w
 17813  0A0E  1D03               	btfss	3,2
 17814  0A0F  2A18               	goto	l3494
 17815  0A10  3000               	movlw	0
 17816  0A11  00D5               	movwf	___fladd@a+3
 17817  0A12  3000               	movlw	0
 17818  0A13  00D4               	movwf	___fladd@a+2
 17819  0A14  3000               	movlw	0
 17820  0A15  00D3               	movwf	___fladd@a+1
 17821  0A16  3000               	movlw	0
 17822  0A17  00D2               	movwf	___fladd@a
 17823  0A18                     l3494:	
 17824  0A18  17D4               	bsf	___fladd@a+2,7
 17825  0A19  01D5               	clrf	___fladd@a+3
 17826  0A1A  2A23               	goto	l1151
 17827  0A1B                     l3498:	
 17828  0A1B  3000               	movlw	0
 17829  0A1C  00D5               	movwf	___fladd@a+3
 17830  0A1D  3000               	movlw	0
 17831  0A1E  00D4               	movwf	___fladd@a+2
 17832  0A1F  3000               	movlw	0
 17833  0A20  00D3               	movwf	___fladd@a+1
 17834  0A21  3000               	movlw	0
 17835  0A22  00D2               	movwf	___fladd@a
 17836  0A23                     l1151:	
 17837  0A23  0860               	movf	___fladd@bexp,w
 17838  0A24  025F               	subwf	___fladd@aexp,w
 17839  0A25  1803               	skipnc
 17840  0A26  2A69               	goto	l3534
 17841  0A27  1F5E               	btfss	___fladd@signs,6
 17842  0A28  2A2D               	goto	l3504
 17843  0A29  3080               	movlw	128
 17844  0A2A  00D6               	movwf	??___fladd
 17845  0A2B  0856               	movf	??___fladd,w
 17846  0A2C  06DE               	xorwf	___fladd@signs,f
 17847  0A2D                     l3504:	
 17848  0A2D  0860               	movf	___fladd@bexp,w
 17849  0A2E  00D6               	movwf	??___fladd
 17850  0A2F  0856               	movf	??___fladd,w
 17851  0A30  00E1               	movwf	___fladd@grs
 17852  0A31  085F               	movf	___fladd@aexp,w
 17853  0A32  00D6               	movwf	??___fladd
 17854  0A33  0856               	movf	??___fladd,w
 17855  0A34  00E0               	movwf	___fladd@bexp
 17856  0A35  0861               	movf	___fladd@grs,w
 17857  0A36  00D6               	movwf	??___fladd
 17858  0A37  0856               	movf	??___fladd,w
 17859  0A38  00DF               	movwf	___fladd@aexp
 17860  0A39  084E               	movf	___fladd@b,w
 17861  0A3A  00D6               	movwf	??___fladd
 17862  0A3B  0856               	movf	??___fladd,w
 17863  0A3C  00E1               	movwf	___fladd@grs
 17864  0A3D  0852               	movf	___fladd@a,w
 17865  0A3E  00D6               	movwf	??___fladd
 17866  0A3F  0856               	movf	??___fladd,w
 17867  0A40  00CE               	movwf	___fladd@b
 17868  0A41  0861               	movf	___fladd@grs,w
 17869  0A42  00D6               	movwf	??___fladd
 17870  0A43  0856               	movf	??___fladd,w
 17871  0A44  00D2               	movwf	___fladd@a
 17872  0A45  084F               	movf	___fladd@b+1,w
 17873  0A46  00D6               	movwf	??___fladd
 17874  0A47  0856               	movf	??___fladd,w
 17875  0A48  00E1               	movwf	___fladd@grs
 17876  0A49  0853               	movf	___fladd@a+1,w
 17877  0A4A  00D6               	movwf	??___fladd
 17878  0A4B  0856               	movf	??___fladd,w
 17879  0A4C  00CF               	movwf	___fladd@b+1
 17880  0A4D  0861               	movf	___fladd@grs,w
 17881  0A4E  00D6               	movwf	??___fladd
 17882  0A4F  0856               	movf	??___fladd,w
 17883  0A50  00D3               	movwf	___fladd@a+1
 17884  0A51  0850               	movf	___fladd@b+2,w
 17885  0A52  00D6               	movwf	??___fladd
 17886  0A53  0856               	movf	??___fladd,w
 17887  0A54  00E1               	movwf	___fladd@grs
 17888  0A55  0854               	movf	___fladd@a+2,w
 17889  0A56  00D6               	movwf	??___fladd
 17890  0A57  0856               	movf	??___fladd,w
 17891  0A58  00D0               	movwf	___fladd@b+2
 17892  0A59  0861               	movf	___fladd@grs,w
 17893  0A5A  00D6               	movwf	??___fladd
 17894  0A5B  0856               	movf	??___fladd,w
 17895  0A5C  00D4               	movwf	___fladd@a+2
 17896  0A5D  0851               	movf	___fladd@b+3,w
 17897  0A5E  00D6               	movwf	??___fladd
 17898  0A5F  0856               	movf	??___fladd,w
 17899  0A60  00E1               	movwf	___fladd@grs
 17900  0A61  0855               	movf	___fladd@a+3,w
 17901  0A62  00D6               	movwf	??___fladd
 17902  0A63  0856               	movf	??___fladd,w
 17903  0A64  00D1               	movwf	___fladd@b+3
 17904  0A65  0861               	movf	___fladd@grs,w
 17905  0A66  00D6               	movwf	??___fladd
 17906  0A67  0856               	movf	??___fladd,w
 17907  0A68  00D5               	movwf	___fladd@a+3
 17908  0A69                     l3534:	
 17909  0A69  01E1               	clrf	___fladd@grs
 17910  0A6A  085F               	movf	___fladd@aexp,w
 17911  0A6B  00D6               	movwf	??___fladd
 17912  0A6C  01D7               	clrf	??___fladd+1
 17913  0A6D  0857               	movf	??___fladd+1,w
 17914  0A6E  00D9               	movwf	??___fladd+3
 17915  0A6F  0860               	movf	___fladd@bexp,w
 17916  0A70  0256               	subwf	??___fladd,w
 17917  0A71  00D8               	movwf	??___fladd+2
 17918  0A72  1C03               	skipc
 17919  0A73  03D9               	decf	??___fladd+3,f
 17920  0A74  0859               	movf	??___fladd+3,w
 17921  0A75  3A80               	xorlw	128
 17922  0A76  00DA               	movwf	??___fladd+4
 17923  0A77  3080               	movlw	128
 17924  0A78  025A               	subwf	??___fladd+4,w
 17925  0A79  1D03               	skipz
 17926  0A7A  2A7D               	goto	u3385
 17927  0A7B  301A               	movlw	26
 17928  0A7C  0258               	subwf	??___fladd+2,w
 17929  0A7D                     u3385:	
 17930  0A7D  1C03               	skipc
 17931  0A7E  2AB1               	goto	l3552
 17932  0A7F  0140               	movlb	0	; select bank0
 17933  0A80  0851               	movf	___fladd@b+3,w
 17934  0A81  0450               	iorwf	___fladd@b+2,w
 17935  0A82  044F               	iorwf	___fladd@b+1,w
 17936  0A83  044E               	iorwf	___fladd@b,w
 17937  0A84  1903               	btfsc	3,2
 17938  0A85  2A88               	goto	u3390
 17939  0A86  3001               	movlw	1
 17940  0A87  2A89               	goto	u3400
 17941  0A88                     u3390:	
 17942  0A88  3000               	movlw	0
 17943  0A89                     u3400:	
 17944  0A89  00D6               	movwf	??___fladd
 17945  0A8A  0856               	movf	??___fladd,w
 17946  0A8B  00E1               	movwf	___fladd@grs
 17947  0A8C  3000               	movlw	0
 17948  0A8D  00D1               	movwf	___fladd@b+3
 17949  0A8E  3000               	movlw	0
 17950  0A8F  00D0               	movwf	___fladd@b+2
 17951  0A90  3000               	movlw	0
 17952  0A91  00CF               	movwf	___fladd@b+1
 17953  0A92  3000               	movlw	0
 17954  0A93  00CE               	movwf	___fladd@b
 17955  0A94  085F               	movf	___fladd@aexp,w
 17956  0A95  00D6               	movwf	??___fladd
 17957  0A96  0856               	movf	??___fladd,w
 17958  0A97  00E0               	movwf	___fladd@bexp
 17959  0A98  2AB6               	goto	l1155
 17960  0A99                     l1157:	
 17961  0A99  1C61               	btfss	___fladd@grs,0
 17962  0A9A  2AA1               	goto	l3542
 17963  0A9B  3661               	lsrf	___fladd@grs,w
 17964  0A9C  3801               	iorlw	1
 17965  0A9D  00D6               	movwf	??___fladd
 17966  0A9E  0856               	movf	??___fladd,w
 17967  0A9F  00E1               	movwf	___fladd@grs
 17968  0AA0  2AA3               	goto	l3544
 17969  0AA1                     l3542:	
 17970  0AA1  1003               	clrc
 17971  0AA2  0CE1               	rrf	___fladd@grs,f
 17972  0AA3                     l3544:	
 17973  0AA3  184E               	btfsc	___fladd@b,0
 17974  0AA4  17E1               	bsf	___fladd@grs,7
 17975  0AA5  3001               	movlw	1
 17976  0AA6  00D6               	movwf	??___fladd
 17977  0AA7                     u3435:	
 17978  0AA7  37D1               	asrf	___fladd@b+3,f
 17979  0AA8  0CD0               	rrf	___fladd@b+2,f
 17980  0AA9  0CCF               	rrf	___fladd@b+1,f
 17981  0AAA  0CCE               	rrf	___fladd@b,f
 17982  0AAB  0BD6               	decfsz	??___fladd& (0+127),f
 17983  0AAC  2AA7               	goto	u3435
 17984  0AAD  3001               	movlw	1
 17985  0AAE  00D6               	movwf	??___fladd
 17986  0AAF  0856               	movf	??___fladd,w
 17987  0AB0  07E0               	addwf	___fladd@bexp,f
 17988  0AB1                     l3552:	
 17989  0AB1  0140               	movlb	0	; select bank0
 17990  0AB2  085F               	movf	___fladd@aexp,w
 17991  0AB3  0260               	subwf	___fladd@bexp,w
 17992  0AB4  1C03               	skipc
 17993  0AB5  2A99               	goto	l1157
 17994  0AB6                     l1155:	
 17995  0AB6  1B5E               	btfsc	___fladd@signs,6
 17996  0AB7  2AE7               	goto	l3578
 17997  0AB8  0860               	movf	___fladd@bexp,w
 17998  0AB9  1D03               	btfss	3,2
 17999  0ABA  2AC4               	goto	l3560
 18000  0ABB  3000               	movlw	0
 18001  0ABC  00D1               	movwf	?___fladd+3
 18002  0ABD  3000               	movlw	0
 18003  0ABE  00D0               	movwf	?___fladd+2
 18004  0ABF  3000               	movlw	0
 18005  0AC0  00CF               	movwf	?___fladd+1
 18006  0AC1  3000               	movlw	0
 18007  0AC2  00CE               	movwf	?___fladd
 18008  0AC3  0008               	return
 18009  0AC4                     l3560:	
 18010  0AC4  0852               	movf	___fladd@a,w
 18011  0AC5  07CE               	addwf	___fladd@b,f
 18012  0AC6  0853               	movf	___fladd@a+1,w
 18013  0AC7  3DCF               	addwfc	___fladd@b+1,f
 18014  0AC8  0854               	movf	___fladd@a+2,w
 18015  0AC9  3DD0               	addwfc	___fladd@b+2,f
 18016  0ACA  0855               	movf	___fladd@a+3,w
 18017  0ACB  3DD1               	addwfc	___fladd@b+3,f
 18018  0ACC  1C51               	btfss	___fladd@b+3,0
 18019  0ACD  2B61               	goto	l3612
 18020  0ACE  1C61               	btfss	___fladd@grs,0
 18021  0ACF  2AD6               	goto	l3568
 18022  0AD0  3661               	lsrf	___fladd@grs,w
 18023  0AD1  3801               	iorlw	1
 18024  0AD2  00D6               	movwf	??___fladd
 18025  0AD3  0856               	movf	??___fladd,w
 18026  0AD4  00E1               	movwf	___fladd@grs
 18027  0AD5  2AD8               	goto	l3570
 18028  0AD6                     l3568:	
 18029  0AD6  1003               	clrc
 18030  0AD7  0CE1               	rrf	___fladd@grs,f
 18031  0AD8                     l3570:	
 18032  0AD8  184E               	btfsc	___fladd@b,0
 18033  0AD9  17E1               	bsf	___fladd@grs,7
 18034  0ADA  3001               	movlw	1
 18035  0ADB  00D6               	movwf	??___fladd
 18036  0ADC                     u3505:	
 18037  0ADC  37D1               	asrf	___fladd@b+3,f
 18038  0ADD  0CD0               	rrf	___fladd@b+2,f
 18039  0ADE  0CCF               	rrf	___fladd@b+1,f
 18040  0ADF  0CCE               	rrf	___fladd@b,f
 18041  0AE0  0BD6               	decfsz	??___fladd& (0+127),f
 18042  0AE1  2ADC               	goto	u3505
 18043  0AE2  3001               	movlw	1
 18044  0AE3  00D6               	movwf	??___fladd
 18045  0AE4  0856               	movf	??___fladd,w
 18046  0AE5  07E0               	addwf	___fladd@bexp,f
 18047  0AE6  2B61               	goto	l3612
 18048  0AE7                     l3578:	
 18049  0AE7  0851               	movf	___fladd@b+3,w
 18050  0AE8  3A80               	xorlw	128
 18051  0AE9  00D6               	movwf	??___fladd
 18052  0AEA  0855               	movf	___fladd@a+3,w
 18053  0AEB  3A80               	xorlw	128
 18054  0AEC  0256               	subwf	??___fladd,w
 18055  0AED  1D03               	skipz
 18056  0AEE  2AF9               	goto	u3513
 18057  0AEF  0854               	movf	___fladd@a+2,w
 18058  0AF0  0250               	subwf	___fladd@b+2,w
 18059  0AF1  1D03               	skipz
 18060  0AF2  2AF9               	goto	u3513
 18061  0AF3  0853               	movf	___fladd@a+1,w
 18062  0AF4  024F               	subwf	___fladd@b+1,w
 18063  0AF5  1D03               	skipz
 18064  0AF6  2AF9               	goto	u3513
 18065  0AF7  0852               	movf	___fladd@a,w
 18066  0AF8  024E               	subwf	___fladd@b,w
 18067  0AF9                     u3513:	
 18068  0AF9  1803               	skipnc
 18069  0AFA  2B31               	goto	l3588
 18070  0AFB  30FF               	movlw	255
 18071  0AFC  00D6               	movwf	??___fladd
 18072  0AFD  30FF               	movlw	255
 18073  0AFE  00D7               	movwf	??___fladd+1
 18074  0AFF  30FF               	movlw	255
 18075  0B00  00D8               	movwf	??___fladd+2
 18076  0B01  30FF               	movlw	255
 18077  0B02  00D9               	movwf	??___fladd+3
 18078  0B03  084E               	movf	___fladd@b,w
 18079  0B04  0252               	subwf	___fladd@a,w
 18080  0B05  00DA               	movwf	??___fladd+4
 18081  0B06  084F               	movf	___fladd@b+1,w
 18082  0B07  3B53               	subwfb	___fladd@a+1,w
 18083  0B08  00DB               	movwf	??___fladd+5
 18084  0B09  0850               	movf	___fladd@b+2,w
 18085  0B0A  3B54               	subwfb	___fladd@a+2,w
 18086  0B0B  00DC               	movwf	??___fladd+6
 18087  0B0C  0851               	movf	___fladd@b+3,w
 18088  0B0D  3B55               	subwfb	___fladd@a+3,w
 18089  0B0E  00DD               	movwf	??___fladd+7
 18090  0B0F  085A               	movf	??___fladd+4,w
 18091  0B10  07D6               	addwf	??___fladd,f
 18092  0B11  085B               	movf	??___fladd+5,w
 18093  0B12  3DD7               	addwfc	??___fladd+1,f
 18094  0B13  085C               	movf	??___fladd+6,w
 18095  0B14  3DD8               	addwfc	??___fladd+2,f
 18096  0B15  085D               	movf	??___fladd+7,w
 18097  0B16  3DD9               	addwfc	??___fladd+3,f
 18098  0B17  0859               	movf	??___fladd+3,w
 18099  0B18  00D1               	movwf	___fladd@b+3
 18100  0B19  0858               	movf	??___fladd+2,w
 18101  0B1A  00D0               	movwf	___fladd@b+2
 18102  0B1B  0857               	movf	??___fladd+1,w
 18103  0B1C  00CF               	movwf	___fladd@b+1
 18104  0B1D  0856               	movf	??___fladd,w
 18105  0B1E  00CE               	movwf	___fladd@b
 18106  0B1F  3080               	movlw	128
 18107  0B20  00D6               	movwf	??___fladd
 18108  0B21  0856               	movf	??___fladd,w
 18109  0B22  06DE               	xorwf	___fladd@signs,f
 18110  0B23  09E1               	comf	___fladd@grs,f
 18111  0B24  0AE1               	incf	___fladd@grs,f
 18112  0B25  0861               	movf	___fladd@grs,w
 18113  0B26  1D03               	btfss	3,2
 18114  0B27  2B39               	goto	l1172
 18115  0B28  3001               	movlw	1
 18116  0B29  07CE               	addwf	___fladd@b,f
 18117  0B2A  3000               	movlw	0
 18118  0B2B  3DCF               	addwfc	___fladd@b+1,f
 18119  0B2C  3000               	movlw	0
 18120  0B2D  3DD0               	addwfc	___fladd@b+2,f
 18121  0B2E  3000               	movlw	0
 18122  0B2F  3DD1               	addwfc	___fladd@b+3,f
 18123  0B30  2B39               	goto	l1172
 18124  0B31                     l3588:	
 18125  0B31  0852               	movf	___fladd@a,w
 18126  0B32  02CE               	subwf	___fladd@b,f
 18127  0B33  0853               	movf	___fladd@a+1,w
 18128  0B34  3BCF               	subwfb	___fladd@b+1,f
 18129  0B35  0854               	movf	___fladd@a+2,w
 18130  0B36  3BD0               	subwfb	___fladd@b+2,f
 18131  0B37  0855               	movf	___fladd@a+3,w
 18132  0B38  3BD1               	subwfb	___fladd@b+3,f
 18133  0B39                     l1172:	
 18134  0B39  0851               	movf	___fladd@b+3,w
 18135  0B3A  0450               	iorwf	___fladd@b+2,w
 18136  0B3B  044F               	iorwf	___fladd@b+1,w
 18137  0B3C  044E               	iorwf	___fladd@b,w
 18138  0B3D  1D03               	skipz
 18139  0B3E  2B5F               	goto	l3610
 18140  0B3F  0861               	movf	___fladd@grs,w
 18141  0B40  1D03               	btfss	3,2
 18142  0B41  2B5F               	goto	l3610
 18143  0B42  3000               	movlw	0
 18144  0B43  00D1               	movwf	?___fladd+3
 18145  0B44  3000               	movlw	0
 18146  0B45  00D0               	movwf	?___fladd+2
 18147  0B46  3000               	movlw	0
 18148  0B47  00CF               	movwf	?___fladd+1
 18149  0B48  3000               	movlw	0
 18150  0B49  00CE               	movwf	?___fladd
 18151  0B4A  0008               	return
 18152  0B4B                     l3596:	
 18153  0B4B  3001               	movlw	1
 18154  0B4C                     u3555:	
 18155  0B4C  35CE               	lslf	___fladd@b,f
 18156  0B4D  0DCF               	rlf	___fladd@b+1,f
 18157  0B4E  0DD0               	rlf	___fladd@b+2,f
 18158  0B4F  0DD1               	rlf	___fladd@b+3,f
 18159  0B50  0B89               	decfsz	9,f
 18160  0B51  2B4C               	goto	u3555
 18161  0B52  1BE1               	btfsc	___fladd@grs,7
 18162  0B53  144E               	bsf	___fladd@b,0
 18163  0B54  1C61               	btfss	___fladd@grs,0
 18164  0B55  2B58               	goto	l3604
 18165  0B56  1403               	setc
 18166  0B57  2B59               	goto	L10
 18167  0B58                     l3604:	
 18168  0B58  1003               	clrc
 18169  0B59                     L10:	
 18170  0B59  0DE1               	rlf	___fladd@grs,f
 18171  0B5A  0860               	movf	___fladd@bexp,w
 18172  0B5B  1903               	btfsc	3,2
 18173  0B5C  2B5F               	goto	l3610
 18174  0B5D  3001               	movlw	1
 18175  0B5E  02E0               	subwf	___fladd@bexp,f
 18176  0B5F                     l3610:	
 18177  0B5F  1FD0               	btfss	___fladd@b+2,7
 18178  0B60  2B4B               	goto	l3596
 18179  0B61                     l3612:	
 18180  0B61  01DF               	clrf	___fladd@aexp
 18181  0B62  1FE1               	btfss	___fladd@grs,7
 18182  0B63  2B6C               	goto	l3622
 18183  0B64  0861               	movf	___fladd@grs,w
 18184  0B65  397F               	andlw	127
 18185  0B66  1903               	btfsc	3,2
 18186  0B67  184E               	btfsc	___fladd@b,0
 18187  0B68  2B6A               	goto	l3618
 18188  0B69  2B6C               	goto	l3622
 18189  0B6A                     l3618:	
 18190  0B6A  01DF               	clrf	___fladd@aexp
 18191  0B6B  0ADF               	incf	___fladd@aexp,f
 18192  0B6C                     l3622:	
 18193  0B6C  085F               	movf	___fladd@aexp,w
 18194  0B6D  1903               	btfsc	3,2
 18195  0B6E  2B98               	goto	l1185
 18196  0B6F  3001               	movlw	1
 18197  0B70  07CE               	addwf	___fladd@b,f
 18198  0B71  3000               	movlw	0
 18199  0B72  3DCF               	addwfc	___fladd@b+1,f
 18200  0B73  3000               	movlw	0
 18201  0B74  3DD0               	addwfc	___fladd@b+2,f
 18202  0B75  3000               	movlw	0
 18203  0B76  3DD1               	addwfc	___fladd@b+3,f
 18204  0B77  1C51               	btfss	___fladd@b+3,0
 18205  0B78  2B98               	goto	l1185
 18206  0B79  084E               	movf	___fladd@b,w
 18207  0B7A  00D6               	movwf	??___fladd
 18208  0B7B  084F               	movf	___fladd@b+1,w
 18209  0B7C  00D7               	movwf	??___fladd+1
 18210  0B7D  0850               	movf	___fladd@b+2,w
 18211  0B7E  00D8               	movwf	??___fladd+2
 18212  0B7F  0851               	movf	___fladd@b+3,w
 18213  0B80  00D9               	movwf	??___fladd+3
 18214  0B81  3001               	movlw	1
 18215  0B82  00DA               	movwf	??___fladd+4
 18216  0B83                     u3655:	
 18217  0B83  37D9               	asrf	??___fladd+3,f
 18218  0B84  0CD8               	rrf	??___fladd+2,f
 18219  0B85  0CD7               	rrf	??___fladd+1,f
 18220  0B86  0CD6               	rrf	??___fladd,f
 18221  0B87  0BDA               	decfsz	??___fladd+4,f
 18222  0B88  2B83               	goto	u3655
 18223  0B89  0859               	movf	??___fladd+3,w
 18224  0B8A  00D1               	movwf	___fladd@b+3
 18225  0B8B  0858               	movf	??___fladd+2,w
 18226  0B8C  00D0               	movwf	___fladd@b+2
 18227  0B8D  0857               	movf	??___fladd+1,w
 18228  0B8E  00CF               	movwf	___fladd@b+1
 18229  0B8F  0856               	movf	??___fladd,w
 18230  0B90  00CE               	movwf	___fladd@b
 18231  0B91  0A60               	incf	___fladd@bexp,w
 18232  0B92  1903               	btfsc	3,2
 18233  0B93  2B98               	goto	l1185
 18234  0B94  3001               	movlw	1
 18235  0B95  00D6               	movwf	??___fladd
 18236  0B96  0856               	movf	??___fladd,w
 18237  0B97  07E0               	addwf	___fladd@bexp,f
 18238  0B98                     l1185:	
 18239  0B98  0A60               	incf	___fladd@bexp,w
 18240  0B99  1D03               	btfss	3,2
 18241  0B9A  0860               	movf	___fladd@bexp,w
 18242  0B9B  1D03               	btfss	3,2
 18243  0B9C  2BA8               	goto	l3640
 18244  0B9D  3000               	movlw	0
 18245  0B9E  00D1               	movwf	___fladd@b+3
 18246  0B9F  3000               	movlw	0
 18247  0BA0  00D0               	movwf	___fladd@b+2
 18248  0BA1  3000               	movlw	0
 18249  0BA2  00CF               	movwf	___fladd@b+1
 18250  0BA3  3000               	movlw	0
 18251  0BA4  00CE               	movwf	___fladd@b
 18252  0BA5  0860               	movf	___fladd@bexp,w
 18253  0BA6  1903               	btfsc	3,2
 18254  0BA7  01DE               	clrf	___fladd@signs
 18255  0BA8                     l3640:	
 18256  0BA8  1C60               	btfss	___fladd@bexp,0
 18257  0BA9  2BAC               	goto	l3644
 18258  0BAA  17D0               	bsf	___fladd@b+2,7
 18259  0BAB  2BB0               	goto	l1193
 18260  0BAC                     l3644:	
 18261  0BAC  307F               	movlw	127
 18262  0BAD  00D6               	movwf	??___fladd
 18263  0BAE  0856               	movf	??___fladd,w
 18264  0BAF  05D0               	andwf	___fladd@b+2,f
 18265  0BB0                     l1193:	
 18266  0BB0  3660               	lsrf	___fladd@bexp,w
 18267  0BB1  00D6               	movwf	??___fladd
 18268  0BB2  0856               	movf	??___fladd,w
 18269  0BB3  00D1               	movwf	___fladd@b+3
 18270  0BB4  1FDE               	btfss	___fladd@signs,7
 18271  0BB5  0008               	return
 18272  0BB6  17D1               	bsf	___fladd@b+3,7
 18273  0BB7  0008               	return
 18274  0BB8                     __end_of___fladd:	
 18275                           
 18276                           	psect	text56
 18277  0DD4                     __ptext56:	
 18278 ;; *************** function ___flmul *****************
 18279 ;; Defined at:
 18280 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 18281 ;; Parameters:    Size  Location     Type
 18282 ;;  b               4   20[BANK0 ] unsigned char 
 18283 ;;  a               4   24[BANK0 ] unsigned char 
 18284 ;; Auto vars:     Size  Location     Type
 18285 ;;  prod            4   40[BANK0 ] struct .
 18286 ;;  grs             4   34[BANK0 ] unsigned long 
 18287 ;;  temp            2   44[BANK0 ] struct .
 18288 ;;  bexp            1   39[BANK0 ] unsigned char 
 18289 ;;  aexp            1   38[BANK0 ] unsigned char 
 18290 ;;  sign            1   33[BANK0 ] unsigned char 
 18291 ;; Return value:  Size  Location     Type
 18292 ;;                  4   20[BANK0 ] unsigned char 
 18293 ;; Registers used:
 18294 ;;		wreg, status,2, status,0, pclath, cstack
 18295 ;; Tracked objects:
 18296 ;;		On entry : 0/0
 18297 ;;		On exit  : 0/0
 18298 ;;		Unchanged: 0/0
 18299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18300 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18301 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18302 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18303 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18304 ;;Total ram usage:       26 bytes
 18305 ;; Hardware stack levels used:    1
 18306 ;; Hardware stack levels required when called:    4
 18307 ;; This function calls:
 18308 ;;		__Umul8_16
 18309 ;; This function is called by:
 18310 ;;		_ftoa
 18311 ;;		_checkChannelStatus
 18312 ;;		_systemCheck
 18313 ;;		_calcRequiredPower
 18314 ;;		_getAnalogValues
 18315 ;; This function uses a non-reentrant model
 18316 ;;
 18317                           
 18318                           
 18319                           ;psect for function ___flmul
 18320  0DD4                     ___flmul:	
 18321                           
 18322                           ;incstack = 0
 18323                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 18324  0DD4  0140               	movlb	0	; select bank0
 18325  0DD5  0837               	movf	___flmul@b+3,w
 18326  0DD6  3980               	andlw	128
 18327  0DD7  00BC               	movwf	??___flmul
 18328  0DD8  083C               	movf	??___flmul,w
 18329  0DD9  00C1               	movwf	___flmul@sign
 18330  0DDA  3537               	lslf	___flmul@b+3,w
 18331  0DDB  00BC               	movwf	??___flmul
 18332  0DDC  083C               	movf	??___flmul,w
 18333  0DDD  00C7               	movwf	___flmul@bexp
 18334  0DDE  1BB6               	btfsc	___flmul@b+2,7
 18335  0DDF  1447               	bsf	___flmul@bexp,0
 18336  0DE0  0847               	movf	___flmul@bexp,w
 18337  0DE1  1903               	btfsc	3,2
 18338  0DE2  2DF0               	goto	l3992
 18339  0DE3  0A47               	incf	___flmul@bexp,w
 18340  0DE4  1D03               	btfss	3,2
 18341  0DE5  2DEE               	goto	l3990
 18342  0DE6  3000               	movlw	0
 18343  0DE7  00B7               	movwf	___flmul@b+3
 18344  0DE8  3000               	movlw	0
 18345  0DE9  00B6               	movwf	___flmul@b+2
 18346  0DEA  3000               	movlw	0
 18347  0DEB  00B5               	movwf	___flmul@b+1
 18348  0DEC  3000               	movlw	0
 18349  0DED  00B4               	movwf	___flmul@b
 18350  0DEE                     l3990:	
 18351  0DEE  17B6               	bsf	___flmul@b+2,7
 18352  0DEF  2DF8               	goto	l3994
 18353  0DF0                     l3992:	
 18354  0DF0  3000               	movlw	0
 18355  0DF1  00B7               	movwf	___flmul@b+3
 18356  0DF2  3000               	movlw	0
 18357  0DF3  00B6               	movwf	___flmul@b+2
 18358  0DF4  3000               	movlw	0
 18359  0DF5  00B5               	movwf	___flmul@b+1
 18360  0DF6  3000               	movlw	0
 18361  0DF7  00B4               	movwf	___flmul@b
 18362  0DF8                     l3994:	
 18363  0DF8  083B               	movf	___flmul@a+3,w
 18364  0DF9  3980               	andlw	128
 18365  0DFA  00BC               	movwf	??___flmul
 18366  0DFB  083C               	movf	??___flmul,w
 18367  0DFC  06C1               	xorwf	___flmul@sign,f
 18368  0DFD  353B               	lslf	___flmul@a+3,w
 18369  0DFE  00BC               	movwf	??___flmul
 18370  0DFF  083C               	movf	??___flmul,w
 18371  0E00  00C6               	movwf	___flmul@aexp
 18372  0E01  1BBA               	btfsc	___flmul@a+2,7
 18373  0E02  1446               	bsf	___flmul@aexp,0
 18374  0E03  0846               	movf	___flmul@aexp,w
 18375  0E04  1903               	btfsc	3,2
 18376  0E05  2E13               	goto	l4010
 18377  0E06  0A46               	incf	___flmul@aexp,w
 18378  0E07  1D03               	btfss	3,2
 18379  0E08  2E11               	goto	l4008
 18380  0E09  3000               	movlw	0
 18381  0E0A  00BB               	movwf	___flmul@a+3
 18382  0E0B  3000               	movlw	0
 18383  0E0C  00BA               	movwf	___flmul@a+2
 18384  0E0D  3000               	movlw	0
 18385  0E0E  00B9               	movwf	___flmul@a+1
 18386  0E0F  3000               	movlw	0
 18387  0E10  00B8               	movwf	___flmul@a
 18388  0E11                     l4008:	
 18389  0E11  17BA               	bsf	___flmul@a+2,7
 18390  0E12  2E1B               	goto	l4012
 18391  0E13                     l4010:	
 18392  0E13  3000               	movlw	0
 18393  0E14  00BB               	movwf	___flmul@a+3
 18394  0E15  3000               	movlw	0
 18395  0E16  00BA               	movwf	___flmul@a+2
 18396  0E17  3000               	movlw	0
 18397  0E18  00B9               	movwf	___flmul@a+1
 18398  0E19  3000               	movlw	0
 18399  0E1A  00B8               	movwf	___flmul@a
 18400  0E1B                     l4012:	
 18401  0E1B  0846               	movf	___flmul@aexp,w
 18402  0E1C  1D03               	btfss	3,2
 18403  0E1D  0847               	movf	___flmul@bexp,w
 18404  0E1E  1D03               	btfss	3,2
 18405  0E1F  2E29               	goto	l4020
 18406  0E20  3000               	movlw	0
 18407  0E21  00B7               	movwf	?___flmul+3
 18408  0E22  3000               	movlw	0
 18409  0E23  00B6               	movwf	?___flmul+2
 18410  0E24  3000               	movlw	0
 18411  0E25  00B5               	movwf	?___flmul+1
 18412  0E26  3000               	movlw	0
 18413  0E27  00B4               	movwf	?___flmul
 18414  0E28  0008               	return
 18415  0E29                     l4020:	
 18416  0E29  0834               	movf	___flmul@b,w
 18417  0E2A  00BC               	movwf	??___flmul
 18418  0E2B  083C               	movf	??___flmul,w
 18419  0E2C  00A0               	movwf	__Umul8_16@multiplicand
 18420  0E2D  083A               	movf	___flmul@a+2,w
 18421  0E2E  31A0  2026  318D   	fcall	__Umul8_16
 18422  0E31  0140               	movlb	0	; select bank0
 18423  0E32  0821               	movf	?__Umul8_16+1,w
 18424  0E33  00CD               	movwf	___flmul@temp+1
 18425  0E34  0820               	movf	?__Umul8_16,w
 18426  0E35  00CC               	movwf	___flmul@temp
 18427  0E36  084C               	movf	___flmul@temp,w
 18428  0E37  00BC               	movwf	??___flmul
 18429  0E38  01BD               	clrf	??___flmul+1
 18430  0E39  01BE               	clrf	??___flmul+2
 18431  0E3A  01BF               	clrf	??___flmul+3
 18432  0E3B  083F               	movf	??___flmul+3,w
 18433  0E3C  00C5               	movwf	___flmul@grs+3
 18434  0E3D  083E               	movf	??___flmul+2,w
 18435  0E3E  00C4               	movwf	___flmul@grs+2
 18436  0E3F  083D               	movf	??___flmul+1,w
 18437  0E40  00C3               	movwf	___flmul@grs+1
 18438  0E41  083C               	movf	??___flmul,w
 18439  0E42  00C2               	movwf	___flmul@grs
 18440  0E43  084D               	movf	___flmul@temp+1,w
 18441  0E44  00BC               	movwf	??___flmul
 18442  0E45  01BD               	clrf	??___flmul+1
 18443  0E46  01BE               	clrf	??___flmul+2
 18444  0E47  01BF               	clrf	??___flmul+3
 18445  0E48  083F               	movf	??___flmul+3,w
 18446  0E49  00CB               	movwf	___flmul@prod+3
 18447  0E4A  083E               	movf	??___flmul+2,w
 18448  0E4B  00CA               	movwf	___flmul@prod+2
 18449  0E4C  083D               	movf	??___flmul+1,w
 18450  0E4D  00C9               	movwf	___flmul@prod+1
 18451  0E4E  083C               	movf	??___flmul,w
 18452  0E4F  00C8               	movwf	___flmul@prod
 18453  0E50  0835               	movf	___flmul@b+1,w
 18454  0E51  00BC               	movwf	??___flmul
 18455  0E52  083C               	movf	??___flmul,w
 18456  0E53  00A0               	movwf	__Umul8_16@multiplicand
 18457  0E54  0839               	movf	___flmul@a+1,w
 18458  0E55  31A0  2026  318D   	fcall	__Umul8_16
 18459  0E58  0140               	movlb	0	; select bank0
 18460  0E59  0821               	movf	?__Umul8_16+1,w
 18461  0E5A  00CD               	movwf	___flmul@temp+1
 18462  0E5B  0820               	movf	?__Umul8_16,w
 18463  0E5C  00CC               	movwf	___flmul@temp
 18464  0E5D  084C               	movf	___flmul@temp,w
 18465  0E5E  00BC               	movwf	??___flmul
 18466  0E5F  01BD               	clrf	??___flmul+1
 18467  0E60  01BE               	clrf	??___flmul+2
 18468  0E61  01BF               	clrf	??___flmul+3
 18469  0E62  083C               	movf	??___flmul,w
 18470  0E63  07C2               	addwf	___flmul@grs,f
 18471  0E64  083D               	movf	??___flmul+1,w
 18472  0E65  3DC3               	addwfc	___flmul@grs+1,f
 18473  0E66  083E               	movf	??___flmul+2,w
 18474  0E67  3DC4               	addwfc	___flmul@grs+2,f
 18475  0E68  083F               	movf	??___flmul+3,w
 18476  0E69  3DC5               	addwfc	___flmul@grs+3,f
 18477  0E6A  084D               	movf	___flmul@temp+1,w
 18478  0E6B  00BC               	movwf	??___flmul
 18479  0E6C  01BD               	clrf	??___flmul+1
 18480  0E6D  01BE               	clrf	??___flmul+2
 18481  0E6E  01BF               	clrf	??___flmul+3
 18482  0E6F  083C               	movf	??___flmul,w
 18483  0E70  07C8               	addwf	___flmul@prod,f
 18484  0E71  083D               	movf	??___flmul+1,w
 18485  0E72  3DC9               	addwfc	___flmul@prod+1,f
 18486  0E73  083E               	movf	??___flmul+2,w
 18487  0E74  3DCA               	addwfc	___flmul@prod+2,f
 18488  0E75  083F               	movf	??___flmul+3,w
 18489  0E76  3DCB               	addwfc	___flmul@prod+3,f
 18490  0E77  0836               	movf	___flmul@b+2,w
 18491  0E78  00BC               	movwf	??___flmul
 18492  0E79  083C               	movf	??___flmul,w
 18493  0E7A  00A0               	movwf	__Umul8_16@multiplicand
 18494  0E7B  0838               	movf	___flmul@a,w
 18495  0E7C  31A0  2026  318D   	fcall	__Umul8_16
 18496  0E7F  0140               	movlb	0	; select bank0
 18497  0E80  0821               	movf	?__Umul8_16+1,w
 18498  0E81  00CD               	movwf	___flmul@temp+1
 18499  0E82  0820               	movf	?__Umul8_16,w
 18500  0E83  00CC               	movwf	___flmul@temp
 18501  0E84  084C               	movf	___flmul@temp,w
 18502  0E85  00BC               	movwf	??___flmul
 18503  0E86  01BD               	clrf	??___flmul+1
 18504  0E87  01BE               	clrf	??___flmul+2
 18505  0E88  01BF               	clrf	??___flmul+3
 18506  0E89  083C               	movf	??___flmul,w
 18507  0E8A  07C2               	addwf	___flmul@grs,f
 18508  0E8B  083D               	movf	??___flmul+1,w
 18509  0E8C  3DC3               	addwfc	___flmul@grs+1,f
 18510  0E8D  083E               	movf	??___flmul+2,w
 18511  0E8E  3DC4               	addwfc	___flmul@grs+2,f
 18512  0E8F  083F               	movf	??___flmul+3,w
 18513  0E90  3DC5               	addwfc	___flmul@grs+3,f
 18514  0E91  084D               	movf	___flmul@temp+1,w
 18515  0E92  00BC               	movwf	??___flmul
 18516  0E93  01BD               	clrf	??___flmul+1
 18517  0E94  01BE               	clrf	??___flmul+2
 18518  0E95  01BF               	clrf	??___flmul+3
 18519  0E96  083C               	movf	??___flmul,w
 18520  0E97  07C8               	addwf	___flmul@prod,f
 18521  0E98  083D               	movf	??___flmul+1,w
 18522  0E99  3DC9               	addwfc	___flmul@prod+1,f
 18523  0E9A  083E               	movf	??___flmul+2,w
 18524  0E9B  3DCA               	addwfc	___flmul@prod+2,f
 18525  0E9C  083F               	movf	??___flmul+3,w
 18526  0E9D  3DCB               	addwfc	___flmul@prod+3,f
 18527  0E9E  3008               	movlw	8
 18528  0E9F                     u4505:	
 18529  0E9F  35C2               	lslf	___flmul@grs,f
 18530  0EA0  0DC3               	rlf	___flmul@grs+1,f
 18531  0EA1  0DC4               	rlf	___flmul@grs+2,f
 18532  0EA2  0DC5               	rlf	___flmul@grs+3,f
 18533  0EA3  0B89               	decfsz	9,f
 18534  0EA4  2E9F               	goto	u4505
 18535  0EA5  0835               	movf	___flmul@b+1,w
 18536  0EA6  00BC               	movwf	??___flmul
 18537  0EA7  083C               	movf	??___flmul,w
 18538  0EA8  00A0               	movwf	__Umul8_16@multiplicand
 18539  0EA9  0838               	movf	___flmul@a,w
 18540  0EAA  31A0  2026  318D   	fcall	__Umul8_16
 18541  0EAD  0140               	movlb	0	; select bank0
 18542  0EAE  0821               	movf	?__Umul8_16+1,w
 18543  0EAF  00CD               	movwf	___flmul@temp+1
 18544  0EB0  0820               	movf	?__Umul8_16,w
 18545  0EB1  00CC               	movwf	___flmul@temp
 18546  0EB2  084C               	movf	___flmul@temp,w
 18547  0EB3  07C2               	addwf	___flmul@grs,f
 18548  0EB4  084D               	movf	___flmul@temp+1,w
 18549  0EB5  3DC3               	addwfc	___flmul@grs+1,f
 18550  0EB6  3000               	movlw	0
 18551  0EB7  3DC4               	addwfc	___flmul@grs+2,f
 18552  0EB8  3DC5               	addwfc	___flmul@grs+3,f
 18553  0EB9  0834               	movf	___flmul@b,w
 18554  0EBA  00BC               	movwf	??___flmul
 18555  0EBB  083C               	movf	??___flmul,w
 18556  0EBC  00A0               	movwf	__Umul8_16@multiplicand
 18557  0EBD  0839               	movf	___flmul@a+1,w
 18558  0EBE  31A0  2026  318D   	fcall	__Umul8_16
 18559  0EC1  0140               	movlb	0	; select bank0
 18560  0EC2  0821               	movf	?__Umul8_16+1,w
 18561  0EC3  00CD               	movwf	___flmul@temp+1
 18562  0EC4  0820               	movf	?__Umul8_16,w
 18563  0EC5  00CC               	movwf	___flmul@temp
 18564  0EC6  084C               	movf	___flmul@temp,w
 18565  0EC7  07C2               	addwf	___flmul@grs,f
 18566  0EC8  084D               	movf	___flmul@temp+1,w
 18567  0EC9  3DC3               	addwfc	___flmul@grs+1,f
 18568  0ECA  3000               	movlw	0
 18569  0ECB  3DC4               	addwfc	___flmul@grs+2,f
 18570  0ECC  3DC5               	addwfc	___flmul@grs+3,f
 18571  0ECD  3008               	movlw	8
 18572  0ECE                     u4515:	
 18573  0ECE  35C2               	lslf	___flmul@grs,f
 18574  0ECF  0DC3               	rlf	___flmul@grs+1,f
 18575  0ED0  0DC4               	rlf	___flmul@grs+2,f
 18576  0ED1  0DC5               	rlf	___flmul@grs+3,f
 18577  0ED2  0B89               	decfsz	9,f
 18578  0ED3  2ECE               	goto	u4515
 18579  0ED4  0834               	movf	___flmul@b,w
 18580  0ED5  00BC               	movwf	??___flmul
 18581  0ED6  083C               	movf	??___flmul,w
 18582  0ED7  00A0               	movwf	__Umul8_16@multiplicand
 18583  0ED8  0838               	movf	___flmul@a,w
 18584  0ED9  31A0  2026  318D   	fcall	__Umul8_16
 18585  0EDC  0140               	movlb	0	; select bank0
 18586  0EDD  0821               	movf	?__Umul8_16+1,w
 18587  0EDE  00CD               	movwf	___flmul@temp+1
 18588  0EDF  0820               	movf	?__Umul8_16,w
 18589  0EE0  00CC               	movwf	___flmul@temp
 18590  0EE1  084C               	movf	___flmul@temp,w
 18591  0EE2  07C2               	addwf	___flmul@grs,f
 18592  0EE3  084D               	movf	___flmul@temp+1,w
 18593  0EE4  3DC3               	addwfc	___flmul@grs+1,f
 18594  0EE5  3000               	movlw	0
 18595  0EE6  3DC4               	addwfc	___flmul@grs+2,f
 18596  0EE7  3DC5               	addwfc	___flmul@grs+3,f
 18597  0EE8  0835               	movf	___flmul@b+1,w
 18598  0EE9  00BC               	movwf	??___flmul
 18599  0EEA  083C               	movf	??___flmul,w
 18600  0EEB  00A0               	movwf	__Umul8_16@multiplicand
 18601  0EEC  083A               	movf	___flmul@a+2,w
 18602  0EED  31A0  2026  318D   	fcall	__Umul8_16
 18603  0EF0  0140               	movlb	0	; select bank0
 18604  0EF1  0821               	movf	?__Umul8_16+1,w
 18605  0EF2  00CD               	movwf	___flmul@temp+1
 18606  0EF3  0820               	movf	?__Umul8_16,w
 18607  0EF4  00CC               	movwf	___flmul@temp
 18608  0EF5  084C               	movf	___flmul@temp,w
 18609  0EF6  07C8               	addwf	___flmul@prod,f
 18610  0EF7  084D               	movf	___flmul@temp+1,w
 18611  0EF8  3DC9               	addwfc	___flmul@prod+1,f
 18612  0EF9  3000               	movlw	0
 18613  0EFA  3DCA               	addwfc	___flmul@prod+2,f
 18614  0EFB  3DCB               	addwfc	___flmul@prod+3,f
 18615  0EFC  0836               	movf	___flmul@b+2,w
 18616  0EFD  00BC               	movwf	??___flmul
 18617  0EFE  083C               	movf	??___flmul,w
 18618  0EFF  00A0               	movwf	__Umul8_16@multiplicand
 18619  0F00  0839               	movf	___flmul@a+1,w
 18620  0F01  31A0  2026  318D   	fcall	__Umul8_16
 18621  0F04  0140               	movlb	0	; select bank0
 18622  0F05  0821               	movf	?__Umul8_16+1,w
 18623  0F06  00CD               	movwf	___flmul@temp+1
 18624  0F07  0820               	movf	?__Umul8_16,w
 18625  0F08  00CC               	movwf	___flmul@temp
 18626  0F09  084C               	movf	___flmul@temp,w
 18627  0F0A  07C8               	addwf	___flmul@prod,f
 18628  0F0B  084D               	movf	___flmul@temp+1,w
 18629  0F0C  3DC9               	addwfc	___flmul@prod+1,f
 18630  0F0D  3000               	movlw	0
 18631  0F0E  3DCA               	addwfc	___flmul@prod+2,f
 18632  0F0F  3DCB               	addwfc	___flmul@prod+3,f
 18633  0F10  0836               	movf	___flmul@b+2,w
 18634  0F11  00BC               	movwf	??___flmul
 18635  0F12  083C               	movf	??___flmul,w
 18636  0F13  00A0               	movwf	__Umul8_16@multiplicand
 18637  0F14  083A               	movf	___flmul@a+2,w
 18638  0F15  31A0  2026  318D   	fcall	__Umul8_16
 18639  0F18  0140               	movlb	0	; select bank0
 18640  0F19  0821               	movf	?__Umul8_16+1,w
 18641  0F1A  00CD               	movwf	___flmul@temp+1
 18642  0F1B  0820               	movf	?__Umul8_16,w
 18643  0F1C  00CC               	movwf	___flmul@temp
 18644  0F1D  084C               	movf	___flmul@temp,w
 18645  0F1E  00BC               	movwf	??___flmul
 18646  0F1F  084D               	movf	___flmul@temp+1,w
 18647  0F20  00BD               	movwf	??___flmul+1
 18648  0F21  01BE               	clrf	??___flmul+2
 18649  0F22  01BF               	clrf	??___flmul+3
 18650  0F23  3008               	movlw	8
 18651  0F24                     u4525:	
 18652  0F24  35BC               	lslf	??___flmul,f
 18653  0F25  0DBD               	rlf	??___flmul+1,f
 18654  0F26  0DBE               	rlf	??___flmul+2,f
 18655  0F27  0DBF               	rlf	??___flmul+3,f
 18656  0F28  0B89               	decfsz	9,f
 18657  0F29  2F24               	goto	u4525
 18658  0F2A  083C               	movf	??___flmul,w
 18659  0F2B  07C8               	addwf	___flmul@prod,f
 18660  0F2C  083D               	movf	??___flmul+1,w
 18661  0F2D  3DC9               	addwfc	___flmul@prod+1,f
 18662  0F2E  083E               	movf	??___flmul+2,w
 18663  0F2F  3DCA               	addwfc	___flmul@prod+2,f
 18664  0F30  083F               	movf	??___flmul+3,w
 18665  0F31  3DCB               	addwfc	___flmul@prod+3,f
 18666  0F32  0842               	movf	___flmul@grs,w
 18667  0F33  00BC               	movwf	??___flmul
 18668  0F34  0843               	movf	___flmul@grs+1,w
 18669  0F35  00BD               	movwf	??___flmul+1
 18670  0F36  0844               	movf	___flmul@grs+2,w
 18671  0F37  00BE               	movwf	??___flmul+2
 18672  0F38  0845               	movf	___flmul@grs+3,w
 18673  0F39  00BF               	movwf	??___flmul+3
 18674  0F3A  3018               	movlw	24
 18675  0F3B                     u4535:	
 18676  0F3B  36BF               	lsrf	??___flmul+3,f
 18677  0F3C  0CBE               	rrf	??___flmul+2,f
 18678  0F3D  0CBD               	rrf	??___flmul+1,f
 18679  0F3E  0CBC               	rrf	??___flmul,f
 18680  0F3F  0B89               	decfsz	9,f
 18681  0F40  2F3B               	goto	u4535
 18682  0F41  083C               	movf	??___flmul,w
 18683  0F42  07C8               	addwf	___flmul@prod,f
 18684  0F43  083D               	movf	??___flmul+1,w
 18685  0F44  3DC9               	addwfc	___flmul@prod+1,f
 18686  0F45  083E               	movf	??___flmul+2,w
 18687  0F46  3DCA               	addwfc	___flmul@prod+2,f
 18688  0F47  083F               	movf	??___flmul+3,w
 18689  0F48  3DCB               	addwfc	___flmul@prod+3,f
 18690  0F49  3008               	movlw	8
 18691  0F4A                     u4545:	
 18692  0F4A  35C2               	lslf	___flmul@grs,f
 18693  0F4B  0DC3               	rlf	___flmul@grs+1,f
 18694  0F4C  0DC4               	rlf	___flmul@grs+2,f
 18695  0F4D  0DC5               	rlf	___flmul@grs+3,f
 18696  0F4E  0B89               	decfsz	9,f
 18697  0F4F  2F4A               	goto	u4545
 18698  0F50  0847               	movf	___flmul@bexp,w
 18699  0F51  0746               	addwf	___flmul@aexp,w
 18700  0F52  00BC               	movwf	??___flmul
 18701  0F53  01BD               	clrf	??___flmul+1
 18702  0F54  0DBD               	rlf	??___flmul+1,f
 18703  0F55  083C               	movf	??___flmul,w
 18704  0F56  3E82               	addlw	130
 18705  0F57  00CC               	movwf	___flmul@temp
 18706  0F58  30FF               	movlw	255
 18707  0F59  3D3D               	addwfc	??___flmul+1,w
 18708  0F5A  00CD               	movwf	___flmul@temp+1
 18709  0F5B                     l4072:	
 18710  0F5B  1BCA               	btfsc	___flmul@prod+2,7
 18711  0F5C  2F72               	goto	l4074
 18712  0F5D  3001               	movlw	1
 18713  0F5E                     u4555:	
 18714  0F5E  35C8               	lslf	___flmul@prod,f
 18715  0F5F  0DC9               	rlf	___flmul@prod+1,f
 18716  0F60  0DCA               	rlf	___flmul@prod+2,f
 18717  0F61  0DCB               	rlf	___flmul@prod+3,f
 18718  0F62  0B89               	decfsz	9,f
 18719  0F63  2F5E               	goto	u4555
 18720  0F64  1BC5               	btfsc	___flmul@grs+3,7
 18721  0F65  1448               	bsf	___flmul@prod,0
 18722  0F66  3001               	movlw	1
 18723  0F67                     u4575:	
 18724  0F67  35C2               	lslf	___flmul@grs,f
 18725  0F68  0DC3               	rlf	___flmul@grs+1,f
 18726  0F69  0DC4               	rlf	___flmul@grs+2,f
 18727  0F6A  0DC5               	rlf	___flmul@grs+3,f
 18728  0F6B  0B89               	decfsz	9,f
 18729  0F6C  2F67               	goto	u4575
 18730  0F6D  30FF               	movlw	255
 18731  0F6E  07CC               	addwf	___flmul@temp,f
 18732  0F6F  30FF               	movlw	255
 18733  0F70  3DCD               	addwfc	___flmul@temp+1,f
 18734  0F71  2F5B               	goto	l4072
 18735  0F72                     l4074:	
 18736  0F72  01C6               	clrf	___flmul@aexp
 18737  0F73  1FC5               	btfss	___flmul@grs+3,7
 18738  0F74  2F8B               	goto	l4084
 18739  0F75  30FF               	movlw	255
 18740  0F76  0542               	andwf	___flmul@grs,w
 18741  0F77  00BC               	movwf	??___flmul
 18742  0F78  30FF               	movlw	255
 18743  0F79  0543               	andwf	___flmul@grs+1,w
 18744  0F7A  00BD               	movwf	??___flmul+1
 18745  0F7B  30FF               	movlw	255
 18746  0F7C  0544               	andwf	___flmul@grs+2,w
 18747  0F7D  00BE               	movwf	??___flmul+2
 18748  0F7E  307F               	movlw	127
 18749  0F7F  0545               	andwf	___flmul@grs+3,w
 18750  0F80  00BF               	movwf	??___flmul+3
 18751  0F81  083F               	movf	??___flmul+3,w
 18752  0F82  043E               	iorwf	??___flmul+2,w
 18753  0F83  043D               	iorwf	??___flmul+1,w
 18754  0F84  043C               	iorwf	??___flmul,w
 18755  0F85  1903               	skipnz
 18756  0F86  1848               	btfsc	___flmul@prod,0
 18757  0F87  2F89               	goto	l4080
 18758  0F88  2F8B               	goto	l4084
 18759  0F89                     l4080:	
 18760  0F89  01C6               	clrf	___flmul@aexp
 18761  0F8A  0AC6               	incf	___flmul@aexp,f
 18762  0F8B                     l4084:	
 18763  0F8B  0846               	movf	___flmul@aexp,w
 18764  0F8C  1903               	btfsc	3,2
 18765  0F8D  2FB4               	goto	l4094
 18766  0F8E  3001               	movlw	1
 18767  0F8F  07C8               	addwf	___flmul@prod,f
 18768  0F90  3000               	movlw	0
 18769  0F91  3DC9               	addwfc	___flmul@prod+1,f
 18770  0F92  3000               	movlw	0
 18771  0F93  3DCA               	addwfc	___flmul@prod+2,f
 18772  0F94  3000               	movlw	0
 18773  0F95  3DCB               	addwfc	___flmul@prod+3,f
 18774  0F96  1C4B               	btfss	___flmul@prod+3,0
 18775  0F97  2FB4               	goto	l4094
 18776  0F98  0848               	movf	___flmul@prod,w
 18777  0F99  00BC               	movwf	??___flmul
 18778  0F9A  0849               	movf	___flmul@prod+1,w
 18779  0F9B  00BD               	movwf	??___flmul+1
 18780  0F9C  084A               	movf	___flmul@prod+2,w
 18781  0F9D  00BE               	movwf	??___flmul+2
 18782  0F9E  084B               	movf	___flmul@prod+3,w
 18783  0F9F  00BF               	movwf	??___flmul+3
 18784  0FA0  3001               	movlw	1
 18785  0FA1  00C0               	movwf	??___flmul+4
 18786  0FA2                     u4645:	
 18787  0FA2  37BF               	asrf	??___flmul+3,f
 18788  0FA3  0CBE               	rrf	??___flmul+2,f
 18789  0FA4  0CBD               	rrf	??___flmul+1,f
 18790  0FA5  0CBC               	rrf	??___flmul,f
 18791  0FA6  0BC0               	decfsz	??___flmul+4,f
 18792  0FA7  2FA2               	goto	u4645
 18793  0FA8  083F               	movf	??___flmul+3,w
 18794  0FA9  00CB               	movwf	___flmul@prod+3
 18795  0FAA  083E               	movf	??___flmul+2,w
 18796  0FAB  00CA               	movwf	___flmul@prod+2
 18797  0FAC  083D               	movf	??___flmul+1,w
 18798  0FAD  00C9               	movwf	___flmul@prod+1
 18799  0FAE  083C               	movf	??___flmul,w
 18800  0FAF  00C8               	movwf	___flmul@prod
 18801  0FB0  3001               	movlw	1
 18802  0FB1  07CC               	addwf	___flmul@temp,f
 18803  0FB2  3000               	movlw	0
 18804  0FB3  3DCD               	addwfc	___flmul@temp+1,f
 18805  0FB4                     l4094:	
 18806  0FB4  084D               	movf	___flmul@temp+1,w
 18807  0FB5  3A80               	xorlw	128
 18808  0FB6  00BC               	movwf	??___flmul
 18809  0FB7  3080               	movlw	128
 18810  0FB8  023C               	subwf	??___flmul,w
 18811  0FB9  1D03               	skipz
 18812  0FBA  2FBD               	goto	u4655
 18813  0FBB  30FF               	movlw	255
 18814  0FBC  024C               	subwf	___flmul@temp,w
 18815  0FBD                     u4655:	
 18816  0FBD  1C03               	skipc
 18817  0FBE  2FC9               	goto	l4098
 18818  0FBF  307F               	movlw	127
 18819  0FC0  0140               	movlb	0	; select bank0
 18820  0FC1  00CB               	movwf	___flmul@prod+3
 18821  0FC2  3080               	movlw	128
 18822  0FC3  00CA               	movwf	___flmul@prod+2
 18823  0FC4  3000               	movlw	0
 18824  0FC5  00C9               	movwf	___flmul@prod+1
 18825  0FC6  3000               	movlw	0
 18826  0FC7  00C8               	movwf	___flmul@prod
 18827  0FC8  2FF3               	goto	l1259
 18828  0FC9                     l4098:	
 18829  0FC9  0140               	movlb	0	; select bank0
 18830  0FCA  084D               	movf	___flmul@temp+1,w
 18831  0FCB  3A80               	xorlw	128
 18832  0FCC  00BC               	movwf	??___flmul
 18833  0FCD  3080               	movlw	128
 18834  0FCE  023C               	subwf	??___flmul,w
 18835  0FCF  1D03               	skipz
 18836  0FD0  2FD3               	goto	u4665
 18837  0FD1  3001               	movlw	1
 18838  0FD2  024C               	subwf	___flmul@temp,w
 18839  0FD3                     u4665:	
 18840  0FD3  1803               	skipnc
 18841  0FD4  2FE0               	goto	l4104
 18842  0FD5  3000               	movlw	0
 18843  0FD6  0140               	movlb	0	; select bank0
 18844  0FD7  00CB               	movwf	___flmul@prod+3
 18845  0FD8  3000               	movlw	0
 18846  0FD9  00CA               	movwf	___flmul@prod+2
 18847  0FDA  3000               	movlw	0
 18848  0FDB  00C9               	movwf	___flmul@prod+1
 18849  0FDC  3000               	movlw	0
 18850  0FDD  00C8               	movwf	___flmul@prod
 18851  0FDE  01C1               	clrf	___flmul@sign
 18852  0FDF  2FF3               	goto	l1259
 18853  0FE0                     l4104:	
 18854  0FE0  0140               	movlb	0	; select bank0
 18855  0FE1  084C               	movf	___flmul@temp,w
 18856  0FE2  00BC               	movwf	??___flmul
 18857  0FE3  083C               	movf	??___flmul,w
 18858  0FE4  00C7               	movwf	___flmul@bexp
 18859  0FE5  30FF               	movlw	255
 18860  0FE6  05C8               	andwf	___flmul@prod,f
 18861  0FE7  30FF               	movlw	255
 18862  0FE8  05C9               	andwf	___flmul@prod+1,f
 18863  0FE9  307F               	movlw	127
 18864  0FEA  05CA               	andwf	___flmul@prod+2,f
 18865  0FEB  3000               	movlw	0
 18866  0FEC  05CB               	andwf	___flmul@prod+3,f
 18867  0FED  1847               	btfsc	___flmul@bexp,0
 18868  0FEE  17CA               	bsf	___flmul@prod+2,7
 18869  0FEF  3647               	lsrf	___flmul@bexp,w
 18870  0FF0  00BC               	movwf	??___flmul
 18871  0FF1  083C               	movf	??___flmul,w
 18872  0FF2  00CB               	movwf	___flmul@prod+3
 18873  0FF3                     l1259:	
 18874  0FF3  0841               	movf	___flmul@sign,w
 18875  0FF4  00BC               	movwf	??___flmul
 18876  0FF5  083C               	movf	??___flmul,w
 18877  0FF6  04CB               	iorwf	___flmul@prod+3,f
 18878  0FF7  084B               	movf	___flmul@prod+3,w
 18879  0FF8  00B7               	movwf	?___flmul+3
 18880  0FF9  084A               	movf	___flmul@prod+2,w
 18881  0FFA  00B6               	movwf	?___flmul+2
 18882  0FFB  0849               	movf	___flmul@prod+1,w
 18883  0FFC  00B5               	movwf	?___flmul+1
 18884  0FFD  0848               	movf	___flmul@prod,w
 18885  0FFE  00B4               	movwf	?___flmul
 18886  0FFF  0008               	return
 18887  1000                     __end_of___flmul:	
 18888                           
 18889                           	psect	text57
 18890  2026                     __ptext57:	
 18891 ;; *************** function __Umul8_16 *****************
 18892 ;; Defined at:
 18893 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 18894 ;; Parameters:    Size  Location     Type
 18895 ;;  multiplier      1    wreg     unsigned char 
 18896 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 18897 ;; Auto vars:     Size  Location     Type
 18898 ;;  multiplier      1    8[BANK0 ] unsigned char 
 18899 ;;  word_mpld       2    6[BANK0 ] unsigned int 
 18900 ;;  product         2    4[BANK0 ] unsigned int 
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  2    0[BANK0 ] unsigned int 
 18903 ;; Registers used:
 18904 ;;		wreg, status,2, status,0
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18910 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18911 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18913 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18914 ;;Total ram usage:        9 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:    3
 18917 ;; This function calls:
 18918 ;;		Nothing
 18919 ;; This function is called by:
 18920 ;;		___flmul
 18921 ;; This function uses a non-reentrant model
 18922 ;;
 18923                           
 18924                           
 18925                           ;psect for function __Umul8_16
 18926  2026                     __Umul8_16:	
 18927                           
 18928                           ;incstack = 0
 18929                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 18930                           ;__Umul8_16@multiplier stored from wreg
 18931  2026  0140               	movlb	0	; select bank0
 18932  2027  00A8               	movwf	__Umul8_16@multiplier
 18933  2028  01A4               	clrf	__Umul8_16@product
 18934  2029  01A5               	clrf	__Umul8_16@product+1
 18935  202A  0820               	movf	__Umul8_16@multiplicand,w
 18936  202B  00A2               	movwf	??__Umul8_16
 18937  202C  01A3               	clrf	??__Umul8_16+1
 18938  202D  0822               	movf	??__Umul8_16,w
 18939  202E  00A6               	movwf	__Umul8_16@word_mpld
 18940  202F  0823               	movf	??__Umul8_16+1,w
 18941  2030  00A7               	movwf	__Umul8_16@word_mpld+1
 18942  2031                     l3654:	
 18943  2031  1C28               	btfss	__Umul8_16@multiplier,0
 18944  2032  2837               	goto	l1314
 18945  2033  0826               	movf	__Umul8_16@word_mpld,w
 18946  2034  07A4               	addwf	__Umul8_16@product,f
 18947  2035  0827               	movf	__Umul8_16@word_mpld+1,w
 18948  2036  3DA5               	addwfc	__Umul8_16@product+1,f
 18949  2037                     l1314:	
 18950  2037  3001               	movlw	1
 18951  2038                     u3735:	
 18952  2038  35A6               	lslf	__Umul8_16@word_mpld,f
 18953  2039  0DA7               	rlf	__Umul8_16@word_mpld+1,f
 18954  203A  0B89               	decfsz	9,f
 18955  203B  2838               	goto	u3735
 18956  203C  1003               	clrc
 18957  203D  0CA8               	rrf	__Umul8_16@multiplier,f
 18958  203E  0828               	movf	__Umul8_16@multiplier,w
 18959  203F  1D03               	btfss	3,2
 18960  2040  2831               	goto	l3654
 18961  2041  0825               	movf	__Umul8_16@product+1,w
 18962  2042  00A1               	movwf	?__Umul8_16+1
 18963  2043  0824               	movf	__Umul8_16@product,w
 18964  2044  00A0               	movwf	?__Umul8_16
 18965  2045  0008               	return
 18966  2046                     __end_of__Umul8_16:	
 18967                           
 18968                           	psect	text58
 18969  1056                     __ptext58:	
 18970 ;; *************** function ___fldiv *****************
 18971 ;; Defined at:
 18972 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 18973 ;; Parameters:    Size  Location     Type
 18974 ;;  a               4   46[BANK0 ] unsigned int 
 18975 ;;  b               4   50[BANK0 ] unsigned int 
 18976 ;; Auto vars:     Size  Location     Type
 18977 ;;  grs             4   66[BANK0 ] unsigned long 
 18978 ;;  rem             4   59[BANK0 ] unsigned long 
 18979 ;;  new_exp         2   64[BANK0 ] int 
 18980 ;;  aexp            1   71[BANK0 ] unsigned char 
 18981 ;;  bexp            1   70[BANK0 ] unsigned char 
 18982 ;;  sign            1   63[BANK0 ] unsigned char 
 18983 ;; Return value:  Size  Location     Type
 18984 ;;                  4   46[BANK0 ] unsigned char 
 18985 ;; Registers used:
 18986 ;;		wreg, status,2, status,0
 18987 ;; Tracked objects:
 18988 ;;		On entry : 0/0
 18989 ;;		On exit  : 0/0
 18990 ;;		Unchanged: 0/0
 18991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18992 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18993 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18994 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18995 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18996 ;;Total ram usage:       26 bytes
 18997 ;; Hardware stack levels used:    1
 18998 ;; Hardware stack levels required when called:    3
 18999 ;; This function calls:
 19000 ;;		Nothing
 19001 ;; This function is called by:
 19002 ;;		_ftoa
 19003 ;;		_checkChannelStatus
 19004 ;;		_systemCheck
 19005 ;;		_calcRequiredPower
 19006 ;;		_getAnalogValues
 19007 ;; This function uses a non-reentrant model
 19008 ;;
 19009                           
 19010                           
 19011                           ;psect for function ___fldiv
 19012  1056                     ___fldiv:	
 19013                           
 19014                           ;incstack = 0
 19015                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 19016  1056  0140               	movlb	0	; select bank0
 19017  1057  0855               	movf	___fldiv@b+3,w
 19018  1058  3980               	andlw	128
 19019  1059  00D6               	movwf	??___fldiv
 19020  105A  0856               	movf	??___fldiv,w
 19021  105B  00DF               	movwf	___fldiv@sign
 19022  105C  3555               	lslf	___fldiv@b+3,w
 19023  105D  00D6               	movwf	??___fldiv
 19024  105E  0856               	movf	??___fldiv,w
 19025  105F  00E6               	movwf	___fldiv@bexp
 19026  1060  1BD4               	btfsc	___fldiv@b+2,7
 19027  1061  1466               	bsf	___fldiv@bexp,0
 19028  1062  0866               	movf	___fldiv@bexp,w
 19029  1063  1903               	btfsc	3,2
 19030  1064  2873               	goto	l3854
 19031  1065  0A66               	incf	___fldiv@bexp,w
 19032  1066  1D03               	btfss	3,2
 19033  1067  2870               	goto	l3850
 19034  1068  3000               	movlw	0
 19035  1069  00D5               	movwf	___fldiv@b+3
 19036  106A  3000               	movlw	0
 19037  106B  00D4               	movwf	___fldiv@b+2
 19038  106C  3000               	movlw	0
 19039  106D  00D3               	movwf	___fldiv@b+1
 19040  106E  3000               	movlw	0
 19041  106F  00D2               	movwf	___fldiv@b
 19042  1070                     l3850:	
 19043  1070  17D4               	bsf	___fldiv@b+2,7
 19044  1071  01D5               	clrf	___fldiv@b+3
 19045  1072  287B               	goto	l3856
 19046  1073                     l3854:	
 19047  1073  3000               	movlw	0
 19048  1074  00D5               	movwf	___fldiv@b+3
 19049  1075  3000               	movlw	0
 19050  1076  00D4               	movwf	___fldiv@b+2
 19051  1077  3000               	movlw	0
 19052  1078  00D3               	movwf	___fldiv@b+1
 19053  1079  3000               	movlw	0
 19054  107A  00D2               	movwf	___fldiv@b
 19055  107B                     l3856:	
 19056  107B  0851               	movf	___fldiv@a+3,w
 19057  107C  3980               	andlw	128
 19058  107D  00D6               	movwf	??___fldiv
 19059  107E  0856               	movf	??___fldiv,w
 19060  107F  06DF               	xorwf	___fldiv@sign,f
 19061  1080  3551               	lslf	___fldiv@a+3,w
 19062  1081  00D6               	movwf	??___fldiv
 19063  1082  0856               	movf	??___fldiv,w
 19064  1083  00E7               	movwf	___fldiv@aexp
 19065  1084  1BD0               	btfsc	___fldiv@a+2,7
 19066  1085  1467               	bsf	___fldiv@aexp,0
 19067  1086  0867               	movf	___fldiv@aexp,w
 19068  1087  1903               	btfsc	3,2
 19069  1088  2897               	goto	l3874
 19070  1089  0A67               	incf	___fldiv@aexp,w
 19071  108A  1D03               	btfss	3,2
 19072  108B  2894               	goto	l3870
 19073  108C  3000               	movlw	0
 19074  108D  00D1               	movwf	___fldiv@a+3
 19075  108E  3000               	movlw	0
 19076  108F  00D0               	movwf	___fldiv@a+2
 19077  1090  3000               	movlw	0
 19078  1091  00CF               	movwf	___fldiv@a+1
 19079  1092  3000               	movlw	0
 19080  1093  00CE               	movwf	___fldiv@a
 19081  1094                     l3870:	
 19082  1094  17D0               	bsf	___fldiv@a+2,7
 19083  1095  01D1               	clrf	___fldiv@a+3
 19084  1096  289F               	goto	l1207
 19085  1097                     l3874:	
 19086  1097  3000               	movlw	0
 19087  1098  00D1               	movwf	___fldiv@a+3
 19088  1099  3000               	movlw	0
 19089  109A  00D0               	movwf	___fldiv@a+2
 19090  109B  3000               	movlw	0
 19091  109C  00CF               	movwf	___fldiv@a+1
 19092  109D  3000               	movlw	0
 19093  109E  00CE               	movwf	___fldiv@a
 19094  109F                     l1207:	
 19095  109F  0851               	movf	___fldiv@a+3,w
 19096  10A0  0450               	iorwf	___fldiv@a+2,w
 19097  10A1  044F               	iorwf	___fldiv@a+1,w
 19098  10A2  044E               	iorwf	___fldiv@a,w
 19099  10A3  1D03               	skipz
 19100  10A4  28BE               	goto	l3884
 19101  10A5  3000               	movlw	0
 19102  10A6  00D5               	movwf	___fldiv@b+3
 19103  10A7  3000               	movlw	0
 19104  10A8  00D4               	movwf	___fldiv@b+2
 19105  10A9  3000               	movlw	0
 19106  10AA  00D3               	movwf	___fldiv@b+1
 19107  10AB  3000               	movlw	0
 19108  10AC  00D2               	movwf	___fldiv@b
 19109  10AD  3080               	movlw	128
 19110  10AE  04D4               	iorwf	___fldiv@b+2,f
 19111  10AF  307F               	movlw	127
 19112  10B0  04D5               	iorwf	___fldiv@b+3,f
 19113  10B1                     L11:	
 19114  10B1  085F               	movf	___fldiv@sign,w
 19115  10B2  00D6               	movwf	??___fldiv
 19116  10B3  0856               	movf	??___fldiv,w
 19117  10B4  04D5               	iorwf	___fldiv@b+3,f
 19118  10B5  0855               	movf	___fldiv@b+3,w
 19119  10B6  00D1               	movwf	?___fldiv+3
 19120  10B7  0854               	movf	___fldiv@b+2,w
 19121  10B8  00D0               	movwf	?___fldiv+2
 19122  10B9  0853               	movf	___fldiv@b+1,w
 19123  10BA  00CF               	movwf	?___fldiv+1
 19124  10BB  0852               	movf	___fldiv@b,w
 19125  10BC  00CE               	movwf	?___fldiv
 19126  10BD  0008               	return
 19127  10BE                     l3884:	
 19128  10BE  0866               	movf	___fldiv@bexp,w
 19129  10BF  1D03               	btfss	3,2
 19130  10C0  28CA               	goto	l3890
 19131  10C1  3000               	movlw	0
 19132  10C2  00D1               	movwf	?___fldiv+3
 19133  10C3  3000               	movlw	0
 19134  10C4  00D0               	movwf	?___fldiv+2
 19135  10C5  3000               	movlw	0
 19136  10C6  00CF               	movwf	?___fldiv+1
 19137  10C7  3000               	movlw	0
 19138  10C8  00CE               	movwf	?___fldiv
 19139  10C9  0008               	return
 19140  10CA                     l3890:	
 19141  10CA  0866               	movf	___fldiv@bexp,w
 19142  10CB  00D6               	movwf	??___fldiv
 19143  10CC  01D7               	clrf	??___fldiv+1
 19144  10CD  0857               	movf	??___fldiv+1,w
 19145  10CE  00D9               	movwf	??___fldiv+3
 19146  10CF  0867               	movf	___fldiv@aexp,w
 19147  10D0  0256               	subwf	??___fldiv,w
 19148  10D1  00D8               	movwf	??___fldiv+2
 19149  10D2  1C03               	skipc
 19150  10D3  03D9               	decf	??___fldiv+3,f
 19151  10D4  0858               	movf	??___fldiv+2,w
 19152  10D5  3E7F               	addlw	127
 19153  10D6  00E0               	movwf	___fldiv@new_exp
 19154  10D7  3000               	movlw	0
 19155  10D8  3D59               	addwfc	??___fldiv+3,w
 19156  10D9  00E1               	movwf	___fldiv@new_exp+1
 19157  10DA  0855               	movf	___fldiv@b+3,w
 19158  10DB  00DE               	movwf	___fldiv@rem+3
 19159  10DC  0854               	movf	___fldiv@b+2,w
 19160  10DD  00DD               	movwf	___fldiv@rem+2
 19161  10DE  0853               	movf	___fldiv@b+1,w
 19162  10DF  00DC               	movwf	___fldiv@rem+1
 19163  10E0  0852               	movf	___fldiv@b,w
 19164  10E1  00DB               	movwf	___fldiv@rem
 19165  10E2  3000               	movlw	0
 19166  10E3  00D5               	movwf	___fldiv@b+3
 19167  10E4  3000               	movlw	0
 19168  10E5  00D4               	movwf	___fldiv@b+2
 19169  10E6  3000               	movlw	0
 19170  10E7  00D3               	movwf	___fldiv@b+1
 19171  10E8  3000               	movlw	0
 19172  10E9  00D2               	movwf	___fldiv@b
 19173  10EA  3000               	movlw	0
 19174  10EB  00E5               	movwf	___fldiv@grs+3
 19175  10EC  3000               	movlw	0
 19176  10ED  00E4               	movwf	___fldiv@grs+2
 19177  10EE  3000               	movlw	0
 19178  10EF  00E3               	movwf	___fldiv@grs+1
 19179  10F0  3000               	movlw	0
 19180  10F1  00E2               	movwf	___fldiv@grs
 19181  10F2  01E7               	clrf	___fldiv@aexp
 19182  10F3                     l3918:	
 19183  10F3  301A               	movlw	26
 19184  10F4  0267               	subwf	___fldiv@aexp,w
 19185  10F5  1803               	btfsc	3,0
 19186  10F6  292F               	goto	l3920
 19187  10F7  0867               	movf	___fldiv@aexp,w
 19188  10F8  1903               	btfsc	3,2
 19189  10F9  2911               	goto	l3910
 19190  10FA  3001               	movlw	1
 19191  10FB                     u4225:	
 19192  10FB  35DB               	lslf	___fldiv@rem,f
 19193  10FC  0DDC               	rlf	___fldiv@rem+1,f
 19194  10FD  0DDD               	rlf	___fldiv@rem+2,f
 19195  10FE  0DDE               	rlf	___fldiv@rem+3,f
 19196  10FF  0B89               	decfsz	9,f
 19197  1100  28FB               	goto	u4225
 19198  1101  3001               	movlw	1
 19199  1102                     u4235:	
 19200  1102  35D2               	lslf	___fldiv@b,f
 19201  1103  0DD3               	rlf	___fldiv@b+1,f
 19202  1104  0DD4               	rlf	___fldiv@b+2,f
 19203  1105  0DD5               	rlf	___fldiv@b+3,f
 19204  1106  0B89               	decfsz	9,f
 19205  1107  2902               	goto	u4235
 19206  1108  1BE5               	btfsc	___fldiv@grs+3,7
 19207  1109  1452               	bsf	___fldiv@b,0
 19208  110A  3001               	movlw	1
 19209  110B                     u4255:	
 19210  110B  35E2               	lslf	___fldiv@grs,f
 19211  110C  0DE3               	rlf	___fldiv@grs+1,f
 19212  110D  0DE4               	rlf	___fldiv@grs+2,f
 19213  110E  0DE5               	rlf	___fldiv@grs+3,f
 19214  110F  0B89               	decfsz	9,f
 19215  1110  290B               	goto	u4255
 19216  1111                     l3910:	
 19217  1111  0851               	movf	___fldiv@a+3,w
 19218  1112  025E               	subwf	___fldiv@rem+3,w
 19219  1113  1D03               	skipz
 19220  1114  291F               	goto	u4265
 19221  1115  0850               	movf	___fldiv@a+2,w
 19222  1116  025D               	subwf	___fldiv@rem+2,w
 19223  1117  1D03               	skipz
 19224  1118  291F               	goto	u4265
 19225  1119  084F               	movf	___fldiv@a+1,w
 19226  111A  025C               	subwf	___fldiv@rem+1,w
 19227  111B  1D03               	skipz
 19228  111C  291F               	goto	u4265
 19229  111D  084E               	movf	___fldiv@a,w
 19230  111E  025B               	subwf	___fldiv@rem,w
 19231  111F                     u4265:	
 19232  111F  1C03               	skipc
 19233  1120  292A               	goto	l3916
 19234  1121  1765               	bsf	___fldiv@grs+3,6
 19235  1122  084E               	movf	___fldiv@a,w
 19236  1123  02DB               	subwf	___fldiv@rem,f
 19237  1124  084F               	movf	___fldiv@a+1,w
 19238  1125  3BDC               	subwfb	___fldiv@rem+1,f
 19239  1126  0850               	movf	___fldiv@a+2,w
 19240  1127  3BDD               	subwfb	___fldiv@rem+2,f
 19241  1128  0851               	movf	___fldiv@a+3,w
 19242  1129  3BDE               	subwfb	___fldiv@rem+3,f
 19243  112A                     l3916:	
 19244  112A  3001               	movlw	1
 19245  112B  00D6               	movwf	??___fldiv
 19246  112C  0856               	movf	??___fldiv,w
 19247  112D  07E7               	addwf	___fldiv@aexp,f
 19248  112E  28F3               	goto	l3918
 19249  112F                     l3920:	
 19250  112F  085E               	movf	___fldiv@rem+3,w
 19251  1130  045D               	iorwf	___fldiv@rem+2,w
 19252  1131  045C               	iorwf	___fldiv@rem+1,w
 19253  1132  045B               	iorwf	___fldiv@rem,w
 19254  1133  1D03               	btfss	3,2
 19255  1134  1462               	bsf	___fldiv@grs,0
 19256  1135                     l3934:	
 19257  1135  1BD4               	btfsc	___fldiv@b+2,7
 19258  1136  294C               	goto	l3936
 19259  1137  3001               	movlw	1
 19260  1138                     u4295:	
 19261  1138  35D2               	lslf	___fldiv@b,f
 19262  1139  0DD3               	rlf	___fldiv@b+1,f
 19263  113A  0DD4               	rlf	___fldiv@b+2,f
 19264  113B  0DD5               	rlf	___fldiv@b+3,f
 19265  113C  0B89               	decfsz	9,f
 19266  113D  2938               	goto	u4295
 19267  113E  1BE5               	btfsc	___fldiv@grs+3,7
 19268  113F  1452               	bsf	___fldiv@b,0
 19269  1140  3001               	movlw	1
 19270  1141                     u4315:	
 19271  1141  35E2               	lslf	___fldiv@grs,f
 19272  1142  0DE3               	rlf	___fldiv@grs+1,f
 19273  1143  0DE4               	rlf	___fldiv@grs+2,f
 19274  1144  0DE5               	rlf	___fldiv@grs+3,f
 19275  1145  0B89               	decfsz	9,f
 19276  1146  2941               	goto	u4315
 19277  1147  30FF               	movlw	255
 19278  1148  07E0               	addwf	___fldiv@new_exp,f
 19279  1149  30FF               	movlw	255
 19280  114A  3DE1               	addwfc	___fldiv@new_exp+1,f
 19281  114B  2935               	goto	l3934
 19282  114C                     l3936:	
 19283  114C  01E7               	clrf	___fldiv@aexp
 19284  114D  1FE5               	btfss	___fldiv@grs+3,7
 19285  114E  2965               	goto	l3946
 19286  114F  30FF               	movlw	255
 19287  1150  0562               	andwf	___fldiv@grs,w
 19288  1151  00D6               	movwf	??___fldiv
 19289  1152  30FF               	movlw	255
 19290  1153  0563               	andwf	___fldiv@grs+1,w
 19291  1154  00D7               	movwf	??___fldiv+1
 19292  1155  30FF               	movlw	255
 19293  1156  0564               	andwf	___fldiv@grs+2,w
 19294  1157  00D8               	movwf	??___fldiv+2
 19295  1158  307F               	movlw	127
 19296  1159  0565               	andwf	___fldiv@grs+3,w
 19297  115A  00D9               	movwf	??___fldiv+3
 19298  115B  0859               	movf	??___fldiv+3,w
 19299  115C  0458               	iorwf	??___fldiv+2,w
 19300  115D  0457               	iorwf	??___fldiv+1,w
 19301  115E  0456               	iorwf	??___fldiv,w
 19302  115F  1903               	skipnz
 19303  1160  1852               	btfsc	___fldiv@b,0
 19304  1161  2963               	goto	l3942
 19305  1162  2965               	goto	l3946
 19306  1163                     l3942:	
 19307  1163  01E7               	clrf	___fldiv@aexp
 19308  1164  0AE7               	incf	___fldiv@aexp,f
 19309  1165                     l3946:	
 19310  1165  0867               	movf	___fldiv@aexp,w
 19311  1166  1903               	btfsc	3,2
 19312  1167  298E               	goto	l3956
 19313  1168  3001               	movlw	1
 19314  1169  07D2               	addwf	___fldiv@b,f
 19315  116A  3000               	movlw	0
 19316  116B  3DD3               	addwfc	___fldiv@b+1,f
 19317  116C  3000               	movlw	0
 19318  116D  3DD4               	addwfc	___fldiv@b+2,f
 19319  116E  3000               	movlw	0
 19320  116F  3DD5               	addwfc	___fldiv@b+3,f
 19321  1170  1C55               	btfss	___fldiv@b+3,0
 19322  1171  298E               	goto	l3956
 19323  1172  0852               	movf	___fldiv@b,w
 19324  1173  00D6               	movwf	??___fldiv
 19325  1174  0853               	movf	___fldiv@b+1,w
 19326  1175  00D7               	movwf	??___fldiv+1
 19327  1176  0854               	movf	___fldiv@b+2,w
 19328  1177  00D8               	movwf	??___fldiv+2
 19329  1178  0855               	movf	___fldiv@b+3,w
 19330  1179  00D9               	movwf	??___fldiv+3
 19331  117A  3001               	movlw	1
 19332  117B  00DA               	movwf	??___fldiv+4
 19333  117C                     u4385:	
 19334  117C  37D9               	asrf	??___fldiv+3,f
 19335  117D  0CD8               	rrf	??___fldiv+2,f
 19336  117E  0CD7               	rrf	??___fldiv+1,f
 19337  117F  0CD6               	rrf	??___fldiv,f
 19338  1180  0BDA               	decfsz	??___fldiv+4,f
 19339  1181  297C               	goto	u4385
 19340  1182  0859               	movf	??___fldiv+3,w
 19341  1183  00D5               	movwf	___fldiv@b+3
 19342  1184  0858               	movf	??___fldiv+2,w
 19343  1185  00D4               	movwf	___fldiv@b+2
 19344  1186  0857               	movf	??___fldiv+1,w
 19345  1187  00D3               	movwf	___fldiv@b+1
 19346  1188  0856               	movf	??___fldiv,w
 19347  1189  00D2               	movwf	___fldiv@b
 19348  118A  3001               	movlw	1
 19349  118B  07E0               	addwf	___fldiv@new_exp,f
 19350  118C  3000               	movlw	0
 19351  118D  3DE1               	addwfc	___fldiv@new_exp+1,f
 19352  118E                     l3956:	
 19353  118E  0861               	movf	___fldiv@new_exp+1,w
 19354  118F  3A80               	xorlw	128
 19355  1190  00D6               	movwf	??___fldiv
 19356  1191  3080               	movlw	128
 19357  1192  0256               	subwf	??___fldiv,w
 19358  1193  1D03               	skipz
 19359  1194  2997               	goto	u4395
 19360  1195  30FF               	movlw	255
 19361  1196  0260               	subwf	___fldiv@new_exp,w
 19362  1197                     u4395:	
 19363  1197  1C03               	skipc
 19364  1198  29A6               	goto	l1228
 19365  1199  30FF               	movlw	255
 19366  119A  0140               	movlb	0	; select bank0
 19367  119B  00E0               	movwf	___fldiv@new_exp
 19368  119C  3000               	movlw	0
 19369  119D  00E1               	movwf	___fldiv@new_exp+1
 19370  119E  3000               	movlw	0
 19371  119F  00D5               	movwf	___fldiv@b+3
 19372  11A0  3000               	movlw	0
 19373  11A1  00D4               	movwf	___fldiv@b+2
 19374  11A2  3000               	movlw	0
 19375  11A3  00D3               	movwf	___fldiv@b+1
 19376  11A4  3000               	movlw	0
 19377  11A5  00D2               	movwf	___fldiv@b
 19378  11A6                     l1228:	
 19379  11A6  0140               	movlb	0	; select bank0
 19380  11A7  0861               	movf	___fldiv@new_exp+1,w
 19381  11A8  3A80               	xorlw	128
 19382  11A9  00D6               	movwf	??___fldiv
 19383  11AA  3080               	movlw	128
 19384  11AB  0256               	subwf	??___fldiv,w
 19385  11AC  1D03               	skipz
 19386  11AD  29B0               	goto	u4405
 19387  11AE  3001               	movlw	1
 19388  11AF  0260               	subwf	___fldiv@new_exp,w
 19389  11B0                     u4405:	
 19390  11B0  1803               	skipnc
 19391  11B1  29BE               	goto	l1229
 19392  11B2  0140               	movlb	0	; select bank0
 19393  11B3  01E0               	clrf	___fldiv@new_exp
 19394  11B4  01E1               	clrf	___fldiv@new_exp+1
 19395  11B5  3000               	movlw	0
 19396  11B6  00D5               	movwf	___fldiv@b+3
 19397  11B7  3000               	movlw	0
 19398  11B8  00D4               	movwf	___fldiv@b+2
 19399  11B9  3000               	movlw	0
 19400  11BA  00D3               	movwf	___fldiv@b+1
 19401  11BB  3000               	movlw	0
 19402  11BC  00D2               	movwf	___fldiv@b
 19403  11BD  01DF               	clrf	___fldiv@sign
 19404  11BE                     l1229:	
 19405  11BE  0140               	movlb	0	; select bank0
 19406  11BF  0860               	movf	___fldiv@new_exp,w
 19407  11C0  00D6               	movwf	??___fldiv
 19408  11C1  0856               	movf	??___fldiv,w
 19409  11C2  00E6               	movwf	___fldiv@bexp
 19410  11C3  1C66               	btfss	___fldiv@bexp,0
 19411  11C4  29C7               	goto	l3970
 19412  11C5  17D4               	bsf	___fldiv@b+2,7
 19413  11C6  29CB               	goto	l1231
 19414  11C7                     l3970:	
 19415  11C7  307F               	movlw	127
 19416  11C8  00D6               	movwf	??___fldiv
 19417  11C9  0856               	movf	??___fldiv,w
 19418  11CA  05D4               	andwf	___fldiv@b+2,f
 19419  11CB                     l1231:	
 19420  11CB  3666               	lsrf	___fldiv@bexp,w
 19421  11CC  00D6               	movwf	??___fldiv
 19422  11CD  0856               	movf	??___fldiv,w
 19423  11CE  00D5               	movwf	___fldiv@b+3
 19424  11CF  28B1               	goto	L11
 19425  11D0                     __end_of___fldiv:	
 19426                           
 19427                           	psect	text59
 19428  2046                     __ptext59:	
 19429 ;; *************** function _OLED_loadSpecialChars *****************
 19430 ;; Defined at:
 19431 ;;		line 177 in file "oled.c"
 19432 ;; Parameters:    Size  Location     Type
 19433 ;;		None
 19434 ;; Auto vars:     Size  Location     Type
 19435 ;;  special        32    8[BANK0 ] unsigned char [32]
 19436 ;;  n               1   40[BANK0 ] unsigned char 
 19437 ;; Return value:  Size  Location     Type
 19438 ;;                  1    wreg      void 
 19439 ;; Registers used:
 19440 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19441 ;; Tracked objects:
 19442 ;;		On entry : 0/0
 19443 ;;		On exit  : 0/0
 19444 ;;		Unchanged: 0/0
 19445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19447 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19449 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19450 ;;Total ram usage:       34 bytes
 19451 ;; Hardware stack levels used:    1
 19452 ;; Hardware stack levels required when called:    7
 19453 ;; This function calls:
 19454 ;;		_OLED_command
 19455 ;;		_OLED_write
 19456 ;; This function is called by:
 19457 ;;		_main
 19458 ;; This function uses a non-reentrant model
 19459 ;;
 19460                           
 19461                           
 19462                           ;psect for function _OLED_loadSpecialChars
 19463  2046                     _OLED_loadSpecialChars:	
 19464                           
 19465                           ;oled.c: 179:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 19466                           
 19467                           ;incstack = 0
 19468                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19469  2046  30A0               	movlw	low OLED_loadSpecialChars@F7973
 19470  2047  0086               	movwf	6
 19471  2048  3001               	movlw	high OLED_loadSpecialChars@F7973
 19472  2049  0087               	movwf	7
 19473  204A  3028               	movlw	low OLED_loadSpecialChars@special
 19474  204B  0084               	movwf	4
 19475  204C  3000               	movlw	high OLED_loadSpecialChars@special
 19476  204D  0085               	movwf	5
 19477  204E  3020               	movlw	32
 19478  204F  0140               	movlb	0	; select bank0
 19479  2050  00A7               	movwf	??_OLED_loadSpecialChars
 19480  2051                     u5720:	
 19481  2051  0016               	moviw fsr1++
 19482  2052  001A               	movwi fsr0++
 19483  2053  0BA7               	decfsz	??_OLED_loadSpecialChars,f
 19484  2054  2851               	goto	u5720
 19485                           
 19486                           ;oled.c: 184:  uint8_t n;;oled.c: 186:  OLED_command(0x40 + 8);
 19487  2055  3048               	movlw	72
 19488  2056  31AF  2718  31A0   	fcall	_OLED_command
 19489                           
 19490                           ;oled.c: 187:  for(n = 0; n < sizeof(special); n++) {
 19491  2059  0140               	movlb	0	; select bank0
 19492  205A  01C8               	clrf	OLED_loadSpecialChars@n
 19493  205B                     l5006:	
 19494                           
 19495                           ;oled.c: 188:   OLED_write(special[n]);
 19496  205B  0848               	movf	OLED_loadSpecialChars@n,w
 19497  205C  3E28               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 19498  205D  0086               	movwf	6
 19499  205E  0187               	clrf	7
 19500  205F  0801               	movf	1,w
 19501  2060  31AF  2736  31A0   	fcall	_OLED_write
 19502                           
 19503                           ;oled.c: 189:  }
 19504  2063  3001               	movlw	1
 19505  2064  0140               	movlb	0	; select bank0
 19506  2065  00A7               	movwf	??_OLED_loadSpecialChars
 19507  2066  0827               	movf	??_OLED_loadSpecialChars,w
 19508  2067  07C8               	addwf	OLED_loadSpecialChars@n,f
 19509  2068  3020               	movlw	32
 19510  2069  0248               	subwf	OLED_loadSpecialChars@n,w
 19511  206A  1803               	btfsc	3,0
 19512  206B  0008               	return
 19513  206C  285B               	goto	l5006
 19514  206D                     __end_of_OLED_loadSpecialChars:	
 19515                           
 19516                           	psect	text60
 19517  2F36                     __ptext60:	
 19518 ;; *************** function _OLED_write *****************
 19519 ;; Defined at:
 19520 ;;		line 79 in file "oled.c"
 19521 ;; Parameters:    Size  Location     Type
 19522 ;;  value           1    wreg     unsigned char 
 19523 ;; Auto vars:     Size  Location     Type
 19524 ;;  value           1    6[BANK0 ] unsigned char 
 19525 ;; Return value:  Size  Location     Type
 19526 ;;                  1    wreg      void 
 19527 ;; Registers used:
 19528 ;;		wreg, status,2, status,0, pclath, cstack
 19529 ;; Tracked objects:
 19530 ;;		On entry : 0/0
 19531 ;;		On exit  : 0/0
 19532 ;;		Unchanged: 0/0
 19533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19537 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19538 ;;Total ram usage:        1 bytes
 19539 ;; Hardware stack levels used:    1
 19540 ;; Hardware stack levels required when called:    6
 19541 ;; This function calls:
 19542 ;;		_OLED_send
 19543 ;;		_OLED_waitForReady
 19544 ;; This function is called by:
 19545 ;;		_OLED_print_xy
 19546 ;;		_OLED_loadSpecialChars
 19547 ;;		_OLED_print
 19548 ;; This function uses a non-reentrant model
 19549 ;;
 19550                           
 19551                           
 19552                           ;psect for function _OLED_write
 19553  2F36                     _OLED_write:	
 19554                           
 19555                           ;incstack = 0
 19556                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 19557                           ;OLED_write@value stored from wreg
 19558  2F36  0140               	movlb	0	; select bank0
 19559  2F37  00A6               	movwf	OLED_write@value
 19560                           
 19561                           ;oled.c: 79: void OLED_write(uint8_t value);oled.c: 80: {;oled.c: 81:  OLED_send(value, 
      +                          1);
 19562  2F38  01A3               	clrf	OLED_send@mode
 19563  2F39  0AA3               	incf	OLED_send@mode,f
 19564  2F3A  0826               	movf	OLED_write@value,w
 19565  2F3B  31AF  27AE  31AF   	fcall	_OLED_send
 19566                           
 19567                           ;oled.c: 82:  OLED_waitForReady();
 19568  2F3E  31AF  27E1         	fcall	_OLED_waitForReady
 19569  2F40  0008               	return
 19570  2F41                     __end_of_OLED_write:	
 19571                           
 19572                           	psect	text61
 19573  26EA                     __ptext61:	
 19574 ;; *************** function _OLED_init *****************
 19575 ;; Defined at:
 19576 ;;		line 85 in file "oled.c"
 19577 ;; Parameters:    Size  Location     Type
 19578 ;;		None
 19579 ;; Auto vars:     Size  Location     Type
 19580 ;;		None
 19581 ;; Return value:  Size  Location     Type
 19582 ;;                  1    wreg      void 
 19583 ;; Registers used:
 19584 ;;		wreg, status,2, status,0, pclath, cstack
 19585 ;; Tracked objects:
 19586 ;;		On entry : 0/0
 19587 ;;		On exit  : 0/0
 19588 ;;		Unchanged: 0/0
 19589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19593 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19594 ;;Total ram usage:        1 bytes
 19595 ;; Hardware stack levels used:    1
 19596 ;; Hardware stack levels required when called:    7
 19597 ;; This function calls:
 19598 ;;		_OLED_command
 19599 ;;		_OLED_write4bits
 19600 ;; This function is called by:
 19601 ;;		_main
 19602 ;; This function uses a non-reentrant model
 19603 ;;
 19604                           
 19605                           
 19606                           ;psect for function _OLED_init
 19607  26EA                     _OLED_init:	
 19608                           
 19609                           ;oled.c: 87:  LATBbits.LATB4 = 0;
 19610                           
 19611                           ;incstack = 0
 19612                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 19613  26EA  0140               	movlb	0	; select bank0
 19614  26EB  1219               	bcf	25,4	;volatile
 19615                           
 19616                           ;oled.c: 88:  LATBbits.LATB2 = 0;
 19617  26EC  1119               	bcf	25,2	;volatile
 19618                           
 19619                           ;oled.c: 89:  LATBbits.LATB3 = 0;
 19620  26ED  1199               	bcf	25,3	;volatile
 19621                           
 19622                           ;oled.c: 91:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 19623  26EE  3041               	movlw	65
 19624  26EF  0140               	movlb	0	; select bank0
 19625  26F0  00A7               	movwf	??_OLED_init
 19626  26F1  30EE               	movlw	238
 19627  26F2                     u6967:	
 19628  26F2  0B89               	decfsz	9,f
 19629  26F3  2EF2               	goto	u6967
 19630  26F4  0BA7               	decfsz	??_OLED_init,f
 19631  26F5  2EF2               	goto	u6967
 19632  26F6  0000               	nop
 19633                           
 19634                           ;oled.c: 95:  LATBbits.LATB1 = 0;
 19635  26F7  0140               	movlb	0	; select bank0
 19636  26F8  1099               	bcf	25,1	;volatile
 19637                           
 19638                           ;oled.c: 96:  LATBbits.LATB0 = 0;
 19639  26F9  1019               	bcf	25,0	;volatile
 19640                           
 19641                           ;oled.c: 97:  LATCbits.LATC5 = 0;
 19642  26FA  129A               	bcf	26,5	;volatile
 19643                           
 19644                           ;oled.c: 98:  LATCbits.LATC4 = 0;
 19645  26FB  121A               	bcf	26,4	;volatile
 19646                           
 19647                           ;oled.c: 109:  OLED_write4bits(0x03);
 19648  26FC  3003               	movlw	3
 19649  26FD  31A1  21A0  31A6   	fcall	_OLED_write4bits
 19650                           
 19651                           ;oled.c: 110:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19652  2700  3007               	movlw	7
 19653  2701  0140               	movlb	0	; select bank0
 19654  2702  00A7               	movwf	??_OLED_init
 19655  2703  307D               	movlw	125
 19656  2704                     u6977:	
 19657  2704  0B89               	decfsz	9,f
 19658  2705  2F04               	goto	u6977
 19659  2706  0BA7               	decfsz	??_OLED_init,f
 19660  2707  2F04               	goto	u6977
 19661                           
 19662                           ;oled.c: 111:  OLED_write4bits(0x08);
 19663  2708  3008               	movlw	8
 19664  2709  31A1  21A0  31A6   	fcall	_OLED_write4bits
 19665                           
 19666                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19667  270C  3007               	movlw	7
 19668  270D  0140               	movlb	0	; select bank0
 19669  270E  00A7               	movwf	??_OLED_init
 19670  270F  307D               	movlw	125
 19671  2710                     u6987:	
 19672  2710  0B89               	decfsz	9,f
 19673  2711  2F10               	goto	u6987
 19674  2712  0BA7               	decfsz	??_OLED_init,f
 19675  2713  2F10               	goto	u6987
 19676                           
 19677                           ;oled.c: 114:  OLED_write4bits(0x02);
 19678  2714  3002               	movlw	2
 19679  2715  31A1  21A0  31A6   	fcall	_OLED_write4bits
 19680                           
 19681                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19682  2718  3007               	movlw	7
 19683  2719  0140               	movlb	0	; select bank0
 19684  271A  00A7               	movwf	??_OLED_init
 19685  271B  307D               	movlw	125
 19686  271C                     u6997:	
 19687  271C  0B89               	decfsz	9,f
 19688  271D  2F1C               	goto	u6997
 19689  271E  0BA7               	decfsz	??_OLED_init,f
 19690  271F  2F1C               	goto	u6997
 19691                           
 19692                           ;oled.c: 116:  OLED_write4bits(0x02);
 19693  2720  3002               	movlw	2
 19694  2721  31A1  21A0  31A6   	fcall	_OLED_write4bits
 19695                           
 19696                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19697  2724  3007               	movlw	7
 19698  2725  0140               	movlb	0	; select bank0
 19699  2726  00A7               	movwf	??_OLED_init
 19700  2727  307D               	movlw	125
 19701  2728                     u7007:	
 19702  2728  0B89               	decfsz	9,f
 19703  2729  2F28               	goto	u7007
 19704  272A  0BA7               	decfsz	??_OLED_init,f
 19705  272B  2F28               	goto	u7007
 19706                           
 19707                           ;oled.c: 118:  OLED_write4bits(0x08);
 19708  272C  3008               	movlw	8
 19709  272D  31A1  21A0  31A6   	fcall	_OLED_write4bits
 19710                           
 19711                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19712  2730  3007               	movlw	7
 19713  2731  0140               	movlb	0	; select bank0
 19714  2732  00A7               	movwf	??_OLED_init
 19715  2733  307D               	movlw	125
 19716  2734                     u7017:	
 19717  2734  0B89               	decfsz	9,f
 19718  2735  2F34               	goto	u7017
 19719  2736  0BA7               	decfsz	??_OLED_init,f
 19720  2737  2F34               	goto	u7017
 19721                           
 19722                           ;oled.c: 121:  OLED_command(0x08);
 19723  2738  3008               	movlw	8
 19724  2739  31AF  2718  31A6   	fcall	_OLED_command
 19725                           
 19726                           ;oled.c: 122:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19727  273C  3007               	movlw	7
 19728  273D  0140               	movlb	0	; select bank0
 19729  273E  00A7               	movwf	??_OLED_init
 19730  273F  307D               	movlw	125
 19731  2740                     u7027:	
 19732  2740  0B89               	decfsz	9,f
 19733  2741  2F40               	goto	u7027
 19734  2742  0BA7               	decfsz	??_OLED_init,f
 19735  2743  2F40               	goto	u7027
 19736                           
 19737                           ;oled.c: 123:  OLED_command(0x01);
 19738  2744  3001               	movlw	1
 19739  2745  31AF  2718  31A6   	fcall	_OLED_command
 19740                           
 19741                           ;oled.c: 124:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19742  2748  3007               	movlw	7
 19743  2749  0140               	movlb	0	; select bank0
 19744  274A  00A7               	movwf	??_OLED_init
 19745  274B  307D               	movlw	125
 19746  274C                     u7037:	
 19747  274C  0B89               	decfsz	9,f
 19748  274D  2F4C               	goto	u7037
 19749  274E  0BA7               	decfsz	??_OLED_init,f
 19750  274F  2F4C               	goto	u7037
 19751                           
 19752                           ;oled.c: 125:  OLED_command(0x06);
 19753  2750  3006               	movlw	6
 19754  2751  31AF  2718  31A6   	fcall	_OLED_command
 19755                           
 19756                           ;oled.c: 126:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19757  2754  3007               	movlw	7
 19758  2755  0140               	movlb	0	; select bank0
 19759  2756  00A7               	movwf	??_OLED_init
 19760  2757  307D               	movlw	125
 19761  2758                     u7047:	
 19762  2758  0B89               	decfsz	9,f
 19763  2759  2F58               	goto	u7047
 19764  275A  0BA7               	decfsz	??_OLED_init,f
 19765  275B  2F58               	goto	u7047
 19766                           
 19767                           ;oled.c: 127:  OLED_command(0x02);
 19768  275C  3002               	movlw	2
 19769  275D  31AF  2718  31A6   	fcall	_OLED_command
 19770                           
 19771                           ;oled.c: 128:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19772  2760  3007               	movlw	7
 19773  2761  0140               	movlb	0	; select bank0
 19774  2762  00A7               	movwf	??_OLED_init
 19775  2763  307D               	movlw	125
 19776  2764                     u7057:	
 19777  2764  0B89               	decfsz	9,f
 19778  2765  2F64               	goto	u7057
 19779  2766  0BA7               	decfsz	??_OLED_init,f
 19780  2767  2F64               	goto	u7057
 19781                           
 19782                           ;oled.c: 129:  OLED_command(0x0C);
 19783  2768  300C               	movlw	12
 19784  2769  31AF  2718  31A6   	fcall	_OLED_command
 19785                           
 19786                           ;oled.c: 130:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19787  276C  3007               	movlw	7
 19788  276D  0140               	movlb	0	; select bank0
 19789  276E  00A7               	movwf	??_OLED_init
 19790  276F  307D               	movlw	125
 19791  2770                     u7067:	
 19792  2770  0B89               	decfsz	9,f
 19793  2771  2F70               	goto	u7067
 19794  2772  0BA7               	decfsz	??_OLED_init,f
 19795  2773  2F70               	goto	u7067
 19796  2774  0008               	return
 19797  2775                     __end_of_OLED_init:	
 19798                           
 19799                           	psect	text62
 19800  2F18                     __ptext62:	
 19801 ;; *************** function _OLED_command *****************
 19802 ;; Defined at:
 19803 ;;		line 73 in file "oled.c"
 19804 ;; Parameters:    Size  Location     Type
 19805 ;;  value           1    wreg     unsigned char 
 19806 ;; Auto vars:     Size  Location     Type
 19807 ;;  value           1    6[BANK0 ] unsigned char 
 19808 ;; Return value:  Size  Location     Type
 19809 ;;                  1    wreg      void 
 19810 ;; Registers used:
 19811 ;;		wreg, status,2, status,0, pclath, cstack
 19812 ;; Tracked objects:
 19813 ;;		On entry : 0/0
 19814 ;;		On exit  : 0/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19820 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19821 ;;Total ram usage:        1 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; Hardware stack levels required when called:    6
 19824 ;; This function calls:
 19825 ;;		_OLED_send
 19826 ;;		_OLED_waitForReady
 19827 ;; This function is called by:
 19828 ;;		_OLED_Off
 19829 ;;		_OLED_init
 19830 ;;		_OLED_scrollDisplayLeft
 19831 ;;		_OLED_scrollDisplayRight
 19832 ;;		_OLED_print_xy
 19833 ;;		_OLED_returnHome
 19834 ;;		_OLED_clearDisplay
 19835 ;;		_OLED_loadSpecialChars
 19836 ;;		_returnToPage
 19837 ;;		_OLED_setCursor
 19838 ;; This function uses a non-reentrant model
 19839 ;;
 19840                           
 19841                           
 19842                           ;psect for function _OLED_command
 19843  2F18                     _OLED_command:	
 19844                           
 19845                           ;incstack = 0
 19846                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 19847                           ;OLED_command@value stored from wreg
 19848  2F18  0140               	movlb	0	; select bank0
 19849  2F19  00A6               	movwf	OLED_command@value
 19850                           
 19851                           ;oled.c: 73: void OLED_command(uint8_t value);oled.c: 74: {;oled.c: 75:  OLED_send(value
      +                          , 0);
 19852  2F1A  01A3               	clrf	OLED_send@mode
 19853  2F1B  0826               	movf	OLED_command@value,w
 19854  2F1C  31AF  27AE  31AF   	fcall	_OLED_send
 19855                           
 19856                           ;oled.c: 76:  OLED_waitForReady();
 19857  2F1F  31AF  27E1         	fcall	_OLED_waitForReady
 19858  2F21  0008               	return
 19859  2F22                     __end_of_OLED_command:	
 19860                           
 19861                           	psect	text63
 19862  2FE1                     __ptext63:	
 19863 ;; *************** function _OLED_waitForReady *****************
 19864 ;; Defined at:
 19865 ;;		line 48 in file "oled.c"
 19866 ;; Parameters:    Size  Location     Type
 19867 ;;		None
 19868 ;; Auto vars:     Size  Location     Type
 19869 ;;  busy            1    0[BANK0 ] unsigned char 
 19870 ;; Return value:  Size  Location     Type
 19871 ;;                  1    wreg      void 
 19872 ;; Registers used:
 19873 ;;		wreg, status,2, status,0, pclath, cstack
 19874 ;; Tracked objects:
 19875 ;;		On entry : 0/0
 19876 ;;		On exit  : 0/0
 19877 ;;		Unchanged: 0/0
 19878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19880 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19882 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19883 ;;Total ram usage:        1 bytes
 19884 ;; Hardware stack levels used:    1
 19885 ;; Hardware stack levels required when called:    4
 19886 ;; This function calls:
 19887 ;;		_OLED_pulseEnable
 19888 ;; This function is called by:
 19889 ;;		_OLED_command
 19890 ;;		_OLED_write
 19891 ;; This function uses a non-reentrant model
 19892 ;;
 19893                           
 19894                           
 19895                           ;psect for function _OLED_waitForReady
 19896  2FE1                     _OLED_waitForReady:	
 19897                           
 19898                           ;oled.c: 52:  TRISCbits.TRISC4 = 1;
 19899                           
 19900                           ;incstack = 0
 19901                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0+pclath+cstack]
 19902  2FE1  0140               	movlb	0	; select bank0
 19903  2FE2  1614               	bsf	20,4	;volatile
 19904                           
 19905                           ;oled.c: 53:  LATBbits.LATB4 = 0;
 19906  2FE3  1219               	bcf	25,4	;volatile
 19907                           
 19908                           ;oled.c: 54:  LATBbits.LATB3 = 1;
 19909  2FE4  1599               	bsf	25,3	;volatile
 19910  2FE5                     l182:	
 19911                           ;oled.c: 56:  do {
 19912                           
 19913                           
 19914                           ;oled.c: 57:   LATBbits.LATB2 = 0;
 19915  2FE5  1119               	bcf	25,2	;volatile
 19916                           
 19917                           ;oled.c: 58:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 19918  2FE6  3003               	movlw	3
 19919  2FE7                     u7077:	
 19920  2FE7  0B89               	decfsz	9,f
 19921  2FE8  2FE7               	goto	u7077
 19922  2FE9  0000               	nop
 19923                           
 19924                           ;oled.c: 59:   LATBbits.LATB2 = 1;
 19925  2FEA  0140               	movlb	0	; select bank0
 19926  2FEB  1519               	bsf	25,2	;volatile
 19927                           
 19928                           ;oled.c: 61:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 19929  2FEC  3003               	movlw	3
 19930  2FED                     u7087:	
 19931  2FED  0B89               	decfsz	9,f
 19932  2FEE  2FED               	goto	u7087
 19933  2FEF  0000               	nop
 19934                           
 19935                           ;oled.c: 62:   busy = PORTCbits.RC4;
 19936  2FF0  3000               	movlw	0
 19937  2FF1  0140               	movlb	0	; select bank0
 19938  2FF2  1A0E               	btfsc	14,4	;volatile
 19939  2FF3  3001               	movlw	1
 19940  2FF4  00A0               	movwf	OLED_waitForReady@busy
 19941                           
 19942                           ;oled.c: 64:   LATBbits.LATB2 = 0;
 19943  2FF5  1119               	bcf	25,2	;volatile
 19944                           
 19945                           ;oled.c: 66:   OLED_pulseEnable();
 19946  2FF6  31AF  2706  31AF   	fcall	_OLED_pulseEnable
 19947                           
 19948                           ;oled.c: 67:  } while (busy);
 19949  2FF9  0140               	movlb	0	; select bank0
 19950  2FFA  0820               	movf	OLED_waitForReady@busy,w
 19951  2FFB  1D03               	btfss	3,2
 19952  2FFC  2FE5               	goto	l182
 19953                           
 19954                           ;oled.c: 69:  TRISCbits.TRISC4 = 0;
 19955  2FFD  1214               	bcf	20,4	;volatile
 19956                           
 19957                           ;oled.c: 70:  LATBbits.LATB3 = 0;
 19958  2FFE  1199               	bcf	25,3	;volatile
 19959  2FFF  0008               	return
 19960  3000                     __end_of_OLED_waitForReady:	
 19961                           
 19962                           	psect	text64
 19963  2FAE                     __ptext64:	
 19964 ;; *************** function _OLED_send *****************
 19965 ;; Defined at:
 19966 ;;		line 37 in file "oled.c"
 19967 ;; Parameters:    Size  Location     Type
 19968 ;;  value           1    wreg     unsigned char 
 19969 ;;  mode            1    3[BANK0 ] unsigned char 
 19970 ;; Auto vars:     Size  Location     Type
 19971 ;;  value           1    5[BANK0 ] unsigned char 
 19972 ;; Return value:  Size  Location     Type
 19973 ;;                  1    wreg      void 
 19974 ;; Registers used:
 19975 ;;		wreg, status,2, status,0, pclath, cstack
 19976 ;; Tracked objects:
 19977 ;;		On entry : 0/0
 19978 ;;		On exit  : 0/0
 19979 ;;		Unchanged: 0/0
 19980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19981 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19984 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19985 ;;Total ram usage:        3 bytes
 19986 ;; Hardware stack levels used:    1
 19987 ;; Hardware stack levels required when called:    5
 19988 ;; This function calls:
 19989 ;;		_OLED_write4bits
 19990 ;; This function is called by:
 19991 ;;		_OLED_command
 19992 ;;		_OLED_write
 19993 ;; This function uses a non-reentrant model
 19994 ;;
 19995                           
 19996                           
 19997                           ;psect for function _OLED_send
 19998  2FAE                     _OLED_send:	
 19999                           
 20000                           ;incstack = 0
 20001                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 20002                           ;OLED_send@value stored from wreg
 20003  2FAE  0140               	movlb	0	; select bank0
 20004  2FAF  00A5               	movwf	OLED_send@value
 20005                           
 20006                           ;oled.c: 37: void OLED_send(uint8_t value, uint8_t mode);oled.c: 38: {;oled.c: 39:  LATB
      +                          bits.LATB4 = mode;
 20007  2FB0  0C23               	rrf	OLED_send@mode,w
 20008  2FB1  1C03               	skipc
 20009  2FB2  1219               	bcf	25,4	;volatile
 20010  2FB3  1803               	skipnc
 20011  2FB4  1619               	bsf	25,4	;volatile
 20012                           
 20013                           ;oled.c: 40:  LATBbits.LATB3 = 0;
 20014  2FB5  1199               	bcf	25,3	;volatile
 20015                           
 20016                           ;oled.c: 42:  OLED_write4bits(value >> 4);
 20017  2FB6  0825               	movf	OLED_send@value,w
 20018  2FB7  00A4               	movwf	??_OLED_send
 20019  2FB8  3004               	movlw	4
 20020  2FB9                     u3275:	
 20021  2FB9  36A4               	lsrf	??_OLED_send,f
 20022  2FBA  0B89               	decfsz	9,f
 20023  2FBB  2FB9               	goto	u3275
 20024  2FBC  0824               	movf	??_OLED_send,w
 20025  2FBD  31A1  21A0  31AF   	fcall	_OLED_write4bits
 20026                           
 20027                           ;oled.c: 43:  OLED_write4bits(value);
 20028  2FC0  0140               	movlb	0	; select bank0
 20029  2FC1  0825               	movf	OLED_send@value,w
 20030  2FC2  31A1  21A0         	fcall	_OLED_write4bits
 20031  2FC4  0008               	return
 20032  2FC5                     __end_of_OLED_send:	
 20033                           
 20034                           	psect	text65
 20035  21A0                     __ptext65:	
 20036 ;; *************** function _OLED_write4bits *****************
 20037 ;; Defined at:
 20038 ;;		line 26 in file "oled.c"
 20039 ;; Parameters:    Size  Location     Type
 20040 ;;  value           1    wreg     unsigned char 
 20041 ;; Auto vars:     Size  Location     Type
 20042 ;;  value           1    2[BANK0 ] unsigned char 
 20043 ;; Return value:  Size  Location     Type
 20044 ;;                  1    wreg      void 
 20045 ;; Registers used:
 20046 ;;		wreg, status,2, status,0, pclath, cstack
 20047 ;; Tracked objects:
 20048 ;;		On entry : 0/0
 20049 ;;		On exit  : 0/0
 20050 ;;		Unchanged: 0/0
 20051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20054 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20055 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20056 ;;Total ram usage:        3 bytes
 20057 ;; Hardware stack levels used:    1
 20058 ;; Hardware stack levels required when called:    4
 20059 ;; This function calls:
 20060 ;;		_OLED_pulseEnable
 20061 ;; This function is called by:
 20062 ;;		_OLED_send
 20063 ;;		_OLED_init
 20064 ;; This function uses a non-reentrant model
 20065 ;;
 20066                           
 20067                           
 20068                           ;psect for function _OLED_write4bits
 20069  21A0                     _OLED_write4bits:	
 20070                           
 20071                           ;incstack = 0
 20072                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0+pclath+cstack]
 20073                           ;OLED_write4bits@value stored from wreg
 20074  21A0  0140               	movlb	0	; select bank0
 20075  21A1  00A2               	movwf	OLED_write4bits@value
 20076                           
 20077                           ;oled.c: 26: void OLED_write4bits(uint8_t value);oled.c: 27: {;oled.c: 28:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 20078  21A2  0822               	movf	OLED_write4bits@value,w
 20079  21A3  3901               	andlw	1
 20080  21A4  00A0               	movwf	??_OLED_write4bits
 20081  21A5  0DA0               	rlf	??_OLED_write4bits,f
 20082  21A6  0819               	movf	25,w	;volatile
 20083  21A7  0620               	xorwf	??_OLED_write4bits,w
 20084  21A8  39FD               	andlw	-3
 20085  21A9  0620               	xorwf	??_OLED_write4bits,w
 20086  21AA  0099               	movwf	25	;volatile
 20087                           
 20088                           ;oled.c: 29:  LATBbits.LATB0 = (value >> 1) & 0x01;
 20089  21AB  0822               	movf	OLED_write4bits@value,w
 20090  21AC  00A0               	movwf	??_OLED_write4bits
 20091  21AD  3001               	movlw	1
 20092  21AE                     u3245:	
 20093  21AE  36A0               	lsrf	??_OLED_write4bits,f
 20094  21AF  0B89               	decfsz	9,f
 20095  21B0  29AE               	goto	u3245
 20096  21B1  3001               	movlw	1
 20097  21B2  0520               	andwf	??_OLED_write4bits,w
 20098  21B3  00A1               	movwf	??_OLED_write4bits+1
 20099  21B4  0819               	movf	25,w	;volatile
 20100  21B5  0621               	xorwf	??_OLED_write4bits+1,w
 20101  21B6  39FE               	andlw	-2
 20102  21B7  0621               	xorwf	??_OLED_write4bits+1,w
 20103  21B8  0099               	movwf	25	;volatile
 20104                           
 20105                           ;oled.c: 30:  LATCbits.LATC5 = (value >> 2) & 0x01;
 20106  21B9  0822               	movf	OLED_write4bits@value,w
 20107  21BA  00A0               	movwf	??_OLED_write4bits
 20108  21BB  3002               	movlw	2
 20109  21BC                     u3255:	
 20110  21BC  36A0               	lsrf	??_OLED_write4bits,f
 20111  21BD  0B89               	decfsz	9,f
 20112  21BE  29BC               	goto	u3255
 20113  21BF  0820               	movf	??_OLED_write4bits,w
 20114  21C0  3901               	andlw	1
 20115  21C1  00A1               	movwf	??_OLED_write4bits+1
 20116  21C2  0EA1               	swapf	??_OLED_write4bits+1,f
 20117  21C3  0DA1               	rlf	??_OLED_write4bits+1,f
 20118  21C4  081A               	movf	26,w	;volatile
 20119  21C5  0621               	xorwf	??_OLED_write4bits+1,w
 20120  21C6  39DF               	andlw	-33
 20121  21C7  0621               	xorwf	??_OLED_write4bits+1,w
 20122  21C8  009A               	movwf	26	;volatile
 20123                           
 20124                           ;oled.c: 31:  LATCbits.LATC4 = (value >> 3) & 0x01;
 20125  21C9  0822               	movf	OLED_write4bits@value,w
 20126  21CA  00A0               	movwf	??_OLED_write4bits
 20127  21CB  3003               	movlw	3
 20128  21CC                     u3265:	
 20129  21CC  36A0               	lsrf	??_OLED_write4bits,f
 20130  21CD  0B89               	decfsz	9,f
 20131  21CE  29CC               	goto	u3265
 20132  21CF  0820               	movf	??_OLED_write4bits,w
 20133  21D0  3901               	andlw	1
 20134  21D1  00A1               	movwf	??_OLED_write4bits+1
 20135  21D2  0EA1               	swapf	??_OLED_write4bits+1,f
 20136  21D3  081A               	movf	26,w	;volatile
 20137  21D4  0621               	xorwf	??_OLED_write4bits+1,w
 20138  21D5  39EF               	andlw	-17
 20139  21D6  0621               	xorwf	??_OLED_write4bits+1,w
 20140  21D7  009A               	movwf	26	;volatile
 20141                           
 20142                           ;oled.c: 33:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 20143  21D8  3010               	movlw	16
 20144  21D9                     u7097:	
 20145  21D9  0B89               	decfsz	9,f
 20146  21DA  29D9               	goto	u7097
 20147  21DB  3200               	nop2
 20148                           
 20149                           ;oled.c: 34:  OLED_pulseEnable();
 20150  21DC  31AF  2706         	fcall	_OLED_pulseEnable
 20151  21DE  0008               	return
 20152  21DF                     __end_of_OLED_write4bits:	
 20153                           
 20154                           	psect	text66
 20155  2F06                     __ptext66:	
 20156 ;; *************** function _OLED_pulseEnable *****************
 20157 ;; Defined at:
 20158 ;;		line 19 in file "oled.c"
 20159 ;; Parameters:    Size  Location     Type
 20160 ;;		None
 20161 ;; Auto vars:     Size  Location     Type
 20162 ;;		None
 20163 ;; Return value:  Size  Location     Type
 20164 ;;                  1    wreg      void 
 20165 ;; Registers used:
 20166 ;;		wreg
 20167 ;; Tracked objects:
 20168 ;;		On entry : 0/0
 20169 ;;		On exit  : 0/0
 20170 ;;		Unchanged: 0/0
 20171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20176 ;;Total ram usage:        0 bytes
 20177 ;; Hardware stack levels used:    1
 20178 ;; Hardware stack levels required when called:    3
 20179 ;; This function calls:
 20180 ;;		Nothing
 20181 ;; This function is called by:
 20182 ;;		_OLED_write4bits
 20183 ;;		_OLED_waitForReady
 20184 ;; This function uses a non-reentrant model
 20185 ;;
 20186                           
 20187                           
 20188                           ;psect for function _OLED_pulseEnable
 20189  2F06                     _OLED_pulseEnable:	
 20190                           
 20191                           ;oled.c: 21:  LATBbits.LATB2 = 1;
 20192                           
 20193                           ;incstack = 0
 20194                           ; Regs used in _OLED_pulseEnable: [wreg]
 20195  2F06  0140               	movlb	0	; select bank0
 20196  2F07  1519               	bsf	25,2	;volatile
 20197                           
 20198                           ;oled.c: 22:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 20199  2F08  3010               	movlw	16
 20200  2F09                     u7107:	
 20201  2F09  0B89               	decfsz	9,f
 20202  2F0A  2F09               	goto	u7107
 20203  2F0B  3200               	nop2
 20204                           
 20205                           ;oled.c: 23:  LATBbits.LATB2 = 0;
 20206  2F0C  0140               	movlb	0	; select bank0
 20207  2F0D  1119               	bcf	25,2	;volatile
 20208  2F0E  0008               	return
 20209  2F0F                     __end_of_OLED_pulseEnable:	
 20210                           
 20211                           	psect	intentry
 20212  0004                     __pintentry:	
 20213 ;; *************** function _ISR *****************
 20214 ;; Defined at:
 20215 ;;		line 48 in file "interrupt.c"
 20216 ;; Parameters:    Size  Location     Type
 20217 ;;		None
 20218 ;; Auto vars:     Size  Location     Type
 20219 ;;		None
 20220 ;; Return value:  Size  Location     Type
 20221 ;;                  1    wreg      void 
 20222 ;; Registers used:
 20223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20224 ;; Tracked objects:
 20225 ;;		On entry : 0/0
 20226 ;;		On exit  : 0/0
 20227 ;;		Unchanged: 0/0
 20228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20231 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20232 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20233 ;;Total ram usage:        4 bytes
 20234 ;; Hardware stack levels used:    1
 20235 ;; Hardware stack levels required when called:    2
 20236 ;; This function calls:
 20237 ;;		_pushButtonISR
 20238 ;;		_rotISR
 20239 ;;		_uartReceiveISR
 20240 ;; This function is called by:
 20241 ;;		Interrupt level 1
 20242 ;; This function uses a non-reentrant model
 20243 ;;
 20244                           
 20245  0004                     _ISR:	
 20246                           
 20247                           ;incstack = 0
 20248  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 20249                           
 20250                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20251  0005  3180               	pagesel	$
 20252                           
 20253                           ;interrupt.c: 50:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 20254  0006  014E               	movlb	14	; select bank14
 20255  0007  1A96               	btfsc	22,5	;volatile
 20256  0008  1E8C               	btfss	12,5	;volatile
 20257  0009  281C               	goto	i1l281
 20258                           
 20259                           ;interrupt.c: 53:   tick10ms++;
 20260  000A  3001               	movlw	1
 20261  000B  00F8               	movwf	??_ISR
 20262  000C  0878               	movf	??_ISR,w
 20263  000D  0141               	movlb	1	; select bank1
 20264  000E  07ED               	addwf	_tick10ms^(0+128),f	;volatile
 20265                           
 20266                           ;interrupt.c: 54:   if (pbState == PB_WAIT)
 20267  000F  3004               	movlw	4
 20268  0010  067D               	xorwf	_pbState,w	;volatile
 20269  0011  1D03               	btfss	3,2
 20270  0012  2816               	goto	i1l5422
 20271                           
 20272                           ;interrupt.c: 55:    pushButtonISR();
 20273  0013  31A1  2164  3180   	fcall	_pushButtonISR
 20274  0016                     i1l5422:	
 20275                           
 20276                           ;interrupt.c: 56:   TMR0 = 178;
 20277  0016  30B2               	movlw	178
 20278  0017  014B               	movlb	11	; select bank11
 20279  0018  009C               	movwf	28	;volatile
 20280                           
 20281                           ;interrupt.c: 57:   PIR0bits.TMR0IF = 0;
 20282  0019  014E               	movlb	14	; select bank14
 20283  001A  128C               	bcf	12,5	;volatile
 20284                           
 20285                           ;interrupt.c: 58:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 20286  001B  286D               	goto	i1l294
 20287  001C                     i1l281:	
 20288  001C  1A16               	btfsc	22,4	;volatile
 20289  001D  1E0C               	btfss	12,4	;volatile
 20290  001E  2838               	goto	i1l284
 20291                           
 20292                           ;interrupt.c: 60:   if (IOCAFbits.IOCAF7 == 1) {
 20293  001F  017E               	movlb	62	; select bank62
 20294  0020  1FBF               	btfss	63,7	;volatile
 20295  0021  2827               	goto	i1l5434
 20296                           
 20297                           ;interrupt.c: 61:    pushButtonISR();
 20298  0022  31A1  2164  3180   	fcall	_pushButtonISR
 20299                           
 20300                           ;interrupt.c: 62:    IOCAFbits.IOCAF7 = 0;
 20301  0025  017E               	movlb	62	; select bank62
 20302  0026  13BF               	bcf	63,7	;volatile
 20303  0027                     i1l5434:	
 20304                           
 20305                           ;interrupt.c: 64:   if (IOCAFbits.IOCAF4 == 1) {
 20306  0027  1E3F               	btfss	63,4	;volatile
 20307  0028  282E               	goto	i1l5440
 20308                           
 20309                           ;interrupt.c: 65:    rotISR();
 20310  0029  3188  2001  3180   	fcall	_rotISR
 20311                           
 20312                           ;interrupt.c: 66:    IOCAFbits.IOCAF4 = 0;
 20313  002C  017E               	movlb	62	; select bank62
 20314  002D  123F               	bcf	63,4	;volatile
 20315  002E                     i1l5440:	
 20316                           
 20317                           ;interrupt.c: 68:   if (IOCAFbits.IOCAF5 == 1) {
 20318  002E  1EBF               	btfss	63,5	;volatile
 20319  002F  2835               	goto	i1l5446
 20320                           
 20321                           ;interrupt.c: 69:    rotISR();
 20322  0030  3188  2001  3180   	fcall	_rotISR
 20323                           
 20324                           ;interrupt.c: 70:    IOCAFbits.IOCAF5 = 0;
 20325  0033  017E               	movlb	62	; select bank62
 20326  0034  12BF               	bcf	63,5	;volatile
 20327  0035                     i1l5446:	
 20328                           
 20329                           ;interrupt.c: 72:   PIR0bits.IOCIF = 0;
 20330  0035  014E               	movlb	14	; select bank14
 20331  0036  120C               	bcf	12,4	;volatile
 20332                           
 20333                           ;interrupt.c: 73:  } else if (INTCONbits.PEIE == 1) {
 20334  0037  286D               	goto	i1l294
 20335  0038                     i1l284:	
 20336  0038  1F0B               	btfss	11,6	;volatile
 20337  0039  286D               	goto	i1l294
 20338                           
 20339                           ;interrupt.c: 74:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 20340  003A  181A               	btfsc	26,0	;volatile
 20341  003B  1C10               	btfss	16,0	;volatile
 20342  003C  2866               	goto	i1l290
 20343                           
 20344                           ;interrupt.c: 77:    if (tick100ms++ >= 1000000000UL)
 20345  003D  0142               	movlb	2	; select bank2
 20346  003E  082B               	movf	(_tick100ms+3)^(0+256),w	;volatile
 20347  003F  00FB               	movwf	??_ISR+3
 20348  0040  082A               	movf	(_tick100ms+2)^(0+256),w	;volatile
 20349  0041  00FA               	movwf	??_ISR+2
 20350  0042  0829               	movf	(_tick100ms+1)^(0+256),w	;volatile
 20351  0043  00F9               	movwf	??_ISR+1
 20352  0044  0828               	movf	_tick100ms^(0+256),w	;volatile
 20353  0045  00F8               	movwf	??_ISR
 20354  0046  3001               	movlw	1
 20355  0047  07A8               	addwf	_tick100ms^(0+256),f	;volatile
 20356  0048  3000               	movlw	0
 20357  0049  3DA9               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 20358  004A  3DAA               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 20359  004B  3DAB               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 20360  004C  3000               	movlw	0
 20361  004D  0278               	subwf	??_ISR,w
 20362  004E  30CA               	movlw	202
 20363  004F  3B79               	subwfb	??_ISR+1,w
 20364  0050  309A               	movlw	154
 20365  0051  3B7A               	subwfb	??_ISR+2,w
 20366  0052  303B               	movlw	59
 20367  0053  3B7B               	subwfb	??_ISR+3,w
 20368  0054  1C03               	btfss	3,0
 20369  0055  285E               	goto	i1l5456
 20370                           
 20371                           ;interrupt.c: 78:     tick100ms = 0;
 20372  0056  3000               	movlw	0
 20373  0057  00AB               	movwf	(_tick100ms+3)^(0+256)	;volatile
 20374  0058  3000               	movlw	0
 20375  0059  00AA               	movwf	(_tick100ms+2)^(0+256)	;volatile
 20376  005A  3000               	movlw	0
 20377  005B  00A9               	movwf	(_tick100ms+1)^(0+256)	;volatile
 20378  005C  3000               	movlw	0
 20379  005D  00A8               	movwf	_tick100ms^(0+256)	;volatile
 20380  005E                     i1l5456:	
 20381                           
 20382                           ;interrupt.c: 79:    TMR1 = 53035;
 20383  005E  30CF               	movlw	207
 20384  005F  0144               	movlb	4	; select bank4
 20385  0060  008D               	movwf	13	;volatile
 20386  0061  302B               	movlw	43
 20387  0062  008C               	movwf	12	;volatile
 20388                           
 20389                           ;interrupt.c: 80:    PIR4bits.TMR1IF = 0;
 20390  0063  014E               	movlb	14	; select bank14
 20391  0064  1010               	bcf	16,0	;volatile
 20392                           
 20393                           ;interrupt.c: 81:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 20394  0065  286D               	goto	i1l294
 20395  0066                     i1l290:	
 20396  0066  1A99               	btfsc	25,5	;volatile
 20397  0067  1E8F               	btfss	15,5	;volatile
 20398  0068  286D               	goto	i1l294
 20399                           
 20400                           ;interrupt.c: 82:    uartReceiveISR();
 20401  0069  31A2  226C         	fcall	_uartReceiveISR
 20402                           
 20403                           ;interrupt.c: 83:    PIR3bits.RC1IF = 0;
 20404  006B  014E               	movlb	14	; select bank14
 20405  006C  128F               	bcf	15,5	;volatile
 20406  006D                     i1l294:	
 20407  006D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 20408  006E  0009               	retfie
 20409  006F                     __end_of_ISR:	
 20410                           
 20411                           	psect	text68
 20412  226C                     __ptext68:	
 20413 ;; *************** function _uartReceiveISR *****************
 20414 ;; Defined at:
 20415 ;;		line 37 in file "uart.c"
 20416 ;; Parameters:    Size  Location     Type
 20417 ;;		None
 20418 ;; Auto vars:     Size  Location     Type
 20419 ;;		None
 20420 ;; Return value:  Size  Location     Type
 20421 ;;                  1    wreg      void 
 20422 ;; Registers used:
 20423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20424 ;; Tracked objects:
 20425 ;;		On entry : 0/0
 20426 ;;		On exit  : 0/0
 20427 ;;		Unchanged: 0/0
 20428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20432 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20433 ;;Total ram usage:        1 bytes
 20434 ;; Hardware stack levels used:    1
 20435 ;; Hardware stack levels required when called:    1
 20436 ;; This function calls:
 20437 ;;		_strncpy
 20438 ;; This function is called by:
 20439 ;;		_ISR
 20440 ;; This function uses a non-reentrant model
 20441 ;;
 20442                           
 20443                           
 20444                           ;psect for function _uartReceiveISR
 20445  226C                     _uartReceiveISR:	
 20446                           
 20447                           ;uart.c: 39:  static char buffer[20];;uart.c: 41:  static uint8_t checksum = 0;;uart.c: 
      +                          43:  if (RC1STAbits.OERR)
 20448                           
 20449                           ;incstack = 0
 20450                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20451  226C  0142               	movlb	2	; select bank2
 20452  226D  1C9D               	btfss	29,1	;volatile
 20453  226E  2A75               	goto	i1l5344
 20454                           
 20455                           ;uart.c: 44:  {;uart.c: 45:   RC1STAbits.CREN = 0;
 20456  226F  121D               	bcf	29,4	;volatile
 20457                           
 20458                           ;uart.c: 46:   RC1STAbits.CREN = 1;
 20459  2270  161D               	bsf	29,4	;volatile
 20460                           
 20461                           ;uart.c: 47:   rxOErrCount++;
 20462  2271  3001               	movlw	1
 20463  2272  00F6               	movwf	??_uartReceiveISR
 20464  2273  0876               	movf	??_uartReceiveISR,w
 20465  2274  07B4               	addwf	_rxOErrCount^(0+256),f	;volatile
 20466  2275                     i1l5344:	
 20467                           
 20468                           ;uart.c: 49:  if (RC1STAbits.FERR)
 20469  2275  1D1D               	btfss	29,2	;volatile
 20470  2276  2A7D               	goto	i1l5350
 20471                           
 20472                           ;uart.c: 50:  {;uart.c: 51:   RC1STAbits.SPEN = 0;
 20473  2277  139D               	bcf	29,7	;volatile
 20474                           
 20475                           ;uart.c: 52:   RC1STAbits.SPEN = 1;
 20476  2278  179D               	bsf	29,7	;volatile
 20477                           
 20478                           ;uart.c: 53:   rxFErrCount++;
 20479  2279  3001               	movlw	1
 20480  227A  00F6               	movwf	??_uartReceiveISR
 20481  227B  0876               	movf	??_uartReceiveISR,w
 20482  227C  07B5               	addwf	_rxFErrCount^(0+256),f	;volatile
 20483  227D                     i1l5350:	
 20484                           
 20485                           ;uart.c: 57:  if (rxCount < sizeof(dataPacket)) {
 20486  227D  300F               	movlw	15
 20487  227E  0141               	movlb	1	; select bank1
 20488  227F  026B               	subwf	_rxCount^(0+128),w	;volatile
 20489  2280  1803               	skipnc
 20490  2281  2A9B               	goto	i1l5356
 20491                           
 20492                           ;uart.c: 58:   buffer[rxCount] = RC1REG;
 20493  2282  0142               	movlb	2	; select bank2
 20494  2283  0819               	movf	25,w	;volatile
 20495  2284  00F6               	movwf	??_uartReceiveISR
 20496  2285  0141               	movlb	1	; select bank1
 20497  2286  086B               	movf	_rxCount^(0+128),w
 20498  2287  3E36               	addlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 20499  2288  0086               	movwf	6
 20500  2289  3001               	movlw	1	; select bank2/3
 20501  228A  0087               	movwf	7
 20502  228B  0876               	movf	??_uartReceiveISR,w
 20503  228C  0081               	movwf	1
 20504                           
 20505                           ;uart.c: 59:   checksum ^= buffer[rxCount];
 20506  228D  086B               	movf	_rxCount^(0+128),w
 20507  228E  3E36               	addlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 20508  228F  0086               	movwf	6
 20509  2290  3001               	movlw	1	; select bank2/3
 20510  2291  0087               	movwf	7
 20511  2292  0801               	movf	1,w
 20512  2293  00F6               	movwf	??_uartReceiveISR
 20513  2294  0876               	movf	??_uartReceiveISR,w
 20514  2295  06E9               	xorwf	uartReceiveISR@checksum^(0+128),f
 20515                           
 20516                           ;uart.c: 60:   rxCount++;
 20517  2296  3001               	movlw	1
 20518  2297  00F6               	movwf	??_uartReceiveISR
 20519  2298  0876               	movf	??_uartReceiveISR,w
 20520  2299  07EB               	addwf	_rxCount^(0+128),f	;volatile
 20521                           
 20522                           ;uart.c: 61:  } else {
 20523  229A  0008               	return
 20524  229B                     i1l5356:	
 20525                           
 20526                           ;uart.c: 63:   if (RC1REG == checksum) {
 20527  229B  0142               	movlb	2	; select bank2
 20528  229C  0819               	movf	25,w	;volatile
 20529  229D  0141               	movlb	1	; select bank1
 20530  229E  0669               	xorwf	uartReceiveISR@checksum^(0+128),w
 20531  229F  1D03               	skipz
 20532  22A0  2AB0               	goto	i1l5362
 20533                           
 20534                           ;uart.c: 65:    dataReadyFlag = 1;
 20535  22A1  3001               	movlw	1
 20536  22A2  00F6               	movwf	??_uartReceiveISR
 20537  22A3  0876               	movf	??_uartReceiveISR,w
 20538  22A4  00EA               	movwf	_dataReadyFlag^(0+128)	;volatile
 20539                           
 20540                           ;uart.c: 66:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 20541  22A5  3036               	movlw	(low (uartReceiveISR@buffer| (0+256)))& (0+255)
 20542  22A6  00F6               	movwf	??_uartReceiveISR
 20543  22A7  0876               	movf	??_uartReceiveISR,w
 20544  22A8  00F0               	movwf	strncpy@s
 20545  22A9  300F               	movlw	15
 20546  22AA  00F1               	movwf	strncpy@n
 20547  22AB  3000               	movlw	0
 20548  22AC  00F2               	movwf	strncpy@n+1
 20549  22AD  304A               	movlw	(low (_dataPacket| (0+256)))& (0+255)
 20550  22AE  31A0  209D         	fcall	_strncpy
 20551  22B0                     i1l5362:	
 20552                           
 20553                           ;uart.c: 68:   checksum = 0;
 20554  22B0  0141               	movlb	1	; select bank1
 20555  22B1  01E9               	clrf	uartReceiveISR@checksum^(0+128)
 20556                           
 20557                           ;uart.c: 69:   rxCount = 0;
 20558  22B2  01EB               	clrf	_rxCount^(0+128)	;volatile
 20559  22B3  0008               	return
 20560  22B4                     __end_of_uartReceiveISR:	
 20561                           
 20562                           	psect	text69
 20563  209D                     __ptext69:	
 20564 ;; *************** function _strncpy *****************
 20565 ;; Defined at:
 20566 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 20567 ;; Parameters:    Size  Location     Type
 20568 ;;  d               1    wreg     PTR unsigned char 
 20569 ;;		 -> dataPacket(15), 
 20570 ;;  s               1    0[COMMON] PTR const unsigned char 
 20571 ;;		 -> uartReceiveISR@buffer(20), 
 20572 ;;  n               2    1[COMMON] unsigned int 
 20573 ;; Auto vars:     Size  Location     Type
 20574 ;;  d               1    4[COMMON] PTR unsigned char 
 20575 ;;		 -> dataPacket(15), 
 20576 ;;  cp              1    5[COMMON] PTR unsigned char 
 20577 ;;		 -> dataPacket(15), 
 20578 ;; Return value:  Size  Location     Type
 20579 ;;                  1    wreg      PTR unsigned char 
 20580 ;; Registers used:
 20581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 20582 ;; Tracked objects:
 20583 ;;		On entry : 0/0
 20584 ;;		On exit  : 0/0
 20585 ;;		Unchanged: 0/0
 20586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20587 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20588 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20590 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20591 ;;Total ram usage:        6 bytes
 20592 ;; Hardware stack levels used:    1
 20593 ;; This function calls:
 20594 ;;		Nothing
 20595 ;; This function is called by:
 20596 ;;		_uartReceiveISR
 20597 ;; This function uses a non-reentrant model
 20598 ;;
 20599                           
 20600                           
 20601                           ;psect for function _strncpy
 20602  209D                     _strncpy:	
 20603                           
 20604                           ;incstack = 0
 20605                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 20606                           ;strncpy@d stored from wreg
 20607  209D  00F4               	movwf	strncpy@d
 20608  209E  0874               	movf	strncpy@d,w
 20609  209F  00F3               	movwf	??_strncpy
 20610  20A0  0873               	movf	??_strncpy,w
 20611  20A1  00F5               	movwf	strncpy@cp
 20612  20A2                     i1l4434:	
 20613  20A2  0871               	movf	strncpy@n,w
 20614  20A3  0472               	iorwf	strncpy@n+1,w
 20615  20A4  1903               	btfsc	3,2
 20616  20A5  28C3               	goto	i1l4440
 20617  20A6  3001               	movlw	1
 20618  20A7  02F1               	subwf	strncpy@n,f
 20619  20A8  3000               	movlw	0
 20620  20A9  3BF2               	subwfb	strncpy@n+1,f
 20621  20AA  0875               	movf	strncpy@cp,w
 20622  20AB  0086               	movwf	6
 20623  20AC  3001               	movlw	1	; select bank2/3
 20624  20AD  0087               	movwf	7
 20625  20AE  0AF5               	incf	strncpy@cp,f
 20626  20AF  0870               	movf	strncpy@s,w
 20627  20B0  0084               	movwf	4
 20628  20B1  3001               	movlw	1	; select bank2/3
 20629  20B2  0085               	movwf	5
 20630  20B3  0AF0               	incf	strncpy@s,f
 20631  20B4  0800               	movf	0,w
 20632  20B5  3FC0               	movwi [0]fsr1
 20633  20B6  0889               	movf	9,f
 20634  20B7  1903               	btfsc	3,2
 20635  20B8  28C3               	goto	i1l4440
 20636  20B9  28A2               	goto	i1l4434
 20637  20BA                     i1l4436:	
 20638  20BA  0875               	movf	strncpy@cp,w
 20639  20BB  0086               	movwf	6
 20640  20BC  3001               	movlw	1	; select bank2/3
 20641  20BD  0087               	movwf	7
 20642  20BE  0181               	clrf	1
 20643  20BF  3001               	movlw	1
 20644  20C0  00F3               	movwf	??_strncpy
 20645  20C1  0873               	movf	??_strncpy,w
 20646  20C2  07F5               	addwf	strncpy@cp,f
 20647  20C3                     i1l4440:	
 20648  20C3  3001               	movlw	1
 20649  20C4  02F1               	subwf	strncpy@n,f
 20650  20C5  3000               	movlw	0
 20651  20C6  3BF2               	subwfb	strncpy@n+1,f
 20652  20C7  0A71               	incf	strncpy@n,w
 20653  20C8  1D03               	skipz
 20654  20C9  28BA               	goto	i1l4436
 20655  20CA  0A72               	incf	strncpy@n+1,w
 20656  20CB  1903               	btfsc	3,2
 20657  20CC  0008               	return
 20658  20CD  28BA               	goto	i1l4436
 20659  20CE                     __end_of_strncpy:	
 20660                           
 20661                           	psect	text70
 20662  0801                     __ptext70:	
 20663 ;; *************** function _rotISR *****************
 20664 ;; Defined at:
 20665 ;;		line 34 in file "inputs.c"
 20666 ;; Parameters:    Size  Location     Type
 20667 ;;		None
 20668 ;; Auto vars:     Size  Location     Type
 20669 ;;  input           1    7[COMMON] unsigned char 
 20670 ;; Return value:  Size  Location     Type
 20671 ;;                  1    wreg      void 
 20672 ;; Registers used:
 20673 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 20674 ;; Tracked objects:
 20675 ;;		On entry : 0/0
 20676 ;;		On exit  : 0/0
 20677 ;;		Unchanged: 0/0
 20678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20680 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20681 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20682 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20683 ;;Total ram usage:        8 bytes
 20684 ;; Hardware stack levels used:    1
 20685 ;; This function calls:
 20686 ;;		Nothing
 20687 ;; This function is called by:
 20688 ;;		_ISR
 20689 ;; This function uses a non-reentrant model
 20690 ;;
 20691                           
 20692                           
 20693                           ;psect for function _rotISR
 20694  0801                     _rotISR:	
 20695                           
 20696                           ;inputs.c: 36:  uint8_t input;;inputs.c: 38:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 20697                           
 20698                           ;incstack = 0
 20699                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 20700  0801  0140               	movlb	0	; select bank0
 20701  0802  0E0C               	swapf	12,w	;volatile
 20702  0803  3901               	andlw	1
 20703  0804  00F0               	movwf	??_rotISR
 20704  0805  0E0C               	swapf	12,w	;volatile
 20705  0806  0C89               	rrf	9,f
 20706  0807  3901               	andlw	1
 20707  0808  0709               	addwf	9,w
 20708  0809  0470               	iorwf	??_rotISR,w
 20709  080A  00F1               	movwf	??_rotISR+1
 20710  080B  0871               	movf	??_rotISR+1,w
 20711  080C  00F7               	movwf	rotISR@input
 20712                           
 20713                           ;inputs.c: 41:  curRotState = transition_table[curRotState & 0b00000111][input];
 20714  080D  087C               	movf	_curRotState,w	;volatile
 20715  080E  3907               	andlw	7
 20716  080F  00F0               	movwf	??_rotISR
 20717  0810  01F1               	clrf	??_rotISR+1
 20718  0811  35F0               	lslf	??_rotISR,f
 20719  0812  0DF1               	rlf	??_rotISR+1,f
 20720  0813  35F0               	lslf	??_rotISR,f
 20721  0814  0DF1               	rlf	??_rotISR+1,f
 20722  0815  3000               	movlw	low (_transition_table| (0+32768))
 20723  0816  00F2               	movwf	??_rotISR+2
 20724  0817  30B0               	movlw	high (_transition_table| (0+32768))
 20725  0818  00F3               	movwf	??_rotISR+3
 20726  0819  0870               	movf	??_rotISR,w
 20727  081A  0772               	addwf	??_rotISR+2,w
 20728  081B  00F4               	movwf	??_rotISR+4
 20729  081C  0871               	movf	??_rotISR+1,w
 20730  081D  3D73               	addwfc	??_rotISR+3,w
 20731  081E  00F5               	movwf	??_rotISR+5
 20732  081F  0877               	movf	rotISR@input,w
 20733  0820  0774               	addwf	??_rotISR+4,w
 20734  0821  0084               	movwf	4
 20735  0822  0875               	movf	??_rotISR+5,w
 20736  0823  1803               	skipnc
 20737  0824  0A75               	incf	??_rotISR+5,w
 20738  0825  0085               	movwf	5
 20739  0826  0800               	movf	0,w	;code access
 20740  0827  00F6               	movwf	??_rotISR+6
 20741  0828  0876               	movf	??_rotISR+6,w
 20742  0829  00FC               	movwf	_curRotState	;volatile
 20743                           
 20744                           ;inputs.c: 44:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 20745  082A  1FFC               	btfss	_curRotState,7	;volatile
 20746  082B  2831               	goto	i1l5334
 20747  082C  3001               	movlw	1
 20748  082D  00F0               	movwf	??_rotISR
 20749  082E  0870               	movf	??_rotISR,w
 20750  082F  0141               	movlb	1	; select bank1
 20751  0830  00EC               	movwf	_rotDir^(0+128)	;volatile
 20752  0831                     i1l5334:	
 20753                           
 20754                           ;inputs.c: 45:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 20755  0831  1F7C               	btfss	_curRotState,6	;volatile
 20756  0832  0008               	return
 20757  0833  3002               	movlw	2
 20758  0834  00F0               	movwf	??_rotISR
 20759  0835  0870               	movf	??_rotISR,w
 20760  0836  0141               	movlb	1	; select bank1
 20761  0837  00EC               	movwf	_rotDir^(0+128)	;volatile
 20762  0838  0008               	return
 20763  0839                     __end_of_rotISR:	
 20764                           
 20765                           	psect	text71
 20766  2164                     __ptext71:	
 20767 ;; *************** function _pushButtonISR *****************
 20768 ;; Defined at:
 20769 ;;		line 52 in file "inputs.c"
 20770 ;; Parameters:    Size  Location     Type
 20771 ;;		None
 20772 ;; Auto vars:     Size  Location     Type
 20773 ;;  time            1    1[COMMON] unsigned char 
 20774 ;; Return value:  Size  Location     Type
 20775 ;;                  1    wreg      void 
 20776 ;; Registers used:
 20777 ;;		wreg, status,2, status,0, pclath, cstack
 20778 ;; Tracked objects:
 20779 ;;		On entry : 0/0
 20780 ;;		On exit  : 0/0
 20781 ;;		Unchanged: 0/0
 20782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20785 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20787 ;;Total ram usage:        2 bytes
 20788 ;; Hardware stack levels used:    1
 20789 ;; Hardware stack levels required when called:    1
 20790 ;; This function calls:
 20791 ;;		_get10msTick
 20792 ;;		_reset10msTick
 20793 ;; This function is called by:
 20794 ;;		_ISR
 20795 ;; This function uses a non-reentrant model
 20796 ;;
 20797                           
 20798                           
 20799                           ;psect for function _pushButtonISR
 20800  2164                     _pushButtonISR:	
 20801                           
 20802                           ;inputs.c: 54:  uint8_t time;;inputs.c: 56:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT
      +                          )) {
 20803                           
 20804                           ;incstack = 0
 20805                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0+pclath+cstack]
 20806  2164  0140               	movlb	0	; select bank0
 20807  2165  1B8C               	btfsc	12,7	;volatile
 20808  2166  2972               	goto	i1l5306
 20809  2167  3004               	movlw	4
 20810  2168  067D               	xorwf	_pbState,w	;volatile
 20811  2169  1903               	btfsc	3,2
 20812  216A  2972               	goto	i1l5306
 20813                           
 20814                           ;inputs.c: 57:   reset10msTick();
 20815  216B  31A0  2000         	fcall	_reset10msTick
 20816                           
 20817                           ;inputs.c: 58:   pbState = PB_WAIT;
 20818  216D  3004               	movlw	4
 20819  216E  00F0               	movwf	??_pushButtonISR
 20820  216F  0870               	movf	??_pushButtonISR,w
 20821  2170  00FD               	movwf	_pbState	;volatile
 20822                           
 20823                           ;inputs.c: 59:  } else if (pbState == PB_WAIT) {
 20824  2171  0008               	return
 20825  2172                     i1l5306:	
 20826  2172  3004               	movlw	4
 20827  2173  067D               	xorwf	_pbState,w	;volatile
 20828  2174  1D03               	btfss	3,2
 20829  2175  0008               	return
 20830                           
 20831                           ;inputs.c: 60:   time = get10msTick();
 20832  2176  31AE  26E7  31A1   	fcall	_get10msTick
 20833  2179  00F0               	movwf	??_pushButtonISR
 20834  217A  0870               	movf	??_pushButtonISR,w
 20835  217B  00F1               	movwf	pushButtonISR@time
 20836                           
 20837                           ;inputs.c: 61:   if ((time > 10) && (time <= 70) && (PORTAbits.RA7))
 20838  217C  300B               	movlw	11
 20839  217D  0271               	subwf	pushButtonISR@time,w
 20840  217E  1C03               	skipc
 20841  217F  298C               	goto	i1l5318
 20842  2180  3047               	movlw	71
 20843  2181  0271               	subwf	pushButtonISR@time,w
 20844  2182  1803               	skipnc
 20845  2183  298C               	goto	i1l5318
 20846  2184  0140               	movlb	0	; select bank0
 20847  2185  1F8C               	btfss	12,7	;volatile
 20848  2186  298C               	goto	i1l5318
 20849                           
 20850                           ;inputs.c: 63:    pbState = PB_SHORT;
 20851  2187  3001               	movlw	1
 20852  2188  00F0               	movwf	??_pushButtonISR
 20853  2189  0870               	movf	??_pushButtonISR,w
 20854  218A  00FD               	movwf	_pbState	;volatile
 20855  218B  0008               	return
 20856  218C                     i1l5318:	
 20857  218C  3047               	movlw	71
 20858  218D  0271               	subwf	pushButtonISR@time,w
 20859  218E  1C03               	skipc
 20860  218F  2998               	goto	i1l321
 20861  2190  0140               	movlb	0	; select bank0
 20862  2191  1B8C               	btfsc	12,7	;volatile
 20863  2192  2998               	goto	i1l321
 20864                           
 20865                           ;inputs.c: 66:    pbState = PB_LONG;
 20866  2193  3002               	movlw	2
 20867  2194  00F0               	movwf	??_pushButtonISR
 20868  2195  0870               	movf	??_pushButtonISR,w
 20869  2196  00FD               	movwf	_pbState	;volatile
 20870  2197  0008               	return
 20871  2198                     i1l321:	
 20872                           ;inputs.c: 67:   else if (PORTAbits.RA7)
 20873                           
 20874  2198  0140               	movlb	0	; select bank0
 20875  2199  1F8C               	btfss	12,7	;volatile
 20876  219A  0008               	return
 20877                           
 20878                           ;inputs.c: 69:    pbState = PB_ABORT;
 20879  219B  3003               	movlw	3
 20880  219C  00F0               	movwf	??_pushButtonISR
 20881  219D  0870               	movf	??_pushButtonISR,w
 20882  219E  00FD               	movwf	_pbState	;volatile
 20883  219F  0008               	return
 20884  21A0                     __end_of_pushButtonISR:	
 20885                           ;inputs.c: 70:  }
 20886                           
 20887                           
 20888                           	psect	text72
 20889  2000                     __ptext72:	
 20890 ;; *************** function _reset10msTick *****************
 20891 ;; Defined at:
 20892 ;;		line 41 in file "interrupt.c"
 20893 ;; Parameters:    Size  Location     Type
 20894 ;;		None
 20895 ;; Auto vars:     Size  Location     Type
 20896 ;;		None
 20897 ;; Return value:  Size  Location     Type
 20898 ;;                  1    wreg      void 
 20899 ;; Registers used:
 20900 ;;		status,2
 20901 ;; Tracked objects:
 20902 ;;		On entry : 0/0
 20903 ;;		On exit  : 0/0
 20904 ;;		Unchanged: 0/0
 20905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20910 ;;Total ram usage:        0 bytes
 20911 ;; Hardware stack levels used:    1
 20912 ;; This function calls:
 20913 ;;		Nothing
 20914 ;; This function is called by:
 20915 ;;		_pushButtonISR
 20916 ;; This function uses a non-reentrant model
 20917 ;;
 20918                           
 20919                           
 20920                           ;psect for function _reset10msTick
 20921  2000                     _reset10msTick:	
 20922                           
 20923                           ;interrupt.c: 42:  tick10ms = 0;
 20924                           
 20925                           ;incstack = 0
 20926                           ; Regs used in _reset10msTick: [status,2]
 20927  2000  0141               	movlb	1	; select bank1
 20928  2001  01ED               	clrf	_tick10ms^(0+128)	;volatile
 20929  2002  0008               	return
 20930  2003                     __end_of_reset10msTick:	
 20931                           
 20932                           	psect	text73
 20933  2EE7                     __ptext73:	
 20934 ;; *************** function _get10msTick *****************
 20935 ;; Defined at:
 20936 ;;		line 33 in file "interrupt.c"
 20937 ;; Parameters:    Size  Location     Type
 20938 ;;		None
 20939 ;; Auto vars:     Size  Location     Type
 20940 ;;		None
 20941 ;; Return value:  Size  Location     Type
 20942 ;;                  1    wreg      unsigned char 
 20943 ;; Registers used:
 20944 ;;		wreg
 20945 ;; Tracked objects:
 20946 ;;		On entry : 0/0
 20947 ;;		On exit  : 0/0
 20948 ;;		Unchanged: 0/0
 20949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20954 ;;Total ram usage:        0 bytes
 20955 ;; Hardware stack levels used:    1
 20956 ;; This function calls:
 20957 ;;		Nothing
 20958 ;; This function is called by:
 20959 ;;		_pushButtonISR
 20960 ;; This function uses a non-reentrant model
 20961 ;;
 20962                           
 20963                           
 20964                           ;psect for function _get10msTick
 20965  2EE7                     _get10msTick:	
 20966                           
 20967                           ;interrupt.c: 35:  return tick10ms;
 20968                           
 20969                           ;incstack = 0
 20970                           ; Regs used in _get10msTick: [wreg]
 20971  2EE7  0141               	movlb	1	; select bank1
 20972  2EE8  086D               	movf	_tick10ms^(0+128),w	;volatile
 20973  2EE9  0008               	return
 20974  2EEA                     __end_of_get10msTick:	
 20975  007E                     btemp	set	126	;btemp
 20976  007E                     int$flags	set	126
 20977  007E                     wtemp0	set	126


Data Sizes:
    Strings     504
    Constant    139
    Data        60
    BSS         85
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     62      80
    BANK2            80      0      75
    BANK3            80      0      50
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           19      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    p_fct$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    S1317$1$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__getStateFunc$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    func$0	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK2[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    getAnalogValues@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    calcRequiredPower@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    checkSensor@dp	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    checkSensor@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    systemCheck@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    checkChannelStatus@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    checkChannelStatus@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    menu@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__getStateFunc	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    menu@func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    S1317$func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl.func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    p_fct	PTR FTN(PTR struct .,)unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setFudgeFactor@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setSkyTemp@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setDPOffset@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setup@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setLensDia@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setOutputPower@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    setOutputPower@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    channelSetup@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    channelSetup@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    channelView$1023	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_16(CODE[7]), STR_15(CODE[7]), 

    channelView@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    statusView@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    sp__getDataPacket	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK2[15]), 

    spinInput@input	PTR float  size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 49
		 -> STR_63(CODE[4]), systemCheck@str(BANK1[3]), STR_62(CODE[12]), STR_61(CODE[11]), 
		 -> STR_60(CODE[9]), STR_59(CODE[2]), STR_58(CODE[13]), STR_57(CODE[9]), 
		 -> STR_56(CODE[2]), STR_55(CODE[13]), STR_54(CODE[3]), STR_53(CODE[7]), 
		 -> STR_52(CODE[13]), STR_51(CODE[10]), STR_50(CODE[10]), STR_49(CODE[3]), 
		 -> STR_48(CODE[7]), STR_47(CODE[37]), STR_46(CODE[8]), STR_45(CODE[2]), 
		 -> STR_44(CODE[13]), STR_43(CODE[13]), STR_42(CODE[13]), STR_41(CODE[8]), 
		 -> STR_40(CODE[2]), STR_39(CODE[7]), STR_38(CODE[6]), STR_37(CODE[7]), 
		 -> STR_36(CODE[6]), STR_35(CODE[13]), STR_34(CODE[8]), STR_33(CODE[13]), 
		 -> STR_32(CODE[13]), STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), 
		 -> STR_28(CODE[13]), STR_27(CODE[13]), STR_26(CODE[9]), STR_25(CODE[8]), 
		 -> STR_24(CODE[5]), STR_23(CODE[8]), STR_22(CODE[5]), STR_21(CODE[13]), 
		 -> STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[13]), 
		 -> STR_16(CODE[7]), STR_15(CODE[7]), STR_14(CODE[3]), STR_13(CODE[13]), 
		 -> STR_12(CODE[13]), STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[4]), 
		 -> STR_8(CODE[2]), STR_7(CODE[4]), STR_6(CODE[8]), STR_5(CODE[7]), 
		 -> STR_4(CODE[8]), STR_3(CODE[2]), STR_2(CODE[4]), str(BANK2[10]), 
		 -> STR_1(CODE[49]), 

    initGlobalData@chData	PTR struct . size(2) Largest target is 173
		 -> data.chData(BIGRAM[128]), data(BIGRAM[173]), 

    initGlobalData@data	PTR struct . size(2) Largest target is 173
		 -> data(BIGRAM[173]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> systemCheck@str(BANK1[3]), str(BANK2[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK2[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _main->_calcRequiredPower
    _main->_getAnalogValues
    _systemCheck->___flge
    _OLED_Off->_OLED_command
    _setOutputPower->___flge
    _spinInput->___flge
    _menuError->_OLED_print_xy
    _OLED_returnHome->_OLED_command
    _OLED_clearDisplay->_OLED_command
    _getStateFunc->___wmul
    _getNextState->___wmul
    _channelSetup->___flge
    _returnToPage->_OLED_command
    _OLED_scrollDisplayRight->_OLED_command
    _OLED_scrollDisplayLeft->_OLED_command
    _itoa->___fltol
    _ftoa->___flge
    _OLED_print_xy->_OLED_command
    _OLED_print_xy->_OLED_write
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _timeSince->_timeNow
    _checkChannelStatus->___flge
    _ema->___lmul
    ___xxtofl->___wmul
    ___fltol->___fldiv
    ___flge->___fldiv
    _calcRequiredPower->___flsub
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calcRequiredPower
    _systemCheck->_itoa
    _menu->_channelView
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _spinInput->___flge
    _itoa->___fltol
    _ftoa->___fltol
    _checkSensor->___flge
    _checkChannelStatus->___fltol

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  549539
                                             57 BANK1      5     5      0
                  _OLED_clearDisplay
                          _OLED_init
              _OLED_loadSpecialChars
                    _OLED_returnHome
                  _calcRequiredPower
                 _checkChannelStatus
                        _checkSensor
                    _getAnalogValues
                     _initGlobalData
                         _initialize
                               _menu
                      _setLoadSwitch
                        _systemCheck
                            _timeNow
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                         10     8      2   31853
                                             16 BANK1     10     8      2
                           _OLED_Off
                  _OLED_clearDisplay
                      _OLED_print_xy
                    _OLED_returnHome
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                               _itoa
                   _setChannelSwitch
                      _setLoadSwitch
 ---------------------------------------------------------------------------------
 (2) _OLED_Off                                             0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _menu                                                11     9      2  462549
                                             31 BANK1     11     9      2
                       _channelSetup *
                        _channelView *
                       _getNextState
                              _getPB
                       _getStateFunc
                          _menuError
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
 ---------------------------------------------------------------------------------
 (2) _statusView                                           4     2      2   41599
                                             20 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                4     2      2   41401
                                             20 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           3     1      2   51704
                                             20 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       8     6      2   58731
                                             20 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (3) _getPB                                                2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           7     5      2   51704
                                             20 BANK1      7     5      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       3     1      2   51757
                                             20 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          3     1      2   51704
                                             20 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   11627
                                              4 BANK1     16     2     14
                            ___fladd
                             ___flge
                            ___flsub
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _menuError                                            0     0      0   14745
                  _OLED_clearDisplay
                      _OLED_print_xy
                    _OLED_returnHome
 ---------------------------------------------------------------------------------
 (2) _OLED_returnHome                                      0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _OLED_clearDisplay                                    0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _getStateFunc                                         7     5      2    1724
                                              6 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         7     5      2    2030
                                              6 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         11     9      2   46694
                                             20 BANK1     11     9      2
                      _OLED_print_xy
                             ___bmul
                            ___fltol
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    1156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         8     6      2   48383
                                             20 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    2010
                                              7 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1302
                                              7 BANK0      6     5      1
             _OLED_scrollDisplayLeft
            _OLED_scrollDisplayRight
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayRight                              0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayLeft                               0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    2784
                                              5 BANK1     11     7      4
                            ___awdiv
                            ___awmod
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   23982
                                              5 BANK1     14     8      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1612
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   14041
                                              7 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       9     7      2     563
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      8     6      2   14197
                                             72 BANK0      8     6      2
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          7     5      2    5086
                                              4 BANK1      7     5      2
                             ___flge
                           ___xxtofl
                      _getDataPacket
                            _timeNow
                          _timeSince
                    _uartIsDataReady
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIsDataReady                                      2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     361
                                              4 BANK0     16    12      4
                            _timeNow
 ---------------------------------------------------------------------------------
 (2) _timeNow                                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getDataPacket                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  14    12      2   16761
                                              5 BANK1     14    12      2
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
                      _setLoadSwitch
 ---------------------------------------------------------------------------------
 (2) _setLoadSwitch                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     502
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1419
                                             12 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     396
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     854
                                              6 BANK0     14    10      4
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     533
                                             72 BANK0      6     2      4
                                              0 BANK1      5     5      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    3374
                                             72 BANK0      8     0      8
                                              0 BANK1      4     4      0
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     546
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   63    61      2   16170
                                             74 BANK0      6     4      2
                                              0 BANK1     57    57      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    3549
                                             66 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    2896
                                             46 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    6369
                                             20 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     799
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    2337
                                             46 BANK0     26    18      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0     796
                                              7 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                              7 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              0 BANK0      1     1      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     306
                                              3 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              0 BANK0      3     3      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _OLED_pulseEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  4     4      0     416
                                              8 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (10) _uartReceiveISR                                      1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (11) _strncpy                                             6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (10) _rotISR                                              8     8      0      23
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (10) _pushButtonISR                                       2     2      0      67
                                              0 COMMON     2     2      0
                        _get10msTick
                      _reset10msTick
 ---------------------------------------------------------------------------------
 (11) _reset10msTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _get10msTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_clearDisplay
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write4bits
       _OLED_pulseEnable
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_returnHome
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _calcRequiredPower
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
   _checkChannelStatus
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
     ___xxtofl
       ___wmul (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
     _getAnalogValue
     _setChannelSwitch
     _setLoadSwitch
   _checkSensor
     ___flge
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___wmul (ARG)
       _getAnalogValue (ARG)
     _getDataPacket
     _timeNow
     _timeSince
       _timeNow
     _uartIsDataReady
     _uartReset
     _uartSendByte
   _getAnalogValues
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___wmul (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _initGlobalData
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___fleq
       ___flge
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___bmul
       ___fltol
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _getNextState *
       ___wmul
     _getPB *
     _getStateFunc *
       ___wmul
     _menuError *
       _OLED_clearDisplay
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _OLED_returnHome
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       ___fleq
       ___flge
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         _getRotDir
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
       _ftoa
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fldiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
                 ___wmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
         ___wmul
         ___xxtofl
           ___wmul (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
   _setLoadSwitch
   _systemCheck
     _OLED_Off
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_clearDisplay
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       _OLED_write
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       ___bmul (ARG)
     _OLED_returnHome
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___fldiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
           ___wmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
         ___wmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___wmul (ARG)
       _getAnalogValue (ARG)
     _error
     _getAnalogValue
     _itoa
       ___awdiv
       ___awmod
       ___fltol (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
               ___wmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
     _setChannelSwitch
     _setLoadSwitch
   _timeNow
   _timeSince
     _timeNow

 _ISR (ROOT)
   _pushButtonISR
     _get10msTick
     _reset10msTick
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3E      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     12B       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      32      12       62.5%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              13      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     12B      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 29 18:06:00 2020

                   _pushButtonISR 2164                     returnToPage@n 002A          __end_of_transition_table 301C  
                    _stateFuncTbl 2854                      ___fldiv@aexp 0067                      ___fldiv@bexp 0066  
                    ___fldiv@sign 005F                    ___bmul@product 0022                       __CFG_CP$OFF 0000  
             __end_of_systemCheck 09D6            _calcRequiredPower$2290 00CC            _calcRequiredPower$2291 00A8  
          _calcRequiredPower$2292 00AC            _calcRequiredPower$2293 00B0            _calcRequiredPower$2294 00B4  
          _calcRequiredPower$2295 00B8            _calcRequiredPower$2296 00BC                      ___awdiv@sign 0026  
             ___wmul@multiplicand 0022                    ??_getStateFunc 0028           ??_OLED_loadSpecialChars 0027  
             __Umul8_16@word_mpld 0026                       __CFG_LVP$ON 0000                               l150 22B9  
                             l137 18D9                               l182 2FE5                               l370 2F28  
                             l651 1813                               l459 17B8                               l724 07B9  
                             l716 06D0                               l737 0959                               l850 2FCE  
                             l579 2F9B                               _ISR 0004                               _ema 23EF  
                             _str 0159                      ___awmod@sign 0026                      __CFG_BORV$LO 0000  
                             wreg 0009                  returnToPage@page 0029                      ___flmul@aexp 0046  
                    ___flmul@bexp 0047                      ___flmul@sign 0041                      ___flmul@temp 004C  
                    ___flmul@prod 0048                     __CFG_BBEN$OFF 0000          __end_of_setChannelSwitch 226C  
                            ?_ISR 0070                      __CFG_ZCD$OFF 0000                      ___fltol@exp1 006D  
                            l1020 2331                              l1031 1A92                              l1019 2317  
                            l1051 26CE                              l1028 1A1A                              l1231 11CB  
                            l1207 109F                              l1151 0A23                              l1314 2037  
                            l1155 0AB6                              l1228 11A6                              l1172 0B39  
                            l1229 11BE                              l1157 0A99                              l1193 0BB0  
                            l1185 0B98                              l4010 0E13                              l1259 0FF3  
                            l1291 1871                              l4020 0E29                              l4012 0E1B  
                            l1285 183B                              ?_ema 002C                              l4104 0FE0  
                            l4008 0E11                              l1298 1885                              l4122 1833  
                            l1299 188F              __end_of_channelSetup 1800                              l4132 184E  
                            l5020 1CA3                              l5006 205B                              l4142 1883  
                            l4134 185E                              l5110 1209                              l4214 1F60  
                            l4080 0F89                              l4072 0F5B                              l3504 0A2D  
                            l4144 1876                              l4128 184A                              l5112 1212  
                            l4216 1FF7                              l4074 0F72                              l3610 0B5F  
                            l5130 128D                              l5122 125F                              l5114 121B  
                            l4306 24EB                              l4314 2501                              l4084 0F8B  
                            l3604 0B58                              l3612 0B61                              l4156 18AA  
                            l5212 057D                              l5204 052A                              l5124 1280  
                            l5116 123C                              l3700 2350                              l4094 0FB4  
                            l3622 0B6C                              l3542 0AA1                              l3534 0A69  
                            l3470 09F0                              l4342 2076                              l4182 1EDD  
                            l4326 250C                              l4334 2521                              l3640 0BA8  
                            l3560 0AC4                              l3544 0AA3                              l3552 0AB1  
                            l3800 268D                              l5224 0602                              l5152 132C  
                            l5160 1339                              l4248 20EA                              l4192 1F38  
                            l4184 1F2B                              l4360 2FA5                              l4098 0FC9  
                            l3618 0B6A                              l3570 0AD8                              l3474 09F3  
                            l4346 2080                              l5242 0655                              l5162 1349  
                            l4194 1F4E                              l3706 235B                              l3644 0BAC  
                            l3476 09FB                              l5260 073B                              l5228 0623  
                            l5156 1336                              l3732 2392                              l3724 2381  
                            l3716 2363                              l4356 2F9F                              l4268 1B01  
                            l4508 1669                              l4460 14F7                              l3910 1111  
                            l3654 2031                              l3494 0A18                              l5262 0741  
                            l5254 0702                              l5270 07AE                              l3718 236F  
                            l4286 2110                              l4470 150F                              l4462 14FB  
                            l3920 112F                              l3568 0AD6                              l5176 00BE  
                            l4376 2343                              l3816 26BA                              l3680 2FC8  
                            l3728 238A                              l3744 21EA                              l4464 14FD  
                            l3850 1070                              l3578 0AE7                              l3498 0A1B  
                            l3826 26DB                              l3818 26CA                              l5266 0765  
                            l5258 0721                              l3770 2220                              l3762 220F  
                            l4810 07BF                              l4482 156F                              l5610 0D49  
                            l3916 112A                              l3596 0B4B                              l3588 0B31  
                            l3780 1A3D                              l5268 0772                              l4396 1031  
                            l3756 21F7                              l3748 21F1                              l5612 0D5F  
                            l5604 0D14                              l5620 0DBB                              l3942 1163  
                            l3934 1135                              l3918 10F3                              l3870 1094  
                            l3854 1073                              l3758 2203                              l3766 2218  
                            l5614 0D75                              l4726 2787                              l3936 114C  
                            l3856 107B                              l3784 1A68                              l5552 2463  
                            l4840 199E                              l4816 07F5                              l5608 0D33  
                            l5624 0DC1                              l5712 1D4F                              l3970 11C7  
                            l3946 1165                              l3890 10CA                              l3874 1097  
                            l4834 194D                              l5618 0D8B                              l4754 1C00  
                            l5802 0920                              l3956 118E                              l3884 10BE  
                            l3796 2684                              l5556 24AC                              l4860 19ED  
                            l5724 1DC3                              l5708 1D42                              l4780 253E  
                            l3990 0DEE                              l4870 2228                              l5558 24BD  
                            l5590 0C7B                              l5566 0BC2                              l5646 1695  
                            l5750 1E74                              l5734 1E10                              l5742 1E4A  
                            l4766 25AC                              l5822 0998                              l3992 0DF0  
                            l4872 222E                              l4856 19D5                              l4848 19B9  
                            l5592 0C91                              l5584 0C75                              l5760 1E89  
                            l5816 095A                              l3994 0DF8                              l4874 2234  
                            l4882 2255                              l5594 0CA7                              l5586 0C76  
                            l5682 1791                              l5658 16E7                              l5674 175D  
                            l5746 1E5C                              l5754 1E87                              l4794 261B  
                            l5834 23B6                              l4876 223A                              l5668 1731  
                            l5836 23B9                              l5780 08C6                              l4878 2240  
                            l5686 17A3                              l5678 1777                              l5784 0900  
                            l5880 1930                              l5872 1903                              l5970 225D  
                            l5778 08C2                              l5876 191D                              l5966 0DA7  
                            l5968 1341                              STR_1 286F                              STR_2 319F  
                            STR_3 31BA                              STR_4 3152                              STR_5 3187  
                            STR_6 3152                              STR_7 31A3                              STR_8 31BC  
                            STR_9 31A7                              u3400 0A89                              u4105 26D2  
                            u3245 21AE                              u4045 269D                              u5005 2126  
                            _PIE0 0716                              u3255 21BC                              u3265 21CC  
                            u4225 10FB                              u3513 0AF9                              u3505 0ADC  
                            u5105 2088                              _PIE3 0719                              _PIE4 071A  
                            u3275 2FB9                              u4315 1141                              u4235 1102  
                            u3435 0AA7                              u4075 26BB                              u5035 24E3  
                            u4405 11B0                              u3390 0A88                              u4255 110B  
                            u4265 111F                              u4505 0E9F                              u3385 0A7D  
                            u4515 0ECE                              u3555 0B4C                              u4525 0F24  
                            u5165 233F                              u7007 2728                              u4295 1138  
                            u3735 2038                              u4535 0F3B                              u3655 0B83  
                            u5095 2081                              u5175 244D                              u7017 2734  
                            u4385 117C                              u4545 0F4A                              u5185 101A  
                            u3825 2366                              u7107 2F09                              u7027 2740  
                            u4395 1197                              u4555 0F5E                              u4715 1857  
                            u7037 274C                              u4645 0FA2                              u3765 2FCF  
                            u3845 2370                              u3925 21FA                              u7047 2758  
                            u4655 0FBD                              u4575 0F67                              u4735 186B  
                            u3775 2FD4                              u3855 237A                              u5720 2051  
                            u7057 2764                              u4665 0FD3                              u3865 2382  
                            u3945 2209                              u7067 2770                              u4755 187D  
                            u3955 2210                              u7077 2FE7                              u6525 0C1C  
                            u5565 278C                              u7087 2FED                              u5575 27BC  
                            u7097 21D9                              u5745 1CA7                              u6545 0CAB  
                            u4795 1897                              u6555 0CFD                              u5925 00CD  
                            u5935 03A7                              u6575 0D8F                              u5945 03CD  
                            u6585 1670                              u5955 043B                              u6675 1D1D  
                            u5965 04E7                              u6917 1944                              u6927 0949  
                            u6937 24F2                              u5995 052F                              u6947 2513  
                            u6957 064C                              u6885 23E6                              u6967 26F2  
                            u6977 2704                              u6987 2710                              u6997 271C  
                            _TMR0 059C                              _TMR1 020C         __size_of_OLED_pulseEnable 0009  
            __size_of_get10msTick 0003                     __CFG_FCMEN$ON 0000                     OLED_send@mode 0023  
                            _data 2743                              _main 18B3                              _ftoa 1E8B  
                            _menu 2397                              _itoa 2458                  channelSetup@data 00B4  
                            fsr0h 0005                              fsr1h 0007                              indf0 0000  
                            fsr0l 0004                              indf1 0001                              fsr1l 0006  
                channelSetup@page 00E5                              btemp 007E                     __CFG_BOREN$ON 0000  
                            start 006F                       ?_OLED_write 0070                      spinInput@dir 00B3  
                 ___fldiv@new_exp 0060                      spinInput@max 00AA                      spinInput@min 00A6  
               _calcRequiredPower 00BC                    ?_pushButtonISR 0070                     __CFG_CSWEN$ON 0000  
               ___bmul@multiplier 0023                     __CFG_MCLRE$ON 0000                ?_calcRequiredPower 006A  
                           ??_ISR 0078                             ??_ema 0034                __size_of_OLED_init 008B  
              __size_of_OLED_send 0017                    _setFudgeFactor 2609                     ___fltol@sign1 006C  
                 __end_of___fladd 0BB8                             ?_main 0070                             ?_ftoa 00A5  
                           ?_menu 00BF                   __end_of___fldiv 11D0                             ?_itoa 00A5  
                 __end_of___awdiv 2397                             STR_10 31B4                             STR_11 31B1  
                           STR_20 30EC                             STR_12 30B8                             STR_21 30F9  
                           STR_13 305D                             STR_22 3196                             STR_14 31B7  
                           STR_30 306A                             STR_15 316B                             STR_23 315A  
                           STR_31 3029                             STR_40 3185                             STR_24 3196  
                           STR_16 313B                             STR_32 3043                             STR_25 316A  
                           STR_41 314A                             STR_17 30D2                             STR_33 309E  
                   __CFG_WDTE$OFF 0000                             STR_34 3162                             STR_26 3139  
                           STR_50 311D                             STR_42 30AB                             STR_18 3050  
                           STR_51 301F                             STR_35 30F9                             STR_43 30DF  
                           STR_19 30C5                             STR_27 301C                             STR_44 309E  
                           STR_36 3195                             STR_60 3130                             STR_52 3091  
                           STR_28 3084                   __end_of___awmod 2225                             STR_45 3185  
                           STR_53 3180                             STR_37 3172                             STR_61 3112  
                           STR_29 3036                             STR_38 3195                             STR_54 31AB  
                           STR_46 3142                             STR_62 3106                             STR_63 319B  
                           STR_39 3179                             STR_55 3077                             STR_47 28A0  
                           STR_56 3185                             STR_48 318E                             STR_49 31AE  
                           STR_57 3127                             STR_58 28B8                             STR_59 3185  
                 __end_of___flmul 1000               ??_calcRequiredPower 006C   checkSensor@sensorUpdateInterval 0124  
                 __end_of___flsub 2026                   __end_of___fltol 26EA                             _T1CLK 0211  
                __end_of_OLED_Off 2F36                   ___awdiv@divisor 0020                             _T1CON 020E  
                           _IOCAN 1F3E                             _IOCAP 1F3D                             _IOCCN 1F54  
                           i1l321 2198                             i1l281 001C                             i1l290 0066  
                           i1l284 0038                             i1l294 006D                   ___awdiv@counter 0025  
           __end_of_setLoadSwitch 2EFE             __end_of_reset10msTick 2003                             _TRISA 0012  
                           _TRISB 0013                             _TRISC 0014            uartReceiveISR@checksum 00E9  
             ___lmul@multiplicand 0024              __size_of_checkSensor 017B                      ?_setDPOffset 00B4  
                   __CFG_WRTB$OFF 0000                     __CFG_WRTC$OFF 0000        __end_of_checkChannelStatus 07BC  
                  OLED_send@value 0025                             _getPB 2F57                    statusView@data 00B4  
                  statusView@page 00E7          statusView@prevSensorStat 00EE                             _p_fct 01C0  
                           ema@in 002C                  ?_uartIsDataReady 0070                             _error 0800  
                           _setup 1B56                    setSkyTemp@data 00B4                             ftoa@w 00B0  
                           pclath 000A                   __end_of_timeNow 2F8B              __size_of_channelView 021C  
                           status 0003                             wtemp0 007E         __end_of_calcRequiredPower 0509  
                 __end_of_strncpy 20CE                     spinInput@step 00AE                       _systemCheck 0839  
                 __initialization 0071                      __end_of_main 194A                      __end_of_ftoa 2000  
                    __end_of_menu 23EF                      __end_of_itoa 24C1           __size_of_getAnalogValue 001D  
          __end_of_setFudgeFactor 2678                    __CFG_SAFEN$OFF 0000                            ??_main 00D9  
                          ??_ftoa 00AB                            ??_menu 00C1                            ??_itoa 00A9  
                  OLED_print_xy@s 0028              __end_of_getNextState 19F7           __size_of_setOutputPower 0173  
             __size_of_OLED_write 000B                setOutputPower@data 00B4             getAnalogValue@channel 0023  
                          ?_getPB 0070           _OLED_scrollDisplayRight 2EEE                            _ADCON1 009E  
           calcRequiredPower@data 006A                            ?_error 0070                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0022                            ?_setup 00B4  
                          _ANSELA 1F38                            _ANSELB 1F43                            _ANSELC 1F4E  
              __CFG_RSTOSC$HFINT1 0000                            _T0CON0 059E                            _T0CON1 059F  
                          _RC1REG 0119                            _RC1STA 011D                            _RC6PPS 1F26  
                          i1l4440 20C3                            i1l5306 2172                            i1l4434 20A2  
                          i1l4436 20BA                            i1l5318 218C                            i1l5334 0831  
                          i1l5350 227D                            i1l5422 0016                            i1l5344 2275  
                          i1l5440 002E                    __CFG_WDTCCS$SC 0000                            i1l5362 22B0  
                          i1l5434 0027                            i1l5356 229B                            i1l5446 0035  
                          i1l5456 005E             __end_of_getDataPacket 2EE7                            _INTCON 000B  
               __end_of_OLED_init 2775                 __end_of_OLED_send 2FC5                   systemCheck@data 00B0  
                          _OSCFRQ 0893                            _SPBRGL 011B                            _TX1REG 011A  
                          _TX1STA 011E              __end_of_getStateFunc 0800              getNextState@intState 0026  
                __end_of___xxtofl 18B3                   ??_pushButtonISR 0070                    __CFG_PWRTE$OFF 0000  
                          ___flge 19F7                            ___bmul 2F9C                            ___fleq 22FC  
                          ___lmul 206D        OLED_loadSpecialChars@F7973 01A0                         ??___fladd 0056  
                          ___wmul 2FC5                         ??___fldiv 0056                         ??___awdiv 0024  
                  __CFG_STVREN$ON 0000                         ??___awmod 0024                         ??___flmul 003C  
                       ??___flsub 006A                         ??___fltol 00A0                   ?_setFudgeFactor 00B4  
              channelSetup@chData 00BA          __size_of_OLED_returnHome 0004                            _paging 24C1  
                ___awdiv@quotient 0027                   ___awmod@divisor 0020                            _rotISR 0801  
                          _rotDir 00EC           __size_of_initGlobalData 0108                     ?_OLED_command 0070  
                 ___awmod@counter 0025                            menu@pb 00C6                __size_of__Umul8_16 0020  
           __size_of_channelSetup 0195             OLED_waitForReady@busy 0020                         ??_timeNow 0024  
               OLED_command@value 0026                         ??_strncpy 0073                  _OLED_pulseEnable 2F06  
                      ___flge@ff1 0068                        ___flge@ff2 006C                     checkSensor@dp 00AA  
                    ___xxtofl@arg 0030                      ___xxtofl@exp 002F                      ___xxtofl@val 0026  
                      ___fleq@ff1 0020                        ___fleq@ff2 0024                    spinInput@input 00A4  
         __end_of__initialization 00B8                      ftoa@intValue 00AF        __size_of_calcRequiredPower 044D  
                      ___fltol@f1 0068                         ?_OLED_Off 0070               ___bmul@multiplicand 0020  
        __size_of_OLED_write4bits 003F                    __pcstackCOMMON 0070                      __pidataBANK1 0002  
                    __pidataBANK2 2EFE                      __pidataBANK3 2132                     __end_of_getPB 2F62  
            uartReceiveISR@buffer 0136                     __end_of_error 0801          __size_of_getAnalogValues 018C  
                    _channelSetup 166B                     __end_of_setup 1C10                    ??_OLED_command 0026  
  __size_of_OLED_loadSpecialChars 0027                setFudgeFactor@data 00B4     __end_of_OLED_loadSpecialChars 206D  
              __size_of_getRotDir 000B         ??_OLED_scrollDisplayRight 0027                           ??_getPB 0020  
          __size_of_OLED_print_xy 0032                           ??_error 0020                        _dataPacket 014A  
               ?_setChannelSwitch 0020                           ??_setup 00B6              __size_of_setDPOffset 006F  
                      __pbssBANK1 00DE                        __pbssBANK2 0120                uartIsDataReady@ret 0021  
         __size_of_uartReceiveISR 0048                ??_setChannelSwitch 0021                __size_of_menuError 0011  
                    ??_OLED_write 0026                        ??_OLED_Off 0027                 __end_of__Umul8_16 2046  
                      __pmaintext 18B3                    _getAnalogValue 1800                           ?___flge 0068  
                         ?___bmul 0020                           ?___fleq 0020                           ?___lmul 0020  
                         ?___wmul 0020                 getStateFunc@state 002B                   __CFG_PPS1WAY$ON 0000  
                      __pintentry 0004             __size_of_getNextState 00AD                           ?_paging 0027  
               _OLED_waitForReady 2FE1                    ___lmul@product 0028                           ?_rotISR 0070  
        ??_OLED_scrollDisplayLeft 0027                __size_of_timeSince 0056                ?_OLED_waitForReady 0070  
              __size_of_uartReset 0009                    _setOutputPower 1D18                 ??_OLED_returnHome 0027  
                       ?___xxtofl 0026                __size_of_spinInput 00B1                           _OSCCON1 088D  
              __end_of_OLED_write 2F41                     ??_get10msTick 0070               ??_OLED_waitForReady 0020  
           __size_of_getStateFunc 0044                 pushButtonISR@time 0071                       rotISR@input 0077  
                    _getNextState 194A                      ?_systemCheck 00B0                _checkChannelStatus 0509  
          __end_of_getAnalogValue 181D                 __end_of_getRotDir 2F57                        ema@average 002E  
                   _OLED_print_xy 20CE                getAnalogValues@adc 006E         __end_of_OLED_waitForReady 3000  
                 __size_of___flge 00AE                   __size_of___bmul 0012                   __size_of___fleq 0049  
                         ___fladd 09D6                           ___fldiv 1056                           ___awdiv 2345  
                 __size_of___lmul 0030                           ___awmod 21DF                           ___flmul 0DD4  
                         ___flsub 2007                           ___fltol 2678                   __size_of___wmul 001C  
                 OLED_write@value 0026               ?_checkChannelStatus 00A5                     ?_uartSendByte 0070  
                  _initGlobalData 1C10                   __size_of_paging 006B                 ??_OLED_write4bits 0020  
                      _initialize 22B4                   __size_of_rotISR 0038            __end_of_setOutputPower 1E8B  
                         __ptext1 0839                           __ptext2 2F2C                           __ptext3 2397  
                         __ptext4 2609                           __ptext5 252C                           __ptext6 259A  
                         __ptext7 1B56                           __ptext8 2775                           __ptext9 1D18  
                   ??_checkSensor 00A6                           _pbState 007D                      _getStateFunc 07BC  
                 __CFG_WRTAPP$OFF 0000                      __size_of_ISR 006B                  _channelView$1023 00BC  
               __end_of_menuError 2F9C                           ema@tmp0 003C                      __size_of_ema 0069  
                      ??___xxtofl 002A                  ___awmod@dividend 0022                 ??_getAnalogValues 006A  
                       _IOCAFbits 1F3F                   __CFG_WRTSAF$OFF 0000                           _rxCount 00EB  
                         _timeNow 2F7A                     ??_channelView 00B6                           clrloop0 2F63  
            ??_checkChannelStatus 00A7           setChannelSwitch@channel 0023                           _strncpy 209D  
            end_of_initialization 00B8                        _setLensDia 2775                           ftoa@len 00AD  
                         ftoa@pos 00B1                           ftoa@str 00B2                           paging@n 002C  
                  paging@lastPage 0027             checkChannelStatus@adc 00AB              __end_of_OLED_command 2F22  
           checkChannelStatus@avg 0132                           init_ram 2F6E                           itoa@str 00A5  
                         initloop 2F6F               __end_of_get10msTick 2EEA                        _setSkyTemp 252C  
               __end_of_timeSince 1056                 __end_of_uartReset 2F18          __size_of_uartIsDataReady 000B  
                ??_setFudgeFactor 00B6                         _OLED_init 26EA                         _OLED_send 2FAE  
                 ?_getAnalogValue 0020            __size_of_setLoadSwitch 0008            __size_of_reset10msTick 0003  
             OLED_setCursor@F7960 0167                     ?_returnToPage 0070                 __end_of_spinInput 1B56  
                  ?_OLED_print_xy 0027                OLED_print_xy@F7968 0163            __end_of_initGlobalData 1D18  
                   _dataReadyFlag 00EA                    ??_uartSendByte 0020             __CFG_WDTCPS$WDTCPS_31 0000  
        __end_of_OLED_pulseEnable 2F0F                         _PORTAbits 000C                         _PORTCbits 000E  
                 ?_setOutputPower 00B4   __size_of_OLED_scrollDisplayLeft 0004                   _selectedChannel 00E8  
                     ___fladd@grs 0061                     ___xxtofl@sign 002E                         _TRISCbits 0014  
                     ___fldiv@grs 0062                       ___fldiv@rem 005B              _getAnalogValues$2297 006A  
             __end_of_checkSensor 134B                  __CFG_FEXTOSC$OFF 0000      OLED_loadSpecialChars@special 0028  
                  _uartReceiveISR 226C                       ___flmul@grs 0042                        _statusView 14D7  
             __end_of_channelView 0DD4                   channelView@data 00B4                 getNextState@state 002B  
                 channelView@page 00E6                        ?_OLED_init 0070                    ??_returnToPage 0027  
                      ?_OLED_send 0023             __end_of_pushButtonISR 21A0                 __size_of_OLED_Off 000A  
      __size_of_OLED_waitForReady 001F                   ?_initGlobalData 0020                    __end_of___flge 1AA5  
            __end_of_nextStateTbl 2854                    __end_of___bmul 2FAE                    __end_of___fleq 2345  
                  __end_of___lmul 209D                    __end_of___wmul 2FE1                       ?_initialize 0070  
          __size_of_getDataPacket 0002                    __end_of_paging 252C                        ftoa@fValue 00A5  
                  __end_of_rotISR 0839                     _setLoadSwitch 2EF6               start_initialization 0071  
                   _reset10msTick 2000                       __end_of_ISR 006F                       __end_of_ema 2458  
        OLED_print_xy@row_offsets 002B            __end_of_uartReceiveISR 22B4                       _get10msTick 2EE7  
                     ?_setLensDia 00B4            _OLED_scrollDisplayLeft 2EEA              calcRequiredPower@Rth 00A4  
            initGlobalData@chData 0027              calcRequiredPower@phi 00C4                       ?_setSkyTemp 00B4  
                 ??_OLED_print_xy 002A                    systemCheck@str 00B6                  __CFG_LPBOREN$OFF 0000  
        checkChannelStatus@chData 00B1                        error@error 0070                          ??___flge 00A0  
                        ??___bmul 0021                          ??___fleq 0028              __size_of_systemCheck 019D  
                  timeSince@since 0024                          ??___lmul 0028         __size_of_setChannelSwitch 0047  
                 _OLED_returnHome 2003                          ??___wmul 0024                         __Umul8_16 2026  
               ??_uartIsDataReady 0020                       __pdataBANK1 00EE                       __pdataBANK2 0163  
                     __pdataBANK3 01A0                setLoadSwitch@state 0020                          ??_paging 0028  
                        ??_rotISR 0070             setChannelSwitch@state 0020                  OLED_print_xy@col 002F  
                     _checkSensor 11D0                         ___fladd@a 0052                         ___fladd@b 004E  
                OLED_print_xy@row 0027                    ?_setLoadSwitch 0070                         ___fldiv@a 004E  
                       ___fldiv@b 0052                    ?_reset10msTick 0070                       __pbssBIGRAM 2743  
                       ___flmul@a 0038                         ___flmul@b 0034                       __pbssCOMMON 007C  
                       ___flsub@a 0062                         ___flsub@b 0066                         ___latbits 0003  
                   ??_setDPOffset 00B6                     __pcstackBANK0 0020                     __pcstackBANK1 00A0  
           _OLED_loadSpecialChars 2046             __size_of_OLED_command 000A                 __size_of___xxtofl 0096  
               paging@currentPage 002A                       _channelView 0BB8                   ?_uartReceiveISR 0070  
            __end_of_uartSendByte 2F2C                      systemCheck@n 00B9                       ?_statusView 00B4  
                   _getDataPacket 2EE5               __size_of_initialize 0048              setOutputPower@chData 00BA  
                 _OLED_write4bits 21A0                       ??_OLED_init 0027                       ??_OLED_send 0024  
                        ?___fladd 004E                   _getAnalogValues 134B                          ?___fldiv 004E  
                        ?___awdiv 0020                          ?___awmod 0020                          ?___flmul 0034  
                        ?___flsub 0062                          ?___fltol 0068                    _g_updateScreen 00EF  
                       _getRotDir 2F4C                        ?__Umul8_16 0020               __size_of_setLensDia 008B  
        ?_OLED_scrollDisplayRight 0070                      _OLED_command 2F18                          _BAUD1CON 011F  
                  getNextState@pb 0027                      channelView@n 00BE               __size_of_setSkyTemp 006E  
            __end_of_returnToPage 2132                          ?_timeNow 0020                    __size_of_getPB 000B  
                       _menuError 2F8B                    __size_of_error 0001                         _tick100ms 0128  
                        ?_strncpy 0070                    __size_of_setup 00BA                    ?_getDataPacket 0070  
                ??_getAnalogValue 0022               __end_of_setDPOffset 2609                    ___wmul@product 0024  
                        _LATAbits 0018                          _LATBbits 0019                          _LATCbits 001A  
         __end_of_OLED_returnHome 2007                         clear_ram0 2F62                     paging@lastDir 00E2  
                        _PIE0bits 0716                          _PIE3bits 0719                          _PIE4bits 071A  
                        _OLED_Off 2F2C                    setLensDia@data 00B4                          _PIR0bits 070C  
                        _PIR3bits 070F                          _PIR4bits 0710                         _timeSince 1000  
                       _uartReset 2F0F                   initGlobalData@n 0026                 __CFG_BBSIZE$BB512 0000  
                ??_setOutputPower 00B6                        ?_getRotDir 0070                         _spinInput 1AA5  
               ?_OLED_pulseEnable 0070                   ??_setLoadSwitch 0020                   ??_reset10msTick 0070  
                      _ADCON0bits 009D                 ___wmul@multiplier 0020                      _RX1DTPPSbits 1ECB  
             __size_of_statusView 0194                   setDPOffset@data 00B4                ??_OLED_pulseEnable 0020  
          ?_OLED_loadSpecialChars 0070                     menu@nextState 00C9              OLED_write4bits@value 0022  
                     _curRotState 007C                  _transition_table 3000              __end_of_stateFuncTbl 286F  
                      ?_menuError 0070                 ___lmul@multiplier 0020           __end_of_OLED_write4bits 21DF  
     __size_of_checkChannelStatus 02B3                      _nextStateTbl 2800                         ftoa@width 00A9  
         __end_of_getAnalogValues 14D7               calcRequiredPower@T1 00D0               calcRequiredPower@T2 00D4  
                ??_initGlobalData 0022                         paging@dir 002B                 _OLED_clearDisplay 2EF2  
                   uartSendByte@s 0020                         menu@state 00E3                        ?_timeSince 0024  
                      ?_uartReset 0070   __end_of_OLED_scrollDisplayRight 2EF2                ?_OLED_clearDisplay 0070  
       checkChannelStatus@channel 00E1                  _setChannelSwitch 2225           checkChannelStatus@ready 00DF  
                     ??__Umul8_16 0022                         itoa@value 00A7               getAnalogValues@data 0068  
             getAnalogValues@avgI 012C                     ?_channelSetup 00B4               getAnalogValues@avgT 0130  
             getAnalogValues@avgV 012E                         itoa@width 00A8                  __size_of___fladd 01E2  
                __size_of___fldiv 017A                  __size_of___awdiv 0052                  __size_of___awmod 0046  
                      ?_spinInput 00A4                  __size_of___flmul 022C                  __size_of___flsub 001F  
                __size_of___fltol 0072            OLED_loadSpecialChars@n 0048                      ??_initialize 0020  
       checkChannelStatus@current 00AD               ??_OLED_clearDisplay 0027         checkChannelStatus@samples 00E0  
                        ___xxtofl 181D                       _rxFErrCount 0135             __size_of_uartSendByte 000A  
                     _setDPOffset 259A          checkSensor@sensorTimeout 0120                          __ptext10 166B  
                        __ptext11 0BB8                          __ptext20 2F9C                          __ptext12 14D7  
                        __ptext21 2100                          __ptext13 2F57                          __ptext30 2FC5  
                        __ptext22 24C1                          __ptext14 1AA5                          __ptext31 20CE  
                        __ptext23 2F4C                          __ptext15 2F8B                          __ptext40 2F7A  
                        __ptext32 22B4                          __ptext24 2EEE                          __ptext16 2003  
                        __ptext41 2EE5                          __ptext33 1C10                          __ptext25 2EEA  
                        __ptext17 2EF2                          __ptext50 2678                          __ptext42 0509  
                        __ptext34 134B                          __ptext26 2458                          __ptext18 07BC  
                        __ptext51 19F7                          __ptext43 2EF6                          __ptext35 11D0  
                        __ptext27 21DF                          __ptext19 194A                          __ptext60 2F36  
                        __ptext52 22FC                          __ptext44 2225                          __ptext36 2F22  
                        __ptext28 2345                          __ptext61 26EA                          __ptext53 00BC  
                        __ptext45 1800                          __ptext37 2F0F                          __ptext29 1E8B  
                        __ptext70 0801                          __ptext62 2F18                          __ptext54 2007  
                        __ptext46 0800                          __ptext38 2F41                          __ptext71 2164  
                        __ptext63 2FE1                          __ptext55 09D6                          __ptext47 23EF  
                        __ptext39 1000                          __ptext72 2000                          __ptext64 2FAE  
                        __ptext56 0DD4                          __ptext48 206D                          __ptext73 2EE7  
                        __ptext65 21A0                          __ptext57 2026                          __ptext49 181D  
                        __ptext66 2F06                          __ptext58 1056                          __ptext59 2046  
                        __ptext68 226C                          __ptext69 209D                      ?_get10msTick 0070  
                __size_of_timeNow 0011                   ??_getDataPacket 0020           ?_OLED_scrollDisplayLeft 0070  
                    ??_setLensDia 00B6                     getNextState@n 002C                       _OSCCON3bits 088F  
                __size_of_strncpy 0031                          ema@alpha 0030                     __size_of_main 0097  
                   __size_of_ftoa 0175         __end_of_OLED_clearDisplay 2EF6              main@sysCheckInterval 00DA  
                   __size_of_menu 0058                     __size_of_itoa 0069                      ??_setSkyTemp 00B6  
                 _uartIsDataReady 2F41                          getPB@ret 0021                          _tick10ms 00ED  
                ?_OLED_returnHome 0070                __end_of_initialize 22FC              __CFG_WDTCWS$WDTCWS_7 0000  
                      _RC1STAbits 011D                       _rxOErrCount 0134                    ??_channelSetup 00B6  
                       setup@data 00B4                          int$flags 007E                         setup@page 00E4  
                     ??_getRotDir 0020                      _uartSendByte 2F22             __size_of_returnToPage 0032  
              __end_of_setLensDia 2800           __size_of_setFudgeFactor 006F                      ?_checkSensor 00A4  
                ??_uartReceiveISR 0076                          ftoa@prec 00AA                          ftoa@sign 00AE  
                      _INTCONbits 000B                calcRequiredPower@A 00C8                calcRequiredPower@d 00C0  
              calcRequiredPower@n 00D8                calcRequiredPower@p 00A0                __end_of_setSkyTemp 259A  
                        menu@data 00BF                initGlobalData@data 0020                          menu@page 00C5  
                        menu@func 00C7    __end_of_OLED_scrollDisplayLeft 2EEE                      timeSince@now 0030  
          checkChannelStatus@data 00A5                    __pstringtext10 305D                    __pstringtext11 306A  
                  __pstringtext20 30DF                    __pstringtext12 3077                    __pstringtext21 30EC  
                  __pstringtext13 3084                    __pstringtext30 314A                    __pstringtext22 30F9  
                  __pstringtext14 3091                    __pstringtext31 3152                    __pstringtext23 3106  
                  __pstringtext15 309E                    __pstringtext40 3195                    __pstringtext32 315A  
                  __pstringtext24 3112                    __pstringtext16 30AB                    __pstringtext41 319B  
                  __pstringtext33 3162                    __pstringtext25 311D                    __pstringtext17 30B8  
                  __pstringtext50 31BA                    __pstringtext42 319F                    __pstringtext34 316A  
                  __pstringtext26 3127                    __pstringtext18 30C5                    __pstringtext51 31BC  
                  __pstringtext43 31A3                    __pstringtext35 3172                    __pstringtext27 3130  
                  __pstringtext19 30D2                    __pstringtext52 0000                    __pstringtext44 31A7  
                  __pstringtext36 3179                    __pstringtext28 3139                    __pstringtext45 31AB  
                  __pstringtext37 3180                    __pstringtext29 3142                    __pstringtext46 31AE  
                  __pstringtext38 3187                    __pstringtext47 31B1                    __pstringtext39 318E  
                  __pstringtext48 31B4                    __pstringtext49 31B7            __size_of_pushButtonISR 003C  
                     ??_menuError 0030                      ?_channelView 00B4                  ?_OLED_write4bits 0070  
                        intlevel1 0000                      ??_statusView 00B6                 __CFG_CLKOUTEN$OFF 0000  
                ?_getAnalogValues 0068                     ?_getNextState 0026                     ??_systemCheck 00B2  
                      _OLED_write 2F36                         strncpy@cp 0075             __end_of_OLED_print_xy 2100  
                    _returnToPage 2100                       ??_timeSince 0028                       ??_uartReset 0020  
                     ??_spinInput 00B2                      getRotDir@ret 0021                     __pstringtext1 2800  
                   __pstringtext2 3000                     __pstringtext3 2854                     __pstringtext4 28A0  
                   __pstringtext5 301C                     __pstringtext6 3029                     __pstringtext7 3036  
                   __pstringtext8 3043                     __pstringtext9 3050                     ?_getStateFunc 0026  
          __Umul8_16@multiplicand 0020                     getStateFunc@n 002C                __end_of_statusView 166B  
                        strncpy@d 0074                          strncpy@n 0071                          strncpy@s 0070  
         __end_of_uartIsDataReady 2F4C                     ___fladd@signs 005E  __size_of_OLED_scrollDisplayRight 0004  
                checkSensor@state 00DE                      ___fladd@aexp 005F                      ___fladd@bexp 0060  
      __size_of_OLED_clearDisplay 0004                   checkSensor@data 00A4                    ??_getNextState 0028  
            __Umul8_16@multiplier 0028                 __Umul8_16@product 0024  
