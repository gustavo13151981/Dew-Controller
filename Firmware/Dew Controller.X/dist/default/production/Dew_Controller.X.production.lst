

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Jan 26 13:58:03 2020

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	idataBANK7,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	stringtext10,global,class=STRCODE,delta=2
    16                           	psect	stringtext11,global,class=STRCODE,delta=2
    17                           	psect	stringtext12,global,class=STRCODE,delta=2
    18                           	psect	stringtext13,global,class=STRCODE,delta=2
    19                           	psect	stringtext14,global,class=STRCODE,delta=2
    20                           	psect	stringtext15,global,class=STRCODE,delta=2
    21                           	psect	stringtext16,global,class=STRCODE,delta=2
    22                           	psect	stringtext17,global,class=STRCODE,delta=2
    23                           	psect	stringtext18,global,class=STRCODE,delta=2
    24                           	psect	stringtext19,global,class=STRCODE,delta=2
    25                           	psect	stringtext20,global,class=STRCODE,delta=2
    26                           	psect	stringtext21,global,class=STRCODE,delta=2
    27                           	psect	stringtext22,global,class=STRCODE,delta=2
    28                           	psect	stringtext23,global,class=STRCODE,delta=2
    29                           	psect	stringtext24,global,class=STRCODE,delta=2
    30                           	psect	stringtext25,global,class=STRCODE,delta=2
    31                           	psect	stringtext26,global,class=STRCODE,delta=2
    32                           	psect	stringtext27,global,class=STRCODE,delta=2
    33                           	psect	stringtext28,global,class=STRCODE,delta=2
    34                           	psect	cinit,global,class=CODE,merge=1,delta=2
    35                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    37                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    38                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    39                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    40                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    41                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    42                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    43                           	psect	inittext,global,class=CODE,delta=2
    44                           	psect	clrtext,global,class=CODE,delta=2
    45                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    46                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    47                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    48                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    49                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    50                           	psect	text3,local,class=CODE,merge=1,delta=2
    51                           	psect	text4,local,class=CODE,merge=1,delta=2
    52                           	psect	swtext1,local,class=CONST,delta=2
    53                           	psect	text20,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	intentry,global,class=CODE,delta=2
    60                           	psect	text77,local,class=CODE,merge=1,delta=2
    61                           	psect	text79,local,class=CODE,merge=1,delta=2
    62                           	psect	text80,local,class=CODE,merge=1,delta=2
    63                           	psect	pa_nodes0,global,class=CODE,delta=2
    64                           	dabs	1,0xCA0,32
    65                           	dabs	1,0xC20,80
    66                           	dabs	1,0xBEB,5
    67                           	dabs	1,0x277B,0,_data
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.00
    71                           ; Generated 27/05/2018 GMT
    72                           ; 
    73                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F15356 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  0010                     	;# 
   120  0012                     	;# 
   121  0013                     	;# 
   122  0014                     	;# 
   123  0016                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  009B                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  0119                     	;# 
   134  0119                     	;# 
   135  0119                     	;# 
   136  011A                     	;# 
   137  011A                     	;# 
   138  011A                     	;# 
   139  011B                     	;# 
   140  011B                     	;# 
   141  011B                     	;# 
   142  011B                     	;# 
   143  011B                     	;# 
   144  011C                     	;# 
   145  011C                     	;# 
   146  011C                     	;# 
   147  011D                     	;# 
   148  011D                     	;# 
   149  011D                     	;# 
   150  011E                     	;# 
   151  011E                     	;# 
   152  011E                     	;# 
   153  011F                     	;# 
   154  011F                     	;# 
   155  011F                     	;# 
   156  011F                     	;# 
   157  011F                     	;# 
   158  018C                     	;# 
   159  018D                     	;# 
   160  018E                     	;# 
   161  018F                     	;# 
   162  0190                     	;# 
   163  0191                     	;# 
   164  0192                     	;# 
   165  0196                     	;# 
   166  0197                     	;# 
   167  0198                     	;# 
   168  0199                     	;# 
   169  019A                     	;# 
   170  019B                     	;# 
   171  019C                     	;# 
   172  020C                     	;# 
   173  020C                     	;# 
   174  020D                     	;# 
   175  020E                     	;# 
   176  020F                     	;# 
   177  020F                     	;# 
   178  0210                     	;# 
   179  0210                     	;# 
   180  0211                     	;# 
   181  0211                     	;# 
   182  028C                     	;# 
   183  028C                     	;# 
   184  028D                     	;# 
   185  028D                     	;# 
   186  028E                     	;# 
   187  028F                     	;# 
   188  0290                     	;# 
   189  0291                     	;# 
   190  030C                     	;# 
   191  030C                     	;# 
   192  030D                     	;# 
   193  030E                     	;# 
   194  030F                     	;# 
   195  0310                     	;# 
   196  0310                     	;# 
   197  0311                     	;# 
   198  0312                     	;# 
   199  0313                     	;# 
   200  0314                     	;# 
   201  0314                     	;# 
   202  0315                     	;# 
   203  0316                     	;# 
   204  0318                     	;# 
   205  0318                     	;# 
   206  0319                     	;# 
   207  031A                     	;# 
   208  031C                     	;# 
   209  031C                     	;# 
   210  031D                     	;# 
   211  031E                     	;# 
   212  038C                     	;# 
   213  038C                     	;# 
   214  038D                     	;# 
   215  038E                     	;# 
   216  058C                     	;# 
   217  058C                     	;# 
   218  058D                     	;# 
   219  058E                     	;# 
   220  058F                     	;# 
   221  058F                     	;# 
   222  0590                     	;# 
   223  0591                     	;# 
   224  0592                     	;# 
   225  0593                     	;# 
   226  059C                     	;# 
   227  059C                     	;# 
   228  059D                     	;# 
   229  059D                     	;# 
   230  059E                     	;# 
   231  059F                     	;# 
   232  060C                     	;# 
   233  060D                     	;# 
   234  060E                     	;# 
   235  060F                     	;# 
   236  0610                     	;# 
   237  0611                     	;# 
   238  0612                     	;# 
   239  0613                     	;# 
   240  0614                     	;# 
   241  070C                     	;# 
   242  070D                     	;# 
   243  070E                     	;# 
   244  070F                     	;# 
   245  0710                     	;# 
   246  0711                     	;# 
   247  0712                     	;# 
   248  0713                     	;# 
   249  0716                     	;# 
   250  0717                     	;# 
   251  0718                     	;# 
   252  0719                     	;# 
   253  071A                     	;# 
   254  071B                     	;# 
   255  071C                     	;# 
   256  071D                     	;# 
   257  0796                     	;# 
   258  0797                     	;# 
   259  0798                     	;# 
   260  0799                     	;# 
   261  079A                     	;# 
   262  079B                     	;# 
   263  080C                     	;# 
   264  080D                     	;# 
   265  080E                     	;# 
   266  080F                     	;# 
   267  0810                     	;# 
   268  0811                     	;# 
   269  0812                     	;# 
   270  0813                     	;# 
   271  0814                     	;# 
   272  081A                     	;# 
   273  081A                     	;# 
   274  081B                     	;# 
   275  081C                     	;# 
   276  081C                     	;# 
   277  081D                     	;# 
   278  081E                     	;# 
   279  081F                     	;# 
   280  088C                     	;# 
   281  088D                     	;# 
   282  088E                     	;# 
   283  088F                     	;# 
   284  0890                     	;# 
   285  0891                     	;# 
   286  0892                     	;# 
   287  0893                     	;# 
   288  0895                     	;# 
   289  0896                     	;# 
   290  090C                     	;# 
   291  090E                     	;# 
   292  090F                     	;# 
   293  091F                     	;# 
   294  098F                     	;# 
   295  098F                     	;# 
   296  0990                     	;# 
   297  0991                     	;# 
   298  0992                     	;# 
   299  0993                     	;# 
   300  0994                     	;# 
   301  0995                     	;# 
   302  0996                     	;# 
   303  0997                     	;# 
   304  0A19                     	;# 
   305  0A19                     	;# 
   306  0A1A                     	;# 
   307  0A1A                     	;# 
   308  0A1B                     	;# 
   309  0A1B                     	;# 
   310  0A1B                     	;# 
   311  0A1C                     	;# 
   312  0A1C                     	;# 
   313  0A1D                     	;# 
   314  0A1D                     	;# 
   315  0A1E                     	;# 
   316  0A1E                     	;# 
   317  0A1F                     	;# 
   318  0A1F                     	;# 
   319  0A1F                     	;# 
   320  1E0F                     	;# 
   321  1E10                     	;# 
   322  1E11                     	;# 
   323  1E12                     	;# 
   324  1E13                     	;# 
   325  1E14                     	;# 
   326  1E15                     	;# 
   327  1E16                     	;# 
   328  1E17                     	;# 
   329  1E18                     	;# 
   330  1E19                     	;# 
   331  1E1A                     	;# 
   332  1E1B                     	;# 
   333  1E1C                     	;# 
   334  1E1D                     	;# 
   335  1E1E                     	;# 
   336  1E1F                     	;# 
   337  1E20                     	;# 
   338  1E21                     	;# 
   339  1E22                     	;# 
   340  1E23                     	;# 
   341  1E24                     	;# 
   342  1E25                     	;# 
   343  1E26                     	;# 
   344  1E27                     	;# 
   345  1E28                     	;# 
   346  1E29                     	;# 
   347  1E2A                     	;# 
   348  1E2B                     	;# 
   349  1E2C                     	;# 
   350  1E2D                     	;# 
   351  1E2E                     	;# 
   352  1E2F                     	;# 
   353  1E30                     	;# 
   354  1E31                     	;# 
   355  1E32                     	;# 
   356  1E33                     	;# 
   357  1E34                     	;# 
   358  1E35                     	;# 
   359  1E36                     	;# 
   360  1E37                     	;# 
   361  1E8F                     	;# 
   362  1E90                     	;# 
   363  1E91                     	;# 
   364  1E92                     	;# 
   365  1E93                     	;# 
   366  1E9C                     	;# 
   367  1EA1                     	;# 
   368  1EA2                     	;# 
   369  1EB1                     	;# 
   370  1EBB                     	;# 
   371  1EBC                     	;# 
   372  1EBD                     	;# 
   373  1EBE                     	;# 
   374  1EC3                     	;# 
   375  1EC5                     	;# 
   376  1EC6                     	;# 
   377  1EC7                     	;# 
   378  1EC8                     	;# 
   379  1EC9                     	;# 
   380  1ECA                     	;# 
   381  1ECB                     	;# 
   382  1ECC                     	;# 
   383  1ECD                     	;# 
   384  1ECE                     	;# 
   385  1F10                     	;# 
   386  1F11                     	;# 
   387  1F12                     	;# 
   388  1F13                     	;# 
   389  1F14                     	;# 
   390  1F15                     	;# 
   391  1F16                     	;# 
   392  1F17                     	;# 
   393  1F18                     	;# 
   394  1F19                     	;# 
   395  1F1A                     	;# 
   396  1F1B                     	;# 
   397  1F1C                     	;# 
   398  1F1D                     	;# 
   399  1F1E                     	;# 
   400  1F1F                     	;# 
   401  1F20                     	;# 
   402  1F21                     	;# 
   403  1F22                     	;# 
   404  1F23                     	;# 
   405  1F24                     	;# 
   406  1F25                     	;# 
   407  1F26                     	;# 
   408  1F27                     	;# 
   409  1F38                     	;# 
   410  1F39                     	;# 
   411  1F3A                     	;# 
   412  1F3B                     	;# 
   413  1F3C                     	;# 
   414  1F3D                     	;# 
   415  1F3E                     	;# 
   416  1F3F                     	;# 
   417  1F43                     	;# 
   418  1F44                     	;# 
   419  1F45                     	;# 
   420  1F46                     	;# 
   421  1F47                     	;# 
   422  1F48                     	;# 
   423  1F49                     	;# 
   424  1F4A                     	;# 
   425  1F4E                     	;# 
   426  1F4F                     	;# 
   427  1F50                     	;# 
   428  1F51                     	;# 
   429  1F52                     	;# 
   430  1F53                     	;# 
   431  1F54                     	;# 
   432  1F55                     	;# 
   433  1F65                     	;# 
   434  1F68                     	;# 
   435  1F69                     	;# 
   436  1F6A                     	;# 
   437  1F6B                     	;# 
   438  1FE4                     	;# 
   439  1FE5                     	;# 
   440  1FE6                     	;# 
   441  1FE7                     	;# 
   442  1FE8                     	;# 
   443  1FE8                     	;# 
   444  1FE9                     	;# 
   445  1FEA                     	;# 
   446  1FEB                     	;# 
   447  1FED                     	;# 
   448  1FEE                     	;# 
   449  1FEF                     	;# 
   450  0000                     	;# 
   451  0001                     	;# 
   452  0002                     	;# 
   453  0003                     	;# 
   454  0004                     	;# 
   455  0005                     	;# 
   456  0006                     	;# 
   457  0007                     	;# 
   458  0008                     	;# 
   459  0009                     	;# 
   460  000A                     	;# 
   461  000B                     	;# 
   462  000C                     	;# 
   463  000D                     	;# 
   464  000E                     	;# 
   465  0010                     	;# 
   466  0012                     	;# 
   467  0013                     	;# 
   468  0014                     	;# 
   469  0016                     	;# 
   470  0018                     	;# 
   471  0019                     	;# 
   472  001A                     	;# 
   473  009B                     	;# 
   474  009B                     	;# 
   475  009C                     	;# 
   476  009D                     	;# 
   477  009E                     	;# 
   478  009F                     	;# 
   479  0119                     	;# 
   480  0119                     	;# 
   481  0119                     	;# 
   482  011A                     	;# 
   483  011A                     	;# 
   484  011A                     	;# 
   485  011B                     	;# 
   486  011B                     	;# 
   487  011B                     	;# 
   488  011B                     	;# 
   489  011B                     	;# 
   490  011C                     	;# 
   491  011C                     	;# 
   492  011C                     	;# 
   493  011D                     	;# 
   494  011D                     	;# 
   495  011D                     	;# 
   496  011E                     	;# 
   497  011E                     	;# 
   498  011E                     	;# 
   499  011F                     	;# 
   500  011F                     	;# 
   501  011F                     	;# 
   502  011F                     	;# 
   503  011F                     	;# 
   504  018C                     	;# 
   505  018D                     	;# 
   506  018E                     	;# 
   507  018F                     	;# 
   508  0190                     	;# 
   509  0191                     	;# 
   510  0192                     	;# 
   511  0196                     	;# 
   512  0197                     	;# 
   513  0198                     	;# 
   514  0199                     	;# 
   515  019A                     	;# 
   516  019B                     	;# 
   517  019C                     	;# 
   518  020C                     	;# 
   519  020C                     	;# 
   520  020D                     	;# 
   521  020E                     	;# 
   522  020F                     	;# 
   523  020F                     	;# 
   524  0210                     	;# 
   525  0210                     	;# 
   526  0211                     	;# 
   527  0211                     	;# 
   528  028C                     	;# 
   529  028C                     	;# 
   530  028D                     	;# 
   531  028D                     	;# 
   532  028E                     	;# 
   533  028F                     	;# 
   534  0290                     	;# 
   535  0291                     	;# 
   536  030C                     	;# 
   537  030C                     	;# 
   538  030D                     	;# 
   539  030E                     	;# 
   540  030F                     	;# 
   541  0310                     	;# 
   542  0310                     	;# 
   543  0311                     	;# 
   544  0312                     	;# 
   545  0313                     	;# 
   546  0314                     	;# 
   547  0314                     	;# 
   548  0315                     	;# 
   549  0316                     	;# 
   550  0318                     	;# 
   551  0318                     	;# 
   552  0319                     	;# 
   553  031A                     	;# 
   554  031C                     	;# 
   555  031C                     	;# 
   556  031D                     	;# 
   557  031E                     	;# 
   558  038C                     	;# 
   559  038C                     	;# 
   560  038D                     	;# 
   561  038E                     	;# 
   562  058C                     	;# 
   563  058C                     	;# 
   564  058D                     	;# 
   565  058E                     	;# 
   566  058F                     	;# 
   567  058F                     	;# 
   568  0590                     	;# 
   569  0591                     	;# 
   570  0592                     	;# 
   571  0593                     	;# 
   572  059C                     	;# 
   573  059C                     	;# 
   574  059D                     	;# 
   575  059D                     	;# 
   576  059E                     	;# 
   577  059F                     	;# 
   578  060C                     	;# 
   579  060D                     	;# 
   580  060E                     	;# 
   581  060F                     	;# 
   582  0610                     	;# 
   583  0611                     	;# 
   584  0612                     	;# 
   585  0613                     	;# 
   586  0614                     	;# 
   587  070C                     	;# 
   588  070D                     	;# 
   589  070E                     	;# 
   590  070F                     	;# 
   591  0710                     	;# 
   592  0711                     	;# 
   593  0712                     	;# 
   594  0713                     	;# 
   595  0716                     	;# 
   596  0717                     	;# 
   597  0718                     	;# 
   598  0719                     	;# 
   599  071A                     	;# 
   600  071B                     	;# 
   601  071C                     	;# 
   602  071D                     	;# 
   603  0796                     	;# 
   604  0797                     	;# 
   605  0798                     	;# 
   606  0799                     	;# 
   607  079A                     	;# 
   608  079B                     	;# 
   609  080C                     	;# 
   610  080D                     	;# 
   611  080E                     	;# 
   612  080F                     	;# 
   613  0810                     	;# 
   614  0811                     	;# 
   615  0812                     	;# 
   616  0813                     	;# 
   617  0814                     	;# 
   618  081A                     	;# 
   619  081A                     	;# 
   620  081B                     	;# 
   621  081C                     	;# 
   622  081C                     	;# 
   623  081D                     	;# 
   624  081E                     	;# 
   625  081F                     	;# 
   626  088C                     	;# 
   627  088D                     	;# 
   628  088E                     	;# 
   629  088F                     	;# 
   630  0890                     	;# 
   631  0891                     	;# 
   632  0892                     	;# 
   633  0893                     	;# 
   634  0895                     	;# 
   635  0896                     	;# 
   636  090C                     	;# 
   637  090E                     	;# 
   638  090F                     	;# 
   639  091F                     	;# 
   640  098F                     	;# 
   641  098F                     	;# 
   642  0990                     	;# 
   643  0991                     	;# 
   644  0992                     	;# 
   645  0993                     	;# 
   646  0994                     	;# 
   647  0995                     	;# 
   648  0996                     	;# 
   649  0997                     	;# 
   650  0A19                     	;# 
   651  0A19                     	;# 
   652  0A1A                     	;# 
   653  0A1A                     	;# 
   654  0A1B                     	;# 
   655  0A1B                     	;# 
   656  0A1B                     	;# 
   657  0A1C                     	;# 
   658  0A1C                     	;# 
   659  0A1D                     	;# 
   660  0A1D                     	;# 
   661  0A1E                     	;# 
   662  0A1E                     	;# 
   663  0A1F                     	;# 
   664  0A1F                     	;# 
   665  0A1F                     	;# 
   666  1E0F                     	;# 
   667  1E10                     	;# 
   668  1E11                     	;# 
   669  1E12                     	;# 
   670  1E13                     	;# 
   671  1E14                     	;# 
   672  1E15                     	;# 
   673  1E16                     	;# 
   674  1E17                     	;# 
   675  1E18                     	;# 
   676  1E19                     	;# 
   677  1E1A                     	;# 
   678  1E1B                     	;# 
   679  1E1C                     	;# 
   680  1E1D                     	;# 
   681  1E1E                     	;# 
   682  1E1F                     	;# 
   683  1E20                     	;# 
   684  1E21                     	;# 
   685  1E22                     	;# 
   686  1E23                     	;# 
   687  1E24                     	;# 
   688  1E25                     	;# 
   689  1E26                     	;# 
   690  1E27                     	;# 
   691  1E28                     	;# 
   692  1E29                     	;# 
   693  1E2A                     	;# 
   694  1E2B                     	;# 
   695  1E2C                     	;# 
   696  1E2D                     	;# 
   697  1E2E                     	;# 
   698  1E2F                     	;# 
   699  1E30                     	;# 
   700  1E31                     	;# 
   701  1E32                     	;# 
   702  1E33                     	;# 
   703  1E34                     	;# 
   704  1E35                     	;# 
   705  1E36                     	;# 
   706  1E37                     	;# 
   707  1E8F                     	;# 
   708  1E90                     	;# 
   709  1E91                     	;# 
   710  1E92                     	;# 
   711  1E93                     	;# 
   712  1E9C                     	;# 
   713  1EA1                     	;# 
   714  1EA2                     	;# 
   715  1EB1                     	;# 
   716  1EBB                     	;# 
   717  1EBC                     	;# 
   718  1EBD                     	;# 
   719  1EBE                     	;# 
   720  1EC3                     	;# 
   721  1EC5                     	;# 
   722  1EC6                     	;# 
   723  1EC7                     	;# 
   724  1EC8                     	;# 
   725  1EC9                     	;# 
   726  1ECA                     	;# 
   727  1ECB                     	;# 
   728  1ECC                     	;# 
   729  1ECD                     	;# 
   730  1ECE                     	;# 
   731  1F10                     	;# 
   732  1F11                     	;# 
   733  1F12                     	;# 
   734  1F13                     	;# 
   735  1F14                     	;# 
   736  1F15                     	;# 
   737  1F16                     	;# 
   738  1F17                     	;# 
   739  1F18                     	;# 
   740  1F19                     	;# 
   741  1F1A                     	;# 
   742  1F1B                     	;# 
   743  1F1C                     	;# 
   744  1F1D                     	;# 
   745  1F1E                     	;# 
   746  1F1F                     	;# 
   747  1F20                     	;# 
   748  1F21                     	;# 
   749  1F22                     	;# 
   750  1F23                     	;# 
   751  1F24                     	;# 
   752  1F25                     	;# 
   753  1F26                     	;# 
   754  1F27                     	;# 
   755  1F38                     	;# 
   756  1F39                     	;# 
   757  1F3A                     	;# 
   758  1F3B                     	;# 
   759  1F3C                     	;# 
   760  1F3D                     	;# 
   761  1F3E                     	;# 
   762  1F3F                     	;# 
   763  1F43                     	;# 
   764  1F44                     	;# 
   765  1F45                     	;# 
   766  1F46                     	;# 
   767  1F47                     	;# 
   768  1F48                     	;# 
   769  1F49                     	;# 
   770  1F4A                     	;# 
   771  1F4E                     	;# 
   772  1F4F                     	;# 
   773  1F50                     	;# 
   774  1F51                     	;# 
   775  1F52                     	;# 
   776  1F53                     	;# 
   777  1F54                     	;# 
   778  1F55                     	;# 
   779  1F65                     	;# 
   780  1F68                     	;# 
   781  1F69                     	;# 
   782  1F6A                     	;# 
   783  1F6B                     	;# 
   784  1FE4                     	;# 
   785  1FE5                     	;# 
   786  1FE6                     	;# 
   787  1FE7                     	;# 
   788  1FE8                     	;# 
   789  1FE8                     	;# 
   790  1FE9                     	;# 
   791  1FEA                     	;# 
   792  1FEB                     	;# 
   793  1FED                     	;# 
   794  1FEE                     	;# 
   795  1FEF                     	;# 
   796  0000                     	;# 
   797  0001                     	;# 
   798  0002                     	;# 
   799  0003                     	;# 
   800  0004                     	;# 
   801  0005                     	;# 
   802  0006                     	;# 
   803  0007                     	;# 
   804  0008                     	;# 
   805  0009                     	;# 
   806  000A                     	;# 
   807  000B                     	;# 
   808  000C                     	;# 
   809  000D                     	;# 
   810  000E                     	;# 
   811  0010                     	;# 
   812  0012                     	;# 
   813  0013                     	;# 
   814  0014                     	;# 
   815  0016                     	;# 
   816  0018                     	;# 
   817  0019                     	;# 
   818  001A                     	;# 
   819  009B                     	;# 
   820  009B                     	;# 
   821  009C                     	;# 
   822  009D                     	;# 
   823  009E                     	;# 
   824  009F                     	;# 
   825  0119                     	;# 
   826  0119                     	;# 
   827  0119                     	;# 
   828  011A                     	;# 
   829  011A                     	;# 
   830  011A                     	;# 
   831  011B                     	;# 
   832  011B                     	;# 
   833  011B                     	;# 
   834  011B                     	;# 
   835  011B                     	;# 
   836  011C                     	;# 
   837  011C                     	;# 
   838  011C                     	;# 
   839  011D                     	;# 
   840  011D                     	;# 
   841  011D                     	;# 
   842  011E                     	;# 
   843  011E                     	;# 
   844  011E                     	;# 
   845  011F                     	;# 
   846  011F                     	;# 
   847  011F                     	;# 
   848  011F                     	;# 
   849  011F                     	;# 
   850  018C                     	;# 
   851  018D                     	;# 
   852  018E                     	;# 
   853  018F                     	;# 
   854  0190                     	;# 
   855  0191                     	;# 
   856  0192                     	;# 
   857  0196                     	;# 
   858  0197                     	;# 
   859  0198                     	;# 
   860  0199                     	;# 
   861  019A                     	;# 
   862  019B                     	;# 
   863  019C                     	;# 
   864  020C                     	;# 
   865  020C                     	;# 
   866  020D                     	;# 
   867  020E                     	;# 
   868  020F                     	;# 
   869  020F                     	;# 
   870  0210                     	;# 
   871  0210                     	;# 
   872  0211                     	;# 
   873  0211                     	;# 
   874  028C                     	;# 
   875  028C                     	;# 
   876  028D                     	;# 
   877  028D                     	;# 
   878  028E                     	;# 
   879  028F                     	;# 
   880  0290                     	;# 
   881  0291                     	;# 
   882  030C                     	;# 
   883  030C                     	;# 
   884  030D                     	;# 
   885  030E                     	;# 
   886  030F                     	;# 
   887  0310                     	;# 
   888  0310                     	;# 
   889  0311                     	;# 
   890  0312                     	;# 
   891  0313                     	;# 
   892  0314                     	;# 
   893  0314                     	;# 
   894  0315                     	;# 
   895  0316                     	;# 
   896  0318                     	;# 
   897  0318                     	;# 
   898  0319                     	;# 
   899  031A                     	;# 
   900  031C                     	;# 
   901  031C                     	;# 
   902  031D                     	;# 
   903  031E                     	;# 
   904  038C                     	;# 
   905  038C                     	;# 
   906  038D                     	;# 
   907  038E                     	;# 
   908  058C                     	;# 
   909  058C                     	;# 
   910  058D                     	;# 
   911  058E                     	;# 
   912  058F                     	;# 
   913  058F                     	;# 
   914  0590                     	;# 
   915  0591                     	;# 
   916  0592                     	;# 
   917  0593                     	;# 
   918  059C                     	;# 
   919  059C                     	;# 
   920  059D                     	;# 
   921  059D                     	;# 
   922  059E                     	;# 
   923  059F                     	;# 
   924  060C                     	;# 
   925  060D                     	;# 
   926  060E                     	;# 
   927  060F                     	;# 
   928  0610                     	;# 
   929  0611                     	;# 
   930  0612                     	;# 
   931  0613                     	;# 
   932  0614                     	;# 
   933  070C                     	;# 
   934  070D                     	;# 
   935  070E                     	;# 
   936  070F                     	;# 
   937  0710                     	;# 
   938  0711                     	;# 
   939  0712                     	;# 
   940  0713                     	;# 
   941  0716                     	;# 
   942  0717                     	;# 
   943  0718                     	;# 
   944  0719                     	;# 
   945  071A                     	;# 
   946  071B                     	;# 
   947  071C                     	;# 
   948  071D                     	;# 
   949  0796                     	;# 
   950  0797                     	;# 
   951  0798                     	;# 
   952  0799                     	;# 
   953  079A                     	;# 
   954  079B                     	;# 
   955  080C                     	;# 
   956  080D                     	;# 
   957  080E                     	;# 
   958  080F                     	;# 
   959  0810                     	;# 
   960  0811                     	;# 
   961  0812                     	;# 
   962  0813                     	;# 
   963  0814                     	;# 
   964  081A                     	;# 
   965  081A                     	;# 
   966  081B                     	;# 
   967  081C                     	;# 
   968  081C                     	;# 
   969  081D                     	;# 
   970  081E                     	;# 
   971  081F                     	;# 
   972  088C                     	;# 
   973  088D                     	;# 
   974  088E                     	;# 
   975  088F                     	;# 
   976  0890                     	;# 
   977  0891                     	;# 
   978  0892                     	;# 
   979  0893                     	;# 
   980  0895                     	;# 
   981  0896                     	;# 
   982  090C                     	;# 
   983  090E                     	;# 
   984  090F                     	;# 
   985  091F                     	;# 
   986  098F                     	;# 
   987  098F                     	;# 
   988  0990                     	;# 
   989  0991                     	;# 
   990  0992                     	;# 
   991  0993                     	;# 
   992  0994                     	;# 
   993  0995                     	;# 
   994  0996                     	;# 
   995  0997                     	;# 
   996  0A19                     	;# 
   997  0A19                     	;# 
   998  0A1A                     	;# 
   999  0A1A                     	;# 
  1000  0A1B                     	;# 
  1001  0A1B                     	;# 
  1002  0A1B                     	;# 
  1003  0A1C                     	;# 
  1004  0A1C                     	;# 
  1005  0A1D                     	;# 
  1006  0A1D                     	;# 
  1007  0A1E                     	;# 
  1008  0A1E                     	;# 
  1009  0A1F                     	;# 
  1010  0A1F                     	;# 
  1011  0A1F                     	;# 
  1012  1E0F                     	;# 
  1013  1E10                     	;# 
  1014  1E11                     	;# 
  1015  1E12                     	;# 
  1016  1E13                     	;# 
  1017  1E14                     	;# 
  1018  1E15                     	;# 
  1019  1E16                     	;# 
  1020  1E17                     	;# 
  1021  1E18                     	;# 
  1022  1E19                     	;# 
  1023  1E1A                     	;# 
  1024  1E1B                     	;# 
  1025  1E1C                     	;# 
  1026  1E1D                     	;# 
  1027  1E1E                     	;# 
  1028  1E1F                     	;# 
  1029  1E20                     	;# 
  1030  1E21                     	;# 
  1031  1E22                     	;# 
  1032  1E23                     	;# 
  1033  1E24                     	;# 
  1034  1E25                     	;# 
  1035  1E26                     	;# 
  1036  1E27                     	;# 
  1037  1E28                     	;# 
  1038  1E29                     	;# 
  1039  1E2A                     	;# 
  1040  1E2B                     	;# 
  1041  1E2C                     	;# 
  1042  1E2D                     	;# 
  1043  1E2E                     	;# 
  1044  1E2F                     	;# 
  1045  1E30                     	;# 
  1046  1E31                     	;# 
  1047  1E32                     	;# 
  1048  1E33                     	;# 
  1049  1E34                     	;# 
  1050  1E35                     	;# 
  1051  1E36                     	;# 
  1052  1E37                     	;# 
  1053  1E8F                     	;# 
  1054  1E90                     	;# 
  1055  1E91                     	;# 
  1056  1E92                     	;# 
  1057  1E93                     	;# 
  1058  1E9C                     	;# 
  1059  1EA1                     	;# 
  1060  1EA2                     	;# 
  1061  1EB1                     	;# 
  1062  1EBB                     	;# 
  1063  1EBC                     	;# 
  1064  1EBD                     	;# 
  1065  1EBE                     	;# 
  1066  1EC3                     	;# 
  1067  1EC5                     	;# 
  1068  1EC6                     	;# 
  1069  1EC7                     	;# 
  1070  1EC8                     	;# 
  1071  1EC9                     	;# 
  1072  1ECA                     	;# 
  1073  1ECB                     	;# 
  1074  1ECC                     	;# 
  1075  1ECD                     	;# 
  1076  1ECE                     	;# 
  1077  1F10                     	;# 
  1078  1F11                     	;# 
  1079  1F12                     	;# 
  1080  1F13                     	;# 
  1081  1F14                     	;# 
  1082  1F15                     	;# 
  1083  1F16                     	;# 
  1084  1F17                     	;# 
  1085  1F18                     	;# 
  1086  1F19                     	;# 
  1087  1F1A                     	;# 
  1088  1F1B                     	;# 
  1089  1F1C                     	;# 
  1090  1F1D                     	;# 
  1091  1F1E                     	;# 
  1092  1F1F                     	;# 
  1093  1F20                     	;# 
  1094  1F21                     	;# 
  1095  1F22                     	;# 
  1096  1F23                     	;# 
  1097  1F24                     	;# 
  1098  1F25                     	;# 
  1099  1F26                     	;# 
  1100  1F27                     	;# 
  1101  1F38                     	;# 
  1102  1F39                     	;# 
  1103  1F3A                     	;# 
  1104  1F3B                     	;# 
  1105  1F3C                     	;# 
  1106  1F3D                     	;# 
  1107  1F3E                     	;# 
  1108  1F3F                     	;# 
  1109  1F43                     	;# 
  1110  1F44                     	;# 
  1111  1F45                     	;# 
  1112  1F46                     	;# 
  1113  1F47                     	;# 
  1114  1F48                     	;# 
  1115  1F49                     	;# 
  1116  1F4A                     	;# 
  1117  1F4E                     	;# 
  1118  1F4F                     	;# 
  1119  1F50                     	;# 
  1120  1F51                     	;# 
  1121  1F52                     	;# 
  1122  1F53                     	;# 
  1123  1F54                     	;# 
  1124  1F55                     	;# 
  1125  1F65                     	;# 
  1126  1F68                     	;# 
  1127  1F69                     	;# 
  1128  1F6A                     	;# 
  1129  1F6B                     	;# 
  1130  1FE4                     	;# 
  1131  1FE5                     	;# 
  1132  1FE6                     	;# 
  1133  1FE7                     	;# 
  1134  1FE8                     	;# 
  1135  1FE8                     	;# 
  1136  1FE9                     	;# 
  1137  1FEA                     	;# 
  1138  1FEB                     	;# 
  1139  1FED                     	;# 
  1140  1FEE                     	;# 
  1141  1FEF                     	;# 
  1142  0000                     	;# 
  1143  0001                     	;# 
  1144  0002                     	;# 
  1145  0003                     	;# 
  1146  0004                     	;# 
  1147  0005                     	;# 
  1148  0006                     	;# 
  1149  0007                     	;# 
  1150  0008                     	;# 
  1151  0009                     	;# 
  1152  000A                     	;# 
  1153  000B                     	;# 
  1154  000C                     	;# 
  1155  000D                     	;# 
  1156  000E                     	;# 
  1157  0010                     	;# 
  1158  0012                     	;# 
  1159  0013                     	;# 
  1160  0014                     	;# 
  1161  0016                     	;# 
  1162  0018                     	;# 
  1163  0019                     	;# 
  1164  001A                     	;# 
  1165  009B                     	;# 
  1166  009B                     	;# 
  1167  009C                     	;# 
  1168  009D                     	;# 
  1169  009E                     	;# 
  1170  009F                     	;# 
  1171  0119                     	;# 
  1172  0119                     	;# 
  1173  0119                     	;# 
  1174  011A                     	;# 
  1175  011A                     	;# 
  1176  011A                     	;# 
  1177  011B                     	;# 
  1178  011B                     	;# 
  1179  011B                     	;# 
  1180  011B                     	;# 
  1181  011B                     	;# 
  1182  011C                     	;# 
  1183  011C                     	;# 
  1184  011C                     	;# 
  1185  011D                     	;# 
  1186  011D                     	;# 
  1187  011D                     	;# 
  1188  011E                     	;# 
  1189  011E                     	;# 
  1190  011E                     	;# 
  1191  011F                     	;# 
  1192  011F                     	;# 
  1193  011F                     	;# 
  1194  011F                     	;# 
  1195  011F                     	;# 
  1196  018C                     	;# 
  1197  018D                     	;# 
  1198  018E                     	;# 
  1199  018F                     	;# 
  1200  0190                     	;# 
  1201  0191                     	;# 
  1202  0192                     	;# 
  1203  0196                     	;# 
  1204  0197                     	;# 
  1205  0198                     	;# 
  1206  0199                     	;# 
  1207  019A                     	;# 
  1208  019B                     	;# 
  1209  019C                     	;# 
  1210  020C                     	;# 
  1211  020C                     	;# 
  1212  020D                     	;# 
  1213  020E                     	;# 
  1214  020F                     	;# 
  1215  020F                     	;# 
  1216  0210                     	;# 
  1217  0210                     	;# 
  1218  0211                     	;# 
  1219  0211                     	;# 
  1220  028C                     	;# 
  1221  028C                     	;# 
  1222  028D                     	;# 
  1223  028D                     	;# 
  1224  028E                     	;# 
  1225  028F                     	;# 
  1226  0290                     	;# 
  1227  0291                     	;# 
  1228  030C                     	;# 
  1229  030C                     	;# 
  1230  030D                     	;# 
  1231  030E                     	;# 
  1232  030F                     	;# 
  1233  0310                     	;# 
  1234  0310                     	;# 
  1235  0311                     	;# 
  1236  0312                     	;# 
  1237  0313                     	;# 
  1238  0314                     	;# 
  1239  0314                     	;# 
  1240  0315                     	;# 
  1241  0316                     	;# 
  1242  0318                     	;# 
  1243  0318                     	;# 
  1244  0319                     	;# 
  1245  031A                     	;# 
  1246  031C                     	;# 
  1247  031C                     	;# 
  1248  031D                     	;# 
  1249  031E                     	;# 
  1250  038C                     	;# 
  1251  038C                     	;# 
  1252  038D                     	;# 
  1253  038E                     	;# 
  1254  058C                     	;# 
  1255  058C                     	;# 
  1256  058D                     	;# 
  1257  058E                     	;# 
  1258  058F                     	;# 
  1259  058F                     	;# 
  1260  0590                     	;# 
  1261  0591                     	;# 
  1262  0592                     	;# 
  1263  0593                     	;# 
  1264  059C                     	;# 
  1265  059C                     	;# 
  1266  059D                     	;# 
  1267  059D                     	;# 
  1268  059E                     	;# 
  1269  059F                     	;# 
  1270  060C                     	;# 
  1271  060D                     	;# 
  1272  060E                     	;# 
  1273  060F                     	;# 
  1274  0610                     	;# 
  1275  0611                     	;# 
  1276  0612                     	;# 
  1277  0613                     	;# 
  1278  0614                     	;# 
  1279  070C                     	;# 
  1280  070D                     	;# 
  1281  070E                     	;# 
  1282  070F                     	;# 
  1283  0710                     	;# 
  1284  0711                     	;# 
  1285  0712                     	;# 
  1286  0713                     	;# 
  1287  0716                     	;# 
  1288  0717                     	;# 
  1289  0718                     	;# 
  1290  0719                     	;# 
  1291  071A                     	;# 
  1292  071B                     	;# 
  1293  071C                     	;# 
  1294  071D                     	;# 
  1295  0796                     	;# 
  1296  0797                     	;# 
  1297  0798                     	;# 
  1298  0799                     	;# 
  1299  079A                     	;# 
  1300  079B                     	;# 
  1301  080C                     	;# 
  1302  080D                     	;# 
  1303  080E                     	;# 
  1304  080F                     	;# 
  1305  0810                     	;# 
  1306  0811                     	;# 
  1307  0812                     	;# 
  1308  0813                     	;# 
  1309  0814                     	;# 
  1310  081A                     	;# 
  1311  081A                     	;# 
  1312  081B                     	;# 
  1313  081C                     	;# 
  1314  081C                     	;# 
  1315  081D                     	;# 
  1316  081E                     	;# 
  1317  081F                     	;# 
  1318  088C                     	;# 
  1319  088D                     	;# 
  1320  088E                     	;# 
  1321  088F                     	;# 
  1322  0890                     	;# 
  1323  0891                     	;# 
  1324  0892                     	;# 
  1325  0893                     	;# 
  1326  0895                     	;# 
  1327  0896                     	;# 
  1328  090C                     	;# 
  1329  090E                     	;# 
  1330  090F                     	;# 
  1331  091F                     	;# 
  1332  098F                     	;# 
  1333  098F                     	;# 
  1334  0990                     	;# 
  1335  0991                     	;# 
  1336  0992                     	;# 
  1337  0993                     	;# 
  1338  0994                     	;# 
  1339  0995                     	;# 
  1340  0996                     	;# 
  1341  0997                     	;# 
  1342  0A19                     	;# 
  1343  0A19                     	;# 
  1344  0A1A                     	;# 
  1345  0A1A                     	;# 
  1346  0A1B                     	;# 
  1347  0A1B                     	;# 
  1348  0A1B                     	;# 
  1349  0A1C                     	;# 
  1350  0A1C                     	;# 
  1351  0A1D                     	;# 
  1352  0A1D                     	;# 
  1353  0A1E                     	;# 
  1354  0A1E                     	;# 
  1355  0A1F                     	;# 
  1356  0A1F                     	;# 
  1357  0A1F                     	;# 
  1358  1E0F                     	;# 
  1359  1E10                     	;# 
  1360  1E11                     	;# 
  1361  1E12                     	;# 
  1362  1E13                     	;# 
  1363  1E14                     	;# 
  1364  1E15                     	;# 
  1365  1E16                     	;# 
  1366  1E17                     	;# 
  1367  1E18                     	;# 
  1368  1E19                     	;# 
  1369  1E1A                     	;# 
  1370  1E1B                     	;# 
  1371  1E1C                     	;# 
  1372  1E1D                     	;# 
  1373  1E1E                     	;# 
  1374  1E1F                     	;# 
  1375  1E20                     	;# 
  1376  1E21                     	;# 
  1377  1E22                     	;# 
  1378  1E23                     	;# 
  1379  1E24                     	;# 
  1380  1E25                     	;# 
  1381  1E26                     	;# 
  1382  1E27                     	;# 
  1383  1E28                     	;# 
  1384  1E29                     	;# 
  1385  1E2A                     	;# 
  1386  1E2B                     	;# 
  1387  1E2C                     	;# 
  1388  1E2D                     	;# 
  1389  1E2E                     	;# 
  1390  1E2F                     	;# 
  1391  1E30                     	;# 
  1392  1E31                     	;# 
  1393  1E32                     	;# 
  1394  1E33                     	;# 
  1395  1E34                     	;# 
  1396  1E35                     	;# 
  1397  1E36                     	;# 
  1398  1E37                     	;# 
  1399  1E8F                     	;# 
  1400  1E90                     	;# 
  1401  1E91                     	;# 
  1402  1E92                     	;# 
  1403  1E93                     	;# 
  1404  1E9C                     	;# 
  1405  1EA1                     	;# 
  1406  1EA2                     	;# 
  1407  1EB1                     	;# 
  1408  1EBB                     	;# 
  1409  1EBC                     	;# 
  1410  1EBD                     	;# 
  1411  1EBE                     	;# 
  1412  1EC3                     	;# 
  1413  1EC5                     	;# 
  1414  1EC6                     	;# 
  1415  1EC7                     	;# 
  1416  1EC8                     	;# 
  1417  1EC9                     	;# 
  1418  1ECA                     	;# 
  1419  1ECB                     	;# 
  1420  1ECC                     	;# 
  1421  1ECD                     	;# 
  1422  1ECE                     	;# 
  1423  1F10                     	;# 
  1424  1F11                     	;# 
  1425  1F12                     	;# 
  1426  1F13                     	;# 
  1427  1F14                     	;# 
  1428  1F15                     	;# 
  1429  1F16                     	;# 
  1430  1F17                     	;# 
  1431  1F18                     	;# 
  1432  1F19                     	;# 
  1433  1F1A                     	;# 
  1434  1F1B                     	;# 
  1435  1F1C                     	;# 
  1436  1F1D                     	;# 
  1437  1F1E                     	;# 
  1438  1F1F                     	;# 
  1439  1F20                     	;# 
  1440  1F21                     	;# 
  1441  1F22                     	;# 
  1442  1F23                     	;# 
  1443  1F24                     	;# 
  1444  1F25                     	;# 
  1445  1F26                     	;# 
  1446  1F27                     	;# 
  1447  1F38                     	;# 
  1448  1F39                     	;# 
  1449  1F3A                     	;# 
  1450  1F3B                     	;# 
  1451  1F3C                     	;# 
  1452  1F3D                     	;# 
  1453  1F3E                     	;# 
  1454  1F3F                     	;# 
  1455  1F43                     	;# 
  1456  1F44                     	;# 
  1457  1F45                     	;# 
  1458  1F46                     	;# 
  1459  1F47                     	;# 
  1460  1F48                     	;# 
  1461  1F49                     	;# 
  1462  1F4A                     	;# 
  1463  1F4E                     	;# 
  1464  1F4F                     	;# 
  1465  1F50                     	;# 
  1466  1F51                     	;# 
  1467  1F52                     	;# 
  1468  1F53                     	;# 
  1469  1F54                     	;# 
  1470  1F55                     	;# 
  1471  1F65                     	;# 
  1472  1F68                     	;# 
  1473  1F69                     	;# 
  1474  1F6A                     	;# 
  1475  1F6B                     	;# 
  1476  1FE4                     	;# 
  1477  1FE5                     	;# 
  1478  1FE6                     	;# 
  1479  1FE7                     	;# 
  1480  1FE8                     	;# 
  1481  1FE8                     	;# 
  1482  1FE9                     	;# 
  1483  1FEA                     	;# 
  1484  1FEB                     	;# 
  1485  1FED                     	;# 
  1486  1FEE                     	;# 
  1487  1FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0012                     	;# 
  1505  0013                     	;# 
  1506  0014                     	;# 
  1507  0016                     	;# 
  1508  0018                     	;# 
  1509  0019                     	;# 
  1510  001A                     	;# 
  1511  009B                     	;# 
  1512  009B                     	;# 
  1513  009C                     	;# 
  1514  009D                     	;# 
  1515  009E                     	;# 
  1516  009F                     	;# 
  1517  0119                     	;# 
  1518  0119                     	;# 
  1519  0119                     	;# 
  1520  011A                     	;# 
  1521  011A                     	;# 
  1522  011A                     	;# 
  1523  011B                     	;# 
  1524  011B                     	;# 
  1525  011B                     	;# 
  1526  011B                     	;# 
  1527  011B                     	;# 
  1528  011C                     	;# 
  1529  011C                     	;# 
  1530  011C                     	;# 
  1531  011D                     	;# 
  1532  011D                     	;# 
  1533  011D                     	;# 
  1534  011E                     	;# 
  1535  011E                     	;# 
  1536  011E                     	;# 
  1537  011F                     	;# 
  1538  011F                     	;# 
  1539  011F                     	;# 
  1540  011F                     	;# 
  1541  011F                     	;# 
  1542  018C                     	;# 
  1543  018D                     	;# 
  1544  018E                     	;# 
  1545  018F                     	;# 
  1546  0190                     	;# 
  1547  0191                     	;# 
  1548  0192                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0198                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  020C                     	;# 
  1557  020C                     	;# 
  1558  020D                     	;# 
  1559  020E                     	;# 
  1560  020F                     	;# 
  1561  020F                     	;# 
  1562  0210                     	;# 
  1563  0210                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  028C                     	;# 
  1567  028C                     	;# 
  1568  028D                     	;# 
  1569  028D                     	;# 
  1570  028E                     	;# 
  1571  028F                     	;# 
  1572  0290                     	;# 
  1573  0291                     	;# 
  1574  030C                     	;# 
  1575  030C                     	;# 
  1576  030D                     	;# 
  1577  030E                     	;# 
  1578  030F                     	;# 
  1579  0310                     	;# 
  1580  0310                     	;# 
  1581  0311                     	;# 
  1582  0312                     	;# 
  1583  0313                     	;# 
  1584  0314                     	;# 
  1585  0314                     	;# 
  1586  0315                     	;# 
  1587  0316                     	;# 
  1588  0318                     	;# 
  1589  0318                     	;# 
  1590  0319                     	;# 
  1591  031A                     	;# 
  1592  031C                     	;# 
  1593  031C                     	;# 
  1594  031D                     	;# 
  1595  031E                     	;# 
  1596  038C                     	;# 
  1597  038C                     	;# 
  1598  038D                     	;# 
  1599  038E                     	;# 
  1600  058C                     	;# 
  1601  058C                     	;# 
  1602  058D                     	;# 
  1603  058E                     	;# 
  1604  058F                     	;# 
  1605  058F                     	;# 
  1606  0590                     	;# 
  1607  0591                     	;# 
  1608  0592                     	;# 
  1609  0593                     	;# 
  1610  059C                     	;# 
  1611  059C                     	;# 
  1612  059D                     	;# 
  1613  059D                     	;# 
  1614  059E                     	;# 
  1615  059F                     	;# 
  1616  060C                     	;# 
  1617  060D                     	;# 
  1618  060E                     	;# 
  1619  060F                     	;# 
  1620  0610                     	;# 
  1621  0611                     	;# 
  1622  0612                     	;# 
  1623  0613                     	;# 
  1624  0614                     	;# 
  1625  070C                     	;# 
  1626  070D                     	;# 
  1627  070E                     	;# 
  1628  070F                     	;# 
  1629  0710                     	;# 
  1630  0711                     	;# 
  1631  0712                     	;# 
  1632  0713                     	;# 
  1633  0716                     	;# 
  1634  0717                     	;# 
  1635  0718                     	;# 
  1636  0719                     	;# 
  1637  071A                     	;# 
  1638  071B                     	;# 
  1639  071C                     	;# 
  1640  071D                     	;# 
  1641  0796                     	;# 
  1642  0797                     	;# 
  1643  0798                     	;# 
  1644  0799                     	;# 
  1645  079A                     	;# 
  1646  079B                     	;# 
  1647  080C                     	;# 
  1648  080D                     	;# 
  1649  080E                     	;# 
  1650  080F                     	;# 
  1651  0810                     	;# 
  1652  0811                     	;# 
  1653  0812                     	;# 
  1654  0813                     	;# 
  1655  0814                     	;# 
  1656  081A                     	;# 
  1657  081A                     	;# 
  1658  081B                     	;# 
  1659  081C                     	;# 
  1660  081C                     	;# 
  1661  081D                     	;# 
  1662  081E                     	;# 
  1663  081F                     	;# 
  1664  088C                     	;# 
  1665  088D                     	;# 
  1666  088E                     	;# 
  1667  088F                     	;# 
  1668  0890                     	;# 
  1669  0891                     	;# 
  1670  0892                     	;# 
  1671  0893                     	;# 
  1672  0895                     	;# 
  1673  0896                     	;# 
  1674  090C                     	;# 
  1675  090E                     	;# 
  1676  090F                     	;# 
  1677  091F                     	;# 
  1678  098F                     	;# 
  1679  098F                     	;# 
  1680  0990                     	;# 
  1681  0991                     	;# 
  1682  0992                     	;# 
  1683  0993                     	;# 
  1684  0994                     	;# 
  1685  0995                     	;# 
  1686  0996                     	;# 
  1687  0997                     	;# 
  1688  0A19                     	;# 
  1689  0A19                     	;# 
  1690  0A1A                     	;# 
  1691  0A1A                     	;# 
  1692  0A1B                     	;# 
  1693  0A1B                     	;# 
  1694  0A1B                     	;# 
  1695  0A1C                     	;# 
  1696  0A1C                     	;# 
  1697  0A1D                     	;# 
  1698  0A1D                     	;# 
  1699  0A1E                     	;# 
  1700  0A1E                     	;# 
  1701  0A1F                     	;# 
  1702  0A1F                     	;# 
  1703  0A1F                     	;# 
  1704  1E0F                     	;# 
  1705  1E10                     	;# 
  1706  1E11                     	;# 
  1707  1E12                     	;# 
  1708  1E13                     	;# 
  1709  1E14                     	;# 
  1710  1E15                     	;# 
  1711  1E16                     	;# 
  1712  1E17                     	;# 
  1713  1E18                     	;# 
  1714  1E19                     	;# 
  1715  1E1A                     	;# 
  1716  1E1B                     	;# 
  1717  1E1C                     	;# 
  1718  1E1D                     	;# 
  1719  1E1E                     	;# 
  1720  1E1F                     	;# 
  1721  1E20                     	;# 
  1722  1E21                     	;# 
  1723  1E22                     	;# 
  1724  1E23                     	;# 
  1725  1E24                     	;# 
  1726  1E25                     	;# 
  1727  1E26                     	;# 
  1728  1E27                     	;# 
  1729  1E28                     	;# 
  1730  1E29                     	;# 
  1731  1E2A                     	;# 
  1732  1E2B                     	;# 
  1733  1E2C                     	;# 
  1734  1E2D                     	;# 
  1735  1E2E                     	;# 
  1736  1E2F                     	;# 
  1737  1E30                     	;# 
  1738  1E31                     	;# 
  1739  1E32                     	;# 
  1740  1E33                     	;# 
  1741  1E34                     	;# 
  1742  1E35                     	;# 
  1743  1E36                     	;# 
  1744  1E37                     	;# 
  1745  1E8F                     	;# 
  1746  1E90                     	;# 
  1747  1E91                     	;# 
  1748  1E92                     	;# 
  1749  1E93                     	;# 
  1750  1E9C                     	;# 
  1751  1EA1                     	;# 
  1752  1EA2                     	;# 
  1753  1EB1                     	;# 
  1754  1EBB                     	;# 
  1755  1EBC                     	;# 
  1756  1EBD                     	;# 
  1757  1EBE                     	;# 
  1758  1EC3                     	;# 
  1759  1EC5                     	;# 
  1760  1EC6                     	;# 
  1761  1EC7                     	;# 
  1762  1EC8                     	;# 
  1763  1EC9                     	;# 
  1764  1ECA                     	;# 
  1765  1ECB                     	;# 
  1766  1ECC                     	;# 
  1767  1ECD                     	;# 
  1768  1ECE                     	;# 
  1769  1F10                     	;# 
  1770  1F11                     	;# 
  1771  1F12                     	;# 
  1772  1F13                     	;# 
  1773  1F14                     	;# 
  1774  1F15                     	;# 
  1775  1F16                     	;# 
  1776  1F17                     	;# 
  1777  1F18                     	;# 
  1778  1F19                     	;# 
  1779  1F1A                     	;# 
  1780  1F1B                     	;# 
  1781  1F1C                     	;# 
  1782  1F1D                     	;# 
  1783  1F1E                     	;# 
  1784  1F1F                     	;# 
  1785  1F20                     	;# 
  1786  1F21                     	;# 
  1787  1F22                     	;# 
  1788  1F23                     	;# 
  1789  1F24                     	;# 
  1790  1F25                     	;# 
  1791  1F26                     	;# 
  1792  1F27                     	;# 
  1793  1F38                     	;# 
  1794  1F39                     	;# 
  1795  1F3A                     	;# 
  1796  1F3B                     	;# 
  1797  1F3C                     	;# 
  1798  1F3D                     	;# 
  1799  1F3E                     	;# 
  1800  1F3F                     	;# 
  1801  1F43                     	;# 
  1802  1F44                     	;# 
  1803  1F45                     	;# 
  1804  1F46                     	;# 
  1805  1F47                     	;# 
  1806  1F48                     	;# 
  1807  1F49                     	;# 
  1808  1F4A                     	;# 
  1809  1F4E                     	;# 
  1810  1F4F                     	;# 
  1811  1F50                     	;# 
  1812  1F51                     	;# 
  1813  1F52                     	;# 
  1814  1F53                     	;# 
  1815  1F54                     	;# 
  1816  1F55                     	;# 
  1817  1F65                     	;# 
  1818  1F68                     	;# 
  1819  1F69                     	;# 
  1820  1F6A                     	;# 
  1821  1F6B                     	;# 
  1822  1FE4                     	;# 
  1823  1FE5                     	;# 
  1824  1FE6                     	;# 
  1825  1FE7                     	;# 
  1826  1FE8                     	;# 
  1827  1FE8                     	;# 
  1828  1FE9                     	;# 
  1829  1FEA                     	;# 
  1830  1FEB                     	;# 
  1831  1FED                     	;# 
  1832  1FEE                     	;# 
  1833  1FEF                     	;# 
  1834  0000                     	;# 
  1835  0001                     	;# 
  1836  0002                     	;# 
  1837  0003                     	;# 
  1838  0004                     	;# 
  1839  0005                     	;# 
  1840  0006                     	;# 
  1841  0007                     	;# 
  1842  0008                     	;# 
  1843  0009                     	;# 
  1844  000A                     	;# 
  1845  000B                     	;# 
  1846  000C                     	;# 
  1847  000D                     	;# 
  1848  000E                     	;# 
  1849  0010                     	;# 
  1850  0012                     	;# 
  1851  0013                     	;# 
  1852  0014                     	;# 
  1853  0016                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  009B                     	;# 
  1858  009B                     	;# 
  1859  009C                     	;# 
  1860  009D                     	;# 
  1861  009E                     	;# 
  1862  009F                     	;# 
  1863  0119                     	;# 
  1864  0119                     	;# 
  1865  0119                     	;# 
  1866  011A                     	;# 
  1867  011A                     	;# 
  1868  011A                     	;# 
  1869  011B                     	;# 
  1870  011B                     	;# 
  1871  011B                     	;# 
  1872  011B                     	;# 
  1873  011B                     	;# 
  1874  011C                     	;# 
  1875  011C                     	;# 
  1876  011C                     	;# 
  1877  011D                     	;# 
  1878  011D                     	;# 
  1879  011D                     	;# 
  1880  011E                     	;# 
  1881  011E                     	;# 
  1882  011E                     	;# 
  1883  011F                     	;# 
  1884  011F                     	;# 
  1885  011F                     	;# 
  1886  011F                     	;# 
  1887  011F                     	;# 
  1888  018C                     	;# 
  1889  018D                     	;# 
  1890  018E                     	;# 
  1891  018F                     	;# 
  1892  0190                     	;# 
  1893  0191                     	;# 
  1894  0192                     	;# 
  1895  0196                     	;# 
  1896  0197                     	;# 
  1897  0198                     	;# 
  1898  0199                     	;# 
  1899  019A                     	;# 
  1900  019B                     	;# 
  1901  019C                     	;# 
  1902  020C                     	;# 
  1903  020C                     	;# 
  1904  020D                     	;# 
  1905  020E                     	;# 
  1906  020F                     	;# 
  1907  020F                     	;# 
  1908  0210                     	;# 
  1909  0210                     	;# 
  1910  0211                     	;# 
  1911  0211                     	;# 
  1912  028C                     	;# 
  1913  028C                     	;# 
  1914  028D                     	;# 
  1915  028D                     	;# 
  1916  028E                     	;# 
  1917  028F                     	;# 
  1918  0290                     	;# 
  1919  0291                     	;# 
  1920  030C                     	;# 
  1921  030C                     	;# 
  1922  030D                     	;# 
  1923  030E                     	;# 
  1924  030F                     	;# 
  1925  0310                     	;# 
  1926  0310                     	;# 
  1927  0311                     	;# 
  1928  0312                     	;# 
  1929  0313                     	;# 
  1930  0314                     	;# 
  1931  0314                     	;# 
  1932  0315                     	;# 
  1933  0316                     	;# 
  1934  0318                     	;# 
  1935  0318                     	;# 
  1936  0319                     	;# 
  1937  031A                     	;# 
  1938  031C                     	;# 
  1939  031C                     	;# 
  1940  031D                     	;# 
  1941  031E                     	;# 
  1942  038C                     	;# 
  1943  038C                     	;# 
  1944  038D                     	;# 
  1945  038E                     	;# 
  1946  058C                     	;# 
  1947  058C                     	;# 
  1948  058D                     	;# 
  1949  058E                     	;# 
  1950  058F                     	;# 
  1951  058F                     	;# 
  1952  0590                     	;# 
  1953  0591                     	;# 
  1954  0592                     	;# 
  1955  0593                     	;# 
  1956  059C                     	;# 
  1957  059C                     	;# 
  1958  059D                     	;# 
  1959  059D                     	;# 
  1960  059E                     	;# 
  1961  059F                     	;# 
  1962  060C                     	;# 
  1963  060D                     	;# 
  1964  060E                     	;# 
  1965  060F                     	;# 
  1966  0610                     	;# 
  1967  0611                     	;# 
  1968  0612                     	;# 
  1969  0613                     	;# 
  1970  0614                     	;# 
  1971  070C                     	;# 
  1972  070D                     	;# 
  1973  070E                     	;# 
  1974  070F                     	;# 
  1975  0710                     	;# 
  1976  0711                     	;# 
  1977  0712                     	;# 
  1978  0713                     	;# 
  1979  0716                     	;# 
  1980  0717                     	;# 
  1981  0718                     	;# 
  1982  0719                     	;# 
  1983  071A                     	;# 
  1984  071B                     	;# 
  1985  071C                     	;# 
  1986  071D                     	;# 
  1987  0796                     	;# 
  1988  0797                     	;# 
  1989  0798                     	;# 
  1990  0799                     	;# 
  1991  079A                     	;# 
  1992  079B                     	;# 
  1993  080C                     	;# 
  1994  080D                     	;# 
  1995  080E                     	;# 
  1996  080F                     	;# 
  1997  0810                     	;# 
  1998  0811                     	;# 
  1999  0812                     	;# 
  2000  0813                     	;# 
  2001  0814                     	;# 
  2002  081A                     	;# 
  2003  081A                     	;# 
  2004  081B                     	;# 
  2005  081C                     	;# 
  2006  081C                     	;# 
  2007  081D                     	;# 
  2008  081E                     	;# 
  2009  081F                     	;# 
  2010  088C                     	;# 
  2011  088D                     	;# 
  2012  088E                     	;# 
  2013  088F                     	;# 
  2014  0890                     	;# 
  2015  0891                     	;# 
  2016  0892                     	;# 
  2017  0893                     	;# 
  2018  0895                     	;# 
  2019  0896                     	;# 
  2020  090C                     	;# 
  2021  090E                     	;# 
  2022  090F                     	;# 
  2023  091F                     	;# 
  2024  098F                     	;# 
  2025  098F                     	;# 
  2026  0990                     	;# 
  2027  0991                     	;# 
  2028  0992                     	;# 
  2029  0993                     	;# 
  2030  0994                     	;# 
  2031  0995                     	;# 
  2032  0996                     	;# 
  2033  0997                     	;# 
  2034  0A19                     	;# 
  2035  0A19                     	;# 
  2036  0A1A                     	;# 
  2037  0A1A                     	;# 
  2038  0A1B                     	;# 
  2039  0A1B                     	;# 
  2040  0A1B                     	;# 
  2041  0A1C                     	;# 
  2042  0A1C                     	;# 
  2043  0A1D                     	;# 
  2044  0A1D                     	;# 
  2045  0A1E                     	;# 
  2046  0A1E                     	;# 
  2047  0A1F                     	;# 
  2048  0A1F                     	;# 
  2049  0A1F                     	;# 
  2050  1E0F                     	;# 
  2051  1E10                     	;# 
  2052  1E11                     	;# 
  2053  1E12                     	;# 
  2054  1E13                     	;# 
  2055  1E14                     	;# 
  2056  1E15                     	;# 
  2057  1E16                     	;# 
  2058  1E17                     	;# 
  2059  1E18                     	;# 
  2060  1E19                     	;# 
  2061  1E1A                     	;# 
  2062  1E1B                     	;# 
  2063  1E1C                     	;# 
  2064  1E1D                     	;# 
  2065  1E1E                     	;# 
  2066  1E1F                     	;# 
  2067  1E20                     	;# 
  2068  1E21                     	;# 
  2069  1E22                     	;# 
  2070  1E23                     	;# 
  2071  1E24                     	;# 
  2072  1E25                     	;# 
  2073  1E26                     	;# 
  2074  1E27                     	;# 
  2075  1E28                     	;# 
  2076  1E29                     	;# 
  2077  1E2A                     	;# 
  2078  1E2B                     	;# 
  2079  1E2C                     	;# 
  2080  1E2D                     	;# 
  2081  1E2E                     	;# 
  2082  1E2F                     	;# 
  2083  1E30                     	;# 
  2084  1E31                     	;# 
  2085  1E32                     	;# 
  2086  1E33                     	;# 
  2087  1E34                     	;# 
  2088  1E35                     	;# 
  2089  1E36                     	;# 
  2090  1E37                     	;# 
  2091  1E8F                     	;# 
  2092  1E90                     	;# 
  2093  1E91                     	;# 
  2094  1E92                     	;# 
  2095  1E93                     	;# 
  2096  1E9C                     	;# 
  2097  1EA1                     	;# 
  2098  1EA2                     	;# 
  2099  1EB1                     	;# 
  2100  1EBB                     	;# 
  2101  1EBC                     	;# 
  2102  1EBD                     	;# 
  2103  1EBE                     	;# 
  2104  1EC3                     	;# 
  2105  1EC5                     	;# 
  2106  1EC6                     	;# 
  2107  1EC7                     	;# 
  2108  1EC8                     	;# 
  2109  1EC9                     	;# 
  2110  1ECA                     	;# 
  2111  1ECB                     	;# 
  2112  1ECC                     	;# 
  2113  1ECD                     	;# 
  2114  1ECE                     	;# 
  2115  1F10                     	;# 
  2116  1F11                     	;# 
  2117  1F12                     	;# 
  2118  1F13                     	;# 
  2119  1F14                     	;# 
  2120  1F15                     	;# 
  2121  1F16                     	;# 
  2122  1F17                     	;# 
  2123  1F18                     	;# 
  2124  1F19                     	;# 
  2125  1F1A                     	;# 
  2126  1F1B                     	;# 
  2127  1F1C                     	;# 
  2128  1F1D                     	;# 
  2129  1F1E                     	;# 
  2130  1F1F                     	;# 
  2131  1F20                     	;# 
  2132  1F21                     	;# 
  2133  1F22                     	;# 
  2134  1F23                     	;# 
  2135  1F24                     	;# 
  2136  1F25                     	;# 
  2137  1F26                     	;# 
  2138  1F27                     	;# 
  2139  1F38                     	;# 
  2140  1F39                     	;# 
  2141  1F3A                     	;# 
  2142  1F3B                     	;# 
  2143  1F3C                     	;# 
  2144  1F3D                     	;# 
  2145  1F3E                     	;# 
  2146  1F3F                     	;# 
  2147  1F43                     	;# 
  2148  1F44                     	;# 
  2149  1F45                     	;# 
  2150  1F46                     	;# 
  2151  1F47                     	;# 
  2152  1F48                     	;# 
  2153  1F49                     	;# 
  2154  1F4A                     	;# 
  2155  1F4E                     	;# 
  2156  1F4F                     	;# 
  2157  1F50                     	;# 
  2158  1F51                     	;# 
  2159  1F52                     	;# 
  2160  1F53                     	;# 
  2161  1F54                     	;# 
  2162  1F55                     	;# 
  2163  1F65                     	;# 
  2164  1F68                     	;# 
  2165  1F69                     	;# 
  2166  1F6A                     	;# 
  2167  1F6B                     	;# 
  2168  1FE4                     	;# 
  2169  1FE5                     	;# 
  2170  1FE6                     	;# 
  2171  1FE7                     	;# 
  2172  1FE8                     	;# 
  2173  1FE8                     	;# 
  2174  1FE9                     	;# 
  2175  1FEA                     	;# 
  2176  1FEB                     	;# 
  2177  1FED                     	;# 
  2178  1FEE                     	;# 
  2179  1FEF                     	;_data
  2180                           
  2181                           	psect	idataBANK3
  2182  0759                     __pidataBANK3:	
  2183                           
  2184                           ;initializer for stoa@F1151
  2185  0759  3428               	retlw	40
  2186  075A  346E               	retlw	110
  2187  075B  3475               	retlw	117
  2188  075C  346C               	retlw	108
  2189  075D  346C               	retlw	108
  2190  075E  3429               	retlw	41
  2191  075F  3400               	retlw	0
  2192                           
  2193                           ;initializer for OLED_print_xy@F7897
  2194  0760  3400               	retlw	0
  2195  0761  3440               	retlw	64
  2196  0762  3414               	retlw	20
  2197  0763  3454               	retlw	84
  2198                           
  2199                           ;initializer for _updateScreen
  2200  0764  3401               	retlw	1
  2201                           
  2202                           	psect	idataBANK7
  2203  0692                     __pidataBANK7:	
  2204                           
  2205                           ;initializer for OLED_loadSpecialChars@F7902
  2206  0692  3408               	retlw	8
  2207  0693  3414               	retlw	20
  2208  0694  340B               	retlw	11
  2209  0695  3404               	retlw	4
  2210  0696  3404               	retlw	4
  2211  0697  3404               	retlw	4
  2212  0698  3403               	retlw	3
  2213  0699  3400               	retlw	0
  2214  069A  3408               	retlw	8
  2215  069B  3414               	retlw	20
  2216  069C  3408               	retlw	8
  2217  069D  3403               	retlw	3
  2218  069E  3404               	retlw	4
  2219  069F  3404               	retlw	4
  2220  06A0  3403               	retlw	3
  2221  06A1  3400               	retlw	0
  2222  06A2  3418               	retlw	24
  2223  06A3  3418               	retlw	24
  2224  06A4  3403               	retlw	3
  2225  06A5  3404               	retlw	4
  2226  06A6  3404               	retlw	4
  2227  06A7  3404               	retlw	4
  2228  06A8  3403               	retlw	3
  2229  06A9  3400               	retlw	0
  2230  06AA  3400               	retlw	0
  2231  06AB  3400               	retlw	0
  2232  06AC  3400               	retlw	0
  2233  06AD  3404               	retlw	4
  2234  06AE  3400               	retlw	0
  2235  06AF  3400               	retlw	0
  2236  06B0  3400               	retlw	0
  2237  06B1  3400               	retlw	0
  2238  06B2  3400               	retlw	0
  2239  06B3  3401               	retlw	1
  2240  06B4  3401               	retlw	1
  2241  06B5  3401               	retlw	1
  2242  06B6  3409               	retlw	9
  2243  06B7  341F               	retlw	31
  2244  06B8  3408               	retlw	8
  2245  06B9  3400               	retlw	0
  2246  06BA  3401               	retlw	1
  2247  06BB  3401               	retlw	1
  2248  06BC  3405               	retlw	5
  2249  06BD  3409               	retlw	9
  2250  06BE  341F               	retlw	31
  2251  06BF  3408               	retlw	8
  2252  06C0  3404               	retlw	4
  2253  06C1  3400               	retlw	0
  2254                           
  2255                           	psect	stringtext1
  2256  208F                     __pstringtext1:	
  2257  208F                     _nextStateTbl:	
  2258  208F  3400               	retlw	0
  2259  2090  34FF               	retlw	255
  2260  2091  3401               	retlw	1
  2261  2092  3400               	retlw	0
  2262  2093  3400               	retlw	0
  2263  2094  3401               	retlw	1
  2264  2095  34FF               	retlw	255
  2265  2096  3400               	retlw	0
  2266  2097  3402               	retlw	2
  2267  2098  3401               	retlw	1
  2268  2099  3402               	retlw	2
  2269  209A  3400               	retlw	0
  2270  209B  3403               	retlw	3
  2271  209C  3401               	retlw	1
  2272  209D  3401               	retlw	1
  2273  209E  3402               	retlw	2
  2274  209F  3401               	retlw	1
  2275  20A0  3404               	retlw	4
  2276  20A1  3401               	retlw	1
  2277  20A2  3401               	retlw	1
  2278  20A3  3402               	retlw	2
  2279  20A4  3402               	retlw	2
  2280  20A5  3401               	retlw	1
  2281  20A6  3401               	retlw	1
  2282  20A7  3401               	retlw	1
  2283  20A8  3403               	retlw	3
  2284  20A9  3400               	retlw	0
  2285  20AA  3402               	retlw	2
  2286  20AB  3402               	retlw	2
  2287  20AC  3402               	retlw	2
  2288  20AD  3404               	retlw	4
  2289  20AE  3400               	retlw	0
  2290  20AF  3402               	retlw	2
  2291  20B0  3402               	retlw	2
  2292  20B1  3402               	retlw	2
  2293  20B2                     __end_of_nextStateTbl:	
  2294                           
  2295                           	psect	stringtext2
  2296  20D5                     __pstringtext2:	
  2297  20D5                     _transition_table:	
  2298  20D5  3400               	retlw	0
  2299  20D6  3404               	retlw	4
  2300  20D7  3401               	retlw	1
  2301  20D8  3400               	retlw	0
  2302  20D9  3482               	retlw	130
  2303  20DA  3400               	retlw	0
  2304  20DB  3401               	retlw	1
  2305  20DC  3400               	retlw	0
  2306  20DD  3402               	retlw	2
  2307  20DE  3403               	retlw	3
  2308  20DF  3401               	retlw	1
  2309  20E0  3400               	retlw	0
  2310  20E1  3402               	retlw	2
  2311  20E2  3403               	retlw	3
  2312  20E3  3400               	retlw	0
  2313  20E4  3480               	retlw	128
  2314  20E5  3445               	retlw	69
  2315  20E6  3404               	retlw	4
  2316  20E7  3400               	retlw	0
  2317  20E8  3400               	retlw	0
  2318  20E9  3405               	retlw	5
  2319  20EA  3404               	retlw	4
  2320  20EB  3406               	retlw	6
  2321  20EC  3400               	retlw	0
  2322  20ED  3405               	retlw	5
  2323  20EE  3400               	retlw	0
  2324  20EF  3406               	retlw	6
  2325  20F0  3440               	retlw	64
  2326  20F1                     __end_of_transition_table:	
  2327                           
  2328                           	psect	stringtext3
  2329  2000                     __pstringtext3:	
  2330  2000                     _stateFuncTbl:	
  2331  2000  3400               	retlw	0
  2332  2001  34CB               	retlw	low _statusView
  2333  2002  3419               	retlw	high _statusView
  2334  2003  3401               	retlw	1
  2335  2004  34E7               	retlw	low _channelView
  2336  2005  3418               	retlw	high _channelView
  2337  2006  3402               	retlw	2
  2338  2007  3460               	retlw	low _channelSetup
  2339  2008  3418               	retlw	high _channelSetup
  2340  2009  3403               	retlw	3
  2341  200A  3462               	retlw	low _setOutputPower
  2342  200B  3400               	retlw	high _setOutputPower
  2343  200C  3404               	retlw	4
  2344  200D  3499               	retlw	low _setLensDia
  2345  200E  3400               	retlw	high _setLensDia
  2346  200F                     __end_of_stateFuncTbl:	
  2347  000C                     _PORTAbits	set	12
  2348  000B                     _INTCONbits	set	11
  2349  000E                     _PORTCbits	set	14
  2350  0014                     _TRISCbits	set	20
  2351  000B                     _INTCON	set	11
  2352  0014                     _TRISC	set	20
  2353  0013                     _TRISB	set	19
  2354  0012                     _TRISA	set	18
  2355  0018                     _LATAbits	set	24
  2356  001A                     _LATCbits	set	26
  2357  0019                     _LATBbits	set	25
  2358  009E                     _ADCON1	set	158
  2359  009B                     _ADRESL	set	155
  2360  009C                     _ADRESH	set	156
  2361  009D                     _ADCON0bits	set	157
  2362  0119                     _RC1REG	set	281
  2363  011D                     _RC1STAbits	set	285
  2364  011A                     _TX1REG	set	282
  2365  011E                     _TX1STA	set	286
  2366  011D                     _RC1STA	set	285
  2367  011B                     _SPBRGL	set	283
  2368  011F                     _BAUD1CON	set	287
  2369  020C                     _TMR1	set	524
  2370  0211                     _T1CLK	set	529
  2371  020E                     _T1CON	set	526
  2372  059C                     _TMR0	set	1436
  2373  059F                     _T0CON1	set	1439
  2374  059E                     _T0CON0	set	1438
  2375  070F                     _PIR3bits	set	1807
  2376  0719                     _PIE3bits	set	1817
  2377  0710                     _PIR4bits	set	1808
  2378  071A                     _PIE4bits	set	1818
  2379  070C                     _PIR0bits	set	1804
  2380  0716                     _PIE0bits	set	1814
  2381  071A                     _PIE4	set	1818
  2382  0719                     _PIE3	set	1817
  2383  0716                     _PIE0	set	1814
  2384  088F                     _OSCCON3bits	set	2191
  2385  088D                     _OSCCON1	set	2189
  2386  0893                     _OSCFRQ	set	2195
  2387  1ECB                     _RX1DTPPSbits	set	7883
  2388  1F3F                     _IOCAFbits	set	7999
  2389  1F54                     _IOCCN	set	8020
  2390  1F3E                     _IOCAN	set	7998
  2391  1F3D                     _IOCAP	set	7997
  2392  1F4E                     _ANSELC	set	8014
  2393  1F43                     _ANSELB	set	8003
  2394  1F38                     _ANSELA	set	7992
  2395  1F26                     _RC6PPS	set	7974
  2396  200F                     STR_2:	
  2397  200F  3454               	retlw	84	;'T'
  2398  2010  3465               	retlw	101	;'e'
  2399  2011  346D               	retlw	109	;'m'
  2400  2012  3470               	retlw	112	;'p'
  2401  2013  3465               	retlw	101	;'e'
  2402  2014  3472               	retlw	114	;'r'
  2403  2015  3461               	retlw	97	;'a'
  2404  2016  3474               	retlw	116	;'t'
  2405  2017  3475               	retlw	117	;'u'
  2406  2018  3472               	retlw	114	;'r'
  2407  2019  3465               	retlw	101	;'e'
  2408  201A  3420               	retlw	32	;' '
  2409  201B  3452               	retlw	82	;'R'
  2410  201C  3465               	retlw	101	;'e'
  2411  201D  346C               	retlw	108	;'l'
  2412  201E  342E               	retlw	46	;'.'
  2413  201F  3468               	retlw	104	;'h'
  2414  2020  3475               	retlw	117	;'u'
  2415  2021  346D               	retlw	109	;'m'
  2416  2022  3469               	retlw	105	;'i'
  2417  2023  3464               	retlw	100	;'d'
  2418  2024  3469               	retlw	105	;'i'
  2419  2025  3474               	retlw	116	;'t'
  2420  2026  3479               	retlw	121	;'y'
  2421  2027  3444               	retlw	68	;'D'
  2422  2028  3465               	retlw	101	;'e'
  2423  2029  3477               	retlw	119	;'w'
  2424  202A  3470               	retlw	112	;'p'
  2425  202B  346F               	retlw	111	;'o'
  2426  202C  3469               	retlw	105	;'i'
  2427  202D  346E               	retlw	110	;'n'
  2428  202E  3474               	retlw	116	;'t'
  2429  202F  3420               	retlw	32	;' '
  2430  2030  3420               	retlw	32	;' '
  2431  2031  3420               	retlw	32	;' '
  2432  2032  3420               	retlw	32	;' '
  2433  2033  3442               	retlw	66	;'B'
  2434  2034  3461               	retlw	97	;'a'
  2435  2035  3474               	retlw	116	;'t'
  2436  2036  342E               	retlw	46	;'.'
  2437  2037  3420               	retlw	32	;' '
  2438  2038  3420               	retlw	32	;' '
  2439  2039  3420               	retlw	32	;' '
  2440  203A  3450               	retlw	80	;'P'
  2441  203B  346F               	retlw	111	;'o'
  2442  203C  3477               	retlw	119	;'w'
  2443  203D  3465               	retlw	101	;'e'
  2444  203E  3472               	retlw	114	;'r'
  2445  203F  3400               	retlw	0
  2446                           
  2447                           	psect	stringtext4
  2448  2040                     __pstringtext4:	
  2449  2040                     STR_5:	
  2450  2040  3425               	retlw	37	;'%'
  2451  2041  3473               	retlw	115	;'s'
  2452  2042  3425               	retlw	37	;'%'
  2453  2043  3435               	retlw	53	;'5'
  2454  2044  342E               	retlw	46	;'.'
  2455  2045  3431               	retlw	49	;'1'
  2456  2046  3466               	retlw	102	;'f'
  2457  2047  3420               	retlw	32	;' '
  2458  2048  3425               	retlw	37	;'%'
  2459  2049  3425               	retlw	37	;'%'
  2460  204A  3420               	retlw	32	;' '
  2461  204B  3420               	retlw	32	;' '
  2462  204C  3420               	retlw	32	;' '
  2463  204D  3420               	retlw	32	;' '
  2464  204E  3420               	retlw	32	;' '
  2465  204F  3425               	retlw	37	;'%'
  2466  2050  3435               	retlw	53	;'5'
  2467  2051  342E               	retlw	46	;'.'
  2468  2052  3431               	retlw	49	;'1'
  2469  2053  3466               	retlw	102	;'f'
  2470  2054  3420               	retlw	32	;' '
  2471  2055  3401               	retlw	1
  2472  2056  3420               	retlw	32	;' '
  2473  2057  3420               	retlw	32	;' '
  2474  2058  3420               	retlw	32	;' '
  2475  2059  3420               	retlw	32	;' '
  2476  205A  3420               	retlw	32	;' '
  2477  205B  3425               	retlw	37	;'%'
  2478  205C  3434               	retlw	52	;'4'
  2479  205D  342E               	retlw	46	;'.'
  2480  205E  3431               	retlw	49	;'1'
  2481  205F  3466               	retlw	102	;'f'
  2482  2060  3456               	retlw	86	;'V'
  2483  2061  3420               	retlw	32	;' '
  2484  2062  3420               	retlw	32	;' '
  2485  2063  3425               	retlw	37	;'%'
  2486  2064  3434               	retlw	52	;'4'
  2487  2065  342E               	retlw	46	;'.'
  2488  2066  3431               	retlw	49	;'1'
  2489  2067  3466               	retlw	102	;'f'
  2490  2068  3457               	retlw	87	;'W'
  2491  2069  3400               	retlw	0
  2492                           
  2493                           	psect	stringtext5
  2494  206A                     __pstringtext5:	
  2495  206A                     STR_17:	
  2496  206A  344F               	retlw	79	;'O'
  2497  206B  3475               	retlw	117	;'u'
  2498  206C  3474               	retlw	116	;'t'
  2499  206D  3470               	retlw	112	;'p'
  2500  206E  3475               	retlw	117	;'u'
  2501  206F  3474               	retlw	116	;'t'
  2502  2070  3420               	retlw	32	;' '
  2503  2071  3470               	retlw	112	;'p'
  2504  2072  346F               	retlw	111	;'o'
  2505  2073  3477               	retlw	119	;'w'
  2506  2074  3465               	retlw	101	;'e'
  2507  2075  3472               	retlw	114	;'r'
  2508  2076  344C               	retlw	76	;'L'
  2509  2077  3465               	retlw	101	;'e'
  2510  2078  346E               	retlw	110	;'n'
  2511  2079  3473               	retlw	115	;'s'
  2512  207A  3420               	retlw	32	;' '
  2513  207B  3464               	retlw	100	;'d'
  2514  207C  3469               	retlw	105	;'i'
  2515  207D  3461               	retlw	97	;'a'
  2516  207E  346D               	retlw	109	;'m'
  2517  207F  342E               	retlw	46	;'.'
  2518  2080  3420               	retlw	32	;' '
  2519  2081  3420               	retlw	32	;' '
  2520  2082  3442               	retlw	66	;'B'
  2521  2083  3461               	retlw	97	;'a'
  2522  2084  3463               	retlw	99	;'c'
  2523  2085  346B               	retlw	107	;'k'
  2524  2086  3420               	retlw	32	;' '
  2525  2087  3420               	retlw	32	;' '
  2526  2088  3420               	retlw	32	;' '
  2527  2089  3420               	retlw	32	;' '
  2528  208A  3420               	retlw	32	;' '
  2529  208B  3420               	retlw	32	;' '
  2530  208C  3420               	retlw	32	;' '
  2531  208D  3420               	retlw	32	;' '
  2532  208E  3400               	retlw	0
  2533                           
  2534                           	psect	stringtext6
  2535  20B2                     __pstringtext6:	
  2536  20B2                     STR_18:	
  2537  20B2  3425               	retlw	37	;'%'
  2538  20B3  3431               	retlw	49	;'1'
  2539  20B4  3464               	retlw	100	;'d'
  2540  20B5  3420               	retlw	32	;' '
  2541  20B6  3420               	retlw	32	;' '
  2542  20B7  3420               	retlw	32	;' '
  2543  20B8  3420               	retlw	32	;' '
  2544  20B9  3420               	retlw	32	;' '
  2545  20BA  3420               	retlw	32	;' '
  2546  20BB  3420               	retlw	32	;' '
  2547  20BC  3420               	retlw	32	;' '
  2548  20BD  3420               	retlw	32	;' '
  2549  20BE  3420               	retlw	32	;' '
  2550  20BF  3420               	retlw	32	;' '
  2551  20C0  3425               	retlw	37	;'%'
  2552  20C1  3431               	retlw	49	;'1'
  2553  20C2  3464               	retlw	100	;'d'
  2554  20C3  3420               	retlw	32	;' '
  2555  20C4  3420               	retlw	32	;' '
  2556  20C5  3420               	retlw	32	;' '
  2557  20C6  3420               	retlw	32	;' '
  2558  20C7  3420               	retlw	32	;' '
  2559  20C8  3420               	retlw	32	;' '
  2560  20C9  3420               	retlw	32	;' '
  2561  20CA  3420               	retlw	32	;' '
  2562  20CB  3420               	retlw	32	;' '
  2563  20CC  3420               	retlw	32	;' '
  2564  20CD  3420               	retlw	32	;' '
  2565  20CE  3406               	retlw	6
  2566  20CF  3420               	retlw	32	;' '
  2567  20D0  3420               	retlw	32	;' '
  2568  20D1  3420               	retlw	32	;' '
  2569  20D2  3420               	retlw	32	;' '
  2570  20D3  3420               	retlw	32	;' '
  2571  20D4  3400               	retlw	0
  2572                           
  2573                           	psect	stringtext7
  2574  20F1                     __pstringtext7:	
  2575  20F1                     STR_8:	
  2576  20F1  3443               	retlw	67	;'C'
  2577  20F2  3468               	retlw	104	;'h'
  2578  20F3  3420               	retlw	32	;' '
  2579  20F4  3425               	retlw	37	;'%'
  2580  20F5  3431               	retlw	49	;'1'
  2581  20F6  3464               	retlw	100	;'d'
  2582  20F7  343A               	retlw	58	;':'
  2583  20F8  3420               	retlw	32	;' '
  2584  20F9  3425               	retlw	37	;'%'
  2585  20FA  3432               	retlw	50	;'2'
  2586  20FB  3464               	retlw	100	;'d'
  2587  20FC  3422               	retlw	34	;'"'
  2588  20FD  3420               	retlw	32	;' '
  2589  20FE  3420               	retlw	32	;' '
  2590  20FF  3420               	retlw	32	;' '
  2591  2100  3400               	retlw	0
  2592                           
  2593                           	psect	stringtext8
  2594  2101                     __pstringtext8:	
  2595  2101                     STR_3:	
  2596  2101  3425               	retlw	37	;'%'
  2597  2102  3433               	retlw	51	;'3'
  2598  2103  342E               	retlw	46	;'.'
  2599  2104  3431               	retlw	49	;'1'
  2600  2105  3466               	retlw	102	;'f'
  2601  2106  3403               	retlw	3
  2602  2107  3404               	retlw	4
  2603  2108  3425               	retlw	37	;'%'
  2604  2109  3433               	retlw	51	;'3'
  2605  210A  342E               	retlw	46	;'.'
  2606  210B  3431               	retlw	49	;'1'
  2607  210C  3466               	retlw	102	;'f'
  2608  210D  3403               	retlw	3
  2609  210E  3400               	retlw	0
  2610                           
  2611                           	psect	stringtext9
  2612  210F                     __pstringtext9:	
  2613  210F                     STR_22:	
  2614  210F  3425               	retlw	37	;'%'
  2615  2110  3432               	retlw	50	;'2'
  2616  2111  3464               	retlw	100	;'d'
  2617  2112  3420               	retlw	32	;' '
  2618  2113  3420               	retlw	32	;' '
  2619  2114  3420               	retlw	32	;' '
  2620  2115  3420               	retlw	32	;' '
  2621  2116  3420               	retlw	32	;' '
  2622  2117  3420               	retlw	32	;' '
  2623  2118  3420               	retlw	32	;' '
  2624  2119  3420               	retlw	32	;' '
  2625  211A  3420               	retlw	32	;' '
  2626  211B  3420               	retlw	32	;' '
  2627  211C  3400               	retlw	0
  2628                           
  2629                           	psect	stringtext10
  2630  211D                     __pstringtext10:	
  2631  211D                     STR_4:	
  2632  211D  3425               	retlw	37	;'%'
  2633  211E  3435               	retlw	53	;'5'
  2634  211F  342E               	retlw	46	;'.'
  2635  2120  3431               	retlw	49	;'1'
  2636  2121  3466               	retlw	102	;'f'
  2637  2122  3420               	retlw	32	;' '
  2638  2123  3402               	retlw	2
  2639  2124  3420               	retlw	32	;' '
  2640  2125  3420               	retlw	32	;' '
  2641  2126  3420               	retlw	32	;' '
  2642  2127  3420               	retlw	32	;' '
  2643  2128  3420               	retlw	32	;' '
  2644  2129  3400               	retlw	0
  2645                           
  2646                           	psect	stringtext11
  2647  212A                     __pstringtext11:	
  2648  212A                     STR_9:	
  2649  212A  344F               	retlw	79	;'O'
  2650  212B  3466               	retlw	102	;'f'
  2651  212C  3466               	retlw	102	;'f'
  2652  212D  3420               	retlw	32	;' '
  2653  212E  3420               	retlw	32	;' '
  2654  212F  3420               	retlw	32	;' '
  2655  2130  3420               	retlw	32	;' '
  2656  2131  3420               	retlw	32	;' '
  2657  2132  3420               	retlw	32	;' '
  2658  2133  3420               	retlw	32	;' '
  2659  2134  3420               	retlw	32	;' '
  2660  2135  3420               	retlw	32	;' '
  2661  2136  3400               	retlw	0
  2662                           
  2663                           	psect	stringtext12
  2664  2137                     __pstringtext12:	
  2665  2137                     STR_20:	
  2666  2137  3425               	retlw	37	;'%'
  2667  2138  3435               	retlw	53	;'5'
  2668  2139  342E               	retlw	46	;'.'
  2669  213A  3432               	retlw	50	;'2'
  2670  213B  3466               	retlw	102	;'f'
  2671  213C  3420               	retlw	32	;' '
  2672  213D  3420               	retlw	32	;' '
  2673  213E  3420               	retlw	32	;' '
  2674  213F  3420               	retlw	32	;' '
  2675  2140  3420               	retlw	32	;' '
  2676  2141  3420               	retlw	32	;' '
  2677  2142  3420               	retlw	32	;' '
  2678  2143  3400               	retlw	0
  2679                           
  2680                           	psect	stringtext13
  2681  2144                     __pstringtext13:	
  2682  2144                     STR_14:	
  2683  2144  3453               	retlw	83	;'S'
  2684  2145  3468               	retlw	104	;'h'
  2685  2146  346F               	retlw	111	;'o'
  2686  2147  3472               	retlw	114	;'r'
  2687  2148  3474               	retlw	116	;'t'
  2688  2149  3465               	retlw	101	;'e'
  2689  214A  3464               	retlw	100	;'d'
  2690  214B  3421               	retlw	33	;'!'
  2691  214C  3420               	retlw	32	;' '
  2692  214D  3420               	retlw	32	;' '
  2693  214E  3420               	retlw	32	;' '
  2694  214F  3420               	retlw	32	;' '
  2695  2150  3400               	retlw	0
  2696                           
  2697                           	psect	stringtext14
  2698  2151                     __pstringtext14:	
  2699  2151                     STR_19:	
  2700  2151  3453               	retlw	83	;'S'
  2701  2152  3465               	retlw	101	;'e'
  2702  2153  3474               	retlw	116	;'t'
  2703  2154  3420               	retlw	32	;' '
  2704  2155  346F               	retlw	111	;'o'
  2705  2156  3475               	retlw	117	;'u'
  2706  2157  3474               	retlw	116	;'t'
  2707  2158  3470               	retlw	112	;'p'
  2708  2159  3420               	retlw	32	;' '
  2709  215A  3420               	retlw	32	;' '
  2710  215B  3420               	retlw	32	;' '
  2711  215C  3420               	retlw	32	;' '
  2712  215D  3400               	retlw	0
  2713                           
  2714                           	psect	stringtext15
  2715  215E                     __pstringtext15:	
  2716  215E                     STR_15:	
  2717  215E  344F               	retlw	79	;'O'
  2718  215F  3476               	retlw	118	;'v'
  2719  2160  3465               	retlw	101	;'e'
  2720  2161  3472               	retlw	114	;'r'
  2721  2162  3463               	retlw	99	;'c'
  2722  2163  3475               	retlw	117	;'u'
  2723  2164  3472               	retlw	114	;'r'
  2724  2165  3472               	retlw	114	;'r'
  2725  2166  3465               	retlw	101	;'e'
  2726  2167  346E               	retlw	110	;'n'
  2727  2168  3474               	retlw	116	;'t'
  2728  2169  3421               	retlw	33	;'!'
  2729  216A  3400               	retlw	0
  2730                           
  2731                           	psect	stringtext16
  2732  216B                     __pstringtext16:	
  2733  216B                     STR_1:	
  2734  216B  342D               	retlw	45	;'-'
  2735  216C  343E               	retlw	62	;'>'
  2736  216D  3420               	retlw	32	;' '
  2737  216E  3446               	retlw	70	;'F'
  2738  216F  3475               	retlw	117	;'u'
  2739  2170  3463               	retlw	99	;'c'
  2740  2171  346B               	retlw	107	;'k'
  2741  2172  3475               	retlw	117	;'u'
  2742  2173  3470               	retlw	112	;'p'
  2743  2174  3420               	retlw	32	;' '
  2744  2175  343C               	retlw	60	;'<'
  2745  2176  342D               	retlw	45	;'-'
  2746  2177  3400               	retlw	0
  2747                           
  2748                           	psect	stringtext17
  2749  2178                     __pstringtext17:	
  2750  2178                     STR_13:	
  2751  2178  3444               	retlw	68	;'D'
  2752  2179  3469               	retlw	105	;'i'
  2753  217A  3473               	retlw	115	;'s'
  2754  217B  3463               	retlw	99	;'c'
  2755  217C  346F               	retlw	111	;'o'
  2756  217D  346E               	retlw	110	;'n'
  2757  217E  346E               	retlw	110	;'n'
  2758  217F  3465               	retlw	101	;'e'
  2759  2180  3463               	retlw	99	;'c'
  2760  2181  3474               	retlw	116	;'t'
  2761  2182  3465               	retlw	101	;'e'
  2762  2183  3464               	retlw	100	;'d'
  2763  2184  3400               	retlw	0
  2764                           
  2765                           	psect	stringtext18
  2766  2185                     __pstringtext18:	
  2767  2185                     STR_16:	
  2768  2185  344F               	retlw	79	;'O'
  2769  2186  346E               	retlw	110	;'n'
  2770  2187  3464               	retlw	100	;'d'
  2771  2188  3472               	retlw	114	;'r'
  2772  2189  3465               	retlw	101	;'e'
  2773  218A  3453               	retlw	83	;'S'
  2774  218B  3470               	retlw	112	;'p'
  2775  218C  3465               	retlw	101	;'e'
  2776  218D  3463               	retlw	99	;'c'
  2777  218E  3469               	retlw	105	;'i'
  2778  218F  3461               	retlw	97	;'a'
  2779  2190  346C               	retlw	108	;'l'
  2780  2191  3400               	retlw	0
  2781                           
  2782                           	psect	stringtext19
  2783  2192                     __pstringtext19:	
  2784  2192                     STR_21:	
  2785  2192  3453               	retlw	83	;'S'
  2786  2193  3465               	retlw	101	;'e'
  2787  2194  3474               	retlw	116	;'t'
  2788  2195  3420               	retlw	32	;' '
  2789  2196  346C               	retlw	108	;'l'
  2790  2197  3465               	retlw	101	;'e'
  2791  2198  346E               	retlw	110	;'n'
  2792  2199  3473               	retlw	115	;'s'
  2793  219A  3420               	retlw	32	;' '
  2794  219B  3420               	retlw	32	;' '
  2795  219C  3420               	retlw	32	;' '
  2796  219D  3400               	retlw	0
  2797                           
  2798                           	psect	stringtext20
  2799  219E                     __pstringtext20:	
  2800  219E                     STR_10:	
  2801  219E  3425               	retlw	37	;'%'
  2802  219F  3434               	retlw	52	;'4'
  2803  21A0  342E               	retlw	46	;'.'
  2804  21A1  3431               	retlw	49	;'1'
  2805  21A2  3466               	retlw	102	;'f'
  2806  21A3  3457               	retlw	87	;'W'
  2807  21A4  3420               	retlw	32	;' '
  2808  21A5  3425               	retlw	37	;'%'
  2809  21A6  3473               	retlw	115	;'s'
  2810  21A7  3400               	retlw	0
  2811                           
  2812                           	psect	stringtext21
  2813  21A8                     __pstringtext21:	
  2814  21A8                     STR_11:	
  2815  21A8  3461               	retlw	97	;'a'
  2816  21A9  3475               	retlw	117	;'u'
  2817  21AA  3474               	retlw	116	;'t'
  2818  21AB  346F               	retlw	111	;'o'
  2819  21AC  3420               	retlw	32	;' '
  2820  21AD  3420               	retlw	32	;' '
  2821  21AE  3400               	retlw	0
  2822                           
  2823                           	psect	stringtext22
  2824  21AF                     __pstringtext22:	
  2825  21AF                     STR_12:	
  2826  21AF  346D               	retlw	109	;'m'
  2827  21B0  3461               	retlw	97	;'a'
  2828  21B1  346E               	retlw	110	;'n'
  2829  21B2  3475               	retlw	117	;'u'
  2830  21B3  3461               	retlw	97	;'a'
  2831  21B4  346C               	retlw	108	;'l'
  2832  21B5  3400               	retlw	0
  2833                           
  2834                           	psect	stringtext23
  2835  21B6                     __pstringtext23:	
  2836  21B6                     STR_23:	
  2837  21B6  3449               	retlw	73	;'I'
  2838  21B7  344E               	retlw	78	;'N'
  2839  21B8  3446               	retlw	70	;'F'
  2840  21B9  3400               	retlw	0
  2841                           
  2842                           	psect	stringtext24
  2843  21BA                     __pstringtext24:	
  2844  21BA                     STR_27:	
  2845  21BA  344E               	retlw	78	;'N'
  2846  21BB  3441               	retlw	65	;'A'
  2847  21BC  344E               	retlw	78	;'N'
  2848  21BD  3400               	retlw	0
  2849                           
  2850                           	psect	stringtext25
  2851  21BE                     __pstringtext25:	
  2852  21BE                     STR_24:	
  2853  21BE  3469               	retlw	105	;'i'
  2854  21BF  346E               	retlw	110	;'n'
  2855  21C0  3466               	retlw	102	;'f'
  2856  21C1  3400               	retlw	0
  2857                           
  2858                           	psect	stringtext26
  2859  21C2                     __pstringtext26:	
  2860  21C2                     STR_28:	
  2861  21C2  346E               	retlw	110	;'n'
  2862  21C3  3461               	retlw	97	;'a'
  2863  21C4  346E               	retlw	110	;'n'
  2864  21C5  3400               	retlw	0
  2865                           
  2866                           	psect	stringtext27
  2867  21C6                     __pstringtext27:	
  2868  21C6                     STR_31:	
  2869  21C6  346C               	retlw	108	;'l'
  2870  21C7  3466               	retlw	102	;'f'
  2871  21C8  3400               	retlw	0
  2872                           
  2873                           	psect	stringtext28
  2874  0000                     __pstringtext28:	
  2875  205B                     
  2876                           ; #config settings
  2877  0000                     
  2878                           	psect	cinit
  2879  0844                     start_initialization:	
  2880  0844                     __initialization:		;BIGRAM
  2881                           
  2882                           ; Initialize objects allocated to BANK3
  2883  0844  3059               	movlw	low __pidataBANK3
  2884  0845  0084               	movwf	4
  2885  0846  3087               	movlw	(high __pidataBANK3)| (0+128)
  2886  0847  0085               	movwf	5
  2887  0848  30E2               	movlw	low __pdataBANK3
  2888  0849  0086               	movwf	6
  2889  084A  3001               	movlw	high __pdataBANK3
  2890  084B  0087               	movwf	7
  2891  084C  300C               	movlw	12
  2892  084D  01FF               	clrf	127
  2893  084E  3187  2765  3188   	fcall	init_ram
  2894                           
  2895                           ; Initialize objects allocated to BANK7
  2896  0851  3092               	movlw	low __pidataBANK7
  2897  0852  0084               	movwf	4
  2898  0853  3086               	movlw	(high __pidataBANK7)| (0+128)
  2899  0854  0085               	movwf	5
  2900  0855  30A0               	movlw	low __pdataBANK7
  2901  0856  0086               	movwf	6
  2902  0857  3003               	movlw	high __pdataBANK7
  2903  0858  0087               	movwf	7
  2904  0859  3030               	movlw	48
  2905  085A  01FF               	clrf	127
  2906  085B  3187  2765  3188   	fcall	init_ram
  2907                           
  2908                           ; Clear objects allocated to BIGRAM
  2909  085E  307B               	movlw	123
  2910  085F  0084               	movwf	4
  2911  0860  3027               	movlw	39
  2912  0861  0085               	movwf	5
  2913  0862  3075               	movlw	117
  2914  0863  00FE               	movwf	126
  2915  0864  01FF               	clrf	127
  2916  0865  3187  2771  3188   	fcall	clear_ram0
  2917                           
  2918                           ; Clear objects allocated to COMMON
  2919  0868  01FB               	clrf	__pbssCOMMON& (0+127)
  2920  0869  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  2921  086A  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
  2922                           
  2923                           ; Clear objects allocated to BANK2
  2924  086B  0142               	movlb	2	; select bank2
  2925  086C  30A0               	movlw	low __pbssBANK3
  2926  086D  01EE               	clrf	__pbssBANK2& (0+127)
  2927  086E  01EF               	clrf	(__pbssBANK2+1)& (0+127)
  2928                           
  2929                           ; Clear objects allocated to BANK3
  2930  086F  0084               	movwf	4
  2931  0870  3001               	movlw	high __pbssBANK3
  2932  0871  0085               	movwf	5
  2933  0872  3042               	movlw	66
  2934  0873  00FE               	movwf	126
  2935  0874  3000               	movlw	0
  2936  0875  00FF               	movwf	127
  2937  0876  3187  2771  3188   	fcall	clear_ram0
  2938                           
  2939                           ; Clear objects allocated to BANK4
  2940  0879  3020               	movlw	low __pbssBANK4
  2941  087A  0084               	movwf	4
  2942  087B  3002               	movlw	high __pbssBANK4
  2943  087C  0085               	movwf	5
  2944  087D  3023               	movlw	35
  2945  087E  00FE               	movwf	126
  2946  087F  3000               	movlw	0
  2947  0880  00FF               	movwf	127
  2948  0881  3187  2771  3188   	fcall	clear_ram0
  2949                           
  2950                           ; Clear objects allocated to BANK5
  2951  0884  30A0               	movlw	low __pbssBANK5
  2952  0885  0084               	movwf	4
  2953  0886  3002               	movlw	high __pbssBANK5
  2954  0887  0085               	movwf	5
  2955  0888  3050               	movlw	80
  2956  0889  00FE               	movwf	126
  2957  088A  3000               	movlw	0
  2958  088B  00FF               	movwf	127
  2959  088C  3187  2771  3188   	fcall	clear_ram0
  2960                           
  2961                           ; Clear objects allocated to BANK6
  2962  088F  3020               	movlw	low __pbssBANK6
  2963  0890  0084               	movwf	4
  2964  0891  3003               	movlw	high __pbssBANK6
  2965  0892  0085               	movwf	5
  2966  0893  3031               	movlw	49
  2967  0894  00FE               	movwf	126
  2968  0895  3000               	movlw	0
  2969  0896  00FF               	movwf	127
  2970  0897  3187  2771  3188   	fcall	clear_ram0
  2971  089A                     end_of_initialization:	
  2972                           ;End of C runtime variable initialization code
  2973                           
  2974  089A                     __end_of__initialization:	
  2975  089A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2976  089B  0140               	movlb	0
  2977  089C  289D               	ljmp	_main	;jump to C main() function
  2978  089D                     __pmaintext:	
  2979                           ; 1 bytes @ 0x50
  2980 ;;
  2981 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2982 ;;
  2983 ;; *************** function _main *****************
  2984 ;; Defined at:
  2985 ;;		line 34 in file "main.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;		None
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;		None
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  1    wreg      void 
  2992 ;; Registers used:
  2993 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2994 ;; Tracked objects:
  2995 ;;		On entry : B3F/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3001 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3002 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3003 ;;Total ram usage:        1 bytes
  3004 ;; Hardware stack levels required when called:   13
  3005 ;; This function calls:
  3006 ;;		_OLED_clearDisplay
  3007 ;;		_OLED_init
  3008 ;;		_OLED_loadSpecialChars
  3009 ;;		_OLED_returnHome
  3010 ;;		_checkSensor
  3011 ;;		_convertAnalogValues
  3012 ;;		_initialize
  3013 ;;		_menu
  3014 ;; This function is called by:
  3015 ;;		Startup code after reset
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           
  3020                           ;psect for function _main
  3021  089D                     _main:	
  3022                           
  3023                           ;main.c: 36:  initialize();
  3024                           
  3025                           ;incstack = 0
  3026                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3027  089D  2649  3188         	fcall	_initialize
  3028                           
  3029                           ;main.c: 37:  LATBbits.LATB5 = 1;
  3030  089F  0140               	movlb	0	; select bank0
  3031  08A0  1699               	bsf	25,5	;volatile
  3032                           
  3033                           ;main.c: 38:  LATCbits.LATC3 = 1;
  3034  08A1  159A               	bsf	26,3	;volatile
  3035                           
  3036                           ;main.c: 39:  OLED_init();
  3037  08A2  20E2  3188         	fcall	_OLED_init
  3038                           
  3039                           ;main.c: 40:  OLED_loadSpecialChars();
  3040  08A4  2197  3188         	fcall	_OLED_loadSpecialChars
  3041                           
  3042                           ;main.c: 41:  OLED_returnHome();
  3043  08A6  2692  3188         	fcall	_OLED_returnHome
  3044                           
  3045                           ;main.c: 42:  OLED_clearDisplay();
  3046  08A8  2690  3188         	fcall	_OLED_clearDisplay
  3047                           
  3048                           ;main.c: 44:  LATAbits.LATA0 = 1;
  3049  08AA  1418               	bsf	24,0	;volatile
  3050                           
  3051                           ;main.c: 46:  data.chData[0].lensDia = 4;
  3052  08AB  30AE               	movlw	174
  3053  08AC  0086               	movwf	6
  3054  08AD  3027               	movlw	39
  3055  08AE  0087               	movwf	7
  3056  08AF  3004               	movlw	4
  3057  08B0  0081               	movwf	1
  3058                           
  3059                           ;main.c: 47:  data.chData[0].status = ON;
  3060  08B1  30B0               	movlw	176
  3061  08B2  0086               	movwf	6
  3062  08B3  3001               	movlw	1
  3063  08B4  0081               	movwf	1
  3064                           
  3065                           ;main.c: 48:  data.chData[0].mode = AUTO;
  3066  08B5  30AF               	movlw	175
  3067  08B6  0086               	movwf	6
  3068  08B7  3001               	movlw	1
  3069  08B8  0081               	movwf	1
  3070                           
  3071                           ;main.c: 49:  data.chData[0].Patt = 2.54;
  3072  08B9  30A8               	movlw	168
  3073  08BA  0086               	movwf	6
  3074  08BB  305C               	movlw	92
  3075  08BC  3FC0               	movwi [0]fsr1
  3076  08BD  308F               	movlw	143
  3077  08BE  3FC1               	movwi [1]fsr1
  3078  08BF  3022               	movlw	34
  3079  08C0  3FC2               	movwi [2]fsr1
  3080  08C1  3040               	movlw	64
  3081  08C2  3FC3               	movwi [3]fsr1
  3082  08C3                     l105:	
  3083                           ;main.c: 51:  while (1) {
  3084                           
  3085  08C3  0064               	clrwdt	;# 
  3086                           
  3087                           ;main.c: 53:   convertAnalogValues(&data);
  3088  08C4  307B               	movlw	123
  3089  08C5  0140               	movlb	0	; select bank0
  3090  08C6  00E0               	movwf	convertAnalogValues@data
  3091  08C7  3027               	movlw	39
  3092  08C8  00E1               	movwf	convertAnalogValues@data+1
  3093  08C9  2338  3188         	fcall	_convertAnalogValues
  3094                           
  3095                           ;main.c: 54:   checkSensor(&data);
  3096  08CB  307B               	movlw	123
  3097  08CC  00D3               	movwf	checkSensor@data
  3098  08CD  3027               	movlw	39
  3099  08CE  00D4               	movwf	checkSensor@data+1
  3100  08CF  21F0  3188         	fcall	_checkSensor
  3101                           
  3102                           ;main.c: 55:   menu(&data);
  3103  08D1  307B               	movlw	123
  3104  08D2  0142               	movlb	2	; select bank2
  3105  08D3  00E3               	movwf	menu@data^(0+256)
  3106  08D4  3027               	movlw	39
  3107  08D5  00E4               	movwf	(menu@data^(0+256)+1)
  3108  08D6  2694  3188         	fcall	_menu
  3109                           
  3110                           ;main.c: 56:   _delay((unsigned long)((10)*(4000000/4000.0)));
  3111  08D8  300D               	movlw	13
  3112  08D9  0143               	movlb	3	; select bank3
  3113  08DA  00EE               	movwf	??_main^(0+384)
  3114  08DB  30FB               	movlw	251
  3115  08DC                     u8067:	
  3116  08DC  0B89               	decfsz	9,f
  3117  08DD  28DC               	goto	u8067
  3118  08DE  0BEE               	decfsz	??_main^(0+384),f
  3119  08DF  28DC               	goto	u8067
  3120  08E0  3200               	nop2
  3121  08E1  28C3               	goto	l105
  3122  08E2                     __end_of_main:	
  3123  08E2                     __ptext70:	
  3124 ;; *************** function _OLED_init *****************
  3125 ;; Defined at:
  3126 ;;		line 78 in file "oled.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;		None
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;		None
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      void 
  3133 ;; Registers used:
  3134 ;;		wreg, status,2, status,0, pclath, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : B3F/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3143 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3144 ;;Total ram usage:        1 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:    7
  3147 ;; This function calls:
  3148 ;;		_OLED_command
  3149 ;;		_OLED_write4bits
  3150 ;; This function is called by:
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           
  3156                           ;psect for function _OLED_init
  3157  08E2                     _OLED_init:	
  3158                           
  3159                           ;oled.c: 80:  LATBbits.LATB4 = 0;
  3160                           
  3161                           ;incstack = 0
  3162                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
  3163  08E2  1219               	bcf	25,4	;volatile
  3164                           
  3165                           ;oled.c: 81:  LATBbits.LATB2 = 0;
  3166  08E3  1119               	bcf	25,2	;volatile
  3167                           
  3168                           ;oled.c: 82:  LATBbits.LATB3 = 0;
  3169  08E4  1199               	bcf	25,3	;volatile
  3170                           
  3171                           ;oled.c: 84:  _delay((unsigned long)((50)*(4000000/4000.0)));
  3172  08E5  3041               	movlw	65
  3173  08E6  0140               	movlb	0	; select bank0
  3174  08E7  00A6               	movwf	??_OLED_init
  3175  08E8  30EE               	movlw	238
  3176  08E9                     u8097:	
  3177  08E9  0B89               	decfsz	9,f
  3178  08EA  28E9               	goto	u8097
  3179  08EB  0BA6               	decfsz	??_OLED_init,f
  3180  08EC  28E9               	goto	u8097
  3181  08ED  0000               	nop
  3182                           
  3183                           ;oled.c: 88:  LATBbits.LATB1 = 0;
  3184  08EE  0140               	movlb	0	; select bank0
  3185  08EF  1099               	bcf	25,1	;volatile
  3186                           
  3187                           ;oled.c: 89:  LATBbits.LATB0 = 0;
  3188  08F0  1019               	bcf	25,0	;volatile
  3189                           
  3190                           ;oled.c: 90:  LATCbits.LATC5 = 0;
  3191  08F1  129A               	bcf	26,5	;volatile
  3192                           
  3193                           ;oled.c: 91:  LATCbits.LATC4 = 0;
  3194  08F2  121A               	bcf	26,4	;volatile
  3195                           
  3196                           ;oled.c: 102:  OLED_write4bits(0x03);
  3197  08F3  3003               	movlw	3
  3198  08F4  2162  3188         	fcall	_OLED_write4bits
  3199                           
  3200                           ;oled.c: 103:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3201  08F6  3007               	movlw	7
  3202  08F7  0140               	movlb	0	; select bank0
  3203  08F8  00A6               	movwf	??_OLED_init
  3204  08F9  307D               	movlw	125
  3205  08FA                     u8107:	
  3206  08FA  0B89               	decfsz	9,f
  3207  08FB  28FA               	goto	u8107
  3208  08FC  0BA6               	decfsz	??_OLED_init,f
  3209  08FD  28FA               	goto	u8107
  3210                           
  3211                           ;oled.c: 104:  OLED_write4bits(0x08);
  3212  08FE  3008               	movlw	8
  3213  08FF  2162  3188         	fcall	_OLED_write4bits
  3214                           
  3215                           ;oled.c: 105:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3216  0901  3007               	movlw	7
  3217  0902  0140               	movlb	0	; select bank0
  3218  0903  00A6               	movwf	??_OLED_init
  3219  0904  307D               	movlw	125
  3220  0905                     u8117:	
  3221  0905  0B89               	decfsz	9,f
  3222  0906  2905               	goto	u8117
  3223  0907  0BA6               	decfsz	??_OLED_init,f
  3224  0908  2905               	goto	u8117
  3225                           
  3226                           ;oled.c: 107:  OLED_write4bits(0x02);
  3227  0909  3002               	movlw	2
  3228  090A  2162  3188         	fcall	_OLED_write4bits
  3229                           
  3230                           ;oled.c: 108:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3231  090C  3007               	movlw	7
  3232  090D  0140               	movlb	0	; select bank0
  3233  090E  00A6               	movwf	??_OLED_init
  3234  090F  307D               	movlw	125
  3235  0910                     u8127:	
  3236  0910  0B89               	decfsz	9,f
  3237  0911  2910               	goto	u8127
  3238  0912  0BA6               	decfsz	??_OLED_init,f
  3239  0913  2910               	goto	u8127
  3240                           
  3241                           ;oled.c: 109:  OLED_write4bits(0x02);
  3242  0914  3002               	movlw	2
  3243  0915  2162  3188         	fcall	_OLED_write4bits
  3244                           
  3245                           ;oled.c: 110:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3246  0917  3007               	movlw	7
  3247  0918  0140               	movlb	0	; select bank0
  3248  0919  00A6               	movwf	??_OLED_init
  3249  091A  307D               	movlw	125
  3250  091B                     u8137:	
  3251  091B  0B89               	decfsz	9,f
  3252  091C  291B               	goto	u8137
  3253  091D  0BA6               	decfsz	??_OLED_init,f
  3254  091E  291B               	goto	u8137
  3255                           
  3256                           ;oled.c: 111:  OLED_write4bits(0x08);
  3257  091F  3008               	movlw	8
  3258  0920  2162  3188         	fcall	_OLED_write4bits
  3259                           
  3260                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3261  0922  3007               	movlw	7
  3262  0923  0140               	movlb	0	; select bank0
  3263  0924  00A6               	movwf	??_OLED_init
  3264  0925  307D               	movlw	125
  3265  0926                     u8147:	
  3266  0926  0B89               	decfsz	9,f
  3267  0927  2926               	goto	u8147
  3268  0928  0BA6               	decfsz	??_OLED_init,f
  3269  0929  2926               	goto	u8147
  3270                           
  3271                           ;oled.c: 114:  OLED_command(0x08);
  3272  092A  3008               	movlw	8
  3273  092B  2190  3188         	fcall	_OLED_command
  3274                           
  3275                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3276  092D  3007               	movlw	7
  3277  092E  0140               	movlb	0	; select bank0
  3278  092F  00A6               	movwf	??_OLED_init
  3279  0930  307D               	movlw	125
  3280  0931                     u8157:	
  3281  0931  0B89               	decfsz	9,f
  3282  0932  2931               	goto	u8157
  3283  0933  0BA6               	decfsz	??_OLED_init,f
  3284  0934  2931               	goto	u8157
  3285                           
  3286                           ;oled.c: 116:  OLED_command(0x01);
  3287  0935  3001               	movlw	1
  3288  0936  2190  3188         	fcall	_OLED_command
  3289                           
  3290                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3291  0938  3007               	movlw	7
  3292  0939  0140               	movlb	0	; select bank0
  3293  093A  00A6               	movwf	??_OLED_init
  3294  093B  307D               	movlw	125
  3295  093C                     u8167:	
  3296  093C  0B89               	decfsz	9,f
  3297  093D  293C               	goto	u8167
  3298  093E  0BA6               	decfsz	??_OLED_init,f
  3299  093F  293C               	goto	u8167
  3300                           
  3301                           ;oled.c: 118:  OLED_command(0x06);
  3302  0940  3006               	movlw	6
  3303  0941  2190  3188         	fcall	_OLED_command
  3304                           
  3305                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3306  0943  3007               	movlw	7
  3307  0944  0140               	movlb	0	; select bank0
  3308  0945  00A6               	movwf	??_OLED_init
  3309  0946  307D               	movlw	125
  3310  0947                     u8177:	
  3311  0947  0B89               	decfsz	9,f
  3312  0948  2947               	goto	u8177
  3313  0949  0BA6               	decfsz	??_OLED_init,f
  3314  094A  2947               	goto	u8177
  3315                           
  3316                           ;oled.c: 120:  OLED_command(0x02);
  3317  094B  3002               	movlw	2
  3318  094C  2190  3188         	fcall	_OLED_command
  3319                           
  3320                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3321  094E  3007               	movlw	7
  3322  094F  0140               	movlb	0	; select bank0
  3323  0950  00A6               	movwf	??_OLED_init
  3324  0951  307D               	movlw	125
  3325  0952                     u8187:	
  3326  0952  0B89               	decfsz	9,f
  3327  0953  2952               	goto	u8187
  3328  0954  0BA6               	decfsz	??_OLED_init,f
  3329  0955  2952               	goto	u8187
  3330                           
  3331                           ;oled.c: 122:  OLED_command(0x0C);
  3332  0956  300C               	movlw	12
  3333  0957  2190  3188         	fcall	_OLED_command
  3334                           
  3335                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3336  0959  3007               	movlw	7
  3337  095A  0140               	movlb	0	; select bank0
  3338  095B  00A6               	movwf	??_OLED_init
  3339  095C  307D               	movlw	125
  3340  095D                     u8197:	
  3341  095D  0B89               	decfsz	9,f
  3342  095E  295D               	goto	u8197
  3343  095F  0BA6               	decfsz	??_OLED_init,f
  3344  0960  295D               	goto	u8197
  3345  0961  0008               	return
  3346  0962                     __end_of_OLED_init:	
  3347  0962                     __ptext74:	
  3348 ;; *************** function _OLED_write4bits *****************
  3349 ;; Defined at:
  3350 ;;		line 19 in file "oled.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  value           1    wreg     unsigned char 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  value           1    2[BANK0 ] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0, pclath, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 3F/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3366 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3367 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3368 ;;Total ram usage:        3 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    4
  3371 ;; This function calls:
  3372 ;;		_OLED_pulseEnable
  3373 ;; This function is called by:
  3374 ;;		_OLED_send
  3375 ;;		_OLED_init
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           
  3380                           ;psect for function _OLED_write4bits
  3381  0962                     _OLED_write4bits:	
  3382                           
  3383                           ;incstack = 0
  3384                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0+pclath+cstack]
  3385                           ;OLED_write4bits@value stored from wreg
  3386  0962  0140               	movlb	0	; select bank0
  3387  0963  00A2               	movwf	OLED_write4bits@value
  3388                           
  3389                           ;oled.c: 19: void OLED_write4bits(uint8_t value);oled.c: 20: {;oled.c: 21:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
  3390  0964  3901               	andlw	1
  3391  0965  00A0               	movwf	??_OLED_write4bits
  3392  0966  0DA0               	rlf	??_OLED_write4bits,f
  3393  0967  0819               	movf	25,w	;volatile
  3394  0968  0620               	xorwf	??_OLED_write4bits,w
  3395  0969  39FD               	andlw	-3
  3396  096A  0620               	xorwf	??_OLED_write4bits,w
  3397  096B  0099               	movwf	25	;volatile
  3398                           
  3399                           ;oled.c: 22:  LATBbits.LATB0 = (value >> 1) & 0x01;
  3400  096C  0822               	movf	OLED_write4bits@value,w
  3401  096D  00A0               	movwf	??_OLED_write4bits
  3402  096E  3001               	movlw	1
  3403  096F  36A0               	lsrf	??_OLED_write4bits,f
  3404  0970  0520               	andwf	??_OLED_write4bits,w
  3405  0971  00A1               	movwf	??_OLED_write4bits+1
  3406  0972  0819               	movf	25,w	;volatile
  3407  0973  0621               	xorwf	??_OLED_write4bits+1,w
  3408  0974  39FE               	andlw	-2
  3409  0975  0621               	xorwf	??_OLED_write4bits+1,w
  3410  0976  0099               	movwf	25	;volatile
  3411                           
  3412                           ;oled.c: 23:  LATCbits.LATC5 = (value >> 2) & 0x01;
  3413  0977  0822               	movf	OLED_write4bits@value,w
  3414  0978  00A0               	movwf	??_OLED_write4bits
  3415  0979  279F  3188         	fcall	PL150	;call to abstracted procedure
  3416  097B  0DA1               	rlf	??_OLED_write4bits+1,f
  3417  097C  081A               	movf	26,w	;volatile
  3418  097D  0621               	xorwf	??_OLED_write4bits+1,w
  3419  097E  39DF               	andlw	-33
  3420  097F  0621               	xorwf	??_OLED_write4bits+1,w
  3421  0980  009A               	movwf	26	;volatile
  3422                           
  3423                           ;oled.c: 24:  LATCbits.LATC4 = (value >> 3) & 0x01;
  3424  0981  0822               	movf	OLED_write4bits@value,w
  3425  0982  00A0               	movwf	??_OLED_write4bits
  3426  0983  36A0               	lsrf	??_OLED_write4bits,f
  3427  0984  279F  3188         	fcall	PL150	;call to abstracted procedure
  3428  0986  081A               	movf	26,w	;volatile
  3429  0987  0621               	xorwf	??_OLED_write4bits+1,w
  3430  0988  39EF               	andlw	-17
  3431  0989  0621               	xorwf	??_OLED_write4bits+1,w
  3432  098A  009A               	movwf	26	;volatile
  3433                           
  3434                           ;oled.c: 26:  _delay((unsigned long)((50)*(4000000/4000000.0)));
  3435  098B  3010               	movlw	16
  3436  098C                     u8227:	
  3437  098C  0B89               	decfsz	9,f
  3438  098D  298C               	goto	u8227
  3439  098E  3200               	nop2
  3440                           
  3441                           ;oled.c: 27:  OLED_pulseEnable();
  3442  098F  29E7               	ljmp	l3773
  3443  0990                     __end_of_OLED_write4bits:	
  3444  0990                     __ptext71:	
  3445 ;; *************** function _OLED_command *****************
  3446 ;; Defined at:
  3447 ;;		line 66 in file "oled.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  value           1    wreg     unsigned char 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;  value           1    5[BANK0 ] unsigned char 
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      void 
  3454 ;; Registers used:
  3455 ;;		wreg, status,2, status,0, pclath, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 3F/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3464 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3465 ;;Total ram usage:        1 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    6
  3468 ;; This function calls:
  3469 ;;		_OLED_send
  3470 ;;		_OLED_waitForReady
  3471 ;; This function is called by:
  3472 ;;		_OLED_init
  3473 ;;		_OLED_scrollDisplayLeft
  3474 ;;		_OLED_scrollDisplayRight
  3475 ;;		_OLED_print_xy
  3476 ;;		_OLED_returnHome
  3477 ;;		_OLED_clearDisplay
  3478 ;;		_OLED_loadSpecialChars
  3479 ;;		_returnToPage
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           
  3484                           ;psect for function _OLED_command
  3485  0990                     _OLED_command:	
  3486                           
  3487                           ;incstack = 0
  3488                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
  3489                           ;OLED_command@value stored from wreg
  3490  0990  0140               	movlb	0	; select bank0
  3491  0991  00A5               	movwf	OLED_command@value
  3492                           
  3493                           ;oled.c: 66: void OLED_command(uint8_t value);oled.c: 67: {;oled.c: 68:  OLED_send(value
      +                          , 0);
  3494  0992  01A3               	clrf	OLED_send@mode
  3495  0993  0825               	movf	OLED_command@value,w
  3496  0994  21B7  3188         	fcall	_OLED_send
  3497                           
  3498                           ;oled.c: 69:  OLED_waitForReady();
  3499  0996  29CB               	ljmp	l4635
  3500  0997                     __end_of_OLED_command:	
  3501  0997                     __ptext68:	
  3502 ;; *************** function _OLED_loadSpecialChars *****************
  3503 ;; Defined at:
  3504 ;;		line 170 in file "oled.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;		None
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  special        48    7[BANK0 ] unsigned char [48]
  3509 ;;  n               1   55[BANK0 ] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 3F/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3520 ;;      Locals:         0      49       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3522 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3523 ;;Total ram usage:       50 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    7
  3526 ;; This function calls:
  3527 ;;		_OLED_command
  3528 ;;		_OLED_write
  3529 ;; This function is called by:
  3530 ;;		_main
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           
  3535                           ;psect for function _OLED_loadSpecialChars
  3536  0997                     _OLED_loadSpecialChars:	
  3537                           
  3538                           ;oled.c: 172:  uint8_t special[] = {0x08, 0x14, 0x0B, 0x04, 0x04, 0x04, 0x03, 0x00,
  3539                           
  3540                           ;incstack = 0
  3541                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3542  0997  30A0               	movlw	low OLED_loadSpecialChars@F7902
  3543  0998  0086               	movwf	6
  3544  0999  3003               	movlw	high OLED_loadSpecialChars@F7902
  3545  099A  0087               	movwf	7
  3546  099B  3027               	movlw	low OLED_loadSpecialChars@special
  3547  099C  0084               	movwf	4
  3548  099D  3000               	movlw	high OLED_loadSpecialChars@special
  3549  099E  0085               	movwf	5
  3550  099F  3030               	movlw	48
  3551  09A0  0140               	movlb	0	; select bank0
  3552  09A1  00A6               	movwf	??_OLED_loadSpecialChars
  3553  09A2                     u6850:	
  3554  09A2  0016               	moviw fsr1++
  3555  09A3  001A               	movwi fsr0++
  3556  09A4  0BA6               	decfsz	??_OLED_loadSpecialChars,f
  3557  09A5  29A2               	goto	u6850
  3558                           
  3559                           ;oled.c: 178:  uint8_t n;;oled.c: 180:  OLED_command(0x40 + 8);
  3560  09A6  3048               	movlw	72
  3561  09A7  2190  3188         	fcall	_OLED_command
  3562                           
  3563                           ;oled.c: 181:  for(n = 0; n < sizeof(special); n++) {
  3564  09A9  01D7               	clrf	OLED_loadSpecialChars@n
  3565  09AA                     l5841:	
  3566                           
  3567                           ;oled.c: 182:   OLED_write(special[n]);
  3568  09AA  0857               	movf	OLED_loadSpecialChars@n,w
  3569  09AB  3E27               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
  3570  09AC  0086               	movwf	6
  3571  09AD  0187               	clrf	7
  3572  09AE  0801               	movf	1,w
  3573  09AF  21C4  3188         	fcall	_OLED_write
  3574  09B1  3030               	movlw	48
  3575                           
  3576                           ;oled.c: 183:  }
  3577  09B2  0AD7               	incf	OLED_loadSpecialChars@n,f
  3578  09B3  0257               	subwf	OLED_loadSpecialChars@n,w
  3579  09B4  1803               	btfsc	3,0
  3580  09B5  0008               	return
  3581  09B6  29AA               	goto	l5841
  3582  09B7                     __end_of_OLED_loadSpecialChars:	
  3583  09B7                     __ptext73:	
  3584 ;; *************** function _OLED_send *****************
  3585 ;; Defined at:
  3586 ;;		line 30 in file "oled.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;  value           1    wreg     unsigned char 
  3589 ;;  mode            1    3[BANK0 ] unsigned char 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  value           1    4[BANK0 ] unsigned char 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0, pclath, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 3F/0
  3598 ;;		On exit  : 3F/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3601 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3605 ;;Total ram usage:        2 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    5
  3608 ;; This function calls:
  3609 ;;		_OLED_write4bits
  3610 ;; This function is called by:
  3611 ;;		_OLED_command
  3612 ;;		_OLED_write
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _OLED_send
  3618  09B7                     _OLED_send:	
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
  3622                           ;OLED_send@value stored from wreg
  3623  09B7  00A4               	movwf	OLED_send@value
  3624                           
  3625                           ;oled.c: 30: void OLED_send(uint8_t value, uint8_t mode);oled.c: 31: {;oled.c: 32:  LATB
      +                          bits.LATB4 = mode;
  3626  09B8  0C23               	rrf	OLED_send@mode,w
  3627  09B9  1C03               	skipc
  3628  09BA  1219               	bcf	25,4	;volatile
  3629  09BB  1803               	skipnc
  3630  09BC  1619               	bsf	25,4	;volatile
  3631                           
  3632                           ;oled.c: 33:  LATBbits.LATB3 = 0;
  3633  09BD  1199               	bcf	25,3	;volatile
  3634                           
  3635                           ;oled.c: 35:  OLED_write4bits(value >> 4);
  3636  09BE  0E24               	swapf	OLED_send@value,w
  3637  09BF  390F               	andlw	15
  3638  09C0  2162  3188         	fcall	_OLED_write4bits
  3639                           
  3640                           ;oled.c: 36:  OLED_write4bits(value);
  3641  09C2  0824               	movf	OLED_send@value,w
  3642  09C3  2962               	ljmp	_OLED_write4bits
  3643  09C4                     __end_of_OLED_send:	
  3644  09C4                     __ptext69:	
  3645 ;; *************** function _OLED_write *****************
  3646 ;; Defined at:
  3647 ;;		line 72 in file "oled.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  value           1    wreg     unsigned char 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  value           1    5[BANK0 ] unsigned char 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg, status,2, status,0, pclath, cstack
  3656 ;; Tracked objects:
  3657 ;;		On entry : 3F/0
  3658 ;;		On exit  : 3F/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3664 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3665 ;;Total ram usage:        1 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; Hardware stack levels required when called:    6
  3668 ;; This function calls:
  3669 ;;		_OLED_send
  3670 ;;		_OLED_waitForReady
  3671 ;; This function is called by:
  3672 ;;		_OLED_print_xy
  3673 ;;		_OLED_loadSpecialChars
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function _OLED_write
  3679  09C4                     _OLED_write:	
  3680                           
  3681                           ;incstack = 0
  3682                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
  3683                           ;OLED_write@value stored from wreg
  3684  09C4  00A5               	movwf	OLED_write@value
  3685                           
  3686                           ;oled.c: 72: void OLED_write(uint8_t value);oled.c: 73: {;oled.c: 74:  OLED_send(value, 
      +                          1);
  3687  09C5  01A3               	clrf	OLED_send@mode
  3688  09C6  0AA3               	incf	OLED_send@mode,f
  3689  09C7  0825               	movf	OLED_write@value,w
  3690  09C8  21B7  3188         	fcall	_OLED_send
  3691                           
  3692                           ;oled.c: 75:  OLED_waitForReady();
  3693  09CA  29CB               	ljmp	l4635
  3694  09CB                     __end_of_OLED_write:	
  3695  09CB                     __ptext72:	
  3696 ;; *************** function _OLED_waitForReady *****************
  3697 ;; Defined at:
  3698 ;;		line 41 in file "oled.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  busy            1    0[BANK0 ] unsigned char 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, pclath, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 3F/0
  3709 ;;		On exit  : 3F/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3715 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3716 ;;Total ram usage:        1 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    4
  3719 ;; This function calls:
  3720 ;;		_OLED_pulseEnable
  3721 ;; This function is called by:
  3722 ;;		_OLED_command
  3723 ;;		_OLED_write
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function _OLED_waitForReady
  3729  09CB                     _OLED_waitForReady:	
  3730  09CB                     l4635:	
  3731                           ;incstack = 0
  3732                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0+pclath+cstack]
  3733                           
  3734                           
  3735                           ;oled.c: 45:  TRISCbits.TRISC4 = 1;
  3736  09CB  1614               	bsf	20,4	;volatile
  3737                           
  3738                           ;oled.c: 46:  LATBbits.LATB4 = 0;
  3739  09CC  1219               	bcf	25,4	;volatile
  3740                           
  3741                           ;oled.c: 47:  LATBbits.LATB3 = 1;
  3742  09CD  1599               	bsf	25,3	;volatile
  3743  09CE                     l178:	
  3744                           ;oled.c: 49:  do {
  3745                           
  3746                           
  3747                           ;oled.c: 50:   LATBbits.LATB2 = 0;
  3748  09CE  1119               	bcf	25,2	;volatile
  3749                           
  3750                           ;oled.c: 51:   _delay((unsigned long)((10)*(4000000/4000000.0)));
  3751  09CF  3003               	movlw	3
  3752  09D0                     u8207:	
  3753  09D0  0B89               	decfsz	9,f
  3754  09D1  29D0               	goto	u8207
  3755  09D2  0000               	nop
  3756                           
  3757                           ;oled.c: 52:   LATBbits.LATB2 = 1;
  3758  09D3  0140               	movlb	0	; select bank0
  3759  09D4  1519               	bsf	25,2	;volatile
  3760                           
  3761                           ;oled.c: 54:   _delay((unsigned long)((10)*(4000000/4000000.0)));
  3762  09D5  3003               	movlw	3
  3763  09D6                     u8217:	
  3764  09D6  0B89               	decfsz	9,f
  3765  09D7  29D6               	goto	u8217
  3766  09D8  0000               	nop
  3767                           
  3768                           ;oled.c: 55:   busy = PORTCbits.RC4;
  3769  09D9  3000               	movlw	0
  3770  09DA  0140               	movlb	0	; select bank0
  3771  09DB  1A0E               	btfsc	14,4	;volatile
  3772  09DC  3001               	movlw	1
  3773  09DD  00A0               	movwf	OLED_waitForReady@busy
  3774                           
  3775                           ;oled.c: 57:   LATBbits.LATB2 = 0;
  3776  09DE  1119               	bcf	25,2	;volatile
  3777                           
  3778                           ;oled.c: 59:   OLED_pulseEnable();
  3779  09DF  21E7  3188         	fcall	_OLED_pulseEnable
  3780                           
  3781                           ;oled.c: 60:  } while (busy);
  3782  09E1  0820               	movf	OLED_waitForReady@busy,w
  3783  09E2  1D03               	btfss	3,2
  3784  09E3  29CE               	goto	l178
  3785                           
  3786                           ;oled.c: 62:  TRISCbits.TRISC4 = 0;
  3787  09E4  1214               	bcf	20,4	;volatile
  3788                           
  3789                           ;oled.c: 63:  LATBbits.LATB3 = 0;
  3790  09E5  1199               	bcf	25,3	;volatile
  3791  09E6  0008               	return
  3792  09E7                     __end_of_OLED_waitForReady:	
  3793  09E7                     __ptext75:	
  3794 ;; *************** function _OLED_pulseEnable *****************
  3795 ;; Defined at:
  3796 ;;		line 12 in file "oled.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;		None
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;		None
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 3F/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3814 ;;Total ram usage:        0 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    3
  3817 ;; This function calls:
  3818 ;;		Nothing
  3819 ;; This function is called by:
  3820 ;;		_OLED_write4bits
  3821 ;;		_OLED_waitForReady
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function _OLED_pulseEnable
  3827  09E7                     _OLED_pulseEnable:	
  3828  09E7                     l3773:	
  3829                           ;incstack = 0
  3830                           ; Regs used in _OLED_pulseEnable: [wreg]
  3831                           
  3832                           
  3833                           ;oled.c: 14:  LATBbits.LATB2 = 1;
  3834  09E7  0140               	movlb	0	; select bank0
  3835  09E8  1519               	bsf	25,2	;volatile
  3836                           
  3837                           ;oled.c: 15:  _delay((unsigned long)((50)*(4000000/4000000.0)));
  3838  09E9  3010               	movlw	16
  3839  09EA                     u8237:	
  3840  09EA  0B89               	decfsz	9,f
  3841  09EB  29EA               	goto	u8237
  3842  09EC  3200               	nop2
  3843                           
  3844                           ;oled.c: 16:  LATBbits.LATB2 = 0;
  3845  09ED  0140               	movlb	0	; select bank0
  3846  09EE  1119               	bcf	25,2	;volatile
  3847  09EF  0008               	return
  3848  09F0                     __end_of_OLED_pulseEnable:	
  3849  09F0                     __ptext60:	
  3850 ;; *************** function _checkSensor *****************
  3851 ;; Defined at:
  3852 ;;		line 63 in file "main.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  data            2   51[BANK0 ] PTR struct .
  3855 ;;		 -> data(117), 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  dp              1   57[BANK0 ] PTR struct .
  3858 ;;		 -> dataPacket(15), 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 3F/0
  3865 ;;		On exit  : 3C/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3868 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3870 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3871 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3872 ;;Total ram usage:        7 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    5
  3875 ;; This function calls:
  3876 ;;		___flge
  3877 ;;		___xxtofl
  3878 ;;		_getDataPacket
  3879 ;;		_timeNow
  3880 ;;		_timeSince
  3881 ;;		_uartIsDataReady
  3882 ;;		_uartSendByte
  3883 ;; This function is called by:
  3884 ;;		_main
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           
  3889                           ;psect for function _checkSensor
  3890  09F0                     _checkSensor:	
  3891                           
  3892                           ;main.c: 63: void checkSensor(t_globalData *data);main.c: 64: {;main.c: 65:  t_dataPacke
      +                          t *dp;;main.c: 66:  static uint32_t sensorUpdateInterval = 0;;main.c: 67:  static uint32
      +                          _t sensorTimeout = 0;;main.c: 68:  static uint8_t state = 0;;main.c: 71:  if ((data->tem
      +                          pAux < -30) || (data->tempAux > 100)) {
  3893                           
  3894                           ;incstack = 0
  3895                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3896  09F0  27A6  3188         	fcall	PL156	;call to abstracted procedure
  3897  09F2  278A               	fcall	PL128	;call to abstracted procedure
  3898  09F3  30C1               	movlw	193
  3899  09F4  00CE               	movwf	___flge@ff2+3
  3900  09F5  30F0               	movlw	240
  3901  09F6  00CD               	movwf	___flge@ff2+2
  3902  09F7  01CC               	clrf	___flge@ff2+1
  3903  09F8  01CB               	clrf	___flge@ff2
  3904  09F9  3194  24DA  3188   	fcall	___flge
  3905  09FC  1C03               	btfss	3,0
  3906  09FD  2A0C               	goto	l5857
  3907  09FE  3042               	movlw	66
  3908  09FF  00CA               	movwf	___flge@ff1+3
  3909  0A00  30C8               	movlw	200
  3910  0A01  00C9               	movwf	___flge@ff1+2
  3911  0A02  01C8               	clrf	___flge@ff1+1
  3912  0A03  01C7               	clrf	___flge@ff1
  3913  0A04  27A6  3188         	fcall	PL156	;call to abstracted procedure
  3914  0A06  2782               	fcall	PL126	;call to abstracted procedure
  3915  0A07  3194  24DA  3188   	fcall	___flge
  3916  0A0A  1803               	btfsc	3,0
  3917  0A0B  2A10               	goto	l5859
  3918  0A0C                     l5857:	
  3919                           
  3920                           ;main.c: 72:   data->status.AUX_SENSOR_OK = 0;
  3921  0A0C  2758  3188         	fcall	PL76	;call to abstracted procedure
  3922  0A0E  1101               	bcf	1,2
  3923                           
  3924                           ;main.c: 73:  } else
  3925  0A0F  2AC5               	goto	l5895
  3926  0A10                     l5859:	
  3927                           
  3928                           ;main.c: 74:   data->status.AUX_SENSOR_OK = 1;
  3929  0A10  2758  3188         	fcall	PL76	;call to abstracted procedure
  3930  0A12  1501               	bsf	1,2
  3931  0A13  2AC5               	goto	l5895
  3932  0A14                     l5861:	
  3933                           
  3934                           ;main.c: 79:    if (timeSince(sensorUpdateInterval) >= 50) {
  3935  0A14  0143               	movlb	3	; select bank3
  3936  0A15  0833               	movf	(checkSensor@sensorUpdateInterval+3)^(0+384),w
  3937  0A16  0140               	movlb	0	; select bank0
  3938  0A17  00A7               	movwf	timeSince@since+3
  3939  0A18  0143               	movlb	3	; select bank3
  3940  0A19  0832               	movf	(checkSensor@sensorUpdateInterval+2)^(0+384),w
  3941  0A1A  0140               	movlb	0	; select bank0
  3942  0A1B  00A6               	movwf	timeSince@since+2
  3943  0A1C  0143               	movlb	3	; select bank3
  3944  0A1D  0831               	movf	(checkSensor@sensorUpdateInterval+1)^(0+384),w
  3945  0A1E  0140               	movlb	0	; select bank0
  3946  0A1F  00A5               	movwf	timeSince@since+1
  3947  0A20  0143               	movlb	3	; select bank3
  3948  0A21  0830               	movf	checkSensor@sensorUpdateInterval^(0+384),w
  3949  0A22  0140               	movlb	0	; select bank0
  3950  0A23  00A4               	movwf	timeSince@since
  3951  0A24  22D8  3188         	fcall	_timeSince
  3952  0A26  0827               	movf	?_timeSince+3,w
  3953  0A27  1D03               	btfss	3,2
  3954  0A28  2A33               	goto	l5863
  3955  0A29  0826               	movf	?_timeSince+2,w
  3956  0A2A  1D03               	btfss	3,2
  3957  0A2B  2A33               	goto	l5863
  3958  0A2C  0825               	movf	?_timeSince+1,w
  3959  0A2D  1D03               	btfss	3,2
  3960  0A2E  2A33               	goto	l5863
  3961  0A2F  3032               	movlw	50
  3962  0A30  0224               	subwf	?_timeSince,w
  3963  0A31  1C03               	btfss	3,0
  3964  0A32  0008               	return
  3965  0A33                     l5863:	
  3966                           
  3967                           ;main.c: 80:     sensorUpdateInterval = sensorTimeout = timeNow();
  3968  0A33  231D  3188         	fcall	_timeNow
  3969  0A35  0823               	movf	?_timeNow+3,w
  3970  0A36  0143               	movlb	3	; select bank3
  3971  0A37  00AF               	movwf	(checkSensor@sensorTimeout+3)^(0+384)
  3972  0A38  0140               	movlb	0	; select bank0
  3973  0A39  0822               	movf	?_timeNow+2,w
  3974  0A3A  0143               	movlb	3	; select bank3
  3975  0A3B  00AE               	movwf	(checkSensor@sensorTimeout+2)^(0+384)
  3976  0A3C  0140               	movlb	0	; select bank0
  3977  0A3D  0821               	movf	?_timeNow+1,w
  3978  0A3E  0143               	movlb	3	; select bank3
  3979  0A3F  00AD               	movwf	(checkSensor@sensorTimeout+1)^(0+384)
  3980  0A40  0140               	movlb	0	; select bank0
  3981  0A41  0820               	movf	?_timeNow,w
  3982  0A42  0143               	movlb	3	; select bank3
  3983  0A43  00AC               	movwf	checkSensor@sensorTimeout^(0+384)
  3984  0A44  082F               	movf	(checkSensor@sensorTimeout+3)^(0+384),w
  3985  0A45  00B3               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+384)
  3986  0A46  082E               	movf	(checkSensor@sensorTimeout+2)^(0+384),w
  3987  0A47  00B2               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+384)
  3988  0A48  082D               	movf	(checkSensor@sensorTimeout+1)^(0+384),w
  3989  0A49  00B1               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+384)
  3990  0A4A  082C               	movf	checkSensor@sensorTimeout^(0+384),w
  3991  0A4B  00B0               	movwf	checkSensor@sensorUpdateInterval^(0+384)
  3992                           
  3993                           ;main.c: 81:     uartSendByte('?');
  3994  0A4C  303F               	movlw	63
  3995  0A4D  26E7               	fcall	_uartSendByte
  3996                           
  3997                           ;main.c: 82:     state = 1;
  3998  0A4E  0143               	movlb	3	; select bank3
  3999  0A4F  01CC               	clrf	checkSensor@state^(0+384)
  4000  0A50  0ACC               	incf	checkSensor@state^(0+384),f
  4001  0A51  0008               	return
  4002  0A52                     l5869:	
  4003                           
  4004                           ;main.c: 87:    if (timeSince(sensorTimeout) > 20) {
  4005  0A52  0143               	movlb	3	; select bank3
  4006  0A53  082F               	movf	(checkSensor@sensorTimeout+3)^(0+384),w
  4007  0A54  0140               	movlb	0	; select bank0
  4008  0A55  00A7               	movwf	timeSince@since+3
  4009  0A56  0143               	movlb	3	; select bank3
  4010  0A57  082E               	movf	(checkSensor@sensorTimeout+2)^(0+384),w
  4011  0A58  0140               	movlb	0	; select bank0
  4012  0A59  00A6               	movwf	timeSince@since+2
  4013  0A5A  0143               	movlb	3	; select bank3
  4014  0A5B  082D               	movf	(checkSensor@sensorTimeout+1)^(0+384),w
  4015  0A5C  0140               	movlb	0	; select bank0
  4016  0A5D  00A5               	movwf	timeSince@since+1
  4017  0A5E  0143               	movlb	3	; select bank3
  4018  0A5F  082C               	movf	checkSensor@sensorTimeout^(0+384),w
  4019  0A60  0140               	movlb	0	; select bank0
  4020  0A61  00A4               	movwf	timeSince@since
  4021  0A62  22D8  3188         	fcall	_timeSince
  4022  0A64  0827               	movf	?_timeSince+3,w
  4023  0A65  1D03               	btfss	3,2
  4024  0A66  2AC1               	goto	l5889
  4025  0A67  0826               	movf	?_timeSince+2,w
  4026  0A68  1D03               	btfss	3,2
  4027  0A69  2AC1               	goto	l5889
  4028  0A6A  0825               	movf	?_timeSince+1,w
  4029  0A6B  1D03               	btfss	3,2
  4030  0A6C  2AC1               	goto	l5889
  4031  0A6D  3015               	movlw	21
  4032  0A6E  0224               	subwf	?_timeSince,w
  4033  0A6F  1C03               	btfss	3,0
  4034  0A70  2AB2               	goto	l5875
  4035  0A71  2AC1               	goto	l5889
  4036  0A72                     l5881:	
  4037                           ;main.c: 88:     data->status.SENSOR_OK = 0;
  4038                           
  4039  0A72  0859               	movf	checkSensor@dp,w
  4040  0A73  3E02               	addlw	2
  4041  0A74  0086               	movwf	6
  4042  0A75  3002               	movlw	2	; select bank4/5
  4043  0A76  0087               	movwf	7
  4044  0A77  0B01               	decfsz	1,w
  4045  0A78  2AC1               	goto	l5889
  4046                           
  4047                           ;main.c: 93:      data->tempC = dp->tempC;
  4048  0A79  0859               	movf	checkSensor@dp,w
  4049  0A7A  3E03               	addlw	3
  4050  0A7B  0086               	movwf	6
  4051  0A7C  26F1  3188         	fcall	PL38	;call to abstracted procedure
  4052  0A7E  2739  3188         	fcall	PL66	;call to abstracted procedure
  4053                           
  4054                           ;main.c: 94:      data->relHum = dp->relHum;
  4055  0A80  0859               	movf	checkSensor@dp,w
  4056  0A81  3E07               	addlw	7
  4057  0A82  0086               	movwf	6
  4058  0A83  3002               	movlw	2	; select bank4/5
  4059  0A84  0087               	movwf	7
  4060  0A85  26F1  3188         	fcall	PL38	;call to abstracted procedure
  4061  0A87  3144               	addfsr 1,4
  4062  0A88  2739  3188         	fcall	PL66	;call to abstracted procedure
  4063                           
  4064                           ;main.c: 95:      data->dewPointC = dp->dewPointC;
  4065  0A8A  0859               	movf	checkSensor@dp,w
  4066  0A8B  3E0B               	addlw	11
  4067  0A8C  0086               	movwf	6
  4068  0A8D  3002               	movlw	2	; select bank4/5
  4069  0A8E  0087               	movwf	7
  4070  0A8F  26F1  3188         	fcall	PL38	;call to abstracted procedure
  4071  0A91  3148               	addfsr 1,8
  4072  0A92  2739  3188         	fcall	PL66	;call to abstracted procedure
  4073                           
  4074                           ;main.c: 96:      data->sensorVersion = dp->version;
  4075  0A94  0A59               	incf	checkSensor@dp,w
  4076  0A95  0086               	movwf	6
  4077  0A96  3002               	movlw	2	; select bank4/5
  4078  0A97  0087               	movwf	7
  4079  0A98  0801               	movf	1,w
  4080  0A99  00A0               	movwf	___xxtofl@val
  4081  0A9A  3000               	movlw	0
  4082  0A9B  01A1               	clrf	___xxtofl@val+1
  4083  0A9C  01A2               	clrf	___xxtofl@val+2
  4084  0A9D  01A3               	clrf	___xxtofl@val+3
  4085  0A9E  2551  3188         	fcall	___xxtofl
  4086  0AA0  0853               	movf	checkSensor@data,w
  4087  0AA1  0086               	movwf	6
  4088  0AA2  0854               	movf	checkSensor@data+1,w
  4089  0AA3  0087               	movwf	7
  4090  0AA4  314C               	addfsr 1,12
  4091  0AA5  0820               	movf	?___xxtofl,w
  4092  0AA6  3FC0               	movwi [0]fsr1
  4093  0AA7  0821               	movf	?___xxtofl+1,w
  4094  0AA8  3FC1               	movwi [1]fsr1
  4095  0AA9  0822               	movf	?___xxtofl+2,w
  4096  0AAA  3FC2               	movwi [2]fsr1
  4097  0AAB  0823               	movf	?___xxtofl+3,w
  4098  0AAC  3FC3               	movwi [3]fsr1
  4099                           
  4100                           ;main.c: 97:      data->status.SENSOR_OK = 1;
  4101  0AAD  2758               	fcall	PL76	;call to abstracted procedure
  4102  0AAE  1481               	bsf	1,1
  4103  0AAF                     l5873:	
  4104                           ;main.c: 98:     } else {
  4105                           
  4106                           
  4107                           ;main.c: 89:     state = 0;
  4108  0AAF  0143               	movlb	3	; select bank3
  4109  0AB0  01CC               	clrf	checkSensor@state^(0+384)
  4110                           
  4111                           ;main.c: 90:    } else if (uartIsDataReady()) {
  4112  0AB1  0008               	return
  4113  0AB2                     l5875:	
  4114  0AB2  232F  3188         	fcall	_uartIsDataReady
  4115  0AB4  3A00               	xorlw	0
  4116  0AB5  1903               	skipnz
  4117  0AB6  0008               	return
  4118                           
  4119                           ;main.c: 91:     dp = getDataPacket();
  4120  0AB7  232E  3188         	fcall	_getDataPacket
  4121  0AB9  00D9               	movwf	checkSensor@dp
  4122                           
  4123                           ;main.c: 92:     if ((dp->header == 0xAA) && (dp->status == 1)) {
  4124  0ABA  0086               	movwf	6
  4125  0ABB  3002               	movlw	2	; select bank4/5
  4126  0ABC  0087               	movwf	7
  4127  0ABD  30AA               	movlw	170
  4128  0ABE  0601               	xorwf	1,w
  4129  0ABF  1903               	btfsc	3,2
  4130  0AC0  2A72               	goto	l5881
  4131  0AC1                     l5889:	
  4132                           
  4133                           ;main.c: 100:      data->status.SENSOR_OK = 0;
  4134  0AC1  2758  3188         	fcall	PL76	;call to abstracted procedure
  4135  0AC3  1081               	bcf	1,1
  4136  0AC4  2AAF               	goto	l5873
  4137  0AC5                     l5895:	
  4138  0AC5  0143               	movlb	3	; select bank3
  4139  0AC6  084C               	movf	checkSensor@state^(0+384),w
  4140  0AC7  0140               	movlb	0	; select bank0
  4141  0AC8  00D5               	movwf	??_checkSensor
  4142  0AC9  01D6               	clrf	??_checkSensor+1
  4143                           
  4144                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4145                           ; Switch size 1, requested type "space"
  4146                           ; Number of cases is 1, Range of values is 0 to 0
  4147                           ; switch strategies available:
  4148                           ; Name         Instructions Cycles
  4149                           ; simple_byte            4     3 (average)
  4150                           ; direct_byte            8     6 (fixed)
  4151                           ; jumptable            260     6 (fixed)
  4152                           ;	Chosen strategy is simple_byte
  4153  0ACA  0856               	movf	??_checkSensor+1,w
  4154  0ACB  3A00               	xorlw	0	; case 0
  4155  0ACC  1903               	skipnz
  4156  0ACD  2ACF               	goto	l6885
  4157  0ACE  2AAF               	goto	l5873
  4158  0ACF                     l6885:	
  4159                           
  4160                           ; Switch size 1, requested type "space"
  4161                           ; Number of cases is 2, Range of values is 0 to 1
  4162                           ; switch strategies available:
  4163                           ; Name         Instructions Cycles
  4164                           ; simple_byte            7     4 (average)
  4165                           ; direct_byte           10     6 (fixed)
  4166                           ; jumptable            260     6 (fixed)
  4167                           ;	Chosen strategy is simple_byte
  4168  0ACF  0855               	movf	??_checkSensor,w
  4169  0AD0  3A00               	xorlw	0	; case 0
  4170  0AD1  1903               	skipnz
  4171  0AD2  2A14               	goto	l5861
  4172  0AD3  3A01               	xorlw	1	; case 1
  4173  0AD4  1903               	skipnz
  4174  0AD5  2A52               	goto	l5869
  4175  0AD6  2AAF               	goto	l5873
  4176  0AD7  0008               	return
  4177  0AD8                     __end_of_checkSensor:	
  4178  0AD8                     __ptext63:	
  4179 ;; *************** function _timeSince *****************
  4180 ;; Defined at:
  4181 ;;		line 21 in file "interrupt.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  since           4    4[BANK0 ] unsigned long 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  now             4   16[BANK0 ] unsigned long 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  4    4[BANK0 ] unsigned long 
  4188 ;; Registers used:
  4189 ;;		wreg, pclath, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 3F/0
  4192 ;;		On exit  : 3F/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4195 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4196 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4197 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4198 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4199 ;;Total ram usage:       16 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    4
  4202 ;; This function calls:
  4203 ;;		_timeNow
  4204 ;; This function is called by:
  4205 ;;		_checkSensor
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           
  4210                           ;psect for function _timeSince
  4211  0AD8                     _timeSince:	
  4212                           
  4213                           ;incstack = 0
  4214                           ; Regs used in _timeSince: [wreg+pclath+cstack]
  4215  0AD8  231D  3188         	fcall	_timeNow
  4216  0ADA  0823               	movf	?_timeNow+3,w
  4217  0ADB  00B3               	movwf	timeSince@now+3
  4218  0ADC  0822               	movf	?_timeNow+2,w
  4219  0ADD  00B2               	movwf	timeSince@now+2
  4220  0ADE  0821               	movf	?_timeNow+1,w
  4221  0ADF  00B1               	movwf	timeSince@now+1
  4222  0AE0  0820               	movf	?_timeNow,w
  4223  0AE1  00B0               	movwf	timeSince@now
  4224  0AE2  0827               	movf	timeSince@since+3,w
  4225  0AE3  0233               	subwf	timeSince@now+3,w
  4226  0AE4  1D03               	skipz
  4227  0AE5  2AF0               	goto	u6545
  4228  0AE6  0826               	movf	timeSince@since+2,w
  4229  0AE7  0232               	subwf	timeSince@now+2,w
  4230  0AE8  1D03               	skipz
  4231  0AE9  2AF0               	goto	u6545
  4232  0AEA  0825               	movf	timeSince@since+1,w
  4233  0AEB  0231               	subwf	timeSince@now+1,w
  4234  0AEC  1D03               	skipz
  4235  0AED  2AF0               	goto	u6545
  4236  0AEE  0824               	movf	timeSince@since,w
  4237  0AEF  0230               	subwf	timeSince@now,w
  4238  0AF0                     u6545:	
  4239  0AF0  1C03               	skipc
  4240  0AF1  2AFF               	goto	l5419
  4241  0AF2  0824               	movf	timeSince@since,w
  4242  0AF3  0230               	subwf	timeSince@now,w
  4243  0AF4  00A8               	movwf	??_timeSince
  4244  0AF5  0825               	movf	timeSince@since+1,w
  4245  0AF6  3B31               	subwfb	timeSince@now+1,w
  4246  0AF7  00A9               	movwf	??_timeSince+1
  4247  0AF8  0826               	movf	timeSince@since+2,w
  4248  0AF9  3B32               	subwfb	timeSince@now+2,w
  4249  0AFA  00AA               	movwf	??_timeSince+2
  4250  0AFB  0827               	movf	timeSince@since+3,w
  4251  0AFC  3B33               	subwfb	timeSince@now+3,w
  4252  0AFD  00AB               	movwf	??_timeSince+3
  4253  0AFE  2F7A               	ljmp	PL118	;call to abstracted procedure
  4254  0AFF                     l5419:	
  4255  0AFF  3001               	movlw	1
  4256  0B00  00A8               	movwf	??_timeSince
  4257  0B01  30CA               	movlw	202
  4258  0B02  00A9               	movwf	??_timeSince+1
  4259  0B03  309A               	movlw	154
  4260  0B04  00AA               	movwf	??_timeSince+2
  4261  0B05  303B               	movlw	59
  4262  0B06  00AB               	movwf	??_timeSince+3
  4263  0B07  0824               	movf	timeSince@since,w
  4264  0B08  0230               	subwf	timeSince@now,w
  4265  0B09  00AC               	movwf	??_timeSince+4
  4266  0B0A  0825               	movf	timeSince@since+1,w
  4267  0B0B  3B31               	subwfb	timeSince@now+1,w
  4268  0B0C  00AD               	movwf	??_timeSince+5
  4269  0B0D  0826               	movf	timeSince@since+2,w
  4270  0B0E  3B32               	subwfb	timeSince@now+2,w
  4271  0B0F  00AE               	movwf	??_timeSince+6
  4272  0B10  0827               	movf	timeSince@since+3,w
  4273  0B11  3B33               	subwfb	timeSince@now+3,w
  4274  0B12  00AF               	movwf	??_timeSince+7
  4275  0B13  082C               	movf	??_timeSince+4,w
  4276  0B14  07A8               	addwf	??_timeSince,f
  4277  0B15  082D               	movf	??_timeSince+5,w
  4278  0B16  3DA9               	addwfc	??_timeSince+1,f
  4279  0B17  082E               	movf	??_timeSince+6,w
  4280  0B18  3DAA               	addwfc	??_timeSince+2,f
  4281  0B19  082F               	movf	??_timeSince+7,w
  4282  0B1A  3DAB               	addwfc	??_timeSince+3,f
  4283  0B1B  082B               	movf	??_timeSince+3,w
  4284  0B1C  2F7A               	ljmp	PL118	;call to abstracted procedure
  4285  0B1D                     __end_of_timeSince:	
  4286  0B1D                     __ptext64:	
  4287 ;; *************** function _timeNow *****************
  4288 ;; Defined at:
  4289 ;;		line 13 in file "interrupt.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;		None
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  4    0[BANK0 ] unsigned long 
  4296 ;; Registers used:
  4297 ;;		wreg
  4298 ;; Tracked objects:
  4299 ;;		On entry : 3F/0
  4300 ;;		On exit  : 3F/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4303 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4306 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4307 ;;Total ram usage:        4 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    3
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_checkSensor
  4314 ;;		_timeSince
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           
  4319                           ;psect for function _timeNow
  4320  0B1D                     _timeNow:	
  4321                           
  4322                           ;incstack = 0
  4323                           ; Regs used in _timeNow: [wreg]
  4324  0B1D  0143               	movlb	3	; select bank3
  4325  0B1E  082B               	movf	(_tick100ms+3)^(0+384),w	;volatile
  4326  0B1F  0140               	movlb	0	; select bank0
  4327  0B20  00A3               	movwf	?_timeNow+3
  4328  0B21  0143               	movlb	3	; select bank3
  4329  0B22  082A               	movf	(_tick100ms+2)^(0+384),w	;volatile
  4330  0B23  0140               	movlb	0	; select bank0
  4331  0B24  00A2               	movwf	?_timeNow+2
  4332  0B25  0143               	movlb	3	; select bank3
  4333  0B26  0829               	movf	(_tick100ms+1)^(0+384),w	;volatile
  4334  0B27  0140               	movlb	0	; select bank0
  4335  0B28  00A1               	movwf	?_timeNow+1
  4336  0B29  0143               	movlb	3	; select bank3
  4337  0B2A  0828               	movf	_tick100ms^(0+384),w	;volatile
  4338  0B2B  0140               	movlb	0	; select bank0
  4339  0B2C  00A0               	movwf	?_timeNow
  4340  0B2D  0008               	return
  4341  0B2E                     __end_of_timeNow:	
  4342  0B2E                     __ptext65:	
  4343 ;; *************** function _getDataPacket *****************
  4344 ;; Defined at:
  4345 ;;		line 18 in file "uart.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;		None
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;		None
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  1    wreg      PTR struct .
  4352 ;; Registers used:
  4353 ;;		wreg
  4354 ;; Tracked objects:
  4355 ;;		On entry : 3F/0
  4356 ;;		On exit  : 3F/0
  4357 ;;		Unchanged: 3F/0
  4358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4363 ;;Total ram usage:        0 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    3
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_checkSensor
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function _getDataPacket
  4375  0B2E                     _getDataPacket:	
  4376                           
  4377                           ;uart.c: 20:  return &dataPacket;
  4378                           
  4379                           ;incstack = 0
  4380                           ; Regs used in _getDataPacket: [wreg]
  4381  0B2E  3434               	retlw	(low (_dataPacket| (0+512)))& (0+255)
  4382  0B2F                     __end_of_getDataPacket:	
  4383  0B2F                     __ptext62:	
  4384 ;; *************** function _uartIsDataReady *****************
  4385 ;; Defined at:
  4386 ;;		line 11 in file "uart.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  ret             1    0[BANK0 ] unsigned char 
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      unsigned char 
  4393 ;; Registers used:
  4394 ;;		wreg, status,2
  4395 ;; Tracked objects:
  4396 ;;		On entry : 3F/0
  4397 ;;		On exit  : 3F/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4403 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4404 ;;Total ram usage:        1 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:    3
  4407 ;; This function calls:
  4408 ;;		Nothing
  4409 ;; This function is called by:
  4410 ;;		_checkSensor
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           
  4415                           ;psect for function _uartIsDataReady
  4416  0B2F                     _uartIsDataReady:	
  4417                           
  4418                           ;uart.c: 13:  uint8_t ret = dataReadyFlag;
  4419                           
  4420                           ;incstack = 0
  4421                           ; Regs used in _uartIsDataReady: [wreg+status,2]
  4422  0B2F  0143               	movlb	3	; select bank3
  4423  0B30  0846               	movf	_dataReadyFlag^(0+384),w	;volatile
  4424  0B31  0140               	movlb	0	; select bank0
  4425  0B32  00A0               	movwf	uartIsDataReady@ret
  4426                           
  4427                           ;uart.c: 14:  dataReadyFlag = 0;
  4428  0B33  0143               	movlb	3	; select bank3
  4429  0B34  01C6               	clrf	_dataReadyFlag^(0+384)	;volatile
  4430                           
  4431                           ;uart.c: 15:  return ret;
  4432  0B35  0140               	movlb	0	; select bank0
  4433  0B36  0820               	movf	uartIsDataReady@ret,w
  4434  0B37  0008               	return
  4435  0B38                     __end_of_uartIsDataReady:	
  4436  0B38                     __ptext52:	
  4437 ;; *************** function _convertAnalogValues *****************
  4438 ;; Defined at:
  4439 ;;		line 133 in file "main.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  data            2   64[BANK0 ] PTR struct .
  4442 ;;		 -> data(117), 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;  f               4    0        float 
  4445 ;;  adc             2   70[BANK0 ] unsigned short 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 3F/0
  4452 ;;		On exit  : 3F/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4455 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4456 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4458 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4459 ;;Total ram usage:        8 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    5
  4462 ;; This function calls:
  4463 ;;		___fladd
  4464 ;;		___fldiv
  4465 ;;		___flmul
  4466 ;;		___xxtofl
  4467 ;;		_adcGetConversion
  4468 ;;		_ema
  4469 ;; This function is called by:
  4470 ;;		_main
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           
  4475                           ;psect for function _convertAnalogValues
  4476  0B38                     _convertAnalogValues:	
  4477                           
  4478                           ;main.c: 133: void convertAnalogValues(t_globalData *data);main.c: 134: {;main.c: 135:  
      +                          static uint16_t avgT, avgV, avgI;;main.c: 136:  uint16_t adc;;main.c: 137:  float f;;mai
      +                          n.c: 139:  adc = adcGetConversion(0b000110);
  4479                           
  4480                           ;incstack = 0
  4481                           ; Regs used in _convertAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4482  0B38  3006               	movlw	6
  4483  0B39  25BA  3188         	fcall	_adcGetConversion
  4484                           
  4485                           ;main.c: 140:  avgT = ema(adc, avgT, ( (uint32_t)(0.65 * 65535) ));
  4486  0B3B  2719  3188         	fcall	PL52	;call to abstracted procedure
  4487  0B3D  083D               	movf	(convertAnalogValues@avgT+1)^(0+384),w
  4488  0B3E  0140               	movlb	0	; select bank0
  4489  0B3F  00AF               	movwf	ema@average+1
  4490  0B40  0143               	movlb	3	; select bank3
  4491  0B41  083C               	movf	convertAnalogValues@avgT^(0+384),w
  4492  0B42  2742  3188         	fcall	PL70	;call to abstracted procedure
  4493  0B44  25D9  3188         	fcall	_ema
  4494  0B46  082D               	movf	?_ema+1,w
  4495  0B47  0143               	movlb	3	; select bank3
  4496  0B48  00BD               	movwf	(convertAnalogValues@avgT+1)^(0+384)
  4497  0B49  0140               	movlb	0	; select bank0
  4498  0B4A  082C               	movf	?_ema,w
  4499  0B4B  0143               	movlb	3	; select bank3
  4500  0B4C  00BC               	movwf	convertAnalogValues@avgT^(0+384)
  4501                           
  4502                           ;main.c: 141:  adc = adcGetConversion(0b010000);
  4503  0B4D  3010               	movlw	16
  4504  0B4E  25BA  3188         	fcall	_adcGetConversion
  4505                           
  4506                           ;main.c: 142:  avgV = ema(adc, avgV, ( (uint32_t)(0.65 * 65535) ));
  4507  0B50  2719  3188         	fcall	PL52	;call to abstracted procedure
  4508  0B52  083B               	movf	(convertAnalogValues@avgV+1)^(0+384),w
  4509  0B53  0140               	movlb	0	; select bank0
  4510  0B54  00AF               	movwf	ema@average+1
  4511  0B55  0143               	movlb	3	; select bank3
  4512  0B56  083A               	movf	convertAnalogValues@avgV^(0+384),w
  4513  0B57  2742  3188         	fcall	PL70	;call to abstracted procedure
  4514  0B59  25D9  3188         	fcall	_ema
  4515  0B5B  082D               	movf	?_ema+1,w
  4516  0B5C  0143               	movlb	3	; select bank3
  4517  0B5D  00BB               	movwf	(convertAnalogValues@avgV+1)^(0+384)
  4518  0B5E  0140               	movlb	0	; select bank0
  4519  0B5F  082C               	movf	?_ema,w
  4520  0B60  0143               	movlb	3	; select bank3
  4521  0B61  00BA               	movwf	convertAnalogValues@avgV^(0+384)
  4522                           
  4523                           ;main.c: 143:  adc = adcGetConversion(0b010001);
  4524  0B62  3011               	movlw	17
  4525  0B63  25BA  3188         	fcall	_adcGetConversion
  4526                           
  4527                           ;main.c: 144:  avgI = ema(adc, avgI, ( (uint32_t)(0.65 * 65535) ));
  4528  0B65  2719  3188         	fcall	PL52	;call to abstracted procedure
  4529  0B67  0839               	movf	(convertAnalogValues@avgI+1)^(0+384),w
  4530  0B68  0140               	movlb	0	; select bank0
  4531  0B69  00AF               	movwf	ema@average+1
  4532  0B6A  0143               	movlb	3	; select bank3
  4533  0B6B  0838               	movf	convertAnalogValues@avgI^(0+384),w
  4534  0B6C  2742  3188         	fcall	PL70	;call to abstracted procedure
  4535  0B6E  25D9  3188         	fcall	_ema
  4536  0B70  082D               	movf	?_ema+1,w
  4537  0B71  0143               	movlb	3	; select bank3
  4538  0B72  00B9               	movwf	(convertAnalogValues@avgI+1)^(0+384)
  4539  0B73  0140               	movlb	0	; select bank0
  4540  0B74  082C               	movf	?_ema,w
  4541  0B75  0143               	movlb	3	; select bank3
  4542  0B76  00B8               	movwf	convertAnalogValues@avgI^(0+384)
  4543                           
  4544                           ;main.c: 145:  data->tempAux = (avgT * 0.1191) - 34.512;
  4545  0B77  30C2               	movlw	194
  4546  0B78  0140               	movlb	0	; select bank0
  4547  0B79  00CA               	movwf	___fladd@b+3
  4548  0B7A  300A               	movlw	10
  4549  0B7B  00C9               	movwf	___fladd@b+2
  4550  0B7C  300C               	movlw	12
  4551  0B7D  00C8               	movwf	___fladd@b+1
  4552  0B7E  304A               	movlw	74
  4553  0B7F  00C7               	movwf	___fladd@b
  4554  0B80  303D               	movlw	61
  4555  0B81  00B1               	movwf	___flmul@b+3
  4556  0B82  30F3               	movlw	243
  4557  0B83  00B0               	movwf	___flmul@b+2
  4558  0B84  30EA               	movlw	234
  4559  0B85  00AF               	movwf	___flmul@b+1
  4560  0B86  30B3               	movlw	179
  4561  0B87  00AE               	movwf	___flmul@b
  4562  0B88  0143               	movlb	3	; select bank3
  4563  0B89  083C               	movf	convertAnalogValues@avgT^(0+384),w
  4564  0B8A  0140               	movlb	0	; select bank0
  4565  0B8B  00A0               	movwf	___xxtofl@val
  4566  0B8C  0143               	movlb	3	; select bank3
  4567  0B8D  083D               	movf	(convertAnalogValues@avgT+1)^(0+384),w
  4568  0B8E  2792  3188         	fcall	PL136	;call to abstracted procedure
  4569  0B90  2551  3188         	fcall	___xxtofl
  4570  0B92  2730  3188         	fcall	PL64	;call to abstracted procedure
  4571  0B94  2420               	fcall	___flmul
  4572  0B95  0831               	movf	?___flmul+3,w
  4573  0B96  00CE               	movwf	___fladd@a+3
  4574  0B97  0830               	movf	?___flmul+2,w
  4575  0B98  00CD               	movwf	___fladd@a+2
  4576  0B99  082F               	movf	?___flmul+1,w
  4577  0B9A  00CC               	movwf	___fladd@a+1
  4578  0B9B  082E               	movf	?___flmul,w
  4579  0B9C  00CB               	movwf	___fladd@a
  4580  0B9D  3181  2187  3188   	fcall	___fladd
  4581  0BA0  0860               	movf	convertAnalogValues@data,w
  4582  0BA1  0086               	movwf	6
  4583  0BA2  0861               	movf	convertAnalogValues@data+1,w
  4584  0BA3  0087               	movwf	7
  4585  0BA4  3150               	addfsr 1,16
  4586  0BA5  275F  3188         	fcall	PL102	;call to abstracted procedure
  4587                           
  4588                           ;main.c: 146:  data->voltage = ((float)avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
  4589  0BA7  3040               	movlw	64
  4590  0BA8  2798  3188         	fcall	PL140	;call to abstracted procedure
  4591  0BAA  083A               	movf	convertAnalogValues@avgV^(0+384),w
  4592  0BAB  0140               	movlb	0	; select bank0
  4593  0BAC  00A0               	movwf	___xxtofl@val
  4594  0BAD  0143               	movlb	3	; select bank3
  4595  0BAE  083B               	movf	(convertAnalogValues@avgV+1)^(0+384),w
  4596  0BAF  2792  3188         	fcall	PL136	;call to abstracted procedure
  4597  0BB1  2551  3188         	fcall	___xxtofl
  4598  0BB3  2730  3188         	fcall	PL64	;call to abstracted procedure
  4599  0BB5  2420  3188         	fcall	___flmul
  4600  0BB7  0831               	movf	?___flmul+3,w
  4601  0BB8  00E5               	movwf	_convertAnalogValues$1963+3
  4602  0BB9  0830               	movf	?___flmul+2,w
  4603  0BBA  00E4               	movwf	_convertAnalogValues$1963+2
  4604  0BBB  082F               	movf	?___flmul+1,w
  4605  0BBC  00E3               	movwf	_convertAnalogValues$1963+1
  4606  0BBD  082E               	movf	?___flmul,w
  4607  0BBE  00E2               	movwf	_convertAnalogValues$1963
  4608                           
  4609                           ;main.c: 146:  data->voltage = ((float)avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
  4610  0BBF  3047               	movlw	71
  4611  0BC0  00CA               	movwf	___fldiv@a+3
  4612  0BC1  303B               	movlw	59
  4613  0BC2  00C9               	movwf	___fldiv@a+2
  4614  0BC3  30D1               	movlw	209
  4615  0BC4  00C8               	movwf	___fldiv@a+1
  4616  0BC5  3043               	movlw	67
  4617  0BC6  01C7               	clrf	___fldiv@a
  4618  0BC7  00B1               	movwf	___flmul@b+3
  4619  0BC8  3045               	movlw	69
  4620  0BC9  00B0               	movwf	___flmul@b+2
  4621  0BCA  01AF               	clrf	___flmul@b+1
  4622  0BCB  01AE               	clrf	___flmul@b
  4623  0BCC  0865               	movf	_convertAnalogValues$1963+3,w
  4624  0BCD  00B5               	movwf	___flmul@a+3
  4625  0BCE  0864               	movf	_convertAnalogValues$1963+2,w
  4626  0BCF  00B4               	movwf	___flmul@a+2
  4627  0BD0  0863               	movf	_convertAnalogValues$1963+1,w
  4628  0BD1  00B3               	movwf	___flmul@a+1
  4629  0BD2  0862               	movf	_convertAnalogValues$1963,w
  4630  0BD3  00B2               	movwf	___flmul@a
  4631  0BD4  2420  3188         	fcall	___flmul
  4632  0BD6  2771               	fcall	PL108	;call to abstracted procedure
  4633  0BD7  3193  23DC  3188   	fcall	___fldiv
  4634  0BDA  27B3  3188         	fcall	PL170	;call to abstracted procedure
  4635  0BDC  2768  3188         	fcall	PL106	;call to abstracted procedure
  4636                           
  4637                           ;main.c: 147:  data->current = (avgI * 5.0) / (1023.0 * 0.05 * 50.0);
  4638  0BDE  3045               	movlw	69
  4639  0BDF  00CA               	movwf	___fldiv@a+3
  4640  0BE0  301F               	movlw	31
  4641  0BE1  00C9               	movwf	___fldiv@a+2
  4642  0BE2  30D8               	movlw	216
  4643  0BE3  00C8               	movwf	___fldiv@a+1
  4644  0BE4  3040               	movlw	64
  4645  0BE5  01C7               	clrf	___fldiv@a
  4646  0BE6  2798  3188         	fcall	PL140	;call to abstracted procedure
  4647  0BE8  0838               	movf	convertAnalogValues@avgI^(0+384),w
  4648  0BE9  0140               	movlb	0	; select bank0
  4649  0BEA  00A0               	movwf	___xxtofl@val
  4650  0BEB  0143               	movlb	3	; select bank3
  4651  0BEC  0839               	movf	(convertAnalogValues@avgI+1)^(0+384),w
  4652  0BED  2792  3188         	fcall	PL136	;call to abstracted procedure
  4653  0BEF  2551  3188         	fcall	___xxtofl
  4654  0BF1  2730  3188         	fcall	PL64	;call to abstracted procedure
  4655  0BF3  2420  3188         	fcall	___flmul
  4656  0BF5  2771               	fcall	PL108	;call to abstracted procedure
  4657  0BF6  3193  23DC  3188   	fcall	___fldiv
  4658  0BF9  27B9  3188         	fcall	PL184	;call to abstracted procedure
  4659  0BFB  2768  3188         	fcall	PL106	;call to abstracted procedure
  4660                           
  4661                           ;main.c: 148:  data->power = data->voltage * data->current;
  4662  0BFD  27B9  3188         	fcall	PL184	;call to abstracted procedure
  4663  0BFF  3F40               	moviw [0]fsr1
  4664  0C00  00AE               	movwf	___flmul@b
  4665  0C01  3F41               	moviw [1]fsr1
  4666  0C02  00AF               	movwf	___flmul@b+1
  4667  0C03  3F42               	moviw [2]fsr1
  4668  0C04  00B0               	movwf	___flmul@b+2
  4669  0C05  3F43               	moviw [3]fsr1
  4670  0C06  00B1               	movwf	___flmul@b+3
  4671  0C07  27B3  3188         	fcall	PL170	;call to abstracted procedure
  4672  0C09  3F40               	moviw [0]fsr1
  4673  0C0A  00B2               	movwf	___flmul@a
  4674  0C0B  3F41               	moviw [1]fsr1
  4675  0C0C  00B3               	movwf	___flmul@a+1
  4676  0C0D  3F42               	moviw [2]fsr1
  4677  0C0E  00B4               	movwf	___flmul@a+2
  4678  0C0F  3F43               	moviw [3]fsr1
  4679  0C10  00B5               	movwf	___flmul@a+3
  4680  0C11  2420               	fcall	___flmul
  4681  0C12  0860               	movf	convertAnalogValues@data,w
  4682  0C13  0086               	movwf	6
  4683  0C14  0861               	movf	convertAnalogValues@data+1,w
  4684  0C15  0087               	movwf	7
  4685  0C16  315C               	addfsr 1,28
  4686  0C17  082E               	movf	?___flmul,w
  4687  0C18  3FC0               	movwi [0]fsr1
  4688  0C19  082F               	movf	?___flmul+1,w
  4689  0C1A  3FC1               	movwi [1]fsr1
  4690  0C1B  0830               	movf	?___flmul+2,w
  4691  0C1C  3FC2               	movwi [2]fsr1
  4692  0C1D  0831               	movf	?___flmul+3,w
  4693  0C1E  3FC3               	movwi [3]fsr1
  4694  0C1F  0008               	return
  4695  0C20                     __end_of_convertAnalogValues:	
  4696  0C20                     __ptext56:	
  4697 ;; *************** function ___flmul *****************
  4698 ;; Defined at:
  4699 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcmul.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  b               4   14[BANK0 ] unsigned short 
  4702 ;;  a               4   18[BANK0 ] unsigned short 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  prod            4   33[BANK0 ] struct .
  4705 ;;  grs             4   28[BANK0 ] unsigned long 
  4706 ;;  temp            2   37[BANK0 ] struct .
  4707 ;;  bexp            1   32[BANK0 ] unsigned char 
  4708 ;;  aexp            1   27[BANK0 ] unsigned char 
  4709 ;;  sign            1   26[BANK0 ] unsigned char 
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  4   14[BANK0 ] unsigned char 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, pclath, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 3F/0
  4716 ;;		On exit  : 3F/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4719 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4720 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4721 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4722 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4723 ;;Total ram usage:       25 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    4
  4726 ;; This function calls:
  4727 ;;		__Umul8_16
  4728 ;; This function is called by:
  4729 ;;		_convertAnalogValues
  4730 ;;		_efgtoa
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function ___flmul
  4736  0C20                     ___flmul:	
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  4740  0C20  0831               	movf	___flmul@b+3,w
  4741  0C21  00BA               	movwf	___flmul@sign
  4742  0C22  3080               	movlw	128
  4743  0C23  05BA               	andwf	___flmul@sign,f
  4744  0C24  3531               	lslf	___flmul@b+3,w
  4745  0C25  00C0               	movwf	___flmul@bexp
  4746  0C26  1BB0               	btfsc	___flmul@b+2,7
  4747  0C27  1440               	bsf	___flmul@bexp,0
  4748  0C28  0840               	movf	___flmul@bexp,w
  4749  0C29  1903               	btfsc	3,2
  4750  0C2A  2C31               	goto	l1158
  4751  0C2B  0F40               	incfsz	___flmul@bexp,w
  4752  0C2C  2C2F               	goto	l1159
  4753  0C2D  27C4  3188         	fcall	PL206	;call to abstracted procedure
  4754  0C2F                     l1159:	
  4755  0C2F  17B0               	bsf	___flmul@b+2,7
  4756  0C30  2C33               	goto	l4509
  4757  0C31                     l1158:	
  4758  0C31  27C4  3188         	fcall	PL206	;call to abstracted procedure
  4759  0C33                     l4509:	
  4760  0C33  0835               	movf	___flmul@a+3,w
  4761  0C34  3980               	andlw	128
  4762  0C35  06BA               	xorwf	___flmul@sign,f
  4763  0C36  3535               	lslf	___flmul@a+3,w
  4764  0C37  00BB               	movwf	___flmul@aexp
  4765  0C38  1BB4               	btfsc	___flmul@a+2,7
  4766  0C39  143B               	bsf	___flmul@aexp,0
  4767  0C3A  083B               	movf	___flmul@aexp,w
  4768  0C3B  1903               	btfsc	3,2
  4769  0C3C  2C43               	goto	l1162
  4770  0C3D  0F3B               	incfsz	___flmul@aexp,w
  4771  0C3E  2C41               	goto	l1163
  4772  0C3F  27BF  3188         	fcall	PL204	;call to abstracted procedure
  4773  0C41                     l1163:	
  4774  0C41  17B4               	bsf	___flmul@a+2,7
  4775  0C42  2C45               	goto	l4521
  4776  0C43                     l1162:	
  4777  0C43  27BF  3188         	fcall	PL204	;call to abstracted procedure
  4778  0C45                     l4521:	
  4779  0C45  083B               	movf	___flmul@aexp,w
  4780  0C46  1D03               	btfss	3,2
  4781  0C47  0840               	movf	___flmul@bexp,w
  4782  0C48  1D03               	btfss	3,2
  4783  0C49  2C4F               	goto	l4525
  4784  0C4A  01AE               	clrf	?___flmul
  4785  0C4B  01AF               	clrf	?___flmul+1
  4786  0C4C  01B0               	clrf	?___flmul+2
  4787  0C4D  01B1               	clrf	?___flmul+3
  4788  0C4E  0008               	return
  4789  0C4F                     l4525:	
  4790  0C4F  082E               	movf	___flmul@b,w
  4791  0C50  00A0               	movwf	__Umul8_16@multiplicand
  4792  0C51  0834               	movf	___flmul@a+2,w
  4793  0C52  253A  3188         	fcall	__Umul8_16
  4794  0C54  0821               	movf	?__Umul8_16+1,w
  4795  0C55  00C6               	movwf	___flmul@temp+1
  4796  0C56  0820               	movf	?__Umul8_16,w
  4797  0C57  00C5               	movwf	___flmul@temp
  4798  0C58  00BC               	movwf	___flmul@grs
  4799  0C59  01BD               	clrf	___flmul@grs+1
  4800  0C5A  01BE               	clrf	___flmul@grs+2
  4801  0C5B  01BF               	clrf	___flmul@grs+3
  4802  0C5C  0846               	movf	___flmul@temp+1,w
  4803  0C5D  00C1               	movwf	___flmul@prod
  4804  0C5E  01C2               	clrf	___flmul@prod+1
  4805  0C5F  01C3               	clrf	___flmul@prod+2
  4806  0C60  01C4               	clrf	___flmul@prod+3
  4807  0C61  082F               	movf	___flmul@b+1,w
  4808  0C62  00A0               	movwf	__Umul8_16@multiplicand
  4809  0C63  0833               	movf	___flmul@a+1,w
  4810  0C64  253A  3188         	fcall	__Umul8_16
  4811  0C66  0821               	movf	?__Umul8_16+1,w
  4812  0C67  2723  3188         	fcall	PL58	;call to abstracted procedure
  4813  0C69  07C1               	addwf	___flmul@prod,f
  4814  0C6A  3001               	movlw	1
  4815  0C6B  1803               	skipnc
  4816  0C6C  07C2               	addwf	___flmul@prod+1,f
  4817  0C6D  1803               	skipnc
  4818  0C6E  07C3               	addwf	___flmul@prod+2,f
  4819  0C6F  1803               	skipnc
  4820  0C70  07C4               	addwf	___flmul@prod+3,f
  4821  0C71  0830               	movf	___flmul@b+2,w
  4822  0C72  00A0               	movwf	__Umul8_16@multiplicand
  4823  0C73  0832               	movf	___flmul@a,w
  4824  0C74  253A  3188         	fcall	__Umul8_16
  4825  0C76  0821               	movf	?__Umul8_16+1,w
  4826  0C77  2723  3188         	fcall	PL58	;call to abstracted procedure
  4827  0C79  2709  3188         	fcall	PL50	;call to abstracted procedure
  4828  0C7B  082F               	movf	___flmul@b+1,w
  4829  0C7C  00A0               	movwf	__Umul8_16@multiplicand
  4830  0C7D  0832               	movf	___flmul@a,w
  4831  0C7E  253A  3188         	fcall	__Umul8_16
  4832  0C80  26FE  3188         	fcall	PL46	;call to abstracted procedure
  4833  0C82  082E               	movf	___flmul@b,w
  4834  0C83  00A0               	movwf	__Umul8_16@multiplicand
  4835  0C84  0833               	movf	___flmul@a+1,w
  4836  0C85  253A  3188         	fcall	__Umul8_16
  4837  0C87  26FE  3188         	fcall	PL46	;call to abstracted procedure
  4838  0C89  083E               	movf	___flmul@grs+2,w
  4839  0C8A  00BF               	movwf	___flmul@grs+3
  4840  0C8B  083D               	movf	___flmul@grs+1,w
  4841  0C8C  00BE               	movwf	___flmul@grs+2
  4842  0C8D  083C               	movf	___flmul@grs,w
  4843  0C8E  00BD               	movwf	___flmul@grs+1
  4844  0C8F  01BC               	clrf	___flmul@grs
  4845  0C90  082E               	movf	___flmul@b,w
  4846  0C91  00A0               	movwf	__Umul8_16@multiplicand
  4847  0C92  0832               	movf	___flmul@a,w
  4848  0C93  253A  3188         	fcall	__Umul8_16
  4849  0C95  26FE  3188         	fcall	PL46	;call to abstracted procedure
  4850  0C97  082F               	movf	___flmul@b+1,w
  4851  0C98  00A0               	movwf	__Umul8_16@multiplicand
  4852  0C99  0834               	movf	___flmul@a+2,w
  4853  0C9A  253A  3188         	fcall	__Umul8_16
  4854  0C9C  274B  3188         	fcall	PL72	;call to abstracted procedure
  4855  0C9E  0833               	movf	___flmul@a+1,w
  4856  0C9F  253A  3188         	fcall	__Umul8_16
  4857  0CA1  274B  3188         	fcall	PL72	;call to abstracted procedure
  4858  0CA3  0834               	movf	___flmul@a+2,w
  4859  0CA4  253A  3188         	fcall	__Umul8_16
  4860  0CA6  0821               	movf	?__Umul8_16+1,w
  4861  0CA7  00C6               	movwf	___flmul@temp+1
  4862  0CA8  0820               	movf	?__Umul8_16,w
  4863  0CA9  00C5               	movwf	___flmul@temp
  4864  0CAA  00B6               	movwf	??___flmul
  4865  0CAB  0846               	movf	___flmul@temp+1,w
  4866  0CAC  00B7               	movwf	??___flmul+1
  4867  0CAD  01B8               	clrf	??___flmul+2
  4868  0CAE  01B9               	clrf	??___flmul+3
  4869  0CAF  0838               	movf	??___flmul+2,w
  4870  0CB0  00B9               	movwf	??___flmul+3
  4871  0CB1  0837               	movf	??___flmul+1,w
  4872  0CB2  00B8               	movwf	??___flmul+2
  4873  0CB3  0836               	movf	??___flmul,w
  4874  0CB4  00B7               	movwf	??___flmul+1
  4875  0CB5  01B6               	clrf	??___flmul
  4876  0CB6  0836               	movf	??___flmul,w
  4877  0CB7  07C1               	addwf	___flmul@prod,f
  4878  0CB8  0837               	movf	??___flmul+1,w
  4879  0CB9  3DC2               	addwfc	___flmul@prod+1,f
  4880  0CBA  0838               	movf	??___flmul+2,w
  4881  0CBB  3DC3               	addwfc	___flmul@prod+2,f
  4882  0CBC  0839               	movf	??___flmul+3,w
  4883  0CBD  3DC4               	addwfc	___flmul@prod+3,f
  4884  0CBE  083F               	movf	___flmul@grs+3,w
  4885  0CBF  2709  3188         	fcall	PL50	;call to abstracted procedure
  4886  0CC1  0840               	movf	___flmul@bexp,w
  4887  0CC2  00C5               	movwf	___flmul@temp
  4888  0CC3  01C6               	clrf	___flmul@temp+1
  4889  0CC4  083B               	movf	___flmul@aexp,w
  4890  0CC5  07C5               	addwf	___flmul@temp,f
  4891  0CC6  1803               	skipnc
  4892  0CC7  0AC6               	incf	___flmul@temp+1,f
  4893  0CC8  3082               	movlw	-126
  4894  0CC9                     L18:	
  4895  0CC9  07C5               	addwf	___flmul@temp,f
  4896  0CCA  1C03               	skipc
  4897  0CCB  03C6               	decf	___flmul@temp+1,f
  4898  0CCC  1BC3               	btfsc	___flmul@prod+2,7
  4899  0CCD  2CDA               	goto	l4573
  4900  0CCE  35C1               	lslf	___flmul@prod,f
  4901  0CCF  0DC2               	rlf	___flmul@prod+1,f
  4902  0CD0  0DC3               	rlf	___flmul@prod+2,f
  4903  0CD1  0DC4               	rlf	___flmul@prod+3,f
  4904  0CD2  1BBF               	btfsc	___flmul@grs+3,7
  4905  0CD3  1441               	bsf	___flmul@prod,0
  4906  0CD4  30FF               	movlw	-1
  4907  0CD5  35BC               	lslf	___flmul@grs,f
  4908  0CD6  0DBD               	rlf	___flmul@grs+1,f
  4909  0CD7  0DBE               	rlf	___flmul@grs+2,f
  4910  0CD8  0DBF               	rlf	___flmul@grs+3,f
  4911  0CD9  2CC9               	goto	L18
  4912  0CDA                     l4573:	
  4913  0CDA  01BB               	clrf	___flmul@aexp
  4914  0CDB  1FBF               	btfss	___flmul@grs+3,7
  4915  0CDC  2CEF               	goto	l4583
  4916  0CDD  083C               	movf	___flmul@grs,w
  4917  0CDE  00B6               	movwf	??___flmul
  4918  0CDF  083D               	movf	___flmul@grs+1,w
  4919  0CE0  00B7               	movwf	??___flmul+1
  4920  0CE1  083E               	movf	___flmul@grs+2,w
  4921  0CE2  00B8               	movwf	??___flmul+2
  4922  0CE3  307F               	movlw	127
  4923  0CE4  053F               	andwf	___flmul@grs+3,w
  4924  0CE5  00B9               	movwf	??___flmul+3
  4925  0CE6  0438               	iorwf	??___flmul+2,w
  4926  0CE7  0437               	iorwf	??___flmul+1,w
  4927  0CE8  0436               	iorwf	??___flmul,w
  4928  0CE9  1903               	skipnz
  4929  0CEA  1841               	btfsc	___flmul@prod,0
  4930  0CEB  2CED               	goto	l4579
  4931  0CEC  2CEF               	goto	l4583
  4932  0CED                     l4579:	
  4933  0CED  01BB               	clrf	___flmul@aexp
  4934  0CEE  0ABB               	incf	___flmul@aexp,f
  4935  0CEF                     l4583:	
  4936  0CEF  083B               	movf	___flmul@aexp,w
  4937  0CF0  1903               	btfsc	3,2
  4938  0CF1  2D01               	goto	l4593
  4939  0CF2  3001               	movlw	1
  4940  0CF3  07C1               	addwf	___flmul@prod,f
  4941  0CF4  3000               	movlw	0
  4942  0CF5  3DC2               	addwfc	___flmul@prod+1,f
  4943  0CF6  3DC3               	addwfc	___flmul@prod+2,f
  4944  0CF7  3DC4               	addwfc	___flmul@prod+3,f
  4945  0CF8  1C44               	btfss	___flmul@prod+3,0
  4946  0CF9  2D01               	goto	l4593
  4947  0CFA  37C4               	asrf	___flmul@prod+3,f
  4948  0CFB  0CC3               	rrf	___flmul@prod+2,f
  4949  0CFC  0CC2               	rrf	___flmul@prod+1,f
  4950  0CFD  0CC1               	rrf	___flmul@prod,f
  4951  0CFE  0AC5               	incf	___flmul@temp,f
  4952  0CFF  1903               	skipnz
  4953  0D00  0AC6               	incf	___flmul@temp+1,f
  4954  0D01                     l4593:	
  4955  0D01  27AD  3188         	fcall	PL166	;call to abstracted procedure
  4956  0D03  1D03               	skipz
  4957  0D04  2D07               	goto	u5215
  4958  0D05  30FF               	movlw	255
  4959  0D06  0245               	subwf	___flmul@temp,w
  4960  0D07                     u5215:	
  4961  0D07  1C03               	skipc
  4962  0D08  2D11               	goto	l4597
  4963  0D09  307F               	movlw	127
  4964  0D0A  0140               	movlb	0	; select bank0
  4965  0D0B  00C4               	movwf	___flmul@prod+3
  4966  0D0C  3080               	movlw	128
  4967  0D0D  00C3               	movwf	___flmul@prod+2
  4968  0D0E  01C2               	clrf	___flmul@prod+1
  4969  0D0F  01C1               	clrf	___flmul@prod
  4970  0D10  2D2F               	goto	l1180
  4971  0D11                     l4597:	
  4972  0D11  0140               	movlb	0	; select bank0
  4973  0D12  27AD  3188         	fcall	PL166	;call to abstracted procedure
  4974  0D14  1D03               	skipz
  4975  0D15  2D18               	goto	u5225
  4976  0D16  3001               	movlw	1
  4977  0D17  0245               	subwf	___flmul@temp,w
  4978  0D18                     u5225:	
  4979  0D18  1803               	skipnc
  4980  0D19  2D21               	goto	l4603
  4981  0D1A  0140               	movlb	0	; select bank0
  4982  0D1B  01C1               	clrf	___flmul@prod
  4983  0D1C  01C2               	clrf	___flmul@prod+1
  4984  0D1D  01C3               	clrf	___flmul@prod+2
  4985  0D1E  01C4               	clrf	___flmul@prod+3
  4986  0D1F  01BA               	clrf	___flmul@sign
  4987  0D20  2D2F               	goto	l1180
  4988  0D21                     l4603:	
  4989  0D21  0140               	movlb	0	; select bank0
  4990  0D22  0845               	movf	___flmul@temp,w
  4991  0D23  00C0               	movwf	___flmul@bexp
  4992  0D24  30FF               	movlw	255
  4993  0D25  05C1               	andwf	___flmul@prod,f
  4994  0D26  05C2               	andwf	___flmul@prod+1,f
  4995  0D27  307F               	movlw	127
  4996  0D28  05C3               	andwf	___flmul@prod+2,f
  4997  0D29  3000               	movlw	0
  4998  0D2A  01C4               	clrf	___flmul@prod+3
  4999  0D2B  1840               	btfsc	___flmul@bexp,0
  5000  0D2C  17C3               	bsf	___flmul@prod+2,7
  5001  0D2D  3640               	lsrf	___flmul@bexp,w
  5002  0D2E  00C4               	movwf	___flmul@prod+3
  5003  0D2F                     l1180:	
  5004  0D2F  083A               	movf	___flmul@sign,w
  5005  0D30  04C4               	iorwf	___flmul@prod+3,f
  5006  0D31  0844               	movf	___flmul@prod+3,w
  5007  0D32  00B1               	movwf	?___flmul+3
  5008  0D33  0843               	movf	___flmul@prod+2,w
  5009  0D34  00B0               	movwf	?___flmul+2
  5010  0D35  0842               	movf	___flmul@prod+1,w
  5011  0D36  00AF               	movwf	?___flmul+1
  5012  0D37  0841               	movf	___flmul@prod,w
  5013  0D38  00AE               	movwf	?___flmul
  5014  0D39  0008               	return
  5015  0D3A                     __end_of___flmul:	
  5016  0D3A                     __ptext57:	
  5017 ;; *************** function __Umul8_16 *****************
  5018 ;; Defined at:
  5019 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul8_16.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;  multiplier      1    wreg     unsigned char 
  5022 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  multiplier      1    7[BANK0 ] unsigned char 
  5025 ;;  word_mpld       2    5[BANK0 ] unsigned int 
  5026 ;;  product         2    3[BANK0 ] unsigned int 
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  2    0[BANK0 ] unsigned int 
  5029 ;; Registers used:
  5030 ;;		wreg, status,2, status,0
  5031 ;; Tracked objects:
  5032 ;;		On entry : 3F/0
  5033 ;;		On exit  : 3F/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5036 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5037 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5039 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5040 ;;Total ram usage:        8 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; Hardware stack levels required when called:    3
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		___flmul
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           
  5051                           ;psect for function __Umul8_16
  5052  0D3A                     __Umul8_16:	
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  5056                           ;__Umul8_16@multiplier stored from wreg
  5057  0D3A  00A7               	movwf	__Umul8_16@multiplier
  5058  0D3B  01A3               	clrf	__Umul8_16@product
  5059  0D3C  01A4               	clrf	__Umul8_16@product+1
  5060  0D3D  0820               	movf	__Umul8_16@multiplicand,w
  5061  0D3E  00A5               	movwf	__Umul8_16@word_mpld
  5062  0D3F  01A6               	clrf	__Umul8_16@word_mpld+1
  5063  0D40                     l3983:	
  5064  0D40  1C27               	btfss	__Umul8_16@multiplier,0
  5065  0D41  2D46               	goto	l3987
  5066  0D42  0825               	movf	__Umul8_16@word_mpld,w
  5067  0D43  07A3               	addwf	__Umul8_16@product,f
  5068  0D44  0826               	movf	__Umul8_16@word_mpld+1,w
  5069  0D45  3DA4               	addwfc	__Umul8_16@product+1,f
  5070  0D46                     l3987:	
  5071  0D46  35A5               	lslf	__Umul8_16@word_mpld,f
  5072  0D47  0DA6               	rlf	__Umul8_16@word_mpld+1,f
  5073  0D48  36A7               	lsrf	__Umul8_16@multiplier,f
  5074  0D49  0827               	movf	__Umul8_16@multiplier,w
  5075  0D4A  1D03               	btfss	3,2
  5076  0D4B  2D40               	goto	l3983
  5077  0D4C  0824               	movf	__Umul8_16@product+1,w
  5078  0D4D  00A1               	movwf	?__Umul8_16+1
  5079  0D4E  0823               	movf	__Umul8_16@product,w
  5080  0D4F  00A0               	movwf	?__Umul8_16
  5081  0D50  0008               	return
  5082  0D51                     __end_of__Umul8_16:	
  5083  0D51                     __ptext66:	
  5084 ;; *************** function ___xxtofl *****************
  5085 ;; Defined at:
  5086 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\xxtofl.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;  sign            1    wreg     unsigned char 
  5089 ;;  val             4    0[BANK0 ] long 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  sign            1    8[BANK0 ] unsigned char 
  5092 ;;  arg             4   10[BANK0 ] unsigned long 
  5093 ;;  exp             1    9[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  4    0[BANK0 ] unsigned char 
  5096 ;; Registers used:
  5097 ;;		wreg, status,2, status,0
  5098 ;; Tracked objects:
  5099 ;;		On entry : 3F/0
  5100 ;;		On exit  : 3F/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5103 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5104 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5105 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5106 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5107 ;;Total ram usage:       14 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    3
  5110 ;; This function calls:
  5111 ;;		Nothing
  5112 ;; This function is called by:
  5113 ;;		_checkSensor
  5114 ;;		_convertAnalogValues
  5115 ;; This function uses a non-reentrant model
  5116 ;;
  5117                           
  5118                           
  5119                           ;psect for function ___xxtofl
  5120  0D51                     ___xxtofl:	
  5121                           
  5122                           ;incstack = 0
  5123                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  5124                           ;___xxtofl@sign stored from wreg
  5125  0D51  00A8               	movwf	___xxtofl@sign
  5126  0D52  0828               	movf	___xxtofl@sign,w
  5127  0D53  1D03               	btfss	3,2
  5128  0D54  1FA3               	btfss	___xxtofl@val+3,7
  5129  0D55  2D66               	goto	l5697
  5130  0D56  0920               	comf	___xxtofl@val,w
  5131  0D57  00AA               	movwf	___xxtofl@arg
  5132  0D58  0921               	comf	___xxtofl@val+1,w
  5133  0D59  00AB               	movwf	___xxtofl@arg+1
  5134  0D5A  0922               	comf	___xxtofl@val+2,w
  5135  0D5B  00AC               	movwf	___xxtofl@arg+2
  5136  0D5C  0923               	comf	___xxtofl@val+3,w
  5137  0D5D  00AD               	movwf	___xxtofl@arg+3
  5138  0D5E  0AAA               	incf	___xxtofl@arg,f
  5139  0D5F  1903               	skipnz
  5140  0D60  0AAB               	incf	___xxtofl@arg+1,f
  5141  0D61  1903               	skipnz
  5142  0D62  0AAC               	incf	___xxtofl@arg+2,f
  5143  0D63  1903               	skipnz
  5144  0D64  0AAD               	incf	___xxtofl@arg+3,f
  5145  0D65  2D6E               	goto	l1187
  5146  0D66                     l5697:	
  5147  0D66  0823               	movf	___xxtofl@val+3,w
  5148  0D67  00AD               	movwf	___xxtofl@arg+3
  5149  0D68  0822               	movf	___xxtofl@val+2,w
  5150  0D69  00AC               	movwf	___xxtofl@arg+2
  5151  0D6A  0821               	movf	___xxtofl@val+1,w
  5152  0D6B  00AB               	movwf	___xxtofl@arg+1
  5153  0D6C  0820               	movf	___xxtofl@val,w
  5154  0D6D  00AA               	movwf	___xxtofl@arg
  5155  0D6E                     l1187:	
  5156  0D6E  0823               	movf	___xxtofl@val+3,w
  5157  0D6F  0422               	iorwf	___xxtofl@val+2,w
  5158  0D70  0421               	iorwf	___xxtofl@val+1,w
  5159  0D71  0420               	iorwf	___xxtofl@val,w
  5160  0D72  1D03               	skipz
  5161  0D73  2D79               	goto	l5701
  5162  0D74  01A0               	clrf	?___xxtofl
  5163  0D75  01A1               	clrf	?___xxtofl+1
  5164  0D76  01A2               	clrf	?___xxtofl+2
  5165  0D77  01A3               	clrf	?___xxtofl+3
  5166  0D78  0008               	return
  5167  0D79                     l5701:	
  5168  0D79  3096               	movlw	150
  5169  0D7A  00A9               	movwf	___xxtofl@exp
  5170  0D7B                     l5705:	
  5171  0D7B  30FE               	movlw	254
  5172  0D7C  052D               	andwf	___xxtofl@arg+3,w
  5173  0D7D  1903               	btfsc	3,2
  5174  0D7E  2D8C               	goto	l5713
  5175  0D7F  0AA9               	incf	___xxtofl@exp,f
  5176  0D80  27C9  3188         	fcall	PL210	;call to abstracted procedure
  5177  0D82  2D7B               	goto	l5705
  5178  0D83                     l5707:	
  5179  0D83  3001               	movlw	1
  5180  0D84  0AA9               	incf	___xxtofl@exp,f
  5181  0D85  07AA               	addwf	___xxtofl@arg,f
  5182  0D86  3000               	movlw	0
  5183  0D87  3DAB               	addwfc	___xxtofl@arg+1,f
  5184  0D88  3DAC               	addwfc	___xxtofl@arg+2,f
  5185  0D89  3DAD               	addwfc	___xxtofl@arg+3,f
  5186  0D8A  27C9  3188         	fcall	PL210	;call to abstracted procedure
  5187  0D8C                     l5713:	
  5188  0D8C  30FF               	movlw	255
  5189  0D8D  052D               	andwf	___xxtofl@arg+3,w
  5190  0D8E  1903               	btfsc	3,2
  5191  0D8F  2D9A               	goto	l5717
  5192  0D90  2D83               	goto	l5707
  5193  0D91                     l5719:	
  5194  0D91  3002               	movlw	2
  5195  0D92  0229               	subwf	___xxtofl@exp,w
  5196  0D93  1C03               	btfss	3,0
  5197  0D94  2D9C               	goto	l1200
  5198  0D95  03A9               	decf	___xxtofl@exp,f
  5199  0D96  35AA               	lslf	___xxtofl@arg,f
  5200  0D97  0DAB               	rlf	___xxtofl@arg+1,f
  5201  0D98  0DAC               	rlf	___xxtofl@arg+2,f
  5202  0D99  0DAD               	rlf	___xxtofl@arg+3,f
  5203  0D9A                     l5717:	
  5204  0D9A  1FAC               	btfss	___xxtofl@arg+2,7
  5205  0D9B  2D91               	goto	l5719
  5206  0D9C                     l1200:	
  5207  0D9C  1C29               	btfss	___xxtofl@exp,0
  5208  0D9D  13AC               	bcf	___xxtofl@arg+2,7
  5209  0D9E  36A9               	lsrf	___xxtofl@exp,f
  5210  0D9F  0829               	movf	___xxtofl@exp,w
  5211  0DA0  00A7               	movwf	??___xxtofl+3
  5212  0DA1  01A6               	clrf	??___xxtofl+2
  5213  0DA2  01A5               	clrf	??___xxtofl+1
  5214  0DA3  01A4               	clrf	??___xxtofl
  5215  0DA4  0824               	movf	??___xxtofl,w
  5216  0DA5  04AA               	iorwf	___xxtofl@arg,f
  5217  0DA6  0825               	movf	??___xxtofl+1,w
  5218  0DA7  04AB               	iorwf	___xxtofl@arg+1,f
  5219  0DA8  0826               	movf	??___xxtofl+2,w
  5220  0DA9  04AC               	iorwf	___xxtofl@arg+2,f
  5221  0DAA  0827               	movf	??___xxtofl+3,w
  5222  0DAB  04AD               	iorwf	___xxtofl@arg+3,f
  5223  0DAC  0828               	movf	___xxtofl@sign,w
  5224  0DAD  1D03               	btfss	3,2
  5225  0DAE  1FA3               	btfss	___xxtofl@val+3,7
  5226  0DAF  2DB1               	goto	l5731
  5227  0DB0  17AD               	bsf	___xxtofl@arg+3,7
  5228  0DB1                     l5731:	
  5229  0DB1  082D               	movf	___xxtofl@arg+3,w
  5230  0DB2  00A3               	movwf	?___xxtofl+3
  5231  0DB3  082C               	movf	___xxtofl@arg+2,w
  5232  0DB4  00A2               	movwf	?___xxtofl+2
  5233  0DB5  082B               	movf	___xxtofl@arg+1,w
  5234  0DB6  00A1               	movwf	?___xxtofl+1
  5235  0DB7  082A               	movf	___xxtofl@arg,w
  5236  0DB8  00A0               	movwf	?___xxtofl
  5237  0DB9  0008               	return
  5238  0DBA                     __end_of___xxtofl:	
  5239  0DBA                     __ptext55:	
  5240 ;; *************** function _adcGetConversion *****************
  5241 ;; Defined at:
  5242 ;;		line 122 in file "main.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  channel         1    wreg     unsigned char 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  channel         1    3[BANK0 ] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  2    0[BANK0 ] unsigned short 
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0
  5251 ;; Tracked objects:
  5252 ;;		On entry : 3C/0
  5253 ;;		On exit  : 3F/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5256 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5259 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5260 ;;Total ram usage:        4 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    3
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_convertAnalogValues
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           
  5271                           ;psect for function _adcGetConversion
  5272  0DBA                     _adcGetConversion:	
  5273                           
  5274                           ;incstack = 0
  5275                           ; Regs used in _adcGetConversion: [wreg+status,2+status,0]
  5276                           ;adcGetConversion@channel stored from wreg
  5277  0DBA  0140               	movlb	0	; select bank0
  5278  0DBB  00A3               	movwf	adcGetConversion@channel
  5279                           
  5280                           ;main.c: 122: uint16_t adcGetConversion(uint8_t channel);main.c: 123: {;main.c: 124:  AD
      +                          CON0bits.CHS = channel;
  5281  0DBC  00A2               	movwf	??_adcGetConversion
  5282  0DBD  0DA2               	rlf	??_adcGetConversion,f
  5283  0DBE  0DA2               	rlf	??_adcGetConversion,f
  5284  0DBF  0141               	movlb	1	; select bank1
  5285  0DC0  081D               	movf	29,w	;volatile
  5286  0DC1  0140               	movlb	0	; select bank0
  5287  0DC2  0622               	xorwf	??_adcGetConversion,w
  5288  0DC3  3903               	andlw	-253
  5289  0DC4  0622               	xorwf	??_adcGetConversion,w
  5290  0DC5  0141               	movlb	1	; select bank1
  5291  0DC6  009D               	movwf	29	;volatile
  5292                           
  5293                           ;main.c: 125:  _delay((unsigned long)((5)*(4000000/4000000.0)));
  5294  0DC7  3200               	nop2	;2 cycle nop
  5295  0DC8  3200               	nop2	;2 cycle nop
  5296  0DC9  0000               	nop
  5297                           
  5298                           ;main.c: 126:  ADCON0bits.GO = 1;
  5299  0DCA  0141               	movlb	1	; select bank1
  5300  0DCB  149D               	bsf	29,1	;volatile
  5301  0DCC                     l138:	
  5302                           ;main.c: 127:  while (ADCON0bits.GO);
  5303                           
  5304  0DCC  189D               	btfsc	29,1	;volatile
  5305  0DCD  2DCC               	goto	l138
  5306                           
  5307                           ;main.c: 128:  return (uint16_t)((ADRESH << 8) + ADRESL);
  5308  0DCE  081C               	movf	28,w	;volatile
  5309  0DCF  0140               	movlb	0	; select bank0
  5310  0DD0  00A1               	movwf	?_adcGetConversion+1
  5311  0DD1  01A0               	clrf	?_adcGetConversion
  5312  0DD2  0141               	movlb	1	; select bank1
  5313  0DD3  081B               	movf	27,w	;volatile
  5314  0DD4  0140               	movlb	0	; select bank0
  5315  0DD5  07A0               	addwf	?_adcGetConversion,f
  5316  0DD6  1803               	skipnc
  5317  0DD7  0AA1               	incf	?_adcGetConversion+1,f
  5318  0DD8  0008               	return
  5319  0DD9                     __end_of_adcGetConversion:	
  5320  0DD9                     __ptext53:	
  5321 ;; *************** function _ema *****************
  5322 ;; Defined at:
  5323 ;;		line 113 in file "main.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;  in              2   12[BANK0 ] unsigned short 
  5326 ;;  average         2   14[BANK0 ] unsigned short 
  5327 ;;  alpha           4   16[BANK0 ] unsigned long 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;  tmp             4   24[BANK0 ] unsigned long 
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  2   12[BANK0 ] unsigned short 
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, status,0, pclath, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 3F/0
  5336 ;;		On exit  : 3F/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5339 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5340 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5341 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5342 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5343 ;;Total ram usage:       16 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    4
  5346 ;; This function calls:
  5347 ;;		___lmul
  5348 ;; This function is called by:
  5349 ;;		_convertAnalogValues
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           
  5354                           ;psect for function _ema
  5355  0DD9                     _ema:	
  5356                           
  5357                           ;main.c: 113: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);main.c: 114: {
      +                          ;main.c: 115:   uint32_t tmp;;main.c: 116:   tmp = in * alpha + average * (65536 - alpha
      +                          );
  5358                           
  5359                           ;incstack = 0
  5360                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
  5361  0DD9  082C               	movf	ema@in,w
  5362  0DDA  00A0               	movwf	___lmul@multiplier
  5363  0DDB  082D               	movf	ema@in+1,w
  5364  0DDC  00A1               	movwf	___lmul@multiplier+1
  5365  0DDD  01A2               	clrf	___lmul@multiplier+2
  5366  0DDE  01A3               	clrf	___lmul@multiplier+3
  5367  0DDF  0833               	movf	ema@alpha+3,w
  5368  0DE0  00A7               	movwf	___lmul@multiplicand+3
  5369  0DE1  0832               	movf	ema@alpha+2,w
  5370  0DE2  00A6               	movwf	___lmul@multiplicand+2
  5371  0DE3  0831               	movf	ema@alpha+1,w
  5372  0DE4  00A5               	movwf	___lmul@multiplicand+1
  5373  0DE5  0830               	movf	ema@alpha,w
  5374  0DE6  00A4               	movwf	___lmul@multiplicand
  5375  0DE7  2624  3188         	fcall	___lmul
  5376  0DE9  0823               	movf	?___lmul+3,w
  5377  0DEA  00BB               	movwf	ema@tmp+3
  5378  0DEB  0822               	movf	?___lmul+2,w
  5379  0DEC  00BA               	movwf	ema@tmp+2
  5380  0DED  0821               	movf	?___lmul+1,w
  5381  0DEE  00B9               	movwf	ema@tmp+1
  5382  0DEF  0820               	movf	?___lmul,w
  5383  0DF0  00B8               	movwf	ema@tmp
  5384  0DF1  3001               	movlw	1
  5385  0DF2  01A7               	clrf	___lmul@multiplicand+3
  5386  0DF3  00A6               	movwf	___lmul@multiplicand+2
  5387  0DF4  01A5               	clrf	___lmul@multiplicand+1
  5388  0DF5  01A4               	clrf	___lmul@multiplicand
  5389  0DF6  0830               	movf	ema@alpha,w
  5390  0DF7  02A4               	subwf	___lmul@multiplicand,f
  5391  0DF8  0831               	movf	ema@alpha+1,w
  5392  0DF9  3BA5               	subwfb	___lmul@multiplicand+1,f
  5393  0DFA  0832               	movf	ema@alpha+2,w
  5394  0DFB  3BA6               	subwfb	___lmul@multiplicand+2,f
  5395  0DFC  0833               	movf	ema@alpha+3,w
  5396  0DFD  3BA7               	subwfb	___lmul@multiplicand+3,f
  5397  0DFE  082E               	movf	ema@average,w
  5398  0DFF  00A0               	movwf	___lmul@multiplier
  5399  0E00  082F               	movf	ema@average+1,w
  5400  0E01  00A1               	movwf	___lmul@multiplier+1
  5401  0E02  01A2               	clrf	___lmul@multiplier+2
  5402  0E03  01A3               	clrf	___lmul@multiplier+3
  5403  0E04  2624               	fcall	___lmul
  5404  0E05  0820               	movf	?___lmul,w
  5405  0E06  07B8               	addwf	ema@tmp,f
  5406  0E07  0821               	movf	?___lmul+1,w
  5407  0E08  3DB9               	addwfc	ema@tmp+1,f
  5408  0E09  0822               	movf	?___lmul+2,w
  5409  0E0A  3DBA               	addwfc	ema@tmp+2,f
  5410  0E0B  0823               	movf	?___lmul+3,w
  5411  0E0C  3DBB               	addwfc	ema@tmp+3,f
  5412                           
  5413                           ;main.c: 117:   return (tmp + 32768) / 65536;
  5414  0E0D  3080               	movlw	128
  5415  0E0E  01B4               	clrf	??_ema
  5416  0E0F  00B5               	movwf	??_ema+1
  5417  0E10  01B6               	clrf	??_ema+2
  5418  0E11  01B7               	clrf	??_ema+3
  5419  0E12  0838               	movf	ema@tmp,w
  5420  0E13  07B4               	addwf	??_ema,f
  5421  0E14  0839               	movf	ema@tmp+1,w
  5422  0E15  3DB5               	addwfc	??_ema+1,f
  5423  0E16  083A               	movf	ema@tmp+2,w
  5424  0E17  3DB6               	addwfc	??_ema+2,f
  5425  0E18  083B               	movf	ema@tmp+3,w
  5426  0E19  3DB7               	addwfc	??_ema+3,f
  5427  0E1A  0836               	movf	??_ema+2,w
  5428  0E1B  00B4               	movwf	??_ema
  5429  0E1C  0837               	movf	??_ema+3,w
  5430  0E1D  00B5               	movwf	??_ema+1
  5431  0E1E  01B6               	clrf	??_ema+2
  5432  0E1F  01B7               	clrf	??_ema+3
  5433  0E20  00AD               	movwf	?_ema+1
  5434  0E21  0834               	movf	??_ema,w
  5435  0E22  00AC               	movwf	?_ema
  5436  0E23  0008               	return
  5437  0E24                     __end_of_ema:	
  5438  0E24                     __ptext54:	
  5439 ;; *************** function ___lmul *****************
  5440 ;; Defined at:
  5441 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5444 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  product         4    8[BANK0 ] unsigned long 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  4    0[BANK0 ] unsigned long 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0
  5451 ;; Tracked objects:
  5452 ;;		On entry : 3F/0
  5453 ;;		On exit  : 3F/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5456 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5457 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5459 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5460 ;;Total ram usage:       12 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    3
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_ema
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           
  5471                           ;psect for function ___lmul
  5472  0E24                     ___lmul:	
  5473                           
  5474                           ;incstack = 0
  5475                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5476  0E24  01A8               	clrf	___lmul@product
  5477  0E25  01A9               	clrf	___lmul@product+1
  5478  0E26  01AA               	clrf	___lmul@product+2
  5479  0E27  01AB               	clrf	___lmul@product+3
  5480  0E28                     l782:	
  5481  0E28  1C20               	btfss	___lmul@multiplier,0
  5482  0E29  2E32               	goto	l5403
  5483  0E2A  0824               	movf	___lmul@multiplicand,w
  5484  0E2B  07A8               	addwf	___lmul@product,f
  5485  0E2C  0825               	movf	___lmul@multiplicand+1,w
  5486  0E2D  3DA9               	addwfc	___lmul@product+1,f
  5487  0E2E  0826               	movf	___lmul@multiplicand+2,w
  5488  0E2F  3DAA               	addwfc	___lmul@product+2,f
  5489  0E30  0827               	movf	___lmul@multiplicand+3,w
  5490  0E31  3DAB               	addwfc	___lmul@product+3,f
  5491  0E32                     l5403:	
  5492  0E32  35A4               	lslf	___lmul@multiplicand,f
  5493  0E33  0DA5               	rlf	___lmul@multiplicand+1,f
  5494  0E34  0DA6               	rlf	___lmul@multiplicand+2,f
  5495  0E35  0DA7               	rlf	___lmul@multiplicand+3,f
  5496  0E36  36A3               	lsrf	___lmul@multiplier+3,f
  5497  0E37  0CA2               	rrf	___lmul@multiplier+2,f
  5498  0E38  0CA1               	rrf	___lmul@multiplier+1,f
  5499  0E39  0CA0               	rrf	___lmul@multiplier,f
  5500  0E3A  0823               	movf	___lmul@multiplier+3,w
  5501  0E3B  0422               	iorwf	___lmul@multiplier+2,w
  5502  0E3C  0421               	iorwf	___lmul@multiplier+1,w
  5503  0E3D  0420               	iorwf	___lmul@multiplier,w
  5504  0E3E  1D03               	skipz
  5505  0E3F  2E28               	goto	l782
  5506  0E40  082B               	movf	___lmul@product+3,w
  5507  0E41  00A3               	movwf	?___lmul+3
  5508  0E42  082A               	movf	___lmul@product+2,w
  5509  0E43  00A2               	movwf	?___lmul+2
  5510  0E44  0829               	movf	___lmul@product+1,w
  5511  0E45  00A1               	movwf	?___lmul+1
  5512  0E46  0828               	movf	___lmul@product,w
  5513  0E47  00A0               	movwf	?___lmul
  5514  0E48  0008               	return
  5515  0E49                     __end_of___lmul:	
  5516  0E49                     __ptext51:	
  5517 ;; *************** function _initialize *****************
  5518 ;; Defined at:
  5519 ;;		line 154 in file "main.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;		None
  5522 ;; Auto vars:     Size  Location     Type
  5523 ;;		None
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  1    wreg      void 
  5526 ;; Registers used:
  5527 ;;		wreg, status,2, status,0
  5528 ;; Tracked objects:
  5529 ;;		On entry : B3F/0
  5530 ;;		On exit  : B3F/2
  5531 ;;		Unchanged: B00/0
  5532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5537 ;;Total ram usage:        0 bytes
  5538 ;; Hardware stack levels used:    1
  5539 ;; Hardware stack levels required when called:    3
  5540 ;; This function calls:
  5541 ;;		Nothing
  5542 ;; This function is called by:
  5543 ;;		_main
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           
  5548                           ;psect for function _initialize
  5549  0E49                     _initialize:	
  5550                           
  5551                           ;main.c: 156:  OSCFRQ = 0b00000010;
  5552                           
  5553                           ;incstack = 0
  5554                           ; Regs used in _initialize: [wreg+status,2+status,0]
  5555  0E49  3002               	movlw	2
  5556  0E4A  0151               	movlb	17	; select bank17
  5557  0E4B  0093               	movwf	19	;volatile
  5558                           
  5559                           ;main.c: 157:  OSCCON1 = 0b01100000;
  5560  0E4C  3060               	movlw	96
  5561  0E4D  008D               	movwf	13	;volatile
  5562  0E4E                     l153:	
  5563                           ;main.c: 158:  while (!OSCCON3bits.ORDY);
  5564                           
  5565  0E4E  1E0F               	btfss	15,4	;volatile
  5566  0E4F  2E4E               	goto	l153
  5567                           
  5568                           ;main.c: 161:  RX1DTPPSbits.RX1DTPPS = 0x17;
  5569  0E50  017D               	movlb	61	; select bank61
  5570  0E51  084B               	movf	75,w	;volatile
  5571  0E52  39C0               	andlw	-64
  5572  0E53  3817               	iorlw	23
  5573  0E54  00CB               	movwf	75	;volatile
  5574                           
  5575                           ;main.c: 162:  RC6PPS = 0x0F;
  5576  0E55  300F               	movlw	15
  5577  0E56  017E               	movlb	62	; select bank62
  5578  0E57  00A6               	movwf	38	;volatile
  5579                           
  5580                           ;main.c: 165:  ANSELA = 0b01000000;
  5581  0E58  3040               	movlw	64
  5582  0E59  00B8               	movwf	56	;volatile
  5583                           
  5584                           ;main.c: 166:  ANSELB = 0b00000000;
  5585  0E5A  01C3               	clrf	67	;volatile
  5586                           
  5587                           ;main.c: 167:  ANSELC = 0b00000011;
  5588  0E5B  3003               	movlw	3
  5589  0E5C  00CE               	movwf	78	;volatile
  5590                           
  5591                           ;main.c: 170:  TRISA = 0b11110000;
  5592  0E5D  30F0               	movlw	240
  5593  0E5E  0140               	movlb	0	; select bank0
  5594  0E5F  0092               	movwf	18	;volatile
  5595                           
  5596                           ;main.c: 171:  TRISB = 0b00000000;
  5597  0E60  0193               	clrf	19	;volatile
  5598                           
  5599                           ;main.c: 172:  TRISC = 0b10000111;
  5600  0E61  3087               	movlw	135
  5601  0E62  0094               	movwf	20	;volatile
  5602                           
  5603                           ;main.c: 175:  ADCON0bits.ADON = 1;
  5604  0E63  0141               	movlb	1	; select bank1
  5605  0E64  141D               	bsf	29,0	;volatile
  5606                           
  5607                           ;main.c: 176:  ADCON1 = 0b11100000;
  5608  0E65  30E0               	movlw	224
  5609  0E66  009E               	movwf	30	;volatile
  5610                           
  5611                           ;main.c: 179:  T0CON0 = 0b10000000;
  5612  0E67  3080               	movlw	128
  5613  0E68  014B               	movlb	11	; select bank11
  5614  0E69  009E               	movwf	30	;volatile
  5615                           
  5616                           ;main.c: 180:  T0CON1 = 0b01000111;
  5617  0E6A  3047               	movlw	71
  5618  0E6B  009F               	movwf	31	;volatile
  5619                           
  5620                           ;main.c: 181:  TMR0 = 178;
  5621  0E6C  30B2               	movlw	178
  5622  0E6D  009C               	movwf	28	;volatile
  5623                           
  5624                           ;main.c: 184:  T1CON = 0b00110011;
  5625  0E6E  3033               	movlw	51
  5626  0E6F  0144               	movlb	4	; select bank4
  5627  0E70  008E               	movwf	14	;volatile
  5628                           
  5629                           ;main.c: 185:  T1CLK = 0b00000001;
  5630  0E71  3001               	movlw	1
  5631  0E72  0091               	movwf	17	;volatile
  5632                           
  5633                           ;main.c: 186:  TMR1 = 53035;
  5634  0E73  30CF               	movlw	207
  5635  0E74  008D               	movwf	13	;volatile
  5636  0E75  302B               	movlw	43
  5637  0E76  008C               	movwf	12	;volatile
  5638                           
  5639                           ;main.c: 189:  PIE0 = 0b00110000;
  5640  0E77  3030               	movlw	48
  5641  0E78  014E               	movlb	14	; select bank14
  5642  0E79  0096               	movwf	22	;volatile
  5643                           
  5644                           ;main.c: 190:  PIE3 = 0b00100000;
  5645  0E7A  3020               	movlw	32
  5646  0E7B  0099               	movwf	25	;volatile
  5647                           
  5648                           ;main.c: 191:  PIE4 = 0b00000001;
  5649  0E7C  3001               	movlw	1
  5650  0E7D  009A               	movwf	26	;volatile
  5651                           
  5652                           ;main.c: 192:  INTCON = 0b11000000;
  5653  0E7E  30C0               	movlw	192
  5654  0E7F  008B               	movwf	11	;volatile
  5655                           
  5656                           ;main.c: 195:  IOCAP = 0b10110000;
  5657  0E80  30B0               	movlw	176
  5658  0E81  017E               	movlb	62	; select bank62
  5659  0E82  00BD               	movwf	61	;volatile
  5660                           
  5661                           ;main.c: 196:  IOCAN = 0b10110000;
  5662  0E83  00BE               	movwf	62	;volatile
  5663                           
  5664                           ;main.c: 197:  IOCCN = 0b00000100;
  5665  0E84  3004               	movlw	4
  5666  0E85  00D4               	movwf	84	;volatile
  5667                           
  5668                           ;main.c: 201:  BAUD1CON = 0b00001000;
  5669  0E86  3008               	movlw	8
  5670  0E87  0142               	movlb	2	; select bank2
  5671  0E88  009F               	movwf	31	;volatile
  5672                           
  5673                           ;main.c: 202:  SPBRGL = 25;
  5674  0E89  3019               	movlw	25
  5675  0E8A  009B               	movwf	27	;volatile
  5676                           
  5677                           ;main.c: 203:  RC1STA = 0b10010000;
  5678  0E8B  3090               	movlw	144
  5679  0E8C  009D               	movwf	29	;volatile
  5680                           
  5681                           ;main.c: 204:  TX1STA = 0b00100000;
  5682  0E8D  3020               	movlw	32
  5683  0E8E  009E               	movwf	30	;volatile
  5684  0E8F  0008               	return
  5685  0E90                     __end_of_initialize:	
  5686  0E90                     __ptext10:	
  5687 ;; *************** function _OLED_clearDisplay *****************
  5688 ;; Defined at:
  5689 ;;		line 165 in file "oled.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		wreg, status,2, status,0, pclath, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 3F/0
  5700 ;;		On exit  : 3F/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5707 ;;Total ram usage:        0 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    7
  5710 ;; This function calls:
  5711 ;;		_OLED_command
  5712 ;; This function is called by:
  5713 ;;		_main
  5714 ;;		_menuError
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           
  5719                           ;psect for function _OLED_clearDisplay
  5720  0E90                     _OLED_clearDisplay:	
  5721                           
  5722                           ;oled.c: 167:  OLED_command(0x01);
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _OLED_clearDisplay: [wreg+status,2+status,0+pclath+cstack]
  5726  0E90  3001               	movlw	1
  5727  0E91  2990               	ljmp	_OLED_command
  5728  0E92                     __end_of_OLED_clearDisplay:	
  5729  0E92                     __ptext9:	
  5730 ;; *************** function _OLED_returnHome *****************
  5731 ;; Defined at:
  5732 ;;		line 160 in file "oled.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;		None
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0, pclath, cstack
  5741 ;; Tracked objects:
  5742 ;;		On entry : 3C/0
  5743 ;;		On exit  : 3F/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5750 ;;Total ram usage:        0 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    7
  5753 ;; This function calls:
  5754 ;;		_OLED_command
  5755 ;; This function is called by:
  5756 ;;		_main
  5757 ;;		_menuError
  5758 ;;		_statusView
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           
  5763                           ;psect for function _OLED_returnHome
  5764  0E92                     _OLED_returnHome:	
  5765                           
  5766                           ;oled.c: 162:  OLED_command(0x02);
  5767                           
  5768                           ;incstack = 0
  5769                           ; Regs used in _OLED_returnHome: [wreg+status,2+status,0+pclath+cstack]
  5770  0E92  3002               	movlw	2
  5771  0E93  2990               	ljmp	_OLED_command
  5772  0E94                     __end_of_OLED_returnHome:	
  5773  0E94                     __ptext1:	
  5774 ;; *************** function _menu *****************
  5775 ;; Defined at:
  5776 ;;		line 80 in file "menu.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  data            2   67[BANK2 ] PTR struct .
  5779 ;;		 -> data(117), 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  func            2   75[BANK2 ] PTR FTN(PTR struct .,)un
  5782 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  5783 ;;		 -> statusView(1), NULL(0), 
  5784 ;;  nextState       1   77[BANK2 ] char 
  5785 ;;  pb              1   74[BANK2 ] enum E7877
  5786 ;;  page            1   73[BANK2 ] char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 3F/2
  5793 ;;		On exit  : 3E/2
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5796 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5797 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5798 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5799 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5800 ;;Total ram usage:       11 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:   12
  5803 ;; This function calls:
  5804 ;;		_channelSetup
  5805 ;;		_channelView
  5806 ;;		_getNextState
  5807 ;;		_getPB
  5808 ;;		_getStateFunc
  5809 ;;		_menuError
  5810 ;;		_setLensDia
  5811 ;;		_setOutputPower
  5812 ;;		_statusView
  5813 ;; This function is called by:
  5814 ;;		_main
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function _menu
  5820  0E94                     _menu:	
  5821                           
  5822                           ;menu.c: 80: void menu(t_globalData *data);menu.c: 81: {;menu.c: 82:  static uint8_t sta
      +                          te = 0;;menu.c: 83:  int8_t page, nextState;;menu.c: 84:  enum e_buttonPress pb;;menu.c:
      +                           85:  t_stateFuncPtr func;;menu.c: 88:  func = getStateFunc(state);
  5823                           
  5824                           ;incstack = 0
  5825                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5826  0E94  0143               	movlb	3	; select bank3
  5827  0E95  0842               	movf	menu@state^(0+384),w
  5828  0E96  27CE  3188         	fcall	_getStateFunc
  5829  0E98  0827               	movf	?_getStateFunc+1,w
  5830  0E99  0142               	movlb	2	; select bank2
  5831  0E9A  00EC               	movwf	(menu@func+1)^(0+256)
  5832  0E9B  0140               	movlb	0	; select bank0
  5833  0E9C  0826               	movf	?_getStateFunc,w
  5834  0E9D  0142               	movlb	2	; select bank2
  5835  0E9E  00EB               	movwf	menu@func^(0+256)
  5836                           
  5837                           ;menu.c: 89:  if (func)
  5838  0E9F  046C               	iorwf	(menu@func+1)^(0+256),w
  5839  0EA0  1903               	btfsc	3,2
  5840  0EA1  2EAE               	goto	l6753
  5841                           
  5842                           ;menu.c: 90:   page = (*func)(data);
  5843  0EA2  0864               	movf	(menu@data+1)^(0+256),w
  5844  0EA3  00D5               	movwf	(setLensDia@data+1)^(0+256)
  5845  0EA4  0863               	movf	menu@data^(0+256),w
  5846  0EA5  00D4               	movwf	setLensDia@data^(0+256)
  5847  0EA6  086C               	movf	(menu@func+1)^(0+256),w
  5848  0EA7  008A               	movwf	10
  5849  0EA8  086B               	movf	menu@func^(0+256),w
  5850  0EA9  000A               	callw
  5851  0EAA  3188               	pagesel	$
  5852  0EAB  0142               	movlb	2	; select bank2
  5853  0EAC  00E9               	movwf	menu@page^(0+256)
  5854  0EAD  2EB1               	goto	l6755
  5855  0EAE                     l6753:	
  5856                           
  5857                           ;menu.c: 92:   menuError();
  5858  0EAE  3198  208B  3188   	fcall	_menuError
  5859  0EB1                     l6755:	
  5860                           
  5861                           ;menu.c: 93:  updateScreen = 0;
  5862  0EB1  0143               	movlb	3	; select bank3
  5863  0EB2  01ED               	clrf	_updateScreen^(0+384)
  5864                           
  5865                           ;menu.c: 94:  pb = getPB();
  5866  0EB3  26DF               	fcall	_getPB
  5867  0EB4  0142               	movlb	2	; select bank2
  5868  0EB5  00EA               	movwf	menu@pb^(0+256)
  5869                           
  5870                           ;menu.c: 95:  nextState = getNextState(state, page, pb);
  5871  0EB6  0869               	movf	menu@page^(0+256),w
  5872  0EB7  0140               	movlb	0	; select bank0
  5873  0EB8  00A6               	movwf	getNextState@page
  5874  0EB9  0142               	movlb	2	; select bank2
  5875  0EBA  086A               	movf	menu@pb^(0+256),w
  5876  0EBB  0140               	movlb	0	; select bank0
  5877  0EBC  00A7               	movwf	getNextState@pb
  5878  0EBD  0143               	movlb	3	; select bank3
  5879  0EBE  0842               	movf	menu@state^(0+384),w
  5880  0EBF  3198  209A  3188   	fcall	_getNextState
  5881  0EC2  0142               	movlb	2	; select bank2
  5882  0EC3  00ED               	movwf	menu@nextState^(0+256)
  5883                           
  5884                           ;menu.c: 96:  if (nextState > -1) {
  5885  0EC4  1BED               	btfsc	menu@nextState^(0+256),7
  5886  0EC5  0008               	return
  5887                           
  5888                           ;menu.c: 97:   if (state != nextState) {
  5889  0EC6  00E5               	movwf	??_menu^(0+256)
  5890  0EC7  01E6               	clrf	(??_menu^(0+256)+1)
  5891  0EC8  1BE5               	btfsc	??_menu^(0+256),7
  5892  0EC9  03E6               	decf	(??_menu^(0+256)+1),f
  5893  0ECA  0143               	movlb	3	; select bank3
  5894  0ECB  0842               	movf	menu@state^(0+384),w
  5895  0ECC  0142               	movlb	2	; select bank2
  5896  0ECD  00E7               	movwf	(??_menu+2)^(0+256)
  5897  0ECE  01E8               	clrf	((??_menu+2)^(0+256)+1)
  5898  0ECF  0866               	movf	(??_menu+1)^(0+256),w
  5899  0ED0  0668               	xorwf	(??_menu+3)^(0+256),w
  5900  0ED1  1D03               	skipz
  5901  0ED2  2ED5               	goto	u8055
  5902  0ED3  0865               	movf	??_menu^(0+256),w
  5903  0ED4  0667               	xorwf	(??_menu+2)^(0+256),w
  5904  0ED5                     u8055:	
  5905  0ED5  1903               	skipnz
  5906  0ED6  0008               	return
  5907                           
  5908                           ;menu.c: 98:    updateScreen = 1;
  5909  0ED7  0143               	movlb	3	; select bank3
  5910  0ED8  01ED               	clrf	_updateScreen^(0+384)
  5911  0ED9  0AED               	incf	_updateScreen^(0+384),f
  5912                           
  5913                           ;menu.c: 99:    state = nextState;
  5914  0EDA  0142               	movlb	2	; select bank2
  5915  0EDB  086D               	movf	menu@nextState^(0+256),w
  5916  0EDC  0143               	movlb	3	; select bank3
  5917  0EDD  00C2               	movwf	menu@state^(0+384)
  5918  0EDE  0008               	return
  5919  0EDF                     __end_of_menu:	
  5920  0EDF                     __ptext12:	
  5921 ;; *************** function _getPB *****************
  5922 ;; Defined at:
  5923 ;;		line 65 in file "inputs.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;		None
  5926 ;; Auto vars:     Size  Location     Type
  5927 ;;  ret             1    0[BANK0 ] enum E7849
  5928 ;; Return value:  Size  Location     Type
  5929 ;;                  1    wreg      enum E7849
  5930 ;; Registers used:
  5931 ;;		wreg, status,2
  5932 ;; Tracked objects:
  5933 ;;		On entry : 3F/3
  5934 ;;		On exit  : 3F/0
  5935 ;;		Unchanged: 0/0
  5936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5940 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5941 ;;Total ram usage:        1 bytes
  5942 ;; Hardware stack levels used:    1
  5943 ;; Hardware stack levels required when called:    3
  5944 ;; This function calls:
  5945 ;;		Nothing
  5946 ;; This function is called by:
  5947 ;;		_menu
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           
  5952                           ;psect for function _getPB
  5953  0EDF                     _getPB:	
  5954                           
  5955                           ;inputs.c: 67:  enum e_buttonPress ret = g_pbState;
  5956                           
  5957                           ;incstack = 0
  5958                           ; Regs used in _getPB: [wreg+status,2]
  5959  0EDF  0849               	movf	_g_pbState^(0+384),w	;volatile
  5960  0EE0  0140               	movlb	0	; select bank0
  5961  0EE1  00A0               	movwf	getPB@ret
  5962                           
  5963                           ;inputs.c: 68:  g_pbState = PB_NONE;
  5964  0EE2  0143               	movlb	3	; select bank3
  5965  0EE3  01C9               	clrf	_g_pbState^(0+384)	;volatile
  5966                           
  5967                           ;inputs.c: 69:  return ret;
  5968  0EE4  0140               	movlb	0	; select bank0
  5969  0EE5  0820               	movf	getPB@ret,w
  5970  0EE6  0008               	return
  5971  0EE7                     __end_of_getPB:	
  5972  0EE7                     __ptext61:	
  5973 ;; *************** function _uartSendByte *****************
  5974 ;; Defined at:
  5975 ;;		line 25 in file "uart.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;  s               1    wreg     unsigned char 
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;  s               1    0[BANK0 ] unsigned char 
  5980 ;; Return value:  Size  Location     Type
  5981 ;;                  1    wreg      void 
  5982 ;; Registers used:
  5983 ;;		wreg
  5984 ;; Tracked objects:
  5985 ;;		On entry : 3F/3
  5986 ;;		On exit  : 3F/E
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5992 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5993 ;;Total ram usage:        1 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:    3
  5996 ;; This function calls:
  5997 ;;		Nothing
  5998 ;; This function is called by:
  5999 ;;		_checkSensor
  6000 ;; This function uses a non-reentrant model
  6001 ;;
  6002                           
  6003                           
  6004                           ;psect for function _uartSendByte
  6005  0EE7                     _uartSendByte:	
  6006                           
  6007                           ;incstack = 0
  6008                           ; Regs used in _uartSendByte: [wreg]
  6009                           ;uartSendByte@s stored from wreg
  6010  0EE7  0140               	movlb	0	; select bank0
  6011  0EE8  00A0               	movwf	uartSendByte@s
  6012                           
  6013                           ;uart.c: 25: void uartSendByte(char s);uart.c: 26: {;uart.c: 27:  TX1REG = s;
  6014  0EE9  0820               	movf	uartSendByte@s,w
  6015  0EEA  0142               	movlb	2	; select bank2
  6016  0EEB  009A               	movwf	26	;volatile
  6017                           
  6018                           ;uart.c: 28:  __nop();
  6019  0EEC  0000               	nop
  6020  0EED                     l350:	
  6021                           ;uart.c: 29:  while (!PIR3bits.TX1IF);
  6022                           
  6023  0EED  014E               	movlb	14	; select bank14
  6024  0EEE  1A0F               	btfsc	15,4	;volatile
  6025  0EEF  0008               	return
  6026  0EF0  2EED               	goto	l350
  6027  0EF1                     __end_of_uartSendByte:	
  6028  0EF1                     PL38:	
  6029  0EF1  3F40               	moviw [0]fsr1
  6030  0EF2  00D5               	movwf	??_checkSensor
  6031  0EF3  3F41               	moviw [1]fsr1
  6032  0EF4  00D6               	movwf	??_checkSensor+1
  6033  0EF5  3F42               	moviw [2]fsr1
  6034  0EF6  00D7               	movwf	??_checkSensor+2
  6035  0EF7  3F43               	moviw [3]fsr1
  6036  0EF8  00D8               	movwf	??_checkSensor+3
  6037  0EF9  0853               	movf	checkSensor@data,w
  6038  0EFA  0086               	movwf	6
  6039  0EFB  0854               	movf	checkSensor@data+1,w
  6040  0EFC  0087               	movwf	7
  6041  0EFD  0008               	return
  6042  0EFE                     __end_ofPL38:	
  6043  0EFE                     PL46:	
  6044  0EFE  0821               	movf	?__Umul8_16+1,w
  6045  0EFF  00C6               	movwf	___flmul@temp+1
  6046  0F00  0820               	movf	?__Umul8_16,w
  6047  0F01  00C5               	movwf	___flmul@temp
  6048  0F02  07BC               	addwf	___flmul@grs,f
  6049  0F03  0846               	movf	___flmul@temp+1,w
  6050  0F04  3DBD               	addwfc	___flmul@grs+1,f
  6051  0F05  3000               	movlw	0
  6052  0F06  3DBE               	addwfc	___flmul@grs+2,f
  6053  0F07  3DBF               	addwfc	___flmul@grs+3,f
  6054  0F08  0008               	return
  6055  0F09                     __end_ofPL46:	
  6056  0F09                     PL50:	
  6057  0F09  07C1               	addwf	___flmul@prod,f
  6058  0F0A  3001               	movlw	1
  6059  0F0B  1803               	skipnc
  6060  0F0C  07C2               	addwf	___flmul@prod+1,f
  6061  0F0D  1803               	skipnc
  6062  0F0E  07C3               	addwf	___flmul@prod+2,f
  6063  0F0F  1803               	skipnc
  6064  0F10  07C4               	addwf	___flmul@prod+3,f
  6065  0F11  083E               	movf	___flmul@grs+2,w
  6066  0F12  00BF               	movwf	___flmul@grs+3
  6067  0F13  083D               	movf	___flmul@grs+1,w
  6068  0F14  00BE               	movwf	___flmul@grs+2
  6069  0F15  083C               	movf	___flmul@grs,w
  6070  0F16  00BD               	movwf	___flmul@grs+1
  6071  0F17  01BC               	clrf	___flmul@grs
  6072  0F18  0008               	return
  6073  0F19                     __end_ofPL50:	
  6074  0F19                     PL52:	
  6075  0F19  0821               	movf	?_adcGetConversion+1,w
  6076  0F1A  00E7               	movwf	convertAnalogValues@adc+1
  6077  0F1B  0820               	movf	?_adcGetConversion,w
  6078  0F1C  00E6               	movwf	convertAnalogValues@adc
  6079  0F1D  0867               	movf	convertAnalogValues@adc+1,w
  6080  0F1E  00AD               	movwf	ema@in+1
  6081  0F1F  0866               	movf	convertAnalogValues@adc,w
  6082  0F20  00AC               	movwf	ema@in
  6083  0F21  0143               	movlb	3	; select bank3
  6084  0F22  0008               	return
  6085  0F23                     __end_ofPL52:	
  6086  0F23                     PL58:	
  6087  0F23  00C6               	movwf	___flmul@temp+1
  6088  0F24  0820               	movf	?__Umul8_16,w
  6089  0F25  00C5               	movwf	___flmul@temp
  6090  0F26  07BC               	addwf	___flmul@grs,f
  6091  0F27  3001               	movlw	1
  6092  0F28  1803               	skipnc
  6093  0F29  07BD               	addwf	___flmul@grs+1,f
  6094  0F2A  1803               	skipnc
  6095  0F2B  07BE               	addwf	___flmul@grs+2,f
  6096  0F2C  1803               	skipnc
  6097  0F2D  07BF               	addwf	___flmul@grs+3,f
  6098  0F2E  0846               	movf	___flmul@temp+1,w
  6099  0F2F  0008               	return
  6100  0F30                     __end_ofPL58:	
  6101  0F30                     PL64:	
  6102  0F30  0823               	movf	?___xxtofl+3,w
  6103  0F31  00B5               	movwf	___flmul@a+3
  6104  0F32  0822               	movf	?___xxtofl+2,w
  6105  0F33  00B4               	movwf	___flmul@a+2
  6106  0F34  0821               	movf	?___xxtofl+1,w
  6107  0F35  00B3               	movwf	___flmul@a+1
  6108  0F36  0820               	movf	?___xxtofl,w
  6109  0F37  00B2               	movwf	___flmul@a
  6110  0F38  0008               	return
  6111  0F39                     __end_ofPL64:	
  6112  0F39                     PL66:	
  6113  0F39  0855               	movf	??_checkSensor,w
  6114  0F3A  3FC0               	movwi [0]fsr1
  6115  0F3B  0856               	movf	??_checkSensor+1,w
  6116  0F3C  3FC1               	movwi [1]fsr1
  6117  0F3D  0857               	movf	??_checkSensor+2,w
  6118  0F3E  3FC2               	movwi [2]fsr1
  6119  0F3F  0858               	movf	??_checkSensor+3,w
  6120  0F40  3FC3               	movwi [3]fsr1
  6121  0F41  0008               	return
  6122  0F42                     __end_ofPL66:	
  6123  0F42                     PL70:	
  6124  0F42  0140               	movlb	0	; select bank0
  6125  0F43  00AE               	movwf	ema@average
  6126  0F44  30A6               	movlw	166
  6127  0F45  01B3               	clrf	ema@alpha+3
  6128  0F46  01B2               	clrf	ema@alpha+2
  6129  0F47  00B1               	movwf	ema@alpha+1
  6130  0F48  3065               	movlw	101
  6131  0F49  00B0               	movwf	ema@alpha
  6132  0F4A  0008               	return
  6133  0F4B                     __end_ofPL70:	
  6134  0F4B                     PL72:	
  6135  0F4B  0821               	movf	?__Umul8_16+1,w
  6136  0F4C  00C6               	movwf	___flmul@temp+1
  6137  0F4D  0820               	movf	?__Umul8_16,w
  6138  0F4E  00C5               	movwf	___flmul@temp
  6139  0F4F  07C1               	addwf	___flmul@prod,f
  6140  0F50  0846               	movf	___flmul@temp+1,w
  6141  0F51  3DC2               	addwfc	___flmul@prod+1,f
  6142  0F52  3000               	movlw	0
  6143  0F53  3DC3               	addwfc	___flmul@prod+2,f
  6144  0F54  3DC4               	addwfc	___flmul@prod+3,f
  6145  0F55  0830               	movf	___flmul@b+2,w
  6146  0F56  00A0               	movwf	__Umul8_16@multiplicand
  6147  0F57  0008               	return
  6148  0F58                     __end_ofPL72:	
  6149  0F58                     PL76:	
  6150  0F58  0853               	movf	checkSensor@data,w
  6151  0F59  3E20               	addlw	32
  6152  0F5A  0086               	movwf	6
  6153  0F5B  3000               	movlw	0
  6154  0F5C  3D54               	addwfc	checkSensor@data+1,w
  6155  0F5D  0087               	movwf	7
  6156  0F5E  0008               	return
  6157  0F5F                     __end_ofPL76:	
  6158  0F5F                     PL102:	
  6159  0F5F  0847               	movf	?___fladd,w
  6160  0F60  3FC0               	movwi [0]fsr1
  6161  0F61  0848               	movf	?___fladd+1,w
  6162  0F62  3FC1               	movwi [1]fsr1
  6163  0F63  0849               	movf	?___fladd+2,w
  6164  0F64  3FC2               	movwi [2]fsr1
  6165  0F65  084A               	movf	?___fladd+3,w
  6166  0F66  3FC3               	movwi [3]fsr1
  6167  0F67  0008               	return
  6168  0F68                     __end_ofPL102:	
  6169  0F68                     PL106:	
  6170  0F68  0847               	movf	?___fldiv,w
  6171  0F69  3FC0               	movwi [0]fsr1
  6172  0F6A  0848               	movf	?___fldiv+1,w
  6173  0F6B  3FC1               	movwi [1]fsr1
  6174  0F6C  0849               	movf	?___fldiv+2,w
  6175  0F6D  3FC2               	movwi [2]fsr1
  6176  0F6E  084A               	movf	?___fldiv+3,w
  6177  0F6F  3FC3               	movwi [3]fsr1
  6178  0F70  0008               	return
  6179  0F71                     __end_ofPL106:	
  6180  0F71                     PL108:	
  6181  0F71  0831               	movf	?___flmul+3,w
  6182  0F72  00CE               	movwf	___fldiv@b+3
  6183  0F73  0830               	movf	?___flmul+2,w
  6184  0F74  00CD               	movwf	___fldiv@b+2
  6185  0F75  082F               	movf	?___flmul+1,w
  6186  0F76  00CC               	movwf	___fldiv@b+1
  6187  0F77  082E               	movf	?___flmul,w
  6188  0F78  00CB               	movwf	___fldiv@b
  6189  0F79  0008               	return
  6190  0F7A                     __end_ofPL108:	
  6191  0F7A                     PL118:	
  6192  0F7A  00A7               	movwf	?_timeSince+3
  6193  0F7B  082A               	movf	??_timeSince+2,w
  6194  0F7C  00A6               	movwf	?_timeSince+2
  6195  0F7D  0829               	movf	??_timeSince+1,w
  6196  0F7E  00A5               	movwf	?_timeSince+1
  6197  0F7F  0828               	movf	??_timeSince,w
  6198  0F80  00A4               	movwf	?_timeSince
  6199  0F81  0008               	return
  6200  0F82                     __end_ofPL118:	
  6201  0F82                     PL126:	
  6202  0F82  00CB               	movwf	___flge@ff2
  6203  0F83  3F41               	moviw [1]fsr1
  6204  0F84  00CC               	movwf	___flge@ff2+1
  6205  0F85  3F42               	moviw [2]fsr1
  6206  0F86  00CD               	movwf	___flge@ff2+2
  6207  0F87  3F43               	moviw [3]fsr1
  6208  0F88  00CE               	movwf	___flge@ff2+3
  6209  0F89  0008               	return
  6210  0F8A                     __end_ofPL126:	
  6211  0F8A                     PL128:	
  6212  0F8A  00C7               	movwf	___flge@ff1
  6213  0F8B  3F41               	moviw [1]fsr1
  6214  0F8C  00C8               	movwf	___flge@ff1+1
  6215  0F8D  3F42               	moviw [2]fsr1
  6216  0F8E  00C9               	movwf	___flge@ff1+2
  6217  0F8F  3F43               	moviw [3]fsr1
  6218  0F90  00CA               	movwf	___flge@ff1+3
  6219  0F91  0008               	return
  6220  0F92                     __end_ofPL128:	
  6221  0F92                     PL136:	
  6222  0F92  0140               	movlb	0	; select bank0
  6223  0F93  00A1               	movwf	___xxtofl@val+1
  6224  0F94  3000               	movlw	0
  6225  0F95  01A2               	clrf	___xxtofl@val+2
  6226  0F96  01A3               	clrf	___xxtofl@val+3
  6227  0F97  0008               	return
  6228  0F98                     __end_ofPL136:	
  6229  0F98                     PL140:	
  6230  0F98  00B1               	movwf	___flmul@b+3
  6231  0F99  30A0               	movlw	160
  6232  0F9A  00B0               	movwf	___flmul@b+2
  6233  0F9B  01AF               	clrf	___flmul@b+1
  6234  0F9C  01AE               	clrf	___flmul@b
  6235  0F9D  0143               	movlb	3	; select bank3
  6236  0F9E  0008               	return
  6237  0F9F                     __end_ofPL140:	
  6238  0F9F                     PL150:	
  6239  0F9F  36A0               	lsrf	??_OLED_write4bits,f
  6240  0FA0  36A0               	lsrf	??_OLED_write4bits,f
  6241  0FA1  0820               	movf	??_OLED_write4bits,w
  6242  0FA2  3901               	andlw	1
  6243  0FA3  00A1               	movwf	??_OLED_write4bits+1
  6244  0FA4  0EA1               	swapf	??_OLED_write4bits+1,f
  6245  0FA5  0008               	return
  6246  0FA6                     __end_ofPL150:	
  6247  0FA6                     PL156:	
  6248  0FA6  0853               	movf	checkSensor@data,w
  6249  0FA7  0086               	movwf	6
  6250  0FA8  0854               	movf	checkSensor@data+1,w
  6251  0FA9  0087               	movwf	7
  6252  0FAA  3150               	addfsr 1,16
  6253  0FAB  3F40               	moviw [0]fsr1
  6254  0FAC  0008               	return
  6255  0FAD                     __end_ofPL156:	
  6256  0FAD                     PL166:	
  6257  0FAD  0846               	movf	___flmul@temp+1,w
  6258  0FAE  3A80               	xorlw	128
  6259  0FAF  00B6               	movwf	??___flmul
  6260  0FB0  3080               	movlw	128
  6261  0FB1  0236               	subwf	??___flmul,w
  6262  0FB2  0008               	return
  6263  0FB3                     __end_ofPL166:	
  6264  0FB3                     PL170:	
  6265  0FB3  0860               	movf	convertAnalogValues@data,w
  6266  0FB4  0086               	movwf	6
  6267  0FB5  0861               	movf	convertAnalogValues@data+1,w
  6268  0FB6  0087               	movwf	7
  6269  0FB7  3154               	addfsr 1,20
  6270  0FB8  0008               	return
  6271  0FB9                     __end_ofPL170:	
  6272  0FB9                     PL184:	
  6273  0FB9  0860               	movf	convertAnalogValues@data,w
  6274  0FBA  0086               	movwf	6
  6275  0FBB  0861               	movf	convertAnalogValues@data+1,w
  6276  0FBC  0087               	movwf	7
  6277  0FBD  3158               	addfsr 1,24
  6278  0FBE  0008               	return
  6279  0FBF                     __end_ofPL184:	
  6280  0FBF                     PL204:	
  6281  0FBF  01B2               	clrf	___flmul@a
  6282  0FC0  01B3               	clrf	___flmul@a+1
  6283  0FC1  01B4               	clrf	___flmul@a+2
  6284  0FC2  01B5               	clrf	___flmul@a+3
  6285  0FC3  0008               	return
  6286  0FC4                     __end_ofPL204:	
  6287  0FC4                     PL206:	
  6288  0FC4  01AE               	clrf	___flmul@b
  6289  0FC5  01AF               	clrf	___flmul@b+1
  6290  0FC6  01B0               	clrf	___flmul@b+2
  6291  0FC7  01B1               	clrf	___flmul@b+3
  6292  0FC8  0008               	return
  6293  0FC9                     __end_ofPL206:	
  6294  0FC9                     PL210:	
  6295  0FC9  36AD               	lsrf	___xxtofl@arg+3,f
  6296  0FCA  0CAC               	rrf	___xxtofl@arg+2,f
  6297  0FCB  0CAB               	rrf	___xxtofl@arg+1,f
  6298  0FCC  0CAA               	rrf	___xxtofl@arg,f
  6299  0FCD  0008               	return
  6300  0FCE                     __end_ofPL210:	
  6301  0FCE                     __ptext11:	
  6302 ;; *************** function _getStateFunc *****************
  6303 ;; Defined at:
  6304 ;;		line 112 in file "menu.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;  state           1    wreg     enum E7886
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;  state           1    9[BANK0 ] enum E7886
  6309 ;;  n               1   10[BANK0 ] unsigned char 
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  2    6[BANK0 ] PTR FTN(PTR struct .,)un
  6312 ;; Registers used:
  6313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6314 ;; Tracked objects:
  6315 ;;		On entry : 3F/3
  6316 ;;		On exit  : 3F/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6319 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6322 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6323 ;;Total ram usage:        5 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    4
  6326 ;; This function calls:
  6327 ;;		___wmul
  6328 ;; This function is called by:
  6329 ;;		_menu
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           
  6334                           ;psect for function _getStateFunc
  6335  0FCE                     _getStateFunc:	
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _getStateFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6339                           ;getStateFunc@state stored from wreg
  6340  0FCE  0140               	movlb	0	; select bank0
  6341  0FCF  00A9               	movwf	getStateFunc@state
  6342                           
  6343                           ;menu.c: 112: t_stateFuncPtr getStateFunc(enum e_menuStates state);menu.c: 113: {;menu.c
      +                          : 114:  uint8_t n;;menu.c: 117:  for(n = 0; n < sizeof(stateFuncTbl)/sizeof(stateFuncTbl
      +                          [0]); n++) {
  6344  0FD0  01AA               	clrf	getStateFunc@n
  6345  0FD1                     l5491:	
  6346                           
  6347                           ;menu.c: 118:   if ((stateFuncTbl[n].state == state))
  6348  0FD1  27F9               	fcall	PL158	;call to abstracted procedure
  6349  0FD2  3199  21B6  3188   	fcall	___wmul
  6350  0FD5  0821               	movf	?___wmul+1,w
  6351  0FD6  0085               	movwf	5
  6352  0FD7  0820               	movf	?___wmul,w
  6353  0FD8  0084               	movwf	4
  6354  0FD9  3000               	movlw	low (_stateFuncTbl| (0+32768))
  6355  0FDA  0784               	addwf	4,f
  6356  0FDB  30A0               	movlw	high (_stateFuncTbl| (0+32768))
  6357  0FDC  3D85               	addwfc	5,f
  6358  0FDD  0800               	movf	0,w	;code access
  6359  0FDE  0629               	xorwf	getStateFunc@state,w
  6360  0FDF  1D03               	skipz
  6361  0FE0  2FF1               	goto	l5497
  6362                           
  6363                           ;menu.c: 119:    return stateFuncTbl[n].func;
  6364  0FE1  27F9               	fcall	PL158	;call to abstracted procedure
  6365  0FE2  3199  21B6         	fcall	___wmul
  6366  0FE4  0821               	movf	?___wmul+1,w
  6367  0FE5  0085               	movwf	5
  6368  0FE6  0820               	movf	?___wmul,w
  6369  0FE7  0084               	movwf	4
  6370  0FE8  3001               	movlw	low ((_stateFuncTbl+1)| (0+32768))
  6371  0FE9  0784               	addwf	4,f
  6372  0FEA  30A0               	movlw	high ((_stateFuncTbl+1)| (0+32768))
  6373  0FEB  3D85               	addwfc	5,f
  6374  0FEC  3F00               	moviw [0]fsr0
  6375  0FED  00A6               	movwf	?_getStateFunc
  6376  0FEE  3F01               	moviw [1]fsr0
  6377  0FEF  00A7               	movwf	?_getStateFunc+1
  6378  0FF0  0008               	return
  6379  0FF1                     l5497:	
  6380  0FF1  3005               	movlw	5
  6381                           
  6382                           ;menu.c: 120:  }
  6383  0FF2  0AAA               	incf	getStateFunc@n,f
  6384  0FF3  022A               	subwf	getStateFunc@n,w
  6385  0FF4  1C03               	skipc
  6386  0FF5  2FD1               	goto	l5491
  6387                           
  6388                           ;menu.c: 121:  return (t_stateFuncPtr)((void*)0);
  6389  0FF6  01A6               	clrf	?_getStateFunc
  6390  0FF7  01A7               	clrf	?_getStateFunc+1
  6391  0FF8  0008               	return
  6392  0FF9                     __end_of_getStateFunc:	
  6393  0FF9                     PL158:	
  6394  0FF9  082A               	movf	getStateFunc@n,w
  6395  0FFA  00A0               	movwf	___wmul@multiplier
  6396  0FFB  3003               	movlw	3
  6397  0FFC  01A1               	clrf	___wmul@multiplier+1
  6398  0FFD  00A2               	movwf	___wmul@multiplicand
  6399  0FFE  01A3               	clrf	___wmul@multiplicand+1
  6400  0FFF  0008               	return
  6401  1000                     __end_ofPL158:	
  6402                           
  6403                           	psect	bssCOMMON
  6404  007B                     __pbssCOMMON:	
  6405  007B                     _prec:	
  6406  007B                     	ds	2
  6407  007D                     _g_curRotState:	
  6408  007D                     	ds	1
  6409                           
  6410                           	psect	bssBANK2
  6411  016E                     __pbssBANK2:	
  6412  016E                     _flags:	
  6413  016E                     	ds	2
  6414                           
  6415                           	psect	bssBANK3
  6416  01A0                     __pbssBANK3:	
  6417  01A0                     floorf@F514:	
  6418  01A0                     	ds	4
  6419  01A4                     ___fpclassifyf@F453:	
  6420  01A4                     	ds	4
  6421  01A8                     _tick100ms:	
  6422  01A8                     	ds	4
  6423  01AC                     checkSensor@sensorTimeout:	
  6424  01AC                     	ds	4
  6425  01B0                     checkSensor@sensorUpdateInterval:	
  6426  01B0                     	ds	4
  6427  01B4                     _nout:	
  6428  01B4                     	ds	2
  6429  01B6                     _width:	
  6430  01B6                     	ds	2
  6431  01B8                     convertAnalogValues@avgI:	
  6432  01B8                     	ds	2
  6433  01BA                     convertAnalogValues@avgV:	
  6434  01BA                     	ds	2
  6435  01BC                     convertAnalogValues@avgT:	
  6436  01BC                     	ds	2
  6437  01BE                     paging@lastDir:	
  6438  01BE                     	ds	1
  6439  01BF                     channelSetup@page:	
  6440  01BF                     	ds	1
  6441  01C0                     channelView@page:	
  6442  01C0                     	ds	1
  6443  01C1                     statusView@page:	
  6444  01C1                     	ds	1
  6445  01C2                     menu@state:	
  6446  01C2                     	ds	1
  6447  01C3                     _selectedChannel:	
  6448  01C3                     	ds	1
  6449  01C4                     uartReceiveISR@checksum:	
  6450  01C4                     	ds	1
  6451  01C5                     uartReceiveISR@rxCount:	
  6452  01C5                     	ds	1
  6453  01C6                     _dataReadyFlag:	
  6454  01C6                     	ds	1
  6455  01C7                     _rxOErrCount:	
  6456  01C7                     	ds	1
  6457  01C8                     _rxFErrCount:	
  6458  01C8                     	ds	1
  6459  01C9                     _g_pbState:	
  6460  01C9                     	ds	1
  6461  01CA                     _g_rotDir:	
  6462  01CA                     	ds	1
  6463  01CB                     _tick10ms:	
  6464  01CB                     	ds	1
  6465  01CC                     checkSensor@state:	
  6466  01CC                     	ds	1
  6467  01CD                     _sBuf2:	
  6468  01CD                     	ds	13
  6469  01DA                     setLensDia@test:	
  6470  01DA                     	ds	4
  6471  01DE                     setOutputPower@test:	
  6472  01DE                     	ds	4
  6473                           
  6474                           	psect	dataBANK3
  6475  01E2                     __pdataBANK3:	
  6476  01E2                     stoa@F1151:	
  6477  01E2                     	ds	7
  6478  01E9                     OLED_print_xy@F7897:	
  6479  01E9                     	ds	4
  6480  01ED                     _updateScreen:	
  6481  01ED                     	ds	1
  6482                           
  6483                           	psect	bssBANK4
  6484  0220                     __pbssBANK4:	
  6485  0220                     uartReceiveISR@buffer:	
  6486  0220                     	ds	20
  6487  0234                     _dataPacket:	
  6488  0234                     	ds	15
  6489                           
  6490                           	psect	bssBANK5
  6491  02A0                     __pbssBANK5:	
  6492  02A0                     _dbuf:	
  6493  02A0                     	ds	80
  6494                           
  6495                           	psect	bssBANK6
  6496  0320                     __pbssBANK6:	
  6497  0320                     _sBuf1:	
  6498  0320                     	ds	49
  6499                           
  6500                           	psect	dataBANK7
  6501  03A0                     __pdataBANK7:	
  6502  03A0                     OLED_loadSpecialChars@F7902:	
  6503  03A0                     	ds	48
  6504                           
  6505                           	psect	inittext
  6506  0765                     init_ram:	
  6507  0765  00FE               	movwf	126
  6508  0766                     initloop:	
  6509  0766  0012               	moviw fsr0++
  6510  0767  001E               	movwi fsr1++
  6511  0768  3001               	movlw	1
  6512  0769  02FE               	subwf	126,f
  6513  076A  3000               	movlw	0
  6514  076B  3BFF               	subwfb	127,f
  6515  076C  087F               	movf	127,w
  6516  076D  047E               	iorwf	126,w
  6517  076E  1903               	btfsc	3,2
  6518  076F  3400               	retlw	0
  6519  0770  2F66               	goto	initloop
  6520                           
  6521                           	psect	clrtext
  6522  0771                     clear_ram0:	
  6523                           ;	Called with FSR0 containing the base address, and
  6524                           ;	btemp/btemp+1 has the size to clear
  6525                           
  6526  0771  0064               	clrwdt	;clear the watchdog before getting into this loop
  6527  0772                     clrloop0:	
  6528  0772  3001               	movlw	1
  6529  0773  0180               	clrf	0	;clear RAM location pointed to by FSR
  6530  0774  3101               	addfsr 0,1
  6531  0775  02FE               	subwf	126,f
  6532  0776  3000               	movlw	0
  6533  0777  3BFF               	subwfb	127,f
  6534  0778  087F               	movf	127,w
  6535  0779  047E               	iorwf	126,w
  6536  077A  1903               	btfsc	3,2
  6537  077B  3400               	retlw	0	;all done for this memory range, return
  6538  077C  2F72               	goto	clrloop0	;have we reached the end yet?
  6539                           
  6540                           	psect	cstackBANK3
  6541  01EE                     __pcstackBANK3:	
  6542  01EE                     ??_main:	
  6543                           
  6544                           ; 1 bytes @ 0x0
  6545  01EE                     	ds	1
  6546                           
  6547                           	psect	cstackBANK2
  6548  0120                     __pcstackBANK2:	
  6549  0120                     vfpfcnvrt@ll:	
  6550                           
  6551                           ; 4 bytes @ 0x0
  6552  0120                     	ds	4
  6553  0124                     vfpfcnvrt@cp:	
  6554                           
  6555                           ; 2 bytes @ 0x4
  6556  0124                     	ds	2
  6557  0126                     _vfpfcnvrt$1333:	
  6558                           
  6559                           ; 2 bytes @ 0x6
  6560  0126                     	ds	2
  6561  0128                     _vfpfcnvrt$1334:	
  6562                           
  6563                           ; 2 bytes @ 0x8
  6564  0128                     	ds	2
  6565  012A                     _vfpfcnvrt$1339:	
  6566                           
  6567                           ; 2 bytes @ 0xA
  6568  012A                     	ds	2
  6569  012C                     vfpfcnvrt@ct:	
  6570                           
  6571                           ; 3 bytes @ 0xC
  6572  012C                     	ds	3
  6573  012F                     vfpfcnvrt@f:	
  6574                           
  6575                           ; 4 bytes @ 0xF
  6576  012F                     	ds	4
  6577  0133                     vfpfcnvrt@c:	
  6578                           
  6579                           ; 1 bytes @ 0x13
  6580  0133                     	ds	1
  6581  0134                     vfpfcnvrt@fp:	
  6582                           
  6583                           ; 1 bytes @ 0x14
  6584  0134                     	ds	1
  6585  0135                     ?_sprintf:	
  6586  0135                     sprintf@s:	
  6587                           ; 2 bytes @ 0x15
  6588                           
  6589                           
  6590                           ; 2 bytes @ 0x15
  6591  0135                     	ds	2
  6592  0137                     sprintf@fmt:	
  6593                           
  6594                           ; 2 bytes @ 0x17
  6595  0137                     	ds	22
  6596  014D                     sprintf@ap:	
  6597                           
  6598                           ; 1 bytes @ 0x2D
  6599  014D                     	ds	1
  6600  014E                     sprintf@f:	
  6601                           
  6602                           ; 6 bytes @ 0x2E
  6603  014E                     	ds	6
  6604  0154                     ?_statusView:	
  6605  0154                     ?_channelView:	
  6606                           ; 1 bytes @ 0x34
  6607                           
  6608  0154                     ?_channelSetup:	
  6609                           ; 1 bytes @ 0x34
  6610                           
  6611  0154                     ?_setOutputPower:	
  6612                           ; 1 bytes @ 0x34
  6613                           
  6614  0154                     ?_setLensDia:	
  6615                           ; 1 bytes @ 0x34
  6616                           
  6617  0154                     statusView@data:	
  6618                           ; 1 bytes @ 0x34
  6619                           
  6620  0154                     channelView@data:	
  6621                           ; 2 bytes @ 0x34
  6622                           
  6623  0154                     channelSetup@data:	
  6624                           ; 2 bytes @ 0x34
  6625                           
  6626  0154                     setOutputPower@data:	
  6627                           ; 2 bytes @ 0x34
  6628                           
  6629  0154                     setLensDia@data:	
  6630                           ; 2 bytes @ 0x34
  6631                           
  6632                           
  6633                           ; 2 bytes @ 0x34
  6634  0154                     	ds	2
  6635  0156                     ??_channelView:	
  6636  0156                     setLensDia@i:	
  6637                           ; 1 bytes @ 0x36
  6638                           
  6639                           
  6640                           ; 1 bytes @ 0x36
  6641  0156                     	ds	4
  6642  015A                     channelView@tmp0:	
  6643                           
  6644                           ; 4 bytes @ 0x3A
  6645  015A                     	ds	4
  6646  015E                     _channelView$1964:	
  6647                           
  6648                           ; 2 bytes @ 0x3E
  6649  015E                     	ds	2
  6650  0160                     _channelView$1150:	
  6651                           
  6652                           ; 2 bytes @ 0x40
  6653  0160                     	ds	2
  6654  0162                     channelView@n:	
  6655                           
  6656                           ; 1 bytes @ 0x42
  6657  0162                     	ds	1
  6658  0163                     ?_menu:	
  6659  0163                     menu@data:	
  6660                           ; 1 bytes @ 0x43
  6661                           
  6662                           
  6663                           ; 2 bytes @ 0x43
  6664  0163                     	ds	2
  6665  0165                     ??_menu:	
  6666                           
  6667                           ; 1 bytes @ 0x45
  6668  0165                     	ds	4
  6669  0169                     menu@page:	
  6670                           
  6671                           ; 1 bytes @ 0x49
  6672  0169                     	ds	1
  6673  016A                     menu@pb:	
  6674                           
  6675                           ; 1 bytes @ 0x4A
  6676  016A                     	ds	1
  6677  016B                     menu@func:	
  6678                           
  6679                           ; 2 bytes @ 0x4B
  6680  016B                     	ds	2
  6681  016D                     menu@nextState:	
  6682                           
  6683                           ; 1 bytes @ 0x4D
  6684  016D                     	ds	1
  6685                           
  6686                           	psect	cstackBANK1
  6687  00A0                     __pcstackBANK1:	
  6688  00A0                     spinInput@dir:	
  6689  00A0                     floorf@m:	
  6690                           ; 1 bytes @ 0x0
  6691                           
  6692                           
  6693                           ; 4 bytes @ 0x0
  6694  00A0                     	ds	1
  6695  00A1                     spinInput@input:	
  6696                           
  6697                           ; 1 bytes @ 0x1
  6698  00A1                     	ds	3
  6699  00A4                     floorf@e:	
  6700                           
  6701                           ; 2 bytes @ 0x4
  6702  00A4                     	ds	2
  6703  00A6                     floorf@u:	
  6704                           
  6705                           ; 4 bytes @ 0x6
  6706  00A6                     	ds	4
  6707  00AA                     efgtoa@ou:	
  6708                           
  6709                           ; 4 bytes @ 0xA
  6710  00AA                     	ds	4
  6711  00AE                     _efgtoa$1298:	
  6712                           
  6713                           ; 2 bytes @ 0xE
  6714  00AE                     	ds	2
  6715  00B0                     _efgtoa$1299:	
  6716                           
  6717                           ; 2 bytes @ 0x10
  6718  00B0                     	ds	2
  6719  00B2                     _efgtoa$1303:	
  6720                           
  6721                           ; 2 bytes @ 0x12
  6722  00B2                     	ds	2
  6723  00B4                     _efgtoa$1307:	
  6724                           
  6725                           ; 2 bytes @ 0x14
  6726  00B4                     	ds	2
  6727  00B6                     _efgtoa$1308:	
  6728                           
  6729                           ; 2 bytes @ 0x16
  6730  00B6                     	ds	2
  6731  00B8                     _efgtoa$1309:	
  6732                           
  6733                           ; 2 bytes @ 0x18
  6734  00B8                     	ds	2
  6735  00BA                     efgtoa@t:	
  6736                           
  6737                           ; 2 bytes @ 0x1A
  6738  00BA                     	ds	2
  6739  00BC                     efgtoa@pp:	
  6740                           
  6741                           ; 2 bytes @ 0x1C
  6742  00BC                     	ds	2
  6743  00BE                     efgtoa@m:	
  6744                           
  6745                           ; 2 bytes @ 0x1E
  6746  00BE                     	ds	2
  6747  00C0                     efgtoa@ne:	
  6748                           
  6749                           ; 2 bytes @ 0x20
  6750  00C0                     	ds	2
  6751  00C2                     efgtoa@d:	
  6752                           
  6753                           ; 2 bytes @ 0x22
  6754  00C2                     	ds	2
  6755  00C4                     efgtoa@fp:	
  6756                           
  6757                           ; 1 bytes @ 0x24
  6758  00C4                     	ds	1
  6759  00C5                     efgtoa@sign:	
  6760                           
  6761                           ; 2 bytes @ 0x25
  6762  00C5                     	ds	2
  6763  00C7                     efgtoa@p:	
  6764                           
  6765                           ; 2 bytes @ 0x27
  6766  00C7                     	ds	2
  6767  00C9                     efgtoa@nmode:	
  6768                           
  6769                           ; 1 bytes @ 0x29
  6770  00C9                     	ds	1
  6771  00CA                     efgtoa@w:	
  6772                           
  6773                           ; 2 bytes @ 0x2A
  6774  00CA                     	ds	2
  6775  00CC                     efgtoa@mode:	
  6776                           
  6777                           ; 1 bytes @ 0x2C
  6778  00CC                     	ds	1
  6779  00CD                     efgtoa@h:	
  6780                           
  6781                           ; 4 bytes @ 0x2D
  6782  00CD                     	ds	4
  6783  00D1                     efgtoa@l:	
  6784                           
  6785                           ; 4 bytes @ 0x31
  6786  00D1                     	ds	4
  6787  00D5                     efgtoa@i:	
  6788                           
  6789                           ; 2 bytes @ 0x35
  6790  00D5                     	ds	2
  6791  00D7                     efgtoa@g:	
  6792                           
  6793                           ; 4 bytes @ 0x37
  6794  00D7                     	ds	4
  6795  00DB                     efgtoa@e:	
  6796                           
  6797                           ; 2 bytes @ 0x3B
  6798  00DB                     	ds	2
  6799  00DD                     efgtoa@n:	
  6800                           
  6801                           ; 2 bytes @ 0x3D
  6802  00DD                     	ds	2
  6803  00DF                     efgtoa@u:	
  6804                           
  6805                           ; 4 bytes @ 0x3F
  6806  00DF                     	ds	4
  6807  00E3                     ?_vfpfcnvrt:	
  6808  00E3                     vfpfcnvrt@fmt:	
  6809                           ; 2 bytes @ 0x43
  6810                           
  6811                           
  6812                           ; 1 bytes @ 0x43
  6813  00E3                     	ds	1
  6814  00E4                     vfpfcnvrt@ap:	
  6815                           
  6816                           ; 1 bytes @ 0x44
  6817  00E4                     	ds	1
  6818  00E5                     ??_vfpfcnvrt:	
  6819                           
  6820                           ; 1 bytes @ 0x45
  6821  00E5                     	ds	4
  6822  00E9                     ?_vfprintf:	
  6823  00E9                     vfprintf@fmt:	
  6824                           ; 2 bytes @ 0x49
  6825                           
  6826                           
  6827                           ; 2 bytes @ 0x49
  6828  00E9                     	ds	2
  6829  00EB                     vfprintf@ap:	
  6830                           
  6831                           ; 1 bytes @ 0x4B
  6832  00EB                     	ds	1
  6833  00EC                     ??_vfprintf:	
  6834                           
  6835                           ; 1 bytes @ 0x4C
  6836  00EC                     	ds	1
  6837  00ED                     vfprintf@fp:	
  6838                           
  6839                           ; 1 bytes @ 0x4D
  6840  00ED                     	ds	1
  6841  00EE                     vfprintf@cfmt:	
  6842                           
  6843                           ; 2 bytes @ 0x4E
  6844  00EE                     	ds	2
  6845                           
  6846                           	psect	cstackCOMMON
  6847  0070                     __pcstackCOMMON:	
  6848  0070                     ?_initialize:	
  6849  0070                     ?_OLED_init:	
  6850                           ; 1 bytes @ 0x0
  6851                           
  6852  0070                     ?_OLED_loadSpecialChars:	
  6853                           ; 1 bytes @ 0x0
  6854                           
  6855  0070                     ?_OLED_returnHome:	
  6856                           ; 1 bytes @ 0x0
  6857                           
  6858  0070                     ?_OLED_clearDisplay:	
  6859                           ; 1 bytes @ 0x0
  6860                           
  6861  0070                     ?_uartSendByte:	
  6862                           ; 1 bytes @ 0x0
  6863                           
  6864  0070                     ?_uartIsDataReady:	
  6865                           ; 1 bytes @ 0x0
  6866                           
  6867  0070                     ?_getDataPacket:	
  6868                           ; 1 bytes @ 0x0
  6869                           
  6870  0070                     ?_pushButtonISR:	
  6871                           ; 1 bytes @ 0x0
  6872                           
  6873  0070                     ??_pushButtonISR:	
  6874                           ; 1 bytes @ 0x0
  6875                           
  6876  0070                     ?_rotISR:	
  6877                           ; 1 bytes @ 0x0
  6878                           
  6879  0070                     ??_rotISR:	
  6880                           ; 1 bytes @ 0x0
  6881                           
  6882  0070                     ?_uartReceiveISR:	
  6883                           ; 1 bytes @ 0x0
  6884                           
  6885  0070                     ?_strncpy:	
  6886                           ; 1 bytes @ 0x0
  6887                           
  6888  0070                     ?_menuError:	
  6889                           ; 1 bytes @ 0x0
  6890                           
  6891  0070                     ?_returnToPage:	
  6892                           ; 1 bytes @ 0x0
  6893                           
  6894  0070                     ?_putch:	
  6895                           ; 1 bytes @ 0x0
  6896                           
  6897  0070                     ?_main:	
  6898                           ; 1 bytes @ 0x0
  6899                           
  6900  0070                     ?_OLED_pulseEnable:	
  6901                           ; 1 bytes @ 0x0
  6902                           
  6903  0070                     ?_OLED_write4bits:	
  6904                           ; 1 bytes @ 0x0
  6905                           
  6906  0070                     ?_OLED_waitForReady:	
  6907                           ; 1 bytes @ 0x0
  6908                           
  6909  0070                     ?_OLED_command:	
  6910                           ; 1 bytes @ 0x0
  6911                           
  6912  0070                     ?_OLED_write:	
  6913                           ; 1 bytes @ 0x0
  6914                           
  6915  0070                     ?_OLED_scrollDisplayLeft:	
  6916                           ; 1 bytes @ 0x0
  6917                           
  6918  0070                     ?_OLED_scrollDisplayRight:	
  6919                           ; 1 bytes @ 0x0
  6920                           
  6921  0070                     ?_get10msTick:	
  6922                           ; 1 bytes @ 0x0
  6923                           
  6924  0070                     ??_get10msTick:	
  6925                           ; 1 bytes @ 0x0
  6926                           
  6927  0070                     ?_reset10msTick:	
  6928                           ; 1 bytes @ 0x0
  6929                           
  6930  0070                     ??_reset10msTick:	
  6931                           ; 1 bytes @ 0x0
  6932                           
  6933  0070                     ?_ISR:	
  6934                           ; 1 bytes @ 0x0
  6935                           
  6936  0070                     ?_getRotDir:	
  6937                           ; 1 bytes @ 0x0
  6938                           
  6939  0070                     ?_getPB:	
  6940                           ; 1 bytes @ 0x0
  6941                           
  6942  0070                     pushButtonISR@time:	
  6943                           ; 1 bytes @ 0x0
  6944                           
  6945  0070                     putch@c:	
  6946                           ; 1 bytes @ 0x0
  6947                           
  6948  0070                     strncpy@s:	
  6949                           ; 1 bytes @ 0x0
  6950                           
  6951                           
  6952                           ; 1 bytes @ 0x0
  6953  0070                     	ds	1
  6954  0071                     strncpy@n:	
  6955                           
  6956                           ; 2 bytes @ 0x1
  6957  0071                     	ds	2
  6958  0073                     ??_strncpy:	
  6959  0073                     strncpy@d:	
  6960                           ; 1 bytes @ 0x3
  6961                           
  6962                           
  6963                           ; 1 bytes @ 0x3
  6964  0073                     	ds	1
  6965  0074                     strncpy@cp:	
  6966                           
  6967                           ; 1 bytes @ 0x4
  6968  0074                     	ds	1
  6969  0075                     ??_uartReceiveISR:	
  6970                           
  6971                           ; 1 bytes @ 0x5
  6972  0075                     	ds	1
  6973  0076                     rotISR@input:	
  6974                           
  6975                           ; 1 bytes @ 0x6
  6976  0076                     	ds	1
  6977  0077                     ??_ISR:	
  6978                           
  6979                           ; 1 bytes @ 0x7
  6980  0077                     	ds	4
  6981                           
  6982                           	psect	cstackBANK0
  6983  0020                     __pcstackBANK0:	
  6984  0020                     ?___fleq:	
  6985  0020                     ??_initialize:	
  6986                           ; 1 bit 
  6987                           
  6988  0020                     ??_uartSendByte:	
  6989                           ; 1 bytes @ 0x0
  6990                           
  6991  0020                     ??_uartIsDataReady:	
  6992                           ; 1 bytes @ 0x0
  6993                           
  6994  0020                     ??_getDataPacket:	
  6995                           ; 1 bytes @ 0x0
  6996                           
  6997  0020                     ??_putch:	
  6998                           ; 1 bytes @ 0x0
  6999                           
  7000  0020                     ??_OLED_pulseEnable:	
  7001                           ; 1 bytes @ 0x0
  7002                           
  7003  0020                     ??_OLED_write4bits:	
  7004                           ; 1 bytes @ 0x0
  7005                           
  7006  0020                     ??_OLED_waitForReady:	
  7007                           ; 1 bytes @ 0x0
  7008                           
  7009  0020                     ??_getRotDir:	
  7010                           ; 1 bytes @ 0x0
  7011                           
  7012  0020                     ??_getPB:	
  7013                           ; 1 bytes @ 0x0
  7014                           
  7015  0020                     ?_fputc:	
  7016                           ; 1 bytes @ 0x0
  7017                           
  7018  0020                     ?_strlen:	
  7019                           ; 2 bytes @ 0x0
  7020                           
  7021  0020                     ?___fpclassifyf:	
  7022                           ; 2 bytes @ 0x0
  7023                           
  7024  0020                     ?_isupper:	
  7025                           ; 2 bytes @ 0x0
  7026                           
  7027  0020                     ?_isdigit:	
  7028                           ; 2 bytes @ 0x0
  7029                           
  7030  0020                     ?_strncmp:	
  7031                           ; 2 bytes @ 0x0
  7032                           
  7033  0020                     ?__Umul8_16:	
  7034                           ; 2 bytes @ 0x0
  7035                           
  7036  0020                     ?_isspace:	
  7037                           ; 2 bytes @ 0x0
  7038                           
  7039  0020                     ?_adcGetConversion:	
  7040                           ; 2 bytes @ 0x0
  7041                           
  7042  0020                     ?___wmul:	
  7043                           ; 2 bytes @ 0x0
  7044                           
  7045  0020                     ?___awdiv:	
  7046                           ; 2 bytes @ 0x0
  7047                           
  7048  0020                     ?___awmod:	
  7049                           ; 2 bytes @ 0x0
  7050                           
  7051  0020                     ?_timeNow:	
  7052                           ; 2 bytes @ 0x0
  7053                           
  7054  0020                     ?___lmul:	
  7055                           ; 4 bytes @ 0x0
  7056                           
  7057  0020                     ?___aldiv:	
  7058                           ; 4 bytes @ 0x0
  7059                           
  7060  0020                     ?___almod:	
  7061                           ; 4 bytes @ 0x0
  7062                           
  7063  0020                     ?___flneg:	
  7064                           ; 4 bytes @ 0x0
  7065                           
  7066  0020                     ?___fltol:	
  7067                           ; 4 bytes @ 0x0
  7068                           
  7069  0020                     ?___xxtofl:	
  7070                           ; 4 bytes @ 0x0
  7071                           
  7072  0020                     OLED_waitForReady@busy:	
  7073                           ; 4 bytes @ 0x0
  7074                           
  7075  0020                     getRotDir@ret:	
  7076                           ; 1 bytes @ 0x0
  7077                           
  7078  0020                     getPB@ret:	
  7079                           ; 1 bytes @ 0x0
  7080                           
  7081  0020                     uartIsDataReady@ret:	
  7082                           ; 1 bytes @ 0x0
  7083                           
  7084  0020                     uartSendByte@s:	
  7085                           ; 1 bytes @ 0x0
  7086                           
  7087  0020                     __Umul8_16@multiplicand:	
  7088                           ; 1 bytes @ 0x0
  7089                           
  7090  0020                     ___wmul@multiplier:	
  7091                           ; 1 bytes @ 0x0
  7092                           
  7093  0020                     ___awdiv@divisor:	
  7094                           ; 2 bytes @ 0x0
  7095                           
  7096  0020                     ___awmod@divisor:	
  7097                           ; 2 bytes @ 0x0
  7098                           
  7099  0020                     isdigit@c:	
  7100                           ; 2 bytes @ 0x0
  7101                           
  7102  0020                     isspace@c:	
  7103                           ; 2 bytes @ 0x0
  7104                           
  7105  0020                     isupper@c:	
  7106                           ; 2 bytes @ 0x0
  7107                           
  7108  0020                     fputc@c:	
  7109                           ; 2 bytes @ 0x0
  7110                           
  7111  0020                     strlen@s:	
  7112                           ; 2 bytes @ 0x0
  7113                           
  7114  0020                     strncmp@_r:	
  7115                           ; 2 bytes @ 0x0
  7116                           
  7117  0020                     ___lmul@multiplier:	
  7118                           ; 2 bytes @ 0x0
  7119                           
  7120  0020                     ___aldiv@divisor:	
  7121                           ; 4 bytes @ 0x0
  7122                           
  7123  0020                     ___almod@divisor:	
  7124                           ; 4 bytes @ 0x0
  7125                           
  7126  0020                     ___fleq@ff1:	
  7127                           ; 4 bytes @ 0x0
  7128                           
  7129  0020                     ___flneg@f1:	
  7130                           ; 4 bytes @ 0x0
  7131                           
  7132  0020                     ___fltol@f1:	
  7133                           ; 4 bytes @ 0x0
  7134                           
  7135  0020                     ___xxtofl@val:	
  7136                           ; 4 bytes @ 0x0
  7137                           
  7138  0020                     ___fpclassifyf@x:	
  7139                           ; 4 bytes @ 0x0
  7140                           
  7141                           
  7142                           ; 4 bytes @ 0x0
  7143  0020                     	ds	2
  7144  0022                     ??_strlen:	
  7145  0022                     ??_isupper:	
  7146                           ; 1 bytes @ 0x2
  7147                           
  7148  0022                     ??_isdigit:	
  7149                           ; 1 bytes @ 0x2
  7150                           
  7151  0022                     ??_isspace:	
  7152                           ; 1 bytes @ 0x2
  7153                           
  7154  0022                     ??_adcGetConversion:	
  7155                           ; 1 bytes @ 0x2
  7156                           
  7157  0022                     OLED_write4bits@value:	
  7158                           ; 1 bytes @ 0x2
  7159                           
  7160  0022                     fputc@fp:	
  7161                           ; 1 bytes @ 0x2
  7162                           
  7163  0022                     ___wmul@multiplicand:	
  7164                           ; 1 bytes @ 0x2
  7165                           
  7166  0022                     ___awdiv@dividend:	
  7167                           ; 2 bytes @ 0x2
  7168                           
  7169  0022                     ___awmod@dividend:	
  7170                           ; 2 bytes @ 0x2
  7171                           
  7172  0022                     strncmp@n:	
  7173                           ; 2 bytes @ 0x2
  7174                           
  7175                           
  7176                           ; 2 bytes @ 0x2
  7177  0022                     	ds	1
  7178  0023                     ??_fputc:	
  7179  0023                     ??__Umul8_16:	
  7180                           ; 1 bytes @ 0x3
  7181                           
  7182  0023                     ?_OLED_send:	
  7183                           ; 1 bytes @ 0x3
  7184                           
  7185  0023                     adcGetConversion@channel:	
  7186                           ; 1 bytes @ 0x3
  7187                           
  7188  0023                     OLED_send@mode:	
  7189                           ; 1 bytes @ 0x3
  7190                           
  7191  0023                     strlen@a:	
  7192                           ; 1 bytes @ 0x3
  7193                           
  7194  0023                     __Umul8_16@product:	
  7195                           ; 2 bytes @ 0x3
  7196                           
  7197                           
  7198                           ; 2 bytes @ 0x3
  7199  0023                     	ds	1
  7200  0024                     ??_timeNow:	
  7201  0024                     ??___fpclassifyf:	
  7202                           ; 1 bytes @ 0x4
  7203                           
  7204  0024                     ??_strncmp:	
  7205                           ; 1 bytes @ 0x4
  7206                           
  7207  0024                     ??_OLED_send:	
  7208                           ; 1 bytes @ 0x4
  7209                           
  7210  0024                     ??___wmul:	
  7211                           ; 1 bytes @ 0x4
  7212                           
  7213  0024                     ??___awdiv:	
  7214                           ; 1 bytes @ 0x4
  7215                           
  7216  0024                     ??___awmod:	
  7217                           ; 1 bytes @ 0x4
  7218                           
  7219  0024                     ??___flneg:	
  7220                           ; 1 bytes @ 0x4
  7221                           
  7222  0024                     ??___fltol:	
  7223                           ; 1 bytes @ 0x4
  7224                           
  7225  0024                     ??___xxtofl:	
  7226                           ; 1 bytes @ 0x4
  7227                           
  7228  0024                     ?_tolower:	
  7229                           ; 1 bytes @ 0x4
  7230                           
  7231  0024                     ?_timeSince:	
  7232                           ; 2 bytes @ 0x4
  7233                           
  7234  0024                     OLED_send@value:	
  7235                           ; 4 bytes @ 0x4
  7236                           
  7237  0024                     ___awdiv@counter:	
  7238                           ; 1 bytes @ 0x4
  7239                           
  7240  0024                     ___awmod@counter:	
  7241                           ; 1 bytes @ 0x4
  7242                           
  7243  0024                     _isspace$1677:	
  7244                           ; 1 bytes @ 0x4
  7245                           
  7246  0024                     ___wmul@product:	
  7247                           ; 1 bytes @ 0x4
  7248                           
  7249  0024                     tolower@c:	
  7250                           ; 2 bytes @ 0x4
  7251                           
  7252  0024                     timeSince@since:	
  7253                           ; 2 bytes @ 0x4
  7254                           
  7255  0024                     ___lmul@multiplicand:	
  7256                           ; 4 bytes @ 0x4
  7257                           
  7258  0024                     ___aldiv@dividend:	
  7259                           ; 4 bytes @ 0x4
  7260                           
  7261  0024                     ___almod@dividend:	
  7262                           ; 4 bytes @ 0x4
  7263                           
  7264  0024                     ___fleq@ff2:	
  7265                           ; 4 bytes @ 0x4
  7266                           
  7267                           
  7268                           ; 4 bytes @ 0x4
  7269  0024                     	ds	1
  7270  0025                     ??_OLED_command:	
  7271  0025                     ??_OLED_write:	
  7272                           ; 1 bytes @ 0x5
  7273                           
  7274  0025                     ?_strcpy:	
  7275                           ; 1 bytes @ 0x5
  7276                           
  7277  0025                     OLED_command@value:	
  7278                           ; 2 bytes @ 0x5
  7279                           
  7280  0025                     OLED_write@value:	
  7281                           ; 1 bytes @ 0x5
  7282                           
  7283  0025                     ___awdiv@sign:	
  7284                           ; 1 bytes @ 0x5
  7285                           
  7286  0025                     ___awmod@sign:	
  7287                           ; 1 bytes @ 0x5
  7288                           
  7289  0025                     strncmp@_l:	
  7290                           ; 1 bytes @ 0x5
  7291                           
  7292  0025                     strcpy@dest:	
  7293                           ; 1 bytes @ 0x5
  7294                           
  7295  0025                     __Umul8_16@word_mpld:	
  7296                           ; 2 bytes @ 0x5
  7297                           
  7298                           
  7299                           ; 2 bytes @ 0x5
  7300  0025                     	ds	1
  7301  0026                     ??_OLED_init:	
  7302  0026                     ??_OLED_loadSpecialChars:	
  7303                           ; 1 bytes @ 0x6
  7304                           
  7305  0026                     ??_OLED_returnHome:	
  7306                           ; 1 bytes @ 0x6
  7307                           
  7308  0026                     ??_OLED_clearDisplay:	
  7309                           ; 1 bytes @ 0x6
  7310                           
  7311  0026                     ?_getNextState:	
  7312                           ; 1 bytes @ 0x6
  7313                           
  7314  0026                     ??_returnToPage:	
  7315                           ; 1 bytes @ 0x6
  7316                           
  7317  0026                     ?_paging:	
  7318                           ; 1 bytes @ 0x6
  7319                           
  7320  0026                     ??_tolower:	
  7321                           ; 1 bytes @ 0x6
  7322                           
  7323  0026                     ??_OLED_scrollDisplayLeft:	
  7324                           ; 1 bytes @ 0x6
  7325                           
  7326  0026                     ??_OLED_scrollDisplayRight:	
  7327                           ; 1 bytes @ 0x6
  7328                           
  7329  0026                     ?_OLED_print_xy:	
  7330                           ; 1 bytes @ 0x6
  7331                           
  7332  0026                     ?_getStateFunc:	
  7333                           ; 1 bytes @ 0x6
  7334                           
  7335  0026                     ?_atoi:	
  7336                           ; 2 bytes @ 0x6
  7337                           
  7338  0026                     OLED_print_xy@row:	
  7339                           ; 2 bytes @ 0x6
  7340                           
  7341  0026                     getNextState@page:	
  7342                           ; 1 bytes @ 0x6
  7343                           
  7344  0026                     paging@lastPage:	
  7345                           ; 1 bytes @ 0x6
  7346                           
  7347  0026                     returnToPage@page:	
  7348                           ; 1 bytes @ 0x6
  7349                           
  7350  0026                     ___awdiv@quotient:	
  7351                           ; 1 bytes @ 0x6
  7352                           
  7353  0026                     atoi@s:	
  7354                           ; 2 bytes @ 0x6
  7355                           
  7356  0026                     strncmp@r:	
  7357                           ; 2 bytes @ 0x6
  7358                           
  7359                           
  7360                           ; 2 bytes @ 0x6
  7361  0026                     	ds	1
  7362  0027                     ??_paging:	
  7363  0027                     getNextState@pb:	
  7364                           ; 1 bytes @ 0x7
  7365                           
  7366  0027                     returnToPage@n:	
  7367                           ; 1 bytes @ 0x7
  7368                           
  7369  0027                     __Umul8_16@multiplier:	
  7370                           ; 1 bytes @ 0x7
  7371                           
  7372  0027                     OLED_print_xy@s:	
  7373                           ; 1 bytes @ 0x7
  7374                           
  7375  0027                     strcpy@src:	
  7376                           ; 2 bytes @ 0x7
  7377                           
  7378  0027                     OLED_loadSpecialChars@special:	
  7379                           ; 2 bytes @ 0x7
  7380                           
  7381                           
  7382                           ; 48 bytes @ 0x7
  7383  0027                     	ds	1
  7384  0028                     ??_timeSince:	
  7385  0028                     ??_getStateFunc:	
  7386                           ; 1 bytes @ 0x8
  7387                           
  7388  0028                     ??_getNextState:	
  7389                           ; 1 bytes @ 0x8
  7390                           
  7391  0028                     ??_atoi:	
  7392                           ; 1 bytes @ 0x8
  7393                           
  7394  0028                     ??___lmul:	
  7395                           ; 1 bytes @ 0x8
  7396                           
  7397  0028                     ??___aldiv:	
  7398                           ; 1 bytes @ 0x8
  7399                           
  7400  0028                     ??___almod:	
  7401                           ; 1 bytes @ 0x8
  7402                           
  7403  0028                     ??___fleq:	
  7404                           ; 1 bytes @ 0x8
  7405                           
  7406  0028                     ?_fputs:	
  7407                           ; 1 bytes @ 0x8
  7408                           
  7409  0028                     ?_stoa:	
  7410                           ; 2 bytes @ 0x8
  7411                           
  7412  0028                     ___aldiv@counter:	
  7413                           ; 2 bytes @ 0x8
  7414                           
  7415  0028                     ___almod@counter:	
  7416                           ; 1 bytes @ 0x8
  7417                           
  7418  0028                     ___fltol@sign1:	
  7419                           ; 1 bytes @ 0x8
  7420                           
  7421  0028                     ___xxtofl@sign:	
  7422                           ; 1 bytes @ 0x8
  7423                           
  7424  0028                     fputs@fp:	
  7425                           ; 1 bytes @ 0x8
  7426                           
  7427  0028                     strncmp@l:	
  7428                           ; 1 bytes @ 0x8
  7429                           
  7430  0028                     stoa@s:	
  7431                           ; 1 bytes @ 0x8
  7432                           
  7433  0028                     ___fpclassifyf@e:	
  7434                           ; 2 bytes @ 0x8
  7435                           
  7436  0028                     _tolower$1775:	
  7437                           ; 2 bytes @ 0x8
  7438                           
  7439  0028                     ___lmul@product:	
  7440                           ; 2 bytes @ 0x8
  7441                           
  7442                           
  7443                           ; 4 bytes @ 0x8
  7444  0028                     	ds	1
  7445  0029                     ??_strcpy:	
  7446  0029                     ??_fputs:	
  7447                           ; 1 bytes @ 0x9
  7448                           
  7449  0029                     ??_OLED_print_xy:	
  7450                           ; 1 bytes @ 0x9
  7451                           
  7452  0029                     getStateFunc@state:	
  7453                           ; 1 bytes @ 0x9
  7454                           
  7455  0029                     getNextState@state:	
  7456                           ; 1 bytes @ 0x9
  7457                           
  7458  0029                     paging@currentPage:	
  7459                           ; 1 bytes @ 0x9
  7460                           
  7461  0029                     ___aldiv@sign:	
  7462                           ; 1 bytes @ 0x9
  7463                           
  7464  0029                     ___almod@sign:	
  7465                           ; 1 bytes @ 0x9
  7466                           
  7467  0029                     ___fltol@exp1:	
  7468                           ; 1 bytes @ 0x9
  7469                           
  7470  0029                     ___xxtofl@exp:	
  7471                           ; 1 bytes @ 0x9
  7472                           
  7473                           
  7474                           ; 1 bytes @ 0x9
  7475  0029                     	ds	1
  7476  002A                     ??_stoa:	
  7477  002A                     ?_abs:	
  7478                           ; 1 bytes @ 0xA
  7479                           
  7480  002A                     getStateFunc@n:	
  7481                           ; 2 bytes @ 0xA
  7482                           
  7483  002A                     getNextState@n:	
  7484                           ; 1 bytes @ 0xA
  7485                           
  7486  002A                     paging@dir:	
  7487                           ; 1 bytes @ 0xA
  7488                           
  7489  002A                     fputs@c:	
  7490                           ; 1 bytes @ 0xA
  7491                           
  7492  002A                     abs@a:	
  7493                           ; 1 bytes @ 0xA
  7494                           
  7495  002A                     OLED_print_xy@row_offsets:	
  7496                           ; 2 bytes @ 0xA
  7497                           
  7498  002A                     ___aldiv@quotient:	
  7499                           ; 4 bytes @ 0xA
  7500                           
  7501  002A                     ___xxtofl@arg:	
  7502                           ; 4 bytes @ 0xA
  7503                           
  7504  002A                     ___fpclassifyf@u:	
  7505                           ; 4 bytes @ 0xA
  7506                           
  7507                           
  7508                           ; 4 bytes @ 0xA
  7509  002A                     	ds	1
  7510  002B                     paging@n:	
  7511  002B                     atoi@neg:	
  7512                           ; 1 bytes @ 0xB
  7513                           
  7514  002B                     fputs@i:	
  7515                           ; 2 bytes @ 0xB
  7516                           
  7517  002B                     stoa@nuls:	
  7518                           ; 2 bytes @ 0xB
  7519                           
  7520                           
  7521                           ; 7 bytes @ 0xB
  7522  002B                     	ds	1
  7523  002C                     ??_abs:	
  7524  002C                     ?_ema:	
  7525                           ; 1 bytes @ 0xC
  7526                           
  7527  002C                     ema@in:	
  7528                           ; 2 bytes @ 0xC
  7529                           
  7530                           
  7531                           ; 2 bytes @ 0xC
  7532  002C                     	ds	1
  7533  002D                     fputs@s:	
  7534  002D                     _atoi$1646:	
  7535                           ; 1 bytes @ 0xD
  7536                           
  7537  002D                     strcpy@s:	
  7538                           ; 2 bytes @ 0xD
  7539                           
  7540                           
  7541                           ; 2 bytes @ 0xD
  7542  002D                     	ds	1
  7543  002E                     ?_pad:	
  7544  002E                     ?___flmul:	
  7545                           ; 2 bytes @ 0xE
  7546                           
  7547  002E                     OLED_print_xy@col:	
  7548                           ; 4 bytes @ 0xE
  7549                           
  7550  002E                     pad@buf:	
  7551                           ; 1 bytes @ 0xE
  7552                           
  7553  002E                     ema@average:	
  7554                           ; 1 bytes @ 0xE
  7555                           
  7556  002E                     ___flmul@b:	
  7557                           ; 2 bytes @ 0xE
  7558                           
  7559                           
  7560                           ; 4 bytes @ 0xE
  7561  002E                     	ds	1
  7562  002F                     ??_menuError:	
  7563  002F                     pad@p:	
  7564                           ; 1 bytes @ 0xF
  7565                           
  7566  002F                     _atoi$1648:	
  7567                           ; 2 bytes @ 0xF
  7568                           
  7569  002F                     strcpy@d:	
  7570                           ; 2 bytes @ 0xF
  7571                           
  7572                           
  7573                           ; 2 bytes @ 0xF
  7574  002F                     	ds	1
  7575  0030                     ema@alpha:	
  7576  0030                     timeSince@now:	
  7577                           ; 4 bytes @ 0x10
  7578                           
  7579                           
  7580                           ; 4 bytes @ 0x10
  7581  0030                     	ds	1
  7582  0031                     ?_strcat:	
  7583  0031                     ??_pad:	
  7584                           ; 1 bytes @ 0x11
  7585                           
  7586  0031                     _atoi$1647:	
  7587                           ; 1 bytes @ 0x11
  7588                           
  7589  0031                     strcat@src:	
  7590                           ; 1 bytes @ 0x11
  7591                           
  7592                           
  7593                           ; 1 bytes @ 0x11
  7594  0031                     	ds	1
  7595  0032                     ??_strcat:	
  7596  0032                     pad@i:	
  7597                           ; 1 bytes @ 0x12
  7598                           
  7599  0032                     stoa@i:	
  7600                           ; 2 bytes @ 0x12
  7601                           
  7602  0032                     atoi@n:	
  7603                           ; 2 bytes @ 0x12
  7604                           
  7605  0032                     ___flmul@a:	
  7606                           ; 2 bytes @ 0x12
  7607                           
  7608                           
  7609                           ; 4 bytes @ 0x12
  7610  0032                     	ds	2
  7611  0034                     ??_ema:	
  7612  0034                     strcat@dest:	
  7613                           ; 1 bytes @ 0x14
  7614                           
  7615  0034                     pad@w:	
  7616                           ; 1 bytes @ 0x14
  7617                           
  7618  0034                     stoa@w:	
  7619                           ; 2 bytes @ 0x14
  7620                           
  7621                           
  7622                           ; 2 bytes @ 0x14
  7623  0034                     	ds	2
  7624  0036                     ??___flmul:	
  7625  0036                     pad@fp:	
  7626                           ; 1 bytes @ 0x16
  7627                           
  7628  0036                     stoa@fp:	
  7629                           ; 1 bytes @ 0x16
  7630                           
  7631                           
  7632                           ; 1 bytes @ 0x16
  7633  0036                     	ds	1
  7634  0037                     ?_dtoa:	
  7635  0037                     stoa@cp:	
  7636                           ; 2 bytes @ 0x17
  7637                           
  7638  0037                     dtoa@d:	
  7639                           ; 2 bytes @ 0x17
  7640                           
  7641                           
  7642                           ; 4 bytes @ 0x17
  7643  0037                     	ds	1
  7644  0038                     ema@tmp:	
  7645                           
  7646                           ; 4 bytes @ 0x18
  7647  0038                     	ds	1
  7648  0039                     stoa@p:	
  7649                           
  7650                           ; 2 bytes @ 0x19
  7651  0039                     	ds	1
  7652  003A                     ___flmul@sign:	
  7653                           
  7654                           ; 1 bytes @ 0x1A
  7655  003A                     	ds	1
  7656  003B                     ??_dtoa:	
  7657  003B                     ___flmul@aexp:	
  7658                           ; 1 bytes @ 0x1B
  7659                           
  7660  003B                     stoa@l:	
  7661                           ; 1 bytes @ 0x1B
  7662                           
  7663                           
  7664                           ; 2 bytes @ 0x1B
  7665  003B                     	ds	1
  7666  003C                     _dtoa$1274:	
  7667  003C                     ___flmul@grs:	
  7668                           ; 2 bytes @ 0x1C
  7669                           
  7670                           
  7671                           ; 4 bytes @ 0x1C
  7672  003C                     	ds	2
  7673  003E                     dtoa@fp:	
  7674                           
  7675                           ; 1 bytes @ 0x1E
  7676  003E                     	ds	1
  7677  003F                     dtoa@p:	
  7678                           
  7679                           ; 2 bytes @ 0x1F
  7680  003F                     	ds	1
  7681  0040                     ___flmul@bexp:	
  7682                           
  7683                           ; 1 bytes @ 0x20
  7684  0040                     	ds	1
  7685  0041                     dtoa@w:	
  7686  0041                     ___flmul@prod:	
  7687                           ; 2 bytes @ 0x21
  7688                           
  7689                           
  7690                           ; 4 bytes @ 0x21
  7691  0041                     	ds	2
  7692  0043                     dtoa@s:	
  7693                           
  7694                           ; 2 bytes @ 0x23
  7695  0043                     	ds	2
  7696  0045                     ___flmul@temp:	
  7697  0045                     dtoa@n:	
  7698                           ; 2 bytes @ 0x25
  7699                           
  7700                           
  7701                           ; 4 bytes @ 0x25
  7702  0045                     	ds	2
  7703  0047                     ?___flge:	
  7704  0047                     ?___fladd:	
  7705                           ; 1 bit 
  7706                           
  7707  0047                     ?___fldiv:	
  7708                           ; 4 bytes @ 0x27
  7709                           
  7710  0047                     ___flge@ff1:	
  7711                           ; 4 bytes @ 0x27
  7712                           
  7713  0047                     ___fladd@b:	
  7714                           ; 4 bytes @ 0x27
  7715                           
  7716  0047                     ___fldiv@a:	
  7717                           ; 4 bytes @ 0x27
  7718                           
  7719                           
  7720                           ; 4 bytes @ 0x27
  7721  0047                     	ds	2
  7722  0049                     dtoa@i:	
  7723                           
  7724                           ; 2 bytes @ 0x29
  7725  0049                     	ds	2
  7726  004B                     ___flge@ff2:	
  7727  004B                     ___fladd@a:	
  7728                           ; 4 bytes @ 0x2B
  7729                           
  7730  004B                     ___fldiv@b:	
  7731                           ; 4 bytes @ 0x2B
  7732                           
  7733                           
  7734                           ; 4 bytes @ 0x2B
  7735  004B                     	ds	4
  7736  004F                     ??___flge:	
  7737  004F                     ??___fladd:	
  7738                           ; 1 bytes @ 0x2F
  7739                           
  7740  004F                     ??___fldiv:	
  7741                           ; 1 bytes @ 0x2F
  7742                           
  7743                           
  7744                           ; 1 bytes @ 0x2F
  7745  004F                     	ds	4
  7746  0053                     ?_checkSensor:	
  7747  0053                     checkSensor@data:	
  7748                           ; 1 bytes @ 0x33
  7749                           
  7750  0053                     ___fldiv@rem:	
  7751                           ; 2 bytes @ 0x33
  7752                           
  7753                           
  7754                           ; 4 bytes @ 0x33
  7755  0053                     	ds	2
  7756  0055                     ??_checkSensor:	
  7757                           
  7758                           ; 1 bytes @ 0x35
  7759  0055                     	ds	2
  7760  0057                     OLED_loadSpecialChars@n:	
  7761  0057                     ___fladd@signs:	
  7762                           ; 1 bytes @ 0x37
  7763                           
  7764  0057                     ___fldiv@sign:	
  7765                           ; 1 bytes @ 0x37
  7766                           
  7767                           
  7768                           ; 1 bytes @ 0x37
  7769  0057                     	ds	1
  7770  0058                     ___fladd@aexp:	
  7771  0058                     ___fldiv@new_exp:	
  7772                           ; 1 bytes @ 0x38
  7773                           
  7774                           
  7775                           ; 2 bytes @ 0x38
  7776  0058                     	ds	1
  7777  0059                     checkSensor@dp:	
  7778  0059                     ___fladd@bexp:	
  7779                           ; 1 bytes @ 0x39
  7780                           
  7781                           
  7782                           ; 1 bytes @ 0x39
  7783  0059                     	ds	1
  7784  005A                     ___fladd@grs:	
  7785  005A                     ___fldiv@grs:	
  7786                           ; 1 bytes @ 0x3A
  7787                           
  7788                           
  7789                           ; 4 bytes @ 0x3A
  7790  005A                     	ds	1
  7791  005B                     ?___flsub:	
  7792  005B                     ___flsub@a:	
  7793                           ; 4 bytes @ 0x3B
  7794                           
  7795                           
  7796                           ; 4 bytes @ 0x3B
  7797  005B                     	ds	3
  7798  005E                     ___fldiv@bexp:	
  7799                           
  7800                           ; 1 bytes @ 0x3E
  7801  005E                     	ds	1
  7802  005F                     ___fldiv@aexp:	
  7803  005F                     ___flsub@b:	
  7804                           ; 1 bytes @ 0x3F
  7805                           
  7806                           
  7807                           ; 4 bytes @ 0x3F
  7808  005F                     	ds	1
  7809  0060                     ?_convertAnalogValues:	
  7810  0060                     ?_floorf:	
  7811                           ; 1 bytes @ 0x40
  7812                           
  7813  0060                     convertAnalogValues@data:	
  7814                           ; 4 bytes @ 0x40
  7815                           
  7816  0060                     floorf@x:	
  7817                           ; 2 bytes @ 0x40
  7818                           
  7819                           
  7820                           ; 4 bytes @ 0x40
  7821  0060                     	ds	2
  7822  0062                     ??_convertAnalogValues:	
  7823  0062                     _convertAnalogValues$1963:	
  7824                           ; 1 bytes @ 0x42
  7825                           
  7826                           
  7827                           ; 4 bytes @ 0x42
  7828  0062                     	ds	1
  7829  0063                     ?_spinInput:	
  7830  0063                     ??___flsub:	
  7831                           ; 1 bytes @ 0x43
  7832                           
  7833  0063                     spinInput@min:	
  7834                           ; 1 bytes @ 0x43
  7835                           
  7836                           
  7837                           ; 4 bytes @ 0x43
  7838  0063                     	ds	1
  7839  0064                     ??_floorf:	
  7840                           
  7841                           ; 1 bytes @ 0x44
  7842  0064                     	ds	2
  7843  0066                     convertAnalogValues@adc:	
  7844                           
  7845                           ; 2 bytes @ 0x46
  7846  0066                     	ds	1
  7847  0067                     spinInput@max:	
  7848                           
  7849                           ; 4 bytes @ 0x47
  7850  0067                     	ds	1
  7851  0068                     ?_efgtoa:	
  7852  0068                     efgtoa@f:	
  7853                           ; 2 bytes @ 0x48
  7854                           
  7855                           
  7856                           ; 4 bytes @ 0x48
  7857  0068                     	ds	3
  7858  006B                     spinInput@step:	
  7859                           
  7860                           ; 4 bytes @ 0x4B
  7861  006B                     	ds	1
  7862  006C                     efgtoa@c:	
  7863                           
  7864                           ; 1 bytes @ 0x4C
  7865  006C                     	ds	1
  7866  006D                     ??_efgtoa:	
  7867                           
  7868                           ; 1 bytes @ 0x4D
  7869  006D                     	ds	2
  7870  006F                     ??_spinInput:	
  7871                           
  7872                           ; 1 bytes @ 0x4F
  7873  006F                     	ds	1
  7874  0070                     ??_statusView:	
  7875  0070                     ??_channelSetup:	
  7876                           ; 1 bytes @ 0x50
  7877                           
  7878  0070                     ??_setOutputPower:	
  7879                           ; 1 bytes @ 0x50
  7880                           
  7881  0070                     ??_setLensDia:	
  7882                           ; 1 bytes @ 0x50
  7883                           
  7884  0070                     ??_sprintf:	
  7885                           ; 1 bytes @ 0x50
  7886                           
  7887                           
  7888                           	psect	text3
  7889  0062                     __ptext3:	
  7890 ;; *************** function _setOutputPower *****************
  7891 ;; Defined at:
  7892 ;;		line 229 in file "menu.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  data            2   52[BANK2 ] PTR struct .
  7895 ;;		 -> data(117), 
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;		None
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1    wreg      unsigned char 
  7900 ;; Registers used:
  7901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 3F/2
  7904 ;;		On exit  : 3F/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7907 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7910 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7911 ;;Total ram usage:        2 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:   11
  7914 ;; This function calls:
  7915 ;;		_OLED_print_xy
  7916 ;;		_returnToPage
  7917 ;;		_spinInput
  7918 ;;		_sprintf
  7919 ;; This function is called by:
  7920 ;;		_menu
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           
  7925                           ;psect for function _setOutputPower
  7926  0062                     _setOutputPower:	
  7927                           
  7928                           ;menu.c: 229: uint8_t setOutputPower(t_globalData *data);menu.c: 230: {;menu.c: 232:  st
      +                          atic float test;;menu.c: 234:  returnToPage(0);
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7932  0062  3000               	movlw	0
  7933  0063  319A  22BA  3180   	fcall	_returnToPage
  7934                           
  7935                           ;menu.c: 235:  OLED_print_xy(0, 0, "Set outp    ");
  7936  0066  0140               	movlb	0	; select bank0
  7937  0067  3051               	movlw	low (STR_19| (0+32768))
  7938  0068  01A6               	clrf	OLED_print_xy@row
  7939  0069  00A7               	movwf	OLED_print_xy@s
  7940  006A  30A1               	movlw	high (STR_19| (0+32768))
  7941  006B  00A8               	movwf	OLED_print_xy@s+1
  7942  006C  3000               	movlw	0
  7943  006D  319A  226A  3180   	fcall	_OLED_print_xy
  7944                           
  7945                           ;menu.c: 237:  spinInput(&test, -5, 5, 0.25);
  7946  0070  22C4  3180         	fcall	PL86	;call to abstracted procedure
  7947  0072  303E               	movlw	62
  7948  0073  22F6  3180         	fcall	PL168	;call to abstracted procedure
  7949  0075  30DE               	movlw	(low (setOutputPower@test| (0+256)))& (0+255)
  7950  0076  01EC               	clrf	spinInput@step+1
  7951  0077  01EB               	clrf	spinInput@step
  7952  0078  2120               	fcall	_spinInput
  7953                           
  7954                           ;menu.c: 238:  sprintf(sBuf2, "%5.2f       ", test);
  7955  0079  30CD               	movlw	low _sBuf2
  7956  007A  0142               	movlb	2	; select bank2
  7957  007B  00B5               	movwf	sprintf@s^(0+256)
  7958  007C  3001               	movlw	high _sBuf2
  7959  007D  00B6               	movwf	(sprintf@s+1)^(0+256)
  7960  007E  3037               	movlw	low (STR_20| (0+32768))
  7961  007F  00B7               	movwf	sprintf@fmt^(0+256)
  7962  0080  30A1               	movlw	high (STR_20| (0+32768))
  7963  0081  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  7964  0082  0143               	movlb	3	; select bank3
  7965  0083  0861               	movf	(setOutputPower@test+3)^(0+384),w
  7966  0084  0142               	movlb	2	; select bank2
  7967  0085  00BC               	movwf	((?_sprintf+3)^(0+256)+4)
  7968  0086  0143               	movlb	3	; select bank3
  7969  0087  0860               	movf	(setOutputPower@test+2)^(0+384),w
  7970  0088  0142               	movlb	2	; select bank2
  7971  0089  00BB               	movwf	((?_sprintf+2)^(0+256)+4)
  7972  008A  0143               	movlb	3	; select bank3
  7973  008B  085F               	movf	(setOutputPower@test+1)^(0+384),w
  7974  008C  0142               	movlb	2	; select bank2
  7975  008D  00BA               	movwf	((?_sprintf+1)^(0+256)+4)
  7976  008E  0143               	movlb	3	; select bank3
  7977  008F  085E               	movf	setOutputPower@test^(0+384),w
  7978  0090  0142               	movlb	2	; select bank2
  7979  0091  00B9               	movwf	(?_sprintf^(0+256)+4)
  7980  0092  319A  2298  3180   	fcall	_sprintf
  7981                           
  7982                           ;menu.c: 239:  OLED_print_xy(0,1,sBuf2);
  7983  0095  22DF               	fcall	PL112	;call to abstracted procedure
  7984  0096  319A  226A         	fcall	_OLED_print_xy
  7985                           
  7986                           ;menu.c: 241:  return 0;
  7987  0098  3400               	retlw	0
  7988  0099                     __end_of_setOutputPower:	
  7989  0099                     __ptext2:	
  7990 ;; *************** function _setLensDia *****************
  7991 ;; Defined at:
  7992 ;;		line 244 in file "menu.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  data            2   52[BANK2 ] PTR struct .
  7995 ;;		 -> data(117), 
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  i               1   54[BANK2 ] char 
  7998 ;; Return value:  Size  Location     Type
  7999 ;;                  1    wreg      unsigned char 
  8000 ;; Registers used:
  8001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8002 ;; Tracked objects:
  8003 ;;		On entry : 3F/2
  8004 ;;		On exit  : 3F/0
  8005 ;;		Unchanged: 0/0
  8006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8007 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8008 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8010 ;;      Totals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8011 ;;Total ram usage:        3 bytes
  8012 ;; Hardware stack levels used:    1
  8013 ;; Hardware stack levels required when called:   11
  8014 ;; This function calls:
  8015 ;;		_OLED_print_xy
  8016 ;;		___fltol
  8017 ;;		_returnToPage
  8018 ;;		_spinInput
  8019 ;;		_sprintf
  8020 ;; This function is called by:
  8021 ;;		_menu
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           
  8026                           ;psect for function _setLensDia
  8027  0099                     _setLensDia:	
  8028                           
  8029                           ;menu.c: 244: uint8_t setLensDia(t_globalData *data);menu.c: 245: {;menu.c: 246:  static
      +                           float test;;menu.c: 247:  int8_t i;;menu.c: 248:  returnToPage(0);
  8030                           
  8031                           ;incstack = 0
  8032                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8033  0099  3000               	movlw	0
  8034  009A  319A  22BA  3180   	fcall	_returnToPage
  8035                           
  8036                           ;menu.c: 249:  OLED_print_xy(0, 0, "Set lens   ");
  8037  009D  0140               	movlb	0	; select bank0
  8038  009E  3092               	movlw	low (STR_21| (0+32768))
  8039  009F  01A6               	clrf	OLED_print_xy@row
  8040  00A0  00A7               	movwf	OLED_print_xy@s
  8041  00A1  30A1               	movlw	high (STR_21| (0+32768))
  8042  00A2  00A8               	movwf	OLED_print_xy@s+1
  8043  00A3  3000               	movlw	0
  8044  00A4  319A  226A  3180   	fcall	_OLED_print_xy
  8045                           
  8046                           ;menu.c: 250:  spinInput(&test, -5, 5, 1);
  8047  00A7  22C4  3180         	fcall	PL86	;call to abstracted procedure
  8048  00A9  303F               	movlw	63
  8049  00AA  22F6  3180         	fcall	PL168	;call to abstracted procedure
  8050  00AC  30DA               	movlw	(low (setLensDia@test| (0+256)))& (0+255)
  8051  00AD  01EC               	clrf	spinInput@step+1
  8052  00AE  01EB               	clrf	spinInput@step
  8053  00AF  2120  3180         	fcall	_spinInput
  8054                           
  8055                           ;menu.c: 251:  i = test;
  8056  00B1  0143               	movlb	3	; select bank3
  8057  00B2  085D               	movf	(setLensDia@test+3)^(0+384),w
  8058  00B3  0140               	movlb	0	; select bank0
  8059  00B4  00A3               	movwf	___fltol@f1+3
  8060  00B5  0143               	movlb	3	; select bank3
  8061  00B6  085C               	movf	(setLensDia@test+2)^(0+384),w
  8062  00B7  0140               	movlb	0	; select bank0
  8063  00B8  00A2               	movwf	___fltol@f1+2
  8064  00B9  0143               	movlb	3	; select bank3
  8065  00BA  085B               	movf	(setLensDia@test+1)^(0+384),w
  8066  00BB  0140               	movlb	0	; select bank0
  8067  00BC  00A1               	movwf	___fltol@f1+1
  8068  00BD  0143               	movlb	3	; select bank3
  8069  00BE  085A               	movf	setLensDia@test^(0+384),w
  8070  00BF  0140               	movlb	0	; select bank0
  8071  00C0  00A0               	movwf	___fltol@f1
  8072  00C1  20D9               	fcall	___fltol
  8073  00C2  0820               	movf	?___fltol,w
  8074  00C3  0142               	movlb	2	; select bank2
  8075  00C4  00D6               	movwf	setLensDia@i^(0+256)
  8076                           
  8077                           ;menu.c: 252:  sprintf(sBuf2, "%2d          ", i);
  8078  00C5  30CD               	movlw	low _sBuf2
  8079  00C6  00B5               	movwf	sprintf@s^(0+256)
  8080  00C7  3001               	movlw	high _sBuf2
  8081  00C8  00B6               	movwf	(sprintf@s+1)^(0+256)
  8082  00C9  300F               	movlw	low (STR_22| (0+32768))
  8083  00CA  00B7               	movwf	sprintf@fmt^(0+256)
  8084  00CB  30A1               	movlw	high (STR_22| (0+32768))
  8085  00CC  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  8086  00CD  0856               	movf	setLensDia@i^(0+256),w
  8087  00CE  00B9               	movwf	(?_sprintf^(0+256)+4)
  8088  00CF  01BA               	clrf	((?_sprintf+1)^(0+256)+4)
  8089  00D0  1BB9               	btfsc	(?_sprintf^(0+256)+4),7
  8090  00D1  03BA               	decf	((?_sprintf+1)^(0+256)+4),f
  8091  00D2  319A  2298  3180   	fcall	_sprintf
  8092                           
  8093                           ;menu.c: 253:  OLED_print_xy(0,1,sBuf2);
  8094  00D5  22DF               	fcall	PL112	;call to abstracted procedure
  8095  00D6  319A  226A         	fcall	_OLED_print_xy
  8096                           
  8097                           ;menu.c: 255:  return 0;
  8098  00D8  3400               	retlw	0
  8099  00D9                     __end_of_setLensDia:	
  8100  00D9                     __ptext26:	
  8101 ;; *************** function ___fltol *****************
  8102 ;; Defined at:
  8103 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\fltol.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;  f1              4    0[BANK0 ] int 
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;  exp1            1    9[BANK0 ] unsigned char 
  8108 ;;  sign1           1    8[BANK0 ] unsigned char 
  8109 ;; Return value:  Size  Location     Type
  8110 ;;                  4    0[BANK0 ] long 
  8111 ;; Registers used:
  8112 ;;		wreg, status,2, status,0
  8113 ;; Tracked objects:
  8114 ;;		On entry : 3F/0
  8115 ;;		On exit  : 3F/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8118 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8119 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8120 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8121 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8122 ;;Total ram usage:       10 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:    3
  8125 ;; This function calls:
  8126 ;;		Nothing
  8127 ;; This function is called by:
  8128 ;;		_setLensDia
  8129 ;;		_efgtoa
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           
  8134                           ;psect for function ___fltol
  8135  00D9                     ___fltol:	
  8136                           
  8137                           ;incstack = 0
  8138                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  8139  00D9  22D6  3180         	fcall	PL110	;call to abstracted procedure
  8140  00DB  1003               	clrc
  8141  00DC  0D26               	rlf	??___fltol+2,w
  8142  00DD  0D27               	rlf	??___fltol+3,w
  8143  00DE  00A9               	movwf	___fltol@exp1
  8144  00DF  0829               	movf	___fltol@exp1,w
  8145  00E0  1D03               	btfss	3,2
  8146  00E1  28E7               	goto	l4319
  8147  00E2                     l4317:	
  8148  00E2  01A0               	clrf	?___fltol
  8149  00E3  01A1               	clrf	?___fltol+1
  8150  00E4  01A2               	clrf	?___fltol+2
  8151  00E5  01A3               	clrf	?___fltol+3
  8152  00E6  0008               	return
  8153  00E7                     l4319:	
  8154  00E7  22D6  3180         	fcall	PL110	;call to abstracted procedure
  8155  00E9  301F               	movlw	31
  8156  00EA                     u4765:	
  8157  00EA  36A7               	lsrf	??___fltol+3,f
  8158  00EB  0CA6               	rrf	??___fltol+2,f
  8159  00EC  0CA5               	rrf	??___fltol+1,f
  8160  00ED  0CA4               	rrf	??___fltol,f
  8161  00EE  0B89               	decfsz	9,f
  8162  00EF  28EA               	goto	u4765
  8163  00F0  0824               	movf	??___fltol,w
  8164  00F1  00A8               	movwf	___fltol@sign1
  8165  00F2  3096               	movlw	150
  8166  00F3  17A2               	bsf	___fltol@f1+2,7
  8167  00F4  01A3               	clrf	___fltol@f1+3
  8168  00F5  02A9               	subwf	___fltol@exp1,f
  8169  00F6  1FA9               	btfss	___fltol@exp1,7
  8170  00F7  2904               	goto	l4337
  8171  00F8  0829               	movf	___fltol@exp1,w
  8172  00F9  3A80               	xorlw	128
  8173  00FA  3E97               	addlw	151
  8174  00FB  1C03               	btfss	3,0
  8175  00FC  28E2               	goto	l4317
  8176  00FD                     l4333:	
  8177  00FD  36A3               	lsrf	___fltol@f1+3,f
  8178  00FE  0CA2               	rrf	___fltol@f1+2,f
  8179  00FF  0CA1               	rrf	___fltol@f1+1,f
  8180  0100  0CA0               	rrf	___fltol@f1,f
  8181  0101  0FA9               	incfsz	___fltol@exp1,f
  8182  0102  28FD               	goto	l4333
  8183  0103  2911               	goto	l4345
  8184  0104                     l4337:	
  8185  0104  3020               	movlw	32
  8186  0105  0229               	subwf	___fltol@exp1,w
  8187  0106  1803               	btfsc	3,0
  8188  0107  28E2               	goto	l4317
  8189  0108                     l4343:	
  8190  0108  0829               	movf	___fltol@exp1,w
  8191  0109  1903               	btfsc	3,2
  8192  010A  2911               	goto	l4345
  8193  010B  35A0               	lslf	___fltol@f1,f
  8194  010C  0DA1               	rlf	___fltol@f1+1,f
  8195  010D  0DA2               	rlf	___fltol@f1+2,f
  8196  010E  0DA3               	rlf	___fltol@f1+3,f
  8197  010F  03A9               	decf	___fltol@exp1,f
  8198  0110  2908               	goto	l4343
  8199  0111                     l4345:	
  8200  0111  0828               	movf	___fltol@sign1,w
  8201  0112  1903               	btfsc	3,2
  8202  0113  0008               	return
  8203  0114  09A0               	comf	___fltol@f1,f
  8204  0115  09A1               	comf	___fltol@f1+1,f
  8205  0116  09A2               	comf	___fltol@f1+2,f
  8206  0117  09A3               	comf	___fltol@f1+3,f
  8207  0118  0AA0               	incf	___fltol@f1,f
  8208  0119  1903               	skipnz
  8209  011A  0AA1               	incf	___fltol@f1+1,f
  8210  011B  1903               	skipnz
  8211  011C  0AA2               	incf	___fltol@f1+2,f
  8212  011D  1903               	skipnz
  8213  011E  0AA3               	incf	___fltol@f1+3,f
  8214  011F  0008               	return
  8215  0120                     __end_of___fltol:	
  8216  0120                     __ptext7:	
  8217 ;; *************** function _spinInput *****************
  8218 ;; Defined at:
  8219 ;;		line 258 in file "menu.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  input           1    wreg     PTR float 
  8222 ;;		 -> setLensDia@test(4), setOutputPower@test(4), 
  8223 ;;  min             4   67[BANK0 ] float 
  8224 ;;  max             4   71[BANK0 ] float 
  8225 ;;  step            4   75[BANK0 ] float 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  input           1    1[BANK1 ] PTR float 
  8228 ;;		 -> setLensDia@test(4), setOutputPower@test(4), 
  8229 ;;  dir             1    0[BANK1 ] enum E7873
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      void 
  8232 ;; Registers used:
  8233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 3F/0
  8236 ;;		On exit  : 3E/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8239 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8240 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8242 ;;      Totals:         0      12       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8243 ;;Total ram usage:       14 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    5
  8246 ;; This function calls:
  8247 ;;		___fladd
  8248 ;;		___flge
  8249 ;;		___flsub
  8250 ;;		_getRotDir
  8251 ;; This function is called by:
  8252 ;;		_setOutputPower
  8253 ;;		_setLensDia
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           
  8258                           ;psect for function _spinInput
  8259  0120                     _spinInput:	
  8260                           
  8261                           ;incstack = 0
  8262                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8263                           ;spinInput@input stored from wreg
  8264  0120  0141               	movlb	1	; select bank1
  8265  0121  00A1               	movwf	spinInput@input^(0+128)
  8266                           
  8267                           ;menu.c: 258: void spinInput(float *input, float min, float max, float step);menu.c: 259
      +                          : {;menu.c: 260:  enum e_direction dir = getRotDir();
  8268  0122  319B  2348  3180   	fcall	_getRotDir
  8269  0125  0141               	movlb	1	; select bank1
  8270  0126  00A0               	movwf	spinInput@dir^(0+128)
  8271                           
  8272                           ;menu.c: 262:  if ((dir == ROT_CCW) && (*input > min))
  8273  0127  3A02               	xorlw	2
  8274  0128  1D03               	btfss	3,2
  8275  0129  295B               	goto	l5393
  8276  012A  0140               	movlb	0	; select bank0
  8277  012B  0866               	movf	spinInput@min+3,w
  8278  012C  00CA               	movwf	___flge@ff1+3
  8279  012D  0865               	movf	spinInput@min+2,w
  8280  012E  00C9               	movwf	___flge@ff1+2
  8281  012F  0864               	movf	spinInput@min+1,w
  8282  0130  00C8               	movwf	___flge@ff1+1
  8283  0131  0863               	movf	spinInput@min,w
  8284  0132  00C7               	movwf	___flge@ff1
  8285  0133  0141               	movlb	1	; select bank1
  8286  0134  22BD               	fcall	PL78	;call to abstracted procedure
  8287  0135  318F  2782  3180   	fcall	PL126	;call to abstracted procedure
  8288  0138  3194  24DA  3180   	fcall	___flge
  8289  013B  1803               	btfsc	3,0
  8290  013C  295B               	goto	l5393
  8291                           
  8292                           ;menu.c: 263:   *input -= step;
  8293  013D  086E               	movf	spinInput@step+3,w
  8294  013E  00DE               	movwf	___flsub@a+3
  8295  013F  086D               	movf	spinInput@step+2,w
  8296  0140  00DD               	movwf	___flsub@a+2
  8297  0141  086C               	movf	spinInput@step+1,w
  8298  0142  00DC               	movwf	___flsub@a+1
  8299  0143  086B               	movf	spinInput@step,w
  8300  0144  00DB               	movwf	___flsub@a
  8301  0145  0141               	movlb	1	; select bank1
  8302  0146  22BD               	fcall	PL78	;call to abstracted procedure
  8303  0147  00DF               	movwf	___flsub@b
  8304  0148  3F41               	moviw [1]fsr1
  8305  0149  00E0               	movwf	___flsub@b+1
  8306  014A  3F42               	moviw [2]fsr1
  8307  014B  00E1               	movwf	___flsub@b+2
  8308  014C  3F43               	moviw [3]fsr1
  8309  014D  00E2               	movwf	___flsub@b+3
  8310  014E  3195  2556  3180   	fcall	___flsub
  8311  0151  22CF               	fcall	PL88	;call to abstracted procedure
  8312  0152  085B               	movf	?___flsub,w
  8313  0153  3FC0               	movwi [0]fsr1
  8314  0154  085C               	movf	?___flsub+1,w
  8315  0155  3FC1               	movwi [1]fsr1
  8316  0156  085D               	movf	?___flsub+2,w
  8317  0157  3FC2               	movwi [2]fsr1
  8318  0158  085E               	movf	?___flsub+3,w
  8319  0159  3FC3               	movwi [3]fsr1
  8320  015A  0008               	return
  8321  015B                     l5393:	
  8322  015B  0141               	movlb	1	; select bank1
  8323  015C  0B20               	decfsz	spinInput@dir^(0+128),w
  8324  015D  0008               	return
  8325  015E  22BD               	fcall	PL78	;call to abstracted procedure
  8326  015F  318F  278A  3180   	fcall	PL128	;call to abstracted procedure
  8327  0162  086A               	movf	spinInput@max+3,w
  8328  0163  00CE               	movwf	___flge@ff2+3
  8329  0164  0869               	movf	spinInput@max+2,w
  8330  0165  00CD               	movwf	___flge@ff2+2
  8331  0166  0868               	movf	spinInput@max+1,w
  8332  0167  00CC               	movwf	___flge@ff2+1
  8333  0168  0867               	movf	spinInput@max,w
  8334  0169  00CB               	movwf	___flge@ff2
  8335  016A  3194  24DA  3180   	fcall	___flge
  8336  016D  1803               	btfsc	3,0
  8337  016E  0008               	return
  8338                           
  8339                           ;menu.c: 265:   *input += step;
  8340  016F  086E               	movf	spinInput@step+3,w
  8341  0170  00CA               	movwf	___fladd@b+3
  8342  0171  086D               	movf	spinInput@step+2,w
  8343  0172  00C9               	movwf	___fladd@b+2
  8344  0173  086C               	movf	spinInput@step+1,w
  8345  0174  00C8               	movwf	___fladd@b+1
  8346  0175  086B               	movf	spinInput@step,w
  8347  0176  00C7               	movwf	___fladd@b
  8348  0177  0141               	movlb	1	; select bank1
  8349  0178  22BD  3180         	fcall	PL78	;call to abstracted procedure
  8350  017A  00CB               	movwf	___fladd@a
  8351  017B  3F41               	moviw [1]fsr1
  8352  017C  00CC               	movwf	___fladd@a+1
  8353  017D  3F42               	moviw [2]fsr1
  8354  017E  00CD               	movwf	___fladd@a+2
  8355  017F  3F43               	moviw [3]fsr1
  8356  0180  00CE               	movwf	___fladd@a+3
  8357  0181  2187  3180         	fcall	___fladd
  8358  0183  22CF               	fcall	PL88	;call to abstracted procedure
  8359  0184  318F  275F         	fcall	PL102	;call to abstracted procedure
  8360  0186  0008               	return
  8361  0187                     __end_of_spinInput:	
  8362  0187                     __ptext59:	
  8363 ;; *************** function ___fladd *****************
  8364 ;; Defined at:
  8365 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcadd.c"
  8366 ;; Parameters:    Size  Location     Type
  8367 ;;  b               4   39[BANK0 ] unsigned char 
  8368 ;;  a               4   43[BANK0 ] unsigned char 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;  grs             1   58[BANK0 ] unsigned char 
  8371 ;;  bexp            1   57[BANK0 ] unsigned char 
  8372 ;;  aexp            1   56[BANK0 ] unsigned char 
  8373 ;;  signs           1   55[BANK0 ] unsigned char 
  8374 ;; Return value:  Size  Location     Type
  8375 ;;                  4   39[BANK0 ] unsigned char 
  8376 ;; Registers used:
  8377 ;;		wreg, status,2, status,0
  8378 ;; Tracked objects:
  8379 ;;		On entry : 3F/0
  8380 ;;		On exit  : 3F/0
  8381 ;;		Unchanged: 0/0
  8382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8383 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8384 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8385 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8386 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8387 ;;Total ram usage:       20 bytes
  8388 ;; Hardware stack levels used:    1
  8389 ;; Hardware stack levels required when called:    3
  8390 ;; This function calls:
  8391 ;;		Nothing
  8392 ;; This function is called by:
  8393 ;;		_convertAnalogValues
  8394 ;;		_spinInput
  8395 ;;		_efgtoa
  8396 ;;		___flsub
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           
  8401                           ;psect for function ___fladd
  8402  0187                     ___fladd:	
  8403                           
  8404                           ;incstack = 0
  8405                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  8406  0187  084A               	movf	___fladd@b+3,w
  8407  0188  00D7               	movwf	___fladd@signs
  8408  0189  3080               	movlw	128
  8409  018A  05D7               	andwf	___fladd@signs,f
  8410  018B  354A               	lslf	___fladd@b+3,w
  8411  018C  00D9               	movwf	___fladd@bexp
  8412  018D  1BC9               	btfsc	___fladd@b+2,7
  8413  018E  1459               	bsf	___fladd@bexp,0
  8414  018F  0859               	movf	___fladd@bexp,w
  8415  0190  1903               	btfsc	3,2
  8416  0191  299A               	goto	l1065
  8417  0192  0F59               	incfsz	___fladd@bexp,w
  8418  0193  2998               	goto	l1066
  8419  0194  01C7               	clrf	___fladd@b
  8420  0195  01C8               	clrf	___fladd@b+1
  8421  0196  01C9               	clrf	___fladd@b+2
  8422  0197  01CA               	clrf	___fladd@b+3
  8423  0198                     l1066:	
  8424  0198  17C9               	bsf	___fladd@b+2,7
  8425  0199  299D               	goto	L22
  8426  019A                     l1065:	
  8427  019A  01C7               	clrf	___fladd@b
  8428  019B  01C8               	clrf	___fladd@b+1
  8429  019C  01C9               	clrf	___fladd@b+2
  8430  019D                     L22:	
  8431  019D  01CA               	clrf	___fladd@b+3
  8432  019E  084E               	movf	___fladd@a+3,w
  8433  019F  00D8               	movwf	___fladd@aexp
  8434  01A0  3080               	movlw	128
  8435  01A1  05D8               	andwf	___fladd@aexp,f
  8436  01A2  0858               	movf	___fladd@aexp,w
  8437  01A3  0657               	xorwf	___fladd@signs,w
  8438  01A4  1D03               	btfss	3,2
  8439  01A5  1757               	bsf	___fladd@signs,6
  8440  01A6  354E               	lslf	___fladd@a+3,w
  8441  01A7  00D8               	movwf	___fladd@aexp
  8442  01A8  1BCD               	btfsc	___fladd@a+2,7
  8443  01A9  1458               	bsf	___fladd@aexp,0
  8444  01AA  0858               	movf	___fladd@aexp,w
  8445  01AB  1903               	btfsc	3,2
  8446  01AC  29B5               	goto	l1070
  8447  01AD  0F58               	incfsz	___fladd@aexp,w
  8448  01AE  29B3               	goto	l1071
  8449  01AF  01CB               	clrf	___fladd@a
  8450  01B0  01CC               	clrf	___fladd@a+1
  8451  01B1  01CD               	clrf	___fladd@a+2
  8452  01B2  01CE               	clrf	___fladd@a+3
  8453  01B3                     l1071:	
  8454  01B3  17CD               	bsf	___fladd@a+2,7
  8455  01B4  29B8               	goto	L23
  8456  01B5                     l1070:	
  8457  01B5  01CB               	clrf	___fladd@a
  8458  01B6  01CC               	clrf	___fladd@a+1
  8459  01B7  01CD               	clrf	___fladd@a+2
  8460  01B8                     L23:	
  8461  01B8  01CE               	clrf	___fladd@a+3
  8462  01B9  0859               	movf	___fladd@bexp,w
  8463  01BA  0258               	subwf	___fladd@aexp,w
  8464  01BB  1803               	skipnc
  8465  01BC  29DF               	goto	l3877
  8466  01BD  1F57               	btfss	___fladd@signs,6
  8467  01BE  29C1               	goto	l3847
  8468  01BF  3080               	movlw	128
  8469  01C0  06D7               	xorwf	___fladd@signs,f
  8470  01C1                     l3847:	
  8471  01C1  0859               	movf	___fladd@bexp,w
  8472  01C2  00DA               	movwf	___fladd@grs
  8473  01C3  0858               	movf	___fladd@aexp,w
  8474  01C4  00D9               	movwf	___fladd@bexp
  8475  01C5  085A               	movf	___fladd@grs,w
  8476  01C6  00D8               	movwf	___fladd@aexp
  8477  01C7  0847               	movf	___fladd@b,w
  8478  01C8  00DA               	movwf	___fladd@grs
  8479  01C9  084B               	movf	___fladd@a,w
  8480  01CA  00C7               	movwf	___fladd@b
  8481  01CB  085A               	movf	___fladd@grs,w
  8482  01CC  00CB               	movwf	___fladd@a
  8483  01CD  0848               	movf	___fladd@b+1,w
  8484  01CE  00DA               	movwf	___fladd@grs
  8485  01CF  084C               	movf	___fladd@a+1,w
  8486  01D0  00C8               	movwf	___fladd@b+1
  8487  01D1  085A               	movf	___fladd@grs,w
  8488  01D2  00CC               	movwf	___fladd@a+1
  8489  01D3  0849               	movf	___fladd@b+2,w
  8490  01D4  00DA               	movwf	___fladd@grs
  8491  01D5  084D               	movf	___fladd@a+2,w
  8492  01D6  00C9               	movwf	___fladd@b+2
  8493  01D7  085A               	movf	___fladd@grs,w
  8494  01D8  00CD               	movwf	___fladd@a+2
  8495  01D9  084A               	movf	___fladd@b+3,w
  8496  01DA  00DA               	movwf	___fladd@grs
  8497  01DB  084E               	movf	___fladd@a+3,w
  8498  01DC  00CA               	movwf	___fladd@b+3
  8499  01DD  085A               	movf	___fladd@grs,w
  8500  01DE  00CE               	movwf	___fladd@a+3
  8501  01DF                     l3877:	
  8502  01DF  01DA               	clrf	___fladd@grs
  8503  01E0  0858               	movf	___fladd@aexp,w
  8504  01E1  00CF               	movwf	??___fladd
  8505  01E2  01D0               	clrf	??___fladd+1
  8506  01E3  0850               	movf	??___fladd+1,w
  8507  01E4  00D2               	movwf	??___fladd+3
  8508  01E5  0859               	movf	___fladd@bexp,w
  8509  01E6  024F               	subwf	??___fladd,w
  8510  01E7  00D1               	movwf	??___fladd+2
  8511  01E8  1C03               	skipc
  8512  01E9  03D2               	decf	??___fladd+3,f
  8513  01EA  0852               	movf	??___fladd+3,w
  8514  01EB  3A80               	xorlw	128
  8515  01EC  00D3               	movwf	??___fladd+4
  8516  01ED  3080               	movlw	128
  8517  01EE  0253               	subwf	??___fladd+4,w
  8518  01EF  1D03               	skipz
  8519  01F0  29F3               	goto	u3785
  8520  01F1  301A               	movlw	26
  8521  01F2  0251               	subwf	??___fladd+2,w
  8522  01F3                     u3785:	
  8523  01F3  1C03               	skipc
  8524  01F4  2A10               	goto	l3891
  8525  01F5  0140               	movlb	0	; select bank0
  8526  01F6  084A               	movf	___fladd@b+3,w
  8527  01F7  0449               	iorwf	___fladd@b+2,w
  8528  01F8  0448               	iorwf	___fladd@b+1,w
  8529  01F9  0447               	iorwf	___fladd@b,w
  8530  01FA  1903               	btfsc	3,2
  8531  01FB  29FE               	goto	u3790
  8532  01FC  3001               	movlw	1
  8533  01FD  29FF               	goto	u3800
  8534  01FE                     u3790:	
  8535  01FE  3000               	movlw	0
  8536  01FF                     u3800:	
  8537  01FF  00DA               	movwf	___fladd@grs
  8538  0200  01C7               	clrf	___fladd@b
  8539  0201  01C8               	clrf	___fladd@b+1
  8540  0202  01C9               	clrf	___fladd@b+2
  8541  0203  01CA               	clrf	___fladd@b+3
  8542  0204  0858               	movf	___fladd@aexp,w
  8543  0205  00D9               	movwf	___fladd@bexp
  8544  0206  2A15               	goto	l1076
  8545  0207                     l1078:	
  8546  0207  1C5A               	btfss	___fladd@grs,0
  8547  0208  2A0D               	goto	l1079
  8548  0209  365A               	lsrf	___fladd@grs,w
  8549  020A  3801               	iorlw	1
  8550  020B  00DA               	movwf	___fladd@grs
  8551  020C  2A0E               	goto	l1080
  8552  020D                     l1079:	
  8553  020D  36DA               	lsrf	___fladd@grs,f
  8554  020E                     l1080:	
  8555  020E  22E7  3180         	fcall	PL122	;call to abstracted procedure
  8556  0210                     l3891:	
  8557  0210  0140               	movlb	0	; select bank0
  8558  0211  0858               	movf	___fladd@aexp,w
  8559  0212  0259               	subwf	___fladd@bexp,w
  8560  0213  1C03               	skipc
  8561  0214  2A07               	goto	l1078
  8562  0215                     l1076:	
  8563  0215  1B57               	btfsc	___fladd@signs,6
  8564  0216  2A2F               	goto	l3909
  8565  0217  0859               	movf	___fladd@bexp,w
  8566  0218  1D03               	btfss	3,2
  8567  0219  2A1B               	goto	l3897
  8568  021A  2AFC               	ljmp	PL178	;call to abstracted procedure
  8569  021B                     l3897:	
  8570  021B  084B               	movf	___fladd@a,w
  8571  021C  07C7               	addwf	___fladd@b,f
  8572  021D  084C               	movf	___fladd@a+1,w
  8573  021E  3DC8               	addwfc	___fladd@b+1,f
  8574  021F  084D               	movf	___fladd@a+2,w
  8575  0220  3DC9               	addwfc	___fladd@b+2,f
  8576  0221  084E               	movf	___fladd@a+3,w
  8577  0222  3DCA               	addwfc	___fladd@b+3,f
  8578  0223  1C4A               	btfss	___fladd@b+3,0
  8579  0224  2A8F               	goto	l3939
  8580  0225  1C5A               	btfss	___fladd@grs,0
  8581  0226  2A2B               	goto	l1087
  8582  0227  365A               	lsrf	___fladd@grs,w
  8583  0228  3801               	iorlw	1
  8584  0229  00DA               	movwf	___fladd@grs
  8585  022A  2A2C               	goto	l1088
  8586  022B                     l1087:	
  8587  022B  36DA               	lsrf	___fladd@grs,f
  8588  022C                     l1088:	
  8589  022C  22E7  3180         	fcall	PL122	;call to abstracted procedure
  8590  022E  2A8F               	goto	l3939
  8591  022F                     l3909:	
  8592  022F  084A               	movf	___fladd@b+3,w
  8593  0230  3A80               	xorlw	128
  8594  0231  00CF               	movwf	??___fladd
  8595  0232  084E               	movf	___fladd@a+3,w
  8596  0233  3A80               	xorlw	128
  8597  0234  024F               	subwf	??___fladd,w
  8598  0235  1D03               	skipz
  8599  0236  2A41               	goto	u3893
  8600  0237  084D               	movf	___fladd@a+2,w
  8601  0238  0249               	subwf	___fladd@b+2,w
  8602  0239  1D03               	skipz
  8603  023A  2A41               	goto	u3893
  8604  023B  084C               	movf	___fladd@a+1,w
  8605  023C  0248               	subwf	___fladd@b+1,w
  8606  023D  1D03               	skipz
  8607  023E  2A41               	goto	u3893
  8608  023F  084B               	movf	___fladd@a,w
  8609  0240  0247               	subwf	___fladd@b,w
  8610  0241                     u3893:	
  8611  0241  1803               	skipnc
  8612  0242  2A6C               	goto	l3919
  8613  0243  30FF               	movlw	255
  8614  0244  00CF               	movwf	??___fladd
  8615  0245  00D0               	movwf	??___fladd+1
  8616  0246  00D1               	movwf	??___fladd+2
  8617  0247  00D2               	movwf	??___fladd+3
  8618  0248  0847               	movf	___fladd@b,w
  8619  0249  024B               	subwf	___fladd@a,w
  8620  024A  00D3               	movwf	??___fladd+4
  8621  024B  0848               	movf	___fladd@b+1,w
  8622  024C  3B4C               	subwfb	___fladd@a+1,w
  8623  024D  00D4               	movwf	??___fladd+5
  8624  024E  0849               	movf	___fladd@b+2,w
  8625  024F  3B4D               	subwfb	___fladd@a+2,w
  8626  0250  00D5               	movwf	??___fladd+6
  8627  0251  084A               	movf	___fladd@b+3,w
  8628  0252  3B4E               	subwfb	___fladd@a+3,w
  8629  0253  00D6               	movwf	??___fladd+7
  8630  0254  0853               	movf	??___fladd+4,w
  8631  0255  07CF               	addwf	??___fladd,f
  8632  0256  0854               	movf	??___fladd+5,w
  8633  0257  3DD0               	addwfc	??___fladd+1,f
  8634  0258  0855               	movf	??___fladd+6,w
  8635  0259  3DD1               	addwfc	??___fladd+2,f
  8636  025A  0856               	movf	??___fladd+7,w
  8637  025B  3DD2               	addwfc	??___fladd+3,f
  8638  025C  0852               	movf	??___fladd+3,w
  8639  025D  00CA               	movwf	___fladd@b+3
  8640  025E  0851               	movf	??___fladd+2,w
  8641  025F  00C9               	movwf	___fladd@b+2
  8642  0260  0850               	movf	??___fladd+1,w
  8643  0261  00C8               	movwf	___fladd@b+1
  8644  0262  084F               	movf	??___fladd,w
  8645  0263  00C7               	movwf	___fladd@b
  8646  0264  3080               	movlw	128
  8647  0265  06D7               	xorwf	___fladd@signs,f
  8648  0266  09DA               	comf	___fladd@grs,f
  8649  0267  0FDA               	incfsz	___fladd@grs,f
  8650  0268  2A74               	goto	l1093
  8651  0269  22EF  3180         	fcall	PL154	;call to abstracted procedure
  8652  026B  2A74               	goto	l1093
  8653  026C                     l3919:	
  8654  026C  084B               	movf	___fladd@a,w
  8655  026D  02C7               	subwf	___fladd@b,f
  8656  026E  084C               	movf	___fladd@a+1,w
  8657  026F  3BC8               	subwfb	___fladd@b+1,f
  8658  0270  084D               	movf	___fladd@a+2,w
  8659  0271  3BC9               	subwfb	___fladd@b+2,f
  8660  0272  084E               	movf	___fladd@a+3,w
  8661  0273  3BCA               	subwfb	___fladd@b+3,f
  8662  0274                     l1093:	
  8663  0274  084A               	movf	___fladd@b+3,w
  8664  0275  0449               	iorwf	___fladd@b+2,w
  8665  0276  0448               	iorwf	___fladd@b+1,w
  8666  0277  0447               	iorwf	___fladd@b,w
  8667  0278  1D03               	skipz
  8668  0279  2A8D               	goto	l3937
  8669  027A  085A               	movf	___fladd@grs,w
  8670  027B  1D03               	btfss	3,2
  8671  027C  2A8D               	goto	l3937
  8672  027D  2AFC               	ljmp	PL178	;call to abstracted procedure
  8673  027E                     l3925:	
  8674  027E  35C7               	lslf	___fladd@b,f
  8675  027F  0DC8               	rlf	___fladd@b+1,f
  8676  0280  0DC9               	rlf	___fladd@b+2,f
  8677  0281  0DCA               	rlf	___fladd@b+3,f
  8678  0282  1BDA               	btfsc	___fladd@grs,7
  8679  0283  1447               	bsf	___fladd@b,0
  8680  0284  1C5A               	btfss	___fladd@grs,0
  8681  0285  2A89               	goto	l1098
  8682  0286  1403               	setc
  8683  0287  0DDA               	rlf	___fladd@grs,f
  8684  0288  2A8A               	goto	l3933
  8685  0289                     l1098:	
  8686  0289  35DA               	lslf	___fladd@grs,f
  8687  028A                     l3933:	
  8688  028A  0859               	movf	___fladd@bexp,w
  8689  028B  1D03               	btfss	3,2
  8690  028C  03D9               	decf	___fladd@bexp,f
  8691  028D                     l3937:	
  8692  028D  1FC9               	btfss	___fladd@b+2,7
  8693  028E  2A7E               	goto	l3925
  8694  028F                     l3939:	
  8695  028F  01D8               	clrf	___fladd@aexp
  8696  0290  1FDA               	btfss	___fladd@grs,7
  8697  0291  2A9A               	goto	l3949
  8698  0292  085A               	movf	___fladd@grs,w
  8699  0293  397F               	andlw	127
  8700  0294  1903               	btfsc	3,2
  8701  0295  1847               	btfsc	___fladd@b,0
  8702  0296  2A98               	goto	l3945
  8703  0297  2A9A               	goto	l3949
  8704  0298                     l3945:	
  8705  0298  01D8               	clrf	___fladd@aexp
  8706  0299  0AD8               	incf	___fladd@aexp,f
  8707  029A                     l3949:	
  8708  029A  0858               	movf	___fladd@aexp,w
  8709  029B  1903               	btfsc	3,2
  8710  029C  2AA7               	goto	l3961
  8711  029D  22EF  3180         	fcall	PL154	;call to abstracted procedure
  8712  029F  1C4A               	btfss	___fladd@b+3,0
  8713  02A0  2AA7               	goto	l3961
  8714  02A1  37CA               	asrf	___fladd@b+3,f
  8715  02A2  0CC9               	rrf	___fladd@b+2,f
  8716  02A3  0CC8               	rrf	___fladd@b+1,f
  8717  02A4  0CC7               	rrf	___fladd@b,f
  8718  02A5  0F59               	incfsz	___fladd@bexp,w
  8719  02A6  0AD9               	incf	___fladd@bexp,f
  8720  02A7                     l3961:	
  8721  02A7  0A59               	incf	___fladd@bexp,w
  8722  02A8  1D03               	btfss	3,2
  8723  02A9  0859               	movf	___fladd@bexp,w
  8724  02AA  1D03               	btfss	3,2
  8725  02AB  2AB3               	goto	l3969
  8726  02AC  01C7               	clrf	___fladd@b
  8727  02AD  01C8               	clrf	___fladd@b+1
  8728  02AE  01C9               	clrf	___fladd@b+2
  8729  02AF  01CA               	clrf	___fladd@b+3
  8730  02B0  0859               	movf	___fladd@bexp,w
  8731  02B1  1903               	btfsc	3,2
  8732  02B2  01D7               	clrf	___fladd@signs
  8733  02B3                     l3969:	
  8734  02B3  1C59               	btfss	___fladd@bexp,0
  8735  02B4  2AB7               	goto	l1113
  8736  02B5  17C9               	bsf	___fladd@b+2,7
  8737  02B6  2AB8               	goto	l3973
  8738  02B7                     l1113:	
  8739  02B7  13C9               	bcf	___fladd@b+2,7
  8740  02B8                     l3973:	
  8741  02B8  3659               	lsrf	___fladd@bexp,w
  8742  02B9  00CA               	movwf	___fladd@b+3
  8743  02BA  1BD7               	btfsc	___fladd@signs,7
  8744  02BB  17CA               	bsf	___fladd@b+3,7
  8745  02BC  0008               	return
  8746  02BD                     __end_of___fladd:	
  8747  02BD                     PL78:	
  8748  02BD  0821               	movf	spinInput@input^(0+128),w
  8749  02BE  0086               	movwf	6
  8750  02BF  3001               	movlw	1	; select bank2/3
  8751  02C0  0087               	movwf	7
  8752  02C1  3F40               	moviw [0]fsr1
  8753  02C2  0140               	movlb	0	; select bank0
  8754  02C3  0008               	return
  8755  02C4                     __end_ofPL78:	
  8756  02C4                     PL86:	
  8757  02C4  30C0               	movlw	192
  8758  02C5  00E6               	movwf	spinInput@min+3
  8759  02C6  30A0               	movlw	160
  8760  02C7  00E5               	movwf	spinInput@min+2
  8761  02C8  3040               	movlw	64
  8762  02C9  01E4               	clrf	spinInput@min+1
  8763  02CA  01E3               	clrf	spinInput@min
  8764  02CB  00EA               	movwf	spinInput@max+3
  8765  02CC  30A0               	movlw	160
  8766  02CD  00E9               	movwf	spinInput@max+2
  8767  02CE  0008               	return
  8768  02CF                     __end_ofPL86:	
  8769  02CF                     PL88:	
  8770  02CF  0141               	movlb	1	; select bank1
  8771  02D0  0821               	movf	spinInput@input^(0+128),w
  8772  02D1  0086               	movwf	6
  8773  02D2  3001               	movlw	1	; select bank2/3
  8774  02D3  0087               	movwf	7
  8775  02D4  0140               	movlb	0	; select bank0
  8776  02D5  0008               	return
  8777  02D6                     __end_ofPL88:	
  8778  02D6                     PL110:	
  8779  02D6  0820               	movf	___fltol@f1,w
  8780  02D7  00A4               	movwf	??___fltol
  8781  02D8  0821               	movf	___fltol@f1+1,w
  8782  02D9  00A5               	movwf	??___fltol+1
  8783  02DA  0822               	movf	___fltol@f1+2,w
  8784  02DB  00A6               	movwf	??___fltol+2
  8785  02DC  0823               	movf	___fltol@f1+3,w
  8786  02DD  00A7               	movwf	??___fltol+3
  8787  02DE  0008               	return
  8788  02DF                     __end_ofPL110:	
  8789  02DF                     PL112:	
  8790  02DF  0140               	movlb	0	; select bank0
  8791  02E0  30CD               	movlw	low _sBuf2
  8792  02E1  01A6               	clrf	OLED_print_xy@row
  8793  02E2  0AA6               	incf	OLED_print_xy@row,f
  8794  02E3  00A7               	movwf	OLED_print_xy@s
  8795  02E4  3001               	movlw	high _sBuf2
  8796  02E5  00A8               	movwf	OLED_print_xy@s+1
  8797  02E6  3400               	retlw	0
  8798  02E7                     __end_ofPL112:	
  8799  02E7                     PL122:	
  8800  02E7  1847               	btfsc	___fladd@b,0
  8801  02E8  17DA               	bsf	___fladd@grs,7
  8802  02E9  37CA               	asrf	___fladd@b+3,f
  8803  02EA  0CC9               	rrf	___fladd@b+2,f
  8804  02EB  0CC8               	rrf	___fladd@b+1,f
  8805  02EC  0CC7               	rrf	___fladd@b,f
  8806  02ED  0AD9               	incf	___fladd@bexp,f
  8807  02EE  0008               	return
  8808  02EF                     __end_ofPL122:	
  8809  02EF                     PL154:	
  8810  02EF  3001               	movlw	1
  8811  02F0  07C7               	addwf	___fladd@b,f
  8812  02F1  3000               	movlw	0
  8813  02F2  3DC8               	addwfc	___fladd@b+1,f
  8814  02F3  3DC9               	addwfc	___fladd@b+2,f
  8815  02F4  3DCA               	addwfc	___fladd@b+3,f
  8816  02F5  0008               	return
  8817  02F6                     __end_ofPL154:	
  8818  02F6                     PL168:	
  8819  02F6  01E8               	clrf	spinInput@max+1
  8820  02F7  01E7               	clrf	spinInput@max
  8821  02F8  00EE               	movwf	spinInput@step+3
  8822  02F9  3080               	movlw	128
  8823  02FA  00ED               	movwf	spinInput@step+2
  8824  02FB  0008               	return
  8825  02FC                     __end_ofPL168:	
  8826  02FC                     PL178:	
  8827  02FC  01C7               	clrf	?___fladd
  8828  02FD  01C8               	clrf	?___fladd+1
  8829  02FE  01C9               	clrf	?___fladd+2
  8830  02FF  01CA               	clrf	?___fladd+3
  8831  0300  0008               	return
  8832  0301                     __end_ofPL178:	
  8833                           
  8834                           	psect	text4
  8835  1860                     __ptext4:	
  8836 ;; *************** function _channelSetup *****************
  8837 ;; Defined at:
  8838 ;;		line 217 in file "menu.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  data            2   52[BANK2 ] PTR struct .
  8841 ;;		 -> data(117), 
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;		None
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  1    wreg      unsigned char 
  8846 ;; Registers used:
  8847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : 3F/2
  8850 ;;		On exit  : 3F/3
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8853 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8856 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8857 ;;Total ram usage:        2 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:   11
  8860 ;; This function calls:
  8861 ;;		_OLED_print_xy
  8862 ;;		_paging
  8863 ;;		_returnToPage
  8864 ;;		_sprintf
  8865 ;; This function is called by:
  8866 ;;		_menu
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           
  8871                           ;psect for function _channelSetup
  8872  1860                     _channelSetup:	
  8873                           
  8874                           ;menu.c: 217: uint8_t channelSetup(t_globalData *data);menu.c: 218: {;menu.c: 219:  stat
      +                          ic uint8_t page = 0;;menu.c: 221:  returnToPage(page);
  8875                           
  8876                           ;incstack = 0
  8877                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8878  1860  0143               	movlb	3	; select bank3
  8879  1861  083F               	movf	channelSetup@page^(0+384),w
  8880  1862  22BA  3198         	fcall	_returnToPage
  8881                           
  8882                           ;menu.c: 222:  OLED_print_xy(0, 0, "Output powerLens diam.  Back        ");
  8883  1864  0140               	movlb	0	; select bank0
  8884  1865  306A               	movlw	low (STR_17| (0+32768))
  8885  1866  01A6               	clrf	OLED_print_xy@row
  8886  1867  00A7               	movwf	OLED_print_xy@s
  8887  1868  30A0               	movlw	high (STR_17| (0+32768))
  8888  1869  00A8               	movwf	OLED_print_xy@s+1
  8889  186A  3000               	movlw	0
  8890  186B  226A  3198         	fcall	_OLED_print_xy
  8891                           
  8892                           ;menu.c: 223:  sprintf(sBuf1, "%1d           %1d           \006     ", selectedChannel, 
      +                          selectedChannel);
  8893  186D  26F5  3198         	fcall	PL186	;call to abstracted procedure
  8894  186F  30B2               	movlw	low (STR_18| (0+32768))
  8895  1870  00B7               	movwf	sprintf@fmt^(0+256)
  8896  1871  30A0               	movlw	high (STR_18| (0+32768))
  8897  1872  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  8898  1873  0143               	movlb	3	; select bank3
  8899  1874  0843               	movf	_selectedChannel^(0+384),w
  8900  1875  0142               	movlb	2	; select bank2
  8901  1876  00B9               	movwf	(?_sprintf^(0+256)+4)
  8902  1877  01BA               	clrf	((?_sprintf+1)^(0+256)+4)
  8903  1878  0143               	movlb	3	; select bank3
  8904  1879  0843               	movf	_selectedChannel^(0+384),w
  8905  187A  0142               	movlb	2	; select bank2
  8906  187B  00BB               	movwf	(?_sprintf^(0+256)+6)
  8907  187C  01BC               	clrf	((?_sprintf+1)^(0+256)+6)
  8908  187D  2298  3198         	fcall	_sprintf
  8909                           
  8910                           ;menu.c: 224:  OLED_print_xy(0,1,sBuf1);
  8911  187F  266B  3198         	fcall	PL44	;call to abstracted procedure
  8912  1881  226A  3198         	fcall	_OLED_print_xy
  8913                           
  8914                           ;menu.c: 225:  page = paging(page, 3);
  8915  1883  3003               	movlw	3
  8916  1884  00A6               	movwf	paging@lastPage
  8917  1885  0143               	movlb	3	; select bank3
  8918  1886  083F               	movf	channelSetup@page^(0+384),w
  8919  1887  22F0               	fcall	_paging
  8920  1888  0143               	movlb	3	; select bank3
  8921  1889  00BF               	movwf	channelSetup@page^(0+384)
  8922                           
  8923                           ;menu.c: 226:  return page;
  8924  188A  0008               	return
  8925  188B                     __end_of_channelSetup:	
  8926  188B                     __ptext8:	
  8927 ;; *************** function _menuError *****************
  8928 ;; Defined at:
  8929 ;;		line 104 in file "menu.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;		None
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;		None
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  1    wreg      void 
  8936 ;; Registers used:
  8937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8938 ;; Tracked objects:
  8939 ;;		On entry : 3F/2
  8940 ;;		On exit  : 3D/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8947 ;;Total ram usage:        0 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    8
  8950 ;; This function calls:
  8951 ;;		_OLED_clearDisplay
  8952 ;;		_OLED_print_xy
  8953 ;;		_OLED_returnHome
  8954 ;; This function is called by:
  8955 ;;		_menu
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           
  8960                           ;psect for function _menuError
  8961  188B                     _menuError:	
  8962                           
  8963                           ;menu.c: 106:  OLED_returnHome();
  8964                           
  8965                           ;incstack = 0
  8966                           ; Regs used in _menuError: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8967  188B  318E  2692  3198   	fcall	_OLED_returnHome
  8968                           
  8969                           ;menu.c: 107:  OLED_clearDisplay();
  8970  188E  318E  2690  3198   	fcall	_OLED_clearDisplay
  8971  1891  306B               	movlw	low (STR_1| (0+32768))
  8972                           
  8973                           ;menu.c: 108:  OLED_print_xy(0, 0, "-> Fuckup <-");
  8974  1892  01A6               	clrf	OLED_print_xy@row
  8975  1893  00A7               	movwf	OLED_print_xy@s
  8976  1894  30A1               	movlw	high (STR_1| (0+32768))
  8977  1895  00A8               	movwf	OLED_print_xy@s+1
  8978  1896  3000               	movlw	0
  8979  1897  226A  3198         	fcall	_OLED_print_xy
  8980  1899                     l441:	
  8981                           ;menu.c: 109:  while(1);
  8982                           
  8983  1899  2899               	goto	l441
  8984  189A                     __end_of_menuError:	
  8985  189A                     __ptext13:	
  8986 ;; *************** function _getNextState *****************
  8987 ;; Defined at:
  8988 ;;		line 125 in file "menu.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;  state           1    wreg     enum E7886
  8991 ;;  page            1    6[BANK0 ] unsigned char 
  8992 ;;  pb              1    7[BANK0 ] enum E7877
  8993 ;; Auto vars:     Size  Location     Type
  8994 ;;  state           1    9[BANK0 ] enum E7886
  8995 ;;  n               1   10[BANK0 ] unsigned char 
  8996 ;; Return value:  Size  Location     Type
  8997 ;;                  1    wreg      char 
  8998 ;; Registers used:
  8999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9000 ;; Tracked objects:
  9001 ;;		On entry : 3F/3
  9002 ;;		On exit  : 3F/0
  9003 ;;		Unchanged: 0/0
  9004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9005 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9008 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9009 ;;Total ram usage:        5 bytes
  9010 ;; Hardware stack levels used:    1
  9011 ;; Hardware stack levels required when called:    4
  9012 ;; This function calls:
  9013 ;;		___wmul
  9014 ;; This function is called by:
  9015 ;;		_menu
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           
  9020                           ;psect for function _getNextState
  9021  189A                     _getNextState:	
  9022                           
  9023                           ;incstack = 0
  9024                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9025                           ;getNextState@state stored from wreg
  9026  189A  0140               	movlb	0	; select bank0
  9027  189B  00A9               	movwf	getNextState@state
  9028                           
  9029                           ;menu.c: 125: int8_t getNextState(enum e_menuStates state, uint8_t page, enum e_buttonPr
      +                          ess pb);menu.c: 126: {;menu.c: 127:  uint8_t n;;menu.c: 130:  for(n = 0; n < sizeof(next
      +                          StateTbl)/sizeof(nextStateTbl[0]); n++) {
  9030  189C  01AA               	clrf	getNextState@n
  9031  189D                     l5515:	
  9032                           
  9033                           ;menu.c: 131:   if ((nextStateTbl[n].state == state)) {
  9034  189D  267B  3198         	fcall	PL62	;call to abstracted procedure
  9035  189F  21B6  3198         	fcall	___wmul
  9036  18A1  0821               	movf	?___wmul+1,w
  9037  18A2  0085               	movwf	5
  9038  18A3  0820               	movf	?___wmul,w
  9039  18A4  0084               	movwf	4
  9040  18A5  308F               	movlw	low (_nextStateTbl| (0+32768))
  9041  18A6  0784               	addwf	4,f
  9042  18A7  30A0               	movlw	high (_nextStateTbl| (0+32768))
  9043  18A8  3D85               	addwfc	5,f
  9044  18A9  0800               	movf	0,w	;code access
  9045  18AA  0629               	xorwf	getNextState@state,w
  9046  18AB  1D03               	skipz
  9047  18AC  28E1               	goto	l5535
  9048                           
  9049                           ;menu.c: 132:    if ((nextStateTbl[n].page == page) ||
  9050  18AD  267B  3198         	fcall	PL62	;call to abstracted procedure
  9051  18AF  21B6  3198         	fcall	___wmul
  9052  18B1  269E  3198         	fcall	PL96	;call to abstracted procedure
  9053  18B3  0800               	movf	0,w	;code access
  9054  18B4  0626               	xorwf	getNextState@page,w
  9055  18B5  1903               	skipnz
  9056  18B6  28C1               	goto	l5521
  9057  18B7  267B  3198         	fcall	PL62	;call to abstracted procedure
  9058  18B9  21B6  3198         	fcall	___wmul
  9059  18BB  269E  3198         	fcall	PL96	;call to abstracted procedure
  9060  18BD  0012               	moviw fsr0++
  9061  18BE  3AFF               	xorlw	255
  9062  18BF  1D03               	btfss	3,2
  9063  18C0  28E1               	goto	l5535
  9064  18C1                     l5521:	
  9065                           
  9066                           ;menu.c: 133:     (nextStateTbl[n].page == 255)) {;menu.c: 134:     if (pb == PB_SHORT)
  9067  18C1  0B27               	decfsz	getNextState@pb,w
  9068  18C2  28D0               	goto	l5529
  9069                           
  9070                           ;menu.c: 135:      return nextStateTbl[n].pbShort;
  9071  18C3  267B  3198         	fcall	PL62	;call to abstracted procedure
  9072  18C5  21B6               	fcall	___wmul
  9073  18C6  0821               	movf	?___wmul+1,w
  9074  18C7  0085               	movwf	5
  9075  18C8  0820               	movf	?___wmul,w
  9076  18C9  0084               	movwf	4
  9077  18CA  3091               	movlw	low ((_nextStateTbl+2)| (0+32768))
  9078  18CB  0784               	addwf	4,f
  9079  18CC  30A0               	movlw	high ((_nextStateTbl+2)| (0+32768))
  9080  18CD  3D85               	addwfc	5,f
  9081  18CE  0800               	movf	0,w	;code access
  9082  18CF  0008               	return
  9083  18D0                     l5529:	
  9084  18D0  3002               	movlw	2
  9085  18D1  0627               	xorwf	getNextState@pb,w
  9086  18D2  1D03               	btfss	3,2
  9087  18D3  28E1               	goto	l5535
  9088                           
  9089                           ;menu.c: 137:      return nextStateTbl[n].pbLong;
  9090  18D4  267B  3198         	fcall	PL62	;call to abstracted procedure
  9091  18D6  21B6               	fcall	___wmul
  9092  18D7  0821               	movf	?___wmul+1,w
  9093  18D8  0085               	movwf	5
  9094  18D9  0820               	movf	?___wmul,w
  9095  18DA  0084               	movwf	4
  9096  18DB  3092               	movlw	low ((_nextStateTbl+3)| (0+32768))
  9097  18DC  0784               	addwf	4,f
  9098  18DD  30A0               	movlw	high ((_nextStateTbl+3)| (0+32768))
  9099  18DE  3D85               	addwfc	5,f
  9100  18DF  0800               	movf	0,w	;code access
  9101  18E0  0008               	return
  9102  18E1                     l5535:	
  9103                           ;menu.c: 138:    }
  9104                           
  9105  18E1  3007               	movlw	7
  9106                           
  9107                           ;menu.c: 140:  }
  9108  18E2  0AAA               	incf	getNextState@n,f
  9109  18E3  022A               	subwf	getNextState@n,w
  9110  18E4  1803               	btfsc	3,0
  9111                           
  9112                           ;menu.c: 141:  return -1;
  9113  18E5  34FF               	retlw	255
  9114  18E6  289D               	goto	l5515
  9115  18E7                     __end_of_getNextState:	
  9116  18E7                     __ptext5:	
  9117 ;; *************** function _channelView *****************
  9118 ;; Defined at:
  9119 ;;		line 169 in file "menu.c"
  9120 ;; Parameters:    Size  Location     Type
  9121 ;;  data            2   52[BANK2 ] PTR struct .
  9122 ;;		 -> data(117), 
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;  tmp0            4   58[BANK2 ] float 
  9125 ;;  n               1   66[BANK2 ] unsigned char 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  1    wreg      unsigned char 
  9128 ;; Registers used:
  9129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9130 ;; Tracked objects:
  9131 ;;		On entry : 3F/2
  9132 ;;		On exit  : 3F/3
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9135 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9136 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9137 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9138 ;;      Totals:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9139 ;;Total ram usage:       15 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:   11
  9142 ;; This function calls:
  9143 ;;		_OLED_print_xy
  9144 ;;		___wmul
  9145 ;;		_paging
  9146 ;;		_returnToPage
  9147 ;;		_sprintf
  9148 ;;		_strcat
  9149 ;;		_strcpy
  9150 ;; This function is called by:
  9151 ;;		_menu
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           
  9156                           ;psect for function _channelView
  9157  18E7                     _channelView:	
  9158                           
  9159                           ;menu.c: 169: uint8_t channelView(t_globalData *data);menu.c: 170: {;menu.c: 171:  stati
      +                          c uint8_t page = 0;;menu.c: 172:  uint8_t n;;menu.c: 173:  float tmp0;;menu.c: 175:  ret
      +                          urnToPage(page);
  9160                           
  9161                           ;incstack = 0
  9162                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9163  18E7  0143               	movlb	3	; select bank3
  9164  18E8  0840               	movf	channelView@page^(0+384),w
  9165  18E9  22BA  3198         	fcall	_returnToPage
  9166                           
  9167                           ;menu.c: 176:  if (updateScreen) {
  9168  18EB  0143               	movlb	3	; select bank3
  9169  18EC  086D               	movf	_updateScreen^(0+384),w
  9170  18ED  1903               	btfsc	3,2
  9171  18EE  2922               	goto	l6649
  9172                           
  9173                           ;menu.c: 177:   sBuf1[0] = '\0';
  9174                           
  9175                           ;menu.c: 178:   for(n = 0; n < 4; n++) {
  9176  18EF  2706  3198         	fcall	PL200	;call to abstracted procedure
  9177  18F1                     l6637:	
  9178                           
  9179                           ;menu.c: 179:    sprintf(sBuf2, "Ch %1d: %2d\"   ", n + 1, data->chData[n].lensDia);
  9180  18F1  2673  3198         	fcall	PL54	;call to abstracted procedure
  9181  18F3  21B6  3198         	fcall	___wmul
  9182  18F5  2638  3198         	fcall	PL34	;call to abstracted procedure
  9183  18F7  3E33               	addlw	51
  9184  18F8  26FB  3198         	fcall	PL188	;call to abstracted procedure
  9185  18FA  00DE               	movwf	_channelView$1964^(0+256)
  9186  18FB  30CD               	movlw	low _sBuf2
  9187  18FC  01DF               	clrf	(_channelView$1964+1)^(0+256)
  9188                           
  9189                           ;menu.c: 179:    sprintf(sBuf2, "Ch %1d: %2d\"   ", n + 1, data->chData[n].lensDia);
  9190  18FD  00B5               	movwf	sprintf@s^(0+256)
  9191  18FE  3001               	movlw	high _sBuf2
  9192  18FF  00B6               	movwf	(sprintf@s+1)^(0+256)
  9193  1900  30F1               	movlw	low (STR_8| (0+32768))
  9194  1901  00B7               	movwf	sprintf@fmt^(0+256)
  9195  1902  30A0               	movlw	high (STR_8| (0+32768))
  9196  1903  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  9197  1904  0862               	movf	channelView@n^(0+256),w
  9198  1905  3E01               	addlw	1
  9199  1906  00B9               	movwf	(?_sprintf^(0+256)+4)
  9200  1907  3000               	movlw	0
  9201  1908  1803               	skipnc
  9202  1909  3001               	movlw	1
  9203  190A  00BA               	movwf	(?_sprintf^(0+256)+5)
  9204  190B  085F               	movf	(_channelView$1964+1)^(0+256),w
  9205  190C  00BC               	movwf	((?_sprintf+1)^(0+256)+6)
  9206  190D  085E               	movf	_channelView$1964^(0+256),w
  9207  190E  00BB               	movwf	(?_sprintf^(0+256)+6)
  9208  190F  2298  3198         	fcall	_sprintf
  9209                           
  9210                           ;menu.c: 180:    strcat(sBuf1,sBuf2);
  9211  1911  270B  3198         	fcall	PL202	;call to abstracted procedure
  9212  1913  22DC  3198         	fcall	_strcat
  9213                           
  9214                           ;menu.c: 181:   }
  9215  1915  2701  3198         	fcall	PL194	;call to abstracted procedure
  9216  1917  1C03               	skipc
  9217  1918  28F1               	goto	l6637
  9218                           
  9219                           ;menu.c: 182:   OLED_print_xy(0, 0, sBuf1);
  9220  1919  0140               	movlb	0	; select bank0
  9221  191A  3020               	movlw	low _sBuf1
  9222  191B  01A6               	clrf	OLED_print_xy@row
  9223  191C  00A7               	movwf	OLED_print_xy@s
  9224  191D  3003               	movlw	high _sBuf1
  9225  191E  00A8               	movwf	OLED_print_xy@s+1
  9226  191F  3000               	movlw	0
  9227  1920  226A  3198         	fcall	_OLED_print_xy
  9228  1922                     l6649:	
  9229                           
  9230                           ;menu.c: 185:  sBuf1[0] = '\0';
  9231                           
  9232                           ;menu.c: 186:  for(n = 0; n < 4; n++) {
  9233  1922  2706  3198         	fcall	PL200	;call to abstracted procedure
  9234  1924  298D               	goto	l6677
  9235  1925                     l6657:	
  9236                           
  9237                           ;menu.c: 189:    strcpy(sBuf2, "Off         ");
  9238  1925  2698  3198         	fcall	PL92	;call to abstracted procedure
  9239  1927  302A               	movlw	low (STR_9| (0+32768))
  9240  1928  00A7               	movwf	strcpy@src
  9241  1929  30A1               	movlw	high (STR_9| (0+32768))
  9242  192A  2981               	goto	L2
  9243  192B                     l6659:	
  9244                           ;menu.c: 190:    break;
  9245                           
  9246                           
  9247                           ;menu.c: 192:    tmp0 = data->chData[n].Patt;
  9248  192B  2673  3198         	fcall	PL54	;call to abstracted procedure
  9249  192D  21B6  3198         	fcall	___wmul
  9250  192F  2638  3198         	fcall	PL34	;call to abstracted procedure
  9251  1931  3E2D               	addlw	45
  9252  1932  0086               	movwf	6
  9253  1933  3000               	movlw	0
  9254  1934  3D57               	addwfc	(??_channelView+1)^(0+256),w
  9255  1935  0087               	movwf	7
  9256  1936  3F40               	moviw [0]fsr1
  9257  1937  00DA               	movwf	channelView@tmp0^(0+256)
  9258  1938  3F41               	moviw [1]fsr1
  9259  1939  00DB               	movwf	(channelView@tmp0+1)^(0+256)
  9260  193A  3F42               	moviw [2]fsr1
  9261  193B  00DC               	movwf	(channelView@tmp0+2)^(0+256)
  9262  193C  3F43               	moviw [3]fsr1
  9263  193D  00DD               	movwf	(channelView@tmp0+3)^(0+256)
  9264                           
  9265                           ;menu.c: 193:    sprintf(sBuf2, "%4.1fW %s", tmp0, (data->chData[n].mode == AUTO ? "auto
      +                            " : "manual"));
  9266  193E  2673  3198         	fcall	PL54	;call to abstracted procedure
  9267  1940  21B6  3198         	fcall	___wmul
  9268  1942  2638  3198         	fcall	PL34	;call to abstracted procedure
  9269  1944  3E34               	addlw	52
  9270  1945  0086               	movwf	6
  9271  1946  3000               	movlw	0
  9272  1947  3D57               	addwfc	(??_channelView+1)^(0+256),w
  9273  1948  0087               	movwf	7
  9274  1949  0301               	decf	1,w
  9275  194A  1903               	btfsc	3,2
  9276  194B  2950               	goto	l6663
  9277  194C  30AF               	movlw	low (STR_12| (0+32768))
  9278  194D  00E0               	movwf	_channelView$1150^(0+256)
  9279  194E  30A1               	movlw	high (STR_12| (0+32768))
  9280  194F  2953               	goto	L1
  9281  1950                     l6663:	
  9282  1950  30A8               	movlw	low (STR_11| (0+32768))
  9283  1951  00E0               	movwf	_channelView$1150^(0+256)
  9284  1952  30A1               	movlw	high (STR_11| (0+32768))
  9285  1953                     L1:	
  9286  1953  00E1               	movwf	(_channelView$1150^(0+256)+1)
  9287  1954  30CD               	movlw	low _sBuf2
  9288  1955  00B5               	movwf	sprintf@s^(0+256)
  9289  1956  3001               	movlw	high _sBuf2
  9290  1957  00B6               	movwf	(sprintf@s+1)^(0+256)
  9291  1958  309E               	movlw	low (STR_10| (0+32768))
  9292  1959  00B7               	movwf	sprintf@fmt^(0+256)
  9293  195A  30A1               	movlw	high (STR_10| (0+32768))
  9294  195B  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  9295  195C  085D               	movf	(channelView@tmp0+3)^(0+256),w
  9296  195D  00BC               	movwf	((?_sprintf+3)^(0+256)+4)
  9297  195E  085C               	movf	(channelView@tmp0+2)^(0+256),w
  9298  195F  00BB               	movwf	((?_sprintf+2)^(0+256)+4)
  9299  1960  085B               	movf	(channelView@tmp0+1)^(0+256),w
  9300  1961  00BA               	movwf	((?_sprintf+1)^(0+256)+4)
  9301  1962  085A               	movf	channelView@tmp0^(0+256),w
  9302  1963  00B9               	movwf	(?_sprintf^(0+256)+4)
  9303  1964  0861               	movf	(_channelView$1150+1)^(0+256),w
  9304  1965  00BE               	movwf	((low ((?_sprintf| (0+256)+8))+1))^0
  9305  1966  0860               	movf	_channelView$1150^(0+256),w
  9306  1967  00BD               	movwf	(low ((?_sprintf| (0+256)+8)))^0
  9307  1968  2298  3198         	fcall	_sprintf
  9308                           
  9309                           ;menu.c: 194:    break;
  9310  196A  2985               	goto	l6679
  9311  196B                     l6667:	
  9312                           
  9313                           ;menu.c: 196:    strcpy(sBuf2, "Disconnected");
  9314  196B  2698  3198         	fcall	PL92	;call to abstracted procedure
  9315  196D  3078               	movlw	low (STR_13| (0+32768))
  9316  196E  00A7               	movwf	strcpy@src
  9317  196F  30A1               	movlw	high (STR_13| (0+32768))
  9318  1970  2981               	goto	L2
  9319  1971                     l6669:	
  9320                           ;menu.c: 197:    break;
  9321                           
  9322                           
  9323                           ;menu.c: 199:    strcpy(sBuf2, "Shorted!    ");
  9324  1971  2698  3198         	fcall	PL92	;call to abstracted procedure
  9325  1973  3044               	movlw	low (STR_14| (0+32768))
  9326  1974  00A7               	movwf	strcpy@src
  9327  1975  30A1               	movlw	high (STR_14| (0+32768))
  9328  1976  2981               	goto	L2
  9329  1977                     l6671:	
  9330                           ;menu.c: 200:    break;
  9331                           
  9332                           
  9333                           ;menu.c: 202:    strcpy(sBuf2, "Overcurrent!");
  9334  1977  2698  3198         	fcall	PL92	;call to abstracted procedure
  9335  1979  305E               	movlw	low (STR_15| (0+32768))
  9336  197A  00A7               	movwf	strcpy@src
  9337  197B  30A1               	movlw	high (STR_15| (0+32768))
  9338  197C  2981               	goto	L2
  9339  197D                     l6673:	
  9340                           ;menu.c: 203:    break;
  9341                           
  9342                           
  9343                           ;menu.c: 205:    strcpy(sBuf2, "OndreSpecial");
  9344  197D  2698               	fcall	PL92	;call to abstracted procedure
  9345  197E  3085               	movlw	low (STR_16| (0+32768))
  9346  197F  00A7               	movwf	strcpy@src
  9347  1980  30A1               	movlw	high (STR_16| (0+32768))
  9348  1981                     L2:	
  9349  1981  00A8               	movwf	strcpy@src+1
  9350  1982  3195  2534  3198   	fcall	_strcpy
  9351  1985                     l6679:	
  9352                           ;menu.c: 206:    break;
  9353                           
  9354                           
  9355                           ;menu.c: 208:   strcat(sBuf1, sBuf2);
  9356  1985  270B  3198         	fcall	PL202	;call to abstracted procedure
  9357  1987  22DC  3198         	fcall	_strcat
  9358                           
  9359                           ;menu.c: 209:  }
  9360  1989  2701  3198         	fcall	PL194	;call to abstracted procedure
  9361  198B  1803               	btfsc	3,0
  9362  198C  29A8               	goto	l6685
  9363  198D                     l6677:	
  9364  198D  2673  3198         	fcall	PL54	;call to abstracted procedure
  9365  198F  21B6  3198         	fcall	___wmul
  9366  1991  2638  3198         	fcall	PL34	;call to abstracted procedure
  9367  1993  3E35               	addlw	53
  9368  1994  26FB  3198         	fcall	PL188	;call to abstracted procedure
  9369  1996  00D8               	movwf	(??_channelView+2)^(0+256)
  9370  1997  01D9               	clrf	((??_channelView+2)^(0+256)+1)
  9371                           
  9372                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9373                           ; Switch size 1, requested type "space"
  9374                           ; Number of cases is 1, Range of values is 0 to 0
  9375                           ; switch strategies available:
  9376                           ; Name         Instructions Cycles
  9377                           ; simple_byte            4     3 (average)
  9378                           ; direct_byte            8     6 (fixed)
  9379                           ; jumptable            260     6 (fixed)
  9380                           ;	Chosen strategy is simple_byte
  9381  1998  0859               	movf	(??_channelView+3)^(0+256),w
  9382  1999  3A00               	xorlw	0	; case 0
  9383  199A  1903               	skipnz
  9384  199B  299D               	goto	l6879
  9385  199C  297D               	goto	l6673
  9386  199D                     l6879:	
  9387                           
  9388                           ; Switch size 1, requested type "space"
  9389                           ; Number of cases is 5, Range of values is 0 to 4
  9390                           ; switch strategies available:
  9391                           ; Name         Instructions Cycles
  9392                           ; direct_byte           16     6 (fixed)
  9393                           ; simple_byte           16     9 (average)
  9394                           ; jumptable            260     6 (fixed)
  9395                           ;	Chosen strategy is direct_byte
  9396  199D  0858               	movf	(??_channelView+2)^(0+256),w
  9397  199E  0084               	movwf	4
  9398  199F  3005               	movlw	5
  9399  19A0  0204               	subwf	4,w
  9400  19A1  1803               	skipnc
  9401  19A2  297D               	goto	l6673
  9402  19A3  3187               	movlp	high S6881
  9403  19A4  3504               	lslf	4,w
  9404  19A5  3E7D               	addlw	low S6881
  9405  19A6  0082               	movwf	2
  9406  19A7  2985               	goto	l6679
  9407  19A8                     l6685:	
  9408                           
  9409                           ;menu.c: 210:  OLED_print_xy(0, 1, sBuf1);
  9410  19A8  266B  3198         	fcall	PL44	;call to abstracted procedure
  9411  19AA  226A  3198         	fcall	_OLED_print_xy
  9412                           
  9413                           ;menu.c: 212:  page = paging(page, 4);
  9414  19AC  3004               	movlw	4
  9415  19AD  00A6               	movwf	paging@lastPage
  9416  19AE  0143               	movlb	3	; select bank3
  9417  19AF  0840               	movf	channelView@page^(0+384),w
  9418  19B0  22F0               	fcall	_paging
  9419  19B1  0143               	movlb	3	; select bank3
  9420  19B2  00C0               	movwf	channelView@page^(0+384)
  9421                           
  9422                           ;menu.c: 213:  selectedChannel = page;
  9423  19B3  00C3               	movwf	_selectedChannel^(0+384)
  9424                           
  9425                           ;menu.c: 214:  return page;
  9426  19B4  0840               	movf	channelView@page^(0+384),w
  9427  19B5  0008               	return
  9428  19B6                     __end_of_channelView:	
  9429  19B6                     __ptext45:	
  9430 ;; *************** function ___wmul *****************
  9431 ;; Defined at:
  9432 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  9433 ;; Parameters:    Size  Location     Type
  9434 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9435 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  product         2    4[BANK0 ] unsigned int 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  2    0[BANK0 ] unsigned int 
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0
  9442 ;; Tracked objects:
  9443 ;;		On entry : 3F/0
  9444 ;;		On exit  : 3F/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9447 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9448 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9450 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9451 ;;Total ram usage:        6 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    3
  9454 ;; This function calls:
  9455 ;;		Nothing
  9456 ;; This function is called by:
  9457 ;;		_getStateFunc
  9458 ;;		_getNextState
  9459 ;;		_channelView
  9460 ;;		_returnToPage
  9461 ;;		_atoi
  9462 ;; This function uses a non-reentrant model
  9463 ;;
  9464                           
  9465                           
  9466                           ;psect for function ___wmul
  9467  19B6                     ___wmul:	
  9468                           
  9469                           ;incstack = 0
  9470                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9471  19B6  01A4               	clrf	___wmul@product
  9472  19B7  01A5               	clrf	___wmul@product+1
  9473  19B8                     l4105:	
  9474  19B8  1C20               	btfss	___wmul@multiplier,0
  9475  19B9  29BE               	goto	l4109
  9476  19BA  0822               	movf	___wmul@multiplicand,w
  9477  19BB  07A4               	addwf	___wmul@product,f
  9478  19BC  0823               	movf	___wmul@multiplicand+1,w
  9479  19BD  3DA5               	addwfc	___wmul@product+1,f
  9480  19BE                     l4109:	
  9481  19BE  35A2               	lslf	___wmul@multiplicand,f
  9482  19BF  0DA3               	rlf	___wmul@multiplicand+1,f
  9483  19C0  36A1               	lsrf	___wmul@multiplier+1,f
  9484  19C1  0CA0               	rrf	___wmul@multiplier,f
  9485  19C2  0820               	movf	___wmul@multiplier,w
  9486  19C3  0421               	iorwf	___wmul@multiplier+1,w
  9487  19C4  1D03               	btfss	3,2
  9488  19C5  29B8               	goto	l4105
  9489  19C6  0825               	movf	___wmul@product+1,w
  9490  19C7  00A1               	movwf	?___wmul+1
  9491  19C8  0824               	movf	___wmul@product,w
  9492  19C9  00A0               	movwf	?___wmul
  9493  19CA  0008               	return
  9494  19CB                     __end_of___wmul:	
  9495  19CB                     __ptext6:	
  9496 ;; *************** function _statusView *****************
  9497 ;; Defined at:
  9498 ;;		line 144 in file "menu.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  data            2   52[BANK2 ] PTR struct .
  9501 ;;		 -> data(117), 
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;		None
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      unsigned char 
  9506 ;; Registers used:
  9507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9508 ;; Tracked objects:
  9509 ;;		On entry : 3F/2
  9510 ;;		On exit  : 3F/3
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9513 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9516 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9517 ;;Total ram usage:        2 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:   11
  9520 ;; This function calls:
  9521 ;;		_OLED_print_xy
  9522 ;;		_OLED_returnHome
  9523 ;;		_paging
  9524 ;;		_returnToPage
  9525 ;;		_sprintf
  9526 ;; This function is called by:
  9527 ;;		_menu
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           
  9532                           ;psect for function _statusView
  9533  19CB                     _statusView:	
  9534                           
  9535                           ;menu.c: 144: uint8_t statusView(t_globalData *data);menu.c: 145: {;menu.c: 146:  static
      +                           uint8_t page = 0;;menu.c: 148:  returnToPage(page);
  9536                           
  9537                           ;incstack = 0
  9538                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9539  19CB  0143               	movlb	3	; select bank3
  9540  19CC  0841               	movf	statusView@page^(0+384),w
  9541  19CD  22BA  3198         	fcall	_returnToPage
  9542                           
  9543                           ;menu.c: 149:  if (data->status.SENSOR_OK) {
  9544  19CF  26CF  3198         	fcall	PL132	;call to abstracted procedure
  9545  19D1  1C81               	btfss	1,1
  9546  19D2  2A47               	goto	l6613
  9547                           
  9548                           ;menu.c: 150:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   Power");
  9549  19D3  0140               	movlb	0	; select bank0
  9550  19D4  300F               	movlw	low (STR_2| (0+32768))
  9551  19D5  01A6               	clrf	OLED_print_xy@row
  9552  19D6  00A7               	movwf	OLED_print_xy@s
  9553  19D7  30A0               	movlw	high (STR_2| (0+32768))
  9554  19D8  00A8               	movwf	OLED_print_xy@s+1
  9555  19D9  3000               	movlw	0
  9556  19DA  226A  3198         	fcall	_OLED_print_xy
  9557                           
  9558                           ;menu.c: 151:   if (data->status.AUX_SENSOR_OK)
  9559  19DC  26CF  3198         	fcall	PL132	;call to abstracted procedure
  9560                           
  9561                           ;menu.c: 152:    sprintf(sBuf2, "%3.1f\003\004%3.1f\003", data->tempC, data->tempAux);
  9562  19DE  30CD               	movlw	low _sBuf2
  9563  19DF  00B5               	movwf	sprintf@s^(0+256)
  9564  19E0  3001               	movlw	high _sBuf2
  9565  19E1  00B6               	movwf	(sprintf@s+1)^(0+256)
  9566  19E2  1D01               	btfss	1,2
  9567  19E3  29F4               	goto	L4
  9568  19E4  3001               	movlw	low (STR_3| (0+32768))
  9569  19E5  00B7               	movwf	sprintf@fmt^(0+256)
  9570  19E6  30A1               	movlw	high (STR_3| (0+32768))
  9571  19E7  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  9572  19E8  268B  3198         	fcall	PL74	;call to abstracted procedure
  9573  19EA  2682  3198         	fcall	PL68	;call to abstracted procedure
  9574  19EC  0854               	movf	statusView@data^(0+256),w
  9575  19ED  0086               	movwf	6
  9576  19EE  0855               	movf	(statusView@data+1)^(0+256),w
  9577  19EF  0087               	movwf	7
  9578  19F0  3150               	addfsr 1,16
  9579  19F1  26B0  3198         	fcall	PL100	;call to abstracted procedure
  9580  19F3  29FC               	goto	L3
  9581  19F4                     L4:	
  9582                           ;menu.c: 154:    sprintf(sBuf2, "%5.1f \002     ", data->tempC);
  9583                           
  9584  19F4  301D               	movlw	low (STR_4| (0+32768))
  9585  19F5  00B7               	movwf	sprintf@fmt^(0+256)
  9586  19F6  30A1               	movlw	high (STR_4| (0+32768))
  9587  19F7  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  9588  19F8  268B  3198         	fcall	PL74	;call to abstracted procedure
  9589  19FA  2682  3198         	fcall	PL68	;call to abstracted procedure
  9590  19FC                     L3:	
  9591  19FC  2298  3198         	fcall	_sprintf
  9592                           
  9593                           ;menu.c: 155:   sprintf(sBuf1, "%s%5.1f %%     %5.1f \001     %4.1fV  %4.1fW",
  9594  19FE  3020               	movlw	low _sBuf1
  9595  19FF  00B5               	movwf	sprintf@s^(0+256)
  9596  1A00  3003               	movlw	high _sBuf1
  9597  1A01  00B6               	movwf	(sprintf@s+1)^(0+256)
  9598  1A02  3040               	movlw	low (STR_5| (0+32768))
  9599  1A03  00B7               	movwf	sprintf@fmt^(0+256)
  9600  1A04  30A0               	movlw	high (STR_5| (0+32768))
  9601  1A05  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  9602  1A06  30CD               	movlw	low _sBuf2
  9603  1A07  00B9               	movwf	(low ((?_sprintf| (0+256)+4)))^0
  9604  1A08  3001               	movlw	high _sBuf2
  9605  1A09  00BA               	movwf	((low ((?_sprintf| (0+256)+4))+1))^0
  9606  1A0A  0854               	movf	statusView@data^(0+256),w
  9607  1A0B  0086               	movwf	6
  9608  1A0C  0855               	movf	(statusView@data+1)^(0+256),w
  9609  1A0D  0087               	movwf	7
  9610  1A0E  3144               	addfsr 1,4
  9611  1A0F  3F40               	moviw [0]fsr1
  9612  1A10  00BB               	movwf	(?_sprintf^(0+256)+6)
  9613  1A11  3F41               	moviw [1]fsr1
  9614  1A12  00BC               	movwf	((?_sprintf+1)^(0+256)+6)
  9615  1A13  3F42               	moviw [2]fsr1
  9616  1A14  00BD               	movwf	((?_sprintf+2)^(0+256)+6)
  9617  1A15  3F43               	moviw [3]fsr1
  9618  1A16  00BE               	movwf	((?_sprintf+3)^(0+256)+6)
  9619  1A17  0854               	movf	statusView@data^(0+256),w
  9620  1A18  0086               	movwf	6
  9621  1A19  0855               	movf	(statusView@data+1)^(0+256),w
  9622  1A1A  0087               	movwf	7
  9623  1A1B  3148               	addfsr 1,8
  9624  1A1C  3F40               	moviw [0]fsr1
  9625  1A1D  00BF               	movwf	(?_sprintf^(0+256)+10)
  9626  1A1E  3F41               	moviw [1]fsr1
  9627  1A1F  00C0               	movwf	((?_sprintf+1)^(0+256)+10)
  9628  1A20  3F42               	moviw [2]fsr1
  9629  1A21  00C1               	movwf	((?_sprintf+2)^(0+256)+10)
  9630  1A22  3F43               	moviw [3]fsr1
  9631  1A23  00C2               	movwf	((?_sprintf+3)^(0+256)+10)
  9632  1A24  26DD  3198         	fcall	PL152	;call to abstracted procedure
  9633  1A26  3F40               	moviw [0]fsr1
  9634  1A27  00C3               	movwf	(?_sprintf^(0+256)+14)
  9635  1A28  3F41               	moviw [1]fsr1
  9636  1A29  00C4               	movwf	((?_sprintf+1)^(0+256)+14)
  9637  1A2A  3F42               	moviw [2]fsr1
  9638  1A2B  00C5               	movwf	((?_sprintf+2)^(0+256)+14)
  9639  1A2C  3F43               	moviw [3]fsr1
  9640  1A2D  00C6               	movwf	((?_sprintf+3)^(0+256)+14)
  9641  1A2E  26D7  3198         	fcall	PL148	;call to abstracted procedure
  9642  1A30  3F40               	moviw [0]fsr1
  9643  1A31  00C7               	movwf	(?_sprintf^(0+256)+18)
  9644  1A32  3F41               	moviw [1]fsr1
  9645  1A33  00C8               	movwf	((?_sprintf+1)^(0+256)+18)
  9646  1A34  3F42               	moviw [2]fsr1
  9647  1A35  00C9               	movwf	((?_sprintf+2)^(0+256)+18)
  9648  1A36  3F43               	moviw [3]fsr1
  9649  1A37  00CA               	movwf	((?_sprintf+3)^(0+256)+18)
  9650  1A38  2298  3198         	fcall	_sprintf
  9651                           
  9652                           ;menu.c: 157:   OLED_print_xy(0, 1, sBuf1);
  9653  1A3A  266B  3198         	fcall	PL44	;call to abstracted procedure
  9654  1A3C  226A  3198         	fcall	_OLED_print_xy
  9655                           
  9656                           ;menu.c: 158:   page = paging(page, 4);
  9657  1A3E  3004               	movlw	4
  9658  1A3F  00A6               	movwf	paging@lastPage
  9659  1A40  0143               	movlb	3	; select bank3
  9660  1A41  0841               	movf	statusView@page^(0+384),w
  9661  1A42  22F0  3198         	fcall	_paging
  9662  1A44  0143               	movlb	3	; select bank3
  9663  1A45  00C1               	movwf	statusView@page^(0+384)
  9664                           
  9665                           ;menu.c: 159:  } else {
  9666  1A46  2A67               	goto	l6623
  9667  1A47                     l6613:	
  9668                           
  9669                           ;menu.c: 160:   page = 0;
  9670  1A47  0143               	movlb	3	; select bank3
  9671  1A48  01C1               	clrf	statusView@page^(0+384)
  9672                           
  9673                           ;menu.c: 161:   OLED_returnHome();
  9674  1A49  318E  2692  3198   	fcall	_OLED_returnHome
  9675  1A4C  3033               	movlw	low ((STR_2+36)| (0+32768))
  9676                           
  9677                           ;menu.c: 162:   OLED_print_xy(0, 0, "Bat.   Power");
  9678  1A4D  01A6               	clrf	OLED_print_xy@row
  9679  1A4E  00A7               	movwf	OLED_print_xy@s
  9680  1A4F  30A0               	movlw	high ((STR_2+36)| (0+32768))
  9681  1A50  00A8               	movwf	OLED_print_xy@s+1
  9682  1A51  3000               	movlw	0
  9683  1A52  226A  3198         	fcall	_OLED_print_xy
  9684                           
  9685                           ;menu.c: 163:   sprintf(sBuf1, "%4.1fV  %4.1fW", data->voltage, data->power);
  9686  1A54  26F5  3198         	fcall	PL186	;call to abstracted procedure
  9687  1A56  305B               	movlw	low ((STR_5+27)| (0+32768))
  9688  1A57  00B7               	movwf	sprintf@fmt^(0+256)
  9689  1A58  30A0               	movlw	high ((STR_5+27)| (0+32768))
  9690  1A59  00B8               	movwf	(sprintf@fmt^(0+256)+1)
  9691  1A5A  26DD  3198         	fcall	PL152	;call to abstracted procedure
  9692  1A5C  2682  3198         	fcall	PL68	;call to abstracted procedure
  9693  1A5E  26D7  3198         	fcall	PL148	;call to abstracted procedure
  9694  1A60  26B0  3198         	fcall	PL100	;call to abstracted procedure
  9695  1A62  2298  3198         	fcall	_sprintf
  9696                           
  9697                           ;menu.c: 164:   OLED_print_xy(0, 1, sBuf1);
  9698  1A64  266B  3198         	fcall	PL44	;call to abstracted procedure
  9699  1A66  226A               	fcall	_OLED_print_xy
  9700  1A67                     l6623:	
  9701                           
  9702                           ;menu.c: 166:  return page;
  9703  1A67  0143               	movlb	3	; select bank3
  9704  1A68  0841               	movf	statusView@page^(0+384),w
  9705  1A69  0008               	return
  9706  1A6A                     __end_of_statusView:	
  9707  1A6A                     __ptext50:	
  9708 ;; *************** function _OLED_print_xy *****************
  9709 ;; Defined at:
  9710 ;;		line 150 in file "oled.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;  col             1    wreg     unsigned char 
  9713 ;;  row             1    6[BANK0 ] unsigned char 
  9714 ;;  s               2    7[BANK0 ] PTR unsigned char 
  9715 ;;		 -> STR_21(12), STR_19(13), STR_17(37), STR_6(13), 
  9716 ;;		 -> sBuf1(49), sBuf2(13), STR_2(49), STR_1(13), 
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;  col             1   14[BANK0 ] unsigned char 
  9719 ;;  row_offsets     4   10[BANK0 ] unsigned char [4]
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      void 
  9722 ;; Registers used:
  9723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 3F/0
  9726 ;;		On exit  : 3F/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9729 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9730 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9732 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9733 ;;Total ram usage:        9 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    7
  9736 ;; This function calls:
  9737 ;;		_OLED_command
  9738 ;;		_OLED_write
  9739 ;; This function is called by:
  9740 ;;		_menuError
  9741 ;;		_statusView
  9742 ;;		_channelView
  9743 ;;		_channelSetup
  9744 ;;		_setOutputPower
  9745 ;;		_setLensDia
  9746 ;; This function uses a non-reentrant model
  9747 ;;
  9748                           
  9749                           
  9750                           ;psect for function _OLED_print_xy
  9751  1A6A                     _OLED_print_xy:	
  9752                           
  9753                           ;incstack = 0
  9754                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9755                           ;OLED_print_xy@col stored from wreg
  9756  1A6A  00AE               	movwf	OLED_print_xy@col
  9757                           
  9758                           ;oled.c: 150: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 151: {;oled.
      +                          c: 152:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
  9759  1A6B  0143               	movlb	3	; select bank3
  9760  1A6C  086C               	movf	(OLED_print_xy@F7897+3)^(0+384),w
  9761  1A6D  0140               	movlb	0	; select bank0
  9762  1A6E  00AD               	movwf	OLED_print_xy@row_offsets+3
  9763  1A6F  0143               	movlb	3	; select bank3
  9764  1A70  086B               	movf	(OLED_print_xy@F7897+2)^(0+384),w
  9765  1A71  0140               	movlb	0	; select bank0
  9766  1A72  00AC               	movwf	OLED_print_xy@row_offsets+2
  9767  1A73  0143               	movlb	3	; select bank3
  9768  1A74  086A               	movf	(OLED_print_xy@F7897+1)^(0+384),w
  9769  1A75  0140               	movlb	0	; select bank0
  9770  1A76  00AB               	movwf	OLED_print_xy@row_offsets+1
  9771  1A77  0143               	movlb	3	; select bank3
  9772  1A78  0869               	movf	OLED_print_xy@F7897^(0+384),w
  9773  1A79  0140               	movlb	0	; select bank0
  9774  1A7A  00AA               	movwf	OLED_print_xy@row_offsets
  9775                           
  9776                           ;oled.c: 154:  OLED_command(0x80 | (col + row_offsets[row]));
  9777  1A7B  0826               	movf	OLED_print_xy@row,w
  9778  1A7C  3E2A               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
  9779  1A7D  0086               	movwf	6
  9780  1A7E  0187               	clrf	7
  9781  1A7F  0801               	movf	1,w
  9782  1A80  072E               	addwf	OLED_print_xy@col,w
  9783  1A81  3880               	iorlw	128
  9784  1A82  3189  2190  3198   	fcall	_OLED_command
  9785  1A85                     l5301:	
  9786                           ;oled.c: 155:  while (*s != (char) ((void*)0)) {
  9787                           
  9788                           
  9789                           ;oled.c: 155:  while (*s != (char) ((void*)0)) {
  9790  1A85  0827               	movf	OLED_print_xy@s,w
  9791  1A86  0084               	movwf	4
  9792  1A87  0828               	movf	OLED_print_xy@s+1,w
  9793  1A88  0085               	movwf	5
  9794  1A89  0012               	moviw fsr0++
  9795  1A8A  1903               	btfsc	3,2
  9796  1A8B  0008               	return
  9797                           
  9798                           ;oled.c: 156:   OLED_write(*s++);
  9799  1A8C  0827               	movf	OLED_print_xy@s,w
  9800  1A8D  0084               	movwf	4
  9801  1A8E  0828               	movf	OLED_print_xy@s+1,w
  9802  1A8F  0085               	movwf	5
  9803  1A90  0800               	movf	0,w	;code access
  9804  1A91  3189  21C4  3198   	fcall	_OLED_write
  9805  1A94  0AA7               	incf	OLED_print_xy@s,f
  9806  1A95  1903               	skipnz
  9807  1A96  0AA8               	incf	OLED_print_xy@s+1,f
  9808  1A97  2A85               	goto	l5301
  9809  1A98                     __end_of_OLED_print_xy:	
  9810  1A98                     __ptext15:	
  9811 ;; *************** function _sprintf *****************
  9812 ;; Defined at:
  9813 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_sprintf.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;  s               2   21[BANK2 ] PTR unsigned char 
  9816 ;;		 -> sBuf1(49), sBuf2(13), 
  9817 ;;  fmt             2   23[BANK2 ] PTR const unsigned char 
  9818 ;;		 -> STR_22(14), STR_20(13), STR_18(35), STR_10(10), 
  9819 ;;		 -> STR_8(16), STR_7(15), STR_5(42), STR_4(13), 
  9820 ;;		 -> STR_3(14), 
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;  f               6   46[BANK2 ] struct _IO_FILE
  9823 ;;  ret             2    0        int 
  9824 ;;  ap              1   45[BANK2 ] PTR void [1]
  9825 ;;		 -> ?_sprintf(2), 
  9826 ;; Return value:  Size  Location     Type
  9827 ;;                  2   21[BANK2 ] int 
  9828 ;; Registers used:
  9829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9830 ;; Tracked objects:
  9831 ;;		On entry : 3F/2
  9832 ;;		On exit  : 3F/2
  9833 ;;		Unchanged: 0/0
  9834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9835 ;;      Params:         0       0       0      22       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9836 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9838 ;;      Totals:         0       0       0      31       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9839 ;;Total ram usage:       31 bytes
  9840 ;; Hardware stack levels used:    1
  9841 ;; Hardware stack levels required when called:   10
  9842 ;; This function calls:
  9843 ;;		_vfprintf
  9844 ;; This function is called by:
  9845 ;;		_statusView
  9846 ;;		_channelView
  9847 ;;		_channelSetup
  9848 ;;		_setOutputPower
  9849 ;;		_setLensDia
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function _sprintf
  9855  1A98                     _sprintf:	
  9856                           
  9857                           ;incstack = 0
  9858                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9859  1A98  3039               	movlw	(low ((?_sprintf| (0+256)+4)))& (0+255)
  9860  1A99  00CD               	movwf	sprintf@ap^(0+256)
  9861  1A9A  0836               	movf	(sprintf@s+1)^(0+256),w
  9862  1A9B  00CF               	movwf	(sprintf@f+1)^(0+256)
  9863  1A9C  0835               	movf	sprintf@s^(0+256),w
  9864  1A9D  00CE               	movwf	sprintf@f^(0+256)
  9865  1A9E  01D0               	clrf	(sprintf@f^(0+256)+2)
  9866  1A9F  01D1               	clrf	((sprintf@f+1)^(0+256)+2)
  9867  1AA0  01D2               	clrf	(sprintf@f^(0+256)+4)
  9868  1AA1  01D3               	clrf	((sprintf@f+1)^(0+256)+4)
  9869  1AA2  0838               	movf	(sprintf@fmt+1)^(0+256),w
  9870  1AA3  0141               	movlb	1	; select bank1
  9871  1AA4  00EA               	movwf	(vfprintf@fmt+1)^(0+128)
  9872  1AA5  0142               	movlb	2	; select bank2
  9873  1AA6  0837               	movf	sprintf@fmt^(0+256),w
  9874  1AA7  0141               	movlb	1	; select bank1
  9875  1AA8  00E9               	movwf	vfprintf@fmt^(0+128)
  9876  1AA9  304D               	movlw	(low (sprintf@ap| (0+256)))& (0+255)
  9877  1AAA  00EB               	movwf	vfprintf@ap^(0+128)
  9878  1AAB  304E               	movlw	(low (sprintf@f| (0+256)))& (0+255)
  9879  1AAC  2367               	fcall	_vfprintf
  9880  1AAD  3050               	movlw	((low (sprintf@f| (0+256)))& (0+255)+2)
  9881  1AAE  0086               	movwf	6
  9882  1AAF  3001               	movlw	1	; select bank2/3
  9883  1AB0  0087               	movwf	7
  9884  1AB1  3F40               	moviw [0]fsr1
  9885  1AB2  0142               	movlb	2	; select bank2
  9886  1AB3  0735               	addwf	sprintf@s^(0+256),w
  9887  1AB4  0084               	movwf	4
  9888  1AB5  3F41               	moviw [1]fsr1
  9889  1AB6  3D36               	addwfc	(sprintf@s+1)^(0+256),w
  9890  1AB7  0085               	movwf	5
  9891  1AB8  0180               	clrf	0
  9892  1AB9  0008               	return
  9893  1ABA                     __end_of_sprintf:	
  9894  1ABA                     __ptext44:	
  9895 ;; *************** function _returnToPage *****************
  9896 ;; Defined at:
  9897 ;;		line 298 in file "menu.c"
  9898 ;; Parameters:    Size  Location     Type
  9899 ;;  page            1    wreg     unsigned char 
  9900 ;; Auto vars:     Size  Location     Type
  9901 ;;  page            1    6[BANK0 ] unsigned char 
  9902 ;;  n               1    7[BANK0 ] unsigned char 
  9903 ;; Return value:  Size  Location     Type
  9904 ;;                  1    wreg      void 
  9905 ;; Registers used:
  9906 ;;		wreg, status,2, status,0, pclath, cstack
  9907 ;; Tracked objects:
  9908 ;;		On entry : 3E/3
  9909 ;;		On exit  : 0/0
  9910 ;;		Unchanged: 0/0
  9911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9916 ;;Total ram usage:        2 bytes
  9917 ;; Hardware stack levels used:    1
  9918 ;; Hardware stack levels required when called:    7
  9919 ;; This function calls:
  9920 ;;		_OLED_command
  9921 ;;		___wmul
  9922 ;; This function is called by:
  9923 ;;		_statusView
  9924 ;;		_channelView
  9925 ;;		_channelSetup
  9926 ;;		_setOutputPower
  9927 ;;		_setLensDia
  9928 ;; This function uses a non-reentrant model
  9929 ;;
  9930                           
  9931                           
  9932                           ;psect for function _returnToPage
  9933  1ABA                     _returnToPage:	
  9934                           
  9935                           ;incstack = 0
  9936                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
  9937                           ;returnToPage@page stored from wreg
  9938  1ABA  0140               	movlb	0	; select bank0
  9939  1ABB  00A6               	movwf	returnToPage@page
  9940                           
  9941                           ;menu.c: 298: void returnToPage(uint8_t page);menu.c: 299: {;menu.c: 300:  uint8_t n;;me
      +                          nu.c: 301:  if (! updateScreen)
  9942  1ABC  0143               	movlb	3	; select bank3
  9943  1ABD  086D               	movf	_updateScreen^(0+384),w
  9944  1ABE  1903               	btfsc	3,2
  9945  1ABF  0008               	return
  9946                           
  9947                           ;menu.c: 303:  OLED_command(0x02);
  9948  1AC0  3002               	movlw	2
  9949  1AC1  3189  2190  3198   	fcall	_OLED_command
  9950                           
  9951                           ;menu.c: 304:  for(n = 0; n < 12 * page; n++) {
  9952  1AC4  01A7               	clrf	returnToPage@n
  9953  1AC5                     l5315:	
  9954  1AC5  0826               	movf	returnToPage@page,w
  9955  1AC6  00A0               	movwf	___wmul@multiplier
  9956  1AC7  300C               	movlw	12
  9957  1AC8  01A1               	clrf	___wmul@multiplier+1
  9958  1AC9  00A2               	movwf	___wmul@multiplicand
  9959  1ACA  01A3               	clrf	___wmul@multiplicand+1
  9960  1ACB  21B6  3198         	fcall	___wmul
  9961  1ACD  0821               	movf	?___wmul+1,w
  9962  1ACE  3A80               	xorlw	128
  9963  1ACF  3C80               	sublw	128
  9964  1AD0  1D03               	skipz
  9965  1AD1  2AD4               	goto	u6405
  9966  1AD2  0820               	movf	?___wmul,w
  9967  1AD3  0227               	subwf	returnToPage@n,w
  9968  1AD4                     u6405:	
  9969  1AD4  1803               	btfsc	3,0
  9970  1AD5  0008               	return
  9971                           
  9972                           ;menu.c: 305:   OLED_command(0x10 | 0x08 | 0x00);
  9973  1AD6  3018               	movlw	24
  9974  1AD7  3189  2190  3198   	fcall	_OLED_command
  9975                           
  9976                           ;menu.c: 306:  }
  9977  1ADA  0AA7               	incf	returnToPage@n,f
  9978  1ADB  2AC5               	goto	l5315
  9979  1ADC                     __end_of_returnToPage:	
  9980  1ADC                     __ptext14:	
  9981 ;; *************** function _strcat *****************
  9982 ;; Defined at:
  9983 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strcat.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;  dest            1    wreg     PTR unsigned char 
  9986 ;;		 -> sBuf1(49), 
  9987 ;;  src             1   17[BANK0 ] PTR const unsigned char 
  9988 ;;		 -> sBuf2(13), 
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;  dest            1   20[BANK0 ] PTR unsigned char 
  9991 ;;		 -> sBuf1(49), 
  9992 ;; Return value:  Size  Location     Type
  9993 ;;                  1    wreg      PTR unsigned char 
  9994 ;; Registers used:
  9995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9996 ;; Tracked objects:
  9997 ;;		On entry : 3F/0
  9998 ;;		On exit  : 3F/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10001 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10002 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10004 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10005 ;;Total ram usage:        4 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:    4
 10008 ;; This function calls:
 10009 ;;		_strcpy
 10010 ;;		_strlen
 10011 ;; This function is called by:
 10012 ;;		_channelView
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           
 10017                           ;psect for function _strcat
 10018  1ADC                     _strcat:	
 10019                           
 10020                           ;incstack = 0
 10021                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10022                           ;strcat@dest stored from wreg
 10023  1ADC  00B4               	movwf	strcat@dest
 10024  1ADD  00A0               	movwf	strlen@s
 10025  1ADE  3003               	movlw	3
 10026  1ADF  00A1               	movwf	strlen@s+1
 10027  1AE0  2351               	fcall	_strlen
 10028  1AE1  0820               	movf	?_strlen,w
 10029  1AE2  00B2               	movwf	??_strcat
 10030  1AE3  0821               	movf	?_strlen+1,w
 10031  1AE4  00B3               	movwf	??_strcat+1
 10032  1AE5  0834               	movf	strcat@dest,w
 10033  1AE6  0732               	addwf	??_strcat,w
 10034  1AE7  00A5               	movwf	strcpy@dest
 10035  1AE8  3003               	movlw	3
 10036  1AE9  00A6               	movwf	strcpy@dest+1
 10037  1AEA  0831               	movf	strcat@src,w
 10038  1AEB  00A7               	movwf	strcpy@src
 10039  1AEC  3001               	movlw	1
 10040  1AED  00A8               	movwf	strcpy@src+1
 10041  1AEE  3195  2D34         	ljmp	l6139
 10042  1AF0                     __end_of_strcat:	
 10043  1AF0                     __ptext46:	
 10044 ;; *************** function _paging *****************
 10045 ;; Defined at:
 10046 ;;		line 268 in file "menu.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  currentPage     1    wreg     unsigned char 
 10049 ;;  lastPage        1    6[BANK0 ] const unsigned char 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  currentPage     1    9[BANK0 ] unsigned char 
 10052 ;;  n               1   11[BANK0 ] unsigned char 
 10053 ;;  dir             1   10[BANK0 ] enum E7873
 10054 ;; Return value:  Size  Location     Type
 10055 ;;                  1    wreg      unsigned char 
 10056 ;; Registers used:
 10057 ;;		wreg, status,2, status,0, pclath, cstack
 10058 ;; Tracked objects:
 10059 ;;		On entry : 3F/3
 10060 ;;		On exit  : 3F/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10063 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10064 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10065 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10066 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10067 ;;Total ram usage:        6 bytes
 10068 ;; Hardware stack levels used:    1
 10069 ;; Hardware stack levels required when called:    8
 10070 ;; This function calls:
 10071 ;;		_OLED_scrollDisplayLeft
 10072 ;;		_OLED_scrollDisplayRight
 10073 ;;		_getRotDir
 10074 ;; This function is called by:
 10075 ;;		_statusView
 10076 ;;		_channelView
 10077 ;;		_channelSetup
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           
 10082                           ;psect for function _paging
 10083  1AF0                     _paging:	
 10084                           
 10085                           ;incstack = 0
 10086                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 10087                           ;paging@currentPage stored from wreg
 10088  1AF0  0140               	movlb	0	; select bank0
 10089  1AF1  00A9               	movwf	paging@currentPage
 10090                           
 10091                           ;menu.c: 268: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menu.c: 269: {
      +                          ;menu.c: 270:  uint8_t n;;menu.c: 271:  static enum e_direction lastDir;;menu.c: 272:  e
      +                          num e_direction dir;;menu.c: 274:  PIE0bits.IOCIE = 0;
 10092  1AF2  014E               	movlb	14	; select bank14
 10093  1AF3  1216               	bcf	22,4	;volatile
 10094                           
 10095                           ;menu.c: 275:  dir = getRotDir();
 10096  1AF4  2348  3198         	fcall	_getRotDir
 10097  1AF6  00AA               	movwf	paging@dir
 10098                           
 10099                           ;menu.c: 277:  if (dir == lastDir) {
 10100  1AF7  0143               	movlb	3	; select bank3
 10101  1AF8  063E               	xorwf	paging@lastDir^(0+384),w
 10102  1AF9  1D03               	skipz
 10103  1AFA  2B39               	goto	l5375
 10104                           
 10105                           ;menu.c: 278:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 10106  1AFB  0140               	movlb	0	; select bank0
 10107  1AFC  0B2A               	decfsz	paging@dir,w
 10108  1AFD  2B20               	goto	l5355
 10109  1AFE  0826               	movf	paging@lastPage,w
 10110  1AFF  3EFF               	addlw	255
 10111  1B00  00A7               	movwf	??_paging
 10112  1B01  30FF               	movlw	255
 10113  1B02  1803               	skipnc
 10114  1B03  3000               	movlw	0
 10115  1B04  00A8               	movwf	??_paging+1
 10116  1B05  3A80               	xorlw	128
 10117  1B06  3C80               	sublw	128
 10118  1B07  1D03               	skipz
 10119  1B08  2B0B               	goto	u6435
 10120  1B09  0827               	movf	??_paging,w
 10121  1B0A  0229               	subwf	paging@currentPage,w
 10122  1B0B                     u6435:	
 10123  1B0B  1803               	skipnc
 10124  1B0C  2B20               	goto	l5355
 10125                           
 10126                           ;menu.c: 279:    currentPage++;
 10127  1B0D  0140               	movlb	0	; select bank0
 10128  1B0E  0AA9               	incf	paging@currentPage,f
 10129                           
 10130                           ;menu.c: 280:    for(n = 0; n < 12; n++) {
 10131  1B0F  01AB               	clrf	paging@n
 10132  1B10                     l5347:	
 10133                           
 10134                           ;menu.c: 281:     OLED_scrollDisplayLeft();
 10135  1B10  2342  3198         	fcall	_OLED_scrollDisplayLeft
 10136                           
 10137                           ;menu.c: 282:     _delay((unsigned long)((20)*(4000000/4000.0)));
 10138  1B12  301A               	movlw	26
 10139  1B13  0140               	movlb	0	; select bank0
 10140  1B14  00A7               	movwf	??_paging
 10141  1B15  30F8               	movlw	248
 10142  1B16                     u8077:	
 10143  1B16  0B89               	decfsz	9,f
 10144  1B17  2B16               	goto	u8077
 10145  1B18  0BA7               	decfsz	??_paging,f
 10146  1B19  2B16               	goto	u8077
 10147  1B1A  0000               	nop
 10148                           
 10149                           ;menu.c: 283:    }
 10150  1B1B  270F  3198         	fcall	PL208	;call to abstracted procedure
 10151  1B1D  1803               	btfsc	3,0
 10152  1B1E  2B39               	goto	l5375
 10153  1B1F  2B10               	goto	l5347
 10154  1B20                     l5355:	
 10155  1B20  3002               	movlw	2
 10156  1B21  0140               	movlb	0	; select bank0
 10157  1B22  062A               	xorwf	paging@dir,w
 10158  1B23  1D03               	btfss	3,2
 10159  1B24  2B39               	goto	l5375
 10160  1B25  0829               	movf	paging@currentPage,w
 10161  1B26  1903               	btfsc	3,2
 10162  1B27  2B39               	goto	l5375
 10163                           
 10164                           ;menu.c: 286:    currentPage--;
 10165  1B28  03A9               	decf	paging@currentPage,f
 10166                           
 10167                           ;menu.c: 287:    for(n = 0; n < 12; n++) {
 10168  1B29  01AB               	clrf	paging@n
 10169  1B2A                     l5367:	
 10170                           
 10171                           ;menu.c: 288:     OLED_scrollDisplayRight();
 10172  1B2A  2345  3198         	fcall	_OLED_scrollDisplayRight
 10173                           
 10174                           ;menu.c: 289:     _delay((unsigned long)((20)*(4000000/4000.0)));
 10175  1B2C  301A               	movlw	26
 10176  1B2D  0140               	movlb	0	; select bank0
 10177  1B2E  00A7               	movwf	??_paging
 10178  1B2F  30F8               	movlw	248
 10179  1B30                     u8087:	
 10180  1B30  0B89               	decfsz	9,f
 10181  1B31  2B30               	goto	u8087
 10182  1B32  0BA7               	decfsz	??_paging,f
 10183  1B33  2B30               	goto	u8087
 10184  1B34  0000               	nop
 10185                           
 10186                           ;menu.c: 290:    }
 10187  1B35  270F  3198         	fcall	PL208	;call to abstracted procedure
 10188  1B37  1C03               	skipc
 10189  1B38  2B2A               	goto	l5367
 10190  1B39                     l5375:	
 10191                           
 10192                           ;menu.c: 293:  lastDir = dir;
 10193  1B39  0140               	movlb	0	; select bank0
 10194  1B3A  082A               	movf	paging@dir,w
 10195  1B3B  0143               	movlb	3	; select bank3
 10196  1B3C  00BE               	movwf	paging@lastDir^(0+384)
 10197                           
 10198                           ;menu.c: 294:  PIE0bits.IOCIE = 1;
 10199  1B3D  014E               	movlb	14	; select bank14
 10200  1B3E  1616               	bsf	22,4	;volatile
 10201                           
 10202                           ;menu.c: 295:  return currentPage;
 10203  1B3F  0140               	movlb	0	; select bank0
 10204  1B40  0829               	movf	paging@currentPage,w
 10205  1B41  0008               	return
 10206  1B42                     __end_of_paging:	
 10207  1B42                     __ptext49:	
 10208 ;; *************** function _OLED_scrollDisplayLeft *****************
 10209 ;; Defined at:
 10210 ;;		line 126 in file "oled.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;		None
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;		None
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		wreg, status,2, status,0, pclath, cstack
 10219 ;; Tracked objects:
 10220 ;;		On entry : 3F/0
 10221 ;;		On exit  : 3F/0
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10228 ;;Total ram usage:        0 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; Hardware stack levels required when called:    7
 10231 ;; This function calls:
 10232 ;;		_OLED_command
 10233 ;; This function is called by:
 10234 ;;		_paging
 10235 ;; This function uses a non-reentrant model
 10236 ;;
 10237                           
 10238                           
 10239                           ;psect for function _OLED_scrollDisplayLeft
 10240  1B42                     _OLED_scrollDisplayLeft:	
 10241                           
 10242                           ;oled.c: 128:  OLED_command(0x10 | 0x08 | 0x00);
 10243                           
 10244                           ;incstack = 0
 10245                           ; Regs used in _OLED_scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
 10246  1B42  3018               	movlw	24
 10247  1B43  3189  2990         	ljmp	_OLED_command
 10248  1B45                     __end_of_OLED_scrollDisplayLeft:	
 10249  1B45                     __ptext48:	
 10250 ;; *************** function _OLED_scrollDisplayRight *****************
 10251 ;; Defined at:
 10252 ;;		line 131 in file "oled.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  1    wreg      void 
 10259 ;; Registers used:
 10260 ;;		wreg, status,2, status,0, pclath, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 3F/0
 10263 ;;		On exit  : 3F/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10270 ;;Total ram usage:        0 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    7
 10273 ;; This function calls:
 10274 ;;		_OLED_command
 10275 ;; This function is called by:
 10276 ;;		_paging
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           
 10281                           ;psect for function _OLED_scrollDisplayRight
 10282  1B45                     _OLED_scrollDisplayRight:	
 10283                           
 10284                           ;oled.c: 133:  OLED_command(0x10 | 0x08 | 0x04);
 10285                           
 10286                           ;incstack = 0
 10287                           ; Regs used in _OLED_scrollDisplayRight: [wreg+status,2+status,0+pclath+cstack]
 10288  1B45  301C               	movlw	28
 10289  1B46  3189  2990         	ljmp	_OLED_command
 10290  1B48                     __end_of_OLED_scrollDisplayRight:	
 10291  1B48                     __ptext47:	
 10292 ;; *************** function _getRotDir *****************
 10293 ;; Defined at:
 10294 ;;		line 58 in file "inputs.c"
 10295 ;; Parameters:    Size  Location     Type
 10296 ;;		None
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;  ret             1    0[BANK0 ] enum E7845
 10299 ;; Return value:  Size  Location     Type
 10300 ;;                  1    wreg      enum E7845
 10301 ;; Registers used:
 10302 ;;		wreg, status,2
 10303 ;; Tracked objects:
 10304 ;;		On entry : 30/1
 10305 ;;		On exit  : 3F/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10311 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10312 ;;Total ram usage:        1 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; Hardware stack levels required when called:    3
 10315 ;; This function calls:
 10316 ;;		Nothing
 10317 ;; This function is called by:
 10318 ;;		_spinInput
 10319 ;;		_paging
 10320 ;; This function uses a non-reentrant model
 10321 ;;
 10322                           
 10323                           
 10324                           ;psect for function _getRotDir
 10325  1B48                     _getRotDir:	
 10326                           
 10327                           ;inputs.c: 60:  enum e_direction ret = g_rotDir;
 10328                           
 10329                           ;incstack = 0
 10330                           ; Regs used in _getRotDir: [wreg+status,2]
 10331  1B48  0143               	movlb	3	; select bank3
 10332  1B49  084A               	movf	_g_rotDir^(0+384),w	;volatile
 10333  1B4A  0140               	movlb	0	; select bank0
 10334  1B4B  00A0               	movwf	getRotDir@ret
 10335                           
 10336                           ;inputs.c: 61:  g_rotDir = ROT_STOP;
 10337  1B4C  0143               	movlb	3	; select bank3
 10338  1B4D  01CA               	clrf	_g_rotDir^(0+384)	;volatile
 10339                           
 10340                           ;inputs.c: 62:  return ret;
 10341  1B4E  0140               	movlb	0	; select bank0
 10342  1B4F  0820               	movf	getRotDir@ret,w
 10343  1B50  0008               	return
 10344  1B51                     __end_of_getRotDir:	
 10345  1B51                     __ptext34:	
 10346 ;; *************** function _strlen *****************
 10347 ;; Defined at:
 10348 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strlen.c"
 10349 ;; Parameters:    Size  Location     Type
 10350 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 10351 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(80), STR_12(7), 
 10352 ;;		 -> STR_11(7), sBuf1(49), sBuf2(13), 
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 10355 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(80), STR_12(7), 
 10356 ;;		 -> STR_11(7), sBuf1(49), sBuf2(13), 
 10357 ;; Return value:  Size  Location     Type
 10358 ;;                  2    0[BANK0 ] unsigned int 
 10359 ;; Registers used:
 10360 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10361 ;; Tracked objects:
 10362 ;;		On entry : 3F/0
 10363 ;;		On exit  : 3F/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10366 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10367 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10369 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10370 ;;Total ram usage:        5 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    3
 10373 ;; This function calls:
 10374 ;;		Nothing
 10375 ;; This function is called by:
 10376 ;;		_pad
 10377 ;;		_stoa
 10378 ;;		_strcat
 10379 ;; This function uses a non-reentrant model
 10380 ;;
 10381                           
 10382                           
 10383                           ;psect for function _strlen
 10384  1B51                     _strlen:	
 10385                           
 10386                           ;incstack = 0
 10387                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 10388  1B51  0821               	movf	strlen@s+1,w
 10389  1B52  00A4               	movwf	strlen@a+1
 10390  1B53  0820               	movf	strlen@s,w
 10391  1B54  00A3               	movwf	strlen@a
 10392  1B55                     l3791:	
 10393  1B55  0820               	movf	strlen@s,w
 10394  1B56  0084               	movwf	4
 10395  1B57  0821               	movf	strlen@s+1,w
 10396  1B58  0085               	movwf	5
 10397  1B59  0012               	moviw fsr0++
 10398  1B5A  1903               	btfsc	3,2
 10399  1B5B  2B60               	goto	l3793
 10400  1B5C  0AA0               	incf	strlen@s,f
 10401  1B5D  1903               	skipnz
 10402  1B5E  0AA1               	incf	strlen@s+1,f
 10403  1B5F  2B55               	goto	l3791
 10404  1B60                     l3793:	
 10405  1B60  0823               	movf	strlen@a,w
 10406  1B61  0220               	subwf	strlen@s,w
 10407  1B62  00A0               	movwf	?_strlen
 10408  1B63  0824               	movf	strlen@a+1,w
 10409  1B64  3B21               	subwfb	strlen@s+1,w
 10410  1B65  00A1               	movwf	?_strlen+1
 10411  1B66  0008               	return
 10412  1B67                     __end_of_strlen:	
 10413  1B67                     __ptext16:	
 10414 ;; *************** function _vfprintf *****************
 10415 ;; Defined at:
 10416 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  fp              1    wreg     PTR struct _IO_FILE
 10419 ;;		 -> sprintf@f(6), 
 10420 ;;  fmt             2   73[BANK1 ] PTR const unsigned char 
 10421 ;;		 -> STR_22(14), STR_20(13), STR_18(35), STR_10(10), 
 10422 ;;		 -> STR_8(16), STR_7(15), STR_5(42), STR_4(13), 
 10423 ;;		 -> STR_3(14), 
 10424 ;;  ap              1   75[BANK1 ] PTR PTR void 
 10425 ;;		 -> sprintf@ap(1), 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  fp              1   77[BANK1 ] PTR struct _IO_FILE
 10428 ;;		 -> sprintf@f(6), 
 10429 ;;  cfmt            2   78[BANK1 ] PTR unsigned char 
 10430 ;;		 -> STR_22(14), STR_20(13), STR_18(35), STR_10(10), 
 10431 ;;		 -> STR_8(16), STR_7(15), STR_5(42), STR_4(13), 
 10432 ;;		 -> STR_3(14), 
 10433 ;; Return value:  Size  Location     Type
 10434 ;;                  2   73[BANK1 ] int 
 10435 ;; Registers used:
 10436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10437 ;; Tracked objects:
 10438 ;;		On entry : 3F/1
 10439 ;;		On exit  : 3F/1
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10442 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10443 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10444 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10445 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10446 ;;Total ram usage:        7 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; Hardware stack levels required when called:    9
 10449 ;; This function calls:
 10450 ;;		_vfpfcnvrt
 10451 ;; This function is called by:
 10452 ;;		_sprintf
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           
 10457                           ;psect for function _vfprintf
 10458  1B67                     _vfprintf:	
 10459                           
 10460                           ;incstack = 0
 10461                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10462                           ;vfprintf@fp stored from wreg
 10463  1B67  00ED               	movwf	vfprintf@fp^(0+128)
 10464                           
 10465                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.00\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 10466  1B68  086A               	movf	(vfprintf@fmt+1)^(0+128),w
 10467  1B69  00EF               	movwf	(vfprintf@cfmt+1)^(0+128)
 10468  1B6A  0869               	movf	vfprintf@fmt^(0+128),w
 10469  1B6B  00EE               	movwf	vfprintf@cfmt^(0+128)
 10470                           
 10471                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 10472  1B6C  0143               	movlb	3	; select bank3
 10473  1B6D  01B4               	clrf	_nout^(0+384)
 10474  1B6E  01B5               	clrf	(_nout+1)^(0+384)
 10475  1B6F                     l6577:	
 10476                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 10477                           
 10478                           
 10479                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 10480  1B6F  0141               	movlb	1	; select bank1
 10481  1B70  086E               	movf	vfprintf@cfmt^(0+128),w
 10482  1B71  0084               	movwf	4
 10483  1B72  086F               	movf	(vfprintf@cfmt+1)^(0+128),w
 10484  1B73  0085               	movwf	5
 10485  1B74  0012               	moviw fsr0++
 10486  1B75  1903               	btfsc	3,2
 10487  1B76  2B86               	goto	l6579
 10488                           
 10489                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 10490  1B77  30EE               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 10491  1B78  00E3               	movwf	vfpfcnvrt@fmt^(0+128)
 10492  1B79  086B               	movf	vfprintf@ap^(0+128),w
 10493  1B7A  00E4               	movwf	vfpfcnvrt@ap^(0+128)
 10494  1B7B  086D               	movf	vfprintf@fp^(0+128),w
 10495  1B7C  238F  3198         	fcall	_vfpfcnvrt
 10496  1B7E  0863               	movf	?_vfpfcnvrt^(0+128),w
 10497  1B7F  0143               	movlb	3	; select bank3
 10498  1B80  07B4               	addwf	_nout^(0+384),f
 10499  1B81  0141               	movlb	1	; select bank1
 10500  1B82  0864               	movf	(?_vfpfcnvrt+1)^(0+128),w
 10501  1B83  0143               	movlb	3	; select bank3
 10502  1B84  3DB5               	addwfc	(_nout+1)^(0+384),f
 10503  1B85  2B6F               	goto	l6577
 10504  1B86                     l6579:	
 10505                           
 10506                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 10507  1B86  0143               	movlb	3	; select bank3
 10508  1B87  0835               	movf	(_nout+1)^(0+384),w
 10509  1B88  0141               	movlb	1	; select bank1
 10510  1B89  00EA               	movwf	(?_vfprintf+1)^(0+128)
 10511  1B8A  0143               	movlb	3	; select bank3
 10512  1B8B  0834               	movf	_nout^(0+384),w
 10513  1B8C  0141               	movlb	1	; select bank1
 10514  1B8D  00E9               	movwf	?_vfprintf^(0+128)
 10515  1B8E  0008               	return
 10516  1B8F                     __end_of_vfprintf:	
 10517  1B8F                     __ptext17:	
 10518 ;; *************** function _vfpfcnvrt *****************
 10519 ;; Defined at:
 10520 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;  fp              1    wreg     PTR struct _IO_FILE
 10523 ;;		 -> sprintf@f(6), 
 10524 ;;  fmt             1   67[BANK1 ] PTR PTR unsigned char 
 10525 ;;		 -> vfprintf@cfmt(2), 
 10526 ;;  ap              1   68[BANK1 ] PTR PTR void 
 10527 ;;		 -> sprintf@ap(1), 
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;  fp              1   20[BANK2 ] PTR struct _IO_FILE
 10530 ;;		 -> sprintf@f(6), 
 10531 ;;  f               4   15[BANK2 ] PTR struct _IO_FILE
 10532 ;;  ll              4    0[BANK2 ] long 
 10533 ;;  llu             4    0        unsigned long 
 10534 ;;  ct              3   12[BANK2 ] unsigned char [3]
 10535 ;;  cp              2    4[BANK2 ] PTR unsigned char 
 10536 ;;		 -> ?_sprintf(2), STR_12(7), STR_11(7), sBuf2(13), 
 10537 ;;  vp              2    0        PTR void 
 10538 ;;  i               2    0        int 
 10539 ;;  done            2    0        int 
 10540 ;;  c               1   19[BANK2 ] unsigned char 
 10541 ;; Return value:  Size  Location     Type
 10542 ;;                  2   67[BANK1 ] int 
 10543 ;; Registers used:
 10544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10545 ;; Tracked objects:
 10546 ;;		On entry : 3F/1
 10547 ;;		On exit  : 3F/1
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10550 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10551 ;;      Locals:         0       0       0      21       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10552 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10553 ;;      Totals:         0       0       6      21       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10554 ;;Total ram usage:       27 bytes
 10555 ;; Hardware stack levels used:    1
 10556 ;; Hardware stack levels required when called:    8
 10557 ;; This function calls:
 10558 ;;		_atoi
 10559 ;;		_dtoa
 10560 ;;		_efgtoa
 10561 ;;		_fputc
 10562 ;;		_isdigit
 10563 ;;		_isupper
 10564 ;;		_stoa
 10565 ;;		_strncmp
 10566 ;;		_tolower
 10567 ;; This function is called by:
 10568 ;;		_vfprintf
 10569 ;; This function uses a non-reentrant model
 10570 ;;
 10571                           
 10572                           
 10573                           ;psect for function _vfpfcnvrt
 10574  1B8F                     _vfpfcnvrt:	
 10575                           
 10576                           ;incstack = 0
 10577                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10578                           ;vfpfcnvrt@fp stored from wreg
 10579  1B8F  0142               	movlb	2	; select bank2
 10580  1B90  00B4               	movwf	vfpfcnvrt@fp^(0+256)
 10581                           
 10582                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.00\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.00\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 10583  1B91  0141               	movlb	1	; select bank1
 10584  1B92  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10585  1B94  0012               	moviw fsr0++
 10586  1B95  3A25               	xorlw	37
 10587  1B96  1D03               	btfss	3,2
 10588  1B97  2D0E               	goto	l6563
 10589                           
 10590                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 10591  1B98  2631  3198         	fcall	PL26	;call to abstracted procedure
 10592  1B9A  1803               	skipnc
 10593  1B9B  0A81               	incf	1,f
 10594                           
 10595                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 10596  1B9C  0143               	movlb	3	; select bank3
 10597  1B9D  01B6               	clrf	_width^(0+384)
 10598  1B9E  01B7               	clrf	(_width+1)^(0+384)
 10599  1B9F  0142               	movlb	2	; select bank2
 10600  1BA0  30FF               	movlw	255
 10601  1BA1  01EE               	clrf	_flags^(0+256)
 10602  1BA2  01EF               	clrf	(_flags+1)^(0+256)
 10603                           
 10604                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 10605  1BA3  00FB               	movwf	_prec
 10606  1BA4  00FC               	movwf	_prec+1
 10607                           
 10608                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
 10609  1BA5  0141               	movlb	1	; select bank1
 10610  1BA6  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10611  1BA8  0012               	moviw fsr0++
 10612  1BA9  3A2A               	xorlw	42
 10613  1BAA  1D03               	btfss	3,2
 10614  1BAB  2BBE               	goto	l6453
 10615                           
 10616                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
 10617  1BAC  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 10618                           
 10619                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
 10620  1BAD  260B  3198         	fcall	PL6	;call to abstracted procedure
 10621  1BAF  0143               	movlb	3	; select bank3
 10622  1BB0  00B6               	movwf	_width^(0+384)
 10623  1BB1  3F01               	moviw [1]fsr0
 10624  1BB2  00B7               	movwf	(_width+1)^(0+384)
 10625                           
 10626                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
 10627  1BB3  1FB7               	btfss	(_width+1)^(0+384),7
 10628  1BB4  2BD9               	goto	l6463
 10629                           
 10630                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
 10631  1BB5  0142               	movlb	2	; select bank2
 10632  1BB6  146E               	bsf	_flags^(0+256),0
 10633                           
 10634                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
 10635  1BB7  0143               	movlb	3	; select bank3
 10636  1BB8  09B6               	comf	_width^(0+384),f
 10637  1BB9  09B7               	comf	(_width+1)^(0+384),f
 10638  1BBA  0AB6               	incf	_width^(0+384),f
 10639  1BBB  1903               	skipnz
 10640  1BBC  0AB7               	incf	(_width+1)^(0+384),f
 10641  1BBD  2BD9               	goto	l6463
 10642  1BBE                     l6453:	
 10643                           
 10644                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
 10645  1BBE  26A7  3198         	fcall	PL98	;call to abstracted procedure
 10646  1BC0  2538  3198         	fcall	_atoi
 10647  1BC2  0827               	movf	?_atoi+1,w
 10648  1BC3  0143               	movlb	3	; select bank3
 10649  1BC4  00B7               	movwf	(_width+1)^(0+384)
 10650  1BC5  0140               	movlb	0	; select bank0
 10651  1BC6  0826               	movf	?_atoi,w
 10652  1BC7  0143               	movlb	3	; select bank3
 10653  1BC8  00B6               	movwf	_width^(0+384)
 10654                           
 10655                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
 10656  1BC9  2BCF               	goto	l6457
 10657  1BCA                     l6455:	
 10658                           
 10659                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
 10660  1BCA  0141               	movlb	1	; select bank1
 10661  1BCB  2631  3198         	fcall	PL26	;call to abstracted procedure
 10662  1BCD  1803               	skipnc
 10663  1BCE  0A81               	incf	1,f
 10664  1BCF                     l6457:	
 10665  1BCF  0141               	movlb	1	; select bank1
 10666  1BD0  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10667  1BD2  2658  3198         	fcall	PL42	;call to abstracted procedure
 10668  1BD4  00A6               	movwf	_vfpfcnvrt$1333^(0+256)
 10669  1BD5  01A7               	clrf	(_vfpfcnvrt$1333+1)^(0+256)
 10670  1BD6  0427               	iorwf	(_vfpfcnvrt$1333+1)^(0+256),w
 10671  1BD7  1D03               	btfss	3,2
 10672  1BD8  2BCA               	goto	l6455
 10673  1BD9                     l6463:	
 10674                           
 10675                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 740:       
      +                            if ((*fmt)[0] == '.') {
 10676  1BD9  0141               	movlb	1	; select bank1
 10677  1BDA  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10678  1BDC  0012               	moviw fsr0++
 10679  1BDD  3A2E               	xorlw	46
 10680  1BDE  1D03               	btfss	3,2
 10681  1BDF  2C0B               	goto	l6485
 10682                           
 10683                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 741:       
      +                                prec = 0;
 10684  1BE0  01FB               	clrf	_prec
 10685  1BE1  01FC               	clrf	_prec+1
 10686                           
 10687                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 742:       
      +                                ++*fmt;
 10688  1BE2  2631  3198         	fcall	PL26	;call to abstracted procedure
 10689  1BE4  1803               	skipnc
 10690  1BE5  0A81               	incf	1,f
 10691                           
 10692                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 743:       
      +                                if ((*fmt)[0] == '*') {
 10693  1BE6  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10694  1BE8  0012               	moviw fsr0++
 10695  1BE9  3A2A               	xorlw	42
 10696  1BEA  1D03               	btfss	3,2
 10697  1BEB  2BF3               	goto	l6475
 10698                           
 10699                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 744:       
      +                                    ++*fmt;
 10700  1BEC  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 10701                           
 10702                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 745:       
      +                                    prec = (*(int *)__va_arg(*(int **)ap, (int)0));
 10703  1BED  260B  3198         	fcall	PL6	;call to abstracted procedure
 10704  1BEF  00FB               	movwf	_prec
 10705  1BF0  3F01               	moviw [1]fsr0
 10706  1BF1  00FC               	movwf	_prec+1
 10707                           
 10708                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 746:       
      +                                } else {
 10709  1BF2  2C0B               	goto	l6485
 10710  1BF3                     l6475:	
 10711                           
 10712                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 747:       
      +                                    prec = atoi(*fmt);
 10713  1BF3  26A7  3198         	fcall	PL98	;call to abstracted procedure
 10714  1BF5  2538  3198         	fcall	_atoi
 10715  1BF7  0827               	movf	?_atoi+1,w
 10716  1BF8  00FC               	movwf	_prec+1
 10717  1BF9  0826               	movf	?_atoi,w
 10718  1BFA  00FB               	movwf	_prec
 10719                           
 10720                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 748:       
      +                                    while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
 10721  1BFB  2C01               	goto	l6479
 10722  1BFC                     l6477:	
 10723                           
 10724                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 749:       
      +                                        ++*fmt;
 10725  1BFC  0141               	movlb	1	; select bank1
 10726  1BFD  2631  3198         	fcall	PL26	;call to abstracted procedure
 10727  1BFF  1803               	skipnc
 10728  1C00  0A81               	incf	1,f
 10729  1C01                     l6479:	
 10730  1C01  0141               	movlb	1	; select bank1
 10731  1C02  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10732  1C04  2658  3198         	fcall	PL42	;call to abstracted procedure
 10733  1C06  00A8               	movwf	_vfpfcnvrt$1334^(0+256)
 10734  1C07  01A9               	clrf	(_vfpfcnvrt$1334+1)^(0+256)
 10735  1C08  0429               	iorwf	(_vfpfcnvrt$1334+1)^(0+256),w
 10736  1C09  1D03               	btfss	3,2
 10737  1C0A  2BFC               	goto	l6477
 10738  1C0B                     l6485:	
 10739                           
 10740                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 757:       
      +                            ct[0] = tolower((int)(*fmt)[0]);
 10741  1C0B  0141               	movlb	1	; select bank1
 10742  1C0C  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10743  1C0E  0800               	movf	0,w	;code access
 10744  1C0F  0140               	movlb	0	; select bank0
 10745  1C10  00A4               	movwf	tolower@c
 10746  1C11  01A5               	clrf	tolower@c+1
 10747  1C12  251D  3198         	fcall	_tolower
 10748  1C14  0824               	movf	?_tolower,w
 10749  1C15  0142               	movlb	2	; select bank2
 10750  1C16  00AC               	movwf	vfpfcnvrt@ct^(0+256)
 10751                           
 10752                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 758:       
      +                            if (ct[0]) {
 10753  1C17  082C               	movf	vfpfcnvrt@ct^(0+256),w
 10754  1C18  1903               	btfsc	3,2
 10755  1C19  2C3B               	goto	l6495
 10756                           
 10757                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 759:       
      +                                ct[1] = tolower((int)(*fmt)[1]);
 10758  1C1A  0141               	movlb	1	; select bank1
 10759  1C1B  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 10760  1C1C  2604  3198         	fcall	PL4	;call to abstracted procedure
 10761  1C1E  3001               	movlw	1
 10762  1C1F  2690  3198         	fcall	PL82	;call to abstracted procedure
 10763  1C21  0140               	movlb	0	; select bank0
 10764  1C22  00A4               	movwf	tolower@c
 10765  1C23  01A5               	clrf	tolower@c+1
 10766  1C24  251D  3198         	fcall	_tolower
 10767  1C26  0824               	movf	?_tolower,w
 10768  1C27  0142               	movlb	2	; select bank2
 10769  1C28  00AD               	movwf	(vfpfcnvrt@ct^(0+256)+1)
 10770                           
 10771                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 760:       
      +                                if (ct[1]) {
 10772  1C29  082D               	movf	(vfpfcnvrt@ct^(0+256)+1),w
 10773  1C2A  1903               	btfsc	3,2
 10774  1C2B  2C3B               	goto	l6495
 10775                           
 10776                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 761:       
      +                                    ct[2] = tolower((int)(*fmt)[2]);
 10777  1C2C  0141               	movlb	1	; select bank1
 10778  1C2D  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 10779  1C2E  2604  3198         	fcall	PL4	;call to abstracted procedure
 10780  1C30  3002               	movlw	2
 10781  1C31  2690  3198         	fcall	PL82	;call to abstracted procedure
 10782  1C33  0140               	movlb	0	; select bank0
 10783  1C34  00A4               	movwf	tolower@c
 10784  1C35  01A5               	clrf	tolower@c+1
 10785  1C36  251D  3198         	fcall	_tolower
 10786  1C38  0824               	movf	?_tolower,w
 10787  1C39  0142               	movlb	2	; select bank2
 10788  1C3A  00AE               	movwf	(vfpfcnvrt@ct^(0+256)+2)
 10789  1C3B                     l6495:	
 10790                           
 10791                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 10792  1C3B  0141               	movlb	1	; select bank1
 10793  1C3C  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10794  1C3E  0012               	moviw fsr0++
 10795  1C3F  3A64               	xorlw	100
 10796  1C40  1903               	btfsc	3,2
 10797  1C41  2C48               	goto	l6499
 10798  1C42  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10799  1C44  0012               	moviw fsr0++
 10800  1C45  3A69               	xorlw	105
 10801  1C46  1D03               	btfss	3,2
 10802  1C47  2C73               	goto	l6507
 10803  1C48                     l6499:	
 10804                           
 10805                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
 10806  1C48  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 10807                           
 10808                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 10809  1C49  260B               	fcall	PL6	;call to abstracted procedure
 10810  1C4A  00E5               	movwf	??_vfpfcnvrt^(0+128)
 10811  1C4B  3F01               	moviw [1]fsr0
 10812  1C4C  00E6               	movwf	(??_vfpfcnvrt^(0+128)+1)
 10813  1C4D  0865               	movf	??_vfpfcnvrt^(0+128),w
 10814  1C4E  0142               	movlb	2	; select bank2
 10815  1C4F  00A0               	movwf	vfpfcnvrt@ll^(0+256)
 10816  1C50  0141               	movlb	1	; select bank1
 10817  1C51  0866               	movf	(??_vfpfcnvrt+1)^(0+128),w
 10818  1C52  0142               	movlb	2	; select bank2
 10819  1C53  00A1               	movwf	(vfpfcnvrt@ll+1)^(0+256)
 10820  1C54  0D89               	rlf	9,f
 10821  1C55  3B89               	subwfb	9,f
 10822  1C56  0989               	comf	9,f
 10823  1C57  00A2               	movwf	(vfpfcnvrt@ll+2)^(0+256)
 10824  1C58  00A3               	movwf	(vfpfcnvrt@ll+3)^(0+256)
 10825                           
 10826                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
 10827  1C59  0140               	movlb	0	; select bank0
 10828  1C5A  00BA               	movwf	dtoa@d+3
 10829  1C5B  0142               	movlb	2	; select bank2
 10830  1C5C  0822               	movf	(vfpfcnvrt@ll+2)^(0+256),w
 10831  1C5D  0140               	movlb	0	; select bank0
 10832  1C5E  00B9               	movwf	dtoa@d+2
 10833  1C5F  0142               	movlb	2	; select bank2
 10834  1C60  0821               	movf	(vfpfcnvrt@ll+1)^(0+256),w
 10835  1C61  0140               	movlb	0	; select bank0
 10836  1C62  00B8               	movwf	dtoa@d+1
 10837  1C63  0142               	movlb	2	; select bank2
 10838  1C64  0820               	movf	vfpfcnvrt@ll^(0+256),w
 10839  1C65  0140               	movlb	0	; select bank0
 10840  1C66  00B7               	movwf	dtoa@d
 10841  1C67  0142               	movlb	2	; select bank2
 10842  1C68  0834               	movf	vfpfcnvrt@fp^(0+256),w
 10843  1C69  3183  2301         	fcall	_dtoa
 10844  1C6B  0838               	movf	?_dtoa+1,w
 10845  1C6C  0141               	movlb	1	; select bank1
 10846  1C6D  00E4               	movwf	(?_vfpfcnvrt+1)^(0+128)
 10847  1C6E  0140               	movlb	0	; select bank0
 10848  1C6F  0837               	movf	?_dtoa,w
 10849  1C70  0141               	movlb	1	; select bank1
 10850  1C71  00E3               	movwf	?_vfpfcnvrt^(0+128)
 10851  1C72  0008               	return
 10852  1C73                     l6507:	
 10853                           
 10854                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 920:       
      +                            if (ct[0] == 'f') {
 10855  1C73  3066               	movlw	102
 10856  1C74  0142               	movlb	2	; select bank2
 10857  1C75  062C               	xorwf	vfpfcnvrt@ct^(0+256),w
 10858  1C76  1D03               	btfss	3,2
 10859  1C77  2C8B               	goto	l6519
 10860                           
 10861                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 922:       
      +                                c = (*fmt)[0];
 10862  1C78  0141               	movlb	1	; select bank1
 10863  1C79  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10864  1C7B  0800               	movf	0,w	;code access
 10865                           
 10866                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 923:       
      +                                ++*fmt;
 10867  1C7C  26E9  3198         	fcall	PL164	;call to abstracted procedure
 10868  1C7E  3001               	movlw	1
 10869  1C7F  0781               	addwf	1,f
 10870  1C80  3141               	addfsr 1,1
 10871  1C81  1803               	skipnc
 10872  1C82  0A81               	incf	1,f
 10873                           
 10874                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 924:       
      +                                f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
 10875  1C83  261E  3198         	fcall	PL24	;call to abstracted procedure
 10876  1C85  00B2               	movwf	(vfpfcnvrt@f+3)^(0+256)
 10877                           
 10878                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 926:       
      +                                return efgtoa(fp, f, c);
 10879  1C86  2643               	fcall	PL40	;call to abstracted procedure
 10880  1C87  3190  203E  3198   	fcall	_efgtoa
 10881  1C8A  2EB9               	ljmp	PL104	;call to abstracted procedure
 10882  1C8B                     l6519:	
 10883                           
 10884                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 928:       
      +                            if (!strncmp(ct, "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
 10885  1C8B  30C6               	movlw	low (STR_31| (0+32768))
 10886  1C8C  0140               	movlb	0	; select bank0
 10887  1C8D  00A0               	movwf	strncmp@_r
 10888  1C8E  30A1               	movlw	high (STR_31| (0+32768))
 10889  1C8F  00A1               	movwf	strncmp@_r+1
 10890  1C90  3002               	movlw	2
 10891  1C91  00A2               	movwf	strncmp@n
 10892  1C92  302C               	movlw	(low (vfpfcnvrt@ct| (0+256)))& (0+255)
 10893  1C93  01A3               	clrf	strncmp@n+1
 10894  1C94  2714  3198         	fcall	_strncmp
 10895  1C96  0820               	movf	?_strncmp,w
 10896  1C97  0421               	iorwf	?_strncmp+1,w
 10897  1C98  1D03               	btfss	3,2
 10898  1C99  2CD4               	goto	l6537
 10899                           
 10900                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 931:       
      +                                if ((0 ? isupper((int)(*fmt)[0]) : ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
 10901  1C9A  0141               	movlb	1	; select bank1
 10902  1C9B  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 10903  1C9C  2604  3198         	fcall	PL4	;call to abstracted procedure
 10904  1C9E  3001               	movlw	1
 10905  1C9F  2690  3198         	fcall	PL82	;call to abstracted procedure
 10906  1CA1  26E9  3198         	fcall	PL164	;call to abstracted procedure
 10907  1CA3  3F40               	moviw [0]fsr1
 10908  1CA4  00E5               	movwf	??_vfpfcnvrt^(0+128)
 10909  1CA5  3F41               	moviw [1]fsr1
 10910  1CA6  00E6               	movwf	(??_vfpfcnvrt^(0+128)+1)
 10911  1CA7  0865               	movf	??_vfpfcnvrt^(0+128),w
 10912  1CA8  0084               	movwf	4
 10913  1CA9  0866               	movf	(??_vfpfcnvrt+1)^(0+128),w
 10914  1CAA  0085               	movwf	5
 10915  1CAB  0800               	movf	0,w	;code access
 10916  1CAC  3EBF               	addlw	191
 10917  1CAD  00E7               	movwf	(??_vfpfcnvrt+2)^(0+128)
 10918  1CAE  30FF               	movlw	255
 10919  1CAF  1803               	skipnc
 10920  1CB0  3000               	movlw	0
 10921  1CB1  00E8               	movwf	((??_vfpfcnvrt+2)^(0+128)+1)
 10922  1CB2  3000               	movlw	0
 10923  1CB3  0268               	subwf	(??_vfpfcnvrt+3)^(0+128),w
 10924  1CB4  301A               	movlw	26
 10925  1CB5  1903               	skipnz
 10926  1CB6  0267               	subwf	(??_vfpfcnvrt+2)^(0+128),w
 10927  1CB7  1803               	btfsc	3,0
 10928  1CB8  2CBB               	goto	u7910
 10929  1CB9  3001               	movlw	1
 10930  1CBA  2CBC               	goto	u7920
 10931  1CBB                     u7910:	
 10932  1CBB  3000               	movlw	0
 10933  1CBC                     u7920:	
 10934  1CBC  0142               	movlb	2	; select bank2
 10935  1CBD  00AA               	movwf	_vfpfcnvrt$1339^(0+256)
 10936  1CBE  01AB               	clrf	(_vfpfcnvrt$1339+1)^(0+256)
 10937  1CBF  042B               	iorwf	(_vfpfcnvrt$1339+1)^(0+256),w
 10938                           
 10939                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 934:       
      +                                    f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
 10940                           
 10941                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 933:       
      +                                } else {
 10942                           
 10943                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 932:       
      +                                    f = (*(long double *)__va_arg(*(long double **)ap, (long double)0));
 10944  1CC0  0141               	movlb	1	; select bank1
 10945  1CC1  261E  3198         	fcall	PL24	;call to abstracted procedure
 10946  1CC3  00B2               	movwf	(vfpfcnvrt@f+3)^(0+256)
 10947                           
 10948                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 936:       
      +                                *fmt += ((sizeof("lf")/sizeof("lf"[0]))-1);
 10949  1CC4  0141               	movlb	1	; select bank1
 10950  1CC5  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 10951  1CC6  0086               	movwf	6
 10952  1CC7  3002               	movlw	2
 10953  1CC8  0187               	clrf	7
 10954  1CC9  0781               	addwf	1,f
 10955  1CCA  3141               	addfsr 1,1
 10956  1CCB  1803               	skipnc
 10957  1CCC  0A81               	incf	1,f
 10958                           
 10959                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 938:       
      +                                return efgtoa(fp, f, c);
 10960  1CCD  0142               	movlb	2	; select bank2
 10961  1CCE  0832               	movf	(vfpfcnvrt@f+3)^(0+256),w
 10962  1CCF  2643               	fcall	PL40	;call to abstracted procedure
 10963  1CD0  3190  203E  3198   	fcall	_efgtoa
 10964  1CD3  2EB9               	ljmp	PL104	;call to abstracted procedure
 10965  1CD4                     l6537:	
 10966                           
 10967                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
 10968  1CD4  0141               	movlb	1	; select bank1
 10969  1CD5  25F8  3198         	fcall	PL2	;call to abstracted procedure
 10970  1CD7  0012               	moviw fsr0++
 10971  1CD8  3A73               	xorlw	115
 10972  1CD9  1D03               	btfss	3,2
 10973  1CDA  2CF3               	goto	l6547
 10974                           
 10975                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
 10976  1CDB  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 10977                           
 10978                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
 10979  1CDC  260B  3198         	fcall	PL6	;call to abstracted procedure
 10980  1CDE  0142               	movlb	2	; select bank2
 10981  1CDF  00A4               	movwf	vfpfcnvrt@cp^(0+256)
 10982  1CE0  3F01               	moviw [1]fsr0
 10983  1CE1  00A5               	movwf	(vfpfcnvrt@cp+1)^(0+256)
 10984                           
 10985                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
 10986  1CE2  0140               	movlb	0	; select bank0
 10987  1CE3  00A9               	movwf	stoa@s+1
 10988  1CE4  0142               	movlb	2	; select bank2
 10989  1CE5  0824               	movf	vfpfcnvrt@cp^(0+256),w
 10990  1CE6  0140               	movlb	0	; select bank0
 10991  1CE7  00A8               	movwf	stoa@s
 10992  1CE8  0142               	movlb	2	; select bank2
 10993  1CE9  0834               	movf	vfpfcnvrt@fp^(0+256),w
 10994  1CEA  275B               	fcall	_stoa
 10995  1CEB  0829               	movf	?_stoa+1,w
 10996  1CEC  0141               	movlb	1	; select bank1
 10997  1CED  00E4               	movwf	(?_vfpfcnvrt+1)^(0+128)
 10998  1CEE  0140               	movlb	0	; select bank0
 10999  1CEF  0828               	movf	?_stoa,w
 11000  1CF0  0141               	movlb	1	; select bank1
 11001  1CF1  00E3               	movwf	?_vfpfcnvrt^(0+128)
 11002  1CF2  0008               	return
 11003  1CF3                     l6547:	
 11004                           
 11005                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 11006  1CF3  25F8  3198         	fcall	PL2	;call to abstracted procedure
 11007  1CF5  0012               	moviw fsr0++
 11008  1CF6  3A25               	xorlw	37
 11009  1CF7  1D03               	btfss	3,2
 11010  1CF8  2D08               	goto	l6557
 11011                           
 11012                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 11013  1CF9  2631  3198         	fcall	PL26	;call to abstracted procedure
 11014  1CFB  1803               	skipnc
 11015  1CFC  0A81               	incf	1,f
 11016                           
 11017                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 11018  1CFD  3025               	movlw	37
 11019  1CFE  0140               	movlb	0	; select bank0
 11020  1CFF  00A0               	movwf	fputc@c
 11021  1D00  26EF  3198         	fcall	PL182	;call to abstracted procedure
 11022  1D02  25B1               	fcall	_fputc
 11023  1D03                     l6553:	
 11024                           
 11025                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 11026  1D03  0141               	movlb	1	; select bank1
 11027  1D04  01E3               	clrf	?_vfpfcnvrt^(0+128)
 11028  1D05  0AE3               	incf	?_vfpfcnvrt^(0+128),f
 11029  1D06  01E4               	clrf	(?_vfpfcnvrt+1)^(0+128)
 11030  1D07  0008               	return
 11031  1D08                     l6557:	
 11032                           
 11033                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 11034  1D08  2631               	fcall	PL26	;call to abstracted procedure
 11035  1D09  1803               	skipnc
 11036  1D0A  0A81               	incf	1,f
 11037                           
 11038                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 11039  1D0B  01E3               	clrf	?_vfpfcnvrt^(0+128)
 11040  1D0C  01E4               	clrf	(?_vfpfcnvrt+1)^(0+128)
 11041  1D0D  0008               	return
 11042  1D0E                     l6563:	
 11043                           
 11044                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 11045  1D0E  25F8  3198         	fcall	PL2	;call to abstracted procedure
 11046  1D10  0800               	movf	0,w	;code access
 11047  1D11  0140               	movlb	0	; select bank0
 11048  1D12  00A0               	movwf	fputc@c
 11049  1D13  26EF  3198         	fcall	PL182	;call to abstracted procedure
 11050  1D15  25B1  3198         	fcall	_fputc
 11051                           
 11052                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 11053  1D17  0141               	movlb	1	; select bank1
 11054  1D18  2631  3198         	fcall	PL26	;call to abstracted procedure
 11055  1D1A  1803               	skipnc
 11056  1D1B  0A81               	incf	1,f
 11057  1D1C  2D03               	goto	l6553
 11058  1D1D                     __end_of_vfpfcnvrt:	
 11059  1D1D                     __ptext21:	
 11060 ;; *************** function _tolower *****************
 11061 ;; Defined at:
 11062 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\tolower.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;  c               2    4[BANK0 ] int 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;		None
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  2    4[BANK0 ] int 
 11069 ;; Registers used:
 11070 ;;		wreg, status,2, status,0
 11071 ;; Tracked objects:
 11072 ;;		On entry : 3F/0
 11073 ;;		On exit  : 3F/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11077 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11078 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11079 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11080 ;;Total ram usage:        6 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:    4
 11083 ;; This function calls:
 11084 ;;		_isupper
 11085 ;; This function is called by:
 11086 ;;		_efgtoa
 11087 ;;		_vfpfcnvrt
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           
 11092                           ;psect for function _tolower
 11093  1D1D                     _tolower:	
 11094                           
 11095                           ;incstack = 0
 11096                           ; Regs used in _tolower: [wreg+status,2+status,0]
 11097  1D1D  0824               	movf	tolower@c,w
 11098  1D1E  3EBF               	addlw	191
 11099  1D1F  00A6               	movwf	??_tolower
 11100  1D20  30FF               	movlw	255
 11101  1D21  3D25               	addwfc	tolower@c+1,w
 11102  1D22  00A7               	movwf	??_tolower+1
 11103  1D23  3000               	movlw	0
 11104  1D24  0227               	subwf	??_tolower+1,w
 11105  1D25  301A               	movlw	26
 11106  1D26  1903               	skipnz
 11107  1D27  0226               	subwf	??_tolower,w
 11108  1D28  1803               	btfsc	3,0
 11109  1D29  2D2C               	goto	u4220
 11110  1D2A  3001               	movlw	1
 11111  1D2B  2D2D               	goto	u4230
 11112  1D2C                     u4220:	
 11113  1D2C  3000               	movlw	0
 11114  1D2D                     u4230:	
 11115  1D2D  00A8               	movwf	_tolower$1775
 11116  1D2E  01A9               	clrf	_tolower$1775+1
 11117  1D2F  0429               	iorwf	_tolower$1775+1,w
 11118  1D30  1903               	btfsc	3,2
 11119  1D31  0008               	return
 11120  1D32  3020               	movlw	32
 11121  1D33  0424               	iorwf	tolower@c,w
 11122  1D34  00A4               	movwf	?_tolower
 11123  1D35  0825               	movf	tolower@c+1,w
 11124  1D36  00A5               	movwf	?_tolower+1
 11125  1D37  0008               	return
 11126  1D38                     __end_of_tolower:	
 11127  1D38                     __ptext41:	
 11128 ;; *************** function _atoi *****************
 11129 ;; Defined at:
 11130 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\atoi.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 11133 ;;		 -> STR_22(14), STR_20(13), STR_18(35), STR_10(10), 
 11134 ;;		 -> STR_8(16), STR_7(15), STR_5(42), STR_4(13), 
 11135 ;;		 -> STR_3(14), 
 11136 ;; Auto vars:     Size  Location     Type
 11137 ;;  n               2   18[BANK0 ] int 
 11138 ;;  neg             2   11[BANK0 ] int 
 11139 ;; Return value:  Size  Location     Type
 11140 ;;                  2    6[BANK0 ] int 
 11141 ;; Registers used:
 11142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11143 ;; Tracked objects:
 11144 ;;		On entry : 3F/0
 11145 ;;		On exit  : 3F/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11148 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11149 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11150 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11151 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11152 ;;Total ram usage:       14 bytes
 11153 ;; Hardware stack levels used:    1
 11154 ;; Hardware stack levels required when called:    4
 11155 ;; This function calls:
 11156 ;;		___wmul
 11157 ;;		_isdigit
 11158 ;;		_isspace
 11159 ;; This function is called by:
 11160 ;;		_vfpfcnvrt
 11161 ;; This function uses a non-reentrant model
 11162 ;;
 11163                           
 11164                           
 11165                           ;psect for function _atoi
 11166  1D38                     _atoi:	
 11167                           
 11168                           ;incstack = 0
 11169                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11170  1D38  01B2               	clrf	atoi@n
 11171  1D39  01B3               	clrf	atoi@n+1
 11172  1D3A  01AB               	clrf	atoi@neg
 11173  1D3B  01AC               	clrf	atoi@neg+1
 11174  1D3C                     l5053:	
 11175  1D3C  01B1               	clrf	_atoi$1647
 11176  1D3D  0AB1               	incf	_atoi$1647,f
 11177  1D3E  0826               	movf	atoi@s,w
 11178  1D3F  0084               	movwf	4
 11179  1D40  0827               	movf	atoi@s+1,w
 11180  1D41  0085               	movwf	5
 11181  1D42  0012               	moviw fsr0++
 11182  1D43  3A20               	xorlw	32
 11183  1D44  1903               	btfsc	3,2
 11184  1D45  2D50               	goto	l5061
 11185  1D46  26C1  3198         	fcall	PL114	;call to abstracted procedure
 11186  1D48  3EF7               	addlw	247
 11187  1D49  26C7  3198         	fcall	PL120	;call to abstracted procedure
 11188  1D4B  3005               	movlw	5
 11189  1D4C  1903               	skipnz
 11190  1D4D  0228               	subwf	??_atoi,w
 11191  1D4E  1803               	btfsc	3,0
 11192  1D4F  01B1               	clrf	_atoi$1647
 11193  1D50                     l5061:	
 11194  1D50  0831               	movf	_atoi$1647,w
 11195  1D51  00AD               	movwf	_atoi$1646
 11196  1D52  01AE               	clrf	_atoi$1646+1
 11197  1D53  042E               	iorwf	_atoi$1646+1,w
 11198  1D54  1903               	btfsc	3,2
 11199  1D55  2D5E               	goto	l5069
 11200  1D56  0AA6               	incf	atoi@s,f
 11201  1D57  1903               	skipnz
 11202  1D58  0AA7               	incf	atoi@s+1,f
 11203  1D59  2D3C               	goto	l5053
 11204  1D5A                     l5067:	
 11205  1D5A  01AB               	clrf	atoi@neg
 11206  1D5B  0AAB               	incf	atoi@neg,f
 11207  1D5C  01AC               	clrf	atoi@neg+1
 11208  1D5D  2D87               	goto	l1238
 11209  1D5E                     l5069:	
 11210  1D5E  26C1  3198         	fcall	PL114	;call to abstracted procedure
 11211  1D60  00A8               	movwf	??_atoi
 11212  1D61  01A9               	clrf	??_atoi+1
 11213                           
 11214                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11215                           ; Switch size 1, requested type "space"
 11216                           ; Number of cases is 1, Range of values is 0 to 0
 11217                           ; switch strategies available:
 11218                           ; Name         Instructions Cycles
 11219                           ; simple_byte            4     3 (average)
 11220                           ; direct_byte            8     6 (fixed)
 11221                           ; jumptable            260     6 (fixed)
 11222                           ;	Chosen strategy is simple_byte
 11223  1D62  0829               	movf	??_atoi+1,w
 11224  1D63  3A00               	xorlw	0	; case 0
 11225  1D64  1903               	skipnz
 11226  1D65  2D67               	goto	l6883
 11227  1D66  2D8A               	goto	l5075
 11228  1D67                     l6883:	
 11229                           
 11230                           ; Switch size 1, requested type "space"
 11231                           ; Number of cases is 2, Range of values is 43 to 45
 11232                           ; switch strategies available:
 11233                           ; Name         Instructions Cycles
 11234                           ; simple_byte            7     4 (average)
 11235                           ; direct_byte           15     9 (fixed)
 11236                           ; jumptable            263     9 (fixed)
 11237                           ;	Chosen strategy is simple_byte
 11238  1D67  0828               	movf	??_atoi,w
 11239  1D68  3A2B               	xorlw	43	; case 43
 11240  1D69  1903               	skipnz
 11241  1D6A  2D87               	goto	l1238
 11242  1D6B  3A06               	xorlw	6	; case 45
 11243  1D6C  1903               	skipnz
 11244  1D6D  2D5A               	goto	l5067
 11245  1D6E  2D8A               	goto	l5075
 11246  1D6F                     l5071:	
 11247  1D6F  26C1  3198         	fcall	PL114	;call to abstracted procedure
 11248  1D71  00A8               	movwf	??_atoi
 11249  1D72  0833               	movf	atoi@n+1,w
 11250  1D73  00A1               	movwf	___wmul@multiplier+1
 11251  1D74  0832               	movf	atoi@n,w
 11252  1D75  00A0               	movwf	___wmul@multiplier
 11253  1D76  300A               	movlw	10
 11254  1D77  00A2               	movwf	___wmul@multiplicand
 11255  1D78  01A3               	clrf	___wmul@multiplicand+1
 11256  1D79  21B6  3198         	fcall	___wmul
 11257  1D7B  0821               	movf	?___wmul+1,w
 11258  1D7C  00AA               	movwf	??_atoi+2
 11259  1D7D  0828               	movf	??_atoi,w
 11260  1D7E  0220               	subwf	?___wmul,w
 11261  1D7F  00A9               	movwf	??_atoi+1
 11262  1D80  1C03               	skipc
 11263  1D81  03AA               	decf	??_atoi+2,f
 11264  1D82  3E30               	addlw	48
 11265  1D83  00B2               	movwf	atoi@n
 11266  1D84  3000               	movlw	0
 11267  1D85  3D2A               	addwfc	??_atoi+2,w
 11268  1D86  00B3               	movwf	atoi@n+1
 11269  1D87                     l1238:	
 11270  1D87  0AA6               	incf	atoi@s,f
 11271  1D88  1903               	skipnz
 11272  1D89  0AA7               	incf	atoi@s+1,f
 11273  1D8A                     l5075:	
 11274  1D8A  26C1  3198         	fcall	PL114	;call to abstracted procedure
 11275  1D8C  3ED0               	addlw	208
 11276  1D8D  26C7  3198         	fcall	PL120	;call to abstracted procedure
 11277  1D8F  300A               	movlw	10
 11278  1D90  1903               	skipnz
 11279  1D91  0228               	subwf	??_atoi,w
 11280  1D92  1803               	btfsc	3,0
 11281  1D93  2D96               	goto	u6060
 11282  1D94  3001               	movlw	1
 11283  1D95  2D97               	goto	u6070
 11284  1D96                     u6060:	
 11285  1D96  3000               	movlw	0
 11286  1D97                     u6070:	
 11287  1D97  00AF               	movwf	_atoi$1648
 11288  1D98  01B0               	clrf	_atoi$1648+1
 11289  1D99  0430               	iorwf	_atoi$1648+1,w
 11290  1D9A  1D03               	btfss	3,2
 11291  1D9B  2D6F               	goto	l5071
 11292  1D9C  082B               	movf	atoi@neg,w
 11293  1D9D  042C               	iorwf	atoi@neg+1,w
 11294  1D9E  1D03               	btfss	3,2
 11295  1D9F  2DAC               	goto	l5085
 11296  1DA0  0932               	comf	atoi@n,w
 11297  1DA1  00A8               	movwf	??_atoi
 11298  1DA2  0933               	comf	atoi@n+1,w
 11299  1DA3  00A9               	movwf	??_atoi+1
 11300  1DA4  0AA8               	incf	??_atoi,f
 11301  1DA5  1903               	skipnz
 11302  1DA6  0AA9               	incf	??_atoi+1,f
 11303  1DA7  0828               	movf	??_atoi,w
 11304  1DA8  00A6               	movwf	?_atoi
 11305  1DA9  0829               	movf	??_atoi+1,w
 11306  1DAA  00A7               	movwf	?_atoi+1
 11307  1DAB  0008               	return
 11308  1DAC                     l5085:	
 11309  1DAC  0833               	movf	atoi@n+1,w
 11310  1DAD  00A7               	movwf	?_atoi+1
 11311  1DAE  0832               	movf	atoi@n,w
 11312  1DAF  00A6               	movwf	?_atoi
 11313  1DB0  0008               	return
 11314  1DB1                     __end_of_atoi:	
 11315  1DB1                     __ptext36:	
 11316 ;; *************** function _fputc *****************
 11317 ;; Defined at:
 11318 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_fputc.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;  c               2    0[BANK0 ] int 
 11321 ;;  fp              1    2[BANK0 ] PTR struct _IO_FILE
 11322 ;;		 -> sprintf@f(6), 
 11323 ;; Auto vars:     Size  Location     Type
 11324 ;;		None
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  2    0[BANK0 ] int 
 11327 ;; Registers used:
 11328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11329 ;; Tracked objects:
 11330 ;;		On entry : 3F/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11334 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11336 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11337 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11338 ;;Total ram usage:        8 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    4
 11341 ;; This function calls:
 11342 ;;		_putch
 11343 ;; This function is called by:
 11344 ;;		_pad
 11345 ;;		_stoa
 11346 ;;		_vfpfcnvrt
 11347 ;;		_fputs
 11348 ;; This function uses a non-reentrant model
 11349 ;;
 11350                           
 11351                           
 11352                           ;psect for function _fputc
 11353  1DB1                     _fputc:	
 11354                           
 11355                           ;incstack = 0
 11356                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11357  1DB1  0822               	movf	fputc@fp,w
 11358  1DB2  1D03               	btfss	3,2
 11359  1DB3  0822               	movf	fputc@fp,w
 11360  1DB4  1D03               	btfss	3,2
 11361  1DB5  2DB8               	goto	l3763
 11362  1DB6  0820               	movf	fputc@c,w
 11363  1DB7  2DF7               	ljmp	l1314
 11364  1DB8                     l3763:	
 11365  1DB8  26E3  3198         	fcall	PL162	;call to abstracted procedure
 11366  1DBA  0016               	moviw fsr1++
 11367  1DBB  0401               	iorwf	1,w
 11368  1DBC  1903               	btfsc	3,2
 11369  1DBD  2DD6               	goto	l3767
 11370  1DBE  26E3  3198         	fcall	PL162	;call to abstracted procedure
 11371  1DC0  3F40               	moviw [0]fsr1
 11372  1DC1  00A3               	movwf	??_fputc
 11373  1DC2  3F41               	moviw [1]fsr1
 11374  1DC3  00A4               	movwf	??_fputc+1
 11375  1DC4  0822               	movf	fputc@fp,w
 11376  1DC5  3E02               	addlw	2
 11377  1DC6  0086               	movwf	6
 11378  1DC7  3F40               	moviw [0]fsr1
 11379  1DC8  00A5               	movwf	??_fputc+2
 11380  1DC9  3F41               	moviw [1]fsr1
 11381  1DCA  00A6               	movwf	??_fputc+3
 11382  1DCB  3A80               	xorlw	128
 11383  1DCC  00A7               	movwf	??_fputc+4
 11384  1DCD  0824               	movf	??_fputc+1,w
 11385  1DCE  3A80               	xorlw	128
 11386  1DCF  0227               	subwf	??_fputc+4,w
 11387  1DD0  1D03               	skipz
 11388  1DD1  2DD4               	goto	u3645
 11389  1DD2  0823               	movf	??_fputc,w
 11390  1DD3  0225               	subwf	??_fputc+2,w
 11391  1DD4                     u3645:	
 11392  1DD4  1803               	skipnc
 11393  1DD5  0008               	return
 11394  1DD6                     l3767:	
 11395  1DD6  0140               	movlb	0	; select bank0
 11396  1DD7  0822               	movf	fputc@fp,w
 11397  1DD8  3E02               	addlw	2
 11398  1DD9  0086               	movwf	6
 11399  1DDA  3001               	movlw	1	; select bank2/3
 11400  1DDB  0087               	movwf	7
 11401  1DDC  0822               	movf	fputc@fp,w
 11402  1DDD  0084               	movwf	4
 11403  1DDE  3001               	movlw	1	; select bank2/3
 11404  1DDF  0085               	movwf	5
 11405  1DE0  3F40               	moviw [0]fsr1
 11406  1DE1  0700               	addwf	0,w
 11407  1DE2  00A3               	movwf	??_fputc
 11408  1DE3  3101               	addfsr 0,1
 11409  1DE4  3F41               	moviw [1]fsr1
 11410  1DE5  3D00               	addwfc	0,w
 11411  1DE6  00A4               	movwf	??_fputc+1
 11412  1DE7  0823               	movf	??_fputc,w
 11413  1DE8  0086               	movwf	6
 11414  1DE9  0824               	movf	??_fputc+1,w
 11415  1DEA  0087               	movwf	7
 11416  1DEB  0820               	movf	fputc@c,w
 11417  1DEC  0081               	movwf	1
 11418  1DED  0822               	movf	fputc@fp,w
 11419  1DEE  3E02               	addlw	2
 11420  1DEF  0086               	movwf	6
 11421  1DF0  3001               	movlw	1	; select bank2/3
 11422  1DF1  0087               	movwf	7
 11423  1DF2  0781               	addwf	1,f
 11424  1DF3  3141               	addfsr 1,1
 11425  1DF4  1803               	skipnc
 11426  1DF5  0A81               	incf	1,f
 11427  1DF6  0008               	return
 11428  1DF7                     __end_of_fputc:	
 11429  1DF7                     __ptext37:	
 11430 ;; *************** function _putch *****************
 11431 ;; Defined at:
 11432 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\putch.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;  c               1    wreg     unsigned char 
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;  c               1    0[COMMON] unsigned char 
 11437 ;; Return value:  Size  Location     Type
 11438 ;;                  1    wreg      void 
 11439 ;; Registers used:
 11440 ;;		wreg
 11441 ;; Tracked objects:
 11442 ;;		On entry : 3F/0
 11443 ;;		On exit  : 3F/0
 11444 ;;		Unchanged: 3F/0
 11445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11450 ;;Total ram usage:        0 bytes
 11451 ;; Hardware stack levels used:    1
 11452 ;; Hardware stack levels required when called:    3
 11453 ;; This function calls:
 11454 ;;		Nothing
 11455 ;; This function is called by:
 11456 ;;		_fputc
 11457 ;; This function uses a non-reentrant model
 11458 ;;
 11459                           
 11460                           
 11461                           ;psect for function _putch
 11462  1DF7                     _putch:	
 11463  1DF7                     l1314:	
 11464                           ;incstack = 0
 11465                           ; Regs used in _putch: [wreg]
 11466                           
 11467  1DF7  0008               	return
 11468  1DF8                     __end_of_putch:	
 11469  1DF8                     PL2:	
 11470  1DF8  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 11471  1DF9  0086               	movwf	6
 11472  1DFA  0187               	clrf	7
 11473  1DFB  3F40               	moviw [0]fsr1
 11474  1DFC  00E5               	movwf	??_vfpfcnvrt^(0+128)
 11475  1DFD  3F41               	moviw [1]fsr1
 11476  1DFE  00E6               	movwf	(??_vfpfcnvrt^(0+128)+1)
 11477  1DFF  0865               	movf	??_vfpfcnvrt^(0+128),w
 11478  1E00  0084               	movwf	4
 11479  1E01  0866               	movf	(??_vfpfcnvrt+1)^(0+128),w
 11480  1E02  0085               	movwf	5
 11481  1E03  0008               	return
 11482  1E04                     __end_ofPL2:	
 11483  1E04                     PL4:	
 11484  1E04  0086               	movwf	6
 11485  1E05  0187               	clrf	7
 11486  1E06  3F40               	moviw [0]fsr1
 11487  1E07  00E5               	movwf	??_vfpfcnvrt^(0+128)
 11488  1E08  3F41               	moviw [1]fsr1
 11489  1E09  00E6               	movwf	(??_vfpfcnvrt^(0+128)+1)
 11490  1E0A  0008               	return
 11491  1E0B                     __end_ofPL4:	
 11492  1E0B                     PL6:	
 11493  1E0B  0086               	movwf	6
 11494  1E0C  3001               	movlw	1
 11495  1E0D  0187               	clrf	7
 11496  1E0E  0781               	addwf	1,f
 11497  1E0F  3141               	addfsr 1,1
 11498  1E10  1803               	skipnc
 11499  1E11  0A81               	incf	1,f
 11500  1E12  0864               	movf	vfpfcnvrt@ap^(0+128),w
 11501  1E13  0086               	movwf	6
 11502  1E14  3001               	movlw	1	; select bank2/3
 11503  1E15  0087               	movwf	7
 11504  1E16  0801               	movf	1,w
 11505  1E17  0084               	movwf	4
 11506  1E18  3001               	movlw	1	; select bank2/3
 11507  1E19  0085               	movwf	5
 11508  1E1A  3002               	movlw	2
 11509  1E1B  0781               	addwf	1,f
 11510  1E1C  3F00               	moviw [0]fsr0
 11511  1E1D  0008               	return
 11512  1E1E                     __end_ofPL6:	
 11513  1E1E                     PL24:	
 11514  1E1E  0864               	movf	vfpfcnvrt@ap^(0+128),w
 11515  1E1F  0086               	movwf	6
 11516  1E20  3001               	movlw	1	; select bank2/3
 11517  1E21  0087               	movwf	7
 11518  1E22  0801               	movf	1,w
 11519  1E23  0084               	movwf	4
 11520  1E24  3001               	movlw	1	; select bank2/3
 11521  1E25  0085               	movwf	5
 11522  1E26  3004               	movlw	4
 11523  1E27  0781               	addwf	1,f
 11524  1E28  3F00               	moviw [0]fsr0
 11525  1E29  0142               	movlb	2	; select bank2
 11526  1E2A  00AF               	movwf	vfpfcnvrt@f^(0+256)
 11527  1E2B  3F01               	moviw [1]fsr0
 11528  1E2C  00B0               	movwf	(vfpfcnvrt@f+1)^(0+256)
 11529  1E2D  3F02               	moviw [2]fsr0
 11530  1E2E  00B1               	movwf	(vfpfcnvrt@f+2)^(0+256)
 11531  1E2F  3F03               	moviw [3]fsr0
 11532  1E30  0008               	return
 11533  1E31                     __end_ofPL24:	
 11534  1E31                     PL26:	
 11535  1E31  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 11536  1E32  0086               	movwf	6
 11537  1E33  3001               	movlw	1
 11538  1E34  0187               	clrf	7
 11539  1E35  0781               	addwf	1,f
 11540  1E36  3141               	addfsr 1,1
 11541  1E37  0008               	return
 11542  1E38                     __end_ofPL26:	
 11543  1E38                     PL34:	
 11544  1E38  0820               	movf	?___wmul,w
 11545  1E39  0142               	movlb	2	; select bank2
 11546  1E3A  0754               	addwf	channelView@data^(0+256),w
 11547  1E3B  00D6               	movwf	??_channelView^(0+256)
 11548  1E3C  0140               	movlb	0	; select bank0
 11549  1E3D  0821               	movf	?___wmul+1,w
 11550  1E3E  0142               	movlb	2	; select bank2
 11551  1E3F  3D55               	addwfc	(channelView@data+1)^(0+256),w
 11552  1E40  00D7               	movwf	(??_channelView+1)^(0+256)
 11553  1E41  0856               	movf	??_channelView^(0+256),w
 11554  1E42  0008               	return
 11555  1E43                     __end_ofPL34:	
 11556  1E43                     PL40:	
 11557  1E43  0140               	movlb	0	; select bank0
 11558  1E44  00EB               	movwf	efgtoa@f+3
 11559  1E45  0142               	movlb	2	; select bank2
 11560  1E46  0831               	movf	(vfpfcnvrt@f+2)^(0+256),w
 11561  1E47  0140               	movlb	0	; select bank0
 11562  1E48  00EA               	movwf	efgtoa@f+2
 11563  1E49  0142               	movlb	2	; select bank2
 11564  1E4A  0830               	movf	(vfpfcnvrt@f+1)^(0+256),w
 11565  1E4B  0140               	movlb	0	; select bank0
 11566  1E4C  00E9               	movwf	efgtoa@f+1
 11567  1E4D  0142               	movlb	2	; select bank2
 11568  1E4E  082F               	movf	vfpfcnvrt@f^(0+256),w
 11569  1E4F  0140               	movlb	0	; select bank0
 11570  1E50  00E8               	movwf	efgtoa@f
 11571  1E51  0142               	movlb	2	; select bank2
 11572  1E52  0833               	movf	vfpfcnvrt@c^(0+256),w
 11573  1E53  0140               	movlb	0	; select bank0
 11574  1E54  00EC               	movwf	efgtoa@c
 11575  1E55  0142               	movlb	2	; select bank2
 11576  1E56  0834               	movf	vfpfcnvrt@fp^(0+256),w
 11577  1E57  0008               	return
 11578  1E58                     __end_ofPL40:	
 11579  1E58                     PL42:	
 11580  1E58  0800               	movf	0,w	;code access
 11581  1E59  3ED0               	addlw	208
 11582  1E5A  00E7               	movwf	(??_vfpfcnvrt+2)^(0+128)
 11583  1E5B  30FF               	movlw	255
 11584  1E5C  1803               	skipnc
 11585  1E5D  3000               	movlw	0
 11586  1E5E  00E8               	movwf	((??_vfpfcnvrt+2)^(0+128)+1)
 11587  1E5F  3000               	movlw	0
 11588  1E60  0268               	subwf	(??_vfpfcnvrt+3)^(0+128),w
 11589  1E61  300A               	movlw	10
 11590  1E62  1903               	skipnz
 11591  1E63  0267               	subwf	(??_vfpfcnvrt+2)^(0+128),w
 11592  1E64  1803               	btfsc	3,0
 11593  1E65  2E68               	goto	u7770
 11594  1E66  3001               	movlw	1
 11595  1E67  2E69               	goto	u7780
 11596  1E68                     u7770:	
 11597  1E68  3000               	movlw	0
 11598  1E69                     u7780:	
 11599  1E69  0142               	movlb	2	; select bank2
 11600  1E6A  0008               	return
 11601  1E6B                     __end_ofPL42:	
 11602  1E6B                     PL44:	
 11603  1E6B  0140               	movlb	0	; select bank0
 11604  1E6C  3020               	movlw	low _sBuf1
 11605  1E6D  01A6               	clrf	OLED_print_xy@row
 11606  1E6E  0AA6               	incf	OLED_print_xy@row,f
 11607  1E6F  00A7               	movwf	OLED_print_xy@s
 11608  1E70  3003               	movlw	high _sBuf1
 11609  1E71  00A8               	movwf	OLED_print_xy@s+1
 11610  1E72  3400               	retlw	0
 11611  1E73                     __end_ofPL44:	
 11612  1E73                     PL54:	
 11613  1E73  0862               	movf	channelView@n^(0+256),w
 11614  1E74  0140               	movlb	0	; select bank0
 11615  1E75  00A0               	movwf	___wmul@multiplier
 11616  1E76  3015               	movlw	21
 11617  1E77  01A1               	clrf	___wmul@multiplier+1
 11618  1E78  00A2               	movwf	___wmul@multiplicand
 11619  1E79  01A3               	clrf	___wmul@multiplicand+1
 11620  1E7A  0008               	return
 11621  1E7B                     __end_ofPL54:	
 11622  1E7B                     PL62:	
 11623  1E7B  082A               	movf	getNextState@n,w
 11624  1E7C  00A0               	movwf	___wmul@multiplier
 11625  1E7D  3005               	movlw	5
 11626  1E7E  01A1               	clrf	___wmul@multiplier+1
 11627  1E7F  00A2               	movwf	___wmul@multiplicand
 11628  1E80  01A3               	clrf	___wmul@multiplicand+1
 11629  1E81  0008               	return
 11630  1E82                     __end_ofPL62:	
 11631  1E82                     PL68:	
 11632  1E82  3F40               	moviw [0]fsr1
 11633  1E83  00B9               	movwf	(?_sprintf^(0+256)+4)
 11634  1E84  3F41               	moviw [1]fsr1
 11635  1E85  00BA               	movwf	((?_sprintf+1)^(0+256)+4)
 11636  1E86  3F42               	moviw [2]fsr1
 11637  1E87  00BB               	movwf	((?_sprintf+2)^(0+256)+4)
 11638  1E88  3F43               	moviw [3]fsr1
 11639  1E89  00BC               	movwf	((?_sprintf+3)^(0+256)+4)
 11640  1E8A  0008               	return
 11641  1E8B                     __end_ofPL68:	
 11642  1E8B                     PL74:	
 11643  1E8B  0854               	movf	statusView@data^(0+256),w
 11644  1E8C  0086               	movwf	6
 11645  1E8D  0855               	movf	(statusView@data+1)^(0+256),w
 11646  1E8E  0087               	movwf	7
 11647  1E8F  0008               	return
 11648  1E90                     __end_ofPL74:	
 11649  1E90                     PL82:	
 11650  1E90  0765               	addwf	??_vfpfcnvrt^(0+128),w
 11651  1E91  0084               	movwf	4
 11652  1E92  0866               	movf	(??_vfpfcnvrt^(0+128)+1),w
 11653  1E93  1803               	skipnc
 11654  1E94  0A66               	incf	(??_vfpfcnvrt^(0+128)+1),w
 11655  1E95  0085               	movwf	5
 11656  1E96  0800               	movf	0,w	;code access
 11657  1E97  0008               	return
 11658  1E98                     __end_ofPL82:	
 11659  1E98                     PL92:	
 11660  1E98  30CD               	movlw	low _sBuf2
 11661  1E99  0140               	movlb	0	; select bank0
 11662  1E9A  00A5               	movwf	strcpy@dest
 11663  1E9B  3001               	movlw	high _sBuf2
 11664  1E9C  00A6               	movwf	strcpy@dest+1
 11665  1E9D  0008               	return
 11666  1E9E                     __end_ofPL92:	
 11667  1E9E                     PL96:	
 11668  1E9E  0821               	movf	?___wmul+1,w
 11669  1E9F  0085               	movwf	5
 11670  1EA0  0820               	movf	?___wmul,w
 11671  1EA1  0084               	movwf	4
 11672  1EA2  3090               	movlw	low ((_nextStateTbl+1)| (0+32768))
 11673  1EA3  0784               	addwf	4,f
 11674  1EA4  30A0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 11675  1EA5  3D85               	addwfc	5,f
 11676  1EA6  0008               	return
 11677  1EA7                     __end_ofPL96:	
 11678  1EA7                     PL98:	
 11679  1EA7  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 11680  1EA8  0086               	movwf	6
 11681  1EA9  0187               	clrf	7
 11682  1EAA  3F40               	moviw [0]fsr1
 11683  1EAB  0140               	movlb	0	; select bank0
 11684  1EAC  00A6               	movwf	atoi@s
 11685  1EAD  3F41               	moviw [1]fsr1
 11686  1EAE  00A7               	movwf	atoi@s+1
 11687  1EAF  0008               	return
 11688  1EB0                     __end_ofPL98:	
 11689  1EB0                     PL100:	
 11690  1EB0  3F40               	moviw [0]fsr1
 11691  1EB1  00BD               	movwf	(?_sprintf^(0+256)+8)
 11692  1EB2  3F41               	moviw [1]fsr1
 11693  1EB3  00BE               	movwf	((?_sprintf+1)^(0+256)+8)
 11694  1EB4  3F42               	moviw [2]fsr1
 11695  1EB5  00BF               	movwf	((?_sprintf+2)^(0+256)+8)
 11696  1EB6  3F43               	moviw [3]fsr1
 11697  1EB7  00C0               	movwf	((?_sprintf+3)^(0+256)+8)
 11698  1EB8  0008               	return
 11699  1EB9                     __end_ofPL100:	
 11700  1EB9                     PL104:	
 11701  1EB9  0869               	movf	?_efgtoa+1,w
 11702  1EBA  0141               	movlb	1	; select bank1
 11703  1EBB  00E4               	movwf	(?_vfpfcnvrt+1)^(0+128)
 11704  1EBC  0140               	movlb	0	; select bank0
 11705  1EBD  0868               	movf	?_efgtoa,w
 11706  1EBE  0141               	movlb	1	; select bank1
 11707  1EBF  00E3               	movwf	?_vfpfcnvrt^(0+128)
 11708  1EC0  0008               	return
 11709  1EC1                     __end_ofPL104:	
 11710  1EC1                     PL114:	
 11711  1EC1  0826               	movf	atoi@s,w
 11712  1EC2  0084               	movwf	4
 11713  1EC3  0827               	movf	atoi@s+1,w
 11714  1EC4  0085               	movwf	5
 11715  1EC5  0800               	movf	0,w	;code access
 11716  1EC6  0008               	return
 11717  1EC7                     __end_ofPL114:	
 11718  1EC7                     PL120:	
 11719  1EC7  00A8               	movwf	??_atoi
 11720  1EC8  30FF               	movlw	255
 11721  1EC9  1803               	skipnc
 11722  1ECA  3000               	movlw	0
 11723  1ECB  00A9               	movwf	??_atoi+1
 11724  1ECC  3000               	movlw	0
 11725  1ECD  0229               	subwf	??_atoi+1,w
 11726  1ECE  0008               	return
 11727  1ECF                     __end_ofPL120:	
 11728  1ECF                     PL132:	
 11729  1ECF  0142               	movlb	2	; select bank2
 11730  1ED0  0854               	movf	statusView@data^(0+256),w
 11731  1ED1  3E20               	addlw	32
 11732  1ED2  0086               	movwf	6
 11733  1ED3  3000               	movlw	0
 11734  1ED4  3D55               	addwfc	(statusView@data+1)^(0+256),w
 11735  1ED5  0087               	movwf	7
 11736  1ED6  0008               	return
 11737  1ED7                     __end_ofPL132:	
 11738  1ED7                     PL148:	
 11739  1ED7  0854               	movf	statusView@data^(0+256),w
 11740  1ED8  0086               	movwf	6
 11741  1ED9  0855               	movf	(statusView@data+1)^(0+256),w
 11742  1EDA  0087               	movwf	7
 11743  1EDB  315C               	addfsr 1,28
 11744  1EDC  0008               	return
 11745  1EDD                     __end_ofPL148:	
 11746  1EDD                     PL152:	
 11747  1EDD  0854               	movf	statusView@data^(0+256),w
 11748  1EDE  0086               	movwf	6
 11749  1EDF  0855               	movf	(statusView@data+1)^(0+256),w
 11750  1EE0  0087               	movwf	7
 11751  1EE1  3154               	addfsr 1,20
 11752  1EE2  0008               	return
 11753  1EE3                     __end_ofPL152:	
 11754  1EE3                     PL162:	
 11755  1EE3  0822               	movf	fputc@fp,w
 11756  1EE4  3E04               	addlw	4
 11757  1EE5  0086               	movwf	6
 11758  1EE6  3001               	movlw	1	; select bank2/3
 11759  1EE7  0087               	movwf	7
 11760  1EE8  0008               	return
 11761  1EE9                     __end_ofPL162:	
 11762  1EE9                     PL164:	
 11763  1EE9  0142               	movlb	2	; select bank2
 11764  1EEA  00B3               	movwf	vfpfcnvrt@c^(0+256)
 11765  1EEB  0141               	movlb	1	; select bank1
 11766  1EEC  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 11767  1EED  0086               	movwf	6
 11768  1EEE  0008               	return
 11769  1EEF                     __end_ofPL164:	
 11770  1EEF                     PL182:	
 11771  1EEF  01A1               	clrf	fputc@c+1
 11772  1EF0  0142               	movlb	2	; select bank2
 11773  1EF1  0834               	movf	vfpfcnvrt@fp^(0+256),w
 11774  1EF2  0140               	movlb	0	; select bank0
 11775  1EF3  00A2               	movwf	fputc@fp
 11776  1EF4  0008               	return
 11777  1EF5                     __end_ofPL182:	
 11778  1EF5                     PL186:	
 11779  1EF5  3020               	movlw	low _sBuf1
 11780  1EF6  0142               	movlb	2	; select bank2
 11781  1EF7  00B5               	movwf	sprintf@s^(0+256)
 11782  1EF8  3003               	movlw	high _sBuf1
 11783  1EF9  00B6               	movwf	(sprintf@s+1)^(0+256)
 11784  1EFA  0008               	return
 11785  1EFB                     __end_ofPL186:	
 11786  1EFB                     PL188:	
 11787  1EFB  0086               	movwf	6
 11788  1EFC  3000               	movlw	0
 11789  1EFD  3D57               	addwfc	(??_channelView+1)^(0+256),w
 11790  1EFE  0087               	movwf	7
 11791  1EFF  0801               	movf	1,w
 11792  1F00  0008               	return
 11793  1F01                     __end_ofPL188:	
 11794  1F01                     PL194:	
 11795  1F01  0142               	movlb	2	; select bank2
 11796  1F02  3004               	movlw	4
 11797  1F03  0AE2               	incf	channelView@n^(0+256),f
 11798  1F04  0262               	subwf	channelView@n^(0+256),w
 11799  1F05  0008               	return
 11800  1F06                     __end_ofPL194:	
 11801  1F06                     PL200:	
 11802  1F06  0146               	movlb	6	; select bank6
 11803  1F07  01A0               	clrf	_sBuf1^(0+768)
 11804  1F08  0142               	movlb	2	; select bank2
 11805  1F09  01E2               	clrf	channelView@n^(0+256)
 11806  1F0A  0008               	return
 11807  1F0B                     __end_ofPL200:	
 11808  1F0B                     PL202:	
 11809  1F0B  30CD               	movlw	(low (_sBuf2| (0+256)))& (0+255)
 11810  1F0C  0140               	movlb	0	; select bank0
 11811  1F0D  00B1               	movwf	strcat@src
 11812  1F0E  3420               	retlw	(low (_sBuf1| (0+768)))& (0+255)
 11813  1F0F                     __end_ofPL202:	
 11814  1F0F                     PL208:	
 11815  1F0F  0140               	movlb	0	; select bank0
 11816  1F10  300C               	movlw	12
 11817  1F11  0AAB               	incf	paging@n,f
 11818  1F12  022B               	subwf	paging@n,w
 11819  1F13  0008               	return
 11820  1F14                     __end_ofPL208:	
 11821  1F14                     __ptext18:	
 11822 ;; *************** function _strncmp *****************
 11823 ;; Defined at:
 11824 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strncmp.c"
 11825 ;; Parameters:    Size  Location     Type
 11826 ;;  _l              1    wreg     PTR const unsigned char 
 11827 ;;		 -> vfpfcnvrt@ct(3), 
 11828 ;;  _r              2    0[BANK0 ] PTR const unsigned char 
 11829 ;;		 -> STR_33(3), 
 11830 ;;  n               2    2[BANK0 ] unsigned int 
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;  _l              1    5[BANK0 ] PTR const unsigned char 
 11833 ;;		 -> vfpfcnvrt@ct(3), 
 11834 ;;  r               2    6[BANK0 ] PTR const unsigned char 
 11835 ;;		 -> STR_33(3), 
 11836 ;;  l               1    8[BANK0 ] PTR const unsigned char 
 11837 ;;		 -> vfpfcnvrt@ct(3), 
 11838 ;; Return value:  Size  Location     Type
 11839 ;;                  2    0[BANK0 ] int 
 11840 ;; Registers used:
 11841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11842 ;; Tracked objects:
 11843 ;;		On entry : 3F/0
 11844 ;;		On exit  : 3F/0
 11845 ;;		Unchanged: 0/0
 11846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11848 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11850 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11851 ;;Total ram usage:        9 bytes
 11852 ;; Hardware stack levels used:    1
 11853 ;; Hardware stack levels required when called:    3
 11854 ;; This function calls:
 11855 ;;		Nothing
 11856 ;; This function is called by:
 11857 ;;		_vfpfcnvrt
 11858 ;; This function uses a non-reentrant model
 11859 ;;
 11860                           
 11861                           
 11862                           ;psect for function _strncmp
 11863  1F14                     _strncmp:	
 11864                           
 11865                           ;incstack = 0
 11866                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
 11867                           ;strncmp@_l stored from wreg
 11868  1F14  00A5               	movwf	strncmp@_l
 11869  1F15  00A8               	movwf	strncmp@l
 11870  1F16  0821               	movf	strncmp@_r+1,w
 11871  1F17  00A7               	movwf	strncmp@r+1
 11872  1F18  0820               	movf	strncmp@_r,w
 11873  1F19  00A6               	movwf	strncmp@r
 11874  1F1A  2756  3198         	fcall	PL214	;call to abstracted procedure
 11875  1F1C  0F22               	incfsz	strncmp@n,w
 11876  1F1D  2F3C               	goto	l5105
 11877  1F1E  0A23               	incf	strncmp@n+1,w
 11878  1F1F  1D03               	btfss	3,2
 11879  1F20  2F3C               	goto	l5105
 11880  1F21  01A0               	clrf	?_strncmp
 11881  1F22  01A1               	clrf	?_strncmp+1
 11882  1F23  0008               	return
 11883  1F24                     l5107:	
 11884  1F24  0826               	movf	strncmp@r,w
 11885  1F25  0084               	movwf	4
 11886  1F26  0827               	movf	strncmp@r+1,w
 11887  1F27  0085               	movwf	5
 11888  1F28  0012               	moviw fsr0++
 11889  1F29  1903               	btfsc	3,2
 11890  1F2A  2F40               	goto	l5113
 11891  1F2B  0822               	movf	strncmp@n,w
 11892  1F2C  0423               	iorwf	strncmp@n+1,w
 11893  1F2D  1903               	btfsc	3,2
 11894  1F2E  2F40               	goto	l5113
 11895  1F2F  274F  3198         	fcall	PL160	;call to abstracted procedure
 11896  1F31  2749  3198         	fcall	PL144	;call to abstracted procedure
 11897  1F33  0624               	xorwf	??_strncmp,w
 11898  1F34  1D03               	btfss	3,2
 11899  1F35  2F40               	goto	l5113
 11900  1F36  0AA8               	incf	strncmp@l,f
 11901  1F37  0AA6               	incf	strncmp@r,f
 11902  1F38  1903               	skipnz
 11903  1F39  0AA7               	incf	strncmp@r+1,f
 11904  1F3A  2756  3198         	fcall	PL214	;call to abstracted procedure
 11905  1F3C                     l5105:	
 11906  1F3C  2749  3198         	fcall	PL144	;call to abstracted procedure
 11907  1F3E  1D03               	btfss	3,2
 11908  1F3F  2F24               	goto	l5107
 11909  1F40                     l5113:	
 11910  1F40  2749  3198         	fcall	PL144	;call to abstracted procedure
 11911  1F42  00A0               	movwf	?_strncmp
 11912  1F43  01A1               	clrf	?_strncmp+1
 11913  1F44  274F               	fcall	PL160	;call to abstracted procedure
 11914  1F45  02A0               	subwf	?_strncmp,f
 11915  1F46  1C03               	skipc
 11916  1F47  03A1               	decf	?_strncmp+1,f
 11917  1F48  0008               	return
 11918  1F49                     __end_of_strncmp:	
 11919  1F49                     PL144:	
 11920  1F49  0828               	movf	strncmp@l,w
 11921  1F4A  0086               	movwf	6
 11922  1F4B  3001               	movlw	1	; select bank2/3
 11923  1F4C  0087               	movwf	7
 11924  1F4D  0801               	movf	1,w
 11925  1F4E  0008               	return
 11926  1F4F                     __end_ofPL144:	
 11927  1F4F                     PL160:	
 11928  1F4F  0826               	movf	strncmp@r,w
 11929  1F50  0084               	movwf	4
 11930  1F51  0827               	movf	strncmp@r+1,w
 11931  1F52  0085               	movwf	5
 11932  1F53  0800               	movf	0,w	;code access
 11933  1F54  00A4               	movwf	??_strncmp
 11934  1F55  0008               	return
 11935  1F56                     __end_ofPL160:	
 11936  1F56                     PL214:	
 11937  1F56  3001               	movlw	1
 11938  1F57  02A2               	subwf	strncmp@n,f
 11939  1F58  3000               	movlw	0
 11940  1F59  3BA3               	subwfb	strncmp@n+1,f
 11941  1F5A  0008               	return
 11942  1F5B                     __end_ofPL214:	
 11943  1F5B                     __ptext19:	
 11944 ;; *************** function _stoa *****************
 11945 ;; Defined at:
 11946 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 11947 ;; Parameters:    Size  Location     Type
 11948 ;;  fp              1    wreg     PTR struct _IO_FILE
 11949 ;;		 -> sprintf@f(6), 
 11950 ;;  s               2    8[BANK0 ] PTR unsigned char 
 11951 ;;		 -> ?_sprintf(2), STR_12(7), STR_11(7), sBuf2(13), 
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
 11954 ;;		 -> sprintf@f(6), 
 11955 ;;  nuls            7   11[BANK0 ] unsigned char [7]
 11956 ;;  l               2   27[BANK0 ] int 
 11957 ;;  p               2   25[BANK0 ] int 
 11958 ;;  cp              2   23[BANK0 ] PTR unsigned char 
 11959 ;;		 -> ?_sprintf(2), stoa@nuls(7), STR_12(7), STR_11(7), 
 11960 ;;		 -> sBuf2(13), 
 11961 ;;  w               2   20[BANK0 ] int 
 11962 ;;  i               2   18[BANK0 ] int 
 11963 ;; Return value:  Size  Location     Type
 11964 ;;                  2    8[BANK0 ] int 
 11965 ;; Registers used:
 11966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11967 ;; Tracked objects:
 11968 ;;		On entry : 3F/2
 11969 ;;		On exit  : 3F/0
 11970 ;;		Unchanged: 0/0
 11971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11972 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11973 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11975 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11976 ;;Total ram usage:       21 bytes
 11977 ;; Hardware stack levels used:    1
 11978 ;; Hardware stack levels required when called:    5
 11979 ;; This function calls:
 11980 ;;		_fputc
 11981 ;;		_strlen
 11982 ;; This function is called by:
 11983 ;;		_vfpfcnvrt
 11984 ;; This function uses a non-reentrant model
 11985 ;;
 11986                           
 11987                           
 11988                           ;psect for function _stoa
 11989  1F5B                     _stoa:	
 11990                           
 11991                           ;incstack = 0
 11992                           ; Regs used in _stoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11993                           ;stoa@fp stored from wreg
 11994  1F5B  0140               	movlb	0	; select bank0
 11995  1F5C  00B6               	movwf	stoa@fp
 11996                           
 11997                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
 11998  1F5D  30E2               	movlw	low stoa@F1151
 11999  1F5E  0086               	movwf	6
 12000  1F5F  3001               	movlw	high stoa@F1151
 12001  1F60  0087               	movwf	7
 12002  1F61  302B               	movlw	low stoa@nuls
 12003  1F62  0084               	movwf	4
 12004  1F63  3000               	movlw	high stoa@nuls
 12005  1F64  0085               	movwf	5
 12006  1F65  3007               	movlw	7
 12007  1F66  00AA               	movwf	??_stoa
 12008  1F67                     u5940:	
 12009  1F67  0016               	moviw fsr1++
 12010  1F68  001A               	movwi fsr0++
 12011  1F69  0BAA               	decfsz	??_stoa,f
 12012  1F6A  2F67               	goto	u5940
 12013                           
 12014                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
 12015  1F6B  0829               	movf	stoa@s+1,w
 12016  1F6C  00B8               	movwf	stoa@cp+1
 12017  1F6D  0828               	movf	stoa@s,w
 12018  1F6E  00B7               	movwf	stoa@cp
 12019                           
 12020                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
 12021  1F6F  0438               	iorwf	stoa@cp+1,w
 12022  1F70  1D03               	btfss	3,2
 12023  1F71  2F76               	goto	l5007
 12024                           
 12025                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
 12026  1F72  302B               	movlw	low stoa@nuls
 12027  1F73  00B7               	movwf	stoa@cp
 12028  1F74  3000               	movlw	high stoa@nuls
 12029  1F75  00B8               	movwf	stoa@cp+1
 12030  1F76                     l5007:	
 12031                           
 12032                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
 12033  1F76  0838               	movf	stoa@cp+1,w
 12034  1F77  00A1               	movwf	strlen@s+1
 12035  1F78  0837               	movf	stoa@cp,w
 12036  1F79  00A0               	movwf	strlen@s
 12037  1F7A  2351  3198         	fcall	_strlen
 12038  1F7C  0821               	movf	?_strlen+1,w
 12039  1F7D  00BC               	movwf	stoa@l+1
 12040  1F7E  0820               	movf	?_strlen,w
 12041  1F7F  00BB               	movwf	stoa@l
 12042                           
 12043                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
 12044  1F80  087C               	movf	_prec+1,w
 12045  1F81  00BA               	movwf	stoa@p+1
 12046  1F82  087B               	movf	_prec,w
 12047  1F83  00B9               	movwf	stoa@p
 12048                           
 12049                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
 12050  1F84  1BBA               	btfsc	stoa@p+1,7
 12051  1F85  2F97               	goto	l708
 12052  1F86  083A               	movf	stoa@p+1,w
 12053  1F87  3A80               	xorlw	128
 12054  1F88  00AA               	movwf	??_stoa
 12055  1F89  083C               	movf	stoa@l+1,w
 12056  1F8A  3A80               	xorlw	128
 12057  1F8B  022A               	subwf	??_stoa,w
 12058  1F8C  1D03               	skipz
 12059  1F8D  2F90               	goto	u5975
 12060  1F8E  083B               	movf	stoa@l,w
 12061  1F8F  0239               	subwf	stoa@p,w
 12062  1F90                     u5975:	
 12063  1F90  1803               	btfsc	3,0
 12064  1F91  2F97               	goto	l708
 12065  1F92  0140               	movlb	0	; select bank0
 12066  1F93  083A               	movf	stoa@p+1,w
 12067  1F94  00BC               	movwf	stoa@l+1
 12068  1F95  0839               	movf	stoa@p,w
 12069  1F96  00BB               	movwf	stoa@l
 12070  1F97                     l708:	
 12071                           
 12072                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
 12073  1F97  0140               	movlb	0	; select bank0
 12074  1F98  083C               	movf	stoa@l+1,w
 12075  1F99  00BA               	movwf	stoa@p+1
 12076  1F9A  083B               	movf	stoa@l,w
 12077  1F9B  00B9               	movwf	stoa@p
 12078                           
 12079                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
 12080  1F9C  0143               	movlb	3	; select bank3
 12081  1F9D  0837               	movf	(_width+1)^(0+384),w
 12082  1F9E  0140               	movlb	0	; select bank0
 12083  1F9F  00B5               	movwf	stoa@w+1
 12084  1FA0  0143               	movlb	3	; select bank3
 12085  1FA1  0836               	movf	_width^(0+384),w
 12086  1FA2  0140               	movlb	0	; select bank0
 12087  1FA3  00B4               	movwf	stoa@w
 12088                           
 12089                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
 12090  1FA4  0142               	movlb	2	; select bank2
 12091  1FA5  1C6E               	btfss	_flags^(0+256),0
 12092  1FA6  2FB0               	goto	l5025
 12093  1FA7  2FB4               	goto	l5027
 12094  1FA8                     l5021:	
 12095                           
 12096                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
 12097  1FA8  27F9  3198         	fcall	PL146	;call to abstracted procedure
 12098  1FAA  25B1  3198         	fcall	_fputc
 12099                           
 12100                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
 12101  1FAC  0140               	movlb	0	; select bank0
 12102  1FAD  0ABB               	incf	stoa@l,f
 12103  1FAE  1903               	skipnz
 12104  1FAF  0ABC               	incf	stoa@l+1,f
 12105  1FB0                     l5025:	
 12106                           
 12107                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
 12108  1FB0  27ED  3198         	fcall	PL80	;call to abstracted procedure
 12109  1FB2  1C03               	skipc
 12110  1FB3  2FA8               	goto	l5021
 12111  1FB4                     l5027:	
 12112                           
 12113                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
 12114  1FB4  0140               	movlb	0	; select bank0
 12115  1FB5  01B2               	clrf	stoa@i
 12116  1FB6  01B3               	clrf	stoa@i+1
 12117  1FB7                     l5035:	
 12118                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 12119                           
 12120                           
 12121                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 12122  1FB7  0833               	movf	stoa@i+1,w
 12123  1FB8  3A80               	xorlw	128
 12124  1FB9  00AA               	movwf	??_stoa
 12125  1FBA  083A               	movf	stoa@p+1,w
 12126  1FBB  3A80               	xorlw	128
 12127  1FBC  022A               	subwf	??_stoa,w
 12128  1FBD  1D03               	skipz
 12129  1FBE  2FC1               	goto	u6005
 12130  1FBF  0839               	movf	stoa@p,w
 12131  1FC0  0232               	subwf	stoa@i,w
 12132  1FC1                     u6005:	
 12133  1FC1  1803               	btfsc	3,0
 12134  1FC2  2FD7               	goto	l717
 12135                           
 12136                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
 12137  1FC3  0140               	movlb	0	; select bank0
 12138  1FC4  0837               	movf	stoa@cp,w
 12139  1FC5  0084               	movwf	4
 12140  1FC6  0838               	movf	stoa@cp+1,w
 12141  1FC7  0085               	movwf	5
 12142  1FC8  0800               	movf	0,w	;code access
 12143  1FC9  00A0               	movwf	fputc@c
 12144  1FCA  01A1               	clrf	fputc@c+1
 12145  1FCB  0836               	movf	stoa@fp,w
 12146  1FCC  00A2               	movwf	fputc@fp
 12147  1FCD  25B1  3198         	fcall	_fputc
 12148                           
 12149                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
 12150  1FCF  0140               	movlb	0	; select bank0
 12151  1FD0  0AB7               	incf	stoa@cp,f
 12152  1FD1  1903               	skipnz
 12153  1FD2  0AB8               	incf	stoa@cp+1,f
 12154                           
 12155                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
 12156  1FD3  0AB2               	incf	stoa@i,f
 12157  1FD4  1903               	skipnz
 12158  1FD5  0AB3               	incf	stoa@i+1,f
 12159  1FD6  2FB7               	goto	l5035
 12160  1FD7                     l717:	
 12161                           
 12162                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
 12163  1FD7  0142               	movlb	2	; select bank2
 12164  1FD8  186E               	btfsc	_flags^(0+256),0
 12165  1FD9  2FE3               	goto	l5043
 12166  1FDA  2FE7               	goto	l5045
 12167  1FDB                     l5039:	
 12168                           
 12169                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
 12170  1FDB  27F9  3198         	fcall	PL146	;call to abstracted procedure
 12171  1FDD  25B1  3198         	fcall	_fputc
 12172                           
 12173                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
 12174  1FDF  0140               	movlb	0	; select bank0
 12175  1FE0  0ABB               	incf	stoa@l,f
 12176  1FE1  1903               	skipnz
 12177  1FE2  0ABC               	incf	stoa@l+1,f
 12178  1FE3                     l5043:	
 12179                           
 12180                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
 12181  1FE3  27ED  3198         	fcall	PL80	;call to abstracted procedure
 12182  1FE5  1C03               	skipc
 12183  1FE6  2FDB               	goto	l5039
 12184  1FE7                     l5045:	
 12185                           
 12186                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
 12187  1FE7  0140               	movlb	0	; select bank0
 12188  1FE8  083C               	movf	stoa@l+1,w
 12189  1FE9  00A9               	movwf	?_stoa+1
 12190  1FEA  083B               	movf	stoa@l,w
 12191  1FEB  00A8               	movwf	?_stoa
 12192  1FEC  0008               	return
 12193  1FED                     __end_of_stoa:	
 12194  1FED                     PL80:	
 12195  1FED  0140               	movlb	0	; select bank0
 12196  1FEE  083C               	movf	stoa@l+1,w
 12197  1FEF  3A80               	xorlw	128
 12198  1FF0  00AA               	movwf	??_stoa
 12199  1FF1  0835               	movf	stoa@w+1,w
 12200  1FF2  3A80               	xorlw	128
 12201  1FF3  022A               	subwf	??_stoa,w
 12202  1FF4  1D03               	skipz
 12203  1FF5  0008               	return
 12204  1FF6  0834               	movf	stoa@w,w
 12205  1FF7  023B               	subwf	stoa@l,w
 12206  1FF8  0008               	return
 12207  1FF9                     __end_ofPL80:	
 12208  1FF9                     PL146:	
 12209  1FF9  3020               	movlw	32
 12210  1FFA  0140               	movlb	0	; select bank0
 12211  1FFB  00A0               	movwf	fputc@c
 12212  1FFC  01A1               	clrf	fputc@c+1
 12213  1FFD  0836               	movf	stoa@fp,w
 12214  1FFE  00A2               	movwf	fputc@fp
 12215  1FFF  0008               	return
 12216  2000                     __end_ofPL146:	
 12217                           
 12218                           	psect	swtext1
 12219  077D                     __pswtext1:	
 12220  077D                     S6881:	
 12221  077D  3199  2925         	ljmp	l6657
 12222  077F  3199  292B         	ljmp	l6659
 12223  0781  3199  296B         	ljmp	l6667
 12224  0783  3199  2971         	ljmp	l6669
 12225  0785  3199  2977         	ljmp	l6671
 12226                           
 12227                           	psect	text20
 12228  103E                     __ptext20:	
 12229 ;; *************** function _efgtoa *****************
 12230 ;; Defined at:
 12231 ;;		line 319 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 12232 ;; Parameters:    Size  Location     Type
 12233 ;;  fp              1    wreg     PTR struct _IO_FILE
 12234 ;;		 -> sprintf@f(6), 
 12235 ;;  f               4   72[BANK0 ] PTR struct _IO_FILE
 12236 ;;  c               1   76[BANK0 ] unsigned char 
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;  fp              1   36[BANK1 ] PTR struct _IO_FILE
 12239 ;;		 -> sprintf@f(6), 
 12240 ;;  u               4   63[BANK1 ] PTR struct _IO_FILE
 12241 ;;  g               4   55[BANK1 ] PTR struct _IO_FILE
 12242 ;;  l               4   49[BANK1 ] PTR struct _IO_FILE
 12243 ;;  h               4   45[BANK1 ] PTR struct _IO_FILE
 12244 ;;  ou              4   10[BANK1 ] PTR struct _IO_FILE
 12245 ;;  n               2   61[BANK1 ] int 
 12246 ;;  e               2   59[BANK1 ] int 
 12247 ;;  i               2   53[BANK1 ] int 
 12248 ;;  w               2   42[BANK1 ] int 
 12249 ;;  p               2   39[BANK1 ] int 
 12250 ;;  sign            2   37[BANK1 ] int 
 12251 ;;  d               2   34[BANK1 ] int 
 12252 ;;  ne              2   32[BANK1 ] int 
 12253 ;;  m               2   30[BANK1 ] int 
 12254 ;;  pp              2   28[BANK1 ] int 
 12255 ;;  t               2   26[BANK1 ] int 
 12256 ;;  mode            1   44[BANK1 ] unsigned char 
 12257 ;;  nmode           1   41[BANK1 ] unsigned char 
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  2   72[BANK0 ] int 
 12260 ;; Registers used:
 12261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12262 ;; Tracked objects:
 12263 ;;		On entry : 3F/2
 12264 ;;		On exit  : 3F/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12267 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12268 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12269 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12270 ;;      Totals:         0       8      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12271 ;;Total ram usage:       65 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    7
 12274 ;; This function calls:
 12275 ;;		___awdiv
 12276 ;;		___awmod
 12277 ;;		___fladd
 12278 ;;		___fldiv
 12279 ;;		___fleq
 12280 ;;		___flge
 12281 ;;		___flmul
 12282 ;;		___flneg
 12283 ;;		___flsub
 12284 ;;		___fltol
 12285 ;;		___fpclassifyf
 12286 ;;		_floorf
 12287 ;;		_isupper
 12288 ;;		_pad
 12289 ;;		_strcpy
 12290 ;;		_tolower
 12291 ;; This function is called by:
 12292 ;;		_vfpfcnvrt
 12293 ;; This function uses a non-reentrant model
 12294 ;;
 12295                           
 12296                           
 12297                           ;psect for function _efgtoa
 12298  103E                     _efgtoa:	
 12299                           
 12300                           ;incstack = 0
 12301                           ; Regs used in _efgtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12302                           ;efgtoa@fp stored from wreg
 12303  103E  0141               	movlb	1	; select bank1
 12304  103F  00C4               	movwf	efgtoa@fp^(0+128)
 12305                           
 12306                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 319: static
      +                           int efgtoa(FILE *fp, long double f, char c);C:\Program Files (x86)\Microchip\xc8\v2.00\
      +                          pic\sources\c99\common\doprnt.c: 320: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\s
      +                          ources\c99\common\doprnt.c: 321:     char mode, nmode;;C:\Program Files (x86)\Microchip\
      +                          xc8\v2.00\pic\sources\c99\common\doprnt.c: 322:     int d, e, i, m, n, ne, p, pp, sign, 
      +                          t, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 323:  
      +                             long double g, h, l, ou, u;
 12307  1040  01C5               	clrf	efgtoa@sign^(0+128)
 12308  1041  01C6               	clrf	(efgtoa@sign+1)^(0+128)
 12309                           
 12310                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 327:     g 
      +                          = f;
 12311  1042  0140               	movlb	0	; select bank0
 12312  1043  086B               	movf	efgtoa@f+3,w
 12313  1044  0141               	movlb	1	; select bank1
 12314  1045  00DA               	movwf	(efgtoa@g+3)^(0+128)
 12315  1046  0140               	movlb	0	; select bank0
 12316  1047  086A               	movf	efgtoa@f+2,w
 12317  1048  0141               	movlb	1	; select bank1
 12318  1049  00D9               	movwf	(efgtoa@g+2)^(0+128)
 12319  104A  0140               	movlb	0	; select bank0
 12320  104B  0869               	movf	efgtoa@f+1,w
 12321  104C  0141               	movlb	1	; select bank1
 12322  104D  00D8               	movwf	(efgtoa@g+1)^(0+128)
 12323  104E  0140               	movlb	0	; select bank0
 12324  104F  0868               	movf	efgtoa@f,w
 12325  1050  0141               	movlb	1	; select bank1
 12326  1051  00D7               	movwf	efgtoa@g^(0+128)
 12327                           
 12328                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 328:     if
      +                           (g < 0.0) {
 12329  1052  2632  3190         	fcall	PL30	;call to abstracted procedure
 12330  1054  26D9  3190         	fcall	PL192	;call to abstracted procedure
 12331  1056  24DA  3190         	fcall	___flge
 12332  1058  1803               	btfsc	3,0
 12333  1059  287E               	goto	l6153
 12334                           
 12335                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 329:       
      +                            sign = 1;
 12336  105A  0141               	movlb	1	; select bank1
 12337  105B  01C5               	clrf	efgtoa@sign^(0+128)
 12338  105C  0AC5               	incf	efgtoa@sign^(0+128),f
 12339  105D  01C6               	clrf	(efgtoa@sign+1)^(0+128)
 12340                           
 12341                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 330:       
      +                            g = -g;
 12342  105E  085A               	movf	(efgtoa@g+3)^(0+128),w
 12343  105F  0140               	movlb	0	; select bank0
 12344  1060  00A3               	movwf	___flneg@f1+3
 12345  1061  0141               	movlb	1	; select bank1
 12346  1062  0859               	movf	(efgtoa@g+2)^(0+128),w
 12347  1063  0140               	movlb	0	; select bank0
 12348  1064  00A2               	movwf	___flneg@f1+2
 12349  1065  0141               	movlb	1	; select bank1
 12350  1066  0858               	movf	(efgtoa@g+1)^(0+128),w
 12351  1067  0140               	movlb	0	; select bank0
 12352  1068  00A1               	movwf	___flneg@f1+1
 12353  1069  0141               	movlb	1	; select bank1
 12354  106A  0857               	movf	efgtoa@g^(0+128),w
 12355  106B  0140               	movlb	0	; select bank0
 12356  106C  00A0               	movwf	___flneg@f1
 12357  106D  27F7  3190         	fcall	___flneg
 12358  106F  0823               	movf	?___flneg+3,w
 12359  1070  0141               	movlb	1	; select bank1
 12360  1071  00DA               	movwf	(efgtoa@g+3)^(0+128)
 12361  1072  0140               	movlb	0	; select bank0
 12362  1073  0822               	movf	?___flneg+2,w
 12363  1074  0141               	movlb	1	; select bank1
 12364  1075  00D9               	movwf	(efgtoa@g+2)^(0+128)
 12365  1076  0140               	movlb	0	; select bank0
 12366  1077  0821               	movf	?___flneg+1,w
 12367  1078  0141               	movlb	1	; select bank1
 12368  1079  00D8               	movwf	(efgtoa@g+1)^(0+128)
 12369  107A  0140               	movlb	0	; select bank0
 12370  107B  0820               	movf	?___flneg,w
 12371  107C  0141               	movlb	1	; select bank1
 12372  107D  00D7               	movwf	efgtoa@g^(0+128)
 12373  107E                     l6153:	
 12374                           
 12375                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 334:     n 
      +                          = 0;
 12376  107E  0141               	movlb	1	; select bank1
 12377  107F  01DD               	clrf	efgtoa@n^(0+128)
 12378  1080  01DE               	clrf	(efgtoa@n+1)^(0+128)
 12379                           
 12380                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 335:     w 
      +                          = width;
 12381  1081  0143               	movlb	3	; select bank3
 12382  1082  0837               	movf	(_width+1)^(0+384),w
 12383  1083  0141               	movlb	1	; select bank1
 12384  1084  00CB               	movwf	(efgtoa@w+1)^(0+128)
 12385  1085  0143               	movlb	3	; select bank3
 12386  1086  0836               	movf	_width^(0+384),w
 12387  1087  0141               	movlb	1	; select bank1
 12388  1088  00CA               	movwf	efgtoa@w^(0+128)
 12389                           
 12390                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 336:     if
      +                           (sign || (flags & (1 << 2))) {
 12391  1089  0845               	movf	efgtoa@sign^(0+128),w
 12392  108A  0446               	iorwf	(efgtoa@sign+1)^(0+128),w
 12393  108B  1D03               	btfss	3,2
 12394  108C  2890               	goto	l6161
 12395  108D  0142               	movlb	2	; select bank2
 12396  108E  1D6E               	btfss	_flags^(0+256),2
 12397  108F  28A4               	goto	l6173
 12398  1090                     l6161:	
 12399                           
 12400                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 337:       
      +                            dbuf[n] = sign ? '-' : '+';
 12401  1090  0141               	movlb	1	; select bank1
 12402  1091  0845               	movf	efgtoa@sign^(0+128),w
 12403  1092  0446               	iorwf	(efgtoa@sign+1)^(0+128),w
 12404  1093  1D03               	btfss	3,2
 12405  1094  2897               	goto	l6165
 12406  1095  302B               	movlw	43
 12407  1096  2898               	goto	L6
 12408  1097                     l6165:	
 12409  1097  302D               	movlw	45
 12410  1098                     L6:	
 12411  1098  00AE               	movwf	_efgtoa$1298^(0+128)
 12412  1099  01AF               	clrf	(_efgtoa$1298+1)^(0+128)
 12413  109A  0145               	movlb	5	; select bank5
 12414  109B  00A0               	movwf	_dbuf^(0+640)
 12415                           
 12416                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 338:       
      +                            ++n;
 12417  109C  0141               	movlb	1	; select bank1
 12418  109D  0ADD               	incf	efgtoa@n^(0+128),f
 12419  109E  1903               	skipnz
 12420  109F  0ADE               	incf	(efgtoa@n+1)^(0+128),f
 12421                           
 12422                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 339:       
      +                            --w;
 12423  10A0  30FF               	movlw	-1
 12424  10A1  07CA               	addwf	efgtoa@w^(0+128),f
 12425  10A2  1C03               	skipc
 12426  10A3  03CB               	decf	(efgtoa@w+1)^(0+128),f
 12427  10A4                     l6173:	
 12428                           
 12429                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 344:       
      +                            if ((0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
 12430  10A4  2669  3190         	fcall	PL48	;call to abstracted procedure
 12431  10A6  2717  3190         	fcall	___fpclassifyf
 12432  10A8  0320               	decf	?___fpclassifyf,w
 12433  10A9  0421               	iorwf	?___fpclassifyf+1,w
 12434  10AA  1D03               	btfss	3,2
 12435  10AB  28CB               	goto	l6191
 12436  10AC  25AE  3190         	fcall	PL16	;call to abstracted procedure
 12437  10AE  00B0               	movwf	_efgtoa$1299^(0+128)
 12438  10AF  01B1               	clrf	(_efgtoa$1299+1)^(0+128)
 12439  10B0  0431               	iorwf	(_efgtoa$1299+1)^(0+128),w
 12440  10B1  1903               	btfsc	3,2
 12441  10B2  28B9               	goto	l6183
 12442                           
 12443                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 345:       
      +                                strcpy(&dbuf[n], "INF");
 12444  10B3  2689  3190         	fcall	PL60	;call to abstracted procedure
 12445  10B5  30B6               	movlw	low (STR_23| (0+32768))
 12446  10B6  00A7               	movwf	strcpy@src
 12447  10B7  30A1               	movlw	high (STR_23| (0+32768))
 12448  10B8  28BE               	goto	L7
 12449  10B9                     l6183:	
 12450                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 346:       
      +                            } else {
 12451                           
 12452                           
 12453                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 347:       
      +                                strcpy(&dbuf[n], "inf");
 12454  10B9  2689  3190         	fcall	PL60	;call to abstracted procedure
 12455  10BB  30BE               	movlw	low (STR_24| (0+32768))
 12456  10BC  00A7               	movwf	strcpy@src
 12457  10BD  30A1               	movlw	high (STR_24| (0+32768))
 12458  10BE                     L7:	
 12459  10BE  00A8               	movwf	strcpy@src+1
 12460  10BF  2534  3190         	fcall	_strcpy
 12461                           
 12462                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 349:       
      +                            w -= ((sizeof("inf")/sizeof("inf"[0]))-1);
 12463  10C1  30FD               	movlw	-3
 12464  10C2  0141               	movlb	1	; select bank1
 12465  10C3  07CA               	addwf	efgtoa@w^(0+128),f
 12466  10C4  1C03               	skipc
 12467  10C5  03CB               	decf	(efgtoa@w+1)^(0+128),f
 12468                           
 12469                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 350:       
      +                            return pad(fp, &dbuf[0], w);
 12470  10C6  265B               	fcall	PL36	;call to abstracted procedure
 12471  10C7  3184  24C7  3190   	fcall	_pad
 12472  10CA  2EC2               	ljmp	PL142	;call to abstracted procedure
 12473  10CB                     l6191:	
 12474                           
 12475                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 353:       
      +                            if ((0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
 12476  10CB  2669  3190         	fcall	PL48	;call to abstracted procedure
 12477  10CD  2717  3190         	fcall	___fpclassifyf
 12478  10CF  0820               	movf	?___fpclassifyf,w
 12479  10D0  0421               	iorwf	?___fpclassifyf+1,w
 12480  10D1  1D03               	btfss	3,2
 12481  10D2  28F2               	goto	l6209
 12482  10D3  25AE  3190         	fcall	PL16	;call to abstracted procedure
 12483  10D5  00B2               	movwf	_efgtoa$1303^(0+128)
 12484  10D6  01B3               	clrf	(_efgtoa$1303+1)^(0+128)
 12485  10D7  0433               	iorwf	(_efgtoa$1303+1)^(0+128),w
 12486  10D8  1903               	btfsc	3,2
 12487  10D9  28E0               	goto	l6201
 12488                           
 12489                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 354:       
      +                                strcpy(&dbuf[n], "NAN");
 12490  10DA  2689  3190         	fcall	PL60	;call to abstracted procedure
 12491  10DC  30BA               	movlw	low (STR_27| (0+32768))
 12492  10DD  00A7               	movwf	strcpy@src
 12493  10DE  30A1               	movlw	high (STR_27| (0+32768))
 12494  10DF  28E5               	goto	L8
 12495  10E0                     l6201:	
 12496                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 355:       
      +                            } else {
 12497                           
 12498                           
 12499                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 356:       
      +                                strcpy(&dbuf[n], "nan");
 12500  10E0  2689  3190         	fcall	PL60	;call to abstracted procedure
 12501  10E2  30C2               	movlw	low (STR_28| (0+32768))
 12502  10E3  00A7               	movwf	strcpy@src
 12503  10E4  30A1               	movlw	high (STR_28| (0+32768))
 12504  10E5                     L8:	
 12505  10E5  00A8               	movwf	strcpy@src+1
 12506  10E6  2534  3190         	fcall	_strcpy
 12507                           
 12508                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 358:       
      +                            w -= ((sizeof("inf")/sizeof("inf"[0]))-1);
 12509  10E8  30FD               	movlw	-3
 12510  10E9  0141               	movlb	1	; select bank1
 12511  10EA  07CA               	addwf	efgtoa@w^(0+128),f
 12512  10EB  1C03               	skipc
 12513  10EC  03CB               	decf	(efgtoa@w+1)^(0+128),f
 12514                           
 12515                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 359:       
      +                            return pad(fp, &dbuf[0], w);
 12516  10ED  265B               	fcall	PL36	;call to abstracted procedure
 12517  10EE  3184  24C7  3190   	fcall	_pad
 12518  10F1  2EC2               	ljmp	PL142	;call to abstracted procedure
 12519  10F2                     l6209:	
 12520                           
 12521                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 363:     u 
      +                          = 1.0;
 12522  10F2  303F               	movlw	63
 12523  10F3  0141               	movlb	1	; select bank1
 12524                           
 12525                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 364:     e 
      +                          = 0;
 12526  10F4  26AE  3190         	fcall	PL130	;call to abstracted procedure
 12527                           
 12528                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 365:     if
      +                           (!(g == 0.0)) {
 12529  10F6  085A               	movf	(efgtoa@g+3)^(0+128),w
 12530  10F7  0140               	movlb	0	; select bank0
 12531  10F8  00A3               	movwf	___fleq@ff1+3
 12532  10F9  0141               	movlb	1	; select bank1
 12533  10FA  0859               	movf	(efgtoa@g+2)^(0+128),w
 12534  10FB  0140               	movlb	0	; select bank0
 12535  10FC  00A2               	movwf	___fleq@ff1+2
 12536  10FD  0141               	movlb	1	; select bank1
 12537  10FE  0858               	movf	(efgtoa@g+1)^(0+128),w
 12538  10FF  0140               	movlb	0	; select bank0
 12539  1100  00A1               	movwf	___fleq@ff1+1
 12540  1101  0141               	movlb	1	; select bank1
 12541  1102  0857               	movf	efgtoa@g^(0+128),w
 12542  1103  0140               	movlb	0	; select bank0
 12543  1104  00A0               	movwf	___fleq@ff1
 12544  1105  2712  3190         	fcall	PL212	;call to abstracted procedure
 12545  1107  26DE  3190         	fcall	___fleq
 12546  1109  1C03               	btfss	3,0
 12547  110A  2925               	goto	l6221
 12548  110B  295E               	goto	l6229
 12549  110C                     l6217:	
 12550                           
 12551                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 367:       
      +                                u = u*10.0;
 12552  110C  3041               	movlw	65
 12553  110D  00B1               	movwf	___flmul@b+3
 12554  110E  3020               	movlw	32
 12555  110F  259A               	fcall	PL14	;call to abstracted procedure
 12556  1110  318C  2420  3190   	fcall	___flmul
 12557  1113  0831               	movf	?___flmul+3,w
 12558  1114  0141               	movlb	1	; select bank1
 12559  1115  00E2               	movwf	(efgtoa@u+3)^(0+128)
 12560  1116  0140               	movlb	0	; select bank0
 12561  1117  0830               	movf	?___flmul+2,w
 12562  1118  0141               	movlb	1	; select bank1
 12563  1119  00E1               	movwf	(efgtoa@u+2)^(0+128)
 12564  111A  0140               	movlb	0	; select bank0
 12565  111B  082F               	movf	?___flmul+1,w
 12566  111C  0141               	movlb	1	; select bank1
 12567  111D  00E0               	movwf	(efgtoa@u+1)^(0+128)
 12568  111E  0140               	movlb	0	; select bank0
 12569  111F  082E               	movf	?___flmul,w
 12570  1120  0141               	movlb	1	; select bank1
 12571  1121  00DF               	movwf	efgtoa@u^(0+128)
 12572                           
 12573                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 368:       
      +                                ++e;
 12574  1122  0ADB               	incf	efgtoa@e^(0+128),f
 12575  1123  1903               	skipnz
 12576  1124  0ADC               	incf	(efgtoa@e+1)^(0+128),f
 12577  1125                     l6221:	
 12578                           
 12579                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 366:       
      +                            while (!(g < (u*10.0))) {
 12580  1125  0141               	movlb	1	; select bank1
 12581  1126  2632  3190         	fcall	PL30	;call to abstracted procedure
 12582  1128  3041               	movlw	65
 12583  1129  00B1               	movwf	___flmul@b+3
 12584  112A  3020               	movlw	32
 12585  112B  259A               	fcall	PL14	;call to abstracted procedure
 12586  112C  318C  2420  3190   	fcall	___flmul
 12587  112F  0831               	movf	?___flmul+3,w
 12588  1130  00CE               	movwf	___flge@ff2+3
 12589  1131  0830               	movf	?___flmul+2,w
 12590  1132  00CD               	movwf	___flge@ff2+2
 12591  1133  082F               	movf	?___flmul+1,w
 12592  1134  00CC               	movwf	___flge@ff2+1
 12593  1135  082E               	movf	?___flmul,w
 12594  1136  00CB               	movwf	___flge@ff2
 12595  1137  24DA  3190         	fcall	___flge
 12596  1139  1C03               	btfss	3,0
 12597  113A  2947               	goto	l6227
 12598  113B  290C               	goto	l6217
 12599  113C                     l6223:	
 12600                           
 12601                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 371:       
      +                                u = u/10.0;
 12602  113C  3041               	movlw	65
 12603  113D  2573  3190         	fcall	PL8	;call to abstracted procedure
 12604  113F  23DC  3190         	fcall	___fldiv
 12605  1141  2622  3190         	fcall	PL28	;call to abstracted procedure
 12606                           
 12607                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 372:       
      +                                --e;
 12608  1143  30FF               	movlw	-1
 12609  1144  07DB               	addwf	efgtoa@e^(0+128),f
 12610  1145  1C03               	skipc
 12611  1146  03DC               	decf	(efgtoa@e+1)^(0+128),f
 12612  1147                     l6227:	
 12613                           
 12614                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 370:       
      +                            while (g < u) {
 12615  1147  0141               	movlb	1	; select bank1
 12616  1148  2632  3190         	fcall	PL30	;call to abstracted procedure
 12617  114A  0141               	movlb	1	; select bank1
 12618  114B  0862               	movf	(efgtoa@u+3)^(0+128),w
 12619  114C  0140               	movlb	0	; select bank0
 12620  114D  00CE               	movwf	___flge@ff2+3
 12621  114E  0141               	movlb	1	; select bank1
 12622  114F  0861               	movf	(efgtoa@u+2)^(0+128),w
 12623  1150  0140               	movlb	0	; select bank0
 12624  1151  00CD               	movwf	___flge@ff2+2
 12625  1152  0141               	movlb	1	; select bank1
 12626  1153  0860               	movf	(efgtoa@u+1)^(0+128),w
 12627  1154  0140               	movlb	0	; select bank0
 12628  1155  00CC               	movwf	___flge@ff2+1
 12629  1156  0141               	movlb	1	; select bank1
 12630  1157  085F               	movf	efgtoa@u^(0+128),w
 12631  1158  0140               	movlb	0	; select bank0
 12632  1159  00CB               	movwf	___flge@ff2
 12633  115A  24DA  3190         	fcall	___flge
 12634  115C  1C03               	btfss	3,0
 12635  115D  293C               	goto	l6223
 12636  115E                     l6229:	
 12637                           
 12638                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 377:     mo
      +                          de = tolower((int)c);
 12639  115E  086C               	movf	efgtoa@c,w
 12640  115F  00A4               	movwf	tolower@c
 12641  1160  01A5               	clrf	tolower@c+1
 12642  1161  319D  251D  3190   	fcall	_tolower
 12643  1164  0824               	movf	?_tolower,w
 12644  1165  0141               	movlb	1	; select bank1
 12645  1166  00CC               	movwf	efgtoa@mode^(0+128)
 12646                           
 12647                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 378:     nm
      +                          ode = mode;
 12648  1167  00C9               	movwf	efgtoa@nmode^(0+128)
 12649                           
 12650                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 379:     if
      +                           (mode == 'g') {
 12651  1168  3067               	movlw	103
 12652  1169  064C               	xorwf	efgtoa@mode^(0+128),w
 12653  116A  1D03               	btfss	3,2
 12654  116B  2981               	goto	l641
 12655                           
 12656                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 380:   if (
      +                          prec == 0) {
 12657  116C  087B               	movf	_prec,w
 12658  116D  047C               	iorwf	_prec+1,w
 12659  116E  1D03               	btfss	3,2
 12660  116F  2973               	goto	l6239
 12661                           
 12662                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 381:    pre
      +                          c = 1;
 12663  1170  01FB               	clrf	_prec
 12664  1171  0AFB               	incf	_prec,f
 12665  1172  01FC               	clrf	_prec+1
 12666  1173                     l6239:	
 12667                           
 12668                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 383:       
      +                            p = (0 < prec) ? prec : 6;
 12669  1173  087C               	movf	_prec+1,w
 12670  1174  26BC  3190         	fcall	PL138	;call to abstracted procedure
 12671  1176  1D03               	skipz
 12672  1177  297A               	goto	u7395
 12673  1178  3001               	movlw	1
 12674  1179  027B               	subwf	_prec,w
 12675  117A                     u7395:	
 12676  117A  1803               	skipnc
 12677  117B  2983               	goto	l6243
 12678  117C                     l6241:	
 12679  117C  3006               	movlw	6
 12680  117D  0141               	movlb	1	; select bank1
 12681  117E  00C7               	movwf	efgtoa@p^(0+128)
 12682  117F  01C8               	clrf	(efgtoa@p+1)^(0+128)
 12683  1180  2988               	goto	l6249
 12684  1181                     l641:	
 12685                           
 12686                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 385:       
      +                            p = (prec < 0) ? 6 : prec;
 12687  1181  1BFC               	btfsc	_prec+1,7
 12688  1182  297C               	goto	l6241
 12689  1183                     l6243:	
 12690  1183  087C               	movf	_prec+1,w
 12691  1184  0141               	movlb	1	; select bank1
 12692  1185  00C8               	movwf	(efgtoa@p+1)^(0+128)
 12693  1186  087B               	movf	_prec,w
 12694  1187  00C7               	movwf	efgtoa@p^(0+128)
 12695  1188                     l6249:	
 12696                           
 12697                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 389:     if
      +                           (mode == 'g') {
 12698  1188  3067               	movlw	103
 12699  1189  064C               	xorwf	efgtoa@mode^(0+128),w
 12700  118A  1D03               	btfss	3,2
 12701  118B  29B7               	goto	l652
 12702                           
 12703                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 390:       
      +                            if (!(e < -4) && !((p - 1) < e)) {
 12704  118C  085C               	movf	(efgtoa@e+1)^(0+128),w
 12705  118D  3A80               	xorlw	128
 12706  118E  0140               	movlb	0	; select bank0
 12707  118F  00ED               	movwf	??_efgtoa
 12708  1190  307F               	movlw	127
 12709  1191  026D               	subwf	??_efgtoa,w
 12710  1192  1D03               	skipz
 12711  1193  2997               	goto	u7425
 12712  1194  30FC               	movlw	252
 12713  1195  0141               	movlb	1	; select bank1
 12714  1196  025B               	subwf	efgtoa@e^(0+128),w
 12715  1197                     u7425:	
 12716  1197  1C03               	skipc
 12717  1198  29B4               	goto	l6257
 12718  1199  0141               	movlb	1	; select bank1
 12719  119A  0847               	movf	efgtoa@p^(0+128),w
 12720  119B  3EFF               	addlw	255
 12721  119C  0140               	movlb	0	; select bank0
 12722  119D  00ED               	movwf	??_efgtoa
 12723  119E  30FF               	movlw	255
 12724  119F  0141               	movlb	1	; select bank1
 12725  11A0  3D48               	addwfc	(efgtoa@p+1)^(0+128),w
 12726  11A1  0140               	movlb	0	; select bank0
 12727  11A2  00EE               	movwf	??_efgtoa+1
 12728  11A3  3A80               	xorlw	128
 12729  11A4  00EF               	movwf	??_efgtoa+2
 12730  11A5  0141               	movlb	1	; select bank1
 12731  11A6  085C               	movf	(efgtoa@e+1)^(0+128),w
 12732  11A7  3A80               	xorlw	128
 12733  11A8  0140               	movlb	0	; select bank0
 12734  11A9  026F               	subwf	??_efgtoa+2,w
 12735  11AA  1D03               	skipz
 12736  11AB  29B0               	goto	u7435
 12737  11AC  0141               	movlb	1	; select bank1
 12738  11AD  085B               	movf	efgtoa@e^(0+128),w
 12739  11AE  0140               	movlb	0	; select bank0
 12740  11AF  026D               	subwf	??_efgtoa,w
 12741  11B0                     u7435:	
 12742  11B0  1C03               	skipc
 12743  11B1  29B4               	goto	l6257
 12744                           
 12745                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 391:       
      +                                nmode = 'f';
 12746  11B2  3066               	movlw	102
 12747  11B3  29B5               	goto	L9
 12748  11B4                     l6257:	
 12749                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 392:       
      +                            } else {
 12750                           
 12751                           
 12752                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 393:       
      +                                nmode = 'e';
 12753  11B4  3065               	movlw	101
 12754  11B5                     L9:	
 12755  11B5  0141               	movlb	1	; select bank1
 12756  11B6  00C9               	movwf	efgtoa@nmode^(0+128)
 12757  11B7                     l652:	
 12758                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 395:     }
 12759                           
 12760                           
 12761                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 398:     m 
      +                          = p;
 12762  11B7  0848               	movf	(efgtoa@p+1)^(0+128),w
 12763  11B8  00BF               	movwf	(efgtoa@m+1)^(0+128)
 12764  11B9  0847               	movf	efgtoa@p^(0+128),w
 12765  11BA  00BE               	movwf	efgtoa@m^(0+128)
 12766                           
 12767                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 399:     if
      +                           (!(mode == 'g') || ((nmode == 'f') && (e < 0))) {
 12768  11BB  3067               	movlw	103
 12769  11BC  064C               	xorwf	efgtoa@mode^(0+128),w
 12770  11BD  1D03               	btfss	3,2
 12771  11BE  29C4               	goto	l6265
 12772  11BF  3066               	movlw	102
 12773  11C0  0649               	xorwf	efgtoa@nmode^(0+128),w
 12774  11C1  1903               	btfsc	3,2
 12775  11C2  1FDC               	btfss	(efgtoa@e+1)^(0+128),7
 12776  11C3  29C7               	goto	l6267
 12777  11C4                     l6265:	
 12778                           
 12779                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 400:       
      +                            ++m;
 12780  11C4  0ABE               	incf	efgtoa@m^(0+128),f
 12781  11C5  1903               	skipnz
 12782  11C6  0ABF               	incf	(efgtoa@m+1)^(0+128),f
 12783  11C7                     l6267:	
 12784                           
 12785                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 404:     if
      +                           (nmode == 'f') {
 12786  11C7  3066               	movlw	102
 12787  11C8  0649               	xorwf	efgtoa@nmode^(0+128),w
 12788  11C9  1D03               	btfss	3,2
 12789  11CA  29D8               	goto	l6279
 12790                           
 12791                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 405:       
      +                            if (e < 0) {
 12792  11CB  1FDC               	btfss	(efgtoa@e+1)^(0+128),7
 12793  11CC  29D0               	goto	l6275
 12794                           
 12795                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 406:       
      +                                u = 1.0;
 12796  11CD  303F               	movlw	63
 12797                           
 12798                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 407:       
      +                                e = 0;
 12799  11CE  26AE  3190         	fcall	PL130	;call to abstracted procedure
 12800  11D0                     l6275:	
 12801                           
 12802                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 409:       
      +                            if (!(mode == 'g')) {
 12803  11D0  3067               	movlw	103
 12804  11D1  064C               	xorwf	efgtoa@mode^(0+128),w
 12805  11D2  1903               	btfsc	3,2
 12806  11D3  29D8               	goto	l6279
 12807                           
 12808                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 410:       
      +                                m += e;
 12809  11D4  085B               	movf	efgtoa@e^(0+128),w
 12810  11D5  07BE               	addwf	efgtoa@m^(0+128),f
 12811  11D6  085C               	movf	(efgtoa@e+1)^(0+128),w
 12812  11D7  3DBF               	addwfc	(efgtoa@m+1)^(0+128),f
 12813  11D8                     l6279:	
 12814                           
 12815                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 415:     i 
      +                          = 0;
 12816  11D8  01D5               	clrf	efgtoa@i^(0+128)
 12817  11D9  01D6               	clrf	(efgtoa@i+1)^(0+128)
 12818                           
 12819                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 416:     h 
      +                          = g;
 12820  11DA  085A               	movf	(efgtoa@g+3)^(0+128),w
 12821  11DB  00D0               	movwf	(efgtoa@h+3)^(0+128)
 12822  11DC  0859               	movf	(efgtoa@g+2)^(0+128),w
 12823  11DD  00CF               	movwf	(efgtoa@h+2)^(0+128)
 12824  11DE  0858               	movf	(efgtoa@g+1)^(0+128),w
 12825  11DF  00CE               	movwf	(efgtoa@h+1)^(0+128)
 12826  11E0  0857               	movf	efgtoa@g^(0+128),w
 12827  11E1  00CD               	movwf	efgtoa@h^(0+128)
 12828                           
 12829                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 417:     ou
      +                           = u;
 12830  11E2  0862               	movf	(efgtoa@u+3)^(0+128),w
 12831  11E3  00AD               	movwf	(efgtoa@ou+3)^(0+128)
 12832  11E4  0861               	movf	(efgtoa@u+2)^(0+128),w
 12833  11E5  00AC               	movwf	(efgtoa@ou+2)^(0+128)
 12834  11E6  0860               	movf	(efgtoa@u+1)^(0+128),w
 12835  11E7  00AB               	movwf	(efgtoa@ou+1)^(0+128)
 12836  11E8  085F               	movf	efgtoa@u^(0+128),w
 12837  11E9  00AA               	movwf	efgtoa@ou^(0+128)
 12838  11EA                     l6289:	
 12839                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 418:     wh
      +                          ile (i < m) {
 12840                           
 12841                           
 12842                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 418:     wh
      +                          ile (i < m) {
 12843  11EA  267A  3190         	fcall	PL56	;call to abstracted procedure
 12844  11EC  1803               	btfsc	3,0
 12845  11ED  2A10               	goto	l6291
 12846                           
 12847                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 419:       
      +                            l = floorf(h/u);
 12848  11EE  25C1  3190         	fcall	PL18	;call to abstracted procedure
 12849  11F0  23DC  3190         	fcall	___fldiv
 12850  11F2  269D               	fcall	PL116	;call to abstracted procedure
 12851  11F3  3185  2537  3190   	fcall	_floorf
 12852                           
 12853                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 420:       
      +                            d = (int)l;
 12854  11F6  2602               	fcall	PL22	;call to abstracted procedure
 12855  11F7  3180  20D9  3190   	fcall	___fltol
 12856  11FA  26A6  3190         	fcall	PL124	;call to abstracted procedure
 12857                           
 12858                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 421:       
      +                            h -= l*u;
 12859  11FC  25E2               	fcall	PL20	;call to abstracted procedure
 12860  11FD  318C  2420  3190   	fcall	___flmul
 12861  1200  2642  3190         	fcall	PL32	;call to abstracted procedure
 12862  1202  2556  3190         	fcall	___flsub
 12863                           
 12864                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 422:       
      +                            u = u/10.0;
 12865  1204  2589  3190         	fcall	PL10	;call to abstracted procedure
 12866  1206  2573  3190         	fcall	PL8	;call to abstracted procedure
 12867  1208  23DC  3190         	fcall	___fldiv
 12868  120A  2622  3190         	fcall	PL28	;call to abstracted procedure
 12869                           
 12870                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 423:       
      +                            ++i;
 12871  120C  0AD5               	incf	efgtoa@i^(0+128),f
 12872  120D  1903               	skipnz
 12873  120E  0AD6               	incf	(efgtoa@i+1)^(0+128),f
 12874  120F  29EA               	goto	l6289
 12875  1210                     l6291:	
 12876                           
 12877                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 427:     l 
      +                          = u*5.0;
 12878  1210  3040               	movlw	64
 12879  1211  0140               	movlb	0	; select bank0
 12880  1212  00B1               	movwf	___flmul@b+3
 12881  1213  30A0               	movlw	160
 12882  1214  259A               	fcall	PL14	;call to abstracted procedure
 12883  1215  318C  2420  3190   	fcall	___flmul
 12884  1218  0831               	movf	?___flmul+3,w
 12885  1219  0141               	movlb	1	; select bank1
 12886  121A  00D4               	movwf	(efgtoa@l+3)^(0+128)
 12887  121B  0140               	movlb	0	; select bank0
 12888  121C  0830               	movf	?___flmul+2,w
 12889  121D  0141               	movlb	1	; select bank1
 12890  121E  00D3               	movwf	(efgtoa@l+2)^(0+128)
 12891  121F  0140               	movlb	0	; select bank0
 12892  1220  082F               	movf	?___flmul+1,w
 12893  1221  0141               	movlb	1	; select bank1
 12894  1222  00D2               	movwf	(efgtoa@l+1)^(0+128)
 12895  1223  0140               	movlb	0	; select bank0
 12896  1224  082E               	movf	?___flmul,w
 12897  1225  0141               	movlb	1	; select bank1
 12898  1226  00D1               	movwf	efgtoa@l^(0+128)
 12899                           
 12900                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 428:     if
      +                           (h < l) {
 12901  1227  0850               	movf	(efgtoa@h+3)^(0+128),w
 12902  1228  0140               	movlb	0	; select bank0
 12903  1229  00CA               	movwf	___flge@ff1+3
 12904  122A  0141               	movlb	1	; select bank1
 12905  122B  084F               	movf	(efgtoa@h+2)^(0+128),w
 12906  122C  0140               	movlb	0	; select bank0
 12907  122D  00C9               	movwf	___flge@ff1+2
 12908  122E  0141               	movlb	1	; select bank1
 12909  122F  084E               	movf	(efgtoa@h+1)^(0+128),w
 12910  1230  0140               	movlb	0	; select bank0
 12911  1231  00C8               	movwf	___flge@ff1+1
 12912  1232  0141               	movlb	1	; select bank1
 12913  1233  084D               	movf	efgtoa@h^(0+128),w
 12914  1234  0140               	movlb	0	; select bank0
 12915  1235  00C7               	movwf	___flge@ff1
 12916  1236  0141               	movlb	1	; select bank1
 12917  1237  0854               	movf	(efgtoa@l+3)^(0+128),w
 12918  1238  0140               	movlb	0	; select bank0
 12919  1239  00CE               	movwf	___flge@ff2+3
 12920  123A  0141               	movlb	1	; select bank1
 12921  123B  0853               	movf	(efgtoa@l+2)^(0+128),w
 12922  123C  0140               	movlb	0	; select bank0
 12923  123D  00CD               	movwf	___flge@ff2+2
 12924  123E  0141               	movlb	1	; select bank1
 12925  123F  0852               	movf	(efgtoa@l+1)^(0+128),w
 12926  1240  0140               	movlb	0	; select bank0
 12927  1241  00CC               	movwf	___flge@ff2+1
 12928  1242  0141               	movlb	1	; select bank1
 12929  1243  0851               	movf	efgtoa@l^(0+128),w
 12930  1244  0140               	movlb	0	; select bank0
 12931  1245  00CB               	movwf	___flge@ff2
 12932  1246  24DA  3190         	fcall	___flge
 12933  1248  1803               	btfsc	3,0
 12934  1249  2A4C               	goto	l6295
 12935                           
 12936                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 429:       
      +                            l = 0.0;
 12937  124A  0141               	movlb	1	; select bank1
 12938  124B  2A73               	goto	l6299
 12939  124C                     l6295:	
 12940                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 430:     } 
      +                          else {
 12941                           
 12942                           
 12943                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 432:       
      +                            if ((h == l) && !(d % 2)) {
 12944  124C  0141               	movlb	1	; select bank1
 12945  124D  0850               	movf	(efgtoa@h+3)^(0+128),w
 12946  124E  0140               	movlb	0	; select bank0
 12947  124F  00A3               	movwf	___fleq@ff1+3
 12948  1250  0141               	movlb	1	; select bank1
 12949  1251  084F               	movf	(efgtoa@h+2)^(0+128),w
 12950  1252  0140               	movlb	0	; select bank0
 12951  1253  00A2               	movwf	___fleq@ff1+2
 12952  1254  0141               	movlb	1	; select bank1
 12953  1255  084E               	movf	(efgtoa@h+1)^(0+128),w
 12954  1256  0140               	movlb	0	; select bank0
 12955  1257  00A1               	movwf	___fleq@ff1+1
 12956  1258  0141               	movlb	1	; select bank1
 12957  1259  084D               	movf	efgtoa@h^(0+128),w
 12958  125A  0140               	movlb	0	; select bank0
 12959  125B  00A0               	movwf	___fleq@ff1
 12960  125C  0141               	movlb	1	; select bank1
 12961  125D  0854               	movf	(efgtoa@l+3)^(0+128),w
 12962  125E  0140               	movlb	0	; select bank0
 12963  125F  00A7               	movwf	___fleq@ff2+3
 12964  1260  0141               	movlb	1	; select bank1
 12965  1261  0853               	movf	(efgtoa@l+2)^(0+128),w
 12966  1262  0140               	movlb	0	; select bank0
 12967  1263  00A6               	movwf	___fleq@ff2+2
 12968  1264  0141               	movlb	1	; select bank1
 12969  1265  0852               	movf	(efgtoa@l+1)^(0+128),w
 12970  1266  0140               	movlb	0	; select bank0
 12971  1267  00A5               	movwf	___fleq@ff2+1
 12972  1268  0141               	movlb	1	; select bank1
 12973  1269  0851               	movf	efgtoa@l^(0+128),w
 12974  126A  0140               	movlb	0	; select bank0
 12975  126B  00A4               	movwf	___fleq@ff2
 12976  126C  26DE  3190         	fcall	___fleq
 12977  126E  1C03               	btfss	3,0
 12978  126F  2A77               	goto	l6301
 12979  1270  0141               	movlb	1	; select bank1
 12980  1271  1842               	btfsc	efgtoa@d^(0+128),0
 12981  1272  2A77               	goto	l6301
 12982  1273                     l6299:	
 12983                           
 12984                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 433:       
      +                                l = 0.0;
 12985  1273  01D1               	clrf	efgtoa@l^(0+128)
 12986  1274  01D2               	clrf	(efgtoa@l+1)^(0+128)
 12987  1275  01D3               	clrf	(efgtoa@l+2)^(0+128)
 12988  1276  01D4               	clrf	(efgtoa@l+3)^(0+128)
 12989  1277                     l6301:	
 12990                           
 12991                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 438:     h 
      +                          = g + l;
 12992  1277  0141               	movlb	1	; select bank1
 12993  1278  0854               	movf	(efgtoa@l+3)^(0+128),w
 12994  1279  0140               	movlb	0	; select bank0
 12995  127A  00CA               	movwf	___fladd@b+3
 12996  127B  0141               	movlb	1	; select bank1
 12997  127C  0853               	movf	(efgtoa@l+2)^(0+128),w
 12998  127D  0140               	movlb	0	; select bank0
 12999  127E  00C9               	movwf	___fladd@b+2
 13000  127F  0141               	movlb	1	; select bank1
 13001  1280  0852               	movf	(efgtoa@l+1)^(0+128),w
 13002  1281  0140               	movlb	0	; select bank0
 13003  1282  00C8               	movwf	___fladd@b+1
 13004  1283  0141               	movlb	1	; select bank1
 13005  1284  0851               	movf	efgtoa@l^(0+128),w
 13006  1285  0140               	movlb	0	; select bank0
 13007  1286  00C7               	movwf	___fladd@b
 13008  1287  0141               	movlb	1	; select bank1
 13009  1288  085A               	movf	(efgtoa@g+3)^(0+128),w
 13010  1289  0140               	movlb	0	; select bank0
 13011  128A  00CE               	movwf	___fladd@a+3
 13012  128B  0141               	movlb	1	; select bank1
 13013  128C  0859               	movf	(efgtoa@g+2)^(0+128),w
 13014  128D  0140               	movlb	0	; select bank0
 13015  128E  00CD               	movwf	___fladd@a+2
 13016  128F  0141               	movlb	1	; select bank1
 13017  1290  0858               	movf	(efgtoa@g+1)^(0+128),w
 13018  1291  0140               	movlb	0	; select bank0
 13019  1292  00CC               	movwf	___fladd@a+1
 13020  1293  0141               	movlb	1	; select bank1
 13021  1294  0857               	movf	efgtoa@g^(0+128),w
 13022  1295  0140               	movlb	0	; select bank0
 13023  1296  00CB               	movwf	___fladd@a
 13024  1297  3181  2187  3190   	fcall	___fladd
 13025  129A  084A               	movf	?___fladd+3,w
 13026  129B  0141               	movlb	1	; select bank1
 13027  129C  00D0               	movwf	(efgtoa@h+3)^(0+128)
 13028  129D  0140               	movlb	0	; select bank0
 13029  129E  0849               	movf	?___fladd+2,w
 13030  129F  0141               	movlb	1	; select bank1
 13031  12A0  00CF               	movwf	(efgtoa@h+2)^(0+128)
 13032  12A1  0140               	movlb	0	; select bank0
 13033  12A2  0848               	movf	?___fladd+1,w
 13034  12A3  0141               	movlb	1	; select bank1
 13035  12A4  00CE               	movwf	(efgtoa@h+1)^(0+128)
 13036  12A5  0140               	movlb	0	; select bank0
 13037  12A6  0847               	movf	?___fladd,w
 13038  12A7  0141               	movlb	1	; select bank1
 13039  12A8  00CD               	movwf	efgtoa@h^(0+128)
 13040                           
 13041                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 441:     u 
      +                          = ou;
 13042  12A9  082D               	movf	(efgtoa@ou+3)^(0+128),w
 13043  12AA  00E2               	movwf	(efgtoa@u+3)^(0+128)
 13044  12AB  082C               	movf	(efgtoa@ou+2)^(0+128),w
 13045  12AC  00E1               	movwf	(efgtoa@u+2)^(0+128)
 13046  12AD  082B               	movf	(efgtoa@ou+1)^(0+128),w
 13047  12AE  00E0               	movwf	(efgtoa@u+1)^(0+128)
 13048  12AF  082A               	movf	efgtoa@ou^(0+128),w
 13049  12B0  00DF               	movwf	efgtoa@u^(0+128)
 13050                           
 13051                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 442:     ne
      +                           = (nmode == 'e') ? 0 : e;
 13052  12B1  3065               	movlw	101
 13053  12B2  0649               	xorwf	efgtoa@nmode^(0+128),w
 13054  12B3  1903               	btfsc	3,2
 13055  12B4  2ABA               	goto	l6309
 13056  12B5  085C               	movf	(efgtoa@e+1)^(0+128),w
 13057  12B6  00C1               	movwf	(efgtoa@ne+1)^(0+128)
 13058  12B7  085B               	movf	efgtoa@e^(0+128),w
 13059  12B8  00C0               	movwf	efgtoa@ne^(0+128)
 13060  12B9  2ABC               	goto	l670
 13061  12BA                     l6309:	
 13062  12BA  01C0               	clrf	efgtoa@ne^(0+128)
 13063  12BB  01C1               	clrf	(efgtoa@ne+1)^(0+128)
 13064  12BC                     l670:	
 13065                           
 13066                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 443:     pp
      +                           = 0;
 13067  12BC  01BC               	clrf	efgtoa@pp^(0+128)
 13068  12BD  01BD               	clrf	(efgtoa@pp+1)^(0+128)
 13069                           
 13070                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 444:     t 
      +                          = 0;
 13071  12BE  01BA               	clrf	efgtoa@t^(0+128)
 13072  12BF  01BB               	clrf	(efgtoa@t+1)^(0+128)
 13073                           
 13074                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 445:     i 
      +                          = 0;
 13075  12C0  01D5               	clrf	efgtoa@i^(0+128)
 13076  12C1  01D6               	clrf	(efgtoa@i+1)^(0+128)
 13077                           
 13078                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 446:     wh
      +                          ile ((i < m) && (n < (80 - 5))) {
 13079  12C2  2B20               	goto	l6359
 13080  12C3                     l6311:	
 13081                           
 13082                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 447:       
      +                            l = floorf(h/u);
 13083  12C3  25C1  3190         	fcall	PL18	;call to abstracted procedure
 13084  12C5  23DC  3190         	fcall	___fldiv
 13085  12C7  269D               	fcall	PL116	;call to abstracted procedure
 13086  12C8  3185  2537  3190   	fcall	_floorf
 13087                           
 13088                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 448:       
      +                            d = (int)l;
 13089  12CB  2602               	fcall	PL22	;call to abstracted procedure
 13090  12CC  3180  20D9  3190   	fcall	___fltol
 13091  12CF  26A6  3190         	fcall	PL124	;call to abstracted procedure
 13092                           
 13093                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 449:       
      +                            if (!(flags & (1 << 4)) && !d && (mode == 'g') && (ne < 0)) {
 13094  12D1  0142               	movlb	2	; select bank2
 13095  12D2  1A6E               	btfsc	_flags^(0+256),4
 13096  12D3  2AE2               	goto	l6323
 13097  12D4  0141               	movlb	1	; select bank1
 13098  12D5  0842               	movf	efgtoa@d^(0+128),w
 13099  12D6  0443               	iorwf	(efgtoa@d+1)^(0+128),w
 13100  12D7  1D03               	btfss	3,2
 13101  12D8  2AE2               	goto	l6323
 13102  12D9  3067               	movlw	103
 13103  12DA  064C               	xorwf	efgtoa@mode^(0+128),w
 13104  12DB  1903               	btfsc	3,2
 13105  12DC  1FC1               	btfss	(efgtoa@ne+1)^(0+128),7
 13106  12DD  2AE2               	goto	l6323
 13107                           
 13108                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 450:       
      +                                ++t;
 13109  12DE  0ABA               	incf	efgtoa@t^(0+128),f
 13110  12DF  1903               	skipnz
 13111  12E0  0ABB               	incf	(efgtoa@t+1)^(0+128),f
 13112                           
 13113                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 451:       
      +                            } else {
 13114  12E1  2B09               	goto	l6351
 13115  12E2                     l6323:	
 13116                           
 13117                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 452:       
      +                                if (!pp && (ne < 0)) {
 13118  12E2  0141               	movlb	1	; select bank1
 13119  12E3  083C               	movf	efgtoa@pp^(0+128),w
 13120  12E4  043D               	iorwf	(efgtoa@pp+1)^(0+128),w
 13121  12E5  1903               	btfsc	3,2
 13122  12E6  1FC1               	btfss	(efgtoa@ne+1)^(0+128),7
 13123  12E7  2AF2               	goto	l6343
 13124                           
 13125                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 453:       
      +                                    dbuf[n++] = '.';
 13126  12E8  2690  3190         	fcall	PL90	;call to abstracted procedure
 13127  12EA  302E               	movlw	46
 13128                           
 13129                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 454:       
      +                                    --w;
 13130  12EB  2696  3190         	fcall	PL94	;call to abstracted procedure
 13131  12ED  1C03               	skipc
 13132  12EE  03CB               	decf	(efgtoa@w+1)^(0+128),f
 13133                           
 13134                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 455:       
      +                                    pp = 1;
 13135  12EF  01BC               	clrf	efgtoa@pp^(0+128)
 13136  12F0  0ABC               	incf	efgtoa@pp^(0+128),f
 13137  12F1  01BD               	clrf	(efgtoa@pp+1)^(0+128)
 13138  12F2                     l6343:	
 13139                           
 13140                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 457:       
      +                                while (t) {
 13141  12F2  083A               	movf	efgtoa@t^(0+128),w
 13142  12F3  043B               	iorwf	(efgtoa@t+1)^(0+128),w
 13143  12F4  1903               	btfsc	3,2
 13144  12F5  2B01               	goto	l6345
 13145                           
 13146                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 458:       
      +                                    dbuf[n++] = '0';
 13147  12F6  2690  3190         	fcall	PL90	;call to abstracted procedure
 13148  12F8  3030               	movlw	48
 13149                           
 13150                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 459:       
      +                                    --w;
 13151  12F9  2696  3190         	fcall	PL94	;call to abstracted procedure
 13152  12FB  1C03               	skipc
 13153  12FC  03CB               	decf	(efgtoa@w+1)^(0+128),f
 13154                           
 13155                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 460:       
      +                                    --t;
 13156  12FD  07BA               	addwf	efgtoa@t^(0+128),f
 13157  12FE  1C03               	skipc
 13158  12FF  03BB               	decf	(efgtoa@t+1)^(0+128),f
 13159  1300  2AF2               	goto	l6343
 13160  1301                     l6345:	
 13161                           
 13162                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 462:       
      +                                dbuf[n++] = '0' + d;
 13163  1301  2690  3190         	fcall	PL90	;call to abstracted procedure
 13164  1303  0842               	movf	efgtoa@d^(0+128),w
 13165  1304  3E30               	addlw	48
 13166                           
 13167                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 463:       
      +                                --w;
 13168  1305  2696  3190         	fcall	PL94	;call to abstracted procedure
 13169  1307  1C03               	skipc
 13170  1308  03CB               	decf	(efgtoa@w+1)^(0+128),f
 13171  1309                     l6351:	
 13172                           
 13173                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 465:       
      +                            h -= l*u;
 13174  1309  25E2               	fcall	PL20	;call to abstracted procedure
 13175  130A  318C  2420  3190   	fcall	___flmul
 13176  130D  2642  3190         	fcall	PL32	;call to abstracted procedure
 13177  130F  2556  3190         	fcall	___flsub
 13178                           
 13179                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 466:       
      +                            u = u/10.0;
 13180  1311  2589  3190         	fcall	PL10	;call to abstracted procedure
 13181  1313  2573  3190         	fcall	PL8	;call to abstracted procedure
 13182  1315  23DC  3190         	fcall	___fldiv
 13183  1317  2622  3190         	fcall	PL28	;call to abstracted procedure
 13184                           
 13185                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 467:       
      +                            --ne;
 13186  1319  30FF               	movlw	-1
 13187  131A  07C0               	addwf	efgtoa@ne^(0+128),f
 13188  131B  1C03               	skipc
 13189  131C  03C1               	decf	(efgtoa@ne+1)^(0+128),f
 13190                           
 13191                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 468:       
      +                            ++i;
 13192  131D  0AD5               	incf	efgtoa@i^(0+128),f
 13193  131E  1903               	skipnz
 13194  131F  0AD6               	incf	(efgtoa@i+1)^(0+128),f
 13195  1320                     l6359:	
 13196                           
 13197                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 446:     wh
      +                          ile ((i < m) && (n < (80 - 5))) {
 13198  1320  267A  3190         	fcall	PL56	;call to abstracted procedure
 13199  1322  1803               	skipnc
 13200  1323  2B2F               	goto	l6363
 13201  1324  0141               	movlb	1	; select bank1
 13202  1325  085E               	movf	(efgtoa@n+1)^(0+128),w
 13203  1326  26BC  3190         	fcall	PL138	;call to abstracted procedure
 13204  1328  1D03               	skipz
 13205  1329  2B2D               	goto	u7635
 13206  132A  304B               	movlw	75
 13207  132B  0141               	movlb	1	; select bank1
 13208  132C  025D               	subwf	efgtoa@n^(0+128),w
 13209  132D                     u7635:	
 13210  132D  1C03               	skipc
 13211  132E  2AC3               	goto	l6311
 13212  132F                     l6363:	
 13213                           
 13214                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 470:     if
      +                           (!pp && (flags & (1 << 4))) {
 13215  132F  0141               	movlb	1	; select bank1
 13216  1330  083C               	movf	efgtoa@pp^(0+128),w
 13217  1331  043D               	iorwf	(efgtoa@pp+1)^(0+128),w
 13218  1332  1D03               	btfss	3,2
 13219  1333  2B3F               	goto	l6371
 13220  1334  0142               	movlb	2	; select bank2
 13221  1335  1E6E               	btfss	_flags^(0+256),4
 13222  1336  2B3F               	goto	l6371
 13223                           
 13224                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 471:       
      +                            dbuf[n++] = '.';
 13225  1337  0141               	movlb	1	; select bank1
 13226  1338  2690  3190         	fcall	PL90	;call to abstracted procedure
 13227  133A  302E               	movlw	46
 13228  133B  0081               	movwf	1
 13229  133C  0ADD               	incf	efgtoa@n^(0+128),f
 13230  133D  1903               	skipnz
 13231  133E  0ADE               	incf	(efgtoa@n+1)^(0+128),f
 13232  133F                     l6371:	
 13233                           
 13234                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 473:     db
      +                          uf[n] = '\0';
 13235  133F  0141               	movlb	1	; select bank1
 13236  1340  2690  3190         	fcall	PL90	;call to abstracted procedure
 13237  1342  3065               	movlw	101
 13238  1343  0181               	clrf	1
 13239                           
 13240                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 476:     if
      +                           (nmode == 'e') {
 13241  1344  0649               	xorwf	efgtoa@nmode^(0+128),w
 13242  1345  1D03               	btfss	3,2
 13243  1346  2BD7               	goto	l6429
 13244                           
 13245                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 477:       
      +                            i = sizeof(dbuf) - 1;
 13246  1347  304F               	movlw	79
 13247  1348  00D5               	movwf	efgtoa@i^(0+128)
 13248  1349  01D6               	clrf	(efgtoa@i+1)^(0+128)
 13249                           
 13250                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 478:       
      +                            dbuf[i] = '\0';
 13251  134A  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 13252  134B  0086               	movwf	6
 13253  134C  0181               	clrf	1
 13254                           
 13255                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 479:       
      +                            sign = 0;
 13256  134D  01C5               	clrf	efgtoa@sign^(0+128)
 13257  134E  01C6               	clrf	(efgtoa@sign+1)^(0+128)
 13258                           
 13259                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 480:       
      +                            if (e < 0) {
 13260  134F  1FDC               	btfss	(efgtoa@e+1)^(0+128),7
 13261  1350  2B59               	goto	l6385
 13262                           
 13263                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 481:       
      +                                sign = 1;
 13264  1351  01C5               	clrf	efgtoa@sign^(0+128)
 13265  1352  0AC5               	incf	efgtoa@sign^(0+128),f
 13266  1353  01C6               	clrf	(efgtoa@sign+1)^(0+128)
 13267                           
 13268                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 482:       
      +                                e = -e;
 13269  1354  09DB               	comf	efgtoa@e^(0+128),f
 13270  1355  09DC               	comf	(efgtoa@e+1)^(0+128),f
 13271  1356  0ADB               	incf	efgtoa@e^(0+128),f
 13272  1357  1903               	skipnz
 13273  1358  0ADC               	incf	(efgtoa@e+1)^(0+128),f
 13274  1359                     l6385:	
 13275                           
 13276                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 484:       
      +                            p = 2;
 13277  1359  3002               	movlw	2
 13278  135A  00C7               	movwf	efgtoa@p^(0+128)
 13279  135B  01C8               	clrf	(efgtoa@p+1)^(0+128)
 13280  135C                     l6397:	
 13281                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 485:       
      +                            while (e || (0 < p)) {
 13282                           
 13283                           
 13284                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 485:       
      +                            while (e || (0 < p)) {
 13285  135C  085B               	movf	efgtoa@e^(0+128),w
 13286  135D  045C               	iorwf	(efgtoa@e+1)^(0+128),w
 13287  135E  1903               	btfsc	3,2
 13288  135F  2B94               	goto	l6399
 13289                           
 13290                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 486:       
      +                                --i;
 13291  1360  30FF               	movlw	-1
 13292  1361                     L12:	
 13293  1361  0141               	movlb	1	; select bank1
 13294  1362  07D5               	addwf	efgtoa@i^(0+128),f
 13295  1363  1C03               	skipc
 13296  1364  03D6               	decf	(efgtoa@i+1)^(0+128),f
 13297                           
 13298                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 487:       
      +                                dbuf[i] = '0' + (e % 10);
 13299  1365  26B6  3190         	fcall	PL134	;call to abstracted procedure
 13300  1367  300A               	movlw	10
 13301  1368  0140               	movlb	0	; select bank0
 13302  1369  00A0               	movwf	___awmod@divisor
 13303  136A  01A1               	clrf	___awmod@divisor+1
 13304  136B  0141               	movlb	1	; select bank1
 13305  136C  085C               	movf	(efgtoa@e+1)^(0+128),w
 13306  136D  0140               	movlb	0	; select bank0
 13307  136E  00A3               	movwf	___awmod@dividend+1
 13308  136F  0141               	movlb	1	; select bank1
 13309  1370  085B               	movf	efgtoa@e^(0+128),w
 13310  1371  0140               	movlb	0	; select bank0
 13311  1372  00A2               	movwf	___awmod@dividend
 13312  1373  27BE  3190         	fcall	___awmod
 13313  1375  0820               	movf	?___awmod,w
 13314  1376  3E30               	addlw	48
 13315  1377  0081               	movwf	1
 13316                           
 13317                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 488:       
      +                                e = e / 10;
 13318  1378  300A               	movlw	10
 13319  1379  00A0               	movwf	___awdiv@divisor
 13320  137A  01A1               	clrf	___awdiv@divisor+1
 13321  137B  0141               	movlb	1	; select bank1
 13322  137C  085C               	movf	(efgtoa@e+1)^(0+128),w
 13323  137D  0140               	movlb	0	; select bank0
 13324  137E  00A3               	movwf	___awdiv@dividend+1
 13325  137F  0141               	movlb	1	; select bank1
 13326  1380  085B               	movf	efgtoa@e^(0+128),w
 13327  1381  0140               	movlb	0	; select bank0
 13328  1382  00A2               	movwf	___awdiv@dividend
 13329  1383  277E  3190         	fcall	___awdiv
 13330  1385  0821               	movf	?___awdiv+1,w
 13331  1386  0141               	movlb	1	; select bank1
 13332  1387  00DC               	movwf	(efgtoa@e+1)^(0+128)
 13333  1388  0140               	movlb	0	; select bank0
 13334  1389  0820               	movf	?___awdiv,w
 13335  138A  0141               	movlb	1	; select bank1
 13336  138B  00DB               	movwf	efgtoa@e^(0+128)
 13337                           
 13338                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 489:       
      +                                --p;
 13339  138C  30FF               	movlw	-1
 13340  138D  07C7               	addwf	efgtoa@p^(0+128),f
 13341  138E  1C03               	skipc
 13342  138F  03C8               	decf	(efgtoa@p+1)^(0+128),f
 13343                           
 13344                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 490:       
      +                                --w;
 13345  1390  07CA               	addwf	efgtoa@w^(0+128),f
 13346  1391  1C03               	skipc
 13347  1392  03CB               	decf	(efgtoa@w+1)^(0+128),f
 13348  1393  2B5C               	goto	l6397
 13349  1394                     l6399:	
 13350  1394  0848               	movf	(efgtoa@p+1)^(0+128),w
 13351  1395  26BC  3190         	fcall	PL138	;call to abstracted procedure
 13352  1397  1D03               	skipz
 13353  1398  2B9C               	goto	u7695
 13354  1399  3001               	movlw	1
 13355  139A  0141               	movlb	1	; select bank1
 13356  139B  0247               	subwf	efgtoa@p^(0+128),w
 13357  139C                     u7695:	
 13358                           
 13359                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 492:       
      +                            --i;
 13360  139C  30FF               	movlw	-1
 13361  139D  1803               	skipnc
 13362  139E  2B61               	goto	L12
 13363  139F  0141               	movlb	1	; select bank1
 13364  13A0  07D5               	addwf	efgtoa@i^(0+128),f
 13365  13A1  1C03               	skipc
 13366  13A2  03D6               	decf	(efgtoa@i+1)^(0+128),f
 13367                           
 13368                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 493:       
      +                            dbuf[i] = sign ? '-' : '+';
 13369  13A3  0845               	movf	efgtoa@sign^(0+128),w
 13370  13A4  0446               	iorwf	(efgtoa@sign+1)^(0+128),w
 13371  13A5  1D03               	btfss	3,2
 13372  13A6  2BA9               	goto	l6405
 13373  13A7  302B               	movlw	43
 13374  13A8  2BAA               	goto	L10
 13375  13A9                     l6405:	
 13376  13A9  302D               	movlw	45
 13377  13AA                     L10:	
 13378  13AA  00B4               	movwf	_efgtoa$1307^(0+128)
 13379  13AB  01B5               	clrf	(_efgtoa$1307+1)^(0+128)
 13380  13AC  26B6  3190         	fcall	PL134	;call to abstracted procedure
 13381  13AE  0834               	movf	_efgtoa$1307^(0+128),w
 13382  13AF  0081               	movwf	1
 13383                           
 13384                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 494:       
      +                            --w;
 13385  13B0  30FF               	movlw	-1
 13386  13B1  07CA               	addwf	efgtoa@w^(0+128),f
 13387  13B2  1C03               	skipc
 13388  13B3  03CB               	decf	(efgtoa@w+1)^(0+128),f
 13389                           
 13390                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 496:       
      +                            dbuf[i] = (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
 13391  13B4  07D5               	addwf	efgtoa@i^(0+128),f
 13392  13B5  1C03               	skipc
 13393  13B6  03D6               	decf	(efgtoa@i+1)^(0+128),f
 13394  13B7  0140               	movlb	0	; select bank0
 13395  13B8  25AE  3190         	fcall	PL16	;call to abstracted procedure
 13396  13BA  00B8               	movwf	_efgtoa$1309^(0+128)
 13397  13BB  01B9               	clrf	(_efgtoa$1309+1)^(0+128)
 13398  13BC  0439               	iorwf	(_efgtoa$1309+1)^(0+128),w
 13399  13BD  1D03               	btfss	3,2
 13400  13BE  2BC1               	goto	l6421
 13401  13BF  3065               	movlw	101
 13402  13C0  2BC2               	goto	L11
 13403  13C1                     l6421:	
 13404  13C1  3045               	movlw	69
 13405  13C2                     L11:	
 13406  13C2  00B6               	movwf	_efgtoa$1308^(0+128)
 13407  13C3  01B7               	clrf	(_efgtoa$1308+1)^(0+128)
 13408  13C4  26B6  3190         	fcall	PL134	;call to abstracted procedure
 13409  13C6  0836               	movf	_efgtoa$1308^(0+128),w
 13410  13C7  0081               	movwf	1
 13411                           
 13412                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 497:       
      +                            --w;
 13413  13C8  30FF               	movlw	-1
 13414  13C9  07CA               	addwf	efgtoa@w^(0+128),f
 13415  13CA  1C03               	skipc
 13416  13CB  03CB               	decf	(efgtoa@w+1)^(0+128),f
 13417                           
 13418                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 498:       
      +                            strcpy(&dbuf[n], &dbuf[i]);
 13419  13CC  2689  3190         	fcall	PL60	;call to abstracted procedure
 13420  13CE  0141               	movlb	1	; select bank1
 13421  13CF  0855               	movf	efgtoa@i^(0+128),w
 13422  13D0  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 13423  13D1  0140               	movlb	0	; select bank0
 13424  13D2  00A7               	movwf	strcpy@src
 13425  13D3  3002               	movlw	2
 13426  13D4  00A8               	movwf	strcpy@src+1
 13427  13D5  2534  3190         	fcall	_strcpy
 13428  13D7                     l6429:	
 13429                           
 13430                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 502:     re
      +                          turn pad(fp, &dbuf[0], w);
 13431  13D7  265B               	fcall	PL36	;call to abstracted procedure
 13432  13D8  3184  24C7  3190   	fcall	_pad
 13433  13DB  2EC2               	ljmp	PL142	;call to abstracted procedure
 13434  13DC                     __end_of_efgtoa:	
 13435  13DC                     __ptext58:	
 13436 ;; *************** function ___fldiv *****************
 13437 ;; Defined at:
 13438 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcdiv.c"
 13439 ;; Parameters:    Size  Location     Type
 13440 ;;  a               4   39[BANK0 ] unsigned int 
 13441 ;;  b               4   43[BANK0 ] unsigned int 
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;  grs             4   58[BANK0 ] unsigned long 
 13444 ;;  rem             4   51[BANK0 ] unsigned long 
 13445 ;;  new_exp         2   56[BANK0 ] int 
 13446 ;;  aexp            1   63[BANK0 ] unsigned char 
 13447 ;;  bexp            1   62[BANK0 ] unsigned char 
 13448 ;;  sign            1   55[BANK0 ] unsigned char 
 13449 ;; Return value:  Size  Location     Type
 13450 ;;                  4   39[BANK0 ] unsigned char 
 13451 ;; Registers used:
 13452 ;;		wreg, status,2, status,0
 13453 ;; Tracked objects:
 13454 ;;		On entry : 3F/0
 13455 ;;		On exit  : 3F/0
 13456 ;;		Unchanged: 0/0
 13457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13458 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13459 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13460 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13461 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13462 ;;Total ram usage:       25 bytes
 13463 ;; Hardware stack levels used:    1
 13464 ;; Hardware stack levels required when called:    3
 13465 ;; This function calls:
 13466 ;;		Nothing
 13467 ;; This function is called by:
 13468 ;;		_convertAnalogValues
 13469 ;;		_efgtoa
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           
 13474                           ;psect for function ___fldiv
 13475  13DC                     ___fldiv:	
 13476                           
 13477                           ;incstack = 0
 13478                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 13479  13DC  084E               	movf	___fldiv@b+3,w
 13480  13DD  00D7               	movwf	___fldiv@sign
 13481  13DE  3080               	movlw	128
 13482  13DF  05D7               	andwf	___fldiv@sign,f
 13483  13E0  354E               	lslf	___fldiv@b+3,w
 13484  13E1  00DE               	movwf	___fldiv@bexp
 13485  13E2  1BCD               	btfsc	___fldiv@b+2,7
 13486  13E3  145E               	bsf	___fldiv@bexp,0
 13487  13E4  085E               	movf	___fldiv@bexp,w
 13488  13E5  1903               	btfsc	3,2
 13489  13E6  2BEF               	goto	l1122
 13490  13E7  0F5E               	incfsz	___fldiv@bexp,w
 13491  13E8  2BED               	goto	l1123
 13492  13E9  01CB               	clrf	___fldiv@b
 13493  13EA  01CC               	clrf	___fldiv@b+1
 13494  13EB  01CD               	clrf	___fldiv@b+2
 13495  13EC  01CE               	clrf	___fldiv@b+3
 13496  13ED                     l1123:	
 13497  13ED  17CD               	bsf	___fldiv@b+2,7
 13498  13EE  2BF2               	goto	L19
 13499  13EF                     l1122:	
 13500  13EF  01CB               	clrf	___fldiv@b
 13501  13F0  01CC               	clrf	___fldiv@b+1
 13502  13F1  01CD               	clrf	___fldiv@b+2
 13503  13F2                     L19:	
 13504  13F2  01CE               	clrf	___fldiv@b+3
 13505  13F3  084A               	movf	___fldiv@a+3,w
 13506  13F4  3980               	andlw	128
 13507  13F5  06D7               	xorwf	___fldiv@sign,f
 13508  13F6  354A               	lslf	___fldiv@a+3,w
 13509  13F7  00DF               	movwf	___fldiv@aexp
 13510  13F8  1BC9               	btfsc	___fldiv@a+2,7
 13511  13F9  145F               	bsf	___fldiv@aexp,0
 13512  13FA  085F               	movf	___fldiv@aexp,w
 13513  13FB  1903               	btfsc	3,2
 13514  13FC  2C05               	goto	l1126
 13515  13FD  0F5F               	incfsz	___fldiv@aexp,w
 13516  13FE  2C03               	goto	l1127
 13517  13FF  01C7               	clrf	___fldiv@a
 13518  1400  01C8               	clrf	___fldiv@a+1
 13519  1401  01C9               	clrf	___fldiv@a+2
 13520  1402  01CA               	clrf	___fldiv@a+3
 13521  1403                     l1127:	
 13522  1403  17C9               	bsf	___fldiv@a+2,7
 13523  1404  2C08               	goto	L20
 13524  1405                     l1126:	
 13525  1405  01C7               	clrf	___fldiv@a
 13526  1406  01C8               	clrf	___fldiv@a+1
 13527  1407  01C9               	clrf	___fldiv@a+2
 13528  1408                     L20:	
 13529  1408  01CA               	clrf	___fldiv@a+3
 13530  1409  084A               	movf	___fldiv@a+3,w
 13531  140A  0449               	iorwf	___fldiv@a+2,w
 13532  140B  0448               	iorwf	___fldiv@a+1,w
 13533  140C  0447               	iorwf	___fldiv@a,w
 13534  140D  1D03               	skipz
 13535  140E  2C22               	goto	l4399
 13536  140F  3080               	movlw	128
 13537  1410  01CB               	clrf	___fldiv@b
 13538  1411  01CC               	clrf	___fldiv@b+1
 13539  1412  01CD               	clrf	___fldiv@b+2
 13540  1413  01CE               	clrf	___fldiv@b+3
 13541  1414  04CD               	iorwf	___fldiv@b+2,f
 13542  1415  307F               	movlw	127
 13543  1416  04CE               	iorwf	___fldiv@b+3,f
 13544  1417                     L21:	
 13545  1417  0857               	movf	___fldiv@sign,w
 13546  1418  04CE               	iorwf	___fldiv@b+3,f
 13547  1419  084E               	movf	___fldiv@b+3,w
 13548  141A  00CA               	movwf	?___fldiv+3
 13549  141B  084D               	movf	___fldiv@b+2,w
 13550  141C  00C9               	movwf	?___fldiv+2
 13551  141D  084C               	movf	___fldiv@b+1,w
 13552  141E  00C8               	movwf	?___fldiv+1
 13553  141F  084B               	movf	___fldiv@b,w
 13554  1420  00C7               	movwf	?___fldiv
 13555  1421  0008               	return
 13556  1422                     l4399:	
 13557  1422  085E               	movf	___fldiv@bexp,w
 13558  1423  1D03               	btfss	3,2
 13559  1424  2C2A               	goto	l4407
 13560  1425  01C7               	clrf	?___fldiv
 13561  1426  01C8               	clrf	?___fldiv+1
 13562  1427  01C9               	clrf	?___fldiv+2
 13563  1428  01CA               	clrf	?___fldiv+3
 13564  1429  0008               	return
 13565  142A                     l4407:	
 13566  142A  085E               	movf	___fldiv@bexp,w
 13567  142B  00D8               	movwf	___fldiv@new_exp
 13568  142C  01D9               	clrf	___fldiv@new_exp+1
 13569  142D  085F               	movf	___fldiv@aexp,w
 13570  142E  02D8               	subwf	___fldiv@new_exp,f
 13571  142F  1C03               	skipc
 13572  1430  03D9               	decf	___fldiv@new_exp+1,f
 13573  1431  307F               	movlw	127
 13574  1432  07D8               	addwf	___fldiv@new_exp,f
 13575  1433  1803               	skipnc
 13576  1434  0AD9               	incf	___fldiv@new_exp+1,f
 13577  1435  084E               	movf	___fldiv@b+3,w
 13578  1436  00D6               	movwf	___fldiv@rem+3
 13579  1437  084D               	movf	___fldiv@b+2,w
 13580  1438  00D5               	movwf	___fldiv@rem+2
 13581  1439  084C               	movf	___fldiv@b+1,w
 13582  143A  00D4               	movwf	___fldiv@rem+1
 13583  143B  084B               	movf	___fldiv@b,w
 13584  143C  00D3               	movwf	___fldiv@rem
 13585  143D  01CB               	clrf	___fldiv@b
 13586  143E  01CC               	clrf	___fldiv@b+1
 13587  143F  01CD               	clrf	___fldiv@b+2
 13588  1440  01CE               	clrf	___fldiv@b+3
 13589  1441  01DA               	clrf	___fldiv@grs
 13590  1442  01DB               	clrf	___fldiv@grs+1
 13591  1443  01DC               	clrf	___fldiv@grs+2
 13592  1444  01DD               	clrf	___fldiv@grs+3
 13593  1445  01DF               	clrf	___fldiv@aexp
 13594  1446                     l4433:	
 13595  1446  301A               	movlw	26
 13596  1447  025F               	subwf	___fldiv@aexp,w
 13597  1448  1803               	btfsc	3,0
 13598  1449  2C76               	goto	l4435
 13599  144A  085F               	movf	___fldiv@aexp,w
 13600  144B  1903               	btfsc	3,2
 13601  144C  2C5B               	goto	l4425
 13602  144D  35D3               	lslf	___fldiv@rem,f
 13603  144E  0DD4               	rlf	___fldiv@rem+1,f
 13604  144F  0DD5               	rlf	___fldiv@rem+2,f
 13605  1450  0DD6               	rlf	___fldiv@rem+3,f
 13606  1451  35CB               	lslf	___fldiv@b,f
 13607  1452  0DCC               	rlf	___fldiv@b+1,f
 13608  1453  0DCD               	rlf	___fldiv@b+2,f
 13609  1454  0DCE               	rlf	___fldiv@b+3,f
 13610  1455  1BDD               	btfsc	___fldiv@grs+3,7
 13611  1456  144B               	bsf	___fldiv@b,0
 13612  1457  35DA               	lslf	___fldiv@grs,f
 13613  1458  0DDB               	rlf	___fldiv@grs+1,f
 13614  1459  0DDC               	rlf	___fldiv@grs+2,f
 13615  145A  0DDD               	rlf	___fldiv@grs+3,f
 13616  145B                     l4425:	
 13617  145B  084A               	movf	___fldiv@a+3,w
 13618  145C  0256               	subwf	___fldiv@rem+3,w
 13619  145D  1D03               	skipz
 13620  145E  2C69               	goto	u4935
 13621  145F  0849               	movf	___fldiv@a+2,w
 13622  1460  0255               	subwf	___fldiv@rem+2,w
 13623  1461  1D03               	skipz
 13624  1462  2C69               	goto	u4935
 13625  1463  0848               	movf	___fldiv@a+1,w
 13626  1464  0254               	subwf	___fldiv@rem+1,w
 13627  1465  1D03               	skipz
 13628  1466  2C69               	goto	u4935
 13629  1467  0847               	movf	___fldiv@a,w
 13630  1468  0253               	subwf	___fldiv@rem,w
 13631  1469                     u4935:	
 13632  1469  1C03               	skipc
 13633  146A  2C74               	goto	l4431
 13634  146B  175D               	bsf	___fldiv@grs+3,6
 13635  146C  0847               	movf	___fldiv@a,w
 13636  146D  02D3               	subwf	___fldiv@rem,f
 13637  146E  0848               	movf	___fldiv@a+1,w
 13638  146F  3BD4               	subwfb	___fldiv@rem+1,f
 13639  1470  0849               	movf	___fldiv@a+2,w
 13640  1471  3BD5               	subwfb	___fldiv@rem+2,f
 13641  1472  084A               	movf	___fldiv@a+3,w
 13642  1473  3BD6               	subwfb	___fldiv@rem+3,f
 13643  1474                     l4431:	
 13644  1474  0ADF               	incf	___fldiv@aexp,f
 13645  1475  2C46               	goto	l4433
 13646  1476                     l4435:	
 13647  1476  0856               	movf	___fldiv@rem+3,w
 13648  1477  0455               	iorwf	___fldiv@rem+2,w
 13649  1478  0454               	iorwf	___fldiv@rem+1,w
 13650  1479  0453               	iorwf	___fldiv@rem,w
 13651  147A  1D03               	btfss	3,2
 13652  147B  145A               	bsf	___fldiv@grs,0
 13653  147C                     l4449:	
 13654  147C  1BCD               	btfsc	___fldiv@b+2,7
 13655  147D  2C8D               	goto	l4451
 13656  147E  35CB               	lslf	___fldiv@b,f
 13657  147F  0DCC               	rlf	___fldiv@b+1,f
 13658  1480  0DCD               	rlf	___fldiv@b+2,f
 13659  1481  0DCE               	rlf	___fldiv@b+3,f
 13660  1482  1BDD               	btfsc	___fldiv@grs+3,7
 13661  1483  144B               	bsf	___fldiv@b,0
 13662  1484  30FF               	movlw	-1
 13663  1485  35DA               	lslf	___fldiv@grs,f
 13664  1486  0DDB               	rlf	___fldiv@grs+1,f
 13665  1487  0DDC               	rlf	___fldiv@grs+2,f
 13666  1488  0DDD               	rlf	___fldiv@grs+3,f
 13667  1489  07D8               	addwf	___fldiv@new_exp,f
 13668  148A  1C03               	skipc
 13669  148B  03D9               	decf	___fldiv@new_exp+1,f
 13670  148C  2C7C               	goto	l4449
 13671  148D                     l4451:	
 13672  148D  01DF               	clrf	___fldiv@aexp
 13673  148E  1FDD               	btfss	___fldiv@grs+3,7
 13674  148F  2CA2               	goto	l4461
 13675  1490  085A               	movf	___fldiv@grs,w
 13676  1491  00CF               	movwf	??___fldiv
 13677  1492  085B               	movf	___fldiv@grs+1,w
 13678  1493  00D0               	movwf	??___fldiv+1
 13679  1494  085C               	movf	___fldiv@grs+2,w
 13680  1495  00D1               	movwf	??___fldiv+2
 13681  1496  307F               	movlw	127
 13682  1497  055D               	andwf	___fldiv@grs+3,w
 13683  1498  00D2               	movwf	??___fldiv+3
 13684  1499  0451               	iorwf	??___fldiv+2,w
 13685  149A  0450               	iorwf	??___fldiv+1,w
 13686  149B  044F               	iorwf	??___fldiv,w
 13687  149C  1903               	skipnz
 13688  149D  184B               	btfsc	___fldiv@b,0
 13689  149E  2CA0               	goto	l4457
 13690  149F  2CA2               	goto	l4461
 13691  14A0                     l4457:	
 13692  14A0  01DF               	clrf	___fldiv@aexp
 13693  14A1  0ADF               	incf	___fldiv@aexp,f
 13694  14A2                     l4461:	
 13695  14A2  085F               	movf	___fldiv@aexp,w
 13696  14A3  1903               	btfsc	3,2
 13697  14A4  2CB4               	goto	l4471
 13698  14A5  3001               	movlw	1
 13699  14A6  07CB               	addwf	___fldiv@b,f
 13700  14A7  3000               	movlw	0
 13701  14A8  3DCC               	addwfc	___fldiv@b+1,f
 13702  14A9  3DCD               	addwfc	___fldiv@b+2,f
 13703  14AA  3DCE               	addwfc	___fldiv@b+3,f
 13704  14AB  1C4E               	btfss	___fldiv@b+3,0
 13705  14AC  2CB4               	goto	l4471
 13706  14AD  37CE               	asrf	___fldiv@b+3,f
 13707  14AE  0CCD               	rrf	___fldiv@b+2,f
 13708  14AF  0CCC               	rrf	___fldiv@b+1,f
 13709  14B0  0CCB               	rrf	___fldiv@b,f
 13710  14B1  0AD8               	incf	___fldiv@new_exp,f
 13711  14B2  1903               	skipnz
 13712  14B3  0AD9               	incf	___fldiv@new_exp+1,f
 13713  14B4                     l4471:	
 13714  14B4  26CD  3190         	fcall	PL174	;call to abstracted procedure
 13715  14B6  1D03               	skipz
 13716  14B7  2CBA               	goto	u5035
 13717  14B8  30FF               	movlw	255
 13718  14B9  0258               	subwf	___fldiv@new_exp,w
 13719  14BA                     u5035:	
 13720  14BA  1C03               	skipc
 13721  14BB  2CC1               	goto	l1149
 13722  14BC  30FF               	movlw	255
 13723  14BD  0140               	movlb	0	; select bank0
 13724  14BE  00D8               	movwf	___fldiv@new_exp
 13725  14BF  26C7  3190         	fcall	PL172	;call to abstracted procedure
 13726  14C1                     l1149:	
 13727  14C1  0140               	movlb	0	; select bank0
 13728  14C2  26CD  3190         	fcall	PL174	;call to abstracted procedure
 13729  14C4  1D03               	skipz
 13730  14C5  2CC8               	goto	u5045
 13731  14C6  3001               	movlw	1
 13732  14C7  0258               	subwf	___fldiv@new_exp,w
 13733  14C8                     u5045:	
 13734  14C8  1803               	skipnc
 13735  14C9  2CCF               	goto	l4481
 13736  14CA  0140               	movlb	0	; select bank0
 13737  14CB  01D8               	clrf	___fldiv@new_exp
 13738  14CC  26C7  3190         	fcall	PL172	;call to abstracted procedure
 13739  14CE  01D7               	clrf	___fldiv@sign
 13740  14CF                     l4481:	
 13741  14CF  0140               	movlb	0	; select bank0
 13742  14D0  0858               	movf	___fldiv@new_exp,w
 13743  14D1  00DE               	movwf	___fldiv@bexp
 13744  14D2  1C5E               	btfss	___fldiv@bexp,0
 13745  14D3  2CD6               	goto	l1151
 13746  14D4  17CD               	bsf	___fldiv@b+2,7
 13747  14D5  2CD7               	goto	l4487
 13748  14D6                     l1151:	
 13749  14D6  13CD               	bcf	___fldiv@b+2,7
 13750  14D7                     l4487:	
 13751  14D7  365E               	lsrf	___fldiv@bexp,w
 13752  14D8  00CE               	movwf	___fldiv@b+3
 13753  14D9  2C17               	goto	L21
 13754  14DA                     __end_of___fldiv:	
 13755  14DA                     __ptext67:	
 13756 ;; *************** function ___flge *****************
 13757 ;; Defined at:
 13758 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\flge.c"
 13759 ;; Parameters:    Size  Location     Type
 13760 ;;  ff1             4   39[BANK0 ] unsigned char 
 13761 ;;  ff2             4   43[BANK0 ] unsigned char 
 13762 ;; Auto vars:     Size  Location     Type
 13763 ;;		None
 13764 ;; Return value:  Size  Location     Type
 13765 ;;		None               void
 13766 ;; Registers used:
 13767 ;;		wreg, status,2, status,0
 13768 ;; Tracked objects:
 13769 ;;		On entry : 3F/0
 13770 ;;		On exit  : 3F/0
 13771 ;;		Unchanged: 0/0
 13772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13773 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13775 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13776 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13777 ;;Total ram usage:       12 bytes
 13778 ;; Hardware stack levels used:    1
 13779 ;; Hardware stack levels required when called:    3
 13780 ;; This function calls:
 13781 ;;		Nothing
 13782 ;; This function is called by:
 13783 ;;		_checkSensor
 13784 ;;		_spinInput
 13785 ;;		_efgtoa
 13786 ;; This function uses a non-reentrant model
 13787 ;;
 13788                           
 13789                           
 13790                           ;psect for function ___flge
 13791  14DA                     ___flge:	
 13792                           
 13793                           ;incstack = 0
 13794                           ; Regs used in ___flge: [wreg+status,2+status,0]
 13795  14DA  3080               	movlw	128
 13796  14DB  01CF               	clrf	??___flge
 13797  14DC  01D0               	clrf	??___flge+1
 13798  14DD  0549               	andwf	___flge@ff1+2,w
 13799  14DE  00D1               	movwf	??___flge+2
 13800  14DF  307F               	movlw	127
 13801  14E0  054A               	andwf	___flge@ff1+3,w
 13802  14E1  00D2               	movwf	??___flge+3
 13803  14E2  0451               	iorwf	??___flge+2,w
 13804  14E3  0450               	iorwf	??___flge+1,w
 13805  14E4  044F               	iorwf	??___flge,w
 13806  14E5  1D03               	skipz
 13807  14E6  2CEB               	goto	l4291
 13808  14E7  01C7               	clrf	___flge@ff1
 13809  14E8  01C8               	clrf	___flge@ff1+1
 13810  14E9  01C9               	clrf	___flge@ff1+2
 13811  14EA  01CA               	clrf	___flge@ff1+3
 13812  14EB                     l4291:	
 13813  14EB  3080               	movlw	128
 13814  14EC  01CF               	clrf	??___flge
 13815  14ED  01D0               	clrf	??___flge+1
 13816  14EE  054D               	andwf	___flge@ff2+2,w
 13817  14EF  00D1               	movwf	??___flge+2
 13818  14F0  307F               	movlw	127
 13819  14F1  054E               	andwf	___flge@ff2+3,w
 13820  14F2  00D2               	movwf	??___flge+3
 13821  14F3  0451               	iorwf	??___flge+2,w
 13822  14F4  0450               	iorwf	??___flge+1,w
 13823  14F5  044F               	iorwf	??___flge,w
 13824  14F6  1D03               	skipz
 13825  14F7  2CFA               	goto	l950
 13826  14F8  26D9  3190         	fcall	PL192	;call to abstracted procedure
 13827  14FA                     l950:	
 13828  14FA  1FCA               	btfss	___flge@ff1+3,7
 13829  14FB  2D0E               	goto	l4297
 13830  14FC  26D3  3190         	fcall	PL180	;call to abstracted procedure
 13831  14FE  0847               	movf	___flge@ff1,w
 13832  14FF  02CF               	subwf	??___flge,f
 13833  1500  0848               	movf	___flge@ff1+1,w
 13834  1501  3BD0               	subwfb	??___flge+1,f
 13835  1502  0849               	movf	___flge@ff1+2,w
 13836  1503  3BD1               	subwfb	??___flge+2,f
 13837  1504  084A               	movf	___flge@ff1+3,w
 13838  1505  3BD2               	subwfb	??___flge+3,f
 13839  1506  0852               	movf	??___flge+3,w
 13840  1507  00CA               	movwf	___flge@ff1+3
 13841  1508  0851               	movf	??___flge+2,w
 13842  1509  00C9               	movwf	___flge@ff1+2
 13843  150A  0850               	movf	??___flge+1,w
 13844  150B  00C8               	movwf	___flge@ff1+1
 13845  150C  084F               	movf	??___flge,w
 13846  150D  00C7               	movwf	___flge@ff1
 13847  150E                     l4297:	
 13848  150E  1FCE               	btfss	___flge@ff2+3,7
 13849  150F  2D22               	goto	l952
 13850  1510  26D3  3190         	fcall	PL180	;call to abstracted procedure
 13851  1512  084B               	movf	___flge@ff2,w
 13852  1513  02CF               	subwf	??___flge,f
 13853  1514  084C               	movf	___flge@ff2+1,w
 13854  1515  3BD0               	subwfb	??___flge+1,f
 13855  1516  084D               	movf	___flge@ff2+2,w
 13856  1517  3BD1               	subwfb	??___flge+2,f
 13857  1518  084E               	movf	___flge@ff2+3,w
 13858  1519  3BD2               	subwfb	??___flge+3,f
 13859  151A  0852               	movf	??___flge+3,w
 13860  151B  00CE               	movwf	___flge@ff2+3
 13861  151C  0851               	movf	??___flge+2,w
 13862  151D  00CD               	movwf	___flge@ff2+2
 13863  151E  0850               	movf	??___flge+1,w
 13864  151F  00CC               	movwf	___flge@ff2+1
 13865  1520  084F               	movf	??___flge,w
 13866  1521  00CB               	movwf	___flge@ff2
 13867  1522                     l952:	
 13868  1522  3080               	movlw	128
 13869  1523  06CA               	xorwf	___flge@ff1+3,f
 13870  1524  06CE               	xorwf	___flge@ff2+3,f
 13871  1525  084E               	movf	___flge@ff2+3,w
 13872  1526  024A               	subwf	___flge@ff1+3,w
 13873  1527  1D03               	skipz
 13874  1528  0008               	return
 13875  1529  084D               	movf	___flge@ff2+2,w
 13876  152A  0249               	subwf	___flge@ff1+2,w
 13877  152B  1D03               	skipz
 13878  152C  0008               	return
 13879  152D  084C               	movf	___flge@ff2+1,w
 13880  152E  0248               	subwf	___flge@ff1+1,w
 13881  152F  1D03               	skipz
 13882  1530  0008               	return
 13883  1531  084B               	movf	___flge@ff2,w
 13884  1532  0247               	subwf	___flge@ff1,w
 13885  1533  0008               	return
 13886  1534                     __end_of___flge:	
 13887  1534                     __ptext23:	
 13888 ;; *************** function _strcpy *****************
 13889 ;; Defined at:
 13890 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strcpy.c"
 13891 ;; Parameters:    Size  Location     Type
 13892 ;;  dest            2    5[BANK0 ] PTR unsigned char 
 13893 ;;		 -> dbuf(80), sBuf1(49), sBuf2(13), 
 13894 ;;  src             2    7[BANK0 ] PTR const unsigned char 
 13895 ;;		 -> STR_28(4), STR_27(4), STR_24(4), STR_23(4), 
 13896 ;;		 -> dbuf(80), STR_16(13), STR_15(13), STR_14(13), 
 13897 ;;		 -> STR_13(13), STR_9(13), sBuf2(13), 
 13898 ;; Auto vars:     Size  Location     Type
 13899 ;;  d               2   15[BANK0 ] PTR unsigned char 
 13900 ;;		 -> dbuf(80), sBuf1(49), sBuf2(13), 
 13901 ;;  s               2   13[BANK0 ] PTR const unsigned char 
 13902 ;;		 -> STR_28(4), STR_27(4), STR_24(4), STR_23(4), 
 13903 ;;		 -> dbuf(80), STR_16(13), STR_15(13), STR_14(13), 
 13904 ;;		 -> STR_13(13), STR_9(13), sBuf2(13), 
 13905 ;; Return value:  Size  Location     Type
 13906 ;;                  2    5[BANK0 ] PTR unsigned char 
 13907 ;; Registers used:
 13908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
 13909 ;; Tracked objects:
 13910 ;;		On entry : 3F/0
 13911 ;;		On exit  : 3F/0
 13912 ;;		Unchanged: 0/0
 13913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13915 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13916 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13917 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13918 ;;Total ram usage:       12 bytes
 13919 ;; Hardware stack levels used:    1
 13920 ;; Hardware stack levels required when called:    3
 13921 ;; This function calls:
 13922 ;;		Nothing
 13923 ;; This function is called by:
 13924 ;;		_channelView
 13925 ;;		_efgtoa
 13926 ;;		_strcat
 13927 ;; This function uses a non-reentrant model
 13928 ;;
 13929                           
 13930                           
 13931                           ;psect for function _strcpy
 13932  1534                     _strcpy:	
 13933  1534                     l6139:	
 13934                           ;incstack = 0
 13935                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
 13936                           
 13937  1534  0828               	movf	strcpy@src+1,w
 13938  1535  00AE               	movwf	strcpy@s+1
 13939  1536  0827               	movf	strcpy@src,w
 13940  1537  00AD               	movwf	strcpy@s
 13941  1538  0826               	movf	strcpy@dest+1,w
 13942  1539  00B0               	movwf	strcpy@d+1
 13943  153A  0825               	movf	strcpy@dest,w
 13944  153B  00AF               	movwf	strcpy@d
 13945  153C                     l6141:	
 13946  153C  0830               	movf	strcpy@d+1,w
 13947  153D  00AA               	movwf	??_strcpy+1
 13948  153E  082F               	movf	strcpy@d,w
 13949  153F  00A9               	movwf	??_strcpy
 13950  1540  0AAF               	incf	strcpy@d,f
 13951  1541  1903               	skipnz
 13952  1542  0AB0               	incf	strcpy@d+1,f
 13953  1543  0086               	movwf	6
 13954  1544  082A               	movf	??_strcpy+1,w
 13955  1545  0087               	movwf	7
 13956  1546  082E               	movf	strcpy@s+1,w
 13957  1547  00AC               	movwf	??_strcpy+3
 13958  1548  082D               	movf	strcpy@s,w
 13959  1549  00AB               	movwf	??_strcpy+2
 13960  154A  0AAD               	incf	strcpy@s,f
 13961  154B  1903               	skipnz
 13962  154C  0AAE               	incf	strcpy@s+1,f
 13963  154D  0084               	movwf	4
 13964  154E  082C               	movf	??_strcpy+3,w
 13965  154F  0085               	movwf	5
 13966  1550  0800               	movf	0,w	;code access
 13967  1551  3FC0               	movwi [0]fsr1
 13968  1552  0889               	movf	9,f
 13969  1553  1903               	btfsc	3,2
 13970  1554  0008               	return
 13971  1555  2D3C               	goto	l6141
 13972  1556                     __end_of_strcpy:	
 13973  1556                     __ptext27:	
 13974 ;; *************** function ___flsub *****************
 13975 ;; Defined at:
 13976 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcadd.c"
 13977 ;; Parameters:    Size  Location     Type
 13978 ;;  a               4   59[BANK0 ] long 
 13979 ;;  b               4   63[BANK0 ] long 
 13980 ;; Auto vars:     Size  Location     Type
 13981 ;;		None
 13982 ;; Return value:  Size  Location     Type
 13983 ;;                  4   59[BANK0 ] long 
 13984 ;; Registers used:
 13985 ;;		wreg, status,2, status,0, pclath, cstack
 13986 ;; Tracked objects:
 13987 ;;		On entry : 3F/0
 13988 ;;		On exit  : 3F/0
 13989 ;;		Unchanged: 0/0
 13990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13991 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13994 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13995 ;;Total ram usage:        8 bytes
 13996 ;; Hardware stack levels used:    1
 13997 ;; Hardware stack levels required when called:    4
 13998 ;; This function calls:
 13999 ;;		___fladd
 14000 ;; This function is called by:
 14001 ;;		_spinInput
 14002 ;;		_efgtoa
 14003 ;; This function uses a non-reentrant model
 14004 ;;
 14005                           
 14006                           
 14007                           ;psect for function ___flsub
 14008  1556                     ___flsub:	
 14009                           
 14010                           ;incstack = 0
 14011                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 14012  1556  3080               	movlw	128
 14013  1557  06DE               	xorwf	___flsub@a+3,f
 14014  1558  0862               	movf	___flsub@b+3,w
 14015  1559  00CA               	movwf	___fladd@b+3
 14016  155A  0861               	movf	___flsub@b+2,w
 14017  155B  00C9               	movwf	___fladd@b+2
 14018  155C  0860               	movf	___flsub@b+1,w
 14019  155D  00C8               	movwf	___fladd@b+1
 14020  155E  085F               	movf	___flsub@b,w
 14021  155F  00C7               	movwf	___fladd@b
 14022  1560  085E               	movf	___flsub@a+3,w
 14023  1561  00CE               	movwf	___fladd@a+3
 14024  1562  085D               	movf	___flsub@a+2,w
 14025  1563  00CD               	movwf	___fladd@a+2
 14026  1564  085C               	movf	___flsub@a+1,w
 14027  1565  00CC               	movwf	___fladd@a+1
 14028  1566  085B               	movf	___flsub@a,w
 14029  1567  00CB               	movwf	___fladd@a
 14030  1568  3181  2187         	fcall	___fladd
 14031  156A  084A               	movf	?___fladd+3,w
 14032  156B  00DE               	movwf	?___flsub+3
 14033  156C  0849               	movf	?___fladd+2,w
 14034  156D  00DD               	movwf	?___flsub+2
 14035  156E  0848               	movf	?___fladd+1,w
 14036  156F  00DC               	movwf	?___flsub+1
 14037  1570  0847               	movf	?___fladd,w
 14038  1571  00DB               	movwf	?___flsub
 14039  1572  0008               	return
 14040  1573                     __end_of___flsub:	
 14041  1573                     PL8:	
 14042  1573  00CA               	movwf	___fldiv@a+3
 14043  1574  3020               	movlw	32
 14044  1575  00C9               	movwf	___fldiv@a+2
 14045  1576  01C8               	clrf	___fldiv@a+1
 14046  1577  01C7               	clrf	___fldiv@a
 14047  1578  0141               	movlb	1	; select bank1
 14048  1579  0862               	movf	(efgtoa@u+3)^(0+128),w
 14049  157A  0140               	movlb	0	; select bank0
 14050  157B  00CE               	movwf	___fldiv@b+3
 14051  157C  0141               	movlb	1	; select bank1
 14052  157D  0861               	movf	(efgtoa@u+2)^(0+128),w
 14053  157E  0140               	movlb	0	; select bank0
 14054  157F  00CD               	movwf	___fldiv@b+2
 14055  1580  0141               	movlb	1	; select bank1
 14056  1581  0860               	movf	(efgtoa@u+1)^(0+128),w
 14057  1582  0140               	movlb	0	; select bank0
 14058  1583  00CC               	movwf	___fldiv@b+1
 14059  1584  0141               	movlb	1	; select bank1
 14060  1585  085F               	movf	efgtoa@u^(0+128),w
 14061  1586  0140               	movlb	0	; select bank0
 14062  1587  00CB               	movwf	___fldiv@b
 14063  1588  0008               	return
 14064  1589                     __end_ofPL8:	
 14065  1589                     PL10:	
 14066  1589  085E               	movf	?___flsub+3,w
 14067  158A  0141               	movlb	1	; select bank1
 14068  158B  00D0               	movwf	(efgtoa@h+3)^(0+128)
 14069  158C  0140               	movlb	0	; select bank0
 14070  158D  085D               	movf	?___flsub+2,w
 14071  158E  0141               	movlb	1	; select bank1
 14072  158F  00CF               	movwf	(efgtoa@h+2)^(0+128)
 14073  1590  0140               	movlb	0	; select bank0
 14074  1591  085C               	movf	?___flsub+1,w
 14075  1592  0141               	movlb	1	; select bank1
 14076  1593  00CE               	movwf	(efgtoa@h+1)^(0+128)
 14077  1594  0140               	movlb	0	; select bank0
 14078  1595  085B               	movf	?___flsub,w
 14079  1596  0141               	movlb	1	; select bank1
 14080  1597  00CD               	movwf	efgtoa@h^(0+128)
 14081  1598  0140               	movlb	0	; select bank0
 14082  1599  3441               	retlw	65
 14083  159A                     __end_ofPL10:	
 14084  159A                     PL14:	
 14085  159A  00B0               	movwf	___flmul@b+2
 14086  159B  01AF               	clrf	___flmul@b+1
 14087  159C  01AE               	clrf	___flmul@b
 14088  159D  0141               	movlb	1	; select bank1
 14089  159E  0862               	movf	(efgtoa@u+3)^(0+128),w
 14090  159F  0140               	movlb	0	; select bank0
 14091  15A0  00B5               	movwf	___flmul@a+3
 14092  15A1  0141               	movlb	1	; select bank1
 14093  15A2  0861               	movf	(efgtoa@u+2)^(0+128),w
 14094  15A3  0140               	movlb	0	; select bank0
 14095  15A4  00B4               	movwf	___flmul@a+2
 14096  15A5  0141               	movlb	1	; select bank1
 14097  15A6  0860               	movf	(efgtoa@u+1)^(0+128),w
 14098  15A7  0140               	movlb	0	; select bank0
 14099  15A8  00B3               	movwf	___flmul@a+1
 14100  15A9  0141               	movlb	1	; select bank1
 14101  15AA  085F               	movf	efgtoa@u^(0+128),w
 14102  15AB  0140               	movlb	0	; select bank0
 14103  15AC  00B2               	movwf	___flmul@a
 14104  15AD  0008               	return
 14105  15AE                     __end_ofPL14:	
 14106  15AE                     PL16:	
 14107  15AE  086C               	movf	efgtoa@c,w
 14108  15AF  3EBF               	addlw	191
 14109  15B0  00ED               	movwf	??_efgtoa
 14110  15B1  30FF               	movlw	255
 14111  15B2  1803               	skipnc
 14112  15B3  3000               	movlw	0
 14113  15B4  00EE               	movwf	??_efgtoa+1
 14114  15B5  3000               	movlw	0
 14115  15B6  026E               	subwf	??_efgtoa+1,w
 14116  15B7  301A               	movlw	26
 14117  15B8  1903               	skipnz
 14118  15B9  026D               	subwf	??_efgtoa,w
 14119  15BA  1803               	btfsc	3,0
 14120  15BB  2DBE               	goto	u7270
 14121  15BC  3001               	movlw	1
 14122  15BD  2DBF               	goto	u7280
 14123  15BE                     u7270:	
 14124  15BE  3000               	movlw	0
 14125  15BF                     u7280:	
 14126  15BF  0141               	movlb	1	; select bank1
 14127  15C0  0008               	return
 14128  15C1                     __end_ofPL16:	
 14129  15C1                     PL18:	
 14130  15C1  0141               	movlb	1	; select bank1
 14131  15C2  0862               	movf	(efgtoa@u+3)^(0+128),w
 14132  15C3  0140               	movlb	0	; select bank0
 14133  15C4  00CA               	movwf	___fldiv@a+3
 14134  15C5  0141               	movlb	1	; select bank1
 14135  15C6  0861               	movf	(efgtoa@u+2)^(0+128),w
 14136  15C7  0140               	movlb	0	; select bank0
 14137  15C8  00C9               	movwf	___fldiv@a+2
 14138  15C9  0141               	movlb	1	; select bank1
 14139  15CA  0860               	movf	(efgtoa@u+1)^(0+128),w
 14140  15CB  0140               	movlb	0	; select bank0
 14141  15CC  00C8               	movwf	___fldiv@a+1
 14142  15CD  0141               	movlb	1	; select bank1
 14143  15CE  085F               	movf	efgtoa@u^(0+128),w
 14144  15CF  0140               	movlb	0	; select bank0
 14145  15D0  00C7               	movwf	___fldiv@a
 14146  15D1  0141               	movlb	1	; select bank1
 14147  15D2  0850               	movf	(efgtoa@h+3)^(0+128),w
 14148  15D3  0140               	movlb	0	; select bank0
 14149  15D4  00CE               	movwf	___fldiv@b+3
 14150  15D5  0141               	movlb	1	; select bank1
 14151  15D6  084F               	movf	(efgtoa@h+2)^(0+128),w
 14152  15D7  0140               	movlb	0	; select bank0
 14153  15D8  00CD               	movwf	___fldiv@b+2
 14154  15D9  0141               	movlb	1	; select bank1
 14155  15DA  084E               	movf	(efgtoa@h+1)^(0+128),w
 14156  15DB  0140               	movlb	0	; select bank0
 14157  15DC  00CC               	movwf	___fldiv@b+1
 14158  15DD  0141               	movlb	1	; select bank1
 14159  15DE  084D               	movf	efgtoa@h^(0+128),w
 14160  15DF  0140               	movlb	0	; select bank0
 14161  15E0  00CB               	movwf	___fldiv@b
 14162  15E1  0008               	return
 14163  15E2                     __end_ofPL18:	
 14164  15E2                     PL20:	
 14165  15E2  0854               	movf	(efgtoa@l+3)^(0+128),w
 14166  15E3  0140               	movlb	0	; select bank0
 14167  15E4  00B5               	movwf	___flmul@a+3
 14168  15E5  0141               	movlb	1	; select bank1
 14169  15E6  0853               	movf	(efgtoa@l+2)^(0+128),w
 14170  15E7  0140               	movlb	0	; select bank0
 14171  15E8  00B4               	movwf	___flmul@a+2
 14172  15E9  0141               	movlb	1	; select bank1
 14173  15EA  0852               	movf	(efgtoa@l+1)^(0+128),w
 14174  15EB  0140               	movlb	0	; select bank0
 14175  15EC  00B3               	movwf	___flmul@a+1
 14176  15ED  0141               	movlb	1	; select bank1
 14177  15EE  0851               	movf	efgtoa@l^(0+128),w
 14178  15EF  0140               	movlb	0	; select bank0
 14179  15F0  00B2               	movwf	___flmul@a
 14180  15F1  0141               	movlb	1	; select bank1
 14181  15F2  0862               	movf	(efgtoa@u+3)^(0+128),w
 14182  15F3  0140               	movlb	0	; select bank0
 14183  15F4  00B1               	movwf	___flmul@b+3
 14184  15F5  0141               	movlb	1	; select bank1
 14185  15F6  0861               	movf	(efgtoa@u+2)^(0+128),w
 14186  15F7  0140               	movlb	0	; select bank0
 14187  15F8  00B0               	movwf	___flmul@b+2
 14188  15F9  0141               	movlb	1	; select bank1
 14189  15FA  0860               	movf	(efgtoa@u+1)^(0+128),w
 14190  15FB  0140               	movlb	0	; select bank0
 14191  15FC  00AF               	movwf	___flmul@b+1
 14192  15FD  0141               	movlb	1	; select bank1
 14193  15FE  085F               	movf	efgtoa@u^(0+128),w
 14194  15FF  0140               	movlb	0	; select bank0
 14195  1600  00AE               	movwf	___flmul@b
 14196  1601  0008               	return
 14197  1602                     __end_ofPL20:	
 14198  1602                     PL22:	
 14199  1602  0140               	movlb	0	; select bank0
 14200  1603  0863               	movf	?_floorf+3,w
 14201  1604  0141               	movlb	1	; select bank1
 14202  1605  00D4               	movwf	(efgtoa@l+3)^(0+128)
 14203  1606  0140               	movlb	0	; select bank0
 14204  1607  0862               	movf	?_floorf+2,w
 14205  1608  0141               	movlb	1	; select bank1
 14206  1609  00D3               	movwf	(efgtoa@l+2)^(0+128)
 14207  160A  0140               	movlb	0	; select bank0
 14208  160B  0861               	movf	?_floorf+1,w
 14209  160C  0141               	movlb	1	; select bank1
 14210  160D  00D2               	movwf	(efgtoa@l+1)^(0+128)
 14211  160E  0140               	movlb	0	; select bank0
 14212  160F  0860               	movf	?_floorf,w
 14213  1610  0141               	movlb	1	; select bank1
 14214  1611  00D1               	movwf	efgtoa@l^(0+128)
 14215  1612  0854               	movf	(efgtoa@l+3)^(0+128),w
 14216  1613  0140               	movlb	0	; select bank0
 14217  1614  00A3               	movwf	___fltol@f1+3
 14218  1615  0141               	movlb	1	; select bank1
 14219  1616  0853               	movf	(efgtoa@l+2)^(0+128),w
 14220  1617  0140               	movlb	0	; select bank0
 14221  1618  00A2               	movwf	___fltol@f1+2
 14222  1619  0141               	movlb	1	; select bank1
 14223  161A  0852               	movf	(efgtoa@l+1)^(0+128),w
 14224  161B  0140               	movlb	0	; select bank0
 14225  161C  00A1               	movwf	___fltol@f1+1
 14226  161D  0141               	movlb	1	; select bank1
 14227  161E  0851               	movf	efgtoa@l^(0+128),w
 14228  161F  0140               	movlb	0	; select bank0
 14229  1620  00A0               	movwf	___fltol@f1
 14230  1621  0008               	return
 14231  1622                     __end_ofPL22:	
 14232  1622                     PL28:	
 14233  1622  084A               	movf	?___fldiv+3,w
 14234  1623  0141               	movlb	1	; select bank1
 14235  1624  00E2               	movwf	(efgtoa@u+3)^(0+128)
 14236  1625  0140               	movlb	0	; select bank0
 14237  1626  0849               	movf	?___fldiv+2,w
 14238  1627  0141               	movlb	1	; select bank1
 14239  1628  00E1               	movwf	(efgtoa@u+2)^(0+128)
 14240  1629  0140               	movlb	0	; select bank0
 14241  162A  0848               	movf	?___fldiv+1,w
 14242  162B  0141               	movlb	1	; select bank1
 14243  162C  00E0               	movwf	(efgtoa@u+1)^(0+128)
 14244  162D  0140               	movlb	0	; select bank0
 14245  162E  0847               	movf	?___fldiv,w
 14246  162F  0141               	movlb	1	; select bank1
 14247  1630  00DF               	movwf	efgtoa@u^(0+128)
 14248  1631  0008               	return
 14249  1632                     __end_ofPL28:	
 14250  1632                     PL30:	
 14251  1632  085A               	movf	(efgtoa@g+3)^(0+128),w
 14252  1633  0140               	movlb	0	; select bank0
 14253  1634  00CA               	movwf	___flge@ff1+3
 14254  1635  0141               	movlb	1	; select bank1
 14255  1636  0859               	movf	(efgtoa@g+2)^(0+128),w
 14256  1637  0140               	movlb	0	; select bank0
 14257  1638  00C9               	movwf	___flge@ff1+2
 14258  1639  0141               	movlb	1	; select bank1
 14259  163A  0858               	movf	(efgtoa@g+1)^(0+128),w
 14260  163B  0140               	movlb	0	; select bank0
 14261  163C  00C8               	movwf	___flge@ff1+1
 14262  163D  0141               	movlb	1	; select bank1
 14263  163E  0857               	movf	efgtoa@g^(0+128),w
 14264  163F  0140               	movlb	0	; select bank0
 14265  1640  00C7               	movwf	___flge@ff1
 14266  1641  0008               	return
 14267  1642                     __end_ofPL30:	
 14268  1642                     PL32:	
 14269  1642  0831               	movf	?___flmul+3,w
 14270  1643  00DE               	movwf	___flsub@a+3
 14271  1644  0830               	movf	?___flmul+2,w
 14272  1645  00DD               	movwf	___flsub@a+2
 14273  1646  082F               	movf	?___flmul+1,w
 14274  1647  00DC               	movwf	___flsub@a+1
 14275  1648  082E               	movf	?___flmul,w
 14276  1649  00DB               	movwf	___flsub@a
 14277  164A  0141               	movlb	1	; select bank1
 14278  164B  0850               	movf	(efgtoa@h+3)^(0+128),w
 14279  164C  0140               	movlb	0	; select bank0
 14280  164D  00E2               	movwf	___flsub@b+3
 14281  164E  0141               	movlb	1	; select bank1
 14282  164F  084F               	movf	(efgtoa@h+2)^(0+128),w
 14283  1650  0140               	movlb	0	; select bank0
 14284  1651  00E1               	movwf	___flsub@b+2
 14285  1652  0141               	movlb	1	; select bank1
 14286  1653  084E               	movf	(efgtoa@h+1)^(0+128),w
 14287  1654  0140               	movlb	0	; select bank0
 14288  1655  00E0               	movwf	___flsub@b+1
 14289  1656  0141               	movlb	1	; select bank1
 14290  1657  084D               	movf	efgtoa@h^(0+128),w
 14291  1658  0140               	movlb	0	; select bank0
 14292  1659  00DF               	movwf	___flsub@b
 14293  165A  0008               	return
 14294  165B                     __end_ofPL32:	
 14295  165B                     PL36:	
 14296  165B  30A0               	movlw	(low (_dbuf| (0+512)))& (0+255)
 14297  165C  0140               	movlb	0	; select bank0
 14298  165D  00AE               	movwf	pad@buf
 14299  165E  0141               	movlb	1	; select bank1
 14300  165F  084B               	movf	(efgtoa@w+1)^(0+128),w
 14301  1660  0140               	movlb	0	; select bank0
 14302  1661  00B0               	movwf	pad@p+1
 14303  1662  0141               	movlb	1	; select bank1
 14304  1663  084A               	movf	efgtoa@w^(0+128),w
 14305  1664  0140               	movlb	0	; select bank0
 14306  1665  00AF               	movwf	pad@p
 14307  1666  0141               	movlb	1	; select bank1
 14308  1667  0844               	movf	efgtoa@fp^(0+128),w
 14309  1668  0008               	return
 14310  1669                     __end_ofPL36:	
 14311  1669                     PL48:	
 14312  1669  0141               	movlb	1	; select bank1
 14313  166A  085A               	movf	(efgtoa@g+3)^(0+128),w
 14314  166B  0140               	movlb	0	; select bank0
 14315  166C  00A3               	movwf	___fpclassifyf@x+3
 14316  166D  0141               	movlb	1	; select bank1
 14317  166E  0859               	movf	(efgtoa@g+2)^(0+128),w
 14318  166F  0140               	movlb	0	; select bank0
 14319  1670  00A2               	movwf	___fpclassifyf@x+2
 14320  1671  0141               	movlb	1	; select bank1
 14321  1672  0858               	movf	(efgtoa@g+1)^(0+128),w
 14322  1673  0140               	movlb	0	; select bank0
 14323  1674  00A1               	movwf	___fpclassifyf@x+1
 14324  1675  0141               	movlb	1	; select bank1
 14325  1676  0857               	movf	efgtoa@g^(0+128),w
 14326  1677  0140               	movlb	0	; select bank0
 14327  1678  00A0               	movwf	___fpclassifyf@x
 14328  1679  0008               	return
 14329  167A                     __end_ofPL48:	
 14330  167A                     PL56:	
 14331  167A  0856               	movf	(efgtoa@i+1)^(0+128),w
 14332  167B  3A80               	xorlw	128
 14333  167C  0140               	movlb	0	; select bank0
 14334  167D  00ED               	movwf	??_efgtoa
 14335  167E  0141               	movlb	1	; select bank1
 14336  167F  083F               	movf	(efgtoa@m+1)^(0+128),w
 14337  1680  3A80               	xorlw	128
 14338  1681  0140               	movlb	0	; select bank0
 14339  1682  026D               	subwf	??_efgtoa,w
 14340  1683  1D03               	skipz
 14341  1684  0008               	return
 14342  1685  0141               	movlb	1	; select bank1
 14343  1686  083E               	movf	efgtoa@m^(0+128),w
 14344  1687  0255               	subwf	efgtoa@i^(0+128),w
 14345  1688  0008               	return
 14346  1689                     __end_ofPL56:	
 14347  1689                     PL60:	
 14348  1689  085D               	movf	efgtoa@n^(0+128),w
 14349  168A  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 14350  168B  0140               	movlb	0	; select bank0
 14351  168C  00A5               	movwf	strcpy@dest
 14352  168D  3002               	movlw	2
 14353  168E  00A6               	movwf	strcpy@dest+1
 14354  168F  0008               	return
 14355  1690                     __end_ofPL60:	
 14356  1690                     PL90:	
 14357  1690  085D               	movf	efgtoa@n^(0+128),w
 14358  1691  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 14359  1692  0086               	movwf	6
 14360  1693  3002               	movlw	2	; select bank5/6
 14361  1694  0087               	movwf	7
 14362  1695  0008               	return
 14363  1696                     __end_ofPL90:	
 14364  1696                     PL94:	
 14365  1696  0081               	movwf	1
 14366  1697  0ADD               	incf	efgtoa@n^(0+128),f
 14367  1698  1903               	skipnz
 14368  1699  0ADE               	incf	(efgtoa@n+1)^(0+128),f
 14369  169A  30FF               	movlw	-1
 14370  169B  07CA               	addwf	efgtoa@w^(0+128),f
 14371  169C  0008               	return
 14372  169D                     __end_ofPL94:	
 14373  169D                     PL116:	
 14374  169D  084A               	movf	?___fldiv+3,w
 14375  169E  00E3               	movwf	floorf@x+3
 14376  169F  0849               	movf	?___fldiv+2,w
 14377  16A0  00E2               	movwf	floorf@x+2
 14378  16A1  0848               	movf	?___fldiv+1,w
 14379  16A2  00E1               	movwf	floorf@x+1
 14380  16A3  0847               	movf	?___fldiv,w
 14381  16A4  00E0               	movwf	floorf@x
 14382  16A5  0008               	return
 14383  16A6                     __end_ofPL116:	
 14384  16A6                     PL124:	
 14385  16A6  0821               	movf	?___fltol+1,w
 14386  16A7  0141               	movlb	1	; select bank1
 14387  16A8  00C3               	movwf	(efgtoa@d+1)^(0+128)
 14388  16A9  0140               	movlb	0	; select bank0
 14389  16AA  0820               	movf	?___fltol,w
 14390  16AB  0141               	movlb	1	; select bank1
 14391  16AC  00C2               	movwf	efgtoa@d^(0+128)
 14392  16AD  0008               	return
 14393  16AE                     __end_ofPL124:	
 14394  16AE                     PL130:	
 14395  16AE  00E2               	movwf	(efgtoa@u+3)^(0+128)
 14396  16AF  3080               	movlw	128
 14397  16B0  00E1               	movwf	(efgtoa@u+2)^(0+128)
 14398  16B1  01E0               	clrf	(efgtoa@u+1)^(0+128)
 14399  16B2  01DF               	clrf	efgtoa@u^(0+128)
 14400  16B3  01DB               	clrf	efgtoa@e^(0+128)
 14401  16B4  01DC               	clrf	(efgtoa@e+1)^(0+128)
 14402  16B5  0008               	return
 14403  16B6                     __end_ofPL130:	
 14404  16B6                     PL134:	
 14405  16B6  0855               	movf	efgtoa@i^(0+128),w
 14406  16B7  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 14407  16B8  0086               	movwf	6
 14408  16B9  3002               	movlw	2	; select bank5/6
 14409  16BA  0087               	movwf	7
 14410  16BB  0008               	return
 14411  16BC                     __end_ofPL134:	
 14412  16BC                     PL138:	
 14413  16BC  3A80               	xorlw	128
 14414  16BD  0140               	movlb	0	; select bank0
 14415  16BE  00ED               	movwf	??_efgtoa
 14416  16BF  3080               	movlw	128
 14417  16C0  026D               	subwf	??_efgtoa,w
 14418  16C1  0008               	return
 14419  16C2                     __end_ofPL138:	
 14420  16C2                     PL142:	
 14421  16C2  082F               	movf	?_pad+1,w
 14422  16C3  00E9               	movwf	?_efgtoa+1
 14423  16C4  082E               	movf	?_pad,w
 14424  16C5  00E8               	movwf	?_efgtoa
 14425  16C6  0008               	return
 14426  16C7                     __end_ofPL142:	
 14427  16C7                     PL172:	
 14428  16C7  01D9               	clrf	___fldiv@new_exp+1
 14429  16C8  01CB               	clrf	___fldiv@b
 14430  16C9  01CC               	clrf	___fldiv@b+1
 14431  16CA  01CD               	clrf	___fldiv@b+2
 14432  16CB  01CE               	clrf	___fldiv@b+3
 14433  16CC  0008               	return
 14434  16CD                     __end_ofPL172:	
 14435  16CD                     PL174:	
 14436  16CD  0859               	movf	___fldiv@new_exp+1,w
 14437  16CE  3A80               	xorlw	128
 14438  16CF  00CF               	movwf	??___fldiv
 14439  16D0  3080               	movlw	128
 14440  16D1  024F               	subwf	??___fldiv,w
 14441  16D2  0008               	return
 14442  16D3                     __end_ofPL174:	
 14443  16D3                     PL180:	
 14444  16D3  3080               	movlw	128
 14445  16D4  01CF               	clrf	??___flge
 14446  16D5  01D0               	clrf	??___flge+1
 14447  16D6  01D1               	clrf	??___flge+2
 14448  16D7  00D2               	movwf	??___flge+3
 14449  16D8  0008               	return
 14450  16D9                     __end_ofPL180:	
 14451  16D9                     PL192:	
 14452  16D9  01CB               	clrf	___flge@ff2
 14453  16DA  01CC               	clrf	___flge@ff2+1
 14454  16DB  01CD               	clrf	___flge@ff2+2
 14455  16DC  01CE               	clrf	___flge@ff2+3
 14456  16DD  0008               	return
 14457  16DE                     __end_ofPL192:	
 14458  16DE                     __ptext29:	
 14459 ;; *************** function ___fleq *****************
 14460 ;; Defined at:
 14461 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\fleq.c"
 14462 ;; Parameters:    Size  Location     Type
 14463 ;;  ff1             4    0[BANK0 ] long 
 14464 ;;  ff2             4    4[BANK0 ] long 
 14465 ;; Auto vars:     Size  Location     Type
 14466 ;;		None
 14467 ;; Return value:  Size  Location     Type
 14468 ;;		None               void
 14469 ;; Registers used:
 14470 ;;		wreg, status,2, status,0
 14471 ;; Tracked objects:
 14472 ;;		On entry : 3F/0
 14473 ;;		On exit  : 3F/0
 14474 ;;		Unchanged: 0/0
 14475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14476 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14478 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14479 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14480 ;;Total ram usage:       12 bytes
 14481 ;; Hardware stack levels used:    1
 14482 ;; Hardware stack levels required when called:    3
 14483 ;; This function calls:
 14484 ;;		Nothing
 14485 ;; This function is called by:
 14486 ;;		_efgtoa
 14487 ;; This function uses a non-reentrant model
 14488 ;;
 14489                           
 14490                           
 14491                           ;psect for function ___fleq
 14492  16DE                     ___fleq:	
 14493                           
 14494                           ;incstack = 0
 14495                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 14496  16DE  3080               	movlw	128
 14497  16DF  01A8               	clrf	??___fleq
 14498  16E0  01A9               	clrf	??___fleq+1
 14499  16E1  0522               	andwf	___fleq@ff1+2,w
 14500  16E2  00AA               	movwf	??___fleq+2
 14501  16E3  307F               	movlw	127
 14502  16E4  0523               	andwf	___fleq@ff1+3,w
 14503  16E5  00AB               	movwf	??___fleq+3
 14504  16E6  042A               	iorwf	??___fleq+2,w
 14505  16E7  0429               	iorwf	??___fleq+1,w
 14506  16E8  0428               	iorwf	??___fleq,w
 14507  16E9  1D03               	skipz
 14508  16EA  2EEF               	goto	l4275
 14509  16EB  01A0               	clrf	___fleq@ff1
 14510  16EC  01A1               	clrf	___fleq@ff1+1
 14511  16ED  01A2               	clrf	___fleq@ff1+2
 14512  16EE  01A3               	clrf	___fleq@ff1+3
 14513  16EF                     l4275:	
 14514  16EF  3080               	movlw	128
 14515  16F0  01A8               	clrf	??___fleq
 14516  16F1  01A9               	clrf	??___fleq+1
 14517  16F2  0526               	andwf	___fleq@ff2+2,w
 14518  16F3  00AA               	movwf	??___fleq+2
 14519  16F4  307F               	movlw	127
 14520  16F5  0527               	andwf	___fleq@ff2+3,w
 14521  16F6  00AB               	movwf	??___fleq+3
 14522  16F7  042A               	iorwf	??___fleq+2,w
 14523  16F8  0429               	iorwf	??___fleq+1,w
 14524  16F9  0428               	iorwf	??___fleq,w
 14525  16FA  1D03               	skipz
 14526  16FB  2EFE               	goto	l4279
 14527  16FC  2712  3190         	fcall	PL212	;call to abstracted procedure
 14528  16FE                     l4279:	
 14529  16FE  0827               	movf	___fleq@ff2+3,w
 14530  16FF  0623               	xorwf	___fleq@ff1+3,w
 14531  1700  1D03               	skipz
 14532  1701  2F0C               	goto	u4685
 14533  1702  0826               	movf	___fleq@ff2+2,w
 14534  1703  0622               	xorwf	___fleq@ff1+2,w
 14535  1704  1D03               	skipz
 14536  1705  2F0C               	goto	u4685
 14537  1706  0825               	movf	___fleq@ff2+1,w
 14538  1707  0621               	xorwf	___fleq@ff1+1,w
 14539  1708  1D03               	skipz
 14540  1709  2F0C               	goto	u4685
 14541  170A  0824               	movf	___fleq@ff2,w
 14542  170B  0620               	xorwf	___fleq@ff1,w
 14543  170C                     u4685:	
 14544  170C  1903               	skipnz
 14545  170D  2F10               	goto	l4283
 14546  170E  1003               	clrc
 14547  170F  0008               	return
 14548  1710                     l4283:	
 14549  1710  1403               	setc
 14550  1711  0008               	return
 14551  1712                     __end_of___fleq:	
 14552  1712                     PL212:	
 14553  1712  01A4               	clrf	___fleq@ff2
 14554  1713  01A5               	clrf	___fleq@ff2+1
 14555  1714  01A6               	clrf	___fleq@ff2+2
 14556  1715  01A7               	clrf	___fleq@ff2+3
 14557  1716  0008               	return
 14558  1717                     __end_ofPL212:	
 14559  1717                     __ptext25:	
 14560 ;; *************** function ___fpclassifyf *****************
 14561 ;; Defined at:
 14562 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\__fpclassifyf.c"
 14563 ;; Parameters:    Size  Location     Type
 14564 ;;  x               4    0[BANK0 ] float 
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;  u               4   10[BANK0 ] struct .
 14567 ;;  e               2    8[BANK0 ] int 
 14568 ;; Return value:  Size  Location     Type
 14569 ;;                  2    0[BANK0 ] int 
 14570 ;; Registers used:
 14571 ;;		wreg, status,2, status,0
 14572 ;; Tracked objects:
 14573 ;;		On entry : 3F/0
 14574 ;;		On exit  : 3F/0
 14575 ;;		Unchanged: 0/0
 14576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14578 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14579 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14580 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14581 ;;Total ram usage:       14 bytes
 14582 ;; Hardware stack levels used:    1
 14583 ;; Hardware stack levels required when called:    3
 14584 ;; This function calls:
 14585 ;;		Nothing
 14586 ;; This function is called by:
 14587 ;;		_efgtoa
 14588 ;; This function uses a non-reentrant model
 14589 ;;
 14590                           
 14591                           
 14592                           ;psect for function ___fpclassifyf
 14593  1717                     ___fpclassifyf:	
 14594                           
 14595                           ;incstack = 0
 14596                           ; Regs used in ___fpclassifyf: [wreg+status,2+status,0]
 14597  1717  0143               	movlb	3	; select bank3
 14598  1718  0827               	movf	(___fpclassifyf@F453+3)^(0+384),w
 14599  1719  0140               	movlb	0	; select bank0
 14600  171A  00AD               	movwf	___fpclassifyf@u+3
 14601  171B  0143               	movlb	3	; select bank3
 14602  171C  0826               	movf	(___fpclassifyf@F453+2)^(0+384),w
 14603  171D  0140               	movlb	0	; select bank0
 14604  171E  00AC               	movwf	___fpclassifyf@u+2
 14605  171F  0143               	movlb	3	; select bank3
 14606  1720  0825               	movf	(___fpclassifyf@F453+1)^(0+384),w
 14607  1721  0140               	movlb	0	; select bank0
 14608  1722  00AB               	movwf	___fpclassifyf@u+1
 14609  1723  0143               	movlb	3	; select bank3
 14610  1724  0824               	movf	___fpclassifyf@F453^(0+384),w
 14611  1725  0140               	movlb	0	; select bank0
 14612  1726  00AA               	movwf	___fpclassifyf@u
 14613  1727  0823               	movf	___fpclassifyf@x+3,w
 14614  1728  00AD               	movwf	___fpclassifyf@u+3
 14615  1729  0822               	movf	___fpclassifyf@x+2,w
 14616  172A  00AC               	movwf	___fpclassifyf@u+2
 14617  172B  0821               	movf	___fpclassifyf@x+1,w
 14618  172C  00AB               	movwf	___fpclassifyf@u+1
 14619  172D  0820               	movf	___fpclassifyf@x,w
 14620  172E  00AA               	movwf	___fpclassifyf@u
 14621  172F  2776  3190         	fcall	PL84	;call to abstracted procedure
 14622  1731  0D26               	rlf	??___fpclassifyf+2,w
 14623  1732  0D27               	rlf	??___fpclassifyf+3,w
 14624  1733  00A4               	movwf	??___fpclassifyf
 14625  1734  01A5               	clrf	??___fpclassifyf+1
 14626  1735  01A6               	clrf	??___fpclassifyf+2
 14627  1736  01A7               	clrf	??___fpclassifyf+3
 14628  1737  0DA5               	rlf	??___fpclassifyf+1,f
 14629  1738  0825               	movf	??___fpclassifyf+1,w
 14630  1739  00A9               	movwf	___fpclassifyf@e+1
 14631  173A  0824               	movf	??___fpclassifyf,w
 14632  173B  00A8               	movwf	___fpclassifyf@e
 14633  173C  30FF               	movlw	255
 14634  173D  05A8               	andwf	___fpclassifyf@e,f
 14635  173E  01A9               	clrf	___fpclassifyf@e+1
 14636  173F  0828               	movf	___fpclassifyf@e,w
 14637  1740  0429               	iorwf	___fpclassifyf@e+1,w
 14638  1741  1D03               	btfss	3,2
 14639  1742  2F58               	goto	l4047
 14640  1743  082A               	movf	___fpclassifyf@u,w
 14641  1744  2776  3190         	fcall	PL84	;call to abstracted procedure
 14642  1746  35A4               	lslf	??___fpclassifyf,f
 14643  1747  0DA5               	rlf	??___fpclassifyf+1,f
 14644  1748  0DA6               	rlf	??___fpclassifyf+2,f
 14645  1749  0DA7               	rlf	??___fpclassifyf+3,f
 14646  174A  0827               	movf	??___fpclassifyf+3,w
 14647  174B  0426               	iorwf	??___fpclassifyf+2,w
 14648  174C  0425               	iorwf	??___fpclassifyf+1,w
 14649  174D  0424               	iorwf	??___fpclassifyf,w
 14650  174E  1D03               	skipz
 14651  174F  2F54               	goto	l4043
 14652  1750  3002               	movlw	2
 14653  1751  00A0               	movwf	?___fpclassifyf
 14654  1752  01A1               	clrf	?___fpclassifyf+1
 14655  1753  0008               	return
 14656  1754                     l4043:	
 14657  1754  3003               	movlw	3
 14658  1755  00A0               	movwf	?___fpclassifyf
 14659  1756  01A1               	clrf	?___fpclassifyf+1
 14660  1757  0008               	return
 14661  1758                     l4047:	
 14662  1758  0A28               	incf	___fpclassifyf@e,w
 14663  1759  0429               	iorwf	___fpclassifyf@e+1,w
 14664  175A  1D03               	btfss	3,2
 14665  175B  2F72               	goto	l4053
 14666  175C  082A               	movf	___fpclassifyf@u,w
 14667  175D  2776  3190         	fcall	PL84	;call to abstracted procedure
 14668  175F  3009               	movlw	9
 14669  1760                     u4195:	
 14670  1760  35A4               	lslf	??___fpclassifyf,f
 14671  1761  0DA5               	rlf	??___fpclassifyf+1,f
 14672  1762  0DA6               	rlf	??___fpclassifyf+2,f
 14673  1763  0DA7               	rlf	??___fpclassifyf+3,f
 14674  1764  0B89               	decfsz	9,f
 14675  1765  2F60               	goto	u4195
 14676  1766  0827               	movf	??___fpclassifyf+3,w
 14677  1767  0426               	iorwf	??___fpclassifyf+2,w
 14678  1768  0425               	iorwf	??___fpclassifyf+1,w
 14679  1769  0424               	iorwf	??___fpclassifyf,w
 14680  176A  1D03               	btfss	3,2
 14681  176B  2F6E               	goto	u4200
 14682  176C  3001               	movlw	1
 14683  176D  2F6F               	goto	u4210
 14684  176E                     u4200:	
 14685  176E  3000               	movlw	0
 14686  176F                     u4210:	
 14687  176F  00A0               	movwf	?___fpclassifyf
 14688  1770  01A1               	clrf	?___fpclassifyf+1
 14689  1771  0008               	return
 14690  1772                     l4053:	
 14691  1772  3004               	movlw	4
 14692  1773  00A0               	movwf	?___fpclassifyf
 14693  1774  01A1               	clrf	?___fpclassifyf+1
 14694  1775  0008               	return
 14695  1776                     __end_of___fpclassifyf:	
 14696  1776                     PL84:	
 14697  1776  00A4               	movwf	??___fpclassifyf
 14698  1777  082B               	movf	___fpclassifyf@u+1,w
 14699  1778  00A5               	movwf	??___fpclassifyf+1
 14700  1779  082C               	movf	___fpclassifyf@u+2,w
 14701  177A  00A6               	movwf	??___fpclassifyf+2
 14702  177B  082D               	movf	___fpclassifyf@u+3,w
 14703  177C  00A7               	movwf	??___fpclassifyf+3
 14704  177D  0008               	return
 14705  177E                     __end_ofPL84:	
 14706  177E                     __ptext31:	
 14707 ;; *************** function ___awdiv *****************
 14708 ;; Defined at:
 14709 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
 14710 ;; Parameters:    Size  Location     Type
 14711 ;;  divisor         2    0[BANK0 ] int 
 14712 ;;  dividend        2    2[BANK0 ] int 
 14713 ;; Auto vars:     Size  Location     Type
 14714 ;;  quotient        2    6[BANK0 ] int 
 14715 ;;  sign            1    5[BANK0 ] unsigned char 
 14716 ;;  counter         1    4[BANK0 ] unsigned char 
 14717 ;; Return value:  Size  Location     Type
 14718 ;;                  2    0[BANK0 ] int 
 14719 ;; Registers used:
 14720 ;;		wreg, status,2, status,0
 14721 ;; Tracked objects:
 14722 ;;		On entry : 3F/0
 14723 ;;		On exit  : 3F/0
 14724 ;;		Unchanged: 0/0
 14725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14726 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14727 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14729 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14730 ;;Total ram usage:        8 bytes
 14731 ;; Hardware stack levels used:    1
 14732 ;; Hardware stack levels required when called:    3
 14733 ;; This function calls:
 14734 ;;		Nothing
 14735 ;; This function is called by:
 14736 ;;		_efgtoa
 14737 ;; This function uses a non-reentrant model
 14738 ;;
 14739                           
 14740                           
 14741                           ;psect for function ___awdiv
 14742  177E                     ___awdiv:	
 14743                           
 14744                           ;incstack = 0
 14745                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14746  177E  01A5               	clrf	___awdiv@sign
 14747  177F  1FA1               	btfss	___awdiv@divisor+1,7
 14748  1780  2F88               	goto	l4199
 14749  1781  09A0               	comf	___awdiv@divisor,f
 14750  1782  09A1               	comf	___awdiv@divisor+1,f
 14751  1783  0AA0               	incf	___awdiv@divisor,f
 14752  1784  1903               	skipnz
 14753  1785  0AA1               	incf	___awdiv@divisor+1,f
 14754  1786  01A5               	clrf	___awdiv@sign
 14755  1787  0AA5               	incf	___awdiv@sign,f
 14756  1788                     l4199:	
 14757  1788  1FA3               	btfss	___awdiv@dividend+1,7
 14758  1789  2F91               	goto	l4205
 14759  178A  09A2               	comf	___awdiv@dividend,f
 14760  178B  09A3               	comf	___awdiv@dividend+1,f
 14761  178C  0AA2               	incf	___awdiv@dividend,f
 14762  178D  1903               	skipnz
 14763  178E  0AA3               	incf	___awdiv@dividend+1,f
 14764  178F  3001               	movlw	1
 14765  1790  06A5               	xorwf	___awdiv@sign,f
 14766  1791                     l4205:	
 14767  1791  01A6               	clrf	___awdiv@quotient
 14768  1792  01A7               	clrf	___awdiv@quotient+1
 14769  1793  0820               	movf	___awdiv@divisor,w
 14770  1794  0421               	iorwf	___awdiv@divisor+1,w
 14771  1795  1903               	btfsc	3,2
 14772  1796  2FB1               	goto	l4227
 14773  1797  01A4               	clrf	___awdiv@counter
 14774  1798                     L14:	
 14775  1798  0AA4               	incf	___awdiv@counter,f
 14776  1799  1BA1               	btfsc	___awdiv@divisor+1,7
 14777  179A  2F9E               	goto	l4215
 14778  179B  35A0               	lslf	___awdiv@divisor,f
 14779  179C  0DA1               	rlf	___awdiv@divisor+1,f
 14780  179D  2F98               	goto	L14
 14781  179E                     l4215:	
 14782  179E  35A6               	lslf	___awdiv@quotient,f
 14783  179F  0DA7               	rlf	___awdiv@quotient+1,f
 14784  17A0  0821               	movf	___awdiv@divisor+1,w
 14785  17A1  0223               	subwf	___awdiv@dividend+1,w
 14786  17A2  1D03               	skipz
 14787  17A3  2FA6               	goto	u4565
 14788  17A4  0820               	movf	___awdiv@divisor,w
 14789  17A5  0222               	subwf	___awdiv@dividend,w
 14790  17A6                     u4565:	
 14791  17A6  1C03               	skipc
 14792  17A7  2FAD               	goto	l4223
 14793  17A8  0820               	movf	___awdiv@divisor,w
 14794  17A9  02A2               	subwf	___awdiv@dividend,f
 14795  17AA  0821               	movf	___awdiv@divisor+1,w
 14796  17AB  3BA3               	subwfb	___awdiv@dividend+1,f
 14797  17AC  1426               	bsf	___awdiv@quotient,0
 14798  17AD                     l4223:	
 14799  17AD  36A1               	lsrf	___awdiv@divisor+1,f
 14800  17AE  0CA0               	rrf	___awdiv@divisor,f
 14801  17AF  0BA4               	decfsz	___awdiv@counter,f
 14802  17B0  2F9E               	goto	l4215
 14803  17B1                     l4227:	
 14804  17B1  0825               	movf	___awdiv@sign,w
 14805  17B2  1903               	btfsc	3,2
 14806  17B3  2FB9               	goto	l4231
 14807  17B4  09A6               	comf	___awdiv@quotient,f
 14808  17B5  09A7               	comf	___awdiv@quotient+1,f
 14809  17B6  0AA6               	incf	___awdiv@quotient,f
 14810  17B7  1903               	skipnz
 14811  17B8  0AA7               	incf	___awdiv@quotient+1,f
 14812  17B9                     l4231:	
 14813  17B9  0827               	movf	___awdiv@quotient+1,w
 14814  17BA  00A1               	movwf	?___awdiv+1
 14815  17BB  0826               	movf	___awdiv@quotient,w
 14816  17BC  00A0               	movwf	?___awdiv
 14817  17BD  0008               	return
 14818  17BE                     __end_of___awdiv:	
 14819  17BE                     __ptext30:	
 14820 ;; *************** function ___awmod *****************
 14821 ;; Defined at:
 14822 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
 14823 ;; Parameters:    Size  Location     Type
 14824 ;;  divisor         2    0[BANK0 ] int 
 14825 ;;  dividend        2    2[BANK0 ] int 
 14826 ;; Auto vars:     Size  Location     Type
 14827 ;;  sign            1    5[BANK0 ] unsigned char 
 14828 ;;  counter         1    4[BANK0 ] unsigned char 
 14829 ;; Return value:  Size  Location     Type
 14830 ;;                  2    0[BANK0 ] int 
 14831 ;; Registers used:
 14832 ;;		wreg, status,2, status,0
 14833 ;; Tracked objects:
 14834 ;;		On entry : 3F/0
 14835 ;;		On exit  : 3F/0
 14836 ;;		Unchanged: 0/0
 14837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14838 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14841 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14842 ;;Total ram usage:        6 bytes
 14843 ;; Hardware stack levels used:    1
 14844 ;; Hardware stack levels required when called:    3
 14845 ;; This function calls:
 14846 ;;		Nothing
 14847 ;; This function is called by:
 14848 ;;		_efgtoa
 14849 ;; This function uses a non-reentrant model
 14850 ;;
 14851                           
 14852                           
 14853                           ;psect for function ___awmod
 14854  17BE                     ___awmod:	
 14855                           
 14856                           ;incstack = 0
 14857                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 14858  17BE  01A5               	clrf	___awmod@sign
 14859  17BF  1FA3               	btfss	___awmod@dividend+1,7
 14860  17C0  2FC8               	goto	l4243
 14861  17C1  09A2               	comf	___awmod@dividend,f
 14862  17C2  09A3               	comf	___awmod@dividend+1,f
 14863  17C3  0AA2               	incf	___awmod@dividend,f
 14864  17C4  1903               	skipnz
 14865  17C5  0AA3               	incf	___awmod@dividend+1,f
 14866  17C6  01A5               	clrf	___awmod@sign
 14867  17C7  0AA5               	incf	___awmod@sign,f
 14868  17C8                     l4243:	
 14869  17C8  1FA1               	btfss	___awmod@divisor+1,7
 14870  17C9  2FCF               	goto	l4247
 14871  17CA  09A0               	comf	___awmod@divisor,f
 14872  17CB  09A1               	comf	___awmod@divisor+1,f
 14873  17CC  0AA0               	incf	___awmod@divisor,f
 14874  17CD  1903               	skipnz
 14875  17CE  0AA1               	incf	___awmod@divisor+1,f
 14876  17CF                     l4247:	
 14877  17CF  0820               	movf	___awmod@divisor,w
 14878  17D0  0421               	iorwf	___awmod@divisor+1,w
 14879  17D1  1903               	btfsc	3,2
 14880  17D2  2FEA               	goto	l4263
 14881  17D3  01A4               	clrf	___awmod@counter
 14882  17D4                     L13:	
 14883  17D4  0AA4               	incf	___awmod@counter,f
 14884  17D5  1BA1               	btfsc	___awmod@divisor+1,7
 14885  17D6  2FDA               	goto	l4255
 14886  17D7  35A0               	lslf	___awmod@divisor,f
 14887  17D8  0DA1               	rlf	___awmod@divisor+1,f
 14888  17D9  2FD4               	goto	L13
 14889  17DA                     l4255:	
 14890  17DA  0821               	movf	___awmod@divisor+1,w
 14891  17DB  0223               	subwf	___awmod@dividend+1,w
 14892  17DC  1D03               	skipz
 14893  17DD  2FE0               	goto	u4635
 14894  17DE  0820               	movf	___awmod@divisor,w
 14895  17DF  0222               	subwf	___awmod@dividend,w
 14896  17E0                     u4635:	
 14897  17E0  1C03               	skipc
 14898  17E1  2FE6               	goto	l4259
 14899  17E2  0820               	movf	___awmod@divisor,w
 14900  17E3  02A2               	subwf	___awmod@dividend,f
 14901  17E4  0821               	movf	___awmod@divisor+1,w
 14902  17E5  3BA3               	subwfb	___awmod@dividend+1,f
 14903  17E6                     l4259:	
 14904  17E6  36A1               	lsrf	___awmod@divisor+1,f
 14905  17E7  0CA0               	rrf	___awmod@divisor,f
 14906  17E8  0BA4               	decfsz	___awmod@counter,f
 14907  17E9  2FDA               	goto	l4255
 14908  17EA                     l4263:	
 14909  17EA  0825               	movf	___awmod@sign,w
 14910  17EB  1903               	btfsc	3,2
 14911  17EC  2FF2               	goto	l4267
 14912  17ED  09A2               	comf	___awmod@dividend,f
 14913  17EE  09A3               	comf	___awmod@dividend+1,f
 14914  17EF  0AA2               	incf	___awmod@dividend,f
 14915  17F0  1903               	skipnz
 14916  17F1  0AA3               	incf	___awmod@dividend+1,f
 14917  17F2                     l4267:	
 14918  17F2  0823               	movf	___awmod@dividend+1,w
 14919  17F3  00A1               	movwf	?___awmod+1
 14920  17F4  0822               	movf	___awmod@dividend,w
 14921  17F5  00A0               	movwf	?___awmod
 14922  17F6  0008               	return
 14923  17F7                     __end_of___awmod:	
 14924  17F7                     __ptext28:	
 14925 ;; *************** function ___flneg *****************
 14926 ;; Defined at:
 14927 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\flneg.c"
 14928 ;; Parameters:    Size  Location     Type
 14929 ;;  f1              4    0[BANK0 ] long 
 14930 ;; Auto vars:     Size  Location     Type
 14931 ;;		None
 14932 ;; Return value:  Size  Location     Type
 14933 ;;                  4    0[BANK0 ] long 
 14934 ;; Registers used:
 14935 ;;		wreg
 14936 ;; Tracked objects:
 14937 ;;		On entry : 3F/0
 14938 ;;		On exit  : 3F/0
 14939 ;;		Unchanged: 0/0
 14940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14941 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14944 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14945 ;;Total ram usage:        4 bytes
 14946 ;; Hardware stack levels used:    1
 14947 ;; Hardware stack levels required when called:    3
 14948 ;; This function calls:
 14949 ;;		Nothing
 14950 ;; This function is called by:
 14951 ;;		_efgtoa
 14952 ;; This function uses a non-reentrant model
 14953 ;;
 14954                           
 14955                           
 14956                           ;psect for function ___flneg
 14957  17F7                     ___flneg:	
 14958                           
 14959                           ;incstack = 0
 14960                           ; Regs used in ___flneg: [wreg]
 14961  17F7  0823               	movf	___flneg@f1+3,w
 14962  17F8  0422               	iorwf	___flneg@f1+2,w
 14963  17F9  0421               	iorwf	___flneg@f1+1,w
 14964  17FA  0420               	iorwf	___flneg@f1,w
 14965  17FB  1903               	skipnz
 14966  17FC  0008               	return
 14967  17FD  3080               	movlw	128
 14968  17FE  06A3               	xorwf	___flneg@f1+3,f
 14969  17FF  0008               	return
 14970  1800                     __end_of___flneg:	
 14971                           
 14972                           	psect	text22
 14973  0731                     __ptext22:	
 14974 ;; *************** function _isupper *****************
 14975 ;; Defined at:
 14976 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\isupper.c"
 14977 ;; Parameters:    Size  Location     Type
 14978 ;;  c               2    0[BANK0 ] int 
 14979 ;; Auto vars:     Size  Location     Type
 14980 ;;		None
 14981 ;; Return value:  Size  Location     Type
 14982 ;;                  2    0[BANK0 ] int 
 14983 ;; Registers used:
 14984 ;;		wreg, status,2, status,0
 14985 ;; Tracked objects:
 14986 ;;		On entry : 0/0
 14987 ;;		On exit  : 3F/0
 14988 ;;		Unchanged: 0/0
 14989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14994 ;;Total ram usage:        4 bytes
 14995 ;; Hardware stack levels used:    1
 14996 ;; Hardware stack levels required when called:    3
 14997 ;; This function calls:
 14998 ;;		Nothing
 14999 ;; This function is called by:
 15000 ;;		_efgtoa
 15001 ;;		_vfpfcnvrt
 15002 ;;		_tolower
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           
 15007                           ;psect for function _isupper
 15008  0731                     _isupper:	
 15009                           
 15010                           ;incstack = 0
 15011                           ; Regs used in _isupper: [wreg+status,2+status,0]
 15012  0731  0140               	movlb	0	; select bank0
 15013  0732  0820               	movf	isupper@c,w
 15014  0733  3EBF               	addlw	191
 15015  0734  00A2               	movwf	??_isupper
 15016  0735  30FF               	movlw	255
 15017  0736  3D21               	addwfc	isupper@c+1,w
 15018  0737  00A3               	movwf	??_isupper+1
 15019  0738  3000               	movlw	0
 15020  0739  0223               	subwf	??_isupper+1,w
 15021  073A  301A               	movlw	26
 15022  073B  1903               	skipnz
 15023  073C  0222               	subwf	??_isupper,w
 15024  073D  1803               	btfsc	3,0
 15025  073E  2F41               	goto	u3670
 15026  073F  3001               	movlw	1
 15027  0740  2F42               	goto	u3680
 15028  0741                     u3670:	
 15029  0741  3000               	movlw	0
 15030  0742                     u3680:	
 15031  0742  00A0               	movwf	?_isupper
 15032  0743  01A1               	clrf	?_isupper+1
 15033  0744  0008               	return
 15034  0745                     __end_of_isupper:	
 15035                           
 15036                           	psect	text24
 15037  0537                     __ptext24:	
 15038 ;; *************** function _floorf *****************
 15039 ;; Defined at:
 15040 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\floorf.c"
 15041 ;; Parameters:    Size  Location     Type
 15042 ;;  x               4   64[BANK0 ] float 
 15043 ;; Auto vars:     Size  Location     Type
 15044 ;;  u               4    6[BANK1 ] struct .
 15045 ;;  m               4    0[BANK1 ] unsigned long 
 15046 ;;  e               2    4[BANK1 ] int 
 15047 ;; Return value:  Size  Location     Type
 15048 ;;                  4   64[BANK0 ] float 
 15049 ;; Registers used:
 15050 ;;		wreg, status,2, status,0
 15051 ;; Tracked objects:
 15052 ;;		On entry : 3F/0
 15053 ;;		On exit  : 0/0
 15054 ;;		Unchanged: 0/0
 15055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15056 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15057 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15058 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15059 ;;      Totals:         0       8      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15060 ;;Total ram usage:       18 bytes
 15061 ;; Hardware stack levels used:    1
 15062 ;; Hardware stack levels required when called:    3
 15063 ;; This function calls:
 15064 ;;		Nothing
 15065 ;; This function is called by:
 15066 ;;		_efgtoa
 15067 ;; This function uses a non-reentrant model
 15068 ;;
 15069                           
 15070                           
 15071                           ;psect for function _floorf
 15072  0537                     _floorf:	
 15073                           
 15074                           ;incstack = 0
 15075                           ; Regs used in _floorf: [wreg+status,2+status,0]
 15076  0537  0143               	movlb	3	; select bank3
 15077  0538  0823               	movf	(floorf@F514+3)^(0+384),w
 15078  0539  0141               	movlb	1	; select bank1
 15079  053A  00A9               	movwf	(floorf@u+3)^(0+128)
 15080  053B  0143               	movlb	3	; select bank3
 15081  053C  0822               	movf	(floorf@F514+2)^(0+384),w
 15082  053D  0141               	movlb	1	; select bank1
 15083  053E  00A8               	movwf	(floorf@u+2)^(0+128)
 15084  053F  0143               	movlb	3	; select bank3
 15085  0540  0821               	movf	(floorf@F514+1)^(0+384),w
 15086  0541  0141               	movlb	1	; select bank1
 15087  0542  00A7               	movwf	(floorf@u+1)^(0+128)
 15088  0543  0143               	movlb	3	; select bank3
 15089  0544  0820               	movf	floorf@F514^(0+384),w
 15090  0545  0141               	movlb	1	; select bank1
 15091  0546  00A6               	movwf	floorf@u^(0+128)
 15092  0547  0140               	movlb	0	; select bank0
 15093  0548  0863               	movf	floorf@x+3,w
 15094  0549  0141               	movlb	1	; select bank1
 15095  054A  00A9               	movwf	(floorf@u+3)^(0+128)
 15096  054B  0140               	movlb	0	; select bank0
 15097  054C  0862               	movf	floorf@x+2,w
 15098  054D  0141               	movlb	1	; select bank1
 15099  054E  00A8               	movwf	(floorf@u+2)^(0+128)
 15100  054F  0140               	movlb	0	; select bank0
 15101  0550  0861               	movf	floorf@x+1,w
 15102  0551  0141               	movlb	1	; select bank1
 15103  0552  00A7               	movwf	(floorf@u+1)^(0+128)
 15104  0553  0140               	movlb	0	; select bank0
 15105  0554  0860               	movf	floorf@x,w
 15106  0555  0141               	movlb	1	; select bank1
 15107  0556  00A6               	movwf	floorf@u^(0+128)
 15108  0557  261F  3185         	fcall	PL12	;call to abstracted procedure
 15109  0559  0D66               	rlf	??_floorf+2,w
 15110  055A  0D67               	rlf	??_floorf+3,w
 15111  055B  00E4               	movwf	??_floorf
 15112  055C  01E5               	clrf	??_floorf+1
 15113  055D  01E6               	clrf	??_floorf+2
 15114  055E  01E7               	clrf	??_floorf+3
 15115  055F  0DE5               	rlf	??_floorf+1,f
 15116  0560  0865               	movf	??_floorf+1,w
 15117  0561  0141               	movlb	1	; select bank1
 15118  0562  00A5               	movwf	(floorf@e+1)^(0+128)
 15119  0563  0140               	movlb	0	; select bank0
 15120  0564  0864               	movf	??_floorf,w
 15121  0565  0141               	movlb	1	; select bank1
 15122  0566  00A4               	movwf	floorf@e^(0+128)
 15123  0567  3081               	movlw	-127
 15124  0568  01A5               	clrf	(floorf@e+1)^(0+128)
 15125  0569  07A4               	addwf	floorf@e^(0+128),f
 15126  056A  1C03               	skipc
 15127  056B  03A5               	decf	(floorf@e+1)^(0+128),f
 15128  056C  0825               	movf	(floorf@e+1)^(0+128),w
 15129  056D  3A80               	xorlw	128
 15130  056E  0140               	movlb	0	; select bank0
 15131  056F  00E4               	movwf	??_floorf
 15132  0570  3080               	movlw	128
 15133  0571  0264               	subwf	??_floorf,w
 15134  0572  1D03               	skipz
 15135  0573  2D77               	goto	u4255
 15136  0574  3017               	movlw	23
 15137  0575  0141               	movlb	1	; select bank1
 15138  0576  0224               	subwf	floorf@e^(0+128),w
 15139  0577                     u4255:	
 15140  0577  1803               	btfsc	3,0
 15141  0578  0008               	return
 15142  0579  0141               	movlb	1	; select bank1
 15143  057A  1BA5               	btfsc	(floorf@e+1)^(0+128),7
 15144  057B  2DE8               	goto	l4089
 15145  057C  30FF               	movlw	255
 15146  057D  0140               	movlb	0	; select bank0
 15147  057E  00E4               	movwf	??_floorf
 15148  057F  00E5               	movwf	??_floorf+1
 15149  0580  307F               	movlw	127
 15150  0581  00E6               	movwf	??_floorf+2
 15151  0582  01E7               	clrf	??_floorf+3
 15152  0583  0141               	movlb	1	; select bank1
 15153  0584  0A24               	incf	floorf@e^(0+128),w
 15154  0585  0140               	movlb	0	; select bank0
 15155  0586  2D8B               	goto	u4270
 15156  0587                     u4275:	
 15157  0587  37E7               	asrf	??_floorf+3,f
 15158  0588  0CE6               	rrf	??_floorf+2,f
 15159  0589  0CE5               	rrf	??_floorf+1,f
 15160  058A  0CE4               	rrf	??_floorf,f
 15161  058B                     u4270:	
 15162  058B  0B89               	decfsz	9,f
 15163  058C  2D87               	goto	u4275
 15164  058D  0867               	movf	??_floorf+3,w
 15165  058E  0141               	movlb	1	; select bank1
 15166  058F  00A3               	movwf	(floorf@m+3)^(0+128)
 15167  0590  0140               	movlb	0	; select bank0
 15168  0591  0866               	movf	??_floorf+2,w
 15169  0592  0141               	movlb	1	; select bank1
 15170  0593  00A2               	movwf	(floorf@m+2)^(0+128)
 15171  0594  0140               	movlb	0	; select bank0
 15172  0595  0865               	movf	??_floorf+1,w
 15173  0596  0141               	movlb	1	; select bank1
 15174  0597  00A1               	movwf	(floorf@m+1)^(0+128)
 15175  0598  0140               	movlb	0	; select bank0
 15176  0599  0864               	movf	??_floorf,w
 15177  059A  0141               	movlb	1	; select bank1
 15178  059B  00A0               	movwf	floorf@m^(0+128)
 15179  059C  0526               	andwf	floorf@u^(0+128),w
 15180  059D  0140               	movlb	0	; select bank0
 15181  059E  00E4               	movwf	??_floorf
 15182  059F  0141               	movlb	1	; select bank1
 15183  05A0  0827               	movf	(floorf@u+1)^(0+128),w
 15184  05A1  0521               	andwf	(floorf@m+1)^(0+128),w
 15185  05A2  0140               	movlb	0	; select bank0
 15186  05A3  00E5               	movwf	??_floorf+1
 15187  05A4  0141               	movlb	1	; select bank1
 15188  05A5  0828               	movf	(floorf@u+2)^(0+128),w
 15189  05A6  0522               	andwf	(floorf@m+2)^(0+128),w
 15190  05A7  0140               	movlb	0	; select bank0
 15191  05A8  00E6               	movwf	??_floorf+2
 15192  05A9  0141               	movlb	1	; select bank1
 15193  05AA  0829               	movf	(floorf@u+3)^(0+128),w
 15194  05AB  0523               	andwf	(floorf@m+3)^(0+128),w
 15195  05AC  0140               	movlb	0	; select bank0
 15196  05AD  00E7               	movwf	??_floorf+3
 15197  05AE  0466               	iorwf	??_floorf+2,w
 15198  05AF  0465               	iorwf	??_floorf+1,w
 15199  05B0  0464               	iorwf	??_floorf,w
 15200  05B1  1903               	btfsc	3,2
 15201  05B2  0008               	return
 15202  05B3  0141               	movlb	1	; select bank1
 15203  05B4  0826               	movf	floorf@u^(0+128),w
 15204  05B5  261F  3185         	fcall	PL12	;call to abstracted procedure
 15205  05B7  301F               	movlw	31
 15206  05B8                     u4295:	
 15207  05B8  262E  3185         	fcall	PL196	;call to abstracted procedure
 15208  05BA  0B89               	decfsz	9,f
 15209  05BB  2DB8               	goto	u4295
 15210  05BC  0864               	movf	??_floorf,w
 15211  05BD  1903               	btfsc	3,2
 15212  05BE  2DC8               	goto	l4087
 15213  05BF  0141               	movlb	1	; select bank1
 15214  05C0  0820               	movf	floorf@m^(0+128),w
 15215  05C1  07A6               	addwf	floorf@u^(0+128),f
 15216  05C2  0821               	movf	(floorf@m+1)^(0+128),w
 15217  05C3  3DA7               	addwfc	(floorf@u+1)^(0+128),f
 15218  05C4  0822               	movf	(floorf@m+2)^(0+128),w
 15219  05C5  3DA8               	addwfc	(floorf@u+2)^(0+128),f
 15220  05C6  0823               	movf	(floorf@m+3)^(0+128),w
 15221  05C7  3DA9               	addwfc	(floorf@u+3)^(0+128),f
 15222  05C8                     l4087:	
 15223  05C8  0141               	movlb	1	; select bank1
 15224  05C9  0920               	comf	floorf@m^(0+128),w
 15225  05CA  0140               	movlb	0	; select bank0
 15226  05CB  00E4               	movwf	??_floorf
 15227  05CC  0141               	movlb	1	; select bank1
 15228  05CD  0921               	comf	(floorf@m+1)^(0+128),w
 15229  05CE  0140               	movlb	0	; select bank0
 15230  05CF  00E5               	movwf	??_floorf+1
 15231  05D0  0141               	movlb	1	; select bank1
 15232  05D1  0922               	comf	(floorf@m+2)^(0+128),w
 15233  05D2  0140               	movlb	0	; select bank0
 15234  05D3  00E6               	movwf	??_floorf+2
 15235  05D4  0141               	movlb	1	; select bank1
 15236  05D5  0923               	comf	(floorf@m+3)^(0+128),w
 15237  05D6  0140               	movlb	0	; select bank0
 15238  05D7  00E7               	movwf	??_floorf+3
 15239  05D8  0864               	movf	??_floorf,w
 15240  05D9  0141               	movlb	1	; select bank1
 15241  05DA  05A6               	andwf	floorf@u^(0+128),f
 15242  05DB  0140               	movlb	0	; select bank0
 15243  05DC  0865               	movf	??_floorf+1,w
 15244  05DD  0141               	movlb	1	; select bank1
 15245  05DE  05A7               	andwf	(floorf@u+1)^(0+128),f
 15246  05DF  0140               	movlb	0	; select bank0
 15247  05E0  0866               	movf	??_floorf+2,w
 15248  05E1  0141               	movlb	1	; select bank1
 15249  05E2  05A8               	andwf	(floorf@u+2)^(0+128),f
 15250  05E3  0140               	movlb	0	; select bank0
 15251  05E4  0867               	movf	??_floorf+3,w
 15252  05E5  0141               	movlb	1	; select bank1
 15253  05E6  05A9               	andwf	(floorf@u+3)^(0+128),f
 15254  05E7  2E0E               	goto	l1261
 15255  05E8                     l4089:	
 15256  05E8  0826               	movf	floorf@u^(0+128),w
 15257  05E9  261F  3185         	fcall	PL12	;call to abstracted procedure
 15258  05EB  301F               	movlw	31
 15259  05EC                     u4315:	
 15260  05EC  262E  3185         	fcall	PL196	;call to abstracted procedure
 15261  05EE  0B89               	decfsz	9,f
 15262  05EF  2DEC               	goto	u4315
 15263  05F0  0864               	movf	??_floorf,w
 15264  05F1  1D03               	btfss	3,2
 15265  05F2  2DF9               	goto	l4093
 15266  05F3  0141               	movlb	1	; select bank1
 15267  05F4  01A6               	clrf	floorf@u^(0+128)
 15268  05F5  01A7               	clrf	(floorf@u+1)^(0+128)
 15269  05F6  01A8               	clrf	(floorf@u+2)^(0+128)
 15270  05F7  01A9               	clrf	(floorf@u+3)^(0+128)
 15271  05F8  2E0E               	goto	l1261
 15272  05F9                     l4093:	
 15273  05F9  0141               	movlb	1	; select bank1
 15274  05FA  0826               	movf	floorf@u^(0+128),w
 15275  05FB  261F  3185         	fcall	PL12	;call to abstracted procedure
 15276  05FD  35E4               	lslf	??_floorf,f
 15277  05FE  0DE5               	rlf	??_floorf+1,f
 15278  05FF  0DE6               	rlf	??_floorf+2,f
 15279  0600  0DE7               	rlf	??_floorf+3,f
 15280  0601  0867               	movf	??_floorf+3,w
 15281  0602  0466               	iorwf	??_floorf+2,w
 15282  0603  0465               	iorwf	??_floorf+1,w
 15283  0604  0464               	iorwf	??_floorf,w
 15284  0605  1903               	skipnz
 15285  0606  2E0E               	goto	l1261
 15286  0607  30BF               	movlw	191
 15287  0608  0141               	movlb	1	; select bank1
 15288  0609  00A9               	movwf	(floorf@u+3)^(0+128)
 15289  060A  3080               	movlw	128
 15290  060B  00A8               	movwf	(floorf@u+2)^(0+128)
 15291  060C  01A7               	clrf	(floorf@u+1)^(0+128)
 15292  060D  01A6               	clrf	floorf@u^(0+128)
 15293  060E                     l1261:	
 15294  060E  0141               	movlb	1	; select bank1
 15295  060F  0829               	movf	(floorf@u+3)^(0+128),w
 15296  0610  0140               	movlb	0	; select bank0
 15297  0611  00E3               	movwf	?_floorf+3
 15298  0612  0141               	movlb	1	; select bank1
 15299  0613  0828               	movf	(floorf@u+2)^(0+128),w
 15300  0614  0140               	movlb	0	; select bank0
 15301  0615  00E2               	movwf	?_floorf+2
 15302  0616  0141               	movlb	1	; select bank1
 15303  0617  0827               	movf	(floorf@u+1)^(0+128),w
 15304  0618  0140               	movlb	0	; select bank0
 15305  0619  00E1               	movwf	?_floorf+1
 15306  061A  0141               	movlb	1	; select bank1
 15307  061B  0826               	movf	floorf@u^(0+128),w
 15308  061C  0140               	movlb	0	; select bank0
 15309  061D  00E0               	movwf	?_floorf
 15310  061E  0008               	return
 15311  061F                     __end_of_floorf:	
 15312  061F                     PL12:	
 15313  061F  0140               	movlb	0	; select bank0
 15314  0620  00E4               	movwf	??_floorf
 15315  0621  0141               	movlb	1	; select bank1
 15316  0622  0827               	movf	(floorf@u+1)^(0+128),w
 15317  0623  0140               	movlb	0	; select bank0
 15318  0624  00E5               	movwf	??_floorf+1
 15319  0625  0141               	movlb	1	; select bank1
 15320  0626  0828               	movf	(floorf@u+2)^(0+128),w
 15321  0627  0140               	movlb	0	; select bank0
 15322  0628  00E6               	movwf	??_floorf+2
 15323  0629  0141               	movlb	1	; select bank1
 15324  062A  0829               	movf	(floorf@u+3)^(0+128),w
 15325  062B  0140               	movlb	0	; select bank0
 15326  062C  00E7               	movwf	??_floorf+3
 15327  062D  0008               	return
 15328  062E                     __end_ofPL12:	
 15329  062E                     PL196:	
 15330  062E  36E7               	lsrf	??_floorf+3,f
 15331  062F  0CE6               	rrf	??_floorf+2,f
 15332  0630  0CE5               	rrf	??_floorf+1,f
 15333  0631  0CE4               	rrf	??_floorf,f
 15334  0632  0008               	return
 15335  0633                     __end_ofPL196:	
 15336                           
 15337                           	psect	text32
 15338  0301                     __ptext32:	
 15339 ;; *************** function _dtoa *****************
 15340 ;; Defined at:
 15341 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;  fp              1    wreg     PTR struct _IO_FILE
 15344 ;;		 -> sprintf@f(6), 
 15345 ;;  d               4   23[BANK0 ] long 
 15346 ;; Auto vars:     Size  Location     Type
 15347 ;;  fp              1   30[BANK0 ] PTR struct _IO_FILE
 15348 ;;		 -> sprintf@f(6), 
 15349 ;;  n               4   37[BANK0 ] long 
 15350 ;;  i               2   41[BANK0 ] int 
 15351 ;;  s               2   35[BANK0 ] int 
 15352 ;;  w               2   33[BANK0 ] int 
 15353 ;;  p               2   31[BANK0 ] int 
 15354 ;; Return value:  Size  Location     Type
 15355 ;;                  2   23[BANK0 ] int 
 15356 ;; Registers used:
 15357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15358 ;; Tracked objects:
 15359 ;;		On entry : 3F/2
 15360 ;;		On exit  : 3F/0
 15361 ;;		Unchanged: 0/0
 15362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15363 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15364 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15366 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15367 ;;Total ram usage:       20 bytes
 15368 ;; Hardware stack levels used:    1
 15369 ;; Hardware stack levels required when called:    7
 15370 ;; This function calls:
 15371 ;;		___aldiv
 15372 ;;		___almod
 15373 ;;		_abs
 15374 ;;		_pad
 15375 ;; This function is called by:
 15376 ;;		_vfpfcnvrt
 15377 ;; This function uses a non-reentrant model
 15378 ;;
 15379                           
 15380                           
 15381                           ;psect for function _dtoa
 15382  0301                     _dtoa:	
 15383                           
 15384                           ;incstack = 0
 15385                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15386                           ;dtoa@fp stored from wreg
 15387  0301  0140               	movlb	0	; select bank0
 15388  0302  00BE               	movwf	dtoa@fp
 15389                           
 15390                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.00\pic\sources\c99\common\doprnt.c: 280:     n = d;
 15391  0303  083A               	movf	dtoa@d+3,w
 15392  0304  00C8               	movwf	dtoa@n+3
 15393  0305  0839               	movf	dtoa@d+2,w
 15394  0306  00C7               	movwf	dtoa@n+2
 15395  0307  0838               	movf	dtoa@d+1,w
 15396  0308  00C6               	movwf	dtoa@n+1
 15397  0309  0837               	movf	dtoa@d,w
 15398  030A  00C5               	movwf	dtoa@n
 15399                           
 15400                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 15401  030B  1FC8               	btfss	dtoa@n+3,7
 15402  030C  2B0F               	goto	u5270
 15403  030D  3001               	movlw	1
 15404  030E  2B10               	goto	u5280
 15405  030F                     u5270:	
 15406  030F  3000               	movlw	0
 15407  0310                     u5280:	
 15408  0310  00C3               	movwf	dtoa@s
 15409  0311  01C4               	clrf	dtoa@s+1
 15410                           
 15411                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 15412  0312  0444               	iorwf	dtoa@s+1,w
 15413  0313  1903               	btfsc	3,2
 15414  0314  2B20               	goto	l585
 15415                           
 15416                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 15417  0315  09C5               	comf	dtoa@n,f
 15418  0316  09C6               	comf	dtoa@n+1,f
 15419  0317  09C7               	comf	dtoa@n+2,f
 15420  0318  09C8               	comf	dtoa@n+3,f
 15421  0319  0AC5               	incf	dtoa@n,f
 15422  031A  1903               	skipnz
 15423  031B  0AC6               	incf	dtoa@n+1,f
 15424  031C  1903               	skipnz
 15425  031D  0AC7               	incf	dtoa@n+2,f
 15426  031E  1903               	skipnz
 15427  031F  0AC8               	incf	dtoa@n+3,f
 15428  0320                     l585:	
 15429                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 284:     }
 15430                           
 15431                           
 15432                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 15433  0320  1BFC               	btfsc	_prec+1,7
 15434  0321  2B24               	goto	l4657
 15435                           
 15436                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 15437  0322  0142               	movlb	2	; select bank2
 15438  0323  10EE               	bcf	_flags^(0+256),1
 15439  0324                     l4657:	
 15440                           
 15441                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 15442  0324  087C               	movf	_prec+1,w
 15443  0325  3A80               	xorlw	128
 15444  0326  0140               	movlb	0	; select bank0
 15445  0327  00BB               	movwf	??_dtoa
 15446  0328  3080               	movlw	128
 15447  0329  023B               	subwf	??_dtoa,w
 15448  032A  1D03               	skipz
 15449  032B  2B2E               	goto	u5315
 15450  032C  3001               	movlw	1
 15451  032D  027B               	subwf	_prec,w
 15452  032E                     u5315:	
 15453  032E  1803               	skipnc
 15454  032F  2B35               	goto	l4661
 15455  0330  0140               	movlb	0	; select bank0
 15456  0331  01BF               	clrf	dtoa@p
 15457  0332  0ABF               	incf	dtoa@p,f
 15458  0333  01C0               	clrf	dtoa@p+1
 15459  0334  2B3A               	goto	l590
 15460  0335                     l4661:	
 15461  0335  087C               	movf	_prec+1,w
 15462  0336  0140               	movlb	0	; select bank0
 15463  0337  00C0               	movwf	dtoa@p+1
 15464  0338  087B               	movf	_prec,w
 15465  0339  00BF               	movwf	dtoa@p
 15466  033A                     l590:	
 15467                           
 15468                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 15469  033A  0143               	movlb	3	; select bank3
 15470  033B  0837               	movf	(_width+1)^(0+384),w
 15471  033C  0140               	movlb	0	; select bank0
 15472  033D  00C2               	movwf	dtoa@w+1
 15473  033E  0143               	movlb	3	; select bank3
 15474  033F  0836               	movf	_width^(0+384),w
 15475  0340  0140               	movlb	0	; select bank0
 15476  0341  00C1               	movwf	dtoa@w
 15477                           
 15478                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 15479  0342  0843               	movf	dtoa@s,w
 15480  0343  0444               	iorwf	dtoa@s+1,w
 15481  0344  1D03               	btfss	3,2
 15482  0345  2B49               	goto	l4667
 15483  0346  0142               	movlb	2	; select bank2
 15484  0347  1D6E               	btfss	_flags^(0+256),2
 15485  0348  2B4E               	goto	l4669
 15486  0349                     l4667:	
 15487                           
 15488                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 15489  0349  30FF               	movlw	-1
 15490  034A  0140               	movlb	0	; select bank0
 15491  034B  07C1               	addwf	dtoa@w,f
 15492  034C  1C03               	skipc
 15493  034D  03C2               	decf	dtoa@w+1,f
 15494  034E                     l4669:	
 15495                           
 15496                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 15497  034E  304F               	movlw	79
 15498  034F  0140               	movlb	0	; select bank0
 15499  0350  00C9               	movwf	dtoa@i
 15500  0351  01CA               	clrf	dtoa@i+1
 15501                           
 15502                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 15503  0352  0145               	movlb	5	; select bank5
 15504  0353  01EF               	clrf	(_dbuf^(0+640)+79)
 15505                           
 15506                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 15507  0354  2BB4               	goto	l4683
 15508  0355                     l4685:	
 15509  0355  0140               	movlb	0	; select bank0
 15510  0356  0848               	movf	dtoa@n+3,w
 15511  0357  0447               	iorwf	dtoa@n+2,w
 15512  0358  0446               	iorwf	dtoa@n+1,w
 15513  0359  0445               	iorwf	dtoa@n,w
 15514  035A  1D03               	skipz
 15515  035B  2B76               	goto	l4673
 15516  035C  0840               	movf	dtoa@p+1,w
 15517  035D  3A80               	xorlw	128
 15518  035E  00BB               	movwf	??_dtoa
 15519  035F  3080               	movlw	128
 15520  0360  023B               	subwf	??_dtoa,w
 15521  0361  1D03               	skipz
 15522  0362  2B65               	goto	u5365
 15523  0363  3001               	movlw	1
 15524  0364  023F               	subwf	dtoa@p,w
 15525  0365                     u5365:	
 15526  0365  1803               	skipnc
 15527  0366  2B76               	goto	l4673
 15528  0367  0140               	movlb	0	; select bank0
 15529  0368  0842               	movf	dtoa@w+1,w
 15530  0369  3A80               	xorlw	128
 15531  036A  00BB               	movwf	??_dtoa
 15532  036B  3080               	movlw	128
 15533  036C  023B               	subwf	??_dtoa,w
 15534  036D  1D03               	skipz
 15535  036E  2B71               	goto	u5375
 15536  036F  3001               	movlw	1
 15537  0370  0241               	subwf	dtoa@w,w
 15538  0371                     u5375:	
 15539  0371  1C03               	skipc
 15540  0372  2BC0               	goto	l4693
 15541  0373  0142               	movlb	2	; select bank2
 15542  0374  1CEE               	btfss	_flags^(0+256),1
 15543  0375  2BC0               	goto	l4693
 15544  0376                     l4673:	
 15545                           
 15546                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 15547  0376  30FF               	movlw	-1
 15548  0377  0140               	movlb	0	; select bank0
 15549  0378  07C9               	addwf	dtoa@i,f
 15550  0379  1C03               	skipc
 15551  037A  03CA               	decf	dtoa@i+1,f
 15552                           
 15553                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 15554  037B  2526  3183         	fcall	PL176	;call to abstracted procedure
 15555  037D  300A               	movlw	10
 15556  037E  00A0               	movwf	___almod@divisor
 15557  037F  01A1               	clrf	___almod@divisor+1
 15558  0380  01A2               	clrf	___almod@divisor+2
 15559  0381  01A3               	clrf	___almod@divisor+3
 15560  0382  0848               	movf	dtoa@n+3,w
 15561  0383  00A7               	movwf	___almod@dividend+3
 15562  0384  0847               	movf	dtoa@n+2,w
 15563  0385  00A6               	movwf	___almod@dividend+2
 15564  0386  0846               	movf	dtoa@n+1,w
 15565  0387  00A5               	movwf	___almod@dividend+1
 15566  0388  0845               	movf	dtoa@n,w
 15567  0389  00A4               	movwf	___almod@dividend
 15568  038A  2455  3183         	fcall	___almod
 15569  038C  0821               	movf	?___almod+1,w
 15570  038D  00AB               	movwf	abs@a+1
 15571  038E  0820               	movf	?___almod,w
 15572  038F  00AA               	movwf	abs@a
 15573  0390  24AF  3183         	fcall	_abs
 15574  0392  0140               	movlb	0	; select bank0
 15575  0393  082A               	movf	?_abs,w
 15576  0394  3E30               	addlw	48
 15577  0395  0081               	movwf	1
 15578                           
 15579                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 15580  0396  30FF               	movlw	-1
 15581  0397  07BF               	addwf	dtoa@p,f
 15582  0398  1C03               	skipc
 15583  0399  03C0               	decf	dtoa@p+1,f
 15584                           
 15585                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 15586  039A  07C1               	addwf	dtoa@w,f
 15587  039B  1C03               	skipc
 15588  039C  03C2               	decf	dtoa@w+1,f
 15589                           
 15590                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 15591  039D  300A               	movlw	10
 15592  039E  00A0               	movwf	___aldiv@divisor
 15593  039F  01A1               	clrf	___aldiv@divisor+1
 15594  03A0  01A2               	clrf	___aldiv@divisor+2
 15595  03A1  01A3               	clrf	___aldiv@divisor+3
 15596  03A2  0848               	movf	dtoa@n+3,w
 15597  03A3  00A7               	movwf	___aldiv@dividend+3
 15598  03A4  0847               	movf	dtoa@n+2,w
 15599  03A5  00A6               	movwf	___aldiv@dividend+2
 15600  03A6  0846               	movf	dtoa@n+1,w
 15601  03A7  00A5               	movwf	___aldiv@dividend+1
 15602  03A8  0845               	movf	dtoa@n,w
 15603  03A9  00A4               	movwf	___aldiv@dividend
 15604  03AA  23E9  3183         	fcall	___aldiv
 15605  03AC  0823               	movf	?___aldiv+3,w
 15606  03AD  00C8               	movwf	dtoa@n+3
 15607  03AE  0822               	movf	?___aldiv+2,w
 15608  03AF  00C7               	movwf	dtoa@n+2
 15609  03B0  0821               	movf	?___aldiv+1,w
 15610  03B1  00C6               	movwf	dtoa@n+1
 15611  03B2  0820               	movf	?___aldiv,w
 15612  03B3  00C5               	movwf	dtoa@n
 15613  03B4                     l4683:	
 15614                           
 15615                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 15616  03B4  0140               	movlb	0	; select bank0
 15617  03B5  084A               	movf	dtoa@i+1,w
 15618  03B6  3A80               	xorlw	128
 15619  03B7  00BB               	movwf	??_dtoa
 15620  03B8  3080               	movlw	128
 15621  03B9  023B               	subwf	??_dtoa,w
 15622  03BA  1D03               	skipz
 15623  03BB  2BBE               	goto	u5345
 15624  03BC  3001               	movlw	1
 15625  03BD  0249               	subwf	dtoa@i,w
 15626  03BE                     u5345:	
 15627  03BE  1803               	btfsc	3,0
 15628  03BF  2B55               	goto	l4685
 15629  03C0                     l4693:	
 15630                           
 15631                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 15632  03C0  0140               	movlb	0	; select bank0
 15633  03C1  0843               	movf	dtoa@s,w
 15634  03C2  0444               	iorwf	dtoa@s+1,w
 15635  03C3  1D03               	btfss	3,2
 15636  03C4  2BC8               	goto	l4697
 15637  03C5  0142               	movlb	2	; select bank2
 15638  03C6  1D6E               	btfss	_flags^(0+256),2
 15639  03C7  2BDA               	goto	l4705
 15640  03C8                     l4697:	
 15641                           
 15642                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 15643  03C8  30FF               	movlw	-1
 15644  03C9  0140               	movlb	0	; select bank0
 15645  03CA  07C9               	addwf	dtoa@i,f
 15646  03CB  1C03               	skipc
 15647  03CC  03CA               	decf	dtoa@i+1,f
 15648                           
 15649                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 15650  03CD  0843               	movf	dtoa@s,w
 15651  03CE  0444               	iorwf	dtoa@s+1,w
 15652  03CF  1D03               	btfss	3,2
 15653  03D0  2BD3               	goto	l4701
 15654  03D1  302B               	movlw	43
 15655  03D2  2BD4               	goto	L15
 15656  03D3                     l4701:	
 15657  03D3  302D               	movlw	45
 15658  03D4                     L15:	
 15659  03D4  00BC               	movwf	_dtoa$1274
 15660  03D5  01BD               	clrf	_dtoa$1274+1
 15661  03D6  2526  3183         	fcall	PL176	;call to abstracted procedure
 15662  03D8  083C               	movf	_dtoa$1274,w
 15663  03D9  0081               	movwf	1
 15664  03DA                     l4705:	
 15665                           
 15666                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 15667  03DA  0140               	movlb	0	; select bank0
 15668  03DB  0849               	movf	dtoa@i,w
 15669  03DC  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 15670  03DD  00AE               	movwf	pad@buf
 15671  03DE  0842               	movf	dtoa@w+1,w
 15672  03DF  00B0               	movwf	pad@p+1
 15673  03E0  0841               	movf	dtoa@w,w
 15674  03E1  00AF               	movwf	pad@p
 15675  03E2  083E               	movf	dtoa@fp,w
 15676  03E3  24C7               	fcall	_pad
 15677  03E4  082F               	movf	?_pad+1,w
 15678  03E5  00B8               	movwf	?_dtoa+1
 15679  03E6  082E               	movf	?_pad,w
 15680  03E7  00B7               	movwf	?_dtoa
 15681  03E8  0008               	return
 15682  03E9                     __end_of_dtoa:	
 15683  03E9                     __ptext40:	
 15684 ;; *************** function ___aldiv *****************
 15685 ;; Defined at:
 15686 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aldiv.c"
 15687 ;; Parameters:    Size  Location     Type
 15688 ;;  divisor         4    0[BANK0 ] long 
 15689 ;;  dividend        4    4[BANK0 ] long 
 15690 ;; Auto vars:     Size  Location     Type
 15691 ;;  quotient        4   10[BANK0 ] long 
 15692 ;;  sign            1    9[BANK0 ] unsigned char 
 15693 ;;  counter         1    8[BANK0 ] unsigned char 
 15694 ;; Return value:  Size  Location     Type
 15695 ;;                  4    0[BANK0 ] long 
 15696 ;; Registers used:
 15697 ;;		wreg, status,2, status,0
 15698 ;; Tracked objects:
 15699 ;;		On entry : 3F/0
 15700 ;;		On exit  : 3F/0
 15701 ;;		Unchanged: 0/0
 15702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15703 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15704 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15706 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15707 ;;Total ram usage:       14 bytes
 15708 ;; Hardware stack levels used:    1
 15709 ;; Hardware stack levels required when called:    3
 15710 ;; This function calls:
 15711 ;;		Nothing
 15712 ;; This function is called by:
 15713 ;;		_dtoa
 15714 ;; This function uses a non-reentrant model
 15715 ;;
 15716                           
 15717                           
 15718                           ;psect for function ___aldiv
 15719  03E9                     ___aldiv:	
 15720                           
 15721                           ;incstack = 0
 15722                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 15723  03E9  01A9               	clrf	___aldiv@sign
 15724  03EA  1FA3               	btfss	___aldiv@divisor+3,7
 15725  03EB  2BF9               	goto	l836
 15726  03EC  09A0               	comf	___aldiv@divisor,f
 15727  03ED  09A1               	comf	___aldiv@divisor+1,f
 15728  03EE  09A2               	comf	___aldiv@divisor+2,f
 15729  03EF  09A3               	comf	___aldiv@divisor+3,f
 15730  03F0  0AA0               	incf	___aldiv@divisor,f
 15731  03F1  1903               	skipnz
 15732  03F2  0AA1               	incf	___aldiv@divisor+1,f
 15733  03F3  1903               	skipnz
 15734  03F4  0AA2               	incf	___aldiv@divisor+2,f
 15735  03F5  1903               	skipnz
 15736  03F6  0AA3               	incf	___aldiv@divisor+3,f
 15737  03F7  01A9               	clrf	___aldiv@sign
 15738  03F8  0AA9               	incf	___aldiv@sign,f
 15739  03F9                     l836:	
 15740  03F9  1FA7               	btfss	___aldiv@dividend+3,7
 15741  03FA  2C08               	goto	l4129
 15742  03FB  09A4               	comf	___aldiv@dividend,f
 15743  03FC  09A5               	comf	___aldiv@dividend+1,f
 15744  03FD  09A6               	comf	___aldiv@dividend+2,f
 15745  03FE  09A7               	comf	___aldiv@dividend+3,f
 15746  03FF  0AA4               	incf	___aldiv@dividend,f
 15747  0400  1903               	skipnz
 15748  0401  0AA5               	incf	___aldiv@dividend+1,f
 15749  0402  1903               	skipnz
 15750  0403  0AA6               	incf	___aldiv@dividend+2,f
 15751  0404  1903               	skipnz
 15752  0405  0AA7               	incf	___aldiv@dividend+3,f
 15753  0406  3001               	movlw	1
 15754  0407  06A9               	xorwf	___aldiv@sign,f
 15755  0408                     l4129:	
 15756  0408  01AA               	clrf	___aldiv@quotient
 15757  0409  01AB               	clrf	___aldiv@quotient+1
 15758  040A  01AC               	clrf	___aldiv@quotient+2
 15759  040B  01AD               	clrf	___aldiv@quotient+3
 15760  040C  0823               	movf	___aldiv@divisor+3,w
 15761  040D  0422               	iorwf	___aldiv@divisor+2,w
 15762  040E  0421               	iorwf	___aldiv@divisor+1,w
 15763  040F  0420               	iorwf	___aldiv@divisor,w
 15764  0410  1903               	skipnz
 15765  0411  2C3E               	goto	l4151
 15766  0412  01A8               	clrf	___aldiv@counter
 15767  0413                     L17:	
 15768  0413  0AA8               	incf	___aldiv@counter,f
 15769  0414  1BA3               	btfsc	___aldiv@divisor+3,7
 15770  0415  2C1B               	goto	l4139
 15771  0416  35A0               	lslf	___aldiv@divisor,f
 15772  0417  0DA1               	rlf	___aldiv@divisor+1,f
 15773  0418  0DA2               	rlf	___aldiv@divisor+2,f
 15774  0419  0DA3               	rlf	___aldiv@divisor+3,f
 15775  041A  2C13               	goto	L17
 15776  041B                     l4139:	
 15777  041B  35AA               	lslf	___aldiv@quotient,f
 15778  041C  0DAB               	rlf	___aldiv@quotient+1,f
 15779  041D  0DAC               	rlf	___aldiv@quotient+2,f
 15780  041E  0DAD               	rlf	___aldiv@quotient+3,f
 15781  041F  0823               	movf	___aldiv@divisor+3,w
 15782  0420  0227               	subwf	___aldiv@dividend+3,w
 15783  0421  1D03               	skipz
 15784  0422  2C2D               	goto	u4425
 15785  0423  0822               	movf	___aldiv@divisor+2,w
 15786  0424  0226               	subwf	___aldiv@dividend+2,w
 15787  0425  1D03               	skipz
 15788  0426  2C2D               	goto	u4425
 15789  0427  0821               	movf	___aldiv@divisor+1,w
 15790  0428  0225               	subwf	___aldiv@dividend+1,w
 15791  0429  1D03               	skipz
 15792  042A  2C2D               	goto	u4425
 15793  042B  0820               	movf	___aldiv@divisor,w
 15794  042C  0224               	subwf	___aldiv@dividend,w
 15795  042D                     u4425:	
 15796  042D  1C03               	skipc
 15797  042E  2C38               	goto	l4147
 15798  042F  0820               	movf	___aldiv@divisor,w
 15799  0430  02A4               	subwf	___aldiv@dividend,f
 15800  0431  0821               	movf	___aldiv@divisor+1,w
 15801  0432  3BA5               	subwfb	___aldiv@dividend+1,f
 15802  0433  0822               	movf	___aldiv@divisor+2,w
 15803  0434  3BA6               	subwfb	___aldiv@dividend+2,f
 15804  0435  0823               	movf	___aldiv@divisor+3,w
 15805  0436  3BA7               	subwfb	___aldiv@dividend+3,f
 15806  0437  142A               	bsf	___aldiv@quotient,0
 15807  0438                     l4147:	
 15808  0438  36A3               	lsrf	___aldiv@divisor+3,f
 15809  0439  0CA2               	rrf	___aldiv@divisor+2,f
 15810  043A  0CA1               	rrf	___aldiv@divisor+1,f
 15811  043B  0CA0               	rrf	___aldiv@divisor,f
 15812  043C  0BA8               	decfsz	___aldiv@counter,f
 15813  043D  2C1B               	goto	l4139
 15814  043E                     l4151:	
 15815  043E  0829               	movf	___aldiv@sign,w
 15816  043F  1903               	btfsc	3,2
 15817  0440  2C4C               	goto	l4155
 15818  0441  09AA               	comf	___aldiv@quotient,f
 15819  0442  09AB               	comf	___aldiv@quotient+1,f
 15820  0443  09AC               	comf	___aldiv@quotient+2,f
 15821  0444  09AD               	comf	___aldiv@quotient+3,f
 15822  0445  0AAA               	incf	___aldiv@quotient,f
 15823  0446  1903               	skipnz
 15824  0447  0AAB               	incf	___aldiv@quotient+1,f
 15825  0448  1903               	skipnz
 15826  0449  0AAC               	incf	___aldiv@quotient+2,f
 15827  044A  1903               	skipnz
 15828  044B  0AAD               	incf	___aldiv@quotient+3,f
 15829  044C                     l4155:	
 15830  044C  082D               	movf	___aldiv@quotient+3,w
 15831  044D  00A3               	movwf	?___aldiv+3
 15832  044E  082C               	movf	___aldiv@quotient+2,w
 15833  044F  00A2               	movwf	?___aldiv+2
 15834  0450  082B               	movf	___aldiv@quotient+1,w
 15835  0451  00A1               	movwf	?___aldiv+1
 15836  0452  082A               	movf	___aldiv@quotient,w
 15837  0453  00A0               	movwf	?___aldiv
 15838  0454  0008               	return
 15839  0455                     __end_of___aldiv:	
 15840  0455                     __ptext39:	
 15841 ;; *************** function ___almod *****************
 15842 ;; Defined at:
 15843 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\almod.c"
 15844 ;; Parameters:    Size  Location     Type
 15845 ;;  divisor         4    0[BANK0 ] long 
 15846 ;;  dividend        4    4[BANK0 ] long 
 15847 ;; Auto vars:     Size  Location     Type
 15848 ;;  sign            1    9[BANK0 ] unsigned char 
 15849 ;;  counter         1    8[BANK0 ] unsigned char 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  4    0[BANK0 ] long 
 15852 ;; Registers used:
 15853 ;;		wreg, status,2, status,0
 15854 ;; Tracked objects:
 15855 ;;		On entry : 3F/0
 15856 ;;		On exit  : 3F/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15859 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15862 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15863 ;;Total ram usage:       10 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; Hardware stack levels required when called:    3
 15866 ;; This function calls:
 15867 ;;		Nothing
 15868 ;; This function is called by:
 15869 ;;		_dtoa
 15870 ;; This function uses a non-reentrant model
 15871 ;;
 15872                           
 15873                           
 15874                           ;psect for function ___almod
 15875  0455                     ___almod:	
 15876                           
 15877                           ;incstack = 0
 15878                           ; Regs used in ___almod: [wreg+status,2+status,0]
 15879  0455  01A9               	clrf	___almod@sign
 15880  0456  1FA7               	btfss	___almod@dividend+3,7
 15881  0457  2C62               	goto	l849
 15882  0458  252C  3183         	fcall	PL190	;call to abstracted procedure
 15883  045A  1903               	skipnz
 15884  045B  0AA5               	incf	___almod@dividend+1,f
 15885  045C  1903               	skipnz
 15886  045D  0AA6               	incf	___almod@dividend+2,f
 15887  045E  1903               	skipnz
 15888  045F  0AA7               	incf	___almod@dividend+3,f
 15889  0460  01A9               	clrf	___almod@sign
 15890  0461  0AA9               	incf	___almod@sign,f
 15891  0462                     l849:	
 15892  0462  1FA3               	btfss	___almod@divisor+3,7
 15893  0463  2C6F               	goto	l4167
 15894  0464  09A0               	comf	___almod@divisor,f
 15895  0465  09A1               	comf	___almod@divisor+1,f
 15896  0466  09A2               	comf	___almod@divisor+2,f
 15897  0467  09A3               	comf	___almod@divisor+3,f
 15898  0468  0AA0               	incf	___almod@divisor,f
 15899  0469  1903               	skipnz
 15900  046A  0AA1               	incf	___almod@divisor+1,f
 15901  046B  1903               	skipnz
 15902  046C  0AA2               	incf	___almod@divisor+2,f
 15903  046D  1903               	skipnz
 15904  046E  0AA3               	incf	___almod@divisor+3,f
 15905  046F                     l4167:	
 15906  046F  0823               	movf	___almod@divisor+3,w
 15907  0470  0422               	iorwf	___almod@divisor+2,w
 15908  0471  0421               	iorwf	___almod@divisor+1,w
 15909  0472  0420               	iorwf	___almod@divisor,w
 15910  0473  1903               	skipnz
 15911  0474  2C9C               	goto	l4183
 15912  0475  01A8               	clrf	___almod@counter
 15913  0476                     L16:	
 15914  0476  0AA8               	incf	___almod@counter,f
 15915  0477  1BA3               	btfsc	___almod@divisor+3,7
 15916  0478  2C7E               	goto	l4175
 15917  0479  35A0               	lslf	___almod@divisor,f
 15918  047A  0DA1               	rlf	___almod@divisor+1,f
 15919  047B  0DA2               	rlf	___almod@divisor+2,f
 15920  047C  0DA3               	rlf	___almod@divisor+3,f
 15921  047D  2C76               	goto	L16
 15922  047E                     l4175:	
 15923  047E  0823               	movf	___almod@divisor+3,w
 15924  047F  0227               	subwf	___almod@dividend+3,w
 15925  0480  1D03               	skipz
 15926  0481  2C8C               	goto	u4495
 15927  0482  0822               	movf	___almod@divisor+2,w
 15928  0483  0226               	subwf	___almod@dividend+2,w
 15929  0484  1D03               	skipz
 15930  0485  2C8C               	goto	u4495
 15931  0486  0821               	movf	___almod@divisor+1,w
 15932  0487  0225               	subwf	___almod@dividend+1,w
 15933  0488  1D03               	skipz
 15934  0489  2C8C               	goto	u4495
 15935  048A  0820               	movf	___almod@divisor,w
 15936  048B  0224               	subwf	___almod@dividend,w
 15937  048C                     u4495:	
 15938  048C  1C03               	skipc
 15939  048D  2C96               	goto	l4179
 15940  048E  0820               	movf	___almod@divisor,w
 15941  048F  02A4               	subwf	___almod@dividend,f
 15942  0490  0821               	movf	___almod@divisor+1,w
 15943  0491  3BA5               	subwfb	___almod@dividend+1,f
 15944  0492  0822               	movf	___almod@divisor+2,w
 15945  0493  3BA6               	subwfb	___almod@dividend+2,f
 15946  0494  0823               	movf	___almod@divisor+3,w
 15947  0495  3BA7               	subwfb	___almod@dividend+3,f
 15948  0496                     l4179:	
 15949  0496  36A3               	lsrf	___almod@divisor+3,f
 15950  0497  0CA2               	rrf	___almod@divisor+2,f
 15951  0498  0CA1               	rrf	___almod@divisor+1,f
 15952  0499  0CA0               	rrf	___almod@divisor,f
 15953  049A  0BA8               	decfsz	___almod@counter,f
 15954  049B  2C7E               	goto	l4175
 15955  049C                     l4183:	
 15956  049C  0829               	movf	___almod@sign,w
 15957  049D  1903               	btfsc	3,2
 15958  049E  2CA6               	goto	l4187
 15959  049F  252C               	fcall	PL190	;call to abstracted procedure
 15960  04A0  1903               	skipnz
 15961  04A1  0AA5               	incf	___almod@dividend+1,f
 15962  04A2  1903               	skipnz
 15963  04A3  0AA6               	incf	___almod@dividend+2,f
 15964  04A4  1903               	skipnz
 15965  04A5  0AA7               	incf	___almod@dividend+3,f
 15966  04A6                     l4187:	
 15967  04A6  0827               	movf	___almod@dividend+3,w
 15968  04A7  00A3               	movwf	?___almod+3
 15969  04A8  0826               	movf	___almod@dividend+2,w
 15970  04A9  00A2               	movwf	?___almod+2
 15971  04AA  0825               	movf	___almod@dividend+1,w
 15972  04AB  00A1               	movwf	?___almod+1
 15973  04AC  0824               	movf	___almod@dividend,w
 15974  04AD  00A0               	movwf	?___almod
 15975  04AE  0008               	return
 15976  04AF                     __end_of___almod:	
 15977  04AF                     __ptext38:	
 15978 ;; *************** function _abs *****************
 15979 ;; Defined at:
 15980 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\abs.c"
 15981 ;; Parameters:    Size  Location     Type
 15982 ;;  a               2   10[BANK0 ] int 
 15983 ;; Auto vars:     Size  Location     Type
 15984 ;;		None
 15985 ;; Return value:  Size  Location     Type
 15986 ;;                  2   10[BANK0 ] int 
 15987 ;; Registers used:
 15988 ;;		wreg, status,2, status,0
 15989 ;; Tracked objects:
 15990 ;;		On entry : 3F/0
 15991 ;;		On exit  : 0/0
 15992 ;;		Unchanged: 0/0
 15993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15994 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15997 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15998 ;;Total ram usage:        4 bytes
 15999 ;; Hardware stack levels used:    1
 16000 ;; Hardware stack levels required when called:    3
 16001 ;; This function calls:
 16002 ;;		Nothing
 16003 ;; This function is called by:
 16004 ;;		_dtoa
 16005 ;; This function uses a non-reentrant model
 16006 ;;
 16007                           
 16008                           
 16009                           ;psect for function _abs
 16010  04AF                     _abs:	
 16011                           
 16012                           ;incstack = 0
 16013                           ; Regs used in _abs: [wreg+status,2+status,0]
 16014  04AF  082B               	movf	abs@a+1,w
 16015  04B0  3A80               	xorlw	128
 16016  04B1  00AC               	movwf	??_abs
 16017  04B2  3080               	movlw	128
 16018  04B3  022C               	subwf	??_abs,w
 16019  04B4  1D03               	skipz
 16020  04B5  2CB8               	goto	u4155
 16021  04B6  3001               	movlw	1
 16022  04B7  022A               	subwf	abs@a,w
 16023  04B8                     u4155:	
 16024  04B8  1803               	skipnc
 16025  04B9  0008               	return
 16026  04BA  0140               	movlb	0	; select bank0
 16027  04BB  092A               	comf	abs@a,w
 16028  04BC  00AC               	movwf	??_abs
 16029  04BD  092B               	comf	abs@a+1,w
 16030  04BE  00AD               	movwf	??_abs+1
 16031  04BF  0AAC               	incf	??_abs,f
 16032  04C0  1903               	skipnz
 16033  04C1  0AAD               	incf	??_abs+1,f
 16034  04C2  082C               	movf	??_abs,w
 16035  04C3  00AA               	movwf	?_abs
 16036  04C4  082D               	movf	??_abs+1,w
 16037  04C5  00AB               	movwf	?_abs+1
 16038  04C6  0008               	return
 16039  04C7                     __end_of_abs:	
 16040  04C7                     __ptext33:	
 16041 ;; *************** function _pad *****************
 16042 ;; Defined at:
 16043 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 16044 ;; Parameters:    Size  Location     Type
 16045 ;;  fp              1    wreg     PTR struct _IO_FILE
 16046 ;;		 -> sprintf@f(6), 
 16047 ;;  buf             1   14[BANK0 ] PTR unsigned char 
 16048 ;;		 -> dbuf(80), 
 16049 ;;  p               2   15[BANK0 ] int 
 16050 ;; Auto vars:     Size  Location     Type
 16051 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
 16052 ;;		 -> sprintf@f(6), 
 16053 ;;  w               2   20[BANK0 ] int 
 16054 ;;  i               2   18[BANK0 ] int 
 16055 ;; Return value:  Size  Location     Type
 16056 ;;                  2   14[BANK0 ] int 
 16057 ;; Registers used:
 16058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16059 ;; Tracked objects:
 16060 ;;		On entry : 3E/1
 16061 ;;		On exit  : 3F/0
 16062 ;;		Unchanged: 0/0
 16063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16064 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16065 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16067 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16068 ;;Total ram usage:        9 bytes
 16069 ;; Hardware stack levels used:    1
 16070 ;; Hardware stack levels required when called:    6
 16071 ;; This function calls:
 16072 ;;		_fputc
 16073 ;;		_fputs
 16074 ;;		_strlen
 16075 ;; This function is called by:
 16076 ;;		_dtoa
 16077 ;;		_efgtoa
 16078 ;; This function uses a non-reentrant model
 16079 ;;
 16080                           
 16081                           
 16082                           ;psect for function _pad
 16083  04C7                     _pad:	
 16084                           
 16085                           ;incstack = 0
 16086                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16087                           ;pad@fp stored from wreg
 16088  04C7  0140               	movlb	0	; select bank0
 16089  04C8  00B6               	movwf	pad@fp
 16090                           
 16091                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 16092  04C9  0142               	movlb	2	; select bank2
 16093  04CA  1C6E               	btfss	_flags^(0+256),0
 16094  04CB  2CD0               	goto	l4009
 16095                           
 16096                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 16097  04CC  2532  3183         	fcall	PL198	;call to abstracted procedure
 16098  04CE  250C  3183         	fcall	_fputs
 16099  04D0                     l4009:	
 16100                           
 16101                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 16102  04D0  0140               	movlb	0	; select bank0
 16103  04D1  1BB0               	btfsc	pad@p+1,7
 16104  04D2  2CD8               	goto	l4013
 16105  04D3  0830               	movf	pad@p+1,w
 16106  04D4  00B5               	movwf	pad@w+1
 16107  04D5  082F               	movf	pad@p,w
 16108  04D6  00B4               	movwf	pad@w
 16109  04D7  2CDA               	goto	l577
 16110  04D8                     l4013:	
 16111  04D8  01B4               	clrf	pad@w
 16112  04D9  01B5               	clrf	pad@w+1
 16113  04DA                     l577:	
 16114                           
 16115                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 16116  04DA  01B2               	clrf	pad@i
 16117  04DB  01B3               	clrf	pad@i+1
 16118  04DC                     l4019:	
 16119                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 16120                           
 16121                           
 16122                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 16123  04DC  0833               	movf	pad@i+1,w
 16124  04DD  3A80               	xorlw	128
 16125  04DE  00B1               	movwf	??_pad
 16126  04DF  0835               	movf	pad@w+1,w
 16127  04E0  3A80               	xorlw	128
 16128  04E1  0231               	subwf	??_pad,w
 16129  04E2  1D03               	skipz
 16130  04E3  2CE6               	goto	u4135
 16131  04E4  0834               	movf	pad@w,w
 16132  04E5  0232               	subwf	pad@i,w
 16133  04E6                     u4135:	
 16134  04E6  1803               	btfsc	3,0
 16135  04E7  2CF6               	goto	l580
 16136                           
 16137                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 16138  04E8  3020               	movlw	32
 16139  04E9  0140               	movlb	0	; select bank0
 16140  04EA  00A0               	movwf	fputc@c
 16141  04EB  01A1               	clrf	fputc@c+1
 16142  04EC  0836               	movf	pad@fp,w
 16143  04ED  00A2               	movwf	fputc@fp
 16144  04EE  319D  25B1  3183   	fcall	_fputc
 16145                           
 16146                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 16147  04F1  0140               	movlb	0	; select bank0
 16148  04F2  0AB2               	incf	pad@i,f
 16149  04F3  1903               	skipnz
 16150  04F4  0AB3               	incf	pad@i+1,f
 16151  04F5  2CDC               	goto	l4019
 16152  04F6                     l580:	
 16153                           
 16154                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 16155  04F6  0142               	movlb	2	; select bank2
 16156  04F7  186E               	btfsc	_flags^(0+256),0
 16157  04F8  2CFC               	goto	l4023
 16158                           
 16159                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 16160  04F9  2532  3183         	fcall	PL198	;call to abstracted procedure
 16161  04FB  250C               	fcall	_fputs
 16162  04FC                     l4023:	
 16163                           
 16164                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 16165  04FC  0140               	movlb	0	; select bank0
 16166  04FD  082E               	movf	pad@buf,w
 16167  04FE  00A0               	movwf	strlen@s
 16168  04FF  3002               	movlw	2
 16169  0500  00A1               	movwf	strlen@s+1
 16170  0501  319B  2351         	fcall	_strlen
 16171  0503  0821               	movf	?_strlen+1,w
 16172  0504  00AF               	movwf	?_pad+1
 16173  0505  0820               	movf	?_strlen,w
 16174  0506  00AE               	movwf	?_pad
 16175  0507  0834               	movf	pad@w,w
 16176  0508  07AE               	addwf	?_pad,f
 16177  0509  0835               	movf	pad@w+1,w
 16178  050A  3DAF               	addwfc	?_pad+1,f
 16179  050B  0008               	return
 16180  050C                     __end_of_pad:	
 16181  050C                     __ptext35:	
 16182 ;; *************** function _fputs *****************
 16183 ;; Defined at:
 16184 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_fputs.c"
 16185 ;; Parameters:    Size  Location     Type
 16186 ;;  s               1    wreg     PTR const unsigned char 
 16187 ;;		 -> dbuf(80), 
 16188 ;;  fp              1    8[BANK0 ] PTR struct _IO_FILE
 16189 ;;		 -> sprintf@f(6), 
 16190 ;; Auto vars:     Size  Location     Type
 16191 ;;  s               1   13[BANK0 ] PTR const unsigned char 
 16192 ;;		 -> dbuf(80), 
 16193 ;;  i               2   11[BANK0 ] int 
 16194 ;;  c               1   10[BANK0 ] unsigned char 
 16195 ;; Return value:  Size  Location     Type
 16196 ;;                  2    8[BANK0 ] int 
 16197 ;; Registers used:
 16198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16199 ;; Tracked objects:
 16200 ;;		On entry : 3F/0
 16201 ;;		On exit  : 3F/0
 16202 ;;		Unchanged: 0/0
 16203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16204 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16205 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16207 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16208 ;;Total ram usage:        6 bytes
 16209 ;; Hardware stack levels used:    1
 16210 ;; Hardware stack levels required when called:    5
 16211 ;; This function calls:
 16212 ;;		_fputc
 16213 ;; This function is called by:
 16214 ;;		_pad
 16215 ;; This function uses a non-reentrant model
 16216 ;;
 16217                           
 16218                           
 16219                           ;psect for function _fputs
 16220  050C                     _fputs:	
 16221                           
 16222                           ;incstack = 0
 16223                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16224                           ;fputs@s stored from wreg
 16225  050C  00AD               	movwf	fputs@s
 16226  050D  01AB               	clrf	fputs@i
 16227  050E  01AC               	clrf	fputs@i+1
 16228  050F                     l3785:	
 16229  050F  082B               	movf	fputs@i,w
 16230  0510  072D               	addwf	fputs@s,w
 16231  0511  00A9               	movwf	??_fputs
 16232  0512  0086               	movwf	6
 16233  0513  3002               	movlw	2	; select bank4/5
 16234  0514  0087               	movwf	7
 16235  0515  0801               	movf	1,w
 16236  0516  00AA               	movwf	fputs@c
 16237  0517  082A               	movf	fputs@c,w
 16238  0518  1903               	btfsc	3,2
 16239  0519  0008               	return
 16240  051A  00A0               	movwf	fputc@c
 16241  051B  01A1               	clrf	fputc@c+1
 16242  051C  0828               	movf	fputs@fp,w
 16243  051D  00A2               	movwf	fputc@fp
 16244  051E  319D  25B1  3183   	fcall	_fputc
 16245  0521  0140               	movlb	0	; select bank0
 16246  0522  0AAB               	incf	fputs@i,f
 16247  0523  1903               	skipnz
 16248  0524  0AAC               	incf	fputs@i+1,f
 16249  0525  2D0F               	goto	l3785
 16250  0526                     __end_of_fputs:	
 16251  0526                     PL176:	
 16252  0526  0849               	movf	dtoa@i,w
 16253  0527  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 16254  0528  0086               	movwf	6
 16255  0529  3002               	movlw	2	; select bank5/6
 16256  052A  0087               	movwf	7
 16257  052B  0008               	return
 16258  052C                     __end_ofPL176:	
 16259  052C                     PL190:	
 16260  052C  09A4               	comf	___almod@dividend,f
 16261  052D  09A5               	comf	___almod@dividend+1,f
 16262  052E  09A6               	comf	___almod@dividend+2,f
 16263  052F  09A7               	comf	___almod@dividend+3,f
 16264  0530  0AA4               	incf	___almod@dividend,f
 16265  0531  0008               	return
 16266  0532                     __end_ofPL190:	
 16267  0532                     PL198:	
 16268  0532  0140               	movlb	0	; select bank0
 16269  0533  0836               	movf	pad@fp,w
 16270  0534  00A8               	movwf	fputs@fp
 16271  0535  082E               	movf	pad@buf,w
 16272  0536  0008               	return
 16273  0537                     __end_ofPL198:	
 16274                           
 16275                           	psect	text42
 16276  0718                     __ptext42:	
 16277 ;; *************** function _isspace *****************
 16278 ;; Defined at:
 16279 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\isspace.c"
 16280 ;; Parameters:    Size  Location     Type
 16281 ;;  c               2    0[BANK0 ] int 
 16282 ;; Auto vars:     Size  Location     Type
 16283 ;;		None
 16284 ;; Return value:  Size  Location     Type
 16285 ;;                  2    0[BANK0 ] int 
 16286 ;; Registers used:
 16287 ;;		wreg, status,2, status,0
 16288 ;; Tracked objects:
 16289 ;;		On entry : 0/0
 16290 ;;		On exit  : 3F/0
 16291 ;;		Unchanged: 0/0
 16292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16293 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16296 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16297 ;;Total ram usage:        5 bytes
 16298 ;; Hardware stack levels used:    1
 16299 ;; Hardware stack levels required when called:    3
 16300 ;; This function calls:
 16301 ;;		Nothing
 16302 ;; This function is called by:
 16303 ;;		_atoi
 16304 ;; This function uses a non-reentrant model
 16305 ;;
 16306                           
 16307                           
 16308                           ;psect for function _isspace
 16309  0718                     _isspace:	
 16310                           
 16311                           ;incstack = 0
 16312                           ; Regs used in _isspace: [wreg+status,2+status,0]
 16313  0718  0140               	movlb	0	; select bank0
 16314  0719  3020               	movlw	32
 16315  071A  01A4               	clrf	_isspace$1677
 16316  071B  0AA4               	incf	_isspace$1677,f
 16317  071C  0620               	xorwf	isspace@c,w
 16318  071D  0421               	iorwf	isspace@c+1,w
 16319  071E  1903               	btfsc	3,2
 16320  071F  2F2D               	goto	l4623
 16321  0720  0820               	movf	isspace@c,w
 16322  0721  3EF7               	addlw	247
 16323  0722  00A2               	movwf	??_isspace
 16324  0723  30FF               	movlw	255
 16325  0724  3D21               	addwfc	isspace@c+1,w
 16326  0725  00A3               	movwf	??_isspace+1
 16327  0726  3000               	movlw	0
 16328  0727  0223               	subwf	??_isspace+1,w
 16329  0728  3005               	movlw	5
 16330  0729  1903               	skipnz
 16331  072A  0222               	subwf	??_isspace,w
 16332  072B  1803               	btfsc	3,0
 16333  072C  01A4               	clrf	_isspace$1677
 16334  072D                     l4623:	
 16335  072D  0824               	movf	_isspace$1677,w
 16336  072E  00A0               	movwf	?_isspace
 16337  072F  01A1               	clrf	?_isspace+1
 16338  0730  0008               	return
 16339  0731                     __end_of_isspace:	
 16340                           
 16341                           	psect	text43
 16342  0745                     __ptext43:	
 16343 ;; *************** function _isdigit *****************
 16344 ;; Defined at:
 16345 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\isdigit.c"
 16346 ;; Parameters:    Size  Location     Type
 16347 ;;  c               2    0[BANK0 ] int 
 16348 ;; Auto vars:     Size  Location     Type
 16349 ;;		None
 16350 ;; Return value:  Size  Location     Type
 16351 ;;                  2    0[BANK0 ] int 
 16352 ;; Registers used:
 16353 ;;		wreg, status,2, status,0
 16354 ;; Tracked objects:
 16355 ;;		On entry : 0/0
 16356 ;;		On exit  : 3F/0
 16357 ;;		Unchanged: 0/0
 16358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16359 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16361 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16362 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16363 ;;Total ram usage:        4 bytes
 16364 ;; Hardware stack levels used:    1
 16365 ;; Hardware stack levels required when called:    3
 16366 ;; This function calls:
 16367 ;;		Nothing
 16368 ;; This function is called by:
 16369 ;;		_vfpfcnvrt
 16370 ;;		_atoi
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           
 16375                           ;psect for function _isdigit
 16376  0745                     _isdigit:	
 16377                           
 16378                           ;incstack = 0
 16379                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 16380  0745  0140               	movlb	0	; select bank0
 16381  0746  0820               	movf	isdigit@c,w
 16382  0747  3ED0               	addlw	208
 16383  0748  00A2               	movwf	??_isdigit
 16384  0749  30FF               	movlw	255
 16385  074A  3D21               	addwfc	isdigit@c+1,w
 16386  074B  00A3               	movwf	??_isdigit+1
 16387  074C  3000               	movlw	0
 16388  074D  0223               	subwf	??_isdigit+1,w
 16389  074E  300A               	movlw	10
 16390  074F  1903               	skipnz
 16391  0750  0222               	subwf	??_isdigit,w
 16392  0751  1803               	btfsc	3,0
 16393  0752  2F55               	goto	u4340
 16394  0753  3001               	movlw	1
 16395  0754  2F56               	goto	u4350
 16396  0755                     u4340:	
 16397  0755  3000               	movlw	0
 16398  0756                     u4350:	
 16399  0756  00A0               	movwf	?_isdigit
 16400  0757  01A1               	clrf	?_isdigit+1
 16401  0758  0008               	return
 16402  0759                     __end_of_isdigit:	
 16403                           
 16404                           	psect	intentry
 16405  0004                     __pintentry:	
 16406 ;; *************** function _ISR *****************
 16407 ;; Defined at:
 16408 ;;		line 48 in file "interrupt.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;		None
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;		None
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  1    wreg      void 
 16415 ;; Registers used:
 16416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 3F/E
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16424 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16425 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16426 ;;Total ram usage:        4 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    2
 16429 ;; This function calls:
 16430 ;;		_pushButtonISR
 16431 ;;		_rotISR
 16432 ;;		_uartReceiveISR
 16433 ;; This function is called by:
 16434 ;;		Interrupt level 1
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438  0004                     _ISR:	
 16439                           
 16440                           ;incstack = 0
 16441  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 16442                           
 16443                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16444  0005  3180               	pagesel	$
 16445  0006  014E               	movlb	14	; select bank14
 16446  0007  1A96               	btfsc	22,5	;volatile
 16447  0008  1E8C               	btfss	12,5	;volatile
 16448  0009  2812               	goto	i1l275
 16449  000A  0143               	movlb	3	; select bank3
 16450  000B  0ACB               	incf	_tick10ms^(0+384),f	;volatile
 16451  000C  30B2               	movlw	178
 16452  000D  014B               	movlb	11	; select bank11
 16453  000E  009C               	movwf	28	;volatile
 16454  000F  014E               	movlb	14	; select bank14
 16455  0010  128C               	bcf	12,5	;volatile
 16456  0011  285E               	goto	i1l287
 16457  0012                     i1l275:	
 16458  0012  1A16               	btfsc	22,4	;volatile
 16459  0013  1E0C               	btfss	12,4	;volatile
 16460  0014  282E               	goto	i1l277
 16461  0015  017E               	movlb	62	; select bank62
 16462  0016  1FBF               	btfss	63,7	;volatile
 16463  0017  281D               	goto	i1l6031
 16464  0018  3186  26F2  3180   	fcall	_pushButtonISR
 16465  001B  017E               	movlb	62	; select bank62
 16466  001C  13BF               	bcf	63,7	;volatile
 16467  001D                     i1l6031:	
 16468  001D  1E3F               	btfss	63,4	;volatile
 16469  001E  2824               	goto	i1l6037
 16470  001F  3186  26C2  3180   	fcall	_rotISR
 16471  0022  017E               	movlb	62	; select bank62
 16472  0023  123F               	bcf	63,4	;volatile
 16473  0024                     i1l6037:	
 16474  0024  1EBF               	btfss	63,5	;volatile
 16475  0025  282B               	goto	i1l6043
 16476  0026  3186  26C2  3180   	fcall	_rotISR
 16477  0029  017E               	movlb	62	; select bank62
 16478  002A  12BF               	bcf	63,5	;volatile
 16479  002B                     i1l6043:	
 16480  002B  014E               	movlb	14	; select bank14
 16481  002C  120C               	bcf	12,4	;volatile
 16482  002D  285E               	goto	i1l287
 16483  002E                     i1l277:	
 16484  002E  1F0B               	btfss	11,6	;volatile
 16485  002F  285E               	goto	i1l287
 16486  0030  181A               	btfsc	26,0	;volatile
 16487  0031  1C10               	btfss	16,0	;volatile
 16488  0032  2857               	goto	i1l283
 16489  0033  0143               	movlb	3	; select bank3
 16490  0034  082B               	movf	(_tick100ms+3)^(0+384),w	;volatile
 16491  0035  00FA               	movwf	??_ISR+3
 16492  0036  082A               	movf	(_tick100ms+2)^(0+384),w	;volatile
 16493  0037  00F9               	movwf	??_ISR+2
 16494  0038  0829               	movf	(_tick100ms+1)^(0+384),w	;volatile
 16495  0039  00F8               	movwf	??_ISR+1
 16496  003A  0828               	movf	_tick100ms^(0+384),w	;volatile
 16497  003B  00F7               	movwf	??_ISR
 16498  003C  3001               	movlw	1
 16499  003D  07A8               	addwf	_tick100ms^(0+384),f	;volatile
 16500  003E  3000               	movlw	0
 16501  003F  3DA9               	addwfc	(_tick100ms+1)^(0+384),f	;volatile
 16502  0040  3DAA               	addwfc	(_tick100ms+2)^(0+384),f	;volatile
 16503  0041  3DAB               	addwfc	(_tick100ms+3)^(0+384),f	;volatile
 16504  0042  0277               	subwf	??_ISR,w
 16505  0043  30CA               	movlw	202
 16506  0044  3B78               	subwfb	??_ISR+1,w
 16507  0045  309A               	movlw	154
 16508  0046  3B79               	subwfb	??_ISR+2,w
 16509  0047  303B               	movlw	59
 16510  0048  3B7A               	subwfb	??_ISR+3,w
 16511  0049  1C03               	btfss	3,0
 16512  004A  284F               	goto	i1l284
 16513  004B  01A8               	clrf	_tick100ms^(0+384)	;volatile
 16514  004C  01A9               	clrf	(_tick100ms+1)^(0+384)	;volatile
 16515  004D  01AA               	clrf	(_tick100ms+2)^(0+384)	;volatile
 16516  004E  01AB               	clrf	(_tick100ms+3)^(0+384)	;volatile
 16517  004F                     i1l284:	
 16518  004F  30CF               	movlw	207
 16519  0050  0144               	movlb	4	; select bank4
 16520  0051  008D               	movwf	13	;volatile
 16521  0052  302B               	movlw	43
 16522  0053  008C               	movwf	12	;volatile
 16523  0054  014E               	movlb	14	; select bank14
 16524  0055  1010               	bcf	16,0	;volatile
 16525  0056  285E               	goto	i1l287
 16526  0057                     i1l283:	
 16527  0057  1A99               	btfsc	25,5	;volatile
 16528  0058  1E8F               	btfss	15,5	;volatile
 16529  0059  285E               	goto	i1l287
 16530  005A  3186  2633         	fcall	_uartReceiveISR
 16531  005C  014E               	movlb	14	; select bank14
 16532  005D  128F               	bcf	15,5	;volatile
 16533  005E                     i1l287:	
 16534  005E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 16535  005F  0009               	retfie
 16536  0060                     __end_of_ISR:	
 16537                           
 16538                           	psect	text77
 16539  0633                     __ptext77:	
 16540 ;; *************** function _uartReceiveISR *****************
 16541 ;; Defined at:
 16542 ;;		line 35 in file "uart.c"
 16543 ;; Parameters:    Size  Location     Type
 16544 ;;		None
 16545 ;; Auto vars:     Size  Location     Type
 16546 ;;		None
 16547 ;; Return value:  Size  Location     Type
 16548 ;;                  1    wreg      void 
 16549 ;; Registers used:
 16550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16551 ;; Tracked objects:
 16552 ;;		On entry : 3F/E
 16553 ;;		On exit  : 3F/3
 16554 ;;		Unchanged: 0/0
 16555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16560 ;;Total ram usage:        0 bytes
 16561 ;; Hardware stack levels used:    1
 16562 ;; Hardware stack levels required when called:    1
 16563 ;; This function calls:
 16564 ;;		_strncpy
 16565 ;; This function is called by:
 16566 ;;		_ISR
 16567 ;; This function uses a non-reentrant model
 16568 ;;
 16569                           
 16570                           
 16571                           ;psect for function _uartReceiveISR
 16572  0633                     _uartReceiveISR:	
 16573                           
 16574                           ;uart.c: 37:  static char buffer[20];;uart.c: 38:  static uint8_t rxCount = 0;;uart.c: 3
      +                          9:  static uint8_t checksum = 0;;uart.c: 41:  if (RC1STAbits.OERR)
 16575                           
 16576                           ;incstack = 0
 16577                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16578  0633  0142               	movlb	2	; select bank2
 16579  0634  1C9D               	btfss	29,1	;volatile
 16580  0635  2E3A               	goto	i1l5961
 16581                           
 16582                           ;uart.c: 42:  {;uart.c: 43:   RC1STAbits.CREN = 0;
 16583  0636  121D               	bcf	29,4	;volatile
 16584                           
 16585                           ;uart.c: 44:   RC1STAbits.CREN = 1;
 16586  0637  161D               	bsf	29,4	;volatile
 16587                           
 16588                           ;uart.c: 45:   rxOErrCount++;
 16589  0638  0143               	movlb	3	; select bank3
 16590  0639  0AC7               	incf	_rxOErrCount^(0+384),f	;volatile
 16591  063A                     i1l5961:	
 16592                           
 16593                           ;uart.c: 47:  if (RC1STAbits.FERR)
 16594  063A  0142               	movlb	2	; select bank2
 16595  063B  1D1D               	btfss	29,2	;volatile
 16596  063C  2E41               	goto	i1l5967
 16597                           
 16598                           ;uart.c: 48:  {;uart.c: 49:   RC1STAbits.SPEN = 0;
 16599  063D  139D               	bcf	29,7	;volatile
 16600                           
 16601                           ;uart.c: 50:   RC1STAbits.SPEN = 1;
 16602  063E  179D               	bsf	29,7	;volatile
 16603                           
 16604                           ;uart.c: 51:   rxFErrCount++;
 16605  063F  0143               	movlb	3	; select bank3
 16606  0640  0AC8               	incf	_rxFErrCount^(0+384),f	;volatile
 16607  0641                     i1l5967:	
 16608                           
 16609                           ;uart.c: 55:  if (rxCount < sizeof(dataPacket)) {
 16610  0641  300F               	movlw	15
 16611  0642  0143               	movlb	3	; select bank3
 16612  0643  0245               	subwf	uartReceiveISR@rxCount^(0+384),w
 16613  0644  1803               	skipnc
 16614  0645  2E56               	goto	i1l5973
 16615                           
 16616                           ;uart.c: 56:   buffer[rxCount] = RC1REG;
 16617  0646  0845               	movf	uartReceiveISR@rxCount^(0+384),w
 16618  0647  3E20               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 16619  0648  0086               	movwf	6
 16620  0649  3002               	movlw	2	; select bank4/5
 16621  064A  0087               	movwf	7
 16622  064B  0142               	movlb	2	; select bank2
 16623  064C  0819               	movf	25,w	;volatile
 16624  064D  0081               	movwf	1
 16625                           
 16626                           ;uart.c: 57:   checksum ^= buffer[rxCount];
 16627  064E  0143               	movlb	3	; select bank3
 16628  064F  0845               	movf	uartReceiveISR@rxCount^(0+384),w
 16629  0650  3E20               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 16630  0651  0086               	movwf	6
 16631  0652  0801               	movf	1,w
 16632  0653  06C4               	xorwf	uartReceiveISR@checksum^(0+384),f
 16633                           
 16634                           ;uart.c: 58:   rxCount++;
 16635  0654  0AC5               	incf	uartReceiveISR@rxCount^(0+384),f
 16636                           
 16637                           ;uart.c: 59:  } else {
 16638  0655  0008               	return
 16639  0656                     i1l5973:	
 16640                           
 16641                           ;uart.c: 61:   if (RC1REG == checksum) {
 16642  0656  0142               	movlb	2	; select bank2
 16643  0657  0819               	movf	25,w	;volatile
 16644  0658  0143               	movlb	3	; select bank3
 16645  0659  0644               	xorwf	uartReceiveISR@checksum^(0+384),w
 16646  065A  1D03               	skipz
 16647  065B  2E65               	goto	i1l5979
 16648                           
 16649                           ;uart.c: 63:    dataReadyFlag = 1;
 16650  065C  3001               	movlw	1
 16651  065D  00C6               	movwf	_dataReadyFlag^(0+384)	;volatile
 16652                           
 16653                           ;uart.c: 64:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 16654  065E  3020               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 16655  065F  00F0               	movwf	strncpy@s
 16656  0660  300F               	movlw	15
 16657  0661  00F1               	movwf	strncpy@n
 16658  0662  3034               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 16659  0663  01F2               	clrf	strncpy@n+1
 16660  0664  2668               	fcall	_strncpy
 16661  0665                     i1l5979:	
 16662                           
 16663                           ;uart.c: 66:   checksum = 0;
 16664  0665  01C4               	clrf	uartReceiveISR@checksum^(0+384)
 16665                           
 16666                           ;uart.c: 67:   rxCount = 0;
 16667  0666  01C5               	clrf	uartReceiveISR@rxCount^(0+384)
 16668  0667  0008               	return
 16669  0668                     __end_of_uartReceiveISR:	
 16670  0668                     __ptext78:	
 16671 ;; *************** function _strncpy *****************
 16672 ;; Defined at:
 16673 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strncpy.c"
 16674 ;; Parameters:    Size  Location     Type
 16675 ;;  d               1    wreg     PTR unsigned char 
 16676 ;;		 -> dataPacket(15), 
 16677 ;;  s               1    0[COMMON] PTR const unsigned char 
 16678 ;;		 -> uartReceiveISR@buffer(20), 
 16679 ;;  n               2    1[COMMON] unsigned int 
 16680 ;; Auto vars:     Size  Location     Type
 16681 ;;  d               1    3[COMMON] PTR unsigned char 
 16682 ;;		 -> dataPacket(15), 
 16683 ;;  cp              1    4[COMMON] PTR unsigned char 
 16684 ;;		 -> dataPacket(15), 
 16685 ;; Return value:  Size  Location     Type
 16686 ;;                  1    wreg      PTR unsigned char 
 16687 ;; Registers used:
 16688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 16689 ;; Tracked objects:
 16690 ;;		On entry : 3F/3
 16691 ;;		On exit  : 3F/3
 16692 ;;		Unchanged: 3E/0
 16693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16694 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16697 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16698 ;;Total ram usage:        5 bytes
 16699 ;; Hardware stack levels used:    1
 16700 ;; This function calls:
 16701 ;;		Nothing
 16702 ;; This function is called by:
 16703 ;;		_uartReceiveISR
 16704 ;; This function uses a non-reentrant model
 16705 ;;
 16706                           
 16707                           
 16708                           ;psect for function _strncpy
 16709  0668                     _strncpy:	
 16710                           
 16711                           ;incstack = 0
 16712                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 16713                           ;strncpy@d stored from wreg
 16714  0668  00F3               	movwf	strncpy@d
 16715  0669  00F4               	movwf	strncpy@cp
 16716  066A                     i1l5477:	
 16717  066A  0871               	movf	strncpy@n,w
 16718  066B  0472               	iorwf	strncpy@n+1,w
 16719  066C  3001               	movlw	1
 16720  066D  1903               	btfsc	3,2
 16721  066E  2E89               	goto	L25
 16722  066F  02F1               	subwf	strncpy@n,f
 16723  0670  3000               	movlw	0
 16724  0671  3BF2               	subwfb	strncpy@n+1,f
 16725  0672  0874               	movf	strncpy@cp,w
 16726  0673  0086               	movwf	6
 16727  0674  3002               	movlw	2	; select bank4/5
 16728  0675  0087               	movwf	7
 16729  0676  0AF4               	incf	strncpy@cp,f
 16730  0677  0870               	movf	strncpy@s,w
 16731  0678  0084               	movwf	4
 16732  0679  3002               	movlw	2	; select bank4/5
 16733  067A  0085               	movwf	5
 16734  067B  0AF0               	incf	strncpy@s,f
 16735  067C  0800               	movf	0,w
 16736  067D  3FC0               	movwi [0]fsr1
 16737  067E  0889               	movf	9,f
 16738  067F  1903               	btfsc	3,2
 16739  0680  2E88               	goto	i1l5483
 16740  0681  2E6A               	goto	i1l5477
 16741  0682                     i1l5479:	
 16742  0682  0874               	movf	strncpy@cp,w
 16743  0683  0086               	movwf	6
 16744  0684  3002               	movlw	2	; select bank4/5
 16745  0685  0087               	movwf	7
 16746  0686  0181               	clrf	1
 16747  0687  0AF4               	incf	strncpy@cp,f
 16748  0688                     i1l5483:	
 16749  0688  3001               	movlw	1
 16750  0689                     L25:	
 16751  0689  02F1               	subwf	strncpy@n,f
 16752  068A  3000               	movlw	0
 16753  068B  3BF2               	subwfb	strncpy@n+1,f
 16754  068C  0F71               	incfsz	strncpy@n,w
 16755  068D  2E82               	goto	i1l5479
 16756  068E  0A72               	incf	strncpy@n+1,w
 16757  068F  1903               	btfsc	3,2
 16758  0690  0008               	return
 16759  0691  2E82               	goto	i1l5479
 16760  0692                     __end_of_strncpy:	
 16761                           
 16762                           	psect	text79
 16763  06C2                     __ptext79:	
 16764 ;; *************** function _rotISR *****************
 16765 ;; Defined at:
 16766 ;;		line 24 in file "inputs.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;		None
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;  input           1    6[COMMON] unsigned char 
 16771 ;; Return value:  Size  Location     Type
 16772 ;;                  1    wreg      void 
 16773 ;; Registers used:
 16774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 16775 ;; Tracked objects:
 16776 ;;		On entry : 3F/3E
 16777 ;;		On exit  : 3C/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16782 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16783 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16784 ;;Total ram usage:        7 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; This function calls:
 16787 ;;		Nothing
 16788 ;; This function is called by:
 16789 ;;		_ISR
 16790 ;; This function uses a non-reentrant model
 16791 ;;
 16792                           
 16793                           
 16794                           ;psect for function _rotISR
 16795  06C2                     _rotISR:	
 16796                           
 16797                           ;inputs.c: 26:  uint8_t input;;inputs.c: 28:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 16798                           
 16799                           ;incstack = 0
 16800                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 16801  06C2  0140               	movlb	0	; select bank0
 16802  06C3  0E0C               	swapf	12,w	;volatile
 16803  06C4  3901               	andlw	1
 16804  06C5  00F0               	movwf	??_rotISR
 16805  06C6  0E0C               	swapf	12,w	;volatile
 16806  06C7  0C89               	rrf	9,f
 16807  06C8  3901               	andlw	1
 16808  06C9  0709               	addwf	9,w
 16809  06CA  0470               	iorwf	??_rotISR,w
 16810  06CB  00F6               	movwf	rotISR@input
 16811                           
 16812                           ;inputs.c: 31:  g_curRotState = transition_table[g_curRotState & 0b00000111][input];
 16813  06CC  087D               	movf	_g_curRotState,w	;volatile
 16814  06CD  3907               	andlw	7
 16815  06CE  00F0               	movwf	??_rotISR
 16816  06CF  30D5               	movlw	low (_transition_table| (0+32768))
 16817  06D0  01F1               	clrf	??_rotISR+1
 16818  06D1  35F0               	lslf	??_rotISR,f
 16819  06D2  0DF1               	rlf	??_rotISR+1,f
 16820  06D3  35F0               	lslf	??_rotISR,f
 16821  06D4  0DF1               	rlf	??_rotISR+1,f
 16822  06D5  00F2               	movwf	??_rotISR+2
 16823  06D6  30A0               	movlw	high (_transition_table| (0+32768))
 16824  06D7  00F3               	movwf	??_rotISR+3
 16825  06D8  0870               	movf	??_rotISR,w
 16826  06D9  0772               	addwf	??_rotISR+2,w
 16827  06DA  00F4               	movwf	??_rotISR+4
 16828  06DB  0871               	movf	??_rotISR+1,w
 16829  06DC  3D73               	addwfc	??_rotISR+3,w
 16830  06DD  00F5               	movwf	??_rotISR+5
 16831  06DE  0876               	movf	rotISR@input,w
 16832  06DF  0774               	addwf	??_rotISR+4,w
 16833  06E0  0084               	movwf	4
 16834  06E1  0875               	movf	??_rotISR+5,w
 16835  06E2  1803               	skipnc
 16836  06E3  0A75               	incf	??_rotISR+5,w
 16837  06E4  0085               	movwf	5
 16838  06E5  0800               	movf	0,w	;code access
 16839  06E6  00FD               	movwf	_g_curRotState	;volatile
 16840                           
 16841                           ;inputs.c: 34:  if (g_curRotState & CW_FLAG) g_rotDir = ROT_CW;
 16842  06E7  1FFD               	btfss	_g_curRotState,7	;volatile
 16843  06E8  2EEC               	goto	i1l5951
 16844  06E9  3001               	movlw	1
 16845  06EA  0143               	movlb	3	; select bank3
 16846  06EB  00CA               	movwf	_g_rotDir^(0+384)	;volatile
 16847  06EC                     i1l5951:	
 16848                           
 16849                           ;inputs.c: 35:  if (g_curRotState & CCW_FLAG) g_rotDir = ROT_CCW;
 16850  06EC  1F7D               	btfss	_g_curRotState,6	;volatile
 16851  06ED  0008               	return
 16852  06EE  3002               	movlw	2
 16853  06EF  0143               	movlb	3	; select bank3
 16854  06F0  00CA               	movwf	_g_rotDir^(0+384)	;volatile
 16855  06F1  0008               	return
 16856  06F2                     __end_of_rotISR:	
 16857                           
 16858                           	psect	text80
 16859  06F2                     __ptext80:	
 16860 ;; *************** function _pushButtonISR *****************
 16861 ;; Defined at:
 16862 ;;		line 38 in file "inputs.c"
 16863 ;; Parameters:    Size  Location     Type
 16864 ;;		None
 16865 ;; Auto vars:     Size  Location     Type
 16866 ;;  time            1    0[COMMON] unsigned char 
 16867 ;; Return value:  Size  Location     Type
 16868 ;;                  1    wreg      void 
 16869 ;; Registers used:
 16870 ;;		wreg, status,2, status,0, pclath, cstack
 16871 ;; Tracked objects:
 16872 ;;		On entry : 3F/3E
 16873 ;;		On exit  : 3F/3
 16874 ;;		Unchanged: 0/0
 16875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16880 ;;Total ram usage:        1 bytes
 16881 ;; Hardware stack levels used:    1
 16882 ;; Hardware stack levels required when called:    1
 16883 ;; This function calls:
 16884 ;;		_get10msTick
 16885 ;;		_reset10msTick
 16886 ;; This function is called by:
 16887 ;;		_ISR
 16888 ;; This function uses a non-reentrant model
 16889 ;;
 16890                           
 16891                           
 16892                           ;psect for function _pushButtonISR
 16893  06F2                     _pushButtonISR:	
 16894                           
 16895                           ;inputs.c: 40:  uint8_t time;;inputs.c: 42:  if (!PORTAbits.RA7) {
 16896                           
 16897                           ;incstack = 0
 16898                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0+pclath+cstack]
 16899  06F2  0140               	movlb	0	; select bank0
 16900  06F3  1B8C               	btfsc	12,7	;volatile
 16901  06F4  2EF6               	goto	i1l5927
 16902                           
 16903                           ;inputs.c: 43:   reset10msTick();
 16904  06F5  2F15               	ljmp	i1l5459
 16905  06F6                     i1l5927:	
 16906                           ;inputs.c: 44:  } else {
 16907                           
 16908                           
 16909                           ;inputs.c: 45:   time = get10msTick();
 16910  06F6  2712  3186         	fcall	_get10msTick
 16911  06F8  00F0               	movwf	pushButtonISR@time
 16912                           
 16913                           ;inputs.c: 46:   if ((time > 5) & (time <= 50))
 16914  06F9  3006               	movlw	6
 16915  06FA  0270               	subwf	pushButtonISR@time,w
 16916  06FB  3033               	movlw	51
 16917  06FC  1C03               	skipc
 16918  06FD  2F05               	goto	L26
 16919  06FE  0270               	subwf	pushButtonISR@time,w
 16920  06FF  1803               	skipnc
 16921  0700  2F04               	goto	i1l5935
 16922                           
 16923                           ;inputs.c: 48:    g_pbState = PB_SHORT;
 16924  0701  3001               	movlw	1
 16925  0702  00C9               	movwf	_g_pbState^(0+384)	;volatile
 16926  0703  0008               	return
 16927  0704                     i1l5935:	
 16928  0704  3033               	movlw	51
 16929  0705                     L26:	
 16930  0705  0270               	subwf	pushButtonISR@time,w
 16931  0706  1C03               	skipc
 16932  0707  2F0F               	goto	i1l5941
 16933  0708  3097               	movlw	151
 16934  0709  0270               	subwf	pushButtonISR@time,w
 16935  070A  1803               	skipnc
 16936  070B  2F0F               	goto	i1l5941
 16937                           
 16938                           ;inputs.c: 51:    g_pbState = PB_LONG;
 16939  070C  3002               	movlw	2
 16940  070D  00C9               	movwf	_g_pbState^(0+384)	;volatile
 16941  070E  0008               	return
 16942  070F                     i1l5941:	
 16943                           
 16944                           ;inputs.c: 54:    g_pbState = PB_ABORT;
 16945  070F  3003               	movlw	3
 16946  0710  00C9               	movwf	_g_pbState^(0+384)	;volatile
 16947  0711  0008               	return
 16948  0712                     __end_of_pushButtonISR:	
 16949  0712                     __ptext82:	
 16950 ;; *************** function _get10msTick *****************
 16951 ;; Defined at:
 16952 ;;		line 33 in file "interrupt.c"
 16953 ;; Parameters:    Size  Location     Type
 16954 ;;		None
 16955 ;; Auto vars:     Size  Location     Type
 16956 ;;		None
 16957 ;; Return value:  Size  Location     Type
 16958 ;;                  1    wreg      unsigned char 
 16959 ;; Registers used:
 16960 ;;		wreg
 16961 ;; Tracked objects:
 16962 ;;		On entry : 3F/0
 16963 ;;		On exit  : 3F/3
 16964 ;;		Unchanged: 0/0
 16965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16970 ;;Total ram usage:        0 bytes
 16971 ;; Hardware stack levels used:    1
 16972 ;; This function calls:
 16973 ;;		Nothing
 16974 ;; This function is called by:
 16975 ;;		_pushButtonISR
 16976 ;; This function uses a non-reentrant model
 16977 ;;
 16978                           
 16979                           
 16980                           ;psect for function _get10msTick
 16981  0712                     _get10msTick:	
 16982                           
 16983                           ;incstack = 0
 16984                           ; Regs used in _get10msTick: [wreg]
 16985  0712  0143               	movlb	3	; select bank3
 16986  0713  084B               	movf	_tick10ms^(0+384),w	;volatile
 16987  0714  0008               	return
 16988  0715                     __end_of_get10msTick:	
 16989  007E                     btemp	set	126	;btemp
 16990  007E                     int$flags	set	126
 16991  007E                     wtemp0	set	126
 16992  0715                     __ptext81:	
 16993 ;; *************** function _reset10msTick *****************
 16994 ;; Defined at:
 16995 ;;		line 41 in file "interrupt.c"
 16996 ;; Parameters:    Size  Location     Type
 16997 ;;		None
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;		None
 17000 ;; Return value:  Size  Location     Type
 17001 ;;                  1    wreg      void 
 17002 ;; Registers used:
 17003 ;;		status,2
 17004 ;; Tracked objects:
 17005 ;;		On entry : 3F/0
 17006 ;;		On exit  : 3F/3
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17013 ;;Total ram usage:        0 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; This function calls:
 17016 ;;		Nothing
 17017 ;; This function is called by:
 17018 ;;		_pushButtonISR
 17019 ;; This function uses a non-reentrant model
 17020 ;;
 17021                           
 17022                           
 17023                           ;psect for function _reset10msTick
 17024  0715                     _reset10msTick:	
 17025  0715                     i1l5459:	
 17026                           ;incstack = 0
 17027                           ; Regs used in _reset10msTick: [status,2]
 17028                           
 17029  0715  0143               	movlb	3	; select bank3
 17030  0716  01CB               	clrf	_tick10ms^(0+384)	;volatile
 17031  0717  0008               	return
 17032  0718                     __end_of_reset10msTick:	


Data Sizes:
    Strings     379
    Constant    78
    Data        60
    BSS         235
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     78      80
    BANK3            80      1      79
    BANK4            80      0      35
    BANK5            80      0      80
    BANK6            80      0      49
    BANK7            80      0      48
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           75      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    S945$1$0	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    channelSetup@data	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    setOutputPower@data	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    setLensDia@data	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    sp__getStateFunc$0	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    func$0	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK4[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_33(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_33(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), dbuf(BANK5[80]), STR_12(CODE[7]), 
		 -> STR_11(CODE[7]), sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 80
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), dbuf(BANK5[80]), STR_12(CODE[7]), 
		 -> STR_11(CODE[7]), sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK5[80]), sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK5[80]), sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), 
		 -> dbuf(BANK5[80]), STR_16(CODE[13]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[13]), STR_9(CODE[13]), sBuf2(BANK3[13]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), 
		 -> dbuf(BANK5[80]), STR_16(CODE[13]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[13]), STR_9(CODE[13]), sBuf2(BANK3[13]), 

    strcat@src	PTR const unsigned char  size(1) Largest target is 13
		 -> sBuf2(BANK3[13]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 49
		 -> sBuf1(BANK6[49]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_22(CODE[14]), STR_20(CODE[13]), STR_18(CODE[35]), STR_10(CODE[10]), 
		 -> STR_8(CODE[16]), STR_7(CODE[15]), STR_5(CODE[42]), STR_4(CODE[13]), 
		 -> STR_3(CODE[14]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 49
		 -> sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK2[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 49
		 -> sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    S1690_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 49
		 -> sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 49
		 -> sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_22(CODE[14]), STR_20(CODE[13]), STR_18(CODE[35]), STR_10(CODE[10]), 
		 -> STR_8(CODE[16]), STR_7(CODE[15]), STR_5(CODE[42]), STR_4(CODE[13]), 
		 -> STR_3(CODE[14]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_22(CODE[14]), STR_20(CODE[13]), STR_18(CODE[35]), STR_10(CODE[10]), 
		 -> STR_8(CODE[16]), STR_7(CODE[15]), STR_5(CODE[42]), STR_4(CODE[13]), 
		 -> STR_3(CODE[14]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 42
		 -> STR_22(CODE[14]), STR_20(CODE[13]), STR_18(CODE[35]), STR_10(CODE[10]), 
		 -> STR_8(CODE[16]), STR_7(CODE[15]), STR_5(CODE[42]), STR_4(CODE[13]), 
		 -> STR_3(CODE[14]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 13
		 -> ?_sprintf(BANK2[2]), STR_12(CODE[7]), STR_11(CODE[7]), sBuf2(BANK3[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    stoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 13
		 -> ?_sprintf(BANK2[2]), STR_12(CODE[7]), STR_11(CODE[7]), sBuf2(BANK3[13]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 13
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), STR_12(CODE[7]), STR_11(CODE[7]), 
		 -> sBuf2(BANK3[13]), 

    efgtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    spinInput@input	PTR float  size(1) Largest target is 4
		 -> setLensDia@test(BANK3[4]), setOutputPower@test(BANK3[4]), 

    channelView$1150	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_11(CODE[7]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK5[80]), sBuf1(BANK6[49]), sBuf2(BANK3[13]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 49
		 -> sBuf1(BANK6[49]), 

    channelView@data	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    statusView@data	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    menu@data	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    sp__getStateFunc	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    menu@func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    S945$func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl.func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    p_fct	PTR FTN(PTR struct .,)unsigned char [5] size(2) Largest target is 1
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 49
		 -> STR_21(CODE[12]), STR_19(CODE[13]), STR_17(CODE[37]), STR_6(CODE[13]), 
		 -> sBuf1(BANK6[49]), sBuf2(BANK3[13]), STR_2(CODE[49]), STR_1(CODE[13]), 

    convertAnalogValues@data	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 

    sp__getDataPacket	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    checkSensor@dp	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    checkSensor@data	PTR struct . size(2) Largest target is 117
		 -> data(BIGRAM[117]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _spinInput->___flsub
    _menuError->_OLED_print_xy
    _OLED_returnHome->_OLED_command
    _OLED_clearDisplay->_OLED_command
    _getStateFunc->___wmul
    _getNextState->___wmul
    _strcat->_strcpy
    _vfpfcnvrt->_efgtoa
    _stoa->_fputc
    _efgtoa->_floorf
    _tolower->_isupper
    _strcpy->_strlen
    _floorf->___fldiv
    ___flsub->___fladd
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___almod
    _atoi->___wmul
    _returnToPage->_OLED_command
    _returnToPage->___wmul
    _OLED_scrollDisplayRight->_OLED_command
    _OLED_scrollDisplayLeft->_OLED_command
    _OLED_print_xy->_OLED_command
    _OLED_print_xy->_OLED_write
    _convertAnalogValues->___fldiv
    _ema->___lmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    ___fladd->___flmul
    _checkSensor->___flge
    _timeSince->_timeNow
    ___flge->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_menu
    _menu->_channelView
    _statusView->_sprintf
    _setOutputPower->_sprintf
    _setLensDia->_sprintf
    _channelView->_sprintf
    _channelSetup->_sprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  304161
                                              0 BANK3      1     1      0
                  _OLED_clearDisplay
                          _OLED_init
              _OLED_loadSpecialChars
                    _OLED_returnHome
                        _checkSensor
                _convertAnalogValues
                         _initialize
                               _menu
 ---------------------------------------------------------------------------------
 (1) _menu                                                11     9      2  288749
                                             67 BANK2     11     9      2
                       _channelSetup *
                        _channelView *
                       _getNextState
                              _getPB
                       _getStateFunc
                          _menuError
                         _setLensDia *
                     _setOutputPower *
                         _statusView *
 ---------------------------------------------------------------------------------
 (2) _statusView                                           2     0      2   52579
                                             52 BANK2      2     0      2
                      _OLED_print_xy
                    _OLED_returnHome
                             _paging
                       _returnToPage
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       2     0      2   58513
                                             52 BANK2      2     0      2
                      _OLED_print_xy
                       _returnToPage
                          _spinInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           3     1      2   59069
                                             52 BANK2      3     1      2
                      _OLED_print_xy
                            ___fltol
                       _returnToPage
                          _spinInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           14     2     12    7853
                                             67 BANK0     12     0     12
                                              0 BANK1      2     2      0
                            ___fladd
                             ___flge
                            ___flsub
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _menuError                                            0     0      0    3497
                  _OLED_clearDisplay
                      _OLED_print_xy
                    _OLED_returnHome
 ---------------------------------------------------------------------------------
 (3) _OLED_returnHome                                      0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (3) _OLED_clearDisplay                                    0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _getStateFunc                                         5     3      2    2180
                                              6 BANK0      5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _getPB                                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         5     3      2    2464
                                              6 BANK0      5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         15    13      2   58188
                                             52 BANK2     15    13      2
                      _OLED_print_xy
                             ___wmul
                             _paging
                       _returnToPage
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcat                                               4     3      1    2147
                                             17 BANK0      4     3      1
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         2     0      2   51886
                                             52 BANK2      2     0      2
                      _OLED_print_xy
                             _paging
                       _returnToPage
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             31     9     22   45401
                                             21 BANK2     31     9     22
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             7     4      3   43889
                                             73 BANK1      7     4      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           37    35      2   43371
                                             67 BANK1      6     4      2
                                              0 BANK2     21    21      0
                               _atoi
                               _dtoa
                             _efgtoa
                              _fputc
                            _isdigit
                            _isupper
                               _stoa
                            _strncmp
                            _tolower
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     5      4     410
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (6) _stoa                                                21    19      2    2088
                                              8 BANK0     21    19      2
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _efgtoa                                              65    60      5   26850
                                             72 BANK0      8     3      5
                                             10 BANK1     57    57      0
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (6) _tolower                                              6     4      2     944
                                              4 BANK0      6     4      2
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              4     2      2     465
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _strcpy                                              12     8      4    1567
                                              5 BANK0     12     8      4
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (7) _floorf                                              18    14      4     492
                                             64 BANK0      8     4      4
                                              0 BANK1     10    10      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___fpclassifyf                                       14    10      4     288
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (7) ___fltol                                             10     6      4     457
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (7) ___flsub                                              8     0      8    3073
                                             59 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___flneg                                              4     0      4     121
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) ___fleq                                              12     4      8     394
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                20    16      4    5715
                                             23 BANK0     20    16      4
                            ___aldiv
                            ___almod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                  9     6      3    4109
                                             14 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     228
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                6     5      1    1605
                                              8 BANK0      6     5      1
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3    1290
                                              0 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                             10 BANK0      4     2      2
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___almod                                             10     2      8     448
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             14     6      8     452
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (6) _atoi                                                14    12      2    3061
                                              6 BANK0     14    12      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (7) _isspace                                              5     3      2     207
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              4     2      2     313
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         2     2      0    2466
                                              6 BANK0      2     2      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    2068
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1226
                                              6 BANK0      6     5      1
             _OLED_scrollDisplayLeft
            _OLED_scrollDisplayRight
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayRight                              0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayLeft                               0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (3) _OLED_print_xy                                        9     6      3    2793
                                              6 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convertAnalogValues                                 12    10      2   10667
                                             64 BANK0      8     6      2
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                   _adcGetConversion
                                _ema
 ---------------------------------------------------------------------------------
 (2) _ema                                                 16     8      8    1214
                                             12 BANK0     16     8      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     418
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _adcGetConversion                                     4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) ___flmul                                             25    17      8    3767
                                             14 BANK0     25    17      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) __Umul8_16                                            8     5      3     799
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (7) ___fldiv                                             25    17      8    2166
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fladd                                             20    12      8    2572
                                             39 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          7     5      2    2805
                                             51 BANK0      7     5      2
                             ___flge
                           ___xxtofl
                      _getDataPacket
                            _timeNow
                          _timeSince
                    _uartIsDataReady
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIsDataReady                                      1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _timeSince                                           16    12      4     285
                                              4 BANK0     16    12      4
                            _timeNow
 ---------------------------------------------------------------------------------
 (3) _timeNow                                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getDataPacket                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     626
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (7) ___flge                                              12     4      8    1398
                                             39 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               50    50      0     796
                                              6 BANK0     50    50      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (4) _OLED_write                                           1     1      0     352
                                              5 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                              6 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (4) _OLED_command                                         1     1      0     352
                                              5 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (5) _OLED_waitForReady                                    1     1      0      24
                                              0 BANK0      1     1      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _OLED_send                                            2     1      1     306
                                              3 BANK0      2     1      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (6) _OLED_write4bits                                      3     3      0      88
                                              0 BANK0      3     3      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (6) _OLED_pulseEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 4     4      0     438
                                              7 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (12) _uartReceiveISR                                      0     0      0     326
                            _strncpy
 ---------------------------------------------------------------------------------
 (13) _strncpy                                             5     2      3     326
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (12) _rotISR                                              7     7      0      23
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (12) _pushButtonISR                                       1     1      0      89
                                              0 COMMON     1     1      0
                        _get10msTick
                      _reset10msTick
 ---------------------------------------------------------------------------------
 (13) _reset10msTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _get10msTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_clearDisplay
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write4bits
       _OLED_pulseEnable
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_returnHome
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _checkSensor
     ___flge
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
     ___xxtofl
     _getDataPacket
     _timeNow
     _timeSince
       _timeNow
     _uartIsDataReady
     _uartSendByte
   _convertAnalogValues
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___xxtofl
     _adcGetConversion
     _ema
       ___lmul
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       ___wmul
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
       _strcat
         _strcpy
           _strlen (ARG)
         _strlen
       _strcpy
         _strlen (ARG)
     _getNextState *
       ___wmul
     _getPB *
     _getStateFunc *
       ___wmul
     _menuError *
       _OLED_clearDisplay
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_returnHome
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       ___fltol
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         _getRotDir
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         _getRotDir
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_returnHome
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper

 _ISR (ROOT)
   _pushButtonISR
     _get10msTick
     _reset10msTick
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     221       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     4E      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      1      4F      12       98.8%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      23      14       43.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      50      16      100.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      31      18       61.3%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      30      20       60.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              4B      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     221      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Jan 26 13:58:03 2020

                   _pushButtonISR 06F2                     returnToPage@n 0027          __end_of_transition_table 20F1  
                    _stateFuncTbl 2000                      ___fldiv@aexp 005F                      ___fldiv@bexp 005E  
                               pc 0002                      ___fldiv@sign 0057                       __CFG_CP$OFF 0000  
                              PL2 1DF8                                PL4 1E04                                PL6 1E0B  
                              PL8 1573                      ___awdiv@sign 0025               ___wmul@multiplicand 0022  
                  ??_getStateFunc 0028           ??_OLED_loadSpecialChars 0026               __Umul8_16@word_mpld 0025  
                             PL10 1589                               PL20 15E2                               PL12 061F  
                             PL30 1632                               PL22 1602                               PL14 159A  
                             PL40 1E43                               PL32 1642                               PL24 1E1E  
                             PL16 15AE                               PL50 0F09                               PL42 1E58  
                             PL34 1E38                               PL26 1E31                               PL18 15C1  
                             PL60 1689                               PL52 0F19                               PL44 1E6B  
                             PL36 165B                               PL28 1622                               PL70 0F42  
                             PL62 1E7B                               PL54 1E73                               PL46 0EFE  
                             PL38 0EF1                       __CFG_LVP$ON 0000                               PL80 1FED  
                             PL72 0F4B                               PL64 0F30                               PL56 167A  
                             PL48 1669                               PL90 1690                               PL82 1E90  
                             PL74 1E8B                               PL66 0F39                               PL58 0F23  
                             PL92 1E98                               PL84 1776                               PL76 0F58  
                             PL68 1E82                               PL94 1696                               PL86 02C4  
                             PL78 02BD                               PL96 1E9E                               PL88 02CF  
                             PL98 1EA7                               l105 08C3                               l153 0E4E  
                             l138 0DCC                               l350 0EED                               l441 1899  
                             l178 09CE                               l641 1181                               l580 04F6  
                             l652 11B7                               l708 1F97                               l717 1FD7  
                             l590 033A                               l670 12BC                               l577 04DA  
                             l585 0320                               l836 03F9                               l950 14FA  
                             l782 0E28                               l952 1522                               l849 0462  
                             _ISR 0004                               _abs 04AF                               _ema 0DD9  
                             _pad 04C7                      ___awmod@sign 0025                      __CFG_BORV$LO 0000  
                             wreg 0009                  returnToPage@page 0026                      ___flmul@aexp 003B  
                    ___flmul@bexp 0040                      ___flmul@sign 003A                      ___flmul@temp 0045  
                    ___flmul@prod 0041                     __CFG_BBEN$OFF 0000                              S6881 077D  
                            PL100 1EB0                              PL110 02D6                              PL102 0F5F  
                            PL200 1F06                              PL120 1EC7                              PL112 02DF  
                            PL104 1EB9                              PL210 0FC9                              PL202 1F0B  
                            PL130 16AE                              PL122 02E7                              PL114 1EC1  
                            PL106 0F68                              PL212 1712                              PL204 0FBF  
                            PL140 0F98                              PL132 1ECF                              PL124 16A6  
                            PL116 169D                              PL108 0F71                              PL214 1F56  
                            PL206 0FC4                              PL150 0F9F                              PL142 16C2  
                            PL134 16B6                              PL126 0F82                              PL118 0F7A  
                            PL208 1F0F                              PL160 1F4F                              PL152 1EDD  
                            PL144 1F49                              PL136 0F92                              PL128 0F8A  
                            PL170 0FB3                              PL162 1EE3                              PL154 02EF  
                            PL146 1FF9                              PL138 16BC                              PL180 16D3  
                            PL172 16C7                              PL164 1EE9                              PL156 0FA6  
                            PL148 1ED7                              PL190 052C                              PL182 1EEF  
                            PL174 16CD                              PL166 0FAD                              PL158 0FF9  
                            PL192 16D9                              PL184 0FB9                              PL176 0526  
                            PL168 02F6                              PL194 1F01                              PL186 1EF5  
                            PL178 02FC                              PL196 062E                              PL188 1EFB  
                            PL198 0532                              ?_ISR 0070                      __CFG_ZCD$OFF 0000  
                    ___fltol@exp1 0029                              l1200 0D9C                              l1113 02B7  
                            l1122 13EF                              l1123 13ED                              ?_abs 002A  
                            l1070 01B5                              l1126 1405                              l1071 01B3  
                            l1151 14D6                              l1127 1403                              l1080 020E  
                            l1065 019A                              l1066 0198                              l1162 0C43  
                            l1314 1DF7                              l1163 0C41                              l1076 0215  
                            l1180 0D2F                              l1093 0274                              l1149 14C1  
                            l1261 060E                              l1078 0207                              l1158 0C31  
                            l1238 1D87                              l1087 022B                              l1079 020D  
                            l1159 0C2F                              l1088 022C                              l1098 0289  
                            l1187 0D6E                              l4013 04D8                              l4023 04FC  
                            ?_ema 002C                              l4105 19B8                              l4009 04D0  
                            l4019 04DC                              l4043 1754              __end_of_channelSetup 188B  
                            l4109 19BE                              l4205 1791                              l4053 1772  
                            l5021 1FA8                              l4151 043E                              l4231 17B9  
                            l4223 17AD                              l4215 179E                              l4047 1758  
                            l5007 1F76                              l4129 0408                              l5025 1FB0  
                            l5113 1F40                              l5105 1F3C                              l4155 044C  
                            l4147 0438                              l4139 041B                              l4227 17B1  
                            l4243 17C8                              l5043 1FE3                              l5035 1FB7  
                            l5027 1FB4                              l5107 1F24                              l5301 1A85  
                            l5061 1D50                              l5053 1D3C                              l4333 00FD  
                            l4317 00E2                              l4093 05F9                              l5045 1FE7  
                            l4431 1474                              l4407 142A                              l5071 1D6F  
                            l4175 047E                              l4183 049C                              l4167 046F  
                            l4255 17DA                              l4263 17EA                              l4247 17CF  
                            l4343 0108                              l4319 00E7                              l4087 05C8  
                            l5039 1FDB                              l4425 145B                              l4433 1446  
                            l4521 0C45                              l4345 0111                              l4337 0104  
                            l4089 05E8                              l6201 10E0                              l4291 14EB  
                            l4451 148D                              l4435 1476                              l4603 0D21  
                            l5403 0E32                              l5315 1AC5                              l5075 1D8A  
                            l5067 1D5A                              l4187 04A6                              l4179 0496  
                            l4267 17F2                              l4259 17E6                              l4283 1710  
                            l4275 16EF                              l4461 14A2                              l4525 0C4F  
                            l4509 0C33                              l5085 1DAC                              l5069 1D5E  
                            l4701 03D3                              l6141 153C                              l6301 1277  
                            l6221 1125                              ?_pad 002E                              l4471 14B4  
                            l4623 072D                              l4199 1788                              l4279 16FE  
                            l6311 12C3                              l6223 113C                              l4297 150E  
                            l4481 14CF                              l4457 14A0                              l4449 147C  
                            l4705 03DA                              l6241 117C                              l6217 110C  
                            l6209 10F2                              l6161 1090                              l6153 107E  
                            l5521 18C1                              l4635 09CB                              l5419 0AFF  
                            l5347 1B10                              l5355 1B20                              l3763 1DB8  
                            l6139 1534                              l6323 12E2                              l6243 1183  
                            l6227 1147                              l5515 189D                              l3773 09E7  
                            l5701 0D79                              l3933 028A                              l3925 027E  
                            l3909 022F                              l4573 0CDA                              l4661 0335  
                            l6421 13C1                              l6405 13A9                              l6309 12BA  
                            l6229 115E                              l6165 1097                              l6173 10A4  
                            l3919 026C                              l3847 01C1                              l4487 14D7  
                            l4399 1422                              l4583 0CEF                              l5367 1B2A  
                            l5375 1B39                              l3767 1DD6                              l3791 1B55  
                            l6343 12F2                              l6351 1309                              l6239 1173  
                            l6183 10B9                              l6191 10CB                              l5535 18E1  
                            l5713 0D8C                              l5705 0D7B                              l3961 02A7  
                            l3945 0298                              l3937 028D                              l4593 0D01  
                            l3785 050F                              l3793 1B60                              l4673 0376  
                            l4657 0324                              l6345 1301                              l6265 11C4  
                            l6257 11B4                              l6249 1188                              l5529 18D0  
                            l5393 015B                              l5731 0DB1                              l5707 0D83  
                            l3939 028F                              l3891 0210                              l4579 0CED  
                            l4683 03B4                              l4667 0349                              l6371 133F  
                            l6363 132F                              l6291 1210                              l6275 11D0  
                            l6267 11C7                              l6507 1C73                              l5491 0FD1  
                            l5717 0D9A                              l3973 02B8                              l3949 029A  
                            l3877 01DF                              l4597 0D11                              l4685 0355  
                            l4693 03C0                              l4669 034E                              l6429 13D7  
                            l6453 1BBE                              l6613 1A47                              l5719 0D91  
                            l3983 0D40                              l6359 1320                              l6295 124C  
                            l6279 11D8                              l6519 1C8B                              l6455 1BCA  
                            l6463 1BD9                              l6623 1A67                              l5841 09AA  
                            l3969 02B3                              l3897 021B                              l4697 03C8  
                            l6385 1359                              l6289 11EA                              l6553 1D03  
                            l6537 1CD4                              l6457 1BCF                              l5497 0FF1  
                            l3987 0D46                              l6299 1273                              l6547 1CF3  
                            l6475 1BF3                              l6563 1D0E                              l5861 0A14  
                            l6397 135C                              l6557 1D08                              l6477 1BFC  
                            l6485 1C0B                              l6637 18F1                              l5863 0A33  
                            l6399 1394                              l6495 1C3B                              l6479 1C01  
                            l6671 1977                              l6663 1950                              l5697 0D66  
                            l5881 0A72                              l5873 0AAF                              l5857 0A0C  
                            l6577 1B6F                              l6673 197D                              l6657 1925  
                            l6649 1922                              l6753 0EAE                              l5875 0AB2  
                            l5859 0A10                              l6499 1C48                              l6579 1B86  
                            l6667 196B                              l6659 192B                              l6755 0EB1  
                            l5869 0A52                              l6685 19A8                              l6669 1971  
                            l6677 198D                              l5895 0AC5                              l6679 1985  
                            l5889 0AC1                              l6883 1D67                              l6885 0ACF  
                            l6879 199D                              STR_1 216B                              STR_2 200F  
                            STR_3 2101                              STR_4 211D                              STR_5 2040  
                            STR_6 2033                              STR_7 205B                              STR_8 20F1  
                            STR_9 212A                              u4200 176E                              u4210 176F  
                            u4220 1D2C                              u4230 1D2D                              _PIE0 0716  
                            u4135 04E6                              _PIE3 0719                              _PIE4 071A  
                            u5035 14BA                              u4155 04B8                              u4315 05EC  
                            u4340 0755                              u5045 14C8                              u6005 1FC1  
                            u4350 0756                              u4270 058B                              u5215 0D07  
                            u4255 0577                              u3800 01FF                              u5225 0D18  
                            u4425 042D                              u5315 032E                              u4195 1760  
                            u4275 0587                              u6060 1D96                              u3645 1DD4  
                            u6070 1D97                              u5270 030F                              u3670 0741  
                            u4295 05B8                              u5280 0310                              u3680 0742  
                            u5345 03BE                              u4635 17E0                              u6405 1AD4  
                            u5365 0365                              u4565 17A6                              u3790 01FE  
                            u4495 048C                              u5375 0371                              u3785 01F3  
                            u8107 08FA                              u6435 1B0B                              u8117 0905  
                            u3893 0241                              u4685 170C                              u4765 00EA  
                            u7270 15BE                              u8207 09D0                              u8127 0910  
                            u4935 1469                              u8055 0ED5                              u7280 15BF  
                            u8217 09D6                              u8137 091B                              u6545 0AF0  
                            u7425 1197                              u8227 098C                              u8147 0926  
                            u7435 11B0                              u8067 08DC                              u5940 1F67  
                            u8237 09EA                              u8157 0931                              u8077 1B16  
                            u8167 093C                              u8087 1B30                              u8177 0947  
                            u8097 08E9                              u6850 09A2                              u8187 0952  
                            u7635 132D                              u7395 117A                              u8197 095D  
                            u7910 1CBB                              u5975 1F90                              u7920 1CBC  
                            u7770 1E68                              u7780 1E69                              u7695 139C  
                            _TMR0 059C                              _TMR1 020C         __size_of_OLED_pulseEnable 0009  
            __size_of_get10msTick 0003                     __CFG_FCMEN$ON 0000                     OLED_send@mode 0023  
                            abs@a 002A                              _data 277B                              _dbuf 02A0  
                            _atoi 1D38                              _main 089D                              _dtoa 0301  
                            _menu 0E94                  channelSetup@data 0154                              _prec 007B  
                            _nout 01B4                              pad@i 0032                              pad@p 002F  
                            fsr0h 0005                              fsr1h 0007                              indf0 0000  
                            fsr0l 0004                              indf1 0001                              fsr1l 0006  
                            pad@w 0034                              _stoa 1F5B                  channelSetup@page 01BF  
                            btemp 007E                     __CFG_BOREN$ON 0000                     ___fpclassifyf 1717  
                            start 0060                       ?_OLED_write 0070                      spinInput@dir 00A0  
                 ___fldiv@new_exp 0058                      spinInput@max 0067                      spinInput@min 0063  
                  ?_pushButtonISR 0070                      _tolower$1775 0028                     __CFG_CSWEN$ON 0000  
                   __CFG_MCLRE$ON 0000                             ??_ISR 0077                             ??_abs 002C  
                           ??_ema 0034                             ??_pad 0031                __size_of_OLED_init 0080  
              __size_of_OLED_send 000D                     ___fltol@sign1 0028                   __end_of___aldiv 0455  
                           ?_atoi 0026                   __end_of___almod 04AF                   __end_of___fladd 02BD  
                           ?_main 0070                             ?_dtoa 0037                             ?_menu 0163  
                 __end_of___fldiv 14DA                   __end_of___awdiv 17BE                   __end_of___flneg 1800  
                           STR_10 219E                             STR_11 21A8                             STR_12 21AF  
                           STR_20 2137                             STR_21 2192                             STR_13 2178  
                           STR_14 2144                             STR_22 210F                             STR_31 21C6  
                           STR_23 21B6                             STR_15 215E                             STR_24 21BE  
                           STR_16 2185                             STR_33 21C6                             STR_17 206A  
                   __CFG_WDTE$OFF 0000                             STR_18 20B2                             STR_27 21BA  
                           STR_19 2151                             STR_28 21C2                   __end_of___awmod 17F7  
                 __end_of___flmul 0D3A   checkSensor@sensorUpdateInterval 01B0                   __end_of___flsub 1573  
                 __end_of___fltol 0120                             ?_stoa 0028                             _T1CLK 0211  
                 ___awdiv@divisor 0020                             _T1CON 020E                             _IOCAN 1F3E  
                           _IOCAP 1F3D                             _IOCCN 1F54                             i1l283 0057  
                           i1l275 0012                             i1l284 004F                             i1l277 002E  
                           i1l287 005E                   ___awdiv@counter 0024                      vfpfcnvrt@fmt 00E3  
           __end_of_reset10msTick 0718                             _TRISA 0012                             _TRISB 0013  
                           _TRISC 0014            uartReceiveISR@checksum 01C4               ___lmul@multiplicand 0024  
            __size_of_checkSensor 00E8                     __CFG_WRTB$OFF 0000                     __CFG_WRTC$OFF 0000  
                  OLED_send@value 0024                             _sBuf1 0320                             _sBuf2 01CD  
                           _getPB 0EDF                    statusView@data 0154                             _flags 016E  
                  statusView@page 01C1                             ema@in 002C                  ?_uartIsDataReady 0070  
                           _fputc 1DB1                             _fputs 050C                   __end_of_isdigit 0759  
                           atoi@n 0032                             pad@fp 0036                             atoi@s 0026  
                           _width 01B6                             _putch 1DF7                             dtoa@d 0037  
                           dtoa@i 0049                             dtoa@n 0045                             dtoa@p 003F  
                           dtoa@s 0043                             dtoa@w 0041                   __end_of_isspace 0731  
                 __end_of_isupper 0745                             pclath 000A                   __end_of_timeNow 0B2E  
            __size_of_channelView 00CF                             stoa@i 0032                             stoa@l 003B  
                           stoa@p 0039                             stoa@s 0028                             stoa@w 0034  
                           status 0003                             wtemp0 007E                   __end_of_sprintf 1ABA  
                  ?___fpclassifyf 0020                   __end_of_tolower 1D38                   __end_of_strncmp 1F49  
                 __end_of_strncpy 0692                      __end_ofPL100 1EB9                      __end_ofPL110 02DF  
                    __end_ofPL102 0F68                      __end_ofPL200 1F0B                      __end_ofPL120 1ECF  
                    __end_ofPL112 02E7                      __end_ofPL104 1EC1                      __end_ofPL210 0FCE  
                    __end_ofPL202 1F0F                      __end_ofPL130 16B6                      __end_ofPL122 02EF  
                    __end_ofPL114 1EC7                      __end_ofPL106 0F71                      __end_ofPL212 1717  
                    __end_ofPL204 0FC4                      __end_ofPL140 0F9F                      __end_ofPL132 1ED7  
                    __end_ofPL124 16AE                      __end_ofPL116 16A6                      __end_ofPL108 0F7A  
                    __end_ofPL214 1F5B                      __end_ofPL206 0FC9                      __end_ofPL150 0FA6  
                    __end_ofPL142 16C7                      __end_ofPL134 16BC                      __end_ofPL126 0F8A  
                    __end_ofPL118 0F82                      __end_ofPL208 1F14                      __end_ofPL160 1F56  
                    __end_ofPL152 1EE3                      __end_ofPL144 1F4F                      __end_ofPL136 0F98  
                    __end_ofPL128 0F92                      __end_ofPL170 0FB9                      __end_ofPL162 1EE9  
                    __end_ofPL154 02F6                      __end_ofPL146 2000                      __end_ofPL138 16C2  
                    __end_ofPL180 16D9                      __end_ofPL172 16CD                      __end_ofPL164 1EEF  
                    __end_ofPL156 0FAD                      __end_ofPL148 1EDD                      __end_ofPL190 0532  
                    __end_ofPL182 1EF5                      __end_ofPL174 16D3                      __end_ofPL166 0FB3  
                    __end_ofPL158 1000                      __end_ofPL192 16DE                      __end_ofPL184 0FBF  
                    __end_ofPL176 052C                      __end_ofPL168 02FC                      __end_ofPL194 1F06  
                    __end_ofPL186 1EFB                      __end_ofPL178 0301                      __end_ofPL196 0633  
                    __end_ofPL188 1F01                      __end_ofPL198 0537                     spinInput@step 006B  
                 __initialization 0844                      __end_of_atoi 1DB1                      __end_of_main 08E2  
                    __end_of_dtoa 03E9                      __end_of_menu 0EDF                      __end_of_stoa 1FED  
                  __CFG_SAFEN$OFF 0000                            ??_atoi 0028                            ??_main 01EE  
                          ??_dtoa 003B                            ??_menu 0165                            ??_stoa 002A  
               ?_adcGetConversion 0020                    OLED_print_xy@s 0027              __end_of_getNextState 18E7  
         __size_of_setOutputPower 0037                ??_adcGetConversion 0022      __size_of_convertAnalogValues 00E8  
             __size_of_OLED_write 0007                setOutputPower@data 0154                setOutputPower@test 01DE  
                          ?_getPB 0070           _OLED_scrollDisplayRight 1B45                            _ADCON1 009E  
                          ?_fputc 0020                            ?_fputs 0028                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0022                            _ANSELA 1F38  
                          ?_putch 0070                            _ANSELB 1F43                            _ANSELC 1F4E  
              __CFG_RSTOSC$HFINT1 0000                            _T0CON0 059E                            _T0CON1 059F  
                          _RC1REG 0119                            _RC1STA 011D                            _RC6PPS 1F26  
                          i1l6031 001D                            i1l6043 002B                            i1l6037 0024  
                  __CFG_WDTCCS$SC 0000                            i1l5459 0715                            i1l5483 0688  
                          i1l5477 066A                            i1l5479 0682             __end_of_getDataPacket 0B2F  
                          i1l5941 070F                            i1l5935 0704                            i1l5927 06F6  
                          i1l5951 06EC                            i1l5961 063A                            i1l5973 0656  
                          i1l5967 0641                            i1l5979 0665                            _INTCON 000B  
               __end_of_OLED_init 0962                 __end_of_OLED_send 09C4                            _OSCFRQ 0893  
                          _SPBRGL 011B                            _TX1REG 011A                            _TX1STA 011E  
            __end_of_getStateFunc 0FF9                  __end_of___xxtofl 0DBA                   ??_pushButtonISR 0070  
                  __CFG_PWRTE$OFF 0000                      vfprintf@cfmt 00EE                            ___flge 14DA  
                          ___fleq 16DE                            ___lmul 0E24        OLED_loadSpecialChars@F7902 03A0  
                       ??___aldiv 0028                         ??___almod 0028                         ??___fladd 004F  
                          ___wmul 19B6                         ??___fldiv 004F                         ??___awdiv 0024  
                       ??___flneg 0024                    __CFG_STVREN$ON 0000                         ??___awmod 0024  
                       ??___flmul 0036                         ??___flsub 0063                         ??___fltol 0024  
                          _efgtoa 103E          __size_of_OLED_returnHome 0002                            _floorf 0537  
                          _paging 1AF0                            ema@tmp 0038                  ___awdiv@quotient 0026  
                 ___awmod@divisor 0020                            _rotISR 06C2                     ?_OLED_command 0070  
                 ___awmod@counter 0024                            pad@buf 002E                            _strcat 1ADC  
                          dtoa@fp 003E                            _strcpy 1534                            _strlen 1B51  
                          menu@pb 016A                            fputc@c 0020                            fputs@c 002A  
                          fputs@i 002B                            fputs@s 002D                         ??_isdigit 0022  
              __size_of__Umul8_16 0017             __size_of_channelSetup 002B                   ___fpclassifyf@e 0028  
                 ___fpclassifyf@u 002A                   ___fpclassifyf@x 0020           adcGetConversion@channel 0023  
           OLED_waitForReady@busy 0020                         ??_isspace 0022                         ??_isupper 0022  
                       ??_timeNow 0024                 OLED_command@value 0025                            stoa@cp 0037  
                          stoa@fp 0036                            putch@c 0070                  __end_of_vfprintf 1B8F  
                       ??_sprintf 0070                         ??_tolower 0026                         ??_strncmp 0024  
                       ??_strncpy 0073                  _OLED_pulseEnable 09E7                        ___flge@ff1 0047  
                      ___flge@ff2 004B                   ??___fpclassifyf 0024                     checkSensor@dp 0059  
                    ___xxtofl@arg 002A                      ___xxtofl@exp 0029                      ___xxtofl@val 0020  
                      ___fleq@ff1 0020                        ___fleq@ff2 0024                    spinInput@input 00A1  
         __end_of__initialization 089A                        ___flneg@f1 0020                        ___fltol@f1 0020  
        __size_of_OLED_write4bits 002E                    __pcstackCOMMON 0070                      __pidataBANK3 0759  
                    __pidataBANK7 0692                     __end_of_getPB 0EE7           convertAnalogValues@data 0060  
         convertAnalogValues@avgI 01B8           convertAnalogValues@avgT 01BC           convertAnalogValues@avgV 01BA  
            uartReceiveISR@buffer 0220                     __end_of_fputc 1DF7                     __end_of_fputs 0526  
                    _channelSetup 1860                     __end_of_putch 1DF8                    ??_OLED_command 0025  
                      __end_ofPL2 1E04                        __end_ofPL4 1E0B                        __end_ofPL6 1E1E  
                      __end_ofPL8 1589    __size_of_OLED_loadSpecialChars 0020     __end_of_OLED_loadSpecialChars 09B7  
              __size_of_getRotDir 0009         ??_OLED_scrollDisplayRight 0026                           ??_getPB 0020  
          __size_of_OLED_print_xy 002E                           ??_fputc 0023                           ??_fputs 0029  
                      _dataPacket 0234                           ??_putch 0020                        __pbssBANK2 016E  
                      __pbssBANK3 01A0                        __pbssBANK4 0220                        __pbssBANK5 02A0  
                      __pbssBANK6 0320                uartIsDataReady@ret 0020           __size_of_uartReceiveISR 0035  
              __size_of_menuError 000F                      ??_OLED_write 0025                 __end_of__Umul8_16 0D51  
                      __pmaintext 089D                           ?___flge 0047                           ?___fleq 0020  
                         ?___lmul 0020                           ?___wmul 0020                 getStateFunc@state 0029  
                 __CFG_PPS1WAY$ON 0000                       setLensDia@i 0156                        __pintentry 0004  
                         ?_efgtoa 0068             __size_of_getNextState 004D                           ?_floorf 0060  
                         ?_paging 0026                 _OLED_waitForReady 09CB                    ___lmul@product 0028  
                         ?_rotISR 0070          ??_OLED_scrollDisplayLeft 0026                           ?_strcat 0031  
                         ?_strcpy 0025                           ?_strlen 0020                __size_of_timeSince 0045  
              ?_OLED_waitForReady 0070                    _setOutputPower 0062                 ??_OLED_returnHome 0026  
                       ?___xxtofl 0020                __size_of_spinInput 0067                           _OSCCON1 088D  
              __size_of_vfpfcnvrt 018E                __end_of_OLED_write 09CB                     ??_get10msTick 0070  
             ??_OLED_waitForReady 0020             __size_of_getStateFunc 002B                 pushButtonISR@time 0070  
                     rotISR@input 0076                      _getNextState 189A                 __end_of_getRotDir 1B51  
             _convertAnalogValues 0B38                        ema@average 002E                     _OLED_print_xy 1A6A  
       __end_of_OLED_waitForReady 09E7                           ___aldiv 03E9                   __size_of___flge 005A  
                 __size_of___fleq 0034                           ___almod 0455                           ___fladd 0187  
                         ___fldiv 13DC                           ___awdiv 177E                           ___flneg 17F7  
                 __size_of___lmul 0025                           ___awmod 17BE                           ___flmul 0C20  
                         ___flsub 1556                           ___fltol 00D9                   __size_of___wmul 0015  
                 OLED_write@value 0025                         ?_vfprintf 00E9                   __size_of_efgtoa 039E  
                   ?_uartSendByte 0070                   __size_of_floorf 00E8                   __size_of_paging 0052  
               ??_OLED_write4bits 0020                        _initialize 0E49                   __size_of_rotISR 0030  
          __end_of_setOutputPower 0099                           __ptext1 0E94                           __ptext2 0099  
                         __ptext3 0062                           __ptext4 1860                           __ptext5 18E7  
                         __ptext6 19CB                           __ptext7 0120                           __ptext8 188B  
                         __ptext9 0E92                     ??_checkSensor 0055                      _getStateFunc 0FCE  
                 __size_of_strcat 0014                   __CFG_WRTAPP$OFF 0000                   __size_of_strcpy 0022  
                 __size_of_strlen 0016                      __size_of_ISR 005C                  _channelView$1150 0160  
                _channelView$1964 015E                 __end_of_menuError 189A                      __size_of_abs 0018  
                    __size_of_ema 004B                      __size_of_pad 0045                           _isdigit 0745  
                      ??___xxtofl 0024                  ___awmod@dividend 0022              ?_convertAnalogValues 0060  
                ___aldiv@dividend 0024                           _isspace 0718                         _IOCAFbits 1F3F  
                 __CFG_WRTSAF$OFF 0000                           _isupper 0731                           efgtoa@c 006C  
                         efgtoa@d 00C2                           efgtoa@e 00DB                           efgtoa@f 0068  
                         efgtoa@g 00D7                           efgtoa@h 00CD                           efgtoa@i 00D5  
                         efgtoa@l 00D1                           efgtoa@m 00BE                           efgtoa@n 00DD  
                         efgtoa@p 00C7                           efgtoa@t 00BA                           efgtoa@u 00DF  
                         efgtoa@w 00CA                           _timeNow 0B1D                     ??_channelView 0156  
                         atoi@neg 002B                           _sprintf 1A98                           _tolower 1D1D  
                         clrloop0 0772                           _strncmp 1F14                           _strncpy 0668  
            end_of_initialization 089A                        _setLensDia 0099                           floorf@e 00A4  
                         floorf@m 00A0                           floorf@u 00A6                           floorf@x 0060  
                         paging@n 002B                    paging@lastPage 0026              __end_of_OLED_command 0997  
                         fputc@fp 0022                           init_ram 0765         __size_of_adcGetConversion 001F  
                         fputs@fp 0028                           initloop 0766               __end_of_get10msTick 0715  
               __end_of_timeSince 0B1D          __size_of_uartIsDataReady 0009                         _OLED_init 08E2  
                       _OLED_send 09B7            __size_of_reset10msTick 0003                     ?_returnToPage 0070  
               __end_of_spinInput 0187                    ?_OLED_print_xy 0026                OLED_print_xy@F7897 01E9  
               __end_of_vfpfcnvrt 1D1D                        efgtoa@mode 00CC                        efgtoa@sign 00C5  
                ___aldiv@quotient 002A                     _dataReadyFlag 01C6                    ??_uartSendByte 0020  
                      ??_vfprintf 00EC             __CFG_WDTCPS$WDTCPS_31 0000          __end_of_OLED_pulseEnable 09F0  
                         strcpy@d 002F                           strlen@a 0023                           strcpy@s 002D  
                         strlen@s 0020                         _PORTAbits 000C                         _PORTCbits 000E  
                 ?_setOutputPower 0154   __size_of_OLED_scrollDisplayLeft 0003                   _selectedChannel 01C3  
                     ___fladd@grs 005A             ??_convertAnalogValues 0062                     ___xxtofl@sign 0028  
                       _TRISCbits 0014                       ___fldiv@grs 005A                       ___fldiv@rem 0053  
             __end_of_checkSensor 0AD8                  __CFG_FEXTOSC$OFF 0000      OLED_loadSpecialChars@special 0027  
                  _uartReceiveISR 0633                       ___flmul@grs 003C                        _statusView 19CB  
             __end_of_channelView 19B6                   channelView@data 0154                 getNextState@state 0029  
                 channelView@page 01C0                   channelView@tmp0 015A                        ?_OLED_init 0070  
                  ??_returnToPage 0026                        ?_OLED_send 0023             __end_of_pushButtonISR 0712  
      __size_of_OLED_waitForReady 001C                    __end_of___flge 1534              __end_of_nextStateTbl 20B2  
                  __end_of___fleq 1712                    __end_of___lmul 0E49                       vfpfcnvrt@ap 00E4  
                     vfpfcnvrt@cp 0124                       vfpfcnvrt@ct 012C                       vfpfcnvrt@fp 0134  
                     vfpfcnvrt@ll 0120                    __end_of___wmul 19CB                    __end_of_efgtoa 13DC  
                     ?_initialize 0070                    __end_of_floorf 061F            __size_of_getDataPacket 0001  
                  __end_of_paging 1B42                        floorf@F514 01A0                    __end_of_rotISR 06F2  
                  __end_of_strcat 1AF0                    __end_of_strcpy 1556                    __end_of_strlen 1B67  
                     __end_ofPL10 159A                       __end_ofPL20 1602                       __end_ofPL12 062E  
                     __end_ofPL30 1642                       __end_ofPL22 1622                       __end_ofPL14 15AE  
                     __end_ofPL40 1E58                       __end_ofPL32 165B                       __end_ofPL24 1E31  
                     __end_ofPL16 15C1                       __end_ofPL50 0F19                       __end_ofPL42 1E6B  
                     __end_ofPL34 1E43                       __end_ofPL26 1E38                       __end_ofPL18 15E2  
                     __end_ofPL60 1690                       __end_ofPL52 0F23                       __end_ofPL44 1E73  
                     __end_ofPL36 1669                       __end_ofPL28 1632                       __end_ofPL70 0F4B  
                     __end_ofPL62 1E82                       __end_ofPL54 1E7B                       __end_ofPL46 0F09  
                     __end_ofPL38 0EFE                       __end_ofPL80 1FF9                       __end_ofPL72 0F58  
                     __end_ofPL64 0F39                       __end_ofPL56 1689                       __end_ofPL48 167A  
                     __end_ofPL90 1696                       __end_ofPL82 1E98                       __end_ofPL74 1E90  
                     __end_ofPL66 0F42                       __end_ofPL58 0F30                       __end_ofPL92 1E9E  
                     __end_ofPL84 177E                       __end_ofPL76 0F5F                       __end_ofPL68 1E8B  
                     __end_ofPL94 169D                       __end_ofPL86 02CF                       __end_ofPL78 02C4  
                     __end_ofPL96 1EA7                       __end_ofPL88 02D6                       __end_ofPL98 1EB0  
             start_initialization 0844                     _reset10msTick 0715             uartReceiveISR@rxCount 01C5  
                     __end_of_ISR 0060                       __end_of_abs 04C7                       __end_of_ema 0E24  
                     __end_of_pad 050C          OLED_print_xy@row_offsets 002A            __end_of_uartReceiveISR 0668  
                     _get10msTick 0712                       ?_setLensDia 0154            _OLED_scrollDisplayLeft 1B42  
           __end_of___fpclassifyf 1776                   ??_OLED_print_xy 0029                  __CFG_LPBOREN$OFF 0000  
                     vfprintf@fmt 00E9                          ??___flge 004F                          ??___fleq 0028  
                  timeSince@since 0024                          ??___lmul 0028                   _OLED_returnHome 0E92  
                        ??___wmul 0024                     _g_curRotState 007D                          ??_efgtoa 006D  
                       __Umul8_16 0D3A                 ??_uartIsDataReady 0020                       __pdataBANK3 01E2  
                     __pdataBANK7 03A0                          ??_floorf 0064                          ??_paging 0027  
                        ??_rotISR 0070                          ??_strcat 0032                          ??_strcpy 0029  
                        ??_strlen 0022                  OLED_print_xy@col 002E                       _checkSensor 09F0  
                       ___fladd@a 004B                         ___fladd@b 0047                  OLED_print_xy@row 0026  
                       ___fldiv@a 0047                         ___fldiv@b 004B                    ?_reset10msTick 0070  
                     __pbssBIGRAM 277B                         ___flmul@a 0032                         ___flmul@b 002E  
                     __pbssCOMMON 007B                         ___flsub@a 005B                         ___flsub@b 005F  
                       ___latbits 0003                     __pcstackBANK0 0020                     __pcstackBANK1 00A0  
                   __pcstackBANK2 0120                     __pcstackBANK3 01EE             _OLED_loadSpecialChars 0997  
           __size_of_OLED_command 0007            convertAnalogValues@adc 0066                 __size_of___xxtofl 0069  
               paging@currentPage 0029                       _channelView 18E7                   ?_uartReceiveISR 0070  
            __end_of_uartSendByte 0EF1                       ?_statusView 0154                     _getDataPacket 0B2E  
                _adcGetConversion 0DBA               __size_of_initialize 0047                         _atoi$1646 002D  
                       _atoi$1647 0031                         _atoi$1648 002F                   _OLED_write4bits 0962  
                     ??_OLED_init 0026                       ??_OLED_send 0024                         _g_pbState 01C9  
                     _efgtoa$1303 00B2                       _efgtoa$1307 00B4                       _efgtoa$1308 00B6  
                     _efgtoa$1309 00B8                       _efgtoa$1298 00AE                       _efgtoa$1299 00B0  
                       _dtoa$1274 003C                          ?___aldiv 0020                          ?___almod 0020  
                        ?___fladd 0047                          ?___fldiv 0047                          ?___awdiv 0020  
                        ?___flneg 0020                          ?___awmod 0020                          ?___flmul 002E  
                        ?___flsub 005B                          ?___fltol 0020                         _getRotDir 1B48  
                      ?__Umul8_16 0020               __size_of_setLensDia 0040          ?_OLED_scrollDisplayRight 0070  
                ___almod@dividend 0024                         __pswtext1 077D                      _OLED_command 0990  
               __size_of_vfprintf 0028                          _BAUD1CON 011F                    getNextState@pb 0027  
                    channelView@n 0162          _convertAnalogValues$1963 0062                          ?_isdigit 0020  
                        ?_isspace 0020              __end_of_returnToPage 1ADC                          ?_isupper 0020  
                        ?_timeNow 0020                    __size_of_getPB 0008                         _menuError 188B  
                        ?_sprintf 0135                          ?_tolower 0024                    __size_of_fputc 0046  
                       _tick100ms 01A8                    __size_of_fputs 001A                          ?_strncmp 0020  
                        ?_strncpy 0070                    __size_of_putch 0001                    ?_getDataPacket 0070  
                 ___aldiv@divisor 0020                   ___aldiv@counter 0028                    ___wmul@product 0024  
                        _LATAbits 0018                          _LATBbits 0019                          _LATCbits 001A  
         __end_of_OLED_returnHome 0E94                         clear_ram0 0771                     paging@lastDir 01BE  
                        _PIE0bits 0716                          _PIE3bits 0719                          _PIE4bits 071A  
                  setLensDia@data 0154                    setLensDia@test 01DA                          _PIR0bits 070C  
                        _PIR3bits 070F                          _PIR4bits 0710                         _timeSince 0AD8  
               __CFG_BBSIZE$BB512 0000                  ??_setOutputPower 0070                        ?_getRotDir 0070  
                       _spinInput 0120                         _vfpfcnvrt 1B8F                 ?_OLED_pulseEnable 0070  
                 ??_reset10msTick 0070                        _ADCON0bits 009D                 ___wmul@multiplier 0020  
                    _RX1DTPPSbits 1ECB               __size_of_statusView 009F                ??_OLED_pulseEnable 0020  
          ?_OLED_loadSpecialChars 0070                  getNextState@page 0026                     menu@nextState 016D  
            OLED_write4bits@value 0022                      _isspace$1677 0024                  _transition_table 20D5  
            __end_of_stateFuncTbl 200F                        ?_menuError 0070                        vfpfcnvrt@c 0133  
                      vfpfcnvrt@f 012F                 ___lmul@multiplier 0020           __end_of_OLED_write4bits 0990  
                    _nextStateTbl 208F                         paging@dir 002A                 _OLED_clearDisplay 0E90  
                   uartSendByte@s 0020                         menu@state 01C2                        vfprintf@ap 00EB  
                      vfprintf@fp 00ED                        ?_timeSince 0024   __end_of_OLED_scrollDisplayRight 1B48  
              ?_OLED_clearDisplay 0070                       ??__Umul8_16 0023                     ?_channelSetup 0154  
                __size_of___aldiv 006C                  __size_of___almod 005A                  __size_of___fladd 0136  
                __size_of___fldiv 00FE                  __size_of___awdiv 0040                  __size_of___flneg 0009  
     __end_of_convertAnalogValues 0C20                  __size_of___awmod 0039                        ?_spinInput 0063  
                __size_of___flmul 011A                  __size_of___flsub 001D                  __size_of___fltol 0047  
                      ?_vfpfcnvrt 00E3            OLED_loadSpecialChars@n 0057                      ??_initialize 0020  
             ??_OLED_clearDisplay 0026                ___fpclassifyf@F453 01A4                        sprintf@fmt 0137  
                        ___xxtofl 0D51                        strcat@dest 0034                  __size_of_isdigit 0014  
                     _rxFErrCount 01C8             __size_of_uartSendByte 000A          checkSensor@sensorTimeout 01AC  
                __size_of_isspace 0019                          _g_rotDir 01CA                          __ptext10 0E90  
                        __ptext11 0FCE                          __ptext20 103E                          __ptext12 0EDF  
                        __ptext21 1D1D                          __ptext13 189A                          __ptext30 17BE  
                        __ptext22 0731                          __ptext14 1ADC                          __ptext31 177E  
                        __ptext23 1534                          __ptext15 1A98                          __ptext40 03E9  
                        __ptext32 0301                          __ptext24 0537                          __ptext16 1B67  
                        __ptext41 1D38                          __ptext33 04C7                          __ptext25 1717  
                        __ptext17 1B8F                          __ptext50 1A6A                          __ptext42 0718  
                        __ptext34 1B51                          __ptext26 00D9                          __ptext18 1F14  
                        __ptext51 0E49                          __ptext43 0745                          __ptext35 050C  
                        __ptext27 1556                          __ptext19 1F5B                          __ptext60 09F0  
                        __ptext52 0B38                          __ptext44 1ABA                          __ptext36 1DB1  
                        __ptext28 17F7                          __ptext61 0EE7                          __ptext53 0DD9  
                        __ptext45 19B6                          __ptext37 1DF7                          __ptext29 16DE  
                        __ptext70 08E2                          __ptext62 0B2F                          __ptext54 0E24  
                        __ptext46 1AF0                          __ptext38 04AF                          __ptext71 0990  
                        __ptext63 0AD8                          __ptext55 0DBA                          __ptext47 1B48  
                        __ptext39 0455                          __ptext80 06F2                          __ptext72 09CB  
                        __ptext64 0B1D                          __ptext56 0C20                          __ptext48 1B45  
                        __ptext81 0715                          __ptext73 09B7                          __ptext65 0B2E  
                        __ptext57 0D3A                          __ptext49 1B42                          __ptext82 0712  
                        __ptext74 0962                          __ptext66 0D51                          __ptext58 13DC  
                        __ptext75 09E7                          __ptext67 14DA                          __ptext59 0187  
                        __ptext68 0997                          __ptext77 0633                          __ptext69 09C4  
                        __ptext78 0668                          __ptext79 06C2                  __size_of_isupper 0014  
                    ?_get10msTick 0070                  __size_of_timeNow 0011                   ??_getDataPacket 0020  
         ?_OLED_scrollDisplayLeft 0070                      ??_setLensDia 0070                   ___almod@divisor 0020  
                __size_of_sprintf 0022                  __size_of_tolower 001B                     getNextState@n 002A  
                 ___almod@counter 0028                       _OSCCON3bits 088F                        strcpy@dest 0025  
                __size_of_strncmp 0035                  __size_of_strncpy 002A                          ema@alpha 0030  
                   __size_of_atoi 0079                     __size_of_main 0045                     __size_of_dtoa 00E8  
       __end_of_OLED_clearDisplay 0E92                     __size_of_menu 004B                   _uartIsDataReady 0B2F  
                        getPB@ret 0020                     __size_of_stoa 0092                          _tick10ms 01CB  
                ?_OLED_returnHome 0070                __end_of_initialize 0E90              __CFG_WDTCWS$WDTCWS_7 0000  
                      _RC1STAbits 011D                          efgtoa@fp 00C4                          efgtoa@ne 00C0  
                        efgtoa@pp 00BC                          efgtoa@ou 00AA                         stoa@F1151 01E2  
                     _rxOErrCount 01C7                    ??_channelSetup 0070                          int$flags 007E  
                     ??_getRotDir 0020                          _vfprintf 1B67                      _uartSendByte 0EE7  
           __size_of_returnToPage 0022                __end_of_setLensDia 00D9          __end_of_adcGetConversion 0DD9  
                    ?_checkSensor 0053                  ??_uartReceiveISR 0075                    _vfpfcnvrt$1333 0126  
                  _vfpfcnvrt$1334 0128                    _vfpfcnvrt$1339 012A                        _INTCONbits 000B  
                        menu@data 0163                          menu@page 0169                          menu@func 016B  
  __end_of_OLED_scrollDisplayLeft 1B45                      timeSince@now 0030                    __pstringtext10 211D  
                  __pstringtext11 212A                    __pstringtext20 219E                    __pstringtext12 2137  
                  __pstringtext21 21A8                    __pstringtext13 2144                    __pstringtext22 21AF  
                  __pstringtext14 2151                    __pstringtext23 21B6                    __pstringtext15 215E  
                  __pstringtext24 21BA                    __pstringtext16 216B                    __pstringtext25 21BE  
                  __pstringtext17 2178                    __pstringtext26 21C2                    __pstringtext18 2185  
                  __pstringtext27 21C6                    __pstringtext19 2192                    __pstringtext28 0000  
          __size_of_pushButtonISR 0020                          isdigit@c 0020                       ??_menuError 002F  
                    ?_channelView 0154                  ?_OLED_write4bits 0070                          intlevel1 0000  
                       sprintf@ap 014D                         strcat@src 0031                      ??_statusView 0070  
                        isspace@c 0020                 __CFG_CLKOUTEN$OFF 0000                         strcpy@src 0027  
                   ?_getNextState 0026                          isupper@c 0020                        _OLED_write 09C4  
                       strncmp@_l 0025                         strncmp@_r 0020                         strncpy@cp 0074  
           __end_of_OLED_print_xy 1A98                      _returnToPage 1ABA                       ??_timeSince 0028  
                     efgtoa@nmode 00C9                       ??_spinInput 006F                       ??_vfpfcnvrt 00E5  
                    getRotDir@ret 0020                          stoa@nuls 002B                     __pstringtext1 208F  
                   __pstringtext2 20D5                     __pstringtext3 2000                     __pstringtext4 2040  
                   __pstringtext5 206A                     __pstringtext6 20B2                     __pstringtext7 20F1  
                   __pstringtext8 2101                     __pstringtext9 210F                     ?_getStateFunc 0026  
          __Umul8_16@multiplicand 0020                          sprintf@f 014E                          tolower@c 0024  
                        sprintf@s 0135                     getStateFunc@n 002A            __size_of___fpclassifyf 005F  
              __end_of_statusView 1A6A                          strncmp@l 0028                          strncmp@n 0022  
                        strncmp@r 0026                          strncpy@d 0073                          strncpy@n 0071  
                        strncpy@s 0070                      ___aldiv@sign 0029           __end_of_uartIsDataReady 0B38  
                   ___fladd@signs 0057  __size_of_OLED_scrollDisplayRight 0003                  checkSensor@state 01CC  
                    ___almod@sign 0029                      ___fladd@aexp 0058                      ___fladd@bexp 0059  
      __size_of_OLED_clearDisplay 0002                   checkSensor@data 0053                    ??_getNextState 0028  
            __Umul8_16@multiplier 0027                      _updateScreen 01ED                 __Umul8_16@product 0023  
