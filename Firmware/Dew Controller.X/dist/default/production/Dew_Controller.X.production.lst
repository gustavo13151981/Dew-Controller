

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Jan 31 17:36:58 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK6,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	stringtext24,global,class=STRCODE,delta=2
    32                           	psect	stringtext25,global,class=STRCODE,delta=2
    33                           	psect	stringtext26,global,class=STRCODE,delta=2
    34                           	psect	stringtext27,global,class=STRCODE,delta=2
    35                           	psect	stringtext28,global,class=STRCODE,delta=2
    36                           	psect	stringtext29,global,class=STRCODE,delta=2
    37                           	psect	stringtext30,global,class=STRCODE,delta=2
    38                           	psect	stringtext31,global,class=STRCODE,delta=2
    39                           	psect	stringtext32,global,class=STRCODE,delta=2
    40                           	psect	stringtext33,global,class=STRCODE,delta=2
    41                           	psect	stringtext34,global,class=STRCODE,delta=2
    42                           	psect	stringtext35,global,class=STRCODE,delta=2
    43                           	psect	stringtext36,global,class=STRCODE,delta=2
    44                           	psect	stringtext37,global,class=STRCODE,delta=2
    45                           	psect	stringtext38,global,class=STRCODE,delta=2
    46                           	psect	stringtext39,global,class=STRCODE,delta=2
    47                           	psect	stringtext40,global,class=STRCODE,delta=2
    48                           	psect	stringtext41,global,class=STRCODE,delta=2
    49                           	psect	stringtext42,global,class=STRCODE,delta=2
    50                           	psect	stringtext43,global,class=STRCODE,delta=2
    51                           	psect	stringtext44,global,class=STRCODE,delta=2
    52                           	psect	stringtext45,global,class=STRCODE,delta=2
    53                           	psect	stringtext46,global,class=STRCODE,delta=2
    54                           	psect	stringtext47,global,class=STRCODE,delta=2
    55                           	psect	stringtext48,global,class=STRCODE,delta=2
    56                           	psect	stringtext49,global,class=STRCODE,delta=2
    57                           	psect	stringtext50,global,class=STRCODE,delta=2
    58                           	psect	stringtext51,global,class=STRCODE,delta=2
    59                           	psect	stringtext52,global,class=STRCODE,delta=2
    60                           	psect	stringtext53,global,class=STRCODE,delta=2
    61                           	psect	stringtext54,global,class=STRCODE,delta=2
    62                           	psect	stringtext55,global,class=STRCODE,delta=2
    63                           	psect	stringtext56,global,class=STRCODE,delta=2
    64                           	psect	stringtext57,global,class=STRCODE,delta=2
    65                           	psect	stringtext58,global,class=STRCODE,delta=2
    66                           	psect	stringtext59,global,class=STRCODE,delta=2
    67                           	psect	stringtext60,global,class=STRCODE,delta=2
    68                           	psect	stringtext61,global,class=STRCODE,delta=2
    69                           	psect	stringtext62,global,class=STRCODE,delta=2
    70                           	psect	stringtext63,global,class=STRCODE,delta=2
    71                           	psect	stringtext64,global,class=STRCODE,delta=2
    72                           	psect	stringtext65,global,class=STRCODE,delta=2
    73                           	psect	stringtext66,global,class=STRCODE,delta=2
    74                           	psect	stringtext67,global,class=STRCODE,delta=2
    75                           	psect	stringtext68,global,class=STRCODE,delta=2
    76                           	psect	stringtext69,global,class=STRCODE,delta=2
    77                           	psect	stringtext70,global,class=STRCODE,delta=2
    78                           	psect	stringtext71,global,class=STRCODE,delta=2
    79                           	psect	stringtext72,global,class=STRCODE,delta=2
    80                           	psect	stringtext73,global,class=STRCODE,delta=2
    81                           	psect	cinit,global,class=CODE,merge=1,delta=2
    82                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    83                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    84                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    85                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    86                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    87                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    88                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    89                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    91                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    92                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    93                           	psect	inittext,global,class=CODE,delta=2
    94                           	psect	clrtext,global,class=CODE,delta=2
    95                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    96                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    97                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    98                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    99                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   100                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   101                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   102                           	psect	text1,local,class=CODE,merge=1,delta=2
   103                           	psect	text2,local,class=CODE,merge=1,delta=2
   104                           	psect	text3,local,class=CODE,merge=1,delta=2
   105                           	psect	text4,local,class=CODE,merge=1,delta=2
   106                           	psect	text5,local,class=CODE,merge=1,delta=2
   107                           	psect	text6,local,class=CODE,merge=1,delta=2
   108                           	psect	text7,local,class=CODE,merge=1,delta=2
   109                           	psect	text8,local,class=CODE,merge=1,delta=2
   110                           	psect	text9,local,class=CODE,merge=1,delta=2
   111                           	psect	text10,local,class=CODE,merge=1,delta=2
   112                           	psect	text11,local,class=CODE,merge=1,delta=2
   113                           	psect	text12,local,class=CODE,merge=1,delta=2
   114                           	psect	text13,local,class=CODE,merge=1,delta=2
   115                           	psect	text14,local,class=CODE,merge=1,delta=2
   116                           	psect	text15,local,class=CODE,merge=1,delta=2
   117                           	psect	text16,local,class=CODE,merge=1,delta=2
   118                           	psect	text17,local,class=CODE,merge=1,delta=2
   119                           	psect	text18,local,class=CODE,merge=1,delta=2
   120                           	psect	text19,local,class=CODE,merge=1,delta=2
   121                           	psect	text20,local,class=CODE,merge=1,delta=2
   122                           	psect	text21,local,class=CODE,merge=1,delta=2
   123                           	psect	text22,local,class=CODE,merge=1,delta=2
   124                           	psect	text23,local,class=CODE,merge=1,delta=2
   125                           	psect	text24,local,class=CODE,merge=1,delta=2
   126                           	psect	text25,local,class=CODE,merge=1,delta=2
   127                           	psect	text26,local,class=CODE,merge=1,delta=2
   128                           	psect	text27,local,class=CODE,merge=1,delta=2
   129                           	psect	text28,local,class=CODE,merge=1,delta=2
   130                           	psect	text29,local,class=CODE,merge=1,delta=2
   131                           	psect	text30,local,class=CODE,merge=1,delta=2
   132                           	psect	text31,local,class=CODE,merge=1,delta=2
   133                           	psect	text32,local,class=CODE,merge=1,delta=2
   134                           	psect	text33,local,class=CODE,merge=1,delta=2
   135                           	psect	text34,local,class=CODE,merge=1,delta=2
   136                           	psect	text35,local,class=CODE,merge=1,delta=2
   137                           	psect	text36,local,class=CODE,merge=1,delta=2
   138                           	psect	text37,local,class=CODE,merge=1,delta=2
   139                           	psect	text38,local,class=CODE,merge=1,delta=2
   140                           	psect	text39,local,class=CODE,merge=1,delta=2
   141                           	psect	text40,local,class=CODE,merge=1,delta=2
   142                           	psect	text41,local,class=CODE,merge=1,delta=2
   143                           	psect	text42,local,class=CODE,merge=1,delta=2
   144                           	psect	text43,local,class=CODE,merge=1,delta=2
   145                           	psect	text44,local,class=CODE,merge=1,delta=2
   146                           	psect	text45,local,class=CODE,merge=1,delta=2
   147                           	psect	text46,local,class=CODE,merge=1,delta=2
   148                           	psect	text47,local,class=CODE,merge=1,delta=2
   149                           	psect	text48,local,class=CODE,merge=1,delta=2,group=1
   150                           	psect	text49,local,class=CODE,merge=1,delta=2
   151                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
   152                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   153                           	psect	text52,local,class=CODE,merge=1,delta=2
   154                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   155                           	psect	text54,local,class=CODE,merge=1,delta=2,group=2
   156                           	psect	text55,local,class=CODE,merge=1,delta=2
   157                           	psect	text56,local,class=CODE,merge=1,delta=2
   158                           	psect	text57,local,class=CODE,merge=1,delta=2
   159                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
   160                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
   161                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
   162                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   163                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
   164                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
   165                           	psect	text64,local,class=CODE,merge=1,delta=2
   166                           	psect	text65,local,class=CODE,merge=1,delta=2,group=1
   167                           	psect	text66,local,class=CODE,merge=1,delta=2,group=1
   168                           	psect	text67,local,class=CODE,merge=1,delta=2,group=1
   169                           	psect	text68,local,class=CODE,merge=1,delta=2,group=1
   170                           	psect	text69,local,class=CODE,merge=1,delta=2,group=1
   171                           	psect	text70,local,class=CODE,merge=1,delta=2,group=1
   172                           	psect	text71,local,class=CODE,merge=1,delta=2
   173                           	psect	text72,local,class=CODE,merge=1,delta=2
   174                           	psect	text73,local,class=CODE,merge=1,delta=2
   175                           	psect	text74,local,class=CODE,merge=1,delta=2
   176                           	psect	text75,local,class=CODE,merge=1,delta=2
   177                           	psect	text76,local,class=CODE,merge=1,delta=2
   178                           	psect	text77,local,class=CODE,merge=1,delta=2
   179                           	psect	text78,local,class=CODE,merge=1,delta=2
   180                           	psect	intentry,global,class=CODE,delta=2
   181                           	psect	text80,local,class=CODE,merge=1,delta=2
   182                           	psect	text81,local,class=CODE,merge=1,delta=2,group=2
   183                           	psect	text82,local,class=CODE,merge=1,delta=2
   184                           	psect	text83,local,class=CODE,merge=1,delta=2
   185                           	psect	text84,local,class=CODE,merge=1,delta=2
   186                           	psect	text85,local,class=CODE,merge=1,delta=2
   187                           	psect	text86,local,class=CODE,merge=1,delta=2
   188                           	dabs	1,0xCA0,32
   189                           	dabs	1,0xC20,80
   190                           	dabs	1,0xBBA,54
   191                           	dabs	1,0x274A,0,_data
   192                           	dabs	1,0x7E,2
   193  0000                     
   194                           ; Version 2.10
   195                           ; Generated 31/07/2019 GMT
   196                           ; 
   197                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   198                           ; All rights reserved.
   199                           ; 
   200                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   201                           ; 
   202                           ; Redistribution and use in source and binary forms, with or without modification, are
   203                           ; permitted provided that the following conditions are met:
   204                           ; 
   205                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   206                           ;        conditions and the following disclaimer.
   207                           ; 
   208                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   209                           ;        of conditions and the following disclaimer in the documentation and/or other
   210                           ;        materials provided with the distribution.
   211                           ; 
   212                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   213                           ;        software without specific prior written permission.
   214                           ; 
   215                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   216                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   217                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   218                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   219                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   220                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   221                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   222                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   223                           ; 
   224                           ; 
   225                           ; Code-generator required, PIC16F15356 Definitions
   226                           ; 
   227                           ; SFR Addresses
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  0010                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0016                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  009B                     	;# 
   252  009B                     	;# 
   253  009C                     	;# 
   254  009D                     	;# 
   255  009E                     	;# 
   256  009F                     	;# 
   257  0119                     	;# 
   258  0119                     	;# 
   259  0119                     	;# 
   260  011A                     	;# 
   261  011A                     	;# 
   262  011A                     	;# 
   263  011B                     	;# 
   264  011B                     	;# 
   265  011B                     	;# 
   266  011B                     	;# 
   267  011B                     	;# 
   268  011C                     	;# 
   269  011C                     	;# 
   270  011C                     	;# 
   271  011D                     	;# 
   272  011D                     	;# 
   273  011D                     	;# 
   274  011E                     	;# 
   275  011E                     	;# 
   276  011E                     	;# 
   277  011F                     	;# 
   278  011F                     	;# 
   279  011F                     	;# 
   280  011F                     	;# 
   281  011F                     	;# 
   282  018C                     	;# 
   283  018D                     	;# 
   284  018E                     	;# 
   285  018F                     	;# 
   286  0190                     	;# 
   287  0191                     	;# 
   288  0192                     	;# 
   289  0196                     	;# 
   290  0197                     	;# 
   291  0198                     	;# 
   292  0199                     	;# 
   293  019A                     	;# 
   294  019B                     	;# 
   295  019C                     	;# 
   296  020C                     	;# 
   297  020C                     	;# 
   298  020D                     	;# 
   299  020E                     	;# 
   300  020F                     	;# 
   301  020F                     	;# 
   302  0210                     	;# 
   303  0210                     	;# 
   304  0211                     	;# 
   305  0211                     	;# 
   306  028C                     	;# 
   307  028C                     	;# 
   308  028D                     	;# 
   309  028D                     	;# 
   310  028E                     	;# 
   311  028F                     	;# 
   312  0290                     	;# 
   313  0291                     	;# 
   314  030C                     	;# 
   315  030C                     	;# 
   316  030D                     	;# 
   317  030E                     	;# 
   318  030F                     	;# 
   319  0310                     	;# 
   320  0310                     	;# 
   321  0311                     	;# 
   322  0312                     	;# 
   323  0313                     	;# 
   324  0314                     	;# 
   325  0314                     	;# 
   326  0315                     	;# 
   327  0316                     	;# 
   328  0318                     	;# 
   329  0318                     	;# 
   330  0319                     	;# 
   331  031A                     	;# 
   332  031C                     	;# 
   333  031C                     	;# 
   334  031D                     	;# 
   335  031E                     	;# 
   336  038C                     	;# 
   337  038C                     	;# 
   338  038D                     	;# 
   339  038E                     	;# 
   340  058C                     	;# 
   341  058C                     	;# 
   342  058D                     	;# 
   343  058E                     	;# 
   344  058F                     	;# 
   345  058F                     	;# 
   346  0590                     	;# 
   347  0591                     	;# 
   348  0592                     	;# 
   349  0593                     	;# 
   350  059C                     	;# 
   351  059C                     	;# 
   352  059D                     	;# 
   353  059D                     	;# 
   354  059E                     	;# 
   355  059F                     	;# 
   356  060C                     	;# 
   357  060D                     	;# 
   358  060E                     	;# 
   359  060F                     	;# 
   360  0610                     	;# 
   361  0611                     	;# 
   362  0612                     	;# 
   363  0613                     	;# 
   364  0614                     	;# 
   365  070C                     	;# 
   366  070D                     	;# 
   367  070E                     	;# 
   368  070F                     	;# 
   369  0710                     	;# 
   370  0711                     	;# 
   371  0712                     	;# 
   372  0713                     	;# 
   373  0716                     	;# 
   374  0717                     	;# 
   375  0718                     	;# 
   376  0719                     	;# 
   377  071A                     	;# 
   378  071B                     	;# 
   379  071C                     	;# 
   380  071D                     	;# 
   381  0796                     	;# 
   382  0797                     	;# 
   383  0798                     	;# 
   384  0799                     	;# 
   385  079A                     	;# 
   386  079B                     	;# 
   387  080C                     	;# 
   388  080D                     	;# 
   389  080E                     	;# 
   390  080F                     	;# 
   391  0810                     	;# 
   392  0811                     	;# 
   393  0812                     	;# 
   394  0813                     	;# 
   395  0814                     	;# 
   396  081A                     	;# 
   397  081A                     	;# 
   398  081B                     	;# 
   399  081C                     	;# 
   400  081C                     	;# 
   401  081D                     	;# 
   402  081E                     	;# 
   403  081F                     	;# 
   404  088C                     	;# 
   405  088D                     	;# 
   406  088E                     	;# 
   407  088F                     	;# 
   408  0890                     	;# 
   409  0891                     	;# 
   410  0892                     	;# 
   411  0893                     	;# 
   412  0895                     	;# 
   413  0896                     	;# 
   414  090C                     	;# 
   415  090E                     	;# 
   416  090F                     	;# 
   417  091F                     	;# 
   418  098F                     	;# 
   419  098F                     	;# 
   420  0990                     	;# 
   421  0991                     	;# 
   422  0992                     	;# 
   423  0993                     	;# 
   424  0994                     	;# 
   425  0995                     	;# 
   426  0996                     	;# 
   427  0997                     	;# 
   428  0A19                     	;# 
   429  0A19                     	;# 
   430  0A1A                     	;# 
   431  0A1A                     	;# 
   432  0A1B                     	;# 
   433  0A1B                     	;# 
   434  0A1B                     	;# 
   435  0A1C                     	;# 
   436  0A1C                     	;# 
   437  0A1D                     	;# 
   438  0A1D                     	;# 
   439  0A1E                     	;# 
   440  0A1E                     	;# 
   441  0A1F                     	;# 
   442  0A1F                     	;# 
   443  0A1F                     	;# 
   444  1E0F                     	;# 
   445  1E10                     	;# 
   446  1E11                     	;# 
   447  1E12                     	;# 
   448  1E13                     	;# 
   449  1E14                     	;# 
   450  1E15                     	;# 
   451  1E16                     	;# 
   452  1E17                     	;# 
   453  1E18                     	;# 
   454  1E19                     	;# 
   455  1E1A                     	;# 
   456  1E1B                     	;# 
   457  1E1C                     	;# 
   458  1E1D                     	;# 
   459  1E1E                     	;# 
   460  1E1F                     	;# 
   461  1E20                     	;# 
   462  1E21                     	;# 
   463  1E22                     	;# 
   464  1E23                     	;# 
   465  1E24                     	;# 
   466  1E25                     	;# 
   467  1E26                     	;# 
   468  1E27                     	;# 
   469  1E28                     	;# 
   470  1E29                     	;# 
   471  1E2A                     	;# 
   472  1E2B                     	;# 
   473  1E2C                     	;# 
   474  1E2D                     	;# 
   475  1E2E                     	;# 
   476  1E2F                     	;# 
   477  1E30                     	;# 
   478  1E31                     	;# 
   479  1E32                     	;# 
   480  1E33                     	;# 
   481  1E34                     	;# 
   482  1E35                     	;# 
   483  1E36                     	;# 
   484  1E37                     	;# 
   485  1E8F                     	;# 
   486  1E90                     	;# 
   487  1E91                     	;# 
   488  1E92                     	;# 
   489  1E93                     	;# 
   490  1E9C                     	;# 
   491  1EA1                     	;# 
   492  1EA2                     	;# 
   493  1EB1                     	;# 
   494  1EBB                     	;# 
   495  1EBC                     	;# 
   496  1EBD                     	;# 
   497  1EBE                     	;# 
   498  1EC3                     	;# 
   499  1EC5                     	;# 
   500  1EC6                     	;# 
   501  1EC7                     	;# 
   502  1EC8                     	;# 
   503  1EC9                     	;# 
   504  1ECA                     	;# 
   505  1ECB                     	;# 
   506  1ECC                     	;# 
   507  1ECD                     	;# 
   508  1ECE                     	;# 
   509  1F10                     	;# 
   510  1F11                     	;# 
   511  1F12                     	;# 
   512  1F13                     	;# 
   513  1F14                     	;# 
   514  1F15                     	;# 
   515  1F16                     	;# 
   516  1F17                     	;# 
   517  1F18                     	;# 
   518  1F19                     	;# 
   519  1F1A                     	;# 
   520  1F1B                     	;# 
   521  1F1C                     	;# 
   522  1F1D                     	;# 
   523  1F1E                     	;# 
   524  1F1F                     	;# 
   525  1F20                     	;# 
   526  1F21                     	;# 
   527  1F22                     	;# 
   528  1F23                     	;# 
   529  1F24                     	;# 
   530  1F25                     	;# 
   531  1F26                     	;# 
   532  1F27                     	;# 
   533  1F38                     	;# 
   534  1F39                     	;# 
   535  1F3A                     	;# 
   536  1F3B                     	;# 
   537  1F3C                     	;# 
   538  1F3D                     	;# 
   539  1F3E                     	;# 
   540  1F3F                     	;# 
   541  1F43                     	;# 
   542  1F44                     	;# 
   543  1F45                     	;# 
   544  1F46                     	;# 
   545  1F47                     	;# 
   546  1F48                     	;# 
   547  1F49                     	;# 
   548  1F4A                     	;# 
   549  1F4E                     	;# 
   550  1F4F                     	;# 
   551  1F50                     	;# 
   552  1F51                     	;# 
   553  1F52                     	;# 
   554  1F53                     	;# 
   555  1F54                     	;# 
   556  1F55                     	;# 
   557  1F65                     	;# 
   558  1F68                     	;# 
   559  1F69                     	;# 
   560  1F6A                     	;# 
   561  1F6B                     	;# 
   562  1FE4                     	;# 
   563  1FE5                     	;# 
   564  1FE6                     	;# 
   565  1FE7                     	;# 
   566  1FE8                     	;# 
   567  1FE8                     	;# 
   568  1FE9                     	;# 
   569  1FEA                     	;# 
   570  1FEB                     	;# 
   571  1FED                     	;# 
   572  1FEE                     	;# 
   573  1FEF                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0008                     	;# 
   583  0009                     	;# 
   584  000A                     	;# 
   585  000B                     	;# 
   586  000C                     	;# 
   587  000D                     	;# 
   588  000E                     	;# 
   589  0010                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0014                     	;# 
   593  0016                     	;# 
   594  0018                     	;# 
   595  0019                     	;# 
   596  001A                     	;# 
   597  009B                     	;# 
   598  009B                     	;# 
   599  009C                     	;# 
   600  009D                     	;# 
   601  009E                     	;# 
   602  009F                     	;# 
   603  0119                     	;# 
   604  0119                     	;# 
   605  0119                     	;# 
   606  011A                     	;# 
   607  011A                     	;# 
   608  011A                     	;# 
   609  011B                     	;# 
   610  011B                     	;# 
   611  011B                     	;# 
   612  011B                     	;# 
   613  011B                     	;# 
   614  011C                     	;# 
   615  011C                     	;# 
   616  011C                     	;# 
   617  011D                     	;# 
   618  011D                     	;# 
   619  011D                     	;# 
   620  011E                     	;# 
   621  011E                     	;# 
   622  011E                     	;# 
   623  011F                     	;# 
   624  011F                     	;# 
   625  011F                     	;# 
   626  011F                     	;# 
   627  011F                     	;# 
   628  018C                     	;# 
   629  018D                     	;# 
   630  018E                     	;# 
   631  018F                     	;# 
   632  0190                     	;# 
   633  0191                     	;# 
   634  0192                     	;# 
   635  0196                     	;# 
   636  0197                     	;# 
   637  0198                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019C                     	;# 
   642  020C                     	;# 
   643  020C                     	;# 
   644  020D                     	;# 
   645  020E                     	;# 
   646  020F                     	;# 
   647  020F                     	;# 
   648  0210                     	;# 
   649  0210                     	;# 
   650  0211                     	;# 
   651  0211                     	;# 
   652  028C                     	;# 
   653  028C                     	;# 
   654  028D                     	;# 
   655  028D                     	;# 
   656  028E                     	;# 
   657  028F                     	;# 
   658  0290                     	;# 
   659  0291                     	;# 
   660  030C                     	;# 
   661  030C                     	;# 
   662  030D                     	;# 
   663  030E                     	;# 
   664  030F                     	;# 
   665  0310                     	;# 
   666  0310                     	;# 
   667  0311                     	;# 
   668  0312                     	;# 
   669  0313                     	;# 
   670  0314                     	;# 
   671  0314                     	;# 
   672  0315                     	;# 
   673  0316                     	;# 
   674  0318                     	;# 
   675  0318                     	;# 
   676  0319                     	;# 
   677  031A                     	;# 
   678  031C                     	;# 
   679  031C                     	;# 
   680  031D                     	;# 
   681  031E                     	;# 
   682  038C                     	;# 
   683  038C                     	;# 
   684  038D                     	;# 
   685  038E                     	;# 
   686  058C                     	;# 
   687  058C                     	;# 
   688  058D                     	;# 
   689  058E                     	;# 
   690  058F                     	;# 
   691  058F                     	;# 
   692  0590                     	;# 
   693  0591                     	;# 
   694  0592                     	;# 
   695  0593                     	;# 
   696  059C                     	;# 
   697  059C                     	;# 
   698  059D                     	;# 
   699  059D                     	;# 
   700  059E                     	;# 
   701  059F                     	;# 
   702  060C                     	;# 
   703  060D                     	;# 
   704  060E                     	;# 
   705  060F                     	;# 
   706  0610                     	;# 
   707  0611                     	;# 
   708  0612                     	;# 
   709  0613                     	;# 
   710  0614                     	;# 
   711  070C                     	;# 
   712  070D                     	;# 
   713  070E                     	;# 
   714  070F                     	;# 
   715  0710                     	;# 
   716  0711                     	;# 
   717  0712                     	;# 
   718  0713                     	;# 
   719  0716                     	;# 
   720  0717                     	;# 
   721  0718                     	;# 
   722  0719                     	;# 
   723  071A                     	;# 
   724  071B                     	;# 
   725  071C                     	;# 
   726  071D                     	;# 
   727  0796                     	;# 
   728  0797                     	;# 
   729  0798                     	;# 
   730  0799                     	;# 
   731  079A                     	;# 
   732  079B                     	;# 
   733  080C                     	;# 
   734  080D                     	;# 
   735  080E                     	;# 
   736  080F                     	;# 
   737  0810                     	;# 
   738  0811                     	;# 
   739  0812                     	;# 
   740  0813                     	;# 
   741  0814                     	;# 
   742  081A                     	;# 
   743  081A                     	;# 
   744  081B                     	;# 
   745  081C                     	;# 
   746  081C                     	;# 
   747  081D                     	;# 
   748  081E                     	;# 
   749  081F                     	;# 
   750  088C                     	;# 
   751  088D                     	;# 
   752  088E                     	;# 
   753  088F                     	;# 
   754  0890                     	;# 
   755  0891                     	;# 
   756  0892                     	;# 
   757  0893                     	;# 
   758  0895                     	;# 
   759  0896                     	;# 
   760  090C                     	;# 
   761  090E                     	;# 
   762  090F                     	;# 
   763  091F                     	;# 
   764  098F                     	;# 
   765  098F                     	;# 
   766  0990                     	;# 
   767  0991                     	;# 
   768  0992                     	;# 
   769  0993                     	;# 
   770  0994                     	;# 
   771  0995                     	;# 
   772  0996                     	;# 
   773  0997                     	;# 
   774  0A19                     	;# 
   775  0A19                     	;# 
   776  0A1A                     	;# 
   777  0A1A                     	;# 
   778  0A1B                     	;# 
   779  0A1B                     	;# 
   780  0A1B                     	;# 
   781  0A1C                     	;# 
   782  0A1C                     	;# 
   783  0A1D                     	;# 
   784  0A1D                     	;# 
   785  0A1E                     	;# 
   786  0A1E                     	;# 
   787  0A1F                     	;# 
   788  0A1F                     	;# 
   789  0A1F                     	;# 
   790  1E0F                     	;# 
   791  1E10                     	;# 
   792  1E11                     	;# 
   793  1E12                     	;# 
   794  1E13                     	;# 
   795  1E14                     	;# 
   796  1E15                     	;# 
   797  1E16                     	;# 
   798  1E17                     	;# 
   799  1E18                     	;# 
   800  1E19                     	;# 
   801  1E1A                     	;# 
   802  1E1B                     	;# 
   803  1E1C                     	;# 
   804  1E1D                     	;# 
   805  1E1E                     	;# 
   806  1E1F                     	;# 
   807  1E20                     	;# 
   808  1E21                     	;# 
   809  1E22                     	;# 
   810  1E23                     	;# 
   811  1E24                     	;# 
   812  1E25                     	;# 
   813  1E26                     	;# 
   814  1E27                     	;# 
   815  1E28                     	;# 
   816  1E29                     	;# 
   817  1E2A                     	;# 
   818  1E2B                     	;# 
   819  1E2C                     	;# 
   820  1E2D                     	;# 
   821  1E2E                     	;# 
   822  1E2F                     	;# 
   823  1E30                     	;# 
   824  1E31                     	;# 
   825  1E32                     	;# 
   826  1E33                     	;# 
   827  1E34                     	;# 
   828  1E35                     	;# 
   829  1E36                     	;# 
   830  1E37                     	;# 
   831  1E8F                     	;# 
   832  1E90                     	;# 
   833  1E91                     	;# 
   834  1E92                     	;# 
   835  1E93                     	;# 
   836  1E9C                     	;# 
   837  1EA1                     	;# 
   838  1EA2                     	;# 
   839  1EB1                     	;# 
   840  1EBB                     	;# 
   841  1EBC                     	;# 
   842  1EBD                     	;# 
   843  1EBE                     	;# 
   844  1EC3                     	;# 
   845  1EC5                     	;# 
   846  1EC6                     	;# 
   847  1EC7                     	;# 
   848  1EC8                     	;# 
   849  1EC9                     	;# 
   850  1ECA                     	;# 
   851  1ECB                     	;# 
   852  1ECC                     	;# 
   853  1ECD                     	;# 
   854  1ECE                     	;# 
   855  1F10                     	;# 
   856  1F11                     	;# 
   857  1F12                     	;# 
   858  1F13                     	;# 
   859  1F14                     	;# 
   860  1F15                     	;# 
   861  1F16                     	;# 
   862  1F17                     	;# 
   863  1F18                     	;# 
   864  1F19                     	;# 
   865  1F1A                     	;# 
   866  1F1B                     	;# 
   867  1F1C                     	;# 
   868  1F1D                     	;# 
   869  1F1E                     	;# 
   870  1F1F                     	;# 
   871  1F20                     	;# 
   872  1F21                     	;# 
   873  1F22                     	;# 
   874  1F23                     	;# 
   875  1F24                     	;# 
   876  1F25                     	;# 
   877  1F26                     	;# 
   878  1F27                     	;# 
   879  1F38                     	;# 
   880  1F39                     	;# 
   881  1F3A                     	;# 
   882  1F3B                     	;# 
   883  1F3C                     	;# 
   884  1F3D                     	;# 
   885  1F3E                     	;# 
   886  1F3F                     	;# 
   887  1F43                     	;# 
   888  1F44                     	;# 
   889  1F45                     	;# 
   890  1F46                     	;# 
   891  1F47                     	;# 
   892  1F48                     	;# 
   893  1F49                     	;# 
   894  1F4A                     	;# 
   895  1F4E                     	;# 
   896  1F4F                     	;# 
   897  1F50                     	;# 
   898  1F51                     	;# 
   899  1F52                     	;# 
   900  1F53                     	;# 
   901  1F54                     	;# 
   902  1F55                     	;# 
   903  1F65                     	;# 
   904  1F68                     	;# 
   905  1F69                     	;# 
   906  1F6A                     	;# 
   907  1F6B                     	;# 
   908  1FE4                     	;# 
   909  1FE5                     	;# 
   910  1FE6                     	;# 
   911  1FE7                     	;# 
   912  1FE8                     	;# 
   913  1FE8                     	;# 
   914  1FE9                     	;# 
   915  1FEA                     	;# 
   916  1FEB                     	;# 
   917  1FED                     	;# 
   918  1FEE                     	;# 
   919  1FEF                     	;# 
   920  0000                     	;# 
   921  0001                     	;# 
   922  0002                     	;# 
   923  0003                     	;# 
   924  0004                     	;# 
   925  0005                     	;# 
   926  0006                     	;# 
   927  0007                     	;# 
   928  0008                     	;# 
   929  0009                     	;# 
   930  000A                     	;# 
   931  000B                     	;# 
   932  000C                     	;# 
   933  000D                     	;# 
   934  000E                     	;# 
   935  0010                     	;# 
   936  0012                     	;# 
   937  0013                     	;# 
   938  0014                     	;# 
   939  0016                     	;# 
   940  0018                     	;# 
   941  0019                     	;# 
   942  001A                     	;# 
   943  009B                     	;# 
   944  009B                     	;# 
   945  009C                     	;# 
   946  009D                     	;# 
   947  009E                     	;# 
   948  009F                     	;# 
   949  0119                     	;# 
   950  0119                     	;# 
   951  0119                     	;# 
   952  011A                     	;# 
   953  011A                     	;# 
   954  011A                     	;# 
   955  011B                     	;# 
   956  011B                     	;# 
   957  011B                     	;# 
   958  011B                     	;# 
   959  011B                     	;# 
   960  011C                     	;# 
   961  011C                     	;# 
   962  011C                     	;# 
   963  011D                     	;# 
   964  011D                     	;# 
   965  011D                     	;# 
   966  011E                     	;# 
   967  011E                     	;# 
   968  011E                     	;# 
   969  011F                     	;# 
   970  011F                     	;# 
   971  011F                     	;# 
   972  011F                     	;# 
   973  011F                     	;# 
   974  018C                     	;# 
   975  018D                     	;# 
   976  018E                     	;# 
   977  018F                     	;# 
   978  0190                     	;# 
   979  0191                     	;# 
   980  0192                     	;# 
   981  0196                     	;# 
   982  0197                     	;# 
   983  0198                     	;# 
   984  0199                     	;# 
   985  019A                     	;# 
   986  019B                     	;# 
   987  019C                     	;# 
   988  020C                     	;# 
   989  020C                     	;# 
   990  020D                     	;# 
   991  020E                     	;# 
   992  020F                     	;# 
   993  020F                     	;# 
   994  0210                     	;# 
   995  0210                     	;# 
   996  0211                     	;# 
   997  0211                     	;# 
   998  028C                     	;# 
   999  028C                     	;# 
  1000  028D                     	;# 
  1001  028D                     	;# 
  1002  028E                     	;# 
  1003  028F                     	;# 
  1004  0290                     	;# 
  1005  0291                     	;# 
  1006  030C                     	;# 
  1007  030C                     	;# 
  1008  030D                     	;# 
  1009  030E                     	;# 
  1010  030F                     	;# 
  1011  0310                     	;# 
  1012  0310                     	;# 
  1013  0311                     	;# 
  1014  0312                     	;# 
  1015  0313                     	;# 
  1016  0314                     	;# 
  1017  0314                     	;# 
  1018  0315                     	;# 
  1019  0316                     	;# 
  1020  0318                     	;# 
  1021  0318                     	;# 
  1022  0319                     	;# 
  1023  031A                     	;# 
  1024  031C                     	;# 
  1025  031C                     	;# 
  1026  031D                     	;# 
  1027  031E                     	;# 
  1028  038C                     	;# 
  1029  038C                     	;# 
  1030  038D                     	;# 
  1031  038E                     	;# 
  1032  058C                     	;# 
  1033  058C                     	;# 
  1034  058D                     	;# 
  1035  058E                     	;# 
  1036  058F                     	;# 
  1037  058F                     	;# 
  1038  0590                     	;# 
  1039  0591                     	;# 
  1040  0592                     	;# 
  1041  0593                     	;# 
  1042  059C                     	;# 
  1043  059C                     	;# 
  1044  059D                     	;# 
  1045  059D                     	;# 
  1046  059E                     	;# 
  1047  059F                     	;# 
  1048  060C                     	;# 
  1049  060D                     	;# 
  1050  060E                     	;# 
  1051  060F                     	;# 
  1052  0610                     	;# 
  1053  0611                     	;# 
  1054  0612                     	;# 
  1055  0613                     	;# 
  1056  0614                     	;# 
  1057  070C                     	;# 
  1058  070D                     	;# 
  1059  070E                     	;# 
  1060  070F                     	;# 
  1061  0710                     	;# 
  1062  0711                     	;# 
  1063  0712                     	;# 
  1064  0713                     	;# 
  1065  0716                     	;# 
  1066  0717                     	;# 
  1067  0718                     	;# 
  1068  0719                     	;# 
  1069  071A                     	;# 
  1070  071B                     	;# 
  1071  071C                     	;# 
  1072  071D                     	;# 
  1073  0796                     	;# 
  1074  0797                     	;# 
  1075  0798                     	;# 
  1076  0799                     	;# 
  1077  079A                     	;# 
  1078  079B                     	;# 
  1079  080C                     	;# 
  1080  080D                     	;# 
  1081  080E                     	;# 
  1082  080F                     	;# 
  1083  0810                     	;# 
  1084  0811                     	;# 
  1085  0812                     	;# 
  1086  0813                     	;# 
  1087  0814                     	;# 
  1088  081A                     	;# 
  1089  081A                     	;# 
  1090  081B                     	;# 
  1091  081C                     	;# 
  1092  081C                     	;# 
  1093  081D                     	;# 
  1094  081E                     	;# 
  1095  081F                     	;# 
  1096  088C                     	;# 
  1097  088D                     	;# 
  1098  088E                     	;# 
  1099  088F                     	;# 
  1100  0890                     	;# 
  1101  0891                     	;# 
  1102  0892                     	;# 
  1103  0893                     	;# 
  1104  0895                     	;# 
  1105  0896                     	;# 
  1106  090C                     	;# 
  1107  090E                     	;# 
  1108  090F                     	;# 
  1109  091F                     	;# 
  1110  098F                     	;# 
  1111  098F                     	;# 
  1112  0990                     	;# 
  1113  0991                     	;# 
  1114  0992                     	;# 
  1115  0993                     	;# 
  1116  0994                     	;# 
  1117  0995                     	;# 
  1118  0996                     	;# 
  1119  0997                     	;# 
  1120  0A19                     	;# 
  1121  0A19                     	;# 
  1122  0A1A                     	;# 
  1123  0A1A                     	;# 
  1124  0A1B                     	;# 
  1125  0A1B                     	;# 
  1126  0A1B                     	;# 
  1127  0A1C                     	;# 
  1128  0A1C                     	;# 
  1129  0A1D                     	;# 
  1130  0A1D                     	;# 
  1131  0A1E                     	;# 
  1132  0A1E                     	;# 
  1133  0A1F                     	;# 
  1134  0A1F                     	;# 
  1135  0A1F                     	;# 
  1136  1E0F                     	;# 
  1137  1E10                     	;# 
  1138  1E11                     	;# 
  1139  1E12                     	;# 
  1140  1E13                     	;# 
  1141  1E14                     	;# 
  1142  1E15                     	;# 
  1143  1E16                     	;# 
  1144  1E17                     	;# 
  1145  1E18                     	;# 
  1146  1E19                     	;# 
  1147  1E1A                     	;# 
  1148  1E1B                     	;# 
  1149  1E1C                     	;# 
  1150  1E1D                     	;# 
  1151  1E1E                     	;# 
  1152  1E1F                     	;# 
  1153  1E20                     	;# 
  1154  1E21                     	;# 
  1155  1E22                     	;# 
  1156  1E23                     	;# 
  1157  1E24                     	;# 
  1158  1E25                     	;# 
  1159  1E26                     	;# 
  1160  1E27                     	;# 
  1161  1E28                     	;# 
  1162  1E29                     	;# 
  1163  1E2A                     	;# 
  1164  1E2B                     	;# 
  1165  1E2C                     	;# 
  1166  1E2D                     	;# 
  1167  1E2E                     	;# 
  1168  1E2F                     	;# 
  1169  1E30                     	;# 
  1170  1E31                     	;# 
  1171  1E32                     	;# 
  1172  1E33                     	;# 
  1173  1E34                     	;# 
  1174  1E35                     	;# 
  1175  1E36                     	;# 
  1176  1E37                     	;# 
  1177  1E8F                     	;# 
  1178  1E90                     	;# 
  1179  1E91                     	;# 
  1180  1E92                     	;# 
  1181  1E93                     	;# 
  1182  1E9C                     	;# 
  1183  1EA1                     	;# 
  1184  1EA2                     	;# 
  1185  1EB1                     	;# 
  1186  1EBB                     	;# 
  1187  1EBC                     	;# 
  1188  1EBD                     	;# 
  1189  1EBE                     	;# 
  1190  1EC3                     	;# 
  1191  1EC5                     	;# 
  1192  1EC6                     	;# 
  1193  1EC7                     	;# 
  1194  1EC8                     	;# 
  1195  1EC9                     	;# 
  1196  1ECA                     	;# 
  1197  1ECB                     	;# 
  1198  1ECC                     	;# 
  1199  1ECD                     	;# 
  1200  1ECE                     	;# 
  1201  1F10                     	;# 
  1202  1F11                     	;# 
  1203  1F12                     	;# 
  1204  1F13                     	;# 
  1205  1F14                     	;# 
  1206  1F15                     	;# 
  1207  1F16                     	;# 
  1208  1F17                     	;# 
  1209  1F18                     	;# 
  1210  1F19                     	;# 
  1211  1F1A                     	;# 
  1212  1F1B                     	;# 
  1213  1F1C                     	;# 
  1214  1F1D                     	;# 
  1215  1F1E                     	;# 
  1216  1F1F                     	;# 
  1217  1F20                     	;# 
  1218  1F21                     	;# 
  1219  1F22                     	;# 
  1220  1F23                     	;# 
  1221  1F24                     	;# 
  1222  1F25                     	;# 
  1223  1F26                     	;# 
  1224  1F27                     	;# 
  1225  1F38                     	;# 
  1226  1F39                     	;# 
  1227  1F3A                     	;# 
  1228  1F3B                     	;# 
  1229  1F3C                     	;# 
  1230  1F3D                     	;# 
  1231  1F3E                     	;# 
  1232  1F3F                     	;# 
  1233  1F43                     	;# 
  1234  1F44                     	;# 
  1235  1F45                     	;# 
  1236  1F46                     	;# 
  1237  1F47                     	;# 
  1238  1F48                     	;# 
  1239  1F49                     	;# 
  1240  1F4A                     	;# 
  1241  1F4E                     	;# 
  1242  1F4F                     	;# 
  1243  1F50                     	;# 
  1244  1F51                     	;# 
  1245  1F52                     	;# 
  1246  1F53                     	;# 
  1247  1F54                     	;# 
  1248  1F55                     	;# 
  1249  1F65                     	;# 
  1250  1F68                     	;# 
  1251  1F69                     	;# 
  1252  1F6A                     	;# 
  1253  1F6B                     	;# 
  1254  1FE4                     	;# 
  1255  1FE5                     	;# 
  1256  1FE6                     	;# 
  1257  1FE7                     	;# 
  1258  1FE8                     	;# 
  1259  1FE8                     	;# 
  1260  1FE9                     	;# 
  1261  1FEA                     	;# 
  1262  1FEB                     	;# 
  1263  1FED                     	;# 
  1264  1FEE                     	;# 
  1265  1FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0012                     	;# 
  1283  0013                     	;# 
  1284  0014                     	;# 
  1285  0016                     	;# 
  1286  0018                     	;# 
  1287  0019                     	;# 
  1288  001A                     	;# 
  1289  009B                     	;# 
  1290  009B                     	;# 
  1291  009C                     	;# 
  1292  009D                     	;# 
  1293  009E                     	;# 
  1294  009F                     	;# 
  1295  0119                     	;# 
  1296  0119                     	;# 
  1297  0119                     	;# 
  1298  011A                     	;# 
  1299  011A                     	;# 
  1300  011A                     	;# 
  1301  011B                     	;# 
  1302  011B                     	;# 
  1303  011B                     	;# 
  1304  011B                     	;# 
  1305  011B                     	;# 
  1306  011C                     	;# 
  1307  011C                     	;# 
  1308  011C                     	;# 
  1309  011D                     	;# 
  1310  011D                     	;# 
  1311  011D                     	;# 
  1312  011E                     	;# 
  1313  011E                     	;# 
  1314  011E                     	;# 
  1315  011F                     	;# 
  1316  011F                     	;# 
  1317  011F                     	;# 
  1318  011F                     	;# 
  1319  011F                     	;# 
  1320  018C                     	;# 
  1321  018D                     	;# 
  1322  018E                     	;# 
  1323  018F                     	;# 
  1324  0190                     	;# 
  1325  0191                     	;# 
  1326  0192                     	;# 
  1327  0196                     	;# 
  1328  0197                     	;# 
  1329  0198                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  020C                     	;# 
  1335  020C                     	;# 
  1336  020D                     	;# 
  1337  020E                     	;# 
  1338  020F                     	;# 
  1339  020F                     	;# 
  1340  0210                     	;# 
  1341  0210                     	;# 
  1342  0211                     	;# 
  1343  0211                     	;# 
  1344  028C                     	;# 
  1345  028C                     	;# 
  1346  028D                     	;# 
  1347  028D                     	;# 
  1348  028E                     	;# 
  1349  028F                     	;# 
  1350  0290                     	;# 
  1351  0291                     	;# 
  1352  030C                     	;# 
  1353  030C                     	;# 
  1354  030D                     	;# 
  1355  030E                     	;# 
  1356  030F                     	;# 
  1357  0310                     	;# 
  1358  0310                     	;# 
  1359  0311                     	;# 
  1360  0312                     	;# 
  1361  0313                     	;# 
  1362  0314                     	;# 
  1363  0314                     	;# 
  1364  0315                     	;# 
  1365  0316                     	;# 
  1366  0318                     	;# 
  1367  0318                     	;# 
  1368  0319                     	;# 
  1369  031A                     	;# 
  1370  031C                     	;# 
  1371  031C                     	;# 
  1372  031D                     	;# 
  1373  031E                     	;# 
  1374  038C                     	;# 
  1375  038C                     	;# 
  1376  038D                     	;# 
  1377  038E                     	;# 
  1378  058C                     	;# 
  1379  058C                     	;# 
  1380  058D                     	;# 
  1381  058E                     	;# 
  1382  058F                     	;# 
  1383  058F                     	;# 
  1384  0590                     	;# 
  1385  0591                     	;# 
  1386  0592                     	;# 
  1387  0593                     	;# 
  1388  059C                     	;# 
  1389  059C                     	;# 
  1390  059D                     	;# 
  1391  059D                     	;# 
  1392  059E                     	;# 
  1393  059F                     	;# 
  1394  060C                     	;# 
  1395  060D                     	;# 
  1396  060E                     	;# 
  1397  060F                     	;# 
  1398  0610                     	;# 
  1399  0611                     	;# 
  1400  0612                     	;# 
  1401  0613                     	;# 
  1402  0614                     	;# 
  1403  070C                     	;# 
  1404  070D                     	;# 
  1405  070E                     	;# 
  1406  070F                     	;# 
  1407  0710                     	;# 
  1408  0711                     	;# 
  1409  0712                     	;# 
  1410  0713                     	;# 
  1411  0716                     	;# 
  1412  0717                     	;# 
  1413  0718                     	;# 
  1414  0719                     	;# 
  1415  071A                     	;# 
  1416  071B                     	;# 
  1417  071C                     	;# 
  1418  071D                     	;# 
  1419  0796                     	;# 
  1420  0797                     	;# 
  1421  0798                     	;# 
  1422  0799                     	;# 
  1423  079A                     	;# 
  1424  079B                     	;# 
  1425  080C                     	;# 
  1426  080D                     	;# 
  1427  080E                     	;# 
  1428  080F                     	;# 
  1429  0810                     	;# 
  1430  0811                     	;# 
  1431  0812                     	;# 
  1432  0813                     	;# 
  1433  0814                     	;# 
  1434  081A                     	;# 
  1435  081A                     	;# 
  1436  081B                     	;# 
  1437  081C                     	;# 
  1438  081C                     	;# 
  1439  081D                     	;# 
  1440  081E                     	;# 
  1441  081F                     	;# 
  1442  088C                     	;# 
  1443  088D                     	;# 
  1444  088E                     	;# 
  1445  088F                     	;# 
  1446  0890                     	;# 
  1447  0891                     	;# 
  1448  0892                     	;# 
  1449  0893                     	;# 
  1450  0895                     	;# 
  1451  0896                     	;# 
  1452  090C                     	;# 
  1453  090E                     	;# 
  1454  090F                     	;# 
  1455  091F                     	;# 
  1456  098F                     	;# 
  1457  098F                     	;# 
  1458  0990                     	;# 
  1459  0991                     	;# 
  1460  0992                     	;# 
  1461  0993                     	;# 
  1462  0994                     	;# 
  1463  0995                     	;# 
  1464  0996                     	;# 
  1465  0997                     	;# 
  1466  0A19                     	;# 
  1467  0A19                     	;# 
  1468  0A1A                     	;# 
  1469  0A1A                     	;# 
  1470  0A1B                     	;# 
  1471  0A1B                     	;# 
  1472  0A1B                     	;# 
  1473  0A1C                     	;# 
  1474  0A1C                     	;# 
  1475  0A1D                     	;# 
  1476  0A1D                     	;# 
  1477  0A1E                     	;# 
  1478  0A1E                     	;# 
  1479  0A1F                     	;# 
  1480  0A1F                     	;# 
  1481  0A1F                     	;# 
  1482  1E0F                     	;# 
  1483  1E10                     	;# 
  1484  1E11                     	;# 
  1485  1E12                     	;# 
  1486  1E13                     	;# 
  1487  1E14                     	;# 
  1488  1E15                     	;# 
  1489  1E16                     	;# 
  1490  1E17                     	;# 
  1491  1E18                     	;# 
  1492  1E19                     	;# 
  1493  1E1A                     	;# 
  1494  1E1B                     	;# 
  1495  1E1C                     	;# 
  1496  1E1D                     	;# 
  1497  1E1E                     	;# 
  1498  1E1F                     	;# 
  1499  1E20                     	;# 
  1500  1E21                     	;# 
  1501  1E22                     	;# 
  1502  1E23                     	;# 
  1503  1E24                     	;# 
  1504  1E25                     	;# 
  1505  1E26                     	;# 
  1506  1E27                     	;# 
  1507  1E28                     	;# 
  1508  1E29                     	;# 
  1509  1E2A                     	;# 
  1510  1E2B                     	;# 
  1511  1E2C                     	;# 
  1512  1E2D                     	;# 
  1513  1E2E                     	;# 
  1514  1E2F                     	;# 
  1515  1E30                     	;# 
  1516  1E31                     	;# 
  1517  1E32                     	;# 
  1518  1E33                     	;# 
  1519  1E34                     	;# 
  1520  1E35                     	;# 
  1521  1E36                     	;# 
  1522  1E37                     	;# 
  1523  1E8F                     	;# 
  1524  1E90                     	;# 
  1525  1E91                     	;# 
  1526  1E92                     	;# 
  1527  1E93                     	;# 
  1528  1E9C                     	;# 
  1529  1EA1                     	;# 
  1530  1EA2                     	;# 
  1531  1EB1                     	;# 
  1532  1EBB                     	;# 
  1533  1EBC                     	;# 
  1534  1EBD                     	;# 
  1535  1EBE                     	;# 
  1536  1EC3                     	;# 
  1537  1EC5                     	;# 
  1538  1EC6                     	;# 
  1539  1EC7                     	;# 
  1540  1EC8                     	;# 
  1541  1EC9                     	;# 
  1542  1ECA                     	;# 
  1543  1ECB                     	;# 
  1544  1ECC                     	;# 
  1545  1ECD                     	;# 
  1546  1ECE                     	;# 
  1547  1F10                     	;# 
  1548  1F11                     	;# 
  1549  1F12                     	;# 
  1550  1F13                     	;# 
  1551  1F14                     	;# 
  1552  1F15                     	;# 
  1553  1F16                     	;# 
  1554  1F17                     	;# 
  1555  1F18                     	;# 
  1556  1F19                     	;# 
  1557  1F1A                     	;# 
  1558  1F1B                     	;# 
  1559  1F1C                     	;# 
  1560  1F1D                     	;# 
  1561  1F1E                     	;# 
  1562  1F1F                     	;# 
  1563  1F20                     	;# 
  1564  1F21                     	;# 
  1565  1F22                     	;# 
  1566  1F23                     	;# 
  1567  1F24                     	;# 
  1568  1F25                     	;# 
  1569  1F26                     	;# 
  1570  1F27                     	;# 
  1571  1F38                     	;# 
  1572  1F39                     	;# 
  1573  1F3A                     	;# 
  1574  1F3B                     	;# 
  1575  1F3C                     	;# 
  1576  1F3D                     	;# 
  1577  1F3E                     	;# 
  1578  1F3F                     	;# 
  1579  1F43                     	;# 
  1580  1F44                     	;# 
  1581  1F45                     	;# 
  1582  1F46                     	;# 
  1583  1F47                     	;# 
  1584  1F48                     	;# 
  1585  1F49                     	;# 
  1586  1F4A                     	;# 
  1587  1F4E                     	;# 
  1588  1F4F                     	;# 
  1589  1F50                     	;# 
  1590  1F51                     	;# 
  1591  1F52                     	;# 
  1592  1F53                     	;# 
  1593  1F54                     	;# 
  1594  1F55                     	;# 
  1595  1F65                     	;# 
  1596  1F68                     	;# 
  1597  1F69                     	;# 
  1598  1F6A                     	;# 
  1599  1F6B                     	;# 
  1600  1FE4                     	;# 
  1601  1FE5                     	;# 
  1602  1FE6                     	;# 
  1603  1FE7                     	;# 
  1604  1FE8                     	;# 
  1605  1FE8                     	;# 
  1606  1FE9                     	;# 
  1607  1FEA                     	;# 
  1608  1FEB                     	;# 
  1609  1FED                     	;# 
  1610  1FEE                     	;# 
  1611  1FEF                     	;# 
  1612  0000                     	;# 
  1613  0001                     	;# 
  1614  0002                     	;# 
  1615  0003                     	;# 
  1616  0004                     	;# 
  1617  0005                     	;# 
  1618  0006                     	;# 
  1619  0007                     	;# 
  1620  0008                     	;# 
  1621  0009                     	;# 
  1622  000A                     	;# 
  1623  000B                     	;# 
  1624  000C                     	;# 
  1625  000D                     	;# 
  1626  000E                     	;# 
  1627  0010                     	;# 
  1628  0012                     	;# 
  1629  0013                     	;# 
  1630  0014                     	;# 
  1631  0016                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  009B                     	;# 
  1636  009B                     	;# 
  1637  009C                     	;# 
  1638  009D                     	;# 
  1639  009E                     	;# 
  1640  009F                     	;# 
  1641  0119                     	;# 
  1642  0119                     	;# 
  1643  0119                     	;# 
  1644  011A                     	;# 
  1645  011A                     	;# 
  1646  011A                     	;# 
  1647  011B                     	;# 
  1648  011B                     	;# 
  1649  011B                     	;# 
  1650  011B                     	;# 
  1651  011B                     	;# 
  1652  011C                     	;# 
  1653  011C                     	;# 
  1654  011C                     	;# 
  1655  011D                     	;# 
  1656  011D                     	;# 
  1657  011D                     	;# 
  1658  011E                     	;# 
  1659  011E                     	;# 
  1660  011E                     	;# 
  1661  011F                     	;# 
  1662  011F                     	;# 
  1663  011F                     	;# 
  1664  011F                     	;# 
  1665  011F                     	;# 
  1666  018C                     	;# 
  1667  018D                     	;# 
  1668  018E                     	;# 
  1669  018F                     	;# 
  1670  0190                     	;# 
  1671  0191                     	;# 
  1672  0192                     	;# 
  1673  0196                     	;# 
  1674  0197                     	;# 
  1675  0198                     	;# 
  1676  0199                     	;# 
  1677  019A                     	;# 
  1678  019B                     	;# 
  1679  019C                     	;# 
  1680  020C                     	;# 
  1681  020C                     	;# 
  1682  020D                     	;# 
  1683  020E                     	;# 
  1684  020F                     	;# 
  1685  020F                     	;# 
  1686  0210                     	;# 
  1687  0210                     	;# 
  1688  0211                     	;# 
  1689  0211                     	;# 
  1690  028C                     	;# 
  1691  028C                     	;# 
  1692  028D                     	;# 
  1693  028D                     	;# 
  1694  028E                     	;# 
  1695  028F                     	;# 
  1696  0290                     	;# 
  1697  0291                     	;# 
  1698  030C                     	;# 
  1699  030C                     	;# 
  1700  030D                     	;# 
  1701  030E                     	;# 
  1702  030F                     	;# 
  1703  0310                     	;# 
  1704  0310                     	;# 
  1705  0311                     	;# 
  1706  0312                     	;# 
  1707  0313                     	;# 
  1708  0314                     	;# 
  1709  0314                     	;# 
  1710  0315                     	;# 
  1711  0316                     	;# 
  1712  0318                     	;# 
  1713  0318                     	;# 
  1714  0319                     	;# 
  1715  031A                     	;# 
  1716  031C                     	;# 
  1717  031C                     	;# 
  1718  031D                     	;# 
  1719  031E                     	;# 
  1720  038C                     	;# 
  1721  038C                     	;# 
  1722  038D                     	;# 
  1723  038E                     	;# 
  1724  058C                     	;# 
  1725  058C                     	;# 
  1726  058D                     	;# 
  1727  058E                     	;# 
  1728  058F                     	;# 
  1729  058F                     	;# 
  1730  0590                     	;# 
  1731  0591                     	;# 
  1732  0592                     	;# 
  1733  0593                     	;# 
  1734  059C                     	;# 
  1735  059C                     	;# 
  1736  059D                     	;# 
  1737  059D                     	;# 
  1738  059E                     	;# 
  1739  059F                     	;# 
  1740  060C                     	;# 
  1741  060D                     	;# 
  1742  060E                     	;# 
  1743  060F                     	;# 
  1744  0610                     	;# 
  1745  0611                     	;# 
  1746  0612                     	;# 
  1747  0613                     	;# 
  1748  0614                     	;# 
  1749  070C                     	;# 
  1750  070D                     	;# 
  1751  070E                     	;# 
  1752  070F                     	;# 
  1753  0710                     	;# 
  1754  0711                     	;# 
  1755  0712                     	;# 
  1756  0713                     	;# 
  1757  0716                     	;# 
  1758  0717                     	;# 
  1759  0718                     	;# 
  1760  0719                     	;# 
  1761  071A                     	;# 
  1762  071B                     	;# 
  1763  071C                     	;# 
  1764  071D                     	;# 
  1765  0796                     	;# 
  1766  0797                     	;# 
  1767  0798                     	;# 
  1768  0799                     	;# 
  1769  079A                     	;# 
  1770  079B                     	;# 
  1771  080C                     	;# 
  1772  080D                     	;# 
  1773  080E                     	;# 
  1774  080F                     	;# 
  1775  0810                     	;# 
  1776  0811                     	;# 
  1777  0812                     	;# 
  1778  0813                     	;# 
  1779  0814                     	;# 
  1780  081A                     	;# 
  1781  081A                     	;# 
  1782  081B                     	;# 
  1783  081C                     	;# 
  1784  081C                     	;# 
  1785  081D                     	;# 
  1786  081E                     	;# 
  1787  081F                     	;# 
  1788  088C                     	;# 
  1789  088D                     	;# 
  1790  088E                     	;# 
  1791  088F                     	;# 
  1792  0890                     	;# 
  1793  0891                     	;# 
  1794  0892                     	;# 
  1795  0893                     	;# 
  1796  0895                     	;# 
  1797  0896                     	;# 
  1798  090C                     	;# 
  1799  090E                     	;# 
  1800  090F                     	;# 
  1801  091F                     	;# 
  1802  098F                     	;# 
  1803  098F                     	;# 
  1804  0990                     	;# 
  1805  0991                     	;# 
  1806  0992                     	;# 
  1807  0993                     	;# 
  1808  0994                     	;# 
  1809  0995                     	;# 
  1810  0996                     	;# 
  1811  0997                     	;# 
  1812  0A19                     	;# 
  1813  0A19                     	;# 
  1814  0A1A                     	;# 
  1815  0A1A                     	;# 
  1816  0A1B                     	;# 
  1817  0A1B                     	;# 
  1818  0A1B                     	;# 
  1819  0A1C                     	;# 
  1820  0A1C                     	;# 
  1821  0A1D                     	;# 
  1822  0A1D                     	;# 
  1823  0A1E                     	;# 
  1824  0A1E                     	;# 
  1825  0A1F                     	;# 
  1826  0A1F                     	;# 
  1827  0A1F                     	;# 
  1828  1E0F                     	;# 
  1829  1E10                     	;# 
  1830  1E11                     	;# 
  1831  1E12                     	;# 
  1832  1E13                     	;# 
  1833  1E14                     	;# 
  1834  1E15                     	;# 
  1835  1E16                     	;# 
  1836  1E17                     	;# 
  1837  1E18                     	;# 
  1838  1E19                     	;# 
  1839  1E1A                     	;# 
  1840  1E1B                     	;# 
  1841  1E1C                     	;# 
  1842  1E1D                     	;# 
  1843  1E1E                     	;# 
  1844  1E1F                     	;# 
  1845  1E20                     	;# 
  1846  1E21                     	;# 
  1847  1E22                     	;# 
  1848  1E23                     	;# 
  1849  1E24                     	;# 
  1850  1E25                     	;# 
  1851  1E26                     	;# 
  1852  1E27                     	;# 
  1853  1E28                     	;# 
  1854  1E29                     	;# 
  1855  1E2A                     	;# 
  1856  1E2B                     	;# 
  1857  1E2C                     	;# 
  1858  1E2D                     	;# 
  1859  1E2E                     	;# 
  1860  1E2F                     	;# 
  1861  1E30                     	;# 
  1862  1E31                     	;# 
  1863  1E32                     	;# 
  1864  1E33                     	;# 
  1865  1E34                     	;# 
  1866  1E35                     	;# 
  1867  1E36                     	;# 
  1868  1E37                     	;# 
  1869  1E8F                     	;# 
  1870  1E90                     	;# 
  1871  1E91                     	;# 
  1872  1E92                     	;# 
  1873  1E93                     	;# 
  1874  1E9C                     	;# 
  1875  1EA1                     	;# 
  1876  1EA2                     	;# 
  1877  1EB1                     	;# 
  1878  1EBB                     	;# 
  1879  1EBC                     	;# 
  1880  1EBD                     	;# 
  1881  1EBE                     	;# 
  1882  1EC3                     	;# 
  1883  1EC5                     	;# 
  1884  1EC6                     	;# 
  1885  1EC7                     	;# 
  1886  1EC8                     	;# 
  1887  1EC9                     	;# 
  1888  1ECA                     	;# 
  1889  1ECB                     	;# 
  1890  1ECC                     	;# 
  1891  1ECD                     	;# 
  1892  1ECE                     	;# 
  1893  1F10                     	;# 
  1894  1F11                     	;# 
  1895  1F12                     	;# 
  1896  1F13                     	;# 
  1897  1F14                     	;# 
  1898  1F15                     	;# 
  1899  1F16                     	;# 
  1900  1F17                     	;# 
  1901  1F18                     	;# 
  1902  1F19                     	;# 
  1903  1F1A                     	;# 
  1904  1F1B                     	;# 
  1905  1F1C                     	;# 
  1906  1F1D                     	;# 
  1907  1F1E                     	;# 
  1908  1F1F                     	;# 
  1909  1F20                     	;# 
  1910  1F21                     	;# 
  1911  1F22                     	;# 
  1912  1F23                     	;# 
  1913  1F24                     	;# 
  1914  1F25                     	;# 
  1915  1F26                     	;# 
  1916  1F27                     	;# 
  1917  1F38                     	;# 
  1918  1F39                     	;# 
  1919  1F3A                     	;# 
  1920  1F3B                     	;# 
  1921  1F3C                     	;# 
  1922  1F3D                     	;# 
  1923  1F3E                     	;# 
  1924  1F3F                     	;# 
  1925  1F43                     	;# 
  1926  1F44                     	;# 
  1927  1F45                     	;# 
  1928  1F46                     	;# 
  1929  1F47                     	;# 
  1930  1F48                     	;# 
  1931  1F49                     	;# 
  1932  1F4A                     	;# 
  1933  1F4E                     	;# 
  1934  1F4F                     	;# 
  1935  1F50                     	;# 
  1936  1F51                     	;# 
  1937  1F52                     	;# 
  1938  1F53                     	;# 
  1939  1F54                     	;# 
  1940  1F55                     	;# 
  1941  1F65                     	;# 
  1942  1F68                     	;# 
  1943  1F69                     	;# 
  1944  1F6A                     	;# 
  1945  1F6B                     	;# 
  1946  1FE4                     	;# 
  1947  1FE5                     	;# 
  1948  1FE6                     	;# 
  1949  1FE7                     	;# 
  1950  1FE8                     	;# 
  1951  1FE8                     	;# 
  1952  1FE9                     	;# 
  1953  1FEA                     	;# 
  1954  1FEB                     	;# 
  1955  1FED                     	;# 
  1956  1FEE                     	;# 
  1957  1FEF                     	;# 
  1958  0000                     	;# 
  1959  0001                     	;# 
  1960  0002                     	;# 
  1961  0003                     	;# 
  1962  0004                     	;# 
  1963  0005                     	;# 
  1964  0006                     	;# 
  1965  0007                     	;# 
  1966  0008                     	;# 
  1967  0009                     	;# 
  1968  000A                     	;# 
  1969  000B                     	;# 
  1970  000C                     	;# 
  1971  000D                     	;# 
  1972  000E                     	;# 
  1973  0010                     	;# 
  1974  0012                     	;# 
  1975  0013                     	;# 
  1976  0014                     	;# 
  1977  0016                     	;# 
  1978  0018                     	;# 
  1979  0019                     	;# 
  1980  001A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  009F                     	;# 
  1987  0119                     	;# 
  1988  0119                     	;# 
  1989  0119                     	;# 
  1990  011A                     	;# 
  1991  011A                     	;# 
  1992  011A                     	;# 
  1993  011B                     	;# 
  1994  011B                     	;# 
  1995  011B                     	;# 
  1996  011B                     	;# 
  1997  011B                     	;# 
  1998  011C                     	;# 
  1999  011C                     	;# 
  2000  011C                     	;# 
  2001  011D                     	;# 
  2002  011D                     	;# 
  2003  011D                     	;# 
  2004  011E                     	;# 
  2005  011E                     	;# 
  2006  011E                     	;# 
  2007  011F                     	;# 
  2008  011F                     	;# 
  2009  011F                     	;# 
  2010  011F                     	;# 
  2011  011F                     	;# 
  2012  018C                     	;# 
  2013  018D                     	;# 
  2014  018E                     	;# 
  2015  018F                     	;# 
  2016  0190                     	;# 
  2017  0191                     	;# 
  2018  0192                     	;# 
  2019  0196                     	;# 
  2020  0197                     	;# 
  2021  0198                     	;# 
  2022  0199                     	;# 
  2023  019A                     	;# 
  2024  019B                     	;# 
  2025  019C                     	;# 
  2026  020C                     	;# 
  2027  020C                     	;# 
  2028  020D                     	;# 
  2029  020E                     	;# 
  2030  020F                     	;# 
  2031  020F                     	;# 
  2032  0210                     	;# 
  2033  0210                     	;# 
  2034  0211                     	;# 
  2035  0211                     	;# 
  2036  028C                     	;# 
  2037  028C                     	;# 
  2038  028D                     	;# 
  2039  028D                     	;# 
  2040  028E                     	;# 
  2041  028F                     	;# 
  2042  0290                     	;# 
  2043  0291                     	;# 
  2044  030C                     	;# 
  2045  030C                     	;# 
  2046  030D                     	;# 
  2047  030E                     	;# 
  2048  030F                     	;# 
  2049  0310                     	;# 
  2050  0310                     	;# 
  2051  0311                     	;# 
  2052  0312                     	;# 
  2053  0313                     	;# 
  2054  0314                     	;# 
  2055  0314                     	;# 
  2056  0315                     	;# 
  2057  0316                     	;# 
  2058  0318                     	;# 
  2059  0318                     	;# 
  2060  0319                     	;# 
  2061  031A                     	;# 
  2062  031C                     	;# 
  2063  031C                     	;# 
  2064  031D                     	;# 
  2065  031E                     	;# 
  2066  038C                     	;# 
  2067  038C                     	;# 
  2068  038D                     	;# 
  2069  038E                     	;# 
  2070  058C                     	;# 
  2071  058C                     	;# 
  2072  058D                     	;# 
  2073  058E                     	;# 
  2074  058F                     	;# 
  2075  058F                     	;# 
  2076  0590                     	;# 
  2077  0591                     	;# 
  2078  0592                     	;# 
  2079  0593                     	;# 
  2080  059C                     	;# 
  2081  059C                     	;# 
  2082  059D                     	;# 
  2083  059D                     	;# 
  2084  059E                     	;# 
  2085  059F                     	;# 
  2086  060C                     	;# 
  2087  060D                     	;# 
  2088  060E                     	;# 
  2089  060F                     	;# 
  2090  0610                     	;# 
  2091  0611                     	;# 
  2092  0612                     	;# 
  2093  0613                     	;# 
  2094  0614                     	;# 
  2095  070C                     	;# 
  2096  070D                     	;# 
  2097  070E                     	;# 
  2098  070F                     	;# 
  2099  0710                     	;# 
  2100  0711                     	;# 
  2101  0712                     	;# 
  2102  0713                     	;# 
  2103  0716                     	;# 
  2104  0717                     	;# 
  2105  0718                     	;# 
  2106  0719                     	;# 
  2107  071A                     	;# 
  2108  071B                     	;# 
  2109  071C                     	;# 
  2110  071D                     	;# 
  2111  0796                     	;# 
  2112  0797                     	;# 
  2113  0798                     	;# 
  2114  0799                     	;# 
  2115  079A                     	;# 
  2116  079B                     	;# 
  2117  080C                     	;# 
  2118  080D                     	;# 
  2119  080E                     	;# 
  2120  080F                     	;# 
  2121  0810                     	;# 
  2122  0811                     	;# 
  2123  0812                     	;# 
  2124  0813                     	;# 
  2125  0814                     	;# 
  2126  081A                     	;# 
  2127  081A                     	;# 
  2128  081B                     	;# 
  2129  081C                     	;# 
  2130  081C                     	;# 
  2131  081D                     	;# 
  2132  081E                     	;# 
  2133  081F                     	;# 
  2134  088C                     	;# 
  2135  088D                     	;# 
  2136  088E                     	;# 
  2137  088F                     	;# 
  2138  0890                     	;# 
  2139  0891                     	;# 
  2140  0892                     	;# 
  2141  0893                     	;# 
  2142  0895                     	;# 
  2143  0896                     	;# 
  2144  090C                     	;# 
  2145  090E                     	;# 
  2146  090F                     	;# 
  2147  091F                     	;# 
  2148  098F                     	;# 
  2149  098F                     	;# 
  2150  0990                     	;# 
  2151  0991                     	;# 
  2152  0992                     	;# 
  2153  0993                     	;# 
  2154  0994                     	;# 
  2155  0995                     	;# 
  2156  0996                     	;# 
  2157  0997                     	;# 
  2158  0A19                     	;# 
  2159  0A19                     	;# 
  2160  0A1A                     	;# 
  2161  0A1A                     	;# 
  2162  0A1B                     	;# 
  2163  0A1B                     	;# 
  2164  0A1B                     	;# 
  2165  0A1C                     	;# 
  2166  0A1C                     	;# 
  2167  0A1D                     	;# 
  2168  0A1D                     	;# 
  2169  0A1E                     	;# 
  2170  0A1E                     	;# 
  2171  0A1F                     	;# 
  2172  0A1F                     	;# 
  2173  0A1F                     	;# 
  2174  1E0F                     	;# 
  2175  1E10                     	;# 
  2176  1E11                     	;# 
  2177  1E12                     	;# 
  2178  1E13                     	;# 
  2179  1E14                     	;# 
  2180  1E15                     	;# 
  2181  1E16                     	;# 
  2182  1E17                     	;# 
  2183  1E18                     	;# 
  2184  1E19                     	;# 
  2185  1E1A                     	;# 
  2186  1E1B                     	;# 
  2187  1E1C                     	;# 
  2188  1E1D                     	;# 
  2189  1E1E                     	;# 
  2190  1E1F                     	;# 
  2191  1E20                     	;# 
  2192  1E21                     	;# 
  2193  1E22                     	;# 
  2194  1E23                     	;# 
  2195  1E24                     	;# 
  2196  1E25                     	;# 
  2197  1E26                     	;# 
  2198  1E27                     	;# 
  2199  1E28                     	;# 
  2200  1E29                     	;# 
  2201  1E2A                     	;# 
  2202  1E2B                     	;# 
  2203  1E2C                     	;# 
  2204  1E2D                     	;# 
  2205  1E2E                     	;# 
  2206  1E2F                     	;# 
  2207  1E30                     	;# 
  2208  1E31                     	;# 
  2209  1E32                     	;# 
  2210  1E33                     	;# 
  2211  1E34                     	;# 
  2212  1E35                     	;# 
  2213  1E36                     	;# 
  2214  1E37                     	;# 
  2215  1E8F                     	;# 
  2216  1E90                     	;# 
  2217  1E91                     	;# 
  2218  1E92                     	;# 
  2219  1E93                     	;# 
  2220  1E9C                     	;# 
  2221  1EA1                     	;# 
  2222  1EA2                     	;# 
  2223  1EB1                     	;# 
  2224  1EBB                     	;# 
  2225  1EBC                     	;# 
  2226  1EBD                     	;# 
  2227  1EBE                     	;# 
  2228  1EC3                     	;# 
  2229  1EC5                     	;# 
  2230  1EC6                     	;# 
  2231  1EC7                     	;# 
  2232  1EC8                     	;# 
  2233  1EC9                     	;# 
  2234  1ECA                     	;# 
  2235  1ECB                     	;# 
  2236  1ECC                     	;# 
  2237  1ECD                     	;# 
  2238  1ECE                     	;# 
  2239  1F10                     	;# 
  2240  1F11                     	;# 
  2241  1F12                     	;# 
  2242  1F13                     	;# 
  2243  1F14                     	;# 
  2244  1F15                     	;# 
  2245  1F16                     	;# 
  2246  1F17                     	;# 
  2247  1F18                     	;# 
  2248  1F19                     	;# 
  2249  1F1A                     	;# 
  2250  1F1B                     	;# 
  2251  1F1C                     	;# 
  2252  1F1D                     	;# 
  2253  1F1E                     	;# 
  2254  1F1F                     	;# 
  2255  1F20                     	;# 
  2256  1F21                     	;# 
  2257  1F22                     	;# 
  2258  1F23                     	;# 
  2259  1F24                     	;# 
  2260  1F25                     	;# 
  2261  1F26                     	;# 
  2262  1F27                     	;# 
  2263  1F38                     	;# 
  2264  1F39                     	;# 
  2265  1F3A                     	;# 
  2266  1F3B                     	;# 
  2267  1F3C                     	;# 
  2268  1F3D                     	;# 
  2269  1F3E                     	;# 
  2270  1F3F                     	;# 
  2271  1F43                     	;# 
  2272  1F44                     	;# 
  2273  1F45                     	;# 
  2274  1F46                     	;# 
  2275  1F47                     	;# 
  2276  1F48                     	;# 
  2277  1F49                     	;# 
  2278  1F4A                     	;# 
  2279  1F4E                     	;# 
  2280  1F4F                     	;# 
  2281  1F50                     	;# 
  2282  1F51                     	;# 
  2283  1F52                     	;# 
  2284  1F53                     	;# 
  2285  1F54                     	;# 
  2286  1F55                     	;# 
  2287  1F65                     	;# 
  2288  1F68                     	;# 
  2289  1F69                     	;# 
  2290  1F6A                     	;# 
  2291  1F6B                     	;# 
  2292  1FE4                     	;# 
  2293  1FE5                     	;# 
  2294  1FE6                     	;# 
  2295  1FE7                     	;# 
  2296  1FE8                     	;# 
  2297  1FE8                     	;# 
  2298  1FE9                     	;# 
  2299  1FEA                     	;# 
  2300  1FEB                     	;# 
  2301  1FED                     	;# 
  2302  1FEE                     	;# 
  2303  1FEF                     	;# 
  2304  0000                     	;# 
  2305  0001                     	;# 
  2306  0002                     	;# 
  2307  0003                     	;# 
  2308  0004                     	;# 
  2309  0005                     	;# 
  2310  0006                     	;# 
  2311  0007                     	;# 
  2312  0008                     	;# 
  2313  0009                     	;# 
  2314  000A                     	;# 
  2315  000B                     	;# 
  2316  000C                     	;# 
  2317  000D                     	;# 
  2318  000E                     	;# 
  2319  0010                     	;# 
  2320  0012                     	;# 
  2321  0013                     	;# 
  2322  0014                     	;# 
  2323  0016                     	;# 
  2324  0018                     	;# 
  2325  0019                     	;# 
  2326  001A                     	;# 
  2327  009B                     	;# 
  2328  009B                     	;# 
  2329  009C                     	;# 
  2330  009D                     	;# 
  2331  009E                     	;# 
  2332  009F                     	;# 
  2333  0119                     	;# 
  2334  0119                     	;# 
  2335  0119                     	;# 
  2336  011A                     	;# 
  2337  011A                     	;# 
  2338  011A                     	;# 
  2339  011B                     	;# 
  2340  011B                     	;# 
  2341  011B                     	;# 
  2342  011B                     	;# 
  2343  011B                     	;# 
  2344  011C                     	;# 
  2345  011C                     	;# 
  2346  011C                     	;# 
  2347  011D                     	;# 
  2348  011D                     	;# 
  2349  011D                     	;# 
  2350  011E                     	;# 
  2351  011E                     	;# 
  2352  011E                     	;# 
  2353  011F                     	;# 
  2354  011F                     	;# 
  2355  011F                     	;# 
  2356  011F                     	;# 
  2357  011F                     	;# 
  2358  018C                     	;# 
  2359  018D                     	;# 
  2360  018E                     	;# 
  2361  018F                     	;# 
  2362  0190                     	;# 
  2363  0191                     	;# 
  2364  0192                     	;# 
  2365  0196                     	;# 
  2366  0197                     	;# 
  2367  0198                     	;# 
  2368  0199                     	;# 
  2369  019A                     	;# 
  2370  019B                     	;# 
  2371  019C                     	;# 
  2372  020C                     	;# 
  2373  020C                     	;# 
  2374  020D                     	;# 
  2375  020E                     	;# 
  2376  020F                     	;# 
  2377  020F                     	;# 
  2378  0210                     	;# 
  2379  0210                     	;# 
  2380  0211                     	;# 
  2381  0211                     	;# 
  2382  028C                     	;# 
  2383  028C                     	;# 
  2384  028D                     	;# 
  2385  028D                     	;# 
  2386  028E                     	;# 
  2387  028F                     	;# 
  2388  0290                     	;# 
  2389  0291                     	;# 
  2390  030C                     	;# 
  2391  030C                     	;# 
  2392  030D                     	;# 
  2393  030E                     	;# 
  2394  030F                     	;# 
  2395  0310                     	;# 
  2396  0310                     	;# 
  2397  0311                     	;# 
  2398  0312                     	;# 
  2399  0313                     	;# 
  2400  0314                     	;# 
  2401  0314                     	;# 
  2402  0315                     	;# 
  2403  0316                     	;# 
  2404  0318                     	;# 
  2405  0318                     	;# 
  2406  0319                     	;# 
  2407  031A                     	;# 
  2408  031C                     	;# 
  2409  031C                     	;# 
  2410  031D                     	;# 
  2411  031E                     	;# 
  2412  038C                     	;# 
  2413  038C                     	;# 
  2414  038D                     	;# 
  2415  038E                     	;# 
  2416  058C                     	;# 
  2417  058C                     	;# 
  2418  058D                     	;# 
  2419  058E                     	;# 
  2420  058F                     	;# 
  2421  058F                     	;# 
  2422  0590                     	;# 
  2423  0591                     	;# 
  2424  0592                     	;# 
  2425  0593                     	;# 
  2426  059C                     	;# 
  2427  059C                     	;# 
  2428  059D                     	;# 
  2429  059D                     	;# 
  2430  059E                     	;# 
  2431  059F                     	;# 
  2432  060C                     	;# 
  2433  060D                     	;# 
  2434  060E                     	;# 
  2435  060F                     	;# 
  2436  0610                     	;# 
  2437  0611                     	;# 
  2438  0612                     	;# 
  2439  0613                     	;# 
  2440  0614                     	;# 
  2441  070C                     	;# 
  2442  070D                     	;# 
  2443  070E                     	;# 
  2444  070F                     	;# 
  2445  0710                     	;# 
  2446  0711                     	;# 
  2447  0712                     	;# 
  2448  0713                     	;# 
  2449  0716                     	;# 
  2450  0717                     	;# 
  2451  0718                     	;# 
  2452  0719                     	;# 
  2453  071A                     	;# 
  2454  071B                     	;# 
  2455  071C                     	;# 
  2456  071D                     	;# 
  2457  0796                     	;# 
  2458  0797                     	;# 
  2459  0798                     	;# 
  2460  0799                     	;# 
  2461  079A                     	;# 
  2462  079B                     	;# 
  2463  080C                     	;# 
  2464  080D                     	;# 
  2465  080E                     	;# 
  2466  080F                     	;# 
  2467  0810                     	;# 
  2468  0811                     	;# 
  2469  0812                     	;# 
  2470  0813                     	;# 
  2471  0814                     	;# 
  2472  081A                     	;# 
  2473  081A                     	;# 
  2474  081B                     	;# 
  2475  081C                     	;# 
  2476  081C                     	;# 
  2477  081D                     	;# 
  2478  081E                     	;# 
  2479  081F                     	;# 
  2480  088C                     	;# 
  2481  088D                     	;# 
  2482  088E                     	;# 
  2483  088F                     	;# 
  2484  0890                     	;# 
  2485  0891                     	;# 
  2486  0892                     	;# 
  2487  0893                     	;# 
  2488  0895                     	;# 
  2489  0896                     	;# 
  2490  090C                     	;# 
  2491  090E                     	;# 
  2492  090F                     	;# 
  2493  091F                     	;# 
  2494  098F                     	;# 
  2495  098F                     	;# 
  2496  0990                     	;# 
  2497  0991                     	;# 
  2498  0992                     	;# 
  2499  0993                     	;# 
  2500  0994                     	;# 
  2501  0995                     	;# 
  2502  0996                     	;# 
  2503  0997                     	;# 
  2504  0A19                     	;# 
  2505  0A19                     	;# 
  2506  0A1A                     	;# 
  2507  0A1A                     	;# 
  2508  0A1B                     	;# 
  2509  0A1B                     	;# 
  2510  0A1B                     	;# 
  2511  0A1C                     	;# 
  2512  0A1C                     	;# 
  2513  0A1D                     	;# 
  2514  0A1D                     	;# 
  2515  0A1E                     	;# 
  2516  0A1E                     	;# 
  2517  0A1F                     	;# 
  2518  0A1F                     	;# 
  2519  0A1F                     	;# 
  2520  1E0F                     	;# 
  2521  1E10                     	;# 
  2522  1E11                     	;# 
  2523  1E12                     	;# 
  2524  1E13                     	;# 
  2525  1E14                     	;# 
  2526  1E15                     	;# 
  2527  1E16                     	;# 
  2528  1E17                     	;# 
  2529  1E18                     	;# 
  2530  1E19                     	;# 
  2531  1E1A                     	;# 
  2532  1E1B                     	;# 
  2533  1E1C                     	;# 
  2534  1E1D                     	;# 
  2535  1E1E                     	;# 
  2536  1E1F                     	;# 
  2537  1E20                     	;# 
  2538  1E21                     	;# 
  2539  1E22                     	;# 
  2540  1E23                     	;# 
  2541  1E24                     	;# 
  2542  1E25                     	;# 
  2543  1E26                     	;# 
  2544  1E27                     	;# 
  2545  1E28                     	;# 
  2546  1E29                     	;# 
  2547  1E2A                     	;# 
  2548  1E2B                     	;# 
  2549  1E2C                     	;# 
  2550  1E2D                     	;# 
  2551  1E2E                     	;# 
  2552  1E2F                     	;# 
  2553  1E30                     	;# 
  2554  1E31                     	;# 
  2555  1E32                     	;# 
  2556  1E33                     	;# 
  2557  1E34                     	;# 
  2558  1E35                     	;# 
  2559  1E36                     	;# 
  2560  1E37                     	;# 
  2561  1E8F                     	;# 
  2562  1E90                     	;# 
  2563  1E91                     	;# 
  2564  1E92                     	;# 
  2565  1E93                     	;# 
  2566  1E9C                     	;# 
  2567  1EA1                     	;# 
  2568  1EA2                     	;# 
  2569  1EB1                     	;# 
  2570  1EBB                     	;# 
  2571  1EBC                     	;# 
  2572  1EBD                     	;# 
  2573  1EBE                     	;# 
  2574  1EC3                     	;# 
  2575  1EC5                     	;# 
  2576  1EC6                     	;# 
  2577  1EC7                     	;# 
  2578  1EC8                     	;# 
  2579  1EC9                     	;# 
  2580  1ECA                     	;# 
  2581  1ECB                     	;# 
  2582  1ECC                     	;# 
  2583  1ECD                     	;# 
  2584  1ECE                     	;# 
  2585  1F10                     	;# 
  2586  1F11                     	;# 
  2587  1F12                     	;# 
  2588  1F13                     	;# 
  2589  1F14                     	;# 
  2590  1F15                     	;# 
  2591  1F16                     	;# 
  2592  1F17                     	;# 
  2593  1F18                     	;# 
  2594  1F19                     	;# 
  2595  1F1A                     	;# 
  2596  1F1B                     	;# 
  2597  1F1C                     	;# 
  2598  1F1D                     	;# 
  2599  1F1E                     	;# 
  2600  1F1F                     	;# 
  2601  1F20                     	;# 
  2602  1F21                     	;# 
  2603  1F22                     	;# 
  2604  1F23                     	;# 
  2605  1F24                     	;# 
  2606  1F25                     	;# 
  2607  1F26                     	;# 
  2608  1F27                     	;# 
  2609  1F38                     	;# 
  2610  1F39                     	;# 
  2611  1F3A                     	;# 
  2612  1F3B                     	;# 
  2613  1F3C                     	;# 
  2614  1F3D                     	;# 
  2615  1F3E                     	;# 
  2616  1F3F                     	;# 
  2617  1F43                     	;# 
  2618  1F44                     	;# 
  2619  1F45                     	;# 
  2620  1F46                     	;# 
  2621  1F47                     	;# 
  2622  1F48                     	;# 
  2623  1F49                     	;# 
  2624  1F4A                     	;# 
  2625  1F4E                     	;# 
  2626  1F4F                     	;# 
  2627  1F50                     	;# 
  2628  1F51                     	;# 
  2629  1F52                     	;# 
  2630  1F53                     	;# 
  2631  1F54                     	;# 
  2632  1F55                     	;# 
  2633  1F65                     	;# 
  2634  1F68                     	;# 
  2635  1F69                     	;# 
  2636  1F6A                     	;# 
  2637  1F6B                     	;# 
  2638  1FE4                     	;# 
  2639  1FE5                     	;# 
  2640  1FE6                     	;# 
  2641  1FE7                     	;# 
  2642  1FE8                     	;# 
  2643  1FE8                     	;# 
  2644  1FE9                     	;# 
  2645  1FEA                     	;# 
  2646  1FEB                     	;# 
  2647  1FED                     	;# 
  2648  1FEE                     	;# 
  2649  1FEF                     	;# 
  2650  0000                     	;# 
  2651  0001                     	;# 
  2652  0002                     	;# 
  2653  0003                     	;# 
  2654  0004                     	;# 
  2655  0005                     	;# 
  2656  0006                     	;# 
  2657  0007                     	;# 
  2658  0008                     	;# 
  2659  0009                     	;# 
  2660  000A                     	;# 
  2661  000B                     	;# 
  2662  000C                     	;# 
  2663  000D                     	;# 
  2664  000E                     	;# 
  2665  0010                     	;# 
  2666  0012                     	;# 
  2667  0013                     	;# 
  2668  0014                     	;# 
  2669  0016                     	;# 
  2670  0018                     	;# 
  2671  0019                     	;# 
  2672  001A                     	;# 
  2673  009B                     	;# 
  2674  009B                     	;# 
  2675  009C                     	;# 
  2676  009D                     	;# 
  2677  009E                     	;# 
  2678  009F                     	;# 
  2679  0119                     	;# 
  2680  0119                     	;# 
  2681  0119                     	;# 
  2682  011A                     	;# 
  2683  011A                     	;# 
  2684  011A                     	;# 
  2685  011B                     	;# 
  2686  011B                     	;# 
  2687  011B                     	;# 
  2688  011B                     	;# 
  2689  011B                     	;# 
  2690  011C                     	;# 
  2691  011C                     	;# 
  2692  011C                     	;# 
  2693  011D                     	;# 
  2694  011D                     	;# 
  2695  011D                     	;# 
  2696  011E                     	;# 
  2697  011E                     	;# 
  2698  011E                     	;# 
  2699  011F                     	;# 
  2700  011F                     	;# 
  2701  011F                     	;# 
  2702  011F                     	;# 
  2703  011F                     	;# 
  2704  018C                     	;# 
  2705  018D                     	;# 
  2706  018E                     	;# 
  2707  018F                     	;# 
  2708  0190                     	;# 
  2709  0191                     	;# 
  2710  0192                     	;# 
  2711  0196                     	;# 
  2712  0197                     	;# 
  2713  0198                     	;# 
  2714  0199                     	;# 
  2715  019A                     	;# 
  2716  019B                     	;# 
  2717  019C                     	;# 
  2718  020C                     	;# 
  2719  020C                     	;# 
  2720  020D                     	;# 
  2721  020E                     	;# 
  2722  020F                     	;# 
  2723  020F                     	;# 
  2724  0210                     	;# 
  2725  0210                     	;# 
  2726  0211                     	;# 
  2727  0211                     	;# 
  2728  028C                     	;# 
  2729  028C                     	;# 
  2730  028D                     	;# 
  2731  028D                     	;# 
  2732  028E                     	;# 
  2733  028F                     	;# 
  2734  0290                     	;# 
  2735  0291                     	;# 
  2736  030C                     	;# 
  2737  030C                     	;# 
  2738  030D                     	;# 
  2739  030E                     	;# 
  2740  030F                     	;# 
  2741  0310                     	;# 
  2742  0310                     	;# 
  2743  0311                     	;# 
  2744  0312                     	;# 
  2745  0313                     	;# 
  2746  0314                     	;# 
  2747  0314                     	;# 
  2748  0315                     	;# 
  2749  0316                     	;# 
  2750  0318                     	;# 
  2751  0318                     	;# 
  2752  0319                     	;# 
  2753  031A                     	;# 
  2754  031C                     	;# 
  2755  031C                     	;# 
  2756  031D                     	;# 
  2757  031E                     	;# 
  2758  038C                     	;# 
  2759  038C                     	;# 
  2760  038D                     	;# 
  2761  038E                     	;# 
  2762  058C                     	;# 
  2763  058C                     	;# 
  2764  058D                     	;# 
  2765  058E                     	;# 
  2766  058F                     	;# 
  2767  058F                     	;# 
  2768  0590                     	;# 
  2769  0591                     	;# 
  2770  0592                     	;# 
  2771  0593                     	;# 
  2772  059C                     	;# 
  2773  059C                     	;# 
  2774  059D                     	;# 
  2775  059D                     	;# 
  2776  059E                     	;# 
  2777  059F                     	;# 
  2778  060C                     	;# 
  2779  060D                     	;# 
  2780  060E                     	;# 
  2781  060F                     	;# 
  2782  0610                     	;# 
  2783  0611                     	;# 
  2784  0612                     	;# 
  2785  0613                     	;# 
  2786  0614                     	;# 
  2787  070C                     	;# 
  2788  070D                     	;# 
  2789  070E                     	;# 
  2790  070F                     	;# 
  2791  0710                     	;# 
  2792  0711                     	;# 
  2793  0712                     	;# 
  2794  0713                     	;# 
  2795  0716                     	;# 
  2796  0717                     	;# 
  2797  0718                     	;# 
  2798  0719                     	;# 
  2799  071A                     	;# 
  2800  071B                     	;# 
  2801  071C                     	;# 
  2802  071D                     	;# 
  2803  0796                     	;# 
  2804  0797                     	;# 
  2805  0798                     	;# 
  2806  0799                     	;# 
  2807  079A                     	;# 
  2808  079B                     	;# 
  2809  080C                     	;# 
  2810  080D                     	;# 
  2811  080E                     	;# 
  2812  080F                     	;# 
  2813  0810                     	;# 
  2814  0811                     	;# 
  2815  0812                     	;# 
  2816  0813                     	;# 
  2817  0814                     	;# 
  2818  081A                     	;# 
  2819  081A                     	;# 
  2820  081B                     	;# 
  2821  081C                     	;# 
  2822  081C                     	;# 
  2823  081D                     	;# 
  2824  081E                     	;# 
  2825  081F                     	;# 
  2826  088C                     	;# 
  2827  088D                     	;# 
  2828  088E                     	;# 
  2829  088F                     	;# 
  2830  0890                     	;# 
  2831  0891                     	;# 
  2832  0892                     	;# 
  2833  0893                     	;# 
  2834  0895                     	;# 
  2835  0896                     	;# 
  2836  090C                     	;# 
  2837  090E                     	;# 
  2838  090F                     	;# 
  2839  091F                     	;# 
  2840  098F                     	;# 
  2841  098F                     	;# 
  2842  0990                     	;# 
  2843  0991                     	;# 
  2844  0992                     	;# 
  2845  0993                     	;# 
  2846  0994                     	;# 
  2847  0995                     	;# 
  2848  0996                     	;# 
  2849  0997                     	;# 
  2850  0A19                     	;# 
  2851  0A19                     	;# 
  2852  0A1A                     	;# 
  2853  0A1A                     	;# 
  2854  0A1B                     	;# 
  2855  0A1B                     	;# 
  2856  0A1B                     	;# 
  2857  0A1C                     	;# 
  2858  0A1C                     	;# 
  2859  0A1D                     	;# 
  2860  0A1D                     	;# 
  2861  0A1E                     	;# 
  2862  0A1E                     	;# 
  2863  0A1F                     	;# 
  2864  0A1F                     	;# 
  2865  0A1F                     	;# 
  2866  1E0F                     	;# 
  2867  1E10                     	;# 
  2868  1E11                     	;# 
  2869  1E12                     	;# 
  2870  1E13                     	;# 
  2871  1E14                     	;# 
  2872  1E15                     	;# 
  2873  1E16                     	;# 
  2874  1E17                     	;# 
  2875  1E18                     	;# 
  2876  1E19                     	;# 
  2877  1E1A                     	;# 
  2878  1E1B                     	;# 
  2879  1E1C                     	;# 
  2880  1E1D                     	;# 
  2881  1E1E                     	;# 
  2882  1E1F                     	;# 
  2883  1E20                     	;# 
  2884  1E21                     	;# 
  2885  1E22                     	;# 
  2886  1E23                     	;# 
  2887  1E24                     	;# 
  2888  1E25                     	;# 
  2889  1E26                     	;# 
  2890  1E27                     	;# 
  2891  1E28                     	;# 
  2892  1E29                     	;# 
  2893  1E2A                     	;# 
  2894  1E2B                     	;# 
  2895  1E2C                     	;# 
  2896  1E2D                     	;# 
  2897  1E2E                     	;# 
  2898  1E2F                     	;# 
  2899  1E30                     	;# 
  2900  1E31                     	;# 
  2901  1E32                     	;# 
  2902  1E33                     	;# 
  2903  1E34                     	;# 
  2904  1E35                     	;# 
  2905  1E36                     	;# 
  2906  1E37                     	;# 
  2907  1E8F                     	;# 
  2908  1E90                     	;# 
  2909  1E91                     	;# 
  2910  1E92                     	;# 
  2911  1E93                     	;# 
  2912  1E9C                     	;# 
  2913  1EA1                     	;# 
  2914  1EA2                     	;# 
  2915  1EB1                     	;# 
  2916  1EBB                     	;# 
  2917  1EBC                     	;# 
  2918  1EBD                     	;# 
  2919  1EBE                     	;# 
  2920  1EC3                     	;# 
  2921  1EC5                     	;# 
  2922  1EC6                     	;# 
  2923  1EC7                     	;# 
  2924  1EC8                     	;# 
  2925  1EC9                     	;# 
  2926  1ECA                     	;# 
  2927  1ECB                     	;# 
  2928  1ECC                     	;# 
  2929  1ECD                     	;# 
  2930  1ECE                     	;# 
  2931  1F10                     	;# 
  2932  1F11                     	;# 
  2933  1F12                     	;# 
  2934  1F13                     	;# 
  2935  1F14                     	;# 
  2936  1F15                     	;# 
  2937  1F16                     	;# 
  2938  1F17                     	;# 
  2939  1F18                     	;# 
  2940  1F19                     	;# 
  2941  1F1A                     	;# 
  2942  1F1B                     	;# 
  2943  1F1C                     	;# 
  2944  1F1D                     	;# 
  2945  1F1E                     	;# 
  2946  1F1F                     	;# 
  2947  1F20                     	;# 
  2948  1F21                     	;# 
  2949  1F22                     	;# 
  2950  1F23                     	;# 
  2951  1F24                     	;# 
  2952  1F25                     	;# 
  2953  1F26                     	;# 
  2954  1F27                     	;# 
  2955  1F38                     	;# 
  2956  1F39                     	;# 
  2957  1F3A                     	;# 
  2958  1F3B                     	;# 
  2959  1F3C                     	;# 
  2960  1F3D                     	;# 
  2961  1F3E                     	;# 
  2962  1F3F                     	;# 
  2963  1F43                     	;# 
  2964  1F44                     	;# 
  2965  1F45                     	;# 
  2966  1F46                     	;# 
  2967  1F47                     	;# 
  2968  1F48                     	;# 
  2969  1F49                     	;# 
  2970  1F4A                     	;# 
  2971  1F4E                     	;# 
  2972  1F4F                     	;# 
  2973  1F50                     	;# 
  2974  1F51                     	;# 
  2975  1F52                     	;# 
  2976  1F53                     	;# 
  2977  1F54                     	;# 
  2978  1F55                     	;# 
  2979  1F65                     	;# 
  2980  1F68                     	;# 
  2981  1F69                     	;# 
  2982  1F6A                     	;# 
  2983  1F6B                     	;# 
  2984  1FE4                     	;# 
  2985  1FE5                     	;# 
  2986  1FE6                     	;# 
  2987  1FE7                     	;# 
  2988  1FE8                     	;# 
  2989  1FE8                     	;# 
  2990  1FE9                     	;# 
  2991  1FEA                     	;# 
  2992  1FEB                     	;# 
  2993  1FED                     	;# 
  2994  1FEE                     	;# 
  2995  1FEF                     	;# 
  2996  0000                     	;# 
  2997  0001                     	;# 
  2998  0002                     	;# 
  2999  0003                     	;# 
  3000  0004                     	;# 
  3001  0005                     	;# 
  3002  0006                     	;# 
  3003  0007                     	;# 
  3004  0008                     	;# 
  3005  0009                     	;# 
  3006  000A                     	;# 
  3007  000B                     	;# 
  3008  000C                     	;# 
  3009  000D                     	;# 
  3010  000E                     	;# 
  3011  0010                     	;# 
  3012  0012                     	;# 
  3013  0013                     	;# 
  3014  0014                     	;# 
  3015  0016                     	;# 
  3016  0018                     	;# 
  3017  0019                     	;# 
  3018  001A                     	;# 
  3019  009B                     	;# 
  3020  009B                     	;# 
  3021  009C                     	;# 
  3022  009D                     	;# 
  3023  009E                     	;# 
  3024  009F                     	;# 
  3025  0119                     	;# 
  3026  0119                     	;# 
  3027  0119                     	;# 
  3028  011A                     	;# 
  3029  011A                     	;# 
  3030  011A                     	;# 
  3031  011B                     	;# 
  3032  011B                     	;# 
  3033  011B                     	;# 
  3034  011B                     	;# 
  3035  011B                     	;# 
  3036  011C                     	;# 
  3037  011C                     	;# 
  3038  011C                     	;# 
  3039  011D                     	;# 
  3040  011D                     	;# 
  3041  011D                     	;# 
  3042  011E                     	;# 
  3043  011E                     	;# 
  3044  011E                     	;# 
  3045  011F                     	;# 
  3046  011F                     	;# 
  3047  011F                     	;# 
  3048  011F                     	;# 
  3049  011F                     	;# 
  3050  018C                     	;# 
  3051  018D                     	;# 
  3052  018E                     	;# 
  3053  018F                     	;# 
  3054  0190                     	;# 
  3055  0191                     	;# 
  3056  0192                     	;# 
  3057  0196                     	;# 
  3058  0197                     	;# 
  3059  0198                     	;# 
  3060  0199                     	;# 
  3061  019A                     	;# 
  3062  019B                     	;# 
  3063  019C                     	;# 
  3064  020C                     	;# 
  3065  020C                     	;# 
  3066  020D                     	;# 
  3067  020E                     	;# 
  3068  020F                     	;# 
  3069  020F                     	;# 
  3070  0210                     	;# 
  3071  0210                     	;# 
  3072  0211                     	;# 
  3073  0211                     	;# 
  3074  028C                     	;# 
  3075  028C                     	;# 
  3076  028D                     	;# 
  3077  028D                     	;# 
  3078  028E                     	;# 
  3079  028F                     	;# 
  3080  0290                     	;# 
  3081  0291                     	;# 
  3082  030C                     	;# 
  3083  030C                     	;# 
  3084  030D                     	;# 
  3085  030E                     	;# 
  3086  030F                     	;# 
  3087  0310                     	;# 
  3088  0310                     	;# 
  3089  0311                     	;# 
  3090  0312                     	;# 
  3091  0313                     	;# 
  3092  0314                     	;# 
  3093  0314                     	;# 
  3094  0315                     	;# 
  3095  0316                     	;# 
  3096  0318                     	;# 
  3097  0318                     	;# 
  3098  0319                     	;# 
  3099  031A                     	;# 
  3100  031C                     	;# 
  3101  031C                     	;# 
  3102  031D                     	;# 
  3103  031E                     	;# 
  3104  038C                     	;# 
  3105  038C                     	;# 
  3106  038D                     	;# 
  3107  038E                     	;# 
  3108  058C                     	;# 
  3109  058C                     	;# 
  3110  058D                     	;# 
  3111  058E                     	;# 
  3112  058F                     	;# 
  3113  058F                     	;# 
  3114  0590                     	;# 
  3115  0591                     	;# 
  3116  0592                     	;# 
  3117  0593                     	;# 
  3118  059C                     	;# 
  3119  059C                     	;# 
  3120  059D                     	;# 
  3121  059D                     	;# 
  3122  059E                     	;# 
  3123  059F                     	;# 
  3124  060C                     	;# 
  3125  060D                     	;# 
  3126  060E                     	;# 
  3127  060F                     	;# 
  3128  0610                     	;# 
  3129  0611                     	;# 
  3130  0612                     	;# 
  3131  0613                     	;# 
  3132  0614                     	;# 
  3133  070C                     	;# 
  3134  070D                     	;# 
  3135  070E                     	;# 
  3136  070F                     	;# 
  3137  0710                     	;# 
  3138  0711                     	;# 
  3139  0712                     	;# 
  3140  0713                     	;# 
  3141  0716                     	;# 
  3142  0717                     	;# 
  3143  0718                     	;# 
  3144  0719                     	;# 
  3145  071A                     	;# 
  3146  071B                     	;# 
  3147  071C                     	;# 
  3148  071D                     	;# 
  3149  0796                     	;# 
  3150  0797                     	;# 
  3151  0798                     	;# 
  3152  0799                     	;# 
  3153  079A                     	;# 
  3154  079B                     	;# 
  3155  080C                     	;# 
  3156  080D                     	;# 
  3157  080E                     	;# 
  3158  080F                     	;# 
  3159  0810                     	;# 
  3160  0811                     	;# 
  3161  0812                     	;# 
  3162  0813                     	;# 
  3163  0814                     	;# 
  3164  081A                     	;# 
  3165  081A                     	;# 
  3166  081B                     	;# 
  3167  081C                     	;# 
  3168  081C                     	;# 
  3169  081D                     	;# 
  3170  081E                     	;# 
  3171  081F                     	;# 
  3172  088C                     	;# 
  3173  088D                     	;# 
  3174  088E                     	;# 
  3175  088F                     	;# 
  3176  0890                     	;# 
  3177  0891                     	;# 
  3178  0892                     	;# 
  3179  0893                     	;# 
  3180  0895                     	;# 
  3181  0896                     	;# 
  3182  090C                     	;# 
  3183  090E                     	;# 
  3184  090F                     	;# 
  3185  091F                     	;# 
  3186  098F                     	;# 
  3187  098F                     	;# 
  3188  0990                     	;# 
  3189  0991                     	;# 
  3190  0992                     	;# 
  3191  0993                     	;# 
  3192  0994                     	;# 
  3193  0995                     	;# 
  3194  0996                     	;# 
  3195  0997                     	;# 
  3196  0A19                     	;# 
  3197  0A19                     	;# 
  3198  0A1A                     	;# 
  3199  0A1A                     	;# 
  3200  0A1B                     	;# 
  3201  0A1B                     	;# 
  3202  0A1B                     	;# 
  3203  0A1C                     	;# 
  3204  0A1C                     	;# 
  3205  0A1D                     	;# 
  3206  0A1D                     	;# 
  3207  0A1E                     	;# 
  3208  0A1E                     	;# 
  3209  0A1F                     	;# 
  3210  0A1F                     	;# 
  3211  0A1F                     	;# 
  3212  1E0F                     	;# 
  3213  1E10                     	;# 
  3214  1E11                     	;# 
  3215  1E12                     	;# 
  3216  1E13                     	;# 
  3217  1E14                     	;# 
  3218  1E15                     	;# 
  3219  1E16                     	;# 
  3220  1E17                     	;# 
  3221  1E18                     	;# 
  3222  1E19                     	;# 
  3223  1E1A                     	;# 
  3224  1E1B                     	;# 
  3225  1E1C                     	;# 
  3226  1E1D                     	;# 
  3227  1E1E                     	;# 
  3228  1E1F                     	;# 
  3229  1E20                     	;# 
  3230  1E21                     	;# 
  3231  1E22                     	;# 
  3232  1E23                     	;# 
  3233  1E24                     	;# 
  3234  1E25                     	;# 
  3235  1E26                     	;# 
  3236  1E27                     	;# 
  3237  1E28                     	;# 
  3238  1E29                     	;# 
  3239  1E2A                     	;# 
  3240  1E2B                     	;# 
  3241  1E2C                     	;# 
  3242  1E2D                     	;# 
  3243  1E2E                     	;# 
  3244  1E2F                     	;# 
  3245  1E30                     	;# 
  3246  1E31                     	;# 
  3247  1E32                     	;# 
  3248  1E33                     	;# 
  3249  1E34                     	;# 
  3250  1E35                     	;# 
  3251  1E36                     	;# 
  3252  1E37                     	;# 
  3253  1E8F                     	;# 
  3254  1E90                     	;# 
  3255  1E91                     	;# 
  3256  1E92                     	;# 
  3257  1E93                     	;# 
  3258  1E9C                     	;# 
  3259  1EA1                     	;# 
  3260  1EA2                     	;# 
  3261  1EB1                     	;# 
  3262  1EBB                     	;# 
  3263  1EBC                     	;# 
  3264  1EBD                     	;# 
  3265  1EBE                     	;# 
  3266  1EC3                     	;# 
  3267  1EC5                     	;# 
  3268  1EC6                     	;# 
  3269  1EC7                     	;# 
  3270  1EC8                     	;# 
  3271  1EC9                     	;# 
  3272  1ECA                     	;# 
  3273  1ECB                     	;# 
  3274  1ECC                     	;# 
  3275  1ECD                     	;# 
  3276  1ECE                     	;# 
  3277  1F10                     	;# 
  3278  1F11                     	;# 
  3279  1F12                     	;# 
  3280  1F13                     	;# 
  3281  1F14                     	;# 
  3282  1F15                     	;# 
  3283  1F16                     	;# 
  3284  1F17                     	;# 
  3285  1F18                     	;# 
  3286  1F19                     	;# 
  3287  1F1A                     	;# 
  3288  1F1B                     	;# 
  3289  1F1C                     	;# 
  3290  1F1D                     	;# 
  3291  1F1E                     	;# 
  3292  1F1F                     	;# 
  3293  1F20                     	;# 
  3294  1F21                     	;# 
  3295  1F22                     	;# 
  3296  1F23                     	;# 
  3297  1F24                     	;# 
  3298  1F25                     	;# 
  3299  1F26                     	;# 
  3300  1F27                     	;# 
  3301  1F38                     	;# 
  3302  1F39                     	;# 
  3303  1F3A                     	;# 
  3304  1F3B                     	;# 
  3305  1F3C                     	;# 
  3306  1F3D                     	;# 
  3307  1F3E                     	;# 
  3308  1F3F                     	;# 
  3309  1F43                     	;# 
  3310  1F44                     	;# 
  3311  1F45                     	;# 
  3312  1F46                     	;# 
  3313  1F47                     	;# 
  3314  1F48                     	;# 
  3315  1F49                     	;# 
  3316  1F4A                     	;# 
  3317  1F4E                     	;# 
  3318  1F4F                     	;# 
  3319  1F50                     	;# 
  3320  1F51                     	;# 
  3321  1F52                     	;# 
  3322  1F53                     	;# 
  3323  1F54                     	;# 
  3324  1F55                     	;# 
  3325  1F65                     	;# 
  3326  1F68                     	;# 
  3327  1F69                     	;# 
  3328  1F6A                     	;# 
  3329  1F6B                     	;# 
  3330  1FE4                     	;# 
  3331  1FE5                     	;# 
  3332  1FE6                     	;# 
  3333  1FE7                     	;# 
  3334  1FE8                     	;# 
  3335  1FE8                     	;# 
  3336  1FE9                     	;# 
  3337  1FEA                     	;# 
  3338  1FEB                     	;# 
  3339  1FED                     	;# 
  3340  1FEE                     	;# 
  3341  1FEF                     	;# 
  3342  0000                     	;# 
  3343  0001                     	;# 
  3344  0002                     	;# 
  3345  0003                     	;# 
  3346  0004                     	;# 
  3347  0005                     	;# 
  3348  0006                     	;# 
  3349  0007                     	;# 
  3350  0008                     	;# 
  3351  0009                     	;# 
  3352  000A                     	;# 
  3353  000B                     	;# 
  3354  000C                     	;# 
  3355  000D                     	;# 
  3356  000E                     	;# 
  3357  0010                     	;# 
  3358  0012                     	;# 
  3359  0013                     	;# 
  3360  0014                     	;# 
  3361  0016                     	;# 
  3362  0018                     	;# 
  3363  0019                     	;# 
  3364  001A                     	;# 
  3365  009B                     	;# 
  3366  009B                     	;# 
  3367  009C                     	;# 
  3368  009D                     	;# 
  3369  009E                     	;# 
  3370  009F                     	;# 
  3371  0119                     	;# 
  3372  0119                     	;# 
  3373  0119                     	;# 
  3374  011A                     	;# 
  3375  011A                     	;# 
  3376  011A                     	;# 
  3377  011B                     	;# 
  3378  011B                     	;# 
  3379  011B                     	;# 
  3380  011B                     	;# 
  3381  011B                     	;# 
  3382  011C                     	;# 
  3383  011C                     	;# 
  3384  011C                     	;# 
  3385  011D                     	;# 
  3386  011D                     	;# 
  3387  011D                     	;# 
  3388  011E                     	;# 
  3389  011E                     	;# 
  3390  011E                     	;# 
  3391  011F                     	;# 
  3392  011F                     	;# 
  3393  011F                     	;# 
  3394  011F                     	;# 
  3395  011F                     	;# 
  3396  018C                     	;# 
  3397  018D                     	;# 
  3398  018E                     	;# 
  3399  018F                     	;# 
  3400  0190                     	;# 
  3401  0191                     	;# 
  3402  0192                     	;# 
  3403  0196                     	;# 
  3404  0197                     	;# 
  3405  0198                     	;# 
  3406  0199                     	;# 
  3407  019A                     	;# 
  3408  019B                     	;# 
  3409  019C                     	;# 
  3410  020C                     	;# 
  3411  020C                     	;# 
  3412  020D                     	;# 
  3413  020E                     	;# 
  3414  020F                     	;# 
  3415  020F                     	;# 
  3416  0210                     	;# 
  3417  0210                     	;# 
  3418  0211                     	;# 
  3419  0211                     	;# 
  3420  028C                     	;# 
  3421  028C                     	;# 
  3422  028D                     	;# 
  3423  028D                     	;# 
  3424  028E                     	;# 
  3425  028F                     	;# 
  3426  0290                     	;# 
  3427  0291                     	;# 
  3428  030C                     	;# 
  3429  030C                     	;# 
  3430  030D                     	;# 
  3431  030E                     	;# 
  3432  030F                     	;# 
  3433  0310                     	;# 
  3434  0310                     	;# 
  3435  0311                     	;# 
  3436  0312                     	;# 
  3437  0313                     	;# 
  3438  0314                     	;# 
  3439  0314                     	;# 
  3440  0315                     	;# 
  3441  0316                     	;# 
  3442  0318                     	;# 
  3443  0318                     	;# 
  3444  0319                     	;# 
  3445  031A                     	;# 
  3446  031C                     	;# 
  3447  031C                     	;# 
  3448  031D                     	;# 
  3449  031E                     	;# 
  3450  038C                     	;# 
  3451  038C                     	;# 
  3452  038D                     	;# 
  3453  038E                     	;# 
  3454  058C                     	;# 
  3455  058C                     	;# 
  3456  058D                     	;# 
  3457  058E                     	;# 
  3458  058F                     	;# 
  3459  058F                     	;# 
  3460  0590                     	;# 
  3461  0591                     	;# 
  3462  0592                     	;# 
  3463  0593                     	;# 
  3464  059C                     	;# 
  3465  059C                     	;# 
  3466  059D                     	;# 
  3467  059D                     	;# 
  3468  059E                     	;# 
  3469  059F                     	;# 
  3470  060C                     	;# 
  3471  060D                     	;# 
  3472  060E                     	;# 
  3473  060F                     	;# 
  3474  0610                     	;# 
  3475  0611                     	;# 
  3476  0612                     	;# 
  3477  0613                     	;# 
  3478  0614                     	;# 
  3479  070C                     	;# 
  3480  070D                     	;# 
  3481  070E                     	;# 
  3482  070F                     	;# 
  3483  0710                     	;# 
  3484  0711                     	;# 
  3485  0712                     	;# 
  3486  0713                     	;# 
  3487  0716                     	;# 
  3488  0717                     	;# 
  3489  0718                     	;# 
  3490  0719                     	;# 
  3491  071A                     	;# 
  3492  071B                     	;# 
  3493  071C                     	;# 
  3494  071D                     	;# 
  3495  0796                     	;# 
  3496  0797                     	;# 
  3497  0798                     	;# 
  3498  0799                     	;# 
  3499  079A                     	;# 
  3500  079B                     	;# 
  3501  080C                     	;# 
  3502  080D                     	;# 
  3503  080E                     	;# 
  3504  080F                     	;# 
  3505  0810                     	;# 
  3506  0811                     	;# 
  3507  0812                     	;# 
  3508  0813                     	;# 
  3509  0814                     	;# 
  3510  081A                     	;# 
  3511  081A                     	;# 
  3512  081B                     	;# 
  3513  081C                     	;# 
  3514  081C                     	;# 
  3515  081D                     	;# 
  3516  081E                     	;# 
  3517  081F                     	;# 
  3518  088C                     	;# 
  3519  088D                     	;# 
  3520  088E                     	;# 
  3521  088F                     	;# 
  3522  0890                     	;# 
  3523  0891                     	;# 
  3524  0892                     	;# 
  3525  0893                     	;# 
  3526  0895                     	;# 
  3527  0896                     	;# 
  3528  090C                     	;# 
  3529  090E                     	;# 
  3530  090F                     	;# 
  3531  091F                     	;# 
  3532  098F                     	;# 
  3533  098F                     	;# 
  3534  0990                     	;# 
  3535  0991                     	;# 
  3536  0992                     	;# 
  3537  0993                     	;# 
  3538  0994                     	;# 
  3539  0995                     	;# 
  3540  0996                     	;# 
  3541  0997                     	;# 
  3542  0A19                     	;# 
  3543  0A19                     	;# 
  3544  0A1A                     	;# 
  3545  0A1A                     	;# 
  3546  0A1B                     	;# 
  3547  0A1B                     	;# 
  3548  0A1B                     	;# 
  3549  0A1C                     	;# 
  3550  0A1C                     	;# 
  3551  0A1D                     	;# 
  3552  0A1D                     	;# 
  3553  0A1E                     	;# 
  3554  0A1E                     	;# 
  3555  0A1F                     	;# 
  3556  0A1F                     	;# 
  3557  0A1F                     	;# 
  3558  1E0F                     	;# 
  3559  1E10                     	;# 
  3560  1E11                     	;# 
  3561  1E12                     	;# 
  3562  1E13                     	;# 
  3563  1E14                     	;# 
  3564  1E15                     	;# 
  3565  1E16                     	;# 
  3566  1E17                     	;# 
  3567  1E18                     	;# 
  3568  1E19                     	;# 
  3569  1E1A                     	;# 
  3570  1E1B                     	;# 
  3571  1E1C                     	;# 
  3572  1E1D                     	;# 
  3573  1E1E                     	;# 
  3574  1E1F                     	;# 
  3575  1E20                     	;# 
  3576  1E21                     	;# 
  3577  1E22                     	;# 
  3578  1E23                     	;# 
  3579  1E24                     	;# 
  3580  1E25                     	;# 
  3581  1E26                     	;# 
  3582  1E27                     	;# 
  3583  1E28                     	;# 
  3584  1E29                     	;# 
  3585  1E2A                     	;# 
  3586  1E2B                     	;# 
  3587  1E2C                     	;# 
  3588  1E2D                     	;# 
  3589  1E2E                     	;# 
  3590  1E2F                     	;# 
  3591  1E30                     	;# 
  3592  1E31                     	;# 
  3593  1E32                     	;# 
  3594  1E33                     	;# 
  3595  1E34                     	;# 
  3596  1E35                     	;# 
  3597  1E36                     	;# 
  3598  1E37                     	;# 
  3599  1E8F                     	;# 
  3600  1E90                     	;# 
  3601  1E91                     	;# 
  3602  1E92                     	;# 
  3603  1E93                     	;# 
  3604  1E9C                     	;# 
  3605  1EA1                     	;# 
  3606  1EA2                     	;# 
  3607  1EB1                     	;# 
  3608  1EBB                     	;# 
  3609  1EBC                     	;# 
  3610  1EBD                     	;# 
  3611  1EBE                     	;# 
  3612  1EC3                     	;# 
  3613  1EC5                     	;# 
  3614  1EC6                     	;# 
  3615  1EC7                     	;# 
  3616  1EC8                     	;# 
  3617  1EC9                     	;# 
  3618  1ECA                     	;# 
  3619  1ECB                     	;# 
  3620  1ECC                     	;# 
  3621  1ECD                     	;# 
  3622  1ECE                     	;# 
  3623  1F10                     	;# 
  3624  1F11                     	;# 
  3625  1F12                     	;# 
  3626  1F13                     	;# 
  3627  1F14                     	;# 
  3628  1F15                     	;# 
  3629  1F16                     	;# 
  3630  1F17                     	;# 
  3631  1F18                     	;# 
  3632  1F19                     	;# 
  3633  1F1A                     	;# 
  3634  1F1B                     	;# 
  3635  1F1C                     	;# 
  3636  1F1D                     	;# 
  3637  1F1E                     	;# 
  3638  1F1F                     	;# 
  3639  1F20                     	;# 
  3640  1F21                     	;# 
  3641  1F22                     	;# 
  3642  1F23                     	;# 
  3643  1F24                     	;# 
  3644  1F25                     	;# 
  3645  1F26                     	;# 
  3646  1F27                     	;# 
  3647  1F38                     	;# 
  3648  1F39                     	;# 
  3649  1F3A                     	;# 
  3650  1F3B                     	;# 
  3651  1F3C                     	;# 
  3652  1F3D                     	;# 
  3653  1F3E                     	;# 
  3654  1F3F                     	;# 
  3655  1F43                     	;# 
  3656  1F44                     	;# 
  3657  1F45                     	;# 
  3658  1F46                     	;# 
  3659  1F47                     	;# 
  3660  1F48                     	;# 
  3661  1F49                     	;# 
  3662  1F4A                     	;# 
  3663  1F4E                     	;# 
  3664  1F4F                     	;# 
  3665  1F50                     	;# 
  3666  1F51                     	;# 
  3667  1F52                     	;# 
  3668  1F53                     	;# 
  3669  1F54                     	;# 
  3670  1F55                     	;# 
  3671  1F65                     	;# 
  3672  1F68                     	;# 
  3673  1F69                     	;# 
  3674  1F6A                     	;# 
  3675  1F6B                     	;# 
  3676  1FE4                     	;# 
  3677  1FE5                     	;# 
  3678  1FE6                     	;# 
  3679  1FE7                     	;# 
  3680  1FE8                     	;# 
  3681  1FE8                     	;# 
  3682  1FE9                     	;# 
  3683  1FEA                     	;# 
  3684  1FEB                     	;# 
  3685  1FED                     	;# 
  3686  1FEE                     	;# 
  3687  1FEF                     	;# 
  3688  0000                     	;# 
  3689  0001                     	;# 
  3690  0002                     	;# 
  3691  0003                     	;# 
  3692  0004                     	;# 
  3693  0005                     	;# 
  3694  0006                     	;# 
  3695  0007                     	;# 
  3696  0008                     	;# 
  3697  0009                     	;# 
  3698  000A                     	;# 
  3699  000B                     	;# 
  3700  000C                     	;# 
  3701  000D                     	;# 
  3702  000E                     	;# 
  3703  0010                     	;# 
  3704  0012                     	;# 
  3705  0013                     	;# 
  3706  0014                     	;# 
  3707  0016                     	;# 
  3708  0018                     	;# 
  3709  0019                     	;# 
  3710  001A                     	;# 
  3711  009B                     	;# 
  3712  009B                     	;# 
  3713  009C                     	;# 
  3714  009D                     	;# 
  3715  009E                     	;# 
  3716  009F                     	;# 
  3717  0119                     	;# 
  3718  0119                     	;# 
  3719  0119                     	;# 
  3720  011A                     	;# 
  3721  011A                     	;# 
  3722  011A                     	;# 
  3723  011B                     	;# 
  3724  011B                     	;# 
  3725  011B                     	;# 
  3726  011B                     	;# 
  3727  011B                     	;# 
  3728  011C                     	;# 
  3729  011C                     	;# 
  3730  011C                     	;# 
  3731  011D                     	;# 
  3732  011D                     	;# 
  3733  011D                     	;# 
  3734  011E                     	;# 
  3735  011E                     	;# 
  3736  011E                     	;# 
  3737  011F                     	;# 
  3738  011F                     	;# 
  3739  011F                     	;# 
  3740  011F                     	;# 
  3741  011F                     	;# 
  3742  018C                     	;# 
  3743  018D                     	;# 
  3744  018E                     	;# 
  3745  018F                     	;# 
  3746  0190                     	;# 
  3747  0191                     	;# 
  3748  0192                     	;# 
  3749  0196                     	;# 
  3750  0197                     	;# 
  3751  0198                     	;# 
  3752  0199                     	;# 
  3753  019A                     	;# 
  3754  019B                     	;# 
  3755  019C                     	;# 
  3756  020C                     	;# 
  3757  020C                     	;# 
  3758  020D                     	;# 
  3759  020E                     	;# 
  3760  020F                     	;# 
  3761  020F                     	;# 
  3762  0210                     	;# 
  3763  0210                     	;# 
  3764  0211                     	;# 
  3765  0211                     	;# 
  3766  028C                     	;# 
  3767  028C                     	;# 
  3768  028D                     	;# 
  3769  028D                     	;# 
  3770  028E                     	;# 
  3771  028F                     	;# 
  3772  0290                     	;# 
  3773  0291                     	;# 
  3774  030C                     	;# 
  3775  030C                     	;# 
  3776  030D                     	;# 
  3777  030E                     	;# 
  3778  030F                     	;# 
  3779  0310                     	;# 
  3780  0310                     	;# 
  3781  0311                     	;# 
  3782  0312                     	;# 
  3783  0313                     	;# 
  3784  0314                     	;# 
  3785  0314                     	;# 
  3786  0315                     	;# 
  3787  0316                     	;# 
  3788  0318                     	;# 
  3789  0318                     	;# 
  3790  0319                     	;# 
  3791  031A                     	;# 
  3792  031C                     	;# 
  3793  031C                     	;# 
  3794  031D                     	;# 
  3795  031E                     	;# 
  3796  038C                     	;# 
  3797  038C                     	;# 
  3798  038D                     	;# 
  3799  038E                     	;# 
  3800  058C                     	;# 
  3801  058C                     	;# 
  3802  058D                     	;# 
  3803  058E                     	;# 
  3804  058F                     	;# 
  3805  058F                     	;# 
  3806  0590                     	;# 
  3807  0591                     	;# 
  3808  0592                     	;# 
  3809  0593                     	;# 
  3810  059C                     	;# 
  3811  059C                     	;# 
  3812  059D                     	;# 
  3813  059D                     	;# 
  3814  059E                     	;# 
  3815  059F                     	;# 
  3816  060C                     	;# 
  3817  060D                     	;# 
  3818  060E                     	;# 
  3819  060F                     	;# 
  3820  0610                     	;# 
  3821  0611                     	;# 
  3822  0612                     	;# 
  3823  0613                     	;# 
  3824  0614                     	;# 
  3825  070C                     	;# 
  3826  070D                     	;# 
  3827  070E                     	;# 
  3828  070F                     	;# 
  3829  0710                     	;# 
  3830  0711                     	;# 
  3831  0712                     	;# 
  3832  0713                     	;# 
  3833  0716                     	;# 
  3834  0717                     	;# 
  3835  0718                     	;# 
  3836  0719                     	;# 
  3837  071A                     	;# 
  3838  071B                     	;# 
  3839  071C                     	;# 
  3840  071D                     	;# 
  3841  0796                     	;# 
  3842  0797                     	;# 
  3843  0798                     	;# 
  3844  0799                     	;# 
  3845  079A                     	;# 
  3846  079B                     	;# 
  3847  080C                     	;# 
  3848  080D                     	;# 
  3849  080E                     	;# 
  3850  080F                     	;# 
  3851  0810                     	;# 
  3852  0811                     	;# 
  3853  0812                     	;# 
  3854  0813                     	;# 
  3855  0814                     	;# 
  3856  081A                     	;# 
  3857  081A                     	;# 
  3858  081B                     	;# 
  3859  081C                     	;# 
  3860  081C                     	;# 
  3861  081D                     	;# 
  3862  081E                     	;# 
  3863  081F                     	;# 
  3864  088C                     	;# 
  3865  088D                     	;# 
  3866  088E                     	;# 
  3867  088F                     	;# 
  3868  0890                     	;# 
  3869  0891                     	;# 
  3870  0892                     	;# 
  3871  0893                     	;# 
  3872  0895                     	;# 
  3873  0896                     	;# 
  3874  090C                     	;# 
  3875  090E                     	;# 
  3876  090F                     	;# 
  3877  091F                     	;# 
  3878  098F                     	;# 
  3879  098F                     	;# 
  3880  0990                     	;# 
  3881  0991                     	;# 
  3882  0992                     	;# 
  3883  0993                     	;# 
  3884  0994                     	;# 
  3885  0995                     	;# 
  3886  0996                     	;# 
  3887  0997                     	;# 
  3888  0A19                     	;# 
  3889  0A19                     	;# 
  3890  0A1A                     	;# 
  3891  0A1A                     	;# 
  3892  0A1B                     	;# 
  3893  0A1B                     	;# 
  3894  0A1B                     	;# 
  3895  0A1C                     	;# 
  3896  0A1C                     	;# 
  3897  0A1D                     	;# 
  3898  0A1D                     	;# 
  3899  0A1E                     	;# 
  3900  0A1E                     	;# 
  3901  0A1F                     	;# 
  3902  0A1F                     	;# 
  3903  0A1F                     	;# 
  3904  1E0F                     	;# 
  3905  1E10                     	;# 
  3906  1E11                     	;# 
  3907  1E12                     	;# 
  3908  1E13                     	;# 
  3909  1E14                     	;# 
  3910  1E15                     	;# 
  3911  1E16                     	;# 
  3912  1E17                     	;# 
  3913  1E18                     	;# 
  3914  1E19                     	;# 
  3915  1E1A                     	;# 
  3916  1E1B                     	;# 
  3917  1E1C                     	;# 
  3918  1E1D                     	;# 
  3919  1E1E                     	;# 
  3920  1E1F                     	;# 
  3921  1E20                     	;# 
  3922  1E21                     	;# 
  3923  1E22                     	;# 
  3924  1E23                     	;# 
  3925  1E24                     	;# 
  3926  1E25                     	;# 
  3927  1E26                     	;# 
  3928  1E27                     	;# 
  3929  1E28                     	;# 
  3930  1E29                     	;# 
  3931  1E2A                     	;# 
  3932  1E2B                     	;# 
  3933  1E2C                     	;# 
  3934  1E2D                     	;# 
  3935  1E2E                     	;# 
  3936  1E2F                     	;# 
  3937  1E30                     	;# 
  3938  1E31                     	;# 
  3939  1E32                     	;# 
  3940  1E33                     	;# 
  3941  1E34                     	;# 
  3942  1E35                     	;# 
  3943  1E36                     	;# 
  3944  1E37                     	;# 
  3945  1E8F                     	;# 
  3946  1E90                     	;# 
  3947  1E91                     	;# 
  3948  1E92                     	;# 
  3949  1E93                     	;# 
  3950  1E9C                     	;# 
  3951  1EA1                     	;# 
  3952  1EA2                     	;# 
  3953  1EB1                     	;# 
  3954  1EBB                     	;# 
  3955  1EBC                     	;# 
  3956  1EBD                     	;# 
  3957  1EBE                     	;# 
  3958  1EC3                     	;# 
  3959  1EC5                     	;# 
  3960  1EC6                     	;# 
  3961  1EC7                     	;# 
  3962  1EC8                     	;# 
  3963  1EC9                     	;# 
  3964  1ECA                     	;# 
  3965  1ECB                     	;# 
  3966  1ECC                     	;# 
  3967  1ECD                     	;# 
  3968  1ECE                     	;# 
  3969  1F10                     	;# 
  3970  1F11                     	;# 
  3971  1F12                     	;# 
  3972  1F13                     	;# 
  3973  1F14                     	;# 
  3974  1F15                     	;# 
  3975  1F16                     	;# 
  3976  1F17                     	;# 
  3977  1F18                     	;# 
  3978  1F19                     	;# 
  3979  1F1A                     	;# 
  3980  1F1B                     	;# 
  3981  1F1C                     	;# 
  3982  1F1D                     	;# 
  3983  1F1E                     	;# 
  3984  1F1F                     	;# 
  3985  1F20                     	;# 
  3986  1F21                     	;# 
  3987  1F22                     	;# 
  3988  1F23                     	;# 
  3989  1F24                     	;# 
  3990  1F25                     	;# 
  3991  1F26                     	;# 
  3992  1F27                     	;# 
  3993  1F38                     	;# 
  3994  1F39                     	;# 
  3995  1F3A                     	;# 
  3996  1F3B                     	;# 
  3997  1F3C                     	;# 
  3998  1F3D                     	;# 
  3999  1F3E                     	;# 
  4000  1F3F                     	;# 
  4001  1F43                     	;# 
  4002  1F44                     	;# 
  4003  1F45                     	;# 
  4004  1F46                     	;# 
  4005  1F47                     	;# 
  4006  1F48                     	;# 
  4007  1F49                     	;# 
  4008  1F4A                     	;# 
  4009  1F4E                     	;# 
  4010  1F4F                     	;# 
  4011  1F50                     	;# 
  4012  1F51                     	;# 
  4013  1F52                     	;# 
  4014  1F53                     	;# 
  4015  1F54                     	;# 
  4016  1F55                     	;# 
  4017  1F65                     	;# 
  4018  1F68                     	;# 
  4019  1F69                     	;# 
  4020  1F6A                     	;# 
  4021  1F6B                     	;# 
  4022  1FE4                     	;# 
  4023  1FE5                     	;# 
  4024  1FE6                     	;# 
  4025  1FE7                     	;# 
  4026  1FE8                     	;# 
  4027  1FE8                     	;# 
  4028  1FE9                     	;# 
  4029  1FEA                     	;# 
  4030  1FEB                     	;# 
  4031  1FED                     	;# 
  4032  1FEE                     	;# 
  4033  1FEF                     	;_data
  4034                           
  4035                           	psect	idataBANK1
  4036  07FF                     __pidataBANK1:	
  4037                           
  4038                           ;initializer for _g_screenRefresh
  4039  07FF  3401               	retlw	1
  4040                           
  4041                           	psect	idataBANK3
  4042  0801                     __pidataBANK3:	
  4043                           
  4044                           ;initializer for statusView@prevSensorStat
  4045  0801  3401               	retlw	1
  4046                           
  4047                           	psect	idataBANK4
  4048  30F1                     __pidataBANK4:	
  4049                           
  4050                           ;initializer for OLED_print_xy@F7980
  4051  30F1  3400               	retlw	0
  4052  30F2  3440               	retlw	64
  4053  30F3  3414               	retlw	20
  4054  30F4  3454               	retlw	84
  4055                           
  4056                           ;initializer for OLED_setCursor@F7972
  4057  30F5  3400               	retlw	0
  4058  30F6  3440               	retlw	64
  4059  30F7  3414               	retlw	20
  4060  30F8  3454               	retlw	84
  4061                           
  4062                           	psect	idataBANK6
  4063  3225                     __pidataBANK6:	
  4064                           
  4065                           ;initializer for OLED_loadSpecialChars@F7985
  4066  3225  3418               	retlw	24
  4067  3226  3418               	retlw	24
  4068  3227  3403               	retlw	3
  4069  3228  3404               	retlw	4
  4070  3229  3404               	retlw	4
  4071  322A  3404               	retlw	4
  4072  322B  3403               	retlw	3
  4073  322C  3400               	retlw	0
  4074  322D  3400               	retlw	0
  4075  322E  3400               	retlw	0
  4076  322F  3400               	retlw	0
  4077  3230  3404               	retlw	4
  4078  3231  3400               	retlw	0
  4079  3232  3400               	retlw	0
  4080  3233  3400               	retlw	0
  4081  3234  3400               	retlw	0
  4082  3235  3401               	retlw	1
  4083  3236  3401               	retlw	1
  4084  3237  3405               	retlw	5
  4085  3238  3409               	retlw	9
  4086  3239  341F               	retlw	31
  4087  323A  3408               	retlw	8
  4088  323B  3404               	retlw	4
  4089  323C  3400               	retlw	0
  4090  323D  3400               	retlw	0
  4091  323E  3410               	retlw	16
  4092  323F  3418               	retlw	24
  4093  3240  341C               	retlw	28
  4094  3241  3418               	retlw	24
  4095  3242  3410               	retlw	16
  4096  3243  3400               	retlw	0
  4097  3244  3400               	retlw	0
  4098                           
  4099                           	psect	stringtext1
  4100  3800                     __pstringtext1:	
  4101  3800                     _nextStateTbl:	
  4102  3800  3400               	retlw	0
  4103  3801  34FF               	retlw	255
  4104  3802  3401               	retlw	1
  4105  3803  3405               	retlw	5
  4106  3804  3400               	retlw	0
  4107  3805  3400               	retlw	0
  4108  3806  3401               	retlw	1
  4109  3807  34FF               	retlw	255
  4110  3808  3400               	retlw	0
  4111  3809  3402               	retlw	2
  4112  380A  3401               	retlw	1
  4113  380B  3401               	retlw	1
  4114  380C  3402               	retlw	2
  4115  380D  3400               	retlw	0
  4116  380E  3403               	retlw	3
  4117  380F  3401               	retlw	1
  4118  3810  3401               	retlw	1
  4119  3811  3402               	retlw	2
  4120  3812  3402               	retlw	2
  4121  3813  3401               	retlw	1
  4122  3814  3404               	retlw	4
  4123  3815  3401               	retlw	1
  4124  3816  3401               	retlw	1
  4125  3817  3402               	retlw	2
  4126  3818  3402               	retlw	2
  4127  3819  3402               	retlw	2
  4128  381A  3402               	retlw	2
  4129  381B  3401               	retlw	1
  4130  381C  3401               	retlw	1
  4131  381D  3402               	retlw	2
  4132  381E  3403               	retlw	3
  4133  381F  3400               	retlw	0
  4134  3820  3402               	retlw	2
  4135  3821  3402               	retlw	2
  4136  3822  3402               	retlw	2
  4137  3823  3403               	retlw	3
  4138  3824  3403               	retlw	3
  4139  3825  3401               	retlw	1
  4140  3826  3402               	retlw	2
  4141  3827  3402               	retlw	2
  4142  3828  3402               	retlw	2
  4143  3829  3402               	retlw	2
  4144  382A  3404               	retlw	4
  4145  382B  3400               	retlw	0
  4146  382C  3402               	retlw	2
  4147  382D  3402               	retlw	2
  4148  382E  3402               	retlw	2
  4149  382F  3404               	retlw	4
  4150  3830  3405               	retlw	5
  4151  3831  3400               	retlw	0
  4152  3832  3406               	retlw	6
  4153  3833  3400               	retlw	0
  4154  3834  3400               	retlw	0
  4155  3835  3405               	retlw	5
  4156  3836  3405               	retlw	5
  4157  3837  3401               	retlw	1
  4158  3838  3407               	retlw	7
  4159  3839  3400               	retlw	0
  4160  383A  3400               	retlw	0
  4161  383B  3405               	retlw	5
  4162  383C  3405               	retlw	5
  4163  383D  3402               	retlw	2
  4164  383E  3408               	retlw	8
  4165  383F  3400               	retlw	0
  4166  3840  3400               	retlw	0
  4167  3841  3405               	retlw	5
  4168  3842  3406               	retlw	6
  4169  3843  3400               	retlw	0
  4170  3844  3405               	retlw	5
  4171  3845  3405               	retlw	5
  4172  3846  3405               	retlw	5
  4173  3847  3406               	retlw	6
  4174  3848  3407               	retlw	7
  4175  3849  3400               	retlw	0
  4176  384A  3405               	retlw	5
  4177  384B  3405               	retlw	5
  4178  384C  3405               	retlw	5
  4179  384D  3407               	retlw	7
  4180  384E  3408               	retlw	8
  4181  384F  3400               	retlw	0
  4182  3850  3405               	retlw	5
  4183  3851  3405               	retlw	5
  4184  3852  3405               	retlw	5
  4185  3853  3408               	retlw	8
  4186  3854                     __end_of_nextStateTbl:	
  4187                           
  4188                           	psect	stringtext2
  4189  38CD                     __pstringtext2:	
  4190  38CD                     _transition_table:	
  4191  38CD  3400               	retlw	0
  4192  38CE  3404               	retlw	4
  4193  38CF  3401               	retlw	1
  4194  38D0  3400               	retlw	0
  4195  38D1  3482               	retlw	130
  4196  38D2  3400               	retlw	0
  4197  38D3  3401               	retlw	1
  4198  38D4  3400               	retlw	0
  4199  38D5  3402               	retlw	2
  4200  38D6  3403               	retlw	3
  4201  38D7  3401               	retlw	1
  4202  38D8  3400               	retlw	0
  4203  38D9  3402               	retlw	2
  4204  38DA  3403               	retlw	3
  4205  38DB  3400               	retlw	0
  4206  38DC  3480               	retlw	128
  4207  38DD  3445               	retlw	69
  4208  38DE  3404               	retlw	4
  4209  38DF  3400               	retlw	0
  4210  38E0  3400               	retlw	0
  4211  38E1  3405               	retlw	5
  4212  38E2  3404               	retlw	4
  4213  38E3  3406               	retlw	6
  4214  38E4  3400               	retlw	0
  4215  38E5  3405               	retlw	5
  4216  38E6  3400               	retlw	0
  4217  38E7  3406               	retlw	6
  4218  38E8  3440               	retlw	64
  4219  38E9                     __end_of_transition_table:	
  4220                           
  4221                           	psect	stringtext3
  4222  3854                     __pstringtext3:	
  4223  3854                     _stateFuncTbl:	
  4224  3854  3400               	retlw	0
  4225  3855  341C               	retlw	low _statusView
  4226  3856  341E               	retlw	high _statusView
  4227  3857  3401               	retlw	1
  4228  3858  3413               	retlw	low _channelView
  4229  3859  3409               	retlw	high _channelView
  4230  385A  3402               	retlw	2
  4231  385B  345D               	retlw	low _channelSetup
  4232  385C  3426               	retlw	high _channelSetup
  4233  385D  3403               	retlw	3
  4234  385E  345A               	retlw	low _setOutputPower
  4235  385F  3423               	retlw	high _setOutputPower
  4236  3860  3404               	retlw	4
  4237  3861  34C0               	retlw	low _setLensDia
  4238  3862  342C               	retlw	high _setLensDia
  4239  3863  3405               	retlw	5
  4240  3864  346D               	retlw	low _setup
  4241  3865  342D               	retlw	high _setup
  4242  3866  3406               	retlw	6
  4243  3867  342C               	retlw	low _setDPOffset
  4244  3868  3429               	retlw	high _setDPOffset
  4245  3869  3407               	retlw	7
  4246  386A  349A               	retlw	low _setSkyTemp
  4247  386B  3429               	retlw	high _setSkyTemp
  4248  386C  3408               	retlw	8
  4249  386D  3408               	retlw	low _setFudgeFactor
  4250  386E  342A               	retlw	high _setFudgeFactor
  4251  386F                     __end_of_stateFuncTbl:	
  4252  0018                     _LATAbits	set	24
  4253  000C                     _PORTAbits	set	12
  4254  000B                     _INTCONbits	set	11
  4255  000E                     _PORTCbits	set	14
  4256  0014                     _TRISCbits	set	20
  4257  001A                     _LATCbits	set	26
  4258  0019                     _LATBbits	set	25
  4259  000B                     _INTCON	set	11
  4260  0014                     _TRISC	set	20
  4261  0013                     _TRISB	set	19
  4262  0012                     _TRISA	set	18
  4263  009B                     _ADRESL	set	155
  4264  009C                     _ADRESH	set	156
  4265  009E                     _ADCON1	set	158
  4266  009D                     _ADCON0bits	set	157
  4267  0119                     _RC1REG	set	281
  4268  011D                     _RC1STAbits	set	285
  4269  011A                     _TX1REG	set	282
  4270  011E                     _TX1STA	set	286
  4271  011D                     _RC1STA	set	285
  4272  011B                     _SPBRGL	set	283
  4273  011F                     _BAUD1CON	set	287
  4274  020C                     _TMR1	set	524
  4275  0211                     _T1CLK	set	529
  4276  020E                     _T1CON	set	526
  4277  059C                     _TMR0	set	1436
  4278  059F                     _T0CON1	set	1439
  4279  059E                     _T0CON0	set	1438
  4280  070F                     _PIR3bits	set	1807
  4281  0719                     _PIE3bits	set	1817
  4282  0710                     _PIR4bits	set	1808
  4283  071A                     _PIE4bits	set	1818
  4284  070C                     _PIR0bits	set	1804
  4285  0716                     _PIE0bits	set	1814
  4286  071A                     _PIE4	set	1818
  4287  0719                     _PIE3	set	1817
  4288  0716                     _PIE0	set	1814
  4289  088F                     _OSCCON3bits	set	2191
  4290  088D                     _OSCCON1	set	2189
  4291  0893                     _OSCFRQ	set	2195
  4292  1ECB                     _RX1DTPPSbits	set	7883
  4293  1F3F                     _IOCAFbits	set	7999
  4294  1F54                     _IOCCN	set	8020
  4295  1F3E                     _IOCAN	set	7998
  4296  1F3D                     _IOCAP	set	7997
  4297  1F4E                     _ANSELC	set	8014
  4298  1F43                     _ANSELB	set	8003
  4299  1F38                     _ANSELA	set	7992
  4300  1F26                     _RC6PPS	set	7974
  4301  386F                     STR_1:	
  4302  386F  3454               	retlw	84	;'T'
  4303  3870  3465               	retlw	101	;'e'
  4304  3871  346D               	retlw	109	;'m'
  4305  3872  3470               	retlw	112	;'p'
  4306  3873  3465               	retlw	101	;'e'
  4307  3874  3472               	retlw	114	;'r'
  4308  3875  3461               	retlw	97	;'a'
  4309  3876  3474               	retlw	116	;'t'
  4310  3877  3475               	retlw	117	;'u'
  4311  3878  3472               	retlw	114	;'r'
  4312  3879  3465               	retlw	101	;'e'
  4313  387A  3420               	retlw	32	;' '
  4314  387B  3452               	retlw	82	;'R'
  4315  387C  3465               	retlw	101	;'e'
  4316  387D  346C               	retlw	108	;'l'
  4317  387E  342E               	retlw	46	;'.'
  4318  387F  3468               	retlw	104	;'h'
  4319  3880  3475               	retlw	117	;'u'
  4320  3881  346D               	retlw	109	;'m'
  4321  3882  3469               	retlw	105	;'i'
  4322  3883  3464               	retlw	100	;'d'
  4323  3884  3469               	retlw	105	;'i'
  4324  3885  3474               	retlw	116	;'t'
  4325  3886  3479               	retlw	121	;'y'
  4326  3887  3444               	retlw	68	;'D'
  4327  3888  3465               	retlw	101	;'e'
  4328  3889  3477               	retlw	119	;'w'
  4329  388A  3470               	retlw	112	;'p'
  4330  388B  346F               	retlw	111	;'o'
  4331  388C  3469               	retlw	105	;'i'
  4332  388D  346E               	retlw	110	;'n'
  4333  388E  3474               	retlw	116	;'t'
  4334  388F  3420               	retlw	32	;' '
  4335  3890  3420               	retlw	32	;' '
  4336  3891  3420               	retlw	32	;' '
  4337  3892  3420               	retlw	32	;' '
  4338  3893  3442               	retlw	66	;'B'
  4339  3894  3461               	retlw	97	;'a'
  4340  3895  3474               	retlw	116	;'t'
  4341  3896  342E               	retlw	46	;'.'
  4342  3897  3420               	retlw	32	;' '
  4343  3898  3420               	retlw	32	;' '
  4344  3899  3420               	retlw	32	;' '
  4345  389A  3450               	retlw	80	;'P'
  4346  389B  346F               	retlw	111	;'o'
  4347  389C  3477               	retlw	119	;'w'
  4348  389D  3465               	retlw	101	;'e'
  4349  389E  3472               	retlw	114	;'r'
  4350  389F  3456               	retlw	86	;'V'
  4351  38A0  3465               	retlw	101	;'e'
  4352  38A1  3472               	retlw	114	;'r'
  4353  38A2  3473               	retlw	115	;'s'
  4354  38A3  3469               	retlw	105	;'i'
  4355  38A4  346F               	retlw	111	;'o'
  4356  38A5  346E               	retlw	110	;'n'
  4357  38A6  343A               	retlw	58	;':'
  4358  38A7  3400               	retlw	0
  4359                           
  4360                           	psect	stringtext4
  4361  38A8                     __pstringtext4:	
  4362  38A8                     STR_48:	
  4363  38A8  3444               	retlw	68	;'D'
  4364  38A9  3450               	retlw	80	;'P'
  4365  38AA  3420               	retlw	32	;' '
  4366  38AB  346F               	retlw	111	;'o'
  4367  38AC  3466               	retlw	102	;'f'
  4368  38AD  3466               	retlw	102	;'f'
  4369  38AE  3473               	retlw	115	;'s'
  4370  38AF  3465               	retlw	101	;'e'
  4371  38B0  3474               	retlw	116	;'t'
  4372  38B1  3420               	retlw	32	;' '
  4373  38B2  3420               	retlw	32	;' '
  4374  38B3  3420               	retlw	32	;' '
  4375  38B4  3453               	retlw	83	;'S'
  4376  38B5  346B               	retlw	107	;'k'
  4377  38B6  3479               	retlw	121	;'y'
  4378  38B7  3420               	retlw	32	;' '
  4379  38B8  3474               	retlw	116	;'t'
  4380  38B9  3465               	retlw	101	;'e'
  4381  38BA  346D               	retlw	109	;'m'
  4382  38BB  3470               	retlw	112	;'p'
  4383  38BC  342E               	retlw	46	;'.'
  4384  38BD  3420               	retlw	32	;' '
  4385  38BE  3420               	retlw	32	;' '
  4386  38BF  3420               	retlw	32	;' '
  4387  38C0  3446               	retlw	70	;'F'
  4388  38C1  3475               	retlw	117	;'u'
  4389  38C2  3464               	retlw	100	;'d'
  4390  38C3  3467               	retlw	103	;'g'
  4391  38C4  3465               	retlw	101	;'e'
  4392  38C5  3420               	retlw	32	;' '
  4393  38C6  3466               	retlw	102	;'f'
  4394  38C7  3461               	retlw	97	;'a'
  4395  38C8  3463               	retlw	99	;'c'
  4396  38C9  3474               	retlw	116	;'t'
  4397  38CA  346F               	retlw	111	;'o'
  4398  38CB  3472               	retlw	114	;'r'
  4399  38CC  3400               	retlw	0
  4400                           
  4401                           	psect	stringtext5
  4402  38E9                     __pstringtext5:	
  4403  38E9                     STR_62:	
  4404  38E9  3448               	retlw	72	;'H'
  4405  38EA  3465               	retlw	101	;'e'
  4406  38EB  3461               	retlw	97	;'a'
  4407  38EC  3474               	retlw	116	;'t'
  4408  38ED  3465               	retlw	101	;'e'
  4409  38EE  3472               	retlw	114	;'r'
  4410  38EF  3420               	retlw	32	;' '
  4411  38F0  3420               	retlw	32	;' '
  4412  38F1  3420               	retlw	32	;' '
  4413  38F2  3420               	retlw	32	;' '
  4414  38F3  3420               	retlw	32	;' '
  4415  38F4  3420               	retlw	32	;' '
  4416  38F5  3400               	retlw	0
  4417                           
  4418                           	psect	stringtext6
  4419  38F6                     __pstringtext6:	
  4420  38F6                     STR_74:	
  4421  38F6  3453               	retlw	83	;'S'
  4422  38F7  3465               	retlw	101	;'e'
  4423  38F8  346E               	retlw	110	;'n'
  4424  38F9  3473               	retlw	115	;'s'
  4425  38FA  346F               	retlw	111	;'o'
  4426  38FB  3472               	retlw	114	;'r'
  4427  38FC  3420               	retlw	32	;' '
  4428  38FD  3420               	retlw	32	;' '
  4429  38FE  3420               	retlw	32	;' '
  4430  38FF  3420               	retlw	32	;' '
  4431  3900  3420               	retlw	32	;' '
  4432  3901  3420               	retlw	32	;' '
  4433  3902  3400               	retlw	0
  4434                           
  4435                           	psect	stringtext7
  4436  3903                     __pstringtext7:	
  4437  3903                     STR_64:	
  4438  3903  344F               	retlw	79	;'O'
  4439  3904  3475               	retlw	117	;'u'
  4440  3905  3474               	retlw	116	;'t'
  4441  3906  3470               	retlw	112	;'p'
  4442  3907  3475               	retlw	117	;'u'
  4443  3908  3474               	retlw	116	;'t'
  4444  3909  3420               	retlw	32	;' '
  4445  390A  3420               	retlw	32	;' '
  4446  390B  3420               	retlw	32	;' '
  4447  390C  3420               	retlw	32	;' '
  4448  390D  3420               	retlw	32	;' '
  4449  390E  3420               	retlw	32	;' '
  4450  390F  3400               	retlw	0
  4451                           
  4452                           	psect	stringtext8
  4453  3910                     __pstringtext8:	
  4454  3910                     STR_83:	
  4455  3910  3420               	retlw	32	;' '
  4456  3911  3420               	retlw	32	;' '
  4457  3912  3420               	retlw	32	;' '
  4458  3913  3420               	retlw	32	;' '
  4459  3914  343A               	retlw	58	;':'
  4460  3915  342D               	retlw	45	;'-'
  4461  3916  3429               	retlw	41	;')'
  4462  3917  3420               	retlw	32	;' '
  4463  3918  3420               	retlw	32	;' '
  4464  3919  3420               	retlw	32	;' '
  4465  391A  3420               	retlw	32	;' '
  4466  391B  3420               	retlw	32	;' '
  4467  391C  3400               	retlw	0
  4468                           
  4469                           	psect	stringtext9
  4470  391D                     __pstringtext9:	
  4471  391D                     STR_63:	
  4472  391D  3472               	retlw	114	;'r'
  4473  391E  3465               	retlw	101	;'e'
  4474  391F  346D               	retlw	109	;'m'
  4475  3920  346F               	retlw	111	;'o'
  4476  3921  3476               	retlw	118	;'v'
  4477  3922  3465               	retlw	101	;'e'
  4478  3923  3464               	retlw	100	;'d'
  4479  3924  3420               	retlw	32	;' '
  4480  3925  3420               	retlw	32	;' '
  4481  3926  3420               	retlw	32	;' '
  4482  3927  3420               	retlw	32	;' '
  4483  3928  3420               	retlw	32	;' '
  4484  3929  3400               	retlw	0
  4485                           
  4486                           	psect	stringtext10
  4487  392A                     __pstringtext10:	
  4488  392A                     STR_84:	
  4489  392A  3455               	retlw	85	;'U'
  4490  392B  346E               	retlw	110	;'n'
  4491  392C  346B               	retlw	107	;'k'
  4492  392D  346E               	retlw	110	;'n'
  4493  392E  346F               	retlw	111	;'o'
  4494  392F  3477               	retlw	119	;'w'
  4495  3930  346E               	retlw	110	;'n'
  4496  3931  3420               	retlw	32	;' '
  4497  3932  3420               	retlw	32	;' '
  4498  3933  3420               	retlw	32	;' '
  4499  3934  3420               	retlw	32	;' '
  4500  3935  3420               	retlw	32	;' '
  4501  3936  3400               	retlw	0
  4502                           
  4503                           	psect	stringtext11
  4504  3937                     __pstringtext11:	
  4505  3937                     STR_75:	
  4506  3937  3474               	retlw	116	;'t'
  4507  3938  3469               	retlw	105	;'i'
  4508  3939  346D               	retlw	109	;'m'
  4509  393A  3465               	retlw	101	;'e'
  4510  393B  346F               	retlw	111	;'o'
  4511  393C  3475               	retlw	117	;'u'
  4512  393D  3474               	retlw	116	;'t'
  4513  393E  3420               	retlw	32	;' '
  4514  393F  3420               	retlw	32	;' '
  4515  3940  3420               	retlw	32	;' '
  4516  3941  3420               	retlw	32	;' '
  4517  3942  3420               	retlw	32	;' '
  4518  3943  3400               	retlw	0
  4519                           
  4520                           	psect	stringtext12
  4521  3944                     __pstringtext12:	
  4522  3944                     STR_65:	
  4523  3944  3473               	retlw	115	;'s'
  4524  3945  3468               	retlw	104	;'h'
  4525  3946  346F               	retlw	111	;'o'
  4526  3947  3472               	retlw	114	;'r'
  4527  3948  3474               	retlw	116	;'t'
  4528  3949  3465               	retlw	101	;'e'
  4529  394A  3464               	retlw	100	;'d'
  4530  394B  3421               	retlw	33	;'!'
  4531  394C  3420               	retlw	32	;' '
  4532  394D  3420               	retlw	32	;' '
  4533  394E  3420               	retlw	32	;' '
  4534  394F  3420               	retlw	32	;' '
  4535  3950  3400               	retlw	0
  4536                           
  4537                           	psect	stringtext13
  4538  3951                     __pstringtext13:	
  4539  3951                     STR_73:	
  4540  3951  3474               	retlw	116	;'t'
  4541  3952  346F               	retlw	111	;'o'
  4542  3953  346F               	retlw	111	;'o'
  4543  3954  3420               	retlw	32	;' '
  4544  3955  346C               	retlw	108	;'l'
  4545  3956  346F               	retlw	111	;'o'
  4546  3957  3477               	retlw	119	;'w'
  4547  3958  3421               	retlw	33	;'!'
  4548  3959  3420               	retlw	32	;' '
  4549  395A  3420               	retlw	32	;' '
  4550  395B  3420               	retlw	32	;' '
  4551  395C  3420               	retlw	32	;' '
  4552  395D  3400               	retlw	0
  4553                           
  4554                           	psect	stringtext14
  4555  395E                     __pstringtext14:	
  4556  395E                     STR_77:	
  4557  395E  3463               	retlw	99	;'c'
  4558  395F  3468               	retlw	104	;'h'
  4559  3960  3465               	retlw	101	;'e'
  4560  3961  3463               	retlw	99	;'c'
  4561  3962  346B               	retlw	107	;'k'
  4562  3963  3473               	retlw	115	;'s'
  4563  3964  3475               	retlw	117	;'u'
  4564  3965  346D               	retlw	109	;'m'
  4565  3966  3420               	retlw	32	;' '
  4566  3967  3420               	retlw	32	;' '
  4567  3968  3420               	retlw	32	;' '
  4568  3969  3420               	retlw	32	;' '
  4569  396A  3400               	retlw	0
  4570                           
  4571                           	psect	stringtext15
  4572  396B                     __pstringtext15:	
  4573  396B                     STR_67:	
  4574  396B  3464               	retlw	100	;'d'
  4575  396C  3465               	retlw	101	;'e'
  4576  396D  3474               	retlw	116	;'t'
  4577  396E  3465               	retlw	101	;'e'
  4578  396F  3463               	retlw	99	;'c'
  4579  3970  3474               	retlw	116	;'t'
  4580  3971  3465               	retlw	101	;'e'
  4581  3972  3464               	retlw	100	;'d'
  4582  3973  3421               	retlw	33	;'!'
  4583  3974  3420               	retlw	32	;' '
  4584  3975  3420               	retlw	32	;' '
  4585  3976  3420               	retlw	32	;' '
  4586  3977  3400               	retlw	0
  4587                           
  4588                           	psect	stringtext16
  4589  3978                     __pstringtext16:	
  4590  3978                     STR_71:	
  4591  3978  3474               	retlw	116	;'t'
  4592  3979  346F               	retlw	111	;'o'
  4593  397A  346F               	retlw	111	;'o'
  4594  397B  3420               	retlw	32	;' '
  4595  397C  3468               	retlw	104	;'h'
  4596  397D  3469               	retlw	105	;'i'
  4597  397E  3467               	retlw	103	;'g'
  4598  397F  3468               	retlw	104	;'h'
  4599  3980  3421               	retlw	33	;'!'
  4600  3981  3420               	retlw	32	;' '
  4601  3982  3420               	retlw	32	;' '
  4602  3983  3420               	retlw	32	;' '
  4603  3984  3400               	retlw	0
  4604                           
  4605                           	psect	stringtext17
  4606  3985                     __pstringtext17:	
  4607  3985                     STR_85:	
  4608  3985  3465               	retlw	101	;'e'
  4609  3986  3472               	retlw	114	;'r'
  4610  3987  3472               	retlw	114	;'r'
  4611  3988  346F               	retlw	111	;'o'
  4612  3989  3472               	retlw	114	;'r'
  4613  398A  3420               	retlw	32	;' '
  4614  398B  3463               	retlw	99	;'c'
  4615  398C  346F               	retlw	111	;'o'
  4616  398D  3464               	retlw	100	;'d'
  4617  398E  3465               	retlw	101	;'e'
  4618  398F  3420               	retlw	32	;' '
  4619  3990  3420               	retlw	32	;' '
  4620  3991  3400               	retlw	0
  4621                           
  4622                           	psect	stringtext18
  4623  3992                     __pstringtext18:	
  4624  3992                     STR_78:	
  4625  3992  344F               	retlw	79	;'O'
  4626  3993  3456               	retlw	86	;'V'
  4627  3994  3445               	retlw	69	;'E'
  4628  3995  3452               	retlw	82	;'R'
  4629  3996  3443               	retlw	67	;'C'
  4630  3997  3455               	retlw	85	;'U'
  4631  3998  3452               	retlw	82	;'R'
  4632  3999  3452               	retlw	82	;'R'
  4633  399A  3445               	retlw	69	;'E'
  4634  399B  344E               	retlw	78	;'N'
  4635  399C  3454               	retlw	84	;'T'
  4636  399D  3420               	retlw	32	;' '
  4637  399E  3400               	retlw	0
  4638                           
  4639                           	psect	stringtext19
  4640  399F                     __pstringtext19:	
  4641  399F                     STR_82:	
  4642  399F  344D               	retlw	77	;'M'
  4643  39A0  3465               	retlw	101	;'e'
  4644  39A1  346E               	retlw	110	;'n'
  4645  39A2  3475               	retlw	117	;'u'
  4646  39A3  3420               	retlw	32	;' '
  4647  39A4  3462               	retlw	98	;'b'
  4648  39A5  3472               	retlw	114	;'r'
  4649  39A6  346F               	retlw	111	;'o'
  4650  39A7  346B               	retlw	107	;'k'
  4651  39A8  3465               	retlw	101	;'e'
  4652  39A9  346E               	retlw	110	;'n'
  4653  39AA  3420               	retlw	32	;' '
  4654  39AB  3400               	retlw	0
  4655                           
  4656                           	psect	stringtext20
  4657  39AC                     __pstringtext20:	
  4658  39AC                     STR_66:	
  4659  39AC  344F               	retlw	79	;'O'
  4660  39AD  3476               	retlw	118	;'v'
  4661  39AE  3465               	retlw	101	;'e'
  4662  39AF  3472               	retlw	114	;'r'
  4663  39B0  3463               	retlw	99	;'c'
  4664  39B1  3475               	retlw	117	;'u'
  4665  39B2  3472               	retlw	114	;'r'
  4666  39B3  3472               	retlw	114	;'r'
  4667  39B4  3465               	retlw	101	;'e'
  4668  39B5  346E               	retlw	110	;'n'
  4669  39B6  3474               	retlw	116	;'t'
  4670  39B7  3420               	retlw	32	;' '
  4671  39B8  3400               	retlw	0
  4672                           
  4673                           	psect	stringtext21
  4674  39B9                     __pstringtext21:	
  4675  39B9                     STR_69:	
  4676  39B9  346F               	retlw	111	;'o'
  4677  39BA  3476               	retlw	118	;'v'
  4678  39BB  3465               	retlw	101	;'e'
  4679  39BC  3472               	retlw	114	;'r'
  4680  39BD  3463               	retlw	99	;'c'
  4681  39BE  3475               	retlw	117	;'u'
  4682  39BF  3472               	retlw	114	;'r'
  4683  39C0  3472               	retlw	114	;'r'
  4684  39C1  3465               	retlw	101	;'e'
  4685  39C2  346E               	retlw	110	;'n'
  4686  39C3  3474               	retlw	116	;'t'
  4687  39C4  3420               	retlw	32	;' '
  4688  39C5  3400               	retlw	0
  4689                           
  4690                           	psect	stringtext22
  4691  39C6                     __pstringtext22:	
  4692  39C6                     STR_70:	
  4693  39C6  3453               	retlw	83	;'S'
  4694  39C7  3475               	retlw	117	;'u'
  4695  39C8  3470               	retlw	112	;'p'
  4696  39C9  3470               	retlw	112	;'p'
  4697  39CA  346C               	retlw	108	;'l'
  4698  39CB  3479               	retlw	121	;'y'
  4699  39CC  3420               	retlw	32	;' '
  4700  39CD  3476               	retlw	118	;'v'
  4701  39CE  346F               	retlw	111	;'o'
  4702  39CF  346C               	retlw	108	;'l'
  4703  39D0  3474               	retlw	116	;'t'
  4704  39D1  342E               	retlw	46	;'.'
  4705  39D2  3400               	retlw	0
  4706                           
  4707                           	psect	stringtext23
  4708  39D3                     __pstringtext23:	
  4709  39D3                     STR_79:	
  4710  39D3  3454               	retlw	84	;'T'
  4711  39D4  3455               	retlw	85	;'U'
  4712  39D5  3452               	retlw	82	;'R'
  4713  39D6  344E               	retlw	78	;'N'
  4714  39D7  3420               	retlw	32	;' '
  4715  39D8  344F               	retlw	79	;'O'
  4716  39D9  3446               	retlw	70	;'F'
  4717  39DA  3446               	retlw	70	;'F'
  4718  39DB  3420               	retlw	32	;' '
  4719  39DC  344E               	retlw	78	;'N'
  4720  39DD  344F               	retlw	79	;'O'
  4721  39DE  3457               	retlw	87	;'W'
  4722  39DF  3400               	retlw	0
  4723                           
  4724                           	psect	stringtext24
  4725  39E0                     __pstringtext24:	
  4726  39E0                     STR_76:	
  4727  39E0  3453               	retlw	83	;'S'
  4728  39E1  3465               	retlw	101	;'e'
  4729  39E2  346E               	retlw	110	;'n'
  4730  39E3  3473               	retlw	115	;'s'
  4731  39E4  346F               	retlw	111	;'o'
  4732  39E5  3472               	retlw	114	;'r'
  4733  39E6  3420               	retlw	32	;' '
  4734  39E7  3477               	retlw	119	;'w'
  4735  39E8  3472               	retlw	114	;'r'
  4736  39E9  346F               	retlw	111	;'o'
  4737  39EA  346E               	retlw	110	;'n'
  4738  39EB  3467               	retlw	103	;'g'
  4739  39EC  3400               	retlw	0
  4740                           
  4741                           	psect	stringtext25
  4742  39ED                     __pstringtext25:	
  4743  39ED                     STR_81:	
  4744  39ED  3450               	retlw	80	;'P'
  4745  39EE  346C               	retlw	108	;'l'
  4746  39EF  3465               	retlw	101	;'e'
  4747  39F0  3461               	retlw	97	;'a'
  4748  39F1  3473               	retlw	115	;'s'
  4749  39F2  3465               	retlw	101	;'e'
  4750  39F3  3420               	retlw	32	;' '
  4751  39F4  3463               	retlw	99	;'c'
  4752  39F5  3468               	retlw	104	;'h'
  4753  39F6  3465               	retlw	101	;'e'
  4754  39F7  3463               	retlw	99	;'c'
  4755  39F8  346B               	retlw	107	;'k'
  4756  39F9  3400               	retlw	0
  4757                           
  4758                           	psect	stringtext26
  4759  39FA                     __pstringtext26:	
  4760  39FA                     STR_28:	
  4761  39FA  344E               	retlw	78	;'N'
  4762  39FB  346F               	retlw	111	;'o'
  4763  39FC  3474               	retlw	116	;'t'
  4764  39FD  3420               	retlw	32	;' '
  4765  39FE  3420               	retlw	32	;' '
  4766  39FF  3420               	retlw	32	;' '
  4767  3A00  3420               	retlw	32	;' '
  4768  3A01  3420               	retlw	32	;' '
  4769  3A02  3420               	retlw	32	;' '
  4770  3A03  3420               	retlw	32	;' '
  4771  3A04  3420               	retlw	32	;' '
  4772  3A05  3420               	retlw	32	;' '
  4773  3A06  3400               	retlw	0
  4774                           
  4775                           	psect	stringtext27
  4776  3A07                     __pstringtext27:	
  4777  3A07                     STR_32:	
  4778  3A07  3452               	retlw	82	;'R'
  4779  3A08  3465               	retlw	101	;'e'
  4780  3A09  3473               	retlw	115	;'s'
  4781  3A0A  3465               	retlw	101	;'e'
  4782  3A0B  3474               	retlw	116	;'t'
  4783  3A0C  3420               	retlw	32	;' '
  4784  3A0D  3420               	retlw	32	;' '
  4785  3A0E  3420               	retlw	32	;' '
  4786  3A0F  3420               	retlw	32	;' '
  4787  3A10  3420               	retlw	32	;' '
  4788  3A11  3420               	retlw	32	;' '
  4789  3A12  3420               	retlw	32	;' '
  4790  3A13  3400               	retlw	0
  4791                           
  4792                           	psect	stringtext28
  4793  3A14                     __pstringtext28:	
  4794  3A14                     STR_30:	
  4795  3A14  3454               	retlw	84	;'T'
  4796  3A15  3465               	retlw	101	;'e'
  4797  3A16  3473               	retlw	115	;'s'
  4798  3A17  3474               	retlw	116	;'t'
  4799  3A18  3469               	retlw	105	;'i'
  4800  3A19  346E               	retlw	110	;'n'
  4801  3A1A  3467               	retlw	103	;'g'
  4802  3A1B  3420               	retlw	32	;' '
  4803  3A1C  3420               	retlw	32	;' '
  4804  3A1D  3420               	retlw	32	;' '
  4805  3A1E  3420               	retlw	32	;' '
  4806  3A1F  3420               	retlw	32	;' '
  4807  3A20  3400               	retlw	0
  4808                           
  4809                           	psect	stringtext29
  4810  3A21                     __pstringtext29:	
  4811  3A21                     STR_33:	
  4812  3A21  3463               	retlw	99	;'c'
  4813  3A22  3468               	retlw	104	;'h'
  4814  3A23  3461               	retlw	97	;'a'
  4815  3A24  346E               	retlw	110	;'n'
  4816  3A25  346E               	retlw	110	;'n'
  4817  3A26  3465               	retlw	101	;'e'
  4818  3A27  346C               	retlw	108	;'l'
  4819  3A28  3420               	retlw	32	;' '
  4820  3A29  3420               	retlw	32	;' '
  4821  3A2A  3420               	retlw	32	;' '
  4822  3A2B  3420               	retlw	32	;' '
  4823  3A2C  3420               	retlw	32	;' '
  4824  3A2D  3400               	retlw	0
  4825                           
  4826                           	psect	stringtext30
  4827  3A2E                     __pstringtext30:	
  4828  3A2E                     STR_19:	
  4829  3A2E  3453               	retlw	83	;'S'
  4830  3A2F  3468               	retlw	104	;'h'
  4831  3A30  346F               	retlw	111	;'o'
  4832  3A31  3472               	retlw	114	;'r'
  4833  3A32  3474               	retlw	116	;'t'
  4834  3A33  3465               	retlw	101	;'e'
  4835  3A34  3464               	retlw	100	;'d'
  4836  3A35  3421               	retlw	33	;'!'
  4837  3A36  3420               	retlw	32	;' '
  4838  3A37  3420               	retlw	32	;' '
  4839  3A38  3420               	retlw	32	;' '
  4840  3A39  3420               	retlw	32	;' '
  4841  3A3A  3400               	retlw	0
  4842                           
  4843                           	psect	stringtext31
  4844  3A3B                     __pstringtext31:	
  4845  3A3B                     STR_14:	
  4846  3A3B  3444               	retlw	68	;'D'
  4847  3A3C  3469               	retlw	105	;'i'
  4848  3A3D  3473               	retlw	115	;'s'
  4849  3A3E  3461               	retlw	97	;'a'
  4850  3A3F  3462               	retlw	98	;'b'
  4851  3A40  346C               	retlw	108	;'l'
  4852  3A41  3465               	retlw	101	;'e'
  4853  3A42  3464               	retlw	100	;'d'
  4854  3A43  3420               	retlw	32	;' '
  4855  3A44  3420               	retlw	32	;' '
  4856  3A45  3420               	retlw	32	;' '
  4857  3A46  3420               	retlw	32	;' '
  4858  3A47  3400               	retlw	0
  4859                           
  4860                           	psect	stringtext32
  4861  3A48                     __pstringtext32:	
  4862  3A48                     STR_31:	
  4863  3A48  3468               	retlw	104	;'h'
  4864  3A49  3465               	retlw	101	;'e'
  4865  3A4A  3461               	retlw	97	;'a'
  4866  3A4B  3474               	retlw	116	;'t'
  4867  3A4C  3465               	retlw	101	;'e'
  4868  3A4D  3472               	retlw	114	;'r'
  4869  3A4E  342E               	retlw	46	;'.'
  4870  3A4F  342E               	retlw	46	;'.'
  4871  3A50  342E               	retlw	46	;'.'
  4872  3A51  3420               	retlw	32	;' '
  4873  3A52  3420               	retlw	32	;' '
  4874  3A53  3420               	retlw	32	;' '
  4875  3A54  3400               	retlw	0
  4876                           
  4877                           	psect	stringtext33
  4878  3A55                     __pstringtext33:	
  4879  3A55                     STR_56:	
  4880  3A55  3453               	retlw	83	;'S'
  4881  3A56  346B               	retlw	107	;'k'
  4882  3A57  3479               	retlw	121	;'y'
  4883  3A58  3420               	retlw	32	;' '
  4884  3A59  3474               	retlw	116	;'t'
  4885  3A5A  3465               	retlw	101	;'e'
  4886  3A5B  346D               	retlw	109	;'m'
  4887  3A5C  3470               	retlw	112	;'p'
  4888  3A5D  342E               	retlw	46	;'.'
  4889  3A5E  3420               	retlw	32	;' '
  4890  3A5F  3420               	retlw	32	;' '
  4891  3A60  3420               	retlw	32	;' '
  4892  3A61  3400               	retlw	0
  4893                           
  4894                           	psect	stringtext34
  4895  3A62                     __pstringtext34:	
  4896  3A62                     STR_29:	
  4897  3A62  3463               	retlw	99	;'c'
  4898  3A63  346F               	retlw	111	;'o'
  4899  3A64  346E               	retlw	110	;'n'
  4900  3A65  346E               	retlw	110	;'n'
  4901  3A66  3465               	retlw	101	;'e'
  4902  3A67  3463               	retlw	99	;'c'
  4903  3A68  3474               	retlw	116	;'t'
  4904  3A69  3465               	retlw	101	;'e'
  4905  3A6A  3464               	retlw	100	;'d'
  4906  3A6B  3420               	retlw	32	;' '
  4907  3A6C  3420               	retlw	32	;' '
  4908  3A6D  3420               	retlw	32	;' '
  4909  3A6E  3400               	retlw	0
  4910                           
  4911                           	psect	stringtext35
  4912  3A6F                     __pstringtext35:	
  4913  3A6F                     STR_53:	
  4914  3A6F  3444               	retlw	68	;'D'
  4915  3A70  3450               	retlw	80	;'P'
  4916  3A71  3420               	retlw	32	;' '
  4917  3A72  346F               	retlw	111	;'o'
  4918  3A73  3466               	retlw	102	;'f'
  4919  3A74  3466               	retlw	102	;'f'
  4920  3A75  3473               	retlw	115	;'s'
  4921  3A76  3465               	retlw	101	;'e'
  4922  3A77  3474               	retlw	116	;'t'
  4923  3A78  3420               	retlw	32	;' '
  4924  3A79  3420               	retlw	32	;' '
  4925  3A7A  3420               	retlw	32	;' '
  4926  3A7B  3400               	retlw	0
  4927                           
  4928                           	psect	stringtext36
  4929  3A7C                     __pstringtext36:	
  4930  3A7C                     STR_34:	
  4931  3A7C  344C               	retlw	76	;'L'
  4932  3A7D  3465               	retlw	101	;'e'
  4933  3A7E  346E               	retlw	110	;'n'
  4934  3A7F  3473               	retlw	115	;'s'
  4935  3A80  3420               	retlw	32	;' '
  4936  3A81  3464               	retlw	100	;'d'
  4937  3A82  3469               	retlw	105	;'i'
  4938  3A83  3461               	retlw	97	;'a'
  4939  3A84  346D               	retlw	109	;'m'
  4940  3A85  342E               	retlw	46	;'.'
  4941  3A86  3420               	retlw	32	;' '
  4942  3A87  3420               	retlw	32	;' '
  4943  3A88  3400               	retlw	0
  4944                           
  4945                           	psect	stringtext37
  4946  3A89                     __pstringtext37:	
  4947  3A89                     STR_43:	
  4948  3A89  3448               	retlw	72	;'H'
  4949  3A8A  346F               	retlw	111	;'o'
  4950  3A8B  346C               	retlw	108	;'l'
  4951  3A8C  3464               	retlw	100	;'d'
  4952  3A8D  3420               	retlw	32	;' '
  4953  3A8E  3462               	retlw	98	;'b'
  4954  3A8F  3475               	retlw	117	;'u'
  4955  3A90  3474               	retlw	116	;'t'
  4956  3A91  3474               	retlw	116	;'t'
  4957  3A92  346F               	retlw	111	;'o'
  4958  3A93  346E               	retlw	110	;'n'
  4959  3A94  3420               	retlw	32	;' '
  4960  3A95  3400               	retlw	0
  4961                           
  4962                           	psect	stringtext38
  4963  3A96                     __pstringtext38:	
  4964  3A96                     STR_13:	
  4965  3A96  3450               	retlw	80	;'P'
  4966  3A97  346C               	retlw	108	;'l'
  4967  3A98  3465               	retlw	101	;'e'
  4968  3A99  3461               	retlw	97	;'a'
  4969  3A9A  3473               	retlw	115	;'s'
  4970  3A9B  3465               	retlw	101	;'e'
  4971  3A9C  3420               	retlw	32	;' '
  4972  3A9D  3477               	retlw	119	;'w'
  4973  3A9E  3461               	retlw	97	;'a'
  4974  3A9F  3469               	retlw	105	;'i'
  4975  3AA0  3474               	retlw	116	;'t'
  4976  3AA1  3421               	retlw	33	;'!'
  4977  3AA2  3400               	retlw	0
  4978                           
  4979                           	psect	stringtext39
  4980  3AA3                     __pstringtext39:	
  4981  3AA3                     STR_20:	
  4982  3AA3  344F               	retlw	79	;'O'
  4983  3AA4  3476               	retlw	118	;'v'
  4984  3AA5  3465               	retlw	101	;'e'
  4985  3AA6  3472               	retlw	114	;'r'
  4986  3AA7  3463               	retlw	99	;'c'
  4987  3AA8  3475               	retlw	117	;'u'
  4988  3AA9  3472               	retlw	114	;'r'
  4989  3AAA  3472               	retlw	114	;'r'
  4990  3AAB  3465               	retlw	101	;'e'
  4991  3AAC  346E               	retlw	110	;'n'
  4992  3AAD  3474               	retlw	116	;'t'
  4993  3AAE  3421               	retlw	33	;'!'
  4994  3AAF  3400               	retlw	0
  4995                           
  4996                           	psect	stringtext40
  4997  3AB0                     __pstringtext40:	
  4998  3AB0                     STR_18:	
  4999  3AB0  3444               	retlw	68	;'D'
  5000  3AB1  3469               	retlw	105	;'i'
  5001  3AB2  3473               	retlw	115	;'s'
  5002  3AB3  3463               	retlw	99	;'c'
  5003  3AB4  346F               	retlw	111	;'o'
  5004  3AB5  346E               	retlw	110	;'n'
  5005  3AB6  346E               	retlw	110	;'n'
  5006  3AB7  3465               	retlw	101	;'e'
  5007  3AB8  3463               	retlw	99	;'c'
  5008  3AB9  3474               	retlw	116	;'t'
  5009  3ABA  3465               	retlw	101	;'e'
  5010  3ABB  3464               	retlw	100	;'d'
  5011  3ABC  3400               	retlw	0
  5012                           
  5013                           	psect	stringtext41
  5014  3ABD                     __pstringtext41:	
  5015  3ABD                     STR_44:	
  5016  3ABD  3474               	retlw	116	;'t'
  5017  3ABE  346F               	retlw	111	;'o'
  5018  3ABF  3420               	retlw	32	;' '
  5019  3AC0  3472               	retlw	114	;'r'
  5020  3AC1  3465               	retlw	101	;'e'
  5021  3AC2  342D               	retlw	45	;'-'
  5022  3AC3  3465               	retlw	101	;'e'
  5023  3AC4  346E               	retlw	110	;'n'
  5024  3AC5  3461               	retlw	97	;'a'
  5025  3AC6  3462               	retlw	98	;'b'
  5026  3AC7  346C               	retlw	108	;'l'
  5027  3AC8  3465               	retlw	101	;'e'
  5028  3AC9  3400               	retlw	0
  5029                           
  5030                           	psect	stringtext42
  5031  3ACA                     __pstringtext42:	
  5032  3ACA                     STR_21:	
  5033  3ACA  344F               	retlw	79	;'O'
  5034  3ACB  346E               	retlw	110	;'n'
  5035  3ACC  3464               	retlw	100	;'d'
  5036  3ACD  3472               	retlw	114	;'r'
  5037  3ACE  3465               	retlw	101	;'e'
  5038  3ACF  3453               	retlw	83	;'S'
  5039  3AD0  3470               	retlw	112	;'p'
  5040  3AD1  3465               	retlw	101	;'e'
  5041  3AD2  3463               	retlw	99	;'c'
  5042  3AD3  3469               	retlw	105	;'i'
  5043  3AD4  3461               	retlw	97	;'a'
  5044  3AD5  346C               	retlw	108	;'l'
  5045  3AD6  3400               	retlw	0
  5046                           
  5047                           	psect	stringtext43
  5048  3AD7                     __pstringtext43:	
  5049  3AD7                     STR_22:	
  5050  3AD7  344F               	retlw	79	;'O'
  5051  3AD8  3475               	retlw	117	;'u'
  5052  3AD9  3474               	retlw	116	;'t'
  5053  3ADA  3470               	retlw	112	;'p'
  5054  3ADB  3475               	retlw	117	;'u'
  5055  3ADC  3474               	retlw	116	;'t'
  5056  3ADD  3420               	retlw	32	;' '
  5057  3ADE  3470               	retlw	112	;'p'
  5058  3ADF  346F               	retlw	111	;'o'
  5059  3AE0  3477               	retlw	119	;'w'
  5060  3AE1  3465               	retlw	101	;'e'
  5061  3AE2  3472               	retlw	114	;'r'
  5062  3AE3  3400               	retlw	0
  5063                           
  5064                           	psect	stringtext44
  5065  3AE4                     __pstringtext44:	
  5066  3AE4                     STR_86:	
  5067  3AE4  3454               	retlw	84	;'T'
  5068  3AE5  3455               	retlw	85	;'U'
  5069  3AE6  3452               	retlw	82	;'R'
  5070  3AE7  344E               	retlw	78	;'N'
  5071  3AE8  3449               	retlw	73	;'I'
  5072  3AE9  344E               	retlw	78	;'N'
  5073  3AEA  3447               	retlw	71	;'G'
  5074  3AEB  3420               	retlw	32	;' '
  5075  3AEC  344F               	retlw	79	;'O'
  5076  3AED  3446               	retlw	70	;'F'
  5077  3AEE  3446               	retlw	70	;'F'
  5078  3AEF  3400               	retlw	0
  5079                           
  5080                           	psect	stringtext45
  5081  3AF0                     __pstringtext45:	
  5082  3AF0                     STR_51:	
  5083  3AF0  3401               	retlw	1
  5084  3AF1  3420               	retlw	32	;' '
  5085  3AF2  3420               	retlw	32	;' '
  5086  3AF3  3420               	retlw	32	;' '
  5087  3AF4  3420               	retlw	32	;' '
  5088  3AF5  3420               	retlw	32	;' '
  5089  3AF6  3420               	retlw	32	;' '
  5090  3AF7  3420               	retlw	32	;' '
  5091  3AF8  3420               	retlw	32	;' '
  5092  3AF9  3400               	retlw	0
  5093                           
  5094                           	psect	stringtext46
  5095  3AFA                     __pstringtext46:	
  5096  3AFA                     STR_58:	
  5097  3AFA  3401               	retlw	1
  5098  3AFB  3420               	retlw	32	;' '
  5099  3AFC  3403               	retlw	3
  5100  3AFD  3420               	retlw	32	;' '
  5101  3AFE  3420               	retlw	32	;' '
  5102  3AFF  3420               	retlw	32	;' '
  5103  3B00  3420               	retlw	32	;' '
  5104  3B01  3420               	retlw	32	;' '
  5105  3B02  3400               	retlw	0
  5106                           
  5107                           	psect	stringtext47
  5108  3B03                     __pstringtext47:	
  5109  3B03                     STR_61:	
  5110  3B03  3420               	retlw	32	;' '
  5111  3B04  3403               	retlw	3
  5112  3B05  3420               	retlw	32	;' '
  5113  3B06  3420               	retlw	32	;' '
  5114  3B07  3420               	retlw	32	;' '
  5115  3B08  3420               	retlw	32	;' '
  5116  3B09  3420               	retlw	32	;' '
  5117  3B0A  3420               	retlw	32	;' '
  5118  3B0B  3400               	retlw	0
  5119                           
  5120                           	psect	stringtext48
  5121  3B0C                     __pstringtext48:	
  5122  3B0C                     STR_17:	
  5123  3B0C  3457               	retlw	87	;'W'
  5124  3B0D  3420               	retlw	32	;' '
  5125  3B0E  346D               	retlw	109	;'m'
  5126  3B0F  3461               	retlw	97	;'a'
  5127  3B10  346E               	retlw	110	;'n'
  5128  3B11  3475               	retlw	117	;'u'
  5129  3B12  3461               	retlw	97	;'a'
  5130  3B13  346C               	retlw	108	;'l'
  5131  3B14  3400               	retlw	0
  5132                           
  5133                           	psect	stringtext49
  5134  3B15                     __pstringtext49:	
  5135  3B15                     STR_47:	
  5136  3B15  3420               	retlw	32	;' '
  5137  3B16  3469               	retlw	105	;'i'
  5138  3B17  346E               	retlw	110	;'n'
  5139  3B18  3463               	retlw	99	;'c'
  5140  3B19  3468               	retlw	104	;'h'
  5141  3B1A  3420               	retlw	32	;' '
  5142  3B1B  3403               	retlw	3
  5143  3B1C  3400               	retlw	0
  5144                           
  5145                           	psect	stringtext50
  5146  3B1D                     __pstringtext50:	
  5147  3B1D                     STR_42:	
  5148  3B1D  3457               	retlw	87	;'W'
  5149  3B1E  3420               	retlw	32	;' '
  5150  3B1F  346D               	retlw	109	;'m'
  5151  3B20  3461               	retlw	97	;'a'
  5152  3B21  346E               	retlw	110	;'n'
  5153  3B22  342E               	retlw	46	;'.'
  5154  3B23  3403               	retlw	3
  5155  3B24  3400               	retlw	0
  5156                           
  5157                           	psect	stringtext51
  5158  3B25                     __pstringtext51:	
  5159  3B25                     STR_5:	
  5160  3B25  3401               	retlw	1
  5161  3B26  3420               	retlw	32	;' '
  5162  3B27  3420               	retlw	32	;' '
  5163  3B28  3420               	retlw	32	;' '
  5164  3B29  3420               	retlw	32	;' '
  5165  3B2A  3420               	retlw	32	;' '
  5166  3B2B  3420               	retlw	32	;' '
  5167  3B2C  3400               	retlw	0
  5168                           
  5169                           	psect	stringtext52
  5170  3B2D                     __pstringtext52:	
  5171  3B2D                     STR_24:	
  5172  3B2D  3420               	retlw	32	;' '
  5173  3B2E  346F               	retlw	111	;'o'
  5174  3B2F  3466               	retlw	102	;'f'
  5175  3B30  3466               	retlw	102	;'f'
  5176  3B31  3420               	retlw	32	;' '
  5177  3B32  3420               	retlw	32	;' '
  5178  3B33  3420               	retlw	32	;' '
  5179  3B34  3400               	retlw	0
  5180                           
  5181                           	psect	stringtext53
  5182  3B35                     __pstringtext53:	
  5183  3B35                     STR_35:	
  5184  3B35  3420               	retlw	32	;' '
  5185  3B36  3469               	retlw	105	;'i'
  5186  3B37  346E               	retlw	110	;'n'
  5187  3B38  3463               	retlw	99	;'c'
  5188  3B39  3468               	retlw	104	;'h'
  5189  3B3A  3420               	retlw	32	;' '
  5190  3B3B  3420               	retlw	32	;' '
  5191  3B3C  3400               	retlw	0
  5192                           
  5193                           	psect	stringtext54
  5194  3B3D                     __pstringtext54:	
  5195  3B3D                     STR_26:	
  5196  3B3D  3420               	retlw	32	;' '
  5197  3B3E  3461               	retlw	97	;'a'
  5198  3B3F  3475               	retlw	117	;'u'
  5199  3B40  3474               	retlw	116	;'t'
  5200  3B41  346F               	retlw	111	;'o'
  5201  3B42  3420               	retlw	32	;' '
  5202  3B43  3420               	retlw	32	;' '
  5203  3B44  3400               	retlw	0
  5204                           
  5205                           	psect	stringtext55
  5206  3B45                     __pstringtext55:	
  5207  3B45                     STR_2:	
  5208  3B45  3453               	retlw	83	;'S'
  5209  3B46  3465               	retlw	101	;'e'
  5210  3B47  346E               	retlw	110	;'n'
  5211  3B48  3473               	retlw	115	;'s'
  5212  3B49  346F               	retlw	111	;'o'
  5213  3B4A  3472               	retlw	114	;'r'
  5214  3B4B  343A               	retlw	58	;':'
  5215  3B4C  3400               	retlw	0
  5216                           
  5217                           	psect	stringtext56
  5218  3B4D                     __pstringtext56:	
  5219  3B4D                     STR_38:	
  5220  3B4D  3420               	retlw	32	;' '
  5221  3B4E  346F               	retlw	111	;'o'
  5222  3B4F  3466               	retlw	102	;'f'
  5223  3B50  3466               	retlw	102	;'f'
  5224  3B51  3420               	retlw	32	;' '
  5225  3B52  3403               	retlw	3
  5226  3B53  3400               	retlw	0
  5227                           
  5228                           	psect	stringtext57
  5229  3B54                     __pstringtext57:	
  5230  3B54                     STR_40:	
  5231  3B54  3420               	retlw	32	;' '
  5232  3B55  3461               	retlw	97	;'a'
  5233  3B56  3475               	retlw	117	;'u'
  5234  3B57  3474               	retlw	116	;'t'
  5235  3B58  346F               	retlw	111	;'o'
  5236  3B59  3403               	retlw	3
  5237  3B5A  3400               	retlw	0
  5238                           
  5239                           	psect	stringtext58
  5240  3B5B                     __pstringtext58:	
  5241  3B5B                     STR_54:	
  5242  3B5B  3474               	retlw	116	;'t'
  5243  3B5C  3465               	retlw	101	;'e'
  5244  3B5D  346D               	retlw	109	;'m'
  5245  3B5E  3470               	retlw	112	;'p'
  5246  3B5F  342E               	retlw	46	;'.'
  5247  3B60  3404               	retlw	4
  5248  3B61  3400               	retlw	0
  5249                           
  5250                           	psect	stringtext59
  5251  3B62                     __pstringtext59:	
  5252  3B62                     STR_6:	
  5253  3B62  3425               	retlw	37	;'%'
  5254  3B63  3420               	retlw	32	;' '
  5255  3B64  3420               	retlw	32	;' '
  5256  3B65  3420               	retlw	32	;' '
  5257  3B66  3420               	retlw	32	;' '
  5258  3B67  3420               	retlw	32	;' '
  5259  3B68  3400               	retlw	0
  5260                           
  5261                           	psect	stringtext60
  5262  3B69                     __pstringtext60:	
  5263  3B69                     STR_49:	
  5264  3B69  3474               	retlw	116	;'t'
  5265  3B6A  3465               	retlw	101	;'e'
  5266  3B6B  346D               	retlw	109	;'m'
  5267  3B6C  3470               	retlw	112	;'p'
  5268  3B6D  342E               	retlw	46	;'.'
  5269  3B6E  3420               	retlw	32	;' '
  5270  3B6F  3400               	retlw	0
  5271                           
  5272                           	psect	stringtext61
  5273  3B70                     __pstringtext61:	
  5274  3B70                     STR_37:	
  5275  3B70  3404               	retlw	4
  5276  3B71  3443               	retlw	67	;'C'
  5277  3B72  3468               	retlw	104	;'h'
  5278  3B73  342E               	retlw	46	;'.'
  5279  3B74  3420               	retlw	32	;' '
  5280  3B75  3400               	retlw	0
  5281                           
  5282                           	psect	stringtext62
  5283  3B76                     __pstringtext62:	
  5284  3B76                     STR_87:	
  5285  3B76  3449               	retlw	73	;'I'
  5286  3B77  344E               	retlw	78	;'N'
  5287  3B78  3420               	retlw	32	;' '
  5288  3B79  3400               	retlw	0
  5289                           
  5290                           	psect	stringtext63
  5291  3B7A                     __pstringtext63:	
  5292  3B7A                     STR_3:	
  5293  3B7A  3401               	retlw	1
  5294  3B7B  3420               	retlw	32	;' '
  5295  3B7C  3402               	retlw	2
  5296  3B7D  3400               	retlw	0
  5297                           
  5298                           	psect	stringtext64
  5299  3B7E                     __pstringtext64:	
  5300  3B7E                     STR_8:	
  5301  3B7E  3456               	retlw	86	;'V'
  5302  3B7F  3420               	retlw	32	;' '
  5303  3B80  3420               	retlw	32	;' '
  5304  3B81  3400               	retlw	0
  5305                           
  5306                           	psect	stringtext65
  5307  3B82                     __pstringtext65:	
  5308  3B82                     STR_10:	
  5309  3B82  3443               	retlw	67	;'C'
  5310  3B83  3468               	retlw	104	;'h'
  5311  3B84  3420               	retlw	32	;' '
  5312  3B85  3400               	retlw	0
  5313                           
  5314                           	psect	stringtext66
  5315  3B86                     __pstringtext66:	
  5316  3B86                     STR_55:	
  5317  3B86  3401               	retlw	1
  5318  3B87  3403               	retlw	3
  5319  3B88  3400               	retlw	0
  5320                           
  5321                           	psect	stringtext67
  5322  3B89                     __pstringtext67:	
  5323  3B89                     STR_50:	
  5324  3B89  3401               	retlw	1
  5325  3B8A  3420               	retlw	32	;' '
  5326  3B8B  3400               	retlw	0
  5327                           
  5328                           	psect	stringtext68
  5329  3B8C                     __pstringtext68:	
  5330  3B8C                     STR_12:	
  5331  3B8C  3422               	retlw	34	;'"'
  5332  3B8D  3420               	retlw	32	;' '
  5333  3B8E  3400               	retlw	0
  5334                           
  5335                           	psect	stringtext69
  5336  3B8F                     __pstringtext69:	
  5337  3B8F                     STR_11:	
  5338  3B8F  343A               	retlw	58	;':'
  5339  3B90  3420               	retlw	32	;' '
  5340  3B91  3400               	retlw	0
  5341                           
  5342                           	psect	stringtext70
  5343  3B92                     __pstringtext70:	
  5344  3B92                     STR_15:	
  5345  3B92  3420               	retlw	32	;' '
  5346  3B93  3428               	retlw	40	;'('
  5347  3B94  3400               	retlw	0
  5348                           
  5349                           	psect	stringtext71
  5350  3B95                     __pstringtext71:	
  5351  3B95                     STR_16:	
  5352  3B95  3457               	retlw	87	;'W'
  5353  3B96  3429               	retlw	41	;')'
  5354  3B97  3400               	retlw	0
  5355                           
  5356                           	psect	stringtext72
  5357  3B98                     __pstringtext72:	
  5358  3B98                     STR_4:	
  5359  3B98  3401               	retlw	1
  5360  3B99  3400               	retlw	0
  5361                           
  5362                           	psect	stringtext73
  5363  0000                     __pstringtext73:	
  5364  3B60                     
  5365                           ; #config settings
  5366  0000                     
  5367                           	psect	cinit
  5368  007C                     start_initialization:	
  5369  007C                     __initialization:		;BIGRAM
  5370                           
  5371                           ; Initialize objects allocated to BANK1
  5372  007C  0141               	movlb	1	; select bank1
  5373  007D  3187  27FF  3180   	fcall	__pidataBANK1	;fetch initializer
  5374  0080  00EF               	movwf	__pdataBANK1& (0+127)
  5375                           
  5376                           ; Initialize objects allocated to BANK3
  5377  0081  0143               	movlb	3	; select bank3
  5378  0082  3188  2001  3180   	fcall	__pidataBANK3	;fetch initializer
  5379  0085  00EF               	movwf	__pdataBANK3& (0+127)
  5380                           
  5381                           ; Initialize objects allocated to BANK4
  5382  0086  30F1               	movlw	low __pidataBANK4
  5383  0087  0084               	movwf	4
  5384  0088  30B0               	movlw	(high __pidataBANK4)| (0+128)
  5385  0089  0085               	movwf	5
  5386  008A  3060               	movlw	low __pdataBANK4
  5387  008B  0086               	movwf	6
  5388  008C  3002               	movlw	high __pdataBANK4
  5389  008D  0087               	movwf	7
  5390  008E  3000               	movlw	0
  5391  008F  00FF               	movwf	btemp+1
  5392  0090  3008               	movlw	8
  5393  0091  31B1  2161  3180   	fcall	init_ram
  5394                           
  5395                           ; Initialize objects allocated to BANK6
  5396  0094  3025               	movlw	low __pidataBANK6
  5397  0095  0084               	movwf	4
  5398  0096  30B2               	movlw	(high __pidataBANK6)| (0+128)
  5399  0097  0085               	movwf	5
  5400  0098  3020               	movlw	low __pdataBANK6
  5401  0099  0086               	movwf	6
  5402  009A  3003               	movlw	high __pdataBANK6
  5403  009B  0087               	movwf	7
  5404  009C  3000               	movlw	0
  5405  009D  00FF               	movwf	btemp+1
  5406  009E  3020               	movlw	32
  5407  009F  31B1  2161  3180   	fcall	init_ram
  5408                           
  5409                           ; Clear objects allocated to BIGRAM
  5410  00A2  304A               	movlw	low (0+10058)
  5411  00A3  0084               	movwf	4
  5412  00A4  3027               	movlw	high (0+10058)
  5413  00A5  0085               	movwf	5
  5414  00A6  30A6               	movlw	166
  5415  00A7  00FE               	movwf	btemp
  5416  00A8  3000               	movlw	0
  5417  00A9  00FF               	movwf	btemp+1
  5418  00AA  31B1  2155  3180   	fcall	clear_ram0
  5419                           
  5420                           ; Clear objects allocated to COMMON
  5421  00AD  01FC               	clrf	__pbssCOMMON& (0+127)
  5422  00AE  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5423                           
  5424                           ; Clear objects allocated to BANK0
  5425  00AF  0140               	movlb	0	; select bank0
  5426  00B0  01E8               	clrf	__pbssBANK0& (0+127)
  5427  00B1  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  5428  00B2  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  5429  00B3  01EB               	clrf	(__pbssBANK0+3)& (0+127)
  5430                           
  5431                           ; Clear objects allocated to BANK1
  5432  00B4  0141               	movlb	1	; select bank1
  5433  00B5  01ED               	clrf	__pbssBANK1& (0+127)
  5434  00B6  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  5435                           
  5436                           ; Clear objects allocated to BANK2
  5437  00B7  3063               	movlw	low __pbssBANK2
  5438  00B8  0084               	movwf	4
  5439  00B9  3001               	movlw	high __pbssBANK2
  5440  00BA  0085               	movwf	5
  5441  00BB  300D               	movlw	13
  5442  00BC  00FE               	movwf	btemp
  5443  00BD  3000               	movlw	0
  5444  00BE  00FF               	movwf	btemp+1
  5445  00BF  31B1  2155  3180   	fcall	clear_ram0
  5446                           
  5447                           ; Clear objects allocated to BANK3
  5448  00C2  30E0               	movlw	low __pbssBANK3
  5449  00C3  0084               	movwf	4
  5450  00C4  3001               	movlw	high __pbssBANK3
  5451  00C5  0085               	movwf	5
  5452  00C6  300F               	movlw	15
  5453  00C7  00FE               	movwf	btemp
  5454  00C8  3000               	movlw	0
  5455  00C9  00FF               	movwf	btemp+1
  5456  00CA  31B1  2155  3180   	fcall	clear_ram0
  5457                           
  5458                           ; Clear objects allocated to BANK4
  5459  00CD  3020               	movlw	low __pbssBANK4
  5460  00CE  0084               	movwf	4
  5461  00CF  3002               	movlw	high __pbssBANK4
  5462  00D0  0085               	movwf	5
  5463  00D1  3029               	movlw	41
  5464  00D2  00FE               	movwf	btemp
  5465  00D3  3000               	movlw	0
  5466  00D4  00FF               	movwf	btemp+1
  5467  00D5  31B1  2155  3180   	fcall	clear_ram0
  5468                           
  5469                           ; Clear objects allocated to BANK5
  5470  00D8  30A0               	movlw	low __pbssBANK5
  5471  00D9  0084               	movwf	4
  5472  00DA  3002               	movlw	high __pbssBANK5
  5473  00DB  0085               	movwf	5
  5474  00DC  3042               	movlw	66
  5475  00DD  00FE               	movwf	btemp
  5476  00DE  3000               	movlw	0
  5477  00DF  00FF               	movwf	btemp+1
  5478  00E0  31B1  2155         	fcall	clear_ram0
  5479  00E2                     end_of_initialization:	
  5480                           ;End of C runtime variable initialization code
  5481                           
  5482  00E2                     __end_of__initialization:	
  5483  00E2  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5484  00E3  0140               	movlb	0
  5485  00E4  31AE  2E27         	ljmp	_main	;jump to C main() function
  5486                           
  5487                           	psect	bssCOMMON
  5488  007C                     __pbssCOMMON:	
  5489  007C                     _curRotState:	
  5490  007C                     	ds	1
  5491  007D                     _pbState:	
  5492  007D                     	ds	1
  5493                           
  5494                           	psect	bssBANK0
  5495  0068                     __pbssBANK0:	
  5496  0068                     ___checkChannelStatus@channel:	
  5497  0068                     	ds	1
  5498  0069                     _tail:	
  5499  0069                     	ds	1
  5500  006A                     _head:	
  5501  006A                     	ds	1
  5502  006B                     _rxCount:	
  5503  006B                     	ds	1
  5504                           
  5505                           	psect	bssBANK1
  5506  00ED                     __pbssBANK1:	
  5507  00ED                     channelView@page:	
  5508  00ED                     	ds	1
  5509  00EE                     _selectedChannel:	
  5510  00EE                     	ds	1
  5511                           
  5512                           	psect	dataBANK1
  5513  00EF                     __pdataBANK1:	
  5514  00EF                     _g_screenRefresh:	
  5515  00EF                     	ds	1
  5516                           
  5517                           	psect	bssBANK2
  5518  0163                     __pbssBANK2:	
  5519  0163                     _tick100ms:	
  5520  0163                     	ds	4
  5521  0167                     _userActivity:	
  5522  0167                     	ds	4
  5523  016B                     menu@state:	
  5524  016B                     	ds	1
  5525  016C                     setup@page:	
  5526  016C                     	ds	1
  5527  016D                     channelSetup@page:	
  5528  016D                     	ds	1
  5529  016E                     statusView@page:	
  5530  016E                     	ds	1
  5531  016F                     _tick10ms:	
  5532  016F                     	ds	1
  5533                           
  5534                           	psect	bssBANK3
  5535  01E0                     __pbssBANK3:	
  5536  01E0                     getAnalogValues@avgT:	
  5537  01E0                     	ds	2
  5538  01E2                     ___checkChannelStatus@avg:	
  5539  01E2                     	ds	2
  5540  01E4                     controller@idle:	
  5541  01E4                     	ds	1
  5542  01E5                     checkSensor@state:	
  5543  01E5                     	ds	1
  5544  01E6                     ___checkChannelStatus@done:	
  5545  01E6                     	ds	1
  5546  01E7                     ___checkChannelStatus@samples:	
  5547  01E7                     	ds	1
  5548  01E8                     paging@lastDir:	
  5549  01E8                     	ds	1
  5550  01E9                     menu@sleep:	
  5551  01E9                     	ds	1
  5552  01EA                     uartReceiveISR@checksum:	
  5553  01EA                     	ds	1
  5554  01EB                     _dataReadyFlag:	
  5555  01EB                     	ds	1
  5556  01EC                     _rxOErrCount:	
  5557  01EC                     	ds	1
  5558  01ED                     _rxFErrCount:	
  5559  01ED                     	ds	1
  5560  01EE                     _rotDir:	
  5561  01EE                     	ds	1
  5562                           
  5563                           	psect	dataBANK3
  5564  01EF                     __pdataBANK3:	
  5565  01EF                     statusView@prevSensorStat:	
  5566  01EF                     	ds	1
  5567                           
  5568                           	psect	bssBANK4
  5569  0220                     __pbssBANK4:	
  5570  0220                     controller@dutyCycleTimer:	
  5571  0220                     	ds	4
  5572  0224                     checkSensor@sensorTimeout:	
  5573  0224                     	ds	4
  5574  0228                     checkSensor@sensorUpdateInterval:	
  5575  0228                     	ds	4
  5576  022C                     getAnalogValues@avgI:	
  5577  022C                     	ds	2
  5578  022E                     getAnalogValues@avgV:	
  5579  022E                     	ds	2
  5580  0230                     _dataPacket:	
  5581  0230                     	ds	15
  5582  023F                     _str:	
  5583  023F                     	ds	10
  5584                           
  5585                           	psect	dataBANK4
  5586  0260                     __pdataBANK4:	
  5587  0260                     OLED_print_xy@F7980:	
  5588  0260                     	ds	4
  5589  0264                     OLED_setCursor@F7972:	
  5590  0264                     	ds	4
  5591                           
  5592                           	psect	bssBANK5
  5593  02A0                     __pbssBANK5:	
  5594  02A0                     _errorMessageQueue:	
  5595  02A0                     	ds	10
  5596  02AA                     _virtChannels:	
  5597  02AA                     	ds	36
  5598  02CE                     uartReceiveISR@buffer:	
  5599  02CE                     	ds	20
  5600                           
  5601                           	psect	dataBANK6
  5602  0320                     __pdataBANK6:	
  5603  0320                     OLED_loadSpecialChars@F7985:	
  5604  0320                     	ds	32
  5605                           
  5606                           	psect	inittext
  5607  3161                     init_ram:	
  5608  3161  00FE               	movwf	126
  5609  3162                     initloop:	
  5610  3162  0012               	moviw fsr0++
  5611  3163  001E               	movwi fsr1++
  5612  3164  3001               	movlw	1
  5613  3165  02FE               	subwf	126,f
  5614  3166  3000               	movlw	0
  5615  3167  3BFF               	subwfb	127,f
  5616  3168  087F               	movf	127,w
  5617  3169  047E               	iorwf	126,w
  5618  316A  1903               	btfsc	3,2
  5619  316B  3400               	retlw	0
  5620  316C  2962               	goto	initloop
  5621                           
  5622                           	psect	clrtext
  5623  3155                     clear_ram0:	
  5624                           ;	Called with FSR0 containing the base address, and
  5625                           ;	btemp/btemp+1 has the size to clear
  5626                           
  5627  3155  0064               	clrwdt	;clear the watchdog before getting into this loop
  5628  3156                     clrloop0:	
  5629  3156  0180               	clrf	0	;clear RAM location pointed to by FSR
  5630  3157  3101               	addfsr 0,1
  5631  3158  3001               	movlw	1
  5632  3159  02FE               	subwf	126,f
  5633  315A  3000               	movlw	0
  5634  315B  3BFF               	subwfb	127,f
  5635  315C  087F               	movf	127,w
  5636  315D  047E               	iorwf	126,w
  5637  315E  1903               	btfsc	3,2
  5638  315F  3400               	retlw	0	;all done for this memory range, return
  5639  3160  2956               	goto	clrloop0	;have we reached the end yet?
  5640                           
  5641                           	psect	cstackBANK4
  5642  0249                     __pcstackBANK4:	
  5643  0249                     channelThing@total:	
  5644                           
  5645                           ; 4 bytes @ 0x0
  5646  0249                     	ds	4
  5647  024D                     channelThing@totalGrpA:	
  5648                           
  5649                           ; 4 bytes @ 0x4
  5650  024D                     	ds	4
  5651  0251                     channelThing@totalGrpB:	
  5652                           
  5653                           ; 4 bytes @ 0x8
  5654  0251                     	ds	4
  5655  0255                     channelThing@grpA:	
  5656                           
  5657                           ; 4 bytes @ 0xC
  5658  0255                     	ds	4
  5659  0259                     channelThing@numGrpA:	
  5660                           
  5661                           ; 1 bytes @ 0x10
  5662  0259                     	ds	1
  5663  025A                     channelThing@numGrpB:	
  5664                           
  5665                           ; 1 bytes @ 0x11
  5666  025A                     	ds	1
  5667  025B                     channelThing@grpB:	
  5668                           
  5669                           ; 4 bytes @ 0x12
  5670  025B                     	ds	4
  5671  025F                     channelThing@n:	
  5672                           
  5673                           ; 1 bytes @ 0x16
  5674  025F                     	ds	1
  5675                           
  5676                           	psect	cstackBANK3
  5677  01A0                     __pcstackBANK3:	
  5678  01A0                     qsort@stack:	
  5679                           
  5680                           ; 64 bytes @ 0x0
  5681  01A0                     	ds	64
  5682                           
  5683                           	psect	cstackBANK2
  5684  0120                     __pcstackBANK2:	
  5685  0120                     calcRequiredPower@p:	
  5686  0120                     qsort@xbuf:	
  5687                           ; 4 bytes @ 0x0
  5688                           
  5689                           
  5690                           ; 60 bytes @ 0x0
  5691  0120                     	ds	4
  5692  0124                     calcRequiredPower@Rth:	
  5693                           
  5694                           ; 4 bytes @ 0x4
  5695  0124                     	ds	4
  5696  0128                     _calcRequiredPower$2644:	
  5697                           
  5698                           ; 4 bytes @ 0x8
  5699  0128                     	ds	4
  5700  012C                     _calcRequiredPower$2645:	
  5701                           
  5702                           ; 4 bytes @ 0xC
  5703  012C                     	ds	4
  5704  0130                     _calcRequiredPower$2646:	
  5705                           
  5706                           ; 4 bytes @ 0x10
  5707  0130                     	ds	4
  5708  0134                     _calcRequiredPower$2647:	
  5709                           
  5710                           ; 4 bytes @ 0x14
  5711  0134                     	ds	4
  5712  0138                     _calcRequiredPower$2648:	
  5713                           
  5714                           ; 4 bytes @ 0x18
  5715  0138                     	ds	4
  5716  013C                     _calcRequiredPower$2649:	
  5717                           
  5718                           ; 4 bytes @ 0x1C
  5719  013C                     	ds	4
  5720  0140                     calcRequiredPower@d:	
  5721                           
  5722                           ; 4 bytes @ 0x20
  5723  0140                     	ds	4
  5724  0144                     calcRequiredPower@phi:	
  5725                           
  5726                           ; 4 bytes @ 0x24
  5727  0144                     	ds	4
  5728  0148                     calcRequiredPower@A:	
  5729                           
  5730                           ; 4 bytes @ 0x28
  5731  0148                     	ds	4
  5732  014C                     _calcRequiredPower$2643:	
  5733                           
  5734                           ; 4 bytes @ 0x2C
  5735  014C                     	ds	4
  5736  0150                     calcRequiredPower@T1:	
  5737                           
  5738                           ; 4 bytes @ 0x30
  5739  0150                     	ds	4
  5740  0154                     calcRequiredPower@T2:	
  5741                           
  5742                           ; 4 bytes @ 0x34
  5743  0154                     	ds	4
  5744  0158                     calcRequiredPower@n:	
  5745                           
  5746                           ; 1 bytes @ 0x38
  5747  0158                     	ds	5
  5748  015D                     main@sysCheckInterval:	
  5749                           
  5750                           ; 4 bytes @ 0x3D
  5751  015D                     	ds	4
  5752  0161                     main@initDone:	
  5753                           
  5754                           ; 1 bytes @ 0x41
  5755  0161                     	ds	1
  5756  0162                     main@idle:	
  5757                           
  5758                           ; 1 bytes @ 0x42
  5759  0162                     	ds	1
  5760                           
  5761                           	psect	cstackBANK1
  5762  00A0                     __pcstackBANK1:	
  5763  00A0                     ??___fladd:	
  5764  00A0                     ??___fldiv:	
  5765                           ; 1 bytes @ 0x0
  5766                           
  5767                           
  5768                           ; 1 bytes @ 0x0
  5769  00A0                     	ds	5
  5770  00A5                     ___fldiv@rem:	
  5771                           
  5772                           ; 4 bytes @ 0x5
  5773  00A5                     	ds	3
  5774  00A8                     ___fladd@signs:	
  5775                           
  5776                           ; 1 bytes @ 0x8
  5777  00A8                     	ds	1
  5778  00A9                     ___fladd@aexp:	
  5779  00A9                     ___fldiv@sign:	
  5780                           ; 1 bytes @ 0x9
  5781                           
  5782                           
  5783                           ; 1 bytes @ 0x9
  5784  00A9                     	ds	1
  5785  00AA                     ___fladd@bexp:	
  5786  00AA                     ___fldiv@new_exp:	
  5787                           ; 1 bytes @ 0xA
  5788                           
  5789                           
  5790                           ; 2 bytes @ 0xA
  5791  00AA                     	ds	1
  5792  00AB                     ___fladd@grs:	
  5793                           
  5794                           ; 1 bytes @ 0xB
  5795  00AB                     	ds	1
  5796  00AC                     ?___flsub:	
  5797  00AC                     ___flsub@a:	
  5798                           ; 4 bytes @ 0xC
  5799                           
  5800  00AC                     ___fldiv@grs:	
  5801                           ; 4 bytes @ 0xC
  5802                           
  5803                           
  5804                           ; 4 bytes @ 0xC
  5805  00AC                     	ds	4
  5806  00B0                     ___fldiv@bexp:	
  5807  00B0                     ___flsub@b:	
  5808                           ; 1 bytes @ 0x10
  5809                           
  5810                           
  5811                           ; 4 bytes @ 0x10
  5812  00B0                     	ds	1
  5813  00B1                     ___fldiv@aexp:	
  5814                           
  5815                           ; 1 bytes @ 0x11
  5816  00B1                     	ds	1
  5817  00B2                     ?___flge:	
  5818  00B2                     ?_getAnalogValues:	
  5819                           ; 1 bit 
  5820                           
  5821  00B2                     getAnalogValues@data:	
  5822                           ; 1 bytes @ 0x12
  5823                           
  5824  00B2                     ___flge@ff1:	
  5825                           ; 2 bytes @ 0x12
  5826                           
  5827                           
  5828                           ; 4 bytes @ 0x12
  5829  00B2                     	ds	2
  5830  00B4                     ?_calcRequiredPower:	
  5831  00B4                     ?___fltol:	
  5832                           ; 1 bytes @ 0x14
  5833                           
  5834  00B4                     calcRequiredPower@data:	
  5835                           ; 4 bytes @ 0x14
  5836                           
  5837  00B4                     ___fltol@f1:	
  5838                           ; 2 bytes @ 0x14
  5839                           
  5840  00B4                     _getAnalogValues$2650:	
  5841                           ; 4 bytes @ 0x14
  5842                           
  5843                           
  5844                           ; 4 bytes @ 0x14
  5845  00B4                     	ds	2
  5846  00B6                     ??_calcRequiredPower:	
  5847  00B6                     ___flge@ff2:	
  5848                           ; 1 bytes @ 0x16
  5849                           
  5850                           
  5851                           ; 4 bytes @ 0x16
  5852  00B6                     	ds	2
  5853  00B8                     ??___fltol:	
  5854  00B8                     getAnalogValues@adc:	
  5855                           ; 1 bytes @ 0x18
  5856                           
  5857                           
  5858                           ; 2 bytes @ 0x18
  5859  00B8                     	ds	2
  5860  00BA                     ??___flge:	
  5861                           
  5862                           ; 1 bytes @ 0x1A
  5863  00BA                     	ds	3
  5864  00BD                     ___fltol@sign1:	
  5865                           
  5866                           ; 1 bytes @ 0x1D
  5867  00BD                     	ds	1
  5868  00BE                     ?_checkSensor:	
  5869  00BE                     ?_spinInput:	
  5870                           ; 1 bytes @ 0x1E
  5871                           
  5872  00BE                     ___fltol@exp1:	
  5873                           ; 1 bytes @ 0x1E
  5874                           
  5875  00BE                     spinInput@input:	
  5876                           ; 1 bytes @ 0x1E
  5877                           
  5878  00BE                     checkSensor@data:	
  5879                           ; 2 bytes @ 0x1E
  5880                           
  5881                           
  5882                           ; 2 bytes @ 0x1E
  5883  00BE                     	ds	1
  5884  00BF                     ?_checkChannelStatus:	
  5885  00BF                     ?_ftoa:	
  5886                           ; 1 bytes @ 0x1F
  5887                           
  5888  00BF                     ?_itoa:	
  5889                           ; 1 bytes @ 0x1F
  5890                           
  5891  00BF                     ?_sortDC:	
  5892                           ; 1 bytes @ 0x1F
  5893                           
  5894  00BF                     ?_sortDCRev:	
  5895                           ; 2 bytes @ 0x1F
  5896                           
  5897  00BF                     ?_sortCur:	
  5898                           ; 2 bytes @ 0x1F
  5899                           
  5900  00BF                     checkChannelStatus@data:	
  5901                           ; 2 bytes @ 0x1F
  5902                           
  5903  00BF                     sortDC@cmp1:	
  5904                           ; 2 bytes @ 0x1F
  5905                           
  5906  00BF                     sortDCRev@cmp1:	
  5907                           ; 2 bytes @ 0x1F
  5908                           
  5909  00BF                     sortCur@cmp1:	
  5910                           ; 2 bytes @ 0x1F
  5911                           
  5912  00BF                     itoa@str:	
  5913                           ; 2 bytes @ 0x1F
  5914                           
  5915  00BF                     ftoa@fValue:	
  5916                           ; 2 bytes @ 0x1F
  5917                           
  5918                           
  5919                           ; 4 bytes @ 0x1F
  5920  00BF                     	ds	1
  5921  00C0                     ??_checkSensor:	
  5922  00C0                     spinInput@min:	
  5923                           ; 1 bytes @ 0x20
  5924                           
  5925                           
  5926                           ; 4 bytes @ 0x20
  5927  00C0                     	ds	1
  5928  00C1                     ??_checkChannelStatus:	
  5929  00C1                     itoa@value:	
  5930                           ; 1 bytes @ 0x21
  5931                           
  5932  00C1                     sortDC@cmp2:	
  5933                           ; 1 bytes @ 0x21
  5934                           
  5935  00C1                     sortDCRev@cmp2:	
  5936                           ; 2 bytes @ 0x21
  5937                           
  5938  00C1                     sortCur@cmp2:	
  5939                           ; 2 bytes @ 0x21
  5940                           
  5941                           
  5942                           ; 2 bytes @ 0x21
  5943  00C1                     	ds	1
  5944  00C2                     itoa@width:	
  5945                           
  5946                           ; 1 bytes @ 0x22
  5947  00C2                     	ds	1
  5948  00C3                     ??_itoa:	
  5949  00C3                     ??_sortDC:	
  5950                           ; 1 bytes @ 0x23
  5951                           
  5952  00C3                     ??_sortDCRev:	
  5953                           ; 1 bytes @ 0x23
  5954                           
  5955  00C3                     ftoa@width:	
  5956                           ; 1 bytes @ 0x23
  5957                           
  5958  00C3                     sortCur@a:	
  5959                           ; 1 bytes @ 0x23
  5960                           
  5961                           
  5962                           ; 2 bytes @ 0x23
  5963  00C3                     	ds	1
  5964  00C4                     ftoa@prec:	
  5965  00C4                     spinInput@max:	
  5966                           ; 1 bytes @ 0x24
  5967                           
  5968                           
  5969                           ; 4 bytes @ 0x24
  5970  00C4                     	ds	1
  5971  00C5                     ??_ftoa:	
  5972  00C5                     sortDC@a:	
  5973                           ; 1 bytes @ 0x25
  5974                           
  5975  00C5                     sortDCRev@a:	
  5976                           ; 1 bytes @ 0x25
  5977                           
  5978  00C5                     checkChannelStatus@adc:	
  5979                           ; 1 bytes @ 0x25
  5980                           
  5981  00C5                     sortCur@b:	
  5982                           ; 2 bytes @ 0x25
  5983                           
  5984                           
  5985                           ; 2 bytes @ 0x25
  5986  00C5                     	ds	1
  5987  00C6                     sortDC@b:	
  5988  00C6                     sortDCRev@b:	
  5989                           ; 1 bytes @ 0x26
  5990                           
  5991                           
  5992                           ; 1 bytes @ 0x26
  5993  00C6                     	ds	1
  5994  00C7                     ?_qsort:	
  5995  00C7                     ftoa@len:	
  5996                           ; 1 bytes @ 0x27
  5997                           
  5998  00C7                     qsort@nel:	
  5999                           ; 1 bytes @ 0x27
  6000                           
  6001  00C7                     _checkChannelStatus$1791:	
  6002                           ; 2 bytes @ 0x27
  6003                           
  6004                           
  6005                           ; 4 bytes @ 0x27
  6006  00C7                     	ds	1
  6007  00C8                     ftoa@sign:	
  6008  00C8                     spinInput@step:	
  6009                           ; 1 bytes @ 0x28
  6010                           
  6011                           
  6012                           ; 4 bytes @ 0x28
  6013  00C8                     	ds	1
  6014  00C9                     ftoa@intValue:	
  6015  00C9                     qsort@width:	
  6016                           ; 1 bytes @ 0x29
  6017                           
  6018                           
  6019                           ; 2 bytes @ 0x29
  6020  00C9                     	ds	1
  6021  00CA                     ?_systemCheck:	
  6022  00CA                     ftoa@w:	
  6023                           ; 1 bytes @ 0x2A
  6024                           
  6025  00CA                     systemCheck@data:	
  6026                           ; 1 bytes @ 0x2A
  6027                           
  6028                           
  6029                           ; 2 bytes @ 0x2A
  6030  00CA                     	ds	1
  6031  00CB                     ftoa@pos:	
  6032  00CB                     qsort@compar:	
  6033                           ; 1 bytes @ 0x2B
  6034                           
  6035  00CB                     _checkChannelStatus$1792:	
  6036                           ; 2 bytes @ 0x2B
  6037                           
  6038                           
  6039                           ; 4 bytes @ 0x2B
  6040  00CB                     	ds	1
  6041  00CC                     ??_systemCheck:	
  6042  00CC                     spinInput@dir:	
  6043                           ; 1 bytes @ 0x2C
  6044                           
  6045  00CC                     ftoa@str:	
  6046                           ; 1 bytes @ 0x2C
  6047                           
  6048                           
  6049                           ; 1 bytes @ 0x2C
  6050  00CC                     	ds	1
  6051  00CD                     ??_qsort:	
  6052  00CD                     ?_statusView:	
  6053                           ; 1 bytes @ 0x2D
  6054                           
  6055  00CD                     ?_channelView:	
  6056                           ; 1 bytes @ 0x2D
  6057                           
  6058  00CD                     ?_channelSetup:	
  6059                           ; 1 bytes @ 0x2D
  6060                           
  6061  00CD                     ?_setOutputPower:	
  6062                           ; 1 bytes @ 0x2D
  6063                           
  6064  00CD                     ?_setLensDia:	
  6065                           ; 1 bytes @ 0x2D
  6066                           
  6067  00CD                     ?_setup:	
  6068                           ; 1 bytes @ 0x2D
  6069                           
  6070  00CD                     ?_setDPOffset:	
  6071                           ; 1 bytes @ 0x2D
  6072                           
  6073  00CD                     ?_setSkyTemp:	
  6074                           ; 1 bytes @ 0x2D
  6075                           
  6076  00CD                     ?_setFudgeFactor:	
  6077                           ; 1 bytes @ 0x2D
  6078                           
  6079  00CD                     statusView@data:	
  6080                           ; 1 bytes @ 0x2D
  6081                           
  6082  00CD                     channelView@data:	
  6083                           ; 2 bytes @ 0x2D
  6084                           
  6085  00CD                     channelSetup@data:	
  6086                           ; 2 bytes @ 0x2D
  6087                           
  6088  00CD                     setOutputPower@data:	
  6089                           ; 2 bytes @ 0x2D
  6090                           
  6091  00CD                     setLensDia@data:	
  6092                           ; 2 bytes @ 0x2D
  6093                           
  6094  00CD                     setup@data:	
  6095                           ; 2 bytes @ 0x2D
  6096                           
  6097  00CD                     setDPOffset@data:	
  6098                           ; 2 bytes @ 0x2D
  6099                           
  6100  00CD                     setSkyTemp@data:	
  6101                           ; 2 bytes @ 0x2D
  6102                           
  6103  00CD                     setFudgeFactor@data:	
  6104                           ; 2 bytes @ 0x2D
  6105                           
  6106                           
  6107                           ; 2 bytes @ 0x2D
  6108  00CD                     	ds	2
  6109  00CF                     ??_statusView:	
  6110  00CF                     ??_channelView:	
  6111                           ; 1 bytes @ 0x2F
  6112                           
  6113  00CF                     ??_channelSetup:	
  6114                           ; 1 bytes @ 0x2F
  6115                           
  6116  00CF                     ??_setOutputPower:	
  6117                           ; 1 bytes @ 0x2F
  6118                           
  6119  00CF                     ??_setLensDia:	
  6120                           ; 1 bytes @ 0x2F
  6121                           
  6122  00CF                     ??_setup:	
  6123                           ; 1 bytes @ 0x2F
  6124                           
  6125  00CF                     ??_setDPOffset:	
  6126                           ; 1 bytes @ 0x2F
  6127                           
  6128  00CF                     ??_setSkyTemp:	
  6129                           ; 1 bytes @ 0x2F
  6130                           
  6131  00CF                     ??_setFudgeFactor:	
  6132                           ; 1 bytes @ 0x2F
  6133                           
  6134  00CF                     checkChannelStatus@samples:	
  6135                           ; 1 bytes @ 0x2F
  6136                           
  6137                           
  6138                           ; 1 bytes @ 0x2F
  6139  00CF                     	ds	1
  6140  00D0                     checkChannelStatus@avg:	
  6141  00D0                     systemCheck@str:	
  6142                           ; 2 bytes @ 0x30
  6143                           
  6144                           
  6145                           ; 3 bytes @ 0x30
  6146  00D0                     	ds	2
  6147  00D2                     qsort@vbase:	
  6148  00D2                     checkChannelStatus@current:	
  6149                           ; 1 bytes @ 0x32
  6150                           
  6151                           
  6152                           ; 4 bytes @ 0x32
  6153  00D2                     	ds	1
  6154  00D3                     systemCheck@n:	
  6155  00D3                     qsort@x:	
  6156                           ; 1 bytes @ 0x33
  6157                           
  6158  00D3                     channelSetup@chData:	
  6159                           ; 1 bytes @ 0x33
  6160                           
  6161  00D3                     setOutputPower@chData:	
  6162                           ; 2 bytes @ 0x33
  6163                           
  6164  00D3                     _setLensDia$2642:	
  6165                           ; 2 bytes @ 0x33
  6166                           
  6167                           
  6168                           ; 4 bytes @ 0x33
  6169  00D3                     	ds	1
  6170  00D4                     qsort@base:	
  6171                           
  6172                           ; 1 bytes @ 0x34
  6173  00D4                     	ds	1
  6174  00D5                     qsort@l:	
  6175  00D5                     _channelView$2641:	
  6176                           ; 2 bytes @ 0x35
  6177                           
  6178                           
  6179                           ; 4 bytes @ 0x35
  6180  00D5                     	ds	1
  6181  00D6                     checkChannelStatus@channel:	
  6182                           
  6183                           ; 1 bytes @ 0x36
  6184  00D6                     	ds	1
  6185  00D7                     checkChannelStatus@chData:	
  6186  00D7                     qsort@r:	
  6187                           ; 2 bytes @ 0x37
  6188                           
  6189                           
  6190                           ; 2 bytes @ 0x37
  6191  00D7                     	ds	2
  6192  00D9                     channelView@n:	
  6193  00D9                     qsort@s:	
  6194                           ; 1 bytes @ 0x39
  6195                           
  6196                           
  6197                           ; 2 bytes @ 0x39
  6198  00D9                     	ds	1
  6199  00DA                     ?_menu:	
  6200  00DA                     menu@data:	
  6201                           ; 1 bytes @ 0x3A
  6202                           
  6203                           
  6204                           ; 2 bytes @ 0x3A
  6205  00DA                     	ds	1
  6206  00DB                     qsort@i:	
  6207                           
  6208                           ; 2 bytes @ 0x3B
  6209  00DB                     	ds	1
  6210  00DC                     ??_menu:	
  6211                           
  6212                           ; 1 bytes @ 0x3C
  6213  00DC                     	ds	1
  6214  00DD                     qsort@j:	
  6215                           
  6216                           ; 2 bytes @ 0x3D
  6217  00DD                     	ds	2
  6218  00DF                     ?_channelThing:	
  6219  00DF                     channelThing@data:	
  6220                           ; 1 bytes @ 0x3F
  6221                           
  6222                           
  6223                           ; 2 bytes @ 0x3F
  6224  00DF                     	ds	1
  6225  00E0                     menu@page:	
  6226                           
  6227                           ; 1 bytes @ 0x40
  6228  00E0                     	ds	1
  6229  00E1                     ??_channelThing:	
  6230  00E1                     menu@pb:	
  6231                           ; 1 bytes @ 0x41
  6232                           
  6233                           
  6234                           ; 1 bytes @ 0x41
  6235  00E1                     	ds	1
  6236  00E2                     menu@timeout:	
  6237                           
  6238                           ; 1 bytes @ 0x42
  6239  00E2                     	ds	1
  6240  00E3                     menu@func:	
  6241                           
  6242                           ; 2 bytes @ 0x43
  6243  00E3                     	ds	2
  6244  00E5                     menu@nextState:	
  6245                           
  6246                           ; 1 bytes @ 0x45
  6247  00E5                     	ds	7
  6248  00EC                     ??_main:	
  6249                           
  6250                           ; 1 bytes @ 0x4C
  6251  00EC                     	ds	1
  6252                           
  6253                           	psect	cstackCOMMON
  6254  0070                     __pcstackCOMMON:	
  6255  0070                     ?_initialize:	
  6256  0070                     ?_setOLEDPower:	
  6257                           ; 1 bytes @ 0x0
  6258                           
  6259  0070                     ?_OLED_init:	
  6260                           ; 1 bytes @ 0x0
  6261                           
  6262  0070                     ?_OLED_loadSpecialChars:	
  6263                           ; 1 bytes @ 0x0
  6264                           
  6265  0070                     ?_OLED_returnHome:	
  6266                           ; 1 bytes @ 0x0
  6267                           
  6268  0070                     ?_OLED_clearDisplay:	
  6269                           ; 1 bytes @ 0x0
  6270                           
  6271  0070                     ?_setLoadSwitch:	
  6272                           ; 1 bytes @ 0x0
  6273                           
  6274  0070                     ?_controller:	
  6275                           ; 1 bytes @ 0x0
  6276                           
  6277  0070                     ?_getLastError:	
  6278                           ; 1 bytes @ 0x0
  6279                           
  6280  0070                     ?_viewErrorMessage:	
  6281                           ; 1 bytes @ 0x0
  6282                           
  6283  0070                     ?_OLED_command:	
  6284                           ; 1 bytes @ 0x0
  6285                           
  6286  0070                     ?_pushButtonISR:	
  6287                           ; 1 bytes @ 0x0
  6288                           
  6289  0070                     ?_rotISR:	
  6290                           ; 1 bytes @ 0x0
  6291                           
  6292  0070                     ?_uartReceiveISR:	
  6293                           ; 1 bytes @ 0x0
  6294                           
  6295  0070                     ?_strncpy:	
  6296                           ; 1 bytes @ 0x0
  6297                           
  6298  0070                     ?_getDataPacket:	
  6299                           ; 1 bytes @ 0x0
  6300                           
  6301  0070                     ?_returnToPage:	
  6302                           ; 1 bytes @ 0x0
  6303                           
  6304  0070                     ?_main:	
  6305                           ; 1 bytes @ 0x0
  6306                           
  6307  0070                     ?_OLED_off:	
  6308                           ; 1 bytes @ 0x0
  6309                           
  6310  0070                     ?_OLED_pulseEnable:	
  6311                           ; 1 bytes @ 0x0
  6312                           
  6313  0070                     ?_OLED_write4bits:	
  6314                           ; 1 bytes @ 0x0
  6315                           
  6316  0070                     ?_OLED_waitForReady:	
  6317                           ; 1 bytes @ 0x0
  6318                           
  6319  0070                     ?_OLED_write:	
  6320                           ; 1 bytes @ 0x0
  6321                           
  6322  0070                     ?_OLED_scrollDisplayLeft:	
  6323                           ; 1 bytes @ 0x0
  6324                           
  6325  0070                     ?_OLED_scrollDisplayRight:	
  6326                           ; 1 bytes @ 0x0
  6327                           
  6328  0070                     ?_get10msTick:	
  6329                           ; 1 bytes @ 0x0
  6330                           
  6331  0070                     ??_get10msTick:	
  6332                           ; 1 bytes @ 0x0
  6333                           
  6334  0070                     ?_reset10msTick:	
  6335                           ; 1 bytes @ 0x0
  6336                           
  6337  0070                     ??_reset10msTick:	
  6338                           ; 1 bytes @ 0x0
  6339                           
  6340  0070                     ?_ISR:	
  6341                           ; 1 bytes @ 0x0
  6342                           
  6343  0070                     ?_getRotDir:	
  6344                           ; 1 bytes @ 0x0
  6345                           
  6346  0070                     ?_getPB:	
  6347                           ; 1 bytes @ 0x0
  6348                           
  6349  0070                     ?_uartIsDataReady:	
  6350                           ; 1 bytes @ 0x0
  6351                           
  6352  0070                     ?_uartSendByte:	
  6353                           ; 1 bytes @ 0x0
  6354                           
  6355  0070                     ?_uartReset:	
  6356                           ; 1 bytes @ 0x0
  6357                           
  6358  0070                     ?_error:	
  6359                           ; 1 bytes @ 0x0
  6360                           
  6361  0070                     ?_removeLastError:	
  6362                           ; 1 bytes @ 0x0
  6363                           
  6364  0070                     ?_getLoadSwitchFault:	
  6365                           ; 1 bytes @ 0x0
  6366                           
  6367  0070                     ?i1_timeNow:	
  6368                           ; 1 bytes @ 0x0
  6369                           
  6370  0070                     strncpy@s:	
  6371                           ; 4 bytes @ 0x0
  6372                           
  6373                           
  6374                           ; 1 bytes @ 0x0
  6375  0070                     	ds	1
  6376  0071                     strncpy@n:	
  6377                           
  6378                           ; 2 bytes @ 0x1
  6379  0071                     	ds	2
  6380  0073                     ??_strncpy:	
  6381                           
  6382                           ; 1 bytes @ 0x3
  6383  0073                     	ds	1
  6384  0074                     ??_pushButtonISR:	
  6385  0074                     ??_rotISR:	
  6386                           ; 1 bytes @ 0x4
  6387                           
  6388  0074                     ??i1_timeNow:	
  6389                           ; 1 bytes @ 0x4
  6390                           
  6391  0074                     strncpy@d:	
  6392                           ; 1 bytes @ 0x4
  6393                           
  6394                           
  6395                           ; 1 bytes @ 0x4
  6396  0074                     	ds	1
  6397  0075                     pushButtonISR@time:	
  6398  0075                     strncpy@cp:	
  6399                           ; 1 bytes @ 0x5
  6400                           
  6401                           
  6402                           ; 1 bytes @ 0x5
  6403  0075                     	ds	1
  6404  0076                     ??_uartReceiveISR:	
  6405                           
  6406                           ; 1 bytes @ 0x6
  6407  0076                     	ds	5
  6408  007B                     rotISR@input:	
  6409                           
  6410                           ; 1 bytes @ 0xB
  6411  007B                     	ds	1
  6412                           
  6413                           	psect	cstackBANK0
  6414  0020                     __pcstackBANK0:	
  6415  0020                     ??_ISR:	
  6416                           
  6417                           ; 1 bytes @ 0x0
  6418  0020                     	ds	4
  6419  0024                     ?___fleq:	
  6420  0024                     ??_initialize:	
  6421                           ; 1 bit 
  6422                           
  6423  0024                     ??_setOLEDPower:	
  6424                           ; 1 bytes @ 0x4
  6425                           
  6426  0024                     ??_setLoadSwitch:	
  6427                           ; 1 bytes @ 0x4
  6428                           
  6429  0024                     ??_getLastError:	
  6430                           ; 1 bytes @ 0x4
  6431                           
  6432  0024                     ??_getDataPacket:	
  6433                           ; 1 bytes @ 0x4
  6434                           
  6435  0024                     ??_OLED_pulseEnable:	
  6436                           ; 1 bytes @ 0x4
  6437                           
  6438  0024                     ??_OLED_write4bits:	
  6439                           ; 1 bytes @ 0x4
  6440                           
  6441  0024                     ??_OLED_waitForReady:	
  6442                           ; 1 bytes @ 0x4
  6443                           
  6444  0024                     ??_getRotDir:	
  6445                           ; 1 bytes @ 0x4
  6446                           
  6447  0024                     ??_getPB:	
  6448                           ; 1 bytes @ 0x4
  6449                           
  6450  0024                     ??_uartIsDataReady:	
  6451                           ; 1 bytes @ 0x4
  6452                           
  6453  0024                     ??_uartSendByte:	
  6454                           ; 1 bytes @ 0x4
  6455                           
  6456  0024                     ??_uartReset:	
  6457                           ; 1 bytes @ 0x4
  6458                           
  6459  0024                     ??_getLoadSwitchFault:	
  6460                           ; 1 bytes @ 0x4
  6461                           
  6462  0024                     ?__Umul8_16:	
  6463                           ; 1 bytes @ 0x4
  6464                           
  6465  0024                     ?_getAnalogValue:	
  6466                           ; 2 bytes @ 0x4
  6467                           
  6468  0024                     ?___awdiv:	
  6469                           ; 2 bytes @ 0x4
  6470                           
  6471  0024                     ?___awmod:	
  6472                           ; 2 bytes @ 0x4
  6473                           
  6474  0024                     ?_timeNow:	
  6475                           ; 2 bytes @ 0x4
  6476                           
  6477  0024                     ?___lmul:	
  6478                           ; 4 bytes @ 0x4
  6479                           
  6480  0024                     OLED_waitForReady@busy:	
  6481                           ; 4 bytes @ 0x4
  6482                           
  6483  0024                     uartSendByte@s:	
  6484                           ; 1 bytes @ 0x4
  6485                           
  6486  0024                     setLoadSwitch@state:	
  6487                           ; 1 bytes @ 0x4
  6488                           
  6489  0024                     setOLEDPower@state:	
  6490                           ; 1 bytes @ 0x4
  6491                           
  6492  0024                     __Umul8_16@multiplicand:	
  6493                           ; 1 bytes @ 0x4
  6494                           
  6495  0024                     ___awdiv@divisor:	
  6496                           ; 1 bytes @ 0x4
  6497                           
  6498  0024                     ___awmod@divisor:	
  6499                           ; 2 bytes @ 0x4
  6500                           
  6501  0024                     ___lmul@multiplier:	
  6502                           ; 2 bytes @ 0x4
  6503                           
  6504  0024                     ___fleq@ff1:	
  6505                           ; 4 bytes @ 0x4
  6506                           
  6507                           
  6508                           ; 4 bytes @ 0x4
  6509  0024                     	ds	1
  6510  0025                     getRotDir@ret:	
  6511  0025                     getPB@ret:	
  6512                           ; 1 bytes @ 0x5
  6513                           
  6514  0025                     uartIsDataReady@ret:	
  6515                           ; 1 bytes @ 0x5
  6516                           
  6517                           
  6518                           ; 1 bytes @ 0x5
  6519  0025                     	ds	1
  6520  0026                     ??__Umul8_16:	
  6521  0026                     ??_getAnalogValue:	
  6522                           ; 1 bytes @ 0x6
  6523                           
  6524  0026                     OLED_write4bits@value:	
  6525                           ; 1 bytes @ 0x6
  6526                           
  6527  0026                     ___awdiv@dividend:	
  6528                           ; 1 bytes @ 0x6
  6529                           
  6530  0026                     ___awmod@dividend:	
  6531                           ; 2 bytes @ 0x6
  6532                           
  6533                           
  6534                           ; 2 bytes @ 0x6
  6535  0026                     	ds	1
  6536  0027                     ?_OLED_send:	
  6537  0027                     OLED_send@mode:	
  6538                           ; 1 bytes @ 0x7
  6539                           
  6540  0027                     getAnalogValue@channel:	
  6541                           ; 1 bytes @ 0x7
  6542                           
  6543                           
  6544                           ; 1 bytes @ 0x7
  6545  0027                     	ds	1
  6546  0028                     ??_timeNow:	
  6547  0028                     ??_OLED_send:	
  6548                           ; 1 bytes @ 0x8
  6549                           
  6550  0028                     ??___awdiv:	
  6551                           ; 1 bytes @ 0x8
  6552                           
  6553  0028                     ??___awmod:	
  6554                           ; 1 bytes @ 0x8
  6555                           
  6556  0028                     ?_timeSince:	
  6557                           ; 1 bytes @ 0x8
  6558                           
  6559  0028                     __Umul8_16@product:	
  6560                           ; 4 bytes @ 0x8
  6561                           
  6562  0028                     timeSince@since:	
  6563                           ; 2 bytes @ 0x8
  6564                           
  6565  0028                     ___lmul@multiplicand:	
  6566                           ; 4 bytes @ 0x8
  6567                           
  6568  0028                     ___fleq@ff2:	
  6569                           ; 4 bytes @ 0x8
  6570                           
  6571                           
  6572                           ; 4 bytes @ 0x8
  6573  0028                     	ds	1
  6574  0029                     OLED_send@value:	
  6575  0029                     ___awdiv@counter:	
  6576                           ; 1 bytes @ 0x9
  6577                           
  6578  0029                     ___awmod@counter:	
  6579                           ; 1 bytes @ 0x9
  6580                           
  6581                           
  6582                           ; 1 bytes @ 0x9
  6583  0029                     	ds	1
  6584  002A                     ??_OLED_command:	
  6585  002A                     ??_OLED_write:	
  6586                           ; 1 bytes @ 0xA
  6587                           
  6588  002A                     OLED_command@value:	
  6589                           ; 1 bytes @ 0xA
  6590                           
  6591  002A                     OLED_write@value:	
  6592                           ; 1 bytes @ 0xA
  6593                           
  6594  002A                     ___awdiv@sign:	
  6595                           ; 1 bytes @ 0xA
  6596                           
  6597  002A                     ___awmod@sign:	
  6598                           ; 1 bytes @ 0xA
  6599                           
  6600  002A                     __Umul8_16@word_mpld:	
  6601                           ; 1 bytes @ 0xA
  6602                           
  6603                           
  6604                           ; 2 bytes @ 0xA
  6605  002A                     	ds	1
  6606  002B                     ??_OLED_init:	
  6607  002B                     ??_OLED_loadSpecialChars:	
  6608                           ; 1 bytes @ 0xB
  6609                           
  6610  002B                     ??_OLED_returnHome:	
  6611                           ; 1 bytes @ 0xB
  6612                           
  6613  002B                     ??_OLED_clearDisplay:	
  6614                           ; 1 bytes @ 0xB
  6615                           
  6616  002B                     ?_paging:	
  6617                           ; 1 bytes @ 0xB
  6618                           
  6619  002B                     ??_OLED_off:	
  6620                           ; 1 bytes @ 0xB
  6621                           
  6622  002B                     ??_OLED_scrollDisplayLeft:	
  6623                           ; 1 bytes @ 0xB
  6624                           
  6625  002B                     ??_OLED_scrollDisplayRight:	
  6626                           ; 1 bytes @ 0xB
  6627                           
  6628  002B                     ??_error:	
  6629                           ; 1 bytes @ 0xB
  6630                           
  6631  002B                     ??_removeLastError:	
  6632                           ; 1 bytes @ 0xB
  6633                           
  6634  002B                     paging@lastPage:	
  6635                           ; 1 bytes @ 0xB
  6636                           
  6637  002B                     ___awdiv@quotient:	
  6638                           ; 1 bytes @ 0xB
  6639                           
  6640                           
  6641                           ; 2 bytes @ 0xB
  6642  002B                     	ds	1
  6643  002C                     ??_timeSince:	
  6644  002C                     ??_paging:	
  6645                           ; 1 bytes @ 0xC
  6646                           
  6647  002C                     ??___lmul:	
  6648                           ; 1 bytes @ 0xC
  6649                           
  6650  002C                     ??___fleq:	
  6651                           ; 1 bytes @ 0xC
  6652                           
  6653  002C                     error@error:	
  6654                           ; 1 bytes @ 0xC
  6655                           
  6656  002C                     __Umul8_16@multiplier:	
  6657                           ; 1 bytes @ 0xC
  6658                           
  6659  002C                     ___lmul@product:	
  6660                           ; 1 bytes @ 0xC
  6661                           
  6662  002C                     OLED_loadSpecialChars@special:	
  6663                           ; 4 bytes @ 0xC
  6664                           
  6665                           
  6666                           ; 32 bytes @ 0xC
  6667  002C                     	ds	1
  6668  002D                     ?___bmul:	
  6669  002D                     ___bmul@multiplicand:	
  6670                           ; 1 bytes @ 0xD
  6671                           
  6672                           
  6673                           ; 1 bytes @ 0xD
  6674  002D                     	ds	1
  6675  002E                     ??___bmul:	
  6676  002E                     paging@currentPage:	
  6677                           ; 1 bytes @ 0xE
  6678                           
  6679                           
  6680                           ; 1 bytes @ 0xE
  6681  002E                     	ds	1
  6682  002F                     paging@dir:	
  6683  002F                     ___bmul@product:	
  6684                           ; 1 bytes @ 0xF
  6685                           
  6686                           
  6687                           ; 1 bytes @ 0xF
  6688  002F                     	ds	1
  6689  0030                     ?_ema:	
  6690  0030                     paging@n:	
  6691                           ; 2 bytes @ 0x10
  6692                           
  6693  0030                     ___bmul@multiplier:	
  6694                           ; 1 bytes @ 0x10
  6695                           
  6696  0030                     ema@in:	
  6697                           ; 1 bytes @ 0x10
  6698                           
  6699                           
  6700                           ; 2 bytes @ 0x10
  6701  0030                     	ds	1
  6702  0031                     ?_memcpy:	
  6703  0031                     ?_OLED_print_xy:	
  6704                           ; 1 bytes @ 0x11
  6705                           
  6706  0031                     ?_setChannelSwitch:	
  6707                           ; 1 bytes @ 0x11
  6708                           
  6709  0031                     ?_swap:	
  6710                           ; 1 bytes @ 0x11
  6711                           
  6712  0031                     ?___wmul:	
  6713                           ; 1 bytes @ 0x11
  6714                           
  6715  0031                     OLED_print_xy@row:	
  6716                           ; 2 bytes @ 0x11
  6717                           
  6718  0031                     setChannelSwitch@state:	
  6719                           ; 1 bytes @ 0x11
  6720                           
  6721  0031                     memcpy@s1:	
  6722                           ; 1 bytes @ 0x11
  6723                           
  6724  0031                     ___wmul@multiplier:	
  6725                           ; 1 bytes @ 0x11
  6726                           
  6727  0031                     swap@len:	
  6728                           ; 2 bytes @ 0x11
  6729                           
  6730                           
  6731                           ; 2 bytes @ 0x11
  6732  0031                     	ds	1
  6733  0032                     ??_setChannelSwitch:	
  6734  0032                     OLED_print_xy@s:	
  6735                           ; 1 bytes @ 0x12
  6736                           
  6737  0032                     ema@average:	
  6738                           ; 2 bytes @ 0x12
  6739                           
  6740  0032                     memcpy@n:	
  6741                           ; 2 bytes @ 0x12
  6742                           
  6743                           
  6744                           ; 2 bytes @ 0x12
  6745  0032                     	ds	1
  6746  0033                     swap@s1:	
  6747  0033                     ___wmul@multiplicand:	
  6748                           ; 1 bytes @ 0x13
  6749                           
  6750                           
  6751                           ; 2 bytes @ 0x13
  6752  0033                     	ds	1
  6753  0034                     ??_memcpy:	
  6754  0034                     ??_OLED_print_xy:	
  6755                           ; 1 bytes @ 0x14
  6756                           
  6757  0034                     setChannelSwitch@channel:	
  6758                           ; 1 bytes @ 0x14
  6759                           
  6760  0034                     swap@s2:	
  6761                           ; 1 bytes @ 0x14
  6762                           
  6763  0034                     timeSince@now:	
  6764                           ; 1 bytes @ 0x14
  6765                           
  6766  0034                     ema@alpha:	
  6767                           ; 4 bytes @ 0x14
  6768                           
  6769                           
  6770                           ; 4 bytes @ 0x14
  6771  0034                     	ds	1
  6772  0035                     ??___wmul:	
  6773  0035                     ??_swap:	
  6774                           ; 1 bytes @ 0x15
  6775                           
  6776  0035                     memcpy@tmp:	
  6777                           ; 1 bytes @ 0x15
  6778                           
  6779  0035                     ___wmul@product:	
  6780                           ; 1 bytes @ 0x15
  6781                           
  6782  0035                     OLED_print_xy@row_offsets:	
  6783                           ; 2 bytes @ 0x15
  6784                           
  6785                           
  6786                           ; 4 bytes @ 0x15
  6787  0035                     	ds	1
  6788  0036                     swap@c:	
  6789  0036                     memcpy@d1:	
  6790                           ; 1 bytes @ 0x16
  6791                           
  6792                           
  6793                           ; 1 bytes @ 0x16
  6794  0036                     	ds	1
  6795  0037                     ?_initGlobalData:	
  6796  0037                     ??_returnToPage:	
  6797                           ; 1 bytes @ 0x17
  6798                           
  6799  0037                     ?_getNextState:	
  6800                           ; 1 bytes @ 0x17
  6801                           
  6802  0037                     ?_getStateFunc:	
  6803                           ; 1 bytes @ 0x17
  6804                           
  6805  0037                     ?___xxtofl:	
  6806                           ; 2 bytes @ 0x17
  6807                           
  6808  0037                     getNextState@intState:	
  6809                           ; 4 bytes @ 0x17
  6810                           
  6811  0037                     memcpy@d:	
  6812                           ; 1 bytes @ 0x17
  6813                           
  6814  0037                     initGlobalData@data:	
  6815                           ; 1 bytes @ 0x17
  6816                           
  6817  0037                     ___xxtofl@val:	
  6818                           ; 2 bytes @ 0x17
  6819                           
  6820                           
  6821                           ; 4 bytes @ 0x17
  6822  0037                     	ds	1
  6823  0038                     ??_controller:	
  6824  0038                     ??_ema:	
  6825                           ; 1 bytes @ 0x18
  6826                           
  6827  0038                     getNextState@pb:	
  6828                           ; 1 bytes @ 0x18
  6829                           
  6830  0038                     memcpy@s:	
  6831                           ; 1 bytes @ 0x18
  6832                           
  6833                           
  6834                           ; 1 bytes @ 0x18
  6835  0038                     	ds	1
  6836  0039                     ??_initGlobalData:	
  6837  0039                     ??_getStateFunc:	
  6838                           ; 1 bytes @ 0x19
  6839                           
  6840  0039                     OLED_print_xy@col:	
  6841                           ; 1 bytes @ 0x19
  6842                           
  6843  0039                     getNextState@timeout:	
  6844                           ; 1 bytes @ 0x19
  6845                           
  6846  0039                     returnToPage@page:	
  6847                           ; 1 bytes @ 0x19
  6848                           
  6849                           
  6850                           ; 1 bytes @ 0x19
  6851  0039                     	ds	1
  6852  003A                     ??_viewErrorMessage:	
  6853  003A                     ??_getNextState:	
  6854                           ; 1 bytes @ 0x1A
  6855                           
  6856  003A                     returnToPage@n:	
  6857                           ; 1 bytes @ 0x1A
  6858                           
  6859                           
  6860                           ; 1 bytes @ 0x1A
  6861  003A                     	ds	1
  6862  003B                     ??___xxtofl:	
  6863                           
  6864                           ; 1 bytes @ 0x1B
  6865  003B                     	ds	1
  6866  003C                     viewErrorMessage@errorCode:	
  6867  003C                     getStateFunc@state:	
  6868                           ; 1 bytes @ 0x1C
  6869                           
  6870                           
  6871                           ; 1 bytes @ 0x1C
  6872  003C                     	ds	1
  6873  003D                     initGlobalData@n:	
  6874  003D                     getStateFunc@n:	
  6875                           ; 1 bytes @ 0x1D
  6876                           
  6877  003D                     getNextState@state:	
  6878                           ; 1 bytes @ 0x1D
  6879                           
  6880  003D                     controller@tick:	
  6881                           ; 1 bytes @ 0x1D
  6882                           
  6883                           
  6884                           ; 4 bytes @ 0x1D
  6885  003D                     	ds	1
  6886  003E                     getNextState@n:	
  6887  003E                     initGlobalData@chData:	
  6888                           ; 1 bytes @ 0x1E
  6889                           
  6890                           
  6891                           ; 2 bytes @ 0x1E
  6892  003E                     	ds	1
  6893  003F                     ___xxtofl@sign:	
  6894                           
  6895                           ; 1 bytes @ 0x1F
  6896  003F                     	ds	1
  6897  0040                     ___xxtofl@exp:	
  6898  0040                     ema@tmp0:	
  6899                           ; 1 bytes @ 0x20
  6900                           
  6901                           
  6902                           ; 4 bytes @ 0x20
  6903  0040                     	ds	1
  6904  0041                     controller@n:	
  6905  0041                     ___xxtofl@arg:	
  6906                           ; 1 bytes @ 0x21
  6907                           
  6908                           
  6909                           ; 4 bytes @ 0x21
  6910  0041                     	ds	4
  6911  0045                     ?___flmul:	
  6912  0045                     ___flmul@b:	
  6913                           ; 4 bytes @ 0x25
  6914                           
  6915                           
  6916                           ; 4 bytes @ 0x25
  6917  0045                     	ds	4
  6918  0049                     ___flmul@a:	
  6919                           
  6920                           ; 4 bytes @ 0x29
  6921  0049                     	ds	3
  6922  004C                     OLED_loadSpecialChars@n:	
  6923                           
  6924                           ; 1 bytes @ 0x2C
  6925  004C                     	ds	1
  6926  004D                     ??___flmul:	
  6927                           
  6928                           ; 1 bytes @ 0x2D
  6929  004D                     	ds	5
  6930  0052                     ___flmul@sign:	
  6931                           
  6932                           ; 1 bytes @ 0x32
  6933  0052                     	ds	1
  6934  0053                     ___flmul@aexp:	
  6935                           
  6936                           ; 1 bytes @ 0x33
  6937  0053                     	ds	1
  6938  0054                     ___flmul@grs:	
  6939                           
  6940                           ; 4 bytes @ 0x34
  6941  0054                     	ds	4
  6942  0058                     ___flmul@bexp:	
  6943                           
  6944                           ; 1 bytes @ 0x38
  6945  0058                     	ds	1
  6946  0059                     ___flmul@prod:	
  6947                           
  6948                           ; 4 bytes @ 0x39
  6949  0059                     	ds	4
  6950  005D                     ___flmul@temp:	
  6951                           
  6952                           ; 2 bytes @ 0x3D
  6953  005D                     	ds	2
  6954  005F                     ?___fladd:	
  6955  005F                     ?___fldiv:	
  6956                           ; 4 bytes @ 0x3F
  6957                           
  6958  005F                     ___fladd@b:	
  6959                           ; 4 bytes @ 0x3F
  6960                           
  6961  005F                     ___fldiv@a:	
  6962                           ; 4 bytes @ 0x3F
  6963                           
  6964                           
  6965                           ; 4 bytes @ 0x3F
  6966  005F                     	ds	4
  6967  0063                     ___fladd@a:	
  6968  0063                     ___fldiv@b:	
  6969                           ; 4 bytes @ 0x43
  6970                           
  6971                           
  6972                           ; 4 bytes @ 0x43
  6973  0063                     	ds	4
  6974  0067                     ??_getAnalogValues:	
  6975  0067                     ??_spinInput:	
  6976                           ; 1 bytes @ 0x47
  6977                           
  6978  0067                     ??_sortCur:	
  6979                           ; 1 bytes @ 0x47
  6980                           
  6981  0067                     ??___flsub:	
  6982                           ; 1 bytes @ 0x47
  6983                           
  6984  0067                     checkSensor@dp:	
  6985                           ; 1 bytes @ 0x47
  6986                           
  6987  0067                     _qsort$2692:	
  6988                           ; 1 bytes @ 0x47
  6989                           
  6990                           
  6991                           ; 1 bytes @ 0x47
  6992  0067                     	ds	1
  6993                           
  6994                           	psect	maintext
  6995  2E27                     __pmaintext:	
  6996 ;;
  6997 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6998 ;;
  6999 ;; *************** function _main *****************
  7000 ;; Defined at:
  7001 ;;		line 28 in file "main.c"
  7002 ;; Parameters:    Size  Location     Type
  7003 ;;		None
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  str            10    0        unsigned char [10]
  7006 ;;  sysCheckInte    4   61[BANK2 ] unsigned long 
  7007 ;;  since           4    0        unsigned long 
  7008 ;;  tick            4    0        unsigned long 
  7009 ;;  idle            1   66[BANK2 ] unsigned char 
  7010 ;;  initDone        1   65[BANK2 ] unsigned char 
  7011 ;;  test            1    0        unsigned char 
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  1    wreg      void 
  7014 ;; Registers used:
  7015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7016 ;; Tracked objects:
  7017 ;;		On entry : B3F/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7022 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7023 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7024 ;;      Totals:         0       0       1       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7025 ;;Total ram usage:        8 bytes
  7026 ;; Hardware stack levels required when called:   11
  7027 ;; This function calls:
  7028 ;;		_OLED_clearDisplay
  7029 ;;		_OLED_init
  7030 ;;		_OLED_loadSpecialChars
  7031 ;;		_OLED_returnHome
  7032 ;;		_calcRequiredPower
  7033 ;;		_channelThing
  7034 ;;		_checkChannelStatus
  7035 ;;		_checkSensor
  7036 ;;		_controller
  7037 ;;		_getAnalogValues
  7038 ;;		_getLastError
  7039 ;;		_initGlobalData
  7040 ;;		_initialize
  7041 ;;		_menu
  7042 ;;		_setLoadSwitch
  7043 ;;		_setOLEDPower
  7044 ;;		_systemCheck
  7045 ;;		_timeNow
  7046 ;;		_timeSince
  7047 ;;		_viewErrorMessage
  7048 ;; This function is called by:
  7049 ;;		Startup code after reset
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           
  7054                           ;psect for function _main
  7055  2E27                     _main:	
  7056                           
  7057                           ;main.c: 30:  uint32_t tick, since, sysCheckInterval = 0;
  7058                           
  7059                           ;incstack = 0
  7060                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7061  2E27  3000               	movlw	0
  7062  2E28  0142               	movlb	2	; select bank2
  7063  2E29  00E0               	movwf	(main@sysCheckInterval+3)^(0+256)
  7064  2E2A  3000               	movlw	0
  7065  2E2B  00DF               	movwf	(main@sysCheckInterval+2)^(0+256)
  7066  2E2C  3000               	movlw	0
  7067  2E2D  00DE               	movwf	(main@sysCheckInterval+1)^(0+256)
  7068  2E2E  3000               	movlw	0
  7069  2E2F  00DD               	movwf	main@sysCheckInterval^(0+256)
  7070                           
  7071                           ;main.c: 31:  uint8_t idle = 1;
  7072  2E30  01E2               	clrf	main@idle^(0+256)
  7073  2E31  0AE2               	incf	main@idle^(0+256),f
  7074                           
  7075                           ;main.c: 32:  uint8_t initDone = 0;
  7076  2E32  01E1               	clrf	main@initDone^(0+256)
  7077                           
  7078                           ;main.c: 34:  char str[10];;main.c: 36:  initialize();
  7079  2E33  31B6  2600  31AE   	fcall	_initialize
  7080                           
  7081                           ;main.c: 37:  setOLEDPower(1);
  7082  2E36  3001               	movlw	1
  7083  2E37  31B0  20E9  31AE   	fcall	_setOLEDPower
  7084                           
  7085                           ;main.c: 38:  OLED_init();
  7086  2E3A  31AA  22F3  31AE   	fcall	_OLED_init
  7087                           
  7088                           ;main.c: 39:  OLED_loadSpecialChars();
  7089  2E3D  31B2  2245  31AE   	fcall	_OLED_loadSpecialChars
  7090                           
  7091                           ;main.c: 40:  OLED_returnHome();
  7092  2E40  3198  2003  31AE   	fcall	_OLED_returnHome
  7093                           
  7094                           ;main.c: 41:  OLED_clearDisplay();
  7095  2E43  31B0  20D5  31AE   	fcall	_OLED_clearDisplay
  7096                           
  7097                           ;main.c: 42:  initGlobalData(&data);
  7098  2E46  304A               	movlw	74
  7099  2E47  0140               	movlb	0	; select bank0
  7100  2E48  00B7               	movwf	initGlobalData@data
  7101  2E49  3027               	movlw	39
  7102  2E4A  00B8               	movwf	initGlobalData@data+1
  7103  2E4B  31AE  26EC  31AE   	fcall	_initGlobalData
  7104                           
  7105                           ;main.c: 43:  setLoadSwitch(1);
  7106  2E4E  3001               	movlw	1
  7107  2E4F  31B0  20D9  31AE   	fcall	_setLoadSwitch
  7108  2E52                     l117:	
  7109                           ;main.c: 47:  while (1) {
  7110                           
  7111  2E52  0064               	clrwdt	;# 
  7112                           
  7113                           ;main.c: 52:   getAnalogValues(&data);
  7114  2E53  304A               	movlw	74
  7115  2E54  0141               	movlb	1	; select bank1
  7116  2E55  00B2               	movwf	getAnalogValues@data^(0+128)
  7117  2E56  3027               	movlw	39
  7118  2E57  00B3               	movwf	(getAnalogValues@data^(0+128)+1)
  7119  2E58  3198  20CF  31AE   	fcall	_getAnalogValues
  7120                           
  7121                           ;main.c: 54:   if (timeSince(sysCheckInterval) > 5) {
  7122  2E5B  0142               	movlb	2	; select bank2
  7123  2E5C  0860               	movf	(main@sysCheckInterval+3)^(0+256),w
  7124  2E5D  0140               	movlb	0	; select bank0
  7125  2E5E  00AB               	movwf	timeSince@since+3
  7126  2E5F  0142               	movlb	2	; select bank2
  7127  2E60  085F               	movf	(main@sysCheckInterval+2)^(0+256),w
  7128  2E61  0140               	movlb	0	; select bank0
  7129  2E62  00AA               	movwf	timeSince@since+2
  7130  2E63  0142               	movlb	2	; select bank2
  7131  2E64  085E               	movf	(main@sysCheckInterval+1)^(0+256),w
  7132  2E65  0140               	movlb	0	; select bank0
  7133  2E66  00A9               	movwf	timeSince@since+1
  7134  2E67  0142               	movlb	2	; select bank2
  7135  2E68  085D               	movf	main@sysCheckInterval^(0+256),w
  7136  2E69  0140               	movlb	0	; select bank0
  7137  2E6A  00A8               	movwf	timeSince@since
  7138  2E6B  31A8  2002  31AE   	fcall	_timeSince
  7139  2E6E  0140               	movlb	0	; select bank0
  7140  2E6F  082B               	movf	?_timeSince+3,w
  7141  2E70  1D03               	btfss	3,2
  7142  2E71  2E7C               	goto	l8462
  7143  2E72  082A               	movf	?_timeSince+2,w
  7144  2E73  1D03               	btfss	3,2
  7145  2E74  2E7C               	goto	l8462
  7146  2E75  0829               	movf	?_timeSince+1,w
  7147  2E76  1D03               	btfss	3,2
  7148  2E77  2E7C               	goto	l8462
  7149  2E78  3006               	movlw	6
  7150  2E79  0228               	subwf	?_timeSince,w
  7151  2E7A  1C03               	btfss	3,0
  7152  2E7B  2E97               	goto	l8466
  7153  2E7C                     l8462:	
  7154                           
  7155                           ;main.c: 55:    sysCheckInterval = timeNow();
  7156  2E7C  31B1  216D  31AE   	fcall	_timeNow
  7157  2E7F  0140               	movlb	0	; select bank0
  7158  2E80  0827               	movf	?_timeNow+3,w
  7159  2E81  0142               	movlb	2	; select bank2
  7160  2E82  00E0               	movwf	(main@sysCheckInterval+3)^(0+256)
  7161  2E83  0140               	movlb	0	; select bank0
  7162  2E84  0826               	movf	?_timeNow+2,w
  7163  2E85  0142               	movlb	2	; select bank2
  7164  2E86  00DF               	movwf	(main@sysCheckInterval+2)^(0+256)
  7165  2E87  0140               	movlb	0	; select bank0
  7166  2E88  0825               	movf	?_timeNow+1,w
  7167  2E89  0142               	movlb	2	; select bank2
  7168  2E8A  00DE               	movwf	(main@sysCheckInterval+1)^(0+256)
  7169  2E8B  0140               	movlb	0	; select bank0
  7170  2E8C  0824               	movf	?_timeNow,w
  7171  2E8D  0142               	movlb	2	; select bank2
  7172  2E8E  00DD               	movwf	main@sysCheckInterval^(0+256)
  7173                           
  7174                           ;main.c: 56:    systemCheck(&data);
  7175  2E8F  304A               	movlw	74
  7176  2E90  0141               	movlb	1	; select bank1
  7177  2E91  00CA               	movwf	systemCheck@data^(0+128)
  7178  2E92  3027               	movlw	39
  7179  2E93  00CB               	movwf	(systemCheck@data^(0+128)+1)
  7180  2E94  319C  2441  31AE   	fcall	_systemCheck
  7181  2E97                     l8466:	
  7182                           
  7183                           ;main.c: 60:   if (checkSensor(&data)) {
  7184  2E97  304A               	movlw	74
  7185  2E98  0141               	movlb	1	; select bank1
  7186  2E99  00BE               	movwf	checkSensor@data^(0+128)
  7187  2E9A  3027               	movlw	39
  7188  2E9B  00BF               	movwf	(checkSensor@data^(0+128)+1)
  7189  2E9C  31A4  24D9  31AE   	fcall	_checkSensor
  7190  2E9F  3A00               	xorlw	0
  7191  2EA0  1903               	skipnz
  7192  2EA1  2EAD               	goto	l8472
  7193                           
  7194                           ;main.c: 62:    calcRequiredPower(&data);
  7195  2EA2  304A               	movlw	74
  7196  2EA3  0141               	movlb	1	; select bank1
  7197  2EA4  00B4               	movwf	calcRequiredPower@data^(0+128)
  7198  2EA5  3027               	movlw	39
  7199  2EA6  00B5               	movwf	(calcRequiredPower@data^(0+128)+1)
  7200  2EA7  3180  20E6  31AE   	fcall	_calcRequiredPower
  7201                           
  7202                           ;main.c: 63:    initDone = 1;
  7203  2EAA  0142               	movlb	2	; select bank2
  7204  2EAB  01E1               	clrf	main@initDone^(0+256)
  7205  2EAC  0AE1               	incf	main@initDone^(0+256),f
  7206  2EAD                     l8472:	
  7207                           
  7208                           ;main.c: 67:   if (idle) {
  7209  2EAD  0142               	movlb	2	; select bank2
  7210  2EAE  0862               	movf	main@idle^(0+256),w
  7211  2EAF  1903               	btfsc	3,2
  7212  2EB0  2EC7               	goto	l8480
  7213                           
  7214                           ;main.c: 68:    if (initDone) {
  7215  2EB1  0861               	movf	main@initDone^(0+256),w
  7216  2EB2  1903               	btfsc	3,2
  7217  2EB3  2ECF               	goto	l8482
  7218                           
  7219                           ;main.c: 71:     checkChannelStatus(&data);
  7220  2EB4  304A               	movlw	74
  7221  2EB5  0141               	movlb	1	; select bank1
  7222  2EB6  00BF               	movwf	checkChannelStatus@data^(0+128)
  7223  2EB7  3027               	movlw	39
  7224  2EB8  00C0               	movwf	(checkChannelStatus@data^(0+128)+1)
  7225  2EB9  3194  2405  31AE   	fcall	_checkChannelStatus
  7226                           
  7227                           ;main.c: 72:     channelThing(&data);
  7228  2EBC  304A               	movlw	74
  7229  2EBD  0141               	movlb	1	; select bank1
  7230  2EBE  00DF               	movwf	channelThing@data^(0+128)
  7231  2EBF  3027               	movlw	39
  7232  2EC0  00E0               	movwf	(channelThing@data^(0+128)+1)
  7233  2EC1  318B  23C8  31AE   	fcall	_channelThing
  7234                           
  7235                           ;main.c: 73:     idle = 0;
  7236  2EC4  0142               	movlb	2	; select bank2
  7237  2EC5  01E2               	clrf	main@idle^(0+256)
  7238  2EC6  2ECF               	goto	l8482
  7239  2EC7                     l8480:	
  7240                           
  7241                           ;main.c: 77:    idle = controller();
  7242  2EC7  31AC  2414  31AE   	fcall	_controller
  7243  2ECA  0141               	movlb	1	; select bank1
  7244  2ECB  00EC               	movwf	??_main^(0+128)
  7245  2ECC  086C               	movf	??_main^(0+128),w
  7246  2ECD  0142               	movlb	2	; select bank2
  7247  2ECE  00E2               	movwf	main@idle^(0+256)
  7248  2ECF                     l8482:	
  7249                           
  7250                           ;main.c: 80:   if (getLastError() != NO_ERROR)
  7251  2ECF  3187  27F1  31AE   	fcall	_getLastError
  7252  2ED2  3A00               	xorlw	0
  7253  2ED3  1903               	skipnz
  7254  2ED4  2ED9               	goto	l8486
  7255                           
  7256                           ;main.c: 81:    viewErrorMessage();
  7257  2ED5  31A0  20AA  31AE   	fcall	_viewErrorMessage
  7258  2ED8  2EE1               	goto	l8488
  7259  2ED9                     l8486:	
  7260                           
  7261                           ;main.c: 83:    menu(&data);
  7262  2ED9  304A               	movlw	74
  7263  2EDA  0141               	movlb	1	; select bank1
  7264  2EDB  00DA               	movwf	menu@data^(0+128)
  7265  2EDC  3027               	movlw	39
  7266  2EDD  00DB               	movwf	(menu@data^(0+128)+1)
  7267  2EDE  3188  2034  31AE   	fcall	_menu
  7268  2EE1                     l8488:	
  7269                           
  7270                           ;main.c: 86:   _delay((unsigned long)((20)*(4000000UL/4000.0)));
  7271  2EE1  301A               	movlw	26
  7272  2EE2  0141               	movlb	1	; select bank1
  7273  2EE3  00EC               	movwf	??_main^(0+128)
  7274  2EE4  30F8               	movlw	248
  7275  2EE5                     u10297:	
  7276  2EE5  0B89               	decfsz	9,f
  7277  2EE6  2EE5               	goto	u10297
  7278  2EE7  0BEC               	decfsz	??_main^(0+128),f
  7279  2EE8  2EE5               	goto	u10297
  7280  2EE9  0000               	nop
  7281                           
  7282                           ;main.c: 87:   __nop();
  7283  2EEA  0000               	nop
  7284  2EEB  2E52               	goto	l117
  7285  2EEC                     __end_of_main:	
  7286                           
  7287                           	psect	text1
  7288  20AA                     __ptext1:	
  7289 ;; *************** function _viewErrorMessage *****************
  7290 ;; Defined at:
  7291 ;;		line 43 in file "error.c"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;		None
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  errorCode       1   28[BANK0 ] enum E7831
  7296 ;; Return value:  Size  Location     Type
  7297 ;;                  1    wreg      void 
  7298 ;; Registers used:
  7299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7300 ;; Tracked objects:
  7301 ;;		On entry : 0/0
  7302 ;;		On exit  : 0/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7307 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7308 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7309 ;;Total ram usage:        3 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:    8
  7312 ;; This function calls:
  7313 ;;		_OLED_print_xy
  7314 ;;		_OLED_returnHome
  7315 ;;		_getLastError
  7316 ;;		_getPB
  7317 ;;		_removeLastError
  7318 ;;		_setLoadSwitch
  7319 ;; This function is called by:
  7320 ;;		_main
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           
  7325                           ;psect for function _viewErrorMessage
  7326  20AA                     _viewErrorMessage:	
  7327                           
  7328                           ;error.c: 45:  enum e_errorcode errorCode = getLastError();
  7329                           
  7330                           ;incstack = 0
  7331                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7332  20AA  3187  27F1  31A0   	fcall	_getLastError
  7333  20AD  0140               	movlb	0	; select bank0
  7334  20AE  00BA               	movwf	??_viewErrorMessage
  7335  20AF  083A               	movf	??_viewErrorMessage,w
  7336  20B0  00BC               	movwf	viewErrorMessage@errorCode
  7337                           
  7338                           ;error.c: 46:  OLED_returnHome();
  7339  20B1  3198  2003  31A0   	fcall	_OLED_returnHome
  7340                           
  7341                           ;error.c: 47:  switch(errorCode) {
  7342  20B4  29BB               	goto	l6370
  7343  20B5                     l6342:	
  7344                           
  7345                           ;error.c: 49:   OLED_print_xy(0, 0, "Heater      ");
  7346  20B5  01B1               	clrf	OLED_print_xy@row
  7347  20B6  30E9               	movlw	low (STR_62| (0+32768))
  7348  20B7  00B2               	movwf	OLED_print_xy@s
  7349  20B8  30B8               	movlw	high (STR_62| (0+32768))
  7350  20B9  00B3               	movwf	OLED_print_xy@s+1
  7351  20BA  3000               	movlw	0
  7352  20BB  31B3  2328  31A0   	fcall	_OLED_print_xy
  7353                           
  7354                           ;error.c: 50:   OLED_print_xy(0, 1, "removed     ");
  7355  20BE  0140               	movlb	0	; select bank0
  7356  20BF  01B1               	clrf	OLED_print_xy@row
  7357  20C0  0AB1               	incf	OLED_print_xy@row,f
  7358  20C1  301D               	movlw	low (STR_63| (0+32768))
  7359  20C2  00B2               	movwf	OLED_print_xy@s
  7360  20C3  30B9               	movlw	high (STR_63| (0+32768))
  7361  20C4  00B3               	movwf	OLED_print_xy@s+1
  7362  20C5  3000               	movlw	0
  7363  20C6  31B3  2328  31A0   	fcall	_OLED_print_xy
  7364                           
  7365                           ;error.c: 51:   break;
  7366  20C9  29E7               	goto	l6372
  7367  20CA                     l6344:	
  7368                           
  7369                           ;error.c: 53:   OLED_print_xy(0, 0, "Output      ");
  7370  20CA  01B1               	clrf	OLED_print_xy@row
  7371  20CB  3003               	movlw	low (STR_64| (0+32768))
  7372  20CC  00B2               	movwf	OLED_print_xy@s
  7373  20CD  30B9               	movlw	high (STR_64| (0+32768))
  7374  20CE  00B3               	movwf	OLED_print_xy@s+1
  7375  20CF  3000               	movlw	0
  7376  20D0  31B3  2328  31A0   	fcall	_OLED_print_xy
  7377                           
  7378                           ;error.c: 54:   OLED_print_xy(0, 1, "shorted!    ");
  7379  20D3  0140               	movlb	0	; select bank0
  7380  20D4  01B1               	clrf	OLED_print_xy@row
  7381  20D5  0AB1               	incf	OLED_print_xy@row,f
  7382  20D6  3044               	movlw	low (STR_65| (0+32768))
  7383  20D7  00B2               	movwf	OLED_print_xy@s
  7384  20D8  30B9               	movlw	high (STR_65| (0+32768))
  7385  20D9  00B3               	movwf	OLED_print_xy@s+1
  7386  20DA  3000               	movlw	0
  7387  20DB  31B3  2328  31A0   	fcall	_OLED_print_xy
  7388                           
  7389                           ;error.c: 55:   break;
  7390  20DE  29E7               	goto	l6372
  7391  20DF                     l6346:	
  7392                           
  7393                           ;error.c: 57:   OLED_print_xy(0, 0, "Overcurrent ");
  7394  20DF  01B1               	clrf	OLED_print_xy@row
  7395  20E0  30AC               	movlw	low (STR_66| (0+32768))
  7396  20E1  00B2               	movwf	OLED_print_xy@s
  7397  20E2  30B9               	movlw	high (STR_66| (0+32768))
  7398  20E3  00B3               	movwf	OLED_print_xy@s+1
  7399  20E4  3000               	movlw	0
  7400  20E5  31B3  2328  31A0   	fcall	_OLED_print_xy
  7401                           
  7402                           ;error.c: 58:   OLED_print_xy(0, 1, "detected!   ");
  7403  20E8  0140               	movlb	0	; select bank0
  7404  20E9  01B1               	clrf	OLED_print_xy@row
  7405  20EA  0AB1               	incf	OLED_print_xy@row,f
  7406  20EB  306B               	movlw	low (STR_67| (0+32768))
  7407  20EC  00B2               	movwf	OLED_print_xy@s
  7408  20ED  30B9               	movlw	high (STR_67| (0+32768))
  7409  20EE  00B3               	movwf	OLED_print_xy@s+1
  7410  20EF  3000               	movlw	0
  7411  20F0  31B3  2328  31A0   	fcall	_OLED_print_xy
  7412                           
  7413                           ;error.c: 59:   break;
  7414  20F3  29E7               	goto	l6372
  7415  20F4                     l6348:	
  7416                           
  7417                           ;error.c: 61:   OLED_print_xy(0, 0, "Heater      ");
  7418  20F4  01B1               	clrf	OLED_print_xy@row
  7419  20F5  30E9               	movlw	low (STR_62| (0+32768))
  7420  20F6  00B2               	movwf	OLED_print_xy@s
  7421  20F7  30B8               	movlw	high (STR_62| (0+32768))
  7422  20F8  00B3               	movwf	OLED_print_xy@s+1
  7423  20F9  3000               	movlw	0
  7424  20FA  31B3  2328  31A0   	fcall	_OLED_print_xy
  7425                           
  7426                           ;error.c: 62:   OLED_print_xy(0, 1, "overcurrent ");
  7427  20FD  0140               	movlb	0	; select bank0
  7428  20FE  01B1               	clrf	OLED_print_xy@row
  7429  20FF  0AB1               	incf	OLED_print_xy@row,f
  7430  2100  30B9               	movlw	low (STR_69| (0+32768))
  7431  2101  00B2               	movwf	OLED_print_xy@s
  7432  2102  30B9               	movlw	high (STR_69| (0+32768))
  7433  2103  00B3               	movwf	OLED_print_xy@s+1
  7434  2104  3000               	movlw	0
  7435  2105  31B3  2328  31A0   	fcall	_OLED_print_xy
  7436                           
  7437                           ;error.c: 63:   break;
  7438  2108  29E7               	goto	l6372
  7439  2109                     l6350:	
  7440                           
  7441                           ;error.c: 65:   OLED_print_xy(0, 0, "Supply volt.");
  7442  2109  01B1               	clrf	OLED_print_xy@row
  7443  210A  30C6               	movlw	low (STR_70| (0+32768))
  7444  210B  00B2               	movwf	OLED_print_xy@s
  7445  210C  30B9               	movlw	high (STR_70| (0+32768))
  7446  210D  00B3               	movwf	OLED_print_xy@s+1
  7447  210E  3000               	movlw	0
  7448  210F  31B3  2328  31A0   	fcall	_OLED_print_xy
  7449                           
  7450                           ;error.c: 66:   OLED_print_xy(0, 1, "too high!   ");
  7451  2112  0140               	movlb	0	; select bank0
  7452  2113  01B1               	clrf	OLED_print_xy@row
  7453  2114  0AB1               	incf	OLED_print_xy@row,f
  7454  2115  3078               	movlw	low (STR_71| (0+32768))
  7455  2116  00B2               	movwf	OLED_print_xy@s
  7456  2117  30B9               	movlw	high (STR_71| (0+32768))
  7457  2118  00B3               	movwf	OLED_print_xy@s+1
  7458  2119  3000               	movlw	0
  7459  211A  31B3  2328  31A0   	fcall	_OLED_print_xy
  7460                           
  7461                           ;error.c: 67:   break;
  7462  211D  29E7               	goto	l6372
  7463  211E                     l6352:	
  7464                           
  7465                           ;error.c: 69:   OLED_print_xy(0, 0, "Supply volt.");
  7466  211E  01B1               	clrf	OLED_print_xy@row
  7467  211F  30C6               	movlw	low (STR_70| (0+32768))
  7468  2120  00B2               	movwf	OLED_print_xy@s
  7469  2121  30B9               	movlw	high (STR_70| (0+32768))
  7470  2122  00B3               	movwf	OLED_print_xy@s+1
  7471  2123  3000               	movlw	0
  7472  2124  31B3  2328  31A0   	fcall	_OLED_print_xy
  7473                           
  7474                           ;error.c: 70:   OLED_print_xy(0, 1, "too low!    ");
  7475  2127  0140               	movlb	0	; select bank0
  7476  2128  01B1               	clrf	OLED_print_xy@row
  7477  2129  0AB1               	incf	OLED_print_xy@row,f
  7478  212A  3051               	movlw	low (STR_73| (0+32768))
  7479  212B  00B2               	movwf	OLED_print_xy@s
  7480  212C  30B9               	movlw	high (STR_73| (0+32768))
  7481  212D  00B3               	movwf	OLED_print_xy@s+1
  7482  212E  3000               	movlw	0
  7483  212F  31B3  2328  31A0   	fcall	_OLED_print_xy
  7484                           
  7485                           ;error.c: 71:   break;
  7486  2132  29E7               	goto	l6372
  7487  2133                     l6354:	
  7488                           
  7489                           ;error.c: 73:   OLED_print_xy(0, 0, "Sensor      ");
  7490  2133  01B1               	clrf	OLED_print_xy@row
  7491  2134  30F6               	movlw	low (STR_74| (0+32768))
  7492  2135  00B2               	movwf	OLED_print_xy@s
  7493  2136  30B8               	movlw	high (STR_74| (0+32768))
  7494  2137  00B3               	movwf	OLED_print_xy@s+1
  7495  2138  3000               	movlw	0
  7496  2139  31B3  2328  31A0   	fcall	_OLED_print_xy
  7497                           
  7498                           ;error.c: 74:   OLED_print_xy(0, 1, "timeout     ");
  7499  213C  0140               	movlb	0	; select bank0
  7500  213D  01B1               	clrf	OLED_print_xy@row
  7501  213E  0AB1               	incf	OLED_print_xy@row,f
  7502  213F  3037               	movlw	low (STR_75| (0+32768))
  7503  2140  00B2               	movwf	OLED_print_xy@s
  7504  2141  30B9               	movlw	high (STR_75| (0+32768))
  7505  2142  00B3               	movwf	OLED_print_xy@s+1
  7506  2143  3000               	movlw	0
  7507  2144  31B3  2328  31A0   	fcall	_OLED_print_xy
  7508                           
  7509                           ;error.c: 75:   break;
  7510  2147  29E7               	goto	l6372
  7511  2148                     l6356:	
  7512                           
  7513                           ;error.c: 77:   OLED_print_xy(0, 0, "Sensor wrong");
  7514  2148  01B1               	clrf	OLED_print_xy@row
  7515  2149  30E0               	movlw	low (STR_76| (0+32768))
  7516  214A  00B2               	movwf	OLED_print_xy@s
  7517  214B  30B9               	movlw	high (STR_76| (0+32768))
  7518  214C  00B3               	movwf	OLED_print_xy@s+1
  7519  214D  3000               	movlw	0
  7520  214E  31B3  2328  31A0   	fcall	_OLED_print_xy
  7521                           
  7522                           ;error.c: 78:   OLED_print_xy(0, 1, "checksum    ");
  7523  2151  0140               	movlb	0	; select bank0
  7524  2152  01B1               	clrf	OLED_print_xy@row
  7525  2153  0AB1               	incf	OLED_print_xy@row,f
  7526  2154  305E               	movlw	low (STR_77| (0+32768))
  7527  2155  00B2               	movwf	OLED_print_xy@s
  7528  2156  30B9               	movlw	high (STR_77| (0+32768))
  7529  2157  00B3               	movwf	OLED_print_xy@s+1
  7530  2158  3000               	movlw	0
  7531  2159  31B3  2328  31A0   	fcall	_OLED_print_xy
  7532                           
  7533                           ;error.c: 79:   break;
  7534  215C  29E7               	goto	l6372
  7535  215D                     l6358:	
  7536                           
  7537                           ;error.c: 81:   OLED_print_xy(0, 0, "OVERCURRENT ");
  7538  215D  01B1               	clrf	OLED_print_xy@row
  7539  215E  3092               	movlw	low (STR_78| (0+32768))
  7540  215F  00B2               	movwf	OLED_print_xy@s
  7541  2160  30B9               	movlw	high (STR_78| (0+32768))
  7542  2161  00B3               	movwf	OLED_print_xy@s+1
  7543  2162  3000               	movlw	0
  7544  2163  31B3  2328  31A0   	fcall	_OLED_print_xy
  7545                           
  7546                           ;error.c: 82:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7547  2166  0140               	movlb	0	; select bank0
  7548  2167  01B1               	clrf	OLED_print_xy@row
  7549  2168  0AB1               	incf	OLED_print_xy@row,f
  7550  2169  30D3               	movlw	low (STR_79| (0+32768))
  7551  216A  00B2               	movwf	OLED_print_xy@s
  7552  216B  30B9               	movlw	high (STR_79| (0+32768))
  7553  216C  00B3               	movwf	OLED_print_xy@s+1
  7554  216D  3000               	movlw	0
  7555  216E  31B3  2328  31A0   	fcall	_OLED_print_xy
  7556                           
  7557                           ;error.c: 83:   break;
  7558  2171  29E7               	goto	l6372
  7559  2172                     l6360:	
  7560                           
  7561                           ;error.c: 85:   OLED_print_xy(0, 0, "Overcurrent ");
  7562  2172  01B1               	clrf	OLED_print_xy@row
  7563  2173  30AC               	movlw	low (STR_66| (0+32768))
  7564  2174  00B2               	movwf	OLED_print_xy@s
  7565  2175  30B9               	movlw	high (STR_66| (0+32768))
  7566  2176  00B3               	movwf	OLED_print_xy@s+1
  7567  2177  3000               	movlw	0
  7568  2178  31B3  2328  31A0   	fcall	_OLED_print_xy
  7569                           
  7570                           ;error.c: 86:   OLED_print_xy(0, 1, "Please check");
  7571  217B  0140               	movlb	0	; select bank0
  7572  217C  01B1               	clrf	OLED_print_xy@row
  7573  217D  0AB1               	incf	OLED_print_xy@row,f
  7574  217E  30ED               	movlw	low (STR_81| (0+32768))
  7575  217F  00B2               	movwf	OLED_print_xy@s
  7576  2180  30B9               	movlw	high (STR_81| (0+32768))
  7577  2181  00B3               	movwf	OLED_print_xy@s+1
  7578  2182  3000               	movlw	0
  7579  2183  31B3  2328  31A0   	fcall	_OLED_print_xy
  7580                           
  7581                           ;error.c: 87:   if (getPB() == PB_SHORT)
  7582  2186  31B1  214A  31A0   	fcall	_getPB
  7583  2189  3A01               	xorlw	1
  7584  218A  1D03               	skipz
  7585  218B  29E7               	goto	l6372
  7586                           
  7587                           ;error.c: 88:    setLoadSwitch(1);
  7588  218C  3001               	movlw	1
  7589  218D  31B0  20D9  31A0   	fcall	_setLoadSwitch
  7590  2190  29E7               	goto	l6372
  7591  2191                     l6366:	
  7592                           
  7593                           ;error.c: 91:   OLED_print_xy(0, 0, "Menu broken ");
  7594  2191  01B1               	clrf	OLED_print_xy@row
  7595  2192  309F               	movlw	low (STR_82| (0+32768))
  7596  2193  00B2               	movwf	OLED_print_xy@s
  7597  2194  30B9               	movlw	high (STR_82| (0+32768))
  7598  2195  00B3               	movwf	OLED_print_xy@s+1
  7599  2196  3000               	movlw	0
  7600  2197  31B3  2328  31A0   	fcall	_OLED_print_xy
  7601                           
  7602                           ;error.c: 92:   OLED_print_xy(0, 1, "    :-)     ");
  7603  219A  0140               	movlb	0	; select bank0
  7604  219B  01B1               	clrf	OLED_print_xy@row
  7605  219C  0AB1               	incf	OLED_print_xy@row,f
  7606  219D  3010               	movlw	low (STR_83| (0+32768))
  7607  219E  00B2               	movwf	OLED_print_xy@s
  7608  219F  30B9               	movlw	high (STR_83| (0+32768))
  7609  21A0  00B3               	movwf	OLED_print_xy@s+1
  7610  21A1  3000               	movlw	0
  7611  21A2  31B3  2328  31A0   	fcall	_OLED_print_xy
  7612                           
  7613                           ;error.c: 93:   break;
  7614  21A5  29E7               	goto	l6372
  7615  21A6                     l6368:	
  7616                           
  7617                           ;error.c: 95:   OLED_print_xy(0, 0, "Unknown     ");
  7618  21A6  01B1               	clrf	OLED_print_xy@row
  7619  21A7  302A               	movlw	low (STR_84| (0+32768))
  7620  21A8  00B2               	movwf	OLED_print_xy@s
  7621  21A9  30B9               	movlw	high (STR_84| (0+32768))
  7622  21AA  00B3               	movwf	OLED_print_xy@s+1
  7623  21AB  3000               	movlw	0
  7624  21AC  31B3  2328  31A0   	fcall	_OLED_print_xy
  7625                           
  7626                           ;error.c: 96:   OLED_print_xy(0, 1, "error code  ");
  7627  21AF  0140               	movlb	0	; select bank0
  7628  21B0  01B1               	clrf	OLED_print_xy@row
  7629  21B1  0AB1               	incf	OLED_print_xy@row,f
  7630  21B2  3085               	movlw	low (STR_85| (0+32768))
  7631  21B3  00B2               	movwf	OLED_print_xy@s
  7632  21B4  30B9               	movlw	high (STR_85| (0+32768))
  7633  21B5  00B3               	movwf	OLED_print_xy@s+1
  7634  21B6  3000               	movlw	0
  7635  21B7  31B3  2328  31A0   	fcall	_OLED_print_xy
  7636                           
  7637                           ;error.c: 97:  }
  7638  21BA  29E7               	goto	l6372
  7639  21BB                     l6370:	
  7640  21BB  0140               	movlb	0	; select bank0
  7641  21BC  083C               	movf	viewErrorMessage@errorCode,w
  7642  21BD  00BA               	movwf	??_viewErrorMessage
  7643  21BE  01BB               	clrf	??_viewErrorMessage+1
  7644                           
  7645                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7646                           ; Switch size 1, requested type "simple"
  7647                           ; Number of cases is 1, Range of values is 0 to 0
  7648                           ; switch strategies available:
  7649                           ; Name         Instructions Cycles
  7650                           ; simple_byte            4     3 (average)
  7651                           ; direct_byte            8     6 (fixed)
  7652                           ; jumptable            260     6 (fixed)
  7653                           ;	Chosen strategy is simple_byte
  7654  21BF  083B               	movf	??_viewErrorMessage+1,w
  7655  21C0  3A00               	xorlw	0	; case 0
  7656  21C1  1903               	skipnz
  7657  21C2  29C4               	goto	l8670
  7658  21C3  29A6               	goto	l6368
  7659  21C4                     l8670:	
  7660                           
  7661                           ; Switch size 1, requested type "simple"
  7662                           ; Number of cases is 11, Range of values is 1 to 11
  7663                           ; switch strategies available:
  7664                           ; Name         Instructions Cycles
  7665                           ; direct_byte           31     9 (fixed)
  7666                           ; simple_byte           34    18 (average)
  7667                           ; jumptable            263     9 (fixed)
  7668                           ;	Chosen strategy is simple_byte
  7669  21C4  083A               	movf	??_viewErrorMessage,w
  7670  21C5  3A01               	xorlw	1	; case 1
  7671  21C6  1903               	skipnz
  7672  21C7  28B5               	goto	l6342
  7673  21C8  3A03               	xorlw	3	; case 2
  7674  21C9  1903               	skipnz
  7675  21CA  28CA               	goto	l6344
  7676  21CB  3A01               	xorlw	1	; case 3
  7677  21CC  1903               	skipnz
  7678  21CD  28DF               	goto	l6346
  7679  21CE  3A07               	xorlw	7	; case 4
  7680  21CF  1903               	skipnz
  7681  21D0  28F4               	goto	l6348
  7682  21D1  3A01               	xorlw	1	; case 5
  7683  21D2  1903               	skipnz
  7684  21D3  2909               	goto	l6350
  7685  21D4  3A03               	xorlw	3	; case 6
  7686  21D5  1903               	skipnz
  7687  21D6  291E               	goto	l6352
  7688  21D7  3A01               	xorlw	1	; case 7
  7689  21D8  1903               	skipnz
  7690  21D9  2933               	goto	l6354
  7691  21DA  3A0F               	xorlw	15	; case 8
  7692  21DB  1903               	skipnz
  7693  21DC  2948               	goto	l6356
  7694  21DD  3A01               	xorlw	1	; case 9
  7695  21DE  1903               	skipnz
  7696  21DF  295D               	goto	l6358
  7697  21E0  3A03               	xorlw	3	; case 10
  7698  21E1  1903               	skipnz
  7699  21E2  2972               	goto	l6360
  7700  21E3  3A01               	xorlw	1	; case 11
  7701  21E4  1903               	skipnz
  7702  21E5  2991               	goto	l6366
  7703  21E6  29A6               	goto	l6368
  7704  21E7                     l6372:	
  7705                           
  7706                           ;error.c: 99:  if (getPB() == PB_SHORT)
  7707  21E7  31B1  214A  31A0   	fcall	_getPB
  7708  21EA  3A01               	xorlw	1
  7709  21EB  1D03               	skipz
  7710  21EC  29EF               	goto	l6376
  7711                           
  7712                           ;error.c: 100:   removeLastError();
  7713  21ED  31B1  2195         	fcall	_removeLastError
  7714  21EF                     l6376:	
  7715                           
  7716                           ;error.c: 102:  g_screenRefresh = 1;
  7717  21EF  0141               	movlb	1	; select bank1
  7718  21F0  01EF               	clrf	_g_screenRefresh^(0+128)
  7719  21F1  0AEF               	incf	_g_screenRefresh^(0+128),f
  7720  21F2  0008               	return
  7721  21F3                     __end_of_viewErrorMessage:	
  7722                           
  7723                           	psect	text2
  7724  3195                     __ptext2:	
  7725 ;; *************** function _removeLastError *****************
  7726 ;; Defined at:
  7727 ;;		line 34 in file "error.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      void 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0, pclath, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7744 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7745 ;;Total ram usage:        1 bytes
  7746 ;; Hardware stack levels used:    1
  7747 ;; Hardware stack levels required when called:    4
  7748 ;; This function calls:
  7749 ;;		___awmod
  7750 ;; This function is called by:
  7751 ;;		_viewErrorMessage
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _removeLastError
  7757  3195                     _removeLastError:	
  7758                           
  7759                           ;error.c: 36:  if (head != tail)
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in _removeLastError: [wreg+status,2+status,0+pclath+cstack]
  7763  3195  0140               	movlb	0	; select bank0
  7764  3196  086A               	movf	_head,w
  7765  3197  0669               	xorwf	_tail,w
  7766  3198  1903               	skipnz
  7767  3199  0008               	return
  7768                           
  7769                           ;error.c: 37:   tail = (tail + 1) % 10;
  7770  319A  300A               	movlw	10
  7771  319B  00A4               	movwf	___awmod@divisor
  7772  319C  3000               	movlw	0
  7773  319D  00A5               	movwf	___awmod@divisor+1
  7774  319E  0869               	movf	_tail,w
  7775  319F  3E01               	addlw	1
  7776  31A0  00A6               	movwf	___awmod@dividend
  7777  31A1  3000               	movlw	0
  7778  31A2  1803               	skipnc
  7779  31A3  3001               	movlw	1
  7780  31A4  00A7               	movwf	___awmod@dividend+1
  7781  31A5  31B5  252B         	fcall	___awmod
  7782  31A7  0140               	movlb	0	; select bank0
  7783  31A8  0824               	movf	?___awmod,w
  7784  31A9  00AB               	movwf	??_removeLastError
  7785  31AA  082B               	movf	??_removeLastError,w
  7786  31AB  00E9               	movwf	_tail
  7787  31AC  0008               	return
  7788  31AD                     __end_of_removeLastError:	
  7789                           
  7790                           	psect	text3
  7791  07F1                     __ptext3:	
  7792 ;; *************** function _getLastError *****************
  7793 ;; Defined at:
  7794 ;;		line 24 in file "error.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;		None
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;		None
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  1    wreg      enum E8255
  7801 ;; Registers used:
  7802 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7812 ;;Total ram usage:        0 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; Hardware stack levels required when called:    3
  7815 ;; This function calls:
  7816 ;;		Nothing
  7817 ;; This function is called by:
  7818 ;;		_main
  7819 ;;		_viewErrorMessage
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           
  7824                           ;psect for function _getLastError
  7825  07F1                     _getLastError:	
  7826                           
  7827                           ;error.c: 26:  if (head == tail)
  7828                           
  7829                           ;incstack = 0
  7830                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
  7831  07F1  0140               	movlb	0	; select bank0
  7832  07F2  086A               	movf	_head,w
  7833  07F3  0669               	xorwf	_tail,w
  7834  07F4  1D03               	skipz
  7835  07F5  2FF8               	goto	l5188
  7836                           
  7837                           ;error.c: 27:   return NO_ERROR;
  7838  07F6  3000               	movlw	0
  7839  07F7  0008               	return
  7840  07F8                     l5188:	
  7841                           
  7842                           ;error.c: 28:  return errorMessageQueue[tail];
  7843  07F8  0869               	movf	_tail,w
  7844  07F9  3EA0               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7845  07FA  0086               	movwf	6
  7846  07FB  3002               	movlw	2	; select bank5/6
  7847  07FC  0087               	movwf	7
  7848  07FD  0801               	movf	1,w
  7849  07FE  0008               	return
  7850  07FF                     __end_of_getLastError:	
  7851                           
  7852                           	psect	text4
  7853  1C41                     __ptext4:	
  7854 ;; *************** function _systemCheck *****************
  7855 ;; Defined at:
  7856 ;;		line 233 in file "system.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  data            2   42[BANK1 ] PTR struct .
  7859 ;;		 -> data(166), 
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;  str             3   48[BANK1 ] unsigned char [3]
  7862 ;;  n               1   51[BANK1 ] unsigned char 
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  1    wreg      void 
  7865 ;; Registers used:
  7866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7872 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7873 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7874 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7875 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7876 ;;Total ram usage:       10 bytes
  7877 ;; Hardware stack levels used:    1
  7878 ;; Hardware stack levels required when called:    8
  7879 ;; This function calls:
  7880 ;;		_OLED_clearDisplay
  7881 ;;		_OLED_off
  7882 ;;		_OLED_print_xy
  7883 ;;		_OLED_returnHome
  7884 ;;		___fldiv
  7885 ;;		___flge
  7886 ;;		___flmul
  7887 ;;		___xxtofl
  7888 ;;		_error
  7889 ;;		_getAnalogValue
  7890 ;;		_itoa
  7891 ;;		_setChannelSwitch
  7892 ;;		_setLoadSwitch
  7893 ;;		_setOLEDPower
  7894 ;; This function is called by:
  7895 ;;		_main
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _systemCheck
  7901  1C41                     _systemCheck:	
  7902                           
  7903                           ;system.c: 233: void systemCheck(t_globalData *data);system.c: 234: {;system.c: 235:  ui
      +                          nt8_t n;;system.c: 236:  char str[3];;system.c: 240:  if (data->current > 3.5) {
  7904                           
  7905                           ;incstack = 0
  7906                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7907  1C41  3040               	movlw	64
  7908  1C42  0141               	movlb	1	; select bank1
  7909  1C43  00B5               	movwf	(___flge@ff1+3)^(0+128)
  7910  1C44  3060               	movlw	96
  7911  1C45  00B4               	movwf	(___flge@ff1+2)^(0+128)
  7912  1C46  3000               	movlw	0
  7913  1C47  00B3               	movwf	(___flge@ff1+1)^(0+128)
  7914  1C48  3000               	movlw	0
  7915  1C49  00B2               	movwf	___flge@ff1^(0+128)
  7916  1C4A  084A               	movf	systemCheck@data^(0+128),w
  7917  1C4B  0086               	movwf	6
  7918  1C4C  084B               	movf	(systemCheck@data+1)^(0+128),w
  7919  1C4D  0087               	movwf	7
  7920  1C4E  3155               	addfsr 1,21
  7921  1C4F  3F40               	moviw [0]fsr1
  7922  1C50  00B6               	movwf	___flge@ff2^(0+128)
  7923  1C51  3F41               	moviw [1]fsr1
  7924  1C52  00B7               	movwf	(___flge@ff2+1)^(0+128)
  7925  1C53  3F42               	moviw [2]fsr1
  7926  1C54  00B8               	movwf	(___flge@ff2+2)^(0+128)
  7927  1C55  3F43               	moviw [3]fsr1
  7928  1C56  00B9               	movwf	(___flge@ff2+3)^(0+128)
  7929  1C57  31AA  2277  319C   	fcall	___flge
  7930  1C5A  1803               	btfsc	3,0
  7931  1C5B  2CE4               	goto	l8088
  7932                           
  7933                           ;system.c: 242:   setChannelSwitch(255, 0);
  7934  1C5C  0140               	movlb	0	; select bank0
  7935  1C5D  01B1               	clrf	setChannelSwitch@state
  7936  1C5E  30FF               	movlw	255
  7937  1C5F  31B5  2571  319C   	fcall	_setChannelSwitch
  7938                           
  7939                           ;system.c: 243:   setLoadSwitch(0);
  7940  1C62  3000               	movlw	0
  7941  1C63  31B0  20D9  319C   	fcall	_setLoadSwitch
  7942                           
  7943                           ;system.c: 245:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  7944  1C66  3040               	movlw	64
  7945  1C67  0141               	movlb	1	; select bank1
  7946  1C68  00B5               	movwf	(___flge@ff1+3)^(0+128)
  7947  1C69  3060               	movlw	96
  7948  1C6A  00B4               	movwf	(___flge@ff1+2)^(0+128)
  7949  1C6B  3000               	movlw	0
  7950  1C6C  00B3               	movwf	(___flge@ff1+1)^(0+128)
  7951  1C6D  3000               	movlw	0
  7952  1C6E  00B2               	movwf	___flge@ff1^(0+128)
  7953  1C6F  3045               	movlw	69
  7954  1C70  0140               	movlb	0	; select bank0
  7955  1C71  00E2               	movwf	___fldiv@a+3
  7956  1C72  301F               	movlw	31
  7957  1C73  00E1               	movwf	___fldiv@a+2
  7958  1C74  30D8               	movlw	216
  7959  1C75  00E0               	movwf	___fldiv@a+1
  7960  1C76  3000               	movlw	0
  7961  1C77  00DF               	movwf	___fldiv@a
  7962  1C78  3040               	movlw	64
  7963  1C79  00C8               	movwf	___flmul@b+3
  7964  1C7A  30A0               	movlw	160
  7965  1C7B  00C7               	movwf	___flmul@b+2
  7966  1C7C  3000               	movlw	0
  7967  1C7D  00C6               	movwf	___flmul@b+1
  7968  1C7E  3000               	movlw	0
  7969  1C7F  00C5               	movwf	___flmul@b
  7970  1C80  3011               	movlw	17
  7971  1C81  31B1  21C9  319C   	fcall	_getAnalogValue
  7972  1C84  0140               	movlb	0	; select bank0
  7973  1C85  0824               	movf	?_getAnalogValue,w
  7974  1C86  0141               	movlb	1	; select bank1
  7975  1C87  00CC               	movwf	??_systemCheck^(0+128)
  7976  1C88  0140               	movlb	0	; select bank0
  7977  1C89  0825               	movf	?_getAnalogValue+1,w
  7978  1C8A  0141               	movlb	1	; select bank1
  7979  1C8B  00CD               	movwf	(??_systemCheck^(0+128)+1)
  7980  1C8C  01CE               	clrf	(??_systemCheck^(0+128)+2)
  7981  1C8D  01CF               	clrf	(??_systemCheck^(0+128)+3)
  7982  1C8E  084F               	movf	(??_systemCheck+3)^(0+128),w
  7983  1C8F  0140               	movlb	0	; select bank0
  7984  1C90  00BA               	movwf	___xxtofl@val+3
  7985  1C91  0141               	movlb	1	; select bank1
  7986  1C92  084E               	movf	(??_systemCheck+2)^(0+128),w
  7987  1C93  0140               	movlb	0	; select bank0
  7988  1C94  00B9               	movwf	___xxtofl@val+2
  7989  1C95  0141               	movlb	1	; select bank1
  7990  1C96  084D               	movf	(??_systemCheck+1)^(0+128),w
  7991  1C97  0140               	movlb	0	; select bank0
  7992  1C98  00B8               	movwf	___xxtofl@val+1
  7993  1C99  0141               	movlb	1	; select bank1
  7994  1C9A  084C               	movf	??_systemCheck^(0+128),w
  7995  1C9B  0140               	movlb	0	; select bank0
  7996  1C9C  00B7               	movwf	___xxtofl@val
  7997  1C9D  3000               	movlw	0
  7998  1C9E  31AB  237E  319C   	fcall	___xxtofl
  7999  1CA1  0140               	movlb	0	; select bank0
  8000  1CA2  083A               	movf	?___xxtofl+3,w
  8001  1CA3  00CC               	movwf	___flmul@a+3
  8002  1CA4  0839               	movf	?___xxtofl+2,w
  8003  1CA5  00CB               	movwf	___flmul@a+2
  8004  1CA6  0838               	movf	?___xxtofl+1,w
  8005  1CA7  00CA               	movwf	___flmul@a+1
  8006  1CA8  0837               	movf	?___xxtofl,w
  8007  1CA9  00C9               	movwf	___flmul@a
  8008  1CAA  3191  21D9  319C   	fcall	___flmul
  8009  1CAD  0140               	movlb	0	; select bank0
  8010  1CAE  0848               	movf	?___flmul+3,w
  8011  1CAF  00E6               	movwf	___fldiv@b+3
  8012  1CB0  0847               	movf	?___flmul+2,w
  8013  1CB1  00E5               	movwf	___fldiv@b+2
  8014  1CB2  0846               	movf	?___flmul+1,w
  8015  1CB3  00E4               	movwf	___fldiv@b+1
  8016  1CB4  0845               	movf	?___flmul,w
  8017  1CB5  00E3               	movwf	___fldiv@b
  8018  1CB6  3190  2007  319C   	fcall	___fldiv
  8019  1CB9  0140               	movlb	0	; select bank0
  8020  1CBA  0862               	movf	?___fldiv+3,w
  8021  1CBB  0141               	movlb	1	; select bank1
  8022  1CBC  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8023  1CBD  0140               	movlb	0	; select bank0
  8024  1CBE  0861               	movf	?___fldiv+2,w
  8025  1CBF  0141               	movlb	1	; select bank1
  8026  1CC0  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8027  1CC1  0140               	movlb	0	; select bank0
  8028  1CC2  0860               	movf	?___fldiv+1,w
  8029  1CC3  0141               	movlb	1	; select bank1
  8030  1CC4  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8031  1CC5  0140               	movlb	0	; select bank0
  8032  1CC6  085F               	movf	?___fldiv,w
  8033  1CC7  0141               	movlb	1	; select bank1
  8034  1CC8  00B6               	movwf	___flge@ff2^(0+128)
  8035  1CC9  31AA  2277  319C   	fcall	___flge
  8036  1CCC  1803               	btfsc	3,0
  8037  1CCD  2CD0               	goto	l8082
  8038                           
  8039                           ;system.c: 248:    error(ERR_NUKED);
  8040  1CCE  3009               	movlw	9
  8041  1CCF  2CE1               	goto	L1
  8042  1CD0                     l8082:	
  8043                           ;system.c: 249:   } else {
  8044                           
  8045                           
  8046                           ;system.c: 251:    if (! data->status.OVERCURRENT) {
  8047  1CD0  0141               	movlb	1	; select bank1
  8048  1CD1  084A               	movf	systemCheck@data^(0+128),w
  8049  1CD2  3E29               	addlw	41
  8050  1CD3  0086               	movwf	6
  8051  1CD4  3000               	movlw	0
  8052  1CD5  3D4B               	addwfc	(systemCheck@data+1)^(0+128),w
  8053  1CD6  0087               	movwf	7
  8054  1CD7  1901               	btfsc	1,2
  8055  1CD8  2CE4               	goto	l8088
  8056                           
  8057                           ;system.c: 252:     data->status.OVERCURRENT = 1;
  8058  1CD9  084A               	movf	systemCheck@data^(0+128),w
  8059  1CDA  3E29               	addlw	41
  8060  1CDB  0086               	movwf	6
  8061  1CDC  3000               	movlw	0
  8062  1CDD  3D4B               	addwfc	(systemCheck@data+1)^(0+128),w
  8063  1CDE  0087               	movwf	7
  8064  1CDF  1501               	bsf	1,2
  8065                           
  8066                           ;system.c: 253:     error(ERR_OVERCURRENT);
  8067  1CE0  300A               	movlw	10
  8068  1CE1                     L1:	
  8069  1CE1  31B3  23F9  319C   	fcall	_error
  8070  1CE4                     l8088:	
  8071                           
  8072                           ;system.c: 263:  if ((data->voltage > 13.8) || (data->voltage <= 11.0)) {
  8073  1CE4  3041               	movlw	65
  8074  1CE5  0141               	movlb	1	; select bank1
  8075  1CE6  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8076  1CE7  305C               	movlw	92
  8077  1CE8  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8078  1CE9  30CC               	movlw	204
  8079  1CEA  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8080  1CEB  30CD               	movlw	205
  8081  1CEC  00B2               	movwf	___flge@ff1^(0+128)
  8082  1CED  084A               	movf	systemCheck@data^(0+128),w
  8083  1CEE  0086               	movwf	6
  8084  1CEF  084B               	movf	(systemCheck@data+1)^(0+128),w
  8085  1CF0  0087               	movwf	7
  8086  1CF1  3151               	addfsr 1,17
  8087  1CF2  3F40               	moviw [0]fsr1
  8088  1CF3  00B6               	movwf	___flge@ff2^(0+128)
  8089  1CF4  3F41               	moviw [1]fsr1
  8090  1CF5  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8091  1CF6  3F42               	moviw [2]fsr1
  8092  1CF7  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8093  1CF8  3F43               	moviw [3]fsr1
  8094  1CF9  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8095  1CFA  31AA  2277  319C   	fcall	___flge
  8096  1CFD  1C03               	btfss	3,0
  8097  1CFE  2D1A               	goto	l8092
  8098  1CFF  3041               	movlw	65
  8099  1D00  0141               	movlb	1	; select bank1
  8100  1D01  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8101  1D02  3030               	movlw	48
  8102  1D03  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8103  1D04  3000               	movlw	0
  8104  1D05  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8105  1D06  3000               	movlw	0
  8106  1D07  00B2               	movwf	___flge@ff1^(0+128)
  8107  1D08  084A               	movf	systemCheck@data^(0+128),w
  8108  1D09  0086               	movwf	6
  8109  1D0A  084B               	movf	(systemCheck@data+1)^(0+128),w
  8110  1D0B  0087               	movwf	7
  8111  1D0C  3151               	addfsr 1,17
  8112  1D0D  3F40               	moviw [0]fsr1
  8113  1D0E  00B6               	movwf	___flge@ff2^(0+128)
  8114  1D0F  3F41               	moviw [1]fsr1
  8115  1D10  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8116  1D11  3F42               	moviw [2]fsr1
  8117  1D12  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8118  1D13  3F43               	moviw [3]fsr1
  8119  1D14  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8120  1D15  31AA  2277  319C   	fcall	___flge
  8121  1D18  1C03               	btfss	3,0
  8122  1D19  2D78               	goto	l8124
  8123  1D1A                     l8092:	
  8124                           
  8125                           ;system.c: 264:   INTCON = 0;
  8126  1D1A  018B               	clrf	11	;volatile
  8127                           
  8128                           ;system.c: 265:   OLED_clearDisplay();
  8129  1D1B  31B0  20D5  319C   	fcall	_OLED_clearDisplay
  8130                           
  8131                           ;system.c: 266:   OLED_returnHome();
  8132  1D1E  3198  2003  319C   	fcall	_OLED_returnHome
  8133                           
  8134                           ;system.c: 267:   OLED_print_xy(0, 0, "TURNING OFF");
  8135  1D21  0140               	movlb	0	; select bank0
  8136  1D22  01B1               	clrf	OLED_print_xy@row
  8137  1D23  30E4               	movlw	low (STR_86| (0+32768))
  8138  1D24  00B2               	movwf	OLED_print_xy@s
  8139  1D25  30BA               	movlw	high (STR_86| (0+32768))
  8140  1D26  00B3               	movwf	OLED_print_xy@s+1
  8141  1D27  3000               	movlw	0
  8142  1D28  31B3  2328  319C   	fcall	_OLED_print_xy
  8143                           
  8144                           ;system.c: 268:   setChannelSwitch(255, 0);
  8145  1D2B  0140               	movlb	0	; select bank0
  8146  1D2C  01B1               	clrf	setChannelSwitch@state
  8147  1D2D  30FF               	movlw	255
  8148  1D2E  31B5  2571  319C   	fcall	_setChannelSwitch
  8149                           
  8150                           ;system.c: 269:   setLoadSwitch(0);
  8151  1D31  3000               	movlw	0
  8152  1D32  31B0  20D9  319C   	fcall	_setLoadSwitch
  8153                           
  8154                           ;system.c: 270:   for(n = 5; n > 0; n--) {
  8155  1D35  3005               	movlw	5
  8156  1D36  0141               	movlb	1	; select bank1
  8157  1D37  00CC               	movwf	??_systemCheck^(0+128)
  8158  1D38  084C               	movf	??_systemCheck^(0+128),w
  8159  1D39  00D3               	movwf	systemCheck@n^(0+128)
  8160  1D3A                     l8110:	
  8161                           
  8162                           ;system.c: 271:    itoa(str, n, 1);
  8163  1D3A  30D0               	movlw	low systemCheck@str
  8164  1D3B  00BF               	movwf	itoa@str^(0+128)
  8165  1D3C  3000               	movlw	high systemCheck@str
  8166  1D3D  00C0               	movwf	(itoa@str+1)^(0+128)
  8167  1D3E  0853               	movf	systemCheck@n^(0+128),w
  8168  1D3F  00CC               	movwf	??_systemCheck^(0+128)
  8169  1D40  084C               	movf	??_systemCheck^(0+128),w
  8170  1D41  00C1               	movwf	itoa@value^(0+128)
  8171  1D42  01C2               	clrf	itoa@width^(0+128)
  8172  1D43  0AC2               	incf	itoa@width^(0+128),f
  8173  1D44  31A8  2058  319C   	fcall	_itoa
  8174                           
  8175                           ;system.c: 272:    OLED_print_xy(0, 1, "IN ");
  8176  1D47  0140               	movlb	0	; select bank0
  8177  1D48  01B1               	clrf	OLED_print_xy@row
  8178  1D49  0AB1               	incf	OLED_print_xy@row,f
  8179  1D4A  3076               	movlw	low (STR_87| (0+32768))
  8180  1D4B  00B2               	movwf	OLED_print_xy@s
  8181  1D4C  30BB               	movlw	high (STR_87| (0+32768))
  8182  1D4D  00B3               	movwf	OLED_print_xy@s+1
  8183  1D4E  3000               	movlw	0
  8184  1D4F  31B3  2328  319C   	fcall	_OLED_print_xy
  8185                           
  8186                           ;system.c: 273:    OLED_print_xy(3, 1, str);
  8187  1D52  0140               	movlb	0	; select bank0
  8188  1D53  01B1               	clrf	OLED_print_xy@row
  8189  1D54  0AB1               	incf	OLED_print_xy@row,f
  8190  1D55  30D0               	movlw	low systemCheck@str
  8191  1D56  00B2               	movwf	OLED_print_xy@s
  8192  1D57  3000               	movlw	high systemCheck@str
  8193  1D58  00B3               	movwf	OLED_print_xy@s+1
  8194  1D59  3003               	movlw	3
  8195  1D5A  31B3  2328  319C   	fcall	_OLED_print_xy
  8196                           
  8197                           ;system.c: 274:    _delay((unsigned long)((1000)*(4000000UL/4000.0)));
  8198  1D5D  3006               	movlw	6
  8199  1D5E  0141               	movlb	1	; select bank1
  8200  1D5F  00CD               	movwf	(??_systemCheck^(0+128)+1)
  8201  1D60  3013               	movlw	19
  8202  1D61  00CC               	movwf	??_systemCheck^(0+128)
  8203  1D62  30AD               	movlw	173
  8204  1D63                     u10307:	
  8205  1D63  0B89               	decfsz	9,f
  8206  1D64  2D63               	goto	u10307
  8207  1D65  0BCC               	decfsz	??_systemCheck^(0+128),f
  8208  1D66  2D63               	goto	u10307
  8209  1D67  0BCD               	decfsz	(??_systemCheck^(0+128)+1),f
  8210  1D68  2D63               	goto	u10307
  8211  1D69  3200               	nop2
  8212                           
  8213                           ;system.c: 275:   }
  8214  1D6A  3001               	movlw	1
  8215  1D6B  0141               	movlb	1	; select bank1
  8216  1D6C  02D3               	subwf	systemCheck@n^(0+128),f
  8217  1D6D  0853               	movf	systemCheck@n^(0+128),w
  8218  1D6E  1D03               	btfss	3,2
  8219  1D6F  2D3A               	goto	l8110
  8220                           
  8221                           ;system.c: 276:   OLED_off();
  8222  1D70  31B0  20E1  319C   	fcall	_OLED_off
  8223                           
  8224                           ;system.c: 277:   setOLEDPower(0);
  8225  1D73  3000               	movlw	0
  8226  1D74  31B0  20E9  319C   	fcall	_setOLEDPower
  8227  1D77                     l845:	
  8228                           ;system.c: 279:   while(1);
  8229                           
  8230  1D77  2D77               	goto	l845
  8231  1D78                     l8124:	
  8232  1D78  3041               	movlw	65
  8233  1D79  0141               	movlb	1	; select bank1
  8234  1D7A  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8235  1D7B  3050               	movlw	80
  8236  1D7C  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8237  1D7D  3000               	movlw	0
  8238  1D7E  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8239  1D7F  3000               	movlw	0
  8240  1D80  00B2               	movwf	___flge@ff1^(0+128)
  8241  1D81  084A               	movf	systemCheck@data^(0+128),w
  8242  1D82  0086               	movwf	6
  8243  1D83  084B               	movf	(systemCheck@data+1)^(0+128),w
  8244  1D84  0087               	movwf	7
  8245  1D85  3151               	addfsr 1,17
  8246  1D86  3F40               	moviw [0]fsr1
  8247  1D87  00B6               	movwf	___flge@ff2^(0+128)
  8248  1D88  3F41               	moviw [1]fsr1
  8249  1D89  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8250  1D8A  3F42               	moviw [2]fsr1
  8251  1D8B  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8252  1D8C  3F43               	moviw [3]fsr1
  8253  1D8D  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8254  1D8E  31AA  2277  319C   	fcall	___flge
  8255  1D91  1803               	btfsc	3,0
  8256  1D92  2DC2               	goto	l8134
  8257  1D93  3041               	movlw	65
  8258  1D94  0141               	movlb	1	; select bank1
  8259  1D95  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8260  1D96  305C               	movlw	92
  8261  1D97  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8262  1D98  30CC               	movlw	204
  8263  1D99  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8264  1D9A  30CD               	movlw	205
  8265  1D9B  00B2               	movwf	___flge@ff1^(0+128)
  8266  1D9C  084A               	movf	systemCheck@data^(0+128),w
  8267  1D9D  0086               	movwf	6
  8268  1D9E  084B               	movf	(systemCheck@data+1)^(0+128),w
  8269  1D9F  0087               	movwf	7
  8270  1DA0  3151               	addfsr 1,17
  8271  1DA1  3F40               	moviw [0]fsr1
  8272  1DA2  00B6               	movwf	___flge@ff2^(0+128)
  8273  1DA3  3F41               	moviw [1]fsr1
  8274  1DA4  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8275  1DA5  3F42               	moviw [2]fsr1
  8276  1DA6  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8277  1DA7  3F43               	moviw [3]fsr1
  8278  1DA8  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8279  1DA9  31AA  2277  319C   	fcall	___flge
  8280  1DAC  1C03               	btfss	3,0
  8281  1DAD  2DC2               	goto	l8134
  8282                           
  8283                           ;system.c: 282:   if (! data->status.BAT_HIGH) {
  8284  1DAE  0141               	movlb	1	; select bank1
  8285  1DAF  084A               	movf	systemCheck@data^(0+128),w
  8286  1DB0  3E29               	addlw	41
  8287  1DB1  0086               	movwf	6
  8288  1DB2  3000               	movlw	0
  8289  1DB3  3D4B               	addwfc	(systemCheck@data+1)^(0+128),w
  8290  1DB4  0087               	movwf	7
  8291  1DB5  1881               	btfsc	1,1
  8292  1DB6  0008               	return
  8293                           
  8294                           ;system.c: 283:    data->status.BAT_HIGH = 1;
  8295  1DB7  084A               	movf	systemCheck@data^(0+128),w
  8296  1DB8  3E29               	addlw	41
  8297  1DB9  0086               	movwf	6
  8298  1DBA  3000               	movlw	0
  8299  1DBB  3D4B               	addwfc	(systemCheck@data+1)^(0+128),w
  8300  1DBC  0087               	movwf	7
  8301  1DBD  1481               	bsf	1,1
  8302                           
  8303                           ;system.c: 284:    error(WARN_VOLT_HIGH);
  8304  1DBE  3005               	movlw	5
  8305  1DBF  31B3  23F9         	fcall	_error
  8306  1DC1  0008               	return
  8307  1DC2                     l8134:	
  8308  1DC2  3041               	movlw	65
  8309  1DC3  0141               	movlb	1	; select bank1
  8310  1DC4  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8311  1DC5  3030               	movlw	48
  8312  1DC6  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8313  1DC7  3000               	movlw	0
  8314  1DC8  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8315  1DC9  3000               	movlw	0
  8316  1DCA  00B2               	movwf	___flge@ff1^(0+128)
  8317  1DCB  084A               	movf	systemCheck@data^(0+128),w
  8318  1DCC  0086               	movwf	6
  8319  1DCD  084B               	movf	(systemCheck@data+1)^(0+128),w
  8320  1DCE  0087               	movwf	7
  8321  1DCF  3151               	addfsr 1,17
  8322  1DD0  3F40               	moviw [0]fsr1
  8323  1DD1  00B6               	movwf	___flge@ff2^(0+128)
  8324  1DD2  3F41               	moviw [1]fsr1
  8325  1DD3  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8326  1DD4  3F42               	moviw [2]fsr1
  8327  1DD5  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8328  1DD6  3F43               	moviw [3]fsr1
  8329  1DD7  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8330  1DD8  31AA  2277  319C   	fcall	___flge
  8331  1DDB  1803               	btfsc	3,0
  8332  1DDC  2E0C               	goto	l8144
  8333  1DDD  3041               	movlw	65
  8334  1DDE  0141               	movlb	1	; select bank1
  8335  1DDF  00B5               	movwf	(___flge@ff1+3)^(0+128)
  8336  1DE0  3036               	movlw	54
  8337  1DE1  00B4               	movwf	(___flge@ff1+2)^(0+128)
  8338  1DE2  3066               	movlw	102
  8339  1DE3  00B3               	movwf	(___flge@ff1+1)^(0+128)
  8340  1DE4  3066               	movlw	102
  8341  1DE5  00B2               	movwf	___flge@ff1^(0+128)
  8342  1DE6  084A               	movf	systemCheck@data^(0+128),w
  8343  1DE7  0086               	movwf	6
  8344  1DE8  084B               	movf	(systemCheck@data+1)^(0+128),w
  8345  1DE9  0087               	movwf	7
  8346  1DEA  3151               	addfsr 1,17
  8347  1DEB  3F40               	moviw [0]fsr1
  8348  1DEC  00B6               	movwf	___flge@ff2^(0+128)
  8349  1DED  3F41               	moviw [1]fsr1
  8350  1DEE  00B7               	movwf	(___flge@ff2+1)^(0+128)
  8351  1DEF  3F42               	moviw [2]fsr1
  8352  1DF0  00B8               	movwf	(___flge@ff2+2)^(0+128)
  8353  1DF1  3F43               	moviw [3]fsr1
  8354  1DF2  00B9               	movwf	(___flge@ff2+3)^(0+128)
  8355  1DF3  31AA  2277  319C   	fcall	___flge
  8356  1DF6  1C03               	btfss	3,0
  8357  1DF7  2E0C               	goto	l8144
  8358                           
  8359                           ;system.c: 287:   if (! data->status.BAT_LOW) {
  8360  1DF8  0141               	movlb	1	; select bank1
  8361  1DF9  084A               	movf	systemCheck@data^(0+128),w
  8362  1DFA  3E29               	addlw	41
  8363  1DFB  0086               	movwf	6
  8364  1DFC  3000               	movlw	0
  8365  1DFD  3D4B               	addwfc	(systemCheck@data+1)^(0+128),w
  8366  1DFE  0087               	movwf	7
  8367  1DFF  1801               	btfsc	1,0
  8368  1E00  0008               	return
  8369                           
  8370                           ;system.c: 288:    data->status.BAT_LOW = 1;
  8371  1E01  084A               	movf	systemCheck@data^(0+128),w
  8372  1E02  3E29               	addlw	41
  8373  1E03  0086               	movwf	6
  8374  1E04  3000               	movlw	0
  8375  1E05  3D4B               	addwfc	(systemCheck@data+1)^(0+128),w
  8376  1E06  0087               	movwf	7
  8377  1E07  1401               	bsf	1,0
  8378                           
  8379                           ;system.c: 289:    error(WARN_VOLT_LOW);
  8380  1E08  3006               	movlw	6
  8381  1E09  31B3  23F9         	fcall	_error
  8382  1E0B  0008               	return
  8383  1E0C                     l8144:	
  8384                           
  8385                           ;system.c: 292:   data->status.BAT_HIGH = 0;
  8386  1E0C  0141               	movlb	1	; select bank1
  8387  1E0D  084A               	movf	systemCheck@data^(0+128),w
  8388  1E0E  3E29               	addlw	41
  8389  1E0F  0086               	movwf	6
  8390  1E10  3000               	movlw	0
  8391  1E11  3D4B               	addwfc	(systemCheck@data+1)^(0+128),w
  8392  1E12  0087               	movwf	7
  8393  1E13  1081               	bcf	1,1
  8394                           
  8395                           ;system.c: 293:   data->status.BAT_LOW = 0;
  8396  1E14  084A               	movf	systemCheck@data^(0+128),w
  8397  1E15  3E29               	addlw	41
  8398  1E16  0086               	movwf	6
  8399  1E17  3000               	movlw	0
  8400  1E18  3D4B               	addwfc	(systemCheck@data+1)^(0+128),w
  8401  1E19  0087               	movwf	7
  8402  1E1A  1001               	bcf	1,0
  8403  1E1B  0008               	return
  8404  1E1C                     __end_of_systemCheck:	
  8405                           
  8406                           	psect	text5
  8407  30E9                     __ptext5:	
  8408 ;; *************** function _setOLEDPower *****************
  8409 ;; Defined at:
  8410 ;;		line 24 in file "io.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;  state           1    wreg     unsigned char 
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;  state           1    4[BANK0 ] unsigned char 
  8415 ;; Return value:  Size  Location     Type
  8416 ;;                  1    wreg      void 
  8417 ;; Registers used:
  8418 ;;		wreg, status,0
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8427 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8428 ;;Total ram usage:        1 bytes
  8429 ;; Hardware stack levels used:    1
  8430 ;; Hardware stack levels required when called:    3
  8431 ;; This function calls:
  8432 ;;		Nothing
  8433 ;; This function is called by:
  8434 ;;		_main
  8435 ;;		_systemCheck
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function _setOLEDPower
  8441  30E9                     _setOLEDPower:	
  8442                           
  8443                           ;incstack = 0
  8444                           ; Regs used in _setOLEDPower: [wreg+status,0]
  8445                           ;setOLEDPower@state stored from wreg
  8446  30E9  0140               	movlb	0	; select bank0
  8447  30EA  00A4               	movwf	setOLEDPower@state
  8448                           
  8449                           ;io.c: 24: void setOLEDPower(uint8_t state);io.c: 25: {;io.c: 26:  LATBbits.LATB5 = stat
      +                          e;
  8450  30EB  0C24               	rrf	setOLEDPower@state,w
  8451  30EC  1C03               	skipc
  8452  30ED  1299               	bcf	25,5	;volatile
  8453  30EE  1803               	skipnc
  8454  30EF  1699               	bsf	25,5	;volatile
  8455  30F0  0008               	return
  8456  30F1                     __end_of_setOLEDPower:	
  8457                           
  8458                           	psect	text6
  8459  1803                     __ptext6:	
  8460 ;; *************** function _OLED_returnHome *****************
  8461 ;; Defined at:
  8462 ;;		line 166 in file "oled.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;		None
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;		None
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, status,2, status,0, pclath, cstack
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8480 ;;Total ram usage:        0 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    7
  8483 ;; This function calls:
  8484 ;;		_OLED_command
  8485 ;; This function is called by:
  8486 ;;		_main
  8487 ;;		_viewErrorMessage
  8488 ;;		_systemCheck
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           
  8493                           ;psect for function _OLED_returnHome
  8494  1803                     _OLED_returnHome:	
  8495                           
  8496                           ;oled.c: 168:  OLED_command(0x02);
  8497                           
  8498                           ;incstack = 0
  8499                           ; Regs used in _OLED_returnHome: [wreg+status,2+status,0+pclath+cstack]
  8500  1803  3002               	movlw	2
  8501  1804  31B1  2115         	fcall	_OLED_command
  8502  1806  0008               	return
  8503  1807                     __end_of_OLED_returnHome:	
  8504                           
  8505                           	psect	text7
  8506  30E1                     __ptext7:	
  8507 ;; *************** function _OLED_off *****************
  8508 ;; Defined at:
  8509 ;;		line 12 in file "oled.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;		None
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;		None
  8514 ;; Return value:  Size  Location     Type
  8515 ;;                  1    wreg      void 
  8516 ;; Registers used:
  8517 ;;		wreg, status,2, status,0, pclath, cstack
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8527 ;;Total ram usage:        0 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    7
  8530 ;; This function calls:
  8531 ;;		_OLED_command
  8532 ;; This function is called by:
  8533 ;;		_systemCheck
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           
  8538                           ;psect for function _OLED_off
  8539  30E1                     _OLED_off:	
  8540                           
  8541                           ;oled.c: 14:  OLED_command(0x08);
  8542                           
  8543                           ;incstack = 0
  8544                           ; Regs used in _OLED_off: [wreg+status,2+status,0+pclath+cstack]
  8545  30E1  3008               	movlw	8
  8546  30E2  31B1  2115  31B0   	fcall	_OLED_command
  8547                           
  8548                           ;oled.c: 15:  OLED_command(0x13);
  8549  30E5  3013               	movlw	19
  8550  30E6  31B1  2115         	fcall	_OLED_command
  8551  30E8  0008               	return
  8552  30E9                     __end_of_OLED_off:	
  8553                           
  8554                           	psect	text8
  8555  30D5                     __ptext8:	
  8556 ;; *************** function _OLED_clearDisplay *****************
  8557 ;; Defined at:
  8558 ;;		line 171 in file "oled.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		wreg, status,2, status,0, pclath, cstack
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8576 ;;Total ram usage:        0 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    7
  8579 ;; This function calls:
  8580 ;;		_OLED_command
  8581 ;; This function is called by:
  8582 ;;		_main
  8583 ;;		_systemCheck
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           
  8588                           ;psect for function _OLED_clearDisplay
  8589  30D5                     _OLED_clearDisplay:	
  8590                           
  8591                           ;oled.c: 173:  OLED_command(0x01);
  8592                           
  8593                           ;incstack = 0
  8594                           ; Regs used in _OLED_clearDisplay: [wreg+status,2+status,0+pclath+cstack]
  8595  30D5  3001               	movlw	1
  8596  30D6  31B1  2115         	fcall	_OLED_command
  8597  30D8  0008               	return
  8598  30D9                     __end_of_OLED_clearDisplay:	
  8599                           
  8600                           	psect	text9
  8601  0834                     __ptext9:	
  8602 ;; *************** function _menu *****************
  8603 ;; Defined at:
  8604 ;;		line 87 in file "menuhelper.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;  data            2   58[BANK1 ] PTR struct .
  8607 ;;		 -> data(166), 
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;  func            2   67[BANK1 ] PTR FTN(PTR struct .,)un
  8610 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  8611 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  8612 ;;		 -> statusView(1), NULL(0), 
  8613 ;;  nextState       1   69[BANK1 ] char 
  8614 ;;  timeout         1   66[BANK1 ] unsigned char 
  8615 ;;  pb              1   65[BANK1 ] enum E7879
  8616 ;;  page            1   64[BANK1 ] char 
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  1    wreg      void 
  8619 ;; Registers used:
  8620 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8626 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8627 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8628 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8629 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8630 ;;Total ram usage:       12 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:   10
  8633 ;; This function calls:
  8634 ;;		_OLED_command
  8635 ;;		_channelSetup
  8636 ;;		_channelView
  8637 ;;		_error
  8638 ;;		_getNextState
  8639 ;;		_getPB
  8640 ;;		_getStateFunc
  8641 ;;		_setDPOffset
  8642 ;;		_setFudgeFactor
  8643 ;;		_setLensDia
  8644 ;;		_setOutputPower
  8645 ;;		_setSkyTemp
  8646 ;;		_setup
  8647 ;;		_statusView
  8648 ;;		_timeSince
  8649 ;; This function is called by:
  8650 ;;		_main
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           
  8655                           ;psect for function _menu
  8656  0834                     _menu:	
  8657                           
  8658                           ;menuhelper.c: 93:  enum e_buttonPress pb;;menuhelper.c: 94:  t_stateFuncPtr func;;menuh
      +                          elper.c: 97:  if (sleep) {
  8659                           
  8660                           ;incstack = 0
  8661                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8662  0834  0143               	movlb	3	; select bank3
  8663  0835  0869               	movf	menu@sleep^(0+384),w
  8664  0836  1903               	btfsc	3,2
  8665  0837  285F               	goto	l8400
  8666                           
  8667                           ;menuhelper.c: 98:   if (timeSince(userActivity) < 1200) {
  8668  0838  0142               	movlb	2	; select bank2
  8669  0839  086A               	movf	(_userActivity+3)^(0+256),w	;volatile
  8670  083A  0140               	movlb	0	; select bank0
  8671  083B  00AB               	movwf	timeSince@since+3
  8672  083C  0142               	movlb	2	; select bank2
  8673  083D  0869               	movf	(_userActivity+2)^(0+256),w	;volatile
  8674  083E  0140               	movlb	0	; select bank0
  8675  083F  00AA               	movwf	timeSince@since+2
  8676  0840  0142               	movlb	2	; select bank2
  8677  0841  0868               	movf	(_userActivity+1)^(0+256),w	;volatile
  8678  0842  0140               	movlb	0	; select bank0
  8679  0843  00A9               	movwf	timeSince@since+1
  8680  0844  0142               	movlb	2	; select bank2
  8681  0845  0867               	movf	_userActivity^(0+256),w	;volatile
  8682  0846  0140               	movlb	0	; select bank0
  8683  0847  00A8               	movwf	timeSince@since
  8684  0848  31A8  2002  3188   	fcall	_timeSince
  8685  084B  0140               	movlb	0	; select bank0
  8686  084C  082B               	movf	?_timeSince+3,w
  8687  084D  1D03               	btfss	3,2
  8688  084E  0008               	return
  8689  084F  082A               	movf	?_timeSince+2,w
  8690  0850  1D03               	btfss	3,2
  8691  0851  0008               	return
  8692  0852  30B0               	movlw	176
  8693  0853  0228               	subwf	?_timeSince,w
  8694  0854  3004               	movlw	4
  8695  0855  3B29               	subwfb	?_timeSince+1,w
  8696  0856  1803               	btfsc	3,0
  8697  0857  0008               	return
  8698                           
  8699                           ;menuhelper.c: 100:    sleep = 0;
  8700  0858  0143               	movlb	3	; select bank3
  8701  0859  01E9               	clrf	menu@sleep^(0+384)
  8702                           
  8703                           ;menuhelper.c: 101:    OLED_command(0x08 | 0x04);
  8704  085A  300C               	movlw	12
  8705  085B  31B1  2115  3188   	fcall	_OLED_command
  8706                           
  8707                           ;menuhelper.c: 102:   } else {
  8708  085E  2886               	goto	l8408
  8709  085F                     l8400:	
  8710                           
  8711                           ;menuhelper.c: 106:   if (timeSince(userActivity) > 1200) {
  8712  085F  0142               	movlb	2	; select bank2
  8713  0860  086A               	movf	(_userActivity+3)^(0+256),w	;volatile
  8714  0861  0140               	movlb	0	; select bank0
  8715  0862  00AB               	movwf	timeSince@since+3
  8716  0863  0142               	movlb	2	; select bank2
  8717  0864  0869               	movf	(_userActivity+2)^(0+256),w	;volatile
  8718  0865  0140               	movlb	0	; select bank0
  8719  0866  00AA               	movwf	timeSince@since+2
  8720  0867  0142               	movlb	2	; select bank2
  8721  0868  0868               	movf	(_userActivity+1)^(0+256),w	;volatile
  8722  0869  0140               	movlb	0	; select bank0
  8723  086A  00A9               	movwf	timeSince@since+1
  8724  086B  0142               	movlb	2	; select bank2
  8725  086C  0867               	movf	_userActivity^(0+256),w	;volatile
  8726  086D  0140               	movlb	0	; select bank0
  8727  086E  00A8               	movwf	timeSince@since
  8728  086F  31A8  2002  3188   	fcall	_timeSince
  8729  0872  0140               	movlb	0	; select bank0
  8730  0873  082B               	movf	?_timeSince+3,w
  8731  0874  1D03               	btfss	3,2
  8732  0875  287F               	goto	l8402
  8733  0876  082A               	movf	?_timeSince+2,w
  8734  0877  1D03               	btfss	3,2
  8735  0878  287F               	goto	l8402
  8736  0879  30B1               	movlw	177
  8737  087A  0228               	subwf	?_timeSince,w
  8738  087B  3004               	movlw	4
  8739  087C  3B29               	subwfb	?_timeSince+1,w
  8740  087D  1C03               	btfss	3,0
  8741  087E  2886               	goto	l8408
  8742  087F                     l8402:	
  8743                           
  8744                           ;menuhelper.c: 107:    sleep = 1;
  8745  087F  0143               	movlb	3	; select bank3
  8746  0880  01E9               	clrf	menu@sleep^(0+384)
  8747  0881  0AE9               	incf	menu@sleep^(0+384),f
  8748                           
  8749                           ;menuhelper.c: 108:    OLED_command(0x08 | 0x00);
  8750  0882  3008               	movlw	8
  8751  0883  31B1  2115         	fcall	_OLED_command
  8752  0885  0008               	return
  8753  0886                     l8408:	
  8754                           
  8755                           ;menuhelper.c: 114:  func = getStateFunc(state);
  8756  0886  0142               	movlb	2	; select bank2
  8757  0887  086B               	movf	menu@state^(0+256),w
  8758  0888  31B4  24E7  3188   	fcall	_getStateFunc
  8759  088B  0140               	movlb	0	; select bank0
  8760  088C  0838               	movf	?_getStateFunc+1,w
  8761  088D  0141               	movlb	1	; select bank1
  8762  088E  00E4               	movwf	(menu@func+1)^(0+128)
  8763  088F  0140               	movlb	0	; select bank0
  8764  0890  0837               	movf	?_getStateFunc,w
  8765  0891  0141               	movlb	1	; select bank1
  8766  0892  00E3               	movwf	menu@func^(0+128)
  8767                           
  8768                           ;menuhelper.c: 115:  if (func)
  8769  0893  0863               	movf	menu@func^(0+128),w
  8770  0894  0464               	iorwf	(menu@func+1)^(0+128),w
  8771  0895  1903               	btfsc	3,2
  8772  0896  28A5               	goto	l8414
  8773                           
  8774                           ;menuhelper.c: 116:   page = (*func)(data);
  8775  0897  085B               	movf	(menu@data+1)^(0+128),w
  8776  0898  00CE               	movwf	(setFudgeFactor@data+1)^(0+128)
  8777  0899  085A               	movf	menu@data^(0+128),w
  8778  089A  00CD               	movwf	setFudgeFactor@data^(0+128)
  8779  089B  0864               	movf	(menu@func+1)^(0+128),w
  8780  089C  008A               	movwf	10
  8781  089D  0863               	movf	menu@func^(0+128),w
  8782  089E  000A               	callw
  8783  089F  3188               	pagesel	$
  8784  08A0  0141               	movlb	1	; select bank1
  8785  08A1  00DC               	movwf	??_menu^(0+128)
  8786  08A2  085C               	movf	??_menu^(0+128),w
  8787  08A3  00E0               	movwf	menu@page^(0+128)
  8788  08A4  28A9               	goto	l8416
  8789  08A5                     l8414:	
  8790                           
  8791                           ;menuhelper.c: 118:   error(ERR_MENU);
  8792  08A5  300B               	movlw	11
  8793  08A6  31B3  23F9  3188   	fcall	_error
  8794  08A9                     l8416:	
  8795                           
  8796                           ;menuhelper.c: 120:  g_screenRefresh = 0;
  8797  08A9  0141               	movlb	1	; select bank1
  8798  08AA  01EF               	clrf	_g_screenRefresh^(0+128)
  8799                           
  8800                           ;menuhelper.c: 121:  pb = getPB();
  8801  08AB  31B1  214A  3188   	fcall	_getPB
  8802  08AE  0141               	movlb	1	; select bank1
  8803  08AF  00DC               	movwf	??_menu^(0+128)
  8804  08B0  085C               	movf	??_menu^(0+128),w
  8805  08B1  00E1               	movwf	menu@pb^(0+128)
  8806                           
  8807                           ;menuhelper.c: 122:  timeout = (timeSince(userActivity) > 300);
  8808  08B2  0142               	movlb	2	; select bank2
  8809  08B3  086A               	movf	(_userActivity+3)^(0+256),w	;volatile
  8810  08B4  0140               	movlb	0	; select bank0
  8811  08B5  00AB               	movwf	timeSince@since+3
  8812  08B6  0142               	movlb	2	; select bank2
  8813  08B7  0869               	movf	(_userActivity+2)^(0+256),w	;volatile
  8814  08B8  0140               	movlb	0	; select bank0
  8815  08B9  00AA               	movwf	timeSince@since+2
  8816  08BA  0142               	movlb	2	; select bank2
  8817  08BB  0868               	movf	(_userActivity+1)^(0+256),w	;volatile
  8818  08BC  0140               	movlb	0	; select bank0
  8819  08BD  00A9               	movwf	timeSince@since+1
  8820  08BE  0142               	movlb	2	; select bank2
  8821  08BF  0867               	movf	_userActivity^(0+256),w	;volatile
  8822  08C0  0140               	movlb	0	; select bank0
  8823  08C1  00A8               	movwf	timeSince@since
  8824  08C2  31A8  2002  3188   	fcall	_timeSince
  8825  08C5  0140               	movlb	0	; select bank0
  8826  08C6  082B               	movf	?_timeSince+3,w
  8827  08C7  1D03               	btfss	3,2
  8828  08C8  28D2               	goto	u10051
  8829  08C9  082A               	movf	?_timeSince+2,w
  8830  08CA  1D03               	btfss	3,2
  8831  08CB  28D2               	goto	u10051
  8832  08CC  302D               	movlw	45
  8833  08CD  0228               	subwf	?_timeSince,w
  8834  08CE  3001               	movlw	1
  8835  08CF  3B29               	subwfb	?_timeSince+1,w
  8836  08D0  1C03               	btfss	3,0
  8837  08D1  28D4               	goto	u10050
  8838  08D2                     u10051:	
  8839  08D2  3001               	movlw	1
  8840  08D3  28D5               	goto	u10060
  8841  08D4                     u10050:	
  8842  08D4  3000               	movlw	0
  8843  08D5                     u10060:	
  8844  08D5  0141               	movlb	1	; select bank1
  8845  08D6  00DC               	movwf	??_menu^(0+128)
  8846  08D7  085C               	movf	??_menu^(0+128),w
  8847  08D8  00E2               	movwf	menu@timeout^(0+128)
  8848                           
  8849                           ;menuhelper.c: 124:  nextState = getNextState(state, page, pb, timeout);
  8850  08D9  0860               	movf	menu@page^(0+128),w
  8851  08DA  00DC               	movwf	??_menu^(0+128)
  8852  08DB  085C               	movf	??_menu^(0+128),w
  8853  08DC  0140               	movlb	0	; select bank0
  8854  08DD  00B7               	movwf	getNextState@intState
  8855  08DE  0141               	movlb	1	; select bank1
  8856  08DF  0861               	movf	menu@pb^(0+128),w
  8857  08E0  00DD               	movwf	(??_menu+1)^(0+128)
  8858  08E1  085D               	movf	(??_menu+1)^(0+128),w
  8859  08E2  0140               	movlb	0	; select bank0
  8860  08E3  00B8               	movwf	getNextState@pb
  8861  08E4  0141               	movlb	1	; select bank1
  8862  08E5  0862               	movf	menu@timeout^(0+128),w
  8863  08E6  00DE               	movwf	(??_menu+2)^(0+128)
  8864  08E7  085E               	movf	(??_menu+2)^(0+128),w
  8865  08E8  0140               	movlb	0	; select bank0
  8866  08E9  00B9               	movwf	getNextState@timeout
  8867  08EA  0142               	movlb	2	; select bank2
  8868  08EB  086B               	movf	menu@state^(0+256),w
  8869  08EC  3198  2007  3188   	fcall	_getNextState
  8870  08EF  0141               	movlb	1	; select bank1
  8871  08F0  00DF               	movwf	(??_menu+3)^(0+128)
  8872  08F1  085F               	movf	(??_menu+3)^(0+128),w
  8873  08F2  00E5               	movwf	menu@nextState^(0+128)
  8874                           
  8875                           ;menuhelper.c: 126:  if (nextState > -1) {
  8876  08F3  1BE5               	btfsc	menu@nextState^(0+128),7
  8877  08F4  290F               	goto	l8432
  8878                           
  8879                           ;menuhelper.c: 128:   if (state != nextState) {
  8880  08F5  0865               	movf	menu@nextState^(0+128),w
  8881  08F6  00DC               	movwf	??_menu^(0+128)
  8882  08F7  01DD               	clrf	(??_menu^(0+128)+1)
  8883  08F8  1BDC               	btfsc	??_menu^(0+128),7
  8884  08F9  03DD               	decf	(??_menu^(0+128)+1),f
  8885  08FA  0142               	movlb	2	; select bank2
  8886  08FB  086B               	movf	menu@state^(0+256),w
  8887  08FC  0141               	movlb	1	; select bank1
  8888  08FD  00DE               	movwf	(??_menu+2)^(0+128)
  8889  08FE  01DF               	clrf	((??_menu+2)^(0+128)+1)
  8890  08FF  085D               	movf	(??_menu+1)^(0+128),w
  8891  0900  065F               	xorwf	(??_menu+3)^(0+128),w
  8892  0901  1D03               	skipz
  8893  0902  2905               	goto	u10085
  8894  0903  085C               	movf	??_menu^(0+128),w
  8895  0904  065E               	xorwf	(??_menu+2)^(0+128),w
  8896  0905                     u10085:	
  8897  0905  1903               	skipnz
  8898  0906  0008               	return
  8899                           
  8900                           ;menuhelper.c: 129:    g_screenRefresh = 1;
  8901  0907  01EF               	clrf	_g_screenRefresh^(0+128)
  8902  0908  0AEF               	incf	_g_screenRefresh^(0+128),f
  8903                           
  8904                           ;menuhelper.c: 130:    state = nextState;
  8905  0909  0865               	movf	menu@nextState^(0+128),w
  8906  090A  00DC               	movwf	??_menu^(0+128)
  8907  090B  085C               	movf	??_menu^(0+128),w
  8908  090C  0142               	movlb	2	; select bank2
  8909  090D  00EB               	movwf	menu@state^(0+256)
  8910  090E  0008               	return
  8911  090F                     l8432:	
  8912                           
  8913                           ;menuhelper.c: 133:   error(ERR_MENU);
  8914  090F  300B               	movlw	11
  8915  0910  31B3  23F9         	fcall	_error
  8916  0912  0008               	return
  8917  0913                     __end_of_menu:	
  8918                           
  8919                           	psect	text10
  8920  2A08                     __ptext10:	
  8921 ;; *************** function _setFudgeFactor *****************
  8922 ;; Defined at:
  8923 ;;		line 317 in file "menu.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;  data            2   45[BANK1 ] PTR struct .
  8926 ;;		 -> data(166), 
  8927 ;; Auto vars:     Size  Location     Type
  8928 ;;		None
  8929 ;; Return value:  Size  Location     Type
  8930 ;;                  1    wreg      unsigned char 
  8931 ;; Registers used:
  8932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8933 ;; Tracked objects:
  8934 ;;		On entry : 0/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8938 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8940 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8941 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8942 ;;Total ram usage:        3 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; Hardware stack levels required when called:    8
  8945 ;; This function calls:
  8946 ;;		_OLED_print_xy
  8947 ;;		_ftoa
  8948 ;;		_returnToPage
  8949 ;;		_spinInput
  8950 ;; This function is called by:
  8951 ;;		_menu
  8952 ;; This function uses a non-reentrant model
  8953 ;;
  8954                           
  8955                           
  8956                           ;psect for function _setFudgeFactor
  8957  2A08                     _setFudgeFactor:	
  8958                           
  8959                           ;menu.c: 317: uint8_t setFudgeFactor(t_globalData *data);menu.c: 318: {;menu.c: 319:  re
      +                          turnToPage(0);
  8960                           
  8961                           ;incstack = 0
  8962                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8963  2A08  3000               	movlw	0
  8964  2A09  3188  2002  31AA   	fcall	_returnToPage
  8965                           
  8966                           ;menu.c: 320:  if (g_screenRefresh)
  8967  2A0C  0141               	movlb	1	; select bank1
  8968  2A0D  086F               	movf	_g_screenRefresh^(0+128),w
  8969  2A0E  1903               	btfsc	3,2
  8970  2A0F  2A1A               	goto	l7884
  8971                           
  8972                           ;menu.c: 321:   OLED_print_xy(0, 0, "Fudge factor");
  8973  2A10  0140               	movlb	0	; select bank0
  8974  2A11  01B1               	clrf	OLED_print_xy@row
  8975  2A12  30C0               	movlw	low ((STR_48+24)| (0+32768))
  8976  2A13  00B2               	movwf	OLED_print_xy@s
  8977  2A14  30B8               	movlw	high ((STR_48+24)| (0+32768))
  8978  2A15  00B3               	movwf	OLED_print_xy@s+1
  8979  2A16  3000               	movlw	0
  8980  2A17  31B3  2328  31AA   	fcall	_OLED_print_xy
  8981  2A1A                     l7884:	
  8982                           
  8983                           ;menu.c: 322:  spinInput(&data->fudgeFactor, 0.1, 5.0, 0.1);
  8984  2A1A  0141               	movlb	1	; select bank1
  8985  2A1B  084D               	movf	setFudgeFactor@data^(0+128),w
  8986  2A1C  3E25               	addlw	37
  8987  2A1D  00BE               	movwf	spinInput@input^(0+128)
  8988  2A1E  3000               	movlw	0
  8989  2A1F  3D4E               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  8990  2A20  00BF               	movwf	(spinInput@input+1)^(0+128)
  8991  2A21  303D               	movlw	61
  8992  2A22  00C3               	movwf	(spinInput@min+3)^(0+128)
  8993  2A23  30CC               	movlw	204
  8994  2A24  00C2               	movwf	(spinInput@min+2)^(0+128)
  8995  2A25  30CC               	movlw	204
  8996  2A26  00C1               	movwf	(spinInput@min+1)^(0+128)
  8997  2A27  30CD               	movlw	205
  8998  2A28  00C0               	movwf	spinInput@min^(0+128)
  8999  2A29  3040               	movlw	64
  9000  2A2A  00C7               	movwf	(spinInput@max+3)^(0+128)
  9001  2A2B  30A0               	movlw	160
  9002  2A2C  00C6               	movwf	(spinInput@max+2)^(0+128)
  9003  2A2D  3000               	movlw	0
  9004  2A2E  00C5               	movwf	(spinInput@max+1)^(0+128)
  9005  2A2F  3000               	movlw	0
  9006  2A30  00C4               	movwf	spinInput@max^(0+128)
  9007  2A31  303D               	movlw	61
  9008  2A32  00CB               	movwf	(spinInput@step+3)^(0+128)
  9009  2A33  30CC               	movlw	204
  9010  2A34  00CA               	movwf	(spinInput@step+2)^(0+128)
  9011  2A35  30CC               	movlw	204
  9012  2A36  00C9               	movwf	(spinInput@step+1)^(0+128)
  9013  2A37  30CD               	movlw	205
  9014  2A38  00C8               	movwf	spinInput@step^(0+128)
  9015  2A39  31A0  2014  31AA   	fcall	_spinInput
  9016                           
  9017                           ;menu.c: 323:  ftoa(str, data->fudgeFactor, 3, 1);
  9018  2A3C  0141               	movlb	1	; select bank1
  9019  2A3D  084D               	movf	setFudgeFactor@data^(0+128),w
  9020  2A3E  3E25               	addlw	37
  9021  2A3F  0086               	movwf	6
  9022  2A40  3000               	movlw	0
  9023  2A41  3D4E               	addwfc	(setFudgeFactor@data+1)^(0+128),w
  9024  2A42  0087               	movwf	7
  9025  2A43  3F40               	moviw [0]fsr1
  9026  2A44  00BF               	movwf	ftoa@fValue^(0+128)
  9027  2A45  3F41               	moviw [1]fsr1
  9028  2A46  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9029  2A47  3F42               	moviw [2]fsr1
  9030  2A48  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9031  2A49  3F43               	moviw [3]fsr1
  9032  2A4A  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9033  2A4B  3003               	movlw	3
  9034  2A4C  00CF               	movwf	??_setFudgeFactor^(0+128)
  9035  2A4D  084F               	movf	??_setFudgeFactor^(0+128),w
  9036  2A4E  00C3               	movwf	ftoa@width^(0+128)
  9037  2A4F  01C4               	clrf	ftoa@prec^(0+128)
  9038  2A50  0AC4               	incf	ftoa@prec^(0+128),f
  9039  2A51  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9040  2A52  31A1  21F3  31AA   	fcall	_ftoa
  9041                           
  9042                           ;menu.c: 324:  OLED_print_xy(0, 1, "\004");
  9043  2A55  0140               	movlb	0	; select bank0
  9044  2A56  01B1               	clrf	OLED_print_xy@row
  9045  2A57  0AB1               	incf	OLED_print_xy@row,f
  9046  2A58  3060               	movlw	low ((STR_54+5)| (0+32768))
  9047  2A59  00B2               	movwf	OLED_print_xy@s
  9048  2A5A  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9049  2A5B  00B3               	movwf	OLED_print_xy@s+1
  9050  2A5C  3000               	movlw	0
  9051  2A5D  31B3  2328  31AA   	fcall	_OLED_print_xy
  9052                           
  9053                           ;menu.c: 325:  OLED_print_xy(1, 1, str);
  9054  2A60  0140               	movlb	0	; select bank0
  9055  2A61  01B1               	clrf	OLED_print_xy@row
  9056  2A62  0AB1               	incf	OLED_print_xy@row,f
  9057  2A63  303F               	movlw	low _str
  9058  2A64  00B2               	movwf	OLED_print_xy@s
  9059  2A65  3002               	movlw	high _str
  9060  2A66  00B3               	movwf	OLED_print_xy@s+1
  9061  2A67  3001               	movlw	1
  9062  2A68  31B3  2328  31AA   	fcall	_OLED_print_xy
  9063                           
  9064                           ;menu.c: 326:  OLED_print_xy(4, 1, " \003      ");
  9065  2A6B  0140               	movlb	0	; select bank0
  9066  2A6C  01B1               	clrf	OLED_print_xy@row
  9067  2A6D  0AB1               	incf	OLED_print_xy@row,f
  9068  2A6E  3003               	movlw	low (STR_61| (0+32768))
  9069  2A6F  00B2               	movwf	OLED_print_xy@s
  9070  2A70  30BB               	movlw	high (STR_61| (0+32768))
  9071  2A71  00B3               	movwf	OLED_print_xy@s+1
  9072  2A72  3004               	movlw	4
  9073  2A73  31B3  2328         	fcall	_OLED_print_xy
  9074                           
  9075                           ;menu.c: 327:  return 0;
  9076  2A75  3000               	movlw	0
  9077  2A76  0008               	return
  9078  2A77                     __end_of_setFudgeFactor:	
  9079                           
  9080                           	psect	text11
  9081  299A                     __ptext11:	
  9082 ;; *************** function _setSkyTemp *****************
  9083 ;; Defined at:
  9084 ;;		line 300 in file "menu.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;  data            2   45[BANK1 ] PTR struct .
  9087 ;;		 -> data(166), 
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;		None
  9090 ;; Return value:  Size  Location     Type
  9091 ;;                  1    wreg      unsigned char 
  9092 ;; Registers used:
  9093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9094 ;; Tracked objects:
  9095 ;;		On entry : 0/0
  9096 ;;		On exit  : 0/0
  9097 ;;		Unchanged: 0/0
  9098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9099 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9101 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9102 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9103 ;;Total ram usage:        3 bytes
  9104 ;; Hardware stack levels used:    1
  9105 ;; Hardware stack levels required when called:    8
  9106 ;; This function calls:
  9107 ;;		_OLED_print_xy
  9108 ;;		_ftoa
  9109 ;;		_returnToPage
  9110 ;;		_spinInput
  9111 ;; This function is called by:
  9112 ;;		_menu
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           
  9117                           ;psect for function _setSkyTemp
  9118  299A                     _setSkyTemp:	
  9119                           
  9120                           ;menu.c: 300: uint8_t setSkyTemp(t_globalData *data);menu.c: 301: {;menu.c: 302:  return
      +                          ToPage(0);
  9121                           
  9122                           ;incstack = 0
  9123                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9124  299A  3000               	movlw	0
  9125  299B  3188  2002  31A9   	fcall	_returnToPage
  9126                           
  9127                           ;menu.c: 303:  if (g_screenRefresh)
  9128  299E  0141               	movlb	1	; select bank1
  9129  299F  086F               	movf	_g_screenRefresh^(0+128),w
  9130  29A0  1903               	btfsc	3,2
  9131  29A1  29AC               	goto	l7870
  9132                           
  9133                           ;menu.c: 304:   OLED_print_xy(0, 0, "Sky temp.   ");
  9134  29A2  0140               	movlb	0	; select bank0
  9135  29A3  01B1               	clrf	OLED_print_xy@row
  9136  29A4  3055               	movlw	low (STR_56| (0+32768))
  9137  29A5  00B2               	movwf	OLED_print_xy@s
  9138  29A6  30BA               	movlw	high (STR_56| (0+32768))
  9139  29A7  00B3               	movwf	OLED_print_xy@s+1
  9140  29A8  3000               	movlw	0
  9141  29A9  31B3  2328  31A9   	fcall	_OLED_print_xy
  9142  29AC                     l7870:	
  9143                           
  9144                           ;menu.c: 305:  spinInput(&data->skyTemp, -50, -20, 1);
  9145  29AC  0141               	movlb	1	; select bank1
  9146  29AD  084D               	movf	setSkyTemp@data^(0+128),w
  9147  29AE  3E21               	addlw	33
  9148  29AF  00BE               	movwf	spinInput@input^(0+128)
  9149  29B0  3000               	movlw	0
  9150  29B1  3D4E               	addwfc	(setSkyTemp@data+1)^(0+128),w
  9151  29B2  00BF               	movwf	(spinInput@input+1)^(0+128)
  9152  29B3  30C2               	movlw	194
  9153  29B4  00C3               	movwf	(spinInput@min+3)^(0+128)
  9154  29B5  3048               	movlw	72
  9155  29B6  00C2               	movwf	(spinInput@min+2)^(0+128)
  9156  29B7  3000               	movlw	0
  9157  29B8  00C1               	movwf	(spinInput@min+1)^(0+128)
  9158  29B9  3000               	movlw	0
  9159  29BA  00C0               	movwf	spinInput@min^(0+128)
  9160  29BB  30C1               	movlw	193
  9161  29BC  00C7               	movwf	(spinInput@max+3)^(0+128)
  9162  29BD  30A0               	movlw	160
  9163  29BE  00C6               	movwf	(spinInput@max+2)^(0+128)
  9164  29BF  3000               	movlw	0
  9165  29C0  00C5               	movwf	(spinInput@max+1)^(0+128)
  9166  29C1  3000               	movlw	0
  9167  29C2  00C4               	movwf	spinInput@max^(0+128)
  9168  29C3  303F               	movlw	63
  9169  29C4  00CB               	movwf	(spinInput@step+3)^(0+128)
  9170  29C5  3080               	movlw	128
  9171  29C6  00CA               	movwf	(spinInput@step+2)^(0+128)
  9172  29C7  3000               	movlw	0
  9173  29C8  00C9               	movwf	(spinInput@step+1)^(0+128)
  9174  29C9  3000               	movlw	0
  9175  29CA  00C8               	movwf	spinInput@step^(0+128)
  9176  29CB  31A0  2014  31A9   	fcall	_spinInput
  9177                           
  9178                           ;menu.c: 306:  ftoa(str, data->skyTemp, 3, 0);
  9179  29CE  0141               	movlb	1	; select bank1
  9180  29CF  084D               	movf	setSkyTemp@data^(0+128),w
  9181  29D0  3E21               	addlw	33
  9182  29D1  0086               	movwf	6
  9183  29D2  3000               	movlw	0
  9184  29D3  3D4E               	addwfc	(setSkyTemp@data+1)^(0+128),w
  9185  29D4  0087               	movwf	7
  9186  29D5  3F40               	moviw [0]fsr1
  9187  29D6  00BF               	movwf	ftoa@fValue^(0+128)
  9188  29D7  3F41               	moviw [1]fsr1
  9189  29D8  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9190  29D9  3F42               	moviw [2]fsr1
  9191  29DA  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9192  29DB  3F43               	moviw [3]fsr1
  9193  29DC  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9194  29DD  3003               	movlw	3
  9195  29DE  00CF               	movwf	??_setSkyTemp^(0+128)
  9196  29DF  084F               	movf	??_setSkyTemp^(0+128),w
  9197  29E0  00C3               	movwf	ftoa@width^(0+128)
  9198  29E1  01C4               	clrf	ftoa@prec^(0+128)
  9199  29E2  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9200  29E3  31A1  21F3  31A9   	fcall	_ftoa
  9201                           
  9202                           ;menu.c: 307:  OLED_print_xy(0, 1, "\004");
  9203  29E6  0140               	movlb	0	; select bank0
  9204  29E7  01B1               	clrf	OLED_print_xy@row
  9205  29E8  0AB1               	incf	OLED_print_xy@row,f
  9206  29E9  3060               	movlw	low ((STR_54+5)| (0+32768))
  9207  29EA  00B2               	movwf	OLED_print_xy@s
  9208  29EB  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9209  29EC  00B3               	movwf	OLED_print_xy@s+1
  9210  29ED  3000               	movlw	0
  9211  29EE  31B3  2328  31A9   	fcall	_OLED_print_xy
  9212                           
  9213                           ;menu.c: 308:  OLED_print_xy(1, 1, str);
  9214  29F1  0140               	movlb	0	; select bank0
  9215  29F2  01B1               	clrf	OLED_print_xy@row
  9216  29F3  0AB1               	incf	OLED_print_xy@row,f
  9217  29F4  303F               	movlw	low _str
  9218  29F5  00B2               	movwf	OLED_print_xy@s
  9219  29F6  3002               	movlw	high _str
  9220  29F7  00B3               	movwf	OLED_print_xy@s+1
  9221  29F8  3001               	movlw	1
  9222  29F9  31B3  2328  31A9   	fcall	_OLED_print_xy
  9223                           
  9224                           ;menu.c: 309:  OLED_print_xy(4, 1, "\001 \003     ");
  9225  29FC  0140               	movlb	0	; select bank0
  9226  29FD  01B1               	clrf	OLED_print_xy@row
  9227  29FE  0AB1               	incf	OLED_print_xy@row,f
  9228  29FF  30FA               	movlw	low (STR_58| (0+32768))
  9229  2A00  00B2               	movwf	OLED_print_xy@s
  9230  2A01  30BA               	movlw	high (STR_58| (0+32768))
  9231  2A02  00B3               	movwf	OLED_print_xy@s+1
  9232  2A03  3004               	movlw	4
  9233  2A04  31B3  2328         	fcall	_OLED_print_xy
  9234                           
  9235                           ;menu.c: 310:  return 0;
  9236  2A06  3000               	movlw	0
  9237  2A07  0008               	return
  9238  2A08                     __end_of_setSkyTemp:	
  9239                           
  9240                           	psect	text12
  9241  292C                     __ptext12:	
  9242 ;; *************** function _setDPOffset *****************
  9243 ;; Defined at:
  9244 ;;		line 283 in file "menu.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;  data            2   45[BANK1 ] PTR struct .
  9247 ;;		 -> data(166), 
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;		None
  9250 ;; Return value:  Size  Location     Type
  9251 ;;                  1    wreg      unsigned char 
  9252 ;; Registers used:
  9253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9259 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9261 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9262 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9263 ;;Total ram usage:        3 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    8
  9266 ;; This function calls:
  9267 ;;		_OLED_print_xy
  9268 ;;		_ftoa
  9269 ;;		_returnToPage
  9270 ;;		_spinInput
  9271 ;; This function is called by:
  9272 ;;		_menu
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           
  9277                           ;psect for function _setDPOffset
  9278  292C                     _setDPOffset:	
  9279                           
  9280                           ;menu.c: 283: uint8_t setDPOffset(t_globalData *data);menu.c: 284: {;menu.c: 285:  retur
      +                          nToPage(0);
  9281                           
  9282                           ;incstack = 0
  9283                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9284  292C  3000               	movlw	0
  9285  292D  3188  2002  31A9   	fcall	_returnToPage
  9286                           
  9287                           ;menu.c: 286:  if (g_screenRefresh)
  9288  2930  0141               	movlb	1	; select bank1
  9289  2931  086F               	movf	_g_screenRefresh^(0+128),w
  9290  2932  1903               	btfsc	3,2
  9291  2933  293E               	goto	l7856
  9292                           
  9293                           ;menu.c: 287:   OLED_print_xy(0, 0, "DP offset   ");
  9294  2934  0140               	movlb	0	; select bank0
  9295  2935  01B1               	clrf	OLED_print_xy@row
  9296  2936  306F               	movlw	low (STR_53| (0+32768))
  9297  2937  00B2               	movwf	OLED_print_xy@s
  9298  2938  30BA               	movlw	high (STR_53| (0+32768))
  9299  2939  00B3               	movwf	OLED_print_xy@s+1
  9300  293A  3000               	movlw	0
  9301  293B  31B3  2328  31A9   	fcall	_OLED_print_xy
  9302  293E                     l7856:	
  9303                           
  9304                           ;menu.c: 288:  spinInput(&data->dpOffset, 0, 10, 0.5);
  9305  293E  0141               	movlb	1	; select bank1
  9306  293F  084D               	movf	setDPOffset@data^(0+128),w
  9307  2940  3E1D               	addlw	29
  9308  2941  00BE               	movwf	spinInput@input^(0+128)
  9309  2942  3000               	movlw	0
  9310  2943  3D4E               	addwfc	(setDPOffset@data+1)^(0+128),w
  9311  2944  00BF               	movwf	(spinInput@input+1)^(0+128)
  9312  2945  3000               	movlw	0
  9313  2946  00C3               	movwf	(spinInput@min+3)^(0+128)
  9314  2947  3000               	movlw	0
  9315  2948  00C2               	movwf	(spinInput@min+2)^(0+128)
  9316  2949  3000               	movlw	0
  9317  294A  00C1               	movwf	(spinInput@min+1)^(0+128)
  9318  294B  3000               	movlw	0
  9319  294C  00C0               	movwf	spinInput@min^(0+128)
  9320  294D  3041               	movlw	65
  9321  294E  00C7               	movwf	(spinInput@max+3)^(0+128)
  9322  294F  3020               	movlw	32
  9323  2950  00C6               	movwf	(spinInput@max+2)^(0+128)
  9324  2951  3000               	movlw	0
  9325  2952  00C5               	movwf	(spinInput@max+1)^(0+128)
  9326  2953  3000               	movlw	0
  9327  2954  00C4               	movwf	spinInput@max^(0+128)
  9328  2955  303F               	movlw	63
  9329  2956  00CB               	movwf	(spinInput@step+3)^(0+128)
  9330  2957  3000               	movlw	0
  9331  2958  00CA               	movwf	(spinInput@step+2)^(0+128)
  9332  2959  3000               	movlw	0
  9333  295A  00C9               	movwf	(spinInput@step+1)^(0+128)
  9334  295B  3000               	movlw	0
  9335  295C  00C8               	movwf	spinInput@step^(0+128)
  9336  295D  31A0  2014  31A9   	fcall	_spinInput
  9337                           
  9338                           ;menu.c: 289:  ftoa(str, data->dpOffset, 4, 1);
  9339  2960  0141               	movlb	1	; select bank1
  9340  2961  084D               	movf	setDPOffset@data^(0+128),w
  9341  2962  0086               	movwf	6
  9342  2963  084E               	movf	(setDPOffset@data+1)^(0+128),w
  9343  2964  0087               	movwf	7
  9344  2965  315D               	addfsr 1,29
  9345  2966  3F40               	moviw [0]fsr1
  9346  2967  00BF               	movwf	ftoa@fValue^(0+128)
  9347  2968  3F41               	moviw [1]fsr1
  9348  2969  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9349  296A  3F42               	moviw [2]fsr1
  9350  296B  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9351  296C  3F43               	moviw [3]fsr1
  9352  296D  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9353  296E  3004               	movlw	4
  9354  296F  00CF               	movwf	??_setDPOffset^(0+128)
  9355  2970  084F               	movf	??_setDPOffset^(0+128),w
  9356  2971  00C3               	movwf	ftoa@width^(0+128)
  9357  2972  01C4               	clrf	ftoa@prec^(0+128)
  9358  2973  0AC4               	incf	ftoa@prec^(0+128),f
  9359  2974  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9360  2975  31A1  21F3  31A9   	fcall	_ftoa
  9361                           
  9362                           ;menu.c: 290:  OLED_print_xy(0, 1, "temp.\004");
  9363  2978  0140               	movlb	0	; select bank0
  9364  2979  01B1               	clrf	OLED_print_xy@row
  9365  297A  0AB1               	incf	OLED_print_xy@row,f
  9366  297B  305B               	movlw	low (STR_54| (0+32768))
  9367  297C  00B2               	movwf	OLED_print_xy@s
  9368  297D  30BB               	movlw	high (STR_54| (0+32768))
  9369  297E  00B3               	movwf	OLED_print_xy@s+1
  9370  297F  3000               	movlw	0
  9371  2980  31B3  2328  31A9   	fcall	_OLED_print_xy
  9372                           
  9373                           ;menu.c: 291:  OLED_print_xy(6, 1, str);
  9374  2983  0140               	movlb	0	; select bank0
  9375  2984  01B1               	clrf	OLED_print_xy@row
  9376  2985  0AB1               	incf	OLED_print_xy@row,f
  9377  2986  303F               	movlw	low _str
  9378  2987  00B2               	movwf	OLED_print_xy@s
  9379  2988  3002               	movlw	high _str
  9380  2989  00B3               	movwf	OLED_print_xy@s+1
  9381  298A  3006               	movlw	6
  9382  298B  31B3  2328  31A9   	fcall	_OLED_print_xy
  9383                           
  9384                           ;menu.c: 292:  OLED_print_xy(10, 1, "\001\003");
  9385  298E  0140               	movlb	0	; select bank0
  9386  298F  01B1               	clrf	OLED_print_xy@row
  9387  2990  0AB1               	incf	OLED_print_xy@row,f
  9388  2991  3086               	movlw	low (STR_55| (0+32768))
  9389  2992  00B2               	movwf	OLED_print_xy@s
  9390  2993  30BB               	movlw	high (STR_55| (0+32768))
  9391  2994  00B3               	movwf	OLED_print_xy@s+1
  9392  2995  300A               	movlw	10
  9393  2996  31B3  2328         	fcall	_OLED_print_xy
  9394                           
  9395                           ;menu.c: 293:  return 0;
  9396  2998  3000               	movlw	0
  9397  2999  0008               	return
  9398  299A                     __end_of_setDPOffset:	
  9399                           
  9400                           	psect	text13
  9401  2D6D                     __ptext13:	
  9402 ;; *************** function _setup *****************
  9403 ;; Defined at:
  9404 ;;		line 259 in file "menu.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;  data            2   45[BANK1 ] PTR struct .
  9407 ;;		 -> data(166), 
  9408 ;; Auto vars:     Size  Location     Type
  9409 ;;		None
  9410 ;; Return value:  Size  Location     Type
  9411 ;;                  1    wreg      unsigned char 
  9412 ;; Registers used:
  9413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9414 ;; Tracked objects:
  9415 ;;		On entry : 0/0
  9416 ;;		On exit  : 0/0
  9417 ;;		Unchanged: 0/0
  9418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9419 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9421 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9422 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9423 ;;Total ram usage:        4 bytes
  9424 ;; Hardware stack levels used:    1
  9425 ;; Hardware stack levels required when called:    9
  9426 ;; This function calls:
  9427 ;;		_OLED_print_xy
  9428 ;;		_ftoa
  9429 ;;		_paging
  9430 ;;		_returnToPage
  9431 ;; This function is called by:
  9432 ;;		_menu
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           
  9437                           ;psect for function _setup
  9438  2D6D                     _setup:	
  9439                           
  9440                           ;menu.c: 259: uint8_t setup(t_globalData *data);menu.c: 260: {;menu.c: 261:  static uint
      +                          8_t page = 0;;menu.c: 263:  returnToPage(page);
  9441                           
  9442                           ;incstack = 0
  9443                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9444  2D6D  0142               	movlb	2	; select bank2
  9445  2D6E  086C               	movf	setup@page^(0+256),w
  9446  2D6F  3188  2002  31AD   	fcall	_returnToPage
  9447                           
  9448                           ;menu.c: 264:  if (g_screenRefresh) {
  9449  2D72  0141               	movlb	1	; select bank1
  9450  2D73  086F               	movf	_g_screenRefresh^(0+128),w
  9451  2D74  1903               	btfsc	3,2
  9452  2D75  2E16               	goto	l7844
  9453                           
  9454                           ;menu.c: 265:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  9455  2D76  0140               	movlb	0	; select bank0
  9456  2D77  01B1               	clrf	OLED_print_xy@row
  9457  2D78  30A8               	movlw	low (STR_48| (0+32768))
  9458  2D79  00B2               	movwf	OLED_print_xy@s
  9459  2D7A  30B8               	movlw	high (STR_48| (0+32768))
  9460  2D7B  00B3               	movwf	OLED_print_xy@s+1
  9461  2D7C  3000               	movlw	0
  9462  2D7D  31B3  2328  31AD   	fcall	_OLED_print_xy
  9463                           
  9464                           ;menu.c: 266:   OLED_print_xy(0, 1, "temp. ");
  9465  2D80  0140               	movlb	0	; select bank0
  9466  2D81  01B1               	clrf	OLED_print_xy@row
  9467  2D82  0AB1               	incf	OLED_print_xy@row,f
  9468  2D83  3069               	movlw	low (STR_49| (0+32768))
  9469  2D84  00B2               	movwf	OLED_print_xy@s
  9470  2D85  30BB               	movlw	high (STR_49| (0+32768))
  9471  2D86  00B3               	movwf	OLED_print_xy@s+1
  9472  2D87  3000               	movlw	0
  9473  2D88  31B3  2328  31AD   	fcall	_OLED_print_xy
  9474                           
  9475                           ;menu.c: 267:   ftoa(str, data->dpOffset, 4, 1);
  9476  2D8B  0141               	movlb	1	; select bank1
  9477  2D8C  084D               	movf	setup@data^(0+128),w
  9478  2D8D  0086               	movwf	6
  9479  2D8E  084E               	movf	(setup@data+1)^(0+128),w
  9480  2D8F  0087               	movwf	7
  9481  2D90  315D               	addfsr 1,29
  9482  2D91  3F40               	moviw [0]fsr1
  9483  2D92  00BF               	movwf	ftoa@fValue^(0+128)
  9484  2D93  3F41               	moviw [1]fsr1
  9485  2D94  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9486  2D95  3F42               	moviw [2]fsr1
  9487  2D96  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9488  2D97  3F43               	moviw [3]fsr1
  9489  2D98  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9490  2D99  3004               	movlw	4
  9491  2D9A  00CF               	movwf	??_setup^(0+128)
  9492  2D9B  084F               	movf	??_setup^(0+128),w
  9493  2D9C  00C3               	movwf	ftoa@width^(0+128)
  9494  2D9D  01C4               	clrf	ftoa@prec^(0+128)
  9495  2D9E  0AC4               	incf	ftoa@prec^(0+128),f
  9496  2D9F  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9497  2DA0  31A1  21F3  31AD   	fcall	_ftoa
  9498                           
  9499                           ;menu.c: 268:   OLED_print_xy(6, 1, str);
  9500  2DA3  0140               	movlb	0	; select bank0
  9501  2DA4  01B1               	clrf	OLED_print_xy@row
  9502  2DA5  0AB1               	incf	OLED_print_xy@row,f
  9503  2DA6  303F               	movlw	low _str
  9504  2DA7  00B2               	movwf	OLED_print_xy@s
  9505  2DA8  3002               	movlw	high _str
  9506  2DA9  00B3               	movwf	OLED_print_xy@s+1
  9507  2DAA  3006               	movlw	6
  9508  2DAB  31B3  2328  31AD   	fcall	_OLED_print_xy
  9509                           
  9510                           ;menu.c: 269:   OLED_print_xy(10, 1, "\001 ");
  9511  2DAE  0140               	movlb	0	; select bank0
  9512  2DAF  01B1               	clrf	OLED_print_xy@row
  9513  2DB0  0AB1               	incf	OLED_print_xy@row,f
  9514  2DB1  3089               	movlw	low (STR_50| (0+32768))
  9515  2DB2  00B2               	movwf	OLED_print_xy@s
  9516  2DB3  30BB               	movlw	high (STR_50| (0+32768))
  9517  2DB4  00B3               	movwf	OLED_print_xy@s+1
  9518  2DB5  300A               	movlw	10
  9519  2DB6  31B3  2328  31AD   	fcall	_OLED_print_xy
  9520                           
  9521                           ;menu.c: 270:   ftoa(str, data->skyTemp, 3, 0);
  9522  2DB9  0141               	movlb	1	; select bank1
  9523  2DBA  084D               	movf	setup@data^(0+128),w
  9524  2DBB  3E21               	addlw	33
  9525  2DBC  0086               	movwf	6
  9526  2DBD  3000               	movlw	0
  9527  2DBE  3D4E               	addwfc	(setup@data+1)^(0+128),w
  9528  2DBF  0087               	movwf	7
  9529  2DC0  3F40               	moviw [0]fsr1
  9530  2DC1  00BF               	movwf	ftoa@fValue^(0+128)
  9531  2DC2  3F41               	moviw [1]fsr1
  9532  2DC3  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9533  2DC4  3F42               	moviw [2]fsr1
  9534  2DC5  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9535  2DC6  3F43               	moviw [3]fsr1
  9536  2DC7  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9537  2DC8  3003               	movlw	3
  9538  2DC9  00CF               	movwf	??_setup^(0+128)
  9539  2DCA  084F               	movf	??_setup^(0+128),w
  9540  2DCB  00C3               	movwf	ftoa@width^(0+128)
  9541  2DCC  01C4               	clrf	ftoa@prec^(0+128)
  9542  2DCD  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9543  2DCE  31A1  21F3  31AD   	fcall	_ftoa
  9544                           
  9545                           ;menu.c: 271:   OLED_print_xy(12 + 0, 1, str);
  9546  2DD1  0140               	movlb	0	; select bank0
  9547  2DD2  01B1               	clrf	OLED_print_xy@row
  9548  2DD3  0AB1               	incf	OLED_print_xy@row,f
  9549  2DD4  303F               	movlw	low _str
  9550  2DD5  00B2               	movwf	OLED_print_xy@s
  9551  2DD6  3002               	movlw	high _str
  9552  2DD7  00B3               	movwf	OLED_print_xy@s+1
  9553  2DD8  300C               	movlw	12
  9554  2DD9  31B3  2328  31AD   	fcall	_OLED_print_xy
  9555                           
  9556                           ;menu.c: 272:   OLED_print_xy(12 + 3, 1, "\001        ");
  9557  2DDC  0140               	movlb	0	; select bank0
  9558  2DDD  01B1               	clrf	OLED_print_xy@row
  9559  2DDE  0AB1               	incf	OLED_print_xy@row,f
  9560  2DDF  30F0               	movlw	low (STR_51| (0+32768))
  9561  2DE0  00B2               	movwf	OLED_print_xy@s
  9562  2DE1  30BA               	movlw	high (STR_51| (0+32768))
  9563  2DE2  00B3               	movwf	OLED_print_xy@s+1
  9564  2DE3  300F               	movlw	15
  9565  2DE4  31B3  2328  31AD   	fcall	_OLED_print_xy
  9566                           
  9567                           ;menu.c: 273:   ftoa(str, data->fudgeFactor, 3, 1);
  9568  2DE7  0141               	movlb	1	; select bank1
  9569  2DE8  084D               	movf	setup@data^(0+128),w
  9570  2DE9  3E25               	addlw	37
  9571  2DEA  0086               	movwf	6
  9572  2DEB  3000               	movlw	0
  9573  2DEC  3D4E               	addwfc	(setup@data+1)^(0+128),w
  9574  2DED  0087               	movwf	7
  9575  2DEE  3F40               	moviw [0]fsr1
  9576  2DEF  00BF               	movwf	ftoa@fValue^(0+128)
  9577  2DF0  3F41               	moviw [1]fsr1
  9578  2DF1  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9579  2DF2  3F42               	moviw [2]fsr1
  9580  2DF3  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9581  2DF4  3F43               	moviw [3]fsr1
  9582  2DF5  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9583  2DF6  3003               	movlw	3
  9584  2DF7  00CF               	movwf	??_setup^(0+128)
  9585  2DF8  084F               	movf	??_setup^(0+128),w
  9586  2DF9  00C3               	movwf	ftoa@width^(0+128)
  9587  2DFA  01C4               	clrf	ftoa@prec^(0+128)
  9588  2DFB  0AC4               	incf	ftoa@prec^(0+128),f
  9589  2DFC  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9590  2DFD  31A1  21F3  31AD   	fcall	_ftoa
  9591                           
  9592                           ;menu.c: 274:   OLED_print_xy(2 * 12 + 0, 1, str);
  9593  2E00  0140               	movlb	0	; select bank0
  9594  2E01  01B1               	clrf	OLED_print_xy@row
  9595  2E02  0AB1               	incf	OLED_print_xy@row,f
  9596  2E03  303F               	movlw	low _str
  9597  2E04  00B2               	movwf	OLED_print_xy@s
  9598  2E05  3002               	movlw	high _str
  9599  2E06  00B3               	movwf	OLED_print_xy@s+1
  9600  2E07  3018               	movlw	24
  9601  2E08  31B3  2328  31AD   	fcall	_OLED_print_xy
  9602                           
  9603                           ;menu.c: 275:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  9604  2E0B  0140               	movlb	0	; select bank0
  9605  2E0C  01B1               	clrf	OLED_print_xy@row
  9606  2E0D  0AB1               	incf	OLED_print_xy@row,f
  9607  2E0E  30FD               	movlw	low ((STR_28+3)| (0+32768))
  9608  2E0F  00B2               	movwf	OLED_print_xy@s
  9609  2E10  30B9               	movlw	high ((STR_28+3)| (0+32768))
  9610  2E11  00B3               	movwf	OLED_print_xy@s+1
  9611  2E12  301C               	movlw	28
  9612  2E13  31B3  2328  31AD   	fcall	_OLED_print_xy
  9613  2E16                     l7844:	
  9614                           
  9615                           ;menu.c: 277:  page = paging(page, 3);
  9616  2E16  3003               	movlw	3
  9617  2E17  0141               	movlb	1	; select bank1
  9618  2E18  00CF               	movwf	??_setup^(0+128)
  9619  2E19  084F               	movf	??_setup^(0+128),w
  9620  2E1A  0140               	movlb	0	; select bank0
  9621  2E1B  00AB               	movwf	paging@lastPage
  9622  2E1C  0142               	movlb	2	; select bank2
  9623  2E1D  086C               	movf	setup@page^(0+256),w
  9624  2E1E  31A8  20C1         	fcall	_paging
  9625  2E20  0141               	movlb	1	; select bank1
  9626  2E21  00D0               	movwf	(??_setup+1)^(0+128)
  9627  2E22  0850               	movf	(??_setup+1)^(0+128),w
  9628  2E23  0142               	movlb	2	; select bank2
  9629  2E24  00EC               	movwf	setup@page^(0+256)
  9630                           
  9631                           ;menu.c: 278:  return page;
  9632  2E25  086C               	movf	setup@page^(0+256),w
  9633  2E26  0008               	return
  9634  2E27                     __end_of_setup:	
  9635                           
  9636                           	psect	text14
  9637  2CC0                     __ptext14:	
  9638 ;; *************** function _setLensDia *****************
  9639 ;; Defined at:
  9640 ;;		line 243 in file "menu.c"
  9641 ;; Parameters:    Size  Location     Type
  9642 ;;  data            2   45[BANK1 ] PTR struct .
  9643 ;;		 -> data(166), 
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;		None
  9646 ;; Return value:  Size  Location     Type
  9647 ;;                  1    wreg      unsigned char 
  9648 ;; Registers used:
  9649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9650 ;; Tracked objects:
  9651 ;;		On entry : 0/0
  9652 ;;		On exit  : 0/0
  9653 ;;		Unchanged: 0/0
  9654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9655 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9656 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9657 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9658 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9659 ;;Total ram usage:       10 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; Hardware stack levels required when called:    8
  9662 ;; This function calls:
  9663 ;;		_OLED_print_xy
  9664 ;;		___wmul
  9665 ;;		_ftoa
  9666 ;;		_returnToPage
  9667 ;;		_spinInput
  9668 ;; This function is called by:
  9669 ;;		_menu
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _setLensDia
  9675  2CC0                     _setLensDia:	
  9676                           
  9677                           ;menu.c: 243: uint8_t setLensDia(t_globalData *data);menu.c: 244: {;menu.c: 245:  return
      +                          ToPage(0);
  9678                           
  9679                           ;incstack = 0
  9680                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9681  2CC0  3000               	movlw	0
  9682  2CC1  3188  2002  31AC   	fcall	_returnToPage
  9683                           
  9684                           ;menu.c: 246:  if (g_screenRefresh)
  9685  2CC4  0141               	movlb	1	; select bank1
  9686  2CC5  086F               	movf	_g_screenRefresh^(0+128),w
  9687  2CC6  1903               	btfsc	3,2
  9688  2CC7  2CD2               	goto	l7808
  9689                           
  9690                           ;menu.c: 247:   OLED_print_xy(0, 0, "Lens diam.  ");
  9691  2CC8  0140               	movlb	0	; select bank0
  9692  2CC9  01B1               	clrf	OLED_print_xy@row
  9693  2CCA  307C               	movlw	low (STR_34| (0+32768))
  9694  2CCB  00B2               	movwf	OLED_print_xy@s
  9695  2CCC  30BA               	movlw	high (STR_34| (0+32768))
  9696  2CCD  00B3               	movwf	OLED_print_xy@s+1
  9697  2CCE  3000               	movlw	0
  9698  2CCF  31B3  2328  31AC   	fcall	_OLED_print_xy
  9699  2CD2                     l7808:	
  9700                           
  9701                           ;menu.c: 248:  spinInput(&data->chData[selectedChannel].lensDia, 1, 16, 0.5);
  9702  2CD2  0141               	movlb	1	; select bank1
  9703  2CD3  086E               	movf	_selectedChannel^(0+128),w
  9704  2CD4  00CF               	movwf	??_setLensDia^(0+128)
  9705  2CD5  01D0               	clrf	(??_setLensDia^(0+128)+1)
  9706  2CD6  084F               	movf	??_setLensDia^(0+128),w
  9707  2CD7  0140               	movlb	0	; select bank0
  9708  2CD8  00B1               	movwf	___wmul@multiplier
  9709  2CD9  0141               	movlb	1	; select bank1
  9710  2CDA  0850               	movf	(??_setLensDia+1)^(0+128),w
  9711  2CDB  0140               	movlb	0	; select bank0
  9712  2CDC  00B2               	movwf	___wmul@multiplier+1
  9713  2CDD  301F               	movlw	31
  9714  2CDE  00B3               	movwf	___wmul@multiplicand
  9715  2CDF  3000               	movlw	0
  9716  2CE0  00B4               	movwf	___wmul@multiplicand+1
  9717  2CE1  31B1  21AD  31AC   	fcall	___wmul
  9718  2CE4  0140               	movlb	0	; select bank0
  9719  2CE5  0831               	movf	?___wmul,w
  9720  2CE6  0141               	movlb	1	; select bank1
  9721  2CE7  074D               	addwf	setLensDia@data^(0+128),w
  9722  2CE8  00D1               	movwf	(??_setLensDia+2)^(0+128)
  9723  2CE9  0140               	movlb	0	; select bank0
  9724  2CEA  0832               	movf	?___wmul+1,w
  9725  2CEB  0141               	movlb	1	; select bank1
  9726  2CEC  3D4E               	addwfc	(setLensDia@data+1)^(0+128),w
  9727  2CED  00D2               	movwf	(??_setLensDia+3)^(0+128)
  9728  2CEE  0851               	movf	(??_setLensDia+2)^(0+128),w
  9729  2CEF  3E3F               	addlw	63
  9730  2CF0  00BE               	movwf	spinInput@input^(0+128)
  9731  2CF1  3000               	movlw	0
  9732  2CF2  3D52               	addwfc	(??_setLensDia+3)^(0+128),w
  9733  2CF3  00BF               	movwf	(spinInput@input+1)^(0+128)
  9734  2CF4  303F               	movlw	63
  9735  2CF5  00C3               	movwf	(spinInput@min+3)^(0+128)
  9736  2CF6  3080               	movlw	128
  9737  2CF7  00C2               	movwf	(spinInput@min+2)^(0+128)
  9738  2CF8  3000               	movlw	0
  9739  2CF9  00C1               	movwf	(spinInput@min+1)^(0+128)
  9740  2CFA  3000               	movlw	0
  9741  2CFB  00C0               	movwf	spinInput@min^(0+128)
  9742  2CFC  3041               	movlw	65
  9743  2CFD  00C7               	movwf	(spinInput@max+3)^(0+128)
  9744  2CFE  3080               	movlw	128
  9745  2CFF  00C6               	movwf	(spinInput@max+2)^(0+128)
  9746  2D00  3000               	movlw	0
  9747  2D01  00C5               	movwf	(spinInput@max+1)^(0+128)
  9748  2D02  3000               	movlw	0
  9749  2D03  00C4               	movwf	spinInput@max^(0+128)
  9750  2D04  303F               	movlw	63
  9751  2D05  00CB               	movwf	(spinInput@step+3)^(0+128)
  9752  2D06  3000               	movlw	0
  9753  2D07  00CA               	movwf	(spinInput@step+2)^(0+128)
  9754  2D08  3000               	movlw	0
  9755  2D09  00C9               	movwf	(spinInput@step+1)^(0+128)
  9756  2D0A  3000               	movlw	0
  9757  2D0B  00C8               	movwf	spinInput@step^(0+128)
  9758  2D0C  31A0  2014  31AC   	fcall	_spinInput
  9759                           
  9760                           ;menu.c: 249:  ftoa(str, data->chData[selectedChannel].lensDia, 4, 1);
  9761  2D0F  0141               	movlb	1	; select bank1
  9762  2D10  086E               	movf	_selectedChannel^(0+128),w
  9763  2D11  00CF               	movwf	??_setLensDia^(0+128)
  9764  2D12  01D0               	clrf	(??_setLensDia^(0+128)+1)
  9765  2D13  084F               	movf	??_setLensDia^(0+128),w
  9766  2D14  0140               	movlb	0	; select bank0
  9767  2D15  00B1               	movwf	___wmul@multiplier
  9768  2D16  0141               	movlb	1	; select bank1
  9769  2D17  0850               	movf	(??_setLensDia+1)^(0+128),w
  9770  2D18  0140               	movlb	0	; select bank0
  9771  2D19  00B2               	movwf	___wmul@multiplier+1
  9772  2D1A  301F               	movlw	31
  9773  2D1B  00B3               	movwf	___wmul@multiplicand
  9774  2D1C  3000               	movlw	0
  9775  2D1D  00B4               	movwf	___wmul@multiplicand+1
  9776  2D1E  31B1  21AD  31AC   	fcall	___wmul
  9777  2D21  0140               	movlb	0	; select bank0
  9778  2D22  0831               	movf	?___wmul,w
  9779  2D23  0141               	movlb	1	; select bank1
  9780  2D24  074D               	addwf	setLensDia@data^(0+128),w
  9781  2D25  00D1               	movwf	(??_setLensDia+2)^(0+128)
  9782  2D26  0140               	movlb	0	; select bank0
  9783  2D27  0832               	movf	?___wmul+1,w
  9784  2D28  0141               	movlb	1	; select bank1
  9785  2D29  3D4E               	addwfc	(setLensDia@data+1)^(0+128),w
  9786  2D2A  00D2               	movwf	(??_setLensDia+3)^(0+128)
  9787  2D2B  0851               	movf	(??_setLensDia+2)^(0+128),w
  9788  2D2C  3E3F               	addlw	63
  9789  2D2D  0086               	movwf	6
  9790  2D2E  3000               	movlw	0
  9791  2D2F  3D52               	addwfc	(??_setLensDia+3)^(0+128),w
  9792  2D30  0087               	movwf	7
  9793  2D31  3F40               	moviw [0]fsr1
  9794  2D32  00D3               	movwf	_setLensDia$2642^(0+128)
  9795  2D33  3F41               	moviw [1]fsr1
  9796  2D34  00D4               	movwf	(_setLensDia$2642+1)^(0+128)
  9797  2D35  3F42               	moviw [2]fsr1
  9798  2D36  00D5               	movwf	(_setLensDia$2642+2)^(0+128)
  9799  2D37  3F43               	moviw [3]fsr1
  9800  2D38  00D6               	movwf	(_setLensDia$2642+3)^(0+128)
  9801                           
  9802                           ;menu.c: 249:  ftoa(str, data->chData[selectedChannel].lensDia, 4, 1);
  9803  2D39  0856               	movf	(_setLensDia$2642+3)^(0+128),w
  9804  2D3A  00C2               	movwf	(ftoa@fValue+3)^(0+128)
  9805  2D3B  0855               	movf	(_setLensDia$2642+2)^(0+128),w
  9806  2D3C  00C1               	movwf	(ftoa@fValue+2)^(0+128)
  9807  2D3D  0854               	movf	(_setLensDia$2642+1)^(0+128),w
  9808  2D3E  00C0               	movwf	(ftoa@fValue+1)^(0+128)
  9809  2D3F  0853               	movf	_setLensDia$2642^(0+128),w
  9810  2D40  00BF               	movwf	ftoa@fValue^(0+128)
  9811  2D41  3004               	movlw	4
  9812  2D42  00CF               	movwf	??_setLensDia^(0+128)
  9813  2D43  084F               	movf	??_setLensDia^(0+128),w
  9814  2D44  00C3               	movwf	ftoa@width^(0+128)
  9815  2D45  01C4               	clrf	ftoa@prec^(0+128)
  9816  2D46  0AC4               	incf	ftoa@prec^(0+128),f
  9817  2D47  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9818  2D48  31A1  21F3  31AC   	fcall	_ftoa
  9819                           
  9820                           ;menu.c: 250:  OLED_print_xy(0, 1, "\004");
  9821  2D4B  0140               	movlb	0	; select bank0
  9822  2D4C  01B1               	clrf	OLED_print_xy@row
  9823  2D4D  0AB1               	incf	OLED_print_xy@row,f
  9824  2D4E  3060               	movlw	low ((STR_54+5)| (0+32768))
  9825  2D4F  00B2               	movwf	OLED_print_xy@s
  9826  2D50  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9827  2D51  00B3               	movwf	OLED_print_xy@s+1
  9828  2D52  3000               	movlw	0
  9829  2D53  31B3  2328  31AC   	fcall	_OLED_print_xy
  9830                           
  9831                           ;menu.c: 251:  OLED_print_xy(1, 1, str);
  9832  2D56  0140               	movlb	0	; select bank0
  9833  2D57  01B1               	clrf	OLED_print_xy@row
  9834  2D58  0AB1               	incf	OLED_print_xy@row,f
  9835  2D59  303F               	movlw	low _str
  9836  2D5A  00B2               	movwf	OLED_print_xy@s
  9837  2D5B  3002               	movlw	high _str
  9838  2D5C  00B3               	movwf	OLED_print_xy@s+1
  9839  2D5D  3001               	movlw	1
  9840  2D5E  31B3  2328  31AC   	fcall	_OLED_print_xy
  9841                           
  9842                           ;menu.c: 252:  OLED_print_xy(5, 1, " inch \003");
  9843  2D61  0140               	movlb	0	; select bank0
  9844  2D62  01B1               	clrf	OLED_print_xy@row
  9845  2D63  0AB1               	incf	OLED_print_xy@row,f
  9846  2D64  3015               	movlw	low (STR_47| (0+32768))
  9847  2D65  00B2               	movwf	OLED_print_xy@s
  9848  2D66  30BB               	movlw	high (STR_47| (0+32768))
  9849  2D67  00B3               	movwf	OLED_print_xy@s+1
  9850  2D68  3005               	movlw	5
  9851  2D69  31B3  2328         	fcall	_OLED_print_xy
  9852                           
  9853                           ;menu.c: 253:  return 0;
  9854  2D6B  3000               	movlw	0
  9855  2D6C  0008               	return
  9856  2D6D                     __end_of_setLensDia:	
  9857                           
  9858                           	psect	text15
  9859  235A                     __ptext15:	
  9860 ;; *************** function _setOutputPower *****************
  9861 ;; Defined at:
  9862 ;;		line 195 in file "menu.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;  data            2   45[BANK1 ] PTR struct .
  9865 ;;		 -> data(166), 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  chData          2   51[BANK1 ] PTR struct .
  9868 ;;		 -> data.chData(124), data(166), 
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  1    wreg      unsigned char 
  9871 ;; Registers used:
  9872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9878 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9879 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9880 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9881 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9882 ;;Total ram usage:        8 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; Hardware stack levels required when called:    8
  9885 ;; This function calls:
  9886 ;;		_OLED_print_xy
  9887 ;;		___fleq
  9888 ;;		___flge
  9889 ;;		___wmul
  9890 ;;		_ftoa
  9891 ;;		_getPB
  9892 ;;		_itoa
  9893 ;;		_returnToPage
  9894 ;;		_spinInput
  9895 ;; This function is called by:
  9896 ;;		_menu
  9897 ;; This function uses a non-reentrant model
  9898 ;;
  9899                           
  9900                           
  9901                           ;psect for function _setOutputPower
  9902  235A                     _setOutputPower:	
  9903                           
  9904                           ;menu.c: 195: uint8_t setOutputPower(t_globalData *data);menu.c: 196: {;menu.c: 197:  t_
      +                          channelData *chData = &data->chData[selectedChannel];
  9905                           
  9906                           ;incstack = 0
  9907                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9908  235A  0141               	movlb	1	; select bank1
  9909  235B  086E               	movf	_selectedChannel^(0+128),w
  9910  235C  00CF               	movwf	??_setOutputPower^(0+128)
  9911  235D  01D0               	clrf	(??_setOutputPower^(0+128)+1)
  9912  235E  084F               	movf	??_setOutputPower^(0+128),w
  9913  235F  0140               	movlb	0	; select bank0
  9914  2360  00B1               	movwf	___wmul@multiplier
  9915  2361  0141               	movlb	1	; select bank1
  9916  2362  0850               	movf	(??_setOutputPower+1)^(0+128),w
  9917  2363  0140               	movlb	0	; select bank0
  9918  2364  00B2               	movwf	___wmul@multiplier+1
  9919  2365  301F               	movlw	31
  9920  2366  00B3               	movwf	___wmul@multiplicand
  9921  2367  3000               	movlw	0
  9922  2368  00B4               	movwf	___wmul@multiplicand+1
  9923  2369  31B1  21AD  31A3   	fcall	___wmul
  9924  236C  0140               	movlb	0	; select bank0
  9925  236D  0831               	movf	?___wmul,w
  9926  236E  0141               	movlb	1	; select bank1
  9927  236F  074D               	addwf	setOutputPower@data^(0+128),w
  9928  2370  00D1               	movwf	(??_setOutputPower+2)^(0+128)
  9929  2371  0140               	movlb	0	; select bank0
  9930  2372  0832               	movf	?___wmul+1,w
  9931  2373  0141               	movlb	1	; select bank1
  9932  2374  3D4E               	addwfc	(setOutputPower@data+1)^(0+128),w
  9933  2375  00D2               	movwf	(??_setOutputPower+3)^(0+128)
  9934  2376  0851               	movf	(??_setOutputPower+2)^(0+128),w
  9935  2377  3E2A               	addlw	42
  9936  2378  00D3               	movwf	setOutputPower@chData^(0+128)
  9937  2379  3000               	movlw	0
  9938  237A  3D52               	addwfc	(??_setOutputPower+3)^(0+128),w
  9939  237B  00D4               	movwf	(setOutputPower@chData+1)^(0+128)
  9940                           
  9941                           ;menu.c: 199:  returnToPage(0);
  9942  237C  3000               	movlw	0
  9943  237D  3188  2002  31A3   	fcall	_returnToPage
  9944                           
  9945                           ;menu.c: 201:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
  9946  2380  0141               	movlb	1	; select bank1
  9947  2381  0853               	movf	setOutputPower@chData^(0+128),w
  9948  2382  0086               	movwf	6
  9949  2383  0854               	movf	(setOutputPower@chData+1)^(0+128),w
  9950  2384  0087               	movwf	7
  9951  2385  315E               	addfsr 1,30
  9952  2386  0301               	decf	1,w
  9953  2387  1903               	btfsc	3,2
  9954  2388  2B91               	goto	l7742
  9955  2389  0853               	movf	setOutputPower@chData^(0+128),w
  9956  238A  0086               	movwf	6
  9957  238B  0854               	movf	(setOutputPower@chData+1)^(0+128),w
  9958  238C  0087               	movwf	7
  9959  238D  315E               	addfsr 1,30
  9960  238E  0801               	movf	1,w
  9961  238F  1D03               	btfss	3,2
  9962  2390  2C98               	goto	l7776
  9963  2391                     l7742:	
  9964                           
  9965                           ;menu.c: 203:   if (g_screenRefresh)
  9966  2391  086F               	movf	_g_screenRefresh^(0+128),w
  9967  2392  1903               	btfsc	3,2
  9968  2393  2B9E               	goto	l7746
  9969                           
  9970                           ;menu.c: 204:    OLED_print_xy(0, 0, "Output power");
  9971  2394  0140               	movlb	0	; select bank0
  9972  2395  01B1               	clrf	OLED_print_xy@row
  9973  2396  30D7               	movlw	low (STR_22| (0+32768))
  9974  2397  00B2               	movwf	OLED_print_xy@s
  9975  2398  30BA               	movlw	high (STR_22| (0+32768))
  9976  2399  00B3               	movwf	OLED_print_xy@s+1
  9977  239A  3000               	movlw	0
  9978  239B  31B3  2328  31A3   	fcall	_OLED_print_xy
  9979  239E                     l7746:	
  9980                           
  9981                           ;menu.c: 205:   spinInput(&chData->Pset, -0.25, chData->Pmax, 0.25);
  9982  239E  0141               	movlb	1	; select bank1
  9983  239F  0853               	movf	setOutputPower@chData^(0+128),w
  9984  23A0  3E10               	addlw	16
  9985  23A1  00BE               	movwf	spinInput@input^(0+128)
  9986  23A2  3000               	movlw	0
  9987  23A3  3D54               	addwfc	(setOutputPower@chData+1)^(0+128),w
  9988  23A4  00BF               	movwf	(spinInput@input+1)^(0+128)
  9989  23A5  30BE               	movlw	190
  9990  23A6  00C3               	movwf	(spinInput@min+3)^(0+128)
  9991  23A7  3080               	movlw	128
  9992  23A8  00C2               	movwf	(spinInput@min+2)^(0+128)
  9993  23A9  3000               	movlw	0
  9994  23AA  00C1               	movwf	(spinInput@min+1)^(0+128)
  9995  23AB  3000               	movlw	0
  9996  23AC  00C0               	movwf	spinInput@min^(0+128)
  9997  23AD  0853               	movf	setOutputPower@chData^(0+128),w
  9998  23AE  0086               	movwf	6
  9999  23AF  0854               	movf	(setOutputPower@chData+1)^(0+128),w
 10000  23B0  0087               	movwf	7
 10001  23B1  3144               	addfsr 1,4
 10002  23B2  3F40               	moviw [0]fsr1
 10003  23B3  00C4               	movwf	spinInput@max^(0+128)
 10004  23B4  3F41               	moviw [1]fsr1
 10005  23B5  00C5               	movwf	(spinInput@max+1)^(0+128)
 10006  23B6  3F42               	moviw [2]fsr1
 10007  23B7  00C6               	movwf	(spinInput@max+2)^(0+128)
 10008  23B8  3F43               	moviw [3]fsr1
 10009  23B9  00C7               	movwf	(spinInput@max+3)^(0+128)
 10010  23BA  303E               	movlw	62
 10011  23BB  00CB               	movwf	(spinInput@step+3)^(0+128)
 10012  23BC  3080               	movlw	128
 10013  23BD  00CA               	movwf	(spinInput@step+2)^(0+128)
 10014  23BE  3000               	movlw	0
 10015  23BF  00C9               	movwf	(spinInput@step+1)^(0+128)
 10016  23C0  3000               	movlw	0
 10017  23C1  00C8               	movwf	spinInput@step^(0+128)
 10018  23C2  31A0  2014  31A3   	fcall	_spinInput
 10019                           
 10020                           ;menu.c: 206:   if (chData->Pset == 0) {
 10021  23C5  0141               	movlb	1	; select bank1
 10022  23C6  0853               	movf	setOutputPower@chData^(0+128),w
 10023  23C7  0086               	movwf	6
 10024  23C8  0854               	movf	(setOutputPower@chData+1)^(0+128),w
 10025  23C9  0087               	movwf	7
 10026  23CA  3150               	addfsr 1,16
 10027  23CB  3F40               	moviw [0]fsr1
 10028  23CC  0140               	movlb	0	; select bank0
 10029  23CD  00A4               	movwf	___fleq@ff1
 10030  23CE  3F41               	moviw [1]fsr1
 10031  23CF  00A5               	movwf	___fleq@ff1+1
 10032  23D0  3F42               	moviw [2]fsr1
 10033  23D1  00A6               	movwf	___fleq@ff1+2
 10034  23D2  3F43               	moviw [3]fsr1
 10035  23D3  00A7               	movwf	___fleq@ff1+3
 10036  23D4  3000               	movlw	0
 10037  23D5  00AB               	movwf	___fleq@ff2+3
 10038  23D6  3000               	movlw	0
 10039  23D7  00AA               	movwf	___fleq@ff2+2
 10040  23D8  3000               	movlw	0
 10041  23D9  00A9               	movwf	___fleq@ff2+1
 10042  23DA  3000               	movlw	0
 10043  23DB  00A8               	movwf	___fleq@ff2
 10044  23DC  31B6  2648  31A3   	fcall	___fleq
 10045  23DF  1C03               	btfss	3,0
 10046  23E0  2C12               	goto	l7758
 10047                           
 10048                           ;menu.c: 207:    itoa(str, selectedChannel + 1, 1);
 10049  23E1  303F               	movlw	low _str
 10050  23E2  0141               	movlb	1	; select bank1
 10051  23E3  00BF               	movwf	itoa@str^(0+128)
 10052  23E4  3002               	movlw	high _str
 10053  23E5  00C0               	movwf	(itoa@str+1)^(0+128)
 10054  23E6  086E               	movf	_selectedChannel^(0+128),w
 10055  23E7  3E01               	addlw	1
 10056  23E8  00CF               	movwf	??_setOutputPower^(0+128)
 10057  23E9  084F               	movf	??_setOutputPower^(0+128),w
 10058  23EA  00C1               	movwf	itoa@value^(0+128)
 10059  23EB  01C2               	clrf	itoa@width^(0+128)
 10060  23EC  0AC2               	incf	itoa@width^(0+128),f
 10061  23ED  31A8  2058  31A3   	fcall	_itoa
 10062                           
 10063                           ;menu.c: 208:    OLED_print_xy(0, 1, "\004Ch. ");
 10064  23F0  0140               	movlb	0	; select bank0
 10065  23F1  01B1               	clrf	OLED_print_xy@row
 10066  23F2  0AB1               	incf	OLED_print_xy@row,f
 10067  23F3  3070               	movlw	low (STR_37| (0+32768))
 10068  23F4  00B2               	movwf	OLED_print_xy@s
 10069  23F5  30BB               	movlw	high (STR_37| (0+32768))
 10070  23F6  00B3               	movwf	OLED_print_xy@s+1
 10071  23F7  3000               	movlw	0
 10072  23F8  31B3  2328  31A3   	fcall	_OLED_print_xy
 10073                           
 10074                           ;menu.c: 209:    OLED_print_xy(5, 1, str);
 10075  23FB  0140               	movlb	0	; select bank0
 10076  23FC  01B1               	clrf	OLED_print_xy@row
 10077  23FD  0AB1               	incf	OLED_print_xy@row,f
 10078  23FE  303F               	movlw	low _str
 10079  23FF  00B2               	movwf	OLED_print_xy@s
 10080  2400  3002               	movlw	high _str
 10081  2401  00B3               	movwf	OLED_print_xy@s+1
 10082  2402  3005               	movlw	5
 10083  2403  31B3  2328  31A3   	fcall	_OLED_print_xy
 10084                           
 10085                           ;menu.c: 210:    OLED_print_xy(6, 1, " off \003");
 10086  2406  0140               	movlb	0	; select bank0
 10087  2407  01B1               	clrf	OLED_print_xy@row
 10088  2408  0AB1               	incf	OLED_print_xy@row,f
 10089  2409  304D               	movlw	low (STR_38| (0+32768))
 10090  240A  00B2               	movwf	OLED_print_xy@s
 10091  240B  30BB               	movlw	high (STR_38| (0+32768))
 10092  240C  00B3               	movwf	OLED_print_xy@s+1
 10093  240D  3006               	movlw	6
 10094  240E  31B3  2328  31A3   	fcall	_OLED_print_xy
 10095                           
 10096                           ;menu.c: 211:   } else if (chData->Pset < 0) {
 10097  2411  2CD5               	goto	l7788
 10098  2412                     l7758:	
 10099  2412  0141               	movlb	1	; select bank1
 10100  2413  0853               	movf	setOutputPower@chData^(0+128),w
 10101  2414  0086               	movwf	6
 10102  2415  0854               	movf	(setOutputPower@chData+1)^(0+128),w
 10103  2416  0087               	movwf	7
 10104  2417  3150               	addfsr 1,16
 10105  2418  3F40               	moviw [0]fsr1
 10106  2419  00B2               	movwf	___flge@ff1^(0+128)
 10107  241A  3F41               	moviw [1]fsr1
 10108  241B  00B3               	movwf	(___flge@ff1+1)^(0+128)
 10109  241C  3F42               	moviw [2]fsr1
 10110  241D  00B4               	movwf	(___flge@ff1+2)^(0+128)
 10111  241E  3F43               	moviw [3]fsr1
 10112  241F  00B5               	movwf	(___flge@ff1+3)^(0+128)
 10113  2420  3000               	movlw	0
 10114  2421  00B9               	movwf	(___flge@ff2+3)^(0+128)
 10115  2422  3000               	movlw	0
 10116  2423  00B8               	movwf	(___flge@ff2+2)^(0+128)
 10117  2424  3000               	movlw	0
 10118  2425  00B7               	movwf	(___flge@ff2+1)^(0+128)
 10119  2426  3000               	movlw	0
 10120  2427  00B6               	movwf	___flge@ff2^(0+128)
 10121  2428  31AA  2277  31A3   	fcall	___flge
 10122  242B  1803               	btfsc	3,0
 10123  242C  2C5E               	goto	l7768
 10124                           
 10125                           ;menu.c: 212:    itoa(str, selectedChannel + 1, 1);
 10126  242D  303F               	movlw	low _str
 10127  242E  0141               	movlb	1	; select bank1
 10128  242F  00BF               	movwf	itoa@str^(0+128)
 10129  2430  3002               	movlw	high _str
 10130  2431  00C0               	movwf	(itoa@str+1)^(0+128)
 10131  2432  086E               	movf	_selectedChannel^(0+128),w
 10132  2433  3E01               	addlw	1
 10133  2434  00CF               	movwf	??_setOutputPower^(0+128)
 10134  2435  084F               	movf	??_setOutputPower^(0+128),w
 10135  2436  00C1               	movwf	itoa@value^(0+128)
 10136  2437  01C2               	clrf	itoa@width^(0+128)
 10137  2438  0AC2               	incf	itoa@width^(0+128),f
 10138  2439  31A8  2058  31A3   	fcall	_itoa
 10139                           
 10140                           ;menu.c: 213:    OLED_print_xy(0, 1, "\004Ch. ");
 10141  243C  0140               	movlb	0	; select bank0
 10142  243D  01B1               	clrf	OLED_print_xy@row
 10143  243E  0AB1               	incf	OLED_print_xy@row,f
 10144  243F  3070               	movlw	low (STR_37| (0+32768))
 10145  2440  00B2               	movwf	OLED_print_xy@s
 10146  2441  30BB               	movlw	high (STR_37| (0+32768))
 10147  2442  00B3               	movwf	OLED_print_xy@s+1
 10148  2443  3000               	movlw	0
 10149  2444  31B3  2328  31A3   	fcall	_OLED_print_xy
 10150                           
 10151                           ;menu.c: 214:    OLED_print_xy(5, 1, str);
 10152  2447  0140               	movlb	0	; select bank0
 10153  2448  01B1               	clrf	OLED_print_xy@row
 10154  2449  0AB1               	incf	OLED_print_xy@row,f
 10155  244A  303F               	movlw	low _str
 10156  244B  00B2               	movwf	OLED_print_xy@s
 10157  244C  3002               	movlw	high _str
 10158  244D  00B3               	movwf	OLED_print_xy@s+1
 10159  244E  3005               	movlw	5
 10160  244F  31B3  2328  31A3   	fcall	_OLED_print_xy
 10161                           
 10162                           ;menu.c: 215:    OLED_print_xy(6, 1, " auto\003");
 10163  2452  0140               	movlb	0	; select bank0
 10164  2453  01B1               	clrf	OLED_print_xy@row
 10165  2454  0AB1               	incf	OLED_print_xy@row,f
 10166  2455  3054               	movlw	low (STR_40| (0+32768))
 10167  2456  00B2               	movwf	OLED_print_xy@s
 10168  2457  30BB               	movlw	high (STR_40| (0+32768))
 10169  2458  00B3               	movwf	OLED_print_xy@s+1
 10170  2459  3006               	movlw	6
 10171  245A  31B3  2328  31A3   	fcall	_OLED_print_xy
 10172                           
 10173                           ;menu.c: 216:   } else {
 10174  245D  2CD5               	goto	l7788
 10175  245E                     l7768:	
 10176                           
 10177                           ;menu.c: 217:    OLED_print_xy(0, 1, "\004");
 10178  245E  0140               	movlb	0	; select bank0
 10179  245F  01B1               	clrf	OLED_print_xy@row
 10180  2460  0AB1               	incf	OLED_print_xy@row,f
 10181  2461  3060               	movlw	low ((STR_54+5)| (0+32768))
 10182  2462  00B2               	movwf	OLED_print_xy@s
 10183  2463  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10184  2464  00B3               	movwf	OLED_print_xy@s+1
 10185  2465  3000               	movlw	0
 10186  2466  31B3  2328  31A3   	fcall	_OLED_print_xy
 10187                           
 10188                           ;menu.c: 218:    ftoa(str, chData->Pset, 4, 1);
 10189  2469  0141               	movlb	1	; select bank1
 10190  246A  0853               	movf	setOutputPower@chData^(0+128),w
 10191  246B  0086               	movwf	6
 10192  246C  0854               	movf	(setOutputPower@chData+1)^(0+128),w
 10193  246D  0087               	movwf	7
 10194  246E  3150               	addfsr 1,16
 10195  246F  3F40               	moviw [0]fsr1
 10196  2470  00BF               	movwf	ftoa@fValue^(0+128)
 10197  2471  3F41               	moviw [1]fsr1
 10198  2472  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 10199  2473  3F42               	moviw [2]fsr1
 10200  2474  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 10201  2475  3F43               	moviw [3]fsr1
 10202  2476  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 10203  2477  3004               	movlw	4
 10204  2478  00CF               	movwf	??_setOutputPower^(0+128)
 10205  2479  084F               	movf	??_setOutputPower^(0+128),w
 10206  247A  00C3               	movwf	ftoa@width^(0+128)
 10207  247B  01C4               	clrf	ftoa@prec^(0+128)
 10208  247C  0AC4               	incf	ftoa@prec^(0+128),f
 10209  247D  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10210  247E  31A1  21F3  31A3   	fcall	_ftoa
 10211                           
 10212                           ;menu.c: 219:    OLED_print_xy(1, 1, str);
 10213  2481  0140               	movlb	0	; select bank0
 10214  2482  01B1               	clrf	OLED_print_xy@row
 10215  2483  0AB1               	incf	OLED_print_xy@row,f
 10216  2484  303F               	movlw	low _str
 10217  2485  00B2               	movwf	OLED_print_xy@s
 10218  2486  3002               	movlw	high _str
 10219  2487  00B3               	movwf	OLED_print_xy@s+1
 10220  2488  3001               	movlw	1
 10221  2489  31B3  2328  31A3   	fcall	_OLED_print_xy
 10222                           
 10223                           ;menu.c: 220:    OLED_print_xy(5, 1, "W man.\003");
 10224  248C  0140               	movlb	0	; select bank0
 10225  248D  01B1               	clrf	OLED_print_xy@row
 10226  248E  0AB1               	incf	OLED_print_xy@row,f
 10227  248F  301D               	movlw	low (STR_42| (0+32768))
 10228  2490  00B2               	movwf	OLED_print_xy@s
 10229  2491  30BB               	movlw	high (STR_42| (0+32768))
 10230  2492  00B3               	movwf	OLED_print_xy@s+1
 10231  2493  3005               	movlw	5
 10232  2494  31B3  2328  31A3   	fcall	_OLED_print_xy
 10233  2497  2CD5               	goto	l7788
 10234  2498                     l7776:	
 10235  2498  0853               	movf	setOutputPower@chData^(0+128),w
 10236  2499  0086               	movwf	6
 10237  249A  0854               	movf	(setOutputPower@chData+1)^(0+128),w
 10238  249B  0087               	movwf	7
 10239  249C  315E               	addfsr 1,30
 10240  249D  3004               	movlw	4
 10241  249E  0601               	xorwf	1,w
 10242  249F  1903               	btfsc	3,2
 10243  24A0  2CAA               	goto	l7780
 10244  24A1  0853               	movf	setOutputPower@chData^(0+128),w
 10245  24A2  0086               	movwf	6
 10246  24A3  0854               	movf	(setOutputPower@chData+1)^(0+128),w
 10247  24A4  0087               	movwf	7
 10248  24A5  315E               	addfsr 1,30
 10249  24A6  3003               	movlw	3
 10250  24A7  0601               	xorwf	1,w
 10251  24A8  1D03               	btfss	3,2
 10252  24A9  2CD7               	goto	l7794
 10253  24AA                     l7780:	
 10254                           
 10255                           ;menu.c: 225:   if (g_screenRefresh) {
 10256  24AA  086F               	movf	_g_screenRefresh^(0+128),w
 10257  24AB  1903               	btfsc	3,2
 10258  24AC  2CC2               	goto	l7784
 10259                           
 10260                           ;menu.c: 226:    OLED_print_xy(0, 0, "Hold button ");
 10261  24AD  0140               	movlb	0	; select bank0
 10262  24AE  01B1               	clrf	OLED_print_xy@row
 10263  24AF  3089               	movlw	low (STR_43| (0+32768))
 10264  24B0  00B2               	movwf	OLED_print_xy@s
 10265  24B1  30BA               	movlw	high (STR_43| (0+32768))
 10266  24B2  00B3               	movwf	OLED_print_xy@s+1
 10267  24B3  3000               	movlw	0
 10268  24B4  31B3  2328  31A3   	fcall	_OLED_print_xy
 10269                           
 10270                           ;menu.c: 227:    OLED_print_xy(0, 1, "to re-enable");
 10271  24B7  0140               	movlb	0	; select bank0
 10272  24B8  01B1               	clrf	OLED_print_xy@row
 10273  24B9  0AB1               	incf	OLED_print_xy@row,f
 10274  24BA  30BD               	movlw	low (STR_44| (0+32768))
 10275  24BB  00B2               	movwf	OLED_print_xy@s
 10276  24BC  30BA               	movlw	high (STR_44| (0+32768))
 10277  24BD  00B3               	movwf	OLED_print_xy@s+1
 10278  24BE  3000               	movlw	0
 10279  24BF  31B3  2328  31A3   	fcall	_OLED_print_xy
 10280  24C2                     l7784:	
 10281                           
 10282                           ;menu.c: 229:   if (getPB() == PB_LONG)
 10283  24C2  31B1  214A  31A3   	fcall	_getPB
 10284  24C5  3A02               	xorlw	2
 10285  24C6  1D03               	skipz
 10286  24C7  2CD5               	goto	l7788
 10287                           
 10288                           ;menu.c: 230:    chData->status = CH_UNCHECKED;
 10289  24C8  0141               	movlb	1	; select bank1
 10290  24C9  0853               	movf	setOutputPower@chData^(0+128),w
 10291  24CA  3E1E               	addlw	30
 10292  24CB  00CF               	movwf	??_setOutputPower^(0+128)
 10293  24CC  3000               	movlw	0
 10294  24CD  3D54               	addwfc	(setOutputPower@chData+1)^(0+128),w
 10295  24CE  00D0               	movwf	(??_setOutputPower+1)^(0+128)
 10296  24CF  084F               	movf	??_setOutputPower^(0+128),w
 10297  24D0  0086               	movwf	6
 10298  24D1  0850               	movf	(??_setOutputPower+1)^(0+128),w
 10299  24D2  0087               	movwf	7
 10300  24D3  3005               	movlw	5
 10301  24D4  0081               	movwf	1
 10302  24D5                     l7788:	
 10303                           
 10304                           ;menu.c: 231:   return 0;
 10305  24D5  3000               	movlw	0
 10306  24D6  0008               	return
 10307  24D7                     l7794:	
 10308                           
 10309                           ;menu.c: 235:   return 1;
 10310  24D7  3001               	movlw	1
 10311  24D8  0008               	return
 10312  24D9                     __end_of_setOutputPower:	
 10313                           
 10314                           	psect	text16
 10315  265D                     __ptext16:	
 10316 ;; *************** function _channelSetup *****************
 10317 ;; Defined at:
 10318 ;;		line 140 in file "menu.c"
 10319 ;; Parameters:    Size  Location     Type
 10320 ;;  data            2   45[BANK1 ] PTR struct .
 10321 ;;		 -> data(166), 
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;  chData          2   51[BANK1 ] PTR struct .
 10324 ;;		 -> data.chData(124), data(166), 
 10325 ;; Return value:  Size  Location     Type
 10326 ;;                  1    wreg      unsigned char 
 10327 ;; Registers used:
 10328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10329 ;; Tracked objects:
 10330 ;;		On entry : 0/0
 10331 ;;		On exit  : 0/0
 10332 ;;		Unchanged: 0/0
 10333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10334 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10335 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10336 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10337 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10338 ;;Total ram usage:        8 bytes
 10339 ;; Hardware stack levels used:    1
 10340 ;; Hardware stack levels required when called:    9
 10341 ;; This function calls:
 10342 ;;		_OLED_print_xy
 10343 ;;		___fleq
 10344 ;;		___flge
 10345 ;;		___wmul
 10346 ;;		_ftoa
 10347 ;;		_itoa
 10348 ;;		_paging
 10349 ;;		_returnToPage
 10350 ;; This function is called by:
 10351 ;;		_menu
 10352 ;; This function uses a non-reentrant model
 10353 ;;
 10354                           
 10355                           
 10356                           ;psect for function _channelSetup
 10357  265D                     _channelSetup:	
 10358                           
 10359                           ;menu.c: 140: uint8_t channelSetup(t_globalData *data);menu.c: 141: {;menu.c: 142:  stat
      +                          ic uint8_t page = 0;;menu.c: 143:  t_channelData *chData = &data->chData[selectedChannel
      +                          ];
 10360                           
 10361                           ;incstack = 0
 10362                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10363  265D  0141               	movlb	1	; select bank1
 10364  265E  086E               	movf	_selectedChannel^(0+128),w
 10365  265F  00CF               	movwf	??_channelSetup^(0+128)
 10366  2660  01D0               	clrf	(??_channelSetup^(0+128)+1)
 10367  2661  084F               	movf	??_channelSetup^(0+128),w
 10368  2662  0140               	movlb	0	; select bank0
 10369  2663  00B1               	movwf	___wmul@multiplier
 10370  2664  0141               	movlb	1	; select bank1
 10371  2665  0850               	movf	(??_channelSetup+1)^(0+128),w
 10372  2666  0140               	movlb	0	; select bank0
 10373  2667  00B2               	movwf	___wmul@multiplier+1
 10374  2668  301F               	movlw	31
 10375  2669  00B3               	movwf	___wmul@multiplicand
 10376  266A  3000               	movlw	0
 10377  266B  00B4               	movwf	___wmul@multiplicand+1
 10378  266C  31B1  21AD  31A6   	fcall	___wmul
 10379  266F  0140               	movlb	0	; select bank0
 10380  2670  0831               	movf	?___wmul,w
 10381  2671  0141               	movlb	1	; select bank1
 10382  2672  074D               	addwf	channelSetup@data^(0+128),w
 10383  2673  00D1               	movwf	(??_channelSetup+2)^(0+128)
 10384  2674  0140               	movlb	0	; select bank0
 10385  2675  0832               	movf	?___wmul+1,w
 10386  2676  0141               	movlb	1	; select bank1
 10387  2677  3D4E               	addwfc	(channelSetup@data+1)^(0+128),w
 10388  2678  00D2               	movwf	(??_channelSetup+3)^(0+128)
 10389  2679  0851               	movf	(??_channelSetup+2)^(0+128),w
 10390  267A  3E2A               	addlw	42
 10391  267B  00D3               	movwf	channelSetup@chData^(0+128)
 10392  267C  3000               	movlw	0
 10393  267D  3D52               	addwfc	(??_channelSetup+3)^(0+128),w
 10394  267E  00D4               	movwf	(channelSetup@chData+1)^(0+128)
 10395                           
 10396                           ;menu.c: 145:  returnToPage(page);
 10397  267F  0142               	movlb	2	; select bank2
 10398  2680  086D               	movf	channelSetup@page^(0+256),w
 10399  2681  3188  2002  31A6   	fcall	_returnToPage
 10400                           
 10401                           ;menu.c: 147:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
 10402  2684  0141               	movlb	1	; select bank1
 10403  2685  0853               	movf	channelSetup@chData^(0+128),w
 10404  2686  0086               	movwf	6
 10405  2687  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10406  2688  0087               	movwf	7
 10407  2689  315E               	addfsr 1,30
 10408  268A  0301               	decf	1,w
 10409  268B  1903               	btfsc	3,2
 10410  268C  2E95               	goto	l7682
 10411  268D  0853               	movf	channelSetup@chData^(0+128),w
 10412  268E  0086               	movwf	6
 10413  268F  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10414  2690  0087               	movwf	7
 10415  2691  315E               	addfsr 1,30
 10416  2692  0801               	movf	1,w
 10417  2693  1D03               	btfss	3,2
 10418  2694  2F5C               	goto	l7710
 10419  2695                     l7682:	
 10420                           
 10421                           ;menu.c: 148:   OLED_print_xy(0, 0, "Output power");
 10422  2695  0140               	movlb	0	; select bank0
 10423  2696  01B1               	clrf	OLED_print_xy@row
 10424  2697  30D7               	movlw	low (STR_22| (0+32768))
 10425  2698  00B2               	movwf	OLED_print_xy@s
 10426  2699  30BA               	movlw	high (STR_22| (0+32768))
 10427  269A  00B3               	movwf	OLED_print_xy@s+1
 10428  269B  3000               	movlw	0
 10429  269C  31B3  2328  31A6   	fcall	_OLED_print_xy
 10430                           
 10431                           ;menu.c: 149:   if (chData->Pset == 0) {
 10432  269F  0141               	movlb	1	; select bank1
 10433  26A0  0853               	movf	channelSetup@chData^(0+128),w
 10434  26A1  0086               	movwf	6
 10435  26A2  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10436  26A3  0087               	movwf	7
 10437  26A4  3150               	addfsr 1,16
 10438  26A5  3F40               	moviw [0]fsr1
 10439  26A6  0140               	movlb	0	; select bank0
 10440  26A7  00A4               	movwf	___fleq@ff1
 10441  26A8  3F41               	moviw [1]fsr1
 10442  26A9  00A5               	movwf	___fleq@ff1+1
 10443  26AA  3F42               	moviw [2]fsr1
 10444  26AB  00A6               	movwf	___fleq@ff1+2
 10445  26AC  3F43               	moviw [3]fsr1
 10446  26AD  00A7               	movwf	___fleq@ff1+3
 10447  26AE  3000               	movlw	0
 10448  26AF  00AB               	movwf	___fleq@ff2+3
 10449  26B0  3000               	movlw	0
 10450  26B1  00AA               	movwf	___fleq@ff2+2
 10451  26B2  3000               	movlw	0
 10452  26B3  00A9               	movwf	___fleq@ff2+1
 10453  26B4  3000               	movlw	0
 10454  26B5  00A8               	movwf	___fleq@ff2
 10455  26B6  31B6  2648  31A6   	fcall	___fleq
 10456  26B9  1C03               	btfss	3,0
 10457  26BA  2EE7               	goto	l7694
 10458                           
 10459                           ;menu.c: 150:    OLED_print_xy(0, 1, "Ch. ");
 10460  26BB  0140               	movlb	0	; select bank0
 10461  26BC  01B1               	clrf	OLED_print_xy@row
 10462  26BD  0AB1               	incf	OLED_print_xy@row,f
 10463  26BE  3071               	movlw	low ((STR_37+1)| (0+32768))
 10464  26BF  00B2               	movwf	OLED_print_xy@s
 10465  26C0  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10466  26C1  00B3               	movwf	OLED_print_xy@s+1
 10467  26C2  3000               	movlw	0
 10468  26C3  31B3  2328  31A6   	fcall	_OLED_print_xy
 10469                           
 10470                           ;menu.c: 151:    itoa(str, selectedChannel + 1, 1);
 10471  26C6  303F               	movlw	low _str
 10472  26C7  0141               	movlb	1	; select bank1
 10473  26C8  00BF               	movwf	itoa@str^(0+128)
 10474  26C9  3002               	movlw	high _str
 10475  26CA  00C0               	movwf	(itoa@str+1)^(0+128)
 10476  26CB  086E               	movf	_selectedChannel^(0+128),w
 10477  26CC  3E01               	addlw	1
 10478  26CD  00CF               	movwf	??_channelSetup^(0+128)
 10479  26CE  084F               	movf	??_channelSetup^(0+128),w
 10480  26CF  00C1               	movwf	itoa@value^(0+128)
 10481  26D0  01C2               	clrf	itoa@width^(0+128)
 10482  26D1  0AC2               	incf	itoa@width^(0+128),f
 10483  26D2  31A8  2058  31A6   	fcall	_itoa
 10484                           
 10485                           ;menu.c: 152:    OLED_print_xy(4, 1, str);
 10486  26D5  0140               	movlb	0	; select bank0
 10487  26D6  01B1               	clrf	OLED_print_xy@row
 10488  26D7  0AB1               	incf	OLED_print_xy@row,f
 10489  26D8  303F               	movlw	low _str
 10490  26D9  00B2               	movwf	OLED_print_xy@s
 10491  26DA  3002               	movlw	high _str
 10492  26DB  00B3               	movwf	OLED_print_xy@s+1
 10493  26DC  3004               	movlw	4
 10494  26DD  31B3  2328  31A6   	fcall	_OLED_print_xy
 10495                           
 10496                           ;menu.c: 153:    OLED_print_xy(5, 1, " off   ");
 10497  26E0  0140               	movlb	0	; select bank0
 10498  26E1  01B1               	clrf	OLED_print_xy@row
 10499  26E2  0AB1               	incf	OLED_print_xy@row,f
 10500  26E3  302D               	movlw	low (STR_24| (0+32768))
 10501  26E4  00B2               	movwf	OLED_print_xy@s
 10502  26E5  30BB               	movlw	high (STR_24| (0+32768))
 10503  26E6  2F2D               	goto	L3
 10504  26E7                     l7694:	
 10505                           ;menu.c: 154:   } else if (chData->Pset < 0) {
 10506                           
 10507  26E7  0141               	movlb	1	; select bank1
 10508  26E8  0853               	movf	channelSetup@chData^(0+128),w
 10509  26E9  0086               	movwf	6
 10510  26EA  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10511  26EB  0087               	movwf	7
 10512  26EC  3150               	addfsr 1,16
 10513  26ED  3F40               	moviw [0]fsr1
 10514  26EE  00B2               	movwf	___flge@ff1^(0+128)
 10515  26EF  3F41               	moviw [1]fsr1
 10516  26F0  00B3               	movwf	(___flge@ff1+1)^(0+128)
 10517  26F1  3F42               	moviw [2]fsr1
 10518  26F2  00B4               	movwf	(___flge@ff1+2)^(0+128)
 10519  26F3  3F43               	moviw [3]fsr1
 10520  26F4  00B5               	movwf	(___flge@ff1+3)^(0+128)
 10521  26F5  3000               	movlw	0
 10522  26F6  00B9               	movwf	(___flge@ff2+3)^(0+128)
 10523  26F7  3000               	movlw	0
 10524  26F8  00B8               	movwf	(___flge@ff2+2)^(0+128)
 10525  26F9  3000               	movlw	0
 10526  26FA  00B7               	movwf	(___flge@ff2+1)^(0+128)
 10527  26FB  3000               	movlw	0
 10528  26FC  00B6               	movwf	___flge@ff2^(0+128)
 10529  26FD  31AA  2277  31A6   	fcall	___flge
 10530  2700  1803               	btfsc	3,0
 10531  2701  2F30               	goto	l7704
 10532                           
 10533                           ;menu.c: 155:    OLED_print_xy(0, 1, "Ch. ");
 10534  2702  0140               	movlb	0	; select bank0
 10535  2703  01B1               	clrf	OLED_print_xy@row
 10536  2704  0AB1               	incf	OLED_print_xy@row,f
 10537  2705  3071               	movlw	low ((STR_37+1)| (0+32768))
 10538  2706  00B2               	movwf	OLED_print_xy@s
 10539  2707  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10540  2708  00B3               	movwf	OLED_print_xy@s+1
 10541  2709  3000               	movlw	0
 10542  270A  31B3  2328  31A6   	fcall	_OLED_print_xy
 10543                           
 10544                           ;menu.c: 156:    itoa(str, selectedChannel + 1, 1);
 10545  270D  303F               	movlw	low _str
 10546  270E  0141               	movlb	1	; select bank1
 10547  270F  00BF               	movwf	itoa@str^(0+128)
 10548  2710  3002               	movlw	high _str
 10549  2711  00C0               	movwf	(itoa@str+1)^(0+128)
 10550  2712  086E               	movf	_selectedChannel^(0+128),w
 10551  2713  3E01               	addlw	1
 10552  2714  00CF               	movwf	??_channelSetup^(0+128)
 10553  2715  084F               	movf	??_channelSetup^(0+128),w
 10554  2716  00C1               	movwf	itoa@value^(0+128)
 10555  2717  01C2               	clrf	itoa@width^(0+128)
 10556  2718  0AC2               	incf	itoa@width^(0+128),f
 10557  2719  31A8  2058  31A6   	fcall	_itoa
 10558                           
 10559                           ;menu.c: 157:    OLED_print_xy(4, 1, str);
 10560  271C  0140               	movlb	0	; select bank0
 10561  271D  01B1               	clrf	OLED_print_xy@row
 10562  271E  0AB1               	incf	OLED_print_xy@row,f
 10563  271F  303F               	movlw	low _str
 10564  2720  00B2               	movwf	OLED_print_xy@s
 10565  2721  3002               	movlw	high _str
 10566  2722  00B3               	movwf	OLED_print_xy@s+1
 10567  2723  3004               	movlw	4
 10568  2724  31B3  2328  31A6   	fcall	_OLED_print_xy
 10569                           
 10570                           ;menu.c: 158:    OLED_print_xy(5, 1, " auto  ");
 10571  2727  0140               	movlb	0	; select bank0
 10572  2728  01B1               	clrf	OLED_print_xy@row
 10573  2729  0AB1               	incf	OLED_print_xy@row,f
 10574  272A  303D               	movlw	low (STR_26| (0+32768))
 10575  272B  00B2               	movwf	OLED_print_xy@s
 10576  272C  30BB               	movlw	high (STR_26| (0+32768))
 10577  272D                     L3:	
 10578  272D  00B3               	movwf	OLED_print_xy@s+1
 10579  272E  3005               	movlw	5
 10580  272F  2FB4               	goto	L2
 10581  2730                     l7704:	
 10582                           ;menu.c: 159:   } else {
 10583                           
 10584                           
 10585                           ;menu.c: 160:    ftoa(str, chData->Pset, 4, 1);
 10586  2730  0141               	movlb	1	; select bank1
 10587  2731  0853               	movf	channelSetup@chData^(0+128),w
 10588  2732  0086               	movwf	6
 10589  2733  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10590  2734  0087               	movwf	7
 10591  2735  3150               	addfsr 1,16
 10592  2736  3F40               	moviw [0]fsr1
 10593  2737  00BF               	movwf	ftoa@fValue^(0+128)
 10594  2738  3F41               	moviw [1]fsr1
 10595  2739  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 10596  273A  3F42               	moviw [2]fsr1
 10597  273B  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 10598  273C  3F43               	moviw [3]fsr1
 10599  273D  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 10600  273E  3004               	movlw	4
 10601  273F  00CF               	movwf	??_channelSetup^(0+128)
 10602  2740  084F               	movf	??_channelSetup^(0+128),w
 10603  2741  00C3               	movwf	ftoa@width^(0+128)
 10604  2742  01C4               	clrf	ftoa@prec^(0+128)
 10605  2743  0AC4               	incf	ftoa@prec^(0+128),f
 10606  2744  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10607  2745  31A1  21F3  31A6   	fcall	_ftoa
 10608                           
 10609                           ;menu.c: 161:    OLED_print_xy(0, 1, str);
 10610  2748  0140               	movlb	0	; select bank0
 10611  2749  01B1               	clrf	OLED_print_xy@row
 10612  274A  0AB1               	incf	OLED_print_xy@row,f
 10613  274B  303F               	movlw	low _str
 10614  274C  00B2               	movwf	OLED_print_xy@s
 10615  274D  3002               	movlw	high _str
 10616  274E  00B3               	movwf	OLED_print_xy@s+1
 10617  274F  3000               	movlw	0
 10618  2750  31B3  2328  31A6   	fcall	_OLED_print_xy
 10619                           
 10620                           ;menu.c: 162:    OLED_print_xy(4, 1, "W manual");
 10621  2753  0140               	movlb	0	; select bank0
 10622  2754  01B1               	clrf	OLED_print_xy@row
 10623  2755  0AB1               	incf	OLED_print_xy@row,f
 10624  2756  300C               	movlw	low (STR_17| (0+32768))
 10625  2757  00B2               	movwf	OLED_print_xy@s
 10626  2758  30BB               	movlw	high (STR_17| (0+32768))
 10627  2759  00B3               	movwf	OLED_print_xy@s+1
 10628  275A  3004               	movlw	4
 10629  275B  2FB4               	goto	L2
 10630  275C                     l7710:	
 10631  275C  0853               	movf	channelSetup@chData^(0+128),w
 10632  275D  0086               	movwf	6
 10633  275E  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10634  275F  0087               	movwf	7
 10635  2760  315E               	addfsr 1,30
 10636  2761  3002               	movlw	2
 10637  2762  0601               	xorwf	1,w
 10638  2763  1D03               	btfss	3,2
 10639  2764  2F76               	goto	l7714
 10640                           
 10641                           ;menu.c: 167:   OLED_print_xy(0, 0, "Not         ");
 10642  2765  0140               	movlb	0	; select bank0
 10643  2766  01B1               	clrf	OLED_print_xy@row
 10644  2767  30FA               	movlw	low (STR_28| (0+32768))
 10645  2768  00B2               	movwf	OLED_print_xy@s
 10646  2769  30B9               	movlw	high (STR_28| (0+32768))
 10647  276A  00B3               	movwf	OLED_print_xy@s+1
 10648  276B  3000               	movlw	0
 10649  276C  31B3  2328  31A6   	fcall	_OLED_print_xy
 10650                           
 10651                           ;menu.c: 168:   OLED_print_xy(0, 1, "connected   ");
 10652  276F  0140               	movlb	0	; select bank0
 10653  2770  01B1               	clrf	OLED_print_xy@row
 10654  2771  0AB1               	incf	OLED_print_xy@row,f
 10655  2772  3062               	movlw	low (STR_29| (0+32768))
 10656  2773  00B2               	movwf	OLED_print_xy@s
 10657  2774  30BA               	movlw	high (STR_29| (0+32768))
 10658  2775  2FB2               	goto	L4
 10659  2776                     l7714:	
 10660                           ;menu.c: 170:  } else if (chData->status == CH_UNCHECKED) {
 10661                           
 10662  2776  0853               	movf	channelSetup@chData^(0+128),w
 10663  2777  0086               	movwf	6
 10664  2778  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10665  2779  0087               	movwf	7
 10666  277A  315E               	addfsr 1,30
 10667  277B  3005               	movlw	5
 10668  277C  0601               	xorwf	1,w
 10669  277D  1D03               	btfss	3,2
 10670  277E  2F90               	goto	l7718
 10671                           
 10672                           ;menu.c: 172:   OLED_print_xy(0, 0, "Testing     ");
 10673  277F  0140               	movlb	0	; select bank0
 10674  2780  01B1               	clrf	OLED_print_xy@row
 10675  2781  3014               	movlw	low (STR_30| (0+32768))
 10676  2782  00B2               	movwf	OLED_print_xy@s
 10677  2783  30BA               	movlw	high (STR_30| (0+32768))
 10678  2784  00B3               	movwf	OLED_print_xy@s+1
 10679  2785  3000               	movlw	0
 10680  2786  31B3  2328  31A6   	fcall	_OLED_print_xy
 10681                           
 10682                           ;menu.c: 173:   OLED_print_xy(0, 1, "heater...   ");
 10683  2789  0140               	movlb	0	; select bank0
 10684  278A  01B1               	clrf	OLED_print_xy@row
 10685  278B  0AB1               	incf	OLED_print_xy@row,f
 10686  278C  3048               	movlw	low (STR_31| (0+32768))
 10687  278D  00B2               	movwf	OLED_print_xy@s
 10688  278E  30BA               	movlw	high (STR_31| (0+32768))
 10689  278F  2FB2               	goto	L4
 10690  2790                     l7718:	
 10691                           ;menu.c: 175:  } else if ((chData->status == CH_OVERCURRENT) || (chData->status == CH_SH
      +                          ORTED)) {
 10692                           
 10693  2790  0853               	movf	channelSetup@chData^(0+128),w
 10694  2791  0086               	movwf	6
 10695  2792  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10696  2793  0087               	movwf	7
 10697  2794  315E               	addfsr 1,30
 10698  2795  3004               	movlw	4
 10699  2796  0601               	xorwf	1,w
 10700  2797  1903               	btfsc	3,2
 10701  2798  2FA2               	goto	l7722
 10702  2799  0853               	movf	channelSetup@chData^(0+128),w
 10703  279A  0086               	movwf	6
 10704  279B  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10705  279C  0087               	movwf	7
 10706  279D  315E               	addfsr 1,30
 10707  279E  3003               	movlw	3
 10708  279F  0601               	xorwf	1,w
 10709  27A0  1D03               	btfss	3,2
 10710  27A1  2FB7               	goto	l454
 10711  27A2                     l7722:	
 10712                           
 10713                           ;menu.c: 177:   OLED_print_xy(0, 0, "Reset       ");
 10714  27A2  0140               	movlb	0	; select bank0
 10715  27A3  01B1               	clrf	OLED_print_xy@row
 10716  27A4  3007               	movlw	low (STR_32| (0+32768))
 10717  27A5  00B2               	movwf	OLED_print_xy@s
 10718  27A6  30BA               	movlw	high (STR_32| (0+32768))
 10719  27A7  00B3               	movwf	OLED_print_xy@s+1
 10720  27A8  3000               	movlw	0
 10721  27A9  31B3  2328  31A6   	fcall	_OLED_print_xy
 10722                           
 10723                           ;menu.c: 178:   OLED_print_xy(0, 1, "channel     ");
 10724  27AC  0140               	movlb	0	; select bank0
 10725  27AD  01B1               	clrf	OLED_print_xy@row
 10726  27AE  0AB1               	incf	OLED_print_xy@row,f
 10727  27AF  3021               	movlw	low (STR_33| (0+32768))
 10728  27B0  00B2               	movwf	OLED_print_xy@s
 10729  27B1  30BA               	movlw	high (STR_33| (0+32768))
 10730  27B2                     L4:	
 10731  27B2  00B3               	movwf	OLED_print_xy@s+1
 10732  27B3  3000               	movlw	0
 10733  27B4                     L2:	
 10734  27B4  31B3  2328  31A6   	fcall	_OLED_print_xy
 10735  27B7                     l454:	
 10736                           
 10737                           ;menu.c: 182:  OLED_print_xy(12, 0, "Lens diam.  ");
 10738  27B7  0140               	movlb	0	; select bank0
 10739  27B8  01B1               	clrf	OLED_print_xy@row
 10740  27B9  307C               	movlw	low (STR_34| (0+32768))
 10741  27BA  00B2               	movwf	OLED_print_xy@s
 10742  27BB  30BA               	movlw	high (STR_34| (0+32768))
 10743  27BC  00B3               	movwf	OLED_print_xy@s+1
 10744  27BD  300C               	movlw	12
 10745  27BE  31B3  2328  31A6   	fcall	_OLED_print_xy
 10746                           
 10747                           ;menu.c: 183:  ftoa(str, chData->lensDia, 4, 1);
 10748  27C1  0141               	movlb	1	; select bank1
 10749  27C2  0853               	movf	channelSetup@chData^(0+128),w
 10750  27C3  0086               	movwf	6
 10751  27C4  0854               	movf	(channelSetup@chData+1)^(0+128),w
 10752  27C5  0087               	movwf	7
 10753  27C6  3155               	addfsr 1,21
 10754  27C7  3F40               	moviw [0]fsr1
 10755  27C8  00BF               	movwf	ftoa@fValue^(0+128)
 10756  27C9  3F41               	moviw [1]fsr1
 10757  27CA  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 10758  27CB  3F42               	moviw [2]fsr1
 10759  27CC  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 10760  27CD  3F43               	moviw [3]fsr1
 10761  27CE  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 10762  27CF  3004               	movlw	4
 10763  27D0  00CF               	movwf	??_channelSetup^(0+128)
 10764  27D1  084F               	movf	??_channelSetup^(0+128),w
 10765  27D2  00C3               	movwf	ftoa@width^(0+128)
 10766  27D3  01C4               	clrf	ftoa@prec^(0+128)
 10767  27D4  0AC4               	incf	ftoa@prec^(0+128),f
 10768  27D5  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10769  27D6  31A1  21F3  31A6   	fcall	_ftoa
 10770                           
 10771                           ;menu.c: 184:  OLED_print_xy(12 + 0, 1, str);
 10772  27D9  0140               	movlb	0	; select bank0
 10773  27DA  01B1               	clrf	OLED_print_xy@row
 10774  27DB  0AB1               	incf	OLED_print_xy@row,f
 10775  27DC  303F               	movlw	low _str
 10776  27DD  00B2               	movwf	OLED_print_xy@s
 10777  27DE  3002               	movlw	high _str
 10778  27DF  00B3               	movwf	OLED_print_xy@s+1
 10779  27E0  300C               	movlw	12
 10780  27E1  31B3  2328  31A6   	fcall	_OLED_print_xy
 10781                           
 10782                           ;menu.c: 185:  OLED_print_xy(12 + 5, 1, " inch  ");
 10783  27E4  0140               	movlb	0	; select bank0
 10784  27E5  01B1               	clrf	OLED_print_xy@row
 10785  27E6  0AB1               	incf	OLED_print_xy@row,f
 10786  27E7  3035               	movlw	low (STR_35| (0+32768))
 10787  27E8  00B2               	movwf	OLED_print_xy@s
 10788  27E9  30BB               	movlw	high (STR_35| (0+32768))
 10789  27EA  00B3               	movwf	OLED_print_xy@s+1
 10790  27EB  3011               	movlw	17
 10791  27EC  31B3  2328  31A6   	fcall	_OLED_print_xy
 10792                           
 10793                           ;menu.c: 187:  page = paging(page, 2);
 10794  27EF  3002               	movlw	2
 10795  27F0  0141               	movlb	1	; select bank1
 10796  27F1  00CF               	movwf	??_channelSetup^(0+128)
 10797  27F2  084F               	movf	??_channelSetup^(0+128),w
 10798  27F3  0140               	movlb	0	; select bank0
 10799  27F4  00AB               	movwf	paging@lastPage
 10800  27F5  0142               	movlb	2	; select bank2
 10801  27F6  086D               	movf	channelSetup@page^(0+256),w
 10802  27F7  31A8  20C1         	fcall	_paging
 10803  27F9  0141               	movlb	1	; select bank1
 10804  27FA  00D0               	movwf	(??_channelSetup+1)^(0+128)
 10805  27FB  0850               	movf	(??_channelSetup+1)^(0+128),w
 10806  27FC  0142               	movlb	2	; select bank2
 10807  27FD  00ED               	movwf	channelSetup@page^(0+256)
 10808                           
 10809                           ;menu.c: 189:  return page;
 10810  27FE  086D               	movf	channelSetup@page^(0+256),w
 10811  27FF  0008               	return
 10812  2800                     __end_of_channelSetup:	
 10813                           
 10814                           	psect	text17
 10815  0913                     __ptext17:	
 10816 ;; *************** function _channelView *****************
 10817 ;; Defined at:
 10818 ;;		line 75 in file "menu.c"
 10819 ;; Parameters:    Size  Location     Type
 10820 ;;  data            2   45[BANK1 ] PTR struct .
 10821 ;;		 -> data(166), 
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;  n               1   57[BANK1 ] unsigned char 
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      unsigned char 
 10826 ;; Registers used:
 10827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10833 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10834 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10835 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10836 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10837 ;;Total ram usage:       13 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    9
 10840 ;; This function calls:
 10841 ;;		_OLED_print_xy
 10842 ;;		___bmul
 10843 ;;		___fltol
 10844 ;;		___wmul
 10845 ;;		_ftoa
 10846 ;;		_itoa
 10847 ;;		_paging
 10848 ;;		_returnToPage
 10849 ;; This function is called by:
 10850 ;;		_menu
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _channelView
 10856  0913                     _channelView:	
 10857                           
 10858                           ;menu.c: 75: uint8_t channelView(t_globalData *data);menu.c: 76: {;menu.c: 77:  static u
      +                          int8_t page = 0;;menu.c: 78:  uint8_t n;;menu.c: 80:  returnToPage(page);
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10862  0913  0141               	movlb	1	; select bank1
 10863  0914  086D               	movf	channelView@page^(0+128),w
 10864  0915  3188  2002  3189   	fcall	_returnToPage
 10865                           
 10866                           ;menu.c: 81:  if (g_screenRefresh) {
 10867  0918  0141               	movlb	1	; select bank1
 10868  0919  086F               	movf	_g_screenRefresh^(0+128),w
 10869  091A  1903               	btfsc	3,2
 10870  091B  29DD               	goto	l7622
 10871                           
 10872                           ;menu.c: 82:   for (n = 0; n < 4; n++) {
 10873  091C  01D9               	clrf	channelView@n^(0+128)
 10874  091D                     l7604:	
 10875  091D  3004               	movlw	4
 10876  091E  0259               	subwf	channelView@n^(0+128),w
 10877  091F  1803               	btfsc	3,0
 10878  0920  29DD               	goto	l7622
 10879                           
 10880                           ;menu.c: 83:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 10881  0921  0140               	movlb	0	; select bank0
 10882  0922  01B1               	clrf	OLED_print_xy@row
 10883  0923  3082               	movlw	low (STR_10| (0+32768))
 10884  0924  00B2               	movwf	OLED_print_xy@s
 10885  0925  30BB               	movlw	high (STR_10| (0+32768))
 10886  0926  00B3               	movwf	OLED_print_xy@s+1
 10887  0927  300C               	movlw	12
 10888  0928  0141               	movlb	1	; select bank1
 10889  0929  00CF               	movwf	??_channelView^(0+128)
 10890  092A  084F               	movf	??_channelView^(0+128),w
 10891  092B  0140               	movlb	0	; select bank0
 10892  092C  00AD               	movwf	___bmul@multiplicand
 10893  092D  0141               	movlb	1	; select bank1
 10894  092E  0859               	movf	channelView@n^(0+128),w
 10895  092F  31A0  2002  3189   	fcall	___bmul
 10896  0932  31B3  2328  3189   	fcall	_OLED_print_xy
 10897                           
 10898                           ;menu.c: 84:    itoa(str, n + 1, 1);
 10899  0935  303F               	movlw	low _str
 10900  0936  0141               	movlb	1	; select bank1
 10901  0937  00BF               	movwf	itoa@str^(0+128)
 10902  0938  3002               	movlw	high _str
 10903  0939  00C0               	movwf	(itoa@str+1)^(0+128)
 10904  093A  0859               	movf	channelView@n^(0+128),w
 10905  093B  3E01               	addlw	1
 10906  093C  00CF               	movwf	??_channelView^(0+128)
 10907  093D  084F               	movf	??_channelView^(0+128),w
 10908  093E  00C1               	movwf	itoa@value^(0+128)
 10909  093F  01C2               	clrf	itoa@width^(0+128)
 10910  0940  0AC2               	incf	itoa@width^(0+128),f
 10911  0941  31A8  2058  3189   	fcall	_itoa
 10912                           
 10913                           ;menu.c: 85:    OLED_print_xy(n * 12 + 3, 0, str);
 10914  0944  0140               	movlb	0	; select bank0
 10915  0945  01B1               	clrf	OLED_print_xy@row
 10916  0946  303F               	movlw	low _str
 10917  0947  00B2               	movwf	OLED_print_xy@s
 10918  0948  3002               	movlw	high _str
 10919  0949  00B3               	movwf	OLED_print_xy@s+1
 10920  094A  300C               	movlw	12
 10921  094B  0141               	movlb	1	; select bank1
 10922  094C  00CF               	movwf	??_channelView^(0+128)
 10923  094D  084F               	movf	??_channelView^(0+128),w
 10924  094E  0140               	movlb	0	; select bank0
 10925  094F  00AD               	movwf	___bmul@multiplicand
 10926  0950  0141               	movlb	1	; select bank1
 10927  0951  0859               	movf	channelView@n^(0+128),w
 10928  0952  31A0  2002  3189   	fcall	___bmul
 10929  0955  3E03               	addlw	3
 10930  0956  31B3  2328  3189   	fcall	_OLED_print_xy
 10931                           
 10932                           ;menu.c: 86:    OLED_print_xy(n * 12 + 4, 0, ": ");
 10933  0959  0140               	movlb	0	; select bank0
 10934  095A  01B1               	clrf	OLED_print_xy@row
 10935  095B  308F               	movlw	low (STR_11| (0+32768))
 10936  095C  00B2               	movwf	OLED_print_xy@s
 10937  095D  30BB               	movlw	high (STR_11| (0+32768))
 10938  095E  00B3               	movwf	OLED_print_xy@s+1
 10939  095F  300C               	movlw	12
 10940  0960  0141               	movlb	1	; select bank1
 10941  0961  00CF               	movwf	??_channelView^(0+128)
 10942  0962  084F               	movf	??_channelView^(0+128),w
 10943  0963  0140               	movlb	0	; select bank0
 10944  0964  00AD               	movwf	___bmul@multiplicand
 10945  0965  0141               	movlb	1	; select bank1
 10946  0966  0859               	movf	channelView@n^(0+128),w
 10947  0967  31A0  2002  3189   	fcall	___bmul
 10948  096A  3E04               	addlw	4
 10949  096B  31B3  2328  3189   	fcall	_OLED_print_xy
 10950                           
 10951                           ;menu.c: 87:    itoa(str, data->chData[n].lensDia, 2);
 10952  096E  303F               	movlw	low _str
 10953  096F  0141               	movlb	1	; select bank1
 10954  0970  00BF               	movwf	itoa@str^(0+128)
 10955  0971  3002               	movlw	high _str
 10956  0972  00C0               	movwf	(itoa@str+1)^(0+128)
 10957  0973  301F               	movlw	31
 10958  0974  0140               	movlb	0	; select bank0
 10959  0975  00B3               	movwf	___wmul@multiplicand
 10960  0976  3000               	movlw	0
 10961  0977  00B4               	movwf	___wmul@multiplicand+1
 10962  0978  0141               	movlb	1	; select bank1
 10963  0979  0859               	movf	channelView@n^(0+128),w
 10964  097A  00CF               	movwf	??_channelView^(0+128)
 10965  097B  01D0               	clrf	(??_channelView^(0+128)+1)
 10966  097C  084F               	movf	??_channelView^(0+128),w
 10967  097D  0140               	movlb	0	; select bank0
 10968  097E  00B1               	movwf	___wmul@multiplier
 10969  097F  0141               	movlb	1	; select bank1
 10970  0980  0850               	movf	(??_channelView+1)^(0+128),w
 10971  0981  0140               	movlb	0	; select bank0
 10972  0982  00B2               	movwf	___wmul@multiplier+1
 10973  0983  31B1  21AD  3189   	fcall	___wmul
 10974  0986  0140               	movlb	0	; select bank0
 10975  0987  0831               	movf	?___wmul,w
 10976  0988  0141               	movlb	1	; select bank1
 10977  0989  074D               	addwf	channelView@data^(0+128),w
 10978  098A  00D1               	movwf	(??_channelView+2)^(0+128)
 10979  098B  0140               	movlb	0	; select bank0
 10980  098C  0832               	movf	?___wmul+1,w
 10981  098D  0141               	movlb	1	; select bank1
 10982  098E  3D4E               	addwfc	(channelView@data+1)^(0+128),w
 10983  098F  00D2               	movwf	(??_channelView+3)^(0+128)
 10984  0990  0851               	movf	(??_channelView+2)^(0+128),w
 10985  0991  3E3F               	addlw	63
 10986  0992  0086               	movwf	6
 10987  0993  3000               	movlw	0
 10988  0994  3D52               	addwfc	(??_channelView+3)^(0+128),w
 10989  0995  0087               	movwf	7
 10990  0996  3F40               	moviw [0]fsr1
 10991  0997  00B4               	movwf	___fltol@f1^(0+128)
 10992  0998  3F41               	moviw [1]fsr1
 10993  0999  00B5               	movwf	(___fltol@f1+1)^(0+128)
 10994  099A  3F42               	moviw [2]fsr1
 10995  099B  00B6               	movwf	(___fltol@f1+2)^(0+128)
 10996  099C  3F43               	moviw [3]fsr1
 10997  099D  00B7               	movwf	(___fltol@f1+3)^(0+128)
 10998  099E  31B7  2731  3189   	fcall	___fltol
 10999  09A1  0141               	movlb	1	; select bank1
 11000  09A2  0834               	movf	?___fltol^(0+128),w
 11001  09A3  00D3               	movwf	(??_channelView+4)^(0+128)
 11002  09A4  0853               	movf	(??_channelView+4)^(0+128),w
 11003  09A5  00C1               	movwf	itoa@value^(0+128)
 11004  09A6  3002               	movlw	2
 11005  09A7  00D4               	movwf	(??_channelView+5)^(0+128)
 11006  09A8  0854               	movf	(??_channelView+5)^(0+128),w
 11007  09A9  00C2               	movwf	itoa@width^(0+128)
 11008  09AA  31A8  2058  3189   	fcall	_itoa
 11009                           
 11010                           ;menu.c: 88:    OLED_print_xy(n * 12 + 6, 0, str);
 11011  09AD  0140               	movlb	0	; select bank0
 11012  09AE  01B1               	clrf	OLED_print_xy@row
 11013  09AF  303F               	movlw	low _str
 11014  09B0  00B2               	movwf	OLED_print_xy@s
 11015  09B1  3002               	movlw	high _str
 11016  09B2  00B3               	movwf	OLED_print_xy@s+1
 11017  09B3  300C               	movlw	12
 11018  09B4  0141               	movlb	1	; select bank1
 11019  09B5  00CF               	movwf	??_channelView^(0+128)
 11020  09B6  084F               	movf	??_channelView^(0+128),w
 11021  09B7  0140               	movlb	0	; select bank0
 11022  09B8  00AD               	movwf	___bmul@multiplicand
 11023  09B9  0141               	movlb	1	; select bank1
 11024  09BA  0859               	movf	channelView@n^(0+128),w
 11025  09BB  31A0  2002  3189   	fcall	___bmul
 11026  09BE  3E06               	addlw	6
 11027  09BF  31B3  2328  3189   	fcall	_OLED_print_xy
 11028                           
 11029                           ;menu.c: 89:    OLED_print_xy(n * 12 + 8, 0, "\" ");
 11030  09C2  0140               	movlb	0	; select bank0
 11031  09C3  01B1               	clrf	OLED_print_xy@row
 11032  09C4  308C               	movlw	low (STR_12| (0+32768))
 11033  09C5  00B2               	movwf	OLED_print_xy@s
 11034  09C6  30BB               	movlw	high (STR_12| (0+32768))
 11035  09C7  00B3               	movwf	OLED_print_xy@s+1
 11036  09C8  300C               	movlw	12
 11037  09C9  0141               	movlb	1	; select bank1
 11038  09CA  00CF               	movwf	??_channelView^(0+128)
 11039  09CB  084F               	movf	??_channelView^(0+128),w
 11040  09CC  0140               	movlb	0	; select bank0
 11041  09CD  00AD               	movwf	___bmul@multiplicand
 11042  09CE  0141               	movlb	1	; select bank1
 11043  09CF  0859               	movf	channelView@n^(0+128),w
 11044  09D0  31A0  2002  3189   	fcall	___bmul
 11045  09D3  3E08               	addlw	8
 11046  09D4  31B3  2328  3189   	fcall	_OLED_print_xy
 11047                           
 11048                           ;menu.c: 90:   }
 11049  09D7  3001               	movlw	1
 11050  09D8  0141               	movlb	1	; select bank1
 11051  09D9  00CF               	movwf	??_channelView^(0+128)
 11052  09DA  084F               	movf	??_channelView^(0+128),w
 11053  09DB  07D9               	addwf	channelView@n^(0+128),f
 11054  09DC  291D               	goto	l7604
 11055  09DD                     l7622:	
 11056                           
 11057                           ;menu.c: 93:  for (n = 0; n < 4; n++) {
 11058  09DD  01D9               	clrf	channelView@n^(0+128)
 11059  09DE                     l7624:	
 11060  09DE  3004               	movlw	4
 11061  09DF  0259               	subwf	channelView@n^(0+128),w
 11062  09E0  1803               	btfsc	3,0
 11063  09E1  2BB5               	goto	l7662
 11064  09E2  2B72               	goto	l7656
 11065  09E3                     l7628:	
 11066                           
 11067                           ;menu.c: 96:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 11068  09E3  0140               	movlb	0	; select bank0
 11069  09E4  01B1               	clrf	OLED_print_xy@row
 11070  09E5  0AB1               	incf	OLED_print_xy@row,f
 11071  09E6  3096               	movlw	low (STR_13| (0+32768))
 11072  09E7  00B2               	movwf	OLED_print_xy@s
 11073  09E8  30BA               	movlw	high (STR_13| (0+32768))
 11074  09E9  00B3               	movwf	OLED_print_xy@s+1
 11075  09EA  300C               	movlw	12
 11076  09EB  0141               	movlb	1	; select bank1
 11077  09EC  00CF               	movwf	??_channelView^(0+128)
 11078  09ED  084F               	movf	??_channelView^(0+128),w
 11079  09EE  0140               	movlb	0	; select bank0
 11080  09EF  00AD               	movwf	___bmul@multiplicand
 11081  09F0  0141               	movlb	1	; select bank1
 11082  09F1  0859               	movf	channelView@n^(0+128),w
 11083  09F2  31A0  2002  3189   	fcall	___bmul
 11084  09F5  31B3  2328  3189   	fcall	_OLED_print_xy
 11085                           
 11086                           ;menu.c: 97:    break;
 11087  09F8  2BAF               	goto	l7658
 11088  09F9                     l7630:	
 11089                           
 11090                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 11091  09F9  0140               	movlb	0	; select bank0
 11092  09FA  01B1               	clrf	OLED_print_xy@row
 11093  09FB  0AB1               	incf	OLED_print_xy@row,f
 11094  09FC  303B               	movlw	low (STR_14| (0+32768))
 11095  09FD  00B2               	movwf	OLED_print_xy@s
 11096  09FE  30BA               	movlw	high (STR_14| (0+32768))
 11097  09FF  00B3               	movwf	OLED_print_xy@s+1
 11098  0A00  300C               	movlw	12
 11099  0A01  0141               	movlb	1	; select bank1
 11100  0A02  00CF               	movwf	??_channelView^(0+128)
 11101  0A03  084F               	movf	??_channelView^(0+128),w
 11102  0A04  0140               	movlb	0	; select bank0
 11103  0A05  00AD               	movwf	___bmul@multiplicand
 11104  0A06  0141               	movlb	1	; select bank1
 11105  0A07  0859               	movf	channelView@n^(0+128),w
 11106  0A08  31A0  2002  3189   	fcall	___bmul
 11107  0A0B  31B3  2328  3189   	fcall	_OLED_print_xy
 11108                           
 11109                           ;menu.c: 100:    break;
 11110  0A0E  2BAF               	goto	l7658
 11111  0A0F                     l7632:	
 11112                           
 11113                           ;menu.c: 102:    ftoa(str, data->chData[n].Patt, 4, 1);
 11114  0A0F  0859               	movf	channelView@n^(0+128),w
 11115  0A10  00CF               	movwf	??_channelView^(0+128)
 11116  0A11  01D0               	clrf	(??_channelView^(0+128)+1)
 11117  0A12  084F               	movf	??_channelView^(0+128),w
 11118  0A13  0140               	movlb	0	; select bank0
 11119  0A14  00B1               	movwf	___wmul@multiplier
 11120  0A15  0141               	movlb	1	; select bank1
 11121  0A16  0850               	movf	(??_channelView+1)^(0+128),w
 11122  0A17  0140               	movlb	0	; select bank0
 11123  0A18  00B2               	movwf	___wmul@multiplier+1
 11124  0A19  301F               	movlw	31
 11125  0A1A  00B3               	movwf	___wmul@multiplicand
 11126  0A1B  3000               	movlw	0
 11127  0A1C  00B4               	movwf	___wmul@multiplicand+1
 11128  0A1D  31B1  21AD  3189   	fcall	___wmul
 11129  0A20  0140               	movlb	0	; select bank0
 11130  0A21  0831               	movf	?___wmul,w
 11131  0A22  0141               	movlb	1	; select bank1
 11132  0A23  074D               	addwf	channelView@data^(0+128),w
 11133  0A24  00D1               	movwf	(??_channelView+2)^(0+128)
 11134  0A25  0140               	movlb	0	; select bank0
 11135  0A26  0832               	movf	?___wmul+1,w
 11136  0A27  0141               	movlb	1	; select bank1
 11137  0A28  3D4E               	addwfc	(channelView@data+1)^(0+128),w
 11138  0A29  00D2               	movwf	(??_channelView+3)^(0+128)
 11139  0A2A  0851               	movf	(??_channelView+2)^(0+128),w
 11140  0A2B  3E36               	addlw	54
 11141  0A2C  0086               	movwf	6
 11142  0A2D  3000               	movlw	0
 11143  0A2E  3D52               	addwfc	(??_channelView+3)^(0+128),w
 11144  0A2F  0087               	movwf	7
 11145  0A30  3F40               	moviw [0]fsr1
 11146  0A31  00D5               	movwf	_channelView$2641^(0+128)
 11147  0A32  3F41               	moviw [1]fsr1
 11148  0A33  00D6               	movwf	(_channelView$2641+1)^(0+128)
 11149  0A34  3F42               	moviw [2]fsr1
 11150  0A35  00D7               	movwf	(_channelView$2641+2)^(0+128)
 11151  0A36  3F43               	moviw [3]fsr1
 11152  0A37  00D8               	movwf	(_channelView$2641+3)^(0+128)
 11153                           
 11154                           ;menu.c: 102:    ftoa(str, data->chData[n].Patt, 4, 1);
 11155  0A38  0858               	movf	(_channelView$2641+3)^(0+128),w
 11156  0A39  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11157  0A3A  0857               	movf	(_channelView$2641+2)^(0+128),w
 11158  0A3B  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11159  0A3C  0856               	movf	(_channelView$2641+1)^(0+128),w
 11160  0A3D  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11161  0A3E  0855               	movf	_channelView$2641^(0+128),w
 11162  0A3F  00BF               	movwf	ftoa@fValue^(0+128)
 11163  0A40  3004               	movlw	4
 11164  0A41  00CF               	movwf	??_channelView^(0+128)
 11165  0A42  084F               	movf	??_channelView^(0+128),w
 11166  0A43  00C3               	movwf	ftoa@width^(0+128)
 11167  0A44  01C4               	clrf	ftoa@prec^(0+128)
 11168  0A45  0AC4               	incf	ftoa@prec^(0+128),f
 11169  0A46  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11170  0A47  31A1  21F3  3189   	fcall	_ftoa
 11171                           
 11172                           ;menu.c: 104:    OLED_print_xy(n * 12 + 0, 1, str);
 11173  0A4A  0140               	movlb	0	; select bank0
 11174  0A4B  01B1               	clrf	OLED_print_xy@row
 11175  0A4C  0AB1               	incf	OLED_print_xy@row,f
 11176  0A4D  303F               	movlw	low _str
 11177  0A4E  00B2               	movwf	OLED_print_xy@s
 11178  0A4F  3002               	movlw	high _str
 11179  0A50  00B3               	movwf	OLED_print_xy@s+1
 11180  0A51  300C               	movlw	12
 11181  0A52  0141               	movlb	1	; select bank1
 11182  0A53  00CF               	movwf	??_channelView^(0+128)
 11183  0A54  084F               	movf	??_channelView^(0+128),w
 11184  0A55  0140               	movlb	0	; select bank0
 11185  0A56  00AD               	movwf	___bmul@multiplicand
 11186  0A57  0141               	movlb	1	; select bank1
 11187  0A58  0859               	movf	channelView@n^(0+128),w
 11188  0A59  31A0  2002  3189   	fcall	___bmul
 11189  0A5C  31B3  2328  3189   	fcall	_OLED_print_xy
 11190                           
 11191                           ;menu.c: 108:    if (data->chData[n].mode == MODE_AUTO) {
 11192  0A5F  0141               	movlb	1	; select bank1
 11193  0A60  0859               	movf	channelView@n^(0+128),w
 11194  0A61  00CF               	movwf	??_channelView^(0+128)
 11195  0A62  01D0               	clrf	(??_channelView^(0+128)+1)
 11196  0A63  084F               	movf	??_channelView^(0+128),w
 11197  0A64  0140               	movlb	0	; select bank0
 11198  0A65  00B1               	movwf	___wmul@multiplier
 11199  0A66  0141               	movlb	1	; select bank1
 11200  0A67  0850               	movf	(??_channelView+1)^(0+128),w
 11201  0A68  0140               	movlb	0	; select bank0
 11202  0A69  00B2               	movwf	___wmul@multiplier+1
 11203  0A6A  301F               	movlw	31
 11204  0A6B  00B3               	movwf	___wmul@multiplicand
 11205  0A6C  3000               	movlw	0
 11206  0A6D  00B4               	movwf	___wmul@multiplicand+1
 11207  0A6E  31B1  21AD  3189   	fcall	___wmul
 11208  0A71  0140               	movlb	0	; select bank0
 11209  0A72  0831               	movf	?___wmul,w
 11210  0A73  0141               	movlb	1	; select bank1
 11211  0A74  074D               	addwf	channelView@data^(0+128),w
 11212  0A75  00D1               	movwf	(??_channelView+2)^(0+128)
 11213  0A76  0140               	movlb	0	; select bank0
 11214  0A77  0832               	movf	?___wmul+1,w
 11215  0A78  0141               	movlb	1	; select bank1
 11216  0A79  3D4E               	addwfc	(channelView@data+1)^(0+128),w
 11217  0A7A  00D2               	movwf	(??_channelView+3)^(0+128)
 11218  0A7B  0851               	movf	(??_channelView+2)^(0+128),w
 11219  0A7C  3E47               	addlw	71
 11220  0A7D  0086               	movwf	6
 11221  0A7E  3000               	movlw	0
 11222  0A7F  3D52               	addwfc	(??_channelView+3)^(0+128),w
 11223  0A80  0087               	movwf	7
 11224  0A81  0301               	decf	1,w
 11225  0A82  1D03               	btfss	3,2
 11226  0A83  2B03               	goto	l7644
 11227                           
 11228                           ;menu.c: 109:     OLED_print_xy(n * 12 + 4, 1, " (");
 11229  0A84  0140               	movlb	0	; select bank0
 11230  0A85  01B1               	clrf	OLED_print_xy@row
 11231  0A86  0AB1               	incf	OLED_print_xy@row,f
 11232  0A87  3092               	movlw	low (STR_15| (0+32768))
 11233  0A88  00B2               	movwf	OLED_print_xy@s
 11234  0A89  30BB               	movlw	high (STR_15| (0+32768))
 11235  0A8A  00B3               	movwf	OLED_print_xy@s+1
 11236  0A8B  300C               	movlw	12
 11237  0A8C  0141               	movlb	1	; select bank1
 11238  0A8D  00CF               	movwf	??_channelView^(0+128)
 11239  0A8E  084F               	movf	??_channelView^(0+128),w
 11240  0A8F  0140               	movlb	0	; select bank0
 11241  0A90  00AD               	movwf	___bmul@multiplicand
 11242  0A91  0141               	movlb	1	; select bank1
 11243  0A92  0859               	movf	channelView@n^(0+128),w
 11244  0A93  31A0  2002  3189   	fcall	___bmul
 11245  0A96  3E04               	addlw	4
 11246  0A97  31B3  2328  3189   	fcall	_OLED_print_xy
 11247                           
 11248                           ;menu.c: 110:     ftoa(str, data->chData[n].Preq, 4,1);
 11249  0A9A  0141               	movlb	1	; select bank1
 11250  0A9B  0859               	movf	channelView@n^(0+128),w
 11251  0A9C  00CF               	movwf	??_channelView^(0+128)
 11252  0A9D  01D0               	clrf	(??_channelView^(0+128)+1)
 11253  0A9E  084F               	movf	??_channelView^(0+128),w
 11254  0A9F  0140               	movlb	0	; select bank0
 11255  0AA0  00B1               	movwf	___wmul@multiplier
 11256  0AA1  0141               	movlb	1	; select bank1
 11257  0AA2  0850               	movf	(??_channelView+1)^(0+128),w
 11258  0AA3  0140               	movlb	0	; select bank0
 11259  0AA4  00B2               	movwf	___wmul@multiplier+1
 11260  0AA5  301F               	movlw	31
 11261  0AA6  00B3               	movwf	___wmul@multiplicand
 11262  0AA7  3000               	movlw	0
 11263  0AA8  00B4               	movwf	___wmul@multiplicand+1
 11264  0AA9  31B1  21AD  3189   	fcall	___wmul
 11265  0AAC  0140               	movlb	0	; select bank0
 11266  0AAD  0831               	movf	?___wmul,w
 11267  0AAE  0141               	movlb	1	; select bank1
 11268  0AAF  074D               	addwf	channelView@data^(0+128),w
 11269  0AB0  00D1               	movwf	(??_channelView+2)^(0+128)
 11270  0AB1  0140               	movlb	0	; select bank0
 11271  0AB2  0832               	movf	?___wmul+1,w
 11272  0AB3  0141               	movlb	1	; select bank1
 11273  0AB4  3D4E               	addwfc	(channelView@data+1)^(0+128),w
 11274  0AB5  00D2               	movwf	(??_channelView+3)^(0+128)
 11275  0AB6  0851               	movf	(??_channelView+2)^(0+128),w
 11276  0AB7  3E32               	addlw	50
 11277  0AB8  0086               	movwf	6
 11278  0AB9  3000               	movlw	0
 11279  0ABA  3D52               	addwfc	(??_channelView+3)^(0+128),w
 11280  0ABB  0087               	movwf	7
 11281  0ABC  3F40               	moviw [0]fsr1
 11282  0ABD  00D5               	movwf	_channelView$2641^(0+128)
 11283  0ABE  3F41               	moviw [1]fsr1
 11284  0ABF  00D6               	movwf	(_channelView$2641+1)^(0+128)
 11285  0AC0  3F42               	moviw [2]fsr1
 11286  0AC1  00D7               	movwf	(_channelView$2641+2)^(0+128)
 11287  0AC2  3F43               	moviw [3]fsr1
 11288  0AC3  00D8               	movwf	(_channelView$2641+3)^(0+128)
 11289                           
 11290                           ;menu.c: 110:     ftoa(str, data->chData[n].Preq, 4,1);
 11291  0AC4  0858               	movf	(_channelView$2641+3)^(0+128),w
 11292  0AC5  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11293  0AC6  0857               	movf	(_channelView$2641+2)^(0+128),w
 11294  0AC7  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11295  0AC8  0856               	movf	(_channelView$2641+1)^(0+128),w
 11296  0AC9  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11297  0ACA  0855               	movf	_channelView$2641^(0+128),w
 11298  0ACB  00BF               	movwf	ftoa@fValue^(0+128)
 11299  0ACC  3004               	movlw	4
 11300  0ACD  00CF               	movwf	??_channelView^(0+128)
 11301  0ACE  084F               	movf	??_channelView^(0+128),w
 11302  0ACF  00C3               	movwf	ftoa@width^(0+128)
 11303  0AD0  01C4               	clrf	ftoa@prec^(0+128)
 11304  0AD1  0AC4               	incf	ftoa@prec^(0+128),f
 11305  0AD2  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11306  0AD3  31A1  21F3  3189   	fcall	_ftoa
 11307                           
 11308                           ;menu.c: 111:     OLED_print_xy(n * 12 + 6, 1, str);
 11309  0AD6  0140               	movlb	0	; select bank0
 11310  0AD7  01B1               	clrf	OLED_print_xy@row
 11311  0AD8  0AB1               	incf	OLED_print_xy@row,f
 11312  0AD9  303F               	movlw	low _str
 11313  0ADA  00B2               	movwf	OLED_print_xy@s
 11314  0ADB  3002               	movlw	high _str
 11315  0ADC  00B3               	movwf	OLED_print_xy@s+1
 11316  0ADD  300C               	movlw	12
 11317  0ADE  0141               	movlb	1	; select bank1
 11318  0ADF  00CF               	movwf	??_channelView^(0+128)
 11319  0AE0  084F               	movf	??_channelView^(0+128),w
 11320  0AE1  0140               	movlb	0	; select bank0
 11321  0AE2  00AD               	movwf	___bmul@multiplicand
 11322  0AE3  0141               	movlb	1	; select bank1
 11323  0AE4  0859               	movf	channelView@n^(0+128),w
 11324  0AE5  31A0  2002  3189   	fcall	___bmul
 11325  0AE8  3E06               	addlw	6
 11326  0AE9  31B3  2328  3189   	fcall	_OLED_print_xy
 11327                           
 11328                           ;menu.c: 112:     OLED_print_xy(n * 12 + 10, 1, "W)");
 11329  0AEC  0140               	movlb	0	; select bank0
 11330  0AED  01B1               	clrf	OLED_print_xy@row
 11331  0AEE  0AB1               	incf	OLED_print_xy@row,f
 11332  0AEF  3095               	movlw	low (STR_16| (0+32768))
 11333  0AF0  00B2               	movwf	OLED_print_xy@s
 11334  0AF1  30BB               	movlw	high (STR_16| (0+32768))
 11335  0AF2  00B3               	movwf	OLED_print_xy@s+1
 11336  0AF3  300C               	movlw	12
 11337  0AF4  0141               	movlb	1	; select bank1
 11338  0AF5  00CF               	movwf	??_channelView^(0+128)
 11339  0AF6  084F               	movf	??_channelView^(0+128),w
 11340  0AF7  0140               	movlb	0	; select bank0
 11341  0AF8  00AD               	movwf	___bmul@multiplicand
 11342  0AF9  0141               	movlb	1	; select bank1
 11343  0AFA  0859               	movf	channelView@n^(0+128),w
 11344  0AFB  31A0  2002  3189   	fcall	___bmul
 11345  0AFE  3E0A               	addlw	10
 11346  0AFF  31B3  2328  3189   	fcall	_OLED_print_xy
 11347                           
 11348                           ;menu.c: 113:    } else {
 11349  0B02  2BAF               	goto	l7658
 11350  0B03                     l7644:	
 11351                           
 11352                           ;menu.c: 114:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 11353  0B03  0140               	movlb	0	; select bank0
 11354  0B04  01B1               	clrf	OLED_print_xy@row
 11355  0B05  0AB1               	incf	OLED_print_xy@row,f
 11356  0B06  300C               	movlw	low (STR_17| (0+32768))
 11357  0B07  00B2               	movwf	OLED_print_xy@s
 11358  0B08  30BB               	movlw	high (STR_17| (0+32768))
 11359  0B09  00B3               	movwf	OLED_print_xy@s+1
 11360  0B0A  300C               	movlw	12
 11361  0B0B  0141               	movlb	1	; select bank1
 11362  0B0C  00CF               	movwf	??_channelView^(0+128)
 11363  0B0D  084F               	movf	??_channelView^(0+128),w
 11364  0B0E  0140               	movlb	0	; select bank0
 11365  0B0F  00AD               	movwf	___bmul@multiplicand
 11366  0B10  0141               	movlb	1	; select bank1
 11367  0B11  0859               	movf	channelView@n^(0+128),w
 11368  0B12  31A0  2002  3189   	fcall	___bmul
 11369  0B15  3E04               	addlw	4
 11370  0B16  31B3  2328  3189   	fcall	_OLED_print_xy
 11371  0B19  2BAF               	goto	l7658
 11372  0B1A                     l7646:	
 11373                           
 11374                           ;menu.c: 118:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 11375  0B1A  0140               	movlb	0	; select bank0
 11376  0B1B  01B1               	clrf	OLED_print_xy@row
 11377  0B1C  0AB1               	incf	OLED_print_xy@row,f
 11378  0B1D  30B0               	movlw	low (STR_18| (0+32768))
 11379  0B1E  00B2               	movwf	OLED_print_xy@s
 11380  0B1F  30BA               	movlw	high (STR_18| (0+32768))
 11381  0B20  00B3               	movwf	OLED_print_xy@s+1
 11382  0B21  300C               	movlw	12
 11383  0B22  0141               	movlb	1	; select bank1
 11384  0B23  00CF               	movwf	??_channelView^(0+128)
 11385  0B24  084F               	movf	??_channelView^(0+128),w
 11386  0B25  0140               	movlb	0	; select bank0
 11387  0B26  00AD               	movwf	___bmul@multiplicand
 11388  0B27  0141               	movlb	1	; select bank1
 11389  0B28  0859               	movf	channelView@n^(0+128),w
 11390  0B29  31A0  2002  3189   	fcall	___bmul
 11391  0B2C  31B3  2328  3189   	fcall	_OLED_print_xy
 11392                           
 11393                           ;menu.c: 119:    break;
 11394  0B2F  2BAF               	goto	l7658
 11395  0B30                     l7648:	
 11396                           
 11397                           ;menu.c: 121:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 11398  0B30  0140               	movlb	0	; select bank0
 11399  0B31  01B1               	clrf	OLED_print_xy@row
 11400  0B32  0AB1               	incf	OLED_print_xy@row,f
 11401  0B33  302E               	movlw	low (STR_19| (0+32768))
 11402  0B34  00B2               	movwf	OLED_print_xy@s
 11403  0B35  30BA               	movlw	high (STR_19| (0+32768))
 11404  0B36  00B3               	movwf	OLED_print_xy@s+1
 11405  0B37  300C               	movlw	12
 11406  0B38  0141               	movlb	1	; select bank1
 11407  0B39  00CF               	movwf	??_channelView^(0+128)
 11408  0B3A  084F               	movf	??_channelView^(0+128),w
 11409  0B3B  0140               	movlb	0	; select bank0
 11410  0B3C  00AD               	movwf	___bmul@multiplicand
 11411  0B3D  0141               	movlb	1	; select bank1
 11412  0B3E  0859               	movf	channelView@n^(0+128),w
 11413  0B3F  31A0  2002  3189   	fcall	___bmul
 11414  0B42  31B3  2328  3189   	fcall	_OLED_print_xy
 11415                           
 11416                           ;menu.c: 122:    break;
 11417  0B45  2BAF               	goto	l7658
 11418  0B46                     l7650:	
 11419                           
 11420                           ;menu.c: 124:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 11421  0B46  0140               	movlb	0	; select bank0
 11422  0B47  01B1               	clrf	OLED_print_xy@row
 11423  0B48  0AB1               	incf	OLED_print_xy@row,f
 11424  0B49  30A3               	movlw	low (STR_20| (0+32768))
 11425  0B4A  00B2               	movwf	OLED_print_xy@s
 11426  0B4B  30BA               	movlw	high (STR_20| (0+32768))
 11427  0B4C  00B3               	movwf	OLED_print_xy@s+1
 11428  0B4D  300C               	movlw	12
 11429  0B4E  0141               	movlb	1	; select bank1
 11430  0B4F  00CF               	movwf	??_channelView^(0+128)
 11431  0B50  084F               	movf	??_channelView^(0+128),w
 11432  0B51  0140               	movlb	0	; select bank0
 11433  0B52  00AD               	movwf	___bmul@multiplicand
 11434  0B53  0141               	movlb	1	; select bank1
 11435  0B54  0859               	movf	channelView@n^(0+128),w
 11436  0B55  31A0  2002  3189   	fcall	___bmul
 11437  0B58  31B3  2328  3189   	fcall	_OLED_print_xy
 11438                           
 11439                           ;menu.c: 125:    break;
 11440  0B5B  2BAF               	goto	l7658
 11441  0B5C                     l7652:	
 11442                           
 11443                           ;menu.c: 127:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 11444  0B5C  0140               	movlb	0	; select bank0
 11445  0B5D  01B1               	clrf	OLED_print_xy@row
 11446  0B5E  0AB1               	incf	OLED_print_xy@row,f
 11447  0B5F  30CA               	movlw	low (STR_21| (0+32768))
 11448  0B60  00B2               	movwf	OLED_print_xy@s
 11449  0B61  30BA               	movlw	high (STR_21| (0+32768))
 11450  0B62  00B3               	movwf	OLED_print_xy@s+1
 11451  0B63  300C               	movlw	12
 11452  0B64  0141               	movlb	1	; select bank1
 11453  0B65  00CF               	movwf	??_channelView^(0+128)
 11454  0B66  084F               	movf	??_channelView^(0+128),w
 11455  0B67  0140               	movlb	0	; select bank0
 11456  0B68  00AD               	movwf	___bmul@multiplicand
 11457  0B69  0141               	movlb	1	; select bank1
 11458  0B6A  0859               	movf	channelView@n^(0+128),w
 11459  0B6B  31A0  2002  3189   	fcall	___bmul
 11460  0B6E  31B3  2328  3189   	fcall	_OLED_print_xy
 11461                           
 11462                           ;menu.c: 128:    break;
 11463  0B71  2BAF               	goto	l7658
 11464  0B72                     l7656:	
 11465  0B72  0859               	movf	channelView@n^(0+128),w
 11466  0B73  00CF               	movwf	??_channelView^(0+128)
 11467  0B74  01D0               	clrf	(??_channelView^(0+128)+1)
 11468  0B75  084F               	movf	??_channelView^(0+128),w
 11469  0B76  0140               	movlb	0	; select bank0
 11470  0B77  00B1               	movwf	___wmul@multiplier
 11471  0B78  0141               	movlb	1	; select bank1
 11472  0B79  0850               	movf	(??_channelView+1)^(0+128),w
 11473  0B7A  0140               	movlb	0	; select bank0
 11474  0B7B  00B2               	movwf	___wmul@multiplier+1
 11475  0B7C  301F               	movlw	31
 11476  0B7D  00B3               	movwf	___wmul@multiplicand
 11477  0B7E  3000               	movlw	0
 11478  0B7F  00B4               	movwf	___wmul@multiplicand+1
 11479  0B80  31B1  21AD  3189   	fcall	___wmul
 11480  0B83  0140               	movlb	0	; select bank0
 11481  0B84  0831               	movf	?___wmul,w
 11482  0B85  0141               	movlb	1	; select bank1
 11483  0B86  074D               	addwf	channelView@data^(0+128),w
 11484  0B87  00D1               	movwf	(??_channelView+2)^(0+128)
 11485  0B88  0140               	movlb	0	; select bank0
 11486  0B89  0832               	movf	?___wmul+1,w
 11487  0B8A  0141               	movlb	1	; select bank1
 11488  0B8B  3D4E               	addwfc	(channelView@data+1)^(0+128),w
 11489  0B8C  00D2               	movwf	(??_channelView+3)^(0+128)
 11490  0B8D  0851               	movf	(??_channelView+2)^(0+128),w
 11491  0B8E  3E48               	addlw	72
 11492  0B8F  0086               	movwf	6
 11493  0B90  3000               	movlw	0
 11494  0B91  3D52               	addwfc	(??_channelView+3)^(0+128),w
 11495  0B92  0087               	movwf	7
 11496  0B93  0801               	movf	1,w
 11497  0B94  00D3               	movwf	(??_channelView+4)^(0+128)
 11498  0B95  01D4               	clrf	((??_channelView+4)^(0+128)+1)
 11499                           
 11500                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11501                           ; Switch size 1, requested type "simple"
 11502                           ; Number of cases is 1, Range of values is 0 to 0
 11503                           ; switch strategies available:
 11504                           ; Name         Instructions Cycles
 11505                           ; simple_byte            4     3 (average)
 11506                           ; direct_byte            8     6 (fixed)
 11507                           ; jumptable            260     6 (fixed)
 11508                           ;	Chosen strategy is simple_byte
 11509  0B96  0854               	movf	(??_channelView+5)^(0+128),w
 11510  0B97  3A00               	xorlw	0	; case 0
 11511  0B98  1903               	skipnz
 11512  0B99  2B9B               	goto	l8672
 11513  0B9A  2B5C               	goto	l7652
 11514  0B9B                     l8672:	
 11515                           
 11516                           ; Switch size 1, requested type "simple"
 11517                           ; Number of cases is 6, Range of values is 0 to 5
 11518                           ; switch strategies available:
 11519                           ; Name         Instructions Cycles
 11520                           ; direct_byte           18     6 (fixed)
 11521                           ; simple_byte           19    10 (average)
 11522                           ; jumptable            260     6 (fixed)
 11523                           ;	Chosen strategy is simple_byte
 11524  0B9B  0853               	movf	(??_channelView+4)^(0+128),w
 11525  0B9C  3A00               	xorlw	0	; case 0
 11526  0B9D  1903               	skipnz
 11527  0B9E  29F9               	goto	l7630
 11528  0B9F  3A01               	xorlw	1	; case 1
 11529  0BA0  1903               	skipnz
 11530  0BA1  2A0F               	goto	l7632
 11531  0BA2  3A03               	xorlw	3	; case 2
 11532  0BA3  1903               	skipnz
 11533  0BA4  2B1A               	goto	l7646
 11534  0BA5  3A01               	xorlw	1	; case 3
 11535  0BA6  1903               	skipnz
 11536  0BA7  2B30               	goto	l7648
 11537  0BA8  3A07               	xorlw	7	; case 4
 11538  0BA9  1903               	skipnz
 11539  0BAA  2B46               	goto	l7650
 11540  0BAB  3A01               	xorlw	1	; case 5
 11541  0BAC  1903               	skipnz
 11542  0BAD  29E3               	goto	l7628
 11543  0BAE  2B5C               	goto	l7652
 11544  0BAF                     l7658:	
 11545                           
 11546                           ;menu.c: 130:  }
 11547  0BAF  3001               	movlw	1
 11548  0BB0  0141               	movlb	1	; select bank1
 11549  0BB1  00CF               	movwf	??_channelView^(0+128)
 11550  0BB2  084F               	movf	??_channelView^(0+128),w
 11551  0BB3  07D9               	addwf	channelView@n^(0+128),f
 11552  0BB4  29DE               	goto	l7624
 11553  0BB5                     l7662:	
 11554                           
 11555                           ;menu.c: 131:  page = paging(page, 4);
 11556  0BB5  3004               	movlw	4
 11557  0BB6  00CF               	movwf	??_channelView^(0+128)
 11558  0BB7  084F               	movf	??_channelView^(0+128),w
 11559  0BB8  0140               	movlb	0	; select bank0
 11560  0BB9  00AB               	movwf	paging@lastPage
 11561  0BBA  0141               	movlb	1	; select bank1
 11562  0BBB  086D               	movf	channelView@page^(0+128),w
 11563  0BBC  31A8  20C1         	fcall	_paging
 11564  0BBE  0141               	movlb	1	; select bank1
 11565  0BBF  00D0               	movwf	(??_channelView+1)^(0+128)
 11566  0BC0  0850               	movf	(??_channelView+1)^(0+128),w
 11567  0BC1  00ED               	movwf	channelView@page^(0+128)
 11568                           
 11569                           ;menu.c: 132:  selectedChannel = page;
 11570  0BC2  086D               	movf	channelView@page^(0+128),w
 11571  0BC3  00CF               	movwf	??_channelView^(0+128)
 11572  0BC4  084F               	movf	??_channelView^(0+128),w
 11573  0BC5  00EE               	movwf	_selectedChannel^(0+128)
 11574                           
 11575                           ;menu.c: 134:  return page;
 11576  0BC6  086D               	movf	channelView@page^(0+128),w
 11577  0BC7  0008               	return
 11578  0BC8                     __end_of_channelView:	
 11579                           
 11580                           	psect	text18
 11581  1E1C                     __ptext18:	
 11582 ;; *************** function _statusView *****************
 11583 ;; Defined at:
 11584 ;;		line 16 in file "menu.c"
 11585 ;; Parameters:    Size  Location     Type
 11586 ;;  data            2   45[BANK1 ] PTR struct .
 11587 ;;		 -> data(166), 
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;		None
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      unsigned char 
 11592 ;; Registers used:
 11593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11599 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11601 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11602 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11603 ;;Total ram usage:        4 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:    9
 11606 ;; This function calls:
 11607 ;;		_OLED_print_xy
 11608 ;;		_ftoa
 11609 ;;		_itoa
 11610 ;;		_paging
 11611 ;;		_returnToPage
 11612 ;; This function is called by:
 11613 ;;		_menu
 11614 ;; This function uses a non-reentrant model
 11615 ;;
 11616                           
 11617                           
 11618                           ;psect for function _statusView
 11619  1E1C                     _statusView:	
 11620                           
 11621                           ;menu.c: 16: uint8_t statusView(t_globalData *data);menu.c: 17: {;menu.c: 18:  static ui
      +                          nt8_t page = 0;;menu.c: 19:  static uint8_t prevSensorStat = 1;;menu.c: 22:  if (prevSen
      +                          sorStat != data->status.SENSOR_OK) {
 11622                           
 11623                           ;incstack = 0
 11624                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11625  1E1C  0141               	movlb	1	; select bank1
 11626  1E1D  084D               	movf	statusView@data^(0+128),w
 11627  1E1E  3E29               	addlw	41
 11628  1E1F  0086               	movwf	6
 11629  1E20  3000               	movlw	0
 11630  1E21  3D4E               	addwfc	(statusView@data+1)^(0+128),w
 11631  1E22  0087               	movwf	7
 11632  1E23  0C01               	rrf	1,w
 11633  1E24  00CF               	movwf	??_statusView^(0+128)
 11634  1E25  0CCF               	rrf	??_statusView^(0+128),f
 11635  1E26  0C4F               	rrf	??_statusView^(0+128),w
 11636  1E27  3901               	andlw	1
 11637  1E28  0143               	movlb	3	; select bank3
 11638  1E29  066F               	xorwf	statusView@prevSensorStat^(0+384),w
 11639  1E2A  1903               	skipnz
 11640  1E2B  2E4C               	goto	l7544
 11641                           
 11642                           ;menu.c: 23:   prevSensorStat = data->status.SENSOR_OK;
 11643  1E2C  0141               	movlb	1	; select bank1
 11644  1E2D  084D               	movf	statusView@data^(0+128),w
 11645  1E2E  3E29               	addlw	41
 11646  1E2F  0086               	movwf	6
 11647  1E30  3000               	movlw	0
 11648  1E31  3D4E               	addwfc	(statusView@data+1)^(0+128),w
 11649  1E32  0087               	movwf	7
 11650  1E33  3000               	movlw	0
 11651  1E34  1981               	btfsc	1,3
 11652  1E35  3001               	movlw	1
 11653  1E36  0143               	movlb	3	; select bank3
 11654  1E37  00EF               	movwf	statusView@prevSensorStat^(0+384)
 11655                           
 11656                           ;menu.c: 25:   if (data->status.SENSOR_OK)
 11657  1E38  0141               	movlb	1	; select bank1
 11658  1E39  084D               	movf	statusView@data^(0+128),w
 11659  1E3A  3E29               	addlw	41
 11660  1E3B  0086               	movwf	6
 11661  1E3C  3000               	movlw	0
 11662  1E3D  3D4E               	addwfc	(statusView@data+1)^(0+128),w
 11663  1E3E  0087               	movwf	7
 11664  1E3F  1D81               	btfss	1,3
 11665  1E40  2E44               	goto	l7540
 11666                           
 11667                           ;menu.c: 26:    page = 0;
 11668  1E41  0142               	movlb	2	; select bank2
 11669  1E42  01EE               	clrf	statusView@page^(0+256)
 11670  1E43  2E49               	goto	l7542
 11671  1E44                     l7540:	
 11672                           
 11673                           ;menu.c: 28:    page = 3;
 11674  1E44  3003               	movlw	3
 11675  1E45  00CF               	movwf	??_statusView^(0+128)
 11676  1E46  084F               	movf	??_statusView^(0+128),w
 11677  1E47  0142               	movlb	2	; select bank2
 11678  1E48  00EE               	movwf	statusView@page^(0+256)
 11679  1E49                     l7542:	
 11680                           
 11681                           ;menu.c: 29:   g_screenRefresh = 1;
 11682  1E49  0141               	movlb	1	; select bank1
 11683  1E4A  01EF               	clrf	_g_screenRefresh^(0+128)
 11684  1E4B  0AEF               	incf	_g_screenRefresh^(0+128),f
 11685  1E4C                     l7544:	
 11686                           
 11687                           ;menu.c: 32:  returnToPage(page);
 11688  1E4C  0142               	movlb	2	; select bank2
 11689  1E4D  086E               	movf	statusView@page^(0+256),w
 11690  1E4E  3188  2002  319E   	fcall	_returnToPage
 11691                           
 11692                           ;menu.c: 33:  if (g_screenRefresh) {
 11693  1E51  0141               	movlb	1	; select bank1
 11694  1E52  086F               	movf	_g_screenRefresh^(0+128),w
 11695  1E53  1903               	btfsc	3,2
 11696  1E54  2E6A               	goto	l7550
 11697                           
 11698                           ;menu.c: 34:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 11699  1E55  0140               	movlb	0	; select bank0
 11700  1E56  01B1               	clrf	OLED_print_xy@row
 11701  1E57  306F               	movlw	low (STR_1| (0+32768))
 11702  1E58  00B2               	movwf	OLED_print_xy@s
 11703  1E59  30B8               	movlw	high (STR_1| (0+32768))
 11704  1E5A  00B3               	movwf	OLED_print_xy@s+1
 11705  1E5B  3000               	movlw	0
 11706  1E5C  31B3  2328  319E   	fcall	_OLED_print_xy
 11707                           
 11708                           ;menu.c: 35:   OLED_print_xy(4 * 12, 1, "Sensor:");
 11709  1E5F  0140               	movlb	0	; select bank0
 11710  1E60  01B1               	clrf	OLED_print_xy@row
 11711  1E61  0AB1               	incf	OLED_print_xy@row,f
 11712  1E62  3045               	movlw	low (STR_2| (0+32768))
 11713  1E63  00B2               	movwf	OLED_print_xy@s
 11714  1E64  30BB               	movlw	high (STR_2| (0+32768))
 11715  1E65  00B3               	movwf	OLED_print_xy@s+1
 11716  1E66  3030               	movlw	48
 11717  1E67  31B3  2328  319E   	fcall	_OLED_print_xy
 11718  1E6A                     l7550:	
 11719                           
 11720                           ;menu.c: 37:  if (data->status.AUX_SENSOR_OK) {
 11721  1E6A  0141               	movlb	1	; select bank1
 11722  1E6B  084D               	movf	statusView@data^(0+128),w
 11723  1E6C  3E29               	addlw	41
 11724  1E6D  0086               	movwf	6
 11725  1E6E  3000               	movlw	0
 11726  1E6F  3D4E               	addwfc	(statusView@data+1)^(0+128),w
 11727  1E70  0087               	movwf	7
 11728  1E71  1E01               	btfss	1,4
 11729  1E72  2ECA               	goto	l7562
 11730                           
 11731                           ;menu.c: 38:   ftoa(str, data->tempC, 5, 1);
 11732  1E73  084D               	movf	statusView@data^(0+128),w
 11733  1E74  0086               	movwf	6
 11734  1E75  084E               	movf	(statusView@data+1)^(0+128),w
 11735  1E76  0087               	movwf	7
 11736  1E77  3F40               	moviw [0]fsr1
 11737  1E78  00BF               	movwf	ftoa@fValue^(0+128)
 11738  1E79  3F41               	moviw [1]fsr1
 11739  1E7A  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11740  1E7B  3F42               	moviw [2]fsr1
 11741  1E7C  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11742  1E7D  3F43               	moviw [3]fsr1
 11743  1E7E  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11744  1E7F  3005               	movlw	5
 11745  1E80  00CF               	movwf	??_statusView^(0+128)
 11746  1E81  084F               	movf	??_statusView^(0+128),w
 11747  1E82  00C3               	movwf	ftoa@width^(0+128)
 11748  1E83  01C4               	clrf	ftoa@prec^(0+128)
 11749  1E84  0AC4               	incf	ftoa@prec^(0+128),f
 11750  1E85  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11751  1E86  31A1  21F3  319E   	fcall	_ftoa
 11752                           
 11753                           ;menu.c: 39:   OLED_print_xy(0, 1, str);
 11754  1E89  0140               	movlb	0	; select bank0
 11755  1E8A  01B1               	clrf	OLED_print_xy@row
 11756  1E8B  0AB1               	incf	OLED_print_xy@row,f
 11757  1E8C  303F               	movlw	low _str
 11758  1E8D  00B2               	movwf	OLED_print_xy@s
 11759  1E8E  3002               	movlw	high _str
 11760  1E8F  00B3               	movwf	OLED_print_xy@s+1
 11761  1E90  3000               	movlw	0
 11762  1E91  31B3  2328  319E   	fcall	_OLED_print_xy
 11763                           
 11764                           ;menu.c: 40:   OLED_print_xy(5, 1, "\001 \002");
 11765  1E94  0140               	movlb	0	; select bank0
 11766  1E95  01B1               	clrf	OLED_print_xy@row
 11767  1E96  0AB1               	incf	OLED_print_xy@row,f
 11768  1E97  307A               	movlw	low (STR_3| (0+32768))
 11769  1E98  00B2               	movwf	OLED_print_xy@s
 11770  1E99  30BB               	movlw	high (STR_3| (0+32768))
 11771  1E9A  00B3               	movwf	OLED_print_xy@s+1
 11772  1E9B  3005               	movlw	5
 11773  1E9C  31B3  2328  319E   	fcall	_OLED_print_xy
 11774                           
 11775                           ;menu.c: 41:   ftoa(str, data->tempAux, 3, 0);
 11776  1E9F  0141               	movlb	1	; select bank1
 11777  1EA0  084D               	movf	statusView@data^(0+128),w
 11778  1EA1  0086               	movwf	6
 11779  1EA2  084E               	movf	(statusView@data+1)^(0+128),w
 11780  1EA3  0087               	movwf	7
 11781  1EA4  314D               	addfsr 1,13
 11782  1EA5  3F40               	moviw [0]fsr1
 11783  1EA6  00BF               	movwf	ftoa@fValue^(0+128)
 11784  1EA7  3F41               	moviw [1]fsr1
 11785  1EA8  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11786  1EA9  3F42               	moviw [2]fsr1
 11787  1EAA  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11788  1EAB  3F43               	moviw [3]fsr1
 11789  1EAC  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11790  1EAD  3003               	movlw	3
 11791  1EAE  00CF               	movwf	??_statusView^(0+128)
 11792  1EAF  084F               	movf	??_statusView^(0+128),w
 11793  1EB0  00C3               	movwf	ftoa@width^(0+128)
 11794  1EB1  01C4               	clrf	ftoa@prec^(0+128)
 11795  1EB2  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11796  1EB3  31A1  21F3  319E   	fcall	_ftoa
 11797                           
 11798                           ;menu.c: 42:   OLED_print_xy(8, 1, str);
 11799  1EB6  0140               	movlb	0	; select bank0
 11800  1EB7  01B1               	clrf	OLED_print_xy@row
 11801  1EB8  0AB1               	incf	OLED_print_xy@row,f
 11802  1EB9  303F               	movlw	low _str
 11803  1EBA  00B2               	movwf	OLED_print_xy@s
 11804  1EBB  3002               	movlw	high _str
 11805  1EBC  00B3               	movwf	OLED_print_xy@s+1
 11806  1EBD  3008               	movlw	8
 11807  1EBE  31B3  2328  319E   	fcall	_OLED_print_xy
 11808                           
 11809                           ;menu.c: 43:   OLED_print_xy(11, 1, "\001");
 11810  1EC1  0140               	movlb	0	; select bank0
 11811  1EC2  01B1               	clrf	OLED_print_xy@row
 11812  1EC3  0AB1               	incf	OLED_print_xy@row,f
 11813  1EC4  3098               	movlw	low (STR_4| (0+32768))
 11814  1EC5  00B2               	movwf	OLED_print_xy@s
 11815  1EC6  30BB               	movlw	high (STR_4| (0+32768))
 11816  1EC7  00B3               	movwf	OLED_print_xy@s+1
 11817  1EC8  300B               	movlw	11
 11818  1EC9  2EF3               	goto	L5
 11819  1ECA                     l7562:	
 11820                           ;menu.c: 44:  } else {
 11821                           
 11822                           
 11823                           ;menu.c: 45:   ftoa(str, data->tempC, 5, 1);
 11824  1ECA  084D               	movf	statusView@data^(0+128),w
 11825  1ECB  0086               	movwf	6
 11826  1ECC  084E               	movf	(statusView@data+1)^(0+128),w
 11827  1ECD  0087               	movwf	7
 11828  1ECE  3F40               	moviw [0]fsr1
 11829  1ECF  00BF               	movwf	ftoa@fValue^(0+128)
 11830  1ED0  3F41               	moviw [1]fsr1
 11831  1ED1  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11832  1ED2  3F42               	moviw [2]fsr1
 11833  1ED3  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11834  1ED4  3F43               	moviw [3]fsr1
 11835  1ED5  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11836  1ED6  3005               	movlw	5
 11837  1ED7  00CF               	movwf	??_statusView^(0+128)
 11838  1ED8  084F               	movf	??_statusView^(0+128),w
 11839  1ED9  00C3               	movwf	ftoa@width^(0+128)
 11840  1EDA  01C4               	clrf	ftoa@prec^(0+128)
 11841  1EDB  0AC4               	incf	ftoa@prec^(0+128),f
 11842  1EDC  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11843  1EDD  31A1  21F3  319E   	fcall	_ftoa
 11844                           
 11845                           ;menu.c: 46:   OLED_print_xy(0, 1, str);
 11846  1EE0  0140               	movlb	0	; select bank0
 11847  1EE1  01B1               	clrf	OLED_print_xy@row
 11848  1EE2  0AB1               	incf	OLED_print_xy@row,f
 11849  1EE3  303F               	movlw	low _str
 11850  1EE4  00B2               	movwf	OLED_print_xy@s
 11851  1EE5  3002               	movlw	high _str
 11852  1EE6  00B3               	movwf	OLED_print_xy@s+1
 11853  1EE7  3000               	movlw	0
 11854  1EE8  31B3  2328  319E   	fcall	_OLED_print_xy
 11855                           
 11856                           ;menu.c: 47:   OLED_print_xy(5, 1, "\001      ");
 11857  1EEB  0140               	movlb	0	; select bank0
 11858  1EEC  01B1               	clrf	OLED_print_xy@row
 11859  1EED  0AB1               	incf	OLED_print_xy@row,f
 11860  1EEE  3025               	movlw	low (STR_5| (0+32768))
 11861  1EEF  00B2               	movwf	OLED_print_xy@s
 11862  1EF0  30BB               	movlw	high (STR_5| (0+32768))
 11863  1EF1  00B3               	movwf	OLED_print_xy@s+1
 11864  1EF2  3005               	movlw	5
 11865  1EF3                     L5:	
 11866  1EF3  31B3  2328  319E   	fcall	_OLED_print_xy
 11867                           
 11868                           ;menu.c: 49:  ftoa(str, data->relHum, 5, 1);
 11869                           
 11870                           ;menu.c: 48:  }
 11871  1EF6  0141               	movlb	1	; select bank1
 11872  1EF7  084D               	movf	statusView@data^(0+128),w
 11873  1EF8  0086               	movwf	6
 11874  1EF9  084E               	movf	(statusView@data+1)^(0+128),w
 11875  1EFA  0087               	movwf	7
 11876  1EFB  3144               	addfsr 1,4
 11877  1EFC  3F40               	moviw [0]fsr1
 11878  1EFD  00BF               	movwf	ftoa@fValue^(0+128)
 11879  1EFE  3F41               	moviw [1]fsr1
 11880  1EFF  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11881  1F00  3F42               	moviw [2]fsr1
 11882  1F01  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11883  1F02  3F43               	moviw [3]fsr1
 11884  1F03  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11885  1F04  3005               	movlw	5
 11886  1F05  00CF               	movwf	??_statusView^(0+128)
 11887  1F06  084F               	movf	??_statusView^(0+128),w
 11888  1F07  00C3               	movwf	ftoa@width^(0+128)
 11889  1F08  01C4               	clrf	ftoa@prec^(0+128)
 11890  1F09  0AC4               	incf	ftoa@prec^(0+128),f
 11891  1F0A  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11892  1F0B  31A1  21F3  319E   	fcall	_ftoa
 11893                           
 11894                           ;menu.c: 50:  OLED_print_xy(12, 1, str);
 11895  1F0E  0140               	movlb	0	; select bank0
 11896  1F0F  01B1               	clrf	OLED_print_xy@row
 11897  1F10  0AB1               	incf	OLED_print_xy@row,f
 11898  1F11  303F               	movlw	low _str
 11899  1F12  00B2               	movwf	OLED_print_xy@s
 11900  1F13  3002               	movlw	high _str
 11901  1F14  00B3               	movwf	OLED_print_xy@s+1
 11902  1F15  300C               	movlw	12
 11903  1F16  31B3  2328  319E   	fcall	_OLED_print_xy
 11904                           
 11905                           ;menu.c: 51:  OLED_print_xy(12 + 5, 1, "%     ");
 11906  1F19  0140               	movlb	0	; select bank0
 11907  1F1A  01B1               	clrf	OLED_print_xy@row
 11908  1F1B  0AB1               	incf	OLED_print_xy@row,f
 11909  1F1C  3062               	movlw	low (STR_6| (0+32768))
 11910  1F1D  00B2               	movwf	OLED_print_xy@s
 11911  1F1E  30BB               	movlw	high (STR_6| (0+32768))
 11912  1F1F  00B3               	movwf	OLED_print_xy@s+1
 11913  1F20  3011               	movlw	17
 11914  1F21  31B3  2328  319E   	fcall	_OLED_print_xy
 11915                           
 11916                           ;menu.c: 52:  ftoa(str, data->dewPointC, 5, 1);
 11917  1F24  0141               	movlb	1	; select bank1
 11918  1F25  084D               	movf	statusView@data^(0+128),w
 11919  1F26  0086               	movwf	6
 11920  1F27  084E               	movf	(statusView@data+1)^(0+128),w
 11921  1F28  0087               	movwf	7
 11922  1F29  3148               	addfsr 1,8
 11923  1F2A  3F40               	moviw [0]fsr1
 11924  1F2B  00BF               	movwf	ftoa@fValue^(0+128)
 11925  1F2C  3F41               	moviw [1]fsr1
 11926  1F2D  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11927  1F2E  3F42               	moviw [2]fsr1
 11928  1F2F  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11929  1F30  3F43               	moviw [3]fsr1
 11930  1F31  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11931  1F32  3005               	movlw	5
 11932  1F33  00CF               	movwf	??_statusView^(0+128)
 11933  1F34  084F               	movf	??_statusView^(0+128),w
 11934  1F35  00C3               	movwf	ftoa@width^(0+128)
 11935  1F36  01C4               	clrf	ftoa@prec^(0+128)
 11936  1F37  0AC4               	incf	ftoa@prec^(0+128),f
 11937  1F38  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11938  1F39  31A1  21F3  319E   	fcall	_ftoa
 11939                           
 11940                           ;menu.c: 53:  OLED_print_xy(2 * 12, 1, str);
 11941  1F3C  0140               	movlb	0	; select bank0
 11942  1F3D  01B1               	clrf	OLED_print_xy@row
 11943  1F3E  0AB1               	incf	OLED_print_xy@row,f
 11944  1F3F  303F               	movlw	low _str
 11945  1F40  00B2               	movwf	OLED_print_xy@s
 11946  1F41  3002               	movlw	high _str
 11947  1F42  00B3               	movwf	OLED_print_xy@s+1
 11948  1F43  3018               	movlw	24
 11949  1F44  31B3  2328  319E   	fcall	_OLED_print_xy
 11950                           
 11951                           ;menu.c: 54:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 11952  1F47  0140               	movlb	0	; select bank0
 11953  1F48  01B1               	clrf	OLED_print_xy@row
 11954  1F49  0AB1               	incf	OLED_print_xy@row,f
 11955  1F4A  3025               	movlw	low (STR_5| (0+32768))
 11956  1F4B  00B2               	movwf	OLED_print_xy@s
 11957  1F4C  30BB               	movlw	high (STR_5| (0+32768))
 11958  1F4D  00B3               	movwf	OLED_print_xy@s+1
 11959  1F4E  301D               	movlw	29
 11960  1F4F  31B3  2328  319E   	fcall	_OLED_print_xy
 11961                           
 11962                           ;menu.c: 55:  ftoa(str, data->voltage, 4, 1);
 11963  1F52  0141               	movlb	1	; select bank1
 11964  1F53  084D               	movf	statusView@data^(0+128),w
 11965  1F54  0086               	movwf	6
 11966  1F55  084E               	movf	(statusView@data+1)^(0+128),w
 11967  1F56  0087               	movwf	7
 11968  1F57  3151               	addfsr 1,17
 11969  1F58  3F40               	moviw [0]fsr1
 11970  1F59  00BF               	movwf	ftoa@fValue^(0+128)
 11971  1F5A  3F41               	moviw [1]fsr1
 11972  1F5B  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 11973  1F5C  3F42               	moviw [2]fsr1
 11974  1F5D  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 11975  1F5E  3F43               	moviw [3]fsr1
 11976  1F5F  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 11977  1F60  3004               	movlw	4
 11978  1F61  00CF               	movwf	??_statusView^(0+128)
 11979  1F62  084F               	movf	??_statusView^(0+128),w
 11980  1F63  00C3               	movwf	ftoa@width^(0+128)
 11981  1F64  01C4               	clrf	ftoa@prec^(0+128)
 11982  1F65  0AC4               	incf	ftoa@prec^(0+128),f
 11983  1F66  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11984  1F67  31A1  21F3  319E   	fcall	_ftoa
 11985                           
 11986                           ;menu.c: 56:  OLED_print_xy(3 * 12, 1, str);
 11987  1F6A  0140               	movlb	0	; select bank0
 11988  1F6B  01B1               	clrf	OLED_print_xy@row
 11989  1F6C  0AB1               	incf	OLED_print_xy@row,f
 11990  1F6D  303F               	movlw	low _str
 11991  1F6E  00B2               	movwf	OLED_print_xy@s
 11992  1F6F  3002               	movlw	high _str
 11993  1F70  00B3               	movwf	OLED_print_xy@s+1
 11994  1F71  3024               	movlw	36
 11995  1F72  31B3  2328  319E   	fcall	_OLED_print_xy
 11996                           
 11997                           ;menu.c: 57:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 11998  1F75  0140               	movlb	0	; select bank0
 11999  1F76  01B1               	clrf	OLED_print_xy@row
 12000  1F77  0AB1               	incf	OLED_print_xy@row,f
 12001  1F78  307E               	movlw	low (STR_8| (0+32768))
 12002  1F79  00B2               	movwf	OLED_print_xy@s
 12003  1F7A  30BB               	movlw	high (STR_8| (0+32768))
 12004  1F7B  00B3               	movwf	OLED_print_xy@s+1
 12005  1F7C  3028               	movlw	40
 12006  1F7D  31B3  2328  319E   	fcall	_OLED_print_xy
 12007                           
 12008                           ;menu.c: 58:  ftoa(str, data->power, 4, 1);
 12009  1F80  0141               	movlb	1	; select bank1
 12010  1F81  084D               	movf	statusView@data^(0+128),w
 12011  1F82  0086               	movwf	6
 12012  1F83  084E               	movf	(statusView@data+1)^(0+128),w
 12013  1F84  0087               	movwf	7
 12014  1F85  3159               	addfsr 1,25
 12015  1F86  3F40               	moviw [0]fsr1
 12016  1F87  00BF               	movwf	ftoa@fValue^(0+128)
 12017  1F88  3F41               	moviw [1]fsr1
 12018  1F89  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 12019  1F8A  3F42               	moviw [2]fsr1
 12020  1F8B  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 12021  1F8C  3F43               	moviw [3]fsr1
 12022  1F8D  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 12023  1F8E  3004               	movlw	4
 12024  1F8F  00CF               	movwf	??_statusView^(0+128)
 12025  1F90  084F               	movf	??_statusView^(0+128),w
 12026  1F91  00C3               	movwf	ftoa@width^(0+128)
 12027  1F92  01C4               	clrf	ftoa@prec^(0+128)
 12028  1F93  0AC4               	incf	ftoa@prec^(0+128),f
 12029  1F94  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12030  1F95  31A1  21F3  319E   	fcall	_ftoa
 12031                           
 12032                           ;menu.c: 59:  OLED_print_xy(3 * 12 + 7, 1, str);
 12033  1F98  0140               	movlb	0	; select bank0
 12034  1F99  01B1               	clrf	OLED_print_xy@row
 12035  1F9A  0AB1               	incf	OLED_print_xy@row,f
 12036  1F9B  303F               	movlw	low _str
 12037  1F9C  00B2               	movwf	OLED_print_xy@s
 12038  1F9D  3002               	movlw	high _str
 12039  1F9E  00B3               	movwf	OLED_print_xy@s+1
 12040  1F9F  302B               	movlw	43
 12041  1FA0  31B3  2328  319E   	fcall	_OLED_print_xy
 12042                           
 12043                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 11, 1, "W");
 12044  1FA3  0140               	movlb	0	; select bank0
 12045  1FA4  01B1               	clrf	OLED_print_xy@row
 12046  1FA5  0AB1               	incf	OLED_print_xy@row,f
 12047  1FA6  30DE               	movlw	low ((STR_79+11)| (0+32768))
 12048  1FA7  00B2               	movwf	OLED_print_xy@s
 12049  1FA8  30B9               	movlw	high ((STR_79+11)| (0+32768))
 12050  1FA9  00B3               	movwf	OLED_print_xy@s+1
 12051  1FAA  302F               	movlw	47
 12052  1FAB  31B3  2328  319E   	fcall	_OLED_print_xy
 12053                           
 12054                           ;menu.c: 61:  itoa(str, 1, 3);
 12055  1FAE  303F               	movlw	low _str
 12056  1FAF  0141               	movlb	1	; select bank1
 12057  1FB0  00BF               	movwf	itoa@str^(0+128)
 12058  1FB1  3002               	movlw	high _str
 12059  1FB2  00C0               	movwf	(itoa@str+1)^(0+128)
 12060  1FB3  01C1               	clrf	itoa@value^(0+128)
 12061  1FB4  0AC1               	incf	itoa@value^(0+128),f
 12062  1FB5  3003               	movlw	3
 12063  1FB6  00CF               	movwf	??_statusView^(0+128)
 12064  1FB7  084F               	movf	??_statusView^(0+128),w
 12065  1FB8  00C2               	movwf	itoa@width^(0+128)
 12066  1FB9  31A8  2058  319E   	fcall	_itoa
 12067                           
 12068                           ;menu.c: 62:  OLED_print_xy(4 * 12 + 8, 0, str);
 12069  1FBC  0140               	movlb	0	; select bank0
 12070  1FBD  01B1               	clrf	OLED_print_xy@row
 12071  1FBE  303F               	movlw	low _str
 12072  1FBF  00B2               	movwf	OLED_print_xy@s
 12073  1FC0  3002               	movlw	high _str
 12074  1FC1  00B3               	movwf	OLED_print_xy@s+1
 12075  1FC2  3038               	movlw	56
 12076  1FC3  31B3  2328  319E   	fcall	_OLED_print_xy
 12077                           
 12078                           ;menu.c: 64:  if (data->status.SENSOR_OK) {
 12079  1FC6  0141               	movlb	1	; select bank1
 12080  1FC7  084D               	movf	statusView@data^(0+128),w
 12081  1FC8  3E29               	addlw	41
 12082  1FC9  0086               	movwf	6
 12083  1FCA  3000               	movlw	0
 12084  1FCB  3D4E               	addwfc	(statusView@data+1)^(0+128),w
 12085  1FCC  0087               	movwf	7
 12086  1FCD  1D81               	btfss	1,3
 12087  1FCE  2FFD               	goto	l7594
 12088                           
 12089                           ;menu.c: 65:   itoa(str, data->sensorVersion, 3);
 12090  1FCF  303F               	movlw	low _str
 12091  1FD0  00BF               	movwf	itoa@str^(0+128)
 12092  1FD1  3002               	movlw	high _str
 12093  1FD2  00C0               	movwf	(itoa@str+1)^(0+128)
 12094  1FD3  084D               	movf	statusView@data^(0+128),w
 12095  1FD4  0086               	movwf	6
 12096  1FD5  084E               	movf	(statusView@data+1)^(0+128),w
 12097  1FD6  0087               	movwf	7
 12098  1FD7  314C               	addfsr 1,12
 12099  1FD8  0801               	movf	1,w
 12100  1FD9  00CF               	movwf	??_statusView^(0+128)
 12101  1FDA  084F               	movf	??_statusView^(0+128),w
 12102  1FDB  00C1               	movwf	itoa@value^(0+128)
 12103  1FDC  3003               	movlw	3
 12104  1FDD  00D0               	movwf	(??_statusView+1)^(0+128)
 12105  1FDE  0850               	movf	(??_statusView+1)^(0+128),w
 12106  1FDF  00C2               	movwf	itoa@width^(0+128)
 12107  1FE0  31A8  2058  319E   	fcall	_itoa
 12108                           
 12109                           ;menu.c: 66:   OLED_print_xy(4 * 12 + 8, 1, str);
 12110  1FE3  0140               	movlb	0	; select bank0
 12111  1FE4  01B1               	clrf	OLED_print_xy@row
 12112  1FE5  0AB1               	incf	OLED_print_xy@row,f
 12113  1FE6  303F               	movlw	low _str
 12114  1FE7  00B2               	movwf	OLED_print_xy@s
 12115  1FE8  3002               	movlw	high _str
 12116  1FE9  00B3               	movwf	OLED_print_xy@s+1
 12117  1FEA  3038               	movlw	56
 12118  1FEB  31B3  2328  319E   	fcall	_OLED_print_xy
 12119                           
 12120                           ;menu.c: 67:   page = paging(page, 5);
 12121  1FEE  3005               	movlw	5
 12122  1FEF  0141               	movlb	1	; select bank1
 12123  1FF0  00CF               	movwf	??_statusView^(0+128)
 12124  1FF1  084F               	movf	??_statusView^(0+128),w
 12125  1FF2  0140               	movlb	0	; select bank0
 12126  1FF3  00AB               	movwf	paging@lastPage
 12127  1FF4  0142               	movlb	2	; select bank2
 12128  1FF5  086E               	movf	statusView@page^(0+256),w
 12129  1FF6  31A8  20C1         	fcall	_paging
 12130  1FF8  0141               	movlb	1	; select bank1
 12131  1FF9  00D0               	movwf	(??_statusView+1)^(0+128)
 12132  1FFA  0850               	movf	(??_statusView+1)^(0+128),w
 12133  1FFB  0142               	movlb	2	; select bank2
 12134  1FFC  00EE               	movwf	statusView@page^(0+256)
 12135  1FFD                     l7594:	
 12136                           
 12137                           ;menu.c: 69:  return page;
 12138  1FFD  0142               	movlb	2	; select bank2
 12139  1FFE  086E               	movf	statusView@page^(0+256),w
 12140  1FFF  0008               	return
 12141  2000                     __end_of_statusView:	
 12142                           
 12143                           	psect	text19
 12144  314A                     __ptext19:	
 12145 ;; *************** function _getPB *****************
 12146 ;; Defined at:
 12147 ;;		line 89 in file "inputs.c"
 12148 ;; Parameters:    Size  Location     Type
 12149 ;;		None
 12150 ;; Auto vars:     Size  Location     Type
 12151 ;;  ret             1    5[BANK0 ] enum E7879
 12152 ;; Return value:  Size  Location     Type
 12153 ;;                  1    wreg      enum E7879
 12154 ;; Registers used:
 12155 ;;		wreg, status,2, status,0
 12156 ;; Tracked objects:
 12157 ;;		On entry : 0/0
 12158 ;;		On exit  : 0/0
 12159 ;;		Unchanged: 0/0
 12160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12165 ;;Total ram usage:        2 bytes
 12166 ;; Hardware stack levels used:    1
 12167 ;; Hardware stack levels required when called:    3
 12168 ;; This function calls:
 12169 ;;		Nothing
 12170 ;; This function is called by:
 12171 ;;		_setOutputPower
 12172 ;;		_viewErrorMessage
 12173 ;;		_menu
 12174 ;; This function uses a non-reentrant model
 12175 ;;
 12176                           
 12177                           
 12178                           ;psect for function _getPB
 12179  314A                     _getPB:	
 12180                           
 12181                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 12182                           
 12183                           ;incstack = 0
 12184                           ; Regs used in _getPB: [wreg+status,2+status,0]
 12185  314A  087D               	movf	_pbState,w	;volatile
 12186  314B  0140               	movlb	0	; select bank0
 12187  314C  00A4               	movwf	??_getPB
 12188  314D  0824               	movf	??_getPB,w
 12189  314E  00A5               	movwf	getPB@ret
 12190                           
 12191                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 12192  314F  3004               	movlw	4
 12193  3150  067D               	xorwf	_pbState,w	;volatile
 12194  3151  1D03               	btfss	3,2
 12195                           
 12196                           ;inputs.c: 93:   pbState = PB_NONE;
 12197  3152  01FD               	clrf	_pbState	;volatile
 12198                           
 12199                           ;inputs.c: 94:  return ret;
 12200  3153  0825               	movf	getPB@ret,w
 12201  3154  0008               	return
 12202  3155                     __end_of_getPB:	
 12203                           
 12204                           	psect	text20
 12205  2014                     __ptext20:	
 12206 ;; *************** function _spinInput *****************
 12207 ;; Defined at:
 12208 ;;		line 100 in file "inputs.c"
 12209 ;; Parameters:    Size  Location     Type
 12210 ;;  input           2   30[BANK1 ] PTR float 
 12211 ;;		 -> data.chData(124), data(166), 
 12212 ;;  min             4   32[BANK1 ] float 
 12213 ;;  max             4   36[BANK1 ] float 
 12214 ;;  step            4   40[BANK1 ] float 
 12215 ;; Auto vars:     Size  Location     Type
 12216 ;;  dir             1   44[BANK1 ] enum E7875
 12217 ;; Return value:  Size  Location     Type
 12218 ;;                  1    wreg      void 
 12219 ;; Registers used:
 12220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12221 ;; Tracked objects:
 12222 ;;		On entry : 0/0
 12223 ;;		On exit  : 0/0
 12224 ;;		Unchanged: 0/0
 12225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12226 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12227 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12229 ;;      Totals:         0       1      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12230 ;;Total ram usage:       16 bytes
 12231 ;; Hardware stack levels used:    1
 12232 ;; Hardware stack levels required when called:    5
 12233 ;; This function calls:
 12234 ;;		___fladd
 12235 ;;		___flge
 12236 ;;		___flsub
 12237 ;;		_getRotDir
 12238 ;; This function is called by:
 12239 ;;		_setOutputPower
 12240 ;;		_setLensDia
 12241 ;;		_setDPOffset
 12242 ;;		_setSkyTemp
 12243 ;;		_setFudgeFactor
 12244 ;; This function uses a non-reentrant model
 12245 ;;
 12246                           
 12247                           
 12248                           ;psect for function _spinInput
 12249  2014                     _spinInput:	
 12250                           
 12251                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 12252                           
 12253                           ;incstack = 0
 12254                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12255  2014  31B1  213F  31A0   	fcall	_getRotDir
 12256  2017  0140               	movlb	0	; select bank0
 12257  2018  00E7               	movwf	??_spinInput
 12258  2019  0867               	movf	??_spinInput,w
 12259  201A  0141               	movlb	1	; select bank1
 12260  201B  00CC               	movwf	spinInput@dir^(0+128)
 12261                           
 12262                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 12263  201C  3002               	movlw	2
 12264  201D  064C               	xorwf	spinInput@dir^(0+128),w
 12265  201E  1D03               	btfss	3,2
 12266  201F  285E               	goto	l7408
 12267  2020  0843               	movf	(spinInput@min+3)^(0+128),w
 12268  2021  00B5               	movwf	(___flge@ff1+3)^(0+128)
 12269  2022  0842               	movf	(spinInput@min+2)^(0+128),w
 12270  2023  00B4               	movwf	(___flge@ff1+2)^(0+128)
 12271  2024  0841               	movf	(spinInput@min+1)^(0+128),w
 12272  2025  00B3               	movwf	(___flge@ff1+1)^(0+128)
 12273  2026  0840               	movf	spinInput@min^(0+128),w
 12274  2027  00B2               	movwf	___flge@ff1^(0+128)
 12275  2028  083E               	movf	spinInput@input^(0+128),w
 12276  2029  0086               	movwf	6
 12277  202A  083F               	movf	(spinInput@input+1)^(0+128),w
 12278  202B  0087               	movwf	7
 12279  202C  3F40               	moviw [0]fsr1
 12280  202D  00B6               	movwf	___flge@ff2^(0+128)
 12281  202E  3F41               	moviw [1]fsr1
 12282  202F  00B7               	movwf	(___flge@ff2+1)^(0+128)
 12283  2030  3F42               	moviw [2]fsr1
 12284  2031  00B8               	movwf	(___flge@ff2+2)^(0+128)
 12285  2032  3F43               	moviw [3]fsr1
 12286  2033  00B9               	movwf	(___flge@ff2+3)^(0+128)
 12287  2034  31AA  2277  31A0   	fcall	___flge
 12288  2037  1803               	btfsc	3,0
 12289  2038  285E               	goto	l7408
 12290                           
 12291                           ;inputs.c: 105:   *input -= step;
 12292  2039  0141               	movlb	1	; select bank1
 12293  203A  084B               	movf	(spinInput@step+3)^(0+128),w
 12294  203B  00AF               	movwf	(___flsub@a+3)^(0+128)
 12295  203C  084A               	movf	(spinInput@step+2)^(0+128),w
 12296  203D  00AE               	movwf	(___flsub@a+2)^(0+128)
 12297  203E  0849               	movf	(spinInput@step+1)^(0+128),w
 12298  203F  00AD               	movwf	(___flsub@a+1)^(0+128)
 12299  2040  0848               	movf	spinInput@step^(0+128),w
 12300  2041  00AC               	movwf	___flsub@a^(0+128)
 12301  2042  083E               	movf	spinInput@input^(0+128),w
 12302  2043  0086               	movwf	6
 12303  2044  083F               	movf	(spinInput@input+1)^(0+128),w
 12304  2045  0087               	movwf	7
 12305  2046  3F40               	moviw [0]fsr1
 12306  2047  00B0               	movwf	___flsub@b^(0+128)
 12307  2048  3F41               	moviw [1]fsr1
 12308  2049  00B1               	movwf	(___flsub@b+1)^(0+128)
 12309  204A  3F42               	moviw [2]fsr1
 12310  204B  00B2               	movwf	(___flsub@b+2)^(0+128)
 12311  204C  3F43               	moviw [3]fsr1
 12312  204D  00B3               	movwf	(___flsub@b+3)^(0+128)
 12313  204E  31B3  235A         	fcall	___flsub
 12314  2050  0141               	movlb	1	; select bank1
 12315  2051  083E               	movf	spinInput@input^(0+128),w
 12316  2052  0086               	movwf	6
 12317  2053  083F               	movf	(spinInput@input+1)^(0+128),w
 12318  2054  0087               	movwf	7
 12319  2055  082C               	movf	?___flsub^(0+128),w
 12320  2056  3FC0               	movwi [0]fsr1
 12321  2057  082D               	movf	(?___flsub+1)^(0+128),w
 12322  2058  3FC1               	movwi [1]fsr1
 12323  2059  082E               	movf	(?___flsub+2)^(0+128),w
 12324  205A  3FC2               	movwi [2]fsr1
 12325  205B  082F               	movf	(?___flsub+3)^(0+128),w
 12326  205C  3FC3               	movwi [3]fsr1
 12327  205D  0008               	return
 12328  205E                     l7408:	
 12329  205E  0141               	movlb	1	; select bank1
 12330  205F  034C               	decf	spinInput@dir^(0+128),w
 12331  2060  1D03               	btfss	3,2
 12332  2061  0008               	return
 12333  2062  083E               	movf	spinInput@input^(0+128),w
 12334  2063  0086               	movwf	6
 12335  2064  083F               	movf	(spinInput@input+1)^(0+128),w
 12336  2065  0087               	movwf	7
 12337  2066  3F40               	moviw [0]fsr1
 12338  2067  00B2               	movwf	___flge@ff1^(0+128)
 12339  2068  3F41               	moviw [1]fsr1
 12340  2069  00B3               	movwf	(___flge@ff1+1)^(0+128)
 12341  206A  3F42               	moviw [2]fsr1
 12342  206B  00B4               	movwf	(___flge@ff1+2)^(0+128)
 12343  206C  3F43               	moviw [3]fsr1
 12344  206D  00B5               	movwf	(___flge@ff1+3)^(0+128)
 12345  206E  0847               	movf	(spinInput@max+3)^(0+128),w
 12346  206F  00B9               	movwf	(___flge@ff2+3)^(0+128)
 12347  2070  0846               	movf	(spinInput@max+2)^(0+128),w
 12348  2071  00B8               	movwf	(___flge@ff2+2)^(0+128)
 12349  2072  0845               	movf	(spinInput@max+1)^(0+128),w
 12350  2073  00B7               	movwf	(___flge@ff2+1)^(0+128)
 12351  2074  0844               	movf	spinInput@max^(0+128),w
 12352  2075  00B6               	movwf	___flge@ff2^(0+128)
 12353  2076  31AA  2277  31A0   	fcall	___flge
 12354  2079  1803               	btfsc	3,0
 12355  207A  0008               	return
 12356                           
 12357                           ;inputs.c: 107:   *input += step;
 12358  207B  0141               	movlb	1	; select bank1
 12359  207C  084B               	movf	(spinInput@step+3)^(0+128),w
 12360  207D  0140               	movlb	0	; select bank0
 12361  207E  00E2               	movwf	___fladd@b+3
 12362  207F  0141               	movlb	1	; select bank1
 12363  2080  084A               	movf	(spinInput@step+2)^(0+128),w
 12364  2081  0140               	movlb	0	; select bank0
 12365  2082  00E1               	movwf	___fladd@b+2
 12366  2083  0141               	movlb	1	; select bank1
 12367  2084  0849               	movf	(spinInput@step+1)^(0+128),w
 12368  2085  0140               	movlb	0	; select bank0
 12369  2086  00E0               	movwf	___fladd@b+1
 12370  2087  0141               	movlb	1	; select bank1
 12371  2088  0848               	movf	spinInput@step^(0+128),w
 12372  2089  0140               	movlb	0	; select bank0
 12373  208A  00DF               	movwf	___fladd@b
 12374  208B  0141               	movlb	1	; select bank1
 12375  208C  083E               	movf	spinInput@input^(0+128),w
 12376  208D  0086               	movwf	6
 12377  208E  083F               	movf	(spinInput@input+1)^(0+128),w
 12378  208F  0087               	movwf	7
 12379  2090  3F40               	moviw [0]fsr1
 12380  2091  0140               	movlb	0	; select bank0
 12381  2092  00E3               	movwf	___fladd@a
 12382  2093  3F41               	moviw [1]fsr1
 12383  2094  00E4               	movwf	___fladd@a+1
 12384  2095  3F42               	moviw [2]fsr1
 12385  2096  00E5               	movwf	___fladd@a+2
 12386  2097  3F43               	moviw [3]fsr1
 12387  2098  00E6               	movwf	___fladd@a+3
 12388  2099  3185  2592         	fcall	___fladd
 12389  209B  0141               	movlb	1	; select bank1
 12390  209C  083E               	movf	spinInput@input^(0+128),w
 12391  209D  0086               	movwf	6
 12392  209E  083F               	movf	(spinInput@input+1)^(0+128),w
 12393  209F  0087               	movwf	7
 12394  20A0  0140               	movlb	0	; select bank0
 12395  20A1  085F               	movf	?___fladd,w
 12396  20A2  3FC0               	movwi [0]fsr1
 12397  20A3  0860               	movf	?___fladd+1,w
 12398  20A4  3FC1               	movwi [1]fsr1
 12399  20A5  0861               	movf	?___fladd+2,w
 12400  20A6  3FC2               	movwi [2]fsr1
 12401  20A7  0862               	movf	?___fladd+3,w
 12402  20A8  3FC3               	movwi [3]fsr1
 12403  20A9  0008               	return
 12404  20AA                     __end_of_spinInput:	
 12405                           
 12406                           	psect	text21
 12407  34E7                     __ptext21:	
 12408 ;; *************** function _getStateFunc *****************
 12409 ;; Defined at:
 12410 ;;		line 140 in file "menuhelper.c"
 12411 ;; Parameters:    Size  Location     Type
 12412 ;;  state           1    wreg     enum E7979
 12413 ;; Auto vars:     Size  Location     Type
 12414 ;;  state           1   28[BANK0 ] enum E7979
 12415 ;;  n               1   29[BANK0 ] unsigned char 
 12416 ;; Return value:  Size  Location     Type
 12417 ;;                  2   23[BANK0 ] PTR FTN(PTR struct .,)un
 12418 ;; Registers used:
 12419 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12420 ;; Tracked objects:
 12421 ;;		On entry : 0/0
 12422 ;;		On exit  : 0/0
 12423 ;;		Unchanged: 0/0
 12424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12425 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12427 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12428 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12429 ;;Total ram usage:        7 bytes
 12430 ;; Hardware stack levels used:    1
 12431 ;; Hardware stack levels required when called:    4
 12432 ;; This function calls:
 12433 ;;		___wmul
 12434 ;; This function is called by:
 12435 ;;		_menu
 12436 ;; This function uses a non-reentrant model
 12437 ;;
 12438                           
 12439                           
 12440                           ;psect for function _getStateFunc
 12441  34E7                     _getStateFunc:	
 12442                           
 12443                           ;incstack = 0
 12444                           ; Regs used in _getStateFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12445                           ;getStateFunc@state stored from wreg
 12446  34E7  0140               	movlb	0	; select bank0
 12447  34E8  00BC               	movwf	getStateFunc@state
 12448                           
 12449                           ;menuhelper.c: 140: t_stateFuncPtr getStateFunc(enum e_menuStates state);menuhelper.c: 1
      +                          41: {;menuhelper.c: 142:  uint8_t n;;menuhelper.c: 145:  for(n = 0; n < sizeof(stateFunc
      +                          Tbl)/sizeof(stateFuncTbl[0]); n++) {
 12450  34E9  01BD               	clrf	getStateFunc@n
 12451  34EA                     l7898:	
 12452                           
 12453                           ;menuhelper.c: 146:   if ((stateFuncTbl[n].state == state))
 12454  34EA  083D               	movf	getStateFunc@n,w
 12455  34EB  00B9               	movwf	??_getStateFunc
 12456  34EC  01BA               	clrf	??_getStateFunc+1
 12457  34ED  0839               	movf	??_getStateFunc,w
 12458  34EE  00B1               	movwf	___wmul@multiplier
 12459  34EF  083A               	movf	??_getStateFunc+1,w
 12460  34F0  00B2               	movwf	___wmul@multiplier+1
 12461  34F1  3003               	movlw	3
 12462  34F2  00B3               	movwf	___wmul@multiplicand
 12463  34F3  3000               	movlw	0
 12464  34F4  00B4               	movwf	___wmul@multiplicand+1
 12465  34F5  31B1  21AD  31B4   	fcall	___wmul
 12466  34F8  0140               	movlb	0	; select bank0
 12467  34F9  0832               	movf	?___wmul+1,w
 12468  34FA  0085               	movwf	5
 12469  34FB  0831               	movf	?___wmul,w
 12470  34FC  0084               	movwf	4
 12471  34FD  3054               	movlw	low (_stateFuncTbl| (0+32768))
 12472  34FE  0784               	addwf	4,f
 12473  34FF  30B8               	movlw	high (_stateFuncTbl| (0+32768))
 12474  3500  3D85               	addwfc	5,f
 12475  3501  0800               	movf	0,w	;code access
 12476  3502  063C               	xorwf	getStateFunc@state,w
 12477  3503  1D03               	skipz
 12478  3504  2D20               	goto	l7904
 12479                           
 12480                           ;menuhelper.c: 147:    return stateFuncTbl[n].func;
 12481  3505  083D               	movf	getStateFunc@n,w
 12482  3506  00B9               	movwf	??_getStateFunc
 12483  3507  01BA               	clrf	??_getStateFunc+1
 12484  3508  0839               	movf	??_getStateFunc,w
 12485  3509  00B1               	movwf	___wmul@multiplier
 12486  350A  083A               	movf	??_getStateFunc+1,w
 12487  350B  00B2               	movwf	___wmul@multiplier+1
 12488  350C  3003               	movlw	3
 12489  350D  00B3               	movwf	___wmul@multiplicand
 12490  350E  3000               	movlw	0
 12491  350F  00B4               	movwf	___wmul@multiplicand+1
 12492  3510  31B1  21AD         	fcall	___wmul
 12493  3512  0140               	movlb	0	; select bank0
 12494  3513  0832               	movf	?___wmul+1,w
 12495  3514  0085               	movwf	5
 12496  3515  0831               	movf	?___wmul,w
 12497  3516  0084               	movwf	4
 12498  3517  3055               	movlw	low ((_stateFuncTbl+1)| (0+32768))
 12499  3518  0784               	addwf	4,f
 12500  3519  30B8               	movlw	high ((_stateFuncTbl+1)| (0+32768))
 12501  351A  3D85               	addwfc	5,f
 12502  351B  3F00               	moviw [0]fsr0
 12503  351C  00B7               	movwf	?_getStateFunc
 12504  351D  3F01               	moviw [1]fsr0
 12505  351E  00B8               	movwf	?_getStateFunc+1
 12506  351F  0008               	return
 12507  3520                     l7904:	
 12508                           
 12509                           ;menuhelper.c: 148:  }
 12510  3520  3001               	movlw	1
 12511  3521  00B9               	movwf	??_getStateFunc
 12512  3522  0839               	movf	??_getStateFunc,w
 12513  3523  07BD               	addwf	getStateFunc@n,f
 12514  3524  3009               	movlw	9
 12515  3525  023D               	subwf	getStateFunc@n,w
 12516  3526  1C03               	skipc
 12517  3527  2CEA               	goto	l7898
 12518                           
 12519                           ;menuhelper.c: 149:  return (t_stateFuncPtr)((void*)0);
 12520  3528  01B7               	clrf	?_getStateFunc
 12521  3529  01B8               	clrf	?_getStateFunc+1
 12522  352A  0008               	return
 12523  352B                     __end_of_getStateFunc:	
 12524                           
 12525                           	psect	text22
 12526  1807                     __ptext22:	
 12527 ;; *************** function _getNextState *****************
 12528 ;; Defined at:
 12529 ;;		line 155 in file "menuhelper.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;  state           1    wreg     enum E7979
 12532 ;;  intState        1   23[BANK0 ] unsigned char 
 12533 ;;  pb              1   24[BANK0 ] enum E7879
 12534 ;;  timeout         1   25[BANK0 ] unsigned char 
 12535 ;; Auto vars:     Size  Location     Type
 12536 ;;  state           1   29[BANK0 ] enum E7979
 12537 ;;  n               1   30[BANK0 ] unsigned char 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;                  1    wreg      char 
 12540 ;; Registers used:
 12541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12547 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12549 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12550 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12551 ;;Total ram usage:        8 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    4
 12554 ;; This function calls:
 12555 ;;		___wmul
 12556 ;; This function is called by:
 12557 ;;		_menu
 12558 ;; This function uses a non-reentrant model
 12559 ;;
 12560                           
 12561                           
 12562                           ;psect for function _getNextState
 12563  1807                     _getNextState:	
 12564                           
 12565                           ;incstack = 0
 12566                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12567                           ;getNextState@state stored from wreg
 12568  1807  0140               	movlb	0	; select bank0
 12569  1808  00BD               	movwf	getNextState@state
 12570                           
 12571                           ;menuhelper.c: 155: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 156:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 157: {;menuhelper
      +                          .c: 158:  uint8_t n;;menuhelper.c: 161:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 12572  1809  01BE               	clrf	getNextState@n
 12573  180A                     l7918:	
 12574                           
 12575                           ;menuhelper.c: 162:   if ((nextStateTbl[n].state == state)) {
 12576  180A  083E               	movf	getNextState@n,w
 12577  180B  00BA               	movwf	??_getNextState
 12578  180C  01BB               	clrf	??_getNextState+1
 12579  180D  083A               	movf	??_getNextState,w
 12580  180E  00B1               	movwf	___wmul@multiplier
 12581  180F  083B               	movf	??_getNextState+1,w
 12582  1810  00B2               	movwf	___wmul@multiplier+1
 12583  1811  3006               	movlw	6
 12584  1812  00B3               	movwf	___wmul@multiplicand
 12585  1813  3000               	movlw	0
 12586  1814  00B4               	movwf	___wmul@multiplicand+1
 12587  1815  31B1  21AD  3198   	fcall	___wmul
 12588  1818  0140               	movlb	0	; select bank0
 12589  1819  0832               	movf	?___wmul+1,w
 12590  181A  0085               	movwf	5
 12591  181B  0831               	movf	?___wmul,w
 12592  181C  0084               	movwf	4
 12593  181D  3000               	movlw	low (_nextStateTbl| (0+32768))
 12594  181E  0784               	addwf	4,f
 12595  181F  30B8               	movlw	high (_nextStateTbl| (0+32768))
 12596  1820  3D85               	addwfc	5,f
 12597  1821  0800               	movf	0,w	;code access
 12598  1822  063D               	xorwf	getNextState@state,w
 12599  1823  1D03               	skipz
 12600  1824  28C5               	goto	l7950
 12601                           
 12602                           ;menuhelper.c: 164:    if ((nextStateTbl[n].intState == intState) ||
 12603  1825  083E               	movf	getNextState@n,w
 12604  1826  00BA               	movwf	??_getNextState
 12605  1827  01BB               	clrf	??_getNextState+1
 12606  1828  083A               	movf	??_getNextState,w
 12607  1829  00B1               	movwf	___wmul@multiplier
 12608  182A  083B               	movf	??_getNextState+1,w
 12609  182B  00B2               	movwf	___wmul@multiplier+1
 12610  182C  3006               	movlw	6
 12611  182D  00B3               	movwf	___wmul@multiplicand
 12612  182E  3000               	movlw	0
 12613  182F  00B4               	movwf	___wmul@multiplicand+1
 12614  1830  31B1  21AD  3198   	fcall	___wmul
 12615  1833  0140               	movlb	0	; select bank0
 12616  1834  0832               	movf	?___wmul+1,w
 12617  1835  0085               	movwf	5
 12618  1836  0831               	movf	?___wmul,w
 12619  1837  0084               	movwf	4
 12620  1838  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 12621  1839  0784               	addwf	4,f
 12622  183A  30B8               	movlw	high ((_nextStateTbl+1)| (0+32768))
 12623  183B  3D85               	addwfc	5,f
 12624  183C  0800               	movf	0,w	;code access
 12625  183D  0637               	xorwf	getNextState@intState,w
 12626  183E  1903               	skipnz
 12627  183F  285B               	goto	l7924
 12628  1840  083E               	movf	getNextState@n,w
 12629  1841  00BA               	movwf	??_getNextState
 12630  1842  01BB               	clrf	??_getNextState+1
 12631  1843  083A               	movf	??_getNextState,w
 12632  1844  00B1               	movwf	___wmul@multiplier
 12633  1845  083B               	movf	??_getNextState+1,w
 12634  1846  00B2               	movwf	___wmul@multiplier+1
 12635  1847  3006               	movlw	6
 12636  1848  00B3               	movwf	___wmul@multiplicand
 12637  1849  3000               	movlw	0
 12638  184A  00B4               	movwf	___wmul@multiplicand+1
 12639  184B  31B1  21AD  3198   	fcall	___wmul
 12640  184E  0140               	movlb	0	; select bank0
 12641  184F  0832               	movf	?___wmul+1,w
 12642  1850  0085               	movwf	5
 12643  1851  0831               	movf	?___wmul,w
 12644  1852  0084               	movwf	4
 12645  1853  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 12646  1854  0784               	addwf	4,f
 12647  1855  30B8               	movlw	high ((_nextStateTbl+1)| (0+32768))
 12648  1856  3D85               	addwfc	5,f
 12649  1857  0012               	moviw fsr0++
 12650  1858  3AFF               	xorlw	255
 12651  1859  1D03               	btfss	3,2
 12652  185A  28C5               	goto	l7950
 12653  185B                     l7924:	
 12654                           
 12655                           ;menuhelper.c: 165:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 166:     if (
      +                          timeout)
 12656  185B  0839               	movf	getNextState@timeout,w
 12657  185C  1903               	btfsc	3,2
 12658  185D  2876               	goto	l7930
 12659                           
 12660                           ;menuhelper.c: 167:      return nextStateTbl[n].timeout;
 12661  185E  083E               	movf	getNextState@n,w
 12662  185F  00BA               	movwf	??_getNextState
 12663  1860  01BB               	clrf	??_getNextState+1
 12664  1861  083A               	movf	??_getNextState,w
 12665  1862  00B1               	movwf	___wmul@multiplier
 12666  1863  083B               	movf	??_getNextState+1,w
 12667  1864  00B2               	movwf	___wmul@multiplier+1
 12668  1865  3006               	movlw	6
 12669  1866  00B3               	movwf	___wmul@multiplicand
 12670  1867  3000               	movlw	0
 12671  1868  00B4               	movwf	___wmul@multiplicand+1
 12672  1869  31B1  21AD         	fcall	___wmul
 12673  186B  0140               	movlb	0	; select bank0
 12674  186C  0832               	movf	?___wmul+1,w
 12675  186D  0085               	movwf	5
 12676  186E  0831               	movf	?___wmul,w
 12677  186F  0084               	movwf	4
 12678  1870  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
 12679  1871  0784               	addwf	4,f
 12680  1872  30B8               	movlw	high ((_nextStateTbl+4)| (0+32768))
 12681  1873  3D85               	addwfc	5,f
 12682  1874  0800               	movf	0,w	;code access
 12683  1875  0008               	return
 12684  1876                     l7930:	
 12685                           
 12686                           ;menuhelper.c: 169:     if (pb == PB_SHORT)
 12687  1876  0338               	decf	getNextState@pb,w
 12688  1877  1D03               	btfss	3,2
 12689  1878  2891               	goto	l7938
 12690                           
 12691                           ;menuhelper.c: 170:      return nextStateTbl[n].pbShort;
 12692  1879  083E               	movf	getNextState@n,w
 12693  187A  00BA               	movwf	??_getNextState
 12694  187B  01BB               	clrf	??_getNextState+1
 12695  187C  083A               	movf	??_getNextState,w
 12696  187D  00B1               	movwf	___wmul@multiplier
 12697  187E  083B               	movf	??_getNextState+1,w
 12698  187F  00B2               	movwf	___wmul@multiplier+1
 12699  1880  3006               	movlw	6
 12700  1881  00B3               	movwf	___wmul@multiplicand
 12701  1882  3000               	movlw	0
 12702  1883  00B4               	movwf	___wmul@multiplicand+1
 12703  1884  31B1  21AD         	fcall	___wmul
 12704  1886  0140               	movlb	0	; select bank0
 12705  1887  0832               	movf	?___wmul+1,w
 12706  1888  0085               	movwf	5
 12707  1889  0831               	movf	?___wmul,w
 12708  188A  0084               	movwf	4
 12709  188B  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 12710  188C  0784               	addwf	4,f
 12711  188D  30B8               	movlw	high ((_nextStateTbl+2)| (0+32768))
 12712  188E  3D85               	addwfc	5,f
 12713  188F  0800               	movf	0,w	;code access
 12714  1890  0008               	return
 12715  1891                     l7938:	
 12716  1891  3002               	movlw	2
 12717  1892  0638               	xorwf	getNextState@pb,w
 12718  1893  1D03               	btfss	3,2
 12719  1894  28AD               	goto	l7946
 12720                           
 12721                           ;menuhelper.c: 172:      return nextStateTbl[n].pbLong;
 12722  1895  083E               	movf	getNextState@n,w
 12723  1896  00BA               	movwf	??_getNextState
 12724  1897  01BB               	clrf	??_getNextState+1
 12725  1898  083A               	movf	??_getNextState,w
 12726  1899  00B1               	movwf	___wmul@multiplier
 12727  189A  083B               	movf	??_getNextState+1,w
 12728  189B  00B2               	movwf	___wmul@multiplier+1
 12729  189C  3006               	movlw	6
 12730  189D  00B3               	movwf	___wmul@multiplicand
 12731  189E  3000               	movlw	0
 12732  189F  00B4               	movwf	___wmul@multiplicand+1
 12733  18A0  31B1  21AD         	fcall	___wmul
 12734  18A2  0140               	movlb	0	; select bank0
 12735  18A3  0832               	movf	?___wmul+1,w
 12736  18A4  0085               	movwf	5
 12737  18A5  0831               	movf	?___wmul,w
 12738  18A6  0084               	movwf	4
 12739  18A7  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 12740  18A8  0784               	addwf	4,f
 12741  18A9  30B8               	movlw	high ((_nextStateTbl+3)| (0+32768))
 12742  18AA  3D85               	addwfc	5,f
 12743  18AB  0800               	movf	0,w	;code access
 12744  18AC  0008               	return
 12745  18AD                     l7946:	
 12746                           
 12747                           ;menuhelper.c: 174:      return nextStateTbl[n].noAction;
 12748  18AD  083E               	movf	getNextState@n,w
 12749  18AE  00BA               	movwf	??_getNextState
 12750  18AF  01BB               	clrf	??_getNextState+1
 12751  18B0  083A               	movf	??_getNextState,w
 12752  18B1  00B1               	movwf	___wmul@multiplier
 12753  18B2  083B               	movf	??_getNextState+1,w
 12754  18B3  00B2               	movwf	___wmul@multiplier+1
 12755  18B4  3006               	movlw	6
 12756  18B5  00B3               	movwf	___wmul@multiplicand
 12757  18B6  3000               	movlw	0
 12758  18B7  00B4               	movwf	___wmul@multiplicand+1
 12759  18B8  31B1  21AD         	fcall	___wmul
 12760  18BA  0140               	movlb	0	; select bank0
 12761  18BB  0832               	movf	?___wmul+1,w
 12762  18BC  0085               	movwf	5
 12763  18BD  0831               	movf	?___wmul,w
 12764  18BE  0084               	movwf	4
 12765  18BF  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 12766  18C0  0784               	addwf	4,f
 12767  18C1  30B8               	movlw	high ((_nextStateTbl+5)| (0+32768))
 12768  18C2  3D85               	addwfc	5,f
 12769  18C3  0800               	movf	0,w	;code access
 12770  18C4  0008               	return
 12771  18C5                     l7950:	
 12772                           
 12773                           ;menuhelper.c: 177:  }
 12774  18C5  3001               	movlw	1
 12775  18C6  00BA               	movwf	??_getNextState
 12776  18C7  083A               	movf	??_getNextState,w
 12777  18C8  07BE               	addwf	getNextState@n,f
 12778  18C9  300E               	movlw	14
 12779  18CA  023E               	subwf	getNextState@n,w
 12780  18CB  1C03               	skipc
 12781  18CC  280A               	goto	l7918
 12782                           
 12783                           ;menuhelper.c: 178:  return -1;
 12784  18CD  30FF               	movlw	255
 12785  18CE  0008               	return
 12786  18CF                     __end_of_getNextState:	
 12787                           
 12788                           	psect	text23
 12789  0802                     __ptext23:	
 12790 ;; *************** function _returnToPage *****************
 12791 ;; Defined at:
 12792 ;;		line 226 in file "menuhelper.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;  page            1    wreg     unsigned char 
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;  page            1   25[BANK0 ] unsigned char 
 12797 ;;  n               1   26[BANK0 ] unsigned char 
 12798 ;; Return value:  Size  Location     Type
 12799 ;;                  1    wreg      void 
 12800 ;; Registers used:
 12801 ;;		wreg, status,2, status,0, pclath, cstack
 12802 ;; Tracked objects:
 12803 ;;		On entry : 0/0
 12804 ;;		On exit  : 0/0
 12805 ;;		Unchanged: 0/0
 12806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12808 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12809 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12810 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12811 ;;Total ram usage:        4 bytes
 12812 ;; Hardware stack levels used:    1
 12813 ;; Hardware stack levels required when called:    7
 12814 ;; This function calls:
 12815 ;;		_OLED_command
 12816 ;;		___wmul
 12817 ;; This function is called by:
 12818 ;;		_statusView
 12819 ;;		_channelView
 12820 ;;		_channelSetup
 12821 ;;		_setOutputPower
 12822 ;;		_setLensDia
 12823 ;;		_setup
 12824 ;;		_setDPOffset
 12825 ;;		_setSkyTemp
 12826 ;;		_setFudgeFactor
 12827 ;; This function uses a non-reentrant model
 12828 ;;
 12829                           
 12830                           
 12831                           ;psect for function _returnToPage
 12832  0802                     _returnToPage:	
 12833                           
 12834                           ;incstack = 0
 12835                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 12836                           ;returnToPage@page stored from wreg
 12837  0802  0140               	movlb	0	; select bank0
 12838  0803  00B9               	movwf	returnToPage@page
 12839                           
 12840                           ;menuhelper.c: 226: void returnToPage(uint8_t page);menuhelper.c: 227: {;menuhelper.c: 2
      +                          28:  uint8_t n;;menuhelper.c: 230:  if (! g_screenRefresh)
 12841  0804  0141               	movlb	1	; select bank1
 12842  0805  086F               	movf	_g_screenRefresh^(0+128),w
 12843  0806  1903               	btfsc	3,2
 12844  0807  0008               	return
 12845                           
 12846                           ;menuhelper.c: 232:  OLED_command(0x01);
 12847  0808  3001               	movlw	1
 12848  0809  31B1  2115  3188   	fcall	_OLED_command
 12849                           
 12850                           ;menuhelper.c: 233:  OLED_command(0x02);
 12851  080C  3002               	movlw	2
 12852  080D  31B1  2115  3188   	fcall	_OLED_command
 12853                           
 12854                           ;menuhelper.c: 234:  for(n = 0; n < 12 * page; n++) {
 12855  0810  0140               	movlb	0	; select bank0
 12856  0811  01BA               	clrf	returnToPage@n
 12857  0812                     l7426:	
 12858  0812  0839               	movf	returnToPage@page,w
 12859  0813  00B7               	movwf	??_returnToPage
 12860  0814  01B8               	clrf	??_returnToPage+1
 12861  0815  0837               	movf	??_returnToPage,w
 12862  0816  00B1               	movwf	___wmul@multiplier
 12863  0817  0838               	movf	??_returnToPage+1,w
 12864  0818  00B2               	movwf	___wmul@multiplier+1
 12865  0819  300C               	movlw	12
 12866  081A  00B3               	movwf	___wmul@multiplicand
 12867  081B  3000               	movlw	0
 12868  081C  00B4               	movwf	___wmul@multiplicand+1
 12869  081D  31B1  21AD  3188   	fcall	___wmul
 12870  0820  0140               	movlb	0	; select bank0
 12871  0821  0832               	movf	?___wmul+1,w
 12872  0822  3A80               	xorlw	128
 12873  0823  3C80               	sublw	128
 12874  0824  1D03               	skipz
 12875  0825  2828               	goto	u8875
 12876  0826  0831               	movf	?___wmul,w
 12877  0827  023A               	subwf	returnToPage@n,w
 12878  0828                     u8875:	
 12879  0828  1803               	btfsc	3,0
 12880  0829  0008               	return
 12881                           
 12882                           ;menuhelper.c: 235:   OLED_command(0x10 | 0x08 | 0x00);
 12883  082A  3018               	movlw	24
 12884  082B  31B1  2115  3188   	fcall	_OLED_command
 12885                           
 12886                           ;menuhelper.c: 236:  }
 12887  082E  3001               	movlw	1
 12888  082F  0140               	movlb	0	; select bank0
 12889  0830  00B7               	movwf	??_returnToPage
 12890  0831  0837               	movf	??_returnToPage,w
 12891  0832  07BA               	addwf	returnToPage@n,f
 12892  0833  2812               	goto	l7426
 12893  0834                     __end_of_returnToPage:	
 12894                           
 12895                           	psect	text24
 12896  28C1                     __ptext24:	
 12897 ;; *************** function _paging *****************
 12898 ;; Defined at:
 12899 ;;		line 185 in file "menuhelper.c"
 12900 ;; Parameters:    Size  Location     Type
 12901 ;;  currentPage     1    wreg     unsigned char 
 12902 ;;  lastPage        1   11[BANK0 ] const unsigned char 
 12903 ;; Auto vars:     Size  Location     Type
 12904 ;;  currentPage     1   14[BANK0 ] unsigned char 
 12905 ;;  n               1   16[BANK0 ] unsigned char 
 12906 ;;  dir             1   15[BANK0 ] enum E7875
 12907 ;; Return value:  Size  Location     Type
 12908 ;;                  1    wreg      unsigned char 
 12909 ;; Registers used:
 12910 ;;		wreg, status,2, status,0, pclath, cstack
 12911 ;; Tracked objects:
 12912 ;;		On entry : 0/0
 12913 ;;		On exit  : 0/0
 12914 ;;		Unchanged: 0/0
 12915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12916 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12917 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12919 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12920 ;;Total ram usage:        6 bytes
 12921 ;; Hardware stack levels used:    1
 12922 ;; Hardware stack levels required when called:    8
 12923 ;; This function calls:
 12924 ;;		_OLED_scrollDisplayLeft
 12925 ;;		_OLED_scrollDisplayRight
 12926 ;;		_getRotDir
 12927 ;; This function is called by:
 12928 ;;		_statusView
 12929 ;;		_channelView
 12930 ;;		_channelSetup
 12931 ;;		_setup
 12932 ;; This function uses a non-reentrant model
 12933 ;;
 12934                           
 12935                           
 12936                           ;psect for function _paging
 12937  28C1                     _paging:	
 12938                           
 12939                           ;incstack = 0
 12940                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 12941                           ;paging@currentPage stored from wreg
 12942  28C1  0140               	movlb	0	; select bank0
 12943  28C2  00AE               	movwf	paging@currentPage
 12944                           
 12945                           ;menuhelper.c: 185: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 186: {;menuhelper.c: 187:  uint8_t n;;menuhelper.c: 188:  enum e_direction dir;;me
      +                          nuhelper.c: 189:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 192:  PIE0bi
      +                          ts.IOCIE = 0;
 12946  28C3  014E               	movlb	14	; select bank14
 12947  28C4  1216               	bcf	22,4	;volatile
 12948                           
 12949                           ;menuhelper.c: 194:  dir = getRotDir();
 12950  28C5  31B1  213F  31A8   	fcall	_getRotDir
 12951  28C8  0140               	movlb	0	; select bank0
 12952  28C9  00AC               	movwf	??_paging
 12953  28CA  082C               	movf	??_paging,w
 12954  28CB  00AF               	movwf	paging@dir
 12955                           
 12956                           ;menuhelper.c: 197:  if (dir == lastDir) {
 12957  28CC  082F               	movf	paging@dir,w
 12958  28CD  0143               	movlb	3	; select bank3
 12959  28CE  0668               	xorwf	paging@lastDir^(0+384),w
 12960  28CF  1D03               	skipz
 12961  28D0  2921               	goto	l5096
 12962                           
 12963                           ;menuhelper.c: 199:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 12964  28D1  0140               	movlb	0	; select bank0
 12965  28D2  032F               	decf	paging@dir,w
 12966  28D3  1D03               	btfss	3,2
 12967  28D4  2901               	goto	l5076
 12968  28D5  082B               	movf	paging@lastPage,w
 12969  28D6  3EFF               	addlw	255
 12970  28D7  00AC               	movwf	??_paging
 12971  28D8  30FF               	movlw	255
 12972  28D9  1803               	skipnc
 12973  28DA  3000               	movlw	0
 12974  28DB  00AD               	movwf	??_paging+1
 12975  28DC  082D               	movf	??_paging+1,w
 12976  28DD  3A80               	xorlw	128
 12977  28DE  3C80               	sublw	128
 12978  28DF  1D03               	skipz
 12979  28E0  28E3               	goto	u5595
 12980  28E1  082C               	movf	??_paging,w
 12981  28E2  022E               	subwf	paging@currentPage,w
 12982  28E3                     u5595:	
 12983  28E3  1803               	skipnc
 12984  28E4  2901               	goto	l5076
 12985                           
 12986                           ;menuhelper.c: 200:    currentPage++;
 12987  28E5  3001               	movlw	1
 12988  28E6  0140               	movlb	0	; select bank0
 12989  28E7  00AC               	movwf	??_paging
 12990  28E8  082C               	movf	??_paging,w
 12991  28E9  07AE               	addwf	paging@currentPage,f
 12992                           
 12993                           ;menuhelper.c: 201:    for(n = 0; n < 12; n++) {
 12994  28EA  01B0               	clrf	paging@n
 12995  28EB                     l5068:	
 12996                           
 12997                           ;menuhelper.c: 202:     OLED_scrollDisplayLeft();
 12998  28EB  31B0  20CD  31A8   	fcall	_OLED_scrollDisplayLeft
 12999                           
 13000                           ;menuhelper.c: 203:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13001  28EE  301A               	movlw	26
 13002  28EF  0140               	movlb	0	; select bank0
 13003  28F0  00AC               	movwf	??_paging
 13004  28F1  30F8               	movlw	248
 13005  28F2                     u10317:	
 13006  28F2  0B89               	decfsz	9,f
 13007  28F3  28F2               	goto	u10317
 13008  28F4  0BAC               	decfsz	??_paging,f
 13009  28F5  28F2               	goto	u10317
 13010  28F6  0000               	nop
 13011                           
 13012                           ;menuhelper.c: 204:    }
 13013  28F7  3001               	movlw	1
 13014  28F8  0140               	movlb	0	; select bank0
 13015  28F9  00AC               	movwf	??_paging
 13016  28FA  082C               	movf	??_paging,w
 13017  28FB  07B0               	addwf	paging@n,f
 13018  28FC  300C               	movlw	12
 13019  28FD  0230               	subwf	paging@n,w
 13020  28FE  1803               	btfsc	3,0
 13021  28FF  2921               	goto	l5096
 13022  2900  28EB               	goto	l5068
 13023  2901                     l5076:	
 13024  2901  3002               	movlw	2
 13025  2902  0140               	movlb	0	; select bank0
 13026  2903  062F               	xorwf	paging@dir,w
 13027  2904  1D03               	btfss	3,2
 13028  2905  2921               	goto	l5096
 13029  2906  082E               	movf	paging@currentPage,w
 13030  2907  1903               	btfsc	3,2
 13031  2908  2921               	goto	l5096
 13032                           
 13033                           ;menuhelper.c: 208:    currentPage--;
 13034  2909  3001               	movlw	1
 13035  290A  02AE               	subwf	paging@currentPage,f
 13036                           
 13037                           ;menuhelper.c: 209:    for(n = 0; n < 12; n++) {
 13038  290B  01B0               	clrf	paging@n
 13039  290C                     l5088:	
 13040                           
 13041                           ;menuhelper.c: 210:     OLED_scrollDisplayRight();
 13042  290C  31B0  20D1  31A8   	fcall	_OLED_scrollDisplayRight
 13043                           
 13044                           ;menuhelper.c: 211:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13045  290F  301A               	movlw	26
 13046  2910  0140               	movlb	0	; select bank0
 13047  2911  00AC               	movwf	??_paging
 13048  2912  30F8               	movlw	248
 13049  2913                     u10327:	
 13050  2913  0B89               	decfsz	9,f
 13051  2914  2913               	goto	u10327
 13052  2915  0BAC               	decfsz	??_paging,f
 13053  2916  2913               	goto	u10327
 13054  2917  0000               	nop
 13055                           
 13056                           ;menuhelper.c: 212:    }
 13057  2918  3001               	movlw	1
 13058  2919  0140               	movlb	0	; select bank0
 13059  291A  00AC               	movwf	??_paging
 13060  291B  082C               	movf	??_paging,w
 13061  291C  07B0               	addwf	paging@n,f
 13062  291D  300C               	movlw	12
 13063  291E  0230               	subwf	paging@n,w
 13064  291F  1C03               	skipc
 13065  2920  290C               	goto	l5088
 13066  2921                     l5096:	
 13067                           
 13068                           ;menuhelper.c: 216:  lastDir = dir;
 13069  2921  0140               	movlb	0	; select bank0
 13070  2922  082F               	movf	paging@dir,w
 13071  2923  00AC               	movwf	??_paging
 13072  2924  082C               	movf	??_paging,w
 13073  2925  0143               	movlb	3	; select bank3
 13074  2926  00E8               	movwf	paging@lastDir^(0+384)
 13075                           
 13076                           ;menuhelper.c: 217:  PIE0bits.IOCIE = 1;
 13077  2927  014E               	movlb	14	; select bank14
 13078  2928  1616               	bsf	22,4	;volatile
 13079                           
 13080                           ;menuhelper.c: 219:  return currentPage;
 13081  2929  0140               	movlb	0	; select bank0
 13082  292A  082E               	movf	paging@currentPage,w
 13083  292B  0008               	return
 13084  292C                     __end_of_paging:	
 13085                           
 13086                           	psect	text25
 13087  313F                     __ptext25:	
 13088 ;; *************** function _getRotDir *****************
 13089 ;; Defined at:
 13090 ;;		line 79 in file "inputs.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;		None
 13093 ;; Auto vars:     Size  Location     Type
 13094 ;;  ret             1    5[BANK0 ] enum E7875
 13095 ;; Return value:  Size  Location     Type
 13096 ;;                  1    wreg      enum E7875
 13097 ;; Registers used:
 13098 ;;		wreg, status,2
 13099 ;; Tracked objects:
 13100 ;;		On entry : 0/0
 13101 ;;		On exit  : 0/0
 13102 ;;		Unchanged: 0/0
 13103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13105 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13107 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13108 ;;Total ram usage:        2 bytes
 13109 ;; Hardware stack levels used:    1
 13110 ;; Hardware stack levels required when called:    3
 13111 ;; This function calls:
 13112 ;;		Nothing
 13113 ;; This function is called by:
 13114 ;;		_spinInput
 13115 ;;		_paging
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           
 13120                           ;psect for function _getRotDir
 13121  313F                     _getRotDir:	
 13122                           
 13123                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 13124                           
 13125                           ;incstack = 0
 13126                           ; Regs used in _getRotDir: [wreg+status,2]
 13127  313F  0143               	movlb	3	; select bank3
 13128  3140  086E               	movf	_rotDir^(0+384),w	;volatile
 13129  3141  0140               	movlb	0	; select bank0
 13130  3142  00A4               	movwf	??_getRotDir
 13131  3143  0824               	movf	??_getRotDir,w
 13132  3144  00A5               	movwf	getRotDir@ret
 13133                           
 13134                           ;inputs.c: 82:  rotDir = ROT_STOP;
 13135  3145  0143               	movlb	3	; select bank3
 13136  3146  01EE               	clrf	_rotDir^(0+384)	;volatile
 13137                           
 13138                           ;inputs.c: 83:  return ret;
 13139  3147  0140               	movlb	0	; select bank0
 13140  3148  0825               	movf	getRotDir@ret,w
 13141  3149  0008               	return
 13142  314A                     __end_of_getRotDir:	
 13143                           
 13144                           	psect	text26
 13145  30D1                     __ptext26:	
 13146 ;; *************** function _OLED_scrollDisplayRight *****************
 13147 ;; Defined at:
 13148 ;;		line 137 in file "oled.c"
 13149 ;; Parameters:    Size  Location     Type
 13150 ;;		None
 13151 ;; Auto vars:     Size  Location     Type
 13152 ;;		None
 13153 ;; Return value:  Size  Location     Type
 13154 ;;                  1    wreg      void 
 13155 ;; Registers used:
 13156 ;;		wreg, status,2, status,0, pclath, cstack
 13157 ;; Tracked objects:
 13158 ;;		On entry : 0/0
 13159 ;;		On exit  : 0/0
 13160 ;;		Unchanged: 0/0
 13161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13166 ;;Total ram usage:        0 bytes
 13167 ;; Hardware stack levels used:    1
 13168 ;; Hardware stack levels required when called:    7
 13169 ;; This function calls:
 13170 ;;		_OLED_command
 13171 ;; This function is called by:
 13172 ;;		_paging
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           
 13177                           ;psect for function _OLED_scrollDisplayRight
 13178  30D1                     _OLED_scrollDisplayRight:	
 13179                           
 13180                           ;oled.c: 139:  OLED_command(0x10 | 0x08 | 0x04);
 13181                           
 13182                           ;incstack = 0
 13183                           ; Regs used in _OLED_scrollDisplayRight: [wreg+status,2+status,0+pclath+cstack]
 13184  30D1  301C               	movlw	28
 13185  30D2  31B1  2115         	fcall	_OLED_command
 13186  30D4  0008               	return
 13187  30D5                     __end_of_OLED_scrollDisplayRight:	
 13188                           
 13189                           	psect	text27
 13190  30CD                     __ptext27:	
 13191 ;; *************** function _OLED_scrollDisplayLeft *****************
 13192 ;; Defined at:
 13193 ;;		line 132 in file "oled.c"
 13194 ;; Parameters:    Size  Location     Type
 13195 ;;		None
 13196 ;; Auto vars:     Size  Location     Type
 13197 ;;		None
 13198 ;; Return value:  Size  Location     Type
 13199 ;;                  1    wreg      void 
 13200 ;; Registers used:
 13201 ;;		wreg, status,2, status,0, pclath, cstack
 13202 ;; Tracked objects:
 13203 ;;		On entry : 0/0
 13204 ;;		On exit  : 0/0
 13205 ;;		Unchanged: 0/0
 13206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13211 ;;Total ram usage:        0 bytes
 13212 ;; Hardware stack levels used:    1
 13213 ;; Hardware stack levels required when called:    7
 13214 ;; This function calls:
 13215 ;;		_OLED_command
 13216 ;; This function is called by:
 13217 ;;		_paging
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           
 13222                           ;psect for function _OLED_scrollDisplayLeft
 13223  30CD                     _OLED_scrollDisplayLeft:	
 13224                           
 13225                           ;oled.c: 134:  OLED_command(0x10 | 0x08 | 0x00);
 13226                           
 13227                           ;incstack = 0
 13228                           ; Regs used in _OLED_scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
 13229  30CD  3018               	movlw	24
 13230  30CE  31B1  2115         	fcall	_OLED_command
 13231  30D0  0008               	return
 13232  30D1                     __end_of_OLED_scrollDisplayLeft:	
 13233                           
 13234                           	psect	text28
 13235  2858                     __ptext28:	
 13236 ;; *************** function _itoa *****************
 13237 ;; Defined at:
 13238 ;;		line 47 in file "common.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;  str             2   31[BANK1 ] PTR unsigned char 
 13241 ;;		 -> systemCheck@str(3), str(10), 
 13242 ;;  value           1   33[BANK1 ] unsigned char 
 13243 ;;  width           1   34[BANK1 ] unsigned char 
 13244 ;; Auto vars:     Size  Location     Type
 13245 ;;		None
 13246 ;; Return value:  Size  Location     Type
 13247 ;;                  1    wreg      void 
 13248 ;; Registers used:
 13249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13255 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13257 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13258 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13259 ;;Total ram usage:       11 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    4
 13262 ;; This function calls:
 13263 ;;		___awdiv
 13264 ;;		___awmod
 13265 ;; This function is called by:
 13266 ;;		_statusView
 13267 ;;		_channelView
 13268 ;;		_channelSetup
 13269 ;;		_setOutputPower
 13270 ;;		_systemCheck
 13271 ;; This function uses a non-reentrant model
 13272 ;;
 13273                           
 13274                           
 13275                           ;psect for function _itoa
 13276  2858                     _itoa:	
 13277                           
 13278                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 13279                           
 13280                           ;incstack = 0
 13281                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13282  2858  0141               	movlb	1	; select bank1
 13283  2859  0842               	movf	itoa@width^(0+128),w
 13284  285A  00C3               	movwf	??_itoa^(0+128)
 13285  285B  01C4               	clrf	(??_itoa^(0+128)+1)
 13286  285C  0843               	movf	??_itoa^(0+128),w
 13287  285D  073F               	addwf	itoa@str^(0+128),w
 13288  285E  0086               	movwf	6
 13289  285F  0844               	movf	(??_itoa+1)^(0+128),w
 13290  2860  3D40               	addwfc	(itoa@str+1)^(0+128),w
 13291  2861  0087               	movwf	7
 13292  2862  0181               	clrf	1
 13293  2863                     l7492:	
 13294                           ;common.c: 50:  while (value && width > 0) {
 13295                           
 13296                           
 13297                           ;common.c: 50:  while (value && width > 0) {
 13298  2863  0841               	movf	itoa@value^(0+128),w
 13299  2864  1903               	btfsc	3,2
 13300  2865  28BD               	goto	l7498
 13301  2866  0842               	movf	itoa@width^(0+128),w
 13302  2867  1903               	btfsc	3,2
 13303  2868  28BD               	goto	l7498
 13304                           
 13305                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 13306  2869  300A               	movlw	10
 13307  286A  0140               	movlb	0	; select bank0
 13308  286B  00A4               	movwf	___awmod@divisor
 13309  286C  3000               	movlw	0
 13310  286D  00A5               	movwf	___awmod@divisor+1
 13311  286E  0141               	movlb	1	; select bank1
 13312  286F  0841               	movf	itoa@value^(0+128),w
 13313  2870  00C3               	movwf	??_itoa^(0+128)
 13314  2871  01C4               	clrf	(??_itoa^(0+128)+1)
 13315  2872  0843               	movf	??_itoa^(0+128),w
 13316  2873  0140               	movlb	0	; select bank0
 13317  2874  00A6               	movwf	___awmod@dividend
 13318  2875  0141               	movlb	1	; select bank1
 13319  2876  0844               	movf	(??_itoa+1)^(0+128),w
 13320  2877  0140               	movlb	0	; select bank0
 13321  2878  00A7               	movwf	___awmod@dividend+1
 13322  2879  31B5  252B  31A8   	fcall	___awmod
 13323  287C  0140               	movlb	0	; select bank0
 13324  287D  0824               	movf	?___awmod,w
 13325  287E  3E30               	addlw	48
 13326  287F  0141               	movlb	1	; select bank1
 13327  2880  00C5               	movwf	(??_itoa+2)^(0+128)
 13328  2881  3001               	movlw	1
 13329  2882  02C2               	subwf	itoa@width^(0+128),f
 13330  2883  0842               	movf	itoa@width^(0+128),w
 13331  2884  00C6               	movwf	(??_itoa+3)^(0+128)
 13332  2885  01C7               	clrf	((??_itoa+3)^(0+128)+1)
 13333  2886  0846               	movf	(??_itoa+3)^(0+128),w
 13334  2887  073F               	addwf	itoa@str^(0+128),w
 13335  2888  00C8               	movwf	(??_itoa+5)^(0+128)
 13336  2889  0847               	movf	(??_itoa+4)^(0+128),w
 13337  288A  3D40               	addwfc	(itoa@str+1)^(0+128),w
 13338  288B  00C9               	movwf	(??_itoa+6)^(0+128)
 13339  288C  0848               	movf	(??_itoa+5)^(0+128),w
 13340  288D  0086               	movwf	6
 13341  288E  0849               	movf	(??_itoa+6)^(0+128),w
 13342  288F  0087               	movwf	7
 13343  2890  0845               	movf	(??_itoa+2)^(0+128),w
 13344  2891  0081               	movwf	1
 13345                           
 13346                           ;common.c: 52:   value = value / 10;
 13347  2892  300A               	movlw	10
 13348  2893  0140               	movlb	0	; select bank0
 13349  2894  00A4               	movwf	___awdiv@divisor
 13350  2895  3000               	movlw	0
 13351  2896  00A5               	movwf	___awdiv@divisor+1
 13352  2897  0141               	movlb	1	; select bank1
 13353  2898  0841               	movf	itoa@value^(0+128),w
 13354  2899  00C3               	movwf	??_itoa^(0+128)
 13355  289A  01C4               	clrf	(??_itoa^(0+128)+1)
 13356  289B  0843               	movf	??_itoa^(0+128),w
 13357  289C  0140               	movlb	0	; select bank0
 13358  289D  00A6               	movwf	___awdiv@dividend
 13359  289E  0141               	movlb	1	; select bank1
 13360  289F  0844               	movf	(??_itoa+1)^(0+128),w
 13361  28A0  0140               	movlb	0	; select bank0
 13362  28A1  00A7               	movwf	___awdiv@dividend+1
 13363  28A2  31B6  26DF  31A8   	fcall	___awdiv
 13364  28A5  0140               	movlb	0	; select bank0
 13365  28A6  0824               	movf	?___awdiv,w
 13366  28A7  0141               	movlb	1	; select bank1
 13367  28A8  00C5               	movwf	(??_itoa+2)^(0+128)
 13368  28A9  0845               	movf	(??_itoa+2)^(0+128),w
 13369  28AA  00C1               	movwf	itoa@value^(0+128)
 13370  28AB  2863               	goto	l7492
 13371  28AC                     l7496:	
 13372                           
 13373                           ;common.c: 55:   str[--width] = ' ';
 13374  28AC  3001               	movlw	1
 13375  28AD  02C2               	subwf	itoa@width^(0+128),f
 13376  28AE  0842               	movf	itoa@width^(0+128),w
 13377  28AF  00C3               	movwf	??_itoa^(0+128)
 13378  28B0  01C4               	clrf	(??_itoa^(0+128)+1)
 13379  28B1  0843               	movf	??_itoa^(0+128),w
 13380  28B2  073F               	addwf	itoa@str^(0+128),w
 13381  28B3  00C5               	movwf	(??_itoa+2)^(0+128)
 13382  28B4  0844               	movf	(??_itoa+1)^(0+128),w
 13383  28B5  3D40               	addwfc	(itoa@str+1)^(0+128),w
 13384  28B6  00C6               	movwf	(??_itoa+3)^(0+128)
 13385  28B7  0845               	movf	(??_itoa+2)^(0+128),w
 13386  28B8  0086               	movwf	6
 13387  28B9  0846               	movf	(??_itoa+3)^(0+128),w
 13388  28BA  0087               	movwf	7
 13389  28BB  3020               	movlw	32
 13390  28BC  0081               	movwf	1
 13391  28BD                     l7498:	
 13392                           
 13393                           ;common.c: 54:  while(width)
 13394  28BD  0842               	movf	itoa@width^(0+128),w
 13395  28BE  1903               	btfsc	3,2
 13396  28BF  0008               	return
 13397  28C0  28AC               	goto	l7496
 13398  28C1                     __end_of_itoa:	
 13399                           
 13400                           	psect	text29
 13401  21F3                     __ptext29:	
 13402 ;; *************** function _ftoa *****************
 13403 ;; Defined at:
 13404 ;;		line 8 in file "common.c"
 13405 ;; Parameters:    Size  Location     Type
 13406 ;;  str             1    wreg     PTR unsigned char 
 13407 ;;		 -> str(10), 
 13408 ;;  fValue          4   31[BANK1 ] float 
 13409 ;;  width           1   35[BANK1 ] unsigned char 
 13410 ;;  prec            1   36[BANK1 ] unsigned char 
 13411 ;; Auto vars:     Size  Location     Type
 13412 ;;  str             1   44[BANK1 ] PTR unsigned char 
 13413 ;;		 -> str(10), 
 13414 ;;  pos             1   43[BANK1 ] unsigned char 
 13415 ;;  w               1   42[BANK1 ] unsigned char 
 13416 ;;  intValue        1   41[BANK1 ] unsigned char 
 13417 ;;  sign            1   40[BANK1 ] unsigned char 
 13418 ;;  len             1   39[BANK1 ] unsigned char 
 13419 ;; Return value:  Size  Location     Type
 13420 ;;                  1    wreg      void 
 13421 ;; Registers used:
 13422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13423 ;; Tracked objects:
 13424 ;;		On entry : 0/0
 13425 ;;		On exit  : 0/0
 13426 ;;		Unchanged: 0/0
 13427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13428 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13429 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13430 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13431 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13432 ;;Total ram usage:       14 bytes
 13433 ;; Hardware stack levels used:    1
 13434 ;; Hardware stack levels required when called:    5
 13435 ;; This function calls:
 13436 ;;		___fldiv
 13437 ;;		___flge
 13438 ;;		___flmul
 13439 ;;		___flsub
 13440 ;;		___fltol
 13441 ;;		___wmul
 13442 ;;		___xxtofl
 13443 ;; This function is called by:
 13444 ;;		_statusView
 13445 ;;		_channelView
 13446 ;;		_channelSetup
 13447 ;;		_setOutputPower
 13448 ;;		_setLensDia
 13449 ;;		_setup
 13450 ;;		_setDPOffset
 13451 ;;		_setSkyTemp
 13452 ;;		_setFudgeFactor
 13453 ;; This function uses a non-reentrant model
 13454 ;;
 13455                           
 13456                           
 13457                           ;psect for function _ftoa
 13458  21F3                     _ftoa:	
 13459                           
 13460                           ;incstack = 0
 13461                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13462                           ;ftoa@str stored from wreg
 13463  21F3  0141               	movlb	1	; select bank1
 13464  21F4  00CC               	movwf	ftoa@str^(0+128)
 13465                           
 13466                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 13467  21F5  01C7               	clrf	ftoa@len^(0+128)
 13468  21F6  0AC7               	incf	ftoa@len^(0+128),f
 13469                           
 13470                           ;common.c: 12:  uint8_t pos = 0;
 13471  21F7  01CB               	clrf	ftoa@pos^(0+128)
 13472                           
 13473                           ;common.c: 14:  uint8_t sign = 0;
 13474  21F8  01C8               	clrf	ftoa@sign^(0+128)
 13475                           
 13476                           ;common.c: 16:  if (fValue < 0) {
 13477  21F9  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13478  21FA  00B5               	movwf	(___flge@ff1+3)^(0+128)
 13479  21FB  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13480  21FC  00B4               	movwf	(___flge@ff1+2)^(0+128)
 13481  21FD  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13482  21FE  00B3               	movwf	(___flge@ff1+1)^(0+128)
 13483  21FF  083F               	movf	ftoa@fValue^(0+128),w
 13484  2200  00B2               	movwf	___flge@ff1^(0+128)
 13485  2201  3000               	movlw	0
 13486  2202  00B9               	movwf	(___flge@ff2+3)^(0+128)
 13487  2203  3000               	movlw	0
 13488  2204  00B8               	movwf	(___flge@ff2+2)^(0+128)
 13489  2205  3000               	movlw	0
 13490  2206  00B7               	movwf	(___flge@ff2+1)^(0+128)
 13491  2207  3000               	movlw	0
 13492  2208  00B6               	movwf	___flge@ff2^(0+128)
 13493  2209  31AA  2277  31A1   	fcall	___flge
 13494  220C  1803               	btfsc	3,0
 13495  220D  2A3E               	goto	l7450
 13496                           
 13497                           ;common.c: 17:   fValue *= -1;
 13498  220E  30BF               	movlw	191
 13499  220F  0140               	movlb	0	; select bank0
 13500  2210  00C8               	movwf	___flmul@b+3
 13501  2211  3080               	movlw	128
 13502  2212  00C7               	movwf	___flmul@b+2
 13503  2213  3000               	movlw	0
 13504  2214  00C6               	movwf	___flmul@b+1
 13505  2215  3000               	movlw	0
 13506  2216  00C5               	movwf	___flmul@b
 13507  2217  0141               	movlb	1	; select bank1
 13508  2218  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13509  2219  0140               	movlb	0	; select bank0
 13510  221A  00CC               	movwf	___flmul@a+3
 13511  221B  0141               	movlb	1	; select bank1
 13512  221C  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13513  221D  0140               	movlb	0	; select bank0
 13514  221E  00CB               	movwf	___flmul@a+2
 13515  221F  0141               	movlb	1	; select bank1
 13516  2220  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13517  2221  0140               	movlb	0	; select bank0
 13518  2222  00CA               	movwf	___flmul@a+1
 13519  2223  0141               	movlb	1	; select bank1
 13520  2224  083F               	movf	ftoa@fValue^(0+128),w
 13521  2225  0140               	movlb	0	; select bank0
 13522  2226  00C9               	movwf	___flmul@a
 13523  2227  3191  21D9  31A1   	fcall	___flmul
 13524  222A  0140               	movlb	0	; select bank0
 13525  222B  0848               	movf	?___flmul+3,w
 13526  222C  0141               	movlb	1	; select bank1
 13527  222D  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 13528  222E  0140               	movlb	0	; select bank0
 13529  222F  0847               	movf	?___flmul+2,w
 13530  2230  0141               	movlb	1	; select bank1
 13531  2231  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 13532  2232  0140               	movlb	0	; select bank0
 13533  2233  0846               	movf	?___flmul+1,w
 13534  2234  0141               	movlb	1	; select bank1
 13535  2235  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 13536  2236  0140               	movlb	0	; select bank0
 13537  2237  0845               	movf	?___flmul,w
 13538  2238  0141               	movlb	1	; select bank1
 13539  2239  00BF               	movwf	ftoa@fValue^(0+128)
 13540                           
 13541                           ;common.c: 18:   sign = 1;
 13542  223A  01C8               	clrf	ftoa@sign^(0+128)
 13543  223B  0AC8               	incf	ftoa@sign^(0+128),f
 13544                           
 13545                           ;common.c: 19:   width--;
 13546  223C  3001               	movlw	1
 13547  223D  02C3               	subwf	ftoa@width^(0+128),f
 13548  223E                     l7450:	
 13549                           
 13550                           ;common.c: 21:  while(fValue >= 10.0) {
 13551  223E  0141               	movlb	1	; select bank1
 13552  223F  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13553  2240  00B5               	movwf	(___flge@ff1+3)^(0+128)
 13554  2241  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13555  2242  00B4               	movwf	(___flge@ff1+2)^(0+128)
 13556  2243  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13557  2244  00B3               	movwf	(___flge@ff1+1)^(0+128)
 13558  2245  083F               	movf	ftoa@fValue^(0+128),w
 13559  2246  00B2               	movwf	___flge@ff1^(0+128)
 13560  2247  3041               	movlw	65
 13561  2248  00B9               	movwf	(___flge@ff2+3)^(0+128)
 13562  2249  3020               	movlw	32
 13563  224A  00B8               	movwf	(___flge@ff2+2)^(0+128)
 13564  224B  3000               	movlw	0
 13565  224C  00B7               	movwf	(___flge@ff2+1)^(0+128)
 13566  224D  3000               	movlw	0
 13567  224E  00B6               	movwf	___flge@ff2^(0+128)
 13568  224F  31AA  2277  31A1   	fcall	___flge
 13569  2252  1C03               	btfss	3,0
 13570  2253  2A85               	goto	l7452
 13571                           
 13572                           ;common.c: 22:   fValue /= 10;
 13573  2254  3041               	movlw	65
 13574  2255  0140               	movlb	0	; select bank0
 13575  2256  00E2               	movwf	___fldiv@a+3
 13576  2257  3020               	movlw	32
 13577  2258  00E1               	movwf	___fldiv@a+2
 13578  2259  3000               	movlw	0
 13579  225A  00E0               	movwf	___fldiv@a+1
 13580  225B  3000               	movlw	0
 13581  225C  00DF               	movwf	___fldiv@a
 13582  225D  0141               	movlb	1	; select bank1
 13583  225E  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13584  225F  0140               	movlb	0	; select bank0
 13585  2260  00E6               	movwf	___fldiv@b+3
 13586  2261  0141               	movlb	1	; select bank1
 13587  2262  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13588  2263  0140               	movlb	0	; select bank0
 13589  2264  00E5               	movwf	___fldiv@b+2
 13590  2265  0141               	movlb	1	; select bank1
 13591  2266  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13592  2267  0140               	movlb	0	; select bank0
 13593  2268  00E4               	movwf	___fldiv@b+1
 13594  2269  0141               	movlb	1	; select bank1
 13595  226A  083F               	movf	ftoa@fValue^(0+128),w
 13596  226B  0140               	movlb	0	; select bank0
 13597  226C  00E3               	movwf	___fldiv@b
 13598  226D  3190  2007  31A1   	fcall	___fldiv
 13599  2270  0140               	movlb	0	; select bank0
 13600  2271  0862               	movf	?___fldiv+3,w
 13601  2272  0141               	movlb	1	; select bank1
 13602  2273  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 13603  2274  0140               	movlb	0	; select bank0
 13604  2275  0861               	movf	?___fldiv+2,w
 13605  2276  0141               	movlb	1	; select bank1
 13606  2277  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 13607  2278  0140               	movlb	0	; select bank0
 13608  2279  0860               	movf	?___fldiv+1,w
 13609  227A  0141               	movlb	1	; select bank1
 13610  227B  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 13611  227C  0140               	movlb	0	; select bank0
 13612  227D  085F               	movf	?___fldiv,w
 13613  227E  0141               	movlb	1	; select bank1
 13614  227F  00BF               	movwf	ftoa@fValue^(0+128)
 13615                           
 13616                           ;common.c: 23:   len++;
 13617  2280  3001               	movlw	1
 13618  2281  00C5               	movwf	??_ftoa^(0+128)
 13619  2282  0845               	movf	??_ftoa^(0+128),w
 13620  2283  07C7               	addwf	ftoa@len^(0+128),f
 13621  2284  2A3E               	goto	l7450
 13622  2285                     l7452:	
 13623                           
 13624                           ;common.c: 25:  w = len + prec;
 13625  2285  0141               	movlb	1	; select bank1
 13626  2286  0847               	movf	ftoa@len^(0+128),w
 13627  2287  0744               	addwf	ftoa@prec^(0+128),w
 13628  2288  00C5               	movwf	??_ftoa^(0+128)
 13629  2289  0845               	movf	??_ftoa^(0+128),w
 13630  228A  00CA               	movwf	ftoa@w^(0+128)
 13631                           
 13632                           ;common.c: 26:  if (prec == 0)
 13633  228B  0844               	movf	ftoa@prec^(0+128),w
 13634  228C  1D03               	btfss	3,2
 13635  228D  2A92               	goto	l7460
 13636                           
 13637                           ;common.c: 27:   width++;
 13638  228E  3001               	movlw	1
 13639  228F  00C5               	movwf	??_ftoa^(0+128)
 13640  2290  0845               	movf	??_ftoa^(0+128),w
 13641  2291  07C3               	addwf	ftoa@width^(0+128),f
 13642  2292                     l7460:	
 13643                           
 13644                           ;common.c: 28:  while(--width > w)
 13645  2292  3001               	movlw	1
 13646  2293  02C3               	subwf	ftoa@width^(0+128),f
 13647  2294  0843               	movf	ftoa@width^(0+128),w
 13648  2295  024A               	subwf	ftoa@w^(0+128),w
 13649  2296  1803               	btfsc	3,0
 13650  2297  2AA8               	goto	l7462
 13651                           
 13652                           ;common.c: 29:   str[pos++] = ' ';
 13653  2298  3020               	movlw	32
 13654  2299  00C5               	movwf	??_ftoa^(0+128)
 13655  229A  084B               	movf	ftoa@pos^(0+128),w
 13656  229B  074C               	addwf	ftoa@str^(0+128),w
 13657  229C  00C6               	movwf	(??_ftoa+1)^(0+128)
 13658  229D  0846               	movf	(??_ftoa+1)^(0+128),w
 13659  229E  0086               	movwf	6
 13660  229F  3002               	movlw	2	; select bank4/5
 13661  22A0  0087               	movwf	7
 13662  22A1  0845               	movf	??_ftoa^(0+128),w
 13663  22A2  0081               	movwf	1
 13664  22A3  3001               	movlw	1
 13665  22A4  00C5               	movwf	??_ftoa^(0+128)
 13666  22A5  0845               	movf	??_ftoa^(0+128),w
 13667  22A6  07CB               	addwf	ftoa@pos^(0+128),f
 13668  22A7  2A92               	goto	l7460
 13669  22A8                     l7462:	
 13670                           
 13671                           ;common.c: 30:  if (sign)
 13672  22A8  0848               	movf	ftoa@sign^(0+128),w
 13673  22A9  1903               	btfsc	3,2
 13674  22AA  2ABA               	goto	l7482
 13675                           
 13676                           ;common.c: 31:   str[pos++] = '-';
 13677  22AB  302D               	movlw	45
 13678  22AC                     L6:	
 13679  22AC  00C5               	movwf	??_ftoa^(0+128)
 13680  22AD  084B               	movf	ftoa@pos^(0+128),w
 13681  22AE  074C               	addwf	ftoa@str^(0+128),w
 13682  22AF  00C6               	movwf	(??_ftoa+1)^(0+128)
 13683  22B0  0846               	movf	(??_ftoa+1)^(0+128),w
 13684  22B1  0086               	movwf	6
 13685  22B2  3002               	movlw	2	; select bank4/5
 13686  22B3  0087               	movwf	7
 13687  22B4  0845               	movf	??_ftoa^(0+128),w
 13688  22B5  0081               	movwf	1
 13689  22B6  3001               	movlw	1
 13690  22B7  00C5               	movwf	??_ftoa^(0+128)
 13691  22B8  0845               	movf	??_ftoa^(0+128),w
 13692  22B9  07CB               	addwf	ftoa@pos^(0+128),f
 13693  22BA                     l7482:	
 13694                           
 13695                           ;common.c: 32:  while(w--) {
 13696  22BA  3001               	movlw	1
 13697  22BB  02CA               	subwf	ftoa@w^(0+128),f
 13698  22BC  0A4A               	incf	ftoa@w^(0+128),w
 13699  22BD  1903               	btfsc	3,2
 13700  22BE  2B51               	goto	l7484
 13701                           
 13702                           ;common.c: 33:   intValue = fValue;
 13703  22BF  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13704  22C0  00B7               	movwf	(___fltol@f1+3)^(0+128)
 13705  22C1  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13706  22C2  00B6               	movwf	(___fltol@f1+2)^(0+128)
 13707  22C3  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13708  22C4  00B5               	movwf	(___fltol@f1+1)^(0+128)
 13709  22C5  083F               	movf	ftoa@fValue^(0+128),w
 13710  22C6  00B4               	movwf	___fltol@f1^(0+128)
 13711  22C7  31B7  2731  31A1   	fcall	___fltol
 13712  22CA  0141               	movlb	1	; select bank1
 13713  22CB  0834               	movf	?___fltol^(0+128),w
 13714  22CC  00C5               	movwf	??_ftoa^(0+128)
 13715  22CD  0845               	movf	??_ftoa^(0+128),w
 13716  22CE  00C9               	movwf	ftoa@intValue^(0+128)
 13717                           
 13718                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 13719  22CF  300A               	movlw	10
 13720  22D0  0140               	movlb	0	; select bank0
 13721  22D1  00B3               	movwf	___wmul@multiplicand
 13722  22D2  3000               	movlw	0
 13723  22D3  00B4               	movwf	___wmul@multiplicand+1
 13724  22D4  0141               	movlb	1	; select bank1
 13725  22D5  0849               	movf	ftoa@intValue^(0+128),w
 13726  22D6  00C5               	movwf	??_ftoa^(0+128)
 13727  22D7  01C6               	clrf	(??_ftoa^(0+128)+1)
 13728  22D8  0845               	movf	??_ftoa^(0+128),w
 13729  22D9  0140               	movlb	0	; select bank0
 13730  22DA  00B1               	movwf	___wmul@multiplier
 13731  22DB  0141               	movlb	1	; select bank1
 13732  22DC  0846               	movf	(??_ftoa+1)^(0+128),w
 13733  22DD  0140               	movlb	0	; select bank0
 13734  22DE  00B2               	movwf	___wmul@multiplier+1
 13735  22DF  31B1  21AD  31A1   	fcall	___wmul
 13736  22E2  0140               	movlb	0	; select bank0
 13737  22E3  0831               	movf	?___wmul,w
 13738  22E4  00B7               	movwf	___xxtofl@val
 13739  22E5  0832               	movf	?___wmul+1,w
 13740  22E6  00B8               	movwf	___xxtofl@val+1
 13741  22E7  0D89               	rlf	9,f
 13742  22E8  3B89               	subwfb	9,f
 13743  22E9  0989               	comf	9,f
 13744  22EA  00B9               	movwf	___xxtofl@val+2
 13745  22EB  00BA               	movwf	___xxtofl@val+3
 13746  22EC  3001               	movlw	1
 13747  22ED  31AB  237E  31A1   	fcall	___xxtofl
 13748  22F0  0140               	movlb	0	; select bank0
 13749  22F1  083A               	movf	?___xxtofl+3,w
 13750  22F2  0141               	movlb	1	; select bank1
 13751  22F3  00AF               	movwf	(___flsub@a+3)^(0+128)
 13752  22F4  0140               	movlb	0	; select bank0
 13753  22F5  0839               	movf	?___xxtofl+2,w
 13754  22F6  0141               	movlb	1	; select bank1
 13755  22F7  00AE               	movwf	(___flsub@a+2)^(0+128)
 13756  22F8  0140               	movlb	0	; select bank0
 13757  22F9  0838               	movf	?___xxtofl+1,w
 13758  22FA  0141               	movlb	1	; select bank1
 13759  22FB  00AD               	movwf	(___flsub@a+1)^(0+128)
 13760  22FC  0140               	movlb	0	; select bank0
 13761  22FD  0837               	movf	?___xxtofl,w
 13762  22FE  0141               	movlb	1	; select bank1
 13763  22FF  00AC               	movwf	___flsub@a^(0+128)
 13764  2300  3041               	movlw	65
 13765  2301  0140               	movlb	0	; select bank0
 13766  2302  00C8               	movwf	___flmul@b+3
 13767  2303  3020               	movlw	32
 13768  2304  00C7               	movwf	___flmul@b+2
 13769  2305  3000               	movlw	0
 13770  2306  00C6               	movwf	___flmul@b+1
 13771  2307  3000               	movlw	0
 13772  2308  00C5               	movwf	___flmul@b
 13773  2309  0141               	movlb	1	; select bank1
 13774  230A  0842               	movf	(ftoa@fValue+3)^(0+128),w
 13775  230B  0140               	movlb	0	; select bank0
 13776  230C  00CC               	movwf	___flmul@a+3
 13777  230D  0141               	movlb	1	; select bank1
 13778  230E  0841               	movf	(ftoa@fValue+2)^(0+128),w
 13779  230F  0140               	movlb	0	; select bank0
 13780  2310  00CB               	movwf	___flmul@a+2
 13781  2311  0141               	movlb	1	; select bank1
 13782  2312  0840               	movf	(ftoa@fValue+1)^(0+128),w
 13783  2313  0140               	movlb	0	; select bank0
 13784  2314  00CA               	movwf	___flmul@a+1
 13785  2315  0141               	movlb	1	; select bank1
 13786  2316  083F               	movf	ftoa@fValue^(0+128),w
 13787  2317  0140               	movlb	0	; select bank0
 13788  2318  00C9               	movwf	___flmul@a
 13789  2319  3191  21D9  31A1   	fcall	___flmul
 13790  231C  0140               	movlb	0	; select bank0
 13791  231D  0848               	movf	?___flmul+3,w
 13792  231E  0141               	movlb	1	; select bank1
 13793  231F  00B3               	movwf	(___flsub@b+3)^(0+128)
 13794  2320  0140               	movlb	0	; select bank0
 13795  2321  0847               	movf	?___flmul+2,w
 13796  2322  0141               	movlb	1	; select bank1
 13797  2323  00B2               	movwf	(___flsub@b+2)^(0+128)
 13798  2324  0140               	movlb	0	; select bank0
 13799  2325  0846               	movf	?___flmul+1,w
 13800  2326  0141               	movlb	1	; select bank1
 13801  2327  00B1               	movwf	(___flsub@b+1)^(0+128)
 13802  2328  0140               	movlb	0	; select bank0
 13803  2329  0845               	movf	?___flmul,w
 13804  232A  0141               	movlb	1	; select bank1
 13805  232B  00B0               	movwf	___flsub@b^(0+128)
 13806  232C  31B3  235A  31A1   	fcall	___flsub
 13807  232F  0141               	movlb	1	; select bank1
 13808  2330  082F               	movf	(?___flsub+3)^(0+128),w
 13809  2331  00C2               	movwf	(ftoa@fValue+3)^(0+128)
 13810  2332  082E               	movf	(?___flsub+2)^(0+128),w
 13811  2333  00C1               	movwf	(ftoa@fValue+2)^(0+128)
 13812  2334  082D               	movf	(?___flsub+1)^(0+128),w
 13813  2335  00C0               	movwf	(ftoa@fValue+1)^(0+128)
 13814  2336  082C               	movf	?___flsub^(0+128),w
 13815  2337  00BF               	movwf	ftoa@fValue^(0+128)
 13816                           
 13817                           ;common.c: 35:   str[pos++] = intValue + '0';
 13818  2338  0849               	movf	ftoa@intValue^(0+128),w
 13819  2339  3E30               	addlw	48
 13820  233A  00C5               	movwf	??_ftoa^(0+128)
 13821  233B  084B               	movf	ftoa@pos^(0+128),w
 13822  233C  074C               	addwf	ftoa@str^(0+128),w
 13823  233D  00C6               	movwf	(??_ftoa+1)^(0+128)
 13824  233E  0846               	movf	(??_ftoa+1)^(0+128),w
 13825  233F  0086               	movwf	6
 13826  2340  3002               	movlw	2	; select bank4/5
 13827  2341  0087               	movwf	7
 13828  2342  0845               	movf	??_ftoa^(0+128),w
 13829  2343  0081               	movwf	1
 13830  2344  3001               	movlw	1
 13831  2345  00C5               	movwf	??_ftoa^(0+128)
 13832  2346  0845               	movf	??_ftoa^(0+128),w
 13833  2347  07CB               	addwf	ftoa@pos^(0+128),f
 13834                           
 13835                           ;common.c: 36:   if (w && (w == prec))
 13836  2348  084A               	movf	ftoa@w^(0+128),w
 13837  2349  1903               	btfsc	3,2
 13838  234A  2ABA               	goto	l7482
 13839  234B  084A               	movf	ftoa@w^(0+128),w
 13840  234C  0644               	xorwf	ftoa@prec^(0+128),w
 13841  234D  1D03               	skipz
 13842  234E  2ABA               	goto	l7482
 13843                           
 13844                           ;common.c: 37:    str[pos++] = '.';
 13845  234F  302E               	movlw	46
 13846  2350  2AAC               	goto	L6
 13847  2351                     l7484:	
 13848                           
 13849                           ;common.c: 40:  str[pos] = '\0';
 13850  2351  084B               	movf	ftoa@pos^(0+128),w
 13851  2352  074C               	addwf	ftoa@str^(0+128),w
 13852  2353  00C5               	movwf	??_ftoa^(0+128)
 13853  2354  0845               	movf	??_ftoa^(0+128),w
 13854  2355  0086               	movwf	6
 13855  2356  3002               	movlw	2	; select bank4/5
 13856  2357  0087               	movwf	7
 13857  2358  0181               	clrf	1
 13858  2359  0008               	return
 13859  235A                     __end_of_ftoa:	
 13860                           
 13861                           	psect	text30
 13862  3328                     __ptext30:	
 13863 ;; *************** function _OLED_print_xy *****************
 13864 ;; Defined at:
 13865 ;;		line 156 in file "oled.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  col             1    wreg     unsigned char 
 13868 ;;  row             1   17[BANK0 ] unsigned char 
 13869 ;;  s               2   18[BANK0 ] PTR unsigned char 
 13870 ;;		 -> STR_87(4), systemCheck@str(3), STR_86(12), STR_85(13), 
 13871 ;;		 -> STR_84(13), STR_83(13), STR_82(13), STR_81(13), 
 13872 ;;		 -> STR_80(13), STR_79(13), STR_78(13), STR_77(13), 
 13873 ;;		 -> STR_76(13), STR_75(13), STR_74(13), STR_73(13), 
 13874 ;;		 -> STR_72(13), STR_71(13), STR_70(13), STR_69(13), 
 13875 ;;		 -> STR_68(13), STR_67(13), STR_66(13), STR_65(13), 
 13876 ;;		 -> STR_64(13), STR_63(13), STR_62(13), STR_61(9), 
 13877 ;;		 -> STR_60(2), STR_59(13), STR_58(9), STR_57(2), 
 13878 ;;		 -> STR_56(13), STR_55(3), STR_54(7), STR_53(13), 
 13879 ;;		 -> STR_52(10), STR_51(10), STR_50(3), STR_49(7), 
 13880 ;;		 -> STR_48(37), STR_47(8), STR_46(2), STR_45(13), 
 13881 ;;		 -> STR_44(13), STR_43(13), STR_42(8), STR_41(2), 
 13882 ;;		 -> STR_40(7), STR_39(6), STR_38(7), STR_37(6), 
 13883 ;;		 -> STR_36(13), STR_35(8), STR_34(13), STR_33(13), 
 13884 ;;		 -> STR_32(13), STR_31(13), STR_30(13), STR_29(13), 
 13885 ;;		 -> STR_28(13), STR_27(9), STR_26(8), STR_25(5), 
 13886 ;;		 -> STR_24(8), STR_23(5), STR_22(13), STR_21(13), 
 13887 ;;		 -> STR_20(13), STR_19(13), STR_18(13), STR_17(9), 
 13888 ;;		 -> STR_16(3), STR_15(3), STR_14(13), STR_13(13), 
 13889 ;;		 -> STR_12(3), STR_11(3), STR_10(4), STR_9(2), 
 13890 ;;		 -> STR_8(4), STR_7(8), STR_6(7), STR_5(8), 
 13891 ;;		 -> STR_4(2), STR_3(4), str(10), STR_2(8), 
 13892 ;;		 -> STR_1(57), 
 13893 ;; Auto vars:     Size  Location     Type
 13894 ;;  col             1   25[BANK0 ] unsigned char 
 13895 ;;  row_offsets     4   21[BANK0 ] unsigned char [4]
 13896 ;; Return value:  Size  Location     Type
 13897 ;;                  1    wreg      void 
 13898 ;; Registers used:
 13899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13900 ;; Tracked objects:
 13901 ;;		On entry : 0/0
 13902 ;;		On exit  : 0/0
 13903 ;;		Unchanged: 0/0
 13904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13905 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13906 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13908 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13909 ;;Total ram usage:        9 bytes
 13910 ;; Hardware stack levels used:    1
 13911 ;; Hardware stack levels required when called:    7
 13912 ;; This function calls:
 13913 ;;		_OLED_command
 13914 ;;		_OLED_write
 13915 ;; This function is called by:
 13916 ;;		_statusView
 13917 ;;		_channelView
 13918 ;;		_channelSetup
 13919 ;;		_setOutputPower
 13920 ;;		_setLensDia
 13921 ;;		_setup
 13922 ;;		_setDPOffset
 13923 ;;		_setSkyTemp
 13924 ;;		_setFudgeFactor
 13925 ;;		_viewErrorMessage
 13926 ;;		_systemCheck
 13927 ;; This function uses a non-reentrant model
 13928 ;;
 13929                           
 13930                           
 13931                           ;psect for function _OLED_print_xy
 13932  3328                     _OLED_print_xy:	
 13933                           
 13934                           ;incstack = 0
 13935                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13936                           ;OLED_print_xy@col stored from wreg
 13937  3328  0140               	movlb	0	; select bank0
 13938  3329  00B9               	movwf	OLED_print_xy@col
 13939                           
 13940                           ;oled.c: 156: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 157: {;oled.
      +                          c: 158:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 13941  332A  0144               	movlb	4	; select bank4
 13942  332B  0863               	movf	(OLED_print_xy@F7980+3)^(0+512),w
 13943  332C  0140               	movlb	0	; select bank0
 13944  332D  00B8               	movwf	OLED_print_xy@row_offsets+3
 13945  332E  0144               	movlb	4	; select bank4
 13946  332F  0862               	movf	(OLED_print_xy@F7980+2)^(0+512),w
 13947  3330  0140               	movlb	0	; select bank0
 13948  3331  00B7               	movwf	OLED_print_xy@row_offsets+2
 13949  3332  0144               	movlb	4	; select bank4
 13950  3333  0861               	movf	(OLED_print_xy@F7980+1)^(0+512),w
 13951  3334  0140               	movlb	0	; select bank0
 13952  3335  00B6               	movwf	OLED_print_xy@row_offsets+1
 13953  3336  0144               	movlb	4	; select bank4
 13954  3337  0860               	movf	OLED_print_xy@F7980^(0+512),w
 13955  3338  0140               	movlb	0	; select bank0
 13956  3339  00B5               	movwf	OLED_print_xy@row_offsets
 13957                           
 13958                           ;oled.c: 160:  OLED_command(0x80 | (col + row_offsets[row]));
 13959  333A  0831               	movf	OLED_print_xy@row,w
 13960  333B  3E35               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 13961  333C  0086               	movwf	6
 13962  333D  0187               	clrf	7
 13963  333E  0801               	movf	1,w
 13964  333F  0739               	addwf	OLED_print_xy@col,w
 13965  3340  3880               	iorlw	128
 13966  3341  31B1  2115  31B3   	fcall	_OLED_command
 13967  3344                     l4938:	
 13968                           ;oled.c: 161:  while (*s != (char) ((void*)0)) {
 13969                           
 13970                           
 13971                           ;oled.c: 161:  while (*s != (char) ((void*)0)) {
 13972  3344  0140               	movlb	0	; select bank0
 13973  3345  0832               	movf	OLED_print_xy@s,w
 13974  3346  0084               	movwf	4
 13975  3347  0833               	movf	OLED_print_xy@s+1,w
 13976  3348  0085               	movwf	5
 13977  3349  0012               	moviw fsr0++
 13978  334A  1903               	btfsc	3,2
 13979  334B  0008               	return
 13980                           
 13981                           ;oled.c: 162:   OLED_write(*s++);
 13982  334C  0832               	movf	OLED_print_xy@s,w
 13983  334D  0084               	movwf	4
 13984  334E  0833               	movf	OLED_print_xy@s+1,w
 13985  334F  0085               	movwf	5
 13986  3350  0800               	movf	0,w	;code access
 13987  3351  31B1  2129  31B3   	fcall	_OLED_write
 13988  3354  3001               	movlw	1
 13989  3355  0140               	movlb	0	; select bank0
 13990  3356  07B2               	addwf	OLED_print_xy@s,f
 13991  3357  3000               	movlw	0
 13992  3358  3DB3               	addwfc	OLED_print_xy@s+1,f
 13993  3359  2B44               	goto	l4938
 13994  335A                     __end_of_OLED_print_xy:	
 13995                           
 13996                           	psect	text31
 13997  3600                     __ptext31:	
 13998 ;; *************** function _initialize *****************
 13999 ;; Defined at:
 14000 ;;		line 129 in file "main.c"
 14001 ;; Parameters:    Size  Location     Type
 14002 ;;		None
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;		None
 14005 ;; Return value:  Size  Location     Type
 14006 ;;                  1    wreg      void 
 14007 ;; Registers used:
 14008 ;;		wreg, status,2, status,0
 14009 ;; Tracked objects:
 14010 ;;		On entry : 0/0
 14011 ;;		On exit  : 0/0
 14012 ;;		Unchanged: 0/0
 14013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14018 ;;Total ram usage:        0 bytes
 14019 ;; Hardware stack levels used:    1
 14020 ;; Hardware stack levels required when called:    3
 14021 ;; This function calls:
 14022 ;;		Nothing
 14023 ;; This function is called by:
 14024 ;;		_main
 14025 ;; This function uses a non-reentrant model
 14026 ;;
 14027                           
 14028                           
 14029                           ;psect for function _initialize
 14030  3600                     _initialize:	
 14031                           
 14032                           ;main.c: 131:  OSCFRQ = 0b00000010;
 14033                           
 14034                           ;incstack = 0
 14035                           ; Regs used in _initialize: [wreg+status,2+status,0]
 14036  3600  3002               	movlw	2
 14037  3601  0151               	movlb	17	; select bank17
 14038  3602  0093               	movwf	19	;volatile
 14039                           
 14040                           ;main.c: 132:  OSCCON1 = 0b01100000;
 14041  3603  3060               	movlw	96
 14042  3604  008D               	movwf	13	;volatile
 14043  3605                     l135:	
 14044                           ;main.c: 133:  while (!OSCCON3bits.ORDY);
 14045                           
 14046  3605  1E0F               	btfss	15,4	;volatile
 14047  3606  2E05               	goto	l135
 14048                           
 14049                           ;main.c: 136:  RX1DTPPSbits.RX1DTPPS = 0x17;
 14050  3607  017D               	movlb	61	; select bank61
 14051  3608  084B               	movf	75,w	;volatile
 14052  3609  39C0               	andlw	-64
 14053  360A  3817               	iorlw	23
 14054  360B  00CB               	movwf	75	;volatile
 14055                           
 14056                           ;main.c: 137:  RC6PPS = 0x0F;
 14057  360C  300F               	movlw	15
 14058  360D  017E               	movlb	62	; select bank62
 14059  360E  00A6               	movwf	38	;volatile
 14060                           
 14061                           ;main.c: 140:  ANSELA = 0b01000000;
 14062  360F  3040               	movlw	64
 14063  3610  00B8               	movwf	56	;volatile
 14064                           
 14065                           ;main.c: 141:  ANSELB = 0b00000000;
 14066  3611  01C3               	clrf	67	;volatile
 14067                           
 14068                           ;main.c: 142:  ANSELC = 0b00000011;
 14069  3612  3003               	movlw	3
 14070  3613  00CE               	movwf	78	;volatile
 14071                           
 14072                           ;main.c: 145:  TRISA = 0b11110000;
 14073  3614  30F0               	movlw	240
 14074  3615  0140               	movlb	0	; select bank0
 14075  3616  0092               	movwf	18	;volatile
 14076                           
 14077                           ;main.c: 146:  TRISB = 0b00000000;
 14078  3617  0193               	clrf	19	;volatile
 14079                           
 14080                           ;main.c: 147:  TRISC = 0b10000111;
 14081  3618  3087               	movlw	135
 14082  3619  0094               	movwf	20	;volatile
 14083                           
 14084                           ;main.c: 150:  ADCON0bits.ADON = 1;
 14085  361A  0141               	movlb	1	; select bank1
 14086  361B  141D               	bsf	29,0	;volatile
 14087                           
 14088                           ;main.c: 151:  ADCON1 = 0b11100000;
 14089  361C  30E0               	movlw	224
 14090  361D  009E               	movwf	30	;volatile
 14091                           
 14092                           ;main.c: 154:  T0CON0 = 0b10000000;
 14093  361E  3080               	movlw	128
 14094  361F  014B               	movlb	11	; select bank11
 14095  3620  009E               	movwf	30	;volatile
 14096                           
 14097                           ;main.c: 155:  T0CON1 = 0b01000111;
 14098  3621  3047               	movlw	71
 14099  3622  009F               	movwf	31	;volatile
 14100                           
 14101                           ;main.c: 156:  TMR0 = 178;
 14102  3623  30B2               	movlw	178
 14103  3624  009C               	movwf	28	;volatile
 14104                           
 14105                           ;main.c: 159:  T1CON = 0b00110011;
 14106  3625  3033               	movlw	51
 14107  3626  0144               	movlb	4	; select bank4
 14108  3627  008E               	movwf	14	;volatile
 14109                           
 14110                           ;main.c: 160:  T1CLK = 0b00000001;
 14111  3628  3001               	movlw	1
 14112  3629  0091               	movwf	17	;volatile
 14113                           
 14114                           ;main.c: 161:  TMR1 = 53035;
 14115  362A  30CF               	movlw	207
 14116  362B  008D               	movwf	13	;volatile
 14117  362C  302B               	movlw	43
 14118  362D  008C               	movwf	12	;volatile
 14119                           
 14120                           ;main.c: 164:  PIE0 = 0b00110000;
 14121  362E  3030               	movlw	48
 14122  362F  014E               	movlb	14	; select bank14
 14123  3630  0096               	movwf	22	;volatile
 14124                           
 14125                           ;main.c: 165:  PIE3 = 0b00100000;
 14126  3631  3020               	movlw	32
 14127  3632  0099               	movwf	25	;volatile
 14128                           
 14129                           ;main.c: 166:  PIE4 = 0b00000001;
 14130  3633  3001               	movlw	1
 14131  3634  009A               	movwf	26	;volatile
 14132                           
 14133                           ;main.c: 167:  INTCON = 0b11000000;
 14134  3635  30C0               	movlw	192
 14135  3636  008B               	movwf	11	;volatile
 14136                           
 14137                           ;main.c: 170:  IOCAP = 0b10110000;
 14138  3637  30B0               	movlw	176
 14139  3638  017E               	movlb	62	; select bank62
 14140  3639  00BD               	movwf	61	;volatile
 14141                           
 14142                           ;main.c: 171:  IOCAN = 0b10110000;
 14143  363A  30B0               	movlw	176
 14144  363B  00BE               	movwf	62	;volatile
 14145                           
 14146                           ;main.c: 172:  IOCCN = 0b00000100;
 14147  363C  3004               	movlw	4
 14148  363D  00D4               	movwf	84	;volatile
 14149                           
 14150                           ;main.c: 176:  BAUD1CON = 0b00001000;
 14151  363E  3008               	movlw	8
 14152  363F  0142               	movlb	2	; select bank2
 14153  3640  009F               	movwf	31	;volatile
 14154                           
 14155                           ;main.c: 177:  SPBRGL = 25;
 14156  3641  3019               	movlw	25
 14157  3642  009B               	movwf	27	;volatile
 14158                           
 14159                           ;main.c: 178:  RC1STA = 0b10010000;
 14160  3643  3090               	movlw	144
 14161  3644  009D               	movwf	29	;volatile
 14162                           
 14163                           ;main.c: 179:  TX1STA = 0b00100000;
 14164  3645  3020               	movlw	32
 14165  3646  009E               	movwf	30	;volatile
 14166  3647  0008               	return
 14167  3648                     __end_of_initialize:	
 14168                           
 14169                           	psect	text32
 14170  2EEC                     __ptext32:	
 14171 ;; *************** function _initGlobalData *****************
 14172 ;; Defined at:
 14173 ;;		line 95 in file "main.c"
 14174 ;; Parameters:    Size  Location     Type
 14175 ;;  data            2   23[BANK0 ] PTR struct .
 14176 ;;		 -> data(166), 
 14177 ;; Auto vars:     Size  Location     Type
 14178 ;;  chData          2   30[BANK0 ] PTR struct .
 14179 ;;		 -> data.chData(124), data(166), 
 14180 ;;  n               1   29[BANK0 ] unsigned char 
 14181 ;; Return value:  Size  Location     Type
 14182 ;;                  1    wreg      void 
 14183 ;; Registers used:
 14184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14185 ;; Tracked objects:
 14186 ;;		On entry : 0/0
 14187 ;;		On exit  : 0/0
 14188 ;;		Unchanged: 0/0
 14189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14190 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14191 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14192 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14193 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14194 ;;Total ram usage:        9 bytes
 14195 ;; Hardware stack levels used:    1
 14196 ;; Hardware stack levels required when called:    4
 14197 ;; This function calls:
 14198 ;;		___wmul
 14199 ;; This function is called by:
 14200 ;;		_main
 14201 ;; This function uses a non-reentrant model
 14202 ;;
 14203                           
 14204                           
 14205                           ;psect for function _initGlobalData
 14206  2EEC                     _initGlobalData:	
 14207                           
 14208                           ;main.c: 95: void initGlobalData(t_globalData *data);main.c: 96: {;main.c: 97:  uint8_t 
      +                          n;;main.c: 98:  t_channelData *chData;;main.c: 100:  data->tempC = 0;
 14209                           
 14210                           ;incstack = 0
 14211                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14212  2EEC  0140               	movlb	0	; select bank0
 14213  2EED  0837               	movf	initGlobalData@data,w
 14214  2EEE  0086               	movwf	6
 14215  2EEF  0838               	movf	initGlobalData@data+1,w
 14216  2EF0  0087               	movwf	7
 14217  2EF1  3000               	movlw	0
 14218  2EF2  3FC0               	movwi [0]fsr1
 14219  2EF3  3000               	movlw	0
 14220  2EF4  3FC1               	movwi [1]fsr1
 14221  2EF5  3000               	movlw	0
 14222  2EF6  3FC2               	movwi [2]fsr1
 14223  2EF7  3000               	movlw	0
 14224  2EF8  3FC3               	movwi [3]fsr1
 14225                           
 14226                           ;main.c: 101:  data->relHum = 0;
 14227  2EF9  0837               	movf	initGlobalData@data,w
 14228  2EFA  0086               	movwf	6
 14229  2EFB  0838               	movf	initGlobalData@data+1,w
 14230  2EFC  0087               	movwf	7
 14231  2EFD  3144               	addfsr 1,4
 14232  2EFE  3000               	movlw	0
 14233  2EFF  3FC0               	movwi [0]fsr1
 14234  2F00  3000               	movlw	0
 14235  2F01  3FC1               	movwi [1]fsr1
 14236  2F02  3000               	movlw	0
 14237  2F03  3FC2               	movwi [2]fsr1
 14238  2F04  3000               	movlw	0
 14239  2F05  3FC3               	movwi [3]fsr1
 14240                           
 14241                           ;main.c: 102:  data->dewPointC = 0;
 14242  2F06  0837               	movf	initGlobalData@data,w
 14243  2F07  0086               	movwf	6
 14244  2F08  0838               	movf	initGlobalData@data+1,w
 14245  2F09  0087               	movwf	7
 14246  2F0A  3148               	addfsr 1,8
 14247  2F0B  3000               	movlw	0
 14248  2F0C  3FC0               	movwi [0]fsr1
 14249  2F0D  3000               	movlw	0
 14250  2F0E  3FC1               	movwi [1]fsr1
 14251  2F0F  3000               	movlw	0
 14252  2F10  3FC2               	movwi [2]fsr1
 14253  2F11  3000               	movlw	0
 14254  2F12  3FC3               	movwi [3]fsr1
 14255                           
 14256                           ;main.c: 103:  data->sensorVersion = 0;
 14257  2F13  0837               	movf	initGlobalData@data,w
 14258  2F14  0086               	movwf	6
 14259  2F15  0838               	movf	initGlobalData@data+1,w
 14260  2F16  0087               	movwf	7
 14261  2F17  314C               	addfsr 1,12
 14262  2F18  0181               	clrf	1
 14263                           
 14264                           ;main.c: 104:  data->tempAux = 0;
 14265  2F19  0837               	movf	initGlobalData@data,w
 14266  2F1A  0086               	movwf	6
 14267  2F1B  0838               	movf	initGlobalData@data+1,w
 14268  2F1C  0087               	movwf	7
 14269  2F1D  314D               	addfsr 1,13
 14270  2F1E  3000               	movlw	0
 14271  2F1F  3FC0               	movwi [0]fsr1
 14272  2F20  3000               	movlw	0
 14273  2F21  3FC1               	movwi [1]fsr1
 14274  2F22  3000               	movlw	0
 14275  2F23  3FC2               	movwi [2]fsr1
 14276  2F24  3000               	movlw	0
 14277  2F25  3FC3               	movwi [3]fsr1
 14278                           
 14279                           ;main.c: 105:  data->voltage = 0;
 14280  2F26  0837               	movf	initGlobalData@data,w
 14281  2F27  0086               	movwf	6
 14282  2F28  0838               	movf	initGlobalData@data+1,w
 14283  2F29  0087               	movwf	7
 14284  2F2A  3151               	addfsr 1,17
 14285  2F2B  3000               	movlw	0
 14286  2F2C  3FC0               	movwi [0]fsr1
 14287  2F2D  3000               	movlw	0
 14288  2F2E  3FC1               	movwi [1]fsr1
 14289  2F2F  3000               	movlw	0
 14290  2F30  3FC2               	movwi [2]fsr1
 14291  2F31  3000               	movlw	0
 14292  2F32  3FC3               	movwi [3]fsr1
 14293                           
 14294                           ;main.c: 106:  data->current = 0;
 14295  2F33  0837               	movf	initGlobalData@data,w
 14296  2F34  0086               	movwf	6
 14297  2F35  0838               	movf	initGlobalData@data+1,w
 14298  2F36  0087               	movwf	7
 14299  2F37  3155               	addfsr 1,21
 14300  2F38  3000               	movlw	0
 14301  2F39  3FC0               	movwi [0]fsr1
 14302  2F3A  3000               	movlw	0
 14303  2F3B  3FC1               	movwi [1]fsr1
 14304  2F3C  3000               	movlw	0
 14305  2F3D  3FC2               	movwi [2]fsr1
 14306  2F3E  3000               	movlw	0
 14307  2F3F  3FC3               	movwi [3]fsr1
 14308                           
 14309                           ;main.c: 107:  data->power = 0;
 14310  2F40  0837               	movf	initGlobalData@data,w
 14311  2F41  0086               	movwf	6
 14312  2F42  0838               	movf	initGlobalData@data+1,w
 14313  2F43  0087               	movwf	7
 14314  2F44  3159               	addfsr 1,25
 14315  2F45  3000               	movlw	0
 14316  2F46  3FC0               	movwi [0]fsr1
 14317  2F47  3000               	movlw	0
 14318  2F48  3FC1               	movwi [1]fsr1
 14319  2F49  3000               	movlw	0
 14320  2F4A  3FC2               	movwi [2]fsr1
 14321  2F4B  3000               	movlw	0
 14322  2F4C  3FC3               	movwi [3]fsr1
 14323                           
 14324                           ;main.c: 108:  data->dpOffset = 3.0;
 14325  2F4D  0837               	movf	initGlobalData@data,w
 14326  2F4E  0086               	movwf	6
 14327  2F4F  0838               	movf	initGlobalData@data+1,w
 14328  2F50  0087               	movwf	7
 14329  2F51  315D               	addfsr 1,29
 14330  2F52  3000               	movlw	0
 14331  2F53  3FC0               	movwi [0]fsr1
 14332  2F54  3000               	movlw	0
 14333  2F55  3FC1               	movwi [1]fsr1
 14334  2F56  3040               	movlw	64
 14335  2F57  3FC2               	movwi [2]fsr1
 14336  2F58  3040               	movlw	64
 14337  2F59  3FC3               	movwi [3]fsr1
 14338                           
 14339                           ;main.c: 109:  data->skyTemp = -40;
 14340  2F5A  0837               	movf	initGlobalData@data,w
 14341  2F5B  3E21               	addlw	33
 14342  2F5C  0086               	movwf	6
 14343  2F5D  3000               	movlw	0
 14344  2F5E  3D38               	addwfc	initGlobalData@data+1,w
 14345  2F5F  0087               	movwf	7
 14346  2F60  3000               	movlw	0
 14347  2F61  3FC0               	movwi [0]fsr1
 14348  2F62  3000               	movlw	0
 14349  2F63  3FC1               	movwi [1]fsr1
 14350  2F64  3020               	movlw	32
 14351  2F65  3FC2               	movwi [2]fsr1
 14352  2F66  30C2               	movlw	194
 14353  2F67  3FC3               	movwi [3]fsr1
 14354                           
 14355                           ;main.c: 110:  data->fudgeFactor = 1.0;
 14356  2F68  0837               	movf	initGlobalData@data,w
 14357  2F69  3E25               	addlw	37
 14358  2F6A  0086               	movwf	6
 14359  2F6B  3000               	movlw	0
 14360  2F6C  3D38               	addwfc	initGlobalData@data+1,w
 14361  2F6D  0087               	movwf	7
 14362  2F6E  3000               	movlw	0
 14363  2F6F  3FC0               	movwi [0]fsr1
 14364  2F70  3000               	movlw	0
 14365  2F71  3FC1               	movwi [1]fsr1
 14366  2F72  3080               	movlw	128
 14367  2F73  3FC2               	movwi [2]fsr1
 14368  2F74  303F               	movlw	63
 14369  2F75  3FC3               	movwi [3]fsr1
 14370                           
 14371                           ;main.c: 112:  for (n = 0; n < 4; n++) {
 14372  2F76  01BD               	clrf	initGlobalData@n
 14373  2F77                     l8044:	
 14374                           
 14375                           ;main.c: 113:   chData = &data->chData[n];
 14376  2F77  083D               	movf	initGlobalData@n,w
 14377  2F78  00B9               	movwf	??_initGlobalData
 14378  2F79  01BA               	clrf	??_initGlobalData+1
 14379  2F7A  0839               	movf	??_initGlobalData,w
 14380  2F7B  00B1               	movwf	___wmul@multiplier
 14381  2F7C  083A               	movf	??_initGlobalData+1,w
 14382  2F7D  00B2               	movwf	___wmul@multiplier+1
 14383  2F7E  301F               	movlw	31
 14384  2F7F  00B3               	movwf	___wmul@multiplicand
 14385  2F80  3000               	movlw	0
 14386  2F81  00B4               	movwf	___wmul@multiplicand+1
 14387  2F82  31B1  21AD  31AE   	fcall	___wmul
 14388  2F85  0140               	movlb	0	; select bank0
 14389  2F86  0831               	movf	?___wmul,w
 14390  2F87  0737               	addwf	initGlobalData@data,w
 14391  2F88  00BB               	movwf	??_initGlobalData+2
 14392  2F89  0832               	movf	?___wmul+1,w
 14393  2F8A  3D38               	addwfc	initGlobalData@data+1,w
 14394  2F8B  00BC               	movwf	??_initGlobalData+3
 14395  2F8C  083B               	movf	??_initGlobalData+2,w
 14396  2F8D  3E2A               	addlw	42
 14397  2F8E  00BE               	movwf	initGlobalData@chData
 14398  2F8F  3000               	movlw	0
 14399  2F90  3D3C               	addwfc	??_initGlobalData+3,w
 14400  2F91  00BF               	movwf	initGlobalData@chData+1
 14401                           
 14402                           ;main.c: 114:   chData->lensDia = 4;
 14403  2F92  083E               	movf	initGlobalData@chData,w
 14404  2F93  0086               	movwf	6
 14405  2F94  083F               	movf	initGlobalData@chData+1,w
 14406  2F95  0087               	movwf	7
 14407  2F96  3155               	addfsr 1,21
 14408  2F97  3000               	movlw	0
 14409  2F98  3FC0               	movwi [0]fsr1
 14410  2F99  3000               	movlw	0
 14411  2F9A  3FC1               	movwi [1]fsr1
 14412  2F9B  3080               	movlw	128
 14413  2F9C  3FC2               	movwi [2]fsr1
 14414  2F9D  3040               	movlw	64
 14415  2F9E  3FC3               	movwi [3]fsr1
 14416                           
 14417                           ;main.c: 115:   chData->status = CH_UNCHECKED;
 14418  2F9F  083E               	movf	initGlobalData@chData,w
 14419  2FA0  3E1E               	addlw	30
 14420  2FA1  00B9               	movwf	??_initGlobalData
 14421  2FA2  3000               	movlw	0
 14422  2FA3  3D3F               	addwfc	initGlobalData@chData+1,w
 14423  2FA4  00BA               	movwf	??_initGlobalData+1
 14424  2FA5  0839               	movf	??_initGlobalData,w
 14425  2FA6  0086               	movwf	6
 14426  2FA7  083A               	movf	??_initGlobalData+1,w
 14427  2FA8  0087               	movwf	7
 14428  2FA9  3005               	movlw	5
 14429  2FAA  0081               	movwf	1
 14430                           
 14431                           ;main.c: 116:   chData->mode = MODE_AUTO;
 14432  2FAB  083E               	movf	initGlobalData@chData,w
 14433  2FAC  3E1D               	addlw	29
 14434  2FAD  00B9               	movwf	??_initGlobalData
 14435  2FAE  3000               	movlw	0
 14436  2FAF  3D3F               	addwfc	initGlobalData@chData+1,w
 14437  2FB0  00BA               	movwf	??_initGlobalData+1
 14438  2FB1  0839               	movf	??_initGlobalData,w
 14439  2FB2  0086               	movwf	6
 14440  2FB3  083A               	movf	??_initGlobalData+1,w
 14441  2FB4  0087               	movwf	7
 14442  2FB5  3001               	movlw	1
 14443  2FB6  0081               	movwf	1
 14444                           
 14445                           ;main.c: 117:   chData->Pmax = 0;
 14446  2FB7  083E               	movf	initGlobalData@chData,w
 14447  2FB8  0086               	movwf	6
 14448  2FB9  083F               	movf	initGlobalData@chData+1,w
 14449  2FBA  0087               	movwf	7
 14450  2FBB  3144               	addfsr 1,4
 14451  2FBC  3000               	movlw	0
 14452  2FBD  3FC0               	movwi [0]fsr1
 14453  2FBE  3000               	movlw	0
 14454  2FBF  3FC1               	movwi [1]fsr1
 14455  2FC0  3000               	movlw	0
 14456  2FC1  3FC2               	movwi [2]fsr1
 14457  2FC2  3000               	movlw	0
 14458  2FC3  3FC3               	movwi [3]fsr1
 14459                           
 14460                           ;main.c: 118:   chData->Pset = -1;
 14461  2FC4  083E               	movf	initGlobalData@chData,w
 14462  2FC5  0086               	movwf	6
 14463  2FC6  083F               	movf	initGlobalData@chData+1,w
 14464  2FC7  0087               	movwf	7
 14465  2FC8  3150               	addfsr 1,16
 14466  2FC9  3000               	movlw	0
 14467  2FCA  3FC0               	movwi [0]fsr1
 14468  2FCB  3000               	movlw	0
 14469  2FCC  3FC1               	movwi [1]fsr1
 14470  2FCD  3080               	movlw	128
 14471  2FCE  3FC2               	movwi [2]fsr1
 14472  2FCF  30BF               	movlw	191
 14473  2FD0  3FC3               	movwi [3]fsr1
 14474                           
 14475                           ;main.c: 119:   chData->Preq = 0;
 14476  2FD1  083E               	movf	initGlobalData@chData,w
 14477  2FD2  0086               	movwf	6
 14478  2FD3  083F               	movf	initGlobalData@chData+1,w
 14479  2FD4  0087               	movwf	7
 14480  2FD5  3148               	addfsr 1,8
 14481  2FD6  3000               	movlw	0
 14482  2FD7  3FC0               	movwi [0]fsr1
 14483  2FD8  3000               	movlw	0
 14484  2FD9  3FC1               	movwi [1]fsr1
 14485  2FDA  3000               	movlw	0
 14486  2FDB  3FC2               	movwi [2]fsr1
 14487  2FDC  3000               	movlw	0
 14488  2FDD  3FC3               	movwi [3]fsr1
 14489                           
 14490                           ;main.c: 120:   chData->Patt = 0;
 14491  2FDE  083E               	movf	initGlobalData@chData,w
 14492  2FDF  0086               	movwf	6
 14493  2FE0  083F               	movf	initGlobalData@chData+1,w
 14494  2FE1  0087               	movwf	7
 14495  2FE2  314C               	addfsr 1,12
 14496  2FE3  3000               	movlw	0
 14497  2FE4  3FC0               	movwi [0]fsr1
 14498  2FE5  3000               	movlw	0
 14499  2FE6  3FC1               	movwi [1]fsr1
 14500  2FE7  3000               	movlw	0
 14501  2FE8  3FC2               	movwi [2]fsr1
 14502  2FE9  3000               	movlw	0
 14503  2FEA  3FC3               	movwi [3]fsr1
 14504                           
 14505                           ;main.c: 121:   chData->current = 0;
 14506  2FEB  083E               	movf	initGlobalData@chData,w
 14507  2FEC  0086               	movwf	6
 14508  2FED  083F               	movf	initGlobalData@chData+1,w
 14509  2FEE  0087               	movwf	7
 14510  2FEF  3000               	movlw	0
 14511  2FF0  3FC0               	movwi [0]fsr1
 14512  2FF1  3000               	movlw	0
 14513  2FF2  3FC1               	movwi [1]fsr1
 14514  2FF3  3000               	movlw	0
 14515  2FF4  3FC2               	movwi [2]fsr1
 14516  2FF5  3000               	movlw	0
 14517  2FF6  3FC3               	movwi [3]fsr1
 14518                           
 14519                           ;main.c: 122:  }
 14520  2FF7  3001               	movlw	1
 14521  2FF8  00B9               	movwf	??_initGlobalData
 14522  2FF9  0839               	movf	??_initGlobalData,w
 14523  2FFA  07BD               	addwf	initGlobalData@n,f
 14524  2FFB  3004               	movlw	4
 14525  2FFC  023D               	subwf	initGlobalData@n,w
 14526  2FFD  1803               	btfsc	3,0
 14527  2FFE  0008               	return
 14528  2FFF  2F77               	goto	l8044
 14529  3000                     __end_of_initGlobalData:	
 14530                           
 14531                           	psect	text33
 14532  18CF                     __ptext33:	
 14533 ;; *************** function _getAnalogValues *****************
 14534 ;; Defined at:
 14535 ;;		line 412 in file "system.c"
 14536 ;; Parameters:    Size  Location     Type
 14537 ;;  data            2   18[BANK1 ] PTR struct .
 14538 ;;		 -> data(166), 
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;  adc             2   24[BANK1 ] unsigned short 
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  1    wreg      void 
 14543 ;; Registers used:
 14544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14550 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14551 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14553 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14554 ;;Total ram usage:        8 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; Hardware stack levels required when called:    5
 14557 ;; This function calls:
 14558 ;;		___fladd
 14559 ;;		___fldiv
 14560 ;;		___flmul
 14561 ;;		___xxtofl
 14562 ;;		_ema
 14563 ;;		_getAnalogValue
 14564 ;; This function is called by:
 14565 ;;		_main
 14566 ;; This function uses a non-reentrant model
 14567 ;;
 14568                           
 14569                           
 14570                           ;psect for function _getAnalogValues
 14571  18CF                     _getAnalogValues:	
 14572                           
 14573                           ;system.c: 412: void getAnalogValues(t_globalData *data);system.c: 413: {;system.c: 414:
      +                            static uint16_t avgT, avgV, avgI;;system.c: 415:  uint16_t adc;;system.c: 417:  adc = 
      +                          getAnalogValue(0b000110);
 14574                           
 14575                           ;incstack = 0
 14576                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14577  18CF  3006               	movlw	6
 14578  18D0  31B1  21C9  3198   	fcall	_getAnalogValue
 14579  18D3  0140               	movlb	0	; select bank0
 14580  18D4  0825               	movf	?_getAnalogValue+1,w
 14581  18D5  0141               	movlb	1	; select bank1
 14582  18D6  00B9               	movwf	(getAnalogValues@adc+1)^(0+128)
 14583  18D7  0140               	movlb	0	; select bank0
 14584  18D8  0824               	movf	?_getAnalogValue,w
 14585  18D9  0141               	movlb	1	; select bank1
 14586  18DA  00B8               	movwf	getAnalogValues@adc^(0+128)
 14587                           
 14588                           ;system.c: 418:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 14589  18DB  0839               	movf	(getAnalogValues@adc+1)^(0+128),w
 14590  18DC  0140               	movlb	0	; select bank0
 14591  18DD  00B1               	movwf	ema@in+1
 14592  18DE  0141               	movlb	1	; select bank1
 14593  18DF  0838               	movf	getAnalogValues@adc^(0+128),w
 14594  18E0  0140               	movlb	0	; select bank0
 14595  18E1  00B0               	movwf	ema@in
 14596  18E2  0143               	movlb	3	; select bank3
 14597  18E3  0861               	movf	(getAnalogValues@avgT+1)^(0+384),w
 14598  18E4  0140               	movlb	0	; select bank0
 14599  18E5  00B3               	movwf	ema@average+1
 14600  18E6  0143               	movlb	3	; select bank3
 14601  18E7  0860               	movf	getAnalogValues@avgT^(0+384),w
 14602  18E8  0140               	movlb	0	; select bank0
 14603  18E9  00B2               	movwf	ema@average
 14604  18EA  3000               	movlw	0
 14605  18EB  00B7               	movwf	ema@alpha+3
 14606  18EC  3000               	movlw	0
 14607  18ED  00B6               	movwf	ema@alpha+2
 14608  18EE  307F               	movlw	127
 14609  18EF  00B5               	movwf	ema@alpha+1
 14610  18F0  30FF               	movlw	255
 14611  18F1  00B4               	movwf	ema@alpha
 14612  18F2  31B7  2797  3198   	fcall	_ema
 14613  18F5  0140               	movlb	0	; select bank0
 14614  18F6  0831               	movf	?_ema+1,w
 14615  18F7  0143               	movlb	3	; select bank3
 14616  18F8  00E1               	movwf	(getAnalogValues@avgT+1)^(0+384)
 14617  18F9  0140               	movlb	0	; select bank0
 14618  18FA  0830               	movf	?_ema,w
 14619  18FB  0143               	movlb	3	; select bank3
 14620  18FC  00E0               	movwf	getAnalogValues@avgT^(0+384)
 14621                           
 14622                           ;system.c: 419:  adc = getAnalogValue(0b010000);
 14623  18FD  3010               	movlw	16
 14624  18FE  31B1  21C9  3198   	fcall	_getAnalogValue
 14625  1901  0140               	movlb	0	; select bank0
 14626  1902  0825               	movf	?_getAnalogValue+1,w
 14627  1903  0141               	movlb	1	; select bank1
 14628  1904  00B9               	movwf	(getAnalogValues@adc+1)^(0+128)
 14629  1905  0140               	movlb	0	; select bank0
 14630  1906  0824               	movf	?_getAnalogValue,w
 14631  1907  0141               	movlb	1	; select bank1
 14632  1908  00B8               	movwf	getAnalogValues@adc^(0+128)
 14633                           
 14634                           ;system.c: 420:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 14635  1909  0839               	movf	(getAnalogValues@adc+1)^(0+128),w
 14636  190A  0140               	movlb	0	; select bank0
 14637  190B  00B1               	movwf	ema@in+1
 14638  190C  0141               	movlb	1	; select bank1
 14639  190D  0838               	movf	getAnalogValues@adc^(0+128),w
 14640  190E  0140               	movlb	0	; select bank0
 14641  190F  00B0               	movwf	ema@in
 14642  1910  0144               	movlb	4	; select bank4
 14643  1911  082F               	movf	(getAnalogValues@avgV+1)^(0+512),w
 14644  1912  0140               	movlb	0	; select bank0
 14645  1913  00B3               	movwf	ema@average+1
 14646  1914  0144               	movlb	4	; select bank4
 14647  1915  082E               	movf	getAnalogValues@avgV^(0+512),w
 14648  1916  0140               	movlb	0	; select bank0
 14649  1917  00B2               	movwf	ema@average
 14650  1918  3000               	movlw	0
 14651  1919  00B7               	movwf	ema@alpha+3
 14652  191A  3000               	movlw	0
 14653  191B  00B6               	movwf	ema@alpha+2
 14654  191C  30CC               	movlw	204
 14655  191D  00B5               	movwf	ema@alpha+1
 14656  191E  30CC               	movlw	204
 14657  191F  00B4               	movwf	ema@alpha
 14658  1920  31B7  2797  3198   	fcall	_ema
 14659  1923  0140               	movlb	0	; select bank0
 14660  1924  0831               	movf	?_ema+1,w
 14661  1925  0144               	movlb	4	; select bank4
 14662  1926  00AF               	movwf	(getAnalogValues@avgV+1)^(0+512)
 14663  1927  0140               	movlb	0	; select bank0
 14664  1928  0830               	movf	?_ema,w
 14665  1929  0144               	movlb	4	; select bank4
 14666  192A  00AE               	movwf	getAnalogValues@avgV^(0+512)
 14667                           
 14668                           ;system.c: 421:  adc = getAnalogValue(0b010001);
 14669  192B  3011               	movlw	17
 14670  192C  31B1  21C9  3198   	fcall	_getAnalogValue
 14671  192F  0140               	movlb	0	; select bank0
 14672  1930  0825               	movf	?_getAnalogValue+1,w
 14673  1931  0141               	movlb	1	; select bank1
 14674  1932  00B9               	movwf	(getAnalogValues@adc+1)^(0+128)
 14675  1933  0140               	movlb	0	; select bank0
 14676  1934  0824               	movf	?_getAnalogValue,w
 14677  1935  0141               	movlb	1	; select bank1
 14678  1936  00B8               	movwf	getAnalogValues@adc^(0+128)
 14679                           
 14680                           ;system.c: 422:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 14681  1937  0839               	movf	(getAnalogValues@adc+1)^(0+128),w
 14682  1938  0140               	movlb	0	; select bank0
 14683  1939  00B1               	movwf	ema@in+1
 14684  193A  0141               	movlb	1	; select bank1
 14685  193B  0838               	movf	getAnalogValues@adc^(0+128),w
 14686  193C  0140               	movlb	0	; select bank0
 14687  193D  00B0               	movwf	ema@in
 14688  193E  0144               	movlb	4	; select bank4
 14689  193F  082D               	movf	(getAnalogValues@avgI+1)^(0+512),w
 14690  1940  0140               	movlb	0	; select bank0
 14691  1941  00B3               	movwf	ema@average+1
 14692  1942  0144               	movlb	4	; select bank4
 14693  1943  082C               	movf	getAnalogValues@avgI^(0+512),w
 14694  1944  0140               	movlb	0	; select bank0
 14695  1945  00B2               	movwf	ema@average
 14696  1946  3000               	movlw	0
 14697  1947  00B7               	movwf	ema@alpha+3
 14698  1948  3000               	movlw	0
 14699  1949  00B6               	movwf	ema@alpha+2
 14700  194A  304C               	movlw	76
 14701  194B  00B5               	movwf	ema@alpha+1
 14702  194C  30CC               	movlw	204
 14703  194D  00B4               	movwf	ema@alpha
 14704  194E  31B7  2797  3198   	fcall	_ema
 14705  1951  0140               	movlb	0	; select bank0
 14706  1952  0831               	movf	?_ema+1,w
 14707  1953  0144               	movlb	4	; select bank4
 14708  1954  00AD               	movwf	(getAnalogValues@avgI+1)^(0+512)
 14709  1955  0140               	movlb	0	; select bank0
 14710  1956  0830               	movf	?_ema,w
 14711  1957  0144               	movlb	4	; select bank4
 14712  1958  00AC               	movwf	getAnalogValues@avgI^(0+512)
 14713                           
 14714                           ;system.c: 423:  data->tempAux = ( (avgT * 0.1191) - 34.512 );
 14715  1959  30C2               	movlw	194
 14716  195A  0140               	movlb	0	; select bank0
 14717  195B  00E2               	movwf	___fladd@b+3
 14718  195C  300A               	movlw	10
 14719  195D  00E1               	movwf	___fladd@b+2
 14720  195E  300C               	movlw	12
 14721  195F  00E0               	movwf	___fladd@b+1
 14722  1960  304A               	movlw	74
 14723  1961  00DF               	movwf	___fladd@b
 14724  1962  303D               	movlw	61
 14725  1963  00C8               	movwf	___flmul@b+3
 14726  1964  30F3               	movlw	243
 14727  1965  00C7               	movwf	___flmul@b+2
 14728  1966  30EA               	movlw	234
 14729  1967  00C6               	movwf	___flmul@b+1
 14730  1968  30B3               	movlw	179
 14731  1969  00C5               	movwf	___flmul@b
 14732  196A  0143               	movlb	3	; select bank3
 14733  196B  0860               	movf	getAnalogValues@avgT^(0+384),w
 14734  196C  0140               	movlb	0	; select bank0
 14735  196D  00B7               	movwf	___xxtofl@val
 14736  196E  0143               	movlb	3	; select bank3
 14737  196F  0861               	movf	(getAnalogValues@avgT+1)^(0+384),w
 14738  1970  0140               	movlb	0	; select bank0
 14739  1971  00B8               	movwf	___xxtofl@val+1
 14740  1972  01B9               	clrf	___xxtofl@val+2
 14741  1973  01BA               	clrf	___xxtofl@val+3
 14742  1974  3000               	movlw	0
 14743  1975  31AB  237E  3198   	fcall	___xxtofl
 14744  1978  0140               	movlb	0	; select bank0
 14745  1979  083A               	movf	?___xxtofl+3,w
 14746  197A  00CC               	movwf	___flmul@a+3
 14747  197B  0839               	movf	?___xxtofl+2,w
 14748  197C  00CB               	movwf	___flmul@a+2
 14749  197D  0838               	movf	?___xxtofl+1,w
 14750  197E  00CA               	movwf	___flmul@a+1
 14751  197F  0837               	movf	?___xxtofl,w
 14752  1980  00C9               	movwf	___flmul@a
 14753  1981  3191  21D9  3198   	fcall	___flmul
 14754  1984  0140               	movlb	0	; select bank0
 14755  1985  0848               	movf	?___flmul+3,w
 14756  1986  00E6               	movwf	___fladd@a+3
 14757  1987  0847               	movf	?___flmul+2,w
 14758  1988  00E5               	movwf	___fladd@a+2
 14759  1989  0846               	movf	?___flmul+1,w
 14760  198A  00E4               	movwf	___fladd@a+1
 14761  198B  0845               	movf	?___flmul,w
 14762  198C  00E3               	movwf	___fladd@a
 14763  198D  3185  2592  3198   	fcall	___fladd
 14764  1990  0141               	movlb	1	; select bank1
 14765  1991  0832               	movf	getAnalogValues@data^(0+128),w
 14766  1992  0086               	movwf	6
 14767  1993  0833               	movf	(getAnalogValues@data+1)^(0+128),w
 14768  1994  0087               	movwf	7
 14769  1995  314D               	addfsr 1,13
 14770  1996  0140               	movlb	0	; select bank0
 14771  1997  085F               	movf	?___fladd,w
 14772  1998  3FC0               	movwi [0]fsr1
 14773  1999  0860               	movf	?___fladd+1,w
 14774  199A  3FC1               	movwi [1]fsr1
 14775  199B  0861               	movf	?___fladd+2,w
 14776  199C  3FC2               	movwi [2]fsr1
 14777  199D  0862               	movf	?___fladd+3,w
 14778  199E  3FC3               	movwi [3]fsr1
 14779                           
 14780                           ;system.c: 424:  data->voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 14781  199F  3040               	movlw	64
 14782  19A0  00C8               	movwf	___flmul@b+3
 14783  19A1  30A0               	movlw	160
 14784  19A2  00C7               	movwf	___flmul@b+2
 14785  19A3  3000               	movlw	0
 14786  19A4  00C6               	movwf	___flmul@b+1
 14787  19A5  3000               	movlw	0
 14788  19A6  00C5               	movwf	___flmul@b
 14789  19A7  0144               	movlb	4	; select bank4
 14790  19A8  082E               	movf	getAnalogValues@avgV^(0+512),w
 14791  19A9  0140               	movlb	0	; select bank0
 14792  19AA  00B7               	movwf	___xxtofl@val
 14793  19AB  0144               	movlb	4	; select bank4
 14794  19AC  082F               	movf	(getAnalogValues@avgV+1)^(0+512),w
 14795  19AD  0140               	movlb	0	; select bank0
 14796  19AE  00B8               	movwf	___xxtofl@val+1
 14797  19AF  01B9               	clrf	___xxtofl@val+2
 14798  19B0  01BA               	clrf	___xxtofl@val+3
 14799  19B1  3000               	movlw	0
 14800  19B2  31AB  237E  3198   	fcall	___xxtofl
 14801  19B5  0140               	movlb	0	; select bank0
 14802  19B6  083A               	movf	?___xxtofl+3,w
 14803  19B7  00CC               	movwf	___flmul@a+3
 14804  19B8  0839               	movf	?___xxtofl+2,w
 14805  19B9  00CB               	movwf	___flmul@a+2
 14806  19BA  0838               	movf	?___xxtofl+1,w
 14807  19BB  00CA               	movwf	___flmul@a+1
 14808  19BC  0837               	movf	?___xxtofl,w
 14809  19BD  00C9               	movwf	___flmul@a
 14810  19BE  3191  21D9  3198   	fcall	___flmul
 14811  19C1  0140               	movlb	0	; select bank0
 14812  19C2  0848               	movf	?___flmul+3,w
 14813  19C3  0141               	movlb	1	; select bank1
 14814  19C4  00B7               	movwf	(_getAnalogValues$2650+3)^(0+128)
 14815  19C5  0140               	movlb	0	; select bank0
 14816  19C6  0847               	movf	?___flmul+2,w
 14817  19C7  0141               	movlb	1	; select bank1
 14818  19C8  00B6               	movwf	(_getAnalogValues$2650+2)^(0+128)
 14819  19C9  0140               	movlb	0	; select bank0
 14820  19CA  0846               	movf	?___flmul+1,w
 14821  19CB  0141               	movlb	1	; select bank1
 14822  19CC  00B5               	movwf	(_getAnalogValues$2650+1)^(0+128)
 14823  19CD  0140               	movlb	0	; select bank0
 14824  19CE  0845               	movf	?___flmul,w
 14825  19CF  0141               	movlb	1	; select bank1
 14826  19D0  00B4               	movwf	_getAnalogValues$2650^(0+128)
 14827                           
 14828                           ;system.c: 424:  data->voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 14829  19D1  3047               	movlw	71
 14830  19D2  0140               	movlb	0	; select bank0
 14831  19D3  00E2               	movwf	___fldiv@a+3
 14832  19D4  303B               	movlw	59
 14833  19D5  00E1               	movwf	___fldiv@a+2
 14834  19D6  30D1               	movlw	209
 14835  19D7  00E0               	movwf	___fldiv@a+1
 14836  19D8  3000               	movlw	0
 14837  19D9  00DF               	movwf	___fldiv@a
 14838  19DA  3043               	movlw	67
 14839  19DB  00C8               	movwf	___flmul@b+3
 14840  19DC  3045               	movlw	69
 14841  19DD  00C7               	movwf	___flmul@b+2
 14842  19DE  3000               	movlw	0
 14843  19DF  00C6               	movwf	___flmul@b+1
 14844  19E0  3000               	movlw	0
 14845  19E1  00C5               	movwf	___flmul@b
 14846  19E2  0141               	movlb	1	; select bank1
 14847  19E3  0837               	movf	(_getAnalogValues$2650+3)^(0+128),w
 14848  19E4  0140               	movlb	0	; select bank0
 14849  19E5  00CC               	movwf	___flmul@a+3
 14850  19E6  0141               	movlb	1	; select bank1
 14851  19E7  0836               	movf	(_getAnalogValues$2650+2)^(0+128),w
 14852  19E8  0140               	movlb	0	; select bank0
 14853  19E9  00CB               	movwf	___flmul@a+2
 14854  19EA  0141               	movlb	1	; select bank1
 14855  19EB  0835               	movf	(_getAnalogValues$2650+1)^(0+128),w
 14856  19EC  0140               	movlb	0	; select bank0
 14857  19ED  00CA               	movwf	___flmul@a+1
 14858  19EE  0141               	movlb	1	; select bank1
 14859  19EF  0834               	movf	_getAnalogValues$2650^(0+128),w
 14860  19F0  0140               	movlb	0	; select bank0
 14861  19F1  00C9               	movwf	___flmul@a
 14862  19F2  3191  21D9  3198   	fcall	___flmul
 14863  19F5  0140               	movlb	0	; select bank0
 14864  19F6  0848               	movf	?___flmul+3,w
 14865  19F7  00E6               	movwf	___fldiv@b+3
 14866  19F8  0847               	movf	?___flmul+2,w
 14867  19F9  00E5               	movwf	___fldiv@b+2
 14868  19FA  0846               	movf	?___flmul+1,w
 14869  19FB  00E4               	movwf	___fldiv@b+1
 14870  19FC  0845               	movf	?___flmul,w
 14871  19FD  00E3               	movwf	___fldiv@b
 14872  19FE  3190  2007  3198   	fcall	___fldiv
 14873  1A01  0141               	movlb	1	; select bank1
 14874  1A02  0832               	movf	getAnalogValues@data^(0+128),w
 14875  1A03  0086               	movwf	6
 14876  1A04  0833               	movf	(getAnalogValues@data+1)^(0+128),w
 14877  1A05  0087               	movwf	7
 14878  1A06  3151               	addfsr 1,17
 14879  1A07  0140               	movlb	0	; select bank0
 14880  1A08  085F               	movf	?___fldiv,w
 14881  1A09  3FC0               	movwi [0]fsr1
 14882  1A0A  0860               	movf	?___fldiv+1,w
 14883  1A0B  3FC1               	movwi [1]fsr1
 14884  1A0C  0861               	movf	?___fldiv+2,w
 14885  1A0D  3FC2               	movwi [2]fsr1
 14886  1A0E  0862               	movf	?___fldiv+3,w
 14887  1A0F  3FC3               	movwi [3]fsr1
 14888                           
 14889                           ;system.c: 425:  data->current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 14890  1A10  3045               	movlw	69
 14891  1A11  00E2               	movwf	___fldiv@a+3
 14892  1A12  301F               	movlw	31
 14893  1A13  00E1               	movwf	___fldiv@a+2
 14894  1A14  30D8               	movlw	216
 14895  1A15  00E0               	movwf	___fldiv@a+1
 14896  1A16  3000               	movlw	0
 14897  1A17  00DF               	movwf	___fldiv@a
 14898  1A18  3040               	movlw	64
 14899  1A19  00C8               	movwf	___flmul@b+3
 14900  1A1A  30A0               	movlw	160
 14901  1A1B  00C7               	movwf	___flmul@b+2
 14902  1A1C  3000               	movlw	0
 14903  1A1D  00C6               	movwf	___flmul@b+1
 14904  1A1E  3000               	movlw	0
 14905  1A1F  00C5               	movwf	___flmul@b
 14906  1A20  0144               	movlb	4	; select bank4
 14907  1A21  082C               	movf	getAnalogValues@avgI^(0+512),w
 14908  1A22  0140               	movlb	0	; select bank0
 14909  1A23  00B7               	movwf	___xxtofl@val
 14910  1A24  0144               	movlb	4	; select bank4
 14911  1A25  082D               	movf	(getAnalogValues@avgI+1)^(0+512),w
 14912  1A26  0140               	movlb	0	; select bank0
 14913  1A27  00B8               	movwf	___xxtofl@val+1
 14914  1A28  01B9               	clrf	___xxtofl@val+2
 14915  1A29  01BA               	clrf	___xxtofl@val+3
 14916  1A2A  3000               	movlw	0
 14917  1A2B  31AB  237E  3198   	fcall	___xxtofl
 14918  1A2E  0140               	movlb	0	; select bank0
 14919  1A2F  083A               	movf	?___xxtofl+3,w
 14920  1A30  00CC               	movwf	___flmul@a+3
 14921  1A31  0839               	movf	?___xxtofl+2,w
 14922  1A32  00CB               	movwf	___flmul@a+2
 14923  1A33  0838               	movf	?___xxtofl+1,w
 14924  1A34  00CA               	movwf	___flmul@a+1
 14925  1A35  0837               	movf	?___xxtofl,w
 14926  1A36  00C9               	movwf	___flmul@a
 14927  1A37  3191  21D9  3198   	fcall	___flmul
 14928  1A3A  0140               	movlb	0	; select bank0
 14929  1A3B  0848               	movf	?___flmul+3,w
 14930  1A3C  00E6               	movwf	___fldiv@b+3
 14931  1A3D  0847               	movf	?___flmul+2,w
 14932  1A3E  00E5               	movwf	___fldiv@b+2
 14933  1A3F  0846               	movf	?___flmul+1,w
 14934  1A40  00E4               	movwf	___fldiv@b+1
 14935  1A41  0845               	movf	?___flmul,w
 14936  1A42  00E3               	movwf	___fldiv@b
 14937  1A43  3190  2007  3198   	fcall	___fldiv
 14938  1A46  0141               	movlb	1	; select bank1
 14939  1A47  0832               	movf	getAnalogValues@data^(0+128),w
 14940  1A48  0086               	movwf	6
 14941  1A49  0833               	movf	(getAnalogValues@data+1)^(0+128),w
 14942  1A4A  0087               	movwf	7
 14943  1A4B  3155               	addfsr 1,21
 14944  1A4C  0140               	movlb	0	; select bank0
 14945  1A4D  085F               	movf	?___fldiv,w
 14946  1A4E  3FC0               	movwi [0]fsr1
 14947  1A4F  0860               	movf	?___fldiv+1,w
 14948  1A50  3FC1               	movwi [1]fsr1
 14949  1A51  0861               	movf	?___fldiv+2,w
 14950  1A52  3FC2               	movwi [2]fsr1
 14951  1A53  0862               	movf	?___fldiv+3,w
 14952  1A54  3FC3               	movwi [3]fsr1
 14953                           
 14954                           ;system.c: 426:  data->power = data->voltage * data->current;
 14955  1A55  0141               	movlb	1	; select bank1
 14956  1A56  0832               	movf	getAnalogValues@data^(0+128),w
 14957  1A57  0086               	movwf	6
 14958  1A58  0833               	movf	(getAnalogValues@data+1)^(0+128),w
 14959  1A59  0087               	movwf	7
 14960  1A5A  3155               	addfsr 1,21
 14961  1A5B  3F40               	moviw [0]fsr1
 14962  1A5C  0140               	movlb	0	; select bank0
 14963  1A5D  00C5               	movwf	___flmul@b
 14964  1A5E  3F41               	moviw [1]fsr1
 14965  1A5F  00C6               	movwf	___flmul@b+1
 14966  1A60  3F42               	moviw [2]fsr1
 14967  1A61  00C7               	movwf	___flmul@b+2
 14968  1A62  3F43               	moviw [3]fsr1
 14969  1A63  00C8               	movwf	___flmul@b+3
 14970  1A64  0141               	movlb	1	; select bank1
 14971  1A65  0832               	movf	getAnalogValues@data^(0+128),w
 14972  1A66  0086               	movwf	6
 14973  1A67  0833               	movf	(getAnalogValues@data+1)^(0+128),w
 14974  1A68  0087               	movwf	7
 14975  1A69  3151               	addfsr 1,17
 14976  1A6A  3F40               	moviw [0]fsr1
 14977  1A6B  0140               	movlb	0	; select bank0
 14978  1A6C  00C9               	movwf	___flmul@a
 14979  1A6D  3F41               	moviw [1]fsr1
 14980  1A6E  00CA               	movwf	___flmul@a+1
 14981  1A6F  3F42               	moviw [2]fsr1
 14982  1A70  00CB               	movwf	___flmul@a+2
 14983  1A71  3F43               	moviw [3]fsr1
 14984  1A72  00CC               	movwf	___flmul@a+3
 14985  1A73  3191  21D9         	fcall	___flmul
 14986  1A75  0141               	movlb	1	; select bank1
 14987  1A76  0832               	movf	getAnalogValues@data^(0+128),w
 14988  1A77  0086               	movwf	6
 14989  1A78  0833               	movf	(getAnalogValues@data+1)^(0+128),w
 14990  1A79  0087               	movwf	7
 14991  1A7A  3159               	addfsr 1,25
 14992  1A7B  0140               	movlb	0	; select bank0
 14993  1A7C  0845               	movf	?___flmul,w
 14994  1A7D  3FC0               	movwi [0]fsr1
 14995  1A7E  0846               	movf	?___flmul+1,w
 14996  1A7F  3FC1               	movwi [1]fsr1
 14997  1A80  0847               	movf	?___flmul+2,w
 14998  1A81  3FC2               	movwi [2]fsr1
 14999  1A82  0848               	movf	?___flmul+3,w
 15000  1A83  3FC3               	movwi [3]fsr1
 15001  1A84  0008               	return
 15002  1A85                     __end_of_getAnalogValues:	
 15003                           
 15004                           	psect	text34
 15005  2C14                     __ptext34:	
 15006 ;; *************** function _controller *****************
 15007 ;; Defined at:
 15008 ;;		line 535 in file "system.c"
 15009 ;; Parameters:    Size  Location     Type
 15010 ;;		None
 15011 ;; Auto vars:     Size  Location     Type
 15012 ;;  tick            4   29[BANK0 ] unsigned long 
 15013 ;;  n               1   33[BANK0 ] unsigned char 
 15014 ;; Return value:  Size  Location     Type
 15015 ;;                  1    wreg      unsigned char 
 15016 ;; Registers used:
 15017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15018 ;; Tracked objects:
 15019 ;;		On entry : 0/0
 15020 ;;		On exit  : 0/0
 15021 ;;		Unchanged: 0/0
 15022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15024 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15025 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15026 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15027 ;;Total ram usage:       10 bytes
 15028 ;; Hardware stack levels used:    1
 15029 ;; Hardware stack levels required when called:    5
 15030 ;; This function calls:
 15031 ;;		___bmul
 15032 ;;		_setChannelSwitch
 15033 ;;		_timeNow
 15034 ;;		_timeSince
 15035 ;; This function is called by:
 15036 ;;		_main
 15037 ;; This function uses a non-reentrant model
 15038 ;;
 15039                           
 15040                           
 15041                           ;psect for function _controller
 15042  2C14                     _controller:	
 15043                           
 15044                           ;system.c: 537:  static uint32_t dutyCycleTimer;;system.c: 538:  uint32_t tick;;system.c
      +                          : 539:  static uint8_t idle;;system.c: 540:  uint8_t n;;system.c: 542:  if (idle) {
 15045                           
 15046                           ;incstack = 0
 15047                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15048  2C14  0143               	movlb	3	; select bank3
 15049  2C15  0864               	movf	controller@idle^(0+384),w
 15050  2C16  1903               	btfsc	3,2
 15051  2C17  2C2D               	goto	l8364
 15052                           
 15053                           ;system.c: 543:   dutyCycleTimer = timeNow();
 15054  2C18  31B1  216D  31AC   	fcall	_timeNow
 15055  2C1B  0140               	movlb	0	; select bank0
 15056  2C1C  0827               	movf	?_timeNow+3,w
 15057  2C1D  0144               	movlb	4	; select bank4
 15058  2C1E  00A3               	movwf	(controller@dutyCycleTimer+3)^(0+512)
 15059  2C1F  0140               	movlb	0	; select bank0
 15060  2C20  0826               	movf	?_timeNow+2,w
 15061  2C21  0144               	movlb	4	; select bank4
 15062  2C22  00A2               	movwf	(controller@dutyCycleTimer+2)^(0+512)
 15063  2C23  0140               	movlb	0	; select bank0
 15064  2C24  0825               	movf	?_timeNow+1,w
 15065  2C25  0144               	movlb	4	; select bank4
 15066  2C26  00A1               	movwf	(controller@dutyCycleTimer+1)^(0+512)
 15067  2C27  0140               	movlb	0	; select bank0
 15068  2C28  0824               	movf	?_timeNow,w
 15069  2C29  0144               	movlb	4	; select bank4
 15070  2C2A  00A0               	movwf	controller@dutyCycleTimer^(0+512)
 15071                           
 15072                           ;system.c: 544:   idle = 0;
 15073  2C2B  0143               	movlb	3	; select bank3
 15074  2C2C  01E4               	clrf	controller@idle^(0+384)
 15075  2C2D                     l8364:	
 15076                           
 15077                           ;system.c: 547:  tick = timeSince(dutyCycleTimer);
 15078  2C2D  0144               	movlb	4	; select bank4
 15079  2C2E  0823               	movf	(controller@dutyCycleTimer+3)^(0+512),w
 15080  2C2F  0140               	movlb	0	; select bank0
 15081  2C30  00AB               	movwf	timeSince@since+3
 15082  2C31  0144               	movlb	4	; select bank4
 15083  2C32  0822               	movf	(controller@dutyCycleTimer+2)^(0+512),w
 15084  2C33  0140               	movlb	0	; select bank0
 15085  2C34  00AA               	movwf	timeSince@since+2
 15086  2C35  0144               	movlb	4	; select bank4
 15087  2C36  0821               	movf	(controller@dutyCycleTimer+1)^(0+512),w
 15088  2C37  0140               	movlb	0	; select bank0
 15089  2C38  00A9               	movwf	timeSince@since+1
 15090  2C39  0144               	movlb	4	; select bank4
 15091  2C3A  0820               	movf	controller@dutyCycleTimer^(0+512),w
 15092  2C3B  0140               	movlb	0	; select bank0
 15093  2C3C  00A8               	movwf	timeSince@since
 15094  2C3D  31A8  2002  31AC   	fcall	_timeSince
 15095  2C40  0140               	movlb	0	; select bank0
 15096  2C41  082B               	movf	?_timeSince+3,w
 15097  2C42  00C0               	movwf	controller@tick+3
 15098  2C43  082A               	movf	?_timeSince+2,w
 15099  2C44  00BF               	movwf	controller@tick+2
 15100  2C45  0829               	movf	?_timeSince+1,w
 15101  2C46  00BE               	movwf	controller@tick+1
 15102  2C47  0828               	movf	?_timeSince,w
 15103  2C48  00BD               	movwf	controller@tick
 15104                           
 15105                           ;system.c: 548:  if (tick <= 100) {
 15106  2C49  0840               	movf	controller@tick+3,w
 15107  2C4A  1D03               	btfss	3,2
 15108  2C4B  2CBA               	goto	l932
 15109  2C4C  083F               	movf	controller@tick+2,w
 15110  2C4D  1D03               	btfss	3,2
 15111  2C4E  2CBA               	goto	l932
 15112  2C4F  083E               	movf	controller@tick+1,w
 15113  2C50  1D03               	btfss	3,2
 15114  2C51  2CBA               	goto	l932
 15115  2C52  3065               	movlw	101
 15116  2C53  023D               	subwf	controller@tick,w
 15117  2C54  1803               	btfsc	3,0
 15118  2C55  2CBA               	goto	l932
 15119                           
 15120                           ;system.c: 549:   for(n = 0; n < 4; n++) {
 15121  2C56  01C1               	clrf	controller@n
 15122  2C57                     l8374:	
 15123                           
 15124                           ;system.c: 550:    if ((tick >= virtChannels[n].start) && (tick < virtChannels[n].stop))
 15125  2C57  3009               	movlw	9
 15126  2C58  00B8               	movwf	??_controller
 15127  2C59  0838               	movf	??_controller,w
 15128  2C5A  00AD               	movwf	___bmul@multiplicand
 15129  2C5B  0841               	movf	controller@n,w
 15130  2C5C  31A0  2002  31AC   	fcall	___bmul
 15131  2C5F  3EB1               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 15132  2C60  0086               	movwf	6
 15133  2C61  3002               	movlw	2	; select bank5/6
 15134  2C62  0087               	movwf	7
 15135  2C63  0801               	movf	1,w
 15136  2C64  0140               	movlb	0	; select bank0
 15137  2C65  00B9               	movwf	??_controller+1
 15138  2C66  01BA               	clrf	??_controller+2
 15139  2C67  01BB               	clrf	??_controller+3
 15140  2C68  01BC               	clrf	??_controller+4
 15141  2C69  083C               	movf	??_controller+4,w
 15142  2C6A  0240               	subwf	controller@tick+3,w
 15143  2C6B  1D03               	skipz
 15144  2C6C  2C77               	goto	u9985
 15145  2C6D  083B               	movf	??_controller+3,w
 15146  2C6E  023F               	subwf	controller@tick+2,w
 15147  2C6F  1D03               	skipz
 15148  2C70  2C77               	goto	u9985
 15149  2C71  083A               	movf	??_controller+2,w
 15150  2C72  023E               	subwf	controller@tick+1,w
 15151  2C73  1D03               	skipz
 15152  2C74  2C77               	goto	u9985
 15153  2C75  0839               	movf	??_controller+1,w
 15154  2C76  023D               	subwf	controller@tick,w
 15155  2C77                     u9985:	
 15156  2C77  1C03               	skipc
 15157  2C78  2C9E               	goto	l8380
 15158  2C79  3009               	movlw	9
 15159  2C7A  00B8               	movwf	??_controller
 15160  2C7B  0838               	movf	??_controller,w
 15161  2C7C  00AD               	movwf	___bmul@multiplicand
 15162  2C7D  0841               	movf	controller@n,w
 15163  2C7E  31A0  2002  31AC   	fcall	___bmul
 15164  2C81  3EB2               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15165  2C82  0086               	movwf	6
 15166  2C83  3002               	movlw	2	; select bank5/6
 15167  2C84  0087               	movwf	7
 15168  2C85  0801               	movf	1,w
 15169  2C86  0140               	movlb	0	; select bank0
 15170  2C87  00B9               	movwf	??_controller+1
 15171  2C88  01BA               	clrf	??_controller+2
 15172  2C89  01BB               	clrf	??_controller+3
 15173  2C8A  01BC               	clrf	??_controller+4
 15174  2C8B  083C               	movf	??_controller+4,w
 15175  2C8C  0240               	subwf	controller@tick+3,w
 15176  2C8D  1D03               	skipz
 15177  2C8E  2C99               	goto	u9995
 15178  2C8F  083B               	movf	??_controller+3,w
 15179  2C90  023F               	subwf	controller@tick+2,w
 15180  2C91  1D03               	skipz
 15181  2C92  2C99               	goto	u9995
 15182  2C93  083A               	movf	??_controller+2,w
 15183  2C94  023E               	subwf	controller@tick+1,w
 15184  2C95  1D03               	skipz
 15185  2C96  2C99               	goto	u9995
 15186  2C97  0839               	movf	??_controller+1,w
 15187  2C98  023D               	subwf	controller@tick,w
 15188  2C99                     u9995:	
 15189  2C99  1803               	skipnc
 15190  2C9A  2C9E               	goto	l8380
 15191                           
 15192                           ;system.c: 551:     setChannelSwitch(virtChannels[n].phyChanNum, 1);
 15193  2C9B  01B1               	clrf	setChannelSwitch@state
 15194  2C9C  0AB1               	incf	setChannelSwitch@state,f
 15195  2C9D  2C9F               	goto	L7
 15196  2C9E                     l8380:	
 15197                           
 15198                           ;system.c: 553:     setChannelSwitch(virtChannels[n].phyChanNum, 0);
 15199  2C9E  01B1               	clrf	setChannelSwitch@state
 15200  2C9F                     L7:	
 15201  2C9F  3009               	movlw	9
 15202  2CA0  00B8               	movwf	??_controller
 15203  2CA1  0838               	movf	??_controller,w
 15204  2CA2  00AD               	movwf	___bmul@multiplicand
 15205  2CA3  0841               	movf	controller@n,w
 15206  2CA4  31A0  2002  31AC   	fcall	___bmul
 15207  2CA7  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15208  2CA8  0086               	movwf	6
 15209  2CA9  3002               	movlw	2	; select bank5/6
 15210  2CAA  0087               	movwf	7
 15211  2CAB  0801               	movf	1,w
 15212  2CAC  31B5  2571  31AC   	fcall	_setChannelSwitch
 15213                           
 15214                           ;system.c: 554:   }
 15215  2CAF  3001               	movlw	1
 15216  2CB0  0140               	movlb	0	; select bank0
 15217  2CB1  00B8               	movwf	??_controller
 15218  2CB2  0838               	movf	??_controller,w
 15219  2CB3  07C1               	addwf	controller@n,f
 15220  2CB4  3004               	movlw	4
 15221  2CB5  0241               	subwf	controller@n,w
 15222  2CB6  1C03               	skipc
 15223  2CB7  2C57               	goto	l8374
 15224                           
 15225                           ;system.c: 555:   __nop();
 15226  2CB8  0000               	nop
 15227                           
 15228                           ;system.c: 556:  } else {
 15229  2CB9  2CBD               	goto	l8386
 15230  2CBA                     l932:	
 15231                           
 15232                           ;system.c: 557:   idle = 1;
 15233  2CBA  0143               	movlb	3	; select bank3
 15234  2CBB  01E4               	clrf	controller@idle^(0+384)
 15235  2CBC  0AE4               	incf	controller@idle^(0+384),f
 15236  2CBD                     l8386:	
 15237                           
 15238                           ;system.c: 560:  return idle;
 15239  2CBD  0143               	movlb	3	; select bank3
 15240  2CBE  0864               	movf	controller@idle^(0+384),w
 15241  2CBF  0008               	return
 15242  2CC0                     __end_of_controller:	
 15243                           
 15244                           	psect	text35
 15245  24D9                     __ptext35:	
 15246 ;; *************** function _checkSensor *****************
 15247 ;; Defined at:
 15248 ;;		line 302 in file "system.c"
 15249 ;; Parameters:    Size  Location     Type
 15250 ;;  data            2   30[BANK1 ] PTR struct .
 15251 ;;		 -> data(166), 
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;  dp              1   71[BANK0 ] PTR struct .
 15254 ;;		 -> dataPacket(15), 
 15255 ;; Return value:  Size  Location     Type
 15256 ;;                  1    wreg      unsigned char 
 15257 ;; Registers used:
 15258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15259 ;; Tracked objects:
 15260 ;;		On entry : 0/0
 15261 ;;		On exit  : 0/0
 15262 ;;		Unchanged: 0/0
 15263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15264 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15266 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15267 ;;      Totals:         0       1       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15268 ;;Total ram usage:        7 bytes
 15269 ;; Hardware stack levels used:    1
 15270 ;; Hardware stack levels required when called:    5
 15271 ;; This function calls:
 15272 ;;		___flge
 15273 ;;		_error
 15274 ;;		_getDataPacket
 15275 ;;		_timeNow
 15276 ;;		_timeSince
 15277 ;;		_uartIsDataReady
 15278 ;;		_uartReset
 15279 ;;		_uartSendByte
 15280 ;; This function is called by:
 15281 ;;		_main
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           
 15286                           ;psect for function _checkSensor
 15287  24D9                     _checkSensor:	
 15288                           
 15289                           ;system.c: 302: uint8_t checkSensor(t_globalData *data);system.c: 303: {;system.c: 304: 
      +                           t_dataPacket *dp;;system.c: 305:  static uint32_t sensorUpdateInterval = 0;;system.c: 3
      +                          06:  static uint32_t sensorTimeout = 0;;system.c: 307:  static uint8_t state = 0;;system
      +                          .c: 310:  if ((data->tempAux < -30) || (data->tempAux > 60)) {
 15290                           
 15291                           ;incstack = 0
 15292                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15293  24D9  0141               	movlb	1	; select bank1
 15294  24DA  083E               	movf	checkSensor@data^(0+128),w
 15295  24DB  0086               	movwf	6
 15296  24DC  083F               	movf	(checkSensor@data+1)^(0+128),w
 15297  24DD  0087               	movwf	7
 15298  24DE  314D               	addfsr 1,13
 15299  24DF  3F40               	moviw [0]fsr1
 15300  24E0  00B2               	movwf	___flge@ff1^(0+128)
 15301  24E1  3F41               	moviw [1]fsr1
 15302  24E2  00B3               	movwf	(___flge@ff1+1)^(0+128)
 15303  24E3  3F42               	moviw [2]fsr1
 15304  24E4  00B4               	movwf	(___flge@ff1+2)^(0+128)
 15305  24E5  3F43               	moviw [3]fsr1
 15306  24E6  00B5               	movwf	(___flge@ff1+3)^(0+128)
 15307  24E7  30C1               	movlw	193
 15308  24E8  00B9               	movwf	(___flge@ff2+3)^(0+128)
 15309  24E9  30F0               	movlw	240
 15310  24EA  00B8               	movwf	(___flge@ff2+2)^(0+128)
 15311  24EB  3000               	movlw	0
 15312  24EC  00B7               	movwf	(___flge@ff2+1)^(0+128)
 15313  24ED  3000               	movlw	0
 15314  24EE  00B6               	movwf	___flge@ff2^(0+128)
 15315  24EF  31AA  2277  31A4   	fcall	___flge
 15316  24F2  1C03               	btfss	3,0
 15317  24F3  2D0F               	goto	l6030
 15318  24F4  3042               	movlw	66
 15319  24F5  0141               	movlb	1	; select bank1
 15320  24F6  00B5               	movwf	(___flge@ff1+3)^(0+128)
 15321  24F7  3070               	movlw	112
 15322  24F8  00B4               	movwf	(___flge@ff1+2)^(0+128)
 15323  24F9  3000               	movlw	0
 15324  24FA  00B3               	movwf	(___flge@ff1+1)^(0+128)
 15325  24FB  3000               	movlw	0
 15326  24FC  00B2               	movwf	___flge@ff1^(0+128)
 15327  24FD  083E               	movf	checkSensor@data^(0+128),w
 15328  24FE  0086               	movwf	6
 15329  24FF  083F               	movf	(checkSensor@data+1)^(0+128),w
 15330  2500  0087               	movwf	7
 15331  2501  314D               	addfsr 1,13
 15332  2502  3F40               	moviw [0]fsr1
 15333  2503  00B6               	movwf	___flge@ff2^(0+128)
 15334  2504  3F41               	moviw [1]fsr1
 15335  2505  00B7               	movwf	(___flge@ff2+1)^(0+128)
 15336  2506  3F42               	moviw [2]fsr1
 15337  2507  00B8               	movwf	(___flge@ff2+2)^(0+128)
 15338  2508  3F43               	moviw [3]fsr1
 15339  2509  00B9               	movwf	(___flge@ff2+3)^(0+128)
 15340  250A  31AA  2277  31A4   	fcall	___flge
 15341  250D  1803               	btfsc	3,0
 15342  250E  2D18               	goto	l6032
 15343  250F                     l6030:	
 15344                           
 15345                           ;system.c: 311:   data->status.AUX_SENSOR_OK = 0;
 15346  250F  0141               	movlb	1	; select bank1
 15347  2510  083E               	movf	checkSensor@data^(0+128),w
 15348  2511  3E29               	addlw	41
 15349  2512  0086               	movwf	6
 15350  2513  3000               	movlw	0
 15351  2514  3D3F               	addwfc	(checkSensor@data+1)^(0+128),w
 15352  2515  0087               	movwf	7
 15353  2516  1201               	bcf	1,4
 15354                           
 15355                           ;system.c: 312:  } else
 15356  2517  2E49               	goto	l6084
 15357  2518                     l6032:	
 15358                           
 15359                           ;system.c: 313:   data->status.AUX_SENSOR_OK = 1;
 15360  2518  0141               	movlb	1	; select bank1
 15361  2519  083E               	movf	checkSensor@data^(0+128),w
 15362  251A  3E29               	addlw	41
 15363  251B  0086               	movwf	6
 15364  251C  3000               	movlw	0
 15365  251D  3D3F               	addwfc	(checkSensor@data+1)^(0+128),w
 15366  251E  0087               	movwf	7
 15367  251F  1601               	bsf	1,4
 15368  2520  2E49               	goto	l6084
 15369  2521                     l6034:	
 15370                           
 15371                           ;system.c: 318:   if (timeSince(sensorUpdateInterval) >= 100) {
 15372  2521  0144               	movlb	4	; select bank4
 15373  2522  082B               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
 15374  2523  0140               	movlb	0	; select bank0
 15375  2524  00AB               	movwf	timeSince@since+3
 15376  2525  0144               	movlb	4	; select bank4
 15377  2526  082A               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
 15378  2527  0140               	movlb	0	; select bank0
 15379  2528  00AA               	movwf	timeSince@since+2
 15380  2529  0144               	movlb	4	; select bank4
 15381  252A  0829               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
 15382  252B  0140               	movlb	0	; select bank0
 15383  252C  00A9               	movwf	timeSince@since+1
 15384  252D  0144               	movlb	4	; select bank4
 15385  252E  0828               	movf	checkSensor@sensorUpdateInterval^(0+512),w
 15386  252F  0140               	movlb	0	; select bank0
 15387  2530  00A8               	movwf	timeSince@since
 15388  2531  31A8  2002  31A4   	fcall	_timeSince
 15389  2534  0140               	movlb	0	; select bank0
 15390  2535  082B               	movf	?_timeSince+3,w
 15391  2536  1D03               	btfss	3,2
 15392  2537  2D42               	goto	l6036
 15393  2538  082A               	movf	?_timeSince+2,w
 15394  2539  1D03               	btfss	3,2
 15395  253A  2D42               	goto	l6036
 15396  253B  0829               	movf	?_timeSince+1,w
 15397  253C  1D03               	btfss	3,2
 15398  253D  2D42               	goto	l6036
 15399  253E  3064               	movlw	100
 15400  253F  0228               	subwf	?_timeSince,w
 15401  2540  1C03               	btfss	3,0
 15402  2541  2E5B               	goto	l6086
 15403  2542                     l6036:	
 15404                           
 15405                           ;system.c: 319:    sensorUpdateInterval = sensorTimeout = timeNow();
 15406  2542  31B1  216D  31A4   	fcall	_timeNow
 15407  2545  0140               	movlb	0	; select bank0
 15408  2546  0827               	movf	?_timeNow+3,w
 15409  2547  0144               	movlb	4	; select bank4
 15410  2548  00A7               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
 15411  2549  0140               	movlb	0	; select bank0
 15412  254A  0826               	movf	?_timeNow+2,w
 15413  254B  0144               	movlb	4	; select bank4
 15414  254C  00A6               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
 15415  254D  0140               	movlb	0	; select bank0
 15416  254E  0825               	movf	?_timeNow+1,w
 15417  254F  0144               	movlb	4	; select bank4
 15418  2550  00A5               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
 15419  2551  0140               	movlb	0	; select bank0
 15420  2552  0824               	movf	?_timeNow,w
 15421  2553  0144               	movlb	4	; select bank4
 15422  2554  00A4               	movwf	checkSensor@sensorTimeout^(0+512)
 15423  2555  0827               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 15424  2556  00AB               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
 15425  2557  0826               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 15426  2558  00AA               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
 15427  2559  0825               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 15428  255A  00A9               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
 15429  255B  0824               	movf	checkSensor@sensorTimeout^(0+512),w
 15430  255C  00A8               	movwf	checkSensor@sensorUpdateInterval^(0+512)
 15431                           
 15432                           ;system.c: 320:    uartSendByte('?');
 15433  255D  303F               	movlw	63
 15434  255E  31B1  211F  31A4   	fcall	_uartSendByte
 15435                           
 15436                           ;system.c: 321:    state = 1;
 15437  2561  0143               	movlb	3	; select bank3
 15438  2562  01E5               	clrf	checkSensor@state^(0+384)
 15439  2563  0AE5               	incf	checkSensor@state^(0+384),f
 15440  2564  2E5B               	goto	l6086
 15441  2565                     l6042:	
 15442                           
 15443                           ;system.c: 326:   if (timeSince(sensorTimeout) > 20) {
 15444  2565  0144               	movlb	4	; select bank4
 15445  2566  0827               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 15446  2567  0140               	movlb	0	; select bank0
 15447  2568  00AB               	movwf	timeSince@since+3
 15448  2569  0144               	movlb	4	; select bank4
 15449  256A  0826               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 15450  256B  0140               	movlb	0	; select bank0
 15451  256C  00AA               	movwf	timeSince@since+2
 15452  256D  0144               	movlb	4	; select bank4
 15453  256E  0825               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 15454  256F  0140               	movlb	0	; select bank0
 15455  2570  00A9               	movwf	timeSince@since+1
 15456  2571  0144               	movlb	4	; select bank4
 15457  2572  0824               	movf	checkSensor@sensorTimeout^(0+512),w
 15458  2573  0140               	movlb	0	; select bank0
 15459  2574  00A8               	movwf	timeSince@since
 15460  2575  31A8  2002  31A4   	fcall	_timeSince
 15461  2578  0140               	movlb	0	; select bank0
 15462  2579  082B               	movf	?_timeSince+3,w
 15463  257A  1D03               	btfss	3,2
 15464  257B  2D86               	goto	l6044
 15465  257C  082A               	movf	?_timeSince+2,w
 15466  257D  1D03               	btfss	3,2
 15467  257E  2D86               	goto	l6044
 15468  257F  0829               	movf	?_timeSince+1,w
 15469  2580  1D03               	btfss	3,2
 15470  2581  2D86               	goto	l6044
 15471  2582  3015               	movlw	21
 15472  2583  0228               	subwf	?_timeSince,w
 15473  2584  1C03               	btfss	3,0
 15474  2585  2DA0               	goto	l6054
 15475  2586                     l6044:	
 15476                           
 15477                           ;system.c: 327:    if (data->status.SENSOR_OK) {
 15478  2586  0141               	movlb	1	; select bank1
 15479  2587  083E               	movf	checkSensor@data^(0+128),w
 15480  2588  3E29               	addlw	41
 15481  2589  0086               	movwf	6
 15482  258A  3000               	movlw	0
 15483  258B  3D3F               	addwfc	(checkSensor@data+1)^(0+128),w
 15484  258C  0087               	movwf	7
 15485  258D  1D81               	btfss	1,3
 15486  258E  2D9C               	goto	l6052
 15487                           
 15488                           ;system.c: 328:     data->status.SENSOR_OK = 0;
 15489  258F  083E               	movf	checkSensor@data^(0+128),w
 15490  2590  3E29               	addlw	41
 15491  2591  0086               	movwf	6
 15492  2592  3000               	movlw	0
 15493  2593  3D3F               	addwfc	(checkSensor@data+1)^(0+128),w
 15494  2594  0087               	movwf	7
 15495  2595  1181               	bcf	1,3
 15496                           
 15497                           ;system.c: 329:     state = 0;
 15498  2596  0143               	movlb	3	; select bank3
 15499  2597  01E5               	clrf	checkSensor@state^(0+384)
 15500                           
 15501                           ;system.c: 330:     error(WARN_SENSOR_TIMEOUT);
 15502  2598  3007               	movlw	7
 15503  2599  31B3  23F9  31A4   	fcall	_error
 15504  259C                     l6052:	
 15505                           
 15506                           ;system.c: 332:    uartReset();
 15507  259C  31B1  2102  31A4   	fcall	_uartReset
 15508                           
 15509                           ;system.c: 333:   } else if (uartIsDataReady()) {
 15510  259F  2E5B               	goto	l6086
 15511  25A0                     l6054:	
 15512  25A0  31B1  2134  31A4   	fcall	_uartIsDataReady
 15513  25A3  3A00               	xorlw	0
 15514  25A4  1903               	skipnz
 15515  25A5  2E5B               	goto	l6086
 15516                           
 15517                           ;system.c: 334:    dp = getDataPacket();
 15518  25A6  3180  2002  31A4   	fcall	_getDataPacket
 15519  25A9  0141               	movlb	1	; select bank1
 15520  25AA  00C0               	movwf	??_checkSensor^(0+128)
 15521  25AB  0840               	movf	??_checkSensor^(0+128),w
 15522  25AC  0140               	movlb	0	; select bank0
 15523  25AD  00E7               	movwf	checkSensor@dp
 15524                           
 15525                           ;system.c: 336:    if ((dp->header == 0xAA) && (dp->status == 1)) {
 15526  25AE  0867               	movf	checkSensor@dp,w
 15527  25AF  0086               	movwf	6
 15528  25B0  3002               	movlw	2	; select bank4/5
 15529  25B1  0087               	movwf	7
 15530  25B2  30AA               	movlw	170
 15531  25B3  0601               	xorwf	1,w
 15532  25B4  1D03               	btfss	3,2
 15533  25B5  2E2F               	goto	l6072
 15534  25B6  0867               	movf	checkSensor@dp,w
 15535  25B7  3E02               	addlw	2
 15536  25B8  0086               	movwf	6
 15537  25B9  3002               	movlw	2	; select bank4/5
 15538  25BA  0087               	movwf	7
 15539  25BB  0301               	decf	1,w
 15540  25BC  1D03               	btfss	3,2
 15541  25BD  2E2F               	goto	l6072
 15542                           
 15543                           ;system.c: 337:     data->tempC = dp->tempC;
 15544  25BE  0867               	movf	checkSensor@dp,w
 15545  25BF  3E03               	addlw	3
 15546  25C0  0086               	movwf	6
 15547  25C1  3002               	movlw	2	; select bank4/5
 15548  25C2  0087               	movwf	7
 15549  25C3  3F40               	moviw [0]fsr1
 15550  25C4  0141               	movlb	1	; select bank1
 15551  25C5  00C0               	movwf	??_checkSensor^(0+128)
 15552  25C6  3F41               	moviw [1]fsr1
 15553  25C7  00C1               	movwf	(??_checkSensor^(0+128)+1)
 15554  25C8  3F42               	moviw [2]fsr1
 15555  25C9  00C2               	movwf	(??_checkSensor^(0+128)+2)
 15556  25CA  3F43               	moviw [3]fsr1
 15557  25CB  00C3               	movwf	(??_checkSensor^(0+128)+3)
 15558  25CC  083E               	movf	checkSensor@data^(0+128),w
 15559  25CD  0086               	movwf	6
 15560  25CE  083F               	movf	(checkSensor@data+1)^(0+128),w
 15561  25CF  0087               	movwf	7
 15562  25D0  0840               	movf	??_checkSensor^(0+128),w
 15563  25D1  3FC0               	movwi [0]fsr1
 15564  25D2  0841               	movf	(??_checkSensor+1)^(0+128),w
 15565  25D3  3FC1               	movwi [1]fsr1
 15566  25D4  0842               	movf	(??_checkSensor+2)^(0+128),w
 15567  25D5  3FC2               	movwi [2]fsr1
 15568  25D6  0843               	movf	(??_checkSensor+3)^(0+128),w
 15569  25D7  3FC3               	movwi [3]fsr1
 15570                           
 15571                           ;system.c: 338:     data->relHum = dp->relHum;
 15572  25D8  0140               	movlb	0	; select bank0
 15573  25D9  0867               	movf	checkSensor@dp,w
 15574  25DA  3E07               	addlw	7
 15575  25DB  0086               	movwf	6
 15576  25DC  3002               	movlw	2	; select bank4/5
 15577  25DD  0087               	movwf	7
 15578  25DE  3F40               	moviw [0]fsr1
 15579  25DF  0141               	movlb	1	; select bank1
 15580  25E0  00C0               	movwf	??_checkSensor^(0+128)
 15581  25E1  3F41               	moviw [1]fsr1
 15582  25E2  00C1               	movwf	(??_checkSensor^(0+128)+1)
 15583  25E3  3F42               	moviw [2]fsr1
 15584  25E4  00C2               	movwf	(??_checkSensor^(0+128)+2)
 15585  25E5  3F43               	moviw [3]fsr1
 15586  25E6  00C3               	movwf	(??_checkSensor^(0+128)+3)
 15587  25E7  083E               	movf	checkSensor@data^(0+128),w
 15588  25E8  0086               	movwf	6
 15589  25E9  083F               	movf	(checkSensor@data+1)^(0+128),w
 15590  25EA  0087               	movwf	7
 15591  25EB  3144               	addfsr 1,4
 15592  25EC  0840               	movf	??_checkSensor^(0+128),w
 15593  25ED  3FC0               	movwi [0]fsr1
 15594  25EE  0841               	movf	(??_checkSensor+1)^(0+128),w
 15595  25EF  3FC1               	movwi [1]fsr1
 15596  25F0  0842               	movf	(??_checkSensor+2)^(0+128),w
 15597  25F1  3FC2               	movwi [2]fsr1
 15598  25F2  0843               	movf	(??_checkSensor+3)^(0+128),w
 15599  25F3  3FC3               	movwi [3]fsr1
 15600                           
 15601                           ;system.c: 339:     data->dewPointC = dp->dewPointC;
 15602  25F4  0140               	movlb	0	; select bank0
 15603  25F5  0867               	movf	checkSensor@dp,w
 15604  25F6  3E0B               	addlw	11
 15605  25F7  0086               	movwf	6
 15606  25F8  3002               	movlw	2	; select bank4/5
 15607  25F9  0087               	movwf	7
 15608  25FA  3F40               	moviw [0]fsr1
 15609  25FB  0141               	movlb	1	; select bank1
 15610  25FC  00C0               	movwf	??_checkSensor^(0+128)
 15611  25FD  3F41               	moviw [1]fsr1
 15612  25FE  00C1               	movwf	(??_checkSensor^(0+128)+1)
 15613  25FF  3F42               	moviw [2]fsr1
 15614  2600  00C2               	movwf	(??_checkSensor^(0+128)+2)
 15615  2601  3F43               	moviw [3]fsr1
 15616  2602  00C3               	movwf	(??_checkSensor^(0+128)+3)
 15617  2603  083E               	movf	checkSensor@data^(0+128),w
 15618  2604  0086               	movwf	6
 15619  2605  083F               	movf	(checkSensor@data+1)^(0+128),w
 15620  2606  0087               	movwf	7
 15621  2607  3148               	addfsr 1,8
 15622  2608  0840               	movf	??_checkSensor^(0+128),w
 15623  2609  3FC0               	movwi [0]fsr1
 15624  260A  0841               	movf	(??_checkSensor+1)^(0+128),w
 15625  260B  3FC1               	movwi [1]fsr1
 15626  260C  0842               	movf	(??_checkSensor+2)^(0+128),w
 15627  260D  3FC2               	movwi [2]fsr1
 15628  260E  0843               	movf	(??_checkSensor+3)^(0+128),w
 15629  260F  3FC3               	movwi [3]fsr1
 15630                           
 15631                           ;system.c: 340:     data->sensorVersion = dp->version;
 15632  2610  0140               	movlb	0	; select bank0
 15633  2611  0A67               	incf	checkSensor@dp,w
 15634  2612  0086               	movwf	6
 15635  2613  3002               	movlw	2	; select bank4/5
 15636  2614  0087               	movwf	7
 15637  2615  0801               	movf	1,w
 15638  2616  0141               	movlb	1	; select bank1
 15639  2617  00C0               	movwf	??_checkSensor^(0+128)
 15640  2618  083E               	movf	checkSensor@data^(0+128),w
 15641  2619  3E0C               	addlw	12
 15642  261A  00C1               	movwf	(??_checkSensor+1)^(0+128)
 15643  261B  3000               	movlw	0
 15644  261C  3D3F               	addwfc	(checkSensor@data+1)^(0+128),w
 15645  261D  00C2               	movwf	(??_checkSensor+2)^(0+128)
 15646  261E  0841               	movf	(??_checkSensor+1)^(0+128),w
 15647  261F  0086               	movwf	6
 15648  2620  0842               	movf	(??_checkSensor+2)^(0+128),w
 15649  2621  0087               	movwf	7
 15650  2622  0840               	movf	??_checkSensor^(0+128),w
 15651  2623  0081               	movwf	1
 15652                           
 15653                           ;system.c: 341:     data->status.SENSOR_OK = 1;
 15654  2624  083E               	movf	checkSensor@data^(0+128),w
 15655  2625  3E29               	addlw	41
 15656  2626  0086               	movwf	6
 15657  2627  3000               	movlw	0
 15658  2628  3D3F               	addwfc	(checkSensor@data+1)^(0+128),w
 15659  2629  0087               	movwf	7
 15660  262A  1581               	bsf	1,3
 15661                           
 15662                           ;system.c: 342:     state = 0;
 15663  262B  0143               	movlb	3	; select bank3
 15664  262C  01E5               	clrf	checkSensor@state^(0+384)
 15665                           
 15666                           ;system.c: 344:     return 1;
 15667  262D  3001               	movlw	1
 15668  262E  0008               	return
 15669  262F                     l6072:	
 15670                           
 15671                           ;system.c: 347:     if (data->status.SENSOR_OK) {
 15672  262F  0141               	movlb	1	; select bank1
 15673  2630  083E               	movf	checkSensor@data^(0+128),w
 15674  2631  3E29               	addlw	41
 15675  2632  0086               	movwf	6
 15676  2633  3000               	movlw	0
 15677  2634  3D3F               	addwfc	(checkSensor@data+1)^(0+128),w
 15678  2635  0087               	movwf	7
 15679  2636  1D81               	btfss	1,3
 15680  2637  2E43               	goto	l6078
 15681                           
 15682                           ;system.c: 348:      data->status.SENSOR_OK = 0;
 15683  2638  083E               	movf	checkSensor@data^(0+128),w
 15684  2639  3E29               	addlw	41
 15685  263A  0086               	movwf	6
 15686  263B  3000               	movlw	0
 15687  263C  3D3F               	addwfc	(checkSensor@data+1)^(0+128),w
 15688  263D  0087               	movwf	7
 15689  263E  1181               	bcf	1,3
 15690                           
 15691                           ;system.c: 349:      error(WARN_SENSOR_CHECKSUM);
 15692  263F  3008               	movlw	8
 15693  2640  31B3  23F9  31A4   	fcall	_error
 15694  2643                     l6078:	
 15695                           
 15696                           ;system.c: 351:     uartReset();
 15697  2643  31B1  2102  31A4   	fcall	_uartReset
 15698  2646                     l6080:	
 15699                           
 15700                           ;system.c: 353:    state = 0;
 15701  2646  0143               	movlb	3	; select bank3
 15702  2647  01E5               	clrf	checkSensor@state^(0+384)
 15703  2648  2E5B               	goto	l6086
 15704  2649                     l6084:	
 15705  2649  0143               	movlb	3	; select bank3
 15706  264A  0865               	movf	checkSensor@state^(0+384),w
 15707  264B  0141               	movlb	1	; select bank1
 15708  264C  00C0               	movwf	??_checkSensor^(0+128)
 15709  264D  01C1               	clrf	(??_checkSensor^(0+128)+1)
 15710                           
 15711                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15712                           ; Switch size 1, requested type "simple"
 15713                           ; Number of cases is 1, Range of values is 0 to 0
 15714                           ; switch strategies available:
 15715                           ; Name         Instructions Cycles
 15716                           ; simple_byte            4     3 (average)
 15717                           ; direct_byte            8     6 (fixed)
 15718                           ; jumptable            260     6 (fixed)
 15719                           ;	Chosen strategy is simple_byte
 15720  264E  0841               	movf	(??_checkSensor+1)^(0+128),w
 15721  264F  3A00               	xorlw	0	; case 0
 15722  2650  1903               	skipnz
 15723  2651  2E53               	goto	l8674
 15724  2652  2E46               	goto	l6080
 15725  2653                     l8674:	
 15726                           
 15727                           ; Switch size 1, requested type "simple"
 15728                           ; Number of cases is 2, Range of values is 0 to 1
 15729                           ; switch strategies available:
 15730                           ; Name         Instructions Cycles
 15731                           ; simple_byte            7     4 (average)
 15732                           ; direct_byte           10     6 (fixed)
 15733                           ; jumptable            260     6 (fixed)
 15734                           ;	Chosen strategy is simple_byte
 15735  2653  0840               	movf	??_checkSensor^(0+128),w
 15736  2654  3A00               	xorlw	0	; case 0
 15737  2655  1903               	skipnz
 15738  2656  2D21               	goto	l6034
 15739  2657  3A01               	xorlw	1	; case 1
 15740  2658  1903               	skipnz
 15741  2659  2D65               	goto	l6042
 15742  265A  2E46               	goto	l6080
 15743  265B                     l6086:	
 15744                           
 15745                           ;system.c: 360:  return 0;
 15746  265B  3000               	movlw	0
 15747  265C  0008               	return
 15748  265D                     __end_of_checkSensor:	
 15749                           
 15750                           	psect	text36
 15751  311F                     __ptext36:	
 15752 ;; *************** function _uartSendByte *****************
 15753 ;; Defined at:
 15754 ;;		line 29 in file "uart.c"
 15755 ;; Parameters:    Size  Location     Type
 15756 ;;  s               1    wreg     unsigned char 
 15757 ;; Auto vars:     Size  Location     Type
 15758 ;;  s               1    4[BANK0 ] unsigned char 
 15759 ;; Return value:  Size  Location     Type
 15760 ;;                  1    wreg      void 
 15761 ;; Registers used:
 15762 ;;		wreg
 15763 ;; Tracked objects:
 15764 ;;		On entry : 0/0
 15765 ;;		On exit  : 0/0
 15766 ;;		Unchanged: 0/0
 15767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15771 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15772 ;;Total ram usage:        1 bytes
 15773 ;; Hardware stack levels used:    1
 15774 ;; Hardware stack levels required when called:    3
 15775 ;; This function calls:
 15776 ;;		Nothing
 15777 ;; This function is called by:
 15778 ;;		_checkSensor
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           
 15783                           ;psect for function _uartSendByte
 15784  311F                     _uartSendByte:	
 15785                           
 15786                           ;incstack = 0
 15787                           ; Regs used in _uartSendByte: [wreg]
 15788                           ;uartSendByte@s stored from wreg
 15789  311F  0140               	movlb	0	; select bank0
 15790  3120  00A4               	movwf	uartSendByte@s
 15791                           
 15792                           ;uart.c: 29: void uartSendByte(char s);uart.c: 30: {;uart.c: 31:  TX1REG = s;
 15793  3121  0824               	movf	uartSendByte@s,w
 15794  3122  0142               	movlb	2	; select bank2
 15795  3123  009A               	movwf	26	;volatile
 15796                           
 15797                           ;uart.c: 32:  __nop();
 15798  3124  0000               	nop
 15799  3125                     l365:	
 15800                           ;uart.c: 33:  while (!PIR3bits.TX1IF);
 15801                           
 15802  3125  014E               	movlb	14	; select bank14
 15803  3126  1A0F               	btfsc	15,4	;volatile
 15804  3127  0008               	return
 15805  3128  2925               	goto	l365
 15806  3129                     __end_of_uartSendByte:	
 15807                           
 15808                           	psect	text37
 15809  3102                     __ptext37:	
 15810 ;; *************** function _uartReset *****************
 15811 ;; Defined at:
 15812 ;;		line 78 in file "uart.c"
 15813 ;; Parameters:    Size  Location     Type
 15814 ;;		None
 15815 ;; Auto vars:     Size  Location     Type
 15816 ;;  dump            1    0        unsigned char 
 15817 ;; Return value:  Size  Location     Type
 15818 ;;                  1    wreg      void 
 15819 ;; Registers used:
 15820 ;;		wreg, status,2
 15821 ;; Tracked objects:
 15822 ;;		On entry : 0/0
 15823 ;;		On exit  : 0/0
 15824 ;;		Unchanged: 0/0
 15825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15829 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15830 ;;Total ram usage:        1 bytes
 15831 ;; Hardware stack levels used:    1
 15832 ;; Hardware stack levels required when called:    3
 15833 ;; This function calls:
 15834 ;;		Nothing
 15835 ;; This function is called by:
 15836 ;;		_checkSensor
 15837 ;; This function uses a non-reentrant model
 15838 ;;
 15839                           
 15840                           
 15841                           ;psect for function _uartReset
 15842  3102                     _uartReset:	
 15843                           
 15844                           ;incstack = 0
 15845                           ; Regs used in _uartReset: [wreg+status,2]
 15846  3102  0142               	movlb	2	; select bank2
 15847  3103  0819               	movf	25,w	;volatile
 15848                           
 15849                           ;uart.c: 82:  RC1STAbits.CREN = 0;
 15850  3104  121D               	bcf	29,4	;volatile
 15851                           
 15852                           ;uart.c: 83:  RC1STAbits.CREN = 1;
 15853  3105  161D               	bsf	29,4	;volatile
 15854                           
 15855                           ;uart.c: 84:  RC1STAbits.SPEN = 0;
 15856  3106  139D               	bcf	29,7	;volatile
 15857                           
 15858                           ;uart.c: 85:  RC1STAbits.SPEN = 1;
 15859  3107  179D               	bsf	29,7	;volatile
 15860                           
 15861                           ;uart.c: 86:  rxCount = 0;
 15862  3108  0140               	movlb	0	; select bank0
 15863  3109  01EB               	clrf	_rxCount	;volatile
 15864  310A  0008               	return
 15865  310B                     __end_of_uartReset:	
 15866                           
 15867                           	psect	text38
 15868  3134                     __ptext38:	
 15869 ;; *************** function _uartIsDataReady *****************
 15870 ;; Defined at:
 15871 ;;		line 13 in file "uart.c"
 15872 ;; Parameters:    Size  Location     Type
 15873 ;;		None
 15874 ;; Auto vars:     Size  Location     Type
 15875 ;;  ret             1    5[BANK0 ] unsigned char 
 15876 ;; Return value:  Size  Location     Type
 15877 ;;                  1    wreg      unsigned char 
 15878 ;; Registers used:
 15879 ;;		wreg, status,2
 15880 ;; Tracked objects:
 15881 ;;		On entry : 0/0
 15882 ;;		On exit  : 0/0
 15883 ;;		Unchanged: 0/0
 15884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15889 ;;Total ram usage:        2 bytes
 15890 ;; Hardware stack levels used:    1
 15891 ;; Hardware stack levels required when called:    3
 15892 ;; This function calls:
 15893 ;;		Nothing
 15894 ;; This function is called by:
 15895 ;;		_checkSensor
 15896 ;; This function uses a non-reentrant model
 15897 ;;
 15898                           
 15899                           
 15900                           ;psect for function _uartIsDataReady
 15901  3134                     _uartIsDataReady:	
 15902                           
 15903                           ;uart.c: 15:  uint8_t ret = dataReadyFlag;
 15904                           
 15905                           ;incstack = 0
 15906                           ; Regs used in _uartIsDataReady: [wreg+status,2]
 15907  3134  0143               	movlb	3	; select bank3
 15908  3135  086B               	movf	_dataReadyFlag^(0+384),w	;volatile
 15909  3136  0140               	movlb	0	; select bank0
 15910  3137  00A4               	movwf	??_uartIsDataReady
 15911  3138  0824               	movf	??_uartIsDataReady,w
 15912  3139  00A5               	movwf	uartIsDataReady@ret
 15913                           
 15914                           ;uart.c: 16:  dataReadyFlag = 0;
 15915  313A  0143               	movlb	3	; select bank3
 15916  313B  01EB               	clrf	_dataReadyFlag^(0+384)	;volatile
 15917                           
 15918                           ;uart.c: 17:  return ret;
 15919  313C  0140               	movlb	0	; select bank0
 15920  313D  0825               	movf	uartIsDataReady@ret,w
 15921  313E  0008               	return
 15922  313F                     __end_of_uartIsDataReady:	
 15923                           
 15924                           	psect	text39
 15925  2802                     __ptext39:	
 15926 ;; *************** function _timeSince *****************
 15927 ;; Defined at:
 15928 ;;		line 21 in file "interrupt.c"
 15929 ;; Parameters:    Size  Location     Type
 15930 ;;  since           4    8[BANK0 ] unsigned long 
 15931 ;; Auto vars:     Size  Location     Type
 15932 ;;  now             4   20[BANK0 ] unsigned long 
 15933 ;; Return value:  Size  Location     Type
 15934 ;;                  4    8[BANK0 ] unsigned long 
 15935 ;; Registers used:
 15936 ;;		wreg, pclath, cstack
 15937 ;; Tracked objects:
 15938 ;;		On entry : 0/0
 15939 ;;		On exit  : 0/0
 15940 ;;		Unchanged: 0/0
 15941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15942 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15943 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15944 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15945 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15946 ;;Total ram usage:       16 bytes
 15947 ;; Hardware stack levels used:    1
 15948 ;; Hardware stack levels required when called:    4
 15949 ;; This function calls:
 15950 ;;		_timeNow
 15951 ;; This function is called by:
 15952 ;;		_main
 15953 ;;		_menu
 15954 ;;		_checkSensor
 15955 ;;		_controller
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           
 15960                           ;psect for function _timeSince
 15961  2802                     _timeSince:	
 15962                           
 15963                           ;interrupt.c: 21: uint32_t timeSince(uint32_t since);interrupt.c: 22: {;interrupt.c: 23:
      +                            uint32_t now = timeNow();
 15964                           
 15965                           ;incstack = 0
 15966                           ; Regs used in _timeSince: [wreg+pclath+cstack]
 15967  2802  31B1  216D  31A8   	fcall	_timeNow
 15968  2805  0140               	movlb	0	; select bank0
 15969  2806  0827               	movf	?_timeNow+3,w
 15970  2807  00B7               	movwf	timeSince@now+3
 15971  2808  0826               	movf	?_timeNow+2,w
 15972  2809  00B6               	movwf	timeSince@now+2
 15973  280A  0825               	movf	?_timeNow+1,w
 15974  280B  00B5               	movwf	timeSince@now+1
 15975  280C  0824               	movf	?_timeNow,w
 15976  280D  00B4               	movwf	timeSince@now
 15977                           
 15978                           ;interrupt.c: 24:  if (now >= since)
 15979  280E  082B               	movf	timeSince@since+3,w
 15980  280F  0237               	subwf	timeSince@now+3,w
 15981  2810  1D03               	skipz
 15982  2811  281C               	goto	u5735
 15983  2812  082A               	movf	timeSince@since+2,w
 15984  2813  0236               	subwf	timeSince@now+2,w
 15985  2814  1D03               	skipz
 15986  2815  281C               	goto	u5735
 15987  2816  0829               	movf	timeSince@since+1,w
 15988  2817  0235               	subwf	timeSince@now+1,w
 15989  2818  1D03               	skipz
 15990  2819  281C               	goto	u5735
 15991  281A  0828               	movf	timeSince@since,w
 15992  281B  0234               	subwf	timeSince@now,w
 15993  281C                     u5735:	
 15994  281C  1C03               	skipc
 15995  281D  2833               	goto	l5178
 15996                           
 15997                           ;interrupt.c: 25:   return (now - since);
 15998  281E  0828               	movf	timeSince@since,w
 15999  281F  0234               	subwf	timeSince@now,w
 16000  2820  00AC               	movwf	??_timeSince
 16001  2821  0829               	movf	timeSince@since+1,w
 16002  2822  3B35               	subwfb	timeSince@now+1,w
 16003  2823  00AD               	movwf	??_timeSince+1
 16004  2824  082A               	movf	timeSince@since+2,w
 16005  2825  3B36               	subwfb	timeSince@now+2,w
 16006  2826  00AE               	movwf	??_timeSince+2
 16007  2827  082B               	movf	timeSince@since+3,w
 16008  2828  3B37               	subwfb	timeSince@now+3,w
 16009  2829  00AF               	movwf	??_timeSince+3
 16010  282A  082F               	movf	??_timeSince+3,w
 16011  282B  00AB               	movwf	?_timeSince+3
 16012  282C  082E               	movf	??_timeSince+2,w
 16013  282D  00AA               	movwf	?_timeSince+2
 16014  282E  082D               	movf	??_timeSince+1,w
 16015  282F  00A9               	movwf	?_timeSince+1
 16016  2830  082C               	movf	??_timeSince,w
 16017  2831  00A8               	movwf	?_timeSince
 16018  2832  0008               	return
 16019  2833                     l5178:	
 16020                           
 16021                           ;interrupt.c: 27:  return (now + (1 + 1000000000UL - since));
 16022  2833  3001               	movlw	1
 16023  2834  00AC               	movwf	??_timeSince
 16024  2835  30CA               	movlw	202
 16025  2836  00AD               	movwf	??_timeSince+1
 16026  2837  309A               	movlw	154
 16027  2838  00AE               	movwf	??_timeSince+2
 16028  2839  303B               	movlw	59
 16029  283A  00AF               	movwf	??_timeSince+3
 16030  283B  0828               	movf	timeSince@since,w
 16031  283C  0234               	subwf	timeSince@now,w
 16032  283D  00B0               	movwf	??_timeSince+4
 16033  283E  0829               	movf	timeSince@since+1,w
 16034  283F  3B35               	subwfb	timeSince@now+1,w
 16035  2840  00B1               	movwf	??_timeSince+5
 16036  2841  082A               	movf	timeSince@since+2,w
 16037  2842  3B36               	subwfb	timeSince@now+2,w
 16038  2843  00B2               	movwf	??_timeSince+6
 16039  2844  082B               	movf	timeSince@since+3,w
 16040  2845  3B37               	subwfb	timeSince@now+3,w
 16041  2846  00B3               	movwf	??_timeSince+7
 16042  2847  0830               	movf	??_timeSince+4,w
 16043  2848  07AC               	addwf	??_timeSince,f
 16044  2849  0831               	movf	??_timeSince+5,w
 16045  284A  3DAD               	addwfc	??_timeSince+1,f
 16046  284B  0832               	movf	??_timeSince+6,w
 16047  284C  3DAE               	addwfc	??_timeSince+2,f
 16048  284D  0833               	movf	??_timeSince+7,w
 16049  284E  3DAF               	addwfc	??_timeSince+3,f
 16050  284F  082F               	movf	??_timeSince+3,w
 16051  2850  00AB               	movwf	?_timeSince+3
 16052  2851  082E               	movf	??_timeSince+2,w
 16053  2852  00AA               	movwf	?_timeSince+2
 16054  2853  082D               	movf	??_timeSince+1,w
 16055  2854  00A9               	movwf	?_timeSince+1
 16056  2855  082C               	movf	??_timeSince,w
 16057  2856  00A8               	movwf	?_timeSince
 16058  2857  0008               	return
 16059  2858                     __end_of_timeSince:	
 16060                           
 16061                           	psect	text40
 16062  316D                     __ptext40:	
 16063 ;; *************** function _timeNow *****************
 16064 ;; Defined at:
 16065 ;;		line 13 in file "interrupt.c"
 16066 ;; Parameters:    Size  Location     Type
 16067 ;;		None
 16068 ;; Auto vars:     Size  Location     Type
 16069 ;;		None
 16070 ;; Return value:  Size  Location     Type
 16071 ;;                  4    4[BANK0 ] unsigned long 
 16072 ;; Registers used:
 16073 ;;		wreg
 16074 ;; Tracked objects:
 16075 ;;		On entry : 0/0
 16076 ;;		On exit  : 0/0
 16077 ;;		Unchanged: 0/0
 16078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16079 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16082 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16083 ;;Total ram usage:        4 bytes
 16084 ;; Hardware stack levels used:    1
 16085 ;; Hardware stack levels required when called:    3
 16086 ;; This function calls:
 16087 ;;		Nothing
 16088 ;; This function is called by:
 16089 ;;		_main
 16090 ;;		_timeSince
 16091 ;;		_checkSensor
 16092 ;;		_controller
 16093 ;; This function uses a non-reentrant model
 16094 ;;
 16095                           
 16096                           
 16097                           ;psect for function _timeNow
 16098  316D                     _timeNow:	
 16099                           
 16100                           ;interrupt.c: 15:  return tick100ms;
 16101                           
 16102                           ;incstack = 0
 16103                           ; Regs used in _timeNow: [wreg]
 16104  316D  0142               	movlb	2	; select bank2
 16105  316E  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 16106  316F  0140               	movlb	0	; select bank0
 16107  3170  00A7               	movwf	?_timeNow+3
 16108  3171  0142               	movlb	2	; select bank2
 16109  3172  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 16110  3173  0140               	movlb	0	; select bank0
 16111  3174  00A6               	movwf	?_timeNow+2
 16112  3175  0142               	movlb	2	; select bank2
 16113  3176  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 16114  3177  0140               	movlb	0	; select bank0
 16115  3178  00A5               	movwf	?_timeNow+1
 16116  3179  0142               	movlb	2	; select bank2
 16117  317A  0863               	movf	_tick100ms^(0+256),w	;volatile
 16118  317B  0140               	movlb	0	; select bank0
 16119  317C  00A4               	movwf	?_timeNow
 16120  317D  0008               	return
 16121  317E                     __end_of_timeNow:	
 16122                           
 16123                           	psect	text41
 16124  0002                     __ptext41:	
 16125 ;; *************** function _getDataPacket *****************
 16126 ;; Defined at:
 16127 ;;		line 22 in file "uart.c"
 16128 ;; Parameters:    Size  Location     Type
 16129 ;;		None
 16130 ;; Auto vars:     Size  Location     Type
 16131 ;;		None
 16132 ;; Return value:  Size  Location     Type
 16133 ;;                  1    wreg      PTR struct .
 16134 ;; Registers used:
 16135 ;;		wreg
 16136 ;; Tracked objects:
 16137 ;;		On entry : 0/0
 16138 ;;		On exit  : 0/0
 16139 ;;		Unchanged: 0/0
 16140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16145 ;;Total ram usage:        0 bytes
 16146 ;; Hardware stack levels used:    1
 16147 ;; Hardware stack levels required when called:    3
 16148 ;; This function calls:
 16149 ;;		Nothing
 16150 ;; This function is called by:
 16151 ;;		_checkSensor
 16152 ;; This function uses a non-reentrant model
 16153 ;;
 16154                           
 16155                           
 16156                           ;psect for function _getDataPacket
 16157  0002                     _getDataPacket:	
 16158                           
 16159                           ;uart.c: 24:  return &dataPacket;
 16160                           
 16161                           ;incstack = 0
 16162                           ; Regs used in _getDataPacket: [wreg]
 16163  0002  3030               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 16164  0003  0008               	return
 16165  0004                     __end_of_getDataPacket:	
 16166                           
 16167                           	psect	text42
 16168  1405                     __ptext42:	
 16169 ;; *************** function _checkChannelStatus *****************
 16170 ;; Defined at:
 16171 ;;		line 56 in file "system.c"
 16172 ;; Parameters:    Size  Location     Type
 16173 ;;  data            2   31[BANK1 ] PTR struct .
 16174 ;;		 -> data(166), 
 16175 ;; Auto vars:     Size  Location     Type
 16176 ;;  current         4   50[BANK1 ] float 
 16177 ;;  chData          2   55[BANK1 ] PTR struct .
 16178 ;;		 -> data.chData(124), data(166), 
 16179 ;;  avg             2   48[BANK1 ] unsigned short 
 16180 ;;  adc             2   37[BANK1 ] unsigned short 
 16181 ;;  channel         1   54[BANK1 ] unsigned char 
 16182 ;;  samples         1   47[BANK1 ] unsigned char 
 16183 ;; Return value:  Size  Location     Type
 16184 ;;                  1    wreg      unsigned char 
 16185 ;; Registers used:
 16186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16187 ;; Tracked objects:
 16188 ;;		On entry : 0/0
 16189 ;;		On exit  : 0/0
 16190 ;;		Unchanged: 0/0
 16191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16192 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16193 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16194 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16195 ;;      Totals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16196 ;;Total ram usage:       26 bytes
 16197 ;; Hardware stack levels used:    1
 16198 ;; Hardware stack levels required when called:    5
 16199 ;; This function calls:
 16200 ;;		___fldiv
 16201 ;;		___fleq
 16202 ;;		___flge
 16203 ;;		___flmul
 16204 ;;		___fltol
 16205 ;;		___wmul
 16206 ;;		___xxtofl
 16207 ;;		_ema
 16208 ;;		_error
 16209 ;;		_getAnalogValue
 16210 ;;		_getLoadSwitchFault
 16211 ;;		_setChannelSwitch
 16212 ;;		_setLoadSwitch
 16213 ;; This function is called by:
 16214 ;;		_main
 16215 ;; This function uses a non-reentrant model
 16216 ;;
 16217                           
 16218                           
 16219                           ;psect for function _checkChannelStatus
 16220  1405                     _checkChannelStatus:	
 16221                           
 16222                           ;system.c: 56: uint8_t checkChannelStatus(t_globalData *data);system.c: 57: {;system.c: 
      +                          58:  uint16_t adc, avg;;system.c: 59:  uint8_t channel, samples;;system.c: 60:  float cu
      +                          rrent;;system.c: 61:  t_channelData *chData;;system.c: 63:  for (channel = 0; channel < 
      +                          4; channel++) {
 16223                           
 16224                           ;incstack = 0
 16225                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16226  1405  0141               	movlb	1	; select bank1
 16227  1406  01D6               	clrf	checkChannelStatus@channel^(0+128)
 16228  1407                     l8184:	
 16229                           
 16230                           ;system.c: 65:   chData = &data->chData[channel];
 16231  1407  0856               	movf	checkChannelStatus@channel^(0+128),w
 16232  1408  00C1               	movwf	??_checkChannelStatus^(0+128)
 16233  1409  01C2               	clrf	(??_checkChannelStatus^(0+128)+1)
 16234  140A  0841               	movf	??_checkChannelStatus^(0+128),w
 16235  140B  0140               	movlb	0	; select bank0
 16236  140C  00B1               	movwf	___wmul@multiplier
 16237  140D  0141               	movlb	1	; select bank1
 16238  140E  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16239  140F  0140               	movlb	0	; select bank0
 16240  1410  00B2               	movwf	___wmul@multiplier+1
 16241  1411  301F               	movlw	31
 16242  1412  00B3               	movwf	___wmul@multiplicand
 16243  1413  3000               	movlw	0
 16244  1414  00B4               	movwf	___wmul@multiplicand+1
 16245  1415  31B1  21AD  3194   	fcall	___wmul
 16246  1418  0140               	movlb	0	; select bank0
 16247  1419  0831               	movf	?___wmul,w
 16248  141A  0141               	movlb	1	; select bank1
 16249  141B  073F               	addwf	checkChannelStatus@data^(0+128),w
 16250  141C  00C3               	movwf	(??_checkChannelStatus+2)^(0+128)
 16251  141D  0140               	movlb	0	; select bank0
 16252  141E  0832               	movf	?___wmul+1,w
 16253  141F  0141               	movlb	1	; select bank1
 16254  1420  3D40               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 16255  1421  00C4               	movwf	(??_checkChannelStatus+3)^(0+128)
 16256  1422  0843               	movf	(??_checkChannelStatus+2)^(0+128),w
 16257  1423  3E2A               	addlw	42
 16258  1424  00D7               	movwf	checkChannelStatus@chData^(0+128)
 16259  1425  3000               	movlw	0
 16260  1426  3D44               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 16261  1427  00D8               	movwf	(checkChannelStatus@chData+1)^(0+128)
 16262                           
 16263                           ;system.c: 67:   if (chData->status == CH_OVERCURRENT)
 16264  1428  0857               	movf	checkChannelStatus@chData^(0+128),w
 16265  1429  0086               	movwf	6
 16266  142A  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16267  142B  0087               	movwf	7
 16268  142C  315E               	addfsr 1,30
 16269  142D  3004               	movlw	4
 16270  142E  0601               	xorwf	1,w
 16271  142F  1903               	btfsc	3,2
 16272  1430  2FF6               	goto	l8270
 16273                           
 16274                           ;system.c: 70:   avg = data->chData[channel].current;
 16275  1431  301F               	movlw	31
 16276  1432  0140               	movlb	0	; select bank0
 16277  1433  00B3               	movwf	___wmul@multiplicand
 16278  1434  3000               	movlw	0
 16279  1435  00B4               	movwf	___wmul@multiplicand+1
 16280  1436  0141               	movlb	1	; select bank1
 16281  1437  0856               	movf	checkChannelStatus@channel^(0+128),w
 16282  1438  00C1               	movwf	??_checkChannelStatus^(0+128)
 16283  1439  01C2               	clrf	(??_checkChannelStatus^(0+128)+1)
 16284  143A  0841               	movf	??_checkChannelStatus^(0+128),w
 16285  143B  0140               	movlb	0	; select bank0
 16286  143C  00B1               	movwf	___wmul@multiplier
 16287  143D  0141               	movlb	1	; select bank1
 16288  143E  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16289  143F  0140               	movlb	0	; select bank0
 16290  1440  00B2               	movwf	___wmul@multiplier+1
 16291  1441  31B1  21AD  3194   	fcall	___wmul
 16292  1444  0140               	movlb	0	; select bank0
 16293  1445  0831               	movf	?___wmul,w
 16294  1446  0141               	movlb	1	; select bank1
 16295  1447  073F               	addwf	checkChannelStatus@data^(0+128),w
 16296  1448  00C3               	movwf	(??_checkChannelStatus+2)^(0+128)
 16297  1449  0140               	movlb	0	; select bank0
 16298  144A  0832               	movf	?___wmul+1,w
 16299  144B  0141               	movlb	1	; select bank1
 16300  144C  3D40               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 16301  144D  00C4               	movwf	(??_checkChannelStatus+3)^(0+128)
 16302  144E  0843               	movf	(??_checkChannelStatus+2)^(0+128),w
 16303  144F  3E2A               	addlw	42
 16304  1450  0086               	movwf	6
 16305  1451  3000               	movlw	0
 16306  1452  3D44               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 16307  1453  0087               	movwf	7
 16308  1454  3F40               	moviw [0]fsr1
 16309  1455  00B4               	movwf	___fltol@f1^(0+128)
 16310  1456  3F41               	moviw [1]fsr1
 16311  1457  00B5               	movwf	(___fltol@f1+1)^(0+128)
 16312  1458  3F42               	moviw [2]fsr1
 16313  1459  00B6               	movwf	(___fltol@f1+2)^(0+128)
 16314  145A  3F43               	moviw [3]fsr1
 16315  145B  00B7               	movwf	(___fltol@f1+3)^(0+128)
 16316  145C  31B7  2731  3194   	fcall	___fltol
 16317  145F  0141               	movlb	1	; select bank1
 16318  1460  0835               	movf	(?___fltol+1)^(0+128),w
 16319  1461  00D1               	movwf	(checkChannelStatus@avg+1)^(0+128)
 16320  1462  0834               	movf	?___fltol^(0+128),w
 16321  1463  00D0               	movwf	checkChannelStatus@avg^(0+128)
 16322                           
 16323                           ;system.c: 72:   setChannelSwitch(channel, 1);
 16324  1464  0140               	movlb	0	; select bank0
 16325  1465  01B1               	clrf	setChannelSwitch@state
 16326  1466  0AB1               	incf	setChannelSwitch@state,f
 16327  1467  0141               	movlb	1	; select bank1
 16328  1468  0856               	movf	checkChannelStatus@channel^(0+128),w
 16329  1469  31B5  2571  3194   	fcall	_setChannelSwitch
 16330                           
 16331                           ;system.c: 73:   samples = 0;
 16332  146C  0141               	movlb	1	; select bank1
 16333  146D  01CF               	clrf	checkChannelStatus@samples^(0+128)
 16334  146E                     l8196:	
 16335                           
 16336                           ;system.c: 75:    adc = getAnalogValue(0b010001);
 16337  146E  3011               	movlw	17
 16338  146F  31B1  21C9  3194   	fcall	_getAnalogValue
 16339  1472  0140               	movlb	0	; select bank0
 16340  1473  0825               	movf	?_getAnalogValue+1,w
 16341  1474  0141               	movlb	1	; select bank1
 16342  1475  00C6               	movwf	(checkChannelStatus@adc+1)^(0+128)
 16343  1476  0140               	movlb	0	; select bank0
 16344  1477  0824               	movf	?_getAnalogValue,w
 16345  1478  0141               	movlb	1	; select bank1
 16346  1479  00C5               	movwf	checkChannelStatus@adc^(0+128)
 16347                           
 16348                           ;system.c: 77:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 16349  147A  0846               	movf	(checkChannelStatus@adc+1)^(0+128),w
 16350  147B  0140               	movlb	0	; select bank0
 16351  147C  00B1               	movwf	ema@in+1
 16352  147D  0141               	movlb	1	; select bank1
 16353  147E  0845               	movf	checkChannelStatus@adc^(0+128),w
 16354  147F  0140               	movlb	0	; select bank0
 16355  1480  00B0               	movwf	ema@in
 16356  1481  0141               	movlb	1	; select bank1
 16357  1482  0851               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16358  1483  0140               	movlb	0	; select bank0
 16359  1484  00B3               	movwf	ema@average+1
 16360  1485  0141               	movlb	1	; select bank1
 16361  1486  0850               	movf	checkChannelStatus@avg^(0+128),w
 16362  1487  0140               	movlb	0	; select bank0
 16363  1488  00B2               	movwf	ema@average
 16364  1489  3000               	movlw	0
 16365  148A  00B7               	movwf	ema@alpha+3
 16366  148B  3000               	movlw	0
 16367  148C  00B6               	movwf	ema@alpha+2
 16368  148D  30B3               	movlw	179
 16369  148E  00B5               	movwf	ema@alpha+1
 16370  148F  3032               	movlw	50
 16371  1490  00B4               	movwf	ema@alpha
 16372  1491  31B7  2797  3194   	fcall	_ema
 16373  1494  0140               	movlb	0	; select bank0
 16374  1495  0831               	movf	?_ema+1,w
 16375  1496  0141               	movlb	1	; select bank1
 16376  1497  00D1               	movwf	(checkChannelStatus@avg+1)^(0+128)
 16377  1498  0140               	movlb	0	; select bank0
 16378  1499  0830               	movf	?_ema,w
 16379  149A  0141               	movlb	1	; select bank1
 16380  149B  00D0               	movwf	checkChannelStatus@avg^(0+128)
 16381                           
 16382                           ;system.c: 78:   } while (samples++ < 50);
 16383  149C  084F               	movf	checkChannelStatus@samples^(0+128),w
 16384  149D  0ACF               	incf	checkChannelStatus@samples^(0+128),f
 16385  149E  00C1               	movwf	??_checkChannelStatus^(0+128)
 16386  149F  3032               	movlw	50
 16387  14A0  0241               	subwf	??_checkChannelStatus^(0+128),w
 16388  14A1  1C03               	skipc
 16389  14A2  2C6E               	goto	l8196
 16390                           
 16391                           ;system.c: 79:   setChannelSwitch(channel, 0);
 16392  14A3  0140               	movlb	0	; select bank0
 16393  14A4  01B1               	clrf	setChannelSwitch@state
 16394  14A5  0141               	movlb	1	; select bank1
 16395  14A6  0856               	movf	checkChannelStatus@channel^(0+128),w
 16396  14A7  31B5  2571  3194   	fcall	_setChannelSwitch
 16397                           
 16398                           ;system.c: 82:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 16399  14AA  3045               	movlw	69
 16400  14AB  0140               	movlb	0	; select bank0
 16401  14AC  00E2               	movwf	___fldiv@a+3
 16402  14AD  301F               	movlw	31
 16403  14AE  00E1               	movwf	___fldiv@a+2
 16404  14AF  30D8               	movlw	216
 16405  14B0  00E0               	movwf	___fldiv@a+1
 16406  14B1  3000               	movlw	0
 16407  14B2  00DF               	movwf	___fldiv@a
 16408  14B3  3040               	movlw	64
 16409  14B4  00C8               	movwf	___flmul@b+3
 16410  14B5  30A0               	movlw	160
 16411  14B6  00C7               	movwf	___flmul@b+2
 16412  14B7  3000               	movlw	0
 16413  14B8  00C6               	movwf	___flmul@b+1
 16414  14B9  3000               	movlw	0
 16415  14BA  00C5               	movwf	___flmul@b
 16416  14BB  0141               	movlb	1	; select bank1
 16417  14BC  0850               	movf	checkChannelStatus@avg^(0+128),w
 16418  14BD  0140               	movlb	0	; select bank0
 16419  14BE  00B7               	movwf	___xxtofl@val
 16420  14BF  0141               	movlb	1	; select bank1
 16421  14C0  0851               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16422  14C1  0140               	movlb	0	; select bank0
 16423  14C2  00B8               	movwf	___xxtofl@val+1
 16424  14C3  01B9               	clrf	___xxtofl@val+2
 16425  14C4  01BA               	clrf	___xxtofl@val+3
 16426  14C5  3000               	movlw	0
 16427  14C6  31AB  237E  3194   	fcall	___xxtofl
 16428  14C9  0140               	movlb	0	; select bank0
 16429  14CA  083A               	movf	?___xxtofl+3,w
 16430  14CB  00CC               	movwf	___flmul@a+3
 16431  14CC  0839               	movf	?___xxtofl+2,w
 16432  14CD  00CB               	movwf	___flmul@a+2
 16433  14CE  0838               	movf	?___xxtofl+1,w
 16434  14CF  00CA               	movwf	___flmul@a+1
 16435  14D0  0837               	movf	?___xxtofl,w
 16436  14D1  00C9               	movwf	___flmul@a
 16437  14D2  3191  21D9  3194   	fcall	___flmul
 16438  14D5  0140               	movlb	0	; select bank0
 16439  14D6  0848               	movf	?___flmul+3,w
 16440  14D7  00E6               	movwf	___fldiv@b+3
 16441  14D8  0847               	movf	?___flmul+2,w
 16442  14D9  00E5               	movwf	___fldiv@b+2
 16443  14DA  0846               	movf	?___flmul+1,w
 16444  14DB  00E4               	movwf	___fldiv@b+1
 16445  14DC  0845               	movf	?___flmul,w
 16446  14DD  00E3               	movwf	___fldiv@b
 16447  14DE  3190  2007  3194   	fcall	___fldiv
 16448  14E1  0140               	movlb	0	; select bank0
 16449  14E2  0862               	movf	?___fldiv+3,w
 16450  14E3  0141               	movlb	1	; select bank1
 16451  14E4  00D5               	movwf	(checkChannelStatus@current+3)^(0+128)
 16452  14E5  0140               	movlb	0	; select bank0
 16453  14E6  0861               	movf	?___fldiv+2,w
 16454  14E7  0141               	movlb	1	; select bank1
 16455  14E8  00D4               	movwf	(checkChannelStatus@current+2)^(0+128)
 16456  14E9  0140               	movlb	0	; select bank0
 16457  14EA  0860               	movf	?___fldiv+1,w
 16458  14EB  0141               	movlb	1	; select bank1
 16459  14EC  00D3               	movwf	(checkChannelStatus@current+1)^(0+128)
 16460  14ED  0140               	movlb	0	; select bank0
 16461  14EE  085F               	movf	?___fldiv,w
 16462  14EF  0141               	movlb	1	; select bank1
 16463  14F0  00D2               	movwf	checkChannelStatus@current^(0+128)
 16464                           
 16465                           ;system.c: 85:   if (current < 0.05) {
 16466  14F1  0855               	movf	(checkChannelStatus@current+3)^(0+128),w
 16467  14F2  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16468  14F3  0854               	movf	(checkChannelStatus@current+2)^(0+128),w
 16469  14F4  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16470  14F5  0853               	movf	(checkChannelStatus@current+1)^(0+128),w
 16471  14F6  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16472  14F7  0852               	movf	checkChannelStatus@current^(0+128),w
 16473  14F8  00B2               	movwf	___flge@ff1^(0+128)
 16474  14F9  303D               	movlw	61
 16475  14FA  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16476  14FB  304C               	movlw	76
 16477  14FC  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16478  14FD  30CC               	movlw	204
 16479  14FE  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16480  14FF  30CD               	movlw	205
 16481  1500  00B6               	movwf	___flge@ff2^(0+128)
 16482  1501  31AA  2277  3194   	fcall	___flge
 16483  1504  1803               	btfsc	3,0
 16484  1505  2D20               	goto	l8214
 16485                           
 16486                           ;system.c: 87:    if (chData->status == CH_ENABLED)
 16487  1506  0141               	movlb	1	; select bank1
 16488  1507  0857               	movf	checkChannelStatus@chData^(0+128),w
 16489  1508  0086               	movwf	6
 16490  1509  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16491  150A  0087               	movwf	7
 16492  150B  315E               	addfsr 1,30
 16493  150C  0301               	decf	1,w
 16494  150D  1D03               	btfss	3,2
 16495  150E  2D13               	goto	l8212
 16496                           
 16497                           ;system.c: 88:     error(WARN_REMOVED);
 16498  150F  3001               	movlw	1
 16499  1510  31B3  23F9  3194   	fcall	_error
 16500  1513                     l8212:	
 16501                           
 16502                           ;system.c: 89:    chData->status = CH_OPEN;
 16503  1513  0141               	movlb	1	; select bank1
 16504  1514  0857               	movf	checkChannelStatus@chData^(0+128),w
 16505  1515  3E1E               	addlw	30
 16506  1516  00C1               	movwf	??_checkChannelStatus^(0+128)
 16507  1517  3000               	movlw	0
 16508  1518  3D58               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16509  1519  00C2               	movwf	(??_checkChannelStatus+1)^(0+128)
 16510  151A  0841               	movf	??_checkChannelStatus^(0+128),w
 16511  151B  0086               	movwf	6
 16512  151C  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16513  151D  0087               	movwf	7
 16514  151E  3002               	movlw	2
 16515  151F  2FF5               	goto	L8
 16516  1520                     l8214:	
 16517                           ;system.c: 90:   } else if ((current > 2.0)
 16518                           
 16519  1520  3040               	movlw	64
 16520  1521  0141               	movlb	1	; select bank1
 16521  1522  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16522  1523  3000               	movlw	0
 16523  1524  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16524  1525  3000               	movlw	0
 16525  1526  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16526  1527  3000               	movlw	0
 16527  1528  00B2               	movwf	___flge@ff1^(0+128)
 16528  1529  0855               	movf	(checkChannelStatus@current+3)^(0+128),w
 16529  152A  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16530  152B  0854               	movf	(checkChannelStatus@current+2)^(0+128),w
 16531  152C  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16532  152D  0853               	movf	(checkChannelStatus@current+1)^(0+128),w
 16533  152E  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16534  152F  0852               	movf	checkChannelStatus@current^(0+128),w
 16535  1530  00B6               	movwf	___flge@ff2^(0+128)
 16536  1531  31AA  2277  3194   	fcall	___flge
 16537  1534  1C03               	btfss	3,0
 16538  1535  2D3C               	goto	l8218
 16539  1536  3190  2000  3194   	fcall	_getLoadSwitchFault
 16540  1539  3A00               	xorlw	0
 16541  153A  1903               	skipnz
 16542  153B  2D71               	goto	l8232
 16543  153C                     l8218:	
 16544                           
 16545                           ;system.c: 91:    || (getLoadSwitchFault())) {;system.c: 94:    error(WARN_HEATER_OVERCU
      +                          RRENT);
 16546  153C  3004               	movlw	4
 16547  153D  31B3  23F9  3194   	fcall	_error
 16548                           
 16549                           ;system.c: 95:    chData->status = CH_OVERCURRENT;
 16550  1540  0141               	movlb	1	; select bank1
 16551  1541  0857               	movf	checkChannelStatus@chData^(0+128),w
 16552  1542  3E1E               	addlw	30
 16553  1543  00C1               	movwf	??_checkChannelStatus^(0+128)
 16554  1544  3000               	movlw	0
 16555  1545  3D58               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16556  1546  00C2               	movwf	(??_checkChannelStatus+1)^(0+128)
 16557  1547  0841               	movf	??_checkChannelStatus^(0+128),w
 16558  1548  0086               	movwf	6
 16559  1549  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16560  154A  0087               	movwf	7
 16561  154B  3004               	movlw	4
 16562  154C  0081               	movwf	1
 16563                           
 16564                           ;system.c: 97:    if (getLoadSwitchFault()) {
 16565  154D  3190  2000  3194   	fcall	_getLoadSwitchFault
 16566  1550  3A00               	xorlw	0
 16567  1551  1903               	skipnz
 16568  1552  2FF6               	goto	l8270
 16569                           
 16570                           ;system.c: 98:     chData->status = CH_SHORTED;
 16571  1553  0141               	movlb	1	; select bank1
 16572  1554  0857               	movf	checkChannelStatus@chData^(0+128),w
 16573  1555  3E1E               	addlw	30
 16574  1556  00C1               	movwf	??_checkChannelStatus^(0+128)
 16575  1557  3000               	movlw	0
 16576  1558  3D58               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16577  1559  00C2               	movwf	(??_checkChannelStatus+1)^(0+128)
 16578  155A  0841               	movf	??_checkChannelStatus^(0+128),w
 16579  155B  0086               	movwf	6
 16580  155C  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16581  155D  0087               	movwf	7
 16582  155E  3003               	movlw	3
 16583  155F  0081               	movwf	1
 16584                           
 16585                           ;system.c: 99:     setLoadSwitch(0);
 16586  1560  3000               	movlw	0
 16587  1561  31B0  20D9  3194   	fcall	_setLoadSwitch
 16588                           
 16589                           ;system.c: 100:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 16590  1564  3007               	movlw	7
 16591  1565  0141               	movlb	1	; select bank1
 16592  1566  00C1               	movwf	??_checkChannelStatus^(0+128)
 16593  1567  307D               	movlw	125
 16594  1568                     u10337:	
 16595  1568  0B89               	decfsz	9,f
 16596  1569  2D68               	goto	u10337
 16597  156A  0BC1               	decfsz	??_checkChannelStatus^(0+128),f
 16598  156B  2D68               	goto	u10337
 16599                           
 16600                           ;system.c: 101:     setLoadSwitch(1);
 16601  156C  3001               	movlw	1
 16602  156D  31B0  20D9  3194   	fcall	_setLoadSwitch
 16603  1570  2FF6               	goto	l8270
 16604  1571                     l8232:	
 16605                           
 16606                           ;system.c: 104:    chData->current = current;
 16607  1571  0141               	movlb	1	; select bank1
 16608  1572  0857               	movf	checkChannelStatus@chData^(0+128),w
 16609  1573  0086               	movwf	6
 16610  1574  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16611  1575  0087               	movwf	7
 16612  1576  0852               	movf	checkChannelStatus@current^(0+128),w
 16613  1577  3FC0               	movwi [0]fsr1
 16614  1578  0853               	movf	(checkChannelStatus@current+1)^(0+128),w
 16615  1579  3FC1               	movwi [1]fsr1
 16616  157A  0854               	movf	(checkChannelStatus@current+2)^(0+128),w
 16617  157B  3FC2               	movwi [2]fsr1
 16618  157C  0855               	movf	(checkChannelStatus@current+3)^(0+128),w
 16619  157D  3FC3               	movwi [3]fsr1
 16620                           
 16621                           ;system.c: 105:    chData->Pmax = data->voltage * current;
 16622  157E  0855               	movf	(checkChannelStatus@current+3)^(0+128),w
 16623  157F  0140               	movlb	0	; select bank0
 16624  1580  00C8               	movwf	___flmul@b+3
 16625  1581  0141               	movlb	1	; select bank1
 16626  1582  0854               	movf	(checkChannelStatus@current+2)^(0+128),w
 16627  1583  0140               	movlb	0	; select bank0
 16628  1584  00C7               	movwf	___flmul@b+2
 16629  1585  0141               	movlb	1	; select bank1
 16630  1586  0853               	movf	(checkChannelStatus@current+1)^(0+128),w
 16631  1587  0140               	movlb	0	; select bank0
 16632  1588  00C6               	movwf	___flmul@b+1
 16633  1589  0141               	movlb	1	; select bank1
 16634  158A  0852               	movf	checkChannelStatus@current^(0+128),w
 16635  158B  0140               	movlb	0	; select bank0
 16636  158C  00C5               	movwf	___flmul@b
 16637  158D  0141               	movlb	1	; select bank1
 16638  158E  083F               	movf	checkChannelStatus@data^(0+128),w
 16639  158F  0086               	movwf	6
 16640  1590  0840               	movf	(checkChannelStatus@data+1)^(0+128),w
 16641  1591  0087               	movwf	7
 16642  1592  3151               	addfsr 1,17
 16643  1593  3F40               	moviw [0]fsr1
 16644  1594  0140               	movlb	0	; select bank0
 16645  1595  00C9               	movwf	___flmul@a
 16646  1596  3F41               	moviw [1]fsr1
 16647  1597  00CA               	movwf	___flmul@a+1
 16648  1598  3F42               	moviw [2]fsr1
 16649  1599  00CB               	movwf	___flmul@a+2
 16650  159A  3F43               	moviw [3]fsr1
 16651  159B  00CC               	movwf	___flmul@a+3
 16652  159C  3191  21D9  3194   	fcall	___flmul
 16653  159F  0141               	movlb	1	; select bank1
 16654  15A0  0857               	movf	checkChannelStatus@chData^(0+128),w
 16655  15A1  0086               	movwf	6
 16656  15A2  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16657  15A3  0087               	movwf	7
 16658  15A4  3144               	addfsr 1,4
 16659  15A5  0140               	movlb	0	; select bank0
 16660  15A6  0845               	movf	?___flmul,w
 16661  15A7  3FC0               	movwi [0]fsr1
 16662  15A8  0846               	movf	?___flmul+1,w
 16663  15A9  3FC1               	movwi [1]fsr1
 16664  15AA  0847               	movf	?___flmul+2,w
 16665  15AB  3FC2               	movwi [2]fsr1
 16666  15AC  0848               	movf	?___flmul+3,w
 16667  15AD  3FC3               	movwi [3]fsr1
 16668                           
 16669                           ;system.c: 108:    if (chData->Pset > chData->Pmax)
 16670  15AE  0141               	movlb	1	; select bank1
 16671  15AF  0857               	movf	checkChannelStatus@chData^(0+128),w
 16672  15B0  0086               	movwf	6
 16673  15B1  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16674  15B2  0087               	movwf	7
 16675  15B3  3144               	addfsr 1,4
 16676  15B4  3F40               	moviw [0]fsr1
 16677  15B5  00B2               	movwf	___flge@ff1^(0+128)
 16678  15B6  3F41               	moviw [1]fsr1
 16679  15B7  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16680  15B8  3F42               	moviw [2]fsr1
 16681  15B9  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16682  15BA  3F43               	moviw [3]fsr1
 16683  15BB  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16684  15BC  0857               	movf	checkChannelStatus@chData^(0+128),w
 16685  15BD  0086               	movwf	6
 16686  15BE  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16687  15BF  0087               	movwf	7
 16688  15C0  3150               	addfsr 1,16
 16689  15C1  3F40               	moviw [0]fsr1
 16690  15C2  00B6               	movwf	___flge@ff2^(0+128)
 16691  15C3  3F41               	moviw [1]fsr1
 16692  15C4  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16693  15C5  3F42               	moviw [2]fsr1
 16694  15C6  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16695  15C7  3F43               	moviw [3]fsr1
 16696  15C8  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16697  15C9  31AA  2277  3194   	fcall	___flge
 16698  15CC  1803               	btfsc	3,0
 16699  15CD  2DE9               	goto	l772
 16700                           
 16701                           ;system.c: 109:     chData->Pset = chData->Pmax;
 16702  15CE  0141               	movlb	1	; select bank1
 16703  15CF  0857               	movf	checkChannelStatus@chData^(0+128),w
 16704  15D0  0086               	movwf	6
 16705  15D1  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16706  15D2  0087               	movwf	7
 16707  15D3  3144               	addfsr 1,4
 16708  15D4  3F40               	moviw [0]fsr1
 16709  15D5  00C1               	movwf	??_checkChannelStatus^(0+128)
 16710  15D6  3F41               	moviw [1]fsr1
 16711  15D7  00C2               	movwf	(??_checkChannelStatus^(0+128)+1)
 16712  15D8  3F42               	moviw [2]fsr1
 16713  15D9  00C3               	movwf	(??_checkChannelStatus^(0+128)+2)
 16714  15DA  3F43               	moviw [3]fsr1
 16715  15DB  00C4               	movwf	(??_checkChannelStatus^(0+128)+3)
 16716  15DC  0857               	movf	checkChannelStatus@chData^(0+128),w
 16717  15DD  0086               	movwf	6
 16718  15DE  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16719  15DF  0087               	movwf	7
 16720  15E0  3150               	addfsr 1,16
 16721  15E1  0841               	movf	??_checkChannelStatus^(0+128),w
 16722  15E2  3FC0               	movwi [0]fsr1
 16723  15E3  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16724  15E4  3FC1               	movwi [1]fsr1
 16725  15E5  0843               	movf	(??_checkChannelStatus+2)^(0+128),w
 16726  15E6  3FC2               	movwi [2]fsr1
 16727  15E7  0844               	movf	(??_checkChannelStatus+3)^(0+128),w
 16728  15E8  3FC3               	movwi [3]fsr1
 16729  15E9                     l772:	
 16730                           
 16731                           ;system.c: 111:    if (data->status.SENSOR_OK) {
 16732  15E9  0141               	movlb	1	; select bank1
 16733  15EA  083F               	movf	checkChannelStatus@data^(0+128),w
 16734  15EB  3E29               	addlw	41
 16735  15EC  0086               	movwf	6
 16736  15ED  3000               	movlw	0
 16737  15EE  3D40               	addwfc	(checkChannelStatus@data+1)^(0+128),w
 16738  15EF  0087               	movwf	7
 16739  15F0  1D81               	btfss	1,3
 16740  15F1  2E37               	goto	l8248
 16741                           
 16742                           ;system.c: 112:     if (chData->Pset < 0)
 16743  15F2  0857               	movf	checkChannelStatus@chData^(0+128),w
 16744  15F3  0086               	movwf	6
 16745  15F4  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16746  15F5  0087               	movwf	7
 16747  15F6  3150               	addfsr 1,16
 16748  15F7  3F40               	moviw [0]fsr1
 16749  15F8  00B2               	movwf	___flge@ff1^(0+128)
 16750  15F9  3F41               	moviw [1]fsr1
 16751  15FA  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16752  15FB  3F42               	moviw [2]fsr1
 16753  15FC  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16754  15FD  3F43               	moviw [3]fsr1
 16755  15FE  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16756  15FF  3000               	movlw	0
 16757  1600  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16758  1601  3000               	movlw	0
 16759  1602  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16760  1603  3000               	movlw	0
 16761  1604  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16762  1605  3000               	movlw	0
 16763  1606  00B6               	movwf	___flge@ff2^(0+128)
 16764  1607  31AA  2277  3194   	fcall	___flge
 16765  160A  1803               	btfsc	3,0
 16766  160B  2E1A               	goto	l8244
 16767                           
 16768                           ;system.c: 113:      chData->mode = MODE_AUTO;
 16769  160C  0141               	movlb	1	; select bank1
 16770  160D  0857               	movf	checkChannelStatus@chData^(0+128),w
 16771  160E  3E1D               	addlw	29
 16772  160F  00C1               	movwf	??_checkChannelStatus^(0+128)
 16773  1610  3000               	movlw	0
 16774  1611  3D58               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16775  1612  00C2               	movwf	(??_checkChannelStatus+1)^(0+128)
 16776  1613  0841               	movf	??_checkChannelStatus^(0+128),w
 16777  1614  0086               	movwf	6
 16778  1615  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16779  1616  0087               	movwf	7
 16780  1617  3001               	movlw	1
 16781  1618  0081               	movwf	1
 16782  1619  2E57               	goto	l8252
 16783  161A                     l8244:	
 16784  161A  3000               	movlw	0
 16785  161B  0141               	movlb	1	; select bank1
 16786  161C  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16787  161D  3000               	movlw	0
 16788  161E  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16789  161F  3000               	movlw	0
 16790  1620  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16791  1621  3000               	movlw	0
 16792  1622  00B2               	movwf	___flge@ff1^(0+128)
 16793  1623  0857               	movf	checkChannelStatus@chData^(0+128),w
 16794  1624  0086               	movwf	6
 16795  1625  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16796  1626  0087               	movwf	7
 16797  1627  3150               	addfsr 1,16
 16798  1628  3F40               	moviw [0]fsr1
 16799  1629  00B6               	movwf	___flge@ff2^(0+128)
 16800  162A  3F41               	moviw [1]fsr1
 16801  162B  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16802  162C  3F42               	moviw [2]fsr1
 16803  162D  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16804  162E  3F43               	moviw [3]fsr1
 16805  162F  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16806  1630  31AA  2277  3194   	fcall	___flge
 16807  1633  1803               	btfsc	3,0
 16808  1634  2E57               	goto	l8252
 16809                           
 16810                           ;system.c: 115:      chData->mode = MODE_MANUAL;
 16811  1635  0141               	movlb	1	; select bank1
 16812  1636  2E51               	goto	l8250
 16813  1637                     l8248:	
 16814                           
 16815                           ;system.c: 117:     chData->Pset = chData->Pmax;
 16816  1637  0857               	movf	checkChannelStatus@chData^(0+128),w
 16817  1638  0086               	movwf	6
 16818  1639  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16819  163A  0087               	movwf	7
 16820  163B  3144               	addfsr 1,4
 16821  163C  3F40               	moviw [0]fsr1
 16822  163D  00C1               	movwf	??_checkChannelStatus^(0+128)
 16823  163E  3F41               	moviw [1]fsr1
 16824  163F  00C2               	movwf	(??_checkChannelStatus^(0+128)+1)
 16825  1640  3F42               	moviw [2]fsr1
 16826  1641  00C3               	movwf	(??_checkChannelStatus^(0+128)+2)
 16827  1642  3F43               	moviw [3]fsr1
 16828  1643  00C4               	movwf	(??_checkChannelStatus^(0+128)+3)
 16829  1644  0857               	movf	checkChannelStatus@chData^(0+128),w
 16830  1645  0086               	movwf	6
 16831  1646  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16832  1647  0087               	movwf	7
 16833  1648  3150               	addfsr 1,16
 16834  1649  0841               	movf	??_checkChannelStatus^(0+128),w
 16835  164A  3FC0               	movwi [0]fsr1
 16836  164B  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16837  164C  3FC1               	movwi [1]fsr1
 16838  164D  0843               	movf	(??_checkChannelStatus+2)^(0+128),w
 16839  164E  3FC2               	movwi [2]fsr1
 16840  164F  0844               	movf	(??_checkChannelStatus+3)^(0+128),w
 16841  1650  3FC3               	movwi [3]fsr1
 16842  1651                     l8250:	
 16843                           
 16844                           ;system.c: 118:     chData->mode = MODE_MANUAL;
 16845  1651  0857               	movf	checkChannelStatus@chData^(0+128),w
 16846  1652  0086               	movwf	6
 16847  1653  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16848  1654  0087               	movwf	7
 16849  1655  315D               	addfsr 1,29
 16850  1656  0181               	clrf	1
 16851  1657                     l8252:	
 16852                           
 16853                           ;system.c: 121:    if (chData->Pset == 0)
 16854  1657  0141               	movlb	1	; select bank1
 16855  1658  0857               	movf	checkChannelStatus@chData^(0+128),w
 16856  1659  0086               	movwf	6
 16857  165A  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16858  165B  0087               	movwf	7
 16859  165C  3150               	addfsr 1,16
 16860  165D  3F40               	moviw [0]fsr1
 16861  165E  0140               	movlb	0	; select bank0
 16862  165F  00A4               	movwf	___fleq@ff1
 16863  1660  3F41               	moviw [1]fsr1
 16864  1661  00A5               	movwf	___fleq@ff1+1
 16865  1662  3F42               	moviw [2]fsr1
 16866  1663  00A6               	movwf	___fleq@ff1+2
 16867  1664  3F43               	moviw [3]fsr1
 16868  1665  00A7               	movwf	___fleq@ff1+3
 16869  1666  3000               	movlw	0
 16870  1667  00AB               	movwf	___fleq@ff2+3
 16871  1668  3000               	movlw	0
 16872  1669  00AA               	movwf	___fleq@ff2+2
 16873  166A  3000               	movlw	0
 16874  166B  00A9               	movwf	___fleq@ff2+1
 16875  166C  3000               	movlw	0
 16876  166D  00A8               	movwf	___fleq@ff2
 16877  166E  31B6  2648  3194   	fcall	___fleq
 16878  1671  1C03               	btfss	3,0
 16879  1672  2E7B               	goto	l8256
 16880                           
 16881                           ;system.c: 122:     chData->status = CH_DISABLED;
 16882  1673  0141               	movlb	1	; select bank1
 16883  1674  0857               	movf	checkChannelStatus@chData^(0+128),w
 16884  1675  0086               	movwf	6
 16885  1676  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16886  1677  0087               	movwf	7
 16887  1678  315E               	addfsr 1,30
 16888  1679  0181               	clrf	1
 16889  167A  2E88               	goto	l779
 16890  167B                     l8256:	
 16891                           
 16892                           ;system.c: 124:     chData->status = CH_ENABLED;
 16893  167B  0141               	movlb	1	; select bank1
 16894  167C  0857               	movf	checkChannelStatus@chData^(0+128),w
 16895  167D  3E1E               	addlw	30
 16896  167E  00C1               	movwf	??_checkChannelStatus^(0+128)
 16897  167F  3000               	movlw	0
 16898  1680  3D58               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16899  1681  00C2               	movwf	(??_checkChannelStatus+1)^(0+128)
 16900  1682  0841               	movf	??_checkChannelStatus^(0+128),w
 16901  1683  0086               	movwf	6
 16902  1684  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 16903  1685  0087               	movwf	7
 16904  1686  3001               	movlw	1
 16905  1687  0081               	movwf	1
 16906  1688                     l779:	
 16907                           
 16908                           ;system.c: 127:    if (chData->mode == MODE_AUTO)
 16909  1688  0857               	movf	checkChannelStatus@chData^(0+128),w
 16910  1689  0086               	movwf	6
 16911  168A  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16912  168B  0087               	movwf	7
 16913  168C  315D               	addfsr 1,29
 16914  168D  0301               	decf	1,w
 16915  168E  1D03               	btfss	3,2
 16916  168F  2F3A               	goto	l8264
 16917                           
 16918                           ;system.c: 128:     chData->DCreq = (((chData->Preq / chData->Pmax) * 100) < (100) ? ((c
      +                          hData->Preq / chData->Pmax) * 100) : (100));
 16919  1690  3042               	movlw	66
 16920  1691  0140               	movlb	0	; select bank0
 16921  1692  00C8               	movwf	___flmul@b+3
 16922  1693  30C8               	movlw	200
 16923  1694  00C7               	movwf	___flmul@b+2
 16924  1695  3000               	movlw	0
 16925  1696  00C6               	movwf	___flmul@b+1
 16926  1697  3000               	movlw	0
 16927  1698  00C5               	movwf	___flmul@b
 16928  1699  0141               	movlb	1	; select bank1
 16929  169A  0857               	movf	checkChannelStatus@chData^(0+128),w
 16930  169B  0086               	movwf	6
 16931  169C  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16932  169D  0087               	movwf	7
 16933  169E  3144               	addfsr 1,4
 16934  169F  3F40               	moviw [0]fsr1
 16935  16A0  0140               	movlb	0	; select bank0
 16936  16A1  00DF               	movwf	___fldiv@a
 16937  16A2  3F41               	moviw [1]fsr1
 16938  16A3  00E0               	movwf	___fldiv@a+1
 16939  16A4  3F42               	moviw [2]fsr1
 16940  16A5  00E1               	movwf	___fldiv@a+2
 16941  16A6  3F43               	moviw [3]fsr1
 16942  16A7  00E2               	movwf	___fldiv@a+3
 16943  16A8  0141               	movlb	1	; select bank1
 16944  16A9  0857               	movf	checkChannelStatus@chData^(0+128),w
 16945  16AA  0086               	movwf	6
 16946  16AB  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16947  16AC  0087               	movwf	7
 16948  16AD  3148               	addfsr 1,8
 16949  16AE  3F40               	moviw [0]fsr1
 16950  16AF  0140               	movlb	0	; select bank0
 16951  16B0  00E3               	movwf	___fldiv@b
 16952  16B1  3F41               	moviw [1]fsr1
 16953  16B2  00E4               	movwf	___fldiv@b+1
 16954  16B3  3F42               	moviw [2]fsr1
 16955  16B4  00E5               	movwf	___fldiv@b+2
 16956  16B5  3F43               	moviw [3]fsr1
 16957  16B6  00E6               	movwf	___fldiv@b+3
 16958  16B7  3190  2007  3194   	fcall	___fldiv
 16959  16BA  0140               	movlb	0	; select bank0
 16960  16BB  0862               	movf	?___fldiv+3,w
 16961  16BC  00CC               	movwf	___flmul@a+3
 16962  16BD  0861               	movf	?___fldiv+2,w
 16963  16BE  00CB               	movwf	___flmul@a+2
 16964  16BF  0860               	movf	?___fldiv+1,w
 16965  16C0  00CA               	movwf	___flmul@a+1
 16966  16C1  085F               	movf	?___fldiv,w
 16967  16C2  00C9               	movwf	___flmul@a
 16968  16C3  3191  21D9  3194   	fcall	___flmul
 16969  16C6  0140               	movlb	0	; select bank0
 16970  16C7  0848               	movf	?___flmul+3,w
 16971  16C8  0141               	movlb	1	; select bank1
 16972  16C9  00B5               	movwf	(___flge@ff1+3)^(0+128)
 16973  16CA  0140               	movlb	0	; select bank0
 16974  16CB  0847               	movf	?___flmul+2,w
 16975  16CC  0141               	movlb	1	; select bank1
 16976  16CD  00B4               	movwf	(___flge@ff1+2)^(0+128)
 16977  16CE  0140               	movlb	0	; select bank0
 16978  16CF  0846               	movf	?___flmul+1,w
 16979  16D0  0141               	movlb	1	; select bank1
 16980  16D1  00B3               	movwf	(___flge@ff1+1)^(0+128)
 16981  16D2  0140               	movlb	0	; select bank0
 16982  16D3  0845               	movf	?___flmul,w
 16983  16D4  0141               	movlb	1	; select bank1
 16984  16D5  00B2               	movwf	___flge@ff1^(0+128)
 16985  16D6  3042               	movlw	66
 16986  16D7  00B9               	movwf	(___flge@ff2+3)^(0+128)
 16987  16D8  30C8               	movlw	200
 16988  16D9  00B8               	movwf	(___flge@ff2+2)^(0+128)
 16989  16DA  3000               	movlw	0
 16990  16DB  00B7               	movwf	(___flge@ff2+1)^(0+128)
 16991  16DC  3000               	movlw	0
 16992  16DD  00B6               	movwf	___flge@ff2^(0+128)
 16993  16DE  31AA  2277  3194   	fcall	___flge
 16994  16E1  1C03               	btfss	3,0
 16995  16E2  2EEC               	goto	l8262
 16996  16E3  3042               	movlw	66
 16997  16E4  0141               	movlb	1	; select bank1
 16998  16E5  00CA               	movwf	(_checkChannelStatus$1791+3)^(0+128)
 16999  16E6  30C8               	movlw	200
 17000  16E7  00C9               	movwf	(_checkChannelStatus$1791+2)^(0+128)
 17001  16E8  3000               	movlw	0
 17002  16E9  00C8               	movwf	(_checkChannelStatus$1791+1)^(0+128)
 17003  16EA  3000               	movlw	0
 17004  16EB  2F31               	goto	L9
 17005  16EC                     l8262:	
 17006  16EC  3042               	movlw	66
 17007  16ED  0140               	movlb	0	; select bank0
 17008  16EE  00C8               	movwf	___flmul@b+3
 17009  16EF  30C8               	movlw	200
 17010  16F0  00C7               	movwf	___flmul@b+2
 17011  16F1  3000               	movlw	0
 17012  16F2  00C6               	movwf	___flmul@b+1
 17013  16F3  3000               	movlw	0
 17014  16F4  00C5               	movwf	___flmul@b
 17015  16F5  0141               	movlb	1	; select bank1
 17016  16F6  0857               	movf	checkChannelStatus@chData^(0+128),w
 17017  16F7  0086               	movwf	6
 17018  16F8  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 17019  16F9  0087               	movwf	7
 17020  16FA  3144               	addfsr 1,4
 17021  16FB  3F40               	moviw [0]fsr1
 17022  16FC  0140               	movlb	0	; select bank0
 17023  16FD  00DF               	movwf	___fldiv@a
 17024  16FE  3F41               	moviw [1]fsr1
 17025  16FF  00E0               	movwf	___fldiv@a+1
 17026  1700  3F42               	moviw [2]fsr1
 17027  1701  00E1               	movwf	___fldiv@a+2
 17028  1702  3F43               	moviw [3]fsr1
 17029  1703  00E2               	movwf	___fldiv@a+3
 17030  1704  0141               	movlb	1	; select bank1
 17031  1705  0857               	movf	checkChannelStatus@chData^(0+128),w
 17032  1706  0086               	movwf	6
 17033  1707  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 17034  1708  0087               	movwf	7
 17035  1709  3148               	addfsr 1,8
 17036  170A  3F40               	moviw [0]fsr1
 17037  170B  0140               	movlb	0	; select bank0
 17038  170C  00E3               	movwf	___fldiv@b
 17039  170D  3F41               	moviw [1]fsr1
 17040  170E  00E4               	movwf	___fldiv@b+1
 17041  170F  3F42               	moviw [2]fsr1
 17042  1710  00E5               	movwf	___fldiv@b+2
 17043  1711  3F43               	moviw [3]fsr1
 17044  1712  00E6               	movwf	___fldiv@b+3
 17045  1713  3190  2007  3194   	fcall	___fldiv
 17046  1716  0140               	movlb	0	; select bank0
 17047  1717  0862               	movf	?___fldiv+3,w
 17048  1718  00CC               	movwf	___flmul@a+3
 17049  1719  0861               	movf	?___fldiv+2,w
 17050  171A  00CB               	movwf	___flmul@a+2
 17051  171B  0860               	movf	?___fldiv+1,w
 17052  171C  00CA               	movwf	___flmul@a+1
 17053  171D  085F               	movf	?___fldiv,w
 17054  171E  00C9               	movwf	___flmul@a
 17055  171F  3191  21D9  3194   	fcall	___flmul
 17056  1722  0140               	movlb	0	; select bank0
 17057  1723  0848               	movf	?___flmul+3,w
 17058  1724  0141               	movlb	1	; select bank1
 17059  1725  00CA               	movwf	(_checkChannelStatus$1791+3)^(0+128)
 17060  1726  0140               	movlb	0	; select bank0
 17061  1727  0847               	movf	?___flmul+2,w
 17062  1728  0141               	movlb	1	; select bank1
 17063  1729  00C9               	movwf	(_checkChannelStatus$1791+2)^(0+128)
 17064  172A  0140               	movlb	0	; select bank0
 17065  172B  0846               	movf	?___flmul+1,w
 17066  172C  0141               	movlb	1	; select bank1
 17067  172D  00C8               	movwf	(_checkChannelStatus$1791+1)^(0+128)
 17068  172E  0140               	movlb	0	; select bank0
 17069  172F  0845               	movf	?___flmul,w
 17070  1730  0141               	movlb	1	; select bank1
 17071  1731                     L9:	
 17072  1731  00C7               	movwf	_checkChannelStatus$1791^(0+128)
 17073  1732  084A               	movf	(_checkChannelStatus$1791+3)^(0+128),w
 17074  1733  00B7               	movwf	(___fltol@f1+3)^(0+128)
 17075  1734  0849               	movf	(_checkChannelStatus$1791+2)^(0+128),w
 17076  1735  00B6               	movwf	(___fltol@f1+2)^(0+128)
 17077  1736  0848               	movf	(_checkChannelStatus$1791+1)^(0+128),w
 17078  1737  00B5               	movwf	(___fltol@f1+1)^(0+128)
 17079  1738  0847               	movf	_checkChannelStatus$1791^(0+128),w
 17080  1739  2FE3               	goto	L11
 17081  173A                     l8264:	
 17082                           
 17083                           ;system.c: 130:     chData->DCreq = (((chData->Pset / chData->Pmax) * 100) < (100) ? ((c
      +                          hData->Pset / chData->Pmax) * 100) : (100));
 17084  173A  3042               	movlw	66
 17085  173B  0140               	movlb	0	; select bank0
 17086  173C  00C8               	movwf	___flmul@b+3
 17087  173D  30C8               	movlw	200
 17088  173E  00C7               	movwf	___flmul@b+2
 17089  173F  3000               	movlw	0
 17090  1740  00C6               	movwf	___flmul@b+1
 17091  1741  3000               	movlw	0
 17092  1742  00C5               	movwf	___flmul@b
 17093  1743  0141               	movlb	1	; select bank1
 17094  1744  0857               	movf	checkChannelStatus@chData^(0+128),w
 17095  1745  0086               	movwf	6
 17096  1746  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 17097  1747  0087               	movwf	7
 17098  1748  3144               	addfsr 1,4
 17099  1749  3F40               	moviw [0]fsr1
 17100  174A  0140               	movlb	0	; select bank0
 17101  174B  00DF               	movwf	___fldiv@a
 17102  174C  3F41               	moviw [1]fsr1
 17103  174D  00E0               	movwf	___fldiv@a+1
 17104  174E  3F42               	moviw [2]fsr1
 17105  174F  00E1               	movwf	___fldiv@a+2
 17106  1750  3F43               	moviw [3]fsr1
 17107  1751  00E2               	movwf	___fldiv@a+3
 17108  1752  0141               	movlb	1	; select bank1
 17109  1753  0857               	movf	checkChannelStatus@chData^(0+128),w
 17110  1754  0086               	movwf	6
 17111  1755  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 17112  1756  0087               	movwf	7
 17113  1757  3150               	addfsr 1,16
 17114  1758  3F40               	moviw [0]fsr1
 17115  1759  0140               	movlb	0	; select bank0
 17116  175A  00E3               	movwf	___fldiv@b
 17117  175B  3F41               	moviw [1]fsr1
 17118  175C  00E4               	movwf	___fldiv@b+1
 17119  175D  3F42               	moviw [2]fsr1
 17120  175E  00E5               	movwf	___fldiv@b+2
 17121  175F  3F43               	moviw [3]fsr1
 17122  1760  00E6               	movwf	___fldiv@b+3
 17123  1761  3190  2007  3194   	fcall	___fldiv
 17124  1764  0140               	movlb	0	; select bank0
 17125  1765  0862               	movf	?___fldiv+3,w
 17126  1766  00CC               	movwf	___flmul@a+3
 17127  1767  0861               	movf	?___fldiv+2,w
 17128  1768  00CB               	movwf	___flmul@a+2
 17129  1769  0860               	movf	?___fldiv+1,w
 17130  176A  00CA               	movwf	___flmul@a+1
 17131  176B  085F               	movf	?___fldiv,w
 17132  176C  00C9               	movwf	___flmul@a
 17133  176D  3191  21D9  3194   	fcall	___flmul
 17134  1770  0140               	movlb	0	; select bank0
 17135  1771  0848               	movf	?___flmul+3,w
 17136  1772  0141               	movlb	1	; select bank1
 17137  1773  00B5               	movwf	(___flge@ff1+3)^(0+128)
 17138  1774  0140               	movlb	0	; select bank0
 17139  1775  0847               	movf	?___flmul+2,w
 17140  1776  0141               	movlb	1	; select bank1
 17141  1777  00B4               	movwf	(___flge@ff1+2)^(0+128)
 17142  1778  0140               	movlb	0	; select bank0
 17143  1779  0846               	movf	?___flmul+1,w
 17144  177A  0141               	movlb	1	; select bank1
 17145  177B  00B3               	movwf	(___flge@ff1+1)^(0+128)
 17146  177C  0140               	movlb	0	; select bank0
 17147  177D  0845               	movf	?___flmul,w
 17148  177E  0141               	movlb	1	; select bank1
 17149  177F  00B2               	movwf	___flge@ff1^(0+128)
 17150  1780  3042               	movlw	66
 17151  1781  00B9               	movwf	(___flge@ff2+3)^(0+128)
 17152  1782  30C8               	movlw	200
 17153  1783  00B8               	movwf	(___flge@ff2+2)^(0+128)
 17154  1784  3000               	movlw	0
 17155  1785  00B7               	movwf	(___flge@ff2+1)^(0+128)
 17156  1786  3000               	movlw	0
 17157  1787  00B6               	movwf	___flge@ff2^(0+128)
 17158  1788  31AA  2277  3194   	fcall	___flge
 17159  178B  1C03               	btfss	3,0
 17160  178C  2F96               	goto	l8268
 17161  178D  3042               	movlw	66
 17162  178E  0141               	movlb	1	; select bank1
 17163  178F  00CE               	movwf	(_checkChannelStatus$1792+3)^(0+128)
 17164  1790  30C8               	movlw	200
 17165  1791  00CD               	movwf	(_checkChannelStatus$1792+2)^(0+128)
 17166  1792  3000               	movlw	0
 17167  1793  00CC               	movwf	(_checkChannelStatus$1792+1)^(0+128)
 17168  1794  3000               	movlw	0
 17169  1795  2FDB               	goto	L10
 17170  1796                     l8268:	
 17171  1796  3042               	movlw	66
 17172  1797  0140               	movlb	0	; select bank0
 17173  1798  00C8               	movwf	___flmul@b+3
 17174  1799  30C8               	movlw	200
 17175  179A  00C7               	movwf	___flmul@b+2
 17176  179B  3000               	movlw	0
 17177  179C  00C6               	movwf	___flmul@b+1
 17178  179D  3000               	movlw	0
 17179  179E  00C5               	movwf	___flmul@b
 17180  179F  0141               	movlb	1	; select bank1
 17181  17A0  0857               	movf	checkChannelStatus@chData^(0+128),w
 17182  17A1  0086               	movwf	6
 17183  17A2  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 17184  17A3  0087               	movwf	7
 17185  17A4  3144               	addfsr 1,4
 17186  17A5  3F40               	moviw [0]fsr1
 17187  17A6  0140               	movlb	0	; select bank0
 17188  17A7  00DF               	movwf	___fldiv@a
 17189  17A8  3F41               	moviw [1]fsr1
 17190  17A9  00E0               	movwf	___fldiv@a+1
 17191  17AA  3F42               	moviw [2]fsr1
 17192  17AB  00E1               	movwf	___fldiv@a+2
 17193  17AC  3F43               	moviw [3]fsr1
 17194  17AD  00E2               	movwf	___fldiv@a+3
 17195  17AE  0141               	movlb	1	; select bank1
 17196  17AF  0857               	movf	checkChannelStatus@chData^(0+128),w
 17197  17B0  0086               	movwf	6
 17198  17B1  0858               	movf	(checkChannelStatus@chData+1)^(0+128),w
 17199  17B2  0087               	movwf	7
 17200  17B3  3150               	addfsr 1,16
 17201  17B4  3F40               	moviw [0]fsr1
 17202  17B5  0140               	movlb	0	; select bank0
 17203  17B6  00E3               	movwf	___fldiv@b
 17204  17B7  3F41               	moviw [1]fsr1
 17205  17B8  00E4               	movwf	___fldiv@b+1
 17206  17B9  3F42               	moviw [2]fsr1
 17207  17BA  00E5               	movwf	___fldiv@b+2
 17208  17BB  3F43               	moviw [3]fsr1
 17209  17BC  00E6               	movwf	___fldiv@b+3
 17210  17BD  3190  2007  3194   	fcall	___fldiv
 17211  17C0  0140               	movlb	0	; select bank0
 17212  17C1  0862               	movf	?___fldiv+3,w
 17213  17C2  00CC               	movwf	___flmul@a+3
 17214  17C3  0861               	movf	?___fldiv+2,w
 17215  17C4  00CB               	movwf	___flmul@a+2
 17216  17C5  0860               	movf	?___fldiv+1,w
 17217  17C6  00CA               	movwf	___flmul@a+1
 17218  17C7  085F               	movf	?___fldiv,w
 17219  17C8  00C9               	movwf	___flmul@a
 17220  17C9  3191  21D9  3194   	fcall	___flmul
 17221  17CC  0140               	movlb	0	; select bank0
 17222  17CD  0848               	movf	?___flmul+3,w
 17223  17CE  0141               	movlb	1	; select bank1
 17224  17CF  00CE               	movwf	(_checkChannelStatus$1792+3)^(0+128)
 17225  17D0  0140               	movlb	0	; select bank0
 17226  17D1  0847               	movf	?___flmul+2,w
 17227  17D2  0141               	movlb	1	; select bank1
 17228  17D3  00CD               	movwf	(_checkChannelStatus$1792+2)^(0+128)
 17229  17D4  0140               	movlb	0	; select bank0
 17230  17D5  0846               	movf	?___flmul+1,w
 17231  17D6  0141               	movlb	1	; select bank1
 17232  17D7  00CC               	movwf	(_checkChannelStatus$1792+1)^(0+128)
 17233  17D8  0140               	movlb	0	; select bank0
 17234  17D9  0845               	movf	?___flmul,w
 17235  17DA  0141               	movlb	1	; select bank1
 17236  17DB                     L10:	
 17237  17DB  00CB               	movwf	_checkChannelStatus$1792^(0+128)
 17238  17DC  084E               	movf	(_checkChannelStatus$1792+3)^(0+128),w
 17239  17DD  00B7               	movwf	(___fltol@f1+3)^(0+128)
 17240  17DE  084D               	movf	(_checkChannelStatus$1792+2)^(0+128),w
 17241  17DF  00B6               	movwf	(___fltol@f1+2)^(0+128)
 17242  17E0  084C               	movf	(_checkChannelStatus$1792+1)^(0+128),w
 17243  17E1  00B5               	movwf	(___fltol@f1+1)^(0+128)
 17244  17E2  084B               	movf	_checkChannelStatus$1792^(0+128),w
 17245  17E3                     L11:	
 17246  17E3  00B4               	movwf	___fltol@f1^(0+128)
 17247  17E4  31B7  2731  3194   	fcall	___fltol
 17248  17E7  0141               	movlb	1	; select bank1
 17249  17E8  0834               	movf	?___fltol^(0+128),w
 17250  17E9  00C1               	movwf	??_checkChannelStatus^(0+128)
 17251  17EA  0857               	movf	checkChannelStatus@chData^(0+128),w
 17252  17EB  3E14               	addlw	20
 17253  17EC  00C2               	movwf	(??_checkChannelStatus+1)^(0+128)
 17254  17ED  3000               	movlw	0
 17255  17EE  3D58               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 17256  17EF  00C3               	movwf	(??_checkChannelStatus+2)^(0+128)
 17257  17F0  0842               	movf	(??_checkChannelStatus+1)^(0+128),w
 17258  17F1  0086               	movwf	6
 17259  17F2  0843               	movf	(??_checkChannelStatus+2)^(0+128),w
 17260  17F3  0087               	movwf	7
 17261  17F4  0841               	movf	??_checkChannelStatus^(0+128),w
 17262  17F5                     L8:	
 17263  17F5  0081               	movwf	1
 17264  17F6                     l8270:	
 17265  17F6  3001               	movlw	1
 17266  17F7  0141               	movlb	1	; select bank1
 17267  17F8  00C1               	movwf	??_checkChannelStatus^(0+128)
 17268  17F9  0841               	movf	??_checkChannelStatus^(0+128),w
 17269  17FA  07D6               	addwf	checkChannelStatus@channel^(0+128),f
 17270  17FB  3004               	movlw	4
 17271  17FC  0256               	subwf	checkChannelStatus@channel^(0+128),w
 17272  17FD  1803               	btfsc	3,0
 17273  17FE  0008               	return
 17274  17FF  2C07               	goto	l8184
 17275  1800                     __end_of_checkChannelStatus:	
 17276                           
 17277                           	psect	text43
 17278  30D9                     __ptext43:	
 17279 ;; *************** function _setLoadSwitch *****************
 17280 ;; Defined at:
 17281 ;;		line 6 in file "io.c"
 17282 ;; Parameters:    Size  Location     Type
 17283 ;;  state           1    wreg     unsigned char 
 17284 ;; Auto vars:     Size  Location     Type
 17285 ;;  state           1    4[BANK0 ] unsigned char 
 17286 ;; Return value:  Size  Location     Type
 17287 ;;                  1    wreg      void 
 17288 ;; Registers used:
 17289 ;;		wreg, status,0
 17290 ;; Tracked objects:
 17291 ;;		On entry : 0/0
 17292 ;;		On exit  : 0/0
 17293 ;;		Unchanged: 0/0
 17294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17298 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17299 ;;Total ram usage:        1 bytes
 17300 ;; Hardware stack levels used:    1
 17301 ;; Hardware stack levels required when called:    3
 17302 ;; This function calls:
 17303 ;;		Nothing
 17304 ;; This function is called by:
 17305 ;;		_main
 17306 ;;		_viewErrorMessage
 17307 ;;		_checkChannelStatus
 17308 ;;		_systemCheck
 17309 ;;		___checkChannelStatus
 17310 ;; This function uses a non-reentrant model
 17311 ;;
 17312                           
 17313                           
 17314                           ;psect for function _setLoadSwitch
 17315  30D9                     _setLoadSwitch:	
 17316                           
 17317                           ;incstack = 0
 17318                           ; Regs used in _setLoadSwitch: [wreg+status,0]
 17319                           ;setLoadSwitch@state stored from wreg
 17320  30D9  0140               	movlb	0	; select bank0
 17321  30DA  00A4               	movwf	setLoadSwitch@state
 17322                           
 17323                           ;io.c: 6: void setLoadSwitch(uint8_t state);io.c: 7: {;io.c: 8:  LATCbits.LATC3 = state;
 17324  30DB  0C24               	rrf	setLoadSwitch@state,w
 17325  30DC  1C03               	skipc
 17326  30DD  119A               	bcf	26,3	;volatile
 17327  30DE  1803               	skipnc
 17328  30DF  159A               	bsf	26,3	;volatile
 17329  30E0  0008               	return
 17330  30E1                     __end_of_setLoadSwitch:	
 17331                           
 17332                           	psect	text44
 17333  3571                     __ptext44:	
 17334 ;; *************** function _setChannelSwitch *****************
 17335 ;; Defined at:
 17336 ;;		line 32 in file "io.c"
 17337 ;; Parameters:    Size  Location     Type
 17338 ;;  channel         1    wreg     unsigned char 
 17339 ;;  state           1   17[BANK0 ] unsigned char 
 17340 ;; Auto vars:     Size  Location     Type
 17341 ;;  channel         1   20[BANK0 ] unsigned char 
 17342 ;; Return value:  Size  Location     Type
 17343 ;;                  1    wreg      void 
 17344 ;; Registers used:
 17345 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17346 ;; Tracked objects:
 17347 ;;		On entry : 0/0
 17348 ;;		On exit  : 0/0
 17349 ;;		Unchanged: 0/0
 17350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17351 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17353 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17354 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17355 ;;Total ram usage:        4 bytes
 17356 ;; Hardware stack levels used:    1
 17357 ;; Hardware stack levels required when called:    3
 17358 ;; This function calls:
 17359 ;;		Nothing
 17360 ;; This function is called by:
 17361 ;;		_checkChannelStatus
 17362 ;;		_systemCheck
 17363 ;;		_controller
 17364 ;;		___checkChannelStatus
 17365 ;; This function uses a non-reentrant model
 17366 ;;
 17367                           
 17368                           
 17369                           ;psect for function _setChannelSwitch
 17370  3571                     _setChannelSwitch:	
 17371                           
 17372                           ;incstack = 0
 17373                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 17374                           ;setChannelSwitch@channel stored from wreg
 17375  3571  0140               	movlb	0	; select bank0
 17376  3572  00B4               	movwf	setChannelSwitch@channel
 17377                           
 17378                           ;io.c: 32: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 33: {;io.c: 34:  
      +                          switch(channel) {
 17379  3573  2DA1               	goto	l5698
 17380  3574                     l5686:	
 17381                           
 17382                           ;io.c: 36:   LATAbits.LATA0 = state;
 17383  3574  0C31               	rrf	setChannelSwitch@state,w
 17384  3575  1C03               	skipc
 17385  3576  1018               	bcf	24,0	;volatile
 17386  3577  1803               	skipnc
 17387  3578  1418               	bsf	24,0	;volatile
 17388                           
 17389                           ;io.c: 37:   break;
 17390  3579  0008               	return
 17391  357A                     l5688:	
 17392                           
 17393                           ;io.c: 39:   LATAbits.LATA1 = state;
 17394  357A  0C31               	rrf	setChannelSwitch@state,w
 17395  357B  1C03               	skipc
 17396  357C  1098               	bcf	24,1	;volatile
 17397  357D  1803               	skipnc
 17398  357E  1498               	bsf	24,1	;volatile
 17399                           
 17400                           ;io.c: 40:   break;
 17401  357F  0008               	return
 17402  3580                     l5690:	
 17403                           
 17404                           ;io.c: 42:   LATAbits.LATA2 = state;
 17405  3580  0C31               	rrf	setChannelSwitch@state,w
 17406  3581  1C03               	skipc
 17407  3582  1118               	bcf	24,2	;volatile
 17408  3583  1803               	skipnc
 17409  3584  1518               	bsf	24,2	;volatile
 17410                           
 17411                           ;io.c: 43:   break;
 17412  3585  0008               	return
 17413  3586                     l5692:	
 17414                           
 17415                           ;io.c: 45:   LATAbits.LATA3 = state;
 17416  3586  0C31               	rrf	setChannelSwitch@state,w
 17417  3587  1C03               	skipc
 17418  3588  1198               	bcf	24,3	;volatile
 17419  3589  1803               	skipnc
 17420  358A  1598               	bsf	24,3	;volatile
 17421                           
 17422                           ;io.c: 46:   break;
 17423  358B  0008               	return
 17424  358C                     l5694:	
 17425                           
 17426                           ;io.c: 48:   LATAbits.LATA0 = state;
 17427  358C  0C31               	rrf	setChannelSwitch@state,w
 17428  358D  1C03               	skipc
 17429  358E  1018               	bcf	24,0	;volatile
 17430  358F  1803               	skipnc
 17431  3590  1418               	bsf	24,0	;volatile
 17432                           
 17433                           ;io.c: 49:   LATAbits.LATA1 = state;
 17434  3591  0C31               	rrf	setChannelSwitch@state,w
 17435  3592  1C03               	skipc
 17436  3593  1098               	bcf	24,1	;volatile
 17437  3594  1803               	skipnc
 17438  3595  1498               	bsf	24,1	;volatile
 17439                           
 17440                           ;io.c: 50:   LATAbits.LATA2 = state;
 17441  3596  0C31               	rrf	setChannelSwitch@state,w
 17442  3597  1C03               	skipc
 17443  3598  1118               	bcf	24,2	;volatile
 17444  3599  1803               	skipnc
 17445  359A  1518               	bsf	24,2	;volatile
 17446                           
 17447                           ;io.c: 51:   LATAbits.LATA3 = state;
 17448  359B  0C31               	rrf	setChannelSwitch@state,w
 17449  359C  1C03               	skipc
 17450  359D  1198               	bcf	24,3	;volatile
 17451  359E  1803               	skipnc
 17452  359F  1598               	bsf	24,3	;volatile
 17453                           
 17454                           ;io.c: 52:   break;
 17455  35A0  0008               	return
 17456  35A1                     l5698:	
 17457  35A1  0834               	movf	setChannelSwitch@channel,w
 17458  35A2  00B2               	movwf	??_setChannelSwitch
 17459  35A3  01B3               	clrf	??_setChannelSwitch+1
 17460                           
 17461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17462                           ; Switch size 1, requested type "simple"
 17463                           ; Number of cases is 1, Range of values is 0 to 0
 17464                           ; switch strategies available:
 17465                           ; Name         Instructions Cycles
 17466                           ; simple_byte            4     3 (average)
 17467                           ; direct_byte            8     6 (fixed)
 17468                           ; jumptable            260     6 (fixed)
 17469                           ;	Chosen strategy is simple_byte
 17470  35A4  0833               	movf	??_setChannelSwitch+1,w
 17471  35A5  3A00               	xorlw	0	; case 0
 17472  35A6  1903               	skipnz
 17473  35A7  2DA9               	goto	l8676
 17474  35A8  2D8C               	goto	l5694
 17475  35A9                     l8676:	
 17476                           
 17477                           ; Switch size 1, requested type "simple"
 17478                           ; Number of cases is 4, Range of values is 0 to 3
 17479                           ; switch strategies available:
 17480                           ; Name         Instructions Cycles
 17481                           ; simple_byte           13     7 (average)
 17482                           ; direct_byte           14     6 (fixed)
 17483                           ; jumptable            260     6 (fixed)
 17484                           ;	Chosen strategy is simple_byte
 17485  35A9  0832               	movf	??_setChannelSwitch,w
 17486  35AA  3A00               	xorlw	0	; case 0
 17487  35AB  1903               	skipnz
 17488  35AC  2D74               	goto	l5686
 17489  35AD  3A01               	xorlw	1	; case 1
 17490  35AE  1903               	skipnz
 17491  35AF  2D7A               	goto	l5688
 17492  35B0  3A03               	xorlw	3	; case 2
 17493  35B1  1903               	skipnz
 17494  35B2  2D80               	goto	l5690
 17495  35B3  3A01               	xorlw	1	; case 3
 17496  35B4  1903               	skipnz
 17497  35B5  2D86               	goto	l5692
 17498  35B6  2D8C               	goto	l5694
 17499  35B7  0008               	return
 17500  35B8                     __end_of_setChannelSwitch:	
 17501                           
 17502                           	psect	text45
 17503  1000                     __ptext45:	
 17504 ;; *************** function _getLoadSwitchFault *****************
 17505 ;; Defined at:
 17506 ;;		line 16 in file "io.c"
 17507 ;; Parameters:    Size  Location     Type
 17508 ;;		None
 17509 ;; Auto vars:     Size  Location     Type
 17510 ;;		None
 17511 ;; Return value:  Size  Location     Type
 17512 ;;                  1    wreg      unsigned char 
 17513 ;; Registers used:
 17514 ;;		wreg, status,0
 17515 ;; Tracked objects:
 17516 ;;		On entry : 0/0
 17517 ;;		On exit  : 0/0
 17518 ;;		Unchanged: 0/0
 17519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17524 ;;Total ram usage:        0 bytes
 17525 ;; Hardware stack levels used:    1
 17526 ;; Hardware stack levels required when called:    3
 17527 ;; This function calls:
 17528 ;;		Nothing
 17529 ;; This function is called by:
 17530 ;;		_checkChannelStatus
 17531 ;;		___checkChannelStatus
 17532 ;; This function uses a non-reentrant model
 17533 ;;
 17534                           
 17535                           
 17536                           ;psect for function _getLoadSwitchFault
 17537  1000                     _getLoadSwitchFault:	
 17538                           
 17539                           ;io.c: 18:  return !PORTCbits.RC2;
 17540                           
 17541                           ;incstack = 0
 17542                           ; Regs used in _getLoadSwitchFault: [wreg+status,0]
 17543  1000  1003               	clrc
 17544  1001  0140               	movlb	0	; select bank0
 17545  1002  1D0E               	btfss	14,2	;volatile
 17546  1003  1403               	setc
 17547  1004  3000               	movlw	0
 17548  1005  3D09               	addwfc	9,w
 17549  1006  0008               	return
 17550  1007                     __end_of_getLoadSwitchFault:	
 17551                           
 17552                           	psect	text46
 17553  31C9                     __ptext46:	
 17554 ;; *************** function _getAnalogValue *****************
 17555 ;; Defined at:
 17556 ;;		line 59 in file "io.c"
 17557 ;; Parameters:    Size  Location     Type
 17558 ;;  channel         1    wreg     unsigned char 
 17559 ;; Auto vars:     Size  Location     Type
 17560 ;;  channel         1    7[BANK0 ] unsigned char 
 17561 ;; Return value:  Size  Location     Type
 17562 ;;                  2    4[BANK0 ] unsigned short 
 17563 ;; Registers used:
 17564 ;;		wreg, status,2, status,0
 17565 ;; Tracked objects:
 17566 ;;		On entry : 0/0
 17567 ;;		On exit  : 0/0
 17568 ;;		Unchanged: 0/0
 17569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17570 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17573 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17574 ;;Total ram usage:        4 bytes
 17575 ;; Hardware stack levels used:    1
 17576 ;; Hardware stack levels required when called:    3
 17577 ;; This function calls:
 17578 ;;		Nothing
 17579 ;; This function is called by:
 17580 ;;		_checkChannelStatus
 17581 ;;		_systemCheck
 17582 ;;		_getAnalogValues
 17583 ;;		___checkChannelStatus
 17584 ;; This function uses a non-reentrant model
 17585 ;;
 17586                           
 17587                           
 17588                           ;psect for function _getAnalogValue
 17589  31C9                     _getAnalogValue:	
 17590                           
 17591                           ;incstack = 0
 17592                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 17593                           ;getAnalogValue@channel stored from wreg
 17594  31C9  0140               	movlb	0	; select bank0
 17595  31CA  00A7               	movwf	getAnalogValue@channel
 17596                           
 17597                           ;io.c: 59: uint16_t getAnalogValue(uint8_t channel);io.c: 60: {;io.c: 61:  ADCON0bits.CH
      +                          S = channel;
 17598  31CB  0827               	movf	getAnalogValue@channel,w
 17599  31CC  00A6               	movwf	??_getAnalogValue
 17600  31CD  0DA6               	rlf	??_getAnalogValue,f
 17601  31CE  0DA6               	rlf	??_getAnalogValue,f
 17602  31CF  0141               	movlb	1	; select bank1
 17603  31D0  081D               	movf	29,w	;volatile
 17604  31D1  0140               	movlb	0	; select bank0
 17605  31D2  0626               	xorwf	??_getAnalogValue,w
 17606  31D3  3903               	andlw	-253
 17607  31D4  0626               	xorwf	??_getAnalogValue,w
 17608  31D5  0141               	movlb	1	; select bank1
 17609  31D6  009D               	movwf	29	;volatile
 17610                           
 17611                           ;io.c: 62:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 17612  31D7  3200               	nop2	;2 cycle nop
 17613  31D8  3200               	nop2	;2 cycle nop
 17614  31D9  0000               	nop
 17615                           
 17616                           ;io.c: 63:  ADCON0bits.GO = 1;
 17617  31DA  0141               	movlb	1	; select bank1
 17618  31DB  149D               	bsf	29,1	;volatile
 17619  31DC                     l702:	
 17620                           ;io.c: 64:  while (ADCON0bits.GO);
 17621                           
 17622  31DC  189D               	btfsc	29,1	;volatile
 17623  31DD  29DC               	goto	l702
 17624                           
 17625                           ;io.c: 65:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 17626  31DE  081C               	movf	28,w	;volatile
 17627  31DF  0140               	movlb	0	; select bank0
 17628  31E0  00A5               	movwf	?_getAnalogValue+1
 17629  31E1  0141               	movlb	1	; select bank1
 17630  31E2  081B               	movf	27,w	;volatile
 17631  31E3  0140               	movlb	0	; select bank0
 17632  31E4  00A4               	movwf	?_getAnalogValue
 17633  31E5  0008               	return
 17634  31E6                     __end_of_getAnalogValue:	
 17635                           
 17636                           	psect	text47
 17637  33F9                     __ptext47:	
 17638 ;; *************** function _error *****************
 17639 ;; Defined at:
 17640 ;;		line 13 in file "error.c"
 17641 ;; Parameters:    Size  Location     Type
 17642 ;;  error           1    wreg     enum E7831
 17643 ;; Auto vars:     Size  Location     Type
 17644 ;;  error           1   12[BANK0 ] enum E7831
 17645 ;; Return value:  Size  Location     Type
 17646 ;;                  1    wreg      void 
 17647 ;; Registers used:
 17648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17649 ;; Tracked objects:
 17650 ;;		On entry : 0/0
 17651 ;;		On exit  : 0/0
 17652 ;;		Unchanged: 0/0
 17653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17658 ;;Total ram usage:        2 bytes
 17659 ;; Hardware stack levels used:    1
 17660 ;; Hardware stack levels required when called:    4
 17661 ;; This function calls:
 17662 ;;		___awmod
 17663 ;; This function is called by:
 17664 ;;		_menu
 17665 ;;		_checkChannelStatus
 17666 ;;		_systemCheck
 17667 ;;		_checkSensor
 17668 ;;		___checkChannelStatus
 17669 ;; This function uses a non-reentrant model
 17670 ;;
 17671                           
 17672                           
 17673                           ;psect for function _error
 17674  33F9                     _error:	
 17675                           
 17676                           ;incstack = 0
 17677                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17678                           ;error@error stored from wreg
 17679  33F9  0140               	movlb	0	; select bank0
 17680  33FA  00AC               	movwf	error@error
 17681                           
 17682                           ;error.c: 13: void error(enum e_errorcode error);error.c: 14: {;error.c: 15:  errorMessa
      +                          geQueue[head] = error;
 17683  33FB  082C               	movf	error@error,w
 17684  33FC  00AB               	movwf	??_error
 17685  33FD  086A               	movf	_head,w
 17686  33FE  3EA0               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 17687  33FF  0086               	movwf	6
 17688  3400  3002               	movlw	2	; select bank5/6
 17689  3401  0087               	movwf	7
 17690  3402  082B               	movf	??_error,w
 17691  3403  0081               	movwf	1
 17692                           
 17693                           ;error.c: 16:  head = (head + 1) % 10;
 17694  3404  300A               	movlw	10
 17695  3405  00A4               	movwf	___awmod@divisor
 17696  3406  3000               	movlw	0
 17697  3407  00A5               	movwf	___awmod@divisor+1
 17698  3408  086A               	movf	_head,w
 17699  3409  3E01               	addlw	1
 17700  340A  00A6               	movwf	___awmod@dividend
 17701  340B  3000               	movlw	0
 17702  340C  1803               	skipnc
 17703  340D  3001               	movlw	1
 17704  340E  00A7               	movwf	___awmod@dividend+1
 17705  340F  31B5  252B  31B3   	fcall	___awmod
 17706  3412  0140               	movlb	0	; select bank0
 17707  3413  0824               	movf	?___awmod,w
 17708  3414  00AB               	movwf	??_error
 17709  3415  082B               	movf	??_error,w
 17710  3416  00EA               	movwf	_head
 17711                           
 17712                           ;error.c: 17:  if (head == tail)
 17713  3417  086A               	movf	_head,w
 17714  3418  0669               	xorwf	_tail,w
 17715  3419  1D03               	skipz
 17716  341A  0008               	return
 17717                           
 17718                           ;error.c: 18:   tail = (tail + 1) % 10;
 17719  341B  300A               	movlw	10
 17720  341C  00A4               	movwf	___awmod@divisor
 17721  341D  3000               	movlw	0
 17722  341E  00A5               	movwf	___awmod@divisor+1
 17723  341F  0869               	movf	_tail,w
 17724  3420  3E01               	addlw	1
 17725  3421  00A6               	movwf	___awmod@dividend
 17726  3422  3000               	movlw	0
 17727  3423  1803               	skipnc
 17728  3424  3001               	movlw	1
 17729  3425  00A7               	movwf	___awmod@dividend+1
 17730  3426  31B5  252B         	fcall	___awmod
 17731  3428  0140               	movlb	0	; select bank0
 17732  3429  0824               	movf	?___awmod,w
 17733  342A  00AB               	movwf	??_error
 17734  342B  082B               	movf	??_error,w
 17735  342C  00E9               	movwf	_tail
 17736  342D  0008               	return
 17737  342E                     __end_of_error:	
 17738                           
 17739                           	psect	text48
 17740  352B                     __ptext48:	
 17741 ;; *************** function ___awmod *****************
 17742 ;; Defined at:
 17743 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 17744 ;; Parameters:    Size  Location     Type
 17745 ;;  divisor         2    4[BANK0 ] int 
 17746 ;;  dividend        2    6[BANK0 ] int 
 17747 ;; Auto vars:     Size  Location     Type
 17748 ;;  sign            1   10[BANK0 ] unsigned char 
 17749 ;;  counter         1    9[BANK0 ] unsigned char 
 17750 ;; Return value:  Size  Location     Type
 17751 ;;                  2    4[BANK0 ] int 
 17752 ;; Registers used:
 17753 ;;		wreg, status,2, status,0
 17754 ;; Tracked objects:
 17755 ;;		On entry : 0/0
 17756 ;;		On exit  : 0/0
 17757 ;;		Unchanged: 0/0
 17758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17759 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17760 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17762 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17763 ;;Total ram usage:        7 bytes
 17764 ;; Hardware stack levels used:    1
 17765 ;; Hardware stack levels required when called:    3
 17766 ;; This function calls:
 17767 ;;		Nothing
 17768 ;; This function is called by:
 17769 ;;		_error
 17770 ;;		_removeLastError
 17771 ;;		_itoa
 17772 ;; This function uses a non-reentrant model
 17773 ;;
 17774                           
 17775                           
 17776                           ;psect for function ___awmod
 17777  352B                     ___awmod:	
 17778                           
 17779                           ;incstack = 0
 17780                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 17781  352B  0140               	movlb	0	; select bank0
 17782  352C  01AA               	clrf	___awmod@sign
 17783  352D  1FA7               	btfss	___awmod@dividend+1,7
 17784  352E  2D36               	goto	l4510
 17785  352F  09A6               	comf	___awmod@dividend,f
 17786  3530  09A7               	comf	___awmod@dividend+1,f
 17787  3531  0AA6               	incf	___awmod@dividend,f
 17788  3532  1903               	skipnz
 17789  3533  0AA7               	incf	___awmod@dividend+1,f
 17790  3534  01AA               	clrf	___awmod@sign
 17791  3535  0AAA               	incf	___awmod@sign,f
 17792  3536                     l4510:	
 17793  3536  1FA5               	btfss	___awmod@divisor+1,7
 17794  3537  2D3D               	goto	l4514
 17795  3538  09A4               	comf	___awmod@divisor,f
 17796  3539  09A5               	comf	___awmod@divisor+1,f
 17797  353A  0AA4               	incf	___awmod@divisor,f
 17798  353B  1903               	skipnz
 17799  353C  0AA5               	incf	___awmod@divisor+1,f
 17800  353D                     l4514:	
 17801  353D  0824               	movf	___awmod@divisor,w
 17802  353E  0425               	iorwf	___awmod@divisor+1,w
 17803  353F  1903               	btfsc	3,2
 17804  3540  2D64               	goto	l4532
 17805  3541  01A9               	clrf	___awmod@counter
 17806  3542  0AA9               	incf	___awmod@counter,f
 17807  3543                     l4522:	
 17808  3543  1BA5               	btfsc	___awmod@divisor+1,7
 17809  3544  2D4F               	goto	l4524
 17810  3545  3001               	movlw	1
 17811  3546                     u4485:	
 17812  3546  35A4               	lslf	___awmod@divisor,f
 17813  3547  0DA5               	rlf	___awmod@divisor+1,f
 17814  3548  0B89               	decfsz	9,f
 17815  3549  2D46               	goto	u4485
 17816  354A  3001               	movlw	1
 17817  354B  00A8               	movwf	??___awmod
 17818  354C  0828               	movf	??___awmod,w
 17819  354D  07A9               	addwf	___awmod@counter,f
 17820  354E  2D43               	goto	l4522
 17821  354F                     l4524:	
 17822  354F  0825               	movf	___awmod@divisor+1,w
 17823  3550  0227               	subwf	___awmod@dividend+1,w
 17824  3551  1D03               	skipz
 17825  3552  2D55               	goto	u4505
 17826  3553  0824               	movf	___awmod@divisor,w
 17827  3554  0226               	subwf	___awmod@dividend,w
 17828  3555                     u4505:	
 17829  3555  1C03               	skipc
 17830  3556  2D5B               	goto	l4528
 17831  3557  0824               	movf	___awmod@divisor,w
 17832  3558  02A6               	subwf	___awmod@dividend,f
 17833  3559  0825               	movf	___awmod@divisor+1,w
 17834  355A  3BA7               	subwfb	___awmod@dividend+1,f
 17835  355B                     l4528:	
 17836  355B  3001               	movlw	1
 17837  355C                     u4515:	
 17838  355C  36A5               	lsrf	___awmod@divisor+1,f
 17839  355D  0CA4               	rrf	___awmod@divisor,f
 17840  355E  0B89               	decfsz	9,f
 17841  355F  2D5C               	goto	u4515
 17842  3560  3001               	movlw	1
 17843  3561  02A9               	subwf	___awmod@counter,f
 17844  3562  1D03               	btfss	3,2
 17845  3563  2D4F               	goto	l4524
 17846  3564                     l4532:	
 17847  3564  082A               	movf	___awmod@sign,w
 17848  3565  1903               	btfsc	3,2
 17849  3566  2D6C               	goto	l4536
 17850  3567  09A6               	comf	___awmod@dividend,f
 17851  3568  09A7               	comf	___awmod@dividend+1,f
 17852  3569  0AA6               	incf	___awmod@dividend,f
 17853  356A  1903               	skipnz
 17854  356B  0AA7               	incf	___awmod@dividend+1,f
 17855  356C                     l4536:	
 17856  356C  0827               	movf	___awmod@dividend+1,w
 17857  356D  00A5               	movwf	?___awmod+1
 17858  356E  0826               	movf	___awmod@dividend,w
 17859  356F  00A4               	movwf	?___awmod
 17860  3570  0008               	return
 17861  3571                     __end_of___awmod:	
 17862                           
 17863                           	psect	text49
 17864  3797                     __ptext49:	
 17865 ;; *************** function _ema *****************
 17866 ;; Defined at:
 17867 ;;		line 64 in file "common.c"
 17868 ;; Parameters:    Size  Location     Type
 17869 ;;  in              2   16[BANK0 ] unsigned short 
 17870 ;;  average         2   18[BANK0 ] unsigned short 
 17871 ;;  alpha           4   20[BANK0 ] unsigned long 
 17872 ;; Auto vars:     Size  Location     Type
 17873 ;;  tmp0            4   32[BANK0 ] unsigned long 
 17874 ;; Return value:  Size  Location     Type
 17875 ;;                  2   16[BANK0 ] unsigned short 
 17876 ;; Registers used:
 17877 ;;		wreg, status,2, status,0, pclath, cstack
 17878 ;; Tracked objects:
 17879 ;;		On entry : 0/0
 17880 ;;		On exit  : 0/0
 17881 ;;		Unchanged: 0/0
 17882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17883 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17884 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17885 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17886 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17887 ;;Total ram usage:       20 bytes
 17888 ;; Hardware stack levels used:    1
 17889 ;; Hardware stack levels required when called:    4
 17890 ;; This function calls:
 17891 ;;		___lmul
 17892 ;; This function is called by:
 17893 ;;		_checkChannelStatus
 17894 ;;		_getAnalogValues
 17895 ;;		___checkChannelStatus
 17896 ;; This function uses a non-reentrant model
 17897 ;;
 17898                           
 17899                           
 17900                           ;psect for function _ema
 17901  3797                     _ema:	
 17902                           
 17903                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 17904                           
 17905                           ;incstack = 0
 17906                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 17907  3797  0140               	movlb	0	; select bank0
 17908  3798  0832               	movf	ema@average,w
 17909  3799  00A4               	movwf	___lmul@multiplier
 17910  379A  0833               	movf	ema@average+1,w
 17911  379B  00A5               	movwf	___lmul@multiplier+1
 17912  379C  01A6               	clrf	___lmul@multiplier+2
 17913  379D  01A7               	clrf	___lmul@multiplier+3
 17914  379E  3000               	movlw	0
 17915  379F  00B8               	movwf	??_ema
 17916  37A0  3000               	movlw	0
 17917  37A1  00B9               	movwf	??_ema+1
 17918  37A2  3001               	movlw	1
 17919  37A3  00BA               	movwf	??_ema+2
 17920  37A4  3000               	movlw	0
 17921  37A5  00BB               	movwf	??_ema+3
 17922  37A6  0834               	movf	ema@alpha,w
 17923  37A7  02B8               	subwf	??_ema,f
 17924  37A8  0835               	movf	ema@alpha+1,w
 17925  37A9  3BB9               	subwfb	??_ema+1,f
 17926  37AA  0836               	movf	ema@alpha+2,w
 17927  37AB  3BBA               	subwfb	??_ema+2,f
 17928  37AC  0837               	movf	ema@alpha+3,w
 17929  37AD  3BBB               	subwfb	??_ema+3,f
 17930  37AE  083B               	movf	??_ema+3,w
 17931  37AF  00AB               	movwf	___lmul@multiplicand+3
 17932  37B0  083A               	movf	??_ema+2,w
 17933  37B1  00AA               	movwf	___lmul@multiplicand+2
 17934  37B2  0839               	movf	??_ema+1,w
 17935  37B3  00A9               	movwf	___lmul@multiplicand+1
 17936  37B4  0838               	movf	??_ema,w
 17937  37B5  00A8               	movwf	___lmul@multiplicand
 17938  37B6  31B2  22C7  31B7   	fcall	___lmul
 17939  37B9  0140               	movlb	0	; select bank0
 17940  37BA  0824               	movf	?___lmul,w
 17941  37BB  00BC               	movwf	??_ema+4
 17942  37BC  0825               	movf	?___lmul+1,w
 17943  37BD  00BD               	movwf	??_ema+5
 17944  37BE  0826               	movf	?___lmul+2,w
 17945  37BF  00BE               	movwf	??_ema+6
 17946  37C0  0827               	movf	?___lmul+3,w
 17947  37C1  00BF               	movwf	??_ema+7
 17948  37C2  0830               	movf	ema@in,w
 17949  37C3  00A4               	movwf	___lmul@multiplier
 17950  37C4  0831               	movf	ema@in+1,w
 17951  37C5  00A5               	movwf	___lmul@multiplier+1
 17952  37C6  01A6               	clrf	___lmul@multiplier+2
 17953  37C7  01A7               	clrf	___lmul@multiplier+3
 17954  37C8  0837               	movf	ema@alpha+3,w
 17955  37C9  00AB               	movwf	___lmul@multiplicand+3
 17956  37CA  0836               	movf	ema@alpha+2,w
 17957  37CB  00AA               	movwf	___lmul@multiplicand+2
 17958  37CC  0835               	movf	ema@alpha+1,w
 17959  37CD  00A9               	movwf	___lmul@multiplicand+1
 17960  37CE  0834               	movf	ema@alpha,w
 17961  37CF  00A8               	movwf	___lmul@multiplicand
 17962  37D0  31B2  22C7  31B7   	fcall	___lmul
 17963  37D3  0140               	movlb	0	; select bank0
 17964  37D4  0824               	movf	?___lmul,w
 17965  37D5  07BC               	addwf	??_ema+4,f
 17966  37D6  0825               	movf	?___lmul+1,w
 17967  37D7  3DBD               	addwfc	??_ema+5,f
 17968  37D8  0826               	movf	?___lmul+2,w
 17969  37D9  3DBE               	addwfc	??_ema+6,f
 17970  37DA  0827               	movf	?___lmul+3,w
 17971  37DB  3DBF               	addwfc	??_ema+7,f
 17972  37DC  083F               	movf	??_ema+7,w
 17973  37DD  00C3               	movwf	ema@tmp0+3
 17974  37DE  083E               	movf	??_ema+6,w
 17975  37DF  00C2               	movwf	ema@tmp0+2
 17976  37E0  083D               	movf	??_ema+5,w
 17977  37E1  00C1               	movwf	ema@tmp0+1
 17978  37E2  083C               	movf	??_ema+4,w
 17979  37E3  00C0               	movwf	ema@tmp0
 17980                           
 17981                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 17982  37E4  3000               	movlw	0
 17983  37E5  00B8               	movwf	??_ema
 17984  37E6  3080               	movlw	128
 17985  37E7  00B9               	movwf	??_ema+1
 17986  37E8  3000               	movlw	0
 17987  37E9  00BA               	movwf	??_ema+2
 17988  37EA  3000               	movlw	0
 17989  37EB  00BB               	movwf	??_ema+3
 17990  37EC  0840               	movf	ema@tmp0,w
 17991  37ED  07B8               	addwf	??_ema,f
 17992  37EE  0841               	movf	ema@tmp0+1,w
 17993  37EF  3DB9               	addwfc	??_ema+1,f
 17994  37F0  0842               	movf	ema@tmp0+2,w
 17995  37F1  3DBA               	addwfc	??_ema+2,f
 17996  37F2  0843               	movf	ema@tmp0+3,w
 17997  37F3  3DBB               	addwfc	??_ema+3,f
 17998  37F4  3010               	movlw	16
 17999  37F5                     u6225:	
 18000  37F5  36BB               	lsrf	??_ema+3,f
 18001  37F6  0CBA               	rrf	??_ema+2,f
 18002  37F7  0CB9               	rrf	??_ema+1,f
 18003  37F8  0CB8               	rrf	??_ema,f
 18004  37F9  0B89               	decfsz	9,f
 18005  37FA  2FF5               	goto	u6225
 18006  37FB  0839               	movf	??_ema+1,w
 18007  37FC  00B1               	movwf	?_ema+1
 18008  37FD  0838               	movf	??_ema,w
 18009  37FE  00B0               	movwf	?_ema
 18010  37FF  0008               	return
 18011  3800                     __end_of_ema:	
 18012                           
 18013                           	psect	text50
 18014  32C7                     __ptext50:	
 18015 ;; *************** function ___lmul *****************
 18016 ;; Defined at:
 18017 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 18018 ;; Parameters:    Size  Location     Type
 18019 ;;  multiplier      4    4[BANK0 ] unsigned long 
 18020 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 18021 ;; Auto vars:     Size  Location     Type
 18022 ;;  product         4   12[BANK0 ] unsigned long 
 18023 ;; Return value:  Size  Location     Type
 18024 ;;                  4    4[BANK0 ] unsigned long 
 18025 ;; Registers used:
 18026 ;;		wreg, status,2, status,0
 18027 ;; Tracked objects:
 18028 ;;		On entry : 0/0
 18029 ;;		On exit  : 0/0
 18030 ;;		Unchanged: 0/0
 18031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18032 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18033 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18035 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18036 ;;Total ram usage:       12 bytes
 18037 ;; Hardware stack levels used:    1
 18038 ;; Hardware stack levels required when called:    3
 18039 ;; This function calls:
 18040 ;;		Nothing
 18041 ;; This function is called by:
 18042 ;;		_ema
 18043 ;; This function uses a non-reentrant model
 18044 ;;
 18045                           
 18046                           
 18047                           ;psect for function ___lmul
 18048  32C7                     ___lmul:	
 18049                           
 18050                           ;incstack = 0
 18051                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 18052  32C7  3000               	movlw	0
 18053  32C8  0140               	movlb	0	; select bank0
 18054  32C9  00AF               	movwf	___lmul@product+3
 18055  32CA  3000               	movlw	0
 18056  32CB  00AE               	movwf	___lmul@product+2
 18057  32CC  3000               	movlw	0
 18058  32CD  00AD               	movwf	___lmul@product+1
 18059  32CE  3000               	movlw	0
 18060  32CF  00AC               	movwf	___lmul@product
 18061  32D0                     l5122:	
 18062  32D0  1C24               	btfss	___lmul@multiplier,0
 18063  32D1  2ADA               	goto	l5126
 18064  32D2  0828               	movf	___lmul@multiplicand,w
 18065  32D3  07AC               	addwf	___lmul@product,f
 18066  32D4  0829               	movf	___lmul@multiplicand+1,w
 18067  32D5  3DAD               	addwfc	___lmul@product+1,f
 18068  32D6  082A               	movf	___lmul@multiplicand+2,w
 18069  32D7  3DAE               	addwfc	___lmul@product+2,f
 18070  32D8  082B               	movf	___lmul@multiplicand+3,w
 18071  32D9  3DAF               	addwfc	___lmul@product+3,f
 18072  32DA                     l5126:	
 18073  32DA  3001               	movlw	1
 18074  32DB                     u5655:	
 18075  32DB  35A8               	lslf	___lmul@multiplicand,f
 18076  32DC  0DA9               	rlf	___lmul@multiplicand+1,f
 18077  32DD  0DAA               	rlf	___lmul@multiplicand+2,f
 18078  32DE  0DAB               	rlf	___lmul@multiplicand+3,f
 18079  32DF  0B89               	decfsz	9,f
 18080  32E0  2ADB               	goto	u5655
 18081  32E1  3001               	movlw	1
 18082  32E2                     u5665:	
 18083  32E2  36A7               	lsrf	___lmul@multiplier+3,f
 18084  32E3  0CA6               	rrf	___lmul@multiplier+2,f
 18085  32E4  0CA5               	rrf	___lmul@multiplier+1,f
 18086  32E5  0CA4               	rrf	___lmul@multiplier,f
 18087  32E6  0B89               	decfsz	9,f
 18088  32E7  2AE2               	goto	u5665
 18089  32E8  0827               	movf	___lmul@multiplier+3,w
 18090  32E9  0426               	iorwf	___lmul@multiplier+2,w
 18091  32EA  0425               	iorwf	___lmul@multiplier+1,w
 18092  32EB  0424               	iorwf	___lmul@multiplier,w
 18093  32EC  1D03               	skipz
 18094  32ED  2AD0               	goto	l5122
 18095  32EE  082F               	movf	___lmul@product+3,w
 18096  32EF  00A7               	movwf	?___lmul+3
 18097  32F0  082E               	movf	___lmul@product+2,w
 18098  32F1  00A6               	movwf	?___lmul+2
 18099  32F2  082D               	movf	___lmul@product+1,w
 18100  32F3  00A5               	movwf	?___lmul+1
 18101  32F4  082C               	movf	___lmul@product,w
 18102  32F5  00A4               	movwf	?___lmul
 18103  32F6  0008               	return
 18104  32F7                     __end_of___lmul:	
 18105                           
 18106                           	psect	text51
 18107  3648                     __ptext51:	
 18108 ;; *************** function ___fleq *****************
 18109 ;; Defined at:
 18110 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 18111 ;; Parameters:    Size  Location     Type
 18112 ;;  ff1             4    4[BANK0 ] unsigned long 
 18113 ;;  ff2             4    8[BANK0 ] unsigned long 
 18114 ;; Auto vars:     Size  Location     Type
 18115 ;;		None
 18116 ;; Return value:  Size  Location     Type
 18117 ;;		None               void
 18118 ;; Registers used:
 18119 ;;		wreg, status,2, status,0
 18120 ;; Tracked objects:
 18121 ;;		On entry : 0/0
 18122 ;;		On exit  : 0/0
 18123 ;;		Unchanged: 0/0
 18124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18125 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18127 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18128 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18129 ;;Total ram usage:       12 bytes
 18130 ;; Hardware stack levels used:    1
 18131 ;; Hardware stack levels required when called:    3
 18132 ;; This function calls:
 18133 ;;		Nothing
 18134 ;; This function is called by:
 18135 ;;		_channelSetup
 18136 ;;		_setOutputPower
 18137 ;;		_checkChannelStatus
 18138 ;;		___checkChannelStatus
 18139 ;; This function uses a non-reentrant model
 18140 ;;
 18141                           
 18142                           
 18143                           ;psect for function ___fleq
 18144  3648                     ___fleq:	
 18145                           
 18146                           ;incstack = 0
 18147                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 18148  3648  3000               	movlw	0
 18149  3649  0140               	movlb	0	; select bank0
 18150  364A  0524               	andwf	___fleq@ff1,w
 18151  364B  00AC               	movwf	??___fleq
 18152  364C  3000               	movlw	0
 18153  364D  0525               	andwf	___fleq@ff1+1,w
 18154  364E  00AD               	movwf	??___fleq+1
 18155  364F  3080               	movlw	128
 18156  3650  0526               	andwf	___fleq@ff1+2,w
 18157  3651  00AE               	movwf	??___fleq+2
 18158  3652  307F               	movlw	127
 18159  3653  0527               	andwf	___fleq@ff1+3,w
 18160  3654  00AF               	movwf	??___fleq+3
 18161  3655  082F               	movf	??___fleq+3,w
 18162  3656  042E               	iorwf	??___fleq+2,w
 18163  3657  042D               	iorwf	??___fleq+1,w
 18164  3658  042C               	iorwf	??___fleq,w
 18165  3659  1D03               	skipz
 18166  365A  2E63               	goto	l1209
 18167  365B  3000               	movlw	0
 18168  365C  00A7               	movwf	___fleq@ff1+3
 18169  365D  3000               	movlw	0
 18170  365E  00A6               	movwf	___fleq@ff1+2
 18171  365F  3000               	movlw	0
 18172  3660  00A5               	movwf	___fleq@ff1+1
 18173  3661  3000               	movlw	0
 18174  3662  00A4               	movwf	___fleq@ff1
 18175  3663                     l1209:	
 18176  3663  3000               	movlw	0
 18177  3664  0528               	andwf	___fleq@ff2,w
 18178  3665  00AC               	movwf	??___fleq
 18179  3666  3000               	movlw	0
 18180  3667  0529               	andwf	___fleq@ff2+1,w
 18181  3668  00AD               	movwf	??___fleq+1
 18182  3669  3080               	movlw	128
 18183  366A  052A               	andwf	___fleq@ff2+2,w
 18184  366B  00AE               	movwf	??___fleq+2
 18185  366C  307F               	movlw	127
 18186  366D  052B               	andwf	___fleq@ff2+3,w
 18187  366E  00AF               	movwf	??___fleq+3
 18188  366F  082F               	movf	??___fleq+3,w
 18189  3670  042E               	iorwf	??___fleq+2,w
 18190  3671  042D               	iorwf	??___fleq+1,w
 18191  3672  042C               	iorwf	??___fleq,w
 18192  3673  1D03               	skipz
 18193  3674  2E7D               	goto	l1210
 18194  3675  3000               	movlw	0
 18195  3676  00AB               	movwf	___fleq@ff2+3
 18196  3677  3000               	movlw	0
 18197  3678  00AA               	movwf	___fleq@ff2+2
 18198  3679  3000               	movlw	0
 18199  367A  00A9               	movwf	___fleq@ff2+1
 18200  367B  3000               	movlw	0
 18201  367C  00A8               	movwf	___fleq@ff2
 18202  367D                     l1210:	
 18203  367D  082B               	movf	___fleq@ff2+3,w
 18204  367E  0627               	xorwf	___fleq@ff1+3,w
 18205  367F  1D03               	skipz
 18206  3680  2E8B               	goto	u5705
 18207  3681  082A               	movf	___fleq@ff2+2,w
 18208  3682  0626               	xorwf	___fleq@ff1+2,w
 18209  3683  1D03               	skipz
 18210  3684  2E8B               	goto	u5705
 18211  3685  0829               	movf	___fleq@ff2+1,w
 18212  3686  0625               	xorwf	___fleq@ff1+1,w
 18213  3687  1D03               	skipz
 18214  3688  2E8B               	goto	u5705
 18215  3689  0828               	movf	___fleq@ff2,w
 18216  368A  0624               	xorwf	___fleq@ff1,w
 18217  368B                     u5705:	
 18218  368B  1903               	skipnz
 18219  368C  2E8F               	goto	l5142
 18220  368D  1003               	clrc
 18221  368E  0008               	return
 18222  368F                     l5142:	
 18223  368F  1403               	setc
 18224  3690  0008               	return
 18225  3691                     __end_of___fleq:	
 18226                           
 18227                           	psect	text52
 18228  0BC8                     __ptext52:	
 18229 ;; *************** function _channelThing *****************
 18230 ;; Defined at:
 18231 ;;		line 467 in file "system.c"
 18232 ;; Parameters:    Size  Location     Type
 18233 ;;  data            2   63[BANK1 ] PTR struct .
 18234 ;;		 -> data(166), 
 18235 ;; Auto vars:     Size  Location     Type
 18236 ;;  grpB            4   18[BANK4 ] char [4]
 18237 ;;  grpA            4   12[BANK4 ] char [4]
 18238 ;;  totalGrpB       4    8[BANK4 ] float 
 18239 ;;  totalGrpA       4    4[BANK4 ] float 
 18240 ;;  total           4    0[BANK4 ] float 
 18241 ;;  n               1   22[BANK4 ] unsigned char 
 18242 ;;  numGrpB         1   17[BANK4 ] unsigned char 
 18243 ;;  numGrpA         1   16[BANK4 ] unsigned char 
 18244 ;; Return value:  Size  Location     Type
 18245 ;;                  1    wreg      void 
 18246 ;; Registers used:
 18247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18248 ;; Tracked objects:
 18249 ;;		On entry : 0/0
 18250 ;;		On exit  : 0/0
 18251 ;;		Unchanged: 0/0
 18252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18253 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18254 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18255 ;;      Temps:          0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18256 ;;      Totals:         0       0      13       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18257 ;;Total ram usage:       36 bytes
 18258 ;; Hardware stack levels used:    1
 18259 ;; Hardware stack levels required when called:    7
 18260 ;; This function calls:
 18261 ;;		___bmul
 18262 ;;		___fladd
 18263 ;;		___fldiv
 18264 ;;		___flge
 18265 ;;		___flmul
 18266 ;;		___wmul
 18267 ;;		___xxtofl
 18268 ;;		_qsort
 18269 ;; This function is called by:
 18270 ;;		_main
 18271 ;; This function uses a non-reentrant model
 18272 ;;
 18273                           
 18274                           
 18275                           ;psect for function _channelThing
 18276  0BC8                     _channelThing:	
 18277                           
 18278                           ;system.c: 467: void channelThing(t_globalData *data);system.c: 468: {;system.c: 469:  u
      +                          int8_t n;;system.c: 470:  float total, totalGrpA, totalGrpB;;system.c: 471:  uint8_t num
      +                          GrpA, numGrpB;;system.c: 472:  int8_t grpA[4], grpB[4];;system.c: 475:  for(n = 0; n < 4
      +                          ; n++) {
 18279                           
 18280                           ;incstack = 0
 18281                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18282  0BC8  0144               	movlb	4	; select bank4
 18283  0BC9  01DF               	clrf	channelThing@n^(0+512)
 18284  0BCA                     l8280:	
 18285                           
 18286                           ;system.c: 476:   grpA[n] = -1;
 18287  0BCA  085F               	movf	channelThing@n^(0+512),w
 18288  0BCB  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18289  0BCC  0086               	movwf	6
 18290  0BCD  3002               	movlw	2	; select bank4/5
 18291  0BCE  0087               	movwf	7
 18292  0BCF  0181               	clrf	1
 18293  0BD0  0381               	decf	1,f
 18294                           
 18295                           ;system.c: 477:   grpB[n] = -1;
 18296  0BD1  085F               	movf	channelThing@n^(0+512),w
 18297  0BD2  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18298  0BD3  0086               	movwf	6
 18299  0BD4  3002               	movlw	2	; select bank4/5
 18300  0BD5  0087               	movwf	7
 18301  0BD6  0181               	clrf	1
 18302  0BD7  0381               	decf	1,f
 18303                           
 18304                           ;system.c: 479:   virtChannels[n].phyChanNum = n;
 18305  0BD8  085F               	movf	channelThing@n^(0+512),w
 18306  0BD9  0141               	movlb	1	; select bank1
 18307  0BDA  00E1               	movwf	??_channelThing^(0+128)
 18308  0BDB  01E2               	clrf	(??_channelThing^(0+128)+1)
 18309  0BDC  3009               	movlw	9
 18310  0BDD  00E3               	movwf	(??_channelThing+2)^(0+128)
 18311  0BDE  0863               	movf	(??_channelThing+2)^(0+128),w
 18312  0BDF  0140               	movlb	0	; select bank0
 18313  0BE0  00AD               	movwf	___bmul@multiplicand
 18314  0BE1  0144               	movlb	4	; select bank4
 18315  0BE2  085F               	movf	channelThing@n^(0+512),w
 18316  0BE3  31A0  2002  318B   	fcall	___bmul
 18317  0BE6  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18318  0BE7  0086               	movwf	6
 18319  0BE8  3002               	movlw	2	; select bank5/6
 18320  0BE9  0087               	movwf	7
 18321  0BEA  0141               	movlb	1	; select bank1
 18322  0BEB  0861               	movf	??_channelThing^(0+128),w
 18323  0BEC  3FC0               	movwi [0]fsr1
 18324  0BED  0862               	movf	(??_channelThing+1)^(0+128),w
 18325  0BEE  3FC1               	movwi [1]fsr1
 18326                           
 18327                           ;system.c: 480:   virtChannels[n].current = data->chData[n].current;
 18328  0BEF  0144               	movlb	4	; select bank4
 18329  0BF0  085F               	movf	channelThing@n^(0+512),w
 18330  0BF1  0141               	movlb	1	; select bank1
 18331  0BF2  00E1               	movwf	??_channelThing^(0+128)
 18332  0BF3  01E2               	clrf	(??_channelThing^(0+128)+1)
 18333  0BF4  0861               	movf	??_channelThing^(0+128),w
 18334  0BF5  0140               	movlb	0	; select bank0
 18335  0BF6  00B1               	movwf	___wmul@multiplier
 18336  0BF7  0141               	movlb	1	; select bank1
 18337  0BF8  0862               	movf	(??_channelThing+1)^(0+128),w
 18338  0BF9  0140               	movlb	0	; select bank0
 18339  0BFA  00B2               	movwf	___wmul@multiplier+1
 18340  0BFB  301F               	movlw	31
 18341  0BFC  00B3               	movwf	___wmul@multiplicand
 18342  0BFD  3000               	movlw	0
 18343  0BFE  00B4               	movwf	___wmul@multiplicand+1
 18344  0BFF  31B1  21AD  318B   	fcall	___wmul
 18345  0C02  0140               	movlb	0	; select bank0
 18346  0C03  0831               	movf	?___wmul,w
 18347  0C04  0141               	movlb	1	; select bank1
 18348  0C05  075F               	addwf	channelThing@data^(0+128),w
 18349  0C06  00E3               	movwf	(??_channelThing+2)^(0+128)
 18350  0C07  0140               	movlb	0	; select bank0
 18351  0C08  0832               	movf	?___wmul+1,w
 18352  0C09  0141               	movlb	1	; select bank1
 18353  0C0A  3D60               	addwfc	(channelThing@data+1)^(0+128),w
 18354  0C0B  00E4               	movwf	(??_channelThing+3)^(0+128)
 18355  0C0C  0863               	movf	(??_channelThing+2)^(0+128),w
 18356  0C0D  3E2A               	addlw	42
 18357  0C0E  0086               	movwf	6
 18358  0C0F  3000               	movlw	0
 18359  0C10  3D64               	addwfc	(??_channelThing+3)^(0+128),w
 18360  0C11  0087               	movwf	7
 18361  0C12  3F40               	moviw [0]fsr1
 18362  0C13  00E5               	movwf	(??_channelThing+4)^(0+128)
 18363  0C14  3F41               	moviw [1]fsr1
 18364  0C15  00E6               	movwf	((??_channelThing+4)^(0+128)+1)
 18365  0C16  3F42               	moviw [2]fsr1
 18366  0C17  00E7               	movwf	((??_channelThing+4)^(0+128)+2)
 18367  0C18  3F43               	moviw [3]fsr1
 18368  0C19  00E8               	movwf	((??_channelThing+4)^(0+128)+3)
 18369  0C1A  3009               	movlw	9
 18370  0C1B  00E9               	movwf	(??_channelThing+8)^(0+128)
 18371  0C1C  0869               	movf	(??_channelThing+8)^(0+128),w
 18372  0C1D  0140               	movlb	0	; select bank0
 18373  0C1E  00AD               	movwf	___bmul@multiplicand
 18374  0C1F  0144               	movlb	4	; select bank4
 18375  0C20  085F               	movf	channelThing@n^(0+512),w
 18376  0C21  31A0  2002  318B   	fcall	___bmul
 18377  0C24  3EAC               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18378  0C25  0086               	movwf	6
 18379  0C26  3002               	movlw	2	; select bank5/6
 18380  0C27  0087               	movwf	7
 18381  0C28  0141               	movlb	1	; select bank1
 18382  0C29  0865               	movf	(??_channelThing+4)^(0+128),w
 18383  0C2A  3FC0               	movwi [0]fsr1
 18384  0C2B  0866               	movf	(??_channelThing+5)^(0+128),w
 18385  0C2C  3FC1               	movwi [1]fsr1
 18386  0C2D  0867               	movf	(??_channelThing+6)^(0+128),w
 18387  0C2E  3FC2               	movwi [2]fsr1
 18388  0C2F  0868               	movf	(??_channelThing+7)^(0+128),w
 18389  0C30  3FC3               	movwi [3]fsr1
 18390                           
 18391                           ;system.c: 481:   virtChannels[n].DC = data->chData[n].DCreq;
 18392  0C31  0144               	movlb	4	; select bank4
 18393  0C32  085F               	movf	channelThing@n^(0+512),w
 18394  0C33  0141               	movlb	1	; select bank1
 18395  0C34  00E1               	movwf	??_channelThing^(0+128)
 18396  0C35  01E2               	clrf	(??_channelThing^(0+128)+1)
 18397  0C36  0861               	movf	??_channelThing^(0+128),w
 18398  0C37  0140               	movlb	0	; select bank0
 18399  0C38  00B1               	movwf	___wmul@multiplier
 18400  0C39  0141               	movlb	1	; select bank1
 18401  0C3A  0862               	movf	(??_channelThing+1)^(0+128),w
 18402  0C3B  0140               	movlb	0	; select bank0
 18403  0C3C  00B2               	movwf	___wmul@multiplier+1
 18404  0C3D  301F               	movlw	31
 18405  0C3E  00B3               	movwf	___wmul@multiplicand
 18406  0C3F  3000               	movlw	0
 18407  0C40  00B4               	movwf	___wmul@multiplicand+1
 18408  0C41  31B1  21AD  318B   	fcall	___wmul
 18409  0C44  0140               	movlb	0	; select bank0
 18410  0C45  0831               	movf	?___wmul,w
 18411  0C46  0141               	movlb	1	; select bank1
 18412  0C47  075F               	addwf	channelThing@data^(0+128),w
 18413  0C48  00E3               	movwf	(??_channelThing+2)^(0+128)
 18414  0C49  0140               	movlb	0	; select bank0
 18415  0C4A  0832               	movf	?___wmul+1,w
 18416  0C4B  0141               	movlb	1	; select bank1
 18417  0C4C  3D60               	addwfc	(channelThing@data+1)^(0+128),w
 18418  0C4D  00E4               	movwf	(??_channelThing+3)^(0+128)
 18419  0C4E  0863               	movf	(??_channelThing+2)^(0+128),w
 18420  0C4F  3E3E               	addlw	62
 18421  0C50  0086               	movwf	6
 18422  0C51  3000               	movlw	0
 18423  0C52  3D64               	addwfc	(??_channelThing+3)^(0+128),w
 18424  0C53  0087               	movwf	7
 18425  0C54  0801               	movf	1,w
 18426  0C55  00E5               	movwf	(??_channelThing+4)^(0+128)
 18427  0C56  3009               	movlw	9
 18428  0C57  00E6               	movwf	(??_channelThing+5)^(0+128)
 18429  0C58  0866               	movf	(??_channelThing+5)^(0+128),w
 18430  0C59  0140               	movlb	0	; select bank0
 18431  0C5A  00AD               	movwf	___bmul@multiplicand
 18432  0C5B  0144               	movlb	4	; select bank4
 18433  0C5C  085F               	movf	channelThing@n^(0+512),w
 18434  0C5D  31A0  2002  318B   	fcall	___bmul
 18435  0C60  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18436  0C61  0086               	movwf	6
 18437  0C62  3002               	movlw	2	; select bank5/6
 18438  0C63  0087               	movwf	7
 18439  0C64  0141               	movlb	1	; select bank1
 18440  0C65  0865               	movf	(??_channelThing+4)^(0+128),w
 18441  0C66  0081               	movwf	1
 18442                           
 18443                           ;system.c: 482:  }
 18444  0C67  3001               	movlw	1
 18445  0C68  00E1               	movwf	??_channelThing^(0+128)
 18446  0C69  0861               	movf	??_channelThing^(0+128),w
 18447  0C6A  0144               	movlb	4	; select bank4
 18448  0C6B  07DF               	addwf	channelThing@n^(0+512),f
 18449  0C6C  3004               	movlw	4
 18450  0C6D  025F               	subwf	channelThing@n^(0+512),w
 18451  0C6E  1C03               	skipc
 18452  0C6F  2BCA               	goto	l8280
 18453                           
 18454                           ;system.c: 485:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 18455  0C70  3004               	movlw	4
 18456  0C71  0141               	movlb	1	; select bank1
 18457  0C72  00C7               	movwf	qsort@nel^(0+128)
 18458  0C73  3000               	movlw	0
 18459  0C74  00C8               	movwf	(qsort@nel^(0+128)+1)
 18460  0C75  3009               	movlw	9
 18461  0C76  00C9               	movwf	qsort@width^(0+128)
 18462  0C77  3000               	movlw	0
 18463  0C78  00CA               	movwf	(qsort@width^(0+128)+1)
 18464  0C79  302E               	movlw	low _sortCur
 18465  0C7A  00CB               	movwf	qsort@compar^(0+128)
 18466  0C7B  3034               	movlw	high _sortCur
 18467  0C7C  00CC               	movwf	(qsort@compar^(0+128)+1)
 18468  0C7D  30AA               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 18469  0C7E  319A  2285  318B   	fcall	_qsort
 18470                           
 18471                           ;system.c: 487:  total = totalGrpA = totalGrpB = 0;
 18472  0C81  3000               	movlw	0
 18473  0C82  0144               	movlb	4	; select bank4
 18474  0C83  00D4               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18475  0C84  3000               	movlw	0
 18476  0C85  00D3               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18477  0C86  3000               	movlw	0
 18478  0C87  00D2               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18479  0C88  3000               	movlw	0
 18480  0C89  00D1               	movwf	channelThing@totalGrpB^(0+512)
 18481  0C8A  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18482  0C8B  00D0               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18483  0C8C  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18484  0C8D  00CF               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18485  0C8E  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18486  0C8F  00CE               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18487  0C90  0851               	movf	channelThing@totalGrpB^(0+512),w
 18488  0C91  00CD               	movwf	channelThing@totalGrpA^(0+512)
 18489  0C92  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18490  0C93  00CC               	movwf	(channelThing@total+3)^(0+512)
 18491  0C94  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18492  0C95  00CB               	movwf	(channelThing@total+2)^(0+512)
 18493  0C96  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18494  0C97  00CA               	movwf	(channelThing@total+1)^(0+512)
 18495  0C98  084D               	movf	channelThing@totalGrpA^(0+512),w
 18496  0C99  00C9               	movwf	channelThing@total^(0+512)
 18497                           
 18498                           ;system.c: 488:  numGrpA = numGrpB = 0;
 18499  0C9A  01DA               	clrf	channelThing@numGrpB^(0+512)
 18500  0C9B  01D9               	clrf	channelThing@numGrpA^(0+512)
 18501                           
 18502                           ;system.c: 492:  for(n = 0; n < 4; n++) {
 18503  0C9C  01DF               	clrf	channelThing@n^(0+512)
 18504  0C9D                     l8304:	
 18505                           
 18506                           ;system.c: 493:   total += virtChannels[n].current;
 18507  0C9D  3009               	movlw	9
 18508  0C9E  0141               	movlb	1	; select bank1
 18509  0C9F  00E1               	movwf	??_channelThing^(0+128)
 18510  0CA0  0861               	movf	??_channelThing^(0+128),w
 18511  0CA1  0140               	movlb	0	; select bank0
 18512  0CA2  00AD               	movwf	___bmul@multiplicand
 18513  0CA3  0144               	movlb	4	; select bank4
 18514  0CA4  085F               	movf	channelThing@n^(0+512),w
 18515  0CA5  31A0  2002  318B   	fcall	___bmul
 18516  0CA8  3EAC               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18517  0CA9  0086               	movwf	6
 18518  0CAA  3002               	movlw	2	; select bank5/6
 18519  0CAB  0087               	movwf	7
 18520  0CAC  3F40               	moviw [0]fsr1
 18521  0CAD  0140               	movlb	0	; select bank0
 18522  0CAE  00DF               	movwf	___fladd@b
 18523  0CAF  3F41               	moviw [1]fsr1
 18524  0CB0  00E0               	movwf	___fladd@b+1
 18525  0CB1  3F42               	moviw [2]fsr1
 18526  0CB2  00E1               	movwf	___fladd@b+2
 18527  0CB3  3F43               	moviw [3]fsr1
 18528  0CB4  00E2               	movwf	___fladd@b+3
 18529  0CB5  0144               	movlb	4	; select bank4
 18530  0CB6  084C               	movf	(channelThing@total+3)^(0+512),w
 18531  0CB7  0140               	movlb	0	; select bank0
 18532  0CB8  00E6               	movwf	___fladd@a+3
 18533  0CB9  0144               	movlb	4	; select bank4
 18534  0CBA  084B               	movf	(channelThing@total+2)^(0+512),w
 18535  0CBB  0140               	movlb	0	; select bank0
 18536  0CBC  00E5               	movwf	___fladd@a+2
 18537  0CBD  0144               	movlb	4	; select bank4
 18538  0CBE  084A               	movf	(channelThing@total+1)^(0+512),w
 18539  0CBF  0140               	movlb	0	; select bank0
 18540  0CC0  00E4               	movwf	___fladd@a+1
 18541  0CC1  0144               	movlb	4	; select bank4
 18542  0CC2  0849               	movf	channelThing@total^(0+512),w
 18543  0CC3  0140               	movlb	0	; select bank0
 18544  0CC4  00E3               	movwf	___fladd@a
 18545  0CC5  3185  2592  318B   	fcall	___fladd
 18546  0CC8  0140               	movlb	0	; select bank0
 18547  0CC9  0862               	movf	?___fladd+3,w
 18548  0CCA  0144               	movlb	4	; select bank4
 18549  0CCB  00CC               	movwf	(channelThing@total+3)^(0+512)
 18550  0CCC  0140               	movlb	0	; select bank0
 18551  0CCD  0861               	movf	?___fladd+2,w
 18552  0CCE  0144               	movlb	4	; select bank4
 18553  0CCF  00CB               	movwf	(channelThing@total+2)^(0+512)
 18554  0CD0  0140               	movlb	0	; select bank0
 18555  0CD1  0860               	movf	?___fladd+1,w
 18556  0CD2  0144               	movlb	4	; select bank4
 18557  0CD3  00CA               	movwf	(channelThing@total+1)^(0+512)
 18558  0CD4  0140               	movlb	0	; select bank0
 18559  0CD5  085F               	movf	?___fladd,w
 18560  0CD6  0144               	movlb	4	; select bank4
 18561  0CD7  00C9               	movwf	channelThing@total^(0+512)
 18562                           
 18563                           ;system.c: 494:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 18564  0CD8  3040               	movlw	64
 18565  0CD9  0141               	movlb	1	; select bank1
 18566  0CDA  00B5               	movwf	(___flge@ff1+3)^(0+128)
 18567  0CDB  3060               	movlw	96
 18568  0CDC  00B4               	movwf	(___flge@ff1+2)^(0+128)
 18569  0CDD  3000               	movlw	0
 18570  0CDE  00B3               	movwf	(___flge@ff1+1)^(0+128)
 18571  0CDF  3000               	movlw	0
 18572  0CE0  00B2               	movwf	___flge@ff1^(0+128)
 18573  0CE1  0144               	movlb	4	; select bank4
 18574  0CE2  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18575  0CE3  0140               	movlb	0	; select bank0
 18576  0CE4  00E2               	movwf	___fladd@b+3
 18577  0CE5  0144               	movlb	4	; select bank4
 18578  0CE6  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18579  0CE7  0140               	movlb	0	; select bank0
 18580  0CE8  00E1               	movwf	___fladd@b+2
 18581  0CE9  0144               	movlb	4	; select bank4
 18582  0CEA  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18583  0CEB  0140               	movlb	0	; select bank0
 18584  0CEC  00E0               	movwf	___fladd@b+1
 18585  0CED  0144               	movlb	4	; select bank4
 18586  0CEE  084D               	movf	channelThing@totalGrpA^(0+512),w
 18587  0CEF  0140               	movlb	0	; select bank0
 18588  0CF0  00DF               	movwf	___fladd@b
 18589  0CF1  3009               	movlw	9
 18590  0CF2  0141               	movlb	1	; select bank1
 18591  0CF3  00E1               	movwf	??_channelThing^(0+128)
 18592  0CF4  0861               	movf	??_channelThing^(0+128),w
 18593  0CF5  0140               	movlb	0	; select bank0
 18594  0CF6  00AD               	movwf	___bmul@multiplicand
 18595  0CF7  0144               	movlb	4	; select bank4
 18596  0CF8  085F               	movf	channelThing@n^(0+512),w
 18597  0CF9  31A0  2002  318B   	fcall	___bmul
 18598  0CFC  3EAC               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18599  0CFD  0086               	movwf	6
 18600  0CFE  3002               	movlw	2	; select bank5/6
 18601  0CFF  0087               	movwf	7
 18602  0D00  3F40               	moviw [0]fsr1
 18603  0D01  0140               	movlb	0	; select bank0
 18604  0D02  00E3               	movwf	___fladd@a
 18605  0D03  3F41               	moviw [1]fsr1
 18606  0D04  00E4               	movwf	___fladd@a+1
 18607  0D05  3F42               	moviw [2]fsr1
 18608  0D06  00E5               	movwf	___fladd@a+2
 18609  0D07  3F43               	moviw [3]fsr1
 18610  0D08  00E6               	movwf	___fladd@a+3
 18611  0D09  3185  2592  318B   	fcall	___fladd
 18612  0D0C  0140               	movlb	0	; select bank0
 18613  0D0D  0862               	movf	?___fladd+3,w
 18614  0D0E  0141               	movlb	1	; select bank1
 18615  0D0F  00B9               	movwf	(___flge@ff2+3)^(0+128)
 18616  0D10  0140               	movlb	0	; select bank0
 18617  0D11  0861               	movf	?___fladd+2,w
 18618  0D12  0141               	movlb	1	; select bank1
 18619  0D13  00B8               	movwf	(___flge@ff2+2)^(0+128)
 18620  0D14  0140               	movlb	0	; select bank0
 18621  0D15  0860               	movf	?___fladd+1,w
 18622  0D16  0141               	movlb	1	; select bank1
 18623  0D17  00B7               	movwf	(___flge@ff2+1)^(0+128)
 18624  0D18  0140               	movlb	0	; select bank0
 18625  0D19  085F               	movf	?___fladd,w
 18626  0D1A  0141               	movlb	1	; select bank1
 18627  0D1B  00B6               	movwf	___flge@ff2^(0+128)
 18628  0D1C  31AA  2277  318B   	fcall	___flge
 18629  0D1F  1C03               	btfss	3,0
 18630  0D20  2D6E               	goto	l8312
 18631                           
 18632                           ;system.c: 495:    totalGrpA += virtChannels[n].current;
 18633  0D21  3009               	movlw	9
 18634  0D22  0141               	movlb	1	; select bank1
 18635  0D23  00E1               	movwf	??_channelThing^(0+128)
 18636  0D24  0861               	movf	??_channelThing^(0+128),w
 18637  0D25  0140               	movlb	0	; select bank0
 18638  0D26  00AD               	movwf	___bmul@multiplicand
 18639  0D27  0144               	movlb	4	; select bank4
 18640  0D28  085F               	movf	channelThing@n^(0+512),w
 18641  0D29  31A0  2002  318B   	fcall	___bmul
 18642  0D2C  3EAC               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18643  0D2D  0086               	movwf	6
 18644  0D2E  3002               	movlw	2	; select bank5/6
 18645  0D2F  0087               	movwf	7
 18646  0D30  3F40               	moviw [0]fsr1
 18647  0D31  0140               	movlb	0	; select bank0
 18648  0D32  00DF               	movwf	___fladd@b
 18649  0D33  3F41               	moviw [1]fsr1
 18650  0D34  00E0               	movwf	___fladd@b+1
 18651  0D35  3F42               	moviw [2]fsr1
 18652  0D36  00E1               	movwf	___fladd@b+2
 18653  0D37  3F43               	moviw [3]fsr1
 18654  0D38  00E2               	movwf	___fladd@b+3
 18655  0D39  0144               	movlb	4	; select bank4
 18656  0D3A  0850               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18657  0D3B  0140               	movlb	0	; select bank0
 18658  0D3C  00E6               	movwf	___fladd@a+3
 18659  0D3D  0144               	movlb	4	; select bank4
 18660  0D3E  084F               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18661  0D3F  0140               	movlb	0	; select bank0
 18662  0D40  00E5               	movwf	___fladd@a+2
 18663  0D41  0144               	movlb	4	; select bank4
 18664  0D42  084E               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18665  0D43  0140               	movlb	0	; select bank0
 18666  0D44  00E4               	movwf	___fladd@a+1
 18667  0D45  0144               	movlb	4	; select bank4
 18668  0D46  084D               	movf	channelThing@totalGrpA^(0+512),w
 18669  0D47  0140               	movlb	0	; select bank0
 18670  0D48  00E3               	movwf	___fladd@a
 18671  0D49  3185  2592  318B   	fcall	___fladd
 18672  0D4C  0140               	movlb	0	; select bank0
 18673  0D4D  0862               	movf	?___fladd+3,w
 18674  0D4E  0144               	movlb	4	; select bank4
 18675  0D4F  00D0               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18676  0D50  0140               	movlb	0	; select bank0
 18677  0D51  0861               	movf	?___fladd+2,w
 18678  0D52  0144               	movlb	4	; select bank4
 18679  0D53  00CF               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18680  0D54  0140               	movlb	0	; select bank0
 18681  0D55  0860               	movf	?___fladd+1,w
 18682  0D56  0144               	movlb	4	; select bank4
 18683  0D57  00CE               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18684  0D58  0140               	movlb	0	; select bank0
 18685  0D59  085F               	movf	?___fladd,w
 18686  0D5A  0144               	movlb	4	; select bank4
 18687  0D5B  00CD               	movwf	channelThing@totalGrpA^(0+512)
 18688                           
 18689                           ;system.c: 496:    grpA[numGrpA++] = n;
 18690  0D5C  085F               	movf	channelThing@n^(0+512),w
 18691  0D5D  0141               	movlb	1	; select bank1
 18692  0D5E  00E1               	movwf	??_channelThing^(0+128)
 18693  0D5F  0144               	movlb	4	; select bank4
 18694  0D60  0859               	movf	channelThing@numGrpA^(0+512),w
 18695  0D61  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18696  0D62  0086               	movwf	6
 18697  0D63  3002               	movlw	2	; select bank4/5
 18698  0D64  0087               	movwf	7
 18699  0D65  0141               	movlb	1	; select bank1
 18700  0D66  0861               	movf	??_channelThing^(0+128),w
 18701  0D67  0081               	movwf	1
 18702  0D68  3001               	movlw	1
 18703  0D69  00E1               	movwf	??_channelThing^(0+128)
 18704  0D6A  0861               	movf	??_channelThing^(0+128),w
 18705  0D6B  0144               	movlb	4	; select bank4
 18706  0D6C  07D9               	addwf	channelThing@numGrpA^(0+512),f
 18707                           
 18708                           ;system.c: 497:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 18709  0D6D  2E03               	goto	l8320
 18710  0D6E                     l8312:	
 18711  0D6E  3040               	movlw	64
 18712  0D6F  0141               	movlb	1	; select bank1
 18713  0D70  00B5               	movwf	(___flge@ff1+3)^(0+128)
 18714  0D71  3060               	movlw	96
 18715  0D72  00B4               	movwf	(___flge@ff1+2)^(0+128)
 18716  0D73  3000               	movlw	0
 18717  0D74  00B3               	movwf	(___flge@ff1+1)^(0+128)
 18718  0D75  3000               	movlw	0
 18719  0D76  00B2               	movwf	___flge@ff1^(0+128)
 18720  0D77  0144               	movlb	4	; select bank4
 18721  0D78  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18722  0D79  0140               	movlb	0	; select bank0
 18723  0D7A  00E2               	movwf	___fladd@b+3
 18724  0D7B  0144               	movlb	4	; select bank4
 18725  0D7C  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18726  0D7D  0140               	movlb	0	; select bank0
 18727  0D7E  00E1               	movwf	___fladd@b+2
 18728  0D7F  0144               	movlb	4	; select bank4
 18729  0D80  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18730  0D81  0140               	movlb	0	; select bank0
 18731  0D82  00E0               	movwf	___fladd@b+1
 18732  0D83  0144               	movlb	4	; select bank4
 18733  0D84  0851               	movf	channelThing@totalGrpB^(0+512),w
 18734  0D85  0140               	movlb	0	; select bank0
 18735  0D86  00DF               	movwf	___fladd@b
 18736  0D87  3009               	movlw	9
 18737  0D88  0141               	movlb	1	; select bank1
 18738  0D89  00E1               	movwf	??_channelThing^(0+128)
 18739  0D8A  0861               	movf	??_channelThing^(0+128),w
 18740  0D8B  0140               	movlb	0	; select bank0
 18741  0D8C  00AD               	movwf	___bmul@multiplicand
 18742  0D8D  0144               	movlb	4	; select bank4
 18743  0D8E  085F               	movf	channelThing@n^(0+512),w
 18744  0D8F  31A0  2002  318B   	fcall	___bmul
 18745  0D92  3EAC               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18746  0D93  0086               	movwf	6
 18747  0D94  3002               	movlw	2	; select bank5/6
 18748  0D95  0087               	movwf	7
 18749  0D96  3F40               	moviw [0]fsr1
 18750  0D97  0140               	movlb	0	; select bank0
 18751  0D98  00E3               	movwf	___fladd@a
 18752  0D99  3F41               	moviw [1]fsr1
 18753  0D9A  00E4               	movwf	___fladd@a+1
 18754  0D9B  3F42               	moviw [2]fsr1
 18755  0D9C  00E5               	movwf	___fladd@a+2
 18756  0D9D  3F43               	moviw [3]fsr1
 18757  0D9E  00E6               	movwf	___fladd@a+3
 18758  0D9F  3185  2592  318B   	fcall	___fladd
 18759  0DA2  0140               	movlb	0	; select bank0
 18760  0DA3  0862               	movf	?___fladd+3,w
 18761  0DA4  0141               	movlb	1	; select bank1
 18762  0DA5  00B9               	movwf	(___flge@ff2+3)^(0+128)
 18763  0DA6  0140               	movlb	0	; select bank0
 18764  0DA7  0861               	movf	?___fladd+2,w
 18765  0DA8  0141               	movlb	1	; select bank1
 18766  0DA9  00B8               	movwf	(___flge@ff2+2)^(0+128)
 18767  0DAA  0140               	movlb	0	; select bank0
 18768  0DAB  0860               	movf	?___fladd+1,w
 18769  0DAC  0141               	movlb	1	; select bank1
 18770  0DAD  00B7               	movwf	(___flge@ff2+1)^(0+128)
 18771  0DAE  0140               	movlb	0	; select bank0
 18772  0DAF  085F               	movf	?___fladd,w
 18773  0DB0  0141               	movlb	1	; select bank1
 18774  0DB1  00B6               	movwf	___flge@ff2^(0+128)
 18775  0DB2  31AA  2277  318B   	fcall	___flge
 18776  0DB5  1C03               	btfss	3,0
 18777  0DB6  2E03               	goto	l8320
 18778                           
 18779                           ;system.c: 498:    totalGrpB += virtChannels[n].current;
 18780  0DB7  3009               	movlw	9
 18781  0DB8  0141               	movlb	1	; select bank1
 18782  0DB9  00E1               	movwf	??_channelThing^(0+128)
 18783  0DBA  0861               	movf	??_channelThing^(0+128),w
 18784  0DBB  0140               	movlb	0	; select bank0
 18785  0DBC  00AD               	movwf	___bmul@multiplicand
 18786  0DBD  0144               	movlb	4	; select bank4
 18787  0DBE  085F               	movf	channelThing@n^(0+512),w
 18788  0DBF  31A0  2002  318B   	fcall	___bmul
 18789  0DC2  3EAC               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18790  0DC3  0086               	movwf	6
 18791  0DC4  3002               	movlw	2	; select bank5/6
 18792  0DC5  0087               	movwf	7
 18793  0DC6  3F40               	moviw [0]fsr1
 18794  0DC7  0140               	movlb	0	; select bank0
 18795  0DC8  00DF               	movwf	___fladd@b
 18796  0DC9  3F41               	moviw [1]fsr1
 18797  0DCA  00E0               	movwf	___fladd@b+1
 18798  0DCB  3F42               	moviw [2]fsr1
 18799  0DCC  00E1               	movwf	___fladd@b+2
 18800  0DCD  3F43               	moviw [3]fsr1
 18801  0DCE  00E2               	movwf	___fladd@b+3
 18802  0DCF  0144               	movlb	4	; select bank4
 18803  0DD0  0854               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18804  0DD1  0140               	movlb	0	; select bank0
 18805  0DD2  00E6               	movwf	___fladd@a+3
 18806  0DD3  0144               	movlb	4	; select bank4
 18807  0DD4  0853               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18808  0DD5  0140               	movlb	0	; select bank0
 18809  0DD6  00E5               	movwf	___fladd@a+2
 18810  0DD7  0144               	movlb	4	; select bank4
 18811  0DD8  0852               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18812  0DD9  0140               	movlb	0	; select bank0
 18813  0DDA  00E4               	movwf	___fladd@a+1
 18814  0DDB  0144               	movlb	4	; select bank4
 18815  0DDC  0851               	movf	channelThing@totalGrpB^(0+512),w
 18816  0DDD  0140               	movlb	0	; select bank0
 18817  0DDE  00E3               	movwf	___fladd@a
 18818  0DDF  3185  2592  318B   	fcall	___fladd
 18819  0DE2  0140               	movlb	0	; select bank0
 18820  0DE3  0862               	movf	?___fladd+3,w
 18821  0DE4  0144               	movlb	4	; select bank4
 18822  0DE5  00D4               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18823  0DE6  0140               	movlb	0	; select bank0
 18824  0DE7  0861               	movf	?___fladd+2,w
 18825  0DE8  0144               	movlb	4	; select bank4
 18826  0DE9  00D3               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18827  0DEA  0140               	movlb	0	; select bank0
 18828  0DEB  0860               	movf	?___fladd+1,w
 18829  0DEC  0144               	movlb	4	; select bank4
 18830  0DED  00D2               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18831  0DEE  0140               	movlb	0	; select bank0
 18832  0DEF  085F               	movf	?___fladd,w
 18833  0DF0  0144               	movlb	4	; select bank4
 18834  0DF1  00D1               	movwf	channelThing@totalGrpB^(0+512)
 18835                           
 18836                           ;system.c: 499:    grpB[numGrpB++] = n;
 18837  0DF2  085F               	movf	channelThing@n^(0+512),w
 18838  0DF3  0141               	movlb	1	; select bank1
 18839  0DF4  00E1               	movwf	??_channelThing^(0+128)
 18840  0DF5  0144               	movlb	4	; select bank4
 18841  0DF6  085A               	movf	channelThing@numGrpB^(0+512),w
 18842  0DF7  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18843  0DF8  0086               	movwf	6
 18844  0DF9  3002               	movlw	2	; select bank4/5
 18845  0DFA  0087               	movwf	7
 18846  0DFB  0141               	movlb	1	; select bank1
 18847  0DFC  0861               	movf	??_channelThing^(0+128),w
 18848  0DFD  0081               	movwf	1
 18849  0DFE  3001               	movlw	1
 18850  0DFF  00E1               	movwf	??_channelThing^(0+128)
 18851  0E00  0861               	movf	??_channelThing^(0+128),w
 18852  0E01  0144               	movlb	4	; select bank4
 18853  0E02  07DA               	addwf	channelThing@numGrpB^(0+512),f
 18854  0E03                     l8320:	
 18855                           
 18856                           ;system.c: 501:  }
 18857  0E03  3001               	movlw	1
 18858  0E04  0141               	movlb	1	; select bank1
 18859  0E05  00E1               	movwf	??_channelThing^(0+128)
 18860  0E06  0861               	movf	??_channelThing^(0+128),w
 18861  0E07  0144               	movlb	4	; select bank4
 18862  0E08  07DF               	addwf	channelThing@n^(0+512),f
 18863  0E09  3004               	movlw	4
 18864  0E0A  025F               	subwf	channelThing@n^(0+512),w
 18865  0E0B  1C03               	skipc
 18866  0E0C  2C9D               	goto	l8304
 18867                           
 18868                           ;system.c: 504:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 18869  0E0D  0859               	movf	channelThing@numGrpA^(0+512),w
 18870  0E0E  0141               	movlb	1	; select bank1
 18871  0E0F  00E1               	movwf	??_channelThing^(0+128)
 18872  0E10  01E2               	clrf	(??_channelThing^(0+128)+1)
 18873  0E11  0861               	movf	??_channelThing^(0+128),w
 18874  0E12  00C7               	movwf	qsort@nel^(0+128)
 18875  0E13  0862               	movf	(??_channelThing+1)^(0+128),w
 18876  0E14  00C8               	movwf	(qsort@nel+1)^(0+128)
 18877  0E15  3001               	movlw	1
 18878  0E16  00C9               	movwf	qsort@width^(0+128)
 18879  0E17  3000               	movlw	0
 18880  0E18  00CA               	movwf	(qsort@width^(0+128)+1)
 18881  0E19  30C4               	movlw	low _sortDC
 18882  0E1A  00CB               	movwf	qsort@compar^(0+128)
 18883  0E1B  3033               	movlw	high _sortDC
 18884  0E1C  00CC               	movwf	(qsort@compar^(0+128)+1)
 18885  0E1D  3055               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18886  0E1E  319A  2285  318B   	fcall	_qsort
 18887                           
 18888                           ;system.c: 505:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 18889  0E21  0144               	movlb	4	; select bank4
 18890  0E22  085A               	movf	channelThing@numGrpB^(0+512),w
 18891  0E23  0141               	movlb	1	; select bank1
 18892  0E24  00E1               	movwf	??_channelThing^(0+128)
 18893  0E25  01E2               	clrf	(??_channelThing^(0+128)+1)
 18894  0E26  0861               	movf	??_channelThing^(0+128),w
 18895  0E27  00C7               	movwf	qsort@nel^(0+128)
 18896  0E28  0862               	movf	(??_channelThing+1)^(0+128),w
 18897  0E29  00C8               	movwf	(qsort@nel+1)^(0+128)
 18898  0E2A  3001               	movlw	1
 18899  0E2B  00C9               	movwf	qsort@width^(0+128)
 18900  0E2C  3000               	movlw	0
 18901  0E2D  00CA               	movwf	(qsort@width^(0+128)+1)
 18902  0E2E  308F               	movlw	low _sortDCRev
 18903  0E2F  00CB               	movwf	qsort@compar^(0+128)
 18904  0E30  3033               	movlw	high _sortDCRev
 18905  0E31  00CC               	movwf	(qsort@compar^(0+128)+1)
 18906  0E32  305B               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18907  0E33  319A  2285  318B   	fcall	_qsort
 18908                           
 18909                           ;system.c: 508:  for(n = 0; n < numGrpA; n++) {
 18910  0E36  0144               	movlb	4	; select bank4
 18911  0E37  01DF               	clrf	channelThing@n^(0+512)
 18912  0E38                     l8336:	
 18913  0E38  0859               	movf	channelThing@numGrpA^(0+512),w
 18914  0E39  025F               	subwf	channelThing@n^(0+512),w
 18915  0E3A  1803               	btfsc	3,0
 18916  0E3B  2EF2               	goto	l8338
 18917                           
 18918                           ;system.c: 509:   if (grpB[n] > -1) {
 18919  0E3C  085F               	movf	channelThing@n^(0+512),w
 18920  0E3D  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18921  0E3E  0086               	movwf	6
 18922  0E3F  3002               	movlw	2	; select bank4/5
 18923  0E40  0087               	movwf	7
 18924  0E41  1B81               	btfsc	1,7
 18925  0E42  2EAA               	goto	l916
 18926                           
 18927                           ;system.c: 510:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 18928  0E43  3009               	movlw	9
 18929  0E44  0141               	movlb	1	; select bank1
 18930  0E45  00E1               	movwf	??_channelThing^(0+128)
 18931  0E46  0861               	movf	??_channelThing^(0+128),w
 18932  0E47  0140               	movlb	0	; select bank0
 18933  0E48  00AD               	movwf	___bmul@multiplicand
 18934  0E49  0144               	movlb	4	; select bank4
 18935  0E4A  085F               	movf	channelThing@n^(0+512),w
 18936  0E4B  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18937  0E4C  0086               	movwf	6
 18938  0E4D  3002               	movlw	2	; select bank4/5
 18939  0E4E  0087               	movwf	7
 18940  0E4F  0801               	movf	1,w
 18941  0E50  31A0  2002  318B   	fcall	___bmul
 18942  0E53  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18943  0E54  0086               	movwf	6
 18944  0E55  3002               	movlw	2	; select bank5/6
 18945  0E56  0087               	movwf	7
 18946  0E57  3009               	movlw	9
 18947  0E58  0141               	movlb	1	; select bank1
 18948  0E59  00E2               	movwf	(??_channelThing+1)^(0+128)
 18949  0E5A  0862               	movf	(??_channelThing+1)^(0+128),w
 18950  0E5B  0140               	movlb	0	; select bank0
 18951  0E5C  00AD               	movwf	___bmul@multiplicand
 18952  0E5D  0144               	movlb	4	; select bank4
 18953  0E5E  085F               	movf	channelThing@n^(0+512),w
 18954  0E5F  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18955  0E60  0084               	movwf	4
 18956  0E61  3002               	movlw	2	; select bank4/5
 18957  0E62  0085               	movwf	5
 18958  0E63  0800               	movf	0,w
 18959  0E64  31A0  2002  318B   	fcall	___bmul
 18960  0E67  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18961  0E68  0084               	movwf	4
 18962  0E69  3002               	movlw	2	; select bank5/6
 18963  0E6A  0085               	movwf	5
 18964  0E6B  0800               	movf	0,w
 18965  0E6C  0701               	addwf	1,w
 18966  0E6D  0141               	movlb	1	; select bank1
 18967  0E6E  00E3               	movwf	(??_channelThing+2)^(0+128)
 18968  0E6F  01E4               	clrf	((??_channelThing+2)^(0+128)+1)
 18969  0E70  0DE4               	rlf	(??_channelThing+3)^(0+128),f
 18970  0E71  0864               	movf	(??_channelThing+3)^(0+128),w
 18971  0E72  3A80               	xorlw	128
 18972  0E73  00E5               	movwf	(??_channelThing+4)^(0+128)
 18973  0E74  3080               	movlw	128
 18974  0E75  0265               	subwf	(??_channelThing+4)^(0+128),w
 18975  0E76  1D03               	skipz
 18976  0E77  2E7A               	goto	u9925
 18977  0E78  3065               	movlw	101
 18978  0E79  0263               	subwf	(??_channelThing+2)^(0+128),w
 18979  0E7A                     u9925:	
 18980  0E7A  1C03               	skipc
 18981  0E7B  2EAA               	goto	l916
 18982                           
 18983                           ;system.c: 511:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 18984  0E7C  3009               	movlw	9
 18985  0E7D  0141               	movlb	1	; select bank1
 18986  0E7E  00E1               	movwf	??_channelThing^(0+128)
 18987  0E7F  0861               	movf	??_channelThing^(0+128),w
 18988  0E80  0140               	movlb	0	; select bank0
 18989  0E81  00AD               	movwf	___bmul@multiplicand
 18990  0E82  0144               	movlb	4	; select bank4
 18991  0E83  085F               	movf	channelThing@n^(0+512),w
 18992  0E84  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18993  0E85  0086               	movwf	6
 18994  0E86  3002               	movlw	2	; select bank4/5
 18995  0E87  0087               	movwf	7
 18996  0E88  0801               	movf	1,w
 18997  0E89  31A0  2002  318B   	fcall	___bmul
 18998  0E8C  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18999  0E8D  0086               	movwf	6
 19000  0E8E  3002               	movlw	2	; select bank5/6
 19001  0E8F  0087               	movwf	7
 19002  0E90  0801               	movf	1,w
 19003  0E91  3C64               	sublw	100
 19004  0E92  0141               	movlb	1	; select bank1
 19005  0E93  00E2               	movwf	(??_channelThing+1)^(0+128)
 19006  0E94  3009               	movlw	9
 19007  0E95  00E3               	movwf	(??_channelThing+2)^(0+128)
 19008  0E96  0863               	movf	(??_channelThing+2)^(0+128),w
 19009  0E97  0140               	movlb	0	; select bank0
 19010  0E98  00AD               	movwf	___bmul@multiplicand
 19011  0E99  0144               	movlb	4	; select bank4
 19012  0E9A  085F               	movf	channelThing@n^(0+512),w
 19013  0E9B  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19014  0E9C  0086               	movwf	6
 19015  0E9D  3002               	movlw	2	; select bank4/5
 19016  0E9E  0087               	movwf	7
 19017  0E9F  0801               	movf	1,w
 19018  0EA0  31A0  2002  318B   	fcall	___bmul
 19019  0EA3  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19020  0EA4  0086               	movwf	6
 19021  0EA5  3002               	movlw	2	; select bank5/6
 19022  0EA6  0087               	movwf	7
 19023  0EA7  0141               	movlb	1	; select bank1
 19024  0EA8  0862               	movf	(??_channelThing+1)^(0+128),w
 19025  0EA9  0081               	movwf	1
 19026  0EAA                     l916:	
 19027                           ;system.c: 512:   }
 19028                           
 19029                           
 19030                           ;system.c: 515:   virtChannels[grpA[n]].start = 0;
 19031  0EAA  3009               	movlw	9
 19032  0EAB  0141               	movlb	1	; select bank1
 19033  0EAC  00E1               	movwf	??_channelThing^(0+128)
 19034  0EAD  0861               	movf	??_channelThing^(0+128),w
 19035  0EAE  0140               	movlb	0	; select bank0
 19036  0EAF  00AD               	movwf	___bmul@multiplicand
 19037  0EB0  0144               	movlb	4	; select bank4
 19038  0EB1  085F               	movf	channelThing@n^(0+512),w
 19039  0EB2  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19040  0EB3  0086               	movwf	6
 19041  0EB4  3002               	movlw	2	; select bank4/5
 19042  0EB5  0087               	movwf	7
 19043  0EB6  0801               	movf	1,w
 19044  0EB7  31A0  2002  318B   	fcall	___bmul
 19045  0EBA  3EB1               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19046  0EBB  0086               	movwf	6
 19047  0EBC  3002               	movlw	2	; select bank5/6
 19048  0EBD  0087               	movwf	7
 19049  0EBE  0181               	clrf	1
 19050                           
 19051                           ;system.c: 516:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 19052  0EBF  3009               	movlw	9
 19053  0EC0  0141               	movlb	1	; select bank1
 19054  0EC1  00E1               	movwf	??_channelThing^(0+128)
 19055  0EC2  0861               	movf	??_channelThing^(0+128),w
 19056  0EC3  0140               	movlb	0	; select bank0
 19057  0EC4  00AD               	movwf	___bmul@multiplicand
 19058  0EC5  0144               	movlb	4	; select bank4
 19059  0EC6  085F               	movf	channelThing@n^(0+512),w
 19060  0EC7  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19061  0EC8  0086               	movwf	6
 19062  0EC9  3002               	movlw	2	; select bank4/5
 19063  0ECA  0087               	movwf	7
 19064  0ECB  0801               	movf	1,w
 19065  0ECC  31A0  2002  318B   	fcall	___bmul
 19066  0ECF  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19067  0ED0  0086               	movwf	6
 19068  0ED1  3002               	movlw	2	; select bank5/6
 19069  0ED2  0087               	movwf	7
 19070  0ED3  0801               	movf	1,w
 19071  0ED4  0141               	movlb	1	; select bank1
 19072  0ED5  00E2               	movwf	(??_channelThing+1)^(0+128)
 19073  0ED6  3009               	movlw	9
 19074  0ED7  00E3               	movwf	(??_channelThing+2)^(0+128)
 19075  0ED8  0863               	movf	(??_channelThing+2)^(0+128),w
 19076  0ED9  0140               	movlb	0	; select bank0
 19077  0EDA  00AD               	movwf	___bmul@multiplicand
 19078  0EDB  0144               	movlb	4	; select bank4
 19079  0EDC  085F               	movf	channelThing@n^(0+512),w
 19080  0EDD  3E55               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19081  0EDE  0086               	movwf	6
 19082  0EDF  3002               	movlw	2	; select bank4/5
 19083  0EE0  0087               	movwf	7
 19084  0EE1  0801               	movf	1,w
 19085  0EE2  31A0  2002  318B   	fcall	___bmul
 19086  0EE5  3EB2               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19087  0EE6  0086               	movwf	6
 19088  0EE7  3002               	movlw	2	; select bank5/6
 19089  0EE8  0087               	movwf	7
 19090  0EE9  0141               	movlb	1	; select bank1
 19091  0EEA  0862               	movf	(??_channelThing+1)^(0+128),w
 19092  0EEB  0081               	movwf	1
 19093                           
 19094                           ;system.c: 517:  }
 19095  0EEC  3001               	movlw	1
 19096  0EED  00E1               	movwf	??_channelThing^(0+128)
 19097  0EEE  0861               	movf	??_channelThing^(0+128),w
 19098  0EEF  0144               	movlb	4	; select bank4
 19099  0EF0  07DF               	addwf	channelThing@n^(0+512),f
 19100  0EF1  2E38               	goto	l8336
 19101  0EF2                     l8338:	
 19102                           
 19103                           ;system.c: 519:  for(n = 0; n < numGrpB; n++) {
 19104  0EF2  01DF               	clrf	channelThing@n^(0+512)
 19105  0EF3                     l8344:	
 19106  0EF3  085A               	movf	channelThing@numGrpB^(0+512),w
 19107  0EF4  025F               	subwf	channelThing@n^(0+512),w
 19108  0EF5  1803               	btfsc	3,0
 19109  0EF6  2F43               	goto	l8346
 19110                           
 19111                           ;system.c: 520:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 19112  0EF7  3009               	movlw	9
 19113  0EF8  0141               	movlb	1	; select bank1
 19114  0EF9  00E1               	movwf	??_channelThing^(0+128)
 19115  0EFA  0861               	movf	??_channelThing^(0+128),w
 19116  0EFB  0140               	movlb	0	; select bank0
 19117  0EFC  00AD               	movwf	___bmul@multiplicand
 19118  0EFD  0144               	movlb	4	; select bank4
 19119  0EFE  085F               	movf	channelThing@n^(0+512),w
 19120  0EFF  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19121  0F00  0086               	movwf	6
 19122  0F01  3002               	movlw	2	; select bank4/5
 19123  0F02  0087               	movwf	7
 19124  0F03  0801               	movf	1,w
 19125  0F04  31A0  2002  318B   	fcall	___bmul
 19126  0F07  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19127  0F08  0086               	movwf	6
 19128  0F09  3002               	movlw	2	; select bank5/6
 19129  0F0A  0087               	movwf	7
 19130  0F0B  0801               	movf	1,w
 19131  0F0C  3C64               	sublw	100
 19132  0F0D  0141               	movlb	1	; select bank1
 19133  0F0E  00E2               	movwf	(??_channelThing+1)^(0+128)
 19134  0F0F  3009               	movlw	9
 19135  0F10  00E3               	movwf	(??_channelThing+2)^(0+128)
 19136  0F11  0863               	movf	(??_channelThing+2)^(0+128),w
 19137  0F12  0140               	movlb	0	; select bank0
 19138  0F13  00AD               	movwf	___bmul@multiplicand
 19139  0F14  0144               	movlb	4	; select bank4
 19140  0F15  085F               	movf	channelThing@n^(0+512),w
 19141  0F16  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19142  0F17  0086               	movwf	6
 19143  0F18  3002               	movlw	2	; select bank4/5
 19144  0F19  0087               	movwf	7
 19145  0F1A  0801               	movf	1,w
 19146  0F1B  31A0  2002  318B   	fcall	___bmul
 19147  0F1E  3EB1               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19148  0F1F  0086               	movwf	6
 19149  0F20  3002               	movlw	2	; select bank5/6
 19150  0F21  0087               	movwf	7
 19151  0F22  0141               	movlb	1	; select bank1
 19152  0F23  0862               	movf	(??_channelThing+1)^(0+128),w
 19153  0F24  0081               	movwf	1
 19154                           
 19155                           ;system.c: 521:   virtChannels[grpB[n]].stop = 100;
 19156  0F25  3064               	movlw	100
 19157  0F26  00E1               	movwf	??_channelThing^(0+128)
 19158  0F27  3009               	movlw	9
 19159  0F28  00E2               	movwf	(??_channelThing+1)^(0+128)
 19160  0F29  0862               	movf	(??_channelThing+1)^(0+128),w
 19161  0F2A  0140               	movlb	0	; select bank0
 19162  0F2B  00AD               	movwf	___bmul@multiplicand
 19163  0F2C  0144               	movlb	4	; select bank4
 19164  0F2D  085F               	movf	channelThing@n^(0+512),w
 19165  0F2E  3E5B               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19166  0F2F  0086               	movwf	6
 19167  0F30  3002               	movlw	2	; select bank4/5
 19168  0F31  0087               	movwf	7
 19169  0F32  0801               	movf	1,w
 19170  0F33  31A0  2002  318B   	fcall	___bmul
 19171  0F36  3EB2               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19172  0F37  0086               	movwf	6
 19173  0F38  3002               	movlw	2	; select bank5/6
 19174  0F39  0087               	movwf	7
 19175  0F3A  0141               	movlb	1	; select bank1
 19176  0F3B  0861               	movf	??_channelThing^(0+128),w
 19177  0F3C  0081               	movwf	1
 19178                           
 19179                           ;system.c: 522:  }
 19180  0F3D  3001               	movlw	1
 19181  0F3E  00E1               	movwf	??_channelThing^(0+128)
 19182  0F3F  0861               	movf	??_channelThing^(0+128),w
 19183  0F40  0144               	movlb	4	; select bank4
 19184  0F41  07DF               	addwf	channelThing@n^(0+512),f
 19185  0F42  2EF3               	goto	l8344
 19186  0F43                     l8346:	
 19187                           
 19188                           ;system.c: 525:  for(n = 0; n < 4; n++) {
 19189  0F43  01DF               	clrf	channelThing@n^(0+512)
 19190  0F44                     l8352:	
 19191                           
 19192                           ;system.c: 526:   data->chData[virtChannels[n].phyChanNum].Patt =
 19193  0F44  3009               	movlw	9
 19194  0F45  0141               	movlb	1	; select bank1
 19195  0F46  00E1               	movwf	??_channelThing^(0+128)
 19196  0F47  0861               	movf	??_channelThing^(0+128),w
 19197  0F48  0140               	movlb	0	; select bank0
 19198  0F49  00AD               	movwf	___bmul@multiplicand
 19199  0F4A  0144               	movlb	4	; select bank4
 19200  0F4B  085F               	movf	channelThing@n^(0+512),w
 19201  0F4C  31A0  2002  318B   	fcall	___bmul
 19202  0F4F  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19203  0F50  0086               	movwf	6
 19204  0F51  3002               	movlw	2	; select bank5/6
 19205  0F52  0087               	movwf	7
 19206  0F53  3F40               	moviw [0]fsr1
 19207  0F54  0140               	movlb	0	; select bank0
 19208  0F55  00B1               	movwf	___wmul@multiplier
 19209  0F56  3F41               	moviw [1]fsr1
 19210  0F57  00B2               	movwf	___wmul@multiplier+1
 19211  0F58  301F               	movlw	31
 19212  0F59  00B3               	movwf	___wmul@multiplicand
 19213  0F5A  3000               	movlw	0
 19214  0F5B  00B4               	movwf	___wmul@multiplicand+1
 19215  0F5C  31B1  21AD  318B   	fcall	___wmul
 19216  0F5F  0140               	movlb	0	; select bank0
 19217  0F60  0831               	movf	?___wmul,w
 19218  0F61  0141               	movlb	1	; select bank1
 19219  0F62  075F               	addwf	channelThing@data^(0+128),w
 19220  0F63  00E2               	movwf	(??_channelThing+1)^(0+128)
 19221  0F64  0140               	movlb	0	; select bank0
 19222  0F65  0832               	movf	?___wmul+1,w
 19223  0F66  0141               	movlb	1	; select bank1
 19224  0F67  3D60               	addwfc	(channelThing@data+1)^(0+128),w
 19225  0F68  00E3               	movwf	(??_channelThing+2)^(0+128)
 19226  0F69  0862               	movf	(??_channelThing+1)^(0+128),w
 19227  0F6A  3E36               	addlw	54
 19228  0F6B  0086               	movwf	6
 19229  0F6C  3000               	movlw	0
 19230  0F6D  3D63               	addwfc	(??_channelThing+2)^(0+128),w
 19231  0F6E  0087               	movwf	7
 19232  0F6F  3042               	movlw	66
 19233  0F70  0140               	movlb	0	; select bank0
 19234  0F71  00E2               	movwf	___fldiv@a+3
 19235  0F72  30C8               	movlw	200
 19236  0F73  00E1               	movwf	___fldiv@a+2
 19237  0F74  3000               	movlw	0
 19238  0F75  00E0               	movwf	___fldiv@a+1
 19239  0F76  3000               	movlw	0
 19240  0F77  00DF               	movwf	___fldiv@a
 19241  0F78  301F               	movlw	31
 19242  0F79  00B3               	movwf	___wmul@multiplicand
 19243  0F7A  3000               	movlw	0
 19244  0F7B  00B4               	movwf	___wmul@multiplicand+1
 19245  0F7C  3009               	movlw	9
 19246  0F7D  0141               	movlb	1	; select bank1
 19247  0F7E  00E4               	movwf	(??_channelThing+3)^(0+128)
 19248  0F7F  0864               	movf	(??_channelThing+3)^(0+128),w
 19249  0F80  0140               	movlb	0	; select bank0
 19250  0F81  00AD               	movwf	___bmul@multiplicand
 19251  0F82  0144               	movlb	4	; select bank4
 19252  0F83  085F               	movf	channelThing@n^(0+512),w
 19253  0F84  31A0  2002  318B   	fcall	___bmul
 19254  0F87  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19255  0F88  0084               	movwf	4
 19256  0F89  3002               	movlw	2	; select bank5/6
 19257  0F8A  0085               	movwf	5
 19258  0F8B  3F00               	moviw [0]fsr0
 19259  0F8C  0140               	movlb	0	; select bank0
 19260  0F8D  00B1               	movwf	___wmul@multiplier
 19261  0F8E  3F01               	moviw [1]fsr0
 19262  0F8F  00B2               	movwf	___wmul@multiplier+1
 19263  0F90  31B1  21AD  318B   	fcall	___wmul
 19264  0F93  0140               	movlb	0	; select bank0
 19265  0F94  0831               	movf	?___wmul,w
 19266  0F95  0141               	movlb	1	; select bank1
 19267  0F96  075F               	addwf	channelThing@data^(0+128),w
 19268  0F97  00E5               	movwf	(??_channelThing+4)^(0+128)
 19269  0F98  0140               	movlb	0	; select bank0
 19270  0F99  0832               	movf	?___wmul+1,w
 19271  0F9A  0141               	movlb	1	; select bank1
 19272  0F9B  3D60               	addwfc	(channelThing@data+1)^(0+128),w
 19273  0F9C  00E6               	movwf	(??_channelThing+5)^(0+128)
 19274  0F9D  0865               	movf	(??_channelThing+4)^(0+128),w
 19275  0F9E  3E2E               	addlw	46
 19276  0F9F  0084               	movwf	4
 19277  0FA0  3000               	movlw	0
 19278  0FA1  3D66               	addwfc	(??_channelThing+5)^(0+128),w
 19279  0FA2  0085               	movwf	5
 19280  0FA3  3F00               	moviw [0]fsr0
 19281  0FA4  0140               	movlb	0	; select bank0
 19282  0FA5  00C5               	movwf	___flmul@b
 19283  0FA6  3F01               	moviw [1]fsr0
 19284  0FA7  00C6               	movwf	___flmul@b+1
 19285  0FA8  3F02               	moviw [2]fsr0
 19286  0FA9  00C7               	movwf	___flmul@b+2
 19287  0FAA  3F03               	moviw [3]fsr0
 19288  0FAB  00C8               	movwf	___flmul@b+3
 19289  0FAC  3009               	movlw	9
 19290  0FAD  0141               	movlb	1	; select bank1
 19291  0FAE  00E7               	movwf	(??_channelThing+6)^(0+128)
 19292  0FAF  0867               	movf	(??_channelThing+6)^(0+128),w
 19293  0FB0  0140               	movlb	0	; select bank0
 19294  0FB1  00AD               	movwf	___bmul@multiplicand
 19295  0FB2  0144               	movlb	4	; select bank4
 19296  0FB3  085F               	movf	channelThing@n^(0+512),w
 19297  0FB4  31A0  2002  318B   	fcall	___bmul
 19298  0FB7  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19299  0FB8  0084               	movwf	4
 19300  0FB9  3002               	movlw	2	; select bank5/6
 19301  0FBA  0085               	movwf	5
 19302  0FBB  0800               	movf	0,w
 19303  0FBC  0141               	movlb	1	; select bank1
 19304  0FBD  00E8               	movwf	(??_channelThing+7)^(0+128)
 19305  0FBE  01E9               	clrf	((??_channelThing+7)^(0+128)+1)
 19306  0FBF  01EA               	clrf	((??_channelThing+7)^(0+128)+2)
 19307  0FC0  01EB               	clrf	((??_channelThing+7)^(0+128)+3)
 19308  0FC1  086B               	movf	(??_channelThing+10)^(0+128),w
 19309  0FC2  0140               	movlb	0	; select bank0
 19310  0FC3  00BA               	movwf	___xxtofl@val+3
 19311  0FC4  0141               	movlb	1	; select bank1
 19312  0FC5  086A               	movf	(??_channelThing+9)^(0+128),w
 19313  0FC6  0140               	movlb	0	; select bank0
 19314  0FC7  00B9               	movwf	___xxtofl@val+2
 19315  0FC8  0141               	movlb	1	; select bank1
 19316  0FC9  0869               	movf	(??_channelThing+8)^(0+128),w
 19317  0FCA  0140               	movlb	0	; select bank0
 19318  0FCB  00B8               	movwf	___xxtofl@val+1
 19319  0FCC  0141               	movlb	1	; select bank1
 19320  0FCD  0868               	movf	(??_channelThing+7)^(0+128),w
 19321  0FCE  0140               	movlb	0	; select bank0
 19322  0FCF  00B7               	movwf	___xxtofl@val
 19323  0FD0  3001               	movlw	1
 19324  0FD1  31AB  237E  318B   	fcall	___xxtofl
 19325  0FD4  0140               	movlb	0	; select bank0
 19326  0FD5  083A               	movf	?___xxtofl+3,w
 19327  0FD6  00CC               	movwf	___flmul@a+3
 19328  0FD7  0839               	movf	?___xxtofl+2,w
 19329  0FD8  00CB               	movwf	___flmul@a+2
 19330  0FD9  0838               	movf	?___xxtofl+1,w
 19331  0FDA  00CA               	movwf	___flmul@a+1
 19332  0FDB  0837               	movf	?___xxtofl,w
 19333  0FDC  00C9               	movwf	___flmul@a
 19334  0FDD  3191  21D9  318B   	fcall	___flmul
 19335  0FE0  0140               	movlb	0	; select bank0
 19336  0FE1  0848               	movf	?___flmul+3,w
 19337  0FE2  00E6               	movwf	___fldiv@b+3
 19338  0FE3  0847               	movf	?___flmul+2,w
 19339  0FE4  00E5               	movwf	___fldiv@b+2
 19340  0FE5  0846               	movf	?___flmul+1,w
 19341  0FE6  00E4               	movwf	___fldiv@b+1
 19342  0FE7  0845               	movf	?___flmul,w
 19343  0FE8  00E3               	movwf	___fldiv@b
 19344  0FE9  3190  2007  318B   	fcall	___fldiv
 19345  0FEC  0140               	movlb	0	; select bank0
 19346  0FED  085F               	movf	?___fldiv,w
 19347  0FEE  3FC0               	movwi [0]fsr1
 19348  0FEF  0860               	movf	?___fldiv+1,w
 19349  0FF0  3FC1               	movwi [1]fsr1
 19350  0FF1  0861               	movf	?___fldiv+2,w
 19351  0FF2  3FC2               	movwi [2]fsr1
 19352  0FF3  0862               	movf	?___fldiv+3,w
 19353  0FF4  3FC3               	movwi [3]fsr1
 19354                           
 19355                           ;system.c: 528:  }
 19356  0FF5  3001               	movlw	1
 19357  0FF6  0141               	movlb	1	; select bank1
 19358  0FF7  00E1               	movwf	??_channelThing^(0+128)
 19359  0FF8  0861               	movf	??_channelThing^(0+128),w
 19360  0FF9  0144               	movlb	4	; select bank4
 19361  0FFA  07DF               	addwf	channelThing@n^(0+512),f
 19362  0FFB  3004               	movlw	4
 19363  0FFC  025F               	subwf	channelThing@n^(0+512),w
 19364  0FFD  1803               	btfsc	3,0
 19365  0FFE  0008               	return
 19366  0FFF  2F44               	goto	l8352
 19367  1000                     __end_of_channelThing:	
 19368                           
 19369                           	psect	text53
 19370  1A85                     __ptext53:	
 19371 ;; *************** function _qsort *****************
 19372 ;; Defined at:
 19373 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19374 ;; Parameters:    Size  Location     Type
 19375 ;;  vbase           1    wreg     PTR void 
 19376 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19377 ;;  nel             2   39[BANK1 ] unsigned int 
 19378 ;;  width           2   41[BANK1 ] unsigned int 
 19379 ;;  compar          2   43[BANK1 ] PTR FTN(PTR const void ,
 19380 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 19381 ;; Auto vars:     Size  Location     Type
 19382 ;;  vbase           1   50[BANK1 ] PTR void 
 19383 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19384 ;;  stack          64    0[BANK3 ] struct .[16]
 19385 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 19386 ;;  j               2   61[BANK1 ] int 
 19387 ;;  i               2   59[BANK1 ] int 
 19388 ;;  s               2   57[BANK1 ] int 
 19389 ;;  r               2   55[BANK1 ] int 
 19390 ;;  l               2   53[BANK1 ] int 
 19391 ;;  base            1   52[BANK1 ] PTR unsigned char 
 19392 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19393 ;;  x               1   51[BANK1 ] PTR unsigned char 
 19394 ;;		 -> qsort@xbuf(60), 
 19395 ;; Return value:  Size  Location     Type
 19396 ;;                  1    wreg      void 
 19397 ;; Registers used:
 19398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19399 ;; Tracked objects:
 19400 ;;		On entry : 0/0
 19401 ;;		On exit  : 0/0
 19402 ;;		Unchanged: 0/0
 19403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19404 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19405 ;;      Locals:         0       1      13      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19406 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19407 ;;      Totals:         0       1      24      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19408 ;;Total ram usage:      149 bytes
 19409 ;; Hardware stack levels used:    1
 19410 ;; Hardware stack levels required when called:    6
 19411 ;; This function calls:
 19412 ;;		___awdiv
 19413 ;;		___bmul
 19414 ;;		_memcpy
 19415 ;;		_sortCur
 19416 ;;		_sortDC
 19417 ;;		_sortDCRev
 19418 ;;		_swap
 19419 ;; This function is called by:
 19420 ;;		_channelThing
 19421 ;; This function uses a non-reentrant model
 19422 ;;
 19423                           
 19424                           
 19425                           ;psect for function _qsort
 19426  1A85                     _qsort:	
 19427                           
 19428                           ;incstack = 0
 19429                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19430                           ;qsort@vbase stored from wreg
 19431  1A85  0141               	movlb	1	; select bank1
 19432  1A86  00D2               	movwf	qsort@vbase^(0+128)
 19433  1A87  0852               	movf	qsort@vbase^(0+128),w
 19434  1A88  00CD               	movwf	??_qsort^(0+128)
 19435  1A89  084D               	movf	??_qsort^(0+128),w
 19436  1A8A  00D4               	movwf	qsort@base^(0+128)
 19437  1A8B  3000               	movlw	0
 19438  1A8C  024A               	subwf	(qsort@width+1)^(0+128),w
 19439  1A8D  303C               	movlw	60
 19440  1A8E  1903               	skipnz
 19441  1A8F  0249               	subwf	qsort@width^(0+128),w
 19442  1A90  1803               	skipnc
 19443  1A91  0008               	return
 19444  1A92  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 19445  1A93  00CD               	movwf	??_qsort^(0+128)
 19446  1A94  084D               	movf	??_qsort^(0+128),w
 19447  1A95  00D3               	movwf	qsort@x^(0+128)
 19448  1A96  0849               	movf	qsort@width^(0+128),w
 19449  1A97  0753               	addwf	qsort@x^(0+128),w
 19450  1A98  00CD               	movwf	??_qsort^(0+128)
 19451  1A99  084D               	movf	??_qsort^(0+128),w
 19452  1A9A  0086               	movwf	6
 19453  1A9B  3001               	movlw	1	; select bank2/3
 19454  1A9C  0087               	movwf	7
 19455  1A9D  0181               	clrf	1
 19456  1A9E  01D9               	clrf	qsort@s^(0+128)
 19457  1A9F  01DA               	clrf	(qsort@s+1)^(0+128)
 19458  1AA0  0143               	movlb	3	; select bank3
 19459  1AA1  01A0               	clrf	qsort@stack^(0+384)
 19460  1AA2  01A1               	clrf	(qsort@stack+1)^(0+384)
 19461  1AA3  0141               	movlb	1	; select bank1
 19462  1AA4  0847               	movf	qsort@nel^(0+128),w
 19463  1AA5  3EFF               	addlw	255
 19464  1AA6  0143               	movlb	3	; select bank3
 19465  1AA7  00A2               	movwf	(qsort@stack^(0+384)+2)
 19466  1AA8  30FF               	movlw	255
 19467  1AA9  0141               	movlb	1	; select bank1
 19468  1AAA  3D48               	addwfc	(qsort@nel+1)^(0+128),w
 19469  1AAB  0143               	movlb	3	; select bank3
 19470  1AAC  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 19471  1AAD                     l7970:	
 19472  1AAD  0141               	movlb	1	; select bank1
 19473  1AAE  0859               	movf	qsort@s^(0+128),w
 19474  1AAF  00CD               	movwf	??_qsort^(0+128)
 19475  1AB0  3001               	movlw	1
 19476  1AB1                     u9425:	
 19477  1AB1  35CD               	lslf	??_qsort^(0+128),f
 19478  1AB2  3EFF               	addlw	-1
 19479  1AB3  1D03               	skipz
 19480  1AB4  2AB1               	goto	u9425
 19481  1AB5  354D               	lslf	??_qsort^(0+128),w
 19482  1AB6  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19483  1AB7  0086               	movwf	6
 19484  1AB8  3001               	movlw	1	; select bank3/4
 19485  1AB9  0087               	movwf	7
 19486  1ABA  3F40               	moviw [0]fsr1
 19487  1ABB  00D5               	movwf	qsort@l^(0+128)
 19488  1ABC  3F41               	moviw [1]fsr1
 19489  1ABD  00D6               	movwf	(qsort@l+1)^(0+128)
 19490  1ABE  0859               	movf	qsort@s^(0+128),w
 19491  1ABF  00CD               	movwf	??_qsort^(0+128)
 19492  1AC0  3001               	movlw	1
 19493  1AC1                     u9435:	
 19494  1AC1  35CD               	lslf	??_qsort^(0+128),f
 19495  1AC2  3EFF               	addlw	-1
 19496  1AC3  1D03               	skipz
 19497  1AC4  2AC1               	goto	u9435
 19498  1AC5  354D               	lslf	??_qsort^(0+128),w
 19499  1AC6  3E02               	addlw	2
 19500  1AC7  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19501  1AC8  0086               	movwf	6
 19502  1AC9  3001               	movlw	1	; select bank3/4
 19503  1ACA  0087               	movwf	7
 19504  1ACB  3F40               	moviw [0]fsr1
 19505  1ACC  00D7               	movwf	qsort@r^(0+128)
 19506  1ACD  3F41               	moviw [1]fsr1
 19507  1ACE  00D8               	movwf	(qsort@r+1)^(0+128)
 19508  1ACF  30FF               	movlw	255
 19509  1AD0  07D9               	addwf	qsort@s^(0+128),f
 19510  1AD1  30FF               	movlw	255
 19511  1AD2  3DDA               	addwfc	(qsort@s+1)^(0+128),f
 19512  1AD3                     l7976:	
 19513  1AD3  0141               	movlb	1	; select bank1
 19514  1AD4  0856               	movf	(qsort@l+1)^(0+128),w
 19515  1AD5  00DC               	movwf	(qsort@i+1)^(0+128)
 19516  1AD6  0855               	movf	qsort@l^(0+128),w
 19517  1AD7  00DB               	movwf	qsort@i^(0+128)
 19518  1AD8  0858               	movf	(qsort@r+1)^(0+128),w
 19519  1AD9  00DE               	movwf	(qsort@j+1)^(0+128)
 19520  1ADA  0857               	movf	qsort@r^(0+128),w
 19521  1ADB  00DD               	movwf	qsort@j^(0+128)
 19522  1ADC  0849               	movf	qsort@width^(0+128),w
 19523  1ADD  00CD               	movwf	??_qsort^(0+128)
 19524  1ADE  084D               	movf	??_qsort^(0+128),w
 19525  1ADF  0140               	movlb	0	; select bank0
 19526  1AE0  00AD               	movwf	___bmul@multiplicand
 19527  1AE1  0141               	movlb	1	; select bank1
 19528  1AE2  085D               	movf	qsort@j^(0+128),w
 19529  1AE3  075B               	addwf	qsort@i^(0+128),w
 19530  1AE4  0140               	movlb	0	; select bank0
 19531  1AE5  00A6               	movwf	___awdiv@dividend
 19532  1AE6  0141               	movlb	1	; select bank1
 19533  1AE7  085E               	movf	(qsort@j+1)^(0+128),w
 19534  1AE8  3D5C               	addwfc	(qsort@i+1)^(0+128),w
 19535  1AE9  0140               	movlb	0	; select bank0
 19536  1AEA  00A7               	movwf	___awdiv@dividend+1
 19537  1AEB  3002               	movlw	2
 19538  1AEC  00A4               	movwf	___awdiv@divisor
 19539  1AED  3000               	movlw	0
 19540  1AEE  00A5               	movwf	___awdiv@divisor+1
 19541  1AEF  31B6  26DF  319A   	fcall	___awdiv
 19542  1AF2  0140               	movlb	0	; select bank0
 19543  1AF3  0824               	movf	?___awdiv,w
 19544  1AF4  31A0  2002  319A   	fcall	___bmul
 19545  1AF7  0141               	movlb	1	; select bank1
 19546  1AF8  0754               	addwf	qsort@base^(0+128),w
 19547  1AF9  00CE               	movwf	(??_qsort+1)^(0+128)
 19548  1AFA  084E               	movf	(??_qsort+1)^(0+128),w
 19549  1AFB  0140               	movlb	0	; select bank0
 19550  1AFC  00B1               	movwf	memcpy@s1
 19551  1AFD  0141               	movlb	1	; select bank1
 19552  1AFE  084A               	movf	(qsort@width+1)^(0+128),w
 19553  1AFF  0140               	movlb	0	; select bank0
 19554  1B00  00B3               	movwf	memcpy@n+1
 19555  1B01  0141               	movlb	1	; select bank1
 19556  1B02  0849               	movf	qsort@width^(0+128),w
 19557  1B03  0140               	movlb	0	; select bank0
 19558  1B04  00B2               	movwf	memcpy@n
 19559  1B05  0141               	movlb	1	; select bank1
 19560  1B06  0853               	movf	qsort@x^(0+128),w
 19561  1B07  31B2  226C  319A   	fcall	_memcpy
 19562  1B0A                     l7984:	
 19563  1B0A  0141               	movlb	1	; select bank1
 19564  1B0B  0849               	movf	qsort@width^(0+128),w
 19565  1B0C  00CD               	movwf	??_qsort^(0+128)
 19566  1B0D  084D               	movf	??_qsort^(0+128),w
 19567  1B0E  0140               	movlb	0	; select bank0
 19568  1B0F  00AD               	movwf	___bmul@multiplicand
 19569  1B10  0141               	movlb	1	; select bank1
 19570  1B11  085B               	movf	qsort@i^(0+128),w
 19571  1B12  31A0  2002  319A   	fcall	___bmul
 19572  1B15  0141               	movlb	1	; select bank1
 19573  1B16  0754               	addwf	qsort@base^(0+128),w
 19574  1B17  00CE               	movwf	(??_qsort+1)^(0+128)
 19575  1B18  084E               	movf	(??_qsort+1)^(0+128),w
 19576  1B19  0140               	movlb	0	; select bank0
 19577  1B1A  00E7               	movwf	_qsort$2692
 19578  1B1B  0867               	movf	_qsort$2692,w
 19579  1B1C  0141               	movlb	1	; select bank1
 19580  1B1D  00BF               	movwf	sortCur@cmp1^(0+128)
 19581  1B1E  3002               	movlw	2
 19582  1B1F  00C0               	movwf	(sortCur@cmp1+1)^(0+128)
 19583  1B20  0853               	movf	qsort@x^(0+128),w
 19584  1B21  00C1               	movwf	sortCur@cmp2^(0+128)
 19585  1B22  3001               	movlw	1
 19586  1B23  00C2               	movwf	(sortCur@cmp2+1)^(0+128)
 19587  1B24  084C               	movf	(qsort@compar+1)^(0+128),w
 19588  1B25  008A               	movwf	10
 19589  1B26  084B               	movf	qsort@compar^(0+128),w
 19590  1B27  000A               	callw
 19591  1B28  319A               	pagesel	$
 19592  1B29  0141               	movlb	1	; select bank1
 19593  1B2A  1FC0               	btfss	(?_sortCur+1)^(0+128),7
 19594  1B2B  2B35               	goto	l7990
 19595  1B2C  3001               	movlw	1
 19596  1B2D  07DB               	addwf	qsort@i^(0+128),f
 19597  1B2E  3000               	movlw	0
 19598  1B2F  3DDC               	addwfc	(qsort@i+1)^(0+128),f
 19599  1B30  2B0A               	goto	l7984
 19600  1B31                     l7988:	
 19601  1B31  30FF               	movlw	255
 19602  1B32  07DD               	addwf	qsort@j^(0+128),f
 19603  1B33  30FF               	movlw	255
 19604  1B34  3DDE               	addwfc	(qsort@j+1)^(0+128),f
 19605  1B35                     l7990:	
 19606  1B35  0849               	movf	qsort@width^(0+128),w
 19607  1B36  00CD               	movwf	??_qsort^(0+128)
 19608  1B37  084D               	movf	??_qsort^(0+128),w
 19609  1B38  0140               	movlb	0	; select bank0
 19610  1B39  00AD               	movwf	___bmul@multiplicand
 19611  1B3A  0141               	movlb	1	; select bank1
 19612  1B3B  085D               	movf	qsort@j^(0+128),w
 19613  1B3C  31A0  2002  319A   	fcall	___bmul
 19614  1B3F  0141               	movlb	1	; select bank1
 19615  1B40  0754               	addwf	qsort@base^(0+128),w
 19616  1B41  00CE               	movwf	(??_qsort+1)^(0+128)
 19617  1B42  084E               	movf	(??_qsort+1)^(0+128),w
 19618  1B43  0140               	movlb	0	; select bank0
 19619  1B44  00E7               	movwf	_qsort$2692
 19620  1B45  0141               	movlb	1	; select bank1
 19621  1B46  0853               	movf	qsort@x^(0+128),w
 19622  1B47  00BF               	movwf	sortCur@cmp1^(0+128)
 19623  1B48  3001               	movlw	1
 19624  1B49  00C0               	movwf	(sortCur@cmp1+1)^(0+128)
 19625  1B4A  0140               	movlb	0	; select bank0
 19626  1B4B  0867               	movf	_qsort$2692,w
 19627  1B4C  0141               	movlb	1	; select bank1
 19628  1B4D  00C1               	movwf	sortCur@cmp2^(0+128)
 19629  1B4E  3002               	movlw	2
 19630  1B4F  00C2               	movwf	(sortCur@cmp2+1)^(0+128)
 19631  1B50  084C               	movf	(qsort@compar+1)^(0+128),w
 19632  1B51  008A               	movwf	10
 19633  1B52  084B               	movf	qsort@compar^(0+128),w
 19634  1B53  000A               	callw
 19635  1B54  319A               	pagesel	$
 19636  1B55  0141               	movlb	1	; select bank1
 19637  1B56  1BC0               	btfsc	(?_sortCur+1)^(0+128),7
 19638  1B57  2B31               	goto	l7988
 19639  1B58  085E               	movf	(qsort@j+1)^(0+128),w
 19640  1B59  3A80               	xorlw	128
 19641  1B5A  00CD               	movwf	??_qsort^(0+128)
 19642  1B5B  085C               	movf	(qsort@i+1)^(0+128),w
 19643  1B5C  3A80               	xorlw	128
 19644  1B5D  024D               	subwf	??_qsort^(0+128),w
 19645  1B5E  1D03               	skipz
 19646  1B5F  2B62               	goto	u9465
 19647  1B60  085B               	movf	qsort@i^(0+128),w
 19648  1B61  025D               	subwf	qsort@j^(0+128),w
 19649  1B62                     u9465:	
 19650  1B62  1C03               	skipc
 19651  1B63  2B9A               	goto	l8002
 19652  1B64  0141               	movlb	1	; select bank1
 19653  1B65  084A               	movf	(qsort@width+1)^(0+128),w
 19654  1B66  0140               	movlb	0	; select bank0
 19655  1B67  00B2               	movwf	swap@len+1
 19656  1B68  0141               	movlb	1	; select bank1
 19657  1B69  0849               	movf	qsort@width^(0+128),w
 19658  1B6A  0140               	movlb	0	; select bank0
 19659  1B6B  00B1               	movwf	swap@len
 19660  1B6C  0141               	movlb	1	; select bank1
 19661  1B6D  0849               	movf	qsort@width^(0+128),w
 19662  1B6E  00CD               	movwf	??_qsort^(0+128)
 19663  1B6F  084D               	movf	??_qsort^(0+128),w
 19664  1B70  0140               	movlb	0	; select bank0
 19665  1B71  00AD               	movwf	___bmul@multiplicand
 19666  1B72  0141               	movlb	1	; select bank1
 19667  1B73  085B               	movf	qsort@i^(0+128),w
 19668  1B74  31A0  2002  319A   	fcall	___bmul
 19669  1B77  0141               	movlb	1	; select bank1
 19670  1B78  0754               	addwf	qsort@base^(0+128),w
 19671  1B79  00CE               	movwf	(??_qsort+1)^(0+128)
 19672  1B7A  084E               	movf	(??_qsort+1)^(0+128),w
 19673  1B7B  0140               	movlb	0	; select bank0
 19674  1B7C  00B3               	movwf	swap@s1
 19675  1B7D  0141               	movlb	1	; select bank1
 19676  1B7E  0849               	movf	qsort@width^(0+128),w
 19677  1B7F  00CF               	movwf	(??_qsort+2)^(0+128)
 19678  1B80  084F               	movf	(??_qsort+2)^(0+128),w
 19679  1B81  0140               	movlb	0	; select bank0
 19680  1B82  00AD               	movwf	___bmul@multiplicand
 19681  1B83  0141               	movlb	1	; select bank1
 19682  1B84  085D               	movf	qsort@j^(0+128),w
 19683  1B85  31A0  2002  319A   	fcall	___bmul
 19684  1B88  0141               	movlb	1	; select bank1
 19685  1B89  0754               	addwf	qsort@base^(0+128),w
 19686  1B8A  00D0               	movwf	(??_qsort+3)^(0+128)
 19687  1B8B  0850               	movf	(??_qsort+3)^(0+128),w
 19688  1B8C  0140               	movlb	0	; select bank0
 19689  1B8D  00B4               	movwf	swap@s2
 19690  1B8E  31B2  2298  319A   	fcall	_swap
 19691  1B91  3001               	movlw	1
 19692  1B92  0141               	movlb	1	; select bank1
 19693  1B93  07DB               	addwf	qsort@i^(0+128),f
 19694  1B94  3000               	movlw	0
 19695  1B95  3DDC               	addwfc	(qsort@i+1)^(0+128),f
 19696  1B96  30FF               	movlw	255
 19697  1B97  07DD               	addwf	qsort@j^(0+128),f
 19698  1B98  30FF               	movlw	255
 19699  1B99  3DDE               	addwfc	(qsort@j+1)^(0+128),f
 19700  1B9A                     l8002:	
 19701  1B9A  0141               	movlb	1	; select bank1
 19702  1B9B  085E               	movf	(qsort@j+1)^(0+128),w
 19703  1B9C  3A80               	xorlw	128
 19704  1B9D  00CD               	movwf	??_qsort^(0+128)
 19705  1B9E  085C               	movf	(qsort@i+1)^(0+128),w
 19706  1B9F  3A80               	xorlw	128
 19707  1BA0  024D               	subwf	??_qsort^(0+128),w
 19708  1BA1  1D03               	skipz
 19709  1BA2  2BA5               	goto	u9475
 19710  1BA3  085B               	movf	qsort@i^(0+128),w
 19711  1BA4  025D               	subwf	qsort@j^(0+128),w
 19712  1BA5                     u9475:	
 19713  1BA5  1803               	skipnc
 19714  1BA6  2B0A               	goto	l7984
 19715  1BA7  0141               	movlb	1	; select bank1
 19716  1BA8  085B               	movf	qsort@i^(0+128),w
 19717  1BA9  0257               	subwf	qsort@r^(0+128),w
 19718  1BAA  00CD               	movwf	??_qsort^(0+128)
 19719  1BAB  085C               	movf	(qsort@i+1)^(0+128),w
 19720  1BAC  3B58               	subwfb	(qsort@r+1)^(0+128),w
 19721  1BAD  00CE               	movwf	(??_qsort+1)^(0+128)
 19722  1BAE  0855               	movf	qsort@l^(0+128),w
 19723  1BAF  025D               	subwf	qsort@j^(0+128),w
 19724  1BB0  00CF               	movwf	(??_qsort+2)^(0+128)
 19725  1BB1  0856               	movf	(qsort@l+1)^(0+128),w
 19726  1BB2  3B5E               	subwfb	(qsort@j+1)^(0+128),w
 19727  1BB3  00D0               	movwf	(??_qsort+3)^(0+128)
 19728  1BB4  0850               	movf	(??_qsort+3)^(0+128),w
 19729  1BB5  3A80               	xorlw	128
 19730  1BB6  00D1               	movwf	(??_qsort+4)^(0+128)
 19731  1BB7  084E               	movf	(??_qsort+1)^(0+128),w
 19732  1BB8  3A80               	xorlw	128
 19733  1BB9  0251               	subwf	(??_qsort+4)^(0+128),w
 19734  1BBA  1D03               	skipz
 19735  1BBB  2BBE               	goto	u9485
 19736  1BBC  084D               	movf	??_qsort^(0+128),w
 19737  1BBD  024F               	subwf	(??_qsort+2)^(0+128),w
 19738  1BBE                     u9485:	
 19739  1BBE  1803               	skipnc
 19740  1BBF  2BF9               	goto	l8012
 19741  1BC0  0141               	movlb	1	; select bank1
 19742  1BC1  085C               	movf	(qsort@i+1)^(0+128),w
 19743  1BC2  3A80               	xorlw	128
 19744  1BC3  00CD               	movwf	??_qsort^(0+128)
 19745  1BC4  0858               	movf	(qsort@r+1)^(0+128),w
 19746  1BC5  3A80               	xorlw	128
 19747  1BC6  024D               	subwf	??_qsort^(0+128),w
 19748  1BC7  1D03               	skipz
 19749  1BC8  2BCB               	goto	u9495
 19750  1BC9  0857               	movf	qsort@r^(0+128),w
 19751  1BCA  025B               	subwf	qsort@i^(0+128),w
 19752  1BCB                     u9495:	
 19753  1BCB  1803               	skipnc
 19754  1BCC  2BF3               	goto	l8010
 19755  1BCD  3001               	movlw	1
 19756  1BCE  0141               	movlb	1	; select bank1
 19757  1BCF  07D9               	addwf	qsort@s^(0+128),f
 19758  1BD0  3000               	movlw	0
 19759  1BD1  3DDA               	addwfc	(qsort@s+1)^(0+128),f
 19760  1BD2  0859               	movf	qsort@s^(0+128),w
 19761  1BD3  00CD               	movwf	??_qsort^(0+128)
 19762  1BD4  3001               	movlw	1
 19763  1BD5                     u9505:	
 19764  1BD5  35CD               	lslf	??_qsort^(0+128),f
 19765  1BD6  3EFF               	addlw	-1
 19766  1BD7  1D03               	skipz
 19767  1BD8  2BD5               	goto	u9505
 19768  1BD9  354D               	lslf	??_qsort^(0+128),w
 19769  1BDA  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19770  1BDB  0086               	movwf	6
 19771  1BDC  3001               	movlw	1	; select bank3/4
 19772  1BDD  0087               	movwf	7
 19773  1BDE  085B               	movf	qsort@i^(0+128),w
 19774  1BDF  3FC0               	movwi [0]fsr1
 19775  1BE0  085C               	movf	(qsort@i+1)^(0+128),w
 19776  1BE1  3FC1               	movwi [1]fsr1
 19777  1BE2  0859               	movf	qsort@s^(0+128),w
 19778  1BE3  00CD               	movwf	??_qsort^(0+128)
 19779  1BE4  3001               	movlw	1
 19780  1BE5                     u9515:	
 19781  1BE5  35CD               	lslf	??_qsort^(0+128),f
 19782  1BE6  3EFF               	addlw	-1
 19783  1BE7  1D03               	skipz
 19784  1BE8  2BE5               	goto	u9515
 19785  1BE9  354D               	lslf	??_qsort^(0+128),w
 19786  1BEA  3E02               	addlw	2
 19787  1BEB  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19788  1BEC  0086               	movwf	6
 19789  1BED  3001               	movlw	1	; select bank3/4
 19790  1BEE  0087               	movwf	7
 19791  1BEF  0857               	movf	qsort@r^(0+128),w
 19792  1BF0  3FC0               	movwi [0]fsr1
 19793  1BF1  0858               	movf	(qsort@r+1)^(0+128),w
 19794  1BF2  3FC1               	movwi [1]fsr1
 19795  1BF3                     l8010:	
 19796  1BF3  0141               	movlb	1	; select bank1
 19797  1BF4  085E               	movf	(qsort@j+1)^(0+128),w
 19798  1BF5  00D8               	movwf	(qsort@r+1)^(0+128)
 19799  1BF6  085D               	movf	qsort@j^(0+128),w
 19800  1BF7  00D7               	movwf	qsort@r^(0+128)
 19801  1BF8  2C31               	goto	l8018
 19802  1BF9                     l8012:	
 19803  1BF9  0141               	movlb	1	; select bank1
 19804  1BFA  0856               	movf	(qsort@l+1)^(0+128),w
 19805  1BFB  3A80               	xorlw	128
 19806  1BFC  00CD               	movwf	??_qsort^(0+128)
 19807  1BFD  085E               	movf	(qsort@j+1)^(0+128),w
 19808  1BFE  3A80               	xorlw	128
 19809  1BFF  024D               	subwf	??_qsort^(0+128),w
 19810  1C00  1D03               	skipz
 19811  1C01  2C04               	goto	u9525
 19812  1C02  085D               	movf	qsort@j^(0+128),w
 19813  1C03  0255               	subwf	qsort@l^(0+128),w
 19814  1C04                     u9525:	
 19815  1C04  1803               	skipnc
 19816  1C05  2C2C               	goto	l8016
 19817  1C06  3001               	movlw	1
 19818  1C07  0141               	movlb	1	; select bank1
 19819  1C08  07D9               	addwf	qsort@s^(0+128),f
 19820  1C09  3000               	movlw	0
 19821  1C0A  3DDA               	addwfc	(qsort@s+1)^(0+128),f
 19822  1C0B  0859               	movf	qsort@s^(0+128),w
 19823  1C0C  00CD               	movwf	??_qsort^(0+128)
 19824  1C0D  3001               	movlw	1
 19825  1C0E                     u9535:	
 19826  1C0E  35CD               	lslf	??_qsort^(0+128),f
 19827  1C0F  3EFF               	addlw	-1
 19828  1C10  1D03               	skipz
 19829  1C11  2C0E               	goto	u9535
 19830  1C12  354D               	lslf	??_qsort^(0+128),w
 19831  1C13  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19832  1C14  0086               	movwf	6
 19833  1C15  3001               	movlw	1	; select bank3/4
 19834  1C16  0087               	movwf	7
 19835  1C17  0855               	movf	qsort@l^(0+128),w
 19836  1C18  3FC0               	movwi [0]fsr1
 19837  1C19  0856               	movf	(qsort@l+1)^(0+128),w
 19838  1C1A  3FC1               	movwi [1]fsr1
 19839  1C1B  0859               	movf	qsort@s^(0+128),w
 19840  1C1C  00CD               	movwf	??_qsort^(0+128)
 19841  1C1D  3001               	movlw	1
 19842  1C1E                     u9545:	
 19843  1C1E  35CD               	lslf	??_qsort^(0+128),f
 19844  1C1F  3EFF               	addlw	-1
 19845  1C20  1D03               	skipz
 19846  1C21  2C1E               	goto	u9545
 19847  1C22  354D               	lslf	??_qsort^(0+128),w
 19848  1C23  3E02               	addlw	2
 19849  1C24  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19850  1C25  0086               	movwf	6
 19851  1C26  3001               	movlw	1	; select bank3/4
 19852  1C27  0087               	movwf	7
 19853  1C28  085D               	movf	qsort@j^(0+128),w
 19854  1C29  3FC0               	movwi [0]fsr1
 19855  1C2A  085E               	movf	(qsort@j+1)^(0+128),w
 19856  1C2B  3FC1               	movwi [1]fsr1
 19857  1C2C                     l8016:	
 19858  1C2C  0141               	movlb	1	; select bank1
 19859  1C2D  085C               	movf	(qsort@i+1)^(0+128),w
 19860  1C2E  00D6               	movwf	(qsort@l+1)^(0+128)
 19861  1C2F  085B               	movf	qsort@i^(0+128),w
 19862  1C30  00D5               	movwf	qsort@l^(0+128)
 19863  1C31                     l8018:	
 19864  1C31  0856               	movf	(qsort@l+1)^(0+128),w
 19865  1C32  3A80               	xorlw	128
 19866  1C33  00CD               	movwf	??_qsort^(0+128)
 19867  1C34  0858               	movf	(qsort@r+1)^(0+128),w
 19868  1C35  3A80               	xorlw	128
 19869  1C36  024D               	subwf	??_qsort^(0+128),w
 19870  1C37  1D03               	skipz
 19871  1C38  2C3B               	goto	u9555
 19872  1C39  0857               	movf	qsort@r^(0+128),w
 19873  1C3A  0255               	subwf	qsort@l^(0+128),w
 19874  1C3B                     u9555:	
 19875  1C3B  1C03               	skipc
 19876  1C3C  2AD3               	goto	l7976
 19877  1C3D  0141               	movlb	1	; select bank1
 19878  1C3E  1BDA               	btfsc	(qsort@s+1)^(0+128),7
 19879  1C3F  0008               	return
 19880  1C40  2AAD               	goto	l7970
 19881  1C41                     __end_of_qsort:	
 19882                           
 19883                           	psect	text54
 19884  3298                     __ptext54:	
 19885 ;; *************** function _swap *****************
 19886 ;; Defined at:
 19887 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19888 ;; Parameters:    Size  Location     Type
 19889 ;;  len             2   17[BANK0 ] unsigned int 
 19890 ;;  s1              1   19[BANK0 ] PTR unsigned char 
 19891 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19892 ;;  s2              1   20[BANK0 ] PTR unsigned char 
 19893 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19894 ;; Auto vars:     Size  Location     Type
 19895 ;;  c               1   22[BANK0 ] unsigned char 
 19896 ;; Return value:  Size  Location     Type
 19897 ;;                  1    wreg      void 
 19898 ;; Registers used:
 19899 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19900 ;; Tracked objects:
 19901 ;;		On entry : 0/0
 19902 ;;		On exit  : 0/0
 19903 ;;		Unchanged: 0/0
 19904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19905 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19908 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19909 ;;Total ram usage:        6 bytes
 19910 ;; Hardware stack levels used:    1
 19911 ;; Hardware stack levels required when called:    3
 19912 ;; This function calls:
 19913 ;;		Nothing
 19914 ;; This function is called by:
 19915 ;;		_qsort
 19916 ;; This function uses a non-reentrant model
 19917 ;;
 19918                           
 19919                           
 19920                           ;psect for function _swap
 19921  3298                     _swap:	
 19922  3298                     l1495:	
 19923                           ;incstack = 0
 19924                           ; Regs used in _swap: [wreg+fsr1l+fsr1h+status,2+status,0]
 19925                           
 19926  3298  3001               	movlw	1
 19927  3299  0140               	movlb	0	; select bank0
 19928  329A  02B1               	subwf	swap@len,f
 19929  329B  3000               	movlw	0
 19930  329C  3BB2               	subwfb	swap@len+1,f
 19931  329D  0A31               	incf	swap@len,w
 19932  329E  1903               	btfsc	3,2
 19933  329F  0A32               	incf	swap@len+1,w
 19934  32A0  1903               	btfsc	3,2
 19935  32A1  0008               	return
 19936  32A2  0833               	movf	swap@s1,w
 19937  32A3  0086               	movwf	6
 19938  32A4  3002               	movlw	2	; select bank4/5
 19939  32A5  0087               	movwf	7
 19940  32A6  0801               	movf	1,w
 19941  32A7  00B5               	movwf	??_swap
 19942  32A8  0835               	movf	??_swap,w
 19943  32A9  00B6               	movwf	swap@c
 19944  32AA  0834               	movf	swap@s2,w
 19945  32AB  0086               	movwf	6
 19946  32AC  3002               	movlw	2	; select bank4/5
 19947  32AD  0087               	movwf	7
 19948  32AE  0801               	movf	1,w
 19949  32AF  00B5               	movwf	??_swap
 19950  32B0  0833               	movf	swap@s1,w
 19951  32B1  0086               	movwf	6
 19952  32B2  3002               	movlw	2	; select bank4/5
 19953  32B3  0087               	movwf	7
 19954  32B4  0835               	movf	??_swap,w
 19955  32B5  0081               	movwf	1
 19956  32B6  3001               	movlw	1
 19957  32B7  00B5               	movwf	??_swap
 19958  32B8  0835               	movf	??_swap,w
 19959  32B9  07B3               	addwf	swap@s1,f
 19960  32BA  0836               	movf	swap@c,w
 19961  32BB  00B5               	movwf	??_swap
 19962  32BC  0834               	movf	swap@s2,w
 19963  32BD  0086               	movwf	6
 19964  32BE  3002               	movlw	2	; select bank4/5
 19965  32BF  0087               	movwf	7
 19966  32C0  0835               	movf	??_swap,w
 19967  32C1  0081               	movwf	1
 19968  32C2  3001               	movlw	1
 19969  32C3  00B5               	movwf	??_swap
 19970  32C4  0835               	movf	??_swap,w
 19971  32C5  07B4               	addwf	swap@s2,f
 19972  32C6  2A98               	goto	l1495
 19973  32C7                     __end_of_swap:	
 19974                           
 19975                           	psect	text55
 19976  342E                     __ptext55:	
 19977 ;; *************** function _sortCur *****************
 19978 ;; Defined at:
 19979 ;;		line 454 in file "system.c"
 19980 ;; Parameters:    Size  Location     Type
 19981 ;;  cmp1            2   31[BANK1 ] PTR const void 
 19982 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19983 ;;  cmp2            2   33[BANK1 ] PTR const void 
 19984 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19985 ;; Auto vars:     Size  Location     Type
 19986 ;;  b               2   37[BANK1 ] PTR struct .
 19987 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19988 ;;  a               2   35[BANK1 ] PTR struct .
 19989 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19990 ;; Return value:  Size  Location     Type
 19991 ;;                  2   31[BANK1 ] int 
 19992 ;; Registers used:
 19993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19994 ;; Tracked objects:
 19995 ;;		On entry : 0/0
 19996 ;;		On exit  : 0/0
 19997 ;;		Unchanged: 0/0
 19998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19999 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20000 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20002 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20003 ;;Total ram usage:        8 bytes
 20004 ;; Hardware stack levels used:    1
 20005 ;; Hardware stack levels required when called:    5
 20006 ;; This function calls:
 20007 ;;		___flsub
 20008 ;;		___fltol
 20009 ;; This function is called by:
 20010 ;;		_channelThing
 20011 ;;		_qsort
 20012 ;; This function uses a non-reentrant model
 20013 ;;
 20014                           
 20015                           
 20016                           ;psect for function _sortCur
 20017  342E                     _sortCur:	
 20018                           
 20019                           ;system.c: 454: int sortCur(const void *cmp1, const void *cmp2);system.c: 455: {;system.
      +                          c: 456:  t_virtChannel *a = (t_virtChannel *)cmp1;
 20020                           
 20021                           ;incstack = 0
 20022                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20023  342E  0141               	movlb	1	; select bank1
 20024  342F  0840               	movf	(sortCur@cmp1+1)^(0+128),w
 20025  3430  00C4               	movwf	(sortCur@a+1)^(0+128)
 20026  3431  083F               	movf	sortCur@cmp1^(0+128),w
 20027  3432  00C3               	movwf	sortCur@a^(0+128)
 20028                           
 20029                           ;system.c: 457:  t_virtChannel *b = (t_virtChannel *)cmp2;
 20030  3433  0842               	movf	(sortCur@cmp2+1)^(0+128),w
 20031  3434  00C6               	movwf	(sortCur@b+1)^(0+128)
 20032  3435  0841               	movf	sortCur@cmp2^(0+128),w
 20033  3436  00C5               	movwf	sortCur@b^(0+128)
 20034                           
 20035                           ;system.c: 459:  return (b->current - a->current);
 20036  3437  0845               	movf	sortCur@b^(0+128),w
 20037  3438  0086               	movwf	6
 20038  3439  0846               	movf	(sortCur@b+1)^(0+128),w
 20039  343A  0087               	movwf	7
 20040  343B  3142               	addfsr 1,2
 20041  343C  3F40               	moviw [0]fsr1
 20042  343D  00B0               	movwf	___flsub@b^(0+128)
 20043  343E  3F41               	moviw [1]fsr1
 20044  343F  00B1               	movwf	(___flsub@b+1)^(0+128)
 20045  3440  3F42               	moviw [2]fsr1
 20046  3441  00B2               	movwf	(___flsub@b+2)^(0+128)
 20047  3442  3F43               	moviw [3]fsr1
 20048  3443  00B3               	movwf	(___flsub@b+3)^(0+128)
 20049  3444  0843               	movf	sortCur@a^(0+128),w
 20050  3445  0086               	movwf	6
 20051  3446  0844               	movf	(sortCur@a+1)^(0+128),w
 20052  3447  0087               	movwf	7
 20053  3448  3142               	addfsr 1,2
 20054  3449  3F40               	moviw [0]fsr1
 20055  344A  00AC               	movwf	___flsub@a^(0+128)
 20056  344B  3F41               	moviw [1]fsr1
 20057  344C  00AD               	movwf	(___flsub@a+1)^(0+128)
 20058  344D  3F42               	moviw [2]fsr1
 20059  344E  00AE               	movwf	(___flsub@a+2)^(0+128)
 20060  344F  3F43               	moviw [3]fsr1
 20061  3450  00AF               	movwf	(___flsub@a+3)^(0+128)
 20062  3451  31B3  235A  31B4   	fcall	___flsub
 20063  3454  0141               	movlb	1	; select bank1
 20064  3455  082F               	movf	(?___flsub+3)^(0+128),w
 20065  3456  00B7               	movwf	(___fltol@f1+3)^(0+128)
 20066  3457  082E               	movf	(?___flsub+2)^(0+128),w
 20067  3458  00B6               	movwf	(___fltol@f1+2)^(0+128)
 20068  3459  082D               	movf	(?___flsub+1)^(0+128),w
 20069  345A  00B5               	movwf	(___fltol@f1+1)^(0+128)
 20070  345B  082C               	movf	?___flsub^(0+128),w
 20071  345C  00B4               	movwf	___fltol@f1^(0+128)
 20072  345D  31B7  2731         	fcall	___fltol
 20073  345F  0141               	movlb	1	; select bank1
 20074  3460  0835               	movf	(?___fltol+1)^(0+128),w
 20075  3461  00C0               	movwf	(?_sortCur+1)^(0+128)
 20076  3462  0834               	movf	?___fltol^(0+128),w
 20077  3463  00BF               	movwf	?_sortCur^(0+128)
 20078  3464  0008               	return
 20079  3465                     __end_of_sortCur:	
 20080                           
 20081                           	psect	text56
 20082  33C4                     __ptext56:	
 20083 ;; *************** function _sortDC *****************
 20084 ;; Defined at:
 20085 ;;		line 432 in file "system.c"
 20086 ;; Parameters:    Size  Location     Type
 20087 ;;  cmp1            2   31[BANK1 ] PTR const void 
 20088 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20089 ;;  cmp2            2   33[BANK1 ] PTR const void 
 20090 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20091 ;; Auto vars:     Size  Location     Type
 20092 ;;  b               1   38[BANK1 ] unsigned char 
 20093 ;;  a               1   37[BANK1 ] unsigned char 
 20094 ;; Return value:  Size  Location     Type
 20095 ;;                  2   31[BANK1 ] int 
 20096 ;; Registers used:
 20097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20098 ;; Tracked objects:
 20099 ;;		On entry : 0/0
 20100 ;;		On exit  : 0/0
 20101 ;;		Unchanged: 0/0
 20102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20103 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20104 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20105 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20106 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20107 ;;Total ram usage:        8 bytes
 20108 ;; Hardware stack levels used:    1
 20109 ;; Hardware stack levels required when called:    4
 20110 ;; This function calls:
 20111 ;;		___bmul
 20112 ;; This function is called by:
 20113 ;;		_channelThing
 20114 ;;		_qsort
 20115 ;; This function uses a non-reentrant model
 20116 ;;
 20117                           
 20118                           
 20119                           ;psect for function _sortDC
 20120  33C4                     _sortDC:	
 20121                           
 20122                           ;system.c: 432: int sortDC(const void *cmp1, const void *cmp2);system.c: 433: {;system.c
      +                          : 434:  uint8_t a = *(uint8_t *)cmp1;
 20123                           
 20124                           ;incstack = 0
 20125                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20126  33C4  0141               	movlb	1	; select bank1
 20127  33C5  083F               	movf	sortDC@cmp1^(0+128),w
 20128  33C6  0086               	movwf	6
 20129  33C7  0840               	movf	(sortDC@cmp1+1)^(0+128),w
 20130  33C8  0087               	movwf	7
 20131  33C9  0801               	movf	1,w
 20132  33CA  00C3               	movwf	??_sortDC^(0+128)
 20133  33CB  0843               	movf	??_sortDC^(0+128),w
 20134  33CC  00C5               	movwf	sortDC@a^(0+128)
 20135                           
 20136                           ;system.c: 435:  uint8_t b = *(uint8_t *)cmp2;
 20137  33CD  0841               	movf	sortDC@cmp2^(0+128),w
 20138  33CE  0086               	movwf	6
 20139  33CF  0842               	movf	(sortDC@cmp2+1)^(0+128),w
 20140  33D0  0087               	movwf	7
 20141  33D1  0801               	movf	1,w
 20142  33D2  00C3               	movwf	??_sortDC^(0+128)
 20143  33D3  0843               	movf	??_sortDC^(0+128),w
 20144  33D4  00C6               	movwf	sortDC@b^(0+128)
 20145                           
 20146                           ;system.c: 437:  return (virtChannels[b].DC - virtChannels[a].DC);
 20147  33D5  3009               	movlw	9
 20148  33D6  00C3               	movwf	??_sortDC^(0+128)
 20149  33D7  0843               	movf	??_sortDC^(0+128),w
 20150  33D8  0140               	movlb	0	; select bank0
 20151  33D9  00AD               	movwf	___bmul@multiplicand
 20152  33DA  0141               	movlb	1	; select bank1
 20153  33DB  0846               	movf	sortDC@b^(0+128),w
 20154  33DC  31A0  2002  31B3   	fcall	___bmul
 20155  33DF  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20156  33E0  0086               	movwf	6
 20157  33E1  3002               	movlw	2	; select bank5/6
 20158  33E2  0087               	movwf	7
 20159  33E3  3009               	movlw	9
 20160  33E4  0141               	movlb	1	; select bank1
 20161  33E5  00C4               	movwf	(??_sortDC+1)^(0+128)
 20162  33E6  0844               	movf	(??_sortDC+1)^(0+128),w
 20163  33E7  0140               	movlb	0	; select bank0
 20164  33E8  00AD               	movwf	___bmul@multiplicand
 20165  33E9  0141               	movlb	1	; select bank1
 20166  33EA  0845               	movf	sortDC@a^(0+128),w
 20167  33EB  31A0  2002         	fcall	___bmul
 20168  33ED  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20169  33EE  0084               	movwf	4
 20170  33EF  3002               	movlw	2	; select bank5/6
 20171  33F0  0085               	movwf	5
 20172  33F1  0800               	movf	0,w
 20173  33F2  0201               	subwf	1,w
 20174  33F3  0141               	movlb	1	; select bank1
 20175  33F4  00BF               	movwf	?_sortDC^(0+128)
 20176  33F5  01C0               	clrf	(?_sortDC^(0+128)+1)
 20177  33F6  1C03               	skipc
 20178  33F7  03C0               	decf	(?_sortDC+1)^(0+128),f
 20179  33F8  0008               	return
 20180  33F9                     __end_of_sortDC:	
 20181                           
 20182                           	psect	text57
 20183  338F                     __ptext57:	
 20184 ;; *************** function _sortDCRev *****************
 20185 ;; Defined at:
 20186 ;;		line 443 in file "system.c"
 20187 ;; Parameters:    Size  Location     Type
 20188 ;;  cmp1            2   31[BANK1 ] PTR const void 
 20189 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20190 ;;  cmp2            2   33[BANK1 ] PTR const void 
 20191 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20192 ;; Auto vars:     Size  Location     Type
 20193 ;;  b               1   38[BANK1 ] unsigned char 
 20194 ;;  a               1   37[BANK1 ] unsigned char 
 20195 ;; Return value:  Size  Location     Type
 20196 ;;                  2   31[BANK1 ] int 
 20197 ;; Registers used:
 20198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20199 ;; Tracked objects:
 20200 ;;		On entry : 0/0
 20201 ;;		On exit  : 0/0
 20202 ;;		Unchanged: 0/0
 20203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20204 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20205 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20206 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20207 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20208 ;;Total ram usage:        8 bytes
 20209 ;; Hardware stack levels used:    1
 20210 ;; Hardware stack levels required when called:    4
 20211 ;; This function calls:
 20212 ;;		___bmul
 20213 ;; This function is called by:
 20214 ;;		_channelThing
 20215 ;;		_qsort
 20216 ;; This function uses a non-reentrant model
 20217 ;;
 20218                           
 20219                           
 20220                           ;psect for function _sortDCRev
 20221  338F                     _sortDCRev:	
 20222                           
 20223                           ;system.c: 443: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 444: {;syste
      +                          m.c: 445:  uint8_t a = *(uint8_t *)cmp1;
 20224                           
 20225                           ;incstack = 0
 20226                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20227  338F  0141               	movlb	1	; select bank1
 20228  3390  083F               	movf	sortDCRev@cmp1^(0+128),w
 20229  3391  0086               	movwf	6
 20230  3392  0840               	movf	(sortDCRev@cmp1+1)^(0+128),w
 20231  3393  0087               	movwf	7
 20232  3394  0801               	movf	1,w
 20233  3395  00C3               	movwf	??_sortDCRev^(0+128)
 20234  3396  0843               	movf	??_sortDCRev^(0+128),w
 20235  3397  00C5               	movwf	sortDCRev@a^(0+128)
 20236                           
 20237                           ;system.c: 446:  uint8_t b = *(uint8_t *)cmp2;
 20238  3398  0841               	movf	sortDCRev@cmp2^(0+128),w
 20239  3399  0086               	movwf	6
 20240  339A  0842               	movf	(sortDCRev@cmp2+1)^(0+128),w
 20241  339B  0087               	movwf	7
 20242  339C  0801               	movf	1,w
 20243  339D  00C3               	movwf	??_sortDCRev^(0+128)
 20244  339E  0843               	movf	??_sortDCRev^(0+128),w
 20245  339F  00C6               	movwf	sortDCRev@b^(0+128)
 20246                           
 20247                           ;system.c: 448:  return (virtChannels[a].DC - virtChannels[b].DC);
 20248  33A0  3009               	movlw	9
 20249  33A1  00C3               	movwf	??_sortDCRev^(0+128)
 20250  33A2  0843               	movf	??_sortDCRev^(0+128),w
 20251  33A3  0140               	movlb	0	; select bank0
 20252  33A4  00AD               	movwf	___bmul@multiplicand
 20253  33A5  0141               	movlb	1	; select bank1
 20254  33A6  0845               	movf	sortDCRev@a^(0+128),w
 20255  33A7  31A0  2002  31B3   	fcall	___bmul
 20256  33AA  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20257  33AB  0086               	movwf	6
 20258  33AC  3002               	movlw	2	; select bank5/6
 20259  33AD  0087               	movwf	7
 20260  33AE  3009               	movlw	9
 20261  33AF  0141               	movlb	1	; select bank1
 20262  33B0  00C4               	movwf	(??_sortDCRev+1)^(0+128)
 20263  33B1  0844               	movf	(??_sortDCRev+1)^(0+128),w
 20264  33B2  0140               	movlb	0	; select bank0
 20265  33B3  00AD               	movwf	___bmul@multiplicand
 20266  33B4  0141               	movlb	1	; select bank1
 20267  33B5  0846               	movf	sortDCRev@b^(0+128),w
 20268  33B6  31A0  2002         	fcall	___bmul
 20269  33B8  3EB0               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20270  33B9  0084               	movwf	4
 20271  33BA  3002               	movlw	2	; select bank5/6
 20272  33BB  0085               	movwf	5
 20273  33BC  0800               	movf	0,w
 20274  33BD  0201               	subwf	1,w
 20275  33BE  0141               	movlb	1	; select bank1
 20276  33BF  00BF               	movwf	?_sortDCRev^(0+128)
 20277  33C0  01C0               	clrf	(?_sortDCRev^(0+128)+1)
 20278  33C1  1C03               	skipc
 20279  33C2  03C0               	decf	(?_sortDCRev+1)^(0+128),f
 20280  33C3  0008               	return
 20281  33C4                     __end_of_sortDCRev:	
 20282                           
 20283                           	psect	text58
 20284  2002                     __ptext58:	
 20285 ;; *************** function ___bmul *****************
 20286 ;; Defined at:
 20287 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 20288 ;; Parameters:    Size  Location     Type
 20289 ;;  multiplier      1    wreg     unsigned char 
 20290 ;;  multiplicand    1   13[BANK0 ] unsigned char 
 20291 ;; Auto vars:     Size  Location     Type
 20292 ;;  multiplier      1   16[BANK0 ] unsigned char 
 20293 ;;  product         1   15[BANK0 ] unsigned char 
 20294 ;; Return value:  Size  Location     Type
 20295 ;;                  1    wreg      unsigned char 
 20296 ;; Registers used:
 20297 ;;		wreg, status,2, status,0
 20298 ;; Tracked objects:
 20299 ;;		On entry : 0/0
 20300 ;;		On exit  : 0/0
 20301 ;;		Unchanged: 0/0
 20302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20306 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20307 ;;Total ram usage:        4 bytes
 20308 ;; Hardware stack levels used:    1
 20309 ;; Hardware stack levels required when called:    3
 20310 ;; This function calls:
 20311 ;;		Nothing
 20312 ;; This function is called by:
 20313 ;;		_channelView
 20314 ;;		_sortDC
 20315 ;;		_sortDCRev
 20316 ;;		_channelThing
 20317 ;;		_controller
 20318 ;;		_qsort
 20319 ;;		___checkChannelStatus
 20320 ;; This function uses a non-reentrant model
 20321 ;;
 20322                           
 20323                           
 20324                           ;psect for function ___bmul
 20325  2002                     ___bmul:	
 20326                           
 20327                           ;incstack = 0
 20328                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 20329                           ;___bmul@multiplier stored from wreg
 20330  2002  0140               	movlb	0	; select bank0
 20331  2003  00B0               	movwf	___bmul@multiplier
 20332  2004  01AF               	clrf	___bmul@product
 20333  2005                     l7022:	
 20334  2005  1C30               	btfss	___bmul@multiplier,0
 20335  2006  280B               	goto	l7026
 20336  2007  082D               	movf	___bmul@multiplicand,w
 20337  2008  00AE               	movwf	??___bmul
 20338  2009  082E               	movf	??___bmul,w
 20339  200A  07AF               	addwf	___bmul@product,f
 20340  200B                     l7026:	
 20341  200B  1003               	clrc
 20342  200C  0DAD               	rlf	___bmul@multiplicand,f
 20343  200D  1003               	clrc
 20344  200E  0CB0               	rrf	___bmul@multiplier,f
 20345  200F  0830               	movf	___bmul@multiplier,w
 20346  2010  1D03               	btfss	3,2
 20347  2011  2805               	goto	l7022
 20348  2012  082F               	movf	___bmul@product,w
 20349  2013  0008               	return
 20350  2014                     __end_of___bmul:	
 20351                           
 20352                           	psect	text59
 20353  3731                     __ptext59:	
 20354 ;; *************** function ___fltol *****************
 20355 ;; Defined at:
 20356 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 20357 ;; Parameters:    Size  Location     Type
 20358 ;;  f1              4   20[BANK1 ] unsigned char 
 20359 ;; Auto vars:     Size  Location     Type
 20360 ;;  exp1            1   30[BANK1 ] unsigned char 
 20361 ;;  sign1           1   29[BANK1 ] unsigned char 
 20362 ;; Return value:  Size  Location     Type
 20363 ;;                  4   20[BANK1 ] long 
 20364 ;; Registers used:
 20365 ;;		wreg, status,2, status,0
 20366 ;; Tracked objects:
 20367 ;;		On entry : 0/0
 20368 ;;		On exit  : 0/0
 20369 ;;		Unchanged: 0/0
 20370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20371 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20372 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20373 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20374 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20375 ;;Total ram usage:       11 bytes
 20376 ;; Hardware stack levels used:    1
 20377 ;; Hardware stack levels required when called:    3
 20378 ;; This function calls:
 20379 ;;		Nothing
 20380 ;; This function is called by:
 20381 ;;		_channelView
 20382 ;;		_checkChannelStatus
 20383 ;;		_sortCur
 20384 ;;		_ftoa
 20385 ;;		___checkChannelStatus
 20386 ;; This function uses a non-reentrant model
 20387 ;;
 20388                           
 20389                           
 20390                           ;psect for function ___fltol
 20391  3731                     ___fltol:	
 20392                           
 20393                           ;incstack = 0
 20394                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 20395  3731  1003               	clrc
 20396  3732  0141               	movlb	1	; select bank1
 20397  3733  0D36               	rlf	(___fltol@f1+2)^(0+128),w
 20398  3734  0D37               	rlf	(___fltol@f1+3)^(0+128),w
 20399  3735  00B8               	movwf	??___fltol^(0+128)
 20400  3736  0838               	movf	??___fltol^(0+128),w
 20401  3737  00BE               	movwf	___fltol@exp1^(0+128)
 20402  3738  083E               	movf	___fltol@exp1^(0+128),w
 20403  3739  1D03               	btfss	3,2
 20404  373A  2F44               	goto	l7084
 20405  373B                     l7080:	
 20406  373B  3000               	movlw	0
 20407  373C  00B7               	movwf	(?___fltol+3)^(0+128)
 20408  373D  3000               	movlw	0
 20409  373E  00B6               	movwf	(?___fltol+2)^(0+128)
 20410  373F  3000               	movlw	0
 20411  3740  00B5               	movwf	(?___fltol+1)^(0+128)
 20412  3741  3000               	movlw	0
 20413  3742  00B4               	movwf	?___fltol^(0+128)
 20414  3743  0008               	return
 20415  3744                     l7084:	
 20416  3744  0834               	movf	___fltol@f1^(0+128),w
 20417  3745  00B8               	movwf	??___fltol^(0+128)
 20418  3746  0835               	movf	(___fltol@f1+1)^(0+128),w
 20419  3747  00B9               	movwf	(??___fltol^(0+128)+1)
 20420  3748  0836               	movf	(___fltol@f1+2)^(0+128),w
 20421  3749  00BA               	movwf	(??___fltol^(0+128)+2)
 20422  374A  0837               	movf	(___fltol@f1+3)^(0+128),w
 20423  374B  00BB               	movwf	(??___fltol^(0+128)+3)
 20424  374C  301F               	movlw	31
 20425  374D                     u8185:	
 20426  374D  36BB               	lsrf	(??___fltol^(0+128)+3),f
 20427  374E  0CBA               	rrf	(??___fltol^(0+128)+2),f
 20428  374F  0CB9               	rrf	(??___fltol^(0+128)+1),f
 20429  3750  0CB8               	rrf	??___fltol^(0+128),f
 20430  3751  0B89               	decfsz	9,f
 20431  3752  2F4D               	goto	u8185
 20432  3753  0838               	movf	??___fltol^(0+128),w
 20433  3754  00BC               	movwf	(??___fltol+4)^(0+128)
 20434  3755  083C               	movf	(??___fltol+4)^(0+128),w
 20435  3756  00BD               	movwf	___fltol@sign1^(0+128)
 20436  3757  17B6               	bsf	(___fltol@f1^(0+128)+2),7
 20437  3758  30FF               	movlw	255
 20438  3759  05B4               	andwf	___fltol@f1^(0+128),f
 20439  375A  30FF               	movlw	255
 20440  375B  05B5               	andwf	(___fltol@f1+1)^(0+128),f
 20441  375C  30FF               	movlw	255
 20442  375D  05B6               	andwf	(___fltol@f1+2)^(0+128),f
 20443  375E  3000               	movlw	0
 20444  375F  05B7               	andwf	(___fltol@f1+3)^(0+128),f
 20445  3760  3096               	movlw	150
 20446  3761  02BE               	subwf	___fltol@exp1^(0+128),f
 20447  3762  1FBE               	btfss	___fltol@exp1^(0+128),7
 20448  3763  2F77               	goto	l7102
 20449  3764  083E               	movf	___fltol@exp1^(0+128),w
 20450  3765  3A80               	xorlw	128
 20451  3766  3E97               	addlw	151
 20452  3767  1C03               	btfss	3,0
 20453  3768  2F3B               	goto	l7080
 20454  3769                     l7100:	
 20455  3769  3001               	movlw	1
 20456  376A                     u8215:	
 20457  376A  36B7               	lsrf	(___fltol@f1+3)^(0+128),f
 20458  376B  0CB6               	rrf	(___fltol@f1+2)^(0+128),f
 20459  376C  0CB5               	rrf	(___fltol@f1+1)^(0+128),f
 20460  376D  0CB4               	rrf	___fltol@f1^(0+128),f
 20461  376E  0B89               	decfsz	9,f
 20462  376F  2F6A               	goto	u8215
 20463  3770  3001               	movlw	1
 20464  3771  00B8               	movwf	??___fltol^(0+128)
 20465  3772  0838               	movf	??___fltol^(0+128),w
 20466  3773  07BE               	addwf	___fltol@exp1^(0+128),f
 20467  3774  1903               	btfsc	3,2
 20468  3775  2F88               	goto	l7110
 20469  3776  2F69               	goto	l7100
 20470  3777                     l7102:	
 20471  3777  3020               	movlw	32
 20472  3778  023E               	subwf	___fltol@exp1^(0+128),w
 20473  3779  1803               	btfsc	3,0
 20474  377A  2F3B               	goto	l7080
 20475  377B                     l1241:	
 20476  377B  083E               	movf	___fltol@exp1^(0+128),w
 20477  377C  1903               	btfsc	3,2
 20478  377D  2F88               	goto	l7110
 20479  377E  3001               	movlw	1
 20480  377F                     u8245:	
 20481  377F  35B4               	lslf	___fltol@f1^(0+128),f
 20482  3780  0DB5               	rlf	(___fltol@f1+1)^(0+128),f
 20483  3781  0DB6               	rlf	(___fltol@f1+2)^(0+128),f
 20484  3782  0DB7               	rlf	(___fltol@f1+3)^(0+128),f
 20485  3783  0B89               	decfsz	9,f
 20486  3784  2F7F               	goto	u8245
 20487  3785  3001               	movlw	1
 20488  3786  02BE               	subwf	___fltol@exp1^(0+128),f
 20489  3787  2F7B               	goto	l1241
 20490  3788                     l7110:	
 20491  3788  083D               	movf	___fltol@sign1^(0+128),w
 20492  3789  1903               	btfsc	3,2
 20493  378A  0008               	return
 20494  378B  09B4               	comf	___fltol@f1^(0+128),f
 20495  378C  09B5               	comf	(___fltol@f1+1)^(0+128),f
 20496  378D  09B6               	comf	(___fltol@f1+2)^(0+128),f
 20497  378E  09B7               	comf	(___fltol@f1+3)^(0+128),f
 20498  378F  0AB4               	incf	___fltol@f1^(0+128),f
 20499  3790  1903               	skipnz
 20500  3791  0AB5               	incf	(___fltol@f1+1)^(0+128),f
 20501  3792  1903               	skipnz
 20502  3793  0AB6               	incf	(___fltol@f1+2)^(0+128),f
 20503  3794  1903               	skipnz
 20504  3795  0AB7               	incf	(___fltol@f1+3)^(0+128),f
 20505  3796  0008               	return
 20506  3797                     __end_of___fltol:	
 20507                           
 20508                           	psect	text60
 20509  326C                     __ptext60:	
 20510 ;; *************** function _memcpy *****************
 20511 ;; Defined at:
 20512 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 20513 ;; Parameters:    Size  Location     Type
 20514 ;;  d1              1    wreg     PTR void 
 20515 ;;		 -> qsort@xbuf(60), 
 20516 ;;  s1              1   17[BANK0 ] PTR const void 
 20517 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20518 ;;  n               2   18[BANK0 ] unsigned int 
 20519 ;; Auto vars:     Size  Location     Type
 20520 ;;  d1              1   22[BANK0 ] PTR void 
 20521 ;;		 -> qsort@xbuf(60), 
 20522 ;;  s               1   24[BANK0 ] PTR const unsigned char 
 20523 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20524 ;;  d               1   23[BANK0 ] PTR unsigned char 
 20525 ;;		 -> qsort@xbuf(60), 
 20526 ;;  tmp             1   21[BANK0 ] unsigned char 
 20527 ;; Return value:  Size  Location     Type
 20528 ;;                  1    wreg      PTR void 
 20529 ;; Registers used:
 20530 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20531 ;; Tracked objects:
 20532 ;;		On entry : 0/0
 20533 ;;		On exit  : 0/0
 20534 ;;		Unchanged: 0/0
 20535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20536 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20537 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20539 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20540 ;;Total ram usage:        8 bytes
 20541 ;; Hardware stack levels used:    1
 20542 ;; Hardware stack levels required when called:    3
 20543 ;; This function calls:
 20544 ;;		Nothing
 20545 ;; This function is called by:
 20546 ;;		_qsort
 20547 ;; This function uses a non-reentrant model
 20548 ;;
 20549                           
 20550                           
 20551                           ;psect for function _memcpy
 20552  326C                     _memcpy:	
 20553                           
 20554                           ;incstack = 0
 20555                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 20556                           ;memcpy@d1 stored from wreg
 20557  326C  0140               	movlb	0	; select bank0
 20558  326D  00B6               	movwf	memcpy@d1
 20559  326E  0831               	movf	memcpy@s1,w
 20560  326F  00B4               	movwf	??_memcpy
 20561  3270  0834               	movf	??_memcpy,w
 20562  3271  00B8               	movwf	memcpy@s
 20563  3272  0836               	movf	memcpy@d1,w
 20564  3273  00B4               	movwf	??_memcpy
 20565  3274  0834               	movf	??_memcpy,w
 20566  3275  00B7               	movwf	memcpy@d
 20567  3276                     l1539:	
 20568  3276  3001               	movlw	1
 20569  3277  02B2               	subwf	memcpy@n,f
 20570  3278  3000               	movlw	0
 20571  3279  3BB3               	subwfb	memcpy@n+1,f
 20572  327A  0A32               	incf	memcpy@n,w
 20573  327B  1903               	btfsc	3,2
 20574  327C  0A33               	incf	memcpy@n+1,w
 20575  327D  1903               	btfsc	3,2
 20576  327E  0008               	return
 20577  327F  0838               	movf	memcpy@s,w
 20578  3280  0086               	movwf	6
 20579  3281  3002               	movlw	2	; select bank4/5
 20580  3282  0087               	movwf	7
 20581  3283  0801               	movf	1,w
 20582  3284  00B4               	movwf	??_memcpy
 20583  3285  0834               	movf	??_memcpy,w
 20584  3286  00B5               	movwf	memcpy@tmp
 20585  3287  3001               	movlw	1
 20586  3288  00B4               	movwf	??_memcpy
 20587  3289  0834               	movf	??_memcpy,w
 20588  328A  07B8               	addwf	memcpy@s,f
 20589  328B  0835               	movf	memcpy@tmp,w
 20590  328C  00B4               	movwf	??_memcpy
 20591  328D  0837               	movf	memcpy@d,w
 20592  328E  0086               	movwf	6
 20593  328F  3001               	movlw	1	; select bank2/3
 20594  3290  0087               	movwf	7
 20595  3291  0834               	movf	??_memcpy,w
 20596  3292  0081               	movwf	1
 20597  3293  3001               	movlw	1
 20598  3294  00B4               	movwf	??_memcpy
 20599  3295  0834               	movf	??_memcpy,w
 20600  3296  07B7               	addwf	memcpy@d,f
 20601  3297  2A76               	goto	l1539
 20602  3298                     __end_of_memcpy:	
 20603                           
 20604                           	psect	text61
 20605  36DF                     __ptext61:	
 20606 ;; *************** function ___awdiv *****************
 20607 ;; Defined at:
 20608 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 20609 ;; Parameters:    Size  Location     Type
 20610 ;;  divisor         2    4[BANK0 ] int 
 20611 ;;  dividend        2    6[BANK0 ] int 
 20612 ;; Auto vars:     Size  Location     Type
 20613 ;;  quotient        2   11[BANK0 ] int 
 20614 ;;  sign            1   10[BANK0 ] unsigned char 
 20615 ;;  counter         1    9[BANK0 ] unsigned char 
 20616 ;; Return value:  Size  Location     Type
 20617 ;;                  2    4[BANK0 ] int 
 20618 ;; Registers used:
 20619 ;;		wreg, status,2, status,0
 20620 ;; Tracked objects:
 20621 ;;		On entry : 0/0
 20622 ;;		On exit  : 0/0
 20623 ;;		Unchanged: 0/0
 20624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20625 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20626 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20628 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20629 ;;Total ram usage:        9 bytes
 20630 ;; Hardware stack levels used:    1
 20631 ;; Hardware stack levels required when called:    3
 20632 ;; This function calls:
 20633 ;;		Nothing
 20634 ;; This function is called by:
 20635 ;;		_itoa
 20636 ;;		_qsort
 20637 ;; This function uses a non-reentrant model
 20638 ;;
 20639                           
 20640                           
 20641                           ;psect for function ___awdiv
 20642  36DF                     ___awdiv:	
 20643                           
 20644                           ;incstack = 0
 20645                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20646  36DF  0140               	movlb	0	; select bank0
 20647  36E0  01AA               	clrf	___awdiv@sign
 20648  36E1  1FA5               	btfss	___awdiv@divisor+1,7
 20649  36E2  2EEA               	goto	l7042
 20650  36E3  09A4               	comf	___awdiv@divisor,f
 20651  36E4  09A5               	comf	___awdiv@divisor+1,f
 20652  36E5  0AA4               	incf	___awdiv@divisor,f
 20653  36E6  1903               	skipnz
 20654  36E7  0AA5               	incf	___awdiv@divisor+1,f
 20655  36E8  01AA               	clrf	___awdiv@sign
 20656  36E9  0AAA               	incf	___awdiv@sign,f
 20657  36EA                     l7042:	
 20658  36EA  1FA7               	btfss	___awdiv@dividend+1,7
 20659  36EB  2EF5               	goto	l7048
 20660  36EC  09A6               	comf	___awdiv@dividend,f
 20661  36ED  09A7               	comf	___awdiv@dividend+1,f
 20662  36EE  0AA6               	incf	___awdiv@dividend,f
 20663  36EF  1903               	skipnz
 20664  36F0  0AA7               	incf	___awdiv@dividend+1,f
 20665  36F1  3001               	movlw	1
 20666  36F2  00A8               	movwf	??___awdiv
 20667  36F3  0828               	movf	??___awdiv,w
 20668  36F4  06AA               	xorwf	___awdiv@sign,f
 20669  36F5                     l7048:	
 20670  36F5  01AB               	clrf	___awdiv@quotient
 20671  36F6  01AC               	clrf	___awdiv@quotient+1
 20672  36F7  0824               	movf	___awdiv@divisor,w
 20673  36F8  0425               	iorwf	___awdiv@divisor+1,w
 20674  36F9  1903               	btfsc	3,2
 20675  36FA  2F24               	goto	l7070
 20676  36FB  01A9               	clrf	___awdiv@counter
 20677  36FC  0AA9               	incf	___awdiv@counter,f
 20678  36FD                     l7058:	
 20679  36FD  1BA5               	btfsc	___awdiv@divisor+1,7
 20680  36FE  2F09               	goto	l7060
 20681  36FF  3001               	movlw	1
 20682  3700                     u8105:	
 20683  3700  35A4               	lslf	___awdiv@divisor,f
 20684  3701  0DA5               	rlf	___awdiv@divisor+1,f
 20685  3702  0B89               	decfsz	9,f
 20686  3703  2F00               	goto	u8105
 20687  3704  3001               	movlw	1
 20688  3705  00A8               	movwf	??___awdiv
 20689  3706  0828               	movf	??___awdiv,w
 20690  3707  07A9               	addwf	___awdiv@counter,f
 20691  3708  2EFD               	goto	l7058
 20692  3709                     l7060:	
 20693  3709  3001               	movlw	1
 20694  370A                     u8125:	
 20695  370A  35AB               	lslf	___awdiv@quotient,f
 20696  370B  0DAC               	rlf	___awdiv@quotient+1,f
 20697  370C  0B89               	decfsz	9,f
 20698  370D  2F0A               	goto	u8125
 20699  370E  0825               	movf	___awdiv@divisor+1,w
 20700  370F  0227               	subwf	___awdiv@dividend+1,w
 20701  3710  1D03               	skipz
 20702  3711  2F14               	goto	u8135
 20703  3712  0824               	movf	___awdiv@divisor,w
 20704  3713  0226               	subwf	___awdiv@dividend,w
 20705  3714                     u8135:	
 20706  3714  1C03               	skipc
 20707  3715  2F1B               	goto	l7066
 20708  3716  0824               	movf	___awdiv@divisor,w
 20709  3717  02A6               	subwf	___awdiv@dividend,f
 20710  3718  0825               	movf	___awdiv@divisor+1,w
 20711  3719  3BA7               	subwfb	___awdiv@dividend+1,f
 20712  371A  142B               	bsf	___awdiv@quotient,0
 20713  371B                     l7066:	
 20714  371B  3001               	movlw	1
 20715  371C                     u8145:	
 20716  371C  36A5               	lsrf	___awdiv@divisor+1,f
 20717  371D  0CA4               	rrf	___awdiv@divisor,f
 20718  371E  0B89               	decfsz	9,f
 20719  371F  2F1C               	goto	u8145
 20720  3720  3001               	movlw	1
 20721  3721  02A9               	subwf	___awdiv@counter,f
 20722  3722  1D03               	btfss	3,2
 20723  3723  2F09               	goto	l7060
 20724  3724                     l7070:	
 20725  3724  082A               	movf	___awdiv@sign,w
 20726  3725  1903               	btfsc	3,2
 20727  3726  2F2C               	goto	l7074
 20728  3727  09AB               	comf	___awdiv@quotient,f
 20729  3728  09AC               	comf	___awdiv@quotient+1,f
 20730  3729  0AAB               	incf	___awdiv@quotient,f
 20731  372A  1903               	skipnz
 20732  372B  0AAC               	incf	___awdiv@quotient+1,f
 20733  372C                     l7074:	
 20734  372C  082C               	movf	___awdiv@quotient+1,w
 20735  372D  00A5               	movwf	?___awdiv+1
 20736  372E  082B               	movf	___awdiv@quotient,w
 20737  372F  00A4               	movwf	?___awdiv
 20738  3730  0008               	return
 20739  3731                     __end_of___awdiv:	
 20740                           
 20741                           	psect	text62
 20742  2B7E                     __ptext62:	
 20743 ;; *************** function ___xxtofl *****************
 20744 ;; Defined at:
 20745 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 20746 ;; Parameters:    Size  Location     Type
 20747 ;;  sign            1    wreg     unsigned char 
 20748 ;;  val             4   23[BANK0 ] long 
 20749 ;; Auto vars:     Size  Location     Type
 20750 ;;  sign            1   31[BANK0 ] unsigned char 
 20751 ;;  arg             4   33[BANK0 ] unsigned long 
 20752 ;;  exp             1   32[BANK0 ] unsigned char 
 20753 ;; Return value:  Size  Location     Type
 20754 ;;                  4   23[BANK0 ] unsigned char 
 20755 ;; Registers used:
 20756 ;;		wreg, status,2, status,0
 20757 ;; Tracked objects:
 20758 ;;		On entry : 0/0
 20759 ;;		On exit  : 0/0
 20760 ;;		Unchanged: 0/0
 20761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20762 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20763 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20764 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20765 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20766 ;;Total ram usage:       14 bytes
 20767 ;; Hardware stack levels used:    1
 20768 ;; Hardware stack levels required when called:    3
 20769 ;; This function calls:
 20770 ;;		Nothing
 20771 ;; This function is called by:
 20772 ;;		_checkChannelStatus
 20773 ;;		_systemCheck
 20774 ;;		_getAnalogValues
 20775 ;;		_channelThing
 20776 ;;		_ftoa
 20777 ;;		___checkChannelStatus
 20778 ;; This function uses a non-reentrant model
 20779 ;;
 20780                           
 20781                           
 20782                           ;psect for function ___xxtofl
 20783  2B7E                     ___xxtofl:	
 20784                           
 20785                           ;incstack = 0
 20786                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 20787                           ;___xxtofl@sign stored from wreg
 20788  2B7E  0140               	movlb	0	; select bank0
 20789  2B7F  00BF               	movwf	___xxtofl@sign
 20790  2B80  083F               	movf	___xxtofl@sign,w
 20791  2B81  1D03               	btfss	3,2
 20792  2B82  1FBA               	btfss	___xxtofl@val+3,7
 20793  2B83  2B94               	goto	l4888
 20794  2B84  0937               	comf	___xxtofl@val,w
 20795  2B85  00C1               	movwf	___xxtofl@arg
 20796  2B86  0938               	comf	___xxtofl@val+1,w
 20797  2B87  00C2               	movwf	___xxtofl@arg+1
 20798  2B88  0939               	comf	___xxtofl@val+2,w
 20799  2B89  00C3               	movwf	___xxtofl@arg+2
 20800  2B8A  093A               	comf	___xxtofl@val+3,w
 20801  2B8B  00C4               	movwf	___xxtofl@arg+3
 20802  2B8C  0AC1               	incf	___xxtofl@arg,f
 20803  2B8D  1903               	skipnz
 20804  2B8E  0AC2               	incf	___xxtofl@arg+1,f
 20805  2B8F  1903               	skipnz
 20806  2B90  0AC3               	incf	___xxtofl@arg+2,f
 20807  2B91  1903               	skipnz
 20808  2B92  0AC4               	incf	___xxtofl@arg+3,f
 20809  2B93  2B9C               	goto	l1475
 20810  2B94                     l4888:	
 20811  2B94  083A               	movf	___xxtofl@val+3,w
 20812  2B95  00C4               	movwf	___xxtofl@arg+3
 20813  2B96  0839               	movf	___xxtofl@val+2,w
 20814  2B97  00C3               	movwf	___xxtofl@arg+2
 20815  2B98  0838               	movf	___xxtofl@val+1,w
 20816  2B99  00C2               	movwf	___xxtofl@arg+1
 20817  2B9A  0837               	movf	___xxtofl@val,w
 20818  2B9B  00C1               	movwf	___xxtofl@arg
 20819  2B9C                     l1475:	
 20820  2B9C  083A               	movf	___xxtofl@val+3,w
 20821  2B9D  0439               	iorwf	___xxtofl@val+2,w
 20822  2B9E  0438               	iorwf	___xxtofl@val+1,w
 20823  2B9F  0437               	iorwf	___xxtofl@val,w
 20824  2BA0  1D03               	skipz
 20825  2BA1  2BAB               	goto	l4894
 20826  2BA2  3000               	movlw	0
 20827  2BA3  00BA               	movwf	?___xxtofl+3
 20828  2BA4  3000               	movlw	0
 20829  2BA5  00B9               	movwf	?___xxtofl+2
 20830  2BA6  3000               	movlw	0
 20831  2BA7  00B8               	movwf	?___xxtofl+1
 20832  2BA8  3000               	movlw	0
 20833  2BA9  00B7               	movwf	?___xxtofl
 20834  2BAA  0008               	return
 20835  2BAB                     l4894:	
 20836  2BAB  3096               	movlw	150
 20837  2BAC  00BB               	movwf	??___xxtofl
 20838  2BAD  083B               	movf	??___xxtofl,w
 20839  2BAE  00C0               	movwf	___xxtofl@exp
 20840  2BAF                     l4898:	
 20841  2BAF  30FE               	movlw	254
 20842  2BB0  0544               	andwf	___xxtofl@arg+3,w
 20843  2BB1  1903               	btfsc	3,2
 20844  2BB2  2BD2               	goto	l1481
 20845  2BB3  3001               	movlw	1
 20846  2BB4  00BB               	movwf	??___xxtofl
 20847  2BB5  083B               	movf	??___xxtofl,w
 20848  2BB6  07C0               	addwf	___xxtofl@exp,f
 20849  2BB7  3001               	movlw	1
 20850  2BB8                     u5275:	
 20851  2BB8  36C4               	lsrf	___xxtofl@arg+3,f
 20852  2BB9  0CC3               	rrf	___xxtofl@arg+2,f
 20853  2BBA  0CC2               	rrf	___xxtofl@arg+1,f
 20854  2BBB  0CC1               	rrf	___xxtofl@arg,f
 20855  2BBC  0B89               	decfsz	9,f
 20856  2BBD  2BB8               	goto	u5275
 20857  2BBE  2BAF               	goto	l4898
 20858  2BBF                     l4900:	
 20859  2BBF  3001               	movlw	1
 20860  2BC0  00BB               	movwf	??___xxtofl
 20861  2BC1  083B               	movf	??___xxtofl,w
 20862  2BC2  07C0               	addwf	___xxtofl@exp,f
 20863  2BC3  3001               	movlw	1
 20864  2BC4  07C1               	addwf	___xxtofl@arg,f
 20865  2BC5  3000               	movlw	0
 20866  2BC6  3DC2               	addwfc	___xxtofl@arg+1,f
 20867  2BC7  3000               	movlw	0
 20868  2BC8  3DC3               	addwfc	___xxtofl@arg+2,f
 20869  2BC9  3000               	movlw	0
 20870  2BCA  3DC4               	addwfc	___xxtofl@arg+3,f
 20871  2BCB  3001               	movlw	1
 20872  2BCC                     u5295:	
 20873  2BCC  36C4               	lsrf	___xxtofl@arg+3,f
 20874  2BCD  0CC3               	rrf	___xxtofl@arg+2,f
 20875  2BCE  0CC2               	rrf	___xxtofl@arg+1,f
 20876  2BCF  0CC1               	rrf	___xxtofl@arg,f
 20877  2BD0  0B89               	decfsz	9,f
 20878  2BD1  2BCC               	goto	u5295
 20879  2BD2                     l1481:	
 20880  2BD2  30FF               	movlw	255
 20881  2BD3  0544               	andwf	___xxtofl@arg+3,w
 20882  2BD4  1903               	btfsc	3,2
 20883  2BD5  2BE4               	goto	l4908
 20884  2BD6  2BBF               	goto	l4900
 20885  2BD7                     l4910:	
 20886  2BD7  3002               	movlw	2
 20887  2BD8  0240               	subwf	___xxtofl@exp,w
 20888  2BD9  1C03               	btfss	3,0
 20889  2BDA  2BE6               	goto	l1488
 20890  2BDB  3001               	movlw	1
 20891  2BDC  02C0               	subwf	___xxtofl@exp,f
 20892  2BDD  3001               	movlw	1
 20893  2BDE                     u5315:	
 20894  2BDE  35C1               	lslf	___xxtofl@arg,f
 20895  2BDF  0DC2               	rlf	___xxtofl@arg+1,f
 20896  2BE0  0DC3               	rlf	___xxtofl@arg+2,f
 20897  2BE1  0DC4               	rlf	___xxtofl@arg+3,f
 20898  2BE2  0B89               	decfsz	9,f
 20899  2BE3  2BDE               	goto	u5315
 20900  2BE4                     l4908:	
 20901  2BE4  1FC3               	btfss	___xxtofl@arg+2,7
 20902  2BE5  2BD7               	goto	l4910
 20903  2BE6                     l1488:	
 20904  2BE6  1840               	btfsc	___xxtofl@exp,0
 20905  2BE7  2BF0               	goto	l1489
 20906  2BE8  30FF               	movlw	255
 20907  2BE9  05C1               	andwf	___xxtofl@arg,f
 20908  2BEA  30FF               	movlw	255
 20909  2BEB  05C2               	andwf	___xxtofl@arg+1,f
 20910  2BEC  307F               	movlw	127
 20911  2BED  05C3               	andwf	___xxtofl@arg+2,f
 20912  2BEE  30FF               	movlw	255
 20913  2BEF  05C4               	andwf	___xxtofl@arg+3,f
 20914  2BF0                     l1489:	
 20915  2BF0  1003               	clrc
 20916  2BF1  0CC0               	rrf	___xxtofl@exp,f
 20917  2BF2  0840               	movf	___xxtofl@exp,w
 20918  2BF3  00BB               	movwf	??___xxtofl
 20919  2BF4  01BC               	clrf	??___xxtofl+1
 20920  2BF5  01BD               	clrf	??___xxtofl+2
 20921  2BF6  01BE               	clrf	??___xxtofl+3
 20922  2BF7  3018               	movlw	24
 20923  2BF8                     u5355:	
 20924  2BF8  35BB               	lslf	??___xxtofl,f
 20925  2BF9  0DBC               	rlf	??___xxtofl+1,f
 20926  2BFA  0DBD               	rlf	??___xxtofl+2,f
 20927  2BFB  0DBE               	rlf	??___xxtofl+3,f
 20928  2BFC  0B89               	decfsz	9,f
 20929  2BFD  2BF8               	goto	u5355
 20930  2BFE  083B               	movf	??___xxtofl,w
 20931  2BFF  04C1               	iorwf	___xxtofl@arg,f
 20932  2C00  083C               	movf	??___xxtofl+1,w
 20933  2C01  04C2               	iorwf	___xxtofl@arg+1,f
 20934  2C02  083D               	movf	??___xxtofl+2,w
 20935  2C03  04C3               	iorwf	___xxtofl@arg+2,f
 20936  2C04  083E               	movf	??___xxtofl+3,w
 20937  2C05  04C4               	iorwf	___xxtofl@arg+3,f
 20938  2C06  083F               	movf	___xxtofl@sign,w
 20939  2C07  1D03               	btfss	3,2
 20940  2C08  1FBA               	btfss	___xxtofl@val+3,7
 20941  2C09  2C0B               	goto	l4922
 20942  2C0A  17C4               	bsf	___xxtofl@arg+3,7
 20943  2C0B                     l4922:	
 20944  2C0B  0844               	movf	___xxtofl@arg+3,w
 20945  2C0C  00BA               	movwf	?___xxtofl+3
 20946  2C0D  0843               	movf	___xxtofl@arg+2,w
 20947  2C0E  00B9               	movwf	?___xxtofl+2
 20948  2C0F  0842               	movf	___xxtofl@arg+1,w
 20949  2C10  00B8               	movwf	?___xxtofl+1
 20950  2C11  0841               	movf	___xxtofl@arg,w
 20951  2C12  00B7               	movwf	?___xxtofl
 20952  2C13  0008               	return
 20953  2C14                     __end_of___xxtofl:	
 20954                           
 20955                           	psect	text63
 20956  2A77                     __ptext63:	
 20957 ;; *************** function ___flge *****************
 20958 ;; Defined at:
 20959 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 20960 ;; Parameters:    Size  Location     Type
 20961 ;;  ff1             4   18[BANK1 ] unsigned char 
 20962 ;;  ff2             4   22[BANK1 ] unsigned char 
 20963 ;; Auto vars:     Size  Location     Type
 20964 ;;		None
 20965 ;; Return value:  Size  Location     Type
 20966 ;;		None               void
 20967 ;; Registers used:
 20968 ;;		wreg, status,2, status,0
 20969 ;; Tracked objects:
 20970 ;;		On entry : 0/0
 20971 ;;		On exit  : 0/0
 20972 ;;		Unchanged: 0/0
 20973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20974 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20976 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20977 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20978 ;;Total ram usage:       12 bytes
 20979 ;; Hardware stack levels used:    1
 20980 ;; Hardware stack levels required when called:    3
 20981 ;; This function calls:
 20982 ;;		Nothing
 20983 ;; This function is called by:
 20984 ;;		_spinInput
 20985 ;;		_channelSetup
 20986 ;;		_setOutputPower
 20987 ;;		_checkChannelStatus
 20988 ;;		_systemCheck
 20989 ;;		_checkSensor
 20990 ;;		_channelThing
 20991 ;;		_ftoa
 20992 ;;		___checkChannelStatus
 20993 ;; This function uses a non-reentrant model
 20994 ;;
 20995                           
 20996                           
 20997                           ;psect for function ___flge
 20998  2A77                     ___flge:	
 20999                           
 21000                           ;incstack = 0
 21001                           ; Regs used in ___flge: [wreg+status,2+status,0]
 21002  2A77  3000               	movlw	0
 21003  2A78  0141               	movlb	1	; select bank1
 21004  2A79  0532               	andwf	___flge@ff1^(0+128),w
 21005  2A7A  00BA               	movwf	??___flge^(0+128)
 21006  2A7B  3000               	movlw	0
 21007  2A7C  0533               	andwf	(___flge@ff1+1)^(0+128),w
 21008  2A7D  00BB               	movwf	(??___flge^(0+128)+1)
 21009  2A7E  3080               	movlw	128
 21010  2A7F  0534               	andwf	(___flge@ff1+2)^(0+128),w
 21011  2A80  00BC               	movwf	(??___flge^(0+128)+2)
 21012  2A81  307F               	movlw	127
 21013  2A82  0535               	andwf	(___flge@ff1+3)^(0+128),w
 21014  2A83  00BD               	movwf	(??___flge^(0+128)+3)
 21015  2A84  083D               	movf	(??___flge+3)^(0+128),w
 21016  2A85  043C               	iorwf	(??___flge+2)^(0+128),w
 21017  2A86  043B               	iorwf	(??___flge+1)^(0+128),w
 21018  2A87  043A               	iorwf	??___flge^(0+128),w
 21019  2A88  1D03               	skipz
 21020  2A89  2A92               	goto	l1218
 21021  2A8A  3000               	movlw	0
 21022  2A8B  00B5               	movwf	(___flge@ff1+3)^(0+128)
 21023  2A8C  3000               	movlw	0
 21024  2A8D  00B4               	movwf	(___flge@ff1+2)^(0+128)
 21025  2A8E  3000               	movlw	0
 21026  2A8F  00B3               	movwf	(___flge@ff1+1)^(0+128)
 21027  2A90  3000               	movlw	0
 21028  2A91  00B2               	movwf	___flge@ff1^(0+128)
 21029  2A92                     l1218:	
 21030  2A92  3000               	movlw	0
 21031  2A93  0536               	andwf	___flge@ff2^(0+128),w
 21032  2A94  00BA               	movwf	??___flge^(0+128)
 21033  2A95  3000               	movlw	0
 21034  2A96  0537               	andwf	(___flge@ff2+1)^(0+128),w
 21035  2A97  00BB               	movwf	(??___flge^(0+128)+1)
 21036  2A98  3080               	movlw	128
 21037  2A99  0538               	andwf	(___flge@ff2+2)^(0+128),w
 21038  2A9A  00BC               	movwf	(??___flge^(0+128)+2)
 21039  2A9B  307F               	movlw	127
 21040  2A9C  0539               	andwf	(___flge@ff2+3)^(0+128),w
 21041  2A9D  00BD               	movwf	(??___flge^(0+128)+3)
 21042  2A9E  083D               	movf	(??___flge+3)^(0+128),w
 21043  2A9F  043C               	iorwf	(??___flge+2)^(0+128),w
 21044  2AA0  043B               	iorwf	(??___flge+1)^(0+128),w
 21045  2AA1  043A               	iorwf	??___flge^(0+128),w
 21046  2AA2  1D03               	skipz
 21047  2AA3  2AAC               	goto	l4546
 21048  2AA4  3000               	movlw	0
 21049  2AA5  00B9               	movwf	(___flge@ff2+3)^(0+128)
 21050  2AA6  3000               	movlw	0
 21051  2AA7  00B8               	movwf	(___flge@ff2+2)^(0+128)
 21052  2AA8  3000               	movlw	0
 21053  2AA9  00B7               	movwf	(___flge@ff2+1)^(0+128)
 21054  2AAA  3000               	movlw	0
 21055  2AAB  00B6               	movwf	___flge@ff2^(0+128)
 21056  2AAC                     l4546:	
 21057  2AAC  1FB5               	btfss	(___flge@ff1+3)^(0+128),7
 21058  2AAD  2AC6               	goto	l4550
 21059  2AAE  3000               	movlw	0
 21060  2AAF  00BA               	movwf	??___flge^(0+128)
 21061  2AB0  3000               	movlw	0
 21062  2AB1  00BB               	movwf	(??___flge^(0+128)+1)
 21063  2AB2  3000               	movlw	0
 21064  2AB3  00BC               	movwf	(??___flge^(0+128)+2)
 21065  2AB4  3080               	movlw	128
 21066  2AB5  00BD               	movwf	(??___flge^(0+128)+3)
 21067  2AB6  0832               	movf	___flge@ff1^(0+128),w
 21068  2AB7  02BA               	subwf	??___flge^(0+128),f
 21069  2AB8  0833               	movf	(___flge@ff1+1)^(0+128),w
 21070  2AB9  3BBB               	subwfb	(??___flge^(0+128)+1),f
 21071  2ABA  0834               	movf	(___flge@ff1+2)^(0+128),w
 21072  2ABB  3BBC               	subwfb	(??___flge^(0+128)+2),f
 21073  2ABC  0835               	movf	(___flge@ff1+3)^(0+128),w
 21074  2ABD  3BBD               	subwfb	(??___flge^(0+128)+3),f
 21075  2ABE  083D               	movf	(??___flge+3)^(0+128),w
 21076  2ABF  00B5               	movwf	(___flge@ff1+3)^(0+128)
 21077  2AC0  083C               	movf	(??___flge+2)^(0+128),w
 21078  2AC1  00B4               	movwf	(___flge@ff1+2)^(0+128)
 21079  2AC2  083B               	movf	(??___flge+1)^(0+128),w
 21080  2AC3  00B3               	movwf	(___flge@ff1+1)^(0+128)
 21081  2AC4  083A               	movf	??___flge^(0+128),w
 21082  2AC5  00B2               	movwf	___flge@ff1^(0+128)
 21083  2AC6                     l4550:	
 21084  2AC6  1FB9               	btfss	(___flge@ff2+3)^(0+128),7
 21085  2AC7  2AE0               	goto	l1221
 21086  2AC8  3000               	movlw	0
 21087  2AC9  00BA               	movwf	??___flge^(0+128)
 21088  2ACA  3000               	movlw	0
 21089  2ACB  00BB               	movwf	(??___flge^(0+128)+1)
 21090  2ACC  3000               	movlw	0
 21091  2ACD  00BC               	movwf	(??___flge^(0+128)+2)
 21092  2ACE  3080               	movlw	128
 21093  2ACF  00BD               	movwf	(??___flge^(0+128)+3)
 21094  2AD0  0836               	movf	___flge@ff2^(0+128),w
 21095  2AD1  02BA               	subwf	??___flge^(0+128),f
 21096  2AD2  0837               	movf	(___flge@ff2+1)^(0+128),w
 21097  2AD3  3BBB               	subwfb	(??___flge^(0+128)+1),f
 21098  2AD4  0838               	movf	(___flge@ff2+2)^(0+128),w
 21099  2AD5  3BBC               	subwfb	(??___flge^(0+128)+2),f
 21100  2AD6  0839               	movf	(___flge@ff2+3)^(0+128),w
 21101  2AD7  3BBD               	subwfb	(??___flge^(0+128)+3),f
 21102  2AD8  083D               	movf	(??___flge+3)^(0+128),w
 21103  2AD9  00B9               	movwf	(___flge@ff2+3)^(0+128)
 21104  2ADA  083C               	movf	(??___flge+2)^(0+128),w
 21105  2ADB  00B8               	movwf	(___flge@ff2+2)^(0+128)
 21106  2ADC  083B               	movf	(??___flge+1)^(0+128),w
 21107  2ADD  00B7               	movwf	(___flge@ff2+1)^(0+128)
 21108  2ADE  083A               	movf	??___flge^(0+128),w
 21109  2ADF  00B6               	movwf	___flge@ff2^(0+128)
 21110  2AE0                     l1221:	
 21111  2AE0  3080               	movlw	128
 21112  2AE1  06B5               	xorwf	(___flge@ff1+3)^(0+128),f
 21113  2AE2  3080               	movlw	128
 21114  2AE3  06B9               	xorwf	(___flge@ff2+3)^(0+128),f
 21115  2AE4  0839               	movf	(___flge@ff2+3)^(0+128),w
 21116  2AE5  0235               	subwf	(___flge@ff1+3)^(0+128),w
 21117  2AE6  1D03               	skipz
 21118  2AE7  0008               	return
 21119  2AE8  0838               	movf	(___flge@ff2+2)^(0+128),w
 21120  2AE9  0234               	subwf	(___flge@ff1+2)^(0+128),w
 21121  2AEA  1D03               	skipz
 21122  2AEB  0008               	return
 21123  2AEC  0837               	movf	(___flge@ff2+1)^(0+128),w
 21124  2AED  0233               	subwf	(___flge@ff1+1)^(0+128),w
 21125  2AEE  1D03               	skipz
 21126  2AEF  0008               	return
 21127  2AF0  0836               	movf	___flge@ff2^(0+128),w
 21128  2AF1  0232               	subwf	___flge@ff1^(0+128),w
 21129  2AF2  0008               	return
 21130  2AF3                     __end_of___flge:	
 21131                           
 21132                           	psect	text64
 21133  00E6                     __ptext64:	
 21134 ;; *************** function _calcRequiredPower *****************
 21135 ;; Defined at:
 21136 ;;		line 372 in file "system.c"
 21137 ;; Parameters:    Size  Location     Type
 21138 ;;  data            2   20[BANK1 ] PTR struct .
 21139 ;;		 -> data(166), 
 21140 ;; Auto vars:     Size  Location     Type
 21141 ;;  T2              4   52[BANK2 ] float 
 21142 ;;  T1              4   48[BANK2 ] float 
 21143 ;;  A               4   40[BANK2 ] float 
 21144 ;;  phi             4   36[BANK2 ] float 
 21145 ;;  d               4   32[BANK2 ] float 
 21146 ;;  Rth             4    4[BANK2 ] float 
 21147 ;;  p               4    0[BANK2 ] float 
 21148 ;;  n               1   56[BANK2 ] unsigned char 
 21149 ;; Return value:  Size  Location     Type
 21150 ;;                  1    wreg      void 
 21151 ;; Registers used:
 21152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21153 ;; Tracked objects:
 21154 ;;		On entry : 0/0
 21155 ;;		On exit  : 0/0
 21156 ;;		Unchanged: 0/0
 21157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21158 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21159 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21160 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21161 ;;      Totals:         0       0       6      57       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21162 ;;Total ram usage:       63 bytes
 21163 ;; Hardware stack levels used:    1
 21164 ;; Hardware stack levels required when called:    5
 21165 ;; This function calls:
 21166 ;;		___fladd
 21167 ;;		___fldiv
 21168 ;;		___flmul
 21169 ;;		___flsub
 21170 ;;		___wmul
 21171 ;; This function is called by:
 21172 ;;		_main
 21173 ;; This function uses a non-reentrant model
 21174 ;;
 21175                           
 21176                           
 21177                           ;psect for function _calcRequiredPower
 21178  00E6                     _calcRequiredPower:	
 21179                           
 21180                           ;system.c: 372: void calcRequiredPower(t_globalData *data);system.c: 373: {;system.c: 37
      +                          4:  uint8_t n;;system.c: 375:  float d, A, T1, T2, phi;;system.c: 376:  float p, Rth;;sy
      +                          stem.c: 378:  for (n = 0; n < 4; n++) {
 21181                           
 21182                           ;incstack = 0
 21183                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21184  00E6  0142               	movlb	2	; select bank2
 21185  00E7  01D8               	clrf	calcRequiredPower@n^(0+256)
 21186  00E8                     l8152:	
 21187                           
 21188                           ;system.c: 388:   d = 0.0254 * data->chData[n].lensDia;
 21189  00E8  303C               	movlw	60
 21190  00E9  0140               	movlb	0	; select bank0
 21191  00EA  00C8               	movwf	___flmul@b+3
 21192  00EB  30D0               	movlw	208
 21193  00EC  00C7               	movwf	___flmul@b+2
 21194  00ED  3013               	movlw	19
 21195  00EE  00C6               	movwf	___flmul@b+1
 21196  00EF  30A9               	movlw	169
 21197  00F0  00C5               	movwf	___flmul@b
 21198  00F1  0142               	movlb	2	; select bank2
 21199  00F2  0858               	movf	calcRequiredPower@n^(0+256),w
 21200  00F3  0141               	movlb	1	; select bank1
 21201  00F4  00B6               	movwf	??_calcRequiredPower^(0+128)
 21202  00F5  01B7               	clrf	(??_calcRequiredPower^(0+128)+1)
 21203  00F6  0836               	movf	??_calcRequiredPower^(0+128),w
 21204  00F7  0140               	movlb	0	; select bank0
 21205  00F8  00B1               	movwf	___wmul@multiplier
 21206  00F9  0141               	movlb	1	; select bank1
 21207  00FA  0837               	movf	(??_calcRequiredPower+1)^(0+128),w
 21208  00FB  0140               	movlb	0	; select bank0
 21209  00FC  00B2               	movwf	___wmul@multiplier+1
 21210  00FD  301F               	movlw	31
 21211  00FE  00B3               	movwf	___wmul@multiplicand
 21212  00FF  3000               	movlw	0
 21213  0100  00B4               	movwf	___wmul@multiplicand+1
 21214  0101  31B1  21AD  3180   	fcall	___wmul
 21215  0104  0140               	movlb	0	; select bank0
 21216  0105  0831               	movf	?___wmul,w
 21217  0106  0141               	movlb	1	; select bank1
 21218  0107  0734               	addwf	calcRequiredPower@data^(0+128),w
 21219  0108  00B8               	movwf	(??_calcRequiredPower+2)^(0+128)
 21220  0109  0140               	movlb	0	; select bank0
 21221  010A  0832               	movf	?___wmul+1,w
 21222  010B  0141               	movlb	1	; select bank1
 21223  010C  3D35               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21224  010D  00B9               	movwf	(??_calcRequiredPower+3)^(0+128)
 21225  010E  0838               	movf	(??_calcRequiredPower+2)^(0+128),w
 21226  010F  3E3F               	addlw	63
 21227  0110  0086               	movwf	6
 21228  0111  3000               	movlw	0
 21229  0112  3D39               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21230  0113  0087               	movwf	7
 21231  0114  3F40               	moviw [0]fsr1
 21232  0115  0140               	movlb	0	; select bank0
 21233  0116  00C9               	movwf	___flmul@a
 21234  0117  3F41               	moviw [1]fsr1
 21235  0118  00CA               	movwf	___flmul@a+1
 21236  0119  3F42               	moviw [2]fsr1
 21237  011A  00CB               	movwf	___flmul@a+2
 21238  011B  3F43               	moviw [3]fsr1
 21239  011C  00CC               	movwf	___flmul@a+3
 21240  011D  3191  21D9  3180   	fcall	___flmul
 21241  0120  0140               	movlb	0	; select bank0
 21242  0121  0848               	movf	?___flmul+3,w
 21243  0122  0142               	movlb	2	; select bank2
 21244  0123  00C3               	movwf	(calcRequiredPower@d+3)^(0+256)
 21245  0124  0140               	movlb	0	; select bank0
 21246  0125  0847               	movf	?___flmul+2,w
 21247  0126  0142               	movlb	2	; select bank2
 21248  0127  00C2               	movwf	(calcRequiredPower@d+2)^(0+256)
 21249  0128  0140               	movlb	0	; select bank0
 21250  0129  0846               	movf	?___flmul+1,w
 21251  012A  0142               	movlb	2	; select bank2
 21252  012B  00C1               	movwf	(calcRequiredPower@d+1)^(0+256)
 21253  012C  0140               	movlb	0	; select bank0
 21254  012D  0845               	movf	?___flmul,w
 21255  012E  0142               	movlb	2	; select bank2
 21256  012F  00C0               	movwf	calcRequiredPower@d^(0+256)
 21257                           
 21258                           ;system.c: 389:   A = (3.14 * d * d) / 4;
 21259  0130  3040               	movlw	64
 21260  0131  0140               	movlb	0	; select bank0
 21261  0132  00C8               	movwf	___flmul@b+3
 21262  0133  3048               	movlw	72
 21263  0134  00C7               	movwf	___flmul@b+2
 21264  0135  30F5               	movlw	245
 21265  0136  00C6               	movwf	___flmul@b+1
 21266  0137  30C3               	movlw	195
 21267  0138  00C5               	movwf	___flmul@b
 21268  0139  0142               	movlb	2	; select bank2
 21269  013A  0843               	movf	(calcRequiredPower@d+3)^(0+256),w
 21270  013B  0140               	movlb	0	; select bank0
 21271  013C  00CC               	movwf	___flmul@a+3
 21272  013D  0142               	movlb	2	; select bank2
 21273  013E  0842               	movf	(calcRequiredPower@d+2)^(0+256),w
 21274  013F  0140               	movlb	0	; select bank0
 21275  0140  00CB               	movwf	___flmul@a+2
 21276  0141  0142               	movlb	2	; select bank2
 21277  0142  0841               	movf	(calcRequiredPower@d+1)^(0+256),w
 21278  0143  0140               	movlb	0	; select bank0
 21279  0144  00CA               	movwf	___flmul@a+1
 21280  0145  0142               	movlb	2	; select bank2
 21281  0146  0840               	movf	calcRequiredPower@d^(0+256),w
 21282  0147  0140               	movlb	0	; select bank0
 21283  0148  00C9               	movwf	___flmul@a
 21284  0149  3191  21D9  3180   	fcall	___flmul
 21285  014C  0140               	movlb	0	; select bank0
 21286  014D  0848               	movf	?___flmul+3,w
 21287  014E  0142               	movlb	2	; select bank2
 21288  014F  00CF               	movwf	(_calcRequiredPower$2643+3)^(0+256)
 21289  0150  0140               	movlb	0	; select bank0
 21290  0151  0847               	movf	?___flmul+2,w
 21291  0152  0142               	movlb	2	; select bank2
 21292  0153  00CE               	movwf	(_calcRequiredPower$2643+2)^(0+256)
 21293  0154  0140               	movlb	0	; select bank0
 21294  0155  0846               	movf	?___flmul+1,w
 21295  0156  0142               	movlb	2	; select bank2
 21296  0157  00CD               	movwf	(_calcRequiredPower$2643+1)^(0+256)
 21297  0158  0140               	movlb	0	; select bank0
 21298  0159  0845               	movf	?___flmul,w
 21299  015A  0142               	movlb	2	; select bank2
 21300  015B  00CC               	movwf	_calcRequiredPower$2643^(0+256)
 21301                           
 21302                           ;system.c: 389:   A = (3.14 * d * d) / 4;
 21303  015C  3040               	movlw	64
 21304  015D  0140               	movlb	0	; select bank0
 21305  015E  00E2               	movwf	___fldiv@a+3
 21306  015F  3080               	movlw	128
 21307  0160  00E1               	movwf	___fldiv@a+2
 21308  0161  3000               	movlw	0
 21309  0162  00E0               	movwf	___fldiv@a+1
 21310  0163  3000               	movlw	0
 21311  0164  00DF               	movwf	___fldiv@a
 21312  0165  0142               	movlb	2	; select bank2
 21313  0166  0843               	movf	(calcRequiredPower@d+3)^(0+256),w
 21314  0167  0140               	movlb	0	; select bank0
 21315  0168  00C8               	movwf	___flmul@b+3
 21316  0169  0142               	movlb	2	; select bank2
 21317  016A  0842               	movf	(calcRequiredPower@d+2)^(0+256),w
 21318  016B  0140               	movlb	0	; select bank0
 21319  016C  00C7               	movwf	___flmul@b+2
 21320  016D  0142               	movlb	2	; select bank2
 21321  016E  0841               	movf	(calcRequiredPower@d+1)^(0+256),w
 21322  016F  0140               	movlb	0	; select bank0
 21323  0170  00C6               	movwf	___flmul@b+1
 21324  0171  0142               	movlb	2	; select bank2
 21325  0172  0840               	movf	calcRequiredPower@d^(0+256),w
 21326  0173  0140               	movlb	0	; select bank0
 21327  0174  00C5               	movwf	___flmul@b
 21328  0175  0142               	movlb	2	; select bank2
 21329  0176  084F               	movf	(_calcRequiredPower$2643+3)^(0+256),w
 21330  0177  0140               	movlb	0	; select bank0
 21331  0178  00CC               	movwf	___flmul@a+3
 21332  0179  0142               	movlb	2	; select bank2
 21333  017A  084E               	movf	(_calcRequiredPower$2643+2)^(0+256),w
 21334  017B  0140               	movlb	0	; select bank0
 21335  017C  00CB               	movwf	___flmul@a+2
 21336  017D  0142               	movlb	2	; select bank2
 21337  017E  084D               	movf	(_calcRequiredPower$2643+1)^(0+256),w
 21338  017F  0140               	movlb	0	; select bank0
 21339  0180  00CA               	movwf	___flmul@a+1
 21340  0181  0142               	movlb	2	; select bank2
 21341  0182  084C               	movf	_calcRequiredPower$2643^(0+256),w
 21342  0183  0140               	movlb	0	; select bank0
 21343  0184  00C9               	movwf	___flmul@a
 21344  0185  3191  21D9  3180   	fcall	___flmul
 21345  0188  0140               	movlb	0	; select bank0
 21346  0189  0848               	movf	?___flmul+3,w
 21347  018A  00E6               	movwf	___fldiv@b+3
 21348  018B  0847               	movf	?___flmul+2,w
 21349  018C  00E5               	movwf	___fldiv@b+2
 21350  018D  0846               	movf	?___flmul+1,w
 21351  018E  00E4               	movwf	___fldiv@b+1
 21352  018F  0845               	movf	?___flmul,w
 21353  0190  00E3               	movwf	___fldiv@b
 21354  0191  3190  2007  3180   	fcall	___fldiv
 21355  0194  0140               	movlb	0	; select bank0
 21356  0195  0862               	movf	?___fldiv+3,w
 21357  0196  0142               	movlb	2	; select bank2
 21358  0197  00CB               	movwf	(calcRequiredPower@A+3)^(0+256)
 21359  0198  0140               	movlb	0	; select bank0
 21360  0199  0861               	movf	?___fldiv+2,w
 21361  019A  0142               	movlb	2	; select bank2
 21362  019B  00CA               	movwf	(calcRequiredPower@A+2)^(0+256)
 21363  019C  0140               	movlb	0	; select bank0
 21364  019D  0860               	movf	?___fldiv+1,w
 21365  019E  0142               	movlb	2	; select bank2
 21366  019F  00C9               	movwf	(calcRequiredPower@A+1)^(0+256)
 21367  01A0  0140               	movlb	0	; select bank0
 21368  01A1  085F               	movf	?___fldiv,w
 21369  01A2  0142               	movlb	2	; select bank2
 21370  01A3  00C8               	movwf	calcRequiredPower@A^(0+256)
 21371                           
 21372                           ;system.c: 391:   T1 = data->dewPointC + data->dpOffset + 273.15;
 21373  01A4  0141               	movlb	1	; select bank1
 21374  01A5  0834               	movf	calcRequiredPower@data^(0+128),w
 21375  01A6  0086               	movwf	6
 21376  01A7  0835               	movf	(calcRequiredPower@data+1)^(0+128),w
 21377  01A8  0087               	movwf	7
 21378  01A9  315D               	addfsr 1,29
 21379  01AA  3F40               	moviw [0]fsr1
 21380  01AB  0140               	movlb	0	; select bank0
 21381  01AC  00DF               	movwf	___fladd@b
 21382  01AD  3F41               	moviw [1]fsr1
 21383  01AE  00E0               	movwf	___fladd@b+1
 21384  01AF  3F42               	moviw [2]fsr1
 21385  01B0  00E1               	movwf	___fladd@b+2
 21386  01B1  3F43               	moviw [3]fsr1
 21387  01B2  00E2               	movwf	___fladd@b+3
 21388  01B3  0141               	movlb	1	; select bank1
 21389  01B4  0834               	movf	calcRequiredPower@data^(0+128),w
 21390  01B5  0086               	movwf	6
 21391  01B6  0835               	movf	(calcRequiredPower@data+1)^(0+128),w
 21392  01B7  0087               	movwf	7
 21393  01B8  3148               	addfsr 1,8
 21394  01B9  3F40               	moviw [0]fsr1
 21395  01BA  0140               	movlb	0	; select bank0
 21396  01BB  00E3               	movwf	___fladd@a
 21397  01BC  3F41               	moviw [1]fsr1
 21398  01BD  00E4               	movwf	___fladd@a+1
 21399  01BE  3F42               	moviw [2]fsr1
 21400  01BF  00E5               	movwf	___fladd@a+2
 21401  01C0  3F43               	moviw [3]fsr1
 21402  01C1  00E6               	movwf	___fladd@a+3
 21403  01C2  3185  2592  3180   	fcall	___fladd
 21404  01C5  0140               	movlb	0	; select bank0
 21405  01C6  0862               	movf	?___fladd+3,w
 21406  01C7  0142               	movlb	2	; select bank2
 21407  01C8  00AB               	movwf	(_calcRequiredPower$2644+3)^(0+256)
 21408  01C9  0140               	movlb	0	; select bank0
 21409  01CA  0861               	movf	?___fladd+2,w
 21410  01CB  0142               	movlb	2	; select bank2
 21411  01CC  00AA               	movwf	(_calcRequiredPower$2644+2)^(0+256)
 21412  01CD  0140               	movlb	0	; select bank0
 21413  01CE  0860               	movf	?___fladd+1,w
 21414  01CF  0142               	movlb	2	; select bank2
 21415  01D0  00A9               	movwf	(_calcRequiredPower$2644+1)^(0+256)
 21416  01D1  0140               	movlb	0	; select bank0
 21417  01D2  085F               	movf	?___fladd,w
 21418  01D3  0142               	movlb	2	; select bank2
 21419  01D4  00A8               	movwf	_calcRequiredPower$2644^(0+256)
 21420                           
 21421                           ;system.c: 391:   T1 = data->dewPointC + data->dpOffset + 273.15;
 21422  01D5  3043               	movlw	67
 21423  01D6  0140               	movlb	0	; select bank0
 21424  01D7  00E2               	movwf	___fladd@b+3
 21425  01D8  3088               	movlw	136
 21426  01D9  00E1               	movwf	___fladd@b+2
 21427  01DA  3093               	movlw	147
 21428  01DB  00E0               	movwf	___fladd@b+1
 21429  01DC  3033               	movlw	51
 21430  01DD  00DF               	movwf	___fladd@b
 21431  01DE  0142               	movlb	2	; select bank2
 21432  01DF  082B               	movf	(_calcRequiredPower$2644+3)^(0+256),w
 21433  01E0  0140               	movlb	0	; select bank0
 21434  01E1  00E6               	movwf	___fladd@a+3
 21435  01E2  0142               	movlb	2	; select bank2
 21436  01E3  082A               	movf	(_calcRequiredPower$2644+2)^(0+256),w
 21437  01E4  0140               	movlb	0	; select bank0
 21438  01E5  00E5               	movwf	___fladd@a+2
 21439  01E6  0142               	movlb	2	; select bank2
 21440  01E7  0829               	movf	(_calcRequiredPower$2644+1)^(0+256),w
 21441  01E8  0140               	movlb	0	; select bank0
 21442  01E9  00E4               	movwf	___fladd@a+1
 21443  01EA  0142               	movlb	2	; select bank2
 21444  01EB  0828               	movf	_calcRequiredPower$2644^(0+256),w
 21445  01EC  0140               	movlb	0	; select bank0
 21446  01ED  00E3               	movwf	___fladd@a
 21447  01EE  3185  2592  3180   	fcall	___fladd
 21448  01F1  0140               	movlb	0	; select bank0
 21449  01F2  0862               	movf	?___fladd+3,w
 21450  01F3  0142               	movlb	2	; select bank2
 21451  01F4  00D3               	movwf	(calcRequiredPower@T1+3)^(0+256)
 21452  01F5  0140               	movlb	0	; select bank0
 21453  01F6  0861               	movf	?___fladd+2,w
 21454  01F7  0142               	movlb	2	; select bank2
 21455  01F8  00D2               	movwf	(calcRequiredPower@T1+2)^(0+256)
 21456  01F9  0140               	movlb	0	; select bank0
 21457  01FA  0860               	movf	?___fladd+1,w
 21458  01FB  0142               	movlb	2	; select bank2
 21459  01FC  00D1               	movwf	(calcRequiredPower@T1+1)^(0+256)
 21460  01FD  0140               	movlb	0	; select bank0
 21461  01FE  085F               	movf	?___fladd,w
 21462  01FF  0142               	movlb	2	; select bank2
 21463  0200  00D0               	movwf	calcRequiredPower@T1^(0+256)
 21464                           
 21465                           ;system.c: 392:   T2 = data->skyTemp + 273.15;
 21466  0201  3043               	movlw	67
 21467  0202  0140               	movlb	0	; select bank0
 21468  0203  00E2               	movwf	___fladd@b+3
 21469  0204  3088               	movlw	136
 21470  0205  00E1               	movwf	___fladd@b+2
 21471  0206  3093               	movlw	147
 21472  0207  00E0               	movwf	___fladd@b+1
 21473  0208  3033               	movlw	51
 21474  0209  00DF               	movwf	___fladd@b
 21475  020A  0141               	movlb	1	; select bank1
 21476  020B  0834               	movf	calcRequiredPower@data^(0+128),w
 21477  020C  3E21               	addlw	33
 21478  020D  0086               	movwf	6
 21479  020E  3000               	movlw	0
 21480  020F  3D35               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21481  0210  0087               	movwf	7
 21482  0211  3F40               	moviw [0]fsr1
 21483  0212  0140               	movlb	0	; select bank0
 21484  0213  00E3               	movwf	___fladd@a
 21485  0214  3F41               	moviw [1]fsr1
 21486  0215  00E4               	movwf	___fladd@a+1
 21487  0216  3F42               	moviw [2]fsr1
 21488  0217  00E5               	movwf	___fladd@a+2
 21489  0218  3F43               	moviw [3]fsr1
 21490  0219  00E6               	movwf	___fladd@a+3
 21491  021A  3185  2592  3180   	fcall	___fladd
 21492  021D  0140               	movlb	0	; select bank0
 21493  021E  0862               	movf	?___fladd+3,w
 21494  021F  0142               	movlb	2	; select bank2
 21495  0220  00D7               	movwf	(calcRequiredPower@T2+3)^(0+256)
 21496  0221  0140               	movlb	0	; select bank0
 21497  0222  0861               	movf	?___fladd+2,w
 21498  0223  0142               	movlb	2	; select bank2
 21499  0224  00D6               	movwf	(calcRequiredPower@T2+2)^(0+256)
 21500  0225  0140               	movlb	0	; select bank0
 21501  0226  0860               	movf	?___fladd+1,w
 21502  0227  0142               	movlb	2	; select bank2
 21503  0228  00D5               	movwf	(calcRequiredPower@T2+1)^(0+256)
 21504  0229  0140               	movlb	0	; select bank0
 21505  022A  085F               	movf	?___fladd,w
 21506  022B  0142               	movlb	2	; select bank2
 21507  022C  00D4               	movwf	calcRequiredPower@T2^(0+256)
 21508                           
 21509                           ;system.c: 394:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21510  022D  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21511  022E  0140               	movlb	0	; select bank0
 21512  022F  00C8               	movwf	___flmul@b+3
 21513  0230  0142               	movlb	2	; select bank2
 21514  0231  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21515  0232  0140               	movlb	0	; select bank0
 21516  0233  00C7               	movwf	___flmul@b+2
 21517  0234  0142               	movlb	2	; select bank2
 21518  0235  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21519  0236  0140               	movlb	0	; select bank0
 21520  0237  00C6               	movwf	___flmul@b+1
 21521  0238  0142               	movlb	2	; select bank2
 21522  0239  0854               	movf	calcRequiredPower@T2^(0+256),w
 21523  023A  0140               	movlb	0	; select bank0
 21524  023B  00C5               	movwf	___flmul@b
 21525  023C  0142               	movlb	2	; select bank2
 21526  023D  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21527  023E  0140               	movlb	0	; select bank0
 21528  023F  00CC               	movwf	___flmul@a+3
 21529  0240  0142               	movlb	2	; select bank2
 21530  0241  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21531  0242  0140               	movlb	0	; select bank0
 21532  0243  00CB               	movwf	___flmul@a+2
 21533  0244  0142               	movlb	2	; select bank2
 21534  0245  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21535  0246  0140               	movlb	0	; select bank0
 21536  0247  00CA               	movwf	___flmul@a+1
 21537  0248  0142               	movlb	2	; select bank2
 21538  0249  0854               	movf	calcRequiredPower@T2^(0+256),w
 21539  024A  0140               	movlb	0	; select bank0
 21540  024B  00C9               	movwf	___flmul@a
 21541  024C  3191  21D9  3180   	fcall	___flmul
 21542  024F  0140               	movlb	0	; select bank0
 21543  0250  0848               	movf	?___flmul+3,w
 21544  0251  0142               	movlb	2	; select bank2
 21545  0252  00CF               	movwf	(_calcRequiredPower$2643+3)^(0+256)
 21546  0253  0140               	movlb	0	; select bank0
 21547  0254  0847               	movf	?___flmul+2,w
 21548  0255  0142               	movlb	2	; select bank2
 21549  0256  00CE               	movwf	(_calcRequiredPower$2643+2)^(0+256)
 21550  0257  0140               	movlb	0	; select bank0
 21551  0258  0846               	movf	?___flmul+1,w
 21552  0259  0142               	movlb	2	; select bank2
 21553  025A  00CD               	movwf	(_calcRequiredPower$2643+1)^(0+256)
 21554  025B  0140               	movlb	0	; select bank0
 21555  025C  0845               	movf	?___flmul,w
 21556  025D  0142               	movlb	2	; select bank2
 21557  025E  00CC               	movwf	_calcRequiredPower$2643^(0+256)
 21558                           
 21559                           ;system.c: 394:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21560  025F  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21561  0260  0140               	movlb	0	; select bank0
 21562  0261  00C8               	movwf	___flmul@b+3
 21563  0262  0142               	movlb	2	; select bank2
 21564  0263  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21565  0264  0140               	movlb	0	; select bank0
 21566  0265  00C7               	movwf	___flmul@b+2
 21567  0266  0142               	movlb	2	; select bank2
 21568  0267  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21569  0268  0140               	movlb	0	; select bank0
 21570  0269  00C6               	movwf	___flmul@b+1
 21571  026A  0142               	movlb	2	; select bank2
 21572  026B  0854               	movf	calcRequiredPower@T2^(0+256),w
 21573  026C  0140               	movlb	0	; select bank0
 21574  026D  00C5               	movwf	___flmul@b
 21575  026E  0142               	movlb	2	; select bank2
 21576  026F  084F               	movf	(_calcRequiredPower$2643+3)^(0+256),w
 21577  0270  0140               	movlb	0	; select bank0
 21578  0271  00CC               	movwf	___flmul@a+3
 21579  0272  0142               	movlb	2	; select bank2
 21580  0273  084E               	movf	(_calcRequiredPower$2643+2)^(0+256),w
 21581  0274  0140               	movlb	0	; select bank0
 21582  0275  00CB               	movwf	___flmul@a+2
 21583  0276  0142               	movlb	2	; select bank2
 21584  0277  084D               	movf	(_calcRequiredPower$2643+1)^(0+256),w
 21585  0278  0140               	movlb	0	; select bank0
 21586  0279  00CA               	movwf	___flmul@a+1
 21587  027A  0142               	movlb	2	; select bank2
 21588  027B  084C               	movf	_calcRequiredPower$2643^(0+256),w
 21589  027C  0140               	movlb	0	; select bank0
 21590  027D  00C9               	movwf	___flmul@a
 21591  027E  3191  21D9  3180   	fcall	___flmul
 21592  0281  0140               	movlb	0	; select bank0
 21593  0282  0848               	movf	?___flmul+3,w
 21594  0283  0142               	movlb	2	; select bank2
 21595  0284  00AF               	movwf	(_calcRequiredPower$2645+3)^(0+256)
 21596  0285  0140               	movlb	0	; select bank0
 21597  0286  0847               	movf	?___flmul+2,w
 21598  0287  0142               	movlb	2	; select bank2
 21599  0288  00AE               	movwf	(_calcRequiredPower$2645+2)^(0+256)
 21600  0289  0140               	movlb	0	; select bank0
 21601  028A  0846               	movf	?___flmul+1,w
 21602  028B  0142               	movlb	2	; select bank2
 21603  028C  00AD               	movwf	(_calcRequiredPower$2645+1)^(0+256)
 21604  028D  0140               	movlb	0	; select bank0
 21605  028E  0845               	movf	?___flmul,w
 21606  028F  0142               	movlb	2	; select bank2
 21607  0290  00AC               	movwf	_calcRequiredPower$2645^(0+256)
 21608                           
 21609                           ;system.c: 394:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21610  0291  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21611  0292  0140               	movlb	0	; select bank0
 21612  0293  00C8               	movwf	___flmul@b+3
 21613  0294  0142               	movlb	2	; select bank2
 21614  0295  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21615  0296  0140               	movlb	0	; select bank0
 21616  0297  00C7               	movwf	___flmul@b+2
 21617  0298  0142               	movlb	2	; select bank2
 21618  0299  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21619  029A  0140               	movlb	0	; select bank0
 21620  029B  00C6               	movwf	___flmul@b+1
 21621  029C  0142               	movlb	2	; select bank2
 21622  029D  0850               	movf	calcRequiredPower@T1^(0+256),w
 21623  029E  0140               	movlb	0	; select bank0
 21624  029F  00C5               	movwf	___flmul@b
 21625  02A0  0142               	movlb	2	; select bank2
 21626  02A1  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21627  02A2  0140               	movlb	0	; select bank0
 21628  02A3  00CC               	movwf	___flmul@a+3
 21629  02A4  0142               	movlb	2	; select bank2
 21630  02A5  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21631  02A6  0140               	movlb	0	; select bank0
 21632  02A7  00CB               	movwf	___flmul@a+2
 21633  02A8  0142               	movlb	2	; select bank2
 21634  02A9  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21635  02AA  0140               	movlb	0	; select bank0
 21636  02AB  00CA               	movwf	___flmul@a+1
 21637  02AC  0142               	movlb	2	; select bank2
 21638  02AD  0850               	movf	calcRequiredPower@T1^(0+256),w
 21639  02AE  0140               	movlb	0	; select bank0
 21640  02AF  00C9               	movwf	___flmul@a
 21641  02B0  3191  21D9  3180   	fcall	___flmul
 21642  02B3  0140               	movlb	0	; select bank0
 21643  02B4  0848               	movf	?___flmul+3,w
 21644  02B5  0142               	movlb	2	; select bank2
 21645  02B6  00B3               	movwf	(_calcRequiredPower$2646+3)^(0+256)
 21646  02B7  0140               	movlb	0	; select bank0
 21647  02B8  0847               	movf	?___flmul+2,w
 21648  02B9  0142               	movlb	2	; select bank2
 21649  02BA  00B2               	movwf	(_calcRequiredPower$2646+2)^(0+256)
 21650  02BB  0140               	movlb	0	; select bank0
 21651  02BC  0846               	movf	?___flmul+1,w
 21652  02BD  0142               	movlb	2	; select bank2
 21653  02BE  00B1               	movwf	(_calcRequiredPower$2646+1)^(0+256)
 21654  02BF  0140               	movlb	0	; select bank0
 21655  02C0  0845               	movf	?___flmul,w
 21656  02C1  0142               	movlb	2	; select bank2
 21657  02C2  00B0               	movwf	_calcRequiredPower$2646^(0+256)
 21658                           
 21659                           ;system.c: 394:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21660  02C3  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21661  02C4  0140               	movlb	0	; select bank0
 21662  02C5  00C8               	movwf	___flmul@b+3
 21663  02C6  0142               	movlb	2	; select bank2
 21664  02C7  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21665  02C8  0140               	movlb	0	; select bank0
 21666  02C9  00C7               	movwf	___flmul@b+2
 21667  02CA  0142               	movlb	2	; select bank2
 21668  02CB  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21669  02CC  0140               	movlb	0	; select bank0
 21670  02CD  00C6               	movwf	___flmul@b+1
 21671  02CE  0142               	movlb	2	; select bank2
 21672  02CF  0850               	movf	calcRequiredPower@T1^(0+256),w
 21673  02D0  0140               	movlb	0	; select bank0
 21674  02D1  00C5               	movwf	___flmul@b
 21675  02D2  0142               	movlb	2	; select bank2
 21676  02D3  0833               	movf	(_calcRequiredPower$2646+3)^(0+256),w
 21677  02D4  0140               	movlb	0	; select bank0
 21678  02D5  00CC               	movwf	___flmul@a+3
 21679  02D6  0142               	movlb	2	; select bank2
 21680  02D7  0832               	movf	(_calcRequiredPower$2646+2)^(0+256),w
 21681  02D8  0140               	movlb	0	; select bank0
 21682  02D9  00CB               	movwf	___flmul@a+2
 21683  02DA  0142               	movlb	2	; select bank2
 21684  02DB  0831               	movf	(_calcRequiredPower$2646+1)^(0+256),w
 21685  02DC  0140               	movlb	0	; select bank0
 21686  02DD  00CA               	movwf	___flmul@a+1
 21687  02DE  0142               	movlb	2	; select bank2
 21688  02DF  0830               	movf	_calcRequiredPower$2646^(0+256),w
 21689  02E0  0140               	movlb	0	; select bank0
 21690  02E1  00C9               	movwf	___flmul@a
 21691  02E2  3191  21D9  3180   	fcall	___flmul
 21692  02E5  0140               	movlb	0	; select bank0
 21693  02E6  0848               	movf	?___flmul+3,w
 21694  02E7  0142               	movlb	2	; select bank2
 21695  02E8  00B7               	movwf	(_calcRequiredPower$2647+3)^(0+256)
 21696  02E9  0140               	movlb	0	; select bank0
 21697  02EA  0847               	movf	?___flmul+2,w
 21698  02EB  0142               	movlb	2	; select bank2
 21699  02EC  00B6               	movwf	(_calcRequiredPower$2647+2)^(0+256)
 21700  02ED  0140               	movlb	0	; select bank0
 21701  02EE  0846               	movf	?___flmul+1,w
 21702  02EF  0142               	movlb	2	; select bank2
 21703  02F0  00B5               	movwf	(_calcRequiredPower$2647+1)^(0+256)
 21704  02F1  0140               	movlb	0	; select bank0
 21705  02F2  0845               	movf	?___flmul,w
 21706  02F3  0142               	movlb	2	; select bank2
 21707  02F4  00B4               	movwf	_calcRequiredPower$2647^(0+256)
 21708                           
 21709                           ;system.c: 394:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21710  02F5  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 21711  02F6  0140               	movlb	0	; select bank0
 21712  02F7  00C8               	movwf	___flmul@b+3
 21713  02F8  0142               	movlb	2	; select bank2
 21714  02F9  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 21715  02FA  0140               	movlb	0	; select bank0
 21716  02FB  00C7               	movwf	___flmul@b+2
 21717  02FC  0142               	movlb	2	; select bank2
 21718  02FD  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 21719  02FE  0140               	movlb	0	; select bank0
 21720  02FF  00C6               	movwf	___flmul@b+1
 21721  0300  0142               	movlb	2	; select bank2
 21722  0301  0854               	movf	calcRequiredPower@T2^(0+256),w
 21723  0302  0140               	movlb	0	; select bank0
 21724  0303  00C5               	movwf	___flmul@b
 21725  0304  0142               	movlb	2	; select bank2
 21726  0305  082F               	movf	(_calcRequiredPower$2645+3)^(0+256),w
 21727  0306  0140               	movlb	0	; select bank0
 21728  0307  00CC               	movwf	___flmul@a+3
 21729  0308  0142               	movlb	2	; select bank2
 21730  0309  082E               	movf	(_calcRequiredPower$2645+2)^(0+256),w
 21731  030A  0140               	movlb	0	; select bank0
 21732  030B  00CB               	movwf	___flmul@a+2
 21733  030C  0142               	movlb	2	; select bank2
 21734  030D  082D               	movf	(_calcRequiredPower$2645+1)^(0+256),w
 21735  030E  0140               	movlb	0	; select bank0
 21736  030F  00CA               	movwf	___flmul@a+1
 21737  0310  0142               	movlb	2	; select bank2
 21738  0311  082C               	movf	_calcRequiredPower$2645^(0+256),w
 21739  0312  0140               	movlb	0	; select bank0
 21740  0313  00C9               	movwf	___flmul@a
 21741  0314  3191  21D9  3180   	fcall	___flmul
 21742  0317  0140               	movlb	0	; select bank0
 21743  0318  0848               	movf	?___flmul+3,w
 21744  0319  0141               	movlb	1	; select bank1
 21745  031A  00AF               	movwf	(___flsub@a+3)^(0+128)
 21746  031B  0140               	movlb	0	; select bank0
 21747  031C  0847               	movf	?___flmul+2,w
 21748  031D  0141               	movlb	1	; select bank1
 21749  031E  00AE               	movwf	(___flsub@a+2)^(0+128)
 21750  031F  0140               	movlb	0	; select bank0
 21751  0320  0846               	movf	?___flmul+1,w
 21752  0321  0141               	movlb	1	; select bank1
 21753  0322  00AD               	movwf	(___flsub@a+1)^(0+128)
 21754  0323  0140               	movlb	0	; select bank0
 21755  0324  0845               	movf	?___flmul,w
 21756  0325  0141               	movlb	1	; select bank1
 21757  0326  00AC               	movwf	___flsub@a^(0+128)
 21758  0327  0142               	movlb	2	; select bank2
 21759  0328  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 21760  0329  0140               	movlb	0	; select bank0
 21761  032A  00C8               	movwf	___flmul@b+3
 21762  032B  0142               	movlb	2	; select bank2
 21763  032C  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 21764  032D  0140               	movlb	0	; select bank0
 21765  032E  00C7               	movwf	___flmul@b+2
 21766  032F  0142               	movlb	2	; select bank2
 21767  0330  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 21768  0331  0140               	movlb	0	; select bank0
 21769  0332  00C6               	movwf	___flmul@b+1
 21770  0333  0142               	movlb	2	; select bank2
 21771  0334  0850               	movf	calcRequiredPower@T1^(0+256),w
 21772  0335  0140               	movlb	0	; select bank0
 21773  0336  00C5               	movwf	___flmul@b
 21774  0337  0142               	movlb	2	; select bank2
 21775  0338  0837               	movf	(_calcRequiredPower$2647+3)^(0+256),w
 21776  0339  0140               	movlb	0	; select bank0
 21777  033A  00CC               	movwf	___flmul@a+3
 21778  033B  0142               	movlb	2	; select bank2
 21779  033C  0836               	movf	(_calcRequiredPower$2647+2)^(0+256),w
 21780  033D  0140               	movlb	0	; select bank0
 21781  033E  00CB               	movwf	___flmul@a+2
 21782  033F  0142               	movlb	2	; select bank2
 21783  0340  0835               	movf	(_calcRequiredPower$2647+1)^(0+256),w
 21784  0341  0140               	movlb	0	; select bank0
 21785  0342  00CA               	movwf	___flmul@a+1
 21786  0343  0142               	movlb	2	; select bank2
 21787  0344  0834               	movf	_calcRequiredPower$2647^(0+256),w
 21788  0345  0140               	movlb	0	; select bank0
 21789  0346  00C9               	movwf	___flmul@a
 21790  0347  3191  21D9  3180   	fcall	___flmul
 21791  034A  0140               	movlb	0	; select bank0
 21792  034B  0848               	movf	?___flmul+3,w
 21793  034C  0141               	movlb	1	; select bank1
 21794  034D  00B3               	movwf	(___flsub@b+3)^(0+128)
 21795  034E  0140               	movlb	0	; select bank0
 21796  034F  0847               	movf	?___flmul+2,w
 21797  0350  0141               	movlb	1	; select bank1
 21798  0351  00B2               	movwf	(___flsub@b+2)^(0+128)
 21799  0352  0140               	movlb	0	; select bank0
 21800  0353  0846               	movf	?___flmul+1,w
 21801  0354  0141               	movlb	1	; select bank1
 21802  0355  00B1               	movwf	(___flsub@b+1)^(0+128)
 21803  0356  0140               	movlb	0	; select bank0
 21804  0357  0845               	movf	?___flmul,w
 21805  0358  0141               	movlb	1	; select bank1
 21806  0359  00B0               	movwf	___flsub@b^(0+128)
 21807  035A  31B3  235A  3180   	fcall	___flsub
 21808  035D  0141               	movlb	1	; select bank1
 21809  035E  082F               	movf	(?___flsub+3)^(0+128),w
 21810  035F  0142               	movlb	2	; select bank2
 21811  0360  00BB               	movwf	(_calcRequiredPower$2648+3)^(0+256)
 21812  0361  0141               	movlb	1	; select bank1
 21813  0362  082E               	movf	(?___flsub+2)^(0+128),w
 21814  0363  0142               	movlb	2	; select bank2
 21815  0364  00BA               	movwf	(_calcRequiredPower$2648+2)^(0+256)
 21816  0365  0141               	movlb	1	; select bank1
 21817  0366  082D               	movf	(?___flsub+1)^(0+128),w
 21818  0367  0142               	movlb	2	; select bank2
 21819  0368  00B9               	movwf	(_calcRequiredPower$2648+1)^(0+256)
 21820  0369  0141               	movlb	1	; select bank1
 21821  036A  082C               	movf	?___flsub^(0+128),w
 21822  036B  0142               	movlb	2	; select bank2
 21823  036C  00B8               	movwf	_calcRequiredPower$2648^(0+256)
 21824                           
 21825                           ;system.c: 394:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21826  036D  3033               	movlw	51
 21827  036E  0140               	movlb	0	; select bank0
 21828  036F  00C8               	movwf	___flmul@b+3
 21829  0370  3067               	movlw	103
 21830  0371  00C7               	movwf	___flmul@b+2
 21831  0372  3059               	movlw	89
 21832  0373  00C6               	movwf	___flmul@b+1
 21833  0374  3032               	movlw	50
 21834  0375  00C5               	movwf	___flmul@b
 21835  0376  0142               	movlb	2	; select bank2
 21836  0377  084B               	movf	(calcRequiredPower@A+3)^(0+256),w
 21837  0378  0140               	movlb	0	; select bank0
 21838  0379  00CC               	movwf	___flmul@a+3
 21839  037A  0142               	movlb	2	; select bank2
 21840  037B  084A               	movf	(calcRequiredPower@A+2)^(0+256),w
 21841  037C  0140               	movlb	0	; select bank0
 21842  037D  00CB               	movwf	___flmul@a+2
 21843  037E  0142               	movlb	2	; select bank2
 21844  037F  0849               	movf	(calcRequiredPower@A+1)^(0+256),w
 21845  0380  0140               	movlb	0	; select bank0
 21846  0381  00CA               	movwf	___flmul@a+1
 21847  0382  0142               	movlb	2	; select bank2
 21848  0383  0848               	movf	calcRequiredPower@A^(0+256),w
 21849  0384  0140               	movlb	0	; select bank0
 21850  0385  00C9               	movwf	___flmul@a
 21851  0386  3191  21D9  3180   	fcall	___flmul
 21852  0389  0140               	movlb	0	; select bank0
 21853  038A  0848               	movf	?___flmul+3,w
 21854  038B  0142               	movlb	2	; select bank2
 21855  038C  00BF               	movwf	(_calcRequiredPower$2649+3)^(0+256)
 21856  038D  0140               	movlb	0	; select bank0
 21857  038E  0847               	movf	?___flmul+2,w
 21858  038F  0142               	movlb	2	; select bank2
 21859  0390  00BE               	movwf	(_calcRequiredPower$2649+2)^(0+256)
 21860  0391  0140               	movlb	0	; select bank0
 21861  0392  0846               	movf	?___flmul+1,w
 21862  0393  0142               	movlb	2	; select bank2
 21863  0394  00BD               	movwf	(_calcRequiredPower$2649+1)^(0+256)
 21864  0395  0140               	movlb	0	; select bank0
 21865  0396  0845               	movf	?___flmul,w
 21866  0397  0142               	movlb	2	; select bank2
 21867  0398  00BC               	movwf	_calcRequiredPower$2649^(0+256)
 21868                           
 21869                           ;system.c: 394:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21870  0399  083B               	movf	(_calcRequiredPower$2648+3)^(0+256),w
 21871  039A  0140               	movlb	0	; select bank0
 21872  039B  00C8               	movwf	___flmul@b+3
 21873  039C  0142               	movlb	2	; select bank2
 21874  039D  083A               	movf	(_calcRequiredPower$2648+2)^(0+256),w
 21875  039E  0140               	movlb	0	; select bank0
 21876  039F  00C7               	movwf	___flmul@b+2
 21877  03A0  0142               	movlb	2	; select bank2
 21878  03A1  0839               	movf	(_calcRequiredPower$2648+1)^(0+256),w
 21879  03A2  0140               	movlb	0	; select bank0
 21880  03A3  00C6               	movwf	___flmul@b+1
 21881  03A4  0142               	movlb	2	; select bank2
 21882  03A5  0838               	movf	_calcRequiredPower$2648^(0+256),w
 21883  03A6  0140               	movlb	0	; select bank0
 21884  03A7  00C5               	movwf	___flmul@b
 21885  03A8  0142               	movlb	2	; select bank2
 21886  03A9  083F               	movf	(_calcRequiredPower$2649+3)^(0+256),w
 21887  03AA  0140               	movlb	0	; select bank0
 21888  03AB  00CC               	movwf	___flmul@a+3
 21889  03AC  0142               	movlb	2	; select bank2
 21890  03AD  083E               	movf	(_calcRequiredPower$2649+2)^(0+256),w
 21891  03AE  0140               	movlb	0	; select bank0
 21892  03AF  00CB               	movwf	___flmul@a+2
 21893  03B0  0142               	movlb	2	; select bank2
 21894  03B1  083D               	movf	(_calcRequiredPower$2649+1)^(0+256),w
 21895  03B2  0140               	movlb	0	; select bank0
 21896  03B3  00CA               	movwf	___flmul@a+1
 21897  03B4  0142               	movlb	2	; select bank2
 21898  03B5  083C               	movf	_calcRequiredPower$2649^(0+256),w
 21899  03B6  0140               	movlb	0	; select bank0
 21900  03B7  00C9               	movwf	___flmul@a
 21901  03B8  3191  21D9  3180   	fcall	___flmul
 21902  03BB  0140               	movlb	0	; select bank0
 21903  03BC  0848               	movf	?___flmul+3,w
 21904  03BD  0142               	movlb	2	; select bank2
 21905  03BE  00C7               	movwf	(calcRequiredPower@phi+3)^(0+256)
 21906  03BF  0140               	movlb	0	; select bank0
 21907  03C0  0847               	movf	?___flmul+2,w
 21908  03C1  0142               	movlb	2	; select bank2
 21909  03C2  00C6               	movwf	(calcRequiredPower@phi+2)^(0+256)
 21910  03C3  0140               	movlb	0	; select bank0
 21911  03C4  0846               	movf	?___flmul+1,w
 21912  03C5  0142               	movlb	2	; select bank2
 21913  03C6  00C5               	movwf	(calcRequiredPower@phi+1)^(0+256)
 21914  03C7  0140               	movlb	0	; select bank0
 21915  03C8  0845               	movf	?___flmul,w
 21916  03C9  0142               	movlb	2	; select bank2
 21917  03CA  00C4               	movwf	calcRequiredPower@phi^(0+256)
 21918                           
 21919                           ;system.c: 396:   data->chData[n].Preq = phi * data->fudgeFactor;
 21920  03CB  0858               	movf	calcRequiredPower@n^(0+256),w
 21921  03CC  0141               	movlb	1	; select bank1
 21922  03CD  00B6               	movwf	??_calcRequiredPower^(0+128)
 21923  03CE  01B7               	clrf	(??_calcRequiredPower^(0+128)+1)
 21924  03CF  0836               	movf	??_calcRequiredPower^(0+128),w
 21925  03D0  0140               	movlb	0	; select bank0
 21926  03D1  00B1               	movwf	___wmul@multiplier
 21927  03D2  0141               	movlb	1	; select bank1
 21928  03D3  0837               	movf	(??_calcRequiredPower+1)^(0+128),w
 21929  03D4  0140               	movlb	0	; select bank0
 21930  03D5  00B2               	movwf	___wmul@multiplier+1
 21931  03D6  301F               	movlw	31
 21932  03D7  00B3               	movwf	___wmul@multiplicand
 21933  03D8  3000               	movlw	0
 21934  03D9  00B4               	movwf	___wmul@multiplicand+1
 21935  03DA  31B1  21AD  3180   	fcall	___wmul
 21936  03DD  0140               	movlb	0	; select bank0
 21937  03DE  0831               	movf	?___wmul,w
 21938  03DF  0141               	movlb	1	; select bank1
 21939  03E0  0734               	addwf	calcRequiredPower@data^(0+128),w
 21940  03E1  00B8               	movwf	(??_calcRequiredPower+2)^(0+128)
 21941  03E2  0140               	movlb	0	; select bank0
 21942  03E3  0832               	movf	?___wmul+1,w
 21943  03E4  0141               	movlb	1	; select bank1
 21944  03E5  3D35               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21945  03E6  00B9               	movwf	(??_calcRequiredPower+3)^(0+128)
 21946  03E7  0838               	movf	(??_calcRequiredPower+2)^(0+128),w
 21947  03E8  3E32               	addlw	50
 21948  03E9  0086               	movwf	6
 21949  03EA  3000               	movlw	0
 21950  03EB  3D39               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21951  03EC  0087               	movwf	7
 21952  03ED  0142               	movlb	2	; select bank2
 21953  03EE  0847               	movf	(calcRequiredPower@phi+3)^(0+256),w
 21954  03EF  0140               	movlb	0	; select bank0
 21955  03F0  00C8               	movwf	___flmul@b+3
 21956  03F1  0142               	movlb	2	; select bank2
 21957  03F2  0846               	movf	(calcRequiredPower@phi+2)^(0+256),w
 21958  03F3  0140               	movlb	0	; select bank0
 21959  03F4  00C7               	movwf	___flmul@b+2
 21960  03F5  0142               	movlb	2	; select bank2
 21961  03F6  0845               	movf	(calcRequiredPower@phi+1)^(0+256),w
 21962  03F7  0140               	movlb	0	; select bank0
 21963  03F8  00C6               	movwf	___flmul@b+1
 21964  03F9  0142               	movlb	2	; select bank2
 21965  03FA  0844               	movf	calcRequiredPower@phi^(0+256),w
 21966  03FB  0140               	movlb	0	; select bank0
 21967  03FC  00C5               	movwf	___flmul@b
 21968  03FD  0141               	movlb	1	; select bank1
 21969  03FE  0834               	movf	calcRequiredPower@data^(0+128),w
 21970  03FF  3E25               	addlw	37
 21971  0400  0084               	movwf	4
 21972  0401  3000               	movlw	0
 21973  0402  3D35               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 21974  0403  0085               	movwf	5
 21975  0404  3F00               	moviw [0]fsr0
 21976  0405  0140               	movlb	0	; select bank0
 21977  0406  00C9               	movwf	___flmul@a
 21978  0407  3F01               	moviw [1]fsr0
 21979  0408  00CA               	movwf	___flmul@a+1
 21980  0409  3F02               	moviw [2]fsr0
 21981  040A  00CB               	movwf	___flmul@a+2
 21982  040B  3F03               	moviw [3]fsr0
 21983  040C  00CC               	movwf	___flmul@a+3
 21984  040D  3191  21D9  3180   	fcall	___flmul
 21985  0410  0140               	movlb	0	; select bank0
 21986  0411  0845               	movf	?___flmul,w
 21987  0412  3FC0               	movwi [0]fsr1
 21988  0413  0846               	movf	?___flmul+1,w
 21989  0414  3FC1               	movwi [1]fsr1
 21990  0415  0847               	movf	?___flmul+2,w
 21991  0416  3FC2               	movwi [2]fsr1
 21992  0417  0848               	movf	?___flmul+3,w
 21993  0418  3FC3               	movwi [3]fsr1
 21994                           
 21995                           ;system.c: 399:   p = 2 * 3.14 * 0.0254 * data->chData[n].lensDia;
 21996  0419  303E               	movlw	62
 21997  041A  00C8               	movwf	___flmul@b+3
 21998  041B  3023               	movlw	35
 21999  041C  00C7               	movwf	___flmul@b+2
 22000  041D  3057               	movlw	87
 22001  041E  00C6               	movwf	___flmul@b+1
 22002  041F  301D               	movlw	29
 22003  0420  00C5               	movwf	___flmul@b
 22004  0421  0142               	movlb	2	; select bank2
 22005  0422  0858               	movf	calcRequiredPower@n^(0+256),w
 22006  0423  0141               	movlb	1	; select bank1
 22007  0424  00B6               	movwf	??_calcRequiredPower^(0+128)
 22008  0425  01B7               	clrf	(??_calcRequiredPower^(0+128)+1)
 22009  0426  0836               	movf	??_calcRequiredPower^(0+128),w
 22010  0427  0140               	movlb	0	; select bank0
 22011  0428  00B1               	movwf	___wmul@multiplier
 22012  0429  0141               	movlb	1	; select bank1
 22013  042A  0837               	movf	(??_calcRequiredPower+1)^(0+128),w
 22014  042B  0140               	movlb	0	; select bank0
 22015  042C  00B2               	movwf	___wmul@multiplier+1
 22016  042D  301F               	movlw	31
 22017  042E  00B3               	movwf	___wmul@multiplicand
 22018  042F  3000               	movlw	0
 22019  0430  00B4               	movwf	___wmul@multiplicand+1
 22020  0431  31B1  21AD  3180   	fcall	___wmul
 22021  0434  0140               	movlb	0	; select bank0
 22022  0435  0831               	movf	?___wmul,w
 22023  0436  0141               	movlb	1	; select bank1
 22024  0437  0734               	addwf	calcRequiredPower@data^(0+128),w
 22025  0438  00B8               	movwf	(??_calcRequiredPower+2)^(0+128)
 22026  0439  0140               	movlb	0	; select bank0
 22027  043A  0832               	movf	?___wmul+1,w
 22028  043B  0141               	movlb	1	; select bank1
 22029  043C  3D35               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 22030  043D  00B9               	movwf	(??_calcRequiredPower+3)^(0+128)
 22031  043E  0838               	movf	(??_calcRequiredPower+2)^(0+128),w
 22032  043F  3E3F               	addlw	63
 22033  0440  0086               	movwf	6
 22034  0441  3000               	movlw	0
 22035  0442  3D39               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22036  0443  0087               	movwf	7
 22037  0444  3F40               	moviw [0]fsr1
 22038  0445  0140               	movlb	0	; select bank0
 22039  0446  00C9               	movwf	___flmul@a
 22040  0447  3F41               	moviw [1]fsr1
 22041  0448  00CA               	movwf	___flmul@a+1
 22042  0449  3F42               	moviw [2]fsr1
 22043  044A  00CB               	movwf	___flmul@a+2
 22044  044B  3F43               	moviw [3]fsr1
 22045  044C  00CC               	movwf	___flmul@a+3
 22046  044D  3191  21D9  3180   	fcall	___flmul
 22047  0450  0140               	movlb	0	; select bank0
 22048  0451  0848               	movf	?___flmul+3,w
 22049  0452  0142               	movlb	2	; select bank2
 22050  0453  00A3               	movwf	(calcRequiredPower@p+3)^(0+256)
 22051  0454  0140               	movlb	0	; select bank0
 22052  0455  0847               	movf	?___flmul+2,w
 22053  0456  0142               	movlb	2	; select bank2
 22054  0457  00A2               	movwf	(calcRequiredPower@p+2)^(0+256)
 22055  0458  0140               	movlb	0	; select bank0
 22056  0459  0846               	movf	?___flmul+1,w
 22057  045A  0142               	movlb	2	; select bank2
 22058  045B  00A1               	movwf	(calcRequiredPower@p+1)^(0+256)
 22059  045C  0140               	movlb	0	; select bank0
 22060  045D  0845               	movf	?___flmul,w
 22061  045E  0142               	movlb	2	; select bank2
 22062  045F  00A0               	movwf	calcRequiredPower@p^(0+256)
 22063                           
 22064                           ;system.c: 400:   A = p * 0.03;
 22065  0460  303C               	movlw	60
 22066  0461  0140               	movlb	0	; select bank0
 22067  0462  00C8               	movwf	___flmul@b+3
 22068  0463  30F5               	movlw	245
 22069  0464  00C7               	movwf	___flmul@b+2
 22070  0465  30C2               	movlw	194
 22071  0466  00C6               	movwf	___flmul@b+1
 22072  0467  308F               	movlw	143
 22073  0468  00C5               	movwf	___flmul@b
 22074  0469  0142               	movlb	2	; select bank2
 22075  046A  0823               	movf	(calcRequiredPower@p+3)^(0+256),w
 22076  046B  0140               	movlb	0	; select bank0
 22077  046C  00CC               	movwf	___flmul@a+3
 22078  046D  0142               	movlb	2	; select bank2
 22079  046E  0822               	movf	(calcRequiredPower@p+2)^(0+256),w
 22080  046F  0140               	movlb	0	; select bank0
 22081  0470  00CB               	movwf	___flmul@a+2
 22082  0471  0142               	movlb	2	; select bank2
 22083  0472  0821               	movf	(calcRequiredPower@p+1)^(0+256),w
 22084  0473  0140               	movlb	0	; select bank0
 22085  0474  00CA               	movwf	___flmul@a+1
 22086  0475  0142               	movlb	2	; select bank2
 22087  0476  0820               	movf	calcRequiredPower@p^(0+256),w
 22088  0477  0140               	movlb	0	; select bank0
 22089  0478  00C9               	movwf	___flmul@a
 22090  0479  3191  21D9  3180   	fcall	___flmul
 22091  047C  0140               	movlb	0	; select bank0
 22092  047D  0848               	movf	?___flmul+3,w
 22093  047E  0142               	movlb	2	; select bank2
 22094  047F  00CB               	movwf	(calcRequiredPower@A+3)^(0+256)
 22095  0480  0140               	movlb	0	; select bank0
 22096  0481  0847               	movf	?___flmul+2,w
 22097  0482  0142               	movlb	2	; select bank2
 22098  0483  00CA               	movwf	(calcRequiredPower@A+2)^(0+256)
 22099  0484  0140               	movlb	0	; select bank0
 22100  0485  0846               	movf	?___flmul+1,w
 22101  0486  0142               	movlb	2	; select bank2
 22102  0487  00C9               	movwf	(calcRequiredPower@A+1)^(0+256)
 22103  0488  0140               	movlb	0	; select bank0
 22104  0489  0845               	movf	?___flmul,w
 22105  048A  0142               	movlb	2	; select bank2
 22106  048B  00C8               	movwf	calcRequiredPower@A^(0+256)
 22107                           
 22108                           ;system.c: 402:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 22109  048C  303F               	movlw	63
 22110  048D  0140               	movlb	0	; select bank0
 22111  048E  00C8               	movwf	___flmul@b+3
 22112  048F  3059               	movlw	89
 22113  0490  00C7               	movwf	___flmul@b+2
 22114  0491  3099               	movlw	153
 22115  0492  00C6               	movwf	___flmul@b+1
 22116  0493  309A               	movlw	154
 22117  0494  00C5               	movwf	___flmul@b
 22118  0495  3040               	movlw	64
 22119  0496  00E2               	movwf	___fldiv@a+3
 22120  0497  3000               	movlw	0
 22121  0498  00E1               	movwf	___fldiv@a+2
 22122  0499  3000               	movlw	0
 22123  049A  00E0               	movwf	___fldiv@a+1
 22124  049B  3000               	movlw	0
 22125  049C  00DF               	movwf	___fldiv@a
 22126  049D  0142               	movlb	2	; select bank2
 22127  049E  0858               	movf	calcRequiredPower@n^(0+256),w
 22128  049F  0141               	movlb	1	; select bank1
 22129  04A0  00B6               	movwf	??_calcRequiredPower^(0+128)
 22130  04A1  01B7               	clrf	(??_calcRequiredPower^(0+128)+1)
 22131  04A2  0836               	movf	??_calcRequiredPower^(0+128),w
 22132  04A3  0140               	movlb	0	; select bank0
 22133  04A4  00B1               	movwf	___wmul@multiplier
 22134  04A5  0141               	movlb	1	; select bank1
 22135  04A6  0837               	movf	(??_calcRequiredPower+1)^(0+128),w
 22136  04A7  0140               	movlb	0	; select bank0
 22137  04A8  00B2               	movwf	___wmul@multiplier+1
 22138  04A9  301F               	movlw	31
 22139  04AA  00B3               	movwf	___wmul@multiplicand
 22140  04AB  3000               	movlw	0
 22141  04AC  00B4               	movwf	___wmul@multiplicand+1
 22142  04AD  31B1  21AD  3180   	fcall	___wmul
 22143  04B0  0140               	movlb	0	; select bank0
 22144  04B1  0831               	movf	?___wmul,w
 22145  04B2  0141               	movlb	1	; select bank1
 22146  04B3  0734               	addwf	calcRequiredPower@data^(0+128),w
 22147  04B4  00B8               	movwf	(??_calcRequiredPower+2)^(0+128)
 22148  04B5  0140               	movlb	0	; select bank0
 22149  04B6  0832               	movf	?___wmul+1,w
 22150  04B7  0141               	movlb	1	; select bank1
 22151  04B8  3D35               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 22152  04B9  00B9               	movwf	(??_calcRequiredPower+3)^(0+128)
 22153  04BA  0838               	movf	(??_calcRequiredPower+2)^(0+128),w
 22154  04BB  3E3F               	addlw	63
 22155  04BC  0086               	movwf	6
 22156  04BD  3000               	movlw	0
 22157  04BE  3D39               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22158  04BF  0087               	movwf	7
 22159  04C0  3F40               	moviw [0]fsr1
 22160  04C1  0140               	movlb	0	; select bank0
 22161  04C2  00E3               	movwf	___fldiv@b
 22162  04C3  3F41               	moviw [1]fsr1
 22163  04C4  00E4               	movwf	___fldiv@b+1
 22164  04C5  3F42               	moviw [2]fsr1
 22165  04C6  00E5               	movwf	___fldiv@b+2
 22166  04C7  3F43               	moviw [3]fsr1
 22167  04C8  00E6               	movwf	___fldiv@b+3
 22168  04C9  3190  2007  3180   	fcall	___fldiv
 22169  04CC  0140               	movlb	0	; select bank0
 22170  04CD  0862               	movf	?___fldiv+3,w
 22171  04CE  00CC               	movwf	___flmul@a+3
 22172  04CF  0861               	movf	?___fldiv+2,w
 22173  04D0  00CB               	movwf	___flmul@a+2
 22174  04D1  0860               	movf	?___fldiv+1,w
 22175  04D2  00CA               	movwf	___flmul@a+1
 22176  04D3  085F               	movf	?___fldiv,w
 22177  04D4  00C9               	movwf	___flmul@a
 22178  04D5  3191  21D9  3180   	fcall	___flmul
 22179  04D8  0140               	movlb	0	; select bank0
 22180  04D9  0848               	movf	?___flmul+3,w
 22181  04DA  0142               	movlb	2	; select bank2
 22182  04DB  00CF               	movwf	(_calcRequiredPower$2643+3)^(0+256)
 22183  04DC  0140               	movlb	0	; select bank0
 22184  04DD  0847               	movf	?___flmul+2,w
 22185  04DE  0142               	movlb	2	; select bank2
 22186  04DF  00CE               	movwf	(_calcRequiredPower$2643+2)^(0+256)
 22187  04E0  0140               	movlb	0	; select bank0
 22188  04E1  0846               	movf	?___flmul+1,w
 22189  04E2  0142               	movlb	2	; select bank2
 22190  04E3  00CD               	movwf	(_calcRequiredPower$2643+1)^(0+256)
 22191  04E4  0140               	movlb	0	; select bank0
 22192  04E5  0845               	movf	?___flmul,w
 22193  04E6  0142               	movlb	2	; select bank2
 22194  04E7  00CC               	movwf	_calcRequiredPower$2643^(0+256)
 22195                           
 22196                           ;system.c: 402:   Rth = (data->chData[n].lensDia / 2) * 0.85 * A;
 22197  04E8  084B               	movf	(calcRequiredPower@A+3)^(0+256),w
 22198  04E9  0140               	movlb	0	; select bank0
 22199  04EA  00C8               	movwf	___flmul@b+3
 22200  04EB  0142               	movlb	2	; select bank2
 22201  04EC  084A               	movf	(calcRequiredPower@A+2)^(0+256),w
 22202  04ED  0140               	movlb	0	; select bank0
 22203  04EE  00C7               	movwf	___flmul@b+2
 22204  04EF  0142               	movlb	2	; select bank2
 22205  04F0  0849               	movf	(calcRequiredPower@A+1)^(0+256),w
 22206  04F1  0140               	movlb	0	; select bank0
 22207  04F2  00C6               	movwf	___flmul@b+1
 22208  04F3  0142               	movlb	2	; select bank2
 22209  04F4  0848               	movf	calcRequiredPower@A^(0+256),w
 22210  04F5  0140               	movlb	0	; select bank0
 22211  04F6  00C5               	movwf	___flmul@b
 22212  04F7  0142               	movlb	2	; select bank2
 22213  04F8  084F               	movf	(_calcRequiredPower$2643+3)^(0+256),w
 22214  04F9  0140               	movlb	0	; select bank0
 22215  04FA  00CC               	movwf	___flmul@a+3
 22216  04FB  0142               	movlb	2	; select bank2
 22217  04FC  084E               	movf	(_calcRequiredPower$2643+2)^(0+256),w
 22218  04FD  0140               	movlb	0	; select bank0
 22219  04FE  00CB               	movwf	___flmul@a+2
 22220  04FF  0142               	movlb	2	; select bank2
 22221  0500  084D               	movf	(_calcRequiredPower$2643+1)^(0+256),w
 22222  0501  0140               	movlb	0	; select bank0
 22223  0502  00CA               	movwf	___flmul@a+1
 22224  0503  0142               	movlb	2	; select bank2
 22225  0504  084C               	movf	_calcRequiredPower$2643^(0+256),w
 22226  0505  0140               	movlb	0	; select bank0
 22227  0506  00C9               	movwf	___flmul@a
 22228  0507  3191  21D9  3180   	fcall	___flmul
 22229  050A  0140               	movlb	0	; select bank0
 22230  050B  0848               	movf	?___flmul+3,w
 22231  050C  0142               	movlb	2	; select bank2
 22232  050D  00A7               	movwf	(calcRequiredPower@Rth+3)^(0+256)
 22233  050E  0140               	movlb	0	; select bank0
 22234  050F  0847               	movf	?___flmul+2,w
 22235  0510  0142               	movlb	2	; select bank2
 22236  0511  00A6               	movwf	(calcRequiredPower@Rth+2)^(0+256)
 22237  0512  0140               	movlb	0	; select bank0
 22238  0513  0846               	movf	?___flmul+1,w
 22239  0514  0142               	movlb	2	; select bank2
 22240  0515  00A5               	movwf	(calcRequiredPower@Rth+1)^(0+256)
 22241  0516  0140               	movlb	0	; select bank0
 22242  0517  0845               	movf	?___flmul,w
 22243  0518  0142               	movlb	2	; select bank2
 22244  0519  00A4               	movwf	calcRequiredPower@Rth^(0+256)
 22245                           
 22246                           ;system.c: 404:   data->chData[n].dt = phi * Rth - data->dewPointC;
 22247  051A  0858               	movf	calcRequiredPower@n^(0+256),w
 22248  051B  0141               	movlb	1	; select bank1
 22249  051C  00B6               	movwf	??_calcRequiredPower^(0+128)
 22250  051D  01B7               	clrf	(??_calcRequiredPower^(0+128)+1)
 22251  051E  0836               	movf	??_calcRequiredPower^(0+128),w
 22252  051F  0140               	movlb	0	; select bank0
 22253  0520  00B1               	movwf	___wmul@multiplier
 22254  0521  0141               	movlb	1	; select bank1
 22255  0522  0837               	movf	(??_calcRequiredPower+1)^(0+128),w
 22256  0523  0140               	movlb	0	; select bank0
 22257  0524  00B2               	movwf	___wmul@multiplier+1
 22258  0525  301F               	movlw	31
 22259  0526  00B3               	movwf	___wmul@multiplicand
 22260  0527  3000               	movlw	0
 22261  0528  00B4               	movwf	___wmul@multiplicand+1
 22262  0529  31B1  21AD  3180   	fcall	___wmul
 22263  052C  0140               	movlb	0	; select bank0
 22264  052D  0831               	movf	?___wmul,w
 22265  052E  0141               	movlb	1	; select bank1
 22266  052F  0734               	addwf	calcRequiredPower@data^(0+128),w
 22267  0530  00B8               	movwf	(??_calcRequiredPower+2)^(0+128)
 22268  0531  0140               	movlb	0	; select bank0
 22269  0532  0832               	movf	?___wmul+1,w
 22270  0533  0141               	movlb	1	; select bank1
 22271  0534  3D35               	addwfc	(calcRequiredPower@data+1)^(0+128),w
 22272  0535  00B9               	movwf	(??_calcRequiredPower+3)^(0+128)
 22273  0536  0838               	movf	(??_calcRequiredPower+2)^(0+128),w
 22274  0537  3E43               	addlw	67
 22275  0538  0086               	movwf	6
 22276  0539  3000               	movlw	0
 22277  053A  3D39               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22278  053B  0087               	movwf	7
 22279  053C  0834               	movf	calcRequiredPower@data^(0+128),w
 22280  053D  0084               	movwf	4
 22281  053E  0835               	movf	(calcRequiredPower@data+1)^(0+128),w
 22282  053F  0085               	movwf	5
 22283  0540  3108               	addfsr 0,8
 22284  0541  3F00               	moviw [0]fsr0
 22285  0542  00AC               	movwf	___flsub@a^(0+128)
 22286  0543  3F01               	moviw [1]fsr0
 22287  0544  00AD               	movwf	(___flsub@a+1)^(0+128)
 22288  0545  3F02               	moviw [2]fsr0
 22289  0546  00AE               	movwf	(___flsub@a+2)^(0+128)
 22290  0547  3F03               	moviw [3]fsr0
 22291  0548  00AF               	movwf	(___flsub@a+3)^(0+128)
 22292  0549  0142               	movlb	2	; select bank2
 22293  054A  0827               	movf	(calcRequiredPower@Rth+3)^(0+256),w
 22294  054B  0140               	movlb	0	; select bank0
 22295  054C  00C8               	movwf	___flmul@b+3
 22296  054D  0142               	movlb	2	; select bank2
 22297  054E  0826               	movf	(calcRequiredPower@Rth+2)^(0+256),w
 22298  054F  0140               	movlb	0	; select bank0
 22299  0550  00C7               	movwf	___flmul@b+2
 22300  0551  0142               	movlb	2	; select bank2
 22301  0552  0825               	movf	(calcRequiredPower@Rth+1)^(0+256),w
 22302  0553  0140               	movlb	0	; select bank0
 22303  0554  00C6               	movwf	___flmul@b+1
 22304  0555  0142               	movlb	2	; select bank2
 22305  0556  0824               	movf	calcRequiredPower@Rth^(0+256),w
 22306  0557  0140               	movlb	0	; select bank0
 22307  0558  00C5               	movwf	___flmul@b
 22308  0559  0142               	movlb	2	; select bank2
 22309  055A  0847               	movf	(calcRequiredPower@phi+3)^(0+256),w
 22310  055B  0140               	movlb	0	; select bank0
 22311  055C  00CC               	movwf	___flmul@a+3
 22312  055D  0142               	movlb	2	; select bank2
 22313  055E  0846               	movf	(calcRequiredPower@phi+2)^(0+256),w
 22314  055F  0140               	movlb	0	; select bank0
 22315  0560  00CB               	movwf	___flmul@a+2
 22316  0561  0142               	movlb	2	; select bank2
 22317  0562  0845               	movf	(calcRequiredPower@phi+1)^(0+256),w
 22318  0563  0140               	movlb	0	; select bank0
 22319  0564  00CA               	movwf	___flmul@a+1
 22320  0565  0142               	movlb	2	; select bank2
 22321  0566  0844               	movf	calcRequiredPower@phi^(0+256),w
 22322  0567  0140               	movlb	0	; select bank0
 22323  0568  00C9               	movwf	___flmul@a
 22324  0569  3191  21D9  3180   	fcall	___flmul
 22325  056C  0140               	movlb	0	; select bank0
 22326  056D  0848               	movf	?___flmul+3,w
 22327  056E  0141               	movlb	1	; select bank1
 22328  056F  00B3               	movwf	(___flsub@b+3)^(0+128)
 22329  0570  0140               	movlb	0	; select bank0
 22330  0571  0847               	movf	?___flmul+2,w
 22331  0572  0141               	movlb	1	; select bank1
 22332  0573  00B2               	movwf	(___flsub@b+2)^(0+128)
 22333  0574  0140               	movlb	0	; select bank0
 22334  0575  0846               	movf	?___flmul+1,w
 22335  0576  0141               	movlb	1	; select bank1
 22336  0577  00B1               	movwf	(___flsub@b+1)^(0+128)
 22337  0578  0140               	movlb	0	; select bank0
 22338  0579  0845               	movf	?___flmul,w
 22339  057A  0141               	movlb	1	; select bank1
 22340  057B  00B0               	movwf	___flsub@b^(0+128)
 22341  057C  31B3  235A  3180   	fcall	___flsub
 22342  057F  0141               	movlb	1	; select bank1
 22343  0580  082C               	movf	?___flsub^(0+128),w
 22344  0581  3FC0               	movwi [0]fsr1
 22345  0582  082D               	movf	(?___flsub+1)^(0+128),w
 22346  0583  3FC1               	movwi [1]fsr1
 22347  0584  082E               	movf	(?___flsub+2)^(0+128),w
 22348  0585  3FC2               	movwi [2]fsr1
 22349  0586  082F               	movf	(?___flsub+3)^(0+128),w
 22350  0587  3FC3               	movwi [3]fsr1
 22351                           
 22352                           ;system.c: 405:  }
 22353  0588  3001               	movlw	1
 22354  0589  00B6               	movwf	??_calcRequiredPower^(0+128)
 22355  058A  0836               	movf	??_calcRequiredPower^(0+128),w
 22356  058B  0142               	movlb	2	; select bank2
 22357  058C  07D8               	addwf	calcRequiredPower@n^(0+256),f
 22358  058D  3004               	movlw	4
 22359  058E  0258               	subwf	calcRequiredPower@n^(0+256),w
 22360  058F  1803               	btfsc	3,0
 22361  0590  0008               	return
 22362  0591  28E8               	goto	l8152
 22363  0592                     __end_of_calcRequiredPower:	
 22364                           
 22365                           	psect	text65
 22366  31AD                     __ptext65:	
 22367 ;; *************** function ___wmul *****************
 22368 ;; Defined at:
 22369 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 22370 ;; Parameters:    Size  Location     Type
 22371 ;;  multiplier      2   17[BANK0 ] unsigned int 
 22372 ;;  multiplicand    2   19[BANK0 ] unsigned int 
 22373 ;; Auto vars:     Size  Location     Type
 22374 ;;  product         2   21[BANK0 ] unsigned int 
 22375 ;; Return value:  Size  Location     Type
 22376 ;;                  2   17[BANK0 ] unsigned int 
 22377 ;; Registers used:
 22378 ;;		wreg, status,2, status,0
 22379 ;; Tracked objects:
 22380 ;;		On entry : 0/0
 22381 ;;		On exit  : 0/0
 22382 ;;		Unchanged: 0/0
 22383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22384 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22385 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22387 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22388 ;;Total ram usage:        6 bytes
 22389 ;; Hardware stack levels used:    1
 22390 ;; Hardware stack levels required when called:    3
 22391 ;; This function calls:
 22392 ;;		Nothing
 22393 ;; This function is called by:
 22394 ;;		_initGlobalData
 22395 ;;		_channelView
 22396 ;;		_channelSetup
 22397 ;;		_setOutputPower
 22398 ;;		_setLensDia
 22399 ;;		_getStateFunc
 22400 ;;		_getNextState
 22401 ;;		_returnToPage
 22402 ;;		_checkChannelStatus
 22403 ;;		_calcRequiredPower
 22404 ;;		_channelThing
 22405 ;;		_ftoa
 22406 ;;		_qsort
 22407 ;; This function uses a non-reentrant model
 22408 ;;
 22409                           
 22410                           
 22411                           ;psect for function ___wmul
 22412  31AD                     ___wmul:	
 22413                           
 22414                           ;incstack = 0
 22415                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 22416  31AD  0140               	movlb	0	; select bank0
 22417  31AE  01B5               	clrf	___wmul@product
 22418  31AF  01B6               	clrf	___wmul@product+1
 22419  31B0                     l7008:	
 22420  31B0  1C31               	btfss	___wmul@multiplier,0
 22421  31B1  29B6               	goto	l1040
 22422  31B2  0833               	movf	___wmul@multiplicand,w
 22423  31B3  07B5               	addwf	___wmul@product,f
 22424  31B4  0834               	movf	___wmul@multiplicand+1,w
 22425  31B5  3DB6               	addwfc	___wmul@product+1,f
 22426  31B6                     l1040:	
 22427  31B6  3001               	movlw	1
 22428  31B7                     u8025:	
 22429  31B7  35B3               	lslf	___wmul@multiplicand,f
 22430  31B8  0DB4               	rlf	___wmul@multiplicand+1,f
 22431  31B9  0B89               	decfsz	9,f
 22432  31BA  29B7               	goto	u8025
 22433  31BB  3001               	movlw	1
 22434  31BC                     u8035:	
 22435  31BC  36B2               	lsrf	___wmul@multiplier+1,f
 22436  31BD  0CB1               	rrf	___wmul@multiplier,f
 22437  31BE  0B89               	decfsz	9,f
 22438  31BF  29BC               	goto	u8035
 22439  31C0  0831               	movf	___wmul@multiplier,w
 22440  31C1  0432               	iorwf	___wmul@multiplier+1,w
 22441  31C2  1D03               	btfss	3,2
 22442  31C3  29B0               	goto	l7008
 22443  31C4  0836               	movf	___wmul@product+1,w
 22444  31C5  00B2               	movwf	?___wmul+1
 22445  31C6  0835               	movf	___wmul@product,w
 22446  31C7  00B1               	movwf	?___wmul
 22447  31C8  0008               	return
 22448  31C9                     __end_of___wmul:	
 22449                           
 22450                           	psect	text66
 22451  335A                     __ptext66:	
 22452 ;; *************** function ___flsub *****************
 22453 ;; Defined at:
 22454 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22455 ;; Parameters:    Size  Location     Type
 22456 ;;  a               4   12[BANK1 ] unsigned int 
 22457 ;;  b               4   16[BANK1 ] unsigned int 
 22458 ;; Auto vars:     Size  Location     Type
 22459 ;;		None
 22460 ;; Return value:  Size  Location     Type
 22461 ;;                  4   12[BANK1 ] unsigned int 
 22462 ;; Registers used:
 22463 ;;		wreg, status,2, status,0, pclath, cstack
 22464 ;; Tracked objects:
 22465 ;;		On entry : 0/0
 22466 ;;		On exit  : 0/0
 22467 ;;		Unchanged: 0/0
 22468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22469 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22472 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22473 ;;Total ram usage:        8 bytes
 22474 ;; Hardware stack levels used:    1
 22475 ;; Hardware stack levels required when called:    4
 22476 ;; This function calls:
 22477 ;;		___fladd
 22478 ;; This function is called by:
 22479 ;;		_spinInput
 22480 ;;		_calcRequiredPower
 22481 ;;		_sortCur
 22482 ;;		_ftoa
 22483 ;; This function uses a non-reentrant model
 22484 ;;
 22485                           
 22486                           
 22487                           ;psect for function ___flsub
 22488  335A                     ___flsub:	
 22489                           
 22490                           ;incstack = 0
 22491                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 22492  335A  3080               	movlw	128
 22493  335B  0141               	movlb	1	; select bank1
 22494  335C  06AF               	xorwf	(___flsub@a+3)^(0+128),f
 22495  335D  0833               	movf	(___flsub@b+3)^(0+128),w
 22496  335E  0140               	movlb	0	; select bank0
 22497  335F  00E2               	movwf	___fladd@b+3
 22498  3360  0141               	movlb	1	; select bank1
 22499  3361  0832               	movf	(___flsub@b+2)^(0+128),w
 22500  3362  0140               	movlb	0	; select bank0
 22501  3363  00E1               	movwf	___fladd@b+2
 22502  3364  0141               	movlb	1	; select bank1
 22503  3365  0831               	movf	(___flsub@b+1)^(0+128),w
 22504  3366  0140               	movlb	0	; select bank0
 22505  3367  00E0               	movwf	___fladd@b+1
 22506  3368  0141               	movlb	1	; select bank1
 22507  3369  0830               	movf	___flsub@b^(0+128),w
 22508  336A  0140               	movlb	0	; select bank0
 22509  336B  00DF               	movwf	___fladd@b
 22510  336C  0141               	movlb	1	; select bank1
 22511  336D  082F               	movf	(___flsub@a+3)^(0+128),w
 22512  336E  0140               	movlb	0	; select bank0
 22513  336F  00E6               	movwf	___fladd@a+3
 22514  3370  0141               	movlb	1	; select bank1
 22515  3371  082E               	movf	(___flsub@a+2)^(0+128),w
 22516  3372  0140               	movlb	0	; select bank0
 22517  3373  00E5               	movwf	___fladd@a+2
 22518  3374  0141               	movlb	1	; select bank1
 22519  3375  082D               	movf	(___flsub@a+1)^(0+128),w
 22520  3376  0140               	movlb	0	; select bank0
 22521  3377  00E4               	movwf	___fladd@a+1
 22522  3378  0141               	movlb	1	; select bank1
 22523  3379  082C               	movf	___flsub@a^(0+128),w
 22524  337A  0140               	movlb	0	; select bank0
 22525  337B  00E3               	movwf	___fladd@a
 22526  337C  3185  2592         	fcall	___fladd
 22527  337E  0140               	movlb	0	; select bank0
 22528  337F  0862               	movf	?___fladd+3,w
 22529  3380  0141               	movlb	1	; select bank1
 22530  3381  00AF               	movwf	(?___flsub+3)^(0+128)
 22531  3382  0140               	movlb	0	; select bank0
 22532  3383  0861               	movf	?___fladd+2,w
 22533  3384  0141               	movlb	1	; select bank1
 22534  3385  00AE               	movwf	(?___flsub+2)^(0+128)
 22535  3386  0140               	movlb	0	; select bank0
 22536  3387  0860               	movf	?___fladd+1,w
 22537  3388  0141               	movlb	1	; select bank1
 22538  3389  00AD               	movwf	(?___flsub+1)^(0+128)
 22539  338A  0140               	movlb	0	; select bank0
 22540  338B  085F               	movf	?___fladd,w
 22541  338C  0141               	movlb	1	; select bank1
 22542  338D  00AC               	movwf	?___flsub^(0+128)
 22543  338E  0008               	return
 22544  338F                     __end_of___flsub:	
 22545                           
 22546                           	psect	text67
 22547  0592                     __ptext67:	
 22548 ;; *************** function ___fladd *****************
 22549 ;; Defined at:
 22550 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22551 ;; Parameters:    Size  Location     Type
 22552 ;;  b               4   63[BANK0 ] unsigned int 
 22553 ;;  a               4   67[BANK0 ] unsigned int 
 22554 ;; Auto vars:     Size  Location     Type
 22555 ;;  grs             1   11[BANK1 ] unsigned char 
 22556 ;;  bexp            1   10[BANK1 ] unsigned char 
 22557 ;;  aexp            1    9[BANK1 ] unsigned char 
 22558 ;;  signs           1    8[BANK1 ] unsigned char 
 22559 ;; Return value:  Size  Location     Type
 22560 ;;                  4   63[BANK0 ] unsigned char 
 22561 ;; Registers used:
 22562 ;;		wreg, status,2, status,0
 22563 ;; Tracked objects:
 22564 ;;		On entry : 0/0
 22565 ;;		On exit  : 0/0
 22566 ;;		Unchanged: 0/0
 22567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22568 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22569 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22570 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22571 ;;      Totals:         0       8      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22572 ;;Total ram usage:       20 bytes
 22573 ;; Hardware stack levels used:    1
 22574 ;; Hardware stack levels required when called:    3
 22575 ;; This function calls:
 22576 ;;		Nothing
 22577 ;; This function is called by:
 22578 ;;		_spinInput
 22579 ;;		_calcRequiredPower
 22580 ;;		_getAnalogValues
 22581 ;;		_channelThing
 22582 ;;		___flsub
 22583 ;; This function uses a non-reentrant model
 22584 ;;
 22585                           
 22586                           
 22587                           ;psect for function ___fladd
 22588  0592                     ___fladd:	
 22589                           
 22590                           ;incstack = 0
 22591                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 22592  0592  0140               	movlb	0	; select bank0
 22593  0593  0862               	movf	___fladd@b+3,w
 22594  0594  3980               	andlw	128
 22595  0595  0141               	movlb	1	; select bank1
 22596  0596  00A0               	movwf	??___fladd^(0+128)
 22597  0597  0820               	movf	??___fladd^(0+128),w
 22598  0598  00A8               	movwf	___fladd@signs^(0+128)
 22599  0599  0140               	movlb	0	; select bank0
 22600  059A  3562               	lslf	___fladd@b+3,w
 22601  059B  0141               	movlb	1	; select bank1
 22602  059C  00A0               	movwf	??___fladd^(0+128)
 22603  059D  0820               	movf	??___fladd^(0+128),w
 22604  059E  00AA               	movwf	___fladd@bexp^(0+128)
 22605  059F  0140               	movlb	0	; select bank0
 22606  05A0  1FE1               	btfss	___fladd@b+2,7
 22607  05A1  2DA4               	goto	l6806
 22608  05A2  0141               	movlb	1	; select bank1
 22609  05A3  142A               	bsf	___fladd@bexp^(0+128),0
 22610  05A4                     l6806:	
 22611  05A4  0141               	movlb	1	; select bank1
 22612  05A5  082A               	movf	___fladd@bexp^(0+128),w
 22613  05A6  1903               	btfsc	3,2
 22614  05A7  2DB8               	goto	l6816
 22615  05A8  0A2A               	incf	___fladd@bexp^(0+128),w
 22616  05A9  1D03               	btfss	3,2
 22617  05AA  2DB4               	goto	l6812
 22618  05AB  3000               	movlw	0
 22619  05AC  0140               	movlb	0	; select bank0
 22620  05AD  00E2               	movwf	___fladd@b+3
 22621  05AE  3000               	movlw	0
 22622  05AF  00E1               	movwf	___fladd@b+2
 22623  05B0  3000               	movlw	0
 22624  05B1  00E0               	movwf	___fladd@b+1
 22625  05B2  3000               	movlw	0
 22626  05B3  00DF               	movwf	___fladd@b
 22627  05B4                     l6812:	
 22628  05B4  0140               	movlb	0	; select bank0
 22629  05B5  17E1               	bsf	___fladd@b+2,7
 22630  05B6  01E2               	clrf	___fladd@b+3
 22631  05B7  2DC1               	goto	l6818
 22632  05B8                     l6816:	
 22633  05B8  3000               	movlw	0
 22634  05B9  0140               	movlb	0	; select bank0
 22635  05BA  00E2               	movwf	___fladd@b+3
 22636  05BB  3000               	movlw	0
 22637  05BC  00E1               	movwf	___fladd@b+2
 22638  05BD  3000               	movlw	0
 22639  05BE  00E0               	movwf	___fladd@b+1
 22640  05BF  3000               	movlw	0
 22641  05C0  00DF               	movwf	___fladd@b
 22642  05C1                     l6818:	
 22643  05C1  0866               	movf	___fladd@a+3,w
 22644  05C2  3980               	andlw	128
 22645  05C3  0141               	movlb	1	; select bank1
 22646  05C4  00A0               	movwf	??___fladd^(0+128)
 22647  05C5  0820               	movf	??___fladd^(0+128),w
 22648  05C6  00A9               	movwf	___fladd@aexp^(0+128)
 22649  05C7  0829               	movf	___fladd@aexp^(0+128),w
 22650  05C8  0628               	xorwf	___fladd@signs^(0+128),w
 22651  05C9  1D03               	btfss	3,2
 22652  05CA  1728               	bsf	___fladd@signs^(0+128),6
 22653  05CB  0140               	movlb	0	; select bank0
 22654  05CC  3566               	lslf	___fladd@a+3,w
 22655  05CD  0141               	movlb	1	; select bank1
 22656  05CE  00A0               	movwf	??___fladd^(0+128)
 22657  05CF  0820               	movf	??___fladd^(0+128),w
 22658  05D0  00A9               	movwf	___fladd@aexp^(0+128)
 22659  05D1  0140               	movlb	0	; select bank0
 22660  05D2  1FE5               	btfss	___fladd@a+2,7
 22661  05D3  2DD6               	goto	l6830
 22662  05D4  0141               	movlb	1	; select bank1
 22663  05D5  1429               	bsf	___fladd@aexp^(0+128),0
 22664  05D6                     l6830:	
 22665  05D6  0141               	movlb	1	; select bank1
 22666  05D7  0829               	movf	___fladd@aexp^(0+128),w
 22667  05D8  1903               	btfsc	3,2
 22668  05D9  2DEA               	goto	l6840
 22669  05DA  0A29               	incf	___fladd@aexp^(0+128),w
 22670  05DB  1D03               	btfss	3,2
 22671  05DC  2DE6               	goto	l6836
 22672  05DD  3000               	movlw	0
 22673  05DE  0140               	movlb	0	; select bank0
 22674  05DF  00E6               	movwf	___fladd@a+3
 22675  05E0  3000               	movlw	0
 22676  05E1  00E5               	movwf	___fladd@a+2
 22677  05E2  3000               	movlw	0
 22678  05E3  00E4               	movwf	___fladd@a+1
 22679  05E4  3000               	movlw	0
 22680  05E5  00E3               	movwf	___fladd@a
 22681  05E6                     l6836:	
 22682  05E6  0140               	movlb	0	; select bank0
 22683  05E7  17E5               	bsf	___fladd@a+2,7
 22684  05E8  01E6               	clrf	___fladd@a+3
 22685  05E9  2DF3               	goto	l1341
 22686  05EA                     l6840:	
 22687  05EA  3000               	movlw	0
 22688  05EB  0140               	movlb	0	; select bank0
 22689  05EC  00E6               	movwf	___fladd@a+3
 22690  05ED  3000               	movlw	0
 22691  05EE  00E5               	movwf	___fladd@a+2
 22692  05EF  3000               	movlw	0
 22693  05F0  00E4               	movwf	___fladd@a+1
 22694  05F1  3000               	movlw	0
 22695  05F2  00E3               	movwf	___fladd@a
 22696  05F3                     l1341:	
 22697  05F3  0141               	movlb	1	; select bank1
 22698  05F4  082A               	movf	___fladd@bexp^(0+128),w
 22699  05F5  0229               	subwf	___fladd@aexp^(0+128),w
 22700  05F6  1803               	skipnc
 22701  05F7  2E53               	goto	l6876
 22702  05F8  1F28               	btfss	___fladd@signs^(0+128),6
 22703  05F9  2DFE               	goto	l6846
 22704  05FA  3080               	movlw	128
 22705  05FB  00A0               	movwf	??___fladd^(0+128)
 22706  05FC  0820               	movf	??___fladd^(0+128),w
 22707  05FD  06A8               	xorwf	___fladd@signs^(0+128),f
 22708  05FE                     l6846:	
 22709  05FE  082A               	movf	___fladd@bexp^(0+128),w
 22710  05FF  00A0               	movwf	??___fladd^(0+128)
 22711  0600  0820               	movf	??___fladd^(0+128),w
 22712  0601  00AB               	movwf	___fladd@grs^(0+128)
 22713  0602  0829               	movf	___fladd@aexp^(0+128),w
 22714  0603  00A0               	movwf	??___fladd^(0+128)
 22715  0604  0820               	movf	??___fladd^(0+128),w
 22716  0605  00AA               	movwf	___fladd@bexp^(0+128)
 22717  0606  082B               	movf	___fladd@grs^(0+128),w
 22718  0607  00A0               	movwf	??___fladd^(0+128)
 22719  0608  0820               	movf	??___fladd^(0+128),w
 22720  0609  00A9               	movwf	___fladd@aexp^(0+128)
 22721  060A  0140               	movlb	0	; select bank0
 22722  060B  085F               	movf	___fladd@b,w
 22723  060C  0141               	movlb	1	; select bank1
 22724  060D  00A0               	movwf	??___fladd^(0+128)
 22725  060E  0820               	movf	??___fladd^(0+128),w
 22726  060F  00AB               	movwf	___fladd@grs^(0+128)
 22727  0610  0140               	movlb	0	; select bank0
 22728  0611  0863               	movf	___fladd@a,w
 22729  0612  0141               	movlb	1	; select bank1
 22730  0613  00A0               	movwf	??___fladd^(0+128)
 22731  0614  0820               	movf	??___fladd^(0+128),w
 22732  0615  0140               	movlb	0	; select bank0
 22733  0616  00DF               	movwf	___fladd@b
 22734  0617  0141               	movlb	1	; select bank1
 22735  0618  082B               	movf	___fladd@grs^(0+128),w
 22736  0619  00A0               	movwf	??___fladd^(0+128)
 22737  061A  0820               	movf	??___fladd^(0+128),w
 22738  061B  0140               	movlb	0	; select bank0
 22739  061C  00E3               	movwf	___fladd@a
 22740  061D  0860               	movf	___fladd@b+1,w
 22741  061E  0141               	movlb	1	; select bank1
 22742  061F  00A0               	movwf	??___fladd^(0+128)
 22743  0620  0820               	movf	??___fladd^(0+128),w
 22744  0621  00AB               	movwf	___fladd@grs^(0+128)
 22745  0622  0140               	movlb	0	; select bank0
 22746  0623  0864               	movf	___fladd@a+1,w
 22747  0624  0141               	movlb	1	; select bank1
 22748  0625  00A0               	movwf	??___fladd^(0+128)
 22749  0626  0820               	movf	??___fladd^(0+128),w
 22750  0627  0140               	movlb	0	; select bank0
 22751  0628  00E0               	movwf	___fladd@b+1
 22752  0629  0141               	movlb	1	; select bank1
 22753  062A  082B               	movf	___fladd@grs^(0+128),w
 22754  062B  00A0               	movwf	??___fladd^(0+128)
 22755  062C  0820               	movf	??___fladd^(0+128),w
 22756  062D  0140               	movlb	0	; select bank0
 22757  062E  00E4               	movwf	___fladd@a+1
 22758  062F  0861               	movf	___fladd@b+2,w
 22759  0630  0141               	movlb	1	; select bank1
 22760  0631  00A0               	movwf	??___fladd^(0+128)
 22761  0632  0820               	movf	??___fladd^(0+128),w
 22762  0633  00AB               	movwf	___fladd@grs^(0+128)
 22763  0634  0140               	movlb	0	; select bank0
 22764  0635  0865               	movf	___fladd@a+2,w
 22765  0636  0141               	movlb	1	; select bank1
 22766  0637  00A0               	movwf	??___fladd^(0+128)
 22767  0638  0820               	movf	??___fladd^(0+128),w
 22768  0639  0140               	movlb	0	; select bank0
 22769  063A  00E1               	movwf	___fladd@b+2
 22770  063B  0141               	movlb	1	; select bank1
 22771  063C  082B               	movf	___fladd@grs^(0+128),w
 22772  063D  00A0               	movwf	??___fladd^(0+128)
 22773  063E  0820               	movf	??___fladd^(0+128),w
 22774  063F  0140               	movlb	0	; select bank0
 22775  0640  00E5               	movwf	___fladd@a+2
 22776  0641  0862               	movf	___fladd@b+3,w
 22777  0642  0141               	movlb	1	; select bank1
 22778  0643  00A0               	movwf	??___fladd^(0+128)
 22779  0644  0820               	movf	??___fladd^(0+128),w
 22780  0645  00AB               	movwf	___fladd@grs^(0+128)
 22781  0646  0140               	movlb	0	; select bank0
 22782  0647  0866               	movf	___fladd@a+3,w
 22783  0648  0141               	movlb	1	; select bank1
 22784  0649  00A0               	movwf	??___fladd^(0+128)
 22785  064A  0820               	movf	??___fladd^(0+128),w
 22786  064B  0140               	movlb	0	; select bank0
 22787  064C  00E2               	movwf	___fladd@b+3
 22788  064D  0141               	movlb	1	; select bank1
 22789  064E  082B               	movf	___fladd@grs^(0+128),w
 22790  064F  00A0               	movwf	??___fladd^(0+128)
 22791  0650  0820               	movf	??___fladd^(0+128),w
 22792  0651  0140               	movlb	0	; select bank0
 22793  0652  00E6               	movwf	___fladd@a+3
 22794  0653                     l6876:	
 22795  0653  0141               	movlb	1	; select bank1
 22796  0654  01AB               	clrf	___fladd@grs^(0+128)
 22797  0655  0829               	movf	___fladd@aexp^(0+128),w
 22798  0656  00A0               	movwf	??___fladd^(0+128)
 22799  0657  01A1               	clrf	(??___fladd^(0+128)+1)
 22800  0658  0821               	movf	(??___fladd+1)^(0+128),w
 22801  0659  00A3               	movwf	((??___fladd+2)^(0+128)+1)
 22802  065A  082A               	movf	___fladd@bexp^(0+128),w
 22803  065B  0220               	subwf	??___fladd^(0+128),w
 22804  065C  00A2               	movwf	(??___fladd+2)^(0+128)
 22805  065D  1C03               	skipc
 22806  065E  03A3               	decf	((??___fladd+2)^(0+128)+1),f
 22807  065F  0823               	movf	(??___fladd+3)^(0+128),w
 22808  0660  3A80               	xorlw	128
 22809  0661  00A4               	movwf	(??___fladd+4)^(0+128)
 22810  0662  3080               	movlw	128
 22811  0663  0224               	subwf	(??___fladd+4)^(0+128),w
 22812  0664  1D03               	skipz
 22813  0665  2E68               	goto	u7645
 22814  0666  301A               	movlw	26
 22815  0667  0222               	subwf	(??___fladd+2)^(0+128),w
 22816  0668                     u7645:	
 22817  0668  1C03               	skipc
 22818  0669  2EA5               	goto	l6894
 22819  066A  0140               	movlb	0	; select bank0
 22820  066B  0862               	movf	___fladd@b+3,w
 22821  066C  0461               	iorwf	___fladd@b+2,w
 22822  066D  0460               	iorwf	___fladd@b+1,w
 22823  066E  045F               	iorwf	___fladd@b,w
 22824  066F  1903               	btfsc	3,2
 22825  0670  2E73               	goto	u7650
 22826  0671  3001               	movlw	1
 22827  0672  2E74               	goto	u7660
 22828  0673                     u7650:	
 22829  0673  3000               	movlw	0
 22830  0674                     u7660:	
 22831  0674  0141               	movlb	1	; select bank1
 22832  0675  00A0               	movwf	??___fladd^(0+128)
 22833  0676  0820               	movf	??___fladd^(0+128),w
 22834  0677  00AB               	movwf	___fladd@grs^(0+128)
 22835  0678  3000               	movlw	0
 22836  0679  0140               	movlb	0	; select bank0
 22837  067A  00E2               	movwf	___fladd@b+3
 22838  067B  3000               	movlw	0
 22839  067C  00E1               	movwf	___fladd@b+2
 22840  067D  3000               	movlw	0
 22841  067E  00E0               	movwf	___fladd@b+1
 22842  067F  3000               	movlw	0
 22843  0680  00DF               	movwf	___fladd@b
 22844  0681  0141               	movlb	1	; select bank1
 22845  0682  0829               	movf	___fladd@aexp^(0+128),w
 22846  0683  00A0               	movwf	??___fladd^(0+128)
 22847  0684  0820               	movf	??___fladd^(0+128),w
 22848  0685  00AA               	movwf	___fladd@bexp^(0+128)
 22849  0686  2EAA               	goto	l1345
 22850  0687                     l1347:	
 22851  0687  1C2B               	btfss	___fladd@grs^(0+128),0
 22852  0688  2E8F               	goto	l6884
 22853  0689  362B               	lsrf	___fladd@grs^(0+128),w
 22854  068A  3801               	iorlw	1
 22855  068B  00A0               	movwf	??___fladd^(0+128)
 22856  068C  0820               	movf	??___fladd^(0+128),w
 22857  068D  00AB               	movwf	___fladd@grs^(0+128)
 22858  068E  2E91               	goto	l6886
 22859  068F                     l6884:	
 22860  068F  1003               	clrc
 22861  0690  0CAB               	rrf	___fladd@grs^(0+128),f
 22862  0691                     l6886:	
 22863  0691  0140               	movlb	0	; select bank0
 22864  0692  1C5F               	btfss	___fladd@b,0
 22865  0693  2E96               	goto	l6890
 22866  0694  0141               	movlb	1	; select bank1
 22867  0695  17AB               	bsf	___fladd@grs^(0+128),7
 22868  0696                     l6890:	
 22869  0696  3001               	movlw	1
 22870  0697  0141               	movlb	1	; select bank1
 22871  0698  00A0               	movwf	??___fladd^(0+128)
 22872  0699                     u7695:	
 22873  0699  0140               	movlb	0	; select bank0
 22874  069A  37E2               	asrf	___fladd@b+3,f
 22875  069B  0CE1               	rrf	___fladd@b+2,f
 22876  069C  0CE0               	rrf	___fladd@b+1,f
 22877  069D  0CDF               	rrf	___fladd@b,f
 22878  069E  0141               	movlb	1	; select bank1
 22879  069F  0BA0               	decfsz	(??___fladd^(0+128))& (0+127),f
 22880  06A0  2E99               	goto	u7695
 22881  06A1  3001               	movlw	1
 22882  06A2  00A0               	movwf	??___fladd^(0+128)
 22883  06A3  0820               	movf	??___fladd^(0+128),w
 22884  06A4  07AA               	addwf	___fladd@bexp^(0+128),f
 22885  06A5                     l6894:	
 22886  06A5  0141               	movlb	1	; select bank1
 22887  06A6  0829               	movf	___fladd@aexp^(0+128),w
 22888  06A7  022A               	subwf	___fladd@bexp^(0+128),w
 22889  06A8  1C03               	skipc
 22890  06A9  2E87               	goto	l1347
 22891  06AA                     l1345:	
 22892  06AA  1B28               	btfsc	___fladd@signs^(0+128),6
 22893  06AB  2EE4               	goto	l6920
 22894  06AC  082A               	movf	___fladd@bexp^(0+128),w
 22895  06AD  1D03               	btfss	3,2
 22896  06AE  2EB9               	goto	l6902
 22897  06AF  3000               	movlw	0
 22898  06B0  0140               	movlb	0	; select bank0
 22899  06B1  00E2               	movwf	?___fladd+3
 22900  06B2  3000               	movlw	0
 22901  06B3  00E1               	movwf	?___fladd+2
 22902  06B4  3000               	movlw	0
 22903  06B5  00E0               	movwf	?___fladd+1
 22904  06B6  3000               	movlw	0
 22905  06B7  00DF               	movwf	?___fladd
 22906  06B8  0008               	return
 22907  06B9                     l6902:	
 22908  06B9  0140               	movlb	0	; select bank0
 22909  06BA  0863               	movf	___fladd@a,w
 22910  06BB  07DF               	addwf	___fladd@b,f
 22911  06BC  0864               	movf	___fladd@a+1,w
 22912  06BD  3DE0               	addwfc	___fladd@b+1,f
 22913  06BE  0865               	movf	___fladd@a+2,w
 22914  06BF  3DE1               	addwfc	___fladd@b+2,f
 22915  06C0  0866               	movf	___fladd@a+3,w
 22916  06C1  3DE2               	addwfc	___fladd@b+3,f
 22917  06C2  1C62               	btfss	___fladd@b+3,0
 22918  06C3  2F7D               	goto	l6954
 22919  06C4  0141               	movlb	1	; select bank1
 22920  06C5  1C2B               	btfss	___fladd@grs^(0+128),0
 22921  06C6  2ECD               	goto	l6910
 22922  06C7  362B               	lsrf	___fladd@grs^(0+128),w
 22923  06C8  3801               	iorlw	1
 22924  06C9  00A0               	movwf	??___fladd^(0+128)
 22925  06CA  0820               	movf	??___fladd^(0+128),w
 22926  06CB  00AB               	movwf	___fladd@grs^(0+128)
 22927  06CC  2ECF               	goto	l6912
 22928  06CD                     l6910:	
 22929  06CD  1003               	clrc
 22930  06CE  0CAB               	rrf	___fladd@grs^(0+128),f
 22931  06CF                     l6912:	
 22932  06CF  0140               	movlb	0	; select bank0
 22933  06D0  1C5F               	btfss	___fladd@b,0
 22934  06D1  2ED4               	goto	l6916
 22935  06D2  0141               	movlb	1	; select bank1
 22936  06D3  17AB               	bsf	___fladd@grs^(0+128),7
 22937  06D4                     l6916:	
 22938  06D4  3001               	movlw	1
 22939  06D5  0141               	movlb	1	; select bank1
 22940  06D6  00A0               	movwf	??___fladd^(0+128)
 22941  06D7                     u7765:	
 22942  06D7  0140               	movlb	0	; select bank0
 22943  06D8  37E2               	asrf	___fladd@b+3,f
 22944  06D9  0CE1               	rrf	___fladd@b+2,f
 22945  06DA  0CE0               	rrf	___fladd@b+1,f
 22946  06DB  0CDF               	rrf	___fladd@b,f
 22947  06DC  0141               	movlb	1	; select bank1
 22948  06DD  0BA0               	decfsz	(??___fladd^(0+128))& (0+127),f
 22949  06DE  2ED7               	goto	u7765
 22950  06DF  3001               	movlw	1
 22951  06E0  00A0               	movwf	??___fladd^(0+128)
 22952  06E1  0820               	movf	??___fladd^(0+128),w
 22953  06E2  07AA               	addwf	___fladd@bexp^(0+128),f
 22954  06E3  2F7D               	goto	l6954
 22955  06E4                     l6920:	
 22956  06E4  0140               	movlb	0	; select bank0
 22957  06E5  0862               	movf	___fladd@b+3,w
 22958  06E6  3A80               	xorlw	128
 22959  06E7  0141               	movlb	1	; select bank1
 22960  06E8  00A0               	movwf	??___fladd^(0+128)
 22961  06E9  0140               	movlb	0	; select bank0
 22962  06EA  0866               	movf	___fladd@a+3,w
 22963  06EB  3A80               	xorlw	128
 22964  06EC  0141               	movlb	1	; select bank1
 22965  06ED  0220               	subwf	??___fladd^(0+128),w
 22966  06EE  0140               	movlb	0	; select bank0
 22967  06EF  1D03               	skipz
 22968  06F0  2EFB               	goto	u7773
 22969  06F1  0865               	movf	___fladd@a+2,w
 22970  06F2  0261               	subwf	___fladd@b+2,w
 22971  06F3  1D03               	skipz
 22972  06F4  2EFB               	goto	u7773
 22973  06F5  0864               	movf	___fladd@a+1,w
 22974  06F6  0260               	subwf	___fladd@b+1,w
 22975  06F7  1D03               	skipz
 22976  06F8  2EFB               	goto	u7773
 22977  06F9  0863               	movf	___fladd@a,w
 22978  06FA  025F               	subwf	___fladd@b,w
 22979  06FB                     u7773:	
 22980  06FB  1803               	skipnc
 22981  06FC  2F45               	goto	l6930
 22982  06FD  30FF               	movlw	255
 22983  06FE  0141               	movlb	1	; select bank1
 22984  06FF  00A0               	movwf	??___fladd^(0+128)
 22985  0700  30FF               	movlw	255
 22986  0701  00A1               	movwf	(??___fladd^(0+128)+1)
 22987  0702  30FF               	movlw	255
 22988  0703  00A2               	movwf	(??___fladd^(0+128)+2)
 22989  0704  30FF               	movlw	255
 22990  0705  00A3               	movwf	(??___fladd^(0+128)+3)
 22991  0706  0140               	movlb	0	; select bank0
 22992  0707  085F               	movf	___fladd@b,w
 22993  0708  0263               	subwf	___fladd@a,w
 22994  0709  0141               	movlb	1	; select bank1
 22995  070A  00A4               	movwf	(??___fladd+4)^(0+128)
 22996  070B  0140               	movlb	0	; select bank0
 22997  070C  0860               	movf	___fladd@b+1,w
 22998  070D  3B64               	subwfb	___fladd@a+1,w
 22999  070E  0141               	movlb	1	; select bank1
 23000  070F  00A5               	movwf	((??___fladd+4)^(0+128)+1)
 23001  0710  0140               	movlb	0	; select bank0
 23002  0711  0861               	movf	___fladd@b+2,w
 23003  0712  3B65               	subwfb	___fladd@a+2,w
 23004  0713  0141               	movlb	1	; select bank1
 23005  0714  00A6               	movwf	((??___fladd+4)^(0+128)+2)
 23006  0715  0140               	movlb	0	; select bank0
 23007  0716  0862               	movf	___fladd@b+3,w
 23008  0717  3B66               	subwfb	___fladd@a+3,w
 23009  0718  0141               	movlb	1	; select bank1
 23010  0719  00A7               	movwf	((??___fladd+4)^(0+128)+3)
 23011  071A  0824               	movf	(??___fladd+4)^(0+128),w
 23012  071B  07A0               	addwf	??___fladd^(0+128),f
 23013  071C  0825               	movf	(??___fladd+5)^(0+128),w
 23014  071D  3DA1               	addwfc	(??___fladd^(0+128)+1),f
 23015  071E  0826               	movf	(??___fladd+6)^(0+128),w
 23016  071F  3DA2               	addwfc	(??___fladd^(0+128)+2),f
 23017  0720  0827               	movf	(??___fladd+7)^(0+128),w
 23018  0721  3DA3               	addwfc	(??___fladd^(0+128)+3),f
 23019  0722  0823               	movf	(??___fladd+3)^(0+128),w
 23020  0723  0140               	movlb	0	; select bank0
 23021  0724  00E2               	movwf	___fladd@b+3
 23022  0725  0141               	movlb	1	; select bank1
 23023  0726  0822               	movf	(??___fladd+2)^(0+128),w
 23024  0727  0140               	movlb	0	; select bank0
 23025  0728  00E1               	movwf	___fladd@b+2
 23026  0729  0141               	movlb	1	; select bank1
 23027  072A  0821               	movf	(??___fladd+1)^(0+128),w
 23028  072B  0140               	movlb	0	; select bank0
 23029  072C  00E0               	movwf	___fladd@b+1
 23030  072D  0141               	movlb	1	; select bank1
 23031  072E  0820               	movf	??___fladd^(0+128),w
 23032  072F  0140               	movlb	0	; select bank0
 23033  0730  00DF               	movwf	___fladd@b
 23034  0731  3080               	movlw	128
 23035  0732  0141               	movlb	1	; select bank1
 23036  0733  00A0               	movwf	??___fladd^(0+128)
 23037  0734  0820               	movf	??___fladd^(0+128),w
 23038  0735  06A8               	xorwf	___fladd@signs^(0+128),f
 23039  0736  09AB               	comf	___fladd@grs^(0+128),f
 23040  0737  0AAB               	incf	___fladd@grs^(0+128),f
 23041  0738  082B               	movf	___fladd@grs^(0+128),w
 23042  0739  1D03               	btfss	3,2
 23043  073A  2F4D               	goto	l1362
 23044  073B  3001               	movlw	1
 23045  073C  0140               	movlb	0	; select bank0
 23046  073D  07DF               	addwf	___fladd@b,f
 23047  073E  3000               	movlw	0
 23048  073F  3DE0               	addwfc	___fladd@b+1,f
 23049  0740  3000               	movlw	0
 23050  0741  3DE1               	addwfc	___fladd@b+2,f
 23051  0742  3000               	movlw	0
 23052  0743  3DE2               	addwfc	___fladd@b+3,f
 23053  0744  2F4D               	goto	l1362
 23054  0745                     l6930:	
 23055  0745  0863               	movf	___fladd@a,w
 23056  0746  02DF               	subwf	___fladd@b,f
 23057  0747  0864               	movf	___fladd@a+1,w
 23058  0748  3BE0               	subwfb	___fladd@b+1,f
 23059  0749  0865               	movf	___fladd@a+2,w
 23060  074A  3BE1               	subwfb	___fladd@b+2,f
 23061  074B  0866               	movf	___fladd@a+3,w
 23062  074C  3BE2               	subwfb	___fladd@b+3,f
 23063  074D                     l1362:	
 23064  074D  0140               	movlb	0	; select bank0
 23065  074E  0862               	movf	___fladd@b+3,w
 23066  074F  0461               	iorwf	___fladd@b+2,w
 23067  0750  0460               	iorwf	___fladd@b+1,w
 23068  0751  045F               	iorwf	___fladd@b,w
 23069  0752  1D03               	skipz
 23070  0753  2F7A               	goto	l6952
 23071  0754  0141               	movlb	1	; select bank1
 23072  0755  082B               	movf	___fladd@grs^(0+128),w
 23073  0756  1D03               	btfss	3,2
 23074  0757  2F7A               	goto	l6952
 23075  0758  3000               	movlw	0
 23076  0759  0140               	movlb	0	; select bank0
 23077  075A  00E2               	movwf	?___fladd+3
 23078  075B  3000               	movlw	0
 23079  075C  00E1               	movwf	?___fladd+2
 23080  075D  3000               	movlw	0
 23081  075E  00E0               	movwf	?___fladd+1
 23082  075F  3000               	movlw	0
 23083  0760  00DF               	movwf	?___fladd
 23084  0761  0008               	return
 23085  0762                     l6938:	
 23086  0762  3001               	movlw	1
 23087  0763                     u7815:	
 23088  0763  35DF               	lslf	___fladd@b,f
 23089  0764  0DE0               	rlf	___fladd@b+1,f
 23090  0765  0DE1               	rlf	___fladd@b+2,f
 23091  0766  0DE2               	rlf	___fladd@b+3,f
 23092  0767  0B89               	decfsz	9,f
 23093  0768  2F63               	goto	u7815
 23094  0769  0141               	movlb	1	; select bank1
 23095  076A  1FAB               	btfss	___fladd@grs^(0+128),7
 23096  076B  2F6E               	goto	l1366
 23097  076C  0140               	movlb	0	; select bank0
 23098  076D  145F               	bsf	___fladd@b,0
 23099  076E                     l1366:	
 23100  076E  0141               	movlb	1	; select bank1
 23101  076F  1C2B               	btfss	___fladd@grs^(0+128),0
 23102  0770  2F73               	goto	l6946
 23103  0771  1403               	setc
 23104  0772  2F74               	goto	L13
 23105  0773                     l6946:	
 23106  0773  1003               	clrc
 23107  0774                     L13:	
 23108  0774  0DAB               	rlf	___fladd@grs^(0+128),f
 23109  0775  082A               	movf	___fladd@bexp^(0+128),w
 23110  0776  1903               	btfsc	3,2
 23111  0777  2F7A               	goto	l6952
 23112  0778  3001               	movlw	1
 23113  0779  02AA               	subwf	___fladd@bexp^(0+128),f
 23114  077A                     l6952:	
 23115  077A  0140               	movlb	0	; select bank0
 23116  077B  1FE1               	btfss	___fladd@b+2,7
 23117  077C  2F62               	goto	l6938
 23118  077D                     l6954:	
 23119  077D  0141               	movlb	1	; select bank1
 23120  077E  01A9               	clrf	___fladd@aexp^(0+128)
 23121  077F  1FAB               	btfss	___fladd@grs^(0+128),7
 23122  0780  2F8B               	goto	l6964
 23123  0781  082B               	movf	___fladd@grs^(0+128),w
 23124  0782  397F               	andlw	127
 23125  0783  1D03               	btfss	3,2
 23126  0784  2F88               	goto	l6960
 23127  0785  0140               	movlb	0	; select bank0
 23128  0786  1C5F               	btfss	___fladd@b,0
 23129  0787  2F8B               	goto	l6964
 23130  0788                     l6960:	
 23131  0788  0141               	movlb	1	; select bank1
 23132  0789  01A9               	clrf	___fladd@aexp^(0+128)
 23133  078A  0AA9               	incf	___fladd@aexp^(0+128),f
 23134  078B                     l6964:	
 23135  078B  0141               	movlb	1	; select bank1
 23136  078C  0829               	movf	___fladd@aexp^(0+128),w
 23137  078D  1903               	btfsc	3,2
 23138  078E  2FC8               	goto	l1375
 23139  078F  3001               	movlw	1
 23140  0790  0140               	movlb	0	; select bank0
 23141  0791  07DF               	addwf	___fladd@b,f
 23142  0792  3000               	movlw	0
 23143  0793  3DE0               	addwfc	___fladd@b+1,f
 23144  0794  3000               	movlw	0
 23145  0795  3DE1               	addwfc	___fladd@b+2,f
 23146  0796  3000               	movlw	0
 23147  0797  3DE2               	addwfc	___fladd@b+3,f
 23148  0798  1C62               	btfss	___fladd@b+3,0
 23149  0799  2FC8               	goto	l1375
 23150  079A  085F               	movf	___fladd@b,w
 23151  079B  0141               	movlb	1	; select bank1
 23152  079C  00A0               	movwf	??___fladd^(0+128)
 23153  079D  0140               	movlb	0	; select bank0
 23154  079E  0860               	movf	___fladd@b+1,w
 23155  079F  0141               	movlb	1	; select bank1
 23156  07A0  00A1               	movwf	(??___fladd^(0+128)+1)
 23157  07A1  0140               	movlb	0	; select bank0
 23158  07A2  0861               	movf	___fladd@b+2,w
 23159  07A3  0141               	movlb	1	; select bank1
 23160  07A4  00A2               	movwf	(??___fladd^(0+128)+2)
 23161  07A5  0140               	movlb	0	; select bank0
 23162  07A6  0862               	movf	___fladd@b+3,w
 23163  07A7  0141               	movlb	1	; select bank1
 23164  07A8  00A3               	movwf	(??___fladd^(0+128)+3)
 23165  07A9  3001               	movlw	1
 23166  07AA  00A4               	movwf	(??___fladd+4)^(0+128)
 23167  07AB                     u7915:	
 23168  07AB  37A3               	asrf	(??___fladd^(0+128)+3),f
 23169  07AC  0CA2               	rrf	(??___fladd^(0+128)+2),f
 23170  07AD  0CA1               	rrf	(??___fladd^(0+128)+1),f
 23171  07AE  0CA0               	rrf	??___fladd^(0+128),f
 23172  07AF  0BA4               	decfsz	(??___fladd+4)^(0+128),f
 23173  07B0  2FAB               	goto	u7915
 23174  07B1  0823               	movf	(??___fladd+3)^(0+128),w
 23175  07B2  0140               	movlb	0	; select bank0
 23176  07B3  00E2               	movwf	___fladd@b+3
 23177  07B4  0141               	movlb	1	; select bank1
 23178  07B5  0822               	movf	(??___fladd+2)^(0+128),w
 23179  07B6  0140               	movlb	0	; select bank0
 23180  07B7  00E1               	movwf	___fladd@b+2
 23181  07B8  0141               	movlb	1	; select bank1
 23182  07B9  0821               	movf	(??___fladd+1)^(0+128),w
 23183  07BA  0140               	movlb	0	; select bank0
 23184  07BB  00E0               	movwf	___fladd@b+1
 23185  07BC  0141               	movlb	1	; select bank1
 23186  07BD  0820               	movf	??___fladd^(0+128),w
 23187  07BE  0140               	movlb	0	; select bank0
 23188  07BF  00DF               	movwf	___fladd@b
 23189  07C0  0141               	movlb	1	; select bank1
 23190  07C1  0A2A               	incf	___fladd@bexp^(0+128),w
 23191  07C2  1903               	btfsc	3,2
 23192  07C3  2FC8               	goto	l1375
 23193  07C4  3001               	movlw	1
 23194  07C5  00A0               	movwf	??___fladd^(0+128)
 23195  07C6  0820               	movf	??___fladd^(0+128),w
 23196  07C7  07AA               	addwf	___fladd@bexp^(0+128),f
 23197  07C8                     l1375:	
 23198  07C8  0141               	movlb	1	; select bank1
 23199  07C9  0A2A               	incf	___fladd@bexp^(0+128),w
 23200  07CA  1D03               	btfss	3,2
 23201  07CB  082A               	movf	___fladd@bexp^(0+128),w
 23202  07CC  1D03               	btfss	3,2
 23203  07CD  2FDB               	goto	l6982
 23204  07CE  3000               	movlw	0
 23205  07CF  0140               	movlb	0	; select bank0
 23206  07D0  00E2               	movwf	___fladd@b+3
 23207  07D1  3000               	movlw	0
 23208  07D2  00E1               	movwf	___fladd@b+2
 23209  07D3  3000               	movlw	0
 23210  07D4  00E0               	movwf	___fladd@b+1
 23211  07D5  3000               	movlw	0
 23212  07D6  00DF               	movwf	___fladd@b
 23213  07D7  0141               	movlb	1	; select bank1
 23214  07D8  082A               	movf	___fladd@bexp^(0+128),w
 23215  07D9  1903               	btfsc	3,2
 23216  07DA  01A8               	clrf	___fladd@signs^(0+128)
 23217  07DB                     l6982:	
 23218  07DB  1C2A               	btfss	___fladd@bexp^(0+128),0
 23219  07DC  2FE0               	goto	l6986
 23220  07DD  0140               	movlb	0	; select bank0
 23221  07DE  17E1               	bsf	___fladd@b+2,7
 23222  07DF  2FE5               	goto	l1383
 23223  07E0                     l6986:	
 23224  07E0  307F               	movlw	127
 23225  07E1  00A0               	movwf	??___fladd^(0+128)
 23226  07E2  0820               	movf	??___fladd^(0+128),w
 23227  07E3  0140               	movlb	0	; select bank0
 23228  07E4  05E1               	andwf	___fladd@b+2,f
 23229  07E5                     l1383:	
 23230  07E5  0141               	movlb	1	; select bank1
 23231  07E6  362A               	lsrf	___fladd@bexp^(0+128),w
 23232  07E7  00A0               	movwf	??___fladd^(0+128)
 23233  07E8  0820               	movf	??___fladd^(0+128),w
 23234  07E9  0140               	movlb	0	; select bank0
 23235  07EA  00E2               	movwf	___fladd@b+3
 23236  07EB  0141               	movlb	1	; select bank1
 23237  07EC  1FA8               	btfss	___fladd@signs^(0+128),7
 23238  07ED  0008               	return
 23239  07EE  0140               	movlb	0	; select bank0
 23240  07EF  17E2               	bsf	___fladd@b+3,7
 23241  07F0  0008               	return
 23242  07F1                     __end_of___fladd:	
 23243                           
 23244                           	psect	text68
 23245  11D9                     __ptext68:	
 23246 ;; *************** function ___flmul *****************
 23247 ;; Defined at:
 23248 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 23249 ;; Parameters:    Size  Location     Type
 23250 ;;  b               4   37[BANK0 ] unsigned char 
 23251 ;;  a               4   41[BANK0 ] unsigned char 
 23252 ;; Auto vars:     Size  Location     Type
 23253 ;;  prod            4   57[BANK0 ] struct .
 23254 ;;  grs             4   52[BANK0 ] unsigned long 
 23255 ;;  temp            2   61[BANK0 ] struct .
 23256 ;;  bexp            1   56[BANK0 ] unsigned char 
 23257 ;;  aexp            1   51[BANK0 ] unsigned char 
 23258 ;;  sign            1   50[BANK0 ] unsigned char 
 23259 ;; Return value:  Size  Location     Type
 23260 ;;                  4   37[BANK0 ] unsigned char 
 23261 ;; Registers used:
 23262 ;;		wreg, status,2, status,0, pclath, cstack
 23263 ;; Tracked objects:
 23264 ;;		On entry : 0/0
 23265 ;;		On exit  : 0/0
 23266 ;;		Unchanged: 0/0
 23267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23268 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23269 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23270 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23271 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23272 ;;Total ram usage:       26 bytes
 23273 ;; Hardware stack levels used:    1
 23274 ;; Hardware stack levels required when called:    4
 23275 ;; This function calls:
 23276 ;;		__Umul8_16
 23277 ;; This function is called by:
 23278 ;;		_checkChannelStatus
 23279 ;;		_systemCheck
 23280 ;;		_calcRequiredPower
 23281 ;;		_getAnalogValues
 23282 ;;		_channelThing
 23283 ;;		_ftoa
 23284 ;;		___checkChannelStatus
 23285 ;; This function uses a non-reentrant model
 23286 ;;
 23287                           
 23288                           
 23289                           ;psect for function ___flmul
 23290  11D9                     ___flmul:	
 23291                           
 23292                           ;incstack = 0
 23293                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 23294  11D9  0140               	movlb	0	; select bank0
 23295  11DA  0848               	movf	___flmul@b+3,w
 23296  11DB  3980               	andlw	128
 23297  11DC  00CD               	movwf	??___flmul
 23298  11DD  084D               	movf	??___flmul,w
 23299  11DE  00D2               	movwf	___flmul@sign
 23300  11DF  3548               	lslf	___flmul@b+3,w
 23301  11E0  00CD               	movwf	??___flmul
 23302  11E1  084D               	movf	??___flmul,w
 23303  11E2  00D8               	movwf	___flmul@bexp
 23304  11E3  1BC7               	btfsc	___flmul@b+2,7
 23305  11E4  1458               	bsf	___flmul@bexp,0
 23306  11E5  0858               	movf	___flmul@bexp,w
 23307  11E6  1903               	btfsc	3,2
 23308  11E7  29F5               	goto	l7276
 23309  11E8  0A58               	incf	___flmul@bexp,w
 23310  11E9  1D03               	btfss	3,2
 23311  11EA  29F3               	goto	l7274
 23312  11EB  3000               	movlw	0
 23313  11EC  00C8               	movwf	___flmul@b+3
 23314  11ED  3000               	movlw	0
 23315  11EE  00C7               	movwf	___flmul@b+2
 23316  11EF  3000               	movlw	0
 23317  11F0  00C6               	movwf	___flmul@b+1
 23318  11F1  3000               	movlw	0
 23319  11F2  00C5               	movwf	___flmul@b
 23320  11F3                     l7274:	
 23321  11F3  17C7               	bsf	___flmul@b+2,7
 23322  11F4  29FD               	goto	l7278
 23323  11F5                     l7276:	
 23324  11F5  3000               	movlw	0
 23325  11F6  00C8               	movwf	___flmul@b+3
 23326  11F7  3000               	movlw	0
 23327  11F8  00C7               	movwf	___flmul@b+2
 23328  11F9  3000               	movlw	0
 23329  11FA  00C6               	movwf	___flmul@b+1
 23330  11FB  3000               	movlw	0
 23331  11FC  00C5               	movwf	___flmul@b
 23332  11FD                     l7278:	
 23333  11FD  084C               	movf	___flmul@a+3,w
 23334  11FE  3980               	andlw	128
 23335  11FF  00CD               	movwf	??___flmul
 23336  1200  084D               	movf	??___flmul,w
 23337  1201  06D2               	xorwf	___flmul@sign,f
 23338  1202  354C               	lslf	___flmul@a+3,w
 23339  1203  00CD               	movwf	??___flmul
 23340  1204  084D               	movf	??___flmul,w
 23341  1205  00D3               	movwf	___flmul@aexp
 23342  1206  1BCB               	btfsc	___flmul@a+2,7
 23343  1207  1453               	bsf	___flmul@aexp,0
 23344  1208  0853               	movf	___flmul@aexp,w
 23345  1209  1903               	btfsc	3,2
 23346  120A  2A18               	goto	l7294
 23347  120B  0A53               	incf	___flmul@aexp,w
 23348  120C  1D03               	btfss	3,2
 23349  120D  2A16               	goto	l7292
 23350  120E  3000               	movlw	0
 23351  120F  00CC               	movwf	___flmul@a+3
 23352  1210  3000               	movlw	0
 23353  1211  00CB               	movwf	___flmul@a+2
 23354  1212  3000               	movlw	0
 23355  1213  00CA               	movwf	___flmul@a+1
 23356  1214  3000               	movlw	0
 23357  1215  00C9               	movwf	___flmul@a
 23358  1216                     l7292:	
 23359  1216  17CB               	bsf	___flmul@a+2,7
 23360  1217  2A20               	goto	l7296
 23361  1218                     l7294:	
 23362  1218  3000               	movlw	0
 23363  1219  00CC               	movwf	___flmul@a+3
 23364  121A  3000               	movlw	0
 23365  121B  00CB               	movwf	___flmul@a+2
 23366  121C  3000               	movlw	0
 23367  121D  00CA               	movwf	___flmul@a+1
 23368  121E  3000               	movlw	0
 23369  121F  00C9               	movwf	___flmul@a
 23370  1220                     l7296:	
 23371  1220  0853               	movf	___flmul@aexp,w
 23372  1221  1D03               	btfss	3,2
 23373  1222  0858               	movf	___flmul@bexp,w
 23374  1223  1D03               	btfss	3,2
 23375  1224  2A2E               	goto	l7304
 23376  1225  3000               	movlw	0
 23377  1226  00C8               	movwf	?___flmul+3
 23378  1227  3000               	movlw	0
 23379  1228  00C7               	movwf	?___flmul+2
 23380  1229  3000               	movlw	0
 23381  122A  00C6               	movwf	?___flmul+1
 23382  122B  3000               	movlw	0
 23383  122C  00C5               	movwf	?___flmul
 23384  122D  0008               	return
 23385  122E                     l7304:	
 23386  122E  0845               	movf	___flmul@b,w
 23387  122F  00CD               	movwf	??___flmul
 23388  1230  084D               	movf	??___flmul,w
 23389  1231  00A4               	movwf	__Umul8_16@multiplicand
 23390  1232  084B               	movf	___flmul@a+2,w
 23391  1233  31B2  2205  3191   	fcall	__Umul8_16
 23392  1236  0140               	movlb	0	; select bank0
 23393  1237  0825               	movf	?__Umul8_16+1,w
 23394  1238  00DE               	movwf	___flmul@temp+1
 23395  1239  0824               	movf	?__Umul8_16,w
 23396  123A  00DD               	movwf	___flmul@temp
 23397  123B  085D               	movf	___flmul@temp,w
 23398  123C  00CD               	movwf	??___flmul
 23399  123D  01CE               	clrf	??___flmul+1
 23400  123E  01CF               	clrf	??___flmul+2
 23401  123F  01D0               	clrf	??___flmul+3
 23402  1240  0850               	movf	??___flmul+3,w
 23403  1241  00D7               	movwf	___flmul@grs+3
 23404  1242  084F               	movf	??___flmul+2,w
 23405  1243  00D6               	movwf	___flmul@grs+2
 23406  1244  084E               	movf	??___flmul+1,w
 23407  1245  00D5               	movwf	___flmul@grs+1
 23408  1246  084D               	movf	??___flmul,w
 23409  1247  00D4               	movwf	___flmul@grs
 23410  1248  085E               	movf	___flmul@temp+1,w
 23411  1249  00CD               	movwf	??___flmul
 23412  124A  01CE               	clrf	??___flmul+1
 23413  124B  01CF               	clrf	??___flmul+2
 23414  124C  01D0               	clrf	??___flmul+3
 23415  124D  0850               	movf	??___flmul+3,w
 23416  124E  00DC               	movwf	___flmul@prod+3
 23417  124F  084F               	movf	??___flmul+2,w
 23418  1250  00DB               	movwf	___flmul@prod+2
 23419  1251  084E               	movf	??___flmul+1,w
 23420  1252  00DA               	movwf	___flmul@prod+1
 23421  1253  084D               	movf	??___flmul,w
 23422  1254  00D9               	movwf	___flmul@prod
 23423  1255  0846               	movf	___flmul@b+1,w
 23424  1256  00CD               	movwf	??___flmul
 23425  1257  084D               	movf	??___flmul,w
 23426  1258  00A4               	movwf	__Umul8_16@multiplicand
 23427  1259  084A               	movf	___flmul@a+1,w
 23428  125A  31B2  2205  3191   	fcall	__Umul8_16
 23429  125D  0140               	movlb	0	; select bank0
 23430  125E  0825               	movf	?__Umul8_16+1,w
 23431  125F  00DE               	movwf	___flmul@temp+1
 23432  1260  0824               	movf	?__Umul8_16,w
 23433  1261  00DD               	movwf	___flmul@temp
 23434  1262  085D               	movf	___flmul@temp,w
 23435  1263  00CD               	movwf	??___flmul
 23436  1264  01CE               	clrf	??___flmul+1
 23437  1265  01CF               	clrf	??___flmul+2
 23438  1266  01D0               	clrf	??___flmul+3
 23439  1267  084D               	movf	??___flmul,w
 23440  1268  07D4               	addwf	___flmul@grs,f
 23441  1269  084E               	movf	??___flmul+1,w
 23442  126A  3DD5               	addwfc	___flmul@grs+1,f
 23443  126B  084F               	movf	??___flmul+2,w
 23444  126C  3DD6               	addwfc	___flmul@grs+2,f
 23445  126D  0850               	movf	??___flmul+3,w
 23446  126E  3DD7               	addwfc	___flmul@grs+3,f
 23447  126F  085E               	movf	___flmul@temp+1,w
 23448  1270  00CD               	movwf	??___flmul
 23449  1271  01CE               	clrf	??___flmul+1
 23450  1272  01CF               	clrf	??___flmul+2
 23451  1273  01D0               	clrf	??___flmul+3
 23452  1274  084D               	movf	??___flmul,w
 23453  1275  07D9               	addwf	___flmul@prod,f
 23454  1276  084E               	movf	??___flmul+1,w
 23455  1277  3DDA               	addwfc	___flmul@prod+1,f
 23456  1278  084F               	movf	??___flmul+2,w
 23457  1279  3DDB               	addwfc	___flmul@prod+2,f
 23458  127A  0850               	movf	??___flmul+3,w
 23459  127B  3DDC               	addwfc	___flmul@prod+3,f
 23460  127C  0847               	movf	___flmul@b+2,w
 23461  127D  00CD               	movwf	??___flmul
 23462  127E  084D               	movf	??___flmul,w
 23463  127F  00A4               	movwf	__Umul8_16@multiplicand
 23464  1280  0849               	movf	___flmul@a,w
 23465  1281  31B2  2205  3191   	fcall	__Umul8_16
 23466  1284  0140               	movlb	0	; select bank0
 23467  1285  0825               	movf	?__Umul8_16+1,w
 23468  1286  00DE               	movwf	___flmul@temp+1
 23469  1287  0824               	movf	?__Umul8_16,w
 23470  1288  00DD               	movwf	___flmul@temp
 23471  1289  085D               	movf	___flmul@temp,w
 23472  128A  00CD               	movwf	??___flmul
 23473  128B  01CE               	clrf	??___flmul+1
 23474  128C  01CF               	clrf	??___flmul+2
 23475  128D  01D0               	clrf	??___flmul+3
 23476  128E  084D               	movf	??___flmul,w
 23477  128F  07D4               	addwf	___flmul@grs,f
 23478  1290  084E               	movf	??___flmul+1,w
 23479  1291  3DD5               	addwfc	___flmul@grs+1,f
 23480  1292  084F               	movf	??___flmul+2,w
 23481  1293  3DD6               	addwfc	___flmul@grs+2,f
 23482  1294  0850               	movf	??___flmul+3,w
 23483  1295  3DD7               	addwfc	___flmul@grs+3,f
 23484  1296  085E               	movf	___flmul@temp+1,w
 23485  1297  00CD               	movwf	??___flmul
 23486  1298  01CE               	clrf	??___flmul+1
 23487  1299  01CF               	clrf	??___flmul+2
 23488  129A  01D0               	clrf	??___flmul+3
 23489  129B  084D               	movf	??___flmul,w
 23490  129C  07D9               	addwf	___flmul@prod,f
 23491  129D  084E               	movf	??___flmul+1,w
 23492  129E  3DDA               	addwfc	___flmul@prod+1,f
 23493  129F  084F               	movf	??___flmul+2,w
 23494  12A0  3DDB               	addwfc	___flmul@prod+2,f
 23495  12A1  0850               	movf	??___flmul+3,w
 23496  12A2  3DDC               	addwfc	___flmul@prod+3,f
 23497  12A3  3008               	movlw	8
 23498  12A4                     u8645:	
 23499  12A4  35D4               	lslf	___flmul@grs,f
 23500  12A5  0DD5               	rlf	___flmul@grs+1,f
 23501  12A6  0DD6               	rlf	___flmul@grs+2,f
 23502  12A7  0DD7               	rlf	___flmul@grs+3,f
 23503  12A8  0B89               	decfsz	9,f
 23504  12A9  2AA4               	goto	u8645
 23505  12AA  0846               	movf	___flmul@b+1,w
 23506  12AB  00CD               	movwf	??___flmul
 23507  12AC  084D               	movf	??___flmul,w
 23508  12AD  00A4               	movwf	__Umul8_16@multiplicand
 23509  12AE  0849               	movf	___flmul@a,w
 23510  12AF  31B2  2205  3191   	fcall	__Umul8_16
 23511  12B2  0140               	movlb	0	; select bank0
 23512  12B3  0825               	movf	?__Umul8_16+1,w
 23513  12B4  00DE               	movwf	___flmul@temp+1
 23514  12B5  0824               	movf	?__Umul8_16,w
 23515  12B6  00DD               	movwf	___flmul@temp
 23516  12B7  085D               	movf	___flmul@temp,w
 23517  12B8  07D4               	addwf	___flmul@grs,f
 23518  12B9  085E               	movf	___flmul@temp+1,w
 23519  12BA  3DD5               	addwfc	___flmul@grs+1,f
 23520  12BB  3000               	movlw	0
 23521  12BC  3DD6               	addwfc	___flmul@grs+2,f
 23522  12BD  3DD7               	addwfc	___flmul@grs+3,f
 23523  12BE  0845               	movf	___flmul@b,w
 23524  12BF  00CD               	movwf	??___flmul
 23525  12C0  084D               	movf	??___flmul,w
 23526  12C1  00A4               	movwf	__Umul8_16@multiplicand
 23527  12C2  084A               	movf	___flmul@a+1,w
 23528  12C3  31B2  2205  3191   	fcall	__Umul8_16
 23529  12C6  0140               	movlb	0	; select bank0
 23530  12C7  0825               	movf	?__Umul8_16+1,w
 23531  12C8  00DE               	movwf	___flmul@temp+1
 23532  12C9  0824               	movf	?__Umul8_16,w
 23533  12CA  00DD               	movwf	___flmul@temp
 23534  12CB  085D               	movf	___flmul@temp,w
 23535  12CC  07D4               	addwf	___flmul@grs,f
 23536  12CD  085E               	movf	___flmul@temp+1,w
 23537  12CE  3DD5               	addwfc	___flmul@grs+1,f
 23538  12CF  3000               	movlw	0
 23539  12D0  3DD6               	addwfc	___flmul@grs+2,f
 23540  12D1  3DD7               	addwfc	___flmul@grs+3,f
 23541  12D2  3008               	movlw	8
 23542  12D3                     u8655:	
 23543  12D3  35D4               	lslf	___flmul@grs,f
 23544  12D4  0DD5               	rlf	___flmul@grs+1,f
 23545  12D5  0DD6               	rlf	___flmul@grs+2,f
 23546  12D6  0DD7               	rlf	___flmul@grs+3,f
 23547  12D7  0B89               	decfsz	9,f
 23548  12D8  2AD3               	goto	u8655
 23549  12D9  0845               	movf	___flmul@b,w
 23550  12DA  00CD               	movwf	??___flmul
 23551  12DB  084D               	movf	??___flmul,w
 23552  12DC  00A4               	movwf	__Umul8_16@multiplicand
 23553  12DD  0849               	movf	___flmul@a,w
 23554  12DE  31B2  2205  3191   	fcall	__Umul8_16
 23555  12E1  0140               	movlb	0	; select bank0
 23556  12E2  0825               	movf	?__Umul8_16+1,w
 23557  12E3  00DE               	movwf	___flmul@temp+1
 23558  12E4  0824               	movf	?__Umul8_16,w
 23559  12E5  00DD               	movwf	___flmul@temp
 23560  12E6  085D               	movf	___flmul@temp,w
 23561  12E7  07D4               	addwf	___flmul@grs,f
 23562  12E8  085E               	movf	___flmul@temp+1,w
 23563  12E9  3DD5               	addwfc	___flmul@grs+1,f
 23564  12EA  3000               	movlw	0
 23565  12EB  3DD6               	addwfc	___flmul@grs+2,f
 23566  12EC  3DD7               	addwfc	___flmul@grs+3,f
 23567  12ED  0846               	movf	___flmul@b+1,w
 23568  12EE  00CD               	movwf	??___flmul
 23569  12EF  084D               	movf	??___flmul,w
 23570  12F0  00A4               	movwf	__Umul8_16@multiplicand
 23571  12F1  084B               	movf	___flmul@a+2,w
 23572  12F2  31B2  2205  3191   	fcall	__Umul8_16
 23573  12F5  0140               	movlb	0	; select bank0
 23574  12F6  0825               	movf	?__Umul8_16+1,w
 23575  12F7  00DE               	movwf	___flmul@temp+1
 23576  12F8  0824               	movf	?__Umul8_16,w
 23577  12F9  00DD               	movwf	___flmul@temp
 23578  12FA  085D               	movf	___flmul@temp,w
 23579  12FB  07D9               	addwf	___flmul@prod,f
 23580  12FC  085E               	movf	___flmul@temp+1,w
 23581  12FD  3DDA               	addwfc	___flmul@prod+1,f
 23582  12FE  3000               	movlw	0
 23583  12FF  3DDB               	addwfc	___flmul@prod+2,f
 23584  1300  3DDC               	addwfc	___flmul@prod+3,f
 23585  1301  0847               	movf	___flmul@b+2,w
 23586  1302  00CD               	movwf	??___flmul
 23587  1303  084D               	movf	??___flmul,w
 23588  1304  00A4               	movwf	__Umul8_16@multiplicand
 23589  1305  084A               	movf	___flmul@a+1,w
 23590  1306  31B2  2205  3191   	fcall	__Umul8_16
 23591  1309  0140               	movlb	0	; select bank0
 23592  130A  0825               	movf	?__Umul8_16+1,w
 23593  130B  00DE               	movwf	___flmul@temp+1
 23594  130C  0824               	movf	?__Umul8_16,w
 23595  130D  00DD               	movwf	___flmul@temp
 23596  130E  085D               	movf	___flmul@temp,w
 23597  130F  07D9               	addwf	___flmul@prod,f
 23598  1310  085E               	movf	___flmul@temp+1,w
 23599  1311  3DDA               	addwfc	___flmul@prod+1,f
 23600  1312  3000               	movlw	0
 23601  1313  3DDB               	addwfc	___flmul@prod+2,f
 23602  1314  3DDC               	addwfc	___flmul@prod+3,f
 23603  1315  0847               	movf	___flmul@b+2,w
 23604  1316  00CD               	movwf	??___flmul
 23605  1317  084D               	movf	??___flmul,w
 23606  1318  00A4               	movwf	__Umul8_16@multiplicand
 23607  1319  084B               	movf	___flmul@a+2,w
 23608  131A  31B2  2205  3191   	fcall	__Umul8_16
 23609  131D  0140               	movlb	0	; select bank0
 23610  131E  0825               	movf	?__Umul8_16+1,w
 23611  131F  00DE               	movwf	___flmul@temp+1
 23612  1320  0824               	movf	?__Umul8_16,w
 23613  1321  00DD               	movwf	___flmul@temp
 23614  1322  085D               	movf	___flmul@temp,w
 23615  1323  00CD               	movwf	??___flmul
 23616  1324  085E               	movf	___flmul@temp+1,w
 23617  1325  00CE               	movwf	??___flmul+1
 23618  1326  01CF               	clrf	??___flmul+2
 23619  1327  01D0               	clrf	??___flmul+3
 23620  1328  3008               	movlw	8
 23621  1329                     u8665:	
 23622  1329  35CD               	lslf	??___flmul,f
 23623  132A  0DCE               	rlf	??___flmul+1,f
 23624  132B  0DCF               	rlf	??___flmul+2,f
 23625  132C  0DD0               	rlf	??___flmul+3,f
 23626  132D  0B89               	decfsz	9,f
 23627  132E  2B29               	goto	u8665
 23628  132F  084D               	movf	??___flmul,w
 23629  1330  07D9               	addwf	___flmul@prod,f
 23630  1331  084E               	movf	??___flmul+1,w
 23631  1332  3DDA               	addwfc	___flmul@prod+1,f
 23632  1333  084F               	movf	??___flmul+2,w
 23633  1334  3DDB               	addwfc	___flmul@prod+2,f
 23634  1335  0850               	movf	??___flmul+3,w
 23635  1336  3DDC               	addwfc	___flmul@prod+3,f
 23636  1337  0854               	movf	___flmul@grs,w
 23637  1338  00CD               	movwf	??___flmul
 23638  1339  0855               	movf	___flmul@grs+1,w
 23639  133A  00CE               	movwf	??___flmul+1
 23640  133B  0856               	movf	___flmul@grs+2,w
 23641  133C  00CF               	movwf	??___flmul+2
 23642  133D  0857               	movf	___flmul@grs+3,w
 23643  133E  00D0               	movwf	??___flmul+3
 23644  133F  3018               	movlw	24
 23645  1340                     u8675:	
 23646  1340  36D0               	lsrf	??___flmul+3,f
 23647  1341  0CCF               	rrf	??___flmul+2,f
 23648  1342  0CCE               	rrf	??___flmul+1,f
 23649  1343  0CCD               	rrf	??___flmul,f
 23650  1344  0B89               	decfsz	9,f
 23651  1345  2B40               	goto	u8675
 23652  1346  084D               	movf	??___flmul,w
 23653  1347  07D9               	addwf	___flmul@prod,f
 23654  1348  084E               	movf	??___flmul+1,w
 23655  1349  3DDA               	addwfc	___flmul@prod+1,f
 23656  134A  084F               	movf	??___flmul+2,w
 23657  134B  3DDB               	addwfc	___flmul@prod+2,f
 23658  134C  0850               	movf	??___flmul+3,w
 23659  134D  3DDC               	addwfc	___flmul@prod+3,f
 23660  134E  3008               	movlw	8
 23661  134F                     u8685:	
 23662  134F  35D4               	lslf	___flmul@grs,f
 23663  1350  0DD5               	rlf	___flmul@grs+1,f
 23664  1351  0DD6               	rlf	___flmul@grs+2,f
 23665  1352  0DD7               	rlf	___flmul@grs+3,f
 23666  1353  0B89               	decfsz	9,f
 23667  1354  2B4F               	goto	u8685
 23668  1355  0858               	movf	___flmul@bexp,w
 23669  1356  0753               	addwf	___flmul@aexp,w
 23670  1357  00CD               	movwf	??___flmul
 23671  1358  01CE               	clrf	??___flmul+1
 23672  1359  0DCE               	rlf	??___flmul+1,f
 23673  135A  084D               	movf	??___flmul,w
 23674  135B  3E82               	addlw	130
 23675  135C  00DD               	movwf	___flmul@temp
 23676  135D  30FF               	movlw	255
 23677  135E  3D4E               	addwfc	??___flmul+1,w
 23678  135F  00DE               	movwf	___flmul@temp+1
 23679  1360                     l7356:	
 23680  1360  1BDB               	btfsc	___flmul@prod+2,7
 23681  1361  2B77               	goto	l7358
 23682  1362  3001               	movlw	1
 23683  1363                     u8695:	
 23684  1363  35D9               	lslf	___flmul@prod,f
 23685  1364  0DDA               	rlf	___flmul@prod+1,f
 23686  1365  0DDB               	rlf	___flmul@prod+2,f
 23687  1366  0DDC               	rlf	___flmul@prod+3,f
 23688  1367  0B89               	decfsz	9,f
 23689  1368  2B63               	goto	u8695
 23690  1369  1BD7               	btfsc	___flmul@grs+3,7
 23691  136A  1459               	bsf	___flmul@prod,0
 23692  136B  3001               	movlw	1
 23693  136C                     u8715:	
 23694  136C  35D4               	lslf	___flmul@grs,f
 23695  136D  0DD5               	rlf	___flmul@grs+1,f
 23696  136E  0DD6               	rlf	___flmul@grs+2,f
 23697  136F  0DD7               	rlf	___flmul@grs+3,f
 23698  1370  0B89               	decfsz	9,f
 23699  1371  2B6C               	goto	u8715
 23700  1372  30FF               	movlw	255
 23701  1373  07DD               	addwf	___flmul@temp,f
 23702  1374  30FF               	movlw	255
 23703  1375  3DDE               	addwfc	___flmul@temp+1,f
 23704  1376  2B60               	goto	l7356
 23705  1377                     l7358:	
 23706  1377  01D3               	clrf	___flmul@aexp
 23707  1378  1FD7               	btfss	___flmul@grs+3,7
 23708  1379  2B90               	goto	l7368
 23709  137A  30FF               	movlw	255
 23710  137B  0554               	andwf	___flmul@grs,w
 23711  137C  00CD               	movwf	??___flmul
 23712  137D  30FF               	movlw	255
 23713  137E  0555               	andwf	___flmul@grs+1,w
 23714  137F  00CE               	movwf	??___flmul+1
 23715  1380  30FF               	movlw	255
 23716  1381  0556               	andwf	___flmul@grs+2,w
 23717  1382  00CF               	movwf	??___flmul+2
 23718  1383  307F               	movlw	127
 23719  1384  0557               	andwf	___flmul@grs+3,w
 23720  1385  00D0               	movwf	??___flmul+3
 23721  1386  0850               	movf	??___flmul+3,w
 23722  1387  044F               	iorwf	??___flmul+2,w
 23723  1388  044E               	iorwf	??___flmul+1,w
 23724  1389  044D               	iorwf	??___flmul,w
 23725  138A  1903               	skipnz
 23726  138B  1859               	btfsc	___flmul@prod,0
 23727  138C  2B8E               	goto	l7364
 23728  138D  2B90               	goto	l7368
 23729  138E                     l7364:	
 23730  138E  01D3               	clrf	___flmul@aexp
 23731  138F  0AD3               	incf	___flmul@aexp,f
 23732  1390                     l7368:	
 23733  1390  0853               	movf	___flmul@aexp,w
 23734  1391  1903               	btfsc	3,2
 23735  1392  2BB9               	goto	l7378
 23736  1393  3001               	movlw	1
 23737  1394  07D9               	addwf	___flmul@prod,f
 23738  1395  3000               	movlw	0
 23739  1396  3DDA               	addwfc	___flmul@prod+1,f
 23740  1397  3000               	movlw	0
 23741  1398  3DDB               	addwfc	___flmul@prod+2,f
 23742  1399  3000               	movlw	0
 23743  139A  3DDC               	addwfc	___flmul@prod+3,f
 23744  139B  1C5C               	btfss	___flmul@prod+3,0
 23745  139C  2BB9               	goto	l7378
 23746  139D  0859               	movf	___flmul@prod,w
 23747  139E  00CD               	movwf	??___flmul
 23748  139F  085A               	movf	___flmul@prod+1,w
 23749  13A0  00CE               	movwf	??___flmul+1
 23750  13A1  085B               	movf	___flmul@prod+2,w
 23751  13A2  00CF               	movwf	??___flmul+2
 23752  13A3  085C               	movf	___flmul@prod+3,w
 23753  13A4  00D0               	movwf	??___flmul+3
 23754  13A5  3001               	movlw	1
 23755  13A6  00D1               	movwf	??___flmul+4
 23756  13A7                     u8785:	
 23757  13A7  37D0               	asrf	??___flmul+3,f
 23758  13A8  0CCF               	rrf	??___flmul+2,f
 23759  13A9  0CCE               	rrf	??___flmul+1,f
 23760  13AA  0CCD               	rrf	??___flmul,f
 23761  13AB  0BD1               	decfsz	??___flmul+4,f
 23762  13AC  2BA7               	goto	u8785
 23763  13AD  0850               	movf	??___flmul+3,w
 23764  13AE  00DC               	movwf	___flmul@prod+3
 23765  13AF  084F               	movf	??___flmul+2,w
 23766  13B0  00DB               	movwf	___flmul@prod+2
 23767  13B1  084E               	movf	??___flmul+1,w
 23768  13B2  00DA               	movwf	___flmul@prod+1
 23769  13B3  084D               	movf	??___flmul,w
 23770  13B4  00D9               	movwf	___flmul@prod
 23771  13B5  3001               	movlw	1
 23772  13B6  07DD               	addwf	___flmul@temp,f
 23773  13B7  3000               	movlw	0
 23774  13B8  3DDE               	addwfc	___flmul@temp+1,f
 23775  13B9                     l7378:	
 23776  13B9  085E               	movf	___flmul@temp+1,w
 23777  13BA  3A80               	xorlw	128
 23778  13BB  00CD               	movwf	??___flmul
 23779  13BC  3080               	movlw	128
 23780  13BD  024D               	subwf	??___flmul,w
 23781  13BE  1D03               	skipz
 23782  13BF  2BC2               	goto	u8795
 23783  13C0  30FF               	movlw	255
 23784  13C1  025D               	subwf	___flmul@temp,w
 23785  13C2                     u8795:	
 23786  13C2  1C03               	skipc
 23787  13C3  2BCE               	goto	l7382
 23788  13C4  307F               	movlw	127
 23789  13C5  0140               	movlb	0	; select bank0
 23790  13C6  00DC               	movwf	___flmul@prod+3
 23791  13C7  3080               	movlw	128
 23792  13C8  00DB               	movwf	___flmul@prod+2
 23793  13C9  3000               	movlw	0
 23794  13CA  00DA               	movwf	___flmul@prod+1
 23795  13CB  3000               	movlw	0
 23796  13CC  00D9               	movwf	___flmul@prod
 23797  13CD  2BF8               	goto	l1449
 23798  13CE                     l7382:	
 23799  13CE  0140               	movlb	0	; select bank0
 23800  13CF  085E               	movf	___flmul@temp+1,w
 23801  13D0  3A80               	xorlw	128
 23802  13D1  00CD               	movwf	??___flmul
 23803  13D2  3080               	movlw	128
 23804  13D3  024D               	subwf	??___flmul,w
 23805  13D4  1D03               	skipz
 23806  13D5  2BD8               	goto	u8805
 23807  13D6  3001               	movlw	1
 23808  13D7  025D               	subwf	___flmul@temp,w
 23809  13D8                     u8805:	
 23810  13D8  1803               	skipnc
 23811  13D9  2BE5               	goto	l7388
 23812  13DA  3000               	movlw	0
 23813  13DB  0140               	movlb	0	; select bank0
 23814  13DC  00DC               	movwf	___flmul@prod+3
 23815  13DD  3000               	movlw	0
 23816  13DE  00DB               	movwf	___flmul@prod+2
 23817  13DF  3000               	movlw	0
 23818  13E0  00DA               	movwf	___flmul@prod+1
 23819  13E1  3000               	movlw	0
 23820  13E2  00D9               	movwf	___flmul@prod
 23821  13E3  01D2               	clrf	___flmul@sign
 23822  13E4  2BF8               	goto	l1449
 23823  13E5                     l7388:	
 23824  13E5  0140               	movlb	0	; select bank0
 23825  13E6  085D               	movf	___flmul@temp,w
 23826  13E7  00CD               	movwf	??___flmul
 23827  13E8  084D               	movf	??___flmul,w
 23828  13E9  00D8               	movwf	___flmul@bexp
 23829  13EA  30FF               	movlw	255
 23830  13EB  05D9               	andwf	___flmul@prod,f
 23831  13EC  30FF               	movlw	255
 23832  13ED  05DA               	andwf	___flmul@prod+1,f
 23833  13EE  307F               	movlw	127
 23834  13EF  05DB               	andwf	___flmul@prod+2,f
 23835  13F0  3000               	movlw	0
 23836  13F1  05DC               	andwf	___flmul@prod+3,f
 23837  13F2  1858               	btfsc	___flmul@bexp,0
 23838  13F3  17DB               	bsf	___flmul@prod+2,7
 23839  13F4  3658               	lsrf	___flmul@bexp,w
 23840  13F5  00CD               	movwf	??___flmul
 23841  13F6  084D               	movf	??___flmul,w
 23842  13F7  00DC               	movwf	___flmul@prod+3
 23843  13F8                     l1449:	
 23844  13F8  0852               	movf	___flmul@sign,w
 23845  13F9  00CD               	movwf	??___flmul
 23846  13FA  084D               	movf	??___flmul,w
 23847  13FB  04DC               	iorwf	___flmul@prod+3,f
 23848  13FC  085C               	movf	___flmul@prod+3,w
 23849  13FD  00C8               	movwf	?___flmul+3
 23850  13FE  085B               	movf	___flmul@prod+2,w
 23851  13FF  00C7               	movwf	?___flmul+2
 23852  1400  085A               	movf	___flmul@prod+1,w
 23853  1401  00C6               	movwf	?___flmul+1
 23854  1402  0859               	movf	___flmul@prod,w
 23855  1403  00C5               	movwf	?___flmul
 23856  1404  0008               	return
 23857  1405                     __end_of___flmul:	
 23858                           
 23859                           	psect	text69
 23860  3205                     __ptext69:	
 23861 ;; *************** function __Umul8_16 *****************
 23862 ;; Defined at:
 23863 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 23864 ;; Parameters:    Size  Location     Type
 23865 ;;  multiplier      1    wreg     unsigned char 
 23866 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 23867 ;; Auto vars:     Size  Location     Type
 23868 ;;  multiplier      1   12[BANK0 ] unsigned char 
 23869 ;;  word_mpld       2   10[BANK0 ] unsigned int 
 23870 ;;  product         2    8[BANK0 ] unsigned int 
 23871 ;; Return value:  Size  Location     Type
 23872 ;;                  2    4[BANK0 ] unsigned int 
 23873 ;; Registers used:
 23874 ;;		wreg, status,2, status,0
 23875 ;; Tracked objects:
 23876 ;;		On entry : 0/0
 23877 ;;		On exit  : 0/0
 23878 ;;		Unchanged: 0/0
 23879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23880 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23881 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23882 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23883 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23884 ;;Total ram usage:        9 bytes
 23885 ;; Hardware stack levels used:    1
 23886 ;; Hardware stack levels required when called:    3
 23887 ;; This function calls:
 23888 ;;		Nothing
 23889 ;; This function is called by:
 23890 ;;		___flmul
 23891 ;; This function uses a non-reentrant model
 23892 ;;
 23893                           
 23894                           
 23895                           ;psect for function __Umul8_16
 23896  3205                     __Umul8_16:	
 23897                           
 23898                           ;incstack = 0
 23899                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 23900                           ;__Umul8_16@multiplier stored from wreg
 23901  3205  0140               	movlb	0	; select bank0
 23902  3206  00AC               	movwf	__Umul8_16@multiplier
 23903  3207  01A8               	clrf	__Umul8_16@product
 23904  3208  01A9               	clrf	__Umul8_16@product+1
 23905  3209  0824               	movf	__Umul8_16@multiplicand,w
 23906  320A  00A6               	movwf	??__Umul8_16
 23907  320B  01A7               	clrf	??__Umul8_16+1
 23908  320C  0826               	movf	??__Umul8_16,w
 23909  320D  00AA               	movwf	__Umul8_16@word_mpld
 23910  320E  0827               	movf	??__Umul8_16+1,w
 23911  320F  00AB               	movwf	__Umul8_16@word_mpld+1
 23912  3210                     l6996:	
 23913  3210  1C2C               	btfss	__Umul8_16@multiplier,0
 23914  3211  2A16               	goto	l1534
 23915  3212  082A               	movf	__Umul8_16@word_mpld,w
 23916  3213  07A8               	addwf	__Umul8_16@product,f
 23917  3214  082B               	movf	__Umul8_16@word_mpld+1,w
 23918  3215  3DA9               	addwfc	__Umul8_16@product+1,f
 23919  3216                     l1534:	
 23920  3216  3001               	movlw	1
 23921  3217                     u7995:	
 23922  3217  35AA               	lslf	__Umul8_16@word_mpld,f
 23923  3218  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 23924  3219  0B89               	decfsz	9,f
 23925  321A  2A17               	goto	u7995
 23926  321B  1003               	clrc
 23927  321C  0CAC               	rrf	__Umul8_16@multiplier,f
 23928  321D  082C               	movf	__Umul8_16@multiplier,w
 23929  321E  1D03               	btfss	3,2
 23930  321F  2A10               	goto	l6996
 23931  3220  0829               	movf	__Umul8_16@product+1,w
 23932  3221  00A5               	movwf	?__Umul8_16+1
 23933  3222  0828               	movf	__Umul8_16@product,w
 23934  3223  00A4               	movwf	?__Umul8_16
 23935  3224  0008               	return
 23936  3225                     __end_of__Umul8_16:	
 23937                           
 23938                           	psect	text70
 23939  1007                     __ptext70:	
 23940 ;; *************** function ___fldiv *****************
 23941 ;; Defined at:
 23942 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 23943 ;; Parameters:    Size  Location     Type
 23944 ;;  a               4   63[BANK0 ] unsigned int 
 23945 ;;  b               4   67[BANK0 ] unsigned int 
 23946 ;; Auto vars:     Size  Location     Type
 23947 ;;  grs             4   12[BANK1 ] unsigned long 
 23948 ;;  rem             4    5[BANK1 ] unsigned long 
 23949 ;;  new_exp         2   10[BANK1 ] int 
 23950 ;;  aexp            1   17[BANK1 ] unsigned char 
 23951 ;;  bexp            1   16[BANK1 ] unsigned char 
 23952 ;;  sign            1    9[BANK1 ] unsigned char 
 23953 ;; Return value:  Size  Location     Type
 23954 ;;                  4   63[BANK0 ] unsigned char 
 23955 ;; Registers used:
 23956 ;;		wreg, status,2, status,0
 23957 ;; Tracked objects:
 23958 ;;		On entry : 0/0
 23959 ;;		On exit  : 0/0
 23960 ;;		Unchanged: 0/0
 23961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23962 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23963 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23964 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23965 ;;      Totals:         0       8      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23966 ;;Total ram usage:       26 bytes
 23967 ;; Hardware stack levels used:    1
 23968 ;; Hardware stack levels required when called:    3
 23969 ;; This function calls:
 23970 ;;		Nothing
 23971 ;; This function is called by:
 23972 ;;		_checkChannelStatus
 23973 ;;		_systemCheck
 23974 ;;		_calcRequiredPower
 23975 ;;		_getAnalogValues
 23976 ;;		_channelThing
 23977 ;;		_ftoa
 23978 ;;		___checkChannelStatus
 23979 ;; This function uses a non-reentrant model
 23980 ;;
 23981                           
 23982                           
 23983                           ;psect for function ___fldiv
 23984  1007                     ___fldiv:	
 23985                           
 23986                           ;incstack = 0
 23987                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 23988  1007  0140               	movlb	0	; select bank0
 23989  1008  0866               	movf	___fldiv@b+3,w
 23990  1009  3980               	andlw	128
 23991  100A  0141               	movlb	1	; select bank1
 23992  100B  00A0               	movwf	??___fldiv^(0+128)
 23993  100C  0820               	movf	??___fldiv^(0+128),w
 23994  100D  00A9               	movwf	___fldiv@sign^(0+128)
 23995  100E  0140               	movlb	0	; select bank0
 23996  100F  3566               	lslf	___fldiv@b+3,w
 23997  1010  0141               	movlb	1	; select bank1
 23998  1011  00A0               	movwf	??___fldiv^(0+128)
 23999  1012  0820               	movf	??___fldiv^(0+128),w
 24000  1013  00B0               	movwf	___fldiv@bexp^(0+128)
 24001  1014  0140               	movlb	0	; select bank0
 24002  1015  1FE5               	btfss	___fldiv@b+2,7
 24003  1016  2819               	goto	l7128
 24004  1017  0141               	movlb	1	; select bank1
 24005  1018  1430               	bsf	___fldiv@bexp^(0+128),0
 24006  1019                     l7128:	
 24007  1019  0141               	movlb	1	; select bank1
 24008  101A  0830               	movf	___fldiv@bexp^(0+128),w
 24009  101B  1903               	btfsc	3,2
 24010  101C  282D               	goto	l7138
 24011  101D  0A30               	incf	___fldiv@bexp^(0+128),w
 24012  101E  1D03               	btfss	3,2
 24013  101F  2829               	goto	l7134
 24014  1020  3000               	movlw	0
 24015  1021  0140               	movlb	0	; select bank0
 24016  1022  00E6               	movwf	___fldiv@b+3
 24017  1023  3000               	movlw	0
 24018  1024  00E5               	movwf	___fldiv@b+2
 24019  1025  3000               	movlw	0
 24020  1026  00E4               	movwf	___fldiv@b+1
 24021  1027  3000               	movlw	0
 24022  1028  00E3               	movwf	___fldiv@b
 24023  1029                     l7134:	
 24024  1029  0140               	movlb	0	; select bank0
 24025  102A  17E5               	bsf	___fldiv@b+2,7
 24026  102B  01E6               	clrf	___fldiv@b+3
 24027  102C  2836               	goto	l7140
 24028  102D                     l7138:	
 24029  102D  3000               	movlw	0
 24030  102E  0140               	movlb	0	; select bank0
 24031  102F  00E6               	movwf	___fldiv@b+3
 24032  1030  3000               	movlw	0
 24033  1031  00E5               	movwf	___fldiv@b+2
 24034  1032  3000               	movlw	0
 24035  1033  00E4               	movwf	___fldiv@b+1
 24036  1034  3000               	movlw	0
 24037  1035  00E3               	movwf	___fldiv@b
 24038  1036                     l7140:	
 24039  1036  0862               	movf	___fldiv@a+3,w
 24040  1037  3980               	andlw	128
 24041  1038  0141               	movlb	1	; select bank1
 24042  1039  00A0               	movwf	??___fldiv^(0+128)
 24043  103A  0820               	movf	??___fldiv^(0+128),w
 24044  103B  06A9               	xorwf	___fldiv@sign^(0+128),f
 24045  103C  0140               	movlb	0	; select bank0
 24046  103D  3562               	lslf	___fldiv@a+3,w
 24047  103E  0141               	movlb	1	; select bank1
 24048  103F  00A0               	movwf	??___fldiv^(0+128)
 24049  1040  0820               	movf	??___fldiv^(0+128),w
 24050  1041  00B1               	movwf	___fldiv@aexp^(0+128)
 24051  1042  0140               	movlb	0	; select bank0
 24052  1043  1FE1               	btfss	___fldiv@a+2,7
 24053  1044  2847               	goto	l7148
 24054  1045  0141               	movlb	1	; select bank1
 24055  1046  1431               	bsf	___fldiv@aexp^(0+128),0
 24056  1047                     l7148:	
 24057  1047  0141               	movlb	1	; select bank1
 24058  1048  0831               	movf	___fldiv@aexp^(0+128),w
 24059  1049  1903               	btfsc	3,2
 24060  104A  285B               	goto	l7158
 24061  104B  0A31               	incf	___fldiv@aexp^(0+128),w
 24062  104C  1D03               	btfss	3,2
 24063  104D  2857               	goto	l7154
 24064  104E  3000               	movlw	0
 24065  104F  0140               	movlb	0	; select bank0
 24066  1050  00E2               	movwf	___fldiv@a+3
 24067  1051  3000               	movlw	0
 24068  1052  00E1               	movwf	___fldiv@a+2
 24069  1053  3000               	movlw	0
 24070  1054  00E0               	movwf	___fldiv@a+1
 24071  1055  3000               	movlw	0
 24072  1056  00DF               	movwf	___fldiv@a
 24073  1057                     l7154:	
 24074  1057  0140               	movlb	0	; select bank0
 24075  1058  17E1               	bsf	___fldiv@a+2,7
 24076  1059  01E2               	clrf	___fldiv@a+3
 24077  105A  2864               	goto	l1397
 24078  105B                     l7158:	
 24079  105B  3000               	movlw	0
 24080  105C  0140               	movlb	0	; select bank0
 24081  105D  00E2               	movwf	___fldiv@a+3
 24082  105E  3000               	movlw	0
 24083  105F  00E1               	movwf	___fldiv@a+2
 24084  1060  3000               	movlw	0
 24085  1061  00E0               	movwf	___fldiv@a+1
 24086  1062  3000               	movlw	0
 24087  1063  00DF               	movwf	___fldiv@a
 24088  1064                     l1397:	
 24089  1064  0862               	movf	___fldiv@a+3,w
 24090  1065  0461               	iorwf	___fldiv@a+2,w
 24091  1066  0460               	iorwf	___fldiv@a+1,w
 24092  1067  045F               	iorwf	___fldiv@a,w
 24093  1068  1D03               	skipz
 24094  1069  2885               	goto	l7168
 24095  106A  3000               	movlw	0
 24096  106B  00E6               	movwf	___fldiv@b+3
 24097  106C  3000               	movlw	0
 24098  106D  00E5               	movwf	___fldiv@b+2
 24099  106E  3000               	movlw	0
 24100  106F  00E4               	movwf	___fldiv@b+1
 24101  1070  3000               	movlw	0
 24102  1071  00E3               	movwf	___fldiv@b
 24103  1072  3080               	movlw	128
 24104  1073  04E5               	iorwf	___fldiv@b+2,f
 24105  1074  307F               	movlw	127
 24106  1075  04E6               	iorwf	___fldiv@b+3,f
 24107  1076                     L14:	
 24108  1076  0141               	movlb	1	; select bank1
 24109  1077  0829               	movf	___fldiv@sign^(0+128),w
 24110  1078  00A0               	movwf	??___fldiv^(0+128)
 24111  1079  0820               	movf	??___fldiv^(0+128),w
 24112  107A  0140               	movlb	0	; select bank0
 24113  107B  04E6               	iorwf	___fldiv@b+3,f
 24114  107C  0866               	movf	___fldiv@b+3,w
 24115  107D  00E2               	movwf	?___fldiv+3
 24116  107E  0865               	movf	___fldiv@b+2,w
 24117  107F  00E1               	movwf	?___fldiv+2
 24118  1080  0864               	movf	___fldiv@b+1,w
 24119  1081  00E0               	movwf	?___fldiv+1
 24120  1082  0863               	movf	___fldiv@b,w
 24121  1083  00DF               	movwf	?___fldiv
 24122  1084  0008               	return
 24123  1085                     l7168:	
 24124  1085  0141               	movlb	1	; select bank1
 24125  1086  0830               	movf	___fldiv@bexp^(0+128),w
 24126  1087  1D03               	btfss	3,2
 24127  1088  2893               	goto	l7174
 24128  1089  3000               	movlw	0
 24129  108A  0140               	movlb	0	; select bank0
 24130  108B  00E2               	movwf	?___fldiv+3
 24131  108C  3000               	movlw	0
 24132  108D  00E1               	movwf	?___fldiv+2
 24133  108E  3000               	movlw	0
 24134  108F  00E0               	movwf	?___fldiv+1
 24135  1090  3000               	movlw	0
 24136  1091  00DF               	movwf	?___fldiv
 24137  1092  0008               	return
 24138  1093                     l7174:	
 24139  1093  0830               	movf	___fldiv@bexp^(0+128),w
 24140  1094  00A0               	movwf	??___fldiv^(0+128)
 24141  1095  01A1               	clrf	(??___fldiv^(0+128)+1)
 24142  1096  0821               	movf	(??___fldiv+1)^(0+128),w
 24143  1097  00A3               	movwf	((??___fldiv+2)^(0+128)+1)
 24144  1098  0831               	movf	___fldiv@aexp^(0+128),w
 24145  1099  0220               	subwf	??___fldiv^(0+128),w
 24146  109A  00A2               	movwf	(??___fldiv+2)^(0+128)
 24147  109B  1C03               	skipc
 24148  109C  03A3               	decf	((??___fldiv+2)^(0+128)+1),f
 24149  109D  0822               	movf	(??___fldiv+2)^(0+128),w
 24150  109E  3E7F               	addlw	127
 24151  109F  00AA               	movwf	___fldiv@new_exp^(0+128)
 24152  10A0  3000               	movlw	0
 24153  10A1  3D23               	addwfc	(??___fldiv+3)^(0+128),w
 24154  10A2  00AB               	movwf	(___fldiv@new_exp+1)^(0+128)
 24155  10A3  0140               	movlb	0	; select bank0
 24156  10A4  0866               	movf	___fldiv@b+3,w
 24157  10A5  0141               	movlb	1	; select bank1
 24158  10A6  00A8               	movwf	(___fldiv@rem+3)^(0+128)
 24159  10A7  0140               	movlb	0	; select bank0
 24160  10A8  0865               	movf	___fldiv@b+2,w
 24161  10A9  0141               	movlb	1	; select bank1
 24162  10AA  00A7               	movwf	(___fldiv@rem+2)^(0+128)
 24163  10AB  0140               	movlb	0	; select bank0
 24164  10AC  0864               	movf	___fldiv@b+1,w
 24165  10AD  0141               	movlb	1	; select bank1
 24166  10AE  00A6               	movwf	(___fldiv@rem+1)^(0+128)
 24167  10AF  0140               	movlb	0	; select bank0
 24168  10B0  0863               	movf	___fldiv@b,w
 24169  10B1  0141               	movlb	1	; select bank1
 24170  10B2  00A5               	movwf	___fldiv@rem^(0+128)
 24171  10B3  3000               	movlw	0
 24172  10B4  0140               	movlb	0	; select bank0
 24173  10B5  00E6               	movwf	___fldiv@b+3
 24174  10B6  3000               	movlw	0
 24175  10B7  00E5               	movwf	___fldiv@b+2
 24176  10B8  3000               	movlw	0
 24177  10B9  00E4               	movwf	___fldiv@b+1
 24178  10BA  3000               	movlw	0
 24179  10BB  00E3               	movwf	___fldiv@b
 24180  10BC  3000               	movlw	0
 24181  10BD  0141               	movlb	1	; select bank1
 24182  10BE  00AF               	movwf	(___fldiv@grs+3)^(0+128)
 24183  10BF  3000               	movlw	0
 24184  10C0  00AE               	movwf	(___fldiv@grs+2)^(0+128)
 24185  10C1  3000               	movlw	0
 24186  10C2  00AD               	movwf	(___fldiv@grs+1)^(0+128)
 24187  10C3  3000               	movlw	0
 24188  10C4  00AC               	movwf	___fldiv@grs^(0+128)
 24189  10C5  01B1               	clrf	___fldiv@aexp^(0+128)
 24190  10C6                     l7202:	
 24191  10C6  301A               	movlw	26
 24192  10C7  0231               	subwf	___fldiv@aexp^(0+128),w
 24193  10C8  1803               	btfsc	3,0
 24194  10C9  2917               	goto	l7204
 24195  10CA  0831               	movf	___fldiv@aexp^(0+128),w
 24196  10CB  1903               	btfsc	3,2
 24197  10CC  28E9               	goto	l7194
 24198  10CD  3001               	movlw	1
 24199  10CE                     u8365:	
 24200  10CE  35A5               	lslf	___fldiv@rem^(0+128),f
 24201  10CF  0DA6               	rlf	(___fldiv@rem+1)^(0+128),f
 24202  10D0  0DA7               	rlf	(___fldiv@rem+2)^(0+128),f
 24203  10D1  0DA8               	rlf	(___fldiv@rem+3)^(0+128),f
 24204  10D2  0B89               	decfsz	9,f
 24205  10D3  28CE               	goto	u8365
 24206  10D4  3001               	movlw	1
 24207  10D5                     u8375:	
 24208  10D5  0140               	movlb	0	; select bank0
 24209  10D6  35E3               	lslf	___fldiv@b,f
 24210  10D7  0DE4               	rlf	___fldiv@b+1,f
 24211  10D8  0DE5               	rlf	___fldiv@b+2,f
 24212  10D9  0DE6               	rlf	___fldiv@b+3,f
 24213  10DA  0B89               	decfsz	9,f
 24214  10DB  28D5               	goto	u8375
 24215  10DC  0141               	movlb	1	; select bank1
 24216  10DD  1FAF               	btfss	(___fldiv@grs+3)^(0+128),7
 24217  10DE  28E1               	goto	l7192
 24218  10DF  0140               	movlb	0	; select bank0
 24219  10E0  1463               	bsf	___fldiv@b,0
 24220  10E1                     l7192:	
 24221  10E1  3001               	movlw	1
 24222  10E2                     u8395:	
 24223  10E2  0141               	movlb	1	; select bank1
 24224  10E3  35AC               	lslf	___fldiv@grs^(0+128),f
 24225  10E4  0DAD               	rlf	(___fldiv@grs+1)^(0+128),f
 24226  10E5  0DAE               	rlf	(___fldiv@grs+2)^(0+128),f
 24227  10E6  0DAF               	rlf	(___fldiv@grs+3)^(0+128),f
 24228  10E7  0B89               	decfsz	9,f
 24229  10E8  28E2               	goto	u8395
 24230  10E9                     l7194:	
 24231  10E9  0140               	movlb	0	; select bank0
 24232  10EA  0862               	movf	___fldiv@a+3,w
 24233  10EB  0141               	movlb	1	; select bank1
 24234  10EC  0228               	subwf	(___fldiv@rem+3)^(0+128),w
 24235  10ED  1D03               	skipz
 24236  10EE  28FF               	goto	u8405
 24237  10EF  0140               	movlb	0	; select bank0
 24238  10F0  0861               	movf	___fldiv@a+2,w
 24239  10F1  0141               	movlb	1	; select bank1
 24240  10F2  0227               	subwf	(___fldiv@rem+2)^(0+128),w
 24241  10F3  1D03               	skipz
 24242  10F4  28FF               	goto	u8405
 24243  10F5  0140               	movlb	0	; select bank0
 24244  10F6  0860               	movf	___fldiv@a+1,w
 24245  10F7  0141               	movlb	1	; select bank1
 24246  10F8  0226               	subwf	(___fldiv@rem+1)^(0+128),w
 24247  10F9  1D03               	skipz
 24248  10FA  28FF               	goto	u8405
 24249  10FB  0140               	movlb	0	; select bank0
 24250  10FC  085F               	movf	___fldiv@a,w
 24251  10FD  0141               	movlb	1	; select bank1
 24252  10FE  0225               	subwf	___fldiv@rem^(0+128),w
 24253  10FF                     u8405:	
 24254  10FF  1C03               	skipc
 24255  1100  2912               	goto	l7200
 24256  1101  172F               	bsf	(___fldiv@grs^(0+128)+3),6
 24257  1102  0140               	movlb	0	; select bank0
 24258  1103  085F               	movf	___fldiv@a,w
 24259  1104  0141               	movlb	1	; select bank1
 24260  1105  02A5               	subwf	___fldiv@rem^(0+128),f
 24261  1106  0140               	movlb	0	; select bank0
 24262  1107  0860               	movf	___fldiv@a+1,w
 24263  1108  0141               	movlb	1	; select bank1
 24264  1109  3BA6               	subwfb	(___fldiv@rem+1)^(0+128),f
 24265  110A  0140               	movlb	0	; select bank0
 24266  110B  0861               	movf	___fldiv@a+2,w
 24267  110C  0141               	movlb	1	; select bank1
 24268  110D  3BA7               	subwfb	(___fldiv@rem+2)^(0+128),f
 24269  110E  0140               	movlb	0	; select bank0
 24270  110F  0862               	movf	___fldiv@a+3,w
 24271  1110  0141               	movlb	1	; select bank1
 24272  1111  3BA8               	subwfb	(___fldiv@rem+3)^(0+128),f
 24273  1112                     l7200:	
 24274  1112  3001               	movlw	1
 24275  1113  00A0               	movwf	??___fldiv^(0+128)
 24276  1114  0820               	movf	??___fldiv^(0+128),w
 24277  1115  07B1               	addwf	___fldiv@aexp^(0+128),f
 24278  1116  28C6               	goto	l7202
 24279  1117                     l7204:	
 24280  1117  0828               	movf	(___fldiv@rem+3)^(0+128),w
 24281  1118  0427               	iorwf	(___fldiv@rem+2)^(0+128),w
 24282  1119  0426               	iorwf	(___fldiv@rem+1)^(0+128),w
 24283  111A  0425               	iorwf	___fldiv@rem^(0+128),w
 24284  111B  1D03               	btfss	3,2
 24285  111C  142C               	bsf	___fldiv@grs^(0+128),0
 24286  111D                     l7218:	
 24287  111D  0140               	movlb	0	; select bank0
 24288  111E  1BE5               	btfsc	___fldiv@b+2,7
 24289  111F  2939               	goto	l7220
 24290  1120  3001               	movlw	1
 24291  1121                     u8435:	
 24292  1121  35E3               	lslf	___fldiv@b,f
 24293  1122  0DE4               	rlf	___fldiv@b+1,f
 24294  1123  0DE5               	rlf	___fldiv@b+2,f
 24295  1124  0DE6               	rlf	___fldiv@b+3,f
 24296  1125  0B89               	decfsz	9,f
 24297  1126  2921               	goto	u8435
 24298  1127  0141               	movlb	1	; select bank1
 24299  1128  1FAF               	btfss	(___fldiv@grs+3)^(0+128),7
 24300  1129  292C               	goto	l7214
 24301  112A  0140               	movlb	0	; select bank0
 24302  112B  1463               	bsf	___fldiv@b,0
 24303  112C                     l7214:	
 24304  112C  3001               	movlw	1
 24305  112D                     u8455:	
 24306  112D  0141               	movlb	1	; select bank1
 24307  112E  35AC               	lslf	___fldiv@grs^(0+128),f
 24308  112F  0DAD               	rlf	(___fldiv@grs+1)^(0+128),f
 24309  1130  0DAE               	rlf	(___fldiv@grs+2)^(0+128),f
 24310  1131  0DAF               	rlf	(___fldiv@grs+3)^(0+128),f
 24311  1132  0B89               	decfsz	9,f
 24312  1133  292D               	goto	u8455
 24313  1134  30FF               	movlw	255
 24314  1135  07AA               	addwf	___fldiv@new_exp^(0+128),f
 24315  1136  30FF               	movlw	255
 24316  1137  3DAB               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24317  1138  291D               	goto	l7218
 24318  1139                     l7220:	
 24319  1139  0141               	movlb	1	; select bank1
 24320  113A  01B1               	clrf	___fldiv@aexp^(0+128)
 24321  113B  1FAF               	btfss	(___fldiv@grs+3)^(0+128),7
 24322  113C  2955               	goto	l7230
 24323  113D  30FF               	movlw	255
 24324  113E  052C               	andwf	___fldiv@grs^(0+128),w
 24325  113F  00A0               	movwf	??___fldiv^(0+128)
 24326  1140  30FF               	movlw	255
 24327  1141  052D               	andwf	(___fldiv@grs+1)^(0+128),w
 24328  1142  00A1               	movwf	(??___fldiv^(0+128)+1)
 24329  1143  30FF               	movlw	255
 24330  1144  052E               	andwf	(___fldiv@grs+2)^(0+128),w
 24331  1145  00A2               	movwf	(??___fldiv^(0+128)+2)
 24332  1146  307F               	movlw	127
 24333  1147  052F               	andwf	(___fldiv@grs+3)^(0+128),w
 24334  1148  00A3               	movwf	(??___fldiv^(0+128)+3)
 24335  1149  0823               	movf	(??___fldiv+3)^(0+128),w
 24336  114A  0422               	iorwf	(??___fldiv+2)^(0+128),w
 24337  114B  0421               	iorwf	(??___fldiv+1)^(0+128),w
 24338  114C  0420               	iorwf	??___fldiv^(0+128),w
 24339  114D  1D03               	btfss	3,2
 24340  114E  2952               	goto	l7226
 24341  114F  0140               	movlb	0	; select bank0
 24342  1150  1C63               	btfss	___fldiv@b,0
 24343  1151  2955               	goto	l7230
 24344  1152                     l7226:	
 24345  1152  0141               	movlb	1	; select bank1
 24346  1153  01B1               	clrf	___fldiv@aexp^(0+128)
 24347  1154  0AB1               	incf	___fldiv@aexp^(0+128),f
 24348  1155                     l7230:	
 24349  1155  0141               	movlb	1	; select bank1
 24350  1156  0831               	movf	___fldiv@aexp^(0+128),w
 24351  1157  1903               	btfsc	3,2
 24352  1158  298F               	goto	l7240
 24353  1159  3001               	movlw	1
 24354  115A  0140               	movlb	0	; select bank0
 24355  115B  07E3               	addwf	___fldiv@b,f
 24356  115C  3000               	movlw	0
 24357  115D  3DE4               	addwfc	___fldiv@b+1,f
 24358  115E  3000               	movlw	0
 24359  115F  3DE5               	addwfc	___fldiv@b+2,f
 24360  1160  3000               	movlw	0
 24361  1161  3DE6               	addwfc	___fldiv@b+3,f
 24362  1162  1C66               	btfss	___fldiv@b+3,0
 24363  1163  298F               	goto	l7240
 24364  1164  0863               	movf	___fldiv@b,w
 24365  1165  0141               	movlb	1	; select bank1
 24366  1166  00A0               	movwf	??___fldiv^(0+128)
 24367  1167  0140               	movlb	0	; select bank0
 24368  1168  0864               	movf	___fldiv@b+1,w
 24369  1169  0141               	movlb	1	; select bank1
 24370  116A  00A1               	movwf	(??___fldiv^(0+128)+1)
 24371  116B  0140               	movlb	0	; select bank0
 24372  116C  0865               	movf	___fldiv@b+2,w
 24373  116D  0141               	movlb	1	; select bank1
 24374  116E  00A2               	movwf	(??___fldiv^(0+128)+2)
 24375  116F  0140               	movlb	0	; select bank0
 24376  1170  0866               	movf	___fldiv@b+3,w
 24377  1171  0141               	movlb	1	; select bank1
 24378  1172  00A3               	movwf	(??___fldiv^(0+128)+3)
 24379  1173  3001               	movlw	1
 24380  1174  00A4               	movwf	(??___fldiv+4)^(0+128)
 24381  1175                     u8525:	
 24382  1175  37A3               	asrf	(??___fldiv^(0+128)+3),f
 24383  1176  0CA2               	rrf	(??___fldiv^(0+128)+2),f
 24384  1177  0CA1               	rrf	(??___fldiv^(0+128)+1),f
 24385  1178  0CA0               	rrf	??___fldiv^(0+128),f
 24386  1179  0BA4               	decfsz	(??___fldiv+4)^(0+128),f
 24387  117A  2975               	goto	u8525
 24388  117B  0823               	movf	(??___fldiv+3)^(0+128),w
 24389  117C  0140               	movlb	0	; select bank0
 24390  117D  00E6               	movwf	___fldiv@b+3
 24391  117E  0141               	movlb	1	; select bank1
 24392  117F  0822               	movf	(??___fldiv+2)^(0+128),w
 24393  1180  0140               	movlb	0	; select bank0
 24394  1181  00E5               	movwf	___fldiv@b+2
 24395  1182  0141               	movlb	1	; select bank1
 24396  1183  0821               	movf	(??___fldiv+1)^(0+128),w
 24397  1184  0140               	movlb	0	; select bank0
 24398  1185  00E4               	movwf	___fldiv@b+1
 24399  1186  0141               	movlb	1	; select bank1
 24400  1187  0820               	movf	??___fldiv^(0+128),w
 24401  1188  0140               	movlb	0	; select bank0
 24402  1189  00E3               	movwf	___fldiv@b
 24403  118A  3001               	movlw	1
 24404  118B  0141               	movlb	1	; select bank1
 24405  118C  07AA               	addwf	___fldiv@new_exp^(0+128),f
 24406  118D  3000               	movlw	0
 24407  118E  3DAB               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24408  118F                     l7240:	
 24409  118F  0141               	movlb	1	; select bank1
 24410  1190  082B               	movf	(___fldiv@new_exp+1)^(0+128),w
 24411  1191  3A80               	xorlw	128
 24412  1192  00A0               	movwf	??___fldiv^(0+128)
 24413  1193  3080               	movlw	128
 24414  1194  0220               	subwf	??___fldiv^(0+128),w
 24415  1195  1D03               	skipz
 24416  1196  2999               	goto	u8535
 24417  1197  30FF               	movlw	255
 24418  1198  022A               	subwf	___fldiv@new_exp^(0+128),w
 24419  1199                     u8535:	
 24420  1199  1C03               	skipc
 24421  119A  29A9               	goto	l1418
 24422  119B  30FF               	movlw	255
 24423  119C  0141               	movlb	1	; select bank1
 24424  119D  00AA               	movwf	___fldiv@new_exp^(0+128)
 24425  119E  3000               	movlw	0
 24426  119F  00AB               	movwf	(___fldiv@new_exp^(0+128)+1)
 24427  11A0  3000               	movlw	0
 24428  11A1  0140               	movlb	0	; select bank0
 24429  11A2  00E6               	movwf	___fldiv@b+3
 24430  11A3  3000               	movlw	0
 24431  11A4  00E5               	movwf	___fldiv@b+2
 24432  11A5  3000               	movlw	0
 24433  11A6  00E4               	movwf	___fldiv@b+1
 24434  11A7  3000               	movlw	0
 24435  11A8  00E3               	movwf	___fldiv@b
 24436  11A9                     l1418:	
 24437  11A9  0141               	movlb	1	; select bank1
 24438  11AA  082B               	movf	(___fldiv@new_exp+1)^(0+128),w
 24439  11AB  3A80               	xorlw	128
 24440  11AC  00A0               	movwf	??___fldiv^(0+128)
 24441  11AD  3080               	movlw	128
 24442  11AE  0220               	subwf	??___fldiv^(0+128),w
 24443  11AF  1D03               	skipz
 24444  11B0  29B3               	goto	u8545
 24445  11B1  3001               	movlw	1
 24446  11B2  022A               	subwf	___fldiv@new_exp^(0+128),w
 24447  11B3                     u8545:	
 24448  11B3  1803               	skipnc
 24449  11B4  29C3               	goto	l1419
 24450  11B5  0141               	movlb	1	; select bank1
 24451  11B6  01AA               	clrf	___fldiv@new_exp^(0+128)
 24452  11B7  01AB               	clrf	(___fldiv@new_exp+1)^(0+128)
 24453  11B8  3000               	movlw	0
 24454  11B9  0140               	movlb	0	; select bank0
 24455  11BA  00E6               	movwf	___fldiv@b+3
 24456  11BB  3000               	movlw	0
 24457  11BC  00E5               	movwf	___fldiv@b+2
 24458  11BD  3000               	movlw	0
 24459  11BE  00E4               	movwf	___fldiv@b+1
 24460  11BF  3000               	movlw	0
 24461  11C0  00E3               	movwf	___fldiv@b
 24462  11C1  0141               	movlb	1	; select bank1
 24463  11C2  01A9               	clrf	___fldiv@sign^(0+128)
 24464  11C3                     l1419:	
 24465  11C3  0141               	movlb	1	; select bank1
 24466  11C4  082A               	movf	___fldiv@new_exp^(0+128),w
 24467  11C5  00A0               	movwf	??___fldiv^(0+128)
 24468  11C6  0820               	movf	??___fldiv^(0+128),w
 24469  11C7  00B0               	movwf	___fldiv@bexp^(0+128)
 24470  11C8  1C30               	btfss	___fldiv@bexp^(0+128),0
 24471  11C9  29CD               	goto	l7254
 24472  11CA  0140               	movlb	0	; select bank0
 24473  11CB  17E5               	bsf	___fldiv@b+2,7
 24474  11CC  29D2               	goto	l1421
 24475  11CD                     l7254:	
 24476  11CD  307F               	movlw	127
 24477  11CE  00A0               	movwf	??___fldiv^(0+128)
 24478  11CF  0820               	movf	??___fldiv^(0+128),w
 24479  11D0  0140               	movlb	0	; select bank0
 24480  11D1  05E5               	andwf	___fldiv@b+2,f
 24481  11D2                     l1421:	
 24482  11D2  0141               	movlb	1	; select bank1
 24483  11D3  3630               	lsrf	___fldiv@bexp^(0+128),w
 24484  11D4  00A0               	movwf	??___fldiv^(0+128)
 24485  11D5  0820               	movf	??___fldiv^(0+128),w
 24486  11D6  0140               	movlb	0	; select bank0
 24487  11D7  00E6               	movwf	___fldiv@b+3
 24488  11D8  2876               	goto	L14
 24489  11D9                     __end_of___fldiv:	
 24490                           
 24491                           	psect	text71
 24492  3245                     __ptext71:	
 24493 ;; *************** function _OLED_loadSpecialChars *****************
 24494 ;; Defined at:
 24495 ;;		line 176 in file "oled.c"
 24496 ;; Parameters:    Size  Location     Type
 24497 ;;		None
 24498 ;; Auto vars:     Size  Location     Type
 24499 ;;  special        32   12[BANK0 ] unsigned char [32]
 24500 ;;  n               1   44[BANK0 ] unsigned char 
 24501 ;; Return value:  Size  Location     Type
 24502 ;;                  1    wreg      void 
 24503 ;; Registers used:
 24504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24505 ;; Tracked objects:
 24506 ;;		On entry : 0/0
 24507 ;;		On exit  : 0/0
 24508 ;;		Unchanged: 0/0
 24509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24511 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24513 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24514 ;;Total ram usage:       34 bytes
 24515 ;; Hardware stack levels used:    1
 24516 ;; Hardware stack levels required when called:    7
 24517 ;; This function calls:
 24518 ;;		_OLED_command
 24519 ;;		_OLED_write
 24520 ;; This function is called by:
 24521 ;;		_main
 24522 ;; This function uses a non-reentrant model
 24523 ;;
 24524                           
 24525                           
 24526                           ;psect for function _OLED_loadSpecialChars
 24527  3245                     _OLED_loadSpecialChars:	
 24528                           
 24529                           ;oled.c: 178:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 24530                           
 24531                           ;incstack = 0
 24532                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24533  3245  3020               	movlw	low OLED_loadSpecialChars@F7985
 24534  3246  0086               	movwf	6
 24535  3247  3003               	movlw	high OLED_loadSpecialChars@F7985
 24536  3248  0087               	movwf	7
 24537  3249  302C               	movlw	low OLED_loadSpecialChars@special
 24538  324A  0084               	movwf	4
 24539  324B  3000               	movlw	high OLED_loadSpecialChars@special
 24540  324C  0085               	movwf	5
 24541  324D  3020               	movlw	32
 24542  324E  0140               	movlb	0	; select bank0
 24543  324F  00AB               	movwf	??_OLED_loadSpecialChars
 24544  3250                     u6400:	
 24545  3250  0016               	moviw fsr1++
 24546  3251  001A               	movwi fsr0++
 24547  3252  0BAB               	decfsz	??_OLED_loadSpecialChars,f
 24548  3253  2A50               	goto	u6400
 24549                           
 24550                           ;oled.c: 183:  uint8_t n;;oled.c: 185:  OLED_command(0x40 + 8);
 24551  3254  3048               	movlw	72
 24552  3255  31B1  2115  31B2   	fcall	_OLED_command
 24553                           
 24554                           ;oled.c: 186:  for(n = 0; n < sizeof(special); n++) {
 24555  3258  0140               	movlb	0	; select bank0
 24556  3259  01CC               	clrf	OLED_loadSpecialChars@n
 24557  325A                     l5894:	
 24558                           
 24559                           ;oled.c: 187:   OLED_write(special[n]);
 24560  325A  084C               	movf	OLED_loadSpecialChars@n,w
 24561  325B  3E2C               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 24562  325C  0086               	movwf	6
 24563  325D  0187               	clrf	7
 24564  325E  0801               	movf	1,w
 24565  325F  31B1  2129  31B2   	fcall	_OLED_write
 24566                           
 24567                           ;oled.c: 188:  }
 24568  3262  3001               	movlw	1
 24569  3263  0140               	movlb	0	; select bank0
 24570  3264  00AB               	movwf	??_OLED_loadSpecialChars
 24571  3265  082B               	movf	??_OLED_loadSpecialChars,w
 24572  3266  07CC               	addwf	OLED_loadSpecialChars@n,f
 24573  3267  3020               	movlw	32
 24574  3268  024C               	subwf	OLED_loadSpecialChars@n,w
 24575  3269  1803               	btfsc	3,0
 24576  326A  0008               	return
 24577  326B  2A5A               	goto	l5894
 24578  326C                     __end_of_OLED_loadSpecialChars:	
 24579                           
 24580                           	psect	text72
 24581  3129                     __ptext72:	
 24582 ;; *************** function _OLED_write *****************
 24583 ;; Defined at:
 24584 ;;		line 78 in file "oled.c"
 24585 ;; Parameters:    Size  Location     Type
 24586 ;;  value           1    wreg     unsigned char 
 24587 ;; Auto vars:     Size  Location     Type
 24588 ;;  value           1   10[BANK0 ] unsigned char 
 24589 ;; Return value:  Size  Location     Type
 24590 ;;                  1    wreg      void 
 24591 ;; Registers used:
 24592 ;;		wreg, status,2, status,0, pclath, cstack
 24593 ;; Tracked objects:
 24594 ;;		On entry : 0/0
 24595 ;;		On exit  : 0/0
 24596 ;;		Unchanged: 0/0
 24597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24601 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24602 ;;Total ram usage:        1 bytes
 24603 ;; Hardware stack levels used:    1
 24604 ;; Hardware stack levels required when called:    6
 24605 ;; This function calls:
 24606 ;;		_OLED_send
 24607 ;;		_OLED_waitForReady
 24608 ;; This function is called by:
 24609 ;;		_OLED_print_xy
 24610 ;;		_OLED_loadSpecialChars
 24611 ;;		_OLED_print
 24612 ;; This function uses a non-reentrant model
 24613 ;;
 24614                           
 24615                           
 24616                           ;psect for function _OLED_write
 24617  3129                     _OLED_write:	
 24618                           
 24619                           ;incstack = 0
 24620                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 24621                           ;OLED_write@value stored from wreg
 24622  3129  0140               	movlb	0	; select bank0
 24623  312A  00AA               	movwf	OLED_write@value
 24624                           
 24625                           ;oled.c: 78: void OLED_write(uint8_t value);oled.c: 79: {;oled.c: 80:  OLED_send(value, 
      +                          1);
 24626  312B  01A7               	clrf	OLED_send@mode
 24627  312C  0AA7               	incf	OLED_send@mode,f
 24628  312D  082A               	movf	OLED_write@value,w
 24629  312E  31B1  217E  31B1   	fcall	_OLED_send
 24630                           
 24631                           ;oled.c: 81:  OLED_waitForReady();
 24632  3131  31B1  21E6         	fcall	_OLED_waitForReady
 24633  3133  0008               	return
 24634  3134                     __end_of_OLED_write:	
 24635                           
 24636                           	psect	text73
 24637  2AF3                     __ptext73:	
 24638 ;; *************** function _OLED_init *****************
 24639 ;; Defined at:
 24640 ;;		line 84 in file "oled.c"
 24641 ;; Parameters:    Size  Location     Type
 24642 ;;		None
 24643 ;; Auto vars:     Size  Location     Type
 24644 ;;		None
 24645 ;; Return value:  Size  Location     Type
 24646 ;;                  1    wreg      void 
 24647 ;; Registers used:
 24648 ;;		wreg, status,2, status,0, pclath, cstack
 24649 ;; Tracked objects:
 24650 ;;		On entry : 0/0
 24651 ;;		On exit  : 0/0
 24652 ;;		Unchanged: 0/0
 24653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24657 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24658 ;;Total ram usage:        1 bytes
 24659 ;; Hardware stack levels used:    1
 24660 ;; Hardware stack levels required when called:    7
 24661 ;; This function calls:
 24662 ;;		_OLED_command
 24663 ;;		_OLED_write4bits
 24664 ;; This function is called by:
 24665 ;;		_main
 24666 ;; This function uses a non-reentrant model
 24667 ;;
 24668                           
 24669                           
 24670                           ;psect for function _OLED_init
 24671  2AF3                     _OLED_init:	
 24672                           
 24673                           ;oled.c: 86:  LATBbits.LATB4 = 0;
 24674                           
 24675                           ;incstack = 0
 24676                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 24677  2AF3  0140               	movlb	0	; select bank0
 24678  2AF4  1219               	bcf	25,4	;volatile
 24679                           
 24680                           ;oled.c: 87:  LATBbits.LATB2 = 0;
 24681  2AF5  1119               	bcf	25,2	;volatile
 24682                           
 24683                           ;oled.c: 88:  LATBbits.LATB3 = 0;
 24684  2AF6  1199               	bcf	25,3	;volatile
 24685                           
 24686                           ;oled.c: 90:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 24687  2AF7  3041               	movlw	65
 24688  2AF8  0140               	movlb	0	; select bank0
 24689  2AF9  00AB               	movwf	??_OLED_init
 24690  2AFA  30EE               	movlw	238
 24691  2AFB                     u10347:	
 24692  2AFB  0B89               	decfsz	9,f
 24693  2AFC  2AFB               	goto	u10347
 24694  2AFD  0BAB               	decfsz	??_OLED_init,f
 24695  2AFE  2AFB               	goto	u10347
 24696  2AFF  0000               	nop
 24697                           
 24698                           ;oled.c: 94:  LATBbits.LATB1 = 0;
 24699  2B00  0140               	movlb	0	; select bank0
 24700  2B01  1099               	bcf	25,1	;volatile
 24701                           
 24702                           ;oled.c: 95:  LATBbits.LATB0 = 0;
 24703  2B02  1019               	bcf	25,0	;volatile
 24704                           
 24705                           ;oled.c: 96:  LATCbits.LATC5 = 0;
 24706  2B03  129A               	bcf	26,5	;volatile
 24707                           
 24708                           ;oled.c: 97:  LATCbits.LATC4 = 0;
 24709  2B04  121A               	bcf	26,4	;volatile
 24710                           
 24711                           ;oled.c: 108:  OLED_write4bits(0x03);
 24712  2B05  3003               	movlw	3
 24713  2B06  31B4  2465  31AA   	fcall	_OLED_write4bits
 24714                           
 24715                           ;oled.c: 109:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24716  2B09  3007               	movlw	7
 24717  2B0A  0140               	movlb	0	; select bank0
 24718  2B0B  00AB               	movwf	??_OLED_init
 24719  2B0C  307D               	movlw	125
 24720  2B0D                     u10357:	
 24721  2B0D  0B89               	decfsz	9,f
 24722  2B0E  2B0D               	goto	u10357
 24723  2B0F  0BAB               	decfsz	??_OLED_init,f
 24724  2B10  2B0D               	goto	u10357
 24725                           
 24726                           ;oled.c: 110:  OLED_write4bits(0x08);
 24727  2B11  3008               	movlw	8
 24728  2B12  31B4  2465  31AA   	fcall	_OLED_write4bits
 24729                           
 24730                           ;oled.c: 111:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24731  2B15  3007               	movlw	7
 24732  2B16  0140               	movlb	0	; select bank0
 24733  2B17  00AB               	movwf	??_OLED_init
 24734  2B18  307D               	movlw	125
 24735  2B19                     u10367:	
 24736  2B19  0B89               	decfsz	9,f
 24737  2B1A  2B19               	goto	u10367
 24738  2B1B  0BAB               	decfsz	??_OLED_init,f
 24739  2B1C  2B19               	goto	u10367
 24740                           
 24741                           ;oled.c: 113:  OLED_write4bits(0x02);
 24742  2B1D  3002               	movlw	2
 24743  2B1E  31B4  2465  31AA   	fcall	_OLED_write4bits
 24744                           
 24745                           ;oled.c: 114:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24746  2B21  3007               	movlw	7
 24747  2B22  0140               	movlb	0	; select bank0
 24748  2B23  00AB               	movwf	??_OLED_init
 24749  2B24  307D               	movlw	125
 24750  2B25                     u10377:	
 24751  2B25  0B89               	decfsz	9,f
 24752  2B26  2B25               	goto	u10377
 24753  2B27  0BAB               	decfsz	??_OLED_init,f
 24754  2B28  2B25               	goto	u10377
 24755                           
 24756                           ;oled.c: 115:  OLED_write4bits(0x02);
 24757  2B29  3002               	movlw	2
 24758  2B2A  31B4  2465  31AA   	fcall	_OLED_write4bits
 24759                           
 24760                           ;oled.c: 116:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24761  2B2D  3007               	movlw	7
 24762  2B2E  0140               	movlb	0	; select bank0
 24763  2B2F  00AB               	movwf	??_OLED_init
 24764  2B30  307D               	movlw	125
 24765  2B31                     u10387:	
 24766  2B31  0B89               	decfsz	9,f
 24767  2B32  2B31               	goto	u10387
 24768  2B33  0BAB               	decfsz	??_OLED_init,f
 24769  2B34  2B31               	goto	u10387
 24770                           
 24771                           ;oled.c: 117:  OLED_write4bits(0x08);
 24772  2B35  3008               	movlw	8
 24773  2B36  31B4  2465  31AA   	fcall	_OLED_write4bits
 24774                           
 24775                           ;oled.c: 118:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24776  2B39  3007               	movlw	7
 24777  2B3A  0140               	movlb	0	; select bank0
 24778  2B3B  00AB               	movwf	??_OLED_init
 24779  2B3C  307D               	movlw	125
 24780  2B3D                     u10397:	
 24781  2B3D  0B89               	decfsz	9,f
 24782  2B3E  2B3D               	goto	u10397
 24783  2B3F  0BAB               	decfsz	??_OLED_init,f
 24784  2B40  2B3D               	goto	u10397
 24785                           
 24786                           ;oled.c: 120:  OLED_command(0x08);
 24787  2B41  3008               	movlw	8
 24788  2B42  31B1  2115  31AA   	fcall	_OLED_command
 24789                           
 24790                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24791  2B45  3007               	movlw	7
 24792  2B46  0140               	movlb	0	; select bank0
 24793  2B47  00AB               	movwf	??_OLED_init
 24794  2B48  307D               	movlw	125
 24795  2B49                     u10407:	
 24796  2B49  0B89               	decfsz	9,f
 24797  2B4A  2B49               	goto	u10407
 24798  2B4B  0BAB               	decfsz	??_OLED_init,f
 24799  2B4C  2B49               	goto	u10407
 24800                           
 24801                           ;oled.c: 122:  OLED_command(0x01);
 24802  2B4D  3001               	movlw	1
 24803  2B4E  31B1  2115  31AA   	fcall	_OLED_command
 24804                           
 24805                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24806  2B51  3007               	movlw	7
 24807  2B52  0140               	movlb	0	; select bank0
 24808  2B53  00AB               	movwf	??_OLED_init
 24809  2B54  307D               	movlw	125
 24810  2B55                     u10417:	
 24811  2B55  0B89               	decfsz	9,f
 24812  2B56  2B55               	goto	u10417
 24813  2B57  0BAB               	decfsz	??_OLED_init,f
 24814  2B58  2B55               	goto	u10417
 24815                           
 24816                           ;oled.c: 124:  OLED_command(0x06);
 24817  2B59  3006               	movlw	6
 24818  2B5A  31B1  2115  31AA   	fcall	_OLED_command
 24819                           
 24820                           ;oled.c: 125:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24821  2B5D  3007               	movlw	7
 24822  2B5E  0140               	movlb	0	; select bank0
 24823  2B5F  00AB               	movwf	??_OLED_init
 24824  2B60  307D               	movlw	125
 24825  2B61                     u10427:	
 24826  2B61  0B89               	decfsz	9,f
 24827  2B62  2B61               	goto	u10427
 24828  2B63  0BAB               	decfsz	??_OLED_init,f
 24829  2B64  2B61               	goto	u10427
 24830                           
 24831                           ;oled.c: 126:  OLED_command(0x02);
 24832  2B65  3002               	movlw	2
 24833  2B66  31B1  2115  31AA   	fcall	_OLED_command
 24834                           
 24835                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24836  2B69  3007               	movlw	7
 24837  2B6A  0140               	movlb	0	; select bank0
 24838  2B6B  00AB               	movwf	??_OLED_init
 24839  2B6C  307D               	movlw	125
 24840  2B6D                     u10437:	
 24841  2B6D  0B89               	decfsz	9,f
 24842  2B6E  2B6D               	goto	u10437
 24843  2B6F  0BAB               	decfsz	??_OLED_init,f
 24844  2B70  2B6D               	goto	u10437
 24845                           
 24846                           ;oled.c: 128:  OLED_command(0x0C);
 24847  2B71  300C               	movlw	12
 24848  2B72  31B1  2115  31AA   	fcall	_OLED_command
 24849                           
 24850                           ;oled.c: 129:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24851  2B75  3007               	movlw	7
 24852  2B76  0140               	movlb	0	; select bank0
 24853  2B77  00AB               	movwf	??_OLED_init
 24854  2B78  307D               	movlw	125
 24855  2B79                     u10447:	
 24856  2B79  0B89               	decfsz	9,f
 24857  2B7A  2B79               	goto	u10447
 24858  2B7B  0BAB               	decfsz	??_OLED_init,f
 24859  2B7C  2B79               	goto	u10447
 24860  2B7D  0008               	return
 24861  2B7E                     __end_of_OLED_init:	
 24862                           
 24863                           	psect	text74
 24864  3115                     __ptext74:	
 24865 ;; *************** function _OLED_command *****************
 24866 ;; Defined at:
 24867 ;;		line 72 in file "oled.c"
 24868 ;; Parameters:    Size  Location     Type
 24869 ;;  value           1    wreg     unsigned char 
 24870 ;; Auto vars:     Size  Location     Type
 24871 ;;  value           1   10[BANK0 ] unsigned char 
 24872 ;; Return value:  Size  Location     Type
 24873 ;;                  1    wreg      void 
 24874 ;; Registers used:
 24875 ;;		wreg, status,2, status,0, pclath, cstack
 24876 ;; Tracked objects:
 24877 ;;		On entry : 0/0
 24878 ;;		On exit  : 0/0
 24879 ;;		Unchanged: 0/0
 24880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24885 ;;Total ram usage:        1 bytes
 24886 ;; Hardware stack levels used:    1
 24887 ;; Hardware stack levels required when called:    6
 24888 ;; This function calls:
 24889 ;;		_OLED_send
 24890 ;;		_OLED_waitForReady
 24891 ;; This function is called by:
 24892 ;;		_OLED_off
 24893 ;;		_OLED_init
 24894 ;;		_OLED_scrollDisplayLeft
 24895 ;;		_OLED_scrollDisplayRight
 24896 ;;		_OLED_print_xy
 24897 ;;		_OLED_returnHome
 24898 ;;		_OLED_clearDisplay
 24899 ;;		_OLED_loadSpecialChars
 24900 ;;		_menu
 24901 ;;		_returnToPage
 24902 ;;		_OLED_setCursor
 24903 ;; This function uses a non-reentrant model
 24904 ;;
 24905                           
 24906                           
 24907                           ;psect for function _OLED_command
 24908  3115                     _OLED_command:	
 24909                           
 24910                           ;incstack = 0
 24911                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 24912                           ;OLED_command@value stored from wreg
 24913  3115  0140               	movlb	0	; select bank0
 24914  3116  00AA               	movwf	OLED_command@value
 24915                           
 24916                           ;oled.c: 72: void OLED_command(uint8_t value);oled.c: 73: {;oled.c: 74:  OLED_send(value
      +                          , 0);
 24917  3117  01A7               	clrf	OLED_send@mode
 24918  3118  082A               	movf	OLED_command@value,w
 24919  3119  31B1  217E  31B1   	fcall	_OLED_send
 24920                           
 24921                           ;oled.c: 75:  OLED_waitForReady();
 24922  311C  31B1  21E6         	fcall	_OLED_waitForReady
 24923  311E  0008               	return
 24924  311F                     __end_of_OLED_command:	
 24925                           
 24926                           	psect	text75
 24927  31E6                     __ptext75:	
 24928 ;; *************** function _OLED_waitForReady *****************
 24929 ;; Defined at:
 24930 ;;		line 47 in file "oled.c"
 24931 ;; Parameters:    Size  Location     Type
 24932 ;;		None
 24933 ;; Auto vars:     Size  Location     Type
 24934 ;;  busy            1    4[BANK0 ] unsigned char 
 24935 ;; Return value:  Size  Location     Type
 24936 ;;                  1    wreg      void 
 24937 ;; Registers used:
 24938 ;;		wreg, status,2, status,0, pclath, cstack
 24939 ;; Tracked objects:
 24940 ;;		On entry : 0/0
 24941 ;;		On exit  : 0/0
 24942 ;;		Unchanged: 0/0
 24943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24947 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24948 ;;Total ram usage:        1 bytes
 24949 ;; Hardware stack levels used:    1
 24950 ;; Hardware stack levels required when called:    4
 24951 ;; This function calls:
 24952 ;;		_OLED_pulseEnable
 24953 ;; This function is called by:
 24954 ;;		_OLED_command
 24955 ;;		_OLED_write
 24956 ;; This function uses a non-reentrant model
 24957 ;;
 24958                           
 24959                           
 24960                           ;psect for function _OLED_waitForReady
 24961  31E6                     _OLED_waitForReady:	
 24962                           
 24963                           ;oled.c: 51:  TRISCbits.TRISC4 = 1;
 24964                           
 24965                           ;incstack = 0
 24966                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0+pclath+cstack]
 24967  31E6  0140               	movlb	0	; select bank0
 24968  31E7  1614               	bsf	20,4	;volatile
 24969                           
 24970                           ;oled.c: 52:  LATBbits.LATB4 = 0;
 24971  31E8  1219               	bcf	25,4	;volatile
 24972                           
 24973                           ;oled.c: 53:  LATBbits.LATB3 = 1;
 24974  31E9  1599               	bsf	25,3	;volatile
 24975  31EA                     l169:	
 24976                           ;oled.c: 55:  do {
 24977                           
 24978                           
 24979                           ;oled.c: 56:   LATBbits.LATB2 = 0;
 24980  31EA  1119               	bcf	25,2	;volatile
 24981                           
 24982                           ;oled.c: 57:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24983  31EB  3003               	movlw	3
 24984  31EC                     u10457:	
 24985  31EC  0B89               	decfsz	9,f
 24986  31ED  29EC               	goto	u10457
 24987  31EE  0000               	nop
 24988                           
 24989                           ;oled.c: 58:   LATBbits.LATB2 = 1;
 24990  31EF  0140               	movlb	0	; select bank0
 24991  31F0  1519               	bsf	25,2	;volatile
 24992                           
 24993                           ;oled.c: 60:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24994  31F1  3003               	movlw	3
 24995  31F2                     u10467:	
 24996  31F2  0B89               	decfsz	9,f
 24997  31F3  29F2               	goto	u10467
 24998  31F4  0000               	nop
 24999                           
 25000                           ;oled.c: 61:   busy = PORTCbits.RC4;
 25001  31F5  3000               	movlw	0
 25002  31F6  0140               	movlb	0	; select bank0
 25003  31F7  1A0E               	btfsc	14,4	;volatile
 25004  31F8  3001               	movlw	1
 25005  31F9  00A4               	movwf	OLED_waitForReady@busy
 25006                           
 25007                           ;oled.c: 63:   LATBbits.LATB2 = 0;
 25008  31FA  1119               	bcf	25,2	;volatile
 25009                           
 25010                           ;oled.c: 65:   OLED_pulseEnable();
 25011  31FB  31B0  20F9  31B1   	fcall	_OLED_pulseEnable
 25012                           
 25013                           ;oled.c: 66:  } while (busy);
 25014  31FE  0140               	movlb	0	; select bank0
 25015  31FF  0824               	movf	OLED_waitForReady@busy,w
 25016  3200  1D03               	btfss	3,2
 25017  3201  29EA               	goto	l169
 25018                           
 25019                           ;oled.c: 68:  TRISCbits.TRISC4 = 0;
 25020  3202  1214               	bcf	20,4	;volatile
 25021                           
 25022                           ;oled.c: 69:  LATBbits.LATB3 = 0;
 25023  3203  1199               	bcf	25,3	;volatile
 25024  3204  0008               	return
 25025  3205                     __end_of_OLED_waitForReady:	
 25026                           
 25027                           	psect	text76
 25028  317E                     __ptext76:	
 25029 ;; *************** function _OLED_send *****************
 25030 ;; Defined at:
 25031 ;;		line 36 in file "oled.c"
 25032 ;; Parameters:    Size  Location     Type
 25033 ;;  value           1    wreg     unsigned char 
 25034 ;;  mode            1    7[BANK0 ] unsigned char 
 25035 ;; Auto vars:     Size  Location     Type
 25036 ;;  value           1    9[BANK0 ] unsigned char 
 25037 ;; Return value:  Size  Location     Type
 25038 ;;                  1    wreg      void 
 25039 ;; Registers used:
 25040 ;;		wreg, status,2, status,0, pclath, cstack
 25041 ;; Tracked objects:
 25042 ;;		On entry : 0/0
 25043 ;;		On exit  : 0/0
 25044 ;;		Unchanged: 0/0
 25045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25046 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25049 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25050 ;;Total ram usage:        3 bytes
 25051 ;; Hardware stack levels used:    1
 25052 ;; Hardware stack levels required when called:    5
 25053 ;; This function calls:
 25054 ;;		_OLED_write4bits
 25055 ;; This function is called by:
 25056 ;;		_OLED_command
 25057 ;;		_OLED_write
 25058 ;; This function uses a non-reentrant model
 25059 ;;
 25060                           
 25061                           
 25062                           ;psect for function _OLED_send
 25063  317E                     _OLED_send:	
 25064                           
 25065                           ;incstack = 0
 25066                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 25067                           ;OLED_send@value stored from wreg
 25068  317E  0140               	movlb	0	; select bank0
 25069  317F  00A9               	movwf	OLED_send@value
 25070                           
 25071                           ;oled.c: 36: void OLED_send(uint8_t value, uint8_t mode);oled.c: 37: {;oled.c: 38:  LATB
      +                          bits.LATB4 = mode;
 25072  3180  0C27               	rrf	OLED_send@mode,w
 25073  3181  1C03               	skipc
 25074  3182  1219               	bcf	25,4	;volatile
 25075  3183  1803               	skipnc
 25076  3184  1619               	bsf	25,4	;volatile
 25077                           
 25078                           ;oled.c: 39:  LATBbits.LATB3 = 0;
 25079  3185  1199               	bcf	25,3	;volatile
 25080                           
 25081                           ;oled.c: 41:  OLED_write4bits(value >> 4);
 25082  3186  0829               	movf	OLED_send@value,w
 25083  3187  00A8               	movwf	??_OLED_send
 25084  3188  3004               	movlw	4
 25085  3189                     u3815:	
 25086  3189  36A8               	lsrf	??_OLED_send,f
 25087  318A  0B89               	decfsz	9,f
 25088  318B  2989               	goto	u3815
 25089  318C  0828               	movf	??_OLED_send,w
 25090  318D  31B4  2465  31B1   	fcall	_OLED_write4bits
 25091                           
 25092                           ;oled.c: 42:  OLED_write4bits(value);
 25093  3190  0140               	movlb	0	; select bank0
 25094  3191  0829               	movf	OLED_send@value,w
 25095  3192  31B4  2465         	fcall	_OLED_write4bits
 25096  3194  0008               	return
 25097  3195                     __end_of_OLED_send:	
 25098                           
 25099                           	psect	text77
 25100  3465                     __ptext77:	
 25101 ;; *************** function _OLED_write4bits *****************
 25102 ;; Defined at:
 25103 ;;		line 25 in file "oled.c"
 25104 ;; Parameters:    Size  Location     Type
 25105 ;;  value           1    wreg     unsigned char 
 25106 ;; Auto vars:     Size  Location     Type
 25107 ;;  value           1    6[BANK0 ] unsigned char 
 25108 ;; Return value:  Size  Location     Type
 25109 ;;                  1    wreg      void 
 25110 ;; Registers used:
 25111 ;;		wreg, status,2, status,0, pclath, cstack
 25112 ;; Tracked objects:
 25113 ;;		On entry : 0/0
 25114 ;;		On exit  : 0/0
 25115 ;;		Unchanged: 0/0
 25116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25118 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25119 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25120 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25121 ;;Total ram usage:        3 bytes
 25122 ;; Hardware stack levels used:    1
 25123 ;; Hardware stack levels required when called:    4
 25124 ;; This function calls:
 25125 ;;		_OLED_pulseEnable
 25126 ;; This function is called by:
 25127 ;;		_OLED_send
 25128 ;;		_OLED_init
 25129 ;; This function uses a non-reentrant model
 25130 ;;
 25131                           
 25132                           
 25133                           ;psect for function _OLED_write4bits
 25134  3465                     _OLED_write4bits:	
 25135                           
 25136                           ;incstack = 0
 25137                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0+pclath+cstack]
 25138                           ;OLED_write4bits@value stored from wreg
 25139  3465  0140               	movlb	0	; select bank0
 25140  3466  00A6               	movwf	OLED_write4bits@value
 25141                           
 25142                           ;oled.c: 25: void OLED_write4bits(uint8_t value);oled.c: 26: {;oled.c: 27:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 25143  3467  0826               	movf	OLED_write4bits@value,w
 25144  3468  3901               	andlw	1
 25145  3469  00A4               	movwf	??_OLED_write4bits
 25146  346A  0DA4               	rlf	??_OLED_write4bits,f
 25147  346B  0819               	movf	25,w	;volatile
 25148  346C  0624               	xorwf	??_OLED_write4bits,w
 25149  346D  39FD               	andlw	-3
 25150  346E  0624               	xorwf	??_OLED_write4bits,w
 25151  346F  0099               	movwf	25	;volatile
 25152                           
 25153                           ;oled.c: 28:  LATBbits.LATB0 = (value >> 1) & 0x01;
 25154  3470  0826               	movf	OLED_write4bits@value,w
 25155  3471  00A4               	movwf	??_OLED_write4bits
 25156  3472  3001               	movlw	1
 25157  3473                     u3785:	
 25158  3473  36A4               	lsrf	??_OLED_write4bits,f
 25159  3474  0B89               	decfsz	9,f
 25160  3475  2C73               	goto	u3785
 25161  3476  3001               	movlw	1
 25162  3477  0524               	andwf	??_OLED_write4bits,w
 25163  3478  00A5               	movwf	??_OLED_write4bits+1
 25164  3479  0819               	movf	25,w	;volatile
 25165  347A  0625               	xorwf	??_OLED_write4bits+1,w
 25166  347B  39FE               	andlw	-2
 25167  347C  0625               	xorwf	??_OLED_write4bits+1,w
 25168  347D  0099               	movwf	25	;volatile
 25169                           
 25170                           ;oled.c: 29:  LATCbits.LATC5 = (value >> 2) & 0x01;
 25171  347E  0826               	movf	OLED_write4bits@value,w
 25172  347F  00A4               	movwf	??_OLED_write4bits
 25173  3480  3002               	movlw	2
 25174  3481                     u3795:	
 25175  3481  36A4               	lsrf	??_OLED_write4bits,f
 25176  3482  0B89               	decfsz	9,f
 25177  3483  2C81               	goto	u3795
 25178  3484  0824               	movf	??_OLED_write4bits,w
 25179  3485  3901               	andlw	1
 25180  3486  00A5               	movwf	??_OLED_write4bits+1
 25181  3487  0EA5               	swapf	??_OLED_write4bits+1,f
 25182  3488  0DA5               	rlf	??_OLED_write4bits+1,f
 25183  3489  081A               	movf	26,w	;volatile
 25184  348A  0625               	xorwf	??_OLED_write4bits+1,w
 25185  348B  39DF               	andlw	-33
 25186  348C  0625               	xorwf	??_OLED_write4bits+1,w
 25187  348D  009A               	movwf	26	;volatile
 25188                           
 25189                           ;oled.c: 30:  LATCbits.LATC4 = (value >> 3) & 0x01;
 25190  348E  0826               	movf	OLED_write4bits@value,w
 25191  348F  00A4               	movwf	??_OLED_write4bits
 25192  3490  3003               	movlw	3
 25193  3491                     u3805:	
 25194  3491  36A4               	lsrf	??_OLED_write4bits,f
 25195  3492  0B89               	decfsz	9,f
 25196  3493  2C91               	goto	u3805
 25197  3494  0824               	movf	??_OLED_write4bits,w
 25198  3495  3901               	andlw	1
 25199  3496  00A5               	movwf	??_OLED_write4bits+1
 25200  3497  0EA5               	swapf	??_OLED_write4bits+1,f
 25201  3498  081A               	movf	26,w	;volatile
 25202  3499  0625               	xorwf	??_OLED_write4bits+1,w
 25203  349A  39EF               	andlw	-17
 25204  349B  0625               	xorwf	??_OLED_write4bits+1,w
 25205  349C  009A               	movwf	26	;volatile
 25206                           
 25207                           ;oled.c: 32:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25208  349D  3010               	movlw	16
 25209  349E                     u10477:	
 25210  349E  0B89               	decfsz	9,f
 25211  349F  2C9E               	goto	u10477
 25212  34A0  3200               	nop2
 25213                           
 25214                           ;oled.c: 33:  OLED_pulseEnable();
 25215  34A1  31B0  20F9         	fcall	_OLED_pulseEnable
 25216  34A3  0008               	return
 25217  34A4                     __end_of_OLED_write4bits:	
 25218                           
 25219                           	psect	text78
 25220  30F9                     __ptext78:	
 25221 ;; *************** function _OLED_pulseEnable *****************
 25222 ;; Defined at:
 25223 ;;		line 18 in file "oled.c"
 25224 ;; Parameters:    Size  Location     Type
 25225 ;;		None
 25226 ;; Auto vars:     Size  Location     Type
 25227 ;;		None
 25228 ;; Return value:  Size  Location     Type
 25229 ;;                  1    wreg      void 
 25230 ;; Registers used:
 25231 ;;		wreg
 25232 ;; Tracked objects:
 25233 ;;		On entry : 0/0
 25234 ;;		On exit  : 0/0
 25235 ;;		Unchanged: 0/0
 25236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25241 ;;Total ram usage:        0 bytes
 25242 ;; Hardware stack levels used:    1
 25243 ;; Hardware stack levels required when called:    3
 25244 ;; This function calls:
 25245 ;;		Nothing
 25246 ;; This function is called by:
 25247 ;;		_OLED_write4bits
 25248 ;;		_OLED_waitForReady
 25249 ;; This function uses a non-reentrant model
 25250 ;;
 25251                           
 25252                           
 25253                           ;psect for function _OLED_pulseEnable
 25254  30F9                     _OLED_pulseEnable:	
 25255                           
 25256                           ;oled.c: 20:  LATBbits.LATB2 = 1;
 25257                           
 25258                           ;incstack = 0
 25259                           ; Regs used in _OLED_pulseEnable: [wreg]
 25260  30F9  0140               	movlb	0	; select bank0
 25261  30FA  1519               	bsf	25,2	;volatile
 25262                           
 25263                           ;oled.c: 21:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25264  30FB  3010               	movlw	16
 25265  30FC                     u10487:	
 25266  30FC  0B89               	decfsz	9,f
 25267  30FD  28FC               	goto	u10487
 25268  30FE  3200               	nop2
 25269                           
 25270                           ;oled.c: 22:  LATBbits.LATB2 = 0;
 25271  30FF  0140               	movlb	0	; select bank0
 25272  3100  1119               	bcf	25,2	;volatile
 25273  3101  0008               	return
 25274  3102                     __end_of_OLED_pulseEnable:	
 25275                           
 25276                           	psect	intentry
 25277  0004                     __pintentry:	
 25278 ;; *************** function _ISR *****************
 25279 ;; Defined at:
 25280 ;;		line 48 in file "interrupt.c"
 25281 ;; Parameters:    Size  Location     Type
 25282 ;;		None
 25283 ;; Auto vars:     Size  Location     Type
 25284 ;;		None
 25285 ;; Return value:  Size  Location     Type
 25286 ;;                  1    wreg      void 
 25287 ;; Registers used:
 25288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25289 ;; Tracked objects:
 25290 ;;		On entry : 0/0
 25291 ;;		On exit  : 0/0
 25292 ;;		Unchanged: 0/0
 25293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25296 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25298 ;;Total ram usage:        4 bytes
 25299 ;; Hardware stack levels used:    1
 25300 ;; Hardware stack levels required when called:    2
 25301 ;; This function calls:
 25302 ;;		_pushButtonISR
 25303 ;;		_rotISR
 25304 ;;		_uartReceiveISR
 25305 ;; This function is called by:
 25306 ;;		Interrupt level 1
 25307 ;; This function uses a non-reentrant model
 25308 ;;
 25309                           
 25310  0004                     _ISR:	
 25311                           
 25312                           ;incstack = 0
 25313  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 25314                           
 25315                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25316  0005  3180               	pagesel	$
 25317                           
 25318                           ;interrupt.c: 50:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 25319  0006  014E               	movlb	14	; select bank14
 25320  0007  1A96               	btfsc	22,5	;volatile
 25321  0008  1E8C               	btfss	12,5	;volatile
 25322  0009  281D               	goto	i1l270
 25323                           
 25324                           ;interrupt.c: 53:   tick10ms++;
 25325  000A  3001               	movlw	1
 25326  000B  0140               	movlb	0	; select bank0
 25327  000C  00A0               	movwf	??_ISR
 25328  000D  0820               	movf	??_ISR,w
 25329  000E  0142               	movlb	2	; select bank2
 25330  000F  07EF               	addwf	_tick10ms^(0+256),f	;volatile
 25331                           
 25332                           ;interrupt.c: 54:   if (pbState == PB_WAIT)
 25333  0010  3004               	movlw	4
 25334  0011  067D               	xorwf	_pbState,w	;volatile
 25335  0012  1D03               	btfss	3,2
 25336  0013  2817               	goto	i1l6576
 25337                           
 25338                           ;interrupt.c: 55:    pushButtonISR();
 25339  0014  31B5  25B8  3180   	fcall	_pushButtonISR
 25340  0017                     i1l6576:	
 25341                           
 25342                           ;interrupt.c: 56:   TMR0 = 178;
 25343  0017  30B2               	movlw	178
 25344  0018  014B               	movlb	11	; select bank11
 25345  0019  009C               	movwf	28	;volatile
 25346                           
 25347                           ;interrupt.c: 57:   PIR0bits.TMR0IF = 0;
 25348  001A  014E               	movlb	14	; select bank14
 25349  001B  128C               	bcf	12,5	;volatile
 25350                           
 25351                           ;interrupt.c: 58:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 25352  001C  2878               	goto	i1l283
 25353  001D                     i1l270:	
 25354  001D  1A16               	btfsc	22,4	;volatile
 25355  001E  1E0C               	btfss	12,4	;volatile
 25356  001F  2839               	goto	i1l273
 25357                           
 25358                           ;interrupt.c: 60:   if (IOCAFbits.IOCAF7 == 1) {
 25359  0020  017E               	movlb	62	; select bank62
 25360  0021  1FBF               	btfss	63,7	;volatile
 25361  0022  2828               	goto	i1l6588
 25362                           
 25363                           ;interrupt.c: 61:    pushButtonISR();
 25364  0023  31B5  25B8  3180   	fcall	_pushButtonISR
 25365                           
 25366                           ;interrupt.c: 62:    IOCAFbits.IOCAF7 = 0;
 25367  0026  017E               	movlb	62	; select bank62
 25368  0027  13BF               	bcf	63,7	;volatile
 25369  0028                     i1l6588:	
 25370                           
 25371                           ;interrupt.c: 64:   if (IOCAFbits.IOCAF4 == 1) {
 25372  0028  1E3F               	btfss	63,4	;volatile
 25373  0029  282F               	goto	i1l6594
 25374                           
 25375                           ;interrupt.c: 65:    rotISR();
 25376  002A  31B4  24A4  3180   	fcall	_rotISR
 25377                           
 25378                           ;interrupt.c: 66:    IOCAFbits.IOCAF4 = 0;
 25379  002D  017E               	movlb	62	; select bank62
 25380  002E  123F               	bcf	63,4	;volatile
 25381  002F                     i1l6594:	
 25382                           
 25383                           ;interrupt.c: 68:   if (IOCAFbits.IOCAF5 == 1) {
 25384  002F  1EBF               	btfss	63,5	;volatile
 25385  0030  2836               	goto	i1l6600
 25386                           
 25387                           ;interrupt.c: 69:    rotISR();
 25388  0031  31B4  24A4  3180   	fcall	_rotISR
 25389                           
 25390                           ;interrupt.c: 70:    IOCAFbits.IOCAF5 = 0;
 25391  0034  017E               	movlb	62	; select bank62
 25392  0035  12BF               	bcf	63,5	;volatile
 25393  0036                     i1l6600:	
 25394                           
 25395                           ;interrupt.c: 72:   PIR0bits.IOCIF = 0;
 25396  0036  014E               	movlb	14	; select bank14
 25397  0037  120C               	bcf	12,4	;volatile
 25398                           
 25399                           ;interrupt.c: 73:  } else if (INTCONbits.PEIE == 1) {
 25400  0038  2878               	goto	i1l283
 25401  0039                     i1l273:	
 25402  0039  1F0B               	btfss	11,6	;volatile
 25403  003A  2878               	goto	i1l283
 25404                           
 25405                           ;interrupt.c: 74:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 25406  003B  181A               	btfsc	26,0	;volatile
 25407  003C  1C10               	btfss	16,0	;volatile
 25408  003D  2871               	goto	i1l279
 25409                           
 25410                           ;interrupt.c: 77:    if (tick100ms++ >= 1000000000UL)
 25411  003E  0142               	movlb	2	; select bank2
 25412  003F  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 25413  0040  0140               	movlb	0	; select bank0
 25414  0041  00A3               	movwf	??_ISR+3
 25415  0042  0142               	movlb	2	; select bank2
 25416  0043  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 25417  0044  0140               	movlb	0	; select bank0
 25418  0045  00A2               	movwf	??_ISR+2
 25419  0046  0142               	movlb	2	; select bank2
 25420  0047  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 25421  0048  0140               	movlb	0	; select bank0
 25422  0049  00A1               	movwf	??_ISR+1
 25423  004A  0142               	movlb	2	; select bank2
 25424  004B  0863               	movf	_tick100ms^(0+256),w	;volatile
 25425  004C  0140               	movlb	0	; select bank0
 25426  004D  00A0               	movwf	??_ISR
 25427  004E  3001               	movlw	1
 25428  004F  0142               	movlb	2	; select bank2
 25429  0050  07E3               	addwf	_tick100ms^(0+256),f	;volatile
 25430  0051  3000               	movlw	0
 25431  0052  3DE4               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 25432  0053  3DE5               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 25433  0054  3DE6               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 25434  0055  3000               	movlw	0
 25435  0056  0140               	movlb	0	; select bank0
 25436  0057  0220               	subwf	??_ISR,w
 25437  0058  30CA               	movlw	202
 25438  0059  3B21               	subwfb	??_ISR+1,w
 25439  005A  309A               	movlw	154
 25440  005B  3B22               	subwfb	??_ISR+2,w
 25441  005C  303B               	movlw	59
 25442  005D  3B23               	subwfb	??_ISR+3,w
 25443  005E  1C03               	btfss	3,0
 25444  005F  2869               	goto	i1l6610
 25445                           
 25446                           ;interrupt.c: 78:     tick100ms = 0;
 25447  0060  3000               	movlw	0
 25448  0061  0142               	movlb	2	; select bank2
 25449  0062  00E6               	movwf	(_tick100ms+3)^(0+256)	;volatile
 25450  0063  3000               	movlw	0
 25451  0064  00E5               	movwf	(_tick100ms+2)^(0+256)	;volatile
 25452  0065  3000               	movlw	0
 25453  0066  00E4               	movwf	(_tick100ms+1)^(0+256)	;volatile
 25454  0067  3000               	movlw	0
 25455  0068  00E3               	movwf	_tick100ms^(0+256)	;volatile
 25456  0069                     i1l6610:	
 25457                           
 25458                           ;interrupt.c: 79:    TMR1 = 53035;
 25459  0069  30CF               	movlw	207
 25460  006A  0144               	movlb	4	; select bank4
 25461  006B  008D               	movwf	13	;volatile
 25462  006C  302B               	movlw	43
 25463  006D  008C               	movwf	12	;volatile
 25464                           
 25465                           ;interrupt.c: 80:    PIR4bits.TMR1IF = 0;
 25466  006E  014E               	movlb	14	; select bank14
 25467  006F  1010               	bcf	16,0	;volatile
 25468                           
 25469                           ;interrupt.c: 81:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 25470  0070  2878               	goto	i1l283
 25471  0071                     i1l279:	
 25472  0071  1A99               	btfsc	25,5	;volatile
 25473  0072  1E8F               	btfss	15,5	;volatile
 25474  0073  2878               	goto	i1l283
 25475                           
 25476                           ;interrupt.c: 82:    uartReceiveISR();
 25477  0074  31B6  2691         	fcall	_uartReceiveISR
 25478                           
 25479                           ;interrupt.c: 83:    PIR3bits.RC1IF = 0;
 25480  0076  014E               	movlb	14	; select bank14
 25481  0077  128F               	bcf	15,5	;volatile
 25482  0078                     i1l283:	
 25483  0078  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 25484  0079  0009               	retfie
 25485  007A                     __end_of_ISR:	
 25486                           
 25487                           	psect	text80
 25488  3691                     __ptext80:	
 25489 ;; *************** function _uartReceiveISR *****************
 25490 ;; Defined at:
 25491 ;;		line 39 in file "uart.c"
 25492 ;; Parameters:    Size  Location     Type
 25493 ;;		None
 25494 ;; Auto vars:     Size  Location     Type
 25495 ;;		None
 25496 ;; Return value:  Size  Location     Type
 25497 ;;                  1    wreg      void 
 25498 ;; Registers used:
 25499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25500 ;; Tracked objects:
 25501 ;;		On entry : 0/0
 25502 ;;		On exit  : 0/0
 25503 ;;		Unchanged: 0/0
 25504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25507 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25508 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25509 ;;Total ram usage:        1 bytes
 25510 ;; Hardware stack levels used:    1
 25511 ;; Hardware stack levels required when called:    1
 25512 ;; This function calls:
 25513 ;;		_strncpy
 25514 ;; This function is called by:
 25515 ;;		_ISR
 25516 ;; This function uses a non-reentrant model
 25517 ;;
 25518                           
 25519                           
 25520                           ;psect for function _uartReceiveISR
 25521  3691                     _uartReceiveISR:	
 25522                           
 25523                           ;uart.c: 41:  static char buffer[20];;uart.c: 43:  static uint8_t checksum = 0;;uart.c: 
      +                          45:  if (RC1STAbits.OERR)
 25524                           
 25525                           ;incstack = 0
 25526                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25527  3691  0142               	movlb	2	; select bank2
 25528  3692  1C9D               	btfss	29,1	;volatile
 25529  3693  2E9B               	goto	i1l6476
 25530                           
 25531                           ;uart.c: 46:  {;uart.c: 47:   RC1STAbits.CREN = 0;
 25532  3694  121D               	bcf	29,4	;volatile
 25533                           
 25534                           ;uart.c: 48:   RC1STAbits.CREN = 1;
 25535  3695  161D               	bsf	29,4	;volatile
 25536                           
 25537                           ;uart.c: 49:   rxOErrCount++;
 25538  3696  3001               	movlw	1
 25539  3697  00F6               	movwf	??_uartReceiveISR
 25540  3698  0876               	movf	??_uartReceiveISR,w
 25541  3699  0143               	movlb	3	; select bank3
 25542  369A  07EC               	addwf	_rxOErrCount^(0+384),f	;volatile
 25543  369B                     i1l6476:	
 25544                           
 25545                           ;uart.c: 51:  if (RC1STAbits.FERR)
 25546  369B  0142               	movlb	2	; select bank2
 25547  369C  1D1D               	btfss	29,2	;volatile
 25548  369D  2EA5               	goto	i1l6482
 25549                           
 25550                           ;uart.c: 52:  {;uart.c: 53:   RC1STAbits.SPEN = 0;
 25551  369E  139D               	bcf	29,7	;volatile
 25552                           
 25553                           ;uart.c: 54:   RC1STAbits.SPEN = 1;
 25554  369F  179D               	bsf	29,7	;volatile
 25555                           
 25556                           ;uart.c: 55:   rxFErrCount++;
 25557  36A0  3001               	movlw	1
 25558  36A1  00F6               	movwf	??_uartReceiveISR
 25559  36A2  0876               	movf	??_uartReceiveISR,w
 25560  36A3  0143               	movlb	3	; select bank3
 25561  36A4  07ED               	addwf	_rxFErrCount^(0+384),f	;volatile
 25562  36A5                     i1l6482:	
 25563                           
 25564                           ;uart.c: 59:  if (rxCount < sizeof(dataPacket)) {
 25565  36A5  300F               	movlw	15
 25566  36A6  0140               	movlb	0	; select bank0
 25567  36A7  026B               	subwf	_rxCount,w	;volatile
 25568  36A8  1803               	skipnc
 25569  36A9  2EC5               	goto	i1l6488
 25570                           
 25571                           ;uart.c: 60:   buffer[rxCount] = RC1REG;
 25572  36AA  0142               	movlb	2	; select bank2
 25573  36AB  0819               	movf	25,w	;volatile
 25574  36AC  00F6               	movwf	??_uartReceiveISR
 25575  36AD  0140               	movlb	0	; select bank0
 25576  36AE  086B               	movf	_rxCount,w
 25577  36AF  3ECE               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25578  36B0  0086               	movwf	6
 25579  36B1  3002               	movlw	2	; select bank5/6
 25580  36B2  0087               	movwf	7
 25581  36B3  0876               	movf	??_uartReceiveISR,w
 25582  36B4  0081               	movwf	1
 25583                           
 25584                           ;uart.c: 61:   checksum ^= buffer[rxCount];
 25585  36B5  086B               	movf	_rxCount,w
 25586  36B6  3ECE               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25587  36B7  0086               	movwf	6
 25588  36B8  3002               	movlw	2	; select bank5/6
 25589  36B9  0087               	movwf	7
 25590  36BA  0801               	movf	1,w
 25591  36BB  00F6               	movwf	??_uartReceiveISR
 25592  36BC  0876               	movf	??_uartReceiveISR,w
 25593  36BD  0143               	movlb	3	; select bank3
 25594  36BE  06EA               	xorwf	uartReceiveISR@checksum^(0+384),f
 25595                           
 25596                           ;uart.c: 62:   rxCount++;
 25597  36BF  3001               	movlw	1
 25598  36C0  00F6               	movwf	??_uartReceiveISR
 25599  36C1  0876               	movf	??_uartReceiveISR,w
 25600  36C2  0140               	movlb	0	; select bank0
 25601  36C3  07EB               	addwf	_rxCount,f	;volatile
 25602                           
 25603                           ;uart.c: 63:  } else {
 25604  36C4  0008               	return
 25605  36C5                     i1l6488:	
 25606                           
 25607                           ;uart.c: 65:   if (RC1REG == checksum) {
 25608  36C5  0142               	movlb	2	; select bank2
 25609  36C6  0819               	movf	25,w	;volatile
 25610  36C7  0143               	movlb	3	; select bank3
 25611  36C8  066A               	xorwf	uartReceiveISR@checksum^(0+384),w
 25612  36C9  1D03               	skipz
 25613  36CA  2EDA               	goto	i1l6494
 25614                           
 25615                           ;uart.c: 67:    dataReadyFlag = 1;
 25616  36CB  3001               	movlw	1
 25617  36CC  00F6               	movwf	??_uartReceiveISR
 25618  36CD  0876               	movf	??_uartReceiveISR,w
 25619  36CE  00EB               	movwf	_dataReadyFlag^(0+384)	;volatile
 25620                           
 25621                           ;uart.c: 68:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 25622  36CF  30CE               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25623  36D0  00F6               	movwf	??_uartReceiveISR
 25624  36D1  0876               	movf	??_uartReceiveISR,w
 25625  36D2  00F0               	movwf	strncpy@s
 25626  36D3  300F               	movlw	15
 25627  36D4  00F1               	movwf	strncpy@n
 25628  36D5  3000               	movlw	0
 25629  36D6  00F2               	movwf	strncpy@n+1
 25630  36D7  3030               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 25631  36D8  31B2  22F7         	fcall	_strncpy
 25632  36DA                     i1l6494:	
 25633                           
 25634                           ;uart.c: 70:   checksum = 0;
 25635  36DA  0143               	movlb	3	; select bank3
 25636  36DB  01EA               	clrf	uartReceiveISR@checksum^(0+384)
 25637                           
 25638                           ;uart.c: 71:   rxCount = 0;
 25639  36DC  0140               	movlb	0	; select bank0
 25640  36DD  01EB               	clrf	_rxCount	;volatile
 25641  36DE  0008               	return
 25642  36DF                     __end_of_uartReceiveISR:	
 25643                           
 25644                           	psect	text81
 25645  32F7                     __ptext81:	
 25646 ;; *************** function _strncpy *****************
 25647 ;; Defined at:
 25648 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 25649 ;; Parameters:    Size  Location     Type
 25650 ;;  d               1    wreg     PTR unsigned char 
 25651 ;;		 -> dataPacket(15), 
 25652 ;;  s               1    0[COMMON] PTR const unsigned char 
 25653 ;;		 -> uartReceiveISR@buffer(20), 
 25654 ;;  n               2    1[COMMON] unsigned int 
 25655 ;; Auto vars:     Size  Location     Type
 25656 ;;  d               1    4[COMMON] PTR unsigned char 
 25657 ;;		 -> dataPacket(15), 
 25658 ;;  cp              1    5[COMMON] PTR unsigned char 
 25659 ;;		 -> dataPacket(15), 
 25660 ;; Return value:  Size  Location     Type
 25661 ;;                  1    wreg      PTR unsigned char 
 25662 ;; Registers used:
 25663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 25664 ;; Tracked objects:
 25665 ;;		On entry : 0/0
 25666 ;;		On exit  : 0/0
 25667 ;;		Unchanged: 0/0
 25668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25669 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25670 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25671 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25672 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25673 ;;Total ram usage:        6 bytes
 25674 ;; Hardware stack levels used:    1
 25675 ;; This function calls:
 25676 ;;		Nothing
 25677 ;; This function is called by:
 25678 ;;		_uartReceiveISR
 25679 ;; This function uses a non-reentrant model
 25680 ;;
 25681                           
 25682                           
 25683                           ;psect for function _strncpy
 25684  32F7                     _strncpy:	
 25685                           
 25686                           ;incstack = 0
 25687                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 25688                           ;strncpy@d stored from wreg
 25689  32F7  00F4               	movwf	strncpy@d
 25690  32F8  0874               	movf	strncpy@d,w
 25691  32F9  00F3               	movwf	??_strncpy
 25692  32FA  0873               	movf	??_strncpy,w
 25693  32FB  00F5               	movwf	strncpy@cp
 25694  32FC                     i1l5224:	
 25695  32FC  0871               	movf	strncpy@n,w
 25696  32FD  0472               	iorwf	strncpy@n+1,w
 25697  32FE  1903               	btfsc	3,2
 25698  32FF  2B1D               	goto	i1l5230
 25699  3300  3001               	movlw	1
 25700  3301  02F1               	subwf	strncpy@n,f
 25701  3302  3000               	movlw	0
 25702  3303  3BF2               	subwfb	strncpy@n+1,f
 25703  3304  0875               	movf	strncpy@cp,w
 25704  3305  0086               	movwf	6
 25705  3306  3002               	movlw	2	; select bank4/5
 25706  3307  0087               	movwf	7
 25707  3308  0AF5               	incf	strncpy@cp,f
 25708  3309  0870               	movf	strncpy@s,w
 25709  330A  0084               	movwf	4
 25710  330B  3002               	movlw	2	; select bank4/5
 25711  330C  0085               	movwf	5
 25712  330D  0AF0               	incf	strncpy@s,f
 25713  330E  0800               	movf	0,w
 25714  330F  3FC0               	movwi [0]fsr1
 25715  3310  0889               	movf	9,f
 25716  3311  1903               	btfsc	3,2
 25717  3312  2B1D               	goto	i1l5230
 25718  3313  2AFC               	goto	i1l5224
 25719  3314                     i1l5226:	
 25720  3314  0875               	movf	strncpy@cp,w
 25721  3315  0086               	movwf	6
 25722  3316  3002               	movlw	2	; select bank4/5
 25723  3317  0087               	movwf	7
 25724  3318  0181               	clrf	1
 25725  3319  3001               	movlw	1
 25726  331A  00F3               	movwf	??_strncpy
 25727  331B  0873               	movf	??_strncpy,w
 25728  331C  07F5               	addwf	strncpy@cp,f
 25729  331D                     i1l5230:	
 25730  331D  3001               	movlw	1
 25731  331E  02F1               	subwf	strncpy@n,f
 25732  331F  3000               	movlw	0
 25733  3320  3BF2               	subwfb	strncpy@n+1,f
 25734  3321  0A71               	incf	strncpy@n,w
 25735  3322  1D03               	skipz
 25736  3323  2B14               	goto	i1l5226
 25737  3324  0A72               	incf	strncpy@n+1,w
 25738  3325  1903               	btfsc	3,2
 25739  3326  0008               	return
 25740  3327  2B14               	goto	i1l5226
 25741  3328                     __end_of_strncpy:	
 25742                           
 25743                           	psect	text82
 25744  34A4                     __ptext82:	
 25745 ;; *************** function _rotISR *****************
 25746 ;; Defined at:
 25747 ;;		line 34 in file "inputs.c"
 25748 ;; Parameters:    Size  Location     Type
 25749 ;;		None
 25750 ;; Auto vars:     Size  Location     Type
 25751 ;;  input           1   11[COMMON] unsigned char 
 25752 ;; Return value:  Size  Location     Type
 25753 ;;                  1    wreg      void 
 25754 ;; Registers used:
 25755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 25756 ;; Tracked objects:
 25757 ;;		On entry : 0/0
 25758 ;;		On exit  : 0/0
 25759 ;;		Unchanged: 0/0
 25760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25763 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25764 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25765 ;;Total ram usage:        8 bytes
 25766 ;; Hardware stack levels used:    1
 25767 ;; Hardware stack levels required when called:    1
 25768 ;; This function calls:
 25769 ;;		i1_timeNow
 25770 ;; This function is called by:
 25771 ;;		_ISR
 25772 ;; This function uses a non-reentrant model
 25773 ;;
 25774                           
 25775                           
 25776                           ;psect for function _rotISR
 25777  34A4                     _rotISR:	
 25778                           
 25779                           ;inputs.c: 36:  uint8_t input;;inputs.c: 38:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 25780                           
 25781                           ;incstack = 0
 25782                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 25783  34A4  0140               	movlb	0	; select bank0
 25784  34A5  0E0C               	swapf	12,w	;volatile
 25785  34A6  3901               	andlw	1
 25786  34A7  00F4               	movwf	??_rotISR
 25787  34A8  0E0C               	swapf	12,w	;volatile
 25788  34A9  0C89               	rrf	9,f
 25789  34AA  3901               	andlw	1
 25790  34AB  0709               	addwf	9,w
 25791  34AC  0474               	iorwf	??_rotISR,w
 25792  34AD  00F5               	movwf	??_rotISR+1
 25793  34AE  0875               	movf	??_rotISR+1,w
 25794  34AF  00FB               	movwf	rotISR@input
 25795                           
 25796                           ;inputs.c: 41:  curRotState = transition_table[curRotState & 0b00000111][input];
 25797  34B0  087C               	movf	_curRotState,w	;volatile
 25798  34B1  3907               	andlw	7
 25799  34B2  00F4               	movwf	??_rotISR
 25800  34B3  01F5               	clrf	??_rotISR+1
 25801  34B4  35F4               	lslf	??_rotISR,f
 25802  34B5  0DF5               	rlf	??_rotISR+1,f
 25803  34B6  35F4               	lslf	??_rotISR,f
 25804  34B7  0DF5               	rlf	??_rotISR+1,f
 25805  34B8  30CD               	movlw	low (_transition_table| (0+32768))
 25806  34B9  00F6               	movwf	??_rotISR+2
 25807  34BA  30B8               	movlw	high (_transition_table| (0+32768))
 25808  34BB  00F7               	movwf	??_rotISR+3
 25809  34BC  0874               	movf	??_rotISR,w
 25810  34BD  0776               	addwf	??_rotISR+2,w
 25811  34BE  00F8               	movwf	??_rotISR+4
 25812  34BF  0875               	movf	??_rotISR+1,w
 25813  34C0  3D77               	addwfc	??_rotISR+3,w
 25814  34C1  00F9               	movwf	??_rotISR+5
 25815  34C2  087B               	movf	rotISR@input,w
 25816  34C3  0778               	addwf	??_rotISR+4,w
 25817  34C4  0084               	movwf	4
 25818  34C5  0879               	movf	??_rotISR+5,w
 25819  34C6  1803               	skipnc
 25820  34C7  0A79               	incf	??_rotISR+5,w
 25821  34C8  0085               	movwf	5
 25822  34C9  0800               	movf	0,w	;code access
 25823  34CA  00FA               	movwf	??_rotISR+6
 25824  34CB  087A               	movf	??_rotISR+6,w
 25825  34CC  00FC               	movwf	_curRotState	;volatile
 25826                           
 25827                           ;inputs.c: 44:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 25828  34CD  1FFC               	btfss	_curRotState,7	;volatile
 25829  34CE  2CD4               	goto	i1l6464
 25830  34CF  3001               	movlw	1
 25831  34D0  00F4               	movwf	??_rotISR
 25832  34D1  0874               	movf	??_rotISR,w
 25833  34D2  0143               	movlb	3	; select bank3
 25834  34D3  00EE               	movwf	_rotDir^(0+384)	;volatile
 25835  34D4                     i1l6464:	
 25836                           
 25837                           ;inputs.c: 45:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 25838  34D4  1F7C               	btfss	_curRotState,6	;volatile
 25839  34D5  2CDB               	goto	i1l6468
 25840  34D6  3002               	movlw	2
 25841  34D7  00F4               	movwf	??_rotISR
 25842  34D8  0874               	movf	??_rotISR,w
 25843  34D9  0143               	movlb	3	; select bank3
 25844  34DA  00EE               	movwf	_rotDir^(0+384)	;volatile
 25845  34DB                     i1l6468:	
 25846                           
 25847                           ;inputs.c: 47:  userActivity = timeNow();
 25848  34DB  31B1  210B         	fcall	i1_timeNow
 25849  34DD  0873               	movf	?i1_timeNow+3,w
 25850  34DE  0142               	movlb	2	; select bank2
 25851  34DF  00EA               	movwf	(_userActivity+3)^(0+256)	;volatile
 25852  34E0  0872               	movf	?i1_timeNow+2,w
 25853  34E1  00E9               	movwf	(_userActivity+2)^(0+256)	;volatile
 25854  34E2  0871               	movf	?i1_timeNow+1,w
 25855  34E3  00E8               	movwf	(_userActivity+1)^(0+256)	;volatile
 25856  34E4  0870               	movf	?i1_timeNow,w
 25857  34E5  00E7               	movwf	_userActivity^(0+256)	;volatile
 25858  34E6  0008               	return
 25859  34E7                     __end_of_rotISR:	
 25860                           
 25861                           	psect	text83
 25862  35B8                     __ptext83:	
 25863 ;; *************** function _pushButtonISR *****************
 25864 ;; Defined at:
 25865 ;;		line 54 in file "inputs.c"
 25866 ;; Parameters:    Size  Location     Type
 25867 ;;		None
 25868 ;; Auto vars:     Size  Location     Type
 25869 ;;  time            1    5[COMMON] unsigned char 
 25870 ;; Return value:  Size  Location     Type
 25871 ;;                  1    wreg      void 
 25872 ;; Registers used:
 25873 ;;		wreg, status,2, status,0, pclath, cstack
 25874 ;; Tracked objects:
 25875 ;;		On entry : 0/0
 25876 ;;		On exit  : 0/0
 25877 ;;		Unchanged: 0/0
 25878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25881 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25882 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25883 ;;Total ram usage:        2 bytes
 25884 ;; Hardware stack levels used:    1
 25885 ;; Hardware stack levels required when called:    1
 25886 ;; This function calls:
 25887 ;;		_get10msTick
 25888 ;;		_reset10msTick
 25889 ;;		i1_timeNow
 25890 ;; This function is called by:
 25891 ;;		_ISR
 25892 ;; This function uses a non-reentrant model
 25893 ;;
 25894                           
 25895                           
 25896                           ;psect for function _pushButtonISR
 25897  35B8                     _pushButtonISR:	
 25898                           
 25899                           ;inputs.c: 56:  uint8_t time;;inputs.c: 58:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT
      +                          )) {
 25900                           
 25901                           ;incstack = 0
 25902                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0+pclath+cstack]
 25903  35B8  0140               	movlb	0	; select bank0
 25904  35B9  1B8C               	btfsc	12,7	;volatile
 25905  35BA  2DD2               	goto	i1l6436
 25906  35BB  3004               	movlw	4
 25907  35BC  067D               	xorwf	_pbState,w	;volatile
 25908  35BD  1903               	btfsc	3,2
 25909  35BE  2DD2               	goto	i1l6436
 25910                           
 25911                           ;inputs.c: 59:   reset10msTick();
 25912  35BF  3198  2000  31B5   	fcall	_reset10msTick
 25913                           
 25914                           ;inputs.c: 60:   pbState = PB_WAIT;
 25915  35C2  3004               	movlw	4
 25916  35C3  00F4               	movwf	??_pushButtonISR
 25917  35C4  0874               	movf	??_pushButtonISR,w
 25918  35C5  00FD               	movwf	_pbState	;volatile
 25919                           
 25920                           ;inputs.c: 61:   userActivity = timeNow();
 25921  35C6  31B1  210B         	fcall	i1_timeNow
 25922  35C8  0873               	movf	?i1_timeNow+3,w
 25923  35C9  0142               	movlb	2	; select bank2
 25924  35CA  00EA               	movwf	(_userActivity+3)^(0+256)	;volatile
 25925  35CB  0872               	movf	?i1_timeNow+2,w
 25926  35CC  00E9               	movwf	(_userActivity+2)^(0+256)	;volatile
 25927  35CD  0871               	movf	?i1_timeNow+1,w
 25928  35CE  00E8               	movwf	(_userActivity+1)^(0+256)	;volatile
 25929  35CF  0870               	movf	?i1_timeNow,w
 25930  35D0  00E7               	movwf	_userActivity^(0+256)	;volatile
 25931                           
 25932                           ;inputs.c: 62:  } else if (pbState == PB_WAIT) {
 25933  35D1  0008               	return
 25934  35D2                     i1l6436:	
 25935  35D2  3004               	movlw	4
 25936  35D3  067D               	xorwf	_pbState,w	;volatile
 25937  35D4  1D03               	btfss	3,2
 25938  35D5  0008               	return
 25939                           
 25940                           ;inputs.c: 63:   time = get10msTick();
 25941  35D6  31B0  20CA  31B5   	fcall	_get10msTick
 25942  35D9  00F4               	movwf	??_pushButtonISR
 25943  35DA  0874               	movf	??_pushButtonISR,w
 25944  35DB  00F5               	movwf	pushButtonISR@time
 25945                           
 25946                           ;inputs.c: 64:   if ((time > 10) && (time <= 70) && (PORTAbits.RA7))
 25947  35DC  300B               	movlw	11
 25948  35DD  0275               	subwf	pushButtonISR@time,w
 25949  35DE  1C03               	skipc
 25950  35DF  2DEC               	goto	i1l6448
 25951  35E0  3047               	movlw	71
 25952  35E1  0275               	subwf	pushButtonISR@time,w
 25953  35E2  1803               	skipnc
 25954  35E3  2DEC               	goto	i1l6448
 25955  35E4  0140               	movlb	0	; select bank0
 25956  35E5  1F8C               	btfss	12,7	;volatile
 25957  35E6  2DEC               	goto	i1l6448
 25958                           
 25959                           ;inputs.c: 66:    pbState = PB_SHORT;
 25960  35E7  3001               	movlw	1
 25961  35E8  00F4               	movwf	??_pushButtonISR
 25962  35E9  0874               	movf	??_pushButtonISR,w
 25963  35EA  00FD               	movwf	_pbState	;volatile
 25964  35EB  0008               	return
 25965  35EC                     i1l6448:	
 25966  35EC  3047               	movlw	71
 25967  35ED  0275               	subwf	pushButtonISR@time,w
 25968  35EE  1C03               	skipc
 25969  35EF  2DF8               	goto	i1l314
 25970  35F0  0140               	movlb	0	; select bank0
 25971  35F1  1B8C               	btfsc	12,7	;volatile
 25972  35F2  2DF8               	goto	i1l314
 25973                           
 25974                           ;inputs.c: 69:    pbState = PB_LONG;
 25975  35F3  3002               	movlw	2
 25976  35F4  00F4               	movwf	??_pushButtonISR
 25977  35F5  0874               	movf	??_pushButtonISR,w
 25978  35F6  00FD               	movwf	_pbState	;volatile
 25979  35F7  0008               	return
 25980  35F8                     i1l314:	
 25981                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 25982                           
 25983  35F8  0140               	movlb	0	; select bank0
 25984  35F9  1F8C               	btfss	12,7	;volatile
 25985  35FA  0008               	return
 25986                           
 25987                           ;inputs.c: 72:    pbState = PB_ABORT;
 25988  35FB  3003               	movlw	3
 25989  35FC  00F4               	movwf	??_pushButtonISR
 25990  35FD  0874               	movf	??_pushButtonISR,w
 25991  35FE  00FD               	movwf	_pbState	;volatile
 25992  35FF  0008               	return
 25993  3600                     __end_of_pushButtonISR:	
 25994                           ;inputs.c: 73:  }
 25995                           
 25996                           
 25997                           	psect	text84
 25998  310B                     __ptext84:	
 25999 ;; *************** function i1_timeNow *****************
 26000 ;; Defined at:
 26001 ;;		line 13 in file "interrupt.c"
 26002 ;; Parameters:    Size  Location     Type
 26003 ;;		None
 26004 ;; Auto vars:     Size  Location     Type
 26005 ;;		None
 26006 ;; Return value:  Size  Location     Type
 26007 ;;                  4    0[COMMON] unsigned long 
 26008 ;; Registers used:
 26009 ;;		wreg
 26010 ;; Tracked objects:
 26011 ;;		On entry : 0/0
 26012 ;;		On exit  : 0/0
 26013 ;;		Unchanged: 0/0
 26014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26015 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26018 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26019 ;;Total ram usage:        4 bytes
 26020 ;; Hardware stack levels used:    1
 26021 ;; This function calls:
 26022 ;;		Nothing
 26023 ;; This function is called by:
 26024 ;;		_rotISR
 26025 ;;		_pushButtonISR
 26026 ;; This function uses a non-reentrant model
 26027 ;;
 26028                           
 26029                           
 26030                           ;psect for function i1_timeNow
 26031  310B                     i1_timeNow:	
 26032                           
 26033                           ;interrupt.c: 15:  return tick100ms;
 26034                           
 26035                           ;incstack = 0
 26036                           ; Regs used in i1_timeNow: [wreg]
 26037  310B  0142               	movlb	2	; select bank2
 26038  310C  0866               	movf	(_tick100ms+3)^(0+256),w	;volatile
 26039  310D  00F3               	movwf	?i1_timeNow+3
 26040  310E  0865               	movf	(_tick100ms+2)^(0+256),w	;volatile
 26041  310F  00F2               	movwf	?i1_timeNow+2
 26042  3110  0864               	movf	(_tick100ms+1)^(0+256),w	;volatile
 26043  3111  00F1               	movwf	?i1_timeNow+1
 26044  3112  0863               	movf	_tick100ms^(0+256),w	;volatile
 26045  3113  00F0               	movwf	?i1_timeNow
 26046  3114  0008               	return
 26047  3115                     __end_ofi1_timeNow:	
 26048                           
 26049                           	psect	text85
 26050  1800                     __ptext85:	
 26051 ;; *************** function _reset10msTick *****************
 26052 ;; Defined at:
 26053 ;;		line 41 in file "interrupt.c"
 26054 ;; Parameters:    Size  Location     Type
 26055 ;;		None
 26056 ;; Auto vars:     Size  Location     Type
 26057 ;;		None
 26058 ;; Return value:  Size  Location     Type
 26059 ;;                  1    wreg      void 
 26060 ;; Registers used:
 26061 ;;		status,2
 26062 ;; Tracked objects:
 26063 ;;		On entry : 0/0
 26064 ;;		On exit  : 0/0
 26065 ;;		Unchanged: 0/0
 26066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26071 ;;Total ram usage:        0 bytes
 26072 ;; Hardware stack levels used:    1
 26073 ;; This function calls:
 26074 ;;		Nothing
 26075 ;; This function is called by:
 26076 ;;		_pushButtonISR
 26077 ;; This function uses a non-reentrant model
 26078 ;;
 26079                           
 26080                           
 26081                           ;psect for function _reset10msTick
 26082  1800                     _reset10msTick:	
 26083                           
 26084                           ;interrupt.c: 42:  tick10ms = 0;
 26085                           
 26086                           ;incstack = 0
 26087                           ; Regs used in _reset10msTick: [status,2]
 26088  1800  0142               	movlb	2	; select bank2
 26089  1801  01EF               	clrf	_tick10ms^(0+256)	;volatile
 26090  1802  0008               	return
 26091  1803                     __end_of_reset10msTick:	
 26092                           
 26093                           	psect	text86
 26094  30CA                     __ptext86:	
 26095 ;; *************** function _get10msTick *****************
 26096 ;; Defined at:
 26097 ;;		line 33 in file "interrupt.c"
 26098 ;; Parameters:    Size  Location     Type
 26099 ;;		None
 26100 ;; Auto vars:     Size  Location     Type
 26101 ;;		None
 26102 ;; Return value:  Size  Location     Type
 26103 ;;                  1    wreg      unsigned char 
 26104 ;; Registers used:
 26105 ;;		wreg
 26106 ;; Tracked objects:
 26107 ;;		On entry : 0/0
 26108 ;;		On exit  : 0/0
 26109 ;;		Unchanged: 0/0
 26110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26115 ;;Total ram usage:        0 bytes
 26116 ;; Hardware stack levels used:    1
 26117 ;; This function calls:
 26118 ;;		Nothing
 26119 ;; This function is called by:
 26120 ;;		_pushButtonISR
 26121 ;; This function uses a non-reentrant model
 26122 ;;
 26123                           
 26124                           
 26125                           ;psect for function _get10msTick
 26126  30CA                     _get10msTick:	
 26127                           
 26128                           ;interrupt.c: 35:  return tick10ms;
 26129                           
 26130                           ;incstack = 0
 26131                           ; Regs used in _get10msTick: [wreg]
 26132  30CA  0142               	movlb	2	; select bank2
 26133  30CB  086F               	movf	_tick10ms^(0+256),w	;volatile
 26134  30CC  0008               	return
 26135  30CD                     __end_of_get10msTick:	
 26136  007E                     btemp	set	126	;btemp
 26137  007E                     int$flags	set	126
 26138  007E                     wtemp0	set	126


Data Sizes:
    Strings     783
    Constant    139
    Data        42
    BSS         143
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     72      76
    BANK1            80     77      80
    BANK2            80     67      80
    BANK3            80     64      80
    BANK4            80     23      72
    BANK5            80      0      66
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2692	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    S1391$1$0	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    sp__getStateFunc$0	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    func$0	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    memcpy@d1	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK5[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    sp__memcpy	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> systemCheck@str(BANK1[3]), str(BANK4[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK4[10]), 

    channelThing@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    getAnalogValues@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    calcRequiredPower@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    checkSensor@dp	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    checkSensor@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    systemCheck@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    checkChannelStatus@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    checkChannelStatus@chData	PTR struct . size(2) Largest target is 166
		 -> data.chData(BIGRAM[124]), data(BIGRAM[166]), 

    menu@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    sp__getStateFunc	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    menu@func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    S1391$func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl.func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setFudgeFactor@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    setSkyTemp@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    setDPOffset@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    setup@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    setLensDia@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    setOutputPower@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    setOutputPower@chData	PTR struct . size(2) Largest target is 166
		 -> data.chData(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    channelSetup@chData	PTR struct . size(2) Largest target is 166
		 -> data.chData(BIGRAM[124]), data(BIGRAM[166]), 

    channelView@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    statusView@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    sp__getDataPacket	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.chData(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_87(CODE[4]), systemCheck@str(BANK1[3]), STR_86(CODE[12]), STR_85(CODE[13]), 
		 -> STR_84(CODE[13]), STR_83(CODE[13]), STR_82(CODE[13]), STR_81(CODE[13]), 
		 -> STR_80(CODE[13]), STR_79(CODE[13]), STR_78(CODE[13]), STR_77(CODE[13]), 
		 -> STR_76(CODE[13]), STR_75(CODE[13]), STR_74(CODE[13]), STR_73(CODE[13]), 
		 -> STR_72(CODE[13]), STR_71(CODE[13]), STR_70(CODE[13]), STR_69(CODE[13]), 
		 -> STR_68(CODE[13]), STR_67(CODE[13]), STR_66(CODE[13]), STR_65(CODE[13]), 
		 -> STR_64(CODE[13]), STR_63(CODE[13]), STR_62(CODE[13]), STR_61(CODE[9]), 
		 -> STR_60(CODE[2]), STR_59(CODE[13]), STR_58(CODE[9]), STR_57(CODE[2]), 
		 -> STR_56(CODE[13]), STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[13]), 
		 -> STR_52(CODE[10]), STR_51(CODE[10]), STR_50(CODE[3]), STR_49(CODE[7]), 
		 -> STR_48(CODE[37]), STR_47(CODE[8]), STR_46(CODE[2]), STR_45(CODE[13]), 
		 -> STR_44(CODE[13]), STR_43(CODE[13]), STR_42(CODE[8]), STR_41(CODE[2]), 
		 -> STR_40(CODE[7]), STR_39(CODE[6]), STR_38(CODE[7]), STR_37(CODE[6]), 
		 -> STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[13]), STR_33(CODE[13]), 
		 -> STR_32(CODE[13]), STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), 
		 -> STR_28(CODE[13]), STR_27(CODE[9]), STR_26(CODE[8]), STR_25(CODE[5]), 
		 -> STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[13]), STR_21(CODE[13]), 
		 -> STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[9]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[13]), STR_13(CODE[13]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), STR_9(CODE[2]), 
		 -> STR_8(CODE[4]), STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[8]), 
		 -> STR_4(CODE[2]), STR_3(CODE[4]), str(BANK4[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[57]), 

    initGlobalData@chData	PTR struct . size(2) Largest target is 166
		 -> data.chData(BIGRAM[124]), data(BIGRAM[166]), 

    initGlobalData@data	PTR struct . size(2) Largest target is 166
		 -> data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy
    _rotISR->i1_timeNow
    _pushButtonISR->i1_timeNow

Critical Paths under _main in BANK0

    _main->_checkSensor
    _viewErrorMessage->_OLED_print_xy
    _removeLastError->___awmod
    _systemCheck->___fldiv
    _OLED_returnHome->_OLED_command
    _OLED_off->_OLED_command
    _OLED_clearDisplay->_OLED_command
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _spinInput->___fladd
    _getStateFunc->___wmul
    _getNextState->___wmul
    _returnToPage->___wmul
    _OLED_scrollDisplayRight->_OLED_command
    _OLED_scrollDisplayLeft->_OLED_command
    _ftoa->___fldiv
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _getAnalogValues->___fldiv
    _controller->_timeSince
    _timeSince->_timeNow
    _checkChannelStatus->___fldiv
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->_qsort
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    ___flge->___fladd
    ___flge->___fldiv
    _calcRequiredPower->___fladd
    _calcRequiredPower->___fldiv
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_channelThing
    _systemCheck->_itoa
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_ftoa
    _setSkyTemp->_spinInput
    _setOutputPower->_ftoa
    _setOutputPower->_spinInput
    _setLensDia->_ftoa
    _setLensDia->_spinInput
    _setFudgeFactor->_ftoa
    _setFudgeFactor->_spinInput
    _setDPOffset->_ftoa
    _setDPOffset->_spinInput
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _itoa->___fltol
    _ftoa->___fltol
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___fltol
    _channelThing->_qsort
    _qsort->_sortCur
    _qsort->_sortDC
    _qsort->_sortDCRev
    _sortCur->___fltol
    ___fltol->___flsub
    ___flge->___fldiv
    _calcRequiredPower->___flsub
    ___flsub->___fladd

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0 1092837
                                             76 BANK1      1     1      0
                                             60 BANK2      7     7      0
                  _OLED_clearDisplay
                          _OLED_init
              _OLED_loadSpecialChars
                    _OLED_returnHome
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                      _setLoadSwitch
                       _setOLEDPower
                        _systemCheck
                            _timeNow
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     3     3      0   19621
                                             26 BANK0      3     3      0
                      _OLED_print_xy
                    _OLED_returnHome
                       _getLastError
                              _getPB
                    _removeLastError
                      _setLoadSwitch
 ---------------------------------------------------------------------------------
 (2) _removeLastError                                      1     1      0     904
                                             11 BANK0      1     1      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _getLastError                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                         10     8      2   46656
                                             42 BANK1     10     8      2
                  _OLED_clearDisplay
                           _OLED_off
                      _OLED_print_xy
                    _OLED_returnHome
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                               _itoa
                   _setChannelSwitch
                      _setLoadSwitch
                       _setOLEDPower
 ---------------------------------------------------------------------------------
 (2) _setOLEDPower                                         1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OLED_returnHome                                      0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _OLED_off                                             0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _OLED_clearDisplay                                    0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _menu                                                12    10      2  842814
                                             58 BANK1     12    10      2
                       _OLED_command
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                       _getStateFunc
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           4     2      2   78200
                                             45 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                4     2      2   73857
                                             45 BANK1      4     2      2
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           3     1      2   90577
                                             45 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       8     6      2  110265
                                             45 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      23
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                          10     8      2  100217
                                             45 BANK1     10     8      2
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       3     1      2   90642
                                             45 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          3     1      2   90577
                                             45 BANK1      3     1      2
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   18053
                                             71 BANK0      1     1      0
                                             30 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getStateFunc                                         7     5      2    9767
                                             23 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         8     5      3   10316
                                             23 BANK0      8     5      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         13    11      2   92552
                                             45 BANK1     13    11      2
                      _OLED_print_xy
                             ___bmul
                            ___fltol
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         8     6      2   93491
                                             45 BANK1      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0   10026
                                             23 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1302
                                             11 BANK0      6     5      1
             _OLED_scrollDisplayLeft
            _OLED_scrollDisplayRight
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      23
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayRight                              0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayLeft                               0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    4033
                                             31 BANK1     11     7      4
                            ___awdiv
                            ___awmod
                            ___fltol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   44139
                                             31 BANK1     14     8      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   18297
                                             17 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       9     7      2   10418
                                             23 BANK0      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      8     6      2   22689
                                             18 BANK1      8     6      2
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                          10    10      0    4720
                                             24 BANK0     10    10      0
                             ___bmul
                   _setChannelSwitch
                            _timeNow
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          7     5      2    7178
                                             71 BANK0      1     1      0
                                             30 BANK1      6     4      2
                             ___flge
                              _error
                      _getDataPacket
                            _timeNow
                          _timeSince
                    _uartIsDataReady
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       1
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIsDataReady                                      2     2      0      23
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     665
                                              8 BANK0     16    12      4
                            _timeNow
 ---------------------------------------------------------------------------------
 (2) _timeNow                                              4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getDataPacket                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  26    24      2   37344
                                             31 BANK1     26    24      2
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                 _getLoadSwitchFault
                   _setChannelSwitch
                      _setLoadSwitch
 ---------------------------------------------------------------------------------
 (2) _setLoadSwitch                                        1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     806
                                             17 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getLoadSwitchFault                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      22
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                2     2      0     926
                                             11 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     904
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1647
                                             16 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     396
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     698
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        36    34      2   62011
                                             63 BANK1     13    11      2
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   21366
                                             71 BANK0      1     1      0
                                             39 BANK1     24    18      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 6     2      4     465
                                             17 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            8     4      4    3091
                                             31 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               8     4      4    3091
                                             31 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    2961
                                             13 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    7424
                                             31 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4    1147
                                             20 BANK1     11     7      4
                            ___flsub (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               8     5      3     424
                                             17 BANK0      8     5      3
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     805
                                              4 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     930
                                             23 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    5046
                                             18 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   63    61      2   36620
                                             20 BANK1      6     4      2
                                              0 BANK2     57    57      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    9606
                                             17 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5887
                                             12 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4922
                                             63 BANK0      8     0      8
                                              0 BANK1     12    12      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8   10013
                                             37 BANK0     26    18      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     980
                                              4 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    4743
                                             63 BANK0      8     0      8
                                              0 BANK1     18    18      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0     796
                                             11 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                             10 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                             11 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                             10 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              4 BANK0      1     1      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     306
                                              7 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              4 BANK0      3     3      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _OLED_pulseEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  4     4      0     416
                                              0 BANK0      4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (10) _uartReceiveISR                                      1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (11) _strncpy                                             6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (10) _rotISR                                              8     8      0      23
                                              4 COMMON     8     8      0
                          i1_timeNow
 ---------------------------------------------------------------------------------
 (10) _pushButtonISR                                       2     2      0      67
                                              4 COMMON     2     2      0
                        _get10msTick
                      _reset10msTick
                          i1_timeNow
 ---------------------------------------------------------------------------------
 (11) i1_timeNow                                           4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (11) _reset10msTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _get10msTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_clearDisplay
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write4bits
       _OLED_pulseEnable
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_returnHome
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _getLoadSwitchFault
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _setLoadSwitch
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getDataPacket
     _timeNow
     _timeSince
       _timeNow
     _uartIsDataReady
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeNow
     _timeSince
       _timeNow
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___fltol
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
     _getPB *
     _getStateFunc *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
       _timeNow
   _setLoadSwitch
   _setOLEDPower
   _systemCheck
     _OLED_clearDisplay
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_off
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       _OLED_write
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       ___bmul (ARG)
         ___awdiv (ARG)
     _OLED_returnHome
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _itoa
       ___awdiv
       ___awmod
       ___fltol (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _setLoadSwitch
     _setOLEDPower
   _timeNow
   _timeSince
     _timeNow
   _viewErrorMessage
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       _OLED_write
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
       ___bmul (ARG)
         ___awdiv (ARG)
     _OLED_returnHome
       _OLED_command
         _OLED_send
           _OLED_write4bits
             _OLED_pulseEnable
         _OLED_waitForReady
           _OLED_pulseEnable
     _getLastError
     _getPB
     _removeLastError
       ___awmod
     _setLoadSwitch

 _ISR (ROOT)
   _pushButtonISR
     _get10msTick
     _reset10msTick
     i1_timeNow
   _rotISR
     i1_timeNow
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     48      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4D      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1F4       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     43      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     17      48      14       90.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      42      16       82.5%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1F4      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Jan 31 17:36:58 2020

                   _pushButtonISR 35B8                     returnToPage@n 003A          __end_of_transition_table 38E9  
                    _stateFuncTbl 3854                      ___fldiv@aexp 00B1                      ___fldiv@bexp 00B0  
                    ___fldiv@sign 00A9                    ___bmul@product 002F                       __CFG_CP$OFF 0000  
             __end_of_systemCheck 1E1C            _calcRequiredPower$2643 014C            _calcRequiredPower$2644 0128  
          _calcRequiredPower$2645 012C            _calcRequiredPower$2646 0130            _calcRequiredPower$2647 0134  
          _calcRequiredPower$2648 0138                      ___awdiv@sign 002A            _calcRequiredPower$2649 013C  
                ?_removeLastError 0070               ___wmul@multiplicand 0033                    ??_getStateFunc 0039  
         ??_OLED_loadSpecialChars 002B               __Umul8_16@word_mpld 002A                       __CFG_LVP$ON 0000  
                    _virtChannels 02AA                               l117 2E52                               l135 3605  
                             l169 31EA                               l365 3125                               l702 31DC  
                             l454 27B7                               l916 0EAA                               l772 15E9  
                             l932 2CBA                               l845 1D77                               l779 1688  
                             _ISR 0004                               _ema 3797                               _str 023F  
                    ___awmod@sign 002A                      __CFG_BORV$LO 0000                               wreg 0009  
                returnToPage@page 0039              ??_getLoadSwitchFault 0024                      ___flmul@aexp 0053  
                    ___flmul@bexp 0058                      ___flmul@sign 0052                      ___flmul@temp 005D  
                    ___flmul@prod 0059                     __CFG_BBEN$OFF 0000          __end_of_setChannelSwitch 35B8  
                    _userActivity 0167                  channelThing@data 00DF                              ?_ISR 0070  
                channelThing@grpA 0255                  channelThing@grpB 025B                      __CFG_ZCD$OFF 0000  
                    ___fltol@exp1 00BE                              l1040 31B6              __end_of_channelThing 1000  
                            l1210 367D                              l1221 2AE0                              l1241 377B  
                            l1209 3663                              l1218 2A92                              l1421 11D2  
                            l1341 05F3                              l1345 06AA                              l1418 11A9  
                            l1362 074D                              l1419 11C3                              l1347 0687  
                            l1534 3216                              l1366 076E                              l1383 07E5  
                            l1375 07C8                              ?_ema 0030                              l1449 13F8  
                            l1481 2BD2                              l1475 2B9C                              l1539 3276  
            __end_of_channelSetup 2800                              l1397 1064                              l1495 3298  
                            l1488 2BE6                              l1489 2BF0                              l5122 32D0  
                            l5142 368F                              l5126 32DA                              l4510 3536  
                            l6030 250F                              l6032 2518                              l4522 3543  
                            l4514 353D                              l6042 2565                              l6034 2521  
                            l7100 3769                              l4524 354F                              l4532 3564  
                            l6052 259C                              l6044 2586                              l6036 2542  
                            l5068 28EB                              l5076 2901                              l4550 2AC6  
                            l7110 3788                              l7102 3777                              l7022 2005  
                            l6054 25A0                              l7200 1112                              l7008 31B0  
                            l4536 356C                              l4528 355B                              l6080 2646  
                            l6072 262F                              l5088 290C                              l5096 2921  
                            l7202 10C6                              l4546 2AAC                              l7042 36EA  
                            l7026 200B                              l8010 1BF3                              l8002 1B9A  
                            l5178 2833                              l7220 1139                              l7204 1117  
                            l7140 1036                              l4900 2BBF                              l7060 3709  
                            l8012 1BF9                              l6084 2649                              l5188 07F8  
                            l7230 1155                              l7214 112C                              l7134 1029  
                            l4910 2BD7                              l7070 3724                              l6078 2643  
                            l6086 265B                              l8110 1D3A                              l6350 2109  
                            l6342 20B5                              l7240 118F                              l7128 1019  
                            l7304 122E                              l7048 36F5                              l7080 373B  
                            l8016 1C2C                              l6360 2172                              l6352 211E  
                            l6344 20CA                              l7226 1152                              l7218 111D  
                            l7154 1057                              l7138 102D                              l4922 2C0B  
                            l7074 372C                              l7066 371B                              l7058 36FD  
                            l8018 1C31                              l6354 2133                              l6346 20DF  
                            l6370 21BB                              l7148 1047                              l4908 2BE4  
                            l7084 3744                              l8212 1513                              l8044 2F77  
                            l8124 1D78                              l6356 2148                              l6348 20F4  
                            l6372 21E7                              l7254 11CD                              l7174 1093  
                            l7158 105B                              l8214 1520                              l8134 1DC2  
                            l6366 2191                              l6358 215D                              l7192 10E1  
                            l7168 1085                              l8152 00E8                              l8320 0E03  
                            l8312 0D6E                              l8304 0C9D                              l8232 1571  
                            l7408 205E                              l8400 085F                              l8144 1E0C  
                            l6376 21EF                              l6368 21A6                              l7194 10E9  
                            l7274 11F3                              l5690 3580                              l8250 1651  
                            l8218 153C                              l4938 3344                              l7450 223E  
                            l7426 0812                              l8402 087F                              l8082 1CD0  
                            l7364 138E                              l7356 1360                              l7292 1216  
                            l7276 11F5                              l6812 05B4                              l5692 3586  
                            l8252 1657                              l8244 161A                              l7460 2292  
                            l7452 2285                              l7540 1E44                              l7604 091D  
                            l8092 1D1A                              l7382 13CE                              l7358 1377  
                            l7294 1218                              l7278 11FD                              l6910 06CD  
                            l6902 06B9                              l6830 05D6                              l6806 05A4  
                            l4894 2BAB                              l5694 358C                              l5686 3574  
                            l8262 16EC                              l8270 17F6                              l7462 22A8  
                            l7550 1E6A                              l7542 1E49                              l7630 09F9  
                            l7622 09DD                              l7710 275C                              l8414 08A5  
                            l7368 1390                              l7296 1220                              l6912 06CF  
                            l6920 06E4                              l6840 05EA                              l6816 05B8  
                            l4888 2B94                              l8352 0F44                              l8344 0EF3  
                            l8336 0E38                              l8280 0BCA                              l5688 357A  
                            l8264 173A                              l8256 167B                              l8248 1637  
                            l8184 1407                              l7544 1E4C                              l7632 0A0F  
                            l7624 09DE                              l7704 2730                              l8432 090F  
                            l8416 08A9                              l8408 0886                              l8088 1CE4  
                            l7378 13B9                              l6930 0745                              l6818 05C1  
                            l4898 2BAF                              l8346 0F43                              l8338 0EF2  
                            l5698 35A1                              l7482 22BA                              l7562 1ECA  
                            l7650 0B46                              l7722 27A2                              l7714 2776  
                            l7388 13E5                              l6916 06D4                              l6836 05E6  
                            l8268 1796                              l8196 146E                              l8380 2C9E  
                            l8364 2C2D                              l7484 2351                              l7492 2863  
                            l7652 0B5C                              l7644 0B03                              l7628 09E3  
                            l5894 325A                              l6846 05FE                              l8374 2C57  
                            l7646 0B1A                              l7662 0BB5                              l7718 2790  
                            l7742 2391                              l8462 2E7C                              l6960 0788  
                            l6952 077A                              l7496 28AC                              l7904 3520  
                            l7648 0B30                              l7656 0B72                              l7808 2CD2  
                            l8480 2EC7                              l8472 2EAD                              l6946 0773  
                            l6938 0762                              l6954 077D                              l6890 0696  
                            l8386 2CBD                              l7498 28BD                              l7930 1876  
                            l7594 1FFD                              l7658 0BAF                              l7682 2695  
                            l7746 239E                              l8482 2ECF                              l8466 2E97  
                            l6964 078B                              l6884 068F                              l6876 0653  
                            l7924 185B                              l7780 24AA                              l7844 2E16  
                            l6982 07DB                              l6886 0691                              l6894 06A5  
                            l7950 18C5                              l7918 180A                              l7694 26E7  
                            l7758 2412                              l7870 29AC                              l8670 21C4  
                            l8486 2ED9                              l8672 0B9B                              l7784 24C2  
                            l7768 245E                              l7776 2498                              l7856 293E  
                            l8488 2EE1                              l6986 07E0                              l7970 1AAD  
                            l8674 2653                              l7946 18AD                              l7938 1891  
                            l7794 24D7                              l6996 3210                              l8676 35A9  
                            l7788 24D5                              l7884 2A1A                              l7990 1B35  
                            l7984 1B0A                              l7976 1AD3                              l7898 34EA  
                            l7988 1B31                              STR_1 386F                              STR_2 3B45  
                            STR_3 3B7A                              STR_4 3B98                              STR_5 3B25  
                            STR_6 3B62                              STR_7 3B25                              STR_8 3B7E  
                            STR_9 39DE                              _PIE0 0716                              _PIE3 0719  
                            _PIE4 071A                              u4505 3555                              u5315 2BDE  
                            u4515 355C                              u3805 3491                              u3815 3189  
                            u6400 3250                              u6225 37F5                              u5355 2BF8  
                            u5275 2BB8                              u4485 3546                              u5295 2BCC  
                            u3785 3473                              u8025 31B7                              u8105 3700  
                            u5705 368B                              u3795 3481                              u8035 31BC  
                            u8125 370A                              u8135 3714                              u8215 376A  
                            u5655 32DB                              u5735 281C                              u8145 371C  
                            u5665 32E2                              u5595 28E3                              u8405 10FF  
                            u8245 377F                              u8185 374D                              u7650 0673  
                            u8435 1121                              u7660 0674                              u8525 1175  
                            u8365 10CE                              u7645 0668                              u8535 1199  
                            u8455 112D                              u8375 10D5                              u7815 0763  
                            u8545 11B3                              u9505 1BD5                              u9425 1AB1  
                            u8395 10E2                              u8715 136C                              u7915 07AB  
                            u9515 1BE5                              u9435 1AC1                              u8805 13D8  
                            u8645 12A4                              u7773 06FB                              u7765 06D7  
                            u9525 1C04                              u8655 12D3                              u7695 0699  
                            u9535 1C0E                              u8665 1329                              u9545 1C1E  
                            u9465 1B62                              u8675 1340                              u9555 1C3B  
                            u9475 1BA5                              u8685 134F                              u9485 1BBE  
                            u8695 1363                              u9495 1BCB                              u8785 13A7  
                            u7995 3217                              u8795 13C2                              u8875 0828  
                            u9925 0E7A                              _TMR0 059C                              _TMR1 020C  
                            u9985 2C77                              u9995 2C99         __size_of_OLED_pulseEnable 0009  
            __size_of_get10msTick 0003                     __CFG_FCMEN$ON 0000                     OLED_send@mode 0027  
                            _data 274A                              _head 006A                              _main 2E27  
                            _ftoa 21F3                              _menu 0834                              _itoa 2858  
                channelSetup@data 00CD                              _tail 0069                              fsr0h 0005  
                            fsr1h 0007                              indf0 0000                              fsr0l 0004  
                            indf1 0001                              fsr1l 0006                              _swap 3298  
                channelSetup@page 016D                              btemp 007E                     __CFG_BOREN$ON 0000  
                            start 007A                       ?_OLED_write 0070                      spinInput@dir 00CC  
                 ___fldiv@new_exp 00AA                      spinInput@max 00C4                      spinInput@min 00C0  
               _calcRequiredPower 00E6                    ?_pushButtonISR 0070                     __CFG_CSWEN$ON 0000  
               ___bmul@multiplier 0030                     __CFG_MCLRE$ON 0000                ?_calcRequiredPower 00B4  
                           ??_ISR 0020                             ??_ema 0038                __size_of_OLED_init 008B  
              __size_of_OLED_send 0017                    _setFudgeFactor 2A08                 channelThing@total 0249  
                   ___fltol@sign1 00BD                   __end_of___fladd 07F1                             ?_main 0070  
                           ?_ftoa 00BF                             ?_menu 00DA                   __end_of___fldiv 11D9  
                           ?_itoa 00BF                   __end_of___awdiv 3731                             STR_10 3B82  
                           STR_11 3B8F                             STR_12 3B8C                             STR_20 3AA3  
                           STR_21 3ACA                             STR_13 3A96                             STR_22 3AD7  
                           STR_14 3A3B                             STR_30 3A14                             STR_23 3B71  
                           STR_15 3B92                             STR_31 3A48                             STR_16 3B95  
                           STR_40 3B54                             STR_24 3B2D                             STR_32 3A07  
                           STR_41 3B60                             STR_25 3B71                             STR_17 3B0C  
                           STR_33 3A21                     __CFG_WDTE$OFF 0000                             STR_50 3B89  
                           STR_26 3B3D                             STR_42 3B1D                             STR_18 3AB0  
                           STR_34 3A7C                             STR_27 3B0C                             STR_35 3B35  
                           STR_51 3AF0                             STR_43 3A89                             STR_19 3A2E  
                           STR_60 3B60                             STR_52 39FD                             STR_36 3AD7  
                           STR_44 3ABD                             STR_28 39FA                   __end_of___awmod 3571  
                           STR_45 3A7C                             STR_37 3B70                             STR_61 3B03  
                           STR_53 3A6F                             STR_29 3A62                             STR_46 3B60  
                           STR_54 3B5B                             STR_38 3B4D                             STR_70 39C6  
                           STR_62 38E9                             STR_39 3B70                             STR_55 3B86  
                           STR_47 3B15                             STR_71 3978                             STR_63 391D  
                           STR_80 39AC                             STR_72 39C6                             STR_56 3A55  
                           STR_64 3903                             STR_48 38A8                             STR_57 3B60  
                           STR_49 3B69                             STR_81 39ED                             STR_73 3951  
                           STR_65 3944                             STR_58 3AFA                             STR_66 39AC  
                           STR_82 399F                             STR_74 38F6                             STR_59 38C0  
                           STR_67 396B                             STR_75 3937                             STR_83 3910  
                           STR_68 38E9                             STR_76 39E0                             STR_84 392A  
                           STR_69 39B9                             STR_85 3985                             STR_77 395E  
                           STR_86 3AE4                             STR_78 3992                             STR_87 3B76  
                           STR_79 39D3                   __end_of___flmul 1405               ??_calcRequiredPower 00B6  
 checkSensor@sensorUpdateInterval 0228                   __end_of___flsub 338F                   __end_of___fltol 3797  
                           ?_swap 0031                             u10050 08D4                             u10051 08D2  
                           u10060 08D5                             u10307 1D63                             u10317 28F2  
                           u10085 0905                             u10407 2B49                             u10327 2913  
                           _T1CLK 0211                             u10417 2B55                             u10337 1568  
                           u10427 2B61                             u10347 2AFB                   ___awdiv@divisor 0024  
                           u10437 2B6D                             u10357 2B0D                             u10447 2B79  
                           u10367 2B19                             _T1CON 020E                             u10457 31EC  
                           u10377 2B25                             u10297 2EE5                             u10467 31F2  
                           u10387 2B31                             u10477 349E                             u10397 2B3D  
                           u10487 30FC                             _IOCAN 1F3E                             _IOCAP 1F3D  
                           _IOCCN 1F54                             i1l314 35F8                             i1l270 001D  
                           i1l273 0039                             i1l283 0078                             i1l279 0071  
                __end_of_OLED_off 30E9                   ___awdiv@counter 0029             __end_of_setLoadSwitch 30E1  
                    main@initDone 0161             __end_of_reset10msTick 1803                             _TRISA 0012  
                           _TRISB 0013                             _TRISC 0014            uartReceiveISR@checksum 01EA  
             ___lmul@multiplicand 0028              __size_of_checkSensor 0184                      ?_setDPOffset 00CD  
                   __CFG_WRTB$OFF 0000                     __CFG_WRTC$OFF 0000        __end_of_checkChannelStatus 1800  
                  OLED_send@value 0029                             _getPB 314A               getNextState@timeout 0039  
                  statusView@data 00CD                    statusView@page 016E          statusView@prevSensorStat 01EF  
                           ema@in 0030                  ?_uartIsDataReady 0070                             _error 33F9  
                           _setup 2D6D                             _qsort 1A85                    setSkyTemp@data 00CD  
                           ftoa@w 00CA                             pclath 000A                   __end_of_timeNow 317E  
            __size_of_channelView 02B5                             swap@c 0036                   __end_of_sortCur 3465  
                           status 0003                             wtemp0 007E         __end_of_calcRequiredPower 0592  
                 __end_of_strncpy 3328                       controller@n 0041                     spinInput@step 00C8  
                     _systemCheck 1C41              __end_of_getLastError 07FF                   __initialization 007C  
                    __end_of_main 2EEC                      __end_of_ftoa 235A                      __end_of_menu 0913  
                    __end_of_itoa 28C1           __size_of_getAnalogValue 001D                      __end_of_swap 32C7  
          __end_of_setFudgeFactor 2A77                    __CFG_SAFEN$OFF 0000                  _viewErrorMessage 20AA  
              __size_ofi1_timeNow 000A          controller@dutyCycleTimer 0220                            ??_main 00EC  
                          ??_ftoa 00C5                            ??_menu 00DC                            ??_itoa 00C3  
                          ??_swap 0035                    OLED_print_xy@s 0032                     sortDCRev@cmp1 00BF  
                   sortDCRev@cmp2 00C1              __end_of_getNextState 18CF           __size_of_setOutputPower 017F  
             __size_of_OLED_write 000B                setOutputPower@data 00CD                   _setLensDia$2642 00D3  
           getAnalogValue@channel 0027                            ?_getPB 0070           _OLED_scrollDisplayRight 30D1  
                          _ADCON1 009E             calcRequiredPower@data 00B4                            ?_error 0070  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0026  
                          ?_setup 00CD                            _ANSELA 1F38                            _ANSELB 1F43  
                          _ANSELC 1F4E                __CFG_RSTOSC$HFINT1 0000                            ?_qsort 00C7  
                          _T0CON0 059E                            _T0CON1 059F                            _RC1REG 0119  
                          _RC1STA 011D                            _RC6PPS 1F26                            i1l5230 331D  
                          i1l5224 32FC                            i1l5226 3314                    __CFG_WDTCCS$SC 0000  
                          i1l6600 0036                            i1l6610 0069                            i1l6436 35D2  
                          i1l6448 35EC                            i1l6464 34D4                            i1l6482 36A5  
                          i1l6468 34DB                            i1l6476 369B             __end_of_getDataPacket 0004  
                          i1l6494 36DA                            i1l6488 36C5                            i1l6576 0017  
                          i1l6594 002F                            i1l6588 0028                            _INTCON 000B  
               __end_of_OLED_init 2B7E                 __end_of_OLED_send 3195                   systemCheck@data 00CA  
                          _OSCFRQ 0893                            _SPBRGL 011B                            _TX1REG 011A  
                          _TX1STA 011E              __end_of_getStateFunc 352B              getNextState@intState 0037  
                __end_of___xxtofl 2C14                   ??_pushButtonISR 0074                    __CFG_PWRTE$OFF 0000  
                     menu@timeout 00E2                            ___flge 2A77                            ___bmul 2002  
                          ___fleq 3648                     ?_setOLEDPower 0070                            ___lmul 32C7  
      OLED_loadSpecialChars@F7985 0320                         ??___fladd 00A0                            ___wmul 31AD  
                       ??___fldiv 00A0                         ??___awdiv 0028                    __CFG_STVREN$ON 0000  
                       ??___awmod 0028                         ??___flmul 004D                         ??___flsub 0067  
                       ??___fltol 00B8                   ?_setFudgeFactor 00CD                channelSetup@chData 00D3  
        __size_of_OLED_returnHome 0004                            _paging 28C1                            _memcpy 326C  
                ___awdiv@quotient 002B                   ___awmod@divisor 0024                            _rotISR 34A4  
                          _rotDir 01EE           __size_of_initGlobalData 0114                     ?_OLED_command 0070  
                 ___awmod@counter 0029                            _sortDC 33C4                            menu@pb 00E1  
              __size_of__Umul8_16 0020             __size_of_channelThing 0438             __size_of_channelSetup 01A3  
           OLED_waitForReady@busy 0024                         ??_timeNow 0028                            swap@s1 0033  
                          swap@s2 0034                 OLED_command@value 002A                            qsort@i 00DB  
                          qsort@j 00DD                            qsort@l 00D5                            qsort@r 00D7  
                          qsort@s 00D9                            qsort@x 00D3                         ??_sortCur 0067  
                       ??_strncpy 0073                  _OLED_pulseEnable 30F9                        ___flge@ff1 00B2  
                      ___flge@ff2 00B6                     checkSensor@dp 0067                      ___xxtofl@arg 0041  
                    ___xxtofl@exp 0040                      ___xxtofl@val 0037                        ___fleq@ff1 0024  
                      ___fleq@ff2 0028                    spinInput@input 00BE                 __end_ofi1_timeNow 3115  
         __end_of__initialization 00E2                      ftoa@intValue 00C9        __size_of_calcRequiredPower 04AC  
                      ___fltol@f1 00B4               ___bmul@multiplicand 002D                         ?_OLED_off 0070  
        __size_of_OLED_write4bits 003F                    ??_setOLEDPower 0024                    __pcstackCOMMON 0070  
                    __pidataBANK1 07FF                      __pidataBANK3 0801                      __pidataBANK4 30F1  
                    __pidataBANK6 3225                     __end_of_getPB 3155              uartReceiveISR@buffer 02CE  
                   __end_of_error 342E                      _channelThing 0BC8          __size_of_getAnalogValues 01B6  
                    _channelSetup 265D                     __end_of_setup 2E27                     __end_of_qsort 1C41  
                  ??_OLED_command 002A    __size_of_OLED_loadSpecialChars 0027                setFudgeFactor@data 00CD  
   __end_of_OLED_loadSpecialChars 326C                __size_of_getRotDir 000B         ??_OLED_scrollDisplayRight 002B  
                         ??_getPB 0024            __size_of_OLED_print_xy 0032                           ??_error 002B  
                      _dataPacket 0230                 ?_setChannelSwitch 0031                           ??_setup 00CF  
            __size_of_setDPOffset 006E                           ??_qsort 00CD                        __pbssBANK0 0068  
                      __pbssBANK1 00ED                        __pbssBANK2 0163                        __pbssBANK3 01E0  
                      __pbssBANK4 0220                        __pbssBANK5 02A0                uartIsDataReady@ret 0025  
         __size_of_uartReceiveISR 004E                 setOLEDPower@state 0024                ??_setChannelSwitch 0032  
           __size_of_getLastError 000E                      ??_OLED_write 002A                 __end_of__Umul8_16 3225  
                      ??_OLED_off 002B               channelThing@numGrpA 0259               channelThing@numGrpB 025A  
                      __pmaintext 2E27                    _getAnalogValue 31C9                           ?___flge 00B2  
                         ?___bmul 002D                           ?___fleq 0024                           ?___lmul 0024  
                         ?___wmul 0031                 getStateFunc@state 003C                   __CFG_PPS1WAY$ON 0000  
                      __pintentry 0004             __size_of_getNextState 00C8                           ?_paging 002B  
                         ?_memcpy 0031                 _OLED_waitForReady 31E6                    ___lmul@product 002C  
                         ?_rotISR 0070          ??_OLED_scrollDisplayLeft 002B                           ?_sortDC 00BF  
              __size_of_timeSince 0056                ?_OLED_waitForReady 0070                __size_of_uartReset 0009  
           channelThing@totalGrpA 024D             channelThing@totalGrpB 0251                    _setOutputPower 235A  
               ??_OLED_returnHome 002B                         ?___xxtofl 0037                __size_of_spinInput 0096  
                         _OSCCON1 088D                __size_of_sortDCRev 0035          __size_of_removeLastError 0018  
     __size_of_getLoadSwitchFault 0007                __end_of_OLED_write 3134                      _getLastError 07F1  
                   ??_get10msTick 0070               ??_OLED_waitForReady 0024             __size_of_getStateFunc 0044  
               pushButtonISR@time 0075                     channelThing@n 025F          __end_of_viewErrorMessage 21F3  
                     rotISR@input 007B                        _controller 2C14                      _getNextState 1807  
                    ?_systemCheck 00CA                _checkChannelStatus 1405            __end_of_getAnalogValue 31E6  
               __end_of_getRotDir 314A                        ema@average 0032                     _OLED_print_xy 3328  
              getAnalogValues@adc 00B8         __end_of_OLED_waitForReady 3205                   __size_of___flge 007C  
                 __size_of___bmul 0012                   __size_of___fleq 0049                           ___fladd 0592  
                         ___fldiv 1007                           ___awdiv 36DF                   __size_of___lmul 0030  
                         ___awmod 352B                           ___flmul 11D9                           ___flsub 335A  
                         ___fltol 3731                   __size_of___wmul 001C                   OLED_write@value 002A  
             ?_checkChannelStatus 00BF                     ?_uartSendByte 0070                    _initGlobalData 2EEC  
                 __size_of_paging 006B                 ??_OLED_write4bits 0024                   __size_of_memcpy 002C  
                      _initialize 3600                   __size_of_rotISR 0043            __end_of_setOutputPower 24D9  
                         __ptext1 20AA                           __ptext2 3195                           __ptext3 07F1  
                         __ptext4 1C41                           __ptext5 30E9                           __ptext6 1803  
                         __ptext7 30E1                           __ptext8 30D5                           __ptext9 0834  
                   ??_checkSensor 00C0                   __size_of_sortDC 0035                           _pbState 007D  
                    _getStateFunc 34E7                   __CFG_WRTAPP$OFF 0000                      __size_of_ISR 0076  
                _channelView$2641 00D5                           ema@tmp0 0040                      __size_of_ema 0069  
                      ??___xxtofl 003B                  ___awmod@dividend 0026                 ??_getAnalogValues 0067  
                       _IOCAFbits 1F3F                   __CFG_WRTSAF$OFF 0000                           _rxCount 006B  
                         _timeNow 316D                     ??_channelView 00CF              __end_of_setOLEDPower 30F1  
                         _sortCur 342E                           clrloop0 3156              ??_checkChannelStatus 00C1  
         setChannelSwitch@channel 0034                           _strncpy 32F7              end_of_initialization 00E2  
                      _setLensDia 2CC0                           ftoa@len 00C7                           ftoa@pos 00CB  
                         ftoa@str 00CC                           paging@n 0030                           memcpy@d 0037  
                         memcpy@n 0032                           memcpy@s 0038                    paging@lastPage 002B  
           checkChannelStatus@adc 00C5              __end_of_OLED_command 311F             checkChannelStatus@avg 00D0  
                         init_ram 3161                           itoa@str 00BF                           initloop 3162  
             __end_of_get10msTick 30CD                        _setSkyTemp 299A                 __end_of_timeSince 2858  
               __end_of_uartReset 310B          __size_of_uartIsDataReady 000B                  ??_setFudgeFactor 00CF  
                       _OLED_init 2AF3                         _OLED_send 317E                   ?_getAnalogValue 0024  
          __size_of_setLoadSwitch 0008            __size_of_reset10msTick 0003               OLED_setCursor@F7972 0264  
                   ?_returnToPage 0070                 __end_of_spinInput 20AA          ___checkChannelStatus@avg 01E2  
                  ?_OLED_print_xy 0031                 __end_of_sortDCRev 33C4                OLED_print_xy@F7980 0260  
                         sortDC@a 00C5                           sortDC@b 00C6                           swap@len 0031  
          __end_of_initGlobalData 3000                     _dataReadyFlag 01EB                    ??_uartSendByte 0024  
           __CFG_WDTCPS$WDTCPS_31 0000          __end_of_OLED_pulseEnable 3102                         _PORTAbits 000C  
                       _PORTCbits 000E                   ?_setOutputPower 00CD   __size_of_OLED_scrollDisplayLeft 0004  
                      _qsort$2692 0067                   _selectedChannel 00EE                       ___fladd@grs 00AB  
                   ___xxtofl@sign 003F                         _TRISCbits 0014                       ___fldiv@grs 00AC  
                     ___fldiv@rem 00A5              _getAnalogValues$2650 00B4               __end_of_checkSensor 265D  
                __CFG_FEXTOSC$OFF 0000      OLED_loadSpecialChars@special 002C                    _uartReceiveISR 3691  
                     ___flmul@grs 0054                 ??_removeLastError 002B                        _statusView 1E1C  
             __end_of_channelView 0BC8                       ?_controller 0070         ___checkChannelStatus@done 01E6  
                 channelView@data 00CD                 getNextState@state 003D                   channelView@page 00ED  
                      ?_OLED_init 0070                    ??_returnToPage 0037                        ?_OLED_send 0027  
                       i1_timeNow 310B             __end_of_pushButtonISR 3600        __size_of_OLED_waitForReady 001F  
               __size_of_OLED_off 0008                   ?_initGlobalData 0037                    __end_of___flge 2AF3  
            __end_of_nextStateTbl 3854                    __end_of___bmul 2014                    __end_of___fleq 3691  
                  __end_of___lmul 32F7                    __end_of___wmul 31C9                       ?_initialize 0070  
          __size_of_getDataPacket 0002                    __end_of_paging 292C                    __end_of_memcpy 3298  
                      ftoa@fValue 00BF                    __end_of_rotISR 34E7                    __end_of_sortDC 33F9  
                   _setLoadSwitch 30D9               start_initialization 007C                     _reset10msTick 1800  
                     __end_of_ISR 007A                       __end_of_ema 3800          OLED_print_xy@row_offsets 0035  
          __end_of_uartReceiveISR 36DF                       _get10msTick 30CA                       ?_setLensDia 00CD  
          _OLED_scrollDisplayLeft 30CD              calcRequiredPower@Rth 0124              initGlobalData@chData 003E  
            calcRequiredPower@phi 0144                       ?_setSkyTemp 00CD                   ??_OLED_print_xy 0034  
                  systemCheck@str 00D0                        ?i1_timeNow 0070                       sortCur@cmp1 00BF  
                     sortCur@cmp2 00C1                  __CFG_LPBOREN$OFF 0000           _checkChannelStatus$1791 00C7  
         _checkChannelStatus$1792 00CB          checkChannelStatus@chData 00D7                        error@error 002C  
                        ??___flge 00BA                          ??___bmul 002E                          ??___fleq 002C  
            __size_of_systemCheck 01DB                    timeSince@since 0028                          ??___lmul 002C  
       __size_of_setChannelSwitch 0047                   _OLED_returnHome 1803                          ??___wmul 0035  
                       __Umul8_16 3205                 ??_uartIsDataReady 0024                       __pdataBANK1 00EF  
                     __pdataBANK3 01EF                       __pdataBANK4 0260                       __pdataBANK6 0320  
              setLoadSwitch@state 0024                          ??_paging 002C                          ??_memcpy 0034  
                        ??_rotISR 0074             setChannelSwitch@state 0031                       qsort@compar 00CB  
                        ??_sortDC 00C3                  OLED_print_xy@col 0039                       _checkSensor 24D9  
           __size_of_setOLEDPower 0008                         ___fladd@a 0063                         ___fladd@b 005F  
                OLED_print_xy@row 0031                    ?_setLoadSwitch 0070                         ___fldiv@a 005F  
                       ___fldiv@b 0063                    ?_reset10msTick 0070                       __pbssBIGRAM 274A  
             __size_of_controller 00AC                         ___flmul@a 0049                         ___flmul@b 0045  
                     __pbssCOMMON 007C                         ___flsub@a 00AC                         ___flsub@b 00B0  
                       ___latbits 0003                     ??_setDPOffset 00CF                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120                     __pcstackBANK3 01A0  
                   __pcstackBANK4 0249             _OLED_loadSpecialChars 3245             __size_of_OLED_command 000A  
               __size_of___xxtofl 0096                 paging@currentPage 002E                       _channelView 0913  
                 ?_uartReceiveISR 0070              __end_of_uartSendByte 3129                      systemCheck@n 00D3  
               ?_viewErrorMessage 0070                       ?_statusView 00CD                     _getDataPacket 0002  
             __size_of_initialize 0048              setOutputPower@chData 00D3                ??_viewErrorMessage 003A  
                 _OLED_write4bits 3465                       ??_OLED_init 002B                       ??_OLED_send 0028  
                    _setOLEDPower 30E9                          ?___fladd 005F                   _getAnalogValues 18CF  
                        ?___fldiv 005F                          ?___awdiv 0024                          ?___awmod 0024  
                        ?___flmul 0045                          ?___flsub 00AC                          ?___fltol 00B4  
                       _getRotDir 313F                        ?__Umul8_16 0024               __size_of_setLensDia 00AD  
        ?_OLED_scrollDisplayRight 0070                      _OLED_command 3115                          _BAUD1CON 011F  
                  getNextState@pb 0038                      channelView@n 00D9        __end_of_getLoadSwitchFault 1007  
             __size_of_setSkyTemp 006E              __end_of_returnToPage 0834                          ?_timeNow 0024  
                  __size_of_getPB 000B                          ?_sortCur 00BF                    __size_of_error 0035  
                       _tick100ms 0163                          ?_strncpy 0070                    __size_of_setup 00BA  
                  __size_of_qsort 01BC                    ?_getDataPacket 0070                  ??_getAnalogValue 0026  
             __end_of_setDPOffset 299A                    ___wmul@product 0035                          _LATAbits 0018  
                        _LATBbits 0019                          _LATCbits 001A           __end_of_OLED_returnHome 1807  
                       clear_ram0 3155                     paging@lastDir 01E8                          _PIE0bits 0716  
                        _PIE3bits 0719                          _PIE4bits 071A                    setLensDia@data 00CD  
                     ??i1_timeNow 0074                          _OLED_off 30E1                          _PIR0bits 070C  
                        _PIR3bits 070F                          _PIR4bits 0710                         _timeSince 2802  
                       _uartReset 3102                   initGlobalData@n 003D                 __CFG_BBSIZE$BB512 0000  
                ??_setOutputPower 00CF                        ?_getRotDir 0070                         _spinInput 2014  
                       _sortDCRev 338F                 ?_OLED_pulseEnable 0070                   ??_setLoadSwitch 0024  
                 ??_reset10msTick 0070                        _ADCON0bits 009D                 ___wmul@multiplier 0031  
                    _RX1DTPPSbits 1ECB               __size_of_statusView 01E4                   setDPOffset@data 00CD  
              ??_OLED_pulseEnable 0024            ?_OLED_loadSpecialChars 0070                   _removeLastError 3195  
                   menu@nextState 00E5                        sortDC@cmp1 00BF                        sortDC@cmp2 00C1  
            OLED_write4bits@value 0026                       _curRotState 007C                        sortDCRev@a 00C5  
                      sortDCRev@b 00C6                  _transition_table 38CD              __end_of_stateFuncTbl 386F  
               ___lmul@multiplier 0024           __end_of_OLED_write4bits 34A4       __size_of_checkChannelStatus 03FB  
                    _nextStateTbl 3800                         ftoa@width 00C3                      ??_controller 0038  
         __end_of_getAnalogValues 1A85               calcRequiredPower@T1 0150               calcRequiredPower@T2 0154  
                ??_initGlobalData 0039                         paging@dir 002F                 _OLED_clearDisplay 30D5  
                   uartSendByte@s 0024                         menu@sleep 01E9                         menu@state 016B  
                       memcpy@tmp 0035                        ?_timeSince 0028                        ?_uartReset 0070  
 __end_of_OLED_scrollDisplayRight 30D5                ?_OLED_clearDisplay 0070         checkChannelStatus@channel 00D6  
                _setChannelSwitch 3571                       ??__Umul8_16 0026                     ?_channelThing 00DF  
                       itoa@value 00C1               getAnalogValues@data 00B2               getAnalogValues@avgI 022C  
                   ?_channelSetup 00CD               getAnalogValues@avgT 01E0               getAnalogValues@avgV 022E  
                       itoa@width 00C2                  __size_of___fladd 025F                        qsort@vbase 00D2  
                __size_of___fldiv 01D2                  __size_of___awdiv 0052                  __size_of___awmod 0046  
                      ?_spinInput 00BE                  __size_of___flmul 022C                  __size_of___flsub 0035  
                __size_of___fltol 0066                        qsort@stack 01A0                        qsort@width 00C9  
                      ?_sortDCRev 00BF            OLED_loadSpecialChars@n 004C                      ??_initialize 0024  
       checkChannelStatus@current 00D2               ??_OLED_clearDisplay 002B         checkChannelStatus@samples 00CF  
                        ___xxtofl 2B7E                __end_of_controller 2CC0                       _rxFErrCount 01ED  
               _errorMessageQueue 02A0             __size_of_uartSendByte 000A                       _setDPOffset 292C  
        checkSensor@sensorTimeout 0224                          __ptext10 2A08                          __ptext11 299A  
                        __ptext20 2014                          __ptext12 292C                          __ptext21 34E7  
                        __ptext13 2D6D                          __ptext30 3328                          __ptext22 1807  
                        __ptext14 2CC0                          __ptext31 3600                          __ptext23 0802  
                        __ptext15 235A                          __ptext40 316D                          __ptext32 2EEC  
                        __ptext24 28C1                          __ptext16 265D                          __ptext41 0002  
                        __ptext33 18CF                          __ptext25 313F                          __ptext17 0913  
                        __ptext50 32C7                          __ptext42 1405                          __ptext34 2C14  
                        __ptext26 30D1                          __ptext18 1E1C                          __ptext51 3648  
                        __ptext43 30D9                          __ptext35 24D9                          __ptext27 30CD  
                        __ptext19 314A                          __ptext60 326C                          __ptext52 0BC8  
                        __ptext44 3571                          __ptext36 311F                          __ptext28 2858  
                        __ptext61 36DF                          __ptext53 1A85                          __ptext45 1000  
                        __ptext37 3102                          __ptext29 21F3                          __ptext70 1007  
                        __ptext62 2B7E                          __ptext54 3298                          __ptext46 31C9  
                        __ptext38 3134                          __ptext71 3245                          __ptext63 2A77  
                        __ptext55 342E                          __ptext47 33F9                          __ptext39 2802  
                        __ptext80 3691                          __ptext72 3129                          __ptext64 00E6  
                        __ptext56 33C4                          __ptext48 352B                          __ptext81 32F7  
                        __ptext73 2AF3                          __ptext65 31AD                          __ptext57 338F  
                        __ptext49 3797                          __ptext82 34A4                          __ptext74 3115  
                        __ptext66 335A                          __ptext58 2002                          __ptext83 35B8  
                        __ptext75 31E6                          __ptext67 0592                          __ptext59 3731  
                        __ptext84 310B                          __ptext76 317E                          __ptext68 11D9  
                        __ptext85 1800                          __ptext77 3465                          __ptext69 3205  
                        __ptext86 30CA                          __ptext78 30F9                      ?_get10msTick 0070  
                __size_of_timeNow 0011                   ??_getDataPacket 0024           ?_OLED_scrollDisplayLeft 0070  
                    ??_setLensDia 00CF                  __size_of_sortCur 0037                     getNextState@n 003E  
                     _OSCCON3bits 088F                  __size_of_strncpy 0031                          ema@alpha 0034  
                   __size_of_main 00C5                     __size_of_ftoa 0167         __end_of_OLED_clearDisplay 30D9  
            main@sysCheckInterval 015D                     __size_of_menu 00DF                     __size_of_itoa 0069  
                    ??_setSkyTemp 00CF                   _uartIsDataReady 3134                          getPB@ret 0025  
                   __size_of_swap 002F                          _tick10ms 016F                  ?_OLED_returnHome 0070  
              __end_of_initialize 3648              __CFG_WDTCWS$WDTCWS_7 0000                        _RC1STAbits 011D  
                     _rxOErrCount 01EC                    ??_channelThing 00E1                    ??_channelSetup 00CF  
                       setup@data 00CD                          int$flags 007E                         setup@page 016C  
                     ??_getRotDir 0024           __end_of_removeLastError 31AD                          main@idle 0162  
                    _uartSendByte 311F             __size_of_returnToPage 0032                __end_of_setLensDia 2D6D  
         __size_of_setFudgeFactor 006F                      ?_checkSensor 00BE                  ??_uartReceiveISR 0076  
                        ftoa@prec 00C4                          ftoa@sign 00C8                        _INTCONbits 000B  
              calcRequiredPower@A 0148                calcRequiredPower@d 0140                calcRequiredPower@n 0158  
              calcRequiredPower@p 0120                __end_of_setSkyTemp 2A08                          menu@data 00DA  
              initGlobalData@data 0037                          menu@page 00E0                          memcpy@d1 0036  
                        menu@func 00E3                          memcpy@s1 0031    __end_of_OLED_scrollDisplayLeft 30D1  
                   ?_getLastError 0070                      timeSince@now 0034            checkChannelStatus@data 00BF  
                  __pstringtext10 392A                    __pstringtext11 3937                    __pstringtext20 39AC  
                  __pstringtext12 3944                    __pstringtext21 39B9                    __pstringtext13 3951  
                  __pstringtext30 3A2E                    __pstringtext22 39C6                    __pstringtext14 395E  
                  __pstringtext31 3A3B                    __pstringtext23 39D3                    __pstringtext15 396B  
                  __pstringtext40 3AB0                    __pstringtext32 3A48                    __pstringtext24 39E0  
                  __pstringtext16 3978                    __pstringtext41 3ABD                    __pstringtext33 3A55  
                  __pstringtext25 39ED                    __pstringtext17 3985                    __pstringtext50 3B1D  
                  __pstringtext42 3ACA                    __pstringtext34 3A62                    __pstringtext26 39FA  
                  __pstringtext18 3992                    __pstringtext51 3B25                    __pstringtext43 3AD7  
                  __pstringtext35 3A6F                    __pstringtext27 3A07                    __pstringtext19 399F  
                  __pstringtext60 3B69                    __pstringtext52 3B2D                    __pstringtext44 3AE4  
                  __pstringtext36 3A7C                    __pstringtext28 3A14                    __pstringtext61 3B70  
                  __pstringtext53 3B35                    __pstringtext45 3AF0                    __pstringtext37 3A89  
                  __pstringtext29 3A21                    __pstringtext70 3B92                    __pstringtext62 3B76  
                  __pstringtext54 3B3D                    __pstringtext46 3AFA                    __pstringtext38 3A96  
                  __pstringtext71 3B95                    __pstringtext63 3B7A                    __pstringtext55 3B45  
                  __pstringtext47 3B03                    __pstringtext39 3AA3                    __pstringtext72 3B98  
                  __pstringtext64 3B7E                    __pstringtext56 3B4D                    __pstringtext48 3B0C  
                  __pstringtext73 0000                    __pstringtext65 3B82                    __pstringtext57 3B54  
                  __pstringtext49 3B15                    __pstringtext66 3B86                    __pstringtext58 3B5B  
                  __pstringtext67 3B89                    __pstringtext59 3B62                    __pstringtext68 3B8C  
                  __pstringtext69 3B8F            __size_of_pushButtonISR 0048                         qsort@base 00D4  
                    ?_channelView 00CD                         qsort@xbuf 0120         viewErrorMessage@errorCode 003C  
                ?_OLED_write4bits 0070                          intlevel1 0000                      ??_statusView 00CF  
               __CFG_CLKOUTEN$OFF 0000                  ?_getAnalogValues 00B2                     ?_getNextState 0037  
                   ??_systemCheck 00CC                        _OLED_write 3129                         strncpy@cp 0075  
           __end_of_OLED_print_xy 335A                      _returnToPage 0802                       ??_timeSince 002C  
                     ??_uartReset 0024                       ??_spinInput 0067                       ??_sortDCRev 00C3  
                    getRotDir@ret 0025         __size_of_viewErrorMessage 0149      ___checkChannelStatus@channel 0068  
                        sortCur@a 00C3                          sortCur@b 00C5                     __pstringtext1 3800  
                   __pstringtext2 38CD                     __pstringtext3 3854                     __pstringtext4 38A8  
                   __pstringtext5 38E9                     __pstringtext6 38F6                     __pstringtext7 3903  
                   __pstringtext8 3910                     __pstringtext9 391D                          qsort@nel 00C7  
                   ?_getStateFunc 0037            __Umul8_16@multiplicand 0024                     getStateFunc@n 003D  
              __end_of_statusView 2000                    ??_getLastError 0024      ___checkChannelStatus@samples 01E7  
                        strncpy@d 0074                          strncpy@n 0071                          strncpy@s 0070  
         __end_of_uartIsDataReady 313F                     ___fladd@signs 00A8  __size_of_OLED_scrollDisplayRight 0004  
                checkSensor@state 01E5                _getLoadSwitchFault 1000                      ___fladd@aexp 00A9  
                    ___fladd@bexp 00AA                    controller@idle 01E4        __size_of_OLED_clearDisplay 0004  
                 checkSensor@data 00BE                    controller@tick 003D                    ??_getNextState 003A  
            __Umul8_16@multiplier 002C                 __Umul8_16@product 0028               ?_getLoadSwitchFault 0070  
                 _g_screenRefresh 00EF  
