

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Feb 03 15:31:29 2020

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	stringtext40,global,class=STRCODE,delta=2
    47                           	psect	stringtext41,global,class=STRCODE,delta=2
    48                           	psect	stringtext42,global,class=STRCODE,delta=2
    49                           	psect	stringtext43,global,class=STRCODE,delta=2
    50                           	psect	stringtext44,global,class=STRCODE,delta=2
    51                           	psect	stringtext45,global,class=STRCODE,delta=2
    52                           	psect	stringtext46,global,class=STRCODE,delta=2
    53                           	psect	stringtext47,global,class=STRCODE,delta=2
    54                           	psect	stringtext48,global,class=STRCODE,delta=2
    55                           	psect	stringtext49,global,class=STRCODE,delta=2
    56                           	psect	stringtext50,global,class=STRCODE,delta=2
    57                           	psect	stringtext51,global,class=STRCODE,delta=2
    58                           	psect	stringtext52,global,class=STRCODE,delta=2
    59                           	psect	stringtext53,global,class=STRCODE,delta=2
    60                           	psect	stringtext54,global,class=STRCODE,delta=2
    61                           	psect	stringtext55,global,class=STRCODE,delta=2
    62                           	psect	stringtext56,global,class=STRCODE,delta=2
    63                           	psect	stringtext57,global,class=STRCODE,delta=2
    64                           	psect	stringtext58,global,class=STRCODE,delta=2
    65                           	psect	stringtext59,global,class=STRCODE,delta=2
    66                           	psect	stringtext60,global,class=STRCODE,delta=2
    67                           	psect	stringtext61,global,class=STRCODE,delta=2
    68                           	psect	stringtext62,global,class=STRCODE,delta=2
    69                           	psect	stringtext63,global,class=STRCODE,delta=2
    70                           	psect	stringtext64,global,class=STRCODE,delta=2
    71                           	psect	stringtext65,global,class=STRCODE,delta=2
    72                           	psect	stringtext66,global,class=STRCODE,delta=2
    73                           	psect	stringtext67,global,class=STRCODE,delta=2
    74                           	psect	stringtext68,global,class=STRCODE,delta=2
    75                           	psect	stringtext69,global,class=STRCODE,delta=2
    76                           	psect	stringtext70,global,class=STRCODE,delta=2
    77                           	psect	stringtext71,global,class=STRCODE,delta=2
    78                           	psect	stringtext72,global,class=STRCODE,delta=2
    79                           	psect	stringtext73,global,class=STRCODE,delta=2
    80                           	psect	cinit,global,class=CODE,merge=1,delta=2
    81                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    82                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    83                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    84                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    85                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    86                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    87                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    88                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    89                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    90                           	psect	inittext,global,class=CODE,delta=2
    91                           	psect	clrtext,global,class=CODE,delta=2
    92                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1
    93                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    94                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    95                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    96                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    97                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    98                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    99                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   100                           	psect	text1,local,class=CODE,merge=1,delta=2
   101                           	psect	swtext1,local,class=CONST,delta=2
   102                           	psect	text2,local,class=CODE,merge=1,delta=2
   103                           	psect	text3,local,class=CODE,merge=1,delta=2
   104                           	psect	text4,local,class=CODE,merge=1,delta=2
   105                           	psect	text5,local,class=CODE,merge=1,delta=2
   106                           	psect	text6,local,class=CODE,merge=1,delta=2
   107                           	psect	text7,local,class=CODE,merge=1,delta=2
   108                           	psect	text8,local,class=CODE,merge=1,delta=2
   109                           	psect	text9,local,class=CODE,merge=1,delta=2
   110                           	psect	text10,local,class=CODE,merge=1,delta=2
   111                           	psect	text11,local,class=CODE,merge=1,delta=2
   112                           	psect	text12,local,class=CODE,merge=1,delta=2
   113                           	psect	text13,local,class=CODE,merge=1,delta=2
   114                           	psect	swtext2,local,class=CONST,delta=2
   115                           	psect	text14,local,class=CODE,merge=1,delta=2
   116                           	psect	text15,local,class=CODE,merge=1,delta=2
   117                           	psect	text16,local,class=CODE,merge=1,delta=2
   118                           	psect	text17,local,class=CODE,merge=1,delta=2
   119                           	psect	text18,local,class=CODE,merge=1,delta=2
   120                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
   121                           	psect	text20,local,class=CODE,merge=1,delta=2
   122                           	psect	text21,local,class=CODE,merge=1,delta=2
   123                           	psect	text22,local,class=CODE,merge=1,delta=2
   124                           	psect	text23,local,class=CODE,merge=1,delta=2
   125                           	psect	text24,local,class=CODE,merge=1,delta=2
   126                           	psect	text25,local,class=CODE,merge=1,delta=2
   127                           	psect	text26,local,class=CODE,merge=1,delta=2
   128                           	psect	text27,local,class=CODE,merge=1,delta=2
   129                           	psect	text28,local,class=CODE,merge=1,delta=2
   130                           	psect	text29,local,class=CODE,merge=1,delta=2
   131                           	psect	text30,local,class=CODE,merge=1,delta=2
   132                           	psect	text31,local,class=CODE,merge=1,delta=2
   133                           	psect	text32,local,class=CODE,merge=1,delta=2
   134                           	psect	text33,local,class=CODE,merge=1,delta=2
   135                           	psect	text34,local,class=CODE,merge=1,delta=2
   136                           	psect	text35,local,class=CODE,merge=1,delta=2
   137                           	psect	text36,local,class=CODE,merge=1,delta=2
   138                           	psect	text37,local,class=CODE,merge=1,delta=2
   139                           	psect	text38,local,class=CODE,merge=1,delta=2
   140                           	psect	text39,local,class=CODE,merge=1,delta=2
   141                           	psect	text40,local,class=CODE,merge=1,delta=2
   142                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
   143                           	psect	text42,local,class=CODE,merge=1,delta=2
   144                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
   145                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
   146                           	psect	text45,local,class=CODE,merge=1,delta=2
   147                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
   148                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
   149                           	psect	text48,local,class=CODE,merge=1,delta=2
   150                           	psect	text49,local,class=CODE,merge=1,delta=2
   151                           	psect	text50,local,class=CODE,merge=1,delta=2
   152                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   153                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
   154                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   155                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   156                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   157                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   158                           	psect	text57,local,class=CODE,merge=1,delta=2
   159                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
   160                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
   161                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
   162                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   163                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
   164                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
   165                           	psect	text64,local,class=CODE,merge=1,delta=2
   166                           	psect	text65,local,class=CODE,merge=1,delta=2
   167                           	psect	text66,local,class=CODE,merge=1,delta=2
   168                           	psect	text67,local,class=CODE,merge=1,delta=2
   169                           	psect	text68,local,class=CODE,merge=1,delta=2
   170                           	psect	text69,local,class=CODE,merge=1,delta=2
   171                           	psect	text70,local,class=CODE,merge=1,delta=2
   172                           	psect	intentry,global,class=CODE,delta=2
   173                           	psect	text72,local,class=CODE,merge=1,delta=2
   174                           	psect	text73,local,class=CODE,merge=1,delta=2
   175                           	psect	text74,local,class=CODE,merge=1,delta=2,group=2
   176                           	psect	text75,local,class=CODE,merge=1,delta=2
   177                           	psect	text76,local,class=CODE,merge=1,delta=2
   178                           	dabs	1,0xCA0,32
   179                           	dabs	1,0xC20,80
   180                           	dabs	1,0xBBA,54
   181                           	dabs	1,0x274A,0,_data
   182                           	dabs	1,0x7E,2
   183  0000                     
   184                           ; Version 2.00
   185                           ; Generated 27/05/2018 GMT
   186                           ; 
   187                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   188                           ; All rights reserved.
   189                           ; 
   190                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   191                           ; 
   192                           ; Redistribution and use in source and binary forms, with or without modification, are
   193                           ; permitted provided that the following conditions are met:
   194                           ; 
   195                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   196                           ;        conditions and the following disclaimer.
   197                           ; 
   198                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   199                           ;        of conditions and the following disclaimer in the documentation and/or other
   200                           ;        materials provided with the distribution.
   201                           ; 
   202                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   203                           ;        software without specific prior written permission.
   204                           ; 
   205                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   206                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   207                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   208                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   209                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   210                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   211                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   212                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   213                           ; 
   214                           ; 
   215                           ; Code-generator required, PIC16F15356 Definitions
   216                           ; 
   217                           ; SFR Addresses
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  0010                     	;# 
   234  0012                     	;# 
   235  0013                     	;# 
   236  0014                     	;# 
   237  0016                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  009B                     	;# 
   242  009B                     	;# 
   243  009C                     	;# 
   244  009D                     	;# 
   245  009E                     	;# 
   246  009F                     	;# 
   247  0119                     	;# 
   248  0119                     	;# 
   249  0119                     	;# 
   250  011A                     	;# 
   251  011A                     	;# 
   252  011A                     	;# 
   253  011B                     	;# 
   254  011B                     	;# 
   255  011B                     	;# 
   256  011B                     	;# 
   257  011B                     	;# 
   258  011C                     	;# 
   259  011C                     	;# 
   260  011C                     	;# 
   261  011D                     	;# 
   262  011D                     	;# 
   263  011D                     	;# 
   264  011E                     	;# 
   265  011E                     	;# 
   266  011E                     	;# 
   267  011F                     	;# 
   268  011F                     	;# 
   269  011F                     	;# 
   270  011F                     	;# 
   271  011F                     	;# 
   272  018C                     	;# 
   273  018D                     	;# 
   274  018E                     	;# 
   275  018F                     	;# 
   276  0190                     	;# 
   277  0191                     	;# 
   278  0192                     	;# 
   279  0196                     	;# 
   280  0197                     	;# 
   281  0198                     	;# 
   282  0199                     	;# 
   283  019A                     	;# 
   284  019B                     	;# 
   285  019C                     	;# 
   286  020C                     	;# 
   287  020C                     	;# 
   288  020D                     	;# 
   289  020E                     	;# 
   290  020F                     	;# 
   291  020F                     	;# 
   292  0210                     	;# 
   293  0210                     	;# 
   294  0211                     	;# 
   295  0211                     	;# 
   296  028C                     	;# 
   297  028C                     	;# 
   298  028D                     	;# 
   299  028D                     	;# 
   300  028E                     	;# 
   301  028F                     	;# 
   302  0290                     	;# 
   303  0291                     	;# 
   304  030C                     	;# 
   305  030C                     	;# 
   306  030D                     	;# 
   307  030E                     	;# 
   308  030F                     	;# 
   309  0310                     	;# 
   310  0310                     	;# 
   311  0311                     	;# 
   312  0312                     	;# 
   313  0313                     	;# 
   314  0314                     	;# 
   315  0314                     	;# 
   316  0315                     	;# 
   317  0316                     	;# 
   318  0318                     	;# 
   319  0318                     	;# 
   320  0319                     	;# 
   321  031A                     	;# 
   322  031C                     	;# 
   323  031C                     	;# 
   324  031D                     	;# 
   325  031E                     	;# 
   326  038C                     	;# 
   327  038C                     	;# 
   328  038D                     	;# 
   329  038E                     	;# 
   330  058C                     	;# 
   331  058C                     	;# 
   332  058D                     	;# 
   333  058E                     	;# 
   334  058F                     	;# 
   335  058F                     	;# 
   336  0590                     	;# 
   337  0591                     	;# 
   338  0592                     	;# 
   339  0593                     	;# 
   340  059C                     	;# 
   341  059C                     	;# 
   342  059D                     	;# 
   343  059D                     	;# 
   344  059E                     	;# 
   345  059F                     	;# 
   346  060C                     	;# 
   347  060D                     	;# 
   348  060E                     	;# 
   349  060F                     	;# 
   350  0610                     	;# 
   351  0611                     	;# 
   352  0612                     	;# 
   353  0613                     	;# 
   354  0614                     	;# 
   355  070C                     	;# 
   356  070D                     	;# 
   357  070E                     	;# 
   358  070F                     	;# 
   359  0710                     	;# 
   360  0711                     	;# 
   361  0712                     	;# 
   362  0713                     	;# 
   363  0716                     	;# 
   364  0717                     	;# 
   365  0718                     	;# 
   366  0719                     	;# 
   367  071A                     	;# 
   368  071B                     	;# 
   369  071C                     	;# 
   370  071D                     	;# 
   371  0796                     	;# 
   372  0797                     	;# 
   373  0798                     	;# 
   374  0799                     	;# 
   375  079A                     	;# 
   376  079B                     	;# 
   377  080C                     	;# 
   378  080D                     	;# 
   379  080E                     	;# 
   380  080F                     	;# 
   381  0810                     	;# 
   382  0811                     	;# 
   383  0812                     	;# 
   384  0813                     	;# 
   385  0814                     	;# 
   386  081A                     	;# 
   387  081A                     	;# 
   388  081B                     	;# 
   389  081C                     	;# 
   390  081C                     	;# 
   391  081D                     	;# 
   392  081E                     	;# 
   393  081F                     	;# 
   394  088C                     	;# 
   395  088D                     	;# 
   396  088E                     	;# 
   397  088F                     	;# 
   398  0890                     	;# 
   399  0891                     	;# 
   400  0892                     	;# 
   401  0893                     	;# 
   402  0895                     	;# 
   403  0896                     	;# 
   404  090C                     	;# 
   405  090E                     	;# 
   406  090F                     	;# 
   407  091F                     	;# 
   408  098F                     	;# 
   409  098F                     	;# 
   410  0990                     	;# 
   411  0991                     	;# 
   412  0992                     	;# 
   413  0993                     	;# 
   414  0994                     	;# 
   415  0995                     	;# 
   416  0996                     	;# 
   417  0997                     	;# 
   418  0A19                     	;# 
   419  0A19                     	;# 
   420  0A1A                     	;# 
   421  0A1A                     	;# 
   422  0A1B                     	;# 
   423  0A1B                     	;# 
   424  0A1B                     	;# 
   425  0A1C                     	;# 
   426  0A1C                     	;# 
   427  0A1D                     	;# 
   428  0A1D                     	;# 
   429  0A1E                     	;# 
   430  0A1E                     	;# 
   431  0A1F                     	;# 
   432  0A1F                     	;# 
   433  0A1F                     	;# 
   434  1E0F                     	;# 
   435  1E10                     	;# 
   436  1E11                     	;# 
   437  1E12                     	;# 
   438  1E13                     	;# 
   439  1E14                     	;# 
   440  1E15                     	;# 
   441  1E16                     	;# 
   442  1E17                     	;# 
   443  1E18                     	;# 
   444  1E19                     	;# 
   445  1E1A                     	;# 
   446  1E1B                     	;# 
   447  1E1C                     	;# 
   448  1E1D                     	;# 
   449  1E1E                     	;# 
   450  1E1F                     	;# 
   451  1E20                     	;# 
   452  1E21                     	;# 
   453  1E22                     	;# 
   454  1E23                     	;# 
   455  1E24                     	;# 
   456  1E25                     	;# 
   457  1E26                     	;# 
   458  1E27                     	;# 
   459  1E28                     	;# 
   460  1E29                     	;# 
   461  1E2A                     	;# 
   462  1E2B                     	;# 
   463  1E2C                     	;# 
   464  1E2D                     	;# 
   465  1E2E                     	;# 
   466  1E2F                     	;# 
   467  1E30                     	;# 
   468  1E31                     	;# 
   469  1E32                     	;# 
   470  1E33                     	;# 
   471  1E34                     	;# 
   472  1E35                     	;# 
   473  1E36                     	;# 
   474  1E37                     	;# 
   475  1E8F                     	;# 
   476  1E90                     	;# 
   477  1E91                     	;# 
   478  1E92                     	;# 
   479  1E93                     	;# 
   480  1E9C                     	;# 
   481  1EA1                     	;# 
   482  1EA2                     	;# 
   483  1EB1                     	;# 
   484  1EBB                     	;# 
   485  1EBC                     	;# 
   486  1EBD                     	;# 
   487  1EBE                     	;# 
   488  1EC3                     	;# 
   489  1EC5                     	;# 
   490  1EC6                     	;# 
   491  1EC7                     	;# 
   492  1EC8                     	;# 
   493  1EC9                     	;# 
   494  1ECA                     	;# 
   495  1ECB                     	;# 
   496  1ECC                     	;# 
   497  1ECD                     	;# 
   498  1ECE                     	;# 
   499  1F10                     	;# 
   500  1F11                     	;# 
   501  1F12                     	;# 
   502  1F13                     	;# 
   503  1F14                     	;# 
   504  1F15                     	;# 
   505  1F16                     	;# 
   506  1F17                     	;# 
   507  1F18                     	;# 
   508  1F19                     	;# 
   509  1F1A                     	;# 
   510  1F1B                     	;# 
   511  1F1C                     	;# 
   512  1F1D                     	;# 
   513  1F1E                     	;# 
   514  1F1F                     	;# 
   515  1F20                     	;# 
   516  1F21                     	;# 
   517  1F22                     	;# 
   518  1F23                     	;# 
   519  1F24                     	;# 
   520  1F25                     	;# 
   521  1F26                     	;# 
   522  1F27                     	;# 
   523  1F38                     	;# 
   524  1F39                     	;# 
   525  1F3A                     	;# 
   526  1F3B                     	;# 
   527  1F3C                     	;# 
   528  1F3D                     	;# 
   529  1F3E                     	;# 
   530  1F3F                     	;# 
   531  1F43                     	;# 
   532  1F44                     	;# 
   533  1F45                     	;# 
   534  1F46                     	;# 
   535  1F47                     	;# 
   536  1F48                     	;# 
   537  1F49                     	;# 
   538  1F4A                     	;# 
   539  1F4E                     	;# 
   540  1F4F                     	;# 
   541  1F50                     	;# 
   542  1F51                     	;# 
   543  1F52                     	;# 
   544  1F53                     	;# 
   545  1F54                     	;# 
   546  1F55                     	;# 
   547  1F65                     	;# 
   548  1F68                     	;# 
   549  1F69                     	;# 
   550  1F6A                     	;# 
   551  1F6B                     	;# 
   552  1FE4                     	;# 
   553  1FE5                     	;# 
   554  1FE6                     	;# 
   555  1FE7                     	;# 
   556  1FE8                     	;# 
   557  1FE8                     	;# 
   558  1FE9                     	;# 
   559  1FEA                     	;# 
   560  1FEB                     	;# 
   561  1FED                     	;# 
   562  1FEE                     	;# 
   563  1FEF                     	;# 
   564  0000                     	;# 
   565  0001                     	;# 
   566  0002                     	;# 
   567  0003                     	;# 
   568  0004                     	;# 
   569  0005                     	;# 
   570  0006                     	;# 
   571  0007                     	;# 
   572  0008                     	;# 
   573  0009                     	;# 
   574  000A                     	;# 
   575  000B                     	;# 
   576  000C                     	;# 
   577  000D                     	;# 
   578  000E                     	;# 
   579  0010                     	;# 
   580  0012                     	;# 
   581  0013                     	;# 
   582  0014                     	;# 
   583  0016                     	;# 
   584  0018                     	;# 
   585  0019                     	;# 
   586  001A                     	;# 
   587  009B                     	;# 
   588  009B                     	;# 
   589  009C                     	;# 
   590  009D                     	;# 
   591  009E                     	;# 
   592  009F                     	;# 
   593  0119                     	;# 
   594  0119                     	;# 
   595  0119                     	;# 
   596  011A                     	;# 
   597  011A                     	;# 
   598  011A                     	;# 
   599  011B                     	;# 
   600  011B                     	;# 
   601  011B                     	;# 
   602  011B                     	;# 
   603  011B                     	;# 
   604  011C                     	;# 
   605  011C                     	;# 
   606  011C                     	;# 
   607  011D                     	;# 
   608  011D                     	;# 
   609  011D                     	;# 
   610  011E                     	;# 
   611  011E                     	;# 
   612  011E                     	;# 
   613  011F                     	;# 
   614  011F                     	;# 
   615  011F                     	;# 
   616  011F                     	;# 
   617  011F                     	;# 
   618  018C                     	;# 
   619  018D                     	;# 
   620  018E                     	;# 
   621  018F                     	;# 
   622  0190                     	;# 
   623  0191                     	;# 
   624  0192                     	;# 
   625  0196                     	;# 
   626  0197                     	;# 
   627  0198                     	;# 
   628  0199                     	;# 
   629  019A                     	;# 
   630  019B                     	;# 
   631  019C                     	;# 
   632  020C                     	;# 
   633  020C                     	;# 
   634  020D                     	;# 
   635  020E                     	;# 
   636  020F                     	;# 
   637  020F                     	;# 
   638  0210                     	;# 
   639  0210                     	;# 
   640  0211                     	;# 
   641  0211                     	;# 
   642  028C                     	;# 
   643  028C                     	;# 
   644  028D                     	;# 
   645  028D                     	;# 
   646  028E                     	;# 
   647  028F                     	;# 
   648  0290                     	;# 
   649  0291                     	;# 
   650  030C                     	;# 
   651  030C                     	;# 
   652  030D                     	;# 
   653  030E                     	;# 
   654  030F                     	;# 
   655  0310                     	;# 
   656  0310                     	;# 
   657  0311                     	;# 
   658  0312                     	;# 
   659  0313                     	;# 
   660  0314                     	;# 
   661  0314                     	;# 
   662  0315                     	;# 
   663  0316                     	;# 
   664  0318                     	;# 
   665  0318                     	;# 
   666  0319                     	;# 
   667  031A                     	;# 
   668  031C                     	;# 
   669  031C                     	;# 
   670  031D                     	;# 
   671  031E                     	;# 
   672  038C                     	;# 
   673  038C                     	;# 
   674  038D                     	;# 
   675  038E                     	;# 
   676  058C                     	;# 
   677  058C                     	;# 
   678  058D                     	;# 
   679  058E                     	;# 
   680  058F                     	;# 
   681  058F                     	;# 
   682  0590                     	;# 
   683  0591                     	;# 
   684  0592                     	;# 
   685  0593                     	;# 
   686  059C                     	;# 
   687  059C                     	;# 
   688  059D                     	;# 
   689  059D                     	;# 
   690  059E                     	;# 
   691  059F                     	;# 
   692  060C                     	;# 
   693  060D                     	;# 
   694  060E                     	;# 
   695  060F                     	;# 
   696  0610                     	;# 
   697  0611                     	;# 
   698  0612                     	;# 
   699  0613                     	;# 
   700  0614                     	;# 
   701  070C                     	;# 
   702  070D                     	;# 
   703  070E                     	;# 
   704  070F                     	;# 
   705  0710                     	;# 
   706  0711                     	;# 
   707  0712                     	;# 
   708  0713                     	;# 
   709  0716                     	;# 
   710  0717                     	;# 
   711  0718                     	;# 
   712  0719                     	;# 
   713  071A                     	;# 
   714  071B                     	;# 
   715  071C                     	;# 
   716  071D                     	;# 
   717  0796                     	;# 
   718  0797                     	;# 
   719  0798                     	;# 
   720  0799                     	;# 
   721  079A                     	;# 
   722  079B                     	;# 
   723  080C                     	;# 
   724  080D                     	;# 
   725  080E                     	;# 
   726  080F                     	;# 
   727  0810                     	;# 
   728  0811                     	;# 
   729  0812                     	;# 
   730  0813                     	;# 
   731  0814                     	;# 
   732  081A                     	;# 
   733  081A                     	;# 
   734  081B                     	;# 
   735  081C                     	;# 
   736  081C                     	;# 
   737  081D                     	;# 
   738  081E                     	;# 
   739  081F                     	;# 
   740  088C                     	;# 
   741  088D                     	;# 
   742  088E                     	;# 
   743  088F                     	;# 
   744  0890                     	;# 
   745  0891                     	;# 
   746  0892                     	;# 
   747  0893                     	;# 
   748  0895                     	;# 
   749  0896                     	;# 
   750  090C                     	;# 
   751  090E                     	;# 
   752  090F                     	;# 
   753  091F                     	;# 
   754  098F                     	;# 
   755  098F                     	;# 
   756  0990                     	;# 
   757  0991                     	;# 
   758  0992                     	;# 
   759  0993                     	;# 
   760  0994                     	;# 
   761  0995                     	;# 
   762  0996                     	;# 
   763  0997                     	;# 
   764  0A19                     	;# 
   765  0A19                     	;# 
   766  0A1A                     	;# 
   767  0A1A                     	;# 
   768  0A1B                     	;# 
   769  0A1B                     	;# 
   770  0A1B                     	;# 
   771  0A1C                     	;# 
   772  0A1C                     	;# 
   773  0A1D                     	;# 
   774  0A1D                     	;# 
   775  0A1E                     	;# 
   776  0A1E                     	;# 
   777  0A1F                     	;# 
   778  0A1F                     	;# 
   779  0A1F                     	;# 
   780  1E0F                     	;# 
   781  1E10                     	;# 
   782  1E11                     	;# 
   783  1E12                     	;# 
   784  1E13                     	;# 
   785  1E14                     	;# 
   786  1E15                     	;# 
   787  1E16                     	;# 
   788  1E17                     	;# 
   789  1E18                     	;# 
   790  1E19                     	;# 
   791  1E1A                     	;# 
   792  1E1B                     	;# 
   793  1E1C                     	;# 
   794  1E1D                     	;# 
   795  1E1E                     	;# 
   796  1E1F                     	;# 
   797  1E20                     	;# 
   798  1E21                     	;# 
   799  1E22                     	;# 
   800  1E23                     	;# 
   801  1E24                     	;# 
   802  1E25                     	;# 
   803  1E26                     	;# 
   804  1E27                     	;# 
   805  1E28                     	;# 
   806  1E29                     	;# 
   807  1E2A                     	;# 
   808  1E2B                     	;# 
   809  1E2C                     	;# 
   810  1E2D                     	;# 
   811  1E2E                     	;# 
   812  1E2F                     	;# 
   813  1E30                     	;# 
   814  1E31                     	;# 
   815  1E32                     	;# 
   816  1E33                     	;# 
   817  1E34                     	;# 
   818  1E35                     	;# 
   819  1E36                     	;# 
   820  1E37                     	;# 
   821  1E8F                     	;# 
   822  1E90                     	;# 
   823  1E91                     	;# 
   824  1E92                     	;# 
   825  1E93                     	;# 
   826  1E9C                     	;# 
   827  1EA1                     	;# 
   828  1EA2                     	;# 
   829  1EB1                     	;# 
   830  1EBB                     	;# 
   831  1EBC                     	;# 
   832  1EBD                     	;# 
   833  1EBE                     	;# 
   834  1EC3                     	;# 
   835  1EC5                     	;# 
   836  1EC6                     	;# 
   837  1EC7                     	;# 
   838  1EC8                     	;# 
   839  1EC9                     	;# 
   840  1ECA                     	;# 
   841  1ECB                     	;# 
   842  1ECC                     	;# 
   843  1ECD                     	;# 
   844  1ECE                     	;# 
   845  1F10                     	;# 
   846  1F11                     	;# 
   847  1F12                     	;# 
   848  1F13                     	;# 
   849  1F14                     	;# 
   850  1F15                     	;# 
   851  1F16                     	;# 
   852  1F17                     	;# 
   853  1F18                     	;# 
   854  1F19                     	;# 
   855  1F1A                     	;# 
   856  1F1B                     	;# 
   857  1F1C                     	;# 
   858  1F1D                     	;# 
   859  1F1E                     	;# 
   860  1F1F                     	;# 
   861  1F20                     	;# 
   862  1F21                     	;# 
   863  1F22                     	;# 
   864  1F23                     	;# 
   865  1F24                     	;# 
   866  1F25                     	;# 
   867  1F26                     	;# 
   868  1F27                     	;# 
   869  1F38                     	;# 
   870  1F39                     	;# 
   871  1F3A                     	;# 
   872  1F3B                     	;# 
   873  1F3C                     	;# 
   874  1F3D                     	;# 
   875  1F3E                     	;# 
   876  1F3F                     	;# 
   877  1F43                     	;# 
   878  1F44                     	;# 
   879  1F45                     	;# 
   880  1F46                     	;# 
   881  1F47                     	;# 
   882  1F48                     	;# 
   883  1F49                     	;# 
   884  1F4A                     	;# 
   885  1F4E                     	;# 
   886  1F4F                     	;# 
   887  1F50                     	;# 
   888  1F51                     	;# 
   889  1F52                     	;# 
   890  1F53                     	;# 
   891  1F54                     	;# 
   892  1F55                     	;# 
   893  1F65                     	;# 
   894  1F68                     	;# 
   895  1F69                     	;# 
   896  1F6A                     	;# 
   897  1F6B                     	;# 
   898  1FE4                     	;# 
   899  1FE5                     	;# 
   900  1FE6                     	;# 
   901  1FE7                     	;# 
   902  1FE8                     	;# 
   903  1FE8                     	;# 
   904  1FE9                     	;# 
   905  1FEA                     	;# 
   906  1FEB                     	;# 
   907  1FED                     	;# 
   908  1FEE                     	;# 
   909  1FEF                     	;# 
   910  0000                     	;# 
   911  0001                     	;# 
   912  0002                     	;# 
   913  0003                     	;# 
   914  0004                     	;# 
   915  0005                     	;# 
   916  0006                     	;# 
   917  0007                     	;# 
   918  0008                     	;# 
   919  0009                     	;# 
   920  000A                     	;# 
   921  000B                     	;# 
   922  000C                     	;# 
   923  000D                     	;# 
   924  000E                     	;# 
   925  0010                     	;# 
   926  0012                     	;# 
   927  0013                     	;# 
   928  0014                     	;# 
   929  0016                     	;# 
   930  0018                     	;# 
   931  0019                     	;# 
   932  001A                     	;# 
   933  009B                     	;# 
   934  009B                     	;# 
   935  009C                     	;# 
   936  009D                     	;# 
   937  009E                     	;# 
   938  009F                     	;# 
   939  0119                     	;# 
   940  0119                     	;# 
   941  0119                     	;# 
   942  011A                     	;# 
   943  011A                     	;# 
   944  011A                     	;# 
   945  011B                     	;# 
   946  011B                     	;# 
   947  011B                     	;# 
   948  011B                     	;# 
   949  011B                     	;# 
   950  011C                     	;# 
   951  011C                     	;# 
   952  011C                     	;# 
   953  011D                     	;# 
   954  011D                     	;# 
   955  011D                     	;# 
   956  011E                     	;# 
   957  011E                     	;# 
   958  011E                     	;# 
   959  011F                     	;# 
   960  011F                     	;# 
   961  011F                     	;# 
   962  011F                     	;# 
   963  011F                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  018F                     	;# 
   968  0190                     	;# 
   969  0191                     	;# 
   970  0192                     	;# 
   971  0196                     	;# 
   972  0197                     	;# 
   973  0198                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019C                     	;# 
   978  020C                     	;# 
   979  020C                     	;# 
   980  020D                     	;# 
   981  020E                     	;# 
   982  020F                     	;# 
   983  020F                     	;# 
   984  0210                     	;# 
   985  0210                     	;# 
   986  0211                     	;# 
   987  0211                     	;# 
   988  028C                     	;# 
   989  028C                     	;# 
   990  028D                     	;# 
   991  028D                     	;# 
   992  028E                     	;# 
   993  028F                     	;# 
   994  0290                     	;# 
   995  0291                     	;# 
   996  030C                     	;# 
   997  030C                     	;# 
   998  030D                     	;# 
   999  030E                     	;# 
  1000  030F                     	;# 
  1001  0310                     	;# 
  1002  0310                     	;# 
  1003  0311                     	;# 
  1004  0312                     	;# 
  1005  0313                     	;# 
  1006  0314                     	;# 
  1007  0314                     	;# 
  1008  0315                     	;# 
  1009  0316                     	;# 
  1010  0318                     	;# 
  1011  0318                     	;# 
  1012  0319                     	;# 
  1013  031A                     	;# 
  1014  031C                     	;# 
  1015  031C                     	;# 
  1016  031D                     	;# 
  1017  031E                     	;# 
  1018  038C                     	;# 
  1019  038C                     	;# 
  1020  038D                     	;# 
  1021  038E                     	;# 
  1022  058C                     	;# 
  1023  058C                     	;# 
  1024  058D                     	;# 
  1025  058E                     	;# 
  1026  058F                     	;# 
  1027  058F                     	;# 
  1028  0590                     	;# 
  1029  0591                     	;# 
  1030  0592                     	;# 
  1031  0593                     	;# 
  1032  059C                     	;# 
  1033  059C                     	;# 
  1034  059D                     	;# 
  1035  059D                     	;# 
  1036  059E                     	;# 
  1037  059F                     	;# 
  1038  060C                     	;# 
  1039  060D                     	;# 
  1040  060E                     	;# 
  1041  060F                     	;# 
  1042  0610                     	;# 
  1043  0611                     	;# 
  1044  0612                     	;# 
  1045  0613                     	;# 
  1046  0614                     	;# 
  1047  070C                     	;# 
  1048  070D                     	;# 
  1049  070E                     	;# 
  1050  070F                     	;# 
  1051  0710                     	;# 
  1052  0711                     	;# 
  1053  0712                     	;# 
  1054  0713                     	;# 
  1055  0716                     	;# 
  1056  0717                     	;# 
  1057  0718                     	;# 
  1058  0719                     	;# 
  1059  071A                     	;# 
  1060  071B                     	;# 
  1061  071C                     	;# 
  1062  071D                     	;# 
  1063  0796                     	;# 
  1064  0797                     	;# 
  1065  0798                     	;# 
  1066  0799                     	;# 
  1067  079A                     	;# 
  1068  079B                     	;# 
  1069  080C                     	;# 
  1070  080D                     	;# 
  1071  080E                     	;# 
  1072  080F                     	;# 
  1073  0810                     	;# 
  1074  0811                     	;# 
  1075  0812                     	;# 
  1076  0813                     	;# 
  1077  0814                     	;# 
  1078  081A                     	;# 
  1079  081A                     	;# 
  1080  081B                     	;# 
  1081  081C                     	;# 
  1082  081C                     	;# 
  1083  081D                     	;# 
  1084  081E                     	;# 
  1085  081F                     	;# 
  1086  088C                     	;# 
  1087  088D                     	;# 
  1088  088E                     	;# 
  1089  088F                     	;# 
  1090  0890                     	;# 
  1091  0891                     	;# 
  1092  0892                     	;# 
  1093  0893                     	;# 
  1094  0895                     	;# 
  1095  0896                     	;# 
  1096  090C                     	;# 
  1097  090E                     	;# 
  1098  090F                     	;# 
  1099  091F                     	;# 
  1100  098F                     	;# 
  1101  098F                     	;# 
  1102  0990                     	;# 
  1103  0991                     	;# 
  1104  0992                     	;# 
  1105  0993                     	;# 
  1106  0994                     	;# 
  1107  0995                     	;# 
  1108  0996                     	;# 
  1109  0997                     	;# 
  1110  0A19                     	;# 
  1111  0A19                     	;# 
  1112  0A1A                     	;# 
  1113  0A1A                     	;# 
  1114  0A1B                     	;# 
  1115  0A1B                     	;# 
  1116  0A1B                     	;# 
  1117  0A1C                     	;# 
  1118  0A1C                     	;# 
  1119  0A1D                     	;# 
  1120  0A1D                     	;# 
  1121  0A1E                     	;# 
  1122  0A1E                     	;# 
  1123  0A1F                     	;# 
  1124  0A1F                     	;# 
  1125  0A1F                     	;# 
  1126  1E0F                     	;# 
  1127  1E10                     	;# 
  1128  1E11                     	;# 
  1129  1E12                     	;# 
  1130  1E13                     	;# 
  1131  1E14                     	;# 
  1132  1E15                     	;# 
  1133  1E16                     	;# 
  1134  1E17                     	;# 
  1135  1E18                     	;# 
  1136  1E19                     	;# 
  1137  1E1A                     	;# 
  1138  1E1B                     	;# 
  1139  1E1C                     	;# 
  1140  1E1D                     	;# 
  1141  1E1E                     	;# 
  1142  1E1F                     	;# 
  1143  1E20                     	;# 
  1144  1E21                     	;# 
  1145  1E22                     	;# 
  1146  1E23                     	;# 
  1147  1E24                     	;# 
  1148  1E25                     	;# 
  1149  1E26                     	;# 
  1150  1E27                     	;# 
  1151  1E28                     	;# 
  1152  1E29                     	;# 
  1153  1E2A                     	;# 
  1154  1E2B                     	;# 
  1155  1E2C                     	;# 
  1156  1E2D                     	;# 
  1157  1E2E                     	;# 
  1158  1E2F                     	;# 
  1159  1E30                     	;# 
  1160  1E31                     	;# 
  1161  1E32                     	;# 
  1162  1E33                     	;# 
  1163  1E34                     	;# 
  1164  1E35                     	;# 
  1165  1E36                     	;# 
  1166  1E37                     	;# 
  1167  1E8F                     	;# 
  1168  1E90                     	;# 
  1169  1E91                     	;# 
  1170  1E92                     	;# 
  1171  1E93                     	;# 
  1172  1E9C                     	;# 
  1173  1EA1                     	;# 
  1174  1EA2                     	;# 
  1175  1EB1                     	;# 
  1176  1EBB                     	;# 
  1177  1EBC                     	;# 
  1178  1EBD                     	;# 
  1179  1EBE                     	;# 
  1180  1EC3                     	;# 
  1181  1EC5                     	;# 
  1182  1EC6                     	;# 
  1183  1EC7                     	;# 
  1184  1EC8                     	;# 
  1185  1EC9                     	;# 
  1186  1ECA                     	;# 
  1187  1ECB                     	;# 
  1188  1ECC                     	;# 
  1189  1ECD                     	;# 
  1190  1ECE                     	;# 
  1191  1F10                     	;# 
  1192  1F11                     	;# 
  1193  1F12                     	;# 
  1194  1F13                     	;# 
  1195  1F14                     	;# 
  1196  1F15                     	;# 
  1197  1F16                     	;# 
  1198  1F17                     	;# 
  1199  1F18                     	;# 
  1200  1F19                     	;# 
  1201  1F1A                     	;# 
  1202  1F1B                     	;# 
  1203  1F1C                     	;# 
  1204  1F1D                     	;# 
  1205  1F1E                     	;# 
  1206  1F1F                     	;# 
  1207  1F20                     	;# 
  1208  1F21                     	;# 
  1209  1F22                     	;# 
  1210  1F23                     	;# 
  1211  1F24                     	;# 
  1212  1F25                     	;# 
  1213  1F26                     	;# 
  1214  1F27                     	;# 
  1215  1F38                     	;# 
  1216  1F39                     	;# 
  1217  1F3A                     	;# 
  1218  1F3B                     	;# 
  1219  1F3C                     	;# 
  1220  1F3D                     	;# 
  1221  1F3E                     	;# 
  1222  1F3F                     	;# 
  1223  1F43                     	;# 
  1224  1F44                     	;# 
  1225  1F45                     	;# 
  1226  1F46                     	;# 
  1227  1F47                     	;# 
  1228  1F48                     	;# 
  1229  1F49                     	;# 
  1230  1F4A                     	;# 
  1231  1F4E                     	;# 
  1232  1F4F                     	;# 
  1233  1F50                     	;# 
  1234  1F51                     	;# 
  1235  1F52                     	;# 
  1236  1F53                     	;# 
  1237  1F54                     	;# 
  1238  1F55                     	;# 
  1239  1F65                     	;# 
  1240  1F68                     	;# 
  1241  1F69                     	;# 
  1242  1F6A                     	;# 
  1243  1F6B                     	;# 
  1244  1FE4                     	;# 
  1245  1FE5                     	;# 
  1246  1FE6                     	;# 
  1247  1FE7                     	;# 
  1248  1FE8                     	;# 
  1249  1FE8                     	;# 
  1250  1FE9                     	;# 
  1251  1FEA                     	;# 
  1252  1FEB                     	;# 
  1253  1FED                     	;# 
  1254  1FEE                     	;# 
  1255  1FEF                     	;# 
  1256  0000                     	;# 
  1257  0001                     	;# 
  1258  0002                     	;# 
  1259  0003                     	;# 
  1260  0004                     	;# 
  1261  0005                     	;# 
  1262  0006                     	;# 
  1263  0007                     	;# 
  1264  0008                     	;# 
  1265  0009                     	;# 
  1266  000A                     	;# 
  1267  000B                     	;# 
  1268  000C                     	;# 
  1269  000D                     	;# 
  1270  000E                     	;# 
  1271  0010                     	;# 
  1272  0012                     	;# 
  1273  0013                     	;# 
  1274  0014                     	;# 
  1275  0016                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  009B                     	;# 
  1280  009B                     	;# 
  1281  009C                     	;# 
  1282  009D                     	;# 
  1283  009E                     	;# 
  1284  009F                     	;# 
  1285  0119                     	;# 
  1286  0119                     	;# 
  1287  0119                     	;# 
  1288  011A                     	;# 
  1289  011A                     	;# 
  1290  011A                     	;# 
  1291  011B                     	;# 
  1292  011B                     	;# 
  1293  011B                     	;# 
  1294  011B                     	;# 
  1295  011B                     	;# 
  1296  011C                     	;# 
  1297  011C                     	;# 
  1298  011C                     	;# 
  1299  011D                     	;# 
  1300  011D                     	;# 
  1301  011D                     	;# 
  1302  011E                     	;# 
  1303  011E                     	;# 
  1304  011E                     	;# 
  1305  011F                     	;# 
  1306  011F                     	;# 
  1307  011F                     	;# 
  1308  011F                     	;# 
  1309  011F                     	;# 
  1310  018C                     	;# 
  1311  018D                     	;# 
  1312  018E                     	;# 
  1313  018F                     	;# 
  1314  0190                     	;# 
  1315  0191                     	;# 
  1316  0192                     	;# 
  1317  0196                     	;# 
  1318  0197                     	;# 
  1319  0198                     	;# 
  1320  0199                     	;# 
  1321  019A                     	;# 
  1322  019B                     	;# 
  1323  019C                     	;# 
  1324  020C                     	;# 
  1325  020C                     	;# 
  1326  020D                     	;# 
  1327  020E                     	;# 
  1328  020F                     	;# 
  1329  020F                     	;# 
  1330  0210                     	;# 
  1331  0210                     	;# 
  1332  0211                     	;# 
  1333  0211                     	;# 
  1334  028C                     	;# 
  1335  028C                     	;# 
  1336  028D                     	;# 
  1337  028D                     	;# 
  1338  028E                     	;# 
  1339  028F                     	;# 
  1340  0290                     	;# 
  1341  0291                     	;# 
  1342  030C                     	;# 
  1343  030C                     	;# 
  1344  030D                     	;# 
  1345  030E                     	;# 
  1346  030F                     	;# 
  1347  0310                     	;# 
  1348  0310                     	;# 
  1349  0311                     	;# 
  1350  0312                     	;# 
  1351  0313                     	;# 
  1352  0314                     	;# 
  1353  0314                     	;# 
  1354  0315                     	;# 
  1355  0316                     	;# 
  1356  0318                     	;# 
  1357  0318                     	;# 
  1358  0319                     	;# 
  1359  031A                     	;# 
  1360  031C                     	;# 
  1361  031C                     	;# 
  1362  031D                     	;# 
  1363  031E                     	;# 
  1364  038C                     	;# 
  1365  038C                     	;# 
  1366  038D                     	;# 
  1367  038E                     	;# 
  1368  058C                     	;# 
  1369  058C                     	;# 
  1370  058D                     	;# 
  1371  058E                     	;# 
  1372  058F                     	;# 
  1373  058F                     	;# 
  1374  0590                     	;# 
  1375  0591                     	;# 
  1376  0592                     	;# 
  1377  0593                     	;# 
  1378  059C                     	;# 
  1379  059C                     	;# 
  1380  059D                     	;# 
  1381  059D                     	;# 
  1382  059E                     	;# 
  1383  059F                     	;# 
  1384  060C                     	;# 
  1385  060D                     	;# 
  1386  060E                     	;# 
  1387  060F                     	;# 
  1388  0610                     	;# 
  1389  0611                     	;# 
  1390  0612                     	;# 
  1391  0613                     	;# 
  1392  0614                     	;# 
  1393  070C                     	;# 
  1394  070D                     	;# 
  1395  070E                     	;# 
  1396  070F                     	;# 
  1397  0710                     	;# 
  1398  0711                     	;# 
  1399  0712                     	;# 
  1400  0713                     	;# 
  1401  0716                     	;# 
  1402  0717                     	;# 
  1403  0718                     	;# 
  1404  0719                     	;# 
  1405  071A                     	;# 
  1406  071B                     	;# 
  1407  071C                     	;# 
  1408  071D                     	;# 
  1409  0796                     	;# 
  1410  0797                     	;# 
  1411  0798                     	;# 
  1412  0799                     	;# 
  1413  079A                     	;# 
  1414  079B                     	;# 
  1415  080C                     	;# 
  1416  080D                     	;# 
  1417  080E                     	;# 
  1418  080F                     	;# 
  1419  0810                     	;# 
  1420  0811                     	;# 
  1421  0812                     	;# 
  1422  0813                     	;# 
  1423  0814                     	;# 
  1424  081A                     	;# 
  1425  081A                     	;# 
  1426  081B                     	;# 
  1427  081C                     	;# 
  1428  081C                     	;# 
  1429  081D                     	;# 
  1430  081E                     	;# 
  1431  081F                     	;# 
  1432  088C                     	;# 
  1433  088D                     	;# 
  1434  088E                     	;# 
  1435  088F                     	;# 
  1436  0890                     	;# 
  1437  0891                     	;# 
  1438  0892                     	;# 
  1439  0893                     	;# 
  1440  0895                     	;# 
  1441  0896                     	;# 
  1442  090C                     	;# 
  1443  090E                     	;# 
  1444  090F                     	;# 
  1445  091F                     	;# 
  1446  098F                     	;# 
  1447  098F                     	;# 
  1448  0990                     	;# 
  1449  0991                     	;# 
  1450  0992                     	;# 
  1451  0993                     	;# 
  1452  0994                     	;# 
  1453  0995                     	;# 
  1454  0996                     	;# 
  1455  0997                     	;# 
  1456  0A19                     	;# 
  1457  0A19                     	;# 
  1458  0A1A                     	;# 
  1459  0A1A                     	;# 
  1460  0A1B                     	;# 
  1461  0A1B                     	;# 
  1462  0A1B                     	;# 
  1463  0A1C                     	;# 
  1464  0A1C                     	;# 
  1465  0A1D                     	;# 
  1466  0A1D                     	;# 
  1467  0A1E                     	;# 
  1468  0A1E                     	;# 
  1469  0A1F                     	;# 
  1470  0A1F                     	;# 
  1471  0A1F                     	;# 
  1472  1E0F                     	;# 
  1473  1E10                     	;# 
  1474  1E11                     	;# 
  1475  1E12                     	;# 
  1476  1E13                     	;# 
  1477  1E14                     	;# 
  1478  1E15                     	;# 
  1479  1E16                     	;# 
  1480  1E17                     	;# 
  1481  1E18                     	;# 
  1482  1E19                     	;# 
  1483  1E1A                     	;# 
  1484  1E1B                     	;# 
  1485  1E1C                     	;# 
  1486  1E1D                     	;# 
  1487  1E1E                     	;# 
  1488  1E1F                     	;# 
  1489  1E20                     	;# 
  1490  1E21                     	;# 
  1491  1E22                     	;# 
  1492  1E23                     	;# 
  1493  1E24                     	;# 
  1494  1E25                     	;# 
  1495  1E26                     	;# 
  1496  1E27                     	;# 
  1497  1E28                     	;# 
  1498  1E29                     	;# 
  1499  1E2A                     	;# 
  1500  1E2B                     	;# 
  1501  1E2C                     	;# 
  1502  1E2D                     	;# 
  1503  1E2E                     	;# 
  1504  1E2F                     	;# 
  1505  1E30                     	;# 
  1506  1E31                     	;# 
  1507  1E32                     	;# 
  1508  1E33                     	;# 
  1509  1E34                     	;# 
  1510  1E35                     	;# 
  1511  1E36                     	;# 
  1512  1E37                     	;# 
  1513  1E8F                     	;# 
  1514  1E90                     	;# 
  1515  1E91                     	;# 
  1516  1E92                     	;# 
  1517  1E93                     	;# 
  1518  1E9C                     	;# 
  1519  1EA1                     	;# 
  1520  1EA2                     	;# 
  1521  1EB1                     	;# 
  1522  1EBB                     	;# 
  1523  1EBC                     	;# 
  1524  1EBD                     	;# 
  1525  1EBE                     	;# 
  1526  1EC3                     	;# 
  1527  1EC5                     	;# 
  1528  1EC6                     	;# 
  1529  1EC7                     	;# 
  1530  1EC8                     	;# 
  1531  1EC9                     	;# 
  1532  1ECA                     	;# 
  1533  1ECB                     	;# 
  1534  1ECC                     	;# 
  1535  1ECD                     	;# 
  1536  1ECE                     	;# 
  1537  1F10                     	;# 
  1538  1F11                     	;# 
  1539  1F12                     	;# 
  1540  1F13                     	;# 
  1541  1F14                     	;# 
  1542  1F15                     	;# 
  1543  1F16                     	;# 
  1544  1F17                     	;# 
  1545  1F18                     	;# 
  1546  1F19                     	;# 
  1547  1F1A                     	;# 
  1548  1F1B                     	;# 
  1549  1F1C                     	;# 
  1550  1F1D                     	;# 
  1551  1F1E                     	;# 
  1552  1F1F                     	;# 
  1553  1F20                     	;# 
  1554  1F21                     	;# 
  1555  1F22                     	;# 
  1556  1F23                     	;# 
  1557  1F24                     	;# 
  1558  1F25                     	;# 
  1559  1F26                     	;# 
  1560  1F27                     	;# 
  1561  1F38                     	;# 
  1562  1F39                     	;# 
  1563  1F3A                     	;# 
  1564  1F3B                     	;# 
  1565  1F3C                     	;# 
  1566  1F3D                     	;# 
  1567  1F3E                     	;# 
  1568  1F3F                     	;# 
  1569  1F43                     	;# 
  1570  1F44                     	;# 
  1571  1F45                     	;# 
  1572  1F46                     	;# 
  1573  1F47                     	;# 
  1574  1F48                     	;# 
  1575  1F49                     	;# 
  1576  1F4A                     	;# 
  1577  1F4E                     	;# 
  1578  1F4F                     	;# 
  1579  1F50                     	;# 
  1580  1F51                     	;# 
  1581  1F52                     	;# 
  1582  1F53                     	;# 
  1583  1F54                     	;# 
  1584  1F55                     	;# 
  1585  1F65                     	;# 
  1586  1F68                     	;# 
  1587  1F69                     	;# 
  1588  1F6A                     	;# 
  1589  1F6B                     	;# 
  1590  1FE4                     	;# 
  1591  1FE5                     	;# 
  1592  1FE6                     	;# 
  1593  1FE7                     	;# 
  1594  1FE8                     	;# 
  1595  1FE8                     	;# 
  1596  1FE9                     	;# 
  1597  1FEA                     	;# 
  1598  1FEB                     	;# 
  1599  1FED                     	;# 
  1600  1FEE                     	;# 
  1601  1FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0012                     	;# 
  1619  0013                     	;# 
  1620  0014                     	;# 
  1621  0016                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  009B                     	;# 
  1626  009B                     	;# 
  1627  009C                     	;# 
  1628  009D                     	;# 
  1629  009E                     	;# 
  1630  009F                     	;# 
  1631  0119                     	;# 
  1632  0119                     	;# 
  1633  0119                     	;# 
  1634  011A                     	;# 
  1635  011A                     	;# 
  1636  011A                     	;# 
  1637  011B                     	;# 
  1638  011B                     	;# 
  1639  011B                     	;# 
  1640  011B                     	;# 
  1641  011B                     	;# 
  1642  011C                     	;# 
  1643  011C                     	;# 
  1644  011C                     	;# 
  1645  011D                     	;# 
  1646  011D                     	;# 
  1647  011D                     	;# 
  1648  011E                     	;# 
  1649  011E                     	;# 
  1650  011E                     	;# 
  1651  011F                     	;# 
  1652  011F                     	;# 
  1653  011F                     	;# 
  1654  011F                     	;# 
  1655  011F                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  018F                     	;# 
  1660  0190                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0196                     	;# 
  1664  0197                     	;# 
  1665  0198                     	;# 
  1666  0199                     	;# 
  1667  019A                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  020C                     	;# 
  1671  020C                     	;# 
  1672  020D                     	;# 
  1673  020E                     	;# 
  1674  020F                     	;# 
  1675  020F                     	;# 
  1676  0210                     	;# 
  1677  0210                     	;# 
  1678  0211                     	;# 
  1679  0211                     	;# 
  1680  028C                     	;# 
  1681  028C                     	;# 
  1682  028D                     	;# 
  1683  028D                     	;# 
  1684  028E                     	;# 
  1685  028F                     	;# 
  1686  0290                     	;# 
  1687  0291                     	;# 
  1688  030C                     	;# 
  1689  030C                     	;# 
  1690  030D                     	;# 
  1691  030E                     	;# 
  1692  030F                     	;# 
  1693  0310                     	;# 
  1694  0310                     	;# 
  1695  0311                     	;# 
  1696  0312                     	;# 
  1697  0313                     	;# 
  1698  0314                     	;# 
  1699  0314                     	;# 
  1700  0315                     	;# 
  1701  0316                     	;# 
  1702  0318                     	;# 
  1703  0318                     	;# 
  1704  0319                     	;# 
  1705  031A                     	;# 
  1706  031C                     	;# 
  1707  031C                     	;# 
  1708  031D                     	;# 
  1709  031E                     	;# 
  1710  038C                     	;# 
  1711  038C                     	;# 
  1712  038D                     	;# 
  1713  038E                     	;# 
  1714  058C                     	;# 
  1715  058C                     	;# 
  1716  058D                     	;# 
  1717  058E                     	;# 
  1718  058F                     	;# 
  1719  058F                     	;# 
  1720  0590                     	;# 
  1721  0591                     	;# 
  1722  0592                     	;# 
  1723  0593                     	;# 
  1724  059C                     	;# 
  1725  059C                     	;# 
  1726  059D                     	;# 
  1727  059D                     	;# 
  1728  059E                     	;# 
  1729  059F                     	;# 
  1730  060C                     	;# 
  1731  060D                     	;# 
  1732  060E                     	;# 
  1733  060F                     	;# 
  1734  0610                     	;# 
  1735  0611                     	;# 
  1736  0612                     	;# 
  1737  0613                     	;# 
  1738  0614                     	;# 
  1739  070C                     	;# 
  1740  070D                     	;# 
  1741  070E                     	;# 
  1742  070F                     	;# 
  1743  0710                     	;# 
  1744  0711                     	;# 
  1745  0712                     	;# 
  1746  0713                     	;# 
  1747  0716                     	;# 
  1748  0717                     	;# 
  1749  0718                     	;# 
  1750  0719                     	;# 
  1751  071A                     	;# 
  1752  071B                     	;# 
  1753  071C                     	;# 
  1754  071D                     	;# 
  1755  0796                     	;# 
  1756  0797                     	;# 
  1757  0798                     	;# 
  1758  0799                     	;# 
  1759  079A                     	;# 
  1760  079B                     	;# 
  1761  080C                     	;# 
  1762  080D                     	;# 
  1763  080E                     	;# 
  1764  080F                     	;# 
  1765  0810                     	;# 
  1766  0811                     	;# 
  1767  0812                     	;# 
  1768  0813                     	;# 
  1769  0814                     	;# 
  1770  081A                     	;# 
  1771  081A                     	;# 
  1772  081B                     	;# 
  1773  081C                     	;# 
  1774  081C                     	;# 
  1775  081D                     	;# 
  1776  081E                     	;# 
  1777  081F                     	;# 
  1778  088C                     	;# 
  1779  088D                     	;# 
  1780  088E                     	;# 
  1781  088F                     	;# 
  1782  0890                     	;# 
  1783  0891                     	;# 
  1784  0892                     	;# 
  1785  0893                     	;# 
  1786  0895                     	;# 
  1787  0896                     	;# 
  1788  090C                     	;# 
  1789  090E                     	;# 
  1790  090F                     	;# 
  1791  091F                     	;# 
  1792  098F                     	;# 
  1793  098F                     	;# 
  1794  0990                     	;# 
  1795  0991                     	;# 
  1796  0992                     	;# 
  1797  0993                     	;# 
  1798  0994                     	;# 
  1799  0995                     	;# 
  1800  0996                     	;# 
  1801  0997                     	;# 
  1802  0A19                     	;# 
  1803  0A19                     	;# 
  1804  0A1A                     	;# 
  1805  0A1A                     	;# 
  1806  0A1B                     	;# 
  1807  0A1B                     	;# 
  1808  0A1B                     	;# 
  1809  0A1C                     	;# 
  1810  0A1C                     	;# 
  1811  0A1D                     	;# 
  1812  0A1D                     	;# 
  1813  0A1E                     	;# 
  1814  0A1E                     	;# 
  1815  0A1F                     	;# 
  1816  0A1F                     	;# 
  1817  0A1F                     	;# 
  1818  1E0F                     	;# 
  1819  1E10                     	;# 
  1820  1E11                     	;# 
  1821  1E12                     	;# 
  1822  1E13                     	;# 
  1823  1E14                     	;# 
  1824  1E15                     	;# 
  1825  1E16                     	;# 
  1826  1E17                     	;# 
  1827  1E18                     	;# 
  1828  1E19                     	;# 
  1829  1E1A                     	;# 
  1830  1E1B                     	;# 
  1831  1E1C                     	;# 
  1832  1E1D                     	;# 
  1833  1E1E                     	;# 
  1834  1E1F                     	;# 
  1835  1E20                     	;# 
  1836  1E21                     	;# 
  1837  1E22                     	;# 
  1838  1E23                     	;# 
  1839  1E24                     	;# 
  1840  1E25                     	;# 
  1841  1E26                     	;# 
  1842  1E27                     	;# 
  1843  1E28                     	;# 
  1844  1E29                     	;# 
  1845  1E2A                     	;# 
  1846  1E2B                     	;# 
  1847  1E2C                     	;# 
  1848  1E2D                     	;# 
  1849  1E2E                     	;# 
  1850  1E2F                     	;# 
  1851  1E30                     	;# 
  1852  1E31                     	;# 
  1853  1E32                     	;# 
  1854  1E33                     	;# 
  1855  1E34                     	;# 
  1856  1E35                     	;# 
  1857  1E36                     	;# 
  1858  1E37                     	;# 
  1859  1E8F                     	;# 
  1860  1E90                     	;# 
  1861  1E91                     	;# 
  1862  1E92                     	;# 
  1863  1E93                     	;# 
  1864  1E9C                     	;# 
  1865  1EA1                     	;# 
  1866  1EA2                     	;# 
  1867  1EB1                     	;# 
  1868  1EBB                     	;# 
  1869  1EBC                     	;# 
  1870  1EBD                     	;# 
  1871  1EBE                     	;# 
  1872  1EC3                     	;# 
  1873  1EC5                     	;# 
  1874  1EC6                     	;# 
  1875  1EC7                     	;# 
  1876  1EC8                     	;# 
  1877  1EC9                     	;# 
  1878  1ECA                     	;# 
  1879  1ECB                     	;# 
  1880  1ECC                     	;# 
  1881  1ECD                     	;# 
  1882  1ECE                     	;# 
  1883  1F10                     	;# 
  1884  1F11                     	;# 
  1885  1F12                     	;# 
  1886  1F13                     	;# 
  1887  1F14                     	;# 
  1888  1F15                     	;# 
  1889  1F16                     	;# 
  1890  1F17                     	;# 
  1891  1F18                     	;# 
  1892  1F19                     	;# 
  1893  1F1A                     	;# 
  1894  1F1B                     	;# 
  1895  1F1C                     	;# 
  1896  1F1D                     	;# 
  1897  1F1E                     	;# 
  1898  1F1F                     	;# 
  1899  1F20                     	;# 
  1900  1F21                     	;# 
  1901  1F22                     	;# 
  1902  1F23                     	;# 
  1903  1F24                     	;# 
  1904  1F25                     	;# 
  1905  1F26                     	;# 
  1906  1F27                     	;# 
  1907  1F38                     	;# 
  1908  1F39                     	;# 
  1909  1F3A                     	;# 
  1910  1F3B                     	;# 
  1911  1F3C                     	;# 
  1912  1F3D                     	;# 
  1913  1F3E                     	;# 
  1914  1F3F                     	;# 
  1915  1F43                     	;# 
  1916  1F44                     	;# 
  1917  1F45                     	;# 
  1918  1F46                     	;# 
  1919  1F47                     	;# 
  1920  1F48                     	;# 
  1921  1F49                     	;# 
  1922  1F4A                     	;# 
  1923  1F4E                     	;# 
  1924  1F4F                     	;# 
  1925  1F50                     	;# 
  1926  1F51                     	;# 
  1927  1F52                     	;# 
  1928  1F53                     	;# 
  1929  1F54                     	;# 
  1930  1F55                     	;# 
  1931  1F65                     	;# 
  1932  1F68                     	;# 
  1933  1F69                     	;# 
  1934  1F6A                     	;# 
  1935  1F6B                     	;# 
  1936  1FE4                     	;# 
  1937  1FE5                     	;# 
  1938  1FE6                     	;# 
  1939  1FE7                     	;# 
  1940  1FE8                     	;# 
  1941  1FE8                     	;# 
  1942  1FE9                     	;# 
  1943  1FEA                     	;# 
  1944  1FEB                     	;# 
  1945  1FED                     	;# 
  1946  1FEE                     	;# 
  1947  1FEF                     	;# 
  1948  0000                     	;# 
  1949  0001                     	;# 
  1950  0002                     	;# 
  1951  0003                     	;# 
  1952  0004                     	;# 
  1953  0005                     	;# 
  1954  0006                     	;# 
  1955  0007                     	;# 
  1956  0008                     	;# 
  1957  0009                     	;# 
  1958  000A                     	;# 
  1959  000B                     	;# 
  1960  000C                     	;# 
  1961  000D                     	;# 
  1962  000E                     	;# 
  1963  0010                     	;# 
  1964  0012                     	;# 
  1965  0013                     	;# 
  1966  0014                     	;# 
  1967  0016                     	;# 
  1968  0018                     	;# 
  1969  0019                     	;# 
  1970  001A                     	;# 
  1971  009B                     	;# 
  1972  009B                     	;# 
  1973  009C                     	;# 
  1974  009D                     	;# 
  1975  009E                     	;# 
  1976  009F                     	;# 
  1977  0119                     	;# 
  1978  0119                     	;# 
  1979  0119                     	;# 
  1980  011A                     	;# 
  1981  011A                     	;# 
  1982  011A                     	;# 
  1983  011B                     	;# 
  1984  011B                     	;# 
  1985  011B                     	;# 
  1986  011B                     	;# 
  1987  011B                     	;# 
  1988  011C                     	;# 
  1989  011C                     	;# 
  1990  011C                     	;# 
  1991  011D                     	;# 
  1992  011D                     	;# 
  1993  011D                     	;# 
  1994  011E                     	;# 
  1995  011E                     	;# 
  1996  011E                     	;# 
  1997  011F                     	;# 
  1998  011F                     	;# 
  1999  011F                     	;# 
  2000  011F                     	;# 
  2001  011F                     	;# 
  2002  018C                     	;# 
  2003  018D                     	;# 
  2004  018E                     	;# 
  2005  018F                     	;# 
  2006  0190                     	;# 
  2007  0191                     	;# 
  2008  0192                     	;# 
  2009  0196                     	;# 
  2010  0197                     	;# 
  2011  0198                     	;# 
  2012  0199                     	;# 
  2013  019A                     	;# 
  2014  019B                     	;# 
  2015  019C                     	;# 
  2016  020C                     	;# 
  2017  020C                     	;# 
  2018  020D                     	;# 
  2019  020E                     	;# 
  2020  020F                     	;# 
  2021  020F                     	;# 
  2022  0210                     	;# 
  2023  0210                     	;# 
  2024  0211                     	;# 
  2025  0211                     	;# 
  2026  028C                     	;# 
  2027  028C                     	;# 
  2028  028D                     	;# 
  2029  028D                     	;# 
  2030  028E                     	;# 
  2031  028F                     	;# 
  2032  0290                     	;# 
  2033  0291                     	;# 
  2034  030C                     	;# 
  2035  030C                     	;# 
  2036  030D                     	;# 
  2037  030E                     	;# 
  2038  030F                     	;# 
  2039  0310                     	;# 
  2040  0310                     	;# 
  2041  0311                     	;# 
  2042  0312                     	;# 
  2043  0313                     	;# 
  2044  0314                     	;# 
  2045  0314                     	;# 
  2046  0315                     	;# 
  2047  0316                     	;# 
  2048  0318                     	;# 
  2049  0318                     	;# 
  2050  0319                     	;# 
  2051  031A                     	;# 
  2052  031C                     	;# 
  2053  031C                     	;# 
  2054  031D                     	;# 
  2055  031E                     	;# 
  2056  038C                     	;# 
  2057  038C                     	;# 
  2058  038D                     	;# 
  2059  038E                     	;# 
  2060  058C                     	;# 
  2061  058C                     	;# 
  2062  058D                     	;# 
  2063  058E                     	;# 
  2064  058F                     	;# 
  2065  058F                     	;# 
  2066  0590                     	;# 
  2067  0591                     	;# 
  2068  0592                     	;# 
  2069  0593                     	;# 
  2070  059C                     	;# 
  2071  059C                     	;# 
  2072  059D                     	;# 
  2073  059D                     	;# 
  2074  059E                     	;# 
  2075  059F                     	;# 
  2076  060C                     	;# 
  2077  060D                     	;# 
  2078  060E                     	;# 
  2079  060F                     	;# 
  2080  0610                     	;# 
  2081  0611                     	;# 
  2082  0612                     	;# 
  2083  0613                     	;# 
  2084  0614                     	;# 
  2085  070C                     	;# 
  2086  070D                     	;# 
  2087  070E                     	;# 
  2088  070F                     	;# 
  2089  0710                     	;# 
  2090  0711                     	;# 
  2091  0712                     	;# 
  2092  0713                     	;# 
  2093  0716                     	;# 
  2094  0717                     	;# 
  2095  0718                     	;# 
  2096  0719                     	;# 
  2097  071A                     	;# 
  2098  071B                     	;# 
  2099  071C                     	;# 
  2100  071D                     	;# 
  2101  0796                     	;# 
  2102  0797                     	;# 
  2103  0798                     	;# 
  2104  0799                     	;# 
  2105  079A                     	;# 
  2106  079B                     	;# 
  2107  080C                     	;# 
  2108  080D                     	;# 
  2109  080E                     	;# 
  2110  080F                     	;# 
  2111  0810                     	;# 
  2112  0811                     	;# 
  2113  0812                     	;# 
  2114  0813                     	;# 
  2115  0814                     	;# 
  2116  081A                     	;# 
  2117  081A                     	;# 
  2118  081B                     	;# 
  2119  081C                     	;# 
  2120  081C                     	;# 
  2121  081D                     	;# 
  2122  081E                     	;# 
  2123  081F                     	;# 
  2124  088C                     	;# 
  2125  088D                     	;# 
  2126  088E                     	;# 
  2127  088F                     	;# 
  2128  0890                     	;# 
  2129  0891                     	;# 
  2130  0892                     	;# 
  2131  0893                     	;# 
  2132  0895                     	;# 
  2133  0896                     	;# 
  2134  090C                     	;# 
  2135  090E                     	;# 
  2136  090F                     	;# 
  2137  091F                     	;# 
  2138  098F                     	;# 
  2139  098F                     	;# 
  2140  0990                     	;# 
  2141  0991                     	;# 
  2142  0992                     	;# 
  2143  0993                     	;# 
  2144  0994                     	;# 
  2145  0995                     	;# 
  2146  0996                     	;# 
  2147  0997                     	;# 
  2148  0A19                     	;# 
  2149  0A19                     	;# 
  2150  0A1A                     	;# 
  2151  0A1A                     	;# 
  2152  0A1B                     	;# 
  2153  0A1B                     	;# 
  2154  0A1B                     	;# 
  2155  0A1C                     	;# 
  2156  0A1C                     	;# 
  2157  0A1D                     	;# 
  2158  0A1D                     	;# 
  2159  0A1E                     	;# 
  2160  0A1E                     	;# 
  2161  0A1F                     	;# 
  2162  0A1F                     	;# 
  2163  0A1F                     	;# 
  2164  1E0F                     	;# 
  2165  1E10                     	;# 
  2166  1E11                     	;# 
  2167  1E12                     	;# 
  2168  1E13                     	;# 
  2169  1E14                     	;# 
  2170  1E15                     	;# 
  2171  1E16                     	;# 
  2172  1E17                     	;# 
  2173  1E18                     	;# 
  2174  1E19                     	;# 
  2175  1E1A                     	;# 
  2176  1E1B                     	;# 
  2177  1E1C                     	;# 
  2178  1E1D                     	;# 
  2179  1E1E                     	;# 
  2180  1E1F                     	;# 
  2181  1E20                     	;# 
  2182  1E21                     	;# 
  2183  1E22                     	;# 
  2184  1E23                     	;# 
  2185  1E24                     	;# 
  2186  1E25                     	;# 
  2187  1E26                     	;# 
  2188  1E27                     	;# 
  2189  1E28                     	;# 
  2190  1E29                     	;# 
  2191  1E2A                     	;# 
  2192  1E2B                     	;# 
  2193  1E2C                     	;# 
  2194  1E2D                     	;# 
  2195  1E2E                     	;# 
  2196  1E2F                     	;# 
  2197  1E30                     	;# 
  2198  1E31                     	;# 
  2199  1E32                     	;# 
  2200  1E33                     	;# 
  2201  1E34                     	;# 
  2202  1E35                     	;# 
  2203  1E36                     	;# 
  2204  1E37                     	;# 
  2205  1E8F                     	;# 
  2206  1E90                     	;# 
  2207  1E91                     	;# 
  2208  1E92                     	;# 
  2209  1E93                     	;# 
  2210  1E9C                     	;# 
  2211  1EA1                     	;# 
  2212  1EA2                     	;# 
  2213  1EB1                     	;# 
  2214  1EBB                     	;# 
  2215  1EBC                     	;# 
  2216  1EBD                     	;# 
  2217  1EBE                     	;# 
  2218  1EC3                     	;# 
  2219  1EC5                     	;# 
  2220  1EC6                     	;# 
  2221  1EC7                     	;# 
  2222  1EC8                     	;# 
  2223  1EC9                     	;# 
  2224  1ECA                     	;# 
  2225  1ECB                     	;# 
  2226  1ECC                     	;# 
  2227  1ECD                     	;# 
  2228  1ECE                     	;# 
  2229  1F10                     	;# 
  2230  1F11                     	;# 
  2231  1F12                     	;# 
  2232  1F13                     	;# 
  2233  1F14                     	;# 
  2234  1F15                     	;# 
  2235  1F16                     	;# 
  2236  1F17                     	;# 
  2237  1F18                     	;# 
  2238  1F19                     	;# 
  2239  1F1A                     	;# 
  2240  1F1B                     	;# 
  2241  1F1C                     	;# 
  2242  1F1D                     	;# 
  2243  1F1E                     	;# 
  2244  1F1F                     	;# 
  2245  1F20                     	;# 
  2246  1F21                     	;# 
  2247  1F22                     	;# 
  2248  1F23                     	;# 
  2249  1F24                     	;# 
  2250  1F25                     	;# 
  2251  1F26                     	;# 
  2252  1F27                     	;# 
  2253  1F38                     	;# 
  2254  1F39                     	;# 
  2255  1F3A                     	;# 
  2256  1F3B                     	;# 
  2257  1F3C                     	;# 
  2258  1F3D                     	;# 
  2259  1F3E                     	;# 
  2260  1F3F                     	;# 
  2261  1F43                     	;# 
  2262  1F44                     	;# 
  2263  1F45                     	;# 
  2264  1F46                     	;# 
  2265  1F47                     	;# 
  2266  1F48                     	;# 
  2267  1F49                     	;# 
  2268  1F4A                     	;# 
  2269  1F4E                     	;# 
  2270  1F4F                     	;# 
  2271  1F50                     	;# 
  2272  1F51                     	;# 
  2273  1F52                     	;# 
  2274  1F53                     	;# 
  2275  1F54                     	;# 
  2276  1F55                     	;# 
  2277  1F65                     	;# 
  2278  1F68                     	;# 
  2279  1F69                     	;# 
  2280  1F6A                     	;# 
  2281  1F6B                     	;# 
  2282  1FE4                     	;# 
  2283  1FE5                     	;# 
  2284  1FE6                     	;# 
  2285  1FE7                     	;# 
  2286  1FE8                     	;# 
  2287  1FE8                     	;# 
  2288  1FE9                     	;# 
  2289  1FEA                     	;# 
  2290  1FEB                     	;# 
  2291  1FED                     	;# 
  2292  1FEE                     	;# 
  2293  1FEF                     	;# 
  2294  0000                     	;# 
  2295  0001                     	;# 
  2296  0002                     	;# 
  2297  0003                     	;# 
  2298  0004                     	;# 
  2299  0005                     	;# 
  2300  0006                     	;# 
  2301  0007                     	;# 
  2302  0008                     	;# 
  2303  0009                     	;# 
  2304  000A                     	;# 
  2305  000B                     	;# 
  2306  000C                     	;# 
  2307  000D                     	;# 
  2308  000E                     	;# 
  2309  0010                     	;# 
  2310  0012                     	;# 
  2311  0013                     	;# 
  2312  0014                     	;# 
  2313  0016                     	;# 
  2314  0018                     	;# 
  2315  0019                     	;# 
  2316  001A                     	;# 
  2317  009B                     	;# 
  2318  009B                     	;# 
  2319  009C                     	;# 
  2320  009D                     	;# 
  2321  009E                     	;# 
  2322  009F                     	;# 
  2323  0119                     	;# 
  2324  0119                     	;# 
  2325  0119                     	;# 
  2326  011A                     	;# 
  2327  011A                     	;# 
  2328  011A                     	;# 
  2329  011B                     	;# 
  2330  011B                     	;# 
  2331  011B                     	;# 
  2332  011B                     	;# 
  2333  011B                     	;# 
  2334  011C                     	;# 
  2335  011C                     	;# 
  2336  011C                     	;# 
  2337  011D                     	;# 
  2338  011D                     	;# 
  2339  011D                     	;# 
  2340  011E                     	;# 
  2341  011E                     	;# 
  2342  011E                     	;# 
  2343  011F                     	;# 
  2344  011F                     	;# 
  2345  011F                     	;# 
  2346  011F                     	;# 
  2347  011F                     	;# 
  2348  018C                     	;# 
  2349  018D                     	;# 
  2350  018E                     	;# 
  2351  018F                     	;# 
  2352  0190                     	;# 
  2353  0191                     	;# 
  2354  0192                     	;# 
  2355  0196                     	;# 
  2356  0197                     	;# 
  2357  0198                     	;# 
  2358  0199                     	;# 
  2359  019A                     	;# 
  2360  019B                     	;# 
  2361  019C                     	;# 
  2362  020C                     	;# 
  2363  020C                     	;# 
  2364  020D                     	;# 
  2365  020E                     	;# 
  2366  020F                     	;# 
  2367  020F                     	;# 
  2368  0210                     	;# 
  2369  0210                     	;# 
  2370  0211                     	;# 
  2371  0211                     	;# 
  2372  028C                     	;# 
  2373  028C                     	;# 
  2374  028D                     	;# 
  2375  028D                     	;# 
  2376  028E                     	;# 
  2377  028F                     	;# 
  2378  0290                     	;# 
  2379  0291                     	;# 
  2380  030C                     	;# 
  2381  030C                     	;# 
  2382  030D                     	;# 
  2383  030E                     	;# 
  2384  030F                     	;# 
  2385  0310                     	;# 
  2386  0310                     	;# 
  2387  0311                     	;# 
  2388  0312                     	;# 
  2389  0313                     	;# 
  2390  0314                     	;# 
  2391  0314                     	;# 
  2392  0315                     	;# 
  2393  0316                     	;# 
  2394  0318                     	;# 
  2395  0318                     	;# 
  2396  0319                     	;# 
  2397  031A                     	;# 
  2398  031C                     	;# 
  2399  031C                     	;# 
  2400  031D                     	;# 
  2401  031E                     	;# 
  2402  038C                     	;# 
  2403  038C                     	;# 
  2404  038D                     	;# 
  2405  038E                     	;# 
  2406  058C                     	;# 
  2407  058C                     	;# 
  2408  058D                     	;# 
  2409  058E                     	;# 
  2410  058F                     	;# 
  2411  058F                     	;# 
  2412  0590                     	;# 
  2413  0591                     	;# 
  2414  0592                     	;# 
  2415  0593                     	;# 
  2416  059C                     	;# 
  2417  059C                     	;# 
  2418  059D                     	;# 
  2419  059D                     	;# 
  2420  059E                     	;# 
  2421  059F                     	;# 
  2422  060C                     	;# 
  2423  060D                     	;# 
  2424  060E                     	;# 
  2425  060F                     	;# 
  2426  0610                     	;# 
  2427  0611                     	;# 
  2428  0612                     	;# 
  2429  0613                     	;# 
  2430  0614                     	;# 
  2431  070C                     	;# 
  2432  070D                     	;# 
  2433  070E                     	;# 
  2434  070F                     	;# 
  2435  0710                     	;# 
  2436  0711                     	;# 
  2437  0712                     	;# 
  2438  0713                     	;# 
  2439  0716                     	;# 
  2440  0717                     	;# 
  2441  0718                     	;# 
  2442  0719                     	;# 
  2443  071A                     	;# 
  2444  071B                     	;# 
  2445  071C                     	;# 
  2446  071D                     	;# 
  2447  0796                     	;# 
  2448  0797                     	;# 
  2449  0798                     	;# 
  2450  0799                     	;# 
  2451  079A                     	;# 
  2452  079B                     	;# 
  2453  080C                     	;# 
  2454  080D                     	;# 
  2455  080E                     	;# 
  2456  080F                     	;# 
  2457  0810                     	;# 
  2458  0811                     	;# 
  2459  0812                     	;# 
  2460  0813                     	;# 
  2461  0814                     	;# 
  2462  081A                     	;# 
  2463  081A                     	;# 
  2464  081B                     	;# 
  2465  081C                     	;# 
  2466  081C                     	;# 
  2467  081D                     	;# 
  2468  081E                     	;# 
  2469  081F                     	;# 
  2470  088C                     	;# 
  2471  088D                     	;# 
  2472  088E                     	;# 
  2473  088F                     	;# 
  2474  0890                     	;# 
  2475  0891                     	;# 
  2476  0892                     	;# 
  2477  0893                     	;# 
  2478  0895                     	;# 
  2479  0896                     	;# 
  2480  090C                     	;# 
  2481  090E                     	;# 
  2482  090F                     	;# 
  2483  091F                     	;# 
  2484  098F                     	;# 
  2485  098F                     	;# 
  2486  0990                     	;# 
  2487  0991                     	;# 
  2488  0992                     	;# 
  2489  0993                     	;# 
  2490  0994                     	;# 
  2491  0995                     	;# 
  2492  0996                     	;# 
  2493  0997                     	;# 
  2494  0A19                     	;# 
  2495  0A19                     	;# 
  2496  0A1A                     	;# 
  2497  0A1A                     	;# 
  2498  0A1B                     	;# 
  2499  0A1B                     	;# 
  2500  0A1B                     	;# 
  2501  0A1C                     	;# 
  2502  0A1C                     	;# 
  2503  0A1D                     	;# 
  2504  0A1D                     	;# 
  2505  0A1E                     	;# 
  2506  0A1E                     	;# 
  2507  0A1F                     	;# 
  2508  0A1F                     	;# 
  2509  0A1F                     	;# 
  2510  1E0F                     	;# 
  2511  1E10                     	;# 
  2512  1E11                     	;# 
  2513  1E12                     	;# 
  2514  1E13                     	;# 
  2515  1E14                     	;# 
  2516  1E15                     	;# 
  2517  1E16                     	;# 
  2518  1E17                     	;# 
  2519  1E18                     	;# 
  2520  1E19                     	;# 
  2521  1E1A                     	;# 
  2522  1E1B                     	;# 
  2523  1E1C                     	;# 
  2524  1E1D                     	;# 
  2525  1E1E                     	;# 
  2526  1E1F                     	;# 
  2527  1E20                     	;# 
  2528  1E21                     	;# 
  2529  1E22                     	;# 
  2530  1E23                     	;# 
  2531  1E24                     	;# 
  2532  1E25                     	;# 
  2533  1E26                     	;# 
  2534  1E27                     	;# 
  2535  1E28                     	;# 
  2536  1E29                     	;# 
  2537  1E2A                     	;# 
  2538  1E2B                     	;# 
  2539  1E2C                     	;# 
  2540  1E2D                     	;# 
  2541  1E2E                     	;# 
  2542  1E2F                     	;# 
  2543  1E30                     	;# 
  2544  1E31                     	;# 
  2545  1E32                     	;# 
  2546  1E33                     	;# 
  2547  1E34                     	;# 
  2548  1E35                     	;# 
  2549  1E36                     	;# 
  2550  1E37                     	;# 
  2551  1E8F                     	;# 
  2552  1E90                     	;# 
  2553  1E91                     	;# 
  2554  1E92                     	;# 
  2555  1E93                     	;# 
  2556  1E9C                     	;# 
  2557  1EA1                     	;# 
  2558  1EA2                     	;# 
  2559  1EB1                     	;# 
  2560  1EBB                     	;# 
  2561  1EBC                     	;# 
  2562  1EBD                     	;# 
  2563  1EBE                     	;# 
  2564  1EC3                     	;# 
  2565  1EC5                     	;# 
  2566  1EC6                     	;# 
  2567  1EC7                     	;# 
  2568  1EC8                     	;# 
  2569  1EC9                     	;# 
  2570  1ECA                     	;# 
  2571  1ECB                     	;# 
  2572  1ECC                     	;# 
  2573  1ECD                     	;# 
  2574  1ECE                     	;# 
  2575  1F10                     	;# 
  2576  1F11                     	;# 
  2577  1F12                     	;# 
  2578  1F13                     	;# 
  2579  1F14                     	;# 
  2580  1F15                     	;# 
  2581  1F16                     	;# 
  2582  1F17                     	;# 
  2583  1F18                     	;# 
  2584  1F19                     	;# 
  2585  1F1A                     	;# 
  2586  1F1B                     	;# 
  2587  1F1C                     	;# 
  2588  1F1D                     	;# 
  2589  1F1E                     	;# 
  2590  1F1F                     	;# 
  2591  1F20                     	;# 
  2592  1F21                     	;# 
  2593  1F22                     	;# 
  2594  1F23                     	;# 
  2595  1F24                     	;# 
  2596  1F25                     	;# 
  2597  1F26                     	;# 
  2598  1F27                     	;# 
  2599  1F38                     	;# 
  2600  1F39                     	;# 
  2601  1F3A                     	;# 
  2602  1F3B                     	;# 
  2603  1F3C                     	;# 
  2604  1F3D                     	;# 
  2605  1F3E                     	;# 
  2606  1F3F                     	;# 
  2607  1F43                     	;# 
  2608  1F44                     	;# 
  2609  1F45                     	;# 
  2610  1F46                     	;# 
  2611  1F47                     	;# 
  2612  1F48                     	;# 
  2613  1F49                     	;# 
  2614  1F4A                     	;# 
  2615  1F4E                     	;# 
  2616  1F4F                     	;# 
  2617  1F50                     	;# 
  2618  1F51                     	;# 
  2619  1F52                     	;# 
  2620  1F53                     	;# 
  2621  1F54                     	;# 
  2622  1F55                     	;# 
  2623  1F65                     	;# 
  2624  1F68                     	;# 
  2625  1F69                     	;# 
  2626  1F6A                     	;# 
  2627  1F6B                     	;# 
  2628  1FE4                     	;# 
  2629  1FE5                     	;# 
  2630  1FE6                     	;# 
  2631  1FE7                     	;# 
  2632  1FE8                     	;# 
  2633  1FE8                     	;# 
  2634  1FE9                     	;# 
  2635  1FEA                     	;# 
  2636  1FEB                     	;# 
  2637  1FED                     	;# 
  2638  1FEE                     	;# 
  2639  1FEF                     	;# 
  2640  0000                     	;# 
  2641  0001                     	;# 
  2642  0002                     	;# 
  2643  0003                     	;# 
  2644  0004                     	;# 
  2645  0005                     	;# 
  2646  0006                     	;# 
  2647  0007                     	;# 
  2648  0008                     	;# 
  2649  0009                     	;# 
  2650  000A                     	;# 
  2651  000B                     	;# 
  2652  000C                     	;# 
  2653  000D                     	;# 
  2654  000E                     	;# 
  2655  0010                     	;# 
  2656  0012                     	;# 
  2657  0013                     	;# 
  2658  0014                     	;# 
  2659  0016                     	;# 
  2660  0018                     	;# 
  2661  0019                     	;# 
  2662  001A                     	;# 
  2663  009B                     	;# 
  2664  009B                     	;# 
  2665  009C                     	;# 
  2666  009D                     	;# 
  2667  009E                     	;# 
  2668  009F                     	;# 
  2669  0119                     	;# 
  2670  0119                     	;# 
  2671  0119                     	;# 
  2672  011A                     	;# 
  2673  011A                     	;# 
  2674  011A                     	;# 
  2675  011B                     	;# 
  2676  011B                     	;# 
  2677  011B                     	;# 
  2678  011B                     	;# 
  2679  011B                     	;# 
  2680  011C                     	;# 
  2681  011C                     	;# 
  2682  011C                     	;# 
  2683  011D                     	;# 
  2684  011D                     	;# 
  2685  011D                     	;# 
  2686  011E                     	;# 
  2687  011E                     	;# 
  2688  011E                     	;# 
  2689  011F                     	;# 
  2690  011F                     	;# 
  2691  011F                     	;# 
  2692  011F                     	;# 
  2693  011F                     	;# 
  2694  018C                     	;# 
  2695  018D                     	;# 
  2696  018E                     	;# 
  2697  018F                     	;# 
  2698  0190                     	;# 
  2699  0191                     	;# 
  2700  0192                     	;# 
  2701  0196                     	;# 
  2702  0197                     	;# 
  2703  0198                     	;# 
  2704  0199                     	;# 
  2705  019A                     	;# 
  2706  019B                     	;# 
  2707  019C                     	;# 
  2708  020C                     	;# 
  2709  020C                     	;# 
  2710  020D                     	;# 
  2711  020E                     	;# 
  2712  020F                     	;# 
  2713  020F                     	;# 
  2714  0210                     	;# 
  2715  0210                     	;# 
  2716  0211                     	;# 
  2717  0211                     	;# 
  2718  028C                     	;# 
  2719  028C                     	;# 
  2720  028D                     	;# 
  2721  028D                     	;# 
  2722  028E                     	;# 
  2723  028F                     	;# 
  2724  0290                     	;# 
  2725  0291                     	;# 
  2726  030C                     	;# 
  2727  030C                     	;# 
  2728  030D                     	;# 
  2729  030E                     	;# 
  2730  030F                     	;# 
  2731  0310                     	;# 
  2732  0310                     	;# 
  2733  0311                     	;# 
  2734  0312                     	;# 
  2735  0313                     	;# 
  2736  0314                     	;# 
  2737  0314                     	;# 
  2738  0315                     	;# 
  2739  0316                     	;# 
  2740  0318                     	;# 
  2741  0318                     	;# 
  2742  0319                     	;# 
  2743  031A                     	;# 
  2744  031C                     	;# 
  2745  031C                     	;# 
  2746  031D                     	;# 
  2747  031E                     	;# 
  2748  038C                     	;# 
  2749  038C                     	;# 
  2750  038D                     	;# 
  2751  038E                     	;# 
  2752  058C                     	;# 
  2753  058C                     	;# 
  2754  058D                     	;# 
  2755  058E                     	;# 
  2756  058F                     	;# 
  2757  058F                     	;# 
  2758  0590                     	;# 
  2759  0591                     	;# 
  2760  0592                     	;# 
  2761  0593                     	;# 
  2762  059C                     	;# 
  2763  059C                     	;# 
  2764  059D                     	;# 
  2765  059D                     	;# 
  2766  059E                     	;# 
  2767  059F                     	;# 
  2768  060C                     	;# 
  2769  060D                     	;# 
  2770  060E                     	;# 
  2771  060F                     	;# 
  2772  0610                     	;# 
  2773  0611                     	;# 
  2774  0612                     	;# 
  2775  0613                     	;# 
  2776  0614                     	;# 
  2777  070C                     	;# 
  2778  070D                     	;# 
  2779  070E                     	;# 
  2780  070F                     	;# 
  2781  0710                     	;# 
  2782  0711                     	;# 
  2783  0712                     	;# 
  2784  0713                     	;# 
  2785  0716                     	;# 
  2786  0717                     	;# 
  2787  0718                     	;# 
  2788  0719                     	;# 
  2789  071A                     	;# 
  2790  071B                     	;# 
  2791  071C                     	;# 
  2792  071D                     	;# 
  2793  0796                     	;# 
  2794  0797                     	;# 
  2795  0798                     	;# 
  2796  0799                     	;# 
  2797  079A                     	;# 
  2798  079B                     	;# 
  2799  080C                     	;# 
  2800  080D                     	;# 
  2801  080E                     	;# 
  2802  080F                     	;# 
  2803  0810                     	;# 
  2804  0811                     	;# 
  2805  0812                     	;# 
  2806  0813                     	;# 
  2807  0814                     	;# 
  2808  081A                     	;# 
  2809  081A                     	;# 
  2810  081B                     	;# 
  2811  081C                     	;# 
  2812  081C                     	;# 
  2813  081D                     	;# 
  2814  081E                     	;# 
  2815  081F                     	;# 
  2816  088C                     	;# 
  2817  088D                     	;# 
  2818  088E                     	;# 
  2819  088F                     	;# 
  2820  0890                     	;# 
  2821  0891                     	;# 
  2822  0892                     	;# 
  2823  0893                     	;# 
  2824  0895                     	;# 
  2825  0896                     	;# 
  2826  090C                     	;# 
  2827  090E                     	;# 
  2828  090F                     	;# 
  2829  091F                     	;# 
  2830  098F                     	;# 
  2831  098F                     	;# 
  2832  0990                     	;# 
  2833  0991                     	;# 
  2834  0992                     	;# 
  2835  0993                     	;# 
  2836  0994                     	;# 
  2837  0995                     	;# 
  2838  0996                     	;# 
  2839  0997                     	;# 
  2840  0A19                     	;# 
  2841  0A19                     	;# 
  2842  0A1A                     	;# 
  2843  0A1A                     	;# 
  2844  0A1B                     	;# 
  2845  0A1B                     	;# 
  2846  0A1B                     	;# 
  2847  0A1C                     	;# 
  2848  0A1C                     	;# 
  2849  0A1D                     	;# 
  2850  0A1D                     	;# 
  2851  0A1E                     	;# 
  2852  0A1E                     	;# 
  2853  0A1F                     	;# 
  2854  0A1F                     	;# 
  2855  0A1F                     	;# 
  2856  1E0F                     	;# 
  2857  1E10                     	;# 
  2858  1E11                     	;# 
  2859  1E12                     	;# 
  2860  1E13                     	;# 
  2861  1E14                     	;# 
  2862  1E15                     	;# 
  2863  1E16                     	;# 
  2864  1E17                     	;# 
  2865  1E18                     	;# 
  2866  1E19                     	;# 
  2867  1E1A                     	;# 
  2868  1E1B                     	;# 
  2869  1E1C                     	;# 
  2870  1E1D                     	;# 
  2871  1E1E                     	;# 
  2872  1E1F                     	;# 
  2873  1E20                     	;# 
  2874  1E21                     	;# 
  2875  1E22                     	;# 
  2876  1E23                     	;# 
  2877  1E24                     	;# 
  2878  1E25                     	;# 
  2879  1E26                     	;# 
  2880  1E27                     	;# 
  2881  1E28                     	;# 
  2882  1E29                     	;# 
  2883  1E2A                     	;# 
  2884  1E2B                     	;# 
  2885  1E2C                     	;# 
  2886  1E2D                     	;# 
  2887  1E2E                     	;# 
  2888  1E2F                     	;# 
  2889  1E30                     	;# 
  2890  1E31                     	;# 
  2891  1E32                     	;# 
  2892  1E33                     	;# 
  2893  1E34                     	;# 
  2894  1E35                     	;# 
  2895  1E36                     	;# 
  2896  1E37                     	;# 
  2897  1E8F                     	;# 
  2898  1E90                     	;# 
  2899  1E91                     	;# 
  2900  1E92                     	;# 
  2901  1E93                     	;# 
  2902  1E9C                     	;# 
  2903  1EA1                     	;# 
  2904  1EA2                     	;# 
  2905  1EB1                     	;# 
  2906  1EBB                     	;# 
  2907  1EBC                     	;# 
  2908  1EBD                     	;# 
  2909  1EBE                     	;# 
  2910  1EC3                     	;# 
  2911  1EC5                     	;# 
  2912  1EC6                     	;# 
  2913  1EC7                     	;# 
  2914  1EC8                     	;# 
  2915  1EC9                     	;# 
  2916  1ECA                     	;# 
  2917  1ECB                     	;# 
  2918  1ECC                     	;# 
  2919  1ECD                     	;# 
  2920  1ECE                     	;# 
  2921  1F10                     	;# 
  2922  1F11                     	;# 
  2923  1F12                     	;# 
  2924  1F13                     	;# 
  2925  1F14                     	;# 
  2926  1F15                     	;# 
  2927  1F16                     	;# 
  2928  1F17                     	;# 
  2929  1F18                     	;# 
  2930  1F19                     	;# 
  2931  1F1A                     	;# 
  2932  1F1B                     	;# 
  2933  1F1C                     	;# 
  2934  1F1D                     	;# 
  2935  1F1E                     	;# 
  2936  1F1F                     	;# 
  2937  1F20                     	;# 
  2938  1F21                     	;# 
  2939  1F22                     	;# 
  2940  1F23                     	;# 
  2941  1F24                     	;# 
  2942  1F25                     	;# 
  2943  1F26                     	;# 
  2944  1F27                     	;# 
  2945  1F38                     	;# 
  2946  1F39                     	;# 
  2947  1F3A                     	;# 
  2948  1F3B                     	;# 
  2949  1F3C                     	;# 
  2950  1F3D                     	;# 
  2951  1F3E                     	;# 
  2952  1F3F                     	;# 
  2953  1F43                     	;# 
  2954  1F44                     	;# 
  2955  1F45                     	;# 
  2956  1F46                     	;# 
  2957  1F47                     	;# 
  2958  1F48                     	;# 
  2959  1F49                     	;# 
  2960  1F4A                     	;# 
  2961  1F4E                     	;# 
  2962  1F4F                     	;# 
  2963  1F50                     	;# 
  2964  1F51                     	;# 
  2965  1F52                     	;# 
  2966  1F53                     	;# 
  2967  1F54                     	;# 
  2968  1F55                     	;# 
  2969  1F65                     	;# 
  2970  1F68                     	;# 
  2971  1F69                     	;# 
  2972  1F6A                     	;# 
  2973  1F6B                     	;# 
  2974  1FE4                     	;# 
  2975  1FE5                     	;# 
  2976  1FE6                     	;# 
  2977  1FE7                     	;# 
  2978  1FE8                     	;# 
  2979  1FE8                     	;# 
  2980  1FE9                     	;# 
  2981  1FEA                     	;# 
  2982  1FEB                     	;# 
  2983  1FED                     	;# 
  2984  1FEE                     	;# 
  2985  1FEF                     	;# 
  2986  0000                     	;# 
  2987  0001                     	;# 
  2988  0002                     	;# 
  2989  0003                     	;# 
  2990  0004                     	;# 
  2991  0005                     	;# 
  2992  0006                     	;# 
  2993  0007                     	;# 
  2994  0008                     	;# 
  2995  0009                     	;# 
  2996  000A                     	;# 
  2997  000B                     	;# 
  2998  000C                     	;# 
  2999  000D                     	;# 
  3000  000E                     	;# 
  3001  0010                     	;# 
  3002  0012                     	;# 
  3003  0013                     	;# 
  3004  0014                     	;# 
  3005  0016                     	;# 
  3006  0018                     	;# 
  3007  0019                     	;# 
  3008  001A                     	;# 
  3009  009B                     	;# 
  3010  009B                     	;# 
  3011  009C                     	;# 
  3012  009D                     	;# 
  3013  009E                     	;# 
  3014  009F                     	;# 
  3015  0119                     	;# 
  3016  0119                     	;# 
  3017  0119                     	;# 
  3018  011A                     	;# 
  3019  011A                     	;# 
  3020  011A                     	;# 
  3021  011B                     	;# 
  3022  011B                     	;# 
  3023  011B                     	;# 
  3024  011B                     	;# 
  3025  011B                     	;# 
  3026  011C                     	;# 
  3027  011C                     	;# 
  3028  011C                     	;# 
  3029  011D                     	;# 
  3030  011D                     	;# 
  3031  011D                     	;# 
  3032  011E                     	;# 
  3033  011E                     	;# 
  3034  011E                     	;# 
  3035  011F                     	;# 
  3036  011F                     	;# 
  3037  011F                     	;# 
  3038  011F                     	;# 
  3039  011F                     	;# 
  3040  018C                     	;# 
  3041  018D                     	;# 
  3042  018E                     	;# 
  3043  018F                     	;# 
  3044  0190                     	;# 
  3045  0191                     	;# 
  3046  0192                     	;# 
  3047  0196                     	;# 
  3048  0197                     	;# 
  3049  0198                     	;# 
  3050  0199                     	;# 
  3051  019A                     	;# 
  3052  019B                     	;# 
  3053  019C                     	;# 
  3054  020C                     	;# 
  3055  020C                     	;# 
  3056  020D                     	;# 
  3057  020E                     	;# 
  3058  020F                     	;# 
  3059  020F                     	;# 
  3060  0210                     	;# 
  3061  0210                     	;# 
  3062  0211                     	;# 
  3063  0211                     	;# 
  3064  028C                     	;# 
  3065  028C                     	;# 
  3066  028D                     	;# 
  3067  028D                     	;# 
  3068  028E                     	;# 
  3069  028F                     	;# 
  3070  0290                     	;# 
  3071  0291                     	;# 
  3072  030C                     	;# 
  3073  030C                     	;# 
  3074  030D                     	;# 
  3075  030E                     	;# 
  3076  030F                     	;# 
  3077  0310                     	;# 
  3078  0310                     	;# 
  3079  0311                     	;# 
  3080  0312                     	;# 
  3081  0313                     	;# 
  3082  0314                     	;# 
  3083  0314                     	;# 
  3084  0315                     	;# 
  3085  0316                     	;# 
  3086  0318                     	;# 
  3087  0318                     	;# 
  3088  0319                     	;# 
  3089  031A                     	;# 
  3090  031C                     	;# 
  3091  031C                     	;# 
  3092  031D                     	;# 
  3093  031E                     	;# 
  3094  038C                     	;# 
  3095  038C                     	;# 
  3096  038D                     	;# 
  3097  038E                     	;# 
  3098  058C                     	;# 
  3099  058C                     	;# 
  3100  058D                     	;# 
  3101  058E                     	;# 
  3102  058F                     	;# 
  3103  058F                     	;# 
  3104  0590                     	;# 
  3105  0591                     	;# 
  3106  0592                     	;# 
  3107  0593                     	;# 
  3108  059C                     	;# 
  3109  059C                     	;# 
  3110  059D                     	;# 
  3111  059D                     	;# 
  3112  059E                     	;# 
  3113  059F                     	;# 
  3114  060C                     	;# 
  3115  060D                     	;# 
  3116  060E                     	;# 
  3117  060F                     	;# 
  3118  0610                     	;# 
  3119  0611                     	;# 
  3120  0612                     	;# 
  3121  0613                     	;# 
  3122  0614                     	;# 
  3123  070C                     	;# 
  3124  070D                     	;# 
  3125  070E                     	;# 
  3126  070F                     	;# 
  3127  0710                     	;# 
  3128  0711                     	;# 
  3129  0712                     	;# 
  3130  0713                     	;# 
  3131  0716                     	;# 
  3132  0717                     	;# 
  3133  0718                     	;# 
  3134  0719                     	;# 
  3135  071A                     	;# 
  3136  071B                     	;# 
  3137  071C                     	;# 
  3138  071D                     	;# 
  3139  0796                     	;# 
  3140  0797                     	;# 
  3141  0798                     	;# 
  3142  0799                     	;# 
  3143  079A                     	;# 
  3144  079B                     	;# 
  3145  080C                     	;# 
  3146  080D                     	;# 
  3147  080E                     	;# 
  3148  080F                     	;# 
  3149  0810                     	;# 
  3150  0811                     	;# 
  3151  0812                     	;# 
  3152  0813                     	;# 
  3153  0814                     	;# 
  3154  081A                     	;# 
  3155  081A                     	;# 
  3156  081B                     	;# 
  3157  081C                     	;# 
  3158  081C                     	;# 
  3159  081D                     	;# 
  3160  081E                     	;# 
  3161  081F                     	;# 
  3162  088C                     	;# 
  3163  088D                     	;# 
  3164  088E                     	;# 
  3165  088F                     	;# 
  3166  0890                     	;# 
  3167  0891                     	;# 
  3168  0892                     	;# 
  3169  0893                     	;# 
  3170  0895                     	;# 
  3171  0896                     	;# 
  3172  090C                     	;# 
  3173  090E                     	;# 
  3174  090F                     	;# 
  3175  091F                     	;# 
  3176  098F                     	;# 
  3177  098F                     	;# 
  3178  0990                     	;# 
  3179  0991                     	;# 
  3180  0992                     	;# 
  3181  0993                     	;# 
  3182  0994                     	;# 
  3183  0995                     	;# 
  3184  0996                     	;# 
  3185  0997                     	;# 
  3186  0A19                     	;# 
  3187  0A19                     	;# 
  3188  0A1A                     	;# 
  3189  0A1A                     	;# 
  3190  0A1B                     	;# 
  3191  0A1B                     	;# 
  3192  0A1B                     	;# 
  3193  0A1C                     	;# 
  3194  0A1C                     	;# 
  3195  0A1D                     	;# 
  3196  0A1D                     	;# 
  3197  0A1E                     	;# 
  3198  0A1E                     	;# 
  3199  0A1F                     	;# 
  3200  0A1F                     	;# 
  3201  0A1F                     	;# 
  3202  1E0F                     	;# 
  3203  1E10                     	;# 
  3204  1E11                     	;# 
  3205  1E12                     	;# 
  3206  1E13                     	;# 
  3207  1E14                     	;# 
  3208  1E15                     	;# 
  3209  1E16                     	;# 
  3210  1E17                     	;# 
  3211  1E18                     	;# 
  3212  1E19                     	;# 
  3213  1E1A                     	;# 
  3214  1E1B                     	;# 
  3215  1E1C                     	;# 
  3216  1E1D                     	;# 
  3217  1E1E                     	;# 
  3218  1E1F                     	;# 
  3219  1E20                     	;# 
  3220  1E21                     	;# 
  3221  1E22                     	;# 
  3222  1E23                     	;# 
  3223  1E24                     	;# 
  3224  1E25                     	;# 
  3225  1E26                     	;# 
  3226  1E27                     	;# 
  3227  1E28                     	;# 
  3228  1E29                     	;# 
  3229  1E2A                     	;# 
  3230  1E2B                     	;# 
  3231  1E2C                     	;# 
  3232  1E2D                     	;# 
  3233  1E2E                     	;# 
  3234  1E2F                     	;# 
  3235  1E30                     	;# 
  3236  1E31                     	;# 
  3237  1E32                     	;# 
  3238  1E33                     	;# 
  3239  1E34                     	;# 
  3240  1E35                     	;# 
  3241  1E36                     	;# 
  3242  1E37                     	;# 
  3243  1E8F                     	;# 
  3244  1E90                     	;# 
  3245  1E91                     	;# 
  3246  1E92                     	;# 
  3247  1E93                     	;# 
  3248  1E9C                     	;# 
  3249  1EA1                     	;# 
  3250  1EA2                     	;# 
  3251  1EB1                     	;# 
  3252  1EBB                     	;# 
  3253  1EBC                     	;# 
  3254  1EBD                     	;# 
  3255  1EBE                     	;# 
  3256  1EC3                     	;# 
  3257  1EC5                     	;# 
  3258  1EC6                     	;# 
  3259  1EC7                     	;# 
  3260  1EC8                     	;# 
  3261  1EC9                     	;# 
  3262  1ECA                     	;# 
  3263  1ECB                     	;# 
  3264  1ECC                     	;# 
  3265  1ECD                     	;# 
  3266  1ECE                     	;# 
  3267  1F10                     	;# 
  3268  1F11                     	;# 
  3269  1F12                     	;# 
  3270  1F13                     	;# 
  3271  1F14                     	;# 
  3272  1F15                     	;# 
  3273  1F16                     	;# 
  3274  1F17                     	;# 
  3275  1F18                     	;# 
  3276  1F19                     	;# 
  3277  1F1A                     	;# 
  3278  1F1B                     	;# 
  3279  1F1C                     	;# 
  3280  1F1D                     	;# 
  3281  1F1E                     	;# 
  3282  1F1F                     	;# 
  3283  1F20                     	;# 
  3284  1F21                     	;# 
  3285  1F22                     	;# 
  3286  1F23                     	;# 
  3287  1F24                     	;# 
  3288  1F25                     	;# 
  3289  1F26                     	;# 
  3290  1F27                     	;# 
  3291  1F38                     	;# 
  3292  1F39                     	;# 
  3293  1F3A                     	;# 
  3294  1F3B                     	;# 
  3295  1F3C                     	;# 
  3296  1F3D                     	;# 
  3297  1F3E                     	;# 
  3298  1F3F                     	;# 
  3299  1F43                     	;# 
  3300  1F44                     	;# 
  3301  1F45                     	;# 
  3302  1F46                     	;# 
  3303  1F47                     	;# 
  3304  1F48                     	;# 
  3305  1F49                     	;# 
  3306  1F4A                     	;# 
  3307  1F4E                     	;# 
  3308  1F4F                     	;# 
  3309  1F50                     	;# 
  3310  1F51                     	;# 
  3311  1F52                     	;# 
  3312  1F53                     	;# 
  3313  1F54                     	;# 
  3314  1F55                     	;# 
  3315  1F65                     	;# 
  3316  1F68                     	;# 
  3317  1F69                     	;# 
  3318  1F6A                     	;# 
  3319  1F6B                     	;# 
  3320  1FE4                     	;# 
  3321  1FE5                     	;# 
  3322  1FE6                     	;# 
  3323  1FE7                     	;# 
  3324  1FE8                     	;# 
  3325  1FE8                     	;# 
  3326  1FE9                     	;# 
  3327  1FEA                     	;# 
  3328  1FEB                     	;# 
  3329  1FED                     	;# 
  3330  1FEE                     	;# 
  3331  1FEF                     	;# 
  3332  0000                     	;# 
  3333  0001                     	;# 
  3334  0002                     	;# 
  3335  0003                     	;# 
  3336  0004                     	;# 
  3337  0005                     	;# 
  3338  0006                     	;# 
  3339  0007                     	;# 
  3340  0008                     	;# 
  3341  0009                     	;# 
  3342  000A                     	;# 
  3343  000B                     	;# 
  3344  000C                     	;# 
  3345  000D                     	;# 
  3346  000E                     	;# 
  3347  0010                     	;# 
  3348  0012                     	;# 
  3349  0013                     	;# 
  3350  0014                     	;# 
  3351  0016                     	;# 
  3352  0018                     	;# 
  3353  0019                     	;# 
  3354  001A                     	;# 
  3355  009B                     	;# 
  3356  009B                     	;# 
  3357  009C                     	;# 
  3358  009D                     	;# 
  3359  009E                     	;# 
  3360  009F                     	;# 
  3361  0119                     	;# 
  3362  0119                     	;# 
  3363  0119                     	;# 
  3364  011A                     	;# 
  3365  011A                     	;# 
  3366  011A                     	;# 
  3367  011B                     	;# 
  3368  011B                     	;# 
  3369  011B                     	;# 
  3370  011B                     	;# 
  3371  011B                     	;# 
  3372  011C                     	;# 
  3373  011C                     	;# 
  3374  011C                     	;# 
  3375  011D                     	;# 
  3376  011D                     	;# 
  3377  011D                     	;# 
  3378  011E                     	;# 
  3379  011E                     	;# 
  3380  011E                     	;# 
  3381  011F                     	;# 
  3382  011F                     	;# 
  3383  011F                     	;# 
  3384  011F                     	;# 
  3385  011F                     	;# 
  3386  018C                     	;# 
  3387  018D                     	;# 
  3388  018E                     	;# 
  3389  018F                     	;# 
  3390  0190                     	;# 
  3391  0191                     	;# 
  3392  0192                     	;# 
  3393  0196                     	;# 
  3394  0197                     	;# 
  3395  0198                     	;# 
  3396  0199                     	;# 
  3397  019A                     	;# 
  3398  019B                     	;# 
  3399  019C                     	;# 
  3400  020C                     	;# 
  3401  020C                     	;# 
  3402  020D                     	;# 
  3403  020E                     	;# 
  3404  020F                     	;# 
  3405  020F                     	;# 
  3406  0210                     	;# 
  3407  0210                     	;# 
  3408  0211                     	;# 
  3409  0211                     	;# 
  3410  028C                     	;# 
  3411  028C                     	;# 
  3412  028D                     	;# 
  3413  028D                     	;# 
  3414  028E                     	;# 
  3415  028F                     	;# 
  3416  0290                     	;# 
  3417  0291                     	;# 
  3418  030C                     	;# 
  3419  030C                     	;# 
  3420  030D                     	;# 
  3421  030E                     	;# 
  3422  030F                     	;# 
  3423  0310                     	;# 
  3424  0310                     	;# 
  3425  0311                     	;# 
  3426  0312                     	;# 
  3427  0313                     	;# 
  3428  0314                     	;# 
  3429  0314                     	;# 
  3430  0315                     	;# 
  3431  0316                     	;# 
  3432  0318                     	;# 
  3433  0318                     	;# 
  3434  0319                     	;# 
  3435  031A                     	;# 
  3436  031C                     	;# 
  3437  031C                     	;# 
  3438  031D                     	;# 
  3439  031E                     	;# 
  3440  038C                     	;# 
  3441  038C                     	;# 
  3442  038D                     	;# 
  3443  038E                     	;# 
  3444  058C                     	;# 
  3445  058C                     	;# 
  3446  058D                     	;# 
  3447  058E                     	;# 
  3448  058F                     	;# 
  3449  058F                     	;# 
  3450  0590                     	;# 
  3451  0591                     	;# 
  3452  0592                     	;# 
  3453  0593                     	;# 
  3454  059C                     	;# 
  3455  059C                     	;# 
  3456  059D                     	;# 
  3457  059D                     	;# 
  3458  059E                     	;# 
  3459  059F                     	;# 
  3460  060C                     	;# 
  3461  060D                     	;# 
  3462  060E                     	;# 
  3463  060F                     	;# 
  3464  0610                     	;# 
  3465  0611                     	;# 
  3466  0612                     	;# 
  3467  0613                     	;# 
  3468  0614                     	;# 
  3469  070C                     	;# 
  3470  070D                     	;# 
  3471  070E                     	;# 
  3472  070F                     	;# 
  3473  0710                     	;# 
  3474  0711                     	;# 
  3475  0712                     	;# 
  3476  0713                     	;# 
  3477  0716                     	;# 
  3478  0717                     	;# 
  3479  0718                     	;# 
  3480  0719                     	;# 
  3481  071A                     	;# 
  3482  071B                     	;# 
  3483  071C                     	;# 
  3484  071D                     	;# 
  3485  0796                     	;# 
  3486  0797                     	;# 
  3487  0798                     	;# 
  3488  0799                     	;# 
  3489  079A                     	;# 
  3490  079B                     	;# 
  3491  080C                     	;# 
  3492  080D                     	;# 
  3493  080E                     	;# 
  3494  080F                     	;# 
  3495  0810                     	;# 
  3496  0811                     	;# 
  3497  0812                     	;# 
  3498  0813                     	;# 
  3499  0814                     	;# 
  3500  081A                     	;# 
  3501  081A                     	;# 
  3502  081B                     	;# 
  3503  081C                     	;# 
  3504  081C                     	;# 
  3505  081D                     	;# 
  3506  081E                     	;# 
  3507  081F                     	;# 
  3508  088C                     	;# 
  3509  088D                     	;# 
  3510  088E                     	;# 
  3511  088F                     	;# 
  3512  0890                     	;# 
  3513  0891                     	;# 
  3514  0892                     	;# 
  3515  0893                     	;# 
  3516  0895                     	;# 
  3517  0896                     	;# 
  3518  090C                     	;# 
  3519  090E                     	;# 
  3520  090F                     	;# 
  3521  091F                     	;# 
  3522  098F                     	;# 
  3523  098F                     	;# 
  3524  0990                     	;# 
  3525  0991                     	;# 
  3526  0992                     	;# 
  3527  0993                     	;# 
  3528  0994                     	;# 
  3529  0995                     	;# 
  3530  0996                     	;# 
  3531  0997                     	;# 
  3532  0A19                     	;# 
  3533  0A19                     	;# 
  3534  0A1A                     	;# 
  3535  0A1A                     	;# 
  3536  0A1B                     	;# 
  3537  0A1B                     	;# 
  3538  0A1B                     	;# 
  3539  0A1C                     	;# 
  3540  0A1C                     	;# 
  3541  0A1D                     	;# 
  3542  0A1D                     	;# 
  3543  0A1E                     	;# 
  3544  0A1E                     	;# 
  3545  0A1F                     	;# 
  3546  0A1F                     	;# 
  3547  0A1F                     	;# 
  3548  1E0F                     	;# 
  3549  1E10                     	;# 
  3550  1E11                     	;# 
  3551  1E12                     	;# 
  3552  1E13                     	;# 
  3553  1E14                     	;# 
  3554  1E15                     	;# 
  3555  1E16                     	;# 
  3556  1E17                     	;# 
  3557  1E18                     	;# 
  3558  1E19                     	;# 
  3559  1E1A                     	;# 
  3560  1E1B                     	;# 
  3561  1E1C                     	;# 
  3562  1E1D                     	;# 
  3563  1E1E                     	;# 
  3564  1E1F                     	;# 
  3565  1E20                     	;# 
  3566  1E21                     	;# 
  3567  1E22                     	;# 
  3568  1E23                     	;# 
  3569  1E24                     	;# 
  3570  1E25                     	;# 
  3571  1E26                     	;# 
  3572  1E27                     	;# 
  3573  1E28                     	;# 
  3574  1E29                     	;# 
  3575  1E2A                     	;# 
  3576  1E2B                     	;# 
  3577  1E2C                     	;# 
  3578  1E2D                     	;# 
  3579  1E2E                     	;# 
  3580  1E2F                     	;# 
  3581  1E30                     	;# 
  3582  1E31                     	;# 
  3583  1E32                     	;# 
  3584  1E33                     	;# 
  3585  1E34                     	;# 
  3586  1E35                     	;# 
  3587  1E36                     	;# 
  3588  1E37                     	;# 
  3589  1E8F                     	;# 
  3590  1E90                     	;# 
  3591  1E91                     	;# 
  3592  1E92                     	;# 
  3593  1E93                     	;# 
  3594  1E9C                     	;# 
  3595  1EA1                     	;# 
  3596  1EA2                     	;# 
  3597  1EB1                     	;# 
  3598  1EBB                     	;# 
  3599  1EBC                     	;# 
  3600  1EBD                     	;# 
  3601  1EBE                     	;# 
  3602  1EC3                     	;# 
  3603  1EC5                     	;# 
  3604  1EC6                     	;# 
  3605  1EC7                     	;# 
  3606  1EC8                     	;# 
  3607  1EC9                     	;# 
  3608  1ECA                     	;# 
  3609  1ECB                     	;# 
  3610  1ECC                     	;# 
  3611  1ECD                     	;# 
  3612  1ECE                     	;# 
  3613  1F10                     	;# 
  3614  1F11                     	;# 
  3615  1F12                     	;# 
  3616  1F13                     	;# 
  3617  1F14                     	;# 
  3618  1F15                     	;# 
  3619  1F16                     	;# 
  3620  1F17                     	;# 
  3621  1F18                     	;# 
  3622  1F19                     	;# 
  3623  1F1A                     	;# 
  3624  1F1B                     	;# 
  3625  1F1C                     	;# 
  3626  1F1D                     	;# 
  3627  1F1E                     	;# 
  3628  1F1F                     	;# 
  3629  1F20                     	;# 
  3630  1F21                     	;# 
  3631  1F22                     	;# 
  3632  1F23                     	;# 
  3633  1F24                     	;# 
  3634  1F25                     	;# 
  3635  1F26                     	;# 
  3636  1F27                     	;# 
  3637  1F38                     	;# 
  3638  1F39                     	;# 
  3639  1F3A                     	;# 
  3640  1F3B                     	;# 
  3641  1F3C                     	;# 
  3642  1F3D                     	;# 
  3643  1F3E                     	;# 
  3644  1F3F                     	;# 
  3645  1F43                     	;# 
  3646  1F44                     	;# 
  3647  1F45                     	;# 
  3648  1F46                     	;# 
  3649  1F47                     	;# 
  3650  1F48                     	;# 
  3651  1F49                     	;# 
  3652  1F4A                     	;# 
  3653  1F4E                     	;# 
  3654  1F4F                     	;# 
  3655  1F50                     	;# 
  3656  1F51                     	;# 
  3657  1F52                     	;# 
  3658  1F53                     	;# 
  3659  1F54                     	;# 
  3660  1F55                     	;# 
  3661  1F65                     	;# 
  3662  1F68                     	;# 
  3663  1F69                     	;# 
  3664  1F6A                     	;# 
  3665  1F6B                     	;# 
  3666  1FE4                     	;# 
  3667  1FE5                     	;# 
  3668  1FE6                     	;# 
  3669  1FE7                     	;# 
  3670  1FE8                     	;# 
  3671  1FE8                     	;# 
  3672  1FE9                     	;# 
  3673  1FEA                     	;# 
  3674  1FEB                     	;# 
  3675  1FED                     	;# 
  3676  1FEE                     	;# 
  3677  1FEF                     	;# 
  3678  0000                     	;# 
  3679  0001                     	;# 
  3680  0002                     	;# 
  3681  0003                     	;# 
  3682  0004                     	;# 
  3683  0005                     	;# 
  3684  0006                     	;# 
  3685  0007                     	;# 
  3686  0008                     	;# 
  3687  0009                     	;# 
  3688  000A                     	;# 
  3689  000B                     	;# 
  3690  000C                     	;# 
  3691  000D                     	;# 
  3692  000E                     	;# 
  3693  0010                     	;# 
  3694  0012                     	;# 
  3695  0013                     	;# 
  3696  0014                     	;# 
  3697  0016                     	;# 
  3698  0018                     	;# 
  3699  0019                     	;# 
  3700  001A                     	;# 
  3701  009B                     	;# 
  3702  009B                     	;# 
  3703  009C                     	;# 
  3704  009D                     	;# 
  3705  009E                     	;# 
  3706  009F                     	;# 
  3707  0119                     	;# 
  3708  0119                     	;# 
  3709  0119                     	;# 
  3710  011A                     	;# 
  3711  011A                     	;# 
  3712  011A                     	;# 
  3713  011B                     	;# 
  3714  011B                     	;# 
  3715  011B                     	;# 
  3716  011B                     	;# 
  3717  011B                     	;# 
  3718  011C                     	;# 
  3719  011C                     	;# 
  3720  011C                     	;# 
  3721  011D                     	;# 
  3722  011D                     	;# 
  3723  011D                     	;# 
  3724  011E                     	;# 
  3725  011E                     	;# 
  3726  011E                     	;# 
  3727  011F                     	;# 
  3728  011F                     	;# 
  3729  011F                     	;# 
  3730  011F                     	;# 
  3731  011F                     	;# 
  3732  018C                     	;# 
  3733  018D                     	;# 
  3734  018E                     	;# 
  3735  018F                     	;# 
  3736  0190                     	;# 
  3737  0191                     	;# 
  3738  0192                     	;# 
  3739  0196                     	;# 
  3740  0197                     	;# 
  3741  0198                     	;# 
  3742  0199                     	;# 
  3743  019A                     	;# 
  3744  019B                     	;# 
  3745  019C                     	;# 
  3746  020C                     	;# 
  3747  020C                     	;# 
  3748  020D                     	;# 
  3749  020E                     	;# 
  3750  020F                     	;# 
  3751  020F                     	;# 
  3752  0210                     	;# 
  3753  0210                     	;# 
  3754  0211                     	;# 
  3755  0211                     	;# 
  3756  028C                     	;# 
  3757  028C                     	;# 
  3758  028D                     	;# 
  3759  028D                     	;# 
  3760  028E                     	;# 
  3761  028F                     	;# 
  3762  0290                     	;# 
  3763  0291                     	;# 
  3764  030C                     	;# 
  3765  030C                     	;# 
  3766  030D                     	;# 
  3767  030E                     	;# 
  3768  030F                     	;# 
  3769  0310                     	;# 
  3770  0310                     	;# 
  3771  0311                     	;# 
  3772  0312                     	;# 
  3773  0313                     	;# 
  3774  0314                     	;# 
  3775  0314                     	;# 
  3776  0315                     	;# 
  3777  0316                     	;# 
  3778  0318                     	;# 
  3779  0318                     	;# 
  3780  0319                     	;# 
  3781  031A                     	;# 
  3782  031C                     	;# 
  3783  031C                     	;# 
  3784  031D                     	;# 
  3785  031E                     	;# 
  3786  038C                     	;# 
  3787  038C                     	;# 
  3788  038D                     	;# 
  3789  038E                     	;# 
  3790  058C                     	;# 
  3791  058C                     	;# 
  3792  058D                     	;# 
  3793  058E                     	;# 
  3794  058F                     	;# 
  3795  058F                     	;# 
  3796  0590                     	;# 
  3797  0591                     	;# 
  3798  0592                     	;# 
  3799  0593                     	;# 
  3800  059C                     	;# 
  3801  059C                     	;# 
  3802  059D                     	;# 
  3803  059D                     	;# 
  3804  059E                     	;# 
  3805  059F                     	;# 
  3806  060C                     	;# 
  3807  060D                     	;# 
  3808  060E                     	;# 
  3809  060F                     	;# 
  3810  0610                     	;# 
  3811  0611                     	;# 
  3812  0612                     	;# 
  3813  0613                     	;# 
  3814  0614                     	;# 
  3815  070C                     	;# 
  3816  070D                     	;# 
  3817  070E                     	;# 
  3818  070F                     	;# 
  3819  0710                     	;# 
  3820  0711                     	;# 
  3821  0712                     	;# 
  3822  0713                     	;# 
  3823  0716                     	;# 
  3824  0717                     	;# 
  3825  0718                     	;# 
  3826  0719                     	;# 
  3827  071A                     	;# 
  3828  071B                     	;# 
  3829  071C                     	;# 
  3830  071D                     	;# 
  3831  0796                     	;# 
  3832  0797                     	;# 
  3833  0798                     	;# 
  3834  0799                     	;# 
  3835  079A                     	;# 
  3836  079B                     	;# 
  3837  080C                     	;# 
  3838  080D                     	;# 
  3839  080E                     	;# 
  3840  080F                     	;# 
  3841  0810                     	;# 
  3842  0811                     	;# 
  3843  0812                     	;# 
  3844  0813                     	;# 
  3845  0814                     	;# 
  3846  081A                     	;# 
  3847  081A                     	;# 
  3848  081B                     	;# 
  3849  081C                     	;# 
  3850  081C                     	;# 
  3851  081D                     	;# 
  3852  081E                     	;# 
  3853  081F                     	;# 
  3854  088C                     	;# 
  3855  088D                     	;# 
  3856  088E                     	;# 
  3857  088F                     	;# 
  3858  0890                     	;# 
  3859  0891                     	;# 
  3860  0892                     	;# 
  3861  0893                     	;# 
  3862  0895                     	;# 
  3863  0896                     	;# 
  3864  090C                     	;# 
  3865  090E                     	;# 
  3866  090F                     	;# 
  3867  091F                     	;# 
  3868  098F                     	;# 
  3869  098F                     	;# 
  3870  0990                     	;# 
  3871  0991                     	;# 
  3872  0992                     	;# 
  3873  0993                     	;# 
  3874  0994                     	;# 
  3875  0995                     	;# 
  3876  0996                     	;# 
  3877  0997                     	;# 
  3878  0A19                     	;# 
  3879  0A19                     	;# 
  3880  0A1A                     	;# 
  3881  0A1A                     	;# 
  3882  0A1B                     	;# 
  3883  0A1B                     	;# 
  3884  0A1B                     	;# 
  3885  0A1C                     	;# 
  3886  0A1C                     	;# 
  3887  0A1D                     	;# 
  3888  0A1D                     	;# 
  3889  0A1E                     	;# 
  3890  0A1E                     	;# 
  3891  0A1F                     	;# 
  3892  0A1F                     	;# 
  3893  0A1F                     	;# 
  3894  1E0F                     	;# 
  3895  1E10                     	;# 
  3896  1E11                     	;# 
  3897  1E12                     	;# 
  3898  1E13                     	;# 
  3899  1E14                     	;# 
  3900  1E15                     	;# 
  3901  1E16                     	;# 
  3902  1E17                     	;# 
  3903  1E18                     	;# 
  3904  1E19                     	;# 
  3905  1E1A                     	;# 
  3906  1E1B                     	;# 
  3907  1E1C                     	;# 
  3908  1E1D                     	;# 
  3909  1E1E                     	;# 
  3910  1E1F                     	;# 
  3911  1E20                     	;# 
  3912  1E21                     	;# 
  3913  1E22                     	;# 
  3914  1E23                     	;# 
  3915  1E24                     	;# 
  3916  1E25                     	;# 
  3917  1E26                     	;# 
  3918  1E27                     	;# 
  3919  1E28                     	;# 
  3920  1E29                     	;# 
  3921  1E2A                     	;# 
  3922  1E2B                     	;# 
  3923  1E2C                     	;# 
  3924  1E2D                     	;# 
  3925  1E2E                     	;# 
  3926  1E2F                     	;# 
  3927  1E30                     	;# 
  3928  1E31                     	;# 
  3929  1E32                     	;# 
  3930  1E33                     	;# 
  3931  1E34                     	;# 
  3932  1E35                     	;# 
  3933  1E36                     	;# 
  3934  1E37                     	;# 
  3935  1E8F                     	;# 
  3936  1E90                     	;# 
  3937  1E91                     	;# 
  3938  1E92                     	;# 
  3939  1E93                     	;# 
  3940  1E9C                     	;# 
  3941  1EA1                     	;# 
  3942  1EA2                     	;# 
  3943  1EB1                     	;# 
  3944  1EBB                     	;# 
  3945  1EBC                     	;# 
  3946  1EBD                     	;# 
  3947  1EBE                     	;# 
  3948  1EC3                     	;# 
  3949  1EC5                     	;# 
  3950  1EC6                     	;# 
  3951  1EC7                     	;# 
  3952  1EC8                     	;# 
  3953  1EC9                     	;# 
  3954  1ECA                     	;# 
  3955  1ECB                     	;# 
  3956  1ECC                     	;# 
  3957  1ECD                     	;# 
  3958  1ECE                     	;# 
  3959  1F10                     	;# 
  3960  1F11                     	;# 
  3961  1F12                     	;# 
  3962  1F13                     	;# 
  3963  1F14                     	;# 
  3964  1F15                     	;# 
  3965  1F16                     	;# 
  3966  1F17                     	;# 
  3967  1F18                     	;# 
  3968  1F19                     	;# 
  3969  1F1A                     	;# 
  3970  1F1B                     	;# 
  3971  1F1C                     	;# 
  3972  1F1D                     	;# 
  3973  1F1E                     	;# 
  3974  1F1F                     	;# 
  3975  1F20                     	;# 
  3976  1F21                     	;# 
  3977  1F22                     	;# 
  3978  1F23                     	;# 
  3979  1F24                     	;# 
  3980  1F25                     	;# 
  3981  1F26                     	;# 
  3982  1F27                     	;# 
  3983  1F38                     	;# 
  3984  1F39                     	;# 
  3985  1F3A                     	;# 
  3986  1F3B                     	;# 
  3987  1F3C                     	;# 
  3988  1F3D                     	;# 
  3989  1F3E                     	;# 
  3990  1F3F                     	;# 
  3991  1F43                     	;# 
  3992  1F44                     	;# 
  3993  1F45                     	;# 
  3994  1F46                     	;# 
  3995  1F47                     	;# 
  3996  1F48                     	;# 
  3997  1F49                     	;# 
  3998  1F4A                     	;# 
  3999  1F4E                     	;# 
  4000  1F4F                     	;# 
  4001  1F50                     	;# 
  4002  1F51                     	;# 
  4003  1F52                     	;# 
  4004  1F53                     	;# 
  4005  1F54                     	;# 
  4006  1F55                     	;# 
  4007  1F65                     	;# 
  4008  1F68                     	;# 
  4009  1F69                     	;# 
  4010  1F6A                     	;# 
  4011  1F6B                     	;# 
  4012  1FE4                     	;# 
  4013  1FE5                     	;# 
  4014  1FE6                     	;# 
  4015  1FE7                     	;# 
  4016  1FE8                     	;# 
  4017  1FE8                     	;# 
  4018  1FE9                     	;# 
  4019  1FEA                     	;# 
  4020  1FEB                     	;# 
  4021  1FED                     	;# 
  4022  1FEE                     	;# 
  4023  1FEF                     	;# 
  4024  0000                     	;# 
  4025  0001                     	;# 
  4026  0002                     	;# 
  4027  0003                     	;# 
  4028  0004                     	;# 
  4029  0005                     	;# 
  4030  0006                     	;# 
  4031  0007                     	;# 
  4032  0008                     	;# 
  4033  0009                     	;# 
  4034  000A                     	;# 
  4035  000B                     	;# 
  4036  000C                     	;# 
  4037  000D                     	;# 
  4038  000E                     	;# 
  4039  0010                     	;# 
  4040  0012                     	;# 
  4041  0013                     	;# 
  4042  0014                     	;# 
  4043  0016                     	;# 
  4044  0018                     	;# 
  4045  0019                     	;# 
  4046  001A                     	;# 
  4047  009B                     	;# 
  4048  009B                     	;# 
  4049  009C                     	;# 
  4050  009D                     	;# 
  4051  009E                     	;# 
  4052  009F                     	;# 
  4053  0119                     	;# 
  4054  0119                     	;# 
  4055  0119                     	;# 
  4056  011A                     	;# 
  4057  011A                     	;# 
  4058  011A                     	;# 
  4059  011B                     	;# 
  4060  011B                     	;# 
  4061  011B                     	;# 
  4062  011B                     	;# 
  4063  011B                     	;# 
  4064  011C                     	;# 
  4065  011C                     	;# 
  4066  011C                     	;# 
  4067  011D                     	;# 
  4068  011D                     	;# 
  4069  011D                     	;# 
  4070  011E                     	;# 
  4071  011E                     	;# 
  4072  011E                     	;# 
  4073  011F                     	;# 
  4074  011F                     	;# 
  4075  011F                     	;# 
  4076  011F                     	;# 
  4077  011F                     	;# 
  4078  018C                     	;# 
  4079  018D                     	;# 
  4080  018E                     	;# 
  4081  018F                     	;# 
  4082  0190                     	;# 
  4083  0191                     	;# 
  4084  0192                     	;# 
  4085  0196                     	;# 
  4086  0197                     	;# 
  4087  0198                     	;# 
  4088  0199                     	;# 
  4089  019A                     	;# 
  4090  019B                     	;# 
  4091  019C                     	;# 
  4092  020C                     	;# 
  4093  020C                     	;# 
  4094  020D                     	;# 
  4095  020E                     	;# 
  4096  020F                     	;# 
  4097  020F                     	;# 
  4098  0210                     	;# 
  4099  0210                     	;# 
  4100  0211                     	;# 
  4101  0211                     	;# 
  4102  028C                     	;# 
  4103  028C                     	;# 
  4104  028D                     	;# 
  4105  028D                     	;# 
  4106  028E                     	;# 
  4107  028F                     	;# 
  4108  0290                     	;# 
  4109  0291                     	;# 
  4110  030C                     	;# 
  4111  030C                     	;# 
  4112  030D                     	;# 
  4113  030E                     	;# 
  4114  030F                     	;# 
  4115  0310                     	;# 
  4116  0310                     	;# 
  4117  0311                     	;# 
  4118  0312                     	;# 
  4119  0313                     	;# 
  4120  0314                     	;# 
  4121  0314                     	;# 
  4122  0315                     	;# 
  4123  0316                     	;# 
  4124  0318                     	;# 
  4125  0318                     	;# 
  4126  0319                     	;# 
  4127  031A                     	;# 
  4128  031C                     	;# 
  4129  031C                     	;# 
  4130  031D                     	;# 
  4131  031E                     	;# 
  4132  038C                     	;# 
  4133  038C                     	;# 
  4134  038D                     	;# 
  4135  038E                     	;# 
  4136  058C                     	;# 
  4137  058C                     	;# 
  4138  058D                     	;# 
  4139  058E                     	;# 
  4140  058F                     	;# 
  4141  058F                     	;# 
  4142  0590                     	;# 
  4143  0591                     	;# 
  4144  0592                     	;# 
  4145  0593                     	;# 
  4146  059C                     	;# 
  4147  059C                     	;# 
  4148  059D                     	;# 
  4149  059D                     	;# 
  4150  059E                     	;# 
  4151  059F                     	;# 
  4152  060C                     	;# 
  4153  060D                     	;# 
  4154  060E                     	;# 
  4155  060F                     	;# 
  4156  0610                     	;# 
  4157  0611                     	;# 
  4158  0612                     	;# 
  4159  0613                     	;# 
  4160  0614                     	;# 
  4161  070C                     	;# 
  4162  070D                     	;# 
  4163  070E                     	;# 
  4164  070F                     	;# 
  4165  0710                     	;# 
  4166  0711                     	;# 
  4167  0712                     	;# 
  4168  0713                     	;# 
  4169  0716                     	;# 
  4170  0717                     	;# 
  4171  0718                     	;# 
  4172  0719                     	;# 
  4173  071A                     	;# 
  4174  071B                     	;# 
  4175  071C                     	;# 
  4176  071D                     	;# 
  4177  0796                     	;# 
  4178  0797                     	;# 
  4179  0798                     	;# 
  4180  0799                     	;# 
  4181  079A                     	;# 
  4182  079B                     	;# 
  4183  080C                     	;# 
  4184  080D                     	;# 
  4185  080E                     	;# 
  4186  080F                     	;# 
  4187  0810                     	;# 
  4188  0811                     	;# 
  4189  0812                     	;# 
  4190  0813                     	;# 
  4191  0814                     	;# 
  4192  081A                     	;# 
  4193  081A                     	;# 
  4194  081B                     	;# 
  4195  081C                     	;# 
  4196  081C                     	;# 
  4197  081D                     	;# 
  4198  081E                     	;# 
  4199  081F                     	;# 
  4200  088C                     	;# 
  4201  088D                     	;# 
  4202  088E                     	;# 
  4203  088F                     	;# 
  4204  0890                     	;# 
  4205  0891                     	;# 
  4206  0892                     	;# 
  4207  0893                     	;# 
  4208  0895                     	;# 
  4209  0896                     	;# 
  4210  090C                     	;# 
  4211  090E                     	;# 
  4212  090F                     	;# 
  4213  091F                     	;# 
  4214  098F                     	;# 
  4215  098F                     	;# 
  4216  0990                     	;# 
  4217  0991                     	;# 
  4218  0992                     	;# 
  4219  0993                     	;# 
  4220  0994                     	;# 
  4221  0995                     	;# 
  4222  0996                     	;# 
  4223  0997                     	;# 
  4224  0A19                     	;# 
  4225  0A19                     	;# 
  4226  0A1A                     	;# 
  4227  0A1A                     	;# 
  4228  0A1B                     	;# 
  4229  0A1B                     	;# 
  4230  0A1B                     	;# 
  4231  0A1C                     	;# 
  4232  0A1C                     	;# 
  4233  0A1D                     	;# 
  4234  0A1D                     	;# 
  4235  0A1E                     	;# 
  4236  0A1E                     	;# 
  4237  0A1F                     	;# 
  4238  0A1F                     	;# 
  4239  0A1F                     	;# 
  4240  1E0F                     	;# 
  4241  1E10                     	;# 
  4242  1E11                     	;# 
  4243  1E12                     	;# 
  4244  1E13                     	;# 
  4245  1E14                     	;# 
  4246  1E15                     	;# 
  4247  1E16                     	;# 
  4248  1E17                     	;# 
  4249  1E18                     	;# 
  4250  1E19                     	;# 
  4251  1E1A                     	;# 
  4252  1E1B                     	;# 
  4253  1E1C                     	;# 
  4254  1E1D                     	;# 
  4255  1E1E                     	;# 
  4256  1E1F                     	;# 
  4257  1E20                     	;# 
  4258  1E21                     	;# 
  4259  1E22                     	;# 
  4260  1E23                     	;# 
  4261  1E24                     	;# 
  4262  1E25                     	;# 
  4263  1E26                     	;# 
  4264  1E27                     	;# 
  4265  1E28                     	;# 
  4266  1E29                     	;# 
  4267  1E2A                     	;# 
  4268  1E2B                     	;# 
  4269  1E2C                     	;# 
  4270  1E2D                     	;# 
  4271  1E2E                     	;# 
  4272  1E2F                     	;# 
  4273  1E30                     	;# 
  4274  1E31                     	;# 
  4275  1E32                     	;# 
  4276  1E33                     	;# 
  4277  1E34                     	;# 
  4278  1E35                     	;# 
  4279  1E36                     	;# 
  4280  1E37                     	;# 
  4281  1E8F                     	;# 
  4282  1E90                     	;# 
  4283  1E91                     	;# 
  4284  1E92                     	;# 
  4285  1E93                     	;# 
  4286  1E9C                     	;# 
  4287  1EA1                     	;# 
  4288  1EA2                     	;# 
  4289  1EB1                     	;# 
  4290  1EBB                     	;# 
  4291  1EBC                     	;# 
  4292  1EBD                     	;# 
  4293  1EBE                     	;# 
  4294  1EC3                     	;# 
  4295  1EC5                     	;# 
  4296  1EC6                     	;# 
  4297  1EC7                     	;# 
  4298  1EC8                     	;# 
  4299  1EC9                     	;# 
  4300  1ECA                     	;# 
  4301  1ECB                     	;# 
  4302  1ECC                     	;# 
  4303  1ECD                     	;# 
  4304  1ECE                     	;# 
  4305  1F10                     	;# 
  4306  1F11                     	;# 
  4307  1F12                     	;# 
  4308  1F13                     	;# 
  4309  1F14                     	;# 
  4310  1F15                     	;# 
  4311  1F16                     	;# 
  4312  1F17                     	;# 
  4313  1F18                     	;# 
  4314  1F19                     	;# 
  4315  1F1A                     	;# 
  4316  1F1B                     	;# 
  4317  1F1C                     	;# 
  4318  1F1D                     	;# 
  4319  1F1E                     	;# 
  4320  1F1F                     	;# 
  4321  1F20                     	;# 
  4322  1F21                     	;# 
  4323  1F22                     	;# 
  4324  1F23                     	;# 
  4325  1F24                     	;# 
  4326  1F25                     	;# 
  4327  1F26                     	;# 
  4328  1F27                     	;# 
  4329  1F38                     	;# 
  4330  1F39                     	;# 
  4331  1F3A                     	;# 
  4332  1F3B                     	;# 
  4333  1F3C                     	;# 
  4334  1F3D                     	;# 
  4335  1F3E                     	;# 
  4336  1F3F                     	;# 
  4337  1F43                     	;# 
  4338  1F44                     	;# 
  4339  1F45                     	;# 
  4340  1F46                     	;# 
  4341  1F47                     	;# 
  4342  1F48                     	;# 
  4343  1F49                     	;# 
  4344  1F4A                     	;# 
  4345  1F4E                     	;# 
  4346  1F4F                     	;# 
  4347  1F50                     	;# 
  4348  1F51                     	;# 
  4349  1F52                     	;# 
  4350  1F53                     	;# 
  4351  1F54                     	;# 
  4352  1F55                     	;# 
  4353  1F65                     	;# 
  4354  1F68                     	;# 
  4355  1F69                     	;# 
  4356  1F6A                     	;# 
  4357  1F6B                     	;# 
  4358  1FE4                     	;# 
  4359  1FE5                     	;# 
  4360  1FE6                     	;# 
  4361  1FE7                     	;# 
  4362  1FE8                     	;# 
  4363  1FE8                     	;# 
  4364  1FE9                     	;# 
  4365  1FEA                     	;# 
  4366  1FEB                     	;# 
  4367  1FED                     	;# 
  4368  1FEE                     	;# 
  4369  1FEF                     	;_data
  4370                           
  4371                           	psect	idataBANK0
  4372  07FA                     __pidataBANK0:	
  4373                           
  4374                           ;initializer for _g_screenRefresh
  4375  07FA  3401               	retlw	1
  4376                           
  4377                           	psect	idataBANK3
  4378  07FB                     __pidataBANK3:	
  4379                           
  4380                           ;initializer for statusView@prevSensorStat
  4381  07FB  3401               	retlw	1
  4382                           
  4383                           	psect	idataBANK4
  4384  3EA4                     __pidataBANK4:	
  4385                           
  4386                           ;initializer for checkSensor@sensorUpdateInterval
  4387  3EA4  3464               	retlw	100
  4388  3EA5  3400               	retlw	0
  4389  3EA6  3400               	retlw	0
  4390  3EA7  3400               	retlw	0
  4391                           
  4392                           ;initializer for OLED_print_xy@F7898
  4393  3EA8  3400               	retlw	0
  4394  3EA9  3440               	retlw	64
  4395  3EAA  3414               	retlw	20
  4396  3EAB  3454               	retlw	84
  4397                           
  4398                           ;initializer for OLED_setCursor@F7890
  4399  3EAC  3400               	retlw	0
  4400  3EAD  3440               	retlw	64
  4401  3EAE  3414               	retlw	20
  4402  3EAF  3454               	retlw	84
  4403                           
  4404                           	psect	stringtext1
  4405  3800                     __pstringtext1:	
  4406  3800                     _nextStateTbl:	
  4407  3800  3400               	retlw	0
  4408  3801  34FF               	retlw	255
  4409  3802  3401               	retlw	1
  4410  3803  3405               	retlw	5
  4411  3804  3400               	retlw	0
  4412  3805  3400               	retlw	0
  4413  3806  3401               	retlw	1
  4414  3807  34FF               	retlw	255
  4415  3808  3400               	retlw	0
  4416  3809  3402               	retlw	2
  4417  380A  3401               	retlw	1
  4418  380B  3401               	retlw	1
  4419  380C  3402               	retlw	2
  4420  380D  3400               	retlw	0
  4421  380E  3403               	retlw	3
  4422  380F  3401               	retlw	1
  4423  3810  3401               	retlw	1
  4424  3811  3402               	retlw	2
  4425  3812  3402               	retlw	2
  4426  3813  3401               	retlw	1
  4427  3814  3404               	retlw	4
  4428  3815  3401               	retlw	1
  4429  3816  3401               	retlw	1
  4430  3817  3402               	retlw	2
  4431  3818  3402               	retlw	2
  4432  3819  3402               	retlw	2
  4433  381A  3402               	retlw	2
  4434  381B  3401               	retlw	1
  4435  381C  3401               	retlw	1
  4436  381D  3402               	retlw	2
  4437  381E  3403               	retlw	3
  4438  381F  3400               	retlw	0
  4439  3820  3402               	retlw	2
  4440  3821  3402               	retlw	2
  4441  3822  3402               	retlw	2
  4442  3823  3403               	retlw	3
  4443  3824  3403               	retlw	3
  4444  3825  3401               	retlw	1
  4445  3826  3402               	retlw	2
  4446  3827  3402               	retlw	2
  4447  3828  3402               	retlw	2
  4448  3829  3402               	retlw	2
  4449  382A  3404               	retlw	4
  4450  382B  3400               	retlw	0
  4451  382C  3402               	retlw	2
  4452  382D  3402               	retlw	2
  4453  382E  3402               	retlw	2
  4454  382F  3402               	retlw	2
  4455  3830  3404               	retlw	4
  4456  3831  3401               	retlw	1
  4457  3832  3402               	retlw	2
  4458  3833  3402               	retlw	2
  4459  3834  3402               	retlw	2
  4460  3835  3404               	retlw	4
  4461  3836  3405               	retlw	5
  4462  3837  3400               	retlw	0
  4463  3838  3406               	retlw	6
  4464  3839  3400               	retlw	0
  4465  383A  3400               	retlw	0
  4466  383B  3405               	retlw	5
  4467  383C  3405               	retlw	5
  4468  383D  3401               	retlw	1
  4469  383E  3407               	retlw	7
  4470  383F  3400               	retlw	0
  4471  3840  3400               	retlw	0
  4472  3841  3405               	retlw	5
  4473  3842  3405               	retlw	5
  4474  3843  3402               	retlw	2
  4475  3844  3408               	retlw	8
  4476  3845  3400               	retlw	0
  4477  3846  3400               	retlw	0
  4478  3847  3405               	retlw	5
  4479  3848  3406               	retlw	6
  4480  3849  3400               	retlw	0
  4481  384A  3406               	retlw	6
  4482  384B  3405               	retlw	5
  4483  384C  3405               	retlw	5
  4484  384D  3405               	retlw	5
  4485  384E  3406               	retlw	6
  4486  384F  3401               	retlw	1
  4487  3850  3405               	retlw	5
  4488  3851  3405               	retlw	5
  4489  3852  3405               	retlw	5
  4490  3853  3406               	retlw	6
  4491  3854  3407               	retlw	7
  4492  3855  3400               	retlw	0
  4493  3856  3407               	retlw	7
  4494  3857  3405               	retlw	5
  4495  3858  3405               	retlw	5
  4496  3859  3405               	retlw	5
  4497  385A  3407               	retlw	7
  4498  385B  3401               	retlw	1
  4499  385C  3405               	retlw	5
  4500  385D  3405               	retlw	5
  4501  385E  3405               	retlw	5
  4502  385F  3407               	retlw	7
  4503  3860  3408               	retlw	8
  4504  3861  3400               	retlw	0
  4505  3862  3408               	retlw	8
  4506  3863  3405               	retlw	5
  4507  3864  3405               	retlw	5
  4508  3865  3405               	retlw	5
  4509  3866  3408               	retlw	8
  4510  3867  3401               	retlw	1
  4511  3868  3405               	retlw	5
  4512  3869  3405               	retlw	5
  4513  386A  3405               	retlw	5
  4514  386B  3408               	retlw	8
  4515  386C                     __end_of_nextStateTbl:	
  4516                           
  4517                           	psect	stringtext2
  4518  38DC                     __pstringtext2:	
  4519  38DC                     _specialChars:	
  4520  38DC  3418               	retlw	24
  4521  38DD  3418               	retlw	24
  4522  38DE  3403               	retlw	3
  4523  38DF  3404               	retlw	4
  4524  38E0  3404               	retlw	4
  4525  38E1  3404               	retlw	4
  4526  38E2  3403               	retlw	3
  4527  38E3  3400               	retlw	0
  4528  38E4  3400               	retlw	0
  4529  38E5  3400               	retlw	0
  4530  38E6  3400               	retlw	0
  4531  38E7  3404               	retlw	4
  4532  38E8  3400               	retlw	0
  4533  38E9  3400               	retlw	0
  4534  38EA  3400               	retlw	0
  4535  38EB  3400               	retlw	0
  4536  38EC  3401               	retlw	1
  4537  38ED  3401               	retlw	1
  4538  38EE  3405               	retlw	5
  4539  38EF  3409               	retlw	9
  4540  38F0  341F               	retlw	31
  4541  38F1  3408               	retlw	8
  4542  38F2  3404               	retlw	4
  4543  38F3  3400               	retlw	0
  4544  38F4  3400               	retlw	0
  4545  38F5  3410               	retlw	16
  4546  38F6  3418               	retlw	24
  4547  38F7  341C               	retlw	28
  4548  38F8  3418               	retlw	24
  4549  38F9  3410               	retlw	16
  4550  38FA  3400               	retlw	0
  4551  38FB  3400               	retlw	0
  4552  38FC                     __end_of_specialChars:	
  4553                           
  4554                           	psect	stringtext3
  4555  38FC                     __pstringtext3:	
  4556  38FC                     _transition_table:	
  4557  38FC  3400               	retlw	0
  4558  38FD  3404               	retlw	4
  4559  38FE  3401               	retlw	1
  4560  38FF  3400               	retlw	0
  4561  3900  3482               	retlw	130
  4562  3901  3400               	retlw	0
  4563  3902  3401               	retlw	1
  4564  3903  3400               	retlw	0
  4565  3904  3402               	retlw	2
  4566  3905  3403               	retlw	3
  4567  3906  3401               	retlw	1
  4568  3907  3400               	retlw	0
  4569  3908  3402               	retlw	2
  4570  3909  3403               	retlw	3
  4571  390A  3400               	retlw	0
  4572  390B  3480               	retlw	128
  4573  390C  3445               	retlw	69
  4574  390D  3404               	retlw	4
  4575  390E  3400               	retlw	0
  4576  390F  3400               	retlw	0
  4577  3910  3405               	retlw	5
  4578  3911  3404               	retlw	4
  4579  3912  3406               	retlw	6
  4580  3913  3400               	retlw	0
  4581  3914  3405               	retlw	5
  4582  3915  3400               	retlw	0
  4583  3916  3406               	retlw	6
  4584  3917  3440               	retlw	64
  4585  3918                     __end_of_transition_table:	
  4586                           
  4587                           	psect	stringtext4
  4588  386C                     __pstringtext4:	
  4589  386C                     _stateFuncTbl:	
  4590  386C  3431               	retlw	low _statusView
  4591  386D  341C               	retlw	high _statusView
  4592  386E  344D               	retlw	low _channelView
  4593  386F  3411               	retlw	high _channelView
  4594  3870  34C7               	retlw	low _channelSetup
  4595  3871  3418               	retlw	high _channelSetup
  4596  3872  34ED               	retlw	low _setOutputPower
  4597  3873  3424               	retlw	high _setOutputPower
  4598  3874  346A               	retlw	low _setLensDia
  4599  3875  342B               	retlw	high _setLensDia
  4600  3876  3406               	retlw	low _setup
  4601  3877  3408               	retlw	high _setup
  4602  3878  340A               	retlw	low _setDPOffset
  4603  3879  3437               	retlw	high _setDPOffset
  4604  387A  34AC               	retlw	low _setSkyTemp
  4605  387B  3435               	retlw	high _setSkyTemp
  4606  387C  3420               	retlw	low _setFudgeFactor
  4607  387D  3436               	retlw	high _setFudgeFactor
  4608  387E                     __end_of_stateFuncTbl:	
  4609  0018                     _LATAbits	set	24
  4610  000B                     _INTCONbits	set	11
  4611  000E                     _PORTCbits	set	14
  4612  0014                     _TRISCbits	set	20
  4613  000B                     _INTCON	set	11
  4614  0018                     _LATA	set	24
  4615  0014                     _TRISC	set	20
  4616  0013                     _TRISB	set	19
  4617  0012                     _TRISA	set	18
  4618  000C                     _PORTAbits	set	12
  4619  001A                     _LATCbits	set	26
  4620  0019                     _LATBbits	set	25
  4621  009B                     _ADRESL	set	155
  4622  009C                     _ADRESH	set	156
  4623  009E                     _ADCON1	set	158
  4624  009D                     _ADCON0bits	set	157
  4625  0119                     _RC1REG	set	281
  4626  011D                     _RC1STAbits	set	285
  4627  011A                     _TX1REG	set	282
  4628  011E                     _TX1STA	set	286
  4629  011D                     _RC1STA	set	285
  4630  011B                     _SPBRGL	set	283
  4631  011F                     _BAUD1CON	set	287
  4632  020C                     _TMR1	set	524
  4633  0211                     _T1CLK	set	529
  4634  020E                     _T1CON	set	526
  4635  059C                     _TMR0	set	1436
  4636  059F                     _T0CON1	set	1439
  4637  059E                     _T0CON0	set	1438
  4638  070F                     _PIR3bits	set	1807
  4639  0719                     _PIE3bits	set	1817
  4640  0710                     _PIR4bits	set	1808
  4641  071A                     _PIE4bits	set	1818
  4642  070C                     _PIR0bits	set	1804
  4643  0716                     _PIE0bits	set	1814
  4644  071A                     _PIE4	set	1818
  4645  0719                     _PIE3	set	1817
  4646  0716                     _PIE0	set	1814
  4647  081F                     _NVMCON2	set	2079
  4648  081C                     _NVMDATL	set	2076
  4649  081D                     _NVMDATH	set	2077
  4650  081E                     _NVMCON1bits	set	2078
  4651  081B                     _NVMADRH	set	2075
  4652  081A                     _NVMADRL	set	2074
  4653  088F                     _OSCCON3bits	set	2191
  4654  088D                     _OSCCON1	set	2189
  4655  0893                     _OSCFRQ	set	2195
  4656  1ECB                     _RX1DTPPSbits	set	7883
  4657  1F3F                     _IOCAFbits	set	7999
  4658  1F54                     _IOCCN	set	8020
  4659  1F3E                     _IOCAN	set	7998
  4660  1F3D                     _IOCAP	set	7997
  4661  1F4E                     _ANSELC	set	8014
  4662  1F43                     _ANSELB	set	8003
  4663  1F38                     _ANSELA	set	7992
  4664  1F26                     _RC6PPS	set	7974
  4665  387E                     STR_1:	
  4666  387E  3454               	retlw	84	;'T'
  4667  387F  3465               	retlw	101	;'e'
  4668  3880  346D               	retlw	109	;'m'
  4669  3881  3470               	retlw	112	;'p'
  4670  3882  3465               	retlw	101	;'e'
  4671  3883  3472               	retlw	114	;'r'
  4672  3884  3461               	retlw	97	;'a'
  4673  3885  3474               	retlw	116	;'t'
  4674  3886  3475               	retlw	117	;'u'
  4675  3887  3472               	retlw	114	;'r'
  4676  3888  3465               	retlw	101	;'e'
  4677  3889  3420               	retlw	32	;' '
  4678  388A  3452               	retlw	82	;'R'
  4679  388B  3465               	retlw	101	;'e'
  4680  388C  346C               	retlw	108	;'l'
  4681  388D  342E               	retlw	46	;'.'
  4682  388E  3468               	retlw	104	;'h'
  4683  388F  3475               	retlw	117	;'u'
  4684  3890  346D               	retlw	109	;'m'
  4685  3891  3469               	retlw	105	;'i'
  4686  3892  3464               	retlw	100	;'d'
  4687  3893  3469               	retlw	105	;'i'
  4688  3894  3474               	retlw	116	;'t'
  4689  3895  3479               	retlw	121	;'y'
  4690  3896  3444               	retlw	68	;'D'
  4691  3897  3465               	retlw	101	;'e'
  4692  3898  3477               	retlw	119	;'w'
  4693  3899  3470               	retlw	112	;'p'
  4694  389A  346F               	retlw	111	;'o'
  4695  389B  3469               	retlw	105	;'i'
  4696  389C  346E               	retlw	110	;'n'
  4697  389D  3474               	retlw	116	;'t'
  4698  389E  3420               	retlw	32	;' '
  4699  389F  3420               	retlw	32	;' '
  4700  38A0  3420               	retlw	32	;' '
  4701  38A1  3420               	retlw	32	;' '
  4702  38A2  3442               	retlw	66	;'B'
  4703  38A3  3461               	retlw	97	;'a'
  4704  38A4  3474               	retlw	116	;'t'
  4705  38A5  342E               	retlw	46	;'.'
  4706  38A6  3420               	retlw	32	;' '
  4707  38A7  3420               	retlw	32	;' '
  4708  38A8  3420               	retlw	32	;' '
  4709  38A9  3450               	retlw	80	;'P'
  4710  38AA  346F               	retlw	111	;'o'
  4711  38AB  3477               	retlw	119	;'w'
  4712  38AC  3465               	retlw	101	;'e'
  4713  38AD  3472               	retlw	114	;'r'
  4714  38AE  3456               	retlw	86	;'V'
  4715  38AF  3465               	retlw	101	;'e'
  4716  38B0  3472               	retlw	114	;'r'
  4717  38B1  3473               	retlw	115	;'s'
  4718  38B2  3469               	retlw	105	;'i'
  4719  38B3  346F               	retlw	111	;'o'
  4720  38B4  346E               	retlw	110	;'n'
  4721  38B5  343A               	retlw	58	;':'
  4722  38B6  3400               	retlw	0
  4723                           
  4724                           	psect	stringtext5
  4725  38B7                     __pstringtext5:	
  4726  38B7                     STR_48:	
  4727  38B7  3444               	retlw	68	;'D'
  4728  38B8  3450               	retlw	80	;'P'
  4729  38B9  3420               	retlw	32	;' '
  4730  38BA  346F               	retlw	111	;'o'
  4731  38BB  3466               	retlw	102	;'f'
  4732  38BC  3466               	retlw	102	;'f'
  4733  38BD  3473               	retlw	115	;'s'
  4734  38BE  3465               	retlw	101	;'e'
  4735  38BF  3474               	retlw	116	;'t'
  4736  38C0  3420               	retlw	32	;' '
  4737  38C1  3420               	retlw	32	;' '
  4738  38C2  3420               	retlw	32	;' '
  4739  38C3  3453               	retlw	83	;'S'
  4740  38C4  346B               	retlw	107	;'k'
  4741  38C5  3479               	retlw	121	;'y'
  4742  38C6  3420               	retlw	32	;' '
  4743  38C7  3474               	retlw	116	;'t'
  4744  38C8  3465               	retlw	101	;'e'
  4745  38C9  346D               	retlw	109	;'m'
  4746  38CA  3470               	retlw	112	;'p'
  4747  38CB  342E               	retlw	46	;'.'
  4748  38CC  3420               	retlw	32	;' '
  4749  38CD  3420               	retlw	32	;' '
  4750  38CE  3420               	retlw	32	;' '
  4751  38CF  3446               	retlw	70	;'F'
  4752  38D0  3475               	retlw	117	;'u'
  4753  38D1  3464               	retlw	100	;'d'
  4754  38D2  3467               	retlw	103	;'g'
  4755  38D3  3465               	retlw	101	;'e'
  4756  38D4  3420               	retlw	32	;' '
  4757  38D5  3466               	retlw	102	;'f'
  4758  38D6  3461               	retlw	97	;'a'
  4759  38D7  3463               	retlw	99	;'c'
  4760  38D8  3474               	retlw	116	;'t'
  4761  38D9  346F               	retlw	111	;'o'
  4762  38DA  3472               	retlw	114	;'r'
  4763  38DB  3400               	retlw	0
  4764                           
  4765                           	psect	stringtext6
  4766  3930                     __pstringtext6:	
  4767  3930                     STR_62:	
  4768  3930  3448               	retlw	72	;'H'
  4769  3931  3465               	retlw	101	;'e'
  4770  3932  3461               	retlw	97	;'a'
  4771  3933  3474               	retlw	116	;'t'
  4772  3934  3465               	retlw	101	;'e'
  4773  3935  3472               	retlw	114	;'r'
  4774  3936  3420               	retlw	32	;' '
  4775  3937  3420               	retlw	32	;' '
  4776  3938  3420               	retlw	32	;' '
  4777  3939  3420               	retlw	32	;' '
  4778  393A  3420               	retlw	32	;' '
  4779  393B  3420               	retlw	32	;' '
  4780  393C  3400               	retlw	0
  4781                           
  4782                           	psect	stringtext7
  4783  393D                     __pstringtext7:	
  4784  393D                     STR_74:	
  4785  393D  3453               	retlw	83	;'S'
  4786  393E  3465               	retlw	101	;'e'
  4787  393F  346E               	retlw	110	;'n'
  4788  3940  3473               	retlw	115	;'s'
  4789  3941  346F               	retlw	111	;'o'
  4790  3942  3472               	retlw	114	;'r'
  4791  3943  3420               	retlw	32	;' '
  4792  3944  3420               	retlw	32	;' '
  4793  3945  3420               	retlw	32	;' '
  4794  3946  3420               	retlw	32	;' '
  4795  3947  3420               	retlw	32	;' '
  4796  3948  3420               	retlw	32	;' '
  4797  3949  3400               	retlw	0
  4798                           
  4799                           	psect	stringtext8
  4800  394A                     __pstringtext8:	
  4801  394A                     STR_64:	
  4802  394A  344F               	retlw	79	;'O'
  4803  394B  3475               	retlw	117	;'u'
  4804  394C  3474               	retlw	116	;'t'
  4805  394D  3470               	retlw	112	;'p'
  4806  394E  3475               	retlw	117	;'u'
  4807  394F  3474               	retlw	116	;'t'
  4808  3950  3420               	retlw	32	;' '
  4809  3951  3420               	retlw	32	;' '
  4810  3952  3420               	retlw	32	;' '
  4811  3953  3420               	retlw	32	;' '
  4812  3954  3420               	retlw	32	;' '
  4813  3955  3420               	retlw	32	;' '
  4814  3956  3400               	retlw	0
  4815                           
  4816                           	psect	stringtext9
  4817  3957                     __pstringtext9:	
  4818  3957                     STR_85:	
  4819  3957  3420               	retlw	32	;' '
  4820  3958  3420               	retlw	32	;' '
  4821  3959  3420               	retlw	32	;' '
  4822  395A  3420               	retlw	32	;' '
  4823  395B  343A               	retlw	58	;':'
  4824  395C  342D               	retlw	45	;'-'
  4825  395D  3429               	retlw	41	;')'
  4826  395E  3420               	retlw	32	;' '
  4827  395F  3420               	retlw	32	;' '
  4828  3960  3420               	retlw	32	;' '
  4829  3961  3420               	retlw	32	;' '
  4830  3962  3420               	retlw	32	;' '
  4831  3963  3400               	retlw	0
  4832                           
  4833                           	psect	stringtext10
  4834  3964                     __pstringtext10:	
  4835  3964                     STR_63:	
  4836  3964  3472               	retlw	114	;'r'
  4837  3965  3465               	retlw	101	;'e'
  4838  3966  346D               	retlw	109	;'m'
  4839  3967  346F               	retlw	111	;'o'
  4840  3968  3476               	retlw	118	;'v'
  4841  3969  3465               	retlw	101	;'e'
  4842  396A  3464               	retlw	100	;'d'
  4843  396B  3420               	retlw	32	;' '
  4844  396C  3420               	retlw	32	;' '
  4845  396D  3420               	retlw	32	;' '
  4846  396E  3420               	retlw	32	;' '
  4847  396F  3420               	retlw	32	;' '
  4848  3970  3400               	retlw	0
  4849                           
  4850                           	psect	stringtext11
  4851  3971                     __pstringtext11:	
  4852  3971                     STR_86:	
  4853  3971  3455               	retlw	85	;'U'
  4854  3972  346E               	retlw	110	;'n'
  4855  3973  346B               	retlw	107	;'k'
  4856  3974  346E               	retlw	110	;'n'
  4857  3975  346F               	retlw	111	;'o'
  4858  3976  3477               	retlw	119	;'w'
  4859  3977  346E               	retlw	110	;'n'
  4860  3978  3420               	retlw	32	;' '
  4861  3979  3420               	retlw	32	;' '
  4862  397A  3420               	retlw	32	;' '
  4863  397B  3420               	retlw	32	;' '
  4864  397C  3420               	retlw	32	;' '
  4865  397D  3400               	retlw	0
  4866                           
  4867                           	psect	stringtext12
  4868  397E                     __pstringtext12:	
  4869  397E                     STR_75:	
  4870  397E  3474               	retlw	116	;'t'
  4871  397F  3469               	retlw	105	;'i'
  4872  3980  346D               	retlw	109	;'m'
  4873  3981  3465               	retlw	101	;'e'
  4874  3982  346F               	retlw	111	;'o'
  4875  3983  3475               	retlw	117	;'u'
  4876  3984  3474               	retlw	116	;'t'
  4877  3985  3420               	retlw	32	;' '
  4878  3986  3420               	retlw	32	;' '
  4879  3987  3420               	retlw	32	;' '
  4880  3988  3420               	retlw	32	;' '
  4881  3989  3420               	retlw	32	;' '
  4882  398A  3400               	retlw	0
  4883                           
  4884                           	psect	stringtext13
  4885  398B                     __pstringtext13:	
  4886  398B                     STR_65:	
  4887  398B  3473               	retlw	115	;'s'
  4888  398C  3468               	retlw	104	;'h'
  4889  398D  346F               	retlw	111	;'o'
  4890  398E  3472               	retlw	114	;'r'
  4891  398F  3474               	retlw	116	;'t'
  4892  3990  3465               	retlw	101	;'e'
  4893  3991  3464               	retlw	100	;'d'
  4894  3992  3421               	retlw	33	;'!'
  4895  3993  3420               	retlw	32	;' '
  4896  3994  3420               	retlw	32	;' '
  4897  3995  3420               	retlw	32	;' '
  4898  3996  3420               	retlw	32	;' '
  4899  3997  3400               	retlw	0
  4900                           
  4901                           	psect	stringtext14
  4902  3998                     __pstringtext14:	
  4903  3998                     STR_73:	
  4904  3998  3474               	retlw	116	;'t'
  4905  3999  346F               	retlw	111	;'o'
  4906  399A  346F               	retlw	111	;'o'
  4907  399B  3420               	retlw	32	;' '
  4908  399C  346C               	retlw	108	;'l'
  4909  399D  346F               	retlw	111	;'o'
  4910  399E  3477               	retlw	119	;'w'
  4911  399F  3421               	retlw	33	;'!'
  4912  39A0  3420               	retlw	32	;' '
  4913  39A1  3420               	retlw	32	;' '
  4914  39A2  3420               	retlw	32	;' '
  4915  39A3  3420               	retlw	32	;' '
  4916  39A4  3400               	retlw	0
  4917                           
  4918                           	psect	stringtext15
  4919  39A5                     __pstringtext15:	
  4920  39A5                     STR_77:	
  4921  39A5  3463               	retlw	99	;'c'
  4922  39A6  3468               	retlw	104	;'h'
  4923  39A7  3465               	retlw	101	;'e'
  4924  39A8  3463               	retlw	99	;'c'
  4925  39A9  346B               	retlw	107	;'k'
  4926  39AA  3473               	retlw	115	;'s'
  4927  39AB  3475               	retlw	117	;'u'
  4928  39AC  346D               	retlw	109	;'m'
  4929  39AD  3420               	retlw	32	;' '
  4930  39AE  3420               	retlw	32	;' '
  4931  39AF  3420               	retlw	32	;' '
  4932  39B0  3420               	retlw	32	;' '
  4933  39B1  3400               	retlw	0
  4934                           
  4935                           	psect	stringtext16
  4936  39B2                     __pstringtext16:	
  4937  39B2                     STR_67:	
  4938  39B2  3464               	retlw	100	;'d'
  4939  39B3  3465               	retlw	101	;'e'
  4940  39B4  3474               	retlw	116	;'t'
  4941  39B5  3465               	retlw	101	;'e'
  4942  39B6  3463               	retlw	99	;'c'
  4943  39B7  3474               	retlw	116	;'t'
  4944  39B8  3465               	retlw	101	;'e'
  4945  39B9  3464               	retlw	100	;'d'
  4946  39BA  3421               	retlw	33	;'!'
  4947  39BB  3420               	retlw	32	;' '
  4948  39BC  3420               	retlw	32	;' '
  4949  39BD  3420               	retlw	32	;' '
  4950  39BE  3400               	retlw	0
  4951                           
  4952                           	psect	stringtext17
  4953  39BF                     __pstringtext17:	
  4954  39BF                     STR_71:	
  4955  39BF  3474               	retlw	116	;'t'
  4956  39C0  346F               	retlw	111	;'o'
  4957  39C1  346F               	retlw	111	;'o'
  4958  39C2  3420               	retlw	32	;' '
  4959  39C3  3468               	retlw	104	;'h'
  4960  39C4  3469               	retlw	105	;'i'
  4961  39C5  3467               	retlw	103	;'g'
  4962  39C6  3468               	retlw	104	;'h'
  4963  39C7  3421               	retlw	33	;'!'
  4964  39C8  3420               	retlw	32	;' '
  4965  39C9  3420               	retlw	32	;' '
  4966  39CA  3420               	retlw	32	;' '
  4967  39CB  3400               	retlw	0
  4968                           
  4969                           	psect	stringtext18
  4970  39CC                     __pstringtext18:	
  4971  39CC                     STR_87:	
  4972  39CC  3465               	retlw	101	;'e'
  4973  39CD  3472               	retlw	114	;'r'
  4974  39CE  3472               	retlw	114	;'r'
  4975  39CF  346F               	retlw	111	;'o'
  4976  39D0  3472               	retlw	114	;'r'
  4977  39D1  3420               	retlw	32	;' '
  4978  39D2  3463               	retlw	99	;'c'
  4979  39D3  346F               	retlw	111	;'o'
  4980  39D4  3464               	retlw	100	;'d'
  4981  39D5  3465               	retlw	101	;'e'
  4982  39D6  3420               	retlw	32	;' '
  4983  39D7  3420               	retlw	32	;' '
  4984  39D8  3400               	retlw	0
  4985                           
  4986                           	psect	stringtext19
  4987  39D9                     __pstringtext19:	
  4988  39D9                     STR_78:	
  4989  39D9  344F               	retlw	79	;'O'
  4990  39DA  3456               	retlw	86	;'V'
  4991  39DB  3445               	retlw	69	;'E'
  4992  39DC  3452               	retlw	82	;'R'
  4993  39DD  3443               	retlw	67	;'C'
  4994  39DE  3455               	retlw	85	;'U'
  4995  39DF  3452               	retlw	82	;'R'
  4996  39E0  3452               	retlw	82	;'R'
  4997  39E1  3445               	retlw	69	;'E'
  4998  39E2  344E               	retlw	78	;'N'
  4999  39E3  3454               	retlw	84	;'T'
  5000  39E4  3420               	retlw	32	;' '
  5001  39E5  3400               	retlw	0
  5002                           
  5003                           	psect	stringtext20
  5004  39E6                     __pstringtext20:	
  5005  39E6                     STR_84:	
  5006  39E6  344D               	retlw	77	;'M'
  5007  39E7  3465               	retlw	101	;'e'
  5008  39E8  346E               	retlw	110	;'n'
  5009  39E9  3475               	retlw	117	;'u'
  5010  39EA  3420               	retlw	32	;' '
  5011  39EB  3462               	retlw	98	;'b'
  5012  39EC  3472               	retlw	114	;'r'
  5013  39ED  346F               	retlw	111	;'o'
  5014  39EE  346B               	retlw	107	;'k'
  5015  39EF  3465               	retlw	101	;'e'
  5016  39F0  346E               	retlw	110	;'n'
  5017  39F1  3420               	retlw	32	;' '
  5018  39F2  3400               	retlw	0
  5019                           
  5020                           	psect	stringtext21
  5021  39F3                     __pstringtext21:	
  5022  39F3                     STR_66:	
  5023  39F3  344F               	retlw	79	;'O'
  5024  39F4  3476               	retlw	118	;'v'
  5025  39F5  3465               	retlw	101	;'e'
  5026  39F6  3472               	retlw	114	;'r'
  5027  39F7  3463               	retlw	99	;'c'
  5028  39F8  3475               	retlw	117	;'u'
  5029  39F9  3472               	retlw	114	;'r'
  5030  39FA  3472               	retlw	114	;'r'
  5031  39FB  3465               	retlw	101	;'e'
  5032  39FC  346E               	retlw	110	;'n'
  5033  39FD  3474               	retlw	116	;'t'
  5034  39FE  3420               	retlw	32	;' '
  5035  39FF  3400               	retlw	0
  5036                           
  5037                           	psect	stringtext22
  5038  3A00                     __pstringtext22:	
  5039  3A00                     STR_69:	
  5040  3A00  346F               	retlw	111	;'o'
  5041  3A01  3476               	retlw	118	;'v'
  5042  3A02  3465               	retlw	101	;'e'
  5043  3A03  3472               	retlw	114	;'r'
  5044  3A04  3463               	retlw	99	;'c'
  5045  3A05  3475               	retlw	117	;'u'
  5046  3A06  3472               	retlw	114	;'r'
  5047  3A07  3472               	retlw	114	;'r'
  5048  3A08  3465               	retlw	101	;'e'
  5049  3A09  346E               	retlw	110	;'n'
  5050  3A0A  3474               	retlw	116	;'t'
  5051  3A0B  3420               	retlw	32	;' '
  5052  3A0C  3400               	retlw	0
  5053                           
  5054                           	psect	stringtext23
  5055  3A0D                     __pstringtext23:	
  5056  3A0D                     STR_70:	
  5057  3A0D  3453               	retlw	83	;'S'
  5058  3A0E  3475               	retlw	117	;'u'
  5059  3A0F  3470               	retlw	112	;'p'
  5060  3A10  3470               	retlw	112	;'p'
  5061  3A11  346C               	retlw	108	;'l'
  5062  3A12  3479               	retlw	121	;'y'
  5063  3A13  3420               	retlw	32	;' '
  5064  3A14  3476               	retlw	118	;'v'
  5065  3A15  346F               	retlw	111	;'o'
  5066  3A16  346C               	retlw	108	;'l'
  5067  3A17  3474               	retlw	116	;'t'
  5068  3A18  342E               	retlw	46	;'.'
  5069  3A19  3400               	retlw	0
  5070                           
  5071                           	psect	stringtext24
  5072  3A1A                     __pstringtext24:	
  5073  3A1A                     STR_80:	
  5074  3A1A  3456               	retlw	86	;'V'
  5075  3A1B  344F               	retlw	79	;'O'
  5076  3A1C  344C               	retlw	76	;'L'
  5077  3A1D  3454               	retlw	84	;'T'
  5078  3A1E  3441               	retlw	65	;'A'
  5079  3A1F  3447               	retlw	71	;'G'
  5080  3A20  3445               	retlw	69	;'E'
  5081  3A21  3420               	retlw	32	;' '
  5082  3A22  3448               	retlw	72	;'H'
  5083  3A23  3449               	retlw	73	;'I'
  5084  3A24  3447               	retlw	71	;'G'
  5085  3A25  3448               	retlw	72	;'H'
  5086  3A26  3400               	retlw	0
  5087                           
  5088                           	psect	stringtext25
  5089  3A27                     __pstringtext25:	
  5090  3A27                     STR_79:	
  5091  3A27  3454               	retlw	84	;'T'
  5092  3A28  3455               	retlw	85	;'U'
  5093  3A29  3452               	retlw	82	;'R'
  5094  3A2A  344E               	retlw	78	;'N'
  5095  3A2B  3420               	retlw	32	;' '
  5096  3A2C  344F               	retlw	79	;'O'
  5097  3A2D  3446               	retlw	70	;'F'
  5098  3A2E  3446               	retlw	70	;'F'
  5099  3A2F  3420               	retlw	32	;' '
  5100  3A30  344E               	retlw	78	;'N'
  5101  3A31  344F               	retlw	79	;'O'
  5102  3A32  3457               	retlw	87	;'W'
  5103  3A33  3400               	retlw	0
  5104                           
  5105                           	psect	stringtext26
  5106  3A34                     __pstringtext26:	
  5107  3A34                     STR_76:	
  5108  3A34  3453               	retlw	83	;'S'
  5109  3A35  3465               	retlw	101	;'e'
  5110  3A36  346E               	retlw	110	;'n'
  5111  3A37  3473               	retlw	115	;'s'
  5112  3A38  346F               	retlw	111	;'o'
  5113  3A39  3472               	retlw	114	;'r'
  5114  3A3A  3420               	retlw	32	;' '
  5115  3A3B  3477               	retlw	119	;'w'
  5116  3A3C  3472               	retlw	114	;'r'
  5117  3A3D  346F               	retlw	111	;'o'
  5118  3A3E  346E               	retlw	110	;'n'
  5119  3A3F  3467               	retlw	103	;'g'
  5120  3A40  3400               	retlw	0
  5121                           
  5122                           	psect	stringtext27
  5123  3A41                     __pstringtext27:	
  5124  3A41                     STR_83:	
  5125  3A41  3450               	retlw	80	;'P'
  5126  3A42  346C               	retlw	108	;'l'
  5127  3A43  3465               	retlw	101	;'e'
  5128  3A44  3461               	retlw	97	;'a'
  5129  3A45  3473               	retlw	115	;'s'
  5130  3A46  3465               	retlw	101	;'e'
  5131  3A47  3420               	retlw	32	;' '
  5132  3A48  3463               	retlw	99	;'c'
  5133  3A49  3468               	retlw	104	;'h'
  5134  3A4A  3465               	retlw	101	;'e'
  5135  3A4B  3463               	retlw	99	;'c'
  5136  3A4C  346B               	retlw	107	;'k'
  5137  3A4D  3400               	retlw	0
  5138                           
  5139                           	psect	stringtext28
  5140  3A4E                     __pstringtext28:	
  5141  3A4E                     STR_28:	
  5142  3A4E  344E               	retlw	78	;'N'
  5143  3A4F  346F               	retlw	111	;'o'
  5144  3A50  3474               	retlw	116	;'t'
  5145  3A51  3420               	retlw	32	;' '
  5146  3A52  3420               	retlw	32	;' '
  5147  3A53  3420               	retlw	32	;' '
  5148  3A54  3420               	retlw	32	;' '
  5149  3A55  3420               	retlw	32	;' '
  5150  3A56  3420               	retlw	32	;' '
  5151  3A57  3420               	retlw	32	;' '
  5152  3A58  3420               	retlw	32	;' '
  5153  3A59  3420               	retlw	32	;' '
  5154  3A5A  3400               	retlw	0
  5155                           
  5156                           	psect	stringtext29
  5157  3A5B                     __pstringtext29:	
  5158  3A5B                     STR_32:	
  5159  3A5B  3452               	retlw	82	;'R'
  5160  3A5C  3465               	retlw	101	;'e'
  5161  3A5D  3473               	retlw	115	;'s'
  5162  3A5E  3465               	retlw	101	;'e'
  5163  3A5F  3474               	retlw	116	;'t'
  5164  3A60  3420               	retlw	32	;' '
  5165  3A61  3420               	retlw	32	;' '
  5166  3A62  3420               	retlw	32	;' '
  5167  3A63  3420               	retlw	32	;' '
  5168  3A64  3420               	retlw	32	;' '
  5169  3A65  3420               	retlw	32	;' '
  5170  3A66  3420               	retlw	32	;' '
  5171  3A67  3400               	retlw	0
  5172                           
  5173                           	psect	stringtext30
  5174  3A68                     __pstringtext30:	
  5175  3A68                     STR_30:	
  5176  3A68  3454               	retlw	84	;'T'
  5177  3A69  3465               	retlw	101	;'e'
  5178  3A6A  3473               	retlw	115	;'s'
  5179  3A6B  3474               	retlw	116	;'t'
  5180  3A6C  3469               	retlw	105	;'i'
  5181  3A6D  346E               	retlw	110	;'n'
  5182  3A6E  3467               	retlw	103	;'g'
  5183  3A6F  3420               	retlw	32	;' '
  5184  3A70  3420               	retlw	32	;' '
  5185  3A71  3420               	retlw	32	;' '
  5186  3A72  3420               	retlw	32	;' '
  5187  3A73  3420               	retlw	32	;' '
  5188  3A74  3400               	retlw	0
  5189                           
  5190                           	psect	stringtext31
  5191  3A75                     __pstringtext31:	
  5192  3A75                     STR_33:	
  5193  3A75  3463               	retlw	99	;'c'
  5194  3A76  3468               	retlw	104	;'h'
  5195  3A77  3461               	retlw	97	;'a'
  5196  3A78  346E               	retlw	110	;'n'
  5197  3A79  346E               	retlw	110	;'n'
  5198  3A7A  3465               	retlw	101	;'e'
  5199  3A7B  346C               	retlw	108	;'l'
  5200  3A7C  3420               	retlw	32	;' '
  5201  3A7D  3420               	retlw	32	;' '
  5202  3A7E  3420               	retlw	32	;' '
  5203  3A7F  3420               	retlw	32	;' '
  5204  3A80  3420               	retlw	32	;' '
  5205  3A81  3400               	retlw	0
  5206                           
  5207                           	psect	stringtext32
  5208  3A82                     __pstringtext32:	
  5209  3A82                     STR_19:	
  5210  3A82  3453               	retlw	83	;'S'
  5211  3A83  3468               	retlw	104	;'h'
  5212  3A84  346F               	retlw	111	;'o'
  5213  3A85  3472               	retlw	114	;'r'
  5214  3A86  3474               	retlw	116	;'t'
  5215  3A87  3465               	retlw	101	;'e'
  5216  3A88  3464               	retlw	100	;'d'
  5217  3A89  3421               	retlw	33	;'!'
  5218  3A8A  3420               	retlw	32	;' '
  5219  3A8B  3420               	retlw	32	;' '
  5220  3A8C  3420               	retlw	32	;' '
  5221  3A8D  3420               	retlw	32	;' '
  5222  3A8E  3400               	retlw	0
  5223                           
  5224                           	psect	stringtext33
  5225  3A8F                     __pstringtext33:	
  5226  3A8F                     STR_14:	
  5227  3A8F  3444               	retlw	68	;'D'
  5228  3A90  3469               	retlw	105	;'i'
  5229  3A91  3473               	retlw	115	;'s'
  5230  3A92  3461               	retlw	97	;'a'
  5231  3A93  3462               	retlw	98	;'b'
  5232  3A94  346C               	retlw	108	;'l'
  5233  3A95  3465               	retlw	101	;'e'
  5234  3A96  3464               	retlw	100	;'d'
  5235  3A97  3420               	retlw	32	;' '
  5236  3A98  3420               	retlw	32	;' '
  5237  3A99  3420               	retlw	32	;' '
  5238  3A9A  3420               	retlw	32	;' '
  5239  3A9B  3400               	retlw	0
  5240                           
  5241                           	psect	stringtext34
  5242  3A9C                     __pstringtext34:	
  5243  3A9C                     STR_31:	
  5244  3A9C  3468               	retlw	104	;'h'
  5245  3A9D  3465               	retlw	101	;'e'
  5246  3A9E  3461               	retlw	97	;'a'
  5247  3A9F  3474               	retlw	116	;'t'
  5248  3AA0  3465               	retlw	101	;'e'
  5249  3AA1  3472               	retlw	114	;'r'
  5250  3AA2  342E               	retlw	46	;'.'
  5251  3AA3  342E               	retlw	46	;'.'
  5252  3AA4  342E               	retlw	46	;'.'
  5253  3AA5  3420               	retlw	32	;' '
  5254  3AA6  3420               	retlw	32	;' '
  5255  3AA7  3420               	retlw	32	;' '
  5256  3AA8  3400               	retlw	0
  5257                           
  5258                           	psect	stringtext35
  5259  3AA9                     __pstringtext35:	
  5260  3AA9                     STR_56:	
  5261  3AA9  3453               	retlw	83	;'S'
  5262  3AAA  346B               	retlw	107	;'k'
  5263  3AAB  3479               	retlw	121	;'y'
  5264  3AAC  3420               	retlw	32	;' '
  5265  3AAD  3474               	retlw	116	;'t'
  5266  3AAE  3465               	retlw	101	;'e'
  5267  3AAF  346D               	retlw	109	;'m'
  5268  3AB0  3470               	retlw	112	;'p'
  5269  3AB1  342E               	retlw	46	;'.'
  5270  3AB2  3420               	retlw	32	;' '
  5271  3AB3  3420               	retlw	32	;' '
  5272  3AB4  3420               	retlw	32	;' '
  5273  3AB5  3400               	retlw	0
  5274                           
  5275                           	psect	stringtext36
  5276  3AB6                     __pstringtext36:	
  5277  3AB6                     STR_29:	
  5278  3AB6  3463               	retlw	99	;'c'
  5279  3AB7  346F               	retlw	111	;'o'
  5280  3AB8  346E               	retlw	110	;'n'
  5281  3AB9  346E               	retlw	110	;'n'
  5282  3ABA  3465               	retlw	101	;'e'
  5283  3ABB  3463               	retlw	99	;'c'
  5284  3ABC  3474               	retlw	116	;'t'
  5285  3ABD  3465               	retlw	101	;'e'
  5286  3ABE  3464               	retlw	100	;'d'
  5287  3ABF  3420               	retlw	32	;' '
  5288  3AC0  3420               	retlw	32	;' '
  5289  3AC1  3420               	retlw	32	;' '
  5290  3AC2  3400               	retlw	0
  5291                           
  5292                           	psect	stringtext37
  5293  3AC3                     __pstringtext37:	
  5294  3AC3                     STR_53:	
  5295  3AC3  3444               	retlw	68	;'D'
  5296  3AC4  3450               	retlw	80	;'P'
  5297  3AC5  3420               	retlw	32	;' '
  5298  3AC6  346F               	retlw	111	;'o'
  5299  3AC7  3466               	retlw	102	;'f'
  5300  3AC8  3466               	retlw	102	;'f'
  5301  3AC9  3473               	retlw	115	;'s'
  5302  3ACA  3465               	retlw	101	;'e'
  5303  3ACB  3474               	retlw	116	;'t'
  5304  3ACC  3420               	retlw	32	;' '
  5305  3ACD  3420               	retlw	32	;' '
  5306  3ACE  3420               	retlw	32	;' '
  5307  3ACF  3400               	retlw	0
  5308                           
  5309                           	psect	stringtext38
  5310  3AD0                     __pstringtext38:	
  5311  3AD0                     STR_34:	
  5312  3AD0  344C               	retlw	76	;'L'
  5313  3AD1  3465               	retlw	101	;'e'
  5314  3AD2  346E               	retlw	110	;'n'
  5315  3AD3  3473               	retlw	115	;'s'
  5316  3AD4  3420               	retlw	32	;' '
  5317  3AD5  3464               	retlw	100	;'d'
  5318  3AD6  3469               	retlw	105	;'i'
  5319  3AD7  3461               	retlw	97	;'a'
  5320  3AD8  346D               	retlw	109	;'m'
  5321  3AD9  342E               	retlw	46	;'.'
  5322  3ADA  3420               	retlw	32	;' '
  5323  3ADB  3420               	retlw	32	;' '
  5324  3ADC  3400               	retlw	0
  5325                           
  5326                           	psect	stringtext39
  5327  3ADD                     __pstringtext39:	
  5328  3ADD                     STR_43:	
  5329  3ADD  3448               	retlw	72	;'H'
  5330  3ADE  346F               	retlw	111	;'o'
  5331  3ADF  346C               	retlw	108	;'l'
  5332  3AE0  3464               	retlw	100	;'d'
  5333  3AE1  3420               	retlw	32	;' '
  5334  3AE2  3462               	retlw	98	;'b'
  5335  3AE3  3475               	retlw	117	;'u'
  5336  3AE4  3474               	retlw	116	;'t'
  5337  3AE5  3474               	retlw	116	;'t'
  5338  3AE6  346F               	retlw	111	;'o'
  5339  3AE7  346E               	retlw	110	;'n'
  5340  3AE8  3420               	retlw	32	;' '
  5341  3AE9  3400               	retlw	0
  5342                           
  5343                           	psect	stringtext40
  5344  3AEA                     __pstringtext40:	
  5345  3AEA                     STR_13:	
  5346  3AEA  3450               	retlw	80	;'P'
  5347  3AEB  346C               	retlw	108	;'l'
  5348  3AEC  3465               	retlw	101	;'e'
  5349  3AED  3461               	retlw	97	;'a'
  5350  3AEE  3473               	retlw	115	;'s'
  5351  3AEF  3465               	retlw	101	;'e'
  5352  3AF0  3420               	retlw	32	;' '
  5353  3AF1  3477               	retlw	119	;'w'
  5354  3AF2  3461               	retlw	97	;'a'
  5355  3AF3  3469               	retlw	105	;'i'
  5356  3AF4  3474               	retlw	116	;'t'
  5357  3AF5  3421               	retlw	33	;'!'
  5358  3AF6  3400               	retlw	0
  5359                           
  5360                           	psect	stringtext41
  5361  3AF7                     __pstringtext41:	
  5362  3AF7                     STR_20:	
  5363  3AF7  344F               	retlw	79	;'O'
  5364  3AF8  3476               	retlw	118	;'v'
  5365  3AF9  3465               	retlw	101	;'e'
  5366  3AFA  3472               	retlw	114	;'r'
  5367  3AFB  3463               	retlw	99	;'c'
  5368  3AFC  3475               	retlw	117	;'u'
  5369  3AFD  3472               	retlw	114	;'r'
  5370  3AFE  3472               	retlw	114	;'r'
  5371  3AFF  3465               	retlw	101	;'e'
  5372  3B00  346E               	retlw	110	;'n'
  5373  3B01  3474               	retlw	116	;'t'
  5374  3B02  3421               	retlw	33	;'!'
  5375  3B03  3400               	retlw	0
  5376                           
  5377                           	psect	stringtext42
  5378  3B04                     __pstringtext42:	
  5379  3B04                     STR_18:	
  5380  3B04  3444               	retlw	68	;'D'
  5381  3B05  3469               	retlw	105	;'i'
  5382  3B06  3473               	retlw	115	;'s'
  5383  3B07  3463               	retlw	99	;'c'
  5384  3B08  346F               	retlw	111	;'o'
  5385  3B09  346E               	retlw	110	;'n'
  5386  3B0A  346E               	retlw	110	;'n'
  5387  3B0B  3465               	retlw	101	;'e'
  5388  3B0C  3463               	retlw	99	;'c'
  5389  3B0D  3474               	retlw	116	;'t'
  5390  3B0E  3465               	retlw	101	;'e'
  5391  3B0F  3464               	retlw	100	;'d'
  5392  3B10  3400               	retlw	0
  5393                           
  5394                           	psect	stringtext43
  5395  3B11                     __pstringtext43:	
  5396  3B11                     STR_44:	
  5397  3B11  3474               	retlw	116	;'t'
  5398  3B12  346F               	retlw	111	;'o'
  5399  3B13  3420               	retlw	32	;' '
  5400  3B14  3472               	retlw	114	;'r'
  5401  3B15  3465               	retlw	101	;'e'
  5402  3B16  342D               	retlw	45	;'-'
  5403  3B17  3465               	retlw	101	;'e'
  5404  3B18  346E               	retlw	110	;'n'
  5405  3B19  3461               	retlw	97	;'a'
  5406  3B1A  3462               	retlw	98	;'b'
  5407  3B1B  346C               	retlw	108	;'l'
  5408  3B1C  3465               	retlw	101	;'e'
  5409  3B1D  3400               	retlw	0
  5410                           
  5411                           	psect	stringtext44
  5412  3B1E                     __pstringtext44:	
  5413  3B1E                     STR_21:	
  5414  3B1E  344F               	retlw	79	;'O'
  5415  3B1F  346E               	retlw	110	;'n'
  5416  3B20  3464               	retlw	100	;'d'
  5417  3B21  3472               	retlw	114	;'r'
  5418  3B22  3465               	retlw	101	;'e'
  5419  3B23  3453               	retlw	83	;'S'
  5420  3B24  3470               	retlw	112	;'p'
  5421  3B25  3465               	retlw	101	;'e'
  5422  3B26  3463               	retlw	99	;'c'
  5423  3B27  3469               	retlw	105	;'i'
  5424  3B28  3461               	retlw	97	;'a'
  5425  3B29  346C               	retlw	108	;'l'
  5426  3B2A  3400               	retlw	0
  5427                           
  5428                           	psect	stringtext45
  5429  3B2B                     __pstringtext45:	
  5430  3B2B                     STR_22:	
  5431  3B2B  344F               	retlw	79	;'O'
  5432  3B2C  3475               	retlw	117	;'u'
  5433  3B2D  3474               	retlw	116	;'t'
  5434  3B2E  3470               	retlw	112	;'p'
  5435  3B2F  3475               	retlw	117	;'u'
  5436  3B30  3474               	retlw	116	;'t'
  5437  3B31  3420               	retlw	32	;' '
  5438  3B32  3470               	retlw	112	;'p'
  5439  3B33  346F               	retlw	111	;'o'
  5440  3B34  3477               	retlw	119	;'w'
  5441  3B35  3465               	retlw	101	;'e'
  5442  3B36  3472               	retlw	114	;'r'
  5443  3B37  3400               	retlw	0
  5444                           
  5445                           	psect	stringtext46
  5446  3B44                     __pstringtext46:	
  5447  3B44                     STR_51:	
  5448  3B44  3401               	retlw	1
  5449  3B45  3420               	retlw	32	;' '
  5450  3B46  3420               	retlw	32	;' '
  5451  3B47  3420               	retlw	32	;' '
  5452  3B48  3420               	retlw	32	;' '
  5453  3B49  3420               	retlw	32	;' '
  5454  3B4A  3420               	retlw	32	;' '
  5455  3B4B  3420               	retlw	32	;' '
  5456  3B4C  3420               	retlw	32	;' '
  5457  3B4D  3400               	retlw	0
  5458                           
  5459                           	psect	stringtext47
  5460  3B4E                     __pstringtext47:	
  5461  3B4E                     STR_58:	
  5462  3B4E  3401               	retlw	1
  5463  3B4F  3420               	retlw	32	;' '
  5464  3B50  3403               	retlw	3
  5465  3B51  3420               	retlw	32	;' '
  5466  3B52  3420               	retlw	32	;' '
  5467  3B53  3420               	retlw	32	;' '
  5468  3B54  3420               	retlw	32	;' '
  5469  3B55  3420               	retlw	32	;' '
  5470  3B56  3400               	retlw	0
  5471                           
  5472                           	psect	stringtext48
  5473  3B57                     __pstringtext48:	
  5474  3B57                     STR_61:	
  5475  3B57  3420               	retlw	32	;' '
  5476  3B58  3403               	retlw	3
  5477  3B59  3420               	retlw	32	;' '
  5478  3B5A  3420               	retlw	32	;' '
  5479  3B5B  3420               	retlw	32	;' '
  5480  3B5C  3420               	retlw	32	;' '
  5481  3B5D  3420               	retlw	32	;' '
  5482  3B5E  3420               	retlw	32	;' '
  5483  3B5F  3400               	retlw	0
  5484                           
  5485                           	psect	stringtext49
  5486  3B60                     __pstringtext49:	
  5487  3B60                     STR_17:	
  5488  3B60  3457               	retlw	87	;'W'
  5489  3B61  3420               	retlw	32	;' '
  5490  3B62  346D               	retlw	109	;'m'
  5491  3B63  3461               	retlw	97	;'a'
  5492  3B64  346E               	retlw	110	;'n'
  5493  3B65  3475               	retlw	117	;'u'
  5494  3B66  3461               	retlw	97	;'a'
  5495  3B67  346C               	retlw	108	;'l'
  5496  3B68  3400               	retlw	0
  5497                           
  5498                           	psect	stringtext50
  5499  3B69                     __pstringtext50:	
  5500  3B69                     STR_47:	
  5501  3B69  3420               	retlw	32	;' '
  5502  3B6A  3469               	retlw	105	;'i'
  5503  3B6B  346E               	retlw	110	;'n'
  5504  3B6C  3463               	retlw	99	;'c'
  5505  3B6D  3468               	retlw	104	;'h'
  5506  3B6E  3420               	retlw	32	;' '
  5507  3B6F  3403               	retlw	3
  5508  3B70  3400               	retlw	0
  5509                           
  5510                           	psect	stringtext51
  5511  3B71                     __pstringtext51:	
  5512  3B71                     STR_42:	
  5513  3B71  3457               	retlw	87	;'W'
  5514  3B72  3420               	retlw	32	;' '
  5515  3B73  346D               	retlw	109	;'m'
  5516  3B74  3461               	retlw	97	;'a'
  5517  3B75  346E               	retlw	110	;'n'
  5518  3B76  342E               	retlw	46	;'.'
  5519  3B77  3403               	retlw	3
  5520  3B78  3400               	retlw	0
  5521                           
  5522                           	psect	stringtext52
  5523  3B79                     __pstringtext52:	
  5524  3B79                     STR_5:	
  5525  3B79  3401               	retlw	1
  5526  3B7A  3420               	retlw	32	;' '
  5527  3B7B  3420               	retlw	32	;' '
  5528  3B7C  3420               	retlw	32	;' '
  5529  3B7D  3420               	retlw	32	;' '
  5530  3B7E  3420               	retlw	32	;' '
  5531  3B7F  3420               	retlw	32	;' '
  5532  3B80  3400               	retlw	0
  5533                           
  5534                           	psect	stringtext53
  5535  3B81                     __pstringtext53:	
  5536  3B81                     STR_24:	
  5537  3B81  3420               	retlw	32	;' '
  5538  3B82  346F               	retlw	111	;'o'
  5539  3B83  3466               	retlw	102	;'f'
  5540  3B84  3466               	retlw	102	;'f'
  5541  3B85  3420               	retlw	32	;' '
  5542  3B86  3420               	retlw	32	;' '
  5543  3B87  3420               	retlw	32	;' '
  5544  3B88  3400               	retlw	0
  5545                           
  5546                           	psect	stringtext54
  5547  3B89                     __pstringtext54:	
  5548  3B89                     STR_35:	
  5549  3B89  3420               	retlw	32	;' '
  5550  3B8A  3469               	retlw	105	;'i'
  5551  3B8B  346E               	retlw	110	;'n'
  5552  3B8C  3463               	retlw	99	;'c'
  5553  3B8D  3468               	retlw	104	;'h'
  5554  3B8E  3420               	retlw	32	;' '
  5555  3B8F  3420               	retlw	32	;' '
  5556  3B90  3400               	retlw	0
  5557                           
  5558                           	psect	stringtext55
  5559  3B91                     __pstringtext55:	
  5560  3B91                     STR_26:	
  5561  3B91  3420               	retlw	32	;' '
  5562  3B92  3461               	retlw	97	;'a'
  5563  3B93  3475               	retlw	117	;'u'
  5564  3B94  3474               	retlw	116	;'t'
  5565  3B95  346F               	retlw	111	;'o'
  5566  3B96  3420               	retlw	32	;' '
  5567  3B97  3420               	retlw	32	;' '
  5568  3B98  3400               	retlw	0
  5569                           
  5570                           	psect	stringtext56
  5571  3B99                     __pstringtext56:	
  5572  3B99                     STR_2:	
  5573  3B99  3453               	retlw	83	;'S'
  5574  3B9A  3465               	retlw	101	;'e'
  5575  3B9B  346E               	retlw	110	;'n'
  5576  3B9C  3473               	retlw	115	;'s'
  5577  3B9D  346F               	retlw	111	;'o'
  5578  3B9E  3472               	retlw	114	;'r'
  5579  3B9F  343A               	retlw	58	;':'
  5580  3BA0  3400               	retlw	0
  5581                           
  5582                           	psect	stringtext57
  5583  3BA1                     __pstringtext57:	
  5584  3BA1                     STR_38:	
  5585  3BA1  3420               	retlw	32	;' '
  5586  3BA2  346F               	retlw	111	;'o'
  5587  3BA3  3466               	retlw	102	;'f'
  5588  3BA4  3466               	retlw	102	;'f'
  5589  3BA5  3420               	retlw	32	;' '
  5590  3BA6  3403               	retlw	3
  5591  3BA7  3400               	retlw	0
  5592                           
  5593                           	psect	stringtext58
  5594  3BA8                     __pstringtext58:	
  5595  3BA8                     STR_40:	
  5596  3BA8  3420               	retlw	32	;' '
  5597  3BA9  3461               	retlw	97	;'a'
  5598  3BAA  3475               	retlw	117	;'u'
  5599  3BAB  3474               	retlw	116	;'t'
  5600  3BAC  346F               	retlw	111	;'o'
  5601  3BAD  3403               	retlw	3
  5602  3BAE  3400               	retlw	0
  5603                           
  5604                           	psect	stringtext59
  5605  3BAF                     __pstringtext59:	
  5606  3BAF                     STR_54:	
  5607  3BAF  3474               	retlw	116	;'t'
  5608  3BB0  3465               	retlw	101	;'e'
  5609  3BB1  346D               	retlw	109	;'m'
  5610  3BB2  3470               	retlw	112	;'p'
  5611  3BB3  342E               	retlw	46	;'.'
  5612  3BB4  3404               	retlw	4
  5613  3BB5  3400               	retlw	0
  5614                           
  5615                           	psect	stringtext60
  5616  3BB6                     __pstringtext60:	
  5617  3BB6                     STR_6:	
  5618  3BB6  3425               	retlw	37	;'%'
  5619  3BB7  3420               	retlw	32	;' '
  5620  3BB8  3420               	retlw	32	;' '
  5621  3BB9  3420               	retlw	32	;' '
  5622  3BBA  3420               	retlw	32	;' '
  5623  3BBB  3420               	retlw	32	;' '
  5624  3BBC  3400               	retlw	0
  5625                           
  5626                           	psect	stringtext61
  5627  3BBD                     __pstringtext61:	
  5628  3BBD                     STR_49:	
  5629  3BBD  3474               	retlw	116	;'t'
  5630  3BBE  3465               	retlw	101	;'e'
  5631  3BBF  346D               	retlw	109	;'m'
  5632  3BC0  3470               	retlw	112	;'p'
  5633  3BC1  342E               	retlw	46	;'.'
  5634  3BC2  3420               	retlw	32	;' '
  5635  3BC3  3400               	retlw	0
  5636                           
  5637                           	psect	stringtext62
  5638  3BC4                     __pstringtext62:	
  5639  3BC4                     STR_37:	
  5640  3BC4  3404               	retlw	4
  5641  3BC5  3443               	retlw	67	;'C'
  5642  3BC6  3468               	retlw	104	;'h'
  5643  3BC7  342E               	retlw	46	;'.'
  5644  3BC8  3420               	retlw	32	;' '
  5645  3BC9  3400               	retlw	0
  5646                           
  5647                           	psect	stringtext63
  5648  3BCA                     __pstringtext63:	
  5649  3BCA                     STR_3:	
  5650  3BCA  3401               	retlw	1
  5651  3BCB  3420               	retlw	32	;' '
  5652  3BCC  3402               	retlw	2
  5653  3BCD  3400               	retlw	0
  5654                           
  5655                           	psect	stringtext64
  5656  3BCE                     __pstringtext64:	
  5657  3BCE                     STR_8:	
  5658  3BCE  3456               	retlw	86	;'V'
  5659  3BCF  3420               	retlw	32	;' '
  5660  3BD0  3420               	retlw	32	;' '
  5661  3BD1  3400               	retlw	0
  5662                           
  5663                           	psect	stringtext65
  5664  3BD2                     __pstringtext65:	
  5665  3BD2                     STR_10:	
  5666  3BD2  3443               	retlw	67	;'C'
  5667  3BD3  3468               	retlw	104	;'h'
  5668  3BD4  3420               	retlw	32	;' '
  5669  3BD5  3400               	retlw	0
  5670                           
  5671                           	psect	stringtext66
  5672  3BD6                     __pstringtext66:	
  5673  3BD6                     STR_55:	
  5674  3BD6  3401               	retlw	1
  5675  3BD7  3403               	retlw	3
  5676  3BD8  3400               	retlw	0
  5677                           
  5678                           	psect	stringtext67
  5679  3BD9                     __pstringtext67:	
  5680  3BD9                     STR_50:	
  5681  3BD9  3401               	retlw	1
  5682  3BDA  3420               	retlw	32	;' '
  5683  3BDB  3400               	retlw	0
  5684                           
  5685                           	psect	stringtext68
  5686  3BDC                     __pstringtext68:	
  5687  3BDC                     STR_12:	
  5688  3BDC  3422               	retlw	34	;'"'
  5689  3BDD  3420               	retlw	32	;' '
  5690  3BDE  3400               	retlw	0
  5691                           
  5692                           	psect	stringtext69
  5693  3BDF                     __pstringtext69:	
  5694  3BDF                     STR_11:	
  5695  3BDF  343A               	retlw	58	;':'
  5696  3BE0  3420               	retlw	32	;' '
  5697  3BE1  3400               	retlw	0
  5698                           
  5699                           	psect	stringtext70
  5700  3BE2                     __pstringtext70:	
  5701  3BE2                     STR_15:	
  5702  3BE2  3420               	retlw	32	;' '
  5703  3BE3  3428               	retlw	40	;'('
  5704  3BE4  3400               	retlw	0
  5705                           
  5706                           	psect	stringtext71
  5707  3BE5                     __pstringtext71:	
  5708  3BE5                     STR_16:	
  5709  3BE5  3457               	retlw	87	;'W'
  5710  3BE6  3429               	retlw	41	;')'
  5711  3BE7  3400               	retlw	0
  5712                           
  5713                           	psect	stringtext72
  5714  3BE8                     __pstringtext72:	
  5715  3BE8                     STR_4:	
  5716  3BE8  3401               	retlw	1
  5717  3BE9  3400               	retlw	0
  5718                           
  5719                           	psect	stringtext73
  5720  0000                     __pstringtext73:	
  5721  3BB4                     
  5722                           ; #config settings
  5723  0000                     
  5724                           	psect	cinit
  5725  007B                     start_initialization:	
  5726  007B                     __initialization:		;BIGRAM
  5727                           
  5728                           ; Initialize objects allocated to BANK0
  5729  007B  3187  27FA  3180   	fcall	__pidataBANK0	;fetch initializer
  5730  007E  00E3               	movwf	__pdataBANK0& (0+127)
  5731                           
  5732                           ; Initialize objects allocated to BANK3
  5733  007F  0143               	movlb	3	; select bank3
  5734  0080  3187  27FB  3180   	fcall	__pidataBANK3	;fetch initializer
  5735  0083  00EF               	movwf	__pdataBANK3& (0+127)
  5736                           
  5737                           ; Initialize objects allocated to BANK4
  5738  0084  30A4               	movlw	low __pidataBANK4
  5739  0085  0084               	movwf	4
  5740  0086  30BE               	movlw	(high __pidataBANK4)| (0+128)
  5741  0087  0085               	movwf	5
  5742  0088  3058               	movlw	low __pdataBANK4
  5743  0089  0086               	movwf	6
  5744  008A  3002               	movlw	high __pdataBANK4
  5745  008B  0087               	movwf	7
  5746  008C  3000               	movlw	0
  5747  008D  00FF               	movwf	btemp+1
  5748  008E  300C               	movlw	12
  5749  008F  31BE  2698  3180   	fcall	init_ram
  5750                           
  5751                           ; Clear objects allocated to BIGRAM
  5752  0092  304A               	movlw	low (0+10058)
  5753  0093  0084               	movwf	4
  5754  0094  3027               	movlw	high (0+10058)
  5755  0095  0085               	movwf	5
  5756  0096  30A6               	movlw	166
  5757  0097  00FE               	movwf	btemp
  5758  0098  3000               	movlw	0
  5759  0099  00FF               	movwf	btemp+1
  5760  009A  31BE  268C  3180   	fcall	clear_ram0
  5761                           
  5762                           ; Clear objects allocated to COMMON
  5763  009D  01FD               	clrf	__pbssCOMMON& (0+127)
  5764                           
  5765                           ; Clear objects allocated to BANK0
  5766  009E  3058               	movlw	low __pbssBANK0
  5767  009F  0084               	movwf	4
  5768  00A0  3000               	movlw	high __pbssBANK0
  5769  00A1  0085               	movwf	5
  5770  00A2  300B               	movlw	11
  5771  00A3  00FE               	movwf	btemp
  5772  00A4  3000               	movlw	0
  5773  00A5  00FF               	movwf	btemp+1
  5774  00A6  31BE  268C  3180   	fcall	clear_ram0
  5775                           
  5776                           ; Clear objects allocated to BANK2
  5777  00A9  0142               	movlb	2	; select bank2
  5778  00AA  01E9               	clrf	__pbssBANK2& (0+127)
  5779  00AB  01EA               	clrf	(__pbssBANK2+1)& (0+127)
  5780  00AC  01EB               	clrf	(__pbssBANK2+2)& (0+127)
  5781  00AD  01EC               	clrf	(__pbssBANK2+3)& (0+127)
  5782                           
  5783                           ; Clear objects allocated to BANK3
  5784  00AE  0143               	movlb	3	; select bank3
  5785  00AF  01E7               	clrf	__pbssBANK3& (0+127)
  5786  00B0  01E8               	clrf	(__pbssBANK3+1)& (0+127)
  5787  00B1  01E9               	clrf	(__pbssBANK3+2)& (0+127)
  5788  00B2  01EA               	clrf	(__pbssBANK3+3)& (0+127)
  5789  00B3  01EB               	clrf	(__pbssBANK3+4)& (0+127)
  5790  00B4  01EC               	clrf	(__pbssBANK3+5)& (0+127)
  5791  00B5  01ED               	clrf	(__pbssBANK3+6)& (0+127)
  5792  00B6  01EE               	clrf	(__pbssBANK3+7)& (0+127)
  5793                           
  5794                           ; Clear objects allocated to BANK4
  5795  00B7  3020               	movlw	low __pbssBANK4
  5796  00B8  0084               	movwf	4
  5797  00B9  3002               	movlw	high __pbssBANK4
  5798  00BA  0085               	movwf	5
  5799  00BB  3029               	movlw	41
  5800  00BC  00FE               	movwf	btemp
  5801  00BD  3000               	movlw	0
  5802  00BE  00FF               	movwf	btemp+1
  5803  00BF  31BE  268C  3180   	fcall	clear_ram0
  5804                           
  5805                           ; Clear objects allocated to BANK5
  5806  00C2  30A0               	movlw	low __pbssBANK5
  5807  00C3  0084               	movwf	4
  5808  00C4  3002               	movlw	high __pbssBANK5
  5809  00C5  0085               	movwf	5
  5810  00C6  3042               	movlw	66
  5811  00C7  00FE               	movwf	btemp
  5812  00C8  3000               	movlw	0
  5813  00C9  00FF               	movwf	btemp+1
  5814  00CA  31BE  268C         	fcall	clear_ram0
  5815  00CC                     end_of_initialization:	
  5816                           ;End of C runtime variable initialization code
  5817                           
  5818  00CC                     __end_of__initialization:	
  5819  00CC  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5820  00CD  0140               	movlb	0
  5821  00CE  3190  283B         	ljmp	_main	;jump to C main() function
  5822                           
  5823                           	psect	bssCOMMON
  5824  007D                     __pbssCOMMON:	
  5825  007D                     _pbState:	
  5826  007D                     	ds	1
  5827                           
  5828                           	psect	bssBANK0
  5829  0058                     __pbssBANK0:	
  5830  0058                     _tail:	
  5831  0058                     	ds	1
  5832  0059                     _head:	
  5833  0059                     	ds	1
  5834  005A                     setup@page:	
  5835  005A                     	ds	1
  5836  005B                     channelSetup@page:	
  5837  005B                     	ds	1
  5838  005C                     channelView@page:	
  5839  005C                     	ds	1
  5840  005D                     statusView@page:	
  5841  005D                     	ds	1
  5842  005E                     _selectedChannel:	
  5843  005E                     	ds	1
  5844  005F                     _rxCount:	
  5845  005F                     	ds	1
  5846  0060                     _curRotState:	
  5847  0060                     	ds	1
  5848  0061                     _uartDataReadyFlag:	
  5849  0061                     	ds	1
  5850  0062                     _tick10ms:	
  5851  0062                     	ds	1
  5852                           
  5853                           	psect	dataBANK0
  5854  0063                     __pdataBANK0:	
  5855  0063                     _g_screenRefresh:	
  5856  0063                     	ds	1
  5857                           
  5858                           	psect	bssBANK2
  5859  0169                     __pbssBANK2:	
  5860  0169                     controller@idle:	
  5861  0169                     	ds	1
  5862  016A                     menu@state:	
  5863  016A                     	ds	1
  5864  016B                     _checksum:	
  5865  016B                     	ds	1
  5866  016C                     _rotDir:	
  5867  016C                     	ds	1
  5868                           
  5869                           	psect	bssBANK3
  5870  01E7                     __pbssBANK3:	
  5871  01E7                     _userActivity:	
  5872  01E7                     	ds	4
  5873  01EB                     _tick100ms:	
  5874  01EB                     	ds	4
  5875                           
  5876                           	psect	dataBANK3
  5877  01EF                     __pdataBANK3:	
  5878  01EF                     statusView@prevSensorStat:	
  5879  01EF                     	ds	1
  5880                           
  5881                           	psect	bssBANK4
  5882  0220                     __pbssBANK4:	
  5883  0220                     controller@dutyCycleTimer:	
  5884  0220                     	ds	4
  5885  0224                     checkSensor@sensorTimeout:	
  5886  0224                     	ds	4
  5887  0228                     getAnalogValues@avgI:	
  5888  0228                     	ds	2
  5889  022A                     getAnalogValues@avgV:	
  5890  022A                     	ds	2
  5891  022C                     getAnalogValues@avgT:	
  5892  022C                     	ds	2
  5893  022E                     _rxOErrCount:	
  5894  022E                     	ds	1
  5895  022F                     _rxFErrCount:	
  5896  022F                     	ds	1
  5897  0230                     _dataPacket:	
  5898  0230                     	ds	15
  5899  023F                     _str:	
  5900  023F                     	ds	10
  5901                           
  5902                           	psect	dataBANK4
  5903  0258                     __pdataBANK4:	
  5904  0258                     checkSensor@sensorUpdateInterval:	
  5905  0258                     	ds	4
  5906  025C                     OLED_print_xy@F7898:	
  5907  025C                     	ds	4
  5908  0260                     OLED_setCursor@F7890:	
  5909  0260                     	ds	4
  5910                           
  5911                           	psect	bssBANK5
  5912  02A0                     __pbssBANK5:	
  5913  02A0                     _errorMessageQueue:	
  5914  02A0                     	ds	10
  5915  02AA                     _virtChannels:	
  5916  02AA                     	ds	36
  5917  02CE                     _buffer:	
  5918  02CE                     	ds	20
  5919                           
  5920                           	psect	inittext
  5921  3E98                     init_ram:	
  5922  3E98  00FE               	movwf	126
  5923  3E99                     initloop:	
  5924  3E99  0012               	moviw fsr0++
  5925  3E9A  001E               	movwi fsr1++
  5926  3E9B  3001               	movlw	1
  5927  3E9C  02FE               	subwf	126,f
  5928  3E9D  3000               	movlw	0
  5929  3E9E  3BFF               	subwfb	127,f
  5930  3E9F  087F               	movf	127,w
  5931  3EA0  047E               	iorwf	126,w
  5932  3EA1  1903               	btfsc	3,2
  5933  3EA2  3400               	retlw	0
  5934  3EA3  2E99               	goto	initloop
  5935                           
  5936                           	psect	clrtext
  5937  3E8C                     clear_ram0:	
  5938                           ;	Called with FSR0 containing the base address, and
  5939                           ;	btemp/btemp+1 has the size to clear
  5940                           
  5941  3E8C  0064               	clrwdt	;clear the watchdog before getting into this loop
  5942  3E8D                     clrloop0:	
  5943  3E8D  0180               	clrf	0	;clear RAM location pointed to by FSR
  5944  3E8E  3101               	addfsr 0,1
  5945  3E8F  3001               	movlw	1
  5946  3E90  02FE               	subwf	126,f
  5947  3E91  3000               	movlw	0
  5948  3E92  3BFF               	subwfb	127,f
  5949  3E93  087F               	movf	127,w
  5950  3E94  047E               	iorwf	126,w
  5951  3E95  1903               	btfsc	3,2
  5952  3E96  3400               	retlw	0	;all done for this memory range, return
  5953  3E97  2E8D               	goto	clrloop0	;have we reached the end yet?
  5954                           
  5955                           	psect	cstackBANK6
  5956  0320                     __pcstackBANK6:	
  5957  0320                     channelThing@total:	
  5958                           
  5959                           ; 4 bytes @ 0x0
  5960  0320                     	ds	4
  5961  0324                     channelThing@totalGrpA:	
  5962                           
  5963                           ; 4 bytes @ 0x4
  5964  0324                     	ds	4
  5965  0328                     channelThing@totalGrpB:	
  5966                           
  5967                           ; 4 bytes @ 0x8
  5968  0328                     	ds	4
  5969  032C                     channelThing@grpA:	
  5970                           
  5971                           ; 4 bytes @ 0xC
  5972  032C                     	ds	4
  5973  0330                     channelThing@numGrpA:	
  5974                           
  5975                           ; 1 bytes @ 0x10
  5976  0330                     	ds	1
  5977  0331                     channelThing@numGrpB:	
  5978                           
  5979                           ; 1 bytes @ 0x11
  5980  0331                     	ds	1
  5981  0332                     channelThing@grpB:	
  5982                           
  5983                           ; 4 bytes @ 0x12
  5984  0332                     	ds	4
  5985  0336                     channelThing@n:	
  5986                           
  5987                           ; 1 bytes @ 0x16
  5988  0336                     	ds	1
  5989                           
  5990                           	psect	cstackBANK4
  5991  0249                     __pcstackBANK4:	
  5992  0249                     ??_channelThing:	
  5993                           
  5994                           ; 1 bytes @ 0x0
  5995  0249                     	ds	15
  5996                           
  5997                           	psect	cstackBANK3
  5998  01A0                     __pcstackBANK3:	
  5999  01A0                     qsort@stack:	
  6000                           
  6001                           ; 64 bytes @ 0x0
  6002  01A0                     	ds	64
  6003  01E0                     main@sysCheckInterval:	
  6004                           
  6005                           ; 4 bytes @ 0x40
  6006  01E0                     	ds	4
  6007  01E4                     main@initDone:	
  6008                           
  6009                           ; 1 bytes @ 0x44
  6010  01E4                     	ds	1
  6011  01E5                     main@controllerIdle:	
  6012                           
  6013                           ; 1 bytes @ 0x45
  6014  01E5                     	ds	1
  6015  01E6                     main@displayOff:	
  6016                           
  6017                           ; 1 bytes @ 0x46
  6018  01E6                     	ds	1
  6019                           
  6020                           	psect	cstackBANK2
  6021  0120                     __pcstackBANK2:	
  6022  0120                     checkChannelStatus@adc:	
  6023  0120                     calcRequiredPower@p:	
  6024                           ; 2 bytes @ 0x0
  6025                           
  6026  0120                     _channelView$2561:	
  6027                           ; 4 bytes @ 0x0
  6028                           
  6029  0120                     storeNVM@nvm:	
  6030                           ; 4 bytes @ 0x0
  6031                           
  6032  0120                     readNVM@nvm:	
  6033                           ; 32 bytes @ 0x0
  6034                           
  6035  0120                     qsort@xbuf:	
  6036                           ; 32 bytes @ 0x0
  6037                           
  6038                           
  6039                           ; 60 bytes @ 0x0
  6040  0120                     	ds	2
  6041  0122                     checkChannelStatus@samples:	
  6042                           
  6043                           ; 1 bytes @ 0x2
  6044  0122                     	ds	1
  6045  0123                     _checkChannelStatus$1759:	
  6046                           
  6047                           ; 4 bytes @ 0x3
  6048  0123                     	ds	1
  6049  0124                     channelView@n:	
  6050  0124                     calcRequiredPower@Rth:	
  6051                           ; 1 bytes @ 0x4
  6052                           
  6053                           
  6054                           ; 4 bytes @ 0x4
  6055  0124                     	ds	3
  6056  0127                     _checkChannelStatus$1760:	
  6057                           
  6058                           ; 4 bytes @ 0x7
  6059  0127                     	ds	1
  6060  0128                     _calcRequiredPower$2564:	
  6061                           
  6062                           ; 4 bytes @ 0x8
  6063  0128                     	ds	3
  6064  012B                     checkChannelStatus@avg:	
  6065                           
  6066                           ; 2 bytes @ 0xB
  6067  012B                     	ds	1
  6068  012C                     _calcRequiredPower$2565:	
  6069                           
  6070                           ; 4 bytes @ 0xC
  6071  012C                     	ds	1
  6072  012D                     checkChannelStatus@current:	
  6073                           
  6074                           ; 4 bytes @ 0xD
  6075  012D                     	ds	3
  6076  0130                     _calcRequiredPower$2566:	
  6077                           
  6078                           ; 4 bytes @ 0x10
  6079  0130                     	ds	1
  6080  0131                     checkChannelStatus@channel:	
  6081                           
  6082                           ; 1 bytes @ 0x11
  6083  0131                     	ds	1
  6084  0132                     checkChannelStatus@heater:	
  6085                           
  6086                           ; 2 bytes @ 0x12
  6087  0132                     	ds	2
  6088  0134                     _calcRequiredPower$2567:	
  6089                           
  6090                           ; 4 bytes @ 0x14
  6091  0134                     	ds	4
  6092  0138                     _calcRequiredPower$2568:	
  6093                           
  6094                           ; 4 bytes @ 0x18
  6095  0138                     	ds	4
  6096  013C                     _calcRequiredPower$2569:	
  6097                           
  6098                           ; 4 bytes @ 0x1C
  6099  013C                     	ds	4
  6100  0140                     calcRequiredPower@d:	
  6101  0140                     _setLensDia$2562:	
  6102                           ; 4 bytes @ 0x20
  6103                           
  6104                           
  6105                           ; 4 bytes @ 0x20
  6106  0140                     	ds	4
  6107  0144                     ??_menu:	
  6108  0144                     calcRequiredPower@phi:	
  6109                           ; 1 bytes @ 0x24
  6110                           
  6111                           
  6112                           ; 4 bytes @ 0x24
  6113  0144                     	ds	4
  6114  0148                     menu@page:	
  6115  0148                     calcRequiredPower@A:	
  6116                           ; 1 bytes @ 0x28
  6117                           
  6118                           
  6119                           ; 4 bytes @ 0x28
  6120  0148                     	ds	1
  6121  0149                     menu@nextState:	
  6122                           
  6123                           ; 1 bytes @ 0x29
  6124  0149                     	ds	3
  6125  014C                     _calcRequiredPower$2563:	
  6126                           
  6127                           ; 4 bytes @ 0x2C
  6128  014C                     	ds	4
  6129  0150                     calcRequiredPower@T1:	
  6130                           
  6131                           ; 4 bytes @ 0x30
  6132  0150                     	ds	4
  6133  0154                     calcRequiredPower@T2:	
  6134                           
  6135                           ; 4 bytes @ 0x34
  6136  0154                     	ds	4
  6137  0158                     calcRequiredPower@n:	
  6138                           
  6139                           ; 1 bytes @ 0x38
  6140  0158                     	ds	4
  6141  015C                     qsort@x:	
  6142                           
  6143                           ; 1 bytes @ 0x3C
  6144  015C                     	ds	1
  6145  015D                     qsort@base:	
  6146                           
  6147                           ; 2 bytes @ 0x3D
  6148  015D                     	ds	2
  6149  015F                     qsort@l:	
  6150                           
  6151                           ; 2 bytes @ 0x3F
  6152  015F                     	ds	2
  6153  0161                     qsort@r:	
  6154                           
  6155                           ; 2 bytes @ 0x41
  6156  0161                     	ds	2
  6157  0163                     qsort@s:	
  6158                           
  6159                           ; 2 bytes @ 0x43
  6160  0163                     	ds	2
  6161  0165                     qsort@i:	
  6162                           
  6163                           ; 2 bytes @ 0x45
  6164  0165                     	ds	2
  6165  0167                     qsort@j:	
  6166                           
  6167                           ; 2 bytes @ 0x47
  6168  0167                     	ds	2
  6169                           
  6170                           	psect	cstackBANK1
  6171  00A0                     __pcstackBANK1:	
  6172  00A0                     ___flmul@sign:	
  6173  00A0                     storeNVM@buf:	
  6174                           ; 1 bytes @ 0x0
  6175                           
  6176  00A0                     readNVM@buf:	
  6177                           ; 64 bytes @ 0x0
  6178                           
  6179                           
  6180                           ; 64 bytes @ 0x0
  6181  00A0                     	ds	1
  6182  00A1                     ___flmul@aexp:	
  6183                           
  6184                           ; 1 bytes @ 0x1
  6185  00A1                     	ds	1
  6186  00A2                     ___flmul@bexp:	
  6187                           
  6188                           ; 1 bytes @ 0x2
  6189  00A2                     	ds	1
  6190  00A3                     ___flmul@grs:	
  6191                           
  6192                           ; 4 bytes @ 0x3
  6193  00A3                     	ds	4
  6194  00A7                     ___flmul@prod:	
  6195                           
  6196                           ; 4 bytes @ 0x7
  6197  00A7                     	ds	4
  6198  00AB                     ___flmul@temp:	
  6199                           
  6200                           ; 2 bytes @ 0xB
  6201  00AB                     	ds	2
  6202  00AD                     ?___flneg:	
  6203  00AD                     ?___fldiv:	
  6204                           ; 4 bytes @ 0xD
  6205                           
  6206  00AD                     ___flneg@f1:	
  6207                           ; 4 bytes @ 0xD
  6208                           
  6209  00AD                     ___fldiv@a:	
  6210                           ; 4 bytes @ 0xD
  6211                           
  6212                           
  6213                           ; 4 bytes @ 0xD
  6214  00AD                     	ds	4
  6215  00B1                     ?___fladd:	
  6216  00B1                     ___fladd@b:	
  6217                           ; 4 bytes @ 0x11
  6218                           
  6219  00B1                     ___fldiv@b:	
  6220                           ; 4 bytes @ 0x11
  6221                           
  6222                           
  6223                           ; 4 bytes @ 0x11
  6224  00B1                     	ds	4
  6225  00B5                     ??___fldiv:	
  6226  00B5                     ___fladd@a:	
  6227                           ; 1 bytes @ 0x15
  6228                           
  6229                           
  6230                           ; 4 bytes @ 0x15
  6231  00B5                     	ds	4
  6232  00B9                     ??___fladd:	
  6233                           
  6234                           ; 1 bytes @ 0x19
  6235  00B9                     	ds	1
  6236  00BA                     ___fldiv@rem:	
  6237                           
  6238                           ; 4 bytes @ 0x1A
  6239  00BA                     	ds	4
  6240  00BE                     ___fldiv@sign:	
  6241                           
  6242                           ; 1 bytes @ 0x1E
  6243  00BE                     	ds	1
  6244  00BF                     ___fldiv@new_exp:	
  6245                           
  6246                           ; 2 bytes @ 0x1F
  6247  00BF                     	ds	2
  6248  00C1                     ___fldiv@grs:	
  6249                           
  6250                           ; 4 bytes @ 0x21
  6251  00C1                     	ds	4
  6252  00C5                     ___fladd@signs:	
  6253  00C5                     ___fldiv@bexp:	
  6254                           ; 1 bytes @ 0x25
  6255                           
  6256                           
  6257                           ; 1 bytes @ 0x25
  6258  00C5                     	ds	1
  6259  00C6                     ___fladd@aexp:	
  6260  00C6                     ___fldiv@aexp:	
  6261                           ; 1 bytes @ 0x26
  6262                           
  6263                           
  6264                           ; 1 bytes @ 0x26
  6265  00C6                     	ds	1
  6266  00C7                     ___fladd@bexp:	
  6267                           
  6268                           ; 1 bytes @ 0x27
  6269  00C7                     	ds	1
  6270  00C8                     ___fladd@grs:	
  6271                           
  6272                           ; 1 bytes @ 0x28
  6273  00C8                     	ds	1
  6274  00C9                     ?___flge:	
  6275  00C9                     ??_calcRequiredPower:	
  6276                           ; 1 bit 
  6277                           
  6278  00C9                     ?___fltol:	
  6279                           ; 1 bytes @ 0x29
  6280                           
  6281  00C9                     ?___flsub:	
  6282                           ; 4 bytes @ 0x29
  6283                           
  6284  00C9                     ___flge@ff1:	
  6285                           ; 4 bytes @ 0x29
  6286                           
  6287  00C9                     ___fltol@f1:	
  6288                           ; 4 bytes @ 0x29
  6289                           
  6290  00C9                     ___flsub@a:	
  6291                           ; 4 bytes @ 0x29
  6292                           
  6293  00C9                     _getAnalogValues$2570:	
  6294                           ; 4 bytes @ 0x29
  6295                           
  6296                           
  6297                           ; 4 bytes @ 0x29
  6298  00C9                     	ds	4
  6299  00CD                     ??___fltol:	
  6300  00CD                     getAnalogValues@adc:	
  6301                           ; 1 bytes @ 0x2D
  6302                           
  6303  00CD                     ___flge@ff2:	
  6304                           ; 2 bytes @ 0x2D
  6305                           
  6306  00CD                     ___flsub@b:	
  6307                           ; 4 bytes @ 0x2D
  6308                           
  6309                           
  6310                           ; 4 bytes @ 0x2D
  6311  00CD                     	ds	4
  6312  00D1                     ??___flge:	
  6313                           
  6314                           ; 1 bytes @ 0x31
  6315  00D1                     	ds	1
  6316  00D2                     ?_sortDC:	
  6317  00D2                     ?_sortDCRev:	
  6318                           ; 2 bytes @ 0x32
  6319                           
  6320  00D2                     ?_sortCur:	
  6321                           ; 2 bytes @ 0x32
  6322                           
  6323  00D2                     sortDC@cmp1:	
  6324                           ; 2 bytes @ 0x32
  6325                           
  6326  00D2                     sortDCRev@cmp1:	
  6327                           ; 2 bytes @ 0x32
  6328                           
  6329  00D2                     sortCur@cmp1:	
  6330                           ; 2 bytes @ 0x32
  6331                           
  6332                           
  6333                           ; 2 bytes @ 0x32
  6334  00D2                     	ds	2
  6335  00D4                     sortDC@cmp2:	
  6336  00D4                     sortDCRev@cmp2:	
  6337                           ; 2 bytes @ 0x34
  6338                           
  6339  00D4                     sortCur@cmp2:	
  6340                           ; 2 bytes @ 0x34
  6341                           
  6342                           
  6343                           ; 2 bytes @ 0x34
  6344  00D4                     	ds	2
  6345  00D6                     ??_sortDC:	
  6346  00D6                     ??_sortDCRev:	
  6347                           ; 1 bytes @ 0x36
  6348                           
  6349  00D6                     sortCur@a:	
  6350                           ; 1 bytes @ 0x36
  6351                           
  6352                           
  6353                           ; 2 bytes @ 0x36
  6354  00D6                     	ds	2
  6355  00D8                     sortCur@b:	
  6356                           
  6357                           ; 2 bytes @ 0x38
  6358  00D8                     	ds	1
  6359  00D9                     ??_systemCheck:	
  6360  00D9                     ??_checkChannelStatus:	
  6361                           ; 1 bytes @ 0x39
  6362                           
  6363  00D9                     ?_ftoa:	
  6364                           ; 1 bytes @ 0x39
  6365                           
  6366  00D9                     ?_spinInput:	
  6367                           ; 1 bytes @ 0x39
  6368                           
  6369  00D9                     spinInput@input:	
  6370                           ; 1 bytes @ 0x39
  6371                           
  6372  00D9                     ftoa@fValue:	
  6373                           ; 2 bytes @ 0x39
  6374                           
  6375                           
  6376                           ; 4 bytes @ 0x39
  6377  00D9                     	ds	1
  6378  00DA                     sortDC@a:	
  6379  00DA                     sortDCRev@a:	
  6380                           ; 1 bytes @ 0x3A
  6381                           
  6382                           
  6383                           ; 1 bytes @ 0x3A
  6384  00DA                     	ds	1
  6385  00DB                     sortDC@b:	
  6386  00DB                     sortDCRev@b:	
  6387                           ; 1 bytes @ 0x3B
  6388                           
  6389  00DB                     spinInput@min:	
  6390                           ; 1 bytes @ 0x3B
  6391                           
  6392                           
  6393                           ; 4 bytes @ 0x3B
  6394  00DB                     	ds	1
  6395  00DC                     ?_qsort:	
  6396  00DC                     qsort@vbase:	
  6397                           ; 1 bytes @ 0x3C
  6398                           
  6399                           
  6400                           ; 2 bytes @ 0x3C
  6401  00DC                     	ds	1
  6402  00DD                     ftoa@width:	
  6403                           
  6404                           ; 1 bytes @ 0x3D
  6405  00DD                     	ds	1
  6406  00DE                     ftoa@prec:	
  6407  00DE                     qsort@nel:	
  6408                           ; 1 bytes @ 0x3E
  6409                           
  6410                           
  6411                           ; 2 bytes @ 0x3E
  6412  00DE                     	ds	1
  6413  00DF                     ??_ftoa:	
  6414  00DF                     spinInput@max:	
  6415                           ; 1 bytes @ 0x3F
  6416                           
  6417                           
  6418                           ; 4 bytes @ 0x3F
  6419  00DF                     	ds	1
  6420  00E0                     qsort@width:	
  6421                           
  6422                           ; 2 bytes @ 0x40
  6423  00E0                     	ds	1
  6424  00E1                     ftoa@len:	
  6425                           
  6426                           ; 1 bytes @ 0x41
  6427  00E1                     	ds	1
  6428  00E2                     ftoa@sign:	
  6429  00E2                     qsort@compar:	
  6430                           ; 1 bytes @ 0x42
  6431                           
  6432                           
  6433                           ; 2 bytes @ 0x42
  6434  00E2                     	ds	1
  6435  00E3                     ftoa@intValue:	
  6436  00E3                     spinInput@step:	
  6437                           ; 1 bytes @ 0x43
  6438                           
  6439                           
  6440                           ; 4 bytes @ 0x43
  6441  00E3                     	ds	1
  6442  00E4                     ??_qsort:	
  6443  00E4                     ftoa@w:	
  6444                           ; 1 bytes @ 0x44
  6445                           
  6446                           
  6447                           ; 1 bytes @ 0x44
  6448  00E4                     	ds	1
  6449  00E5                     ftoa@pos:	
  6450                           
  6451                           ; 1 bytes @ 0x45
  6452  00E5                     	ds	1
  6453  00E6                     ftoa@str:	
  6454                           
  6455                           ; 1 bytes @ 0x46
  6456  00E6                     	ds	1
  6457  00E7                     ??_statusView:	
  6458  00E7                     ??_channelView:	
  6459                           ; 1 bytes @ 0x47
  6460                           
  6461  00E7                     ??_channelSetup:	
  6462                           ; 1 bytes @ 0x47
  6463                           
  6464  00E7                     ??_setOutputPower:	
  6465                           ; 1 bytes @ 0x47
  6466                           
  6467  00E7                     ??_setLensDia:	
  6468                           ; 1 bytes @ 0x47
  6469                           
  6470  00E7                     ??_setup:	
  6471                           ; 1 bytes @ 0x47
  6472                           
  6473  00E7                     ??_setDPOffset:	
  6474                           ; 1 bytes @ 0x47
  6475                           
  6476  00E7                     ??_setSkyTemp:	
  6477                           ; 1 bytes @ 0x47
  6478                           
  6479  00E7                     ??_setFudgeFactor:	
  6480                           ; 1 bytes @ 0x47
  6481                           
  6482                           
  6483                           ; 1 bytes @ 0x47
  6484  00E7                     	ds	4
  6485  00EB                     channelSetup@heater:	
  6486  00EB                     setOutputPower@heater:	
  6487                           ; 2 bytes @ 0x4B
  6488                           
  6489                           
  6490                           ; 2 bytes @ 0x4B
  6491  00EB                     	ds	4
  6492  00EF                     ??_main:	
  6493                           
  6494                           ; 1 bytes @ 0x4F
  6495  00EF                     	ds	1
  6496                           
  6497                           	psect	cstackCOMMON
  6498  0070                     __pcstackCOMMON:	
  6499  0070                     ?i1___flge:	
  6500  0070                     ?_initialize:	
  6501                           ; 1 bit 
  6502                           
  6503  0070                     ?_OLED_init:	
  6504                           ; 1 bytes @ 0x0
  6505                           
  6506  0070                     ?_OLED_loadSpecialChars:	
  6507                           ; 1 bytes @ 0x0
  6508                           
  6509  0070                     ?_OLED_command:	
  6510                           ; 1 bytes @ 0x0
  6511                           
  6512  0070                     ?_initGlobalData:	
  6513                           ; 1 bytes @ 0x0
  6514                           
  6515  0070                     ?_readNVM:	
  6516                           ; 1 bytes @ 0x0
  6517                           
  6518  0070                     ?_getAnalogValues:	
  6519                           ; 1 bytes @ 0x0
  6520                           
  6521  0070                     ?_systemCheck:	
  6522                           ; 1 bytes @ 0x0
  6523                           
  6524  0070                     ?_checkSensor:	
  6525                           ; 1 bytes @ 0x0
  6526                           
  6527  0070                     ?_calcRequiredPower:	
  6528                           ; 1 bytes @ 0x0
  6529                           
  6530  0070                     ?_checkChannelStatus:	
  6531                           ; 1 bytes @ 0x0
  6532                           
  6533  0070                     ?_channelThing:	
  6534                           ; 1 bytes @ 0x0
  6535                           
  6536  0070                     ?_controller:	
  6537                           ; 1 bytes @ 0x0
  6538                           
  6539  0070                     ?_getLastError:	
  6540                           ; 1 bytes @ 0x0
  6541                           
  6542  0070                     ?_viewErrorMessage:	
  6543                           ; 1 bytes @ 0x0
  6544                           
  6545  0070                     ?_menu:	
  6546                           ; 1 bytes @ 0x0
  6547                           
  6548  0070                     ?_pushButtonISR:	
  6549                           ; 1 bytes @ 0x0
  6550                           
  6551  0070                     ??_pushButtonISR:	
  6552                           ; 1 bytes @ 0x0
  6553                           
  6554  0070                     ?_rotISR:	
  6555                           ; 1 bytes @ 0x0
  6556                           
  6557  0070                     ??_rotISR:	
  6558                           ; 1 bytes @ 0x0
  6559                           
  6560  0070                     ?_uartReceiveISR:	
  6561                           ; 1 bytes @ 0x0
  6562                           
  6563  0070                     ?_strncpy:	
  6564                           ; 1 bytes @ 0x0
  6565                           
  6566  0070                     ?_returnToPage:	
  6567                           ; 1 bytes @ 0x0
  6568                           
  6569  0070                     ?_storeNVM:	
  6570                           ; 1 bytes @ 0x0
  6571                           
  6572  0070                     ?_main:	
  6573                           ; 1 bytes @ 0x0
  6574                           
  6575  0070                     ?_OLED_write4bits:	
  6576                           ; 1 bytes @ 0x0
  6577                           
  6578  0070                     ?_OLED_waitForReady:	
  6579                           ; 1 bytes @ 0x0
  6580                           
  6581  0070                     ?_OLED_write:	
  6582                           ; 1 bytes @ 0x0
  6583                           
  6584  0070                     ?_ISR:	
  6585                           ; 1 bytes @ 0x0
  6586                           
  6587  0070                     ?_getRotDir:	
  6588                           ; 1 bytes @ 0x0
  6589                           
  6590  0070                     ?_getPB:	
  6591                           ; 1 bytes @ 0x0
  6592                           
  6593  0070                     ?_uartSendByte:	
  6594                           ; 1 bytes @ 0x0
  6595                           
  6596  0070                     ?_uartReset:	
  6597                           ; 1 bytes @ 0x0
  6598                           
  6599  0070                     ?_statusView:	
  6600                           ; 1 bytes @ 0x0
  6601                           
  6602  0070                     ?_channelView:	
  6603                           ; 1 bytes @ 0x0
  6604                           
  6605  0070                     ?_channelSetup:	
  6606                           ; 1 bytes @ 0x0
  6607                           
  6608  0070                     ?_setOutputPower:	
  6609                           ; 1 bytes @ 0x0
  6610                           
  6611  0070                     ?_setLensDia:	
  6612                           ; 1 bytes @ 0x0
  6613                           
  6614  0070                     ?_setup:	
  6615                           ; 1 bytes @ 0x0
  6616                           
  6617  0070                     ?_setDPOffset:	
  6618                           ; 1 bytes @ 0x0
  6619                           
  6620  0070                     ?_setSkyTemp:	
  6621                           ; 1 bytes @ 0x0
  6622                           
  6623  0070                     ?_setFudgeFactor:	
  6624                           ; 1 bytes @ 0x0
  6625                           
  6626  0070                     ?_error:	
  6627                           ; 1 bytes @ 0x0
  6628                           
  6629  0070                     strncpy@s:	
  6630                           ; 1 bytes @ 0x0
  6631                           
  6632  0070                     i1___flge@ff1:	
  6633                           ; 1 bytes @ 0x0
  6634                           
  6635                           
  6636                           ; 4 bytes @ 0x0
  6637  0070                     	ds	1
  6638  0071                     strncpy@n:	
  6639                           
  6640                           ; 2 bytes @ 0x1
  6641  0071                     	ds	2
  6642  0073                     ??_strncpy:	
  6643                           
  6644                           ; 1 bytes @ 0x3
  6645  0073                     	ds	1
  6646  0074                     strncpy@d:	
  6647  0074                     i1___flge@ff2:	
  6648                           ; 1 bytes @ 0x4
  6649                           
  6650                           
  6651                           ; 4 bytes @ 0x4
  6652  0074                     	ds	1
  6653  0075                     strncpy@cp:	
  6654                           
  6655                           ; 1 bytes @ 0x5
  6656  0075                     	ds	3
  6657  0078                     ??_uartReceiveISR:	
  6658                           
  6659                           ; 1 bytes @ 0x8
  6660  0078                     	ds	5
  6661                           
  6662                           	psect	cstackBANK0
  6663  0020                     __pcstackBANK0:	
  6664  0020                     ??i1___flge:	
  6665                           
  6666                           ; 1 bytes @ 0x0
  6667  0020                     	ds	8
  6668  0028                     ??_ISR:	
  6669                           
  6670                           ; 1 bytes @ 0x8
  6671  0028                     	ds	4
  6672  002C                     ?___fleq:	
  6673  002C                     ??_initialize:	
  6674                           ; 1 bit 
  6675                           
  6676  002C                     ??_getLastError:	
  6677                           ; 1 bytes @ 0xC
  6678                           
  6679  002C                     ?_FLASH_EraseBlock:	
  6680                           ; 1 bytes @ 0xC
  6681                           
  6682  002C                     ??_OLED_write4bits:	
  6683                           ; 1 bytes @ 0xC
  6684                           
  6685  002C                     ??_OLED_waitForReady:	
  6686                           ; 1 bytes @ 0xC
  6687                           
  6688  002C                     ??_getRotDir:	
  6689                           ; 1 bytes @ 0xC
  6690                           
  6691  002C                     ??_getPB:	
  6692                           ; 1 bytes @ 0xC
  6693                           
  6694  002C                     ??_uartSendByte:	
  6695                           ; 1 bytes @ 0xC
  6696                           
  6697  002C                     ??_uartReset:	
  6698                           ; 1 bytes @ 0xC
  6699                           
  6700  002C                     ?___bmul:	
  6701                           ; 1 bytes @ 0xC
  6702                           
  6703  002C                     ?_FLASH_ReadWord:	
  6704                           ; 1 bytes @ 0xC
  6705                           
  6706  002C                     ?__Umul8_16:	
  6707                           ; 2 bytes @ 0xC
  6708                           
  6709  002C                     ?_getAnalogValue:	
  6710                           ; 2 bytes @ 0xC
  6711                           
  6712  002C                     ?___awdiv:	
  6713                           ; 2 bytes @ 0xC
  6714                           
  6715  002C                     ?___awmod:	
  6716                           ; 2 bytes @ 0xC
  6717                           
  6718  002C                     ?_timeSince:	
  6719                           ; 2 bytes @ 0xC
  6720                           
  6721  002C                     ?___lmul:	
  6722                           ; 4 bytes @ 0xC
  6723                           
  6724  002C                     OLED_waitForReady@busy:	
  6725                           ; 4 bytes @ 0xC
  6726                           
  6727  002C                     uartSendByte@s:	
  6728                           ; 1 bytes @ 0xC
  6729                           
  6730  002C                     ___bmul@multiplicand:	
  6731                           ; 1 bytes @ 0xC
  6732                           
  6733  002C                     __Umul8_16@multiplicand:	
  6734                           ; 1 bytes @ 0xC
  6735                           
  6736  002C                     FLASH_ReadWord@flashAddr:	
  6737                           ; 1 bytes @ 0xC
  6738                           
  6739  002C                     FLASH_EraseBlock@startAddr:	
  6740                           ; 2 bytes @ 0xC
  6741                           
  6742  002C                     ___awdiv@divisor:	
  6743                           ; 2 bytes @ 0xC
  6744                           
  6745  002C                     ___awmod@divisor:	
  6746                           ; 2 bytes @ 0xC
  6747                           
  6748  002C                     timeSince@since:	
  6749                           ; 2 bytes @ 0xC
  6750                           
  6751  002C                     ___lmul@multiplier:	
  6752                           ; 4 bytes @ 0xC
  6753                           
  6754  002C                     ___fleq@ff1:	
  6755                           ; 4 bytes @ 0xC
  6756                           
  6757                           
  6758                           ; 4 bytes @ 0xC
  6759  002C                     	ds	1
  6760  002D                     ??___bmul:	
  6761  002D                     getRotDir@ret:	
  6762                           ; 1 bytes @ 0xD
  6763                           
  6764  002D                     getPB@ret:	
  6765                           ; 1 bytes @ 0xD
  6766                           
  6767                           
  6768                           ; 1 bytes @ 0xD
  6769  002D                     	ds	1
  6770  002E                     ??_FLASH_EraseBlock:	
  6771  002E                     ??_FLASH_ReadWord:	
  6772                           ; 1 bytes @ 0xE
  6773                           
  6774  002E                     ??__Umul8_16:	
  6775                           ; 1 bytes @ 0xE
  6776                           
  6777  002E                     ??_getAnalogValue:	
  6778                           ; 1 bytes @ 0xE
  6779                           
  6780  002E                     OLED_write4bits@value:	
  6781                           ; 1 bytes @ 0xE
  6782                           
  6783  002E                     FLASH_ReadWord@GIEBitValue:	
  6784                           ; 1 bytes @ 0xE
  6785                           
  6786  002E                     FLASH_EraseBlock@GIEBitValue:	
  6787                           ; 1 bytes @ 0xE
  6788                           
  6789  002E                     ___bmul@product:	
  6790                           ; 1 bytes @ 0xE
  6791                           
  6792  002E                     _getLastError$1311:	
  6793                           ; 1 bytes @ 0xE
  6794                           
  6795  002E                     ___awdiv@dividend:	
  6796                           ; 2 bytes @ 0xE
  6797                           
  6798  002E                     ___awmod@dividend:	
  6799                           ; 2 bytes @ 0xE
  6800                           
  6801                           
  6802                           ; 2 bytes @ 0xE
  6803  002E                     	ds	1
  6804  002F                     ??_readNVM:	
  6805  002F                     ?_FLASH_WriteBlock:	
  6806                           ; 1 bytes @ 0xF
  6807                           
  6808  002F                     ?_OLED_send:	
  6809                           ; 1 bytes @ 0xF
  6810                           
  6811  002F                     OLED_send@mode:	
  6812                           ; 1 bytes @ 0xF
  6813                           
  6814  002F                     getAnalogValue@channel:	
  6815                           ; 1 bytes @ 0xF
  6816                           
  6817  002F                     ___bmul@multiplier:	
  6818                           ; 1 bytes @ 0xF
  6819                           
  6820  002F                     FLASH_WriteBlock@writeAddr:	
  6821                           ; 1 bytes @ 0xF
  6822                           
  6823                           
  6824                           ; 2 bytes @ 0xF
  6825  002F                     	ds	1
  6826  0030                     ??_timeSince:	
  6827  0030                     ??_OLED_send:	
  6828                           ; 1 bytes @ 0x10
  6829                           
  6830  0030                     ?_setChannelSwitch:	
  6831                           ; 1 bytes @ 0x10
  6832                           
  6833  0030                     ??___awdiv:	
  6834                           ; 1 bytes @ 0x10
  6835                           
  6836  0030                     ??___awmod:	
  6837                           ; 1 bytes @ 0x10
  6838                           
  6839  0030                     setChannelSwitch@state:	
  6840                           ; 1 bytes @ 0x10
  6841                           
  6842  0030                     readNVM@n:	
  6843                           ; 1 bytes @ 0x10
  6844                           
  6845  0030                     __Umul8_16@product:	
  6846                           ; 1 bytes @ 0x10
  6847                           
  6848  0030                     ___lmul@multiplicand:	
  6849                           ; 2 bytes @ 0x10
  6850                           
  6851  0030                     ___fleq@ff2:	
  6852                           ; 4 bytes @ 0x10
  6853                           
  6854                           
  6855                           ; 4 bytes @ 0x10
  6856  0030                     	ds	1
  6857  0031                     ??_setChannelSwitch:	
  6858  0031                     OLED_send@value:	
  6859                           ; 1 bytes @ 0x11
  6860                           
  6861  0031                     FLASH_WriteBlock@flashWordArray:	
  6862                           ; 1 bytes @ 0x11
  6863                           
  6864  0031                     ___awdiv@counter:	
  6865                           ; 1 bytes @ 0x11
  6866                           
  6867  0031                     ___awmod@counter:	
  6868                           ; 1 bytes @ 0x11
  6869                           
  6870                           
  6871                           ; 1 bytes @ 0x11
  6872  0031                     	ds	1
  6873  0032                     ??_OLED_command:	
  6874  0032                     ??_FLASH_WriteBlock:	
  6875                           ; 1 bytes @ 0x12
  6876                           
  6877  0032                     ??_OLED_write:	
  6878                           ; 1 bytes @ 0x12
  6879                           
  6880  0032                     OLED_command@value:	
  6881                           ; 1 bytes @ 0x12
  6882                           
  6883  0032                     OLED_write@value:	
  6884                           ; 1 bytes @ 0x12
  6885                           
  6886  0032                     ___awdiv@sign:	
  6887                           ; 1 bytes @ 0x12
  6888                           
  6889  0032                     ___awmod@sign:	
  6890                           ; 1 bytes @ 0x12
  6891                           
  6892  0032                     __Umul8_16@word_mpld:	
  6893                           ; 1 bytes @ 0x12
  6894                           
  6895                           
  6896                           ; 2 bytes @ 0x12
  6897  0032                     	ds	1
  6898  0033                     ??_OLED_init:	
  6899  0033                     ??_OLED_loadSpecialChars:	
  6900                           ; 1 bytes @ 0x13
  6901                           
  6902  0033                     ?_paging:	
  6903                           ; 1 bytes @ 0x13
  6904                           
  6905  0033                     ?_OLED_print_xy:	
  6906                           ; 1 bytes @ 0x13
  6907                           
  6908  0033                     ??_error:	
  6909                           ; 1 bytes @ 0x13
  6910                           
  6911  0033                     OLED_print_xy@row:	
  6912                           ; 1 bytes @ 0x13
  6913                           
  6914  0033                     paging@lastPage:	
  6915                           ; 1 bytes @ 0x13
  6916                           
  6917  0033                     setChannelSwitch@channel:	
  6918                           ; 1 bytes @ 0x13
  6919                           
  6920  0033                     ___awdiv@quotient:	
  6921                           ; 1 bytes @ 0x13
  6922                           
  6923                           
  6924                           ; 2 bytes @ 0x13
  6925  0033                     	ds	1
  6926  0034                     ??_paging:	
  6927  0034                     ??___lmul:	
  6928                           ; 1 bytes @ 0x14
  6929                           
  6930  0034                     ??___fleq:	
  6931                           ; 1 bytes @ 0x14
  6932                           
  6933  0034                     OLED_loadSpecialChars@n:	
  6934                           ; 1 bytes @ 0x14
  6935                           
  6936  0034                     error@code:	
  6937                           ; 1 bytes @ 0x14
  6938                           
  6939  0034                     __Umul8_16@multiplier:	
  6940                           ; 1 bytes @ 0x14
  6941                           
  6942  0034                     OLED_print_xy@s:	
  6943                           ; 1 bytes @ 0x14
  6944                           
  6945  0034                     ___lmul@product:	
  6946                           ; 2 bytes @ 0x14
  6947                           
  6948                           
  6949                           ; 4 bytes @ 0x14
  6950  0034                     	ds	1
  6951  0035                     ?_itoa:	
  6952  0035                     ?___wmul:	
  6953                           ; 1 bytes @ 0x15
  6954                           
  6955  0035                     itoa@value:	
  6956                           ; 2 bytes @ 0x15
  6957                           
  6958  0035                     FLASH_WriteBlock@blockStartAddr:	
  6959                           ; 1 bytes @ 0x15
  6960                           
  6961  0035                     ___wmul@multiplier:	
  6962                           ; 2 bytes @ 0x15
  6963                           
  6964                           
  6965                           ; 2 bytes @ 0x15
  6966  0035                     	ds	1
  6967  0036                     ??_OLED_print_xy:	
  6968  0036                     paging@dir:	
  6969                           ; 1 bytes @ 0x16
  6970                           
  6971  0036                     itoa@width:	
  6972                           ; 1 bytes @ 0x16
  6973                           
  6974                           
  6975                           ; 1 bytes @ 0x16
  6976  0036                     	ds	1
  6977  0037                     ??_itoa:	
  6978  0037                     paging@currentPage:	
  6979                           ; 1 bytes @ 0x17
  6980                           
  6981  0037                     FLASH_WriteBlock@GIEBitValue:	
  6982                           ; 1 bytes @ 0x17
  6983                           
  6984  0037                     ___wmul@multiplicand:	
  6985                           ; 1 bytes @ 0x17
  6986                           
  6987  0037                     OLED_print_xy@row_offsets:	
  6988                           ; 2 bytes @ 0x17
  6989                           
  6990                           
  6991                           ; 4 bytes @ 0x17
  6992  0037                     	ds	1
  6993  0038                     ?_ema:	
  6994  0038                     paging@n:	
  6995                           ; 2 bytes @ 0x18
  6996                           
  6997  0038                     FLASH_WriteBlock@i:	
  6998                           ; 1 bytes @ 0x18
  6999                           
  7000  0038                     ema@in:	
  7001                           ; 1 bytes @ 0x18
  7002                           
  7003                           
  7004                           ; 2 bytes @ 0x18
  7005  0038                     	ds	1
  7006  0039                     ??_storeNVM:	
  7007  0039                     ??___wmul:	
  7008                           ; 1 bytes @ 0x19
  7009                           
  7010  0039                     ___wmul@product:	
  7011                           ; 1 bytes @ 0x19
  7012                           
  7013                           
  7014                           ; 2 bytes @ 0x19
  7015  0039                     	ds	1
  7016  003A                     ema@average:	
  7017                           
  7018                           ; 2 bytes @ 0x1A
  7019  003A                     	ds	1
  7020  003B                     ??_initGlobalData:	
  7021  003B                     ??_returnToPage:	
  7022                           ; 1 bytes @ 0x1B
  7023                           
  7024  003B                     ?_memcpy:	
  7025                           ; 1 bytes @ 0x1B
  7026                           
  7027  003B                     ?_swap:	
  7028                           ; 1 bytes @ 0x1B
  7029                           
  7030  003B                     ?___xxtofl:	
  7031                           ; 1 bytes @ 0x1B
  7032                           
  7033  003B                     OLED_print_xy@col:	
  7034                           ; 4 bytes @ 0x1B
  7035                           
  7036  003B                     storeNVM@n:	
  7037                           ; 1 bytes @ 0x1B
  7038                           
  7039  003B                     itoa@str:	
  7040                           ; 1 bytes @ 0x1B
  7041                           
  7042  003B                     swap@len:	
  7043                           ; 1 bytes @ 0x1B
  7044                           
  7045  003B                     memcpy@s1:	
  7046                           ; 2 bytes @ 0x1B
  7047                           
  7048  003B                     ___xxtofl@val:	
  7049                           ; 2 bytes @ 0x1B
  7050                           
  7051                           
  7052                           ; 4 bytes @ 0x1B
  7053  003B                     	ds	1
  7054  003C                     ??_viewErrorMessage:	
  7055  003C                     timeSince@now:	
  7056                           ; 1 bytes @ 0x1C
  7057                           
  7058  003C                     ema@alpha:	
  7059                           ; 4 bytes @ 0x1C
  7060                           
  7061                           
  7062                           ; 4 bytes @ 0x1C
  7063  003C                     	ds	1
  7064  003D                     returnToPage@page:	
  7065  003D                     swap@s1:	
  7066                           ; 1 bytes @ 0x1D
  7067                           
  7068  003D                     memcpy@n:	
  7069                           ; 2 bytes @ 0x1D
  7070                           
  7071                           
  7072                           ; 2 bytes @ 0x1D
  7073  003D                     	ds	1
  7074  003E                     viewErrorMessage@errorCode:	
  7075  003E                     returnToPage@n:	
  7076                           ; 1 bytes @ 0x1E
  7077                           
  7078                           
  7079                           ; 1 bytes @ 0x1E
  7080  003E                     	ds	1
  7081  003F                     ??_memcpy:	
  7082  003F                     ??___xxtofl:	
  7083                           ; 1 bytes @ 0x1F
  7084                           
  7085  003F                     initGlobalData@n:	
  7086                           ; 1 bytes @ 0x1F
  7087                           
  7088  003F                     _viewErrorMessage$1314:	
  7089                           ; 1 bytes @ 0x1F
  7090                           
  7091  003F                     swap@s2:	
  7092                           ; 2 bytes @ 0x1F
  7093                           
  7094                           
  7095                           ; 2 bytes @ 0x1F
  7096  003F                     	ds	1
  7097  0040                     ??_controller:	
  7098  0040                     ?_getNextState:	
  7099                           ; 1 bytes @ 0x20
  7100                           
  7101  0040                     ??_ema:	
  7102                           ; 1 bytes @ 0x20
  7103                           
  7104  0040                     getNextState@intState:	
  7105                           ; 1 bytes @ 0x20
  7106                           
  7107  0040                     memcpy@d1:	
  7108                           ; 1 bytes @ 0x20
  7109                           
  7110  0040                     initGlobalData@heater:	
  7111                           ; 1 bytes @ 0x20
  7112                           
  7113                           
  7114                           ; 2 bytes @ 0x20
  7115  0040                     	ds	1
  7116  0041                     ??_swap:	
  7117  0041                     getNextState@pb:	
  7118                           ; 1 bytes @ 0x21
  7119                           
  7120  0041                     memcpy@tmp:	
  7121                           ; 1 bytes @ 0x21
  7122                           
  7123                           
  7124                           ; 1 bytes @ 0x21
  7125  0041                     	ds	1
  7126  0042                     getNextState@timeout:	
  7127  0042                     swap@c:	
  7128                           ; 1 bytes @ 0x22
  7129                           
  7130  0042                     memcpy@s:	
  7131                           ; 1 bytes @ 0x22
  7132                           
  7133                           
  7134                           ; 2 bytes @ 0x22
  7135  0042                     	ds	1
  7136  0043                     ??_getNextState:	
  7137  0043                     ___xxtofl@sign:	
  7138                           ; 1 bytes @ 0x23
  7139                           
  7140                           
  7141                           ; 1 bytes @ 0x23
  7142  0043                     	ds	1
  7143  0044                     ___xxtofl@exp:	
  7144  0044                     memcpy@d:	
  7145                           ; 1 bytes @ 0x24
  7146                           
  7147                           
  7148                           ; 1 bytes @ 0x24
  7149  0044                     	ds	1
  7150  0045                     controller@timer:	
  7151  0045                     ___xxtofl@arg:	
  7152                           ; 4 bytes @ 0x25
  7153                           
  7154                           
  7155                           ; 4 bytes @ 0x25
  7156  0045                     	ds	3
  7157  0048                     getNextState@state:	
  7158  0048                     ema@tmp0:	
  7159                           ; 1 bytes @ 0x28
  7160                           
  7161                           
  7162                           ; 4 bytes @ 0x28
  7163  0048                     	ds	1
  7164  0049                     ?___flmul:	
  7165  0049                     getNextState@n:	
  7166                           ; 4 bytes @ 0x29
  7167                           
  7168  0049                     controller@n:	
  7169                           ; 1 bytes @ 0x29
  7170                           
  7171  0049                     ___flmul@b:	
  7172                           ; 1 bytes @ 0x29
  7173                           
  7174                           
  7175                           ; 4 bytes @ 0x29
  7176  0049                     	ds	4
  7177  004D                     ___flmul@a:	
  7178                           
  7179                           ; 4 bytes @ 0x2D
  7180  004D                     	ds	4
  7181  0051                     ??___flmul:	
  7182                           
  7183                           ; 1 bytes @ 0x31
  7184  0051                     	ds	5
  7185  0056                     ??_getAnalogValues:	
  7186  0056                     ??_checkSensor:	
  7187                           ; 1 bytes @ 0x36
  7188                           
  7189  0056                     ??_spinInput:	
  7190                           ; 1 bytes @ 0x36
  7191                           
  7192  0056                     ??___flneg:	
  7193                           ; 1 bytes @ 0x36
  7194                           
  7195  0056                     ??___flsub:	
  7196                           ; 1 bytes @ 0x36
  7197                           
  7198  0056                     ___fltol@sign1:	
  7199                           ; 1 bytes @ 0x36
  7200                           
  7201                           
  7202                           ; 1 bytes @ 0x36
  7203  0056                     	ds	1
  7204  0057                     spinInput@dir:	
  7205  0057                     ___fltol@exp1:	
  7206                           ; 1 bytes @ 0x37
  7207                           
  7208                           
  7209                           ; 1 bytes @ 0x37
  7210  0057                     	ds	1
  7211  0058                     ??_sortCur:	
  7212                           
  7213                           	psect	maintext
  7214  103B                     __pmaintext:	
  7215                           ; 1 bytes @ 0x38
  7216 ;;
  7217 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7218 ;;
  7219 ;; *************** function _main *****************
  7220 ;; Defined at:
  7221 ;;		line 30 in file "main.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;		None
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  sysCheckInte    4   64[BANK3 ] unsigned long 
  7226 ;;  displayOff      1   70[BANK3 ] unsigned char 
  7227 ;;  controllerId    1   69[BANK3 ] unsigned char 
  7228 ;;  initDone        1   68[BANK3 ] unsigned char 
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      void 
  7231 ;; Registers used:
  7232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7233 ;; Tracked objects:
  7234 ;;		On entry : B3F/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7239 ;;      Locals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7240 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7241 ;;      Totals:         0       0       1       0       7       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7242 ;;Total ram usage:        8 bytes
  7243 ;; Hardware stack levels required when called:    9
  7244 ;; This function calls:
  7245 ;;		_OLED_command
  7246 ;;		_OLED_init
  7247 ;;		_OLED_loadSpecialChars
  7248 ;;		___flge
  7249 ;;		_calcRequiredPower
  7250 ;;		_channelThing
  7251 ;;		_checkChannelStatus
  7252 ;;		_checkSensor
  7253 ;;		_controller
  7254 ;;		_getAnalogValues
  7255 ;;		_getLastError
  7256 ;;		_initGlobalData
  7257 ;;		_initialize
  7258 ;;		_menu
  7259 ;;		_readNVM
  7260 ;;		_systemCheck
  7261 ;;		_timeSince
  7262 ;;		_viewErrorMessage
  7263 ;; This function is called by:
  7264 ;;		Startup code after reset
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           
  7269                           ;psect for function _main
  7270  103B                     _main:	
  7271                           
  7272                           ;main.c: 32:  uint32_t sysCheckInterval = 0;
  7273                           
  7274                           ;incstack = 0
  7275                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7276  103B  3000               	movlw	0
  7277  103C  0143               	movlb	3	; select bank3
  7278  103D  00E3               	movwf	(main@sysCheckInterval+3)^(0+384)
  7279  103E  3000               	movlw	0
  7280  103F  00E2               	movwf	(main@sysCheckInterval+2)^(0+384)
  7281  1040  3000               	movlw	0
  7282  1041  00E1               	movwf	(main@sysCheckInterval+1)^(0+384)
  7283  1042  3000               	movlw	0
  7284  1043  00E0               	movwf	main@sysCheckInterval^(0+384)
  7285                           
  7286                           ;main.c: 33:  uint8_t controllerIdle = 1;
  7287  1044  01E5               	clrf	main@controllerIdle^(0+384)
  7288  1045  0AE5               	incf	main@controllerIdle^(0+384),f
  7289                           
  7290                           ;main.c: 34:  uint8_t initDone = 0;
  7291  1046  01E4               	clrf	main@initDone^(0+384)
  7292                           
  7293                           ;main.c: 35:  uint8_t displayOff = 0;
  7294  1047  01E6               	clrf	main@displayOff^(0+384)
  7295                           
  7296                           ;main.c: 37:  initialize();
  7297  1048  31B3  231B  3190   	fcall	_initialize
  7298                           
  7299                           ;main.c: 38:  LATBbits.LATB5 = 1;
  7300  104B  0140               	movlb	0	; select bank0
  7301  104C  1699               	bsf	25,5	;volatile
  7302                           
  7303                           ;main.c: 39:  OLED_init();
  7304  104D  31A9  212F  3190   	fcall	_OLED_init
  7305                           
  7306                           ;main.c: 40:  OLED_loadSpecialChars();
  7307  1050  31BE  26EF  3190   	fcall	_OLED_loadSpecialChars
  7308                           
  7309                           ;main.c: 41:  OLED_command(0x02);
  7310  1053  3002               	movlw	2
  7311  1054  31BE  264D  3190   	fcall	_OLED_command
  7312                           
  7313                           ;main.c: 42:  OLED_command(0x01);
  7314  1057  3001               	movlw	1
  7315  1058  31BE  264D  3190   	fcall	_OLED_command
  7316                           
  7317                           ;main.c: 43:  initGlobalData();
  7318  105B  31AE  26F2  3190   	fcall	_initGlobalData
  7319                           
  7320                           ;main.c: 44:  LATCbits.LATC3 = 1;
  7321  105E  0140               	movlb	0	; select bank0
  7322  105F  159A               	bsf	26,3	;volatile
  7323                           
  7324                           ;main.c: 47:  if (PORTAbits.RA7)
  7325  1060  1F8C               	btfss	12,7	;volatile
  7326  1061  2865               	goto	l124
  7327                           
  7328                           ;main.c: 48:   readNVM();
  7329  1062  31A8  2023  3190   	fcall	_readNVM
  7330  1065                     l124:	
  7331                           ;main.c: 50:  while (1) {
  7332                           
  7333  1065  0064               	clrwdt	;# 
  7334                           
  7335                           ;main.c: 55:   getAnalogValues();
  7336  1066  319A  226A  3190   	fcall	_getAnalogValues
  7337                           
  7338                           ;main.c: 57:   if (timeSince(sysCheckInterval) > 5) {
  7339  1069  0143               	movlb	3	; select bank3
  7340  106A  0863               	movf	(main@sysCheckInterval+3)^(0+384),w
  7341  106B  0140               	movlb	0	; select bank0
  7342  106C  00AF               	movwf	timeSince@since+3
  7343  106D  0143               	movlb	3	; select bank3
  7344  106E  0862               	movf	(main@sysCheckInterval+2)^(0+384),w
  7345  106F  0140               	movlb	0	; select bank0
  7346  1070  00AE               	movwf	timeSince@since+2
  7347  1071  0143               	movlb	3	; select bank3
  7348  1072  0861               	movf	(main@sysCheckInterval+1)^(0+384),w
  7349  1073  0140               	movlb	0	; select bank0
  7350  1074  00AD               	movwf	timeSince@since+1
  7351  1075  0143               	movlb	3	; select bank3
  7352  1076  0860               	movf	main@sysCheckInterval^(0+384),w
  7353  1077  0140               	movlb	0	; select bank0
  7354  1078  00AC               	movwf	timeSince@since
  7355  1079  31B7  2780  3190   	fcall	_timeSince
  7356  107C  0140               	movlb	0	; select bank0
  7357  107D  082F               	movf	?_timeSince+3,w
  7358  107E  1D03               	btfss	3,2
  7359  107F  288A               	goto	l11359
  7360  1080  082E               	movf	?_timeSince+2,w
  7361  1081  1D03               	btfss	3,2
  7362  1082  288A               	goto	l11359
  7363  1083  082D               	movf	?_timeSince+1,w
  7364  1084  1D03               	btfss	3,2
  7365  1085  288A               	goto	l11359
  7366  1086  3006               	movlw	6
  7367  1087  022C               	subwf	?_timeSince,w
  7368  1088  1C03               	btfss	3,0
  7369  1089  2896               	goto	l11363
  7370  108A                     l11359:	
  7371                           
  7372                           ;main.c: 58:    sysCheckInterval = tick100ms;
  7373  108A  0143               	movlb	3	; select bank3
  7374  108B  086E               	movf	(_tick100ms+3)^(0+384),w	;volatile
  7375  108C  00E3               	movwf	(main@sysCheckInterval+3)^(0+384)
  7376  108D  086D               	movf	(_tick100ms+2)^(0+384),w	;volatile
  7377  108E  00E2               	movwf	(main@sysCheckInterval+2)^(0+384)
  7378  108F  086C               	movf	(_tick100ms+1)^(0+384),w	;volatile
  7379  1090  00E1               	movwf	(main@sysCheckInterval+1)^(0+384)
  7380  1091  086B               	movf	_tick100ms^(0+384),w	;volatile
  7381  1092  00E0               	movwf	main@sysCheckInterval^(0+384)
  7382                           
  7383                           ;main.c: 59:    systemCheck();
  7384  1093  31A2  2209  3190   	fcall	_systemCheck
  7385  1096                     l11363:	
  7386                           ;main.c: 60:   }
  7387                           
  7388                           
  7389                           ;main.c: 63:   if (checkSensor()) {
  7390  1096  31AD  25E9  3190   	fcall	_checkSensor
  7391  1099  3A00               	xorlw	0
  7392  109A  1903               	skipnz
  7393  109B  28C2               	goto	l11375
  7394                           
  7395                           ;main.c: 65:    calcRequiredPower();
  7396  109C  3180  20D0  3190   	fcall	_calcRequiredPower
  7397                           
  7398                           ;main.c: 66:    initDone = 1;
  7399  109F  0143               	movlb	3	; select bank3
  7400  10A0  01E4               	clrf	main@initDone^(0+384)
  7401  10A1  0AE4               	incf	main@initDone^(0+384),f
  7402                           
  7403                           ;main.c: 67:    if ((data.status.SENSOR_OK) && (data.tempC < 1))
  7404  10A2  3073               	movlw	115
  7405  10A3  0086               	movwf	6
  7406  10A4  3027               	movlw	39
  7407  10A5  0087               	movwf	7
  7408  10A6  1D81               	btfss	1,3
  7409  10A7  28C2               	goto	l11375
  7410  10A8  304A               	movlw	74
  7411  10A9  0086               	movwf	6
  7412  10AA  3027               	movlw	39
  7413  10AB  0087               	movwf	7
  7414  10AC  3F40               	moviw [0]fsr1
  7415  10AD  0141               	movlb	1	; select bank1
  7416  10AE  00C9               	movwf	___flge@ff1^(0+128)
  7417  10AF  3F41               	moviw [1]fsr1
  7418  10B0  00CA               	movwf	(___flge@ff1+1)^(0+128)
  7419  10B1  3F42               	moviw [2]fsr1
  7420  10B2  00CB               	movwf	(___flge@ff1+2)^(0+128)
  7421  10B3  3F43               	moviw [3]fsr1
  7422  10B4  00CC               	movwf	(___flge@ff1+3)^(0+128)
  7423  10B5  303F               	movlw	63
  7424  10B6  00D0               	movwf	(___flge@ff2+3)^(0+128)
  7425  10B7  3080               	movlw	128
  7426  10B8  00CF               	movwf	(___flge@ff2+2)^(0+128)
  7427  10B9  3000               	movlw	0
  7428  10BA  00CE               	movwf	(___flge@ff2+1)^(0+128)
  7429  10BB  3000               	movlw	0
  7430  10BC  00CD               	movwf	___flge@ff2^(0+128)
  7431  10BD  3198  202D  3190   	fcall	___flge
  7432  10C0  1C03               	btfss	3,0
  7433                           
  7434                           ;main.c: 68:     __nop();
  7435  10C1  0000               	nop
  7436  10C2                     l11375:	
  7437                           ;main.c: 69:   }
  7438                           
  7439                           
  7440                           ;main.c: 73:   if (controllerIdle) {
  7441  10C2  0143               	movlb	3	; select bank3
  7442  10C3  0865               	movf	main@controllerIdle^(0+384),w
  7443  10C4  1903               	btfsc	3,2
  7444  10C5  28D2               	goto	l11383
  7445                           
  7446                           ;main.c: 74:    if (initDone) {
  7447  10C6  0864               	movf	main@initDone^(0+384),w
  7448  10C7  1903               	btfsc	3,2
  7449  10C8  28DA               	goto	l11385
  7450                           
  7451                           ;main.c: 77:     checkChannelStatus();
  7452  10C9  3193  23DF  3190   	fcall	_checkChannelStatus
  7453                           
  7454                           ;main.c: 78:     channelThing();
  7455  10CC  318B  2395  3190   	fcall	_channelThing
  7456                           
  7457                           ;main.c: 79:     controllerIdle = 0;
  7458  10CF  0143               	movlb	3	; select bank3
  7459  10D0  01E5               	clrf	main@controllerIdle^(0+384)
  7460                           
  7461                           ;main.c: 81:   } else {
  7462                           
  7463                           ;main.c: 80:    }
  7464  10D1  28DA               	goto	l11385
  7465  10D2                     l11383:	
  7466                           
  7467                           ;main.c: 83:    controllerIdle = controller();
  7468  10D2  31AC  2434  3190   	fcall	_controller
  7469  10D5  0141               	movlb	1	; select bank1
  7470  10D6  00EF               	movwf	??_main^(0+128)
  7471  10D7  086F               	movf	??_main^(0+128),w
  7472  10D8  0143               	movlb	3	; select bank3
  7473  10D9  00E5               	movwf	main@controllerIdle^(0+384)
  7474  10DA                     l11385:	
  7475                           ;main.c: 84:   }
  7476                           
  7477                           
  7478                           ;main.c: 86:   if (getLastError() != NO_ERROR) {
  7479  10DA  31BE  26C2  3190   	fcall	_getLastError
  7480  10DD  3A00               	xorlw	0
  7481  10DE  1903               	skipnz
  7482  10DF  28ED               	goto	l11391
  7483                           
  7484                           ;main.c: 87:    userActivity = tick100ms;
  7485  10E0  0143               	movlb	3	; select bank3
  7486  10E1  086E               	movf	(_tick100ms+3)^(0+384),w	;volatile
  7487  10E2  00EA               	movwf	(_userActivity+3)^(0+384)	;volatile
  7488  10E3  086D               	movf	(_tick100ms+2)^(0+384),w	;volatile
  7489  10E4  00E9               	movwf	(_userActivity+2)^(0+384)	;volatile
  7490  10E5  086C               	movf	(_tick100ms+1)^(0+384),w	;volatile
  7491  10E6  00E8               	movwf	(_userActivity+1)^(0+384)	;volatile
  7492  10E7  086B               	movf	_tick100ms^(0+384),w	;volatile
  7493  10E8  00E7               	movwf	_userActivity^(0+384)	;volatile
  7494                           
  7495                           ;main.c: 88:    viewErrorMessage();
  7496  10E9  31A3  2374  3190   	fcall	_viewErrorMessage
  7497                           
  7498                           ;main.c: 89:   } else if (! displayOff) {
  7499  10EC  28F4               	goto	l11395
  7500  10ED                     l11391:	
  7501  10ED  0143               	movlb	3	; select bank3
  7502  10EE  0866               	movf	main@displayOff^(0+384),w
  7503  10EF  1D03               	btfss	3,2
  7504  10F0  28F4               	goto	l11395
  7505                           
  7506                           ;main.c: 90:    menu();
  7507  10F1  31B6  2695  3190   	fcall	_menu
  7508  10F4                     l11395:	
  7509                           ;main.c: 91:   }
  7510                           
  7511                           
  7512                           ;main.c: 94:   if (displayOff && ((timeSince(userActivity) < 1200))) {
  7513  10F4  0143               	movlb	3	; select bank3
  7514  10F5  0866               	movf	main@displayOff^(0+384),w
  7515  10F6  1903               	btfsc	3,2
  7516  10F7  291B               	goto	l11403
  7517  10F8  086A               	movf	(_userActivity+3)^(0+384),w	;volatile
  7518  10F9  0140               	movlb	0	; select bank0
  7519  10FA  00AF               	movwf	timeSince@since+3
  7520  10FB  0143               	movlb	3	; select bank3
  7521  10FC  0869               	movf	(_userActivity+2)^(0+384),w	;volatile
  7522  10FD  0140               	movlb	0	; select bank0
  7523  10FE  00AE               	movwf	timeSince@since+2
  7524  10FF  0143               	movlb	3	; select bank3
  7525  1100  0868               	movf	(_userActivity+1)^(0+384),w	;volatile
  7526  1101  0140               	movlb	0	; select bank0
  7527  1102  00AD               	movwf	timeSince@since+1
  7528  1103  0143               	movlb	3	; select bank3
  7529  1104  0867               	movf	_userActivity^(0+384),w	;volatile
  7530  1105  0140               	movlb	0	; select bank0
  7531  1106  00AC               	movwf	timeSince@since
  7532  1107  31B7  2780  3190   	fcall	_timeSince
  7533  110A  0140               	movlb	0	; select bank0
  7534  110B  082F               	movf	?_timeSince+3,w
  7535  110C  1D03               	btfss	3,2
  7536  110D  291B               	goto	l11403
  7537  110E  082E               	movf	?_timeSince+2,w
  7538  110F  1D03               	btfss	3,2
  7539  1110  291B               	goto	l11403
  7540  1111  30B0               	movlw	176
  7541  1112  022C               	subwf	?_timeSince,w
  7542  1113  3004               	movlw	4
  7543  1114  3B2D               	subwfb	?_timeSince+1,w
  7544  1115  1803               	btfsc	3,0
  7545  1116  291B               	goto	l11403
  7546                           
  7547                           ;main.c: 96:    displayOff = 0;
  7548  1117  0143               	movlb	3	; select bank3
  7549  1118  01E6               	clrf	main@displayOff^(0+384)
  7550                           
  7551                           ;main.c: 97:    OLED_command(0x08 | 0x04);
  7552  1119  300C               	movlw	12
  7553  111A  293F               	goto	L1
  7554  111B                     l11403:	
  7555                           ;main.c: 98:   } else if (timeSince(userActivity) > 1200) {
  7556                           
  7557  111B  0143               	movlb	3	; select bank3
  7558  111C  086A               	movf	(_userActivity+3)^(0+384),w	;volatile
  7559  111D  0140               	movlb	0	; select bank0
  7560  111E  00AF               	movwf	timeSince@since+3
  7561  111F  0143               	movlb	3	; select bank3
  7562  1120  0869               	movf	(_userActivity+2)^(0+384),w	;volatile
  7563  1121  0140               	movlb	0	; select bank0
  7564  1122  00AE               	movwf	timeSince@since+2
  7565  1123  0143               	movlb	3	; select bank3
  7566  1124  0868               	movf	(_userActivity+1)^(0+384),w	;volatile
  7567  1125  0140               	movlb	0	; select bank0
  7568  1126  00AD               	movwf	timeSince@since+1
  7569  1127  0143               	movlb	3	; select bank3
  7570  1128  0867               	movf	_userActivity^(0+384),w	;volatile
  7571  1129  0140               	movlb	0	; select bank0
  7572  112A  00AC               	movwf	timeSince@since
  7573  112B  31B7  2780  3190   	fcall	_timeSince
  7574  112E  0140               	movlb	0	; select bank0
  7575  112F  082F               	movf	?_timeSince+3,w
  7576  1130  1D03               	btfss	3,2
  7577  1131  293B               	goto	l11405
  7578  1132  082E               	movf	?_timeSince+2,w
  7579  1133  1D03               	btfss	3,2
  7580  1134  293B               	goto	l11405
  7581  1135  30B1               	movlw	177
  7582  1136  022C               	subwf	?_timeSince,w
  7583  1137  3004               	movlw	4
  7584  1138  3B2D               	subwfb	?_timeSince+1,w
  7585  1139  1C03               	btfss	3,0
  7586  113A  2942               	goto	l11409
  7587  113B                     l11405:	
  7588                           
  7589                           ;main.c: 99:    displayOff = 1;
  7590  113B  0143               	movlb	3	; select bank3
  7591  113C  01E6               	clrf	main@displayOff^(0+384)
  7592  113D  0AE6               	incf	main@displayOff^(0+384),f
  7593                           
  7594                           ;main.c: 100:    OLED_command(0x08 | 0x00);
  7595  113E  3008               	movlw	8
  7596  113F                     L1:	
  7597  113F  31BE  264D  3190   	fcall	_OLED_command
  7598  1142                     l11409:	
  7599                           ;main.c: 101:   }
  7600                           
  7601                           
  7602                           ;main.c: 106:   _delay((unsigned long)((40)*(4000000UL/4000.0)));
  7603  1142  3034               	movlw	52
  7604  1143  0141               	movlb	1	; select bank1
  7605  1144  00EF               	movwf	??_main^(0+128)
  7606  1145  30F1               	movlw	241
  7607  1146                     u14887:	
  7608  1146  0B89               	decfsz	9,f
  7609  1147  2946               	goto	u14887
  7610  1148  0BEF               	decfsz	??_main^(0+128),f
  7611  1149  2946               	goto	u14887
  7612  114A  3200               	nop2
  7613                           
  7614                           ;main.c: 107:   __nop();
  7615  114B  0000               	nop
  7616                           
  7617                           ;main.c: 108:  }
  7618  114C  2865               	goto	l124
  7619  114D                     __end_of_main:	
  7620                           
  7621                           	psect	text1
  7622  2374                     __ptext1:	
  7623 ;; *************** function _viewErrorMessage *****************
  7624 ;; Defined at:
  7625 ;;		line 36 in file "error.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;  errorCode       1   30[BANK0 ] enum E7846
  7630 ;; Return value:  Size  Location     Type
  7631 ;;                  1    wreg      void 
  7632 ;; Registers used:
  7633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7634 ;; Tracked objects:
  7635 ;;		On entry : 0/0
  7636 ;;		On exit  : 0/0
  7637 ;;		Unchanged: 0/0
  7638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7640 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7641 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7642 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7643 ;;Total ram usage:        5 bytes
  7644 ;; Hardware stack levels used:    1
  7645 ;; Hardware stack levels required when called:    7
  7646 ;; This function calls:
  7647 ;;		_OLED_command
  7648 ;;		_OLED_print_xy
  7649 ;;		___awmod
  7650 ;;		_getPB
  7651 ;; This function is called by:
  7652 ;;		_main
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           
  7657                           ;psect for function _viewErrorMessage
  7658  2374                     _viewErrorMessage:	
  7659                           
  7660                           ;error.c: 38:  enum e_errorcode errorCode;;error.c: 40:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
  7661                           
  7662                           ;incstack = 0
  7663                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7664  2374  0140               	movlb	0	; select bank0
  7665  2375  0859               	movf	_head,w
  7666  2376  0658               	xorwf	_tail,w
  7667  2377  1903               	skipnz
  7668  2378  2B86               	goto	l11259
  7669  2379  0858               	movf	_tail,w
  7670  237A  3EA0               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7671  237B  0086               	movwf	6
  7672  237C  3002               	movlw	2	; select bank5/6
  7673  237D  0087               	movwf	7
  7674  237E  0801               	movf	1,w
  7675  237F  00BC               	movwf	??_viewErrorMessage
  7676  2380  01BD               	clrf	??_viewErrorMessage+1
  7677  2381  083C               	movf	??_viewErrorMessage,w
  7678  2382  00BF               	movwf	_viewErrorMessage$1314
  7679  2383  083D               	movf	??_viewErrorMessage+1,w
  7680  2384  00C0               	movwf	_viewErrorMessage$1314+1
  7681  2385  2B88               	goto	l11261
  7682  2386                     l11259:	
  7683  2386  01BF               	clrf	_viewErrorMessage$1314
  7684  2387  01C0               	clrf	_viewErrorMessage$1314+1
  7685  2388                     l11261:	
  7686  2388  083F               	movf	_viewErrorMessage$1314,w
  7687  2389  00BC               	movwf	??_viewErrorMessage
  7688  238A  083C               	movf	??_viewErrorMessage,w
  7689  238B  00BE               	movwf	viewErrorMessage@errorCode
  7690                           
  7691                           ;error.c: 42:  OLED_command(0x02);
  7692  238C  3002               	movlw	2
  7693  238D  31BE  264D  31A3   	fcall	_OLED_command
  7694                           
  7695                           ;error.c: 43:  switch(errorCode) {
  7696  2390  2CB6               	goto	l11295
  7697  2391                     l11265:	
  7698                           ;error.c: 44:  case WARN_REMOVED:
  7699                           
  7700                           
  7701                           ;error.c: 45:   OLED_print_xy(0, 0, "Heater      ");
  7702  2391  0140               	movlb	0	; select bank0
  7703  2392  01B3               	clrf	OLED_print_xy@row
  7704  2393  3030               	movlw	low (STR_62| (0+32768))
  7705  2394  00B4               	movwf	OLED_print_xy@s
  7706  2395  30B9               	movlw	high (STR_62| (0+32768))
  7707  2396  00B5               	movwf	OLED_print_xy@s+1
  7708  2397  3000               	movlw	0
  7709  2398  31B0  208E  31A3   	fcall	_OLED_print_xy
  7710                           
  7711                           ;error.c: 46:   OLED_print_xy(0, 1, "removed     ");
  7712  239B  0140               	movlb	0	; select bank0
  7713  239C  01B3               	clrf	OLED_print_xy@row
  7714  239D  0AB3               	incf	OLED_print_xy@row,f
  7715  239E  3064               	movlw	low (STR_63| (0+32768))
  7716  239F  00B4               	movwf	OLED_print_xy@s
  7717  23A0  30B9               	movlw	high (STR_63| (0+32768))
  7718  23A1  00B5               	movwf	OLED_print_xy@s+1
  7719  23A2  3000               	movlw	0
  7720  23A3  31B0  208E  31A3   	fcall	_OLED_print_xy
  7721                           
  7722                           ;error.c: 47:   break;
  7723  23A6  2CCC               	goto	l11297
  7724  23A7                     l11267:	
  7725                           ;error.c: 48:  case WARN_SHORTED:
  7726                           
  7727                           
  7728                           ;error.c: 49:   OLED_print_xy(0, 0, "Output      ");
  7729  23A7  0140               	movlb	0	; select bank0
  7730  23A8  01B3               	clrf	OLED_print_xy@row
  7731  23A9  304A               	movlw	low (STR_64| (0+32768))
  7732  23AA  00B4               	movwf	OLED_print_xy@s
  7733  23AB  30B9               	movlw	high (STR_64| (0+32768))
  7734  23AC  00B5               	movwf	OLED_print_xy@s+1
  7735  23AD  3000               	movlw	0
  7736  23AE  31B0  208E  31A3   	fcall	_OLED_print_xy
  7737                           
  7738                           ;error.c: 50:   OLED_print_xy(0, 1, "shorted!    ");
  7739  23B1  0140               	movlb	0	; select bank0
  7740  23B2  01B3               	clrf	OLED_print_xy@row
  7741  23B3  0AB3               	incf	OLED_print_xy@row,f
  7742  23B4  308B               	movlw	low (STR_65| (0+32768))
  7743  23B5  00B4               	movwf	OLED_print_xy@s
  7744  23B6  30B9               	movlw	high (STR_65| (0+32768))
  7745  23B7  00B5               	movwf	OLED_print_xy@s+1
  7746  23B8  3000               	movlw	0
  7747  23B9  31B0  208E  31A3   	fcall	_OLED_print_xy
  7748                           
  7749                           ;error.c: 51:   break;
  7750  23BC  2CCC               	goto	l11297
  7751  23BD                     l11269:	
  7752                           ;error.c: 52:  case WARN_OVERCURRENT:
  7753                           
  7754                           
  7755                           ;error.c: 53:   OLED_print_xy(0, 0, "Overcurrent ");
  7756  23BD  0140               	movlb	0	; select bank0
  7757  23BE  01B3               	clrf	OLED_print_xy@row
  7758  23BF  30F3               	movlw	low (STR_66| (0+32768))
  7759  23C0  00B4               	movwf	OLED_print_xy@s
  7760  23C1  30B9               	movlw	high (STR_66| (0+32768))
  7761  23C2  00B5               	movwf	OLED_print_xy@s+1
  7762  23C3  3000               	movlw	0
  7763  23C4  31B0  208E  31A3   	fcall	_OLED_print_xy
  7764                           
  7765                           ;error.c: 54:   OLED_print_xy(0, 1, "detected!   ");
  7766  23C7  0140               	movlb	0	; select bank0
  7767  23C8  01B3               	clrf	OLED_print_xy@row
  7768  23C9  0AB3               	incf	OLED_print_xy@row,f
  7769  23CA  30B2               	movlw	low (STR_67| (0+32768))
  7770  23CB  00B4               	movwf	OLED_print_xy@s
  7771  23CC  30B9               	movlw	high (STR_67| (0+32768))
  7772  23CD  00B5               	movwf	OLED_print_xy@s+1
  7773  23CE  3000               	movlw	0
  7774  23CF  31B0  208E  31A3   	fcall	_OLED_print_xy
  7775                           
  7776                           ;error.c: 55:   break;
  7777  23D2  2CCC               	goto	l11297
  7778  23D3                     l11271:	
  7779                           ;error.c: 56:  case WARN_HEATER_OVERCURRENT:
  7780                           
  7781                           
  7782                           ;error.c: 57:   OLED_print_xy(0, 0, "Heater      ");
  7783  23D3  0140               	movlb	0	; select bank0
  7784  23D4  01B3               	clrf	OLED_print_xy@row
  7785  23D5  3030               	movlw	low (STR_62| (0+32768))
  7786  23D6  00B4               	movwf	OLED_print_xy@s
  7787  23D7  30B9               	movlw	high (STR_62| (0+32768))
  7788  23D8  00B5               	movwf	OLED_print_xy@s+1
  7789  23D9  3000               	movlw	0
  7790  23DA  31B0  208E  31A3   	fcall	_OLED_print_xy
  7791                           
  7792                           ;error.c: 58:   OLED_print_xy(0, 1, "overcurrent ");
  7793  23DD  0140               	movlb	0	; select bank0
  7794  23DE  01B3               	clrf	OLED_print_xy@row
  7795  23DF  0AB3               	incf	OLED_print_xy@row,f
  7796  23E0  3000               	movlw	low (STR_69| (0+32768))
  7797  23E1  00B4               	movwf	OLED_print_xy@s
  7798  23E2  30BA               	movlw	high (STR_69| (0+32768))
  7799  23E3  00B5               	movwf	OLED_print_xy@s+1
  7800  23E4  3000               	movlw	0
  7801  23E5  31B0  208E  31A3   	fcall	_OLED_print_xy
  7802                           
  7803                           ;error.c: 59:   break;
  7804  23E8  2CCC               	goto	l11297
  7805  23E9                     l11273:	
  7806                           ;error.c: 60:  case WARN_VOLT_HIGH:
  7807                           
  7808                           
  7809                           ;error.c: 61:   OLED_print_xy(0, 0, "Supply volt.");
  7810  23E9  0140               	movlb	0	; select bank0
  7811  23EA  01B3               	clrf	OLED_print_xy@row
  7812  23EB  300D               	movlw	low (STR_70| (0+32768))
  7813  23EC  00B4               	movwf	OLED_print_xy@s
  7814  23ED  30BA               	movlw	high (STR_70| (0+32768))
  7815  23EE  00B5               	movwf	OLED_print_xy@s+1
  7816  23EF  3000               	movlw	0
  7817  23F0  31B0  208E  31A3   	fcall	_OLED_print_xy
  7818                           
  7819                           ;error.c: 62:   OLED_print_xy(0, 1, "too high!   ");
  7820  23F3  0140               	movlb	0	; select bank0
  7821  23F4  01B3               	clrf	OLED_print_xy@row
  7822  23F5  0AB3               	incf	OLED_print_xy@row,f
  7823  23F6  30BF               	movlw	low (STR_71| (0+32768))
  7824  23F7  00B4               	movwf	OLED_print_xy@s
  7825  23F8  30B9               	movlw	high (STR_71| (0+32768))
  7826  23F9  00B5               	movwf	OLED_print_xy@s+1
  7827  23FA  3000               	movlw	0
  7828  23FB  31B0  208E  31A3   	fcall	_OLED_print_xy
  7829                           
  7830                           ;error.c: 63:   break;
  7831  23FE  2CCC               	goto	l11297
  7832  23FF                     l11275:	
  7833                           ;error.c: 64:  case WARN_VOLT_LOW:
  7834                           
  7835                           
  7836                           ;error.c: 65:   OLED_print_xy(0, 0, "Supply volt.");
  7837  23FF  0140               	movlb	0	; select bank0
  7838  2400  01B3               	clrf	OLED_print_xy@row
  7839  2401  300D               	movlw	low (STR_70| (0+32768))
  7840  2402  00B4               	movwf	OLED_print_xy@s
  7841  2403  30BA               	movlw	high (STR_70| (0+32768))
  7842  2404  00B5               	movwf	OLED_print_xy@s+1
  7843  2405  3000               	movlw	0
  7844  2406  31B0  208E  31A3   	fcall	_OLED_print_xy
  7845                           
  7846                           ;error.c: 66:   OLED_print_xy(0, 1, "too low!    ");
  7847  2409  0140               	movlb	0	; select bank0
  7848  240A  01B3               	clrf	OLED_print_xy@row
  7849  240B  0AB3               	incf	OLED_print_xy@row,f
  7850  240C  3098               	movlw	low (STR_73| (0+32768))
  7851  240D  00B4               	movwf	OLED_print_xy@s
  7852  240E  30B9               	movlw	high (STR_73| (0+32768))
  7853  240F  00B5               	movwf	OLED_print_xy@s+1
  7854  2410  3000               	movlw	0
  7855  2411  31B0  208E  31A3   	fcall	_OLED_print_xy
  7856                           
  7857                           ;error.c: 67:   break;
  7858  2414  2CCC               	goto	l11297
  7859  2415                     l11277:	
  7860                           ;error.c: 68:  case WARN_SENSOR_TIMEOUT:
  7861                           
  7862                           
  7863                           ;error.c: 69:   OLED_print_xy(0, 0, "Sensor      ");
  7864  2415  0140               	movlb	0	; select bank0
  7865  2416  01B3               	clrf	OLED_print_xy@row
  7866  2417  303D               	movlw	low (STR_74| (0+32768))
  7867  2418  00B4               	movwf	OLED_print_xy@s
  7868  2419  30B9               	movlw	high (STR_74| (0+32768))
  7869  241A  00B5               	movwf	OLED_print_xy@s+1
  7870  241B  3000               	movlw	0
  7871  241C  31B0  208E  31A3   	fcall	_OLED_print_xy
  7872                           
  7873                           ;error.c: 70:   OLED_print_xy(0, 1, "timeout     ");
  7874  241F  0140               	movlb	0	; select bank0
  7875  2420  01B3               	clrf	OLED_print_xy@row
  7876  2421  0AB3               	incf	OLED_print_xy@row,f
  7877  2422  307E               	movlw	low (STR_75| (0+32768))
  7878  2423  00B4               	movwf	OLED_print_xy@s
  7879  2424  30B9               	movlw	high (STR_75| (0+32768))
  7880  2425  00B5               	movwf	OLED_print_xy@s+1
  7881  2426  3000               	movlw	0
  7882  2427  31B0  208E  31A3   	fcall	_OLED_print_xy
  7883                           
  7884                           ;error.c: 71:   break;
  7885  242A  2CCC               	goto	l11297
  7886  242B                     l11279:	
  7887                           ;error.c: 72:  case WARN_SENSOR_CHECKSUM:
  7888                           
  7889                           
  7890                           ;error.c: 73:   OLED_print_xy(0, 0, "Sensor wrong");
  7891  242B  0140               	movlb	0	; select bank0
  7892  242C  01B3               	clrf	OLED_print_xy@row
  7893  242D  3034               	movlw	low (STR_76| (0+32768))
  7894  242E  00B4               	movwf	OLED_print_xy@s
  7895  242F  30BA               	movlw	high (STR_76| (0+32768))
  7896  2430  00B5               	movwf	OLED_print_xy@s+1
  7897  2431  3000               	movlw	0
  7898  2432  31B0  208E  31A3   	fcall	_OLED_print_xy
  7899                           
  7900                           ;error.c: 74:   OLED_print_xy(0, 1, "checksum    ");
  7901  2435  0140               	movlb	0	; select bank0
  7902  2436  01B3               	clrf	OLED_print_xy@row
  7903  2437  0AB3               	incf	OLED_print_xy@row,f
  7904  2438  30A5               	movlw	low (STR_77| (0+32768))
  7905  2439  00B4               	movwf	OLED_print_xy@s
  7906  243A  30B9               	movlw	high (STR_77| (0+32768))
  7907  243B  00B5               	movwf	OLED_print_xy@s+1
  7908  243C  3000               	movlw	0
  7909  243D  31B0  208E  31A3   	fcall	_OLED_print_xy
  7910                           
  7911                           ;error.c: 75:   break;
  7912  2440  2CCC               	goto	l11297
  7913  2441                     l11281:	
  7914                           ;error.c: 76:  case ERR_NUKED:
  7915                           
  7916                           
  7917                           ;error.c: 77:   OLED_print_xy(0, 0, "OVERCURRENT ");
  7918  2441  0140               	movlb	0	; select bank0
  7919  2442  01B3               	clrf	OLED_print_xy@row
  7920  2443  30D9               	movlw	low (STR_78| (0+32768))
  7921  2444  00B4               	movwf	OLED_print_xy@s
  7922  2445  30B9               	movlw	high (STR_78| (0+32768))
  7923  2446  00B5               	movwf	OLED_print_xy@s+1
  7924  2447  3000               	movlw	0
  7925  2448  31B0  208E  31A3   	fcall	_OLED_print_xy
  7926                           
  7927                           ;error.c: 78:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7928  244B  0140               	movlb	0	; select bank0
  7929  244C  01B3               	clrf	OLED_print_xy@row
  7930  244D  0AB3               	incf	OLED_print_xy@row,f
  7931  244E  3027               	movlw	low (STR_79| (0+32768))
  7932  244F  00B4               	movwf	OLED_print_xy@s
  7933  2450  30BA               	movlw	high (STR_79| (0+32768))
  7934  2451  00B5               	movwf	OLED_print_xy@s+1
  7935  2452  3000               	movlw	0
  7936  2453  31B0  208E  31A3   	fcall	_OLED_print_xy
  7937                           
  7938                           ;error.c: 79:   break;
  7939  2456  2CCC               	goto	l11297
  7940  2457                     l11283:	
  7941                           ;error.c: 80:  case ERR_VOLT_CRIT:
  7942                           
  7943                           
  7944                           ;error.c: 81:   OLED_print_xy(0, 0, "VOLTAGE HIGH");
  7945  2457  0140               	movlb	0	; select bank0
  7946  2458  01B3               	clrf	OLED_print_xy@row
  7947  2459  301A               	movlw	low (STR_80| (0+32768))
  7948  245A  00B4               	movwf	OLED_print_xy@s
  7949  245B  30BA               	movlw	high (STR_80| (0+32768))
  7950  245C  00B5               	movwf	OLED_print_xy@s+1
  7951  245D  3000               	movlw	0
  7952  245E  31B0  208E  31A3   	fcall	_OLED_print_xy
  7953                           
  7954                           ;error.c: 82:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7955  2461  0140               	movlb	0	; select bank0
  7956  2462  01B3               	clrf	OLED_print_xy@row
  7957  2463  0AB3               	incf	OLED_print_xy@row,f
  7958  2464  3027               	movlw	low (STR_79| (0+32768))
  7959  2465  00B4               	movwf	OLED_print_xy@s
  7960  2466  30BA               	movlw	high (STR_79| (0+32768))
  7961  2467  00B5               	movwf	OLED_print_xy@s+1
  7962  2468  3000               	movlw	0
  7963  2469  31B0  208E  31A3   	fcall	_OLED_print_xy
  7964                           
  7965                           ;error.c: 101:   break;
  7966  246C  2CCC               	goto	l11297
  7967  246D                     l11285:	
  7968                           ;error.c: 102:  case ERR_OVERCURRENT:
  7969                           
  7970                           
  7971                           ;error.c: 103:   OLED_print_xy(0, 0, "Overcurrent ");
  7972  246D  0140               	movlb	0	; select bank0
  7973  246E  01B3               	clrf	OLED_print_xy@row
  7974  246F  30F3               	movlw	low (STR_66| (0+32768))
  7975  2470  00B4               	movwf	OLED_print_xy@s
  7976  2471  30B9               	movlw	high (STR_66| (0+32768))
  7977  2472  00B5               	movwf	OLED_print_xy@s+1
  7978  2473  3000               	movlw	0
  7979  2474  31B0  208E  31A3   	fcall	_OLED_print_xy
  7980                           
  7981                           ;error.c: 104:   OLED_print_xy(0, 1, "Please check");
  7982  2477  0140               	movlb	0	; select bank0
  7983  2478  01B3               	clrf	OLED_print_xy@row
  7984  2479  0AB3               	incf	OLED_print_xy@row,f
  7985  247A  3041               	movlw	low (STR_83| (0+32768))
  7986  247B  00B4               	movwf	OLED_print_xy@s
  7987  247C  30BA               	movlw	high (STR_83| (0+32768))
  7988  247D  00B5               	movwf	OLED_print_xy@s+1
  7989  247E  3000               	movlw	0
  7990  247F  31B0  208E  31A3   	fcall	_OLED_print_xy
  7991                           
  7992                           ;error.c: 105:   if (getPB() == PB_SHORT)
  7993  2482  31BE  2681  31A3   	fcall	_getPB
  7994  2485  3A01               	xorlw	1
  7995  2486  1D03               	skipz
  7996  2487  2CCC               	goto	l11297
  7997                           
  7998                           ;error.c: 106:    LATCbits.LATC3 = 1;
  7999  2488  0140               	movlb	0	; select bank0
  8000  2489  159A               	bsf	26,3	;volatile
  8001                           
  8002                           ;error.c: 107:   break;
  8003  248A  2CCC               	goto	l11297
  8004  248B                     l11291:	
  8005                           ;error.c: 108:  case ERR_MENU:
  8006                           
  8007                           
  8008                           ;error.c: 109:   OLED_print_xy(0, 0, "Menu broken ");
  8009  248B  01B3               	clrf	OLED_print_xy@row
  8010  248C  30E6               	movlw	low (STR_84| (0+32768))
  8011  248D  00B4               	movwf	OLED_print_xy@s
  8012  248E  30B9               	movlw	high (STR_84| (0+32768))
  8013  248F  00B5               	movwf	OLED_print_xy@s+1
  8014  2490  3000               	movlw	0
  8015  2491  31B0  208E  31A3   	fcall	_OLED_print_xy
  8016                           
  8017                           ;error.c: 110:   OLED_print_xy(0, 1, "    :-)     ");
  8018  2494  0140               	movlb	0	; select bank0
  8019  2495  01B3               	clrf	OLED_print_xy@row
  8020  2496  0AB3               	incf	OLED_print_xy@row,f
  8021  2497  3057               	movlw	low (STR_85| (0+32768))
  8022  2498  00B4               	movwf	OLED_print_xy@s
  8023  2499  30B9               	movlw	high (STR_85| (0+32768))
  8024  249A  00B5               	movwf	OLED_print_xy@s+1
  8025  249B  3000               	movlw	0
  8026  249C  31B0  208E  31A3   	fcall	_OLED_print_xy
  8027                           
  8028                           ;error.c: 111:   break;
  8029  249F  2CCC               	goto	l11297
  8030  24A0                     l11293:	
  8031                           ;error.c: 112:  default:
  8032                           
  8033                           
  8034                           ;error.c: 113:   OLED_print_xy(0, 0, "Unknown     ");
  8035  24A0  0140               	movlb	0	; select bank0
  8036  24A1  01B3               	clrf	OLED_print_xy@row
  8037  24A2  3071               	movlw	low (STR_86| (0+32768))
  8038  24A3  00B4               	movwf	OLED_print_xy@s
  8039  24A4  30B9               	movlw	high (STR_86| (0+32768))
  8040  24A5  00B5               	movwf	OLED_print_xy@s+1
  8041  24A6  3000               	movlw	0
  8042  24A7  31B0  208E  31A3   	fcall	_OLED_print_xy
  8043                           
  8044                           ;error.c: 114:   OLED_print_xy(0, 1, "error code  ");
  8045  24AA  0140               	movlb	0	; select bank0
  8046  24AB  01B3               	clrf	OLED_print_xy@row
  8047  24AC  0AB3               	incf	OLED_print_xy@row,f
  8048  24AD  30CC               	movlw	low (STR_87| (0+32768))
  8049  24AE  00B4               	movwf	OLED_print_xy@s
  8050  24AF  30B9               	movlw	high (STR_87| (0+32768))
  8051  24B0  00B5               	movwf	OLED_print_xy@s+1
  8052  24B1  3000               	movlw	0
  8053  24B2  31B0  208E  31A3   	fcall	_OLED_print_xy
  8054                           
  8055                           ;error.c: 115:  }
  8056  24B5  2CCC               	goto	l11297
  8057  24B6                     l11295:	
  8058  24B6  0140               	movlb	0	; select bank0
  8059  24B7  083E               	movf	viewErrorMessage@errorCode,w
  8060  24B8  00BC               	movwf	??_viewErrorMessage
  8061  24B9  01BD               	clrf	??_viewErrorMessage+1
  8062                           
  8063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8064                           ; Switch size 1, requested type "space"
  8065                           ; Number of cases is 1, Range of values is 0 to 0
  8066                           ; switch strategies available:
  8067                           ; Name         Instructions Cycles
  8068                           ; simple_byte            4     3 (average)
  8069                           ; direct_byte            8     6 (fixed)
  8070                           ; jumptable            260     6 (fixed)
  8071                           ;	Chosen strategy is simple_byte
  8072  24BA  083D               	movf	??_viewErrorMessage+1,w
  8073  24BB  3A00               	xorlw	0	; case 0
  8074  24BC  1903               	skipnz
  8075  24BD  2CBF               	goto	l11553
  8076  24BE  2CA0               	goto	l11293
  8077  24BF                     l11553:	
  8078                           
  8079                           ; Switch size 1, requested type "space"
  8080                           ; Number of cases is 12, Range of values is 1 to 12
  8081                           ; switch strategies available:
  8082                           ; Name         Instructions Cycles
  8083                           ; direct_byte           33     9 (fixed)
  8084                           ; simple_byte           37    19 (average)
  8085                           ; jumptable            263     9 (fixed)
  8086                           ;	Chosen strategy is direct_byte
  8087  24BF  083C               	movf	??_viewErrorMessage,w
  8088  24C0  3EFF               	addlw	-1
  8089  24C1  1C03               	skipc
  8090  24C2  2CA0               	goto	l11293
  8091  24C3  0084               	movwf	4
  8092  24C4  300C               	movlw	12
  8093  24C5  0204               	subwf	4,w
  8094  24C6  1803               	skipnc
  8095  24C7  2CA0               	goto	l11293
  8096  24C8  31B9               	movlp	high S11555
  8097  24C9  3504               	lslf	4,w
  8098  24CA  3E18               	addlw	low S11555
  8099  24CB  0082               	movwf	2
  8100  24CC                     l11297:	
  8101                           
  8102                           ;error.c: 117:  if (getPB() == PB_SHORT) {
  8103  24CC  31BE  2681  31A3   	fcall	_getPB
  8104  24CF  3A01               	xorlw	1
  8105  24D0  1D03               	skipz
  8106  24D1  2CE9               	goto	l11303
  8107                           
  8108                           ;error.c: 118:   if (head != tail)
  8109  24D2  0140               	movlb	0	; select bank0
  8110  24D3  0859               	movf	_head,w
  8111  24D4  0658               	xorwf	_tail,w
  8112  24D5  1903               	skipnz
  8113  24D6  2CE9               	goto	l11303
  8114                           
  8115                           ;error.c: 119:    tail = (tail + 1) % 10;
  8116  24D7  300A               	movlw	10
  8117  24D8  00AC               	movwf	___awmod@divisor
  8118  24D9  3000               	movlw	0
  8119  24DA  00AD               	movwf	___awmod@divisor+1
  8120  24DB  0858               	movf	_tail,w
  8121  24DC  3E01               	addlw	1
  8122  24DD  00AE               	movwf	___awmod@dividend
  8123  24DE  3000               	movlw	0
  8124  24DF  1803               	skipnc
  8125  24E0  3001               	movlw	1
  8126  24E1  00AF               	movwf	___awmod@dividend+1
  8127  24E2  31B1  21FE         	fcall	___awmod
  8128  24E4  0140               	movlb	0	; select bank0
  8129  24E5  082C               	movf	?___awmod,w
  8130  24E6  00BC               	movwf	??_viewErrorMessage
  8131  24E7  083C               	movf	??_viewErrorMessage,w
  8132  24E8  00D8               	movwf	_tail
  8133  24E9                     l11303:	
  8134                           ;error.c: 120:  }
  8135                           
  8136                           
  8137                           ;error.c: 122:  g_screenRefresh = 1;
  8138  24E9  0140               	movlb	0	; select bank0
  8139  24EA  01E3               	clrf	_g_screenRefresh
  8140  24EB  0AE3               	incf	_g_screenRefresh,f
  8141  24EC  0008               	return
  8142  24ED                     __end_of_viewErrorMessage:	
  8143                           
  8144                           	psect	swtext1
  8145  3918                     __pswtext1:	
  8146  3918                     S11555:	
  8147  3918  31A3  2B91         	ljmp	l11265
  8148  391A  31A3  2BA7         	ljmp	l11267
  8149  391C  31A3  2BBD         	ljmp	l11269
  8150  391E  31A3  2BD3         	ljmp	l11271
  8151  3920  31A3  2BE9         	ljmp	l11273
  8152  3922  31A3  2BFF         	ljmp	l11275
  8153  3924  31A4  2C15         	ljmp	l11277
  8154  3926  31A4  2C2B         	ljmp	l11279
  8155  3928  31A4  2C41         	ljmp	l11281
  8156  392A  31A4  2C6D         	ljmp	l11285
  8157  392C  31A4  2C57         	ljmp	l11283
  8158  392E  31A4  2C8B         	ljmp	l11291
  8159                           
  8160                           	psect	text2
  8161  2209                     __ptext2:	
  8162 ;; *************** function _systemCheck *****************
  8163 ;; Defined at:
  8164 ;;		line 141 in file "system.c"
  8165 ;; Parameters:    Size  Location     Type
  8166 ;;		None
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;  str             3    0        unsigned char [3]
  8169 ;;  n               1    0        unsigned char 
  8170 ;; Return value:  Size  Location     Type
  8171 ;;                  1    wreg      void 
  8172 ;; Registers used:
  8173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8174 ;; Tracked objects:
  8175 ;;		On entry : 0/0
  8176 ;;		On exit  : 0/0
  8177 ;;		Unchanged: 0/0
  8178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8181 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8182 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8183 ;;Total ram usage:        4 bytes
  8184 ;; Hardware stack levels used:    1
  8185 ;; Hardware stack levels required when called:    5
  8186 ;; This function calls:
  8187 ;;		___fldiv
  8188 ;;		___flge
  8189 ;;		___flmul
  8190 ;;		___xxtofl
  8191 ;;		_error
  8192 ;;		_getAnalogValue
  8193 ;;		_setChannelSwitch
  8194 ;; This function is called by:
  8195 ;;		_main
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           
  8200                           ;psect for function _systemCheck
  8201  2209                     _systemCheck:	
  8202                           
  8203                           ;system.c: 143:  uint8_t n;;system.c: 144:  char str[3];;system.c: 148:  if (data.curren
      +                          t > 3.5) {
  8204                           
  8205                           ;incstack = 0
  8206                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8207  2209  3040               	movlw	64
  8208  220A  0141               	movlb	1	; select bank1
  8209  220B  00CC               	movwf	(___flge@ff1+3)^(0+128)
  8210  220C  3060               	movlw	96
  8211  220D  00CB               	movwf	(___flge@ff1+2)^(0+128)
  8212  220E  3000               	movlw	0
  8213  220F  00CA               	movwf	(___flge@ff1+1)^(0+128)
  8214  2210  3000               	movlw	0
  8215  2211  00C9               	movwf	___flge@ff1^(0+128)
  8216  2212  304A               	movlw	74
  8217  2213  0086               	movwf	6
  8218  2214  3027               	movlw	39
  8219  2215  0087               	movwf	7
  8220  2216  3155               	addfsr 1,21
  8221  2217  3F40               	moviw [0]fsr1
  8222  2218  00CD               	movwf	___flge@ff2^(0+128)
  8223  2219  3F41               	moviw [1]fsr1
  8224  221A  00CE               	movwf	(___flge@ff2+1)^(0+128)
  8225  221B  3F42               	moviw [2]fsr1
  8226  221C  00CF               	movwf	(___flge@ff2+2)^(0+128)
  8227  221D  3F43               	moviw [3]fsr1
  8228  221E  00D0               	movwf	(___flge@ff2+3)^(0+128)
  8229  221F  3198  202D  31A2   	fcall	___flge
  8230  2222  1803               	btfsc	3,0
  8231  2223  2AA5               	goto	l10957
  8232                           
  8233                           ;system.c: 150:   setChannelSwitch(255, 0);
  8234  2224  0140               	movlb	0	; select bank0
  8235  2225  01B0               	clrf	setChannelSwitch@state
  8236  2226  30FF               	movlw	255
  8237  2227  31B2  228B  31A2   	fcall	_setChannelSwitch
  8238                           
  8239                           ;system.c: 151:   LATCbits.LATC3 = 0;
  8240  222A  0140               	movlb	0	; select bank0
  8241  222B  119A               	bcf	26,3	;volatile
  8242                           
  8243                           ;system.c: 153:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  8244  222C  3040               	movlw	64
  8245  222D  0141               	movlb	1	; select bank1
  8246  222E  00CC               	movwf	(___flge@ff1+3)^(0+128)
  8247  222F  3060               	movlw	96
  8248  2230  00CB               	movwf	(___flge@ff1+2)^(0+128)
  8249  2231  3000               	movlw	0
  8250  2232  00CA               	movwf	(___flge@ff1+1)^(0+128)
  8251  2233  3000               	movlw	0
  8252  2234  00C9               	movwf	___flge@ff1^(0+128)
  8253  2235  3045               	movlw	69
  8254  2236  00B0               	movwf	(___fldiv@a+3)^(0+128)
  8255  2237  301F               	movlw	31
  8256  2238  00AF               	movwf	(___fldiv@a+2)^(0+128)
  8257  2239  30D8               	movlw	216
  8258  223A  00AE               	movwf	(___fldiv@a+1)^(0+128)
  8259  223B  3000               	movlw	0
  8260  223C  00AD               	movwf	___fldiv@a^(0+128)
  8261  223D  3040               	movlw	64
  8262  223E  0140               	movlb	0	; select bank0
  8263  223F  00CC               	movwf	___flmul@b+3
  8264  2240  30A0               	movlw	160
  8265  2241  00CB               	movwf	___flmul@b+2
  8266  2242  3000               	movlw	0
  8267  2243  00CA               	movwf	___flmul@b+1
  8268  2244  3000               	movlw	0
  8269  2245  00C9               	movwf	___flmul@b
  8270  2246  3011               	movlw	17
  8271  2247  31BF  2726  31A2   	fcall	_getAnalogValue
  8272  224A  0140               	movlb	0	; select bank0
  8273  224B  082C               	movf	?_getAnalogValue,w
  8274  224C  0141               	movlb	1	; select bank1
  8275  224D  00D9               	movwf	??_systemCheck^(0+128)
  8276  224E  0140               	movlb	0	; select bank0
  8277  224F  082D               	movf	?_getAnalogValue+1,w
  8278  2250  0141               	movlb	1	; select bank1
  8279  2251  00DA               	movwf	(??_systemCheck^(0+128)+1)
  8280  2252  01DB               	clrf	(??_systemCheck^(0+128)+2)
  8281  2253  01DC               	clrf	(??_systemCheck^(0+128)+3)
  8282  2254  085C               	movf	(??_systemCheck+3)^(0+128),w
  8283  2255  0140               	movlb	0	; select bank0
  8284  2256  00BE               	movwf	___xxtofl@val+3
  8285  2257  0141               	movlb	1	; select bank1
  8286  2258  085B               	movf	(??_systemCheck+2)^(0+128),w
  8287  2259  0140               	movlb	0	; select bank0
  8288  225A  00BD               	movwf	___xxtofl@val+2
  8289  225B  0141               	movlb	1	; select bank1
  8290  225C  085A               	movf	(??_systemCheck+1)^(0+128),w
  8291  225D  0140               	movlb	0	; select bank0
  8292  225E  00BC               	movwf	___xxtofl@val+1
  8293  225F  0141               	movlb	1	; select bank1
  8294  2260  0859               	movf	??_systemCheck^(0+128),w
  8295  2261  0140               	movlb	0	; select bank0
  8296  2262  00BB               	movwf	___xxtofl@val
  8297  2263  3000               	movlw	0
  8298  2264  31AA  22D4  31A2   	fcall	___xxtofl
  8299  2267  0140               	movlb	0	; select bank0
  8300  2268  083E               	movf	?___xxtofl+3,w
  8301  2269  00D0               	movwf	___flmul@a+3
  8302  226A  083D               	movf	?___xxtofl+2,w
  8303  226B  00CF               	movwf	___flmul@a+2
  8304  226C  083C               	movf	?___xxtofl+1,w
  8305  226D  00CE               	movwf	___flmul@a+1
  8306  226E  083B               	movf	?___xxtofl,w
  8307  226F  00CD               	movwf	___flmul@a
  8308  2270  3188  20BA  31A2   	fcall	___flmul
  8309  2273  0140               	movlb	0	; select bank0
  8310  2274  084C               	movf	?___flmul+3,w
  8311  2275  0141               	movlb	1	; select bank1
  8312  2276  00B4               	movwf	(___fldiv@b+3)^(0+128)
  8313  2277  0140               	movlb	0	; select bank0
  8314  2278  084B               	movf	?___flmul+2,w
  8315  2279  0141               	movlb	1	; select bank1
  8316  227A  00B3               	movwf	(___fldiv@b+2)^(0+128)
  8317  227B  0140               	movlb	0	; select bank0
  8318  227C  084A               	movf	?___flmul+1,w
  8319  227D  0141               	movlb	1	; select bank1
  8320  227E  00B2               	movwf	(___fldiv@b+1)^(0+128)
  8321  227F  0140               	movlb	0	; select bank0
  8322  2280  0849               	movf	?___flmul,w
  8323  2281  0141               	movlb	1	; select bank1
  8324  2282  00B1               	movwf	___fldiv@b^(0+128)
  8325  2283  31A6  266D  31A2   	fcall	___fldiv
  8326  2286  0141               	movlb	1	; select bank1
  8327  2287  0830               	movf	(?___fldiv+3)^(0+128),w
  8328  2288  00D0               	movwf	(___flge@ff2+3)^(0+128)
  8329  2289  082F               	movf	(?___fldiv+2)^(0+128),w
  8330  228A  00CF               	movwf	(___flge@ff2+2)^(0+128)
  8331  228B  082E               	movf	(?___fldiv+1)^(0+128),w
  8332  228C  00CE               	movwf	(___flge@ff2+1)^(0+128)
  8333  228D  082D               	movf	?___fldiv^(0+128),w
  8334  228E  00CD               	movwf	___flge@ff2^(0+128)
  8335  228F  3198  202D  31A2   	fcall	___flge
  8336  2292  1803               	btfsc	3,0
  8337  2293  2A96               	goto	l10951
  8338                           
  8339                           ;system.c: 156:    error(ERR_NUKED);
  8340  2294  3009               	movlw	9
  8341  2295  2AA2               	goto	L2
  8342  2296                     l10951:	
  8343                           ;system.c: 157:   } else {
  8344                           
  8345                           
  8346                           ;system.c: 159:    if (! data.status.OVERCURRENT) {
  8347  2296  3073               	movlw	115
  8348  2297  0086               	movwf	6
  8349  2298  3027               	movlw	39
  8350  2299  0087               	movwf	7
  8351  229A  1901               	btfsc	1,2
  8352  229B  2AA5               	goto	l10957
  8353                           
  8354                           ;system.c: 160:     data.status.OVERCURRENT = 1;
  8355  229C  3073               	movlw	115
  8356  229D  0086               	movwf	6
  8357  229E  3027               	movlw	39
  8358  229F  0087               	movwf	7
  8359  22A0  1501               	bsf	1,2
  8360                           
  8361                           ;system.c: 161:     error(ERR_OVERCURRENT);
  8362  22A1  300A               	movlw	10
  8363  22A2                     L2:	
  8364  22A2  31B0  20C1  31A2   	fcall	_error
  8365  22A5                     l10957:	
  8366                           ;system.c: 164:  }
  8367                           
  8368                           ;system.c: 163:   }
  8369                           
  8370                           ;system.c: 162:    }
  8371                           
  8372                           
  8373                           ;system.c: 171:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
  8374  22A5  3041               	movlw	65
  8375  22A6  0141               	movlb	1	; select bank1
  8376  22A7  00CC               	movwf	(___flge@ff1+3)^(0+128)
  8377  22A8  305C               	movlw	92
  8378  22A9  00CB               	movwf	(___flge@ff1+2)^(0+128)
  8379  22AA  30CC               	movlw	204
  8380  22AB  00CA               	movwf	(___flge@ff1+1)^(0+128)
  8381  22AC  30CD               	movlw	205
  8382  22AD  00C9               	movwf	___flge@ff1^(0+128)
  8383  22AE  304A               	movlw	74
  8384  22AF  0086               	movwf	6
  8385  22B0  3027               	movlw	39
  8386  22B1  0087               	movwf	7
  8387  22B2  3151               	addfsr 1,17
  8388  22B3  3F40               	moviw [0]fsr1
  8389  22B4  00CD               	movwf	___flge@ff2^(0+128)
  8390  22B5  3F41               	moviw [1]fsr1
  8391  22B6  00CE               	movwf	(___flge@ff2+1)^(0+128)
  8392  22B7  3F42               	moviw [2]fsr1
  8393  22B8  00CF               	movwf	(___flge@ff2+2)^(0+128)
  8394  22B9  3F43               	moviw [3]fsr1
  8395  22BA  00D0               	movwf	(___flge@ff2+3)^(0+128)
  8396  22BB  3198  202D  31A2   	fcall	___flge
  8397  22BE  1C03               	btfss	3,0
  8398  22BF  2ADB               	goto	l10961
  8399  22C0  3041               	movlw	65
  8400  22C1  0141               	movlb	1	; select bank1
  8401  22C2  00CC               	movwf	(___flge@ff1+3)^(0+128)
  8402  22C3  3030               	movlw	48
  8403  22C4  00CB               	movwf	(___flge@ff1+2)^(0+128)
  8404  22C5  3000               	movlw	0
  8405  22C6  00CA               	movwf	(___flge@ff1+1)^(0+128)
  8406  22C7  3000               	movlw	0
  8407  22C8  00C9               	movwf	___flge@ff1^(0+128)
  8408  22C9  304A               	movlw	74
  8409  22CA  0086               	movwf	6
  8410  22CB  3027               	movlw	39
  8411  22CC  0087               	movwf	7
  8412  22CD  3151               	addfsr 1,17
  8413  22CE  3F40               	moviw [0]fsr1
  8414  22CF  00CD               	movwf	___flge@ff2^(0+128)
  8415  22D0  3F41               	moviw [1]fsr1
  8416  22D1  00CE               	movwf	(___flge@ff2+1)^(0+128)
  8417  22D2  3F42               	moviw [2]fsr1
  8418  22D3  00CF               	movwf	(___flge@ff2+2)^(0+128)
  8419  22D4  3F43               	moviw [3]fsr1
  8420  22D5  00D0               	movwf	(___flge@ff2+3)^(0+128)
  8421  22D6  3198  202D  31A2   	fcall	___flge
  8422  22D9  1C03               	btfss	3,0
  8423  22DA  2ADF               	goto	l10963
  8424  22DB                     l10961:	
  8425                           
  8426                           ;system.c: 172:   error(ERR_VOLT_CRIT);
  8427  22DB  300B               	movlw	11
  8428  22DC  31B0  20C1         	fcall	_error
  8429                           
  8430                           ;system.c: 173:  } else if ((data.voltage > 13.0) && (data.voltage <= 13.8)) {
  8431  22DE  0008               	return
  8432  22DF                     l10963:	
  8433  22DF  3041               	movlw	65
  8434  22E0  0141               	movlb	1	; select bank1
  8435  22E1  00CC               	movwf	(___flge@ff1+3)^(0+128)
  8436  22E2  3050               	movlw	80
  8437  22E3  00CB               	movwf	(___flge@ff1+2)^(0+128)
  8438  22E4  3000               	movlw	0
  8439  22E5  00CA               	movwf	(___flge@ff1+1)^(0+128)
  8440  22E6  3000               	movlw	0
  8441  22E7  00C9               	movwf	___flge@ff1^(0+128)
  8442  22E8  304A               	movlw	74
  8443  22E9  0086               	movwf	6
  8444  22EA  3027               	movlw	39
  8445  22EB  0087               	movwf	7
  8446  22EC  3151               	addfsr 1,17
  8447  22ED  3F40               	moviw [0]fsr1
  8448  22EE  00CD               	movwf	___flge@ff2^(0+128)
  8449  22EF  3F41               	moviw [1]fsr1
  8450  22F0  00CE               	movwf	(___flge@ff2+1)^(0+128)
  8451  22F1  3F42               	moviw [2]fsr1
  8452  22F2  00CF               	movwf	(___flge@ff2+2)^(0+128)
  8453  22F3  3F43               	moviw [3]fsr1
  8454  22F4  00D0               	movwf	(___flge@ff2+3)^(0+128)
  8455  22F5  3198  202D  31A2   	fcall	___flge
  8456  22F8  1803               	btfsc	3,0
  8457  22F9  2B24               	goto	l10973
  8458  22FA  3041               	movlw	65
  8459  22FB  0141               	movlb	1	; select bank1
  8460  22FC  00CC               	movwf	(___flge@ff1+3)^(0+128)
  8461  22FD  305C               	movlw	92
  8462  22FE  00CB               	movwf	(___flge@ff1+2)^(0+128)
  8463  22FF  30CC               	movlw	204
  8464  2300  00CA               	movwf	(___flge@ff1+1)^(0+128)
  8465  2301  30CD               	movlw	205
  8466  2302  00C9               	movwf	___flge@ff1^(0+128)
  8467  2303  304A               	movlw	74
  8468  2304  0086               	movwf	6
  8469  2305  3027               	movlw	39
  8470  2306  0087               	movwf	7
  8471  2307  3151               	addfsr 1,17
  8472  2308  3F40               	moviw [0]fsr1
  8473  2309  00CD               	movwf	___flge@ff2^(0+128)
  8474  230A  3F41               	moviw [1]fsr1
  8475  230B  00CE               	movwf	(___flge@ff2+1)^(0+128)
  8476  230C  3F42               	moviw [2]fsr1
  8477  230D  00CF               	movwf	(___flge@ff2+2)^(0+128)
  8478  230E  3F43               	moviw [3]fsr1
  8479  230F  00D0               	movwf	(___flge@ff2+3)^(0+128)
  8480  2310  3198  202D  31A2   	fcall	___flge
  8481  2313  1C03               	btfss	3,0
  8482  2314  2B24               	goto	l10973
  8483                           
  8484                           ;system.c: 174:   if (! data.status.BAT_HIGH) {
  8485  2315  3073               	movlw	115
  8486  2316  0086               	movwf	6
  8487  2317  3027               	movlw	39
  8488  2318  0087               	movwf	7
  8489  2319  1881               	btfsc	1,1
  8490  231A  0008               	return
  8491                           
  8492                           ;system.c: 175:    data.status.BAT_HIGH = 1;
  8493  231B  3073               	movlw	115
  8494  231C  0086               	movwf	6
  8495  231D  3027               	movlw	39
  8496  231E  0087               	movwf	7
  8497  231F  1481               	bsf	1,1
  8498                           
  8499                           ;system.c: 176:    error(WARN_VOLT_HIGH);
  8500  2320  3005               	movlw	5
  8501  2321  31B0  20C1         	fcall	_error
  8502                           
  8503                           ;system.c: 178:  } else if ((data.voltage > 11.0) && (data.voltage <= 11.4)) {
  8504                           
  8505                           ;system.c: 177:   }
  8506  2323  0008               	return
  8507  2324                     l10973:	
  8508  2324  3041               	movlw	65
  8509  2325  0141               	movlb	1	; select bank1
  8510  2326  00CC               	movwf	(___flge@ff1+3)^(0+128)
  8511  2327  3030               	movlw	48
  8512  2328  00CB               	movwf	(___flge@ff1+2)^(0+128)
  8513  2329  3000               	movlw	0
  8514  232A  00CA               	movwf	(___flge@ff1+1)^(0+128)
  8515  232B  3000               	movlw	0
  8516  232C  00C9               	movwf	___flge@ff1^(0+128)
  8517  232D  304A               	movlw	74
  8518  232E  0086               	movwf	6
  8519  232F  3027               	movlw	39
  8520  2330  0087               	movwf	7
  8521  2331  3151               	addfsr 1,17
  8522  2332  3F40               	moviw [0]fsr1
  8523  2333  00CD               	movwf	___flge@ff2^(0+128)
  8524  2334  3F41               	moviw [1]fsr1
  8525  2335  00CE               	movwf	(___flge@ff2+1)^(0+128)
  8526  2336  3F42               	moviw [2]fsr1
  8527  2337  00CF               	movwf	(___flge@ff2+2)^(0+128)
  8528  2338  3F43               	moviw [3]fsr1
  8529  2339  00D0               	movwf	(___flge@ff2+3)^(0+128)
  8530  233A  3198  202D  31A2   	fcall	___flge
  8531  233D  1803               	btfsc	3,0
  8532  233E  2B69               	goto	l10983
  8533  233F  3041               	movlw	65
  8534  2340  0141               	movlb	1	; select bank1
  8535  2341  00CC               	movwf	(___flge@ff1+3)^(0+128)
  8536  2342  3036               	movlw	54
  8537  2343  00CB               	movwf	(___flge@ff1+2)^(0+128)
  8538  2344  3066               	movlw	102
  8539  2345  00CA               	movwf	(___flge@ff1+1)^(0+128)
  8540  2346  3066               	movlw	102
  8541  2347  00C9               	movwf	___flge@ff1^(0+128)
  8542  2348  304A               	movlw	74
  8543  2349  0086               	movwf	6
  8544  234A  3027               	movlw	39
  8545  234B  0087               	movwf	7
  8546  234C  3151               	addfsr 1,17
  8547  234D  3F40               	moviw [0]fsr1
  8548  234E  00CD               	movwf	___flge@ff2^(0+128)
  8549  234F  3F41               	moviw [1]fsr1
  8550  2350  00CE               	movwf	(___flge@ff2+1)^(0+128)
  8551  2351  3F42               	moviw [2]fsr1
  8552  2352  00CF               	movwf	(___flge@ff2+2)^(0+128)
  8553  2353  3F43               	moviw [3]fsr1
  8554  2354  00D0               	movwf	(___flge@ff2+3)^(0+128)
  8555  2355  3198  202D  31A2   	fcall	___flge
  8556  2358  1C03               	btfss	3,0
  8557  2359  2B69               	goto	l10983
  8558                           
  8559                           ;system.c: 179:   if (! data.status.BAT_LOW) {
  8560  235A  3073               	movlw	115
  8561  235B  0086               	movwf	6
  8562  235C  3027               	movlw	39
  8563  235D  0087               	movwf	7
  8564  235E  1801               	btfsc	1,0
  8565  235F  0008               	return
  8566                           
  8567                           ;system.c: 180:    data.status.BAT_LOW = 1;
  8568  2360  3073               	movlw	115
  8569  2361  0086               	movwf	6
  8570  2362  3027               	movlw	39
  8571  2363  0087               	movwf	7
  8572  2364  1401               	bsf	1,0
  8573                           
  8574                           ;system.c: 181:    error(WARN_VOLT_LOW);
  8575  2365  3006               	movlw	6
  8576  2366  31B0  20C1         	fcall	_error
  8577                           
  8578                           ;system.c: 183:  } else {
  8579                           
  8580                           ;system.c: 182:   }
  8581  2368  0008               	return
  8582  2369                     l10983:	
  8583                           
  8584                           ;system.c: 184:   data.status.BAT_HIGH = 0;
  8585  2369  3073               	movlw	115
  8586  236A  0086               	movwf	6
  8587  236B  3027               	movlw	39
  8588  236C  0087               	movwf	7
  8589  236D  1081               	bcf	1,1
  8590                           
  8591                           ;system.c: 185:   data.status.BAT_LOW = 0;
  8592  236E  3073               	movlw	115
  8593  236F  0086               	movwf	6
  8594  2370  3027               	movlw	39
  8595  2371  0087               	movwf	7
  8596  2372  1001               	bcf	1,0
  8597                           
  8598                           ;system.c: 186:  }
  8599  2373  0008               	return
  8600  2374                     __end_of_systemCheck:	
  8601                           
  8602                           	psect	text3
  8603  2823                     __ptext3:	
  8604 ;; *************** function _readNVM *****************
  8605 ;; Defined at:
  8606 ;;		line 464 in file "system.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  buf            64    0[BANK1 ] unsigned short [32]
  8611 ;;  nvm            32    0[BANK2 ] struct .
  8612 ;;  n               1   16[BANK0 ] unsigned char 
  8613 ;; Return value:  Size  Location     Type
  8614 ;;                  1    wreg      void 
  8615 ;; Registers used:
  8616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8617 ;; Tracked objects:
  8618 ;;		On entry : 0/0
  8619 ;;		On exit  : 0/0
  8620 ;;		Unchanged: 0/0
  8621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8623 ;;      Locals:         0       1      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8625 ;;      Totals:         0       2      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8626 ;;Total ram usage:       98 bytes
  8627 ;; Hardware stack levels used:    1
  8628 ;; Hardware stack levels required when called:    4
  8629 ;; This function calls:
  8630 ;;		_FLASH_ReadWord
  8631 ;; This function is called by:
  8632 ;;		_main
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           
  8637                           ;psect for function _readNVM
  8638  2823                     _readNVM:	
  8639                           
  8640                           ;system.c: 466:  uint8_t n;;system.c: 467:  t_nvmData nvm;;system.c: 468:  uint16_t buf[
      +                          32];;system.c: 470:  for(n = 0; n < 32; n++) {
  8641                           
  8642                           ;incstack = 0
  8643                           ; Regs used in _readNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8644  2823  0140               	movlb	0	; select bank0
  8645  2824  01B0               	clrf	readNVM@n
  8646  2825  3020               	movlw	32
  8647  2826  0230               	subwf	readNVM@n,w
  8648  2827  1803               	btfsc	3,0
  8649  2828  2851               	goto	l6061
  8650  2829                     l6053:	
  8651                           
  8652                           ;system.c: 471:   buf[n] = FLASH_ReadWord(0x3F80 + n);
  8653  2829  0830               	movf	readNVM@n,w
  8654  282A  3E80               	addlw	128
  8655  282B  00AC               	movwf	FLASH_ReadWord@flashAddr
  8656  282C  303F               	movlw	63
  8657  282D  1803               	skipnc
  8658  282E  3040               	movlw	64
  8659  282F  00AD               	movwf	FLASH_ReadWord@flashAddr+1
  8660  2830  31A8  2003  31A8   	fcall	_FLASH_ReadWord
  8661  2833  0140               	movlb	0	; select bank0
  8662  2834  3530               	lslf	readNVM@n,w
  8663  2835  3EA0               	addlw	(low (readNVM@buf| 0))& (0+255)
  8664  2836  0086               	movwf	6
  8665  2837  0187               	clrf	7
  8666  2838  082C               	movf	?_FLASH_ReadWord,w
  8667  2839  3FC0               	movwi [0]fsr1
  8668  283A  082D               	movf	?_FLASH_ReadWord+1,w
  8669  283B  3FC1               	movwi [1]fsr1
  8670                           
  8671                           ;system.c: 472:   nvm.raw[n] = (uint8_t)(buf[n] & 0x00ff);
  8672  283C  3530               	lslf	readNVM@n,w
  8673  283D  3EA0               	addlw	(low (readNVM@buf| 0))& (0+255)
  8674  283E  0086               	movwf	6
  8675  283F  0187               	clrf	7
  8676  2840  0801               	movf	1,w
  8677  2841  00AF               	movwf	??_readNVM
  8678  2842  0830               	movf	readNVM@n,w
  8679  2843  3E20               	addlw	(low (readNVM@nvm| (0+256)))& (0+255)
  8680  2844  0086               	movwf	6
  8681  2845  3001               	movlw	1	; select bank2/3
  8682  2846  0087               	movwf	7
  8683  2847  082F               	movf	??_readNVM,w
  8684  2848  0081               	movwf	1
  8685                           
  8686                           ;system.c: 473:  }
  8687  2849  3001               	movlw	1
  8688  284A  00AF               	movwf	??_readNVM
  8689  284B  082F               	movf	??_readNVM,w
  8690  284C  07B0               	addwf	readNVM@n,f
  8691  284D  3020               	movlw	32
  8692  284E  0230               	subwf	readNVM@n,w
  8693  284F  1C03               	skipc
  8694  2850  2829               	goto	l6053
  8695  2851                     l6061:	
  8696                           
  8697                           ;system.c: 475:  data.heater[0].lensDia = nvm.lensDia[0];
  8698  2851  3089               	movlw	137
  8699  2852  0086               	movwf	6
  8700  2853  3027               	movlw	39
  8701  2854  0087               	movwf	7
  8702  2855  0142               	movlb	2	; select bank2
  8703  2856  0820               	movf	readNVM@nvm^(0+256),w
  8704  2857  3FC0               	movwi [0]fsr1
  8705  2858  0821               	movf	(readNVM@nvm+1)^(0+256),w
  8706  2859  3FC1               	movwi [1]fsr1
  8707  285A  0822               	movf	(readNVM@nvm+2)^(0+256),w
  8708  285B  3FC2               	movwi [2]fsr1
  8709  285C  0823               	movf	(readNVM@nvm+3)^(0+256),w
  8710  285D  3FC3               	movwi [3]fsr1
  8711                           
  8712                           ;system.c: 476:  data.heater[1].lensDia = nvm.lensDia[1];
  8713  285E  30A8               	movlw	168
  8714  285F  0086               	movwf	6
  8715  2860  3027               	movlw	39
  8716  2861  0087               	movwf	7
  8717  2862  0824               	movf	(readNVM@nvm^(0+256)+4),w
  8718  2863  3FC0               	movwi [0]fsr1
  8719  2864  0825               	movf	((readNVM@nvm+1)^(0+256)+4),w
  8720  2865  3FC1               	movwi [1]fsr1
  8721  2866  0826               	movf	((readNVM@nvm+2)^(0+256)+4),w
  8722  2867  3FC2               	movwi [2]fsr1
  8723  2868  0827               	movf	((readNVM@nvm+3)^(0+256)+4),w
  8724  2869  3FC3               	movwi [3]fsr1
  8725                           
  8726                           ;system.c: 477:  data.heater[2].lensDia = nvm.lensDia[2];
  8727  286A  30C7               	movlw	199
  8728  286B  0086               	movwf	6
  8729  286C  3027               	movlw	39
  8730  286D  0087               	movwf	7
  8731  286E  0828               	movf	(readNVM@nvm^(0+256)+8),w
  8732  286F  3FC0               	movwi [0]fsr1
  8733  2870  0829               	movf	((readNVM@nvm+1)^(0+256)+8),w
  8734  2871  3FC1               	movwi [1]fsr1
  8735  2872  082A               	movf	((readNVM@nvm+2)^(0+256)+8),w
  8736  2873  3FC2               	movwi [2]fsr1
  8737  2874  082B               	movf	((readNVM@nvm+3)^(0+256)+8),w
  8738  2875  3FC3               	movwi [3]fsr1
  8739                           
  8740                           ;system.c: 478:  data.heater[3].lensDia = nvm.lensDia[3];
  8741  2876  30E6               	movlw	230
  8742  2877  0086               	movwf	6
  8743  2878  3027               	movlw	39
  8744  2879  0087               	movwf	7
  8745  287A  082C               	movf	(readNVM@nvm^(0+256)+12),w
  8746  287B  3FC0               	movwi [0]fsr1
  8747  287C  082D               	movf	((readNVM@nvm+1)^(0+256)+12),w
  8748  287D  3FC1               	movwi [1]fsr1
  8749  287E  082E               	movf	((readNVM@nvm+2)^(0+256)+12),w
  8750  287F  3FC2               	movwi [2]fsr1
  8751  2880  082F               	movf	((readNVM@nvm+3)^(0+256)+12),w
  8752  2881  3FC3               	movwi [3]fsr1
  8753                           
  8754                           ;system.c: 479:  data.dpOffset = nvm.dpOffset;
  8755  2882  304A               	movlw	74
  8756  2883  0086               	movwf	6
  8757  2884  3027               	movlw	39
  8758  2885  0087               	movwf	7
  8759  2886  315D               	addfsr 1,29
  8760  2887  0830               	movf	(readNVM@nvm^(0+256)+16),w
  8761  2888  3FC0               	movwi [0]fsr1
  8762  2889  0831               	movf	((readNVM@nvm+1)^(0+256)+16),w
  8763  288A  3FC1               	movwi [1]fsr1
  8764  288B  0832               	movf	((readNVM@nvm+2)^(0+256)+16),w
  8765  288C  3FC2               	movwi [2]fsr1
  8766  288D  0833               	movf	((readNVM@nvm+3)^(0+256)+16),w
  8767  288E  3FC3               	movwi [3]fsr1
  8768                           
  8769                           ;system.c: 480:  data.skyTemp = nvm.skyTemp;
  8770  288F  306B               	movlw	107
  8771  2890  0086               	movwf	6
  8772  2891  3027               	movlw	39
  8773  2892  0087               	movwf	7
  8774  2893  0834               	movf	(readNVM@nvm^(0+256)+20),w
  8775  2894  3FC0               	movwi [0]fsr1
  8776  2895  0835               	movf	((readNVM@nvm+1)^(0+256)+20),w
  8777  2896  3FC1               	movwi [1]fsr1
  8778  2897  0836               	movf	((readNVM@nvm+2)^(0+256)+20),w
  8779  2898  3FC2               	movwi [2]fsr1
  8780  2899  0837               	movf	((readNVM@nvm+3)^(0+256)+20),w
  8781  289A  3FC3               	movwi [3]fsr1
  8782                           
  8783                           ;system.c: 481:  data.fudgeFactor = nvm.fudgeFactor;
  8784  289B  306F               	movlw	111
  8785  289C  0086               	movwf	6
  8786  289D  3027               	movlw	39
  8787  289E  0087               	movwf	7
  8788  289F  0838               	movf	(readNVM@nvm^(0+256)+24),w
  8789  28A0  3FC0               	movwi [0]fsr1
  8790  28A1  0839               	movf	((readNVM@nvm+1)^(0+256)+24),w
  8791  28A2  3FC1               	movwi [1]fsr1
  8792  28A3  083A               	movf	((readNVM@nvm+2)^(0+256)+24),w
  8793  28A4  3FC2               	movwi [2]fsr1
  8794  28A5  083B               	movf	((readNVM@nvm+3)^(0+256)+24),w
  8795  28A6  3FC3               	movwi [3]fsr1
  8796  28A7  0008               	return
  8797  28A8                     __end_of_readNVM:	
  8798                           
  8799                           	psect	text4
  8800  2803                     __ptext4:	
  8801 ;; *************** function _FLASH_ReadWord *****************
  8802 ;; Defined at:
  8803 ;;		line 8 in file "memory.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;  flashAddr       2   12[BANK0 ] unsigned short 
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;  GIEBitValue     1   14[BANK0 ] unsigned char 
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  2   12[BANK0 ] unsigned short 
  8810 ;; Registers used:
  8811 ;;		wreg, status,2, status,0
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8817 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8820 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8821 ;;Total ram usage:        3 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    3
  8824 ;; This function calls:
  8825 ;;		Nothing
  8826 ;; This function is called by:
  8827 ;;		_readNVM
  8828 ;;		_FLASH_WriteWord
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           
  8833                           ;psect for function _FLASH_ReadWord
  8834  2803                     _FLASH_ReadWord:	
  8835                           
  8836                           ;memory.c: 8: uint16_t FLASH_ReadWord(uint16_t flashAddr);memory.c: 9: {;memory.c: 10:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
  8837                           
  8838                           ;incstack = 0
  8839                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  8840  2803  3000               	movlw	0
  8841  2804  1B8B               	btfsc	11,7	;volatile
  8842  2805  3001               	movlw	1
  8843  2806  0140               	movlb	0	; select bank0
  8844  2807  00AE               	movwf	FLASH_ReadWord@GIEBitValue
  8845                           
  8846                           ;memory.c: 12:  INTCONbits.GIE = 0;
  8847  2808  138B               	bcf	11,7	;volatile
  8848                           
  8849                           ;memory.c: 13:  NVMADRL = (flashAddr & 0x00FF);
  8850  2809  082C               	movf	FLASH_ReadWord@flashAddr,w
  8851  280A  0150               	movlb	16	; select bank16
  8852  280B  009A               	movwf	26	;volatile
  8853                           
  8854                           ;memory.c: 14:  NVMADRH = ((flashAddr & 0xFF00) >> 8);
  8855  280C  0140               	movlb	0	; select bank0
  8856  280D  082D               	movf	FLASH_ReadWord@flashAddr+1,w
  8857  280E  0150               	movlb	16	; select bank16
  8858  280F  009B               	movwf	27	;volatile
  8859                           
  8860                           ;memory.c: 16:  NVMCON1bits.NVMREGS = 0;
  8861  2810  131E               	bcf	30,6	;volsfr
  8862                           
  8863                           ;memory.c: 17:  NVMCON1bits.RD = 1;
  8864  2811  141E               	bsf	30,0	;volsfr
  8865                           
  8866                           ;memory.c: 18:  __nop();
  8867  2812  0000               	nop
  8868                           
  8869                           ;memory.c: 19:  __nop();
  8870  2813  0000               	nop
  8871                           
  8872                           ;memory.c: 20:  INTCONbits.GIE = GIEBitValue;
  8873  2814  0140               	movlb	0	; select bank0
  8874  2815  0C2E               	rrf	FLASH_ReadWord@GIEBitValue,w
  8875  2816  1C03               	skipc
  8876  2817  138B               	bcf	11,7	;volatile
  8877  2818  1803               	skipnc
  8878  2819  178B               	bsf	11,7	;volatile
  8879                           
  8880                           ;memory.c: 22:  return((uint16_t) ((NVMDATH << 8) | NVMDATL));
  8881  281A  0150               	movlb	16	; select bank16
  8882  281B  081D               	movf	29,w	;volatile
  8883  281C  0140               	movlb	0	; select bank0
  8884  281D  00AD               	movwf	?_FLASH_ReadWord+1
  8885  281E  0150               	movlb	16	; select bank16
  8886  281F  081C               	movf	28,w	;volatile
  8887  2820  0140               	movlb	0	; select bank0
  8888  2821  00AC               	movwf	?_FLASH_ReadWord
  8889  2822  0008               	return
  8890  2823                     __end_of_FLASH_ReadWord:	
  8891                           
  8892                           	psect	text5
  8893  3695                     __ptext5:	
  8894 ;; *************** function _menu *****************
  8895 ;; Defined at:
  8896 ;;		line 97 in file "menuhelper.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  nextState       1   41[BANK2 ] char 
  8901 ;;  page            1   40[BANK2 ] char 
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      void 
  8904 ;; Registers used:
  8905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8912 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8913 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8914 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8915 ;;Total ram usage:        6 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    8
  8918 ;; This function calls:
  8919 ;;		_channelSetup
  8920 ;;		_channelView
  8921 ;;		_error
  8922 ;;		_getNextState
  8923 ;;		_getPB
  8924 ;;		_setDPOffset
  8925 ;;		_setFudgeFactor
  8926 ;;		_setLensDia
  8927 ;;		_setOutputPower
  8928 ;;		_setSkyTemp
  8929 ;;		_setup
  8930 ;;		_statusView
  8931 ;;		_timeSince
  8932 ;; This function is called by:
  8933 ;;		_main
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           
  8938                           ;psect for function _menu
  8939  3695                     _menu:	
  8940                           
  8941                           ;menuhelper.c: 99:  static uint8_t state = ST_STATUS_VIEW;;menuhelper.c: 100:  int8_t pa
      +                          ge, nextState;;menuhelper.c: 113:  page = (*stateFuncTbl[state])();
  8942                           
  8943                           ;incstack = 0
  8944                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8945  3695  0142               	movlb	2	; select bank2
  8946  3696  086A               	movf	menu@state^(0+256),w
  8947  3697  00C4               	movwf	??_menu^(0+256)
  8948  3698  01C5               	clrf	(??_menu^(0+256)+1)
  8949  3699  35C4               	lslf	??_menu^(0+256),f
  8950  369A  0DC5               	rlf	(??_menu^(0+256)+1),f
  8951  369B  306C               	movlw	low (_stateFuncTbl| (0+32768))
  8952  369C  0744               	addwf	??_menu^(0+256),w
  8953  369D  0084               	movwf	4
  8954  369E  30B8               	movlw	high (_stateFuncTbl| (0+32768))
  8955  369F  3D45               	addwfc	(??_menu+1)^(0+256),w
  8956  36A0  0085               	movwf	5
  8957  36A1  3F01               	moviw [1]fsr0
  8958  36A2  008A               	movwf	10
  8959  36A3  3F00               	moviw [0]fsr0
  8960  36A4  000A               	callw
  8961  36A5  31B6               	pagesel	$
  8962  36A6  0142               	movlb	2	; select bank2
  8963  36A7  00C6               	movwf	(??_menu+2)^(0+256)
  8964  36A8  0846               	movf	(??_menu+2)^(0+256),w
  8965  36A9  00C8               	movwf	menu@page^(0+256)
  8966                           
  8967                           ;menuhelper.c: 115:  g_screenRefresh = 0;
  8968  36AA  0140               	movlb	0	; select bank0
  8969  36AB  01E3               	clrf	_g_screenRefresh
  8970                           
  8971                           ;menuhelper.c: 119:  nextState = getNextState(state, page, getPB(),
  8972  36AC  0142               	movlb	2	; select bank2
  8973  36AD  0848               	movf	menu@page^(0+256),w
  8974  36AE  00C4               	movwf	??_menu^(0+256)
  8975  36AF  0844               	movf	??_menu^(0+256),w
  8976  36B0  0140               	movlb	0	; select bank0
  8977  36B1  00C0               	movwf	getNextState@intState
  8978  36B2  31BE  2681  31B6   	fcall	_getPB
  8979  36B5  0142               	movlb	2	; select bank2
  8980  36B6  00C5               	movwf	(??_menu+1)^(0+256)
  8981  36B7  0845               	movf	(??_menu+1)^(0+256),w
  8982  36B8  0140               	movlb	0	; select bank0
  8983  36B9  00C1               	movwf	getNextState@pb
  8984  36BA  0143               	movlb	3	; select bank3
  8985  36BB  086A               	movf	(_userActivity+3)^(0+384),w	;volatile
  8986  36BC  0140               	movlb	0	; select bank0
  8987  36BD  00AF               	movwf	timeSince@since+3
  8988  36BE  0143               	movlb	3	; select bank3
  8989  36BF  0869               	movf	(_userActivity+2)^(0+384),w	;volatile
  8990  36C0  0140               	movlb	0	; select bank0
  8991  36C1  00AE               	movwf	timeSince@since+2
  8992  36C2  0143               	movlb	3	; select bank3
  8993  36C3  0868               	movf	(_userActivity+1)^(0+384),w	;volatile
  8994  36C4  0140               	movlb	0	; select bank0
  8995  36C5  00AD               	movwf	timeSince@since+1
  8996  36C6  0143               	movlb	3	; select bank3
  8997  36C7  0867               	movf	_userActivity^(0+384),w	;volatile
  8998  36C8  0140               	movlb	0	; select bank0
  8999  36C9  00AC               	movwf	timeSince@since
  9000  36CA  31B7  2780  31B6   	fcall	_timeSince
  9001  36CD  0140               	movlb	0	; select bank0
  9002  36CE  082F               	movf	?_timeSince+3,w
  9003  36CF  1D03               	btfss	3,2
  9004  36D0  2EDA               	goto	u14691
  9005  36D1  082E               	movf	?_timeSince+2,w
  9006  36D2  1D03               	btfss	3,2
  9007  36D3  2EDA               	goto	u14691
  9008  36D4  302D               	movlw	45
  9009  36D5  022C               	subwf	?_timeSince,w
  9010  36D6  3001               	movlw	1
  9011  36D7  3B2D               	subwfb	?_timeSince+1,w
  9012  36D8  1C03               	btfss	3,0
  9013  36D9  2EDC               	goto	u14690
  9014  36DA                     u14691:	
  9015  36DA  3001               	movlw	1
  9016  36DB  2EDD               	goto	u14700
  9017  36DC                     u14690:	
  9018  36DC  3000               	movlw	0
  9019  36DD                     u14700:	
  9020  36DD  0142               	movlb	2	; select bank2
  9021  36DE  00C6               	movwf	(??_menu+2)^(0+256)
  9022  36DF  0846               	movf	(??_menu+2)^(0+256),w
  9023  36E0  0140               	movlb	0	; select bank0
  9024  36E1  00C2               	movwf	getNextState@timeout
  9025  36E2  0142               	movlb	2	; select bank2
  9026  36E3  086A               	movf	menu@state^(0+256),w
  9027  36E4  31AD  2505  31B6   	fcall	_getNextState
  9028  36E7  0142               	movlb	2	; select bank2
  9029  36E8  00C7               	movwf	(??_menu+3)^(0+256)
  9030  36E9  0847               	movf	(??_menu+3)^(0+256),w
  9031  36EA  00C9               	movwf	menu@nextState^(0+256)
  9032                           
  9033                           ;menuhelper.c: 122:  if (nextState > -1) {
  9034  36EB  1BC9               	btfsc	menu@nextState^(0+256),7
  9035  36EC  2F06               	goto	l11327
  9036                           
  9037                           ;menuhelper.c: 124:   if (state != nextState) {
  9038  36ED  0849               	movf	menu@nextState^(0+256),w
  9039  36EE  00C4               	movwf	??_menu^(0+256)
  9040  36EF  01C5               	clrf	(??_menu^(0+256)+1)
  9041  36F0  1BC4               	btfsc	??_menu^(0+256),7
  9042  36F1  03C5               	decf	(??_menu^(0+256)+1),f
  9043  36F2  086A               	movf	menu@state^(0+256),w
  9044  36F3  00C6               	movwf	(??_menu+2)^(0+256)
  9045  36F4  01C7               	clrf	((??_menu+2)^(0+256)+1)
  9046  36F5  0845               	movf	(??_menu+1)^(0+256),w
  9047  36F6  0647               	xorwf	(??_menu+3)^(0+256),w
  9048  36F7  1D03               	skipz
  9049  36F8  2EFB               	goto	u14725
  9050  36F9  0844               	movf	??_menu^(0+256),w
  9051  36FA  0646               	xorwf	(??_menu+2)^(0+256),w
  9052  36FB                     u14725:	
  9053  36FB  1903               	skipnz
  9054  36FC  0008               	return
  9055                           
  9056                           ;menuhelper.c: 125:    g_screenRefresh = 1;
  9057  36FD  0140               	movlb	0	; select bank0
  9058  36FE  01E3               	clrf	_g_screenRefresh
  9059  36FF  0AE3               	incf	_g_screenRefresh,f
  9060                           
  9061                           ;menuhelper.c: 126:    state = nextState;
  9062  3700  0142               	movlb	2	; select bank2
  9063  3701  0849               	movf	menu@nextState^(0+256),w
  9064  3702  00C4               	movwf	??_menu^(0+256)
  9065  3703  0844               	movf	??_menu^(0+256),w
  9066  3704  00EA               	movwf	menu@state^(0+256)
  9067                           
  9068                           ;menuhelper.c: 128:  } else {
  9069                           
  9070                           ;menuhelper.c: 127:   }
  9071  3705  0008               	return
  9072  3706                     l11327:	
  9073                           
  9074                           ;menuhelper.c: 129:   error(ERR_MENU);
  9075  3706  300C               	movlw	12
  9076  3707  31B0  20C1         	fcall	_error
  9077  3709  0008               	return
  9078  370A                     __end_of_menu:	
  9079                           ;menuhelper.c: 130:  }
  9080                           
  9081                           
  9082                           	psect	text6
  9083  3620                     __ptext6:	
  9084 ;; *************** function _setFudgeFactor *****************
  9085 ;; Defined at:
  9086 ;;		line 333 in file "menu.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;		None
  9089 ;; Auto vars:     Size  Location     Type
  9090 ;;		None
  9091 ;; Return value:  Size  Location     Type
  9092 ;;                  1    wreg      unsigned char 
  9093 ;; Registers used:
  9094 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9095 ;; Tracked objects:
  9096 ;;		On entry : 0/0
  9097 ;;		On exit  : 0/0
  9098 ;;		Unchanged: 0/0
  9099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9102 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9103 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9104 ;;Total ram usage:        1 bytes
  9105 ;; Hardware stack levels used:    1
  9106 ;; Hardware stack levels required when called:    7
  9107 ;; This function calls:
  9108 ;;		_OLED_print_xy
  9109 ;;		_ftoa
  9110 ;;		_getPB
  9111 ;;		_returnToPage
  9112 ;;		_spinInput
  9113 ;;		_storeNVM
  9114 ;; This function is called by:
  9115 ;;		_menu
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           
  9120                           ;psect for function _setFudgeFactor
  9121  3620                     _setFudgeFactor:	
  9122                           
  9123                           ;menu.c: 335:  returnToPage(0);
  9124                           
  9125                           ;incstack = 0
  9126                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9127  3620  3000               	movlw	0
  9128  3621  31B0  205D  31B6   	fcall	_returnToPage
  9129                           
  9130                           ;menu.c: 336:  if (g_screenRefresh)
  9131  3624  0140               	movlb	0	; select bank0
  9132  3625  0863               	movf	_g_screenRefresh,w
  9133  3626  1903               	btfsc	3,2
  9134  3627  2E31               	goto	l10707
  9135                           
  9136                           ;menu.c: 337:   OLED_print_xy(0, 0, "Fudge factor");
  9137  3628  01B3               	clrf	OLED_print_xy@row
  9138  3629  30CF               	movlw	low ((STR_48+24)| (0+32768))
  9139  362A  00B4               	movwf	OLED_print_xy@s
  9140  362B  30B8               	movlw	high ((STR_48+24)| (0+32768))
  9141  362C  00B5               	movwf	OLED_print_xy@s+1
  9142  362D  3000               	movlw	0
  9143  362E  31B0  208E  31B6   	fcall	_OLED_print_xy
  9144  3631                     l10707:	
  9145                           
  9146                           ;menu.c: 338:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
  9147  3631  306F               	movlw	111
  9148  3632  0141               	movlb	1	; select bank1
  9149  3633  00D9               	movwf	spinInput@input^(0+128)
  9150  3634  3027               	movlw	39
  9151  3635  00DA               	movwf	(spinInput@input^(0+128)+1)
  9152  3636  303D               	movlw	61
  9153  3637  00DE               	movwf	(spinInput@min+3)^(0+128)
  9154  3638  30CC               	movlw	204
  9155  3639  00DD               	movwf	(spinInput@min+2)^(0+128)
  9156  363A  30CC               	movlw	204
  9157  363B  00DC               	movwf	(spinInput@min+1)^(0+128)
  9158  363C  30CD               	movlw	205
  9159  363D  00DB               	movwf	spinInput@min^(0+128)
  9160  363E  3040               	movlw	64
  9161  363F  00E2               	movwf	(spinInput@max+3)^(0+128)
  9162  3640  30A0               	movlw	160
  9163  3641  00E1               	movwf	(spinInput@max+2)^(0+128)
  9164  3642  3000               	movlw	0
  9165  3643  00E0               	movwf	(spinInput@max+1)^(0+128)
  9166  3644  3000               	movlw	0
  9167  3645  00DF               	movwf	spinInput@max^(0+128)
  9168  3646  303D               	movlw	61
  9169  3647  00E6               	movwf	(spinInput@step+3)^(0+128)
  9170  3648  30CC               	movlw	204
  9171  3649  00E5               	movwf	(spinInput@step+2)^(0+128)
  9172  364A  30CC               	movlw	204
  9173  364B  00E4               	movwf	(spinInput@step+1)^(0+128)
  9174  364C  30CD               	movlw	205
  9175  364D  00E3               	movwf	spinInput@step^(0+128)
  9176  364E  31AA  2247  31B6   	fcall	_spinInput
  9177                           
  9178                           ;menu.c: 339:  ftoa(str, data.fudgeFactor, 3, 1);
  9179  3651  306F               	movlw	111
  9180  3652  0086               	movwf	6
  9181  3653  3027               	movlw	39
  9182  3654  0087               	movwf	7
  9183  3655  3F40               	moviw [0]fsr1
  9184  3656  0141               	movlb	1	; select bank1
  9185  3657  00D9               	movwf	ftoa@fValue^(0+128)
  9186  3658  3F41               	moviw [1]fsr1
  9187  3659  00DA               	movwf	(ftoa@fValue+1)^(0+128)
  9188  365A  3F42               	moviw [2]fsr1
  9189  365B  00DB               	movwf	(ftoa@fValue+2)^(0+128)
  9190  365C  3F43               	moviw [3]fsr1
  9191  365D  00DC               	movwf	(ftoa@fValue+3)^(0+128)
  9192  365E  3003               	movlw	3
  9193  365F  00E7               	movwf	??_setFudgeFactor^(0+128)
  9194  3660  0867               	movf	??_setFudgeFactor^(0+128),w
  9195  3661  00DD               	movwf	ftoa@width^(0+128)
  9196  3662  01DE               	clrf	ftoa@prec^(0+128)
  9197  3663  0ADE               	incf	ftoa@prec^(0+128),f
  9198  3664  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9199  3665  31A0  20A0  31B6   	fcall	_ftoa
  9200                           
  9201                           ;menu.c: 340:  OLED_print_xy(0, 1, "\004");
  9202  3668  0140               	movlb	0	; select bank0
  9203  3669  01B3               	clrf	OLED_print_xy@row
  9204  366A  0AB3               	incf	OLED_print_xy@row,f
  9205  366B  30B4               	movlw	low ((STR_54+5)| (0+32768))
  9206  366C  00B4               	movwf	OLED_print_xy@s
  9207  366D  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9208  366E  00B5               	movwf	OLED_print_xy@s+1
  9209  366F  3000               	movlw	0
  9210  3670  31B0  208E  31B6   	fcall	_OLED_print_xy
  9211                           
  9212                           ;menu.c: 341:  OLED_print_xy(1, 1, str);
  9213  3673  0140               	movlb	0	; select bank0
  9214  3674  01B3               	clrf	OLED_print_xy@row
  9215  3675  0AB3               	incf	OLED_print_xy@row,f
  9216  3676  303F               	movlw	low _str
  9217  3677  00B4               	movwf	OLED_print_xy@s
  9218  3678  3002               	movlw	high _str
  9219  3679  00B5               	movwf	OLED_print_xy@s+1
  9220  367A  3001               	movlw	1
  9221  367B  31B0  208E  31B6   	fcall	_OLED_print_xy
  9222                           
  9223                           ;menu.c: 342:  OLED_print_xy(4, 1, " \003      ");
  9224  367E  0140               	movlb	0	; select bank0
  9225  367F  01B3               	clrf	OLED_print_xy@row
  9226  3680  0AB3               	incf	OLED_print_xy@row,f
  9227  3681  3057               	movlw	low (STR_61| (0+32768))
  9228  3682  00B4               	movwf	OLED_print_xy@s
  9229  3683  30BB               	movlw	high (STR_61| (0+32768))
  9230  3684  00B5               	movwf	OLED_print_xy@s+1
  9231  3685  3004               	movlw	4
  9232  3686  31B0  208E  31B6   	fcall	_OLED_print_xy
  9233                           
  9234                           ;menu.c: 343:  if (getPB() == PB_SHORT) {
  9235  3689  31BE  2681  31B6   	fcall	_getPB
  9236  368C  3A01               	xorlw	1
  9237  368D  1D03               	skipz
  9238  368E  2E93               	goto	l10719
  9239                           
  9240                           ;menu.c: 344:   storeNVM();
  9241  368F  31A8  20A8         	fcall	_storeNVM
  9242                           
  9243                           ;menu.c: 345:   return 0;
  9244  3691  3000               	movlw	0
  9245  3692  0008               	return
  9246  3693                     l10719:	
  9247                           ;menu.c: 346:  }
  9248                           
  9249                           
  9250                           ;menu.c: 347:  return 1;
  9251  3693  3001               	movlw	1
  9252  3694  0008               	return
  9253  3695                     __end_of_setFudgeFactor:	
  9254                           
  9255                           	psect	text7
  9256  35AC                     __ptext7:	
  9257 ;; *************** function _setSkyTemp *****************
  9258 ;; Defined at:
  9259 ;;		line 312 in file "menu.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;		None
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;		None
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      unsigned char 
  9266 ;; Registers used:
  9267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9275 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9276 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9277 ;;Total ram usage:        1 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    7
  9280 ;; This function calls:
  9281 ;;		_OLED_print_xy
  9282 ;;		_ftoa
  9283 ;;		_getPB
  9284 ;;		_returnToPage
  9285 ;;		_spinInput
  9286 ;;		_storeNVM
  9287 ;; This function is called by:
  9288 ;;		_menu
  9289 ;; This function uses a non-reentrant model
  9290 ;;
  9291                           
  9292                           
  9293                           ;psect for function _setSkyTemp
  9294  35AC                     _setSkyTemp:	
  9295                           
  9296                           ;menu.c: 314:  returnToPage(0);
  9297                           
  9298                           ;incstack = 0
  9299                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9300  35AC  3000               	movlw	0
  9301  35AD  31B0  205D  31B5   	fcall	_returnToPage
  9302                           
  9303                           ;menu.c: 315:  if (g_screenRefresh)
  9304  35B0  0140               	movlb	0	; select bank0
  9305  35B1  0863               	movf	_g_screenRefresh,w
  9306  35B2  1903               	btfsc	3,2
  9307  35B3  2DBD               	goto	l10685
  9308                           
  9309                           ;menu.c: 316:   OLED_print_xy(0, 0, "Sky temp.   ");
  9310  35B4  01B3               	clrf	OLED_print_xy@row
  9311  35B5  30A9               	movlw	low (STR_56| (0+32768))
  9312  35B6  00B4               	movwf	OLED_print_xy@s
  9313  35B7  30BA               	movlw	high (STR_56| (0+32768))
  9314  35B8  00B5               	movwf	OLED_print_xy@s+1
  9315  35B9  3000               	movlw	0
  9316  35BA  31B0  208E  31B5   	fcall	_OLED_print_xy
  9317  35BD                     l10685:	
  9318                           
  9319                           ;menu.c: 317:  spinInput(&data.skyTemp, -50, -20, 1);
  9320  35BD  306B               	movlw	107
  9321  35BE  0141               	movlb	1	; select bank1
  9322  35BF  00D9               	movwf	spinInput@input^(0+128)
  9323  35C0  3027               	movlw	39
  9324  35C1  00DA               	movwf	(spinInput@input^(0+128)+1)
  9325  35C2  30C2               	movlw	194
  9326  35C3  00DE               	movwf	(spinInput@min+3)^(0+128)
  9327  35C4  3048               	movlw	72
  9328  35C5  00DD               	movwf	(spinInput@min+2)^(0+128)
  9329  35C6  3000               	movlw	0
  9330  35C7  00DC               	movwf	(spinInput@min+1)^(0+128)
  9331  35C8  3000               	movlw	0
  9332  35C9  00DB               	movwf	spinInput@min^(0+128)
  9333  35CA  30C1               	movlw	193
  9334  35CB  00E2               	movwf	(spinInput@max+3)^(0+128)
  9335  35CC  30A0               	movlw	160
  9336  35CD  00E1               	movwf	(spinInput@max+2)^(0+128)
  9337  35CE  3000               	movlw	0
  9338  35CF  00E0               	movwf	(spinInput@max+1)^(0+128)
  9339  35D0  3000               	movlw	0
  9340  35D1  00DF               	movwf	spinInput@max^(0+128)
  9341  35D2  303F               	movlw	63
  9342  35D3  00E6               	movwf	(spinInput@step+3)^(0+128)
  9343  35D4  3080               	movlw	128
  9344  35D5  00E5               	movwf	(spinInput@step+2)^(0+128)
  9345  35D6  3000               	movlw	0
  9346  35D7  00E4               	movwf	(spinInput@step+1)^(0+128)
  9347  35D8  3000               	movlw	0
  9348  35D9  00E3               	movwf	spinInput@step^(0+128)
  9349  35DA  31AA  2247  31B5   	fcall	_spinInput
  9350                           
  9351                           ;menu.c: 318:  ftoa(str, data.skyTemp, 3, 0);
  9352  35DD  306B               	movlw	107
  9353  35DE  0086               	movwf	6
  9354  35DF  3027               	movlw	39
  9355  35E0  0087               	movwf	7
  9356  35E1  3F40               	moviw [0]fsr1
  9357  35E2  0141               	movlb	1	; select bank1
  9358  35E3  00D9               	movwf	ftoa@fValue^(0+128)
  9359  35E4  3F41               	moviw [1]fsr1
  9360  35E5  00DA               	movwf	(ftoa@fValue+1)^(0+128)
  9361  35E6  3F42               	moviw [2]fsr1
  9362  35E7  00DB               	movwf	(ftoa@fValue+2)^(0+128)
  9363  35E8  3F43               	moviw [3]fsr1
  9364  35E9  00DC               	movwf	(ftoa@fValue+3)^(0+128)
  9365  35EA  3003               	movlw	3
  9366  35EB  00E7               	movwf	??_setSkyTemp^(0+128)
  9367  35EC  0867               	movf	??_setSkyTemp^(0+128),w
  9368  35ED  00DD               	movwf	ftoa@width^(0+128)
  9369  35EE  01DE               	clrf	ftoa@prec^(0+128)
  9370  35EF  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9371  35F0  31A0  20A0  31B5   	fcall	_ftoa
  9372                           
  9373                           ;menu.c: 319:  OLED_print_xy(0, 1, "\004");
  9374  35F3  0140               	movlb	0	; select bank0
  9375  35F4  01B3               	clrf	OLED_print_xy@row
  9376  35F5  0AB3               	incf	OLED_print_xy@row,f
  9377  35F6  30B4               	movlw	low ((STR_54+5)| (0+32768))
  9378  35F7  00B4               	movwf	OLED_print_xy@s
  9379  35F8  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9380  35F9  00B5               	movwf	OLED_print_xy@s+1
  9381  35FA  3000               	movlw	0
  9382  35FB  31B0  208E  31B5   	fcall	_OLED_print_xy
  9383                           
  9384                           ;menu.c: 320:  OLED_print_xy(1, 1, str);
  9385  35FE  0140               	movlb	0	; select bank0
  9386  35FF  01B3               	clrf	OLED_print_xy@row
  9387  3600  0AB3               	incf	OLED_print_xy@row,f
  9388  3601  303F               	movlw	low _str
  9389  3602  00B4               	movwf	OLED_print_xy@s
  9390  3603  3002               	movlw	high _str
  9391  3604  00B5               	movwf	OLED_print_xy@s+1
  9392  3605  3001               	movlw	1
  9393  3606  31B0  208E  31B5   	fcall	_OLED_print_xy
  9394                           
  9395                           ;menu.c: 321:  OLED_print_xy(4, 1, "\001 \003     ");
  9396  3609  0140               	movlb	0	; select bank0
  9397  360A  01B3               	clrf	OLED_print_xy@row
  9398  360B  0AB3               	incf	OLED_print_xy@row,f
  9399  360C  304E               	movlw	low (STR_58| (0+32768))
  9400  360D  00B4               	movwf	OLED_print_xy@s
  9401  360E  30BB               	movlw	high (STR_58| (0+32768))
  9402  360F  00B5               	movwf	OLED_print_xy@s+1
  9403  3610  3004               	movlw	4
  9404  3611  31B0  208E  31B5   	fcall	_OLED_print_xy
  9405                           
  9406                           ;menu.c: 322:  if (getPB() == PB_SHORT) {
  9407  3614  31BE  2681  31B5   	fcall	_getPB
  9408  3617  3A01               	xorlw	1
  9409  3618  1D03               	skipz
  9410  3619  2E1E               	goto	l10697
  9411                           
  9412                           ;menu.c: 323:   storeNVM();
  9413  361A  31A8  20A8         	fcall	_storeNVM
  9414                           
  9415                           ;menu.c: 324:   return 0;
  9416  361C  3000               	movlw	0
  9417  361D  0008               	return
  9418  361E                     l10697:	
  9419                           ;menu.c: 325:  }
  9420                           
  9421                           
  9422                           ;menu.c: 326:  return 1;
  9423  361E  3001               	movlw	1
  9424  361F  0008               	return
  9425  3620                     __end_of_setSkyTemp:	
  9426                           
  9427                           	psect	text8
  9428  370A                     __ptext8:	
  9429 ;; *************** function _setDPOffset *****************
  9430 ;; Defined at:
  9431 ;;		line 291 in file "menu.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;		None
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;		None
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  1    wreg      unsigned char 
  9438 ;; Registers used:
  9439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9447 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9448 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9449 ;;Total ram usage:        1 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    7
  9452 ;; This function calls:
  9453 ;;		_OLED_print_xy
  9454 ;;		_ftoa
  9455 ;;		_getPB
  9456 ;;		_returnToPage
  9457 ;;		_spinInput
  9458 ;;		_storeNVM
  9459 ;; This function is called by:
  9460 ;;		_menu
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           
  9465                           ;psect for function _setDPOffset
  9466  370A                     _setDPOffset:	
  9467                           
  9468                           ;menu.c: 293:  returnToPage(0);
  9469                           
  9470                           ;incstack = 0
  9471                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9472  370A  3000               	movlw	0
  9473  370B  31B0  205D  31B7   	fcall	_returnToPage
  9474                           
  9475                           ;menu.c: 294:  if (g_screenRefresh)
  9476  370E  0140               	movlb	0	; select bank0
  9477  370F  0863               	movf	_g_screenRefresh,w
  9478  3710  1903               	btfsc	3,2
  9479  3711  2F1B               	goto	l10663
  9480                           
  9481                           ;menu.c: 295:   OLED_print_xy(0, 0, "DP offset   ");
  9482  3712  01B3               	clrf	OLED_print_xy@row
  9483  3713  30C3               	movlw	low (STR_53| (0+32768))
  9484  3714  00B4               	movwf	OLED_print_xy@s
  9485  3715  30BA               	movlw	high (STR_53| (0+32768))
  9486  3716  00B5               	movwf	OLED_print_xy@s+1
  9487  3717  3000               	movlw	0
  9488  3718  31B0  208E  31B7   	fcall	_OLED_print_xy
  9489  371B                     l10663:	
  9490                           
  9491                           ;menu.c: 296:  spinInput(&data.dpOffset, 0, 10, 0.5);
  9492  371B  3067               	movlw	103
  9493  371C  0141               	movlb	1	; select bank1
  9494  371D  00D9               	movwf	spinInput@input^(0+128)
  9495  371E  3027               	movlw	39
  9496  371F  00DA               	movwf	(spinInput@input^(0+128)+1)
  9497  3720  3000               	movlw	0
  9498  3721  00DE               	movwf	(spinInput@min+3)^(0+128)
  9499  3722  3000               	movlw	0
  9500  3723  00DD               	movwf	(spinInput@min+2)^(0+128)
  9501  3724  3000               	movlw	0
  9502  3725  00DC               	movwf	(spinInput@min+1)^(0+128)
  9503  3726  3000               	movlw	0
  9504  3727  00DB               	movwf	spinInput@min^(0+128)
  9505  3728  3041               	movlw	65
  9506  3729  00E2               	movwf	(spinInput@max+3)^(0+128)
  9507  372A  3020               	movlw	32
  9508  372B  00E1               	movwf	(spinInput@max+2)^(0+128)
  9509  372C  3000               	movlw	0
  9510  372D  00E0               	movwf	(spinInput@max+1)^(0+128)
  9511  372E  3000               	movlw	0
  9512  372F  00DF               	movwf	spinInput@max^(0+128)
  9513  3730  303F               	movlw	63
  9514  3731  00E6               	movwf	(spinInput@step+3)^(0+128)
  9515  3732  3000               	movlw	0
  9516  3733  00E5               	movwf	(spinInput@step+2)^(0+128)
  9517  3734  3000               	movlw	0
  9518  3735  00E4               	movwf	(spinInput@step+1)^(0+128)
  9519  3736  3000               	movlw	0
  9520  3737  00E3               	movwf	spinInput@step^(0+128)
  9521  3738  31AA  2247  31B7   	fcall	_spinInput
  9522                           
  9523                           ;menu.c: 297:  ftoa(str, data.dpOffset, 4, 1);
  9524  373B  304A               	movlw	74
  9525  373C  0086               	movwf	6
  9526  373D  3027               	movlw	39
  9527  373E  0087               	movwf	7
  9528  373F  315D               	addfsr 1,29
  9529  3740  3F40               	moviw [0]fsr1
  9530  3741  0141               	movlb	1	; select bank1
  9531  3742  00D9               	movwf	ftoa@fValue^(0+128)
  9532  3743  3F41               	moviw [1]fsr1
  9533  3744  00DA               	movwf	(ftoa@fValue+1)^(0+128)
  9534  3745  3F42               	moviw [2]fsr1
  9535  3746  00DB               	movwf	(ftoa@fValue+2)^(0+128)
  9536  3747  3F43               	moviw [3]fsr1
  9537  3748  00DC               	movwf	(ftoa@fValue+3)^(0+128)
  9538  3749  3004               	movlw	4
  9539  374A  00E7               	movwf	??_setDPOffset^(0+128)
  9540  374B  0867               	movf	??_setDPOffset^(0+128),w
  9541  374C  00DD               	movwf	ftoa@width^(0+128)
  9542  374D  01DE               	clrf	ftoa@prec^(0+128)
  9543  374E  0ADE               	incf	ftoa@prec^(0+128),f
  9544  374F  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9545  3750  31A0  20A0  31B7   	fcall	_ftoa
  9546                           
  9547                           ;menu.c: 298:  OLED_print_xy(0, 1, "temp.\004");
  9548  3753  0140               	movlb	0	; select bank0
  9549  3754  01B3               	clrf	OLED_print_xy@row
  9550  3755  0AB3               	incf	OLED_print_xy@row,f
  9551  3756  30AF               	movlw	low (STR_54| (0+32768))
  9552  3757  00B4               	movwf	OLED_print_xy@s
  9553  3758  30BB               	movlw	high (STR_54| (0+32768))
  9554  3759  00B5               	movwf	OLED_print_xy@s+1
  9555  375A  3000               	movlw	0
  9556  375B  31B0  208E  31B7   	fcall	_OLED_print_xy
  9557                           
  9558                           ;menu.c: 299:  OLED_print_xy(6, 1, str);
  9559  375E  0140               	movlb	0	; select bank0
  9560  375F  01B3               	clrf	OLED_print_xy@row
  9561  3760  0AB3               	incf	OLED_print_xy@row,f
  9562  3761  303F               	movlw	low _str
  9563  3762  00B4               	movwf	OLED_print_xy@s
  9564  3763  3002               	movlw	high _str
  9565  3764  00B5               	movwf	OLED_print_xy@s+1
  9566  3765  3006               	movlw	6
  9567  3766  31B0  208E  31B7   	fcall	_OLED_print_xy
  9568                           
  9569                           ;menu.c: 300:  OLED_print_xy(10, 1, "\001\003");
  9570  3769  0140               	movlb	0	; select bank0
  9571  376A  01B3               	clrf	OLED_print_xy@row
  9572  376B  0AB3               	incf	OLED_print_xy@row,f
  9573  376C  30D6               	movlw	low (STR_55| (0+32768))
  9574  376D  00B4               	movwf	OLED_print_xy@s
  9575  376E  30BB               	movlw	high (STR_55| (0+32768))
  9576  376F  00B5               	movwf	OLED_print_xy@s+1
  9577  3770  300A               	movlw	10
  9578  3771  31B0  208E  31B7   	fcall	_OLED_print_xy
  9579                           
  9580                           ;menu.c: 301:  if (getPB() == PB_SHORT) {
  9581  3774  31BE  2681  31B7   	fcall	_getPB
  9582  3777  3A01               	xorlw	1
  9583  3778  1D03               	skipz
  9584  3779  2F7E               	goto	l10675
  9585                           
  9586                           ;menu.c: 302:   storeNVM();
  9587  377A  31A8  20A8         	fcall	_storeNVM
  9588                           
  9589                           ;menu.c: 303:   return 0;
  9590  377C  3000               	movlw	0
  9591  377D  0008               	return
  9592  377E                     l10675:	
  9593                           ;menu.c: 304:  }
  9594                           
  9595                           
  9596                           ;menu.c: 305:  return 1;
  9597  377E  3001               	movlw	1
  9598  377F  0008               	return
  9599  3780                     __end_of_setDPOffset:	
  9600                           
  9601                           	psect	text9
  9602  0806                     __ptext9:	
  9603 ;; *************** function _setup *****************
  9604 ;; Defined at:
  9605 ;;		line 267 in file "menu.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;		None
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;		None
  9610 ;; Return value:  Size  Location     Type
  9611 ;;                  1    wreg      unsigned char 
  9612 ;; Registers used:
  9613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9621 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9622 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9623 ;;Total ram usage:        2 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; Hardware stack levels required when called:    7
  9626 ;; This function calls:
  9627 ;;		_OLED_print_xy
  9628 ;;		_ftoa
  9629 ;;		_paging
  9630 ;;		_returnToPage
  9631 ;; This function is called by:
  9632 ;;		_menu
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           
  9637                           ;psect for function _setup
  9638  0806                     _setup:	
  9639                           
  9640                           ;menu.c: 269:  static uint8_t page = 0;;menu.c: 271:  returnToPage(page);
  9641                           
  9642                           ;incstack = 0
  9643                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9644  0806  0140               	movlb	0	; select bank0
  9645  0807  085A               	movf	setup@page,w
  9646  0808  31B0  205D  3188   	fcall	_returnToPage
  9647                           
  9648                           ;menu.c: 272:  if (g_screenRefresh) {
  9649  080B  0140               	movlb	0	; select bank0
  9650  080C  0863               	movf	_g_screenRefresh,w
  9651  080D  1903               	btfsc	3,2
  9652  080E  28AA               	goto	l10651
  9653                           
  9654                           ;menu.c: 273:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  9655  080F  01B3               	clrf	OLED_print_xy@row
  9656  0810  30B7               	movlw	low (STR_48| (0+32768))
  9657  0811  00B4               	movwf	OLED_print_xy@s
  9658  0812  30B8               	movlw	high (STR_48| (0+32768))
  9659  0813  00B5               	movwf	OLED_print_xy@s+1
  9660  0814  3000               	movlw	0
  9661  0815  31B0  208E  3188   	fcall	_OLED_print_xy
  9662                           
  9663                           ;menu.c: 274:   OLED_print_xy(0, 1, "temp. ");
  9664  0818  0140               	movlb	0	; select bank0
  9665  0819  01B3               	clrf	OLED_print_xy@row
  9666  081A  0AB3               	incf	OLED_print_xy@row,f
  9667  081B  30BD               	movlw	low (STR_49| (0+32768))
  9668  081C  00B4               	movwf	OLED_print_xy@s
  9669  081D  30BB               	movlw	high (STR_49| (0+32768))
  9670  081E  00B5               	movwf	OLED_print_xy@s+1
  9671  081F  3000               	movlw	0
  9672  0820  31B0  208E  3188   	fcall	_OLED_print_xy
  9673                           
  9674                           ;menu.c: 275:   ftoa(str, data.dpOffset, 4, 1);
  9675  0823  304A               	movlw	74
  9676  0824  0086               	movwf	6
  9677  0825  3027               	movlw	39
  9678  0826  0087               	movwf	7
  9679  0827  315D               	addfsr 1,29
  9680  0828  3F40               	moviw [0]fsr1
  9681  0829  0141               	movlb	1	; select bank1
  9682  082A  00D9               	movwf	ftoa@fValue^(0+128)
  9683  082B  3F41               	moviw [1]fsr1
  9684  082C  00DA               	movwf	(ftoa@fValue+1)^(0+128)
  9685  082D  3F42               	moviw [2]fsr1
  9686  082E  00DB               	movwf	(ftoa@fValue+2)^(0+128)
  9687  082F  3F43               	moviw [3]fsr1
  9688  0830  00DC               	movwf	(ftoa@fValue+3)^(0+128)
  9689  0831  3004               	movlw	4
  9690  0832  00E7               	movwf	??_setup^(0+128)
  9691  0833  0867               	movf	??_setup^(0+128),w
  9692  0834  00DD               	movwf	ftoa@width^(0+128)
  9693  0835  01DE               	clrf	ftoa@prec^(0+128)
  9694  0836  0ADE               	incf	ftoa@prec^(0+128),f
  9695  0837  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9696  0838  31A0  20A0  3188   	fcall	_ftoa
  9697                           
  9698                           ;menu.c: 276:   OLED_print_xy(6, 1, str);
  9699  083B  0140               	movlb	0	; select bank0
  9700  083C  01B3               	clrf	OLED_print_xy@row
  9701  083D  0AB3               	incf	OLED_print_xy@row,f
  9702  083E  303F               	movlw	low _str
  9703  083F  00B4               	movwf	OLED_print_xy@s
  9704  0840  3002               	movlw	high _str
  9705  0841  00B5               	movwf	OLED_print_xy@s+1
  9706  0842  3006               	movlw	6
  9707  0843  31B0  208E  3188   	fcall	_OLED_print_xy
  9708                           
  9709                           ;menu.c: 277:   OLED_print_xy(10, 1, "\001 ");
  9710  0846  0140               	movlb	0	; select bank0
  9711  0847  01B3               	clrf	OLED_print_xy@row
  9712  0848  0AB3               	incf	OLED_print_xy@row,f
  9713  0849  30D9               	movlw	low (STR_50| (0+32768))
  9714  084A  00B4               	movwf	OLED_print_xy@s
  9715  084B  30BB               	movlw	high (STR_50| (0+32768))
  9716  084C  00B5               	movwf	OLED_print_xy@s+1
  9717  084D  300A               	movlw	10
  9718  084E  31B0  208E  3188   	fcall	_OLED_print_xy
  9719                           
  9720                           ;menu.c: 278:   ftoa(str, data.skyTemp, 3, 0);
  9721  0851  306B               	movlw	107
  9722  0852  0086               	movwf	6
  9723  0853  3027               	movlw	39
  9724  0854  0087               	movwf	7
  9725  0855  3F40               	moviw [0]fsr1
  9726  0856  0141               	movlb	1	; select bank1
  9727  0857  00D9               	movwf	ftoa@fValue^(0+128)
  9728  0858  3F41               	moviw [1]fsr1
  9729  0859  00DA               	movwf	(ftoa@fValue+1)^(0+128)
  9730  085A  3F42               	moviw [2]fsr1
  9731  085B  00DB               	movwf	(ftoa@fValue+2)^(0+128)
  9732  085C  3F43               	moviw [3]fsr1
  9733  085D  00DC               	movwf	(ftoa@fValue+3)^(0+128)
  9734  085E  3003               	movlw	3
  9735  085F  00E7               	movwf	??_setup^(0+128)
  9736  0860  0867               	movf	??_setup^(0+128),w
  9737  0861  00DD               	movwf	ftoa@width^(0+128)
  9738  0862  01DE               	clrf	ftoa@prec^(0+128)
  9739  0863  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9740  0864  31A0  20A0  3188   	fcall	_ftoa
  9741                           
  9742                           ;menu.c: 279:   OLED_print_xy(12 + 0, 1, str);
  9743  0867  0140               	movlb	0	; select bank0
  9744  0868  01B3               	clrf	OLED_print_xy@row
  9745  0869  0AB3               	incf	OLED_print_xy@row,f
  9746  086A  303F               	movlw	low _str
  9747  086B  00B4               	movwf	OLED_print_xy@s
  9748  086C  3002               	movlw	high _str
  9749  086D  00B5               	movwf	OLED_print_xy@s+1
  9750  086E  300C               	movlw	12
  9751  086F  31B0  208E  3188   	fcall	_OLED_print_xy
  9752                           
  9753                           ;menu.c: 280:   OLED_print_xy(12 + 3, 1, "\001        ");
  9754  0872  0140               	movlb	0	; select bank0
  9755  0873  01B3               	clrf	OLED_print_xy@row
  9756  0874  0AB3               	incf	OLED_print_xy@row,f
  9757  0875  3044               	movlw	low (STR_51| (0+32768))
  9758  0876  00B4               	movwf	OLED_print_xy@s
  9759  0877  30BB               	movlw	high (STR_51| (0+32768))
  9760  0878  00B5               	movwf	OLED_print_xy@s+1
  9761  0879  300F               	movlw	15
  9762  087A  31B0  208E  3188   	fcall	_OLED_print_xy
  9763                           
  9764                           ;menu.c: 281:   ftoa(str, data.fudgeFactor, 3, 1);
  9765  087D  306F               	movlw	111
  9766  087E  0086               	movwf	6
  9767  087F  3027               	movlw	39
  9768  0880  0087               	movwf	7
  9769  0881  3F40               	moviw [0]fsr1
  9770  0882  0141               	movlb	1	; select bank1
  9771  0883  00D9               	movwf	ftoa@fValue^(0+128)
  9772  0884  3F41               	moviw [1]fsr1
  9773  0885  00DA               	movwf	(ftoa@fValue+1)^(0+128)
  9774  0886  3F42               	moviw [2]fsr1
  9775  0887  00DB               	movwf	(ftoa@fValue+2)^(0+128)
  9776  0888  3F43               	moviw [3]fsr1
  9777  0889  00DC               	movwf	(ftoa@fValue+3)^(0+128)
  9778  088A  3003               	movlw	3
  9779  088B  00E7               	movwf	??_setup^(0+128)
  9780  088C  0867               	movf	??_setup^(0+128),w
  9781  088D  00DD               	movwf	ftoa@width^(0+128)
  9782  088E  01DE               	clrf	ftoa@prec^(0+128)
  9783  088F  0ADE               	incf	ftoa@prec^(0+128),f
  9784  0890  303F               	movlw	(low (_str| (0+512)))& (0+255)
  9785  0891  31A0  20A0  3188   	fcall	_ftoa
  9786                           
  9787                           ;menu.c: 282:   OLED_print_xy(2 * 12 + 0, 1, str);
  9788  0894  0140               	movlb	0	; select bank0
  9789  0895  01B3               	clrf	OLED_print_xy@row
  9790  0896  0AB3               	incf	OLED_print_xy@row,f
  9791  0897  303F               	movlw	low _str
  9792  0898  00B4               	movwf	OLED_print_xy@s
  9793  0899  3002               	movlw	high _str
  9794  089A  00B5               	movwf	OLED_print_xy@s+1
  9795  089B  3018               	movlw	24
  9796  089C  31B0  208E  3188   	fcall	_OLED_print_xy
  9797                           
  9798                           ;menu.c: 283:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  9799  089F  0140               	movlb	0	; select bank0
  9800  08A0  01B3               	clrf	OLED_print_xy@row
  9801  08A1  0AB3               	incf	OLED_print_xy@row,f
  9802  08A2  3051               	movlw	low ((STR_28+3)| (0+32768))
  9803  08A3  00B4               	movwf	OLED_print_xy@s
  9804  08A4  30BA               	movlw	high ((STR_28+3)| (0+32768))
  9805  08A5  00B5               	movwf	OLED_print_xy@s+1
  9806  08A6  301C               	movlw	28
  9807  08A7  31B0  208E  3188   	fcall	_OLED_print_xy
  9808  08AA                     l10651:	
  9809                           ;menu.c: 284:  }
  9810                           
  9811                           
  9812                           ;menu.c: 285:  page = paging(page, 3);
  9813  08AA  3003               	movlw	3
  9814  08AB  0141               	movlb	1	; select bank1
  9815  08AC  00E7               	movwf	??_setup^(0+128)
  9816  08AD  0867               	movf	??_setup^(0+128),w
  9817  08AE  0140               	movlb	0	; select bank0
  9818  08AF  00B3               	movwf	paging@lastPage
  9819  08B0  085A               	movf	setup@page,w
  9820  08B1  31B4  2408         	fcall	_paging
  9821  08B3  0141               	movlb	1	; select bank1
  9822  08B4  00E8               	movwf	(??_setup+1)^(0+128)
  9823  08B5  0868               	movf	(??_setup+1)^(0+128),w
  9824  08B6  0140               	movlb	0	; select bank0
  9825  08B7  00DA               	movwf	setup@page
  9826                           
  9827                           ;menu.c: 286:  return page;
  9828  08B8  085A               	movf	setup@page,w
  9829  08B9  0008               	return
  9830  08BA                     __end_of_setup:	
  9831                           
  9832                           	psect	text10
  9833  2B6A                     __ptext10:	
  9834 ;; *************** function _setLensDia *****************
  9835 ;; Defined at:
  9836 ;;		line 246 in file "menu.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;		None
  9839 ;; Auto vars:     Size  Location     Type
  9840 ;;		None
  9841 ;; Return value:  Size  Location     Type
  9842 ;;                  1    wreg      unsigned char 
  9843 ;; Registers used:
  9844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9851 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9852 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9853 ;;      Totals:         0       0       6       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9854 ;;Total ram usage:       10 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    7
  9857 ;; This function calls:
  9858 ;;		_OLED_print_xy
  9859 ;;		___wmul
  9860 ;;		_ftoa
  9861 ;;		_getPB
  9862 ;;		_returnToPage
  9863 ;;		_spinInput
  9864 ;;		_storeNVM
  9865 ;; This function is called by:
  9866 ;;		_menu
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _setLensDia
  9872  2B6A                     _setLensDia:	
  9873                           
  9874                           ;menu.c: 248:  returnToPage(0);
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9878  2B6A  3000               	movlw	0
  9879  2B6B  31B0  205D  31AB   	fcall	_returnToPage
  9880                           
  9881                           ;menu.c: 249:  if (g_screenRefresh)
  9882  2B6E  0140               	movlb	0	; select bank0
  9883  2B6F  0863               	movf	_g_screenRefresh,w
  9884  2B70  1903               	btfsc	3,2
  9885  2B71  2B7B               	goto	l10607
  9886                           
  9887                           ;menu.c: 250:   OLED_print_xy(0, 0, "Lens diam.  ");
  9888  2B72  01B3               	clrf	OLED_print_xy@row
  9889  2B73  30D0               	movlw	low (STR_34| (0+32768))
  9890  2B74  00B4               	movwf	OLED_print_xy@s
  9891  2B75  30BA               	movlw	high (STR_34| (0+32768))
  9892  2B76  00B5               	movwf	OLED_print_xy@s+1
  9893  2B77  3000               	movlw	0
  9894  2B78  31B0  208E  31AB   	fcall	_OLED_print_xy
  9895  2B7B                     l10607:	
  9896                           
  9897                           ;menu.c: 251:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
  9898  2B7B  0140               	movlb	0	; select bank0
  9899  2B7C  085E               	movf	_selectedChannel,w
  9900  2B7D  0141               	movlb	1	; select bank1
  9901  2B7E  00E7               	movwf	??_setLensDia^(0+128)
  9902  2B7F  01E8               	clrf	(??_setLensDia^(0+128)+1)
  9903  2B80  0867               	movf	??_setLensDia^(0+128),w
  9904  2B81  0140               	movlb	0	; select bank0
  9905  2B82  00B5               	movwf	___wmul@multiplier
  9906  2B83  0141               	movlb	1	; select bank1
  9907  2B84  0868               	movf	(??_setLensDia+1)^(0+128),w
  9908  2B85  0140               	movlb	0	; select bank0
  9909  2B86  00B6               	movwf	___wmul@multiplier+1
  9910  2B87  301F               	movlw	31
  9911  2B88  00B7               	movwf	___wmul@multiplicand
  9912  2B89  3000               	movlw	0
  9913  2B8A  00B8               	movwf	___wmul@multiplicand+1
  9914  2B8B  31BF  270A  31AB   	fcall	___wmul
  9915  2B8E  3074               	movlw	116
  9916  2B8F  0141               	movlb	1	; select bank1
  9917  2B90  00E9               	movwf	(??_setLensDia+2)^(0+128)
  9918  2B91  3027               	movlw	39
  9919  2B92  00EA               	movwf	((??_setLensDia+2)^(0+128)+1)
  9920  2B93  0140               	movlb	0	; select bank0
  9921  2B94  0835               	movf	?___wmul,w
  9922  2B95  0141               	movlb	1	; select bank1
  9923  2B96  0769               	addwf	(??_setLensDia+2)^(0+128),w
  9924  2B97  00EB               	movwf	(??_setLensDia+4)^(0+128)
  9925  2B98  0140               	movlb	0	; select bank0
  9926  2B99  0836               	movf	?___wmul+1,w
  9927  2B9A  0141               	movlb	1	; select bank1
  9928  2B9B  3D6A               	addwfc	(??_setLensDia+3)^(0+128),w
  9929  2B9C  00EC               	movwf	(??_setLensDia+5)^(0+128)
  9930  2B9D  086B               	movf	(??_setLensDia+4)^(0+128),w
  9931  2B9E  3E15               	addlw	21
  9932  2B9F  00D9               	movwf	spinInput@input^(0+128)
  9933  2BA0  3000               	movlw	0
  9934  2BA1  3D6C               	addwfc	(??_setLensDia+5)^(0+128),w
  9935  2BA2  00DA               	movwf	(spinInput@input+1)^(0+128)
  9936  2BA3  303F               	movlw	63
  9937  2BA4  00DE               	movwf	(spinInput@min+3)^(0+128)
  9938  2BA5  3080               	movlw	128
  9939  2BA6  00DD               	movwf	(spinInput@min+2)^(0+128)
  9940  2BA7  3000               	movlw	0
  9941  2BA8  00DC               	movwf	(spinInput@min+1)^(0+128)
  9942  2BA9  3000               	movlw	0
  9943  2BAA  00DB               	movwf	spinInput@min^(0+128)
  9944  2BAB  3041               	movlw	65
  9945  2BAC  00E2               	movwf	(spinInput@max+3)^(0+128)
  9946  2BAD  3080               	movlw	128
  9947  2BAE  00E1               	movwf	(spinInput@max+2)^(0+128)
  9948  2BAF  3000               	movlw	0
  9949  2BB0  00E0               	movwf	(spinInput@max+1)^(0+128)
  9950  2BB1  3000               	movlw	0
  9951  2BB2  00DF               	movwf	spinInput@max^(0+128)
  9952  2BB3  303F               	movlw	63
  9953  2BB4  00E6               	movwf	(spinInput@step+3)^(0+128)
  9954  2BB5  3000               	movlw	0
  9955  2BB6  00E5               	movwf	(spinInput@step+2)^(0+128)
  9956  2BB7  3000               	movlw	0
  9957  2BB8  00E4               	movwf	(spinInput@step+1)^(0+128)
  9958  2BB9  3000               	movlw	0
  9959  2BBA  00E3               	movwf	spinInput@step^(0+128)
  9960  2BBB  31AA  2247  31AB   	fcall	_spinInput
  9961                           
  9962                           ;menu.c: 252:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
  9963  2BBE  0140               	movlb	0	; select bank0
  9964  2BBF  085E               	movf	_selectedChannel,w
  9965  2BC0  0141               	movlb	1	; select bank1
  9966  2BC1  00E7               	movwf	??_setLensDia^(0+128)
  9967  2BC2  01E8               	clrf	(??_setLensDia^(0+128)+1)
  9968  2BC3  0867               	movf	??_setLensDia^(0+128),w
  9969  2BC4  0140               	movlb	0	; select bank0
  9970  2BC5  00B5               	movwf	___wmul@multiplier
  9971  2BC6  0141               	movlb	1	; select bank1
  9972  2BC7  0868               	movf	(??_setLensDia+1)^(0+128),w
  9973  2BC8  0140               	movlb	0	; select bank0
  9974  2BC9  00B6               	movwf	___wmul@multiplier+1
  9975  2BCA  301F               	movlw	31
  9976  2BCB  00B7               	movwf	___wmul@multiplicand
  9977  2BCC  3000               	movlw	0
  9978  2BCD  00B8               	movwf	___wmul@multiplicand+1
  9979  2BCE  31BF  270A  31AB   	fcall	___wmul
  9980  2BD1  3074               	movlw	116
  9981  2BD2  0141               	movlb	1	; select bank1
  9982  2BD3  00E9               	movwf	(??_setLensDia+2)^(0+128)
  9983  2BD4  3027               	movlw	39
  9984  2BD5  00EA               	movwf	((??_setLensDia+2)^(0+128)+1)
  9985  2BD6  0140               	movlb	0	; select bank0
  9986  2BD7  0835               	movf	?___wmul,w
  9987  2BD8  0141               	movlb	1	; select bank1
  9988  2BD9  0769               	addwf	(??_setLensDia+2)^(0+128),w
  9989  2BDA  00EB               	movwf	(??_setLensDia+4)^(0+128)
  9990  2BDB  0140               	movlb	0	; select bank0
  9991  2BDC  0836               	movf	?___wmul+1,w
  9992  2BDD  0141               	movlb	1	; select bank1
  9993  2BDE  3D6A               	addwfc	(??_setLensDia+3)^(0+128),w
  9994  2BDF  00EC               	movwf	(??_setLensDia+5)^(0+128)
  9995  2BE0  086B               	movf	(??_setLensDia+4)^(0+128),w
  9996  2BE1  0086               	movwf	6
  9997  2BE2  086C               	movf	(??_setLensDia+5)^(0+128),w
  9998  2BE3  0087               	movwf	7
  9999  2BE4  3155               	addfsr 1,21
 10000  2BE5  3F40               	moviw [0]fsr1
 10001  2BE6  0142               	movlb	2	; select bank2
 10002  2BE7  00C0               	movwf	_setLensDia$2562^(0+256)
 10003  2BE8  3F41               	moviw [1]fsr1
 10004  2BE9  00C1               	movwf	(_setLensDia$2562+1)^(0+256)
 10005  2BEA  3F42               	moviw [2]fsr1
 10006  2BEB  00C2               	movwf	(_setLensDia$2562+2)^(0+256)
 10007  2BEC  3F43               	moviw [3]fsr1
 10008  2BED  00C3               	movwf	(_setLensDia$2562+3)^(0+256)
 10009                           
 10010                           ;menu.c: 252:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 10011  2BEE  0843               	movf	(_setLensDia$2562+3)^(0+256),w
 10012  2BEF  0141               	movlb	1	; select bank1
 10013  2BF0  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 10014  2BF1  0142               	movlb	2	; select bank2
 10015  2BF2  0842               	movf	(_setLensDia$2562+2)^(0+256),w
 10016  2BF3  0141               	movlb	1	; select bank1
 10017  2BF4  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 10018  2BF5  0142               	movlb	2	; select bank2
 10019  2BF6  0841               	movf	(_setLensDia$2562+1)^(0+256),w
 10020  2BF7  0141               	movlb	1	; select bank1
 10021  2BF8  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 10022  2BF9  0142               	movlb	2	; select bank2
 10023  2BFA  0840               	movf	_setLensDia$2562^(0+256),w
 10024  2BFB  0141               	movlb	1	; select bank1
 10025  2BFC  00D9               	movwf	ftoa@fValue^(0+128)
 10026  2BFD  3004               	movlw	4
 10027  2BFE  00E7               	movwf	??_setLensDia^(0+128)
 10028  2BFF  0867               	movf	??_setLensDia^(0+128),w
 10029  2C00  00DD               	movwf	ftoa@width^(0+128)
 10030  2C01  01DE               	clrf	ftoa@prec^(0+128)
 10031  2C02  0ADE               	incf	ftoa@prec^(0+128),f
 10032  2C03  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10033  2C04  31A0  20A0  31AB   	fcall	_ftoa
 10034                           
 10035                           ;menu.c: 253:  OLED_print_xy(0, 1, "\004");
 10036  2C07  0140               	movlb	0	; select bank0
 10037  2C08  01B3               	clrf	OLED_print_xy@row
 10038  2C09  0AB3               	incf	OLED_print_xy@row,f
 10039  2C0A  30B4               	movlw	low ((STR_54+5)| (0+32768))
 10040  2C0B  00B4               	movwf	OLED_print_xy@s
 10041  2C0C  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10042  2C0D  00B5               	movwf	OLED_print_xy@s+1
 10043  2C0E  3000               	movlw	0
 10044  2C0F  31B0  208E  31AB   	fcall	_OLED_print_xy
 10045                           
 10046                           ;menu.c: 254:  OLED_print_xy(1, 1, str);
 10047  2C12  0140               	movlb	0	; select bank0
 10048  2C13  01B3               	clrf	OLED_print_xy@row
 10049  2C14  0AB3               	incf	OLED_print_xy@row,f
 10050  2C15  303F               	movlw	low _str
 10051  2C16  00B4               	movwf	OLED_print_xy@s
 10052  2C17  3002               	movlw	high _str
 10053  2C18  00B5               	movwf	OLED_print_xy@s+1
 10054  2C19  3001               	movlw	1
 10055  2C1A  31B0  208E  31AB   	fcall	_OLED_print_xy
 10056                           
 10057                           ;menu.c: 255:  OLED_print_xy(5, 1, " inch \003");
 10058  2C1D  0140               	movlb	0	; select bank0
 10059  2C1E  01B3               	clrf	OLED_print_xy@row
 10060  2C1F  0AB3               	incf	OLED_print_xy@row,f
 10061  2C20  3069               	movlw	low (STR_47| (0+32768))
 10062  2C21  00B4               	movwf	OLED_print_xy@s
 10063  2C22  30BB               	movlw	high (STR_47| (0+32768))
 10064  2C23  00B5               	movwf	OLED_print_xy@s+1
 10065  2C24  3005               	movlw	5
 10066  2C25  31B0  208E  31AB   	fcall	_OLED_print_xy
 10067                           
 10068                           ;menu.c: 256:  if (getPB() == PB_SHORT) {
 10069  2C28  31BE  2681  31AB   	fcall	_getPB
 10070  2C2B  3A01               	xorlw	1
 10071  2C2C  1D03               	skipz
 10072  2C2D  2C32               	goto	l10627
 10073                           
 10074                           ;menu.c: 257:   storeNVM();
 10075  2C2E  31A8  20A8         	fcall	_storeNVM
 10076                           
 10077                           ;menu.c: 258:   return 0;
 10078  2C30  3000               	movlw	0
 10079  2C31  0008               	return
 10080  2C32                     l10627:	
 10081                           ;menu.c: 259:  }
 10082                           
 10083                           
 10084                           ;menu.c: 261:  return 1;
 10085  2C32  3001               	movlw	1
 10086  2C33  0008               	return
 10087  2C34                     __end_of_setLensDia:	
 10088                           
 10089                           	psect	text11
 10090  24ED                     __ptext11:	
 10091 ;; *************** function _setOutputPower *****************
 10092 ;; Defined at:
 10093 ;;		line 198 in file "menu.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;		None
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;  heater          2   75[BANK1 ] PTR struct .
 10098 ;;		 -> data.heater(124), data(166), 
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  1    wreg      unsigned char 
 10101 ;; Registers used:
 10102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10109 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10110 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10111 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10112 ;;Total ram usage:        6 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; Hardware stack levels required when called:    7
 10115 ;; This function calls:
 10116 ;;		_OLED_print_xy
 10117 ;;		___fleq
 10118 ;;		___flge
 10119 ;;		___wmul
 10120 ;;		_ftoa
 10121 ;;		_getPB
 10122 ;;		_itoa
 10123 ;;		_returnToPage
 10124 ;;		_spinInput
 10125 ;; This function is called by:
 10126 ;;		_menu
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           
 10131                           ;psect for function _setOutputPower
 10132  24ED                     _setOutputPower:	
 10133                           
 10134                           ;menu.c: 200:  t_heater *heater = &(data.heater)[selectedChannel];
 10135                           
 10136                           ;incstack = 0
 10137                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10138  24ED  0140               	movlb	0	; select bank0
 10139  24EE  085E               	movf	_selectedChannel,w
 10140  24EF  0141               	movlb	1	; select bank1
 10141  24F0  00E7               	movwf	??_setOutputPower^(0+128)
 10142  24F1  01E8               	clrf	(??_setOutputPower^(0+128)+1)
 10143  24F2  0867               	movf	??_setOutputPower^(0+128),w
 10144  24F3  0140               	movlb	0	; select bank0
 10145  24F4  00B5               	movwf	___wmul@multiplier
 10146  24F5  0141               	movlb	1	; select bank1
 10147  24F6  0868               	movf	(??_setOutputPower+1)^(0+128),w
 10148  24F7  0140               	movlb	0	; select bank0
 10149  24F8  00B6               	movwf	___wmul@multiplier+1
 10150  24F9  301F               	movlw	31
 10151  24FA  00B7               	movwf	___wmul@multiplicand
 10152  24FB  3000               	movlw	0
 10153  24FC  00B8               	movwf	___wmul@multiplicand+1
 10154  24FD  31BF  270A  31A4   	fcall	___wmul
 10155  2500  3074               	movlw	116
 10156  2501  0141               	movlb	1	; select bank1
 10157  2502  00E9               	movwf	(??_setOutputPower+2)^(0+128)
 10158  2503  3027               	movlw	39
 10159  2504  00EA               	movwf	((??_setOutputPower+2)^(0+128)+1)
 10160  2505  0140               	movlb	0	; select bank0
 10161  2506  0835               	movf	?___wmul,w
 10162  2507  0141               	movlb	1	; select bank1
 10163  2508  0769               	addwf	(??_setOutputPower+2)^(0+128),w
 10164  2509  00EB               	movwf	setOutputPower@heater^(0+128)
 10165  250A  0140               	movlb	0	; select bank0
 10166  250B  0836               	movf	?___wmul+1,w
 10167  250C  0141               	movlb	1	; select bank1
 10168  250D  3D6A               	addwfc	(??_setOutputPower+3)^(0+128),w
 10169  250E  00EC               	movwf	(setOutputPower@heater+1)^(0+128)
 10170                           
 10171                           ;menu.c: 202:  returnToPage(0);
 10172  250F  3000               	movlw	0
 10173  2510  31B0  205D  31A4   	fcall	_returnToPage
 10174                           
 10175                           ;menu.c: 204:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10176  2513  0141               	movlb	1	; select bank1
 10177  2514  086B               	movf	setOutputPower@heater^(0+128),w
 10178  2515  0086               	movwf	6
 10179  2516  086C               	movf	(setOutputPower@heater+1)^(0+128),w
 10180  2517  0087               	movwf	7
 10181  2518  315E               	addfsr 1,30
 10182  2519  0301               	decf	1,w
 10183  251A  1903               	btfsc	3,2
 10184  251B  2D24               	goto	l10541
 10185  251C  086B               	movf	setOutputPower@heater^(0+128),w
 10186  251D  0086               	movwf	6
 10187  251E  086C               	movf	(setOutputPower@heater+1)^(0+128),w
 10188  251F  0087               	movwf	7
 10189  2520  315E               	addfsr 1,30
 10190  2521  0801               	movf	1,w
 10191  2522  1D03               	btfss	3,2
 10192  2523  2E29               	goto	l10575
 10193  2524                     l10541:	
 10194                           
 10195                           ;menu.c: 206:   if (g_screenRefresh)
 10196  2524  0140               	movlb	0	; select bank0
 10197  2525  0863               	movf	_g_screenRefresh,w
 10198  2526  1903               	btfsc	3,2
 10199  2527  2D31               	goto	l10545
 10200                           
 10201                           ;menu.c: 207:    OLED_print_xy(0, 0, "Output power");
 10202  2528  01B3               	clrf	OLED_print_xy@row
 10203  2529  302B               	movlw	low (STR_22| (0+32768))
 10204  252A  00B4               	movwf	OLED_print_xy@s
 10205  252B  30BB               	movlw	high (STR_22| (0+32768))
 10206  252C  00B5               	movwf	OLED_print_xy@s+1
 10207  252D  3000               	movlw	0
 10208  252E  31B0  208E  31A4   	fcall	_OLED_print_xy
 10209  2531                     l10545:	
 10210                           
 10211                           ;menu.c: 208:   spinInput(&heater->Pset, -0.25, heater->Pmax, 0.25);
 10212  2531  0141               	movlb	1	; select bank1
 10213  2532  086B               	movf	setOutputPower@heater^(0+128),w
 10214  2533  3E10               	addlw	16
 10215  2534  00D9               	movwf	spinInput@input^(0+128)
 10216  2535  3000               	movlw	0
 10217  2536  3D6C               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10218  2537  00DA               	movwf	(spinInput@input+1)^(0+128)
 10219  2538  30BE               	movlw	190
 10220  2539  00DE               	movwf	(spinInput@min+3)^(0+128)
 10221  253A  3080               	movlw	128
 10222  253B  00DD               	movwf	(spinInput@min+2)^(0+128)
 10223  253C  3000               	movlw	0
 10224  253D  00DC               	movwf	(spinInput@min+1)^(0+128)
 10225  253E  3000               	movlw	0
 10226  253F  00DB               	movwf	spinInput@min^(0+128)
 10227  2540  086B               	movf	setOutputPower@heater^(0+128),w
 10228  2541  0086               	movwf	6
 10229  2542  086C               	movf	(setOutputPower@heater+1)^(0+128),w
 10230  2543  0087               	movwf	7
 10231  2544  3144               	addfsr 1,4
 10232  2545  3F40               	moviw [0]fsr1
 10233  2546  00DF               	movwf	spinInput@max^(0+128)
 10234  2547  3F41               	moviw [1]fsr1
 10235  2548  00E0               	movwf	(spinInput@max+1)^(0+128)
 10236  2549  3F42               	moviw [2]fsr1
 10237  254A  00E1               	movwf	(spinInput@max+2)^(0+128)
 10238  254B  3F43               	moviw [3]fsr1
 10239  254C  00E2               	movwf	(spinInput@max+3)^(0+128)
 10240  254D  303E               	movlw	62
 10241  254E  00E6               	movwf	(spinInput@step+3)^(0+128)
 10242  254F  3080               	movlw	128
 10243  2550  00E5               	movwf	(spinInput@step+2)^(0+128)
 10244  2551  3000               	movlw	0
 10245  2552  00E4               	movwf	(spinInput@step+1)^(0+128)
 10246  2553  3000               	movlw	0
 10247  2554  00E3               	movwf	spinInput@step^(0+128)
 10248  2555  31AA  2247  31A4   	fcall	_spinInput
 10249                           
 10250                           ;menu.c: 209:   if (heater->Pset == 0) {
 10251  2558  0141               	movlb	1	; select bank1
 10252  2559  086B               	movf	setOutputPower@heater^(0+128),w
 10253  255A  0086               	movwf	6
 10254  255B  086C               	movf	(setOutputPower@heater+1)^(0+128),w
 10255  255C  0087               	movwf	7
 10256  255D  3150               	addfsr 1,16
 10257  255E  3F40               	moviw [0]fsr1
 10258  255F  0140               	movlb	0	; select bank0
 10259  2560  00AC               	movwf	___fleq@ff1
 10260  2561  3F41               	moviw [1]fsr1
 10261  2562  00AD               	movwf	___fleq@ff1+1
 10262  2563  3F42               	moviw [2]fsr1
 10263  2564  00AE               	movwf	___fleq@ff1+2
 10264  2565  3F43               	moviw [3]fsr1
 10265  2566  00AF               	movwf	___fleq@ff1+3
 10266  2567  3000               	movlw	0
 10267  2568  00B3               	movwf	___fleq@ff2+3
 10268  2569  3000               	movlw	0
 10269  256A  00B2               	movwf	___fleq@ff2+2
 10270  256B  3000               	movlw	0
 10271  256C  00B1               	movwf	___fleq@ff2+1
 10272  256D  3000               	movlw	0
 10273  256E  00B0               	movwf	___fleq@ff2
 10274  256F  31B2  22D2  31A4   	fcall	___fleq
 10275  2572  1C03               	btfss	3,0
 10276  2573  2DA4               	goto	l10557
 10277                           
 10278                           ;menu.c: 210:    itoa(str, selectedChannel + 1, 1);
 10279  2574  0140               	movlb	0	; select bank0
 10280  2575  085E               	movf	_selectedChannel,w
 10281  2576  3E01               	addlw	1
 10282  2577  0141               	movlb	1	; select bank1
 10283  2578  00E7               	movwf	??_setOutputPower^(0+128)
 10284  2579  0867               	movf	??_setOutputPower^(0+128),w
 10285  257A  0140               	movlb	0	; select bank0
 10286  257B  00B5               	movwf	itoa@value
 10287  257C  01B6               	clrf	itoa@width
 10288  257D  0AB6               	incf	itoa@width,f
 10289  257E  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10290  257F  31B3  23B6  31A4   	fcall	_itoa
 10291                           
 10292                           ;menu.c: 211:    OLED_print_xy(0, 1, "\004Ch. ");
 10293  2582  0140               	movlb	0	; select bank0
 10294  2583  01B3               	clrf	OLED_print_xy@row
 10295  2584  0AB3               	incf	OLED_print_xy@row,f
 10296  2585  30C4               	movlw	low (STR_37| (0+32768))
 10297  2586  00B4               	movwf	OLED_print_xy@s
 10298  2587  30BB               	movlw	high (STR_37| (0+32768))
 10299  2588  00B5               	movwf	OLED_print_xy@s+1
 10300  2589  3000               	movlw	0
 10301  258A  31B0  208E  31A4   	fcall	_OLED_print_xy
 10302                           
 10303                           ;menu.c: 212:    OLED_print_xy(5, 1, str);
 10304  258D  0140               	movlb	0	; select bank0
 10305  258E  01B3               	clrf	OLED_print_xy@row
 10306  258F  0AB3               	incf	OLED_print_xy@row,f
 10307  2590  303F               	movlw	low _str
 10308  2591  00B4               	movwf	OLED_print_xy@s
 10309  2592  3002               	movlw	high _str
 10310  2593  00B5               	movwf	OLED_print_xy@s+1
 10311  2594  3005               	movlw	5
 10312  2595  31B0  208E  31A4   	fcall	_OLED_print_xy
 10313                           
 10314                           ;menu.c: 213:    OLED_print_xy(6, 1, " off \003");
 10315  2598  0140               	movlb	0	; select bank0
 10316  2599  01B3               	clrf	OLED_print_xy@row
 10317  259A  0AB3               	incf	OLED_print_xy@row,f
 10318  259B  30A1               	movlw	low (STR_38| (0+32768))
 10319  259C  00B4               	movwf	OLED_print_xy@s
 10320  259D  30BB               	movlw	high (STR_38| (0+32768))
 10321  259E  00B5               	movwf	OLED_print_xy@s+1
 10322  259F  3006               	movlw	6
 10323  25A0  31B0  208E  31A4   	fcall	_OLED_print_xy
 10324                           
 10325                           ;menu.c: 214:   } else if (heater->Pset < 0) {
 10326  25A3  2E6B               	goto	l10597
 10327  25A4                     l10557:	
 10328  25A4  0141               	movlb	1	; select bank1
 10329  25A5  086B               	movf	setOutputPower@heater^(0+128),w
 10330  25A6  0086               	movwf	6
 10331  25A7  086C               	movf	(setOutputPower@heater+1)^(0+128),w
 10332  25A8  0087               	movwf	7
 10333  25A9  3150               	addfsr 1,16
 10334  25AA  3F40               	moviw [0]fsr1
 10335  25AB  00C9               	movwf	___flge@ff1^(0+128)
 10336  25AC  3F41               	moviw [1]fsr1
 10337  25AD  00CA               	movwf	(___flge@ff1+1)^(0+128)
 10338  25AE  3F42               	moviw [2]fsr1
 10339  25AF  00CB               	movwf	(___flge@ff1+2)^(0+128)
 10340  25B0  3F43               	moviw [3]fsr1
 10341  25B1  00CC               	movwf	(___flge@ff1+3)^(0+128)
 10342  25B2  3000               	movlw	0
 10343  25B3  00D0               	movwf	(___flge@ff2+3)^(0+128)
 10344  25B4  3000               	movlw	0
 10345  25B5  00CF               	movwf	(___flge@ff2+2)^(0+128)
 10346  25B6  3000               	movlw	0
 10347  25B7  00CE               	movwf	(___flge@ff2+1)^(0+128)
 10348  25B8  3000               	movlw	0
 10349  25B9  00CD               	movwf	___flge@ff2^(0+128)
 10350  25BA  3198  202D  31A4   	fcall	___flge
 10351  25BD  1803               	btfsc	3,0
 10352  25BE  2DEF               	goto	l10567
 10353                           
 10354                           ;menu.c: 215:    itoa(str, selectedChannel + 1, 1);
 10355  25BF  0140               	movlb	0	; select bank0
 10356  25C0  085E               	movf	_selectedChannel,w
 10357  25C1  3E01               	addlw	1
 10358  25C2  0141               	movlb	1	; select bank1
 10359  25C3  00E7               	movwf	??_setOutputPower^(0+128)
 10360  25C4  0867               	movf	??_setOutputPower^(0+128),w
 10361  25C5  0140               	movlb	0	; select bank0
 10362  25C6  00B5               	movwf	itoa@value
 10363  25C7  01B6               	clrf	itoa@width
 10364  25C8  0AB6               	incf	itoa@width,f
 10365  25C9  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10366  25CA  31B3  23B6  31A4   	fcall	_itoa
 10367                           
 10368                           ;menu.c: 216:    OLED_print_xy(0, 1, "\004Ch. ");
 10369  25CD  0140               	movlb	0	; select bank0
 10370  25CE  01B3               	clrf	OLED_print_xy@row
 10371  25CF  0AB3               	incf	OLED_print_xy@row,f
 10372  25D0  30C4               	movlw	low (STR_37| (0+32768))
 10373  25D1  00B4               	movwf	OLED_print_xy@s
 10374  25D2  30BB               	movlw	high (STR_37| (0+32768))
 10375  25D3  00B5               	movwf	OLED_print_xy@s+1
 10376  25D4  3000               	movlw	0
 10377  25D5  31B0  208E  31A4   	fcall	_OLED_print_xy
 10378                           
 10379                           ;menu.c: 217:    OLED_print_xy(5, 1, str);
 10380  25D8  0140               	movlb	0	; select bank0
 10381  25D9  01B3               	clrf	OLED_print_xy@row
 10382  25DA  0AB3               	incf	OLED_print_xy@row,f
 10383  25DB  303F               	movlw	low _str
 10384  25DC  00B4               	movwf	OLED_print_xy@s
 10385  25DD  3002               	movlw	high _str
 10386  25DE  00B5               	movwf	OLED_print_xy@s+1
 10387  25DF  3005               	movlw	5
 10388  25E0  31B0  208E  31A4   	fcall	_OLED_print_xy
 10389                           
 10390                           ;menu.c: 218:    OLED_print_xy(6, 1, " auto\003");
 10391  25E3  0140               	movlb	0	; select bank0
 10392  25E4  01B3               	clrf	OLED_print_xy@row
 10393  25E5  0AB3               	incf	OLED_print_xy@row,f
 10394  25E6  30A8               	movlw	low (STR_40| (0+32768))
 10395  25E7  00B4               	movwf	OLED_print_xy@s
 10396  25E8  30BB               	movlw	high (STR_40| (0+32768))
 10397  25E9  00B5               	movwf	OLED_print_xy@s+1
 10398  25EA  3006               	movlw	6
 10399  25EB  31B0  208E  31A4   	fcall	_OLED_print_xy
 10400                           
 10401                           ;menu.c: 219:   } else {
 10402  25EE  2E6B               	goto	l10597
 10403  25EF                     l10567:	
 10404                           
 10405                           ;menu.c: 220:    OLED_print_xy(0, 1, "\004");
 10406  25EF  0140               	movlb	0	; select bank0
 10407  25F0  01B3               	clrf	OLED_print_xy@row
 10408  25F1  0AB3               	incf	OLED_print_xy@row,f
 10409  25F2  30B4               	movlw	low ((STR_54+5)| (0+32768))
 10410  25F3  00B4               	movwf	OLED_print_xy@s
 10411  25F4  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10412  25F5  00B5               	movwf	OLED_print_xy@s+1
 10413  25F6  3000               	movlw	0
 10414  25F7  31B0  208E  31A4   	fcall	_OLED_print_xy
 10415                           
 10416                           ;menu.c: 221:    ftoa(str, heater->Pset, 4, 1);
 10417  25FA  0141               	movlb	1	; select bank1
 10418  25FB  086B               	movf	setOutputPower@heater^(0+128),w
 10419  25FC  0086               	movwf	6
 10420  25FD  086C               	movf	(setOutputPower@heater+1)^(0+128),w
 10421  25FE  0087               	movwf	7
 10422  25FF  3150               	addfsr 1,16
 10423  2600  3F40               	moviw [0]fsr1
 10424  2601  00D9               	movwf	ftoa@fValue^(0+128)
 10425  2602  3F41               	moviw [1]fsr1
 10426  2603  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 10427  2604  3F42               	moviw [2]fsr1
 10428  2605  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 10429  2606  3F43               	moviw [3]fsr1
 10430  2607  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 10431  2608  3004               	movlw	4
 10432  2609  00E7               	movwf	??_setOutputPower^(0+128)
 10433  260A  0867               	movf	??_setOutputPower^(0+128),w
 10434  260B  00DD               	movwf	ftoa@width^(0+128)
 10435  260C  01DE               	clrf	ftoa@prec^(0+128)
 10436  260D  0ADE               	incf	ftoa@prec^(0+128),f
 10437  260E  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10438  260F  31A0  20A0  31A4   	fcall	_ftoa
 10439                           
 10440                           ;menu.c: 222:    OLED_print_xy(1, 1, str);
 10441  2612  0140               	movlb	0	; select bank0
 10442  2613  01B3               	clrf	OLED_print_xy@row
 10443  2614  0AB3               	incf	OLED_print_xy@row,f
 10444  2615  303F               	movlw	low _str
 10445  2616  00B4               	movwf	OLED_print_xy@s
 10446  2617  3002               	movlw	high _str
 10447  2618  00B5               	movwf	OLED_print_xy@s+1
 10448  2619  3001               	movlw	1
 10449  261A  31B0  208E  31A4   	fcall	_OLED_print_xy
 10450                           
 10451                           ;menu.c: 223:    OLED_print_xy(5, 1, "W man.\003");
 10452  261D  0140               	movlb	0	; select bank0
 10453  261E  01B3               	clrf	OLED_print_xy@row
 10454  261F  0AB3               	incf	OLED_print_xy@row,f
 10455  2620  3071               	movlw	low (STR_42| (0+32768))
 10456  2621  00B4               	movwf	OLED_print_xy@s
 10457  2622  30BB               	movlw	high (STR_42| (0+32768))
 10458  2623  00B5               	movwf	OLED_print_xy@s+1
 10459  2624  3005               	movlw	5
 10460  2625  31B0  208E  31A4   	fcall	_OLED_print_xy
 10461                           
 10462                           ;menu.c: 226:  } else if ((heater->status == CH_OVERCURRENT) || (heater->status == CH_SH
      +                          ORTED)) {
 10463                           
 10464                           ;menu.c: 224:   }
 10465  2628  2E6B               	goto	l10597
 10466  2629                     l10575:	
 10467  2629  0141               	movlb	1	; select bank1
 10468  262A  086B               	movf	setOutputPower@heater^(0+128),w
 10469  262B  0086               	movwf	6
 10470  262C  086C               	movf	(setOutputPower@heater+1)^(0+128),w
 10471  262D  0087               	movwf	7
 10472  262E  315E               	addfsr 1,30
 10473  262F  3004               	movlw	4
 10474  2630  0601               	xorwf	1,w
 10475  2631  1903               	btfsc	3,2
 10476  2632  2E3C               	goto	l10579
 10477  2633  086B               	movf	setOutputPower@heater^(0+128),w
 10478  2634  0086               	movwf	6
 10479  2635  086C               	movf	(setOutputPower@heater+1)^(0+128),w
 10480  2636  0087               	movwf	7
 10481  2637  315E               	addfsr 1,30
 10482  2638  3003               	movlw	3
 10483  2639  0601               	xorwf	1,w
 10484  263A  1D03               	btfss	3,2
 10485  263B  2E69               	goto	l10593
 10486  263C                     l10579:	
 10487                           
 10488                           ;menu.c: 228:   if (g_screenRefresh) {
 10489  263C  0140               	movlb	0	; select bank0
 10490  263D  0863               	movf	_g_screenRefresh,w
 10491  263E  1903               	btfsc	3,2
 10492  263F  2E54               	goto	l10583
 10493                           
 10494                           ;menu.c: 229:    OLED_print_xy(0, 0, "Hold button ");
 10495  2640  01B3               	clrf	OLED_print_xy@row
 10496  2641  30DD               	movlw	low (STR_43| (0+32768))
 10497  2642  00B4               	movwf	OLED_print_xy@s
 10498  2643  30BA               	movlw	high (STR_43| (0+32768))
 10499  2644  00B5               	movwf	OLED_print_xy@s+1
 10500  2645  3000               	movlw	0
 10501  2646  31B0  208E  31A4   	fcall	_OLED_print_xy
 10502                           
 10503                           ;menu.c: 230:    OLED_print_xy(0, 1, "to re-enable");
 10504  2649  0140               	movlb	0	; select bank0
 10505  264A  01B3               	clrf	OLED_print_xy@row
 10506  264B  0AB3               	incf	OLED_print_xy@row,f
 10507  264C  3011               	movlw	low (STR_44| (0+32768))
 10508  264D  00B4               	movwf	OLED_print_xy@s
 10509  264E  30BB               	movlw	high (STR_44| (0+32768))
 10510  264F  00B5               	movwf	OLED_print_xy@s+1
 10511  2650  3000               	movlw	0
 10512  2651  31B0  208E  31A4   	fcall	_OLED_print_xy
 10513  2654                     l10583:	
 10514                           ;menu.c: 231:   }
 10515                           
 10516                           
 10517                           ;menu.c: 232:   if (getPB() == PB_LONG)
 10518  2654  31BE  2681  31A4   	fcall	_getPB
 10519  2657  3A02               	xorlw	2
 10520  2658  1D03               	skipz
 10521  2659  2E67               	goto	l10587
 10522                           
 10523                           ;menu.c: 233:    heater->status = CH_UNCHECKED;
 10524  265A  0141               	movlb	1	; select bank1
 10525  265B  086B               	movf	setOutputPower@heater^(0+128),w
 10526  265C  3E1E               	addlw	30
 10527  265D  00E7               	movwf	??_setOutputPower^(0+128)
 10528  265E  3000               	movlw	0
 10529  265F  3D6C               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10530  2660  00E8               	movwf	(??_setOutputPower+1)^(0+128)
 10531  2661  0867               	movf	??_setOutputPower^(0+128),w
 10532  2662  0086               	movwf	6
 10533  2663  0868               	movf	(??_setOutputPower+1)^(0+128),w
 10534  2664  0087               	movwf	7
 10535  2665  3005               	movlw	5
 10536  2666  0081               	movwf	1
 10537  2667                     l10587:	
 10538                           
 10539                           ;menu.c: 234:   return 0;
 10540  2667  3000               	movlw	0
 10541  2668  0008               	return
 10542  2669                     l10593:	
 10543                           ;menu.c: 237:  else
 10544                           
 10545                           ;menu.c: 236:  }
 10546                           
 10547                           
 10548                           ;menu.c: 238:   return 1;
 10549  2669  3001               	movlw	1
 10550  266A  0008               	return
 10551  266B                     l10597:	
 10552                           
 10553                           ;menu.c: 240:  return 0;
 10554  266B  3000               	movlw	0
 10555  266C  0008               	return
 10556  266D                     __end_of_setOutputPower:	
 10557                           
 10558                           	psect	text12
 10559  18C7                     __ptext12:	
 10560 ;; *************** function _channelSetup *****************
 10561 ;; Defined at:
 10562 ;;		line 143 in file "menu.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;		None
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;  heater          2   75[BANK1 ] PTR struct .
 10567 ;;		 -> data.heater(124), data(166), 
 10568 ;; Return value:  Size  Location     Type
 10569 ;;                  1    wreg      unsigned char 
 10570 ;; Registers used:
 10571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10572 ;; Tracked objects:
 10573 ;;		On entry : 0/0
 10574 ;;		On exit  : 0/0
 10575 ;;		Unchanged: 0/0
 10576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10578 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10579 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10580 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10581 ;;Total ram usage:        6 bytes
 10582 ;; Hardware stack levels used:    1
 10583 ;; Hardware stack levels required when called:    7
 10584 ;; This function calls:
 10585 ;;		_OLED_print_xy
 10586 ;;		___fleq
 10587 ;;		___flge
 10588 ;;		___wmul
 10589 ;;		_ftoa
 10590 ;;		_itoa
 10591 ;;		_paging
 10592 ;;		_returnToPage
 10593 ;; This function is called by:
 10594 ;;		_menu
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           
 10599                           ;psect for function _channelSetup
 10600  18C7                     _channelSetup:	
 10601                           
 10602                           ;menu.c: 145:  static uint8_t page = 0;;menu.c: 146:  t_heater *heater = &(data.heater)[
      +                          selectedChannel];
 10603                           
 10604                           ;incstack = 0
 10605                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10606  18C7  0140               	movlb	0	; select bank0
 10607  18C8  085E               	movf	_selectedChannel,w
 10608  18C9  0141               	movlb	1	; select bank1
 10609  18CA  00E7               	movwf	??_channelSetup^(0+128)
 10610  18CB  01E8               	clrf	(??_channelSetup^(0+128)+1)
 10611  18CC  0867               	movf	??_channelSetup^(0+128),w
 10612  18CD  0140               	movlb	0	; select bank0
 10613  18CE  00B5               	movwf	___wmul@multiplier
 10614  18CF  0141               	movlb	1	; select bank1
 10615  18D0  0868               	movf	(??_channelSetup+1)^(0+128),w
 10616  18D1  0140               	movlb	0	; select bank0
 10617  18D2  00B6               	movwf	___wmul@multiplier+1
 10618  18D3  301F               	movlw	31
 10619  18D4  00B7               	movwf	___wmul@multiplicand
 10620  18D5  3000               	movlw	0
 10621  18D6  00B8               	movwf	___wmul@multiplicand+1
 10622  18D7  31BF  270A  3198   	fcall	___wmul
 10623  18DA  3074               	movlw	116
 10624  18DB  0141               	movlb	1	; select bank1
 10625  18DC  00E9               	movwf	(??_channelSetup+2)^(0+128)
 10626  18DD  3027               	movlw	39
 10627  18DE  00EA               	movwf	((??_channelSetup+2)^(0+128)+1)
 10628  18DF  0140               	movlb	0	; select bank0
 10629  18E0  0835               	movf	?___wmul,w
 10630  18E1  0141               	movlb	1	; select bank1
 10631  18E2  0769               	addwf	(??_channelSetup+2)^(0+128),w
 10632  18E3  00EB               	movwf	channelSetup@heater^(0+128)
 10633  18E4  0140               	movlb	0	; select bank0
 10634  18E5  0836               	movf	?___wmul+1,w
 10635  18E6  0141               	movlb	1	; select bank1
 10636  18E7  3D6A               	addwfc	(??_channelSetup+3)^(0+128),w
 10637  18E8  00EC               	movwf	(channelSetup@heater+1)^(0+128)
 10638                           
 10639                           ;menu.c: 148:  returnToPage(page);
 10640  18E9  0140               	movlb	0	; select bank0
 10641  18EA  085B               	movf	channelSetup@page,w
 10642  18EB  31B0  205D  3198   	fcall	_returnToPage
 10643                           
 10644                           ;menu.c: 150:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10645  18EE  0141               	movlb	1	; select bank1
 10646  18EF  086B               	movf	channelSetup@heater^(0+128),w
 10647  18F0  0086               	movwf	6
 10648  18F1  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10649  18F2  0087               	movwf	7
 10650  18F3  315E               	addfsr 1,30
 10651  18F4  0301               	decf	1,w
 10652  18F5  1903               	btfsc	3,2
 10653  18F6  28FF               	goto	l10481
 10654  18F7  086B               	movf	channelSetup@heater^(0+128),w
 10655  18F8  0086               	movwf	6
 10656  18F9  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10657  18FA  0087               	movwf	7
 10658  18FB  315E               	addfsr 1,30
 10659  18FC  0801               	movf	1,w
 10660  18FD  1D03               	btfss	3,2
 10661  18FE  29C4               	goto	l10509
 10662  18FF                     l10481:	
 10663                           
 10664                           ;menu.c: 151:   OLED_print_xy(0, 0, "Output power");
 10665  18FF  0140               	movlb	0	; select bank0
 10666  1900  01B3               	clrf	OLED_print_xy@row
 10667  1901  302B               	movlw	low (STR_22| (0+32768))
 10668  1902  00B4               	movwf	OLED_print_xy@s
 10669  1903  30BB               	movlw	high (STR_22| (0+32768))
 10670  1904  00B5               	movwf	OLED_print_xy@s+1
 10671  1905  3000               	movlw	0
 10672  1906  31B0  208E  3198   	fcall	_OLED_print_xy
 10673                           
 10674                           ;menu.c: 152:   if (heater->Pset == 0) {
 10675  1909  0141               	movlb	1	; select bank1
 10676  190A  086B               	movf	channelSetup@heater^(0+128),w
 10677  190B  0086               	movwf	6
 10678  190C  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10679  190D  0087               	movwf	7
 10680  190E  3150               	addfsr 1,16
 10681  190F  3F40               	moviw [0]fsr1
 10682  1910  0140               	movlb	0	; select bank0
 10683  1911  00AC               	movwf	___fleq@ff1
 10684  1912  3F41               	moviw [1]fsr1
 10685  1913  00AD               	movwf	___fleq@ff1+1
 10686  1914  3F42               	moviw [2]fsr1
 10687  1915  00AE               	movwf	___fleq@ff1+2
 10688  1916  3F43               	moviw [3]fsr1
 10689  1917  00AF               	movwf	___fleq@ff1+3
 10690  1918  3000               	movlw	0
 10691  1919  00B3               	movwf	___fleq@ff2+3
 10692  191A  3000               	movlw	0
 10693  191B  00B2               	movwf	___fleq@ff2+2
 10694  191C  3000               	movlw	0
 10695  191D  00B1               	movwf	___fleq@ff2+1
 10696  191E  3000               	movlw	0
 10697  191F  00B0               	movwf	___fleq@ff2
 10698  1920  31B2  22D2  3198   	fcall	___fleq
 10699  1923  1C03               	btfss	3,0
 10700  1924  2950               	goto	l10493
 10701                           
 10702                           ;menu.c: 153:    OLED_print_xy(0, 1, "Ch. ");
 10703  1925  0140               	movlb	0	; select bank0
 10704  1926  01B3               	clrf	OLED_print_xy@row
 10705  1927  0AB3               	incf	OLED_print_xy@row,f
 10706  1928  30C5               	movlw	low ((STR_37+1)| (0+32768))
 10707  1929  00B4               	movwf	OLED_print_xy@s
 10708  192A  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10709  192B  00B5               	movwf	OLED_print_xy@s+1
 10710  192C  3000               	movlw	0
 10711  192D  31B0  208E  3198   	fcall	_OLED_print_xy
 10712                           
 10713                           ;menu.c: 154:    itoa(str, selectedChannel + 1, 1);
 10714  1930  0140               	movlb	0	; select bank0
 10715  1931  085E               	movf	_selectedChannel,w
 10716  1932  3E01               	addlw	1
 10717  1933  0141               	movlb	1	; select bank1
 10718  1934  00E7               	movwf	??_channelSetup^(0+128)
 10719  1935  0867               	movf	??_channelSetup^(0+128),w
 10720  1936  0140               	movlb	0	; select bank0
 10721  1937  00B5               	movwf	itoa@value
 10722  1938  01B6               	clrf	itoa@width
 10723  1939  0AB6               	incf	itoa@width,f
 10724  193A  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10725  193B  31B3  23B6  3198   	fcall	_itoa
 10726                           
 10727                           ;menu.c: 155:    OLED_print_xy(4, 1, str);
 10728  193E  0140               	movlb	0	; select bank0
 10729  193F  01B3               	clrf	OLED_print_xy@row
 10730  1940  0AB3               	incf	OLED_print_xy@row,f
 10731  1941  303F               	movlw	low _str
 10732  1942  00B4               	movwf	OLED_print_xy@s
 10733  1943  3002               	movlw	high _str
 10734  1944  00B5               	movwf	OLED_print_xy@s+1
 10735  1945  3004               	movlw	4
 10736  1946  31B0  208E  3198   	fcall	_OLED_print_xy
 10737                           
 10738                           ;menu.c: 156:    OLED_print_xy(5, 1, " off   ");
 10739  1949  0140               	movlb	0	; select bank0
 10740  194A  01B3               	clrf	OLED_print_xy@row
 10741  194B  0AB3               	incf	OLED_print_xy@row,f
 10742  194C  3081               	movlw	low (STR_24| (0+32768))
 10743  194D  00B4               	movwf	OLED_print_xy@s
 10744  194E  30BB               	movlw	high (STR_24| (0+32768))
 10745  194F  2995               	goto	L4
 10746  1950                     l10493:	
 10747                           ;menu.c: 157:   } else if (heater->Pset < 0) {
 10748                           
 10749  1950  0141               	movlb	1	; select bank1
 10750  1951  086B               	movf	channelSetup@heater^(0+128),w
 10751  1952  0086               	movwf	6
 10752  1953  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10753  1954  0087               	movwf	7
 10754  1955  3150               	addfsr 1,16
 10755  1956  3F40               	moviw [0]fsr1
 10756  1957  00C9               	movwf	___flge@ff1^(0+128)
 10757  1958  3F41               	moviw [1]fsr1
 10758  1959  00CA               	movwf	(___flge@ff1+1)^(0+128)
 10759  195A  3F42               	moviw [2]fsr1
 10760  195B  00CB               	movwf	(___flge@ff1+2)^(0+128)
 10761  195C  3F43               	moviw [3]fsr1
 10762  195D  00CC               	movwf	(___flge@ff1+3)^(0+128)
 10763  195E  3000               	movlw	0
 10764  195F  00D0               	movwf	(___flge@ff2+3)^(0+128)
 10765  1960  3000               	movlw	0
 10766  1961  00CF               	movwf	(___flge@ff2+2)^(0+128)
 10767  1962  3000               	movlw	0
 10768  1963  00CE               	movwf	(___flge@ff2+1)^(0+128)
 10769  1964  3000               	movlw	0
 10770  1965  00CD               	movwf	___flge@ff2^(0+128)
 10771  1966  3198  202D  3198   	fcall	___flge
 10772  1969  1803               	btfsc	3,0
 10773  196A  2998               	goto	l10503
 10774                           
 10775                           ;menu.c: 158:    OLED_print_xy(0, 1, "Ch. ");
 10776  196B  0140               	movlb	0	; select bank0
 10777  196C  01B3               	clrf	OLED_print_xy@row
 10778  196D  0AB3               	incf	OLED_print_xy@row,f
 10779  196E  30C5               	movlw	low ((STR_37+1)| (0+32768))
 10780  196F  00B4               	movwf	OLED_print_xy@s
 10781  1970  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10782  1971  00B5               	movwf	OLED_print_xy@s+1
 10783  1972  3000               	movlw	0
 10784  1973  31B0  208E  3198   	fcall	_OLED_print_xy
 10785                           
 10786                           ;menu.c: 159:    itoa(str, selectedChannel + 1, 1);
 10787  1976  0140               	movlb	0	; select bank0
 10788  1977  085E               	movf	_selectedChannel,w
 10789  1978  3E01               	addlw	1
 10790  1979  0141               	movlb	1	; select bank1
 10791  197A  00E7               	movwf	??_channelSetup^(0+128)
 10792  197B  0867               	movf	??_channelSetup^(0+128),w
 10793  197C  0140               	movlb	0	; select bank0
 10794  197D  00B5               	movwf	itoa@value
 10795  197E  01B6               	clrf	itoa@width
 10796  197F  0AB6               	incf	itoa@width,f
 10797  1980  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10798  1981  31B3  23B6  3198   	fcall	_itoa
 10799                           
 10800                           ;menu.c: 160:    OLED_print_xy(4, 1, str);
 10801  1984  0140               	movlb	0	; select bank0
 10802  1985  01B3               	clrf	OLED_print_xy@row
 10803  1986  0AB3               	incf	OLED_print_xy@row,f
 10804  1987  303F               	movlw	low _str
 10805  1988  00B4               	movwf	OLED_print_xy@s
 10806  1989  3002               	movlw	high _str
 10807  198A  00B5               	movwf	OLED_print_xy@s+1
 10808  198B  3004               	movlw	4
 10809  198C  31B0  208E  3198   	fcall	_OLED_print_xy
 10810                           
 10811                           ;menu.c: 161:    OLED_print_xy(5, 1, " auto  ");
 10812  198F  0140               	movlb	0	; select bank0
 10813  1990  01B3               	clrf	OLED_print_xy@row
 10814  1991  0AB3               	incf	OLED_print_xy@row,f
 10815  1992  3091               	movlw	low (STR_26| (0+32768))
 10816  1993  00B4               	movwf	OLED_print_xy@s
 10817  1994  30BB               	movlw	high (STR_26| (0+32768))
 10818  1995                     L4:	
 10819  1995  00B5               	movwf	OLED_print_xy@s+1
 10820  1996  3005               	movlw	5
 10821  1997  2A1F               	goto	L3
 10822  1998                     l10503:	
 10823                           ;menu.c: 162:   } else {
 10824                           
 10825                           
 10826                           ;menu.c: 163:    ftoa(str, heater->Pset, 4, 1);
 10827  1998  0141               	movlb	1	; select bank1
 10828  1999  086B               	movf	channelSetup@heater^(0+128),w
 10829  199A  0086               	movwf	6
 10830  199B  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10831  199C  0087               	movwf	7
 10832  199D  3150               	addfsr 1,16
 10833  199E  3F40               	moviw [0]fsr1
 10834  199F  00D9               	movwf	ftoa@fValue^(0+128)
 10835  19A0  3F41               	moviw [1]fsr1
 10836  19A1  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 10837  19A2  3F42               	moviw [2]fsr1
 10838  19A3  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 10839  19A4  3F43               	moviw [3]fsr1
 10840  19A5  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 10841  19A6  3004               	movlw	4
 10842  19A7  00E7               	movwf	??_channelSetup^(0+128)
 10843  19A8  0867               	movf	??_channelSetup^(0+128),w
 10844  19A9  00DD               	movwf	ftoa@width^(0+128)
 10845  19AA  01DE               	clrf	ftoa@prec^(0+128)
 10846  19AB  0ADE               	incf	ftoa@prec^(0+128),f
 10847  19AC  303F               	movlw	(low (_str| (0+512)))& (0+255)
 10848  19AD  31A0  20A0  3198   	fcall	_ftoa
 10849                           
 10850                           ;menu.c: 164:    OLED_print_xy(0, 1, str);
 10851  19B0  0140               	movlb	0	; select bank0
 10852  19B1  01B3               	clrf	OLED_print_xy@row
 10853  19B2  0AB3               	incf	OLED_print_xy@row,f
 10854  19B3  303F               	movlw	low _str
 10855  19B4  00B4               	movwf	OLED_print_xy@s
 10856  19B5  3002               	movlw	high _str
 10857  19B6  00B5               	movwf	OLED_print_xy@s+1
 10858  19B7  3000               	movlw	0
 10859  19B8  31B0  208E  3198   	fcall	_OLED_print_xy
 10860                           
 10861                           ;menu.c: 165:    OLED_print_xy(4, 1, "W manual");
 10862  19BB  0140               	movlb	0	; select bank0
 10863  19BC  01B3               	clrf	OLED_print_xy@row
 10864  19BD  0AB3               	incf	OLED_print_xy@row,f
 10865  19BE  3060               	movlw	low (STR_17| (0+32768))
 10866  19BF  00B4               	movwf	OLED_print_xy@s
 10867  19C0  30BB               	movlw	high (STR_17| (0+32768))
 10868  19C1  00B5               	movwf	OLED_print_xy@s+1
 10869  19C2  3004               	movlw	4
 10870  19C3  2A1F               	goto	L3
 10871  19C4                     l10509:	
 10872                           ;menu.c: 168:  } else if (heater->status == CH_OPEN) {
 10873                           
 10874                           ;menu.c: 166:   }
 10875                           
 10876  19C4  0141               	movlb	1	; select bank1
 10877  19C5  086B               	movf	channelSetup@heater^(0+128),w
 10878  19C6  0086               	movwf	6
 10879  19C7  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10880  19C8  0087               	movwf	7
 10881  19C9  315E               	addfsr 1,30
 10882  19CA  3002               	movlw	2
 10883  19CB  0601               	xorwf	1,w
 10884  19CC  1D03               	btfss	3,2
 10885  19CD  29DF               	goto	l10513
 10886                           
 10887                           ;menu.c: 170:   OLED_print_xy(0, 0, "Not         ");
 10888  19CE  0140               	movlb	0	; select bank0
 10889  19CF  01B3               	clrf	OLED_print_xy@row
 10890  19D0  304E               	movlw	low (STR_28| (0+32768))
 10891  19D1  00B4               	movwf	OLED_print_xy@s
 10892  19D2  30BA               	movlw	high (STR_28| (0+32768))
 10893  19D3  00B5               	movwf	OLED_print_xy@s+1
 10894  19D4  3000               	movlw	0
 10895  19D5  31B0  208E  3198   	fcall	_OLED_print_xy
 10896                           
 10897                           ;menu.c: 171:   OLED_print_xy(0, 1, "connected   ");
 10898  19D8  0140               	movlb	0	; select bank0
 10899  19D9  01B3               	clrf	OLED_print_xy@row
 10900  19DA  0AB3               	incf	OLED_print_xy@row,f
 10901  19DB  30B6               	movlw	low (STR_29| (0+32768))
 10902  19DC  00B4               	movwf	OLED_print_xy@s
 10903  19DD  30BA               	movlw	high (STR_29| (0+32768))
 10904  19DE  2A1D               	goto	L5
 10905  19DF                     l10513:	
 10906                           ;menu.c: 173:  } else if (heater->status == CH_UNCHECKED) {
 10907                           
 10908  19DF  0141               	movlb	1	; select bank1
 10909  19E0  086B               	movf	channelSetup@heater^(0+128),w
 10910  19E1  0086               	movwf	6
 10911  19E2  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10912  19E3  0087               	movwf	7
 10913  19E4  315E               	addfsr 1,30
 10914  19E5  3005               	movlw	5
 10915  19E6  0601               	xorwf	1,w
 10916  19E7  1D03               	btfss	3,2
 10917  19E8  29FA               	goto	l10517
 10918                           
 10919                           ;menu.c: 175:   OLED_print_xy(0, 0, "Testing     ");
 10920  19E9  0140               	movlb	0	; select bank0
 10921  19EA  01B3               	clrf	OLED_print_xy@row
 10922  19EB  3068               	movlw	low (STR_30| (0+32768))
 10923  19EC  00B4               	movwf	OLED_print_xy@s
 10924  19ED  30BA               	movlw	high (STR_30| (0+32768))
 10925  19EE  00B5               	movwf	OLED_print_xy@s+1
 10926  19EF  3000               	movlw	0
 10927  19F0  31B0  208E  3198   	fcall	_OLED_print_xy
 10928                           
 10929                           ;menu.c: 176:   OLED_print_xy(0, 1, "heater...   ");
 10930  19F3  0140               	movlb	0	; select bank0
 10931  19F4  01B3               	clrf	OLED_print_xy@row
 10932  19F5  0AB3               	incf	OLED_print_xy@row,f
 10933  19F6  309C               	movlw	low (STR_31| (0+32768))
 10934  19F7  00B4               	movwf	OLED_print_xy@s
 10935  19F8  30BA               	movlw	high (STR_31| (0+32768))
 10936  19F9  2A1D               	goto	L5
 10937  19FA                     l10517:	
 10938                           ;menu.c: 178:  } else if ((heater->status == CH_OVERCURRENT) || (heater->status == CH_SH
      +                          ORTED)) {
 10939                           
 10940  19FA  0141               	movlb	1	; select bank1
 10941  19FB  086B               	movf	channelSetup@heater^(0+128),w
 10942  19FC  0086               	movwf	6
 10943  19FD  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10944  19FE  0087               	movwf	7
 10945  19FF  315E               	addfsr 1,30
 10946  1A00  3004               	movlw	4
 10947  1A01  0601               	xorwf	1,w
 10948  1A02  1903               	btfsc	3,2
 10949  1A03  2A0D               	goto	l10521
 10950  1A04  086B               	movf	channelSetup@heater^(0+128),w
 10951  1A05  0086               	movwf	6
 10952  1A06  086C               	movf	(channelSetup@heater+1)^(0+128),w
 10953  1A07  0087               	movwf	7
 10954  1A08  315E               	addfsr 1,30
 10955  1A09  3003               	movlw	3
 10956  1A0A  0601               	xorwf	1,w
 10957  1A0B  1D03               	btfss	3,2
 10958  1A0C  2A22               	goto	l447
 10959  1A0D                     l10521:	
 10960                           
 10961                           ;menu.c: 180:   OLED_print_xy(0, 0, "Reset       ");
 10962  1A0D  0140               	movlb	0	; select bank0
 10963  1A0E  01B3               	clrf	OLED_print_xy@row
 10964  1A0F  305B               	movlw	low (STR_32| (0+32768))
 10965  1A10  00B4               	movwf	OLED_print_xy@s
 10966  1A11  30BA               	movlw	high (STR_32| (0+32768))
 10967  1A12  00B5               	movwf	OLED_print_xy@s+1
 10968  1A13  3000               	movlw	0
 10969  1A14  31B0  208E  3198   	fcall	_OLED_print_xy
 10970                           
 10971                           ;menu.c: 181:   OLED_print_xy(0, 1, "channel     ");
 10972  1A17  0140               	movlb	0	; select bank0
 10973  1A18  01B3               	clrf	OLED_print_xy@row
 10974  1A19  0AB3               	incf	OLED_print_xy@row,f
 10975  1A1A  3075               	movlw	low (STR_33| (0+32768))
 10976  1A1B  00B4               	movwf	OLED_print_xy@s
 10977  1A1C  30BA               	movlw	high (STR_33| (0+32768))
 10978  1A1D                     L5:	
 10979  1A1D  00B5               	movwf	OLED_print_xy@s+1
 10980  1A1E  3000               	movlw	0
 10981  1A1F                     L3:	
 10982  1A1F  31B0  208E  3198   	fcall	_OLED_print_xy
 10983  1A22                     l447:	
 10984                           ;menu.c: 183:  }
 10985                           
 10986                           
 10987                           ;menu.c: 185:  OLED_print_xy(12, 0, "Lens diam.  ");
 10988  1A22  0140               	movlb	0	; select bank0
 10989  1A23  01B3               	clrf	OLED_print_xy@row
 10990  1A24  30D0               	movlw	low (STR_34| (0+32768))
 10991  1A25  00B4               	movwf	OLED_print_xy@s
 10992  1A26  30BA               	movlw	high (STR_34| (0+32768))
 10993  1A27  00B5               	movwf	OLED_print_xy@s+1
 10994  1A28  300C               	movlw	12
 10995  1A29  31B0  208E  3198   	fcall	_OLED_print_xy
 10996                           
 10997                           ;menu.c: 186:  ftoa(str, heater->lensDia, 4, 1);
 10998  1A2C  0141               	movlb	1	; select bank1
 10999  1A2D  086B               	movf	channelSetup@heater^(0+128),w
 11000  1A2E  0086               	movwf	6
 11001  1A2F  086C               	movf	(channelSetup@heater+1)^(0+128),w
 11002  1A30  0087               	movwf	7
 11003  1A31  3155               	addfsr 1,21
 11004  1A32  3F40               	moviw [0]fsr1
 11005  1A33  00D9               	movwf	ftoa@fValue^(0+128)
 11006  1A34  3F41               	moviw [1]fsr1
 11007  1A35  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 11008  1A36  3F42               	moviw [2]fsr1
 11009  1A37  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 11010  1A38  3F43               	moviw [3]fsr1
 11011  1A39  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 11012  1A3A  3004               	movlw	4
 11013  1A3B  00E7               	movwf	??_channelSetup^(0+128)
 11014  1A3C  0867               	movf	??_channelSetup^(0+128),w
 11015  1A3D  00DD               	movwf	ftoa@width^(0+128)
 11016  1A3E  01DE               	clrf	ftoa@prec^(0+128)
 11017  1A3F  0ADE               	incf	ftoa@prec^(0+128),f
 11018  1A40  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11019  1A41  31A0  20A0  3198   	fcall	_ftoa
 11020                           
 11021                           ;menu.c: 187:  OLED_print_xy(12 + 0, 1, str);
 11022  1A44  0140               	movlb	0	; select bank0
 11023  1A45  01B3               	clrf	OLED_print_xy@row
 11024  1A46  0AB3               	incf	OLED_print_xy@row,f
 11025  1A47  303F               	movlw	low _str
 11026  1A48  00B4               	movwf	OLED_print_xy@s
 11027  1A49  3002               	movlw	high _str
 11028  1A4A  00B5               	movwf	OLED_print_xy@s+1
 11029  1A4B  300C               	movlw	12
 11030  1A4C  31B0  208E  3198   	fcall	_OLED_print_xy
 11031                           
 11032                           ;menu.c: 188:  OLED_print_xy(12 + 5, 1, " inch  ");
 11033  1A4F  0140               	movlb	0	; select bank0
 11034  1A50  01B3               	clrf	OLED_print_xy@row
 11035  1A51  0AB3               	incf	OLED_print_xy@row,f
 11036  1A52  3089               	movlw	low (STR_35| (0+32768))
 11037  1A53  00B4               	movwf	OLED_print_xy@s
 11038  1A54  30BB               	movlw	high (STR_35| (0+32768))
 11039  1A55  00B5               	movwf	OLED_print_xy@s+1
 11040  1A56  3011               	movlw	17
 11041  1A57  31B0  208E  3198   	fcall	_OLED_print_xy
 11042                           
 11043                           ;menu.c: 190:  page = paging(page, 2);
 11044  1A5A  3002               	movlw	2
 11045  1A5B  0141               	movlb	1	; select bank1
 11046  1A5C  00E7               	movwf	??_channelSetup^(0+128)
 11047  1A5D  0867               	movf	??_channelSetup^(0+128),w
 11048  1A5E  0140               	movlb	0	; select bank0
 11049  1A5F  00B3               	movwf	paging@lastPage
 11050  1A60  085B               	movf	channelSetup@page,w
 11051  1A61  31B4  2408         	fcall	_paging
 11052  1A63  0141               	movlb	1	; select bank1
 11053  1A64  00E8               	movwf	(??_channelSetup+1)^(0+128)
 11054  1A65  0868               	movf	(??_channelSetup+1)^(0+128),w
 11055  1A66  0140               	movlb	0	; select bank0
 11056  1A67  00DB               	movwf	channelSetup@page
 11057                           
 11058                           ;menu.c: 192:  return page;
 11059  1A68  085B               	movf	channelSetup@page,w
 11060  1A69  0008               	return
 11061  1A6A                     __end_of_channelSetup:	
 11062                           
 11063                           	psect	text13
 11064  114D                     __ptext13:	
 11065 ;; *************** function _channelView *****************
 11066 ;; Defined at:
 11067 ;;		line 78 in file "menu.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;		None
 11070 ;; Auto vars:     Size  Location     Type
 11071 ;;  n               1    4[BANK2 ] unsigned char 
 11072 ;; Return value:  Size  Location     Type
 11073 ;;                  1    wreg      unsigned char 
 11074 ;; Registers used:
 11075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11076 ;; Tracked objects:
 11077 ;;		On entry : 0/0
 11078 ;;		On exit  : 0/0
 11079 ;;		Unchanged: 0/0
 11080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11082 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11083 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11084 ;;      Totals:         0       0       8       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11085 ;;Total ram usage:       13 bytes
 11086 ;; Hardware stack levels used:    1
 11087 ;; Hardware stack levels required when called:    7
 11088 ;; This function calls:
 11089 ;;		_OLED_print_xy
 11090 ;;		___bmul
 11091 ;;		___wmul
 11092 ;;		_ftoa
 11093 ;;		_itoa
 11094 ;;		_paging
 11095 ;;		_returnToPage
 11096 ;; This function is called by:
 11097 ;;		_menu
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           
 11102                           ;psect for function _channelView
 11103  114D                     _channelView:	
 11104                           
 11105                           ;menu.c: 80:  static uint8_t page = 0;;menu.c: 81:  uint8_t n;;menu.c: 83:  returnToPage
      +                          (page);
 11106                           
 11107                           ;incstack = 0
 11108                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11109  114D  0140               	movlb	0	; select bank0
 11110  114E  085C               	movf	channelView@page,w
 11111  114F  31B0  205D  3191   	fcall	_returnToPage
 11112                           
 11113                           ;menu.c: 84:  if (g_screenRefresh) {
 11114  1152  0140               	movlb	0	; select bank0
 11115  1153  0863               	movf	_g_screenRefresh,w
 11116  1154  1903               	btfsc	3,2
 11117  1155  2A25               	goto	l10419
 11118                           
 11119                           ;menu.c: 85:   for (n = 0; n < 4; n++) {
 11120  1156  0142               	movlb	2	; select bank2
 11121  1157  01A4               	clrf	channelView@n^(0+256)
 11122  1158  3004               	movlw	4
 11123  1159  0224               	subwf	channelView@n^(0+256),w
 11124  115A  1803               	btfsc	3,0
 11125  115B  2A25               	goto	l10419
 11126  115C                     l10399:	
 11127                           
 11128                           ;menu.c: 86:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 11129  115C  0140               	movlb	0	; select bank0
 11130  115D  01B3               	clrf	OLED_print_xy@row
 11131  115E  30D2               	movlw	low (STR_10| (0+32768))
 11132  115F  00B4               	movwf	OLED_print_xy@s
 11133  1160  30BB               	movlw	high (STR_10| (0+32768))
 11134  1161  00B5               	movwf	OLED_print_xy@s+1
 11135  1162  300C               	movlw	12
 11136  1163  0141               	movlb	1	; select bank1
 11137  1164  00E7               	movwf	??_channelView^(0+128)
 11138  1165  0867               	movf	??_channelView^(0+128),w
 11139  1166  0140               	movlb	0	; select bank0
 11140  1167  00AC               	movwf	___bmul@multiplicand
 11141  1168  0142               	movlb	2	; select bank2
 11142  1169  0824               	movf	channelView@n^(0+256),w
 11143  116A  31BE  26B0  3191   	fcall	___bmul
 11144  116D  31B0  208E  3191   	fcall	_OLED_print_xy
 11145                           
 11146                           ;menu.c: 87:    itoa(str, n + 1, 1);
 11147  1170  0142               	movlb	2	; select bank2
 11148  1171  0824               	movf	channelView@n^(0+256),w
 11149  1172  3E01               	addlw	1
 11150  1173  0141               	movlb	1	; select bank1
 11151  1174  00E7               	movwf	??_channelView^(0+128)
 11152  1175  0867               	movf	??_channelView^(0+128),w
 11153  1176  0140               	movlb	0	; select bank0
 11154  1177  00B5               	movwf	itoa@value
 11155  1178  01B6               	clrf	itoa@width
 11156  1179  0AB6               	incf	itoa@width,f
 11157  117A  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11158  117B  31B3  23B6  3191   	fcall	_itoa
 11159                           
 11160                           ;menu.c: 88:    OLED_print_xy(n * 12 + 3, 0, str);
 11161  117E  0140               	movlb	0	; select bank0
 11162  117F  01B3               	clrf	OLED_print_xy@row
 11163  1180  303F               	movlw	low _str
 11164  1181  00B4               	movwf	OLED_print_xy@s
 11165  1182  3002               	movlw	high _str
 11166  1183  00B5               	movwf	OLED_print_xy@s+1
 11167  1184  300C               	movlw	12
 11168  1185  0141               	movlb	1	; select bank1
 11169  1186  00E7               	movwf	??_channelView^(0+128)
 11170  1187  0867               	movf	??_channelView^(0+128),w
 11171  1188  0140               	movlb	0	; select bank0
 11172  1189  00AC               	movwf	___bmul@multiplicand
 11173  118A  0142               	movlb	2	; select bank2
 11174  118B  0824               	movf	channelView@n^(0+256),w
 11175  118C  31BE  26B0  3191   	fcall	___bmul
 11176  118F  3E03               	addlw	3
 11177  1190  31B0  208E  3191   	fcall	_OLED_print_xy
 11178                           
 11179                           ;menu.c: 89:    OLED_print_xy(n * 12 + 4, 0, ": ");
 11180  1193  0140               	movlb	0	; select bank0
 11181  1194  01B3               	clrf	OLED_print_xy@row
 11182  1195  30DF               	movlw	low (STR_11| (0+32768))
 11183  1196  00B4               	movwf	OLED_print_xy@s
 11184  1197  30BB               	movlw	high (STR_11| (0+32768))
 11185  1198  00B5               	movwf	OLED_print_xy@s+1
 11186  1199  300C               	movlw	12
 11187  119A  0141               	movlb	1	; select bank1
 11188  119B  00E7               	movwf	??_channelView^(0+128)
 11189  119C  0867               	movf	??_channelView^(0+128),w
 11190  119D  0140               	movlb	0	; select bank0
 11191  119E  00AC               	movwf	___bmul@multiplicand
 11192  119F  0142               	movlb	2	; select bank2
 11193  11A0  0824               	movf	channelView@n^(0+256),w
 11194  11A1  31BE  26B0  3191   	fcall	___bmul
 11195  11A4  3E04               	addlw	4
 11196  11A5  31B0  208E  3191   	fcall	_OLED_print_xy
 11197                           
 11198                           ;menu.c: 90:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11199  11A8  0142               	movlb	2	; select bank2
 11200  11A9  0824               	movf	channelView@n^(0+256),w
 11201  11AA  0141               	movlb	1	; select bank1
 11202  11AB  00E7               	movwf	??_channelView^(0+128)
 11203  11AC  01E8               	clrf	(??_channelView^(0+128)+1)
 11204  11AD  0867               	movf	??_channelView^(0+128),w
 11205  11AE  0140               	movlb	0	; select bank0
 11206  11AF  00B5               	movwf	___wmul@multiplier
 11207  11B0  0141               	movlb	1	; select bank1
 11208  11B1  0868               	movf	(??_channelView+1)^(0+128),w
 11209  11B2  0140               	movlb	0	; select bank0
 11210  11B3  00B6               	movwf	___wmul@multiplier+1
 11211  11B4  301F               	movlw	31
 11212  11B5  00B7               	movwf	___wmul@multiplicand
 11213  11B6  3000               	movlw	0
 11214  11B7  00B8               	movwf	___wmul@multiplicand+1
 11215  11B8  31BF  270A  3191   	fcall	___wmul
 11216  11BB  3074               	movlw	116
 11217  11BC  0141               	movlb	1	; select bank1
 11218  11BD  00E9               	movwf	(??_channelView+2)^(0+128)
 11219  11BE  3027               	movlw	39
 11220  11BF  00EA               	movwf	((??_channelView+2)^(0+128)+1)
 11221  11C0  0140               	movlb	0	; select bank0
 11222  11C1  0835               	movf	?___wmul,w
 11223  11C2  0141               	movlb	1	; select bank1
 11224  11C3  0769               	addwf	(??_channelView+2)^(0+128),w
 11225  11C4  00EB               	movwf	(??_channelView+4)^(0+128)
 11226  11C5  0140               	movlb	0	; select bank0
 11227  11C6  0836               	movf	?___wmul+1,w
 11228  11C7  0141               	movlb	1	; select bank1
 11229  11C8  3D6A               	addwfc	(??_channelView+3)^(0+128),w
 11230  11C9  00EC               	movwf	(??_channelView+5)^(0+128)
 11231  11CA  086B               	movf	(??_channelView+4)^(0+128),w
 11232  11CB  0086               	movwf	6
 11233  11CC  086C               	movf	(??_channelView+5)^(0+128),w
 11234  11CD  0087               	movwf	7
 11235  11CE  3155               	addfsr 1,21
 11236  11CF  3F40               	moviw [0]fsr1
 11237  11D0  0142               	movlb	2	; select bank2
 11238  11D1  00A0               	movwf	_channelView$2561^(0+256)
 11239  11D2  3F41               	moviw [1]fsr1
 11240  11D3  00A1               	movwf	(_channelView$2561+1)^(0+256)
 11241  11D4  3F42               	moviw [2]fsr1
 11242  11D5  00A2               	movwf	(_channelView$2561+2)^(0+256)
 11243  11D6  3F43               	moviw [3]fsr1
 11244  11D7  00A3               	movwf	(_channelView$2561+3)^(0+256)
 11245                           
 11246                           ;menu.c: 90:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11247  11D8  0823               	movf	(_channelView$2561+3)^(0+256),w
 11248  11D9  0141               	movlb	1	; select bank1
 11249  11DA  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 11250  11DB  0142               	movlb	2	; select bank2
 11251  11DC  0822               	movf	(_channelView$2561+2)^(0+256),w
 11252  11DD  0141               	movlb	1	; select bank1
 11253  11DE  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 11254  11DF  0142               	movlb	2	; select bank2
 11255  11E0  0821               	movf	(_channelView$2561+1)^(0+256),w
 11256  11E1  0141               	movlb	1	; select bank1
 11257  11E2  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 11258  11E3  0142               	movlb	2	; select bank2
 11259  11E4  0820               	movf	_channelView$2561^(0+256),w
 11260  11E5  0141               	movlb	1	; select bank1
 11261  11E6  00D9               	movwf	ftoa@fValue^(0+128)
 11262  11E7  3004               	movlw	4
 11263  11E8  00E7               	movwf	??_channelView^(0+128)
 11264  11E9  0867               	movf	??_channelView^(0+128),w
 11265  11EA  00DD               	movwf	ftoa@width^(0+128)
 11266  11EB  01DE               	clrf	ftoa@prec^(0+128)
 11267  11EC  0ADE               	incf	ftoa@prec^(0+128),f
 11268  11ED  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11269  11EE  31A0  20A0  3191   	fcall	_ftoa
 11270                           
 11271                           ;menu.c: 91:    OLED_print_xy(n * 12 + 6, 0, str);
 11272  11F1  0140               	movlb	0	; select bank0
 11273  11F2  01B3               	clrf	OLED_print_xy@row
 11274  11F3  303F               	movlw	low _str
 11275  11F4  00B4               	movwf	OLED_print_xy@s
 11276  11F5  3002               	movlw	high _str
 11277  11F6  00B5               	movwf	OLED_print_xy@s+1
 11278  11F7  300C               	movlw	12
 11279  11F8  0141               	movlb	1	; select bank1
 11280  11F9  00E7               	movwf	??_channelView^(0+128)
 11281  11FA  0867               	movf	??_channelView^(0+128),w
 11282  11FB  0140               	movlb	0	; select bank0
 11283  11FC  00AC               	movwf	___bmul@multiplicand
 11284  11FD  0142               	movlb	2	; select bank2
 11285  11FE  0824               	movf	channelView@n^(0+256),w
 11286  11FF  31BE  26B0  3191   	fcall	___bmul
 11287  1202  3E06               	addlw	6
 11288  1203  31B0  208E  3191   	fcall	_OLED_print_xy
 11289                           
 11290                           ;menu.c: 92:    OLED_print_xy(n * 12 + 10, 0, "\" ");
 11291  1206  0140               	movlb	0	; select bank0
 11292  1207  01B3               	clrf	OLED_print_xy@row
 11293  1208  30DC               	movlw	low (STR_12| (0+32768))
 11294  1209  00B4               	movwf	OLED_print_xy@s
 11295  120A  30BB               	movlw	high (STR_12| (0+32768))
 11296  120B  00B5               	movwf	OLED_print_xy@s+1
 11297  120C  300C               	movlw	12
 11298  120D  0141               	movlb	1	; select bank1
 11299  120E  00E7               	movwf	??_channelView^(0+128)
 11300  120F  0867               	movf	??_channelView^(0+128),w
 11301  1210  0140               	movlb	0	; select bank0
 11302  1211  00AC               	movwf	___bmul@multiplicand
 11303  1212  0142               	movlb	2	; select bank2
 11304  1213  0824               	movf	channelView@n^(0+256),w
 11305  1214  31BE  26B0  3191   	fcall	___bmul
 11306  1217  3E0A               	addlw	10
 11307  1218  31B0  208E  3191   	fcall	_OLED_print_xy
 11308                           
 11309                           ;menu.c: 93:   }
 11310  121B  3001               	movlw	1
 11311  121C  0141               	movlb	1	; select bank1
 11312  121D  00E7               	movwf	??_channelView^(0+128)
 11313  121E  0867               	movf	??_channelView^(0+128),w
 11314  121F  0142               	movlb	2	; select bank2
 11315  1220  07A4               	addwf	channelView@n^(0+256),f
 11316  1221  3004               	movlw	4
 11317  1222  0224               	subwf	channelView@n^(0+256),w
 11318  1223  1C03               	skipc
 11319  1224  295C               	goto	l10399
 11320  1225                     l10419:	
 11321                           ;menu.c: 94:  }
 11322                           
 11323                           
 11324                           ;menu.c: 96:  for (n = 0; n < 4; n++) {
 11325  1225  0142               	movlb	2	; select bank2
 11326  1226  01A4               	clrf	channelView@n^(0+256)
 11327  1227  2B8B               	goto	L6
 11328  1228                     l10425:	
 11329                           ;menu.c: 98:   case CH_UNCHECKED:
 11330                           
 11331                           ;menu.c: 97:   switch (data.heater[n].status) {
 11332                           
 11333                           
 11334                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 11335  1228  0140               	movlb	0	; select bank0
 11336  1229  01B3               	clrf	OLED_print_xy@row
 11337  122A  0AB3               	incf	OLED_print_xy@row,f
 11338  122B  30EA               	movlw	low (STR_13| (0+32768))
 11339  122C  00B4               	movwf	OLED_print_xy@s
 11340  122D  30BA               	movlw	high (STR_13| (0+32768))
 11341  122E  2B76               	goto	L7
 11342  122F                     l10427:	
 11343                           ;menu.c: 101:   case CH_DISABLED:
 11344                           
 11345                           ;menu.c: 100:    break;
 11346                           
 11347                           
 11348                           ;menu.c: 102:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 11349  122F  0140               	movlb	0	; select bank0
 11350  1230  01B3               	clrf	OLED_print_xy@row
 11351  1231  0AB3               	incf	OLED_print_xy@row,f
 11352  1232  308F               	movlw	low (STR_14| (0+32768))
 11353  1233  00B4               	movwf	OLED_print_xy@s
 11354  1234  30BA               	movlw	high (STR_14| (0+32768))
 11355  1235  2B76               	goto	L7
 11356  1236                     l10429:	
 11357                           ;menu.c: 104:   case CH_ENABLED:
 11358                           
 11359                           ;menu.c: 103:    break;
 11360                           
 11361                           
 11362                           ;menu.c: 105:    ftoa(str, data.heater[n].Patt, 4, 1);
 11363  1236  0142               	movlb	2	; select bank2
 11364  1237  0824               	movf	channelView@n^(0+256),w
 11365  1238  0141               	movlb	1	; select bank1
 11366  1239  00E7               	movwf	??_channelView^(0+128)
 11367  123A  01E8               	clrf	(??_channelView^(0+128)+1)
 11368  123B  0867               	movf	??_channelView^(0+128),w
 11369  123C  0140               	movlb	0	; select bank0
 11370  123D  00B5               	movwf	___wmul@multiplier
 11371  123E  0141               	movlb	1	; select bank1
 11372  123F  0868               	movf	(??_channelView+1)^(0+128),w
 11373  1240  0140               	movlb	0	; select bank0
 11374  1241  00B6               	movwf	___wmul@multiplier+1
 11375  1242  301F               	movlw	31
 11376  1243  00B7               	movwf	___wmul@multiplicand
 11377  1244  3000               	movlw	0
 11378  1245  00B8               	movwf	___wmul@multiplicand+1
 11379  1246  31BF  270A  3191   	fcall	___wmul
 11380  1249  3074               	movlw	116
 11381  124A  0141               	movlb	1	; select bank1
 11382  124B  00E9               	movwf	(??_channelView+2)^(0+128)
 11383  124C  3027               	movlw	39
 11384  124D  00EA               	movwf	((??_channelView+2)^(0+128)+1)
 11385  124E  0140               	movlb	0	; select bank0
 11386  124F  0835               	movf	?___wmul,w
 11387  1250  0141               	movlb	1	; select bank1
 11388  1251  0769               	addwf	(??_channelView+2)^(0+128),w
 11389  1252  00EB               	movwf	(??_channelView+4)^(0+128)
 11390  1253  0140               	movlb	0	; select bank0
 11391  1254  0836               	movf	?___wmul+1,w
 11392  1255  0141               	movlb	1	; select bank1
 11393  1256  3D6A               	addwfc	(??_channelView+3)^(0+128),w
 11394  1257  00EC               	movwf	(??_channelView+5)^(0+128)
 11395  1258  086B               	movf	(??_channelView+4)^(0+128),w
 11396  1259  0086               	movwf	6
 11397  125A  086C               	movf	(??_channelView+5)^(0+128),w
 11398  125B  0087               	movwf	7
 11399  125C  314C               	addfsr 1,12
 11400  125D  3F40               	moviw [0]fsr1
 11401  125E  0142               	movlb	2	; select bank2
 11402  125F  00A0               	movwf	_channelView$2561^(0+256)
 11403  1260  3F41               	moviw [1]fsr1
 11404  1261  00A1               	movwf	(_channelView$2561+1)^(0+256)
 11405  1262  3F42               	moviw [2]fsr1
 11406  1263  00A2               	movwf	(_channelView$2561+2)^(0+256)
 11407  1264  3F43               	moviw [3]fsr1
 11408  1265  00A3               	movwf	(_channelView$2561+3)^(0+256)
 11409                           
 11410                           ;menu.c: 105:    ftoa(str, data.heater[n].Patt, 4, 1);
 11411  1266  0823               	movf	(_channelView$2561+3)^(0+256),w
 11412  1267  0141               	movlb	1	; select bank1
 11413  1268  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 11414  1269  0142               	movlb	2	; select bank2
 11415  126A  0822               	movf	(_channelView$2561+2)^(0+256),w
 11416  126B  0141               	movlb	1	; select bank1
 11417  126C  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 11418  126D  0142               	movlb	2	; select bank2
 11419  126E  0821               	movf	(_channelView$2561+1)^(0+256),w
 11420  126F  0141               	movlb	1	; select bank1
 11421  1270  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 11422  1271  0142               	movlb	2	; select bank2
 11423  1272  0820               	movf	_channelView$2561^(0+256),w
 11424  1273  0141               	movlb	1	; select bank1
 11425  1274  00D9               	movwf	ftoa@fValue^(0+128)
 11426  1275  3004               	movlw	4
 11427  1276  00E7               	movwf	??_channelView^(0+128)
 11428  1277  0867               	movf	??_channelView^(0+128),w
 11429  1278  00DD               	movwf	ftoa@width^(0+128)
 11430  1279  01DE               	clrf	ftoa@prec^(0+128)
 11431  127A  0ADE               	incf	ftoa@prec^(0+128),f
 11432  127B  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11433  127C  31A0  20A0  3191   	fcall	_ftoa
 11434                           
 11435                           ;menu.c: 107:    OLED_print_xy(n * 12 + 0, 1, str);
 11436  127F  0140               	movlb	0	; select bank0
 11437  1280  01B3               	clrf	OLED_print_xy@row
 11438  1281  0AB3               	incf	OLED_print_xy@row,f
 11439  1282  303F               	movlw	low _str
 11440  1283  00B4               	movwf	OLED_print_xy@s
 11441  1284  3002               	movlw	high _str
 11442  1285  00B5               	movwf	OLED_print_xy@s+1
 11443  1286  300C               	movlw	12
 11444  1287  0141               	movlb	1	; select bank1
 11445  1288  00E7               	movwf	??_channelView^(0+128)
 11446  1289  0867               	movf	??_channelView^(0+128),w
 11447  128A  0140               	movlb	0	; select bank0
 11448  128B  00AC               	movwf	___bmul@multiplicand
 11449  128C  0142               	movlb	2	; select bank2
 11450  128D  0824               	movf	channelView@n^(0+256),w
 11451  128E  31BE  26B0  3191   	fcall	___bmul
 11452  1291  31B0  208E  3191   	fcall	_OLED_print_xy
 11453                           
 11454                           ;menu.c: 111:    if (data.heater[n].mode == MODE_AUTO) {
 11455  1294  0142               	movlb	2	; select bank2
 11456  1295  0824               	movf	channelView@n^(0+256),w
 11457  1296  0141               	movlb	1	; select bank1
 11458  1297  00E7               	movwf	??_channelView^(0+128)
 11459  1298  01E8               	clrf	(??_channelView^(0+128)+1)
 11460  1299  0867               	movf	??_channelView^(0+128),w
 11461  129A  0140               	movlb	0	; select bank0
 11462  129B  00B5               	movwf	___wmul@multiplier
 11463  129C  0141               	movlb	1	; select bank1
 11464  129D  0868               	movf	(??_channelView+1)^(0+128),w
 11465  129E  0140               	movlb	0	; select bank0
 11466  129F  00B6               	movwf	___wmul@multiplier+1
 11467  12A0  301F               	movlw	31
 11468  12A1  00B7               	movwf	___wmul@multiplicand
 11469  12A2  3000               	movlw	0
 11470  12A3  00B8               	movwf	___wmul@multiplicand+1
 11471  12A4  31BF  270A  3191   	fcall	___wmul
 11472  12A7  3074               	movlw	116
 11473  12A8  0141               	movlb	1	; select bank1
 11474  12A9  00E9               	movwf	(??_channelView+2)^(0+128)
 11475  12AA  3027               	movlw	39
 11476  12AB  00EA               	movwf	((??_channelView+2)^(0+128)+1)
 11477  12AC  0140               	movlb	0	; select bank0
 11478  12AD  0835               	movf	?___wmul,w
 11479  12AE  0141               	movlb	1	; select bank1
 11480  12AF  0769               	addwf	(??_channelView+2)^(0+128),w
 11481  12B0  00EB               	movwf	(??_channelView+4)^(0+128)
 11482  12B1  0140               	movlb	0	; select bank0
 11483  12B2  0836               	movf	?___wmul+1,w
 11484  12B3  0141               	movlb	1	; select bank1
 11485  12B4  3D6A               	addwfc	(??_channelView+3)^(0+128),w
 11486  12B5  00EC               	movwf	(??_channelView+5)^(0+128)
 11487  12B6  086B               	movf	(??_channelView+4)^(0+128),w
 11488  12B7  0086               	movwf	6
 11489  12B8  086C               	movf	(??_channelView+5)^(0+128),w
 11490  12B9  0087               	movwf	7
 11491  12BA  315D               	addfsr 1,29
 11492  12BB  0301               	decf	1,w
 11493  12BC  1D03               	btfss	3,2
 11494  12BD  2B47               	goto	l10441
 11495                           
 11496                           ;menu.c: 112:     OLED_print_xy(n * 12 + 4, 1, " (");
 11497  12BE  0140               	movlb	0	; select bank0
 11498  12BF  01B3               	clrf	OLED_print_xy@row
 11499  12C0  0AB3               	incf	OLED_print_xy@row,f
 11500  12C1  30E2               	movlw	low (STR_15| (0+32768))
 11501  12C2  00B4               	movwf	OLED_print_xy@s
 11502  12C3  30BB               	movlw	high (STR_15| (0+32768))
 11503  12C4  00B5               	movwf	OLED_print_xy@s+1
 11504  12C5  300C               	movlw	12
 11505  12C6  0141               	movlb	1	; select bank1
 11506  12C7  00E7               	movwf	??_channelView^(0+128)
 11507  12C8  0867               	movf	??_channelView^(0+128),w
 11508  12C9  0140               	movlb	0	; select bank0
 11509  12CA  00AC               	movwf	___bmul@multiplicand
 11510  12CB  0142               	movlb	2	; select bank2
 11511  12CC  0824               	movf	channelView@n^(0+256),w
 11512  12CD  31BE  26B0  3191   	fcall	___bmul
 11513  12D0  3E04               	addlw	4
 11514  12D1  31B0  208E  3191   	fcall	_OLED_print_xy
 11515                           
 11516                           ;menu.c: 113:     ftoa(str, data.heater[n].Preq, 4,1);
 11517  12D4  0142               	movlb	2	; select bank2
 11518  12D5  0824               	movf	channelView@n^(0+256),w
 11519  12D6  0141               	movlb	1	; select bank1
 11520  12D7  00E7               	movwf	??_channelView^(0+128)
 11521  12D8  01E8               	clrf	(??_channelView^(0+128)+1)
 11522  12D9  0867               	movf	??_channelView^(0+128),w
 11523  12DA  0140               	movlb	0	; select bank0
 11524  12DB  00B5               	movwf	___wmul@multiplier
 11525  12DC  0141               	movlb	1	; select bank1
 11526  12DD  0868               	movf	(??_channelView+1)^(0+128),w
 11527  12DE  0140               	movlb	0	; select bank0
 11528  12DF  00B6               	movwf	___wmul@multiplier+1
 11529  12E0  301F               	movlw	31
 11530  12E1  00B7               	movwf	___wmul@multiplicand
 11531  12E2  3000               	movlw	0
 11532  12E3  00B8               	movwf	___wmul@multiplicand+1
 11533  12E4  31BF  270A  3191   	fcall	___wmul
 11534  12E7  3074               	movlw	116
 11535  12E8  0141               	movlb	1	; select bank1
 11536  12E9  00E9               	movwf	(??_channelView+2)^(0+128)
 11537  12EA  3027               	movlw	39
 11538  12EB  00EA               	movwf	((??_channelView+2)^(0+128)+1)
 11539  12EC  0140               	movlb	0	; select bank0
 11540  12ED  0835               	movf	?___wmul,w
 11541  12EE  0141               	movlb	1	; select bank1
 11542  12EF  0769               	addwf	(??_channelView+2)^(0+128),w
 11543  12F0  00EB               	movwf	(??_channelView+4)^(0+128)
 11544  12F1  0140               	movlb	0	; select bank0
 11545  12F2  0836               	movf	?___wmul+1,w
 11546  12F3  0141               	movlb	1	; select bank1
 11547  12F4  3D6A               	addwfc	(??_channelView+3)^(0+128),w
 11548  12F5  00EC               	movwf	(??_channelView+5)^(0+128)
 11549  12F6  086B               	movf	(??_channelView+4)^(0+128),w
 11550  12F7  0086               	movwf	6
 11551  12F8  086C               	movf	(??_channelView+5)^(0+128),w
 11552  12F9  0087               	movwf	7
 11553  12FA  3148               	addfsr 1,8
 11554  12FB  3F40               	moviw [0]fsr1
 11555  12FC  0142               	movlb	2	; select bank2
 11556  12FD  00A0               	movwf	_channelView$2561^(0+256)
 11557  12FE  3F41               	moviw [1]fsr1
 11558  12FF  00A1               	movwf	(_channelView$2561+1)^(0+256)
 11559  1300  3F42               	moviw [2]fsr1
 11560  1301  00A2               	movwf	(_channelView$2561+2)^(0+256)
 11561  1302  3F43               	moviw [3]fsr1
 11562  1303  00A3               	movwf	(_channelView$2561+3)^(0+256)
 11563                           
 11564                           ;menu.c: 113:     ftoa(str, data.heater[n].Preq, 4,1);
 11565  1304  0823               	movf	(_channelView$2561+3)^(0+256),w
 11566  1305  0141               	movlb	1	; select bank1
 11567  1306  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 11568  1307  0142               	movlb	2	; select bank2
 11569  1308  0822               	movf	(_channelView$2561+2)^(0+256),w
 11570  1309  0141               	movlb	1	; select bank1
 11571  130A  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 11572  130B  0142               	movlb	2	; select bank2
 11573  130C  0821               	movf	(_channelView$2561+1)^(0+256),w
 11574  130D  0141               	movlb	1	; select bank1
 11575  130E  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 11576  130F  0142               	movlb	2	; select bank2
 11577  1310  0820               	movf	_channelView$2561^(0+256),w
 11578  1311  0141               	movlb	1	; select bank1
 11579  1312  00D9               	movwf	ftoa@fValue^(0+128)
 11580  1313  3004               	movlw	4
 11581  1314  00E7               	movwf	??_channelView^(0+128)
 11582  1315  0867               	movf	??_channelView^(0+128),w
 11583  1316  00DD               	movwf	ftoa@width^(0+128)
 11584  1317  01DE               	clrf	ftoa@prec^(0+128)
 11585  1318  0ADE               	incf	ftoa@prec^(0+128),f
 11586  1319  303F               	movlw	(low (_str| (0+512)))& (0+255)
 11587  131A  31A0  20A0  3191   	fcall	_ftoa
 11588                           
 11589                           ;menu.c: 114:     OLED_print_xy(n * 12 + 6, 1, str);
 11590  131D  0140               	movlb	0	; select bank0
 11591  131E  01B3               	clrf	OLED_print_xy@row
 11592  131F  0AB3               	incf	OLED_print_xy@row,f
 11593  1320  303F               	movlw	low _str
 11594  1321  00B4               	movwf	OLED_print_xy@s
 11595  1322  3002               	movlw	high _str
 11596  1323  00B5               	movwf	OLED_print_xy@s+1
 11597  1324  300C               	movlw	12
 11598  1325  0141               	movlb	1	; select bank1
 11599  1326  00E7               	movwf	??_channelView^(0+128)
 11600  1327  0867               	movf	??_channelView^(0+128),w
 11601  1328  0140               	movlb	0	; select bank0
 11602  1329  00AC               	movwf	___bmul@multiplicand
 11603  132A  0142               	movlb	2	; select bank2
 11604  132B  0824               	movf	channelView@n^(0+256),w
 11605  132C  31BE  26B0  3191   	fcall	___bmul
 11606  132F  3E06               	addlw	6
 11607  1330  31B0  208E  3191   	fcall	_OLED_print_xy
 11608                           
 11609                           ;menu.c: 115:     OLED_print_xy(n * 12 + 10, 1, "W)");
 11610  1333  0140               	movlb	0	; select bank0
 11611  1334  01B3               	clrf	OLED_print_xy@row
 11612  1335  0AB3               	incf	OLED_print_xy@row,f
 11613  1336  30E5               	movlw	low (STR_16| (0+32768))
 11614  1337  00B4               	movwf	OLED_print_xy@s
 11615  1338  30BB               	movlw	high (STR_16| (0+32768))
 11616  1339  00B5               	movwf	OLED_print_xy@s+1
 11617  133A  300C               	movlw	12
 11618  133B  0141               	movlb	1	; select bank1
 11619  133C  00E7               	movwf	??_channelView^(0+128)
 11620  133D  0867               	movf	??_channelView^(0+128),w
 11621  133E  0140               	movlb	0	; select bank0
 11622  133F  00AC               	movwf	___bmul@multiplicand
 11623  1340  0142               	movlb	2	; select bank2
 11624  1341  0824               	movf	channelView@n^(0+256),w
 11625  1342  31BE  26B0  3191   	fcall	___bmul
 11626  1345  3E0A               	addlw	10
 11627  1346  2B82               	goto	L8
 11628  1347                     l10441:	
 11629                           ;menu.c: 116:    } else {
 11630                           
 11631                           
 11632                           ;menu.c: 117:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 11633  1347  0140               	movlb	0	; select bank0
 11634  1348  01B3               	clrf	OLED_print_xy@row
 11635  1349  0AB3               	incf	OLED_print_xy@row,f
 11636  134A  3060               	movlw	low (STR_17| (0+32768))
 11637  134B  00B4               	movwf	OLED_print_xy@s
 11638  134C  30BB               	movlw	high (STR_17| (0+32768))
 11639  134D  00B5               	movwf	OLED_print_xy@s+1
 11640  134E  300C               	movlw	12
 11641  134F  0141               	movlb	1	; select bank1
 11642  1350  00E7               	movwf	??_channelView^(0+128)
 11643  1351  0867               	movf	??_channelView^(0+128),w
 11644  1352  0140               	movlb	0	; select bank0
 11645  1353  00AC               	movwf	___bmul@multiplicand
 11646  1354  0142               	movlb	2	; select bank2
 11647  1355  0824               	movf	channelView@n^(0+256),w
 11648  1356  31BE  26B0  3191   	fcall	___bmul
 11649  1359  3E04               	addlw	4
 11650  135A  2B82               	goto	L8
 11651  135B                     l10443:	
 11652                           ;menu.c: 120:   case CH_OPEN:
 11653                           
 11654                           ;menu.c: 119:    break;
 11655                           
 11656                           ;menu.c: 118:    }
 11657                           
 11658                           
 11659                           ;menu.c: 121:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 11660  135B  0140               	movlb	0	; select bank0
 11661  135C  01B3               	clrf	OLED_print_xy@row
 11662  135D  0AB3               	incf	OLED_print_xy@row,f
 11663  135E  3004               	movlw	low (STR_18| (0+32768))
 11664  135F  00B4               	movwf	OLED_print_xy@s
 11665  1360  30BB               	movlw	high (STR_18| (0+32768))
 11666  1361  2B76               	goto	L7
 11667  1362                     l10445:	
 11668                           ;menu.c: 123:   case CH_SHORTED:
 11669                           
 11670                           ;menu.c: 122:    break;
 11671                           
 11672                           
 11673                           ;menu.c: 124:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 11674  1362  0140               	movlb	0	; select bank0
 11675  1363  01B3               	clrf	OLED_print_xy@row
 11676  1364  0AB3               	incf	OLED_print_xy@row,f
 11677  1365  3082               	movlw	low (STR_19| (0+32768))
 11678  1366  00B4               	movwf	OLED_print_xy@s
 11679  1367  30BA               	movlw	high (STR_19| (0+32768))
 11680  1368  2B76               	goto	L7
 11681  1369                     l10447:	
 11682                           ;menu.c: 126:   case CH_OVERCURRENT:
 11683                           
 11684                           ;menu.c: 125:    break;
 11685                           
 11686                           
 11687                           ;menu.c: 127:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 11688  1369  0140               	movlb	0	; select bank0
 11689  136A  01B3               	clrf	OLED_print_xy@row
 11690  136B  0AB3               	incf	OLED_print_xy@row,f
 11691  136C  30F7               	movlw	low (STR_20| (0+32768))
 11692  136D  00B4               	movwf	OLED_print_xy@s
 11693  136E  30BA               	movlw	high (STR_20| (0+32768))
 11694  136F  2B76               	goto	L7
 11695  1370                     l10449:	
 11696                           ;menu.c: 129:   default:
 11697                           
 11698                           ;menu.c: 128:    break;
 11699                           
 11700                           
 11701                           ;menu.c: 130:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 11702  1370  0140               	movlb	0	; select bank0
 11703  1371  01B3               	clrf	OLED_print_xy@row
 11704  1372  0AB3               	incf	OLED_print_xy@row,f
 11705  1373  301E               	movlw	low (STR_21| (0+32768))
 11706  1374  00B4               	movwf	OLED_print_xy@s
 11707  1375  30BB               	movlw	high (STR_21| (0+32768))
 11708  1376                     L7:	
 11709  1376  00B5               	movwf	OLED_print_xy@s+1
 11710  1377  300C               	movlw	12
 11711  1378  0141               	movlb	1	; select bank1
 11712  1379  00E7               	movwf	??_channelView^(0+128)
 11713  137A  0867               	movf	??_channelView^(0+128),w
 11714  137B  0140               	movlb	0	; select bank0
 11715  137C  00AC               	movwf	___bmul@multiplicand
 11716  137D  0142               	movlb	2	; select bank2
 11717  137E  0824               	movf	channelView@n^(0+256),w
 11718  137F  31BE  26B0  3191   	fcall	___bmul
 11719  1382                     L8:	
 11720  1382  31B0  208E  3191   	fcall	_OLED_print_xy
 11721  1385                     l10455:	
 11722                           ;menu.c: 132:   }
 11723                           
 11724                           ;menu.c: 131:    break;
 11725                           
 11726                           
 11727                           ;menu.c: 133:  }
 11728  1385  3001               	movlw	1
 11729  1386  0141               	movlb	1	; select bank1
 11730  1387  00E7               	movwf	??_channelView^(0+128)
 11731  1388  0867               	movf	??_channelView^(0+128),w
 11732  1389  0142               	movlb	2	; select bank2
 11733  138A  07A4               	addwf	channelView@n^(0+256),f
 11734  138B                     L6:	
 11735  138B  3004               	movlw	4
 11736  138C  0224               	subwf	channelView@n^(0+256),w
 11737  138D  1803               	btfsc	3,0
 11738  138E  2BC9               	goto	l10459
 11739  138F  0142               	movlb	2	; select bank2
 11740  1390  0824               	movf	channelView@n^(0+256),w
 11741  1391  0141               	movlb	1	; select bank1
 11742  1392  00E7               	movwf	??_channelView^(0+128)
 11743  1393  01E8               	clrf	(??_channelView^(0+128)+1)
 11744  1394  0867               	movf	??_channelView^(0+128),w
 11745  1395  0140               	movlb	0	; select bank0
 11746  1396  00B5               	movwf	___wmul@multiplier
 11747  1397  0141               	movlb	1	; select bank1
 11748  1398  0868               	movf	(??_channelView+1)^(0+128),w
 11749  1399  0140               	movlb	0	; select bank0
 11750  139A  00B6               	movwf	___wmul@multiplier+1
 11751  139B  301F               	movlw	31
 11752  139C  00B7               	movwf	___wmul@multiplicand
 11753  139D  3000               	movlw	0
 11754  139E  00B8               	movwf	___wmul@multiplicand+1
 11755  139F  31BF  270A  3191   	fcall	___wmul
 11756  13A2  3074               	movlw	116
 11757  13A3  0141               	movlb	1	; select bank1
 11758  13A4  00E9               	movwf	(??_channelView+2)^(0+128)
 11759  13A5  3027               	movlw	39
 11760  13A6  00EA               	movwf	((??_channelView+2)^(0+128)+1)
 11761  13A7  0140               	movlb	0	; select bank0
 11762  13A8  0835               	movf	?___wmul,w
 11763  13A9  0141               	movlb	1	; select bank1
 11764  13AA  0769               	addwf	(??_channelView+2)^(0+128),w
 11765  13AB  00EB               	movwf	(??_channelView+4)^(0+128)
 11766  13AC  0140               	movlb	0	; select bank0
 11767  13AD  0836               	movf	?___wmul+1,w
 11768  13AE  0141               	movlb	1	; select bank1
 11769  13AF  3D6A               	addwfc	(??_channelView+3)^(0+128),w
 11770  13B0  00EC               	movwf	(??_channelView+5)^(0+128)
 11771  13B1  086B               	movf	(??_channelView+4)^(0+128),w
 11772  13B2  0086               	movwf	6
 11773  13B3  086C               	movf	(??_channelView+5)^(0+128),w
 11774  13B4  0087               	movwf	7
 11775  13B5  315E               	addfsr 1,30
 11776  13B6  0801               	movf	1,w
 11777  13B7  00ED               	movwf	(??_channelView+6)^(0+128)
 11778  13B8  01EE               	clrf	((??_channelView+6)^(0+128)+1)
 11779                           
 11780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11781                           ; Switch size 1, requested type "space"
 11782                           ; Number of cases is 1, Range of values is 0 to 0
 11783                           ; switch strategies available:
 11784                           ; Name         Instructions Cycles
 11785                           ; simple_byte            4     3 (average)
 11786                           ; direct_byte            8     6 (fixed)
 11787                           ; jumptable            260     6 (fixed)
 11788                           ;	Chosen strategy is simple_byte
 11789  13B9  086E               	movf	(??_channelView+7)^(0+128),w
 11790  13BA  3A00               	xorlw	0	; case 0
 11791  13BB  1903               	skipnz
 11792  13BC  2BBE               	goto	l11557
 11793  13BD  2B70               	goto	l10449
 11794  13BE                     l11557:	
 11795                           
 11796                           ; Switch size 1, requested type "space"
 11797                           ; Number of cases is 6, Range of values is 0 to 5
 11798                           ; switch strategies available:
 11799                           ; Name         Instructions Cycles
 11800                           ; direct_byte           18     6 (fixed)
 11801                           ; simple_byte           19    10 (average)
 11802                           ; jumptable            260     6 (fixed)
 11803                           ;	Chosen strategy is direct_byte
 11804  13BE  086D               	movf	(??_channelView+6)^(0+128),w
 11805  13BF  0084               	movwf	4
 11806  13C0  3006               	movlw	6
 11807  13C1  0204               	subwf	4,w
 11808  13C2  1803               	skipnc
 11809  13C3  2B70               	goto	l10449
 11810  13C4  31BB               	movlp	high S11559
 11811  13C5  3504               	lslf	4,w
 11812  13C6  3E38               	addlw	low S11559
 11813  13C7  0082               	movwf	2
 11814  13C8  2B85               	goto	l10455
 11815  13C9                     l10459:	
 11816                           
 11817                           ;menu.c: 134:  page = paging(page, 4);
 11818  13C9  3004               	movlw	4
 11819  13CA  0141               	movlb	1	; select bank1
 11820  13CB  00E7               	movwf	??_channelView^(0+128)
 11821  13CC  0867               	movf	??_channelView^(0+128),w
 11822  13CD  0140               	movlb	0	; select bank0
 11823  13CE  00B3               	movwf	paging@lastPage
 11824  13CF  085C               	movf	channelView@page,w
 11825  13D0  31B4  2408         	fcall	_paging
 11826  13D2  0141               	movlb	1	; select bank1
 11827  13D3  00E8               	movwf	(??_channelView+1)^(0+128)
 11828  13D4  0868               	movf	(??_channelView+1)^(0+128),w
 11829  13D5  0140               	movlb	0	; select bank0
 11830  13D6  00DC               	movwf	channelView@page
 11831                           
 11832                           ;menu.c: 135:  selectedChannel = page;
 11833  13D7  085C               	movf	channelView@page,w
 11834  13D8  0141               	movlb	1	; select bank1
 11835  13D9  00E7               	movwf	??_channelView^(0+128)
 11836  13DA  0867               	movf	??_channelView^(0+128),w
 11837  13DB  0140               	movlb	0	; select bank0
 11838  13DC  00DE               	movwf	_selectedChannel
 11839                           
 11840                           ;menu.c: 137:  return page;
 11841  13DD  085C               	movf	channelView@page,w
 11842  13DE  0008               	return
 11843  13DF                     __end_of_channelView:	
 11844                           
 11845                           	psect	swtext2
 11846  3B38                     __pswtext2:	
 11847  3B38                     S11559:	
 11848  3B38  3192  2A2F         	ljmp	l10427
 11849  3B3A  3192  2A36         	ljmp	l10429
 11850  3B3C  3193  2B5B         	ljmp	l10443
 11851  3B3E  3193  2B62         	ljmp	l10445
 11852  3B40  3193  2B69         	ljmp	l10447
 11853  3B42  3192  2A28         	ljmp	l10425
 11854                           
 11855                           	psect	text14
 11856  1C31                     __ptext14:	
 11857 ;; *************** function _statusView *****************
 11858 ;; Defined at:
 11859 ;;		line 19 in file "menu.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;		None
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;		None
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      unsigned char 
 11866 ;; Registers used:
 11867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11875 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11876 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11877 ;;Total ram usage:        2 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    7
 11880 ;; This function calls:
 11881 ;;		_OLED_print_xy
 11882 ;;		_ftoa
 11883 ;;		_itoa
 11884 ;;		_paging
 11885 ;;		_returnToPage
 11886 ;; This function is called by:
 11887 ;;		_menu
 11888 ;; This function uses a non-reentrant model
 11889 ;;
 11890                           
 11891                           
 11892                           ;psect for function _statusView
 11893  1C31                     _statusView:	
 11894                           
 11895                           ;menu.c: 21:  static uint8_t page = 0;;menu.c: 22:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 25:  if (prevSensorStat != data.status.SENSOR_OK) {
 11896                           
 11897                           ;incstack = 0
 11898                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11899  1C31  3073               	movlw	115
 11900  1C32  0086               	movwf	6
 11901  1C33  3027               	movlw	39
 11902  1C34  0087               	movwf	7
 11903  1C35  0C01               	rrf	1,w
 11904  1C36  0141               	movlb	1	; select bank1
 11905  1C37  00E7               	movwf	??_statusView^(0+128)
 11906  1C38  0CE7               	rrf	??_statusView^(0+128),f
 11907  1C39  0C67               	rrf	??_statusView^(0+128),w
 11908  1C3A  3901               	andlw	1
 11909  1C3B  0143               	movlb	3	; select bank3
 11910  1C3C  066F               	xorwf	statusView@prevSensorStat^(0+384),w
 11911  1C3D  1903               	skipnz
 11912  1C3E  2C58               	goto	l10335
 11913                           
 11914                           ;menu.c: 26:   prevSensorStat = data.status.SENSOR_OK;
 11915  1C3F  3073               	movlw	115
 11916  1C40  0086               	movwf	6
 11917  1C41  3027               	movlw	39
 11918  1C42  0087               	movwf	7
 11919  1C43  3000               	movlw	0
 11920  1C44  1981               	btfsc	1,3
 11921  1C45  3001               	movlw	1
 11922  1C46  00EF               	movwf	statusView@prevSensorStat^(0+384)
 11923                           
 11924                           ;menu.c: 28:   if (data.status.SENSOR_OK)
 11925  1C47  3073               	movlw	115
 11926  1C48  0086               	movwf	6
 11927  1C49  3027               	movlw	39
 11928  1C4A  0087               	movwf	7
 11929  1C4B  1D81               	btfss	1,3
 11930  1C4C  2C50               	goto	l10331
 11931                           
 11932                           ;menu.c: 29:    page = 0;
 11933  1C4D  0140               	movlb	0	; select bank0
 11934  1C4E  01DD               	clrf	statusView@page
 11935  1C4F  2C56               	goto	l10333
 11936  1C50                     l10331:	
 11937                           ;menu.c: 30:   else
 11938                           
 11939                           
 11940                           ;menu.c: 31:    page = 3;
 11941  1C50  3003               	movlw	3
 11942  1C51  0141               	movlb	1	; select bank1
 11943  1C52  00E7               	movwf	??_statusView^(0+128)
 11944  1C53  0867               	movf	??_statusView^(0+128),w
 11945  1C54  0140               	movlb	0	; select bank0
 11946  1C55  00DD               	movwf	statusView@page
 11947  1C56                     l10333:	
 11948                           
 11949                           ;menu.c: 32:   g_screenRefresh = 1;
 11950  1C56  01E3               	clrf	_g_screenRefresh
 11951  1C57  0AE3               	incf	_g_screenRefresh,f
 11952  1C58                     l10335:	
 11953                           ;menu.c: 33:  }
 11954                           
 11955                           
 11956                           ;menu.c: 35:  returnToPage(page);
 11957  1C58  0140               	movlb	0	; select bank0
 11958  1C59  085D               	movf	statusView@page,w
 11959  1C5A  31B0  205D  319C   	fcall	_returnToPage
 11960                           
 11961                           ;menu.c: 36:  if (g_screenRefresh) {
 11962  1C5D  0140               	movlb	0	; select bank0
 11963  1C5E  0863               	movf	_g_screenRefresh,w
 11964  1C5F  1903               	btfsc	3,2
 11965  1C60  2C75               	goto	l10341
 11966                           
 11967                           ;menu.c: 37:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 11968  1C61  01B3               	clrf	OLED_print_xy@row
 11969  1C62  307E               	movlw	low (STR_1| (0+32768))
 11970  1C63  00B4               	movwf	OLED_print_xy@s
 11971  1C64  30B8               	movlw	high (STR_1| (0+32768))
 11972  1C65  00B5               	movwf	OLED_print_xy@s+1
 11973  1C66  3000               	movlw	0
 11974  1C67  31B0  208E  319C   	fcall	_OLED_print_xy
 11975                           
 11976                           ;menu.c: 38:   OLED_print_xy(4 * 12, 1, "Sensor:");
 11977  1C6A  0140               	movlb	0	; select bank0
 11978  1C6B  01B3               	clrf	OLED_print_xy@row
 11979  1C6C  0AB3               	incf	OLED_print_xy@row,f
 11980  1C6D  3099               	movlw	low (STR_2| (0+32768))
 11981  1C6E  00B4               	movwf	OLED_print_xy@s
 11982  1C6F  30BB               	movlw	high (STR_2| (0+32768))
 11983  1C70  00B5               	movwf	OLED_print_xy@s+1
 11984  1C71  3030               	movlw	48
 11985  1C72  31B0  208E  319C   	fcall	_OLED_print_xy
 11986  1C75                     l10341:	
 11987                           ;menu.c: 39:  }
 11988                           
 11989                           
 11990                           ;menu.c: 40:  if (data.status.AUX_SENSOR_OK) {
 11991  1C75  3073               	movlw	115
 11992  1C76  0086               	movwf	6
 11993  1C77  3027               	movlw	39
 11994  1C78  0087               	movwf	7
 11995  1C79  1E01               	btfss	1,4
 11996  1C7A  2CD3               	goto	l10353
 11997                           
 11998                           ;menu.c: 41:   ftoa(str, data.tempC, 5, 1);
 11999  1C7B  304A               	movlw	74
 12000  1C7C  0086               	movwf	6
 12001  1C7D  3027               	movlw	39
 12002  1C7E  0087               	movwf	7
 12003  1C7F  3F40               	moviw [0]fsr1
 12004  1C80  0141               	movlb	1	; select bank1
 12005  1C81  00D9               	movwf	ftoa@fValue^(0+128)
 12006  1C82  3F41               	moviw [1]fsr1
 12007  1C83  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 12008  1C84  3F42               	moviw [2]fsr1
 12009  1C85  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 12010  1C86  3F43               	moviw [3]fsr1
 12011  1C87  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 12012  1C88  3005               	movlw	5
 12013  1C89  00E7               	movwf	??_statusView^(0+128)
 12014  1C8A  0867               	movf	??_statusView^(0+128),w
 12015  1C8B  00DD               	movwf	ftoa@width^(0+128)
 12016  1C8C  01DE               	clrf	ftoa@prec^(0+128)
 12017  1C8D  0ADE               	incf	ftoa@prec^(0+128),f
 12018  1C8E  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12019  1C8F  31A0  20A0  319C   	fcall	_ftoa
 12020                           
 12021                           ;menu.c: 42:   OLED_print_xy(0, 1, str);
 12022  1C92  0140               	movlb	0	; select bank0
 12023  1C93  01B3               	clrf	OLED_print_xy@row
 12024  1C94  0AB3               	incf	OLED_print_xy@row,f
 12025  1C95  303F               	movlw	low _str
 12026  1C96  00B4               	movwf	OLED_print_xy@s
 12027  1C97  3002               	movlw	high _str
 12028  1C98  00B5               	movwf	OLED_print_xy@s+1
 12029  1C99  3000               	movlw	0
 12030  1C9A  31B0  208E  319C   	fcall	_OLED_print_xy
 12031                           
 12032                           ;menu.c: 43:   OLED_print_xy(5, 1, "\001 \002");
 12033  1C9D  0140               	movlb	0	; select bank0
 12034  1C9E  01B3               	clrf	OLED_print_xy@row
 12035  1C9F  0AB3               	incf	OLED_print_xy@row,f
 12036  1CA0  30CA               	movlw	low (STR_3| (0+32768))
 12037  1CA1  00B4               	movwf	OLED_print_xy@s
 12038  1CA2  30BB               	movlw	high (STR_3| (0+32768))
 12039  1CA3  00B5               	movwf	OLED_print_xy@s+1
 12040  1CA4  3005               	movlw	5
 12041  1CA5  31B0  208E  319C   	fcall	_OLED_print_xy
 12042                           
 12043                           ;menu.c: 44:   ftoa(str, data.tempAux, 3, 0);
 12044  1CA8  304A               	movlw	74
 12045  1CA9  0086               	movwf	6
 12046  1CAA  3027               	movlw	39
 12047  1CAB  0087               	movwf	7
 12048  1CAC  314D               	addfsr 1,13
 12049  1CAD  3F40               	moviw [0]fsr1
 12050  1CAE  0141               	movlb	1	; select bank1
 12051  1CAF  00D9               	movwf	ftoa@fValue^(0+128)
 12052  1CB0  3F41               	moviw [1]fsr1
 12053  1CB1  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 12054  1CB2  3F42               	moviw [2]fsr1
 12055  1CB3  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 12056  1CB4  3F43               	moviw [3]fsr1
 12057  1CB5  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 12058  1CB6  3003               	movlw	3
 12059  1CB7  00E7               	movwf	??_statusView^(0+128)
 12060  1CB8  0867               	movf	??_statusView^(0+128),w
 12061  1CB9  00DD               	movwf	ftoa@width^(0+128)
 12062  1CBA  01DE               	clrf	ftoa@prec^(0+128)
 12063  1CBB  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12064  1CBC  31A0  20A0  319C   	fcall	_ftoa
 12065                           
 12066                           ;menu.c: 45:   OLED_print_xy(8, 1, str);
 12067  1CBF  0140               	movlb	0	; select bank0
 12068  1CC0  01B3               	clrf	OLED_print_xy@row
 12069  1CC1  0AB3               	incf	OLED_print_xy@row,f
 12070  1CC2  303F               	movlw	low _str
 12071  1CC3  00B4               	movwf	OLED_print_xy@s
 12072  1CC4  3002               	movlw	high _str
 12073  1CC5  00B5               	movwf	OLED_print_xy@s+1
 12074  1CC6  3008               	movlw	8
 12075  1CC7  31B0  208E  319C   	fcall	_OLED_print_xy
 12076                           
 12077                           ;menu.c: 46:   OLED_print_xy(11, 1, "\001");
 12078  1CCA  0140               	movlb	0	; select bank0
 12079  1CCB  01B3               	clrf	OLED_print_xy@row
 12080  1CCC  0AB3               	incf	OLED_print_xy@row,f
 12081  1CCD  30E8               	movlw	low (STR_4| (0+32768))
 12082  1CCE  00B4               	movwf	OLED_print_xy@s
 12083  1CCF  30BB               	movlw	high (STR_4| (0+32768))
 12084  1CD0  00B5               	movwf	OLED_print_xy@s+1
 12085  1CD1  300B               	movlw	11
 12086  1CD2  2CFD               	goto	L9
 12087  1CD3                     l10353:	
 12088                           ;menu.c: 47:  } else {
 12089                           
 12090                           
 12091                           ;menu.c: 48:   ftoa(str, data.tempC, 5, 1);
 12092  1CD3  304A               	movlw	74
 12093  1CD4  0086               	movwf	6
 12094  1CD5  3027               	movlw	39
 12095  1CD6  0087               	movwf	7
 12096  1CD7  3F40               	moviw [0]fsr1
 12097  1CD8  0141               	movlb	1	; select bank1
 12098  1CD9  00D9               	movwf	ftoa@fValue^(0+128)
 12099  1CDA  3F41               	moviw [1]fsr1
 12100  1CDB  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 12101  1CDC  3F42               	moviw [2]fsr1
 12102  1CDD  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 12103  1CDE  3F43               	moviw [3]fsr1
 12104  1CDF  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 12105  1CE0  3005               	movlw	5
 12106  1CE1  00E7               	movwf	??_statusView^(0+128)
 12107  1CE2  0867               	movf	??_statusView^(0+128),w
 12108  1CE3  00DD               	movwf	ftoa@width^(0+128)
 12109  1CE4  01DE               	clrf	ftoa@prec^(0+128)
 12110  1CE5  0ADE               	incf	ftoa@prec^(0+128),f
 12111  1CE6  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12112  1CE7  31A0  20A0  319C   	fcall	_ftoa
 12113                           
 12114                           ;menu.c: 49:   OLED_print_xy(0, 1, str);
 12115  1CEA  0140               	movlb	0	; select bank0
 12116  1CEB  01B3               	clrf	OLED_print_xy@row
 12117  1CEC  0AB3               	incf	OLED_print_xy@row,f
 12118  1CED  303F               	movlw	low _str
 12119  1CEE  00B4               	movwf	OLED_print_xy@s
 12120  1CEF  3002               	movlw	high _str
 12121  1CF0  00B5               	movwf	OLED_print_xy@s+1
 12122  1CF1  3000               	movlw	0
 12123  1CF2  31B0  208E  319C   	fcall	_OLED_print_xy
 12124                           
 12125                           ;menu.c: 50:   OLED_print_xy(5, 1, "\001      ");
 12126  1CF5  0140               	movlb	0	; select bank0
 12127  1CF6  01B3               	clrf	OLED_print_xy@row
 12128  1CF7  0AB3               	incf	OLED_print_xy@row,f
 12129  1CF8  3079               	movlw	low (STR_5| (0+32768))
 12130  1CF9  00B4               	movwf	OLED_print_xy@s
 12131  1CFA  30BB               	movlw	high (STR_5| (0+32768))
 12132  1CFB  00B5               	movwf	OLED_print_xy@s+1
 12133  1CFC  3005               	movlw	5
 12134  1CFD                     L9:	
 12135  1CFD  31B0  208E  319C   	fcall	_OLED_print_xy
 12136                           
 12137                           ;menu.c: 52:  ftoa(str, data.relHum, 5, 1);
 12138                           
 12139                           ;menu.c: 51:  }
 12140  1D00  304A               	movlw	74
 12141  1D01  0086               	movwf	6
 12142  1D02  3027               	movlw	39
 12143  1D03  0087               	movwf	7
 12144  1D04  3144               	addfsr 1,4
 12145  1D05  3F40               	moviw [0]fsr1
 12146  1D06  0141               	movlb	1	; select bank1
 12147  1D07  00D9               	movwf	ftoa@fValue^(0+128)
 12148  1D08  3F41               	moviw [1]fsr1
 12149  1D09  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 12150  1D0A  3F42               	moviw [2]fsr1
 12151  1D0B  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 12152  1D0C  3F43               	moviw [3]fsr1
 12153  1D0D  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 12154  1D0E  3005               	movlw	5
 12155  1D0F  00E7               	movwf	??_statusView^(0+128)
 12156  1D10  0867               	movf	??_statusView^(0+128),w
 12157  1D11  00DD               	movwf	ftoa@width^(0+128)
 12158  1D12  01DE               	clrf	ftoa@prec^(0+128)
 12159  1D13  0ADE               	incf	ftoa@prec^(0+128),f
 12160  1D14  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12161  1D15  31A0  20A0  319C   	fcall	_ftoa
 12162                           
 12163                           ;menu.c: 53:  OLED_print_xy(12, 1, str);
 12164  1D18  0140               	movlb	0	; select bank0
 12165  1D19  01B3               	clrf	OLED_print_xy@row
 12166  1D1A  0AB3               	incf	OLED_print_xy@row,f
 12167  1D1B  303F               	movlw	low _str
 12168  1D1C  00B4               	movwf	OLED_print_xy@s
 12169  1D1D  3002               	movlw	high _str
 12170  1D1E  00B5               	movwf	OLED_print_xy@s+1
 12171  1D1F  300C               	movlw	12
 12172  1D20  31B0  208E  319C   	fcall	_OLED_print_xy
 12173                           
 12174                           ;menu.c: 54:  OLED_print_xy(12 + 5, 1, "%     ");
 12175  1D23  0140               	movlb	0	; select bank0
 12176  1D24  01B3               	clrf	OLED_print_xy@row
 12177  1D25  0AB3               	incf	OLED_print_xy@row,f
 12178  1D26  30B6               	movlw	low (STR_6| (0+32768))
 12179  1D27  00B4               	movwf	OLED_print_xy@s
 12180  1D28  30BB               	movlw	high (STR_6| (0+32768))
 12181  1D29  00B5               	movwf	OLED_print_xy@s+1
 12182  1D2A  3011               	movlw	17
 12183  1D2B  31B0  208E  319C   	fcall	_OLED_print_xy
 12184                           
 12185                           ;menu.c: 55:  ftoa(str, data.dewPointC, 5, 1);
 12186  1D2E  304A               	movlw	74
 12187  1D2F  0086               	movwf	6
 12188  1D30  3027               	movlw	39
 12189  1D31  0087               	movwf	7
 12190  1D32  3148               	addfsr 1,8
 12191  1D33  3F40               	moviw [0]fsr1
 12192  1D34  0141               	movlb	1	; select bank1
 12193  1D35  00D9               	movwf	ftoa@fValue^(0+128)
 12194  1D36  3F41               	moviw [1]fsr1
 12195  1D37  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 12196  1D38  3F42               	moviw [2]fsr1
 12197  1D39  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 12198  1D3A  3F43               	moviw [3]fsr1
 12199  1D3B  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 12200  1D3C  3005               	movlw	5
 12201  1D3D  00E7               	movwf	??_statusView^(0+128)
 12202  1D3E  0867               	movf	??_statusView^(0+128),w
 12203  1D3F  00DD               	movwf	ftoa@width^(0+128)
 12204  1D40  01DE               	clrf	ftoa@prec^(0+128)
 12205  1D41  0ADE               	incf	ftoa@prec^(0+128),f
 12206  1D42  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12207  1D43  31A0  20A0  319C   	fcall	_ftoa
 12208                           
 12209                           ;menu.c: 56:  OLED_print_xy(2 * 12, 1, str);
 12210  1D46  0140               	movlb	0	; select bank0
 12211  1D47  01B3               	clrf	OLED_print_xy@row
 12212  1D48  0AB3               	incf	OLED_print_xy@row,f
 12213  1D49  303F               	movlw	low _str
 12214  1D4A  00B4               	movwf	OLED_print_xy@s
 12215  1D4B  3002               	movlw	high _str
 12216  1D4C  00B5               	movwf	OLED_print_xy@s+1
 12217  1D4D  3018               	movlw	24
 12218  1D4E  31B0  208E  319C   	fcall	_OLED_print_xy
 12219                           
 12220                           ;menu.c: 57:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 12221  1D51  0140               	movlb	0	; select bank0
 12222  1D52  01B3               	clrf	OLED_print_xy@row
 12223  1D53  0AB3               	incf	OLED_print_xy@row,f
 12224  1D54  3079               	movlw	low (STR_5| (0+32768))
 12225  1D55  00B4               	movwf	OLED_print_xy@s
 12226  1D56  30BB               	movlw	high (STR_5| (0+32768))
 12227  1D57  00B5               	movwf	OLED_print_xy@s+1
 12228  1D58  301D               	movlw	29
 12229  1D59  31B0  208E  319C   	fcall	_OLED_print_xy
 12230                           
 12231                           ;menu.c: 58:  ftoa(str, data.voltage, 4, 1);
 12232  1D5C  304A               	movlw	74
 12233  1D5D  0086               	movwf	6
 12234  1D5E  3027               	movlw	39
 12235  1D5F  0087               	movwf	7
 12236  1D60  3151               	addfsr 1,17
 12237  1D61  3F40               	moviw [0]fsr1
 12238  1D62  0141               	movlb	1	; select bank1
 12239  1D63  00D9               	movwf	ftoa@fValue^(0+128)
 12240  1D64  3F41               	moviw [1]fsr1
 12241  1D65  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 12242  1D66  3F42               	moviw [2]fsr1
 12243  1D67  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 12244  1D68  3F43               	moviw [3]fsr1
 12245  1D69  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 12246  1D6A  3004               	movlw	4
 12247  1D6B  00E7               	movwf	??_statusView^(0+128)
 12248  1D6C  0867               	movf	??_statusView^(0+128),w
 12249  1D6D  00DD               	movwf	ftoa@width^(0+128)
 12250  1D6E  01DE               	clrf	ftoa@prec^(0+128)
 12251  1D6F  0ADE               	incf	ftoa@prec^(0+128),f
 12252  1D70  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12253  1D71  31A0  20A0  319C   	fcall	_ftoa
 12254                           
 12255                           ;menu.c: 59:  OLED_print_xy(3 * 12, 1, str);
 12256  1D74  0140               	movlb	0	; select bank0
 12257  1D75  01B3               	clrf	OLED_print_xy@row
 12258  1D76  0AB3               	incf	OLED_print_xy@row,f
 12259  1D77  303F               	movlw	low _str
 12260  1D78  00B4               	movwf	OLED_print_xy@s
 12261  1D79  3002               	movlw	high _str
 12262  1D7A  00B5               	movwf	OLED_print_xy@s+1
 12263  1D7B  3024               	movlw	36
 12264  1D7C  31B0  208E  319C   	fcall	_OLED_print_xy
 12265                           
 12266                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 12267  1D7F  0140               	movlb	0	; select bank0
 12268  1D80  01B3               	clrf	OLED_print_xy@row
 12269  1D81  0AB3               	incf	OLED_print_xy@row,f
 12270  1D82  30CE               	movlw	low (STR_8| (0+32768))
 12271  1D83  00B4               	movwf	OLED_print_xy@s
 12272  1D84  30BB               	movlw	high (STR_8| (0+32768))
 12273  1D85  00B5               	movwf	OLED_print_xy@s+1
 12274  1D86  3028               	movlw	40
 12275  1D87  31B0  208E  319C   	fcall	_OLED_print_xy
 12276                           
 12277                           ;menu.c: 61:  ftoa(str, data.power, 4, 1);
 12278  1D8A  304A               	movlw	74
 12279  1D8B  0086               	movwf	6
 12280  1D8C  3027               	movlw	39
 12281  1D8D  0087               	movwf	7
 12282  1D8E  3159               	addfsr 1,25
 12283  1D8F  3F40               	moviw [0]fsr1
 12284  1D90  0141               	movlb	1	; select bank1
 12285  1D91  00D9               	movwf	ftoa@fValue^(0+128)
 12286  1D92  3F41               	moviw [1]fsr1
 12287  1D93  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 12288  1D94  3F42               	moviw [2]fsr1
 12289  1D95  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 12290  1D96  3F43               	moviw [3]fsr1
 12291  1D97  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 12292  1D98  3004               	movlw	4
 12293  1D99  00E7               	movwf	??_statusView^(0+128)
 12294  1D9A  0867               	movf	??_statusView^(0+128),w
 12295  1D9B  00DD               	movwf	ftoa@width^(0+128)
 12296  1D9C  01DE               	clrf	ftoa@prec^(0+128)
 12297  1D9D  0ADE               	incf	ftoa@prec^(0+128),f
 12298  1D9E  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12299  1D9F  31A0  20A0  319C   	fcall	_ftoa
 12300                           
 12301                           ;menu.c: 62:  OLED_print_xy(3 * 12 + 7, 1, str);
 12302  1DA2  0140               	movlb	0	; select bank0
 12303  1DA3  01B3               	clrf	OLED_print_xy@row
 12304  1DA4  0AB3               	incf	OLED_print_xy@row,f
 12305  1DA5  303F               	movlw	low _str
 12306  1DA6  00B4               	movwf	OLED_print_xy@s
 12307  1DA7  3002               	movlw	high _str
 12308  1DA8  00B5               	movwf	OLED_print_xy@s+1
 12309  1DA9  302B               	movlw	43
 12310  1DAA  31B0  208E  319C   	fcall	_OLED_print_xy
 12311                           
 12312                           ;menu.c: 63:  OLED_print_xy(3 * 12 + 11, 1, "W");
 12313  1DAD  0140               	movlb	0	; select bank0
 12314  1DAE  01B3               	clrf	OLED_print_xy@row
 12315  1DAF  0AB3               	incf	OLED_print_xy@row,f
 12316  1DB0  3032               	movlw	low ((STR_79+11)| (0+32768))
 12317  1DB1  00B4               	movwf	OLED_print_xy@s
 12318  1DB2  30BA               	movlw	high ((STR_79+11)| (0+32768))
 12319  1DB3  00B5               	movwf	OLED_print_xy@s+1
 12320  1DB4  302F               	movlw	47
 12321  1DB5  31B0  208E  319C   	fcall	_OLED_print_xy
 12322                           
 12323                           ;menu.c: 64:  itoa(str, 1, 3);
 12324  1DB8  0140               	movlb	0	; select bank0
 12325  1DB9  01B5               	clrf	itoa@value
 12326  1DBA  0AB5               	incf	itoa@value,f
 12327  1DBB  3003               	movlw	3
 12328  1DBC  0141               	movlb	1	; select bank1
 12329  1DBD  00E7               	movwf	??_statusView^(0+128)
 12330  1DBE  0867               	movf	??_statusView^(0+128),w
 12331  1DBF  0140               	movlb	0	; select bank0
 12332  1DC0  00B6               	movwf	itoa@width
 12333  1DC1  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12334  1DC2  31B3  23B6  319C   	fcall	_itoa
 12335                           
 12336                           ;menu.c: 65:  OLED_print_xy(4 * 12 + 8, 0, str);
 12337  1DC5  0140               	movlb	0	; select bank0
 12338  1DC6  01B3               	clrf	OLED_print_xy@row
 12339  1DC7  303F               	movlw	low _str
 12340  1DC8  00B4               	movwf	OLED_print_xy@s
 12341  1DC9  3002               	movlw	high _str
 12342  1DCA  00B5               	movwf	OLED_print_xy@s+1
 12343  1DCB  3038               	movlw	56
 12344  1DCC  31B0  208E  319C   	fcall	_OLED_print_xy
 12345                           
 12346                           ;menu.c: 67:  if (data.status.SENSOR_OK) {
 12347  1DCF  3073               	movlw	115
 12348  1DD0  0086               	movwf	6
 12349  1DD1  3027               	movlw	39
 12350  1DD2  0087               	movwf	7
 12351  1DD3  1D81               	btfss	1,3
 12352  1DD4  2E03               	goto	l10385
 12353                           
 12354                           ;menu.c: 68:   itoa(str, data.sensorVersion, 3);
 12355  1DD5  304A               	movlw	74
 12356  1DD6  0086               	movwf	6
 12357  1DD7  3027               	movlw	39
 12358  1DD8  0087               	movwf	7
 12359  1DD9  314C               	addfsr 1,12
 12360  1DDA  0801               	movf	1,w
 12361  1DDB  0141               	movlb	1	; select bank1
 12362  1DDC  00E7               	movwf	??_statusView^(0+128)
 12363  1DDD  0867               	movf	??_statusView^(0+128),w
 12364  1DDE  0140               	movlb	0	; select bank0
 12365  1DDF  00B5               	movwf	itoa@value
 12366  1DE0  3003               	movlw	3
 12367  1DE1  0141               	movlb	1	; select bank1
 12368  1DE2  00E8               	movwf	(??_statusView+1)^(0+128)
 12369  1DE3  0868               	movf	(??_statusView+1)^(0+128),w
 12370  1DE4  0140               	movlb	0	; select bank0
 12371  1DE5  00B6               	movwf	itoa@width
 12372  1DE6  303F               	movlw	(low (_str| (0+512)))& (0+255)
 12373  1DE7  31B3  23B6  319C   	fcall	_itoa
 12374                           
 12375                           ;menu.c: 69:   OLED_print_xy(4 * 12 + 8, 1, str);
 12376  1DEA  0140               	movlb	0	; select bank0
 12377  1DEB  01B3               	clrf	OLED_print_xy@row
 12378  1DEC  0AB3               	incf	OLED_print_xy@row,f
 12379  1DED  303F               	movlw	low _str
 12380  1DEE  00B4               	movwf	OLED_print_xy@s
 12381  1DEF  3002               	movlw	high _str
 12382  1DF0  00B5               	movwf	OLED_print_xy@s+1
 12383  1DF1  3038               	movlw	56
 12384  1DF2  31B0  208E  319C   	fcall	_OLED_print_xy
 12385                           
 12386                           ;menu.c: 70:   page = paging(page, 5);
 12387  1DF5  3005               	movlw	5
 12388  1DF6  0141               	movlb	1	; select bank1
 12389  1DF7  00E7               	movwf	??_statusView^(0+128)
 12390  1DF8  0867               	movf	??_statusView^(0+128),w
 12391  1DF9  0140               	movlb	0	; select bank0
 12392  1DFA  00B3               	movwf	paging@lastPage
 12393  1DFB  085D               	movf	statusView@page,w
 12394  1DFC  31B4  2408         	fcall	_paging
 12395  1DFE  0141               	movlb	1	; select bank1
 12396  1DFF  00E8               	movwf	(??_statusView+1)^(0+128)
 12397  1E00  0868               	movf	(??_statusView+1)^(0+128),w
 12398  1E01  0140               	movlb	0	; select bank0
 12399  1E02  00DD               	movwf	statusView@page
 12400  1E03                     l10385:	
 12401                           ;menu.c: 71:  }
 12402                           
 12403                           
 12404                           ;menu.c: 72:  return page;
 12405  1E03  0140               	movlb	0	; select bank0
 12406  1E04  085D               	movf	statusView@page,w
 12407  1E05  0008               	return
 12408  1E06                     __end_of_statusView:	
 12409                           
 12410                           	psect	text15
 12411  28A8                     __ptext15:	
 12412 ;; *************** function _storeNVM *****************
 12413 ;; Defined at:
 12414 ;;		line 439 in file "system.c"
 12415 ;; Parameters:    Size  Location     Type
 12416 ;;		None
 12417 ;; Auto vars:     Size  Location     Type
 12418 ;;  buf            64    0[BANK1 ] unsigned short [32]
 12419 ;;  nvm            32    0[BANK2 ] struct .
 12420 ;;  n               1   27[BANK0 ] unsigned char 
 12421 ;; Return value:  Size  Location     Type
 12422 ;;                  1    wreg      unsigned char 
 12423 ;; Registers used:
 12424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12425 ;; Tracked objects:
 12426 ;;		On entry : 0/0
 12427 ;;		On exit  : 0/0
 12428 ;;		Unchanged: 0/0
 12429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12431 ;;      Locals:         0       1      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12432 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12433 ;;      Totals:         0       3      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12434 ;;Total ram usage:       99 bytes
 12435 ;; Hardware stack levels used:    1
 12436 ;; Hardware stack levels required when called:    5
 12437 ;; This function calls:
 12438 ;;		_FLASH_EraseBlock
 12439 ;;		_FLASH_WriteBlock
 12440 ;; This function is called by:
 12441 ;;		_setLensDia
 12442 ;;		_setDPOffset
 12443 ;;		_setSkyTemp
 12444 ;;		_setFudgeFactor
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           
 12449                           ;psect for function _storeNVM
 12450  28A8                     _storeNVM:	
 12451                           
 12452                           ;system.c: 441:  uint8_t n;;system.c: 442:  t_nvmData nvm;;system.c: 443:  uint16_t buf[
      +                          32];;system.c: 445:  nvm.lensDia[0] = data.heater[0].lensDia;
 12453                           
 12454                           ;incstack = 0
 12455                           ; Regs used in _storeNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12456  28A8  3089               	movlw	137
 12457  28A9  0086               	movwf	6
 12458  28AA  3027               	movlw	39
 12459  28AB  0087               	movwf	7
 12460  28AC  3F40               	moviw [0]fsr1
 12461  28AD  0142               	movlb	2	; select bank2
 12462  28AE  00A0               	movwf	storeNVM@nvm^(0+256)
 12463  28AF  3F41               	moviw [1]fsr1
 12464  28B0  00A1               	movwf	(storeNVM@nvm+1)^(0+256)
 12465  28B1  3F42               	moviw [2]fsr1
 12466  28B2  00A2               	movwf	(storeNVM@nvm+2)^(0+256)
 12467  28B3  3F43               	moviw [3]fsr1
 12468  28B4  00A3               	movwf	(storeNVM@nvm+3)^(0+256)
 12469                           
 12470                           ;system.c: 446:  nvm.lensDia[1] = data.heater[1].lensDia;
 12471  28B5  30A8               	movlw	168
 12472  28B6  0086               	movwf	6
 12473  28B7  3027               	movlw	39
 12474  28B8  0087               	movwf	7
 12475  28B9  3F40               	moviw [0]fsr1
 12476  28BA  00A4               	movwf	(storeNVM@nvm^(0+256)+4)
 12477  28BB  3F41               	moviw [1]fsr1
 12478  28BC  00A5               	movwf	((storeNVM@nvm+1)^(0+256)+4)
 12479  28BD  3F42               	moviw [2]fsr1
 12480  28BE  00A6               	movwf	((storeNVM@nvm+2)^(0+256)+4)
 12481  28BF  3F43               	moviw [3]fsr1
 12482  28C0  00A7               	movwf	((storeNVM@nvm+3)^(0+256)+4)
 12483                           
 12484                           ;system.c: 447:  nvm.lensDia[2] = data.heater[2].lensDia;
 12485  28C1  30C7               	movlw	199
 12486  28C2  0086               	movwf	6
 12487  28C3  3027               	movlw	39
 12488  28C4  0087               	movwf	7
 12489  28C5  3F40               	moviw [0]fsr1
 12490  28C6  00A8               	movwf	(storeNVM@nvm^(0+256)+8)
 12491  28C7  3F41               	moviw [1]fsr1
 12492  28C8  00A9               	movwf	((storeNVM@nvm+1)^(0+256)+8)
 12493  28C9  3F42               	moviw [2]fsr1
 12494  28CA  00AA               	movwf	((storeNVM@nvm+2)^(0+256)+8)
 12495  28CB  3F43               	moviw [3]fsr1
 12496  28CC  00AB               	movwf	((storeNVM@nvm+3)^(0+256)+8)
 12497                           
 12498                           ;system.c: 448:  nvm.lensDia[3] = data.heater[3].lensDia;
 12499  28CD  30E6               	movlw	230
 12500  28CE  0086               	movwf	6
 12501  28CF  3027               	movlw	39
 12502  28D0  0087               	movwf	7
 12503  28D1  3F40               	moviw [0]fsr1
 12504  28D2  00AC               	movwf	(storeNVM@nvm^(0+256)+12)
 12505  28D3  3F41               	moviw [1]fsr1
 12506  28D4  00AD               	movwf	((storeNVM@nvm+1)^(0+256)+12)
 12507  28D5  3F42               	moviw [2]fsr1
 12508  28D6  00AE               	movwf	((storeNVM@nvm+2)^(0+256)+12)
 12509  28D7  3F43               	moviw [3]fsr1
 12510  28D8  00AF               	movwf	((storeNVM@nvm+3)^(0+256)+12)
 12511                           
 12512                           ;system.c: 449:  nvm.dpOffset = data.dpOffset;
 12513  28D9  304A               	movlw	74
 12514  28DA  0086               	movwf	6
 12515  28DB  3027               	movlw	39
 12516  28DC  0087               	movwf	7
 12517  28DD  315D               	addfsr 1,29
 12518  28DE  3F40               	moviw [0]fsr1
 12519  28DF  00B0               	movwf	(storeNVM@nvm^(0+256)+16)
 12520  28E0  3F41               	moviw [1]fsr1
 12521  28E1  00B1               	movwf	((storeNVM@nvm+1)^(0+256)+16)
 12522  28E2  3F42               	moviw [2]fsr1
 12523  28E3  00B2               	movwf	((storeNVM@nvm+2)^(0+256)+16)
 12524  28E4  3F43               	moviw [3]fsr1
 12525  28E5  00B3               	movwf	((storeNVM@nvm+3)^(0+256)+16)
 12526                           
 12527                           ;system.c: 450:  nvm.skyTemp = data.skyTemp;
 12528  28E6  306B               	movlw	107
 12529  28E7  0086               	movwf	6
 12530  28E8  3027               	movlw	39
 12531  28E9  0087               	movwf	7
 12532  28EA  3F40               	moviw [0]fsr1
 12533  28EB  00B4               	movwf	(storeNVM@nvm^(0+256)+20)
 12534  28EC  3F41               	moviw [1]fsr1
 12535  28ED  00B5               	movwf	((storeNVM@nvm+1)^(0+256)+20)
 12536  28EE  3F42               	moviw [2]fsr1
 12537  28EF  00B6               	movwf	((storeNVM@nvm+2)^(0+256)+20)
 12538  28F0  3F43               	moviw [3]fsr1
 12539  28F1  00B7               	movwf	((storeNVM@nvm+3)^(0+256)+20)
 12540                           
 12541                           ;system.c: 451:  nvm.fudgeFactor = data.fudgeFactor;
 12542  28F2  306F               	movlw	111
 12543  28F3  0086               	movwf	6
 12544  28F4  3027               	movlw	39
 12545  28F5  0087               	movwf	7
 12546  28F6  3F40               	moviw [0]fsr1
 12547  28F7  00B8               	movwf	(storeNVM@nvm^(0+256)+24)
 12548  28F8  3F41               	moviw [1]fsr1
 12549  28F9  00B9               	movwf	((storeNVM@nvm+1)^(0+256)+24)
 12550  28FA  3F42               	moviw [2]fsr1
 12551  28FB  00BA               	movwf	((storeNVM@nvm+2)^(0+256)+24)
 12552  28FC  3F43               	moviw [3]fsr1
 12553  28FD  00BB               	movwf	((storeNVM@nvm+3)^(0+256)+24)
 12554                           
 12555                           ;system.c: 453:  for(n = 0; n < 32; n++) {
 12556  28FE  0140               	movlb	0	; select bank0
 12557  28FF  01BB               	clrf	storeNVM@n
 12558  2900  3020               	movlw	32
 12559  2901  023B               	subwf	storeNVM@n,w
 12560  2902  1803               	btfsc	3,0
 12561  2903  291C               	goto	l10279
 12562  2904                     l10273:	
 12563                           
 12564                           ;system.c: 454:   buf[n] = (uint16_t)nvm.raw[n];
 12565  2904  083B               	movf	storeNVM@n,w
 12566  2905  3E20               	addlw	(low (storeNVM@nvm| (0+256)))& (0+255)
 12567  2906  0086               	movwf	6
 12568  2907  3001               	movlw	1	; select bank2/3
 12569  2908  0087               	movwf	7
 12570  2909  0801               	movf	1,w
 12571  290A  00B9               	movwf	??_storeNVM
 12572  290B  01BA               	clrf	??_storeNVM+1
 12573  290C  353B               	lslf	storeNVM@n,w
 12574  290D  3EA0               	addlw	(low (storeNVM@buf| 0))& (0+255)
 12575  290E  0086               	movwf	6
 12576  290F  0187               	clrf	7
 12577  2910  0839               	movf	??_storeNVM,w
 12578  2911  3FC0               	movwi [0]fsr1
 12579  2912  083A               	movf	??_storeNVM+1,w
 12580  2913  3FC1               	movwi [1]fsr1
 12581                           
 12582                           ;system.c: 455:  }
 12583  2914  3001               	movlw	1
 12584  2915  00B9               	movwf	??_storeNVM
 12585  2916  0839               	movf	??_storeNVM,w
 12586  2917  07BB               	addwf	storeNVM@n,f
 12587  2918  3020               	movlw	32
 12588  2919  023B               	subwf	storeNVM@n,w
 12589  291A  1C03               	skipc
 12590  291B  2904               	goto	l10273
 12591  291C                     l10279:	
 12592                           
 12593                           ;system.c: 457:  FLASH_EraseBlock(0x3f80);
 12594  291C  3080               	movlw	128
 12595  291D  00AC               	movwf	FLASH_EraseBlock@startAddr
 12596  291E  303F               	movlw	63
 12597  291F  00AD               	movwf	FLASH_EraseBlock@startAddr+1
 12598  2920  31BF  2782  31A8   	fcall	_FLASH_EraseBlock
 12599                           
 12600                           ;system.c: 458:  FLASH_WriteBlock(0x3f80, buf);
 12601  2923  3080               	movlw	128
 12602  2924  0140               	movlb	0	; select bank0
 12603  2925  00AF               	movwf	FLASH_WriteBlock@writeAddr
 12604  2926  303F               	movlw	63
 12605  2927  00B0               	movwf	FLASH_WriteBlock@writeAddr+1
 12606  2928  30A0               	movlw	(low (storeNVM@buf| 0))& (0+255)
 12607  2929  00B9               	movwf	??_storeNVM
 12608  292A  0839               	movf	??_storeNVM,w
 12609  292B  00B1               	movwf	FLASH_WriteBlock@flashWordArray
 12610  292C  31B4  246D         	fcall	_FLASH_WriteBlock
 12611  292E  0008               	return
 12612  292F                     __end_of_storeNVM:	
 12613                           ;system.c: 460:  return 0;;	Return value of _storeNVM is never used
 12614                           
 12615                           
 12616                           	psect	text16
 12617  346D                     __ptext16:	
 12618 ;; *************** function _FLASH_WriteBlock *****************
 12619 ;; Defined at:
 12620 ;;		line 43 in file "memory.c"
 12621 ;; Parameters:    Size  Location     Type
 12622 ;;  writeAddr       2   15[BANK0 ] unsigned short 
 12623 ;;  flashWordArr    1   17[BANK0 ] PTR unsigned short 
 12624 ;;		 -> storeNVM@buf(64), 
 12625 ;; Auto vars:     Size  Location     Type
 12626 ;;  blockStartAd    2   21[BANK0 ] unsigned short 
 12627 ;;  i               1   24[BANK0 ] unsigned char 
 12628 ;;  GIEBitValue     1   23[BANK0 ] unsigned char 
 12629 ;; Return value:  Size  Location     Type
 12630 ;;                  1    wreg      char 
 12631 ;; Registers used:
 12632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12633 ;; Tracked objects:
 12634 ;;		On entry : 0/0
 12635 ;;		On exit  : 0/0
 12636 ;;		Unchanged: 0/0
 12637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12638 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12639 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12640 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12641 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12642 ;;Total ram usage:       10 bytes
 12643 ;; Hardware stack levels used:    1
 12644 ;; Hardware stack levels required when called:    4
 12645 ;; This function calls:
 12646 ;;		_FLASH_EraseBlock
 12647 ;; This function is called by:
 12648 ;;		_storeNVM
 12649 ;;		_FLASH_WriteWord
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653                           
 12654                           ;psect for function _FLASH_WriteBlock
 12655  346D                     _FLASH_WriteBlock:	
 12656                           
 12657                           ;memory.c: 43: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t *flashWordArray);mem
      +                          ory.c: 44: {;memory.c: 45:  uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x4000 -
      +                           1) ^ (32 - 1)));
 12658                           
 12659                           ;incstack = 0
 12660                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12661  346D  30E0               	movlw	224
 12662  346E  0140               	movlb	0	; select bank0
 12663  346F  052F               	andwf	FLASH_WriteBlock@writeAddr,w
 12664  3470  00B5               	movwf	FLASH_WriteBlock@blockStartAddr
 12665  3471  303F               	movlw	63
 12666  3472  0530               	andwf	FLASH_WriteBlock@writeAddr+1,w
 12667  3473  00B6               	movwf	FLASH_WriteBlock@blockStartAddr+1
 12668                           
 12669                           ;memory.c: 46:  uint8_t GIEBitValue = INTCONbits.GIE;
 12670  3474  3000               	movlw	0
 12671  3475  1B8B               	btfsc	11,7	;volatile
 12672  3476  3001               	movlw	1
 12673  3477  00B7               	movwf	FLASH_WriteBlock@GIEBitValue
 12674                           
 12675                           ;memory.c: 47:  uint8_t i;;memory.c: 51:  if (writeAddr != blockStartAddr) {
 12676  3478  0836               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 12677  3479  0630               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 12678  347A  1D03               	skipz
 12679  347B  2C7E               	goto	u12015
 12680  347C  0835               	movf	FLASH_WriteBlock@blockStartAddr,w
 12681  347D  062F               	xorwf	FLASH_WriteBlock@writeAddr,w
 12682  347E                     u12015:	
 12683  347E  1D03               	btfss	3,2
 12684  347F  0008               	return
 12685                           
 12686                           ;memory.c: 55:  INTCONbits.GIE = 0;
 12687                           
 12688                           ;memory.c: 53:  }
 12689                           
 12690                           ;memory.c: 52:   return -1;;	Return value of _FLASH_WriteBlock is never used
 12691  3480  138B               	bcf	11,7	;volatile
 12692                           
 12693                           ;memory.c: 58:  FLASH_EraseBlock(writeAddr);
 12694  3481  0830               	movf	FLASH_WriteBlock@writeAddr+1,w
 12695  3482  00AD               	movwf	FLASH_EraseBlock@startAddr+1
 12696  3483  082F               	movf	FLASH_WriteBlock@writeAddr,w
 12697  3484  00AC               	movwf	FLASH_EraseBlock@startAddr
 12698  3485  31BF  2782  31B4   	fcall	_FLASH_EraseBlock
 12699                           
 12700                           ;memory.c: 61:  NVMCON1bits.NVMREGS = 0;
 12701  3488  0150               	movlb	16	; select bank16
 12702  3489  131E               	bcf	30,6	;volsfr
 12703                           
 12704                           ;memory.c: 62:  NVMCON1bits.WREN = 1;
 12705  348A  151E               	bsf	30,2	;volsfr
 12706                           
 12707                           ;memory.c: 63:  NVMCON1bits.LWLO = 1;
 12708  348B  169E               	bsf	30,5	;volsfr
 12709                           
 12710                           ;memory.c: 65:  for (i = 0; i < 32; i++) {
 12711  348C  0140               	movlb	0	; select bank0
 12712  348D  01B8               	clrf	FLASH_WriteBlock@i
 12713  348E  3020               	movlw	32
 12714  348F  0238               	subwf	FLASH_WriteBlock@i,w
 12715  3490  1803               	btfsc	3,0
 12716  3491  2CCD               	goto	l923
 12717  3492                     l9567:	
 12718                           
 12719                           ;memory.c: 67:   NVMADRL = (writeAddr & 0xFF);
 12720  3492  082F               	movf	FLASH_WriteBlock@writeAddr,w
 12721  3493  0150               	movlb	16	; select bank16
 12722  3494  009A               	movwf	26	;volatile
 12723                           
 12724                           ;memory.c: 69:   NVMADRH = ((writeAddr & 0xFF00) >> 8);
 12725  3495  0140               	movlb	0	; select bank0
 12726  3496  0830               	movf	FLASH_WriteBlock@writeAddr+1,w
 12727  3497  0150               	movlb	16	; select bank16
 12728  3498  009B               	movwf	27	;volatile
 12729                           
 12730                           ;memory.c: 72:   NVMDATL = flashWordArray[i];
 12731  3499  0140               	movlb	0	; select bank0
 12732  349A  3538               	lslf	FLASH_WriteBlock@i,w
 12733  349B  0731               	addwf	FLASH_WriteBlock@flashWordArray,w
 12734  349C  00B2               	movwf	??_FLASH_WriteBlock
 12735  349D  0832               	movf	??_FLASH_WriteBlock,w
 12736  349E  0086               	movwf	6
 12737  349F  0187               	clrf	7
 12738  34A0  0801               	movf	1,w
 12739  34A1  0150               	movlb	16	; select bank16
 12740  34A2  009C               	movwf	28	;volatile
 12741                           
 12742                           ;memory.c: 73:   NVMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 12743  34A3  0140               	movlb	0	; select bank0
 12744  34A4  3538               	lslf	FLASH_WriteBlock@i,w
 12745  34A5  0731               	addwf	FLASH_WriteBlock@flashWordArray,w
 12746  34A6  00B2               	movwf	??_FLASH_WriteBlock
 12747  34A7  0832               	movf	??_FLASH_WriteBlock,w
 12748  34A8  0086               	movwf	6
 12749  34A9  0187               	clrf	7
 12750  34AA  3F40               	moviw [0]fsr1
 12751  34AB  00B3               	movwf	??_FLASH_WriteBlock+1
 12752  34AC  3F41               	moviw [1]fsr1
 12753  34AD  00B4               	movwf	??_FLASH_WriteBlock+2
 12754  34AE  0834               	movf	??_FLASH_WriteBlock+2,w
 12755  34AF  0150               	movlb	16	; select bank16
 12756  34B0  009D               	movwf	29	;volatile
 12757                           
 12758                           ;memory.c: 75:   if (i == (32 - 1)) {
 12759  34B1  301F               	movlw	31
 12760  34B2  0140               	movlb	0	; select bank0
 12761  34B3  0638               	xorwf	FLASH_WriteBlock@i,w
 12762  34B4  1D03               	btfss	3,2
 12763  34B5  2CB8               	goto	l9579
 12764                           
 12765                           ;memory.c: 77:    NVMCON1bits.LWLO = 0;
 12766  34B6  0150               	movlb	16	; select bank16
 12767  34B7  129E               	bcf	30,5	;volsfr
 12768  34B8                     l9579:	
 12769                           ;memory.c: 78:   }
 12770                           
 12771                           
 12772                           ;memory.c: 80:   NVMCON2 = 0x55;
 12773  34B8  3055               	movlw	85
 12774  34B9  0150               	movlb	16	; select bank16
 12775  34BA  009F               	movwf	31	;volsfr
 12776                           
 12777                           ;memory.c: 81:   NVMCON2 = 0xAA;
 12778  34BB  30AA               	movlw	170
 12779  34BC  009F               	movwf	31	;volsfr
 12780                           
 12781                           ;memory.c: 82:   NVMCON1bits.WR = 1;
 12782  34BD  149E               	bsf	30,1	;volsfr
 12783                           
 12784                           ;memory.c: 83:   __nop();
 12785  34BE  0000               	nop
 12786                           
 12787                           ;memory.c: 84:   __nop();
 12788  34BF  0000               	nop
 12789                           
 12790                           ;memory.c: 86:   writeAddr++;
 12791  34C0  3001               	movlw	1
 12792  34C1  0140               	movlb	0	; select bank0
 12793  34C2  07AF               	addwf	FLASH_WriteBlock@writeAddr,f
 12794  34C3  3000               	movlw	0
 12795  34C4  3DB0               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 12796                           
 12797                           ;memory.c: 87:  }
 12798  34C5  3001               	movlw	1
 12799  34C6  00B2               	movwf	??_FLASH_WriteBlock
 12800  34C7  0832               	movf	??_FLASH_WriteBlock,w
 12801  34C8  07B8               	addwf	FLASH_WriteBlock@i,f
 12802  34C9  3020               	movlw	32
 12803  34CA  0238               	subwf	FLASH_WriteBlock@i,w
 12804  34CB  1C03               	skipc
 12805  34CC  2C92               	goto	l9567
 12806  34CD                     l923:	
 12807                           
 12808                           ;memory.c: 89:  NVMCON1bits.WREN = 0;
 12809  34CD  0150               	movlb	16	; select bank16
 12810  34CE  111E               	bcf	30,2	;volsfr
 12811                           
 12812                           ;memory.c: 90:  INTCONbits.GIE = GIEBitValue;
 12813  34CF  0140               	movlb	0	; select bank0
 12814  34D0  0C37               	rrf	FLASH_WriteBlock@GIEBitValue,w
 12815  34D1  1C03               	skipc
 12816  34D2  138B               	bcf	11,7	;volatile
 12817  34D3  1803               	skipnc
 12818  34D4  178B               	bsf	11,7	;volatile
 12819  34D5  0008               	return
 12820  34D6                     __end_of_FLASH_WriteBlock:	
 12821                           ;memory.c: 92:  return 0;;	Return value of _FLASH_WriteBlock is never used
 12822                           
 12823                           
 12824                           	psect	text17
 12825  3F82                     __ptext17:	
 12826 ;; *************** function _FLASH_EraseBlock *****************
 12827 ;; Defined at:
 12828 ;;		line 95 in file "memory.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;  startAddr       2   12[BANK0 ] unsigned short 
 12831 ;; Auto vars:     Size  Location     Type
 12832 ;;  GIEBitValue     1   14[BANK0 ] unsigned char 
 12833 ;; Return value:  Size  Location     Type
 12834 ;;                  1    wreg      void 
 12835 ;; Registers used:
 12836 ;;		wreg, status,2, status,0
 12837 ;; Tracked objects:
 12838 ;;		On entry : 0/0
 12839 ;;		On exit  : 0/0
 12840 ;;		Unchanged: 0/0
 12841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12842 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12845 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12846 ;;Total ram usage:        3 bytes
 12847 ;; Hardware stack levels used:    1
 12848 ;; Hardware stack levels required when called:    3
 12849 ;; This function calls:
 12850 ;;		Nothing
 12851 ;; This function is called by:
 12852 ;;		_storeNVM
 12853 ;;		_FLASH_WriteBlock
 12854 ;; This function uses a non-reentrant model
 12855 ;;
 12856                           
 12857                           
 12858                           ;psect for function _FLASH_EraseBlock
 12859  3F82                     _FLASH_EraseBlock:	
 12860                           
 12861                           ;memory.c: 95: void FLASH_EraseBlock(uint16_t startAddr);memory.c: 96: {;memory.c: 97:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
 12862                           
 12863                           ;incstack = 0
 12864                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12865  3F82  3000               	movlw	0
 12866  3F83  1B8B               	btfsc	11,7	;volatile
 12867  3F84  3001               	movlw	1
 12868  3F85  0140               	movlb	0	; select bank0
 12869  3F86  00AE               	movwf	FLASH_EraseBlock@GIEBitValue
 12870                           
 12871                           ;memory.c: 100:  INTCONbits.GIE = 0;
 12872  3F87  138B               	bcf	11,7	;volatile
 12873                           
 12874                           ;memory.c: 102:  NVMADRL = (startAddr & 0xFF);
 12875  3F88  082C               	movf	FLASH_EraseBlock@startAddr,w
 12876  3F89  0150               	movlb	16	; select bank16
 12877  3F8A  009A               	movwf	26	;volatile
 12878                           
 12879                           ;memory.c: 104:  NVMADRH = ((startAddr & 0xFF00) >> 8);
 12880  3F8B  0140               	movlb	0	; select bank0
 12881  3F8C  082D               	movf	FLASH_EraseBlock@startAddr+1,w
 12882  3F8D  0150               	movlb	16	; select bank16
 12883  3F8E  009B               	movwf	27	;volatile
 12884                           
 12885                           ;memory.c: 107:  NVMCON1bits.NVMREGS = 0;
 12886  3F8F  131E               	bcf	30,6	;volsfr
 12887                           
 12888                           ;memory.c: 108:  NVMCON1bits.FREE = 1;
 12889  3F90  161E               	bsf	30,4	;volsfr
 12890                           
 12891                           ;memory.c: 109:  NVMCON1bits.WREN = 1;
 12892  3F91  151E               	bsf	30,2	;volsfr
 12893                           
 12894                           ;memory.c: 112:  NVMCON2 = 0x55;
 12895  3F92  3055               	movlw	85
 12896  3F93  009F               	movwf	31	;volsfr
 12897                           
 12898                           ;memory.c: 113:  NVMCON2 = 0xAA;
 12899  3F94  30AA               	movlw	170
 12900  3F95  009F               	movwf	31	;volsfr
 12901                           
 12902                           ;memory.c: 114:  NVMCON1bits.WR = 1;
 12903  3F96  149E               	bsf	30,1	;volsfr
 12904                           
 12905                           ;memory.c: 115:  __nop();
 12906  3F97  0000               	nop
 12907                           
 12908                           ;memory.c: 116:  __nop();
 12909  3F98  0000               	nop
 12910                           
 12911                           ;memory.c: 118:  NVMCON1bits.WREN = 0;
 12912  3F99  0150               	movlb	16	; select bank16
 12913  3F9A  111E               	bcf	30,2	;volsfr
 12914                           
 12915                           ;memory.c: 119:  INTCONbits.GIE = GIEBitValue;
 12916  3F9B  0140               	movlb	0	; select bank0
 12917  3F9C  0C2E               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12918  3F9D  1C03               	skipc
 12919  3F9E  138B               	bcf	11,7	;volatile
 12920  3F9F  1803               	skipnc
 12921  3FA0  178B               	bsf	11,7	;volatile
 12922  3FA1  0008               	return
 12923  3FA2                     __end_of_FLASH_EraseBlock:	
 12924                           
 12925                           	psect	text18
 12926  2A47                     __ptext18:	
 12927 ;; *************** function _spinInput *****************
 12928 ;; Defined at:
 12929 ;;		line 100 in file "inputs.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  input           2   57[BANK1 ] PTR float 
 12932 ;;		 -> data.heater(124), data(166), 
 12933 ;;  min             4   59[BANK1 ] float 
 12934 ;;  max             4   63[BANK1 ] float 
 12935 ;;  step            4   67[BANK1 ] float 
 12936 ;; Auto vars:     Size  Location     Type
 12937 ;;  dir             1   55[BANK0 ] enum E7851
 12938 ;; Return value:  Size  Location     Type
 12939 ;;                  1    wreg      void 
 12940 ;; Registers used:
 12941 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12942 ;; Tracked objects:
 12943 ;;		On entry : 0/0
 12944 ;;		On exit  : 0/0
 12945 ;;		Unchanged: 0/0
 12946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12947 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12950 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12951 ;;Total ram usage:       16 bytes
 12952 ;; Hardware stack levels used:    1
 12953 ;; Hardware stack levels required when called:    5
 12954 ;; This function calls:
 12955 ;;		___fladd
 12956 ;;		___flge
 12957 ;;		___flsub
 12958 ;;		_getRotDir
 12959 ;; This function is called by:
 12960 ;;		_setOutputPower
 12961 ;;		_setLensDia
 12962 ;;		_setDPOffset
 12963 ;;		_setSkyTemp
 12964 ;;		_setFudgeFactor
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           
 12969                           ;psect for function _spinInput
 12970  2A47                     _spinInput:	
 12971                           
 12972                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 12973                           
 12974                           ;incstack = 0
 12975                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12976  2A47  31BE  2676  31AA   	fcall	_getRotDir
 12977  2A4A  0140               	movlb	0	; select bank0
 12978  2A4B  00D6               	movwf	??_spinInput
 12979  2A4C  0856               	movf	??_spinInput,w
 12980  2A4D  00D7               	movwf	spinInput@dir
 12981                           
 12982                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 12983  2A4E  3002               	movlw	2
 12984  2A4F  0657               	xorwf	spinInput@dir,w
 12985  2A50  1D03               	btfss	3,2
 12986  2A51  2A91               	goto	l10119
 12987  2A52  0141               	movlb	1	; select bank1
 12988  2A53  085E               	movf	(spinInput@min+3)^(0+128),w
 12989  2A54  00CC               	movwf	(___flge@ff1+3)^(0+128)
 12990  2A55  085D               	movf	(spinInput@min+2)^(0+128),w
 12991  2A56  00CB               	movwf	(___flge@ff1+2)^(0+128)
 12992  2A57  085C               	movf	(spinInput@min+1)^(0+128),w
 12993  2A58  00CA               	movwf	(___flge@ff1+1)^(0+128)
 12994  2A59  085B               	movf	spinInput@min^(0+128),w
 12995  2A5A  00C9               	movwf	___flge@ff1^(0+128)
 12996  2A5B  0859               	movf	spinInput@input^(0+128),w
 12997  2A5C  0086               	movwf	6
 12998  2A5D  085A               	movf	(spinInput@input+1)^(0+128),w
 12999  2A5E  0087               	movwf	7
 13000  2A5F  3F40               	moviw [0]fsr1
 13001  2A60  00CD               	movwf	___flge@ff2^(0+128)
 13002  2A61  3F41               	moviw [1]fsr1
 13003  2A62  00CE               	movwf	(___flge@ff2+1)^(0+128)
 13004  2A63  3F42               	moviw [2]fsr1
 13005  2A64  00CF               	movwf	(___flge@ff2+2)^(0+128)
 13006  2A65  3F43               	moviw [3]fsr1
 13007  2A66  00D0               	movwf	(___flge@ff2+3)^(0+128)
 13008  2A67  3198  202D  31AA   	fcall	___flge
 13009  2A6A  1803               	btfsc	3,0
 13010  2A6B  2A91               	goto	l10119
 13011                           
 13012                           ;inputs.c: 105:   *input -= step;
 13013  2A6C  0141               	movlb	1	; select bank1
 13014  2A6D  0866               	movf	(spinInput@step+3)^(0+128),w
 13015  2A6E  00CC               	movwf	(___flsub@a+3)^(0+128)
 13016  2A6F  0865               	movf	(spinInput@step+2)^(0+128),w
 13017  2A70  00CB               	movwf	(___flsub@a+2)^(0+128)
 13018  2A71  0864               	movf	(spinInput@step+1)^(0+128),w
 13019  2A72  00CA               	movwf	(___flsub@a+1)^(0+128)
 13020  2A73  0863               	movf	spinInput@step^(0+128),w
 13021  2A74  00C9               	movwf	___flsub@a^(0+128)
 13022  2A75  0859               	movf	spinInput@input^(0+128),w
 13023  2A76  0086               	movwf	6
 13024  2A77  085A               	movf	(spinInput@input+1)^(0+128),w
 13025  2A78  0087               	movwf	7
 13026  2A79  3F40               	moviw [0]fsr1
 13027  2A7A  00CD               	movwf	___flsub@b^(0+128)
 13028  2A7B  3F41               	moviw [1]fsr1
 13029  2A7C  00CE               	movwf	(___flsub@b+1)^(0+128)
 13030  2A7D  3F42               	moviw [2]fsr1
 13031  2A7E  00CF               	movwf	(___flsub@b+2)^(0+128)
 13032  2A7F  3F43               	moviw [3]fsr1
 13033  2A80  00D0               	movwf	(___flsub@b+3)^(0+128)
 13034  2A81  31BF  2743         	fcall	___flsub
 13035  2A83  0141               	movlb	1	; select bank1
 13036  2A84  0859               	movf	spinInput@input^(0+128),w
 13037  2A85  0086               	movwf	6
 13038  2A86  085A               	movf	(spinInput@input+1)^(0+128),w
 13039  2A87  0087               	movwf	7
 13040  2A88  0849               	movf	?___flsub^(0+128),w
 13041  2A89  3FC0               	movwi [0]fsr1
 13042  2A8A  084A               	movf	(?___flsub+1)^(0+128),w
 13043  2A8B  3FC1               	movwi [1]fsr1
 13044  2A8C  084B               	movf	(?___flsub+2)^(0+128),w
 13045  2A8D  3FC2               	movwi [2]fsr1
 13046  2A8E  084C               	movf	(?___flsub+3)^(0+128),w
 13047  2A8F  3FC3               	movwi [3]fsr1
 13048  2A90  0008               	return
 13049  2A91                     l10119:	
 13050                           ;inputs.c: 106:  else if ((dir == ROT_CW) && (*input < max))
 13051                           
 13052  2A91  0140               	movlb	0	; select bank0
 13053  2A92  0357               	decf	spinInput@dir,w
 13054  2A93  1D03               	btfss	3,2
 13055  2A94  0008               	return
 13056  2A95  0141               	movlb	1	; select bank1
 13057  2A96  0859               	movf	spinInput@input^(0+128),w
 13058  2A97  0086               	movwf	6
 13059  2A98  085A               	movf	(spinInput@input+1)^(0+128),w
 13060  2A99  0087               	movwf	7
 13061  2A9A  3F40               	moviw [0]fsr1
 13062  2A9B  00C9               	movwf	___flge@ff1^(0+128)
 13063  2A9C  3F41               	moviw [1]fsr1
 13064  2A9D  00CA               	movwf	(___flge@ff1+1)^(0+128)
 13065  2A9E  3F42               	moviw [2]fsr1
 13066  2A9F  00CB               	movwf	(___flge@ff1+2)^(0+128)
 13067  2AA0  3F43               	moviw [3]fsr1
 13068  2AA1  00CC               	movwf	(___flge@ff1+3)^(0+128)
 13069  2AA2  0862               	movf	(spinInput@max+3)^(0+128),w
 13070  2AA3  00D0               	movwf	(___flge@ff2+3)^(0+128)
 13071  2AA4  0861               	movf	(spinInput@max+2)^(0+128),w
 13072  2AA5  00CF               	movwf	(___flge@ff2+2)^(0+128)
 13073  2AA6  0860               	movf	(spinInput@max+1)^(0+128),w
 13074  2AA7  00CE               	movwf	(___flge@ff2+1)^(0+128)
 13075  2AA8  085F               	movf	spinInput@max^(0+128),w
 13076  2AA9  00CD               	movwf	___flge@ff2^(0+128)
 13077  2AAA  3198  202D  31AA   	fcall	___flge
 13078  2AAD  1803               	btfsc	3,0
 13079  2AAE  0008               	return
 13080                           
 13081                           ;inputs.c: 107:   *input += step;
 13082  2AAF  0141               	movlb	1	; select bank1
 13083  2AB0  0866               	movf	(spinInput@step+3)^(0+128),w
 13084  2AB1  00B4               	movwf	(___fladd@b+3)^(0+128)
 13085  2AB2  0865               	movf	(spinInput@step+2)^(0+128),w
 13086  2AB3  00B3               	movwf	(___fladd@b+2)^(0+128)
 13087  2AB4  0864               	movf	(spinInput@step+1)^(0+128),w
 13088  2AB5  00B2               	movwf	(___fladd@b+1)^(0+128)
 13089  2AB6  0863               	movf	spinInput@step^(0+128),w
 13090  2AB7  00B1               	movwf	___fladd@b^(0+128)
 13091  2AB8  0859               	movf	spinInput@input^(0+128),w
 13092  2AB9  0086               	movwf	6
 13093  2ABA  085A               	movf	(spinInput@input+1)^(0+128),w
 13094  2ABB  0087               	movwf	7
 13095  2ABC  3F40               	moviw [0]fsr1
 13096  2ABD  00B5               	movwf	___fladd@a^(0+128)
 13097  2ABE  3F41               	moviw [1]fsr1
 13098  2ABF  00B6               	movwf	(___fladd@a+1)^(0+128)
 13099  2AC0  3F42               	moviw [2]fsr1
 13100  2AC1  00B7               	movwf	(___fladd@a+2)^(0+128)
 13101  2AC2  3F43               	moviw [3]fsr1
 13102  2AC3  00B8               	movwf	(___fladd@a+3)^(0+128)
 13103  2AC4  319E  2606         	fcall	___fladd
 13104  2AC6  0141               	movlb	1	; select bank1
 13105  2AC7  0859               	movf	spinInput@input^(0+128),w
 13106  2AC8  0086               	movwf	6
 13107  2AC9  085A               	movf	(spinInput@input+1)^(0+128),w
 13108  2ACA  0087               	movwf	7
 13109  2ACB  0831               	movf	?___fladd^(0+128),w
 13110  2ACC  3FC0               	movwi [0]fsr1
 13111  2ACD  0832               	movf	(?___fladd+1)^(0+128),w
 13112  2ACE  3FC1               	movwi [1]fsr1
 13113  2ACF  0833               	movf	(?___fladd+2)^(0+128),w
 13114  2AD0  3FC2               	movwi [2]fsr1
 13115  2AD1  0834               	movf	(?___fladd+3)^(0+128),w
 13116  2AD2  3FC3               	movwi [3]fsr1
 13117  2AD3  0008               	return
 13118  2AD4                     __end_of_spinInput:	
 13119                           
 13120                           	psect	text19
 13121  3F43                     __ptext19:	
 13122 ;; *************** function ___flsub *****************
 13123 ;; Defined at:
 13124 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcadd.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;  a               4   41[BANK1 ] void 
 13127 ;;  b               4   45[BANK1 ] void 
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;		None
 13130 ;; Return value:  Size  Location     Type
 13131 ;;                  4   41[BANK1 ] void 
 13132 ;; Registers used:
 13133 ;;		wreg, status,2, status,0, pclath, cstack
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13139 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13142 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13143 ;;Total ram usage:        8 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; Hardware stack levels required when called:    4
 13146 ;; This function calls:
 13147 ;;		___fladd
 13148 ;; This function is called by:
 13149 ;;		_spinInput
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           
 13154                           ;psect for function ___flsub
 13155  3F43                     ___flsub:	
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 13159  3F43  3080               	movlw	128
 13160  3F44  0141               	movlb	1	; select bank1
 13161  3F45  06CC               	xorwf	(___flsub@a+3)^(0+128),f
 13162  3F46  0850               	movf	(___flsub@b+3)^(0+128),w
 13163  3F47  00B4               	movwf	(___fladd@b+3)^(0+128)
 13164  3F48  084F               	movf	(___flsub@b+2)^(0+128),w
 13165  3F49  00B3               	movwf	(___fladd@b+2)^(0+128)
 13166  3F4A  084E               	movf	(___flsub@b+1)^(0+128),w
 13167  3F4B  00B2               	movwf	(___fladd@b+1)^(0+128)
 13168  3F4C  084D               	movf	___flsub@b^(0+128),w
 13169  3F4D  00B1               	movwf	___fladd@b^(0+128)
 13170  3F4E  084C               	movf	(___flsub@a+3)^(0+128),w
 13171  3F4F  00B8               	movwf	(___fladd@a+3)^(0+128)
 13172  3F50  084B               	movf	(___flsub@a+2)^(0+128),w
 13173  3F51  00B7               	movwf	(___fladd@a+2)^(0+128)
 13174  3F52  084A               	movf	(___flsub@a+1)^(0+128),w
 13175  3F53  00B6               	movwf	(___fladd@a+1)^(0+128)
 13176  3F54  0849               	movf	___flsub@a^(0+128),w
 13177  3F55  00B5               	movwf	___fladd@a^(0+128)
 13178  3F56  319E  2606         	fcall	___fladd
 13179  3F58  0141               	movlb	1	; select bank1
 13180  3F59  0834               	movf	(?___fladd+3)^(0+128),w
 13181  3F5A  00CC               	movwf	(?___flsub+3)^(0+128)
 13182  3F5B  0833               	movf	(?___fladd+2)^(0+128),w
 13183  3F5C  00CB               	movwf	(?___flsub+2)^(0+128)
 13184  3F5D  0832               	movf	(?___fladd+1)^(0+128),w
 13185  3F5E  00CA               	movwf	(?___flsub+1)^(0+128)
 13186  3F5F  0831               	movf	?___fladd^(0+128),w
 13187  3F60  00C9               	movwf	?___flsub^(0+128)
 13188  3F61  0008               	return
 13189  3F62                     __end_of___flsub:	
 13190                           
 13191                           	psect	text20
 13192  3E81                     __ptext20:	
 13193 ;; *************** function _getPB *****************
 13194 ;; Defined at:
 13195 ;;		line 89 in file "inputs.c"
 13196 ;; Parameters:    Size  Location     Type
 13197 ;;		None
 13198 ;; Auto vars:     Size  Location     Type
 13199 ;;  ret             1   13[BANK0 ] enum E7855
 13200 ;; Return value:  Size  Location     Type
 13201 ;;                  1    wreg      enum E7855
 13202 ;; Registers used:
 13203 ;;		wreg, status,2, status,0
 13204 ;; Tracked objects:
 13205 ;;		On entry : 0/0
 13206 ;;		On exit  : 0/0
 13207 ;;		Unchanged: 0/0
 13208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13213 ;;Total ram usage:        2 bytes
 13214 ;; Hardware stack levels used:    1
 13215 ;; Hardware stack levels required when called:    3
 13216 ;; This function calls:
 13217 ;;		Nothing
 13218 ;; This function is called by:
 13219 ;;		_setOutputPower
 13220 ;;		_setLensDia
 13221 ;;		_setDPOffset
 13222 ;;		_setSkyTemp
 13223 ;;		_setFudgeFactor
 13224 ;;		_viewErrorMessage
 13225 ;;		_menu
 13226 ;; This function uses a non-reentrant model
 13227 ;;
 13228                           
 13229                           
 13230                           ;psect for function _getPB
 13231  3E81                     _getPB:	
 13232                           
 13233                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 13234                           
 13235                           ;incstack = 0
 13236                           ; Regs used in _getPB: [wreg+status,2+status,0]
 13237  3E81  087D               	movf	_pbState,w	;volatile
 13238  3E82  0140               	movlb	0	; select bank0
 13239  3E83  00AC               	movwf	??_getPB
 13240  3E84  082C               	movf	??_getPB,w
 13241  3E85  00AD               	movwf	getPB@ret
 13242                           
 13243                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 13244  3E86  3004               	movlw	4
 13245  3E87  067D               	xorwf	_pbState,w	;volatile
 13246  3E88  1D03               	btfss	3,2
 13247                           
 13248                           ;inputs.c: 93:   pbState = PB_NONE;
 13249  3E89  01FD               	clrf	_pbState	;volatile
 13250                           
 13251                           ;inputs.c: 94:  return ret;
 13252  3E8A  082D               	movf	getPB@ret,w
 13253  3E8B  0008               	return
 13254  3E8C                     __end_of_getPB:	
 13255                           
 13256                           	psect	text21
 13257  2D05                     __ptext21:	
 13258 ;; *************** function _getNextState *****************
 13259 ;; Defined at:
 13260 ;;		line 137 in file "menuhelper.c"
 13261 ;; Parameters:    Size  Location     Type
 13262 ;;  state           1    wreg     enum E7928
 13263 ;;  intState        1   32[BANK0 ] unsigned char 
 13264 ;;  pb              1   33[BANK0 ] enum E7866
 13265 ;;  timeout         1   34[BANK0 ] unsigned char 
 13266 ;; Auto vars:     Size  Location     Type
 13267 ;;  state           1   40[BANK0 ] enum E7928
 13268 ;;  n               1   41[BANK0 ] unsigned char 
 13269 ;; Return value:  Size  Location     Type
 13270 ;;                  1    wreg      char 
 13271 ;; Registers used:
 13272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13273 ;; Tracked objects:
 13274 ;;		On entry : 0/0
 13275 ;;		On exit  : 0/0
 13276 ;;		Unchanged: 0/0
 13277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13278 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13279 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13280 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13281 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13282 ;;Total ram usage:       10 bytes
 13283 ;; Hardware stack levels used:    1
 13284 ;; Hardware stack levels required when called:    4
 13285 ;; This function calls:
 13286 ;;		___wmul
 13287 ;; This function is called by:
 13288 ;;		_menu
 13289 ;; This function uses a non-reentrant model
 13290 ;;
 13291                           
 13292                           
 13293                           ;psect for function _getNextState
 13294  2D05                     _getNextState:	
 13295                           
 13296                           ;incstack = 0
 13297                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13298                           ;getNextState@state stored from wreg
 13299  2D05  0140               	movlb	0	; select bank0
 13300  2D06  00C8               	movwf	getNextState@state
 13301                           
 13302                           ;menuhelper.c: 137: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 138:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 139: {;menuhelper
      +                          .c: 140:  uint8_t n;;menuhelper.c: 143:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 13303  2D07  01C9               	clrf	getNextState@n
 13304  2D08  3012               	movlw	18
 13305  2D09  0249               	subwf	getNextState@n,w
 13306  2D0A  1803               	btfsc	3,0
 13307  2D0B  2DE7               	goto	l10773
 13308  2D0C                     l10737:	
 13309                           
 13310                           ;menuhelper.c: 144:   if ((nextStateTbl[n].state == state)) {
 13311  2D0C  0849               	movf	getNextState@n,w
 13312  2D0D  00C3               	movwf	??_getNextState
 13313  2D0E  01C4               	clrf	??_getNextState+1
 13314  2D0F  0843               	movf	??_getNextState,w
 13315  2D10  00B5               	movwf	___wmul@multiplier
 13316  2D11  0844               	movf	??_getNextState+1,w
 13317  2D12  00B6               	movwf	___wmul@multiplier+1
 13318  2D13  3006               	movlw	6
 13319  2D14  00B7               	movwf	___wmul@multiplicand
 13320  2D15  3000               	movlw	0
 13321  2D16  00B8               	movwf	___wmul@multiplicand+1
 13322  2D17  31BF  270A  31AD   	fcall	___wmul
 13323  2D1A  0140               	movlb	0	; select bank0
 13324  2D1B  0836               	movf	?___wmul+1,w
 13325  2D1C  0085               	movwf	5
 13326  2D1D  0835               	movf	?___wmul,w
 13327  2D1E  0084               	movwf	4
 13328  2D1F  3000               	movlw	low (_nextStateTbl| (0+32768))
 13329  2D20  0784               	addwf	4,f
 13330  2D21  30B8               	movlw	high (_nextStateTbl| (0+32768))
 13331  2D22  3D85               	addwfc	5,f
 13332  2D23  0800               	movf	0,w	;code access
 13333  2D24  0648               	xorwf	getNextState@state,w
 13334  2D25  1D03               	skipz
 13335  2D26  2DDF               	goto	l10769
 13336                           
 13337                           ;menuhelper.c: 146:    if ((nextStateTbl[n].intState == intState) ||
 13338  2D27  0849               	movf	getNextState@n,w
 13339  2D28  00C3               	movwf	??_getNextState
 13340  2D29  01C4               	clrf	??_getNextState+1
 13341  2D2A  0843               	movf	??_getNextState,w
 13342  2D2B  00B5               	movwf	___wmul@multiplier
 13343  2D2C  0844               	movf	??_getNextState+1,w
 13344  2D2D  00B6               	movwf	___wmul@multiplier+1
 13345  2D2E  3006               	movlw	6
 13346  2D2F  00B7               	movwf	___wmul@multiplicand
 13347  2D30  3000               	movlw	0
 13348  2D31  00B8               	movwf	___wmul@multiplicand+1
 13349  2D32  31BF  270A  31AD   	fcall	___wmul
 13350  2D35  0140               	movlb	0	; select bank0
 13351  2D36  0835               	movf	?___wmul,w
 13352  2D37  3E01               	addlw	1
 13353  2D38  00C5               	movwf	??_getNextState+2
 13354  2D39  3000               	movlw	0
 13355  2D3A  3D36               	addwfc	?___wmul+1,w
 13356  2D3B  00C6               	movwf	??_getNextState+3
 13357  2D3C  3000               	movlw	low (_nextStateTbl| (0+32768))
 13358  2D3D  0745               	addwf	??_getNextState+2,w
 13359  2D3E  0084               	movwf	4
 13360  2D3F  30B8               	movlw	high (_nextStateTbl| (0+32768))
 13361  2D40  3D46               	addwfc	??_getNextState+3,w
 13362  2D41  0085               	movwf	5
 13363  2D42  0800               	movf	0,w	;code access
 13364  2D43  0640               	xorwf	getNextState@intState,w
 13365  2D44  1903               	skipnz
 13366  2D45  2D65               	goto	l10743
 13367  2D46  0849               	movf	getNextState@n,w
 13368  2D47  00C3               	movwf	??_getNextState
 13369  2D48  01C4               	clrf	??_getNextState+1
 13370  2D49  0843               	movf	??_getNextState,w
 13371  2D4A  00B5               	movwf	___wmul@multiplier
 13372  2D4B  0844               	movf	??_getNextState+1,w
 13373  2D4C  00B6               	movwf	___wmul@multiplier+1
 13374  2D4D  3006               	movlw	6
 13375  2D4E  00B7               	movwf	___wmul@multiplicand
 13376  2D4F  3000               	movlw	0
 13377  2D50  00B8               	movwf	___wmul@multiplicand+1
 13378  2D51  31BF  270A  31AD   	fcall	___wmul
 13379  2D54  0140               	movlb	0	; select bank0
 13380  2D55  0835               	movf	?___wmul,w
 13381  2D56  3E01               	addlw	1
 13382  2D57  00C5               	movwf	??_getNextState+2
 13383  2D58  3000               	movlw	0
 13384  2D59  3D36               	addwfc	?___wmul+1,w
 13385  2D5A  00C6               	movwf	??_getNextState+3
 13386  2D5B  3000               	movlw	low (_nextStateTbl| (0+32768))
 13387  2D5C  0745               	addwf	??_getNextState+2,w
 13388  2D5D  0084               	movwf	4
 13389  2D5E  30B8               	movlw	high (_nextStateTbl| (0+32768))
 13390  2D5F  3D46               	addwfc	??_getNextState+3,w
 13391  2D60  0085               	movwf	5
 13392  2D61  0012               	moviw fsr0++
 13393  2D62  3AFF               	xorlw	255
 13394  2D63  1D03               	btfss	3,2
 13395  2D64  2DDF               	goto	l10769
 13396  2D65                     l10743:	
 13397                           
 13398                           ;menuhelper.c: 147:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 148:     if (
      +                          timeout)
 13399  2D65  0842               	movf	getNextState@timeout,w
 13400  2D66  1903               	btfsc	3,2
 13401  2D67  2D84               	goto	l10749
 13402                           
 13403                           ;menuhelper.c: 149:      return nextStateTbl[n].timeout;
 13404  2D68  0849               	movf	getNextState@n,w
 13405  2D69  00C3               	movwf	??_getNextState
 13406  2D6A  01C4               	clrf	??_getNextState+1
 13407  2D6B  0843               	movf	??_getNextState,w
 13408  2D6C  00B5               	movwf	___wmul@multiplier
 13409  2D6D  0844               	movf	??_getNextState+1,w
 13410  2D6E  00B6               	movwf	___wmul@multiplier+1
 13411  2D6F  3006               	movlw	6
 13412  2D70  00B7               	movwf	___wmul@multiplicand
 13413  2D71  3000               	movlw	0
 13414  2D72  00B8               	movwf	___wmul@multiplicand+1
 13415  2D73  31BF  270A         	fcall	___wmul
 13416  2D75  0140               	movlb	0	; select bank0
 13417  2D76  0835               	movf	?___wmul,w
 13418  2D77  3E04               	addlw	4
 13419  2D78  00C5               	movwf	??_getNextState+2
 13420  2D79  3000               	movlw	0
 13421  2D7A  3D36               	addwfc	?___wmul+1,w
 13422  2D7B  00C6               	movwf	??_getNextState+3
 13423  2D7C  3000               	movlw	low (_nextStateTbl| (0+32768))
 13424  2D7D  0745               	addwf	??_getNextState+2,w
 13425  2D7E  0084               	movwf	4
 13426  2D7F  30B8               	movlw	high (_nextStateTbl| (0+32768))
 13427  2D80  3D46               	addwfc	??_getNextState+3,w
 13428  2D81  0085               	movwf	5
 13429  2D82  0800               	movf	0,w	;code access
 13430  2D83  0008               	return
 13431  2D84                     l10749:	
 13432                           
 13433                           ;menuhelper.c: 151:     if (pb == PB_SHORT)
 13434  2D84  0341               	decf	getNextState@pb,w
 13435  2D85  1D03               	btfss	3,2
 13436  2D86  2DA3               	goto	l10757
 13437                           
 13438                           ;menuhelper.c: 152:      return nextStateTbl[n].pbShort;
 13439  2D87  0849               	movf	getNextState@n,w
 13440  2D88  00C3               	movwf	??_getNextState
 13441  2D89  01C4               	clrf	??_getNextState+1
 13442  2D8A  0843               	movf	??_getNextState,w
 13443  2D8B  00B5               	movwf	___wmul@multiplier
 13444  2D8C  0844               	movf	??_getNextState+1,w
 13445  2D8D  00B6               	movwf	___wmul@multiplier+1
 13446  2D8E  3006               	movlw	6
 13447  2D8F  00B7               	movwf	___wmul@multiplicand
 13448  2D90  3000               	movlw	0
 13449  2D91  00B8               	movwf	___wmul@multiplicand+1
 13450  2D92  31BF  270A         	fcall	___wmul
 13451  2D94  0140               	movlb	0	; select bank0
 13452  2D95  0835               	movf	?___wmul,w
 13453  2D96  3E02               	addlw	2
 13454  2D97  00C5               	movwf	??_getNextState+2
 13455  2D98  3000               	movlw	0
 13456  2D99  3D36               	addwfc	?___wmul+1,w
 13457  2D9A  00C6               	movwf	??_getNextState+3
 13458  2D9B  3000               	movlw	low (_nextStateTbl| (0+32768))
 13459  2D9C  0745               	addwf	??_getNextState+2,w
 13460  2D9D  0084               	movwf	4
 13461  2D9E  30B8               	movlw	high (_nextStateTbl| (0+32768))
 13462  2D9F  3D46               	addwfc	??_getNextState+3,w
 13463  2DA0  0085               	movwf	5
 13464  2DA1  0800               	movf	0,w	;code access
 13465  2DA2  0008               	return
 13466  2DA3                     l10757:	
 13467                           ;menuhelper.c: 153:     else if (pb == PB_LONG)
 13468                           
 13469  2DA3  3002               	movlw	2
 13470  2DA4  0641               	xorwf	getNextState@pb,w
 13471  2DA5  1D03               	btfss	3,2
 13472  2DA6  2DC3               	goto	l10765
 13473                           
 13474                           ;menuhelper.c: 154:      return nextStateTbl[n].pbLong;
 13475  2DA7  0849               	movf	getNextState@n,w
 13476  2DA8  00C3               	movwf	??_getNextState
 13477  2DA9  01C4               	clrf	??_getNextState+1
 13478  2DAA  0843               	movf	??_getNextState,w
 13479  2DAB  00B5               	movwf	___wmul@multiplier
 13480  2DAC  0844               	movf	??_getNextState+1,w
 13481  2DAD  00B6               	movwf	___wmul@multiplier+1
 13482  2DAE  3006               	movlw	6
 13483  2DAF  00B7               	movwf	___wmul@multiplicand
 13484  2DB0  3000               	movlw	0
 13485  2DB1  00B8               	movwf	___wmul@multiplicand+1
 13486  2DB2  31BF  270A         	fcall	___wmul
 13487  2DB4  0140               	movlb	0	; select bank0
 13488  2DB5  0835               	movf	?___wmul,w
 13489  2DB6  3E03               	addlw	3
 13490  2DB7  00C5               	movwf	??_getNextState+2
 13491  2DB8  3000               	movlw	0
 13492  2DB9  3D36               	addwfc	?___wmul+1,w
 13493  2DBA  00C6               	movwf	??_getNextState+3
 13494  2DBB  3000               	movlw	low (_nextStateTbl| (0+32768))
 13495  2DBC  0745               	addwf	??_getNextState+2,w
 13496  2DBD  0084               	movwf	4
 13497  2DBE  30B8               	movlw	high (_nextStateTbl| (0+32768))
 13498  2DBF  3D46               	addwfc	??_getNextState+3,w
 13499  2DC0  0085               	movwf	5
 13500  2DC1  0800               	movf	0,w	;code access
 13501  2DC2  0008               	return
 13502  2DC3                     l10765:	
 13503                           ;menuhelper.c: 155:     else
 13504                           
 13505                           
 13506                           ;menuhelper.c: 156:      return nextStateTbl[n].noAction;
 13507  2DC3  0849               	movf	getNextState@n,w
 13508  2DC4  00C3               	movwf	??_getNextState
 13509  2DC5  01C4               	clrf	??_getNextState+1
 13510  2DC6  0843               	movf	??_getNextState,w
 13511  2DC7  00B5               	movwf	___wmul@multiplier
 13512  2DC8  0844               	movf	??_getNextState+1,w
 13513  2DC9  00B6               	movwf	___wmul@multiplier+1
 13514  2DCA  3006               	movlw	6
 13515  2DCB  00B7               	movwf	___wmul@multiplicand
 13516  2DCC  3000               	movlw	0
 13517  2DCD  00B8               	movwf	___wmul@multiplicand+1
 13518  2DCE  31BF  270A         	fcall	___wmul
 13519  2DD0  0140               	movlb	0	; select bank0
 13520  2DD1  0835               	movf	?___wmul,w
 13521  2DD2  3E05               	addlw	5
 13522  2DD3  00C5               	movwf	??_getNextState+2
 13523  2DD4  3000               	movlw	0
 13524  2DD5  3D36               	addwfc	?___wmul+1,w
 13525  2DD6  00C6               	movwf	??_getNextState+3
 13526  2DD7  3000               	movlw	low (_nextStateTbl| (0+32768))
 13527  2DD8  0745               	addwf	??_getNextState+2,w
 13528  2DD9  0084               	movwf	4
 13529  2DDA  30B8               	movlw	high (_nextStateTbl| (0+32768))
 13530  2DDB  3D46               	addwfc	??_getNextState+3,w
 13531  2DDC  0085               	movwf	5
 13532  2DDD  0800               	movf	0,w	;code access
 13533  2DDE  0008               	return
 13534  2DDF                     l10769:	
 13535                           ;menuhelper.c: 158:   }
 13536                           
 13537                           ;menuhelper.c: 157:    }
 13538                           
 13539                           
 13540                           ;menuhelper.c: 159:  }
 13541  2DDF  3001               	movlw	1
 13542  2DE0  00C3               	movwf	??_getNextState
 13543  2DE1  0843               	movf	??_getNextState,w
 13544  2DE2  07C9               	addwf	getNextState@n,f
 13545  2DE3  3012               	movlw	18
 13546  2DE4  0249               	subwf	getNextState@n,w
 13547  2DE5  1C03               	skipc
 13548  2DE6  2D0C               	goto	l10737
 13549  2DE7                     l10773:	
 13550                           
 13551                           ;menuhelper.c: 160:  return -1;
 13552  2DE7  30FF               	movlw	255
 13553  2DE8  0008               	return
 13554  2DE9                     __end_of_getNextState:	
 13555                           
 13556                           	psect	text22
 13557  305D                     __ptext22:	
 13558 ;; *************** function _returnToPage *****************
 13559 ;; Defined at:
 13560 ;;		line 208 in file "menuhelper.c"
 13561 ;; Parameters:    Size  Location     Type
 13562 ;;  page            1    wreg     unsigned char 
 13563 ;; Auto vars:     Size  Location     Type
 13564 ;;  page            1   29[BANK0 ] unsigned char 
 13565 ;;  n               1   30[BANK0 ] unsigned char 
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  1    wreg      void 
 13568 ;; Registers used:
 13569 ;;		wreg, status,2, status,0, pclath, cstack
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13576 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13577 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13578 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13579 ;;Total ram usage:        4 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    6
 13582 ;; This function calls:
 13583 ;;		_OLED_command
 13584 ;;		___wmul
 13585 ;; This function is called by:
 13586 ;;		_statusView
 13587 ;;		_channelView
 13588 ;;		_channelSetup
 13589 ;;		_setOutputPower
 13590 ;;		_setLensDia
 13591 ;;		_setup
 13592 ;;		_setDPOffset
 13593 ;;		_setSkyTemp
 13594 ;;		_setFudgeFactor
 13595 ;; This function uses a non-reentrant model
 13596 ;;
 13597                           
 13598                           
 13599                           ;psect for function _returnToPage
 13600  305D                     _returnToPage:	
 13601                           
 13602                           ;incstack = 0
 13603                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 13604                           ;returnToPage@page stored from wreg
 13605  305D  0140               	movlb	0	; select bank0
 13606  305E  00BD               	movwf	returnToPage@page
 13607                           
 13608                           ;menuhelper.c: 208: void returnToPage(uint8_t page);menuhelper.c: 209: {;menuhelper.c: 2
      +                          10:  uint8_t n;;menuhelper.c: 212:  if (! g_screenRefresh)
 13609  305F  0863               	movf	_g_screenRefresh,w
 13610  3060  1903               	btfsc	3,2
 13611  3061  0008               	return
 13612                           
 13613                           ;menuhelper.c: 214:  OLED_command(0x01);
 13614                           
 13615                           ;menuhelper.c: 213:   return;
 13616  3062  3001               	movlw	1
 13617  3063  31BE  264D  31B0   	fcall	_OLED_command
 13618                           
 13619                           ;menuhelper.c: 215:  OLED_command(0x02);
 13620  3066  3002               	movlw	2
 13621  3067  31BE  264D  31B0   	fcall	_OLED_command
 13622                           
 13623                           ;menuhelper.c: 216:  for(n = 0; n < 12 * page; n++) {
 13624  306A  0140               	movlb	0	; select bank0
 13625  306B  01BE               	clrf	returnToPage@n
 13626  306C                     l10137:	
 13627  306C  083D               	movf	returnToPage@page,w
 13628  306D  00BB               	movwf	??_returnToPage
 13629  306E  01BC               	clrf	??_returnToPage+1
 13630  306F  083B               	movf	??_returnToPage,w
 13631  3070  00B5               	movwf	___wmul@multiplier
 13632  3071  083C               	movf	??_returnToPage+1,w
 13633  3072  00B6               	movwf	___wmul@multiplier+1
 13634  3073  300C               	movlw	12
 13635  3074  00B7               	movwf	___wmul@multiplicand
 13636  3075  3000               	movlw	0
 13637  3076  00B8               	movwf	___wmul@multiplicand+1
 13638  3077  31BF  270A  31B0   	fcall	___wmul
 13639  307A  0140               	movlb	0	; select bank0
 13640  307B  0836               	movf	?___wmul+1,w
 13641  307C  3A80               	xorlw	128
 13642  307D  3C80               	sublw	128
 13643  307E  1D03               	skipz
 13644  307F  2882               	goto	u13205
 13645  3080  0835               	movf	?___wmul,w
 13646  3081  023E               	subwf	returnToPage@n,w
 13647  3082                     u13205:	
 13648  3082  1803               	btfsc	3,0
 13649  3083  0008               	return
 13650                           
 13651                           ;menuhelper.c: 217:   OLED_command(0x10 | 0x08 | 0x00);
 13652  3084  3018               	movlw	24
 13653  3085  31BE  264D  31B0   	fcall	_OLED_command
 13654                           
 13655                           ;menuhelper.c: 218:  }
 13656  3088  3001               	movlw	1
 13657  3089  0140               	movlb	0	; select bank0
 13658  308A  00BB               	movwf	??_returnToPage
 13659  308B  083B               	movf	??_returnToPage,w
 13660  308C  07BE               	addwf	returnToPage@n,f
 13661  308D  286C               	goto	l10137
 13662  308E                     __end_of_returnToPage:	
 13663                           
 13664                           	psect	text23
 13665  3408                     __ptext23:	
 13666 ;; *************** function _paging *****************
 13667 ;; Defined at:
 13668 ;;		line 167 in file "menuhelper.c"
 13669 ;; Parameters:    Size  Location     Type
 13670 ;;  currentPage     1    wreg     unsigned char 
 13671 ;;  lastPage        1   19[BANK0 ] const unsigned char 
 13672 ;; Auto vars:     Size  Location     Type
 13673 ;;  currentPage     1   23[BANK0 ] unsigned char 
 13674 ;;  n               1   24[BANK0 ] unsigned char 
 13675 ;;  dir             1   22[BANK0 ] enum E7862
 13676 ;; Return value:  Size  Location     Type
 13677 ;;                  1    wreg      unsigned char 
 13678 ;; Registers used:
 13679 ;;		wreg, status,2, status,0, pclath, cstack
 13680 ;; Tracked objects:
 13681 ;;		On entry : 0/0
 13682 ;;		On exit  : 0/0
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13685 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13686 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13687 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13688 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13689 ;;Total ram usage:        6 bytes
 13690 ;; Hardware stack levels used:    1
 13691 ;; Hardware stack levels required when called:    6
 13692 ;; This function calls:
 13693 ;;		_OLED_command
 13694 ;;		_getRotDir
 13695 ;; This function is called by:
 13696 ;;		_statusView
 13697 ;;		_channelView
 13698 ;;		_channelSetup
 13699 ;;		_setup
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           
 13704                           ;psect for function _paging
 13705  3408                     _paging:	
 13706                           
 13707                           ;incstack = 0
 13708                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 13709                           ;paging@currentPage stored from wreg
 13710  3408  0140               	movlb	0	; select bank0
 13711  3409  00B7               	movwf	paging@currentPage
 13712                           
 13713                           ;menuhelper.c: 167: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 168: {;menuhelper.c: 169:  uint8_t n;;menuhelper.c: 170:  enum e_direction dir;;me
      +                          nuhelper.c: 174:  PIE0bits.IOCIE = 0;
 13714  340A  014E               	movlb	14	; select bank14
 13715  340B  1216               	bcf	22,4	;volatile
 13716                           
 13717                           ;menuhelper.c: 176:  dir = getRotDir();
 13718  340C  31BE  2676  31B4   	fcall	_getRotDir
 13719  340F  0140               	movlb	0	; select bank0
 13720  3410  00B4               	movwf	??_paging
 13721  3411  0834               	movf	??_paging,w
 13722  3412  00B6               	movwf	paging@dir
 13723                           
 13724                           ;menuhelper.c: 181:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 13725  3413  0336               	decf	paging@dir,w
 13726  3414  1D03               	btfss	3,2
 13727  3415  2C43               	goto	l10235
 13728  3416  0833               	movf	paging@lastPage,w
 13729  3417  3EFF               	addlw	255
 13730  3418  00B4               	movwf	??_paging
 13731  3419  30FF               	movlw	255
 13732  341A  1803               	skipnc
 13733  341B  3000               	movlw	0
 13734  341C  00B5               	movwf	??_paging+1
 13735  341D  0835               	movf	??_paging+1,w
 13736  341E  3A80               	xorlw	128
 13737  341F  3C80               	sublw	128
 13738  3420  1D03               	skipz
 13739  3421  2C24               	goto	u13335
 13740  3422  0834               	movf	??_paging,w
 13741  3423  0237               	subwf	paging@currentPage,w
 13742  3424                     u13335:	
 13743  3424  1803               	skipnc
 13744  3425  2C43               	goto	l10235
 13745                           
 13746                           ;menuhelper.c: 182:    currentPage++;
 13747  3426  3001               	movlw	1
 13748  3427  0140               	movlb	0	; select bank0
 13749  3428  00B4               	movwf	??_paging
 13750  3429  0834               	movf	??_paging,w
 13751  342A  07B7               	addwf	paging@currentPage,f
 13752                           
 13753                           ;menuhelper.c: 183:    for(n = 0; n < 12; n++) {
 13754  342B  01B8               	clrf	paging@n
 13755  342C                     L10:	
 13756  342C  300C               	movlw	12
 13757  342D  0238               	subwf	paging@n,w
 13758  342E  1803               	btfsc	3,0
 13759  342F  2C68               	goto	l635
 13760                           
 13761                           ;menuhelper.c: 184:     OLED_command(0x10 | 0x08 | 0x00);
 13762  3430  3018               	movlw	24
 13763  3431  31BE  264D  31B4   	fcall	_OLED_command
 13764                           
 13765                           ;menuhelper.c: 185:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13766  3434  301A               	movlw	26
 13767  3435  0140               	movlb	0	; select bank0
 13768  3436  00B4               	movwf	??_paging
 13769  3437  30F8               	movlw	248
 13770  3438                     u14897:	
 13771  3438  0B89               	decfsz	9,f
 13772  3439  2C38               	goto	u14897
 13773  343A  0BB4               	decfsz	??_paging,f
 13774  343B  2C38               	goto	u14897
 13775  343C  0000               	nop
 13776                           
 13777                           ;menuhelper.c: 186:    }
 13778  343D  3001               	movlw	1
 13779  343E  0140               	movlb	0	; select bank0
 13780  343F  00B4               	movwf	??_paging
 13781  3440  0834               	movf	??_paging,w
 13782  3441  07B8               	addwf	paging@n,f
 13783  3442  2C2C               	goto	L10
 13784  3443                     l10235:	
 13785                           ;menuhelper.c: 189:   else if ((dir == ROT_CCW) && (currentPage > 0)) {
 13786                           
 13787                           ;menuhelper.c: 187:   }
 13788                           
 13789  3443  3002               	movlw	2
 13790  3444  0140               	movlb	0	; select bank0
 13791  3445  0636               	xorwf	paging@dir,w
 13792  3446  1D03               	btfss	3,2
 13793  3447  2C68               	goto	l635
 13794  3448  0837               	movf	paging@currentPage,w
 13795  3449  1903               	btfsc	3,2
 13796  344A  2C68               	goto	l635
 13797                           
 13798                           ;menuhelper.c: 190:    currentPage--;
 13799  344B  3001               	movlw	1
 13800  344C  02B7               	subwf	paging@currentPage,f
 13801                           
 13802                           ;menuhelper.c: 191:    for(n = 0; n < 12; n++) {
 13803  344D  01B8               	clrf	paging@n
 13804  344E  300C               	movlw	12
 13805  344F  0238               	subwf	paging@n,w
 13806  3450  1803               	btfsc	3,0
 13807  3451  2C68               	goto	l635
 13808  3452                     l10247:	
 13809                           
 13810                           ;menuhelper.c: 192:     OLED_command(0x10 | 0x08 | 0x04);;
 13811  3452  301C               	movlw	28
 13812  3453  31BE  264D  31B4   	fcall	_OLED_command
 13813                           
 13814                           ;menuhelper.c: 193:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13815  3456  301A               	movlw	26
 13816  3457  0140               	movlb	0	; select bank0
 13817  3458  00B4               	movwf	??_paging
 13818  3459  30F8               	movlw	248
 13819  345A                     u14907:	
 13820  345A  0B89               	decfsz	9,f
 13821  345B  2C5A               	goto	u14907
 13822  345C  0BB4               	decfsz	??_paging,f
 13823  345D  2C5A               	goto	u14907
 13824  345E  0000               	nop
 13825                           
 13826                           ;menuhelper.c: 194:    }
 13827  345F  3001               	movlw	1
 13828  3460  0140               	movlb	0	; select bank0
 13829  3461  00B4               	movwf	??_paging
 13830  3462  0834               	movf	??_paging,w
 13831  3463  07B8               	addwf	paging@n,f
 13832  3464  300C               	movlw	12
 13833  3465  0238               	subwf	paging@n,w
 13834  3466  1C03               	skipc
 13835  3467  2C52               	goto	l10247
 13836  3468                     l635:	
 13837                           ;menuhelper.c: 195:   }
 13838                           
 13839                           
 13840                           ;menuhelper.c: 199:  PIE0bits.IOCIE = 1;
 13841  3468  014E               	movlb	14	; select bank14
 13842  3469  1616               	bsf	22,4	;volatile
 13843                           
 13844                           ;menuhelper.c: 201:  return currentPage;
 13845  346A  0140               	movlb	0	; select bank0
 13846  346B  0837               	movf	paging@currentPage,w
 13847  346C  0008               	return
 13848  346D                     __end_of_paging:	
 13849                           
 13850                           	psect	text24
 13851  3E76                     __ptext24:	
 13852 ;; *************** function _getRotDir *****************
 13853 ;; Defined at:
 13854 ;;		line 79 in file "inputs.c"
 13855 ;; Parameters:    Size  Location     Type
 13856 ;;		None
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;  ret             1   13[BANK0 ] enum E7851
 13859 ;; Return value:  Size  Location     Type
 13860 ;;                  1    wreg      enum E7851
 13861 ;; Registers used:
 13862 ;;		wreg, status,2
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13872 ;;Total ram usage:        2 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; Hardware stack levels required when called:    3
 13875 ;; This function calls:
 13876 ;;		Nothing
 13877 ;; This function is called by:
 13878 ;;		_spinInput
 13879 ;;		_paging
 13880 ;; This function uses a non-reentrant model
 13881 ;;
 13882                           
 13883                           
 13884                           ;psect for function _getRotDir
 13885  3E76                     _getRotDir:	
 13886                           
 13887                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 13888                           
 13889                           ;incstack = 0
 13890                           ; Regs used in _getRotDir: [wreg+status,2]
 13891  3E76  0142               	movlb	2	; select bank2
 13892  3E77  086C               	movf	_rotDir^(0+256),w	;volatile
 13893  3E78  0140               	movlb	0	; select bank0
 13894  3E79  00AC               	movwf	??_getRotDir
 13895  3E7A  082C               	movf	??_getRotDir,w
 13896  3E7B  00AD               	movwf	getRotDir@ret
 13897                           
 13898                           ;inputs.c: 82:  rotDir = ROT_STOP;
 13899  3E7C  0142               	movlb	2	; select bank2
 13900  3E7D  01EC               	clrf	_rotDir^(0+256)	;volatile
 13901                           
 13902                           ;inputs.c: 83:  return ret;
 13903  3E7E  0140               	movlb	0	; select bank0
 13904  3E7F  082D               	movf	getRotDir@ret,w
 13905  3E80  0008               	return
 13906  3E81                     __end_of_getRotDir:	
 13907                           
 13908                           	psect	text25
 13909  33B6                     __ptext25:	
 13910 ;; *************** function _itoa *****************
 13911 ;; Defined at:
 13912 ;;		line 47 in file "common.c"
 13913 ;; Parameters:    Size  Location     Type
 13914 ;;  str             1    wreg     PTR unsigned char 
 13915 ;;		 -> str(10), 
 13916 ;;  value           1   21[BANK0 ] unsigned char 
 13917 ;;  width           1   22[BANK0 ] unsigned char 
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;  str             1   27[BANK0 ] PTR unsigned char 
 13920 ;;		 -> str(10), 
 13921 ;; Return value:  Size  Location     Type
 13922 ;;                  1    wreg      void 
 13923 ;; Registers used:
 13924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13925 ;; Tracked objects:
 13926 ;;		On entry : 0/0
 13927 ;;		On exit  : 0/0
 13928 ;;		Unchanged: 0/0
 13929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13930 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13932 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13933 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13934 ;;Total ram usage:        7 bytes
 13935 ;; Hardware stack levels used:    1
 13936 ;; Hardware stack levels required when called:    4
 13937 ;; This function calls:
 13938 ;;		___awdiv
 13939 ;;		___awmod
 13940 ;; This function is called by:
 13941 ;;		_statusView
 13942 ;;		_channelView
 13943 ;;		_channelSetup
 13944 ;;		_setOutputPower
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           
 13949                           ;psect for function _itoa
 13950  33B6                     _itoa:	
 13951                           
 13952                           ;incstack = 0
 13953                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13954                           ;itoa@str stored from wreg
 13955  33B6  0140               	movlb	0	; select bank0
 13956  33B7  00BB               	movwf	itoa@str
 13957                           
 13958                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 13959  33B8  0836               	movf	itoa@width,w
 13960  33B9  073B               	addwf	itoa@str,w
 13961  33BA  00B7               	movwf	??_itoa
 13962  33BB  0837               	movf	??_itoa,w
 13963  33BC  0086               	movwf	6
 13964  33BD  3002               	movlw	2	; select bank4/5
 13965  33BE  0087               	movwf	7
 13966  33BF  0181               	clrf	1
 13967  33C0                     l10203:	
 13968                           ;common.c: 53:  }
 13969                           
 13970                           ;common.c: 50:  while (value && width > 0) {
 13971                           
 13972                           
 13973                           ;common.c: 50:  while (value && width > 0) {
 13974  33C0  0835               	movf	itoa@value,w
 13975  33C1  1903               	btfsc	3,2
 13976  33C2  2C04               	goto	l10209
 13977  33C3  0836               	movf	itoa@width,w
 13978  33C4  1903               	btfsc	3,2
 13979  33C5  2C04               	goto	l10209
 13980                           
 13981                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 13982  33C6  300A               	movlw	10
 13983  33C7  00AC               	movwf	___awmod@divisor
 13984  33C8  3000               	movlw	0
 13985  33C9  00AD               	movwf	___awmod@divisor+1
 13986  33CA  0835               	movf	itoa@value,w
 13987  33CB  00B7               	movwf	??_itoa
 13988  33CC  01B8               	clrf	??_itoa+1
 13989  33CD  0837               	movf	??_itoa,w
 13990  33CE  00AE               	movwf	___awmod@dividend
 13991  33CF  0838               	movf	??_itoa+1,w
 13992  33D0  00AF               	movwf	___awmod@dividend+1
 13993  33D1  31B1  21FE  31B3   	fcall	___awmod
 13994  33D4  0140               	movlb	0	; select bank0
 13995  33D5  082C               	movf	?___awmod,w
 13996  33D6  3E30               	addlw	48
 13997  33D7  00B9               	movwf	??_itoa+2
 13998  33D8  3001               	movlw	1
 13999  33D9  02B6               	subwf	itoa@width,f
 14000  33DA  0836               	movf	itoa@width,w
 14001  33DB  073B               	addwf	itoa@str,w
 14002  33DC  00BA               	movwf	??_itoa+3
 14003  33DD  083A               	movf	??_itoa+3,w
 14004  33DE  0086               	movwf	6
 14005  33DF  3002               	movlw	2	; select bank4/5
 14006  33E0  0087               	movwf	7
 14007  33E1  0839               	movf	??_itoa+2,w
 14008  33E2  0081               	movwf	1
 14009                           
 14010                           ;common.c: 52:   value = value / 10;
 14011  33E3  300A               	movlw	10
 14012  33E4  00AC               	movwf	___awdiv@divisor
 14013  33E5  3000               	movlw	0
 14014  33E6  00AD               	movwf	___awdiv@divisor+1
 14015  33E7  0835               	movf	itoa@value,w
 14016  33E8  00B7               	movwf	??_itoa
 14017  33E9  01B8               	clrf	??_itoa+1
 14018  33EA  0837               	movf	??_itoa,w
 14019  33EB  00AE               	movwf	___awdiv@dividend
 14020  33EC  0838               	movf	??_itoa+1,w
 14021  33ED  00AF               	movwf	___awdiv@dividend+1
 14022  33EE  31B3  2364  31B3   	fcall	___awdiv
 14023  33F1  0140               	movlb	0	; select bank0
 14024  33F2  082C               	movf	?___awdiv,w
 14025  33F3  00B9               	movwf	??_itoa+2
 14026  33F4  0839               	movf	??_itoa+2,w
 14027  33F5  00B5               	movwf	itoa@value
 14028  33F6  2BC0               	goto	l10203
 14029  33F7                     l10207:	
 14030                           ;common.c: 54:  while(width)
 14031                           
 14032                           
 14033                           ;common.c: 55:   str[--width] = ' ';
 14034  33F7  3020               	movlw	32
 14035  33F8  00B7               	movwf	??_itoa
 14036  33F9  3001               	movlw	1
 14037  33FA  02B6               	subwf	itoa@width,f
 14038  33FB  0836               	movf	itoa@width,w
 14039  33FC  073B               	addwf	itoa@str,w
 14040  33FD  00B8               	movwf	??_itoa+1
 14041  33FE  0838               	movf	??_itoa+1,w
 14042  33FF  0086               	movwf	6
 14043  3400  3002               	movlw	2	; select bank4/5
 14044  3401  0087               	movwf	7
 14045  3402  0837               	movf	??_itoa,w
 14046  3403  0081               	movwf	1
 14047  3404                     l10209:	
 14048                           
 14049                           ;common.c: 54:  while(width)
 14050  3404  0836               	movf	itoa@width,w
 14051  3405  1903               	btfsc	3,2
 14052  3406  0008               	return
 14053  3407  2BF7               	goto	l10207
 14054  3408                     __end_of_itoa:	
 14055                           
 14056                           	psect	text26
 14057  20A0                     __ptext26:	
 14058 ;; *************** function _ftoa *****************
 14059 ;; Defined at:
 14060 ;;		line 8 in file "common.c"
 14061 ;; Parameters:    Size  Location     Type
 14062 ;;  str             1    wreg     PTR unsigned char 
 14063 ;;		 -> str(10), 
 14064 ;;  fValue          4   57[BANK1 ] float 
 14065 ;;  width           1   61[BANK1 ] unsigned char 
 14066 ;;  prec            1   62[BANK1 ] unsigned char 
 14067 ;; Auto vars:     Size  Location     Type
 14068 ;;  str             1   70[BANK1 ] PTR unsigned char 
 14069 ;;		 -> str(10), 
 14070 ;;  pos             1   69[BANK1 ] unsigned char 
 14071 ;;  w               1   68[BANK1 ] unsigned char 
 14072 ;;  intValue        1   67[BANK1 ] unsigned char 
 14073 ;;  sign            1   66[BANK1 ] unsigned char 
 14074 ;;  len             1   65[BANK1 ] unsigned char 
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  1    wreg      void 
 14077 ;; Registers used:
 14078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14084 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14085 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14086 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14087 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14088 ;;Total ram usage:       14 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    5
 14091 ;; This function calls:
 14092 ;;		___fladd
 14093 ;;		___fldiv
 14094 ;;		___flge
 14095 ;;		___flmul
 14096 ;;		___flneg
 14097 ;;		___fltol
 14098 ;;		___wmul
 14099 ;;		___xxtofl
 14100 ;; This function is called by:
 14101 ;;		_statusView
 14102 ;;		_channelView
 14103 ;;		_channelSetup
 14104 ;;		_setOutputPower
 14105 ;;		_setLensDia
 14106 ;;		_setup
 14107 ;;		_setDPOffset
 14108 ;;		_setSkyTemp
 14109 ;;		_setFudgeFactor
 14110 ;; This function uses a non-reentrant model
 14111 ;;
 14112                           
 14113                           
 14114                           ;psect for function _ftoa
 14115  20A0                     _ftoa:	
 14116                           
 14117                           ;incstack = 0
 14118                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14119                           ;ftoa@str stored from wreg
 14120  20A0  0141               	movlb	1	; select bank1
 14121  20A1  00E6               	movwf	ftoa@str^(0+128)
 14122                           
 14123                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 14124  20A2  01E1               	clrf	ftoa@len^(0+128)
 14125  20A3  0AE1               	incf	ftoa@len^(0+128),f
 14126                           
 14127                           ;common.c: 11:  uint8_t w = width;
 14128  20A4  085D               	movf	ftoa@width^(0+128),w
 14129  20A5  00DF               	movwf	??_ftoa^(0+128)
 14130  20A6  085F               	movf	??_ftoa^(0+128),w
 14131  20A7  00E4               	movwf	ftoa@w^(0+128)
 14132                           
 14133                           ;common.c: 12:  uint8_t pos = 0;
 14134  20A8  01E5               	clrf	ftoa@pos^(0+128)
 14135                           
 14136                           ;common.c: 13:  uint8_t intValue = 0;
 14137  20A9  01E3               	clrf	ftoa@intValue^(0+128)
 14138                           
 14139                           ;common.c: 14:  uint8_t sign = 0;
 14140  20AA  01E2               	clrf	ftoa@sign^(0+128)
 14141                           
 14142                           ;common.c: 16:  if (fValue < 0) {
 14143  20AB  085C               	movf	(ftoa@fValue+3)^(0+128),w
 14144  20AC  00CC               	movwf	(___flge@ff1+3)^(0+128)
 14145  20AD  085B               	movf	(ftoa@fValue+2)^(0+128),w
 14146  20AE  00CB               	movwf	(___flge@ff1+2)^(0+128)
 14147  20AF  085A               	movf	(ftoa@fValue+1)^(0+128),w
 14148  20B0  00CA               	movwf	(___flge@ff1+1)^(0+128)
 14149  20B1  0859               	movf	ftoa@fValue^(0+128),w
 14150  20B2  00C9               	movwf	___flge@ff1^(0+128)
 14151  20B3  3000               	movlw	0
 14152  20B4  00D0               	movwf	(___flge@ff2+3)^(0+128)
 14153  20B5  3000               	movlw	0
 14154  20B6  00CF               	movwf	(___flge@ff2+2)^(0+128)
 14155  20B7  3000               	movlw	0
 14156  20B8  00CE               	movwf	(___flge@ff2+1)^(0+128)
 14157  20B9  3000               	movlw	0
 14158  20BA  00CD               	movwf	___flge@ff2^(0+128)
 14159  20BB  3198  202D  31A0   	fcall	___flge
 14160  20BE  1803               	btfsc	3,0
 14161  20BF  28F0               	goto	l10161
 14162                           
 14163                           ;common.c: 17:   fValue *= -1;
 14164  20C0  30BF               	movlw	191
 14165  20C1  0140               	movlb	0	; select bank0
 14166  20C2  00CC               	movwf	___flmul@b+3
 14167  20C3  3080               	movlw	128
 14168  20C4  00CB               	movwf	___flmul@b+2
 14169  20C5  3000               	movlw	0
 14170  20C6  00CA               	movwf	___flmul@b+1
 14171  20C7  3000               	movlw	0
 14172  20C8  00C9               	movwf	___flmul@b
 14173  20C9  0141               	movlb	1	; select bank1
 14174  20CA  085C               	movf	(ftoa@fValue+3)^(0+128),w
 14175  20CB  0140               	movlb	0	; select bank0
 14176  20CC  00D0               	movwf	___flmul@a+3
 14177  20CD  0141               	movlb	1	; select bank1
 14178  20CE  085B               	movf	(ftoa@fValue+2)^(0+128),w
 14179  20CF  0140               	movlb	0	; select bank0
 14180  20D0  00CF               	movwf	___flmul@a+2
 14181  20D1  0141               	movlb	1	; select bank1
 14182  20D2  085A               	movf	(ftoa@fValue+1)^(0+128),w
 14183  20D3  0140               	movlb	0	; select bank0
 14184  20D4  00CE               	movwf	___flmul@a+1
 14185  20D5  0141               	movlb	1	; select bank1
 14186  20D6  0859               	movf	ftoa@fValue^(0+128),w
 14187  20D7  0140               	movlb	0	; select bank0
 14188  20D8  00CD               	movwf	___flmul@a
 14189  20D9  3188  20BA  31A0   	fcall	___flmul
 14190  20DC  0140               	movlb	0	; select bank0
 14191  20DD  084C               	movf	?___flmul+3,w
 14192  20DE  0141               	movlb	1	; select bank1
 14193  20DF  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 14194  20E0  0140               	movlb	0	; select bank0
 14195  20E1  084B               	movf	?___flmul+2,w
 14196  20E2  0141               	movlb	1	; select bank1
 14197  20E3  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 14198  20E4  0140               	movlb	0	; select bank0
 14199  20E5  084A               	movf	?___flmul+1,w
 14200  20E6  0141               	movlb	1	; select bank1
 14201  20E7  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 14202  20E8  0140               	movlb	0	; select bank0
 14203  20E9  0849               	movf	?___flmul,w
 14204  20EA  0141               	movlb	1	; select bank1
 14205  20EB  00D9               	movwf	ftoa@fValue^(0+128)
 14206                           
 14207                           ;common.c: 18:   sign = 1;
 14208  20EC  01E2               	clrf	ftoa@sign^(0+128)
 14209  20ED  0AE2               	incf	ftoa@sign^(0+128),f
 14210                           
 14211                           ;common.c: 19:   width--;
 14212  20EE  3001               	movlw	1
 14213  20EF  02DD               	subwf	ftoa@width^(0+128),f
 14214  20F0                     l10161:	
 14215                           ;common.c: 24:  }
 14216                           
 14217                           ;common.c: 21:  while(fValue >= 10.0) {
 14218                           
 14219                           ;common.c: 20:  }
 14220                           
 14221                           
 14222                           ;common.c: 21:  while(fValue >= 10.0) {
 14223  20F0  0141               	movlb	1	; select bank1
 14224  20F1  085C               	movf	(ftoa@fValue+3)^(0+128),w
 14225  20F2  00CC               	movwf	(___flge@ff1+3)^(0+128)
 14226  20F3  085B               	movf	(ftoa@fValue+2)^(0+128),w
 14227  20F4  00CB               	movwf	(___flge@ff1+2)^(0+128)
 14228  20F5  085A               	movf	(ftoa@fValue+1)^(0+128),w
 14229  20F6  00CA               	movwf	(___flge@ff1+1)^(0+128)
 14230  20F7  0859               	movf	ftoa@fValue^(0+128),w
 14231  20F8  00C9               	movwf	___flge@ff1^(0+128)
 14232  20F9  3041               	movlw	65
 14233  20FA  00D0               	movwf	(___flge@ff2+3)^(0+128)
 14234  20FB  3020               	movlw	32
 14235  20FC  00CF               	movwf	(___flge@ff2+2)^(0+128)
 14236  20FD  3000               	movlw	0
 14237  20FE  00CE               	movwf	(___flge@ff2+1)^(0+128)
 14238  20FF  3000               	movlw	0
 14239  2100  00CD               	movwf	___flge@ff2^(0+128)
 14240  2101  3198  202D  31A0   	fcall	___flge
 14241  2104  1C03               	btfss	3,0
 14242  2105  2928               	goto	l10163
 14243                           
 14244                           ;common.c: 22:   fValue /= 10;
 14245  2106  3041               	movlw	65
 14246  2107  0141               	movlb	1	; select bank1
 14247  2108  00B0               	movwf	(___fldiv@a+3)^(0+128)
 14248  2109  3020               	movlw	32
 14249  210A  00AF               	movwf	(___fldiv@a+2)^(0+128)
 14250  210B  3000               	movlw	0
 14251  210C  00AE               	movwf	(___fldiv@a+1)^(0+128)
 14252  210D  3000               	movlw	0
 14253  210E  00AD               	movwf	___fldiv@a^(0+128)
 14254  210F  085C               	movf	(ftoa@fValue+3)^(0+128),w
 14255  2110  00B4               	movwf	(___fldiv@b+3)^(0+128)
 14256  2111  085B               	movf	(ftoa@fValue+2)^(0+128),w
 14257  2112  00B3               	movwf	(___fldiv@b+2)^(0+128)
 14258  2113  085A               	movf	(ftoa@fValue+1)^(0+128),w
 14259  2114  00B2               	movwf	(___fldiv@b+1)^(0+128)
 14260  2115  0859               	movf	ftoa@fValue^(0+128),w
 14261  2116  00B1               	movwf	___fldiv@b^(0+128)
 14262  2117  31A6  266D  31A0   	fcall	___fldiv
 14263  211A  0141               	movlb	1	; select bank1
 14264  211B  0830               	movf	(?___fldiv+3)^(0+128),w
 14265  211C  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 14266  211D  082F               	movf	(?___fldiv+2)^(0+128),w
 14267  211E  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 14268  211F  082E               	movf	(?___fldiv+1)^(0+128),w
 14269  2120  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 14270  2121  082D               	movf	?___fldiv^(0+128),w
 14271  2122  00D9               	movwf	ftoa@fValue^(0+128)
 14272                           
 14273                           ;common.c: 23:   len++;
 14274  2123  3001               	movlw	1
 14275  2124  00DF               	movwf	??_ftoa^(0+128)
 14276  2125  085F               	movf	??_ftoa^(0+128),w
 14277  2126  07E1               	addwf	ftoa@len^(0+128),f
 14278  2127  28F0               	goto	l10161
 14279  2128                     l10163:	
 14280                           
 14281                           ;common.c: 25:  w = len + prec;
 14282  2128  0141               	movlb	1	; select bank1
 14283  2129  0861               	movf	ftoa@len^(0+128),w
 14284  212A  075E               	addwf	ftoa@prec^(0+128),w
 14285  212B  00DF               	movwf	??_ftoa^(0+128)
 14286  212C  085F               	movf	??_ftoa^(0+128),w
 14287  212D  00E4               	movwf	ftoa@w^(0+128)
 14288                           
 14289                           ;common.c: 26:  if (prec == 0)
 14290  212E  085E               	movf	ftoa@prec^(0+128),w
 14291  212F  1D03               	btfss	3,2
 14292  2130  2935               	goto	l10171
 14293                           
 14294                           ;common.c: 27:   width++;
 14295  2131  3001               	movlw	1
 14296  2132  00DF               	movwf	??_ftoa^(0+128)
 14297  2133  085F               	movf	??_ftoa^(0+128),w
 14298  2134  07DD               	addwf	ftoa@width^(0+128),f
 14299  2135                     l10171:	
 14300                           ;common.c: 28:  while(--width > w)
 14301                           
 14302                           
 14303                           ;common.c: 28:  while(--width > w)
 14304  2135  3001               	movlw	1
 14305  2136  02DD               	subwf	ftoa@width^(0+128),f
 14306  2137  085D               	movf	ftoa@width^(0+128),w
 14307  2138  0264               	subwf	ftoa@w^(0+128),w
 14308  2139  1803               	btfsc	3,0
 14309  213A  294B               	goto	l10173
 14310                           
 14311                           ;common.c: 29:   str[pos++] = ' ';
 14312  213B  3020               	movlw	32
 14313  213C  00DF               	movwf	??_ftoa^(0+128)
 14314  213D  0865               	movf	ftoa@pos^(0+128),w
 14315  213E  0766               	addwf	ftoa@str^(0+128),w
 14316  213F  00E0               	movwf	(??_ftoa+1)^(0+128)
 14317  2140  0860               	movf	(??_ftoa+1)^(0+128),w
 14318  2141  0086               	movwf	6
 14319  2142  3002               	movlw	2	; select bank4/5
 14320  2143  0087               	movwf	7
 14321  2144  085F               	movf	??_ftoa^(0+128),w
 14322  2145  0081               	movwf	1
 14323  2146  3001               	movlw	1
 14324  2147  00DF               	movwf	??_ftoa^(0+128)
 14325  2148  085F               	movf	??_ftoa^(0+128),w
 14326  2149  07E5               	addwf	ftoa@pos^(0+128),f
 14327  214A  2935               	goto	l10171
 14328  214B                     l10173:	
 14329                           
 14330                           ;common.c: 30:  if (sign)
 14331  214B  0862               	movf	ftoa@sign^(0+128),w
 14332  214C  1903               	btfsc	3,2
 14333  214D  295D               	goto	l10193
 14334                           
 14335                           ;common.c: 31:   str[pos++] = '-';
 14336  214E  302D               	movlw	45
 14337  214F                     L11:	
 14338  214F  00DF               	movwf	??_ftoa^(0+128)
 14339  2150  0865               	movf	ftoa@pos^(0+128),w
 14340  2151  0766               	addwf	ftoa@str^(0+128),w
 14341  2152  00E0               	movwf	(??_ftoa+1)^(0+128)
 14342  2153  0860               	movf	(??_ftoa+1)^(0+128),w
 14343  2154  0086               	movwf	6
 14344  2155  3002               	movlw	2	; select bank4/5
 14345  2156  0087               	movwf	7
 14346  2157  085F               	movf	??_ftoa^(0+128),w
 14347  2158  0081               	movwf	1
 14348  2159  3001               	movlw	1
 14349  215A  00DF               	movwf	??_ftoa^(0+128)
 14350  215B  085F               	movf	??_ftoa^(0+128),w
 14351  215C  07E5               	addwf	ftoa@pos^(0+128),f
 14352  215D                     l10193:	
 14353                           ;common.c: 39:  }
 14354                           
 14355                           
 14356                           ;common.c: 32:  while(w--) {
 14357  215D  3001               	movlw	1
 14358  215E  02E4               	subwf	ftoa@w^(0+128),f
 14359  215F  0A64               	incf	ftoa@w^(0+128),w
 14360  2160  1903               	btfsc	3,2
 14361  2161  2A00               	goto	l10195
 14362                           
 14363                           ;common.c: 33:   intValue = fValue;
 14364                           
 14365                           ;common.c: 32:  while(w--) {
 14366  2162  085C               	movf	(ftoa@fValue+3)^(0+128),w
 14367  2163  00CC               	movwf	(___fltol@f1+3)^(0+128)
 14368  2164  085B               	movf	(ftoa@fValue+2)^(0+128),w
 14369  2165  00CB               	movwf	(___fltol@f1+2)^(0+128)
 14370  2166  085A               	movf	(ftoa@fValue+1)^(0+128),w
 14371  2167  00CA               	movwf	(___fltol@f1+1)^(0+128)
 14372  2168  0859               	movf	ftoa@fValue^(0+128),w
 14373  2169  00C9               	movwf	___fltol@f1^(0+128)
 14374  216A  31A9  21BA  31A0   	fcall	___fltol
 14375  216D  0141               	movlb	1	; select bank1
 14376  216E  0849               	movf	?___fltol^(0+128),w
 14377  216F  00DF               	movwf	??_ftoa^(0+128)
 14378  2170  085F               	movf	??_ftoa^(0+128),w
 14379  2171  00E3               	movwf	ftoa@intValue^(0+128)
 14380                           
 14381                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 14382  2172  300A               	movlw	10
 14383  2173  0140               	movlb	0	; select bank0
 14384  2174  00B7               	movwf	___wmul@multiplicand
 14385  2175  3000               	movlw	0
 14386  2176  00B8               	movwf	___wmul@multiplicand+1
 14387  2177  0141               	movlb	1	; select bank1
 14388  2178  0863               	movf	ftoa@intValue^(0+128),w
 14389  2179  00DF               	movwf	??_ftoa^(0+128)
 14390  217A  01E0               	clrf	(??_ftoa^(0+128)+1)
 14391  217B  085F               	movf	??_ftoa^(0+128),w
 14392  217C  0140               	movlb	0	; select bank0
 14393  217D  00B5               	movwf	___wmul@multiplier
 14394  217E  0141               	movlb	1	; select bank1
 14395  217F  0860               	movf	(??_ftoa+1)^(0+128),w
 14396  2180  0140               	movlb	0	; select bank0
 14397  2181  00B6               	movwf	___wmul@multiplier+1
 14398  2182  31BF  270A  31A0   	fcall	___wmul
 14399  2185  0140               	movlb	0	; select bank0
 14400  2186  0835               	movf	?___wmul,w
 14401  2187  00BB               	movwf	___xxtofl@val
 14402  2188  0836               	movf	?___wmul+1,w
 14403  2189  00BC               	movwf	___xxtofl@val+1
 14404  218A  0D89               	rlf	9,f
 14405  218B  3B89               	subwfb	9,f
 14406  218C  0989               	comf	9,f
 14407  218D  00BD               	movwf	___xxtofl@val+2
 14408  218E  00BE               	movwf	___xxtofl@val+3
 14409  218F  3001               	movlw	1
 14410  2190  31AA  22D4  31A0   	fcall	___xxtofl
 14411  2193  0140               	movlb	0	; select bank0
 14412  2194  083E               	movf	?___xxtofl+3,w
 14413  2195  0141               	movlb	1	; select bank1
 14414  2196  00B0               	movwf	(___flneg@f1+3)^(0+128)
 14415  2197  0140               	movlb	0	; select bank0
 14416  2198  083D               	movf	?___xxtofl+2,w
 14417  2199  0141               	movlb	1	; select bank1
 14418  219A  00AF               	movwf	(___flneg@f1+2)^(0+128)
 14419  219B  0140               	movlb	0	; select bank0
 14420  219C  083C               	movf	?___xxtofl+1,w
 14421  219D  0141               	movlb	1	; select bank1
 14422  219E  00AE               	movwf	(___flneg@f1+1)^(0+128)
 14423  219F  0140               	movlb	0	; select bank0
 14424  21A0  083B               	movf	?___xxtofl,w
 14425  21A1  0141               	movlb	1	; select bank1
 14426  21A2  00AD               	movwf	___flneg@f1^(0+128)
 14427  21A3  31BE  2657  31A0   	fcall	___flneg
 14428  21A6  0141               	movlb	1	; select bank1
 14429  21A7  0830               	movf	(?___flneg+3)^(0+128),w
 14430  21A8  00B4               	movwf	(___fladd@b+3)^(0+128)
 14431  21A9  082F               	movf	(?___flneg+2)^(0+128),w
 14432  21AA  00B3               	movwf	(___fladd@b+2)^(0+128)
 14433  21AB  082E               	movf	(?___flneg+1)^(0+128),w
 14434  21AC  00B2               	movwf	(___fladd@b+1)^(0+128)
 14435  21AD  082D               	movf	?___flneg^(0+128),w
 14436  21AE  00B1               	movwf	___fladd@b^(0+128)
 14437  21AF  3041               	movlw	65
 14438  21B0  0140               	movlb	0	; select bank0
 14439  21B1  00CC               	movwf	___flmul@b+3
 14440  21B2  3020               	movlw	32
 14441  21B3  00CB               	movwf	___flmul@b+2
 14442  21B4  3000               	movlw	0
 14443  21B5  00CA               	movwf	___flmul@b+1
 14444  21B6  3000               	movlw	0
 14445  21B7  00C9               	movwf	___flmul@b
 14446  21B8  0141               	movlb	1	; select bank1
 14447  21B9  085C               	movf	(ftoa@fValue+3)^(0+128),w
 14448  21BA  0140               	movlb	0	; select bank0
 14449  21BB  00D0               	movwf	___flmul@a+3
 14450  21BC  0141               	movlb	1	; select bank1
 14451  21BD  085B               	movf	(ftoa@fValue+2)^(0+128),w
 14452  21BE  0140               	movlb	0	; select bank0
 14453  21BF  00CF               	movwf	___flmul@a+2
 14454  21C0  0141               	movlb	1	; select bank1
 14455  21C1  085A               	movf	(ftoa@fValue+1)^(0+128),w
 14456  21C2  0140               	movlb	0	; select bank0
 14457  21C3  00CE               	movwf	___flmul@a+1
 14458  21C4  0141               	movlb	1	; select bank1
 14459  21C5  0859               	movf	ftoa@fValue^(0+128),w
 14460  21C6  0140               	movlb	0	; select bank0
 14461  21C7  00CD               	movwf	___flmul@a
 14462  21C8  3188  20BA  31A0   	fcall	___flmul
 14463  21CB  0140               	movlb	0	; select bank0
 14464  21CC  084C               	movf	?___flmul+3,w
 14465  21CD  0141               	movlb	1	; select bank1
 14466  21CE  00B8               	movwf	(___fladd@a+3)^(0+128)
 14467  21CF  0140               	movlb	0	; select bank0
 14468  21D0  084B               	movf	?___flmul+2,w
 14469  21D1  0141               	movlb	1	; select bank1
 14470  21D2  00B7               	movwf	(___fladd@a+2)^(0+128)
 14471  21D3  0140               	movlb	0	; select bank0
 14472  21D4  084A               	movf	?___flmul+1,w
 14473  21D5  0141               	movlb	1	; select bank1
 14474  21D6  00B6               	movwf	(___fladd@a+1)^(0+128)
 14475  21D7  0140               	movlb	0	; select bank0
 14476  21D8  0849               	movf	?___flmul,w
 14477  21D9  0141               	movlb	1	; select bank1
 14478  21DA  00B5               	movwf	___fladd@a^(0+128)
 14479  21DB  319E  2606  31A0   	fcall	___fladd
 14480  21DE  0141               	movlb	1	; select bank1
 14481  21DF  0834               	movf	(?___fladd+3)^(0+128),w
 14482  21E0  00DC               	movwf	(ftoa@fValue+3)^(0+128)
 14483  21E1  0833               	movf	(?___fladd+2)^(0+128),w
 14484  21E2  00DB               	movwf	(ftoa@fValue+2)^(0+128)
 14485  21E3  0832               	movf	(?___fladd+1)^(0+128),w
 14486  21E4  00DA               	movwf	(ftoa@fValue+1)^(0+128)
 14487  21E5  0831               	movf	?___fladd^(0+128),w
 14488  21E6  00D9               	movwf	ftoa@fValue^(0+128)
 14489                           
 14490                           ;common.c: 35:   str[pos++] = intValue + '0';
 14491  21E7  0863               	movf	ftoa@intValue^(0+128),w
 14492  21E8  3E30               	addlw	48
 14493  21E9  00DF               	movwf	??_ftoa^(0+128)
 14494  21EA  0865               	movf	ftoa@pos^(0+128),w
 14495  21EB  0766               	addwf	ftoa@str^(0+128),w
 14496  21EC  00E0               	movwf	(??_ftoa+1)^(0+128)
 14497  21ED  0860               	movf	(??_ftoa+1)^(0+128),w
 14498  21EE  0086               	movwf	6
 14499  21EF  3002               	movlw	2	; select bank4/5
 14500  21F0  0087               	movwf	7
 14501  21F1  085F               	movf	??_ftoa^(0+128),w
 14502  21F2  0081               	movwf	1
 14503  21F3  3001               	movlw	1
 14504  21F4  00DF               	movwf	??_ftoa^(0+128)
 14505  21F5  085F               	movf	??_ftoa^(0+128),w
 14506  21F6  07E5               	addwf	ftoa@pos^(0+128),f
 14507                           
 14508                           ;common.c: 36:   if (w && (w == prec))
 14509  21F7  0864               	movf	ftoa@w^(0+128),w
 14510  21F8  1903               	btfsc	3,2
 14511  21F9  295D               	goto	l10193
 14512  21FA  0864               	movf	ftoa@w^(0+128),w
 14513  21FB  065E               	xorwf	ftoa@prec^(0+128),w
 14514  21FC  1D03               	skipz
 14515  21FD  295D               	goto	l10193
 14516                           
 14517                           ;common.c: 37:    str[pos++] = '.';
 14518  21FE  302E               	movlw	46
 14519  21FF  294F               	goto	L11
 14520  2200                     l10195:	
 14521                           
 14522                           ;common.c: 40:  str[pos] = '\0';
 14523  2200  0865               	movf	ftoa@pos^(0+128),w
 14524  2201  0766               	addwf	ftoa@str^(0+128),w
 14525  2202  00DF               	movwf	??_ftoa^(0+128)
 14526  2203  085F               	movf	??_ftoa^(0+128),w
 14527  2204  0086               	movwf	6
 14528  2205  3002               	movlw	2	; select bank4/5
 14529  2206  0087               	movwf	7
 14530  2207  0181               	clrf	1
 14531  2208  0008               	return
 14532  2209                     __end_of_ftoa:	
 14533                           
 14534                           	psect	text27
 14535  308E                     __ptext27:	
 14536 ;; *************** function _OLED_print_xy *****************
 14537 ;; Defined at:
 14538 ;;		line 152 in file "oled.c"
 14539 ;; Parameters:    Size  Location     Type
 14540 ;;  col             1    wreg     unsigned char 
 14541 ;;  row             1   19[BANK0 ] unsigned char 
 14542 ;;  s               2   20[BANK0 ] PTR unsigned char 
 14543 ;;		 -> STR_87(13), STR_86(13), STR_85(13), STR_84(13), 
 14544 ;;		 -> STR_83(13), STR_82(13), STR_81(13), STR_80(13), 
 14545 ;;		 -> STR_79(13), STR_78(13), STR_77(13), STR_76(13), 
 14546 ;;		 -> STR_75(13), STR_74(13), STR_73(13), STR_72(13), 
 14547 ;;		 -> STR_71(13), STR_70(13), STR_69(13), STR_68(13), 
 14548 ;;		 -> STR_67(13), STR_66(13), STR_65(13), STR_64(13), 
 14549 ;;		 -> STR_63(13), STR_62(13), STR_61(9), STR_60(2), 
 14550 ;;		 -> STR_59(13), STR_58(9), STR_57(2), STR_56(13), 
 14551 ;;		 -> STR_55(3), STR_54(7), STR_53(13), STR_52(10), 
 14552 ;;		 -> STR_51(10), STR_50(3), STR_49(7), STR_48(37), 
 14553 ;;		 -> STR_47(8), STR_46(2), STR_45(13), STR_44(13), 
 14554 ;;		 -> STR_43(13), STR_42(8), STR_41(2), STR_40(7), 
 14555 ;;		 -> STR_39(6), STR_38(7), STR_37(6), STR_36(13), 
 14556 ;;		 -> STR_35(8), STR_34(13), STR_33(13), STR_32(13), 
 14557 ;;		 -> STR_31(13), STR_30(13), STR_29(13), STR_28(13), 
 14558 ;;		 -> STR_27(9), STR_26(8), STR_25(5), STR_24(8), 
 14559 ;;		 -> STR_23(5), STR_22(13), STR_21(13), STR_20(13), 
 14560 ;;		 -> STR_19(13), STR_18(13), STR_17(9), STR_16(3), 
 14561 ;;		 -> STR_15(3), STR_14(13), STR_13(13), STR_12(3), 
 14562 ;;		 -> STR_11(3), STR_10(4), STR_9(2), STR_8(4), 
 14563 ;;		 -> STR_7(8), STR_6(7), STR_5(8), STR_4(2), 
 14564 ;;		 -> STR_3(4), str(10), STR_2(8), STR_1(57), 
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;  col             1   27[BANK0 ] unsigned char 
 14567 ;;  row_offsets     4   23[BANK0 ] unsigned char [4]
 14568 ;; Return value:  Size  Location     Type
 14569 ;;                  1    wreg      void 
 14570 ;; Registers used:
 14571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14572 ;; Tracked objects:
 14573 ;;		On entry : 0/0
 14574 ;;		On exit  : 0/0
 14575 ;;		Unchanged: 0/0
 14576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14577 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14578 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14580 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14581 ;;Total ram usage:        9 bytes
 14582 ;; Hardware stack levels used:    1
 14583 ;; Hardware stack levels required when called:    6
 14584 ;; This function calls:
 14585 ;;		_OLED_command
 14586 ;;		_OLED_write
 14587 ;; This function is called by:
 14588 ;;		_statusView
 14589 ;;		_channelView
 14590 ;;		_channelSetup
 14591 ;;		_setOutputPower
 14592 ;;		_setLensDia
 14593 ;;		_setup
 14594 ;;		_setDPOffset
 14595 ;;		_setSkyTemp
 14596 ;;		_setFudgeFactor
 14597 ;;		_viewErrorMessage
 14598 ;; This function uses a non-reentrant model
 14599 ;;
 14600                           
 14601                           
 14602                           ;psect for function _OLED_print_xy
 14603  308E                     _OLED_print_xy:	
 14604                           
 14605                           ;incstack = 0
 14606                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14607                           ;OLED_print_xy@col stored from wreg
 14608  308E  0140               	movlb	0	; select bank0
 14609  308F  00BB               	movwf	OLED_print_xy@col
 14610                           
 14611                           ;oled.c: 152: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 153: {;oled.
      +                          c: 154:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 14612  3090  0144               	movlb	4	; select bank4
 14613  3091  085F               	movf	(OLED_print_xy@F7898+3)^(0+512),w
 14614  3092  0140               	movlb	0	; select bank0
 14615  3093  00BA               	movwf	OLED_print_xy@row_offsets+3
 14616  3094  0144               	movlb	4	; select bank4
 14617  3095  085E               	movf	(OLED_print_xy@F7898+2)^(0+512),w
 14618  3096  0140               	movlb	0	; select bank0
 14619  3097  00B9               	movwf	OLED_print_xy@row_offsets+2
 14620  3098  0144               	movlb	4	; select bank4
 14621  3099  085D               	movf	(OLED_print_xy@F7898+1)^(0+512),w
 14622  309A  0140               	movlb	0	; select bank0
 14623  309B  00B8               	movwf	OLED_print_xy@row_offsets+1
 14624  309C  0144               	movlb	4	; select bank4
 14625  309D  085C               	movf	OLED_print_xy@F7898^(0+512),w
 14626  309E  0140               	movlb	0	; select bank0
 14627  309F  00B7               	movwf	OLED_print_xy@row_offsets
 14628                           
 14629                           ;oled.c: 156:  OLED_command(0x80 | (col + row_offsets[row]));
 14630  30A0  0833               	movf	OLED_print_xy@row,w
 14631  30A1  3E37               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 14632  30A2  0086               	movwf	6
 14633  30A3  0187               	clrf	7
 14634  30A4  0801               	movf	1,w
 14635  30A5  073B               	addwf	OLED_print_xy@col,w
 14636  30A6  3880               	iorlw	128
 14637  30A7  31BE  264D  31B0   	fcall	_OLED_command
 14638  30AA                     l10099:	
 14639                           ;oled.c: 159:  }
 14640                           
 14641                           ;oled.c: 157:  while (*s != (char) ((void*)0)) {
 14642                           
 14643                           
 14644                           ;oled.c: 157:  while (*s != (char) ((void*)0)) {
 14645  30AA  0140               	movlb	0	; select bank0
 14646  30AB  0834               	movf	OLED_print_xy@s,w
 14647  30AC  0084               	movwf	4
 14648  30AD  0835               	movf	OLED_print_xy@s+1,w
 14649  30AE  0085               	movwf	5
 14650  30AF  0012               	moviw fsr0++
 14651  30B0  1903               	btfsc	3,2
 14652  30B1  0008               	return
 14653                           
 14654                           ;oled.c: 158:   OLED_write(*s++);
 14655  30B2  0140               	movlb	0	; select bank0
 14656  30B3  0834               	movf	OLED_print_xy@s,w
 14657  30B4  0084               	movwf	4
 14658  30B5  0835               	movf	OLED_print_xy@s+1,w
 14659  30B6  0085               	movwf	5
 14660  30B7  0800               	movf	0,w	;code access
 14661  30B8  31BE  266B  31B0   	fcall	_OLED_write
 14662  30BB  3001               	movlw	1
 14663  30BC  0140               	movlb	0	; select bank0
 14664  30BD  07B4               	addwf	OLED_print_xy@s,f
 14665  30BE  3000               	movlw	0
 14666  30BF  3DB5               	addwfc	OLED_print_xy@s+1,f
 14667  30C0  28AA               	goto	l10099
 14668  30C1                     __end_of_OLED_print_xy:	
 14669                           
 14670                           	psect	text28
 14671  331B                     __ptext28:	
 14672 ;; *************** function _initialize *****************
 14673 ;; Defined at:
 14674 ;;		line 149 in file "main.c"
 14675 ;; Parameters:    Size  Location     Type
 14676 ;;		None
 14677 ;; Auto vars:     Size  Location     Type
 14678 ;;		None
 14679 ;; Return value:  Size  Location     Type
 14680 ;;                  1    wreg      void 
 14681 ;; Registers used:
 14682 ;;		wreg, status,2, status,0
 14683 ;; Tracked objects:
 14684 ;;		On entry : 0/0
 14685 ;;		On exit  : 0/0
 14686 ;;		Unchanged: 0/0
 14687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14692 ;;Total ram usage:        0 bytes
 14693 ;; Hardware stack levels used:    1
 14694 ;; Hardware stack levels required when called:    3
 14695 ;; This function calls:
 14696 ;;		Nothing
 14697 ;; This function is called by:
 14698 ;;		_main
 14699 ;; This function uses a non-reentrant model
 14700 ;;
 14701                           
 14702                           
 14703                           ;psect for function _initialize
 14704  331B                     _initialize:	
 14705                           
 14706                           ;main.c: 151:  OSCFRQ = 0b00000010;
 14707                           
 14708                           ;incstack = 0
 14709                           ; Regs used in _initialize: [wreg+status,2+status,0]
 14710  331B  3002               	movlw	2
 14711  331C  0151               	movlb	17	; select bank17
 14712  331D  0093               	movwf	19	;volatile
 14713                           
 14714                           ;main.c: 152:  OSCCON1 = 0b01100000;
 14715  331E  3060               	movlw	96
 14716  331F  008D               	movwf	13	;volatile
 14717  3320                     l147:	
 14718                           ;main.c: 153:  while (!OSCCON3bits.ORDY);
 14719                           
 14720  3320  1E0F               	btfss	15,4	;volatile
 14721  3321  2B20               	goto	l147
 14722                           
 14723                           ;main.c: 156:  RX1DTPPSbits.RX1DTPPS = 0x17;
 14724  3322  017D               	movlb	61	; select bank61
 14725  3323  084B               	movf	75,w	;volatile
 14726  3324  39C0               	andlw	-64
 14727  3325  3817               	iorlw	23
 14728  3326  00CB               	movwf	75	;volatile
 14729                           
 14730                           ;main.c: 157:  RC6PPS = 0x0F;
 14731  3327  300F               	movlw	15
 14732  3328  017E               	movlb	62	; select bank62
 14733  3329  00A6               	movwf	38	;volatile
 14734                           
 14735                           ;main.c: 160:  ANSELA = 0b01000000;
 14736  332A  3040               	movlw	64
 14737  332B  00B8               	movwf	56	;volatile
 14738                           
 14739                           ;main.c: 161:  ANSELB = 0b00000000;
 14740  332C  01C3               	clrf	67	;volatile
 14741                           
 14742                           ;main.c: 162:  ANSELC = 0b00000011;
 14743  332D  3003               	movlw	3
 14744  332E  00CE               	movwf	78	;volatile
 14745                           
 14746                           ;main.c: 165:  TRISA = 0b11110000;
 14747  332F  30F0               	movlw	240
 14748  3330  0140               	movlb	0	; select bank0
 14749  3331  0092               	movwf	18	;volatile
 14750                           
 14751                           ;main.c: 166:  TRISB = 0b00000000;
 14752  3332  0193               	clrf	19	;volatile
 14753                           
 14754                           ;main.c: 167:  TRISC = 0b10000111;
 14755  3333  3087               	movlw	135
 14756  3334  0094               	movwf	20	;volatile
 14757                           
 14758                           ;main.c: 168:  LATA = 0;
 14759  3335  0198               	clrf	24	;volatile
 14760                           
 14761                           ;main.c: 171:  ADCON0bits.ADON = 1;
 14762  3336  0141               	movlb	1	; select bank1
 14763  3337  141D               	bsf	29,0	;volatile
 14764                           
 14765                           ;main.c: 172:  ADCON1 = 0b11100000;
 14766  3338  30E0               	movlw	224
 14767  3339  009E               	movwf	30	;volatile
 14768                           
 14769                           ;main.c: 175:  T0CON0 = 0b10000000;
 14770  333A  3080               	movlw	128
 14771  333B  014B               	movlb	11	; select bank11
 14772  333C  009E               	movwf	30	;volatile
 14773                           
 14774                           ;main.c: 176:  T0CON1 = 0b01000111;
 14775  333D  3047               	movlw	71
 14776  333E  009F               	movwf	31	;volatile
 14777                           
 14778                           ;main.c: 177:  TMR0 = 178;
 14779  333F  30B2               	movlw	178
 14780  3340  009C               	movwf	28	;volatile
 14781                           
 14782                           ;main.c: 180:  T1CON = 0b00110011;
 14783  3341  3033               	movlw	51
 14784  3342  0144               	movlb	4	; select bank4
 14785  3343  008E               	movwf	14	;volatile
 14786                           
 14787                           ;main.c: 181:  T1CLK = 0b00000001;
 14788  3344  3001               	movlw	1
 14789  3345  0091               	movwf	17	;volatile
 14790                           
 14791                           ;main.c: 182:  TMR1 = 53035;
 14792  3346  30CF               	movlw	207
 14793  3347  008D               	movwf	13	;volatile
 14794  3348  302B               	movlw	43
 14795  3349  008C               	movwf	12	;volatile
 14796                           
 14797                           ;main.c: 185:  PIE0 = 0b00110000;
 14798  334A  3030               	movlw	48
 14799  334B  014E               	movlb	14	; select bank14
 14800  334C  0096               	movwf	22	;volatile
 14801                           
 14802                           ;main.c: 186:  PIE3 = 0b00100000;
 14803  334D  3020               	movlw	32
 14804  334E  0099               	movwf	25	;volatile
 14805                           
 14806                           ;main.c: 187:  PIE4 = 0b00000001;
 14807  334F  3001               	movlw	1
 14808  3350  009A               	movwf	26	;volatile
 14809                           
 14810                           ;main.c: 188:  INTCON = 0b11000000;
 14811  3351  30C0               	movlw	192
 14812  3352  008B               	movwf	11	;volatile
 14813                           
 14814                           ;main.c: 191:  IOCAP = 0b10110000;
 14815  3353  30B0               	movlw	176
 14816  3354  017E               	movlb	62	; select bank62
 14817  3355  00BD               	movwf	61	;volatile
 14818                           
 14819                           ;main.c: 192:  IOCAN = 0b10110000;
 14820  3356  30B0               	movlw	176
 14821  3357  00BE               	movwf	62	;volatile
 14822                           
 14823                           ;main.c: 193:  IOCCN = 0b00000100;
 14824  3358  3004               	movlw	4
 14825  3359  00D4               	movwf	84	;volatile
 14826                           
 14827                           ;main.c: 197:  BAUD1CON = 0b00001000;
 14828  335A  3008               	movlw	8
 14829  335B  0142               	movlb	2	; select bank2
 14830  335C  009F               	movwf	31	;volatile
 14831                           
 14832                           ;main.c: 198:  SPBRGL = 25;
 14833  335D  3019               	movlw	25
 14834  335E  009B               	movwf	27	;volatile
 14835                           
 14836                           ;main.c: 199:  RC1STA = 0b10010000;
 14837  335F  3090               	movlw	144
 14838  3360  009D               	movwf	29	;volatile
 14839                           
 14840                           ;main.c: 200:  TX1STA = 0b00100000;
 14841  3361  3020               	movlw	32
 14842  3362  009E               	movwf	30	;volatile
 14843  3363  0008               	return
 14844  3364                     __end_of_initialize:	
 14845                           
 14846                           	psect	text29
 14847  2EF2                     __ptext29:	
 14848 ;; *************** function _initGlobalData *****************
 14849 ;; Defined at:
 14850 ;;		line 115 in file "main.c"
 14851 ;; Parameters:    Size  Location     Type
 14852 ;;		None
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  heater          2   32[BANK0 ] PTR struct .
 14855 ;;		 -> data.heater(124), data(166), 
 14856 ;;  n               1   31[BANK0 ] unsigned char 
 14857 ;; Return value:  Size  Location     Type
 14858 ;;                  1    wreg      void 
 14859 ;; Registers used:
 14860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14861 ;; Tracked objects:
 14862 ;;		On entry : 0/0
 14863 ;;		On exit  : 0/0
 14864 ;;		Unchanged: 0/0
 14865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14867 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14868 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14869 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14870 ;;Total ram usage:        7 bytes
 14871 ;; Hardware stack levels used:    1
 14872 ;; Hardware stack levels required when called:    4
 14873 ;; This function calls:
 14874 ;;		___wmul
 14875 ;; This function is called by:
 14876 ;;		_main
 14877 ;; This function uses a non-reentrant model
 14878 ;;
 14879                           
 14880                           
 14881                           ;psect for function _initGlobalData
 14882  2EF2                     _initGlobalData:	
 14883                           
 14884                           ;main.c: 117:  uint8_t n;;main.c: 118:  t_heater *heater;;main.c: 120:  data.tempC = 0;
 14885                           
 14886                           ;incstack = 0
 14887                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14888  2EF2  304A               	movlw	74
 14889  2EF3  0086               	movwf	6
 14890  2EF4  3027               	movlw	39
 14891  2EF5  0087               	movwf	7
 14892  2EF6  3000               	movlw	0
 14893  2EF7  3FC0               	movwi [0]fsr1
 14894  2EF8  3000               	movlw	0
 14895  2EF9  3FC1               	movwi [1]fsr1
 14896  2EFA  3000               	movlw	0
 14897  2EFB  3FC2               	movwi [2]fsr1
 14898  2EFC  3000               	movlw	0
 14899  2EFD  3FC3               	movwi [3]fsr1
 14900                           
 14901                           ;main.c: 121:  data.relHum = 0;
 14902  2EFE  304A               	movlw	74
 14903  2EFF  0086               	movwf	6
 14904  2F00  3027               	movlw	39
 14905  2F01  0087               	movwf	7
 14906  2F02  3144               	addfsr 1,4
 14907  2F03  3000               	movlw	0
 14908  2F04  3FC0               	movwi [0]fsr1
 14909  2F05  3000               	movlw	0
 14910  2F06  3FC1               	movwi [1]fsr1
 14911  2F07  3000               	movlw	0
 14912  2F08  3FC2               	movwi [2]fsr1
 14913  2F09  3000               	movlw	0
 14914  2F0A  3FC3               	movwi [3]fsr1
 14915                           
 14916                           ;main.c: 122:  data.dewPointC = 0;
 14917  2F0B  304A               	movlw	74
 14918  2F0C  0086               	movwf	6
 14919  2F0D  3027               	movlw	39
 14920  2F0E  0087               	movwf	7
 14921  2F0F  3148               	addfsr 1,8
 14922  2F10  3000               	movlw	0
 14923  2F11  3FC0               	movwi [0]fsr1
 14924  2F12  3000               	movlw	0
 14925  2F13  3FC1               	movwi [1]fsr1
 14926  2F14  3000               	movlw	0
 14927  2F15  3FC2               	movwi [2]fsr1
 14928  2F16  3000               	movlw	0
 14929  2F17  3FC3               	movwi [3]fsr1
 14930                           
 14931                           ;main.c: 123:  data.sensorVersion = 0;
 14932  2F18  304A               	movlw	74
 14933  2F19  0086               	movwf	6
 14934  2F1A  3027               	movlw	39
 14935  2F1B  0087               	movwf	7
 14936  2F1C  314C               	addfsr 1,12
 14937  2F1D  0181               	clrf	1
 14938                           
 14939                           ;main.c: 124:  data.tempAux = 0;
 14940  2F1E  304A               	movlw	74
 14941  2F1F  0086               	movwf	6
 14942  2F20  3027               	movlw	39
 14943  2F21  0087               	movwf	7
 14944  2F22  314D               	addfsr 1,13
 14945  2F23  3000               	movlw	0
 14946  2F24  3FC0               	movwi [0]fsr1
 14947  2F25  3000               	movlw	0
 14948  2F26  3FC1               	movwi [1]fsr1
 14949  2F27  3000               	movlw	0
 14950  2F28  3FC2               	movwi [2]fsr1
 14951  2F29  3000               	movlw	0
 14952  2F2A  3FC3               	movwi [3]fsr1
 14953                           
 14954                           ;main.c: 125:  data.voltage = 0;
 14955  2F2B  304A               	movlw	74
 14956  2F2C  0086               	movwf	6
 14957  2F2D  3027               	movlw	39
 14958  2F2E  0087               	movwf	7
 14959  2F2F  3151               	addfsr 1,17
 14960  2F30  3000               	movlw	0
 14961  2F31  3FC0               	movwi [0]fsr1
 14962  2F32  3000               	movlw	0
 14963  2F33  3FC1               	movwi [1]fsr1
 14964  2F34  3000               	movlw	0
 14965  2F35  3FC2               	movwi [2]fsr1
 14966  2F36  3000               	movlw	0
 14967  2F37  3FC3               	movwi [3]fsr1
 14968                           
 14969                           ;main.c: 126:  data.current = 0;
 14970  2F38  304A               	movlw	74
 14971  2F39  0086               	movwf	6
 14972  2F3A  3027               	movlw	39
 14973  2F3B  0087               	movwf	7
 14974  2F3C  3155               	addfsr 1,21
 14975  2F3D  3000               	movlw	0
 14976  2F3E  3FC0               	movwi [0]fsr1
 14977  2F3F  3000               	movlw	0
 14978  2F40  3FC1               	movwi [1]fsr1
 14979  2F41  3000               	movlw	0
 14980  2F42  3FC2               	movwi [2]fsr1
 14981  2F43  3000               	movlw	0
 14982  2F44  3FC3               	movwi [3]fsr1
 14983                           
 14984                           ;main.c: 127:  data.power = 0;
 14985  2F45  304A               	movlw	74
 14986  2F46  0086               	movwf	6
 14987  2F47  3027               	movlw	39
 14988  2F48  0087               	movwf	7
 14989  2F49  3159               	addfsr 1,25
 14990  2F4A  3000               	movlw	0
 14991  2F4B  3FC0               	movwi [0]fsr1
 14992  2F4C  3000               	movlw	0
 14993  2F4D  3FC1               	movwi [1]fsr1
 14994  2F4E  3000               	movlw	0
 14995  2F4F  3FC2               	movwi [2]fsr1
 14996  2F50  3000               	movlw	0
 14997  2F51  3FC3               	movwi [3]fsr1
 14998                           
 14999                           ;main.c: 128:  data.dpOffset = 3.0;
 15000  2F52  304A               	movlw	74
 15001  2F53  0086               	movwf	6
 15002  2F54  3027               	movlw	39
 15003  2F55  0087               	movwf	7
 15004  2F56  315D               	addfsr 1,29
 15005  2F57  3000               	movlw	0
 15006  2F58  3FC0               	movwi [0]fsr1
 15007  2F59  3000               	movlw	0
 15008  2F5A  3FC1               	movwi [1]fsr1
 15009  2F5B  3040               	movlw	64
 15010  2F5C  3FC2               	movwi [2]fsr1
 15011  2F5D  3040               	movlw	64
 15012  2F5E  3FC3               	movwi [3]fsr1
 15013                           
 15014                           ;main.c: 129:  data.skyTemp = -40;
 15015  2F5F  306B               	movlw	107
 15016  2F60  0086               	movwf	6
 15017  2F61  3027               	movlw	39
 15018  2F62  0087               	movwf	7
 15019  2F63  3000               	movlw	0
 15020  2F64  3FC0               	movwi [0]fsr1
 15021  2F65  3000               	movlw	0
 15022  2F66  3FC1               	movwi [1]fsr1
 15023  2F67  3020               	movlw	32
 15024  2F68  3FC2               	movwi [2]fsr1
 15025  2F69  30C2               	movlw	194
 15026  2F6A  3FC3               	movwi [3]fsr1
 15027                           
 15028                           ;main.c: 130:  data.fudgeFactor = 1.0;
 15029  2F6B  306F               	movlw	111
 15030  2F6C  0086               	movwf	6
 15031  2F6D  3027               	movlw	39
 15032  2F6E  0087               	movwf	7
 15033  2F6F  3000               	movlw	0
 15034  2F70  3FC0               	movwi [0]fsr1
 15035  2F71  3000               	movlw	0
 15036  2F72  3FC1               	movwi [1]fsr1
 15037  2F73  3080               	movlw	128
 15038  2F74  3FC2               	movwi [2]fsr1
 15039  2F75  303F               	movlw	63
 15040  2F76  3FC3               	movwi [3]fsr1
 15041                           
 15042                           ;main.c: 132:  for (n = 0; n < 4; n++) {
 15043  2F77  0140               	movlb	0	; select bank0
 15044  2F78  01BF               	clrf	initGlobalData@n
 15045  2F79                     L12:	
 15046  2F79  3004               	movlw	4
 15047  2F7A  023F               	subwf	initGlobalData@n,w
 15048  2F7B  1803               	btfsc	3,0
 15049  2F7C  0008               	return
 15050                           
 15051                           ;main.c: 133:   heater = &(data.heater)[n];
 15052  2F7D  083F               	movf	initGlobalData@n,w
 15053  2F7E  00BB               	movwf	??_initGlobalData
 15054  2F7F  01BC               	clrf	??_initGlobalData+1
 15055  2F80  083B               	movf	??_initGlobalData,w
 15056  2F81  00B5               	movwf	___wmul@multiplier
 15057  2F82  083C               	movf	??_initGlobalData+1,w
 15058  2F83  00B6               	movwf	___wmul@multiplier+1
 15059  2F84  301F               	movlw	31
 15060  2F85  00B7               	movwf	___wmul@multiplicand
 15061  2F86  3000               	movlw	0
 15062  2F87  00B8               	movwf	___wmul@multiplicand+1
 15063  2F88  31BF  270A  31AE   	fcall	___wmul
 15064  2F8B  3074               	movlw	116
 15065  2F8C  0140               	movlb	0	; select bank0
 15066  2F8D  00BD               	movwf	??_initGlobalData+2
 15067  2F8E  3027               	movlw	39
 15068  2F8F  00BE               	movwf	??_initGlobalData+3
 15069  2F90  0835               	movf	?___wmul,w
 15070  2F91  073D               	addwf	??_initGlobalData+2,w
 15071  2F92  00C0               	movwf	initGlobalData@heater
 15072  2F93  0836               	movf	?___wmul+1,w
 15073  2F94  3D3E               	addwfc	??_initGlobalData+3,w
 15074  2F95  00C1               	movwf	initGlobalData@heater+1
 15075                           
 15076                           ;main.c: 134:   heater->lensDia = 4;
 15077  2F96  0840               	movf	initGlobalData@heater,w
 15078  2F97  0086               	movwf	6
 15079  2F98  0841               	movf	initGlobalData@heater+1,w
 15080  2F99  0087               	movwf	7
 15081  2F9A  3155               	addfsr 1,21
 15082  2F9B  3000               	movlw	0
 15083  2F9C  3FC0               	movwi [0]fsr1
 15084  2F9D  3000               	movlw	0
 15085  2F9E  3FC1               	movwi [1]fsr1
 15086  2F9F  3080               	movlw	128
 15087  2FA0  3FC2               	movwi [2]fsr1
 15088  2FA1  3040               	movlw	64
 15089  2FA2  3FC3               	movwi [3]fsr1
 15090                           
 15091                           ;main.c: 135:   heater->status = CH_UNCHECKED;
 15092  2FA3  0840               	movf	initGlobalData@heater,w
 15093  2FA4  3E1E               	addlw	30
 15094  2FA5  00BB               	movwf	??_initGlobalData
 15095  2FA6  3000               	movlw	0
 15096  2FA7  3D41               	addwfc	initGlobalData@heater+1,w
 15097  2FA8  00BC               	movwf	??_initGlobalData+1
 15098  2FA9  083B               	movf	??_initGlobalData,w
 15099  2FAA  0086               	movwf	6
 15100  2FAB  083C               	movf	??_initGlobalData+1,w
 15101  2FAC  0087               	movwf	7
 15102  2FAD  3005               	movlw	5
 15103  2FAE  0081               	movwf	1
 15104                           
 15105                           ;main.c: 136:   heater->mode = MODE_AUTO;
 15106  2FAF  0840               	movf	initGlobalData@heater,w
 15107  2FB0  3E1D               	addlw	29
 15108  2FB1  00BB               	movwf	??_initGlobalData
 15109  2FB2  3000               	movlw	0
 15110  2FB3  3D41               	addwfc	initGlobalData@heater+1,w
 15111  2FB4  00BC               	movwf	??_initGlobalData+1
 15112  2FB5  083B               	movf	??_initGlobalData,w
 15113  2FB6  0086               	movwf	6
 15114  2FB7  083C               	movf	??_initGlobalData+1,w
 15115  2FB8  0087               	movwf	7
 15116  2FB9  3001               	movlw	1
 15117  2FBA  0081               	movwf	1
 15118                           
 15119                           ;main.c: 137:   heater->Pmax = 0;
 15120  2FBB  0840               	movf	initGlobalData@heater,w
 15121  2FBC  0086               	movwf	6
 15122  2FBD  0841               	movf	initGlobalData@heater+1,w
 15123  2FBE  0087               	movwf	7
 15124  2FBF  3144               	addfsr 1,4
 15125  2FC0  3000               	movlw	0
 15126  2FC1  3FC0               	movwi [0]fsr1
 15127  2FC2  3000               	movlw	0
 15128  2FC3  3FC1               	movwi [1]fsr1
 15129  2FC4  3000               	movlw	0
 15130  2FC5  3FC2               	movwi [2]fsr1
 15131  2FC6  3000               	movlw	0
 15132  2FC7  3FC3               	movwi [3]fsr1
 15133                           
 15134                           ;main.c: 138:   heater->Pset = -1;
 15135  2FC8  0840               	movf	initGlobalData@heater,w
 15136  2FC9  0086               	movwf	6
 15137  2FCA  0841               	movf	initGlobalData@heater+1,w
 15138  2FCB  0087               	movwf	7
 15139  2FCC  3150               	addfsr 1,16
 15140  2FCD  3000               	movlw	0
 15141  2FCE  3FC0               	movwi [0]fsr1
 15142  2FCF  3000               	movlw	0
 15143  2FD0  3FC1               	movwi [1]fsr1
 15144  2FD1  3080               	movlw	128
 15145  2FD2  3FC2               	movwi [2]fsr1
 15146  2FD3  30BF               	movlw	191
 15147  2FD4  3FC3               	movwi [3]fsr1
 15148                           
 15149                           ;main.c: 139:   heater->Preq = 0;
 15150  2FD5  0840               	movf	initGlobalData@heater,w
 15151  2FD6  0086               	movwf	6
 15152  2FD7  0841               	movf	initGlobalData@heater+1,w
 15153  2FD8  0087               	movwf	7
 15154  2FD9  3148               	addfsr 1,8
 15155  2FDA  3000               	movlw	0
 15156  2FDB  3FC0               	movwi [0]fsr1
 15157  2FDC  3000               	movlw	0
 15158  2FDD  3FC1               	movwi [1]fsr1
 15159  2FDE  3000               	movlw	0
 15160  2FDF  3FC2               	movwi [2]fsr1
 15161  2FE0  3000               	movlw	0
 15162  2FE1  3FC3               	movwi [3]fsr1
 15163                           
 15164                           ;main.c: 140:   heater->Patt = 0;
 15165  2FE2  0840               	movf	initGlobalData@heater,w
 15166  2FE3  0086               	movwf	6
 15167  2FE4  0841               	movf	initGlobalData@heater+1,w
 15168  2FE5  0087               	movwf	7
 15169  2FE6  314C               	addfsr 1,12
 15170  2FE7  3000               	movlw	0
 15171  2FE8  3FC0               	movwi [0]fsr1
 15172  2FE9  3000               	movlw	0
 15173  2FEA  3FC1               	movwi [1]fsr1
 15174  2FEB  3000               	movlw	0
 15175  2FEC  3FC2               	movwi [2]fsr1
 15176  2FED  3000               	movlw	0
 15177  2FEE  3FC3               	movwi [3]fsr1
 15178                           
 15179                           ;main.c: 141:   heater->current = 0;
 15180  2FEF  0840               	movf	initGlobalData@heater,w
 15181  2FF0  0086               	movwf	6
 15182  2FF1  0841               	movf	initGlobalData@heater+1,w
 15183  2FF2  0087               	movwf	7
 15184  2FF3  3000               	movlw	0
 15185  2FF4  3FC0               	movwi [0]fsr1
 15186  2FF5  3000               	movlw	0
 15187  2FF6  3FC1               	movwi [1]fsr1
 15188  2FF7  3000               	movlw	0
 15189  2FF8  3FC2               	movwi [2]fsr1
 15190  2FF9  3000               	movlw	0
 15191  2FFA  3FC3               	movwi [3]fsr1
 15192                           
 15193                           ;main.c: 142:  }
 15194  2FFB  3001               	movlw	1
 15195  2FFC  00BB               	movwf	??_initGlobalData
 15196  2FFD  083B               	movf	??_initGlobalData,w
 15197  2FFE  07BF               	addwf	initGlobalData@n,f
 15198  2FFF  2F79               	goto	L12
 15199  3000                     __end_of_initGlobalData:	
 15200                           
 15201                           	psect	text30
 15202  3EC2                     __ptext30:	
 15203 ;; *************** function _getLastError *****************
 15204 ;; Defined at:
 15205 ;;		line 28 in file "error.c"
 15206 ;; Parameters:    Size  Location     Type
 15207 ;;		None
 15208 ;; Auto vars:     Size  Location     Type
 15209 ;;		None
 15210 ;; Return value:  Size  Location     Type
 15211 ;;                  1    wreg      enum E7920
 15212 ;; Registers used:
 15213 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15214 ;; Tracked objects:
 15215 ;;		On entry : 0/0
 15216 ;;		On exit  : 0/0
 15217 ;;		Unchanged: 0/0
 15218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15220 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15222 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15223 ;;Total ram usage:        4 bytes
 15224 ;; Hardware stack levels used:    1
 15225 ;; Hardware stack levels required when called:    3
 15226 ;; This function calls:
 15227 ;;		Nothing
 15228 ;; This function is called by:
 15229 ;;		_main
 15230 ;; This function uses a non-reentrant model
 15231 ;;
 15232                           
 15233                           
 15234                           ;psect for function _getLastError
 15235  3EC2                     _getLastError:	
 15236                           
 15237                           ;error.c: 30:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
 15238                           
 15239                           ;incstack = 0
 15240                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
 15241  3EC2  0140               	movlb	0	; select bank0
 15242  3EC3  0859               	movf	_head,w
 15243  3EC4  0658               	xorwf	_tail,w
 15244  3EC5  1903               	skipnz
 15245  3EC6  2ED4               	goto	l6423
 15246  3EC7  0858               	movf	_tail,w
 15247  3EC8  3EA0               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 15248  3EC9  0086               	movwf	6
 15249  3ECA  3002               	movlw	2	; select bank5/6
 15250  3ECB  0087               	movwf	7
 15251  3ECC  0801               	movf	1,w
 15252  3ECD  00AC               	movwf	??_getLastError
 15253  3ECE  01AD               	clrf	??_getLastError+1
 15254  3ECF  082C               	movf	??_getLastError,w
 15255  3ED0  00AE               	movwf	_getLastError$1311
 15256  3ED1  082D               	movf	??_getLastError+1,w
 15257  3ED2  00AF               	movwf	_getLastError$1311+1
 15258  3ED3  2ED6               	goto	l6425
 15259  3ED4                     l6423:	
 15260  3ED4  01AE               	clrf	_getLastError$1311
 15261  3ED5  01AF               	clrf	_getLastError$1311+1
 15262  3ED6                     l6425:	
 15263  3ED6  082E               	movf	_getLastError$1311,w
 15264  3ED7  0008               	return
 15265  3ED8                     __end_of_getLastError:	
 15266                           
 15267                           	psect	text31
 15268  1A6A                     __ptext31:	
 15269 ;; *************** function _getAnalogValues *****************
 15270 ;; Defined at:
 15271 ;;		line 289 in file "system.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;		None
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;  adc             2   45[BANK1 ] unsigned short 
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  1    wreg      void 
 15278 ;; Registers used:
 15279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15280 ;; Tracked objects:
 15281 ;;		On entry : 0/0
 15282 ;;		On exit  : 0/0
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15286 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15288 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15289 ;;Total ram usage:        6 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; Hardware stack levels required when called:    5
 15292 ;; This function calls:
 15293 ;;		___fladd
 15294 ;;		___fldiv
 15295 ;;		___flmul
 15296 ;;		___xxtofl
 15297 ;;		_ema
 15298 ;;		_getAnalogValue
 15299 ;; This function is called by:
 15300 ;;		_main
 15301 ;; This function uses a non-reentrant model
 15302 ;;
 15303                           
 15304                           
 15305                           ;psect for function _getAnalogValues
 15306  1A6A                     _getAnalogValues:	
 15307                           
 15308                           ;system.c: 291:  static uint16_t avgT, avgV, avgI;;system.c: 292:  uint16_t adc;;system.
      +                          c: 294:  adc = getAnalogValue(0b000110);
 15309                           
 15310                           ;incstack = 0
 15311                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15312  1A6A  3006               	movlw	6
 15313  1A6B  31BF  2726  319A   	fcall	_getAnalogValue
 15314  1A6E  0140               	movlb	0	; select bank0
 15315  1A6F  082D               	movf	?_getAnalogValue+1,w
 15316  1A70  0141               	movlb	1	; select bank1
 15317  1A71  00CE               	movwf	(getAnalogValues@adc+1)^(0+128)
 15318  1A72  0140               	movlb	0	; select bank0
 15319  1A73  082C               	movf	?_getAnalogValue,w
 15320  1A74  0141               	movlb	1	; select bank1
 15321  1A75  00CD               	movwf	getAnalogValues@adc^(0+128)
 15322                           
 15323                           ;system.c: 295:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 15324  1A76  084E               	movf	(getAnalogValues@adc+1)^(0+128),w
 15325  1A77  0140               	movlb	0	; select bank0
 15326  1A78  00B9               	movwf	ema@in+1
 15327  1A79  0141               	movlb	1	; select bank1
 15328  1A7A  084D               	movf	getAnalogValues@adc^(0+128),w
 15329  1A7B  0140               	movlb	0	; select bank0
 15330  1A7C  00B8               	movwf	ema@in
 15331  1A7D  0144               	movlb	4	; select bank4
 15332  1A7E  082D               	movf	(getAnalogValues@avgT+1)^(0+512),w
 15333  1A7F  0140               	movlb	0	; select bank0
 15334  1A80  00BB               	movwf	ema@average+1
 15335  1A81  0144               	movlb	4	; select bank4
 15336  1A82  082C               	movf	getAnalogValues@avgT^(0+512),w
 15337  1A83  0140               	movlb	0	; select bank0
 15338  1A84  00BA               	movwf	ema@average
 15339  1A85  3000               	movlw	0
 15340  1A86  00BF               	movwf	ema@alpha+3
 15341  1A87  3000               	movlw	0
 15342  1A88  00BE               	movwf	ema@alpha+2
 15343  1A89  307F               	movlw	127
 15344  1A8A  00BD               	movwf	ema@alpha+1
 15345  1A8B  30FF               	movlw	255
 15346  1A8C  00BC               	movwf	ema@alpha
 15347  1A8D  31B5  2540  319A   	fcall	_ema
 15348  1A90  0140               	movlb	0	; select bank0
 15349  1A91  0839               	movf	?_ema+1,w
 15350  1A92  0144               	movlb	4	; select bank4
 15351  1A93  00AD               	movwf	(getAnalogValues@avgT+1)^(0+512)
 15352  1A94  0140               	movlb	0	; select bank0
 15353  1A95  0838               	movf	?_ema,w
 15354  1A96  0144               	movlb	4	; select bank4
 15355  1A97  00AC               	movwf	getAnalogValues@avgT^(0+512)
 15356                           
 15357                           ;system.c: 296:  adc = getAnalogValue(0b010000);
 15358  1A98  3010               	movlw	16
 15359  1A99  31BF  2726  319A   	fcall	_getAnalogValue
 15360  1A9C  0140               	movlb	0	; select bank0
 15361  1A9D  082D               	movf	?_getAnalogValue+1,w
 15362  1A9E  0141               	movlb	1	; select bank1
 15363  1A9F  00CE               	movwf	(getAnalogValues@adc+1)^(0+128)
 15364  1AA0  0140               	movlb	0	; select bank0
 15365  1AA1  082C               	movf	?_getAnalogValue,w
 15366  1AA2  0141               	movlb	1	; select bank1
 15367  1AA3  00CD               	movwf	getAnalogValues@adc^(0+128)
 15368                           
 15369                           ;system.c: 297:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 15370  1AA4  084E               	movf	(getAnalogValues@adc+1)^(0+128),w
 15371  1AA5  0140               	movlb	0	; select bank0
 15372  1AA6  00B9               	movwf	ema@in+1
 15373  1AA7  0141               	movlb	1	; select bank1
 15374  1AA8  084D               	movf	getAnalogValues@adc^(0+128),w
 15375  1AA9  0140               	movlb	0	; select bank0
 15376  1AAA  00B8               	movwf	ema@in
 15377  1AAB  0144               	movlb	4	; select bank4
 15378  1AAC  082B               	movf	(getAnalogValues@avgV+1)^(0+512),w
 15379  1AAD  0140               	movlb	0	; select bank0
 15380  1AAE  00BB               	movwf	ema@average+1
 15381  1AAF  0144               	movlb	4	; select bank4
 15382  1AB0  082A               	movf	getAnalogValues@avgV^(0+512),w
 15383  1AB1  0140               	movlb	0	; select bank0
 15384  1AB2  00BA               	movwf	ema@average
 15385  1AB3  3000               	movlw	0
 15386  1AB4  00BF               	movwf	ema@alpha+3
 15387  1AB5  3000               	movlw	0
 15388  1AB6  00BE               	movwf	ema@alpha+2
 15389  1AB7  30CC               	movlw	204
 15390  1AB8  00BD               	movwf	ema@alpha+1
 15391  1AB9  30CC               	movlw	204
 15392  1ABA  00BC               	movwf	ema@alpha
 15393  1ABB  31B5  2540  319A   	fcall	_ema
 15394  1ABE  0140               	movlb	0	; select bank0
 15395  1ABF  0839               	movf	?_ema+1,w
 15396  1AC0  0144               	movlb	4	; select bank4
 15397  1AC1  00AB               	movwf	(getAnalogValues@avgV+1)^(0+512)
 15398  1AC2  0140               	movlb	0	; select bank0
 15399  1AC3  0838               	movf	?_ema,w
 15400  1AC4  0144               	movlb	4	; select bank4
 15401  1AC5  00AA               	movwf	getAnalogValues@avgV^(0+512)
 15402                           
 15403                           ;system.c: 298:  adc = getAnalogValue(0b010001);
 15404  1AC6  3011               	movlw	17
 15405  1AC7  31BF  2726  319A   	fcall	_getAnalogValue
 15406  1ACA  0140               	movlb	0	; select bank0
 15407  1ACB  082D               	movf	?_getAnalogValue+1,w
 15408  1ACC  0141               	movlb	1	; select bank1
 15409  1ACD  00CE               	movwf	(getAnalogValues@adc+1)^(0+128)
 15410  1ACE  0140               	movlb	0	; select bank0
 15411  1ACF  082C               	movf	?_getAnalogValue,w
 15412  1AD0  0141               	movlb	1	; select bank1
 15413  1AD1  00CD               	movwf	getAnalogValues@adc^(0+128)
 15414                           
 15415                           ;system.c: 299:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 15416  1AD2  084E               	movf	(getAnalogValues@adc+1)^(0+128),w
 15417  1AD3  0140               	movlb	0	; select bank0
 15418  1AD4  00B9               	movwf	ema@in+1
 15419  1AD5  0141               	movlb	1	; select bank1
 15420  1AD6  084D               	movf	getAnalogValues@adc^(0+128),w
 15421  1AD7  0140               	movlb	0	; select bank0
 15422  1AD8  00B8               	movwf	ema@in
 15423  1AD9  0144               	movlb	4	; select bank4
 15424  1ADA  0829               	movf	(getAnalogValues@avgI+1)^(0+512),w
 15425  1ADB  0140               	movlb	0	; select bank0
 15426  1ADC  00BB               	movwf	ema@average+1
 15427  1ADD  0144               	movlb	4	; select bank4
 15428  1ADE  0828               	movf	getAnalogValues@avgI^(0+512),w
 15429  1ADF  0140               	movlb	0	; select bank0
 15430  1AE0  00BA               	movwf	ema@average
 15431  1AE1  3000               	movlw	0
 15432  1AE2  00BF               	movwf	ema@alpha+3
 15433  1AE3  3000               	movlw	0
 15434  1AE4  00BE               	movwf	ema@alpha+2
 15435  1AE5  304C               	movlw	76
 15436  1AE6  00BD               	movwf	ema@alpha+1
 15437  1AE7  30CC               	movlw	204
 15438  1AE8  00BC               	movwf	ema@alpha
 15439  1AE9  31B5  2540  319A   	fcall	_ema
 15440  1AEC  0140               	movlb	0	; select bank0
 15441  1AED  0839               	movf	?_ema+1,w
 15442  1AEE  0144               	movlb	4	; select bank4
 15443  1AEF  00A9               	movwf	(getAnalogValues@avgI+1)^(0+512)
 15444  1AF0  0140               	movlb	0	; select bank0
 15445  1AF1  0838               	movf	?_ema,w
 15446  1AF2  0144               	movlb	4	; select bank4
 15447  1AF3  00A8               	movwf	getAnalogValues@avgI^(0+512)
 15448                           
 15449                           ;system.c: 300:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 15450  1AF4  30C2               	movlw	194
 15451  1AF5  0141               	movlb	1	; select bank1
 15452  1AF6  00B4               	movwf	(___fladd@b+3)^(0+128)
 15453  1AF7  300A               	movlw	10
 15454  1AF8  00B3               	movwf	(___fladd@b+2)^(0+128)
 15455  1AF9  300C               	movlw	12
 15456  1AFA  00B2               	movwf	(___fladd@b+1)^(0+128)
 15457  1AFB  304A               	movlw	74
 15458  1AFC  00B1               	movwf	___fladd@b^(0+128)
 15459  1AFD  303D               	movlw	61
 15460  1AFE  0140               	movlb	0	; select bank0
 15461  1AFF  00CC               	movwf	___flmul@b+3
 15462  1B00  30F3               	movlw	243
 15463  1B01  00CB               	movwf	___flmul@b+2
 15464  1B02  30EA               	movlw	234
 15465  1B03  00CA               	movwf	___flmul@b+1
 15466  1B04  30B3               	movlw	179
 15467  1B05  00C9               	movwf	___flmul@b
 15468  1B06  0144               	movlb	4	; select bank4
 15469  1B07  082C               	movf	getAnalogValues@avgT^(0+512),w
 15470  1B08  0140               	movlb	0	; select bank0
 15471  1B09  00BB               	movwf	___xxtofl@val
 15472  1B0A  0144               	movlb	4	; select bank4
 15473  1B0B  082D               	movf	(getAnalogValues@avgT+1)^(0+512),w
 15474  1B0C  0140               	movlb	0	; select bank0
 15475  1B0D  00BC               	movwf	___xxtofl@val+1
 15476  1B0E  01BD               	clrf	___xxtofl@val+2
 15477  1B0F  01BE               	clrf	___xxtofl@val+3
 15478  1B10  3000               	movlw	0
 15479  1B11  31AA  22D4  319A   	fcall	___xxtofl
 15480  1B14  0140               	movlb	0	; select bank0
 15481  1B15  083E               	movf	?___xxtofl+3,w
 15482  1B16  00D0               	movwf	___flmul@a+3
 15483  1B17  083D               	movf	?___xxtofl+2,w
 15484  1B18  00CF               	movwf	___flmul@a+2
 15485  1B19  083C               	movf	?___xxtofl+1,w
 15486  1B1A  00CE               	movwf	___flmul@a+1
 15487  1B1B  083B               	movf	?___xxtofl,w
 15488  1B1C  00CD               	movwf	___flmul@a
 15489  1B1D  3188  20BA  319A   	fcall	___flmul
 15490  1B20  0140               	movlb	0	; select bank0
 15491  1B21  084C               	movf	?___flmul+3,w
 15492  1B22  0141               	movlb	1	; select bank1
 15493  1B23  00B8               	movwf	(___fladd@a+3)^(0+128)
 15494  1B24  0140               	movlb	0	; select bank0
 15495  1B25  084B               	movf	?___flmul+2,w
 15496  1B26  0141               	movlb	1	; select bank1
 15497  1B27  00B7               	movwf	(___fladd@a+2)^(0+128)
 15498  1B28  0140               	movlb	0	; select bank0
 15499  1B29  084A               	movf	?___flmul+1,w
 15500  1B2A  0141               	movlb	1	; select bank1
 15501  1B2B  00B6               	movwf	(___fladd@a+1)^(0+128)
 15502  1B2C  0140               	movlb	0	; select bank0
 15503  1B2D  0849               	movf	?___flmul,w
 15504  1B2E  0141               	movlb	1	; select bank1
 15505  1B2F  00B5               	movwf	___fladd@a^(0+128)
 15506  1B30  319E  2606  319A   	fcall	___fladd
 15507  1B33  304A               	movlw	74
 15508  1B34  0086               	movwf	6
 15509  1B35  3027               	movlw	39
 15510  1B36  0087               	movwf	7
 15511  1B37  314D               	addfsr 1,13
 15512  1B38  0141               	movlb	1	; select bank1
 15513  1B39  0831               	movf	?___fladd^(0+128),w
 15514  1B3A  3FC0               	movwi [0]fsr1
 15515  1B3B  0832               	movf	(?___fladd+1)^(0+128),w
 15516  1B3C  3FC1               	movwi [1]fsr1
 15517  1B3D  0833               	movf	(?___fladd+2)^(0+128),w
 15518  1B3E  3FC2               	movwi [2]fsr1
 15519  1B3F  0834               	movf	(?___fladd+3)^(0+128),w
 15520  1B40  3FC3               	movwi [3]fsr1
 15521                           
 15522                           ;system.c: 301:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15523  1B41  3040               	movlw	64
 15524  1B42  0140               	movlb	0	; select bank0
 15525  1B43  00CC               	movwf	___flmul@b+3
 15526  1B44  30A0               	movlw	160
 15527  1B45  00CB               	movwf	___flmul@b+2
 15528  1B46  3000               	movlw	0
 15529  1B47  00CA               	movwf	___flmul@b+1
 15530  1B48  3000               	movlw	0
 15531  1B49  00C9               	movwf	___flmul@b
 15532  1B4A  0144               	movlb	4	; select bank4
 15533  1B4B  082A               	movf	getAnalogValues@avgV^(0+512),w
 15534  1B4C  0140               	movlb	0	; select bank0
 15535  1B4D  00BB               	movwf	___xxtofl@val
 15536  1B4E  0144               	movlb	4	; select bank4
 15537  1B4F  082B               	movf	(getAnalogValues@avgV+1)^(0+512),w
 15538  1B50  0140               	movlb	0	; select bank0
 15539  1B51  00BC               	movwf	___xxtofl@val+1
 15540  1B52  01BD               	clrf	___xxtofl@val+2
 15541  1B53  01BE               	clrf	___xxtofl@val+3
 15542  1B54  3000               	movlw	0
 15543  1B55  31AA  22D4  319A   	fcall	___xxtofl
 15544  1B58  0140               	movlb	0	; select bank0
 15545  1B59  083E               	movf	?___xxtofl+3,w
 15546  1B5A  00D0               	movwf	___flmul@a+3
 15547  1B5B  083D               	movf	?___xxtofl+2,w
 15548  1B5C  00CF               	movwf	___flmul@a+2
 15549  1B5D  083C               	movf	?___xxtofl+1,w
 15550  1B5E  00CE               	movwf	___flmul@a+1
 15551  1B5F  083B               	movf	?___xxtofl,w
 15552  1B60  00CD               	movwf	___flmul@a
 15553  1B61  3188  20BA  319A   	fcall	___flmul
 15554  1B64  0140               	movlb	0	; select bank0
 15555  1B65  084C               	movf	?___flmul+3,w
 15556  1B66  0141               	movlb	1	; select bank1
 15557  1B67  00CC               	movwf	(_getAnalogValues$2570+3)^(0+128)
 15558  1B68  0140               	movlb	0	; select bank0
 15559  1B69  084B               	movf	?___flmul+2,w
 15560  1B6A  0141               	movlb	1	; select bank1
 15561  1B6B  00CB               	movwf	(_getAnalogValues$2570+2)^(0+128)
 15562  1B6C  0140               	movlb	0	; select bank0
 15563  1B6D  084A               	movf	?___flmul+1,w
 15564  1B6E  0141               	movlb	1	; select bank1
 15565  1B6F  00CA               	movwf	(_getAnalogValues$2570+1)^(0+128)
 15566  1B70  0140               	movlb	0	; select bank0
 15567  1B71  0849               	movf	?___flmul,w
 15568  1B72  0141               	movlb	1	; select bank1
 15569  1B73  00C9               	movwf	_getAnalogValues$2570^(0+128)
 15570                           
 15571                           ;system.c: 301:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15572  1B74  3047               	movlw	71
 15573  1B75  00B0               	movwf	(___fldiv@a+3)^(0+128)
 15574  1B76  303B               	movlw	59
 15575  1B77  00AF               	movwf	(___fldiv@a+2)^(0+128)
 15576  1B78  30D1               	movlw	209
 15577  1B79  00AE               	movwf	(___fldiv@a+1)^(0+128)
 15578  1B7A  3000               	movlw	0
 15579  1B7B  00AD               	movwf	___fldiv@a^(0+128)
 15580  1B7C  3043               	movlw	67
 15581  1B7D  0140               	movlb	0	; select bank0
 15582  1B7E  00CC               	movwf	___flmul@b+3
 15583  1B7F  3045               	movlw	69
 15584  1B80  00CB               	movwf	___flmul@b+2
 15585  1B81  3000               	movlw	0
 15586  1B82  00CA               	movwf	___flmul@b+1
 15587  1B83  3000               	movlw	0
 15588  1B84  00C9               	movwf	___flmul@b
 15589  1B85  0141               	movlb	1	; select bank1
 15590  1B86  084C               	movf	(_getAnalogValues$2570+3)^(0+128),w
 15591  1B87  0140               	movlb	0	; select bank0
 15592  1B88  00D0               	movwf	___flmul@a+3
 15593  1B89  0141               	movlb	1	; select bank1
 15594  1B8A  084B               	movf	(_getAnalogValues$2570+2)^(0+128),w
 15595  1B8B  0140               	movlb	0	; select bank0
 15596  1B8C  00CF               	movwf	___flmul@a+2
 15597  1B8D  0141               	movlb	1	; select bank1
 15598  1B8E  084A               	movf	(_getAnalogValues$2570+1)^(0+128),w
 15599  1B8F  0140               	movlb	0	; select bank0
 15600  1B90  00CE               	movwf	___flmul@a+1
 15601  1B91  0141               	movlb	1	; select bank1
 15602  1B92  0849               	movf	_getAnalogValues$2570^(0+128),w
 15603  1B93  0140               	movlb	0	; select bank0
 15604  1B94  00CD               	movwf	___flmul@a
 15605  1B95  3188  20BA  319A   	fcall	___flmul
 15606  1B98  0140               	movlb	0	; select bank0
 15607  1B99  084C               	movf	?___flmul+3,w
 15608  1B9A  0141               	movlb	1	; select bank1
 15609  1B9B  00B4               	movwf	(___fldiv@b+3)^(0+128)
 15610  1B9C  0140               	movlb	0	; select bank0
 15611  1B9D  084B               	movf	?___flmul+2,w
 15612  1B9E  0141               	movlb	1	; select bank1
 15613  1B9F  00B3               	movwf	(___fldiv@b+2)^(0+128)
 15614  1BA0  0140               	movlb	0	; select bank0
 15615  1BA1  084A               	movf	?___flmul+1,w
 15616  1BA2  0141               	movlb	1	; select bank1
 15617  1BA3  00B2               	movwf	(___fldiv@b+1)^(0+128)
 15618  1BA4  0140               	movlb	0	; select bank0
 15619  1BA5  0849               	movf	?___flmul,w
 15620  1BA6  0141               	movlb	1	; select bank1
 15621  1BA7  00B1               	movwf	___fldiv@b^(0+128)
 15622  1BA8  31A6  266D  319A   	fcall	___fldiv
 15623  1BAB  304A               	movlw	74
 15624  1BAC  0086               	movwf	6
 15625  1BAD  3027               	movlw	39
 15626  1BAE  0087               	movwf	7
 15627  1BAF  3151               	addfsr 1,17
 15628  1BB0  0141               	movlb	1	; select bank1
 15629  1BB1  082D               	movf	?___fldiv^(0+128),w
 15630  1BB2  3FC0               	movwi [0]fsr1
 15631  1BB3  082E               	movf	(?___fldiv+1)^(0+128),w
 15632  1BB4  3FC1               	movwi [1]fsr1
 15633  1BB5  082F               	movf	(?___fldiv+2)^(0+128),w
 15634  1BB6  3FC2               	movwi [2]fsr1
 15635  1BB7  0830               	movf	(?___fldiv+3)^(0+128),w
 15636  1BB8  3FC3               	movwi [3]fsr1
 15637                           
 15638                           ;system.c: 302:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 15639  1BB9  3045               	movlw	69
 15640  1BBA  00B0               	movwf	(___fldiv@a+3)^(0+128)
 15641  1BBB  301F               	movlw	31
 15642  1BBC  00AF               	movwf	(___fldiv@a+2)^(0+128)
 15643  1BBD  30D8               	movlw	216
 15644  1BBE  00AE               	movwf	(___fldiv@a+1)^(0+128)
 15645  1BBF  3000               	movlw	0
 15646  1BC0  00AD               	movwf	___fldiv@a^(0+128)
 15647  1BC1  3040               	movlw	64
 15648  1BC2  0140               	movlb	0	; select bank0
 15649  1BC3  00CC               	movwf	___flmul@b+3
 15650  1BC4  30A0               	movlw	160
 15651  1BC5  00CB               	movwf	___flmul@b+2
 15652  1BC6  3000               	movlw	0
 15653  1BC7  00CA               	movwf	___flmul@b+1
 15654  1BC8  3000               	movlw	0
 15655  1BC9  00C9               	movwf	___flmul@b
 15656  1BCA  0144               	movlb	4	; select bank4
 15657  1BCB  0828               	movf	getAnalogValues@avgI^(0+512),w
 15658  1BCC  0140               	movlb	0	; select bank0
 15659  1BCD  00BB               	movwf	___xxtofl@val
 15660  1BCE  0144               	movlb	4	; select bank4
 15661  1BCF  0829               	movf	(getAnalogValues@avgI+1)^(0+512),w
 15662  1BD0  0140               	movlb	0	; select bank0
 15663  1BD1  00BC               	movwf	___xxtofl@val+1
 15664  1BD2  01BD               	clrf	___xxtofl@val+2
 15665  1BD3  01BE               	clrf	___xxtofl@val+3
 15666  1BD4  3000               	movlw	0
 15667  1BD5  31AA  22D4  319A   	fcall	___xxtofl
 15668  1BD8  0140               	movlb	0	; select bank0
 15669  1BD9  083E               	movf	?___xxtofl+3,w
 15670  1BDA  00D0               	movwf	___flmul@a+3
 15671  1BDB  083D               	movf	?___xxtofl+2,w
 15672  1BDC  00CF               	movwf	___flmul@a+2
 15673  1BDD  083C               	movf	?___xxtofl+1,w
 15674  1BDE  00CE               	movwf	___flmul@a+1
 15675  1BDF  083B               	movf	?___xxtofl,w
 15676  1BE0  00CD               	movwf	___flmul@a
 15677  1BE1  3188  20BA  319A   	fcall	___flmul
 15678  1BE4  0140               	movlb	0	; select bank0
 15679  1BE5  084C               	movf	?___flmul+3,w
 15680  1BE6  0141               	movlb	1	; select bank1
 15681  1BE7  00B4               	movwf	(___fldiv@b+3)^(0+128)
 15682  1BE8  0140               	movlb	0	; select bank0
 15683  1BE9  084B               	movf	?___flmul+2,w
 15684  1BEA  0141               	movlb	1	; select bank1
 15685  1BEB  00B3               	movwf	(___fldiv@b+2)^(0+128)
 15686  1BEC  0140               	movlb	0	; select bank0
 15687  1BED  084A               	movf	?___flmul+1,w
 15688  1BEE  0141               	movlb	1	; select bank1
 15689  1BEF  00B2               	movwf	(___fldiv@b+1)^(0+128)
 15690  1BF0  0140               	movlb	0	; select bank0
 15691  1BF1  0849               	movf	?___flmul,w
 15692  1BF2  0141               	movlb	1	; select bank1
 15693  1BF3  00B1               	movwf	___fldiv@b^(0+128)
 15694  1BF4  31A6  266D  319A   	fcall	___fldiv
 15695  1BF7  304A               	movlw	74
 15696  1BF8  0086               	movwf	6
 15697  1BF9  3027               	movlw	39
 15698  1BFA  0087               	movwf	7
 15699  1BFB  3155               	addfsr 1,21
 15700  1BFC  0141               	movlb	1	; select bank1
 15701  1BFD  082D               	movf	?___fldiv^(0+128),w
 15702  1BFE  3FC0               	movwi [0]fsr1
 15703  1BFF  082E               	movf	(?___fldiv+1)^(0+128),w
 15704  1C00  3FC1               	movwi [1]fsr1
 15705  1C01  082F               	movf	(?___fldiv+2)^(0+128),w
 15706  1C02  3FC2               	movwi [2]fsr1
 15707  1C03  0830               	movf	(?___fldiv+3)^(0+128),w
 15708  1C04  3FC3               	movwi [3]fsr1
 15709                           
 15710                           ;system.c: 303:  data.power = data.voltage * data.current;
 15711  1C05  304A               	movlw	74
 15712  1C06  0086               	movwf	6
 15713  1C07  3027               	movlw	39
 15714  1C08  0087               	movwf	7
 15715  1C09  3155               	addfsr 1,21
 15716  1C0A  3F40               	moviw [0]fsr1
 15717  1C0B  0140               	movlb	0	; select bank0
 15718  1C0C  00C9               	movwf	___flmul@b
 15719  1C0D  3F41               	moviw [1]fsr1
 15720  1C0E  00CA               	movwf	___flmul@b+1
 15721  1C0F  3F42               	moviw [2]fsr1
 15722  1C10  00CB               	movwf	___flmul@b+2
 15723  1C11  3F43               	moviw [3]fsr1
 15724  1C12  00CC               	movwf	___flmul@b+3
 15725  1C13  304A               	movlw	74
 15726  1C14  0086               	movwf	6
 15727  1C15  3027               	movlw	39
 15728  1C16  0087               	movwf	7
 15729  1C17  3151               	addfsr 1,17
 15730  1C18  3F40               	moviw [0]fsr1
 15731  1C19  00CD               	movwf	___flmul@a
 15732  1C1A  3F41               	moviw [1]fsr1
 15733  1C1B  00CE               	movwf	___flmul@a+1
 15734  1C1C  3F42               	moviw [2]fsr1
 15735  1C1D  00CF               	movwf	___flmul@a+2
 15736  1C1E  3F43               	moviw [3]fsr1
 15737  1C1F  00D0               	movwf	___flmul@a+3
 15738  1C20  3188  20BA         	fcall	___flmul
 15739  1C22  304A               	movlw	74
 15740  1C23  0086               	movwf	6
 15741  1C24  3027               	movlw	39
 15742  1C25  0087               	movwf	7
 15743  1C26  3159               	addfsr 1,25
 15744  1C27  0140               	movlb	0	; select bank0
 15745  1C28  0849               	movf	?___flmul,w
 15746  1C29  3FC0               	movwi [0]fsr1
 15747  1C2A  084A               	movf	?___flmul+1,w
 15748  1C2B  3FC1               	movwi [1]fsr1
 15749  1C2C  084B               	movf	?___flmul+2,w
 15750  1C2D  3FC2               	movwi [2]fsr1
 15751  1C2E  084C               	movf	?___flmul+3,w
 15752  1C2F  3FC3               	movwi [3]fsr1
 15753  1C30  0008               	return
 15754  1C31                     __end_of_getAnalogValues:	
 15755                           
 15756                           	psect	text32
 15757  2C34                     __ptext32:	
 15758 ;; *************** function _controller *****************
 15759 ;; Defined at:
 15760 ;;		line 412 in file "system.c"
 15761 ;; Parameters:    Size  Location     Type
 15762 ;;		None
 15763 ;; Auto vars:     Size  Location     Type
 15764 ;;  timer           4   37[BANK0 ] unsigned long 
 15765 ;;  n               1   41[BANK0 ] unsigned char 
 15766 ;; Return value:  Size  Location     Type
 15767 ;;                  1    wreg      unsigned char 
 15768 ;; Registers used:
 15769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15770 ;; Tracked objects:
 15771 ;;		On entry : 0/0
 15772 ;;		On exit  : 0/0
 15773 ;;		Unchanged: 0/0
 15774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15776 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15777 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15778 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15779 ;;Total ram usage:       10 bytes
 15780 ;; Hardware stack levels used:    1
 15781 ;; Hardware stack levels required when called:    4
 15782 ;; This function calls:
 15783 ;;		___bmul
 15784 ;;		_setChannelSwitch
 15785 ;;		_timeSince
 15786 ;; This function is called by:
 15787 ;;		_main
 15788 ;; This function uses a non-reentrant model
 15789 ;;
 15790                           
 15791                           
 15792                           ;psect for function _controller
 15793  2C34                     _controller:	
 15794                           
 15795                           ;system.c: 414:  static uint32_t dutyCycleTimer;;system.c: 415:  uint32_t timer;;system.
      +                          c: 416:  static uint8_t idle;;system.c: 417:  uint8_t n;;system.c: 419:  if (idle) {
 15796                           
 15797                           ;incstack = 0
 15798                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15799  2C34  0142               	movlb	2	; select bank2
 15800  2C35  0869               	movf	controller@idle^(0+256),w
 15801  2C36  1903               	btfsc	3,2
 15802  2C37  2C4A               	goto	l8935
 15803                           
 15804                           ;system.c: 420:   dutyCycleTimer = tick100ms;
 15805  2C38  0143               	movlb	3	; select bank3
 15806  2C39  086E               	movf	(_tick100ms+3)^(0+384),w	;volatile
 15807  2C3A  0144               	movlb	4	; select bank4
 15808  2C3B  00A3               	movwf	(controller@dutyCycleTimer+3)^(0+512)
 15809  2C3C  0143               	movlb	3	; select bank3
 15810  2C3D  086D               	movf	(_tick100ms+2)^(0+384),w	;volatile
 15811  2C3E  0144               	movlb	4	; select bank4
 15812  2C3F  00A2               	movwf	(controller@dutyCycleTimer+2)^(0+512)
 15813  2C40  0143               	movlb	3	; select bank3
 15814  2C41  086C               	movf	(_tick100ms+1)^(0+384),w	;volatile
 15815  2C42  0144               	movlb	4	; select bank4
 15816  2C43  00A1               	movwf	(controller@dutyCycleTimer+1)^(0+512)
 15817  2C44  0143               	movlb	3	; select bank3
 15818  2C45  086B               	movf	_tick100ms^(0+384),w	;volatile
 15819  2C46  0144               	movlb	4	; select bank4
 15820  2C47  00A0               	movwf	controller@dutyCycleTimer^(0+512)
 15821                           
 15822                           ;system.c: 421:   idle = 0;
 15823  2C48  0142               	movlb	2	; select bank2
 15824  2C49  01E9               	clrf	controller@idle^(0+256)
 15825  2C4A                     l8935:	
 15826                           ;system.c: 422:  }
 15827                           
 15828                           
 15829                           ;system.c: 424:  timer = timeSince(dutyCycleTimer);
 15830  2C4A  0144               	movlb	4	; select bank4
 15831  2C4B  0823               	movf	(controller@dutyCycleTimer+3)^(0+512),w
 15832  2C4C  0140               	movlb	0	; select bank0
 15833  2C4D  00AF               	movwf	timeSince@since+3
 15834  2C4E  0144               	movlb	4	; select bank4
 15835  2C4F  0822               	movf	(controller@dutyCycleTimer+2)^(0+512),w
 15836  2C50  0140               	movlb	0	; select bank0
 15837  2C51  00AE               	movwf	timeSince@since+2
 15838  2C52  0144               	movlb	4	; select bank4
 15839  2C53  0821               	movf	(controller@dutyCycleTimer+1)^(0+512),w
 15840  2C54  0140               	movlb	0	; select bank0
 15841  2C55  00AD               	movwf	timeSince@since+1
 15842  2C56  0144               	movlb	4	; select bank4
 15843  2C57  0820               	movf	controller@dutyCycleTimer^(0+512),w
 15844  2C58  0140               	movlb	0	; select bank0
 15845  2C59  00AC               	movwf	timeSince@since
 15846  2C5A  31B7  2780  31AC   	fcall	_timeSince
 15847  2C5D  0140               	movlb	0	; select bank0
 15848  2C5E  082F               	movf	?_timeSince+3,w
 15849  2C5F  00C8               	movwf	controller@timer+3
 15850  2C60  082E               	movf	?_timeSince+2,w
 15851  2C61  00C7               	movwf	controller@timer+2
 15852  2C62  082D               	movf	?_timeSince+1,w
 15853  2C63  00C6               	movwf	controller@timer+1
 15854  2C64  082C               	movf	?_timeSince,w
 15855  2C65  00C5               	movwf	controller@timer
 15856                           
 15857                           ;system.c: 426:  for(n = 0; n < 4; n++) {
 15858  2C66  01C9               	clrf	controller@n
 15859  2C67  3004               	movlw	4
 15860  2C68  0249               	subwf	controller@n,w
 15861  2C69  1803               	btfsc	3,0
 15862  2C6A  2CF2               	goto	l8957
 15863  2C6B                     l8943:	
 15864                           
 15865                           ;system.c: 427:   if (timer >= virtChannels[n].stop)
 15866  2C6B  3009               	movlw	9
 15867  2C6C  00C0               	movwf	??_controller
 15868  2C6D  0840               	movf	??_controller,w
 15869  2C6E  00AC               	movwf	___bmul@multiplicand
 15870  2C6F  0849               	movf	controller@n,w
 15871  2C70  31BE  26B0  31AC   	fcall	___bmul
 15872  2C73  3E08               	addlw	8
 15873  2C74  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15874  2C75  0086               	movwf	6
 15875  2C76  3002               	movlw	2	; select bank5/6
 15876  2C77  0087               	movwf	7
 15877  2C78  0801               	movf	1,w
 15878  2C79  0140               	movlb	0	; select bank0
 15879  2C7A  00C1               	movwf	??_controller+1
 15880  2C7B  01C2               	clrf	??_controller+2
 15881  2C7C  01C3               	clrf	??_controller+3
 15882  2C7D  01C4               	clrf	??_controller+4
 15883  2C7E  0844               	movf	??_controller+4,w
 15884  2C7F  0248               	subwf	controller@timer+3,w
 15885  2C80  1D03               	skipz
 15886  2C81  2C8C               	goto	u11225
 15887  2C82  0843               	movf	??_controller+3,w
 15888  2C83  0247               	subwf	controller@timer+2,w
 15889  2C84  1D03               	skipz
 15890  2C85  2C8C               	goto	u11225
 15891  2C86  0842               	movf	??_controller+2,w
 15892  2C87  0246               	subwf	controller@timer+1,w
 15893  2C88  1D03               	skipz
 15894  2C89  2C8C               	goto	u11225
 15895  2C8A  0841               	movf	??_controller+1,w
 15896  2C8B  0245               	subwf	controller@timer,w
 15897  2C8C                     u11225:	
 15898  2C8C  1C03               	skipc
 15899  2C8D  2C90               	goto	l8947
 15900                           
 15901                           ;system.c: 428:    setChannelSwitch(virtChannels[n].phyChanNum, 0);
 15902  2C8E  01B0               	clrf	setChannelSwitch@state
 15903  2C8F  2CD9               	goto	L13
 15904  2C90                     l8947:	
 15905                           ;system.c: 429:   else if ((timer >= virtChannels[n].start) && (timer < virtChannels[n].
      +                          stop))
 15906                           
 15907  2C90  3009               	movlw	9
 15908  2C91  0140               	movlb	0	; select bank0
 15909  2C92  00C0               	movwf	??_controller
 15910  2C93  0840               	movf	??_controller,w
 15911  2C94  00AC               	movwf	___bmul@multiplicand
 15912  2C95  0849               	movf	controller@n,w
 15913  2C96  31BE  26B0  31AC   	fcall	___bmul
 15914  2C99  3E07               	addlw	7
 15915  2C9A  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15916  2C9B  0086               	movwf	6
 15917  2C9C  3002               	movlw	2	; select bank5/6
 15918  2C9D  0087               	movwf	7
 15919  2C9E  0801               	movf	1,w
 15920  2C9F  0140               	movlb	0	; select bank0
 15921  2CA0  00C1               	movwf	??_controller+1
 15922  2CA1  01C2               	clrf	??_controller+2
 15923  2CA2  01C3               	clrf	??_controller+3
 15924  2CA3  01C4               	clrf	??_controller+4
 15925  2CA4  0844               	movf	??_controller+4,w
 15926  2CA5  0248               	subwf	controller@timer+3,w
 15927  2CA6  1D03               	skipz
 15928  2CA7  2CB2               	goto	u11235
 15929  2CA8  0843               	movf	??_controller+3,w
 15930  2CA9  0247               	subwf	controller@timer+2,w
 15931  2CAA  1D03               	skipz
 15932  2CAB  2CB2               	goto	u11235
 15933  2CAC  0842               	movf	??_controller+2,w
 15934  2CAD  0246               	subwf	controller@timer+1,w
 15935  2CAE  1D03               	skipz
 15936  2CAF  2CB2               	goto	u11235
 15937  2CB0  0841               	movf	??_controller+1,w
 15938  2CB1  0245               	subwf	controller@timer,w
 15939  2CB2                     u11235:	
 15940  2CB2  1C03               	skipc
 15941  2CB3  2CE9               	goto	l8953
 15942  2CB4  3009               	movlw	9
 15943  2CB5  00C0               	movwf	??_controller
 15944  2CB6  0840               	movf	??_controller,w
 15945  2CB7  00AC               	movwf	___bmul@multiplicand
 15946  2CB8  0849               	movf	controller@n,w
 15947  2CB9  31BE  26B0  31AC   	fcall	___bmul
 15948  2CBC  3E08               	addlw	8
 15949  2CBD  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15950  2CBE  0086               	movwf	6
 15951  2CBF  3002               	movlw	2	; select bank5/6
 15952  2CC0  0087               	movwf	7
 15953  2CC1  0801               	movf	1,w
 15954  2CC2  0140               	movlb	0	; select bank0
 15955  2CC3  00C1               	movwf	??_controller+1
 15956  2CC4  01C2               	clrf	??_controller+2
 15957  2CC5  01C3               	clrf	??_controller+3
 15958  2CC6  01C4               	clrf	??_controller+4
 15959  2CC7  0844               	movf	??_controller+4,w
 15960  2CC8  0248               	subwf	controller@timer+3,w
 15961  2CC9  1D03               	skipz
 15962  2CCA  2CD5               	goto	u11245
 15963  2CCB  0843               	movf	??_controller+3,w
 15964  2CCC  0247               	subwf	controller@timer+2,w
 15965  2CCD  1D03               	skipz
 15966  2CCE  2CD5               	goto	u11245
 15967  2CCF  0842               	movf	??_controller+2,w
 15968  2CD0  0246               	subwf	controller@timer+1,w
 15969  2CD1  1D03               	skipz
 15970  2CD2  2CD5               	goto	u11245
 15971  2CD3  0841               	movf	??_controller+1,w
 15972  2CD4  0245               	subwf	controller@timer,w
 15973  2CD5                     u11245:	
 15974  2CD5  1803               	skipnc
 15975  2CD6  2CE9               	goto	l8953
 15976                           
 15977                           ;system.c: 430:    setChannelSwitch(virtChannels[n].phyChanNum, 1);
 15978  2CD7  01B0               	clrf	setChannelSwitch@state
 15979  2CD8  0AB0               	incf	setChannelSwitch@state,f
 15980  2CD9                     L13:	
 15981  2CD9  3009               	movlw	9
 15982  2CDA  00C0               	movwf	??_controller
 15983  2CDB  0840               	movf	??_controller,w
 15984  2CDC  00AC               	movwf	___bmul@multiplicand
 15985  2CDD  0849               	movf	controller@n,w
 15986  2CDE  31BE  26B0  31AC   	fcall	___bmul
 15987  2CE1  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15988  2CE2  0086               	movwf	6
 15989  2CE3  3002               	movlw	2	; select bank5/6
 15990  2CE4  0087               	movwf	7
 15991  2CE5  0801               	movf	1,w
 15992  2CE6  31B2  228B  31AC   	fcall	_setChannelSwitch
 15993  2CE9                     l8953:	
 15994                           
 15995                           ;system.c: 431:  }
 15996  2CE9  3001               	movlw	1
 15997  2CEA  0140               	movlb	0	; select bank0
 15998  2CEB  00C0               	movwf	??_controller
 15999  2CEC  0840               	movf	??_controller,w
 16000  2CED  07C9               	addwf	controller@n,f
 16001  2CEE  3004               	movlw	4
 16002  2CEF  0249               	subwf	controller@n,w
 16003  2CF0  1C03               	skipc
 16004  2CF1  2C6B               	goto	l8943
 16005  2CF2                     l8957:	
 16006                           
 16007                           ;system.c: 432:  if (timer >= 100)
 16008  2CF2  0848               	movf	controller@timer+3,w
 16009  2CF3  1D03               	btfss	3,2
 16010  2CF4  2CFF               	goto	l8959
 16011  2CF5  0847               	movf	controller@timer+2,w
 16012  2CF6  1D03               	btfss	3,2
 16013  2CF7  2CFF               	goto	l8959
 16014  2CF8  0846               	movf	controller@timer+1,w
 16015  2CF9  1D03               	btfss	3,2
 16016  2CFA  2CFF               	goto	l8959
 16017  2CFB  3064               	movlw	100
 16018  2CFC  0245               	subwf	controller@timer,w
 16019  2CFD  1C03               	btfss	3,0
 16020  2CFE  2D02               	goto	l8961
 16021  2CFF                     l8959:	
 16022                           
 16023                           ;system.c: 433:   idle = 1;
 16024  2CFF  0142               	movlb	2	; select bank2
 16025  2D00  01E9               	clrf	controller@idle^(0+256)
 16026  2D01  0AE9               	incf	controller@idle^(0+256),f
 16027  2D02                     l8961:	
 16028                           
 16029                           ;system.c: 435:  return idle;
 16030  2D02  0142               	movlb	2	; select bank2
 16031  2D03  0869               	movf	controller@idle^(0+256),w
 16032  2D04  0008               	return
 16033  2D05                     __end_of_controller:	
 16034                           
 16035                           	psect	text33
 16036  2DE9                     __ptext33:	
 16037 ;; *************** function _checkSensor *****************
 16038 ;; Defined at:
 16039 ;;		line 194 in file "system.c"
 16040 ;; Parameters:    Size  Location     Type
 16041 ;;		None
 16042 ;; Auto vars:     Size  Location     Type
 16043 ;;		None
 16044 ;; Return value:  Size  Location     Type
 16045 ;;                  1    wreg      unsigned char 
 16046 ;; Registers used:
 16047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16048 ;; Tracked objects:
 16049 ;;		On entry : 0/0
 16050 ;;		On exit  : 0/0
 16051 ;;		Unchanged: 0/0
 16052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16056 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16057 ;;Total ram usage:        1 bytes
 16058 ;; Hardware stack levels used:    1
 16059 ;; Hardware stack levels required when called:    5
 16060 ;; This function calls:
 16061 ;;		___flge
 16062 ;;		_error
 16063 ;;		_timeSince
 16064 ;;		_uartReset
 16065 ;;		_uartSendByte
 16066 ;; This function is called by:
 16067 ;;		_main
 16068 ;; This function uses a non-reentrant model
 16069 ;;
 16070                           
 16071                           
 16072                           ;psect for function _checkSensor
 16073  2DE9                     _checkSensor:	
 16074                           
 16075                           ;system.c: 196:  static uint32_t sensorUpdateInterval = 100;;system.c: 197:  static uint
      +                          32_t sensorTimeout = 0;;system.c: 200:  if ((data.tempAux < -30) || (data.tempAux > 60))
      +                           {
 16076                           
 16077                           ;incstack = 0
 16078                           ; Regs used in _checkSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16079  2DE9  304A               	movlw	74
 16080  2DEA  0086               	movwf	6
 16081  2DEB  3027               	movlw	39
 16082  2DEC  0087               	movwf	7
 16083  2DED  314D               	addfsr 1,13
 16084  2DEE  3F40               	moviw [0]fsr1
 16085  2DEF  0141               	movlb	1	; select bank1
 16086  2DF0  00C9               	movwf	___flge@ff1^(0+128)
 16087  2DF1  3F41               	moviw [1]fsr1
 16088  2DF2  00CA               	movwf	(___flge@ff1+1)^(0+128)
 16089  2DF3  3F42               	moviw [2]fsr1
 16090  2DF4  00CB               	movwf	(___flge@ff1+2)^(0+128)
 16091  2DF5  3F43               	moviw [3]fsr1
 16092  2DF6  00CC               	movwf	(___flge@ff1+3)^(0+128)
 16093  2DF7  30C1               	movlw	193
 16094  2DF8  00D0               	movwf	(___flge@ff2+3)^(0+128)
 16095  2DF9  30F0               	movlw	240
 16096  2DFA  00CF               	movwf	(___flge@ff2+2)^(0+128)
 16097  2DFB  3000               	movlw	0
 16098  2DFC  00CE               	movwf	(___flge@ff2+1)^(0+128)
 16099  2DFD  3000               	movlw	0
 16100  2DFE  00CD               	movwf	___flge@ff2^(0+128)
 16101  2DFF  3198  202D  31AD   	fcall	___flge
 16102  2E02  1C03               	btfss	3,0
 16103  2E03  2E1F               	goto	l10989
 16104  2E04  3042               	movlw	66
 16105  2E05  0141               	movlb	1	; select bank1
 16106  2E06  00CC               	movwf	(___flge@ff1+3)^(0+128)
 16107  2E07  3070               	movlw	112
 16108  2E08  00CB               	movwf	(___flge@ff1+2)^(0+128)
 16109  2E09  3000               	movlw	0
 16110  2E0A  00CA               	movwf	(___flge@ff1+1)^(0+128)
 16111  2E0B  3000               	movlw	0
 16112  2E0C  00C9               	movwf	___flge@ff1^(0+128)
 16113  2E0D  304A               	movlw	74
 16114  2E0E  0086               	movwf	6
 16115  2E0F  3027               	movlw	39
 16116  2E10  0087               	movwf	7
 16117  2E11  314D               	addfsr 1,13
 16118  2E12  3F40               	moviw [0]fsr1
 16119  2E13  00CD               	movwf	___flge@ff2^(0+128)
 16120  2E14  3F41               	moviw [1]fsr1
 16121  2E15  00CE               	movwf	(___flge@ff2+1)^(0+128)
 16122  2E16  3F42               	moviw [2]fsr1
 16123  2E17  00CF               	movwf	(___flge@ff2+2)^(0+128)
 16124  2E18  3F43               	moviw [3]fsr1
 16125  2E19  00D0               	movwf	(___flge@ff2+3)^(0+128)
 16126  2E1A  3198  202D  31AD   	fcall	___flge
 16127  2E1D  1803               	btfsc	3,0
 16128  2E1E  2E25               	goto	l10991
 16129  2E1F                     l10989:	
 16130                           
 16131                           ;system.c: 201:   data.status.AUX_SENSOR_OK = 0;
 16132  2E1F  3073               	movlw	115
 16133  2E20  0086               	movwf	6
 16134  2E21  3027               	movlw	39
 16135  2E22  0087               	movwf	7
 16136  2E23  1201               	bcf	1,4
 16137                           
 16138                           ;system.c: 202:  } else
 16139  2E24  2E2A               	goto	l10993
 16140  2E25                     l10991:	
 16141                           
 16142                           ;system.c: 203:   data.status.AUX_SENSOR_OK = 1;
 16143  2E25  3073               	movlw	115
 16144  2E26  0086               	movwf	6
 16145  2E27  3027               	movlw	39
 16146  2E28  0087               	movwf	7
 16147  2E29  1601               	bsf	1,4
 16148  2E2A                     l10993:	
 16149                           
 16150                           ;system.c: 206:  if ((uartDataReadyFlag == 0) && (timeSince(sensorUpdateInterval) >= 100
      +                          )) {
 16151  2E2A  0140               	movlb	0	; select bank0
 16152  2E2B  0861               	movf	_uartDataReadyFlag,w	;volatile
 16153  2E2C  1D03               	btfss	3,2
 16154  2E2D  2E6C               	goto	l11001
 16155  2E2E  0144               	movlb	4	; select bank4
 16156  2E2F  085B               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
 16157  2E30  0140               	movlb	0	; select bank0
 16158  2E31  00AF               	movwf	timeSince@since+3
 16159  2E32  0144               	movlb	4	; select bank4
 16160  2E33  085A               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
 16161  2E34  0140               	movlb	0	; select bank0
 16162  2E35  00AE               	movwf	timeSince@since+2
 16163  2E36  0144               	movlb	4	; select bank4
 16164  2E37  0859               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
 16165  2E38  0140               	movlb	0	; select bank0
 16166  2E39  00AD               	movwf	timeSince@since+1
 16167  2E3A  0144               	movlb	4	; select bank4
 16168  2E3B  0858               	movf	checkSensor@sensorUpdateInterval^(0+512),w
 16169  2E3C  0140               	movlb	0	; select bank0
 16170  2E3D  00AC               	movwf	timeSince@since
 16171  2E3E  31B7  2780  31AD   	fcall	_timeSince
 16172  2E41  0140               	movlb	0	; select bank0
 16173  2E42  082F               	movf	?_timeSince+3,w
 16174  2E43  1D03               	btfss	3,2
 16175  2E44  2E4F               	goto	l10997
 16176  2E45  082E               	movf	?_timeSince+2,w
 16177  2E46  1D03               	btfss	3,2
 16178  2E47  2E4F               	goto	l10997
 16179  2E48  082D               	movf	?_timeSince+1,w
 16180  2E49  1D03               	btfss	3,2
 16181  2E4A  2E4F               	goto	l10997
 16182  2E4B  3064               	movlw	100
 16183  2E4C  022C               	subwf	?_timeSince,w
 16184  2E4D  1C03               	btfss	3,0
 16185  2E4E  2E6C               	goto	l11001
 16186  2E4F                     l10997:	
 16187                           
 16188                           ;system.c: 207:   sensorUpdateInterval = sensorTimeout = tick100ms;
 16189  2E4F  0143               	movlb	3	; select bank3
 16190  2E50  086E               	movf	(_tick100ms+3)^(0+384),w	;volatile
 16191  2E51  0144               	movlb	4	; select bank4
 16192  2E52  00A7               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
 16193  2E53  0143               	movlb	3	; select bank3
 16194  2E54  086D               	movf	(_tick100ms+2)^(0+384),w	;volatile
 16195  2E55  0144               	movlb	4	; select bank4
 16196  2E56  00A6               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
 16197  2E57  0143               	movlb	3	; select bank3
 16198  2E58  086C               	movf	(_tick100ms+1)^(0+384),w	;volatile
 16199  2E59  0144               	movlb	4	; select bank4
 16200  2E5A  00A5               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
 16201  2E5B  0143               	movlb	3	; select bank3
 16202  2E5C  086B               	movf	_tick100ms^(0+384),w	;volatile
 16203  2E5D  0144               	movlb	4	; select bank4
 16204  2E5E  00A4               	movwf	checkSensor@sensorTimeout^(0+512)
 16205  2E5F  0827               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 16206  2E60  00DB               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
 16207  2E61  0826               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 16208  2E62  00DA               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
 16209  2E63  0825               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 16210  2E64  00D9               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
 16211  2E65  0824               	movf	checkSensor@sensorTimeout^(0+512),w
 16212  2E66  00D8               	movwf	checkSensor@sensorUpdateInterval^(0+512)
 16213                           
 16214                           ;system.c: 208:   uartSendByte('?');
 16215  2E67  303F               	movlw	63
 16216  2E68  31BE  2661  31AD   	fcall	_uartSendByte
 16217                           
 16218                           ;system.c: 209:  } else if (uartDataReadyFlag == 1) {
 16219  2E6B  2EF0               	goto	l11039
 16220  2E6C                     l11001:	
 16221  2E6C  0140               	movlb	0	; select bank0
 16222  2E6D  0361               	decf	_uartDataReadyFlag,w	;volatile
 16223  2E6E  1D03               	btfss	3,2
 16224  2E6F  2EF0               	goto	l11039
 16225                           
 16226                           ;system.c: 210:   if (timeSince(sensorTimeout) > 20) {
 16227  2E70  0144               	movlb	4	; select bank4
 16228  2E71  0827               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 16229  2E72  0140               	movlb	0	; select bank0
 16230  2E73  00AF               	movwf	timeSince@since+3
 16231  2E74  0144               	movlb	4	; select bank4
 16232  2E75  0826               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 16233  2E76  0140               	movlb	0	; select bank0
 16234  2E77  00AE               	movwf	timeSince@since+2
 16235  2E78  0144               	movlb	4	; select bank4
 16236  2E79  0825               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 16237  2E7A  0140               	movlb	0	; select bank0
 16238  2E7B  00AD               	movwf	timeSince@since+1
 16239  2E7C  0144               	movlb	4	; select bank4
 16240  2E7D  0824               	movf	checkSensor@sensorTimeout^(0+512),w
 16241  2E7E  0140               	movlb	0	; select bank0
 16242  2E7F  00AC               	movwf	timeSince@since
 16243  2E80  31B7  2780  31AD   	fcall	_timeSince
 16244  2E83  0140               	movlb	0	; select bank0
 16245  2E84  082F               	movf	?_timeSince+3,w
 16246  2E85  1D03               	btfss	3,2
 16247  2E86  2E91               	goto	l11005
 16248  2E87  082E               	movf	?_timeSince+2,w
 16249  2E88  1D03               	btfss	3,2
 16250  2E89  2E91               	goto	l11005
 16251  2E8A  082D               	movf	?_timeSince+1,w
 16252  2E8B  1D03               	btfss	3,2
 16253  2E8C  2E91               	goto	l11005
 16254  2E8D  3015               	movlw	21
 16255  2E8E  022C               	subwf	?_timeSince,w
 16256  2E8F  1C03               	btfss	3,0
 16257  2E90  2EA2               	goto	l11015
 16258  2E91                     l11005:	
 16259                           
 16260                           ;system.c: 212:    uartDataReadyFlag = 0;
 16261  2E91  01E1               	clrf	_uartDataReadyFlag	;volatile
 16262                           
 16263                           ;system.c: 213:    uartReset();
 16264  2E92  31BE  2645  31AD   	fcall	_uartReset
 16265                           
 16266                           ;system.c: 214:    if (data.status.SENSOR_OK) {
 16267  2E95  3073               	movlw	115
 16268  2E96  0086               	movwf	6
 16269  2E97  3027               	movlw	39
 16270  2E98  0087               	movwf	7
 16271  2E99  1D81               	btfss	1,3
 16272  2E9A  2EF0               	goto	l11039
 16273                           
 16274                           ;system.c: 215:     data.status.SENSOR_OK = 0;
 16275  2E9B  3073               	movlw	115
 16276  2E9C  0086               	movwf	6
 16277  2E9D  3027               	movlw	39
 16278  2E9E  0087               	movwf	7
 16279  2E9F  1181               	bcf	1,3
 16280                           
 16281                           ;system.c: 216:     error(WARN_SENSOR_TIMEOUT);
 16282  2EA0  3007               	movlw	7
 16283  2EA1  2EEE               	goto	L14
 16284  2EA2                     l11015:	
 16285                           ;system.c: 218:   } else {
 16286                           
 16287                           ;system.c: 217:    }
 16288                           
 16289                           
 16290                           ;system.c: 219:    uartDataReadyFlag = 0;
 16291  2EA2  0140               	movlb	0	; select bank0
 16292  2EA3  01E1               	clrf	_uartDataReadyFlag	;volatile
 16293                           
 16294                           ;system.c: 221:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
 16295  2EA4  30AA               	movlw	170
 16296  2EA5  0144               	movlb	4	; select bank4
 16297  2EA6  0630               	xorwf	_dataPacket^(0+512),w	;volatile
 16298  2EA7  1D03               	btfss	3,2
 16299  2EA8  2EE2               	goto	l11033
 16300  2EA9  0332               	decf	(_dataPacket^(0+512)+2),w	;volatile
 16301  2EAA  1D03               	btfss	3,2
 16302  2EAB  2EE2               	goto	l11033
 16303                           
 16304                           ;system.c: 222:     data.tempC = dataPacket.tempC;
 16305  2EAC  304A               	movlw	74
 16306  2EAD  0086               	movwf	6
 16307  2EAE  3027               	movlw	39
 16308  2EAF  0087               	movwf	7
 16309  2EB0  0833               	movf	(_dataPacket^(0+512)+3),w	;volatile
 16310  2EB1  3FC0               	movwi [0]fsr1
 16311  2EB2  0834               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
 16312  2EB3  3FC1               	movwi [1]fsr1
 16313  2EB4  0835               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
 16314  2EB5  3FC2               	movwi [2]fsr1
 16315  2EB6  0836               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
 16316  2EB7  3FC3               	movwi [3]fsr1
 16317                           
 16318                           ;system.c: 223:     data.relHum = dataPacket.relHum;
 16319  2EB8  304A               	movlw	74
 16320  2EB9  0086               	movwf	6
 16321  2EBA  3027               	movlw	39
 16322  2EBB  0087               	movwf	7
 16323  2EBC  3144               	addfsr 1,4
 16324  2EBD  0837               	movf	(_dataPacket^(0+512)+7),w	;volatile
 16325  2EBE  3FC0               	movwi [0]fsr1
 16326  2EBF  0838               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
 16327  2EC0  3FC1               	movwi [1]fsr1
 16328  2EC1  0839               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
 16329  2EC2  3FC2               	movwi [2]fsr1
 16330  2EC3  083A               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
 16331  2EC4  3FC3               	movwi [3]fsr1
 16332                           
 16333                           ;system.c: 224:     data.dewPointC = dataPacket.dewPointC;
 16334  2EC5  304A               	movlw	74
 16335  2EC6  0086               	movwf	6
 16336  2EC7  3027               	movlw	39
 16337  2EC8  0087               	movwf	7
 16338  2EC9  3148               	addfsr 1,8
 16339  2ECA  083B               	movf	(_dataPacket^(0+512)+11),w	;volatile
 16340  2ECB  3FC0               	movwi [0]fsr1
 16341  2ECC  083C               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
 16342  2ECD  3FC1               	movwi [1]fsr1
 16343  2ECE  083D               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
 16344  2ECF  3FC2               	movwi [2]fsr1
 16345  2ED0  083E               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
 16346  2ED1  3FC3               	movwi [3]fsr1
 16347                           
 16348                           ;system.c: 225:     data.sensorVersion = dataPacket.version;
 16349  2ED2  0831               	movf	(_dataPacket^(0+512)+1),w	;volatile
 16350  2ED3  0140               	movlb	0	; select bank0
 16351  2ED4  00D6               	movwf	??_checkSensor
 16352  2ED5  3056               	movlw	86
 16353  2ED6  0086               	movwf	6
 16354  2ED7  3027               	movlw	39
 16355  2ED8  0087               	movwf	7
 16356  2ED9  0856               	movf	??_checkSensor,w
 16357  2EDA  0081               	movwf	1
 16358                           
 16359                           ;system.c: 226:     data.status.SENSOR_OK = 1;
 16360  2EDB  3073               	movlw	115
 16361  2EDC  0086               	movwf	6
 16362  2EDD  3027               	movlw	39
 16363  2EDE  0087               	movwf	7
 16364  2EDF  1581               	bsf	1,3
 16365                           
 16366                           ;system.c: 227:     return 1;
 16367  2EE0  3001               	movlw	1
 16368  2EE1  0008               	return
 16369  2EE2                     l11033:	
 16370                           ;system.c: 228:    } else {
 16371                           
 16372                           
 16373                           ;system.c: 230:     if (data.status.SENSOR_OK) {
 16374  2EE2  3073               	movlw	115
 16375  2EE3  0086               	movwf	6
 16376  2EE4  3027               	movlw	39
 16377  2EE5  0087               	movwf	7
 16378  2EE6  1D81               	btfss	1,3
 16379  2EE7  2EF0               	goto	l11039
 16380                           
 16381                           ;system.c: 231:      data.status.SENSOR_OK = 0;
 16382  2EE8  3073               	movlw	115
 16383  2EE9  0086               	movwf	6
 16384  2EEA  3027               	movlw	39
 16385  2EEB  0087               	movwf	7
 16386  2EEC  1181               	bcf	1,3
 16387                           
 16388                           ;system.c: 232:      error(WARN_SENSOR_CHECKSUM);
 16389  2EED  3008               	movlw	8
 16390  2EEE                     L14:	
 16391  2EEE  31B0  20C1         	fcall	_error
 16392  2EF0                     l11039:	
 16393                           ;system.c: 236:  }
 16394                           
 16395                           ;system.c: 235:   }
 16396                           
 16397                           ;system.c: 234:    }
 16398                           
 16399                           ;system.c: 233:     }
 16400                           
 16401                           
 16402                           ;system.c: 237:  return 0;
 16403  2EF0  3000               	movlw	0
 16404  2EF1  0008               	return
 16405  2EF2                     __end_of_checkSensor:	
 16406                           
 16407                           	psect	text34
 16408  3E61                     __ptext34:	
 16409 ;; *************** function _uartSendByte *****************
 16410 ;; Defined at:
 16411 ;;		line 16 in file "uart.c"
 16412 ;; Parameters:    Size  Location     Type
 16413 ;;  s               1    wreg     unsigned char 
 16414 ;; Auto vars:     Size  Location     Type
 16415 ;;  s               1   12[BANK0 ] unsigned char 
 16416 ;; Return value:  Size  Location     Type
 16417 ;;                  1    wreg      void 
 16418 ;; Registers used:
 16419 ;;		wreg
 16420 ;; Tracked objects:
 16421 ;;		On entry : 0/0
 16422 ;;		On exit  : 0/0
 16423 ;;		Unchanged: 0/0
 16424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16428 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16429 ;;Total ram usage:        1 bytes
 16430 ;; Hardware stack levels used:    1
 16431 ;; Hardware stack levels required when called:    3
 16432 ;; This function calls:
 16433 ;;		Nothing
 16434 ;; This function is called by:
 16435 ;;		_checkSensor
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           
 16440                           ;psect for function _uartSendByte
 16441  3E61                     _uartSendByte:	
 16442                           
 16443                           ;incstack = 0
 16444                           ; Regs used in _uartSendByte: [wreg]
 16445                           ;uartSendByte@s stored from wreg
 16446  3E61  0140               	movlb	0	; select bank0
 16447  3E62  00AC               	movwf	uartSendByte@s
 16448                           
 16449                           ;uart.c: 16: void uartSendByte(char s);uart.c: 17: {;uart.c: 18:  TX1REG = s;
 16450  3E63  082C               	movf	uartSendByte@s,w
 16451  3E64  0142               	movlb	2	; select bank2
 16452  3E65  009A               	movwf	26	;volatile
 16453                           
 16454                           ;uart.c: 19:  __nop();
 16455  3E66  0000               	nop
 16456  3E67                     l357:	
 16457                           ;uart.c: 20:  while (!PIR3bits.TX1IF);
 16458                           
 16459  3E67  014E               	movlb	14	; select bank14
 16460  3E68  1A0F               	btfsc	15,4	;volatile
 16461  3E69  0008               	return
 16462  3E6A  2E67               	goto	l357
 16463  3E6B                     __end_of_uartSendByte:	
 16464                           
 16465                           	psect	text35
 16466  3E45                     __ptext35:	
 16467 ;; *************** function _uartReset *****************
 16468 ;; Defined at:
 16469 ;;		line 63 in file "uart.c"
 16470 ;; Parameters:    Size  Location     Type
 16471 ;;		None
 16472 ;; Auto vars:     Size  Location     Type
 16473 ;;		None
 16474 ;; Return value:  Size  Location     Type
 16475 ;;                  1    wreg      void 
 16476 ;; Registers used:
 16477 ;;		status,2
 16478 ;; Tracked objects:
 16479 ;;		On entry : 0/0
 16480 ;;		On exit  : 0/0
 16481 ;;		Unchanged: 0/0
 16482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16487 ;;Total ram usage:        0 bytes
 16488 ;; Hardware stack levels used:    1
 16489 ;; Hardware stack levels required when called:    3
 16490 ;; This function calls:
 16491 ;;		Nothing
 16492 ;; This function is called by:
 16493 ;;		_checkSensor
 16494 ;; This function uses a non-reentrant model
 16495 ;;
 16496                           
 16497                           
 16498                           ;psect for function _uartReset
 16499  3E45                     _uartReset:	
 16500                           
 16501                           ;uart.c: 68:  RC1STAbits.CREN = 0;
 16502                           
 16503                           ;incstack = 0
 16504                           ; Regs used in _uartReset: [status,2]
 16505  3E45  0142               	movlb	2	; select bank2
 16506  3E46  121D               	bcf	29,4	;volatile
 16507                           
 16508                           ;uart.c: 69:  RC1STAbits.CREN = 1;
 16509  3E47  161D               	bsf	29,4	;volatile
 16510                           
 16511                           ;uart.c: 70:  RC1STAbits.SPEN = 0;
 16512  3E48  139D               	bcf	29,7	;volatile
 16513                           
 16514                           ;uart.c: 71:  RC1STAbits.SPEN = 1;
 16515  3E49  179D               	bsf	29,7	;volatile
 16516                           
 16517                           ;uart.c: 72:  rxCount = 0;
 16518  3E4A  0140               	movlb	0	; select bank0
 16519  3E4B  01DF               	clrf	_rxCount	;volatile
 16520  3E4C  0008               	return
 16521  3E4D                     __end_of_uartReset:	
 16522                           
 16523                           	psect	text36
 16524  3780                     __ptext36:	
 16525 ;; *************** function _timeSince *****************
 16526 ;; Defined at:
 16527 ;;		line 11 in file "interrupt.c"
 16528 ;; Parameters:    Size  Location     Type
 16529 ;;  since           4   12[BANK0 ] unsigned long 
 16530 ;; Auto vars:     Size  Location     Type
 16531 ;;  now             4   28[BANK0 ] unsigned long 
 16532 ;; Return value:  Size  Location     Type
 16533 ;;                  4   12[BANK0 ] unsigned long 
 16534 ;; Registers used:
 16535 ;;		wreg, status,2, status,0
 16536 ;; Tracked objects:
 16537 ;;		On entry : 0/0
 16538 ;;		On exit  : 0/0
 16539 ;;		Unchanged: 0/0
 16540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16542 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16543 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16544 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16545 ;;Total ram usage:       20 bytes
 16546 ;; Hardware stack levels used:    1
 16547 ;; Hardware stack levels required when called:    3
 16548 ;; This function calls:
 16549 ;;		Nothing
 16550 ;; This function is called by:
 16551 ;;		_main
 16552 ;;		_menu
 16553 ;;		_checkSensor
 16554 ;;		_controller
 16555 ;; This function uses a non-reentrant model
 16556 ;;
 16557                           
 16558                           
 16559                           ;psect for function _timeSince
 16560  3780                     _timeSince:	
 16561                           
 16562                           ;interrupt.c: 11: uint32_t timeSince(uint32_t since);interrupt.c: 12: {;interrupt.c: 13:
      +                            uint32_t now = tick100ms;
 16563                           
 16564                           ;incstack = 0
 16565                           ; Regs used in _timeSince: [wreg+status,2+status,0]
 16566  3780  0143               	movlb	3	; select bank3
 16567  3781  086E               	movf	(_tick100ms+3)^(0+384),w	;volatile
 16568  3782  0140               	movlb	0	; select bank0
 16569  3783  00BF               	movwf	timeSince@now+3
 16570  3784  0143               	movlb	3	; select bank3
 16571  3785  086D               	movf	(_tick100ms+2)^(0+384),w	;volatile
 16572  3786  0140               	movlb	0	; select bank0
 16573  3787  00BE               	movwf	timeSince@now+2
 16574  3788  0143               	movlb	3	; select bank3
 16575  3789  086C               	movf	(_tick100ms+1)^(0+384),w	;volatile
 16576  378A  0140               	movlb	0	; select bank0
 16577  378B  00BD               	movwf	timeSince@now+1
 16578  378C  0143               	movlb	3	; select bank3
 16579  378D  086B               	movf	_tick100ms^(0+384),w	;volatile
 16580  378E  0140               	movlb	0	; select bank0
 16581  378F  00BC               	movwf	timeSince@now
 16582                           
 16583                           ;interrupt.c: 14:  if (now >= since)
 16584  3790  082F               	movf	timeSince@since+3,w
 16585  3791  023F               	subwf	timeSince@now+3,w
 16586  3792  1D03               	skipz
 16587  3793  2F9E               	goto	u9995
 16588  3794  082E               	movf	timeSince@since+2,w
 16589  3795  023E               	subwf	timeSince@now+2,w
 16590  3796  1D03               	skipz
 16591  3797  2F9E               	goto	u9995
 16592  3798  082D               	movf	timeSince@since+1,w
 16593  3799  023D               	subwf	timeSince@now+1,w
 16594  379A  1D03               	skipz
 16595  379B  2F9E               	goto	u9995
 16596  379C  082C               	movf	timeSince@since,w
 16597  379D  023C               	subwf	timeSince@now,w
 16598  379E                     u9995:	
 16599  379E  1C03               	skipc
 16600  379F  2FC8               	goto	l7957
 16601                           
 16602                           ;interrupt.c: 15:   return (now - since);
 16603  37A0  083C               	movf	timeSince@now,w
 16604  37A1  00B0               	movwf	??_timeSince
 16605  37A2  083D               	movf	timeSince@now+1,w
 16606  37A3  00B1               	movwf	??_timeSince+1
 16607  37A4  083E               	movf	timeSince@now+2,w
 16608  37A5  00B2               	movwf	??_timeSince+2
 16609  37A6  083F               	movf	timeSince@now+3,w
 16610  37A7  00B3               	movwf	??_timeSince+3
 16611  37A8  092C               	comf	timeSince@since,w
 16612  37A9  00B4               	movwf	??_timeSince+4
 16613  37AA  092D               	comf	timeSince@since+1,w
 16614  37AB  00B5               	movwf	??_timeSince+5
 16615  37AC  092E               	comf	timeSince@since+2,w
 16616  37AD  00B6               	movwf	??_timeSince+6
 16617  37AE  092F               	comf	timeSince@since+3,w
 16618  37AF  00B7               	movwf	??_timeSince+7
 16619  37B0  0AB4               	incf	??_timeSince+4,f
 16620  37B1  1903               	skipnz
 16621  37B2  0AB5               	incf	??_timeSince+5,f
 16622  37B3  1903               	skipnz
 16623  37B4  0AB6               	incf	??_timeSince+6,f
 16624  37B5  1903               	skipnz
 16625  37B6  0AB7               	incf	??_timeSince+7,f
 16626  37B7  0834               	movf	??_timeSince+4,w
 16627  37B8  07B0               	addwf	??_timeSince,f
 16628  37B9  0835               	movf	??_timeSince+5,w
 16629  37BA  3DB1               	addwfc	??_timeSince+1,f
 16630  37BB  0836               	movf	??_timeSince+6,w
 16631  37BC  3DB2               	addwfc	??_timeSince+2,f
 16632  37BD  0837               	movf	??_timeSince+7,w
 16633  37BE  3DB3               	addwfc	??_timeSince+3,f
 16634  37BF  0833               	movf	??_timeSince+3,w
 16635  37C0  00AF               	movwf	?_timeSince+3
 16636  37C1  0832               	movf	??_timeSince+2,w
 16637  37C2  00AE               	movwf	?_timeSince+2
 16638  37C3  0831               	movf	??_timeSince+1,w
 16639  37C4  00AD               	movwf	?_timeSince+1
 16640  37C5  0830               	movf	??_timeSince,w
 16641  37C6  00AC               	movwf	?_timeSince
 16642  37C7  0008               	return
 16643  37C8                     l7957:	
 16644                           
 16645                           ;interrupt.c: 17:  return (now + (1 + 1000000000UL - since));
 16646  37C8  3001               	movlw	1
 16647  37C9  00B0               	movwf	??_timeSince
 16648  37CA  30CA               	movlw	202
 16649  37CB  00B1               	movwf	??_timeSince+1
 16650  37CC  309A               	movlw	154
 16651  37CD  00B2               	movwf	??_timeSince+2
 16652  37CE  303B               	movlw	59
 16653  37CF  00B3               	movwf	??_timeSince+3
 16654  37D0  083C               	movf	timeSince@now,w
 16655  37D1  00B4               	movwf	??_timeSince+4
 16656  37D2  083D               	movf	timeSince@now+1,w
 16657  37D3  00B5               	movwf	??_timeSince+5
 16658  37D4  083E               	movf	timeSince@now+2,w
 16659  37D5  00B6               	movwf	??_timeSince+6
 16660  37D6  083F               	movf	timeSince@now+3,w
 16661  37D7  00B7               	movwf	??_timeSince+7
 16662  37D8  092C               	comf	timeSince@since,w
 16663  37D9  00B8               	movwf	??_timeSince+8
 16664  37DA  092D               	comf	timeSince@since+1,w
 16665  37DB  00B9               	movwf	??_timeSince+9
 16666  37DC  092E               	comf	timeSince@since+2,w
 16667  37DD  00BA               	movwf	??_timeSince+10
 16668  37DE  092F               	comf	timeSince@since+3,w
 16669  37DF  00BB               	movwf	??_timeSince+11
 16670  37E0  0AB8               	incf	??_timeSince+8,f
 16671  37E1  1903               	skipnz
 16672  37E2  0AB9               	incf	??_timeSince+9,f
 16673  37E3  1903               	skipnz
 16674  37E4  0ABA               	incf	??_timeSince+10,f
 16675  37E5  1903               	skipnz
 16676  37E6  0ABB               	incf	??_timeSince+11,f
 16677  37E7  0838               	movf	??_timeSince+8,w
 16678  37E8  07B4               	addwf	??_timeSince+4,f
 16679  37E9  0839               	movf	??_timeSince+9,w
 16680  37EA  3DB5               	addwfc	??_timeSince+5,f
 16681  37EB  083A               	movf	??_timeSince+10,w
 16682  37EC  3DB6               	addwfc	??_timeSince+6,f
 16683  37ED  083B               	movf	??_timeSince+11,w
 16684  37EE  3DB7               	addwfc	??_timeSince+7,f
 16685  37EF  0834               	movf	??_timeSince+4,w
 16686  37F0  07B0               	addwf	??_timeSince,f
 16687  37F1  0835               	movf	??_timeSince+5,w
 16688  37F2  3DB1               	addwfc	??_timeSince+1,f
 16689  37F3  0836               	movf	??_timeSince+6,w
 16690  37F4  3DB2               	addwfc	??_timeSince+2,f
 16691  37F5  0837               	movf	??_timeSince+7,w
 16692  37F6  3DB3               	addwfc	??_timeSince+3,f
 16693  37F7  0833               	movf	??_timeSince+3,w
 16694  37F8  00AF               	movwf	?_timeSince+3
 16695  37F9  0832               	movf	??_timeSince+2,w
 16696  37FA  00AE               	movwf	?_timeSince+2
 16697  37FB  0831               	movf	??_timeSince+1,w
 16698  37FC  00AD               	movwf	?_timeSince+1
 16699  37FD  0830               	movf	??_timeSince,w
 16700  37FE  00AC               	movwf	?_timeSince
 16701  37FF  0008               	return
 16702  3800                     __end_of_timeSince:	
 16703                           
 16704                           	psect	text37
 16705  13DF                     __ptext37:	
 16706 ;; *************** function _checkChannelStatus *****************
 16707 ;; Defined at:
 16708 ;;		line 59 in file "system.c"
 16709 ;; Parameters:    Size  Location     Type
 16710 ;;		None
 16711 ;; Auto vars:     Size  Location     Type
 16712 ;;  current         4   13[BANK2 ] float 
 16713 ;;  heater          2   18[BANK2 ] PTR struct .
 16714 ;;		 -> data.heater(124), data(166), 
 16715 ;;  avg             2   11[BANK2 ] unsigned short 
 16716 ;;  adc             2    0[BANK2 ] unsigned short 
 16717 ;;  channel         1   17[BANK2 ] unsigned char 
 16718 ;;  samples         1    2[BANK2 ] unsigned char 
 16719 ;; Return value:  Size  Location     Type
 16720 ;;                  1    wreg      void 
 16721 ;; Registers used:
 16722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16723 ;; Tracked objects:
 16724 ;;		On entry : 0/0
 16725 ;;		On exit  : 0/0
 16726 ;;		Unchanged: 0/0
 16727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16729 ;;      Locals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16730 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16731 ;;      Totals:         0       0       4      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16732 ;;Total ram usage:       24 bytes
 16733 ;; Hardware stack levels used:    1
 16734 ;; Hardware stack levels required when called:    5
 16735 ;; This function calls:
 16736 ;;		___fldiv
 16737 ;;		___fleq
 16738 ;;		___flge
 16739 ;;		___flmul
 16740 ;;		___fltol
 16741 ;;		___wmul
 16742 ;;		___xxtofl
 16743 ;;		_ema
 16744 ;;		_error
 16745 ;;		_getAnalogValue
 16746 ;;		_setChannelSwitch
 16747 ;; This function is called by:
 16748 ;;		_main
 16749 ;; This function uses a non-reentrant model
 16750 ;;
 16751                           
 16752                           
 16753                           ;psect for function _checkChannelStatus
 16754  13DF                     _checkChannelStatus:	
 16755                           
 16756                           ;system.c: 61:  uint16_t adc, avg;;system.c: 62:  uint8_t channel, samples;;system.c: 63
      +                          :  float current;;system.c: 64:  t_heater *heater;;system.c: 66:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 16757                           
 16758                           ;incstack = 0
 16759                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16760  13DF  0142               	movlb	2	; select bank2
 16761  13E0  01B1               	clrf	checkChannelStatus@channel^(0+256)
 16762  13E1                     L20:	
 16763  13E1  3004               	movlw	4
 16764  13E2  0231               	subwf	checkChannelStatus@channel^(0+256),w
 16765  13E3  1803               	btfsc	3,0
 16766  13E4  0008               	return
 16767                           
 16768                           ;system.c: 68:   heater = &(data.heater)[channel];
 16769  13E5  0831               	movf	checkChannelStatus@channel^(0+256),w
 16770  13E6  0141               	movlb	1	; select bank1
 16771  13E7  00D9               	movwf	??_checkChannelStatus^(0+128)
 16772  13E8  01DA               	clrf	(??_checkChannelStatus^(0+128)+1)
 16773  13E9  0859               	movf	??_checkChannelStatus^(0+128),w
 16774  13EA  0140               	movlb	0	; select bank0
 16775  13EB  00B5               	movwf	___wmul@multiplier
 16776  13EC  0141               	movlb	1	; select bank1
 16777  13ED  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16778  13EE  0140               	movlb	0	; select bank0
 16779  13EF  00B6               	movwf	___wmul@multiplier+1
 16780  13F0  301F               	movlw	31
 16781  13F1  00B7               	movwf	___wmul@multiplicand
 16782  13F2  3000               	movlw	0
 16783  13F3  00B8               	movwf	___wmul@multiplicand+1
 16784  13F4  31BF  270A  3193   	fcall	___wmul
 16785  13F7  3074               	movlw	116
 16786  13F8  0141               	movlb	1	; select bank1
 16787  13F9  00DB               	movwf	(??_checkChannelStatus+2)^(0+128)
 16788  13FA  3027               	movlw	39
 16789  13FB  00DC               	movwf	((??_checkChannelStatus+2)^(0+128)+1)
 16790  13FC  0140               	movlb	0	; select bank0
 16791  13FD  0835               	movf	?___wmul,w
 16792  13FE  0141               	movlb	1	; select bank1
 16793  13FF  075B               	addwf	(??_checkChannelStatus+2)^(0+128),w
 16794  1400  0142               	movlb	2	; select bank2
 16795  1401  00B2               	movwf	checkChannelStatus@heater^(0+256)
 16796  1402  0140               	movlb	0	; select bank0
 16797  1403  0836               	movf	?___wmul+1,w
 16798  1404  0141               	movlb	1	; select bank1
 16799  1405  3D5C               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 16800  1406  0142               	movlb	2	; select bank2
 16801  1407  00B3               	movwf	(checkChannelStatus@heater+1)^(0+256)
 16802                           
 16803                           ;system.c: 70:   if (heater->status == CH_OVERCURRENT)
 16804  1408  0832               	movf	checkChannelStatus@heater^(0+256),w
 16805  1409  0086               	movwf	6
 16806  140A  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 16807  140B  0087               	movwf	7
 16808  140C  315E               	addfsr 1,30
 16809  140D  3004               	movlw	4
 16810  140E  0601               	xorwf	1,w
 16811  140F  1903               	btfsc	3,2
 16812  1410  2FF9               	goto	l11167
 16813                           
 16814                           ;system.c: 73:   setChannelSwitch(channel, 1);
 16815                           
 16816                           ;system.c: 71:    continue;
 16817  1411  0140               	movlb	0	; select bank0
 16818  1412  01B0               	clrf	setChannelSwitch@state
 16819  1413  0AB0               	incf	setChannelSwitch@state,f
 16820  1414  0142               	movlb	2	; select bank2
 16821  1415  0831               	movf	checkChannelStatus@channel^(0+256),w
 16822  1416  31B2  228B  3193   	fcall	_setChannelSwitch
 16823                           
 16824                           ;system.c: 74:   samples = 0;
 16825  1419  0142               	movlb	2	; select bank2
 16826  141A  01A2               	clrf	checkChannelStatus@samples^(0+256)
 16827                           
 16828                           ;system.c: 76:   avg = 0;
 16829  141B  01AB               	clrf	checkChannelStatus@avg^(0+256)
 16830  141C  01AC               	clrf	(checkChannelStatus@avg+1)^(0+256)
 16831  141D                     l11093:	
 16832                           ;system.c: 77:   do {
 16833                           
 16834                           
 16835                           ;system.c: 78:    adc = getAnalogValue(0b010001);
 16836  141D  3011               	movlw	17
 16837  141E  31BF  2726  3193   	fcall	_getAnalogValue
 16838  1421  0140               	movlb	0	; select bank0
 16839  1422  082D               	movf	?_getAnalogValue+1,w
 16840  1423  0142               	movlb	2	; select bank2
 16841  1424  00A1               	movwf	(checkChannelStatus@adc+1)^(0+256)
 16842  1425  0140               	movlb	0	; select bank0
 16843  1426  082C               	movf	?_getAnalogValue,w
 16844  1427  0142               	movlb	2	; select bank2
 16845  1428  00A0               	movwf	checkChannelStatus@adc^(0+256)
 16846                           
 16847                           ;system.c: 80:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 16848  1429  0821               	movf	(checkChannelStatus@adc+1)^(0+256),w
 16849  142A  0140               	movlb	0	; select bank0
 16850  142B  00B9               	movwf	ema@in+1
 16851  142C  0142               	movlb	2	; select bank2
 16852  142D  0820               	movf	checkChannelStatus@adc^(0+256),w
 16853  142E  0140               	movlb	0	; select bank0
 16854  142F  00B8               	movwf	ema@in
 16855  1430  0142               	movlb	2	; select bank2
 16856  1431  082C               	movf	(checkChannelStatus@avg+1)^(0+256),w
 16857  1432  0140               	movlb	0	; select bank0
 16858  1433  00BB               	movwf	ema@average+1
 16859  1434  0142               	movlb	2	; select bank2
 16860  1435  082B               	movf	checkChannelStatus@avg^(0+256),w
 16861  1436  0140               	movlb	0	; select bank0
 16862  1437  00BA               	movwf	ema@average
 16863  1438  3000               	movlw	0
 16864  1439  00BF               	movwf	ema@alpha+3
 16865  143A  3000               	movlw	0
 16866  143B  00BE               	movwf	ema@alpha+2
 16867  143C  30B3               	movlw	179
 16868  143D  00BD               	movwf	ema@alpha+1
 16869  143E  3032               	movlw	50
 16870  143F  00BC               	movwf	ema@alpha
 16871  1440  31B5  2540  3193   	fcall	_ema
 16872  1443  0140               	movlb	0	; select bank0
 16873  1444  0839               	movf	?_ema+1,w
 16874  1445  0142               	movlb	2	; select bank2
 16875  1446  00AC               	movwf	(checkChannelStatus@avg+1)^(0+256)
 16876  1447  0140               	movlb	0	; select bank0
 16877  1448  0838               	movf	?_ema,w
 16878  1449  0142               	movlb	2	; select bank2
 16879  144A  00AB               	movwf	checkChannelStatus@avg^(0+256)
 16880                           
 16881                           ;system.c: 81:   } while (samples++ < 50);
 16882  144B  0822               	movf	checkChannelStatus@samples^(0+256),w
 16883  144C  0AA2               	incf	checkChannelStatus@samples^(0+256),f
 16884  144D  0141               	movlb	1	; select bank1
 16885  144E  00D9               	movwf	??_checkChannelStatus^(0+128)
 16886  144F  3032               	movlw	50
 16887  1450  0259               	subwf	??_checkChannelStatus^(0+128),w
 16888  1451  1C03               	skipc
 16889  1452  2C1D               	goto	l11093
 16890                           
 16891                           ;system.c: 82:   setChannelSwitch(channel, 0);
 16892  1453  0140               	movlb	0	; select bank0
 16893  1454  01B0               	clrf	setChannelSwitch@state
 16894  1455  0142               	movlb	2	; select bank2
 16895  1456  0831               	movf	checkChannelStatus@channel^(0+256),w
 16896  1457  31B2  228B  3193   	fcall	_setChannelSwitch
 16897                           
 16898                           ;system.c: 85:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 16899  145A  3045               	movlw	69
 16900  145B  0141               	movlb	1	; select bank1
 16901  145C  00B0               	movwf	(___fldiv@a+3)^(0+128)
 16902  145D  301F               	movlw	31
 16903  145E  00AF               	movwf	(___fldiv@a+2)^(0+128)
 16904  145F  30D8               	movlw	216
 16905  1460  00AE               	movwf	(___fldiv@a+1)^(0+128)
 16906  1461  3000               	movlw	0
 16907  1462  00AD               	movwf	___fldiv@a^(0+128)
 16908  1463  3040               	movlw	64
 16909  1464  0140               	movlb	0	; select bank0
 16910  1465  00CC               	movwf	___flmul@b+3
 16911  1466  30A0               	movlw	160
 16912  1467  00CB               	movwf	___flmul@b+2
 16913  1468  3000               	movlw	0
 16914  1469  00CA               	movwf	___flmul@b+1
 16915  146A  3000               	movlw	0
 16916  146B  00C9               	movwf	___flmul@b
 16917  146C  0142               	movlb	2	; select bank2
 16918  146D  082B               	movf	checkChannelStatus@avg^(0+256),w
 16919  146E  0140               	movlb	0	; select bank0
 16920  146F  00BB               	movwf	___xxtofl@val
 16921  1470  0142               	movlb	2	; select bank2
 16922  1471  082C               	movf	(checkChannelStatus@avg+1)^(0+256),w
 16923  1472  0140               	movlb	0	; select bank0
 16924  1473  00BC               	movwf	___xxtofl@val+1
 16925  1474  01BD               	clrf	___xxtofl@val+2
 16926  1475  01BE               	clrf	___xxtofl@val+3
 16927  1476  3000               	movlw	0
 16928  1477  31AA  22D4  3193   	fcall	___xxtofl
 16929  147A  0140               	movlb	0	; select bank0
 16930  147B  083E               	movf	?___xxtofl+3,w
 16931  147C  00D0               	movwf	___flmul@a+3
 16932  147D  083D               	movf	?___xxtofl+2,w
 16933  147E  00CF               	movwf	___flmul@a+2
 16934  147F  083C               	movf	?___xxtofl+1,w
 16935  1480  00CE               	movwf	___flmul@a+1
 16936  1481  083B               	movf	?___xxtofl,w
 16937  1482  00CD               	movwf	___flmul@a
 16938  1483  3188  20BA  3193   	fcall	___flmul
 16939  1486  0140               	movlb	0	; select bank0
 16940  1487  084C               	movf	?___flmul+3,w
 16941  1488  0141               	movlb	1	; select bank1
 16942  1489  00B4               	movwf	(___fldiv@b+3)^(0+128)
 16943  148A  0140               	movlb	0	; select bank0
 16944  148B  084B               	movf	?___flmul+2,w
 16945  148C  0141               	movlb	1	; select bank1
 16946  148D  00B3               	movwf	(___fldiv@b+2)^(0+128)
 16947  148E  0140               	movlb	0	; select bank0
 16948  148F  084A               	movf	?___flmul+1,w
 16949  1490  0141               	movlb	1	; select bank1
 16950  1491  00B2               	movwf	(___fldiv@b+1)^(0+128)
 16951  1492  0140               	movlb	0	; select bank0
 16952  1493  0849               	movf	?___flmul,w
 16953  1494  0141               	movlb	1	; select bank1
 16954  1495  00B1               	movwf	___fldiv@b^(0+128)
 16955  1496  31A6  266D  3193   	fcall	___fldiv
 16956  1499  0141               	movlb	1	; select bank1
 16957  149A  0830               	movf	(?___fldiv+3)^(0+128),w
 16958  149B  0142               	movlb	2	; select bank2
 16959  149C  00B0               	movwf	(checkChannelStatus@current+3)^(0+256)
 16960  149D  0141               	movlb	1	; select bank1
 16961  149E  082F               	movf	(?___fldiv+2)^(0+128),w
 16962  149F  0142               	movlb	2	; select bank2
 16963  14A0  00AF               	movwf	(checkChannelStatus@current+2)^(0+256)
 16964  14A1  0141               	movlb	1	; select bank1
 16965  14A2  082E               	movf	(?___fldiv+1)^(0+128),w
 16966  14A3  0142               	movlb	2	; select bank2
 16967  14A4  00AE               	movwf	(checkChannelStatus@current+1)^(0+256)
 16968  14A5  0141               	movlb	1	; select bank1
 16969  14A6  082D               	movf	?___fldiv^(0+128),w
 16970  14A7  0142               	movlb	2	; select bank2
 16971  14A8  00AD               	movwf	checkChannelStatus@current^(0+256)
 16972                           
 16973                           ;system.c: 88:   if (current < 0.05) {
 16974  14A9  0830               	movf	(checkChannelStatus@current+3)^(0+256),w
 16975  14AA  0141               	movlb	1	; select bank1
 16976  14AB  00CC               	movwf	(___flge@ff1+3)^(0+128)
 16977  14AC  0142               	movlb	2	; select bank2
 16978  14AD  082F               	movf	(checkChannelStatus@current+2)^(0+256),w
 16979  14AE  0141               	movlb	1	; select bank1
 16980  14AF  00CB               	movwf	(___flge@ff1+2)^(0+128)
 16981  14B0  0142               	movlb	2	; select bank2
 16982  14B1  082E               	movf	(checkChannelStatus@current+1)^(0+256),w
 16983  14B2  0141               	movlb	1	; select bank1
 16984  14B3  00CA               	movwf	(___flge@ff1+1)^(0+128)
 16985  14B4  0142               	movlb	2	; select bank2
 16986  14B5  082D               	movf	checkChannelStatus@current^(0+256),w
 16987  14B6  0141               	movlb	1	; select bank1
 16988  14B7  00C9               	movwf	___flge@ff1^(0+128)
 16989  14B8  303D               	movlw	61
 16990  14B9  00D0               	movwf	(___flge@ff2+3)^(0+128)
 16991  14BA  304C               	movlw	76
 16992  14BB  00CF               	movwf	(___flge@ff2+2)^(0+128)
 16993  14BC  30CC               	movlw	204
 16994  14BD  00CE               	movwf	(___flge@ff2+1)^(0+128)
 16995  14BE  30CD               	movlw	205
 16996  14BF  00CD               	movwf	___flge@ff2^(0+128)
 16997  14C0  3198  202D  3193   	fcall	___flge
 16998  14C3  1803               	btfsc	3,0
 16999  14C4  2CE2               	goto	l11111
 17000                           
 17001                           ;system.c: 90:    if (heater->status == CH_ENABLED)
 17002  14C5  0142               	movlb	2	; select bank2
 17003  14C6  0832               	movf	checkChannelStatus@heater^(0+256),w
 17004  14C7  0086               	movwf	6
 17005  14C8  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17006  14C9  0087               	movwf	7
 17007  14CA  315E               	addfsr 1,30
 17008  14CB  0301               	decf	1,w
 17009  14CC  1D03               	btfss	3,2
 17010  14CD  2CD2               	goto	l11109
 17011                           
 17012                           ;system.c: 91:     error(WARN_REMOVED);
 17013  14CE  3001               	movlw	1
 17014  14CF  31B0  20C1  3193   	fcall	_error
 17015  14D2                     l11109:	
 17016                           
 17017                           ;system.c: 92:    heater->status = CH_OPEN;
 17018  14D2  0142               	movlb	2	; select bank2
 17019  14D3  0832               	movf	checkChannelStatus@heater^(0+256),w
 17020  14D4  3E1E               	addlw	30
 17021  14D5  0141               	movlb	1	; select bank1
 17022  14D6  00D9               	movwf	??_checkChannelStatus^(0+128)
 17023  14D7  3000               	movlw	0
 17024  14D8  0142               	movlb	2	; select bank2
 17025  14D9  3D33               	addwfc	(checkChannelStatus@heater+1)^(0+256),w
 17026  14DA  0141               	movlb	1	; select bank1
 17027  14DB  00DA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17028  14DC  0859               	movf	??_checkChannelStatus^(0+128),w
 17029  14DD  0086               	movwf	6
 17030  14DE  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17031  14DF  0087               	movwf	7
 17032  14E0  3002               	movlw	2
 17033  14E1  2FF8               	goto	L17
 17034  14E2                     l11111:	
 17035                           ;system.c: 93:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 17036                           
 17037  14E2  3040               	movlw	64
 17038  14E3  0141               	movlb	1	; select bank1
 17039  14E4  00CC               	movwf	(___flge@ff1+3)^(0+128)
 17040  14E5  3000               	movlw	0
 17041  14E6  00CB               	movwf	(___flge@ff1+2)^(0+128)
 17042  14E7  3000               	movlw	0
 17043  14E8  00CA               	movwf	(___flge@ff1+1)^(0+128)
 17044  14E9  3000               	movlw	0
 17045  14EA  00C9               	movwf	___flge@ff1^(0+128)
 17046  14EB  0142               	movlb	2	; select bank2
 17047  14EC  0830               	movf	(checkChannelStatus@current+3)^(0+256),w
 17048  14ED  0141               	movlb	1	; select bank1
 17049  14EE  00D0               	movwf	(___flge@ff2+3)^(0+128)
 17050  14EF  0142               	movlb	2	; select bank2
 17051  14F0  082F               	movf	(checkChannelStatus@current+2)^(0+256),w
 17052  14F1  0141               	movlb	1	; select bank1
 17053  14F2  00CF               	movwf	(___flge@ff2+2)^(0+128)
 17054  14F3  0142               	movlb	2	; select bank2
 17055  14F4  082E               	movf	(checkChannelStatus@current+1)^(0+256),w
 17056  14F5  0141               	movlb	1	; select bank1
 17057  14F6  00CE               	movwf	(___flge@ff2+1)^(0+128)
 17058  14F7  0142               	movlb	2	; select bank2
 17059  14F8  082D               	movf	checkChannelStatus@current^(0+256),w
 17060  14F9  0141               	movlb	1	; select bank1
 17061  14FA  00CD               	movwf	___flge@ff2^(0+128)
 17062  14FB  3198  202D  3193   	fcall	___flge
 17063  14FE  1C03               	btfss	3,0
 17064  14FF  2D03               	goto	l11115
 17065  1500  0140               	movlb	0	; select bank0
 17066  1501  190E               	btfsc	14,2	;volatile
 17067  1502  2D37               	goto	l11129
 17068  1503                     l11115:	
 17069                           
 17070                           ;system.c: 96:    error(WARN_HEATER_OVERCURRENT);
 17071  1503  3004               	movlw	4
 17072  1504  31B0  20C1  3193   	fcall	_error
 17073                           
 17074                           ;system.c: 97:    heater->status = CH_OVERCURRENT;
 17075  1507  0142               	movlb	2	; select bank2
 17076  1508  0832               	movf	checkChannelStatus@heater^(0+256),w
 17077  1509  3E1E               	addlw	30
 17078  150A  0141               	movlb	1	; select bank1
 17079  150B  00D9               	movwf	??_checkChannelStatus^(0+128)
 17080  150C  3000               	movlw	0
 17081  150D  0142               	movlb	2	; select bank2
 17082  150E  3D33               	addwfc	(checkChannelStatus@heater+1)^(0+256),w
 17083  150F  0141               	movlb	1	; select bank1
 17084  1510  00DA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17085  1511  0859               	movf	??_checkChannelStatus^(0+128),w
 17086  1512  0086               	movwf	6
 17087  1513  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17088  1514  0087               	movwf	7
 17089  1515  3004               	movlw	4
 17090  1516  0081               	movwf	1
 17091                           
 17092                           ;system.c: 99:    if (!PORTCbits.RC2) {
 17093  1517  0140               	movlb	0	; select bank0
 17094  1518  190E               	btfsc	14,2	;volatile
 17095  1519  2FF9               	goto	l11167
 17096                           
 17097                           ;system.c: 100:     heater->status = CH_SHORTED;
 17098  151A  0142               	movlb	2	; select bank2
 17099  151B  0832               	movf	checkChannelStatus@heater^(0+256),w
 17100  151C  3E1E               	addlw	30
 17101  151D  0141               	movlb	1	; select bank1
 17102  151E  00D9               	movwf	??_checkChannelStatus^(0+128)
 17103  151F  3000               	movlw	0
 17104  1520  0142               	movlb	2	; select bank2
 17105  1521  3D33               	addwfc	(checkChannelStatus@heater+1)^(0+256),w
 17106  1522  0141               	movlb	1	; select bank1
 17107  1523  00DA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17108  1524  0859               	movf	??_checkChannelStatus^(0+128),w
 17109  1525  0086               	movwf	6
 17110  1526  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17111  1527  0087               	movwf	7
 17112  1528  3003               	movlw	3
 17113  1529  0081               	movwf	1
 17114                           
 17115                           ;system.c: 101:     LATCbits.LATC3 = 0;
 17116  152A  0140               	movlb	0	; select bank0
 17117  152B  119A               	bcf	26,3	;volatile
 17118                           
 17119                           ;system.c: 102:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 17120  152C  3007               	movlw	7
 17121  152D  0141               	movlb	1	; select bank1
 17122  152E  00D9               	movwf	??_checkChannelStatus^(0+128)
 17123  152F  307D               	movlw	125
 17124  1530                     u14917:	
 17125  1530  0B89               	decfsz	9,f
 17126  1531  2D30               	goto	u14917
 17127  1532  0BD9               	decfsz	??_checkChannelStatus^(0+128),f
 17128  1533  2D30               	goto	u14917
 17129                           
 17130                           ;system.c: 103:     LATCbits.LATC3 = 1;
 17131  1534  0140               	movlb	0	; select bank0
 17132  1535  159A               	bsf	26,3	;volatile
 17133                           
 17134                           ;system.c: 105:   } else {
 17135                           
 17136                           ;system.c: 104:    }
 17137  1536  2FF9               	goto	l11167
 17138  1537                     l11129:	
 17139                           
 17140                           ;system.c: 106:    heater->current = current;
 17141  1537  0142               	movlb	2	; select bank2
 17142  1538  0832               	movf	checkChannelStatus@heater^(0+256),w
 17143  1539  0086               	movwf	6
 17144  153A  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17145  153B  0087               	movwf	7
 17146  153C  082D               	movf	checkChannelStatus@current^(0+256),w
 17147  153D  3FC0               	movwi [0]fsr1
 17148  153E  082E               	movf	(checkChannelStatus@current+1)^(0+256),w
 17149  153F  3FC1               	movwi [1]fsr1
 17150  1540  082F               	movf	(checkChannelStatus@current+2)^(0+256),w
 17151  1541  3FC2               	movwi [2]fsr1
 17152  1542  0830               	movf	(checkChannelStatus@current+3)^(0+256),w
 17153  1543  3FC3               	movwi [3]fsr1
 17154                           
 17155                           ;system.c: 107:    heater->Pmax = data.voltage * current;
 17156  1544  0830               	movf	(checkChannelStatus@current+3)^(0+256),w
 17157  1545  0140               	movlb	0	; select bank0
 17158  1546  00CC               	movwf	___flmul@b+3
 17159  1547  0142               	movlb	2	; select bank2
 17160  1548  082F               	movf	(checkChannelStatus@current+2)^(0+256),w
 17161  1549  0140               	movlb	0	; select bank0
 17162  154A  00CB               	movwf	___flmul@b+2
 17163  154B  0142               	movlb	2	; select bank2
 17164  154C  082E               	movf	(checkChannelStatus@current+1)^(0+256),w
 17165  154D  0140               	movlb	0	; select bank0
 17166  154E  00CA               	movwf	___flmul@b+1
 17167  154F  0142               	movlb	2	; select bank2
 17168  1550  082D               	movf	checkChannelStatus@current^(0+256),w
 17169  1551  0140               	movlb	0	; select bank0
 17170  1552  00C9               	movwf	___flmul@b
 17171  1553  304A               	movlw	74
 17172  1554  0086               	movwf	6
 17173  1555  3027               	movlw	39
 17174  1556  0087               	movwf	7
 17175  1557  3151               	addfsr 1,17
 17176  1558  3F40               	moviw [0]fsr1
 17177  1559  00CD               	movwf	___flmul@a
 17178  155A  3F41               	moviw [1]fsr1
 17179  155B  00CE               	movwf	___flmul@a+1
 17180  155C  3F42               	moviw [2]fsr1
 17181  155D  00CF               	movwf	___flmul@a+2
 17182  155E  3F43               	moviw [3]fsr1
 17183  155F  00D0               	movwf	___flmul@a+3
 17184  1560  3188  20BA  3193   	fcall	___flmul
 17185  1563  0142               	movlb	2	; select bank2
 17186  1564  0832               	movf	checkChannelStatus@heater^(0+256),w
 17187  1565  0086               	movwf	6
 17188  1566  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17189  1567  0087               	movwf	7
 17190  1568  3144               	addfsr 1,4
 17191  1569  0140               	movlb	0	; select bank0
 17192  156A  0849               	movf	?___flmul,w
 17193  156B  3FC0               	movwi [0]fsr1
 17194  156C  084A               	movf	?___flmul+1,w
 17195  156D  3FC1               	movwi [1]fsr1
 17196  156E  084B               	movf	?___flmul+2,w
 17197  156F  3FC2               	movwi [2]fsr1
 17198  1570  084C               	movf	?___flmul+3,w
 17199  1571  3FC3               	movwi [3]fsr1
 17200                           
 17201                           ;system.c: 110:    if (heater->Pset > heater->Pmax)
 17202  1572  0142               	movlb	2	; select bank2
 17203  1573  0832               	movf	checkChannelStatus@heater^(0+256),w
 17204  1574  0086               	movwf	6
 17205  1575  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17206  1576  0087               	movwf	7
 17207  1577  3144               	addfsr 1,4
 17208  1578  3F40               	moviw [0]fsr1
 17209  1579  0141               	movlb	1	; select bank1
 17210  157A  00C9               	movwf	___flge@ff1^(0+128)
 17211  157B  3F41               	moviw [1]fsr1
 17212  157C  00CA               	movwf	(___flge@ff1+1)^(0+128)
 17213  157D  3F42               	moviw [2]fsr1
 17214  157E  00CB               	movwf	(___flge@ff1+2)^(0+128)
 17215  157F  3F43               	moviw [3]fsr1
 17216  1580  00CC               	movwf	(___flge@ff1+3)^(0+128)
 17217  1581  0142               	movlb	2	; select bank2
 17218  1582  0832               	movf	checkChannelStatus@heater^(0+256),w
 17219  1583  0086               	movwf	6
 17220  1584  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17221  1585  0087               	movwf	7
 17222  1586  3150               	addfsr 1,16
 17223  1587  3F40               	moviw [0]fsr1
 17224  1588  0141               	movlb	1	; select bank1
 17225  1589  00CD               	movwf	___flge@ff2^(0+128)
 17226  158A  3F41               	moviw [1]fsr1
 17227  158B  00CE               	movwf	(___flge@ff2+1)^(0+128)
 17228  158C  3F42               	moviw [2]fsr1
 17229  158D  00CF               	movwf	(___flge@ff2+2)^(0+128)
 17230  158E  3F43               	moviw [3]fsr1
 17231  158F  00D0               	movwf	(___flge@ff2+3)^(0+128)
 17232  1590  3198  202D  3193   	fcall	___flge
 17233  1593  1803               	btfsc	3,0
 17234  1594  2DB3               	goto	l731
 17235                           
 17236                           ;system.c: 111:     heater->Pset = heater->Pmax;
 17237  1595  0142               	movlb	2	; select bank2
 17238  1596  0832               	movf	checkChannelStatus@heater^(0+256),w
 17239  1597  0086               	movwf	6
 17240  1598  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17241  1599  0087               	movwf	7
 17242  159A  3144               	addfsr 1,4
 17243  159B  3F40               	moviw [0]fsr1
 17244  159C  0141               	movlb	1	; select bank1
 17245  159D  00D9               	movwf	??_checkChannelStatus^(0+128)
 17246  159E  3F41               	moviw [1]fsr1
 17247  159F  00DA               	movwf	(??_checkChannelStatus^(0+128)+1)
 17248  15A0  3F42               	moviw [2]fsr1
 17249  15A1  00DB               	movwf	(??_checkChannelStatus^(0+128)+2)
 17250  15A2  3F43               	moviw [3]fsr1
 17251  15A3  00DC               	movwf	(??_checkChannelStatus^(0+128)+3)
 17252  15A4  0142               	movlb	2	; select bank2
 17253  15A5  0832               	movf	checkChannelStatus@heater^(0+256),w
 17254  15A6  0086               	movwf	6
 17255  15A7  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17256  15A8  0087               	movwf	7
 17257  15A9  3150               	addfsr 1,16
 17258  15AA  0141               	movlb	1	; select bank1
 17259  15AB  0859               	movf	??_checkChannelStatus^(0+128),w
 17260  15AC  3FC0               	movwi [0]fsr1
 17261  15AD  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17262  15AE  3FC1               	movwi [1]fsr1
 17263  15AF  085B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17264  15B0  3FC2               	movwi [2]fsr1
 17265  15B1  085C               	movf	(??_checkChannelStatus+3)^(0+128),w
 17266  15B2  3FC3               	movwi [3]fsr1
 17267  15B3                     l731:	
 17268                           
 17269                           ;system.c: 113:    if (data.status.SENSOR_OK) {
 17270  15B3  3073               	movlw	115
 17271  15B4  0086               	movwf	6
 17272  15B5  3027               	movlw	39
 17273  15B6  0087               	movwf	7
 17274  15B7  1D81               	btfss	1,3
 17275  15B8  2E04               	goto	l11145
 17276                           
 17277                           ;system.c: 114:     if (heater->Pset < 0)
 17278  15B9  0142               	movlb	2	; select bank2
 17279  15BA  0832               	movf	checkChannelStatus@heater^(0+256),w
 17280  15BB  0086               	movwf	6
 17281  15BC  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17282  15BD  0087               	movwf	7
 17283  15BE  3150               	addfsr 1,16
 17284  15BF  3F40               	moviw [0]fsr1
 17285  15C0  0141               	movlb	1	; select bank1
 17286  15C1  00C9               	movwf	___flge@ff1^(0+128)
 17287  15C2  3F41               	moviw [1]fsr1
 17288  15C3  00CA               	movwf	(___flge@ff1+1)^(0+128)
 17289  15C4  3F42               	moviw [2]fsr1
 17290  15C5  00CB               	movwf	(___flge@ff1+2)^(0+128)
 17291  15C6  3F43               	moviw [3]fsr1
 17292  15C7  00CC               	movwf	(___flge@ff1+3)^(0+128)
 17293  15C8  3000               	movlw	0
 17294  15C9  00D0               	movwf	(___flge@ff2+3)^(0+128)
 17295  15CA  3000               	movlw	0
 17296  15CB  00CF               	movwf	(___flge@ff2+2)^(0+128)
 17297  15CC  3000               	movlw	0
 17298  15CD  00CE               	movwf	(___flge@ff2+1)^(0+128)
 17299  15CE  3000               	movlw	0
 17300  15CF  00CD               	movwf	___flge@ff2^(0+128)
 17301  15D0  3198  202D  3193   	fcall	___flge
 17302  15D3  1803               	btfsc	3,0
 17303  15D4  2DE6               	goto	l11141
 17304                           
 17305                           ;system.c: 115:      heater->mode = MODE_AUTO;
 17306  15D5  0142               	movlb	2	; select bank2
 17307  15D6  0832               	movf	checkChannelStatus@heater^(0+256),w
 17308  15D7  3E1D               	addlw	29
 17309  15D8  0141               	movlb	1	; select bank1
 17310  15D9  00D9               	movwf	??_checkChannelStatus^(0+128)
 17311  15DA  3000               	movlw	0
 17312  15DB  0142               	movlb	2	; select bank2
 17313  15DC  3D33               	addwfc	(checkChannelStatus@heater+1)^(0+256),w
 17314  15DD  0141               	movlb	1	; select bank1
 17315  15DE  00DA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17316  15DF  0859               	movf	??_checkChannelStatus^(0+128),w
 17317  15E0  0086               	movwf	6
 17318  15E1  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17319  15E2  0087               	movwf	7
 17320  15E3  3001               	movlw	1
 17321  15E4  0081               	movwf	1
 17322  15E5  2E29               	goto	l11149
 17323  15E6                     l11141:	
 17324                           ;system.c: 116:     else if (heater->Pset > 0)
 17325                           
 17326  15E6  3000               	movlw	0
 17327  15E7  0141               	movlb	1	; select bank1
 17328  15E8  00CC               	movwf	(___flge@ff1+3)^(0+128)
 17329  15E9  3000               	movlw	0
 17330  15EA  00CB               	movwf	(___flge@ff1+2)^(0+128)
 17331  15EB  3000               	movlw	0
 17332  15EC  00CA               	movwf	(___flge@ff1+1)^(0+128)
 17333  15ED  3000               	movlw	0
 17334  15EE  00C9               	movwf	___flge@ff1^(0+128)
 17335  15EF  0142               	movlb	2	; select bank2
 17336  15F0  0832               	movf	checkChannelStatus@heater^(0+256),w
 17337  15F1  0086               	movwf	6
 17338  15F2  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17339  15F3  0087               	movwf	7
 17340  15F4  3150               	addfsr 1,16
 17341  15F5  3F40               	moviw [0]fsr1
 17342  15F6  0141               	movlb	1	; select bank1
 17343  15F7  00CD               	movwf	___flge@ff2^(0+128)
 17344  15F8  3F41               	moviw [1]fsr1
 17345  15F9  00CE               	movwf	(___flge@ff2+1)^(0+128)
 17346  15FA  3F42               	moviw [2]fsr1
 17347  15FB  00CF               	movwf	(___flge@ff2+2)^(0+128)
 17348  15FC  3F43               	moviw [3]fsr1
 17349  15FD  00D0               	movwf	(___flge@ff2+3)^(0+128)
 17350  15FE  3198  202D  3193   	fcall	___flge
 17351  1601  1803               	btfsc	3,0
 17352  1602  2E29               	goto	l11149
 17353  1603  2E22               	goto	l11147
 17354  1604                     l11145:	
 17355                           ;system.c: 118:    } else {
 17356                           
 17357                           ;system.c: 117:      heater->mode = MODE_MANUAL;
 17358                           
 17359                           
 17360                           ;system.c: 119:     heater->Pset = heater->Pmax;
 17361  1604  0142               	movlb	2	; select bank2
 17362  1605  0832               	movf	checkChannelStatus@heater^(0+256),w
 17363  1606  0086               	movwf	6
 17364  1607  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17365  1608  0087               	movwf	7
 17366  1609  3144               	addfsr 1,4
 17367  160A  3F40               	moviw [0]fsr1
 17368  160B  0141               	movlb	1	; select bank1
 17369  160C  00D9               	movwf	??_checkChannelStatus^(0+128)
 17370  160D  3F41               	moviw [1]fsr1
 17371  160E  00DA               	movwf	(??_checkChannelStatus^(0+128)+1)
 17372  160F  3F42               	moviw [2]fsr1
 17373  1610  00DB               	movwf	(??_checkChannelStatus^(0+128)+2)
 17374  1611  3F43               	moviw [3]fsr1
 17375  1612  00DC               	movwf	(??_checkChannelStatus^(0+128)+3)
 17376  1613  0142               	movlb	2	; select bank2
 17377  1614  0832               	movf	checkChannelStatus@heater^(0+256),w
 17378  1615  0086               	movwf	6
 17379  1616  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17380  1617  0087               	movwf	7
 17381  1618  3150               	addfsr 1,16
 17382  1619  0141               	movlb	1	; select bank1
 17383  161A  0859               	movf	??_checkChannelStatus^(0+128),w
 17384  161B  3FC0               	movwi [0]fsr1
 17385  161C  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17386  161D  3FC1               	movwi [1]fsr1
 17387  161E  085B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17388  161F  3FC2               	movwi [2]fsr1
 17389  1620  085C               	movf	(??_checkChannelStatus+3)^(0+128),w
 17390  1621  3FC3               	movwi [3]fsr1
 17391  1622                     l11147:	
 17392                           
 17393                           ;system.c: 120:     heater->mode = MODE_MANUAL;
 17394  1622  0142               	movlb	2	; select bank2
 17395  1623  0832               	movf	checkChannelStatus@heater^(0+256),w
 17396  1624  0086               	movwf	6
 17397  1625  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17398  1626  0087               	movwf	7
 17399  1627  315D               	addfsr 1,29
 17400  1628  0181               	clrf	1
 17401  1629                     l11149:	
 17402                           ;system.c: 121:    }
 17403                           
 17404                           
 17405                           ;system.c: 123:    if (heater->Pset == 0)
 17406  1629  0142               	movlb	2	; select bank2
 17407  162A  0832               	movf	checkChannelStatus@heater^(0+256),w
 17408  162B  0086               	movwf	6
 17409  162C  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17410  162D  0087               	movwf	7
 17411  162E  3150               	addfsr 1,16
 17412  162F  3F40               	moviw [0]fsr1
 17413  1630  0140               	movlb	0	; select bank0
 17414  1631  00AC               	movwf	___fleq@ff1
 17415  1632  3F41               	moviw [1]fsr1
 17416  1633  00AD               	movwf	___fleq@ff1+1
 17417  1634  3F42               	moviw [2]fsr1
 17418  1635  00AE               	movwf	___fleq@ff1+2
 17419  1636  3F43               	moviw [3]fsr1
 17420  1637  00AF               	movwf	___fleq@ff1+3
 17421  1638  3000               	movlw	0
 17422  1639  00B3               	movwf	___fleq@ff2+3
 17423  163A  3000               	movlw	0
 17424  163B  00B2               	movwf	___fleq@ff2+2
 17425  163C  3000               	movlw	0
 17426  163D  00B1               	movwf	___fleq@ff2+1
 17427  163E  3000               	movlw	0
 17428  163F  00B0               	movwf	___fleq@ff2
 17429  1640  31B2  22D2  3193   	fcall	___fleq
 17430  1643  1C03               	btfss	3,0
 17431  1644  2E4D               	goto	l11153
 17432                           
 17433                           ;system.c: 124:     heater->status = CH_DISABLED;
 17434  1645  0142               	movlb	2	; select bank2
 17435  1646  0832               	movf	checkChannelStatus@heater^(0+256),w
 17436  1647  0086               	movwf	6
 17437  1648  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17438  1649  0087               	movwf	7
 17439  164A  315E               	addfsr 1,30
 17440  164B  0181               	clrf	1
 17441  164C  2E5D               	goto	l738
 17442  164D                     l11153:	
 17443                           ;system.c: 125:    else
 17444                           
 17445                           
 17446                           ;system.c: 126:     heater->status = CH_ENABLED;
 17447  164D  0142               	movlb	2	; select bank2
 17448  164E  0832               	movf	checkChannelStatus@heater^(0+256),w
 17449  164F  3E1E               	addlw	30
 17450  1650  0141               	movlb	1	; select bank1
 17451  1651  00D9               	movwf	??_checkChannelStatus^(0+128)
 17452  1652  3000               	movlw	0
 17453  1653  0142               	movlb	2	; select bank2
 17454  1654  3D33               	addwfc	(checkChannelStatus@heater+1)^(0+256),w
 17455  1655  0141               	movlb	1	; select bank1
 17456  1656  00DA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17457  1657  0859               	movf	??_checkChannelStatus^(0+128),w
 17458  1658  0086               	movwf	6
 17459  1659  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17460  165A  0087               	movwf	7
 17461  165B  3001               	movlw	1
 17462  165C  0081               	movwf	1
 17463  165D                     l738:	
 17464                           
 17465                           ;system.c: 129:    if (heater->mode == MODE_AUTO)
 17466  165D  0142               	movlb	2	; select bank2
 17467  165E  0832               	movf	checkChannelStatus@heater^(0+256),w
 17468  165F  0086               	movwf	6
 17469  1660  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17470  1661  0087               	movwf	7
 17471  1662  315D               	addfsr 1,29
 17472  1663  0301               	decf	1,w
 17473  1664  1D03               	btfss	3,2
 17474  1665  2F24               	goto	l11161
 17475                           
 17476                           ;system.c: 130:     heater->DCreq = (((heater->Preq / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Preq / heater->Pmax) * 100) : (100));
 17477  1666  3042               	movlw	66
 17478  1667  0140               	movlb	0	; select bank0
 17479  1668  00CC               	movwf	___flmul@b+3
 17480  1669  30C8               	movlw	200
 17481  166A  00CB               	movwf	___flmul@b+2
 17482  166B  3000               	movlw	0
 17483  166C  00CA               	movwf	___flmul@b+1
 17484  166D  3000               	movlw	0
 17485  166E  00C9               	movwf	___flmul@b
 17486  166F  0142               	movlb	2	; select bank2
 17487  1670  0832               	movf	checkChannelStatus@heater^(0+256),w
 17488  1671  0086               	movwf	6
 17489  1672  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17490  1673  0087               	movwf	7
 17491  1674  3144               	addfsr 1,4
 17492  1675  3F40               	moviw [0]fsr1
 17493  1676  0141               	movlb	1	; select bank1
 17494  1677  00AD               	movwf	___fldiv@a^(0+128)
 17495  1678  3F41               	moviw [1]fsr1
 17496  1679  00AE               	movwf	(___fldiv@a+1)^(0+128)
 17497  167A  3F42               	moviw [2]fsr1
 17498  167B  00AF               	movwf	(___fldiv@a+2)^(0+128)
 17499  167C  3F43               	moviw [3]fsr1
 17500  167D  00B0               	movwf	(___fldiv@a+3)^(0+128)
 17501  167E  0142               	movlb	2	; select bank2
 17502  167F  0832               	movf	checkChannelStatus@heater^(0+256),w
 17503  1680  0086               	movwf	6
 17504  1681  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17505  1682  0087               	movwf	7
 17506  1683  3148               	addfsr 1,8
 17507  1684  3F40               	moviw [0]fsr1
 17508  1685  0141               	movlb	1	; select bank1
 17509  1686  00B1               	movwf	___fldiv@b^(0+128)
 17510  1687  3F41               	moviw [1]fsr1
 17511  1688  00B2               	movwf	(___fldiv@b+1)^(0+128)
 17512  1689  3F42               	moviw [2]fsr1
 17513  168A  00B3               	movwf	(___fldiv@b+2)^(0+128)
 17514  168B  3F43               	moviw [3]fsr1
 17515  168C  00B4               	movwf	(___fldiv@b+3)^(0+128)
 17516  168D  31A6  266D  3193   	fcall	___fldiv
 17517  1690  0141               	movlb	1	; select bank1
 17518  1691  0830               	movf	(?___fldiv+3)^(0+128),w
 17519  1692  0140               	movlb	0	; select bank0
 17520  1693  00D0               	movwf	___flmul@a+3
 17521  1694  0141               	movlb	1	; select bank1
 17522  1695  082F               	movf	(?___fldiv+2)^(0+128),w
 17523  1696  0140               	movlb	0	; select bank0
 17524  1697  00CF               	movwf	___flmul@a+2
 17525  1698  0141               	movlb	1	; select bank1
 17526  1699  082E               	movf	(?___fldiv+1)^(0+128),w
 17527  169A  0140               	movlb	0	; select bank0
 17528  169B  00CE               	movwf	___flmul@a+1
 17529  169C  0141               	movlb	1	; select bank1
 17530  169D  082D               	movf	?___fldiv^(0+128),w
 17531  169E  0140               	movlb	0	; select bank0
 17532  169F  00CD               	movwf	___flmul@a
 17533  16A0  3188  20BA  3193   	fcall	___flmul
 17534  16A3  0140               	movlb	0	; select bank0
 17535  16A4  084C               	movf	?___flmul+3,w
 17536  16A5  0141               	movlb	1	; select bank1
 17537  16A6  00CC               	movwf	(___flge@ff1+3)^(0+128)
 17538  16A7  0140               	movlb	0	; select bank0
 17539  16A8  084B               	movf	?___flmul+2,w
 17540  16A9  0141               	movlb	1	; select bank1
 17541  16AA  00CB               	movwf	(___flge@ff1+2)^(0+128)
 17542  16AB  0140               	movlb	0	; select bank0
 17543  16AC  084A               	movf	?___flmul+1,w
 17544  16AD  0141               	movlb	1	; select bank1
 17545  16AE  00CA               	movwf	(___flge@ff1+1)^(0+128)
 17546  16AF  0140               	movlb	0	; select bank0
 17547  16B0  0849               	movf	?___flmul,w
 17548  16B1  0141               	movlb	1	; select bank1
 17549  16B2  00C9               	movwf	___flge@ff1^(0+128)
 17550  16B3  3042               	movlw	66
 17551  16B4  00D0               	movwf	(___flge@ff2+3)^(0+128)
 17552  16B5  30C8               	movlw	200
 17553  16B6  00CF               	movwf	(___flge@ff2+2)^(0+128)
 17554  16B7  3000               	movlw	0
 17555  16B8  00CE               	movwf	(___flge@ff2+1)^(0+128)
 17556  16B9  3000               	movlw	0
 17557  16BA  00CD               	movwf	___flge@ff2^(0+128)
 17558  16BB  3198  202D  3193   	fcall	___flge
 17559  16BE  1C03               	btfss	3,0
 17560  16BF  2EC9               	goto	l11159
 17561  16C0  3042               	movlw	66
 17562  16C1  0142               	movlb	2	; select bank2
 17563  16C2  00A6               	movwf	(_checkChannelStatus$1759+3)^(0+256)
 17564  16C3  30C8               	movlw	200
 17565  16C4  00A5               	movwf	(_checkChannelStatus$1759+2)^(0+256)
 17566  16C5  3000               	movlw	0
 17567  16C6  00A4               	movwf	(_checkChannelStatus$1759+1)^(0+256)
 17568  16C7  3000               	movlw	0
 17569  16C8  2F15               	goto	L16
 17570  16C9                     l11159:	
 17571  16C9  3042               	movlw	66
 17572  16CA  0140               	movlb	0	; select bank0
 17573  16CB  00CC               	movwf	___flmul@b+3
 17574  16CC  30C8               	movlw	200
 17575  16CD  00CB               	movwf	___flmul@b+2
 17576  16CE  3000               	movlw	0
 17577  16CF  00CA               	movwf	___flmul@b+1
 17578  16D0  3000               	movlw	0
 17579  16D1  00C9               	movwf	___flmul@b
 17580  16D2  0142               	movlb	2	; select bank2
 17581  16D3  0832               	movf	checkChannelStatus@heater^(0+256),w
 17582  16D4  0086               	movwf	6
 17583  16D5  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17584  16D6  0087               	movwf	7
 17585  16D7  3144               	addfsr 1,4
 17586  16D8  3F40               	moviw [0]fsr1
 17587  16D9  0141               	movlb	1	; select bank1
 17588  16DA  00AD               	movwf	___fldiv@a^(0+128)
 17589  16DB  3F41               	moviw [1]fsr1
 17590  16DC  00AE               	movwf	(___fldiv@a+1)^(0+128)
 17591  16DD  3F42               	moviw [2]fsr1
 17592  16DE  00AF               	movwf	(___fldiv@a+2)^(0+128)
 17593  16DF  3F43               	moviw [3]fsr1
 17594  16E0  00B0               	movwf	(___fldiv@a+3)^(0+128)
 17595  16E1  0142               	movlb	2	; select bank2
 17596  16E2  0832               	movf	checkChannelStatus@heater^(0+256),w
 17597  16E3  0086               	movwf	6
 17598  16E4  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17599  16E5  0087               	movwf	7
 17600  16E6  3148               	addfsr 1,8
 17601  16E7  3F40               	moviw [0]fsr1
 17602  16E8  0141               	movlb	1	; select bank1
 17603  16E9  00B1               	movwf	___fldiv@b^(0+128)
 17604  16EA  3F41               	moviw [1]fsr1
 17605  16EB  00B2               	movwf	(___fldiv@b+1)^(0+128)
 17606  16EC  3F42               	moviw [2]fsr1
 17607  16ED  00B3               	movwf	(___fldiv@b+2)^(0+128)
 17608  16EE  3F43               	moviw [3]fsr1
 17609  16EF  00B4               	movwf	(___fldiv@b+3)^(0+128)
 17610  16F0  31A6  266D  3193   	fcall	___fldiv
 17611  16F3  0141               	movlb	1	; select bank1
 17612  16F4  0830               	movf	(?___fldiv+3)^(0+128),w
 17613  16F5  0140               	movlb	0	; select bank0
 17614  16F6  00D0               	movwf	___flmul@a+3
 17615  16F7  0141               	movlb	1	; select bank1
 17616  16F8  082F               	movf	(?___fldiv+2)^(0+128),w
 17617  16F9  0140               	movlb	0	; select bank0
 17618  16FA  00CF               	movwf	___flmul@a+2
 17619  16FB  0141               	movlb	1	; select bank1
 17620  16FC  082E               	movf	(?___fldiv+1)^(0+128),w
 17621  16FD  0140               	movlb	0	; select bank0
 17622  16FE  00CE               	movwf	___flmul@a+1
 17623  16FF  0141               	movlb	1	; select bank1
 17624  1700  082D               	movf	?___fldiv^(0+128),w
 17625  1701  0140               	movlb	0	; select bank0
 17626  1702  00CD               	movwf	___flmul@a
 17627  1703  3188  20BA  3193   	fcall	___flmul
 17628  1706  0140               	movlb	0	; select bank0
 17629  1707  084C               	movf	?___flmul+3,w
 17630  1708  0142               	movlb	2	; select bank2
 17631  1709  00A6               	movwf	(_checkChannelStatus$1759+3)^(0+256)
 17632  170A  0140               	movlb	0	; select bank0
 17633  170B  084B               	movf	?___flmul+2,w
 17634  170C  0142               	movlb	2	; select bank2
 17635  170D  00A5               	movwf	(_checkChannelStatus$1759+2)^(0+256)
 17636  170E  0140               	movlb	0	; select bank0
 17637  170F  084A               	movf	?___flmul+1,w
 17638  1710  0142               	movlb	2	; select bank2
 17639  1711  00A4               	movwf	(_checkChannelStatus$1759+1)^(0+256)
 17640  1712  0140               	movlb	0	; select bank0
 17641  1713  0849               	movf	?___flmul,w
 17642  1714  0142               	movlb	2	; select bank2
 17643  1715                     L16:	
 17644  1715  00A3               	movwf	_checkChannelStatus$1759^(0+256)
 17645  1716  0826               	movf	(_checkChannelStatus$1759+3)^(0+256),w
 17646  1717  0141               	movlb	1	; select bank1
 17647  1718  00CC               	movwf	(___fltol@f1+3)^(0+128)
 17648  1719  0142               	movlb	2	; select bank2
 17649  171A  0825               	movf	(_checkChannelStatus$1759+2)^(0+256),w
 17650  171B  0141               	movlb	1	; select bank1
 17651  171C  00CB               	movwf	(___fltol@f1+2)^(0+128)
 17652  171D  0142               	movlb	2	; select bank2
 17653  171E  0824               	movf	(_checkChannelStatus$1759+1)^(0+256),w
 17654  171F  0141               	movlb	1	; select bank1
 17655  1720  00CA               	movwf	(___fltol@f1+1)^(0+128)
 17656  1721  0142               	movlb	2	; select bank2
 17657  1722  0823               	movf	_checkChannelStatus$1759^(0+256),w
 17658  1723  2FE1               	goto	L19
 17659  1724                     l11161:	
 17660                           ;system.c: 131:    else
 17661                           
 17662                           
 17663                           ;system.c: 132:     heater->DCreq = (((heater->Pset / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Pset / heater->Pmax) * 100) : (100));
 17664  1724  3042               	movlw	66
 17665  1725  0140               	movlb	0	; select bank0
 17666  1726  00CC               	movwf	___flmul@b+3
 17667  1727  30C8               	movlw	200
 17668  1728  00CB               	movwf	___flmul@b+2
 17669  1729  3000               	movlw	0
 17670  172A  00CA               	movwf	___flmul@b+1
 17671  172B  3000               	movlw	0
 17672  172C  00C9               	movwf	___flmul@b
 17673  172D  0142               	movlb	2	; select bank2
 17674  172E  0832               	movf	checkChannelStatus@heater^(0+256),w
 17675  172F  0086               	movwf	6
 17676  1730  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17677  1731  0087               	movwf	7
 17678  1732  3144               	addfsr 1,4
 17679  1733  3F40               	moviw [0]fsr1
 17680  1734  0141               	movlb	1	; select bank1
 17681  1735  00AD               	movwf	___fldiv@a^(0+128)
 17682  1736  3F41               	moviw [1]fsr1
 17683  1737  00AE               	movwf	(___fldiv@a+1)^(0+128)
 17684  1738  3F42               	moviw [2]fsr1
 17685  1739  00AF               	movwf	(___fldiv@a+2)^(0+128)
 17686  173A  3F43               	moviw [3]fsr1
 17687  173B  00B0               	movwf	(___fldiv@a+3)^(0+128)
 17688  173C  0142               	movlb	2	; select bank2
 17689  173D  0832               	movf	checkChannelStatus@heater^(0+256),w
 17690  173E  0086               	movwf	6
 17691  173F  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17692  1740  0087               	movwf	7
 17693  1741  3150               	addfsr 1,16
 17694  1742  3F40               	moviw [0]fsr1
 17695  1743  0141               	movlb	1	; select bank1
 17696  1744  00B1               	movwf	___fldiv@b^(0+128)
 17697  1745  3F41               	moviw [1]fsr1
 17698  1746  00B2               	movwf	(___fldiv@b+1)^(0+128)
 17699  1747  3F42               	moviw [2]fsr1
 17700  1748  00B3               	movwf	(___fldiv@b+2)^(0+128)
 17701  1749  3F43               	moviw [3]fsr1
 17702  174A  00B4               	movwf	(___fldiv@b+3)^(0+128)
 17703  174B  31A6  266D  3193   	fcall	___fldiv
 17704  174E  0141               	movlb	1	; select bank1
 17705  174F  0830               	movf	(?___fldiv+3)^(0+128),w
 17706  1750  0140               	movlb	0	; select bank0
 17707  1751  00D0               	movwf	___flmul@a+3
 17708  1752  0141               	movlb	1	; select bank1
 17709  1753  082F               	movf	(?___fldiv+2)^(0+128),w
 17710  1754  0140               	movlb	0	; select bank0
 17711  1755  00CF               	movwf	___flmul@a+2
 17712  1756  0141               	movlb	1	; select bank1
 17713  1757  082E               	movf	(?___fldiv+1)^(0+128),w
 17714  1758  0140               	movlb	0	; select bank0
 17715  1759  00CE               	movwf	___flmul@a+1
 17716  175A  0141               	movlb	1	; select bank1
 17717  175B  082D               	movf	?___fldiv^(0+128),w
 17718  175C  0140               	movlb	0	; select bank0
 17719  175D  00CD               	movwf	___flmul@a
 17720  175E  3188  20BA  3193   	fcall	___flmul
 17721  1761  0140               	movlb	0	; select bank0
 17722  1762  084C               	movf	?___flmul+3,w
 17723  1763  0141               	movlb	1	; select bank1
 17724  1764  00CC               	movwf	(___flge@ff1+3)^(0+128)
 17725  1765  0140               	movlb	0	; select bank0
 17726  1766  084B               	movf	?___flmul+2,w
 17727  1767  0141               	movlb	1	; select bank1
 17728  1768  00CB               	movwf	(___flge@ff1+2)^(0+128)
 17729  1769  0140               	movlb	0	; select bank0
 17730  176A  084A               	movf	?___flmul+1,w
 17731  176B  0141               	movlb	1	; select bank1
 17732  176C  00CA               	movwf	(___flge@ff1+1)^(0+128)
 17733  176D  0140               	movlb	0	; select bank0
 17734  176E  0849               	movf	?___flmul,w
 17735  176F  0141               	movlb	1	; select bank1
 17736  1770  00C9               	movwf	___flge@ff1^(0+128)
 17737  1771  3042               	movlw	66
 17738  1772  00D0               	movwf	(___flge@ff2+3)^(0+128)
 17739  1773  30C8               	movlw	200
 17740  1774  00CF               	movwf	(___flge@ff2+2)^(0+128)
 17741  1775  3000               	movlw	0
 17742  1776  00CE               	movwf	(___flge@ff2+1)^(0+128)
 17743  1777  3000               	movlw	0
 17744  1778  00CD               	movwf	___flge@ff2^(0+128)
 17745  1779  3198  202D  3193   	fcall	___flge
 17746  177C  1C03               	btfss	3,0
 17747  177D  2F87               	goto	l11165
 17748  177E  3042               	movlw	66
 17749  177F  0142               	movlb	2	; select bank2
 17750  1780  00AA               	movwf	(_checkChannelStatus$1760+3)^(0+256)
 17751  1781  30C8               	movlw	200
 17752  1782  00A9               	movwf	(_checkChannelStatus$1760+2)^(0+256)
 17753  1783  3000               	movlw	0
 17754  1784  00A8               	movwf	(_checkChannelStatus$1760+1)^(0+256)
 17755  1785  3000               	movlw	0
 17756  1786  2FD3               	goto	L18
 17757  1787                     l11165:	
 17758  1787  3042               	movlw	66
 17759  1788  0140               	movlb	0	; select bank0
 17760  1789  00CC               	movwf	___flmul@b+3
 17761  178A  30C8               	movlw	200
 17762  178B  00CB               	movwf	___flmul@b+2
 17763  178C  3000               	movlw	0
 17764  178D  00CA               	movwf	___flmul@b+1
 17765  178E  3000               	movlw	0
 17766  178F  00C9               	movwf	___flmul@b
 17767  1790  0142               	movlb	2	; select bank2
 17768  1791  0832               	movf	checkChannelStatus@heater^(0+256),w
 17769  1792  0086               	movwf	6
 17770  1793  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17771  1794  0087               	movwf	7
 17772  1795  3144               	addfsr 1,4
 17773  1796  3F40               	moviw [0]fsr1
 17774  1797  0141               	movlb	1	; select bank1
 17775  1798  00AD               	movwf	___fldiv@a^(0+128)
 17776  1799  3F41               	moviw [1]fsr1
 17777  179A  00AE               	movwf	(___fldiv@a+1)^(0+128)
 17778  179B  3F42               	moviw [2]fsr1
 17779  179C  00AF               	movwf	(___fldiv@a+2)^(0+128)
 17780  179D  3F43               	moviw [3]fsr1
 17781  179E  00B0               	movwf	(___fldiv@a+3)^(0+128)
 17782  179F  0142               	movlb	2	; select bank2
 17783  17A0  0832               	movf	checkChannelStatus@heater^(0+256),w
 17784  17A1  0086               	movwf	6
 17785  17A2  0833               	movf	(checkChannelStatus@heater+1)^(0+256),w
 17786  17A3  0087               	movwf	7
 17787  17A4  3150               	addfsr 1,16
 17788  17A5  3F40               	moviw [0]fsr1
 17789  17A6  0141               	movlb	1	; select bank1
 17790  17A7  00B1               	movwf	___fldiv@b^(0+128)
 17791  17A8  3F41               	moviw [1]fsr1
 17792  17A9  00B2               	movwf	(___fldiv@b+1)^(0+128)
 17793  17AA  3F42               	moviw [2]fsr1
 17794  17AB  00B3               	movwf	(___fldiv@b+2)^(0+128)
 17795  17AC  3F43               	moviw [3]fsr1
 17796  17AD  00B4               	movwf	(___fldiv@b+3)^(0+128)
 17797  17AE  31A6  266D  3193   	fcall	___fldiv
 17798  17B1  0141               	movlb	1	; select bank1
 17799  17B2  0830               	movf	(?___fldiv+3)^(0+128),w
 17800  17B3  0140               	movlb	0	; select bank0
 17801  17B4  00D0               	movwf	___flmul@a+3
 17802  17B5  0141               	movlb	1	; select bank1
 17803  17B6  082F               	movf	(?___fldiv+2)^(0+128),w
 17804  17B7  0140               	movlb	0	; select bank0
 17805  17B8  00CF               	movwf	___flmul@a+2
 17806  17B9  0141               	movlb	1	; select bank1
 17807  17BA  082E               	movf	(?___fldiv+1)^(0+128),w
 17808  17BB  0140               	movlb	0	; select bank0
 17809  17BC  00CE               	movwf	___flmul@a+1
 17810  17BD  0141               	movlb	1	; select bank1
 17811  17BE  082D               	movf	?___fldiv^(0+128),w
 17812  17BF  0140               	movlb	0	; select bank0
 17813  17C0  00CD               	movwf	___flmul@a
 17814  17C1  3188  20BA  3193   	fcall	___flmul
 17815  17C4  0140               	movlb	0	; select bank0
 17816  17C5  084C               	movf	?___flmul+3,w
 17817  17C6  0142               	movlb	2	; select bank2
 17818  17C7  00AA               	movwf	(_checkChannelStatus$1760+3)^(0+256)
 17819  17C8  0140               	movlb	0	; select bank0
 17820  17C9  084B               	movf	?___flmul+2,w
 17821  17CA  0142               	movlb	2	; select bank2
 17822  17CB  00A9               	movwf	(_checkChannelStatus$1760+2)^(0+256)
 17823  17CC  0140               	movlb	0	; select bank0
 17824  17CD  084A               	movf	?___flmul+1,w
 17825  17CE  0142               	movlb	2	; select bank2
 17826  17CF  00A8               	movwf	(_checkChannelStatus$1760+1)^(0+256)
 17827  17D0  0140               	movlb	0	; select bank0
 17828  17D1  0849               	movf	?___flmul,w
 17829  17D2  0142               	movlb	2	; select bank2
 17830  17D3                     L18:	
 17831  17D3  00A7               	movwf	_checkChannelStatus$1760^(0+256)
 17832  17D4  082A               	movf	(_checkChannelStatus$1760+3)^(0+256),w
 17833  17D5  0141               	movlb	1	; select bank1
 17834  17D6  00CC               	movwf	(___fltol@f1+3)^(0+128)
 17835  17D7  0142               	movlb	2	; select bank2
 17836  17D8  0829               	movf	(_checkChannelStatus$1760+2)^(0+256),w
 17837  17D9  0141               	movlb	1	; select bank1
 17838  17DA  00CB               	movwf	(___fltol@f1+2)^(0+128)
 17839  17DB  0142               	movlb	2	; select bank2
 17840  17DC  0828               	movf	(_checkChannelStatus$1760+1)^(0+256),w
 17841  17DD  0141               	movlb	1	; select bank1
 17842  17DE  00CA               	movwf	(___fltol@f1+1)^(0+128)
 17843  17DF  0142               	movlb	2	; select bank2
 17844  17E0  0827               	movf	_checkChannelStatus$1760^(0+256),w
 17845  17E1                     L19:	
 17846  17E1  0141               	movlb	1	; select bank1
 17847  17E2  00C9               	movwf	___fltol@f1^(0+128)
 17848  17E3  31A9  21BA  3193   	fcall	___fltol
 17849  17E6  0141               	movlb	1	; select bank1
 17850  17E7  0849               	movf	?___fltol^(0+128),w
 17851  17E8  00D9               	movwf	??_checkChannelStatus^(0+128)
 17852  17E9  0142               	movlb	2	; select bank2
 17853  17EA  0832               	movf	checkChannelStatus@heater^(0+256),w
 17854  17EB  3E14               	addlw	20
 17855  17EC  0141               	movlb	1	; select bank1
 17856  17ED  00DA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17857  17EE  3000               	movlw	0
 17858  17EF  0142               	movlb	2	; select bank2
 17859  17F0  3D33               	addwfc	(checkChannelStatus@heater+1)^(0+256),w
 17860  17F1  0141               	movlb	1	; select bank1
 17861  17F2  00DB               	movwf	(??_checkChannelStatus+2)^(0+128)
 17862  17F3  085A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17863  17F4  0086               	movwf	6
 17864  17F5  085B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17865  17F6  0087               	movwf	7
 17866  17F7  0859               	movf	??_checkChannelStatus^(0+128),w
 17867  17F8                     L17:	
 17868  17F8  0081               	movwf	1
 17869  17F9                     l11167:	
 17870                           ;system.c: 134:  }
 17871                           
 17872                           ;system.c: 133:   }
 17873                           
 17874  17F9  3001               	movlw	1
 17875  17FA  0141               	movlb	1	; select bank1
 17876  17FB  00D9               	movwf	??_checkChannelStatus^(0+128)
 17877  17FC  0859               	movf	??_checkChannelStatus^(0+128),w
 17878  17FD  0142               	movlb	2	; select bank2
 17879  17FE  07B1               	addwf	checkChannelStatus@channel^(0+256),f
 17880  17FF  2BE1               	goto	L20
 17881  1800                     __end_of_checkChannelStatus:	
 17882                           
 17883                           	psect	text38
 17884  328B                     __ptext38:	
 17885 ;; *************** function _setChannelSwitch *****************
 17886 ;; Defined at:
 17887 ;;		line 7 in file "io.c"
 17888 ;; Parameters:    Size  Location     Type
 17889 ;;  channel         1    wreg     unsigned char 
 17890 ;;  state           1   16[BANK0 ] unsigned char 
 17891 ;; Auto vars:     Size  Location     Type
 17892 ;;  channel         1   19[BANK0 ] unsigned char 
 17893 ;; Return value:  Size  Location     Type
 17894 ;;                  1    wreg      void 
 17895 ;; Registers used:
 17896 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17897 ;; Tracked objects:
 17898 ;;		On entry : 0/0
 17899 ;;		On exit  : 0/0
 17900 ;;		Unchanged: 0/0
 17901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17904 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17905 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17906 ;;Total ram usage:        4 bytes
 17907 ;; Hardware stack levels used:    1
 17908 ;; Hardware stack levels required when called:    3
 17909 ;; This function calls:
 17910 ;;		Nothing
 17911 ;; This function is called by:
 17912 ;;		_checkChannelStatus
 17913 ;;		_systemCheck
 17914 ;;		_controller
 17915 ;; This function uses a non-reentrant model
 17916 ;;
 17917                           
 17918                           
 17919                           ;psect for function _setChannelSwitch
 17920  328B                     _setChannelSwitch:	
 17921                           
 17922                           ;incstack = 0
 17923                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 17924                           ;setChannelSwitch@channel stored from wreg
 17925  328B  0140               	movlb	0	; select bank0
 17926  328C  00B3               	movwf	setChannelSwitch@channel
 17927                           
 17928                           ;io.c: 7: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 8: {;io.c: 9:  swi
      +                          tch(channel) {
 17929  328D  2ABB               	goto	l8427
 17930  328E                     l8415:	
 17931                           ;io.c: 10:  case 0:
 17932                           
 17933                           
 17934                           ;io.c: 11:   LATAbits.LATA0 = state;
 17935  328E  0C30               	rrf	setChannelSwitch@state,w
 17936  328F  1C03               	skipc
 17937  3290  1018               	bcf	24,0	;volatile
 17938  3291  1803               	skipnc
 17939  3292  1418               	bsf	24,0	;volatile
 17940                           
 17941                           ;io.c: 12:   break;
 17942  3293  0008               	return
 17943  3294                     l8417:	
 17944                           ;io.c: 13:  case 1:
 17945                           
 17946                           
 17947                           ;io.c: 14:   LATAbits.LATA1 = state;
 17948  3294  0C30               	rrf	setChannelSwitch@state,w
 17949  3295  1C03               	skipc
 17950  3296  1098               	bcf	24,1	;volatile
 17951  3297  1803               	skipnc
 17952  3298  1498               	bsf	24,1	;volatile
 17953                           
 17954                           ;io.c: 15:   break;
 17955  3299  0008               	return
 17956  329A                     l8419:	
 17957                           ;io.c: 16:  case 2:
 17958                           
 17959                           
 17960                           ;io.c: 17:   LATAbits.LATA2 = state;
 17961  329A  0C30               	rrf	setChannelSwitch@state,w
 17962  329B  1C03               	skipc
 17963  329C  1118               	bcf	24,2	;volatile
 17964  329D  1803               	skipnc
 17965  329E  1518               	bsf	24,2	;volatile
 17966                           
 17967                           ;io.c: 18:   break;
 17968  329F  0008               	return
 17969  32A0                     l8421:	
 17970                           ;io.c: 19:  case 3:
 17971                           
 17972                           
 17973                           ;io.c: 20:   LATAbits.LATA3 = state;
 17974  32A0  0C30               	rrf	setChannelSwitch@state,w
 17975  32A1  1C03               	skipc
 17976  32A2  1198               	bcf	24,3	;volatile
 17977  32A3  1803               	skipnc
 17978  32A4  1598               	bsf	24,3	;volatile
 17979                           
 17980                           ;io.c: 21:   break;
 17981  32A5  0008               	return
 17982  32A6                     l8423:	
 17983                           ;io.c: 22:  default:
 17984                           
 17985                           
 17986                           ;io.c: 23:   LATAbits.LATA0 = state;
 17987  32A6  0C30               	rrf	setChannelSwitch@state,w
 17988  32A7  1C03               	skipc
 17989  32A8  1018               	bcf	24,0	;volatile
 17990  32A9  1803               	skipnc
 17991  32AA  1418               	bsf	24,0	;volatile
 17992                           
 17993                           ;io.c: 24:   LATAbits.LATA1 = state;
 17994  32AB  0C30               	rrf	setChannelSwitch@state,w
 17995  32AC  1C03               	skipc
 17996  32AD  1098               	bcf	24,1	;volatile
 17997  32AE  1803               	skipnc
 17998  32AF  1498               	bsf	24,1	;volatile
 17999                           
 18000                           ;io.c: 25:   LATAbits.LATA2 = state;
 18001  32B0  0C30               	rrf	setChannelSwitch@state,w
 18002  32B1  1C03               	skipc
 18003  32B2  1118               	bcf	24,2	;volatile
 18004  32B3  1803               	skipnc
 18005  32B4  1518               	bsf	24,2	;volatile
 18006                           
 18007                           ;io.c: 26:   LATAbits.LATA3 = state;
 18008  32B5  0C30               	rrf	setChannelSwitch@state,w
 18009  32B6  1C03               	skipc
 18010  32B7  1198               	bcf	24,3	;volatile
 18011  32B8  1803               	skipnc
 18012  32B9  1598               	bsf	24,3	;volatile
 18013                           
 18014                           ;io.c: 28:  }
 18015                           
 18016                           ;io.c: 27:   break;
 18017  32BA  0008               	return
 18018  32BB                     l8427:	
 18019  32BB  0833               	movf	setChannelSwitch@channel,w
 18020  32BC  00B1               	movwf	??_setChannelSwitch
 18021  32BD  01B2               	clrf	??_setChannelSwitch+1
 18022                           
 18023                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18024                           ; Switch size 1, requested type "space"
 18025                           ; Number of cases is 1, Range of values is 0 to 0
 18026                           ; switch strategies available:
 18027                           ; Name         Instructions Cycles
 18028                           ; simple_byte            4     3 (average)
 18029                           ; direct_byte            8     6 (fixed)
 18030                           ; jumptable            260     6 (fixed)
 18031                           ;	Chosen strategy is simple_byte
 18032  32BE  0832               	movf	??_setChannelSwitch+1,w
 18033  32BF  3A00               	xorlw	0	; case 0
 18034  32C0  1903               	skipnz
 18035  32C1  2AC3               	goto	l11561
 18036  32C2  2AA6               	goto	l8423
 18037  32C3                     l11561:	
 18038                           
 18039                           ; Switch size 1, requested type "space"
 18040                           ; Number of cases is 4, Range of values is 0 to 3
 18041                           ; switch strategies available:
 18042                           ; Name         Instructions Cycles
 18043                           ; simple_byte           13     7 (average)
 18044                           ; direct_byte           14     6 (fixed)
 18045                           ; jumptable            260     6 (fixed)
 18046                           ;	Chosen strategy is simple_byte
 18047  32C3  0831               	movf	??_setChannelSwitch,w
 18048  32C4  3A00               	xorlw	0	; case 0
 18049  32C5  1903               	skipnz
 18050  32C6  2A8E               	goto	l8415
 18051  32C7  3A01               	xorlw	1	; case 1
 18052  32C8  1903               	skipnz
 18053  32C9  2A94               	goto	l8417
 18054  32CA  3A03               	xorlw	3	; case 2
 18055  32CB  1903               	skipnz
 18056  32CC  2A9A               	goto	l8419
 18057  32CD  3A01               	xorlw	1	; case 3
 18058  32CE  1903               	skipnz
 18059  32CF  2AA0               	goto	l8421
 18060  32D0  2AA6               	goto	l8423
 18061  32D1  0008               	return
 18062  32D2                     __end_of_setChannelSwitch:	
 18063                           
 18064                           	psect	text39
 18065  3F26                     __ptext39:	
 18066 ;; *************** function _getAnalogValue *****************
 18067 ;; Defined at:
 18068 ;;		line 34 in file "io.c"
 18069 ;; Parameters:    Size  Location     Type
 18070 ;;  channel         1    wreg     unsigned char 
 18071 ;; Auto vars:     Size  Location     Type
 18072 ;;  channel         1   15[BANK0 ] unsigned char 
 18073 ;; Return value:  Size  Location     Type
 18074 ;;                  2   12[BANK0 ] unsigned short 
 18075 ;; Registers used:
 18076 ;;		wreg, status,2, status,0
 18077 ;; Tracked objects:
 18078 ;;		On entry : 0/0
 18079 ;;		On exit  : 0/0
 18080 ;;		Unchanged: 0/0
 18081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18082 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18085 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18086 ;;Total ram usage:        4 bytes
 18087 ;; Hardware stack levels used:    1
 18088 ;; Hardware stack levels required when called:    3
 18089 ;; This function calls:
 18090 ;;		Nothing
 18091 ;; This function is called by:
 18092 ;;		_checkChannelStatus
 18093 ;;		_systemCheck
 18094 ;;		_getAnalogValues
 18095 ;; This function uses a non-reentrant model
 18096 ;;
 18097                           
 18098                           
 18099                           ;psect for function _getAnalogValue
 18100  3F26                     _getAnalogValue:	
 18101                           
 18102                           ;incstack = 0
 18103                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 18104                           ;getAnalogValue@channel stored from wreg
 18105  3F26  0140               	movlb	0	; select bank0
 18106  3F27  00AF               	movwf	getAnalogValue@channel
 18107                           
 18108                           ;io.c: 34: uint16_t getAnalogValue(uint8_t channel);io.c: 35: {;io.c: 36:  ADCON0bits.CH
      +                          S = channel;
 18109  3F28  082F               	movf	getAnalogValue@channel,w
 18110  3F29  00AE               	movwf	??_getAnalogValue
 18111  3F2A  0DAE               	rlf	??_getAnalogValue,f
 18112  3F2B  0DAE               	rlf	??_getAnalogValue,f
 18113  3F2C  0141               	movlb	1	; select bank1
 18114  3F2D  081D               	movf	29,w	;volatile
 18115  3F2E  0140               	movlb	0	; select bank0
 18116  3F2F  062E               	xorwf	??_getAnalogValue,w
 18117  3F30  3903               	andlw	-253
 18118  3F31  062E               	xorwf	??_getAnalogValue,w
 18119  3F32  0141               	movlb	1	; select bank1
 18120  3F33  009D               	movwf	29	;volatile
 18121                           
 18122                           ;io.c: 37:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 18123  3F34  3200               	nop2	;2 cycle nop
 18124  3F35  3200               	nop2	;2 cycle nop
 18125  3F36  0000               	nop
 18126                           
 18127                           ;io.c: 38:  ADCON0bits.GO = 1;
 18128  3F37  0141               	movlb	1	; select bank1
 18129  3F38  149D               	bsf	29,1	;volatile
 18130  3F39                     l671:	
 18131                           ;io.c: 39:  while (ADCON0bits.GO);
 18132                           
 18133  3F39  189D               	btfsc	29,1	;volatile
 18134  3F3A  2F39               	goto	l671
 18135                           
 18136                           ;io.c: 40:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 18137  3F3B  081C               	movf	28,w	;volatile
 18138  3F3C  0140               	movlb	0	; select bank0
 18139  3F3D  00AD               	movwf	?_getAnalogValue+1
 18140  3F3E  0141               	movlb	1	; select bank1
 18141  3F3F  081B               	movf	27,w	;volatile
 18142  3F40  0140               	movlb	0	; select bank0
 18143  3F41  00AC               	movwf	?_getAnalogValue
 18144  3F42  0008               	return
 18145  3F43                     __end_of_getAnalogValue:	
 18146                           
 18147                           	psect	text40
 18148  30C1                     __ptext40:	
 18149 ;; *************** function _error *****************
 18150 ;; Defined at:
 18151 ;;		line 17 in file "error.c"
 18152 ;; Parameters:    Size  Location     Type
 18153 ;;  code            1    wreg     enum E7846
 18154 ;; Auto vars:     Size  Location     Type
 18155 ;;  code            1   20[BANK0 ] enum E7846
 18156 ;; Return value:  Size  Location     Type
 18157 ;;                  1    wreg      void 
 18158 ;; Registers used:
 18159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18160 ;; Tracked objects:
 18161 ;;		On entry : 0/0
 18162 ;;		On exit  : 0/0
 18163 ;;		Unchanged: 0/0
 18164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18169 ;;Total ram usage:        2 bytes
 18170 ;; Hardware stack levels used:    1
 18171 ;; Hardware stack levels required when called:    4
 18172 ;; This function calls:
 18173 ;;		___awmod
 18174 ;; This function is called by:
 18175 ;;		_menu
 18176 ;;		_checkChannelStatus
 18177 ;;		_systemCheck
 18178 ;;		_checkSensor
 18179 ;; This function uses a non-reentrant model
 18180 ;;
 18181                           
 18182                           
 18183                           ;psect for function _error
 18184  30C1                     _error:	
 18185                           
 18186                           ;incstack = 0
 18187                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18188                           ;error@code stored from wreg
 18189  30C1  0140               	movlb	0	; select bank0
 18190  30C2  00B4               	movwf	error@code
 18191                           
 18192                           ;error.c: 17: void error(enum e_errorcode code);error.c: 18: {;error.c: 19:  errorMessag
      +                          eQueue[head] = code;
 18193  30C3  0834               	movf	error@code,w
 18194  30C4  00B3               	movwf	??_error
 18195  30C5  0859               	movf	_head,w
 18196  30C6  3EA0               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 18197  30C7  0086               	movwf	6
 18198  30C8  3002               	movlw	2	; select bank5/6
 18199  30C9  0087               	movwf	7
 18200  30CA  0833               	movf	??_error,w
 18201  30CB  0081               	movwf	1
 18202                           
 18203                           ;error.c: 20:  head = (head + 1) % 10;
 18204  30CC  300A               	movlw	10
 18205  30CD  00AC               	movwf	___awmod@divisor
 18206  30CE  3000               	movlw	0
 18207  30CF  00AD               	movwf	___awmod@divisor+1
 18208  30D0  0859               	movf	_head,w
 18209  30D1  3E01               	addlw	1
 18210  30D2  00AE               	movwf	___awmod@dividend
 18211  30D3  3000               	movlw	0
 18212  30D4  1803               	skipnc
 18213  30D5  3001               	movlw	1
 18214  30D6  00AF               	movwf	___awmod@dividend+1
 18215  30D7  31B1  21FE  31B0   	fcall	___awmod
 18216  30DA  0140               	movlb	0	; select bank0
 18217  30DB  082C               	movf	?___awmod,w
 18218  30DC  00B3               	movwf	??_error
 18219  30DD  0833               	movf	??_error,w
 18220  30DE  00D9               	movwf	_head
 18221                           
 18222                           ;error.c: 21:  if (head == tail)
 18223  30DF  0859               	movf	_head,w
 18224  30E0  0658               	xorwf	_tail,w
 18225  30E1  1D03               	skipz
 18226  30E2  0008               	return
 18227                           
 18228                           ;error.c: 22:   tail = (tail + 1) % 10;
 18229  30E3  300A               	movlw	10
 18230  30E4  00AC               	movwf	___awmod@divisor
 18231  30E5  3000               	movlw	0
 18232  30E6  00AD               	movwf	___awmod@divisor+1
 18233  30E7  0858               	movf	_tail,w
 18234  30E8  3E01               	addlw	1
 18235  30E9  00AE               	movwf	___awmod@dividend
 18236  30EA  3000               	movlw	0
 18237  30EB  1803               	skipnc
 18238  30EC  3001               	movlw	1
 18239  30ED  00AF               	movwf	___awmod@dividend+1
 18240  30EE  31B1  21FE         	fcall	___awmod
 18241  30F0  0140               	movlb	0	; select bank0
 18242  30F1  082C               	movf	?___awmod,w
 18243  30F2  00B3               	movwf	??_error
 18244  30F3  0833               	movf	??_error,w
 18245  30F4  00D8               	movwf	_tail
 18246  30F5  0008               	return
 18247  30F6                     __end_of_error:	
 18248                           
 18249                           	psect	text41
 18250  31FE                     __ptext41:	
 18251 ;; *************** function ___awmod *****************
 18252 ;; Defined at:
 18253 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
 18254 ;; Parameters:    Size  Location     Type
 18255 ;;  divisor         2   12[BANK0 ] int 
 18256 ;;  dividend        2   14[BANK0 ] int 
 18257 ;; Auto vars:     Size  Location     Type
 18258 ;;  sign            1   18[BANK0 ] unsigned char 
 18259 ;;  counter         1   17[BANK0 ] unsigned char 
 18260 ;; Return value:  Size  Location     Type
 18261 ;;                  2   12[BANK0 ] int 
 18262 ;; Registers used:
 18263 ;;		wreg, status,2, status,0
 18264 ;; Tracked objects:
 18265 ;;		On entry : 0/0
 18266 ;;		On exit  : 0/0
 18267 ;;		Unchanged: 0/0
 18268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18269 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18272 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18273 ;;Total ram usage:        7 bytes
 18274 ;; Hardware stack levels used:    1
 18275 ;; Hardware stack levels required when called:    3
 18276 ;; This function calls:
 18277 ;;		Nothing
 18278 ;; This function is called by:
 18279 ;;		_error
 18280 ;;		_viewErrorMessage
 18281 ;;		_itoa
 18282 ;; This function uses a non-reentrant model
 18283 ;;
 18284                           
 18285                           
 18286                           ;psect for function ___awmod
 18287  31FE                     ___awmod:	
 18288                           
 18289                           ;incstack = 0
 18290                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 18291  31FE  0140               	movlb	0	; select bank0
 18292  31FF  01B2               	clrf	___awmod@sign
 18293  3200  1FAF               	btfss	___awmod@dividend+1,7
 18294  3201  2A09               	goto	l9661
 18295  3202  09AE               	comf	___awmod@dividend,f
 18296  3203  09AF               	comf	___awmod@dividend+1,f
 18297  3204  0AAE               	incf	___awmod@dividend,f
 18298  3205  1903               	skipnz
 18299  3206  0AAF               	incf	___awmod@dividend+1,f
 18300  3207  01B2               	clrf	___awmod@sign
 18301  3208  0AB2               	incf	___awmod@sign,f
 18302  3209                     l9661:	
 18303  3209  1FAD               	btfss	___awmod@divisor+1,7
 18304  320A  2A10               	goto	l9665
 18305  320B  09AC               	comf	___awmod@divisor,f
 18306  320C  09AD               	comf	___awmod@divisor+1,f
 18307  320D  0AAC               	incf	___awmod@divisor,f
 18308  320E  1903               	skipnz
 18309  320F  0AAD               	incf	___awmod@divisor+1,f
 18310  3210                     l9665:	
 18311  3210  082C               	movf	___awmod@divisor,w
 18312  3211  042D               	iorwf	___awmod@divisor+1,w
 18313  3212  1903               	btfsc	3,2
 18314  3213  2A37               	goto	l9683
 18315  3214  01B1               	clrf	___awmod@counter
 18316  3215  0AB1               	incf	___awmod@counter,f
 18317  3216                     l9673:	
 18318  3216  1BAD               	btfsc	___awmod@divisor+1,7
 18319  3217  2A22               	goto	l9675
 18320  3218  3001               	movlw	1
 18321  3219                     u12225:	
 18322  3219  35AC               	lslf	___awmod@divisor,f
 18323  321A  0DAD               	rlf	___awmod@divisor+1,f
 18324  321B  0B89               	decfsz	9,f
 18325  321C  2A19               	goto	u12225
 18326  321D  3001               	movlw	1
 18327  321E  00B0               	movwf	??___awmod
 18328  321F  0830               	movf	??___awmod,w
 18329  3220  07B1               	addwf	___awmod@counter,f
 18330  3221  2A16               	goto	l9673
 18331  3222                     l9675:	
 18332  3222  082D               	movf	___awmod@divisor+1,w
 18333  3223  022F               	subwf	___awmod@dividend+1,w
 18334  3224  1D03               	skipz
 18335  3225  2A28               	goto	u12245
 18336  3226  082C               	movf	___awmod@divisor,w
 18337  3227  022E               	subwf	___awmod@dividend,w
 18338  3228                     u12245:	
 18339  3228  1C03               	skipc
 18340  3229  2A2E               	goto	l9679
 18341  322A  082C               	movf	___awmod@divisor,w
 18342  322B  02AE               	subwf	___awmod@dividend,f
 18343  322C  082D               	movf	___awmod@divisor+1,w
 18344  322D  3BAF               	subwfb	___awmod@dividend+1,f
 18345  322E                     l9679:	
 18346  322E  3001               	movlw	1
 18347  322F                     u12255:	
 18348  322F  36AD               	lsrf	___awmod@divisor+1,f
 18349  3230  0CAC               	rrf	___awmod@divisor,f
 18350  3231  0B89               	decfsz	9,f
 18351  3232  2A2F               	goto	u12255
 18352  3233  3001               	movlw	1
 18353  3234  02B1               	subwf	___awmod@counter,f
 18354  3235  1D03               	btfss	3,2
 18355  3236  2A22               	goto	l9675
 18356  3237                     l9683:	
 18357  3237  0832               	movf	___awmod@sign,w
 18358  3238  1903               	btfsc	3,2
 18359  3239  2A3F               	goto	l9687
 18360  323A  09AE               	comf	___awmod@dividend,f
 18361  323B  09AF               	comf	___awmod@dividend+1,f
 18362  323C  0AAE               	incf	___awmod@dividend,f
 18363  323D  1903               	skipnz
 18364  323E  0AAF               	incf	___awmod@dividend+1,f
 18365  323F                     l9687:	
 18366  323F  082F               	movf	___awmod@dividend+1,w
 18367  3240  00AD               	movwf	?___awmod+1
 18368  3241  082E               	movf	___awmod@dividend,w
 18369  3242  00AC               	movwf	?___awmod
 18370  3243  0008               	return
 18371  3244                     __end_of___awmod:	
 18372                           
 18373                           	psect	text42
 18374  3540                     __ptext42:	
 18375 ;; *************** function _ema *****************
 18376 ;; Defined at:
 18377 ;;		line 64 in file "common.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;  in              2   24[BANK0 ] unsigned short 
 18380 ;;  average         2   26[BANK0 ] unsigned short 
 18381 ;;  alpha           4   28[BANK0 ] unsigned long 
 18382 ;; Auto vars:     Size  Location     Type
 18383 ;;  tmp0            4   40[BANK0 ] unsigned long 
 18384 ;; Return value:  Size  Location     Type
 18385 ;;                  2   24[BANK0 ] unsigned short 
 18386 ;; Registers used:
 18387 ;;		wreg, status,2, status,0, pclath, cstack
 18388 ;; Tracked objects:
 18389 ;;		On entry : 0/0
 18390 ;;		On exit  : 0/0
 18391 ;;		Unchanged: 0/0
 18392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18393 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18394 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18395 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18396 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18397 ;;Total ram usage:       20 bytes
 18398 ;; Hardware stack levels used:    1
 18399 ;; Hardware stack levels required when called:    4
 18400 ;; This function calls:
 18401 ;;		___lmul
 18402 ;; This function is called by:
 18403 ;;		_checkChannelStatus
 18404 ;;		_getAnalogValues
 18405 ;; This function uses a non-reentrant model
 18406 ;;
 18407                           
 18408                           
 18409                           ;psect for function _ema
 18410  3540                     _ema:	
 18411                           
 18412                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 18413                           
 18414                           ;incstack = 0
 18415                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 18416  3540  0140               	movlb	0	; select bank0
 18417  3541  093C               	comf	ema@alpha,w
 18418  3542  00C0               	movwf	??_ema
 18419  3543  093D               	comf	ema@alpha+1,w
 18420  3544  00C1               	movwf	??_ema+1
 18421  3545  093E               	comf	ema@alpha+2,w
 18422  3546  00C2               	movwf	??_ema+2
 18423  3547  093F               	comf	ema@alpha+3,w
 18424  3548  00C3               	movwf	??_ema+3
 18425  3549  0AC0               	incf	??_ema,f
 18426  354A  1903               	skipnz
 18427  354B  0AC1               	incf	??_ema+1,f
 18428  354C  1903               	skipnz
 18429  354D  0AC2               	incf	??_ema+2,f
 18430  354E  1903               	skipnz
 18431  354F  0AC3               	incf	??_ema+3,f
 18432  3550  3000               	movlw	0
 18433  3551  0740               	addwf	??_ema,w
 18434  3552  00AC               	movwf	___lmul@multiplier
 18435  3553  3000               	movlw	0
 18436  3554  3D41               	addwfc	??_ema+1,w
 18437  3555  00AD               	movwf	___lmul@multiplier+1
 18438  3556  3001               	movlw	1
 18439  3557  3D42               	addwfc	??_ema+2,w
 18440  3558  00AE               	movwf	___lmul@multiplier+2
 18441  3559  3000               	movlw	0
 18442  355A  3D43               	addwfc	??_ema+3,w
 18443  355B  00AF               	movwf	___lmul@multiplier+3
 18444  355C  083A               	movf	ema@average,w
 18445  355D  00B0               	movwf	___lmul@multiplicand
 18446  355E  083B               	movf	ema@average+1,w
 18447  355F  00B1               	movwf	___lmul@multiplicand+1
 18448  3560  01B2               	clrf	___lmul@multiplicand+2
 18449  3561  01B3               	clrf	___lmul@multiplicand+3
 18450  3562  31BF  27D0  31B5   	fcall	___lmul
 18451  3565  0140               	movlb	0	; select bank0
 18452  3566  082C               	movf	?___lmul,w
 18453  3567  00C4               	movwf	??_ema+4
 18454  3568  082D               	movf	?___lmul+1,w
 18455  3569  00C5               	movwf	??_ema+5
 18456  356A  082E               	movf	?___lmul+2,w
 18457  356B  00C6               	movwf	??_ema+6
 18458  356C  082F               	movf	?___lmul+3,w
 18459  356D  00C7               	movwf	??_ema+7
 18460  356E  0838               	movf	ema@in,w
 18461  356F  00AC               	movwf	___lmul@multiplier
 18462  3570  0839               	movf	ema@in+1,w
 18463  3571  00AD               	movwf	___lmul@multiplier+1
 18464  3572  01AE               	clrf	___lmul@multiplier+2
 18465  3573  01AF               	clrf	___lmul@multiplier+3
 18466  3574  083F               	movf	ema@alpha+3,w
 18467  3575  00B3               	movwf	___lmul@multiplicand+3
 18468  3576  083E               	movf	ema@alpha+2,w
 18469  3577  00B2               	movwf	___lmul@multiplicand+2
 18470  3578  083D               	movf	ema@alpha+1,w
 18471  3579  00B1               	movwf	___lmul@multiplicand+1
 18472  357A  083C               	movf	ema@alpha,w
 18473  357B  00B0               	movwf	___lmul@multiplicand
 18474  357C  31BF  27D0  31B5   	fcall	___lmul
 18475  357F  0140               	movlb	0	; select bank0
 18476  3580  082C               	movf	?___lmul,w
 18477  3581  07C4               	addwf	??_ema+4,f
 18478  3582  082D               	movf	?___lmul+1,w
 18479  3583  3DC5               	addwfc	??_ema+5,f
 18480  3584  082E               	movf	?___lmul+2,w
 18481  3585  3DC6               	addwfc	??_ema+6,f
 18482  3586  082F               	movf	?___lmul+3,w
 18483  3587  3DC7               	addwfc	??_ema+7,f
 18484  3588  0847               	movf	??_ema+7,w
 18485  3589  00CB               	movwf	ema@tmp0+3
 18486  358A  0846               	movf	??_ema+6,w
 18487  358B  00CA               	movwf	ema@tmp0+2
 18488  358C  0845               	movf	??_ema+5,w
 18489  358D  00C9               	movwf	ema@tmp0+1
 18490  358E  0844               	movf	??_ema+4,w
 18491  358F  00C8               	movwf	ema@tmp0
 18492                           
 18493                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 18494  3590  3000               	movlw	0
 18495  3591  00C0               	movwf	??_ema
 18496  3592  3080               	movlw	128
 18497  3593  00C1               	movwf	??_ema+1
 18498  3594  3000               	movlw	0
 18499  3595  00C2               	movwf	??_ema+2
 18500  3596  3000               	movlw	0
 18501  3597  00C3               	movwf	??_ema+3
 18502  3598  0848               	movf	ema@tmp0,w
 18503  3599  07C0               	addwf	??_ema,f
 18504  359A  0849               	movf	ema@tmp0+1,w
 18505  359B  3DC1               	addwfc	??_ema+1,f
 18506  359C  084A               	movf	ema@tmp0+2,w
 18507  359D  3DC2               	addwfc	??_ema+2,f
 18508  359E  084B               	movf	ema@tmp0+3,w
 18509  359F  3DC3               	addwfc	??_ema+3,f
 18510  35A0  3010               	movlw	16
 18511  35A1                     u10475:	
 18512  35A1  36C3               	lsrf	??_ema+3,f
 18513  35A2  0CC2               	rrf	??_ema+2,f
 18514  35A3  0CC1               	rrf	??_ema+1,f
 18515  35A4  0CC0               	rrf	??_ema,f
 18516  35A5  0B89               	decfsz	9,f
 18517  35A6  2DA1               	goto	u10475
 18518  35A7  0841               	movf	??_ema+1,w
 18519  35A8  00B9               	movwf	?_ema+1
 18520  35A9  0840               	movf	??_ema,w
 18521  35AA  00B8               	movwf	?_ema
 18522  35AB  0008               	return
 18523  35AC                     __end_of_ema:	
 18524                           
 18525                           	psect	text43
 18526  3FD0                     __ptext43:	
 18527 ;; *************** function ___lmul *****************
 18528 ;; Defined at:
 18529 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
 18530 ;; Parameters:    Size  Location     Type
 18531 ;;  multiplier      4   12[BANK0 ] unsigned long 
 18532 ;;  multiplicand    4   16[BANK0 ] unsigned long 
 18533 ;; Auto vars:     Size  Location     Type
 18534 ;;  product         4   20[BANK0 ] unsigned long 
 18535 ;; Return value:  Size  Location     Type
 18536 ;;                  4   12[BANK0 ] unsigned long 
 18537 ;; Registers used:
 18538 ;;		wreg, status,2, status,0
 18539 ;; Tracked objects:
 18540 ;;		On entry : 0/0
 18541 ;;		On exit  : 0/0
 18542 ;;		Unchanged: 0/0
 18543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18544 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18545 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18547 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18548 ;;Total ram usage:       12 bytes
 18549 ;; Hardware stack levels used:    1
 18550 ;; Hardware stack levels required when called:    3
 18551 ;; This function calls:
 18552 ;;		Nothing
 18553 ;; This function is called by:
 18554 ;;		_ema
 18555 ;; This function uses a non-reentrant model
 18556 ;;
 18557                           
 18558                           
 18559                           ;psect for function ___lmul
 18560  3FD0                     ___lmul:	
 18561                           
 18562                           ;incstack = 0
 18563                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 18564  3FD0  3000               	movlw	0
 18565  3FD1  0140               	movlb	0	; select bank0
 18566  3FD2  00B7               	movwf	___lmul@product+3
 18567  3FD3  3000               	movlw	0
 18568  3FD4  00B6               	movwf	___lmul@product+2
 18569  3FD5  3000               	movlw	0
 18570  3FD6  00B5               	movwf	___lmul@product+1
 18571  3FD7  3000               	movlw	0
 18572  3FD8  00B4               	movwf	___lmul@product
 18573  3FD9                     l7905:	
 18574  3FD9  1C2C               	btfss	___lmul@multiplier,0
 18575  3FDA  2FE3               	goto	l7909
 18576  3FDB  0830               	movf	___lmul@multiplicand,w
 18577  3FDC  07B4               	addwf	___lmul@product,f
 18578  3FDD  0831               	movf	___lmul@multiplicand+1,w
 18579  3FDE  3DB5               	addwfc	___lmul@product+1,f
 18580  3FDF  0832               	movf	___lmul@multiplicand+2,w
 18581  3FE0  3DB6               	addwfc	___lmul@product+2,f
 18582  3FE1  0833               	movf	___lmul@multiplicand+3,w
 18583  3FE2  3DB7               	addwfc	___lmul@product+3,f
 18584  3FE3                     l7909:	
 18585  3FE3  3001               	movlw	1
 18586  3FE4                     u9915:	
 18587  3FE4  35B0               	lslf	___lmul@multiplicand,f
 18588  3FE5  0DB1               	rlf	___lmul@multiplicand+1,f
 18589  3FE6  0DB2               	rlf	___lmul@multiplicand+2,f
 18590  3FE7  0DB3               	rlf	___lmul@multiplicand+3,f
 18591  3FE8  0B89               	decfsz	9,f
 18592  3FE9  2FE4               	goto	u9915
 18593  3FEA  3001               	movlw	1
 18594  3FEB                     u9925:	
 18595  3FEB  36AF               	lsrf	___lmul@multiplier+3,f
 18596  3FEC  0CAE               	rrf	___lmul@multiplier+2,f
 18597  3FED  0CAD               	rrf	___lmul@multiplier+1,f
 18598  3FEE  0CAC               	rrf	___lmul@multiplier,f
 18599  3FEF  0B89               	decfsz	9,f
 18600  3FF0  2FEB               	goto	u9925
 18601  3FF1  082F               	movf	___lmul@multiplier+3,w
 18602  3FF2  042E               	iorwf	___lmul@multiplier+2,w
 18603  3FF3  042D               	iorwf	___lmul@multiplier+1,w
 18604  3FF4  042C               	iorwf	___lmul@multiplier,w
 18605  3FF5  1D03               	skipz
 18606  3FF6  2FD9               	goto	l7905
 18607  3FF7  0837               	movf	___lmul@product+3,w
 18608  3FF8  00AF               	movwf	?___lmul+3
 18609  3FF9  0836               	movf	___lmul@product+2,w
 18610  3FFA  00AE               	movwf	?___lmul+2
 18611  3FFB  0835               	movf	___lmul@product+1,w
 18612  3FFC  00AD               	movwf	?___lmul+1
 18613  3FFD  0834               	movf	___lmul@product,w
 18614  3FFE  00AC               	movwf	?___lmul
 18615  3FFF  0008               	return
 18616  4000                     __end_of___lmul:	
 18617                           
 18618                           	psect	text44
 18619  32D2                     __ptext44:	
 18620 ;; *************** function ___fleq *****************
 18621 ;; Defined at:
 18622 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\fleq.c"
 18623 ;; Parameters:    Size  Location     Type
 18624 ;;  ff1             4   12[BANK0 ] unsigned long 
 18625 ;;  ff2             4   16[BANK0 ] unsigned long 
 18626 ;; Auto vars:     Size  Location     Type
 18627 ;;		None
 18628 ;; Return value:  Size  Location     Type
 18629 ;;		None               void
 18630 ;; Registers used:
 18631 ;;		wreg, status,2, status,0
 18632 ;; Tracked objects:
 18633 ;;		On entry : 0/0
 18634 ;;		On exit  : 0/0
 18635 ;;		Unchanged: 0/0
 18636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18637 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18639 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18640 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18641 ;;Total ram usage:       12 bytes
 18642 ;; Hardware stack levels used:    1
 18643 ;; Hardware stack levels required when called:    3
 18644 ;; This function calls:
 18645 ;;		Nothing
 18646 ;; This function is called by:
 18647 ;;		_channelSetup
 18648 ;;		_setOutputPower
 18649 ;;		_checkChannelStatus
 18650 ;; This function uses a non-reentrant model
 18651 ;;
 18652                           
 18653                           
 18654                           ;psect for function ___fleq
 18655  32D2                     ___fleq:	
 18656                           
 18657                           ;incstack = 0
 18658                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 18659  32D2  3000               	movlw	0
 18660  32D3  0140               	movlb	0	; select bank0
 18661  32D4  052C               	andwf	___fleq@ff1,w
 18662  32D5  00B4               	movwf	??___fleq
 18663  32D6  3000               	movlw	0
 18664  32D7  052D               	andwf	___fleq@ff1+1,w
 18665  32D8  00B5               	movwf	??___fleq+1
 18666  32D9  3080               	movlw	128
 18667  32DA  052E               	andwf	___fleq@ff1+2,w
 18668  32DB  00B6               	movwf	??___fleq+2
 18669  32DC  307F               	movlw	127
 18670  32DD  052F               	andwf	___fleq@ff1+3,w
 18671  32DE  00B7               	movwf	??___fleq+3
 18672  32DF  0837               	movf	??___fleq+3,w
 18673  32E0  0436               	iorwf	??___fleq+2,w
 18674  32E1  0435               	iorwf	??___fleq+1,w
 18675  32E2  0434               	iorwf	??___fleq,w
 18676  32E3  1D03               	skipz
 18677  32E4  2AED               	goto	l1109
 18678  32E5  3000               	movlw	0
 18679  32E6  00AF               	movwf	___fleq@ff1+3
 18680  32E7  3000               	movlw	0
 18681  32E8  00AE               	movwf	___fleq@ff1+2
 18682  32E9  3000               	movlw	0
 18683  32EA  00AD               	movwf	___fleq@ff1+1
 18684  32EB  3000               	movlw	0
 18685  32EC  00AC               	movwf	___fleq@ff1
 18686  32ED                     l1109:	
 18687  32ED  3000               	movlw	0
 18688  32EE  0530               	andwf	___fleq@ff2,w
 18689  32EF  00B4               	movwf	??___fleq
 18690  32F0  3000               	movlw	0
 18691  32F1  0531               	andwf	___fleq@ff2+1,w
 18692  32F2  00B5               	movwf	??___fleq+1
 18693  32F3  3080               	movlw	128
 18694  32F4  0532               	andwf	___fleq@ff2+2,w
 18695  32F5  00B6               	movwf	??___fleq+2
 18696  32F6  307F               	movlw	127
 18697  32F7  0533               	andwf	___fleq@ff2+3,w
 18698  32F8  00B7               	movwf	??___fleq+3
 18699  32F9  0837               	movf	??___fleq+3,w
 18700  32FA  0436               	iorwf	??___fleq+2,w
 18701  32FB  0435               	iorwf	??___fleq+1,w
 18702  32FC  0434               	iorwf	??___fleq,w
 18703  32FD  1D03               	skipz
 18704  32FE  2B07               	goto	l1110
 18705  32FF  3000               	movlw	0
 18706  3300  00B3               	movwf	___fleq@ff2+3
 18707  3301  3000               	movlw	0
 18708  3302  00B2               	movwf	___fleq@ff2+2
 18709  3303  3000               	movlw	0
 18710  3304  00B1               	movwf	___fleq@ff2+1
 18711  3305  3000               	movlw	0
 18712  3306  00B0               	movwf	___fleq@ff2
 18713  3307                     l1110:	
 18714  3307  0833               	movf	___fleq@ff2+3,w
 18715  3308  062F               	xorwf	___fleq@ff1+3,w
 18716  3309  1D03               	skipz
 18717  330A  2B15               	goto	u13445
 18718  330B  0832               	movf	___fleq@ff2+2,w
 18719  330C  062E               	xorwf	___fleq@ff1+2,w
 18720  330D  1D03               	skipz
 18721  330E  2B15               	goto	u13445
 18722  330F  0831               	movf	___fleq@ff2+1,w
 18723  3310  062D               	xorwf	___fleq@ff1+1,w
 18724  3311  1D03               	skipz
 18725  3312  2B15               	goto	u13445
 18726  3313  0830               	movf	___fleq@ff2,w
 18727  3314  062C               	xorwf	___fleq@ff1,w
 18728  3315                     u13445:	
 18729  3315  1903               	skipnz
 18730  3316  2B19               	goto	l10299
 18731  3317  1003               	clrc
 18732  3318  0008               	return
 18733  3319                     l10299:	
 18734  3319  1403               	setc
 18735  331A  0008               	return
 18736  331B                     __end_of___fleq:	
 18737                           
 18738                           	psect	text45
 18739  0B95                     __ptext45:	
 18740 ;; *************** function _channelThing *****************
 18741 ;; Defined at:
 18742 ;;		line 344 in file "system.c"
 18743 ;; Parameters:    Size  Location     Type
 18744 ;;		None
 18745 ;; Auto vars:     Size  Location     Type
 18746 ;;  grpB            4   18[BANK6 ] char [4]
 18747 ;;  grpA            4   12[BANK6 ] char [4]
 18748 ;;  totalGrpB       4    8[BANK6 ] float 
 18749 ;;  totalGrpA       4    4[BANK6 ] float 
 18750 ;;  total           4    0[BANK6 ] float 
 18751 ;;  n               1   22[BANK6 ] unsigned char 
 18752 ;;  numGrpB         1   17[BANK6 ] unsigned char 
 18753 ;;  numGrpA         1   16[BANK6 ] unsigned char 
 18754 ;; Return value:  Size  Location     Type
 18755 ;;                  1    wreg      void 
 18756 ;; Registers used:
 18757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18758 ;; Tracked objects:
 18759 ;;		On entry : 0/0
 18760 ;;		On exit  : 0/0
 18761 ;;		Unchanged: 0/0
 18762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18764 ;;      Locals:         0       0       0       0       0       0       0      23       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18765 ;;      Temps:          0       0       0       0       0      15       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18766 ;;      Totals:         0       0       0       0       0      15       0      23       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18767 ;;Total ram usage:       38 bytes
 18768 ;; Hardware stack levels used:    1
 18769 ;; Hardware stack levels required when called:    6
 18770 ;; This function calls:
 18771 ;;		___bmul
 18772 ;;		___fladd
 18773 ;;		___fldiv
 18774 ;;		___flge
 18775 ;;		___flmul
 18776 ;;		___wmul
 18777 ;;		___xxtofl
 18778 ;;		_qsort
 18779 ;; This function is called by:
 18780 ;;		_main
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           
 18785                           ;psect for function _channelThing
 18786  0B95                     _channelThing:	
 18787                           
 18788                           ;system.c: 346:  uint8_t n;;system.c: 347:  float total, totalGrpA, totalGrpB;;system.c:
      +                           348:  uint8_t numGrpA, numGrpB;;system.c: 349:  int8_t grpA[4], grpB[4];;system.c: 352:
      +                            for(n = 0; n < 4; n++) {
 18789                           
 18790                           ;incstack = 0
 18791                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18792  0B95  0146               	movlb	6	; select bank6
 18793  0B96  01B6               	clrf	channelThing@n^(0+768)
 18794  0B97  3004               	movlw	4
 18795  0B98  0236               	subwf	channelThing@n^(0+768),w
 18796  0B99  1803               	btfsc	3,0
 18797  0B9A  2C46               	goto	l11189
 18798  0B9B                     l11177:	
 18799                           
 18800                           ;system.c: 353:   grpA[n] = -1;
 18801  0B9B  0836               	movf	channelThing@n^(0+768),w
 18802  0B9C  3E2C               	addlw	(low (channelThing@grpA| (0+768)))& (0+255)
 18803  0B9D  0086               	movwf	6
 18804  0B9E  3003               	movlw	3	; select bank6/7
 18805  0B9F  0087               	movwf	7
 18806  0BA0  0181               	clrf	1
 18807  0BA1  0381               	decf	1,f
 18808                           
 18809                           ;system.c: 354:   grpB[n] = -1;
 18810  0BA2  0836               	movf	channelThing@n^(0+768),w
 18811  0BA3  3E32               	addlw	(low (channelThing@grpB| (0+768)))& (0+255)
 18812  0BA4  0086               	movwf	6
 18813  0BA5  3003               	movlw	3	; select bank6/7
 18814  0BA6  0087               	movwf	7
 18815  0BA7  0181               	clrf	1
 18816  0BA8  0381               	decf	1,f
 18817                           
 18818                           ;system.c: 356:   virtChannels[n].phyChanNum = n;
 18819  0BA9  0836               	movf	channelThing@n^(0+768),w
 18820  0BAA  0144               	movlb	4	; select bank4
 18821  0BAB  00C9               	movwf	??_channelThing^(0+512)
 18822  0BAC  01CA               	clrf	(??_channelThing^(0+512)+1)
 18823  0BAD  3009               	movlw	9
 18824  0BAE  00CB               	movwf	(??_channelThing+2)^(0+512)
 18825  0BAF  084B               	movf	(??_channelThing+2)^(0+512),w
 18826  0BB0  0140               	movlb	0	; select bank0
 18827  0BB1  00AC               	movwf	___bmul@multiplicand
 18828  0BB2  0146               	movlb	6	; select bank6
 18829  0BB3  0836               	movf	channelThing@n^(0+768),w
 18830  0BB4  31BE  26B0  318B   	fcall	___bmul
 18831  0BB7  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18832  0BB8  0086               	movwf	6
 18833  0BB9  3002               	movlw	2	; select bank5/6
 18834  0BBA  0087               	movwf	7
 18835  0BBB  0144               	movlb	4	; select bank4
 18836  0BBC  0849               	movf	??_channelThing^(0+512),w
 18837  0BBD  3FC0               	movwi [0]fsr1
 18838  0BBE  084A               	movf	(??_channelThing+1)^(0+512),w
 18839  0BBF  3FC1               	movwi [1]fsr1
 18840                           
 18841                           ;system.c: 357:   virtChannels[n].current = data.heater[n].current;
 18842  0BC0  0146               	movlb	6	; select bank6
 18843  0BC1  0836               	movf	channelThing@n^(0+768),w
 18844  0BC2  0144               	movlb	4	; select bank4
 18845  0BC3  00C9               	movwf	??_channelThing^(0+512)
 18846  0BC4  01CA               	clrf	(??_channelThing^(0+512)+1)
 18847  0BC5  0849               	movf	??_channelThing^(0+512),w
 18848  0BC6  0140               	movlb	0	; select bank0
 18849  0BC7  00B5               	movwf	___wmul@multiplier
 18850  0BC8  0144               	movlb	4	; select bank4
 18851  0BC9  084A               	movf	(??_channelThing+1)^(0+512),w
 18852  0BCA  0140               	movlb	0	; select bank0
 18853  0BCB  00B6               	movwf	___wmul@multiplier+1
 18854  0BCC  301F               	movlw	31
 18855  0BCD  00B7               	movwf	___wmul@multiplicand
 18856  0BCE  3000               	movlw	0
 18857  0BCF  00B8               	movwf	___wmul@multiplicand+1
 18858  0BD0  31BF  270A  318B   	fcall	___wmul
 18859  0BD3  3074               	movlw	116
 18860  0BD4  0144               	movlb	4	; select bank4
 18861  0BD5  00CB               	movwf	(??_channelThing+2)^(0+512)
 18862  0BD6  3027               	movlw	39
 18863  0BD7  00CC               	movwf	((??_channelThing+2)^(0+512)+1)
 18864  0BD8  0140               	movlb	0	; select bank0
 18865  0BD9  0835               	movf	?___wmul,w
 18866  0BDA  0144               	movlb	4	; select bank4
 18867  0BDB  074B               	addwf	(??_channelThing+2)^(0+512),w
 18868  0BDC  0086               	movwf	6
 18869  0BDD  0140               	movlb	0	; select bank0
 18870  0BDE  0836               	movf	?___wmul+1,w
 18871  0BDF  0144               	movlb	4	; select bank4
 18872  0BE0  3D4C               	addwfc	(??_channelThing+3)^(0+512),w
 18873  0BE1  0087               	movwf	7
 18874  0BE2  3F40               	moviw [0]fsr1
 18875  0BE3  00CD               	movwf	(??_channelThing+4)^(0+512)
 18876  0BE4  3F41               	moviw [1]fsr1
 18877  0BE5  00CE               	movwf	((??_channelThing+4)^(0+512)+1)
 18878  0BE6  3F42               	moviw [2]fsr1
 18879  0BE7  00CF               	movwf	((??_channelThing+4)^(0+512)+2)
 18880  0BE8  3F43               	moviw [3]fsr1
 18881  0BE9  00D0               	movwf	((??_channelThing+4)^(0+512)+3)
 18882  0BEA  3009               	movlw	9
 18883  0BEB  00D1               	movwf	(??_channelThing+8)^(0+512)
 18884  0BEC  0851               	movf	(??_channelThing+8)^(0+512),w
 18885  0BED  0140               	movlb	0	; select bank0
 18886  0BEE  00AC               	movwf	___bmul@multiplicand
 18887  0BEF  0146               	movlb	6	; select bank6
 18888  0BF0  0836               	movf	channelThing@n^(0+768),w
 18889  0BF1  31BE  26B0  318B   	fcall	___bmul
 18890  0BF4  3E02               	addlw	2
 18891  0BF5  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18892  0BF6  0086               	movwf	6
 18893  0BF7  3002               	movlw	2	; select bank5/6
 18894  0BF8  0087               	movwf	7
 18895  0BF9  0144               	movlb	4	; select bank4
 18896  0BFA  084D               	movf	(??_channelThing+4)^(0+512),w
 18897  0BFB  3FC0               	movwi [0]fsr1
 18898  0BFC  084E               	movf	(??_channelThing+5)^(0+512),w
 18899  0BFD  3FC1               	movwi [1]fsr1
 18900  0BFE  084F               	movf	(??_channelThing+6)^(0+512),w
 18901  0BFF  3FC2               	movwi [2]fsr1
 18902  0C00  0850               	movf	(??_channelThing+7)^(0+512),w
 18903  0C01  3FC3               	movwi [3]fsr1
 18904                           
 18905                           ;system.c: 358:   virtChannels[n].DC = data.heater[n].DCreq;
 18906  0C02  0146               	movlb	6	; select bank6
 18907  0C03  0836               	movf	channelThing@n^(0+768),w
 18908  0C04  0144               	movlb	4	; select bank4
 18909  0C05  00C9               	movwf	??_channelThing^(0+512)
 18910  0C06  01CA               	clrf	(??_channelThing^(0+512)+1)
 18911  0C07  0849               	movf	??_channelThing^(0+512),w
 18912  0C08  0140               	movlb	0	; select bank0
 18913  0C09  00B5               	movwf	___wmul@multiplier
 18914  0C0A  0144               	movlb	4	; select bank4
 18915  0C0B  084A               	movf	(??_channelThing+1)^(0+512),w
 18916  0C0C  0140               	movlb	0	; select bank0
 18917  0C0D  00B6               	movwf	___wmul@multiplier+1
 18918  0C0E  301F               	movlw	31
 18919  0C0F  00B7               	movwf	___wmul@multiplicand
 18920  0C10  3000               	movlw	0
 18921  0C11  00B8               	movwf	___wmul@multiplicand+1
 18922  0C12  31BF  270A  318B   	fcall	___wmul
 18923  0C15  3074               	movlw	116
 18924  0C16  0144               	movlb	4	; select bank4
 18925  0C17  00CB               	movwf	(??_channelThing+2)^(0+512)
 18926  0C18  3027               	movlw	39
 18927  0C19  00CC               	movwf	((??_channelThing+2)^(0+512)+1)
 18928  0C1A  0140               	movlb	0	; select bank0
 18929  0C1B  0835               	movf	?___wmul,w
 18930  0C1C  0144               	movlb	4	; select bank4
 18931  0C1D  074B               	addwf	(??_channelThing+2)^(0+512),w
 18932  0C1E  00CD               	movwf	(??_channelThing+4)^(0+512)
 18933  0C1F  0140               	movlb	0	; select bank0
 18934  0C20  0836               	movf	?___wmul+1,w
 18935  0C21  0144               	movlb	4	; select bank4
 18936  0C22  3D4C               	addwfc	(??_channelThing+3)^(0+512),w
 18937  0C23  00CE               	movwf	(??_channelThing+5)^(0+512)
 18938  0C24  084D               	movf	(??_channelThing+4)^(0+512),w
 18939  0C25  0086               	movwf	6
 18940  0C26  084E               	movf	(??_channelThing+5)^(0+512),w
 18941  0C27  0087               	movwf	7
 18942  0C28  3154               	addfsr 1,20
 18943  0C29  0801               	movf	1,w
 18944  0C2A  00CF               	movwf	(??_channelThing+6)^(0+512)
 18945  0C2B  3009               	movlw	9
 18946  0C2C  00D0               	movwf	(??_channelThing+7)^(0+512)
 18947  0C2D  0850               	movf	(??_channelThing+7)^(0+512),w
 18948  0C2E  0140               	movlb	0	; select bank0
 18949  0C2F  00AC               	movwf	___bmul@multiplicand
 18950  0C30  0146               	movlb	6	; select bank6
 18951  0C31  0836               	movf	channelThing@n^(0+768),w
 18952  0C32  31BE  26B0  318B   	fcall	___bmul
 18953  0C35  3E06               	addlw	6
 18954  0C36  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18955  0C37  0086               	movwf	6
 18956  0C38  3002               	movlw	2	; select bank5/6
 18957  0C39  0087               	movwf	7
 18958  0C3A  0144               	movlb	4	; select bank4
 18959  0C3B  084F               	movf	(??_channelThing+6)^(0+512),w
 18960  0C3C  0081               	movwf	1
 18961                           
 18962                           ;system.c: 359:  }
 18963  0C3D  3001               	movlw	1
 18964  0C3E  00C9               	movwf	??_channelThing^(0+512)
 18965  0C3F  0849               	movf	??_channelThing^(0+512),w
 18966  0C40  0146               	movlb	6	; select bank6
 18967  0C41  07B6               	addwf	channelThing@n^(0+768),f
 18968  0C42  3004               	movlw	4
 18969  0C43  0236               	subwf	channelThing@n^(0+768),w
 18970  0C44  1C03               	skipc
 18971  0C45  2B9B               	goto	l11177
 18972  0C46                     l11189:	
 18973                           
 18974                           ;system.c: 362:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 18975  0C46  30AA               	movlw	low _virtChannels
 18976  0C47  0141               	movlb	1	; select bank1
 18977  0C48  00DC               	movwf	qsort@vbase^(0+128)
 18978  0C49  3002               	movlw	high _virtChannels
 18979  0C4A  00DD               	movwf	(qsort@vbase+1)^(0+128)
 18980  0C4B  3004               	movlw	4
 18981  0C4C  00DE               	movwf	qsort@nel^(0+128)
 18982  0C4D  3000               	movlw	0
 18983  0C4E  00DF               	movwf	(qsort@nel^(0+128)+1)
 18984  0C4F  3009               	movlw	9
 18985  0C50  00E0               	movwf	qsort@width^(0+128)
 18986  0C51  3000               	movlw	0
 18987  0C52  00E1               	movwf	(qsort@width^(0+128)+1)
 18988  0C53  3076               	movlw	low _sortCur
 18989  0C54  00E2               	movwf	qsort@compar^(0+128)
 18990  0C55  3031               	movlw	high _sortCur
 18991  0C56  00E3               	movwf	(qsort@compar^(0+128)+1)
 18992  0C57  3185  25AB  318B   	fcall	_qsort
 18993                           
 18994                           ;system.c: 364:  total = totalGrpA = totalGrpB = 0;
 18995  0C5A  3000               	movlw	0
 18996  0C5B  0146               	movlb	6	; select bank6
 18997  0C5C  00AB               	movwf	(channelThing@totalGrpB+3)^(0+768)
 18998  0C5D  3000               	movlw	0
 18999  0C5E  00AA               	movwf	(channelThing@totalGrpB+2)^(0+768)
 19000  0C5F  3000               	movlw	0
 19001  0C60  00A9               	movwf	(channelThing@totalGrpB+1)^(0+768)
 19002  0C61  3000               	movlw	0
 19003  0C62  00A8               	movwf	channelThing@totalGrpB^(0+768)
 19004  0C63  082B               	movf	(channelThing@totalGrpB+3)^(0+768),w
 19005  0C64  00A7               	movwf	(channelThing@totalGrpA+3)^(0+768)
 19006  0C65  082A               	movf	(channelThing@totalGrpB+2)^(0+768),w
 19007  0C66  00A6               	movwf	(channelThing@totalGrpA+2)^(0+768)
 19008  0C67  0829               	movf	(channelThing@totalGrpB+1)^(0+768),w
 19009  0C68  00A5               	movwf	(channelThing@totalGrpA+1)^(0+768)
 19010  0C69  0828               	movf	channelThing@totalGrpB^(0+768),w
 19011  0C6A  00A4               	movwf	channelThing@totalGrpA^(0+768)
 19012  0C6B  0827               	movf	(channelThing@totalGrpA+3)^(0+768),w
 19013  0C6C  00A3               	movwf	(channelThing@total+3)^(0+768)
 19014  0C6D  0826               	movf	(channelThing@totalGrpA+2)^(0+768),w
 19015  0C6E  00A2               	movwf	(channelThing@total+2)^(0+768)
 19016  0C6F  0825               	movf	(channelThing@totalGrpA+1)^(0+768),w
 19017  0C70  00A1               	movwf	(channelThing@total+1)^(0+768)
 19018  0C71  0824               	movf	channelThing@totalGrpA^(0+768),w
 19019  0C72  00A0               	movwf	channelThing@total^(0+768)
 19020                           
 19021                           ;system.c: 365:  numGrpA = numGrpB = 0;
 19022  0C73  01B1               	clrf	channelThing@numGrpB^(0+768)
 19023  0C74  01B0               	clrf	channelThing@numGrpA^(0+768)
 19024                           
 19025                           ;system.c: 369:  for(n = 0; n < 4; n++) {
 19026  0C75  01B6               	clrf	channelThing@n^(0+768)
 19027  0C76  3004               	movlw	4
 19028  0C77  0236               	subwf	channelThing@n^(0+768),w
 19029  0C78  1803               	btfsc	3,0
 19030  0C79  2DE1               	goto	l11221
 19031  0C7A                     l11201:	
 19032                           
 19033                           ;system.c: 370:   total += virtChannels[n].current;
 19034  0C7A  3009               	movlw	9
 19035  0C7B  0144               	movlb	4	; select bank4
 19036  0C7C  00C9               	movwf	??_channelThing^(0+512)
 19037  0C7D  0849               	movf	??_channelThing^(0+512),w
 19038  0C7E  0140               	movlb	0	; select bank0
 19039  0C7F  00AC               	movwf	___bmul@multiplicand
 19040  0C80  0146               	movlb	6	; select bank6
 19041  0C81  0836               	movf	channelThing@n^(0+768),w
 19042  0C82  31BE  26B0  318B   	fcall	___bmul
 19043  0C85  3E02               	addlw	2
 19044  0C86  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19045  0C87  0086               	movwf	6
 19046  0C88  3002               	movlw	2	; select bank5/6
 19047  0C89  0087               	movwf	7
 19048  0C8A  3F40               	moviw [0]fsr1
 19049  0C8B  0141               	movlb	1	; select bank1
 19050  0C8C  00B1               	movwf	___fladd@b^(0+128)
 19051  0C8D  3F41               	moviw [1]fsr1
 19052  0C8E  00B2               	movwf	(___fladd@b+1)^(0+128)
 19053  0C8F  3F42               	moviw [2]fsr1
 19054  0C90  00B3               	movwf	(___fladd@b+2)^(0+128)
 19055  0C91  3F43               	moviw [3]fsr1
 19056  0C92  00B4               	movwf	(___fladd@b+3)^(0+128)
 19057  0C93  0146               	movlb	6	; select bank6
 19058  0C94  0823               	movf	(channelThing@total+3)^(0+768),w
 19059  0C95  0141               	movlb	1	; select bank1
 19060  0C96  00B8               	movwf	(___fladd@a+3)^(0+128)
 19061  0C97  0146               	movlb	6	; select bank6
 19062  0C98  0822               	movf	(channelThing@total+2)^(0+768),w
 19063  0C99  0141               	movlb	1	; select bank1
 19064  0C9A  00B7               	movwf	(___fladd@a+2)^(0+128)
 19065  0C9B  0146               	movlb	6	; select bank6
 19066  0C9C  0821               	movf	(channelThing@total+1)^(0+768),w
 19067  0C9D  0141               	movlb	1	; select bank1
 19068  0C9E  00B6               	movwf	(___fladd@a+1)^(0+128)
 19069  0C9F  0146               	movlb	6	; select bank6
 19070  0CA0  0820               	movf	channelThing@total^(0+768),w
 19071  0CA1  0141               	movlb	1	; select bank1
 19072  0CA2  00B5               	movwf	___fladd@a^(0+128)
 19073  0CA3  319E  2606  318B   	fcall	___fladd
 19074  0CA6  0141               	movlb	1	; select bank1
 19075  0CA7  0834               	movf	(?___fladd+3)^(0+128),w
 19076  0CA8  0146               	movlb	6	; select bank6
 19077  0CA9  00A3               	movwf	(channelThing@total+3)^(0+768)
 19078  0CAA  0141               	movlb	1	; select bank1
 19079  0CAB  0833               	movf	(?___fladd+2)^(0+128),w
 19080  0CAC  0146               	movlb	6	; select bank6
 19081  0CAD  00A2               	movwf	(channelThing@total+2)^(0+768)
 19082  0CAE  0141               	movlb	1	; select bank1
 19083  0CAF  0832               	movf	(?___fladd+1)^(0+128),w
 19084  0CB0  0146               	movlb	6	; select bank6
 19085  0CB1  00A1               	movwf	(channelThing@total+1)^(0+768)
 19086  0CB2  0141               	movlb	1	; select bank1
 19087  0CB3  0831               	movf	?___fladd^(0+128),w
 19088  0CB4  0146               	movlb	6	; select bank6
 19089  0CB5  00A0               	movwf	channelThing@total^(0+768)
 19090                           
 19091                           ;system.c: 371:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 19092  0CB6  3040               	movlw	64
 19093  0CB7  0141               	movlb	1	; select bank1
 19094  0CB8  00CC               	movwf	(___flge@ff1+3)^(0+128)
 19095  0CB9  3060               	movlw	96
 19096  0CBA  00CB               	movwf	(___flge@ff1+2)^(0+128)
 19097  0CBB  3000               	movlw	0
 19098  0CBC  00CA               	movwf	(___flge@ff1+1)^(0+128)
 19099  0CBD  3000               	movlw	0
 19100  0CBE  00C9               	movwf	___flge@ff1^(0+128)
 19101  0CBF  0146               	movlb	6	; select bank6
 19102  0CC0  0827               	movf	(channelThing@totalGrpA+3)^(0+768),w
 19103  0CC1  0141               	movlb	1	; select bank1
 19104  0CC2  00B4               	movwf	(___fladd@b+3)^(0+128)
 19105  0CC3  0146               	movlb	6	; select bank6
 19106  0CC4  0826               	movf	(channelThing@totalGrpA+2)^(0+768),w
 19107  0CC5  0141               	movlb	1	; select bank1
 19108  0CC6  00B3               	movwf	(___fladd@b+2)^(0+128)
 19109  0CC7  0146               	movlb	6	; select bank6
 19110  0CC8  0825               	movf	(channelThing@totalGrpA+1)^(0+768),w
 19111  0CC9  0141               	movlb	1	; select bank1
 19112  0CCA  00B2               	movwf	(___fladd@b+1)^(0+128)
 19113  0CCB  0146               	movlb	6	; select bank6
 19114  0CCC  0824               	movf	channelThing@totalGrpA^(0+768),w
 19115  0CCD  0141               	movlb	1	; select bank1
 19116  0CCE  00B1               	movwf	___fladd@b^(0+128)
 19117  0CCF  3009               	movlw	9
 19118  0CD0  0144               	movlb	4	; select bank4
 19119  0CD1  00C9               	movwf	??_channelThing^(0+512)
 19120  0CD2  0849               	movf	??_channelThing^(0+512),w
 19121  0CD3  0140               	movlb	0	; select bank0
 19122  0CD4  00AC               	movwf	___bmul@multiplicand
 19123  0CD5  0146               	movlb	6	; select bank6
 19124  0CD6  0836               	movf	channelThing@n^(0+768),w
 19125  0CD7  31BE  26B0  318B   	fcall	___bmul
 19126  0CDA  3E02               	addlw	2
 19127  0CDB  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19128  0CDC  0086               	movwf	6
 19129  0CDD  3002               	movlw	2	; select bank5/6
 19130  0CDE  0087               	movwf	7
 19131  0CDF  3F40               	moviw [0]fsr1
 19132  0CE0  0141               	movlb	1	; select bank1
 19133  0CE1  00B5               	movwf	___fladd@a^(0+128)
 19134  0CE2  3F41               	moviw [1]fsr1
 19135  0CE3  00B6               	movwf	(___fladd@a+1)^(0+128)
 19136  0CE4  3F42               	moviw [2]fsr1
 19137  0CE5  00B7               	movwf	(___fladd@a+2)^(0+128)
 19138  0CE6  3F43               	moviw [3]fsr1
 19139  0CE7  00B8               	movwf	(___fladd@a+3)^(0+128)
 19140  0CE8  319E  2606  318B   	fcall	___fladd
 19141  0CEB  0141               	movlb	1	; select bank1
 19142  0CEC  0834               	movf	(?___fladd+3)^(0+128),w
 19143  0CED  00D0               	movwf	(___flge@ff2+3)^(0+128)
 19144  0CEE  0833               	movf	(?___fladd+2)^(0+128),w
 19145  0CEF  00CF               	movwf	(___flge@ff2+2)^(0+128)
 19146  0CF0  0832               	movf	(?___fladd+1)^(0+128),w
 19147  0CF1  00CE               	movwf	(___flge@ff2+1)^(0+128)
 19148  0CF2  0831               	movf	?___fladd^(0+128),w
 19149  0CF3  00CD               	movwf	___flge@ff2^(0+128)
 19150  0CF4  3198  202D  318B   	fcall	___flge
 19151  0CF7  1C03               	btfss	3,0
 19152  0CF8  2D47               	goto	l11209
 19153                           
 19154                           ;system.c: 372:    totalGrpA += virtChannels[n].current;
 19155  0CF9  3009               	movlw	9
 19156  0CFA  0144               	movlb	4	; select bank4
 19157  0CFB  00C9               	movwf	??_channelThing^(0+512)
 19158  0CFC  0849               	movf	??_channelThing^(0+512),w
 19159  0CFD  0140               	movlb	0	; select bank0
 19160  0CFE  00AC               	movwf	___bmul@multiplicand
 19161  0CFF  0146               	movlb	6	; select bank6
 19162  0D00  0836               	movf	channelThing@n^(0+768),w
 19163  0D01  31BE  26B0  318B   	fcall	___bmul
 19164  0D04  3E02               	addlw	2
 19165  0D05  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19166  0D06  0086               	movwf	6
 19167  0D07  3002               	movlw	2	; select bank5/6
 19168  0D08  0087               	movwf	7
 19169  0D09  3F40               	moviw [0]fsr1
 19170  0D0A  0141               	movlb	1	; select bank1
 19171  0D0B  00B1               	movwf	___fladd@b^(0+128)
 19172  0D0C  3F41               	moviw [1]fsr1
 19173  0D0D  00B2               	movwf	(___fladd@b+1)^(0+128)
 19174  0D0E  3F42               	moviw [2]fsr1
 19175  0D0F  00B3               	movwf	(___fladd@b+2)^(0+128)
 19176  0D10  3F43               	moviw [3]fsr1
 19177  0D11  00B4               	movwf	(___fladd@b+3)^(0+128)
 19178  0D12  0146               	movlb	6	; select bank6
 19179  0D13  0827               	movf	(channelThing@totalGrpA+3)^(0+768),w
 19180  0D14  0141               	movlb	1	; select bank1
 19181  0D15  00B8               	movwf	(___fladd@a+3)^(0+128)
 19182  0D16  0146               	movlb	6	; select bank6
 19183  0D17  0826               	movf	(channelThing@totalGrpA+2)^(0+768),w
 19184  0D18  0141               	movlb	1	; select bank1
 19185  0D19  00B7               	movwf	(___fladd@a+2)^(0+128)
 19186  0D1A  0146               	movlb	6	; select bank6
 19187  0D1B  0825               	movf	(channelThing@totalGrpA+1)^(0+768),w
 19188  0D1C  0141               	movlb	1	; select bank1
 19189  0D1D  00B6               	movwf	(___fladd@a+1)^(0+128)
 19190  0D1E  0146               	movlb	6	; select bank6
 19191  0D1F  0824               	movf	channelThing@totalGrpA^(0+768),w
 19192  0D20  0141               	movlb	1	; select bank1
 19193  0D21  00B5               	movwf	___fladd@a^(0+128)
 19194  0D22  319E  2606  318B   	fcall	___fladd
 19195  0D25  0141               	movlb	1	; select bank1
 19196  0D26  0834               	movf	(?___fladd+3)^(0+128),w
 19197  0D27  0146               	movlb	6	; select bank6
 19198  0D28  00A7               	movwf	(channelThing@totalGrpA+3)^(0+768)
 19199  0D29  0141               	movlb	1	; select bank1
 19200  0D2A  0833               	movf	(?___fladd+2)^(0+128),w
 19201  0D2B  0146               	movlb	6	; select bank6
 19202  0D2C  00A6               	movwf	(channelThing@totalGrpA+2)^(0+768)
 19203  0D2D  0141               	movlb	1	; select bank1
 19204  0D2E  0832               	movf	(?___fladd+1)^(0+128),w
 19205  0D2F  0146               	movlb	6	; select bank6
 19206  0D30  00A5               	movwf	(channelThing@totalGrpA+1)^(0+768)
 19207  0D31  0141               	movlb	1	; select bank1
 19208  0D32  0831               	movf	?___fladd^(0+128),w
 19209  0D33  0146               	movlb	6	; select bank6
 19210  0D34  00A4               	movwf	channelThing@totalGrpA^(0+768)
 19211                           
 19212                           ;system.c: 373:    grpA[numGrpA++] = n;
 19213  0D35  0836               	movf	channelThing@n^(0+768),w
 19214  0D36  0144               	movlb	4	; select bank4
 19215  0D37  00C9               	movwf	??_channelThing^(0+512)
 19216  0D38  0146               	movlb	6	; select bank6
 19217  0D39  0830               	movf	channelThing@numGrpA^(0+768),w
 19218  0D3A  3E2C               	addlw	(low (channelThing@grpA| (0+768)))& (0+255)
 19219  0D3B  0086               	movwf	6
 19220  0D3C  3003               	movlw	3	; select bank6/7
 19221  0D3D  0087               	movwf	7
 19222  0D3E  0144               	movlb	4	; select bank4
 19223  0D3F  0849               	movf	??_channelThing^(0+512),w
 19224  0D40  0081               	movwf	1
 19225  0D41  3001               	movlw	1
 19226  0D42  00C9               	movwf	??_channelThing^(0+512)
 19227  0D43  0849               	movf	??_channelThing^(0+512),w
 19228  0D44  0146               	movlb	6	; select bank6
 19229  0D45  07B0               	addwf	channelThing@numGrpA^(0+768),f
 19230                           
 19231                           ;system.c: 374:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 19232  0D46  2DD7               	goto	l11217
 19233  0D47                     l11209:	
 19234  0D47  3040               	movlw	64
 19235  0D48  0141               	movlb	1	; select bank1
 19236  0D49  00CC               	movwf	(___flge@ff1+3)^(0+128)
 19237  0D4A  3060               	movlw	96
 19238  0D4B  00CB               	movwf	(___flge@ff1+2)^(0+128)
 19239  0D4C  3000               	movlw	0
 19240  0D4D  00CA               	movwf	(___flge@ff1+1)^(0+128)
 19241  0D4E  3000               	movlw	0
 19242  0D4F  00C9               	movwf	___flge@ff1^(0+128)
 19243  0D50  0146               	movlb	6	; select bank6
 19244  0D51  082B               	movf	(channelThing@totalGrpB+3)^(0+768),w
 19245  0D52  0141               	movlb	1	; select bank1
 19246  0D53  00B4               	movwf	(___fladd@b+3)^(0+128)
 19247  0D54  0146               	movlb	6	; select bank6
 19248  0D55  082A               	movf	(channelThing@totalGrpB+2)^(0+768),w
 19249  0D56  0141               	movlb	1	; select bank1
 19250  0D57  00B3               	movwf	(___fladd@b+2)^(0+128)
 19251  0D58  0146               	movlb	6	; select bank6
 19252  0D59  0829               	movf	(channelThing@totalGrpB+1)^(0+768),w
 19253  0D5A  0141               	movlb	1	; select bank1
 19254  0D5B  00B2               	movwf	(___fladd@b+1)^(0+128)
 19255  0D5C  0146               	movlb	6	; select bank6
 19256  0D5D  0828               	movf	channelThing@totalGrpB^(0+768),w
 19257  0D5E  0141               	movlb	1	; select bank1
 19258  0D5F  00B1               	movwf	___fladd@b^(0+128)
 19259  0D60  3009               	movlw	9
 19260  0D61  0144               	movlb	4	; select bank4
 19261  0D62  00C9               	movwf	??_channelThing^(0+512)
 19262  0D63  0849               	movf	??_channelThing^(0+512),w
 19263  0D64  0140               	movlb	0	; select bank0
 19264  0D65  00AC               	movwf	___bmul@multiplicand
 19265  0D66  0146               	movlb	6	; select bank6
 19266  0D67  0836               	movf	channelThing@n^(0+768),w
 19267  0D68  31BE  26B0  318B   	fcall	___bmul
 19268  0D6B  3E02               	addlw	2
 19269  0D6C  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19270  0D6D  0086               	movwf	6
 19271  0D6E  3002               	movlw	2	; select bank5/6
 19272  0D6F  0087               	movwf	7
 19273  0D70  3F40               	moviw [0]fsr1
 19274  0D71  0141               	movlb	1	; select bank1
 19275  0D72  00B5               	movwf	___fladd@a^(0+128)
 19276  0D73  3F41               	moviw [1]fsr1
 19277  0D74  00B6               	movwf	(___fladd@a+1)^(0+128)
 19278  0D75  3F42               	moviw [2]fsr1
 19279  0D76  00B7               	movwf	(___fladd@a+2)^(0+128)
 19280  0D77  3F43               	moviw [3]fsr1
 19281  0D78  00B8               	movwf	(___fladd@a+3)^(0+128)
 19282  0D79  319E  2606  318B   	fcall	___fladd
 19283  0D7C  0141               	movlb	1	; select bank1
 19284  0D7D  0834               	movf	(?___fladd+3)^(0+128),w
 19285  0D7E  00D0               	movwf	(___flge@ff2+3)^(0+128)
 19286  0D7F  0833               	movf	(?___fladd+2)^(0+128),w
 19287  0D80  00CF               	movwf	(___flge@ff2+2)^(0+128)
 19288  0D81  0832               	movf	(?___fladd+1)^(0+128),w
 19289  0D82  00CE               	movwf	(___flge@ff2+1)^(0+128)
 19290  0D83  0831               	movf	?___fladd^(0+128),w
 19291  0D84  00CD               	movwf	___flge@ff2^(0+128)
 19292  0D85  3198  202D  318B   	fcall	___flge
 19293  0D88  1C03               	btfss	3,0
 19294  0D89  2DD7               	goto	l11217
 19295                           
 19296                           ;system.c: 375:    totalGrpB += virtChannels[n].current;
 19297  0D8A  3009               	movlw	9
 19298  0D8B  0144               	movlb	4	; select bank4
 19299  0D8C  00C9               	movwf	??_channelThing^(0+512)
 19300  0D8D  0849               	movf	??_channelThing^(0+512),w
 19301  0D8E  0140               	movlb	0	; select bank0
 19302  0D8F  00AC               	movwf	___bmul@multiplicand
 19303  0D90  0146               	movlb	6	; select bank6
 19304  0D91  0836               	movf	channelThing@n^(0+768),w
 19305  0D92  31BE  26B0  318B   	fcall	___bmul
 19306  0D95  3E02               	addlw	2
 19307  0D96  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19308  0D97  0086               	movwf	6
 19309  0D98  3002               	movlw	2	; select bank5/6
 19310  0D99  0087               	movwf	7
 19311  0D9A  3F40               	moviw [0]fsr1
 19312  0D9B  0141               	movlb	1	; select bank1
 19313  0D9C  00B1               	movwf	___fladd@b^(0+128)
 19314  0D9D  3F41               	moviw [1]fsr1
 19315  0D9E  00B2               	movwf	(___fladd@b+1)^(0+128)
 19316  0D9F  3F42               	moviw [2]fsr1
 19317  0DA0  00B3               	movwf	(___fladd@b+2)^(0+128)
 19318  0DA1  3F43               	moviw [3]fsr1
 19319  0DA2  00B4               	movwf	(___fladd@b+3)^(0+128)
 19320  0DA3  0146               	movlb	6	; select bank6
 19321  0DA4  082B               	movf	(channelThing@totalGrpB+3)^(0+768),w
 19322  0DA5  0141               	movlb	1	; select bank1
 19323  0DA6  00B8               	movwf	(___fladd@a+3)^(0+128)
 19324  0DA7  0146               	movlb	6	; select bank6
 19325  0DA8  082A               	movf	(channelThing@totalGrpB+2)^(0+768),w
 19326  0DA9  0141               	movlb	1	; select bank1
 19327  0DAA  00B7               	movwf	(___fladd@a+2)^(0+128)
 19328  0DAB  0146               	movlb	6	; select bank6
 19329  0DAC  0829               	movf	(channelThing@totalGrpB+1)^(0+768),w
 19330  0DAD  0141               	movlb	1	; select bank1
 19331  0DAE  00B6               	movwf	(___fladd@a+1)^(0+128)
 19332  0DAF  0146               	movlb	6	; select bank6
 19333  0DB0  0828               	movf	channelThing@totalGrpB^(0+768),w
 19334  0DB1  0141               	movlb	1	; select bank1
 19335  0DB2  00B5               	movwf	___fladd@a^(0+128)
 19336  0DB3  319E  2606  318B   	fcall	___fladd
 19337  0DB6  0141               	movlb	1	; select bank1
 19338  0DB7  0834               	movf	(?___fladd+3)^(0+128),w
 19339  0DB8  0146               	movlb	6	; select bank6
 19340  0DB9  00AB               	movwf	(channelThing@totalGrpB+3)^(0+768)
 19341  0DBA  0141               	movlb	1	; select bank1
 19342  0DBB  0833               	movf	(?___fladd+2)^(0+128),w
 19343  0DBC  0146               	movlb	6	; select bank6
 19344  0DBD  00AA               	movwf	(channelThing@totalGrpB+2)^(0+768)
 19345  0DBE  0141               	movlb	1	; select bank1
 19346  0DBF  0832               	movf	(?___fladd+1)^(0+128),w
 19347  0DC0  0146               	movlb	6	; select bank6
 19348  0DC1  00A9               	movwf	(channelThing@totalGrpB+1)^(0+768)
 19349  0DC2  0141               	movlb	1	; select bank1
 19350  0DC3  0831               	movf	?___fladd^(0+128),w
 19351  0DC4  0146               	movlb	6	; select bank6
 19352  0DC5  00A8               	movwf	channelThing@totalGrpB^(0+768)
 19353                           
 19354                           ;system.c: 376:    grpB[numGrpB++] = n;
 19355  0DC6  0836               	movf	channelThing@n^(0+768),w
 19356  0DC7  0144               	movlb	4	; select bank4
 19357  0DC8  00C9               	movwf	??_channelThing^(0+512)
 19358  0DC9  0146               	movlb	6	; select bank6
 19359  0DCA  0831               	movf	channelThing@numGrpB^(0+768),w
 19360  0DCB  3E32               	addlw	(low (channelThing@grpB| (0+768)))& (0+255)
 19361  0DCC  0086               	movwf	6
 19362  0DCD  3003               	movlw	3	; select bank6/7
 19363  0DCE  0087               	movwf	7
 19364  0DCF  0144               	movlb	4	; select bank4
 19365  0DD0  0849               	movf	??_channelThing^(0+512),w
 19366  0DD1  0081               	movwf	1
 19367  0DD2  3001               	movlw	1
 19368  0DD3  00C9               	movwf	??_channelThing^(0+512)
 19369  0DD4  0849               	movf	??_channelThing^(0+512),w
 19370  0DD5  0146               	movlb	6	; select bank6
 19371  0DD6  07B1               	addwf	channelThing@numGrpB^(0+768),f
 19372  0DD7                     l11217:	
 19373                           ;system.c: 377:   }
 19374                           
 19375                           
 19376                           ;system.c: 378:  }
 19377  0DD7  3001               	movlw	1
 19378  0DD8  0144               	movlb	4	; select bank4
 19379  0DD9  00C9               	movwf	??_channelThing^(0+512)
 19380  0DDA  0849               	movf	??_channelThing^(0+512),w
 19381  0DDB  0146               	movlb	6	; select bank6
 19382  0DDC  07B6               	addwf	channelThing@n^(0+768),f
 19383  0DDD  3004               	movlw	4
 19384  0DDE  0236               	subwf	channelThing@n^(0+768),w
 19385  0DDF  1C03               	skipc
 19386  0DE0  2C7A               	goto	l11201
 19387  0DE1                     l11221:	
 19388                           
 19389                           ;system.c: 381:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 19390  0DE1  302C               	movlw	low channelThing@grpA
 19391  0DE2  0141               	movlb	1	; select bank1
 19392  0DE3  00DC               	movwf	qsort@vbase^(0+128)
 19393  0DE4  3003               	movlw	high channelThing@grpA
 19394  0DE5  00DD               	movwf	(qsort@vbase+1)^(0+128)
 19395  0DE6  0146               	movlb	6	; select bank6
 19396  0DE7  0830               	movf	channelThing@numGrpA^(0+768),w
 19397  0DE8  0144               	movlb	4	; select bank4
 19398  0DE9  00C9               	movwf	??_channelThing^(0+512)
 19399  0DEA  01CA               	clrf	(??_channelThing^(0+512)+1)
 19400  0DEB  0849               	movf	??_channelThing^(0+512),w
 19401  0DEC  0141               	movlb	1	; select bank1
 19402  0DED  00DE               	movwf	qsort@nel^(0+128)
 19403  0DEE  0144               	movlb	4	; select bank4
 19404  0DEF  084A               	movf	(??_channelThing+1)^(0+512),w
 19405  0DF0  0141               	movlb	1	; select bank1
 19406  0DF1  00DF               	movwf	(qsort@nel+1)^(0+128)
 19407  0DF2  3001               	movlw	1
 19408  0DF3  00E0               	movwf	qsort@width^(0+128)
 19409  0DF4  3000               	movlw	0
 19410  0DF5  00E1               	movwf	(qsort@width^(0+128)+1)
 19411  0DF6  3036               	movlw	low _sortDC
 19412  0DF7  00E2               	movwf	qsort@compar^(0+128)
 19413  0DF8  3031               	movlw	high _sortDC
 19414  0DF9  00E3               	movwf	(qsort@compar^(0+128)+1)
 19415  0DFA  3185  25AB  318B   	fcall	_qsort
 19416                           
 19417                           ;system.c: 382:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 19418  0DFD  3032               	movlw	low channelThing@grpB
 19419  0DFE  0141               	movlb	1	; select bank1
 19420  0DFF  00DC               	movwf	qsort@vbase^(0+128)
 19421  0E00  3003               	movlw	high channelThing@grpB
 19422  0E01  00DD               	movwf	(qsort@vbase+1)^(0+128)
 19423  0E02  0146               	movlb	6	; select bank6
 19424  0E03  0831               	movf	channelThing@numGrpB^(0+768),w
 19425  0E04  0144               	movlb	4	; select bank4
 19426  0E05  00C9               	movwf	??_channelThing^(0+512)
 19427  0E06  01CA               	clrf	(??_channelThing^(0+512)+1)
 19428  0E07  0849               	movf	??_channelThing^(0+512),w
 19429  0E08  0141               	movlb	1	; select bank1
 19430  0E09  00DE               	movwf	qsort@nel^(0+128)
 19431  0E0A  0144               	movlb	4	; select bank4
 19432  0E0B  084A               	movf	(??_channelThing+1)^(0+512),w
 19433  0E0C  0141               	movlb	1	; select bank1
 19434  0E0D  00DF               	movwf	(qsort@nel+1)^(0+128)
 19435  0E0E  3001               	movlw	1
 19436  0E0F  00E0               	movwf	qsort@width^(0+128)
 19437  0E10  3000               	movlw	0
 19438  0E11  00E1               	movwf	(qsort@width^(0+128)+1)
 19439  0E12  30F6               	movlw	low _sortDCRev
 19440  0E13  00E2               	movwf	qsort@compar^(0+128)
 19441  0E14  3030               	movlw	high _sortDCRev
 19442  0E15  00E3               	movwf	(qsort@compar^(0+128)+1)
 19443  0E16  3185  25AB  318B   	fcall	_qsort
 19444                           
 19445                           ;system.c: 385:  for(n = 0; n < numGrpA; n++) {
 19446  0E19  0146               	movlb	6	; select bank6
 19447  0E1A  01B6               	clrf	channelThing@n^(0+768)
 19448  0E1B                     l11233:	
 19449  0E1B  0830               	movf	channelThing@numGrpA^(0+768),w
 19450  0E1C  0236               	subwf	channelThing@n^(0+768),w
 19451  0E1D  1803               	btfsc	3,0
 19452  0E1E  2EDD               	goto	l11235
 19453                           
 19454                           ;system.c: 386:   if (grpB[n] > -1) {
 19455  0E1F  0836               	movf	channelThing@n^(0+768),w
 19456  0E20  3E32               	addlw	(low (channelThing@grpB| (0+768)))& (0+255)
 19457  0E21  0086               	movwf	6
 19458  0E22  3003               	movlw	3	; select bank6/7
 19459  0E23  0087               	movwf	7
 19460  0E24  1B81               	btfsc	1,7
 19461  0E25  2E92               	goto	l821
 19462                           
 19463                           ;system.c: 387:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 19464  0E26  3009               	movlw	9
 19465  0E27  0144               	movlb	4	; select bank4
 19466  0E28  00C9               	movwf	??_channelThing^(0+512)
 19467  0E29  0849               	movf	??_channelThing^(0+512),w
 19468  0E2A  0140               	movlb	0	; select bank0
 19469  0E2B  00AC               	movwf	___bmul@multiplicand
 19470  0E2C  0146               	movlb	6	; select bank6
 19471  0E2D  0836               	movf	channelThing@n^(0+768),w
 19472  0E2E  3E32               	addlw	(low (channelThing@grpB| (0+768)))& (0+255)
 19473  0E2F  0086               	movwf	6
 19474  0E30  3003               	movlw	3	; select bank6/7
 19475  0E31  0087               	movwf	7
 19476  0E32  0801               	movf	1,w
 19477  0E33  31BE  26B0  318B   	fcall	___bmul
 19478  0E36  3E06               	addlw	6
 19479  0E37  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19480  0E38  0086               	movwf	6
 19481  0E39  3002               	movlw	2	; select bank5/6
 19482  0E3A  0087               	movwf	7
 19483  0E3B  3009               	movlw	9
 19484  0E3C  0144               	movlb	4	; select bank4
 19485  0E3D  00CA               	movwf	(??_channelThing+1)^(0+512)
 19486  0E3E  084A               	movf	(??_channelThing+1)^(0+512),w
 19487  0E3F  0140               	movlb	0	; select bank0
 19488  0E40  00AC               	movwf	___bmul@multiplicand
 19489  0E41  0146               	movlb	6	; select bank6
 19490  0E42  0836               	movf	channelThing@n^(0+768),w
 19491  0E43  3E2C               	addlw	(low (channelThing@grpA| (0+768)))& (0+255)
 19492  0E44  0084               	movwf	4
 19493  0E45  3003               	movlw	3	; select bank6/7
 19494  0E46  0085               	movwf	5
 19495  0E47  0800               	movf	0,w
 19496  0E48  31BE  26B0  318B   	fcall	___bmul
 19497  0E4B  3E06               	addlw	6
 19498  0E4C  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19499  0E4D  0084               	movwf	4
 19500  0E4E  3002               	movlw	2	; select bank5/6
 19501  0E4F  0085               	movwf	5
 19502  0E50  0800               	movf	0,w
 19503  0E51  0701               	addwf	1,w
 19504  0E52  0144               	movlb	4	; select bank4
 19505  0E53  00CB               	movwf	(??_channelThing+2)^(0+512)
 19506  0E54  01CC               	clrf	((??_channelThing+2)^(0+512)+1)
 19507  0E55  0DCC               	rlf	(??_channelThing+3)^(0+512),f
 19508  0E56  084C               	movf	(??_channelThing+3)^(0+512),w
 19509  0E57  3A80               	xorlw	128
 19510  0E58  00CD               	movwf	(??_channelThing+4)^(0+512)
 19511  0E59  3080               	movlw	128
 19512  0E5A  024D               	subwf	(??_channelThing+4)^(0+512),w
 19513  0E5B  1D03               	skipz
 19514  0E5C  2E5F               	goto	u14605
 19515  0E5D  3065               	movlw	101
 19516  0E5E  024B               	subwf	(??_channelThing+2)^(0+512),w
 19517  0E5F                     u14605:	
 19518  0E5F  1C03               	skipc
 19519  0E60  2E92               	goto	l821
 19520                           
 19521                           ;system.c: 388:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 19522  0E61  3009               	movlw	9
 19523  0E62  0144               	movlb	4	; select bank4
 19524  0E63  00C9               	movwf	??_channelThing^(0+512)
 19525  0E64  0849               	movf	??_channelThing^(0+512),w
 19526  0E65  0140               	movlb	0	; select bank0
 19527  0E66  00AC               	movwf	___bmul@multiplicand
 19528  0E67  0146               	movlb	6	; select bank6
 19529  0E68  0836               	movf	channelThing@n^(0+768),w
 19530  0E69  3E2C               	addlw	(low (channelThing@grpA| (0+768)))& (0+255)
 19531  0E6A  0086               	movwf	6
 19532  0E6B  3003               	movlw	3	; select bank6/7
 19533  0E6C  0087               	movwf	7
 19534  0E6D  0801               	movf	1,w
 19535  0E6E  31BE  26B0  318B   	fcall	___bmul
 19536  0E71  3E06               	addlw	6
 19537  0E72  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19538  0E73  0086               	movwf	6
 19539  0E74  3002               	movlw	2	; select bank5/6
 19540  0E75  0087               	movwf	7
 19541  0E76  0301               	decf	1,w
 19542  0E77  3AFF               	xorlw	255
 19543  0E78  3E64               	addlw	100
 19544  0E79  0144               	movlb	4	; select bank4
 19545  0E7A  00CA               	movwf	(??_channelThing+1)^(0+512)
 19546  0E7B  3009               	movlw	9
 19547  0E7C  00CB               	movwf	(??_channelThing+2)^(0+512)
 19548  0E7D  084B               	movf	(??_channelThing+2)^(0+512),w
 19549  0E7E  0140               	movlb	0	; select bank0
 19550  0E7F  00AC               	movwf	___bmul@multiplicand
 19551  0E80  0146               	movlb	6	; select bank6
 19552  0E81  0836               	movf	channelThing@n^(0+768),w
 19553  0E82  3E32               	addlw	(low (channelThing@grpB| (0+768)))& (0+255)
 19554  0E83  0086               	movwf	6
 19555  0E84  3003               	movlw	3	; select bank6/7
 19556  0E85  0087               	movwf	7
 19557  0E86  0801               	movf	1,w
 19558  0E87  31BE  26B0  318B   	fcall	___bmul
 19559  0E8A  3E06               	addlw	6
 19560  0E8B  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19561  0E8C  0086               	movwf	6
 19562  0E8D  3002               	movlw	2	; select bank5/6
 19563  0E8E  0087               	movwf	7
 19564  0E8F  0144               	movlb	4	; select bank4
 19565  0E90  084A               	movf	(??_channelThing+1)^(0+512),w
 19566  0E91  0081               	movwf	1
 19567  0E92                     l821:	
 19568                           ;system.c: 389:   }
 19569                           
 19570                           
 19571                           ;system.c: 392:   virtChannels[grpA[n]].start = 0;
 19572  0E92  3009               	movlw	9
 19573  0E93  0144               	movlb	4	; select bank4
 19574  0E94  00C9               	movwf	??_channelThing^(0+512)
 19575  0E95  0849               	movf	??_channelThing^(0+512),w
 19576  0E96  0140               	movlb	0	; select bank0
 19577  0E97  00AC               	movwf	___bmul@multiplicand
 19578  0E98  0146               	movlb	6	; select bank6
 19579  0E99  0836               	movf	channelThing@n^(0+768),w
 19580  0E9A  3E2C               	addlw	(low (channelThing@grpA| (0+768)))& (0+255)
 19581  0E9B  0086               	movwf	6
 19582  0E9C  3003               	movlw	3	; select bank6/7
 19583  0E9D  0087               	movwf	7
 19584  0E9E  0801               	movf	1,w
 19585  0E9F  31BE  26B0  318B   	fcall	___bmul
 19586  0EA2  3E07               	addlw	7
 19587  0EA3  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19588  0EA4  0086               	movwf	6
 19589  0EA5  3002               	movlw	2	; select bank5/6
 19590  0EA6  0087               	movwf	7
 19591  0EA7  0181               	clrf	1
 19592                           
 19593                           ;system.c: 393:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 19594  0EA8  3009               	movlw	9
 19595  0EA9  0144               	movlb	4	; select bank4
 19596  0EAA  00C9               	movwf	??_channelThing^(0+512)
 19597  0EAB  0849               	movf	??_channelThing^(0+512),w
 19598  0EAC  0140               	movlb	0	; select bank0
 19599  0EAD  00AC               	movwf	___bmul@multiplicand
 19600  0EAE  0146               	movlb	6	; select bank6
 19601  0EAF  0836               	movf	channelThing@n^(0+768),w
 19602  0EB0  3E2C               	addlw	(low (channelThing@grpA| (0+768)))& (0+255)
 19603  0EB1  0086               	movwf	6
 19604  0EB2  3003               	movlw	3	; select bank6/7
 19605  0EB3  0087               	movwf	7
 19606  0EB4  0801               	movf	1,w
 19607  0EB5  31BE  26B0  318B   	fcall	___bmul
 19608  0EB8  3E06               	addlw	6
 19609  0EB9  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19610  0EBA  0086               	movwf	6
 19611  0EBB  3002               	movlw	2	; select bank5/6
 19612  0EBC  0087               	movwf	7
 19613  0EBD  0801               	movf	1,w
 19614  0EBE  0144               	movlb	4	; select bank4
 19615  0EBF  00CA               	movwf	(??_channelThing+1)^(0+512)
 19616  0EC0  3009               	movlw	9
 19617  0EC1  00CB               	movwf	(??_channelThing+2)^(0+512)
 19618  0EC2  084B               	movf	(??_channelThing+2)^(0+512),w
 19619  0EC3  0140               	movlb	0	; select bank0
 19620  0EC4  00AC               	movwf	___bmul@multiplicand
 19621  0EC5  0146               	movlb	6	; select bank6
 19622  0EC6  0836               	movf	channelThing@n^(0+768),w
 19623  0EC7  3E2C               	addlw	(low (channelThing@grpA| (0+768)))& (0+255)
 19624  0EC8  0086               	movwf	6
 19625  0EC9  3003               	movlw	3	; select bank6/7
 19626  0ECA  0087               	movwf	7
 19627  0ECB  0801               	movf	1,w
 19628  0ECC  31BE  26B0  318B   	fcall	___bmul
 19629  0ECF  3E08               	addlw	8
 19630  0ED0  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19631  0ED1  0086               	movwf	6
 19632  0ED2  3002               	movlw	2	; select bank5/6
 19633  0ED3  0087               	movwf	7
 19634  0ED4  0144               	movlb	4	; select bank4
 19635  0ED5  084A               	movf	(??_channelThing+1)^(0+512),w
 19636  0ED6  0081               	movwf	1
 19637                           
 19638                           ;system.c: 394:  }
 19639  0ED7  3001               	movlw	1
 19640  0ED8  00C9               	movwf	??_channelThing^(0+512)
 19641  0ED9  0849               	movf	??_channelThing^(0+512),w
 19642  0EDA  0146               	movlb	6	; select bank6
 19643  0EDB  07B6               	addwf	channelThing@n^(0+768),f
 19644  0EDC  2E1B               	goto	l11233
 19645  0EDD                     l11235:	
 19646                           
 19647                           ;system.c: 396:  for(n = 0; n < numGrpB; n++) {
 19648  0EDD  01B6               	clrf	channelThing@n^(0+768)
 19649  0EDE                     l11241:	
 19650  0EDE  0831               	movf	channelThing@numGrpB^(0+768),w
 19651  0EDF  0236               	subwf	channelThing@n^(0+768),w
 19652  0EE0  1803               	btfsc	3,0
 19653  0EE1  2F32               	goto	l11243
 19654                           
 19655                           ;system.c: 397:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 19656  0EE2  3009               	movlw	9
 19657  0EE3  0144               	movlb	4	; select bank4
 19658  0EE4  00C9               	movwf	??_channelThing^(0+512)
 19659  0EE5  0849               	movf	??_channelThing^(0+512),w
 19660  0EE6  0140               	movlb	0	; select bank0
 19661  0EE7  00AC               	movwf	___bmul@multiplicand
 19662  0EE8  0146               	movlb	6	; select bank6
 19663  0EE9  0836               	movf	channelThing@n^(0+768),w
 19664  0EEA  3E32               	addlw	(low (channelThing@grpB| (0+768)))& (0+255)
 19665  0EEB  0086               	movwf	6
 19666  0EEC  3003               	movlw	3	; select bank6/7
 19667  0EED  0087               	movwf	7
 19668  0EEE  0801               	movf	1,w
 19669  0EEF  31BE  26B0  318B   	fcall	___bmul
 19670  0EF2  3E06               	addlw	6
 19671  0EF3  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19672  0EF4  0086               	movwf	6
 19673  0EF5  3002               	movlw	2	; select bank5/6
 19674  0EF6  0087               	movwf	7
 19675  0EF7  0301               	decf	1,w
 19676  0EF8  3AFF               	xorlw	255
 19677  0EF9  3E64               	addlw	100
 19678  0EFA  0144               	movlb	4	; select bank4
 19679  0EFB  00CA               	movwf	(??_channelThing+1)^(0+512)
 19680  0EFC  3009               	movlw	9
 19681  0EFD  00CB               	movwf	(??_channelThing+2)^(0+512)
 19682  0EFE  084B               	movf	(??_channelThing+2)^(0+512),w
 19683  0EFF  0140               	movlb	0	; select bank0
 19684  0F00  00AC               	movwf	___bmul@multiplicand
 19685  0F01  0146               	movlb	6	; select bank6
 19686  0F02  0836               	movf	channelThing@n^(0+768),w
 19687  0F03  3E32               	addlw	(low (channelThing@grpB| (0+768)))& (0+255)
 19688  0F04  0086               	movwf	6
 19689  0F05  3003               	movlw	3	; select bank6/7
 19690  0F06  0087               	movwf	7
 19691  0F07  0801               	movf	1,w
 19692  0F08  31BE  26B0  318B   	fcall	___bmul
 19693  0F0B  3E07               	addlw	7
 19694  0F0C  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19695  0F0D  0086               	movwf	6
 19696  0F0E  3002               	movlw	2	; select bank5/6
 19697  0F0F  0087               	movwf	7
 19698  0F10  0144               	movlb	4	; select bank4
 19699  0F11  084A               	movf	(??_channelThing+1)^(0+512),w
 19700  0F12  0081               	movwf	1
 19701                           
 19702                           ;system.c: 398:   virtChannels[grpB[n]].stop = 100;
 19703  0F13  3064               	movlw	100
 19704  0F14  00C9               	movwf	??_channelThing^(0+512)
 19705  0F15  3009               	movlw	9
 19706  0F16  00CA               	movwf	(??_channelThing+1)^(0+512)
 19707  0F17  084A               	movf	(??_channelThing+1)^(0+512),w
 19708  0F18  0140               	movlb	0	; select bank0
 19709  0F19  00AC               	movwf	___bmul@multiplicand
 19710  0F1A  0146               	movlb	6	; select bank6
 19711  0F1B  0836               	movf	channelThing@n^(0+768),w
 19712  0F1C  3E32               	addlw	(low (channelThing@grpB| (0+768)))& (0+255)
 19713  0F1D  0086               	movwf	6
 19714  0F1E  3003               	movlw	3	; select bank6/7
 19715  0F1F  0087               	movwf	7
 19716  0F20  0801               	movf	1,w
 19717  0F21  31BE  26B0  318B   	fcall	___bmul
 19718  0F24  3E08               	addlw	8
 19719  0F25  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19720  0F26  0086               	movwf	6
 19721  0F27  3002               	movlw	2	; select bank5/6
 19722  0F28  0087               	movwf	7
 19723  0F29  0144               	movlb	4	; select bank4
 19724  0F2A  0849               	movf	??_channelThing^(0+512),w
 19725  0F2B  0081               	movwf	1
 19726                           
 19727                           ;system.c: 399:  }
 19728  0F2C  3001               	movlw	1
 19729  0F2D  00C9               	movwf	??_channelThing^(0+512)
 19730  0F2E  0849               	movf	??_channelThing^(0+512),w
 19731  0F2F  0146               	movlb	6	; select bank6
 19732  0F30  07B6               	addwf	channelThing@n^(0+768),f
 19733  0F31  2EDE               	goto	l11241
 19734  0F32                     l11243:	
 19735                           
 19736                           ;system.c: 402:  for(n = 0; n < 4; n++) {
 19737  0F32  01B6               	clrf	channelThing@n^(0+768)
 19738  0F33                     L21:	
 19739  0F33  3004               	movlw	4
 19740  0F34  0236               	subwf	channelThing@n^(0+768),w
 19741  0F35  1803               	btfsc	3,0
 19742  0F36  0008               	return
 19743                           
 19744                           ;system.c: 403:   data.heater[virtChannels[n].phyChanNum].Patt =
 19745  0F37  3009               	movlw	9
 19746  0F38  0144               	movlb	4	; select bank4
 19747  0F39  00C9               	movwf	??_channelThing^(0+512)
 19748  0F3A  0849               	movf	??_channelThing^(0+512),w
 19749  0F3B  0140               	movlb	0	; select bank0
 19750  0F3C  00AC               	movwf	___bmul@multiplicand
 19751  0F3D  0146               	movlb	6	; select bank6
 19752  0F3E  0836               	movf	channelThing@n^(0+768),w
 19753  0F3F  31BE  26B0  318B   	fcall	___bmul
 19754  0F42  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19755  0F43  0086               	movwf	6
 19756  0F44  3002               	movlw	2	; select bank5/6
 19757  0F45  0087               	movwf	7
 19758  0F46  3F40               	moviw [0]fsr1
 19759  0F47  0140               	movlb	0	; select bank0
 19760  0F48  00B5               	movwf	___wmul@multiplier
 19761  0F49  3F41               	moviw [1]fsr1
 19762  0F4A  00B6               	movwf	___wmul@multiplier+1
 19763  0F4B  301F               	movlw	31
 19764  0F4C  00B7               	movwf	___wmul@multiplicand
 19765  0F4D  3000               	movlw	0
 19766  0F4E  00B8               	movwf	___wmul@multiplicand+1
 19767  0F4F  31BF  270A  318B   	fcall	___wmul
 19768  0F52  3074               	movlw	116
 19769  0F53  0144               	movlb	4	; select bank4
 19770  0F54  00CA               	movwf	(??_channelThing+1)^(0+512)
 19771  0F55  3027               	movlw	39
 19772  0F56  00CB               	movwf	((??_channelThing+1)^(0+512)+1)
 19773  0F57  0140               	movlb	0	; select bank0
 19774  0F58  0835               	movf	?___wmul,w
 19775  0F59  0144               	movlb	4	; select bank4
 19776  0F5A  074A               	addwf	(??_channelThing+1)^(0+512),w
 19777  0F5B  00CC               	movwf	(??_channelThing+3)^(0+512)
 19778  0F5C  0140               	movlb	0	; select bank0
 19779  0F5D  0836               	movf	?___wmul+1,w
 19780  0F5E  0144               	movlb	4	; select bank4
 19781  0F5F  3D4B               	addwfc	(??_channelThing+2)^(0+512),w
 19782  0F60  00CD               	movwf	(??_channelThing+4)^(0+512)
 19783  0F61  084C               	movf	(??_channelThing+3)^(0+512),w
 19784  0F62  0086               	movwf	6
 19785  0F63  084D               	movf	(??_channelThing+4)^(0+512),w
 19786  0F64  0087               	movwf	7
 19787  0F65  314C               	addfsr 1,12
 19788  0F66  3042               	movlw	66
 19789  0F67  0141               	movlb	1	; select bank1
 19790  0F68  00B0               	movwf	(___fldiv@a+3)^(0+128)
 19791  0F69  30C8               	movlw	200
 19792  0F6A  00AF               	movwf	(___fldiv@a+2)^(0+128)
 19793  0F6B  3000               	movlw	0
 19794  0F6C  00AE               	movwf	(___fldiv@a+1)^(0+128)
 19795  0F6D  3000               	movlw	0
 19796  0F6E  00AD               	movwf	___fldiv@a^(0+128)
 19797  0F6F  301F               	movlw	31
 19798  0F70  0140               	movlb	0	; select bank0
 19799  0F71  00B7               	movwf	___wmul@multiplicand
 19800  0F72  3000               	movlw	0
 19801  0F73  00B8               	movwf	___wmul@multiplicand+1
 19802  0F74  3009               	movlw	9
 19803  0F75  0144               	movlb	4	; select bank4
 19804  0F76  00CE               	movwf	(??_channelThing+5)^(0+512)
 19805  0F77  084E               	movf	(??_channelThing+5)^(0+512),w
 19806  0F78  0140               	movlb	0	; select bank0
 19807  0F79  00AC               	movwf	___bmul@multiplicand
 19808  0F7A  0146               	movlb	6	; select bank6
 19809  0F7B  0836               	movf	channelThing@n^(0+768),w
 19810  0F7C  31BE  26B0  318B   	fcall	___bmul
 19811  0F7F  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19812  0F80  0084               	movwf	4
 19813  0F81  3002               	movlw	2	; select bank5/6
 19814  0F82  0085               	movwf	5
 19815  0F83  3F00               	moviw [0]fsr0
 19816  0F84  0140               	movlb	0	; select bank0
 19817  0F85  00B5               	movwf	___wmul@multiplier
 19818  0F86  3F01               	moviw [1]fsr0
 19819  0F87  00B6               	movwf	___wmul@multiplier+1
 19820  0F88  31BF  270A  318B   	fcall	___wmul
 19821  0F8B  3074               	movlw	116
 19822  0F8C  0144               	movlb	4	; select bank4
 19823  0F8D  00CF               	movwf	(??_channelThing+6)^(0+512)
 19824  0F8E  3027               	movlw	39
 19825  0F8F  00D0               	movwf	((??_channelThing+6)^(0+512)+1)
 19826  0F90  0140               	movlb	0	; select bank0
 19827  0F91  0835               	movf	?___wmul,w
 19828  0F92  0144               	movlb	4	; select bank4
 19829  0F93  074F               	addwf	(??_channelThing+6)^(0+512),w
 19830  0F94  00D1               	movwf	(??_channelThing+8)^(0+512)
 19831  0F95  0140               	movlb	0	; select bank0
 19832  0F96  0836               	movf	?___wmul+1,w
 19833  0F97  0144               	movlb	4	; select bank4
 19834  0F98  3D50               	addwfc	(??_channelThing+7)^(0+512),w
 19835  0F99  00D2               	movwf	(??_channelThing+9)^(0+512)
 19836  0F9A  0851               	movf	(??_channelThing+8)^(0+512),w
 19837  0F9B  0084               	movwf	4
 19838  0F9C  0852               	movf	(??_channelThing+9)^(0+512),w
 19839  0F9D  0085               	movwf	5
 19840  0F9E  3104               	addfsr 0,4
 19841  0F9F  3F00               	moviw [0]fsr0
 19842  0FA0  0140               	movlb	0	; select bank0
 19843  0FA1  00C9               	movwf	___flmul@b
 19844  0FA2  3F01               	moviw [1]fsr0
 19845  0FA3  00CA               	movwf	___flmul@b+1
 19846  0FA4  3F02               	moviw [2]fsr0
 19847  0FA5  00CB               	movwf	___flmul@b+2
 19848  0FA6  3F03               	moviw [3]fsr0
 19849  0FA7  00CC               	movwf	___flmul@b+3
 19850  0FA8  3009               	movlw	9
 19851  0FA9  0144               	movlb	4	; select bank4
 19852  0FAA  00D3               	movwf	(??_channelThing+10)^(0+512)
 19853  0FAB  0853               	movf	(??_channelThing+10)^(0+512),w
 19854  0FAC  0140               	movlb	0	; select bank0
 19855  0FAD  00AC               	movwf	___bmul@multiplicand
 19856  0FAE  0146               	movlb	6	; select bank6
 19857  0FAF  0836               	movf	channelThing@n^(0+768),w
 19858  0FB0  31BE  26B0  318B   	fcall	___bmul
 19859  0FB3  3E06               	addlw	6
 19860  0FB4  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19861  0FB5  0084               	movwf	4
 19862  0FB6  3002               	movlw	2	; select bank5/6
 19863  0FB7  0085               	movwf	5
 19864  0FB8  0800               	movf	0,w
 19865  0FB9  0144               	movlb	4	; select bank4
 19866  0FBA  00D4               	movwf	(??_channelThing+11)^(0+512)
 19867  0FBB  01D5               	clrf	((??_channelThing+11)^(0+512)+1)
 19868  0FBC  01D6               	clrf	((??_channelThing+11)^(0+512)+2)
 19869  0FBD  01D7               	clrf	((??_channelThing+11)^(0+512)+3)
 19870  0FBE  0857               	movf	(??_channelThing+14)^(0+512),w
 19871  0FBF  0140               	movlb	0	; select bank0
 19872  0FC0  00BE               	movwf	___xxtofl@val+3
 19873  0FC1  0144               	movlb	4	; select bank4
 19874  0FC2  0856               	movf	(??_channelThing+13)^(0+512),w
 19875  0FC3  0140               	movlb	0	; select bank0
 19876  0FC4  00BD               	movwf	___xxtofl@val+2
 19877  0FC5  0144               	movlb	4	; select bank4
 19878  0FC6  0855               	movf	(??_channelThing+12)^(0+512),w
 19879  0FC7  0140               	movlb	0	; select bank0
 19880  0FC8  00BC               	movwf	___xxtofl@val+1
 19881  0FC9  0144               	movlb	4	; select bank4
 19882  0FCA  0854               	movf	(??_channelThing+11)^(0+512),w
 19883  0FCB  0140               	movlb	0	; select bank0
 19884  0FCC  00BB               	movwf	___xxtofl@val
 19885  0FCD  3001               	movlw	1
 19886  0FCE  31AA  22D4  318B   	fcall	___xxtofl
 19887  0FD1  0140               	movlb	0	; select bank0
 19888  0FD2  083E               	movf	?___xxtofl+3,w
 19889  0FD3  00D0               	movwf	___flmul@a+3
 19890  0FD4  083D               	movf	?___xxtofl+2,w
 19891  0FD5  00CF               	movwf	___flmul@a+2
 19892  0FD6  083C               	movf	?___xxtofl+1,w
 19893  0FD7  00CE               	movwf	___flmul@a+1
 19894  0FD8  083B               	movf	?___xxtofl,w
 19895  0FD9  00CD               	movwf	___flmul@a
 19896  0FDA  3188  20BA  318B   	fcall	___flmul
 19897  0FDD  0140               	movlb	0	; select bank0
 19898  0FDE  084C               	movf	?___flmul+3,w
 19899  0FDF  0141               	movlb	1	; select bank1
 19900  0FE0  00B4               	movwf	(___fldiv@b+3)^(0+128)
 19901  0FE1  0140               	movlb	0	; select bank0
 19902  0FE2  084B               	movf	?___flmul+2,w
 19903  0FE3  0141               	movlb	1	; select bank1
 19904  0FE4  00B3               	movwf	(___fldiv@b+2)^(0+128)
 19905  0FE5  0140               	movlb	0	; select bank0
 19906  0FE6  084A               	movf	?___flmul+1,w
 19907  0FE7  0141               	movlb	1	; select bank1
 19908  0FE8  00B2               	movwf	(___fldiv@b+1)^(0+128)
 19909  0FE9  0140               	movlb	0	; select bank0
 19910  0FEA  0849               	movf	?___flmul,w
 19911  0FEB  0141               	movlb	1	; select bank1
 19912  0FEC  00B1               	movwf	___fldiv@b^(0+128)
 19913  0FED  31A6  266D  318B   	fcall	___fldiv
 19914  0FF0  0141               	movlb	1	; select bank1
 19915  0FF1  082D               	movf	?___fldiv^(0+128),w
 19916  0FF2  3FC0               	movwi [0]fsr1
 19917  0FF3  082E               	movf	(?___fldiv+1)^(0+128),w
 19918  0FF4  3FC1               	movwi [1]fsr1
 19919  0FF5  082F               	movf	(?___fldiv+2)^(0+128),w
 19920  0FF6  3FC2               	movwi [2]fsr1
 19921  0FF7  0830               	movf	(?___fldiv+3)^(0+128),w
 19922  0FF8  3FC3               	movwi [3]fsr1
 19923                           
 19924                           ;system.c: 405:  }
 19925  0FF9  3001               	movlw	1
 19926  0FFA  0144               	movlb	4	; select bank4
 19927  0FFB  00C9               	movwf	??_channelThing^(0+512)
 19928  0FFC  0849               	movf	??_channelThing^(0+512),w
 19929  0FFD  0146               	movlb	6	; select bank6
 19930  0FFE  07B6               	addwf	channelThing@n^(0+768),f
 19931  0FFF  2F33               	goto	L21
 19932  1000                     __end_of_channelThing:	
 19933                           
 19934                           	psect	text46
 19935  05AB                     __ptext46:	
 19936 ;; *************** function _qsort *****************
 19937 ;; Defined at:
 19938 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\qsort.c"
 19939 ;; Parameters:    Size  Location     Type
 19940 ;;  vbase           2   60[BANK1 ] PTR void 
 19941 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19942 ;;  nel             2   62[BANK1 ] unsigned int 
 19943 ;;  width           2   64[BANK1 ] unsigned int 
 19944 ;;  compar          2   66[BANK1 ] PTR FTN(PTR const void ,
 19945 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 19946 ;; Auto vars:     Size  Location     Type
 19947 ;;  stack          64    0[BANK3 ] struct .[16]
 19948 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 19949 ;;  j               2   71[BANK2 ] int 
 19950 ;;  i               2   69[BANK2 ] int 
 19951 ;;  s               2   67[BANK2 ] int 
 19952 ;;  r               2   65[BANK2 ] int 
 19953 ;;  l               2   63[BANK2 ] int 
 19954 ;;  base            2   61[BANK2 ] PTR unsigned char 
 19955 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19956 ;;  x               1   60[BANK2 ] PTR unsigned char 
 19957 ;;		 -> qsort@xbuf(60), 
 19958 ;; Return value:  Size  Location     Type
 19959 ;;                  1    wreg      void 
 19960 ;; Registers used:
 19961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19962 ;; Tracked objects:
 19963 ;;		On entry : 0/0
 19964 ;;		On exit  : 0/0
 19965 ;;		Unchanged: 0/0
 19966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19967 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19968 ;;      Locals:         0       0       0      73      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19969 ;;      Temps:          0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19970 ;;      Totals:         0       0      17      73      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19971 ;;Total ram usage:      154 bytes
 19972 ;; Hardware stack levels used:    1
 19973 ;; Hardware stack levels required when called:    5
 19974 ;; This function calls:
 19975 ;;		___awdiv
 19976 ;;		___wmul
 19977 ;;		_memcpy
 19978 ;;		_sortCur
 19979 ;;		_sortDC
 19980 ;;		_sortDCRev
 19981 ;;		_swap
 19982 ;; This function is called by:
 19983 ;;		_channelThing
 19984 ;; This function uses a non-reentrant model
 19985 ;;
 19986                           
 19987                           
 19988                           ;psect for function _qsort
 19989  05AB                     _qsort:	
 19990                           
 19991                           ;incstack = 0
 19992                           ; Regs used in _qsort: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19993  05AB  0141               	movlb	1	; select bank1
 19994  05AC  085D               	movf	(qsort@vbase+1)^(0+128),w
 19995  05AD  0142               	movlb	2	; select bank2
 19996  05AE  00DE               	movwf	(qsort@base+1)^(0+256)
 19997  05AF  0141               	movlb	1	; select bank1
 19998  05B0  085C               	movf	qsort@vbase^(0+128),w
 19999  05B1  0142               	movlb	2	; select bank2
 20000  05B2  00DD               	movwf	qsort@base^(0+256)
 20001  05B3  3000               	movlw	0
 20002  05B4  0141               	movlb	1	; select bank1
 20003  05B5  0261               	subwf	(qsort@width+1)^(0+128),w
 20004  05B6  303C               	movlw	60
 20005  05B7  1903               	skipnz
 20006  05B8  0260               	subwf	qsort@width^(0+128),w
 20007  05B9  1803               	skipnc
 20008  05BA  0008               	return
 20009  05BB  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 20010  05BC  00E4               	movwf	??_qsort^(0+128)
 20011  05BD  0864               	movf	??_qsort^(0+128),w
 20012  05BE  0142               	movlb	2	; select bank2
 20013  05BF  00DC               	movwf	qsort@x^(0+256)
 20014  05C0  0141               	movlb	1	; select bank1
 20015  05C1  0860               	movf	qsort@width^(0+128),w
 20016  05C2  0142               	movlb	2	; select bank2
 20017  05C3  075C               	addwf	qsort@x^(0+256),w
 20018  05C4  0141               	movlb	1	; select bank1
 20019  05C5  00E4               	movwf	??_qsort^(0+128)
 20020  05C6  0864               	movf	??_qsort^(0+128),w
 20021  05C7  0086               	movwf	6
 20022  05C8  3001               	movlw	1	; select bank2/3
 20023  05C9  0087               	movwf	7
 20024  05CA  0181               	clrf	1
 20025  05CB  0142               	movlb	2	; select bank2
 20026  05CC  01E3               	clrf	qsort@s^(0+256)
 20027  05CD  01E4               	clrf	(qsort@s+1)^(0+256)
 20028  05CE  0143               	movlb	3	; select bank3
 20029  05CF  01A0               	clrf	qsort@stack^(0+384)
 20030  05D0  01A1               	clrf	(qsort@stack+1)^(0+384)
 20031  05D1  0141               	movlb	1	; select bank1
 20032  05D2  085E               	movf	qsort@nel^(0+128),w
 20033  05D3  3EFF               	addlw	255
 20034  05D4  0143               	movlb	3	; select bank3
 20035  05D5  00A2               	movwf	(qsort@stack^(0+384)+2)
 20036  05D6  30FF               	movlw	255
 20037  05D7  0141               	movlb	1	; select bank1
 20038  05D8  3D5F               	addwfc	(qsort@nel+1)^(0+128),w
 20039  05D9  0143               	movlb	3	; select bank3
 20040  05DA  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 20041  05DB                     l10789:	
 20042  05DB  0142               	movlb	2	; select bank2
 20043  05DC  0863               	movf	qsort@s^(0+256),w
 20044  05DD  0141               	movlb	1	; select bank1
 20045  05DE  00E4               	movwf	??_qsort^(0+128)
 20046  05DF  3001               	movlw	1
 20047  05E0                     u13945:	
 20048  05E0  35E4               	lslf	??_qsort^(0+128),f
 20049  05E1  3EFF               	addlw	-1
 20050  05E2  1D03               	skipz
 20051  05E3  2DE0               	goto	u13945
 20052  05E4  3564               	lslf	??_qsort^(0+128),w
 20053  05E5  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20054  05E6  0086               	movwf	6
 20055  05E7  3001               	movlw	1	; select bank3/4
 20056  05E8  0087               	movwf	7
 20057  05E9  3F40               	moviw [0]fsr1
 20058  05EA  0142               	movlb	2	; select bank2
 20059  05EB  00DF               	movwf	qsort@l^(0+256)
 20060  05EC  3F41               	moviw [1]fsr1
 20061  05ED  00E0               	movwf	(qsort@l+1)^(0+256)
 20062  05EE  0863               	movf	qsort@s^(0+256),w
 20063  05EF  0141               	movlb	1	; select bank1
 20064  05F0  00E4               	movwf	??_qsort^(0+128)
 20065  05F1  3001               	movlw	1
 20066  05F2                     u13955:	
 20067  05F2  35E4               	lslf	??_qsort^(0+128),f
 20068  05F3  3EFF               	addlw	-1
 20069  05F4  1D03               	skipz
 20070  05F5  2DF2               	goto	u13955
 20071  05F6  3564               	lslf	??_qsort^(0+128),w
 20072  05F7  3E02               	addlw	2
 20073  05F8  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20074  05F9  0086               	movwf	6
 20075  05FA  3001               	movlw	1	; select bank3/4
 20076  05FB  0087               	movwf	7
 20077  05FC  3F40               	moviw [0]fsr1
 20078  05FD  0142               	movlb	2	; select bank2
 20079  05FE  00E1               	movwf	qsort@r^(0+256)
 20080  05FF  3F41               	moviw [1]fsr1
 20081  0600  00E2               	movwf	(qsort@r+1)^(0+256)
 20082  0601  30FF               	movlw	255
 20083  0602  07E3               	addwf	qsort@s^(0+256),f
 20084  0603  30FF               	movlw	255
 20085  0604  3DE4               	addwfc	(qsort@s+1)^(0+256),f
 20086  0605                     l10795:	
 20087  0605  0142               	movlb	2	; select bank2
 20088  0606  0860               	movf	(qsort@l+1)^(0+256),w
 20089  0607  00E6               	movwf	(qsort@i+1)^(0+256)
 20090  0608  085F               	movf	qsort@l^(0+256),w
 20091  0609  00E5               	movwf	qsort@i^(0+256)
 20092  060A  0862               	movf	(qsort@r+1)^(0+256),w
 20093  060B  00E8               	movwf	(qsort@j+1)^(0+256)
 20094  060C  0861               	movf	qsort@r^(0+256),w
 20095  060D  00E7               	movwf	qsort@j^(0+256)
 20096  060E  3002               	movlw	2
 20097  060F  0140               	movlb	0	; select bank0
 20098  0610  00AC               	movwf	___awdiv@divisor
 20099  0611  3000               	movlw	0
 20100  0612  00AD               	movwf	___awdiv@divisor+1
 20101  0613  0142               	movlb	2	; select bank2
 20102  0614  0867               	movf	qsort@j^(0+256),w
 20103  0615  0765               	addwf	qsort@i^(0+256),w
 20104  0616  0140               	movlb	0	; select bank0
 20105  0617  00AE               	movwf	___awdiv@dividend
 20106  0618  0142               	movlb	2	; select bank2
 20107  0619  0868               	movf	(qsort@j+1)^(0+256),w
 20108  061A  3D66               	addwfc	(qsort@i+1)^(0+256),w
 20109  061B  0140               	movlb	0	; select bank0
 20110  061C  00AF               	movwf	___awdiv@dividend+1
 20111  061D  31B3  2364  3185   	fcall	___awdiv
 20112  0620  0140               	movlb	0	; select bank0
 20113  0621  082D               	movf	?___awdiv+1,w
 20114  0622  00B6               	movwf	___wmul@multiplier+1
 20115  0623  082C               	movf	?___awdiv,w
 20116  0624  00B5               	movwf	___wmul@multiplier
 20117  0625  0141               	movlb	1	; select bank1
 20118  0626  0861               	movf	(qsort@width+1)^(0+128),w
 20119  0627  0140               	movlb	0	; select bank0
 20120  0628  00B8               	movwf	___wmul@multiplicand+1
 20121  0629  0141               	movlb	1	; select bank1
 20122  062A  0860               	movf	qsort@width^(0+128),w
 20123  062B  0140               	movlb	0	; select bank0
 20124  062C  00B7               	movwf	___wmul@multiplicand
 20125  062D  31BF  270A  3185   	fcall	___wmul
 20126  0630  0140               	movlb	0	; select bank0
 20127  0631  0835               	movf	?___wmul,w
 20128  0632  0142               	movlb	2	; select bank2
 20129  0633  075D               	addwf	qsort@base^(0+256),w
 20130  0634  0141               	movlb	1	; select bank1
 20131  0635  00E4               	movwf	??_qsort^(0+128)
 20132  0636  0140               	movlb	0	; select bank0
 20133  0637  0836               	movf	?___wmul+1,w
 20134  0638  0142               	movlb	2	; select bank2
 20135  0639  3D5E               	addwfc	(qsort@base+1)^(0+256),w
 20136  063A  0141               	movlb	1	; select bank1
 20137  063B  00E5               	movwf	(??_qsort+1)^(0+128)
 20138  063C  0864               	movf	??_qsort^(0+128),w
 20139  063D  0140               	movlb	0	; select bank0
 20140  063E  00BB               	movwf	memcpy@s1
 20141  063F  0141               	movlb	1	; select bank1
 20142  0640  0865               	movf	(??_qsort+1)^(0+128),w
 20143  0641  0140               	movlb	0	; select bank0
 20144  0642  00BC               	movwf	memcpy@s1+1
 20145  0643  0141               	movlb	1	; select bank1
 20146  0644  0861               	movf	(qsort@width+1)^(0+128),w
 20147  0645  0140               	movlb	0	; select bank0
 20148  0646  00BE               	movwf	memcpy@n+1
 20149  0647  0141               	movlb	1	; select bank1
 20150  0648  0860               	movf	qsort@width^(0+128),w
 20151  0649  0140               	movlb	0	; select bank0
 20152  064A  00BD               	movwf	memcpy@n
 20153  064B  0142               	movlb	2	; select bank2
 20154  064C  085C               	movf	qsort@x^(0+256),w
 20155  064D  3198  2001  3185   	fcall	_memcpy
 20156  0650                     l10803:	
 20157  0650  0142               	movlb	2	; select bank2
 20158  0651  0866               	movf	(qsort@i+1)^(0+256),w
 20159  0652  0140               	movlb	0	; select bank0
 20160  0653  00B6               	movwf	___wmul@multiplier+1
 20161  0654  0142               	movlb	2	; select bank2
 20162  0655  0865               	movf	qsort@i^(0+256),w
 20163  0656  0140               	movlb	0	; select bank0
 20164  0657  00B5               	movwf	___wmul@multiplier
 20165  0658  0141               	movlb	1	; select bank1
 20166  0659  0861               	movf	(qsort@width+1)^(0+128),w
 20167  065A  0140               	movlb	0	; select bank0
 20168  065B  00B8               	movwf	___wmul@multiplicand+1
 20169  065C  0141               	movlb	1	; select bank1
 20170  065D  0860               	movf	qsort@width^(0+128),w
 20171  065E  0140               	movlb	0	; select bank0
 20172  065F  00B7               	movwf	___wmul@multiplicand
 20173  0660  31BF  270A  3185   	fcall	___wmul
 20174  0663  0140               	movlb	0	; select bank0
 20175  0664  0835               	movf	?___wmul,w
 20176  0665  0142               	movlb	2	; select bank2
 20177  0666  075D               	addwf	qsort@base^(0+256),w
 20178  0667  0141               	movlb	1	; select bank1
 20179  0668  00E4               	movwf	??_qsort^(0+128)
 20180  0669  0140               	movlb	0	; select bank0
 20181  066A  0836               	movf	?___wmul+1,w
 20182  066B  0142               	movlb	2	; select bank2
 20183  066C  3D5E               	addwfc	(qsort@base+1)^(0+256),w
 20184  066D  0141               	movlb	1	; select bank1
 20185  066E  00E5               	movwf	(??_qsort+1)^(0+128)
 20186  066F  0864               	movf	??_qsort^(0+128),w
 20187  0670  00D2               	movwf	sortCur@cmp1^(0+128)
 20188  0671  0865               	movf	(??_qsort+1)^(0+128),w
 20189  0672  00D3               	movwf	(sortCur@cmp1+1)^(0+128)
 20190  0673  0142               	movlb	2	; select bank2
 20191  0674  085C               	movf	qsort@x^(0+256),w
 20192  0675  0141               	movlb	1	; select bank1
 20193  0676  00D4               	movwf	sortCur@cmp2^(0+128)
 20194  0677  3001               	movlw	1
 20195  0678  00D5               	movwf	(sortCur@cmp2+1)^(0+128)
 20196  0679  0863               	movf	(qsort@compar+1)^(0+128),w
 20197  067A  008A               	movwf	10
 20198  067B  0862               	movf	qsort@compar^(0+128),w
 20199  067C  000A               	callw
 20200  067D  3185               	pagesel	$
 20201  067E  0141               	movlb	1	; select bank1
 20202  067F  1FD3               	btfss	(?_sortCur+1)^(0+128),7
 20203  0680  2E8C               	goto	l10807
 20204  0681  3001               	movlw	1
 20205  0682  0142               	movlb	2	; select bank2
 20206  0683  07E5               	addwf	qsort@i^(0+256),f
 20207  0684  3000               	movlw	0
 20208  0685  3DE6               	addwfc	(qsort@i+1)^(0+256),f
 20209  0686  2E50               	goto	l10803
 20210  0687                     l10805:	
 20211  0687  30FF               	movlw	255
 20212  0688  0142               	movlb	2	; select bank2
 20213  0689  07E7               	addwf	qsort@j^(0+256),f
 20214  068A  30FF               	movlw	255
 20215  068B  3DE8               	addwfc	(qsort@j+1)^(0+256),f
 20216  068C                     l10807:	
 20217  068C  0142               	movlb	2	; select bank2
 20218  068D  085C               	movf	qsort@x^(0+256),w
 20219  068E  0141               	movlb	1	; select bank1
 20220  068F  00D2               	movwf	sortCur@cmp1^(0+128)
 20221  0690  3001               	movlw	1
 20222  0691  00D3               	movwf	(sortCur@cmp1+1)^(0+128)
 20223  0692  0142               	movlb	2	; select bank2
 20224  0693  0868               	movf	(qsort@j+1)^(0+256),w
 20225  0694  0140               	movlb	0	; select bank0
 20226  0695  00B6               	movwf	___wmul@multiplier+1
 20227  0696  0142               	movlb	2	; select bank2
 20228  0697  0867               	movf	qsort@j^(0+256),w
 20229  0698  0140               	movlb	0	; select bank0
 20230  0699  00B5               	movwf	___wmul@multiplier
 20231  069A  0141               	movlb	1	; select bank1
 20232  069B  0861               	movf	(qsort@width+1)^(0+128),w
 20233  069C  0140               	movlb	0	; select bank0
 20234  069D  00B8               	movwf	___wmul@multiplicand+1
 20235  069E  0141               	movlb	1	; select bank1
 20236  069F  0860               	movf	qsort@width^(0+128),w
 20237  06A0  0140               	movlb	0	; select bank0
 20238  06A1  00B7               	movwf	___wmul@multiplicand
 20239  06A2  31BF  270A  3185   	fcall	___wmul
 20240  06A5  0140               	movlb	0	; select bank0
 20241  06A6  0835               	movf	?___wmul,w
 20242  06A7  0142               	movlb	2	; select bank2
 20243  06A8  075D               	addwf	qsort@base^(0+256),w
 20244  06A9  0141               	movlb	1	; select bank1
 20245  06AA  00E4               	movwf	??_qsort^(0+128)
 20246  06AB  0140               	movlb	0	; select bank0
 20247  06AC  0836               	movf	?___wmul+1,w
 20248  06AD  0142               	movlb	2	; select bank2
 20249  06AE  3D5E               	addwfc	(qsort@base+1)^(0+256),w
 20250  06AF  0141               	movlb	1	; select bank1
 20251  06B0  00E5               	movwf	(??_qsort+1)^(0+128)
 20252  06B1  0864               	movf	??_qsort^(0+128),w
 20253  06B2  00D4               	movwf	sortCur@cmp2^(0+128)
 20254  06B3  0865               	movf	(??_qsort+1)^(0+128),w
 20255  06B4  00D5               	movwf	(sortCur@cmp2+1)^(0+128)
 20256  06B5  0863               	movf	(qsort@compar+1)^(0+128),w
 20257  06B6  008A               	movwf	10
 20258  06B7  0862               	movf	qsort@compar^(0+128),w
 20259  06B8  000A               	callw
 20260  06B9  3185               	pagesel	$
 20261  06BA  0141               	movlb	1	; select bank1
 20262  06BB  1BD3               	btfsc	(?_sortCur+1)^(0+128),7
 20263  06BC  2E87               	goto	l10805
 20264  06BD  0142               	movlb	2	; select bank2
 20265  06BE  0868               	movf	(qsort@j+1)^(0+256),w
 20266  06BF  3A80               	xorlw	128
 20267  06C0  0141               	movlb	1	; select bank1
 20268  06C1  00E4               	movwf	??_qsort^(0+128)
 20269  06C2  0142               	movlb	2	; select bank2
 20270  06C3  0866               	movf	(qsort@i+1)^(0+256),w
 20271  06C4  3A80               	xorlw	128
 20272  06C5  0141               	movlb	1	; select bank1
 20273  06C6  0264               	subwf	??_qsort^(0+128),w
 20274  06C7  1D03               	skipz
 20275  06C8  2ECC               	goto	u13985
 20276  06C9  0142               	movlb	2	; select bank2
 20277  06CA  0865               	movf	qsort@i^(0+256),w
 20278  06CB  0267               	subwf	qsort@j^(0+256),w
 20279  06CC                     u13985:	
 20280  06CC  1C03               	skipc
 20281  06CD  2F1E               	goto	l10817
 20282  06CE  0141               	movlb	1	; select bank1
 20283  06CF  0861               	movf	(qsort@width+1)^(0+128),w
 20284  06D0  0140               	movlb	0	; select bank0
 20285  06D1  00BC               	movwf	swap@len+1
 20286  06D2  0141               	movlb	1	; select bank1
 20287  06D3  0860               	movf	qsort@width^(0+128),w
 20288  06D4  0140               	movlb	0	; select bank0
 20289  06D5  00BB               	movwf	swap@len
 20290  06D6  0142               	movlb	2	; select bank2
 20291  06D7  0866               	movf	(qsort@i+1)^(0+256),w
 20292  06D8  0140               	movlb	0	; select bank0
 20293  06D9  00B6               	movwf	___wmul@multiplier+1
 20294  06DA  0142               	movlb	2	; select bank2
 20295  06DB  0865               	movf	qsort@i^(0+256),w
 20296  06DC  0140               	movlb	0	; select bank0
 20297  06DD  00B5               	movwf	___wmul@multiplier
 20298  06DE  0141               	movlb	1	; select bank1
 20299  06DF  0861               	movf	(qsort@width+1)^(0+128),w
 20300  06E0  0140               	movlb	0	; select bank0
 20301  06E1  00B8               	movwf	___wmul@multiplicand+1
 20302  06E2  0141               	movlb	1	; select bank1
 20303  06E3  0860               	movf	qsort@width^(0+128),w
 20304  06E4  0140               	movlb	0	; select bank0
 20305  06E5  00B7               	movwf	___wmul@multiplicand
 20306  06E6  31BF  270A  3185   	fcall	___wmul
 20307  06E9  0140               	movlb	0	; select bank0
 20308  06EA  0835               	movf	?___wmul,w
 20309  06EB  0142               	movlb	2	; select bank2
 20310  06EC  075D               	addwf	qsort@base^(0+256),w
 20311  06ED  0140               	movlb	0	; select bank0
 20312  06EE  00BD               	movwf	swap@s1
 20313  06EF  0836               	movf	?___wmul+1,w
 20314  06F0  0142               	movlb	2	; select bank2
 20315  06F1  3D5E               	addwfc	(qsort@base+1)^(0+256),w
 20316  06F2  0140               	movlb	0	; select bank0
 20317  06F3  00BE               	movwf	swap@s1+1
 20318  06F4  0142               	movlb	2	; select bank2
 20319  06F5  0868               	movf	(qsort@j+1)^(0+256),w
 20320  06F6  0140               	movlb	0	; select bank0
 20321  06F7  00B6               	movwf	___wmul@multiplier+1
 20322  06F8  0142               	movlb	2	; select bank2
 20323  06F9  0867               	movf	qsort@j^(0+256),w
 20324  06FA  0140               	movlb	0	; select bank0
 20325  06FB  00B5               	movwf	___wmul@multiplier
 20326  06FC  0141               	movlb	1	; select bank1
 20327  06FD  0861               	movf	(qsort@width+1)^(0+128),w
 20328  06FE  0140               	movlb	0	; select bank0
 20329  06FF  00B8               	movwf	___wmul@multiplicand+1
 20330  0700  0141               	movlb	1	; select bank1
 20331  0701  0860               	movf	qsort@width^(0+128),w
 20332  0702  0140               	movlb	0	; select bank0
 20333  0703  00B7               	movwf	___wmul@multiplicand
 20334  0704  31BF  270A  3185   	fcall	___wmul
 20335  0707  0140               	movlb	0	; select bank0
 20336  0708  0835               	movf	?___wmul,w
 20337  0709  0142               	movlb	2	; select bank2
 20338  070A  075D               	addwf	qsort@base^(0+256),w
 20339  070B  0140               	movlb	0	; select bank0
 20340  070C  00BF               	movwf	swap@s2
 20341  070D  0836               	movf	?___wmul+1,w
 20342  070E  0142               	movlb	2	; select bank2
 20343  070F  3D5E               	addwfc	(qsort@base+1)^(0+256),w
 20344  0710  0140               	movlb	0	; select bank0
 20345  0711  00C0               	movwf	swap@s2+1
 20346  0712  31BF  27A2  3185   	fcall	_swap
 20347  0715  3001               	movlw	1
 20348  0716  0142               	movlb	2	; select bank2
 20349  0717  07E5               	addwf	qsort@i^(0+256),f
 20350  0718  3000               	movlw	0
 20351  0719  3DE6               	addwfc	(qsort@i+1)^(0+256),f
 20352  071A  30FF               	movlw	255
 20353  071B  07E7               	addwf	qsort@j^(0+256),f
 20354  071C  30FF               	movlw	255
 20355  071D  3DE8               	addwfc	(qsort@j+1)^(0+256),f
 20356  071E                     l10817:	
 20357  071E  0142               	movlb	2	; select bank2
 20358  071F  0868               	movf	(qsort@j+1)^(0+256),w
 20359  0720  3A80               	xorlw	128
 20360  0721  0141               	movlb	1	; select bank1
 20361  0722  00E4               	movwf	??_qsort^(0+128)
 20362  0723  0142               	movlb	2	; select bank2
 20363  0724  0866               	movf	(qsort@i+1)^(0+256),w
 20364  0725  3A80               	xorlw	128
 20365  0726  0141               	movlb	1	; select bank1
 20366  0727  0264               	subwf	??_qsort^(0+128),w
 20367  0728  1D03               	skipz
 20368  0729  2F2D               	goto	u13995
 20369  072A  0142               	movlb	2	; select bank2
 20370  072B  0865               	movf	qsort@i^(0+256),w
 20371  072C  0267               	subwf	qsort@j^(0+256),w
 20372  072D                     u13995:	
 20373  072D  1803               	skipnc
 20374  072E  2E50               	goto	l10803
 20375  072F  0142               	movlb	2	; select bank2
 20376  0730  0965               	comf	qsort@i^(0+256),w
 20377  0731  0141               	movlb	1	; select bank1
 20378  0732  00E4               	movwf	??_qsort^(0+128)
 20379  0733  0142               	movlb	2	; select bank2
 20380  0734  0966               	comf	(qsort@i+1)^(0+256),w
 20381  0735  0141               	movlb	1	; select bank1
 20382  0736  00E5               	movwf	(??_qsort^(0+128)+1)
 20383  0737  0AE4               	incf	??_qsort^(0+128),f
 20384  0738  1903               	skipnz
 20385  0739  0AE5               	incf	(??_qsort^(0+128)+1),f
 20386  073A  0142               	movlb	2	; select bank2
 20387  073B  0861               	movf	qsort@r^(0+256),w
 20388  073C  0141               	movlb	1	; select bank1
 20389  073D  0764               	addwf	??_qsort^(0+128),w
 20390  073E  00E6               	movwf	(??_qsort+2)^(0+128)
 20391  073F  0142               	movlb	2	; select bank2
 20392  0740  0862               	movf	(qsort@r+1)^(0+256),w
 20393  0741  0141               	movlb	1	; select bank1
 20394  0742  3D65               	addwfc	(??_qsort+1)^(0+128),w
 20395  0743  00E7               	movwf	(??_qsort+3)^(0+128)
 20396  0744  0142               	movlb	2	; select bank2
 20397  0745  095F               	comf	qsort@l^(0+256),w
 20398  0746  0141               	movlb	1	; select bank1
 20399  0747  00E8               	movwf	(??_qsort+4)^(0+128)
 20400  0748  0142               	movlb	2	; select bank2
 20401  0749  0960               	comf	(qsort@l+1)^(0+256),w
 20402  074A  0141               	movlb	1	; select bank1
 20403  074B  00E9               	movwf	((??_qsort+4)^(0+128)+1)
 20404  074C  0AE8               	incf	(??_qsort+4)^(0+128),f
 20405  074D  1903               	skipnz
 20406  074E  0AE9               	incf	((??_qsort+4)^(0+128)+1),f
 20407  074F  0142               	movlb	2	; select bank2
 20408  0750  0867               	movf	qsort@j^(0+256),w
 20409  0751  0141               	movlb	1	; select bank1
 20410  0752  0768               	addwf	(??_qsort+4)^(0+128),w
 20411  0753  00EA               	movwf	(??_qsort+6)^(0+128)
 20412  0754  0142               	movlb	2	; select bank2
 20413  0755  0868               	movf	(qsort@j+1)^(0+256),w
 20414  0756  0141               	movlb	1	; select bank1
 20415  0757  3D69               	addwfc	(??_qsort+5)^(0+128),w
 20416  0758  00EB               	movwf	(??_qsort+7)^(0+128)
 20417  0759  086B               	movf	(??_qsort+7)^(0+128),w
 20418  075A  3A80               	xorlw	128
 20419  075B  00EC               	movwf	(??_qsort+8)^(0+128)
 20420  075C  0867               	movf	(??_qsort+3)^(0+128),w
 20421  075D  3A80               	xorlw	128
 20422  075E  026C               	subwf	(??_qsort+8)^(0+128),w
 20423  075F  1D03               	skipz
 20424  0760  2F63               	goto	u14005
 20425  0761  0866               	movf	(??_qsort+2)^(0+128),w
 20426  0762  026A               	subwf	(??_qsort+6)^(0+128),w
 20427  0763                     u14005:	
 20428  0763  1803               	skipnc
 20429  0764  2FA6               	goto	l10827
 20430  0765  0142               	movlb	2	; select bank2
 20431  0766  0866               	movf	(qsort@i+1)^(0+256),w
 20432  0767  3A80               	xorlw	128
 20433  0768  0141               	movlb	1	; select bank1
 20434  0769  00E4               	movwf	??_qsort^(0+128)
 20435  076A  0142               	movlb	2	; select bank2
 20436  076B  0862               	movf	(qsort@r+1)^(0+256),w
 20437  076C  3A80               	xorlw	128
 20438  076D  0141               	movlb	1	; select bank1
 20439  076E  0264               	subwf	??_qsort^(0+128),w
 20440  076F  1D03               	skipz
 20441  0770  2F74               	goto	u14015
 20442  0771  0142               	movlb	2	; select bank2
 20443  0772  0861               	movf	qsort@r^(0+256),w
 20444  0773  0265               	subwf	qsort@i^(0+256),w
 20445  0774                     u14015:	
 20446  0774  1803               	skipnc
 20447  0775  2FA0               	goto	l10825
 20448  0776  3001               	movlw	1
 20449  0777  0142               	movlb	2	; select bank2
 20450  0778  07E3               	addwf	qsort@s^(0+256),f
 20451  0779  3000               	movlw	0
 20452  077A  3DE4               	addwfc	(qsort@s+1)^(0+256),f
 20453  077B  0863               	movf	qsort@s^(0+256),w
 20454  077C  0141               	movlb	1	; select bank1
 20455  077D  00E4               	movwf	??_qsort^(0+128)
 20456  077E  3001               	movlw	1
 20457  077F                     u14025:	
 20458  077F  35E4               	lslf	??_qsort^(0+128),f
 20459  0780  3EFF               	addlw	-1
 20460  0781  1D03               	skipz
 20461  0782  2F7F               	goto	u14025
 20462  0783  3564               	lslf	??_qsort^(0+128),w
 20463  0784  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20464  0785  0086               	movwf	6
 20465  0786  3001               	movlw	1	; select bank3/4
 20466  0787  0087               	movwf	7
 20467  0788  0142               	movlb	2	; select bank2
 20468  0789  0865               	movf	qsort@i^(0+256),w
 20469  078A  3FC0               	movwi [0]fsr1
 20470  078B  0866               	movf	(qsort@i+1)^(0+256),w
 20471  078C  3FC1               	movwi [1]fsr1
 20472  078D  0863               	movf	qsort@s^(0+256),w
 20473  078E  0141               	movlb	1	; select bank1
 20474  078F  00E4               	movwf	??_qsort^(0+128)
 20475  0790  3001               	movlw	1
 20476  0791                     u14035:	
 20477  0791  35E4               	lslf	??_qsort^(0+128),f
 20478  0792  3EFF               	addlw	-1
 20479  0793  1D03               	skipz
 20480  0794  2F91               	goto	u14035
 20481  0795  3564               	lslf	??_qsort^(0+128),w
 20482  0796  3E02               	addlw	2
 20483  0797  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20484  0798  0086               	movwf	6
 20485  0799  3001               	movlw	1	; select bank3/4
 20486  079A  0087               	movwf	7
 20487  079B  0142               	movlb	2	; select bank2
 20488  079C  0861               	movf	qsort@r^(0+256),w
 20489  079D  3FC0               	movwi [0]fsr1
 20490  079E  0862               	movf	(qsort@r+1)^(0+256),w
 20491  079F  3FC1               	movwi [1]fsr1
 20492  07A0                     l10825:	
 20493  07A0  0142               	movlb	2	; select bank2
 20494  07A1  0868               	movf	(qsort@j+1)^(0+256),w
 20495  07A2  00E2               	movwf	(qsort@r+1)^(0+256)
 20496  07A3  0867               	movf	qsort@j^(0+256),w
 20497  07A4  00E1               	movwf	qsort@r^(0+256)
 20498  07A5  2FE6               	goto	l10833
 20499  07A6                     l10827:	
 20500  07A6  0142               	movlb	2	; select bank2
 20501  07A7  0860               	movf	(qsort@l+1)^(0+256),w
 20502  07A8  3A80               	xorlw	128
 20503  07A9  0141               	movlb	1	; select bank1
 20504  07AA  00E4               	movwf	??_qsort^(0+128)
 20505  07AB  0142               	movlb	2	; select bank2
 20506  07AC  0868               	movf	(qsort@j+1)^(0+256),w
 20507  07AD  3A80               	xorlw	128
 20508  07AE  0141               	movlb	1	; select bank1
 20509  07AF  0264               	subwf	??_qsort^(0+128),w
 20510  07B0  1D03               	skipz
 20511  07B1  2FB5               	goto	u14045
 20512  07B2  0142               	movlb	2	; select bank2
 20513  07B3  0867               	movf	qsort@j^(0+256),w
 20514  07B4  025F               	subwf	qsort@l^(0+256),w
 20515  07B5                     u14045:	
 20516  07B5  1803               	skipnc
 20517  07B6  2FE1               	goto	l10831
 20518  07B7  3001               	movlw	1
 20519  07B8  0142               	movlb	2	; select bank2
 20520  07B9  07E3               	addwf	qsort@s^(0+256),f
 20521  07BA  3000               	movlw	0
 20522  07BB  3DE4               	addwfc	(qsort@s+1)^(0+256),f
 20523  07BC  0863               	movf	qsort@s^(0+256),w
 20524  07BD  0141               	movlb	1	; select bank1
 20525  07BE  00E4               	movwf	??_qsort^(0+128)
 20526  07BF  3001               	movlw	1
 20527  07C0                     u14055:	
 20528  07C0  35E4               	lslf	??_qsort^(0+128),f
 20529  07C1  3EFF               	addlw	-1
 20530  07C2  1D03               	skipz
 20531  07C3  2FC0               	goto	u14055
 20532  07C4  3564               	lslf	??_qsort^(0+128),w
 20533  07C5  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20534  07C6  0086               	movwf	6
 20535  07C7  3001               	movlw	1	; select bank3/4
 20536  07C8  0087               	movwf	7
 20537  07C9  0142               	movlb	2	; select bank2
 20538  07CA  085F               	movf	qsort@l^(0+256),w
 20539  07CB  3FC0               	movwi [0]fsr1
 20540  07CC  0860               	movf	(qsort@l+1)^(0+256),w
 20541  07CD  3FC1               	movwi [1]fsr1
 20542  07CE  0863               	movf	qsort@s^(0+256),w
 20543  07CF  0141               	movlb	1	; select bank1
 20544  07D0  00E4               	movwf	??_qsort^(0+128)
 20545  07D1  3001               	movlw	1
 20546  07D2                     u14065:	
 20547  07D2  35E4               	lslf	??_qsort^(0+128),f
 20548  07D3  3EFF               	addlw	-1
 20549  07D4  1D03               	skipz
 20550  07D5  2FD2               	goto	u14065
 20551  07D6  3564               	lslf	??_qsort^(0+128),w
 20552  07D7  3E02               	addlw	2
 20553  07D8  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20554  07D9  0086               	movwf	6
 20555  07DA  3001               	movlw	1	; select bank3/4
 20556  07DB  0087               	movwf	7
 20557  07DC  0142               	movlb	2	; select bank2
 20558  07DD  0867               	movf	qsort@j^(0+256),w
 20559  07DE  3FC0               	movwi [0]fsr1
 20560  07DF  0868               	movf	(qsort@j+1)^(0+256),w
 20561  07E0  3FC1               	movwi [1]fsr1
 20562  07E1                     l10831:	
 20563  07E1  0142               	movlb	2	; select bank2
 20564  07E2  0866               	movf	(qsort@i+1)^(0+256),w
 20565  07E3  00E0               	movwf	(qsort@l+1)^(0+256)
 20566  07E4  0865               	movf	qsort@i^(0+256),w
 20567  07E5  00DF               	movwf	qsort@l^(0+256)
 20568  07E6                     l10833:	
 20569  07E6  0860               	movf	(qsort@l+1)^(0+256),w
 20570  07E7  3A80               	xorlw	128
 20571  07E8  0141               	movlb	1	; select bank1
 20572  07E9  00E4               	movwf	??_qsort^(0+128)
 20573  07EA  0142               	movlb	2	; select bank2
 20574  07EB  0862               	movf	(qsort@r+1)^(0+256),w
 20575  07EC  3A80               	xorlw	128
 20576  07ED  0141               	movlb	1	; select bank1
 20577  07EE  0264               	subwf	??_qsort^(0+128),w
 20578  07EF  1D03               	skipz
 20579  07F0  2FF4               	goto	u14075
 20580  07F1  0142               	movlb	2	; select bank2
 20581  07F2  0861               	movf	qsort@r^(0+256),w
 20582  07F3  025F               	subwf	qsort@l^(0+256),w
 20583  07F4                     u14075:	
 20584  07F4  1C03               	skipc
 20585  07F5  2E05               	goto	l10795
 20586  07F6  0142               	movlb	2	; select bank2
 20587  07F7  1BE4               	btfsc	(qsort@s+1)^(0+256),7
 20588  07F8  0008               	return
 20589  07F9  2DDB               	goto	l10789
 20590  07FA                     __end_of_qsort:	
 20591                           
 20592                           	psect	text47
 20593  3FA2                     __ptext47:	
 20594 ;; *************** function _swap *****************
 20595 ;; Defined at:
 20596 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\qsort.c"
 20597 ;; Parameters:    Size  Location     Type
 20598 ;;  len             2   27[BANK0 ] unsigned int 
 20599 ;;  s1              2   29[BANK0 ] PTR unsigned char 
 20600 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20601 ;;  s2              2   31[BANK0 ] PTR unsigned char 
 20602 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20603 ;; Auto vars:     Size  Location     Type
 20604 ;;  c               1   34[BANK0 ] unsigned char 
 20605 ;; Return value:  Size  Location     Type
 20606 ;;                  1    wreg      void 
 20607 ;; Registers used:
 20608 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20609 ;; Tracked objects:
 20610 ;;		On entry : 0/0
 20611 ;;		On exit  : 0/0
 20612 ;;		Unchanged: 0/0
 20613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20614 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20617 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20618 ;;Total ram usage:        8 bytes
 20619 ;; Hardware stack levels used:    1
 20620 ;; Hardware stack levels required when called:    3
 20621 ;; This function calls:
 20622 ;;		Nothing
 20623 ;; This function is called by:
 20624 ;;		_qsort
 20625 ;; This function uses a non-reentrant model
 20626 ;;
 20627                           
 20628                           
 20629                           ;psect for function _swap
 20630  3FA2                     _swap:	
 20631  3FA2                     l10311:	
 20632                           ;incstack = 0
 20633                           ; Regs used in _swap: [wreg+fsr1l+fsr1h+status,2+status,0]
 20634                           
 20635  3FA2  3001               	movlw	1
 20636  3FA3  0140               	movlb	0	; select bank0
 20637  3FA4  02BB               	subwf	swap@len,f
 20638  3FA5  3000               	movlw	0
 20639  3FA6  3BBC               	subwfb	swap@len+1,f
 20640  3FA7  0A3B               	incf	swap@len,w
 20641  3FA8  1903               	btfsc	3,2
 20642  3FA9  0A3C               	incf	swap@len+1,w
 20643  3FAA  1903               	btfsc	3,2
 20644  3FAB  0008               	return
 20645  3FAC  0140               	movlb	0	; select bank0
 20646  3FAD  083D               	movf	swap@s1,w
 20647  3FAE  0086               	movwf	6
 20648  3FAF  083E               	movf	swap@s1+1,w
 20649  3FB0  0087               	movwf	7
 20650  3FB1  0801               	movf	1,w
 20651  3FB2  00C1               	movwf	??_swap
 20652  3FB3  0841               	movf	??_swap,w
 20653  3FB4  00C2               	movwf	swap@c
 20654  3FB5  083F               	movf	swap@s2,w
 20655  3FB6  0086               	movwf	6
 20656  3FB7  0840               	movf	swap@s2+1,w
 20657  3FB8  0087               	movwf	7
 20658  3FB9  0801               	movf	1,w
 20659  3FBA  00C1               	movwf	??_swap
 20660  3FBB  083D               	movf	swap@s1,w
 20661  3FBC  0086               	movwf	6
 20662  3FBD  083E               	movf	swap@s1+1,w
 20663  3FBE  0087               	movwf	7
 20664  3FBF  0841               	movf	??_swap,w
 20665  3FC0  0081               	movwf	1
 20666  3FC1  3001               	movlw	1
 20667  3FC2  07BD               	addwf	swap@s1,f
 20668  3FC3  3000               	movlw	0
 20669  3FC4  3DBE               	addwfc	swap@s1+1,f
 20670  3FC5  083F               	movf	swap@s2,w
 20671  3FC6  0086               	movwf	6
 20672  3FC7  0840               	movf	swap@s2+1,w
 20673  3FC8  0087               	movwf	7
 20674  3FC9  0842               	movf	swap@c,w
 20675  3FCA  0081               	movwf	1
 20676  3FCB  3001               	movlw	1
 20677  3FCC  07BF               	addwf	swap@s2,f
 20678  3FCD  3000               	movlw	0
 20679  3FCE  3DC0               	addwfc	swap@s2+1,f
 20680  3FCF  2FA2               	goto	l10311
 20681  3FD0                     __end_of_swap:	
 20682                           
 20683                           	psect	text48
 20684  3176                     __ptext48:	
 20685 ;; *************** function _sortCur *****************
 20686 ;; Defined at:
 20687 ;;		line 331 in file "system.c"
 20688 ;; Parameters:    Size  Location     Type
 20689 ;;  cmp1            2   50[BANK1 ] PTR const void 
 20690 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20691 ;;  cmp2            2   52[BANK1 ] PTR const void 
 20692 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20693 ;; Auto vars:     Size  Location     Type
 20694 ;;  b               2   56[BANK1 ] PTR struct .
 20695 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20696 ;;  a               2   54[BANK1 ] PTR struct .
 20697 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20698 ;; Return value:  Size  Location     Type
 20699 ;;                  2   50[BANK1 ] int 
 20700 ;; Registers used:
 20701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20702 ;; Tracked objects:
 20703 ;;		On entry : 0/0
 20704 ;;		On exit  : 0/0
 20705 ;;		Unchanged: 0/0
 20706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20707 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20708 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20710 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20711 ;;Total ram usage:        8 bytes
 20712 ;; Hardware stack levels used:    1
 20713 ;; Hardware stack levels required when called:    4
 20714 ;; This function calls:
 20715 ;;		___fladd
 20716 ;;		___flneg
 20717 ;;		___fltol
 20718 ;; This function is called by:
 20719 ;;		_channelThing
 20720 ;;		_qsort
 20721 ;; This function uses a non-reentrant model
 20722 ;;
 20723                           
 20724                           
 20725                           ;psect for function _sortCur
 20726  3176                     _sortCur:	
 20727                           
 20728                           ;system.c: 331: int sortCur(const void *cmp1, const void *cmp2);system.c: 332: {;system.
      +                          c: 333:  t_virtChannel *a = (t_virtChannel *)cmp1;
 20729                           
 20730                           ;incstack = 0
 20731                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20732  3176  0141               	movlb	1	; select bank1
 20733  3177  0853               	movf	(sortCur@cmp1+1)^(0+128),w
 20734  3178  00D7               	movwf	(sortCur@a+1)^(0+128)
 20735  3179  0852               	movf	sortCur@cmp1^(0+128),w
 20736  317A  00D6               	movwf	sortCur@a^(0+128)
 20737                           
 20738                           ;system.c: 334:  t_virtChannel *b = (t_virtChannel *)cmp2;
 20739  317B  0855               	movf	(sortCur@cmp2+1)^(0+128),w
 20740  317C  00D9               	movwf	(sortCur@b+1)^(0+128)
 20741  317D  0854               	movf	sortCur@cmp2^(0+128),w
 20742  317E  00D8               	movwf	sortCur@b^(0+128)
 20743                           
 20744                           ;system.c: 336:  return (b->current - a->current);
 20745  317F  0856               	movf	sortCur@a^(0+128),w
 20746  3180  0086               	movwf	6
 20747  3181  0857               	movf	(sortCur@a+1)^(0+128),w
 20748  3182  0087               	movwf	7
 20749  3183  3142               	addfsr 1,2
 20750  3184  3F40               	moviw [0]fsr1
 20751  3185  00AD               	movwf	___flneg@f1^(0+128)
 20752  3186  3F41               	moviw [1]fsr1
 20753  3187  00AE               	movwf	(___flneg@f1+1)^(0+128)
 20754  3188  3F42               	moviw [2]fsr1
 20755  3189  00AF               	movwf	(___flneg@f1+2)^(0+128)
 20756  318A  3F43               	moviw [3]fsr1
 20757  318B  00B0               	movwf	(___flneg@f1+3)^(0+128)
 20758  318C  31BE  2657  31B1   	fcall	___flneg
 20759  318F  0141               	movlb	1	; select bank1
 20760  3190  0830               	movf	(?___flneg+3)^(0+128),w
 20761  3191  00B8               	movwf	(___fladd@a+3)^(0+128)
 20762  3192  082F               	movf	(?___flneg+2)^(0+128),w
 20763  3193  00B7               	movwf	(___fladd@a+2)^(0+128)
 20764  3194  082E               	movf	(?___flneg+1)^(0+128),w
 20765  3195  00B6               	movwf	(___fladd@a+1)^(0+128)
 20766  3196  082D               	movf	?___flneg^(0+128),w
 20767  3197  00B5               	movwf	___fladd@a^(0+128)
 20768  3198  0858               	movf	sortCur@b^(0+128),w
 20769  3199  0086               	movwf	6
 20770  319A  0859               	movf	(sortCur@b+1)^(0+128),w
 20771  319B  0087               	movwf	7
 20772  319C  3142               	addfsr 1,2
 20773  319D  3F40               	moviw [0]fsr1
 20774  319E  00B1               	movwf	___fladd@b^(0+128)
 20775  319F  3F41               	moviw [1]fsr1
 20776  31A0  00B2               	movwf	(___fladd@b+1)^(0+128)
 20777  31A1  3F42               	moviw [2]fsr1
 20778  31A2  00B3               	movwf	(___fladd@b+2)^(0+128)
 20779  31A3  3F43               	moviw [3]fsr1
 20780  31A4  00B4               	movwf	(___fladd@b+3)^(0+128)
 20781  31A5  319E  2606  31B1   	fcall	___fladd
 20782  31A8  0141               	movlb	1	; select bank1
 20783  31A9  0834               	movf	(?___fladd+3)^(0+128),w
 20784  31AA  00CC               	movwf	(___fltol@f1+3)^(0+128)
 20785  31AB  0833               	movf	(?___fladd+2)^(0+128),w
 20786  31AC  00CB               	movwf	(___fltol@f1+2)^(0+128)
 20787  31AD  0832               	movf	(?___fladd+1)^(0+128),w
 20788  31AE  00CA               	movwf	(___fltol@f1+1)^(0+128)
 20789  31AF  0831               	movf	?___fladd^(0+128),w
 20790  31B0  00C9               	movwf	___fltol@f1^(0+128)
 20791  31B1  31A9  21BA         	fcall	___fltol
 20792  31B3  0141               	movlb	1	; select bank1
 20793  31B4  084A               	movf	(?___fltol+1)^(0+128),w
 20794  31B5  00D3               	movwf	(?_sortCur+1)^(0+128)
 20795  31B6  0849               	movf	?___fltol^(0+128),w
 20796  31B7  00D2               	movwf	?_sortCur^(0+128)
 20797  31B8  0008               	return
 20798  31B9                     __end_of_sortCur:	
 20799                           
 20800                           	psect	text49
 20801  3136                     __ptext49:	
 20802 ;; *************** function _sortDC *****************
 20803 ;; Defined at:
 20804 ;;		line 309 in file "system.c"
 20805 ;; Parameters:    Size  Location     Type
 20806 ;;  cmp1            2   50[BANK1 ] PTR const void 
 20807 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20808 ;;  cmp2            2   52[BANK1 ] PTR const void 
 20809 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20810 ;; Auto vars:     Size  Location     Type
 20811 ;;  b               1   59[BANK1 ] unsigned char 
 20812 ;;  a               1   58[BANK1 ] unsigned char 
 20813 ;; Return value:  Size  Location     Type
 20814 ;;                  2   50[BANK1 ] int 
 20815 ;; Registers used:
 20816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20817 ;; Tracked objects:
 20818 ;;		On entry : 0/0
 20819 ;;		On exit  : 0/0
 20820 ;;		Unchanged: 0/0
 20821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20822 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20823 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20824 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20825 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20826 ;;Total ram usage:       10 bytes
 20827 ;; Hardware stack levels used:    1
 20828 ;; Hardware stack levels required when called:    4
 20829 ;; This function calls:
 20830 ;;		___bmul
 20831 ;; This function is called by:
 20832 ;;		_channelThing
 20833 ;;		_qsort
 20834 ;; This function uses a non-reentrant model
 20835 ;;
 20836                           
 20837                           
 20838                           ;psect for function _sortDC
 20839  3136                     _sortDC:	
 20840                           
 20841                           ;system.c: 309: int sortDC(const void *cmp1, const void *cmp2);system.c: 310: {;system.c
      +                          : 311:  uint8_t a = *(uint8_t *)cmp1;
 20842                           
 20843                           ;incstack = 0
 20844                           ; Regs used in _sortDC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20845  3136  0141               	movlb	1	; select bank1
 20846  3137  0852               	movf	sortDC@cmp1^(0+128),w
 20847  3138  0086               	movwf	6
 20848  3139  0853               	movf	(sortDC@cmp1+1)^(0+128),w
 20849  313A  0087               	movwf	7
 20850  313B  0801               	movf	1,w
 20851  313C  00D6               	movwf	??_sortDC^(0+128)
 20852  313D  0856               	movf	??_sortDC^(0+128),w
 20853  313E  00DA               	movwf	sortDC@a^(0+128)
 20854                           
 20855                           ;system.c: 312:  uint8_t b = *(uint8_t *)cmp2;
 20856  313F  0854               	movf	sortDC@cmp2^(0+128),w
 20857  3140  0086               	movwf	6
 20858  3141  0855               	movf	(sortDC@cmp2+1)^(0+128),w
 20859  3142  0087               	movwf	7
 20860  3143  0801               	movf	1,w
 20861  3144  00D6               	movwf	??_sortDC^(0+128)
 20862  3145  0856               	movf	??_sortDC^(0+128),w
 20863  3146  00DB               	movwf	sortDC@b^(0+128)
 20864                           
 20865                           ;system.c: 314:  return (virtChannels[b].DC - virtChannels[a].DC);
 20866  3147  3009               	movlw	9
 20867  3148  00D6               	movwf	??_sortDC^(0+128)
 20868  3149  0856               	movf	??_sortDC^(0+128),w
 20869  314A  0140               	movlb	0	; select bank0
 20870  314B  00AC               	movwf	___bmul@multiplicand
 20871  314C  0141               	movlb	1	; select bank1
 20872  314D  085A               	movf	sortDC@a^(0+128),w
 20873  314E  31BE  26B0  31B1   	fcall	___bmul
 20874  3151  3E06               	addlw	6
 20875  3152  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 20876  3153  0086               	movwf	6
 20877  3154  3002               	movlw	2	; select bank5/6
 20878  3155  0087               	movwf	7
 20879  3156  0801               	movf	1,w
 20880  3157  0141               	movlb	1	; select bank1
 20881  3158  00D7               	movwf	(??_sortDC+1)^(0+128)
 20882  3159  01D8               	clrf	((??_sortDC+1)^(0+128)+1)
 20883  315A  09D7               	comf	(??_sortDC+1)^(0+128),f
 20884  315B  09D8               	comf	((??_sortDC+1)^(0+128)+1),f
 20885  315C  0AD7               	incf	(??_sortDC+1)^(0+128),f
 20886  315D  1903               	skipnz
 20887  315E  0AD8               	incf	((??_sortDC+1)^(0+128)+1),f
 20888  315F  3009               	movlw	9
 20889  3160  00D9               	movwf	(??_sortDC+3)^(0+128)
 20890  3161  0859               	movf	(??_sortDC+3)^(0+128),w
 20891  3162  0140               	movlb	0	; select bank0
 20892  3163  00AC               	movwf	___bmul@multiplicand
 20893  3164  0141               	movlb	1	; select bank1
 20894  3165  085B               	movf	sortDC@b^(0+128),w
 20895  3166  31BE  26B0         	fcall	___bmul
 20896  3168  3E06               	addlw	6
 20897  3169  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 20898  316A  0086               	movwf	6
 20899  316B  3002               	movlw	2	; select bank5/6
 20900  316C  0087               	movwf	7
 20901  316D  0801               	movf	1,w
 20902  316E  0141               	movlb	1	; select bank1
 20903  316F  0757               	addwf	(??_sortDC+1)^(0+128),w
 20904  3170  00D2               	movwf	?_sortDC^(0+128)
 20905  3171  0858               	movf	(??_sortDC+2)^(0+128),w
 20906  3172  1803               	skipnc
 20907  3173  0A58               	incf	(??_sortDC+2)^(0+128),w
 20908  3174  00D3               	movwf	(?_sortDC^(0+128)+1)
 20909  3175  0008               	return
 20910  3176                     __end_of_sortDC:	
 20911                           
 20912                           	psect	text50
 20913  30F6                     __ptext50:	
 20914 ;; *************** function _sortDCRev *****************
 20915 ;; Defined at:
 20916 ;;		line 320 in file "system.c"
 20917 ;; Parameters:    Size  Location     Type
 20918 ;;  cmp1            2   50[BANK1 ] PTR const void 
 20919 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20920 ;;  cmp2            2   52[BANK1 ] PTR const void 
 20921 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20922 ;; Auto vars:     Size  Location     Type
 20923 ;;  b               1   59[BANK1 ] unsigned char 
 20924 ;;  a               1   58[BANK1 ] unsigned char 
 20925 ;; Return value:  Size  Location     Type
 20926 ;;                  2   50[BANK1 ] int 
 20927 ;; Registers used:
 20928 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20929 ;; Tracked objects:
 20930 ;;		On entry : 0/0
 20931 ;;		On exit  : 0/0
 20932 ;;		Unchanged: 0/0
 20933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20934 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20935 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20936 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20937 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20938 ;;Total ram usage:       10 bytes
 20939 ;; Hardware stack levels used:    1
 20940 ;; Hardware stack levels required when called:    4
 20941 ;; This function calls:
 20942 ;;		___bmul
 20943 ;; This function is called by:
 20944 ;;		_channelThing
 20945 ;;		_qsort
 20946 ;; This function uses a non-reentrant model
 20947 ;;
 20948                           
 20949                           
 20950                           ;psect for function _sortDCRev
 20951  30F6                     _sortDCRev:	
 20952                           
 20953                           ;system.c: 320: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 321: {;syste
      +                          m.c: 322:  uint8_t a = *(uint8_t *)cmp1;
 20954                           
 20955                           ;incstack = 0
 20956                           ; Regs used in _sortDCRev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20957  30F6  0141               	movlb	1	; select bank1
 20958  30F7  0852               	movf	sortDCRev@cmp1^(0+128),w
 20959  30F8  0086               	movwf	6
 20960  30F9  0853               	movf	(sortDCRev@cmp1+1)^(0+128),w
 20961  30FA  0087               	movwf	7
 20962  30FB  0801               	movf	1,w
 20963  30FC  00D6               	movwf	??_sortDCRev^(0+128)
 20964  30FD  0856               	movf	??_sortDCRev^(0+128),w
 20965  30FE  00DA               	movwf	sortDCRev@a^(0+128)
 20966                           
 20967                           ;system.c: 323:  uint8_t b = *(uint8_t *)cmp2;
 20968  30FF  0854               	movf	sortDCRev@cmp2^(0+128),w
 20969  3100  0086               	movwf	6
 20970  3101  0855               	movf	(sortDCRev@cmp2+1)^(0+128),w
 20971  3102  0087               	movwf	7
 20972  3103  0801               	movf	1,w
 20973  3104  00D6               	movwf	??_sortDCRev^(0+128)
 20974  3105  0856               	movf	??_sortDCRev^(0+128),w
 20975  3106  00DB               	movwf	sortDCRev@b^(0+128)
 20976                           
 20977                           ;system.c: 325:  return (virtChannels[a].DC - virtChannels[b].DC);
 20978  3107  3009               	movlw	9
 20979  3108  00D6               	movwf	??_sortDCRev^(0+128)
 20980  3109  0856               	movf	??_sortDCRev^(0+128),w
 20981  310A  0140               	movlb	0	; select bank0
 20982  310B  00AC               	movwf	___bmul@multiplicand
 20983  310C  0141               	movlb	1	; select bank1
 20984  310D  085B               	movf	sortDCRev@b^(0+128),w
 20985  310E  31BE  26B0  31B0   	fcall	___bmul
 20986  3111  3E06               	addlw	6
 20987  3112  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 20988  3113  0086               	movwf	6
 20989  3114  3002               	movlw	2	; select bank5/6
 20990  3115  0087               	movwf	7
 20991  3116  0801               	movf	1,w
 20992  3117  0141               	movlb	1	; select bank1
 20993  3118  00D7               	movwf	(??_sortDCRev+1)^(0+128)
 20994  3119  01D8               	clrf	((??_sortDCRev+1)^(0+128)+1)
 20995  311A  09D7               	comf	(??_sortDCRev+1)^(0+128),f
 20996  311B  09D8               	comf	((??_sortDCRev+1)^(0+128)+1),f
 20997  311C  0AD7               	incf	(??_sortDCRev+1)^(0+128),f
 20998  311D  1903               	skipnz
 20999  311E  0AD8               	incf	((??_sortDCRev+1)^(0+128)+1),f
 21000  311F  3009               	movlw	9
 21001  3120  00D9               	movwf	(??_sortDCRev+3)^(0+128)
 21002  3121  0859               	movf	(??_sortDCRev+3)^(0+128),w
 21003  3122  0140               	movlb	0	; select bank0
 21004  3123  00AC               	movwf	___bmul@multiplicand
 21005  3124  0141               	movlb	1	; select bank1
 21006  3125  085A               	movf	sortDCRev@a^(0+128),w
 21007  3126  31BE  26B0         	fcall	___bmul
 21008  3128  3E06               	addlw	6
 21009  3129  3EAA               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 21010  312A  0086               	movwf	6
 21011  312B  3002               	movlw	2	; select bank5/6
 21012  312C  0087               	movwf	7
 21013  312D  0801               	movf	1,w
 21014  312E  0141               	movlb	1	; select bank1
 21015  312F  0757               	addwf	(??_sortDCRev+1)^(0+128),w
 21016  3130  00D2               	movwf	?_sortDCRev^(0+128)
 21017  3131  0858               	movf	(??_sortDCRev+2)^(0+128),w
 21018  3132  1803               	skipnc
 21019  3133  0A58               	incf	(??_sortDCRev+2)^(0+128),w
 21020  3134  00D3               	movwf	(?_sortDCRev^(0+128)+1)
 21021  3135  0008               	return
 21022  3136                     __end_of_sortDCRev:	
 21023                           
 21024                           	psect	text51
 21025  3EB0                     __ptext51:	
 21026 ;; *************** function ___bmul *****************
 21027 ;; Defined at:
 21028 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul8.c"
 21029 ;; Parameters:    Size  Location     Type
 21030 ;;  multiplier      1    wreg     unsigned char 
 21031 ;;  multiplicand    1   12[BANK0 ] unsigned char 
 21032 ;; Auto vars:     Size  Location     Type
 21033 ;;  multiplier      1   15[BANK0 ] unsigned char 
 21034 ;;  product         1   14[BANK0 ] unsigned char 
 21035 ;; Return value:  Size  Location     Type
 21036 ;;                  1    wreg      unsigned char 
 21037 ;; Registers used:
 21038 ;;		wreg, status,2, status,0
 21039 ;; Tracked objects:
 21040 ;;		On entry : 0/0
 21041 ;;		On exit  : 0/0
 21042 ;;		Unchanged: 0/0
 21043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21044 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21047 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21048 ;;Total ram usage:        4 bytes
 21049 ;; Hardware stack levels used:    1
 21050 ;; Hardware stack levels required when called:    3
 21051 ;; This function calls:
 21052 ;;		Nothing
 21053 ;; This function is called by:
 21054 ;;		_channelView
 21055 ;;		_sortDC
 21056 ;;		_sortDCRev
 21057 ;;		_channelThing
 21058 ;;		_controller
 21059 ;;		_qsort
 21060 ;; This function uses a non-reentrant model
 21061 ;;
 21062                           
 21063                           
 21064                           ;psect for function ___bmul
 21065  3EB0                     ___bmul:	
 21066                           
 21067                           ;incstack = 0
 21068                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 21069                           ;___bmul@multiplier stored from wreg
 21070  3EB0  0140               	movlb	0	; select bank0
 21071  3EB1  00AF               	movwf	___bmul@multiplier
 21072  3EB2  01AE               	clrf	___bmul@product
 21073  3EB3                     l7197:	
 21074  3EB3  1C2F               	btfss	___bmul@multiplier,0
 21075  3EB4  2EB9               	goto	l7201
 21076  3EB5  082C               	movf	___bmul@multiplicand,w
 21077  3EB6  00AD               	movwf	??___bmul
 21078  3EB7  082D               	movf	??___bmul,w
 21079  3EB8  07AE               	addwf	___bmul@product,f
 21080  3EB9                     l7201:	
 21081  3EB9  1003               	clrc
 21082  3EBA  0DAC               	rlf	___bmul@multiplicand,f
 21083  3EBB  1003               	clrc
 21084  3EBC  0CAF               	rrf	___bmul@multiplier,f
 21085  3EBD  082F               	movf	___bmul@multiplier,w
 21086  3EBE  1D03               	btfss	3,2
 21087  3EBF  2EB3               	goto	l7197
 21088  3EC0  082E               	movf	___bmul@product,w
 21089  3EC1  0008               	return
 21090  3EC2                     __end_of___bmul:	
 21091                           
 21092                           	psect	text52
 21093  29BA                     __ptext52:	
 21094 ;; *************** function ___fltol *****************
 21095 ;; Defined at:
 21096 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\fltol.c"
 21097 ;; Parameters:    Size  Location     Type
 21098 ;;  f1              4   41[BANK1 ] unsigned char 
 21099 ;; Auto vars:     Size  Location     Type
 21100 ;;  exp1            1   55[BANK0 ] unsigned char 
 21101 ;;  sign1           1   54[BANK0 ] unsigned char 
 21102 ;; Return value:  Size  Location     Type
 21103 ;;                  4   41[BANK1 ] long 
 21104 ;; Registers used:
 21105 ;;		wreg, status,2, status,0
 21106 ;; Tracked objects:
 21107 ;;		On entry : 0/0
 21108 ;;		On exit  : 0/0
 21109 ;;		Unchanged: 0/0
 21110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21111 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21112 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21113 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21114 ;;      Totals:         0       2       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21115 ;;Total ram usage:       11 bytes
 21116 ;; Hardware stack levels used:    1
 21117 ;; Hardware stack levels required when called:    3
 21118 ;; This function calls:
 21119 ;;		Nothing
 21120 ;; This function is called by:
 21121 ;;		_checkChannelStatus
 21122 ;;		_sortCur
 21123 ;;		_ftoa
 21124 ;; This function uses a non-reentrant model
 21125 ;;
 21126                           
 21127                           
 21128                           ;psect for function ___fltol
 21129  29BA                     ___fltol:	
 21130                           
 21131                           ;incstack = 0
 21132                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 21133  29BA  0141               	movlb	1	; select bank1
 21134  29BB  0849               	movf	___fltol@f1^(0+128),w
 21135  29BC  00CD               	movwf	??___fltol^(0+128)
 21136  29BD  084A               	movf	(___fltol@f1+1)^(0+128),w
 21137  29BE  00CE               	movwf	(??___fltol^(0+128)+1)
 21138  29BF  084B               	movf	(___fltol@f1+2)^(0+128),w
 21139  29C0  00CF               	movwf	(??___fltol^(0+128)+2)
 21140  29C1  084C               	movf	(___fltol@f1+3)^(0+128),w
 21141  29C2  00D0               	movwf	(??___fltol^(0+128)+3)
 21142  29C3  1003               	clrc
 21143  29C4  0D4F               	rlf	(??___fltol^(0+128)+2),w
 21144  29C5  0D50               	rlf	(??___fltol^(0+128)+3),w
 21145  29C6  00D1               	movwf	(??___fltol+4)^(0+128)
 21146  29C7  0851               	movf	(??___fltol+4)^(0+128),w
 21147  29C8  0140               	movlb	0	; select bank0
 21148  29C9  00D7               	movwf	___fltol@exp1
 21149  29CA  0857               	movf	___fltol@exp1,w
 21150  29CB  1D03               	btfss	3,2
 21151  29CC  29D7               	goto	l9731
 21152  29CD  3000               	movlw	0
 21153  29CE  0141               	movlb	1	; select bank1
 21154  29CF  00CC               	movwf	(?___fltol+3)^(0+128)
 21155  29D0  3000               	movlw	0
 21156  29D1  00CB               	movwf	(?___fltol+2)^(0+128)
 21157  29D2  3000               	movlw	0
 21158  29D3  00CA               	movwf	(?___fltol+1)^(0+128)
 21159  29D4  3000               	movlw	0
 21160  29D5  00C9               	movwf	?___fltol^(0+128)
 21161  29D6  0008               	return
 21162  29D7                     l9731:	
 21163  29D7  0141               	movlb	1	; select bank1
 21164  29D8  0849               	movf	___fltol@f1^(0+128),w
 21165  29D9  00CD               	movwf	??___fltol^(0+128)
 21166  29DA  084A               	movf	(___fltol@f1+1)^(0+128),w
 21167  29DB  00CE               	movwf	(??___fltol^(0+128)+1)
 21168  29DC  084B               	movf	(___fltol@f1+2)^(0+128),w
 21169  29DD  00CF               	movwf	(??___fltol^(0+128)+2)
 21170  29DE  084C               	movf	(___fltol@f1+3)^(0+128),w
 21171  29DF  00D0               	movwf	(??___fltol^(0+128)+3)
 21172  29E0  301F               	movlw	31
 21173  29E1                     u12355:	
 21174  29E1  36D0               	lsrf	(??___fltol^(0+128)+3),f
 21175  29E2  0CCF               	rrf	(??___fltol^(0+128)+2),f
 21176  29E3  0CCE               	rrf	(??___fltol^(0+128)+1),f
 21177  29E4  0CCD               	rrf	??___fltol^(0+128),f
 21178  29E5  0B89               	decfsz	9,f
 21179  29E6  29E1               	goto	u12355
 21180  29E7  084D               	movf	??___fltol^(0+128),w
 21181  29E8  00D1               	movwf	(??___fltol+4)^(0+128)
 21182  29E9  0851               	movf	(??___fltol+4)^(0+128),w
 21183  29EA  0140               	movlb	0	; select bank0
 21184  29EB  00D6               	movwf	___fltol@sign1
 21185  29EC  0141               	movlb	1	; select bank1
 21186  29ED  17CB               	bsf	(___fltol@f1^(0+128)+2),7
 21187  29EE  30FF               	movlw	255
 21188  29EF  05C9               	andwf	___fltol@f1^(0+128),f
 21189  29F0  30FF               	movlw	255
 21190  29F1  05CA               	andwf	(___fltol@f1+1)^(0+128),f
 21191  29F2  30FF               	movlw	255
 21192  29F3  05CB               	andwf	(___fltol@f1+2)^(0+128),f
 21193  29F4  3000               	movlw	0
 21194  29F5  05CC               	andwf	(___fltol@f1+3)^(0+128),f
 21195  29F6  3096               	movlw	150
 21196  29F7  0140               	movlb	0	; select bank0
 21197  29F8  02D7               	subwf	___fltol@exp1,f
 21198  29F9  1FD7               	btfss	___fltol@exp1,7
 21199  29FA  2A1A               	goto	l9749
 21200  29FB  0857               	movf	___fltol@exp1,w
 21201  29FC  3A80               	xorlw	128
 21202  29FD  3E97               	addlw	151
 21203  29FE  1803               	skipnc
 21204  29FF  2A0A               	goto	l9747
 21205  2A00  3000               	movlw	0
 21206  2A01  0141               	movlb	1	; select bank1
 21207  2A02  00CC               	movwf	(?___fltol+3)^(0+128)
 21208  2A03  3000               	movlw	0
 21209  2A04  00CB               	movwf	(?___fltol+2)^(0+128)
 21210  2A05  3000               	movlw	0
 21211  2A06  00CA               	movwf	(?___fltol+1)^(0+128)
 21212  2A07  3000               	movlw	0
 21213  2A08  00C9               	movwf	?___fltol^(0+128)
 21214  2A09  0008               	return
 21215  2A0A                     l9747:	
 21216  2A0A  3001               	movlw	1
 21217  2A0B                     u12385:	
 21218  2A0B  0141               	movlb	1	; select bank1
 21219  2A0C  36CC               	lsrf	(___fltol@f1+3)^(0+128),f
 21220  2A0D  0CCB               	rrf	(___fltol@f1+2)^(0+128),f
 21221  2A0E  0CCA               	rrf	(___fltol@f1+1)^(0+128),f
 21222  2A0F  0CC9               	rrf	___fltol@f1^(0+128),f
 21223  2A10  0B89               	decfsz	9,f
 21224  2A11  2A0B               	goto	u12385
 21225  2A12  3001               	movlw	1
 21226  2A13  00CD               	movwf	??___fltol^(0+128)
 21227  2A14  084D               	movf	??___fltol^(0+128),w
 21228  2A15  0140               	movlb	0	; select bank0
 21229  2A16  07D7               	addwf	___fltol@exp1,f
 21230  2A17  1903               	btfsc	3,2
 21231  2A18  2A37               	goto	l9757
 21232  2A19  2A0A               	goto	l9747
 21233  2A1A                     l9749:	
 21234  2A1A  3020               	movlw	32
 21235  2A1B  0257               	subwf	___fltol@exp1,w
 21236  2A1C  1C03               	skipc
 21237  2A1D  2A33               	goto	l1141
 21238  2A1E  3000               	movlw	0
 21239  2A1F  0141               	movlb	1	; select bank1
 21240  2A20  00CC               	movwf	(?___fltol+3)^(0+128)
 21241  2A21  3000               	movlw	0
 21242  2A22  00CB               	movwf	(?___fltol+2)^(0+128)
 21243  2A23  3000               	movlw	0
 21244  2A24  00CA               	movwf	(?___fltol+1)^(0+128)
 21245  2A25  3000               	movlw	0
 21246  2A26  00C9               	movwf	?___fltol^(0+128)
 21247  2A27  0008               	return
 21248  2A28                     l9755:	
 21249  2A28  3001               	movlw	1
 21250  2A29                     u12415:	
 21251  2A29  0141               	movlb	1	; select bank1
 21252  2A2A  35C9               	lslf	___fltol@f1^(0+128),f
 21253  2A2B  0DCA               	rlf	(___fltol@f1+1)^(0+128),f
 21254  2A2C  0DCB               	rlf	(___fltol@f1+2)^(0+128),f
 21255  2A2D  0DCC               	rlf	(___fltol@f1+3)^(0+128),f
 21256  2A2E  0B89               	decfsz	9,f
 21257  2A2F  2A29               	goto	u12415
 21258  2A30  3001               	movlw	1
 21259  2A31  0140               	movlb	0	; select bank0
 21260  2A32  02D7               	subwf	___fltol@exp1,f
 21261  2A33                     l1141:	
 21262  2A33  0140               	movlb	0	; select bank0
 21263  2A34  0857               	movf	___fltol@exp1,w
 21264  2A35  1D03               	btfss	3,2
 21265  2A36  2A28               	goto	l9755
 21266  2A37                     l9757:	
 21267  2A37  0856               	movf	___fltol@sign1,w
 21268  2A38  1903               	btfsc	3,2
 21269  2A39  0008               	return
 21270  2A3A  0141               	movlb	1	; select bank1
 21271  2A3B  09C9               	comf	___fltol@f1^(0+128),f
 21272  2A3C  09CA               	comf	(___fltol@f1+1)^(0+128),f
 21273  2A3D  09CB               	comf	(___fltol@f1+2)^(0+128),f
 21274  2A3E  09CC               	comf	(___fltol@f1+3)^(0+128),f
 21275  2A3F  0AC9               	incf	___fltol@f1^(0+128),f
 21276  2A40  1903               	skipnz
 21277  2A41  0ACA               	incf	(___fltol@f1+1)^(0+128),f
 21278  2A42  1903               	skipnz
 21279  2A43  0ACB               	incf	(___fltol@f1+2)^(0+128),f
 21280  2A44  1903               	skipnz
 21281  2A45  0ACC               	incf	(___fltol@f1+3)^(0+128),f
 21282  2A46  0008               	return
 21283  2A47                     __end_of___fltol:	
 21284                           
 21285                           	psect	text53
 21286  1801                     __ptext53:	
 21287 ;; *************** function _memcpy *****************
 21288 ;; Defined at:
 21289 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\memcpy.c"
 21290 ;; Parameters:    Size  Location     Type
 21291 ;;  d1              1    wreg     PTR void 
 21292 ;;		 -> qsort@xbuf(60), 
 21293 ;;  s1              2   27[BANK0 ] PTR const void 
 21294 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21295 ;;  n               2   29[BANK0 ] unsigned int 
 21296 ;; Auto vars:     Size  Location     Type
 21297 ;;  d1              1   32[BANK0 ] PTR void 
 21298 ;;		 -> qsort@xbuf(60), 
 21299 ;;  s               2   34[BANK0 ] PTR const unsigned char 
 21300 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21301 ;;  d               1   36[BANK0 ] PTR unsigned char 
 21302 ;;		 -> qsort@xbuf(60), 
 21303 ;;  tmp             1   33[BANK0 ] unsigned char 
 21304 ;; Return value:  Size  Location     Type
 21305 ;;                  1    wreg      PTR void 
 21306 ;; Registers used:
 21307 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21308 ;; Tracked objects:
 21309 ;;		On entry : 0/0
 21310 ;;		On exit  : 0/0
 21311 ;;		Unchanged: 0/0
 21312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21313 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21314 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21316 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21317 ;;Total ram usage:       10 bytes
 21318 ;; Hardware stack levels used:    1
 21319 ;; Hardware stack levels required when called:    3
 21320 ;; This function calls:
 21321 ;;		Nothing
 21322 ;; This function is called by:
 21323 ;;		_qsort
 21324 ;; This function uses a non-reentrant model
 21325 ;;
 21326                           
 21327                           
 21328                           ;psect for function _memcpy
 21329  1801                     _memcpy:	
 21330                           
 21331                           ;incstack = 0
 21332                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 21333                           ;memcpy@d1 stored from wreg
 21334  1801  0140               	movlb	0	; select bank0
 21335  1802  00C0               	movwf	memcpy@d1
 21336  1803  083C               	movf	memcpy@s1+1,w
 21337  1804  00C3               	movwf	memcpy@s+1
 21338  1805  083B               	movf	memcpy@s1,w
 21339  1806  00C2               	movwf	memcpy@s
 21340  1807  0840               	movf	memcpy@d1,w
 21341  1808  00BF               	movwf	??_memcpy
 21342  1809  083F               	movf	??_memcpy,w
 21343  180A  00C4               	movwf	memcpy@d
 21344  180B                     l10323:	
 21345  180B  3001               	movlw	1
 21346  180C  02BD               	subwf	memcpy@n,f
 21347  180D  3000               	movlw	0
 21348  180E  3BBE               	subwfb	memcpy@n+1,f
 21349  180F  0A3D               	incf	memcpy@n,w
 21350  1810  1903               	btfsc	3,2
 21351  1811  0A3E               	incf	memcpy@n+1,w
 21352  1812  1903               	btfsc	3,2
 21353  1813  0008               	return
 21354  1814  0842               	movf	memcpy@s,w
 21355  1815  0086               	movwf	6
 21356  1816  0843               	movf	memcpy@s+1,w
 21357  1817  0087               	movwf	7
 21358  1818  0801               	movf	1,w
 21359  1819  00BF               	movwf	??_memcpy
 21360  181A  083F               	movf	??_memcpy,w
 21361  181B  00C1               	movwf	memcpy@tmp
 21362  181C  3001               	movlw	1
 21363  181D  07C2               	addwf	memcpy@s,f
 21364  181E  3000               	movlw	0
 21365  181F  3DC3               	addwfc	memcpy@s+1,f
 21366  1820  0841               	movf	memcpy@tmp,w
 21367  1821  00BF               	movwf	??_memcpy
 21368  1822  0844               	movf	memcpy@d,w
 21369  1823  0086               	movwf	6
 21370  1824  3001               	movlw	1	; select bank2/3
 21371  1825  0087               	movwf	7
 21372  1826  083F               	movf	??_memcpy,w
 21373  1827  0081               	movwf	1
 21374  1828  3001               	movlw	1
 21375  1829  00BF               	movwf	??_memcpy
 21376  182A  083F               	movf	??_memcpy,w
 21377  182B  07C4               	addwf	memcpy@d,f
 21378  182C  280B               	goto	l10323
 21379  182D                     __end_of_memcpy:	
 21380                           ;	Return value of _memcpy is never used
 21381                           
 21382                           
 21383                           	psect	text54
 21384  3364                     __ptext54:	
 21385 ;; *************** function ___awdiv *****************
 21386 ;; Defined at:
 21387 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
 21388 ;; Parameters:    Size  Location     Type
 21389 ;;  divisor         2   12[BANK0 ] int 
 21390 ;;  dividend        2   14[BANK0 ] int 
 21391 ;; Auto vars:     Size  Location     Type
 21392 ;;  quotient        2   19[BANK0 ] int 
 21393 ;;  sign            1   18[BANK0 ] unsigned char 
 21394 ;;  counter         1   17[BANK0 ] unsigned char 
 21395 ;; Return value:  Size  Location     Type
 21396 ;;                  2   12[BANK0 ] int 
 21397 ;; Registers used:
 21398 ;;		wreg, status,2, status,0
 21399 ;; Tracked objects:
 21400 ;;		On entry : 0/0
 21401 ;;		On exit  : 0/0
 21402 ;;		Unchanged: 0/0
 21403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21404 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21405 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21407 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21408 ;;Total ram usage:        9 bytes
 21409 ;; Hardware stack levels used:    1
 21410 ;; Hardware stack levels required when called:    3
 21411 ;; This function calls:
 21412 ;;		Nothing
 21413 ;; This function is called by:
 21414 ;;		_itoa
 21415 ;;		_qsort
 21416 ;; This function uses a non-reentrant model
 21417 ;;
 21418                           
 21419                           
 21420                           ;psect for function ___awdiv
 21421  3364                     ___awdiv:	
 21422                           
 21423                           ;incstack = 0
 21424                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 21425  3364  0140               	movlb	0	; select bank0
 21426  3365  01B2               	clrf	___awdiv@sign
 21427  3366  1FAD               	btfss	___awdiv@divisor+1,7
 21428  3367  2B6F               	goto	l9617
 21429  3368  09AC               	comf	___awdiv@divisor,f
 21430  3369  09AD               	comf	___awdiv@divisor+1,f
 21431  336A  0AAC               	incf	___awdiv@divisor,f
 21432  336B  1903               	skipnz
 21433  336C  0AAD               	incf	___awdiv@divisor+1,f
 21434  336D  01B2               	clrf	___awdiv@sign
 21435  336E  0AB2               	incf	___awdiv@sign,f
 21436  336F                     l9617:	
 21437  336F  1FAF               	btfss	___awdiv@dividend+1,7
 21438  3370  2B7A               	goto	l9623
 21439  3371  09AE               	comf	___awdiv@dividend,f
 21440  3372  09AF               	comf	___awdiv@dividend+1,f
 21441  3373  0AAE               	incf	___awdiv@dividend,f
 21442  3374  1903               	skipnz
 21443  3375  0AAF               	incf	___awdiv@dividend+1,f
 21444  3376  3001               	movlw	1
 21445  3377  00B0               	movwf	??___awdiv
 21446  3378  0830               	movf	??___awdiv,w
 21447  3379  06B2               	xorwf	___awdiv@sign,f
 21448  337A                     l9623:	
 21449  337A  01B3               	clrf	___awdiv@quotient
 21450  337B  01B4               	clrf	___awdiv@quotient+1
 21451  337C  082C               	movf	___awdiv@divisor,w
 21452  337D  042D               	iorwf	___awdiv@divisor+1,w
 21453  337E  1903               	btfsc	3,2
 21454  337F  2BA9               	goto	l9645
 21455  3380  01B1               	clrf	___awdiv@counter
 21456  3381  0AB1               	incf	___awdiv@counter,f
 21457  3382                     l9633:	
 21458  3382  1BAD               	btfsc	___awdiv@divisor+1,7
 21459  3383  2B8E               	goto	l9635
 21460  3384  3001               	movlw	1
 21461  3385                     u12125:	
 21462  3385  35AC               	lslf	___awdiv@divisor,f
 21463  3386  0DAD               	rlf	___awdiv@divisor+1,f
 21464  3387  0B89               	decfsz	9,f
 21465  3388  2B85               	goto	u12125
 21466  3389  3001               	movlw	1
 21467  338A  00B0               	movwf	??___awdiv
 21468  338B  0830               	movf	??___awdiv,w
 21469  338C  07B1               	addwf	___awdiv@counter,f
 21470  338D  2B82               	goto	l9633
 21471  338E                     l9635:	
 21472  338E  3001               	movlw	1
 21473  338F                     u12145:	
 21474  338F  35B3               	lslf	___awdiv@quotient,f
 21475  3390  0DB4               	rlf	___awdiv@quotient+1,f
 21476  3391  0B89               	decfsz	9,f
 21477  3392  2B8F               	goto	u12145
 21478  3393  082D               	movf	___awdiv@divisor+1,w
 21479  3394  022F               	subwf	___awdiv@dividend+1,w
 21480  3395  1D03               	skipz
 21481  3396  2B99               	goto	u12155
 21482  3397  082C               	movf	___awdiv@divisor,w
 21483  3398  022E               	subwf	___awdiv@dividend,w
 21484  3399                     u12155:	
 21485  3399  1C03               	skipc
 21486  339A  2BA0               	goto	l9641
 21487  339B  082C               	movf	___awdiv@divisor,w
 21488  339C  02AE               	subwf	___awdiv@dividend,f
 21489  339D  082D               	movf	___awdiv@divisor+1,w
 21490  339E  3BAF               	subwfb	___awdiv@dividend+1,f
 21491  339F  1433               	bsf	___awdiv@quotient,0
 21492  33A0                     l9641:	
 21493  33A0  3001               	movlw	1
 21494  33A1                     u12165:	
 21495  33A1  36AD               	lsrf	___awdiv@divisor+1,f
 21496  33A2  0CAC               	rrf	___awdiv@divisor,f
 21497  33A3  0B89               	decfsz	9,f
 21498  33A4  2BA1               	goto	u12165
 21499  33A5  3001               	movlw	1
 21500  33A6  02B1               	subwf	___awdiv@counter,f
 21501  33A7  1D03               	btfss	3,2
 21502  33A8  2B8E               	goto	l9635
 21503  33A9                     l9645:	
 21504  33A9  0832               	movf	___awdiv@sign,w
 21505  33AA  1903               	btfsc	3,2
 21506  33AB  2BB1               	goto	l9649
 21507  33AC  09B3               	comf	___awdiv@quotient,f
 21508  33AD  09B4               	comf	___awdiv@quotient+1,f
 21509  33AE  0AB3               	incf	___awdiv@quotient,f
 21510  33AF  1903               	skipnz
 21511  33B0  0AB4               	incf	___awdiv@quotient+1,f
 21512  33B1                     l9649:	
 21513  33B1  0834               	movf	___awdiv@quotient+1,w
 21514  33B2  00AD               	movwf	?___awdiv+1
 21515  33B3  0833               	movf	___awdiv@quotient,w
 21516  33B4  00AC               	movwf	?___awdiv
 21517  33B5  0008               	return
 21518  33B6                     __end_of___awdiv:	
 21519                           
 21520                           	psect	text55
 21521  2AD4                     __ptext55:	
 21522 ;; *************** function ___xxtofl *****************
 21523 ;; Defined at:
 21524 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\xxtofl.c"
 21525 ;; Parameters:    Size  Location     Type
 21526 ;;  sign            1    wreg     unsigned char 
 21527 ;;  val             4   27[BANK0 ] long 
 21528 ;; Auto vars:     Size  Location     Type
 21529 ;;  sign            1   35[BANK0 ] unsigned char 
 21530 ;;  arg             4   37[BANK0 ] unsigned long 
 21531 ;;  exp             1   36[BANK0 ] unsigned char 
 21532 ;; Return value:  Size  Location     Type
 21533 ;;                  4   27[BANK0 ] unsigned char 
 21534 ;; Registers used:
 21535 ;;		wreg, status,2, status,0
 21536 ;; Tracked objects:
 21537 ;;		On entry : 0/0
 21538 ;;		On exit  : 0/0
 21539 ;;		Unchanged: 0/0
 21540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21542 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21543 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21544 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21545 ;;Total ram usage:       14 bytes
 21546 ;; Hardware stack levels used:    1
 21547 ;; Hardware stack levels required when called:    3
 21548 ;; This function calls:
 21549 ;;		Nothing
 21550 ;; This function is called by:
 21551 ;;		_checkChannelStatus
 21552 ;;		_systemCheck
 21553 ;;		_getAnalogValues
 21554 ;;		_channelThing
 21555 ;;		_ftoa
 21556 ;; This function uses a non-reentrant model
 21557 ;;
 21558                           
 21559                           
 21560                           ;psect for function ___xxtofl
 21561  2AD4                     ___xxtofl:	
 21562                           
 21563                           ;incstack = 0
 21564                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 21565                           ;___xxtofl@sign stored from wreg
 21566  2AD4  0140               	movlb	0	; select bank0
 21567  2AD5  00C3               	movwf	___xxtofl@sign
 21568  2AD6  0843               	movf	___xxtofl@sign,w
 21569  2AD7  1D03               	btfss	3,2
 21570  2AD8  1FBE               	btfss	___xxtofl@val+3,7
 21571  2AD9  2AEA               	goto	l10053
 21572  2ADA  093B               	comf	___xxtofl@val,w
 21573  2ADB  00C5               	movwf	___xxtofl@arg
 21574  2ADC  093C               	comf	___xxtofl@val+1,w
 21575  2ADD  00C6               	movwf	___xxtofl@arg+1
 21576  2ADE  093D               	comf	___xxtofl@val+2,w
 21577  2ADF  00C7               	movwf	___xxtofl@arg+2
 21578  2AE0  093E               	comf	___xxtofl@val+3,w
 21579  2AE1  00C8               	movwf	___xxtofl@arg+3
 21580  2AE2  0AC5               	incf	___xxtofl@arg,f
 21581  2AE3  1903               	skipnz
 21582  2AE4  0AC6               	incf	___xxtofl@arg+1,f
 21583  2AE5  1903               	skipnz
 21584  2AE6  0AC7               	incf	___xxtofl@arg+2,f
 21585  2AE7  1903               	skipnz
 21586  2AE8  0AC8               	incf	___xxtofl@arg+3,f
 21587  2AE9  2AF2               	goto	l1356
 21588  2AEA                     l10053:	
 21589  2AEA  083E               	movf	___xxtofl@val+3,w
 21590  2AEB  00C8               	movwf	___xxtofl@arg+3
 21591  2AEC  083D               	movf	___xxtofl@val+2,w
 21592  2AED  00C7               	movwf	___xxtofl@arg+2
 21593  2AEE  083C               	movf	___xxtofl@val+1,w
 21594  2AEF  00C6               	movwf	___xxtofl@arg+1
 21595  2AF0  083B               	movf	___xxtofl@val,w
 21596  2AF1  00C5               	movwf	___xxtofl@arg
 21597  2AF2                     l1356:	
 21598  2AF2  083E               	movf	___xxtofl@val+3,w
 21599  2AF3  043D               	iorwf	___xxtofl@val+2,w
 21600  2AF4  043C               	iorwf	___xxtofl@val+1,w
 21601  2AF5  043B               	iorwf	___xxtofl@val,w
 21602  2AF6  1D03               	skipz
 21603  2AF7  2B01               	goto	l10059
 21604  2AF8  3000               	movlw	0
 21605  2AF9  00BE               	movwf	?___xxtofl+3
 21606  2AFA  3000               	movlw	0
 21607  2AFB  00BD               	movwf	?___xxtofl+2
 21608  2AFC  3000               	movlw	0
 21609  2AFD  00BC               	movwf	?___xxtofl+1
 21610  2AFE  3000               	movlw	0
 21611  2AFF  00BB               	movwf	?___xxtofl
 21612  2B00  0008               	return
 21613  2B01                     l10059:	
 21614  2B01  3096               	movlw	150
 21615  2B02  00BF               	movwf	??___xxtofl
 21616  2B03  083F               	movf	??___xxtofl,w
 21617  2B04  00C4               	movwf	___xxtofl@exp
 21618  2B05                     l10063:	
 21619  2B05  30FE               	movlw	254
 21620  2B06  0548               	andwf	___xxtofl@arg+3,w
 21621  2B07  1903               	btfsc	3,2
 21622  2B08  2B28               	goto	l1362
 21623  2B09  3001               	movlw	1
 21624  2B0A  00BF               	movwf	??___xxtofl
 21625  2B0B  083F               	movf	??___xxtofl,w
 21626  2B0C  07C4               	addwf	___xxtofl@exp,f
 21627  2B0D  3001               	movlw	1
 21628  2B0E                     u13025:	
 21629  2B0E  36C8               	lsrf	___xxtofl@arg+3,f
 21630  2B0F  0CC7               	rrf	___xxtofl@arg+2,f
 21631  2B10  0CC6               	rrf	___xxtofl@arg+1,f
 21632  2B11  0CC5               	rrf	___xxtofl@arg,f
 21633  2B12  0B89               	decfsz	9,f
 21634  2B13  2B0E               	goto	u13025
 21635  2B14  2B05               	goto	l10063
 21636  2B15                     l10065:	
 21637  2B15  3001               	movlw	1
 21638  2B16  00BF               	movwf	??___xxtofl
 21639  2B17  083F               	movf	??___xxtofl,w
 21640  2B18  07C4               	addwf	___xxtofl@exp,f
 21641  2B19  3001               	movlw	1
 21642  2B1A  07C5               	addwf	___xxtofl@arg,f
 21643  2B1B  3000               	movlw	0
 21644  2B1C  3DC6               	addwfc	___xxtofl@arg+1,f
 21645  2B1D  3000               	movlw	0
 21646  2B1E  3DC7               	addwfc	___xxtofl@arg+2,f
 21647  2B1F  3000               	movlw	0
 21648  2B20  3DC8               	addwfc	___xxtofl@arg+3,f
 21649  2B21  3001               	movlw	1
 21650  2B22                     u13045:	
 21651  2B22  36C8               	lsrf	___xxtofl@arg+3,f
 21652  2B23  0CC7               	rrf	___xxtofl@arg+2,f
 21653  2B24  0CC6               	rrf	___xxtofl@arg+1,f
 21654  2B25  0CC5               	rrf	___xxtofl@arg,f
 21655  2B26  0B89               	decfsz	9,f
 21656  2B27  2B22               	goto	u13045
 21657  2B28                     l1362:	
 21658  2B28  30FF               	movlw	255
 21659  2B29  0548               	andwf	___xxtofl@arg+3,w
 21660  2B2A  1903               	btfsc	3,2
 21661  2B2B  2B36               	goto	l10073
 21662  2B2C  2B15               	goto	l10065
 21663  2B2D                     l10071:	
 21664  2B2D  3001               	movlw	1
 21665  2B2E  02C4               	subwf	___xxtofl@exp,f
 21666  2B2F  3001               	movlw	1
 21667  2B30                     u13065:	
 21668  2B30  35C5               	lslf	___xxtofl@arg,f
 21669  2B31  0DC6               	rlf	___xxtofl@arg+1,f
 21670  2B32  0DC7               	rlf	___xxtofl@arg+2,f
 21671  2B33  0DC8               	rlf	___xxtofl@arg+3,f
 21672  2B34  0B89               	decfsz	9,f
 21673  2B35  2B30               	goto	u13065
 21674  2B36                     l10073:	
 21675  2B36  1BC7               	btfsc	___xxtofl@arg+2,7
 21676  2B37  2B3C               	goto	l1369
 21677  2B38  3002               	movlw	2
 21678  2B39  0244               	subwf	___xxtofl@exp,w
 21679  2B3A  1803               	skipnc
 21680  2B3B  2B2D               	goto	l10071
 21681  2B3C                     l1369:	
 21682  2B3C  1844               	btfsc	___xxtofl@exp,0
 21683  2B3D  2B46               	goto	l1370
 21684  2B3E  30FF               	movlw	255
 21685  2B3F  05C5               	andwf	___xxtofl@arg,f
 21686  2B40  30FF               	movlw	255
 21687  2B41  05C6               	andwf	___xxtofl@arg+1,f
 21688  2B42  307F               	movlw	127
 21689  2B43  05C7               	andwf	___xxtofl@arg+2,f
 21690  2B44  30FF               	movlw	255
 21691  2B45  05C8               	andwf	___xxtofl@arg+3,f
 21692  2B46                     l1370:	
 21693  2B46  1003               	clrc
 21694  2B47  0CC4               	rrf	___xxtofl@exp,f
 21695  2B48  0844               	movf	___xxtofl@exp,w
 21696  2B49  00BF               	movwf	??___xxtofl
 21697  2B4A  01C0               	clrf	??___xxtofl+1
 21698  2B4B  01C1               	clrf	??___xxtofl+2
 21699  2B4C  01C2               	clrf	??___xxtofl+3
 21700  2B4D  3018               	movlw	24
 21701  2B4E                     u13105:	
 21702  2B4E  35BF               	lslf	??___xxtofl,f
 21703  2B4F  0DC0               	rlf	??___xxtofl+1,f
 21704  2B50  0DC1               	rlf	??___xxtofl+2,f
 21705  2B51  0DC2               	rlf	??___xxtofl+3,f
 21706  2B52  0B89               	decfsz	9,f
 21707  2B53  2B4E               	goto	u13105
 21708  2B54  083F               	movf	??___xxtofl,w
 21709  2B55  04C5               	iorwf	___xxtofl@arg,f
 21710  2B56  0840               	movf	??___xxtofl+1,w
 21711  2B57  04C6               	iorwf	___xxtofl@arg+1,f
 21712  2B58  0841               	movf	??___xxtofl+2,w
 21713  2B59  04C7               	iorwf	___xxtofl@arg+2,f
 21714  2B5A  0842               	movf	??___xxtofl+3,w
 21715  2B5B  04C8               	iorwf	___xxtofl@arg+3,f
 21716  2B5C  0843               	movf	___xxtofl@sign,w
 21717  2B5D  1D03               	btfss	3,2
 21718  2B5E  1FBE               	btfss	___xxtofl@val+3,7
 21719  2B5F  2B61               	goto	l10087
 21720  2B60  17C8               	bsf	___xxtofl@arg+3,7
 21721  2B61                     l10087:	
 21722  2B61  0848               	movf	___xxtofl@arg+3,w
 21723  2B62  00BE               	movwf	?___xxtofl+3
 21724  2B63  0847               	movf	___xxtofl@arg+2,w
 21725  2B64  00BD               	movwf	?___xxtofl+2
 21726  2B65  0846               	movf	___xxtofl@arg+1,w
 21727  2B66  00BC               	movwf	?___xxtofl+1
 21728  2B67  0845               	movf	___xxtofl@arg,w
 21729  2B68  00BB               	movwf	?___xxtofl
 21730  2B69  0008               	return
 21731  2B6A                     __end_of___xxtofl:	
 21732                           
 21733                           	psect	text56
 21734  182D                     __ptext56:	
 21735 ;; *************** function ___flge *****************
 21736 ;; Defined at:
 21737 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\flge.c"
 21738 ;; Parameters:    Size  Location     Type
 21739 ;;  ff1             4   41[BANK1 ] unsigned char 
 21740 ;;  ff2             4   45[BANK1 ] unsigned char 
 21741 ;; Auto vars:     Size  Location     Type
 21742 ;;		None
 21743 ;; Return value:  Size  Location     Type
 21744 ;;		None               void
 21745 ;; Registers used:
 21746 ;;		wreg, status,2, status,0
 21747 ;; Tracked objects:
 21748 ;;		On entry : 0/0
 21749 ;;		On exit  : 0/0
 21750 ;;		Unchanged: 0/0
 21751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21752 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21754 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21755 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21756 ;;Total ram usage:       16 bytes
 21757 ;; Hardware stack levels used:    1
 21758 ;; Hardware stack levels required when called:    3
 21759 ;; This function calls:
 21760 ;;		Nothing
 21761 ;; This function is called by:
 21762 ;;		_main
 21763 ;;		_spinInput
 21764 ;;		_channelSetup
 21765 ;;		_setOutputPower
 21766 ;;		_checkChannelStatus
 21767 ;;		_systemCheck
 21768 ;;		_checkSensor
 21769 ;;		_channelThing
 21770 ;;		_ftoa
 21771 ;; This function uses a non-reentrant model
 21772 ;;
 21773                           
 21774                           
 21775                           ;psect for function ___flge
 21776  182D                     ___flge:	
 21777                           
 21778                           ;incstack = 0
 21779                           ; Regs used in ___flge: [wreg+status,2+status,0]
 21780  182D  3000               	movlw	0
 21781  182E  0141               	movlb	1	; select bank1
 21782  182F  0549               	andwf	___flge@ff1^(0+128),w
 21783  1830  00D1               	movwf	??___flge^(0+128)
 21784  1831  3000               	movlw	0
 21785  1832  054A               	andwf	(___flge@ff1+1)^(0+128),w
 21786  1833  00D2               	movwf	(??___flge^(0+128)+1)
 21787  1834  3080               	movlw	128
 21788  1835  054B               	andwf	(___flge@ff1+2)^(0+128),w
 21789  1836  00D3               	movwf	(??___flge^(0+128)+2)
 21790  1837  307F               	movlw	127
 21791  1838  054C               	andwf	(___flge@ff1+3)^(0+128),w
 21792  1839  00D4               	movwf	(??___flge^(0+128)+3)
 21793  183A  0854               	movf	(??___flge+3)^(0+128),w
 21794  183B  0453               	iorwf	(??___flge+2)^(0+128),w
 21795  183C  0452               	iorwf	(??___flge+1)^(0+128),w
 21796  183D  0451               	iorwf	??___flge^(0+128),w
 21797  183E  1D03               	skipz
 21798  183F  2848               	goto	l1118
 21799  1840  3000               	movlw	0
 21800  1841  00CC               	movwf	(___flge@ff1+3)^(0+128)
 21801  1842  3000               	movlw	0
 21802  1843  00CB               	movwf	(___flge@ff1+2)^(0+128)
 21803  1844  3000               	movlw	0
 21804  1845  00CA               	movwf	(___flge@ff1+1)^(0+128)
 21805  1846  3000               	movlw	0
 21806  1847  00C9               	movwf	___flge@ff1^(0+128)
 21807  1848                     l1118:	
 21808  1848  3000               	movlw	0
 21809  1849  054D               	andwf	___flge@ff2^(0+128),w
 21810  184A  00D1               	movwf	??___flge^(0+128)
 21811  184B  3000               	movlw	0
 21812  184C  054E               	andwf	(___flge@ff2+1)^(0+128),w
 21813  184D  00D2               	movwf	(??___flge^(0+128)+1)
 21814  184E  3080               	movlw	128
 21815  184F  054F               	andwf	(___flge@ff2+2)^(0+128),w
 21816  1850  00D3               	movwf	(??___flge^(0+128)+2)
 21817  1851  307F               	movlw	127
 21818  1852  0550               	andwf	(___flge@ff2+3)^(0+128),w
 21819  1853  00D4               	movwf	(??___flge^(0+128)+3)
 21820  1854  0854               	movf	(??___flge+3)^(0+128),w
 21821  1855  0453               	iorwf	(??___flge+2)^(0+128),w
 21822  1856  0452               	iorwf	(??___flge+1)^(0+128),w
 21823  1857  0451               	iorwf	??___flge^(0+128),w
 21824  1858  1D03               	skipz
 21825  1859  2862               	goto	l9697
 21826  185A  3000               	movlw	0
 21827  185B  00D0               	movwf	(___flge@ff2+3)^(0+128)
 21828  185C  3000               	movlw	0
 21829  185D  00CF               	movwf	(___flge@ff2+2)^(0+128)
 21830  185E  3000               	movlw	0
 21831  185F  00CE               	movwf	(___flge@ff2+1)^(0+128)
 21832  1860  3000               	movlw	0
 21833  1861  00CD               	movwf	___flge@ff2^(0+128)
 21834  1862                     l9697:	
 21835  1862  1FCC               	btfss	(___flge@ff1+3)^(0+128),7
 21836  1863  288B               	goto	l9701
 21837  1864  3000               	movlw	0
 21838  1865  00D1               	movwf	??___flge^(0+128)
 21839  1866  3000               	movlw	0
 21840  1867  00D2               	movwf	(??___flge^(0+128)+1)
 21841  1868  3000               	movlw	0
 21842  1869  00D3               	movwf	(??___flge^(0+128)+2)
 21843  186A  3080               	movlw	128
 21844  186B  00D4               	movwf	(??___flge^(0+128)+3)
 21845  186C  0949               	comf	___flge@ff1^(0+128),w
 21846  186D  00D5               	movwf	(??___flge+4)^(0+128)
 21847  186E  094A               	comf	(___flge@ff1+1)^(0+128),w
 21848  186F  00D6               	movwf	((??___flge+4)^(0+128)+1)
 21849  1870  094B               	comf	(___flge@ff1+2)^(0+128),w
 21850  1871  00D7               	movwf	((??___flge+4)^(0+128)+2)
 21851  1872  094C               	comf	(___flge@ff1+3)^(0+128),w
 21852  1873  00D8               	movwf	((??___flge+4)^(0+128)+3)
 21853  1874  0AD5               	incf	(??___flge+4)^(0+128),f
 21854  1875  1903               	skipnz
 21855  1876  0AD6               	incf	((??___flge+4)^(0+128)+1),f
 21856  1877  1903               	skipnz
 21857  1878  0AD7               	incf	((??___flge+4)^(0+128)+2),f
 21858  1879  1903               	skipnz
 21859  187A  0AD8               	incf	((??___flge+4)^(0+128)+3),f
 21860  187B  0855               	movf	(??___flge+4)^(0+128),w
 21861  187C  07D1               	addwf	??___flge^(0+128),f
 21862  187D  0856               	movf	(??___flge+5)^(0+128),w
 21863  187E  3DD2               	addwfc	(??___flge^(0+128)+1),f
 21864  187F  0857               	movf	(??___flge+6)^(0+128),w
 21865  1880  3DD3               	addwfc	(??___flge^(0+128)+2),f
 21866  1881  0858               	movf	(??___flge+7)^(0+128),w
 21867  1882  3DD4               	addwfc	(??___flge^(0+128)+3),f
 21868  1883  0854               	movf	(??___flge+3)^(0+128),w
 21869  1884  00CC               	movwf	(___flge@ff1+3)^(0+128)
 21870  1885  0853               	movf	(??___flge+2)^(0+128),w
 21871  1886  00CB               	movwf	(___flge@ff1+2)^(0+128)
 21872  1887  0852               	movf	(??___flge+1)^(0+128),w
 21873  1888  00CA               	movwf	(___flge@ff1+1)^(0+128)
 21874  1889  0851               	movf	??___flge^(0+128),w
 21875  188A  00C9               	movwf	___flge@ff1^(0+128)
 21876  188B                     l9701:	
 21877  188B  1FD0               	btfss	(___flge@ff2+3)^(0+128),7
 21878  188C  28B4               	goto	l9705
 21879  188D  3000               	movlw	0
 21880  188E  00D1               	movwf	??___flge^(0+128)
 21881  188F  3000               	movlw	0
 21882  1890  00D2               	movwf	(??___flge^(0+128)+1)
 21883  1891  3000               	movlw	0
 21884  1892  00D3               	movwf	(??___flge^(0+128)+2)
 21885  1893  3080               	movlw	128
 21886  1894  00D4               	movwf	(??___flge^(0+128)+3)
 21887  1895  094D               	comf	___flge@ff2^(0+128),w
 21888  1896  00D5               	movwf	(??___flge+4)^(0+128)
 21889  1897  094E               	comf	(___flge@ff2+1)^(0+128),w
 21890  1898  00D6               	movwf	((??___flge+4)^(0+128)+1)
 21891  1899  094F               	comf	(___flge@ff2+2)^(0+128),w
 21892  189A  00D7               	movwf	((??___flge+4)^(0+128)+2)
 21893  189B  0950               	comf	(___flge@ff2+3)^(0+128),w
 21894  189C  00D8               	movwf	((??___flge+4)^(0+128)+3)
 21895  189D  0AD5               	incf	(??___flge+4)^(0+128),f
 21896  189E  1903               	skipnz
 21897  189F  0AD6               	incf	((??___flge+4)^(0+128)+1),f
 21898  18A0  1903               	skipnz
 21899  18A1  0AD7               	incf	((??___flge+4)^(0+128)+2),f
 21900  18A2  1903               	skipnz
 21901  18A3  0AD8               	incf	((??___flge+4)^(0+128)+3),f
 21902  18A4  0855               	movf	(??___flge+4)^(0+128),w
 21903  18A5  07D1               	addwf	??___flge^(0+128),f
 21904  18A6  0856               	movf	(??___flge+5)^(0+128),w
 21905  18A7  3DD2               	addwfc	(??___flge^(0+128)+1),f
 21906  18A8  0857               	movf	(??___flge+6)^(0+128),w
 21907  18A9  3DD3               	addwfc	(??___flge^(0+128)+2),f
 21908  18AA  0858               	movf	(??___flge+7)^(0+128),w
 21909  18AB  3DD4               	addwfc	(??___flge^(0+128)+3),f
 21910  18AC  0854               	movf	(??___flge+3)^(0+128),w
 21911  18AD  00D0               	movwf	(___flge@ff2+3)^(0+128)
 21912  18AE  0853               	movf	(??___flge+2)^(0+128),w
 21913  18AF  00CF               	movwf	(___flge@ff2+2)^(0+128)
 21914  18B0  0852               	movf	(??___flge+1)^(0+128),w
 21915  18B1  00CE               	movwf	(___flge@ff2+1)^(0+128)
 21916  18B2  0851               	movf	??___flge^(0+128),w
 21917  18B3  00CD               	movwf	___flge@ff2^(0+128)
 21918  18B4                     l9705:	
 21919  18B4  3080               	movlw	128
 21920  18B5  06CC               	xorwf	(___flge@ff1+3)^(0+128),f
 21921  18B6  3080               	movlw	128
 21922  18B7  06D0               	xorwf	(___flge@ff2+3)^(0+128),f
 21923  18B8  0850               	movf	(___flge@ff2+3)^(0+128),w
 21924  18B9  024C               	subwf	(___flge@ff1+3)^(0+128),w
 21925  18BA  1D03               	skipz
 21926  18BB  0008               	return
 21927  18BC  084F               	movf	(___flge@ff2+2)^(0+128),w
 21928  18BD  024B               	subwf	(___flge@ff1+2)^(0+128),w
 21929  18BE  1D03               	skipz
 21930  18BF  0008               	return
 21931  18C0  084E               	movf	(___flge@ff2+1)^(0+128),w
 21932  18C1  024A               	subwf	(___flge@ff1+1)^(0+128),w
 21933  18C2  1D03               	skipz
 21934  18C3  0008               	return
 21935  18C4  084D               	movf	___flge@ff2^(0+128),w
 21936  18C5  0249               	subwf	___flge@ff1^(0+128),w
 21937  18C6  0008               	return
 21938  18C7                     __end_of___flge:	
 21939                           
 21940                           	psect	text57
 21941  00D0                     __ptext57:	
 21942 ;; *************** function _calcRequiredPower *****************
 21943 ;; Defined at:
 21944 ;;		line 249 in file "system.c"
 21945 ;; Parameters:    Size  Location     Type
 21946 ;;		None
 21947 ;; Auto vars:     Size  Location     Type
 21948 ;;  T2              4   52[BANK2 ] float 
 21949 ;;  T1              4   48[BANK2 ] float 
 21950 ;;  A               4   40[BANK2 ] float 
 21951 ;;  phi             4   36[BANK2 ] float 
 21952 ;;  d               4   32[BANK2 ] float 
 21953 ;;  Rth             4    4[BANK2 ] float 
 21954 ;;  p               4    0[BANK2 ] float 
 21955 ;;  n               1   56[BANK2 ] unsigned char 
 21956 ;; Return value:  Size  Location     Type
 21957 ;;                  1    wreg      void 
 21958 ;; Registers used:
 21959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21960 ;; Tracked objects:
 21961 ;;		On entry : 0/0
 21962 ;;		On exit  : 0/0
 21963 ;;		Unchanged: 0/0
 21964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21966 ;;      Locals:         0       0       0      57       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21967 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21968 ;;      Totals:         0       0       6      57       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21969 ;;Total ram usage:       63 bytes
 21970 ;; Hardware stack levels used:    1
 21971 ;; Hardware stack levels required when called:    5
 21972 ;; This function calls:
 21973 ;;		___fladd
 21974 ;;		___fldiv
 21975 ;;		___flmul
 21976 ;;		___flneg
 21977 ;;		___wmul
 21978 ;; This function is called by:
 21979 ;;		_main
 21980 ;; This function uses a non-reentrant model
 21981 ;;
 21982                           
 21983                           
 21984                           ;psect for function _calcRequiredPower
 21985  00D0                     _calcRequiredPower:	
 21986                           
 21987                           ;system.c: 251:  uint8_t n;;system.c: 252:  float d, A, T1, T2, phi;;system.c: 253:  flo
      +                          at p, Rth;;system.c: 255:  for (n = 0; n < 4; n++) {
 21988                           
 21989                           ;incstack = 0
 21990                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21991  00D0  0142               	movlb	2	; select bank2
 21992  00D1  01D8               	clrf	calcRequiredPower@n^(0+256)
 21993  00D2                     L23:	
 21994  00D2  3004               	movlw	4
 21995  00D3  0258               	subwf	calcRequiredPower@n^(0+256),w
 21996  00D4  1803               	btfsc	3,0
 21997  00D5  0008               	return
 21998                           
 21999                           ;system.c: 265:   d = 0.0254 * data.heater[n].lensDia;
 22000  00D6  303C               	movlw	60
 22001  00D7  0140               	movlb	0	; select bank0
 22002  00D8  00CC               	movwf	___flmul@b+3
 22003  00D9  30D0               	movlw	208
 22004  00DA  00CB               	movwf	___flmul@b+2
 22005  00DB  3013               	movlw	19
 22006  00DC  00CA               	movwf	___flmul@b+1
 22007  00DD  30A9               	movlw	169
 22008  00DE  00C9               	movwf	___flmul@b
 22009  00DF  0142               	movlb	2	; select bank2
 22010  00E0  0858               	movf	calcRequiredPower@n^(0+256),w
 22011  00E1  0141               	movlb	1	; select bank1
 22012  00E2  00C9               	movwf	??_calcRequiredPower^(0+128)
 22013  00E3  01CA               	clrf	(??_calcRequiredPower^(0+128)+1)
 22014  00E4  0849               	movf	??_calcRequiredPower^(0+128),w
 22015  00E5  0140               	movlb	0	; select bank0
 22016  00E6  00B5               	movwf	___wmul@multiplier
 22017  00E7  0141               	movlb	1	; select bank1
 22018  00E8  084A               	movf	(??_calcRequiredPower+1)^(0+128),w
 22019  00E9  0140               	movlb	0	; select bank0
 22020  00EA  00B6               	movwf	___wmul@multiplier+1
 22021  00EB  301F               	movlw	31
 22022  00EC  00B7               	movwf	___wmul@multiplicand
 22023  00ED  3000               	movlw	0
 22024  00EE  00B8               	movwf	___wmul@multiplicand+1
 22025  00EF  31BF  270A  3180   	fcall	___wmul
 22026  00F2  3074               	movlw	116
 22027  00F3  0141               	movlb	1	; select bank1
 22028  00F4  00CB               	movwf	(??_calcRequiredPower+2)^(0+128)
 22029  00F5  3027               	movlw	39
 22030  00F6  00CC               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22031  00F7  0140               	movlb	0	; select bank0
 22032  00F8  0835               	movf	?___wmul,w
 22033  00F9  0141               	movlb	1	; select bank1
 22034  00FA  074B               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22035  00FB  00CD               	movwf	(??_calcRequiredPower+4)^(0+128)
 22036  00FC  0140               	movlb	0	; select bank0
 22037  00FD  0836               	movf	?___wmul+1,w
 22038  00FE  0141               	movlb	1	; select bank1
 22039  00FF  3D4C               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22040  0100  00CE               	movwf	(??_calcRequiredPower+5)^(0+128)
 22041  0101  084D               	movf	(??_calcRequiredPower+4)^(0+128),w
 22042  0102  0086               	movwf	6
 22043  0103  084E               	movf	(??_calcRequiredPower+5)^(0+128),w
 22044  0104  0087               	movwf	7
 22045  0105  3155               	addfsr 1,21
 22046  0106  3F40               	moviw [0]fsr1
 22047  0107  0140               	movlb	0	; select bank0
 22048  0108  00CD               	movwf	___flmul@a
 22049  0109  3F41               	moviw [1]fsr1
 22050  010A  00CE               	movwf	___flmul@a+1
 22051  010B  3F42               	moviw [2]fsr1
 22052  010C  00CF               	movwf	___flmul@a+2
 22053  010D  3F43               	moviw [3]fsr1
 22054  010E  00D0               	movwf	___flmul@a+3
 22055  010F  3188  20BA  3180   	fcall	___flmul
 22056  0112  0140               	movlb	0	; select bank0
 22057  0113  084C               	movf	?___flmul+3,w
 22058  0114  0142               	movlb	2	; select bank2
 22059  0115  00C3               	movwf	(calcRequiredPower@d+3)^(0+256)
 22060  0116  0140               	movlb	0	; select bank0
 22061  0117  084B               	movf	?___flmul+2,w
 22062  0118  0142               	movlb	2	; select bank2
 22063  0119  00C2               	movwf	(calcRequiredPower@d+2)^(0+256)
 22064  011A  0140               	movlb	0	; select bank0
 22065  011B  084A               	movf	?___flmul+1,w
 22066  011C  0142               	movlb	2	; select bank2
 22067  011D  00C1               	movwf	(calcRequiredPower@d+1)^(0+256)
 22068  011E  0140               	movlb	0	; select bank0
 22069  011F  0849               	movf	?___flmul,w
 22070  0120  0142               	movlb	2	; select bank2
 22071  0121  00C0               	movwf	calcRequiredPower@d^(0+256)
 22072                           
 22073                           ;system.c: 266:   A = (3.14 * d * d) / 4;
 22074  0122  3040               	movlw	64
 22075  0123  0140               	movlb	0	; select bank0
 22076  0124  00CC               	movwf	___flmul@b+3
 22077  0125  3048               	movlw	72
 22078  0126  00CB               	movwf	___flmul@b+2
 22079  0127  30F5               	movlw	245
 22080  0128  00CA               	movwf	___flmul@b+1
 22081  0129  30C3               	movlw	195
 22082  012A  00C9               	movwf	___flmul@b
 22083  012B  0142               	movlb	2	; select bank2
 22084  012C  0843               	movf	(calcRequiredPower@d+3)^(0+256),w
 22085  012D  0140               	movlb	0	; select bank0
 22086  012E  00D0               	movwf	___flmul@a+3
 22087  012F  0142               	movlb	2	; select bank2
 22088  0130  0842               	movf	(calcRequiredPower@d+2)^(0+256),w
 22089  0131  0140               	movlb	0	; select bank0
 22090  0132  00CF               	movwf	___flmul@a+2
 22091  0133  0142               	movlb	2	; select bank2
 22092  0134  0841               	movf	(calcRequiredPower@d+1)^(0+256),w
 22093  0135  0140               	movlb	0	; select bank0
 22094  0136  00CE               	movwf	___flmul@a+1
 22095  0137  0142               	movlb	2	; select bank2
 22096  0138  0840               	movf	calcRequiredPower@d^(0+256),w
 22097  0139  0140               	movlb	0	; select bank0
 22098  013A  00CD               	movwf	___flmul@a
 22099  013B  3188  20BA  3180   	fcall	___flmul
 22100  013E  0140               	movlb	0	; select bank0
 22101  013F  084C               	movf	?___flmul+3,w
 22102  0140  0142               	movlb	2	; select bank2
 22103  0141  00CF               	movwf	(_calcRequiredPower$2563+3)^(0+256)
 22104  0142  0140               	movlb	0	; select bank0
 22105  0143  084B               	movf	?___flmul+2,w
 22106  0144  0142               	movlb	2	; select bank2
 22107  0145  00CE               	movwf	(_calcRequiredPower$2563+2)^(0+256)
 22108  0146  0140               	movlb	0	; select bank0
 22109  0147  084A               	movf	?___flmul+1,w
 22110  0148  0142               	movlb	2	; select bank2
 22111  0149  00CD               	movwf	(_calcRequiredPower$2563+1)^(0+256)
 22112  014A  0140               	movlb	0	; select bank0
 22113  014B  0849               	movf	?___flmul,w
 22114  014C  0142               	movlb	2	; select bank2
 22115  014D  00CC               	movwf	_calcRequiredPower$2563^(0+256)
 22116                           
 22117                           ;system.c: 266:   A = (3.14 * d * d) / 4;
 22118  014E  3040               	movlw	64
 22119  014F  0141               	movlb	1	; select bank1
 22120  0150  00B0               	movwf	(___fldiv@a+3)^(0+128)
 22121  0151  3080               	movlw	128
 22122  0152  00AF               	movwf	(___fldiv@a+2)^(0+128)
 22123  0153  3000               	movlw	0
 22124  0154  00AE               	movwf	(___fldiv@a+1)^(0+128)
 22125  0155  3000               	movlw	0
 22126  0156  00AD               	movwf	___fldiv@a^(0+128)
 22127  0157  0142               	movlb	2	; select bank2
 22128  0158  0843               	movf	(calcRequiredPower@d+3)^(0+256),w
 22129  0159  0140               	movlb	0	; select bank0
 22130  015A  00CC               	movwf	___flmul@b+3
 22131  015B  0142               	movlb	2	; select bank2
 22132  015C  0842               	movf	(calcRequiredPower@d+2)^(0+256),w
 22133  015D  0140               	movlb	0	; select bank0
 22134  015E  00CB               	movwf	___flmul@b+2
 22135  015F  0142               	movlb	2	; select bank2
 22136  0160  0841               	movf	(calcRequiredPower@d+1)^(0+256),w
 22137  0161  0140               	movlb	0	; select bank0
 22138  0162  00CA               	movwf	___flmul@b+1
 22139  0163  0142               	movlb	2	; select bank2
 22140  0164  0840               	movf	calcRequiredPower@d^(0+256),w
 22141  0165  0140               	movlb	0	; select bank0
 22142  0166  00C9               	movwf	___flmul@b
 22143  0167  0142               	movlb	2	; select bank2
 22144  0168  084F               	movf	(_calcRequiredPower$2563+3)^(0+256),w
 22145  0169  0140               	movlb	0	; select bank0
 22146  016A  00D0               	movwf	___flmul@a+3
 22147  016B  0142               	movlb	2	; select bank2
 22148  016C  084E               	movf	(_calcRequiredPower$2563+2)^(0+256),w
 22149  016D  0140               	movlb	0	; select bank0
 22150  016E  00CF               	movwf	___flmul@a+2
 22151  016F  0142               	movlb	2	; select bank2
 22152  0170  084D               	movf	(_calcRequiredPower$2563+1)^(0+256),w
 22153  0171  0140               	movlb	0	; select bank0
 22154  0172  00CE               	movwf	___flmul@a+1
 22155  0173  0142               	movlb	2	; select bank2
 22156  0174  084C               	movf	_calcRequiredPower$2563^(0+256),w
 22157  0175  0140               	movlb	0	; select bank0
 22158  0176  00CD               	movwf	___flmul@a
 22159  0177  3188  20BA  3180   	fcall	___flmul
 22160  017A  0140               	movlb	0	; select bank0
 22161  017B  084C               	movf	?___flmul+3,w
 22162  017C  0141               	movlb	1	; select bank1
 22163  017D  00B4               	movwf	(___fldiv@b+3)^(0+128)
 22164  017E  0140               	movlb	0	; select bank0
 22165  017F  084B               	movf	?___flmul+2,w
 22166  0180  0141               	movlb	1	; select bank1
 22167  0181  00B3               	movwf	(___fldiv@b+2)^(0+128)
 22168  0182  0140               	movlb	0	; select bank0
 22169  0183  084A               	movf	?___flmul+1,w
 22170  0184  0141               	movlb	1	; select bank1
 22171  0185  00B2               	movwf	(___fldiv@b+1)^(0+128)
 22172  0186  0140               	movlb	0	; select bank0
 22173  0187  0849               	movf	?___flmul,w
 22174  0188  0141               	movlb	1	; select bank1
 22175  0189  00B1               	movwf	___fldiv@b^(0+128)
 22176  018A  31A6  266D  3180   	fcall	___fldiv
 22177  018D  0141               	movlb	1	; select bank1
 22178  018E  0830               	movf	(?___fldiv+3)^(0+128),w
 22179  018F  0142               	movlb	2	; select bank2
 22180  0190  00CB               	movwf	(calcRequiredPower@A+3)^(0+256)
 22181  0191  0141               	movlb	1	; select bank1
 22182  0192  082F               	movf	(?___fldiv+2)^(0+128),w
 22183  0193  0142               	movlb	2	; select bank2
 22184  0194  00CA               	movwf	(calcRequiredPower@A+2)^(0+256)
 22185  0195  0141               	movlb	1	; select bank1
 22186  0196  082E               	movf	(?___fldiv+1)^(0+128),w
 22187  0197  0142               	movlb	2	; select bank2
 22188  0198  00C9               	movwf	(calcRequiredPower@A+1)^(0+256)
 22189  0199  0141               	movlb	1	; select bank1
 22190  019A  082D               	movf	?___fldiv^(0+128),w
 22191  019B  0142               	movlb	2	; select bank2
 22192  019C  00C8               	movwf	calcRequiredPower@A^(0+256)
 22193                           
 22194                           ;system.c: 268:   T1 = data.dewPointC + data.dpOffset + 273.15;
 22195  019D  304A               	movlw	74
 22196  019E  0086               	movwf	6
 22197  019F  3027               	movlw	39
 22198  01A0  0087               	movwf	7
 22199  01A1  315D               	addfsr 1,29
 22200  01A2  3F40               	moviw [0]fsr1
 22201  01A3  0141               	movlb	1	; select bank1
 22202  01A4  00B1               	movwf	___fladd@b^(0+128)
 22203  01A5  3F41               	moviw [1]fsr1
 22204  01A6  00B2               	movwf	(___fladd@b+1)^(0+128)
 22205  01A7  3F42               	moviw [2]fsr1
 22206  01A8  00B3               	movwf	(___fladd@b+2)^(0+128)
 22207  01A9  3F43               	moviw [3]fsr1
 22208  01AA  00B4               	movwf	(___fladd@b+3)^(0+128)
 22209  01AB  304A               	movlw	74
 22210  01AC  0086               	movwf	6
 22211  01AD  3027               	movlw	39
 22212  01AE  0087               	movwf	7
 22213  01AF  3148               	addfsr 1,8
 22214  01B0  3F40               	moviw [0]fsr1
 22215  01B1  00B5               	movwf	___fladd@a^(0+128)
 22216  01B2  3F41               	moviw [1]fsr1
 22217  01B3  00B6               	movwf	(___fladd@a+1)^(0+128)
 22218  01B4  3F42               	moviw [2]fsr1
 22219  01B5  00B7               	movwf	(___fladd@a+2)^(0+128)
 22220  01B6  3F43               	moviw [3]fsr1
 22221  01B7  00B8               	movwf	(___fladd@a+3)^(0+128)
 22222  01B8  319E  2606  3180   	fcall	___fladd
 22223  01BB  0141               	movlb	1	; select bank1
 22224  01BC  0834               	movf	(?___fladd+3)^(0+128),w
 22225  01BD  0142               	movlb	2	; select bank2
 22226  01BE  00AB               	movwf	(_calcRequiredPower$2564+3)^(0+256)
 22227  01BF  0141               	movlb	1	; select bank1
 22228  01C0  0833               	movf	(?___fladd+2)^(0+128),w
 22229  01C1  0142               	movlb	2	; select bank2
 22230  01C2  00AA               	movwf	(_calcRequiredPower$2564+2)^(0+256)
 22231  01C3  0141               	movlb	1	; select bank1
 22232  01C4  0832               	movf	(?___fladd+1)^(0+128),w
 22233  01C5  0142               	movlb	2	; select bank2
 22234  01C6  00A9               	movwf	(_calcRequiredPower$2564+1)^(0+256)
 22235  01C7  0141               	movlb	1	; select bank1
 22236  01C8  0831               	movf	?___fladd^(0+128),w
 22237  01C9  0142               	movlb	2	; select bank2
 22238  01CA  00A8               	movwf	_calcRequiredPower$2564^(0+256)
 22239                           
 22240                           ;system.c: 268:   T1 = data.dewPointC + data.dpOffset + 273.15;
 22241  01CB  3043               	movlw	67
 22242  01CC  0141               	movlb	1	; select bank1
 22243  01CD  00B4               	movwf	(___fladd@b+3)^(0+128)
 22244  01CE  3088               	movlw	136
 22245  01CF  00B3               	movwf	(___fladd@b+2)^(0+128)
 22246  01D0  3093               	movlw	147
 22247  01D1  00B2               	movwf	(___fladd@b+1)^(0+128)
 22248  01D2  3033               	movlw	51
 22249  01D3  00B1               	movwf	___fladd@b^(0+128)
 22250  01D4  0142               	movlb	2	; select bank2
 22251  01D5  082B               	movf	(_calcRequiredPower$2564+3)^(0+256),w
 22252  01D6  0141               	movlb	1	; select bank1
 22253  01D7  00B8               	movwf	(___fladd@a+3)^(0+128)
 22254  01D8  0142               	movlb	2	; select bank2
 22255  01D9  082A               	movf	(_calcRequiredPower$2564+2)^(0+256),w
 22256  01DA  0141               	movlb	1	; select bank1
 22257  01DB  00B7               	movwf	(___fladd@a+2)^(0+128)
 22258  01DC  0142               	movlb	2	; select bank2
 22259  01DD  0829               	movf	(_calcRequiredPower$2564+1)^(0+256),w
 22260  01DE  0141               	movlb	1	; select bank1
 22261  01DF  00B6               	movwf	(___fladd@a+1)^(0+128)
 22262  01E0  0142               	movlb	2	; select bank2
 22263  01E1  0828               	movf	_calcRequiredPower$2564^(0+256),w
 22264  01E2  0141               	movlb	1	; select bank1
 22265  01E3  00B5               	movwf	___fladd@a^(0+128)
 22266  01E4  319E  2606  3180   	fcall	___fladd
 22267  01E7  0141               	movlb	1	; select bank1
 22268  01E8  0834               	movf	(?___fladd+3)^(0+128),w
 22269  01E9  0142               	movlb	2	; select bank2
 22270  01EA  00D3               	movwf	(calcRequiredPower@T1+3)^(0+256)
 22271  01EB  0141               	movlb	1	; select bank1
 22272  01EC  0833               	movf	(?___fladd+2)^(0+128),w
 22273  01ED  0142               	movlb	2	; select bank2
 22274  01EE  00D2               	movwf	(calcRequiredPower@T1+2)^(0+256)
 22275  01EF  0141               	movlb	1	; select bank1
 22276  01F0  0832               	movf	(?___fladd+1)^(0+128),w
 22277  01F1  0142               	movlb	2	; select bank2
 22278  01F2  00D1               	movwf	(calcRequiredPower@T1+1)^(0+256)
 22279  01F3  0141               	movlb	1	; select bank1
 22280  01F4  0831               	movf	?___fladd^(0+128),w
 22281  01F5  0142               	movlb	2	; select bank2
 22282  01F6  00D0               	movwf	calcRequiredPower@T1^(0+256)
 22283                           
 22284                           ;system.c: 269:   T2 = data.skyTemp + 273.15;
 22285  01F7  3043               	movlw	67
 22286  01F8  0141               	movlb	1	; select bank1
 22287  01F9  00B4               	movwf	(___fladd@b+3)^(0+128)
 22288  01FA  3088               	movlw	136
 22289  01FB  00B3               	movwf	(___fladd@b+2)^(0+128)
 22290  01FC  3093               	movlw	147
 22291  01FD  00B2               	movwf	(___fladd@b+1)^(0+128)
 22292  01FE  3033               	movlw	51
 22293  01FF  00B1               	movwf	___fladd@b^(0+128)
 22294  0200  306B               	movlw	107
 22295  0201  0086               	movwf	6
 22296  0202  3027               	movlw	39
 22297  0203  0087               	movwf	7
 22298  0204  3F40               	moviw [0]fsr1
 22299  0205  00B5               	movwf	___fladd@a^(0+128)
 22300  0206  3F41               	moviw [1]fsr1
 22301  0207  00B6               	movwf	(___fladd@a+1)^(0+128)
 22302  0208  3F42               	moviw [2]fsr1
 22303  0209  00B7               	movwf	(___fladd@a+2)^(0+128)
 22304  020A  3F43               	moviw [3]fsr1
 22305  020B  00B8               	movwf	(___fladd@a+3)^(0+128)
 22306  020C  319E  2606  3180   	fcall	___fladd
 22307  020F  0141               	movlb	1	; select bank1
 22308  0210  0834               	movf	(?___fladd+3)^(0+128),w
 22309  0211  0142               	movlb	2	; select bank2
 22310  0212  00D7               	movwf	(calcRequiredPower@T2+3)^(0+256)
 22311  0213  0141               	movlb	1	; select bank1
 22312  0214  0833               	movf	(?___fladd+2)^(0+128),w
 22313  0215  0142               	movlb	2	; select bank2
 22314  0216  00D6               	movwf	(calcRequiredPower@T2+2)^(0+256)
 22315  0217  0141               	movlb	1	; select bank1
 22316  0218  0832               	movf	(?___fladd+1)^(0+128),w
 22317  0219  0142               	movlb	2	; select bank2
 22318  021A  00D5               	movwf	(calcRequiredPower@T2+1)^(0+256)
 22319  021B  0141               	movlb	1	; select bank1
 22320  021C  0831               	movf	?___fladd^(0+128),w
 22321  021D  0142               	movlb	2	; select bank2
 22322  021E  00D4               	movwf	calcRequiredPower@T2^(0+256)
 22323                           
 22324                           ;system.c: 271:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22325  021F  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 22326  0220  0140               	movlb	0	; select bank0
 22327  0221  00D0               	movwf	___flmul@a+3
 22328  0222  0142               	movlb	2	; select bank2
 22329  0223  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 22330  0224  0140               	movlb	0	; select bank0
 22331  0225  00CF               	movwf	___flmul@a+2
 22332  0226  0142               	movlb	2	; select bank2
 22333  0227  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 22334  0228  0140               	movlb	0	; select bank0
 22335  0229  00CE               	movwf	___flmul@a+1
 22336  022A  0142               	movlb	2	; select bank2
 22337  022B  0854               	movf	calcRequiredPower@T2^(0+256),w
 22338  022C  0140               	movlb	0	; select bank0
 22339  022D  00CD               	movwf	___flmul@a
 22340  022E  0142               	movlb	2	; select bank2
 22341  022F  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 22342  0230  0140               	movlb	0	; select bank0
 22343  0231  00CC               	movwf	___flmul@b+3
 22344  0232  0142               	movlb	2	; select bank2
 22345  0233  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 22346  0234  0140               	movlb	0	; select bank0
 22347  0235  00CB               	movwf	___flmul@b+2
 22348  0236  0142               	movlb	2	; select bank2
 22349  0237  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 22350  0238  0140               	movlb	0	; select bank0
 22351  0239  00CA               	movwf	___flmul@b+1
 22352  023A  0142               	movlb	2	; select bank2
 22353  023B  0854               	movf	calcRequiredPower@T2^(0+256),w
 22354  023C  0140               	movlb	0	; select bank0
 22355  023D  00C9               	movwf	___flmul@b
 22356  023E  3188  20BA  3180   	fcall	___flmul
 22357  0241  0140               	movlb	0	; select bank0
 22358  0242  084C               	movf	?___flmul+3,w
 22359  0243  0142               	movlb	2	; select bank2
 22360  0244  00CF               	movwf	(_calcRequiredPower$2563+3)^(0+256)
 22361  0245  0140               	movlb	0	; select bank0
 22362  0246  084B               	movf	?___flmul+2,w
 22363  0247  0142               	movlb	2	; select bank2
 22364  0248  00CE               	movwf	(_calcRequiredPower$2563+2)^(0+256)
 22365  0249  0140               	movlb	0	; select bank0
 22366  024A  084A               	movf	?___flmul+1,w
 22367  024B  0142               	movlb	2	; select bank2
 22368  024C  00CD               	movwf	(_calcRequiredPower$2563+1)^(0+256)
 22369  024D  0140               	movlb	0	; select bank0
 22370  024E  0849               	movf	?___flmul,w
 22371  024F  0142               	movlb	2	; select bank2
 22372  0250  00CC               	movwf	_calcRequiredPower$2563^(0+256)
 22373                           
 22374                           ;system.c: 271:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22375  0251  084F               	movf	(_calcRequiredPower$2563+3)^(0+256),w
 22376  0252  0140               	movlb	0	; select bank0
 22377  0253  00D0               	movwf	___flmul@a+3
 22378  0254  0142               	movlb	2	; select bank2
 22379  0255  084E               	movf	(_calcRequiredPower$2563+2)^(0+256),w
 22380  0256  0140               	movlb	0	; select bank0
 22381  0257  00CF               	movwf	___flmul@a+2
 22382  0258  0142               	movlb	2	; select bank2
 22383  0259  084D               	movf	(_calcRequiredPower$2563+1)^(0+256),w
 22384  025A  0140               	movlb	0	; select bank0
 22385  025B  00CE               	movwf	___flmul@a+1
 22386  025C  0142               	movlb	2	; select bank2
 22387  025D  084C               	movf	_calcRequiredPower$2563^(0+256),w
 22388  025E  0140               	movlb	0	; select bank0
 22389  025F  00CD               	movwf	___flmul@a
 22390  0260  0142               	movlb	2	; select bank2
 22391  0261  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 22392  0262  0140               	movlb	0	; select bank0
 22393  0263  00CC               	movwf	___flmul@b+3
 22394  0264  0142               	movlb	2	; select bank2
 22395  0265  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 22396  0266  0140               	movlb	0	; select bank0
 22397  0267  00CB               	movwf	___flmul@b+2
 22398  0268  0142               	movlb	2	; select bank2
 22399  0269  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 22400  026A  0140               	movlb	0	; select bank0
 22401  026B  00CA               	movwf	___flmul@b+1
 22402  026C  0142               	movlb	2	; select bank2
 22403  026D  0854               	movf	calcRequiredPower@T2^(0+256),w
 22404  026E  0140               	movlb	0	; select bank0
 22405  026F  00C9               	movwf	___flmul@b
 22406  0270  3188  20BA  3180   	fcall	___flmul
 22407  0273  0140               	movlb	0	; select bank0
 22408  0274  084C               	movf	?___flmul+3,w
 22409  0275  0142               	movlb	2	; select bank2
 22410  0276  00AF               	movwf	(_calcRequiredPower$2565+3)^(0+256)
 22411  0277  0140               	movlb	0	; select bank0
 22412  0278  084B               	movf	?___flmul+2,w
 22413  0279  0142               	movlb	2	; select bank2
 22414  027A  00AE               	movwf	(_calcRequiredPower$2565+2)^(0+256)
 22415  027B  0140               	movlb	0	; select bank0
 22416  027C  084A               	movf	?___flmul+1,w
 22417  027D  0142               	movlb	2	; select bank2
 22418  027E  00AD               	movwf	(_calcRequiredPower$2565+1)^(0+256)
 22419  027F  0140               	movlb	0	; select bank0
 22420  0280  0849               	movf	?___flmul,w
 22421  0281  0142               	movlb	2	; select bank2
 22422  0282  00AC               	movwf	_calcRequiredPower$2565^(0+256)
 22423                           
 22424                           ;system.c: 271:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22425  0283  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 22426  0284  0140               	movlb	0	; select bank0
 22427  0285  00CC               	movwf	___flmul@b+3
 22428  0286  0142               	movlb	2	; select bank2
 22429  0287  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 22430  0288  0140               	movlb	0	; select bank0
 22431  0289  00CB               	movwf	___flmul@b+2
 22432  028A  0142               	movlb	2	; select bank2
 22433  028B  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 22434  028C  0140               	movlb	0	; select bank0
 22435  028D  00CA               	movwf	___flmul@b+1
 22436  028E  0142               	movlb	2	; select bank2
 22437  028F  0850               	movf	calcRequiredPower@T1^(0+256),w
 22438  0290  0140               	movlb	0	; select bank0
 22439  0291  00C9               	movwf	___flmul@b
 22440  0292  0142               	movlb	2	; select bank2
 22441  0293  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 22442  0294  0140               	movlb	0	; select bank0
 22443  0295  00D0               	movwf	___flmul@a+3
 22444  0296  0142               	movlb	2	; select bank2
 22445  0297  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 22446  0298  0140               	movlb	0	; select bank0
 22447  0299  00CF               	movwf	___flmul@a+2
 22448  029A  0142               	movlb	2	; select bank2
 22449  029B  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 22450  029C  0140               	movlb	0	; select bank0
 22451  029D  00CE               	movwf	___flmul@a+1
 22452  029E  0142               	movlb	2	; select bank2
 22453  029F  0850               	movf	calcRequiredPower@T1^(0+256),w
 22454  02A0  0140               	movlb	0	; select bank0
 22455  02A1  00CD               	movwf	___flmul@a
 22456  02A2  3188  20BA  3180   	fcall	___flmul
 22457  02A5  0140               	movlb	0	; select bank0
 22458  02A6  084C               	movf	?___flmul+3,w
 22459  02A7  0142               	movlb	2	; select bank2
 22460  02A8  00B3               	movwf	(_calcRequiredPower$2566+3)^(0+256)
 22461  02A9  0140               	movlb	0	; select bank0
 22462  02AA  084B               	movf	?___flmul+2,w
 22463  02AB  0142               	movlb	2	; select bank2
 22464  02AC  00B2               	movwf	(_calcRequiredPower$2566+2)^(0+256)
 22465  02AD  0140               	movlb	0	; select bank0
 22466  02AE  084A               	movf	?___flmul+1,w
 22467  02AF  0142               	movlb	2	; select bank2
 22468  02B0  00B1               	movwf	(_calcRequiredPower$2566+1)^(0+256)
 22469  02B1  0140               	movlb	0	; select bank0
 22470  02B2  0849               	movf	?___flmul,w
 22471  02B3  0142               	movlb	2	; select bank2
 22472  02B4  00B0               	movwf	_calcRequiredPower$2566^(0+256)
 22473                           
 22474                           ;system.c: 271:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22475  02B5  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 22476  02B6  0140               	movlb	0	; select bank0
 22477  02B7  00CC               	movwf	___flmul@b+3
 22478  02B8  0142               	movlb	2	; select bank2
 22479  02B9  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 22480  02BA  0140               	movlb	0	; select bank0
 22481  02BB  00CB               	movwf	___flmul@b+2
 22482  02BC  0142               	movlb	2	; select bank2
 22483  02BD  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 22484  02BE  0140               	movlb	0	; select bank0
 22485  02BF  00CA               	movwf	___flmul@b+1
 22486  02C0  0142               	movlb	2	; select bank2
 22487  02C1  0850               	movf	calcRequiredPower@T1^(0+256),w
 22488  02C2  0140               	movlb	0	; select bank0
 22489  02C3  00C9               	movwf	___flmul@b
 22490  02C4  0142               	movlb	2	; select bank2
 22491  02C5  0833               	movf	(_calcRequiredPower$2566+3)^(0+256),w
 22492  02C6  0140               	movlb	0	; select bank0
 22493  02C7  00D0               	movwf	___flmul@a+3
 22494  02C8  0142               	movlb	2	; select bank2
 22495  02C9  0832               	movf	(_calcRequiredPower$2566+2)^(0+256),w
 22496  02CA  0140               	movlb	0	; select bank0
 22497  02CB  00CF               	movwf	___flmul@a+2
 22498  02CC  0142               	movlb	2	; select bank2
 22499  02CD  0831               	movf	(_calcRequiredPower$2566+1)^(0+256),w
 22500  02CE  0140               	movlb	0	; select bank0
 22501  02CF  00CE               	movwf	___flmul@a+1
 22502  02D0  0142               	movlb	2	; select bank2
 22503  02D1  0830               	movf	_calcRequiredPower$2566^(0+256),w
 22504  02D2  0140               	movlb	0	; select bank0
 22505  02D3  00CD               	movwf	___flmul@a
 22506  02D4  3188  20BA  3180   	fcall	___flmul
 22507  02D7  0140               	movlb	0	; select bank0
 22508  02D8  084C               	movf	?___flmul+3,w
 22509  02D9  0142               	movlb	2	; select bank2
 22510  02DA  00B7               	movwf	(_calcRequiredPower$2567+3)^(0+256)
 22511  02DB  0140               	movlb	0	; select bank0
 22512  02DC  084B               	movf	?___flmul+2,w
 22513  02DD  0142               	movlb	2	; select bank2
 22514  02DE  00B6               	movwf	(_calcRequiredPower$2567+2)^(0+256)
 22515  02DF  0140               	movlb	0	; select bank0
 22516  02E0  084A               	movf	?___flmul+1,w
 22517  02E1  0142               	movlb	2	; select bank2
 22518  02E2  00B5               	movwf	(_calcRequiredPower$2567+1)^(0+256)
 22519  02E3  0140               	movlb	0	; select bank0
 22520  02E4  0849               	movf	?___flmul,w
 22521  02E5  0142               	movlb	2	; select bank2
 22522  02E6  00B4               	movwf	_calcRequiredPower$2567^(0+256)
 22523                           
 22524                           ;system.c: 271:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22525  02E7  3033               	movlw	51
 22526  02E8  0140               	movlb	0	; select bank0
 22527  02E9  00CC               	movwf	___flmul@b+3
 22528  02EA  3067               	movlw	103
 22529  02EB  00CB               	movwf	___flmul@b+2
 22530  02EC  3059               	movlw	89
 22531  02ED  00CA               	movwf	___flmul@b+1
 22532  02EE  3032               	movlw	50
 22533  02EF  00C9               	movwf	___flmul@b
 22534  02F0  0142               	movlb	2	; select bank2
 22535  02F1  084B               	movf	(calcRequiredPower@A+3)^(0+256),w
 22536  02F2  0140               	movlb	0	; select bank0
 22537  02F3  00D0               	movwf	___flmul@a+3
 22538  02F4  0142               	movlb	2	; select bank2
 22539  02F5  084A               	movf	(calcRequiredPower@A+2)^(0+256),w
 22540  02F6  0140               	movlb	0	; select bank0
 22541  02F7  00CF               	movwf	___flmul@a+2
 22542  02F8  0142               	movlb	2	; select bank2
 22543  02F9  0849               	movf	(calcRequiredPower@A+1)^(0+256),w
 22544  02FA  0140               	movlb	0	; select bank0
 22545  02FB  00CE               	movwf	___flmul@a+1
 22546  02FC  0142               	movlb	2	; select bank2
 22547  02FD  0848               	movf	calcRequiredPower@A^(0+256),w
 22548  02FE  0140               	movlb	0	; select bank0
 22549  02FF  00CD               	movwf	___flmul@a
 22550  0300  3188  20BA  3180   	fcall	___flmul
 22551  0303  0140               	movlb	0	; select bank0
 22552  0304  084C               	movf	?___flmul+3,w
 22553  0305  0142               	movlb	2	; select bank2
 22554  0306  00BB               	movwf	(_calcRequiredPower$2568+3)^(0+256)
 22555  0307  0140               	movlb	0	; select bank0
 22556  0308  084B               	movf	?___flmul+2,w
 22557  0309  0142               	movlb	2	; select bank2
 22558  030A  00BA               	movwf	(_calcRequiredPower$2568+2)^(0+256)
 22559  030B  0140               	movlb	0	; select bank0
 22560  030C  084A               	movf	?___flmul+1,w
 22561  030D  0142               	movlb	2	; select bank2
 22562  030E  00B9               	movwf	(_calcRequiredPower$2568+1)^(0+256)
 22563  030F  0140               	movlb	0	; select bank0
 22564  0310  0849               	movf	?___flmul,w
 22565  0311  0142               	movlb	2	; select bank2
 22566  0312  00B8               	movwf	_calcRequiredPower$2568^(0+256)
 22567                           
 22568                           ;system.c: 271:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22569  0313  082F               	movf	(_calcRequiredPower$2565+3)^(0+256),w
 22570  0314  0140               	movlb	0	; select bank0
 22571  0315  00D0               	movwf	___flmul@a+3
 22572  0316  0142               	movlb	2	; select bank2
 22573  0317  082E               	movf	(_calcRequiredPower$2565+2)^(0+256),w
 22574  0318  0140               	movlb	0	; select bank0
 22575  0319  00CF               	movwf	___flmul@a+2
 22576  031A  0142               	movlb	2	; select bank2
 22577  031B  082D               	movf	(_calcRequiredPower$2565+1)^(0+256),w
 22578  031C  0140               	movlb	0	; select bank0
 22579  031D  00CE               	movwf	___flmul@a+1
 22580  031E  0142               	movlb	2	; select bank2
 22581  031F  082C               	movf	_calcRequiredPower$2565^(0+256),w
 22582  0320  0140               	movlb	0	; select bank0
 22583  0321  00CD               	movwf	___flmul@a
 22584  0322  0142               	movlb	2	; select bank2
 22585  0323  0857               	movf	(calcRequiredPower@T2+3)^(0+256),w
 22586  0324  0140               	movlb	0	; select bank0
 22587  0325  00CC               	movwf	___flmul@b+3
 22588  0326  0142               	movlb	2	; select bank2
 22589  0327  0856               	movf	(calcRequiredPower@T2+2)^(0+256),w
 22590  0328  0140               	movlb	0	; select bank0
 22591  0329  00CB               	movwf	___flmul@b+2
 22592  032A  0142               	movlb	2	; select bank2
 22593  032B  0855               	movf	(calcRequiredPower@T2+1)^(0+256),w
 22594  032C  0140               	movlb	0	; select bank0
 22595  032D  00CA               	movwf	___flmul@b+1
 22596  032E  0142               	movlb	2	; select bank2
 22597  032F  0854               	movf	calcRequiredPower@T2^(0+256),w
 22598  0330  0140               	movlb	0	; select bank0
 22599  0331  00C9               	movwf	___flmul@b
 22600  0332  3188  20BA  3180   	fcall	___flmul
 22601  0335  0140               	movlb	0	; select bank0
 22602  0336  084C               	movf	?___flmul+3,w
 22603  0337  0141               	movlb	1	; select bank1
 22604  0338  00B0               	movwf	(___flneg@f1+3)^(0+128)
 22605  0339  0140               	movlb	0	; select bank0
 22606  033A  084B               	movf	?___flmul+2,w
 22607  033B  0141               	movlb	1	; select bank1
 22608  033C  00AF               	movwf	(___flneg@f1+2)^(0+128)
 22609  033D  0140               	movlb	0	; select bank0
 22610  033E  084A               	movf	?___flmul+1,w
 22611  033F  0141               	movlb	1	; select bank1
 22612  0340  00AE               	movwf	(___flneg@f1+1)^(0+128)
 22613  0341  0140               	movlb	0	; select bank0
 22614  0342  0849               	movf	?___flmul,w
 22615  0343  0141               	movlb	1	; select bank1
 22616  0344  00AD               	movwf	___flneg@f1^(0+128)
 22617  0345  31BE  2657  3180   	fcall	___flneg
 22618  0348  0141               	movlb	1	; select bank1
 22619  0349  0830               	movf	(?___flneg+3)^(0+128),w
 22620  034A  00B4               	movwf	(___fladd@b+3)^(0+128)
 22621  034B  082F               	movf	(?___flneg+2)^(0+128),w
 22622  034C  00B3               	movwf	(___fladd@b+2)^(0+128)
 22623  034D  082E               	movf	(?___flneg+1)^(0+128),w
 22624  034E  00B2               	movwf	(___fladd@b+1)^(0+128)
 22625  034F  082D               	movf	?___flneg^(0+128),w
 22626  0350  00B1               	movwf	___fladd@b^(0+128)
 22627  0351  0142               	movlb	2	; select bank2
 22628  0352  0853               	movf	(calcRequiredPower@T1+3)^(0+256),w
 22629  0353  0140               	movlb	0	; select bank0
 22630  0354  00CC               	movwf	___flmul@b+3
 22631  0355  0142               	movlb	2	; select bank2
 22632  0356  0852               	movf	(calcRequiredPower@T1+2)^(0+256),w
 22633  0357  0140               	movlb	0	; select bank0
 22634  0358  00CB               	movwf	___flmul@b+2
 22635  0359  0142               	movlb	2	; select bank2
 22636  035A  0851               	movf	(calcRequiredPower@T1+1)^(0+256),w
 22637  035B  0140               	movlb	0	; select bank0
 22638  035C  00CA               	movwf	___flmul@b+1
 22639  035D  0142               	movlb	2	; select bank2
 22640  035E  0850               	movf	calcRequiredPower@T1^(0+256),w
 22641  035F  0140               	movlb	0	; select bank0
 22642  0360  00C9               	movwf	___flmul@b
 22643  0361  0142               	movlb	2	; select bank2
 22644  0362  0837               	movf	(_calcRequiredPower$2567+3)^(0+256),w
 22645  0363  0140               	movlb	0	; select bank0
 22646  0364  00D0               	movwf	___flmul@a+3
 22647  0365  0142               	movlb	2	; select bank2
 22648  0366  0836               	movf	(_calcRequiredPower$2567+2)^(0+256),w
 22649  0367  0140               	movlb	0	; select bank0
 22650  0368  00CF               	movwf	___flmul@a+2
 22651  0369  0142               	movlb	2	; select bank2
 22652  036A  0835               	movf	(_calcRequiredPower$2567+1)^(0+256),w
 22653  036B  0140               	movlb	0	; select bank0
 22654  036C  00CE               	movwf	___flmul@a+1
 22655  036D  0142               	movlb	2	; select bank2
 22656  036E  0834               	movf	_calcRequiredPower$2567^(0+256),w
 22657  036F  0140               	movlb	0	; select bank0
 22658  0370  00CD               	movwf	___flmul@a
 22659  0371  3188  20BA  3180   	fcall	___flmul
 22660  0374  0140               	movlb	0	; select bank0
 22661  0375  084C               	movf	?___flmul+3,w
 22662  0376  0141               	movlb	1	; select bank1
 22663  0377  00B8               	movwf	(___fladd@a+3)^(0+128)
 22664  0378  0140               	movlb	0	; select bank0
 22665  0379  084B               	movf	?___flmul+2,w
 22666  037A  0141               	movlb	1	; select bank1
 22667  037B  00B7               	movwf	(___fladd@a+2)^(0+128)
 22668  037C  0140               	movlb	0	; select bank0
 22669  037D  084A               	movf	?___flmul+1,w
 22670  037E  0141               	movlb	1	; select bank1
 22671  037F  00B6               	movwf	(___fladd@a+1)^(0+128)
 22672  0380  0140               	movlb	0	; select bank0
 22673  0381  0849               	movf	?___flmul,w
 22674  0382  0141               	movlb	1	; select bank1
 22675  0383  00B5               	movwf	___fladd@a^(0+128)
 22676  0384  319E  2606  3180   	fcall	___fladd
 22677  0387  0141               	movlb	1	; select bank1
 22678  0388  0834               	movf	(?___fladd+3)^(0+128),w
 22679  0389  0142               	movlb	2	; select bank2
 22680  038A  00BF               	movwf	(_calcRequiredPower$2569+3)^(0+256)
 22681  038B  0141               	movlb	1	; select bank1
 22682  038C  0833               	movf	(?___fladd+2)^(0+128),w
 22683  038D  0142               	movlb	2	; select bank2
 22684  038E  00BE               	movwf	(_calcRequiredPower$2569+2)^(0+256)
 22685  038F  0141               	movlb	1	; select bank1
 22686  0390  0832               	movf	(?___fladd+1)^(0+128),w
 22687  0391  0142               	movlb	2	; select bank2
 22688  0392  00BD               	movwf	(_calcRequiredPower$2569+1)^(0+256)
 22689  0393  0141               	movlb	1	; select bank1
 22690  0394  0831               	movf	?___fladd^(0+128),w
 22691  0395  0142               	movlb	2	; select bank2
 22692  0396  00BC               	movwf	_calcRequiredPower$2569^(0+256)
 22693                           
 22694                           ;system.c: 271:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22695  0397  083B               	movf	(_calcRequiredPower$2568+3)^(0+256),w
 22696  0398  0140               	movlb	0	; select bank0
 22697  0399  00CC               	movwf	___flmul@b+3
 22698  039A  0142               	movlb	2	; select bank2
 22699  039B  083A               	movf	(_calcRequiredPower$2568+2)^(0+256),w
 22700  039C  0140               	movlb	0	; select bank0
 22701  039D  00CB               	movwf	___flmul@b+2
 22702  039E  0142               	movlb	2	; select bank2
 22703  039F  0839               	movf	(_calcRequiredPower$2568+1)^(0+256),w
 22704  03A0  0140               	movlb	0	; select bank0
 22705  03A1  00CA               	movwf	___flmul@b+1
 22706  03A2  0142               	movlb	2	; select bank2
 22707  03A3  0838               	movf	_calcRequiredPower$2568^(0+256),w
 22708  03A4  0140               	movlb	0	; select bank0
 22709  03A5  00C9               	movwf	___flmul@b
 22710  03A6  0142               	movlb	2	; select bank2
 22711  03A7  083F               	movf	(_calcRequiredPower$2569+3)^(0+256),w
 22712  03A8  0140               	movlb	0	; select bank0
 22713  03A9  00D0               	movwf	___flmul@a+3
 22714  03AA  0142               	movlb	2	; select bank2
 22715  03AB  083E               	movf	(_calcRequiredPower$2569+2)^(0+256),w
 22716  03AC  0140               	movlb	0	; select bank0
 22717  03AD  00CF               	movwf	___flmul@a+2
 22718  03AE  0142               	movlb	2	; select bank2
 22719  03AF  083D               	movf	(_calcRequiredPower$2569+1)^(0+256),w
 22720  03B0  0140               	movlb	0	; select bank0
 22721  03B1  00CE               	movwf	___flmul@a+1
 22722  03B2  0142               	movlb	2	; select bank2
 22723  03B3  083C               	movf	_calcRequiredPower$2569^(0+256),w
 22724  03B4  0140               	movlb	0	; select bank0
 22725  03B5  00CD               	movwf	___flmul@a
 22726  03B6  3188  20BA  3180   	fcall	___flmul
 22727  03B9  0140               	movlb	0	; select bank0
 22728  03BA  084C               	movf	?___flmul+3,w
 22729  03BB  0142               	movlb	2	; select bank2
 22730  03BC  00C7               	movwf	(calcRequiredPower@phi+3)^(0+256)
 22731  03BD  0140               	movlb	0	; select bank0
 22732  03BE  084B               	movf	?___flmul+2,w
 22733  03BF  0142               	movlb	2	; select bank2
 22734  03C0  00C6               	movwf	(calcRequiredPower@phi+2)^(0+256)
 22735  03C1  0140               	movlb	0	; select bank0
 22736  03C2  084A               	movf	?___flmul+1,w
 22737  03C3  0142               	movlb	2	; select bank2
 22738  03C4  00C5               	movwf	(calcRequiredPower@phi+1)^(0+256)
 22739  03C5  0140               	movlb	0	; select bank0
 22740  03C6  0849               	movf	?___flmul,w
 22741  03C7  0142               	movlb	2	; select bank2
 22742  03C8  00C4               	movwf	calcRequiredPower@phi^(0+256)
 22743                           
 22744                           ;system.c: 273:   data.heater[n].Preq = phi * data.fudgeFactor;
 22745  03C9  0858               	movf	calcRequiredPower@n^(0+256),w
 22746  03CA  0141               	movlb	1	; select bank1
 22747  03CB  00C9               	movwf	??_calcRequiredPower^(0+128)
 22748  03CC  01CA               	clrf	(??_calcRequiredPower^(0+128)+1)
 22749  03CD  0849               	movf	??_calcRequiredPower^(0+128),w
 22750  03CE  0140               	movlb	0	; select bank0
 22751  03CF  00B5               	movwf	___wmul@multiplier
 22752  03D0  0141               	movlb	1	; select bank1
 22753  03D1  084A               	movf	(??_calcRequiredPower+1)^(0+128),w
 22754  03D2  0140               	movlb	0	; select bank0
 22755  03D3  00B6               	movwf	___wmul@multiplier+1
 22756  03D4  301F               	movlw	31
 22757  03D5  00B7               	movwf	___wmul@multiplicand
 22758  03D6  3000               	movlw	0
 22759  03D7  00B8               	movwf	___wmul@multiplicand+1
 22760  03D8  31BF  270A  3180   	fcall	___wmul
 22761  03DB  3074               	movlw	116
 22762  03DC  0141               	movlb	1	; select bank1
 22763  03DD  00CB               	movwf	(??_calcRequiredPower+2)^(0+128)
 22764  03DE  3027               	movlw	39
 22765  03DF  00CC               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22766  03E0  0140               	movlb	0	; select bank0
 22767  03E1  0835               	movf	?___wmul,w
 22768  03E2  0141               	movlb	1	; select bank1
 22769  03E3  074B               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22770  03E4  00CD               	movwf	(??_calcRequiredPower+4)^(0+128)
 22771  03E5  0140               	movlb	0	; select bank0
 22772  03E6  0836               	movf	?___wmul+1,w
 22773  03E7  0141               	movlb	1	; select bank1
 22774  03E8  3D4C               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22775  03E9  00CE               	movwf	(??_calcRequiredPower+5)^(0+128)
 22776  03EA  084D               	movf	(??_calcRequiredPower+4)^(0+128),w
 22777  03EB  0086               	movwf	6
 22778  03EC  084E               	movf	(??_calcRequiredPower+5)^(0+128),w
 22779  03ED  0087               	movwf	7
 22780  03EE  3148               	addfsr 1,8
 22781  03EF  0142               	movlb	2	; select bank2
 22782  03F0  0847               	movf	(calcRequiredPower@phi+3)^(0+256),w
 22783  03F1  0140               	movlb	0	; select bank0
 22784  03F2  00CC               	movwf	___flmul@b+3
 22785  03F3  0142               	movlb	2	; select bank2
 22786  03F4  0846               	movf	(calcRequiredPower@phi+2)^(0+256),w
 22787  03F5  0140               	movlb	0	; select bank0
 22788  03F6  00CB               	movwf	___flmul@b+2
 22789  03F7  0142               	movlb	2	; select bank2
 22790  03F8  0845               	movf	(calcRequiredPower@phi+1)^(0+256),w
 22791  03F9  0140               	movlb	0	; select bank0
 22792  03FA  00CA               	movwf	___flmul@b+1
 22793  03FB  0142               	movlb	2	; select bank2
 22794  03FC  0844               	movf	calcRequiredPower@phi^(0+256),w
 22795  03FD  0140               	movlb	0	; select bank0
 22796  03FE  00C9               	movwf	___flmul@b
 22797  03FF  306F               	movlw	111
 22798  0400  0084               	movwf	4
 22799  0401  3027               	movlw	39
 22800  0402  0085               	movwf	5
 22801  0403  3F00               	moviw [0]fsr0
 22802  0404  00CD               	movwf	___flmul@a
 22803  0405  3F01               	moviw [1]fsr0
 22804  0406  00CE               	movwf	___flmul@a+1
 22805  0407  3F02               	moviw [2]fsr0
 22806  0408  00CF               	movwf	___flmul@a+2
 22807  0409  3F03               	moviw [3]fsr0
 22808  040A  00D0               	movwf	___flmul@a+3
 22809  040B  3188  20BA  3180   	fcall	___flmul
 22810  040E  0140               	movlb	0	; select bank0
 22811  040F  0849               	movf	?___flmul,w
 22812  0410  3FC0               	movwi [0]fsr1
 22813  0411  084A               	movf	?___flmul+1,w
 22814  0412  3FC1               	movwi [1]fsr1
 22815  0413  084B               	movf	?___flmul+2,w
 22816  0414  3FC2               	movwi [2]fsr1
 22817  0415  084C               	movf	?___flmul+3,w
 22818  0416  3FC3               	movwi [3]fsr1
 22819                           
 22820                           ;system.c: 276:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 22821  0417  303E               	movlw	62
 22822  0418  00CC               	movwf	___flmul@b+3
 22823  0419  3023               	movlw	35
 22824  041A  00CB               	movwf	___flmul@b+2
 22825  041B  3057               	movlw	87
 22826  041C  00CA               	movwf	___flmul@b+1
 22827  041D  301D               	movlw	29
 22828  041E  00C9               	movwf	___flmul@b
 22829  041F  0142               	movlb	2	; select bank2
 22830  0420  0858               	movf	calcRequiredPower@n^(0+256),w
 22831  0421  0141               	movlb	1	; select bank1
 22832  0422  00C9               	movwf	??_calcRequiredPower^(0+128)
 22833  0423  01CA               	clrf	(??_calcRequiredPower^(0+128)+1)
 22834  0424  0849               	movf	??_calcRequiredPower^(0+128),w
 22835  0425  0140               	movlb	0	; select bank0
 22836  0426  00B5               	movwf	___wmul@multiplier
 22837  0427  0141               	movlb	1	; select bank1
 22838  0428  084A               	movf	(??_calcRequiredPower+1)^(0+128),w
 22839  0429  0140               	movlb	0	; select bank0
 22840  042A  00B6               	movwf	___wmul@multiplier+1
 22841  042B  301F               	movlw	31
 22842  042C  00B7               	movwf	___wmul@multiplicand
 22843  042D  3000               	movlw	0
 22844  042E  00B8               	movwf	___wmul@multiplicand+1
 22845  042F  31BF  270A  3180   	fcall	___wmul
 22846  0432  3074               	movlw	116
 22847  0433  0141               	movlb	1	; select bank1
 22848  0434  00CB               	movwf	(??_calcRequiredPower+2)^(0+128)
 22849  0435  3027               	movlw	39
 22850  0436  00CC               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22851  0437  0140               	movlb	0	; select bank0
 22852  0438  0835               	movf	?___wmul,w
 22853  0439  0141               	movlb	1	; select bank1
 22854  043A  074B               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22855  043B  00CD               	movwf	(??_calcRequiredPower+4)^(0+128)
 22856  043C  0140               	movlb	0	; select bank0
 22857  043D  0836               	movf	?___wmul+1,w
 22858  043E  0141               	movlb	1	; select bank1
 22859  043F  3D4C               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22860  0440  00CE               	movwf	(??_calcRequiredPower+5)^(0+128)
 22861  0441  084D               	movf	(??_calcRequiredPower+4)^(0+128),w
 22862  0442  0086               	movwf	6
 22863  0443  084E               	movf	(??_calcRequiredPower+5)^(0+128),w
 22864  0444  0087               	movwf	7
 22865  0445  3155               	addfsr 1,21
 22866  0446  3F40               	moviw [0]fsr1
 22867  0447  0140               	movlb	0	; select bank0
 22868  0448  00CD               	movwf	___flmul@a
 22869  0449  3F41               	moviw [1]fsr1
 22870  044A  00CE               	movwf	___flmul@a+1
 22871  044B  3F42               	moviw [2]fsr1
 22872  044C  00CF               	movwf	___flmul@a+2
 22873  044D  3F43               	moviw [3]fsr1
 22874  044E  00D0               	movwf	___flmul@a+3
 22875  044F  3188  20BA  3180   	fcall	___flmul
 22876  0452  0140               	movlb	0	; select bank0
 22877  0453  084C               	movf	?___flmul+3,w
 22878  0454  0142               	movlb	2	; select bank2
 22879  0455  00A3               	movwf	(calcRequiredPower@p+3)^(0+256)
 22880  0456  0140               	movlb	0	; select bank0
 22881  0457  084B               	movf	?___flmul+2,w
 22882  0458  0142               	movlb	2	; select bank2
 22883  0459  00A2               	movwf	(calcRequiredPower@p+2)^(0+256)
 22884  045A  0140               	movlb	0	; select bank0
 22885  045B  084A               	movf	?___flmul+1,w
 22886  045C  0142               	movlb	2	; select bank2
 22887  045D  00A1               	movwf	(calcRequiredPower@p+1)^(0+256)
 22888  045E  0140               	movlb	0	; select bank0
 22889  045F  0849               	movf	?___flmul,w
 22890  0460  0142               	movlb	2	; select bank2
 22891  0461  00A0               	movwf	calcRequiredPower@p^(0+256)
 22892                           
 22893                           ;system.c: 277:   A = p * 0.03;
 22894  0462  303C               	movlw	60
 22895  0463  0140               	movlb	0	; select bank0
 22896  0464  00CC               	movwf	___flmul@b+3
 22897  0465  30F5               	movlw	245
 22898  0466  00CB               	movwf	___flmul@b+2
 22899  0467  30C2               	movlw	194
 22900  0468  00CA               	movwf	___flmul@b+1
 22901  0469  308F               	movlw	143
 22902  046A  00C9               	movwf	___flmul@b
 22903  046B  0142               	movlb	2	; select bank2
 22904  046C  0823               	movf	(calcRequiredPower@p+3)^(0+256),w
 22905  046D  0140               	movlb	0	; select bank0
 22906  046E  00D0               	movwf	___flmul@a+3
 22907  046F  0142               	movlb	2	; select bank2
 22908  0470  0822               	movf	(calcRequiredPower@p+2)^(0+256),w
 22909  0471  0140               	movlb	0	; select bank0
 22910  0472  00CF               	movwf	___flmul@a+2
 22911  0473  0142               	movlb	2	; select bank2
 22912  0474  0821               	movf	(calcRequiredPower@p+1)^(0+256),w
 22913  0475  0140               	movlb	0	; select bank0
 22914  0476  00CE               	movwf	___flmul@a+1
 22915  0477  0142               	movlb	2	; select bank2
 22916  0478  0820               	movf	calcRequiredPower@p^(0+256),w
 22917  0479  0140               	movlb	0	; select bank0
 22918  047A  00CD               	movwf	___flmul@a
 22919  047B  3188  20BA  3180   	fcall	___flmul
 22920  047E  0140               	movlb	0	; select bank0
 22921  047F  084C               	movf	?___flmul+3,w
 22922  0480  0142               	movlb	2	; select bank2
 22923  0481  00CB               	movwf	(calcRequiredPower@A+3)^(0+256)
 22924  0482  0140               	movlb	0	; select bank0
 22925  0483  084B               	movf	?___flmul+2,w
 22926  0484  0142               	movlb	2	; select bank2
 22927  0485  00CA               	movwf	(calcRequiredPower@A+2)^(0+256)
 22928  0486  0140               	movlb	0	; select bank0
 22929  0487  084A               	movf	?___flmul+1,w
 22930  0488  0142               	movlb	2	; select bank2
 22931  0489  00C9               	movwf	(calcRequiredPower@A+1)^(0+256)
 22932  048A  0140               	movlb	0	; select bank0
 22933  048B  0849               	movf	?___flmul,w
 22934  048C  0142               	movlb	2	; select bank2
 22935  048D  00C8               	movwf	calcRequiredPower@A^(0+256)
 22936                           
 22937                           ;system.c: 279:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22938  048E  303F               	movlw	63
 22939  048F  0140               	movlb	0	; select bank0
 22940  0490  00CC               	movwf	___flmul@b+3
 22941  0491  3059               	movlw	89
 22942  0492  00CB               	movwf	___flmul@b+2
 22943  0493  3099               	movlw	153
 22944  0494  00CA               	movwf	___flmul@b+1
 22945  0495  309A               	movlw	154
 22946  0496  00C9               	movwf	___flmul@b
 22947  0497  3040               	movlw	64
 22948  0498  0141               	movlb	1	; select bank1
 22949  0499  00B0               	movwf	(___fldiv@a+3)^(0+128)
 22950  049A  3000               	movlw	0
 22951  049B  00AF               	movwf	(___fldiv@a+2)^(0+128)
 22952  049C  3000               	movlw	0
 22953  049D  00AE               	movwf	(___fldiv@a+1)^(0+128)
 22954  049E  3000               	movlw	0
 22955  049F  00AD               	movwf	___fldiv@a^(0+128)
 22956  04A0  0142               	movlb	2	; select bank2
 22957  04A1  0858               	movf	calcRequiredPower@n^(0+256),w
 22958  04A2  0141               	movlb	1	; select bank1
 22959  04A3  00C9               	movwf	??_calcRequiredPower^(0+128)
 22960  04A4  01CA               	clrf	(??_calcRequiredPower^(0+128)+1)
 22961  04A5  0849               	movf	??_calcRequiredPower^(0+128),w
 22962  04A6  0140               	movlb	0	; select bank0
 22963  04A7  00B5               	movwf	___wmul@multiplier
 22964  04A8  0141               	movlb	1	; select bank1
 22965  04A9  084A               	movf	(??_calcRequiredPower+1)^(0+128),w
 22966  04AA  0140               	movlb	0	; select bank0
 22967  04AB  00B6               	movwf	___wmul@multiplier+1
 22968  04AC  301F               	movlw	31
 22969  04AD  00B7               	movwf	___wmul@multiplicand
 22970  04AE  3000               	movlw	0
 22971  04AF  00B8               	movwf	___wmul@multiplicand+1
 22972  04B0  31BF  270A  3180   	fcall	___wmul
 22973  04B3  3074               	movlw	116
 22974  04B4  0141               	movlb	1	; select bank1
 22975  04B5  00CB               	movwf	(??_calcRequiredPower+2)^(0+128)
 22976  04B6  3027               	movlw	39
 22977  04B7  00CC               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22978  04B8  0140               	movlb	0	; select bank0
 22979  04B9  0835               	movf	?___wmul,w
 22980  04BA  0141               	movlb	1	; select bank1
 22981  04BB  074B               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22982  04BC  00CD               	movwf	(??_calcRequiredPower+4)^(0+128)
 22983  04BD  0140               	movlb	0	; select bank0
 22984  04BE  0836               	movf	?___wmul+1,w
 22985  04BF  0141               	movlb	1	; select bank1
 22986  04C0  3D4C               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22987  04C1  00CE               	movwf	(??_calcRequiredPower+5)^(0+128)
 22988  04C2  084D               	movf	(??_calcRequiredPower+4)^(0+128),w
 22989  04C3  0086               	movwf	6
 22990  04C4  084E               	movf	(??_calcRequiredPower+5)^(0+128),w
 22991  04C5  0087               	movwf	7
 22992  04C6  3155               	addfsr 1,21
 22993  04C7  3F40               	moviw [0]fsr1
 22994  04C8  00B1               	movwf	___fldiv@b^(0+128)
 22995  04C9  3F41               	moviw [1]fsr1
 22996  04CA  00B2               	movwf	(___fldiv@b+1)^(0+128)
 22997  04CB  3F42               	moviw [2]fsr1
 22998  04CC  00B3               	movwf	(___fldiv@b+2)^(0+128)
 22999  04CD  3F43               	moviw [3]fsr1
 23000  04CE  00B4               	movwf	(___fldiv@b+3)^(0+128)
 23001  04CF  31A6  266D  3180   	fcall	___fldiv
 23002  04D2  0141               	movlb	1	; select bank1
 23003  04D3  0830               	movf	(?___fldiv+3)^(0+128),w
 23004  04D4  0140               	movlb	0	; select bank0
 23005  04D5  00D0               	movwf	___flmul@a+3
 23006  04D6  0141               	movlb	1	; select bank1
 23007  04D7  082F               	movf	(?___fldiv+2)^(0+128),w
 23008  04D8  0140               	movlb	0	; select bank0
 23009  04D9  00CF               	movwf	___flmul@a+2
 23010  04DA  0141               	movlb	1	; select bank1
 23011  04DB  082E               	movf	(?___fldiv+1)^(0+128),w
 23012  04DC  0140               	movlb	0	; select bank0
 23013  04DD  00CE               	movwf	___flmul@a+1
 23014  04DE  0141               	movlb	1	; select bank1
 23015  04DF  082D               	movf	?___fldiv^(0+128),w
 23016  04E0  0140               	movlb	0	; select bank0
 23017  04E1  00CD               	movwf	___flmul@a
 23018  04E2  3188  20BA  3180   	fcall	___flmul
 23019  04E5  0140               	movlb	0	; select bank0
 23020  04E6  084C               	movf	?___flmul+3,w
 23021  04E7  0142               	movlb	2	; select bank2
 23022  04E8  00CF               	movwf	(_calcRequiredPower$2563+3)^(0+256)
 23023  04E9  0140               	movlb	0	; select bank0
 23024  04EA  084B               	movf	?___flmul+2,w
 23025  04EB  0142               	movlb	2	; select bank2
 23026  04EC  00CE               	movwf	(_calcRequiredPower$2563+2)^(0+256)
 23027  04ED  0140               	movlb	0	; select bank0
 23028  04EE  084A               	movf	?___flmul+1,w
 23029  04EF  0142               	movlb	2	; select bank2
 23030  04F0  00CD               	movwf	(_calcRequiredPower$2563+1)^(0+256)
 23031  04F1  0140               	movlb	0	; select bank0
 23032  04F2  0849               	movf	?___flmul,w
 23033  04F3  0142               	movlb	2	; select bank2
 23034  04F4  00CC               	movwf	_calcRequiredPower$2563^(0+256)
 23035                           
 23036                           ;system.c: 279:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 23037  04F5  084B               	movf	(calcRequiredPower@A+3)^(0+256),w
 23038  04F6  0140               	movlb	0	; select bank0
 23039  04F7  00CC               	movwf	___flmul@b+3
 23040  04F8  0142               	movlb	2	; select bank2
 23041  04F9  084A               	movf	(calcRequiredPower@A+2)^(0+256),w
 23042  04FA  0140               	movlb	0	; select bank0
 23043  04FB  00CB               	movwf	___flmul@b+2
 23044  04FC  0142               	movlb	2	; select bank2
 23045  04FD  0849               	movf	(calcRequiredPower@A+1)^(0+256),w
 23046  04FE  0140               	movlb	0	; select bank0
 23047  04FF  00CA               	movwf	___flmul@b+1
 23048  0500  0142               	movlb	2	; select bank2
 23049  0501  0848               	movf	calcRequiredPower@A^(0+256),w
 23050  0502  0140               	movlb	0	; select bank0
 23051  0503  00C9               	movwf	___flmul@b
 23052  0504  0142               	movlb	2	; select bank2
 23053  0505  084F               	movf	(_calcRequiredPower$2563+3)^(0+256),w
 23054  0506  0140               	movlb	0	; select bank0
 23055  0507  00D0               	movwf	___flmul@a+3
 23056  0508  0142               	movlb	2	; select bank2
 23057  0509  084E               	movf	(_calcRequiredPower$2563+2)^(0+256),w
 23058  050A  0140               	movlb	0	; select bank0
 23059  050B  00CF               	movwf	___flmul@a+2
 23060  050C  0142               	movlb	2	; select bank2
 23061  050D  084D               	movf	(_calcRequiredPower$2563+1)^(0+256),w
 23062  050E  0140               	movlb	0	; select bank0
 23063  050F  00CE               	movwf	___flmul@a+1
 23064  0510  0142               	movlb	2	; select bank2
 23065  0511  084C               	movf	_calcRequiredPower$2563^(0+256),w
 23066  0512  0140               	movlb	0	; select bank0
 23067  0513  00CD               	movwf	___flmul@a
 23068  0514  3188  20BA  3180   	fcall	___flmul
 23069  0517  0140               	movlb	0	; select bank0
 23070  0518  084C               	movf	?___flmul+3,w
 23071  0519  0142               	movlb	2	; select bank2
 23072  051A  00A7               	movwf	(calcRequiredPower@Rth+3)^(0+256)
 23073  051B  0140               	movlb	0	; select bank0
 23074  051C  084B               	movf	?___flmul+2,w
 23075  051D  0142               	movlb	2	; select bank2
 23076  051E  00A6               	movwf	(calcRequiredPower@Rth+2)^(0+256)
 23077  051F  0140               	movlb	0	; select bank0
 23078  0520  084A               	movf	?___flmul+1,w
 23079  0521  0142               	movlb	2	; select bank2
 23080  0522  00A5               	movwf	(calcRequiredPower@Rth+1)^(0+256)
 23081  0523  0140               	movlb	0	; select bank0
 23082  0524  0849               	movf	?___flmul,w
 23083  0525  0142               	movlb	2	; select bank2
 23084  0526  00A4               	movwf	calcRequiredPower@Rth^(0+256)
 23085                           
 23086                           ;system.c: 281:   data.heater[n].dt = phi * Rth - data.dewPointC;
 23087  0527  0858               	movf	calcRequiredPower@n^(0+256),w
 23088  0528  0141               	movlb	1	; select bank1
 23089  0529  00C9               	movwf	??_calcRequiredPower^(0+128)
 23090  052A  01CA               	clrf	(??_calcRequiredPower^(0+128)+1)
 23091  052B  0849               	movf	??_calcRequiredPower^(0+128),w
 23092  052C  0140               	movlb	0	; select bank0
 23093  052D  00B5               	movwf	___wmul@multiplier
 23094  052E  0141               	movlb	1	; select bank1
 23095  052F  084A               	movf	(??_calcRequiredPower+1)^(0+128),w
 23096  0530  0140               	movlb	0	; select bank0
 23097  0531  00B6               	movwf	___wmul@multiplier+1
 23098  0532  301F               	movlw	31
 23099  0533  00B7               	movwf	___wmul@multiplicand
 23100  0534  3000               	movlw	0
 23101  0535  00B8               	movwf	___wmul@multiplicand+1
 23102  0536  31BF  270A  3180   	fcall	___wmul
 23103  0539  3074               	movlw	116
 23104  053A  0141               	movlb	1	; select bank1
 23105  053B  00CB               	movwf	(??_calcRequiredPower+2)^(0+128)
 23106  053C  3027               	movlw	39
 23107  053D  00CC               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 23108  053E  0140               	movlb	0	; select bank0
 23109  053F  0835               	movf	?___wmul,w
 23110  0540  0141               	movlb	1	; select bank1
 23111  0541  074B               	addwf	(??_calcRequiredPower+2)^(0+128),w
 23112  0542  00CD               	movwf	(??_calcRequiredPower+4)^(0+128)
 23113  0543  0140               	movlb	0	; select bank0
 23114  0544  0836               	movf	?___wmul+1,w
 23115  0545  0141               	movlb	1	; select bank1
 23116  0546  3D4C               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 23117  0547  00CE               	movwf	(??_calcRequiredPower+5)^(0+128)
 23118  0548  084D               	movf	(??_calcRequiredPower+4)^(0+128),w
 23119  0549  0086               	movwf	6
 23120  054A  084E               	movf	(??_calcRequiredPower+5)^(0+128),w
 23121  054B  0087               	movwf	7
 23122  054C  3159               	addfsr 1,25
 23123  054D  304A               	movlw	74
 23124  054E  0084               	movwf	4
 23125  054F  3027               	movlw	39
 23126  0550  0085               	movwf	5
 23127  0551  3108               	addfsr 0,8
 23128  0552  3F00               	moviw [0]fsr0
 23129  0553  00AD               	movwf	___flneg@f1^(0+128)
 23130  0554  3F01               	moviw [1]fsr0
 23131  0555  00AE               	movwf	(___flneg@f1+1)^(0+128)
 23132  0556  3F02               	moviw [2]fsr0
 23133  0557  00AF               	movwf	(___flneg@f1+2)^(0+128)
 23134  0558  3F03               	moviw [3]fsr0
 23135  0559  00B0               	movwf	(___flneg@f1+3)^(0+128)
 23136  055A  31BE  2657  3180   	fcall	___flneg
 23137  055D  0141               	movlb	1	; select bank1
 23138  055E  0830               	movf	(?___flneg+3)^(0+128),w
 23139  055F  00B4               	movwf	(___fladd@b+3)^(0+128)
 23140  0560  082F               	movf	(?___flneg+2)^(0+128),w
 23141  0561  00B3               	movwf	(___fladd@b+2)^(0+128)
 23142  0562  082E               	movf	(?___flneg+1)^(0+128),w
 23143  0563  00B2               	movwf	(___fladd@b+1)^(0+128)
 23144  0564  082D               	movf	?___flneg^(0+128),w
 23145  0565  00B1               	movwf	___fladd@b^(0+128)
 23146  0566  0142               	movlb	2	; select bank2
 23147  0567  0827               	movf	(calcRequiredPower@Rth+3)^(0+256),w
 23148  0568  0140               	movlb	0	; select bank0
 23149  0569  00CC               	movwf	___flmul@b+3
 23150  056A  0142               	movlb	2	; select bank2
 23151  056B  0826               	movf	(calcRequiredPower@Rth+2)^(0+256),w
 23152  056C  0140               	movlb	0	; select bank0
 23153  056D  00CB               	movwf	___flmul@b+2
 23154  056E  0142               	movlb	2	; select bank2
 23155  056F  0825               	movf	(calcRequiredPower@Rth+1)^(0+256),w
 23156  0570  0140               	movlb	0	; select bank0
 23157  0571  00CA               	movwf	___flmul@b+1
 23158  0572  0142               	movlb	2	; select bank2
 23159  0573  0824               	movf	calcRequiredPower@Rth^(0+256),w
 23160  0574  0140               	movlb	0	; select bank0
 23161  0575  00C9               	movwf	___flmul@b
 23162  0576  0142               	movlb	2	; select bank2
 23163  0577  0847               	movf	(calcRequiredPower@phi+3)^(0+256),w
 23164  0578  0140               	movlb	0	; select bank0
 23165  0579  00D0               	movwf	___flmul@a+3
 23166  057A  0142               	movlb	2	; select bank2
 23167  057B  0846               	movf	(calcRequiredPower@phi+2)^(0+256),w
 23168  057C  0140               	movlb	0	; select bank0
 23169  057D  00CF               	movwf	___flmul@a+2
 23170  057E  0142               	movlb	2	; select bank2
 23171  057F  0845               	movf	(calcRequiredPower@phi+1)^(0+256),w
 23172  0580  0140               	movlb	0	; select bank0
 23173  0581  00CE               	movwf	___flmul@a+1
 23174  0582  0142               	movlb	2	; select bank2
 23175  0583  0844               	movf	calcRequiredPower@phi^(0+256),w
 23176  0584  0140               	movlb	0	; select bank0
 23177  0585  00CD               	movwf	___flmul@a
 23178  0586  3188  20BA  3180   	fcall	___flmul
 23179  0589  0140               	movlb	0	; select bank0
 23180  058A  084C               	movf	?___flmul+3,w
 23181  058B  0141               	movlb	1	; select bank1
 23182  058C  00B8               	movwf	(___fladd@a+3)^(0+128)
 23183  058D  0140               	movlb	0	; select bank0
 23184  058E  084B               	movf	?___flmul+2,w
 23185  058F  0141               	movlb	1	; select bank1
 23186  0590  00B7               	movwf	(___fladd@a+2)^(0+128)
 23187  0591  0140               	movlb	0	; select bank0
 23188  0592  084A               	movf	?___flmul+1,w
 23189  0593  0141               	movlb	1	; select bank1
 23190  0594  00B6               	movwf	(___fladd@a+1)^(0+128)
 23191  0595  0140               	movlb	0	; select bank0
 23192  0596  0849               	movf	?___flmul,w
 23193  0597  0141               	movlb	1	; select bank1
 23194  0598  00B5               	movwf	___fladd@a^(0+128)
 23195  0599  319E  2606  3180   	fcall	___fladd
 23196  059C  0141               	movlb	1	; select bank1
 23197  059D  0831               	movf	?___fladd^(0+128),w
 23198  059E  3FC0               	movwi [0]fsr1
 23199  059F  0832               	movf	(?___fladd+1)^(0+128),w
 23200  05A0  3FC1               	movwi [1]fsr1
 23201  05A1  0833               	movf	(?___fladd+2)^(0+128),w
 23202  05A2  3FC2               	movwi [2]fsr1
 23203  05A3  0834               	movf	(?___fladd+3)^(0+128),w
 23204  05A4  3FC3               	movwi [3]fsr1
 23205                           
 23206                           ;system.c: 282:  }
 23207  05A5  3001               	movlw	1
 23208  05A6  00C9               	movwf	??_calcRequiredPower^(0+128)
 23209  05A7  0849               	movf	??_calcRequiredPower^(0+128),w
 23210  05A8  0142               	movlb	2	; select bank2
 23211  05A9  07D8               	addwf	calcRequiredPower@n^(0+256),f
 23212  05AA  28D2               	goto	L23
 23213  05AB                     __end_of_calcRequiredPower:	
 23214                           
 23215                           	psect	text58
 23216  3F0A                     __ptext58:	
 23217 ;; *************** function ___wmul *****************
 23218 ;; Defined at:
 23219 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
 23220 ;; Parameters:    Size  Location     Type
 23221 ;;  multiplier      2   21[BANK0 ] unsigned int 
 23222 ;;  multiplicand    2   23[BANK0 ] unsigned int 
 23223 ;; Auto vars:     Size  Location     Type
 23224 ;;  product         2   25[BANK0 ] unsigned int 
 23225 ;; Return value:  Size  Location     Type
 23226 ;;                  2   21[BANK0 ] unsigned int 
 23227 ;; Registers used:
 23228 ;;		wreg, status,2, status,0
 23229 ;; Tracked objects:
 23230 ;;		On entry : 0/0
 23231 ;;		On exit  : 0/0
 23232 ;;		Unchanged: 0/0
 23233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23234 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23235 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23237 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23238 ;;Total ram usage:        6 bytes
 23239 ;; Hardware stack levels used:    1
 23240 ;; Hardware stack levels required when called:    3
 23241 ;; This function calls:
 23242 ;;		Nothing
 23243 ;; This function is called by:
 23244 ;;		_initGlobalData
 23245 ;;		_channelView
 23246 ;;		_channelSetup
 23247 ;;		_setOutputPower
 23248 ;;		_setLensDia
 23249 ;;		_getNextState
 23250 ;;		_returnToPage
 23251 ;;		_checkChannelStatus
 23252 ;;		_calcRequiredPower
 23253 ;;		_channelThing
 23254 ;;		_ftoa
 23255 ;;		_qsort
 23256 ;; This function uses a non-reentrant model
 23257 ;;
 23258                           
 23259                           
 23260                           ;psect for function ___wmul
 23261  3F0A                     ___wmul:	
 23262                           
 23263                           ;incstack = 0
 23264                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 23265  3F0A  0140               	movlb	0	; select bank0
 23266  3F0B  01B9               	clrf	___wmul@product
 23267  3F0C  01BA               	clrf	___wmul@product+1
 23268  3F0D                     l9597:	
 23269  3F0D  1C35               	btfss	___wmul@multiplier,0
 23270  3F0E  2F13               	goto	l940
 23271  3F0F  0837               	movf	___wmul@multiplicand,w
 23272  3F10  07B9               	addwf	___wmul@product,f
 23273  3F11  0838               	movf	___wmul@multiplicand+1,w
 23274  3F12  3DBA               	addwfc	___wmul@product+1,f
 23275  3F13                     l940:	
 23276  3F13  3001               	movlw	1
 23277  3F14                     u12065:	
 23278  3F14  35B7               	lslf	___wmul@multiplicand,f
 23279  3F15  0DB8               	rlf	___wmul@multiplicand+1,f
 23280  3F16  0B89               	decfsz	9,f
 23281  3F17  2F14               	goto	u12065
 23282  3F18  3001               	movlw	1
 23283  3F19                     u12075:	
 23284  3F19  36B6               	lsrf	___wmul@multiplier+1,f
 23285  3F1A  0CB5               	rrf	___wmul@multiplier,f
 23286  3F1B  0B89               	decfsz	9,f
 23287  3F1C  2F19               	goto	u12075
 23288  3F1D  0835               	movf	___wmul@multiplier,w
 23289  3F1E  0436               	iorwf	___wmul@multiplier+1,w
 23290  3F1F  1D03               	btfss	3,2
 23291  3F20  2F0D               	goto	l9597
 23292  3F21  083A               	movf	___wmul@product+1,w
 23293  3F22  00B6               	movwf	?___wmul+1
 23294  3F23  0839               	movf	___wmul@product,w
 23295  3F24  00B5               	movwf	?___wmul
 23296  3F25  0008               	return
 23297  3F26                     __end_of___wmul:	
 23298                           
 23299                           	psect	text59
 23300  3E57                     __ptext59:	
 23301 ;; *************** function ___flneg *****************
 23302 ;; Defined at:
 23303 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\flneg.c"
 23304 ;; Parameters:    Size  Location     Type
 23305 ;;  f1              4   13[BANK1 ] unsigned int 
 23306 ;; Auto vars:     Size  Location     Type
 23307 ;;		None
 23308 ;; Return value:  Size  Location     Type
 23309 ;;                  4   13[BANK1 ] unsigned int 
 23310 ;; Registers used:
 23311 ;;		wreg
 23312 ;; Tracked objects:
 23313 ;;		On entry : 0/0
 23314 ;;		On exit  : 0/0
 23315 ;;		Unchanged: 0/0
 23316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23317 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23320 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23321 ;;Total ram usage:        4 bytes
 23322 ;; Hardware stack levels used:    1
 23323 ;; Hardware stack levels required when called:    3
 23324 ;; This function calls:
 23325 ;;		Nothing
 23326 ;; This function is called by:
 23327 ;;		_calcRequiredPower
 23328 ;;		_sortCur
 23329 ;;		_ftoa
 23330 ;; This function uses a non-reentrant model
 23331 ;;
 23332                           
 23333                           
 23334                           ;psect for function ___flneg
 23335  3E57                     ___flneg:	
 23336                           
 23337                           ;incstack = 0
 23338                           ; Regs used in ___flneg: [wreg]
 23339  3E57  0141               	movlb	1	; select bank1
 23340  3E58  0830               	movf	(___flneg@f1+3)^(0+128),w
 23341  3E59  042F               	iorwf	(___flneg@f1+2)^(0+128),w
 23342  3E5A  042E               	iorwf	(___flneg@f1+1)^(0+128),w
 23343  3E5B  042D               	iorwf	___flneg@f1^(0+128),w
 23344  3E5C  1903               	skipnz
 23345  3E5D  0008               	return
 23346  3E5E  3080               	movlw	128
 23347  3E5F  06B0               	xorwf	(___flneg@f1+3)^(0+128),f
 23348  3E60  0008               	return
 23349  3E61                     __end_of___flneg:	
 23350                           
 23351                           	psect	text60
 23352  08BA                     __ptext60:	
 23353 ;; *************** function ___flmul *****************
 23354 ;; Defined at:
 23355 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcmul.c"
 23356 ;; Parameters:    Size  Location     Type
 23357 ;;  b               4   41[BANK0 ] unsigned int 
 23358 ;;  a               4   45[BANK0 ] unsigned int 
 23359 ;; Auto vars:     Size  Location     Type
 23360 ;;  prod            4    7[BANK1 ] struct .
 23361 ;;  grs             4    3[BANK1 ] unsigned long 
 23362 ;;  temp            2   11[BANK1 ] struct .
 23363 ;;  bexp            1    2[BANK1 ] unsigned char 
 23364 ;;  aexp            1    1[BANK1 ] unsigned char 
 23365 ;;  sign            1    0[BANK1 ] unsigned char 
 23366 ;; Return value:  Size  Location     Type
 23367 ;;                  4   41[BANK0 ] unsigned char 
 23368 ;; Registers used:
 23369 ;;		wreg, status,2, status,0, pclath, cstack
 23370 ;; Tracked objects:
 23371 ;;		On entry : 0/0
 23372 ;;		On exit  : 0/0
 23373 ;;		Unchanged: 0/0
 23374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23375 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23376 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23377 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23378 ;;      Totals:         0      13      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23379 ;;Total ram usage:       26 bytes
 23380 ;; Hardware stack levels used:    1
 23381 ;; Hardware stack levels required when called:    4
 23382 ;; This function calls:
 23383 ;;		__Umul8_16
 23384 ;; This function is called by:
 23385 ;;		_checkChannelStatus
 23386 ;;		_systemCheck
 23387 ;;		_calcRequiredPower
 23388 ;;		_getAnalogValues
 23389 ;;		_channelThing
 23390 ;;		_ftoa
 23391 ;; This function uses a non-reentrant model
 23392 ;;
 23393                           
 23394                           
 23395                           ;psect for function ___flmul
 23396  08BA                     ___flmul:	
 23397                           
 23398                           ;incstack = 0
 23399                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 23400  08BA  0140               	movlb	0	; select bank0
 23401  08BB  084C               	movf	___flmul@b+3,w
 23402  08BC  3980               	andlw	128
 23403  08BD  00D1               	movwf	??___flmul
 23404  08BE  0851               	movf	??___flmul,w
 23405  08BF  0141               	movlb	1	; select bank1
 23406  08C0  00A0               	movwf	___flmul@sign^(0+128)
 23407  08C1  0140               	movlb	0	; select bank0
 23408  08C2  354C               	lslf	___flmul@b+3,w
 23409  08C3  00D1               	movwf	??___flmul
 23410  08C4  0851               	movf	??___flmul,w
 23411  08C5  0141               	movlb	1	; select bank1
 23412  08C6  00A2               	movwf	___flmul@bexp^(0+128)
 23413  08C7  0140               	movlb	0	; select bank0
 23414  08C8  1FCB               	btfss	___flmul@b+2,7
 23415  08C9  28CC               	goto	l9915
 23416  08CA  0141               	movlb	1	; select bank1
 23417  08CB  1422               	bsf	___flmul@bexp^(0+128),0
 23418  08CC                     l9915:	
 23419  08CC  0141               	movlb	1	; select bank1
 23420  08CD  0822               	movf	___flmul@bexp^(0+128),w
 23421  08CE  1903               	btfsc	3,2
 23422  08CF  28DF               	goto	l9923
 23423  08D0  0A22               	incf	___flmul@bexp^(0+128),w
 23424  08D1  1D03               	btfss	3,2
 23425  08D2  28DC               	goto	l9921
 23426  08D3  3000               	movlw	0
 23427  08D4  0140               	movlb	0	; select bank0
 23428  08D5  00CC               	movwf	___flmul@b+3
 23429  08D6  3000               	movlw	0
 23430  08D7  00CB               	movwf	___flmul@b+2
 23431  08D8  3000               	movlw	0
 23432  08D9  00CA               	movwf	___flmul@b+1
 23433  08DA  3000               	movlw	0
 23434  08DB  00C9               	movwf	___flmul@b
 23435  08DC                     l9921:	
 23436  08DC  0140               	movlb	0	; select bank0
 23437  08DD  17CB               	bsf	___flmul@b+2,7
 23438  08DE  28E8               	goto	l9925
 23439  08DF                     l9923:	
 23440  08DF  3000               	movlw	0
 23441  08E0  0140               	movlb	0	; select bank0
 23442  08E1  00CC               	movwf	___flmul@b+3
 23443  08E2  3000               	movlw	0
 23444  08E3  00CB               	movwf	___flmul@b+2
 23445  08E4  3000               	movlw	0
 23446  08E5  00CA               	movwf	___flmul@b+1
 23447  08E6  3000               	movlw	0
 23448  08E7  00C9               	movwf	___flmul@b
 23449  08E8                     l9925:	
 23450  08E8  0850               	movf	___flmul@a+3,w
 23451  08E9  3980               	andlw	128
 23452  08EA  00D1               	movwf	??___flmul
 23453  08EB  0851               	movf	??___flmul,w
 23454  08EC  0141               	movlb	1	; select bank1
 23455  08ED  06A0               	xorwf	___flmul@sign^(0+128),f
 23456  08EE  0140               	movlb	0	; select bank0
 23457  08EF  3550               	lslf	___flmul@a+3,w
 23458  08F0  00D1               	movwf	??___flmul
 23459  08F1  0851               	movf	??___flmul,w
 23460  08F2  0141               	movlb	1	; select bank1
 23461  08F3  00A1               	movwf	___flmul@aexp^(0+128)
 23462  08F4  0140               	movlb	0	; select bank0
 23463  08F5  1FCF               	btfss	___flmul@a+2,7
 23464  08F6  28F9               	goto	l9933
 23465  08F7  0141               	movlb	1	; select bank1
 23466  08F8  1421               	bsf	___flmul@aexp^(0+128),0
 23467  08F9                     l9933:	
 23468  08F9  0141               	movlb	1	; select bank1
 23469  08FA  0821               	movf	___flmul@aexp^(0+128),w
 23470  08FB  1903               	btfsc	3,2
 23471  08FC  290C               	goto	l9941
 23472  08FD  0A21               	incf	___flmul@aexp^(0+128),w
 23473  08FE  1D03               	btfss	3,2
 23474  08FF  2909               	goto	l9939
 23475  0900  3000               	movlw	0
 23476  0901  0140               	movlb	0	; select bank0
 23477  0902  00D0               	movwf	___flmul@a+3
 23478  0903  3000               	movlw	0
 23479  0904  00CF               	movwf	___flmul@a+2
 23480  0905  3000               	movlw	0
 23481  0906  00CE               	movwf	___flmul@a+1
 23482  0907  3000               	movlw	0
 23483  0908  00CD               	movwf	___flmul@a
 23484  0909                     l9939:	
 23485  0909  0140               	movlb	0	; select bank0
 23486  090A  17CF               	bsf	___flmul@a+2,7
 23487  090B  2915               	goto	l9943
 23488  090C                     l9941:	
 23489  090C  3000               	movlw	0
 23490  090D  0140               	movlb	0	; select bank0
 23491  090E  00D0               	movwf	___flmul@a+3
 23492  090F  3000               	movlw	0
 23493  0910  00CF               	movwf	___flmul@a+2
 23494  0911  3000               	movlw	0
 23495  0912  00CE               	movwf	___flmul@a+1
 23496  0913  3000               	movlw	0
 23497  0914  00CD               	movwf	___flmul@a
 23498  0915                     l9943:	
 23499  0915  0141               	movlb	1	; select bank1
 23500  0916  0821               	movf	___flmul@aexp^(0+128),w
 23501  0917  1D03               	btfss	3,2
 23502  0918  0822               	movf	___flmul@bexp^(0+128),w
 23503  0919  1D03               	btfss	3,2
 23504  091A  2925               	goto	l9951
 23505  091B  3000               	movlw	0
 23506  091C  0140               	movlb	0	; select bank0
 23507  091D  00CC               	movwf	?___flmul+3
 23508  091E  3000               	movlw	0
 23509  091F  00CB               	movwf	?___flmul+2
 23510  0920  3000               	movlw	0
 23511  0921  00CA               	movwf	?___flmul+1
 23512  0922  3000               	movlw	0
 23513  0923  00C9               	movwf	?___flmul
 23514  0924  0008               	return
 23515  0925                     l9951:	
 23516  0925  0140               	movlb	0	; select bank0
 23517  0926  0849               	movf	___flmul@b,w
 23518  0927  00D1               	movwf	??___flmul
 23519  0928  0851               	movf	??___flmul,w
 23520  0929  00AC               	movwf	__Umul8_16@multiplicand
 23521  092A  084F               	movf	___flmul@a+2,w
 23522  092B  31BF  2762  3188   	fcall	__Umul8_16
 23523  092E  0140               	movlb	0	; select bank0
 23524  092F  082D               	movf	?__Umul8_16+1,w
 23525  0930  0141               	movlb	1	; select bank1
 23526  0931  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23527  0932  0140               	movlb	0	; select bank0
 23528  0933  082C               	movf	?__Umul8_16,w
 23529  0934  0141               	movlb	1	; select bank1
 23530  0935  00AB               	movwf	___flmul@temp^(0+128)
 23531  0936  082B               	movf	___flmul@temp^(0+128),w
 23532  0937  0140               	movlb	0	; select bank0
 23533  0938  00D1               	movwf	??___flmul
 23534  0939  01D2               	clrf	??___flmul+1
 23535  093A  01D3               	clrf	??___flmul+2
 23536  093B  01D4               	clrf	??___flmul+3
 23537  093C  0854               	movf	??___flmul+3,w
 23538  093D  0141               	movlb	1	; select bank1
 23539  093E  00A6               	movwf	(___flmul@grs+3)^(0+128)
 23540  093F  0140               	movlb	0	; select bank0
 23541  0940  0853               	movf	??___flmul+2,w
 23542  0941  0141               	movlb	1	; select bank1
 23543  0942  00A5               	movwf	(___flmul@grs+2)^(0+128)
 23544  0943  0140               	movlb	0	; select bank0
 23545  0944  0852               	movf	??___flmul+1,w
 23546  0945  0141               	movlb	1	; select bank1
 23547  0946  00A4               	movwf	(___flmul@grs+1)^(0+128)
 23548  0947  0140               	movlb	0	; select bank0
 23549  0948  0851               	movf	??___flmul,w
 23550  0949  0141               	movlb	1	; select bank1
 23551  094A  00A3               	movwf	___flmul@grs^(0+128)
 23552  094B  082C               	movf	(___flmul@temp^(0+128)+1),w
 23553  094C  0140               	movlb	0	; select bank0
 23554  094D  00D1               	movwf	??___flmul
 23555  094E  01D2               	clrf	??___flmul+1
 23556  094F  01D3               	clrf	??___flmul+2
 23557  0950  01D4               	clrf	??___flmul+3
 23558  0951  0854               	movf	??___flmul+3,w
 23559  0952  0141               	movlb	1	; select bank1
 23560  0953  00AA               	movwf	(___flmul@prod+3)^(0+128)
 23561  0954  0140               	movlb	0	; select bank0
 23562  0955  0853               	movf	??___flmul+2,w
 23563  0956  0141               	movlb	1	; select bank1
 23564  0957  00A9               	movwf	(___flmul@prod+2)^(0+128)
 23565  0958  0140               	movlb	0	; select bank0
 23566  0959  0852               	movf	??___flmul+1,w
 23567  095A  0141               	movlb	1	; select bank1
 23568  095B  00A8               	movwf	(___flmul@prod+1)^(0+128)
 23569  095C  0140               	movlb	0	; select bank0
 23570  095D  0851               	movf	??___flmul,w
 23571  095E  0141               	movlb	1	; select bank1
 23572  095F  00A7               	movwf	___flmul@prod^(0+128)
 23573  0960  0140               	movlb	0	; select bank0
 23574  0961  084A               	movf	___flmul@b+1,w
 23575  0962  00D1               	movwf	??___flmul
 23576  0963  0851               	movf	??___flmul,w
 23577  0964  00AC               	movwf	__Umul8_16@multiplicand
 23578  0965  084E               	movf	___flmul@a+1,w
 23579  0966  31BF  2762  3188   	fcall	__Umul8_16
 23580  0969  0140               	movlb	0	; select bank0
 23581  096A  082D               	movf	?__Umul8_16+1,w
 23582  096B  0141               	movlb	1	; select bank1
 23583  096C  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23584  096D  0140               	movlb	0	; select bank0
 23585  096E  082C               	movf	?__Umul8_16,w
 23586  096F  0141               	movlb	1	; select bank1
 23587  0970  00AB               	movwf	___flmul@temp^(0+128)
 23588  0971  082B               	movf	___flmul@temp^(0+128),w
 23589  0972  0140               	movlb	0	; select bank0
 23590  0973  00D1               	movwf	??___flmul
 23591  0974  01D2               	clrf	??___flmul+1
 23592  0975  01D3               	clrf	??___flmul+2
 23593  0976  01D4               	clrf	??___flmul+3
 23594  0977  0851               	movf	??___flmul,w
 23595  0978  0141               	movlb	1	; select bank1
 23596  0979  07A3               	addwf	___flmul@grs^(0+128),f
 23597  097A  0140               	movlb	0	; select bank0
 23598  097B  0852               	movf	??___flmul+1,w
 23599  097C  0141               	movlb	1	; select bank1
 23600  097D  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
 23601  097E  0140               	movlb	0	; select bank0
 23602  097F  0853               	movf	??___flmul+2,w
 23603  0980  0141               	movlb	1	; select bank1
 23604  0981  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
 23605  0982  0140               	movlb	0	; select bank0
 23606  0983  0854               	movf	??___flmul+3,w
 23607  0984  0141               	movlb	1	; select bank1
 23608  0985  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
 23609  0986  082C               	movf	(___flmul@temp^(0+128)+1),w
 23610  0987  0140               	movlb	0	; select bank0
 23611  0988  00D1               	movwf	??___flmul
 23612  0989  01D2               	clrf	??___flmul+1
 23613  098A  01D3               	clrf	??___flmul+2
 23614  098B  01D4               	clrf	??___flmul+3
 23615  098C  0851               	movf	??___flmul,w
 23616  098D  0141               	movlb	1	; select bank1
 23617  098E  07A7               	addwf	___flmul@prod^(0+128),f
 23618  098F  0140               	movlb	0	; select bank0
 23619  0990  0852               	movf	??___flmul+1,w
 23620  0991  0141               	movlb	1	; select bank1
 23621  0992  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
 23622  0993  0140               	movlb	0	; select bank0
 23623  0994  0853               	movf	??___flmul+2,w
 23624  0995  0141               	movlb	1	; select bank1
 23625  0996  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
 23626  0997  0140               	movlb	0	; select bank0
 23627  0998  0854               	movf	??___flmul+3,w
 23628  0999  0141               	movlb	1	; select bank1
 23629  099A  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
 23630  099B  0140               	movlb	0	; select bank0
 23631  099C  084B               	movf	___flmul@b+2,w
 23632  099D  00D1               	movwf	??___flmul
 23633  099E  0851               	movf	??___flmul,w
 23634  099F  00AC               	movwf	__Umul8_16@multiplicand
 23635  09A0  084D               	movf	___flmul@a,w
 23636  09A1  31BF  2762  3188   	fcall	__Umul8_16
 23637  09A4  0140               	movlb	0	; select bank0
 23638  09A5  082D               	movf	?__Umul8_16+1,w
 23639  09A6  0141               	movlb	1	; select bank1
 23640  09A7  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23641  09A8  0140               	movlb	0	; select bank0
 23642  09A9  082C               	movf	?__Umul8_16,w
 23643  09AA  0141               	movlb	1	; select bank1
 23644  09AB  00AB               	movwf	___flmul@temp^(0+128)
 23645  09AC  082B               	movf	___flmul@temp^(0+128),w
 23646  09AD  0140               	movlb	0	; select bank0
 23647  09AE  00D1               	movwf	??___flmul
 23648  09AF  01D2               	clrf	??___flmul+1
 23649  09B0  01D3               	clrf	??___flmul+2
 23650  09B1  01D4               	clrf	??___flmul+3
 23651  09B2  0851               	movf	??___flmul,w
 23652  09B3  0141               	movlb	1	; select bank1
 23653  09B4  07A3               	addwf	___flmul@grs^(0+128),f
 23654  09B5  0140               	movlb	0	; select bank0
 23655  09B6  0852               	movf	??___flmul+1,w
 23656  09B7  0141               	movlb	1	; select bank1
 23657  09B8  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
 23658  09B9  0140               	movlb	0	; select bank0
 23659  09BA  0853               	movf	??___flmul+2,w
 23660  09BB  0141               	movlb	1	; select bank1
 23661  09BC  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
 23662  09BD  0140               	movlb	0	; select bank0
 23663  09BE  0854               	movf	??___flmul+3,w
 23664  09BF  0141               	movlb	1	; select bank1
 23665  09C0  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
 23666  09C1  082C               	movf	(___flmul@temp^(0+128)+1),w
 23667  09C2  0140               	movlb	0	; select bank0
 23668  09C3  00D1               	movwf	??___flmul
 23669  09C4  01D2               	clrf	??___flmul+1
 23670  09C5  01D3               	clrf	??___flmul+2
 23671  09C6  01D4               	clrf	??___flmul+3
 23672  09C7  0851               	movf	??___flmul,w
 23673  09C8  0141               	movlb	1	; select bank1
 23674  09C9  07A7               	addwf	___flmul@prod^(0+128),f
 23675  09CA  0140               	movlb	0	; select bank0
 23676  09CB  0852               	movf	??___flmul+1,w
 23677  09CC  0141               	movlb	1	; select bank1
 23678  09CD  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
 23679  09CE  0140               	movlb	0	; select bank0
 23680  09CF  0853               	movf	??___flmul+2,w
 23681  09D0  0141               	movlb	1	; select bank1
 23682  09D1  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
 23683  09D2  0140               	movlb	0	; select bank0
 23684  09D3  0854               	movf	??___flmul+3,w
 23685  09D4  0141               	movlb	1	; select bank1
 23686  09D5  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
 23687  09D6  3008               	movlw	8
 23688  09D7                     u12815:	
 23689  09D7  35A3               	lslf	___flmul@grs^(0+128),f
 23690  09D8  0DA4               	rlf	(___flmul@grs+1)^(0+128),f
 23691  09D9  0DA5               	rlf	(___flmul@grs+2)^(0+128),f
 23692  09DA  0DA6               	rlf	(___flmul@grs+3)^(0+128),f
 23693  09DB  0B89               	decfsz	9,f
 23694  09DC  29D7               	goto	u12815
 23695  09DD  0140               	movlb	0	; select bank0
 23696  09DE  084A               	movf	___flmul@b+1,w
 23697  09DF  00D1               	movwf	??___flmul
 23698  09E0  0851               	movf	??___flmul,w
 23699  09E1  00AC               	movwf	__Umul8_16@multiplicand
 23700  09E2  084D               	movf	___flmul@a,w
 23701  09E3  31BF  2762  3188   	fcall	__Umul8_16
 23702  09E6  0140               	movlb	0	; select bank0
 23703  09E7  082D               	movf	?__Umul8_16+1,w
 23704  09E8  0141               	movlb	1	; select bank1
 23705  09E9  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23706  09EA  0140               	movlb	0	; select bank0
 23707  09EB  082C               	movf	?__Umul8_16,w
 23708  09EC  0141               	movlb	1	; select bank1
 23709  09ED  00AB               	movwf	___flmul@temp^(0+128)
 23710  09EE  082B               	movf	___flmul@temp^(0+128),w
 23711  09EF  07A3               	addwf	___flmul@grs^(0+128),f
 23712  09F0  082C               	movf	(___flmul@temp+1)^(0+128),w
 23713  09F1  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
 23714  09F2  3000               	movlw	0
 23715  09F3  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
 23716  09F4  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
 23717  09F5  0140               	movlb	0	; select bank0
 23718  09F6  0849               	movf	___flmul@b,w
 23719  09F7  00D1               	movwf	??___flmul
 23720  09F8  0851               	movf	??___flmul,w
 23721  09F9  00AC               	movwf	__Umul8_16@multiplicand
 23722  09FA  084E               	movf	___flmul@a+1,w
 23723  09FB  31BF  2762  3188   	fcall	__Umul8_16
 23724  09FE  0140               	movlb	0	; select bank0
 23725  09FF  082D               	movf	?__Umul8_16+1,w
 23726  0A00  0141               	movlb	1	; select bank1
 23727  0A01  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23728  0A02  0140               	movlb	0	; select bank0
 23729  0A03  082C               	movf	?__Umul8_16,w
 23730  0A04  0141               	movlb	1	; select bank1
 23731  0A05  00AB               	movwf	___flmul@temp^(0+128)
 23732  0A06  082B               	movf	___flmul@temp^(0+128),w
 23733  0A07  07A3               	addwf	___flmul@grs^(0+128),f
 23734  0A08  082C               	movf	(___flmul@temp+1)^(0+128),w
 23735  0A09  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
 23736  0A0A  3000               	movlw	0
 23737  0A0B  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
 23738  0A0C  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
 23739  0A0D  3008               	movlw	8
 23740  0A0E                     u12825:	
 23741  0A0E  35A3               	lslf	___flmul@grs^(0+128),f
 23742  0A0F  0DA4               	rlf	(___flmul@grs+1)^(0+128),f
 23743  0A10  0DA5               	rlf	(___flmul@grs+2)^(0+128),f
 23744  0A11  0DA6               	rlf	(___flmul@grs+3)^(0+128),f
 23745  0A12  0B89               	decfsz	9,f
 23746  0A13  2A0E               	goto	u12825
 23747  0A14  0140               	movlb	0	; select bank0
 23748  0A15  0849               	movf	___flmul@b,w
 23749  0A16  00D1               	movwf	??___flmul
 23750  0A17  0851               	movf	??___flmul,w
 23751  0A18  00AC               	movwf	__Umul8_16@multiplicand
 23752  0A19  084D               	movf	___flmul@a,w
 23753  0A1A  31BF  2762  3188   	fcall	__Umul8_16
 23754  0A1D  0140               	movlb	0	; select bank0
 23755  0A1E  082D               	movf	?__Umul8_16+1,w
 23756  0A1F  0141               	movlb	1	; select bank1
 23757  0A20  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23758  0A21  0140               	movlb	0	; select bank0
 23759  0A22  082C               	movf	?__Umul8_16,w
 23760  0A23  0141               	movlb	1	; select bank1
 23761  0A24  00AB               	movwf	___flmul@temp^(0+128)
 23762  0A25  082B               	movf	___flmul@temp^(0+128),w
 23763  0A26  07A3               	addwf	___flmul@grs^(0+128),f
 23764  0A27  082C               	movf	(___flmul@temp+1)^(0+128),w
 23765  0A28  3DA4               	addwfc	(___flmul@grs+1)^(0+128),f
 23766  0A29  3000               	movlw	0
 23767  0A2A  3DA5               	addwfc	(___flmul@grs+2)^(0+128),f
 23768  0A2B  3DA6               	addwfc	(___flmul@grs+3)^(0+128),f
 23769  0A2C  0140               	movlb	0	; select bank0
 23770  0A2D  084A               	movf	___flmul@b+1,w
 23771  0A2E  00D1               	movwf	??___flmul
 23772  0A2F  0851               	movf	??___flmul,w
 23773  0A30  00AC               	movwf	__Umul8_16@multiplicand
 23774  0A31  084F               	movf	___flmul@a+2,w
 23775  0A32  31BF  2762  3188   	fcall	__Umul8_16
 23776  0A35  0140               	movlb	0	; select bank0
 23777  0A36  082D               	movf	?__Umul8_16+1,w
 23778  0A37  0141               	movlb	1	; select bank1
 23779  0A38  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23780  0A39  0140               	movlb	0	; select bank0
 23781  0A3A  082C               	movf	?__Umul8_16,w
 23782  0A3B  0141               	movlb	1	; select bank1
 23783  0A3C  00AB               	movwf	___flmul@temp^(0+128)
 23784  0A3D  082B               	movf	___flmul@temp^(0+128),w
 23785  0A3E  07A7               	addwf	___flmul@prod^(0+128),f
 23786  0A3F  082C               	movf	(___flmul@temp+1)^(0+128),w
 23787  0A40  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
 23788  0A41  3000               	movlw	0
 23789  0A42  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
 23790  0A43  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
 23791  0A44  0140               	movlb	0	; select bank0
 23792  0A45  084B               	movf	___flmul@b+2,w
 23793  0A46  00D1               	movwf	??___flmul
 23794  0A47  0851               	movf	??___flmul,w
 23795  0A48  00AC               	movwf	__Umul8_16@multiplicand
 23796  0A49  084E               	movf	___flmul@a+1,w
 23797  0A4A  31BF  2762  3188   	fcall	__Umul8_16
 23798  0A4D  0140               	movlb	0	; select bank0
 23799  0A4E  082D               	movf	?__Umul8_16+1,w
 23800  0A4F  0141               	movlb	1	; select bank1
 23801  0A50  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23802  0A51  0140               	movlb	0	; select bank0
 23803  0A52  082C               	movf	?__Umul8_16,w
 23804  0A53  0141               	movlb	1	; select bank1
 23805  0A54  00AB               	movwf	___flmul@temp^(0+128)
 23806  0A55  082B               	movf	___flmul@temp^(0+128),w
 23807  0A56  07A7               	addwf	___flmul@prod^(0+128),f
 23808  0A57  082C               	movf	(___flmul@temp+1)^(0+128),w
 23809  0A58  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
 23810  0A59  3000               	movlw	0
 23811  0A5A  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
 23812  0A5B  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
 23813  0A5C  0140               	movlb	0	; select bank0
 23814  0A5D  084B               	movf	___flmul@b+2,w
 23815  0A5E  00D1               	movwf	??___flmul
 23816  0A5F  0851               	movf	??___flmul,w
 23817  0A60  00AC               	movwf	__Umul8_16@multiplicand
 23818  0A61  084F               	movf	___flmul@a+2,w
 23819  0A62  31BF  2762  3188   	fcall	__Umul8_16
 23820  0A65  0140               	movlb	0	; select bank0
 23821  0A66  082D               	movf	?__Umul8_16+1,w
 23822  0A67  0141               	movlb	1	; select bank1
 23823  0A68  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23824  0A69  0140               	movlb	0	; select bank0
 23825  0A6A  082C               	movf	?__Umul8_16,w
 23826  0A6B  0141               	movlb	1	; select bank1
 23827  0A6C  00AB               	movwf	___flmul@temp^(0+128)
 23828  0A6D  082B               	movf	___flmul@temp^(0+128),w
 23829  0A6E  0140               	movlb	0	; select bank0
 23830  0A6F  00D1               	movwf	??___flmul
 23831  0A70  0141               	movlb	1	; select bank1
 23832  0A71  082C               	movf	(___flmul@temp+1)^(0+128),w
 23833  0A72  0140               	movlb	0	; select bank0
 23834  0A73  00D2               	movwf	??___flmul+1
 23835  0A74  01D3               	clrf	??___flmul+2
 23836  0A75  01D4               	clrf	??___flmul+3
 23837  0A76  3008               	movlw	8
 23838  0A77                     u12835:	
 23839  0A77  35D1               	lslf	??___flmul,f
 23840  0A78  0DD2               	rlf	??___flmul+1,f
 23841  0A79  0DD3               	rlf	??___flmul+2,f
 23842  0A7A  0DD4               	rlf	??___flmul+3,f
 23843  0A7B  0B89               	decfsz	9,f
 23844  0A7C  2A77               	goto	u12835
 23845  0A7D  0851               	movf	??___flmul,w
 23846  0A7E  0141               	movlb	1	; select bank1
 23847  0A7F  07A7               	addwf	___flmul@prod^(0+128),f
 23848  0A80  0140               	movlb	0	; select bank0
 23849  0A81  0852               	movf	??___flmul+1,w
 23850  0A82  0141               	movlb	1	; select bank1
 23851  0A83  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
 23852  0A84  0140               	movlb	0	; select bank0
 23853  0A85  0853               	movf	??___flmul+2,w
 23854  0A86  0141               	movlb	1	; select bank1
 23855  0A87  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
 23856  0A88  0140               	movlb	0	; select bank0
 23857  0A89  0854               	movf	??___flmul+3,w
 23858  0A8A  0141               	movlb	1	; select bank1
 23859  0A8B  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
 23860  0A8C  0823               	movf	___flmul@grs^(0+128),w
 23861  0A8D  0140               	movlb	0	; select bank0
 23862  0A8E  00D1               	movwf	??___flmul
 23863  0A8F  0141               	movlb	1	; select bank1
 23864  0A90  0824               	movf	(___flmul@grs+1)^(0+128),w
 23865  0A91  0140               	movlb	0	; select bank0
 23866  0A92  00D2               	movwf	??___flmul+1
 23867  0A93  0141               	movlb	1	; select bank1
 23868  0A94  0825               	movf	(___flmul@grs+2)^(0+128),w
 23869  0A95  0140               	movlb	0	; select bank0
 23870  0A96  00D3               	movwf	??___flmul+2
 23871  0A97  0141               	movlb	1	; select bank1
 23872  0A98  0826               	movf	(___flmul@grs+3)^(0+128),w
 23873  0A99  0140               	movlb	0	; select bank0
 23874  0A9A  00D4               	movwf	??___flmul+3
 23875  0A9B  3018               	movlw	24
 23876  0A9C                     u12845:	
 23877  0A9C  36D4               	lsrf	??___flmul+3,f
 23878  0A9D  0CD3               	rrf	??___flmul+2,f
 23879  0A9E  0CD2               	rrf	??___flmul+1,f
 23880  0A9F  0CD1               	rrf	??___flmul,f
 23881  0AA0  0B89               	decfsz	9,f
 23882  0AA1  2A9C               	goto	u12845
 23883  0AA2  0851               	movf	??___flmul,w
 23884  0AA3  0141               	movlb	1	; select bank1
 23885  0AA4  07A7               	addwf	___flmul@prod^(0+128),f
 23886  0AA5  0140               	movlb	0	; select bank0
 23887  0AA6  0852               	movf	??___flmul+1,w
 23888  0AA7  0141               	movlb	1	; select bank1
 23889  0AA8  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
 23890  0AA9  0140               	movlb	0	; select bank0
 23891  0AAA  0853               	movf	??___flmul+2,w
 23892  0AAB  0141               	movlb	1	; select bank1
 23893  0AAC  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
 23894  0AAD  0140               	movlb	0	; select bank0
 23895  0AAE  0854               	movf	??___flmul+3,w
 23896  0AAF  0141               	movlb	1	; select bank1
 23897  0AB0  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
 23898  0AB1  3008               	movlw	8
 23899  0AB2                     u12855:	
 23900  0AB2  35A3               	lslf	___flmul@grs^(0+128),f
 23901  0AB3  0DA4               	rlf	(___flmul@grs+1)^(0+128),f
 23902  0AB4  0DA5               	rlf	(___flmul@grs+2)^(0+128),f
 23903  0AB5  0DA6               	rlf	(___flmul@grs+3)^(0+128),f
 23904  0AB6  0B89               	decfsz	9,f
 23905  0AB7  2AB2               	goto	u12855
 23906  0AB8  0822               	movf	___flmul@bexp^(0+128),w
 23907  0AB9  0721               	addwf	___flmul@aexp^(0+128),w
 23908  0ABA  0140               	movlb	0	; select bank0
 23909  0ABB  00D1               	movwf	??___flmul
 23910  0ABC  01D2               	clrf	??___flmul+1
 23911  0ABD  0DD2               	rlf	??___flmul+1,f
 23912  0ABE  0851               	movf	??___flmul,w
 23913  0ABF  3E82               	addlw	130
 23914  0AC0  0141               	movlb	1	; select bank1
 23915  0AC1  00AB               	movwf	___flmul@temp^(0+128)
 23916  0AC2  30FF               	movlw	255
 23917  0AC3  0140               	movlb	0	; select bank0
 23918  0AC4  3D52               	addwfc	??___flmul+1,w
 23919  0AC5  0141               	movlb	1	; select bank1
 23920  0AC6  00AC               	movwf	(___flmul@temp+1)^(0+128)
 23921  0AC7                     l10003:	
 23922  0AC7  1BA9               	btfsc	(___flmul@prod+2)^(0+128),7
 23923  0AC8  2ADE               	goto	l10005
 23924  0AC9  3001               	movlw	1
 23925  0ACA                     u12865:	
 23926  0ACA  35A7               	lslf	___flmul@prod^(0+128),f
 23927  0ACB  0DA8               	rlf	(___flmul@prod+1)^(0+128),f
 23928  0ACC  0DA9               	rlf	(___flmul@prod+2)^(0+128),f
 23929  0ACD  0DAA               	rlf	(___flmul@prod+3)^(0+128),f
 23930  0ACE  0B89               	decfsz	9,f
 23931  0ACF  2ACA               	goto	u12865
 23932  0AD0  1BA6               	btfsc	(___flmul@grs+3)^(0+128),7
 23933  0AD1  1427               	bsf	___flmul@prod^(0+128),0
 23934  0AD2  3001               	movlw	1
 23935  0AD3                     u12885:	
 23936  0AD3  35A3               	lslf	___flmul@grs^(0+128),f
 23937  0AD4  0DA4               	rlf	(___flmul@grs+1)^(0+128),f
 23938  0AD5  0DA5               	rlf	(___flmul@grs+2)^(0+128),f
 23939  0AD6  0DA6               	rlf	(___flmul@grs+3)^(0+128),f
 23940  0AD7  0B89               	decfsz	9,f
 23941  0AD8  2AD3               	goto	u12885
 23942  0AD9  30FF               	movlw	255
 23943  0ADA  07AB               	addwf	___flmul@temp^(0+128),f
 23944  0ADB  30FF               	movlw	255
 23945  0ADC  3DAC               	addwfc	(___flmul@temp+1)^(0+128),f
 23946  0ADD  2AC7               	goto	l10003
 23947  0ADE                     l10005:	
 23948  0ADE  01A1               	clrf	___flmul@aexp^(0+128)
 23949  0ADF  1FA6               	btfss	(___flmul@grs+3)^(0+128),7
 23950  0AE0  2B01               	goto	l10015
 23951  0AE1  30FF               	movlw	255
 23952  0AE2  0523               	andwf	___flmul@grs^(0+128),w
 23953  0AE3  0140               	movlb	0	; select bank0
 23954  0AE4  00D1               	movwf	??___flmul
 23955  0AE5  30FF               	movlw	255
 23956  0AE6  0141               	movlb	1	; select bank1
 23957  0AE7  0524               	andwf	(___flmul@grs+1)^(0+128),w
 23958  0AE8  0140               	movlb	0	; select bank0
 23959  0AE9  00D2               	movwf	??___flmul+1
 23960  0AEA  30FF               	movlw	255
 23961  0AEB  0141               	movlb	1	; select bank1
 23962  0AEC  0525               	andwf	(___flmul@grs+2)^(0+128),w
 23963  0AED  0140               	movlb	0	; select bank0
 23964  0AEE  00D3               	movwf	??___flmul+2
 23965  0AEF  307F               	movlw	127
 23966  0AF0  0141               	movlb	1	; select bank1
 23967  0AF1  0526               	andwf	(___flmul@grs+3)^(0+128),w
 23968  0AF2  0140               	movlb	0	; select bank0
 23969  0AF3  00D4               	movwf	??___flmul+3
 23970  0AF4  0854               	movf	??___flmul+3,w
 23971  0AF5  0453               	iorwf	??___flmul+2,w
 23972  0AF6  0452               	iorwf	??___flmul+1,w
 23973  0AF7  0451               	iorwf	??___flmul,w
 23974  0AF8  1903               	skipnz
 23975  0AF9  2AFC               	goto	l1343
 23976  0AFA  0141               	movlb	1	; select bank1
 23977  0AFB  2AFF               	goto	l10013
 23978  0AFC                     l1343:	
 23979  0AFC  0141               	movlb	1	; select bank1
 23980  0AFD  1C27               	btfss	___flmul@prod^(0+128),0
 23981  0AFE  2B01               	goto	l10015
 23982  0AFF                     l10013:	
 23983  0AFF  01A1               	clrf	___flmul@aexp^(0+128)
 23984  0B00  0AA1               	incf	___flmul@aexp^(0+128),f
 23985  0B01                     l10015:	
 23986  0B01  0821               	movf	___flmul@aexp^(0+128),w
 23987  0B02  1903               	btfsc	3,2
 23988  0B03  2B38               	goto	l10025
 23989  0B04  3001               	movlw	1
 23990  0B05  07A7               	addwf	___flmul@prod^(0+128),f
 23991  0B06  3000               	movlw	0
 23992  0B07  3DA8               	addwfc	(___flmul@prod+1)^(0+128),f
 23993  0B08  3000               	movlw	0
 23994  0B09  3DA9               	addwfc	(___flmul@prod+2)^(0+128),f
 23995  0B0A  3000               	movlw	0
 23996  0B0B  3DAA               	addwfc	(___flmul@prod+3)^(0+128),f
 23997  0B0C  1C2A               	btfss	(___flmul@prod+3)^(0+128),0
 23998  0B0D  2B38               	goto	l10025
 23999  0B0E  0827               	movf	___flmul@prod^(0+128),w
 24000  0B0F  0140               	movlb	0	; select bank0
 24001  0B10  00D1               	movwf	??___flmul
 24002  0B11  0141               	movlb	1	; select bank1
 24003  0B12  0828               	movf	(___flmul@prod+1)^(0+128),w
 24004  0B13  0140               	movlb	0	; select bank0
 24005  0B14  00D2               	movwf	??___flmul+1
 24006  0B15  0141               	movlb	1	; select bank1
 24007  0B16  0829               	movf	(___flmul@prod+2)^(0+128),w
 24008  0B17  0140               	movlb	0	; select bank0
 24009  0B18  00D3               	movwf	??___flmul+2
 24010  0B19  0141               	movlb	1	; select bank1
 24011  0B1A  082A               	movf	(___flmul@prod+3)^(0+128),w
 24012  0B1B  0140               	movlb	0	; select bank0
 24013  0B1C  00D4               	movwf	??___flmul+3
 24014  0B1D  3001               	movlw	1
 24015  0B1E  00D5               	movwf	??___flmul+4
 24016  0B1F                     u12955:	
 24017  0B1F  37D4               	asrf	??___flmul+3,f
 24018  0B20  0CD3               	rrf	??___flmul+2,f
 24019  0B21  0CD2               	rrf	??___flmul+1,f
 24020  0B22  0CD1               	rrf	??___flmul,f
 24021  0B23  0BD5               	decfsz	??___flmul+4,f
 24022  0B24  2B1F               	goto	u12955
 24023  0B25  0854               	movf	??___flmul+3,w
 24024  0B26  0141               	movlb	1	; select bank1
 24025  0B27  00AA               	movwf	(___flmul@prod+3)^(0+128)
 24026  0B28  0140               	movlb	0	; select bank0
 24027  0B29  0853               	movf	??___flmul+2,w
 24028  0B2A  0141               	movlb	1	; select bank1
 24029  0B2B  00A9               	movwf	(___flmul@prod+2)^(0+128)
 24030  0B2C  0140               	movlb	0	; select bank0
 24031  0B2D  0852               	movf	??___flmul+1,w
 24032  0B2E  0141               	movlb	1	; select bank1
 24033  0B2F  00A8               	movwf	(___flmul@prod+1)^(0+128)
 24034  0B30  0140               	movlb	0	; select bank0
 24035  0B31  0851               	movf	??___flmul,w
 24036  0B32  0141               	movlb	1	; select bank1
 24037  0B33  00A7               	movwf	___flmul@prod^(0+128)
 24038  0B34  3001               	movlw	1
 24039  0B35  07AB               	addwf	___flmul@temp^(0+128),f
 24040  0B36  3000               	movlw	0
 24041  0B37  3DAC               	addwfc	(___flmul@temp+1)^(0+128),f
 24042  0B38                     l10025:	
 24043  0B38  082C               	movf	(___flmul@temp+1)^(0+128),w
 24044  0B39  3A80               	xorlw	128
 24045  0B3A  0140               	movlb	0	; select bank0
 24046  0B3B  00D1               	movwf	??___flmul
 24047  0B3C  3080               	movlw	128
 24048  0B3D  0251               	subwf	??___flmul,w
 24049  0B3E  1D03               	skipz
 24050  0B3F  2B43               	goto	u12965
 24051  0B40  30FF               	movlw	255
 24052  0B41  0141               	movlb	1	; select bank1
 24053  0B42  022B               	subwf	___flmul@temp^(0+128),w
 24054  0B43                     u12965:	
 24055  0B43  1C03               	skipc
 24056  0B44  2B4F               	goto	l10029
 24057  0B45  307F               	movlw	127
 24058  0B46  0141               	movlb	1	; select bank1
 24059  0B47  00AA               	movwf	(___flmul@prod+3)^(0+128)
 24060  0B48  3080               	movlw	128
 24061  0B49  00A9               	movwf	(___flmul@prod+2)^(0+128)
 24062  0B4A  3000               	movlw	0
 24063  0B4B  00A8               	movwf	(___flmul@prod+1)^(0+128)
 24064  0B4C  3000               	movlw	0
 24065  0B4D  00A7               	movwf	___flmul@prod^(0+128)
 24066  0B4E  2B7F               	goto	l1349
 24067  0B4F                     l10029:	
 24068  0B4F  0141               	movlb	1	; select bank1
 24069  0B50  082C               	movf	(___flmul@temp+1)^(0+128),w
 24070  0B51  3A80               	xorlw	128
 24071  0B52  0140               	movlb	0	; select bank0
 24072  0B53  00D1               	movwf	??___flmul
 24073  0B54  3080               	movlw	128
 24074  0B55  0251               	subwf	??___flmul,w
 24075  0B56  1D03               	skipz
 24076  0B57  2B5B               	goto	u12975
 24077  0B58  3001               	movlw	1
 24078  0B59  0141               	movlb	1	; select bank1
 24079  0B5A  022B               	subwf	___flmul@temp^(0+128),w
 24080  0B5B                     u12975:	
 24081  0B5B  1803               	skipnc
 24082  0B5C  2B68               	goto	l10035
 24083  0B5D  3000               	movlw	0
 24084  0B5E  0141               	movlb	1	; select bank1
 24085  0B5F  00AA               	movwf	(___flmul@prod+3)^(0+128)
 24086  0B60  3000               	movlw	0
 24087  0B61  00A9               	movwf	(___flmul@prod+2)^(0+128)
 24088  0B62  3000               	movlw	0
 24089  0B63  00A8               	movwf	(___flmul@prod+1)^(0+128)
 24090  0B64  3000               	movlw	0
 24091  0B65  00A7               	movwf	___flmul@prod^(0+128)
 24092  0B66  01A0               	clrf	___flmul@sign^(0+128)
 24093  0B67  2B7F               	goto	l1349
 24094  0B68                     l10035:	
 24095  0B68  0141               	movlb	1	; select bank1
 24096  0B69  082B               	movf	___flmul@temp^(0+128),w
 24097  0B6A  0140               	movlb	0	; select bank0
 24098  0B6B  00D1               	movwf	??___flmul
 24099  0B6C  0851               	movf	??___flmul,w
 24100  0B6D  0141               	movlb	1	; select bank1
 24101  0B6E  00A2               	movwf	___flmul@bexp^(0+128)
 24102  0B6F  30FF               	movlw	255
 24103  0B70  05A7               	andwf	___flmul@prod^(0+128),f
 24104  0B71  30FF               	movlw	255
 24105  0B72  05A8               	andwf	(___flmul@prod+1)^(0+128),f
 24106  0B73  307F               	movlw	127
 24107  0B74  05A9               	andwf	(___flmul@prod+2)^(0+128),f
 24108  0B75  3000               	movlw	0
 24109  0B76  05AA               	andwf	(___flmul@prod+3)^(0+128),f
 24110  0B77  1822               	btfsc	___flmul@bexp^(0+128),0
 24111  0B78  17A9               	bsf	(___flmul@prod^(0+128)+2),7
 24112  0B79  3622               	lsrf	___flmul@bexp^(0+128),w
 24113  0B7A  0140               	movlb	0	; select bank0
 24114  0B7B  00D1               	movwf	??___flmul
 24115  0B7C  0851               	movf	??___flmul,w
 24116  0B7D  0141               	movlb	1	; select bank1
 24117  0B7E  00AA               	movwf	(___flmul@prod^(0+128)+3)
 24118  0B7F                     l1349:	
 24119  0B7F  0820               	movf	___flmul@sign^(0+128),w
 24120  0B80  0140               	movlb	0	; select bank0
 24121  0B81  00D1               	movwf	??___flmul
 24122  0B82  0851               	movf	??___flmul,w
 24123  0B83  0141               	movlb	1	; select bank1
 24124  0B84  04AA               	iorwf	(___flmul@prod^(0+128)+3),f
 24125  0B85  082A               	movf	(___flmul@prod+3)^(0+128),w
 24126  0B86  0140               	movlb	0	; select bank0
 24127  0B87  00CC               	movwf	?___flmul+3
 24128  0B88  0141               	movlb	1	; select bank1
 24129  0B89  0829               	movf	(___flmul@prod+2)^(0+128),w
 24130  0B8A  0140               	movlb	0	; select bank0
 24131  0B8B  00CB               	movwf	?___flmul+2
 24132  0B8C  0141               	movlb	1	; select bank1
 24133  0B8D  0828               	movf	(___flmul@prod+1)^(0+128),w
 24134  0B8E  0140               	movlb	0	; select bank0
 24135  0B8F  00CA               	movwf	?___flmul+1
 24136  0B90  0141               	movlb	1	; select bank1
 24137  0B91  0827               	movf	___flmul@prod^(0+128),w
 24138  0B92  0140               	movlb	0	; select bank0
 24139  0B93  00C9               	movwf	?___flmul
 24140  0B94  0008               	return
 24141  0B95                     __end_of___flmul:	
 24142                           
 24143                           	psect	text61
 24144  3F62                     __ptext61:	
 24145 ;; *************** function __Umul8_16 *****************
 24146 ;; Defined at:
 24147 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul8_16.c"
 24148 ;; Parameters:    Size  Location     Type
 24149 ;;  multiplier      1    wreg     unsigned char 
 24150 ;;  multiplicand    1   12[BANK0 ] unsigned char 
 24151 ;; Auto vars:     Size  Location     Type
 24152 ;;  multiplier      1   20[BANK0 ] unsigned char 
 24153 ;;  word_mpld       2   18[BANK0 ] unsigned int 
 24154 ;;  product         2   16[BANK0 ] unsigned int 
 24155 ;; Return value:  Size  Location     Type
 24156 ;;                  2   12[BANK0 ] unsigned int 
 24157 ;; Registers used:
 24158 ;;		wreg, status,2, status,0
 24159 ;; Tracked objects:
 24160 ;;		On entry : 0/0
 24161 ;;		On exit  : 0/0
 24162 ;;		Unchanged: 0/0
 24163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24164 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24165 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24166 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24167 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24168 ;;Total ram usage:        9 bytes
 24169 ;; Hardware stack levels used:    1
 24170 ;; Hardware stack levels required when called:    3
 24171 ;; This function calls:
 24172 ;;		Nothing
 24173 ;; This function is called by:
 24174 ;;		___flmul
 24175 ;; This function uses a non-reentrant model
 24176 ;;
 24177                           
 24178                           
 24179                           ;psect for function __Umul8_16
 24180  3F62                     __Umul8_16:	
 24181                           
 24182                           ;incstack = 0
 24183                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 24184                           ;__Umul8_16@multiplier stored from wreg
 24185  3F62  0140               	movlb	0	; select bank0
 24186  3F63  00B4               	movwf	__Umul8_16@multiplier
 24187  3F64  01B0               	clrf	__Umul8_16@product
 24188  3F65  01B1               	clrf	__Umul8_16@product+1
 24189  3F66  082C               	movf	__Umul8_16@multiplicand,w
 24190  3F67  00AE               	movwf	??__Umul8_16
 24191  3F68  01AF               	clrf	??__Umul8_16+1
 24192  3F69  082E               	movf	??__Umul8_16,w
 24193  3F6A  00B2               	movwf	__Umul8_16@word_mpld
 24194  3F6B  082F               	movf	??__Umul8_16+1,w
 24195  3F6C  00B3               	movwf	__Umul8_16@word_mpld+1
 24196  3F6D                     l9523:	
 24197  3F6D  1C34               	btfss	__Umul8_16@multiplier,0
 24198  3F6E  2F73               	goto	l1415
 24199  3F6F  0832               	movf	__Umul8_16@word_mpld,w
 24200  3F70  07B0               	addwf	__Umul8_16@product,f
 24201  3F71  0833               	movf	__Umul8_16@word_mpld+1,w
 24202  3F72  3DB1               	addwfc	__Umul8_16@product+1,f
 24203  3F73                     l1415:	
 24204  3F73  3001               	movlw	1
 24205  3F74                     u11995:	
 24206  3F74  35B2               	lslf	__Umul8_16@word_mpld,f
 24207  3F75  0DB3               	rlf	__Umul8_16@word_mpld+1,f
 24208  3F76  0B89               	decfsz	9,f
 24209  3F77  2F74               	goto	u11995
 24210  3F78  1003               	clrc
 24211  3F79  0CB4               	rrf	__Umul8_16@multiplier,f
 24212  3F7A  0834               	movf	__Umul8_16@multiplier,w
 24213  3F7B  1D03               	btfss	3,2
 24214  3F7C  2F6D               	goto	l9523
 24215  3F7D  0831               	movf	__Umul8_16@product+1,w
 24216  3F7E  00AD               	movwf	?__Umul8_16+1
 24217  3F7F  0830               	movf	__Umul8_16@product,w
 24218  3F80  00AC               	movwf	?__Umul8_16
 24219  3F81  0008               	return
 24220  3F82                     __end_of__Umul8_16:	
 24221                           
 24222                           	psect	text62
 24223  266D                     __ptext62:	
 24224 ;; *************** function ___fldiv *****************
 24225 ;; Defined at:
 24226 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcdiv.c"
 24227 ;; Parameters:    Size  Location     Type
 24228 ;;  a               4   13[BANK1 ] unsigned int 
 24229 ;;  b               4   17[BANK1 ] unsigned int 
 24230 ;; Auto vars:     Size  Location     Type
 24231 ;;  grs             4   33[BANK1 ] unsigned long 
 24232 ;;  rem             4   26[BANK1 ] unsigned long 
 24233 ;;  new_exp         2   31[BANK1 ] int 
 24234 ;;  aexp            1   38[BANK1 ] unsigned char 
 24235 ;;  bexp            1   37[BANK1 ] unsigned char 
 24236 ;;  sign            1   30[BANK1 ] unsigned char 
 24237 ;; Return value:  Size  Location     Type
 24238 ;;                  4   13[BANK1 ] unsigned char 
 24239 ;; Registers used:
 24240 ;;		wreg, status,2, status,0
 24241 ;; Tracked objects:
 24242 ;;		On entry : 0/0
 24243 ;;		On exit  : 0/0
 24244 ;;		Unchanged: 0/0
 24245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24246 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24247 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24248 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24249 ;;      Totals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24250 ;;Total ram usage:       26 bytes
 24251 ;; Hardware stack levels used:    1
 24252 ;; Hardware stack levels required when called:    3
 24253 ;; This function calls:
 24254 ;;		Nothing
 24255 ;; This function is called by:
 24256 ;;		_checkChannelStatus
 24257 ;;		_systemCheck
 24258 ;;		_calcRequiredPower
 24259 ;;		_getAnalogValues
 24260 ;;		_channelThing
 24261 ;;		_ftoa
 24262 ;; This function uses a non-reentrant model
 24263 ;;
 24264                           
 24265                           
 24266                           ;psect for function ___fldiv
 24267  266D                     ___fldiv:	
 24268                           
 24269                           ;incstack = 0
 24270                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 24271  266D  0141               	movlb	1	; select bank1
 24272  266E  0834               	movf	(___fldiv@b^(0+128)+3),w
 24273  266F  3980               	andlw	128
 24274  2670  00B5               	movwf	??___fldiv^(0+128)
 24275  2671  0835               	movf	??___fldiv^(0+128),w
 24276  2672  00BE               	movwf	___fldiv@sign^(0+128)
 24277  2673  3534               	lslf	(___fldiv@b^(0+128)+3),w
 24278  2674  00B5               	movwf	??___fldiv^(0+128)
 24279  2675  0835               	movf	??___fldiv^(0+128),w
 24280  2676  00C5               	movwf	___fldiv@bexp^(0+128)
 24281  2677  1BB3               	btfsc	(___fldiv@b^(0+128)+2),7
 24282  2678  1445               	bsf	___fldiv@bexp^(0+128),0
 24283  2679  0845               	movf	___fldiv@bexp^(0+128),w
 24284  267A  1903               	btfsc	3,2
 24285  267B  2E8A               	goto	l9785
 24286  267C  0A45               	incf	___fldiv@bexp^(0+128),w
 24287  267D  1D03               	btfss	3,2
 24288  267E  2E87               	goto	l9781
 24289  267F  3000               	movlw	0
 24290  2680  00B4               	movwf	(___fldiv@b+3)^(0+128)
 24291  2681  3000               	movlw	0
 24292  2682  00B3               	movwf	(___fldiv@b+2)^(0+128)
 24293  2683  3000               	movlw	0
 24294  2684  00B2               	movwf	(___fldiv@b+1)^(0+128)
 24295  2685  3000               	movlw	0
 24296  2686  00B1               	movwf	___fldiv@b^(0+128)
 24297  2687                     l9781:	
 24298  2687  17B3               	bsf	(___fldiv@b^(0+128)+2),7
 24299  2688  01B4               	clrf	(___fldiv@b^(0+128)+3)
 24300  2689  2E92               	goto	l9787
 24301  268A                     l9785:	
 24302  268A  3000               	movlw	0
 24303  268B  00B4               	movwf	(___fldiv@b+3)^(0+128)
 24304  268C  3000               	movlw	0
 24305  268D  00B3               	movwf	(___fldiv@b+2)^(0+128)
 24306  268E  3000               	movlw	0
 24307  268F  00B2               	movwf	(___fldiv@b+1)^(0+128)
 24308  2690  3000               	movlw	0
 24309  2691  00B1               	movwf	___fldiv@b^(0+128)
 24310  2692                     l9787:	
 24311  2692  0830               	movf	(___fldiv@a^(0+128)+3),w
 24312  2693  3980               	andlw	128
 24313  2694  00B5               	movwf	??___fldiv^(0+128)
 24314  2695  0835               	movf	??___fldiv^(0+128),w
 24315  2696  06BE               	xorwf	___fldiv@sign^(0+128),f
 24316  2697  3530               	lslf	(___fldiv@a^(0+128)+3),w
 24317  2698  00B5               	movwf	??___fldiv^(0+128)
 24318  2699  0835               	movf	??___fldiv^(0+128),w
 24319  269A  00C6               	movwf	___fldiv@aexp^(0+128)
 24320  269B  1BAF               	btfsc	(___fldiv@a^(0+128)+2),7
 24321  269C  1446               	bsf	___fldiv@aexp^(0+128),0
 24322  269D  0846               	movf	___fldiv@aexp^(0+128),w
 24323  269E  1903               	btfsc	3,2
 24324  269F  2EAE               	goto	l9805
 24325  26A0  0A46               	incf	___fldiv@aexp^(0+128),w
 24326  26A1  1D03               	btfss	3,2
 24327  26A2  2EAB               	goto	l9801
 24328  26A3  3000               	movlw	0
 24329  26A4  00B0               	movwf	(___fldiv@a+3)^(0+128)
 24330  26A5  3000               	movlw	0
 24331  26A6  00AF               	movwf	(___fldiv@a+2)^(0+128)
 24332  26A7  3000               	movlw	0
 24333  26A8  00AE               	movwf	(___fldiv@a+1)^(0+128)
 24334  26A9  3000               	movlw	0
 24335  26AA  00AD               	movwf	___fldiv@a^(0+128)
 24336  26AB                     l9801:	
 24337  26AB  17AF               	bsf	(___fldiv@a^(0+128)+2),7
 24338  26AC  01B0               	clrf	(___fldiv@a^(0+128)+3)
 24339  26AD  2EB6               	goto	l1297
 24340  26AE                     l9805:	
 24341  26AE  3000               	movlw	0
 24342  26AF  00B0               	movwf	(___fldiv@a+3)^(0+128)
 24343  26B0  3000               	movlw	0
 24344  26B1  00AF               	movwf	(___fldiv@a+2)^(0+128)
 24345  26B2  3000               	movlw	0
 24346  26B3  00AE               	movwf	(___fldiv@a+1)^(0+128)
 24347  26B4  3000               	movlw	0
 24348  26B5  00AD               	movwf	___fldiv@a^(0+128)
 24349  26B6                     l1297:	
 24350  26B6  0830               	movf	(___fldiv@a+3)^(0+128),w
 24351  26B7  042F               	iorwf	(___fldiv@a+2)^(0+128),w
 24352  26B8  042E               	iorwf	(___fldiv@a+1)^(0+128),w
 24353  26B9  042D               	iorwf	___fldiv@a^(0+128),w
 24354  26BA  1D03               	skipz
 24355  26BB  2ED5               	goto	l9815
 24356  26BC  3000               	movlw	0
 24357  26BD  00B4               	movwf	(___fldiv@b+3)^(0+128)
 24358  26BE  3000               	movlw	0
 24359  26BF  00B3               	movwf	(___fldiv@b+2)^(0+128)
 24360  26C0  3000               	movlw	0
 24361  26C1  00B2               	movwf	(___fldiv@b+1)^(0+128)
 24362  26C2  3000               	movlw	0
 24363  26C3  00B1               	movwf	___fldiv@b^(0+128)
 24364  26C4  3080               	movlw	128
 24365  26C5  04B3               	iorwf	(___fldiv@b^(0+128)+2),f
 24366  26C6  307F               	movlw	127
 24367  26C7  04B4               	iorwf	((___fldiv@b+1)^(0+128)+2),f
 24368  26C8  083E               	movf	___fldiv@sign^(0+128),w
 24369  26C9  00B5               	movwf	??___fldiv^(0+128)
 24370  26CA  0835               	movf	??___fldiv^(0+128),w
 24371  26CB  04B4               	iorwf	(___fldiv@b^(0+128)+3),f
 24372  26CC  0834               	movf	(___fldiv@b+3)^(0+128),w
 24373  26CD  00B0               	movwf	(?___fldiv+3)^(0+128)
 24374  26CE  0833               	movf	(___fldiv@b+2)^(0+128),w
 24375  26CF  00AF               	movwf	(?___fldiv+2)^(0+128)
 24376  26D0  0832               	movf	(___fldiv@b+1)^(0+128),w
 24377  26D1  00AE               	movwf	(?___fldiv+1)^(0+128)
 24378  26D2  0831               	movf	___fldiv@b^(0+128),w
 24379  26D3  00AD               	movwf	?___fldiv^(0+128)
 24380  26D4  0008               	return
 24381  26D5                     l9815:	
 24382  26D5  0845               	movf	___fldiv@bexp^(0+128),w
 24383  26D6  1D03               	btfss	3,2
 24384  26D7  2EE9               	goto	l9821
 24385  26D8  3000               	movlw	0
 24386  26D9  00B4               	movwf	(___fldiv@b+3)^(0+128)
 24387  26DA  3000               	movlw	0
 24388  26DB  00B3               	movwf	(___fldiv@b+2)^(0+128)
 24389  26DC  3000               	movlw	0
 24390  26DD  00B2               	movwf	(___fldiv@b+1)^(0+128)
 24391  26DE  3000               	movlw	0
 24392  26DF  00B1               	movwf	___fldiv@b^(0+128)
 24393  26E0  0834               	movf	(___fldiv@b+3)^(0+128),w
 24394  26E1  00B0               	movwf	(?___fldiv+3)^(0+128)
 24395  26E2  0833               	movf	(___fldiv@b+2)^(0+128),w
 24396  26E3  00AF               	movwf	(?___fldiv+2)^(0+128)
 24397  26E4  0832               	movf	(___fldiv@b+1)^(0+128),w
 24398  26E5  00AE               	movwf	(?___fldiv+1)^(0+128)
 24399  26E6  0831               	movf	___fldiv@b^(0+128),w
 24400  26E7  00AD               	movwf	?___fldiv^(0+128)
 24401  26E8  0008               	return
 24402  26E9                     l9821:	
 24403  26E9  0846               	movf	___fldiv@aexp^(0+128),w
 24404  26EA  00B5               	movwf	??___fldiv^(0+128)
 24405  26EB  01B6               	clrf	(??___fldiv^(0+128)+1)
 24406  26EC  09B5               	comf	??___fldiv^(0+128),f
 24407  26ED  09B6               	comf	(??___fldiv^(0+128)+1),f
 24408  26EE  0AB5               	incf	??___fldiv^(0+128),f
 24409  26EF  1903               	skipnz
 24410  26F0  0AB6               	incf	(??___fldiv^(0+128)+1),f
 24411  26F1  0845               	movf	___fldiv@bexp^(0+128),w
 24412  26F2  0735               	addwf	??___fldiv^(0+128),w
 24413  26F3  00B7               	movwf	(??___fldiv+2)^(0+128)
 24414  26F4  0836               	movf	(??___fldiv+1)^(0+128),w
 24415  26F5  1803               	skipnc
 24416  26F6  0A36               	incf	(??___fldiv+1)^(0+128),w
 24417  26F7  00B8               	movwf	((??___fldiv+2)^(0+128)+1)
 24418  26F8  0837               	movf	(??___fldiv+2)^(0+128),w
 24419  26F9  3E7F               	addlw	127
 24420  26FA  00BF               	movwf	___fldiv@new_exp^(0+128)
 24421  26FB  3000               	movlw	0
 24422  26FC  3D38               	addwfc	(??___fldiv+3)^(0+128),w
 24423  26FD  00C0               	movwf	(___fldiv@new_exp+1)^(0+128)
 24424  26FE  0834               	movf	(___fldiv@b+3)^(0+128),w
 24425  26FF  00BD               	movwf	(___fldiv@rem+3)^(0+128)
 24426  2700  0833               	movf	(___fldiv@b+2)^(0+128),w
 24427  2701  00BC               	movwf	(___fldiv@rem+2)^(0+128)
 24428  2702  0832               	movf	(___fldiv@b+1)^(0+128),w
 24429  2703  00BB               	movwf	(___fldiv@rem+1)^(0+128)
 24430  2704  0831               	movf	___fldiv@b^(0+128),w
 24431  2705  00BA               	movwf	___fldiv@rem^(0+128)
 24432  2706  3000               	movlw	0
 24433  2707  00B4               	movwf	(___fldiv@b+3)^(0+128)
 24434  2708  3000               	movlw	0
 24435  2709  00B3               	movwf	(___fldiv@b+2)^(0+128)
 24436  270A  3000               	movlw	0
 24437  270B  00B2               	movwf	(___fldiv@b+1)^(0+128)
 24438  270C  3000               	movlw	0
 24439  270D  00B1               	movwf	___fldiv@b^(0+128)
 24440  270E  3000               	movlw	0
 24441  270F  00C4               	movwf	(___fldiv@grs+3)^(0+128)
 24442  2710  3000               	movlw	0
 24443  2711  00C3               	movwf	(___fldiv@grs+2)^(0+128)
 24444  2712  3000               	movlw	0
 24445  2713  00C2               	movwf	(___fldiv@grs+1)^(0+128)
 24446  2714  3000               	movlw	0
 24447  2715  00C1               	movwf	___fldiv@grs^(0+128)
 24448  2716  01C6               	clrf	___fldiv@aexp^(0+128)
 24449  2717                     l9849:	
 24450  2717  301A               	movlw	26
 24451  2718  0246               	subwf	___fldiv@aexp^(0+128),w
 24452  2719  1803               	btfsc	3,0
 24453  271A  2F53               	goto	l9851
 24454  271B  0846               	movf	___fldiv@aexp^(0+128),w
 24455  271C  1903               	btfsc	3,2
 24456  271D  2F35               	goto	l9841
 24457  271E  3001               	movlw	1
 24458  271F                     u12535:	
 24459  271F  35BA               	lslf	___fldiv@rem^(0+128),f
 24460  2720  0DBB               	rlf	(___fldiv@rem+1)^(0+128),f
 24461  2721  0DBC               	rlf	(___fldiv@rem+2)^(0+128),f
 24462  2722  0DBD               	rlf	(___fldiv@rem+3)^(0+128),f
 24463  2723  0B89               	decfsz	9,f
 24464  2724  2F1F               	goto	u12535
 24465  2725  3001               	movlw	1
 24466  2726                     u12545:	
 24467  2726  35B1               	lslf	___fldiv@b^(0+128),f
 24468  2727  0DB2               	rlf	(___fldiv@b+1)^(0+128),f
 24469  2728  0DB3               	rlf	(___fldiv@b+2)^(0+128),f
 24470  2729  0DB4               	rlf	(___fldiv@b+3)^(0+128),f
 24471  272A  0B89               	decfsz	9,f
 24472  272B  2F26               	goto	u12545
 24473  272C  1BC4               	btfsc	(___fldiv@grs+3)^(0+128),7
 24474  272D  1431               	bsf	___fldiv@b^(0+128),0
 24475  272E  3001               	movlw	1
 24476  272F                     u12565:	
 24477  272F  35C1               	lslf	___fldiv@grs^(0+128),f
 24478  2730  0DC2               	rlf	(___fldiv@grs+1)^(0+128),f
 24479  2731  0DC3               	rlf	(___fldiv@grs+2)^(0+128),f
 24480  2732  0DC4               	rlf	(___fldiv@grs+3)^(0+128),f
 24481  2733  0B89               	decfsz	9,f
 24482  2734  2F2F               	goto	u12565
 24483  2735                     l9841:	
 24484  2735  0830               	movf	(___fldiv@a+3)^(0+128),w
 24485  2736  023D               	subwf	(___fldiv@rem+3)^(0+128),w
 24486  2737  1D03               	skipz
 24487  2738  2F43               	goto	u12575
 24488  2739  082F               	movf	(___fldiv@a+2)^(0+128),w
 24489  273A  023C               	subwf	(___fldiv@rem+2)^(0+128),w
 24490  273B  1D03               	skipz
 24491  273C  2F43               	goto	u12575
 24492  273D  082E               	movf	(___fldiv@a+1)^(0+128),w
 24493  273E  023B               	subwf	(___fldiv@rem+1)^(0+128),w
 24494  273F  1D03               	skipz
 24495  2740  2F43               	goto	u12575
 24496  2741  082D               	movf	___fldiv@a^(0+128),w
 24497  2742  023A               	subwf	___fldiv@rem^(0+128),w
 24498  2743                     u12575:	
 24499  2743  1C03               	skipc
 24500  2744  2F4E               	goto	l9847
 24501  2745  1744               	bsf	(___fldiv@grs^(0+128)+3),6
 24502  2746  082D               	movf	___fldiv@a^(0+128),w
 24503  2747  02BA               	subwf	___fldiv@rem^(0+128),f
 24504  2748  082E               	movf	(___fldiv@a+1)^(0+128),w
 24505  2749  3BBB               	subwfb	(___fldiv@rem+1)^(0+128),f
 24506  274A  082F               	movf	(___fldiv@a+2)^(0+128),w
 24507  274B  3BBC               	subwfb	(___fldiv@rem+2)^(0+128),f
 24508  274C  0830               	movf	(___fldiv@a+3)^(0+128),w
 24509  274D  3BBD               	subwfb	(___fldiv@rem+3)^(0+128),f
 24510  274E                     l9847:	
 24511  274E  3001               	movlw	1
 24512  274F  00B5               	movwf	??___fldiv^(0+128)
 24513  2750  0835               	movf	??___fldiv^(0+128),w
 24514  2751  07C6               	addwf	___fldiv@aexp^(0+128),f
 24515  2752  2F17               	goto	l9849
 24516  2753                     l9851:	
 24517  2753  083D               	movf	(___fldiv@rem+3)^(0+128),w
 24518  2754  043C               	iorwf	(___fldiv@rem+2)^(0+128),w
 24519  2755  043B               	iorwf	(___fldiv@rem+1)^(0+128),w
 24520  2756  043A               	iorwf	___fldiv@rem^(0+128),w
 24521  2757  1D03               	btfss	3,2
 24522  2758  1441               	bsf	___fldiv@grs^(0+128),0
 24523  2759                     l9865:	
 24524  2759  1BB3               	btfsc	(___fldiv@b+2)^(0+128),7
 24525  275A  2F70               	goto	l9867
 24526  275B  3001               	movlw	1
 24527  275C                     u12605:	
 24528  275C  35B1               	lslf	___fldiv@b^(0+128),f
 24529  275D  0DB2               	rlf	(___fldiv@b+1)^(0+128),f
 24530  275E  0DB3               	rlf	(___fldiv@b+2)^(0+128),f
 24531  275F  0DB4               	rlf	(___fldiv@b+3)^(0+128),f
 24532  2760  0B89               	decfsz	9,f
 24533  2761  2F5C               	goto	u12605
 24534  2762  1BC4               	btfsc	(___fldiv@grs+3)^(0+128),7
 24535  2763  1431               	bsf	___fldiv@b^(0+128),0
 24536  2764  3001               	movlw	1
 24537  2765                     u12625:	
 24538  2765  35C1               	lslf	___fldiv@grs^(0+128),f
 24539  2766  0DC2               	rlf	(___fldiv@grs+1)^(0+128),f
 24540  2767  0DC3               	rlf	(___fldiv@grs+2)^(0+128),f
 24541  2768  0DC4               	rlf	(___fldiv@grs+3)^(0+128),f
 24542  2769  0B89               	decfsz	9,f
 24543  276A  2F65               	goto	u12625
 24544  276B  30FF               	movlw	255
 24545  276C  07BF               	addwf	___fldiv@new_exp^(0+128),f
 24546  276D  30FF               	movlw	255
 24547  276E  3DC0               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24548  276F  2F59               	goto	l9865
 24549  2770                     l9867:	
 24550  2770  01C6               	clrf	___fldiv@aexp^(0+128)
 24551  2771  1FC4               	btfss	(___fldiv@grs+3)^(0+128),7
 24552  2772  2F89               	goto	l9877
 24553  2773  30FF               	movlw	255
 24554  2774  0541               	andwf	___fldiv@grs^(0+128),w
 24555  2775  00B5               	movwf	??___fldiv^(0+128)
 24556  2776  30FF               	movlw	255
 24557  2777  0542               	andwf	(___fldiv@grs+1)^(0+128),w
 24558  2778  00B6               	movwf	(??___fldiv^(0+128)+1)
 24559  2779  30FF               	movlw	255
 24560  277A  0543               	andwf	(___fldiv@grs+2)^(0+128),w
 24561  277B  00B7               	movwf	(??___fldiv^(0+128)+2)
 24562  277C  307F               	movlw	127
 24563  277D  0544               	andwf	(___fldiv@grs+3)^(0+128),w
 24564  277E  00B8               	movwf	(??___fldiv^(0+128)+3)
 24565  277F  0838               	movf	(??___fldiv+3)^(0+128),w
 24566  2780  0437               	iorwf	(??___fldiv+2)^(0+128),w
 24567  2781  0436               	iorwf	(??___fldiv+1)^(0+128),w
 24568  2782  0435               	iorwf	??___fldiv^(0+128),w
 24569  2783  1D03               	btfss	3,2
 24570  2784  2F87               	goto	l9875
 24571  2785  1C31               	btfss	___fldiv@b^(0+128),0
 24572  2786  2F89               	goto	l9877
 24573  2787                     l9875:	
 24574  2787  01C6               	clrf	___fldiv@aexp^(0+128)
 24575  2788  0AC6               	incf	___fldiv@aexp^(0+128),f
 24576  2789                     l9877:	
 24577  2789  0846               	movf	___fldiv@aexp^(0+128),w
 24578  278A  1903               	btfsc	3,2
 24579  278B  2FB2               	goto	l9887
 24580  278C  3001               	movlw	1
 24581  278D  07B1               	addwf	___fldiv@b^(0+128),f
 24582  278E  3000               	movlw	0
 24583  278F  3DB2               	addwfc	(___fldiv@b+1)^(0+128),f
 24584  2790  3000               	movlw	0
 24585  2791  3DB3               	addwfc	(___fldiv@b+2)^(0+128),f
 24586  2792  3000               	movlw	0
 24587  2793  3DB4               	addwfc	(___fldiv@b+3)^(0+128),f
 24588  2794  1C34               	btfss	(___fldiv@b+3)^(0+128),0
 24589  2795  2FB2               	goto	l9887
 24590  2796  0831               	movf	___fldiv@b^(0+128),w
 24591  2797  00B5               	movwf	??___fldiv^(0+128)
 24592  2798  0832               	movf	(___fldiv@b+1)^(0+128),w
 24593  2799  00B6               	movwf	(??___fldiv^(0+128)+1)
 24594  279A  0833               	movf	(___fldiv@b+2)^(0+128),w
 24595  279B  00B7               	movwf	(??___fldiv^(0+128)+2)
 24596  279C  0834               	movf	(___fldiv@b+3)^(0+128),w
 24597  279D  00B8               	movwf	(??___fldiv^(0+128)+3)
 24598  279E  3001               	movlw	1
 24599  279F  00B9               	movwf	(??___fldiv+4)^(0+128)
 24600  27A0                     u12695:	
 24601  27A0  37B8               	asrf	(??___fldiv^(0+128)+3),f
 24602  27A1  0CB7               	rrf	(??___fldiv^(0+128)+2),f
 24603  27A2  0CB6               	rrf	(??___fldiv^(0+128)+1),f
 24604  27A3  0CB5               	rrf	??___fldiv^(0+128),f
 24605  27A4  0BB9               	decfsz	(??___fldiv+4)^(0+128),f
 24606  27A5  2FA0               	goto	u12695
 24607  27A6  0838               	movf	(??___fldiv+3)^(0+128),w
 24608  27A7  00B4               	movwf	(___fldiv@b+3)^(0+128)
 24609  27A8  0837               	movf	(??___fldiv+2)^(0+128),w
 24610  27A9  00B3               	movwf	(___fldiv@b+2)^(0+128)
 24611  27AA  0836               	movf	(??___fldiv+1)^(0+128),w
 24612  27AB  00B2               	movwf	(___fldiv@b+1)^(0+128)
 24613  27AC  0835               	movf	??___fldiv^(0+128),w
 24614  27AD  00B1               	movwf	___fldiv@b^(0+128)
 24615  27AE  3001               	movlw	1
 24616  27AF  07BF               	addwf	___fldiv@new_exp^(0+128),f
 24617  27B0  3000               	movlw	0
 24618  27B1  3DC0               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24619  27B2                     l9887:	
 24620  27B2  0840               	movf	(___fldiv@new_exp+1)^(0+128),w
 24621  27B3  3A80               	xorlw	128
 24622  27B4  00B5               	movwf	??___fldiv^(0+128)
 24623  27B5  3080               	movlw	128
 24624  27B6  0235               	subwf	??___fldiv^(0+128),w
 24625  27B7  1D03               	skipz
 24626  27B8  2FBB               	goto	u12705
 24627  27B9  30FF               	movlw	255
 24628  27BA  023F               	subwf	___fldiv@new_exp^(0+128),w
 24629  27BB                     u12705:	
 24630  27BB  1C03               	skipc
 24631  27BC  2FCA               	goto	l1318
 24632  27BD  30FF               	movlw	255
 24633  27BE  0141               	movlb	1	; select bank1
 24634  27BF  00BF               	movwf	___fldiv@new_exp^(0+128)
 24635  27C0  3000               	movlw	0
 24636  27C1  00C0               	movwf	(___fldiv@new_exp^(0+128)+1)
 24637  27C2  3000               	movlw	0
 24638  27C3  00B4               	movwf	(___fldiv@b+3)^(0+128)
 24639  27C4  3000               	movlw	0
 24640  27C5  00B3               	movwf	(___fldiv@b+2)^(0+128)
 24641  27C6  3000               	movlw	0
 24642  27C7  00B2               	movwf	(___fldiv@b+1)^(0+128)
 24643  27C8  3000               	movlw	0
 24644  27C9  00B1               	movwf	___fldiv@b^(0+128)
 24645  27CA                     l1318:	
 24646  27CA  0141               	movlb	1	; select bank1
 24647  27CB  0840               	movf	(___fldiv@new_exp+1)^(0+128),w
 24648  27CC  3A80               	xorlw	128
 24649  27CD  00B5               	movwf	??___fldiv^(0+128)
 24650  27CE  3080               	movlw	128
 24651  27CF  0235               	subwf	??___fldiv^(0+128),w
 24652  27D0  1D03               	skipz
 24653  27D1  2FD4               	goto	u12715
 24654  27D2  3001               	movlw	1
 24655  27D3  023F               	subwf	___fldiv@new_exp^(0+128),w
 24656  27D4                     u12715:	
 24657  27D4  1803               	skipnc
 24658  27D5  2FE2               	goto	l1319
 24659  27D6  0141               	movlb	1	; select bank1
 24660  27D7  01BF               	clrf	___fldiv@new_exp^(0+128)
 24661  27D8  01C0               	clrf	(___fldiv@new_exp+1)^(0+128)
 24662  27D9  3000               	movlw	0
 24663  27DA  00B4               	movwf	(___fldiv@b+3)^(0+128)
 24664  27DB  3000               	movlw	0
 24665  27DC  00B3               	movwf	(___fldiv@b+2)^(0+128)
 24666  27DD  3000               	movlw	0
 24667  27DE  00B2               	movwf	(___fldiv@b+1)^(0+128)
 24668  27DF  3000               	movlw	0
 24669  27E0  00B1               	movwf	___fldiv@b^(0+128)
 24670  27E1  01BE               	clrf	___fldiv@sign^(0+128)
 24671  27E2                     l1319:	
 24672  27E2  0141               	movlb	1	; select bank1
 24673  27E3  083F               	movf	___fldiv@new_exp^(0+128),w
 24674  27E4  00B5               	movwf	??___fldiv^(0+128)
 24675  27E5  0835               	movf	??___fldiv^(0+128),w
 24676  27E6  00C5               	movwf	___fldiv@bexp^(0+128)
 24677  27E7  1C45               	btfss	___fldiv@bexp^(0+128),0
 24678  27E8  2FEB               	goto	l9901
 24679  27E9  17B3               	bsf	(___fldiv@b^(0+128)+2),7
 24680  27EA  2FEF               	goto	l1321
 24681  27EB                     l9901:	
 24682  27EB  307F               	movlw	127
 24683  27EC  00B5               	movwf	??___fldiv^(0+128)
 24684  27ED  0835               	movf	??___fldiv^(0+128),w
 24685  27EE  05B3               	andwf	(___fldiv@b^(0+128)+2),f
 24686  27EF                     l1321:	
 24687  27EF  3645               	lsrf	___fldiv@bexp^(0+128),w
 24688  27F0  00B5               	movwf	??___fldiv^(0+128)
 24689  27F1  0835               	movf	??___fldiv^(0+128),w
 24690  27F2  00B4               	movwf	(___fldiv@b^(0+128)+3)
 24691  27F3  083E               	movf	___fldiv@sign^(0+128),w
 24692  27F4  00B5               	movwf	??___fldiv^(0+128)
 24693  27F5  0835               	movf	??___fldiv^(0+128),w
 24694  27F6  04B4               	iorwf	(___fldiv@b^(0+128)+3),f
 24695  27F7  0834               	movf	(___fldiv@b+3)^(0+128),w
 24696  27F8  00B0               	movwf	(?___fldiv+3)^(0+128)
 24697  27F9  0833               	movf	(___fldiv@b+2)^(0+128),w
 24698  27FA  00AF               	movwf	(?___fldiv+2)^(0+128)
 24699  27FB  0832               	movf	(___fldiv@b+1)^(0+128),w
 24700  27FC  00AE               	movwf	(?___fldiv+1)^(0+128)
 24701  27FD  0831               	movf	___fldiv@b^(0+128),w
 24702  27FE  00AD               	movwf	?___fldiv^(0+128)
 24703  27FF  0008               	return
 24704  2800                     __end_of___fldiv:	
 24705                           
 24706                           	psect	text63
 24707  1E06                     __ptext63:	
 24708 ;; *************** function ___fladd *****************
 24709 ;; Defined at:
 24710 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcadd.c"
 24711 ;; Parameters:    Size  Location     Type
 24712 ;;  b               4   17[BANK1 ] unsigned char 
 24713 ;;  a               4   21[BANK1 ] unsigned char 
 24714 ;; Auto vars:     Size  Location     Type
 24715 ;;  grs             1   40[BANK1 ] unsigned char 
 24716 ;;  bexp            1   39[BANK1 ] unsigned char 
 24717 ;;  aexp            1   38[BANK1 ] unsigned char 
 24718 ;;  signs           1   37[BANK1 ] unsigned char 
 24719 ;; Return value:  Size  Location     Type
 24720 ;;                  4   17[BANK1 ] unsigned char 
 24721 ;; Registers used:
 24722 ;;		wreg, status,2, status,0
 24723 ;; Tracked objects:
 24724 ;;		On entry : 0/0
 24725 ;;		On exit  : 0/0
 24726 ;;		Unchanged: 0/0
 24727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24728 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24729 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24730 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24731 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24732 ;;Total ram usage:       24 bytes
 24733 ;; Hardware stack levels used:    1
 24734 ;; Hardware stack levels required when called:    3
 24735 ;; This function calls:
 24736 ;;		Nothing
 24737 ;; This function is called by:
 24738 ;;		_spinInput
 24739 ;;		_calcRequiredPower
 24740 ;;		_getAnalogValues
 24741 ;;		_sortCur
 24742 ;;		_channelThing
 24743 ;;		_ftoa
 24744 ;;		___flsub
 24745 ;; This function uses a non-reentrant model
 24746 ;;
 24747                           
 24748                           
 24749                           ;psect for function ___fladd
 24750  1E06                     ___fladd:	
 24751                           
 24752                           ;incstack = 0
 24753                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 24754  1E06  0141               	movlb	1	; select bank1
 24755  1E07  0834               	movf	(___fladd@b^(0+128)+3),w
 24756  1E08  3980               	andlw	128
 24757  1E09  00B9               	movwf	??___fladd^(0+128)
 24758  1E0A  0839               	movf	??___fladd^(0+128),w
 24759  1E0B  00C5               	movwf	___fladd@signs^(0+128)
 24760  1E0C  3534               	lslf	(___fladd@b^(0+128)+3),w
 24761  1E0D  00B9               	movwf	??___fladd^(0+128)
 24762  1E0E  0839               	movf	??___fladd^(0+128),w
 24763  1E0F  00C7               	movwf	___fladd@bexp^(0+128)
 24764  1E10  1BB3               	btfsc	(___fladd@b^(0+128)+2),7
 24765  1E11  1447               	bsf	___fladd@bexp^(0+128),0
 24766  1E12  0847               	movf	___fladd@bexp^(0+128),w
 24767  1E13  1903               	btfsc	3,2
 24768  1E14  2E23               	goto	l9343
 24769  1E15  0A47               	incf	___fladd@bexp^(0+128),w
 24770  1E16  1D03               	btfss	3,2
 24771  1E17  2E20               	goto	l9339
 24772  1E18  3000               	movlw	0
 24773  1E19  00B4               	movwf	(___fladd@b+3)^(0+128)
 24774  1E1A  3000               	movlw	0
 24775  1E1B  00B3               	movwf	(___fladd@b+2)^(0+128)
 24776  1E1C  3000               	movlw	0
 24777  1E1D  00B2               	movwf	(___fladd@b+1)^(0+128)
 24778  1E1E  3000               	movlw	0
 24779  1E1F  00B1               	movwf	___fladd@b^(0+128)
 24780  1E20                     l9339:	
 24781  1E20  17B3               	bsf	(___fladd@b^(0+128)+2),7
 24782  1E21  01B4               	clrf	(___fladd@b^(0+128)+3)
 24783  1E22  2E2B               	goto	l9345
 24784  1E23                     l9343:	
 24785  1E23  3000               	movlw	0
 24786  1E24  00B4               	movwf	(___fladd@b+3)^(0+128)
 24787  1E25  3000               	movlw	0
 24788  1E26  00B3               	movwf	(___fladd@b+2)^(0+128)
 24789  1E27  3000               	movlw	0
 24790  1E28  00B2               	movwf	(___fladd@b+1)^(0+128)
 24791  1E29  3000               	movlw	0
 24792  1E2A  00B1               	movwf	___fladd@b^(0+128)
 24793  1E2B                     l9345:	
 24794  1E2B  0838               	movf	(___fladd@a^(0+128)+3),w
 24795  1E2C  3980               	andlw	128
 24796  1E2D  00B9               	movwf	??___fladd^(0+128)
 24797  1E2E  0839               	movf	??___fladd^(0+128),w
 24798  1E2F  00C6               	movwf	___fladd@aexp^(0+128)
 24799  1E30  0846               	movf	___fladd@aexp^(0+128),w
 24800  1E31  0645               	xorwf	___fladd@signs^(0+128),w
 24801  1E32  1D03               	btfss	3,2
 24802  1E33  1745               	bsf	___fladd@signs^(0+128),6
 24803  1E34  3538               	lslf	(___fladd@a^(0+128)+3),w
 24804  1E35  00B9               	movwf	??___fladd^(0+128)
 24805  1E36  0839               	movf	??___fladd^(0+128),w
 24806  1E37  00C6               	movwf	___fladd@aexp^(0+128)
 24807  1E38  1BB7               	btfsc	(___fladd@a^(0+128)+2),7
 24808  1E39  1446               	bsf	___fladd@aexp^(0+128),0
 24809  1E3A  0846               	movf	___fladd@aexp^(0+128),w
 24810  1E3B  1903               	btfsc	3,2
 24811  1E3C  2E4B               	goto	l9367
 24812  1E3D  0A46               	incf	___fladd@aexp^(0+128),w
 24813  1E3E  1D03               	btfss	3,2
 24814  1E3F  2E48               	goto	l9363
 24815  1E40  3000               	movlw	0
 24816  1E41  00B8               	movwf	(___fladd@a+3)^(0+128)
 24817  1E42  3000               	movlw	0
 24818  1E43  00B7               	movwf	(___fladd@a+2)^(0+128)
 24819  1E44  3000               	movlw	0
 24820  1E45  00B6               	movwf	(___fladd@a+1)^(0+128)
 24821  1E46  3000               	movlw	0
 24822  1E47  00B5               	movwf	___fladd@a^(0+128)
 24823  1E48                     l9363:	
 24824  1E48  17B7               	bsf	(___fladd@a^(0+128)+2),7
 24825  1E49  01B8               	clrf	(___fladd@a^(0+128)+3)
 24826  1E4A  2E53               	goto	l1241
 24827  1E4B                     l9367:	
 24828  1E4B  3000               	movlw	0
 24829  1E4C  00B8               	movwf	(___fladd@a+3)^(0+128)
 24830  1E4D  3000               	movlw	0
 24831  1E4E  00B7               	movwf	(___fladd@a+2)^(0+128)
 24832  1E4F  3000               	movlw	0
 24833  1E50  00B6               	movwf	(___fladd@a+1)^(0+128)
 24834  1E51  3000               	movlw	0
 24835  1E52  00B5               	movwf	___fladd@a^(0+128)
 24836  1E53                     l1241:	
 24837  1E53  0847               	movf	___fladd@bexp^(0+128),w
 24838  1E54  0246               	subwf	___fladd@aexp^(0+128),w
 24839  1E55  1803               	skipnc
 24840  1E56  2E99               	goto	l9403
 24841  1E57  1F45               	btfss	___fladd@signs^(0+128),6
 24842  1E58  2E5D               	goto	l9373
 24843  1E59  3080               	movlw	128
 24844  1E5A  00B9               	movwf	??___fladd^(0+128)
 24845  1E5B  0839               	movf	??___fladd^(0+128),w
 24846  1E5C  06C5               	xorwf	___fladd@signs^(0+128),f
 24847  1E5D                     l9373:	
 24848  1E5D  0847               	movf	___fladd@bexp^(0+128),w
 24849  1E5E  00B9               	movwf	??___fladd^(0+128)
 24850  1E5F  0839               	movf	??___fladd^(0+128),w
 24851  1E60  00C8               	movwf	___fladd@grs^(0+128)
 24852  1E61  0846               	movf	___fladd@aexp^(0+128),w
 24853  1E62  00B9               	movwf	??___fladd^(0+128)
 24854  1E63  0839               	movf	??___fladd^(0+128),w
 24855  1E64  00C7               	movwf	___fladd@bexp^(0+128)
 24856  1E65  0848               	movf	___fladd@grs^(0+128),w
 24857  1E66  00B9               	movwf	??___fladd^(0+128)
 24858  1E67  0839               	movf	??___fladd^(0+128),w
 24859  1E68  00C6               	movwf	___fladd@aexp^(0+128)
 24860  1E69  0831               	movf	___fladd@b^(0+128),w
 24861  1E6A  00B9               	movwf	??___fladd^(0+128)
 24862  1E6B  0839               	movf	??___fladd^(0+128),w
 24863  1E6C  00C8               	movwf	___fladd@grs^(0+128)
 24864  1E6D  0835               	movf	___fladd@a^(0+128),w
 24865  1E6E  00B9               	movwf	??___fladd^(0+128)
 24866  1E6F  0839               	movf	??___fladd^(0+128),w
 24867  1E70  00B1               	movwf	___fladd@b^(0+128)
 24868  1E71  0848               	movf	___fladd@grs^(0+128),w
 24869  1E72  00B9               	movwf	??___fladd^(0+128)
 24870  1E73  0839               	movf	??___fladd^(0+128),w
 24871  1E74  00B5               	movwf	___fladd@a^(0+128)
 24872  1E75  0832               	movf	(___fladd@b^(0+128)+1),w
 24873  1E76  00B9               	movwf	??___fladd^(0+128)
 24874  1E77  0839               	movf	??___fladd^(0+128),w
 24875  1E78  00C8               	movwf	___fladd@grs^(0+128)
 24876  1E79  0836               	movf	(___fladd@a^(0+128)+1),w
 24877  1E7A  00B9               	movwf	??___fladd^(0+128)
 24878  1E7B  0839               	movf	??___fladd^(0+128),w
 24879  1E7C  00B2               	movwf	(___fladd@b^(0+128)+1)
 24880  1E7D  0848               	movf	___fladd@grs^(0+128),w
 24881  1E7E  00B9               	movwf	??___fladd^(0+128)
 24882  1E7F  0839               	movf	??___fladd^(0+128),w
 24883  1E80  00B6               	movwf	(___fladd@a^(0+128)+1)
 24884  1E81  0833               	movf	(___fladd@b^(0+128)+2),w
 24885  1E82  00B9               	movwf	??___fladd^(0+128)
 24886  1E83  0839               	movf	??___fladd^(0+128),w
 24887  1E84  00C8               	movwf	___fladd@grs^(0+128)
 24888  1E85  0837               	movf	(___fladd@a^(0+128)+2),w
 24889  1E86  00B9               	movwf	??___fladd^(0+128)
 24890  1E87  0839               	movf	??___fladd^(0+128),w
 24891  1E88  00B3               	movwf	(___fladd@b^(0+128)+2)
 24892  1E89  0848               	movf	___fladd@grs^(0+128),w
 24893  1E8A  00B9               	movwf	??___fladd^(0+128)
 24894  1E8B  0839               	movf	??___fladd^(0+128),w
 24895  1E8C  00B7               	movwf	(___fladd@a^(0+128)+2)
 24896  1E8D  0834               	movf	(___fladd@b^(0+128)+3),w
 24897  1E8E  00B9               	movwf	??___fladd^(0+128)
 24898  1E8F  0839               	movf	??___fladd^(0+128),w
 24899  1E90  00C8               	movwf	___fladd@grs^(0+128)
 24900  1E91  0838               	movf	(___fladd@a^(0+128)+3),w
 24901  1E92  00B9               	movwf	??___fladd^(0+128)
 24902  1E93  0839               	movf	??___fladd^(0+128),w
 24903  1E94  00B4               	movwf	(___fladd@b^(0+128)+3)
 24904  1E95  0848               	movf	___fladd@grs^(0+128),w
 24905  1E96  00B9               	movwf	??___fladd^(0+128)
 24906  1E97  0839               	movf	??___fladd^(0+128),w
 24907  1E98  00B8               	movwf	(___fladd@a^(0+128)+3)
 24908  1E99                     l9403:	
 24909  1E99  01C8               	clrf	___fladd@grs^(0+128)
 24910  1E9A  0847               	movf	___fladd@bexp^(0+128),w
 24911  1E9B  00B9               	movwf	??___fladd^(0+128)
 24912  1E9C  01BA               	clrf	(??___fladd^(0+128)+1)
 24913  1E9D  09B9               	comf	??___fladd^(0+128),f
 24914  1E9E  09BA               	comf	(??___fladd^(0+128)+1),f
 24915  1E9F  0AB9               	incf	??___fladd^(0+128),f
 24916  1EA0  1903               	skipnz
 24917  1EA1  0ABA               	incf	(??___fladd^(0+128)+1),f
 24918  1EA2  0846               	movf	___fladd@aexp^(0+128),w
 24919  1EA3  0739               	addwf	??___fladd^(0+128),w
 24920  1EA4  00BB               	movwf	(??___fladd+2)^(0+128)
 24921  1EA5  083A               	movf	(??___fladd+1)^(0+128),w
 24922  1EA6  1803               	skipnc
 24923  1EA7  0A3A               	incf	(??___fladd+1)^(0+128),w
 24924  1EA8  00BC               	movwf	((??___fladd+2)^(0+128)+1)
 24925  1EA9  083C               	movf	(??___fladd+3)^(0+128),w
 24926  1EAA  3A80               	xorlw	128
 24927  1EAB  00BD               	movwf	(??___fladd+4)^(0+128)
 24928  1EAC  3080               	movlw	128
 24929  1EAD  023D               	subwf	(??___fladd+4)^(0+128),w
 24930  1EAE  1D03               	skipz
 24931  1EAF  2EB2               	goto	u11645
 24932  1EB0  301A               	movlw	26
 24933  1EB1  023B               	subwf	(??___fladd+2)^(0+128),w
 24934  1EB2                     u11645:	
 24935  1EB2  1C03               	skipc
 24936  1EB3  2EE6               	goto	l9421
 24937  1EB4  0141               	movlb	1	; select bank1
 24938  1EB5  0834               	movf	(___fladd@b+3)^(0+128),w
 24939  1EB6  0433               	iorwf	(___fladd@b+2)^(0+128),w
 24940  1EB7  0432               	iorwf	(___fladd@b+1)^(0+128),w
 24941  1EB8  0431               	iorwf	___fladd@b^(0+128),w
 24942  1EB9  1903               	btfsc	3,2
 24943  1EBA  2EBD               	goto	u11650
 24944  1EBB  3001               	movlw	1
 24945  1EBC  2EBE               	goto	u11660
 24946  1EBD                     u11650:	
 24947  1EBD  3000               	movlw	0
 24948  1EBE                     u11660:	
 24949  1EBE  00B9               	movwf	??___fladd^(0+128)
 24950  1EBF  0839               	movf	??___fladd^(0+128),w
 24951  1EC0  00C8               	movwf	___fladd@grs^(0+128)
 24952  1EC1  3000               	movlw	0
 24953  1EC2  00B4               	movwf	(___fladd@b+3)^(0+128)
 24954  1EC3  3000               	movlw	0
 24955  1EC4  00B3               	movwf	(___fladd@b+2)^(0+128)
 24956  1EC5  3000               	movlw	0
 24957  1EC6  00B2               	movwf	(___fladd@b+1)^(0+128)
 24958  1EC7  3000               	movlw	0
 24959  1EC8  00B1               	movwf	___fladd@b^(0+128)
 24960  1EC9  0846               	movf	___fladd@aexp^(0+128),w
 24961  1ECA  00B9               	movwf	??___fladd^(0+128)
 24962  1ECB  0839               	movf	??___fladd^(0+128),w
 24963  1ECC  00C7               	movwf	___fladd@bexp^(0+128)
 24964  1ECD  2EEB               	goto	l1245
 24965  1ECE                     l1247:	
 24966  1ECE  1C48               	btfss	___fladd@grs^(0+128),0
 24967  1ECF  2ED6               	goto	l9411
 24968  1ED0  3648               	lsrf	___fladd@grs^(0+128),w
 24969  1ED1  3801               	iorlw	1
 24970  1ED2  00B9               	movwf	??___fladd^(0+128)
 24971  1ED3  0839               	movf	??___fladd^(0+128),w
 24972  1ED4  00C8               	movwf	___fladd@grs^(0+128)
 24973  1ED5  2ED8               	goto	l9413
 24974  1ED6                     l9411:	
 24975  1ED6  1003               	clrc
 24976  1ED7  0CC8               	rrf	___fladd@grs^(0+128),f
 24977  1ED8                     l9413:	
 24978  1ED8  1831               	btfsc	___fladd@b^(0+128),0
 24979  1ED9  17C8               	bsf	___fladd@grs^(0+128),7
 24980  1EDA  3001               	movlw	1
 24981  1EDB  00B9               	movwf	??___fladd^(0+128)
 24982  1EDC                     u11695:	
 24983  1EDC  37B4               	asrf	(___fladd@b+3)^(0+128),f
 24984  1EDD  0CB3               	rrf	(___fladd@b+2)^(0+128),f
 24985  1EDE  0CB2               	rrf	(___fladd@b+1)^(0+128),f
 24986  1EDF  0CB1               	rrf	___fladd@b^(0+128),f
 24987  1EE0  0BB9               	decfsz	(??___fladd^(0+128))& (0+127),f
 24988  1EE1  2EDC               	goto	u11695
 24989  1EE2  3001               	movlw	1
 24990  1EE3  00B9               	movwf	??___fladd^(0+128)
 24991  1EE4  0839               	movf	??___fladd^(0+128),w
 24992  1EE5  07C7               	addwf	___fladd@bexp^(0+128),f
 24993  1EE6                     l9421:	
 24994  1EE6  0141               	movlb	1	; select bank1
 24995  1EE7  0846               	movf	___fladd@aexp^(0+128),w
 24996  1EE8  0247               	subwf	___fladd@bexp^(0+128),w
 24997  1EE9  1C03               	skipc
 24998  1EEA  2ECE               	goto	l1247
 24999  1EEB                     l1245:	
 25000  1EEB  1B45               	btfsc	___fladd@signs^(0+128),6
 25001  1EEC  2F1C               	goto	l9447
 25002  1EED  0847               	movf	___fladd@bexp^(0+128),w
 25003  1EEE  1D03               	btfss	3,2
 25004  1EEF  2EF9               	goto	l9429
 25005  1EF0  3000               	movlw	0
 25006  1EF1  00B4               	movwf	(?___fladd+3)^(0+128)
 25007  1EF2  3000               	movlw	0
 25008  1EF3  00B3               	movwf	(?___fladd+2)^(0+128)
 25009  1EF4  3000               	movlw	0
 25010  1EF5  00B2               	movwf	(?___fladd+1)^(0+128)
 25011  1EF6  3000               	movlw	0
 25012  1EF7  00B1               	movwf	?___fladd^(0+128)
 25013  1EF8  0008               	return
 25014  1EF9                     l9429:	
 25015  1EF9  0835               	movf	___fladd@a^(0+128),w
 25016  1EFA  07B1               	addwf	___fladd@b^(0+128),f
 25017  1EFB  0836               	movf	(___fladd@a+1)^(0+128),w
 25018  1EFC  3DB2               	addwfc	(___fladd@b+1)^(0+128),f
 25019  1EFD  0837               	movf	(___fladd@a+2)^(0+128),w
 25020  1EFE  3DB3               	addwfc	(___fladd@b+2)^(0+128),f
 25021  1EFF  0838               	movf	(___fladd@a+3)^(0+128),w
 25022  1F00  3DB4               	addwfc	(___fladd@b+3)^(0+128),f
 25023  1F01  1C34               	btfss	(___fladd@b+3)^(0+128),0
 25024  1F02  2FA9               	goto	l9481
 25025  1F03  1C48               	btfss	___fladd@grs^(0+128),0
 25026  1F04  2F0B               	goto	l9437
 25027  1F05  3648               	lsrf	___fladd@grs^(0+128),w
 25028  1F06  3801               	iorlw	1
 25029  1F07  00B9               	movwf	??___fladd^(0+128)
 25030  1F08  0839               	movf	??___fladd^(0+128),w
 25031  1F09  00C8               	movwf	___fladd@grs^(0+128)
 25032  1F0A  2F0D               	goto	l9439
 25033  1F0B                     l9437:	
 25034  1F0B  1003               	clrc
 25035  1F0C  0CC8               	rrf	___fladd@grs^(0+128),f
 25036  1F0D                     l9439:	
 25037  1F0D  1831               	btfsc	___fladd@b^(0+128),0
 25038  1F0E  17C8               	bsf	___fladd@grs^(0+128),7
 25039  1F0F  3001               	movlw	1
 25040  1F10  00B9               	movwf	??___fladd^(0+128)
 25041  1F11                     u11765:	
 25042  1F11  37B4               	asrf	(___fladd@b+3)^(0+128),f
 25043  1F12  0CB3               	rrf	(___fladd@b+2)^(0+128),f
 25044  1F13  0CB2               	rrf	(___fladd@b+1)^(0+128),f
 25045  1F14  0CB1               	rrf	___fladd@b^(0+128),f
 25046  1F15  0BB9               	decfsz	(??___fladd^(0+128))& (0+127),f
 25047  1F16  2F11               	goto	u11765
 25048  1F17  3001               	movlw	1
 25049  1F18  00B9               	movwf	??___fladd^(0+128)
 25050  1F19  0839               	movf	??___fladd^(0+128),w
 25051  1F1A  07C7               	addwf	___fladd@bexp^(0+128),f
 25052  1F1B  2FA9               	goto	l9481
 25053  1F1C                     l9447:	
 25054  1F1C  0834               	movf	(___fladd@b+3)^(0+128),w
 25055  1F1D  3A80               	xorlw	128
 25056  1F1E  00B9               	movwf	??___fladd^(0+128)
 25057  1F1F  0838               	movf	(___fladd@a+3)^(0+128),w
 25058  1F20  3A80               	xorlw	128
 25059  1F21  0239               	subwf	??___fladd^(0+128),w
 25060  1F22  1D03               	skipz
 25061  1F23  2F2E               	goto	u11773
 25062  1F24  0837               	movf	(___fladd@a+2)^(0+128),w
 25063  1F25  0233               	subwf	(___fladd@b+2)^(0+128),w
 25064  1F26  1D03               	skipz
 25065  1F27  2F2E               	goto	u11773
 25066  1F28  0836               	movf	(___fladd@a+1)^(0+128),w
 25067  1F29  0232               	subwf	(___fladd@b+1)^(0+128),w
 25068  1F2A  1D03               	skipz
 25069  1F2B  2F2E               	goto	u11773
 25070  1F2C  0835               	movf	___fladd@a^(0+128),w
 25071  1F2D  0231               	subwf	___fladd@b^(0+128),w
 25072  1F2E                     u11773:	
 25073  1F2E  1803               	skipnc
 25074  1F2F  2F79               	goto	l9457
 25075  1F30  30FF               	movlw	255
 25076  1F31  00B9               	movwf	??___fladd^(0+128)
 25077  1F32  30FF               	movlw	255
 25078  1F33  00BA               	movwf	(??___fladd^(0+128)+1)
 25079  1F34  30FF               	movlw	255
 25080  1F35  00BB               	movwf	(??___fladd^(0+128)+2)
 25081  1F36  30FF               	movlw	255
 25082  1F37  00BC               	movwf	(??___fladd^(0+128)+3)
 25083  1F38  0835               	movf	___fladd@a^(0+128),w
 25084  1F39  00BD               	movwf	(??___fladd+4)^(0+128)
 25085  1F3A  0836               	movf	(___fladd@a+1)^(0+128),w
 25086  1F3B  00BE               	movwf	((??___fladd+4)^(0+128)+1)
 25087  1F3C  0837               	movf	(___fladd@a+2)^(0+128),w
 25088  1F3D  00BF               	movwf	((??___fladd+4)^(0+128)+2)
 25089  1F3E  0838               	movf	(___fladd@a+3)^(0+128),w
 25090  1F3F  00C0               	movwf	((??___fladd+4)^(0+128)+3)
 25091  1F40  0931               	comf	___fladd@b^(0+128),w
 25092  1F41  00C1               	movwf	(??___fladd+8)^(0+128)
 25093  1F42  0932               	comf	(___fladd@b+1)^(0+128),w
 25094  1F43  00C2               	movwf	((??___fladd+8)^(0+128)+1)
 25095  1F44  0933               	comf	(___fladd@b+2)^(0+128),w
 25096  1F45  00C3               	movwf	((??___fladd+8)^(0+128)+2)
 25097  1F46  0934               	comf	(___fladd@b+3)^(0+128),w
 25098  1F47  00C4               	movwf	((??___fladd+8)^(0+128)+3)
 25099  1F48  0AC1               	incf	(??___fladd+8)^(0+128),f
 25100  1F49  1903               	skipnz
 25101  1F4A  0AC2               	incf	((??___fladd+8)^(0+128)+1),f
 25102  1F4B  1903               	skipnz
 25103  1F4C  0AC3               	incf	((??___fladd+8)^(0+128)+2),f
 25104  1F4D  1903               	skipnz
 25105  1F4E  0AC4               	incf	((??___fladd+8)^(0+128)+3),f
 25106  1F4F  0841               	movf	(??___fladd+8)^(0+128),w
 25107  1F50  07BD               	addwf	(??___fladd+4)^(0+128),f
 25108  1F51  0842               	movf	(??___fladd+9)^(0+128),w
 25109  1F52  3DBE               	addwfc	((??___fladd+4)^(0+128)+1),f
 25110  1F53  0843               	movf	(??___fladd+10)^(0+128),w
 25111  1F54  3DBF               	addwfc	((??___fladd+4)^(0+128)+2),f
 25112  1F55  0844               	movf	(??___fladd+11)^(0+128),w
 25113  1F56  3DC0               	addwfc	((??___fladd+4)^(0+128)+3),f
 25114  1F57  083D               	movf	(??___fladd+4)^(0+128),w
 25115  1F58  07B9               	addwf	??___fladd^(0+128),f
 25116  1F59  083E               	movf	(??___fladd+5)^(0+128),w
 25117  1F5A  3DBA               	addwfc	(??___fladd^(0+128)+1),f
 25118  1F5B  083F               	movf	(??___fladd+6)^(0+128),w
 25119  1F5C  3DBB               	addwfc	(??___fladd^(0+128)+2),f
 25120  1F5D  0840               	movf	(??___fladd+7)^(0+128),w
 25121  1F5E  3DBC               	addwfc	(??___fladd^(0+128)+3),f
 25122  1F5F  083C               	movf	(??___fladd+3)^(0+128),w
 25123  1F60  00B4               	movwf	(___fladd@b+3)^(0+128)
 25124  1F61  083B               	movf	(??___fladd+2)^(0+128),w
 25125  1F62  00B3               	movwf	(___fladd@b+2)^(0+128)
 25126  1F63  083A               	movf	(??___fladd+1)^(0+128),w
 25127  1F64  00B2               	movwf	(___fladd@b+1)^(0+128)
 25128  1F65  0839               	movf	??___fladd^(0+128),w
 25129  1F66  00B1               	movwf	___fladd@b^(0+128)
 25130  1F67  3080               	movlw	128
 25131  1F68  00B9               	movwf	??___fladd^(0+128)
 25132  1F69  0839               	movf	??___fladd^(0+128),w
 25133  1F6A  06C5               	xorwf	___fladd@signs^(0+128),f
 25134  1F6B  09C8               	comf	___fladd@grs^(0+128),f
 25135  1F6C  0AC8               	incf	___fladd@grs^(0+128),f
 25136  1F6D  0848               	movf	___fladd@grs^(0+128),w
 25137  1F6E  1D03               	btfss	3,2
 25138  1F6F  2F81               	goto	l1262
 25139  1F70  3001               	movlw	1
 25140  1F71  07B1               	addwf	___fladd@b^(0+128),f
 25141  1F72  3000               	movlw	0
 25142  1F73  3DB2               	addwfc	(___fladd@b+1)^(0+128),f
 25143  1F74  3000               	movlw	0
 25144  1F75  3DB3               	addwfc	(___fladd@b+2)^(0+128),f
 25145  1F76  3000               	movlw	0
 25146  1F77  3DB4               	addwfc	(___fladd@b+3)^(0+128),f
 25147  1F78  2F81               	goto	l1262
 25148  1F79                     l9457:	
 25149  1F79  0835               	movf	___fladd@a^(0+128),w
 25150  1F7A  02B1               	subwf	___fladd@b^(0+128),f
 25151  1F7B  0836               	movf	(___fladd@a+1)^(0+128),w
 25152  1F7C  3BB2               	subwfb	(___fladd@b+1)^(0+128),f
 25153  1F7D  0837               	movf	(___fladd@a+2)^(0+128),w
 25154  1F7E  3BB3               	subwfb	(___fladd@b+2)^(0+128),f
 25155  1F7F  0838               	movf	(___fladd@a+3)^(0+128),w
 25156  1F80  3BB4               	subwfb	(___fladd@b+3)^(0+128),f
 25157  1F81                     l1262:	
 25158  1F81  0834               	movf	(___fladd@b+3)^(0+128),w
 25159  1F82  0433               	iorwf	(___fladd@b+2)^(0+128),w
 25160  1F83  0432               	iorwf	(___fladd@b+1)^(0+128),w
 25161  1F84  0431               	iorwf	___fladd@b^(0+128),w
 25162  1F85  1D03               	skipz
 25163  1F86  2FA7               	goto	l9479
 25164  1F87  0848               	movf	___fladd@grs^(0+128),w
 25165  1F88  1D03               	btfss	3,2
 25166  1F89  2FA7               	goto	l9479
 25167  1F8A  3000               	movlw	0
 25168  1F8B  00B4               	movwf	(?___fladd+3)^(0+128)
 25169  1F8C  3000               	movlw	0
 25170  1F8D  00B3               	movwf	(?___fladd+2)^(0+128)
 25171  1F8E  3000               	movlw	0
 25172  1F8F  00B2               	movwf	(?___fladd+1)^(0+128)
 25173  1F90  3000               	movlw	0
 25174  1F91  00B1               	movwf	?___fladd^(0+128)
 25175  1F92  0008               	return
 25176  1F93                     l9465:	
 25177  1F93  3001               	movlw	1
 25178  1F94                     u11815:	
 25179  1F94  35B1               	lslf	___fladd@b^(0+128),f
 25180  1F95  0DB2               	rlf	(___fladd@b+1)^(0+128),f
 25181  1F96  0DB3               	rlf	(___fladd@b+2)^(0+128),f
 25182  1F97  0DB4               	rlf	(___fladd@b+3)^(0+128),f
 25183  1F98  0B89               	decfsz	9,f
 25184  1F99  2F94               	goto	u11815
 25185  1F9A  1BC8               	btfsc	___fladd@grs^(0+128),7
 25186  1F9B  1431               	bsf	___fladd@b^(0+128),0
 25187  1F9C  1C48               	btfss	___fladd@grs^(0+128),0
 25188  1F9D  2FA0               	goto	l9473
 25189  1F9E  1403               	setc
 25190  1F9F  2FA1               	goto	L24
 25191  1FA0                     l9473:	
 25192  1FA0  1003               	clrc
 25193  1FA1                     L24:	
 25194  1FA1  0DC8               	rlf	___fladd@grs^(0+128),f
 25195  1FA2  0847               	movf	___fladd@bexp^(0+128),w
 25196  1FA3  1903               	btfsc	3,2
 25197  1FA4  2FA7               	goto	l9479
 25198  1FA5  3001               	movlw	1
 25199  1FA6  02C7               	subwf	___fladd@bexp^(0+128),f
 25200  1FA7                     l9479:	
 25201  1FA7  1FB3               	btfss	(___fladd@b+2)^(0+128),7
 25202  1FA8  2F93               	goto	l9465
 25203  1FA9                     l9481:	
 25204  1FA9  01C6               	clrf	___fladd@aexp^(0+128)
 25205  1FAA  1FC8               	btfss	___fladd@grs^(0+128),7
 25206  1FAB  2FB4               	goto	l9491
 25207  1FAC  0848               	movf	___fladd@grs^(0+128),w
 25208  1FAD  397F               	andlw	127
 25209  1FAE  1D03               	btfss	3,2
 25210  1FAF  2FB2               	goto	l9489
 25211  1FB0  1C31               	btfss	___fladd@b^(0+128),0
 25212  1FB1  2FB4               	goto	l9491
 25213  1FB2                     l9489:	
 25214  1FB2  01C6               	clrf	___fladd@aexp^(0+128)
 25215  1FB3  0AC6               	incf	___fladd@aexp^(0+128),f
 25216  1FB4                     l9491:	
 25217  1FB4  0846               	movf	___fladd@aexp^(0+128),w
 25218  1FB5  1903               	btfsc	3,2
 25219  1FB6  2FE0               	goto	l1275
 25220  1FB7  3001               	movlw	1
 25221  1FB8  07B1               	addwf	___fladd@b^(0+128),f
 25222  1FB9  3000               	movlw	0
 25223  1FBA  3DB2               	addwfc	(___fladd@b+1)^(0+128),f
 25224  1FBB  3000               	movlw	0
 25225  1FBC  3DB3               	addwfc	(___fladd@b+2)^(0+128),f
 25226  1FBD  3000               	movlw	0
 25227  1FBE  3DB4               	addwfc	(___fladd@b+3)^(0+128),f
 25228  1FBF  1C34               	btfss	(___fladd@b+3)^(0+128),0
 25229  1FC0  2FE0               	goto	l1275
 25230  1FC1  0831               	movf	___fladd@b^(0+128),w
 25231  1FC2  00B9               	movwf	??___fladd^(0+128)
 25232  1FC3  0832               	movf	(___fladd@b+1)^(0+128),w
 25233  1FC4  00BA               	movwf	(??___fladd^(0+128)+1)
 25234  1FC5  0833               	movf	(___fladd@b+2)^(0+128),w
 25235  1FC6  00BB               	movwf	(??___fladd^(0+128)+2)
 25236  1FC7  0834               	movf	(___fladd@b+3)^(0+128),w
 25237  1FC8  00BC               	movwf	(??___fladd^(0+128)+3)
 25238  1FC9  3001               	movlw	1
 25239  1FCA  00BD               	movwf	(??___fladd+4)^(0+128)
 25240  1FCB                     u11915:	
 25241  1FCB  37BC               	asrf	(??___fladd^(0+128)+3),f
 25242  1FCC  0CBB               	rrf	(??___fladd^(0+128)+2),f
 25243  1FCD  0CBA               	rrf	(??___fladd^(0+128)+1),f
 25244  1FCE  0CB9               	rrf	??___fladd^(0+128),f
 25245  1FCF  0BBD               	decfsz	(??___fladd+4)^(0+128),f
 25246  1FD0  2FCB               	goto	u11915
 25247  1FD1  083C               	movf	(??___fladd+3)^(0+128),w
 25248  1FD2  00B4               	movwf	(___fladd@b+3)^(0+128)
 25249  1FD3  083B               	movf	(??___fladd+2)^(0+128),w
 25250  1FD4  00B3               	movwf	(___fladd@b+2)^(0+128)
 25251  1FD5  083A               	movf	(??___fladd+1)^(0+128),w
 25252  1FD6  00B2               	movwf	(___fladd@b+1)^(0+128)
 25253  1FD7  0839               	movf	??___fladd^(0+128),w
 25254  1FD8  00B1               	movwf	___fladd@b^(0+128)
 25255  1FD9  0A47               	incf	___fladd@bexp^(0+128),w
 25256  1FDA  1903               	btfsc	3,2
 25257  1FDB  2FE0               	goto	l1275
 25258  1FDC  3001               	movlw	1
 25259  1FDD  00B9               	movwf	??___fladd^(0+128)
 25260  1FDE  0839               	movf	??___fladd^(0+128),w
 25261  1FDF  07C7               	addwf	___fladd@bexp^(0+128),f
 25262  1FE0                     l1275:	
 25263  1FE0  0A47               	incf	___fladd@bexp^(0+128),w
 25264  1FE1  1D03               	btfss	3,2
 25265  1FE2  0847               	movf	___fladd@bexp^(0+128),w
 25266  1FE3  1D03               	btfss	3,2
 25267  1FE4  2FF0               	goto	l9509
 25268  1FE5  3000               	movlw	0
 25269  1FE6  00B4               	movwf	(___fladd@b+3)^(0+128)
 25270  1FE7  3000               	movlw	0
 25271  1FE8  00B3               	movwf	(___fladd@b+2)^(0+128)
 25272  1FE9  3000               	movlw	0
 25273  1FEA  00B2               	movwf	(___fladd@b+1)^(0+128)
 25274  1FEB  3000               	movlw	0
 25275  1FEC  00B1               	movwf	___fladd@b^(0+128)
 25276  1FED  0847               	movf	___fladd@bexp^(0+128),w
 25277  1FEE  1903               	btfsc	3,2
 25278  1FEF  01C5               	clrf	___fladd@signs^(0+128)
 25279  1FF0                     l9509:	
 25280  1FF0  1C47               	btfss	___fladd@bexp^(0+128),0
 25281  1FF1  2FF4               	goto	l9513
 25282  1FF2  17B3               	bsf	(___fladd@b^(0+128)+2),7
 25283  1FF3  2FF8               	goto	l1283
 25284  1FF4                     l9513:	
 25285  1FF4  307F               	movlw	127
 25286  1FF5  00B9               	movwf	??___fladd^(0+128)
 25287  1FF6  0839               	movf	??___fladd^(0+128),w
 25288  1FF7  05B3               	andwf	(___fladd@b^(0+128)+2),f
 25289  1FF8                     l1283:	
 25290  1FF8  3647               	lsrf	___fladd@bexp^(0+128),w
 25291  1FF9  00B9               	movwf	??___fladd^(0+128)
 25292  1FFA  0839               	movf	??___fladd^(0+128),w
 25293  1FFB  00B4               	movwf	(___fladd@b^(0+128)+3)
 25294  1FFC  1FC5               	btfss	___fladd@signs^(0+128),7
 25295  1FFD  0008               	return
 25296  1FFE  17B4               	bsf	(___fladd@b^(0+128)+3),7
 25297  1FFF  0008               	return
 25298  2000                     __end_of___fladd:	
 25299                           
 25300                           	psect	text64
 25301  3EEF                     __ptext64:	
 25302 ;; *************** function _OLED_loadSpecialChars *****************
 25303 ;; Defined at:
 25304 ;;		line 163 in file "oled.c"
 25305 ;; Parameters:    Size  Location     Type
 25306 ;;		None
 25307 ;; Auto vars:     Size  Location     Type
 25308 ;;  n               1   20[BANK0 ] unsigned char 
 25309 ;; Return value:  Size  Location     Type
 25310 ;;                  1    wreg      void 
 25311 ;; Registers used:
 25312 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 25313 ;; Tracked objects:
 25314 ;;		On entry : 0/0
 25315 ;;		On exit  : 0/0
 25316 ;;		Unchanged: 0/0
 25317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25322 ;;Total ram usage:        2 bytes
 25323 ;; Hardware stack levels used:    1
 25324 ;; Hardware stack levels required when called:    6
 25325 ;; This function calls:
 25326 ;;		_OLED_command
 25327 ;;		_OLED_write
 25328 ;; This function is called by:
 25329 ;;		_main
 25330 ;; This function uses a non-reentrant model
 25331 ;;
 25332                           
 25333                           
 25334                           ;psect for function _OLED_loadSpecialChars
 25335  3EEF                     _OLED_loadSpecialChars:	
 25336                           
 25337                           ;oled.c: 165:  uint8_t n;;oled.c: 167:  OLED_command(0x40 + 8);
 25338                           
 25339                           ;incstack = 0
 25340                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 25341  3EEF  3048               	movlw	72
 25342  3EF0  31BE  264D  31BE   	fcall	_OLED_command
 25343                           
 25344                           ;oled.c: 168:  for(n = 0; n < sizeof(specialChars); n++) {
 25345  3EF3  0140               	movlb	0	; select bank0
 25346  3EF4  01B4               	clrf	OLED_loadSpecialChars@n
 25347  3EF5                     L25:	
 25348  3EF5  3020               	movlw	32
 25349  3EF6  0234               	subwf	OLED_loadSpecialChars@n,w
 25350  3EF7  1803               	btfsc	3,0
 25351  3EF8  0008               	return
 25352                           
 25353                           ;oled.c: 169:   OLED_write(specialChars[n]);
 25354  3EF9  0834               	movf	OLED_loadSpecialChars@n,w
 25355  3EFA  3EDC               	addlw	low (_specialChars| (0+32768))
 25356  3EFB  0084               	movwf	4
 25357  3EFC  30B8               	movlw	high (_specialChars| (0+32768))
 25358  3EFD  1803               	skipnc
 25359  3EFE  3E01               	addlw	1
 25360  3EFF  0085               	movwf	5
 25361  3F00  0800               	movf	0,w	;code access
 25362  3F01  31BE  266B  31BE   	fcall	_OLED_write
 25363                           
 25364                           ;oled.c: 170:  }
 25365  3F04  3001               	movlw	1
 25366  3F05  0140               	movlb	0	; select bank0
 25367  3F06  00B3               	movwf	??_OLED_loadSpecialChars
 25368  3F07  0833               	movf	??_OLED_loadSpecialChars,w
 25369  3F08  07B4               	addwf	OLED_loadSpecialChars@n,f
 25370  3F09  2EF5               	goto	L25
 25371  3F0A                     __end_of_OLED_loadSpecialChars:	
 25372                           
 25373                           	psect	text65
 25374  3E6B                     __ptext65:	
 25375 ;; *************** function _OLED_write *****************
 25376 ;; Defined at:
 25377 ;;		line 84 in file "oled.c"
 25378 ;; Parameters:    Size  Location     Type
 25379 ;;  value           1    wreg     unsigned char 
 25380 ;; Auto vars:     Size  Location     Type
 25381 ;;  value           1   18[BANK0 ] unsigned char 
 25382 ;; Return value:  Size  Location     Type
 25383 ;;                  1    wreg      void 
 25384 ;; Registers used:
 25385 ;;		wreg, status,2, status,0, pclath, cstack
 25386 ;; Tracked objects:
 25387 ;;		On entry : 0/0
 25388 ;;		On exit  : 0/0
 25389 ;;		Unchanged: 0/0
 25390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25395 ;;Total ram usage:        1 bytes
 25396 ;; Hardware stack levels used:    1
 25397 ;; Hardware stack levels required when called:    5
 25398 ;; This function calls:
 25399 ;;		_OLED_send
 25400 ;;		_OLED_waitForReady
 25401 ;; This function is called by:
 25402 ;;		_OLED_print_xy
 25403 ;;		_OLED_loadSpecialChars
 25404 ;;		_OLED_print
 25405 ;; This function uses a non-reentrant model
 25406 ;;
 25407                           
 25408                           
 25409                           ;psect for function _OLED_write
 25410  3E6B                     _OLED_write:	
 25411                           
 25412                           ;incstack = 0
 25413                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 25414                           ;OLED_write@value stored from wreg
 25415  3E6B  0140               	movlb	0	; select bank0
 25416  3E6C  00B2               	movwf	OLED_write@value
 25417                           
 25418                           ;oled.c: 84: void OLED_write(uint8_t value);oled.c: 85: {;oled.c: 86:  OLED_send(value, 
      +                          1);
 25419  3E6D  01AF               	clrf	OLED_send@mode
 25420  3E6E  0AAF               	incf	OLED_send@mode,f
 25421  3E6F  0832               	movf	OLED_write@value,w
 25422  3E70  31BE  26D8  31BE   	fcall	_OLED_send
 25423                           
 25424                           ;oled.c: 87:  OLED_waitForReady();
 25425  3E73  31B0  2003         	fcall	_OLED_waitForReady
 25426  3E75  0008               	return
 25427  3E76                     __end_of_OLED_write:	
 25428                           
 25429                           	psect	text66
 25430  292F                     __ptext66:	
 25431 ;; *************** function _OLED_init *****************
 25432 ;; Defined at:
 25433 ;;		line 90 in file "oled.c"
 25434 ;; Parameters:    Size  Location     Type
 25435 ;;		None
 25436 ;; Auto vars:     Size  Location     Type
 25437 ;;		None
 25438 ;; Return value:  Size  Location     Type
 25439 ;;                  1    wreg      void 
 25440 ;; Registers used:
 25441 ;;		wreg, status,2, status,0, pclath, cstack
 25442 ;; Tracked objects:
 25443 ;;		On entry : 0/0
 25444 ;;		On exit  : 0/0
 25445 ;;		Unchanged: 0/0
 25446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25451 ;;Total ram usage:        1 bytes
 25452 ;; Hardware stack levels used:    1
 25453 ;; Hardware stack levels required when called:    6
 25454 ;; This function calls:
 25455 ;;		_OLED_command
 25456 ;;		_OLED_write4bits
 25457 ;; This function is called by:
 25458 ;;		_main
 25459 ;; This function uses a non-reentrant model
 25460 ;;
 25461                           
 25462                           
 25463                           ;psect for function _OLED_init
 25464  292F                     _OLED_init:	
 25465                           
 25466                           ;oled.c: 92:  LATBbits.LATB4 = 0;
 25467                           
 25468                           ;incstack = 0
 25469                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 25470  292F  0140               	movlb	0	; select bank0
 25471  2930  1219               	bcf	25,4	;volatile
 25472                           
 25473                           ;oled.c: 93:  LATBbits.LATB2 = 0;
 25474  2931  1119               	bcf	25,2	;volatile
 25475                           
 25476                           ;oled.c: 94:  LATBbits.LATB3 = 0;
 25477  2932  1199               	bcf	25,3	;volatile
 25478                           
 25479                           ;oled.c: 96:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 25480  2933  3041               	movlw	65
 25481  2934  0140               	movlb	0	; select bank0
 25482  2935  00B3               	movwf	??_OLED_init
 25483  2936  30EE               	movlw	238
 25484  2937                     u14927:	
 25485  2937  0B89               	decfsz	9,f
 25486  2938  2937               	goto	u14927
 25487  2939  0BB3               	decfsz	??_OLED_init,f
 25488  293A  2937               	goto	u14927
 25489  293B  0000               	nop
 25490                           
 25491                           ;oled.c: 100:  LATBbits.LATB1 = 0;
 25492  293C  0140               	movlb	0	; select bank0
 25493  293D  1099               	bcf	25,1	;volatile
 25494                           
 25495                           ;oled.c: 101:  LATBbits.LATB0 = 0;
 25496  293E  1019               	bcf	25,0	;volatile
 25497                           
 25498                           ;oled.c: 102:  LATCbits.LATC5 = 0;
 25499  293F  129A               	bcf	26,5	;volatile
 25500                           
 25501                           ;oled.c: 103:  LATCbits.LATC4 = 0;
 25502  2940  121A               	bcf	26,4	;volatile
 25503                           
 25504                           ;oled.c: 114:  OLED_write4bits(0x03);
 25505  2941  3003               	movlw	3
 25506  2942  31B1  21B9  31A9   	fcall	_OLED_write4bits
 25507                           
 25508                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25509  2945  3007               	movlw	7
 25510  2946  0140               	movlb	0	; select bank0
 25511  2947  00B3               	movwf	??_OLED_init
 25512  2948  307D               	movlw	125
 25513  2949                     u14937:	
 25514  2949  0B89               	decfsz	9,f
 25515  294A  2949               	goto	u14937
 25516  294B  0BB3               	decfsz	??_OLED_init,f
 25517  294C  2949               	goto	u14937
 25518                           
 25519                           ;oled.c: 116:  OLED_write4bits(0x08);
 25520  294D  3008               	movlw	8
 25521  294E  31B1  21B9  31A9   	fcall	_OLED_write4bits
 25522                           
 25523                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25524  2951  3007               	movlw	7
 25525  2952  0140               	movlb	0	; select bank0
 25526  2953  00B3               	movwf	??_OLED_init
 25527  2954  307D               	movlw	125
 25528  2955                     u14947:	
 25529  2955  0B89               	decfsz	9,f
 25530  2956  2955               	goto	u14947
 25531  2957  0BB3               	decfsz	??_OLED_init,f
 25532  2958  2955               	goto	u14947
 25533                           
 25534                           ;oled.c: 119:  OLED_write4bits(0x02);
 25535  2959  3002               	movlw	2
 25536  295A  31B1  21B9  31A9   	fcall	_OLED_write4bits
 25537                           
 25538                           ;oled.c: 120:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25539  295D  3007               	movlw	7
 25540  295E  0140               	movlb	0	; select bank0
 25541  295F  00B3               	movwf	??_OLED_init
 25542  2960  307D               	movlw	125
 25543  2961                     u14957:	
 25544  2961  0B89               	decfsz	9,f
 25545  2962  2961               	goto	u14957
 25546  2963  0BB3               	decfsz	??_OLED_init,f
 25547  2964  2961               	goto	u14957
 25548                           
 25549                           ;oled.c: 121:  OLED_write4bits(0x02);
 25550  2965  3002               	movlw	2
 25551  2966  31B1  21B9  31A9   	fcall	_OLED_write4bits
 25552                           
 25553                           ;oled.c: 122:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25554  2969  3007               	movlw	7
 25555  296A  0140               	movlb	0	; select bank0
 25556  296B  00B3               	movwf	??_OLED_init
 25557  296C  307D               	movlw	125
 25558  296D                     u14967:	
 25559  296D  0B89               	decfsz	9,f
 25560  296E  296D               	goto	u14967
 25561  296F  0BB3               	decfsz	??_OLED_init,f
 25562  2970  296D               	goto	u14967
 25563                           
 25564                           ;oled.c: 123:  OLED_write4bits(0x08);
 25565  2971  3008               	movlw	8
 25566  2972  31B1  21B9  31A9   	fcall	_OLED_write4bits
 25567                           
 25568                           ;oled.c: 124:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25569  2975  3007               	movlw	7
 25570  2976  0140               	movlb	0	; select bank0
 25571  2977  00B3               	movwf	??_OLED_init
 25572  2978  307D               	movlw	125
 25573  2979                     u14977:	
 25574  2979  0B89               	decfsz	9,f
 25575  297A  2979               	goto	u14977
 25576  297B  0BB3               	decfsz	??_OLED_init,f
 25577  297C  2979               	goto	u14977
 25578                           
 25579                           ;oled.c: 126:  OLED_command(0x08);
 25580  297D  3008               	movlw	8
 25581  297E  31BE  264D  31A9   	fcall	_OLED_command
 25582                           
 25583                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25584  2981  3007               	movlw	7
 25585  2982  0140               	movlb	0	; select bank0
 25586  2983  00B3               	movwf	??_OLED_init
 25587  2984  307D               	movlw	125
 25588  2985                     u14987:	
 25589  2985  0B89               	decfsz	9,f
 25590  2986  2985               	goto	u14987
 25591  2987  0BB3               	decfsz	??_OLED_init,f
 25592  2988  2985               	goto	u14987
 25593                           
 25594                           ;oled.c: 128:  OLED_command(0x01);
 25595  2989  3001               	movlw	1
 25596  298A  31BE  264D  31A9   	fcall	_OLED_command
 25597                           
 25598                           ;oled.c: 129:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25599  298D  3007               	movlw	7
 25600  298E  0140               	movlb	0	; select bank0
 25601  298F  00B3               	movwf	??_OLED_init
 25602  2990  307D               	movlw	125
 25603  2991                     u14997:	
 25604  2991  0B89               	decfsz	9,f
 25605  2992  2991               	goto	u14997
 25606  2993  0BB3               	decfsz	??_OLED_init,f
 25607  2994  2991               	goto	u14997
 25608                           
 25609                           ;oled.c: 130:  OLED_command(0x06);
 25610  2995  3006               	movlw	6
 25611  2996  31BE  264D  31A9   	fcall	_OLED_command
 25612                           
 25613                           ;oled.c: 131:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25614  2999  3007               	movlw	7
 25615  299A  0140               	movlb	0	; select bank0
 25616  299B  00B3               	movwf	??_OLED_init
 25617  299C  307D               	movlw	125
 25618  299D                     u15007:	
 25619  299D  0B89               	decfsz	9,f
 25620  299E  299D               	goto	u15007
 25621  299F  0BB3               	decfsz	??_OLED_init,f
 25622  29A0  299D               	goto	u15007
 25623                           
 25624                           ;oled.c: 132:  OLED_command(0x02);
 25625  29A1  3002               	movlw	2
 25626  29A2  31BE  264D  31A9   	fcall	_OLED_command
 25627                           
 25628                           ;oled.c: 133:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25629  29A5  3007               	movlw	7
 25630  29A6  0140               	movlb	0	; select bank0
 25631  29A7  00B3               	movwf	??_OLED_init
 25632  29A8  307D               	movlw	125
 25633  29A9                     u15017:	
 25634  29A9  0B89               	decfsz	9,f
 25635  29AA  29A9               	goto	u15017
 25636  29AB  0BB3               	decfsz	??_OLED_init,f
 25637  29AC  29A9               	goto	u15017
 25638                           
 25639                           ;oled.c: 134:  OLED_command(0x0C);
 25640  29AD  300C               	movlw	12
 25641  29AE  31BE  264D  31A9   	fcall	_OLED_command
 25642                           
 25643                           ;oled.c: 135:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 25644  29B1  3007               	movlw	7
 25645  29B2  0140               	movlb	0	; select bank0
 25646  29B3  00B3               	movwf	??_OLED_init
 25647  29B4  307D               	movlw	125
 25648  29B5                     u15027:	
 25649  29B5  0B89               	decfsz	9,f
 25650  29B6  29B5               	goto	u15027
 25651  29B7  0BB3               	decfsz	??_OLED_init,f
 25652  29B8  29B5               	goto	u15027
 25653  29B9  0008               	return
 25654  29BA                     __end_of_OLED_init:	
 25655                           
 25656                           	psect	text67
 25657  3E4D                     __ptext67:	
 25658 ;; *************** function _OLED_command *****************
 25659 ;; Defined at:
 25660 ;;		line 78 in file "oled.c"
 25661 ;; Parameters:    Size  Location     Type
 25662 ;;  value           1    wreg     unsigned char 
 25663 ;; Auto vars:     Size  Location     Type
 25664 ;;  value           1   18[BANK0 ] unsigned char 
 25665 ;; Return value:  Size  Location     Type
 25666 ;;                  1    wreg      void 
 25667 ;; Registers used:
 25668 ;;		wreg, status,2, status,0, pclath, cstack
 25669 ;; Tracked objects:
 25670 ;;		On entry : 0/0
 25671 ;;		On exit  : 0/0
 25672 ;;		Unchanged: 0/0
 25673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25678 ;;Total ram usage:        1 bytes
 25679 ;; Hardware stack levels used:    1
 25680 ;; Hardware stack levels required when called:    5
 25681 ;; This function calls:
 25682 ;;		_OLED_send
 25683 ;;		_OLED_waitForReady
 25684 ;; This function is called by:
 25685 ;;		_main
 25686 ;;		_OLED_init
 25687 ;;		_OLED_print_xy
 25688 ;;		_OLED_loadSpecialChars
 25689 ;;		_viewErrorMessage
 25690 ;;		_paging
 25691 ;;		_returnToPage
 25692 ;;		_OLED_off
 25693 ;;		_OLED_setCursor
 25694 ;; This function uses a non-reentrant model
 25695 ;;
 25696                           
 25697                           
 25698                           ;psect for function _OLED_command
 25699  3E4D                     _OLED_command:	
 25700                           
 25701                           ;incstack = 0
 25702                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 25703                           ;OLED_command@value stored from wreg
 25704  3E4D  0140               	movlb	0	; select bank0
 25705  3E4E  00B2               	movwf	OLED_command@value
 25706                           
 25707                           ;oled.c: 78: void OLED_command(uint8_t value);oled.c: 79: {;oled.c: 80:  OLED_send(value
      +                          , 0);
 25708  3E4F  01AF               	clrf	OLED_send@mode
 25709  3E50  0832               	movf	OLED_command@value,w
 25710  3E51  31BE  26D8  31BE   	fcall	_OLED_send
 25711                           
 25712                           ;oled.c: 81:  OLED_waitForReady();
 25713  3E54  31B0  2003         	fcall	_OLED_waitForReady
 25714  3E56  0008               	return
 25715  3E57                     __end_of_OLED_command:	
 25716                           
 25717                           	psect	text68
 25718  3003                     __ptext68:	
 25719 ;; *************** function _OLED_waitForReady *****************
 25720 ;; Defined at:
 25721 ;;		line 50 in file "oled.c"
 25722 ;; Parameters:    Size  Location     Type
 25723 ;;		None
 25724 ;; Auto vars:     Size  Location     Type
 25725 ;;  busy            1   12[BANK0 ] unsigned char 
 25726 ;; Return value:  Size  Location     Type
 25727 ;;                  1    wreg      void 
 25728 ;; Registers used:
 25729 ;;		wreg, status,2, status,0
 25730 ;; Tracked objects:
 25731 ;;		On entry : 0/0
 25732 ;;		On exit  : 0/0
 25733 ;;		Unchanged: 0/0
 25734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25738 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25739 ;;Total ram usage:        1 bytes
 25740 ;; Hardware stack levels used:    1
 25741 ;; Hardware stack levels required when called:    3
 25742 ;; This function calls:
 25743 ;;		Nothing
 25744 ;; This function is called by:
 25745 ;;		_OLED_command
 25746 ;;		_OLED_write
 25747 ;; This function uses a non-reentrant model
 25748 ;;
 25749                           
 25750                           
 25751                           ;psect for function _OLED_waitForReady
 25752  3003                     _OLED_waitForReady:	
 25753                           
 25754                           ;oled.c: 52:  unsigned char busy = 1;
 25755                           
 25756                           ;incstack = 0
 25757                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 25758  3003  0140               	movlb	0	; select bank0
 25759  3004  01AC               	clrf	OLED_waitForReady@busy
 25760  3005  0AAC               	incf	OLED_waitForReady@busy,f
 25761                           
 25762                           ;oled.c: 54:  TRISCbits.TRISC4 = 1;
 25763  3006  1614               	bsf	20,4	;volatile
 25764                           
 25765                           ;oled.c: 55:  LATBbits.LATB4 = 0;
 25766  3007  1219               	bcf	25,4	;volatile
 25767                           
 25768                           ;oled.c: 56:  LATBbits.LATB3 = 1;
 25769  3008  1599               	bsf	25,3	;volatile
 25770  3009                     l178:	
 25771                           ;oled.c: 58:  do {
 25772                           
 25773                           
 25774                           ;oled.c: 59:   LATBbits.LATB2 = 0;
 25775  3009  1119               	bcf	25,2	;volatile
 25776                           
 25777                           ;oled.c: 60:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 25778  300A  3003               	movlw	3
 25779  300B                     u15037:	
 25780  300B  0B89               	decfsz	9,f
 25781  300C  280B               	goto	u15037
 25782  300D  0000               	nop
 25783                           
 25784                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 25785  300E  0140               	movlb	0	; select bank0
 25786  300F  1519               	bsf	25,2	;volatile
 25787                           
 25788                           ;oled.c: 63:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 25789  3010  3003               	movlw	3
 25790  3011                     u15047:	
 25791  3011  0B89               	decfsz	9,f
 25792  3012  2811               	goto	u15047
 25793  3013  0000               	nop
 25794                           
 25795                           ;oled.c: 64:   busy = PORTCbits.RC4;
 25796  3014  3000               	movlw	0
 25797  3015  0140               	movlb	0	; select bank0
 25798  3016  1A0E               	btfsc	14,4	;volatile
 25799  3017  3001               	movlw	1
 25800  3018  00AC               	movwf	OLED_waitForReady@busy
 25801                           
 25802                           ;oled.c: 66:   LATBbits.LATB2 = 0;
 25803  3019  1119               	bcf	25,2	;volatile
 25804                           
 25805                           ;oled.c: 67:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 25806  301A  3003               	movlw	3
 25807  301B                     u15057:	
 25808  301B  0B89               	decfsz	9,f
 25809  301C  281B               	goto	u15057
 25810  301D  0000               	nop
 25811                           
 25812                           ;oled.c: 69:   LATBbits.LATB2 = 1;
 25813  301E  0140               	movlb	0	; select bank0
 25814  301F  1519               	bsf	25,2	;volatile
 25815                           
 25816                           ;oled.c: 70:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25817  3020  3010               	movlw	16
 25818  3021                     u15067:	
 25819  3021  0B89               	decfsz	9,f
 25820  3022  2821               	goto	u15067
 25821  3023  3200               	nop2
 25822                           
 25823                           ;oled.c: 71:   LATBbits.LATB2 = 0;
 25824  3024  0140               	movlb	0	; select bank0
 25825  3025  1119               	bcf	25,2	;volatile
 25826                           
 25827                           ;oled.c: 72:  } while (busy);
 25828  3026  082C               	movf	OLED_waitForReady@busy,w
 25829  3027  1D03               	btfss	3,2
 25830  3028  2809               	goto	l178
 25831                           
 25832                           ;oled.c: 74:  TRISCbits.TRISC4 = 0;
 25833  3029  1214               	bcf	20,4	;volatile
 25834                           
 25835                           ;oled.c: 75:  LATBbits.LATB3 = 0;
 25836  302A  1199               	bcf	25,3	;volatile
 25837  302B  0008               	return
 25838  302C                     __end_of_OLED_waitForReady:	
 25839                           
 25840                           	psect	text69
 25841  3ED8                     __ptext69:	
 25842 ;; *************** function _OLED_send *****************
 25843 ;; Defined at:
 25844 ;;		line 39 in file "oled.c"
 25845 ;; Parameters:    Size  Location     Type
 25846 ;;  value           1    wreg     unsigned char 
 25847 ;;  mode            1   15[BANK0 ] unsigned char 
 25848 ;; Auto vars:     Size  Location     Type
 25849 ;;  value           1   17[BANK0 ] unsigned char 
 25850 ;; Return value:  Size  Location     Type
 25851 ;;                  1    wreg      void 
 25852 ;; Registers used:
 25853 ;;		wreg, status,2, status,0, pclath, cstack
 25854 ;; Tracked objects:
 25855 ;;		On entry : 0/0
 25856 ;;		On exit  : 0/0
 25857 ;;		Unchanged: 0/0
 25858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25859 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25863 ;;Total ram usage:        3 bytes
 25864 ;; Hardware stack levels used:    1
 25865 ;; Hardware stack levels required when called:    4
 25866 ;; This function calls:
 25867 ;;		_OLED_write4bits
 25868 ;; This function is called by:
 25869 ;;		_OLED_command
 25870 ;;		_OLED_write
 25871 ;; This function uses a non-reentrant model
 25872 ;;
 25873                           
 25874                           
 25875                           ;psect for function _OLED_send
 25876  3ED8                     _OLED_send:	
 25877                           
 25878                           ;incstack = 0
 25879                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 25880                           ;OLED_send@value stored from wreg
 25881  3ED8  0140               	movlb	0	; select bank0
 25882  3ED9  00B1               	movwf	OLED_send@value
 25883                           
 25884                           ;oled.c: 39: void OLED_send(uint8_t value, uint8_t mode);oled.c: 40: {;oled.c: 41:  LATB
      +                          bits.LATB4 = mode;
 25885  3EDA  0C2F               	rrf	OLED_send@mode,w
 25886  3EDB  1C03               	skipc
 25887  3EDC  1219               	bcf	25,4	;volatile
 25888  3EDD  1803               	skipnc
 25889  3EDE  1619               	bsf	25,4	;volatile
 25890                           
 25891                           ;oled.c: 42:  LATBbits.LATB3 = 0;
 25892  3EDF  1199               	bcf	25,3	;volatile
 25893                           
 25894                           ;oled.c: 44:  OLED_write4bits(value >> 4);
 25895  3EE0  0831               	movf	OLED_send@value,w
 25896  3EE1  00B0               	movwf	??_OLED_send
 25897  3EE2  3004               	movlw	4
 25898  3EE3                     u11535:	
 25899  3EE3  36B0               	lsrf	??_OLED_send,f
 25900  3EE4  0B89               	decfsz	9,f
 25901  3EE5  2EE3               	goto	u11535
 25902  3EE6  0830               	movf	??_OLED_send,w
 25903  3EE7  31B1  21B9  31BE   	fcall	_OLED_write4bits
 25904                           
 25905                           ;oled.c: 45:  OLED_write4bits(value);
 25906  3EEA  0140               	movlb	0	; select bank0
 25907  3EEB  0831               	movf	OLED_send@value,w
 25908  3EEC  31B1  21B9         	fcall	_OLED_write4bits
 25909  3EEE  0008               	return
 25910  3EEF                     __end_of_OLED_send:	
 25911                           
 25912                           	psect	text70
 25913  31B9                     __ptext70:	
 25914 ;; *************** function _OLED_write4bits *****************
 25915 ;; Defined at:
 25916 ;;		line 26 in file "oled.c"
 25917 ;; Parameters:    Size  Location     Type
 25918 ;;  value           1    wreg     unsigned char 
 25919 ;; Auto vars:     Size  Location     Type
 25920 ;;  value           1   14[BANK0 ] unsigned char 
 25921 ;; Return value:  Size  Location     Type
 25922 ;;                  1    wreg      void 
 25923 ;; Registers used:
 25924 ;;		wreg, status,2, status,0
 25925 ;; Tracked objects:
 25926 ;;		On entry : 0/0
 25927 ;;		On exit  : 0/0
 25928 ;;		Unchanged: 0/0
 25929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25932 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25933 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25934 ;;Total ram usage:        3 bytes
 25935 ;; Hardware stack levels used:    1
 25936 ;; Hardware stack levels required when called:    3
 25937 ;; This function calls:
 25938 ;;		Nothing
 25939 ;; This function is called by:
 25940 ;;		_OLED_send
 25941 ;;		_OLED_init
 25942 ;; This function uses a non-reentrant model
 25943 ;;
 25944                           
 25945                           
 25946                           ;psect for function _OLED_write4bits
 25947  31B9                     _OLED_write4bits:	
 25948                           
 25949                           ;incstack = 0
 25950                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 25951                           ;OLED_write4bits@value stored from wreg
 25952  31B9  0140               	movlb	0	; select bank0
 25953  31BA  00AE               	movwf	OLED_write4bits@value
 25954                           
 25955                           ;oled.c: 26: void OLED_write4bits(uint8_t value);oled.c: 27: {;oled.c: 28:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 25956  31BB  082E               	movf	OLED_write4bits@value,w
 25957  31BC  3901               	andlw	1
 25958  31BD  00AC               	movwf	??_OLED_write4bits
 25959  31BE  0DAC               	rlf	??_OLED_write4bits,f
 25960  31BF  0819               	movf	25,w	;volatile
 25961  31C0  062C               	xorwf	??_OLED_write4bits,w
 25962  31C1  39FD               	andlw	-3
 25963  31C2  062C               	xorwf	??_OLED_write4bits,w
 25964  31C3  0099               	movwf	25	;volatile
 25965                           
 25966                           ;oled.c: 29:  LATBbits.LATB0 = (value >> 1) & 0x01;
 25967  31C4  082E               	movf	OLED_write4bits@value,w
 25968  31C5  00AC               	movwf	??_OLED_write4bits
 25969  31C6  3001               	movlw	1
 25970  31C7                     u11505:	
 25971  31C7  36AC               	lsrf	??_OLED_write4bits,f
 25972  31C8  0B89               	decfsz	9,f
 25973  31C9  29C7               	goto	u11505
 25974  31CA  3001               	movlw	1
 25975  31CB  052C               	andwf	??_OLED_write4bits,w
 25976  31CC  00AD               	movwf	??_OLED_write4bits+1
 25977  31CD  0819               	movf	25,w	;volatile
 25978  31CE  062D               	xorwf	??_OLED_write4bits+1,w
 25979  31CF  39FE               	andlw	-2
 25980  31D0  062D               	xorwf	??_OLED_write4bits+1,w
 25981  31D1  0099               	movwf	25	;volatile
 25982                           
 25983                           ;oled.c: 30:  LATCbits.LATC5 = (value >> 2) & 0x01;
 25984  31D2  082E               	movf	OLED_write4bits@value,w
 25985  31D3  00AC               	movwf	??_OLED_write4bits
 25986  31D4  3002               	movlw	2
 25987  31D5                     u11515:	
 25988  31D5  36AC               	lsrf	??_OLED_write4bits,f
 25989  31D6  0B89               	decfsz	9,f
 25990  31D7  29D5               	goto	u11515
 25991  31D8  082C               	movf	??_OLED_write4bits,w
 25992  31D9  3901               	andlw	1
 25993  31DA  00AD               	movwf	??_OLED_write4bits+1
 25994  31DB  0EAD               	swapf	??_OLED_write4bits+1,f
 25995  31DC  0DAD               	rlf	??_OLED_write4bits+1,f
 25996  31DD  081A               	movf	26,w	;volatile
 25997  31DE  062D               	xorwf	??_OLED_write4bits+1,w
 25998  31DF  39DF               	andlw	-33
 25999  31E0  062D               	xorwf	??_OLED_write4bits+1,w
 26000  31E1  009A               	movwf	26	;volatile
 26001                           
 26002                           ;oled.c: 31:  LATCbits.LATC4 = (value >> 3) & 0x01;
 26003  31E2  082E               	movf	OLED_write4bits@value,w
 26004  31E3  00AC               	movwf	??_OLED_write4bits
 26005  31E4  3003               	movlw	3
 26006  31E5                     u11525:	
 26007  31E5  36AC               	lsrf	??_OLED_write4bits,f
 26008  31E6  0B89               	decfsz	9,f
 26009  31E7  29E5               	goto	u11525
 26010  31E8  082C               	movf	??_OLED_write4bits,w
 26011  31E9  3901               	andlw	1
 26012  31EA  00AD               	movwf	??_OLED_write4bits+1
 26013  31EB  0EAD               	swapf	??_OLED_write4bits+1,f
 26014  31EC  081A               	movf	26,w	;volatile
 26015  31ED  062D               	xorwf	??_OLED_write4bits+1,w
 26016  31EE  39EF               	andlw	-17
 26017  31EF  062D               	xorwf	??_OLED_write4bits+1,w
 26018  31F0  009A               	movwf	26	;volatile
 26019                           
 26020                           ;oled.c: 33:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 26021  31F1  3010               	movlw	16
 26022  31F2                     u15077:	
 26023  31F2  0B89               	decfsz	9,f
 26024  31F3  29F2               	goto	u15077
 26025  31F4  3200               	nop2
 26026                           
 26027                           ;oled.c: 34:  LATBbits.LATB2 = 1;
 26028  31F5  0140               	movlb	0	; select bank0
 26029  31F6  1519               	bsf	25,2	;volatile
 26030                           
 26031                           ;oled.c: 35:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 26032  31F7  3010               	movlw	16
 26033  31F8                     u15087:	
 26034  31F8  0B89               	decfsz	9,f
 26035  31F9  29F8               	goto	u15087
 26036  31FA  3200               	nop2
 26037                           
 26038                           ;oled.c: 36:  LATBbits.LATB2 = 0;
 26039  31FB  0140               	movlb	0	; select bank0
 26040  31FC  1119               	bcf	25,2	;volatile
 26041  31FD  0008               	return
 26042  31FE                     __end_of_OLED_write4bits:	
 26043                           
 26044                           	psect	intentry
 26045  0004                     __pintentry:	
 26046 ;; *************** function _ISR *****************
 26047 ;; Defined at:
 26048 ;;		line 23 in file "interrupt.c"
 26049 ;; Parameters:    Size  Location     Type
 26050 ;;		None
 26051 ;; Auto vars:     Size  Location     Type
 26052 ;;		None
 26053 ;; Return value:  Size  Location     Type
 26054 ;;                  1    wreg      void 
 26055 ;; Registers used:
 26056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26057 ;; Tracked objects:
 26058 ;;		On entry : 0/0
 26059 ;;		On exit  : 0/0
 26060 ;;		Unchanged: 0/0
 26061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26064 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26065 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26066 ;;Total ram usage:        4 bytes
 26067 ;; Hardware stack levels used:    1
 26068 ;; Hardware stack levels required when called:    2
 26069 ;; This function calls:
 26070 ;;		_pushButtonISR
 26071 ;;		_rotISR
 26072 ;;		_uartReceiveISR
 26073 ;; This function is called by:
 26074 ;;		Interrupt level 1
 26075 ;; This function uses a non-reentrant model
 26076 ;;
 26077                           
 26078  0004                     _ISR:	
 26079                           
 26080                           ;incstack = 0
 26081  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 26082                           
 26083                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26084  0005  3180               	pagesel	$
 26085                           
 26086                           ;interrupt.c: 25:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 26087  0006  014E               	movlb	14	; select bank14
 26088  0007  1A96               	btfsc	22,5	;volatile
 26089  0008  1E8C               	btfss	12,5	;volatile
 26090  0009  281C               	goto	i1l262
 26091                           
 26092                           ;interrupt.c: 28:   tick10ms++;
 26093  000A  3001               	movlw	1
 26094  000B  0140               	movlb	0	; select bank0
 26095  000C  00A8               	movwf	??_ISR
 26096  000D  0828               	movf	??_ISR,w
 26097  000E  07E2               	addwf	_tick10ms,f	;volatile
 26098                           
 26099                           ;interrupt.c: 29:   if (pbState == PB_WAIT)
 26100  000F  3004               	movlw	4
 26101  0010  067D               	xorwf	_pbState,w	;volatile
 26102  0011  1D03               	btfss	3,2
 26103  0012  2816               	goto	i1l6679
 26104                           
 26105                           ;interrupt.c: 30:    pushButtonISR();
 26106  0013  3190  2001  3180   	fcall	_pushButtonISR
 26107  0016                     i1l6679:	
 26108                           
 26109                           ;interrupt.c: 31:   TMR0 = 178;
 26110  0016  30B2               	movlw	178
 26111  0017  014B               	movlb	11	; select bank11
 26112  0018  009C               	movwf	28	;volatile
 26113                           
 26114                           ;interrupt.c: 32:   PIR0bits.TMR0IF = 0;
 26115  0019  014E               	movlb	14	; select bank14
 26116  001A  128C               	bcf	12,5	;volatile
 26117                           
 26118                           ;interrupt.c: 33:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 26119  001B  2877               	goto	i1l275
 26120  001C                     i1l262:	
 26121  001C  1A16               	btfsc	22,4	;volatile
 26122  001D  1E0C               	btfss	12,4	;volatile
 26123  001E  2838               	goto	i1l265
 26124                           
 26125                           ;interrupt.c: 35:   if (IOCAFbits.IOCAF7 == 1) {
 26126  001F  017E               	movlb	62	; select bank62
 26127  0020  1FBF               	btfss	63,7	;volatile
 26128  0021  2827               	goto	i1l6691
 26129                           
 26130                           ;interrupt.c: 36:    pushButtonISR();
 26131  0022  3190  2001  3180   	fcall	_pushButtonISR
 26132                           
 26133                           ;interrupt.c: 37:    IOCAFbits.IOCAF7 = 0;
 26134  0025  017E               	movlb	62	; select bank62
 26135  0026  13BF               	bcf	63,7	;volatile
 26136  0027                     i1l6691:	
 26137                           ;interrupt.c: 38:   }
 26138                           
 26139                           
 26140                           ;interrupt.c: 39:   if (IOCAFbits.IOCAF4 == 1) {
 26141  0027  1E3F               	btfss	63,4	;volatile
 26142  0028  282E               	goto	i1l6697
 26143                           
 26144                           ;interrupt.c: 40:    rotISR();
 26145  0029  31B2  2244  3180   	fcall	_rotISR
 26146                           
 26147                           ;interrupt.c: 41:    IOCAFbits.IOCAF4 = 0;
 26148  002C  017E               	movlb	62	; select bank62
 26149  002D  123F               	bcf	63,4	;volatile
 26150  002E                     i1l6697:	
 26151                           ;interrupt.c: 42:   }
 26152                           
 26153                           
 26154                           ;interrupt.c: 43:   if (IOCAFbits.IOCAF5 == 1) {
 26155  002E  1EBF               	btfss	63,5	;volatile
 26156  002F  2835               	goto	i1l6703
 26157                           
 26158                           ;interrupt.c: 44:    rotISR();
 26159  0030  31B2  2244  3180   	fcall	_rotISR
 26160                           
 26161                           ;interrupt.c: 45:    IOCAFbits.IOCAF5 = 0;
 26162  0033  017E               	movlb	62	; select bank62
 26163  0034  12BF               	bcf	63,5	;volatile
 26164  0035                     i1l6703:	
 26165                           ;interrupt.c: 46:   }
 26166                           
 26167                           
 26168                           ;interrupt.c: 47:   PIR0bits.IOCIF = 0;
 26169  0035  014E               	movlb	14	; select bank14
 26170  0036  120C               	bcf	12,4	;volatile
 26171                           
 26172                           ;interrupt.c: 48:  } else if (INTCONbits.PEIE == 1) {
 26173  0037  2877               	goto	i1l275
 26174  0038                     i1l265:	
 26175  0038  1F0B               	btfss	11,6	;volatile
 26176  0039  2877               	goto	i1l275
 26177                           
 26178                           ;interrupt.c: 49:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 26179  003A  181A               	btfsc	26,0	;volatile
 26180  003B  1C10               	btfss	16,0	;volatile
 26181  003C  2870               	goto	i1l271
 26182                           
 26183                           ;interrupt.c: 52:    if (tick100ms++ >= 1000000000UL)
 26184  003D  0143               	movlb	3	; select bank3
 26185  003E  086E               	movf	(_tick100ms+3)^(0+384),w	;volatile
 26186  003F  0140               	movlb	0	; select bank0
 26187  0040  00AB               	movwf	??_ISR+3
 26188  0041  0143               	movlb	3	; select bank3
 26189  0042  086D               	movf	(_tick100ms+2)^(0+384),w	;volatile
 26190  0043  0140               	movlb	0	; select bank0
 26191  0044  00AA               	movwf	??_ISR+2
 26192  0045  0143               	movlb	3	; select bank3
 26193  0046  086C               	movf	(_tick100ms+1)^(0+384),w	;volatile
 26194  0047  0140               	movlb	0	; select bank0
 26195  0048  00A9               	movwf	??_ISR+1
 26196  0049  0143               	movlb	3	; select bank3
 26197  004A  086B               	movf	_tick100ms^(0+384),w	;volatile
 26198  004B  0140               	movlb	0	; select bank0
 26199  004C  00A8               	movwf	??_ISR
 26200  004D  3001               	movlw	1
 26201  004E  0143               	movlb	3	; select bank3
 26202  004F  07EB               	addwf	_tick100ms^(0+384),f	;volatile
 26203  0050  3000               	movlw	0
 26204  0051  3DEC               	addwfc	(_tick100ms+1)^(0+384),f	;volatile
 26205  0052  3DED               	addwfc	(_tick100ms+2)^(0+384),f	;volatile
 26206  0053  3DEE               	addwfc	(_tick100ms+3)^(0+384),f	;volatile
 26207  0054  3000               	movlw	0
 26208  0055  0140               	movlb	0	; select bank0
 26209  0056  0228               	subwf	??_ISR,w
 26210  0057  30CA               	movlw	202
 26211  0058  3B29               	subwfb	??_ISR+1,w
 26212  0059  309A               	movlw	154
 26213  005A  3B2A               	subwfb	??_ISR+2,w
 26214  005B  303B               	movlw	59
 26215  005C  3B2B               	subwfb	??_ISR+3,w
 26216  005D  1C03               	btfss	3,0
 26217  005E  2868               	goto	i1l6713
 26218                           
 26219                           ;interrupt.c: 53:     tick100ms = 0;
 26220  005F  3000               	movlw	0
 26221  0060  0143               	movlb	3	; select bank3
 26222  0061  00EE               	movwf	(_tick100ms+3)^(0+384)	;volatile
 26223  0062  3000               	movlw	0
 26224  0063  00ED               	movwf	(_tick100ms+2)^(0+384)	;volatile
 26225  0064  3000               	movlw	0
 26226  0065  00EC               	movwf	(_tick100ms+1)^(0+384)	;volatile
 26227  0066  3000               	movlw	0
 26228  0067  00EB               	movwf	_tick100ms^(0+384)	;volatile
 26229  0068                     i1l6713:	
 26230                           
 26231                           ;interrupt.c: 54:    TMR1 = 53035;
 26232  0068  30CF               	movlw	207
 26233  0069  0144               	movlb	4	; select bank4
 26234  006A  008D               	movwf	13	;volatile
 26235  006B  302B               	movlw	43
 26236  006C  008C               	movwf	12	;volatile
 26237                           
 26238                           ;interrupt.c: 55:    PIR4bits.TMR1IF = 0;
 26239  006D  014E               	movlb	14	; select bank14
 26240  006E  1010               	bcf	16,0	;volatile
 26241                           
 26242                           ;interrupt.c: 56:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 26243  006F  2877               	goto	i1l275
 26244  0070                     i1l271:	
 26245  0070  1A99               	btfsc	25,5	;volatile
 26246  0071  1E8F               	btfss	15,5	;volatile
 26247  0072  2877               	goto	i1l275
 26248                           
 26249                           ;interrupt.c: 57:    uartReceiveISR();
 26250  0073  31B4  24D6         	fcall	_uartReceiveISR
 26251                           
 26252                           ;interrupt.c: 58:    PIR3bits.RC1IF = 0;
 26253  0075  014E               	movlb	14	; select bank14
 26254  0076  128F               	bcf	15,5	;volatile
 26255  0077                     i1l275:	
 26256                           ;interrupt.c: 60:  }
 26257                           
 26258                           ;interrupt.c: 59:   }
 26259                           
 26260  0077  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 26261  0078  0009               	retfie
 26262  0079                     __end_of_ISR:	
 26263                           
 26264                           	psect	text72
 26265  34D6                     __ptext72:	
 26266 ;; *************** function _uartReceiveISR *****************
 26267 ;; Defined at:
 26268 ;;		line 26 in file "uart.c"
 26269 ;; Parameters:    Size  Location     Type
 26270 ;;		None
 26271 ;; Auto vars:     Size  Location     Type
 26272 ;;		None
 26273 ;; Return value:  Size  Location     Type
 26274 ;;                  1    wreg      void 
 26275 ;; Registers used:
 26276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26277 ;; Tracked objects:
 26278 ;;		On entry : 0/0
 26279 ;;		On exit  : 0/0
 26280 ;;		Unchanged: 0/0
 26281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26284 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26285 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26286 ;;Total ram usage:        1 bytes
 26287 ;; Hardware stack levels used:    1
 26288 ;; Hardware stack levels required when called:    1
 26289 ;; This function calls:
 26290 ;;		_strncpy
 26291 ;;		i1___flge
 26292 ;; This function is called by:
 26293 ;;		_ISR
 26294 ;; This function uses a non-reentrant model
 26295 ;;
 26296                           
 26297                           
 26298                           ;psect for function _uartReceiveISR
 26299  34D6                     _uartReceiveISR:	
 26300                           
 26301                           ;uart.c: 28:  if (RC1STAbits.OERR)
 26302                           
 26303                           ;incstack = 0
 26304                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26305  34D6  0142               	movlb	2	; select bank2
 26306  34D7  1C9D               	btfss	29,1	;volatile
 26307  34D8  2CE0               	goto	i1l6547
 26308                           
 26309                           ;uart.c: 29:  {;uart.c: 30:   RC1STAbits.CREN = 0;
 26310  34D9  121D               	bcf	29,4	;volatile
 26311                           
 26312                           ;uart.c: 31:   RC1STAbits.CREN = 1;
 26313  34DA  161D               	bsf	29,4	;volatile
 26314                           
 26315                           ;uart.c: 32:   rxOErrCount++;
 26316  34DB  3001               	movlw	1
 26317  34DC  00F8               	movwf	??_uartReceiveISR
 26318  34DD  0878               	movf	??_uartReceiveISR,w
 26319  34DE  0144               	movlb	4	; select bank4
 26320  34DF  07AE               	addwf	_rxOErrCount^(0+512),f	;volatile
 26321  34E0                     i1l6547:	
 26322                           ;uart.c: 33:  }
 26323                           
 26324                           
 26325                           ;uart.c: 34:  if (RC1STAbits.FERR)
 26326  34E0  0142               	movlb	2	; select bank2
 26327  34E1  1D1D               	btfss	29,2	;volatile
 26328  34E2  2CEA               	goto	i1l6553
 26329                           
 26330                           ;uart.c: 35:  {;uart.c: 36:   RC1STAbits.SPEN = 0;
 26331  34E3  139D               	bcf	29,7	;volatile
 26332                           
 26333                           ;uart.c: 37:   RC1STAbits.SPEN = 1;
 26334  34E4  179D               	bsf	29,7	;volatile
 26335                           
 26336                           ;uart.c: 38:   rxFErrCount++;
 26337  34E5  3001               	movlw	1
 26338  34E6  00F8               	movwf	??_uartReceiveISR
 26339  34E7  0878               	movf	??_uartReceiveISR,w
 26340  34E8  0144               	movlb	4	; select bank4
 26341  34E9  07AF               	addwf	_rxFErrCount^(0+512),f	;volatile
 26342  34EA                     i1l6553:	
 26343                           ;uart.c: 39:  }
 26344                           
 26345                           
 26346                           ;uart.c: 42:  if (rxCount < sizeof(dataPacket)) {
 26347  34EA  300F               	movlw	15
 26348  34EB  0140               	movlb	0	; select bank0
 26349  34EC  025F               	subwf	_rxCount,w	;volatile
 26350  34ED  1803               	skipnc
 26351  34EE  2D0A               	goto	i1l6559
 26352                           
 26353                           ;uart.c: 43:   buffer[rxCount] = RC1REG;
 26354  34EF  0142               	movlb	2	; select bank2
 26355  34F0  0819               	movf	25,w	;volatile
 26356  34F1  00F8               	movwf	??_uartReceiveISR
 26357  34F2  0140               	movlb	0	; select bank0
 26358  34F3  085F               	movf	_rxCount,w
 26359  34F4  3ECE               	addlw	(low (_buffer| (0+512)))& (0+255)
 26360  34F5  0086               	movwf	6
 26361  34F6  3002               	movlw	2	; select bank5/6
 26362  34F7  0087               	movwf	7
 26363  34F8  0878               	movf	??_uartReceiveISR,w
 26364  34F9  0081               	movwf	1
 26365                           
 26366                           ;uart.c: 44:   checksum ^= buffer[rxCount];
 26367  34FA  085F               	movf	_rxCount,w
 26368  34FB  3ECE               	addlw	(low (_buffer| (0+512)))& (0+255)
 26369  34FC  0086               	movwf	6
 26370  34FD  3002               	movlw	2	; select bank5/6
 26371  34FE  0087               	movwf	7
 26372  34FF  0801               	movf	1,w
 26373  3500  00F8               	movwf	??_uartReceiveISR
 26374  3501  0878               	movf	??_uartReceiveISR,w
 26375  3502  0142               	movlb	2	; select bank2
 26376  3503  06EB               	xorwf	_checksum^(0+256),f
 26377                           
 26378                           ;uart.c: 45:   rxCount++;
 26379  3504  3001               	movlw	1
 26380  3505  00F8               	movwf	??_uartReceiveISR
 26381  3506  0878               	movf	??_uartReceiveISR,w
 26382  3507  0140               	movlb	0	; select bank0
 26383  3508  07DF               	addwf	_rxCount,f	;volatile
 26384                           
 26385                           ;uart.c: 46:  } else {
 26386  3509  0008               	return
 26387  350A                     i1l6559:	
 26388                           
 26389                           ;uart.c: 48:   if (RC1REG != checksum)
 26390  350A  0142               	movlb	2	; select bank2
 26391  350B  0819               	movf	25,w	;volatile
 26392  350C  066B               	xorwf	_checksum^(0+256),w
 26393  350D  1903               	skipnz
 26394  350E  2D11               	goto	i1l6563
 26395                           
 26396                           ;uart.c: 49:    dataPacket.status = 0;
 26397  350F  0144               	movlb	4	; select bank4
 26398  3510  01B2               	clrf	(_dataPacket^(0+512)+2)	;volatile
 26399  3511                     i1l6563:	
 26400                           
 26401                           ;uart.c: 51:   uartDataReadyFlag = 1;
 26402  3511  3001               	movlw	1
 26403  3512  00F8               	movwf	??_uartReceiveISR
 26404  3513  0878               	movf	??_uartReceiveISR,w
 26405  3514  0140               	movlb	0	; select bank0
 26406  3515  00E1               	movwf	_uartDataReadyFlag	;volatile
 26407                           
 26408                           ;uart.c: 52:   strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 26409  3516  30CE               	movlw	(low (_buffer| (0+512)))& (0+255)
 26410  3517  00F8               	movwf	??_uartReceiveISR
 26411  3518  0878               	movf	??_uartReceiveISR,w
 26412  3519  00F0               	movwf	strncpy@s
 26413  351A  300F               	movlw	15
 26414  351B  00F1               	movwf	strncpy@n
 26415  351C  3000               	movlw	0
 26416  351D  00F2               	movwf	strncpy@n+1
 26417  351E  3030               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 26418  351F  31B0  202C  31B4   	fcall	_strncpy
 26419                           
 26420                           ;uart.c: 53:   if (dataPacket.tempC < 1.0)
 26421  3522  3003               	movlw	3
 26422  3523  3E30               	addlw	(low (_dataPacket| (0+512)))& (0+255)
 26423  3524  0086               	movwf	6
 26424  3525  3002               	movlw	2	; select bank4/5
 26425  3526  0087               	movwf	7
 26426  3527  3F40               	moviw [0]fsr1
 26427  3528  00F0               	movwf	i1___flge@ff1
 26428  3529  3F41               	moviw [1]fsr1
 26429  352A  00F1               	movwf	i1___flge@ff1+1
 26430  352B  3F42               	moviw [2]fsr1
 26431  352C  00F2               	movwf	i1___flge@ff1+2
 26432  352D  3F43               	moviw [3]fsr1
 26433  352E  00F3               	movwf	i1___flge@ff1+3
 26434  352F  303F               	movlw	63
 26435  3530  00F7               	movwf	i1___flge@ff2+3
 26436  3531  3080               	movlw	128
 26437  3532  00F6               	movwf	i1___flge@ff2+2
 26438  3533  3000               	movlw	0
 26439  3534  00F5               	movwf	i1___flge@ff2+1
 26440  3535  3000               	movlw	0
 26441  3536  00F4               	movwf	i1___flge@ff2
 26442  3537  31A0  2006         	fcall	i1___flge
 26443  3539  1C03               	btfss	3,0
 26444                           
 26445                           ;uart.c: 54:    __nop();
 26446  353A  0000               	nop
 26447                           
 26448                           ;uart.c: 55:   checksum = 0;
 26449  353B  0142               	movlb	2	; select bank2
 26450  353C  01EB               	clrf	_checksum^(0+256)
 26451                           
 26452                           ;uart.c: 56:   rxCount = 0;
 26453  353D  0140               	movlb	0	; select bank0
 26454  353E  01DF               	clrf	_rxCount	;volatile
 26455  353F  0008               	return
 26456  3540                     __end_of_uartReceiveISR:	
 26457                           ;uart.c: 57:  }
 26458                           
 26459                           
 26460                           	psect	text73
 26461  2006                     __ptext73:	
 26462 ;; *************** function i1___flge *****************
 26463 ;; Defined at:
 26464 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\flge.c"
 26465 ;; Parameters:    Size  Location     Type
 26466 ;;  ff1             4    0[COMMON] void 
 26467 ;;  ff2             4    4[COMMON] void 
 26468 ;; Auto vars:     Size  Location     Type
 26469 ;;		None
 26470 ;; Return value:  Size  Location     Type
 26471 ;;		None               void
 26472 ;; Registers used:
 26473 ;;		wreg, status,2, status,0
 26474 ;; Tracked objects:
 26475 ;;		On entry : 0/0
 26476 ;;		On exit  : 0/0
 26477 ;;		Unchanged: 0/0
 26478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26479 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26481 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26482 ;;      Totals:         8       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26483 ;;Total ram usage:       16 bytes
 26484 ;; Hardware stack levels used:    1
 26485 ;; This function calls:
 26486 ;;		Nothing
 26487 ;; This function is called by:
 26488 ;;		_uartReceiveISR
 26489 ;; This function uses a non-reentrant model
 26490 ;;
 26491                           
 26492                           
 26493                           ;psect for function i1___flge
 26494  2006                     i1___flge:	
 26495                           
 26496                           ;incstack = 0
 26497                           ; Regs used in i1___flge: [wreg+status,2+status,0]
 26498  2006  3000               	movlw	0
 26499  2007  0570               	andwf	i1___flge@ff1,w
 26500  2008  0140               	movlb	0	; select bank0
 26501  2009  00A0               	movwf	??i1___flge
 26502  200A  3000               	movlw	0
 26503  200B  0571               	andwf	i1___flge@ff1+1,w
 26504  200C  00A1               	movwf	??i1___flge+1
 26505  200D  3080               	movlw	128
 26506  200E  0572               	andwf	i1___flge@ff1+2,w
 26507  200F  00A2               	movwf	??i1___flge+2
 26508  2010  307F               	movlw	127
 26509  2011  0573               	andwf	i1___flge@ff1+3,w
 26510  2012  00A3               	movwf	??i1___flge+3
 26511  2013  0823               	movf	??i1___flge+3,w
 26512  2014  0422               	iorwf	??i1___flge+2,w
 26513  2015  0421               	iorwf	??i1___flge+1,w
 26514  2016  0420               	iorwf	??i1___flge,w
 26515  2017  1D03               	skipz
 26516  2018  2821               	goto	i1l1118
 26517  2019  3000               	movlw	0
 26518  201A  00F3               	movwf	i1___flge@ff1+3
 26519  201B  3000               	movlw	0
 26520  201C  00F2               	movwf	i1___flge@ff1+2
 26521  201D  3000               	movlw	0
 26522  201E  00F1               	movwf	i1___flge@ff1+1
 26523  201F  3000               	movlw	0
 26524  2020  00F0               	movwf	i1___flge@ff1
 26525  2021                     i1l1118:	
 26526  2021  3000               	movlw	0
 26527  2022  0574               	andwf	i1___flge@ff2,w
 26528  2023  00A0               	movwf	??i1___flge
 26529  2024  3000               	movlw	0
 26530  2025  0575               	andwf	i1___flge@ff2+1,w
 26531  2026  00A1               	movwf	??i1___flge+1
 26532  2027  3080               	movlw	128
 26533  2028  0576               	andwf	i1___flge@ff2+2,w
 26534  2029  00A2               	movwf	??i1___flge+2
 26535  202A  307F               	movlw	127
 26536  202B  0577               	andwf	i1___flge@ff2+3,w
 26537  202C  00A3               	movwf	??i1___flge+3
 26538  202D  0823               	movf	??i1___flge+3,w
 26539  202E  0422               	iorwf	??i1___flge+2,w
 26540  202F  0421               	iorwf	??i1___flge+1,w
 26541  2030  0420               	iorwf	??i1___flge,w
 26542  2031  1D03               	skipz
 26543  2032  283B               	goto	i1l5869
 26544  2033  3000               	movlw	0
 26545  2034  00F7               	movwf	i1___flge@ff2+3
 26546  2035  3000               	movlw	0
 26547  2036  00F6               	movwf	i1___flge@ff2+2
 26548  2037  3000               	movlw	0
 26549  2038  00F5               	movwf	i1___flge@ff2+1
 26550  2039  3000               	movlw	0
 26551  203A  00F4               	movwf	i1___flge@ff2
 26552  203B                     i1l5869:	
 26553  203B  1FF3               	btfss	i1___flge@ff1+3,7
 26554  203C  2864               	goto	i1l5873
 26555  203D  3000               	movlw	0
 26556  203E  00A0               	movwf	??i1___flge
 26557  203F  3000               	movlw	0
 26558  2040  00A1               	movwf	??i1___flge+1
 26559  2041  3000               	movlw	0
 26560  2042  00A2               	movwf	??i1___flge+2
 26561  2043  3080               	movlw	128
 26562  2044  00A3               	movwf	??i1___flge+3
 26563  2045  0970               	comf	i1___flge@ff1,w
 26564  2046  00A4               	movwf	??i1___flge+4
 26565  2047  0971               	comf	i1___flge@ff1+1,w
 26566  2048  00A5               	movwf	??i1___flge+5
 26567  2049  0972               	comf	i1___flge@ff1+2,w
 26568  204A  00A6               	movwf	??i1___flge+6
 26569  204B  0973               	comf	i1___flge@ff1+3,w
 26570  204C  00A7               	movwf	??i1___flge+7
 26571  204D  0AA4               	incf	??i1___flge+4,f
 26572  204E  1903               	skipnz
 26573  204F  0AA5               	incf	??i1___flge+5,f
 26574  2050  1903               	skipnz
 26575  2051  0AA6               	incf	??i1___flge+6,f
 26576  2052  1903               	skipnz
 26577  2053  0AA7               	incf	??i1___flge+7,f
 26578  2054  0824               	movf	??i1___flge+4,w
 26579  2055  07A0               	addwf	??i1___flge,f
 26580  2056  0825               	movf	??i1___flge+5,w
 26581  2057  3DA1               	addwfc	??i1___flge+1,f
 26582  2058  0826               	movf	??i1___flge+6,w
 26583  2059  3DA2               	addwfc	??i1___flge+2,f
 26584  205A  0827               	movf	??i1___flge+7,w
 26585  205B  3DA3               	addwfc	??i1___flge+3,f
 26586  205C  0823               	movf	??i1___flge+3,w
 26587  205D  00F3               	movwf	i1___flge@ff1+3
 26588  205E  0822               	movf	??i1___flge+2,w
 26589  205F  00F2               	movwf	i1___flge@ff1+2
 26590  2060  0821               	movf	??i1___flge+1,w
 26591  2061  00F1               	movwf	i1___flge@ff1+1
 26592  2062  0820               	movf	??i1___flge,w
 26593  2063  00F0               	movwf	i1___flge@ff1
 26594  2064                     i1l5873:	
 26595  2064  1FF7               	btfss	i1___flge@ff2+3,7
 26596  2065  288D               	goto	i1l5877
 26597  2066  3000               	movlw	0
 26598  2067  00A0               	movwf	??i1___flge
 26599  2068  3000               	movlw	0
 26600  2069  00A1               	movwf	??i1___flge+1
 26601  206A  3000               	movlw	0
 26602  206B  00A2               	movwf	??i1___flge+2
 26603  206C  3080               	movlw	128
 26604  206D  00A3               	movwf	??i1___flge+3
 26605  206E  0974               	comf	i1___flge@ff2,w
 26606  206F  00A4               	movwf	??i1___flge+4
 26607  2070  0975               	comf	i1___flge@ff2+1,w
 26608  2071  00A5               	movwf	??i1___flge+5
 26609  2072  0976               	comf	i1___flge@ff2+2,w
 26610  2073  00A6               	movwf	??i1___flge+6
 26611  2074  0977               	comf	i1___flge@ff2+3,w
 26612  2075  00A7               	movwf	??i1___flge+7
 26613  2076  0AA4               	incf	??i1___flge+4,f
 26614  2077  1903               	skipnz
 26615  2078  0AA5               	incf	??i1___flge+5,f
 26616  2079  1903               	skipnz
 26617  207A  0AA6               	incf	??i1___flge+6,f
 26618  207B  1903               	skipnz
 26619  207C  0AA7               	incf	??i1___flge+7,f
 26620  207D  0824               	movf	??i1___flge+4,w
 26621  207E  07A0               	addwf	??i1___flge,f
 26622  207F  0825               	movf	??i1___flge+5,w
 26623  2080  3DA1               	addwfc	??i1___flge+1,f
 26624  2081  0826               	movf	??i1___flge+6,w
 26625  2082  3DA2               	addwfc	??i1___flge+2,f
 26626  2083  0827               	movf	??i1___flge+7,w
 26627  2084  3DA3               	addwfc	??i1___flge+3,f
 26628  2085  0823               	movf	??i1___flge+3,w
 26629  2086  00F7               	movwf	i1___flge@ff2+3
 26630  2087  0822               	movf	??i1___flge+2,w
 26631  2088  00F6               	movwf	i1___flge@ff2+2
 26632  2089  0821               	movf	??i1___flge+1,w
 26633  208A  00F5               	movwf	i1___flge@ff2+1
 26634  208B  0820               	movf	??i1___flge,w
 26635  208C  00F4               	movwf	i1___flge@ff2
 26636  208D                     i1l5877:	
 26637  208D  3080               	movlw	128
 26638  208E  06F3               	xorwf	i1___flge@ff1+3,f
 26639  208F  3080               	movlw	128
 26640  2090  06F7               	xorwf	i1___flge@ff2+3,f
 26641  2091  0877               	movf	i1___flge@ff2+3,w
 26642  2092  0273               	subwf	i1___flge@ff1+3,w
 26643  2093  1D03               	skipz
 26644  2094  0008               	return
 26645  2095  0876               	movf	i1___flge@ff2+2,w
 26646  2096  0272               	subwf	i1___flge@ff1+2,w
 26647  2097  1D03               	skipz
 26648  2098  0008               	return
 26649  2099  0875               	movf	i1___flge@ff2+1,w
 26650  209A  0271               	subwf	i1___flge@ff1+1,w
 26651  209B  1D03               	skipz
 26652  209C  0008               	return
 26653  209D  0874               	movf	i1___flge@ff2,w
 26654  209E  0270               	subwf	i1___flge@ff1,w
 26655  209F  0008               	return
 26656  20A0                     __end_ofi1___flge:	
 26657                           
 26658                           	psect	text74
 26659  302C                     __ptext74:	
 26660 ;; *************** function _strncpy *****************
 26661 ;; Defined at:
 26662 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strncpy.c"
 26663 ;; Parameters:    Size  Location     Type
 26664 ;;  d               1    wreg     PTR unsigned char 
 26665 ;;		 -> dataPacket(15), 
 26666 ;;  s               1    0[COMMON] PTR const unsigned char 
 26667 ;;		 -> buffer(20), 
 26668 ;;  n               2    1[COMMON] unsigned int 
 26669 ;; Auto vars:     Size  Location     Type
 26670 ;;  d               1    4[COMMON] PTR unsigned char 
 26671 ;;		 -> dataPacket(15), 
 26672 ;;  cp              1    5[COMMON] PTR unsigned char 
 26673 ;;		 -> dataPacket(15), 
 26674 ;; Return value:  Size  Location     Type
 26675 ;;                  1    wreg      PTR unsigned char 
 26676 ;; Registers used:
 26677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 26678 ;; Tracked objects:
 26679 ;;		On entry : 0/0
 26680 ;;		On exit  : 0/0
 26681 ;;		Unchanged: 0/0
 26682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26683 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26684 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26685 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26686 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26687 ;;Total ram usage:        6 bytes
 26688 ;; Hardware stack levels used:    1
 26689 ;; This function calls:
 26690 ;;		Nothing
 26691 ;; This function is called by:
 26692 ;;		_uartReceiveISR
 26693 ;; This function uses a non-reentrant model
 26694 ;;
 26695                           
 26696                           
 26697                           ;psect for function _strncpy
 26698  302C                     _strncpy:	
 26699                           
 26700                           ;incstack = 0
 26701                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 26702                           ;strncpy@d stored from wreg
 26703  302C  00F4               	movwf	strncpy@d
 26704  302D  0874               	movf	strncpy@d,w
 26705  302E  00F3               	movwf	??_strncpy
 26706  302F  0873               	movf	??_strncpy,w
 26707  3030  00F5               	movwf	strncpy@cp
 26708  3031                     i1l5277:	
 26709  3031  0871               	movf	strncpy@n,w
 26710  3032  0472               	iorwf	strncpy@n+1,w
 26711  3033  1903               	btfsc	3,2
 26712  3034  2852               	goto	i1l5283
 26713  3035  3001               	movlw	1
 26714  3036  02F1               	subwf	strncpy@n,f
 26715  3037  3000               	movlw	0
 26716  3038  3BF2               	subwfb	strncpy@n+1,f
 26717  3039  0875               	movf	strncpy@cp,w
 26718  303A  0086               	movwf	6
 26719  303B  3002               	movlw	2	; select bank4/5
 26720  303C  0087               	movwf	7
 26721  303D  0AF5               	incf	strncpy@cp,f
 26722  303E  0870               	movf	strncpy@s,w
 26723  303F  0084               	movwf	4
 26724  3040  3002               	movlw	2	; select bank4/5
 26725  3041  0085               	movwf	5
 26726  3042  0AF0               	incf	strncpy@s,f
 26727  3043  0800               	movf	0,w
 26728  3044  3FC0               	movwi [0]fsr1
 26729  3045  0889               	movf	9,f
 26730  3046  1903               	btfsc	3,2
 26731  3047  2852               	goto	i1l5283
 26732  3048  2831               	goto	i1l5277
 26733  3049                     i1l5279:	
 26734  3049  0875               	movf	strncpy@cp,w
 26735  304A  0086               	movwf	6
 26736  304B  3002               	movlw	2	; select bank4/5
 26737  304C  0087               	movwf	7
 26738  304D  0181               	clrf	1
 26739  304E  3001               	movlw	1
 26740  304F  00F3               	movwf	??_strncpy
 26741  3050  0873               	movf	??_strncpy,w
 26742  3051  07F5               	addwf	strncpy@cp,f
 26743  3052                     i1l5283:	
 26744  3052  3001               	movlw	1
 26745  3053  02F1               	subwf	strncpy@n,f
 26746  3054  3000               	movlw	0
 26747  3055  3BF2               	subwfb	strncpy@n+1,f
 26748  3056  0A71               	incf	strncpy@n,w
 26749  3057  1D03               	skipz
 26750  3058  2849               	goto	i1l5279
 26751  3059  0A72               	incf	strncpy@n+1,w
 26752  305A  1903               	btfsc	3,2
 26753  305B  0008               	return
 26754  305C  2849               	goto	i1l5279
 26755  305D                     __end_of_strncpy:	
 26756                           ;	Return value of _strncpy is never used
 26757                           
 26758                           
 26759                           	psect	text75
 26760  3244                     __ptext75:	
 26761 ;; *************** function _rotISR *****************
 26762 ;; Defined at:
 26763 ;;		line 36 in file "inputs.c"
 26764 ;; Parameters:    Size  Location     Type
 26765 ;;		None
 26766 ;; Auto vars:     Size  Location     Type
 26767 ;;		None
 26768 ;; Return value:  Size  Location     Type
 26769 ;;                  1    wreg      void 
 26770 ;; Registers used:
 26771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 26772 ;; Tracked objects:
 26773 ;;		On entry : 0/0
 26774 ;;		On exit  : 0/0
 26775 ;;		Unchanged: 0/0
 26776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26779 ;;      Temps:         13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26780 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26781 ;;Total ram usage:       13 bytes
 26782 ;; Hardware stack levels used:    1
 26783 ;; This function calls:
 26784 ;;		Nothing
 26785 ;; This function is called by:
 26786 ;;		_ISR
 26787 ;; This function uses a non-reentrant model
 26788 ;;
 26789                           
 26790                           
 26791                           ;psect for function _rotISR
 26792  3244                     _rotISR:	
 26793                           
 26794                           ;inputs.c: 43:  curRotState = transition_table[curRotState & 0b00000111][(PORTAbits.RA5 
      +                          << 1) | PORTAbits.RA4];
 26795                           
 26796                           ;incstack = 0
 26797                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 26798  3244  0140               	movlb	0	; select bank0
 26799  3245  0E0C               	swapf	12,w	;volatile
 26800  3246  3901               	andlw	1
 26801  3247  00F0               	movwf	??_rotISR
 26802  3248  01F1               	clrf	??_rotISR+1
 26803  3249  0E0C               	swapf	12,w	;volatile
 26804  324A  0C89               	rrf	9,f
 26805  324B  3901               	andlw	1
 26806  324C  00F2               	movwf	??_rotISR+2
 26807  324D  01F3               	clrf	??_rotISR+3
 26808  324E  35F2               	lslf	??_rotISR+2,f
 26809  324F  0DF3               	rlf	??_rotISR+3,f
 26810  3250  0870               	movf	??_rotISR,w
 26811  3251  0472               	iorwf	??_rotISR+2,w
 26812  3252  00F4               	movwf	??_rotISR+4
 26813  3253  0871               	movf	??_rotISR+1,w
 26814  3254  0473               	iorwf	??_rotISR+3,w
 26815  3255  00F5               	movwf	??_rotISR+5
 26816  3256  0860               	movf	_curRotState,w	;volatile
 26817  3257  3907               	andlw	7
 26818  3258  00F6               	movwf	??_rotISR+6
 26819  3259  01F7               	clrf	??_rotISR+7
 26820  325A  35F6               	lslf	??_rotISR+6,f
 26821  325B  0DF7               	rlf	??_rotISR+7,f
 26822  325C  35F6               	lslf	??_rotISR+6,f
 26823  325D  0DF7               	rlf	??_rotISR+7,f
 26824  325E  30FC               	movlw	low (_transition_table| (0+32768))
 26825  325F  00F8               	movwf	??_rotISR+8
 26826  3260  30B8               	movlw	high (_transition_table| (0+32768))
 26827  3261  00F9               	movwf	??_rotISR+9
 26828  3262  0876               	movf	??_rotISR+6,w
 26829  3263  0778               	addwf	??_rotISR+8,w
 26830  3264  00FA               	movwf	??_rotISR+10
 26831  3265  0877               	movf	??_rotISR+7,w
 26832  3266  3D79               	addwfc	??_rotISR+9,w
 26833  3267  00FB               	movwf	??_rotISR+11
 26834  3268  087A               	movf	??_rotISR+10,w
 26835  3269  0774               	addwf	??_rotISR+4,w
 26836  326A  0084               	movwf	4
 26837  326B  087B               	movf	??_rotISR+11,w
 26838  326C  3D75               	addwfc	??_rotISR+5,w
 26839  326D  0085               	movwf	5
 26840  326E  0800               	movf	0,w	;code access
 26841  326F  00FC               	movwf	??_rotISR+12
 26842  3270  087C               	movf	??_rotISR+12,w
 26843  3271  00E0               	movwf	_curRotState	;volatile
 26844                           
 26845                           ;inputs.c: 46:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 26846  3272  1FE0               	btfss	_curRotState,7	;volatile
 26847  3273  2A79               	goto	i1l6537
 26848  3274  3001               	movlw	1
 26849  3275  00F0               	movwf	??_rotISR
 26850  3276  0870               	movf	??_rotISR,w
 26851  3277  0142               	movlb	2	; select bank2
 26852  3278  00EC               	movwf	_rotDir^(0+256)	;volatile
 26853  3279                     i1l6537:	
 26854                           
 26855                           ;inputs.c: 47:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 26856  3279  0140               	movlb	0	; select bank0
 26857  327A  1F60               	btfss	_curRotState,6	;volatile
 26858  327B  2A81               	goto	i1l297
 26859  327C  3002               	movlw	2
 26860  327D  00F0               	movwf	??_rotISR
 26861  327E  0870               	movf	??_rotISR,w
 26862  327F  0142               	movlb	2	; select bank2
 26863  3280  00EC               	movwf	_rotDir^(0+256)	;volatile
 26864  3281                     i1l297:	
 26865                           
 26866                           ;inputs.c: 49:  userActivity = tick100ms;
 26867  3281  0143               	movlb	3	; select bank3
 26868  3282  086E               	movf	(_tick100ms+3)^(0+384),w	;volatile
 26869  3283  00EA               	movwf	(_userActivity+3)^(0+384)	;volatile
 26870  3284  086D               	movf	(_tick100ms+2)^(0+384),w	;volatile
 26871  3285  00E9               	movwf	(_userActivity+2)^(0+384)	;volatile
 26872  3286  086C               	movf	(_tick100ms+1)^(0+384),w	;volatile
 26873  3287  00E8               	movwf	(_userActivity+1)^(0+384)	;volatile
 26874  3288  086B               	movf	_tick100ms^(0+384),w	;volatile
 26875  3289  00E7               	movwf	_userActivity^(0+384)	;volatile
 26876  328A  0008               	return
 26877  328B                     __end_of_rotISR:	
 26878                           
 26879                           	psect	text76
 26880  1001                     __ptext76:	
 26881 ;; *************** function _pushButtonISR *****************
 26882 ;; Defined at:
 26883 ;;		line 56 in file "inputs.c"
 26884 ;; Parameters:    Size  Location     Type
 26885 ;;		None
 26886 ;; Auto vars:     Size  Location     Type
 26887 ;;		None
 26888 ;; Return value:  Size  Location     Type
 26889 ;;                  1    wreg      void 
 26890 ;; Registers used:
 26891 ;;		wreg, status,2, status,0
 26892 ;; Tracked objects:
 26893 ;;		On entry : 0/0
 26894 ;;		On exit  : 0/0
 26895 ;;		Unchanged: 0/0
 26896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 26897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26900 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 26901 ;;Total ram usage:        1 bytes
 26902 ;; Hardware stack levels used:    1
 26903 ;; This function calls:
 26904 ;;		Nothing
 26905 ;; This function is called by:
 26906 ;;		_ISR
 26907 ;; This function uses a non-reentrant model
 26908 ;;
 26909                           
 26910                           
 26911                           ;psect for function _pushButtonISR
 26912  1001                     _pushButtonISR:	
 26913                           
 26914                           ;inputs.c: 59:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT)) {
 26915                           
 26916                           ;incstack = 0
 26917                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 26918  1001  0140               	movlb	0	; select bank0
 26919  1002  1B8C               	btfsc	12,7	;volatile
 26920  1003  2817               	goto	i1l6513
 26921  1004  3004               	movlw	4
 26922  1005  067D               	xorwf	_pbState,w	;volatile
 26923  1006  1903               	btfsc	3,2
 26924  1007  2817               	goto	i1l6513
 26925                           
 26926                           ;inputs.c: 60:   tick10ms = 0;
 26927  1008  01E2               	clrf	_tick10ms	;volatile
 26928                           
 26929                           ;inputs.c: 61:   pbState = PB_WAIT;
 26930  1009  3004               	movlw	4
 26931  100A  00F0               	movwf	??_pushButtonISR
 26932  100B  0870               	movf	??_pushButtonISR,w
 26933  100C  00FD               	movwf	_pbState	;volatile
 26934                           
 26935                           ;inputs.c: 62:   userActivity = tick100ms;
 26936  100D  0143               	movlb	3	; select bank3
 26937  100E  086E               	movf	(_tick100ms+3)^(0+384),w	;volatile
 26938  100F  00EA               	movwf	(_userActivity+3)^(0+384)	;volatile
 26939  1010  086D               	movf	(_tick100ms+2)^(0+384),w	;volatile
 26940  1011  00E9               	movwf	(_userActivity+2)^(0+384)	;volatile
 26941  1012  086C               	movf	(_tick100ms+1)^(0+384),w	;volatile
 26942  1013  00E8               	movwf	(_userActivity+1)^(0+384)	;volatile
 26943  1014  086B               	movf	_tick100ms^(0+384),w	;volatile
 26944  1015  00E7               	movwf	_userActivity^(0+384)	;volatile
 26945                           
 26946                           ;inputs.c: 63:  } else if (pbState == PB_WAIT) {
 26947  1016  0008               	return
 26948  1017                     i1l6513:	
 26949  1017  3004               	movlw	4
 26950  1018  067D               	xorwf	_pbState,w	;volatile
 26951  1019  1D03               	btfss	3,2
 26952  101A  0008               	return
 26953                           
 26954                           ;inputs.c: 64:   if ((tick10ms > 10) && (tick10ms <= 70) && (PORTAbits.RA7))
 26955  101B  300B               	movlw	11
 26956  101C  0140               	movlb	0	; select bank0
 26957  101D  0262               	subwf	_tick10ms,w	;volatile
 26958  101E  1C03               	skipc
 26959  101F  282A               	goto	i1l6523
 26960  1020  3047               	movlw	71
 26961  1021  0262               	subwf	_tick10ms,w	;volatile
 26962  1022  1C03               	btfss	3,0
 26963  1023  1F8C               	btfss	12,7	;volatile
 26964  1024  282A               	goto	i1l6523
 26965                           
 26966                           ;inputs.c: 66:    pbState = PB_SHORT;
 26967  1025  3001               	movlw	1
 26968  1026  00F0               	movwf	??_pushButtonISR
 26969  1027  0870               	movf	??_pushButtonISR,w
 26970  1028  00FD               	movwf	_pbState	;volatile
 26971  1029  0008               	return
 26972  102A                     i1l6523:	
 26973                           ;inputs.c: 67:   else if ((tick10ms > 70) && (!PORTAbits.RA7))
 26974                           
 26975  102A  3047               	movlw	71
 26976  102B  0262               	subwf	_tick10ms,w	;volatile
 26977  102C  1803               	btfsc	3,0
 26978  102D  1B8C               	btfsc	12,7	;volatile
 26979  102E  2834               	goto	i1l306
 26980                           
 26981                           ;inputs.c: 69:    pbState = PB_LONG;
 26982  102F  3002               	movlw	2
 26983  1030  00F0               	movwf	??_pushButtonISR
 26984  1031  0870               	movf	??_pushButtonISR,w
 26985  1032  00FD               	movwf	_pbState	;volatile
 26986  1033  0008               	return
 26987  1034                     i1l306:	
 26988                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 26989                           
 26990  1034  1F8C               	btfss	12,7	;volatile
 26991  1035  0008               	return
 26992                           
 26993                           ;inputs.c: 72:    pbState = PB_ABORT;
 26994  1036  3003               	movlw	3
 26995  1037  00F0               	movwf	??_pushButtonISR
 26996  1038  0870               	movf	??_pushButtonISR,w
 26997  1039  00FD               	movwf	_pbState	;volatile
 26998                           
 26999                           ;inputs.c: 73:  }
 27000  103A  0008               	return
 27001  103B                     __end_of_pushButtonISR:	
 27002  007E                     btemp	set	126	;btemp
 27003  007E                     int$flags	set	126
 27004  007E                     wtemp0	set	126


Data Sizes:
    Strings     780
    Constant    186
    Data        14
    BSS         131
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     56      68
    BANK1            80     80      80
    BANK2            80     73      77
    BANK3            80     71      80
    BANK4            80     15      68
    BANK5            80      0      66
    BANK6            80     23      23
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2605	PTR const void  size(2) Largest target is 36
		 -> channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    menu$2573	const PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@s1	PTR const void  size(2) Largest target is 36
		 -> channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 36
		 -> channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> buffer(BANK5[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    sp__memcpy	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(2) Largest target is 36
		 -> channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(2) Largest target is 36
		 -> channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(2) Largest target is 36
		 -> channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(2) Largest target is 36
		 -> channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> storeNVM@buf(BANK1[64]), 

    itoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK4[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK4[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK6[4]), channelThing@grpA(BANK6[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    stateFuncTbl	const PTR FTN()unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setOutputPower@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_87(CODE[13]), STR_86(CODE[13]), STR_85(CODE[13]), STR_84(CODE[13]), 
		 -> STR_83(CODE[13]), STR_82(CODE[13]), STR_81(CODE[13]), STR_80(CODE[13]), 
		 -> STR_79(CODE[13]), STR_78(CODE[13]), STR_77(CODE[13]), STR_76(CODE[13]), 
		 -> STR_75(CODE[13]), STR_74(CODE[13]), STR_73(CODE[13]), STR_72(CODE[13]), 
		 -> STR_71(CODE[13]), STR_70(CODE[13]), STR_69(CODE[13]), STR_68(CODE[13]), 
		 -> STR_67(CODE[13]), STR_66(CODE[13]), STR_65(CODE[13]), STR_64(CODE[13]), 
		 -> STR_63(CODE[13]), STR_62(CODE[13]), STR_61(CODE[9]), STR_60(CODE[2]), 
		 -> STR_59(CODE[13]), STR_58(CODE[9]), STR_57(CODE[2]), STR_56(CODE[13]), 
		 -> STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[13]), STR_52(CODE[10]), 
		 -> STR_51(CODE[10]), STR_50(CODE[3]), STR_49(CODE[7]), STR_48(CODE[37]), 
		 -> STR_47(CODE[8]), STR_46(CODE[2]), STR_45(CODE[13]), STR_44(CODE[13]), 
		 -> STR_43(CODE[13]), STR_42(CODE[8]), STR_41(CODE[2]), STR_40(CODE[7]), 
		 -> STR_39(CODE[6]), STR_38(CODE[7]), STR_37(CODE[6]), STR_36(CODE[13]), 
		 -> STR_35(CODE[8]), STR_34(CODE[13]), STR_33(CODE[13]), STR_32(CODE[13]), 
		 -> STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), STR_28(CODE[13]), 
		 -> STR_27(CODE[9]), STR_26(CODE[8]), STR_25(CODE[5]), STR_24(CODE[8]), 
		 -> STR_23(CODE[5]), STR_22(CODE[13]), STR_21(CODE[13]), STR_20(CODE[13]), 
		 -> STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[9]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[13]), STR_13(CODE[13]), STR_12(CODE[3]), 
		 -> STR_11(CODE[3]), STR_10(CODE[4]), STR_9(CODE[2]), STR_8(CODE[4]), 
		 -> STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[8]), STR_4(CODE[2]), 
		 -> STR_3(CODE[4]), str(BANK4[10]), STR_2(CODE[8]), STR_1(CODE[57]), 

    initGlobalData@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->i1___flge

Critical Paths under _main in BANK0

    _viewErrorMessage->_OLED_print_xy
    _systemCheck->___flmul
    _readNVM->_FLASH_ReadWord
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _storeNVM->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _getNextState->_timeSince
    _returnToPage->___wmul
    _paging->_OLED_command
    _itoa->___awdiv
    _ftoa->___fltol
    _OLED_print_xy->_OLED_command
    _OLED_print_xy->_OLED_write
    _initGlobalData->___wmul
    _getAnalogValues->___flmul
    _controller->_timeSince
    _checkChannelStatus->___fltol
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _swap->___wmul
    _sortCur->___fltol
    _memcpy->___wmul
    ___xxtofl->___wmul
    ___flge->___flmul
    _calcRequiredPower->___flmul
    ___wmul->___awdiv
    ___flneg->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    ___fladd->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    _uartReceiveISR->i1___flge

Critical Paths under _main in BANK1

    _systemCheck->___flge
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_ftoa
    _setSkyTemp->_spinInput
    _setOutputPower->_ftoa
    _setOutputPower->_spinInput
    _setLensDia->_ftoa
    _setLensDia->_spinInput
    _setFudgeFactor->_ftoa
    _setFudgeFactor->_spinInput
    _setDPOffset->_ftoa
    _setDPOffset->_spinInput
    _spinInput->___flge
    ___flsub->___fladd
    _channelView->_ftoa
    _channelSetup->_ftoa
    _ftoa->___flge
    _getAnalogValues->___fladd
    _checkSensor->___flge
    _checkChannelStatus->___flge
    _channelThing->_qsort
    _qsort->_sortDC
    _qsort->_sortDCRev
    _sortCur->___fltol
    ___fltol->___fladd
    ___flge->___fladd
    _calcRequiredPower->___fladd
    ___flneg->___flmul
    ___fldiv->___flmul
    ___fladd->___flneg

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _menu->_setLensDia
    _setSkyTemp->_storeNVM
    _setLensDia->_storeNVM
    _setFudgeFactor->_storeNVM
    _setDPOffset->_storeNVM
    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    _main->_channelThing

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0 1290120
                                             79 BANK1      1     1      0
                                             64 BANK3      7     7      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                             ___flge
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                            _readNVM
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   27806
                                             28 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   25728
                                             57 BANK1      4     4      0
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (1) _readNVM                                             98    98      0     584
                                             15 BANK0      2     2      0
                                              0 BANK1     64    64      0
                                              0 BANK2     32    32      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     219
                                             12 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _menu                                                 6     6      0 1018490
                                             36 BANK2      6     6      0
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           2     2      0   94141
                                             71 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                2     2      0   89408
                                             71 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           1     1      0  113988
                                             71 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       6     6      0  134011
                                             71 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                          10    10      0  124476
                                             71 BANK1      6     6      0
                                             32 BANK2      4     4      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       1     1      0  113988
                                             71 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          1     1      0  113988
                                             71 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _storeNVM                                            99    99      0    2396
                                             25 BANK0      3     3      0
                                              0 BANK1     64    64      0
                                              0 BANK2     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_WriteBlock                                    10     7      3    1386
                                             15 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     344
                                             12 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   23672
                                             54 BANK0      2     2      0
                                             57 BANK1     14     0     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    7646
                                             41 BANK1      8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      48
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                        10     7      3   11358
                                             32 BANK0     10     7      3
                             ___wmul
                              _getPB (ARG)
                          _timeSince (ARG)
 ---------------------------------------------------------------------------------
 (2) _channelView                                         13    13      0  108762
                                             71 BANK1      8     8      0
                                              0 BANK2      5     5      0
                      _OLED_print_xy
                             ___bmul
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         6     6      0  111827
                                             71 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0   11138
                                             27 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1536
                                             19 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      48
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 7     5      2    4733
                                             21 BANK0      7     5      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   51134
                                             57 BANK1     14     8      6
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   25600
                                             19 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       7     7      0   10920
                                             27 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         4     4      0      24
                                             12 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   26769
                                             41 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                          10    10      0    4819
                                             32 BANK0     10    10      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          1     1      0    8341
                                             54 BANK0      1     1      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           20    16      4     819
                                             12 BANK0     20    16      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   41662
                                             57 BANK1      4     4      0
                                              0 BANK2     20    20      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     729
                                             16 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      31
                                             12 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                2     2      0    1496
                                             19 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1454
                                             12 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1734
                                             24 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     496
                                             12 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     816
                                             12 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        38    38      0   79360
                                              0 BANK4     15    15      0
                                              0 BANK6     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              154   146      8   32063
                                             60 BANK1     17     9      8
                                              0 BANK2     73    73      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___wmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 8     2      6     588
                                             27 BANK0      8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                           10     6      4    3051
                                             50 BANK1     10     6      4
                             ___bmul
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDC                                              10     6      4    3051
                                             50 BANK1     10     6      4
                             ___bmul
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    2921
                                             12 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    9252
                                             50 BANK1      8     4      4
                            ___fladd
                            ___flneg
                            ___fltol
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     898
                                             54 BANK0      2     2      0
                                             41 BANK1      9     5      4
                            ___fladd (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     6      4     541
                                             27 BANK0     10     6      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1054
                                             12 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1414
                                             27 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              16     8      8    6004
                                             41 BANK1     16     8      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   63    63      0   35810
                                             41 BANK1      6     6      0
                                              0 BANK2     57    57      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4   10440
                                             21 BANK0      6     2      4
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     514
                                             13 BANK1      4     0      4
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8   11104
                                             41 BANK0     13     5      8
                                              0 BANK1     13    13      0
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2    1194
                                             12 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    4950
                                             13 BANK1     26    18      8
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             24    16      8    7344
                                             17 BANK1     24    16      8
                             ___bmul (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                                2     2      0    1342
                                             19 BANK0      2     2      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     602
                                             18 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     770
                                             19 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     602
                                             18 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      54
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     506
                                             15 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0     168
                                             12 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     560
                                              8 BANK0      4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       1     1      0     560
                                              8 COMMON     1     1      0
                            _strncpy
                           i1___flge
 ---------------------------------------------------------------------------------
 (9) i1___flge                                            16     8      8     234
                                              0 COMMON     8     0      8
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (9) _strncpy                                              6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (8) _rotISR                                              13    13      0       0
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   ___flge
     ___bmul (ARG)
     ___fladd (ARG)
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv (ARG)
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul (ARG)
       __Umul8_16
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl (ARG)
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       _getAnalogValue (ARG)
     _getAnalogValue (ARG)
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flneg
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___awdiv (ARG)
       ___bmul (ARG)
   _channelThing
     ___bmul
     ___fladd
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___awdiv (ARG)
       ___bmul (ARG)
     ___xxtofl
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___wmul
         ___awdiv (ARG)
         ___bmul (ARG)
       _memcpy
         ___awdiv (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
       _sortCur *
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
       _sortDC *
         ___bmul
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
       _sortDCRev *
         ___bmul
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
       _swap *
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___fladd (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
     ___wmul
       ___awdiv (ARG)
       ___bmul (ARG)
     ___xxtofl
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
     _setChannelSwitch
       ___bmul (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___awdiv (ARG)
       ___bmul (ARG)
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___awdiv (ARG)
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       ___bmul
       ___wmul
         ___awdiv (ARG)
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___awdiv (ARG)
         ___bmul (ARG)
       _getPB (ARG)
       _timeSince (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       ___wmul
         ___awdiv (ARG)
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___awdiv (ARG)
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
       _ftoa
         ___fladd
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fldiv
           ___bmul (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___fladd (ARG)
             ___bmul (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                     ___bmul (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                   ___bmul (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___awdiv (ARG)
           ___bmul (ARG)
     _timeSince *
   _readNVM
     _FLASH_ReadWord
   _systemCheck
     ___fldiv
       ___bmul (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                 ___bmul (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
               ___bmul (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
             ___bmul (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
           ___bmul (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
         ___bmul (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     _strncpy
     i1___flge

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     38      44       5       85.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1DC       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     49      4D      10       96.3%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     47      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      F      44      14       85.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      42      16       82.5%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50     17      17      18       28.8%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1DC      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Feb 03 15:31:29 2020

                  _pushButtonISR 1001                    returnToPage@n 003E         __end_of_transition_table 3918  
                   _stateFuncTbl 386C                     ___fldiv@aexp 00C6                     ___fldiv@bexp 00C5  
                              pc 0002                     ___fldiv@sign 00BE                   ___bmul@product 002E  
                    __CFG_CP$OFF 0000              __end_of_systemCheck 2374           _calcRequiredPower$2563 014C  
         _calcRequiredPower$2564 0128           _calcRequiredPower$2565 012C           _calcRequiredPower$2566 0130  
         _calcRequiredPower$2567 0134           _calcRequiredPower$2568 0138                     ___awdiv@sign 0032  
         _calcRequiredPower$2569 013C              ___wmul@multiplicand 0037                     i1___flge@ff1 0070  
                   i1___flge@ff2 0074          ??_OLED_loadSpecialChars 0033              __Umul8_16@word_mpld 0032  
                    __CFG_LVP$ON 0000                     _virtChannels 02AA                              l124 1065  
                            l147 3320                              l178 3009                              l357 3E67  
                            l447 1A22                              l731 15B3                              l635 3468  
                            l821 0E92                              l671 3F39                              l738 165D  
                            l923 34CD                              l940 3F13                              _ISR 0004  
                            _ema 3540                              _str 023F                     ___awmod@sign 0032  
                   __CFG_BORV$LO 0000                              wreg 0009                 returnToPage@page 003D  
                   ___flmul@aexp 00A1                     ___flmul@bexp 00A2                     ___flmul@sign 00A0  
                   ___flmul@temp 00AB                     ___flmul@prod 00A7                    __CFG_BBEN$OFF 0000  
 FLASH_WriteBlock@flashWordArray 0031         __end_of_setChannelSwitch 32D2                     _userActivity 01E7  
                           ?_ISR 0070                 channelThing@grpA 032C                 channelThing@grpB 0332  
                   __CFG_ZCD$OFF 0000                     ___fltol@exp1 0057                             l1110 3307  
           __end_of_channelThing 1000                             l1141 2A33                             l1109 32ED  
                           l1118 1848                             l1241 1E53                             l1321 27EF  
                           l1245 1EEB                             l1262 1F81                             l1318 27CA  
                           l1247 1ECE                             l1319 27E2                             l1415 3F73  
                           l1343 0AFC                             l1370 2B46                             l1362 2B28  
                           l1283 1FF8                             l1275 1FE0                             l1356 2AF2  
                           l1349 0B7F                             ?_ema 0038                             l1297 26B6  
                           l1369 2B3C             __end_of_channelSetup 1A6A                             l6061 2851  
                           l6053 2829                             l7201 3EB9                             l6423 3ED4  
                           l6425 3ED6                             l7197 3EB3                             l8421 32A0  
                           l8423 32A6                             l8415 328E                             l8417 3294  
                           l9411 1ED6                             l9403 1E99                             l8419 329A  
                           l8427 32BB                             l9413 1ED8                             l9421 1EE6  
                           l9343 1E23                             l9513 1FF4                             l9345 1E2B  
                           l7905 3FD9                             l9363 1E48                             l9339 1E20  
                           l9523 3F6D                             l9509 1FF0                             l9437 1F0B  
                           l9429 1EF9                             l9373 1E5D                             l9701 188B  
                           l7909 3FE3                             l9439 1F0D                             l9447 1F1C  
                           l9367 1E4B                             l9623 337A                             l9473 1FA0  
                           l9465 1F93                             l9457 1F79                             l9481 1FA9  
                           l9801 26AB                             l9705 18B4                             l9641 33A0  
                           l9633 3382                             l9617 336F                             l9491 1FB4  
                           l9635 338E                             l9731 29D7                             l9901 27EB  
                           l9821 26E9                             l9805 26AE                             l9645 33A9  
                           l9661 3209                             l7957 37C8                             l9479 1FA7  
                           l9815 26D5                             l8943 2C6B                             l8935 2C4A  
                           l9567 3492                             l9489 1FB2                             l9841 2735  
                           l9921 08DC                             l9649 33B1                             l9673 3216  
                           l9665 3210                             l8961 2D02                             l8953 2CE9  
                           l9851 2753                             l9923 08DF                             l9915 08CC  
                           l9755 2A28                             l9747 2A0A                             l9675 3222  
                           l9683 3237                             l8947 2C90                             l9579 34B8  
                           l9781 2687                             l9941 090C                             l9933 08F9  
                           l9925 08E8                             l9597 3F0D                             l9757 2A37  
                           l9749 2A1A                             l8957 2CF2                             l9847 274E  
                           l9951 0925                             l9943 0915                             l9687 323F  
                           l9679 322E                             l8959 2CFF                             STR_1 387E  
                   __CFG_WDTE$ON 0000                             STR_2 3B99                             l9865 2759  
                           l9849 2717                             l9785 268A                             l9697 1862  
                           STR_3 3BCA                             STR_4 3BE8                             l9875 2787  
                           l9867 2770                             l9787 2692                             l9939 0909  
                           STR_5 3B79                             STR_6 3BB6                             l9877 2789  
                           STR_7 3B79                             STR_8 3BCE                             l9887 27B2  
                           STR_9 3A32                             _LATA 0018                             _PIE0 0716  
                           _PIE3 0719                             _PIE4 071A                             u9915 3FE4  
                           u9925 3FEB                             _TMR0 059C                             _TMR1 020C  
                           u9995 379E                    __CFG_FCMEN$ON 0000                    OLED_send@mode 002F  
                           _data 274A                             _head 0059                             _main 103B  
                           _ftoa 20A0                             _menu 3695                             _itoa 33B6  
                           _tail 0058                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             _swap 3FA2                 channelSetup@page 005B  
                           btemp 007E                ?_FLASH_WriteBlock 002F                    __CFG_BOREN$ON 0000  
                           start 0079                      ?_OLED_write 0070                     spinInput@dir 0057  
                ___fldiv@new_exp 00BF                     spinInput@max 00DF                     spinInput@min 00DB  
              _calcRequiredPower 00D0               ??_FLASH_WriteBlock 0032                   ?_pushButtonISR 0070  
                  __CFG_CSWEN$ON 0000                ___bmul@multiplier 002F                            S11555 3918  
                          S11559 3B38               ?_calcRequiredPower 0070                            ??_ISR 0028  
                          ??_ema 0040               __size_of_OLED_init 008B               __size_of_OLED_send 0017  
                 _setFudgeFactor 3620                            l10003 0AC7                            l10013 0AFF  
                          l10005 0ADE                            l10015 0B01                            l10025 0B38  
                          l11001 2E6C                            l10035 0B68                            l10203 33C0  
                          l10029 0B4F                            l10053 2AEA                            l11005 2E91  
                          l10071 2B2D                            l10063 2B05                            l10311 3FA2  
                          l11111 14E2                            l11015 2EA2                            l10207 33F7  
                          l10119 2A91                            l10073 2B36                            l10065 2B15  
                          l11201 0C7A                            l11033 2EE2                            l10161 20F0  
                          l10209 3404                            l10137 306C                            l10059 2B01  
                          l10323 180B                            l11115 1503                            l10171 2135  
                          l10163 2128                            l10235 3443                            l10331 1C50  
                          l11221 0DE1                            l11141 15E6                            l11109 14D2  
                          l10173 214B                            l10341 1C75                            l10333 1C56  
                          l10087 2B61                            l11039 2EF0                            l10247 3452  
                          l10335 1C58                            l10503 1998                            l11303 24E9  
                          l11241 0EDE                            l11233 0E1B                            l11217 0DD7  
                          l11209 0D47                            l11161 1724                            l11153 164D  
                          l11145 1604                            l11129 1537                            l10193 215D  
                          l10273 2904                            l10353 1CD3                            l10441 1347  
                          l10425 1228                            l10521 1A0D                            l10513 19DF  
                          l11243 0F32                            l11235 0EDD                            l11147 1622  
                          l10099 30AA                            l10195 2200                            l10443 135B  
                          l10427 122F                            l10419 1225                            l11403 111B  
                          l11165 1787                            l11149 1629                            l11093 141D  
                          l10445 1362                            l10429 1236                            l10517 19FA  
                          l10509 19C4                            l10541 2524                            l11261 2388  
                          l11405 113B                            l11159 16C9                            l11167 17F9  
                          l10279 291C                            l10447 1369                            l10455 1385  
                          l10607 2B7B                            l11327 3706                            l11271 23D3  
                          l11177 0B9B                            l10385 1E03                            l10449 1370  
                          l10481 18FF                            l10545 2531                            l11281 2441  
                          l11273 23E9                            l11265 2391                            l11409 1142  
                          l10803 0650                            l10299 3319                            l10459 13C9  
                          l10627 2C32                            l10651 08AA                            l10707 3631  
                          l11291 248B                            l11283 2457                            l11275 23FF  
                          l11267 23A7                            l11259 2386                            l11363 1096  
                          l10805 0687                            l11189 0C46                            l10493 1950  
                          l10557 25A4                            l11293 24A0                            l11285 246D  
                          l11277 2415                            l11269 23BD                            l10831 07E1  
                          l10807 068C                            l10743 2D65                            l10399 115C  
                          l10583 2654                            l10567 25EF                            l10575 2629  
                          l10663 371B                            l10719 3693                            l11279 242B  
                          l11295 24B6                            l11391 10ED                            l11383 10D2  
                          l11375 10C2                            l11359 108A                            l10833 07E6  
                          l10825 07A0                            l10817 071E                            l11561 32C3  
                          l10737 2D0C                            l10593 2669                            l11553 24BF  
                          l11297 24CC                            l11385 10DA                            l10827 07A6  
                          l10587 2667                            l10579 263C                            l10675 377E  
                          l11395 10F4                            l10765 2DC3                            l10757 2DA3  
                          l10749 2D84                            l10773 2DE7                            l11557 13BE  
                          l10597 266B                            l10685 35BD                            l10951 2296  
                          l10769 2DDF                            l10697 361E                            l10961 22DB  
                          l10795 0605                            l10963 22DF                            l10789 05DB  
                          l10973 2324                            l10957 22A5                            l10991 2E25  
                          l10983 2369                            l10993 2E2A                            l10997 2E4F  
                          l10989 2E1F                channelThing@total 0320                    ___fltol@sign1 0056  
                __end_of___fladd 2000                            ?_main 0070                            ?_ftoa 00D9  
                          ?_menu 0070                  __end_of___fldiv 2800                            ?_itoa 0035  
                __end_of___awdiv 33B6                  __end_of___flneg 3E61                            STR_10 3BD2  
                          STR_11 3BDF                            STR_12 3BDC                            STR_20 3AF7  
                          STR_21 3B1E                            STR_13 3AEA                            STR_22 3B2B  
                          STR_14 3A8F                            STR_30 3A68                            STR_23 3BC5  
                          STR_15 3BE2                            STR_31 3A9C                            STR_16 3BE5  
                          STR_40 3BA8                            STR_24 3B81                            STR_32 3A5B  
                          STR_41 3BB4                            STR_25 3BC5                            STR_17 3B60  
                          STR_33 3A75                            STR_50 3BD9                            STR_26 3B91  
                          STR_42 3B71                            STR_18 3B04                            STR_34 3AD0  
                          STR_27 3B60                            STR_35 3B89                            STR_51 3B44  
                          STR_43 3ADD                            STR_19 3A82                            STR_60 3BB4  
                          STR_52 3A51                            STR_36 3B2B                            STR_44 3B11  
                          STR_28 3A4E                  __end_of___awmod 3244                            STR_45 3AD0  
                          STR_37 3BC4                            STR_61 3B57                            STR_53 3AC3  
                          STR_29 3AB6                            STR_46 3BB4                            STR_54 3BAF  
                          STR_38 3BA1                            STR_70 3A0D                            STR_62 3930  
                          STR_39 3BC4                            STR_55 3BD6                            STR_47 3B69  
                          STR_71 39BF                            STR_63 3964                            STR_72 3A0D  
                          STR_56 3AA9                            STR_80 3A1A                            STR_64 394A  
                          STR_48 38B7                            STR_57 3BB4                            STR_81 3A27  
                          STR_49 3BBD                            STR_73 3998                            STR_65 398B  
                          STR_82 39F3                            STR_58 3B4E                            STR_66 39F3  
                          STR_74 393D                            STR_59 38CF                            STR_83 3A41  
                          STR_67 39B2                            STR_75 397E                            STR_68 3930  
                          STR_76 3A34                            STR_84 39E6                            STR_69 3A00  
                          STR_77 39A5                            STR_85 3957                            STR_78 39D9  
                          STR_86 3971                            STR_79 3A27                            STR_87 39CC  
                __end_of___flmul 0B95              ??_calcRequiredPower 00C9  checkSensor@sensorUpdateInterval 0258  
                __end_of___flsub 3F62                  __end_of___fltol 2A47                            ?_swap 003B  
                          u12015 347E                            _T1CLK 0211                            u11225 2C8C  
                          u11235 2CB2                  ___awdiv@divisor 002C                            u12125 3385  
                          u11245 2CD5                            _T1CON 020E                            u11505 31C7  
                          u12065 3F14                            u13105 2B4E                            u13025 2B0E  
                          u12145 338F                            u12225 3219                            u11515 31D5  
                          u12075 3F19                            u12155 3399                            u10475 35A1  
                          u11525 31E5                            u13045 2B22                            u12165 33A1  
                          u14005 0763                            u12245 3228                            u13205 3082  
                          u11535 3EE3                            u12415 2A29                            u14015 0774  
                          u12255 322F                            u13065 2B30                            u14025 077F  
                          u11650 1EBD                            u12355 29E1                            u14035 0791  
                          u11660 1EBE                            u11645 1EB2                            u12605 275C  
                          u14045 07B5                            u15007 299D                            u11815 1F94  
                          u12535 271F                            u14055 07C0                            u13335 3424  
                          u15017 29A9                            u12705 27BB                            u12625 2765  
                          u12545 2726                            u12385 2A0B                            u14065 07D2  
                          u15027 29B5                            u11915 1FCB                            u12715 27D4  
                          u14075 07F4                            u15037 300B                            u11773 1F2E  
                          u11765 1F11                            u12565 272F                            u13445 3315  
                          u15047 3011                            u11695 1EDC                            u12575 2743  
                          u12815 09D7                            u15057 301B                            u12825 0A0E  
                          u15067 3021                            u12835 0A77                            u14700 36DD  
                          u15077 31F2                            u12845 0A9C                            u14605 0E5F  
                          u15087 31F8                            u12695 27A0                            u12855 0AB2  
                          u12865 0ACA                            u11995 3F74                            u12955 0B1F  
                          _IOCAN 1F3E                            u12965 0B43                            u12885 0AD3  
                          u14725 36FB                            _IOCAP 1F3D                            u12975 0B5B  
                          _IOCCN 1F54                            u13945 05E0                            u14690 36DC  
                          u13955 05F2                            u14907 345A                            u14691 36DA  
                          u14917 1530                            u14927 2937                            u14937 2949  
                          u13985 06CC                            u14947 2955                            u13995 072D  
                          u14957 2961                            u14967 296D                            u14887 1146  
                          u14977 2979                            u14897 3438                            u14987 2985  
                          u14997 2991                            i1l306 1034                            i1l262 001C  
                          i1l271 0070                            i1l265 0038                            i1l275 0077  
                          i1l297 3281                  ___awdiv@counter 0031                     main@initDone 01E4  
                          _TRISA 0012                            _TRISB 0013                            _TRISC 0014  
            ___lmul@multiplicand 0030             __size_of_checkSensor 0109                     ?_setDPOffset 0070  
                  __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000       __end_of_checkChannelStatus 1800  
                 OLED_send@value 0031                            _getPB 3E81              getNextState@timeout 0042  
                __end_of_readNVM 28A8                   statusView@page 005D         statusView@prevSensorStat 01EF  
                          ema@in 0038                            _error 30C1                            _setup 0806  
                          _qsort 05AB                            ftoa@w 00E4                 __end_ofi1___flge 20A0  
                          pclath 000A             __size_of_channelView 0292                            swap@c 0042  
                __end_of_sortCur 31B9                            status 0003                            wtemp0 007E  
      __end_of_calcRequiredPower 05AB                  __end_of_strncpy 305D                      controller@n 0049  
                  spinInput@step 00E3                      _systemCheck 2209                   __CFG_MCLRE$OFF 0000  
           __end_of_getLastError 3ED8                  __initialization 007B                     __end_of_main 114D  
                   __end_of_ftoa 2209                     __end_of_menu 370A                     __end_of_itoa 3408  
        __size_of_getAnalogValue 001D                     __end_of_swap 3FD0           __end_of_setFudgeFactor 3695  
                 __CFG_SAFEN$OFF 0000                 _viewErrorMessage 2374         controller@dutyCycleTimer 0220  
                         ??_main 00EF                           ??_ftoa 00DF                           ??_menu 0144  
                         ??_itoa 0037                           ??_swap 0041                   OLED_print_xy@s 0034  
                  sortDCRev@cmp1 00D2                    sortDCRev@cmp2 00D4             __end_of_getNextState 2DE9  
        __size_of_FLASH_ReadWord 0020          __size_of_setOutputPower 0180              __size_of_OLED_write 000B  
              _uartDataReadyFlag 0061                  _setLensDia$2562 0140            getAnalogValue@channel 002F  
                         ?_getPB 0070                           _ADCON1 009E        FLASH_WriteBlock@writeAddr 002F  
                         ?_error 0070                           _ADRESH 009C                           _ADRESL 009B  
               ___awdiv@dividend 002E                           ?_setup 0070                           _ANSELA 1F38  
                         _ANSELB 1F43                           _ANSELC 1F4E               __CFG_RSTOSC$HFINT1 0000  
                         ?_qsort 00DC                           _T0CON0 059E                           _T0CON1 059F  
                         _RC1REG 0119                           _RC1STA 011D                           i1l1118 2021  
                         _RC6PPS 1F26                           i1l5283 3052                           i1l5277 3031  
                         i1l5279 3049                           i1l6513 1017                           i1l6523 102A  
                         i1l6703 0035                           i1l6537 3279                           i1l6553 34EA  
                         i1l6713 0068                           i1l6563 3511                           i1l6547 34E0  
                         i1l6559 350A                           i1l5873 2064                           i1l6691 0027  
                         i1l5877 208D                           i1l5869 203B                           i1l6679 0016  
                         i1l6697 002E                           _INTCON 000B                __end_of_OLED_init 29BA  
      __size_of_FLASH_EraseBlock 0020                __end_of_OLED_send 3EEF                           _OSCFRQ 0893  
                         _SPBRGL 011B                           _TX1REG 011A                           _TX1STA 011E  
           getNextState@intState 0040                 __end_of___xxtofl 2B6A                  ??_pushButtonISR 0070  
                 __CFG_PWRTE$OFF 0000                           ___flge 182D                           ___bmul 3EB0  
                         ___fleq 32D2                           ___lmul 3FD0                        ??___fladd 00B9  
                         ___wmul 3F0A                        ??___fldiv 00B5                        ??___awdiv 0030  
                      ??___flneg 0056                   __CFG_STVREN$ON 0000                        ??___awmod 0030  
                      ??___flmul 0051                        ??___flsub 0056                        ??___fltol 00CD  
                ?_setFudgeFactor 0070                           _buffer 02CE                           _paging 3408  
                         _memcpy 1801                 ___awdiv@quotient 0033                  ___awmod@divisor 002C  
                         _rotISR 3244                           _rotDir 016C               channelSetup@heater 00EB  
        __size_of_initGlobalData 010E                    ?_OLED_command 0070                  ___awmod@counter 0031  
                         _sortDC 3136                        ??_readNVM 002F          FLASH_ReadWord@flashAddr 002C  
             __size_of__Umul8_16 0020            __size_of_channelThing 046B            __size_of_channelSetup 01A3  
          OLED_waitForReady@busy 002C                           swap@s1 003D                           swap@s2 003F  
              OLED_command@value 0032                           qsort@i 0165                           qsort@j 0167  
                         qsort@l 015F                           qsort@r 0161                           qsort@s 0163  
                         qsort@x 015C                        ??_sortCur 0058                 __end_of_storeNVM 292F  
                      ??_strncpy 0073                       ___flge@ff1 00C9                       ___flge@ff2 00CD  
                   ___xxtofl@arg 0045                     ___xxtofl@exp 0044                     ___xxtofl@val 003B  
                     ___fleq@ff1 002C                       ___fleq@ff2 0030                   spinInput@input 00D9  
        __end_of__initialization 00CC                       ___flneg@f1 00AD                     ftoa@intValue 00E3  
     __size_of_calcRequiredPower 04DB                       ___fltol@f1 00C9              ___bmul@multiplicand 002C  
       __size_of_OLED_write4bits 0045                   __pcstackCOMMON 0070                     __pidataBANK0 07FA  
                   __pidataBANK3 07FB                     __pidataBANK4 3EA4                    __end_of_getPB 3E8C  
                  __end_of_error 30F6                     _channelThing 0B95         __size_of_getAnalogValues 01C7  
                   _channelSetup 18C7                    __end_of_setup 08BA                    __end_of_qsort 07FA  
                 ??_OLED_command 0032                        ?i1___flge 0070   __size_of_OLED_loadSpecialChars 001B  
  __end_of_OLED_loadSpecialChars 3F0A               __size_of_getRotDir 000B      FLASH_WriteBlock@GIEBitValue 0037  
                        ??_getPB 002C           __size_of_OLED_print_xy 0033                          ??_error 0033  
                     _dataPacket 0230                ?_setChannelSwitch 0030                          ??_setup 00E7  
           __size_of_setDPOffset 0076                          ??_qsort 00E4                       __pbssBANK0 0058  
                     __pbssBANK2 0169                       __pbssBANK3 01E7                       __pbssBANK4 0220  
                     __pbssBANK5 02A0          __size_of_uartReceiveISR 006A               ??_setChannelSwitch 0031  
          __size_of_getLastError 0016                     ??_OLED_write 0032                __end_of__Umul8_16 3F82  
            channelThing@numGrpA 0330              channelThing@numGrpB 0331                       __pmaintext 103B  
                 _getAnalogValue 3F26                          ?___flge 00C9                          ?___bmul 002C  
                        ?___fleq 002C                   main@displayOff 01E6                          ?___lmul 002C  
                        ?___wmul 0035                  __CFG_PPS1WAY$ON 0000                       __pintentry 0004  
          __size_of_getNextState 00E4                          ?_paging 0033                          ?_memcpy 003B  
              _OLED_waitForReady 3003                   ___lmul@product 0034                          ?_rotISR 0070  
                     ??i1___flge 0020                          ?_sortDC 00D2        __size_of_FLASH_WriteBlock 0069  
             __size_of_timeSince 0080               ?_OLED_waitForReady 0070               __size_of_uartReset 0008  
                 _FLASH_ReadWord 2803            channelThing@totalGrpA 0324            channelThing@totalGrpB 0328  
                 _setOutputPower 24ED                        ?___xxtofl 003B               __size_of_spinInput 008D  
                        _OSCCON1 088D               __size_of_sortDCRev 0040                          _NVMADRH 081B  
                        _NVMADRL 081A                          _NVMDATH 081D                          _NVMDATL 081C  
             __end_of_OLED_write 3E76                          _NVMCON2 081F                     _getLastError 3EC2  
            ??_OLED_waitForReady 002C                    channelThing@n 0336         __end_of_viewErrorMessage 24ED  
               _FLASH_EraseBlock 3F82                       _controller 2C34                     _getNextState 2D05  
                   ?_systemCheck 0070               _checkChannelStatus 13DF           __end_of_getAnalogValue 3F43  
              __end_of_getRotDir 3E81                       ema@average 003A                    _OLED_print_xy 308E  
             getAnalogValues@adc 00CD        __end_of_OLED_waitForReady 302C                  __size_of___flge 009A  
                __size_of___bmul 0012                  __size_of___fleq 0049                          ___fladd 1E06  
                        ___fldiv 266D                          ___awdiv 3364                          ___flneg 3E57  
                __size_of___lmul 0030                          ___awmod 31FE                          ___flmul 08BA  
                        ___flsub 3F43                          ___fltol 29BA                  __size_of___wmul 001C  
                OLED_write@value 0032              ?_checkChannelStatus 0070                    ?_uartSendByte 0070  
                      ?_storeNVM 0070                   _initGlobalData 2EF2           __end_of_FLASH_ReadWord 2823  
                __size_of_paging 0065                ??_OLED_write4bits 002C                  __size_of_memcpy 002C  
                     _initialize 331B                  __size_of_rotISR 0047           __end_of_setOutputPower 266D  
                        __ptext1 2374                          __ptext2 2209                          __ptext3 2823  
                        __ptext4 2803                          __ptext5 3695                          __ptext6 3620  
                        __ptext7 35AC                          __ptext8 370A                          __ptext9 0806  
                  ??_checkSensor 0056                  __size_of_sortDC 0040                          _pbState 007D  
                __CFG_WRTAPP$OFF 0000                     __size_of_ISR 0075                          _readNVM 2823  
               _channelView$2561 0120                          ema@tmp0 0048                     __size_of_ema 006C  
                     ??___xxtofl 003F                 ___awmod@dividend 002E                ??_getAnalogValues 0056  
                      _IOCAFbits 1F3F                  __CFG_WRTSAF$OFF 0000                          _rxCount 005F  
                  ??_channelView 00E7                          _sortCur 3176                          clrloop0 3E8D  
           ??_checkChannelStatus 00D9          setChannelSwitch@channel 0033                          _strncpy 302C  
           end_of_initialization 00CC                       _setLensDia 2B6A                          ftoa@len 00E1  
                        ftoa@pos 00E5                          ftoa@str 00E6                          paging@n 0038  
                        memcpy@d 0044                          memcpy@n 003D                          memcpy@s 0042  
                 paging@lastPage 0033            checkChannelStatus@adc 0120             __end_of_OLED_command 3E57  
          checkChannelStatus@avg 012B                          init_ram 3E98                          itoa@str 003B  
                        initloop 3E99                       _setSkyTemp 35AC                __end_of_timeSince 3800  
              __end_of_uartReset 3E4D                 ??_setFudgeFactor 00E7                        _OLED_init 292F  
                      _OLED_send 3ED8                  ?_getAnalogValue 002C              OLED_setCursor@F7890 0260  
                  ?_returnToPage 0070                __end_of_spinInput 2AD4                   ?_OLED_print_xy 0033  
              __end_of_sortDCRev 3136               OLED_print_xy@F7898 025C                          sortDC@a 00DA  
                        sortDC@b 00DB                          swap@len 003B           __end_of_initGlobalData 3000  
                 ??_uartSendByte 002C        FLASH_ReadWord@GIEBitValue 002E            __CFG_WDTCPS$WDTCPS_10 0000  
                     ??_storeNVM 0039                  ?_FLASH_ReadWord 002C                        _PORTAbits 000C  
                      _PORTCbits 000E                  ?_setOutputPower 0070                  _selectedChannel 005E  
                    ___fladd@grs 00C8             __CFG_WDTCCS$LFINTOSC 0000                    ___xxtofl@sign 0043  
                      _TRISCbits 0014                      ___fldiv@grs 00C1                      ___fldiv@rem 00BA  
           _getAnalogValues$2570 00C9              __end_of_checkSensor 2EF2                 __CFG_FEXTOSC$OFF 0000  
                 _uartReceiveISR 34D6                      ___flmul@grs 00A3                       _statusView 1C31  
            __end_of_channelView 13DF                      ?_controller 0070                getNextState@state 0048  
                channelView@page 005C                       ?_OLED_init 0070                   ??_returnToPage 003B  
                     ?_OLED_send 002F                FLASH_WriteBlock@i 0038            __end_of_pushButtonISR 103B  
     __size_of_OLED_waitForReady 0029                  ?_initGlobalData 0070                   __end_of___flge 18C7  
           __end_of_nextStateTbl 386C                   __end_of___bmul 3EC2                   __end_of___fleq 331B  
                 __end_of___lmul 4000                   __end_of___wmul 3F26                      ?_initialize 0070  
               _FLASH_WriteBlock 346D                   __end_of_paging 346D                   __end_of_memcpy 182D  
                     ftoa@fValue 00D9                   __end_of_rotISR 328B                   __end_of_sortDC 3176  
              __size_ofi1___flge 009A              start_initialization 007B                      __end_of_ISR 0079  
                    __end_of_ema 35AC         OLED_print_xy@row_offsets 0037           __end_of_uartReceiveISR 3540  
                    ?_setLensDia 0070                       readNVM@buf 00A0                       readNVM@nvm 0120  
           calcRequiredPower@Rth 0124             calcRequiredPower@phi 0144                      ?_setSkyTemp 0070  
           initGlobalData@heater 0040                  ??_OLED_print_xy 0036                      sortCur@cmp1 00D2  
                    sortCur@cmp2 00D4                 __CFG_LPBOREN$OFF 0000          _checkChannelStatus$1760 0127  
        _checkChannelStatus$1759 0123                         ??___flge 00D1                         ??___bmul 002D  
                       ??___fleq 0034             __size_of_systemCheck 016B                   timeSince@since 002C  
                       ??___lmul 0034        __size_of_setChannelSwitch 0047                         ??___wmul 0039  
       checkChannelStatus@heater 0132                        __Umul8_16 3F62                      __pdataBANK0 0063  
                    __pdataBANK3 01EF                      __pdataBANK4 0258                         ??_paging 0034  
                       ??_memcpy 003F      FLASH_EraseBlock@GIEBitValue 002E                         ??_rotISR 0070  
       __end_of_FLASH_EraseBlock 3FA2            setChannelSwitch@state 0030                      qsort@compar 00E2  
                       ??_sortDC 00D6                 OLED_print_xy@col 003B                      _checkSensor 2DE9  
                      ___fladd@a 00B5                        ___fladd@b 00B1                 OLED_print_xy@row 0033  
                      ___fldiv@a 00AD                        ___fldiv@b 00B1                      __pbssBIGRAM 274A  
            __size_of_controller 00D1                        ___flmul@a 004D                        ___flmul@b 0049  
                    __pbssCOMMON 007D                        ___flsub@a 00C9                        ___flsub@b 00CD  
                      ___latbits 0003                    ??_setDPOffset 00E7                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                    __pcstackBANK2 0120                    __pcstackBANK3 01A0  
                  __pcstackBANK4 0249                    __pcstackBANK6 0320            _OLED_loadSpecialChars 3EEF  
          __size_of_OLED_command 000A                __size_of___xxtofl 0096                paging@currentPage 0037  
                    _channelView 114D                  ?_uartReceiveISR 0070             __end_of_uartSendByte 3E6B  
                    ?_statusView 0070                ?_viewErrorMessage 0070              __size_of_initialize 0049  
             ??_viewErrorMessage 003C                  _OLED_write4bits 31B9                      ??_OLED_init 0033  
                    ??_OLED_send 0030                      storeNVM@buf 00A0                      storeNVM@nvm 0120  
           setOutputPower@heater 00EB            _viewErrorMessage$1314 003F                         ?___fladd 00B1  
                _getAnalogValues 1A6A                         ?___fldiv 00AD                         ?___awdiv 002C  
                       ?___flneg 00AD                         ?___awmod 002C                         ?___flmul 0049  
                       ?___flsub 00C9                         ?___fltol 00C9                        _getRotDir 3E76  
                     ?__Umul8_16 002C              __size_of_setLensDia 00CA                        __pswtext1 3918  
                      __pswtext2 3B38                     _OLED_command 3E4D               main@controllerIdle 01E5  
           __end_of_specialChars 38FC                         _BAUD1CON 011F                   getNextState@pb 0041  
              __size_of_storeNVM 0087                     channelView@n 0124                         ?_readNVM 0070  
            __size_of_setSkyTemp 0074             __end_of_returnToPage 308E                   __size_of_getPB 000B  
                       ?_sortCur 00D2                   __size_of_error 0035                        _tick100ms 01EB  
                       ?_strncpy 0070                   __size_of_setup 00B4                   __size_of_qsort 024F  
 FLASH_WriteBlock@blockStartAddr 0035                 ??_getAnalogValue 002E              __end_of_setDPOffset 3780  
                 ___wmul@product 0039                         _LATAbits 0018                         _LATBbits 0019  
                       _LATCbits 001A                        clear_ram0 3E8C                         _PIE0bits 0716  
                       _PIE3bits 0719                         _PIE4bits 071A                         _PIR0bits 070C  
                       _PIR3bits 070F        FLASH_EraseBlock@startAddr 002C                         _PIR4bits 0710  
               ??_FLASH_ReadWord 002E                        _timeSince 3780                        _uartReset 3E45  
                initGlobalData@n 003F                __CFG_BBSIZE$BB512 0000                 ??_setOutputPower 00E7  
                     ?_getRotDir 0070                        _spinInput 2A47                        _sortDCRev 30F6  
                       i1___flge 2006                       _ADCON0bits 009D                ___wmul@multiplier 0035  
                   _RX1DTPPSbits 1ECB              __size_of_statusView 01D5           ?_OLED_loadSpecialChars 0070  
                  menu@nextState 0149                       sortDC@cmp1 00D2                       sortDC@cmp2 00D4  
           OLED_write4bits@value 002E                      _curRotState 0060                       sortDCRev@a 00DA  
                     sortDCRev@b 00DB                 _transition_table 38FC             __end_of_stateFuncTbl 387E  
              ___lmul@multiplier 002C          __end_of_OLED_write4bits 31FE      __size_of_checkChannelStatus 0421  
                   _nextStateTbl 3800                _getLastError$1311 002E                        ftoa@width 00DD  
       __end_of_FLASH_WriteBlock 34D6                     ??_controller 0040          __end_of_getAnalogValues 1C31  
            calcRequiredPower@T1 0150              calcRequiredPower@T2 0154                 ??_initGlobalData 003B  
                      paging@dir 0036                    uartSendByte@s 002C                        menu@state 016A  
                      memcpy@tmp 0041                        error@code 0034                       ?_timeSince 002C  
                     ?_uartReset 0070        checkChannelStatus@channel 0131                 _setChannelSwitch 328B  
                    ??__Umul8_16 002E                    ?_channelThing 0070                        itoa@value 0035  
            getAnalogValues@avgI 0228                    ?_channelSetup 0070              getAnalogValues@avgT 022C  
            getAnalogValues@avgV 022A                        itoa@width 0036                 __size_of___fladd 01FA  
                     qsort@vbase 00DC                 __size_of___fldiv 0193                 __size_of___awdiv 0052  
               __size_of___flneg 000A                 __size_of___awmod 0046                       ?_spinInput 00D9  
               __size_of___flmul 02DB                 __size_of___flsub 001F                 __size_of___fltol 008D  
                     qsort@stack 01A0                       qsort@width 00E0                       ?_sortDCRev 00D2  
         OLED_loadSpecialChars@n 0034                     ??_initialize 002C        checkChannelStatus@current 012D  
      checkChannelStatus@samples 0122                         ___xxtofl 2AD4                 __size_of_readNVM 0085  
                       _checksum 016B               __end_of_controller 2D05                      _rxFErrCount 022F  
              _errorMessageQueue 02A0            __size_of_uartSendByte 000A                      _setDPOffset 370A  
       checkSensor@sensorTimeout 0224                         __ptext10 2B6A                         __ptext11 24ED  
                       __ptext20 3E81                         __ptext12 18C7                         __ptext21 2D05  
                       __ptext13 114D                         __ptext30 3EC2                         __ptext22 305D  
                       __ptext14 1C31                         __ptext31 1A6A                         __ptext23 3408  
                       __ptext15 28A8                         __ptext40 30C1                         __ptext32 2C34  
                       __ptext24 3E76                         __ptext16 346D                         __ptext41 31FE  
                       __ptext33 2DE9                         __ptext25 33B6                         __ptext17 3F82  
                       __ptext50 30F6                         __ptext42 3540                         __ptext34 3E61  
                       __ptext26 20A0                         __ptext18 2A47                         __ptext51 3EB0  
                       __ptext43 3FD0                         __ptext35 3E45                         __ptext27 308E  
                       __ptext19 3F43                         __ptext60 08BA                         __ptext52 29BA  
                       __ptext44 32D2                         __ptext36 3780                         __ptext28 331B  
                       __ptext61 3F62                         __ptext53 1801                         __ptext45 0B95  
                       __ptext37 13DF                         __ptext29 2EF2                         __ptext70 31B9  
                       __ptext62 266D                         __ptext54 3364                         __ptext46 05AB  
                       __ptext38 328B                         __ptext63 1E06                         __ptext55 2AD4  
                       __ptext47 3FA2                         __ptext39 3F26                         __ptext72 34D6  
                       __ptext64 3EEF                         __ptext56 182D                         __ptext48 3176  
                       __ptext73 2006                         __ptext65 3E6B                         __ptext57 00D0  
                       __ptext49 3136                         __ptext74 302C                         __ptext66 292F  
                       __ptext58 3F0A                         __ptext75 3244                         __ptext67 3E4D  
                       __ptext59 3E57                         __ptext76 1001                         __ptext68 3003  
                       __ptext69 3ED8                     ??_setLensDia 00E7                 __size_of_sortCur 0043  
                  getNextState@n 0049                      _OSCCON3bits 088F                 __size_of_strncpy 0031  
                       ema@alpha 003C                    __size_of_main 0112                    __size_of_ftoa 0169  
           main@sysCheckInterval 01E0                    __size_of_menu 0075                    __size_of_itoa 0052  
                   ??_setSkyTemp 00E7                         getPB@ret 002D                    __size_of_swap 002E  
                       _tick10ms 0062               __end_of_initialize 3364             __CFG_WDTCWS$WDTCWS_6 0000  
                     _RC1STAbits 011D                      _rxOErrCount 022E                   ??_channelThing 0249  
                 ??_channelSetup 00E7                         int$flags 007E                        setup@page 005A  
                    ??_getRotDir 002C                         _storeNVM 28A8                     _uartSendByte 3E61  
          __size_of_returnToPage 0031               __end_of_setLensDia 2C34          __size_of_setFudgeFactor 0075  
              ?_FLASH_EraseBlock 002C                     ?_checkSensor 0070                 ??_uartReceiveISR 0078  
                       ftoa@prec 00DE                         ftoa@sign 00E2               ??_FLASH_EraseBlock 002E  
                       readNVM@n 0030                       _INTCONbits 000B               calcRequiredPower@A 0148  
             calcRequiredPower@d 0140               calcRequiredPower@n 0158               calcRequiredPower@p 0120  
             __end_of_setSkyTemp 3620                      _NVMCON1bits 081E                         menu@page 0148  
                       memcpy@d1 0040                         memcpy@s1 003B                    ?_getLastError 0070  
                   timeSince@now 003C                   __pstringtext10 3964                   __pstringtext11 3971  
                 __pstringtext20 39E6                   __pstringtext12 397E                   __pstringtext21 39F3  
                 __pstringtext13 398B                   __pstringtext30 3A68                   __pstringtext22 3A00  
                 __pstringtext14 3998                   __pstringtext31 3A75                   __pstringtext23 3A0D  
                 __pstringtext15 39A5                   __pstringtext40 3AEA                   __pstringtext32 3A82  
                 __pstringtext24 3A1A                   __pstringtext16 39B2                   __pstringtext41 3AF7  
                 __pstringtext33 3A8F                   __pstringtext25 3A27                   __pstringtext17 39BF  
                 __pstringtext50 3B69                   __pstringtext42 3B04                   __pstringtext34 3A9C  
                 __pstringtext26 3A34                   __pstringtext18 39CC                   __pstringtext51 3B71  
                 __pstringtext43 3B11                   __pstringtext35 3AA9                   __pstringtext27 3A41  
                 __pstringtext19 39D9                   __pstringtext60 3BB6                   __pstringtext52 3B79  
                 __pstringtext44 3B1E                   __pstringtext36 3AB6                   __pstringtext28 3A4E  
                 __pstringtext61 3BBD                   __pstringtext53 3B81                   __pstringtext45 3B2B  
                 __pstringtext37 3AC3                   __pstringtext29 3A5B                   __pstringtext70 3BE2  
                 __pstringtext62 3BC4                   __pstringtext54 3B89                   __pstringtext46 3B44  
                 __pstringtext38 3AD0                   __pstringtext71 3BE5                   __pstringtext63 3BCA  
                 __pstringtext55 3B91                   __pstringtext47 3B4E                   __pstringtext39 3ADD  
                 __pstringtext72 3BE8                   __pstringtext64 3BCE                   __pstringtext56 3B99  
                 __pstringtext48 3B57                   __pstringtext73 0000                   __pstringtext65 3BD2  
                 __pstringtext57 3BA1                   __pstringtext49 3B60                   __pstringtext66 3BD6  
                 __pstringtext58 3BA8                   __pstringtext67 3BD9                   __pstringtext59 3BAF  
                 __pstringtext68 3BDC                   __pstringtext69 3BDF           __size_of_pushButtonISR 003A  
                      qsort@base 015D                     ?_channelView 0070                        qsort@xbuf 0120  
      viewErrorMessage@errorCode 003E                 ?_OLED_write4bits 0070                         intlevel1 0000  
                      storeNVM@n 003B                     ??_statusView 00E7                     _specialChars 38DC  
              __CFG_CLKOUTEN$OFF 0000                 ?_getAnalogValues 0070                    ?_getNextState 0040  
                  ??_systemCheck 00D9                       _OLED_write 3E6B                        strncpy@cp 0075  
          __end_of_OLED_print_xy 30C1                     _returnToPage 305D                      ??_timeSince 0030  
                    ??_uartReset 002C                      ??_spinInput 0056                      ??_sortDCRev 00D6  
                   getRotDir@ret 002D        __size_of_viewErrorMessage 0179                         sortCur@a 00D6  
                       sortCur@b 00D8                    __pstringtext1 3800                    __pstringtext2 38DC  
                  __pstringtext3 38FC                    __pstringtext4 386C                    __pstringtext5 38B7  
                  __pstringtext6 3930                    __pstringtext7 393D                    __pstringtext8 394A  
                  __pstringtext9 3957                         qsort@nel 00DE           __Umul8_16@multiplicand 002C  
             __end_of_statusView 1E06                   ??_getLastError 002C                         strncpy@d 0074  
                       strncpy@n 0071                         strncpy@s 0070                    ___fladd@signs 00C5  
                controller@timer 0045                     ___fladd@aexp 00C6                     ___fladd@bexp 00C7  
                 controller@idle 0169                   ??_getNextState 0043             __Umul8_16@multiplier 0034  
              __Umul8_16@product 0030                  _g_screenRefresh 0063  
